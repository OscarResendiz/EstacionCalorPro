
EstacionAireProM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000145f0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001df0  08014790  08014790  00015790  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016580  08016580  000181d8  2**0
                  CONTENTS
  4 .ARM          00000008  08016580  08016580  00017580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016588  08016588  000181d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08016588  08016588  00017588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   0000000c  08016594  08016594  00017594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  080165a0  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000534  200001d8  08016778  000181d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000070c  08016778  0001870c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000181d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036d20  00000000  00000000  00018208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000c08c  00000000  00000000  0004ef28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002e40  00000000  00000000  0005afb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000022d4  00000000  00000000  0005ddf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000264a6  00000000  00000000  000600cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00040fb1  00000000  00000000  00086572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000adc1b  00000000  00000000  000c7523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  0017513e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c81c  00000000  00000000  001751c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001819e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08014778 	.word	0x08014778

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08014778 	.word	0x08014778

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_ldivmod>:
 8000bb8:	b97b      	cbnz	r3, 8000bda <__aeabi_ldivmod+0x22>
 8000bba:	b972      	cbnz	r2, 8000bda <__aeabi_ldivmod+0x22>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bfbe      	ittt	lt
 8000bc0:	2000      	movlt	r0, #0
 8000bc2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bc6:	e006      	blt.n	8000bd6 <__aeabi_ldivmod+0x1e>
 8000bc8:	bf08      	it	eq
 8000bca:	2800      	cmpeq	r0, #0
 8000bcc:	bf1c      	itt	ne
 8000bce:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000bd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd6:	f000 b9b5 	b.w	8000f44 <__aeabi_idiv0>
 8000bda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be2:	2900      	cmp	r1, #0
 8000be4:	db09      	blt.n	8000bfa <__aeabi_ldivmod+0x42>
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	db1a      	blt.n	8000c20 <__aeabi_ldivmod+0x68>
 8000bea:	f000 f84d 	bl	8000c88 <__udivmoddi4>
 8000bee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf6:	b004      	add	sp, #16
 8000bf8:	4770      	bx	lr
 8000bfa:	4240      	negs	r0, r0
 8000bfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	db1b      	blt.n	8000c3c <__aeabi_ldivmod+0x84>
 8000c04:	f000 f840 	bl	8000c88 <__udivmoddi4>
 8000c08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c10:	b004      	add	sp, #16
 8000c12:	4240      	negs	r0, r0
 8000c14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c18:	4252      	negs	r2, r2
 8000c1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c1e:	4770      	bx	lr
 8000c20:	4252      	negs	r2, r2
 8000c22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c26:	f000 f82f 	bl	8000c88 <__udivmoddi4>
 8000c2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c32:	b004      	add	sp, #16
 8000c34:	4240      	negs	r0, r0
 8000c36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3a:	4770      	bx	lr
 8000c3c:	4252      	negs	r2, r2
 8000c3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c42:	f000 f821 	bl	8000c88 <__udivmoddi4>
 8000c46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4e:	b004      	add	sp, #16
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <_ZN15CManejadorBotonC1Ev>:

#include "Boton/CManejadorBoton.hpp"
#include "Constantes.hpp"
#include "Uart/Uart.hpp"

CManejadorBoton::CManejadorBoton()
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	4a0c      	ldr	r2, [pc, #48]	@ (8000f84 <_ZN15CManejadorBotonC1Ev+0x3c>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2201      	movs	r2, #1
 8000f5a:	60da      	str	r2, [r3, #12]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	611a      	str	r2, [r3, #16]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	615a      	str	r2, [r3, #20]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	619a      	str	r2, [r3, #24]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	61da      	str	r2, [r3, #28]
{
	// TODO Auto-generated constructor stub

}
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4618      	mov	r0, r3
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	08014ca0 	.word	0x08014ca0

08000f88 <_ZN15CManejadorBotonD1Ev>:

CManejadorBoton::~CManejadorBoton()
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	4a04      	ldr	r2, [pc, #16]	@ (8000fa4 <_ZN15CManejadorBotonD1Ev+0x1c>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	08014ca0 	.word	0x08014ca0

08000fa8 <_ZN15CManejadorBotonD0Ev>:
CManejadorBoton::~CManejadorBoton()
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
}
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff ffe9 	bl	8000f88 <_ZN15CManejadorBotonD1Ev>
 8000fb6:	2120      	movs	r1, #32
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f010 fd67 	bl	8011a8c <_ZdlPvj>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>:

void CManejadorBoton::Configurar(GPIO_TypeDef *puerto, uint16_t pin,uint8_t identificador)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	80fb      	strh	r3, [r7, #6]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	717b      	strb	r3, [r7, #5]
	GPIO_Port = puerto;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	68ba      	ldr	r2, [r7, #8]
 8000fe2:	605a      	str	r2, [r3, #4]
	Gpio_Pin = pin;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	88fa      	ldrh	r2, [r7, #6]
 8000fe8:	811a      	strh	r2, [r3, #8]
	Identificador = identificador;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	797a      	ldrb	r2, [r7, #5]
 8000fee:	729a      	strb	r2, [r3, #10]
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <_ZN15CManejadorBoton4InitEv>:
void CManejadorBoton::Init()
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
	{ 0 };
	GPIO_InitStruct.Pin = Gpio_Pin;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	891b      	ldrh	r3, [r3, #8]
 8001018:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f107 020c 	add.w	r2, r7, #12
 800102a:	4611      	mov	r1, r2
 800102c:	4618      	mov	r0, r3
 800102e:	f00d f875 	bl	800e11c <HAL_GPIO_Init>
}
 8001032:	bf00      	nop
 8001034:	3720      	adds	r7, #32
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <_ZN15CManejadorBoton4LeerEv>:
int CManejadorBoton::Leer()
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(GPIO_Port, Gpio_Pin); // lee el pin
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	891b      	ldrh	r3, [r3, #8]
 800104a:	4619      	mov	r1, r3
 800104c:	4610      	mov	r0, r2
 800104e:	f00d f9e9 	bl	800e424 <HAL_GPIO_ReadPin>
 8001052:	4603      	mov	r3, r0

}
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>:
void CManejadorBoton::AsignaManejadorEventos(CManejadorEventosBoton *manejador)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
	Manejador = manejador;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	683a      	ldr	r2, [r7, #0]
 800106a:	61da      	str	r2, [r3, #28]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <_ZN15CManejadorBoton7ProcesaEi>:
void CManejadorBoton::Procesa(int gpio_pin)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
	if (Manejador == NULL)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d02e      	beq.n	80010e8 <_ZN15CManejadorBoton7ProcesaEi+0x70>
		return;
	if(gpio_pin!=Gpio_Pin)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	891b      	ldrh	r3, [r3, #8]
 800108e:	461a      	mov	r2, r3
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	4293      	cmp	r3, r2
 8001094:	d12a      	bne.n	80010ec <_ZN15CManejadorBoton7ProcesaEi+0x74>
		return;
	int estado = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
	estado = Leer();
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff ffcd 	bl	800103a <_ZN15CManejadorBoton4LeerEv>
 80010a0:	60f8      	str	r0, [r7, #12]
	//leo el tiempo actual
	int tiempo = HAL_GetTick();
 80010a2:	f00c fbc5 	bl	800d830 <HAL_GetTick>
 80010a6:	4603      	mov	r3, r0
 80010a8:	60bb      	str	r3, [r7, #8]
	if ((tiempo - ReboteMilis) < TIEMPO_REBOTE)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2bc7      	cmp	r3, #199	@ 0xc7
 80010b4:	dd1c      	ble.n	80010f0 <_ZN15CManejadorBoton7ProcesaEi+0x78>
	{
		//como todavia no pasa el tiempo de espera para evitar rebotes no hago nada
		return;
	}
	ReboteMilis = HAL_GetTick();  //leo el tiempo actual
 80010b6:	f00c fbbb 	bl	800d830 <HAL_GetTick>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	615a      	str	r2, [r3, #20]

	//ya filtre los rebotes, por lo que ahora si informo del cambio de estado del boton
	Estado = estado;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	60da      	str	r2, [r3, #12]
	if (Estado == BOTON_SUELTO)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d110      	bne.n	80010f2 <_ZN15CManejadorBoton7ProcesaEi+0x7a>
	{
		Manejador->OnBotonClickEvent(Identificador);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	69d8      	ldr	r0, [r3, #28]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	69db      	ldr	r3, [r3, #28]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	3308      	adds	r3, #8
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	7a92      	ldrb	r2, [r2, #10]
 80010e2:	4611      	mov	r1, r2
 80010e4:	4798      	blx	r3
 80010e6:	e004      	b.n	80010f2 <_ZN15CManejadorBoton7ProcesaEi+0x7a>
		return;
 80010e8:	bf00      	nop
 80010ea:	e002      	b.n	80010f2 <_ZN15CManejadorBoton7ProcesaEi+0x7a>
		return;
 80010ec:	bf00      	nop
 80010ee:	e000      	b.n	80010f2 <_ZN15CManejadorBoton7ProcesaEi+0x7a>
		return;
 80010f0:	bf00      	nop
	}
}
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <_ZN22CManejadorEventosBotonC1Ev>:
 *      Author: W10
 */

#include "Boton/CManejadorEventosBoton.hpp"

CManejadorEventosBoton::CManejadorEventosBoton()
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	4a04      	ldr	r2, [pc, #16]	@ (8001114 <_ZN22CManejadorEventosBotonC1Ev+0x1c>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	08014cb0 	.word	0x08014cb0

08001118 <_ZN22CManejadorEventosBotonD1Ev>:

CManejadorEventosBoton::~CManejadorEventosBoton()
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	4a04      	ldr	r2, [pc, #16]	@ (8001134 <_ZN22CManejadorEventosBotonD1Ev+0x1c>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	08014cb0 	.word	0x08014cb0

08001138 <_ZN22CManejadorEventosBotonD0Ev>:
CManejadorEventosBoton::~CManejadorEventosBoton()
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
}
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ffe9 	bl	8001118 <_ZN22CManejadorEventosBotonD1Ev>
 8001146:	2104      	movs	r1, #4
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f010 fc9f 	bl	8011a8c <_ZdlPvj>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4618      	mov	r0, r3
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <_ZN22CManejadorEventosBoton17OnBotonClickEventEi>:

void CManejadorEventosBoton::OnBotonClickEvent(int idBoton)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]

}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
	...

08001170 <_ZN10CalefactorC1Ev>:
 *      Author: W10
 */

#include <Calefactor/Calefactor.hpp>
#include "Uart/Uart.hpp"
Calefactor::Calefactor()
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	4a06      	ldr	r2, [pc, #24]	@ (8001194 <_ZN10CalefactorC1Ev+0x24>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	60da      	str	r2, [r3, #12]
{
	// TODO Auto-generated constructor stub

}
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4618      	mov	r0, r3
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	08014cc4 	.word	0x08014cc4

08001198 <_ZN10CalefactorD1Ev>:

Calefactor::~Calefactor()
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	4a04      	ldr	r2, [pc, #16]	@ (80011b4 <_ZN10CalefactorD1Ev+0x1c>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4618      	mov	r0, r3
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	08014cc4 	.word	0x08014cc4

080011b8 <_ZN10CalefactorD0Ev>:
Calefactor::~Calefactor()
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
}
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ffe9 	bl	8001198 <_ZN10CalefactorD1Ev>
 80011c6:	2110      	movs	r1, #16
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f010 fc5f 	bl	8011a8c <_ZdlPvj>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <_ZN10Calefactor10ConfigurarEP12GPIO_TypeDeft>:

void Calefactor::Configurar(GPIO_TypeDef *puerto, uint16_t pin)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	4613      	mov	r3, r2
 80011e4:	80fb      	strh	r3, [r7, #6]
	GPIO_Port = puerto;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	68ba      	ldr	r2, [r7, #8]
 80011ea:	605a      	str	r2, [r3, #4]
	Gpio_Pin = pin;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	88fa      	ldrh	r2, [r7, #6]
 80011f0:	811a      	strh	r2, [r3, #8]

}
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <_ZN10Calefactor4InitEv>:
void Calefactor::Init()
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b088      	sub	sp, #32
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =	{ 0 };
 8001206:	f107 030c 	add.w	r3, r7, #12
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = Gpio_Pin;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	891b      	ldrh	r3, [r3, #8]
 800121a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121c:	2301      	movs	r3, #1
 800121e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	2300      	movs	r3, #0
 8001226:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f107 020c 	add.w	r2, r7, #12
 8001230:	4611      	mov	r1, r2
 8001232:	4618      	mov	r0, r3
 8001234:	f00c ff72 	bl	800e11c <HAL_GPIO_Init>
	Apagar();
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f000 f817 	bl	800126c <_ZN10Calefactor6ApagarEv>
}
 800123e:	bf00      	nop
 8001240:	3720      	adds	r7, #32
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <_ZN10Calefactor8EncenderEv>:
void Calefactor::Encender()
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO_Port, Gpio_Pin,	GPIO_PinState::GPIO_PIN_SET);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6858      	ldr	r0, [r3, #4]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	891b      	ldrh	r3, [r3, #8]
 8001256:	2201      	movs	r2, #1
 8001258:	4619      	mov	r1, r3
 800125a:	f00d f8fb 	bl	800e454 <HAL_GPIO_WritePin>
	Estado=ENCENDIDO;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2201      	movs	r2, #1
 8001262:	60da      	str	r2, [r3, #12]
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <_ZN10Calefactor6ApagarEv>:
void Calefactor::Apagar()
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO_Port, Gpio_Pin,	GPIO_PinState::GPIO_PIN_RESET);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6858      	ldr	r0, [r3, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	891b      	ldrh	r3, [r3, #8]
 800127c:	2200      	movs	r2, #0
 800127e:	4619      	mov	r1, r3
 8001280:	f00d f8e8 	bl	800e454 <HAL_GPIO_WritePin>
	Estado=APAGADO;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <_ZN20ControlVelocidadAireC1Ev>:

#include "ControlVelocidadAire.hpp"
#include "stm32f4xx.h"
//#include "stm32f1xx_hal_adc.h"

ControlVelocidadAire::ControlVelocidadAire()
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	4a04      	ldr	r2, [pc, #16]	@ (80012b0 <_ZN20ControlVelocidadAireC1Ev+0x1c>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4618      	mov	r0, r3
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	08014cd4 	.word	0x08014cd4

080012b4 <_ZN20ControlVelocidadAireD1Ev>:

ControlVelocidadAire::~ControlVelocidadAire()
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	4a04      	ldr	r2, [pc, #16]	@ (80012d0 <_ZN20ControlVelocidadAireD1Ev+0x1c>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4618      	mov	r0, r3
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	08014cd4 	.word	0x08014cd4

080012d4 <_ZN20ControlVelocidadAireD0Ev>:
ControlVelocidadAire::~ControlVelocidadAire()
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
}
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ffe9 	bl	80012b4 <_ZN20ControlVelocidadAireD1Ev>
 80012e2:	214c      	movs	r1, #76	@ 0x4c
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f010 fbd1 	bl	8011a8c <_ZdlPvj>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4618      	mov	r0, r3
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <_ZN20ControlVelocidadAire10InicializaEv>:

void ControlVelocidadAire::Inicializa()
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	4b36      	ldr	r3, [pc, #216]	@ (80013dc <_ZN20ControlVelocidadAire10InicializaEv+0xe8>)
 8001302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001304:	4a35      	ldr	r2, [pc, #212]	@ (80013dc <_ZN20ControlVelocidadAire10InicializaEv+0xe8>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	6313      	str	r3, [r2, #48]	@ 0x30
 800130c:	4b33      	ldr	r3, [pc, #204]	@ (80013dc <_ZN20ControlVelocidadAire10InicializaEv+0xe8>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	68fb      	ldr	r3, [r7, #12]
	 ADC_ChannelConfTypeDef sConfig = {0};
 8001318:	f107 0310 	add.w	r3, r7, #16
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
	 hadc1.Instance = ADC1;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a2d      	ldr	r2, [pc, #180]	@ (80013e0 <_ZN20ControlVelocidadAire10InicializaEv+0xec>)
 800132a:	605a      	str	r2, [r3, #4]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2; //NUEVO
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B; //nuevo
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	60da      	str	r2, [r3, #12]

	 hadc1.Init.ScanConvMode =  DISABLE;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	615a      	str	r2, [r3, #20]
	 hadc1.Init.ContinuousConvMode = ENABLE;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2201      	movs	r2, #1
 8001342:	771a      	strb	r2, [r3, #28]
	 hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	 hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;//nuevo
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	631a      	str	r2, [r3, #48]	@ 0x30
	 hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a23      	ldr	r2, [pc, #140]	@ (80013e4 <_ZN20ControlVelocidadAire10InicializaEv+0xf0>)
 8001356:	62da      	str	r2, [r3, #44]	@ 0x2c
	 hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	611a      	str	r2, [r3, #16]
	 hadc1.State=	 HAL_ADC_STATE_RESET;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	645a      	str	r2, [r3, #68]	@ 0x44
	 hadc1.Init.NbrOfConversion = 1;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	621a      	str	r2, [r3, #32]
	  hadc1.Init.DMAContinuousRequests = DISABLE; //nuevo
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	619a      	str	r2, [r3, #24]

	 if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3304      	adds	r3, #4
 800137c:	4618      	mov	r0, r3
 800137e:	f00c fa87 	bl	800d890 <HAL_ADC_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	bf14      	ite	ne
 8001388:	2301      	movne	r3, #1
 800138a:	2300      	moveq	r3, #0
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	d002      	beq.n	8001398 <_ZN20ControlVelocidadAire10InicializaEv+0xa4>
	 {
	 Error_Handler();
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 f84e 	bl	8001434 <_ZN20ControlVelocidadAire13Error_HandlerEv>
	 }

	 sConfig.Channel = ADC_CHANNEL_3;
 8001398:	2303      	movs	r3, #3
 800139a:	613b      	str	r3, [r7, #16]
	 sConfig.Rank =1; // ADC_REGULAR_RANK_1;
 800139c:	2301      	movs	r3, #1
 800139e:	617b      	str	r3, [r7, #20]
	 sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES; //ADC_SAMPLETIME_239CYCLES_5;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61bb      	str	r3, [r7, #24]
	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3304      	adds	r3, #4
 80013a8:	f107 0210 	add.w	r2, r7, #16
 80013ac:	4611      	mov	r1, r2
 80013ae:	4618      	mov	r0, r3
 80013b0:	f00c fb74 	bl	800da9c <HAL_ADC_ConfigChannel>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	bf14      	ite	ne
 80013ba:	2301      	movne	r3, #1
 80013bc:	2300      	moveq	r3, #0
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d002      	beq.n	80013ca <_ZN20ControlVelocidadAire10InicializaEv+0xd6>
	 {
	 Error_Handler();
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f000 f835 	bl	8001434 <_ZN20ControlVelocidadAire13Error_HandlerEv>
	 }
	 HAL_ADC_Start(&hadc1);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3304      	adds	r3, #4
 80013ce:	4618      	mov	r0, r3
 80013d0:	f00c faa2 	bl	800d918 <HAL_ADC_Start>
}
 80013d4:	bf00      	nop
 80013d6:	3720      	adds	r7, #32
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40012000 	.word	0x40012000
 80013e4:	0f000001 	.word	0x0f000001

080013e8 <_ZN20ControlVelocidadAire12LeeVelocidadEv>:
int ControlVelocidadAire::LeeVelocidad()
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	Inicializa();
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff ff7f 	bl	80012f4 <_ZN20ControlVelocidadAire10InicializaEv>
	HAL_ADC_Start(&hadc1);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3304      	adds	r3, #4
 80013fa:	4618      	mov	r0, r3
 80013fc:	f00c fa8c 	bl	800d918 <HAL_ADC_Start>
	int valor=HAL_ADC_GetValue(&hadc1);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3304      	adds	r3, #4
 8001404:	4618      	mov	r0, r3
 8001406:	f00c fb3b 	bl	800da80 <HAL_ADC_GetValue>
 800140a:	4603      	mov	r3, r0
 800140c:	60fb      	str	r3, [r7, #12]
	//4095->100
	//valor->X
	//x=valor*100/4095
	return 	100-(int)(valor*100/4095);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2264      	movs	r2, #100	@ 0x64
 8001412:	fb02 f303 	mul.w	r3, r2, r3
 8001416:	4a06      	ldr	r2, [pc, #24]	@ (8001430 <_ZN20ControlVelocidadAire12LeeVelocidadEv+0x48>)
 8001418:	fb82 1203 	smull	r1, r2, r2, r3
 800141c:	441a      	add	r2, r3
 800141e:	12d2      	asrs	r2, r2, #11
 8001420:	17db      	asrs	r3, r3, #31
 8001422:	1a9b      	subs	r3, r3, r2
 8001424:	3364      	adds	r3, #100	@ 0x64
}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	80080081 	.word	0x80080081

08001434 <_ZN20ControlVelocidadAire13Error_HandlerEv>:
void ControlVelocidadAire::Error_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]

}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <_ZN6CEpromC1Ev>:
#include <EPROM/CEprom.hpp>
#include "stm32f4xx.h"
#include "stm32f4xx_hal_conf.h"
extern I2C_HandleTypeDef hi2c1;

CEprom::CEprom()
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	4a23      	ldr	r2, [pc, #140]	@ (80014e0 <_ZN6CEpromC1Ev+0x98>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2202      	movs	r2, #2
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2204      	movs	r2, #4
 800146e:	611a      	str	r2, [r3, #16]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2208      	movs	r2, #8
 8001474:	615a      	str	r2, [r3, #20]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	220c      	movs	r2, #12
 800147a:	619a      	str	r2, [r3, #24]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2210      	movs	r2, #16
 8001480:	61da      	str	r2, [r3, #28]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2212      	movs	r2, #18
 8001486:	621a      	str	r2, [r3, #32]
{
	// TODO Auto-generated constructor stub
	Diferencia = -1;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f04f 32ff 	mov.w	r2, #4294967295
 800148e:	625a      	str	r2, [r3, #36]	@ 0x24
	TemperaturaManual = -1;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f04f 32ff 	mov.w	r2, #4294967295
 8001496:	629a      	str	r2, [r3, #40]	@ 0x28
	Memoria1_Temperatura = -1;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f04f 32ff 	mov.w	r2, #4294967295
 800149e:	62da      	str	r2, [r3, #44]	@ 0x2c
	Memoria1_VelocidadAire = -1;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f04f 32ff 	mov.w	r2, #4294967295
 80014a6:	631a      	str	r2, [r3, #48]	@ 0x30
	Memoria2_Temperatura = -1;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f04f 32ff 	mov.w	r2, #4294967295
 80014ae:	635a      	str	r2, [r3, #52]	@ 0x34
	Memoria2_VelocidadAire = -1;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f04f 32ff 	mov.w	r2, #4294967295
 80014b6:	639a      	str	r2, [r3, #56]	@ 0x38
	Memoria3_Temperatura = -1;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f04f 32ff 	mov.w	r2, #4294967295
 80014be:	63da      	str	r2, [r3, #60]	@ 0x3c
	Memoria3_VelocidadAire = -1;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f04f 32ff 	mov.w	r2, #4294967295
 80014c6:	641a      	str	r2, [r3, #64]	@ 0x40
	NRampas=-1;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f04f 32ff 	mov.w	r2, #4294967295
 80014ce:	645a      	str	r2, [r3, #68]	@ 0x44

}
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4618      	mov	r0, r3
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	08014ce4 	.word	0x08014ce4

080014e4 <_ZN6CEpromD1Ev>:

CEprom::~CEprom()
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	4a04      	ldr	r2, [pc, #16]	@ (8001500 <_ZN6CEpromD1Ev+0x1c>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4618      	mov	r0, r3
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	08014ce4 	.word	0x08014ce4

08001504 <_ZN6CEpromD0Ev>:
CEprom::~CEprom()
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
}
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff ffe9 	bl	80014e4 <_ZN6CEpromD1Ev>
 8001512:	2148      	movs	r1, #72	@ 0x48
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f010 fab9 	bl	8011a8c <_ZdlPvj>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4618      	mov	r0, r3
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <_ZN6CEprom21DameTemperaturaManualEv>:

int CEprom::DameTemperaturaManual()
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af04      	add	r7, sp, #16
 800152a:	6078      	str	r0, [r7, #4]
	if (TemperaturaManual != -1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001534:	d002      	beq.n	800153c <_ZN6CEprom21DameTemperaturaManualEv+0x18>
		return TemperaturaManual;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800153a:	e029      	b.n	8001590 <_ZN6CEprom21DameTemperaturaManualEv+0x6c>
	uint16_t temperatura;
	if (HAL_I2C_Mem_Read(&hi2c1, DameDireccionAlta(TEMPERATURAMANUAL), TEMPERATURAMANUAL, I2C_MEMADD_SIZE_8BIT, (uint8_t*) &temperatura, 2, HAL_MAX_DELAY) == HAL_OK)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	b29b      	uxth	r3, r3
 8001542:	4619      	mov	r1, r3
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f000 fb2b 	bl	8001ba0 <_ZN6CEprom17DameDireccionAltaEt>
 800154a:	4603      	mov	r3, r0
 800154c:	4619      	mov	r1, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	b29a      	uxth	r2, r3
 8001554:	f04f 33ff 	mov.w	r3, #4294967295
 8001558:	9302      	str	r3, [sp, #8]
 800155a:	2302      	movs	r3, #2
 800155c:	9301      	str	r3, [sp, #4]
 800155e:	f107 030e 	add.w	r3, r7, #14
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	2301      	movs	r3, #1
 8001566:	480c      	ldr	r0, [pc, #48]	@ (8001598 <_ZN6CEprom21DameTemperaturaManualEv+0x74>)
 8001568:	f00d f9e4 	bl	800e934 <HAL_I2C_Mem_Read>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	bf0c      	ite	eq
 8001572:	2301      	moveq	r3, #1
 8001574:	2300      	movne	r3, #0
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	d007      	beq.n	800158c <_ZN6CEprom21DameTemperaturaManualEv+0x68>
	{
		if (temperatura >= 0 && temperatura <= 500)
 800157c:	89fb      	ldrh	r3, [r7, #14]
 800157e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001582:	d803      	bhi.n	800158c <_ZN6CEprom21DameTemperaturaManualEv+0x68>
		{
			TemperaturaManual = temperatura;
 8001584:	89fb      	ldrh	r3, [r7, #14]
 8001586:	461a      	mov	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	629a      	str	r2, [r3, #40]	@ 0x28
		}
	}
	return TemperaturaManual;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8001590:	4618      	mov	r0, r3
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	200003d8 	.word	0x200003d8

0800159c <_ZN6CEprom23GuardaTemepraturaManualEi>:

void CEprom::GuardaTemepraturaManual(int temperatura)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af04      	add	r7, sp, #16
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
	TemperaturaManual = temperatura;
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_I2C_Mem_Write(&hi2c1, DameDireccionAlta(TEMPERATURAMANUAL), TEMPERATURAMANUAL, I2C_MEMADD_SIZE_8BIT, (uint8_t*) &temperatura, 2, HAL_MAX_DELAY);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	4619      	mov	r1, r3
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f000 faf3 	bl	8001ba0 <_ZN6CEprom17DameDireccionAltaEt>
 80015ba:	4603      	mov	r3, r0
 80015bc:	4619      	mov	r1, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	f04f 33ff 	mov.w	r3, #4294967295
 80015c8:	9302      	str	r3, [sp, #8]
 80015ca:	2302      	movs	r3, #2
 80015cc:	9301      	str	r3, [sp, #4]
 80015ce:	463b      	mov	r3, r7
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	2301      	movs	r3, #1
 80015d4:	4803      	ldr	r0, [pc, #12]	@ (80015e4 <_ZN6CEprom23GuardaTemepraturaManualEi+0x48>)
 80015d6:	f00d f8b3 	bl	800e740 <HAL_I2C_Mem_Write>
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	200003d8 	.word	0x200003d8

080015e8 <_ZN6CEprom21DameAjusteTemperaturaEv>:

int CEprom::DameAjusteTemperatura()
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af04      	add	r7, sp, #16
 80015ee:	6078      	str	r0, [r7, #4]
	if (Diferencia != -1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f8:	d002      	beq.n	8001600 <_ZN6CEprom21DameAjusteTemperaturaEv+0x18>
		return Diferencia;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015fe:	e032      	b.n	8001666 <_ZN6CEprom21DameAjusteTemperaturaEv+0x7e>
	if (HAL_I2C_Mem_Read(&hi2c1, DameDireccionAlta(AJUSTETEMPERATURA), AJUSTETEMPERATURA, I2C_MEMADD_SIZE_8BIT, (uint8_t*) &Diferencia, 2, HAL_MAX_DELAY) == HAL_OK)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	b29b      	uxth	r3, r3
 8001606:	4619      	mov	r1, r3
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f000 fac9 	bl	8001ba0 <_ZN6CEprom17DameDireccionAltaEt>
 800160e:	4603      	mov	r3, r0
 8001610:	4618      	mov	r0, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	b29a      	uxth	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3324      	adds	r3, #36	@ 0x24
 800161c:	f04f 31ff 	mov.w	r1, #4294967295
 8001620:	9102      	str	r1, [sp, #8]
 8001622:	2102      	movs	r1, #2
 8001624:	9101      	str	r1, [sp, #4]
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	2301      	movs	r3, #1
 800162a:	4601      	mov	r1, r0
 800162c:	4810      	ldr	r0, [pc, #64]	@ (8001670 <_ZN6CEprom21DameAjusteTemperaturaEv+0x88>)
 800162e:	f00d f981 	bl	800e934 <HAL_I2C_Mem_Read>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	bf0c      	ite	eq
 8001638:	2301      	moveq	r3, #1
 800163a:	2300      	movne	r3, #0
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00c      	beq.n	800165c <_ZN6CEprom21DameAjusteTemperaturaEv+0x74>
	{
		if (Diferencia >= -500 && Diferencia <= 500)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001646:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 800164a:	db07      	blt.n	800165c <_ZN6CEprom21DameAjusteTemperaturaEv+0x74>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001650:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001654:	dc02      	bgt.n	800165c <_ZN6CEprom21DameAjusteTemperaturaEv+0x74>
		{
			return Diferencia;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165a:	e004      	b.n	8001666 <_ZN6CEprom21DameAjusteTemperaturaEv+0x7e>
		}
	}
	Diferencia = 0;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	625a      	str	r2, [r3, #36]	@ 0x24
	return Diferencia;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200003d8 	.word	0x200003d8

08001674 <_ZN6CEprom23GuardaAjusteTemperaturaEi>:

void CEprom::GuardaAjusteTemperatura(int diferencia)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af04      	add	r7, sp, #16
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
	Diferencia=diferencia;
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_I2C_Mem_Write(&hi2c1,DameDireccionAlta(AJUSTETEMPERATURA),AJUSTETEMPERATURA,I2C_MEMADD_SIZE_8BIT,(uint8_t*)&diferencia,2,HAL_MAX_DELAY);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	b29b      	uxth	r3, r3
 800168a:	4619      	mov	r1, r3
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 fa87 	bl	8001ba0 <_ZN6CEprom17DameDireccionAltaEt>
 8001692:	4603      	mov	r3, r0
 8001694:	4619      	mov	r1, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	b29a      	uxth	r2, r3
 800169c:	f04f 33ff 	mov.w	r3, #4294967295
 80016a0:	9302      	str	r3, [sp, #8]
 80016a2:	2302      	movs	r3, #2
 80016a4:	9301      	str	r3, [sp, #4]
 80016a6:	463b      	mov	r3, r7
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	2301      	movs	r3, #1
 80016ac:	4803      	ldr	r0, [pc, #12]	@ (80016bc <_ZN6CEprom23GuardaAjusteTemperaturaEi+0x48>)
 80016ae:	f00d f847 	bl	800e740 <HAL_I2C_Mem_Write>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200003d8 	.word	0x200003d8

080016c0 <_ZN6CEprom23DameTemperatuarMemoria1Ev>:

int CEprom::DameTemperatuarMemoria1()
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	if (Memoria1_Temperatura == -1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d0:	d102      	bne.n	80016d8 <_ZN6CEprom23DameTemperatuarMemoria1Ev+0x18>
		LeeMemoria1();
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f000 f8f0 	bl	80018b8 <_ZN6CEprom11LeeMemoria1Ev>
	return Memoria1_Temperatura;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c

}
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <_ZN6CEprom21DameVelocidadMemoria1Ev>:

int CEprom::DameVelocidadMemoria1()
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	if (Memoria1_VelocidadAire == -1)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f4:	d102      	bne.n	80016fc <_ZN6CEprom21DameVelocidadMemoria1Ev+0x18>
		LeeMemoria1();
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 f8de 	bl	80018b8 <_ZN6CEprom11LeeMemoria1Ev>
	return Memoria1_VelocidadAire;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
}
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <_ZN6CEprom14GuardaMemoria1Eii>:

void CEprom::GuardaMemoria1(int temperatura, int velocidad)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	@ 0x28
 800170c:	af04      	add	r7, sp, #16
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
	Memoria1_Temperatura = temperatura;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	62da      	str	r2, [r3, #44]	@ 0x2c
	Memoria1_VelocidadAire = velocidad;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	631a      	str	r2, [r3, #48]	@ 0x30
	uint16_t datos_w[2];
	datos_w[0] = temperatura;
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	b29b      	uxth	r3, r3
 8001724:	82bb      	strh	r3, [r7, #20]
	datos_w[1] = velocidad;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	b29b      	uxth	r3, r3
 800172a:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Write(&hi2c1, DameDireccionAlta(MEMORIA1), MEMORIA1, I2C_MEMADD_SIZE_8BIT, (uint8_t*) datos_w, 4, HAL_MAX_DELAY);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	b29b      	uxth	r3, r3
 8001732:	4619      	mov	r1, r3
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f000 fa33 	bl	8001ba0 <_ZN6CEprom17DameDireccionAltaEt>
 800173a:	4603      	mov	r3, r0
 800173c:	4619      	mov	r1, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	b29a      	uxth	r2, r3
 8001744:	f04f 33ff 	mov.w	r3, #4294967295
 8001748:	9302      	str	r3, [sp, #8]
 800174a:	2304      	movs	r3, #4
 800174c:	9301      	str	r3, [sp, #4]
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	2301      	movs	r3, #1
 8001756:	4803      	ldr	r0, [pc, #12]	@ (8001764 <_ZN6CEprom14GuardaMemoria1Eii+0x5c>)
 8001758:	f00c fff2 	bl	800e740 <HAL_I2C_Mem_Write>

}
 800175c:	bf00      	nop
 800175e:	3718      	adds	r7, #24
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	200003d8 	.word	0x200003d8

08001768 <_ZN6CEprom23DameTemperatuarMemoria2Ev>:

int CEprom::DameTemperatuarMemoria2()
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
	if (Memoria2_Temperatura == -1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001778:	d102      	bne.n	8001780 <_ZN6CEprom23DameTemperatuarMemoria2Ev+0x18>
		LeeMemoria2();
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 f8e6 	bl	800194c <_ZN6CEprom11LeeMemoria2Ev>
	return Memoria2_Temperatura;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34

}
 8001784:	4618      	mov	r0, r3
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <_ZN6CEprom21DameVelocidadMemoria2Ev>:

int CEprom::DameVelocidadMemoria2()
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
	if (Memoria2_VelocidadAire == -1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800179c:	d102      	bne.n	80017a4 <_ZN6CEprom21DameVelocidadMemoria2Ev+0x18>
		LeeMemoria2();
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 f8d4 	bl	800194c <_ZN6CEprom11LeeMemoria2Ev>
	return Memoria2_VelocidadAire;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <_ZN6CEprom14GuardaMemoria2Eii>:

void CEprom::GuardaMemoria2(int temperatura, int velocidad)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	@ 0x28
 80017b4:	af04      	add	r7, sp, #16
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
	Memoria2_Temperatura = temperatura;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	635a      	str	r2, [r3, #52]	@ 0x34
	Memoria2_VelocidadAire = velocidad;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	639a      	str	r2, [r3, #56]	@ 0x38
	uint16_t datos_w[2];
	datos_w[0] = temperatura;
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	82bb      	strh	r3, [r7, #20]
	datos_w[1] = velocidad;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Write(&hi2c1, DameDireccionAlta(MEMORIA2), MEMORIA2, I2C_MEMADD_SIZE_8BIT, (uint8_t*) datos_w, 4, HAL_MAX_DELAY);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	695b      	ldr	r3, [r3, #20]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	4619      	mov	r1, r3
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f000 f9df 	bl	8001ba0 <_ZN6CEprom17DameDireccionAltaEt>
 80017e2:	4603      	mov	r3, r0
 80017e4:	4619      	mov	r1, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	f04f 33ff 	mov.w	r3, #4294967295
 80017f0:	9302      	str	r3, [sp, #8]
 80017f2:	2304      	movs	r3, #4
 80017f4:	9301      	str	r3, [sp, #4]
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	2301      	movs	r3, #1
 80017fe:	4803      	ldr	r0, [pc, #12]	@ (800180c <_ZN6CEprom14GuardaMemoria2Eii+0x5c>)
 8001800:	f00c ff9e 	bl	800e740 <HAL_I2C_Mem_Write>

}
 8001804:	bf00      	nop
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	200003d8 	.word	0x200003d8

08001810 <_ZN6CEprom23DameTemperatuarMemoria3Ev>:

int CEprom::DameTemperatuarMemoria3()
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	if (Memoria3_Temperatura == -1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800181c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001820:	d102      	bne.n	8001828 <_ZN6CEprom23DameTemperatuarMemoria3Ev+0x18>
		LeeMemoria3();
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f8dc 	bl	80019e0 <_ZN6CEprom11LeeMemoria3Ev>
	return Memoria3_Temperatura;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c

}
 800182c:	4618      	mov	r0, r3
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <_ZN6CEprom21DameVelocidadMemoria3Ev>:
int CEprom::DameVelocidadMemoria3()
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
	if (Memoria3_VelocidadAire == -1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001844:	d102      	bne.n	800184c <_ZN6CEprom21DameVelocidadMemoria3Ev+0x18>
		LeeMemoria3();
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 f8ca 	bl	80019e0 <_ZN6CEprom11LeeMemoria3Ev>
	return Memoria3_VelocidadAire;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <_ZN6CEprom14GuardaMemoria3Eii>:
void CEprom::GuardaMemoria3(int temperatura, int velocidad)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08a      	sub	sp, #40	@ 0x28
 800185c:	af04      	add	r7, sp, #16
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
	Memoria3_Temperatura = temperatura;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	63da      	str	r2, [r3, #60]	@ 0x3c
	Memoria3_VelocidadAire = velocidad;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	641a      	str	r2, [r3, #64]	@ 0x40
	uint16_t datos_w[2];
	datos_w[0] = temperatura;
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	b29b      	uxth	r3, r3
 8001874:	82bb      	strh	r3, [r7, #20]
	datos_w[1] = velocidad;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	b29b      	uxth	r3, r3
 800187a:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Write(&hi2c1, DameDireccionAlta(MEMORIA3), MEMORIA3, I2C_MEMADD_SIZE_8BIT, (uint8_t*) datos_w, 4, HAL_MAX_DELAY);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	b29b      	uxth	r3, r3
 8001882:	4619      	mov	r1, r3
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	f000 f98b 	bl	8001ba0 <_ZN6CEprom17DameDireccionAltaEt>
 800188a:	4603      	mov	r3, r0
 800188c:	4619      	mov	r1, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	b29a      	uxth	r2, r3
 8001894:	f04f 33ff 	mov.w	r3, #4294967295
 8001898:	9302      	str	r3, [sp, #8]
 800189a:	2304      	movs	r3, #4
 800189c:	9301      	str	r3, [sp, #4]
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	2301      	movs	r3, #1
 80018a6:	4803      	ldr	r0, [pc, #12]	@ (80018b4 <_ZN6CEprom14GuardaMemoria3Eii+0x5c>)
 80018a8:	f00c ff4a 	bl	800e740 <HAL_I2C_Mem_Write>
}
 80018ac:	bf00      	nop
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	200003d8 	.word	0x200003d8

080018b8 <_ZN6CEprom11LeeMemoria1Ev>:
void CEprom::LeeMemoria1()
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af04      	add	r7, sp, #16
 80018be:	6078      	str	r0, [r7, #4]
	uint16_t datos_r[2];
	if (HAL_I2C_Mem_Read(&hi2c1, DameDireccionAlta(MEMORIA1), MEMORIA1, I2C_MEMADD_SIZE_8BIT, (uint8_t*) datos_r, 4, HAL_MAX_DELAY) == HAL_OK)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	4619      	mov	r1, r3
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 f969 	bl	8001ba0 <_ZN6CEprom17DameDireccionAltaEt>
 80018ce:	4603      	mov	r3, r0
 80018d0:	4619      	mov	r1, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	f04f 33ff 	mov.w	r3, #4294967295
 80018dc:	9302      	str	r3, [sp, #8]
 80018de:	2304      	movs	r3, #4
 80018e0:	9301      	str	r3, [sp, #4]
 80018e2:	f107 030c 	add.w	r3, r7, #12
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	2301      	movs	r3, #1
 80018ea:	4817      	ldr	r0, [pc, #92]	@ (8001948 <_ZN6CEprom11LeeMemoria1Ev+0x90>)
 80018ec:	f00d f822 	bl	800e934 <HAL_I2C_Mem_Read>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	bf0c      	ite	eq
 80018f6:	2301      	moveq	r3, #1
 80018f8:	2300      	movne	r3, #0
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d01e      	beq.n	800193e <_ZN6CEprom11LeeMemoria1Ev+0x86>
	{
		Memoria1_Temperatura = datos_r[0];
 8001900:	89bb      	ldrh	r3, [r7, #12]
 8001902:	461a      	mov	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	62da      	str	r2, [r3, #44]	@ 0x2c
		Memoria1_VelocidadAire = datos_r[1];
 8001908:	89fb      	ldrh	r3, [r7, #14]
 800190a:	461a      	mov	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	631a      	str	r2, [r3, #48]	@ 0x30
		if (Memoria1_Temperatura < 0 || Memoria1_Temperatura > 500)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001914:	2b00      	cmp	r3, #0
 8001916:	db04      	blt.n	8001922 <_ZN6CEprom11LeeMemoria1Ev+0x6a>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800191c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001920:	dd02      	ble.n	8001928 <_ZN6CEprom11LeeMemoria1Ev+0x70>
		{
			Memoria1_Temperatura = 100;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2264      	movs	r2, #100	@ 0x64
 8001926:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
		if (Memoria1_VelocidadAire < 0 || Memoria1_VelocidadAire > 100)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192c:	2b00      	cmp	r3, #0
 800192e:	db03      	blt.n	8001938 <_ZN6CEprom11LeeMemoria1Ev+0x80>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001934:	2b64      	cmp	r3, #100	@ 0x64
 8001936:	dd02      	ble.n	800193e <_ZN6CEprom11LeeMemoria1Ev+0x86>
		{
			Memoria1_VelocidadAire = 50;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2232      	movs	r2, #50	@ 0x32
 800193c:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
}
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200003d8 	.word	0x200003d8

0800194c <_ZN6CEprom11LeeMemoria2Ev>:
void CEprom::LeeMemoria2()
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af04      	add	r7, sp, #16
 8001952:	6078      	str	r0, [r7, #4]
	uint16_t datos_r[2];
	if (HAL_I2C_Mem_Read(&hi2c1, DameDireccionAlta(MEMORIA2), MEMORIA2, I2C_MEMADD_SIZE_8BIT, (uint8_t*) datos_r, 4, HAL_MAX_DELAY) == HAL_OK)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	695b      	ldr	r3, [r3, #20]
 8001958:	b29b      	uxth	r3, r3
 800195a:	4619      	mov	r1, r3
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 f91f 	bl	8001ba0 <_ZN6CEprom17DameDireccionAltaEt>
 8001962:	4603      	mov	r3, r0
 8001964:	4619      	mov	r1, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	b29a      	uxth	r2, r3
 800196c:	f04f 33ff 	mov.w	r3, #4294967295
 8001970:	9302      	str	r3, [sp, #8]
 8001972:	2304      	movs	r3, #4
 8001974:	9301      	str	r3, [sp, #4]
 8001976:	f107 030c 	add.w	r3, r7, #12
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	2301      	movs	r3, #1
 800197e:	4817      	ldr	r0, [pc, #92]	@ (80019dc <_ZN6CEprom11LeeMemoria2Ev+0x90>)
 8001980:	f00c ffd8 	bl	800e934 <HAL_I2C_Mem_Read>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	bf0c      	ite	eq
 800198a:	2301      	moveq	r3, #1
 800198c:	2300      	movne	r3, #0
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b00      	cmp	r3, #0
 8001992:	d01e      	beq.n	80019d2 <_ZN6CEprom11LeeMemoria2Ev+0x86>
	{
		Memoria2_Temperatura = datos_r[0];
 8001994:	89bb      	ldrh	r3, [r7, #12]
 8001996:	461a      	mov	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	635a      	str	r2, [r3, #52]	@ 0x34
		Memoria2_VelocidadAire = datos_r[1];
 800199c:	89fb      	ldrh	r3, [r7, #14]
 800199e:	461a      	mov	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	639a      	str	r2, [r3, #56]	@ 0x38
		if (Memoria2_Temperatura < 0 || Memoria2_Temperatura > 500)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	db04      	blt.n	80019b6 <_ZN6CEprom11LeeMemoria2Ev+0x6a>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019b0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80019b4:	dd02      	ble.n	80019bc <_ZN6CEprom11LeeMemoria2Ev+0x70>
		{
			Memoria2_Temperatura = 100;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2264      	movs	r2, #100	@ 0x64
 80019ba:	635a      	str	r2, [r3, #52]	@ 0x34
		}
		if (Memoria2_VelocidadAire < 0 || Memoria2_VelocidadAire > 100)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	db03      	blt.n	80019cc <_ZN6CEprom11LeeMemoria2Ev+0x80>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019c8:	2b64      	cmp	r3, #100	@ 0x64
 80019ca:	dd02      	ble.n	80019d2 <_ZN6CEprom11LeeMemoria2Ev+0x86>
		{
			Memoria2_VelocidadAire = 50;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2232      	movs	r2, #50	@ 0x32
 80019d0:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
}
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200003d8 	.word	0x200003d8

080019e0 <_ZN6CEprom11LeeMemoria3Ev>:
void CEprom::LeeMemoria3()
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b088      	sub	sp, #32
 80019e4:	af04      	add	r7, sp, #16
 80019e6:	6078      	str	r0, [r7, #4]
	uint16_t datos_r[2];
	if (HAL_I2C_Mem_Read(&hi2c1, DameDireccionAlta(MEMORIA3), MEMORIA3, I2C_MEMADD_SIZE_8BIT, (uint8_t*) datos_r, 4, HAL_MAX_DELAY) == HAL_OK)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	4619      	mov	r1, r3
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 f8d5 	bl	8001ba0 <_ZN6CEprom17DameDireccionAltaEt>
 80019f6:	4603      	mov	r3, r0
 80019f8:	4619      	mov	r1, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	f04f 33ff 	mov.w	r3, #4294967295
 8001a04:	9302      	str	r3, [sp, #8]
 8001a06:	2304      	movs	r3, #4
 8001a08:	9301      	str	r3, [sp, #4]
 8001a0a:	f107 030c 	add.w	r3, r7, #12
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	2301      	movs	r3, #1
 8001a12:	4817      	ldr	r0, [pc, #92]	@ (8001a70 <_ZN6CEprom11LeeMemoria3Ev+0x90>)
 8001a14:	f00c ff8e 	bl	800e934 <HAL_I2C_Mem_Read>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	bf0c      	ite	eq
 8001a1e:	2301      	moveq	r3, #1
 8001a20:	2300      	movne	r3, #0
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d01e      	beq.n	8001a66 <_ZN6CEprom11LeeMemoria3Ev+0x86>
	{
		Memoria3_Temperatura = datos_r[0];
 8001a28:	89bb      	ldrh	r3, [r7, #12]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	63da      	str	r2, [r3, #60]	@ 0x3c
		Memoria3_VelocidadAire = datos_r[1];
 8001a30:	89fb      	ldrh	r3, [r7, #14]
 8001a32:	461a      	mov	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	641a      	str	r2, [r3, #64]	@ 0x40
		if (Memoria3_Temperatura < 0 || Memoria3_Temperatura > 500)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	db04      	blt.n	8001a4a <_ZN6CEprom11LeeMemoria3Ev+0x6a>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a44:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001a48:	dd02      	ble.n	8001a50 <_ZN6CEprom11LeeMemoria3Ev+0x70>
		{
			Memoria3_Temperatura = 100;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2264      	movs	r2, #100	@ 0x64
 8001a4e:	63da      	str	r2, [r3, #60]	@ 0x3c
		}
		if (Memoria3_VelocidadAire < 0 || Memoria3_VelocidadAire > 100)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	db03      	blt.n	8001a60 <_ZN6CEprom11LeeMemoria3Ev+0x80>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5c:	2b64      	cmp	r3, #100	@ 0x64
 8001a5e:	dd02      	ble.n	8001a66 <_ZN6CEprom11LeeMemoria3Ev+0x86>
		{
			Memoria3_VelocidadAire = 50;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2232      	movs	r2, #50	@ 0x32
 8001a64:	641a      	str	r2, [r3, #64]	@ 0x40
		}
	}
}
 8001a66:	bf00      	nop
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	200003d8 	.word	0x200003d8

08001a74 <_ZN6CEprom25DameDireccionInicioRampasEv>:
	NRampas=nrampas;
	HAL_I2C_Mem_Write(&hi2c1,DameDireccionAlta(DIRNRAMPAS),DIRNRAMPAS,I2C_MEMADD_SIZE_8BIT,(uint8_t*)&NRampas,2,HAL_MAX_DELAY);

}
int CEprom::DameDireccionInicioRampas()
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
	return DIRECCION_INICIO_RAMPAS;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <_ZN6CEprom11GuardaBytesEttPh>:
bool CEprom::GuardaBytes(uint16_t direccion, uint16_t numBytes,uint8_t* bloque)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08c      	sub	sp, #48	@ 0x30
 8001a90:	af04      	add	r7, sp, #16
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	607b      	str	r3, [r7, #4]
 8001a96:	460b      	mov	r3, r1
 8001a98:	817b      	strh	r3, [r7, #10]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	813b      	strh	r3, [r7, #8]
	int dirtmp=direccion;
 8001a9e:	897b      	ldrh	r3, [r7, #10]
 8001aa0:	61fb      	str	r3, [r7, #28]
	for(int x=0;x<numBytes;x++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61bb      	str	r3, [r7, #24]
 8001aa6:	e031      	b.n	8001b0c <_ZN6CEprom11GuardaBytesEttPh+0x80>
	{
		if(HAL_I2C_Mem_Write(&hi2c1,DameDireccionAlta(dirtmp),dirtmp,I2C_MEMADD_SIZE_8BIT,bloque,1,HAL_MAX_DELAY)!= HAL_OK)
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	4619      	mov	r1, r3
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	f000 f876 	bl	8001ba0 <_ZN6CEprom17DameDireccionAltaEt>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac0:	9302      	str	r3, [sp, #8]
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	9301      	str	r3, [sp, #4]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	2301      	movs	r3, #1
 8001acc:	4814      	ldr	r0, [pc, #80]	@ (8001b20 <_ZN6CEprom11GuardaBytesEttPh+0x94>)
 8001ace:	f00c fe37 	bl	800e740 <HAL_I2C_Mem_Write>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	bf14      	ite	ne
 8001ad8:	2301      	movne	r3, #1
 8001ada:	2300      	moveq	r3, #0
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <_ZN6CEprom11GuardaBytesEttPh+0x5a>
		{
			return false;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e017      	b.n	8001b16 <_ZN6CEprom11GuardaBytesEttPh+0x8a>
		}
		for(int i=0;i<100000;i++);
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	e002      	b.n	8001af2 <_ZN6CEprom11GuardaBytesEttPh+0x66>
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	3301      	adds	r3, #1
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	4a0b      	ldr	r2, [pc, #44]	@ (8001b24 <_ZN6CEprom11GuardaBytesEttPh+0x98>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	ddf8      	ble.n	8001aec <_ZN6CEprom11GuardaBytesEttPh+0x60>
		bloque++;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3301      	adds	r3, #1
 8001afe:	607b      	str	r3, [r7, #4]
		dirtmp++;
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	3301      	adds	r3, #1
 8001b04:	61fb      	str	r3, [r7, #28]
	for(int x=0;x<numBytes;x++)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	61bb      	str	r3, [r7, #24]
 8001b0c:	893b      	ldrh	r3, [r7, #8]
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	dbc9      	blt.n	8001aa8 <_ZN6CEprom11GuardaBytesEttPh+0x1c>
	}
	return true;
 8001b14:	2301      	movs	r3, #1
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3720      	adds	r7, #32
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200003d8 	.word	0x200003d8
 8001b24:	0001869f 	.word	0x0001869f

08001b28 <_ZN6CEprom8LeeBytesEiiPh>:
bool CEprom::LeeBytes(int direccion, int numBytes,uint8_t* bloque)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af04      	add	r7, sp, #16
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
 8001b34:	603b      	str	r3, [r7, #0]
	if(HAL_I2C_Mem_Read(&hi2c1, DameDireccionAlta(direccion), direccion, I2C_MEMADD_SIZE_8BIT,  bloque, numBytes, HAL_MAX_DELAY) == HAL_OK)
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f000 f82f 	bl	8001ba0 <_ZN6CEprom17DameDireccionAltaEt>
 8001b42:	4603      	mov	r3, r0
 8001b44:	4618      	mov	r0, r3
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	f04f 31ff 	mov.w	r1, #4294967295
 8001b52:	9102      	str	r1, [sp, #8]
 8001b54:	9301      	str	r3, [sp, #4]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	4601      	mov	r1, r0
 8001b5e:	4809      	ldr	r0, [pc, #36]	@ (8001b84 <_ZN6CEprom8LeeBytesEiiPh+0x5c>)
 8001b60:	f00c fee8 	bl	800e934 <HAL_I2C_Mem_Read>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	bf0c      	ite	eq
 8001b6a:	2301      	moveq	r3, #1
 8001b6c:	2300      	movne	r3, #0
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <_ZN6CEprom8LeeBytesEiiPh+0x50>
	{
			return true;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e000      	b.n	8001b7a <_ZN6CEprom8LeeBytesEiiPh+0x52>
	}
	return false;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	200003d8 	.word	0x200003d8

08001b88 <_ZN6CEprom26DameCapacidadMaximaMemoriaEv>:
{
	return (direccion+nbytes)<TAM_MAXIMO_MEMORIA;
}

int CEprom::DameCapacidadMaximaMemoria()
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
	return TAM_MAXIMO_MEMORIA;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <_ZN6CEprom17DameDireccionAltaEt>:
uint8_t CEprom::DameDireccionAlta(uint16_t direccion)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	807b      	strh	r3, [r7, #2]
	uint8_t tmp=direccion>>7;
 8001bac:	887b      	ldrh	r3, [r7, #2]
 8001bae:	09db      	lsrs	r3, r3, #7
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	73fb      	strb	r3, [r7, #15]
	tmp=tmp|0xF0;
 8001bb4:	7bfb      	ldrb	r3, [r7, #15]
 8001bb6:	f063 030f 	orn	r3, r3, #15
 8001bba:	73fb      	strb	r3, [r7, #15]
	tmp=tmp&0xAF;
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 8001bc2:	73fb      	strb	r3, [r7, #15]
	return tmp;
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <_ZN8CEncoderC1Ev>:
 *      Author: W10
 */

#include "Encoder/CEncoder.hpp"

CEncoder::CEncoder()
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff fa8a 	bl	80010f8 <_ZN22CManejadorEventosBotonC1Ev>
 8001be4:	4a0e      	ldr	r2, [pc, #56]	@ (8001c20 <_ZN8CEncoderC1Ev+0x4c>)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	629a      	str	r2, [r3, #40]	@ 0x28
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	631a      	str	r2, [r3, #48]	@ 0x30
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2214      	movs	r2, #20
 8001c12:	651a      	str	r2, [r3, #80]	@ 0x50
{
	// TODO Auto-generated constructor stub

}
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	08014cf4 	.word	0x08014cf4

08001c24 <_ZN8CEncoderD1Ev>:

CEncoder::~CEncoder()
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	4a05      	ldr	r2, [pc, #20]	@ (8001c44 <_ZN8CEncoderD1Ev+0x20>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff fa6f 	bl	8001118 <_ZN22CManejadorEventosBotonD1Ev>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	08014cf4 	.word	0x08014cf4

08001c48 <_ZN8CEncoderD0Ev>:
CEncoder::~CEncoder()
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
}
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff ffe7 	bl	8001c24 <_ZN8CEncoderD1Ev>
 8001c56:	2154      	movs	r1, #84	@ 0x54
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f00f ff17 	bl	8011a8c <_ZdlPvj>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <_ZN8CEncoder10ConfigurarEP12GPIO_TypeDeftS1_tS1_ti>:

void CEncoder::Configurar(GPIO_TypeDef *clk_Port, uint16_t pinClk,GPIO_TypeDef *dt_Port, uint16_t pinDt, GPIO_TypeDef *boton_Port,uint16_t pinBoton, int id_Encoder)
{
 8001c68:	b590      	push	{r4, r7, lr}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	4613      	mov	r3, r2
 8001c76:	80fb      	strh	r3, [r7, #6]
	Clk_Port = clk_Port;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	68ba      	ldr	r2, [r7, #8]
 8001c7c:	605a      	str	r2, [r3, #4]
	PinClk = pinClk;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	88fa      	ldrh	r2, [r7, #6]
 8001c82:	811a      	strh	r2, [r3, #8]

	Dt_Port = dt_Port;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	60da      	str	r2, [r3, #12]
	PinDt = pinDt;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8c3a      	ldrh	r2, [r7, #32]
 8001c8e:	821a      	strh	r2, [r3, #16]

	Boton_Port = boton_Port;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c94:	615a      	str	r2, [r3, #20]
	PinBoton = pinBoton;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001c9a:	831a      	strh	r2, [r3, #24]

	ID_Encoder = id_Encoder;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ca0:	625a      	str	r2, [r3, #36]	@ 0x24
	Boton = new CManejadorBoton();
 8001ca2:	2020      	movs	r0, #32
 8001ca4:	f00f fef4 	bl	8011a90 <_Znwj>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	461c      	mov	r4, r3
 8001cac:	4620      	mov	r0, r4
 8001cae:	f7ff f94b 	bl	8000f48 <_ZN15CManejadorBotonC1Ev>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	61dc      	str	r4, [r3, #28]
	Boton->AsignaManejadorEventos(this);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	4611      	mov	r1, r2
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff f9cc 	bl	800105c <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	Boton->Configurar(Boton_Port, PinBoton, ID_BOTON);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	69d8      	ldr	r0, [r3, #28]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6959      	ldr	r1, [r3, #20]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8b1a      	ldrh	r2, [r3, #24]
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	f7ff f979 	bl	8000fc8 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	CLK_statusAnterior = LeeClk();
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f000 f807 	bl	8001cea <_ZN8CEncoder6LeeClkEv>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	641a      	str	r2, [r3, #64]	@ 0x40

}
 8001ce2:	bf00      	nop
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd90      	pop	{r4, r7, pc}

08001cea <_ZN8CEncoder6LeeClkEv>:

int CEncoder::LeeClk()
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(Clk_Port, PinClk);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685a      	ldr	r2, [r3, #4]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	891b      	ldrh	r3, [r3, #8]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	f00c fb91 	bl	800e424 <HAL_GPIO_ReadPin>
 8001d02:	4603      	mov	r3, r0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <_ZN8CEncoder5LeeDtEv>:
int CEncoder::LeeDt()
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(Dt_Port, PinDt);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	8a1b      	ldrh	r3, [r3, #16]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4610      	mov	r0, r2
 8001d20:	f00c fb80 	bl	800e424 <HAL_GPIO_ReadPin>
 8001d24:	4603      	mov	r3, r0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <_ZN8CEncoder4InitEv>:

void CEncoder::Init()
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b088      	sub	sp, #32
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 8001d36:	f107 030c 	add.w	r3, r7, #12
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]
 8001d42:	60da      	str	r2, [r3, #12]
 8001d44:	611a      	str	r2, [r3, #16]
	{ 0 };
	// CKL
	GPIO_InitStruct.Pin = PinClk;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	891b      	ldrh	r3, [r3, #8]
 8001d4a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode =GPIO_MODE_IT_RISING_FALLING;
 8001d4c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001d50:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(Clk_Port, &GPIO_InitStruct);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f107 020c 	add.w	r2, r7, #12
 8001d5e:	4611      	mov	r1, r2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f00c f9db 	bl	800e11c <HAL_GPIO_Init>
	//DT
	GPIO_InitStruct.Pin = PinDt;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	8a1b      	ldrh	r3, [r3, #16]
 8001d6a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(Dt_Port, &GPIO_InitStruct);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	f107 020c 	add.w	r2, r7, #12
 8001d7c:	4611      	mov	r1, r2
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f00c f9cc 	bl	800e11c <HAL_GPIO_Init>
	//Boton
	GPIO_InitStruct.Pin = PinBoton;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	8b1b      	ldrh	r3, [r3, #24]
 8001d88:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(Boton_Port, &GPIO_InitStruct);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	f107 020c 	add.w	r2, r7, #12
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f00c f9bd 	bl	800e11c <HAL_GPIO_Init>
}
 8001da2:	bf00      	nop
 8001da4:	3720      	adds	r7, #32
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <_ZN8CEncoder22AsignaManejadorEventosEP24CManejadorEventosEncoder>:

void CEncoder::AsignaManejadorEventos(CManejadorEventosEncoder *manejador)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
 8001db2:	6039      	str	r1, [r7, #0]
	Manejador = manejador;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	621a      	str	r2, [r3, #32]
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <_ZN8CEncoder17OnBotonClickEventEi>:
void CEncoder::OnBotonClickEvent(int idBoton)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	6039      	str	r1, [r7, #0]

	switch (idBoton)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d10b      	bne.n	8001dee <_ZN8CEncoder17OnBotonClickEventEi+0x28>
	{
	case ID_BOTON:
		Manejador->OnBotonEncoderClickEvent(ID_Encoder);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a18      	ldr	r0, [r3, #32]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	3310      	adds	r3, #16
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001de8:	4611      	mov	r1, r2
 8001dea:	4798      	blx	r3
		break;
 8001dec:	bf00      	nop
	}
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <_ZN8CEncoder7ProcesaEi>:

void CEncoder::Procesa(int gpio_pin)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	6039      	str	r1, [r7, #0]
	Boton->Procesa(gpio_pin);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69db      	ldr	r3, [r3, #28]
 8001e04:	6839      	ldr	r1, [r7, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff f936 	bl	8001078 <_ZN15CManejadorBoton7ProcesaEi>
	leeEncoder(gpio_pin);
 8001e0c:	6839      	ldr	r1, [r7, #0]
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f804 	bl	8001e1c <_ZN8CEncoder10leeEncoderEi>
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <_ZN8CEncoder10leeEncoderEi>:

void CEncoder::leeEncoder(int gpio_pin)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
	if(PinClk!=gpio_pin)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	891b      	ldrh	r3, [r3, #8]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d132      	bne.n	8001e98 <_ZN8CEncoder10leeEncoderEi+0x7c>
	{
		ReboteMilis = HAL_GetTick();  //leo el tiempo actual
	}
	while((tiempo - ReboteMilis) < TiempoReboteEncoder);
	*/
	for(int i=8000;i>0;i--);
 8001e32:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	e002      	b.n	8001e40 <_ZN8CEncoder10leeEncoderEi+0x24>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	dcf9      	bgt.n	8001e3a <_ZN8CEncoder10leeEncoderEi+0x1e>
	CLK_status = LeeClk();
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff ff4f 	bl	8001cea <_ZN8CEncoder6LeeClkEv>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	629a      	str	r2, [r3, #40]	@ 0x28
	if (CLK_status != CLK_statusAnterior && CLK_status == 1)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d017      	beq.n	8001e8e <_ZN8CEncoder10leeEncoderEi+0x72>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d113      	bne.n	8001e8e <_ZN8CEncoder10leeEncoderEi+0x72>
	{
		if (LeeDt() != CLK_status)
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff ff50 	bl	8001d0c <_ZN8CEncoder5LeeDtEv>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e72:	429a      	cmp	r2, r3
 8001e74:	bf14      	ite	ne
 8001e76:	2301      	movne	r3, #1
 8001e78:	2300      	moveq	r3, #0
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <_ZN8CEncoder10leeEncoderEi+0x6c>
		{
			incrementa();
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 f80d 	bl	8001ea0 <_ZN8CEncoder10incrementaEv>
 8001e86:	e002      	b.n	8001e8e <_ZN8CEncoder10leeEncoderEi+0x72>
		}
		else
		{
			decrementa();
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 f81c 	bl	8001ec6 <_ZN8CEncoder10decrementaEv>
		}
	}
	CLK_statusAnterior = CLK_status;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e96:	e000      	b.n	8001e9a <_ZN8CEncoder10leeEncoderEi+0x7e>
		return;
 8001e98:	bf00      	nop
}
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <_ZN8CEncoder10incrementaEv>:

void CEncoder::incrementa()
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
	Manejador->OnIncrementoEncoder(ID_Encoder);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a18      	ldr	r0, [r3, #32]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	3308      	adds	r3, #8
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001eba:	4611      	mov	r1, r2
 8001ebc:	4798      	blx	r3
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <_ZN8CEncoder10decrementaEv>:

void CEncoder::decrementa()
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
	Manejador->OnDecrementoEncoder(ID_Encoder);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a18      	ldr	r0, [r3, #32]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	330c      	adds	r3, #12
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	4798      	blx	r3
}
 8001ee4:	bf00      	nop
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <_ZN24CManejadorEventosEncoderC1Ev>:
 *      Author: W10
 */

#include <Encoder/CManejadorEventosEncoder.hpp>

CManejadorEventosEncoder::CManejadorEventosEncoder()
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	4a04      	ldr	r2, [pc, #16]	@ (8001f08 <_ZN24CManejadorEventosEncoderC1Ev+0x1c>)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4618      	mov	r0, r3
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	08014d0c 	.word	0x08014d0c

08001f0c <_ZN24CManejadorEventosEncoderD1Ev>:

CManejadorEventosEncoder::~CManejadorEventosEncoder()
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	4a04      	ldr	r2, [pc, #16]	@ (8001f28 <_ZN24CManejadorEventosEncoderD1Ev+0x1c>)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	08014d0c 	.word	0x08014d0c

08001f2c <_ZN24CManejadorEventosEncoderD0Ev>:
CManejadorEventosEncoder::~CManejadorEventosEncoder()
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
}
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff ffe9 	bl	8001f0c <_ZN24CManejadorEventosEncoderD1Ev>
 8001f3a:	2104      	movs	r1, #4
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f00f fda5 	bl	8011a8c <_ZdlPvj>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4618      	mov	r0, r3
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <_ZN24CManejadorEventosEncoder19OnIncrementoEncoderEi>:

void CManejadorEventosEncoder::OnIncrementoEncoder(int id_Encoder)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]

}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <_ZN24CManejadorEventosEncoder19OnDecrementoEncoderEi>:
void CManejadorEventosEncoder::OnDecrementoEncoder(int id_Encoder)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	6039      	str	r1, [r7, #0]

}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <_ZN24CManejadorEventosEncoder24OnBotonEncoderClickEventEi>:
void CManejadorEventosEncoder::OnBotonEncoderClickEvent(int id_Encoder)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]

}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
	...

08001f90 <_ZN13CEstacionBaseC1Ev>:
 *      Author: W10
 */

#include <Estaciones/CEstacionBase.hpp>

CEstacionBase::CEstacionBase()
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	4a06      	ldr	r2, [pc, #24]	@ (8001fb4 <_ZN13CEstacionBaseC1Ev+0x24>)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	605a      	str	r2, [r3, #4]
{
	// TODO Auto-generated constructor stub

}
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	08014d28 	.word	0x08014d28

08001fb8 <_ZN13CEstacionBaseD1Ev>:

CEstacionBase::~CEstacionBase()
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	4a04      	ldr	r2, [pc, #16]	@ (8001fd4 <_ZN13CEstacionBaseD1Ev+0x1c>)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	08014d28 	.word	0x08014d28

08001fd8 <_ZN13CEstacionBaseD0Ev>:
CEstacionBase::~CEstacionBase()
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
}
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff ffe9 	bl	8001fb8 <_ZN13CEstacionBaseD1Ev>
 8001fe6:	2108      	movs	r1, #8
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f00f fd4f 	bl	8011a8c <_ZdlPvj>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <_ZN13CEstacionBase19GetTemperaturaRealxEv>:

float CEstacionBase::GetTemperaturaRealx() //regresa la tenperatura actual de la estacion
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
	return 0;
 8002000:	f04f 0300 	mov.w	r3, #0
 8002004:	ee07 3a90 	vmov	s15, r3
}
 8002008:	eeb0 0a67 	vmov.f32	s0, s15
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <_ZN13CEstacionBase14SetTemperaturaEi>:
void CEstacionBase::SetTemperatura(int temperatura) //establece la temperatura que se quiere alcanzar
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	6039      	str	r1, [r7, #0]

}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <_ZN13CEstacionBase14GetTemperaturaEv>:
int CEstacionBase::GetTemperatura() // regresa la temperatura seteada
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
	return 0;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <_ZN13CEstacionBase12SetNivelAireEi>:
void CEstacionBase::SetNivelAire(int nivel) //establece el nivel de aire
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	6039      	str	r1, [r7, #0]

}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <_ZN13CEstacionBase12GetNivelAireEv>:
int CEstacionBase::GetNivelAire() //regresa el nivel de aire setado
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
	return 0;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <_ZN13CEstacionBase9GetEstadoEv>:
int CEstacionBase::GetEstado() //regresa 1 si esta activo y 0 si esta en reposo
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
	return 0;
 8002076:	2300      	movs	r3, #0

}
 8002078:	4618      	mov	r0, r3
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <_ZN13CEstacionBase21IncrementaTemperaturaEv>:
//para que la misma estacion incremente la temperatura
void CEstacionBase::IncrementaTemperatura()
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]

}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <_ZN13CEstacionBase21DecrementaTemperaturaEv>:
//para que la misma estacion decremente la temeperatura
void CEstacionBase::DecrementaTemperatura()
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]

}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <_ZN13CEstacionBase21SetManejadorControlesEP26CManejadorEventosControles>:
// asigna el evento que sellamara cuando cambie la temperatura que el usuario especifica
void CEstacionBase::SetManejadorControles(CManejadorEventosControles *obj)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
	ManejadorControles = obj;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	605a      	str	r2, [r3, #4]
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <_ZN13CEstacionBase7ProcesaEv>:
//funcion que se debera llamar para controlar la estacion de calor
void CEstacionBase::Procesa()
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]

}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <_ZN13CEstacionBase14NivelAireEventEi>:
void CEstacionBase::NivelAireEvent(int aire)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00a      	beq.n	8002104 <_ZN13CEstacionBase14NivelAireEventEi+0x28>
		return;
	ManejadorControles->OnNivelAireEvent(aire);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	330c      	adds	r3, #12
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6839      	ldr	r1, [r7, #0]
 80020fe:	4610      	mov	r0, r2
 8002100:	4798      	blx	r3
 8002102:	e000      	b.n	8002106 <_ZN13CEstacionBase14NivelAireEventEi+0x2a>
		return;
 8002104:	bf00      	nop
}
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <_ZN13CEstacionBase20TemperaturaRealEventEi>:
void CEstacionBase::TemperaturaRealEvent(int temperatura)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00a      	beq.n	8002134 <_ZN13CEstacionBase20TemperaturaRealEventEi+0x28>
		return;
	ManejadorControles->OnTemperaturaRealEvent(temperatura);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	3308      	adds	r3, #8
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6839      	ldr	r1, [r7, #0]
 800212e:	4610      	mov	r0, r2
 8002130:	4798      	blx	r3
 8002132:	e000      	b.n	8002136 <_ZN13CEstacionBase20TemperaturaRealEventEi+0x2a>
		return;
 8002134:	bf00      	nop

}
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <_ZN13CEstacionBase17ActivarCalefactorEv>:
void CEstacionBase::ActivarCalefactor()
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]

}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <_ZN13CEstacionBase20DesactivarCalefactorEv>:
void CEstacionBase::DesactivarCalefactor()
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]

}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <_ZN13CEstacionBase10CruceXCeroEi>:
void CEstacionBase::CruceXCero(int gpio_pin)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]

}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <_ZN13CEstacionBase9TimerTickEv>:
void CEstacionBase::TimerTick()
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]

}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <_ZN13CEstacionBase6GetPIDEv>:
int CEstacionBase::GetPID()
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
	return 0;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <_ZN13CEstacionBase6SetPIDEi>:
void CEstacionBase::SetPID(int valor)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]

}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <_ZN13CEstacionBase17GPIO_INTERRUPCIONEi>:
void CEstacionBase::GPIO_INTERRUPCION(int GPIO_Pin)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	6039      	str	r1, [r7, #0]

}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <_ZN13CEstacionBase23QuitaManejadorControlesEv>:
void CEstacionBase::QuitaManejadorControles()
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
	ManejadorControles = NULL;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	605a      	str	r2, [r3, #4]
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <_ZN13CEstacionBase19EnfriaYApagaPistolaEv>:
void CEstacionBase::EnfriaYApagaPistola()
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]

}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <_ZN16CestacionBaku601D1Ev>:
#include "Constantes.hpp"
#include "Uart/Uart.hpp"
#include "SensorTemperatura/Max6675/MAX6675.hpp"
#include <SensorTemperatura/SensorAnalogico.hpp>

CestacionBaku601::~CestacionBaku601()
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	4a11      	ldr	r2, [pc, #68]	@ (8002250 <_ZN16CestacionBaku601D1Ev+0x50>)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	4a11      	ldr	r2, [pc, #68]	@ (8002254 <_ZN16CestacionBaku601D1Ev+0x54>)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	609a      	str	r2, [r3, #8]
{
	// TODO Auto-generated destructor stub
}
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	33cc      	adds	r3, #204	@ 0xcc
 8002218:	4618      	mov	r0, r3
 800221a:	f009 fd6b 	bl	800bcf4 <_ZN15SensorMagneticoD1Ev>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	33bc      	adds	r3, #188	@ 0xbc
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe ffb8 	bl	8001198 <_ZN10CalefactorD1Ev>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3370      	adds	r3, #112	@ 0x70
 800222c:	4618      	mov	r0, r3
 800222e:	f008 fad1 	bl	800a7d4 <_ZN3PwmD1Ev>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3308      	adds	r3, #8
 8002236:	4618      	mov	r0, r3
 8002238:	f009 fd14 	bl	800bc64 <_ZN31CManejadorEventoSensorMagneticoD1Ev>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff feba 	bl	8001fb8 <_ZN13CEstacionBaseD1Ev>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	08014d8c 	.word	0x08014d8c
 8002254:	08014df4 	.word	0x08014df4

08002258 <_ZThn8_N16CestacionBaku601D1Ev>:
	int NivelAire=0;
	float TemperaturaRealActual;
	int conteolecturatemperatura=0;
public:
	CestacionBaku601();
	virtual ~CestacionBaku601();
 8002258:	f1a0 0008 	sub.w	r0, r0, #8
 800225c:	f7ff bfd0 	b.w	8002200 <_ZN16CestacionBaku601D1Ev>

08002260 <_ZN16CestacionBaku601D0Ev>:
CestacionBaku601::~CestacionBaku601()
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
}
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff ffc9 	bl	8002200 <_ZN16CestacionBaku601D1Ev>
 800226e:	21f8      	movs	r1, #248	@ 0xf8
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f00f fc0b 	bl	8011a8c <_ZdlPvj>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <_ZThn8_N16CestacionBaku601D0Ev>:
 8002280:	f1a0 0008 	sub.w	r0, r0, #8
 8002284:	f7ff bfec 	b.w	8002260 <_ZN16CestacionBaku601D0Ev>

08002288 <_ZN16CestacionBaku60132IniciaSensorTemperaturaAnalogicoEv>:
	max6675->SetConfigCsPin(GPIOA, GPIO_PIN_2);
	max6675->SetConfigDatPin(GPIOA, GPIO_PIN_0);
	thermocouple = max6675;
}
void CestacionBaku601::IniciaSensorTemperaturaAnalogico()
{
 8002288:	b590      	push	{r4, r7, lr}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
	SensorAnalogico *sensorTemeratura = new SensorAnalogico();
 8002290:	2054      	movs	r0, #84	@ 0x54
 8002292:	f00f fbfd 	bl	8011a90 <_Znwj>
 8002296:	4603      	mov	r3, r0
 8002298:	461c      	mov	r4, r3
 800229a:	4620      	mov	r0, r4
 800229c:	f009 fde2 	bl	800be64 <_ZN15SensorAnalogicoC1Ev>
 80022a0:	60fc      	str	r4, [r7, #12]
	thermocouple = sensorTemeratura;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 80022a8:	bf00      	nop
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd90      	pop	{r4, r7, pc}

080022b0 <_ZN16CestacionBaku601C1Ev>:
CestacionBaku601::CestacionBaku601() :
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
		CEstacionBase()
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff fe68 	bl	8001f90 <_ZN13CEstacionBaseC1Ev>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3308      	adds	r3, #8
 80022c4:	4618      	mov	r0, r3
 80022c6:	f009 fcbd 	bl	800bc44 <_ZN31CManejadorEventoSensorMagneticoC1Ev>
 80022ca:	4a50      	ldr	r2, [pc, #320]	@ (800240c <_ZN16CestacionBaku601C1Ev+0x15c>)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	4a4f      	ldr	r2, [pc, #316]	@ (8002410 <_ZN16CestacionBaku601C1Ev+0x160>)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	609a      	str	r2, [r3, #8]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80022dc:	60da      	str	r2, [r3, #12]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2264      	movs	r2, #100	@ 0x64
 80022e2:	611a      	str	r2, [r3, #16]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	615a      	str	r2, [r3, #20]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	619a      	str	r2, [r3, #24]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	61da      	str	r2, [r3, #28]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	f04f 0200 	mov.w	r2, #0
 80022fc:	f04f 0300 	mov.w	r3, #0
 8002300:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2205      	movs	r2, #5
 8002308:	629a      	str	r2, [r3, #40]	@ 0x28
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002316:	631a      	str	r2, [r3, #48]	@ 0x30
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	635a      	str	r2, [r3, #52]	@ 0x34
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	639a      	str	r2, [r3, #56]	@ 0x38
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	641a      	str	r2, [r3, #64]	@ 0x40
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f04f 0200 	mov.w	r2, #0
 8002332:	645a      	str	r2, [r3, #68]	@ 0x44
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a37      	ldr	r2, [pc, #220]	@ (8002414 <_ZN16CestacionBaku601C1Ev+0x164>)
 8002338:	649a      	str	r2, [r3, #72]	@ 0x48
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a36      	ldr	r2, [pc, #216]	@ (8002418 <_ZN16CestacionBaku601C1Ev+0x168>)
 800233e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	651a      	str	r2, [r3, #80]	@ 0x50
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	655a      	str	r2, [r3, #84]	@ 0x54
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2208      	movs	r2, #8
 8002350:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	220b      	movs	r2, #11
 8002356:	661a      	str	r2, [r3, #96]	@ 0x60
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	220c      	movs	r2, #12
 800235c:	665a      	str	r2, [r3, #100]	@ 0x64
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	669a      	str	r2, [r3, #104]	@ 0x68
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3370      	adds	r3, #112	@ 0x70
 8002368:	4618      	mov	r0, r3
 800236a:	f008 fa23 	bl	800a7b4 <_ZN3PwmC1Ev>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	33bc      	adds	r3, #188	@ 0xbc
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe fefc 	bl	8001170 <_ZN10CalefactorC1Ev>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	33cc      	adds	r3, #204	@ 0xcc
 800237c:	4618      	mov	r0, r3
 800237e:	f009 fc9d 	bl	800bcbc <_ZN15SensorMagneticoC1Ev>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
{
	pwm.Init(TIM2, TIM_CHANNEL_1, 65535);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8002398:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800239c:	2200      	movs	r2, #0
 800239e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80023a2:	f008 fa37 	bl	800a814 <_ZN3Pwm4InitEP11TIM_TypeDefii>
	IniciaSensorTemperaturaAnalogico();
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff ff6e 	bl	8002288 <_ZN16CestacionBaku60132IniciaSensorTemperaturaAnalogicoEv>
	thermocouple->Init();
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	3308      	adds	r3, #8
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4610      	mov	r0, r2
 80023bc:	4798      	blx	r3

	calefactor.Configurar(GPIOB, GPIO_PIN_3);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	33bc      	adds	r3, #188	@ 0xbc
 80023c2:	2208      	movs	r2, #8
 80023c4:	4915      	ldr	r1, [pc, #84]	@ (800241c <_ZN16CestacionBaku601C1Ev+0x16c>)
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7fe ff06 	bl	80011d8 <_ZN10Calefactor10ConfigurarEP12GPIO_TypeDeft>
	calefactor.Init();
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	33bc      	adds	r3, #188	@ 0xbc
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7fe ff14 	bl	80011fe <_ZN10Calefactor4InitEv>
	sensorMagnetico.Configurar(GPIOB, GPIO_PIN_5);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	33cc      	adds	r3, #204	@ 0xcc
 80023da:	2220      	movs	r2, #32
 80023dc:	490f      	ldr	r1, [pc, #60]	@ (800241c <_ZN16CestacionBaku601C1Ev+0x16c>)
 80023de:	4618      	mov	r0, r3
 80023e0:	f009 fca8 	bl	800bd34 <_ZN15SensorMagnetico10ConfigurarEP12GPIO_TypeDeft>
	sensorMagnetico.Init();
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	33cc      	adds	r3, #204	@ 0xcc
 80023e8:	4618      	mov	r0, r3
 80023ea:	f009 fcb6 	bl	800bd5a <_ZN15SensorMagnetico4InitEv>
	sensorMagnetico.AsignaManejadorEventos(this);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3308      	adds	r3, #8
 80023f8:	4619      	mov	r1, r3
 80023fa:	4610      	mov	r0, r2
 80023fc:	f009 fccc 	bl	800bd98 <_ZN15SensorMagnetico22AsignaManejadorEventosEP31CManejadorEventoSensorMagnetico>

}
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	08014d8c 	.word	0x08014d8c
 8002410:	08014df4 	.word	0x08014df4
 8002414:	42c80000 	.word	0x42c80000
 8002418:	447a0000 	.word	0x447a0000
 800241c:	40020400 	.word	0x40020400

08002420 <_ZN16CestacionBaku60119GetTemperaturaRealxEv>:

//regresa la tenperatura actual de la estacion
float CestacionBaku601::GetTemperaturaRealx()
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
	//return //TemperaturaRealActual;//
	return thermocouple->LeeTemepatura(); //* .59;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	330c      	adds	r3, #12
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4610      	mov	r0, r2
 8002438:	4798      	blx	r3
 800243a:	ee07 0a90 	vmov	s15, r0
 800243e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8002442:	eeb0 0a67 	vmov.f32	s0, s15
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <_ZN16CestacionBaku60114SetTemperaturaEi>:

//establece la temperatura que se quiere alcanzar
void CestacionBaku601::SetTemperatura(int temperatura)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
	TemperaturaEspecificada = temperatura;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	611a      	str	r2, [r3, #16]
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <_ZN16CestacionBaku60114GetTemperaturaEv>:

// regresa la temperatura seteada
int CestacionBaku601::GetTemperatura()
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
	return TemperaturaEspecificada;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
}
 8002474:	4618      	mov	r0, r3
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <_ZN16CestacionBaku60112SetNivelAireEi>:

//establece el nivel de aire
void CestacionBaku601::SetNivelAire(int nivel)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
	NivelAire = nivel;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <_ZN16CestacionBaku60112GetNivelAireEv>:
int CestacionBaku601::GetNivelAire()
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
	return NivelAire;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <_ZN16CestacionBaku6019GetEstadoEv>:

//regresa 1 si esta activo y 0 si esta en reposo
int CestacionBaku601::GetEstado()
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
	return sensorMagnetico.Leer();
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	33cc      	adds	r3, #204	@ 0xcc
 80024c4:	4618      	mov	r0, r3
 80024c6:	f009 fc75 	bl	800bdb4 <_ZN15SensorMagnetico4LeerEv>
 80024ca:	4603      	mov	r3, r0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <_ZN16CestacionBaku60121IncrementaTemperaturaEv>:

void CestacionBaku601::IncrementaTemperatura()
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
	if (TemperaturaEspecificada > TemperaturaMaxima)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691a      	ldr	r2, [r3, #16]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	dd03      	ble.n	80024f0 <_ZN16CestacionBaku60121IncrementaTemperaturaEv+0x1c>
	{
		TemperaturaEspecificada = TemperaturaMaxima;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	611a      	str	r2, [r3, #16]
	}
	TemperaturaEspecificada++;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	1c5a      	adds	r2, r3, #1
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	611a      	str	r2, [r3, #16]
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <_ZN16CestacionBaku60121DecrementaTemperaturaEv>:

void CestacionBaku601::DecrementaTemperatura()
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
	if (TemperaturaEspecificada > 0)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	2b00      	cmp	r3, #0
 8002514:	dd04      	ble.n	8002520 <_ZN16CestacionBaku60121DecrementaTemperaturaEv+0x1a>
	{
		TemperaturaEspecificada--;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	1e5a      	subs	r2, r3, #1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	611a      	str	r2, [r3, #16]
	}
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <_ZN16CestacionBaku60117ActivarCalefactorEv>:

void CestacionBaku601::ActivarCalefactor()
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
	EstadoCalefator = ENCENDIDO;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <_ZN16CestacionBaku60120DesactivarCalefactorEv>:

void CestacionBaku601::DesactivarCalefactor()
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
	EstadoCalefator = APAGADO;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <_ZN16CestacionBaku60123OnSensorMagneticoChangeEi>:

void CestacionBaku601::OnSensorMagneticoChange(int estado)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]

}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <_ZThn8_N16CestacionBaku60123OnSensorMagneticoChangeEi>:
	void ProcesaTemperaturaReal();
	//eventros del encoder
	virtual void IncrementaTemperatura();
	virtual void DecrementaTemperatura();
	void ProcesaCalefactor();
	virtual void OnSensorMagneticoChange(int estado);
 8002576:	f1a0 0008 	sub.w	r0, r0, #8
 800257a:	f7ff bff1 	b.w	8002560 <_ZN16CestacionBaku60123OnSensorMagneticoChangeEi>

0800257e <_ZN16CestacionBaku6017ProcesaEv>:

void CestacionBaku601::Procesa()
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
	ProcesaTemperatura();
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f80a 	bl	80025a0 <_ZN16CestacionBaku60118ProcesaTemperaturaEv>
	procesaAire();
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 f81e 	bl	80025ce <_ZN16CestacionBaku60111procesaAireEv>
	ProcesaCalefactor();
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f83b 	bl	800260e <_ZN16CestacionBaku60117ProcesaCalefactorEv>
}
 8002598:	bf00      	nop
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <_ZN16CestacionBaku60118ProcesaTemperaturaEv>:

//verifica el nivel de temperatura seleccinada por el usuario
void CestacionBaku601::ProcesaTemperatura()
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
	//leo la temperatura
	int temp = GetTemperatura();
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	3310      	adds	r3, #16
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	4798      	blx	r3
 80025b4:	60f8      	str	r0, [r7, #12]
	//veo si cambio
	if (temperaturaAnterior != temp)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d002      	beq.n	80025c6 <_ZN16CestacionBaku60118ProcesaTemperaturaEv+0x26>
	{
		temperaturaAnterior = temp;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	615a      	str	r2, [r3, #20]
	}
}
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <_ZN16CestacionBaku60111procesaAireEv>:
{
}

//verifica elnivel de aire
void CestacionBaku601::procesaAire()
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b084      	sub	sp, #16
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
	int aire = GetNivelAire();
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	3318      	adds	r3, #24
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	4798      	blx	r3
 80025e2:	60f8      	str	r0, [r7, #12]
	if (AireAnterior != aire)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d00b      	beq.n	8002606 <_ZN16CestacionBaku60111procesaAireEv+0x38>
	{
		AireAnterior = aire;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	61da      	str	r2, [r3, #28]
		NivelAireEvent(AireAnterior);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	3350      	adds	r3, #80	@ 0x50
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	69d2      	ldr	r2, [r2, #28]
 8002602:	4611      	mov	r1, r2
 8002604:	4798      	blx	r3
	}
}
 8002606:	bf00      	nop
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <_ZN16CestacionBaku60117ProcesaCalefactorEv>:

void CestacionBaku601::ProcesaCalefactor()
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b084      	sub	sp, #16
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
	if (EstadoCalefator == APAGADO)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800261a:	2b00      	cmp	r3, #0
 800261c:	d108      	bne.n	8002630 <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x22>
	{
		//esta apagado el calefactor
		PotenciaCalefactor = 0;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	629a      	str	r2, [r3, #40]	@ 0x28
		calefactor.Apagar();
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	33bc      	adds	r3, #188	@ 0xbc
 8002628:	4618      	mov	r0, r3
 800262a:	f7fe fe1f 	bl	800126c <_ZN10Calefactor6ApagarEv>
		return;
 800262e:	e096      	b.n	800275e <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x150>
	}
	EstadoSensorMagnetico = sensorMagnetico.Leer();
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	33cc      	adds	r3, #204	@ 0xcc
 8002634:	4618      	mov	r0, r3
 8002636:	f009 fbbd 	bl	800bdb4 <_ZN15SensorMagnetico4LeerEv>
 800263a:	4602      	mov	r2, r0
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	659a      	str	r2, [r3, #88]	@ 0x58
	if (EstadoSensorMagnetico == BOTON_PRESIONADO)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002644:	2b00      	cmp	r3, #0
 8002646:	d106      	bne.n	8002656 <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x48>
	{
		//el usuario coloco la pistola en su base por lo que hay que enfriarla
		EnfriaYApagaPistola();
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	334c      	adds	r3, #76	@ 0x4c
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	4798      	blx	r3
		return;
 8002654:	e083      	b.n	800275e <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x150>
	}
	TiempoEnfriando = 0;
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	f04f 0200 	mov.w	r2, #0
 800265c:	f04f 0300 	mov.w	r3, #0
 8002660:	e9c1 2308 	strd	r2, r3, [r1, #32]
	//enciendo el aire
	int aire = GetNivelAire();
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	3318      	adds	r3, #24
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	4798      	blx	r3
 8002670:	60f8      	str	r0, [r7, #12]
	pwm.SicloTrabajo(aire);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	3370      	adds	r3, #112	@ 0x70
 8002676:	68f9      	ldr	r1, [r7, #12]
 8002678:	4618      	mov	r0, r3
 800267a:	f008 f971 	bl	800a960 <_ZN3Pwm12SicloTrabajoEi>
	//aqui se hace al calculo del PID
	//veo si ya paso el tiempo para hacer el muestreo
	TiempoActual = HAL_GetTick(); //me trae el tiempo en milisegundos
 800267e:	f00b f8d7 	bl	800d830 <HAL_GetTick>
 8002682:	4603      	mov	r3, r0
 8002684:	461a      	mov	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	635a      	str	r2, [r3, #52]	@ 0x34
	if (TiempoActual < TiempoProximoMuestreo)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002692:	429a      	cmp	r2, r3
 8002694:	db62      	blt.n	800275c <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x14e>
	{
		//a un no ha paso el tiempo para
		return;
	}
	//calculo el siguiente tiempo de muestreo
	TiempoProximoMuestreo = TiempoActual + TiempoMuestreoTemperatura;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269e:	441a      	add	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	639a      	str	r2, [r3, #56]	@ 0x38
	TemperaturaRealActual = GetTemperaturaRealx();
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	3308      	adds	r3, #8
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	4798      	blx	r3
 80026b0:	eef0 7a40 	vmov.f32	s15, s0
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	edc3 7a3b 	vstr	s15, [r3, #236]	@ 0xec
	int temperatura = TemperaturaRealActual;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	edd3 7a3b 	vldr	s15, [r3, #236]	@ 0xec
 80026c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026c4:	ee17 3a90 	vmov	r3, s15
 80026c8:	60bb      	str	r3, [r7, #8]
	PID_error = TemperaturaEspecificada - temperatura;                       //Calculo del error
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691a      	ldr	r2, [r3, #16]
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	ee07 3a90 	vmov	s15, r3
 80026d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	Error_INT = Error_INT + PID_error * (1000 / TiempoMuestreoTemperatura);  //Calculo de la integral del error
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80026f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80026f8:	ee07 3a90 	vmov	s15, r3
 80026fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002700:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002704:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	PID_value = Kc * (PID_error + (1 / Tao_I) * Error_INT) / 10;   //Calculo de la salida del controlador PI
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002720:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8002724:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800272e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002736:	ee27 7a27 	vmul.f32	s14, s14, s15
 800273a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800273e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	//asigno la potencia del calefactor
	PotenciaCalefactor = PID_value;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800274e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002752:	ee17 2a90 	vmov	r2, s15
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	629a      	str	r2, [r3, #40]	@ 0x28
 800275a:	e000      	b.n	800275e <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x150>
		return;
 800275c:	bf00      	nop
}
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	0000      	movs	r0, r0
	...

08002768 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv>:

void CestacionBaku601::EnfriaYApagaPistola()
{
 8002768:	b590      	push	{r4, r7, lr}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
	PotenciaCalefactor = 0; //bajo toda la potencia
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	629a      	str	r2, [r3, #40]	@ 0x28
	float temperatura = GetTemperaturaRealx();
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	3308      	adds	r3, #8
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	4798      	blx	r3
 8002782:	ed87 0a03 	vstr	s0, [r7, #12]
	if (temperatura <= TEMPERATURA_APAGADO)
 8002786:	edd7 7a03 	vldr	s15, [r7, #12]
 800278a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800278e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002796:	d83c      	bhi.n	8002812 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xaa>
	{
		if (TiempoEnfriando == 0)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	f04f 0300 	mov.w	r3, #0
 80027a6:	f7fe f997 	bl	8000ad8 <__aeabi_dcmpeq>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00b      	beq.n	80027c8 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0x60>
		{
			TiempoEnfriando = HAL_GetTick();
 80027b0:	f00b f83e 	bl	800d830 <HAL_GetTick>
 80027b4:	4603      	mov	r3, r0
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fd feac 	bl	8000514 <__aeabi_ui2d>
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	e9c1 2308 	strd	r2, r3, [r1, #32]
			return;
 80027c6:	e035      	b.n	8002834 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xcc>
		}
		if (HAL_GetTick() - TiempoEnfriando <= 10000)
 80027c8:	f00b f832 	bl	800d830 <HAL_GetTick>
 80027cc:	4603      	mov	r3, r0
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fd fea0 	bl	8000514 <__aeabi_ui2d>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80027da:	f7fd fd5d 	bl	8000298 <__aeabi_dsub>
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	4610      	mov	r0, r2
 80027e4:	4619      	mov	r1, r3
 80027e6:	2301      	movs	r3, #1
 80027e8:	461c      	mov	r4, r3
 80027ea:	a315      	add	r3, pc, #84	@ (adr r3, 8002840 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xd8>)
 80027ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f0:	f7fe f986 	bl	8000b00 <__aeabi_dcmple>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0x96>
 80027fa:	2300      	movs	r3, #0
 80027fc:	461c      	mov	r4, r3
 80027fe:	b2e3      	uxtb	r3, r4
 8002800:	2b00      	cmp	r3, #0
 8002802:	d116      	bne.n	8002832 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xca>
		{
			return;
		}
		pwm.SicloTrabajo(0);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3370      	adds	r3, #112	@ 0x70
 8002808:	2100      	movs	r1, #0
 800280a:	4618      	mov	r0, r3
 800280c:	f008 f8a8 	bl	800a960 <_ZN3Pwm12SicloTrabajoEi>
		return;
 8002810:	e010      	b.n	8002834 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xcc>
	}
	//pongo al maximo el aire para enfriar la pistola
	if (temperatura > 10)
 8002812:	edd7 7a03 	vldr	s15, [r7, #12]
 8002816:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800281a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800281e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002822:	dd07      	ble.n	8002834 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xcc>
	{
		pwm.SicloTrabajo(100);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3370      	adds	r3, #112	@ 0x70
 8002828:	2164      	movs	r1, #100	@ 0x64
 800282a:	4618      	mov	r0, r3
 800282c:	f008 f898 	bl	800a960 <_ZN3Pwm12SicloTrabajoEi>
 8002830:	e000      	b.n	8002834 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xcc>
			return;
 8002832:	bf00      	nop
	}
}
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	bd90      	pop	{r4, r7, pc}
 800283a:	bf00      	nop
 800283c:	f3af 8000 	nop.w
 8002840:	00000000 	.word	0x00000000
 8002844:	40c38800 	.word	0x40c38800

08002848 <_ZN16CestacionBaku60110CruceXCeroEi>:
void CestacionBaku601::CruceXCero(int gpio_pin)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
	if (EstadoSensorMagnetico == BOTON_PRESIONADO)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002856:	2b00      	cmp	r3, #0
 8002858:	d105      	bne.n	8002866 <_ZN16CestacionBaku60110CruceXCeroEi+0x1e>
	{
		calefactor.Apagar();
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	33bc      	adds	r3, #188	@ 0xbc
 800285e:	4618      	mov	r0, r3
 8002860:	f7fe fd04 	bl	800126c <_ZN10Calefactor6ApagarEv>
		return;
 8002864:	e031      	b.n	80028ca <_ZN16CestacionBaku60110CruceXCeroEi+0x82>
	}
	if (gpio_pin != CruceCero_Pin)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	2b10      	cmp	r3, #16
 800286a:	d12d      	bne.n	80028c8 <_ZN16CestacionBaku60110CruceXCeroEi+0x80>
		return;
	if (conteolecturatemperatura > 10)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002872:	2b0a      	cmp	r3, #10
 8002874:	dd03      	ble.n	800287e <_ZN16CestacionBaku60110CruceXCeroEi+0x36>
	{
		conteolecturatemperatura = 0;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
	}
	conteolecturatemperatura++;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
	if (ciclos >= 100)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002890:	2b63      	cmp	r3, #99	@ 0x63
 8002892:	dd02      	ble.n	800289a <_ZN16CestacionBaku60110CruceXCeroEi+0x52>
	{
		ciclos = 0;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	if (ciclos < PotenciaCalefactor)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a2:	429a      	cmp	r2, r3
 80028a4:	da05      	bge.n	80028b2 <_ZN16CestacionBaku60110CruceXCeroEi+0x6a>
	{
		calefactor.Encender();
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	33bc      	adds	r3, #188	@ 0xbc
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fe fccb 	bl	8001246 <_ZN10Calefactor8EncenderEv>
 80028b0:	e004      	b.n	80028bc <_ZN16CestacionBaku60110CruceXCeroEi+0x74>
	}
	else
	{
		calefactor.Apagar();
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	33bc      	adds	r3, #188	@ 0xbc
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe fcd8 	bl	800126c <_ZN10Calefactor6ApagarEv>
	}
	ciclos = ciclos + 1;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	655a      	str	r2, [r3, #84]	@ 0x54
 80028c6:	e000      	b.n	80028ca <_ZN16CestacionBaku60110CruceXCeroEi+0x82>
		return;
 80028c8:	bf00      	nop
}
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <_ZN16CestacionBaku6019TimerTickEv>:
void CestacionBaku601::TimerTick()
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
	if (TiempoAntiReboresCruceXCero > 0)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028dc:	2b00      	cmp	r3, #0
 80028de:	dd05      	ble.n	80028ec <_ZN16CestacionBaku6019TimerTickEv+0x1c>
	{
		TiempoAntiReboresCruceXCero--;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028e4:	1e5a      	subs	r2, r3, #1
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	651a      	str	r2, [r3, #80]	@ 0x50
	else
	{
		CruceXCero(CruceCero_Pin);
		TiempoAntiReboresCruceXCero =250;// 2000;
	}
}
 80028ea:	e009      	b.n	8002900 <_ZN16CestacionBaku6019TimerTickEv+0x30>
		CruceXCero(CruceCero_Pin);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	333c      	adds	r3, #60	@ 0x3c
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2110      	movs	r1, #16
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	4798      	blx	r3
		TiempoAntiReboresCruceXCero =250;// 2000;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	22fa      	movs	r2, #250	@ 0xfa
 80028fe:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002900:	bf00      	nop
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <_ZN16CestacionBaku6016GetPIDEv>:
int CestacionBaku601::GetPID()
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
	return PotenciaCalefactor;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8002914:	4618      	mov	r0, r3
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <_ZN16CestacionBaku6016SetPIDEi>:
void CestacionBaku601::SetPID(int valor)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
	PotenciaCalefactor = valor;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <_ZN16CestacionBaku60117GPIO_INTERRUPCIONEi>:
void CestacionBaku601::GPIO_INTERRUPCION(int GPIO_Pin)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <_ZN14CBarraProgresoC1Eiiiiiiii>:
 */

#include <GUI/CBarraProgreso.hpp>
#include <GUI/CRectanguloTft.hpp>

CBarraProgreso::CBarraProgreso(int xi, int yi, int ancho, int alto,	int backColor,int colorBarra, int contorno, int colorContorno):
 8002954:	b580      	push	{r7, lr}
 8002956:	b088      	sub	sp, #32
 8002958:	af04      	add	r7, sp, #16
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
 8002960:	603b      	str	r3, [r7, #0]
CRectanguloTft(xi,yi,ancho,alto,backColor,contorno,colorContorno)
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002966:	9303      	str	r3, [sp, #12]
 8002968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296a:	9302      	str	r3, [sp, #8]
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	9301      	str	r3, [sp, #4]
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	68b9      	ldr	r1, [r7, #8]
 800297a:	f000 fe43 	bl	8003604 <_ZN14CRectanguloTftC1Eiiiiiii>
 800297e:	4a05      	ldr	r2, [pc, #20]	@ (8002994 <_ZN14CBarraProgresoC1Eiiiiiiii+0x40>)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub
	ColorBarra=colorBarra;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6a3a      	ldr	r2, [r7, #32]
 8002988:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	08014e08 	.word	0x08014e08

08002998 <_ZN14CBarraProgresoD1Ev>:

CBarraProgreso::~CBarraProgreso()
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	4a05      	ldr	r2, [pc, #20]	@ (80029b8 <_ZN14CBarraProgresoD1Ev+0x20>)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 fe09 	bl	80035c0 <_ZN14CRectanguloTftD1Ev>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4618      	mov	r0, r3
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	08014e08 	.word	0x08014e08

080029bc <_ZN14CBarraProgresoD0Ev>:
CBarraProgreso::~CBarraProgreso()
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
}
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff ffe7 	bl	8002998 <_ZN14CBarraProgresoD1Ev>
 80029ca:	213c      	movs	r1, #60	@ 0x3c
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f00f f85d 	bl	8011a8c <_ZdlPvj>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4618      	mov	r0, r3
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <_ZN14CBarraProgreso9SetMaximoEi>:

void CBarraProgreso::SetMaximo(int maximo)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
	Maximo=maximo;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <_ZN14CBarraProgreso8SetValorEi>:
void CBarraProgreso::SetValor(int valor)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
	Valor=valor;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <_ZN14CBarraProgreso4ShowEv>:
void CBarraProgreso::Show()
{
 8002a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a16:	b087      	sub	sp, #28
 8002a18:	af02      	add	r7, sp, #8
 8002a1a:	6078      	str	r0, [r7, #4]
  //dibujo el rectangulo
  fillRect(Xi, Yi, Ancho, Alto, BackColor);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	3338      	adds	r3, #56	@ 0x38
 8002a24:	681c      	ldr	r4, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	b219      	sxth	r1, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	b21d      	sxth	r5, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	b21e      	sxth	r6, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3c:	b21b      	sxth	r3, r3
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6952      	ldr	r2, [r2, #20]
 8002a42:	b292      	uxth	r2, r2
 8002a44:	9201      	str	r2, [sp, #4]
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	4633      	mov	r3, r6
 8002a4a:	462a      	mov	r2, r5
 8002a4c:	47a0      	blx	r4

  int ancho2=Valor*Ancho/Maximo;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6a12      	ldr	r2, [r2, #32]
 8002a56:	fb03 f202 	mul.w	r2, r3, r2
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002a62:	60fb      	str	r3, [r7, #12]
  if(ancho2==0)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <_ZN14CBarraProgreso4ShowEv+0x5a>
	  ancho2=1;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	60fb      	str	r3, [r7, #12]
  fillRect(Xi, Yi, ancho2, Alto, ColorBarra);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	3338      	adds	r3, #56	@ 0x38
 8002a76:	681c      	ldr	r4, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	b219      	sxth	r1, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	b21d      	sxth	r5, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	b21e      	sxth	r6, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8c:	b21b      	sxth	r3, r3
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a92:	b292      	uxth	r2, r2
 8002a94:	9201      	str	r2, [sp, #4]
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	4633      	mov	r3, r6
 8002a9a:	462a      	mov	r2, r5
 8002a9c:	47a0      	blx	r4
  //hay que mostrar contorno?
  if (Contorno == 1) {
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d118      	bne.n	8002ad8 <_ZN14CBarraProgreso4ShowEv+0xc4>
    drawRect(Xi, Yi, Ancho, Alto, ColorControrno);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	3344      	adds	r3, #68	@ 0x44
 8002aae:	681c      	ldr	r4, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	b219      	sxth	r1, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	b21d      	sxth	r5, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	b21e      	sxth	r6, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac6:	b21b      	sxth	r3, r3
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002acc:	b292      	uxth	r2, r2
 8002ace:	9201      	str	r2, [sp, #4]
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	4633      	mov	r3, r6
 8002ad4:	462a      	mov	r2, r5
 8002ad6:	47a0      	blx	r4
  }
}
 8002ad8:	bf00      	nop
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ae0 <_ZN18CComponenteBaseTftC1Ev>:
#include <GUI/CComponenteBaseTft.hpp>
#include "stdio.h"
#include <stdarg.h>
#include "string.h"
#include "ILI9341/ILI9341_GFX.hpp"
CComponenteBaseTft::CComponenteBaseTft()
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	4a09      	ldr	r2, [pc, #36]	@ (8002b10 <_ZN18CComponenteBaseTftC1Ev+0x30>)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	605a      	str	r2, [r3, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	609a      	str	r2, [r3, #8]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	615a      	str	r2, [r3, #20]
{
	// TODO Auto-generated constructor stub

}
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4618      	mov	r0, r3
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	08014e68 	.word	0x08014e68

08002b14 <_ZN18CComponenteBaseTftD1Ev>:

CComponenteBaseTft::~CComponenteBaseTft()
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	4a04      	ldr	r2, [pc, #16]	@ (8002b30 <_ZN18CComponenteBaseTftD1Ev+0x1c>)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4618      	mov	r0, r3
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	08014e68 	.word	0x08014e68

08002b34 <_ZN18CComponenteBaseTftD0Ev>:
CComponenteBaseTft::~CComponenteBaseTft()
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
}
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f7ff ffe9 	bl	8002b14 <_ZN18CComponenteBaseTftD1Ev>
 8002b42:	2118      	movs	r1, #24
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f00e ffa1 	bl	8011a8c <_ZdlPvj>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <_ZN18CComponenteBaseTft9drawPixelEsst>:

//creo una capa que envuelve todas las funciones de la pantalla tft para mejorar el codigo
void CComponenteBaseTft::CComponenteBaseTft::drawPixel(int16_t x, int16_t y,
		uint16_t color)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	4608      	mov	r0, r1
 8002b5e:	4611      	mov	r1, r2
 8002b60:	461a      	mov	r2, r3
 8002b62:	4603      	mov	r3, r0
 8002b64:	817b      	strh	r3, [r7, #10]
 8002b66:	460b      	mov	r3, r1
 8002b68:	813b      	strh	r3, [r7, #8]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	80fb      	strh	r3, [r7, #6]
}
 8002b6e:	bf00      	nop
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <_ZN18CComponenteBaseTft10startWriteEv>:

void CComponenteBaseTft::startWrite(void)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <_ZN18CComponenteBaseTft10writePixelEsst>:
void CComponenteBaseTft::writePixel(int16_t x, int16_t y, uint16_t color)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b085      	sub	sp, #20
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	60f8      	str	r0, [r7, #12]
 8002b96:	4608      	mov	r0, r1
 8002b98:	4611      	mov	r1, r2
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	817b      	strh	r3, [r7, #10]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	813b      	strh	r3, [r7, #8]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	80fb      	strh	r3, [r7, #6]
}
 8002ba8:	bf00      	nop
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <_ZN18CComponenteBaseTft13writeFillRectEsssst>:
void CComponenteBaseTft::writeFillRect(int16_t x, int16_t y, int16_t w,
		int16_t h, uint16_t color)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	4608      	mov	r0, r1
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	817b      	strh	r3, [r7, #10]
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	813b      	strh	r3, [r7, #8]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	80fb      	strh	r3, [r7, #6]
}
 8002bce:	bf00      	nop
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <_ZN18CComponenteBaseTft14writeFastVLineEssst>:
void CComponenteBaseTft::writeFastVLine(int16_t x, int16_t y, int16_t h,
		uint16_t color)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b085      	sub	sp, #20
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	60f8      	str	r0, [r7, #12]
 8002be2:	4608      	mov	r0, r1
 8002be4:	4611      	mov	r1, r2
 8002be6:	461a      	mov	r2, r3
 8002be8:	4603      	mov	r3, r0
 8002bea:	817b      	strh	r3, [r7, #10]
 8002bec:	460b      	mov	r3, r1
 8002bee:	813b      	strh	r3, [r7, #8]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	80fb      	strh	r3, [r7, #6]
}
 8002bf4:	bf00      	nop
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <_ZN18CComponenteBaseTft14writeFastHLineEssst>:
void CComponenteBaseTft::writeFastHLine(int16_t x, int16_t y, int16_t w,
		uint16_t color)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	4608      	mov	r0, r1
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4603      	mov	r3, r0
 8002c10:	817b      	strh	r3, [r7, #10]
 8002c12:	460b      	mov	r3, r1
 8002c14:	813b      	strh	r3, [r7, #8]
 8002c16:	4613      	mov	r3, r2
 8002c18:	80fb      	strh	r3, [r7, #6]
}
 8002c1a:	bf00      	nop
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <_ZN18CComponenteBaseTft9writeLineEsssst>:
void CComponenteBaseTft::writeLine(int16_t x0, int16_t y0, int16_t x1,
		int16_t y1, uint16_t color)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b085      	sub	sp, #20
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	60f8      	str	r0, [r7, #12]
 8002c2e:	4608      	mov	r0, r1
 8002c30:	4611      	mov	r1, r2
 8002c32:	461a      	mov	r2, r3
 8002c34:	4603      	mov	r3, r0
 8002c36:	817b      	strh	r3, [r7, #10]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	813b      	strh	r3, [r7, #8]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	80fb      	strh	r3, [r7, #6]
}
 8002c40:	bf00      	nop
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <_ZN18CComponenteBaseTft8endWriteEv>:
void CComponenteBaseTft::endWrite(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <_ZN18CComponenteBaseTft11setRotationEh>:
void CComponenteBaseTft::setRotation(uint8_t r)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	70fb      	strb	r3, [r7, #3]
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <_ZN18CComponenteBaseTft13invertDisplayEb>:
void CComponenteBaseTft::invertDisplay(bool i)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	460b      	mov	r3, r1
 8002c82:	70fb      	strb	r3, [r7, #3]
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <_ZN18CComponenteBaseTft13drawFastVLineEssst>:
void CComponenteBaseTft::drawFastVLine(int16_t x, int16_t y, int16_t h,
		uint16_t color)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	4608      	mov	r0, r1
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	817b      	strh	r3, [r7, #10]
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	813b      	strh	r3, [r7, #8]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	80fb      	strh	r3, [r7, #6]
}
 8002caa:	bf00      	nop
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <_ZN18CComponenteBaseTft13drawFastHLineEssst>:
void CComponenteBaseTft::drawFastHLine(int16_t x, int16_t y, int16_t w,
		uint16_t color)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b085      	sub	sp, #20
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	60f8      	str	r0, [r7, #12]
 8002cbe:	4608      	mov	r0, r1
 8002cc0:	4611      	mov	r1, r2
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	817b      	strh	r3, [r7, #10]
 8002cc8:	460b      	mov	r3, r1
 8002cca:	813b      	strh	r3, [r7, #8]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	80fb      	strh	r3, [r7, #6]
}
 8002cd0:	bf00      	nop
 8002cd2:	3714      	adds	r7, #20
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <_ZN18CComponenteBaseTft10fillScreenEt>:
void CComponenteBaseTft::fillScreen(uint16_t color)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	807b      	strh	r3, [r7, #2]
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <_ZN18CComponenteBaseTft8drawLineEsssst>:
void CComponenteBaseTft::drawLine(int16_t x0, int16_t y0, int16_t x1,
		int16_t y1, uint16_t color)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	4608      	mov	r0, r1
 8002cfe:	4611      	mov	r1, r2
 8002d00:	461a      	mov	r2, r3
 8002d02:	4603      	mov	r3, r0
 8002d04:	817b      	strh	r3, [r7, #10]
 8002d06:	460b      	mov	r3, r1
 8002d08:	813b      	strh	r3, [r7, #8]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	80fb      	strh	r3, [r7, #6]
}
 8002d0e:	bf00      	nop
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <_ZN18CComponenteBaseTft5widthEv>:
}
void CComponenteBaseTft::cp437(bool x)
{
}
int16_t CComponenteBaseTft::width(void)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
	return 319;
 8002d22:	f240 133f 	movw	r3, #319	@ 0x13f
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <_ZN18CComponenteBaseTft6heightEv>:
int16_t CComponenteBaseTft::height(void)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
	return 239;
 8002d3a:	23ef      	movs	r3, #239	@ 0xef
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <_ZN18CComponenteBaseTft8fillRectEsssst>:
	va_end(pa);
	buffer[posbuffer] = '\0';
	print(buffer);
}
void CComponenteBaseTft::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,uint16_t color)
{
 8002d48:	b590      	push	{r4, r7, lr}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af02      	add	r7, sp, #8
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	4608      	mov	r0, r1
 8002d52:	4611      	mov	r1, r2
 8002d54:	461a      	mov	r2, r3
 8002d56:	4603      	mov	r3, r0
 8002d58:	817b      	strh	r3, [r7, #10]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	813b      	strh	r3, [r7, #8]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Filled_Rectangle_Coord(x, y, x+w, y+h, color);
 8002d62:	8978      	ldrh	r0, [r7, #10]
 8002d64:	8939      	ldrh	r1, [r7, #8]
 8002d66:	897a      	ldrh	r2, [r7, #10]
 8002d68:	88fb      	ldrh	r3, [r7, #6]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	b29c      	uxth	r4, r3
 8002d6e:	893a      	ldrh	r2, [r7, #8]
 8002d70:	8c3b      	ldrh	r3, [r7, #32]
 8002d72:	4413      	add	r3, r2
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	4622      	mov	r2, r4
 8002d7e:	f006 fc34 	bl	80095ea <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt>
}
 8002d82:	bf00      	nop
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd90      	pop	{r4, r7, pc}

08002d8a <_ZN18CComponenteBaseTft8drawRectEsssst>:
void CComponenteBaseTft::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,uint16_t color)
{
 8002d8a:	b590      	push	{r4, r7, lr}
 8002d8c:	b087      	sub	sp, #28
 8002d8e:	af02      	add	r7, sp, #8
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	4608      	mov	r0, r1
 8002d94:	4611      	mov	r1, r2
 8002d96:	461a      	mov	r2, r3
 8002d98:	4603      	mov	r3, r0
 8002d9a:	817b      	strh	r3, [r7, #10]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	813b      	strh	r3, [r7, #8]
 8002da0:	4613      	mov	r3, r2
 8002da2:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Hollow_Rectangle_Coord(x, y,x+w,y+h,color);
 8002da4:	8978      	ldrh	r0, [r7, #10]
 8002da6:	8939      	ldrh	r1, [r7, #8]
 8002da8:	897a      	ldrh	r2, [r7, #10]
 8002daa:	88fb      	ldrh	r3, [r7, #6]
 8002dac:	4413      	add	r3, r2
 8002dae:	b29c      	uxth	r4, r3
 8002db0:	893a      	ldrh	r2, [r7, #8]
 8002db2:	8c3b      	ldrh	r3, [r7, #32]
 8002db4:	4413      	add	r3, r2
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	4622      	mov	r2, r4
 8002dc0:	f006 fb92 	bl	80094e8 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt>
}
 8002dc4:	bf00      	nop
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd90      	pop	{r4, r7, pc}

08002dcc <_ZN18CComponenteBaseTft9setCursorEss>:
void CComponenteBaseTft::setCursor(int16_t x, int16_t y)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	807b      	strh	r3, [r7, #2]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	803b      	strh	r3, [r7, #0]
    CursorX=x;
 8002ddc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	605a      	str	r2, [r3, #4]
    CursorY=y;
 8002de4:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	609a      	str	r2, [r3, #8]
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <_ZN18CComponenteBaseTft11setTextSizeEh>:
void CComponenteBaseTft::setTextSize(uint8_t s)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	460b      	mov	r3, r1
 8002e02:	70fb      	strb	r3, [r7, #3]
	TextSize=s;
 8002e04:	78fa      	ldrb	r2, [r7, #3]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	60da      	str	r2, [r3, #12]
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <_ZN18CComponenteBaseTft12setTextColorEt>:
void CComponenteBaseTft::setTextSize(uint8_t sx, uint8_t sy)
{
}
void CComponenteBaseTft::setTextColor(uint16_t c)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
 8002e1e:	460b      	mov	r3, r1
 8002e20:	807b      	strh	r3, [r7, #2]
	ColorTexto=c;
 8002e22:	887a      	ldrh	r2, [r7, #2]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	611a      	str	r2, [r3, #16]
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <_ZN18CComponenteBaseTft5printEPc>:
void CComponenteBaseTft::print(char *texto)
{
 8002e34:	b590      	push	{r4, r7, lr}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af02      	add	r7, sp, #8
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
	ILI9341_Draw_Text(texto, CursorX,CursorY, ColorTexto, TextSize, BackColor);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6859      	ldr	r1, [r3, #4]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6898      	ldr	r0, [r3, #8]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	b29c      	uxth	r4, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6952      	ldr	r2, [r2, #20]
 8002e56:	b292      	uxth	r2, r2
 8002e58:	9201      	str	r2, [sp, #4]
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	4623      	mov	r3, r4
 8002e5e:	4602      	mov	r2, r0
 8002e60:	6838      	ldr	r0, [r7, #0]
 8002e62:	f006 fcb7 	bl	80097d4 <_Z17ILI9341_Draw_TextPKciittt>
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd90      	pop	{r4, r7, pc}

08002e6e <_ZN18CComponenteBaseTft11LimpiaTextoEv>:
void CComponenteBaseTft::LimpiaTexto()
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]

}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
	...

08002e84 <_ZN12CEtiquetaTftD1Ev>:
 */

#include <GUI/CEtiquetaTft.hpp>


CEtiquetaTft::~CEtiquetaTft()
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	4a05      	ldr	r2, [pc, #20]	@ (8002ea4 <_ZN12CEtiquetaTftD1Ev+0x20>)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 fb93 	bl	80035c0 <_ZN14CRectanguloTftD1Ev>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	08014ebc 	.word	0x08014ebc

08002ea8 <_ZN12CEtiquetaTftD0Ev>:
CEtiquetaTft::~CEtiquetaTft()
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
}
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7ff ffe7 	bl	8002e84 <_ZN12CEtiquetaTftD1Ev>
 8002eb6:	21a4      	movs	r1, #164	@ 0xa4
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f00e fde7 	bl	8011a8c <_ZdlPvj>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>:

CEtiquetaTft::CEtiquetaTft(int xi, int yi, int ancho, int alto,	int backColor, char *texto, int colorTexto, int textSize, int contorno,	int colorContorno) :
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b088      	sub	sp, #32
 8002ecc:	af04      	add	r7, sp, #16
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
 8002ed4:	603b      	str	r3, [r7, #0]
		CRectanguloTft(xi, yi, ancho, alto, backColor, contorno, colorContorno)
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eda:	9303      	str	r3, [sp, #12]
 8002edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ede:	9302      	str	r3, [sp, #8]
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	9301      	str	r3, [sp, #4]
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	68b9      	ldr	r1, [r7, #8]
 8002eee:	f000 fb89 	bl	8003604 <_ZN14CRectanguloTftC1Eiiiiiii>
 8002ef2:	4a11      	ldr	r2, [pc, #68]	@ (8002f38 <_ZN12CEtiquetaTftC1EiiiiiPciiii+0x70>)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2203      	movs	r2, #3
 8002efc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
{
	strcpy(Texto, texto);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	3330      	adds	r3, #48	@ 0x30
 8002f14:	6a39      	ldr	r1, [r7, #32]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f00f fced 	bl	80128f6 <strcpy>
	ColorTexto = colorTexto;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f20:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	TextSize = textSize;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f28:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
}
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	08014ebc 	.word	0x08014ebc

08002f3c <_ZN12CEtiquetaTft8SetTextoEPcz>:

void CEtiquetaTft::SetTexto(char *formato, ...)
{
 8002f3c:	b40e      	push	{r1, r2, r3}
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b0bb      	sub	sp, #236	@ 0xec
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
//	LimpiaTexto();
	char *p;
	char buffer[100];
	char tmp[100];
	for(int i=0;i<100;i++)
 8002f46:	2300      	movs	r3, #0
 8002f48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f4c:	e012      	b.n	8002f74 <_ZN12CEtiquetaTft8SetTextoEPcz+0x38>
	{
		buffer[i]='\0';
 8002f4e:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8002f52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f56:	4413      	add	r3, r2
 8002f58:	2200      	movs	r2, #0
 8002f5a:	701a      	strb	r2, [r3, #0]
		tmp[i]='\0';
 8002f5c:	f107 020c 	add.w	r2, r7, #12
 8002f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f64:	4413      	add	r3, r2
 8002f66:	2200      	movs	r2, #0
 8002f68:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<100;i++)
 8002f6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f6e:	3301      	adds	r3, #1
 8002f70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f78:	2b63      	cmp	r3, #99	@ 0x63
 8002f7a:	dde8      	ble.n	8002f4e <_ZN12CEtiquetaTft8SetTextoEPcz+0x12>
	}
	int postmp = 0;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	int posbuffer = 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
	va_list pa;
	int encontrado = 0;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

	va_start(pa, formato);
 8002f8e:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8002f92:	60bb      	str	r3, [r7, #8]

	for (p = formato; *p; p++)
 8002f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f98:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f9c:	e0f4      	b.n	8003188 <_ZN12CEtiquetaTft8SetTextoEPcz+0x24c>
	{

		if (*p != '%')
 8002f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b25      	cmp	r3, #37	@ 0x25
 8002fa6:	d00f      	beq.n	8002fc8 <_ZN12CEtiquetaTft8SetTextoEPcz+0x8c>
		{
			buffer[posbuffer] = *p;
 8002fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fac:	7819      	ldrb	r1, [r3, #0]
 8002fae:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8002fb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002fb6:	4413      	add	r3, r2
 8002fb8:	460a      	mov	r2, r1
 8002fba:	701a      	strb	r2, [r3, #0]
			posbuffer++;
 8002fbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			continue;
 8002fc6:	e0da      	b.n	800317e <_ZN12CEtiquetaTft8SetTextoEPcz+0x242>
		}
		encontrado = 0;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		switch (*++p)
 8002fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	3b63      	subs	r3, #99	@ 0x63
 8002fe0:	2b15      	cmp	r3, #21
 8002fe2:	f200 8095 	bhi.w	8003110 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1d4>
 8002fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8002fec <_ZN12CEtiquetaTft8SetTextoEPcz+0xb0>)
 8002fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fec:	080030b5 	.word	0x080030b5
 8002ff0:	08003045 	.word	0x08003045
 8002ff4:	08003111 	.word	0x08003111
 8002ff8:	080030d1 	.word	0x080030d1
 8002ffc:	08003111 	.word	0x08003111
 8003000:	08003111 	.word	0x08003111
 8003004:	08003061 	.word	0x08003061
 8003008:	08003111 	.word	0x08003111
 800300c:	08003111 	.word	0x08003111
 8003010:	08003111 	.word	0x08003111
 8003014:	08003111 	.word	0x08003111
 8003018:	08003111 	.word	0x08003111
 800301c:	08003111 	.word	0x08003111
 8003020:	08003099 	.word	0x08003099
 8003024:	08003111 	.word	0x08003111
 8003028:	08003111 	.word	0x08003111
 800302c:	080030f5 	.word	0x080030f5
 8003030:	08003111 	.word	0x08003111
 8003034:	08003111 	.word	0x08003111
 8003038:	08003111 	.word	0x08003111
 800303c:	08003111 	.word	0x08003111
 8003040:	0800307d 	.word	0x0800307d
		{
		case 'd':
			sprintf(tmp, "%d", va_arg(pa, int));
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	1d1a      	adds	r2, r3, #4
 8003048:	60ba      	str	r2, [r7, #8]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	f107 030c 	add.w	r3, r7, #12
 8003050:	495b      	ldr	r1, [pc, #364]	@ (80031c0 <_ZN12CEtiquetaTft8SetTextoEPcz+0x284>)
 8003052:	4618      	mov	r0, r3
 8003054:	f00f fb18 	bl	8012688 <siprintf>
			encontrado = 1;
 8003058:	2301      	movs	r3, #1
 800305a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
			break;
 800305e:	e067      	b.n	8003130 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1f4>
		case 'i':
			sprintf(tmp, "%i", va_arg(pa, int));
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	1d1a      	adds	r2, r3, #4
 8003064:	60ba      	str	r2, [r7, #8]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	f107 030c 	add.w	r3, r7, #12
 800306c:	4955      	ldr	r1, [pc, #340]	@ (80031c4 <_ZN12CEtiquetaTft8SetTextoEPcz+0x288>)
 800306e:	4618      	mov	r0, r3
 8003070:	f00f fb0a 	bl	8012688 <siprintf>
			encontrado = 1;
 8003074:	2301      	movs	r3, #1
 8003076:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
			break;
 800307a:	e059      	b.n	8003130 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1f4>
		case 'x':
			sprintf(tmp, "%x", va_arg(pa, int));
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	1d1a      	adds	r2, r3, #4
 8003080:	60ba      	str	r2, [r7, #8]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	f107 030c 	add.w	r3, r7, #12
 8003088:	494f      	ldr	r1, [pc, #316]	@ (80031c8 <_ZN12CEtiquetaTft8SetTextoEPcz+0x28c>)
 800308a:	4618      	mov	r0, r3
 800308c:	f00f fafc 	bl	8012688 <siprintf>
			encontrado = 1;
 8003090:	2301      	movs	r3, #1
 8003092:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
			break;
 8003096:	e04b      	b.n	8003130 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1f4>
		case 'p':
			sprintf(tmp, "%p", va_arg(pa, void*));
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	1d1a      	adds	r2, r3, #4
 800309c:	60ba      	str	r2, [r7, #8]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	f107 030c 	add.w	r3, r7, #12
 80030a4:	4949      	ldr	r1, [pc, #292]	@ (80031cc <_ZN12CEtiquetaTft8SetTextoEPcz+0x290>)
 80030a6:	4618      	mov	r0, r3
 80030a8:	f00f faee 	bl	8012688 <siprintf>
			encontrado = 1;
 80030ac:	2301      	movs	r3, #1
 80030ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
			break;
 80030b2:	e03d      	b.n	8003130 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1f4>
		case 'c':
			sprintf(tmp, "%c", va_arg(pa, int));
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	1d1a      	adds	r2, r3, #4
 80030b8:	60ba      	str	r2, [r7, #8]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	f107 030c 	add.w	r3, r7, #12
 80030c0:	4943      	ldr	r1, [pc, #268]	@ (80031d0 <_ZN12CEtiquetaTft8SetTextoEPcz+0x294>)
 80030c2:	4618      	mov	r0, r3
 80030c4:	f00f fae0 	bl	8012688 <siprintf>
			encontrado = 1;
 80030c8:	2301      	movs	r3, #1
 80030ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
			break;
 80030ce:	e02f      	b.n	8003130 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1f4>
		case 'f':
			sprintf(tmp, "%f", va_arg(pa, double));
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	3307      	adds	r3, #7
 80030d4:	f023 0307 	bic.w	r3, r3, #7
 80030d8:	f103 0208 	add.w	r2, r3, #8
 80030dc:	60ba      	str	r2, [r7, #8]
 80030de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e2:	f107 000c 	add.w	r0, r7, #12
 80030e6:	493b      	ldr	r1, [pc, #236]	@ (80031d4 <_ZN12CEtiquetaTft8SetTextoEPcz+0x298>)
 80030e8:	f00f face 	bl	8012688 <siprintf>
			encontrado = 1;
 80030ec:	2301      	movs	r3, #1
 80030ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
			break;
 80030f2:	e01d      	b.n	8003130 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1f4>
		case 's':
			sprintf(tmp, "%s", va_arg(pa, char *));
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	1d1a      	adds	r2, r3, #4
 80030f8:	60ba      	str	r2, [r7, #8]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	f107 030c 	add.w	r3, r7, #12
 8003100:	4935      	ldr	r1, [pc, #212]	@ (80031d8 <_ZN12CEtiquetaTft8SetTextoEPcz+0x29c>)
 8003102:	4618      	mov	r0, r3
 8003104:	f00f fac0 	bl	8012688 <siprintf>
			encontrado = 1;
 8003108:	2301      	movs	r3, #1
 800310a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
			break;
 800310e:	e00f      	b.n	8003130 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1f4>
		default:
			buffer[posbuffer] = *p;
 8003110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003114:	7819      	ldrb	r1, [r3, #0]
 8003116:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800311a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800311e:	4413      	add	r3, r2
 8003120:	460a      	mov	r2, r1
 8003122:	701a      	strb	r2, [r3, #0]
			posbuffer++;
 8003124:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003128:	3301      	adds	r3, #1
 800312a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 800312e:	bf00      	nop
		}
		if (encontrado == 1)
 8003130:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003134:	2b01      	cmp	r3, #1
 8003136:	d122      	bne.n	800317e <_ZN12CEtiquetaTft8SetTextoEPcz+0x242>
		{
			postmp = 0;
 8003138:	2300      	movs	r3, #0
 800313a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
			while (tmp[postmp] != '\0')
 800313e:	e016      	b.n	800316e <_ZN12CEtiquetaTft8SetTextoEPcz+0x232>
			{
				buffer[posbuffer] = tmp[postmp];
 8003140:	f107 020c 	add.w	r2, r7, #12
 8003144:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003148:	4413      	add	r3, r2
 800314a:	7819      	ldrb	r1, [r3, #0]
 800314c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8003150:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003154:	4413      	add	r3, r2
 8003156:	460a      	mov	r2, r1
 8003158:	701a      	strb	r2, [r3, #0]
				posbuffer++;
 800315a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800315e:	3301      	adds	r3, #1
 8003160:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
				postmp++;
 8003164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003168:	3301      	adds	r3, #1
 800316a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
			while (tmp[postmp] != '\0')
 800316e:	f107 020c 	add.w	r2, r7, #12
 8003172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003176:	4413      	add	r3, r2
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1e0      	bne.n	8003140 <_ZN12CEtiquetaTft8SetTextoEPcz+0x204>
	for (p = formato; *p; p++)
 800317e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003182:	3301      	adds	r3, #1
 8003184:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	f47f af05 	bne.w	8002f9e <_ZN12CEtiquetaTft8SetTextoEPcz+0x62>
			}
		}
	}
	va_end(pa);
	buffer[posbuffer] = '\0';
 8003194:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8003198:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800319c:	4413      	add	r3, r2
 800319e:	2200      	movs	r2, #0
 80031a0:	701a      	strb	r2, [r3, #0]
	strcpy(Texto, buffer);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	3330      	adds	r3, #48	@ 0x30
 80031a6:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80031aa:	4611      	mov	r1, r2
 80031ac:	4618      	mov	r0, r3
 80031ae:	f00f fba2 	bl	80128f6 <strcpy>
}
 80031b2:	bf00      	nop
 80031b4:	37ec      	adds	r7, #236	@ 0xec
 80031b6:	46bd      	mov	sp, r7
 80031b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80031bc:	b003      	add	sp, #12
 80031be:	4770      	bx	lr
 80031c0:	08014790 	.word	0x08014790
 80031c4:	08014794 	.word	0x08014794
 80031c8:	08014798 	.word	0x08014798
 80031cc:	0801479c 	.word	0x0801479c
 80031d0:	080147a0 	.word	0x080147a0
 80031d4:	080147a4 	.word	0x080147a4
 80031d8:	080147a8 	.word	0x080147a8

080031dc <_ZN12CEtiquetaTft13SetSeparacionEii>:
{
	return Texto;
}

void CEtiquetaTft::SetSeparacion(int izquieda, int arriba)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
	SeparacionIzquierda = izquieda;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	SeparacionArriba = arriba;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
}
 80031f8:	bf00      	nop
 80031fa:	3714      	adds	r7, #20
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <_ZN12CEtiquetaTft13SetColorTextoEi>:
{
	return SeparacionIzquierda;
}

void CEtiquetaTft::SetColorTexto(int color)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
	ColorTexto = color;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <_ZN12CEtiquetaTft4ShowEv>:
{
	return ColorTexto;
}

void CEtiquetaTft::Show()
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
	//mandamos a dibujar el rectangulo
	CRectanguloTft::Show();
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4618      	mov	r0, r3
 800322e:	f000 fa1b 	bl	8003668 <_ZN14CRectanguloTft4ShowEv>
	//me posiciono el la pocicion del texto
	setCursor(Xi + SeparacionIzquierda, Yi + SeparacionArriba);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	b29a      	uxth	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003240:	b29b      	uxth	r3, r3
 8003242:	4413      	add	r3, r2
 8003244:	b29b      	uxth	r3, r3
 8003246:	b219      	sxth	r1, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	b29a      	uxth	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003254:	b29b      	uxth	r3, r3
 8003256:	4413      	add	r3, r2
 8003258:	b29b      	uxth	r3, r3
 800325a:	b21b      	sxth	r3, r3
 800325c:	461a      	mov	r2, r3
 800325e:	f7ff fdb5 	bl	8002dcc <_ZN18CComponenteBaseTft9setCursorEss>
	//asigno tamaño de la letra
	setTextSize (TextSize);
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800326a:	b2db      	uxtb	r3, r3
 800326c:	4619      	mov	r1, r3
 800326e:	4610      	mov	r0, r2
 8003270:	f7ff fdc2 	bl	8002df8 <_ZN18CComponenteBaseTft11setTextSizeEh>
	//asigno el color de texto
	setTextColor (ColorTexto);
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800327c:	b29b      	uxth	r3, r3
 800327e:	4619      	mov	r1, r3
 8003280:	4610      	mov	r0, r2
 8003282:	f7ff fdc8 	bl	8002e16 <_ZN18CComponenteBaseTft12setTextColorEt>
	//muestro el texto;
	print (Texto);
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3330      	adds	r3, #48	@ 0x30
 800328c:	4619      	mov	r1, r3
 800328e:	4610      	mov	r0, r2
 8003290:	f7ff fdd0 	bl	8002e34 <_ZN18CComponenteBaseTft5printEPc>
}
 8003294:	bf00      	nop
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <_ZN12CEtiquetaTft12SetBackColorEi>:
int CEtiquetaTft::DameTextSize()
{
	return TextSize;
}
void CEtiquetaTft::SetBackColor(int color)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
	BackColor=color;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	615a      	str	r2, [r3, #20]
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <_ZN12CEtiquetaTft11LimpiaTextoEv>:
void CEtiquetaTft::LimpiaTexto()
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
	setTextColor (BackColor);
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	4619      	mov	r1, r3
 80032ca:	4610      	mov	r0, r2
 80032cc:	f7ff fda3 	bl	8002e16 <_ZN18CComponenteBaseTft12setTextColorEt>
	//muestro el texto;
	print (Texto);
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	3330      	adds	r3, #48	@ 0x30
 80032d6:	4619      	mov	r1, r3
 80032d8:	4610      	mov	r0, r2
 80032da:	f7ff fdab 	bl	8002e34 <_ZN18CComponenteBaseTft5printEPc>
	setTextColor (ColorTexto);
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	4619      	mov	r1, r3
 80032ea:	4610      	mov	r0, r2
 80032ec:	f7ff fd93 	bl	8002e16 <_ZN18CComponenteBaseTft12setTextColorEt>
	//muestro el texto;
//	print (Texto);

}
 80032f0:	bf00      	nop
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <_ZN13CPantallaBaseD1Ev>:
 *      Author: W10
 */

#include <GUI/CPantallaBase.hpp>

CPantallaBase::~CPantallaBase()
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	4a09      	ldr	r2, [pc, #36]	@ (8003328 <_ZN13CPantallaBaseD1Ev+0x30>)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	4a09      	ldr	r2, [pc, #36]	@ (800332c <_ZN13CPantallaBaseD1Ev+0x34>)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3330      	adds	r3, #48	@ 0x30
 8003310:	4618      	mov	r0, r3
 8003312:	f007 f9d3 	bl	800a6bc <_ZN26CManejadorEventosControlesD1Ev>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4618      	mov	r0, r3
 800331a:	f000 f951 	bl	80035c0 <_ZN14CRectanguloTftD1Ev>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4618      	mov	r0, r3
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	08014f1c 	.word	0x08014f1c
 800332c:	08014f9c 	.word	0x08014f9c

08003330 <_ZThn48_N13CPantallaBaseD1Ev>:
	char Titulo[100];
	CEstacionBase *Estacion;
	CManejadorControles *ManejadorControles;

public:
	virtual ~CPantallaBase();
 8003330:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8003334:	f7ff bfe0 	b.w	80032f8 <_ZN13CPantallaBaseD1Ev>

08003338 <_ZN13CPantallaBaseD0Ev>:
CPantallaBase::~CPantallaBase()
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
}
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7ff ffd9 	bl	80032f8 <_ZN13CPantallaBaseD1Ev>
 8003346:	21ac      	movs	r1, #172	@ 0xac
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f00e fb9f 	bl	8011a8c <_ZdlPvj>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4618      	mov	r0, r3
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <_ZThn48_N13CPantallaBaseD0Ev>:
 8003358:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800335c:	f7ff bfec 	b.w	8003338 <_ZN13CPantallaBaseD0Ev>

08003360 <_ZN13CPantallaBaseC1EiPc>:

//constructor
CPantallaBase::CPantallaBase(int verTitulo, char *titulo) :
 8003360:	b590      	push	{r4, r7, lr}
 8003362:	b08f      	sub	sp, #60	@ 0x3c
 8003364:	af08      	add	r7, sp, #32
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
		CRectanguloTft(0, 0, 0, 0, COLOR::BLACK, 1, COLOR::BLUE)
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	231f      	movs	r3, #31
 8003370:	9303      	str	r3, [sp, #12]
 8003372:	2301      	movs	r3, #1
 8003374:	9302      	str	r3, [sp, #8]
 8003376:	2300      	movs	r3, #0
 8003378:	9301      	str	r3, [sp, #4]
 800337a:	2300      	movs	r3, #0
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	2300      	movs	r3, #0
 8003380:	2200      	movs	r2, #0
 8003382:	2100      	movs	r1, #0
 8003384:	f000 f93e 	bl	8003604 <_ZN14CRectanguloTftC1Eiiiiiii>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	3330      	adds	r3, #48	@ 0x30
 800338c:	4618      	mov	r0, r3
 800338e:	f007 f985 	bl	800a69c <_ZN26CManejadorEventosControlesC1Ev>
 8003392:	4a2a      	ldr	r2, [pc, #168]	@ (800343c <_ZN13CPantallaBaseC1EiPc+0xdc>)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	4a29      	ldr	r2, [pc, #164]	@ (8003440 <_ZN13CPantallaBaseC1EiPc+0xe0>)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	631a      	str	r2, [r3, #48]	@ 0x30
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2201      	movs	r2, #1
 80033aa:	63da      	str	r2, [r3, #60]	@ 0x3c
{
	Visible=false;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	VerTitulo = verTitulo;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	63da      	str	r2, [r3, #60]	@ 0x3c
	strcpy(Titulo, titulo);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	3340      	adds	r3, #64	@ 0x40
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f00f fa98 	bl	80128f6 <strcpy>
	setRotation(3);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2103      	movs	r1, #3
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff fc48 	bl	8002c60 <_ZN18CComponenteBaseTft11setRotationEh>
	int ancho = width();
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff fca1 	bl	8002d1a <_ZN18CComponenteBaseTft5widthEv>
 80033d8:	4603      	mov	r3, r0
 80033da:	617b      	str	r3, [r7, #20]
	int alto = height();
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff fca7 	bl	8002d32 <_ZN18CComponenteBaseTft6heightEv>
 80033e4:	4603      	mov	r3, r0
 80033e6:	613b      	str	r3, [r7, #16]
	Redimenciona(ancho, alto);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	6979      	ldr	r1, [r7, #20]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 f98a 	bl	8003708 <_ZN14CRectanguloTft12RedimencionaEii>
	LabelTitulo = new CEtiquetaTft( Xi, Yi, ancho, 30, COLOR::BLUE, Titulo,	COLOR::WHITE, 3, 0, COLOR::BLUE);
 80033f4:	20a4      	movs	r0, #164	@ 0xa4
 80033f6:	f00e fb4b 	bl	8011a90 <_Znwj>
 80033fa:	4603      	mov	r3, r0
 80033fc:	461c      	mov	r4, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6999      	ldr	r1, [r3, #24]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	69da      	ldr	r2, [r3, #28]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	3340      	adds	r3, #64	@ 0x40
 800340a:	201f      	movs	r0, #31
 800340c:	9006      	str	r0, [sp, #24]
 800340e:	2000      	movs	r0, #0
 8003410:	9005      	str	r0, [sp, #20]
 8003412:	2003      	movs	r0, #3
 8003414:	9004      	str	r0, [sp, #16]
 8003416:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800341a:	9003      	str	r0, [sp, #12]
 800341c:	9302      	str	r3, [sp, #8]
 800341e:	231f      	movs	r3, #31
 8003420:	9301      	str	r3, [sp, #4]
 8003422:	231e      	movs	r3, #30
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	4620      	mov	r0, r4
 800342a:	f7ff fd4d 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	639c      	str	r4, [r3, #56]	@ 0x38
}
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4618      	mov	r0, r3
 8003436:	371c      	adds	r7, #28
 8003438:	46bd      	mov	sp, r7
 800343a:	bd90      	pop	{r4, r7, pc}
 800343c:	08014f1c 	.word	0x08014f1c
 8003440:	08014f9c 	.word	0x08014f9c

08003444 <_ZN13CPantallaBase4ShowEv>:
//funcion que se tiene que reemplazar para verse
void CPantallaBase::Show()
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
	//dibujo el fondo
//	CRectanguloTft::Show();
	//dibujo el titulo
	LabelTitulo->Show();
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	334c      	adds	r3, #76	@ 0x4c
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4610      	mov	r0, r2
 800345c:	4798      	blx	r3
}
 800345e:	bf00      	nop
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <_ZN13CPantallaBase8RefrescaEv>:
void CPantallaBase::Refresca()
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <_ZN13CPantallaBase11SetEstacionEP13CEstacionBase>:
void CPantallaBase::SetEstacion(CEstacionBase *estacion)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b082      	sub	sp, #8
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
 8003482:	6039      	str	r1, [r7, #0]
	Estacion = estacion;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	//asigno los evetos de la estacion
	Estacion->SetManejadorControles(this);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	3328      	adds	r3, #40	@ 0x28
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	3230      	adds	r2, #48	@ 0x30
 80034a2:	4611      	mov	r1, r2
 80034a4:	4798      	blx	r3
	Estacion->DesactivarCalefactor();
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	3338      	adds	r3, #56	@ 0x38
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4610      	mov	r0, r2
 80034ba:	4798      	blx	r3
}
 80034bc:	bf00      	nop
 80034be:	3708      	adds	r7, #8
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <_ZN13CPantallaBase7OcultarEv>:
void CPantallaBase::Ocultar()
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
	CRectanguloTft::Show();
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 f8ca 	bl	8003668 <_ZN14CRectanguloTft4ShowEv>
	Estacion->QuitaManejadorControles();
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	332c      	adds	r3, #44	@ 0x2c
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4610      	mov	r0, r2
 80034e8:	4798      	blx	r3
	Visible=false;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
}
 80034f2:	bf00      	nop
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <_ZN13CPantallaBase9EsVisibleEv>:
bool CPantallaBase::EsVisible()
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
	return Visible;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
}
 8003508:	4618      	mov	r0, r3
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <_ZN13CPantallaBase10SetVisibleEb>:
void CPantallaBase::SetVisible(bool visible)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	460b      	mov	r3, r1
 800351e:	70fb      	strb	r3, [r7, #3]
	if(Visible==visible)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003526:	78fa      	ldrb	r2, [r7, #3]
 8003528:	429a      	cmp	r2, r3
 800352a:	d004      	beq.n	8003536 <_ZN13CPantallaBase10SetVisibleEb+0x22>
		return;
	Visible=visible;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	78fa      	ldrb	r2, [r7, #3]
 8003530:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8003534:	e000      	b.n	8003538 <_ZN13CPantallaBase10SetVisibleEb+0x24>
		return;
 8003536:	bf00      	nop
}
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <_ZN13CPantallaBase21SetManejadorControlesEP19CManejadorControles>:

void CPantallaBase::SetManejadorControles(CManejadorControles *manejador)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b082      	sub	sp, #8
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
 800354a:	6039      	str	r1, [r7, #0]
	ManejadorControles=manejador;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	if(ManejadorControles==NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00d      	beq.n	800357a <_ZN13CPantallaBase21SetManejadorControlesEP19CManejadorControles+0x38>
		return;
	ManejadorControles->SetManejadorControles(this);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f8d3 00a8 	ldr.w	r0, [r3, #168]	@ 0xa8
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	333c      	adds	r3, #60	@ 0x3c
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	3230      	adds	r2, #48	@ 0x30
 8003574:	4611      	mov	r1, r2
 8003576:	4798      	blx	r3
 8003578:	e000      	b.n	800357c <_ZN13CPantallaBase21SetManejadorControlesEP19CManejadorControles+0x3a>
		return;
 800357a:	bf00      	nop
}
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <_ZN13CPantallaBase17SetTituloPantallaEPc>:
void CPantallaBase::SetTituloPantalla(char *texto)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
 800358a:	6039      	str	r1, [r7, #0]
	strcpy(Titulo, texto);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3340      	adds	r3, #64	@ 0x40
 8003590:	6839      	ldr	r1, [r7, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f00f f9af 	bl	80128f6 <strcpy>
	LabelTitulo->SetTexto(texto);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800359c:	6839      	ldr	r1, [r7, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff fccc 	bl	8002f3c <_ZN12CEtiquetaTft8SetTextoEPcz>

}
 80035a4:	bf00      	nop
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <_ZN13CPantallaBase12SeleccionadaEv>:
void CPantallaBase::Seleccionada()
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]

}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <_ZN14CRectanguloTftD1Ev>:
 *      Author: W10
 */

#include <GUI/CRectanguloTft.hpp>

CRectanguloTft::~CRectanguloTft()
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	4a05      	ldr	r2, [pc, #20]	@ (80035e0 <_ZN14CRectanguloTftD1Ev+0x20>)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff fa9f 	bl	8002b14 <_ZN18CComponenteBaseTftD1Ev>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4618      	mov	r0, r3
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	08014fd0 	.word	0x08014fd0

080035e4 <_ZN14CRectanguloTftD0Ev>:
CRectanguloTft::~CRectanguloTft()
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
}
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7ff ffe7 	bl	80035c0 <_ZN14CRectanguloTftD1Ev>
 80035f2:	2130      	movs	r1, #48	@ 0x30
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f00e fa49 	bl	8011a8c <_ZdlPvj>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4618      	mov	r0, r3
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <_ZN14CRectanguloTftC1Eiiiiiii>:

CRectanguloTft::CRectanguloTft(int xi, int yi, int ancho , int alto , int backColor , int contorno , int colorContorno )
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
 8003610:	603b      	str	r3, [r7, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff fa63 	bl	8002ae0 <_ZN18CComponenteBaseTftC1Ev>
 800361a:	4a12      	ldr	r2, [pc, #72]	@ (8003664 <_ZN14CRectanguloTftC1Eiiiiiii+0x60>)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	629a      	str	r2, [r3, #40]	@ 0x28
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800362c:	62da      	str	r2, [r3, #44]	@ 0x2c
{
  Xi = xi;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	619a      	str	r2, [r3, #24]
  Ancho = ancho;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	621a      	str	r2, [r3, #32]
  Yi = yi;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	61da      	str	r2, [r3, #28]
  Alto = alto;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	625a      	str	r2, [r3, #36]	@ 0x24
  BackColor = backColor;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	69fa      	ldr	r2, [r7, #28]
 800364a:	615a      	str	r2, [r3, #20]
  ColorControrno = colorContorno;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003650:	62da      	str	r2, [r3, #44]	@ 0x2c
  Contorno = contorno;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6a3a      	ldr	r2, [r7, #32]
 8003656:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	08014fd0 	.word	0x08014fd0

08003668 <_ZN14CRectanguloTft4ShowEv>:
//muestra el rectangulo en pantalla

void CRectanguloTft::Show()
{
 8003668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800366a:	b085      	sub	sp, #20
 800366c:	af02      	add	r7, sp, #8
 800366e:	6078      	str	r0, [r7, #4]
  //dibujo el rectangulo
  fillRect(Xi, Yi, Ancho, Alto, BackColor);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	3338      	adds	r3, #56	@ 0x38
 8003678:	681c      	ldr	r4, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	b219      	sxth	r1, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	b21d      	sxth	r5, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	b21e      	sxth	r6, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003690:	b21b      	sxth	r3, r3
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6952      	ldr	r2, [r2, #20]
 8003696:	b292      	uxth	r2, r2
 8003698:	9201      	str	r2, [sp, #4]
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	4633      	mov	r3, r6
 800369e:	462a      	mov	r2, r5
 80036a0:	47a0      	blx	r4
  //hay que mostrar contorno?
  if (Contorno == 1) {
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d118      	bne.n	80036dc <_ZN14CRectanguloTft4ShowEv+0x74>
    drawRect(Xi, Yi, Ancho, Alto, ColorControrno);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	3344      	adds	r3, #68	@ 0x44
 80036b2:	681c      	ldr	r4, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	b219      	sxth	r1, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	b21d      	sxth	r5, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	b21e      	sxth	r6, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ca:	b21b      	sxth	r3, r3
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80036d0:	b292      	uxth	r2, r2
 80036d2:	9201      	str	r2, [sp, #4]
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	4633      	mov	r3, r6
 80036d8:	462a      	mov	r2, r5
 80036da:	47a0      	blx	r4
  }
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036e4 <_ZN14CRectanguloTft14CambiaPosicionEii>:

void CRectanguloTft::CambiaPosicion(int x, int y)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
  Xi=x;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	619a      	str	r2, [r3, #24]
  Yi=y;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	61da      	str	r2, [r3, #28]
}
 80036fc:	bf00      	nop
 80036fe:	3714      	adds	r7, #20
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <_ZN14CRectanguloTft12RedimencionaEii>:

void CRectanguloTft::Redimenciona(int ancho, int alto)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
  Ancho=ancho;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	621a      	str	r2, [r3, #32]
  Alto=alto;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003720:	bf00      	nop
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <_ZN14CRectanguloTft13SetColorFondoEi>:

void CRectanguloTft::SetColorFondo(int color)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  BackColor=color;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	615a      	str	r2, [r3, #20]
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <_ZN14CRectanguloTft13DamePosicionXEv>:
{
  return ColorControrno;
}

int CRectanguloTft::DamePosicionX()
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  return Xi;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	699b      	ldr	r3, [r3, #24]
}
 8003754:	4618      	mov	r0, r3
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <_ZN14CRectanguloTft13DamePosicionYEv>:

int CRectanguloTft::DamePosicionY()
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  return Yi;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69db      	ldr	r3, [r3, #28]
}
 800376c:	4618      	mov	r0, r3
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <_ZN14CRectanguloTft8DameAltoEv>:
{
  return Ancho;
}

int CRectanguloTft::DameAlto()
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  return Alto;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8003784:	4618      	mov	r0, r3
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <_ZN14CRectanguloTft11DameCentroXEv>:

//regresa el punto central del rectangulo
int CRectanguloTft::DameCentroX()
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  return Xi+(Ancho/2);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	699a      	ldr	r2, [r3, #24]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	0fd9      	lsrs	r1, r3, #31
 80037a2:	440b      	add	r3, r1
 80037a4:	105b      	asrs	r3, r3, #1
 80037a6:	4413      	add	r3, r2
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <_ZN26CConfigurarPantallaMemoriaC1Ev>:
#include <GUI/ManejadorPantallas/CManejadorPantallas.hpp>
#include <EPROM/CEprom.hpp>

extern I2C_HandleTypeDef hi2c1;

CConfigurarPantallaMemoria::CConfigurarPantallaMemoria():
 80037b4:	b590      	push	{r4, r7, lr}
 80037b6:	b08d      	sub	sp, #52	@ 0x34
 80037b8:	af08      	add	r7, sp, #32
 80037ba:	6078      	str	r0, [r7, #4]
CPantallaBase(1, (char*)"CONF MEMORIA")
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a6b      	ldr	r2, [pc, #428]	@ (800396c <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1b8>)
 80037c0:	2101      	movs	r1, #1
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7ff fdcc 	bl	8003360 <_ZN13CPantallaBaseC1EiPc>
 80037c8:	4a69      	ldr	r2, [pc, #420]	@ (8003970 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1bc>)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	4a69      	ldr	r2, [pc, #420]	@ (8003974 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1c0>)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

{
	// TODO Auto-generated constructor stub
	LabelMemoria=new CEtiquetaTft( 5, 35, 50, 20, COLOR::BLACK,(char*)"Memoria: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 80037dc:	20a4      	movs	r0, #164	@ 0xa4
 80037de:	f00e f957 	bl	8011a90 <_Znwj>
 80037e2:	4603      	mov	r3, r0
 80037e4:	461c      	mov	r4, r3
 80037e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037ea:	9306      	str	r3, [sp, #24]
 80037ec:	2300      	movs	r3, #0
 80037ee:	9305      	str	r3, [sp, #20]
 80037f0:	2303      	movs	r3, #3
 80037f2:	9304      	str	r3, [sp, #16]
 80037f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037f8:	9303      	str	r3, [sp, #12]
 80037fa:	4b5f      	ldr	r3, [pc, #380]	@ (8003978 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1c4>)
 80037fc:	9302      	str	r3, [sp, #8]
 80037fe:	2300      	movs	r3, #0
 8003800:	9301      	str	r3, [sp, #4]
 8003802:	2314      	movs	r3, #20
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	2332      	movs	r3, #50	@ 0x32
 8003808:	2223      	movs	r2, #35	@ 0x23
 800380a:	2105      	movs	r1, #5
 800380c:	4620      	mov	r0, r4
 800380e:	f7ff fb5b 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f8c3 40b4 	str.w	r4, [r3, #180]	@ 0xb4
	LabelTemperatura = new CEtiquetaTft( 5, 65, 50, 20, COLOR::BLACK,(char*)"Temperatura", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8003818:	20a4      	movs	r0, #164	@ 0xa4
 800381a:	f00e f939 	bl	8011a90 <_Znwj>
 800381e:	4603      	mov	r3, r0
 8003820:	461c      	mov	r4, r3
 8003822:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003826:	9306      	str	r3, [sp, #24]
 8003828:	2300      	movs	r3, #0
 800382a:	9305      	str	r3, [sp, #20]
 800382c:	2303      	movs	r3, #3
 800382e:	9304      	str	r3, [sp, #16]
 8003830:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003834:	9303      	str	r3, [sp, #12]
 8003836:	4b51      	ldr	r3, [pc, #324]	@ (800397c <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1c8>)
 8003838:	9302      	str	r3, [sp, #8]
 800383a:	2300      	movs	r3, #0
 800383c:	9301      	str	r3, [sp, #4]
 800383e:	2314      	movs	r3, #20
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	2332      	movs	r3, #50	@ 0x32
 8003844:	2241      	movs	r2, #65	@ 0x41
 8003846:	2105      	movs	r1, #5
 8003848:	4620      	mov	r0, r4
 800384a:	f7ff fb3d 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f8c3 40b8 	str.w	r4, [r3, #184]	@ 0xb8
	int centroX = DameCentroX();
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff ff9a 	bl	8003790 <_ZN14CRectanguloTft11DameCentroXEv>
 800385c:	60f8      	str	r0, [r7, #12]
	LabelTemperaturas = new CEtiquetaTft( centroX - 150 / 2, 105, 150, 30,COLOR::WHITE, (char*)"000/000", COLOR::BLACK, 3, 1, COLOR::RED);
 800385e:	20a4      	movs	r0, #164	@ 0xa4
 8003860:	f00e f916 	bl	8011a90 <_Znwj>
 8003864:	4603      	mov	r3, r0
 8003866:	461c      	mov	r4, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f1a3 014b 	sub.w	r1, r3, #75	@ 0x4b
 800386e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003872:	9306      	str	r3, [sp, #24]
 8003874:	2301      	movs	r3, #1
 8003876:	9305      	str	r3, [sp, #20]
 8003878:	2303      	movs	r3, #3
 800387a:	9304      	str	r3, [sp, #16]
 800387c:	2300      	movs	r3, #0
 800387e:	9303      	str	r3, [sp, #12]
 8003880:	4b3f      	ldr	r3, [pc, #252]	@ (8003980 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1cc>)
 8003882:	9302      	str	r3, [sp, #8]
 8003884:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003888:	9301      	str	r3, [sp, #4]
 800388a:	231e      	movs	r3, #30
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	2396      	movs	r3, #150	@ 0x96
 8003890:	2269      	movs	r2, #105	@ 0x69
 8003892:	4620      	mov	r0, r4
 8003894:	f7ff fb18 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f8c3 40bc 	str.w	r4, [r3, #188]	@ 0xbc
	LabelTemperaturas->SetSeparacion(5, 5);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80038a4:	2205      	movs	r2, #5
 80038a6:	2105      	movs	r1, #5
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff fc97 	bl	80031dc <_ZN12CEtiquetaTft13SetSeparacionEii>
	LabelAire = new CEtiquetaTft( 5, 135, 200, 30, COLOR::BLACK,(char*) "Aire: 00",COLOR::WHITE, 3, 0, COLOR::RED);
 80038ae:	20a4      	movs	r0, #164	@ 0xa4
 80038b0:	f00e f8ee 	bl	8011a90 <_Znwj>
 80038b4:	4603      	mov	r3, r0
 80038b6:	461c      	mov	r4, r3
 80038b8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80038bc:	9306      	str	r3, [sp, #24]
 80038be:	2300      	movs	r3, #0
 80038c0:	9305      	str	r3, [sp, #20]
 80038c2:	2303      	movs	r3, #3
 80038c4:	9304      	str	r3, [sp, #16]
 80038c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038ca:	9303      	str	r3, [sp, #12]
 80038cc:	4b2d      	ldr	r3, [pc, #180]	@ (8003984 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1d0>)
 80038ce:	9302      	str	r3, [sp, #8]
 80038d0:	2300      	movs	r3, #0
 80038d2:	9301      	str	r3, [sp, #4]
 80038d4:	231e      	movs	r3, #30
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	23c8      	movs	r3, #200	@ 0xc8
 80038da:	2287      	movs	r2, #135	@ 0x87
 80038dc:	2105      	movs	r1, #5
 80038de:	4620      	mov	r0, r4
 80038e0:	f7ff faf2 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f8c3 40c0 	str.w	r4, [r3, #192]	@ 0xc0

	LabelGuardar=new CEtiquetaTft( 10, 200, 130, 30, COLOR::GREEN,(char*)"GUARDAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 80038ea:	20a4      	movs	r0, #164	@ 0xa4
 80038ec:	f00e f8d0 	bl	8011a90 <_Znwj>
 80038f0:	4603      	mov	r3, r0
 80038f2:	461c      	mov	r4, r3
 80038f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038f8:	9306      	str	r3, [sp, #24]
 80038fa:	2301      	movs	r3, #1
 80038fc:	9305      	str	r3, [sp, #20]
 80038fe:	2303      	movs	r3, #3
 8003900:	9304      	str	r3, [sp, #16]
 8003902:	2300      	movs	r3, #0
 8003904:	9303      	str	r3, [sp, #12]
 8003906:	4b20      	ldr	r3, [pc, #128]	@ (8003988 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1d4>)
 8003908:	9302      	str	r3, [sp, #8]
 800390a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800390e:	9301      	str	r3, [sp, #4]
 8003910:	231e      	movs	r3, #30
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	2382      	movs	r3, #130	@ 0x82
 8003916:	22c8      	movs	r2, #200	@ 0xc8
 8003918:	210a      	movs	r1, #10
 800391a:	4620      	mov	r0, r4
 800391c:	f7ff fad4 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f8c3 40ac 	str.w	r4, [r3, #172]	@ 0xac
	LabelCancelar=new CEtiquetaTft( 160, 200, 145, 30, COLOR::RED,(char*)"CANCELAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 8003926:	20a4      	movs	r0, #164	@ 0xa4
 8003928:	f00e f8b2 	bl	8011a90 <_Znwj>
 800392c:	4603      	mov	r3, r0
 800392e:	461c      	mov	r4, r3
 8003930:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003934:	9306      	str	r3, [sp, #24]
 8003936:	2301      	movs	r3, #1
 8003938:	9305      	str	r3, [sp, #20]
 800393a:	2303      	movs	r3, #3
 800393c:	9304      	str	r3, [sp, #16]
 800393e:	2300      	movs	r3, #0
 8003940:	9303      	str	r3, [sp, #12]
 8003942:	4b12      	ldr	r3, [pc, #72]	@ (800398c <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1d8>)
 8003944:	9302      	str	r3, [sp, #8]
 8003946:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800394a:	9301      	str	r3, [sp, #4]
 800394c:	231e      	movs	r3, #30
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	2391      	movs	r3, #145	@ 0x91
 8003952:	22c8      	movs	r2, #200	@ 0xc8
 8003954:	21a0      	movs	r1, #160	@ 0xa0
 8003956:	4620      	mov	r0, r4
 8003958:	f7ff fab6 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f8c3 40b0 	str.w	r4, [r3, #176]	@ 0xb0

}
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4618      	mov	r0, r3
 8003966:	3714      	adds	r7, #20
 8003968:	46bd      	mov	sp, r7
 800396a:	bd90      	pop	{r4, r7, pc}
 800396c:	080147ac 	.word	0x080147ac
 8003970:	08015030 	.word	0x08015030
 8003974:	080150c4 	.word	0x080150c4
 8003978:	080147bc 	.word	0x080147bc
 800397c:	080147c8 	.word	0x080147c8
 8003980:	080147d4 	.word	0x080147d4
 8003984:	080147dc 	.word	0x080147dc
 8003988:	080147e8 	.word	0x080147e8
 800398c:	080147f0 	.word	0x080147f0

08003990 <_ZN26CConfigurarPantallaMemoriaD1Ev>:

CConfigurarPantallaMemoria::~CConfigurarPantallaMemoria()
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	4a07      	ldr	r2, [pc, #28]	@ (80039b8 <_ZN26CConfigurarPantallaMemoriaD1Ev+0x28>)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	4a07      	ldr	r2, [pc, #28]	@ (80039bc <_ZN26CConfigurarPantallaMemoriaD1Ev+0x2c>)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7ff fca6 	bl	80032f8 <_ZN13CPantallaBaseD1Ev>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4618      	mov	r0, r3
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	08015030 	.word	0x08015030
 80039bc:	080150c4 	.word	0x080150c4

080039c0 <_ZThn48_N26CConfigurarPantallaMemoriaD1Ev>:

	void LeeDatosMemoria();
	void MuestraInformacion();
public:
	CConfigurarPantallaMemoria();
	virtual ~CConfigurarPantallaMemoria();
 80039c0:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80039c4:	f7ff bfe4 	b.w	8003990 <_ZN26CConfigurarPantallaMemoriaD1Ev>

080039c8 <_ZN26CConfigurarPantallaMemoriaD0Ev>:
CConfigurarPantallaMemoria::~CConfigurarPantallaMemoria()
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
}
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f7ff ffdd 	bl	8003990 <_ZN26CConfigurarPantallaMemoriaD1Ev>
 80039d6:	21dc      	movs	r1, #220	@ 0xdc
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f00e f857 	bl	8011a8c <_ZdlPvj>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4618      	mov	r0, r3
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <_ZThn48_N26CConfigurarPantallaMemoriaD0Ev>:
 80039e8:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80039ec:	f7ff bfec 	b.w	80039c8 <_ZN26CConfigurarPantallaMemoriaD0Ev>

080039f0 <_ZN26CConfigurarPantallaMemoria4ShowEv>:

void CConfigurarPantallaMemoria::Show()
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
	VelocidadAireInicialPotenciometro=ManejadorControles->GetNivelAire();
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80039fe:	4618      	mov	r0, r3
 8003a00:	f006 fd27 	bl	800a452 <_ZN19CManejadorControles12GetNivelAireEv>
 8003a04:	4602      	mov	r2, r0
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	CPantallaBase::Show();
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff fd18 	bl	8003444 <_ZN13CPantallaBase4ShowEv>
	LeeDatosMemoria();
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f87d 	bl	8003b14 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv>
	LabelTemperatura->Show();
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	334c      	adds	r3, #76	@ 0x4c
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4610      	mov	r0, r2
 8003a2e:	4798      	blx	r3
	MuestraInformacion();
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f8b3 	bl	8003b9c <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv>
	LabelMemoria->SetTexto((char*)"Memoria: %d", NumeroMemoria);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f8d3 00b4 	ldr.w	r0, [r3, #180]	@ 0xb4
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003a42:	461a      	mov	r2, r3
 8003a44:	4913      	ldr	r1, [pc, #76]	@ (8003a94 <_ZN26CConfigurarPantallaMemoria4ShowEv+0xa4>)
 8003a46:	f7ff fa79 	bl	8002f3c <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelMemoria->Show();
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	334c      	adds	r3, #76	@ 0x4c
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4610      	mov	r0, r2
 8003a5e:	4798      	blx	r3
	LabelGuardar->Show();
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	334c      	adds	r3, #76	@ 0x4c
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4610      	mov	r0, r2
 8003a74:	4798      	blx	r3
	LabelCancelar->Show();
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	334c      	adds	r3, #76	@ 0x4c
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4610      	mov	r0, r2
 8003a8a:	4798      	blx	r3
}
 8003a8c:	bf00      	nop
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	080147fc 	.word	0x080147fc

08003a98 <_ZN26CConfigurarPantallaMemoria8RefrescaEv>:

void CConfigurarPantallaMemoria::Refresca()
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
	int velocidad=ManejadorControles->GetNivelAire();
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f006 fcd3 	bl	800a452 <_ZN19CManejadorControles12GetNivelAireEv>
 8003aac:	60f8      	str	r0, [r7, #12]
	if(VelocidadAireInicialPotenciometro>velocidad+1 ||VelocidadAireInicialPotenciometro<velocidad-1)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	dc06      	bgt.n	8003aca <_ZN26CConfigurarPantallaMemoria8RefrescaEv+0x32>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	da03      	bge.n	8003ad2 <_ZN26CConfigurarPantallaMemoria8RefrescaEv+0x3a>
	{
		VelocidadAire =velocidad;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
	}
	MuestraInformacion();
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f862 	bl	8003b9c <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv>
}
 8003ad8:	bf00      	nop
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <_ZN26CConfigurarPantallaMemoria10SetMemoriaEi>:
void CConfigurarPantallaMemoria::SetMemoria(int numeroMemoria)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
	TemperaturaAnterior=-1;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f04f 32ff 	mov.w	r2, #4294967295
 8003af0:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	VelocidadAireAnterior=-1;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f04f 32ff 	mov.w	r2, #4294967295
 8003afa:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	NumeroMemoria=numeroMemoria;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
//	DireccionMemoria=DameDireccionMemoria();
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
	...

08003b14 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv>:

void CConfigurarPantallaMemoria::LeeDatosMemoria()
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
	switch(NumeroMemoria)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003b22:	2b03      	cmp	r3, #3
 8003b24:	d024      	beq.n	8003b70 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x5c>
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	dc31      	bgt.n	8003b8e <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x7a>
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d002      	beq.n	8003b34 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x20>
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d00f      	beq.n	8003b52 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x3e>
	case 3:
		Temperatura=Eprom.DameTemperatuarMemoria3();
		VelocidadAire=Eprom.DameVelocidadMemoria3();
		break;
	}
}
 8003b32:	e02c      	b.n	8003b8e <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x7a>
		Temperatura=Eprom.DameTemperatuarMemoria1();
 8003b34:	4818      	ldr	r0, [pc, #96]	@ (8003b98 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x84>)
 8003b36:	f7fd fdc3 	bl	80016c0 <_ZN6CEprom23DameTemperatuarMemoria1Ev>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
		VelocidadAire=Eprom.DameVelocidadMemoria1();
 8003b42:	4815      	ldr	r0, [pc, #84]	@ (8003b98 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x84>)
 8003b44:	f7fd fdce 	bl	80016e4 <_ZN6CEprom21DameVelocidadMemoria1Ev>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
		break;
 8003b50:	e01d      	b.n	8003b8e <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x7a>
		Temperatura=Eprom.DameTemperatuarMemoria2();
 8003b52:	4811      	ldr	r0, [pc, #68]	@ (8003b98 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x84>)
 8003b54:	f7fd fe08 	bl	8001768 <_ZN6CEprom23DameTemperatuarMemoria2Ev>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
		VelocidadAire=Eprom.DameVelocidadMemoria2();
 8003b60:	480d      	ldr	r0, [pc, #52]	@ (8003b98 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x84>)
 8003b62:	f7fd fe13 	bl	800178c <_ZN6CEprom21DameVelocidadMemoria2Ev>
 8003b66:	4602      	mov	r2, r0
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
		break;
 8003b6e:	e00e      	b.n	8003b8e <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x7a>
		Temperatura=Eprom.DameTemperatuarMemoria3();
 8003b70:	4809      	ldr	r0, [pc, #36]	@ (8003b98 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x84>)
 8003b72:	f7fd fe4d 	bl	8001810 <_ZN6CEprom23DameTemperatuarMemoria3Ev>
 8003b76:	4602      	mov	r2, r0
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
		VelocidadAire=Eprom.DameVelocidadMemoria3();
 8003b7e:	4806      	ldr	r0, [pc, #24]	@ (8003b98 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x84>)
 8003b80:	f7fd fe58 	bl	8001834 <_ZN6CEprom21DameVelocidadMemoria3Ev>
 8003b84:	4602      	mov	r2, r0
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
		break;
 8003b8c:	bf00      	nop
}
 8003b8e:	bf00      	nop
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	20000318 	.word	0x20000318

08003b9c <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv>:
void CConfigurarPantallaMemoria::MuestraInformacion()
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]

	if(TemperaturaAnterior!=Temperatura)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d01a      	beq.n	8003bea <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv+0x4e>
	{
		LabelTemperaturas->SetTexto((char*)"%d", Temperatura);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	491d      	ldr	r1, [pc, #116]	@ (8003c38 <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv+0x9c>)
 8003bc4:	f7ff f9ba 	bl	8002f3c <_ZN12CEtiquetaTft8SetTextoEPcz>
		LabelTemperaturas->Show();
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	334c      	adds	r3, #76	@ 0x4c
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4610      	mov	r0, r2
 8003bdc:	4798      	blx	r3
		TemperaturaAnterior=Temperatura;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	}

	if( VelocidadAireAnterior!=VelocidadAire)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d01a      	beq.n	8003c30 <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv+0x94>
	{
		LabelAire->SetTexto((char*)"Aire: %d", VelocidadAire);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003c06:	461a      	mov	r2, r3
 8003c08:	490c      	ldr	r1, [pc, #48]	@ (8003c3c <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv+0xa0>)
 8003c0a:	f7ff f997 	bl	8002f3c <_ZN12CEtiquetaTft8SetTextoEPcz>
		LabelAire->Show();
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	334c      	adds	r3, #76	@ 0x4c
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4610      	mov	r0, r2
 8003c22:	4798      	blx	r3
		VelocidadAireAnterior=VelocidadAire;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	}
}
 8003c30:	bf00      	nop
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	08014808 	.word	0x08014808
 8003c3c:	0801480c 	.word	0x0801480c

08003c40 <_ZN26CConfigurarPantallaMemoria19OnPerillaIncrementoEv>:
void CConfigurarPantallaMemoria::OnPerillaIncremento()
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
	if(Temperatura<500)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003c4e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003c52:	da06      	bge.n	8003c62 <_ZN26CConfigurarPantallaMemoria19OnPerillaIncrementoEv+0x22>
		Temperatura++;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <_ZThn48_N26CConfigurarPantallaMemoria19OnPerillaIncrementoEv>:
	virtual void Show();
	virtual void Refresca();
	virtual void SetMemoria(int numeroMemoria);
	virtual void OnPerillaIncremento();
 8003c6e:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8003c72:	f7ff bfe5 	b.w	8003c40 <_ZN26CConfigurarPantallaMemoria19OnPerillaIncrementoEv>

08003c76 <_ZN26CConfigurarPantallaMemoria19OnPerillaDecrementoEv>:
void CConfigurarPantallaMemoria::OnPerillaDecremento()
{
 8003c76:	b480      	push	{r7}
 8003c78:	b083      	sub	sp, #12
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
	if(Temperatura>0)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	dd06      	ble.n	8003c96 <_ZN26CConfigurarPantallaMemoria19OnPerillaDecrementoEv+0x20>
		Temperatura--;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003c8e:	1e5a      	subs	r2, r3, #1
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <_ZThn48_N26CConfigurarPantallaMemoria19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 8003ca2:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8003ca6:	f7ff bfe6 	b.w	8003c76 <_ZN26CConfigurarPantallaMemoria19OnPerillaDecrementoEv>
	...

08003cac <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv>:
void CConfigurarPantallaMemoria::OnBotonUnoClickEvent()
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
	switch(NumeroMemoria)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003cba:	2b03      	cmp	r3, #3
 8003cbc:	d01c      	beq.n	8003cf8 <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x4c>
 8003cbe:	2b03      	cmp	r3, #3
 8003cc0:	dc25      	bgt.n	8003d0e <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x62>
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d002      	beq.n	8003ccc <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x20>
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d00b      	beq.n	8003ce2 <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x36>
 8003cca:	e020      	b.n	8003d0e <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x62>
	{
	case 1:
		Eprom.GuardaMemoria1(Temperatura, VelocidadAire);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003cd8:	461a      	mov	r2, r3
 8003cda:	4810      	ldr	r0, [pc, #64]	@ (8003d1c <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x70>)
 8003cdc:	f7fd fd14 	bl	8001708 <_ZN6CEprom14GuardaMemoria1Eii>
		break;
 8003ce0:	e015      	b.n	8003d0e <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x62>
	case 2:
		Eprom.GuardaMemoria2(Temperatura, VelocidadAire);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003cee:	461a      	mov	r2, r3
 8003cf0:	480a      	ldr	r0, [pc, #40]	@ (8003d1c <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x70>)
 8003cf2:	f7fd fd5d 	bl	80017b0 <_ZN6CEprom14GuardaMemoria2Eii>
		break;
 8003cf6:	e00a      	b.n	8003d0e <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x62>
	case 3:
		Eprom.GuardaMemoria3(Temperatura, VelocidadAire);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003d04:	461a      	mov	r2, r3
 8003d06:	4805      	ldr	r0, [pc, #20]	@ (8003d1c <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x70>)
 8003d08:	f7fd fda6 	bl	8001858 <_ZN6CEprom14GuardaMemoria3Eii>
		break;
 8003d0c:	bf00      	nop
	}
	 ManejadorPantallas.MuestraMenuPrincipal();
 8003d0e:	4804      	ldr	r0, [pc, #16]	@ (8003d20 <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x74>)
 8003d10:	f000 f892 	bl	8003e38 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>
}
 8003d14:	bf00      	nop
 8003d16:	3708      	adds	r7, #8
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	20000318 	.word	0x20000318
 8003d20:	20000258 	.word	0x20000258

08003d24 <_ZThn48_N26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv>:
	virtual void OnBotonUnoClickEvent();
 8003d24:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8003d28:	f7ff bfc0 	b.w	8003cac <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv>

08003d2c <_ZN26CConfigurarPantallaMemoria21OnBotonTresClickEventEv>:
void CConfigurarPantallaMemoria::OnBotonTresClickEvent()
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
	 ManejadorPantallas.MuestraMenuPrincipal();
 8003d34:	4803      	ldr	r0, [pc, #12]	@ (8003d44 <_ZN26CConfigurarPantallaMemoria21OnBotonTresClickEventEv+0x18>)
 8003d36:	f000 f87f 	bl	8003e38 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>

}
 8003d3a:	bf00      	nop
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	20000258 	.word	0x20000258

08003d48 <_ZThn48_N26CConfigurarPantallaMemoria21OnBotonTresClickEventEv>:
	virtual void OnBotonTresClickEvent();
 8003d48:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8003d4c:	f7ff bfee 	b.w	8003d2c <_ZN26CConfigurarPantallaMemoria21OnBotonTresClickEventEv>

08003d50 <_ZN19CManejadorPantallasC1Ev>:
#include<string.h>
#include <GUI/ConfigurarPantallaMemoria/CConfigurarPantallaMemoria.hpp>
#include <GUI/Rampa/PantallaEditorNombre/CPantallaEditorNombre.hpp>
#include <GUI/Rampa/PantallaEliminarRampa/CPantallaEliminarRampa.hpp>

CManejadorPantallas::CManejadorPantallas()
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	4a11      	ldr	r2, [pc, #68]	@ (8003da0 <_ZN19CManejadorPantallasC1Ev+0x50>)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	605a      	str	r2, [r3, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	609a      	str	r2, [r3, #8]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	60da      	str	r2, [r3, #12]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	611a      	str	r2, [r3, #16]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	615a      	str	r2, [r3, #20]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	619a      	str	r2, [r3, #24]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	61da      	str	r2, [r3, #28]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
{
	// TODO Auto-generated constructor stub
}
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4618      	mov	r0, r3
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	080150f8 	.word	0x080150f8

08003da4 <_ZN19CManejadorPantallasD1Ev>:

CManejadorPantallas::~CManejadorPantallas()
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	4a04      	ldr	r2, [pc, #16]	@ (8003dc0 <_ZN19CManejadorPantallasD1Ev+0x1c>)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4618      	mov	r0, r3
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	080150f8 	.word	0x080150f8

08003dc4 <_ZN19CManejadorPantallasD0Ev>:
CManejadorPantallas::~CManejadorPantallas()
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
}
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7ff ffe9 	bl	8003da4 <_ZN19CManejadorPantallasD1Ev>
 8003dd2:	21bc      	movs	r1, #188	@ 0xbc
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f00d fe59 	bl	8011a8c <_ZdlPvj>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <_ZN19CManejadorPantallas11SetEstacionEP13CEstacionBase>:
void CManejadorPantallas::SetEstacion(CEstacionBase* estacion)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
	Estacion=estacion;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	605a      	str	r2, [r3, #4]
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>:
void CManejadorPantallas::MuestraPantallaManual()
{
 8003e00:	b590      	push	{r4, r7, lr}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
	if(pantallaManual==NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d109      	bne.n	8003e24 <_ZN19CManejadorPantallas21MuestraPantallaManualEv+0x24>
		pantallaManual=new CPantallaManual();
 8003e10:	20ec      	movs	r0, #236	@ 0xec
 8003e12:	f00d fe3d 	bl	8011a90 <_Znwj>
 8003e16:	4603      	mov	r3, r0
 8003e18:	461c      	mov	r4, r3
 8003e1a:	4620      	mov	r0, r4
 8003e1c:	f001 fd52 	bl	80058c4 <_ZN15CPantallaManualC1Ev>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	615c      	str	r4, [r3, #20]
	AsignaPantallaActual(pantallaManual);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	4619      	mov	r1, r3
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f850 	bl	8003ed0 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd90      	pop	{r4, r7, pc}

08003e38 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>:
void CManejadorPantallas::MuestraMenuPrincipal()
{
 8003e38:	b590      	push	{r4, r7, lr}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
	if(menuPrincipal==NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d109      	bne.n	8003e5c <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv+0x24>
		menuPrincipal=new CMenuPrincipal();
 8003e48:	20c0      	movs	r0, #192	@ 0xc0
 8003e4a:	f00d fe21 	bl	8011a90 <_Znwj>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	461c      	mov	r4, r3
 8003e52:	4620      	mov	r0, r4
 8003e54:	f002 fca0 	bl	8006798 <_ZN14CMenuPrincipalC1Ev>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	619c      	str	r4, [r3, #24]
	AsignaPantallaActual(menuPrincipal);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	4619      	mov	r1, r3
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f834 	bl	8003ed0 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd90      	pop	{r4, r7, pc}

08003e70 <_ZN19CManejadorPantallas16MuestraMenuRampaEv>:

void CManejadorPantallas::MuestraMenuRampa()
{
 8003e70:	b590      	push	{r4, r7, lr}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
	if(menuRampa==NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d109      	bne.n	8003e94 <_ZN19CManejadorPantallas16MuestraMenuRampaEv+0x24>
		menuRampa=new CPantallaMenuRampa();
 8003e80:	20c0      	movs	r0, #192	@ 0xc0
 8003e82:	f00d fe05 	bl	8011a90 <_Znwj>
 8003e86:	4603      	mov	r3, r0
 8003e88:	461c      	mov	r4, r3
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	f004 ff0e 	bl	8008cac <_ZN18CPantallaMenuRampaC1Ev>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	61dc      	str	r4, [r3, #28]
	AsignaPantallaActual(menuRampa);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	4619      	mov	r1, r3
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f818 	bl	8003ed0 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd90      	pop	{r4, r7, pc}

08003ea8 <_ZN19CManejadorPantallas16RefrescaPantallaEv>:
void CManejadorPantallas::RefrescaPantalla()
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
	CambiaPantalla();
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f826 	bl	8003f02 <_ZN19CManejadorPantallas14CambiaPantallaEv>
	PantallaActual->Refresca();
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68da      	ldr	r2, [r3, #12]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	3358      	adds	r3, #88	@ 0x58
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4610      	mov	r0, r2
 8003ec6:	4798      	blx	r3
}
 8003ec8:	bf00      	nop
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>:
void CManejadorPantallas::AsignaPantallaActual(CPantallaBase* pantalla)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
	PantallaPendinteCambiar=pantalla;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	609a      	str	r2, [r3, #8]
	CambioPantalla=true;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
	PantallaPendinteCambiar->Seleccionada();
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	3374      	adds	r3, #116	@ 0x74
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4610      	mov	r0, r2
 8003ef8:	4798      	blx	r3
}
 8003efa:	bf00      	nop
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <_ZN19CManejadorPantallas14CambiaPantallaEv>:
void CManejadorPantallas::CambiaPantalla()
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b082      	sub	sp, #8
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
	if(	CambioPantalla==false)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d038      	beq.n	8003f86 <_ZN19CManejadorPantallas14CambiaPantallaEv+0x84>
		return;
	if(PantallaActual!=NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00c      	beq.n	8003f36 <_ZN19CManejadorPantallas14CambiaPantallaEv+0x34>
	{
		PantallaActual->Ocultar();
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68da      	ldr	r2, [r3, #12]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	3364      	adds	r3, #100	@ 0x64
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4610      	mov	r0, r2
 8003f2c:	4798      	blx	r3
		PantallaAnterior=PantallaActual;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	611a      	str	r2, [r3, #16]
	}
	PantallaActual=PantallaPendinteCambiar;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689a      	ldr	r2, [r3, #8]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	60da      	str	r2, [r3, #12]
	PantallaActual->SetEstacion(Estacion);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68d8      	ldr	r0, [r3, #12]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	335c      	adds	r3, #92	@ 0x5c
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	6852      	ldr	r2, [r2, #4]
 8003f50:	4611      	mov	r1, r2
 8003f52:	4798      	blx	r3
	PantallaActual->SetManejadorControles(ManejadorControles);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68d8      	ldr	r0, [r3, #12]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	3360      	adds	r3, #96	@ 0x60
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6a12      	ldr	r2, [r2, #32]
 8003f66:	4611      	mov	r1, r2
 8003f68:	4798      	blx	r3
	PantallaActual->Show();
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68da      	ldr	r2, [r3, #12]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	334c      	adds	r3, #76	@ 0x4c
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4610      	mov	r0, r2
 8003f7a:	4798      	blx	r3
	CambioPantalla=false;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8003f84:	e000      	b.n	8003f88 <_ZN19CManejadorPantallas14CambiaPantallaEv+0x86>
		return;
 8003f86:	bf00      	nop
}
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <_ZN19CManejadorPantallas21SetManejadorControlesEP19CManejadorControles>:

void CManejadorPantallas::SetManejadorControles(CManejadorControles* manejador)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
 8003f96:	6039      	str	r1, [r7, #0]
	ManejadorControles=manejador;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	621a      	str	r2, [r3, #32]
}
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <_ZN19CManejadorPantallas35MuestraPantallaConfiguracionMemoriaEi>:

void CManejadorPantallas::MuestraPantallaConfiguracionMemoria(int meoria)
{
 8003faa:	b590      	push	{r4, r7, lr}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
 8003fb2:	6039      	str	r1, [r7, #0]
	if(ConfigurarPantallaMemoria==NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d109      	bne.n	8003fd0 <_ZN19CManejadorPantallas35MuestraPantallaConfiguracionMemoriaEi+0x26>
		ConfigurarPantallaMemoria=new CConfigurarPantallaMemoria();
 8003fbc:	20dc      	movs	r0, #220	@ 0xdc
 8003fbe:	f00d fd67 	bl	8011a90 <_Znwj>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	461c      	mov	r4, r3
 8003fc6:	4620      	mov	r0, r4
 8003fc8:	f7ff fbf4 	bl	80037b4 <_ZN26CConfigurarPantallaMemoriaC1Ev>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	625c      	str	r4, [r3, #36]	@ 0x24
	ConfigurarPantallaMemoria->SetMemoria(meoria);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	3378      	adds	r3, #120	@ 0x78
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6839      	ldr	r1, [r7, #0]
 8003fe0:	4610      	mov	r0, r2
 8003fe2:	4798      	blx	r3
	AsignaPantallaActual(ConfigurarPantallaMemoria);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe8:	4619      	mov	r1, r3
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7ff ff70 	bl	8003ed0 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd90      	pop	{r4, r7, pc}

08003ff8 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>:
void CManejadorPantallas::MuestraPantallaMemoria(int memoria)
{
 8003ff8:	b590      	push	{r4, r7, lr}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
	if(PantallaMemoria==NULL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10a      	bne.n	8004020 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi+0x28>
		PantallaMemoria=new CPantallaMemoria();
 800400a:	f44f 7082 	mov.w	r0, #260	@ 0x104
 800400e:	f00d fd3f 	bl	8011a90 <_Znwj>
 8004012:	4603      	mov	r3, r0
 8004014:	461c      	mov	r4, r3
 8004016:	4620      	mov	r0, r4
 8004018:	f002 f86a 	bl	80060f0 <_ZN16CPantallaMemoriaC1Ev>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	629c      	str	r4, [r3, #40]	@ 0x28
	PantallaMemoria->SetMemoria(memoria);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004024:	6839      	ldr	r1, [r7, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f002 f93e 	bl	80062a8 <_ZN16CPantallaMemoria10SetMemoriaEi>
	AsignaPantallaActual(PantallaMemoria);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004030:	4619      	mov	r1, r3
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7ff ff4c 	bl	8003ed0 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>

}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	bd90      	pop	{r4, r7, pc}

08004040 <_ZN19CManejadorPantallas27MuestraCPantallaCalibracionEv>:
	if(PantallaAnterior==NULL)
		return;
	AsignaPantallaActual(PantallaAnterior);
}
void CManejadorPantallas::MuestraCPantallaCalibracion()
{
 8004040:	b590      	push	{r4, r7, lr}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
	if(PantallaCalibracion==NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404c:	2b00      	cmp	r3, #0
 800404e:	d109      	bne.n	8004064 <_ZN19CManejadorPantallas27MuestraCPantallaCalibracionEv+0x24>
		PantallaCalibracion=new CPantallaCalibracion();
 8004050:	20ec      	movs	r0, #236	@ 0xec
 8004052:	f00d fd1d 	bl	8011a90 <_Znwj>
 8004056:	4603      	mov	r3, r0
 8004058:	461c      	mov	r4, r3
 800405a:	4620      	mov	r0, r4
 800405c:	f000 feae 	bl	8004dbc <_ZN20CPantallaCalibracionC1Ev>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	62dc      	str	r4, [r3, #44]	@ 0x2c
	AsignaPantallaActual(PantallaCalibracion);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004068:	4619      	mov	r1, r3
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7ff ff30 	bl	8003ed0 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	bd90      	pop	{r4, r7, pc}

08004078 <_ZN19CManejadorPantallas20MuestraPantallaRampaEi>:
void CManejadorPantallas::MuestraPantallaRampa(int nrampa)
{
 8004078:	b590      	push	{r4, r7, lr}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
	if(PantallaRampa==NULL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004086:	2b00      	cmp	r3, #0
 8004088:	d109      	bne.n	800409e <_ZN19CManejadorPantallas20MuestraPantallaRampaEi+0x26>
		PantallaRampa=new CPantallaRampa();
 800408a:	20b8      	movs	r0, #184	@ 0xb8
 800408c:	f00d fd00 	bl	8011a90 <_Znwj>
 8004090:	4603      	mov	r3, r0
 8004092:	461c      	mov	r4, r3
 8004094:	4620      	mov	r0, r4
 8004096:	f005 f937 	bl	8009308 <_ZN14CPantallaRampaC1Ev>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	631c      	str	r4, [r3, #48]	@ 0x30
	PantallaRampa->SetNumeroRampa(nrampa);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a2:	6839      	ldr	r1, [r7, #0]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f005 f9b5 	bl	8009414 <_ZN14CPantallaRampa14SetNumeroRampaEi>
	AsignaPantallaActual(PantallaRampa);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ae:	4619      	mov	r1, r3
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7ff ff0d 	bl	8003ed0 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>

}
 80040b6:	bf00      	nop
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd90      	pop	{r4, r7, pc}

080040be <_ZN19CManejadorPantallas32MuestraPantallaInicializaMemoriaEv>:
void CManejadorPantallas::MuestraPantallaInicializaMemoria()
{
 80040be:	b590      	push	{r4, r7, lr}
 80040c0:	b083      	sub	sp, #12
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
	if(PantallaInicializaMemoria==NULL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d109      	bne.n	80040e2 <_ZN19CManejadorPantallas32MuestraPantallaInicializaMemoriaEv+0x24>
		PantallaInicializaMemoria=new CPantallaInicializaMemoria();
 80040ce:	20b4      	movs	r0, #180	@ 0xb4
 80040d0:	f00d fcde 	bl	8011a90 <_Znwj>
 80040d4:	4603      	mov	r3, r0
 80040d6:	461c      	mov	r4, r3
 80040d8:	4620      	mov	r0, r4
 80040da:	f001 facb 	bl	8005674 <_ZN26CPantallaInicializaMemoriaC1Ev>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	635c      	str	r4, [r3, #52]	@ 0x34
	AsignaPantallaActual(PantallaInicializaMemoria);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040e6:	4619      	mov	r1, r3
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7ff fef1 	bl	8003ed0 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd90      	pop	{r4, r7, pc}

080040f6 <_ZN19CManejadorPantallas27MuestraPantallaEditorNombreEi>:
void CManejadorPantallas::MuestraPantallaEditorNombre(int id_Rampa)
{
 80040f6:	b590      	push	{r4, r7, lr}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
 80040fe:	6039      	str	r1, [r7, #0]
	if(PantallaEditorNombre==NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10a      	bne.n	800411e <_ZN19CManejadorPantallas27MuestraPantallaEditorNombreEi+0x28>
		PantallaEditorNombre=new CPantallaEditorNombre(id_Rampa);
 8004108:	20dc      	movs	r0, #220	@ 0xdc
 800410a:	f00d fcc1 	bl	8011a90 <_Znwj>
 800410e:	4603      	mov	r3, r0
 8004110:	461c      	mov	r4, r3
 8004112:	6839      	ldr	r1, [r7, #0]
 8004114:	4620      	mov	r0, r4
 8004116:	f003 f965 	bl	80073e4 <_ZN21CPantallaEditorNombreC1Ei>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	639c      	str	r4, [r3, #56]	@ 0x38
	PantallaEditorNombre->AsignaID(id_Rampa);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004122:	6839      	ldr	r1, [r7, #0]
 8004124:	4618      	mov	r0, r3
 8004126:	f003 fdeb 	bl	8007d00 <_ZN21CPantallaEditorNombre8AsignaIDEi>
	AsignaPantallaActual(PantallaEditorNombre);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800412e:	4619      	mov	r1, r3
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f7ff fecd 	bl	8003ed0 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	bd90      	pop	{r4, r7, pc}

0800413e <_ZN19CManejadorPantallas24AsignaPantallaPasosRampaEi>:
void CManejadorPantallas::AsignaPantallaPasosRampa(int id_rampa)
{
 800413e:	b590      	push	{r4, r7, lr}
 8004140:	b083      	sub	sp, #12
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
 8004146:	6039      	str	r1, [r7, #0]
	if(PantallaPasosRampa==NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10a      	bne.n	8004166 <_ZN19CManejadorPantallas24AsignaPantallaPasosRampaEi+0x28>
		PantallaPasosRampa=new CPantallaPasosRampa(id_rampa);
 8004150:	20c4      	movs	r0, #196	@ 0xc4
 8004152:	f00d fc9d 	bl	8011a90 <_Znwj>
 8004156:	4603      	mov	r3, r0
 8004158:	461c      	mov	r4, r3
 800415a:	6839      	ldr	r1, [r7, #0]
 800415c:	4620      	mov	r0, r4
 800415e:	f004 ff87 	bl	8009070 <_ZN19CPantallaPasosRampaC1Ei>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	63dc      	str	r4, [r3, #60]	@ 0x3c
	PantallaPasosRampa->SetIDRampa(id_rampa);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3394      	adds	r3, #148	@ 0x94
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6839      	ldr	r1, [r7, #0]
 8004176:	4610      	mov	r0, r2
 8004178:	4798      	blx	r3
	AsignaPantallaActual(PantallaPasosRampa);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800417e:	4619      	mov	r1, r3
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7ff fea5 	bl	8003ed0 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>

}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	bd90      	pop	{r4, r7, pc}

0800418e <_ZN19CManejadorPantallas28MuestraPantallaEliminarRampaEi>:
void CManejadorPantallas::MuestraPantallaEliminarRampa(int id_rampa)
{
 800418e:	b590      	push	{r4, r7, lr}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
 8004196:	6039      	str	r1, [r7, #0]
	if(PantallaEliminarRampa==NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419c:	2b00      	cmp	r3, #0
 800419e:	d109      	bne.n	80041b4 <_ZN19CManejadorPantallas28MuestraPantallaEliminarRampaEi+0x26>
		PantallaEliminarRampa=new CPantallaEliminarRampa();
 80041a0:	20dc      	movs	r0, #220	@ 0xdc
 80041a2:	f00d fc75 	bl	8011a90 <_Znwj>
 80041a6:	4603      	mov	r3, r0
 80041a8:	461c      	mov	r4, r3
 80041aa:	4620      	mov	r0, r4
 80041ac:	f004 fc3a 	bl	8008a24 <_ZN22CPantallaEliminarRampaC1Ev>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	641c      	str	r4, [r3, #64]	@ 0x40
	PantallaEliminarRampa->SetIdRampa(id_rampa);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3380      	adds	r3, #128	@ 0x80
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6839      	ldr	r1, [r7, #0]
 80041c4:	4610      	mov	r0, r2
 80041c6:	4798      	blx	r3
	AsignaPantallaActual(PantallaEliminarRampa);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041cc:	4619      	mov	r1, r3
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7ff fe7e 	bl	8003ed0 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>

}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd90      	pop	{r4, r7, pc}

080041dc <_ZN19CManejadorPantallas26MuestraPantallaEdicionPasoEii>:
void CManejadorPantallas::MuestraPantallaEdicionPaso(int id_rampa,int id_paso)
{
 80041dc:	b590      	push	{r4, r7, lr}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
	if(PantallaEdicionPaso==NULL)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10a      	bne.n	8004206 <_ZN19CManejadorPantallas26MuestraPantallaEdicionPasoEii+0x2a>
		PantallaEdicionPaso=new CPantallaEdicionPaso();
 80041f0:	f44f 70ae 	mov.w	r0, #348	@ 0x15c
 80041f4:	f00d fc4c 	bl	8011a90 <_Znwj>
 80041f8:	4603      	mov	r3, r0
 80041fa:	461c      	mov	r4, r3
 80041fc:	4620      	mov	r0, r4
 80041fe:	f002 fbd5 	bl	80069ac <_ZN20CPantallaEdicionPasoC1Ev>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	645c      	str	r4, [r3, #68]	@ 0x44
	PantallaEdicionPaso->SetIdPaso(id_rampa,id_paso);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	68b9      	ldr	r1, [r7, #8]
 800420e:	4618      	mov	r0, r3
 8004210:	f002 fd52 	bl	8006cb8 <_ZN20CPantallaEdicionPaso9SetIdPasoEii>
	AsignaPantallaActual(PantallaEdicionPaso);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004218:	4619      	mov	r1, r3
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f7ff fe58 	bl	8003ed0 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 8004220:	bf00      	nop
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	bd90      	pop	{r4, r7, pc}

08004228 <_ZN19CManejadorPantallas19MuestraPantallaPasoEii>:
void CManejadorPantallas::MuestraPantallaPaso(int id_rampa,int id_paso)
{
 8004228:	b590      	push	{r4, r7, lr}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
	if(PantallaPaso==NULL)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004238:	2b00      	cmp	r3, #0
 800423a:	d109      	bne.n	8004250 <_ZN19CManejadorPantallas19MuestraPantallaPasoEii+0x28>
		PantallaPaso=new CPantallaPaso();
 800423c:	20bc      	movs	r0, #188	@ 0xbc
 800423e:	f00d fc27 	bl	8011a90 <_Znwj>
 8004242:	4603      	mov	r3, r0
 8004244:	461c      	mov	r4, r3
 8004246:	4620      	mov	r0, r4
 8004248:	f004 fe4e 	bl	8008ee8 <_ZN13CPantallaPasoC1Ev>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	649c      	str	r4, [r3, #72]	@ 0x48
	PantallaPaso->SetIdPaso(id_rampa,id_paso);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	68b9      	ldr	r1, [r7, #8]
 8004258:	4618      	mov	r0, r3
 800425a:	f004 febb 	bl	8008fd4 <_ZN13CPantallaPaso9SetIdPasoEii>
	AsignaPantallaActual(PantallaPaso);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004262:	4619      	mov	r1, r3
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f7ff fe33 	bl	8003ed0 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 800426a:	bf00      	nop
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	bd90      	pop	{r4, r7, pc}

08004272 <_ZN19CManejadorPantallas27MuestraPantallaEliminarPasoEii>:
void CManejadorPantallas::MuestraPantallaEliminarPaso(int id_rampa,int id_paso)
{
 8004272:	b590      	push	{r4, r7, lr}
 8004274:	b085      	sub	sp, #20
 8004276:	af00      	add	r7, sp, #0
 8004278:	60f8      	str	r0, [r7, #12]
 800427a:	60b9      	str	r1, [r7, #8]
 800427c:	607a      	str	r2, [r7, #4]
	if(PantallaEliminarPaso==NULL)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004282:	2b00      	cmp	r3, #0
 8004284:	d109      	bne.n	800429a <_ZN19CManejadorPantallas27MuestraPantallaEliminarPasoEii+0x28>
		PantallaEliminarPaso=new CPantallaEliminarPaso();
 8004286:	20e0      	movs	r0, #224	@ 0xe0
 8004288:	f00d fc02 	bl	8011a90 <_Znwj>
 800428c:	4603      	mov	r3, r0
 800428e:	461c      	mov	r4, r3
 8004290:	4620      	mov	r0, r4
 8004292:	f004 fa95 	bl	80087c0 <_ZN21CPantallaEliminarPasoC1Ev>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	64dc      	str	r4, [r3, #76]	@ 0x4c
	PantallaEliminarPaso->SetIdPaso(id_rampa,id_paso);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	3380      	adds	r3, #128	@ 0x80
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	68b9      	ldr	r1, [r7, #8]
 80042ac:	4798      	blx	r3
	AsignaPantallaActual(PantallaEliminarPaso);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042b2:	4619      	mov	r1, r3
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f7ff fe0b 	bl	8003ed0 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 80042ba:	bf00      	nop
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd90      	pop	{r4, r7, pc}

080042c2 <_ZN19CManejadorPantallas29MuestraPantallaEjecucionRampaEi>:
void CManejadorPantallas::MuestraPantallaEjecucionRampa(int id_rampa)
{
 80042c2:	b590      	push	{r4, r7, lr}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
 80042ca:	6039      	str	r1, [r7, #0]
	if(PantallaEjecucionRampa==NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10a      	bne.n	80042ea <_ZN19CManejadorPantallas29MuestraPantallaEjecucionRampaEi+0x28>
		PantallaEjecucionRampa=new CPantallaEjecucionRampa();
 80042d4:	f44f 703a 	mov.w	r0, #744	@ 0x2e8
 80042d8:	f00d fbda 	bl	8011a90 <_Znwj>
 80042dc:	4603      	mov	r3, r0
 80042de:	461c      	mov	r4, r3
 80042e0:	4620      	mov	r0, r4
 80042e2:	f003 fdfb 	bl	8007edc <_ZN23CPantallaEjecucionRampaC1Ev>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	651c      	str	r4, [r3, #80]	@ 0x50
	PantallaEjecucionRampa->SetIDRampa(id_rampa);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042ee:	6839      	ldr	r1, [r7, #0]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f003 ff0d 	bl	8008110 <_ZN23CPantallaEjecucionRampa10SetIDRampaEi>
	AsignaPantallaActual(PantallaEjecucionRampa);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042fa:	4619      	mov	r1, r3
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f7ff fde7 	bl	8003ed0 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	bd90      	pop	{r4, r7, pc}
	...

0800430c <_ZN20CManejadorEventoMenuC1Ev>:
 *      Author: W10
 */

#include <GUI/Menu/CManejadorEventoMenu.hpp>

CManejadorEventoMenu::CManejadorEventoMenu()
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	4a04      	ldr	r2, [pc, #16]	@ (8004328 <_ZN20CManejadorEventoMenuC1Ev+0x1c>)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4618      	mov	r0, r3
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	08015108 	.word	0x08015108

0800432c <_ZN20CManejadorEventoMenuD1Ev>:

CManejadorEventoMenu::~CManejadorEventoMenu()
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	4a04      	ldr	r2, [pc, #16]	@ (8004348 <_ZN20CManejadorEventoMenuD1Ev+0x1c>)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4618      	mov	r0, r3
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	08015108 	.word	0x08015108

0800434c <_ZN20CManejadorEventoMenuD0Ev>:
CManejadorEventoMenu::~CManejadorEventoMenu()
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
}
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f7ff ffe9 	bl	800432c <_ZN20CManejadorEventoMenuD1Ev>
 800435a:	2104      	movs	r1, #4
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f00d fb95 	bl	8011a8c <_ZdlPvj>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4618      	mov	r0, r3
 8004366:	3708      	adds	r7, #8
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <_ZN20CManejadorEventoMenu11OnMenuEventEi>:

void CManejadorEventoMenu::OnMenuEvent(int identificador)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]

}
 8004376:	bf00      	nop
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
	...

08004384 <_ZN5CMenuC1Eiiiiiii>:
 */

#include <GUI/Menu/CMenu.hpp>
#include "GUI/CRectanguloTft.hpp"

CMenu::CMenu(int xi, int yi, int ancho, int alto,int backColor, int contorno, int colorContorno):
 8004384:	b580      	push	{r7, lr}
 8004386:	b088      	sub	sp, #32
 8004388:	af04      	add	r7, sp, #16
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
 8004390:	603b      	str	r3, [r7, #0]
	CRectanguloTft(xi,yi,ancho,alto,backColor,contorno,colorContorno)
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004396:	9303      	str	r3, [sp, #12]
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	9302      	str	r3, [sp, #8]
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	9301      	str	r3, [sp, #4]
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	68b9      	ldr	r1, [r7, #8]
 80043aa:	f7ff f92b 	bl	8003604 <_ZN14CRectanguloTftC1Eiiiiiii>
 80043ae:	4a0c      	ldr	r2, [pc, #48]	@ (80043e0 <_ZN5CMenuC1Eiiiiiii+0x5c>)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2219      	movs	r2, #25
 80043b8:	651a      	str	r2, [r3, #80]	@ 0x50
{
	// TODO Auto-generated constructor stub
	Opciones=NULL;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	631a      	str	r2, [r3, #48]	@ 0x30
	ItemInicial=NULL;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	635a      	str	r2, [r3, #52]	@ 0x34
	ItemsXPagina=alto/(AnchoItem+5);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ca:	3305      	adds	r3, #5
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	fb92 f2f3 	sdiv	r2, r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	0801511c 	.word	0x0801511c

080043e4 <_ZN5CMenuD1Ev>:

CMenu::~CMenu()
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	4a05      	ldr	r2, [pc, #20]	@ (8004404 <_ZN5CMenuD1Ev+0x20>)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff f8e3 	bl	80035c0 <_ZN14CRectanguloTftD1Ev>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4618      	mov	r0, r3
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	0801511c 	.word	0x0801511c

08004408 <_ZN5CMenuD0Ev>:
CMenu::~CMenu()
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
}
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f7ff ffe7 	bl	80043e4 <_ZN5CMenuD1Ev>
 8004416:	2180      	movs	r1, #128	@ 0x80
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f00d fb37 	bl	8011a8c <_ZdlPvj>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4618      	mov	r0, r3
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <_ZN5CMenu4ShowEv>:

void CMenu::Show()
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
//	int y;
	CRectanguloTft::Show();
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff f918 	bl	8003668 <_ZN14CRectanguloTft4ShowEv>
	CMenuItem* tmp=ItemInicial;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800443c:	60fb      	str	r3, [r7, #12]
	while(tmp!=NULL)
 800443e:	e012      	b.n	8004466 <_ZN5CMenu4ShowEv+0x3e>
	{
//		y=tmp->DamePosicionY()+tmp->DameAltura();
		//Si cabe en altura, lo muestro
		if(SePuedeMostrar(tmp)==false)
 8004440:	68f9      	ldr	r1, [r7, #12]
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f8c4 	bl	80045d0 <_ZN5CMenu14SePuedeMostrarEP9CMenuItem>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	bf0c      	ite	eq
 800444e:	2301      	moveq	r3, #1
 8004450:	2300      	movne	r3, #0
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10a      	bne.n	800446e <_ZN5CMenu4ShowEv+0x46>
		{
			return;
		}
		tmp->Show();
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 fbd2 	bl	8004c02 <_ZN9CMenuItem4ShowEv>
		tmp=tmp->DameSiguiente();
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 fc5e 	bl	8004d20 <_ZN9CMenuItem13DameSiguienteEv>
 8004464:	60f8      	str	r0, [r7, #12]
	while(tmp!=NULL)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1e9      	bne.n	8004440 <_ZN5CMenu4ShowEv+0x18>
 800446c:	e000      	b.n	8004470 <_ZN5CMenu4ShowEv+0x48>
			return;
 800446e:	bf00      	nop
	}
}
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <_ZN5CMenu18AsignaColoresItemsEiiii>:

void CMenu::AsignaColoresItems(int colorTexto, int colorFondo, int colorTextoResaltado, int solorFondoResaltado)
{
 8004476:	b480      	push	{r7}
 8004478:	b085      	sub	sp, #20
 800447a:	af00      	add	r7, sp, #0
 800447c:	60f8      	str	r0, [r7, #12]
 800447e:	60b9      	str	r1, [r7, #8]
 8004480:	607a      	str	r2, [r7, #4]
 8004482:	603b      	str	r3, [r7, #0]
	ColorTexto=colorTexto;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	63da      	str	r2, [r3, #60]	@ 0x3c
	ColorFondo=colorFondo;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	641a      	str	r2, [r3, #64]	@ 0x40
	ColoTextoSeleccionado=colorTextoResaltado;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	645a      	str	r2, [r3, #68]	@ 0x44
	ColorFondoSeleccionado=solorFondoResaltado;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800449c:	bf00      	nop
 800449e:	3714      	adds	r7, #20
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <_ZN5CMenu8CreaItemEPcib>:

CMenuItem* CMenu::CreaItem(char* texto, int identificador,bool seleccionado)
{
 80044a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044aa:	b091      	sub	sp, #68	@ 0x44
 80044ac:	af08      	add	r7, sp, #32
 80044ae:	6178      	str	r0, [r7, #20]
 80044b0:	6139      	str	r1, [r7, #16]
 80044b2:	60fa      	str	r2, [r7, #12]
 80044b4:	72fb      	strb	r3, [r7, #11]
	CEtiquetaTft* etiquetaTmp=new CEtiquetaTft(Xi, Yi, Ancho, AnchoItem, ColorFondo,texto, ColorTexto, 3, 0, ColorFondo);
 80044b6:	20a4      	movs	r0, #164	@ 0xa4
 80044b8:	f00d faea 	bl	8011a90 <_Znwj>
 80044bc:	4603      	mov	r3, r0
 80044be:	461c      	mov	r4, r3
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	699d      	ldr	r5, [r3, #24]
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	69de      	ldr	r6, [r3, #28]
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	607b      	str	r3, [r7, #4]
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80044d6:	6979      	ldr	r1, [r7, #20]
 80044d8:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 80044da:	6978      	ldr	r0, [r7, #20]
 80044dc:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 80044de:	9006      	str	r0, [sp, #24]
 80044e0:	2000      	movs	r0, #0
 80044e2:	9005      	str	r0, [sp, #20]
 80044e4:	2003      	movs	r0, #3
 80044e6:	9004      	str	r0, [sp, #16]
 80044e8:	9103      	str	r1, [sp, #12]
 80044ea:	6939      	ldr	r1, [r7, #16]
 80044ec:	9102      	str	r1, [sp, #8]
 80044ee:	9201      	str	r2, [sp, #4]
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4632      	mov	r2, r6
 80044f6:	4629      	mov	r1, r5
 80044f8:	4620      	mov	r0, r4
 80044fa:	f7fe fce5 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 80044fe:	61fc      	str	r4, [r7, #28]
	CMenuItem* tmp=new CMenuItem(etiquetaTmp,identificador,seleccionado);
 8004500:	2028      	movs	r0, #40	@ 0x28
 8004502:	f00d fac5 	bl	8011a90 <_Znwj>
 8004506:	4603      	mov	r3, r0
 8004508:	461c      	mov	r4, r3
 800450a:	7afb      	ldrb	r3, [r7, #11]
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	69f9      	ldr	r1, [r7, #28]
 8004510:	4620      	mov	r0, r4
 8004512:	f000 fb0d 	bl	8004b30 <_ZN9CMenuItemC1EP12CEtiquetaTftib>
 8004516:	61bc      	str	r4, [r7, #24]
	tmp->AsignaColores(ColorTexto, ColorFondo, ColoTextoSeleccionado, ColorFondoSeleccionado);
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	4603      	mov	r3, r0
 800452c:	69b8      	ldr	r0, [r7, #24]
 800452e:	f000 fb9f 	bl	8004c70 <_ZN9CMenuItem13AsignaColoresEiiii>
	return tmp;
 8004532:	69bb      	ldr	r3, [r7, #24]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3724      	adds	r7, #36	@ 0x24
 8004538:	46bd      	mov	sp, r7
 800453a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800453c <_ZN5CMenu10AgregaItemEPcib>:

void CMenu::AgregaItem(char* texto, int identificador,bool seleccionado)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
 8004548:	70fb      	strb	r3, [r7, #3]
	CMenuItem* tmp=CreaItem(texto,identificador,seleccionado);
 800454a:	78fb      	ldrb	r3, [r7, #3]
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	68b9      	ldr	r1, [r7, #8]
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f7ff ffa9 	bl	80044a8 <_ZN5CMenu8CreaItemEPcib>
 8004556:	6178      	str	r0, [r7, #20]
	if(Opciones==NULL)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455c:	2b00      	cmp	r3, #0
 800455e:	d111      	bne.n	8004584 <_ZN5CMenu10AgregaItemEPcib+0x48>
	{
		Opciones=tmp;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	631a      	str	r2, [r3, #48]	@ 0x30
		Opciones->Selecciona(true);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800456a:	2101      	movs	r1, #1
 800456c:	4618      	mov	r0, r3
 800456e:	f000 fb98 	bl	8004ca2 <_ZN9CMenuItem10SeleccionaEb>
		Seleccionado=Opciones;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	639a      	str	r2, [r3, #56]	@ 0x38
		ItemInicial=Opciones;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	635a      	str	r2, [r3, #52]	@ 0x34
		return;
 8004582:	e00e      	b.n	80045a2 <_ZN5CMenu10AgregaItemEPcib+0x66>
	}
	Opciones->AgregaAlFinal(tmp);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004588:	6979      	ldr	r1, [r7, #20]
 800458a:	4618      	mov	r0, r3
 800458c:	f000 fb20 	bl	8004bd0 <_ZN9CMenuItem13AgregaAlFinalEPS_>
	CalaculaPosicionItems(Opciones);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004594:	4619      	mov	r1, r3
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 f806 	bl	80045a8 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem>
	CalculaPaginas();
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 f911 	bl	80047c4 <_ZN5CMenu14CalculaPaginasEv>
}
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem>:
void CMenu::CalaculaPosicionItems(CMenuItem* raiz)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
	if(raiz==NULL)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d007      	beq.n	80045c8 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem+0x20>
		return;
	raiz->CalculaPosicionY(Yi+5);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	69db      	ldr	r3, [r3, #28]
 80045bc:	3305      	adds	r3, #5
 80045be:	4619      	mov	r1, r3
 80045c0:	6838      	ldr	r0, [r7, #0]
 80045c2:	f000 fb7e 	bl	8004cc2 <_ZN9CMenuItem16CalculaPosicionYEi>
 80045c6:	e000      	b.n	80045ca <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem+0x22>
		return;
 80045c8:	bf00      	nop
}
 80045ca:	3708      	adds	r7, #8
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <_ZN5CMenu14SePuedeMostrarEP9CMenuItem>:
bool CMenu::SePuedeMostrar(CMenuItem *item)
{
 80045d0:	b590      	push	{r4, r7, lr}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
	int y=item->DamePosicionY()+item->DameAltura();
 80045da:	6838      	ldr	r0, [r7, #0]
 80045dc:	f000 fbac 	bl	8004d38 <_ZN9CMenuItem13DamePosicionYEv>
 80045e0:	4604      	mov	r4, r0
 80045e2:	6838      	ldr	r0, [r7, #0]
 80045e4:	f000 fbb6 	bl	8004d54 <_ZN9CMenuItem10DameAlturaEv>
 80045e8:	4603      	mov	r3, r0
 80045ea:	4423      	add	r3, r4
 80045ec:	60fb      	str	r3, [r7, #12]
	//Si cabe en altura, lo muestro
	if(y> Yi+Alto)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	69da      	ldr	r2, [r3, #28]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f6:	4413      	add	r3, r2
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	dd01      	ble.n	8004602 <_ZN5CMenu14SePuedeMostrarEP9CMenuItem+0x32>
		return false;
 80045fe:	2300      	movs	r3, #0
 8004600:	e000      	b.n	8004604 <_ZN5CMenu14SePuedeMostrarEP9CMenuItem+0x34>
	return true;
 8004602:	2301      	movs	r3, #1
}
 8004604:	4618      	mov	r0, r3
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	bd90      	pop	{r4, r7, pc}

0800460c <_ZN5CMenu21OnSeleccionaSiguienteEv>:
void CMenu::OnSeleccionaSiguiente()
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
	if(Opciones==NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004618:	2b00      	cmp	r3, #0
 800461a:	d03f      	beq.n	800469c <_ZN5CMenu21OnSeleccionaSiguienteEv+0x90>
		return;
	CMenuItem* tmp=Seleccionado;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004620:	60fb      	str	r3, [r7, #12]
	CMenuItem* siguiente;
	//me muevo hasta encontrar el que esta seleccionado
	while(tmp!=NULL)
 8004622:	e037      	b.n	8004694 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x88>
	{
		if(tmp->EstaSeleccionado())
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 fba3 	bl	8004d70 <_ZN9CMenuItem16EstaSeleccionadoEv>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d02d      	beq.n	800468c <_ZN5CMenu21OnSeleccionaSiguienteEv+0x80>
		{
			siguiente=tmp->DameSiguiente();
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f000 fb75 	bl	8004d20 <_ZN9CMenuItem13DameSiguienteEv>
 8004636:	60b8      	str	r0, [r7, #8]
			if(siguiente==NULL)
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d030      	beq.n	80046a0 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x94>
				return;
			tmp->Selecciona(false);
 800463e:	2100      	movs	r1, #0
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 fb2e 	bl	8004ca2 <_ZN9CMenuItem10SeleccionaEb>
			siguiente->Selecciona(true);
 8004646:	2101      	movs	r1, #1
 8004648:	68b8      	ldr	r0, [r7, #8]
 800464a:	f000 fb2a 	bl	8004ca2 <_ZN9CMenuItem10SeleccionaEb>
			Seleccionado=siguiente;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	639a      	str	r2, [r3, #56]	@ 0x38
			if(SePuedeMostrar(siguiente))
 8004654:	68b9      	ldr	r1, [r7, #8]
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7ff ffba 	bl	80045d0 <_ZN5CMenu14SePuedeMostrarEP9CMenuItem>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d006      	beq.n	8004670 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x64>
			{
				tmp->Show();
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f000 facd 	bl	8004c02 <_ZN9CMenuItem4ShowEv>
				siguiente->Show();
 8004668:	68b8      	ldr	r0, [r7, #8]
 800466a:	f000 faca 	bl	8004c02 <_ZN9CMenuItem4ShowEv>
				return;
 800466e:	e018      	b.n	80046a2 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x96>
			}
			else
			{
				//hago una paginacion hacia abajo
				CalaculaPosicionItems(siguiente);
 8004670:	68b9      	ldr	r1, [r7, #8]
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7ff ff98 	bl	80045a8 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem>
				ItemInicial=siguiente;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	635a      	str	r2, [r3, #52]	@ 0x34
				Show();
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	334c      	adds	r3, #76	@ 0x4c
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	4798      	blx	r3
				return;
 800468a:	e00a      	b.n	80046a2 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x96>
			}
		}
		tmp=tmp->DameSiguiente();
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f000 fb47 	bl	8004d20 <_ZN9CMenuItem13DameSiguienteEv>
 8004692:	60f8      	str	r0, [r7, #12]
	while(tmp!=NULL)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1c4      	bne.n	8004624 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x18>
 800469a:	e002      	b.n	80046a2 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x96>
		return;
 800469c:	bf00      	nop
 800469e:	e000      	b.n	80046a2 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x96>
				return;
 80046a0:	bf00      	nop
	}

}
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <_ZN5CMenu20OnSeleccionaAnteriorEv>:
void CMenu::OnSeleccionaAnterior()
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
	if(Opciones==NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d05c      	beq.n	8004772 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xca>
		return;
	CMenuItem* tmp=Seleccionado;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046bc:	617b      	str	r3, [r7, #20]
	CMenuItem* anterior;
	while(tmp!=NULL)
 80046be:	e054      	b.n	800476a <_ZN5CMenu20OnSeleccionaAnteriorEv+0xc2>
	{
		if(tmp->EstaSeleccionado())
 80046c0:	6978      	ldr	r0, [r7, #20]
 80046c2:	f000 fb55 	bl	8004d70 <_ZN9CMenuItem16EstaSeleccionadoEv>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d04a      	beq.n	8004762 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xba>
		{
			anterior=tmp->DameAnterior();
 80046cc:	6978      	ldr	r0, [r7, #20]
 80046ce:	f000 fb5c 	bl	8004d8a <_ZN9CMenuItem12DameAnteriorEv>
 80046d2:	60f8      	str	r0, [r7, #12]
			if(anterior==NULL)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d04d      	beq.n	8004776 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xce>
				return;
			tmp->Selecciona(false);
 80046da:	2100      	movs	r1, #0
 80046dc:	6978      	ldr	r0, [r7, #20]
 80046de:	f000 fae0 	bl	8004ca2 <_ZN9CMenuItem10SeleccionaEb>
			anterior->Selecciona(true);
 80046e2:	2101      	movs	r1, #1
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f000 fadc 	bl	8004ca2 <_ZN9CMenuItem10SeleccionaEb>
			Seleccionado=anterior;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	639a      	str	r2, [r3, #56]	@ 0x38
			if(EstaInicioPagina(tmp)==false)
 80046f0:	6979      	ldr	r1, [r7, #20]
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f8bb 	bl	800486e <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	bf0c      	ite	eq
 80046fe:	2301      	moveq	r3, #1
 8004700:	2300      	movne	r3, #0
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	d006      	beq.n	8004716 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x6e>
			{
				tmp->Show();
 8004708:	6978      	ldr	r0, [r7, #20]
 800470a:	f000 fa7a 	bl	8004c02 <_ZN9CMenuItem4ShowEv>
				anterior->Show();
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 fa77 	bl	8004c02 <_ZN9CMenuItem4ShowEv>
				return;
 8004714:	e030      	b.n	8004778 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xd0>
			}
			else
			{
				//hago una paginacion hacia arriba
				//regreso ItemsXPagina para calcular la pagina
				int itemsContados=ItemsXPagina;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800471a:	613b      	str	r3, [r7, #16]
				while(tmp!=NULL && itemsContados>0)
 800471c:	e00b      	b.n	8004736 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x8e>
				{
					anterior=tmp->DameAnterior();
 800471e:	6978      	ldr	r0, [r7, #20]
 8004720:	f000 fb33 	bl	8004d8a <_ZN9CMenuItem12DameAnteriorEv>
 8004724:	60f8      	str	r0, [r7, #12]
					itemsContados--;
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	3b01      	subs	r3, #1
 800472a:	613b      	str	r3, [r7, #16]
					if(anterior==NULL)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d008      	beq.n	8004744 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x9c>
						break;
					tmp=anterior;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	617b      	str	r3, [r7, #20]
				while(tmp!=NULL && itemsContados>0)
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d004      	beq.n	8004746 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x9e>
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	2b00      	cmp	r3, #0
 8004740:	dced      	bgt.n	800471e <_ZN5CMenu20OnSeleccionaAnteriorEv+0x76>
 8004742:	e000      	b.n	8004746 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x9e>
						break;
 8004744:	bf00      	nop
				}
				CalaculaPosicionItems(tmp);
 8004746:	6979      	ldr	r1, [r7, #20]
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f7ff ff2d 	bl	80045a8 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem>
				ItemInicial=tmp;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	635a      	str	r2, [r3, #52]	@ 0x34
				Show();
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	334c      	adds	r3, #76	@ 0x4c
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	4798      	blx	r3
				return;
 8004760:	e00a      	b.n	8004778 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xd0>
			}
		}
		tmp=tmp->DameAnterior();
 8004762:	6978      	ldr	r0, [r7, #20]
 8004764:	f000 fb11 	bl	8004d8a <_ZN9CMenuItem12DameAnteriorEv>
 8004768:	6178      	str	r0, [r7, #20]
	while(tmp!=NULL)
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1a7      	bne.n	80046c0 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x18>
 8004770:	e002      	b.n	8004778 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xd0>
		return;
 8004772:	bf00      	nop
 8004774:	e000      	b.n	8004778 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xd0>
				return;
 8004776:	bf00      	nop
	}

}
 8004778:	3718      	adds	r7, #24
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <_ZN5CMenu19OnClickSeleccionadoEv>:
void CMenu::OnClickSeleccionado()
{
 800477e:	b5b0      	push	{r4, r5, r7, lr}
 8004780:	b082      	sub	sp, #8
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
	if(Manejador==NULL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800478a:	2b00      	cmp	r3, #0
 800478c:	d014      	beq.n	80047b8 <_ZN5CMenu19OnClickSeleccionadoEv+0x3a>
		return;
	if(Seleccionado==NULL)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004792:	2b00      	cmp	r3, #0
 8004794:	d012      	beq.n	80047bc <_ZN5CMenu19OnClickSeleccionadoEv+0x3e>
		return;
	Manejador->OnMenuEvent(Seleccionado->DameIdentificador());
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6fdd      	ldr	r5, [r3, #124]	@ 0x7c
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	3308      	adds	r3, #8
 80047a2:	681c      	ldr	r4, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 fafa 	bl	8004da2 <_ZN9CMenuItem17DameIdentificadorEv>
 80047ae:	4603      	mov	r3, r0
 80047b0:	4619      	mov	r1, r3
 80047b2:	4628      	mov	r0, r5
 80047b4:	47a0      	blx	r4
 80047b6:	e002      	b.n	80047be <_ZN5CMenu19OnClickSeleccionadoEv+0x40>
		return;
 80047b8:	bf00      	nop
 80047ba:	e000      	b.n	80047be <_ZN5CMenu19OnClickSeleccionadoEv+0x40>
		return;
 80047bc:	bf00      	nop
}
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bdb0      	pop	{r4, r5, r7, pc}

080047c4 <_ZN5CMenu14CalculaPaginasEv>:
void CMenu::CalculaPaginas()
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
	LimpiaPaginas();
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 f833 	bl	8004838 <_ZN5CMenu13LimpiaPaginasEv>
	int conteoItems=0;
 80047d2:	2300      	movs	r3, #0
 80047d4:	617b      	str	r3, [r7, #20]
	int numeroPagina=0;
 80047d6:	2300      	movs	r3, #0
 80047d8:	613b      	str	r3, [r7, #16]
	Paginas[numeroPagina]=Opciones;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047de:	6879      	ldr	r1, [r7, #4]
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	3314      	adds	r3, #20
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	440b      	add	r3, r1
 80047e8:	605a      	str	r2, [r3, #4]
	CMenuItem* tmp=Opciones;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ee:	60fb      	str	r3, [r7, #12]
	while(tmp!=NULL)
 80047f0:	e01a      	b.n	8004828 <_ZN5CMenu14CalculaPaginasEv+0x64>
	{
		if(conteoItems%ItemsXPagina==0)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	fb93 f1f2 	sdiv	r1, r3, r2
 80047fc:	fb01 f202 	mul.w	r2, r1, r2
 8004800:	1a9b      	subs	r3, r3, r2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d109      	bne.n	800481a <_ZN5CMenu14CalculaPaginasEv+0x56>
		{
			Paginas[numeroPagina]=tmp;
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	3314      	adds	r3, #20
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	4413      	add	r3, r2
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	605a      	str	r2, [r3, #4]
			numeroPagina++;
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	3301      	adds	r3, #1
 8004818:	613b      	str	r3, [r7, #16]
		}
		conteoItems++;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	3301      	adds	r3, #1
 800481e:	617b      	str	r3, [r7, #20]
		tmp=tmp->DameSiguiente();
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f000 fa7d 	bl	8004d20 <_ZN9CMenuItem13DameSiguienteEv>
 8004826:	60f8      	str	r0, [r7, #12]
	while(tmp!=NULL)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1e1      	bne.n	80047f2 <_ZN5CMenu14CalculaPaginasEv+0x2e>
	}
}
 800482e:	bf00      	nop
 8004830:	bf00      	nop
 8004832:	3718      	adds	r7, #24
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <_ZN5CMenu13LimpiaPaginasEv>:

void CMenu::LimpiaPaginas()
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
	for(int i=0;i<MaximoPaginas;i++)
 8004840:	2300      	movs	r3, #0
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	e009      	b.n	800485a <_ZN5CMenu13LimpiaPaginasEv+0x22>
	{
		Paginas[i]=NULL;
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	3314      	adds	r3, #20
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	2200      	movs	r2, #0
 8004852:	605a      	str	r2, [r3, #4]
	for(int i=0;i<MaximoPaginas;i++)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	3301      	adds	r3, #1
 8004858:	60fb      	str	r3, [r7, #12]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2b09      	cmp	r3, #9
 800485e:	ddf2      	ble.n	8004846 <_ZN5CMenu13LimpiaPaginasEv+0xe>
	}
}
 8004860:	bf00      	nop
 8004862:	bf00      	nop
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem>:

bool CMenu::EstaInicioPagina(CMenuItem* item)
{
 800486e:	b480      	push	{r7}
 8004870:	b085      	sub	sp, #20
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
 8004876:	6039      	str	r1, [r7, #0]
	for(int i=0;i<MaximoPaginas;i++)
 8004878:	2300      	movs	r3, #0
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	e00d      	b.n	800489a <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem+0x2c>
	{
		if(Paginas[i]==item)
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	3314      	adds	r3, #20
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	429a      	cmp	r2, r3
 800488e:	d101      	bne.n	8004894 <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem+0x26>
			return true;
 8004890:	2301      	movs	r3, #1
 8004892:	e006      	b.n	80048a2 <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem+0x34>
	for(int i=0;i<MaximoPaginas;i++)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	3301      	adds	r3, #1
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2b09      	cmp	r3, #9
 800489e:	ddee      	ble.n	800487e <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem+0x10>
	}
	return false;
 80048a0:	2300      	movs	r3, #0

}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3714      	adds	r7, #20
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <_ZN5CMenu26AsignaManejadorEventosMenuEP20CManejadorEventoMenu>:
void CMenu::AsignaManejadorEventosMenu(CManejadorEventoMenu *manejador)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b083      	sub	sp, #12
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
 80048b6:	6039      	str	r1, [r7, #0]
	Manejador=manejador;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80048be:	bf00      	nop
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <_ZN5CMenu10AgregaItemEPciiiiib>:

void CMenu::AgregaItem(char* texto, int identificador,int x, int y,int ancho, int alto,bool seleccionado)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b08a      	sub	sp, #40	@ 0x28
 80048ce:	af04      	add	r7, sp, #16
 80048d0:	60f8      	str	r0, [r7, #12]
 80048d2:	60b9      	str	r1, [r7, #8]
 80048d4:	607a      	str	r2, [r7, #4]
 80048d6:	603b      	str	r3, [r7, #0]
	CMenuItem* tmp=CreaItem(texto,identificador,Xi+x,Yi+y,ancho, alto,seleccionado);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	699a      	ldr	r2, [r3, #24]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	18d1      	adds	r1, r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	69da      	ldr	r2, [r3, #28]
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	4413      	add	r3, r2
 80048e8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80048ec:	9203      	str	r2, [sp, #12]
 80048ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048f0:	9202      	str	r2, [sp, #8]
 80048f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048f4:	9201      	str	r2, [sp, #4]
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	460b      	mov	r3, r1
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	68b9      	ldr	r1, [r7, #8]
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 f820 	bl	8004944 <_ZN5CMenu8CreaItemEPciiiiib>
 8004904:	6178      	str	r0, [r7, #20]
	if(Opciones==NULL)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800490a:	2b00      	cmp	r3, #0
 800490c:	d111      	bne.n	8004932 <_ZN5CMenu10AgregaItemEPciiiiib+0x68>
	{
		Opciones=tmp;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	631a      	str	r2, [r3, #48]	@ 0x30
		Opciones->Selecciona(true);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004918:	2101      	movs	r1, #1
 800491a:	4618      	mov	r0, r3
 800491c:	f000 f9c1 	bl	8004ca2 <_ZN9CMenuItem10SeleccionaEb>
		Seleccionado=Opciones;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	639a      	str	r2, [r3, #56]	@ 0x38
		ItemInicial=Opciones;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	635a      	str	r2, [r3, #52]	@ 0x34
		return;
 8004930:	e005      	b.n	800493e <_ZN5CMenu10AgregaItemEPciiiiib+0x74>
	}
	Opciones->AgregaAlFinal(tmp);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004936:	6979      	ldr	r1, [r7, #20]
 8004938:	4618      	mov	r0, r3
 800493a:	f000 f949 	bl	8004bd0 <_ZN9CMenuItem13AgregaAlFinalEPS_>
}
 800493e:	3718      	adds	r7, #24
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <_ZN5CMenu8CreaItemEPciiiiib>:
CMenuItem* CMenu::CreaItem(char* texto, int identificador,int x, int y,int ancho, int alto,bool seleccionado)
{
 8004944:	b590      	push	{r4, r7, lr}
 8004946:	b08f      	sub	sp, #60	@ 0x3c
 8004948:	af08      	add	r7, sp, #32
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
 8004950:	603b      	str	r3, [r7, #0]
	CEtiquetaTft* etiquetaTmp=new CEtiquetaTft(x, y, ancho, alto, ColorFondo,texto, ColorTexto, 3, 0, ColorFondo);
 8004952:	20a4      	movs	r0, #164	@ 0xa4
 8004954:	f00d f89c 	bl	8011a90 <_Znwj>
 8004958:	4603      	mov	r3, r0
 800495a:	461c      	mov	r4, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004964:	68f9      	ldr	r1, [r7, #12]
 8004966:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004968:	9106      	str	r1, [sp, #24]
 800496a:	2100      	movs	r1, #0
 800496c:	9105      	str	r1, [sp, #20]
 800496e:	2103      	movs	r1, #3
 8004970:	9104      	str	r1, [sp, #16]
 8004972:	9203      	str	r2, [sp, #12]
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	9202      	str	r2, [sp, #8]
 8004978:	9301      	str	r3, [sp, #4]
 800497a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004980:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004982:	6839      	ldr	r1, [r7, #0]
 8004984:	4620      	mov	r0, r4
 8004986:	f7fe fa9f 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 800498a:	617c      	str	r4, [r7, #20]
	CMenuItem* tmp=new CMenuItem(etiquetaTmp,identificador,seleccionado);
 800498c:	2028      	movs	r0, #40	@ 0x28
 800498e:	f00d f87f 	bl	8011a90 <_Znwj>
 8004992:	4603      	mov	r3, r0
 8004994:	461c      	mov	r4, r3
 8004996:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	6979      	ldr	r1, [r7, #20]
 800499e:	4620      	mov	r0, r4
 80049a0:	f000 f8c6 	bl	8004b30 <_ZN9CMenuItemC1EP12CEtiquetaTftib>
 80049a4:	613c      	str	r4, [r7, #16]
	tmp->AsignaColores(ColorTexto, ColorFondo, ColoTextoSeleccionado, ColorFondoSeleccionado);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	4603      	mov	r3, r0
 80049ba:	6938      	ldr	r0, [r7, #16]
 80049bc:	f000 f958 	bl	8004c70 <_ZN9CMenuItem13AsignaColoresEiiii>
	return tmp;
 80049c0:	693b      	ldr	r3, [r7, #16]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	371c      	adds	r7, #28
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd90      	pop	{r4, r7, pc}

080049ca <_ZN5CMenu11SetPosicionEii>:
void CMenu::SetPosicion(int x, int y)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b085      	sub	sp, #20
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	60f8      	str	r0, [r7, #12]
 80049d2:	60b9      	str	r1, [r7, #8]
 80049d4:	607a      	str	r2, [r7, #4]
	Xi=x;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	619a      	str	r2, [r3, #24]
	Yi=y;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	61da      	str	r2, [r3, #28]
}
 80049e2:	bf00      	nop
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <_ZN5CMenu10AgregaItemEPciiiiiiib>:
void CMenu::AgregaItem(char* texto, int identificador,int x, int y,int ancho, int alto,int colorFondo,int colorTexto,bool seleccionado)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b08c      	sub	sp, #48	@ 0x30
 80049f2:	af06      	add	r7, sp, #24
 80049f4:	60f8      	str	r0, [r7, #12]
 80049f6:	60b9      	str	r1, [r7, #8]
 80049f8:	607a      	str	r2, [r7, #4]
 80049fa:	603b      	str	r3, [r7, #0]
	CMenuItem* tmp=CreaItem(texto,identificador,Xi+x,Yi+y,ancho, alto,colorFondo,colorTexto,seleccionado);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	699a      	ldr	r2, [r3, #24]
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	18d1      	adds	r1, r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	69da      	ldr	r2, [r3, #28]
 8004a08:	6a3b      	ldr	r3, [r7, #32]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8004a10:	9205      	str	r2, [sp, #20]
 8004a12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a14:	9204      	str	r2, [sp, #16]
 8004a16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a18:	9203      	str	r2, [sp, #12]
 8004a1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a1c:	9202      	str	r2, [sp, #8]
 8004a1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a20:	9201      	str	r2, [sp, #4]
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	460b      	mov	r3, r1
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	68b9      	ldr	r1, [r7, #8]
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 f820 	bl	8004a70 <_ZN5CMenu8CreaItemEPciiiiiiib>
 8004a30:	6178      	str	r0, [r7, #20]
	if(Opciones==NULL)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d111      	bne.n	8004a5e <_ZN5CMenu10AgregaItemEPciiiiiiib+0x70>
	{
		Opciones=tmp;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	631a      	str	r2, [r3, #48]	@ 0x30
		Opciones->Selecciona(true);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a44:	2101      	movs	r1, #1
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 f92b 	bl	8004ca2 <_ZN9CMenuItem10SeleccionaEb>
		Seleccionado=Opciones;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	639a      	str	r2, [r3, #56]	@ 0x38
		ItemInicial=Opciones;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	635a      	str	r2, [r3, #52]	@ 0x34
		return;
 8004a5c:	e005      	b.n	8004a6a <_ZN5CMenu10AgregaItemEPciiiiiiib+0x7c>
	}
	Opciones->AgregaAlFinal(tmp);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a62:	6979      	ldr	r1, [r7, #20]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f000 f8b3 	bl	8004bd0 <_ZN9CMenuItem13AgregaAlFinalEPS_>

}
 8004a6a:	3718      	adds	r7, #24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <_ZN5CMenu8CreaItemEPciiiiiiib>:
CMenuItem* CMenu::CreaItem(char* texto, int identificador,int x, int y,int ancho, int alto,int colorFondo,int colorTexto,bool seleccionado)
{
 8004a70:	b590      	push	{r4, r7, lr}
 8004a72:	b08f      	sub	sp, #60	@ 0x3c
 8004a74:	af08      	add	r7, sp, #32
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
 8004a7c:	603b      	str	r3, [r7, #0]
	CEtiquetaTft* etiquetaTmp=new CEtiquetaTft(x, y, ancho, alto, colorFondo,texto, colorTexto, 3, 0, ColorFondo);
 8004a7e:	20a4      	movs	r0, #164	@ 0xa4
 8004a80:	f00d f806 	bl	8011a90 <_Znwj>
 8004a84:	4603      	mov	r3, r0
 8004a86:	461c      	mov	r4, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8c:	9306      	str	r3, [sp, #24]
 8004a8e:	2300      	movs	r3, #0
 8004a90:	9305      	str	r3, [sp, #20]
 8004a92:	2303      	movs	r3, #3
 8004a94:	9304      	str	r3, [sp, #16]
 8004a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a98:	9303      	str	r3, [sp, #12]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	9302      	str	r3, [sp, #8]
 8004a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aa0:	9301      	str	r3, [sp, #4]
 8004aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aa8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004aaa:	6839      	ldr	r1, [r7, #0]
 8004aac:	4620      	mov	r0, r4
 8004aae:	f7fe fa0b 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004ab2:	617c      	str	r4, [r7, #20]
	CMenuItem* tmp=new CMenuItem(etiquetaTmp,identificador,seleccionado);
 8004ab4:	2028      	movs	r0, #40	@ 0x28
 8004ab6:	f00c ffeb 	bl	8011a90 <_Znwj>
 8004aba:	4603      	mov	r3, r0
 8004abc:	461c      	mov	r4, r3
 8004abe:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	6979      	ldr	r1, [r7, #20]
 8004ac6:	4620      	mov	r0, r4
 8004ac8:	f000 f832 	bl	8004b30 <_ZN9CMenuItemC1EP12CEtiquetaTftib>
 8004acc:	613c      	str	r4, [r7, #16]
	tmp->AsignaColores(colorTexto, colorFondo, ColoTextoSeleccionado, ColorFondoSeleccionado);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004adc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004ade:	6938      	ldr	r0, [r7, #16]
 8004ae0:	f000 f8c6 	bl	8004c70 <_ZN9CMenuItem13AsignaColoresEiiii>
	return tmp;
 8004ae4:	693b      	ldr	r3, [r7, #16]

}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	371c      	adds	r7, #28
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd90      	pop	{r4, r7, pc}

08004aee <_ZN5CMenu12BorrarItemnsEv>:

void CMenu::BorrarItemns()
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b084      	sub	sp, #16
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]

	CMenuItem *tmp=Opciones;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004afa:	60fb      	str	r3, [r7, #12]
	CMenuItem *tmp2;
	while(tmp!=NULL)
 8004afc:	e00d      	b.n	8004b1a <_ZN5CMenu12BorrarItemnsEv+0x2c>
	{
		tmp2=tmp->DameSiguiente();
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f000 f90e 	bl	8004d20 <_ZN9CMenuItem13DameSiguienteEv>
 8004b04:	60b8      	str	r0, [r7, #8]
		delete tmp;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d004      	beq.n	8004b16 <_ZN5CMenu12BorrarItemnsEv+0x28>
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	3204      	adds	r2, #4
 8004b10:	6812      	ldr	r2, [r2, #0]
 8004b12:	4618      	mov	r0, r3
 8004b14:	4790      	blx	r2
		tmp=tmp2;
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	60fb      	str	r3, [r7, #12]
	while(tmp!=NULL)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1ee      	bne.n	8004afe <_ZN5CMenu12BorrarItemnsEv+0x10>
	}
	Opciones=NULL;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004b26:	bf00      	nop
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
	...

08004b30 <_ZN9CMenuItemC1EP12CEtiquetaTftib>:
 *      Author: W10
 */

#include <GUI/Menu/CMenuItem.hpp>

CMenuItem::CMenuItem(CEtiquetaTft* etiqueta,int identificador,bool seleccionado)
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
 8004b3c:	70fb      	strb	r3, [r7, #3]
 8004b3e:	4a0d      	ldr	r2, [pc, #52]	@ (8004b74 <_ZN9CMenuItemC1EP12CEtiquetaTftib+0x44>)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub
	Etiqueta=etiqueta;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	605a      	str	r2, [r3, #4]
	Siguiente=NULL;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	609a      	str	r2, [r3, #8]
	Anterior=NULL;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	60da      	str	r2, [r3, #12]
	Identificador=identificador;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	611a      	str	r2, [r3, #16]
	Seleccionado=seleccionado;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	78fa      	ldrb	r2, [r7, #3]
 8004b60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4618      	mov	r0, r3
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	0801517c 	.word	0x0801517c

08004b78 <_ZN9CMenuItemD1Ev>:

CMenuItem::~CMenuItem()
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	4a0a      	ldr	r2, [pc, #40]	@ (8004bac <_ZN9CMenuItemD1Ev+0x34>)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	601a      	str	r2, [r3, #0]
{
	if(Etiqueta!=NULL)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d008      	beq.n	8004ba0 <_ZN9CMenuItemD1Ev+0x28>
		delete Etiqueta;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d004      	beq.n	8004ba0 <_ZN9CMenuItemD1Ev+0x28>
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	3204      	adds	r2, #4
 8004b9a:	6812      	ldr	r2, [r2, #0]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	4790      	blx	r2
	// TODO Auto-generated destructor stub
}
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3708      	adds	r7, #8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	0801517c 	.word	0x0801517c

08004bb0 <_ZN9CMenuItemD0Ev>:
CMenuItem::~CMenuItem()
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
}
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7ff ffdd 	bl	8004b78 <_ZN9CMenuItemD1Ev>
 8004bbe:	2128      	movs	r1, #40	@ 0x28
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f00c ff63 	bl	8011a8c <_ZdlPvj>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3708      	adds	r7, #8
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <_ZN9CMenuItem13AgregaAlFinalEPS_>:

void CMenuItem::AgregaAlFinal(CMenuItem* siguiente)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
	if(Siguiente==NULL)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d106      	bne.n	8004bf0 <_ZN9CMenuItem13AgregaAlFinalEPS_+0x20>
	{
		Siguiente=siguiente;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	609a      	str	r2, [r3, #8]
		siguiente->Anterior=this;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	60da      	str	r2, [r3, #12]
		return;
 8004bee:	e005      	b.n	8004bfc <_ZN9CMenuItem13AgregaAlFinalEPS_+0x2c>
	}
	Siguiente->AgregaAlFinal(siguiente);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	6839      	ldr	r1, [r7, #0]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7ff ffea 	bl	8004bd0 <_ZN9CMenuItem13AgregaAlFinalEPS_>
}
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <_ZN9CMenuItem4ShowEv>:

void CMenuItem::Show()
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b082      	sub	sp, #8
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
	if(Seleccionado)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d010      	beq.n	8004c36 <_ZN9CMenuItem4ShowEv+0x34>
	{
		Etiqueta->SetColorTexto(ColoTextoSeleccionado);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4610      	mov	r0, r2
 8004c20:	f7fe faf0 	bl	8003204 <_ZN12CEtiquetaTft13SetColorTextoEi>
		Etiqueta->SetBackColor(ColorFondoSeleccionado);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	4610      	mov	r0, r2
 8004c30:	f7fe fb34 	bl	800329c <_ZN12CEtiquetaTft12SetBackColorEi>
 8004c34:	e00f      	b.n	8004c56 <_ZN9CMenuItem4ShowEv+0x54>
	}
	else
	{
		Etiqueta->SetColorTexto(ColorTexto);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	4619      	mov	r1, r3
 8004c40:	4610      	mov	r0, r2
 8004c42:	f7fe fadf 	bl	8003204 <_ZN12CEtiquetaTft13SetColorTextoEi>
		Etiqueta->SetBackColor(ColorFondo);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	4619      	mov	r1, r3
 8004c50:	4610      	mov	r0, r2
 8004c52:	f7fe fb23 	bl	800329c <_ZN12CEtiquetaTft12SetBackColorEi>
	}
	Etiqueta->Show();
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	334c      	adds	r3, #76	@ 0x4c
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4610      	mov	r0, r2
 8004c66:	4798      	blx	r3
}
 8004c68:	bf00      	nop
 8004c6a:	3708      	adds	r7, #8
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <_ZN9CMenuItem13AsignaColoresEiiii>:
void CMenuItem::AsignaColores(int colorTexto, int colorFondo, int colorTextoResaltado, int solorFondoResaltado)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
 8004c7c:	603b      	str	r3, [r7, #0]
	ColorTexto=colorTexto;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	615a      	str	r2, [r3, #20]
	ColorFondo=colorFondo;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	619a      	str	r2, [r3, #24]
	ColoTextoSeleccionado=colorTextoResaltado;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	61da      	str	r2, [r3, #28]
	ColorFondoSeleccionado=solorFondoResaltado;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	621a      	str	r2, [r3, #32]
}
 8004c96:	bf00      	nop
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <_ZN9CMenuItem10SeleccionaEb>:
void CMenuItem::Selecciona(bool valor)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b083      	sub	sp, #12
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
 8004caa:	460b      	mov	r3, r1
 8004cac:	70fb      	strb	r3, [r7, #3]
	Seleccionado=valor;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	78fa      	ldrb	r2, [r7, #3]
 8004cb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8004cb6:	bf00      	nop
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <_ZN9CMenuItem16CalculaPosicionYEi>:

void CMenuItem::CalculaPosicionY(int posicion)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b084      	sub	sp, #16
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
 8004cca:	6039      	str	r1, [r7, #0]
	int x=Etiqueta->DamePosicionX();
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7fe fd39 	bl	8003748 <_ZN14CRectanguloTft13DamePosicionXEv>
 8004cd6:	60f8      	str	r0, [r7, #12]
	Etiqueta->CambiaPosicion(x, posicion);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	3350      	adds	r3, #80	@ 0x50
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	68f9      	ldr	r1, [r7, #12]
 8004cec:	4798      	blx	r3
	if(Siguiente==NULL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d010      	beq.n	8004d18 <_ZN9CMenuItem16CalculaPosicionYEi+0x56>
		return;
	int y=Etiqueta->DameAlto()+posicion+5;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fe fd3c 	bl	8003778 <_ZN14CRectanguloTft8DameAltoEv>
 8004d00:	4602      	mov	r2, r0
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	4413      	add	r3, r2
 8004d06:	3305      	adds	r3, #5
 8004d08:	60bb      	str	r3, [r7, #8]
	Siguiente->CalculaPosicionY(y);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	68b9      	ldr	r1, [r7, #8]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7ff ffd6 	bl	8004cc2 <_ZN9CMenuItem16CalculaPosicionYEi>
 8004d16:	e000      	b.n	8004d1a <_ZN9CMenuItem16CalculaPosicionYEi+0x58>
		return;
 8004d18:	bf00      	nop
}
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <_ZN9CMenuItem13DameSiguienteEv>:
CMenuItem* CMenuItem::DameSiguiente()
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
	return Siguiente;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <_ZN9CMenuItem13DamePosicionYEv>:
int CMenuItem::DamePosicionY()
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
	return Etiqueta->DamePosicionY();
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7fe fd0b 	bl	8003760 <_ZN14CRectanguloTft13DamePosicionYEv>
 8004d4a:	4603      	mov	r3, r0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <_ZN9CMenuItem10DameAlturaEv>:
int CMenuItem::DameAltura()
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
	return Etiqueta->DameAlto();
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7fe fd09 	bl	8003778 <_ZN14CRectanguloTft8DameAltoEv>
 8004d66:	4603      	mov	r3, r0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <_ZN9CMenuItem16EstaSeleccionadoEv>:
bool CMenuItem::EstaSeleccionado()
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
	return Seleccionado;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <_ZN9CMenuItem12DameAnteriorEv>:
CMenuItem* CMenuItem::DameAnterior()
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b083      	sub	sp, #12
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
	return Anterior;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68db      	ldr	r3, [r3, #12]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <_ZN9CMenuItem17DameIdentificadorEv>:
void CMenuItem::AsignaAnterior(CMenuItem* anterior)
{
	Anterior=anterior;
}
int CMenuItem::DameIdentificador()
{
 8004da2:	b480      	push	{r7}
 8004da4:	b083      	sub	sp, #12
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
	return Identificador;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	691b      	ldr	r3, [r3, #16]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
	...

08004dbc <_ZN20CPantallaCalibracionC1Ev>:
#include "stm32f4xx_hal_conf.h"
#include <EPROM/CEprom.hpp>

extern I2C_HandleTypeDef hi2c1;

CPantallaCalibracion::CPantallaCalibracion():
 8004dbc:	b590      	push	{r4, r7, lr}
 8004dbe:	b08b      	sub	sp, #44	@ 0x2c
 8004dc0:	af08      	add	r7, sp, #32
 8004dc2:	6078      	str	r0, [r7, #4]
CPantallaBase(1, (char*)"   Modo: Calibrar")
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a9d      	ldr	r2, [pc, #628]	@ (800503c <_ZN20CPantallaCalibracionC1Ev+0x280>)
 8004dc8:	2101      	movs	r1, #1
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fe fac8 	bl	8003360 <_ZN13CPantallaBaseC1EiPc>
 8004dd0:	4a9b      	ldr	r2, [pc, #620]	@ (8005040 <_ZN20CPantallaCalibracionC1Ev+0x284>)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	4a9b      	ldr	r2, [pc, #620]	@ (8005044 <_ZN20CPantallaCalibracionC1Ev+0x288>)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
{
	TemperaturaODiferencia=true;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
	Diferencia=0;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	Temperatura=0;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	DiferenciaAnterior=0;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	// TODO Auto-generated constructor stub
	LabelTemperatura=new CEtiquetaTft( 5, 40, 50, 20, COLOR::BLACK,(char*)"temp: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8004e04:	20a4      	movs	r0, #164	@ 0xa4
 8004e06:	f00c fe43 	bl	8011a90 <_Znwj>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	461c      	mov	r4, r3
 8004e0e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004e12:	9306      	str	r3, [sp, #24]
 8004e14:	2300      	movs	r3, #0
 8004e16:	9305      	str	r3, [sp, #20]
 8004e18:	2303      	movs	r3, #3
 8004e1a:	9304      	str	r3, [sp, #16]
 8004e1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004e20:	9303      	str	r3, [sp, #12]
 8004e22:	4b89      	ldr	r3, [pc, #548]	@ (8005048 <_ZN20CPantallaCalibracionC1Ev+0x28c>)
 8004e24:	9302      	str	r3, [sp, #8]
 8004e26:	2300      	movs	r3, #0
 8004e28:	9301      	str	r3, [sp, #4]
 8004e2a:	2314      	movs	r3, #20
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	2332      	movs	r3, #50	@ 0x32
 8004e30:	2228      	movs	r2, #40	@ 0x28
 8004e32:	2105      	movs	r1, #5
 8004e34:	4620      	mov	r0, r4
 8004e36:	f7fe f847 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f8c3 40b4 	str.w	r4, [r3, #180]	@ 0xb4
	TextTemperatura = new CEtiquetaTft( 95, 40, 150, 30,COLOR::WHITE, (char*)"000", COLOR::BLACK, 3, 1, COLOR::RED);
 8004e40:	20a4      	movs	r0, #164	@ 0xa4
 8004e42:	f00c fe25 	bl	8011a90 <_Znwj>
 8004e46:	4603      	mov	r3, r0
 8004e48:	461c      	mov	r4, r3
 8004e4a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004e4e:	9306      	str	r3, [sp, #24]
 8004e50:	2301      	movs	r3, #1
 8004e52:	9305      	str	r3, [sp, #20]
 8004e54:	2303      	movs	r3, #3
 8004e56:	9304      	str	r3, [sp, #16]
 8004e58:	2300      	movs	r3, #0
 8004e5a:	9303      	str	r3, [sp, #12]
 8004e5c:	4b7b      	ldr	r3, [pc, #492]	@ (800504c <_ZN20CPantallaCalibracionC1Ev+0x290>)
 8004e5e:	9302      	str	r3, [sp, #8]
 8004e60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004e64:	9301      	str	r3, [sp, #4]
 8004e66:	231e      	movs	r3, #30
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	2396      	movs	r3, #150	@ 0x96
 8004e6c:	2228      	movs	r2, #40	@ 0x28
 8004e6e:	215f      	movs	r1, #95	@ 0x5f
 8004e70:	4620      	mov	r0, r4
 8004e72:	f7fe f829 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f8c3 40b8 	str.w	r4, [r3, #184]	@ 0xb8

	LabelDiferencia=new CEtiquetaTft( 5, 80, 50, 20, COLOR::BLACK,(char*)"Dif: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8004e7c:	20a4      	movs	r0, #164	@ 0xa4
 8004e7e:	f00c fe07 	bl	8011a90 <_Znwj>
 8004e82:	4603      	mov	r3, r0
 8004e84:	461c      	mov	r4, r3
 8004e86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004e8a:	9306      	str	r3, [sp, #24]
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	9305      	str	r3, [sp, #20]
 8004e90:	2303      	movs	r3, #3
 8004e92:	9304      	str	r3, [sp, #16]
 8004e94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004e98:	9303      	str	r3, [sp, #12]
 8004e9a:	4b6d      	ldr	r3, [pc, #436]	@ (8005050 <_ZN20CPantallaCalibracionC1Ev+0x294>)
 8004e9c:	9302      	str	r3, [sp, #8]
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	9301      	str	r3, [sp, #4]
 8004ea2:	2314      	movs	r3, #20
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	2332      	movs	r3, #50	@ 0x32
 8004ea8:	2250      	movs	r2, #80	@ 0x50
 8004eaa:	2105      	movs	r1, #5
 8004eac:	4620      	mov	r0, r4
 8004eae:	f7fe f80b 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f8c3 40c0 	str.w	r4, [r3, #192]	@ 0xc0
	TextDiferencia = new CEtiquetaTft( 95, 80, 150, 30,COLOR::GREY, (char*)"000", COLOR::BLACK, 3, 1, COLOR::RED);
 8004eb8:	20a4      	movs	r0, #164	@ 0xa4
 8004eba:	f00c fde9 	bl	8011a90 <_Znwj>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	461c      	mov	r4, r3
 8004ec2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004ec6:	9306      	str	r3, [sp, #24]
 8004ec8:	2301      	movs	r3, #1
 8004eca:	9305      	str	r3, [sp, #20]
 8004ecc:	2303      	movs	r3, #3
 8004ece:	9304      	str	r3, [sp, #16]
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	9303      	str	r3, [sp, #12]
 8004ed4:	4b5d      	ldr	r3, [pc, #372]	@ (800504c <_ZN20CPantallaCalibracionC1Ev+0x290>)
 8004ed6:	9302      	str	r3, [sp, #8]
 8004ed8:	f64d 63de 	movw	r3, #57054	@ 0xdede
 8004edc:	9301      	str	r3, [sp, #4]
 8004ede:	231e      	movs	r3, #30
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	2396      	movs	r3, #150	@ 0x96
 8004ee4:	2250      	movs	r2, #80	@ 0x50
 8004ee6:	215f      	movs	r1, #95	@ 0x5f
 8004ee8:	4620      	mov	r0, r4
 8004eea:	f7fd ffed 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f8c3 40c4 	str.w	r4, [r3, #196]	@ 0xc4
	TextDiferencia->SetSeparacion(5, 5);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004efa:	2205      	movs	r2, #5
 8004efc:	2105      	movs	r1, #5
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fe f96c 	bl	80031dc <_ZN12CEtiquetaTft13SetSeparacionEii>

	LabelTemperatura2=new CEtiquetaTft( 5, 120, 50, 20, COLOR::BLACK,(char*)"temp: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8004f04:	20a4      	movs	r0, #164	@ 0xa4
 8004f06:	f00c fdc3 	bl	8011a90 <_Znwj>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	461c      	mov	r4, r3
 8004f0e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004f12:	9306      	str	r3, [sp, #24]
 8004f14:	2300      	movs	r3, #0
 8004f16:	9305      	str	r3, [sp, #20]
 8004f18:	2303      	movs	r3, #3
 8004f1a:	9304      	str	r3, [sp, #16]
 8004f1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004f20:	9303      	str	r3, [sp, #12]
 8004f22:	4b49      	ldr	r3, [pc, #292]	@ (8005048 <_ZN20CPantallaCalibracionC1Ev+0x28c>)
 8004f24:	9302      	str	r3, [sp, #8]
 8004f26:	2300      	movs	r3, #0
 8004f28:	9301      	str	r3, [sp, #4]
 8004f2a:	2314      	movs	r3, #20
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	2332      	movs	r3, #50	@ 0x32
 8004f30:	2278      	movs	r2, #120	@ 0x78
 8004f32:	2105      	movs	r1, #5
 8004f34:	4620      	mov	r0, r4
 8004f36:	f7fd ffc7 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f8c3 40c8 	str.w	r4, [r3, #200]	@ 0xc8
	TextTemperatura2 = new CEtiquetaTft( 95, 120, 150, 30,COLOR::GREY, (char*)"000", COLOR::BLACK, 3, 1, COLOR::RED);
 8004f40:	20a4      	movs	r0, #164	@ 0xa4
 8004f42:	f00c fda5 	bl	8011a90 <_Znwj>
 8004f46:	4603      	mov	r3, r0
 8004f48:	461c      	mov	r4, r3
 8004f4a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004f4e:	9306      	str	r3, [sp, #24]
 8004f50:	2301      	movs	r3, #1
 8004f52:	9305      	str	r3, [sp, #20]
 8004f54:	2303      	movs	r3, #3
 8004f56:	9304      	str	r3, [sp, #16]
 8004f58:	2300      	movs	r3, #0
 8004f5a:	9303      	str	r3, [sp, #12]
 8004f5c:	4b3b      	ldr	r3, [pc, #236]	@ (800504c <_ZN20CPantallaCalibracionC1Ev+0x290>)
 8004f5e:	9302      	str	r3, [sp, #8]
 8004f60:	f64d 63de 	movw	r3, #57054	@ 0xdede
 8004f64:	9301      	str	r3, [sp, #4]
 8004f66:	231e      	movs	r3, #30
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	2396      	movs	r3, #150	@ 0x96
 8004f6c:	2278      	movs	r2, #120	@ 0x78
 8004f6e:	215f      	movs	r1, #95	@ 0x5f
 8004f70:	4620      	mov	r0, r4
 8004f72:	f7fd ffa9 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f8c3 40cc 	str.w	r4, [r3, #204]	@ 0xcc

	LabelAire = new CEtiquetaTft( 5, 160, 200, 30, COLOR::BLACK,(char*) "Aire: 00",COLOR::WHITE, 3, 0, COLOR::RED);
 8004f7c:	20a4      	movs	r0, #164	@ 0xa4
 8004f7e:	f00c fd87 	bl	8011a90 <_Znwj>
 8004f82:	4603      	mov	r3, r0
 8004f84:	461c      	mov	r4, r3
 8004f86:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004f8a:	9306      	str	r3, [sp, #24]
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	9305      	str	r3, [sp, #20]
 8004f90:	2303      	movs	r3, #3
 8004f92:	9304      	str	r3, [sp, #16]
 8004f94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004f98:	9303      	str	r3, [sp, #12]
 8004f9a:	4b2e      	ldr	r3, [pc, #184]	@ (8005054 <_ZN20CPantallaCalibracionC1Ev+0x298>)
 8004f9c:	9302      	str	r3, [sp, #8]
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	9301      	str	r3, [sp, #4]
 8004fa2:	231e      	movs	r3, #30
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	23c8      	movs	r3, #200	@ 0xc8
 8004fa8:	22a0      	movs	r2, #160	@ 0xa0
 8004faa:	2105      	movs	r1, #5
 8004fac:	4620      	mov	r0, r4
 8004fae:	f7fd ff8b 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f8c3 40bc 	str.w	r4, [r3, #188]	@ 0xbc

	LabelGuardar=new CEtiquetaTft( 10, 200, 130, 30, COLOR::GREEN,(char*)"GUARDAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 8004fb8:	20a4      	movs	r0, #164	@ 0xa4
 8004fba:	f00c fd69 	bl	8011a90 <_Znwj>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	461c      	mov	r4, r3
 8004fc2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004fc6:	9306      	str	r3, [sp, #24]
 8004fc8:	2301      	movs	r3, #1
 8004fca:	9305      	str	r3, [sp, #20]
 8004fcc:	2303      	movs	r3, #3
 8004fce:	9304      	str	r3, [sp, #16]
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	9303      	str	r3, [sp, #12]
 8004fd4:	4b20      	ldr	r3, [pc, #128]	@ (8005058 <_ZN20CPantallaCalibracionC1Ev+0x29c>)
 8004fd6:	9302      	str	r3, [sp, #8]
 8004fd8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004fdc:	9301      	str	r3, [sp, #4]
 8004fde:	231e      	movs	r3, #30
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	2382      	movs	r3, #130	@ 0x82
 8004fe4:	22c8      	movs	r2, #200	@ 0xc8
 8004fe6:	210a      	movs	r1, #10
 8004fe8:	4620      	mov	r0, r4
 8004fea:	f7fd ff6d 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8c3 40ac 	str.w	r4, [r3, #172]	@ 0xac
	LabelCancelar=new CEtiquetaTft( 160, 200, 145, 30, COLOR::RED,(char*)"CANCELAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 8004ff4:	20a4      	movs	r0, #164	@ 0xa4
 8004ff6:	f00c fd4b 	bl	8011a90 <_Znwj>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	461c      	mov	r4, r3
 8004ffe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005002:	9306      	str	r3, [sp, #24]
 8005004:	2301      	movs	r3, #1
 8005006:	9305      	str	r3, [sp, #20]
 8005008:	2303      	movs	r3, #3
 800500a:	9304      	str	r3, [sp, #16]
 800500c:	2300      	movs	r3, #0
 800500e:	9303      	str	r3, [sp, #12]
 8005010:	4b12      	ldr	r3, [pc, #72]	@ (800505c <_ZN20CPantallaCalibracionC1Ev+0x2a0>)
 8005012:	9302      	str	r3, [sp, #8]
 8005014:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005018:	9301      	str	r3, [sp, #4]
 800501a:	231e      	movs	r3, #30
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	2391      	movs	r3, #145	@ 0x91
 8005020:	22c8      	movs	r2, #200	@ 0xc8
 8005022:	21a0      	movs	r1, #160	@ 0xa0
 8005024:	4620      	mov	r0, r4
 8005026:	f7fd ff4f 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f8c3 40b0 	str.w	r4, [r3, #176]	@ 0xb0
}
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4618      	mov	r0, r3
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	bd90      	pop	{r4, r7, pc}
 800503a:	bf00      	nop
 800503c:	08014818 	.word	0x08014818
 8005040:	0801518c 	.word	0x0801518c
 8005044:	08015224 	.word	0x08015224
 8005048:	0801482c 	.word	0x0801482c
 800504c:	08014834 	.word	0x08014834
 8005050:	08014838 	.word	0x08014838
 8005054:	08014840 	.word	0x08014840
 8005058:	0801484c 	.word	0x0801484c
 800505c:	08014854 	.word	0x08014854

08005060 <_ZN20CPantallaCalibracionD1Ev>:

CPantallaCalibracion::~CPantallaCalibracion()
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	4a07      	ldr	r2, [pc, #28]	@ (8005088 <_ZN20CPantallaCalibracionD1Ev+0x28>)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	601a      	str	r2, [r3, #0]
 800506e:	4a07      	ldr	r2, [pc, #28]	@ (800508c <_ZN20CPantallaCalibracionD1Ev+0x2c>)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4618      	mov	r0, r3
 8005078:	f7fe f93e 	bl	80032f8 <_ZN13CPantallaBaseD1Ev>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4618      	mov	r0, r3
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	0801518c 	.word	0x0801518c
 800508c:	08015224 	.word	0x08015224

08005090 <_ZThn48_N20CPantallaCalibracionD1Ev>:

	void MuestraInformacion();
	void LeeMemoria();
public:
	CPantallaCalibracion();
	virtual ~CPantallaCalibracion();
 8005090:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005094:	f7ff bfe4 	b.w	8005060 <_ZN20CPantallaCalibracionD1Ev>

08005098 <_ZN20CPantallaCalibracionD0Ev>:
CPantallaCalibracion::~CPantallaCalibracion()
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
}
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f7ff ffdd 	bl	8005060 <_ZN20CPantallaCalibracionD1Ev>
 80050a6:	21ec      	movs	r1, #236	@ 0xec
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f00c fcef 	bl	8011a8c <_ZdlPvj>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4618      	mov	r0, r3
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <_ZThn48_N20CPantallaCalibracionD0Ev>:
 80050b8:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80050bc:	f7ff bfec 	b.w	8005098 <_ZN20CPantallaCalibracionD0Ev>

080050c0 <_ZN20CPantallaCalibracion4ShowEv>:

 void CPantallaCalibracion::Show()
 {
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
		LeeMemoria();
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 fa59 	bl	8005580 <_ZN20CPantallaCalibracion10LeeMemoriaEv>
	 	CPantallaBase::Show();
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7fe f9b7 	bl	8003444 <_ZN13CPantallaBase4ShowEv>
	 	LabelTemperatura->Show();
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	334c      	adds	r3, #76	@ 0x4c
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4610      	mov	r0, r2
 80050ea:	4798      	blx	r3
		LabelGuardar->Show();
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	334c      	adds	r3, #76	@ 0x4c
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4610      	mov	r0, r2
 8005100:	4798      	blx	r3
		LabelCancelar->Show();
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	334c      	adds	r3, #76	@ 0x4c
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4610      	mov	r0, r2
 8005116:	4798      	blx	r3
		LabelAire->Show();
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	334c      	adds	r3, #76	@ 0x4c
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4610      	mov	r0, r2
 800512c:	4798      	blx	r3
		TextTemperatura->Show();
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	334c      	adds	r3, #76	@ 0x4c
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4610      	mov	r0, r2
 8005142:	4798      	blx	r3
		LabelDiferencia->Show();
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	334c      	adds	r3, #76	@ 0x4c
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4610      	mov	r0, r2
 8005158:	4798      	blx	r3
		TextDiferencia->Show();
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	334c      	adds	r3, #76	@ 0x4c
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4610      	mov	r0, r2
 800516e:	4798      	blx	r3
	 	LabelTemperatura2->Show();
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	334c      	adds	r3, #76	@ 0x4c
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4610      	mov	r0, r2
 8005184:	4798      	blx	r3
		TextTemperatura2->Show();
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	334c      	adds	r3, #76	@ 0x4c
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4610      	mov	r0, r2
 800519a:	4798      	blx	r3
		MuestraInformacion();
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 f821 	bl	80051e4 <_ZN20CPantallaCalibracion18MuestraInformacionEv>
 }
 80051a2:	bf00      	nop
 80051a4:	3708      	adds	r7, #8
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <_ZN20CPantallaCalibracion8RefrescaEv>:
void CPantallaCalibracion::Refresca()
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b082      	sub	sp, #8
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
	MuestraInformacion();
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f816 	bl	80051e4 <_ZN20CPantallaCalibracion18MuestraInformacionEv>
}
 80051b8:	bf00      	nop
 80051ba:	3708      	adds	r7, #8
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <_ZN20CPantallaCalibracion21OnBotonTresClickEventEv>:
void CPantallaCalibracion::OnBotonTresClickEvent()
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
	 ManejadorPantallas.MuestraMenuPrincipal();
 80051c8:	4803      	ldr	r0, [pc, #12]	@ (80051d8 <_ZN20CPantallaCalibracion21OnBotonTresClickEventEv+0x18>)
 80051ca:	f7fe fe35 	bl	8003e38 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>

}
 80051ce:	bf00      	nop
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	20000258 	.word	0x20000258

080051dc <_ZThn48_N20CPantallaCalibracion21OnBotonTresClickEventEv>:
	virtual void Show();
	virtual void Refresca();
	virtual void OnBotonTresClickEvent();
 80051dc:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80051e0:	f7ff bfee 	b.w	80051c0 <_ZN20CPantallaCalibracion21OnBotonTresClickEventEv>

080051e4 <_ZN20CPantallaCalibracion18MuestraInformacionEv>:
void CPantallaCalibracion::MuestraInformacion()
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
	LeeDatosEstacion();
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3388      	adds	r3, #136	@ 0x88
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	4798      	blx	r3

	if(TemperaturaAnterior!=Temperatura)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8005204:	429a      	cmp	r2, r3
 8005206:	d01a      	beq.n	800523e <_ZN20CPantallaCalibracion18MuestraInformacionEv+0x5a>
	{
		TextTemperatura->SetTexto((char*)"%d", Temperatura);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8005214:	461a      	mov	r2, r3
 8005216:	492f      	ldr	r1, [pc, #188]	@ (80052d4 <_ZN20CPantallaCalibracion18MuestraInformacionEv+0xf0>)
 8005218:	f7fd fe90 	bl	8002f3c <_ZN12CEtiquetaTft8SetTextoEPcz>
		TextTemperatura->Show();
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	334c      	adds	r3, #76	@ 0x4c
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4610      	mov	r0, r2
 8005230:	4798      	blx	r3
		TemperaturaAnterior=Temperatura;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
	}

	if(DiferenciaAnterior!=Diferencia)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800524a:	429a      	cmp	r2, r3
 800524c:	d01a      	beq.n	8005284 <_ZN20CPantallaCalibracion18MuestraInformacionEv+0xa0>
	{
		DiferenciaAnterior=Diferencia;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
		TextDiferencia->SetTexto((char*)"%d",Diferencia);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005266:	461a      	mov	r2, r3
 8005268:	491a      	ldr	r1, [pc, #104]	@ (80052d4 <_ZN20CPantallaCalibracion18MuestraInformacionEv+0xf0>)
 800526a:	f7fd fe67 	bl	8002f3c <_ZN12CEtiquetaTft8SetTextoEPcz>
		TextDiferencia->Show();
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	334c      	adds	r3, #76	@ 0x4c
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4610      	mov	r0, r2
 8005282:	4798      	blx	r3
	}

	if( VelocidadAireAnterior!=VelocidadAire)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005290:	429a      	cmp	r2, r3
 8005292:	d01a      	beq.n	80052ca <_ZN20CPantallaCalibracion18MuestraInformacionEv+0xe6>
	{
		LabelAire->SetTexto((char*)"Aire: %d", VelocidadAire);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80052a0:	461a      	mov	r2, r3
 80052a2:	490d      	ldr	r1, [pc, #52]	@ (80052d8 <_ZN20CPantallaCalibracion18MuestraInformacionEv+0xf4>)
 80052a4:	f7fd fe4a 	bl	8002f3c <_ZN12CEtiquetaTft8SetTextoEPcz>
		LabelAire->Show();
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	334c      	adds	r3, #76	@ 0x4c
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4610      	mov	r0, r2
 80052bc:	4798      	blx	r3
		VelocidadAireAnterior=VelocidadAire;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
	}
}
 80052ca:	bf00      	nop
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	08014860 	.word	0x08014860
 80052d8:	08014864 	.word	0x08014864

080052dc <_ZN20CPantallaCalibracion24OnBotonPerillaClickEventEv>:
void CPantallaCalibracion::OnBotonPerillaClickEvent()
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
	TemperaturaODiferencia=!TemperaturaODiferencia;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 80052ea:	f083 0301 	eor.w	r3, r3, #1
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
	if(TemperaturaODiferencia==true)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d110      	bne.n	8005322 <_ZN20CPantallaCalibracion24OnBotonPerillaClickEventEv+0x46>
	{
		TextTemperatura->SetBackColor(COLOR::WHITE);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005306:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800530a:	4618      	mov	r0, r3
 800530c:	f7fd ffc6 	bl	800329c <_ZN12CEtiquetaTft12SetBackColorEi>
		TextDiferencia->SetBackColor(COLOR::GREY);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005316:	f64d 61de 	movw	r1, #57054	@ 0xdede
 800531a:	4618      	mov	r0, r3
 800531c:	f7fd ffbe 	bl	800329c <_ZN12CEtiquetaTft12SetBackColorEi>
 8005320:	e00f      	b.n	8005342 <_ZN20CPantallaCalibracion24OnBotonPerillaClickEventEv+0x66>
	}
	else
	{
		TextTemperatura->SetBackColor(COLOR::GREY);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005328:	f64d 61de 	movw	r1, #57054	@ 0xdede
 800532c:	4618      	mov	r0, r3
 800532e:	f7fd ffb5 	bl	800329c <_ZN12CEtiquetaTft12SetBackColorEi>
		TextDiferencia->SetBackColor(COLOR::WHITE);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005338:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800533c:	4618      	mov	r0, r3
 800533e:	f7fd ffad 	bl	800329c <_ZN12CEtiquetaTft12SetBackColorEi>
	}
	TextTemperatura->Show();
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	334c      	adds	r3, #76	@ 0x4c
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4610      	mov	r0, r2
 8005356:	4798      	blx	r3
	TextDiferencia->Show();
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	334c      	adds	r3, #76	@ 0x4c
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4610      	mov	r0, r2
 800536c:	4798      	blx	r3
}
 800536e:	bf00      	nop
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <_ZThn48_N20CPantallaCalibracion24OnBotonPerillaClickEventEv>:
	virtual void OnPerillaIncremento();
	virtual void OnPerillaDecremento();
	virtual void OnBotonPerillaClickEvent();
 8005376:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800537a:	f7ff bfaf 	b.w	80052dc <_ZN20CPantallaCalibracion24OnBotonPerillaClickEventEv>
	...

08005380 <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv>:

void CPantallaCalibracion::OnPerillaIncremento()
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
	if(TemperaturaODiferencia==true)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 800538e:	2b01      	cmp	r3, #1
 8005390:	d122      	bne.n	80053d8 <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv+0x58>
	{
		if(Temperatura<=500)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8005398:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800539c:	dc06      	bgt.n	80053ac <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv+0x2c>
			Temperatura++;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80053a4:	1c5a      	adds	r2, r3, #1
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
		TextTemperatura->SetTexto((char*)"%d",Temperatura);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80053b8:	461a      	mov	r2, r3
 80053ba:	492e      	ldr	r1, [pc, #184]	@ (8005474 <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv+0xf4>)
 80053bc:	f7fd fdbe 	bl	8002f3c <_ZN12CEtiquetaTft8SetTextoEPcz>
		TextTemperatura->Show();
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	334c      	adds	r3, #76	@ 0x4c
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4610      	mov	r0, r2
 80053d4:	4798      	blx	r3
 80053d6:	e02f      	b.n	8005438 <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv+0xb8>
	}
	else
	{
		if(Diferencia>=500)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80053de:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80053e2:	da43      	bge.n	800546c <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv+0xec>
			return;
		Diferencia++;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80053ea:	1c5a      	adds	r2, r3, #1
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
		Estacion->SetTemperatura(Temperatura);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	330c      	adds	r3, #12
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	f8d2 20d0 	ldr.w	r2, [r2, #208]	@ 0xd0
 800540a:	4611      	mov	r1, r2
 800540c:	4798      	blx	r3
		TextDiferencia->SetTexto((char*)"%d",Diferencia);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800541a:	461a      	mov	r2, r3
 800541c:	4915      	ldr	r1, [pc, #84]	@ (8005474 <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv+0xf4>)
 800541e:	f7fd fd8d 	bl	8002f3c <_ZN12CEtiquetaTft8SetTextoEPcz>
		TextDiferencia->Show();
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	334c      	adds	r3, #76	@ 0x4c
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4610      	mov	r0, r2
 8005436:	4798      	blx	r3
	}
	TextTemperatura2->SetTexto((char*)"%d",Temperatura+Diferencia);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800544a:	4413      	add	r3, r2
 800544c:	461a      	mov	r2, r3
 800544e:	4909      	ldr	r1, [pc, #36]	@ (8005474 <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv+0xf4>)
 8005450:	f7fd fd74 	bl	8002f3c <_ZN12CEtiquetaTft8SetTextoEPcz>
	TextTemperatura2->Show();
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	334c      	adds	r3, #76	@ 0x4c
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4610      	mov	r0, r2
 8005468:	4798      	blx	r3
 800546a:	e000      	b.n	800546e <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv+0xee>
			return;
 800546c:	bf00      	nop
}
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	08014860 	.word	0x08014860

08005478 <_ZThn48_N20CPantallaCalibracion19OnPerillaIncrementoEv>:
	virtual void OnPerillaIncremento();
 8005478:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800547c:	f7ff bf80 	b.w	8005380 <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv>

08005480 <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv>:
void CPantallaCalibracion::OnPerillaDecremento()
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
	if(TemperaturaODiferencia==true)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 800548e:	2b01      	cmp	r3, #1
 8005490:	d12f      	bne.n	80054f2 <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv+0x72>
	{
		if(Temperatura<=0)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8005498:	2b00      	cmp	r3, #0
 800549a:	dd66      	ble.n	800556a <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv+0xea>
			return;
		Temperatura--;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80054a2:	1e5a      	subs	r2, r3, #1
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
		Estacion->SetTemperatura(Temperatura);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	330c      	adds	r3, #12
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	f8d2 20d0 	ldr.w	r2, [r2, #208]	@ 0xd0
 80054c2:	4611      	mov	r1, r2
 80054c4:	4798      	blx	r3
		TextTemperatura->SetTexto((char*)"%d",Temperatura);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80054d2:	461a      	mov	r2, r3
 80054d4:	4927      	ldr	r1, [pc, #156]	@ (8005574 <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv+0xf4>)
 80054d6:	f7fd fd31 	bl	8002f3c <_ZN12CEtiquetaTft8SetTextoEPcz>
		TextTemperatura->Show();
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	334c      	adds	r3, #76	@ 0x4c
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4610      	mov	r0, r2
 80054ee:	4798      	blx	r3
 80054f0:	e021      	b.n	8005536 <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv+0xb6>
	}
	else
	{
		if(Diferencia>-500)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80054f8:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 80054fc:	dd06      	ble.n	800550c <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv+0x8c>
			Diferencia--;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005504:	1e5a      	subs	r2, r3, #1
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
		TextDiferencia->SetTexto((char*)"%d",Diferencia);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005518:	461a      	mov	r2, r3
 800551a:	4916      	ldr	r1, [pc, #88]	@ (8005574 <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv+0xf4>)
 800551c:	f7fd fd0e 	bl	8002f3c <_ZN12CEtiquetaTft8SetTextoEPcz>
		TextDiferencia->Show();
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	334c      	adds	r3, #76	@ 0x4c
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4610      	mov	r0, r2
 8005534:	4798      	blx	r3
	}
	TextTemperatura2->SetTexto((char*)"%d",Temperatura+Diferencia);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005548:	4413      	add	r3, r2
 800554a:	461a      	mov	r2, r3
 800554c:	4909      	ldr	r1, [pc, #36]	@ (8005574 <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv+0xf4>)
 800554e:	f7fd fcf5 	bl	8002f3c <_ZN12CEtiquetaTft8SetTextoEPcz>
	TextTemperatura2->Show();
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	334c      	adds	r3, #76	@ 0x4c
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4610      	mov	r0, r2
 8005566:	4798      	blx	r3
 8005568:	e000      	b.n	800556c <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv+0xec>
			return;
 800556a:	bf00      	nop
}
 800556c:	3708      	adds	r7, #8
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	08014860 	.word	0x08014860

08005578 <_ZThn48_N20CPantallaCalibracion19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 8005578:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800557c:	f7ff bf80 	b.w	8005480 <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv>

08005580 <_ZN20CPantallaCalibracion10LeeMemoriaEv>:

void CPantallaCalibracion::LeeMemoria()
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
	Temperatura=Eprom.DameTemperaturaManual();
 8005588:	480f      	ldr	r0, [pc, #60]	@ (80055c8 <_ZN20CPantallaCalibracion10LeeMemoriaEv+0x48>)
 800558a:	f7fb ffcb 	bl	8001524 <_ZN6CEprom21DameTemperaturaManualEv>
 800558e:	4602      	mov	r2, r0
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	Diferencia=Eprom.DameAjusteTemperatura();
 8005596:	480c      	ldr	r0, [pc, #48]	@ (80055c8 <_ZN20CPantallaCalibracion10LeeMemoriaEv+0x48>)
 8005598:	f7fc f826 	bl	80015e8 <_ZN6CEprom21DameAjusteTemperaturaEv>
 800559c:	4602      	mov	r2, r0
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	Estacion->SetTemperatura(Temperatura);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	330c      	adds	r3, #12
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	f8d2 20d0 	ldr.w	r2, [r2, #208]	@ 0xd0
 80055bc:	4611      	mov	r1, r2
 80055be:	4798      	blx	r3
}
 80055c0:	bf00      	nop
 80055c2:	3708      	adds	r7, #8
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	20000318 	.word	0x20000318

080055cc <_ZN20CPantallaCalibracion16LeeDatosEstacionEv>:
void CPantallaCalibracion::LeeDatosEstacion()
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
	VelocidadAire = ManejadorControles->GetNivelAire();
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80055da:	4618      	mov	r0, r3
 80055dc:	f004 ff39 	bl	800a452 <_ZN19CManejadorControles12GetNivelAireEv>
 80055e0:	4602      	mov	r2, r0
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	Estacion->SetNivelAire(VelocidadAire);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	3314      	adds	r3, #20
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	f8d2 20dc 	ldr.w	r2, [r2, #220]	@ 0xdc
 8005600:	4611      	mov	r1, r2
 8005602:	4798      	blx	r3
}
 8005604:	bf00      	nop
 8005606:	3708      	adds	r7, #8
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <_ZN20CPantallaCalibracion20OnBotonUnoClickEventEv>:
void CPantallaCalibracion::OnBotonUnoClickEvent()
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
	Eprom.GuardaAjusteTemperatura(Diferencia);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800561a:	4619      	mov	r1, r3
 800561c:	4804      	ldr	r0, [pc, #16]	@ (8005630 <_ZN20CPantallaCalibracion20OnBotonUnoClickEventEv+0x24>)
 800561e:	f7fc f829 	bl	8001674 <_ZN6CEprom23GuardaAjusteTemperaturaEi>
	 ManejadorPantallas.MuestraMenuPrincipal();
 8005622:	4804      	ldr	r0, [pc, #16]	@ (8005634 <_ZN20CPantallaCalibracion20OnBotonUnoClickEventEv+0x28>)
 8005624:	f7fe fc08 	bl	8003e38 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>
}
 8005628:	bf00      	nop
 800562a:	3708      	adds	r7, #8
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	20000318 	.word	0x20000318
 8005634:	20000258 	.word	0x20000258

08005638 <_ZThn48_N20CPantallaCalibracion20OnBotonUnoClickEventEv>:
	virtual void LeeDatosEstacion();
	virtual void OnBotonUnoClickEvent();
 8005638:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800563c:	f7ff bfe6 	b.w	800560c <_ZN20CPantallaCalibracion20OnBotonUnoClickEventEv>

08005640 <_ZN20CPantallaCalibracion11SetEstacionEP13CEstacionBase>:
void CPantallaCalibracion::SetEstacion(CEstacionBase *estacion)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
	CPantallaBase::SetEstacion(estacion);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6839      	ldr	r1, [r7, #0]
 800564e:	4618      	mov	r0, r3
 8005650:	f7fd ff13 	bl	800347a <_ZN13CPantallaBase11SetEstacionEP13CEstacionBase>
	Estacion->ActivarCalefactor();
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	3334      	adds	r3, #52	@ 0x34
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4610      	mov	r0, r2
 8005668:	4798      	blx	r3
}
 800566a:	bf00      	nop
 800566c:	3708      	adds	r7, #8
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
	...

08005674 <_ZN26CPantallaInicializaMemoriaC1Ev>:
#include <GUI/PantallaManual/CPantallaManual.hpp>
#include <GUI/ManejadorPantallas/CManejadorPantallas.hpp>
#include <RapaTemperatura/CControladorRampas.hpp>
#include <GUI/ManejadorPantallas/CManejadorPantallas.hpp>

CPantallaInicializaMemoria::CPantallaInicializaMemoria():
 8005674:	b590      	push	{r4, r7, lr}
 8005676:	b089      	sub	sp, #36	@ 0x24
 8005678:	af06      	add	r7, sp, #24
 800567a:	6078      	str	r0, [r7, #4]
	CPantallaBase(1, (char*)"Iniciando memoria")
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a24      	ldr	r2, [pc, #144]	@ (8005710 <_ZN26CPantallaInicializaMemoriaC1Ev+0x9c>)
 8005680:	2101      	movs	r1, #1
 8005682:	4618      	mov	r0, r3
 8005684:	f7fd fe6c 	bl	8003360 <_ZN13CPantallaBaseC1EiPc>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	33ac      	adds	r3, #172	@ 0xac
 800568c:	4618      	mov	r0, r3
 800568e:	f005 f98d 	bl	800a9ac <_ZN16CControlProgresoC1Ev>
 8005692:	4a20      	ldr	r2, [pc, #128]	@ (8005714 <_ZN26CPantallaInicializaMemoriaC1Ev+0xa0>)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	601a      	str	r2, [r3, #0]
 8005698:	4a1f      	ldr	r2, [pc, #124]	@ (8005718 <_ZN26CPantallaInicializaMemoriaC1Ev+0xa4>)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	631a      	str	r2, [r3, #48]	@ 0x30
 800569e:	4a1f      	ldr	r2, [pc, #124]	@ (800571c <_ZN26CPantallaInicializaMemoriaC1Ev+0xa8>)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

{
	// TODO Auto-generated constructor stub
	BarraProgreso=new CBarraProgreso(10, 100, 300,20);
 80056a6:	203c      	movs	r0, #60	@ 0x3c
 80056a8:	f00c f9f2 	bl	8011a90 <_Znwj>
 80056ac:	4603      	mov	r3, r0
 80056ae:	461c      	mov	r4, r3
 80056b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80056b4:	9304      	str	r3, [sp, #16]
 80056b6:	2300      	movs	r3, #0
 80056b8:	9303      	str	r3, [sp, #12]
 80056ba:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80056be:	9302      	str	r3, [sp, #8]
 80056c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80056c4:	9301      	str	r3, [sp, #4]
 80056c6:	2314      	movs	r3, #20
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80056ce:	2264      	movs	r2, #100	@ 0x64
 80056d0:	210a      	movs	r1, #10
 80056d2:	4620      	mov	r0, r4
 80056d4:	f7fd f93e 	bl	8002954 <_ZN14CBarraProgresoC1Eiiiiiiii>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8c3 40b0 	str.w	r4, [r3, #176]	@ 0xb0
	BarraProgreso->SetMaximo(100);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80056e4:	2164      	movs	r1, #100	@ 0x64
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fd f978 	bl	80029dc <_ZN14CBarraProgreso9SetMaximoEi>
	BarraProgreso->SetValor(0);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80056f2:	2100      	movs	r1, #0
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7fd f97f 	bl	80029f8 <_ZN14CBarraProgreso8SetValorEi>
	ControladorRampas.SetControlProgreso(this);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	33ac      	adds	r3, #172	@ 0xac
 80056fe:	4619      	mov	r1, r3
 8005700:	4807      	ldr	r0, [pc, #28]	@ (8005720 <_ZN26CPantallaInicializaMemoriaC1Ev+0xac>)
 8005702:	f005 fed9 	bl	800b4b8 <_ZN18CControladorRampas18SetControlProgresoEP16CControlProgreso>
}
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4618      	mov	r0, r3
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	bd90      	pop	{r4, r7, pc}
 8005710:	08014870 	.word	0x08014870
 8005714:	08015258 	.word	0x08015258
 8005718:	080152e0 	.word	0x080152e0
 800571c:	08015314 	.word	0x08015314
 8005720:	20000360 	.word	0x20000360

08005724 <_ZN26CPantallaInicializaMemoriaD1Ev>:

CPantallaInicializaMemoria::~CPantallaInicializaMemoria()
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	4a0b      	ldr	r2, [pc, #44]	@ (800575c <_ZN26CPantallaInicializaMemoriaD1Ev+0x38>)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	601a      	str	r2, [r3, #0]
 8005732:	4a0b      	ldr	r2, [pc, #44]	@ (8005760 <_ZN26CPantallaInicializaMemoriaD1Ev+0x3c>)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	631a      	str	r2, [r3, #48]	@ 0x30
 8005738:	4a0a      	ldr	r2, [pc, #40]	@ (8005764 <_ZN26CPantallaInicializaMemoriaD1Ev+0x40>)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	// TODO Auto-generated destructor stub
}
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	33ac      	adds	r3, #172	@ 0xac
 8005744:	4618      	mov	r0, r3
 8005746:	f005 f941 	bl	800a9cc <_ZN16CControlProgresoD1Ev>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4618      	mov	r0, r3
 800574e:	f7fd fdd3 	bl	80032f8 <_ZN13CPantallaBaseD1Ev>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4618      	mov	r0, r3
 8005756:	3708      	adds	r7, #8
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	08015258 	.word	0x08015258
 8005760:	080152e0 	.word	0x080152e0
 8005764:	08015314 	.word	0x08015314

08005768 <_ZThn48_N26CPantallaInicializaMemoriaD1Ev>:
{
private:
	CBarraProgreso *BarraProgreso;
public:
	CPantallaInicializaMemoria();
	virtual ~CPantallaInicializaMemoria();
 8005768:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800576c:	f7ff bfda 	b.w	8005724 <_ZN26CPantallaInicializaMemoriaD1Ev>

08005770 <_ZThn172_N26CPantallaInicializaMemoriaD1Ev>:
 8005770:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8005774:	f7ff bfd6 	b.w	8005724 <_ZN26CPantallaInicializaMemoriaD1Ev>

08005778 <_ZN26CPantallaInicializaMemoriaD0Ev>:
CPantallaInicializaMemoria::~CPantallaInicializaMemoria()
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
}
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7ff ffcf 	bl	8005724 <_ZN26CPantallaInicializaMemoriaD1Ev>
 8005786:	21b4      	movs	r1, #180	@ 0xb4
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f00c f97f 	bl	8011a8c <_ZdlPvj>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4618      	mov	r0, r3
 8005792:	3708      	adds	r7, #8
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <_ZThn172_N26CPantallaInicializaMemoriaD0Ev>:
 8005798:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 800579c:	f7ff bfec 	b.w	8005778 <_ZN26CPantallaInicializaMemoriaD0Ev>

080057a0 <_ZThn48_N26CPantallaInicializaMemoriaD0Ev>:
 80057a0:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80057a4:	f7ff bfe8 	b.w	8005778 <_ZN26CPantallaInicializaMemoriaD0Ev>

080057a8 <_ZN26CPantallaInicializaMemoria4ShowEv>:

void CPantallaInicializaMemoria::Show()
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
	CPantallaBase::Show();
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7fd fe46 	bl	8003444 <_ZN13CPantallaBase4ShowEv>
	BarraProgreso->Show();
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	334c      	adds	r3, #76	@ 0x4c
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4610      	mov	r0, r2
 80057cc:	4798      	blx	r3
}
 80057ce:	bf00      	nop
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <_ZN26CPantallaInicializaMemoria10OnProgresoEii>:
void CPantallaInicializaMemoria::OnProgreso(int valor, int maximo)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b084      	sub	sp, #16
 80057da:	af00      	add	r7, sp, #0
 80057dc:	60f8      	str	r0, [r7, #12]
 80057de:	60b9      	str	r1, [r7, #8]
 80057e0:	607a      	str	r2, [r7, #4]
	BarraProgreso->SetMaximo(maximo);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80057e8:	6879      	ldr	r1, [r7, #4]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fd f8f6 	bl	80029dc <_ZN14CBarraProgreso9SetMaximoEi>
	BarraProgreso->SetValor(valor);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80057f6:	68b9      	ldr	r1, [r7, #8]
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7fd f8fd 	bl	80029f8 <_ZN14CBarraProgreso8SetValorEi>
	BarraProgreso->Show();
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	334c      	adds	r3, #76	@ 0x4c
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4610      	mov	r0, r2
 8005812:	4798      	blx	r3
}
 8005814:	bf00      	nop
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <_ZThn172_N26CPantallaInicializaMemoria10OnProgresoEii>:
	virtual void Show();
	virtual void OnProgreso(int valor, int maximo);
 800581c:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8005820:	f7ff bfd9 	b.w	80057d6 <_ZN26CPantallaInicializaMemoria10OnProgresoEii>

08005824 <_ZN26CPantallaInicializaMemoria13OnFinProgresoEv>:
void CPantallaInicializaMemoria::OnFinProgreso()
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaManual();
 800582c:	4803      	ldr	r0, [pc, #12]	@ (800583c <_ZN26CPantallaInicializaMemoria13OnFinProgresoEv+0x18>)
 800582e:	f7fe fae7 	bl	8003e00 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
}
 8005832:	bf00      	nop
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	20000258 	.word	0x20000258

08005840 <_ZThn172_N26CPantallaInicializaMemoria13OnFinProgresoEv>:
//	virtual void OnMensaje(char *texto);
	virtual void OnFinProgreso();
 8005840:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8005844:	f7ff bfee 	b.w	8005824 <_ZN26CPantallaInicializaMemoria13OnFinProgresoEv>

08005848 <_ZN26CPantallaInicializaMemoria8RefrescaEv>:
void CPantallaInicializaMemoria::Refresca()
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
	ControladorRampas.InicializaMemoria();
 8005850:	4803      	ldr	r0, [pc, #12]	@ (8005860 <_ZN26CPantallaInicializaMemoria8RefrescaEv+0x18>)
 8005852:	f005 fd71 	bl	800b338 <_ZN18CControladorRampas17InicializaMemoriaEv>
}
 8005856:	bf00      	nop
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	20000360 	.word	0x20000360

08005864 <_ZN15CPantallaManualD1Ev>:
#include <EPROM/CEprom.hpp>

extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart1;

CPantallaManual::~CPantallaManual()
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	4a07      	ldr	r2, [pc, #28]	@ (800588c <_ZN15CPantallaManualD1Ev+0x28>)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	4a07      	ldr	r2, [pc, #28]	@ (8005890 <_ZN15CPantallaManualD1Ev+0x2c>)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4618      	mov	r0, r3
 800587c:	f7fd fd3c 	bl	80032f8 <_ZN13CPantallaBaseD1Ev>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4618      	mov	r0, r3
 8005884:	3708      	adds	r7, #8
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	08015330 	.word	0x08015330
 8005890:	080153e0 	.word	0x080153e0

08005894 <_ZThn48_N15CPantallaManualD1Ev>:
	CEtiquetaTft *LabelEstado;
	int NivelAire = 0;

public:
	CPantallaManual(CEstacionBase *estacion);
	virtual ~CPantallaManual();
 8005894:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005898:	f7ff bfe4 	b.w	8005864 <_ZN15CPantallaManualD1Ev>

0800589c <_ZN15CPantallaManualD0Ev>:
CPantallaManual::~CPantallaManual()
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
}
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f7ff ffdd 	bl	8005864 <_ZN15CPantallaManualD1Ev>
 80058aa:	21ec      	movs	r1, #236	@ 0xec
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f00c f8ed 	bl	8011a8c <_ZdlPvj>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4618      	mov	r0, r3
 80058b6:	3708      	adds	r7, #8
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <_ZThn48_N15CPantallaManualD0Ev>:
 80058bc:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80058c0:	f7ff bfec 	b.w	800589c <_ZN15CPantallaManualD0Ev>

080058c4 <_ZN15CPantallaManualC1Ev>:

CPantallaManual::CPantallaManual() :
 80058c4:	b590      	push	{r4, r7, lr}
 80058c6:	b08d      	sub	sp, #52	@ 0x34
 80058c8:	af08      	add	r7, sp, #32
 80058ca:	6078      	str	r0, [r7, #4]
		CPantallaBase(1, (char*)"   Modo: Manual")
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a77      	ldr	r2, [pc, #476]	@ (8005aac <_ZN15CPantallaManualC1Ev+0x1e8>)
 80058d0:	2101      	movs	r1, #1
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7fd fd44 	bl	8003360 <_ZN13CPantallaBaseC1EiPc>
 80058d8:	4a75      	ldr	r2, [pc, #468]	@ (8005ab0 <_ZN15CPantallaManualC1Ev+0x1ec>)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	4a75      	ldr	r2, [pc, #468]	@ (8005ab4 <_ZN15CPantallaManualC1Ev+0x1f0>)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f04f 32ff 	mov.w	r2, #4294967295
 80058f2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f04f 32ff 	mov.w	r2, #4294967295
 80058fc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f04f 32ff 	mov.w	r2, #4294967295
 8005906:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f04f 32ff 	mov.w	r2, #4294967295
 8005918:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
{
	LabelTemperatura = new CEtiquetaTft( 5, 35, 50, 20, COLOR::BLACK,(char*)"Temperatura", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8005944:	20a4      	movs	r0, #164	@ 0xa4
 8005946:	f00c f8a3 	bl	8011a90 <_Znwj>
 800594a:	4603      	mov	r3, r0
 800594c:	461c      	mov	r4, r3
 800594e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005952:	9306      	str	r3, [sp, #24]
 8005954:	2300      	movs	r3, #0
 8005956:	9305      	str	r3, [sp, #20]
 8005958:	2303      	movs	r3, #3
 800595a:	9304      	str	r3, [sp, #16]
 800595c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005960:	9303      	str	r3, [sp, #12]
 8005962:	4b55      	ldr	r3, [pc, #340]	@ (8005ab8 <_ZN15CPantallaManualC1Ev+0x1f4>)
 8005964:	9302      	str	r3, [sp, #8]
 8005966:	2300      	movs	r3, #0
 8005968:	9301      	str	r3, [sp, #4]
 800596a:	2314      	movs	r3, #20
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	2332      	movs	r3, #50	@ 0x32
 8005970:	2223      	movs	r2, #35	@ 0x23
 8005972:	2105      	movs	r1, #5
 8005974:	4620      	mov	r0, r4
 8005976:	f7fd faa7 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8c3 40d4 	str.w	r4, [r3, #212]	@ 0xd4
	int centroX = DameCentroX();
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4618      	mov	r0, r3
 8005984:	f7fd ff04 	bl	8003790 <_ZN14CRectanguloTft11DameCentroXEv>
 8005988:	60f8      	str	r0, [r7, #12]
	LabelTemperaturas = new CEtiquetaTft( centroX - 150 / 2, 65, 150, 30,COLOR::WHITE,(char*) "000/000", COLOR::BLACK, 3, 1, COLOR::RED);
 800598a:	20a4      	movs	r0, #164	@ 0xa4
 800598c:	f00c f880 	bl	8011a90 <_Znwj>
 8005990:	4603      	mov	r3, r0
 8005992:	461c      	mov	r4, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f1a3 014b 	sub.w	r1, r3, #75	@ 0x4b
 800599a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800599e:	9306      	str	r3, [sp, #24]
 80059a0:	2301      	movs	r3, #1
 80059a2:	9305      	str	r3, [sp, #20]
 80059a4:	2303      	movs	r3, #3
 80059a6:	9304      	str	r3, [sp, #16]
 80059a8:	2300      	movs	r3, #0
 80059aa:	9303      	str	r3, [sp, #12]
 80059ac:	4b43      	ldr	r3, [pc, #268]	@ (8005abc <_ZN15CPantallaManualC1Ev+0x1f8>)
 80059ae:	9302      	str	r3, [sp, #8]
 80059b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80059b4:	9301      	str	r3, [sp, #4]
 80059b6:	231e      	movs	r3, #30
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	2396      	movs	r3, #150	@ 0x96
 80059bc:	2241      	movs	r2, #65	@ 0x41
 80059be:	4620      	mov	r0, r4
 80059c0:	f7fd fa82 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8c3 40d8 	str.w	r4, [r3, #216]	@ 0xd8
	LabelTemperaturas->SetSeparacion(5, 5);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80059d0:	2205      	movs	r2, #5
 80059d2:	2105      	movs	r1, #5
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7fd fc01 	bl	80031dc <_ZN12CEtiquetaTft13SetSeparacionEii>
	LabelAire1 = new CEtiquetaTft( 5, 105, 200, 30, COLOR::BLACK, (char*)"Aire:",COLOR::WHITE, 3, 0, COLOR::RED);
 80059da:	20a4      	movs	r0, #164	@ 0xa4
 80059dc:	f00c f858 	bl	8011a90 <_Znwj>
 80059e0:	4603      	mov	r3, r0
 80059e2:	461c      	mov	r4, r3
 80059e4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80059e8:	9306      	str	r3, [sp, #24]
 80059ea:	2300      	movs	r3, #0
 80059ec:	9305      	str	r3, [sp, #20]
 80059ee:	2303      	movs	r3, #3
 80059f0:	9304      	str	r3, [sp, #16]
 80059f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80059f6:	9303      	str	r3, [sp, #12]
 80059f8:	4b31      	ldr	r3, [pc, #196]	@ (8005ac0 <_ZN15CPantallaManualC1Ev+0x1fc>)
 80059fa:	9302      	str	r3, [sp, #8]
 80059fc:	2300      	movs	r3, #0
 80059fe:	9301      	str	r3, [sp, #4]
 8005a00:	231e      	movs	r3, #30
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	23c8      	movs	r3, #200	@ 0xc8
 8005a06:	2269      	movs	r2, #105	@ 0x69
 8005a08:	2105      	movs	r1, #5
 8005a0a:	4620      	mov	r0, r4
 8005a0c:	f7fd fa5c 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8c3 40dc 	str.w	r4, [r3, #220]	@ 0xdc
	LabelAire2 = new CEtiquetaTft( 110, 105, 100, 30, COLOR::WHITE, (char*)"00",COLOR::BLACK, 3, 0, COLOR::RED);
 8005a16:	20a4      	movs	r0, #164	@ 0xa4
 8005a18:	f00c f83a 	bl	8011a90 <_Znwj>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	461c      	mov	r4, r3
 8005a20:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005a24:	9306      	str	r3, [sp, #24]
 8005a26:	2300      	movs	r3, #0
 8005a28:	9305      	str	r3, [sp, #20]
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	9304      	str	r3, [sp, #16]
 8005a2e:	2300      	movs	r3, #0
 8005a30:	9303      	str	r3, [sp, #12]
 8005a32:	4b24      	ldr	r3, [pc, #144]	@ (8005ac4 <_ZN15CPantallaManualC1Ev+0x200>)
 8005a34:	9302      	str	r3, [sp, #8]
 8005a36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005a3a:	9301      	str	r3, [sp, #4]
 8005a3c:	231e      	movs	r3, #30
 8005a3e:	9300      	str	r3, [sp, #0]
 8005a40:	2364      	movs	r3, #100	@ 0x64
 8005a42:	2269      	movs	r2, #105	@ 0x69
 8005a44:	216e      	movs	r1, #110	@ 0x6e
 8005a46:	4620      	mov	r0, r4
 8005a48:	f7fd fa3e 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8c3 40e0 	str.w	r4, [r3, #224]	@ 0xe0
	LabelEstado = new CEtiquetaTft( 5, 145, 300, 35, COLOR::BLACK,(char*)"Estado: REPOSO", COLOR::WHITE, 3, 0, COLOR::RED);
 8005a52:	20a4      	movs	r0, #164	@ 0xa4
 8005a54:	f00c f81c 	bl	8011a90 <_Znwj>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	461c      	mov	r4, r3
 8005a5c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005a60:	9306      	str	r3, [sp, #24]
 8005a62:	2300      	movs	r3, #0
 8005a64:	9305      	str	r3, [sp, #20]
 8005a66:	2303      	movs	r3, #3
 8005a68:	9304      	str	r3, [sp, #16]
 8005a6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005a6e:	9303      	str	r3, [sp, #12]
 8005a70:	4b15      	ldr	r3, [pc, #84]	@ (8005ac8 <_ZN15CPantallaManualC1Ev+0x204>)
 8005a72:	9302      	str	r3, [sp, #8]
 8005a74:	2300      	movs	r3, #0
 8005a76:	9301      	str	r3, [sp, #4]
 8005a78:	2323      	movs	r3, #35	@ 0x23
 8005a7a:	9300      	str	r3, [sp, #0]
 8005a7c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8005a80:	2291      	movs	r2, #145	@ 0x91
 8005a82:	2105      	movs	r1, #5
 8005a84:	4620      	mov	r0, r4
 8005a86:	f7fd fa1f 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8c3 40e4 	str.w	r4, [r3, #228]	@ 0xe4
	LabelEstado->SetSeparacion(15, 5);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a96:	2205      	movs	r2, #5
 8005a98:	210f      	movs	r1, #15
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fd fb9e 	bl	80031dc <_ZN12CEtiquetaTft13SetSeparacionEii>
}
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3714      	adds	r7, #20
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd90      	pop	{r4, r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	08014884 	.word	0x08014884
 8005ab0:	08015330 	.word	0x08015330
 8005ab4:	080153e0 	.word	0x080153e0
 8005ab8:	08014894 	.word	0x08014894
 8005abc:	080148a0 	.word	0x080148a0
 8005ac0:	080148a8 	.word	0x080148a8
 8005ac4:	080148b0 	.word	0x080148b0
 8005ac8:	080148b4 	.word	0x080148b4

08005acc <_ZN15CPantallaManual13MuestraEstadoEb>:


void CPantallaManual::MuestraEstado(bool forzar)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	70fb      	strb	r3, [r7, #3]
	if(forzar==false)
 8005ad8:	78fb      	ldrb	r3, [r7, #3]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d116      	bne.n	8005b0c <_ZN15CPantallaManual13MuestraEstadoEb+0x40>
	{
		if(EstadoBoquillaAnterior==EstadoBoquilla )
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d10e      	bne.n	8005b0c <_ZN15CPantallaManual13MuestraEstadoEb+0x40>
		{
			if(EsVisible()==true)
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	3368      	adds	r3, #104	@ 0x68
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4610      	mov	r0, r2
 8005afa:	4798      	blx	r3
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	bf0c      	ite	eq
 8005b02:	2301      	moveq	r3, #1
 8005b04:	2300      	movne	r3, #0
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d143      	bne.n	8005b94 <_ZN15CPantallaManual13MuestraEstadoEb+0xc8>
			{
				return;
			}
		}
	}
	EstadoBoquillaAnterior=EstadoBoquilla;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	if (EstadoBoquilla == 1)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d115      	bne.n	8005b4e <_ZN15CPantallaManual13MuestraEstadoEb+0x82>
	{
		LabelEstado->SetColorFondo(COLOR::BLUE);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b28:	211f      	movs	r1, #31
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7fd fdfe 	bl	800372c <_ZN14CRectanguloTft13SetColorFondoEi>
		LabelEstado->SetColorTexto(COLOR::BLACK);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b36:	2100      	movs	r1, #0
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7fd fb63 	bl	8003204 <_ZN12CEtiquetaTft13SetColorTextoEi>
		LabelEstado->SetTexto((char*)"Estado: ACTIVO");
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b44:	4915      	ldr	r1, [pc, #84]	@ (8005b9c <_ZN15CPantallaManual13MuestraEstadoEb+0xd0>)
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7fd f9f8 	bl	8002f3c <_ZN12CEtiquetaTft8SetTextoEPcz>
 8005b4c:	e016      	b.n	8005b7c <_ZN15CPantallaManual13MuestraEstadoEb+0xb0>
	}
	else
	{
		LabelEstado->SetColorFondo(COLOR::RED);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b54:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7fd fde7 	bl	800372c <_ZN14CRectanguloTft13SetColorFondoEi>
		LabelEstado->SetColorTexto(COLOR::WHITE);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b64:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7fd fb4b 	bl	8003204 <_ZN12CEtiquetaTft13SetColorTextoEi>
		LabelEstado->SetTexto((char*)"Estado: REPOSO");
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b74:	490a      	ldr	r1, [pc, #40]	@ (8005ba0 <_ZN15CPantallaManual13MuestraEstadoEb+0xd4>)
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7fd f9e0 	bl	8002f3c <_ZN12CEtiquetaTft8SetTextoEPcz>
	}
	LabelEstado->Show();
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	334c      	adds	r3, #76	@ 0x4c
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4610      	mov	r0, r2
 8005b90:	4798      	blx	r3
 8005b92:	e000      	b.n	8005b96 <_ZN15CPantallaManual13MuestraEstadoEb+0xca>
				return;
 8005b94:	bf00      	nop
}
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	080148c4 	.word	0x080148c4
 8005ba0:	080148b4 	.word	0x080148b4

08005ba4 <_ZN15CPantallaManual16LeeDatosEstacionEv>:

void CPantallaManual::LeeDatosEstacion()
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
	SetTemperatura = Estacion->GetTemperatura();
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	3310      	adds	r3, #16
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4610      	mov	r0, r2
 8005bc0:	4798      	blx	r3
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	Temperatura = Estacion->GetTemperaturaRealx();
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	3308      	adds	r3, #8
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4610      	mov	r0, r2
 8005bde:	4798      	blx	r3
 8005be0:	eef0 7a40 	vmov.f32	s15, s0
 8005be4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005be8:	ee17 2a90 	vmov	r2, s15
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	NivelAire = ManejadorControles->GetNivelAire();
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f004 fc2a 	bl	800a452 <_ZN19CManejadorControles12GetNivelAireEv>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
	Estacion->SetNivelAire(NivelAire);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	3314      	adds	r3, #20
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	f8d2 20e8 	ldr.w	r2, [r2, #232]	@ 0xe8
 8005c1e:	4611      	mov	r1, r2
 8005c20:	4798      	blx	r3
	EstadoBoquilla=Estacion->GetEstado();
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	331c      	adds	r3, #28
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4610      	mov	r0, r2
 8005c36:	4798      	blx	r3
 8005c38:	4602      	mov	r2, r0
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
}
 8005c40:	bf00      	nop
 8005c42:	3708      	adds	r7, #8
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <_ZN15CPantallaManual19MuestraTemperaturasEb>:


void CPantallaManual::MuestraTemperaturas(bool forzar)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	460b      	mov	r3, r1
 8005c52:	70fb      	strb	r3, [r7, #3]
	if(forzar==false)
 8005c54:	78fb      	ldrb	r3, [r7, #3]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10f      	bne.n	8005c7a <_ZN15CPantallaManual19MuestraTemperaturasEb+0x32>
	{
		if(TemperaturaAnterior==Temperatura &&SetTemperaturaAnterior==SetTemperatura)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d107      	bne.n	8005c7a <_ZN15CPantallaManual19MuestraTemperaturasEb+0x32>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d023      	beq.n	8005cc2 <_ZN15CPantallaManual19MuestraTemperaturasEb+0x7a>
			return;
	}

	TemperaturaAnterior=Temperatura;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	SetTemperaturaAnterior=SetTemperatura;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	LabelTemperaturas->SetTexto((char*)"%d/%d", Temperatura, SetTemperatura);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f8d3 00d8 	ldr.w	r0, [r3, #216]	@ 0xd8
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005ca4:	4909      	ldr	r1, [pc, #36]	@ (8005ccc <_ZN15CPantallaManual19MuestraTemperaturasEb+0x84>)
 8005ca6:	f7fd f949 	bl	8002f3c <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelTemperaturas->Show();
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	334c      	adds	r3, #76	@ 0x4c
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4610      	mov	r0, r2
 8005cbe:	4798      	blx	r3
 8005cc0:	e000      	b.n	8005cc4 <_ZN15CPantallaManual19MuestraTemperaturasEb+0x7c>
			return;
 8005cc2:	bf00      	nop
}
 8005cc4:	3708      	adds	r7, #8
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	080148d4 	.word	0x080148d4

08005cd0 <_ZN15CPantallaManual16OnNivelAireEventEi>:

void CPantallaManual::OnNivelAireEvent(int aire)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
	NivelAire = aire;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
	Estacion->SetNivelAire(NivelAire);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3314      	adds	r3, #20
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	f8d2 20e8 	ldr.w	r2, [r2, #232]	@ 0xe8
 8005cfa:	4611      	mov	r1, r2
 8005cfc:	4798      	blx	r3
}
 8005cfe:	bf00      	nop
 8005d00:	3708      	adds	r7, #8
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <_ZThn48_N15CPantallaManual16OnNivelAireEventEi>:
	CPantallaManual();
	virtual void Show();
	virtual void Refresca();

private:
	void OnNivelAireEvent(int aire);
 8005d06:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005d0a:	f7ff bfe1 	b.w	8005cd0 <_ZN15CPantallaManual16OnNivelAireEventEi>
	...

08005d10 <_ZN15CPantallaManual16MuestraNivelAireEb>:

void CPantallaManual::MuestraNivelAire(bool forzar)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	460b      	mov	r3, r1
 8005d1a:	70fb      	strb	r3, [r7, #3]
	if(forzar==false)
 8005d1c:	78fb      	ldrb	r3, [r7, #3]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d116      	bne.n	8005d50 <_ZN15CPantallaManual16MuestraNivelAireEb+0x40>
	{
		if(NivelAireAnterior==NivelAire && EsVisible()==true )
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d10b      	bne.n	8005d4a <_ZN15CPantallaManual16MuestraNivelAireEb+0x3a>
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	3368      	adds	r3, #104	@ 0x68
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4610      	mov	r0, r2
 8005d3e:	4798      	blx	r3
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d101      	bne.n	8005d4a <_ZN15CPantallaManual16MuestraNivelAireEb+0x3a>
 8005d46:	2301      	movs	r3, #1
 8005d48:	e000      	b.n	8005d4c <_ZN15CPantallaManual16MuestraNivelAireEb+0x3c>
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d129      	bne.n	8005da4 <_ZN15CPantallaManual16MuestraNivelAireEb+0x94>
			return;
	}
	NivelAireAnterior=NivelAire;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	Estacion->SetNivelAire(NivelAire);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	3314      	adds	r3, #20
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	f8d2 20e8 	ldr.w	r2, [r2, #232]	@ 0xe8
 8005d74:	4611      	mov	r1, r2
 8005d76:	4798      	blx	r3
	LabelAire2->SetTexto((char*)"%d", NivelAire);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005d84:	461a      	mov	r2, r3
 8005d86:	4909      	ldr	r1, [pc, #36]	@ (8005dac <_ZN15CPantallaManual16MuestraNivelAireEb+0x9c>)
 8005d88:	f7fd f8d8 	bl	8002f3c <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelAire2->Show();
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	334c      	adds	r3, #76	@ 0x4c
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4610      	mov	r0, r2
 8005da0:	4798      	blx	r3
 8005da2:	e000      	b.n	8005da6 <_ZN15CPantallaManual16MuestraNivelAireEb+0x96>
			return;
 8005da4:	bf00      	nop

}
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	080148dc 	.word	0x080148dc

08005db0 <_ZN15CPantallaManual22OnTemperaturaRealEventEi>:

void CPantallaManual::OnTemperaturaRealEvent(int temperatura)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
}
 8005dba:	bf00      	nop
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <_ZThn48_N15CPantallaManual22OnTemperaturaRealEventEi>:
	virtual void OnTemperaturaRealEvent(int temperatura);
 8005dc6:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005dca:	f7ff bff1 	b.w	8005db0 <_ZN15CPantallaManual22OnTemperaturaRealEventEi>

08005dce <_ZN15CPantallaManual19OnPerillaIncrementoEv>:

//eventos del Encoder
void CPantallaManual::OnPerillaIncremento()
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b082      	sub	sp, #8
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
	Estacion->IncrementaTemperatura();
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	3320      	adds	r3, #32
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4610      	mov	r0, r2
 8005dea:	4798      	blx	r3
	TemperaturaGuardada=false;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
}
 8005df4:	bf00      	nop
 8005df6:	3708      	adds	r7, #8
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <_ZThn48_N15CPantallaManual19OnPerillaIncrementoEv>:

	virtual void OnBotonUnoClickEvent();
	virtual void OnBotonDosClickEvent();
	virtual void OnBotonTresClickEvent();
protected:
	virtual void OnPerillaIncremento();
 8005dfc:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005e00:	f7ff bfe5 	b.w	8005dce <_ZN15CPantallaManual19OnPerillaIncrementoEv>

08005e04 <_ZN15CPantallaManual19OnPerillaDecrementoEv>:

void CPantallaManual::OnPerillaDecremento()
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
	Estacion->DecrementaTemperatura();
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	3324      	adds	r3, #36	@ 0x24
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4610      	mov	r0, r2
 8005e20:	4798      	blx	r3
	TemperaturaGuardada=false;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
}
 8005e2a:	bf00      	nop
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <_ZThn48_N15CPantallaManual19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 8005e32:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005e36:	f7ff bfe5 	b.w	8005e04 <_ZN15CPantallaManual19OnPerillaDecrementoEv>

08005e3a <_ZN15CPantallaManual8RefrescaEv>:

void CPantallaManual::Refresca()
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b082      	sub	sp, #8
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
	if(TemperaturaGuardada==false)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d105      	bne.n	8005e58 <_ZN15CPantallaManual8RefrescaEv+0x1e>
		GuardaTemperatura();
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	3398      	adds	r3, #152	@ 0x98
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	4798      	blx	r3
	MuestraInformacion(false);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	33a4      	adds	r3, #164	@ 0xa4
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2100      	movs	r1, #0
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	4798      	blx	r3
}
 8005e66:	bf00      	nop
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
	...

08005e70 <_ZN15CPantallaManual24OnBotonPerillaClickEventEv>:
 void CPantallaManual::OnBotonPerillaClickEvent()
 {
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
	 ManejadorPantallas.MuestraMenuPrincipal();
 8005e78:	4803      	ldr	r0, [pc, #12]	@ (8005e88 <_ZN15CPantallaManual24OnBotonPerillaClickEventEv+0x18>)
 8005e7a:	f7fd ffdd 	bl	8003e38 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>
 }
 8005e7e:	bf00      	nop
 8005e80:	3708      	adds	r7, #8
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	20000258 	.word	0x20000258

08005e8c <_ZThn48_N15CPantallaManual24OnBotonPerillaClickEventEv>:
	virtual void OnBotonPerillaClickEvent();
 8005e8c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005e90:	f7ff bfee 	b.w	8005e70 <_ZN15CPantallaManual24OnBotonPerillaClickEventEv>

08005e94 <_ZN15CPantallaManual18MuestraInformacionEb>:
 void CPantallaManual::MuestraInformacion(bool forzar)
 {
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	70fb      	strb	r3, [r7, #3]
		LeeDatosEstacion();
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	339c      	adds	r3, #156	@ 0x9c
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	4798      	blx	r3
		MuestraTemperaturas(forzar);
 8005eac:	78fb      	ldrb	r3, [r7, #3]
 8005eae:	4619      	mov	r1, r3
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f7ff fec9 	bl	8005c48 <_ZN15CPantallaManual19MuestraTemperaturasEb>
		MuestraEstado(forzar);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	33a0      	adds	r3, #160	@ 0xa0
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	78fa      	ldrb	r2, [r7, #3]
 8005ec0:	4611      	mov	r1, r2
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	4798      	blx	r3
		MuestraNivelAire(forzar);
 8005ec6:	78fb      	ldrb	r3, [r7, #3]
 8005ec8:	4619      	mov	r1, r3
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f7ff ff20 	bl	8005d10 <_ZN15CPantallaManual16MuestraNivelAireEb>
		//marco como visible
		SetVisible(true);
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	336c      	adds	r3, #108	@ 0x6c
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2101      	movs	r1, #1
 8005edc:	4610      	mov	r0, r2
 8005ede:	4798      	blx	r3

 }
 8005ee0:	bf00      	nop
 8005ee2:	3708      	adds	r7, #8
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <_ZN15CPantallaManual17GuardaTemperaturaEv>:
 void CPantallaManual::GuardaTemperatura()
 {
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 	uint16_t temperatura=Estacion->GetTemperatura();
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	3310      	adds	r3, #16
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4610      	mov	r0, r2
 8005f04:	4798      	blx	r3
 8005f06:	4603      	mov	r3, r0
 8005f08:	81fb      	strh	r3, [r7, #14]
 	int t= HAL_GetTick();
 8005f0a:	f007 fc91 	bl	800d830 <HAL_GetTick>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	60bb      	str	r3, [r7, #8]
 	if(t>tiempoescritura)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	dd0e      	ble.n	8005f3c <_ZN15CPantallaManual17GuardaTemperaturaEv+0x54>
 	{
 		Eprom.GuardaTemepraturaManual(temperatura);
 8005f1e:	89fb      	ldrh	r3, [r7, #14]
 8005f20:	4619      	mov	r1, r3
 8005f22:	4808      	ldr	r0, [pc, #32]	@ (8005f44 <_ZN15CPantallaManual17GuardaTemperaturaEv+0x5c>)
 8005f24:	f7fb fb3a 	bl	800159c <_ZN6CEprom23GuardaTemepraturaManualEi>
 		TemperaturaGuardada=true;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 		tiempoescritura=t+1000;
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 	}

 }
 8005f3c:	bf00      	nop
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	20000318 	.word	0x20000318

08005f48 <_ZN15CPantallaManual10LeeMemoriaEv>:
void CPantallaManual::LeeMemoria()
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]

 	uint16_t temperatura=Eprom.DameTemperaturaManual();
 8005f50:	480c      	ldr	r0, [pc, #48]	@ (8005f84 <_ZN15CPantallaManual10LeeMemoriaEv+0x3c>)
 8005f52:	f7fb fae7 	bl	8001524 <_ZN6CEprom21DameTemperaturaManualEv>
 8005f56:	4603      	mov	r3, r0
 8005f58:	81fb      	strh	r3, [r7, #14]
	Estacion->SetTemperatura(temperatura);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	330c      	adds	r3, #12
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	89f9      	ldrh	r1, [r7, #14]
 8005f6e:	4610      	mov	r0, r2
 8005f70:	4798      	blx	r3
	TemperaturaGuardada=true;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
}
 8005f7a:	bf00      	nop
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	20000318 	.word	0x20000318

08005f88 <_ZN15CPantallaManual4ShowEv>:

 void CPantallaManual::Show()
 {
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 	CPantallaBase::Show();
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7fd fa56 	bl	8003444 <_ZN13CPantallaBase4ShowEv>
 	LabelTemperatura->Show();
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	334c      	adds	r3, #76	@ 0x4c
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4610      	mov	r0, r2
 8005fac:	4798      	blx	r3
 	LabelAire1->Show();
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	334c      	adds	r3, #76	@ 0x4c
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4610      	mov	r0, r2
 8005fc2:	4798      	blx	r3
 	//leo la temperatura desde la memoria
 	LeeMemoria();
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f7ff ffbf 	bl	8005f48 <_ZN15CPantallaManual10LeeMemoriaEv>
 	LeeDatosEstacion();
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	339c      	adds	r3, #156	@ 0x9c
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	4798      	blx	r3
 	MuestraInformacion(true);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	33a4      	adds	r3, #164	@ 0xa4
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2101      	movs	r1, #1
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	4798      	blx	r3
 }
 8005fe4:	bf00      	nop
 8005fe6:	3708      	adds	r7, #8
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <_ZN15CPantallaManual21OnBotonTresClickEventEv>:
void CPantallaManual::OnBotonTresClickEvent()
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(3);
 8005ff4:	2103      	movs	r1, #3
 8005ff6:	4803      	ldr	r0, [pc, #12]	@ (8006004 <_ZN15CPantallaManual21OnBotonTresClickEventEv+0x18>)
 8005ff8:	f7fd fffe 	bl	8003ff8 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 8005ffc:	bf00      	nop
 8005ffe:	3708      	adds	r7, #8
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	20000258 	.word	0x20000258

08006008 <_ZThn48_N15CPantallaManual21OnBotonTresClickEventEv>:
	virtual void OnBotonTresClickEvent();
 8006008:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800600c:	f7ff bfee 	b.w	8005fec <_ZN15CPantallaManual21OnBotonTresClickEventEv>

08006010 <_ZN15CPantallaManual20OnBotonUnoClickEventEv>:
void CPantallaManual::OnBotonUnoClickEvent()
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(1);
 8006018:	2101      	movs	r1, #1
 800601a:	4803      	ldr	r0, [pc, #12]	@ (8006028 <_ZN15CPantallaManual20OnBotonUnoClickEventEv+0x18>)
 800601c:	f7fd ffec 	bl	8003ff8 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 8006020:	bf00      	nop
 8006022:	3708      	adds	r7, #8
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	20000258 	.word	0x20000258

0800602c <_ZThn48_N15CPantallaManual20OnBotonUnoClickEventEv>:
	virtual void OnBotonUnoClickEvent();
 800602c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8006030:	f7ff bfee 	b.w	8006010 <_ZN15CPantallaManual20OnBotonUnoClickEventEv>

08006034 <_ZN15CPantallaManual20OnBotonDosClickEventEv>:
void CPantallaManual::OnBotonDosClickEvent()
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(2);
 800603c:	2102      	movs	r1, #2
 800603e:	4803      	ldr	r0, [pc, #12]	@ (800604c <_ZN15CPantallaManual20OnBotonDosClickEventEv+0x18>)
 8006040:	f7fd ffda 	bl	8003ff8 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 8006044:	bf00      	nop
 8006046:	3708      	adds	r7, #8
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	20000258 	.word	0x20000258

08006050 <_ZThn48_N15CPantallaManual20OnBotonDosClickEventEv>:
	virtual void OnBotonDosClickEvent();
 8006050:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8006054:	f7ff bfee 	b.w	8006034 <_ZN15CPantallaManual20OnBotonDosClickEventEv>

08006058 <_ZN15CPantallaManual11SetEstacionEP13CEstacionBase>:
void CPantallaManual::SetEstacion(CEstacionBase *estacion)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
	CPantallaBase::SetEstacion(estacion);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6839      	ldr	r1, [r7, #0]
 8006066:	4618      	mov	r0, r3
 8006068:	f7fd fa07 	bl	800347a <_ZN13CPantallaBase11SetEstacionEP13CEstacionBase>
	Estacion->ActivarCalefactor();
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	3334      	adds	r3, #52	@ 0x34
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4610      	mov	r0, r2
 8006080:	4798      	blx	r3
}
 8006082:	bf00      	nop
 8006084:	3708      	adds	r7, #8
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
	...

0800608c <_ZN16CPantallaMemoriaD1Ev>:
#include <EPROM/CEprom.hpp>

extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart1;

CPantallaMemoria::~CPantallaMemoria()
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	4a07      	ldr	r2, [pc, #28]	@ (80060b4 <_ZN16CPantallaMemoriaD1Ev+0x28>)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	601a      	str	r2, [r3, #0]
 800609a:	4a07      	ldr	r2, [pc, #28]	@ (80060b8 <_ZN16CPantallaMemoriaD1Ev+0x2c>)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7ff fbde 	bl	8005864 <_ZN15CPantallaManualD1Ev>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4618      	mov	r0, r3
 80060ac:	3708      	adds	r7, #8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	08015414 	.word	0x08015414
 80060b8:	080154c8 	.word	0x080154c8

080060bc <_ZThn48_N16CPantallaMemoriaD1Ev>:
public:
	virtual void OnPerillaIncremento();
	virtual void OnPerillaDecremento();
	CPantallaMemoria(CEstacionBase *estacion);
	CPantallaMemoria();
	virtual ~CPantallaMemoria();
 80060bc:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80060c0:	f7ff bfe4 	b.w	800608c <_ZN16CPantallaMemoriaD1Ev>

080060c4 <_ZN16CPantallaMemoriaD0Ev>:
CPantallaMemoria::~CPantallaMemoria()
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
}
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f7ff ffdd 	bl	800608c <_ZN16CPantallaMemoriaD1Ev>
 80060d2:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f00b fcd8 	bl	8011a8c <_ZdlPvj>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4618      	mov	r0, r3
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <_ZThn48_N16CPantallaMemoriaD0Ev>:
 80060e6:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80060ea:	f7ff bfeb 	b.w	80060c4 <_ZN16CPantallaMemoriaD0Ev>
	...

080060f0 <_ZN16CPantallaMemoriaC1Ev>:


CPantallaMemoria::CPantallaMemoria() :
 80060f0:	b590      	push	{r4, r7, lr}
 80060f2:	b08d      	sub	sp, #52	@ 0x34
 80060f4:	af08      	add	r7, sp, #32
 80060f6:	6078      	str	r0, [r7, #4]
		CPantallaManual()
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7ff fbe2 	bl	80058c4 <_ZN15CPantallaManualC1Ev>
 8006100:	4a41      	ldr	r2, [pc, #260]	@ (8006208 <_ZN16CPantallaMemoriaC1Ev+0x118>)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	601a      	str	r2, [r3, #0]
 8006106:	4a41      	ldr	r2, [pc, #260]	@ (800620c <_ZN16CPantallaMemoriaC1Ev+0x11c>)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	631a      	str	r2, [r3, #48]	@ 0x30
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2205      	movs	r2, #5
 8006118:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
{
	LabelTitulo->SetTexto((char*)"MODO: MEMORIA");
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006128:	4939      	ldr	r1, [pc, #228]	@ (8006210 <_ZN16CPantallaMemoriaC1Ev+0x120>)
 800612a:	4618      	mov	r0, r3
 800612c:	f7fc ff06 	bl	8002f3c <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelMemoria=new CEtiquetaTft( 5, 35, 50, 20, COLOR::BLACK,(char*)"Memoria: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8006130:	20a4      	movs	r0, #164	@ 0xa4
 8006132:	f00b fcad 	bl	8011a90 <_Znwj>
 8006136:	4603      	mov	r3, r0
 8006138:	461c      	mov	r4, r3
 800613a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800613e:	9306      	str	r3, [sp, #24]
 8006140:	2300      	movs	r3, #0
 8006142:	9305      	str	r3, [sp, #20]
 8006144:	2303      	movs	r3, #3
 8006146:	9304      	str	r3, [sp, #16]
 8006148:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800614c:	9303      	str	r3, [sp, #12]
 800614e:	4b31      	ldr	r3, [pc, #196]	@ (8006214 <_ZN16CPantallaMemoriaC1Ev+0x124>)
 8006150:	9302      	str	r3, [sp, #8]
 8006152:	2300      	movs	r3, #0
 8006154:	9301      	str	r3, [sp, #4]
 8006156:	2314      	movs	r3, #20
 8006158:	9300      	str	r3, [sp, #0]
 800615a:	2332      	movs	r3, #50	@ 0x32
 800615c:	2223      	movs	r2, #35	@ 0x23
 800615e:	2105      	movs	r1, #5
 8006160:	4620      	mov	r0, r4
 8006162:	f7fc feb1 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8c3 40f4 	str.w	r4, [r3, #244]	@ 0xf4
	LabelTemperatura->CambiaPosicion(5,65);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006172:	4618      	mov	r0, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	3350      	adds	r3, #80	@ 0x50
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2241      	movs	r2, #65	@ 0x41
 8006182:	2105      	movs	r1, #5
 8006184:	4798      	blx	r3
	int centroX = DameCentroX();
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4618      	mov	r0, r3
 800618a:	f7fd fb01 	bl	8003790 <_ZN14CRectanguloTft11DameCentroXEv>
 800618e:	60f8      	str	r0, [r7, #12]
	LabelTemperaturas->CambiaPosicion(centroX - 150 / 2, 95);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006196:	4618      	mov	r0, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	3350      	adds	r3, #80	@ 0x50
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	f1a2 014b 	sub.w	r1, r2, #75	@ 0x4b
 80061aa:	225f      	movs	r2, #95	@ 0x5f
 80061ac:	4798      	blx	r3
	LabelAire1->CambiaPosicion(5, 135);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80061b4:	4618      	mov	r0, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	3350      	adds	r3, #80	@ 0x50
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2287      	movs	r2, #135	@ 0x87
 80061c4:	2105      	movs	r1, #5
 80061c6:	4798      	blx	r3
	LabelAire2->CambiaPosicion(110, 135);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80061ce:	4618      	mov	r0, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	3350      	adds	r3, #80	@ 0x50
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2287      	movs	r2, #135	@ 0x87
 80061de:	216e      	movs	r1, #110	@ 0x6e
 80061e0:	4798      	blx	r3
	LabelEstado->CambiaPosicion(5, 175);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80061e8:	4618      	mov	r0, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	3350      	adds	r3, #80	@ 0x50
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	22af      	movs	r2, #175	@ 0xaf
 80061f8:	2105      	movs	r1, #5
 80061fa:	4798      	blx	r3

}
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4618      	mov	r0, r3
 8006200:	3714      	adds	r7, #20
 8006202:	46bd      	mov	sp, r7
 8006204:	bd90      	pop	{r4, r7, pc}
 8006206:	bf00      	nop
 8006208:	08015414 	.word	0x08015414
 800620c:	080154c8 	.word	0x080154c8
 8006210:	080148e0 	.word	0x080148e0
 8006214:	080148f0 	.word	0x080148f0

08006218 <_ZN16CPantallaMemoria17GuardaTemperaturaEv>:


 void CPantallaMemoria::GuardaTemperatura()
 {
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 }
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <_ZN16CPantallaMemoria4ShowEv>:


 void CPantallaMemoria::Show()
 {
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
	 CPantallaManual::Show();
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4618      	mov	r0, r3
 8006238:	f7ff fea6 	bl	8005f88 <_ZN15CPantallaManual4ShowEv>
 	//leo la temperatura desde la memoria
	LabelMemoria->SetTexto((char*)"Memoria: %d", NumeroMemoria);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 00f4 	ldr.w	r0, [r3, #244]	@ 0xf4
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8006248:	461a      	mov	r2, r3
 800624a:	4916      	ldr	r1, [pc, #88]	@ (80062a4 <_ZN16CPantallaMemoria4ShowEv+0x78>)
 800624c:	f7fc fe76 	bl	8002f3c <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelMemoria->Show();
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	334c      	adds	r3, #76	@ 0x4c
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4610      	mov	r0, r2
 8006264:	4798      	blx	r3
	LeeDatosMemoria();
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f840 	bl	80062ec <_ZN16CPantallaMemoria15LeeDatosMemoriaEv>
	Estacion->SetTemperatura(Temperatura);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	330c      	adds	r3, #12
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	f8d2 20d0 	ldr.w	r2, [r2, #208]	@ 0xd0
 8006284:	4611      	mov	r1, r2
 8006286:	4798      	blx	r3
	VelocidadAireInicialPotenciometro=ManejadorControles->GetNivelAire();
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800628e:	4618      	mov	r0, r3
 8006290:	f004 f8df 	bl	800a452 <_ZN19CManejadorControles12GetNivelAireEv>
 8006294:	4602      	mov	r2, r0
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
 }
 800629c:	bf00      	nop
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	080148fc 	.word	0x080148fc

080062a8 <_ZN16CPantallaMemoria10SetMemoriaEi>:


void CPantallaMemoria::SetMemoria(int numeroMemoria)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
	NumeroMemoria=numeroMemoria;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	683a      	ldr	r2, [r7, #0]
 80062b6:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
//	DireccionMemoria=DameDireccionMemoria();
}
 80062ba:	bf00      	nop
 80062bc:	370c      	adds	r7, #12
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
	...

080062c8 <_ZN16CPantallaMemoria23OnBotonCuatroClickEventEv>:


void CPantallaMemoria::OnBotonCuatroClickEvent()
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaManual();
 80062d0:	4803      	ldr	r0, [pc, #12]	@ (80062e0 <_ZN16CPantallaMemoria23OnBotonCuatroClickEventEv+0x18>)
 80062d2:	f7fd fd95 	bl	8003e00 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
}
 80062d6:	bf00      	nop
 80062d8:	3708      	adds	r7, #8
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	20000258 	.word	0x20000258

080062e4 <_ZThn48_N16CPantallaMemoria23OnBotonCuatroClickEventEv>:
	virtual void OnBotonCuatroClickEvent();
 80062e4:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80062e8:	f7ff bfee 	b.w	80062c8 <_ZN16CPantallaMemoria23OnBotonCuatroClickEventEv>

080062ec <_ZN16CPantallaMemoria15LeeDatosMemoriaEv>:

void CPantallaMemoria::LeeDatosMemoria()
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]

	switch(NumeroMemoria)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80062fa:	2b03      	cmp	r3, #3
 80062fc:	d024      	beq.n	8006348 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x5c>
 80062fe:	2b03      	cmp	r3, #3
 8006300:	dc31      	bgt.n	8006366 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x7a>
 8006302:	2b01      	cmp	r3, #1
 8006304:	d002      	beq.n	800630c <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x20>
 8006306:	2b02      	cmp	r3, #2
 8006308:	d00f      	beq.n	800632a <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x3e>
		Temperatura=Eprom.DameTemperatuarMemoria3();
		VelocidadAire=Eprom.DameVelocidadMemoria3();
		break;
	}

}
 800630a:	e02c      	b.n	8006366 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x7a>
		Temperatura=Eprom.DameTemperatuarMemoria1();
 800630c:	4818      	ldr	r0, [pc, #96]	@ (8006370 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x84>)
 800630e:	f7fb f9d7 	bl	80016c0 <_ZN6CEprom23DameTemperatuarMemoria1Ev>
 8006312:	4602      	mov	r2, r0
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
		VelocidadAire=Eprom.DameVelocidadMemoria1();
 800631a:	4815      	ldr	r0, [pc, #84]	@ (8006370 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x84>)
 800631c:	f7fb f9e2 	bl	80016e4 <_ZN6CEprom21DameVelocidadMemoria1Ev>
 8006320:	4602      	mov	r2, r0
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
		break;
 8006328:	e01d      	b.n	8006366 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x7a>
		Temperatura=Eprom.DameTemperatuarMemoria2();
 800632a:	4811      	ldr	r0, [pc, #68]	@ (8006370 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x84>)
 800632c:	f7fb fa1c 	bl	8001768 <_ZN6CEprom23DameTemperatuarMemoria2Ev>
 8006330:	4602      	mov	r2, r0
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
		VelocidadAire=Eprom.DameVelocidadMemoria2();
 8006338:	480d      	ldr	r0, [pc, #52]	@ (8006370 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x84>)
 800633a:	f7fb fa27 	bl	800178c <_ZN6CEprom21DameVelocidadMemoria2Ev>
 800633e:	4602      	mov	r2, r0
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
		break;
 8006346:	e00e      	b.n	8006366 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x7a>
		Temperatura=Eprom.DameTemperatuarMemoria3();
 8006348:	4809      	ldr	r0, [pc, #36]	@ (8006370 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x84>)
 800634a:	f7fb fa61 	bl	8001810 <_ZN6CEprom23DameTemperatuarMemoria3Ev>
 800634e:	4602      	mov	r2, r0
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
		VelocidadAire=Eprom.DameVelocidadMemoria3();
 8006356:	4806      	ldr	r0, [pc, #24]	@ (8006370 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x84>)
 8006358:	f7fb fa6c 	bl	8001834 <_ZN6CEprom21DameVelocidadMemoria3Ev>
 800635c:	4602      	mov	r2, r0
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
		break;
 8006364:	bf00      	nop
}
 8006366:	bf00      	nop
 8006368:	3708      	adds	r7, #8
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	20000318 	.word	0x20000318

08006374 <_ZN16CPantallaMemoria16LeeDatosEstacionEv>:
void CPantallaMemoria::LeeDatosEstacion()
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
	CPantallaManual::LeeDatosEstacion();
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4618      	mov	r0, r3
 8006380:	f7ff fc10 	bl	8005ba4 <_ZN15CPantallaManual16LeeDatosEstacionEv>
	int velocidad=ManejadorControles->GetNivelAire();
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800638a:	4618      	mov	r0, r3
 800638c:	f004 f861 	bl	800a452 <_ZN19CManejadorControles12GetNivelAireEv>
 8006390:	60f8      	str	r0, [r7, #12]
	if(VelocidadAireInicialPotenciometro>velocidad+DiferenciaAire ||VelocidadAireInicialPotenciometro<velocidad-DiferenciaAire)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 10fc 	ldr.w	r1, [r3, #252]	@ 0xfc
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	440b      	add	r3, r1
 80063a2:	429a      	cmp	r2, r3
 80063a4:	dc09      	bgt.n	80063ba <_ZN16CPantallaMemoria16LeeDatosEstacionEv+0x46>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80063b2:	68f9      	ldr	r1, [r7, #12]
 80063b4:	1acb      	subs	r3, r1, r3
 80063b6:	429a      	cmp	r2, r3
 80063b8:	da08      	bge.n	80063cc <_ZN16CPantallaMemoria16LeeDatosEstacionEv+0x58>
	{
		NivelAire =velocidad;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
		CambioNIvelAire=true;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
 80063ca:	e00a      	b.n	80063e2 <_ZN16CPantallaMemoria16LeeDatosEstacionEv+0x6e>
	}
	else
	{
		NivelAire =VelocidadAire;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
		CambioNIvelAire=false;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
	}
}
 80063e0:	bf00      	nop
 80063e2:	bf00      	nop
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
	...

080063ec <_ZN16CPantallaMemoria19OnPerillaIncrementoEv>:
void CPantallaMemoria::OnPerillaIncremento()
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaManual();
 80063f4:	4803      	ldr	r0, [pc, #12]	@ (8006404 <_ZN16CPantallaMemoria19OnPerillaIncrementoEv+0x18>)
 80063f6:	f7fd fd03 	bl	8003e00 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
}
 80063fa:	bf00      	nop
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	20000258 	.word	0x20000258

08006408 <_ZThn48_N16CPantallaMemoria19OnPerillaIncrementoEv>:
	virtual void OnPerillaIncremento();
 8006408:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800640c:	f7ff bfee 	b.w	80063ec <_ZN16CPantallaMemoria19OnPerillaIncrementoEv>

08006410 <_ZN16CPantallaMemoria19OnPerillaDecrementoEv>:
void CPantallaMemoria::OnPerillaDecremento()
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaManual();
 8006418:	4803      	ldr	r0, [pc, #12]	@ (8006428 <_ZN16CPantallaMemoria19OnPerillaDecrementoEv+0x18>)
 800641a:	f7fd fcf1 	bl	8003e00 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
}
 800641e:	bf00      	nop
 8006420:	3708      	adds	r7, #8
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	20000258 	.word	0x20000258

0800642c <_ZThn48_N16CPantallaMemoria19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 800642c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8006430:	f7ff bfee 	b.w	8006410 <_ZN16CPantallaMemoria19OnPerillaDecrementoEv>

08006434 <_ZN16CPantallaMemoria18MuestraInformacionEb>:
void CPantallaMemoria::MuestraInformacion(bool forzar)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	460b      	mov	r3, r1
 800643e:	70fb      	strb	r3, [r7, #3]
		LeeDatosEstacion();
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	339c      	adds	r3, #156	@ 0x9c
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	4798      	blx	r3
		if(CambioNIvelAire==true)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 8006452:	2b01      	cmp	r3, #1
 8006454:	d103      	bne.n	800645e <_ZN16CPantallaMemoria18MuestraInformacionEb+0x2a>
		{
			ManejadorPantallas.MuestraPantallaManual();
 8006456:	4811      	ldr	r0, [pc, #68]	@ (800649c <_ZN16CPantallaMemoria18MuestraInformacionEb+0x68>)
 8006458:	f7fd fcd2 	bl	8003e00 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
			return;
 800645c:	e01b      	b.n	8006496 <_ZN16CPantallaMemoria18MuestraInformacionEb+0x62>
		}
		MuestraTemperaturas(forzar);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	78fa      	ldrb	r2, [r7, #3]
 8006462:	4611      	mov	r1, r2
 8006464:	4618      	mov	r0, r3
 8006466:	f7ff fbef 	bl	8005c48 <_ZN15CPantallaManual19MuestraTemperaturasEb>
		MuestraEstado(forzar);
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	33a0      	adds	r3, #160	@ 0xa0
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	78f9      	ldrb	r1, [r7, #3]
 8006476:	4610      	mov	r0, r2
 8006478:	4798      	blx	r3
		MuestraNivelAire(forzar);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	78fa      	ldrb	r2, [r7, #3]
 800647e:	4611      	mov	r1, r2
 8006480:	4618      	mov	r0, r3
 8006482:	f7ff fc45 	bl	8005d10 <_ZN15CPantallaManual16MuestraNivelAireEb>
		//marco como visible
		SetVisible(true);
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	336c      	adds	r3, #108	@ 0x6c
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2101      	movs	r1, #1
 8006492:	4610      	mov	r0, r2
 8006494:	4798      	blx	r3
}
 8006496:	3708      	adds	r7, #8
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}
 800649c:	20000258 	.word	0x20000258

080064a0 <_ZN16CPantallaMemoria11SetEstacionEP13CEstacionBase>:

void CPantallaMemoria::SetEstacion(CEstacionBase *estacion)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
	CPantallaBase::SetEstacion(estacion);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6839      	ldr	r1, [r7, #0]
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7fc ffe3 	bl	800347a <_ZN13CPantallaBase11SetEstacionEP13CEstacionBase>
	Estacion->ActivarCalefactor();
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	3334      	adds	r3, #52	@ 0x34
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4610      	mov	r0, r2
 80064c8:	4798      	blx	r3
}
 80064ca:	bf00      	nop
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
	...

080064d4 <_ZN17CPantallaMenuBaseC1EPc>:
 *      Author: W10
 */

#include <GUI/PantallaMenuBase/CPantallaMenuBase.hpp>

CPantallaMenuBase::CPantallaMenuBase(char *titulo):
 80064d4:	b590      	push	{r4, r7, lr}
 80064d6:	b087      	sub	sp, #28
 80064d8:	af04      	add	r7, sp, #16
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
	CPantallaBase(1,titulo)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	683a      	ldr	r2, [r7, #0]
 80064e2:	2101      	movs	r1, #1
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7fc ff3b 	bl	8003360 <_ZN13CPantallaBaseC1EiPc>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	33ac      	adds	r3, #172	@ 0xac
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7fd ff0c 	bl	800430c <_ZN20CManejadorEventoMenuC1Ev>
 80064f4:	4a1e      	ldr	r2, [pc, #120]	@ (8006570 <_ZN17CPantallaMenuBaseC1EPc+0x9c>)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	601a      	str	r2, [r3, #0]
 80064fa:	4a1e      	ldr	r2, [pc, #120]	@ (8006574 <_ZN17CPantallaMenuBaseC1EPc+0xa0>)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8006500:	4a1d      	ldr	r2, [pc, #116]	@ (8006578 <_ZN17CPantallaMenuBaseC1EPc+0xa4>)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

{
	// TODO Auto-generated constructor stub
	Menu=new CMenu(4,30,310, 210,COLOR::WHITE,1, COLOR::RED);
 8006508:	2080      	movs	r0, #128	@ 0x80
 800650a:	f00b fac1 	bl	8011a90 <_Znwj>
 800650e:	4603      	mov	r3, r0
 8006510:	461c      	mov	r4, r3
 8006512:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8006516:	9303      	str	r3, [sp, #12]
 8006518:	2301      	movs	r3, #1
 800651a:	9302      	str	r3, [sp, #8]
 800651c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006520:	9301      	str	r3, [sp, #4]
 8006522:	23d2      	movs	r3, #210	@ 0xd2
 8006524:	9300      	str	r3, [sp, #0]
 8006526:	f44f 739b 	mov.w	r3, #310	@ 0x136
 800652a:	221e      	movs	r2, #30
 800652c:	2104      	movs	r1, #4
 800652e:	4620      	mov	r0, r4
 8006530:	f7fd ff28 	bl	8004384 <_ZN5CMenuC1Eiiiiiii>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8c3 40b0 	str.w	r4, [r3, #176]	@ 0xb0
	Menu->AsignaManejadorEventosMenu(this);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	33ac      	adds	r3, #172	@ 0xac
 8006544:	4619      	mov	r1, r3
 8006546:	4610      	mov	r0, r2
 8006548:	f7fe f9b1 	bl	80048ae <_ZN5CMenu26AsignaManejadorEventosMenuEP20CManejadorEventoMenu>
	Menu->AsignaColoresItems(COLOR::BLACK, 0X776F, COLOR::WHITE, COLOR::BLACK);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8006552:	2300      	movs	r3, #0
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800655a:	f247 726f 	movw	r2, #30575	@ 0x776f
 800655e:	2100      	movs	r1, #0
 8006560:	f7fd ff89 	bl	8004476 <_ZN5CMenu18AsignaColoresItemsEiiii>

}
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4618      	mov	r0, r3
 8006568:	370c      	adds	r7, #12
 800656a:	46bd      	mov	sp, r7
 800656c:	bd90      	pop	{r4, r7, pc}
 800656e:	bf00      	nop
 8006570:	080154fc 	.word	0x080154fc
 8006574:	08015594 	.word	0x08015594
 8006578:	080155c8 	.word	0x080155c8

0800657c <_ZN17CPantallaMenuBaseD1Ev>:

CPantallaMenuBase::~CPantallaMenuBase()
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	4a0b      	ldr	r2, [pc, #44]	@ (80065b4 <_ZN17CPantallaMenuBaseD1Ev+0x38>)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	601a      	str	r2, [r3, #0]
 800658a:	4a0b      	ldr	r2, [pc, #44]	@ (80065b8 <_ZN17CPantallaMenuBaseD1Ev+0x3c>)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006590:	4a0a      	ldr	r2, [pc, #40]	@ (80065bc <_ZN17CPantallaMenuBaseD1Ev+0x40>)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	// TODO Auto-generated destructor stub
}
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	33ac      	adds	r3, #172	@ 0xac
 800659c:	4618      	mov	r0, r3
 800659e:	f7fd fec5 	bl	800432c <_ZN20CManejadorEventoMenuD1Ev>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7fc fea7 	bl	80032f8 <_ZN13CPantallaBaseD1Ev>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4618      	mov	r0, r3
 80065ae:	3708      	adds	r7, #8
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	080154fc 	.word	0x080154fc
 80065b8:	08015594 	.word	0x08015594
 80065bc:	080155c8 	.word	0x080155c8

080065c0 <_ZThn48_N17CPantallaMenuBaseD1Ev>:
protected:
	CMenu* Menu;

public:
	CPantallaMenuBase(char *titulo);
	virtual ~CPantallaMenuBase();
 80065c0:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80065c4:	f7ff bfda 	b.w	800657c <_ZN17CPantallaMenuBaseD1Ev>

080065c8 <_ZThn172_N17CPantallaMenuBaseD1Ev>:
 80065c8:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 80065cc:	f7ff bfd6 	b.w	800657c <_ZN17CPantallaMenuBaseD1Ev>

080065d0 <_ZN17CPantallaMenuBaseD0Ev>:
CPantallaMenuBase::~CPantallaMenuBase()
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
}
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f7ff ffcf 	bl	800657c <_ZN17CPantallaMenuBaseD1Ev>
 80065de:	21b4      	movs	r1, #180	@ 0xb4
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f00b fa53 	bl	8011a8c <_ZdlPvj>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4618      	mov	r0, r3
 80065ea:	3708      	adds	r7, #8
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <_ZThn172_N17CPantallaMenuBaseD0Ev>:
 80065f0:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 80065f4:	f7ff bfec 	b.w	80065d0 <_ZN17CPantallaMenuBaseD0Ev>

080065f8 <_ZThn48_N17CPantallaMenuBaseD0Ev>:
 80065f8:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80065fc:	f7ff bfe8 	b.w	80065d0 <_ZN17CPantallaMenuBaseD0Ev>

08006600 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>:

void CPantallaMenuBase::AgregaMenuItem(char *texto, int Opcion)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
	Menu->AgregaItem(texto, Opcion);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8006612:	2300      	movs	r3, #0
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	68b9      	ldr	r1, [r7, #8]
 8006618:	f7fd ff90 	bl	800453c <_ZN5CMenu10AgregaItemEPcib>
}
 800661c:	bf00      	nop
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <_ZN17CPantallaMenuBase19OnPerillaIncrementoEv>:
void CPantallaMenuBase::OnPerillaIncremento()
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
	Menu->OnSeleccionaSiguiente();
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006632:	4618      	mov	r0, r3
 8006634:	f7fd ffea 	bl	800460c <_ZN5CMenu21OnSeleccionaSiguienteEv>
}
 8006638:	bf00      	nop
 800663a:	3708      	adds	r7, #8
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <_ZThn48_N17CPantallaMenuBase19OnPerillaIncrementoEv>:
	void AgregaMenuItem(char *texto, int Opcion);
	virtual void AgregaMenuItem(char *texto, int Opcion, int x, int y, int ancho,int alto);
	virtual void AgregaMenuItem(char *texto, int Opcion, int x, int y, int ancho,int alto,int colorFondo, int colorTexto);
	virtual void OnPerillaIncremento();
 8006640:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8006644:	f7ff bfee 	b.w	8006624 <_ZN17CPantallaMenuBase19OnPerillaIncrementoEv>

08006648 <_ZN17CPantallaMenuBase19OnPerillaDecrementoEv>:
void CPantallaMenuBase::OnPerillaDecremento()
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
	Menu->OnSeleccionaAnterior();
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006656:	4618      	mov	r0, r3
 8006658:	f7fe f826 	bl	80046a8 <_ZN5CMenu20OnSeleccionaAnteriorEv>
}
 800665c:	bf00      	nop
 800665e:	3708      	adds	r7, #8
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <_ZThn48_N17CPantallaMenuBase19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 8006664:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8006668:	f7ff bfee 	b.w	8006648 <_ZN17CPantallaMenuBase19OnPerillaDecrementoEv>

0800666c <_ZN17CPantallaMenuBase24OnBotonPerillaClickEventEv>:
void CPantallaMenuBase::OnBotonPerillaClickEvent()
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
	Menu->OnClickSeleccionado();
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800667a:	4618      	mov	r0, r3
 800667c:	f7fe f87f 	bl	800477e <_ZN5CMenu19OnClickSeleccionadoEv>
}
 8006680:	bf00      	nop
 8006682:	3708      	adds	r7, #8
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <_ZThn48_N17CPantallaMenuBase24OnBotonPerillaClickEventEv>:
	virtual void OnBotonPerillaClickEvent();
 8006688:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800668c:	f7ff bfee 	b.w	800666c <_ZN17CPantallaMenuBase24OnBotonPerillaClickEventEv>

08006690 <_ZN17CPantallaMenuBase4ShowEv>:
void CPantallaMenuBase::Show()
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
	CPantallaBase::Show();
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4618      	mov	r0, r3
 800669c:	f7fc fed2 	bl	8003444 <_ZN13CPantallaBase4ShowEv>
	Menu->Show();
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	334c      	adds	r3, #76	@ 0x4c
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4610      	mov	r0, r2
 80066b4:	4798      	blx	r3
	SetVisible(true);
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	336c      	adds	r3, #108	@ 0x6c
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2101      	movs	r1, #1
 80066c2:	4610      	mov	r0, r2
 80066c4:	4798      	blx	r3
}
 80066c6:	bf00      	nop
 80066c8:	3708      	adds	r7, #8
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <_ZN17CPantallaMenuBase8RefrescaEv>:
void CPantallaMenuBase::Refresca()
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b082      	sub	sp, #8
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
	if(EsVisible()==false)
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	3368      	adds	r3, #104	@ 0x68
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4610      	mov	r0, r2
 80066e2:	4798      	blx	r3
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	bf0c      	ite	eq
 80066ea:	2301      	moveq	r3, #1
 80066ec:	2300      	movne	r3, #0
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d005      	beq.n	8006700 <_ZN17CPantallaMenuBase8RefrescaEv+0x32>
		Show();
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	334c      	adds	r3, #76	@ 0x4c
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	4798      	blx	r3
}
 8006700:	bf00      	nop
 8006702:	3708      	adds	r7, #8
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>:
void CPantallaMenuBase::AgregaMenuItem(char *texto, int Opcion, int x, int y,int ancho,int alto)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b088      	sub	sp, #32
 800670c:	af04      	add	r7, sp, #16
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
 8006714:	603b      	str	r3, [r7, #0]
	Menu->AgregaItem(texto, Opcion,x,y,ancho,alto);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 800671c:	2300      	movs	r3, #0
 800671e:	9303      	str	r3, [sp, #12]
 8006720:	6a3b      	ldr	r3, [r7, #32]
 8006722:	9302      	str	r3, [sp, #8]
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	9301      	str	r3, [sp, #4]
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	68b9      	ldr	r1, [r7, #8]
 8006732:	f7fe f8ca 	bl	80048ca <_ZN5CMenu10AgregaItemEPciiiiib>

}
 8006736:	bf00      	nop
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiiiii>:
void CPantallaMenuBase::AgregaMenuItem(char *texto, int Opcion, int x, int y, int ancho,int alto,int colorFondo, int colorTexto)
{
 800673e:	b580      	push	{r7, lr}
 8006740:	b08a      	sub	sp, #40	@ 0x28
 8006742:	af06      	add	r7, sp, #24
 8006744:	60f8      	str	r0, [r7, #12]
 8006746:	60b9      	str	r1, [r7, #8]
 8006748:	607a      	str	r2, [r7, #4]
 800674a:	603b      	str	r3, [r7, #0]
	Menu->AgregaItem(texto, Opcion,x,y,ancho,alto,colorFondo,colorTexto);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8006752:	2300      	movs	r3, #0
 8006754:	9305      	str	r3, [sp, #20]
 8006756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006758:	9304      	str	r3, [sp, #16]
 800675a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675c:	9303      	str	r3, [sp, #12]
 800675e:	6a3b      	ldr	r3, [r7, #32]
 8006760:	9302      	str	r3, [sp, #8]
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	9301      	str	r3, [sp, #4]
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	9300      	str	r3, [sp, #0]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	68b9      	ldr	r1, [r7, #8]
 8006770:	f7fe f93d 	bl	80049ee <_ZN5CMenu10AgregaItemEPciiiiiiib>

}
 8006774:	bf00      	nop
 8006776:	3710      	adds	r7, #16
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <_ZN17CPantallaMenuBase9BorraMenuEv>:
void CPantallaMenuBase::BorraMenu()
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
	Menu->BorrarItemns();
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800678a:	4618      	mov	r0, r3
 800678c:	f7fe f9af 	bl	8004aee <_ZN5CMenu12BorrarItemnsEv>
}
 8006790:	bf00      	nop
 8006792:	3708      	adds	r7, #8
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <_ZN14CMenuPrincipalC1Ev>:
#include "GUI/Menu/CMenuItem.hpp"
#include "GUI/CEtiquetaTft.hpp"
#include "GUI/Menu/CMenu.hpp"
#include "string.h"

CMenuPrincipal::CMenuPrincipal():
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
	CPantallaMenuBase((char*) " Menu Principal")
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	491b      	ldr	r1, [pc, #108]	@ (8006810 <_ZN14CMenuPrincipalC1Ev+0x78>)
 80067a4:	4618      	mov	r0, r3
 80067a6:	f7ff fe95 	bl	80064d4 <_ZN17CPantallaMenuBaseC1EPc>
 80067aa:	4a1a      	ldr	r2, [pc, #104]	@ (8006814 <_ZN14CMenuPrincipalC1Ev+0x7c>)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	601a      	str	r2, [r3, #0]
 80067b0:	4a19      	ldr	r2, [pc, #100]	@ (8006818 <_ZN14CMenuPrincipalC1Ev+0x80>)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80067b6:	4a19      	ldr	r2, [pc, #100]	@ (800681c <_ZN14CMenuPrincipalC1Ev+0x84>)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	AgregaMenuItem((char*)"Conf Memoria 1", MENU_PRINCIPAL::MENU_MEMORIA_1);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	4917      	ldr	r1, [pc, #92]	@ (8006820 <_ZN14CMenuPrincipalC1Ev+0x88>)
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7ff ff1b 	bl	8006600 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"Conf Memoria 2",(int)MENU_PRINCIPAL::MENU_MEMORIA_2);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2202      	movs	r2, #2
 80067ce:	4915      	ldr	r1, [pc, #84]	@ (8006824 <_ZN14CMenuPrincipalC1Ev+0x8c>)
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7ff ff15 	bl	8006600 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"Conf Memoria 3", (int)MENU_PRINCIPAL::MENU_MEMORIA_3);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2203      	movs	r2, #3
 80067da:	4913      	ldr	r1, [pc, #76]	@ (8006828 <_ZN14CMenuPrincipalC1Ev+0x90>)
 80067dc:	4618      	mov	r0, r3
 80067de:	f7ff ff0f 	bl	8006600 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"Calibrar", (int)MENU_PRINCIPAL::MENU_CALIBRAR);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2205      	movs	r2, #5
 80067e6:	4911      	ldr	r1, [pc, #68]	@ (800682c <_ZN14CMenuPrincipalC1Ev+0x94>)
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7ff ff09 	bl	8006600 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"Rampa", (int)MENU_PRINCIPAL::MENU_RAMPA);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2204      	movs	r2, #4
 80067f2:	490f      	ldr	r1, [pc, #60]	@ (8006830 <_ZN14CMenuPrincipalC1Ev+0x98>)
 80067f4:	4618      	mov	r0, r3
 80067f6:	f7ff ff03 	bl	8006600 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"Salir", MENU_SALIR);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	490d      	ldr	r1, [pc, #52]	@ (8006834 <_ZN14CMenuPrincipalC1Ev+0x9c>)
 8006800:	4618      	mov	r0, r3
 8006802:	f7ff fefd 	bl	8006600 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
}
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4618      	mov	r0, r3
 800680a:	3708      	adds	r7, #8
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	08014908 	.word	0x08014908
 8006814:	080155dc 	.word	0x080155dc
 8006818:	08015688 	.word	0x08015688
 800681c:	080156bc 	.word	0x080156bc
 8006820:	08014918 	.word	0x08014918
 8006824:	08014928 	.word	0x08014928
 8006828:	08014938 	.word	0x08014938
 800682c:	08014948 	.word	0x08014948
 8006830:	08014954 	.word	0x08014954
 8006834:	0801495c 	.word	0x0801495c

08006838 <_ZN14CMenuPrincipalD1Ev>:

CMenuPrincipal::~CMenuPrincipal()
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	4a09      	ldr	r2, [pc, #36]	@ (8006868 <_ZN14CMenuPrincipalD1Ev+0x30>)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	601a      	str	r2, [r3, #0]
 8006846:	4a09      	ldr	r2, [pc, #36]	@ (800686c <_ZN14CMenuPrincipalD1Ev+0x34>)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	631a      	str	r2, [r3, #48]	@ 0x30
 800684c:	4a08      	ldr	r2, [pc, #32]	@ (8006870 <_ZN14CMenuPrincipalD1Ev+0x38>)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	// TODO Auto-generated destructor stub
}
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4618      	mov	r0, r3
 8006858:	f7ff fe90 	bl	800657c <_ZN17CPantallaMenuBaseD1Ev>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4618      	mov	r0, r3
 8006860:	3708      	adds	r7, #8
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	080155dc 	.word	0x080155dc
 800686c:	08015688 	.word	0x08015688
 8006870:	080156bc 	.word	0x080156bc

08006874 <_ZThn48_N14CMenuPrincipalD1Ev>:
	CEstacionBase *Estacion;
	CMenuItem* item1,*item2;

public:
	CMenuPrincipal();
	virtual ~CMenuPrincipal();
 8006874:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8006878:	f7ff bfde 	b.w	8006838 <_ZN14CMenuPrincipalD1Ev>

0800687c <_ZThn172_N14CMenuPrincipalD1Ev>:
 800687c:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8006880:	f7ff bfda 	b.w	8006838 <_ZN14CMenuPrincipalD1Ev>

08006884 <_ZN14CMenuPrincipalD0Ev>:
CMenuPrincipal::~CMenuPrincipal()
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
}
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f7ff ffd3 	bl	8006838 <_ZN14CMenuPrincipalD1Ev>
 8006892:	21c0      	movs	r1, #192	@ 0xc0
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f00b f8f9 	bl	8011a8c <_ZdlPvj>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4618      	mov	r0, r3
 800689e:	3708      	adds	r7, #8
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <_ZThn172_N14CMenuPrincipalD0Ev>:
 80068a4:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 80068a8:	f7ff bfec 	b.w	8006884 <_ZN14CMenuPrincipalD0Ev>

080068ac <_ZThn48_N14CMenuPrincipalD0Ev>:
 80068ac:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80068b0:	f7ff bfe8 	b.w	8006884 <_ZN14CMenuPrincipalD0Ev>

080068b4 <_ZN14CMenuPrincipal11OnMenuEventEi>:
void CMenuPrincipal::OnMenuEvent(int identificador)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
	switch(identificador)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2b05      	cmp	r3, #5
 80068c2:	d820      	bhi.n	8006906 <_ZN14CMenuPrincipal11OnMenuEventEi+0x52>
 80068c4:	a201      	add	r2, pc, #4	@ (adr r2, 80068cc <_ZN14CMenuPrincipal11OnMenuEventEi+0x18>)
 80068c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ca:	bf00      	nop
 80068cc:	080068e5 	.word	0x080068e5
 80068d0:	080068ed 	.word	0x080068ed
 80068d4:	080068ed 	.word	0x080068ed
 80068d8:	080068ed 	.word	0x080068ed
 80068dc:	080068ff 	.word	0x080068ff
 80068e0:	080068f7 	.word	0x080068f7
	{
	case MENU_PRINCIPAL::MENU_SALIR:
		ManejadorPantallas.MuestraPantallaManual();
 80068e4:	480a      	ldr	r0, [pc, #40]	@ (8006910 <_ZN14CMenuPrincipal11OnMenuEventEi+0x5c>)
 80068e6:	f7fd fa8b 	bl	8003e00 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
		break;
 80068ea:	e00c      	b.n	8006906 <_ZN14CMenuPrincipal11OnMenuEventEi+0x52>
	case MENU_PRINCIPAL::MENU_MEMORIA_1:
	case MENU_PRINCIPAL::MENU_MEMORIA_2:
	case MENU_PRINCIPAL::MENU_MEMORIA_3:
		ManejadorPantallas.MuestraPantallaConfiguracionMemoria(identificador);
 80068ec:	6839      	ldr	r1, [r7, #0]
 80068ee:	4808      	ldr	r0, [pc, #32]	@ (8006910 <_ZN14CMenuPrincipal11OnMenuEventEi+0x5c>)
 80068f0:	f7fd fb5b 	bl	8003faa <_ZN19CManejadorPantallas35MuestraPantallaConfiguracionMemoriaEi>
		break;
 80068f4:	e007      	b.n	8006906 <_ZN14CMenuPrincipal11OnMenuEventEi+0x52>
	case MENU_PRINCIPAL::MENU_CALIBRAR:
		ManejadorPantallas.MuestraCPantallaCalibracion();
 80068f6:	4806      	ldr	r0, [pc, #24]	@ (8006910 <_ZN14CMenuPrincipal11OnMenuEventEi+0x5c>)
 80068f8:	f7fd fba2 	bl	8004040 <_ZN19CManejadorPantallas27MuestraCPantallaCalibracionEv>
		break;
 80068fc:	e003      	b.n	8006906 <_ZN14CMenuPrincipal11OnMenuEventEi+0x52>
	case MENU_PRINCIPAL::MENU_RAMPA:
		ManejadorPantallas.MuestraMenuRampa();
 80068fe:	4804      	ldr	r0, [pc, #16]	@ (8006910 <_ZN14CMenuPrincipal11OnMenuEventEi+0x5c>)
 8006900:	f7fd fab6 	bl	8003e70 <_ZN19CManejadorPantallas16MuestraMenuRampaEv>
		break;
 8006904:	bf00      	nop
	}

}
 8006906:	bf00      	nop
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	20000258 	.word	0x20000258

08006914 <_ZThn172_N14CMenuPrincipal11OnMenuEventEi>:
	virtual void OnBotonCuatroClickEvent();
	virtual void OnMenuEvent(int identificador);
 8006914:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8006918:	f7ff bfcc 	b.w	80068b4 <_ZN14CMenuPrincipal11OnMenuEventEi>

0800691c <_ZN14CMenuPrincipal21OnBotonTresClickEventEv>:

void CMenuPrincipal::OnBotonTresClickEvent()
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(3);
 8006924:	2103      	movs	r1, #3
 8006926:	4803      	ldr	r0, [pc, #12]	@ (8006934 <_ZN14CMenuPrincipal21OnBotonTresClickEventEv+0x18>)
 8006928:	f7fd fb66 	bl	8003ff8 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 800692c:	bf00      	nop
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	20000258 	.word	0x20000258

08006938 <_ZThn48_N14CMenuPrincipal21OnBotonTresClickEventEv>:

	virtual void OnBotonUnoClickEvent();
	virtual void OnBotonDosClickEvent();
	virtual void OnBotonTresClickEvent();
 8006938:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800693c:	f7ff bfee 	b.w	800691c <_ZN14CMenuPrincipal21OnBotonTresClickEventEv>

08006940 <_ZN14CMenuPrincipal20OnBotonUnoClickEventEv>:
void CMenuPrincipal::OnBotonUnoClickEvent()
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(1);
 8006948:	2101      	movs	r1, #1
 800694a:	4803      	ldr	r0, [pc, #12]	@ (8006958 <_ZN14CMenuPrincipal20OnBotonUnoClickEventEv+0x18>)
 800694c:	f7fd fb54 	bl	8003ff8 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 8006950:	bf00      	nop
 8006952:	3708      	adds	r7, #8
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	20000258 	.word	0x20000258

0800695c <_ZThn48_N14CMenuPrincipal20OnBotonUnoClickEventEv>:
	virtual void OnBotonUnoClickEvent();
 800695c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8006960:	f7ff bfee 	b.w	8006940 <_ZN14CMenuPrincipal20OnBotonUnoClickEventEv>

08006964 <_ZN14CMenuPrincipal20OnBotonDosClickEventEv>:
void CMenuPrincipal::OnBotonDosClickEvent()
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(2);
 800696c:	2102      	movs	r1, #2
 800696e:	4803      	ldr	r0, [pc, #12]	@ (800697c <_ZN14CMenuPrincipal20OnBotonDosClickEventEv+0x18>)
 8006970:	f7fd fb42 	bl	8003ff8 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 8006974:	bf00      	nop
 8006976:	3708      	adds	r7, #8
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	20000258 	.word	0x20000258

08006980 <_ZThn48_N14CMenuPrincipal20OnBotonDosClickEventEv>:
	virtual void OnBotonDosClickEvent();
 8006980:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8006984:	f7ff bfee 	b.w	8006964 <_ZN14CMenuPrincipal20OnBotonDosClickEventEv>

08006988 <_ZN14CMenuPrincipal23OnBotonCuatroClickEventEv>:
void CMenuPrincipal::OnBotonCuatroClickEvent()
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaManual();
 8006990:	4803      	ldr	r0, [pc, #12]	@ (80069a0 <_ZN14CMenuPrincipal23OnBotonCuatroClickEventEv+0x18>)
 8006992:	f7fd fa35 	bl	8003e00 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
}
 8006996:	bf00      	nop
 8006998:	3708      	adds	r7, #8
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	20000258 	.word	0x20000258

080069a4 <_ZThn48_N14CMenuPrincipal23OnBotonCuatroClickEventEv>:
	virtual void OnBotonCuatroClickEvent();
 80069a4:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80069a8:	f7ff bfee 	b.w	8006988 <_ZN14CMenuPrincipal23OnBotonCuatroClickEventEv>

080069ac <_ZN20CPantallaEdicionPasoC1Ev>:
#include <GUI/Rampa/PantallaEdicionPaso/CPantallaEdicionPaso.hpp>
#include <RapaTemperatura/CControladorRampas.hpp>
#include <GUI/ManejadorPantallas/CManejadorPantallas.hpp>
#include <RapaTemperatura/CControladorPasosRampa.hpp>

CPantallaEdicionPaso::CPantallaEdicionPaso():
 80069ac:	b590      	push	{r4, r7, lr}
 80069ae:	b08b      	sub	sp, #44	@ 0x2c
 80069b0:	af08      	add	r7, sp, #32
 80069b2:	6078      	str	r0, [r7, #4]
CPantallaBase(1, (char*)"EDITOR PASO")
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a9c      	ldr	r2, [pc, #624]	@ (8006c28 <_ZN20CPantallaEdicionPasoC1Ev+0x27c>)
 80069b8:	2101      	movs	r1, #1
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7fc fcd0 	bl	8003360 <_ZN13CPantallaBaseC1EiPc>
 80069c0:	4a9a      	ldr	r2, [pc, #616]	@ (8006c2c <_ZN20CPantallaEdicionPasoC1Ev+0x280>)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	601a      	str	r2, [r3, #0]
 80069c6:	4a9a      	ldr	r2, [pc, #616]	@ (8006c30 <_ZN20CPantallaEdicionPasoC1Ev+0x284>)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated constructor stub
	// TODO Auto-generated constructor stub
	LabelRampa=new CEtiquetaTft( 5, 35, 50, 20, COLOR::BLACK,(char*)"Memoria: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 80069cc:	20a4      	movs	r0, #164	@ 0xa4
 80069ce:	f00b f85f 	bl	8011a90 <_Znwj>
 80069d2:	4603      	mov	r3, r0
 80069d4:	461c      	mov	r4, r3
 80069d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80069da:	9306      	str	r3, [sp, #24]
 80069dc:	2300      	movs	r3, #0
 80069de:	9305      	str	r3, [sp, #20]
 80069e0:	2303      	movs	r3, #3
 80069e2:	9304      	str	r3, [sp, #16]
 80069e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80069e8:	9303      	str	r3, [sp, #12]
 80069ea:	4b92      	ldr	r3, [pc, #584]	@ (8006c34 <_ZN20CPantallaEdicionPasoC1Ev+0x288>)
 80069ec:	9302      	str	r3, [sp, #8]
 80069ee:	2300      	movs	r3, #0
 80069f0:	9301      	str	r3, [sp, #4]
 80069f2:	2314      	movs	r3, #20
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	2332      	movs	r3, #50	@ 0x32
 80069f8:	2223      	movs	r2, #35	@ 0x23
 80069fa:	2105      	movs	r1, #5
 80069fc:	4620      	mov	r0, r4
 80069fe:	f7fc fa63 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8c3 412c 	str.w	r4, [r3, #300]	@ 0x12c
	// temperatra
	LabelTemperatura = new CEtiquetaTft( 5, 65, 50, 20, COLOR::BLACK,(char*)"Temp", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8006a08:	20a4      	movs	r0, #164	@ 0xa4
 8006a0a:	f00b f841 	bl	8011a90 <_Znwj>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	461c      	mov	r4, r3
 8006a12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006a16:	9306      	str	r3, [sp, #24]
 8006a18:	2300      	movs	r3, #0
 8006a1a:	9305      	str	r3, [sp, #20]
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	9304      	str	r3, [sp, #16]
 8006a20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006a24:	9303      	str	r3, [sp, #12]
 8006a26:	4b84      	ldr	r3, [pc, #528]	@ (8006c38 <_ZN20CPantallaEdicionPasoC1Ev+0x28c>)
 8006a28:	9302      	str	r3, [sp, #8]
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	9301      	str	r3, [sp, #4]
 8006a2e:	2314      	movs	r3, #20
 8006a30:	9300      	str	r3, [sp, #0]
 8006a32:	2332      	movs	r3, #50	@ 0x32
 8006a34:	2241      	movs	r2, #65	@ 0x41
 8006a36:	2105      	movs	r1, #5
 8006a38:	4620      	mov	r0, r4
 8006a3a:	f7fc fa45 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8c3 4130 	str.w	r4, [r3, #304]	@ 0x130
	TextTemperatura = new CEtiquetaTft( 100, 65, 150, 30,COLOR::GREEN, (char*)"000/000", COLOR::BLACK, 3, 1, COLOR::RED);
 8006a44:	20a4      	movs	r0, #164	@ 0xa4
 8006a46:	f00b f823 	bl	8011a90 <_Znwj>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	461c      	mov	r4, r3
 8006a4e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8006a52:	9306      	str	r3, [sp, #24]
 8006a54:	2301      	movs	r3, #1
 8006a56:	9305      	str	r3, [sp, #20]
 8006a58:	2303      	movs	r3, #3
 8006a5a:	9304      	str	r3, [sp, #16]
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	9303      	str	r3, [sp, #12]
 8006a60:	4b76      	ldr	r3, [pc, #472]	@ (8006c3c <_ZN20CPantallaEdicionPasoC1Ev+0x290>)
 8006a62:	9302      	str	r3, [sp, #8]
 8006a64:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8006a68:	9301      	str	r3, [sp, #4]
 8006a6a:	231e      	movs	r3, #30
 8006a6c:	9300      	str	r3, [sp, #0]
 8006a6e:	2396      	movs	r3, #150	@ 0x96
 8006a70:	2241      	movs	r2, #65	@ 0x41
 8006a72:	2164      	movs	r1, #100	@ 0x64
 8006a74:	4620      	mov	r0, r4
 8006a76:	f7fc fa27 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8c3 4134 	str.w	r4, [r3, #308]	@ 0x134
//	TextTemperatura->SetSeparacion(5, 5);
	//nivel de ire
	LabelAire = new CEtiquetaTft( 5, 100, 200, 30, COLOR::BLACK,(char*) "Aire",COLOR::WHITE, 3, 0, COLOR::RED);
 8006a80:	20a4      	movs	r0, #164	@ 0xa4
 8006a82:	f00b f805 	bl	8011a90 <_Znwj>
 8006a86:	4603      	mov	r3, r0
 8006a88:	461c      	mov	r4, r3
 8006a8a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8006a8e:	9306      	str	r3, [sp, #24]
 8006a90:	2300      	movs	r3, #0
 8006a92:	9305      	str	r3, [sp, #20]
 8006a94:	2303      	movs	r3, #3
 8006a96:	9304      	str	r3, [sp, #16]
 8006a98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006a9c:	9303      	str	r3, [sp, #12]
 8006a9e:	4b68      	ldr	r3, [pc, #416]	@ (8006c40 <_ZN20CPantallaEdicionPasoC1Ev+0x294>)
 8006aa0:	9302      	str	r3, [sp, #8]
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	9301      	str	r3, [sp, #4]
 8006aa6:	231e      	movs	r3, #30
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	23c8      	movs	r3, #200	@ 0xc8
 8006aac:	2264      	movs	r2, #100	@ 0x64
 8006aae:	2105      	movs	r1, #5
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	f7fc fa09 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8c3 4138 	str.w	r4, [r3, #312]	@ 0x138
	TextAire = new CEtiquetaTft( 100, 100, 150, 30, COLOR::GREY,(char*) "00",COLOR::BLACK, 3, 0, COLOR::RED);
 8006abc:	20a4      	movs	r0, #164	@ 0xa4
 8006abe:	f00a ffe7 	bl	8011a90 <_Znwj>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	461c      	mov	r4, r3
 8006ac6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8006aca:	9306      	str	r3, [sp, #24]
 8006acc:	2300      	movs	r3, #0
 8006ace:	9305      	str	r3, [sp, #20]
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	9304      	str	r3, [sp, #16]
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	9303      	str	r3, [sp, #12]
 8006ad8:	4b5a      	ldr	r3, [pc, #360]	@ (8006c44 <_ZN20CPantallaEdicionPasoC1Ev+0x298>)
 8006ada:	9302      	str	r3, [sp, #8]
 8006adc:	f64d 63de 	movw	r3, #57054	@ 0xdede
 8006ae0:	9301      	str	r3, [sp, #4]
 8006ae2:	231e      	movs	r3, #30
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	2396      	movs	r3, #150	@ 0x96
 8006ae8:	2264      	movs	r2, #100	@ 0x64
 8006aea:	2164      	movs	r1, #100	@ 0x64
 8006aec:	4620      	mov	r0, r4
 8006aee:	f7fc f9eb 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8c3 413c 	str.w	r4, [r3, #316]	@ 0x13c
	// Tiempo
	LabelTiempo = new CEtiquetaTft( 5, 135, 200, 30, COLOR::BLACK,(char*) "TIEM",COLOR::WHITE, 3, 0, COLOR::RED);
 8006af8:	20a4      	movs	r0, #164	@ 0xa4
 8006afa:	f00a ffc9 	bl	8011a90 <_Znwj>
 8006afe:	4603      	mov	r3, r0
 8006b00:	461c      	mov	r4, r3
 8006b02:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8006b06:	9306      	str	r3, [sp, #24]
 8006b08:	2300      	movs	r3, #0
 8006b0a:	9305      	str	r3, [sp, #20]
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	9304      	str	r3, [sp, #16]
 8006b10:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006b14:	9303      	str	r3, [sp, #12]
 8006b16:	4b4c      	ldr	r3, [pc, #304]	@ (8006c48 <_ZN20CPantallaEdicionPasoC1Ev+0x29c>)
 8006b18:	9302      	str	r3, [sp, #8]
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	9301      	str	r3, [sp, #4]
 8006b1e:	231e      	movs	r3, #30
 8006b20:	9300      	str	r3, [sp, #0]
 8006b22:	23c8      	movs	r3, #200	@ 0xc8
 8006b24:	2287      	movs	r2, #135	@ 0x87
 8006b26:	2105      	movs	r1, #5
 8006b28:	4620      	mov	r0, r4
 8006b2a:	f7fc f9cd 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8c3 4140 	str.w	r4, [r3, #320]	@ 0x140
	TextTiempo = new CEtiquetaTft( 100, 135, 150, 30, COLOR::GREY,(char*) "00",COLOR::BLACK, 3, 0, COLOR::RED);
 8006b34:	20a4      	movs	r0, #164	@ 0xa4
 8006b36:	f00a ffab 	bl	8011a90 <_Znwj>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	461c      	mov	r4, r3
 8006b3e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8006b42:	9306      	str	r3, [sp, #24]
 8006b44:	2300      	movs	r3, #0
 8006b46:	9305      	str	r3, [sp, #20]
 8006b48:	2303      	movs	r3, #3
 8006b4a:	9304      	str	r3, [sp, #16]
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	9303      	str	r3, [sp, #12]
 8006b50:	4b3c      	ldr	r3, [pc, #240]	@ (8006c44 <_ZN20CPantallaEdicionPasoC1Ev+0x298>)
 8006b52:	9302      	str	r3, [sp, #8]
 8006b54:	f64d 63de 	movw	r3, #57054	@ 0xdede
 8006b58:	9301      	str	r3, [sp, #4]
 8006b5a:	231e      	movs	r3, #30
 8006b5c:	9300      	str	r3, [sp, #0]
 8006b5e:	2396      	movs	r3, #150	@ 0x96
 8006b60:	2287      	movs	r2, #135	@ 0x87
 8006b62:	2164      	movs	r1, #100	@ 0x64
 8006b64:	4620      	mov	r0, r4
 8006b66:	f7fc f9af 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8c3 4144 	str.w	r4, [r3, #324]	@ 0x144

	LabelGuardar=new CEtiquetaTft( 10, 200, 130, 30, COLOR::GREEN,(char*)"GUARDAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 8006b70:	20a4      	movs	r0, #164	@ 0xa4
 8006b72:	f00a ff8d 	bl	8011a90 <_Znwj>
 8006b76:	4603      	mov	r3, r0
 8006b78:	461c      	mov	r4, r3
 8006b7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006b7e:	9306      	str	r3, [sp, #24]
 8006b80:	2301      	movs	r3, #1
 8006b82:	9305      	str	r3, [sp, #20]
 8006b84:	2303      	movs	r3, #3
 8006b86:	9304      	str	r3, [sp, #16]
 8006b88:	2300      	movs	r3, #0
 8006b8a:	9303      	str	r3, [sp, #12]
 8006b8c:	4b2f      	ldr	r3, [pc, #188]	@ (8006c4c <_ZN20CPantallaEdicionPasoC1Ev+0x2a0>)
 8006b8e:	9302      	str	r3, [sp, #8]
 8006b90:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8006b94:	9301      	str	r3, [sp, #4]
 8006b96:	231e      	movs	r3, #30
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	2382      	movs	r3, #130	@ 0x82
 8006b9c:	22c8      	movs	r2, #200	@ 0xc8
 8006b9e:	210a      	movs	r1, #10
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	f7fc f991 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8c3 4124 	str.w	r4, [r3, #292]	@ 0x124
	LabelCancelar=new CEtiquetaTft( 160, 200, 145, 30, COLOR::RED,(char*)"CANCELAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 8006bac:	20a4      	movs	r0, #164	@ 0xa4
 8006bae:	f00a ff6f 	bl	8011a90 <_Znwj>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	461c      	mov	r4, r3
 8006bb6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006bba:	9306      	str	r3, [sp, #24]
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	9305      	str	r3, [sp, #20]
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	9304      	str	r3, [sp, #16]
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	9303      	str	r3, [sp, #12]
 8006bc8:	4b21      	ldr	r3, [pc, #132]	@ (8006c50 <_ZN20CPantallaEdicionPasoC1Ev+0x2a4>)
 8006bca:	9302      	str	r3, [sp, #8]
 8006bcc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8006bd0:	9301      	str	r3, [sp, #4]
 8006bd2:	231e      	movs	r3, #30
 8006bd4:	9300      	str	r3, [sp, #0]
 8006bd6:	2391      	movs	r3, #145	@ 0x91
 8006bd8:	22c8      	movs	r2, #200	@ 0xc8
 8006bda:	21a0      	movs	r1, #160	@ 0xa0
 8006bdc:	4620      	mov	r0, r4
 8006bde:	f7fc f973 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8c3 4128 	str.w	r4, [r3, #296]	@ 0x128

	Textos[0]=TextTemperatura;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
	Textos[1]=TextAire;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
	Textos[2]=TextTiempo;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
	Seleccionado=0;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
	Estado=ESTADO_EDICION_PASO::SELECIONANDO;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
}
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	370c      	adds	r7, #12
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd90      	pop	{r4, r7, pc}
 8006c26:	bf00      	nop
 8006c28:	08014964 	.word	0x08014964
 8006c2c:	080156d0 	.word	0x080156d0
 8006c30:	08015764 	.word	0x08015764
 8006c34:	08014970 	.word	0x08014970
 8006c38:	0801497c 	.word	0x0801497c
 8006c3c:	08014984 	.word	0x08014984
 8006c40:	0801498c 	.word	0x0801498c
 8006c44:	08014994 	.word	0x08014994
 8006c48:	08014998 	.word	0x08014998
 8006c4c:	080149a0 	.word	0x080149a0
 8006c50:	080149a8 	.word	0x080149a8

08006c54 <_ZN20CPantallaEdicionPasoD1Ev>:

CPantallaEdicionPaso::~CPantallaEdicionPaso()
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	4a07      	ldr	r2, [pc, #28]	@ (8006c7c <_ZN20CPantallaEdicionPasoD1Ev+0x28>)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	601a      	str	r2, [r3, #0]
 8006c62:	4a07      	ldr	r2, [pc, #28]	@ (8006c80 <_ZN20CPantallaEdicionPasoD1Ev+0x2c>)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7fc fb44 	bl	80032f8 <_ZN13CPantallaBaseD1Ev>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4618      	mov	r0, r3
 8006c74:	3708      	adds	r7, #8
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	080156d0 	.word	0x080156d0
 8006c80:	08015764 	.word	0x08015764

08006c84 <_ZThn48_N20CPantallaEdicionPasoD1Ev>:
	void MuestraTemperatura();
	void MuestraAire();
	void MuestraTiempo();
public:
	CPantallaEdicionPaso();
	virtual ~CPantallaEdicionPaso();
 8006c84:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8006c88:	f7ff bfe4 	b.w	8006c54 <_ZN20CPantallaEdicionPasoD1Ev>

08006c8c <_ZN20CPantallaEdicionPasoD0Ev>:
CPantallaEdicionPaso::~CPantallaEdicionPaso()
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
}
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f7ff ffdd 	bl	8006c54 <_ZN20CPantallaEdicionPasoD1Ev>
 8006c9a:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f00a fef4 	bl	8011a8c <_ZdlPvj>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3708      	adds	r7, #8
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <_ZThn48_N20CPantallaEdicionPasoD0Ev>:
 8006cae:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8006cb2:	f7ff bfeb 	b.w	8006c8c <_ZN20CPantallaEdicionPasoD0Ev>
	...

08006cb8 <_ZN20CPantallaEdicionPaso9SetIdPasoEii>:
void CPantallaEdicionPaso::SetIdPaso(int id_rampa, int id_paso)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b08e      	sub	sp, #56	@ 0x38
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
	ID_Paso=id_paso;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	ID_Rampa=id_rampa;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	68ba      	ldr	r2, [r7, #8]
 8006cd0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	Temperatura=100;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2264      	movs	r2, #100	@ 0x64
 8006cd8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	NivelAire=50;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2232      	movs	r2, #50	@ 0x32
 8006ce0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	Minutos=10;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	220a      	movs	r2, #10
 8006ce8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	CRampa rampa=	ControladorRampas.DameRampa(ID_Rampa);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006cf2:	f107 0320 	add.w	r3, r7, #32
 8006cf6:	491b      	ldr	r1, [pc, #108]	@ (8006d64 <_ZN20CPantallaEdicionPaso9SetIdPasoEii+0xac>)
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f004 fc28 	bl	800b54e <_ZN18CControladorRampas9DameRampaEi>
	LabelRampa->SetTexto((char*)"Rampa:%s",rampa.Nombre);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f8d3 012c 	ldr.w	r0, [r3, #300]	@ 0x12c
 8006d04:	f107 0320 	add.w	r3, r7, #32
 8006d08:	3308      	adds	r3, #8
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	4916      	ldr	r1, [pc, #88]	@ (8006d68 <_ZN20CPantallaEdicionPaso9SetIdPasoEii+0xb0>)
 8006d0e:	f7fc f915 	bl	8002f3c <_ZN12CEtiquetaTft8SetTextoEPcz>
	if(id_paso!=-1)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d18:	d01c      	beq.n	8006d54 <_ZN20CPantallaEdicionPaso9SetIdPasoEii+0x9c>
	{
		CPaso paso=ControladorPasosRampa.DamePasoRampa(ID_Paso);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8006d20:	f107 0314 	add.w	r3, r7, #20
 8006d24:	4911      	ldr	r1, [pc, #68]	@ (8006d6c <_ZN20CPantallaEdicionPaso9SetIdPasoEii+0xb4>)
 8006d26:	4618      	mov	r0, r3
 8006d28:	f004 f9b1 	bl	800b08e <_ZN22CControladorPasosRampa13DamePasoRampaEi>
		Temperatura=paso.Temperatura;
 8006d2c:	7efb      	ldrb	r3, [r7, #27]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		NivelAire=paso.NivelAire;
 8006d36:	7f3b      	ldrb	r3, [r7, #28]
 8006d38:	461a      	mov	r2, r3
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
		Minutos=paso.Minutos;
 8006d40:	7f7b      	ldrb	r3, [r7, #29]
 8006d42:	461a      	mov	r2, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	}
 8006d4a:	f107 0314 	add.w	r3, r7, #20
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f004 fec4 	bl	800badc <_ZN5CPasoD1Ev>
}
 8006d54:	f107 0320 	add.w	r3, r7, #32
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f004 ff05 	bl	800bb68 <_ZN6CRampaD1Ev>
 8006d5e:	3738      	adds	r7, #56	@ 0x38
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	20000360 	.word	0x20000360
 8006d68:	080149b4 	.word	0x080149b4
 8006d6c:	200001f4 	.word	0x200001f4

08006d70 <_ZN20CPantallaEdicionPaso19OnPerillaIncrementoEv>:
void CPantallaEdicionPaso::OnPerillaIncremento()
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
	if(Estado==ESTADO_EDICION_PASO::SELECIONANDO)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d103      	bne.n	8006d8a <_ZN20CPantallaEdicionPaso19OnPerillaIncrementoEv+0x1a>
		NavegarIncremento();
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f8f5 	bl	8006f72 <_ZN20CPantallaEdicionPaso17NavegarIncrementoEv>
	else
		ValorIncremento();

}
 8006d88:	e002      	b.n	8006d90 <_ZN20CPantallaEdicionPaso19OnPerillaIncrementoEv+0x20>
		ValorIncremento();
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f9f5 	bl	800717a <_ZN20CPantallaEdicionPaso15ValorIncrementoEv>
}
 8006d90:	bf00      	nop
 8006d92:	3708      	adds	r7, #8
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <_ZThn48_N20CPantallaEdicionPaso19OnPerillaIncrementoEv>:
	void SetIdPaso(int id_Rampa,int id_paso);
	virtual void OnPerillaIncremento();
 8006d98:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8006d9c:	f7ff bfe8 	b.w	8006d70 <_ZN20CPantallaEdicionPaso19OnPerillaIncrementoEv>

08006da0 <_ZN20CPantallaEdicionPaso19OnPerillaDecrementoEv>:
void CPantallaEdicionPaso::OnPerillaDecremento()
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
	if(Estado==ESTADO_EDICION_PASO::SELECIONANDO)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d103      	bne.n	8006dba <_ZN20CPantallaEdicionPaso19OnPerillaDecrementoEv+0x1a>
		NavegarDecremento();
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f933 	bl	800701e <_ZN20CPantallaEdicionPaso17NavegarDecrementoEv>
	else
		ValorDecremento();
}
 8006db8:	e002      	b.n	8006dc0 <_ZN20CPantallaEdicionPaso19OnPerillaDecrementoEv+0x20>
		ValorDecremento();
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 fa2f 	bl	800721e <_ZN20CPantallaEdicionPaso15ValorDecrementoEv>
}
 8006dc0:	bf00      	nop
 8006dc2:	3708      	adds	r7, #8
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <_ZThn48_N20CPantallaEdicionPaso19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 8006dc8:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8006dcc:	f7ff bfe8 	b.w	8006da0 <_ZN20CPantallaEdicionPaso19OnPerillaDecrementoEv>

08006dd0 <_ZN20CPantallaEdicionPaso20OnBotonUnoClickEventEv>:
void CPantallaEdicionPaso::OnBotonUnoClickEvent()
{
 8006dd0:	b590      	push	{r4, r7, lr}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af02      	add	r7, sp, #8
 8006dd6:	6078      	str	r0, [r7, #4]
	if(ID_Paso<=0)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	dc1b      	bgt.n	8006e1a <_ZN20CPantallaEdicionPaso20OnBotonUnoClickEventEv+0x4a>
	{
		ControladorPasosRampa.AgregarPasoRampa(ID_Rampa, Temperatura, NivelAire, Minutos);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006df6:	b2d8      	uxtb	r0, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	4603      	mov	r3, r0
 8006e04:	4818      	ldr	r0, [pc, #96]	@ (8006e68 <_ZN20CPantallaEdicionPaso20OnBotonUnoClickEventEv+0x98>)
 8006e06:	f004 f98c 	bl	800b122 <_ZN22CControladorPasosRampa16AgregarPasoRampaEihhh>
		ManejadorPantallas.AsignaPantallaPasosRampa(ID_Rampa);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006e10:	4619      	mov	r1, r3
 8006e12:	4816      	ldr	r0, [pc, #88]	@ (8006e6c <_ZN20CPantallaEdicionPaso20OnBotonUnoClickEventEv+0x9c>)
 8006e14:	f7fd f993 	bl	800413e <_ZN19CManejadorPantallas24AsignaPantallaPasosRampaEi>
	{
		ControladorPasosRampa.ActualizaPasoRampa(ID_Paso, ID_Rampa, Temperatura, NivelAire, Minutos);
		ManejadorPantallas.MuestraPantallaPaso(ID_Rampa, ID_Paso);
	}

}
 8006e18:	e022      	b.n	8006e60 <_ZN20CPantallaEdicionPaso20OnBotonUnoClickEventEv+0x90>
		ControladorPasosRampa.ActualizaPasoRampa(ID_Paso, ID_Rampa, Temperatura, NivelAire, Minutos);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8d3 10ac 	ldr.w	r1, [r3, #172]	@ 0xac
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006e2c:	b2dc      	uxtb	r4, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	f8d2 20bc 	ldr.w	r2, [r2, #188]	@ 0xbc
 8006e3c:	b2d2      	uxtb	r2, r2
 8006e3e:	9201      	str	r2, [sp, #4]
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	4623      	mov	r3, r4
 8006e44:	4602      	mov	r2, r0
 8006e46:	4808      	ldr	r0, [pc, #32]	@ (8006e68 <_ZN20CPantallaEdicionPaso20OnBotonUnoClickEventEv+0x98>)
 8006e48:	f003 ff9c 	bl	800ad84 <_ZN22CControladorPasosRampa18ActualizaPasoRampaEiihhh>
		ManejadorPantallas.MuestraPantallaPaso(ID_Rampa, ID_Paso);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006e58:	461a      	mov	r2, r3
 8006e5a:	4804      	ldr	r0, [pc, #16]	@ (8006e6c <_ZN20CPantallaEdicionPaso20OnBotonUnoClickEventEv+0x9c>)
 8006e5c:	f7fd f9e4 	bl	8004228 <_ZN19CManejadorPantallas19MuestraPantallaPasoEii>
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd90      	pop	{r4, r7, pc}
 8006e68:	200001f4 	.word	0x200001f4
 8006e6c:	20000258 	.word	0x20000258

08006e70 <_ZThn48_N20CPantallaEdicionPaso20OnBotonUnoClickEventEv>:
	virtual void OnBotonUnoClickEvent();
 8006e70:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8006e74:	f7ff bfac 	b.w	8006dd0 <_ZN20CPantallaEdicionPaso20OnBotonUnoClickEventEv>

08006e78 <_ZN20CPantallaEdicionPaso21OnBotonTresClickEventEv>:

void CPantallaEdicionPaso::OnBotonTresClickEvent()
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
	if(ID_Paso<=0)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	dc07      	bgt.n	8006e9a <_ZN20CPantallaEdicionPaso21OnBotonTresClickEventEv+0x22>
		ManejadorPantallas.AsignaPantallaPasosRampa(ID_Rampa);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006e90:	4619      	mov	r1, r3
 8006e92:	4809      	ldr	r0, [pc, #36]	@ (8006eb8 <_ZN20CPantallaEdicionPaso21OnBotonTresClickEventEv+0x40>)
 8006e94:	f7fd f953 	bl	800413e <_ZN19CManejadorPantallas24AsignaPantallaPasosRampaEi>
	else
		ManejadorPantallas.MuestraPantallaPaso(ID_Rampa, ID_Paso);
}
 8006e98:	e009      	b.n	8006eae <_ZN20CPantallaEdicionPaso21OnBotonTresClickEventEv+0x36>
		ManejadorPantallas.MuestraPantallaPaso(ID_Rampa, ID_Paso);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	4803      	ldr	r0, [pc, #12]	@ (8006eb8 <_ZN20CPantallaEdicionPaso21OnBotonTresClickEventEv+0x40>)
 8006eaa:	f7fd f9bd 	bl	8004228 <_ZN19CManejadorPantallas19MuestraPantallaPasoEii>
}
 8006eae:	bf00      	nop
 8006eb0:	3708      	adds	r7, #8
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	20000258 	.word	0x20000258

08006ebc <_ZThn48_N20CPantallaEdicionPaso21OnBotonTresClickEventEv>:
	virtual void OnBotonTresClickEvent();
 8006ebc:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8006ec0:	f7ff bfda 	b.w	8006e78 <_ZN20CPantallaEdicionPaso21OnBotonTresClickEventEv>

08006ec4 <_ZN20CPantallaEdicionPaso4ShowEv>:
void CPantallaEdicionPaso::Show()
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
	//VelocidadAireInicialPotenciometro=ManejadorControles->GetNivelAire();
	CPantallaBase::Show();
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7fc fab8 	bl	8003444 <_ZN13CPantallaBase4ShowEv>

	LabelTemperatura->Show();
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	334c      	adds	r3, #76	@ 0x4c
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4610      	mov	r0, r2
 8006ee8:	4798      	blx	r3
	MuestraTemperatura();
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f9e8 	bl	80072c0 <_ZN20CPantallaEdicionPaso18MuestraTemperaturaEv>

	LabelAire->Show();
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	334c      	adds	r3, #76	@ 0x4c
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4610      	mov	r0, r2
 8006f04:	4798      	blx	r3
	MuestraAire();
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f9fa 	bl	8007300 <_ZN20CPantallaEdicionPaso11MuestraAireEv>

	LabelTiempo->Show();
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	334c      	adds	r3, #76	@ 0x4c
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4610      	mov	r0, r2
 8006f20:	4798      	blx	r3
	MuestraTiempo();
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fa0c 	bl	8007340 <_ZN20CPantallaEdicionPaso13MuestraTiempoEv>

	LabelRampa->Show();
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	334c      	adds	r3, #76	@ 0x4c
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4610      	mov	r0, r2
 8006f3c:	4798      	blx	r3
	LabelGuardar->Show();
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	334c      	adds	r3, #76	@ 0x4c
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4610      	mov	r0, r2
 8006f52:	4798      	blx	r3
	LabelCancelar->Show();
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	334c      	adds	r3, #76	@ 0x4c
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4610      	mov	r0, r2
 8006f68:	4798      	blx	r3
}
 8006f6a:	bf00      	nop
 8006f6c:	3708      	adds	r7, #8
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <_ZN20CPantallaEdicionPaso17NavegarIncrementoEv>:
void CPantallaEdicionPaso::NavegarIncremento()
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b082      	sub	sp, #8
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]

	Textos[Seleccionado]->SetBackColor(COLOR::GREY);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	3252      	adds	r2, #82	@ 0x52
 8006f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f88:	f64d 61de 	movw	r1, #57054	@ 0xdede
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7fc f985 	bl	800329c <_ZN12CEtiquetaTft12SetBackColorEi>
	Textos[Seleccionado]->Show();
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	3252      	adds	r2, #82	@ 0x52
 8006f9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	3252      	adds	r2, #82	@ 0x52
 8006faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	334c      	adds	r3, #76	@ 0x4c
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4608      	mov	r0, r1
 8006fb6:	4798      	blx	r3
	Seleccionado++;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006fbe:	1c5a      	adds	r2, r3, #1
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
	if(Seleccionado>2)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	dd03      	ble.n	8006fd8 <_ZN20CPantallaEdicionPaso17NavegarIncrementoEv+0x66>
		Seleccionado=0;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
	Textos[Seleccionado]->SetBackColor(COLOR::GREEN);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	3252      	adds	r2, #82	@ 0x52
 8006fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fe6:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7fc f956 	bl	800329c <_ZN12CEtiquetaTft12SetBackColorEi>
	Textos[Seleccionado]->Show();
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	3252      	adds	r2, #82	@ 0x52
 8006ffa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	3252      	adds	r2, #82	@ 0x52
 8007008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	334c      	adds	r3, #76	@ 0x4c
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4608      	mov	r0, r1
 8007014:	4798      	blx	r3
}
 8007016:	bf00      	nop
 8007018:	3708      	adds	r7, #8
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <_ZN20CPantallaEdicionPaso17NavegarDecrementoEv>:
void CPantallaEdicionPaso::NavegarDecremento()
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b082      	sub	sp, #8
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
	Textos[Seleccionado]->SetBackColor(COLOR::GREY);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	3252      	adds	r2, #82	@ 0x52
 8007030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007034:	f64d 61de 	movw	r1, #57054	@ 0xdede
 8007038:	4618      	mov	r0, r3
 800703a:	f7fc f92f 	bl	800329c <_ZN12CEtiquetaTft12SetBackColorEi>
	Textos[Seleccionado]->Show();
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	3252      	adds	r2, #82	@ 0x52
 8007048:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	3252      	adds	r2, #82	@ 0x52
 8007056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	334c      	adds	r3, #76	@ 0x4c
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4608      	mov	r0, r1
 8007062:	4798      	blx	r3
	Seleccionado--;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800706a:	1e5a      	subs	r2, r3, #1
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
	if(Seleccionado<0)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8007078:	2b00      	cmp	r3, #0
 800707a:	da03      	bge.n	8007084 <_ZN20CPantallaEdicionPaso17NavegarDecrementoEv+0x66>
		Seleccionado=2;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2202      	movs	r2, #2
 8007080:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
	Textos[Seleccionado]->SetBackColor(COLOR::GREEN);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	3252      	adds	r2, #82	@ 0x52
 800708e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007092:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8007096:	4618      	mov	r0, r3
 8007098:	f7fc f900 	bl	800329c <_ZN12CEtiquetaTft12SetBackColorEi>
	Textos[Seleccionado]->Show();
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	3252      	adds	r2, #82	@ 0x52
 80070a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	3252      	adds	r2, #82	@ 0x52
 80070b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	334c      	adds	r3, #76	@ 0x4c
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4608      	mov	r0, r1
 80070c0:	4798      	blx	r3

}
 80070c2:	bf00      	nop
 80070c4:	3708      	adds	r7, #8
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <_ZN20CPantallaEdicionPaso24OnBotonPerillaClickEventEv>:
void CPantallaEdicionPaso::OnBotonPerillaClickEvent()
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b082      	sub	sp, #8
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
	if(Estado==ESTADO_EDICION_PASO::SELECIONANDO)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d123      	bne.n	8007124 <_ZN20CPantallaEdicionPaso24OnBotonPerillaClickEventEv+0x5a>
	{
		Estado=ESTADO_EDICION_PASO::EDITANDO;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
		Textos[Seleccionado]->SetBackColor(COLOR::WHITE);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	3252      	adds	r2, #82	@ 0x52
 80070ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7fc f8d0 	bl	800329c <_ZN12CEtiquetaTft12SetBackColorEi>
		Textos[Seleccionado]->Show();
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	3252      	adds	r2, #82	@ 0x52
 8007106:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	3252      	adds	r2, #82	@ 0x52
 8007114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	334c      	adds	r3, #76	@ 0x4c
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4608      	mov	r0, r1
 8007120:	4798      	blx	r3
	{
		Estado=ESTADO_EDICION_PASO::SELECIONANDO;
		Textos[Seleccionado]->SetBackColor(COLOR::GREEN);
		Textos[Seleccionado]->Show();
	}
}
 8007122:	e022      	b.n	800716a <_ZN20CPantallaEdicionPaso24OnBotonPerillaClickEventEv+0xa0>
		Estado=ESTADO_EDICION_PASO::SELECIONANDO;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
		Textos[Seleccionado]->SetBackColor(COLOR::GREEN);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	3252      	adds	r2, #82	@ 0x52
 8007136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800713a:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 800713e:	4618      	mov	r0, r3
 8007140:	f7fc f8ac 	bl	800329c <_ZN12CEtiquetaTft12SetBackColorEi>
		Textos[Seleccionado]->Show();
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	3252      	adds	r2, #82	@ 0x52
 800714e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	3252      	adds	r2, #82	@ 0x52
 800715c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	334c      	adds	r3, #76	@ 0x4c
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4608      	mov	r0, r1
 8007168:	4798      	blx	r3
}
 800716a:	bf00      	nop
 800716c:	3708      	adds	r7, #8
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <_ZThn48_N20CPantallaEdicionPaso24OnBotonPerillaClickEventEv>:
	virtual void Show();
	virtual void OnBotonPerillaClickEvent();
 8007172:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8007176:	f7ff bfa8 	b.w	80070ca <_ZN20CPantallaEdicionPaso24OnBotonPerillaClickEventEv>

0800717a <_ZN20CPantallaEdicionPaso15ValorIncrementoEv>:
void CPantallaEdicionPaso::ValorIncremento()
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b082      	sub	sp, #8
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
	switch(Seleccionado)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8007188:	2b02      	cmp	r3, #2
 800718a:	d030      	beq.n	80071ee <_ZN20CPantallaEdicionPaso15ValorIncrementoEv+0x74>
 800718c:	2b02      	cmp	r3, #2
 800718e:	dc42      	bgt.n	8007216 <_ZN20CPantallaEdicionPaso15ValorIncrementoEv+0x9c>
 8007190:	2b00      	cmp	r3, #0
 8007192:	d002      	beq.n	800719a <_ZN20CPantallaEdicionPaso15ValorIncrementoEv+0x20>
 8007194:	2b01      	cmp	r3, #1
 8007196:	d016      	beq.n	80071c6 <_ZN20CPantallaEdicionPaso15ValorIncrementoEv+0x4c>
		if(Minutos>255)
			Minutos=255;
		MuestraTiempo();
		break;
	}
}
 8007198:	e03d      	b.n	8007216 <_ZN20CPantallaEdicionPaso15ValorIncrementoEv+0x9c>
		Temperatura++;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80071a0:	1c5a      	adds	r2, r3, #1
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		if(Temperatura>500)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80071ae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80071b2:	dd04      	ble.n	80071be <_ZN20CPantallaEdicionPaso15ValorIncrementoEv+0x44>
			Temperatura=500;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80071ba:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		MuestraTemperatura();
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f87e 	bl	80072c0 <_ZN20CPantallaEdicionPaso18MuestraTemperaturaEv>
		break;
 80071c4:	e027      	b.n	8007216 <_ZN20CPantallaEdicionPaso15ValorIncrementoEv+0x9c>
		NivelAire++;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80071cc:	1c5a      	adds	r2, r3, #1
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
		if(NivelAire>100)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80071da:	2b64      	cmp	r3, #100	@ 0x64
 80071dc:	dd03      	ble.n	80071e6 <_ZN20CPantallaEdicionPaso15ValorIncrementoEv+0x6c>
			NivelAire=100;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2264      	movs	r2, #100	@ 0x64
 80071e2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
		MuestraAire();
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 f88a 	bl	8007300 <_ZN20CPantallaEdicionPaso11MuestraAireEv>
		break;
 80071ec:	e013      	b.n	8007216 <_ZN20CPantallaEdicionPaso15ValorIncrementoEv+0x9c>
		Minutos++;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80071f4:	1c5a      	adds	r2, r3, #1
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
		if(Minutos>255)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007202:	2bff      	cmp	r3, #255	@ 0xff
 8007204:	dd03      	ble.n	800720e <_ZN20CPantallaEdicionPaso15ValorIncrementoEv+0x94>
			Minutos=255;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	22ff      	movs	r2, #255	@ 0xff
 800720a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
		MuestraTiempo();
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f896 	bl	8007340 <_ZN20CPantallaEdicionPaso13MuestraTiempoEv>
		break;
 8007214:	bf00      	nop
}
 8007216:	bf00      	nop
 8007218:	3708      	adds	r7, #8
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <_ZN20CPantallaEdicionPaso15ValorDecrementoEv>:
void CPantallaEdicionPaso::ValorDecremento()
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b082      	sub	sp, #8
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
	switch(Seleccionado)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800722c:	2b02      	cmp	r3, #2
 800722e:	d02e      	beq.n	800728e <_ZN20CPantallaEdicionPaso15ValorDecrementoEv+0x70>
 8007230:	2b02      	cmp	r3, #2
 8007232:	dc40      	bgt.n	80072b6 <_ZN20CPantallaEdicionPaso15ValorDecrementoEv+0x98>
 8007234:	2b00      	cmp	r3, #0
 8007236:	d002      	beq.n	800723e <_ZN20CPantallaEdicionPaso15ValorDecrementoEv+0x20>
 8007238:	2b01      	cmp	r3, #1
 800723a:	d014      	beq.n	8007266 <_ZN20CPantallaEdicionPaso15ValorDecrementoEv+0x48>
			Minutos=0;
		MuestraTiempo();
		break;
	}

}
 800723c:	e03b      	b.n	80072b6 <_ZN20CPantallaEdicionPaso15ValorDecrementoEv+0x98>
		Temperatura--;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007244:	1e5a      	subs	r2, r3, #1
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		if(Temperatura<0)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007252:	2b00      	cmp	r3, #0
 8007254:	da03      	bge.n	800725e <_ZN20CPantallaEdicionPaso15ValorDecrementoEv+0x40>
			Temperatura=0;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		MuestraTemperatura();
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 f82e 	bl	80072c0 <_ZN20CPantallaEdicionPaso18MuestraTemperaturaEv>
		break;
 8007264:	e027      	b.n	80072b6 <_ZN20CPantallaEdicionPaso15ValorDecrementoEv+0x98>
		NivelAire--;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800726c:	1e5a      	subs	r2, r3, #1
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
		if(NivelAire<0)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800727a:	2b00      	cmp	r3, #0
 800727c:	da03      	bge.n	8007286 <_ZN20CPantallaEdicionPaso15ValorDecrementoEv+0x68>
			NivelAire=0;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
		MuestraAire();
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f83a 	bl	8007300 <_ZN20CPantallaEdicionPaso11MuestraAireEv>
		break;
 800728c:	e013      	b.n	80072b6 <_ZN20CPantallaEdicionPaso15ValorDecrementoEv+0x98>
		Minutos--;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007294:	1e5a      	subs	r2, r3, #1
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
		if(Minutos<0)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	da03      	bge.n	80072ae <_ZN20CPantallaEdicionPaso15ValorDecrementoEv+0x90>
			Minutos=0;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
		MuestraTiempo();
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 f846 	bl	8007340 <_ZN20CPantallaEdicionPaso13MuestraTiempoEv>
		break;
 80072b4:	bf00      	nop
}
 80072b6:	bf00      	nop
 80072b8:	3708      	adds	r7, #8
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
	...

080072c0 <_ZN20CPantallaEdicionPaso18MuestraTemperaturaEv>:

void CPantallaEdicionPaso::MuestraTemperatura()
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
	TextTemperatura->SetTexto((char*)"%d", Temperatura);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 0134 	ldr.w	r0, [r3, #308]	@ 0x134
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80072d4:	461a      	mov	r2, r3
 80072d6:	4909      	ldr	r1, [pc, #36]	@ (80072fc <_ZN20CPantallaEdicionPaso18MuestraTemperaturaEv+0x3c>)
 80072d8:	f7fb fe30 	bl	8002f3c <_ZN12CEtiquetaTft8SetTextoEPcz>
	TextTemperatura->Show();
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	334c      	adds	r3, #76	@ 0x4c
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4610      	mov	r0, r2
 80072f0:	4798      	blx	r3
}
 80072f2:	bf00      	nop
 80072f4:	3708      	adds	r7, #8
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	080149c0 	.word	0x080149c0

08007300 <_ZN20CPantallaEdicionPaso11MuestraAireEv>:
void CPantallaEdicionPaso::MuestraAire()
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
	TextAire->SetTexto((char*)"%d", NivelAire);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 013c 	ldr.w	r0, [r3, #316]	@ 0x13c
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007314:	461a      	mov	r2, r3
 8007316:	4909      	ldr	r1, [pc, #36]	@ (800733c <_ZN20CPantallaEdicionPaso11MuestraAireEv+0x3c>)
 8007318:	f7fb fe10 	bl	8002f3c <_ZN12CEtiquetaTft8SetTextoEPcz>
	TextAire->Show();
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	334c      	adds	r3, #76	@ 0x4c
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4610      	mov	r0, r2
 8007330:	4798      	blx	r3
}
 8007332:	bf00      	nop
 8007334:	3708      	adds	r7, #8
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	080149c0 	.word	0x080149c0

08007340 <_ZN20CPantallaEdicionPaso13MuestraTiempoEv>:
void CPantallaEdicionPaso::MuestraTiempo()
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
	SegundosATexto(Minutos);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800734e:	4619      	mov	r1, r3
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 f819 	bl	8007388 <_ZN20CPantallaEdicionPaso14SegundosATextoEi>
//	TextTiempo->SetTexto((char*)"%d", Segundos);
	TextTiempo->SetTexto(TextoTiempo);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	33c0      	adds	r3, #192	@ 0xc0
 8007360:	4619      	mov	r1, r3
 8007362:	4610      	mov	r0, r2
 8007364:	f7fb fdea 	bl	8002f3c <_ZN12CEtiquetaTft8SetTextoEPcz>
	TextTiempo->Show();
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	334c      	adds	r3, #76	@ 0x4c
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4610      	mov	r0, r2
 800737c:	4798      	blx	r3
}
 800737e:	bf00      	nop
 8007380:	3708      	adds	r7, #8
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
	...

08007388 <_ZN20CPantallaEdicionPaso14SegundosATextoEi>:
void CPantallaEdicionPaso::SegundosATexto(int tiempoMinutos)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b088      	sub	sp, #32
 800738c:	af02      	add	r7, sp, #8
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
	int horas;
	int minutos;
	int segundos;
	horas=tiempoMinutos/(60);
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	4a11      	ldr	r2, [pc, #68]	@ (80073dc <_ZN20CPantallaEdicionPaso14SegundosATextoEi+0x54>)
 8007396:	fb82 1203 	smull	r1, r2, r2, r3
 800739a:	441a      	add	r2, r3
 800739c:	1152      	asrs	r2, r2, #5
 800739e:	17db      	asrs	r3, r3, #31
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	617b      	str	r3, [r7, #20]
	tiempoMinutos=tiempoMinutos-(horas*60);
 80073a4:	697a      	ldr	r2, [r7, #20]
 80073a6:	4613      	mov	r3, r2
 80073a8:	0112      	lsls	r2, r2, #4
 80073aa:	1a9b      	subs	r3, r3, r2
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	461a      	mov	r2, r3
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	4413      	add	r3, r2
 80073b4:	603b      	str	r3, [r7, #0]
	minutos=tiempoMinutos;
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	613b      	str	r3, [r7, #16]
	//tiempoSegundos=0;//tiempoSegundos-(minutos*60);
	segundos=0;//tiempoSegundos;
 80073ba:	2300      	movs	r3, #0
 80073bc:	60fb      	str	r3, [r7, #12]
	sprintf(TextoTiempo,(char*)"%d:%d:%d",horas,minutos,segundos);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f103 00c0 	add.w	r0, r3, #192	@ 0xc0
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	4904      	ldr	r1, [pc, #16]	@ (80073e0 <_ZN20CPantallaEdicionPaso14SegundosATextoEi+0x58>)
 80073ce:	f00b f95b 	bl	8012688 <siprintf>
}
 80073d2:	bf00      	nop
 80073d4:	3718      	adds	r7, #24
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	88888889 	.word	0x88888889
 80073e0:	080149c4 	.word	0x080149c4

080073e4 <_ZN21CPantallaEditorNombreC1Ei>:
 */

#include <GUI/Rampa/PantallaEditorNombre/CPantallaEditorNombre.hpp>
#include <GUI/ManejadorPantallas/CManejadorPantallas.hpp>

CPantallaEditorNombre::CPantallaEditorNombre(int id_Rampa) :
 80073e4:	b590      	push	{r4, r7, lr}
 80073e6:	b09b      	sub	sp, #108	@ 0x6c
 80073e8:	af08      	add	r7, sp, #32
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
		CPantallaMenuBase((char*) "   Editor")
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	49a7      	ldr	r1, [pc, #668]	@ (8007690 <_ZN21CPantallaEditorNombreC1Ei+0x2ac>)
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7ff f86e 	bl	80064d4 <_ZN17CPantallaMenuBaseC1EPc>
 80073f8:	4aa6      	ldr	r2, [pc, #664]	@ (8007694 <_ZN21CPantallaEditorNombreC1Ei+0x2b0>)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	601a      	str	r2, [r3, #0]
 80073fe:	4aa6      	ldr	r2, [pc, #664]	@ (8007698 <_ZN21CPantallaEditorNombreC1Ei+0x2b4>)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	631a      	str	r2, [r3, #48]	@ 0x30
 8007404:	4aa5      	ldr	r2, [pc, #660]	@ (800769c <_ZN21CPantallaEditorNombreC1Ei+0x2b8>)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	220f      	movs	r2, #15
 8007410:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
{
	ID_Rampa=id_Rampa;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	// TODO Auto-generated constructor stub
	LabelNombre = new CEtiquetaTft(5, 35, 50, 20, COLOR::BLACK, (char*) "Nombre:", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8007424:	20a4      	movs	r0, #164	@ 0xa4
 8007426:	f00a fb33 	bl	8011a90 <_Znwj>
 800742a:	4603      	mov	r3, r0
 800742c:	461c      	mov	r4, r3
 800742e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007432:	9306      	str	r3, [sp, #24]
 8007434:	2300      	movs	r3, #0
 8007436:	9305      	str	r3, [sp, #20]
 8007438:	2303      	movs	r3, #3
 800743a:	9304      	str	r3, [sp, #16]
 800743c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007440:	9303      	str	r3, [sp, #12]
 8007442:	4b97      	ldr	r3, [pc, #604]	@ (80076a0 <_ZN21CPantallaEditorNombreC1Ei+0x2bc>)
 8007444:	9302      	str	r3, [sp, #8]
 8007446:	2300      	movs	r3, #0
 8007448:	9301      	str	r3, [sp, #4]
 800744a:	2314      	movs	r3, #20
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	2332      	movs	r3, #50	@ 0x32
 8007450:	2223      	movs	r2, #35	@ 0x23
 8007452:	2105      	movs	r1, #5
 8007454:	4620      	mov	r0, r4
 8007456:	f7fb fd37 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8c3 40b4 	str.w	r4, [r3, #180]	@ 0xb4
	TextNombre = new CEtiquetaTft(10, 65, 300, 30, COLOR::WHITE, (char*) "", COLOR::BLACK, 3, 0, COLOR::WHITE);
 8007460:	20a4      	movs	r0, #164	@ 0xa4
 8007462:	f00a fb15 	bl	8011a90 <_Znwj>
 8007466:	4603      	mov	r3, r0
 8007468:	461c      	mov	r4, r3
 800746a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800746e:	9306      	str	r3, [sp, #24]
 8007470:	2300      	movs	r3, #0
 8007472:	9305      	str	r3, [sp, #20]
 8007474:	2303      	movs	r3, #3
 8007476:	9304      	str	r3, [sp, #16]
 8007478:	2300      	movs	r3, #0
 800747a:	9303      	str	r3, [sp, #12]
 800747c:	4b89      	ldr	r3, [pc, #548]	@ (80076a4 <_ZN21CPantallaEditorNombreC1Ei+0x2c0>)
 800747e:	9302      	str	r3, [sp, #8]
 8007480:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007484:	9301      	str	r3, [sp, #4]
 8007486:	231e      	movs	r3, #30
 8007488:	9300      	str	r3, [sp, #0]
 800748a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800748e:	2241      	movs	r2, #65	@ 0x41
 8007490:	210a      	movs	r1, #10
 8007492:	4620      	mov	r0, r4
 8007494:	f7fb fd18 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8c3 40b8 	str.w	r4, [r3, #184]	@ 0xb8
	Opciones=NULL;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	Menu->SetPosicion(10, 100);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80074ac:	2264      	movs	r2, #100	@ 0x64
 80074ae:	210a      	movs	r1, #10
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7fd fa8a 	bl	80049ca <_ZN5CMenu11SetPosicionEii>
	//inico el teclado
	int x1=10;
 80074b6:	230a      	movs	r3, #10
 80074b8:	643b      	str	r3, [r7, #64]	@ 0x40
	int x2=x1+20;
 80074ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074bc:	3314      	adds	r3, #20
 80074be:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int x3=x2+20;
 80074c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074c2:	3314      	adds	r3, #20
 80074c4:	63bb      	str	r3, [r7, #56]	@ 0x38
	int x4=x3+20;
 80074c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074c8:	3314      	adds	r3, #20
 80074ca:	637b      	str	r3, [r7, #52]	@ 0x34
	int x5=x4+20;
 80074cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074ce:	3314      	adds	r3, #20
 80074d0:	633b      	str	r3, [r7, #48]	@ 0x30
	int x6=x5+20;
 80074d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d4:	3314      	adds	r3, #20
 80074d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int x7=x6+20;
 80074d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074da:	3314      	adds	r3, #20
 80074dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	int x8=x7+20;
 80074de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e0:	3314      	adds	r3, #20
 80074e2:	627b      	str	r3, [r7, #36]	@ 0x24
	int x9=x8+20;
 80074e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e6:	3314      	adds	r3, #20
 80074e8:	623b      	str	r3, [r7, #32]
	int x10=x9+20;
 80074ea:	6a3b      	ldr	r3, [r7, #32]
 80074ec:	3314      	adds	r3, #20
 80074ee:	61fb      	str	r3, [r7, #28]

	int y1=5;
 80074f0:	2305      	movs	r3, #5
 80074f2:	61bb      	str	r3, [r7, #24]
	int y2=y1+25;
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	3319      	adds	r3, #25
 80074f8:	617b      	str	r3, [r7, #20]
	int y3=y2+25;
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	3319      	adds	r3, #25
 80074fe:	613b      	str	r3, [r7, #16]
	int y4=y3+25;
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	3319      	adds	r3, #25
 8007504:	60fb      	str	r3, [r7, #12]
	int y5=y4+30;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	331e      	adds	r3, #30
 800750a:	60bb      	str	r3, [r7, #8]
	AgregaMenuItem((char*) "0", EDITOR_TECLAS::TECLA_0,x1,y1,10,10);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	230a      	movs	r3, #10
 8007510:	9302      	str	r3, [sp, #8]
 8007512:	230a      	movs	r3, #10
 8007514:	9301      	str	r3, [sp, #4]
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800751c:	2200      	movs	r2, #0
 800751e:	4962      	ldr	r1, [pc, #392]	@ (80076a8 <_ZN21CPantallaEditorNombreC1Ei+0x2c4>)
 8007520:	f7ff f8f2 	bl	8006708 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "1", EDITOR_TECLAS::TECLA_1,x2,y1,10,10);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	230a      	movs	r3, #10
 8007528:	9302      	str	r3, [sp, #8]
 800752a:	230a      	movs	r3, #10
 800752c:	9301      	str	r3, [sp, #4]
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007534:	2201      	movs	r2, #1
 8007536:	495d      	ldr	r1, [pc, #372]	@ (80076ac <_ZN21CPantallaEditorNombreC1Ei+0x2c8>)
 8007538:	f7ff f8e6 	bl	8006708 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "2", EDITOR_TECLAS::TECLA_2,x3,y1,10,10);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	230a      	movs	r3, #10
 8007540:	9302      	str	r3, [sp, #8]
 8007542:	230a      	movs	r3, #10
 8007544:	9301      	str	r3, [sp, #4]
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	9300      	str	r3, [sp, #0]
 800754a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800754c:	2202      	movs	r2, #2
 800754e:	4958      	ldr	r1, [pc, #352]	@ (80076b0 <_ZN21CPantallaEditorNombreC1Ei+0x2cc>)
 8007550:	f7ff f8da 	bl	8006708 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "3", EDITOR_TECLAS::TECLA_3,x4,y1,10,10);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	230a      	movs	r3, #10
 8007558:	9302      	str	r3, [sp, #8]
 800755a:	230a      	movs	r3, #10
 800755c:	9301      	str	r3, [sp, #4]
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007564:	2203      	movs	r2, #3
 8007566:	4953      	ldr	r1, [pc, #332]	@ (80076b4 <_ZN21CPantallaEditorNombreC1Ei+0x2d0>)
 8007568:	f7ff f8ce 	bl	8006708 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "4", EDITOR_TECLAS::TECLA_4,x5,y1,10,10);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	230a      	movs	r3, #10
 8007570:	9302      	str	r3, [sp, #8]
 8007572:	230a      	movs	r3, #10
 8007574:	9301      	str	r3, [sp, #4]
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	9300      	str	r3, [sp, #0]
 800757a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800757c:	2204      	movs	r2, #4
 800757e:	494e      	ldr	r1, [pc, #312]	@ (80076b8 <_ZN21CPantallaEditorNombreC1Ei+0x2d4>)
 8007580:	f7ff f8c2 	bl	8006708 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "5", EDITOR_TECLAS::TECLA_5,x6,y1,10,10);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	230a      	movs	r3, #10
 8007588:	9302      	str	r3, [sp, #8]
 800758a:	230a      	movs	r3, #10
 800758c:	9301      	str	r3, [sp, #4]
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	9300      	str	r3, [sp, #0]
 8007592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007594:	2205      	movs	r2, #5
 8007596:	4949      	ldr	r1, [pc, #292]	@ (80076bc <_ZN21CPantallaEditorNombreC1Ei+0x2d8>)
 8007598:	f7ff f8b6 	bl	8006708 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "6", EDITOR_TECLAS::TECLA_6,x7,y1,10,10);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	230a      	movs	r3, #10
 80075a0:	9302      	str	r3, [sp, #8]
 80075a2:	230a      	movs	r3, #10
 80075a4:	9301      	str	r3, [sp, #4]
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	9300      	str	r3, [sp, #0]
 80075aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ac:	2206      	movs	r2, #6
 80075ae:	4944      	ldr	r1, [pc, #272]	@ (80076c0 <_ZN21CPantallaEditorNombreC1Ei+0x2dc>)
 80075b0:	f7ff f8aa 	bl	8006708 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "7", EDITOR_TECLAS::TECLA_7,x8,y1,10,10);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	230a      	movs	r3, #10
 80075b8:	9302      	str	r3, [sp, #8]
 80075ba:	230a      	movs	r3, #10
 80075bc:	9301      	str	r3, [sp, #4]
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	9300      	str	r3, [sp, #0]
 80075c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c4:	2207      	movs	r2, #7
 80075c6:	493f      	ldr	r1, [pc, #252]	@ (80076c4 <_ZN21CPantallaEditorNombreC1Ei+0x2e0>)
 80075c8:	f7ff f89e 	bl	8006708 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "8", EDITOR_TECLAS::TECLA_8,x9,y1,10,10);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	230a      	movs	r3, #10
 80075d0:	9302      	str	r3, [sp, #8]
 80075d2:	230a      	movs	r3, #10
 80075d4:	9301      	str	r3, [sp, #4]
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	6a3b      	ldr	r3, [r7, #32]
 80075dc:	2208      	movs	r2, #8
 80075de:	493a      	ldr	r1, [pc, #232]	@ (80076c8 <_ZN21CPantallaEditorNombreC1Ei+0x2e4>)
 80075e0:	f7ff f892 	bl	8006708 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "9", EDITOR_TECLAS::TECLA_9,x10,y1,10,10);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	230a      	movs	r3, #10
 80075e8:	9302      	str	r3, [sp, #8]
 80075ea:	230a      	movs	r3, #10
 80075ec:	9301      	str	r3, [sp, #4]
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	9300      	str	r3, [sp, #0]
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	2209      	movs	r2, #9
 80075f6:	4935      	ldr	r1, [pc, #212]	@ (80076cc <_ZN21CPantallaEditorNombreC1Ei+0x2e8>)
 80075f8:	f7ff f886 	bl	8006708 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>

	AgregaMenuItem((char*) "Q", EDITOR_TECLAS::TECLA_Q,x1,y2,10,10);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	230a      	movs	r3, #10
 8007600:	9302      	str	r3, [sp, #8]
 8007602:	230a      	movs	r3, #10
 8007604:	9301      	str	r3, [sp, #4]
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	9300      	str	r3, [sp, #0]
 800760a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800760c:	221b      	movs	r2, #27
 800760e:	4930      	ldr	r1, [pc, #192]	@ (80076d0 <_ZN21CPantallaEditorNombreC1Ei+0x2ec>)
 8007610:	f7ff f87a 	bl	8006708 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "W", EDITOR_TECLAS::TECLA_W,x2,y2,10,10);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	230a      	movs	r3, #10
 8007618:	9302      	str	r3, [sp, #8]
 800761a:	230a      	movs	r3, #10
 800761c:	9301      	str	r3, [sp, #4]
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	9300      	str	r3, [sp, #0]
 8007622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007624:	2220      	movs	r2, #32
 8007626:	492b      	ldr	r1, [pc, #172]	@ (80076d4 <_ZN21CPantallaEditorNombreC1Ei+0x2f0>)
 8007628:	f7ff f86e 	bl	8006708 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "E", EDITOR_TECLAS::TECLA_E,x3,y2,10,10);
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	230a      	movs	r3, #10
 8007630:	9302      	str	r3, [sp, #8]
 8007632:	230a      	movs	r3, #10
 8007634:	9301      	str	r3, [sp, #4]
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	9300      	str	r3, [sp, #0]
 800763a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800763c:	220b      	movs	r2, #11
 800763e:	4926      	ldr	r1, [pc, #152]	@ (80076d8 <_ZN21CPantallaEditorNombreC1Ei+0x2f4>)
 8007640:	f7ff f862 	bl	8006708 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "R", EDITOR_TECLAS::TECLA_R,x4,y2,10,10);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	230a      	movs	r3, #10
 8007648:	9302      	str	r3, [sp, #8]
 800764a:	230a      	movs	r3, #10
 800764c:	9301      	str	r3, [sp, #4]
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	9300      	str	r3, [sp, #0]
 8007652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007654:	221c      	movs	r2, #28
 8007656:	4921      	ldr	r1, [pc, #132]	@ (80076dc <_ZN21CPantallaEditorNombreC1Ei+0x2f8>)
 8007658:	f7ff f856 	bl	8006708 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "T", EDITOR_TECLAS::TECLA_T,x5,y2,10,10);
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	230a      	movs	r3, #10
 8007660:	9302      	str	r3, [sp, #8]
 8007662:	230a      	movs	r3, #10
 8007664:	9301      	str	r3, [sp, #4]
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	9300      	str	r3, [sp, #0]
 800766a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800766c:	221e      	movs	r2, #30
 800766e:	491c      	ldr	r1, [pc, #112]	@ (80076e0 <_ZN21CPantallaEditorNombreC1Ei+0x2fc>)
 8007670:	f7ff f84a 	bl	8006708 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "Y", EDITOR_TECLAS::TECLA_Y,x6,y2,10,10);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	230a      	movs	r3, #10
 8007678:	9302      	str	r3, [sp, #8]
 800767a:	230a      	movs	r3, #10
 800767c:	9301      	str	r3, [sp, #4]
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	9300      	str	r3, [sp, #0]
 8007682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007684:	2222      	movs	r2, #34	@ 0x22
 8007686:	4917      	ldr	r1, [pc, #92]	@ (80076e4 <_ZN21CPantallaEditorNombreC1Ei+0x300>)
 8007688:	f7ff f83e 	bl	8006708 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
 800768c:	e02c      	b.n	80076e8 <_ZN21CPantallaEditorNombreC1Ei+0x304>
 800768e:	bf00      	nop
 8007690:	080149d0 	.word	0x080149d0
 8007694:	08015798 	.word	0x08015798
 8007698:	08015840 	.word	0x08015840
 800769c:	08015874 	.word	0x08015874
 80076a0:	080149dc 	.word	0x080149dc
 80076a4:	080149e4 	.word	0x080149e4
 80076a8:	080149e8 	.word	0x080149e8
 80076ac:	080149ec 	.word	0x080149ec
 80076b0:	080149f0 	.word	0x080149f0
 80076b4:	080149f4 	.word	0x080149f4
 80076b8:	080149f8 	.word	0x080149f8
 80076bc:	080149fc 	.word	0x080149fc
 80076c0:	08014a00 	.word	0x08014a00
 80076c4:	08014a04 	.word	0x08014a04
 80076c8:	08014a08 	.word	0x08014a08
 80076cc:	08014a0c 	.word	0x08014a0c
 80076d0:	08014a10 	.word	0x08014a10
 80076d4:	08014a14 	.word	0x08014a14
 80076d8:	08014a18 	.word	0x08014a18
 80076dc:	08014a1c 	.word	0x08014a1c
 80076e0:	08014a20 	.word	0x08014a20
 80076e4:	08014a24 	.word	0x08014a24
	AgregaMenuItem((char*) "U", EDITOR_TECLAS::TECLA_U,x7,y2,10,10);
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	230a      	movs	r3, #10
 80076ec:	9302      	str	r3, [sp, #8]
 80076ee:	230a      	movs	r3, #10
 80076f0:	9301      	str	r3, [sp, #4]
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f8:	220e      	movs	r2, #14
 80076fa:	499f      	ldr	r1, [pc, #636]	@ (8007978 <_ZN21CPantallaEditorNombreC1Ei+0x594>)
 80076fc:	f7ff f804 	bl	8006708 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "I", EDITOR_TECLAS::TECLA_I,x8,y2,10,10);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	230a      	movs	r3, #10
 8007704:	9302      	str	r3, [sp, #8]
 8007706:	230a      	movs	r3, #10
 8007708:	9301      	str	r3, [sp, #4]
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	9300      	str	r3, [sp, #0]
 800770e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007710:	220c      	movs	r2, #12
 8007712:	499a      	ldr	r1, [pc, #616]	@ (800797c <_ZN21CPantallaEditorNombreC1Ei+0x598>)
 8007714:	f7fe fff8 	bl	8006708 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "O", EDITOR_TECLAS::TECLA_O,x9,y2,10,10);
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	230a      	movs	r3, #10
 800771c:	9302      	str	r3, [sp, #8]
 800771e:	230a      	movs	r3, #10
 8007720:	9301      	str	r3, [sp, #4]
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	6a3b      	ldr	r3, [r7, #32]
 8007728:	220d      	movs	r2, #13
 800772a:	4995      	ldr	r1, [pc, #596]	@ (8007980 <_ZN21CPantallaEditorNombreC1Ei+0x59c>)
 800772c:	f7fe ffec 	bl	8006708 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "P", EDITOR_TECLAS::TECLA_P,x10,y2,10,10);
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	230a      	movs	r3, #10
 8007734:	9302      	str	r3, [sp, #8]
 8007736:	230a      	movs	r3, #10
 8007738:	9301      	str	r3, [sp, #4]
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	9300      	str	r3, [sp, #0]
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	221a      	movs	r2, #26
 8007742:	4990      	ldr	r1, [pc, #576]	@ (8007984 <_ZN21CPantallaEditorNombreC1Ei+0x5a0>)
 8007744:	f7fe ffe0 	bl	8006708 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>

	AgregaMenuItem((char*) "A", EDITOR_TECLAS::TECLA_A,x1,y3,10,10);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	230a      	movs	r3, #10
 800774c:	9302      	str	r3, [sp, #8]
 800774e:	230a      	movs	r3, #10
 8007750:	9301      	str	r3, [sp, #4]
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	9300      	str	r3, [sp, #0]
 8007756:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007758:	220a      	movs	r2, #10
 800775a:	498b      	ldr	r1, [pc, #556]	@ (8007988 <_ZN21CPantallaEditorNombreC1Ei+0x5a4>)
 800775c:	f7fe ffd4 	bl	8006708 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "S", EDITOR_TECLAS::TECLA_S,x2,y3,10,10);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	230a      	movs	r3, #10
 8007764:	9302      	str	r3, [sp, #8]
 8007766:	230a      	movs	r3, #10
 8007768:	9301      	str	r3, [sp, #4]
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	9300      	str	r3, [sp, #0]
 800776e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007770:	221d      	movs	r2, #29
 8007772:	4986      	ldr	r1, [pc, #536]	@ (800798c <_ZN21CPantallaEditorNombreC1Ei+0x5a8>)
 8007774:	f7fe ffc8 	bl	8006708 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "D", EDITOR_TECLAS::TECLA_D,x3,y3,10,10);
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	230a      	movs	r3, #10
 800777c:	9302      	str	r3, [sp, #8]
 800777e:	230a      	movs	r3, #10
 8007780:	9301      	str	r3, [sp, #4]
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	9300      	str	r3, [sp, #0]
 8007786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007788:	2211      	movs	r2, #17
 800778a:	4981      	ldr	r1, [pc, #516]	@ (8007990 <_ZN21CPantallaEditorNombreC1Ei+0x5ac>)
 800778c:	f7fe ffbc 	bl	8006708 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "F", EDITOR_TECLAS::TECLA_F,x4,y3,10,10);
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	230a      	movs	r3, #10
 8007794:	9302      	str	r3, [sp, #8]
 8007796:	230a      	movs	r3, #10
 8007798:	9301      	str	r3, [sp, #4]
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	9300      	str	r3, [sp, #0]
 800779e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077a0:	2212      	movs	r2, #18
 80077a2:	497c      	ldr	r1, [pc, #496]	@ (8007994 <_ZN21CPantallaEditorNombreC1Ei+0x5b0>)
 80077a4:	f7fe ffb0 	bl	8006708 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "G", EDITOR_TECLAS::TECLA_G,x5,y3,10,10);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	230a      	movs	r3, #10
 80077ac:	9302      	str	r3, [sp, #8]
 80077ae:	230a      	movs	r3, #10
 80077b0:	9301      	str	r3, [sp, #4]
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	9300      	str	r3, [sp, #0]
 80077b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b8:	2213      	movs	r2, #19
 80077ba:	4977      	ldr	r1, [pc, #476]	@ (8007998 <_ZN21CPantallaEditorNombreC1Ei+0x5b4>)
 80077bc:	f7fe ffa4 	bl	8006708 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "H", EDITOR_TECLAS::TECLA_H,x6,y3,10,10);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	230a      	movs	r3, #10
 80077c4:	9302      	str	r3, [sp, #8]
 80077c6:	230a      	movs	r3, #10
 80077c8:	9301      	str	r3, [sp, #4]
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	9300      	str	r3, [sp, #0]
 80077ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077d0:	2214      	movs	r2, #20
 80077d2:	4972      	ldr	r1, [pc, #456]	@ (800799c <_ZN21CPantallaEditorNombreC1Ei+0x5b8>)
 80077d4:	f7fe ff98 	bl	8006708 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "J", EDITOR_TECLAS::TECLA_J,x7,y3,10,10);
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	230a      	movs	r3, #10
 80077dc:	9302      	str	r3, [sp, #8]
 80077de:	230a      	movs	r3, #10
 80077e0:	9301      	str	r3, [sp, #4]
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	9300      	str	r3, [sp, #0]
 80077e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e8:	2215      	movs	r2, #21
 80077ea:	496d      	ldr	r1, [pc, #436]	@ (80079a0 <_ZN21CPantallaEditorNombreC1Ei+0x5bc>)
 80077ec:	f7fe ff8c 	bl	8006708 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "K", EDITOR_TECLAS::TECLA_K,x8,y3,10,10);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	230a      	movs	r3, #10
 80077f4:	9302      	str	r3, [sp, #8]
 80077f6:	230a      	movs	r3, #10
 80077f8:	9301      	str	r3, [sp, #4]
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	9300      	str	r3, [sp, #0]
 80077fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007800:	2216      	movs	r2, #22
 8007802:	4968      	ldr	r1, [pc, #416]	@ (80079a4 <_ZN21CPantallaEditorNombreC1Ei+0x5c0>)
 8007804:	f7fe ff80 	bl	8006708 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "L", EDITOR_TECLAS::TECLA_L,x9,y3,10,10);
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	230a      	movs	r3, #10
 800780c:	9302      	str	r3, [sp, #8]
 800780e:	230a      	movs	r3, #10
 8007810:	9301      	str	r3, [sp, #4]
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	9300      	str	r3, [sp, #0]
 8007816:	6a3b      	ldr	r3, [r7, #32]
 8007818:	2217      	movs	r2, #23
 800781a:	4963      	ldr	r1, [pc, #396]	@ (80079a8 <_ZN21CPantallaEditorNombreC1Ei+0x5c4>)
 800781c:	f7fe ff74 	bl	8006708 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "Z", EDITOR_TECLAS::TECLA_Z,x10,y3,10,10);
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	230a      	movs	r3, #10
 8007824:	9302      	str	r3, [sp, #8]
 8007826:	230a      	movs	r3, #10
 8007828:	9301      	str	r3, [sp, #4]
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	9300      	str	r3, [sp, #0]
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	2223      	movs	r2, #35	@ 0x23
 8007832:	495e      	ldr	r1, [pc, #376]	@ (80079ac <_ZN21CPantallaEditorNombreC1Ei+0x5c8>)
 8007834:	f7fe ff68 	bl	8006708 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>

	AgregaMenuItem((char*) "X", EDITOR_TECLAS::TECLA_X,x2,y4,10,10);
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	230a      	movs	r3, #10
 800783c:	9302      	str	r3, [sp, #8]
 800783e:	230a      	movs	r3, #10
 8007840:	9301      	str	r3, [sp, #4]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007848:	2221      	movs	r2, #33	@ 0x21
 800784a:	4959      	ldr	r1, [pc, #356]	@ (80079b0 <_ZN21CPantallaEditorNombreC1Ei+0x5cc>)
 800784c:	f7fe ff5c 	bl	8006708 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "C", EDITOR_TECLAS::TECLA_C,x3,y4,10,10);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	230a      	movs	r3, #10
 8007854:	9302      	str	r3, [sp, #8]
 8007856:	230a      	movs	r3, #10
 8007858:	9301      	str	r3, [sp, #4]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007860:	2210      	movs	r2, #16
 8007862:	4954      	ldr	r1, [pc, #336]	@ (80079b4 <_ZN21CPantallaEditorNombreC1Ei+0x5d0>)
 8007864:	f7fe ff50 	bl	8006708 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "V", EDITOR_TECLAS::TECLA_V,x4,y4,10,10);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	230a      	movs	r3, #10
 800786c:	9302      	str	r3, [sp, #8]
 800786e:	230a      	movs	r3, #10
 8007870:	9301      	str	r3, [sp, #4]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	9300      	str	r3, [sp, #0]
 8007876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007878:	221f      	movs	r2, #31
 800787a:	494f      	ldr	r1, [pc, #316]	@ (80079b8 <_ZN21CPantallaEditorNombreC1Ei+0x5d4>)
 800787c:	f7fe ff44 	bl	8006708 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "__", EDITOR_TECLAS::TECLA_TABULADOR,x5,y4,10,10);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	230a      	movs	r3, #10
 8007884:	9302      	str	r3, [sp, #8]
 8007886:	230a      	movs	r3, #10
 8007888:	9301      	str	r3, [sp, #4]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	9300      	str	r3, [sp, #0]
 800788e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007890:	2227      	movs	r2, #39	@ 0x27
 8007892:	494a      	ldr	r1, [pc, #296]	@ (80079bc <_ZN21CPantallaEditorNombreC1Ei+0x5d8>)
 8007894:	f7fe ff38 	bl	8006708 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "B", EDITOR_TECLAS::TECLA_B,x7,y4,10,10);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	230a      	movs	r3, #10
 800789c:	9302      	str	r3, [sp, #8]
 800789e:	230a      	movs	r3, #10
 80078a0:	9301      	str	r3, [sp, #4]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	9300      	str	r3, [sp, #0]
 80078a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a8:	220f      	movs	r2, #15
 80078aa:	4945      	ldr	r1, [pc, #276]	@ (80079c0 <_ZN21CPantallaEditorNombreC1Ei+0x5dc>)
 80078ac:	f7fe ff2c 	bl	8006708 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "N", EDITOR_TECLAS::TECLA_N,x8,y4,10,10);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	230a      	movs	r3, #10
 80078b4:	9302      	str	r3, [sp, #8]
 80078b6:	230a      	movs	r3, #10
 80078b8:	9301      	str	r3, [sp, #4]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	9300      	str	r3, [sp, #0]
 80078be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c0:	2219      	movs	r2, #25
 80078c2:	4940      	ldr	r1, [pc, #256]	@ (80079c4 <_ZN21CPantallaEditorNombreC1Ei+0x5e0>)
 80078c4:	f7fe ff20 	bl	8006708 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "M", EDITOR_TECLAS::TECLA_M,x9,y4,10,10);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	230a      	movs	r3, #10
 80078cc:	9302      	str	r3, [sp, #8]
 80078ce:	230a      	movs	r3, #10
 80078d0:	9301      	str	r3, [sp, #4]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	9300      	str	r3, [sp, #0]
 80078d6:	6a3b      	ldr	r3, [r7, #32]
 80078d8:	2218      	movs	r2, #24
 80078da:	493b      	ldr	r1, [pc, #236]	@ (80079c8 <_ZN21CPantallaEditorNombreC1Ei+0x5e4>)
 80078dc:	f7fe ff14 	bl	8006708 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>

	AgregaMenuItem((char*) "<-", EDITOR_TECLAS::TECLA_DELETE,x10+30,y1,20,10,COLOR::RED,COLOR::BLACK);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	f103 021e 	add.w	r2, r3, #30
 80078e8:	2300      	movs	r3, #0
 80078ea:	9304      	str	r3, [sp, #16]
 80078ec:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80078f0:	9303      	str	r3, [sp, #12]
 80078f2:	230a      	movs	r3, #10
 80078f4:	9302      	str	r3, [sp, #8]
 80078f6:	2314      	movs	r3, #20
 80078f8:	9301      	str	r3, [sp, #4]
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	4613      	mov	r3, r2
 8007900:	2224      	movs	r2, #36	@ 0x24
 8007902:	4932      	ldr	r1, [pc, #200]	@ (80079cc <_ZN21CPantallaEditorNombreC1Ei+0x5e8>)
 8007904:	f7fe ff1b 	bl	800673e <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiiiii>


	AgregaMenuItem((char*) "Aceptar", EDITOR_TECLAS::TECLA_ACEPTAR,x1,y5,10,10,COLOR::BLUE,COLOR::BLACK);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	2300      	movs	r3, #0
 800790c:	9304      	str	r3, [sp, #16]
 800790e:	231f      	movs	r3, #31
 8007910:	9303      	str	r3, [sp, #12]
 8007912:	230a      	movs	r3, #10
 8007914:	9302      	str	r3, [sp, #8]
 8007916:	230a      	movs	r3, #10
 8007918:	9301      	str	r3, [sp, #4]
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	9300      	str	r3, [sp, #0]
 800791e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007920:	2225      	movs	r2, #37	@ 0x25
 8007922:	492b      	ldr	r1, [pc, #172]	@ (80079d0 <_ZN21CPantallaEditorNombreC1Ei+0x5ec>)
 8007924:	f7fe ff0b 	bl	800673e <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiiiii>
	AgregaMenuItem((char*) "Cancelar", EDITOR_TECLAS::TECLA_CANCELAR,x8,y5,10,10,COLOR::RED,COLOR::BLACK);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	2300      	movs	r3, #0
 800792c:	9304      	str	r3, [sp, #16]
 800792e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8007932:	9303      	str	r3, [sp, #12]
 8007934:	230a      	movs	r3, #10
 8007936:	9302      	str	r3, [sp, #8]
 8007938:	230a      	movs	r3, #10
 800793a:	9301      	str	r3, [sp, #4]
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	9300      	str	r3, [sp, #0]
 8007940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007942:	2226      	movs	r2, #38	@ 0x26
 8007944:	4923      	ldr	r1, [pc, #140]	@ (80079d4 <_ZN21CPantallaEditorNombreC1Ei+0x5f0>)
 8007946:	f7fe fefa 	bl	800673e <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiiiii>

	for(int i=0;i<=MAXTEXT;i++)
 800794a:	2300      	movs	r3, #0
 800794c:	647b      	str	r3, [r7, #68]	@ 0x44
 800794e:	e008      	b.n	8007962 <_ZN21CPantallaEditorNombreC1Ei+0x57e>
		Texto[i]='\0';
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007954:	4413      	add	r3, r2
 8007956:	33c4      	adds	r3, #196	@ 0xc4
 8007958:	2200      	movs	r2, #0
 800795a:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<=MAXTEXT;i++)
 800795c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800795e:	3301      	adds	r3, #1
 8007960:	647b      	str	r3, [r7, #68]	@ 0x44
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007968:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800796a:	429a      	cmp	r2, r3
 800796c:	ddf0      	ble.n	8007950 <_ZN21CPantallaEditorNombreC1Ei+0x56c>

}
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4618      	mov	r0, r3
 8007972:	374c      	adds	r7, #76	@ 0x4c
 8007974:	46bd      	mov	sp, r7
 8007976:	bd90      	pop	{r4, r7, pc}
 8007978:	08014a28 	.word	0x08014a28
 800797c:	08014a2c 	.word	0x08014a2c
 8007980:	08014a30 	.word	0x08014a30
 8007984:	08014a34 	.word	0x08014a34
 8007988:	08014a38 	.word	0x08014a38
 800798c:	08014a3c 	.word	0x08014a3c
 8007990:	08014a40 	.word	0x08014a40
 8007994:	08014a44 	.word	0x08014a44
 8007998:	08014a48 	.word	0x08014a48
 800799c:	08014a4c 	.word	0x08014a4c
 80079a0:	08014a50 	.word	0x08014a50
 80079a4:	08014a54 	.word	0x08014a54
 80079a8:	08014a58 	.word	0x08014a58
 80079ac:	08014a5c 	.word	0x08014a5c
 80079b0:	08014a60 	.word	0x08014a60
 80079b4:	08014a64 	.word	0x08014a64
 80079b8:	08014a68 	.word	0x08014a68
 80079bc:	08014a6c 	.word	0x08014a6c
 80079c0:	08014a70 	.word	0x08014a70
 80079c4:	08014a74 	.word	0x08014a74
 80079c8:	08014a78 	.word	0x08014a78
 80079cc:	08014a7c 	.word	0x08014a7c
 80079d0:	08014a80 	.word	0x08014a80
 80079d4:	08014a88 	.word	0x08014a88

080079d8 <_ZN21CPantallaEditorNombreD1Ev>:

CPantallaEditorNombre::~CPantallaEditorNombre()
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	4a09      	ldr	r2, [pc, #36]	@ (8007a08 <_ZN21CPantallaEditorNombreD1Ev+0x30>)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	601a      	str	r2, [r3, #0]
 80079e6:	4a09      	ldr	r2, [pc, #36]	@ (8007a0c <_ZN21CPantallaEditorNombreD1Ev+0x34>)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80079ec:	4a08      	ldr	r2, [pc, #32]	@ (8007a10 <_ZN21CPantallaEditorNombreD1Ev+0x38>)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	// TODO Auto-generated destructor stub
}
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7fe fdc0 	bl	800657c <_ZN17CPantallaMenuBaseD1Ev>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4618      	mov	r0, r3
 8007a00:	3708      	adds	r7, #8
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	08015798 	.word	0x08015798
 8007a0c:	08015840 	.word	0x08015840
 8007a10:	08015874 	.word	0x08015874

08007a14 <_ZThn48_N21CPantallaEditorNombreD1Ev>:
	int PosicionTexto=0;
	int ID_Rampa;
	void GuardaNombreRampa();
public:
	CPantallaEditorNombre(int id_Rampa);
	virtual ~CPantallaEditorNombre();
 8007a14:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8007a18:	f7ff bfde 	b.w	80079d8 <_ZN21CPantallaEditorNombreD1Ev>

08007a1c <_ZThn172_N21CPantallaEditorNombreD1Ev>:
 8007a1c:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8007a20:	f7ff bfda 	b.w	80079d8 <_ZN21CPantallaEditorNombreD1Ev>

08007a24 <_ZN21CPantallaEditorNombreD0Ev>:
CPantallaEditorNombre::~CPantallaEditorNombre()
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
}
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f7ff ffd3 	bl	80079d8 <_ZN21CPantallaEditorNombreD1Ev>
 8007a32:	21dc      	movs	r1, #220	@ 0xdc
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f00a f829 	bl	8011a8c <_ZdlPvj>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3708      	adds	r7, #8
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <_ZThn172_N21CPantallaEditorNombreD0Ev>:
 8007a44:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8007a48:	f7ff bfec 	b.w	8007a24 <_ZN21CPantallaEditorNombreD0Ev>

08007a4c <_ZThn48_N21CPantallaEditorNombreD0Ev>:
 8007a4c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8007a50:	f7ff bfe8 	b.w	8007a24 <_ZN21CPantallaEditorNombreD0Ev>

08007a54 <_ZN21CPantallaEditorNombre4ShowEv>:

void CPantallaEditorNombre::Show()
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
	CPantallaMenuBase::Show();
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7fe fe16 	bl	8006690 <_ZN17CPantallaMenuBase4ShowEv>
	LabelNombre->Show();
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	334c      	adds	r3, #76	@ 0x4c
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4610      	mov	r0, r2
 8007a78:	4798      	blx	r3
	TextNombre->Show();
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	334c      	adds	r3, #76	@ 0x4c
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4610      	mov	r0, r2
 8007a8e:	4798      	blx	r3
}
 8007a90:	bf00      	nop
 8007a92:	3708      	adds	r7, #8
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <_ZN21CPantallaEditorNombre8RefrescaEv>:
void CPantallaEditorNombre::Refresca()
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <_ZN21CPantallaEditorNombre11OnMenuEventEi>:
void CPantallaEditorNombre::OnMenuEvent(int identificador)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
	char tecla='\0';
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	73fb      	strb	r3, [r7, #15]
	switch(identificador)
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	2b27      	cmp	r3, #39	@ 0x27
 8007abe:	f200 80cd 	bhi.w	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
 8007ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ac8 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1c>)
 8007ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac8:	08007b69 	.word	0x08007b69
 8007acc:	08007b6f 	.word	0x08007b6f
 8007ad0:	08007b75 	.word	0x08007b75
 8007ad4:	08007b7b 	.word	0x08007b7b
 8007ad8:	08007b81 	.word	0x08007b81
 8007adc:	08007b87 	.word	0x08007b87
 8007ae0:	08007b8d 	.word	0x08007b8d
 8007ae4:	08007b93 	.word	0x08007b93
 8007ae8:	08007b99 	.word	0x08007b99
 8007aec:	08007b9f 	.word	0x08007b9f
 8007af0:	08007ba5 	.word	0x08007ba5
 8007af4:	08007bab 	.word	0x08007bab
 8007af8:	08007bb1 	.word	0x08007bb1
 8007afc:	08007bb7 	.word	0x08007bb7
 8007b00:	08007bbd 	.word	0x08007bbd
 8007b04:	08007bc3 	.word	0x08007bc3
 8007b08:	08007bc9 	.word	0x08007bc9
 8007b0c:	08007bcf 	.word	0x08007bcf
 8007b10:	08007bd5 	.word	0x08007bd5
 8007b14:	08007bdb 	.word	0x08007bdb
 8007b18:	08007be1 	.word	0x08007be1
 8007b1c:	08007be7 	.word	0x08007be7
 8007b20:	08007bed 	.word	0x08007bed
 8007b24:	08007bf3 	.word	0x08007bf3
 8007b28:	08007bf9 	.word	0x08007bf9
 8007b2c:	08007bff 	.word	0x08007bff
 8007b30:	08007c05 	.word	0x08007c05
 8007b34:	08007c0b 	.word	0x08007c0b
 8007b38:	08007c11 	.word	0x08007c11
 8007b3c:	08007c17 	.word	0x08007c17
 8007b40:	08007c1d 	.word	0x08007c1d
 8007b44:	08007c23 	.word	0x08007c23
 8007b48:	08007c2f 	.word	0x08007c2f
 8007b4c:	08007c35 	.word	0x08007c35
 8007b50:	08007c3b 	.word	0x08007c3b
 8007b54:	08007c41 	.word	0x08007c41
 8007b58:	08007c47 	.word	0x08007c47
 8007b5c:	08007c4d 	.word	0x08007c4d
 8007b60:	08007c55 	.word	0x08007c55
 8007b64:	08007c29 	.word	0x08007c29
	{
	case EDITOR_TECLAS::TECLA_0:
		tecla='0';
 8007b68:	2330      	movs	r3, #48	@ 0x30
 8007b6a:	73fb      	strb	r3, [r7, #15]
		break;
 8007b6c:	e076      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_1:
		tecla='1';
 8007b6e:	2331      	movs	r3, #49	@ 0x31
 8007b70:	73fb      	strb	r3, [r7, #15]
		break;
 8007b72:	e073      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_2:
		tecla='2';
 8007b74:	2332      	movs	r3, #50	@ 0x32
 8007b76:	73fb      	strb	r3, [r7, #15]
		break;
 8007b78:	e070      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_3:
		tecla='3';
 8007b7a:	2333      	movs	r3, #51	@ 0x33
 8007b7c:	73fb      	strb	r3, [r7, #15]
		break;
 8007b7e:	e06d      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_4:
		tecla='4';
 8007b80:	2334      	movs	r3, #52	@ 0x34
 8007b82:	73fb      	strb	r3, [r7, #15]
		break;
 8007b84:	e06a      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_5:
		tecla='5';
 8007b86:	2335      	movs	r3, #53	@ 0x35
 8007b88:	73fb      	strb	r3, [r7, #15]
		break;
 8007b8a:	e067      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_6:
		tecla='6';
 8007b8c:	2336      	movs	r3, #54	@ 0x36
 8007b8e:	73fb      	strb	r3, [r7, #15]
		break;
 8007b90:	e064      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_7:
		tecla='7';
 8007b92:	2337      	movs	r3, #55	@ 0x37
 8007b94:	73fb      	strb	r3, [r7, #15]
		break;
 8007b96:	e061      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_8:
		tecla='8';
 8007b98:	2338      	movs	r3, #56	@ 0x38
 8007b9a:	73fb      	strb	r3, [r7, #15]
		break;
 8007b9c:	e05e      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_9:
		tecla='9';
 8007b9e:	2339      	movs	r3, #57	@ 0x39
 8007ba0:	73fb      	strb	r3, [r7, #15]
		break;
 8007ba2:	e05b      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_A:
		tecla='A';
 8007ba4:	2341      	movs	r3, #65	@ 0x41
 8007ba6:	73fb      	strb	r3, [r7, #15]
		break;
 8007ba8:	e058      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_E:
		tecla='E';
 8007baa:	2345      	movs	r3, #69	@ 0x45
 8007bac:	73fb      	strb	r3, [r7, #15]
		break;
 8007bae:	e055      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_I:
		tecla='I';
 8007bb0:	2349      	movs	r3, #73	@ 0x49
 8007bb2:	73fb      	strb	r3, [r7, #15]
		break;
 8007bb4:	e052      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_O:
		tecla='O';
 8007bb6:	234f      	movs	r3, #79	@ 0x4f
 8007bb8:	73fb      	strb	r3, [r7, #15]
		break;
 8007bba:	e04f      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_U:
		tecla='U';
 8007bbc:	2355      	movs	r3, #85	@ 0x55
 8007bbe:	73fb      	strb	r3, [r7, #15]
		break;
 8007bc0:	e04c      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_B:
		tecla='B';
 8007bc2:	2342      	movs	r3, #66	@ 0x42
 8007bc4:	73fb      	strb	r3, [r7, #15]
		break;
 8007bc6:	e049      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_C:
		tecla='C';
 8007bc8:	2343      	movs	r3, #67	@ 0x43
 8007bca:	73fb      	strb	r3, [r7, #15]
		break;
 8007bcc:	e046      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_D:
		tecla='D';
 8007bce:	2344      	movs	r3, #68	@ 0x44
 8007bd0:	73fb      	strb	r3, [r7, #15]
		break;
 8007bd2:	e043      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_F:
		tecla='F';
 8007bd4:	2346      	movs	r3, #70	@ 0x46
 8007bd6:	73fb      	strb	r3, [r7, #15]
		break;
 8007bd8:	e040      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_G:
		tecla='G';
 8007bda:	2347      	movs	r3, #71	@ 0x47
 8007bdc:	73fb      	strb	r3, [r7, #15]
		break;
 8007bde:	e03d      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_H:
		tecla='H';
 8007be0:	2348      	movs	r3, #72	@ 0x48
 8007be2:	73fb      	strb	r3, [r7, #15]
		break;
 8007be4:	e03a      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_J:
		tecla='J';
 8007be6:	234a      	movs	r3, #74	@ 0x4a
 8007be8:	73fb      	strb	r3, [r7, #15]
		break;
 8007bea:	e037      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_K:
		tecla='K';
 8007bec:	234b      	movs	r3, #75	@ 0x4b
 8007bee:	73fb      	strb	r3, [r7, #15]
		break;
 8007bf0:	e034      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_L:
		tecla='L';
 8007bf2:	234c      	movs	r3, #76	@ 0x4c
 8007bf4:	73fb      	strb	r3, [r7, #15]
		break;
 8007bf6:	e031      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_M:
		tecla='M';
 8007bf8:	234d      	movs	r3, #77	@ 0x4d
 8007bfa:	73fb      	strb	r3, [r7, #15]
		break;
 8007bfc:	e02e      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_N:
		tecla='N';
 8007bfe:	234e      	movs	r3, #78	@ 0x4e
 8007c00:	73fb      	strb	r3, [r7, #15]
		break;
 8007c02:	e02b      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_P:
		tecla='P';
 8007c04:	2350      	movs	r3, #80	@ 0x50
 8007c06:	73fb      	strb	r3, [r7, #15]
		break;
 8007c08:	e028      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_Q:
		tecla='Q';
 8007c0a:	2351      	movs	r3, #81	@ 0x51
 8007c0c:	73fb      	strb	r3, [r7, #15]
		break;
 8007c0e:	e025      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_R:
		tecla='R';
 8007c10:	2352      	movs	r3, #82	@ 0x52
 8007c12:	73fb      	strb	r3, [r7, #15]
		break;
 8007c14:	e022      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_S:
		tecla='S';
 8007c16:	2353      	movs	r3, #83	@ 0x53
 8007c18:	73fb      	strb	r3, [r7, #15]
		break;
 8007c1a:	e01f      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_T:
		tecla='T';
 8007c1c:	2354      	movs	r3, #84	@ 0x54
 8007c1e:	73fb      	strb	r3, [r7, #15]
		break;
 8007c20:	e01c      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_V:
		tecla='V';
 8007c22:	2356      	movs	r3, #86	@ 0x56
 8007c24:	73fb      	strb	r3, [r7, #15]
		break;
 8007c26:	e019      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_TABULADOR:
		tecla=' ';
 8007c28:	2320      	movs	r3, #32
 8007c2a:	73fb      	strb	r3, [r7, #15]
		break;
 8007c2c:	e016      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_W:
		tecla='W';
 8007c2e:	2357      	movs	r3, #87	@ 0x57
 8007c30:	73fb      	strb	r3, [r7, #15]
		break;
 8007c32:	e013      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_X:
		tecla='X';
 8007c34:	2358      	movs	r3, #88	@ 0x58
 8007c36:	73fb      	strb	r3, [r7, #15]
		break;
 8007c38:	e010      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_Y:
		tecla='Y';
 8007c3a:	2359      	movs	r3, #89	@ 0x59
 8007c3c:	73fb      	strb	r3, [r7, #15]
		break;
 8007c3e:	e00d      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_Z:
		tecla='Z';
 8007c40:	235a      	movs	r3, #90	@ 0x5a
 8007c42:	73fb      	strb	r3, [r7, #15]
		break;
 8007c44:	e00a      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_DELETE:
		tecla='<';
 8007c46:	233c      	movs	r3, #60	@ 0x3c
 8007c48:	73fb      	strb	r3, [r7, #15]
		break;
 8007c4a:	e007      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_ACEPTAR:
		GuardaNombreRampa();
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 f8cb 	bl	8007de8 <_ZN21CPantallaEditorNombre17GuardaNombreRampaEv>
		break;
 8007c52:	e003      	b.n	8007c5c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_CANCELAR:
		ManejadorPantallas.MuestraMenuRampa();
 8007c54:	4827      	ldr	r0, [pc, #156]	@ (8007cf4 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x248>)
 8007c56:	f7fc f90b 	bl	8003e70 <_ZN19CManejadorPantallas16MuestraMenuRampaEv>
		break;
 8007c5a:	bf00      	nop

	}
	if(tecla!='\0')
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d043      	beq.n	8007cea <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x23e>
	{
		if(tecla=='<')
 8007c62:	7bfb      	ldrb	r3, [r7, #15]
 8007c64:	2b3c      	cmp	r3, #60	@ 0x3c
 8007c66:	d114      	bne.n	8007c92 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1e6>
		{
			Texto[PosicionTexto]='\0';
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	4413      	add	r3, r2
 8007c72:	2200      	movs	r2, #0
 8007c74:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
			if(PosicionTexto>0)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	dd1f      	ble.n	8007cc2 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x216>
				PosicionTexto--;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007c88:	1e5a      	subs	r2, r3, #1
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8007c90:	e017      	b.n	8007cc2 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x216>
		}
		else
		{
			Texto[PosicionTexto]=tecla;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	7bfa      	ldrb	r2, [r7, #15]
 8007c9e:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
			if(PosicionTexto<MAXTEXT-1)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007cae:	3b01      	subs	r3, #1
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	da06      	bge.n	8007cc2 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x216>
				PosicionTexto++;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007cba:	1c5a      	adds	r2, r3, #1
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
		}
		TextNombre->SetTexto(Texto);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	33c4      	adds	r3, #196	@ 0xc4
 8007ccc:	4619      	mov	r1, r3
 8007cce:	4610      	mov	r0, r2
 8007cd0:	f7fb f934 	bl	8002f3c <_ZN12CEtiquetaTft8SetTextoEPcz>
		TextNombre->Show();
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	334c      	adds	r3, #76	@ 0x4c
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4610      	mov	r0, r2
 8007ce8:	4798      	blx	r3
	}
}
 8007cea:	bf00      	nop
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	20000258 	.word	0x20000258

08007cf8 <_ZThn172_N21CPantallaEditorNombre11OnMenuEventEi>:
	virtual void Show();
	virtual void Refresca();
	virtual void OnMenuEvent(int identificador);
 8007cf8:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8007cfc:	f7ff bed6 	b.w	8007aac <_ZN21CPantallaEditorNombre11OnMenuEventEi>

08007d00 <_ZN21CPantallaEditorNombre8AsignaIDEi>:
void CPantallaEditorNombre::AsignaID(int id_Rampa)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b08a      	sub	sp, #40	@ 0x28
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
	if(id_Rampa==-1)
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d10:	d12a      	bne.n	8007d68 <_ZN21CPantallaEditorNombre8AsignaIDEi+0x68>
	{
		for(int i=0;i<MAXTEXT;i++)
 8007d12:	2300      	movs	r3, #0
 8007d14:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d16:	e008      	b.n	8007d2a <_ZN21CPantallaEditorNombre8AsignaIDEi+0x2a>
			Texto[i]='\0';
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d1c:	4413      	add	r3, r2
 8007d1e:	33c4      	adds	r3, #196	@ 0xc4
 8007d20:	2200      	movs	r2, #0
 8007d22:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<MAXTEXT;i++)
 8007d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d26:	3301      	adds	r3, #1
 8007d28:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007d30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d32:	429a      	cmp	r2, r3
 8007d34:	dbf0      	blt.n	8007d18 <_ZN21CPantallaEditorNombre8AsignaIDEi+0x18>
		PosicionTexto=0;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
		TextNombre->SetTexto(Texto);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	33c4      	adds	r3, #196	@ 0xc4
 8007d48:	4619      	mov	r1, r3
 8007d4a:	4610      	mov	r0, r2
 8007d4c:	f7fb f8f6 	bl	8002f3c <_ZN12CEtiquetaTft8SetTextoEPcz>
		TextNombre->Show();
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	334c      	adds	r3, #76	@ 0x4c
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4610      	mov	r0, r2
 8007d64:	4798      	blx	r3
 8007d66:	e034      	b.n	8007dd2 <_ZN21CPantallaEditorNombre8AsignaIDEi+0xd2>
	}
	else
	{
			CRampa rampa=ControladorRampas.DameRampa(id_Rampa);
 8007d68:	f107 030c 	add.w	r3, r7, #12
 8007d6c:	683a      	ldr	r2, [r7, #0]
 8007d6e:	491d      	ldr	r1, [pc, #116]	@ (8007de4 <_ZN21CPantallaEditorNombre8AsignaIDEi+0xe4>)
 8007d70:	4618      	mov	r0, r3
 8007d72:	f003 fbec 	bl	800b54e <_ZN18CControladorRampas9DameRampaEi>
			strcpy(Texto,rampa.Nombre);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f103 02c4 	add.w	r2, r3, #196	@ 0xc4
 8007d7c:	f107 030c 	add.w	r3, r7, #12
 8007d80:	3308      	adds	r3, #8
 8007d82:	4619      	mov	r1, r3
 8007d84:	4610      	mov	r0, r2
 8007d86:	f00a fdb6 	bl	80128f6 <strcpy>
			PosicionTexto=strlen(Texto)-1;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	33c4      	adds	r3, #196	@ 0xc4
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7f8 fa76 	bl	8000280 <strlen>
 8007d94:	4603      	mov	r3, r0
 8007d96:	3b01      	subs	r3, #1
 8007d98:	461a      	mov	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
			TextNombre->SetTexto(Texto);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	33c4      	adds	r3, #196	@ 0xc4
 8007daa:	4619      	mov	r1, r3
 8007dac:	4610      	mov	r0, r2
 8007dae:	f7fb f8c5 	bl	8002f3c <_ZN12CEtiquetaTft8SetTextoEPcz>
			TextNombre->Show();
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	334c      	adds	r3, #76	@ 0x4c
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4610      	mov	r0, r2
 8007dc6:	4798      	blx	r3
	}
 8007dc8:	f107 030c 	add.w	r3, r7, #12
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f003 fecb 	bl	800bb68 <_ZN6CRampaD1Ev>
	ID_Rampa=id_Rampa;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	683a      	ldr	r2, [r7, #0]
 8007dd6:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
}
 8007dda:	bf00      	nop
 8007ddc:	3728      	adds	r7, #40	@ 0x28
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	20000360 	.word	0x20000360

08007de8 <_ZN21CPantallaEditorNombre17GuardaNombreRampaEv>:
void CPantallaEditorNombre::GuardaNombreRampa()
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b088      	sub	sp, #32
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
	if(ID_Rampa==-1)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dfa:	d113      	bne.n	8007e24 <_ZN21CPantallaEditorNombre17GuardaNombreRampaEv+0x3c>
	{
		//hay que crear la rampa
		CRampa rampa=ControladorRampas.AgregaRampa(Texto);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f103 02c4 	add.w	r2, r3, #196	@ 0xc4
 8007e02:	f107 0308 	add.w	r3, r7, #8
 8007e06:	4911      	ldr	r1, [pc, #68]	@ (8007e4c <_ZN21CPantallaEditorNombre17GuardaNombreRampaEv+0x64>)
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f003 fd03 	bl	800b814 <_ZN18CControladorRampas11AgregaRampaEPc>
		ID_Rampa=rampa.ID_RAMPA;
 8007e0e:	89fb      	ldrh	r3, [r7, #14]
 8007e10:	461a      	mov	r2, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	}
 8007e18:	f107 0308 	add.w	r3, r7, #8
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f003 fea3 	bl	800bb68 <_ZN6CRampaD1Ev>
 8007e22:	e008      	b.n	8007e36 <_ZN21CPantallaEditorNombre17GuardaNombreRampaEv+0x4e>
	else
	{
		//hay que actualizar
		ControladorRampas.ActualizaRampa(ID_Rampa, Texto);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 10d8 	ldr.w	r1, [r3, #216]	@ 0xd8
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	33c4      	adds	r3, #196	@ 0xc4
 8007e2e:	461a      	mov	r2, r3
 8007e30:	4806      	ldr	r0, [pc, #24]	@ (8007e4c <_ZN21CPantallaEditorNombre17GuardaNombreRampaEv+0x64>)
 8007e32:	f003 fd5f 	bl	800b8f4 <_ZN18CControladorRampas14ActualizaRampaEiPc>
	}
	ManejadorPantallas.AsignaPantallaPasosRampa(ID_Rampa);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	4804      	ldr	r0, [pc, #16]	@ (8007e50 <_ZN21CPantallaEditorNombre17GuardaNombreRampaEv+0x68>)
 8007e40:	f7fc f97d 	bl	800413e <_ZN19CManejadorPantallas24AsignaPantallaPasosRampaEi>

}
 8007e44:	bf00      	nop
 8007e46:	3720      	adds	r7, #32
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	20000360 	.word	0x20000360
 8007e50:	20000258 	.word	0x20000258

08007e54 <_ZN21CPantallaEditorNombre12SeleccionadaEv>:
void CPantallaEditorNombre::Seleccionada()
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]

}
 8007e5c:	bf00      	nop
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <_ZN21CPantallaEditorNombre20OnBotonUnoClickEventEv>:
void CPantallaEditorNombre::OnBotonUnoClickEvent()
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
	OnMenuEvent(EDITOR_TECLAS::TECLA_ACEPTAR);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	3390      	adds	r3, #144	@ 0x90
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2125      	movs	r1, #37	@ 0x25
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	4798      	blx	r3
}
 8007e7e:	bf00      	nop
 8007e80:	3708      	adds	r7, #8
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <_ZThn48_N21CPantallaEditorNombre20OnBotonUnoClickEventEv>:
	void AsignaID(int id_Rampa);
	virtual void Seleccionada();
	virtual void OnBotonUnoClickEvent();
 8007e86:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8007e8a:	f7ff bfed 	b.w	8007e68 <_ZN21CPantallaEditorNombre20OnBotonUnoClickEventEv>

08007e8e <_ZN21CPantallaEditorNombre21OnBotonTresClickEventEv>:
void CPantallaEditorNombre::OnBotonTresClickEvent()
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b082      	sub	sp, #8
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
	OnMenuEvent(EDITOR_TECLAS::TECLA_CANCELAR);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	3390      	adds	r3, #144	@ 0x90
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2126      	movs	r1, #38	@ 0x26
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	4798      	blx	r3

}
 8007ea4:	bf00      	nop
 8007ea6:	3708      	adds	r7, #8
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <_ZThn48_N21CPantallaEditorNombre21OnBotonTresClickEventEv>:
	virtual void OnBotonTresClickEvent();
 8007eac:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8007eb0:	f7ff bfed 	b.w	8007e8e <_ZN21CPantallaEditorNombre21OnBotonTresClickEventEv>

08007eb4 <_ZN21CPantallaEditorNombre23OnBotonCuatroClickEventEv>:
void CPantallaEditorNombre::OnBotonCuatroClickEvent()
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
	OnMenuEvent(EDITOR_TECLAS::TECLA_DELETE);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	3390      	adds	r3, #144	@ 0x90
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2124      	movs	r1, #36	@ 0x24
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	4798      	blx	r3

}
 8007eca:	bf00      	nop
 8007ecc:	3708      	adds	r7, #8
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <_ZThn48_N21CPantallaEditorNombre23OnBotonCuatroClickEventEv>:
	virtual void OnBotonCuatroClickEvent();
 8007ed2:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8007ed6:	f7ff bfed 	b.w	8007eb4 <_ZN21CPantallaEditorNombre23OnBotonCuatroClickEventEv>
	...

08007edc <_ZN23CPantallaEjecucionRampaC1Ev>:
#include <RapaTemperatura/CControladorRampas.hpp>
#include <RapaTemperatura/CRampa.hpp>
#include <RapaTemperatura/CPaso.hpp>
#include <GUI/ManejadorPantallas/CManejadorPantallas.hpp>
#include<string.h>
CPantallaEjecucionRampa::CPantallaEjecucionRampa():
 8007edc:	b590      	push	{r4, r7, lr}
 8007ede:	b08b      	sub	sp, #44	@ 0x2c
 8007ee0:	af08      	add	r7, sp, #32
 8007ee2:	6078      	str	r0, [r7, #4]
CPantallaBase(1, (char*)"RAMPA")
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a65      	ldr	r2, [pc, #404]	@ (800807c <_ZN23CPantallaEjecucionRampaC1Ev+0x1a0>)
 8007ee8:	2101      	movs	r1, #1
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7fb fa38 	bl	8003360 <_ZN13CPantallaBaseC1EiPc>
 8007ef0:	4a63      	ldr	r2, [pc, #396]	@ (8008080 <_ZN23CPantallaEjecucionRampaC1Ev+0x1a4>)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	601a      	str	r2, [r3, #0]
 8007ef6:	4a63      	ldr	r2, [pc, #396]	@ (8008084 <_ZN23CPantallaEjecucionRampaC1Ev+0x1a8>)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	631a      	str	r2, [r3, #48]	@ 0x30
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8007f02:	4618      	mov	r0, r3
 8007f04:	f003 fdc8 	bl	800ba98 <_ZN5CPasoC1Ev>
{
	// TODO Auto-generated constructor stub
	LabelPaso=new CEtiquetaTft( 5, 35, 50, 20, COLOR::BLACK,(char*)"PASO: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8007f08:	20a4      	movs	r0, #164	@ 0xa4
 8007f0a:	f009 fdc1 	bl	8011a90 <_Znwj>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	461c      	mov	r4, r3
 8007f12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007f16:	9306      	str	r3, [sp, #24]
 8007f18:	2300      	movs	r3, #0
 8007f1a:	9305      	str	r3, [sp, #20]
 8007f1c:	2303      	movs	r3, #3
 8007f1e:	9304      	str	r3, [sp, #16]
 8007f20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007f24:	9303      	str	r3, [sp, #12]
 8007f26:	4b58      	ldr	r3, [pc, #352]	@ (8008088 <_ZN23CPantallaEjecucionRampaC1Ev+0x1ac>)
 8007f28:	9302      	str	r3, [sp, #8]
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	9301      	str	r3, [sp, #4]
 8007f2e:	2314      	movs	r3, #20
 8007f30:	9300      	str	r3, [sp, #0]
 8007f32:	2332      	movs	r3, #50	@ 0x32
 8007f34:	2223      	movs	r2, #35	@ 0x23
 8007f36:	2105      	movs	r1, #5
 8007f38:	4620      	mov	r0, r4
 8007f3a:	f7fa ffc5 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8c3 42d8 	str.w	r4, [r3, #728]	@ 0x2d8
	LabelTemperatura=new CEtiquetaTft( 5, 70, 50, 20, COLOR::BLACK,(char*)"TEMP: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8007f44:	20a4      	movs	r0, #164	@ 0xa4
 8007f46:	f009 fda3 	bl	8011a90 <_Znwj>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	461c      	mov	r4, r3
 8007f4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007f52:	9306      	str	r3, [sp, #24]
 8007f54:	2300      	movs	r3, #0
 8007f56:	9305      	str	r3, [sp, #20]
 8007f58:	2303      	movs	r3, #3
 8007f5a:	9304      	str	r3, [sp, #16]
 8007f5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007f60:	9303      	str	r3, [sp, #12]
 8007f62:	4b4a      	ldr	r3, [pc, #296]	@ (800808c <_ZN23CPantallaEjecucionRampaC1Ev+0x1b0>)
 8007f64:	9302      	str	r3, [sp, #8]
 8007f66:	2300      	movs	r3, #0
 8007f68:	9301      	str	r3, [sp, #4]
 8007f6a:	2314      	movs	r3, #20
 8007f6c:	9300      	str	r3, [sp, #0]
 8007f6e:	2332      	movs	r3, #50	@ 0x32
 8007f70:	2246      	movs	r2, #70	@ 0x46
 8007f72:	2105      	movs	r1, #5
 8007f74:	4620      	mov	r0, r4
 8007f76:	f7fa ffa7 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8c3 42dc 	str.w	r4, [r3, #732]	@ 0x2dc
	LabelAire=new CEtiquetaTft( 5, 105, 105, 20, COLOR::BLACK,(char*)"AIRE: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8007f80:	20a4      	movs	r0, #164	@ 0xa4
 8007f82:	f009 fd85 	bl	8011a90 <_Znwj>
 8007f86:	4603      	mov	r3, r0
 8007f88:	461c      	mov	r4, r3
 8007f8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007f8e:	9306      	str	r3, [sp, #24]
 8007f90:	2300      	movs	r3, #0
 8007f92:	9305      	str	r3, [sp, #20]
 8007f94:	2303      	movs	r3, #3
 8007f96:	9304      	str	r3, [sp, #16]
 8007f98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007f9c:	9303      	str	r3, [sp, #12]
 8007f9e:	4b3c      	ldr	r3, [pc, #240]	@ (8008090 <_ZN23CPantallaEjecucionRampaC1Ev+0x1b4>)
 8007fa0:	9302      	str	r3, [sp, #8]
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	9301      	str	r3, [sp, #4]
 8007fa6:	2314      	movs	r3, #20
 8007fa8:	9300      	str	r3, [sp, #0]
 8007faa:	2369      	movs	r3, #105	@ 0x69
 8007fac:	2269      	movs	r2, #105	@ 0x69
 8007fae:	2105      	movs	r1, #5
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	f7fa ff89 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8c3 42e0 	str.w	r4, [r3, #736]	@ 0x2e0
	LabelTiempo=new CEtiquetaTft( 5, 140, 50, 20, COLOR::BLACK,(char*)"TIEM: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8007fbc:	20a4      	movs	r0, #164	@ 0xa4
 8007fbe:	f009 fd67 	bl	8011a90 <_Znwj>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	461c      	mov	r4, r3
 8007fc6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007fca:	9306      	str	r3, [sp, #24]
 8007fcc:	2300      	movs	r3, #0
 8007fce:	9305      	str	r3, [sp, #20]
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	9304      	str	r3, [sp, #16]
 8007fd4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007fd8:	9303      	str	r3, [sp, #12]
 8007fda:	4b2e      	ldr	r3, [pc, #184]	@ (8008094 <_ZN23CPantallaEjecucionRampaC1Ev+0x1b8>)
 8007fdc:	9302      	str	r3, [sp, #8]
 8007fde:	2300      	movs	r3, #0
 8007fe0:	9301      	str	r3, [sp, #4]
 8007fe2:	2314      	movs	r3, #20
 8007fe4:	9300      	str	r3, [sp, #0]
 8007fe6:	2332      	movs	r3, #50	@ 0x32
 8007fe8:	228c      	movs	r2, #140	@ 0x8c
 8007fea:	2105      	movs	r1, #5
 8007fec:	4620      	mov	r0, r4
 8007fee:	f7fa ff6b 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8c3 42e4 	str.w	r4, [r3, #740]	@ 0x2e4

	LabelGuardar=new CEtiquetaTft( 10, 200, 130, 30, COLOR::GREEN,(char*)"INICIAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 8007ff8:	20a4      	movs	r0, #164	@ 0xa4
 8007ffa:	f009 fd49 	bl	8011a90 <_Znwj>
 8007ffe:	4603      	mov	r3, r0
 8008000:	461c      	mov	r4, r3
 8008002:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008006:	9306      	str	r3, [sp, #24]
 8008008:	2301      	movs	r3, #1
 800800a:	9305      	str	r3, [sp, #20]
 800800c:	2303      	movs	r3, #3
 800800e:	9304      	str	r3, [sp, #16]
 8008010:	2300      	movs	r3, #0
 8008012:	9303      	str	r3, [sp, #12]
 8008014:	4b20      	ldr	r3, [pc, #128]	@ (8008098 <_ZN23CPantallaEjecucionRampaC1Ev+0x1bc>)
 8008016:	9302      	str	r3, [sp, #8]
 8008018:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800801c:	9301      	str	r3, [sp, #4]
 800801e:	231e      	movs	r3, #30
 8008020:	9300      	str	r3, [sp, #0]
 8008022:	2382      	movs	r3, #130	@ 0x82
 8008024:	22c8      	movs	r2, #200	@ 0xc8
 8008026:	210a      	movs	r1, #10
 8008028:	4620      	mov	r0, r4
 800802a:	f7fa ff4d 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8c3 42d0 	str.w	r4, [r3, #720]	@ 0x2d0
	LabelCancelar=new CEtiquetaTft( 160, 200, 145, 30, COLOR::RED,(char*)"REGRESAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 8008034:	20a4      	movs	r0, #164	@ 0xa4
 8008036:	f009 fd2b 	bl	8011a90 <_Znwj>
 800803a:	4603      	mov	r3, r0
 800803c:	461c      	mov	r4, r3
 800803e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008042:	9306      	str	r3, [sp, #24]
 8008044:	2301      	movs	r3, #1
 8008046:	9305      	str	r3, [sp, #20]
 8008048:	2303      	movs	r3, #3
 800804a:	9304      	str	r3, [sp, #16]
 800804c:	2300      	movs	r3, #0
 800804e:	9303      	str	r3, [sp, #12]
 8008050:	4b12      	ldr	r3, [pc, #72]	@ (800809c <_ZN23CPantallaEjecucionRampaC1Ev+0x1c0>)
 8008052:	9302      	str	r3, [sp, #8]
 8008054:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8008058:	9301      	str	r3, [sp, #4]
 800805a:	231e      	movs	r3, #30
 800805c:	9300      	str	r3, [sp, #0]
 800805e:	2391      	movs	r3, #145	@ 0x91
 8008060:	22c8      	movs	r2, #200	@ 0xc8
 8008062:	21a0      	movs	r1, #160	@ 0xa0
 8008064:	4620      	mov	r0, r4
 8008066:	f7fa ff2f 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8c3 42d4 	str.w	r4, [r3, #724]	@ 0x2d4

}
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4618      	mov	r0, r3
 8008074:	370c      	adds	r7, #12
 8008076:	46bd      	mov	sp, r7
 8008078:	bd90      	pop	{r4, r7, pc}
 800807a:	bf00      	nop
 800807c:	08014a94 	.word	0x08014a94
 8008080:	08015888 	.word	0x08015888
 8008084:	08015910 	.word	0x08015910
 8008088:	08014a9c 	.word	0x08014a9c
 800808c:	08014aa4 	.word	0x08014aa4
 8008090:	08014aac 	.word	0x08014aac
 8008094:	08014ab4 	.word	0x08014ab4
 8008098:	08014abc 	.word	0x08014abc
 800809c:	08014ac4 	.word	0x08014ac4

080080a0 <_ZN23CPantallaEjecucionRampaD1Ev>:

CPantallaEjecucionRampa::~CPantallaEjecucionRampa()
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	4a0a      	ldr	r2, [pc, #40]	@ (80080d4 <_ZN23CPantallaEjecucionRampaD1Ev+0x34>)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	601a      	str	r2, [r3, #0]
 80080ae:	4a0a      	ldr	r2, [pc, #40]	@ (80080d8 <_ZN23CPantallaEjecucionRampaD1Ev+0x38>)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 80080ba:	4618      	mov	r0, r3
 80080bc:	f003 fd0e 	bl	800badc <_ZN5CPasoD1Ev>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7fb f918 	bl	80032f8 <_ZN13CPantallaBaseD1Ev>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	4618      	mov	r0, r3
 80080cc:	3708      	adds	r7, #8
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	08015888 	.word	0x08015888
 80080d8:	08015910 	.word	0x08015910

080080dc <_ZThn48_N23CPantallaEjecucionRampaD1Ev>:
	void PasoTerminado();
	void MuestraDatos();
	void ActualizaEstacion();
public:
	CPantallaEjecucionRampa();
	virtual ~CPantallaEjecucionRampa();
 80080dc:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80080e0:	f7ff bfde 	b.w	80080a0 <_ZN23CPantallaEjecucionRampaD1Ev>

080080e4 <_ZN23CPantallaEjecucionRampaD0Ev>:
CPantallaEjecucionRampa::~CPantallaEjecucionRampa()
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
}
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f7ff ffd7 	bl	80080a0 <_ZN23CPantallaEjecucionRampaD1Ev>
 80080f2:	f44f 713a 	mov.w	r1, #744	@ 0x2e8
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f009 fcc8 	bl	8011a8c <_ZdlPvj>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4618      	mov	r0, r3
 8008100:	3708      	adds	r7, #8
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <_ZThn48_N23CPantallaEjecucionRampaD0Ev>:
 8008106:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800810a:	f7ff bfeb 	b.w	80080e4 <_ZN23CPantallaEjecucionRampaD0Ev>
	...

08008110 <_ZN23CPantallaEjecucionRampa10SetIDRampaEi>:
void CPantallaEjecucionRampa::SetIDRampa(int id_rampa)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b088      	sub	sp, #32
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
	ID_Rampa=id_rampa;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	683a      	ldr	r2, [r7, #0]
 800811e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	CRampa rampa=	ControladorRampas.DameRampa(ID_Rampa);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8008128:	f107 0308 	add.w	r3, r7, #8
 800812c:	491f      	ldr	r1, [pc, #124]	@ (80081ac <_ZN23CPantallaEjecucionRampa10SetIDRampaEi+0x9c>)
 800812e:	4618      	mov	r0, r3
 8008130:	f003 fa0d 	bl	800b54e <_ZN18CControladorRampas9DameRampaEi>
	this->SetTituloPantalla(rampa.Nombre);
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	3370      	adds	r3, #112	@ 0x70
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f107 0208 	add.w	r2, r7, #8
 8008142:	3208      	adds	r2, #8
 8008144:	4611      	mov	r1, r2
 8008146:	4798      	blx	r3
	LabelGuardar->SetBackColor(COLOR::GREEN);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800814e:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8008152:	4618      	mov	r0, r3
 8008154:	f7fb f8a2 	bl	800329c <_ZN12CEtiquetaTft12SetBackColorEi>
	LabelCancelar->SetTexto((char*)"REGRESAR");
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800815e:	4914      	ldr	r1, [pc, #80]	@ (80081b0 <_ZN23CPantallaEjecucionRampa10SetIDRampaEi+0xa0>)
 8008160:	4618      	mov	r0, r3
 8008162:	f7fa feeb 	bl	8002f3c <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelGuardar->Show();
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	334c      	adds	r3, #76	@ 0x4c
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4610      	mov	r0, r2
 800817a:	4798      	blx	r3
	LabelCancelar->Show();
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	334c      	adds	r3, #76	@ 0x4c
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4610      	mov	r0, r2
 8008190:	4798      	blx	r3
	Ejecutando=false;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	f883 2248 	strb.w	r2, [r3, #584]	@ 0x248

}
 800819a:	f107 0308 	add.w	r3, r7, #8
 800819e:	4618      	mov	r0, r3
 80081a0:	f003 fce2 	bl	800bb68 <_ZN6CRampaD1Ev>
 80081a4:	3720      	adds	r7, #32
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	20000360 	.word	0x20000360
 80081b0:	08014ac4 	.word	0x08014ac4

080081b4 <_ZN23CPantallaEjecucionRampa20OnBotonUnoClickEventEv>:

void CPantallaEjecucionRampa::OnBotonUnoClickEvent()
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b088      	sub	sp, #32
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
	if(Ejecutando==true)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f893 3248 	ldrb.w	r3, [r3, #584]	@ 0x248
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d06c      	beq.n	80082a0 <_ZN23CPantallaEjecucionRampa20OnBotonUnoClickEventEv+0xec>
		return;
	//ControladorRampas.EliminaRampa(ID_Rampa);
	NPasos=	ControladorPasosRampa.DameNumeroPasosRampa(ID_Rampa);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80081cc:	4619      	mov	r1, r3
 80081ce:	4836      	ldr	r0, [pc, #216]	@ (80082a8 <_ZN23CPantallaEjecucionRampa20OnBotonUnoClickEventEv+0xf4>)
 80081d0:	f002 feca 	bl	800af68 <_ZN22CControladorPasosRampa20DameNumeroPasosRampaEi>
 80081d4:	4602      	mov	r2, r0
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	int id_pasActual=0;
 80081dc:	2300      	movs	r3, #0
 80081de:	61fb      	str	r3, [r7, #28]
	for(int i=0;i<100;i++)
 80081e0:	2300      	movs	r3, #0
 80081e2:	61bb      	str	r3, [r7, #24]
 80081e4:	e028      	b.n	8008238 <_ZN23CPantallaEjecucionRampa20OnBotonUnoClickEventEv+0x84>
	{
		if(i<NPasos)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80081ec:	69ba      	ldr	r2, [r7, #24]
 80081ee:	429a      	cmp	r2, r3
 80081f0:	da18      	bge.n	8008224 <_ZN23CPantallaEjecucionRampa20OnBotonUnoClickEventEv+0x70>
		{
			CPaso paso=ControladorPasosRampa.DameSiguientePaso(ID_Rampa, id_pasActual);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80081f8:	f107 000c 	add.w	r0, r7, #12
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	492a      	ldr	r1, [pc, #168]	@ (80082a8 <_ZN23CPantallaEjecucionRampa20OnBotonUnoClickEventEv+0xf4>)
 8008200:	f002 feed 	bl	800afde <_ZN22CControladorPasosRampa17DameSiguientePasoEii>
			Pasos[i]=paso.ID_Paso;
 8008204:	7cbb      	ldrb	r3, [r7, #18]
 8008206:	4619      	mov	r1, r3
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	332c      	adds	r3, #44	@ 0x2c
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	4413      	add	r3, r2
 8008212:	6059      	str	r1, [r3, #4]
			id_pasActual=paso.ID_Paso;
 8008214:	7cbb      	ldrb	r3, [r7, #18]
 8008216:	61fb      	str	r3, [r7, #28]
		}
 8008218:	f107 030c 	add.w	r3, r7, #12
 800821c:	4618      	mov	r0, r3
 800821e:	f003 fc5d 	bl	800badc <_ZN5CPasoD1Ev>
 8008222:	e006      	b.n	8008232 <_ZN23CPantallaEjecucionRampa20OnBotonUnoClickEventEv+0x7e>
		else
		{
			Pasos[i]=0;
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	332c      	adds	r3, #44	@ 0x2c
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	4413      	add	r3, r2
 800822e:	2200      	movs	r2, #0
 8008230:	605a      	str	r2, [r3, #4]
	for(int i=0;i<100;i++)
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	3301      	adds	r3, #1
 8008236:	61bb      	str	r3, [r7, #24]
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	2b63      	cmp	r3, #99	@ 0x63
 800823c:	ddd3      	ble.n	80081e6 <_ZN23CPantallaEjecucionRampa20OnBotonUnoClickEventEv+0x32>
		}
	}
	PasoActual=0;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	f8c3 2244 	str.w	r2, [r3, #580]	@ 0x244
	LabelGuardar->SetBackColor(COLOR::GREY);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800824c:	f64d 61de 	movw	r1, #57054	@ 0xdede
 8008250:	4618      	mov	r0, r3
 8008252:	f7fb f823 	bl	800329c <_ZN12CEtiquetaTft12SetBackColorEi>
	LabelCancelar->SetTexto((char*)"CANCELAR");
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800825c:	4913      	ldr	r1, [pc, #76]	@ (80082ac <_ZN23CPantallaEjecucionRampa20OnBotonUnoClickEventEv+0xf8>)
 800825e:	4618      	mov	r0, r3
 8008260:	f7fa fe6c 	bl	8002f3c <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelGuardar->Show();
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	334c      	adds	r3, #76	@ 0x4c
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4610      	mov	r0, r2
 8008278:	4798      	blx	r3
	LabelCancelar->Show();
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	334c      	adds	r3, #76	@ 0x4c
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4610      	mov	r0, r2
 800828e:	4798      	blx	r3
	Ejecutando=true;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 2248 	strb.w	r2, [r3, #584]	@ 0x248
	PasoTerminado();
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 f91d 	bl	80084d8 <_ZN23CPantallaEjecucionRampa13PasoTerminadoEv>
 800829e:	e000      	b.n	80082a2 <_ZN23CPantallaEjecucionRampa20OnBotonUnoClickEventEv+0xee>
		return;
 80082a0:	bf00      	nop
//	ManejadorPantallas.AsignaPantallaPasosRampa(ID_Rampa);
}
 80082a2:	3720      	adds	r7, #32
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	200001f4 	.word	0x200001f4
 80082ac:	08014ad0 	.word	0x08014ad0

080082b0 <_ZThn48_N23CPantallaEjecucionRampa20OnBotonUnoClickEventEv>:
	void SetIDRampa(int id_rampa);
	virtual void OnBotonUnoClickEvent();
 80082b0:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80082b4:	f7ff bf7e 	b.w	80081b4 <_ZN23CPantallaEjecucionRampa20OnBotonUnoClickEventEv>

080082b8 <_ZN23CPantallaEjecucionRampa21OnBotonTresClickEventEv>:
void CPantallaEjecucionRampa::OnBotonTresClickEvent()
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]

	 ManejadorPantallas.MuestraPantallaRampa(ID_Rampa);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80082c6:	4619      	mov	r1, r3
 80082c8:	4803      	ldr	r0, [pc, #12]	@ (80082d8 <_ZN23CPantallaEjecucionRampa21OnBotonTresClickEventEv+0x20>)
 80082ca:	f7fb fed5 	bl	8004078 <_ZN19CManejadorPantallas20MuestraPantallaRampaEi>

}
 80082ce:	bf00      	nop
 80082d0:	3708      	adds	r7, #8
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	20000258 	.word	0x20000258

080082dc <_ZThn48_N23CPantallaEjecucionRampa21OnBotonTresClickEventEv>:
	virtual void OnBotonTresClickEvent();
 80082dc:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80082e0:	f7ff bfea 	b.w	80082b8 <_ZN23CPantallaEjecucionRampa21OnBotonTresClickEventEv>

080082e4 <_ZN23CPantallaEjecucionRampa4ShowEv>:
void CPantallaEjecucionRampa::Show()
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
	CPantallaBase::Show();
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fb f8a8 	bl	8003444 <_ZN13CPantallaBase4ShowEv>
	MuestraDatos();
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f95f 	bl	80085b8 <_ZN23CPantallaEjecucionRampa12MuestraDatosEv>

	LabelGuardar->Show();
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	334c      	adds	r3, #76	@ 0x4c
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4610      	mov	r0, r2
 800830e:	4798      	blx	r3
	LabelCancelar->Show();
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	334c      	adds	r3, #76	@ 0x4c
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4610      	mov	r0, r2
 8008324:	4798      	blx	r3

}
 8008326:	bf00      	nop
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
	...

08008330 <_ZN23CPantallaEjecucionRampa8RefrescaEv>:
void CPantallaEjecucionRampa::Refresca()
{
 8008330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008334:	b084      	sub	sp, #16
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
	if(Ejecutando==true)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f893 3248 	ldrb.w	r3, [r3, #584]	@ 0x248
 8008340:	2b01      	cmp	r3, #1
 8008342:	f040 8095 	bne.w	8008470 <_ZN23CPantallaEjecucionRampa8RefrescaEv+0x140>
	{
		if(TiempoMilis<=0)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	e9d3 2394 	ldrd	r2, r3, [r3, #592]	@ 0x250
 800834c:	2a01      	cmp	r2, #1
 800834e:	f173 0300 	sbcs.w	r3, r3, #0
 8008352:	da03      	bge.n	800835c <_ZN23CPantallaEjecucionRampa8RefrescaEv+0x2c>
		{
			PasoTerminado();
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 f8bf 	bl	80084d8 <_ZN23CPantallaEjecucionRampa13PasoTerminadoEv>
			return;
 800835a:	e094      	b.n	8008486 <_ZN23CPantallaEjecucionRampa8RefrescaEv+0x156>
		}
		int mili=HAL_GetTick();
 800835c:	f005 fa68 	bl	800d830 <HAL_GetTick>
 8008360:	4603      	mov	r3, r0
 8008362:	60fb      	str	r3, [r7, #12]
		if(mili>UltimoMili)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 800836a:	68fa      	ldr	r2, [r7, #12]
 800836c:	429a      	cmp	r2, r3
 800836e:	f340 808a 	ble.w	8008486 <_ZN23CPantallaEjecucionRampa8RefrescaEv+0x156>
		{
			TiempoMilis=TiempoMilis-(mili-UltimoMili);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	e9d3 2394 	ldrd	r2, r3, [r3, #592]	@ 0x250
 8008378:	6879      	ldr	r1, [r7, #4]
 800837a:	f8d1 1258 	ldr.w	r1, [r1, #600]	@ 0x258
 800837e:	68f8      	ldr	r0, [r7, #12]
 8008380:	1a41      	subs	r1, r0, r1
 8008382:	17c8      	asrs	r0, r1, #31
 8008384:	4688      	mov	r8, r1
 8008386:	4681      	mov	r9, r0
 8008388:	ebb2 0a08 	subs.w	sl, r2, r8
 800838c:	eb63 0b09 	sbc.w	fp, r3, r9
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	e9c3 ab94 	strd	sl, fp, [r3, #592]	@ 0x250
			UltimoMili=mili;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	68fa      	ldr	r2, [r7, #12]
 800839a:	f8c3 2258 	str.w	r2, [r3, #600]	@ 0x258
			if((TiempoMilis/1000)!=Segundos)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	e9d3 0194 	ldrd	r0, r1, [r3, #592]	@ 0x250
 80083a4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80083a8:	f04f 0300 	mov.w	r3, #0
 80083ac:	f7f8 fc04 	bl	8000bb8 <__aeabi_ldivmod>
 80083b0:	4602      	mov	r2, r0
 80083b2:	460b      	mov	r3, r1
 80083b4:	6879      	ldr	r1, [r7, #4]
 80083b6:	f9b1 12c0 	ldrsh.w	r1, [r1, #704]	@ 0x2c0
 80083ba:	b209      	sxth	r1, r1
 80083bc:	17c8      	asrs	r0, r1, #31
 80083be:	460c      	mov	r4, r1
 80083c0:	4605      	mov	r5, r0
 80083c2:	42ab      	cmp	r3, r5
 80083c4:	bf08      	it	eq
 80083c6:	42a2      	cmpeq	r2, r4
 80083c8:	d05d      	beq.n	8008486 <_ZN23CPantallaEjecucionRampa8RefrescaEv+0x156>
			{
				Segundos=(TiempoMilis/1000);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	e9d3 0194 	ldrd	r0, r1, [r3, #592]	@ 0x250
 80083d0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80083d4:	f04f 0300 	mov.w	r3, #0
 80083d8:	f7f8 fbee 	bl	8000bb8 <__aeabi_ldivmod>
 80083dc:	4602      	mov	r2, r0
 80083de:	460b      	mov	r3, r1
 80083e0:	b212      	sxth	r2, r2
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8a3 22c0 	strh.w	r2, [r3, #704]	@ 0x2c0
				SegundosATexto(Segundos);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f9b3 32c0 	ldrsh.w	r3, [r3, #704]	@ 0x2c0
 80083ee:	4619      	mov	r1, r3
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 f94d 	bl	8008690 <_ZN23CPantallaEjecucionRampa14SegundosATextoEi>
				LabelTiempo->SetTexto((char*)"TIEM:%s     ",TextoTiempo);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 02e4 	ldr.w	r0, [r3, #740]	@ 0x2e4
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8008402:	461a      	mov	r2, r3
 8008404:	4922      	ldr	r1, [pc, #136]	@ (8008490 <_ZN23CPantallaEjecucionRampa8RefrescaEv+0x160>)
 8008406:	f7fa fd99 	bl	8002f3c <_ZN12CEtiquetaTft8SetTextoEPcz>
				LabelTiempo->Show();
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8d3 22e4 	ldr.w	r2, [r3, #740]	@ 0x2e4
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	334c      	adds	r3, #76	@ 0x4c
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4610      	mov	r0, r2
 800841e:	4798      	blx	r3
				int temperaturaReal=Estacion->GetTemperaturaRealx();
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	3308      	adds	r3, #8
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4610      	mov	r0, r2
 8008434:	4798      	blx	r3
 8008436:	eef0 7a40 	vmov.f32	s15, s0
 800843a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800843e:	ee17 3a90 	vmov	r3, s15
 8008442:	60bb      	str	r3, [r7, #8]
				LabelTemperatura->SetTexto((char*)"TEMP:%d/%d     ",temperaturaReal,Paso.Temperatura);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 02dc 	ldr.w	r0, [r3, #732]	@ 0x2dc
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f893 32cb 	ldrb.w	r3, [r3, #715]	@ 0x2cb
 8008450:	68ba      	ldr	r2, [r7, #8]
 8008452:	4910      	ldr	r1, [pc, #64]	@ (8008494 <_ZN23CPantallaEjecucionRampa8RefrescaEv+0x164>)
 8008454:	f7fa fd72 	bl	8002f3c <_ZN12CEtiquetaTft8SetTextoEPcz>
				LabelTemperatura->Show();
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 22dc 	ldr.w	r2, [r3, #732]	@ 0x2dc
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	334c      	adds	r3, #76	@ 0x4c
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4610      	mov	r0, r2
 800846c:	4798      	blx	r3
 800846e:	e00a      	b.n	8008486 <_ZN23CPantallaEjecucionRampa8RefrescaEv+0x156>
			}
		}
	}
	else
	{
		Estacion->DesactivarCalefactor();
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	3338      	adds	r3, #56	@ 0x38
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4610      	mov	r0, r2
 8008484:	4798      	blx	r3

	}
}
 8008486:	3710      	adds	r7, #16
 8008488:	46bd      	mov	sp, r7
 800848a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800848e:	bf00      	nop
 8008490:	08014adc 	.word	0x08014adc
 8008494:	08014aec 	.word	0x08014aec

08008498 <_ZN23CPantallaEjecucionRampa12FinEjecucionEv>:
void CPantallaEjecucionRampa::FinEjecucion()
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
	Ejecutando=false;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 2248 	strb.w	r2, [r3, #584]	@ 0x248
	 ManejadorPantallas.MuestraPantallaRampa(ID_Rampa);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80084ae:	4619      	mov	r1, r3
 80084b0:	4808      	ldr	r0, [pc, #32]	@ (80084d4 <_ZN23CPantallaEjecucionRampa12FinEjecucionEv+0x3c>)
 80084b2:	f7fb fde1 	bl	8004078 <_ZN19CManejadorPantallas20MuestraPantallaRampaEi>
	 Estacion->DesactivarCalefactor();
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	3338      	adds	r3, #56	@ 0x38
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4610      	mov	r0, r2
 80084ca:	4798      	blx	r3
}
 80084cc:	bf00      	nop
 80084ce:	3708      	adds	r7, #8
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	20000258 	.word	0x20000258

080084d8 <_ZN23CPantallaEjecucionRampa13PasoTerminadoEv>:
void CPantallaEjecucionRampa::PasoTerminado()
{
 80084d8:	b5b0      	push	{r4, r5, r7, lr}
 80084da:	b086      	sub	sp, #24
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
	if(PasoActual>=NPasos)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 2244 	ldr.w	r2, [r3, #580]	@ 0x244
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80084ec:	429a      	cmp	r2, r3
 80084ee:	db03      	blt.n	80084f8 <_ZN23CPantallaEjecucionRampa13PasoTerminadoEv+0x20>
	{
		FinEjecucion();
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f7ff ffd1 	bl	8008498 <_ZN23CPantallaEjecucionRampa12FinEjecucionEv>
 80084f6:	e05a      	b.n	80085ae <_ZN23CPantallaEjecucionRampa13PasoTerminadoEv+0xd6>
		return;
	}

	int id_pasActual=Pasos[PasoActual];
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 3244 	ldr.w	r3, [r3, #580]	@ 0x244
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	332c      	adds	r3, #44	@ 0x2c
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	4413      	add	r3, r2
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	617b      	str	r3, [r7, #20]
	CPaso paso=ControladorPasosRampa.DamePasoRampa( id_pasActual);
 800850a:	f107 0308 	add.w	r3, r7, #8
 800850e:	697a      	ldr	r2, [r7, #20]
 8008510:	4928      	ldr	r1, [pc, #160]	@ (80085b4 <_ZN23CPantallaEjecucionRampa13PasoTerminadoEv+0xdc>)
 8008512:	4618      	mov	r0, r3
 8008514:	f002 fdbb 	bl	800b08e <_ZN22CControladorPasosRampa13DamePasoRampaEi>
	PasoActual++;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 3244 	ldr.w	r3, [r3, #580]	@ 0x244
 800851e:	1c5a      	adds	r2, r3, #1
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8c3 2244 	str.w	r2, [r3, #580]	@ 0x244
	Paso.ID_Paso=paso.ID_Paso;
 8008526:	7bba      	ldrb	r2, [r7, #14]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f883 22ca 	strb.w	r2, [r3, #714]	@ 0x2ca
	Paso.ID_Rampa=paso.ID_Rampa;
 800852e:	7b7a      	ldrb	r2, [r7, #13]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f883 22c9 	strb.w	r2, [r3, #713]	@ 0x2c9
	Paso.NivelAire=paso.NivelAire;
 8008536:	7c3a      	ldrb	r2, [r7, #16]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
	Paso.Ocupado=paso.Ocupado;
 800853e:	7b3a      	ldrb	r2, [r7, #12]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
	Paso.Minutos=paso.Minutos;
 8008546:	7c7a      	ldrb	r2, [r7, #17]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f883 22cd 	strb.w	r2, [r3, #717]	@ 0x2cd
	Segundos=Paso.Minutos*60;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f893 32cd 	ldrb.w	r3, [r3, #717]	@ 0x2cd
 8008554:	461a      	mov	r2, r3
 8008556:	0112      	lsls	r2, r2, #4
 8008558:	1ad3      	subs	r3, r2, r3
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	b29b      	uxth	r3, r3
 800855e:	b21a      	sxth	r2, r3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8a3 22c0 	strh.w	r2, [r3, #704]	@ 0x2c0
	Paso.Temperatura=paso.Temperatura;
 8008566:	7bfa      	ldrb	r2, [r7, #15]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f883 22cb 	strb.w	r2, [r3, #715]	@ 0x2cb
	TiempoMilis=Segundos*1000;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f9b3 32c0 	ldrsh.w	r3, [r3, #704]	@ 0x2c0
 8008574:	461a      	mov	r2, r3
 8008576:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800857a:	fb02 f303 	mul.w	r3, r2, r3
 800857e:	17da      	asrs	r2, r3, #31
 8008580:	461c      	mov	r4, r3
 8008582:	4615      	mov	r5, r2
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	e9c3 4594 	strd	r4, r5, [r3, #592]	@ 0x250
	UltimoMili=HAL_GetTick();
 800858a:	f005 f951 	bl	800d830 <HAL_GetTick>
 800858e:	4603      	mov	r3, r0
 8008590:	461a      	mov	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8c3 2258 	str.w	r2, [r3, #600]	@ 0x258
	 ActualizaEstacion();
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 f8c9 	bl	8008730 <_ZN23CPantallaEjecucionRampa17ActualizaEstacionEv>
	MuestraDatos();
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 f80a 	bl	80085b8 <_ZN23CPantallaEjecucionRampa12MuestraDatosEv>
}
 80085a4:	f107 0308 	add.w	r3, r7, #8
 80085a8:	4618      	mov	r0, r3
 80085aa:	f003 fa97 	bl	800badc <_ZN5CPasoD1Ev>
 80085ae:	3718      	adds	r7, #24
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bdb0      	pop	{r4, r5, r7, pc}
 80085b4:	200001f4 	.word	0x200001f4

080085b8 <_ZN23CPantallaEjecucionRampa12MuestraDatosEv>:
void CPantallaEjecucionRampa::MuestraDatos()
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
	LabelPaso->SetTexto((char*)"Paso:%d",Paso.ID_Paso);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f893 32ca 	ldrb.w	r3, [r3, #714]	@ 0x2ca
 80085cc:	461a      	mov	r2, r3
 80085ce:	492c      	ldr	r1, [pc, #176]	@ (8008680 <_ZN23CPantallaEjecucionRampa12MuestraDatosEv+0xc8>)
 80085d0:	f7fa fcb4 	bl	8002f3c <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelPaso->Show();
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	334c      	adds	r3, #76	@ 0x4c
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4610      	mov	r0, r2
 80085e8:	4798      	blx	r3
	LabelTemperatura->SetTexto((char*)"TEMP:%d",Paso.Temperatura);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 02dc 	ldr.w	r0, [r3, #732]	@ 0x2dc
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f893 32cb 	ldrb.w	r3, [r3, #715]	@ 0x2cb
 80085f6:	461a      	mov	r2, r3
 80085f8:	4922      	ldr	r1, [pc, #136]	@ (8008684 <_ZN23CPantallaEjecucionRampa12MuestraDatosEv+0xcc>)
 80085fa:	f7fa fc9f 	bl	8002f3c <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelTemperatura->Show();
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 22dc 	ldr.w	r2, [r3, #732]	@ 0x2dc
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	334c      	adds	r3, #76	@ 0x4c
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4610      	mov	r0, r2
 8008612:	4798      	blx	r3
	LabelAire->SetTexto((char*)"AIRE:%d",Paso.NivelAire);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8008620:	461a      	mov	r2, r3
 8008622:	4919      	ldr	r1, [pc, #100]	@ (8008688 <_ZN23CPantallaEjecucionRampa12MuestraDatosEv+0xd0>)
 8008624:	f7fa fc8a 	bl	8002f3c <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelAire->Show();
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	334c      	adds	r3, #76	@ 0x4c
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4610      	mov	r0, r2
 800863c:	4798      	blx	r3
	SegundosATexto(Segundos);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f9b3 32c0 	ldrsh.w	r3, [r3, #704]	@ 0x2c0
 8008644:	4619      	mov	r1, r3
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f822 	bl	8008690 <_ZN23CPantallaEjecucionRampa14SegundosATextoEi>
	LabelTiempo->SetTexto((char*)"SEG:%s",TextoTiempo);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 02e4 	ldr.w	r0, [r3, #740]	@ 0x2e4
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8008658:	461a      	mov	r2, r3
 800865a:	490c      	ldr	r1, [pc, #48]	@ (800868c <_ZN23CPantallaEjecucionRampa12MuestraDatosEv+0xd4>)
 800865c:	f7fa fc6e 	bl	8002f3c <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelTiempo->Show();
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 22e4 	ldr.w	r2, [r3, #740]	@ 0x2e4
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	334c      	adds	r3, #76	@ 0x4c
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4610      	mov	r0, r2
 8008674:	4798      	blx	r3
}
 8008676:	bf00      	nop
 8008678:	3708      	adds	r7, #8
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	08014afc 	.word	0x08014afc
 8008684:	08014b04 	.word	0x08014b04
 8008688:	08014b0c 	.word	0x08014b0c
 800868c:	08014b14 	.word	0x08014b14

08008690 <_ZN23CPantallaEjecucionRampa14SegundosATextoEi>:
void CPantallaEjecucionRampa::SegundosATexto(int tiempoSegundos)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b088      	sub	sp, #32
 8008694:	af02      	add	r7, sp, #8
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
	int horas;
	int minutos;
	int segundos;
	for(int i=0;i<100;i++)
 800869a:	2300      	movs	r3, #0
 800869c:	617b      	str	r3, [r7, #20]
 800869e:	e009      	b.n	80086b4 <_ZN23CPantallaEjecucionRampa14SegundosATextoEi+0x24>
	{
		TextoTiempo[i]='\0';
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	4413      	add	r3, r2
 80086a6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80086aa:	2200      	movs	r2, #0
 80086ac:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<100;i++)
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	3301      	adds	r3, #1
 80086b2:	617b      	str	r3, [r7, #20]
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	2b63      	cmp	r3, #99	@ 0x63
 80086b8:	ddf2      	ble.n	80086a0 <_ZN23CPantallaEjecucionRampa14SegundosATextoEi+0x10>
	}
	horas=tiempoSegundos/(3600);
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	4a18      	ldr	r2, [pc, #96]	@ (8008720 <_ZN23CPantallaEjecucionRampa14SegundosATextoEi+0x90>)
 80086be:	fb82 1203 	smull	r1, r2, r2, r3
 80086c2:	441a      	add	r2, r3
 80086c4:	12d2      	asrs	r2, r2, #11
 80086c6:	17db      	asrs	r3, r3, #31
 80086c8:	1ad3      	subs	r3, r2, r3
 80086ca:	613b      	str	r3, [r7, #16]
	tiempoSegundos=tiempoSegundos-(horas*3600);
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	4a15      	ldr	r2, [pc, #84]	@ (8008724 <_ZN23CPantallaEjecucionRampa14SegundosATextoEi+0x94>)
 80086d0:	fb02 f303 	mul.w	r3, r2, r3
 80086d4:	683a      	ldr	r2, [r7, #0]
 80086d6:	4413      	add	r3, r2
 80086d8:	603b      	str	r3, [r7, #0]
	minutos=tiempoSegundos/(60);
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	4a12      	ldr	r2, [pc, #72]	@ (8008728 <_ZN23CPantallaEjecucionRampa14SegundosATextoEi+0x98>)
 80086de:	fb82 1203 	smull	r1, r2, r2, r3
 80086e2:	441a      	add	r2, r3
 80086e4:	1152      	asrs	r2, r2, #5
 80086e6:	17db      	asrs	r3, r3, #31
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	60fb      	str	r3, [r7, #12]
	tiempoSegundos=tiempoSegundos-(minutos*60);
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	4613      	mov	r3, r2
 80086f0:	0112      	lsls	r2, r2, #4
 80086f2:	1a9b      	subs	r3, r3, r2
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	461a      	mov	r2, r3
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	4413      	add	r3, r2
 80086fc:	603b      	str	r3, [r7, #0]
	segundos=tiempoSegundos;
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	60bb      	str	r3, [r7, #8]
	sprintf(TextoTiempo,(char*)"%d:%d:%d",horas,minutos,segundos);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f503 7017 	add.w	r0, r3, #604	@ 0x25c
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	9300      	str	r3, [sp, #0]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	693a      	ldr	r2, [r7, #16]
 8008710:	4906      	ldr	r1, [pc, #24]	@ (800872c <_ZN23CPantallaEjecucionRampa14SegundosATextoEi+0x9c>)
 8008712:	f009 ffb9 	bl	8012688 <siprintf>
}
 8008716:	bf00      	nop
 8008718:	3718      	adds	r7, #24
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	91a2b3c5 	.word	0x91a2b3c5
 8008724:	fffff1f0 	.word	0xfffff1f0
 8008728:	88888889 	.word	0x88888889
 800872c:	08014b1c 	.word	0x08014b1c

08008730 <_ZN23CPantallaEjecucionRampa17ActualizaEstacionEv>:
void CPantallaEjecucionRampa::ActualizaEstacion()
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
	Estacion->SetTemperatura(Paso.Temperatura);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	330c      	adds	r3, #12
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	f892 22cb 	ldrb.w	r2, [r2, #715]	@ 0x2cb
 8008750:	4611      	mov	r1, r2
 8008752:	4798      	blx	r3
	Estacion->SetNivelAire(Paso.NivelAire);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	3314      	adds	r3, #20
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	f892 22cc 	ldrb.w	r2, [r2, #716]	@ 0x2cc
 800876c:	4611      	mov	r1, r2
 800876e:	4798      	blx	r3
	Estacion->ActivarCalefactor();
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	3334      	adds	r3, #52	@ 0x34
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4610      	mov	r0, r2
 8008784:	4798      	blx	r3
}
 8008786:	bf00      	nop
 8008788:	3708      	adds	r7, #8
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <_ZN23CPantallaEjecucionRampa11SetEstacionEP13CEstacionBase>:
void CPantallaEjecucionRampa::SetEstacion(CEstacionBase *estacion)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b082      	sub	sp, #8
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
 8008796:	6039      	str	r1, [r7, #0]
	CPantallaBase::SetEstacion(estacion);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6839      	ldr	r1, [r7, #0]
 800879c:	4618      	mov	r0, r3
 800879e:	f7fa fe6c 	bl	800347a <_ZN13CPantallaBase11SetEstacionEP13CEstacionBase>
	Estacion->DesactivarCalefactor();
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	3338      	adds	r3, #56	@ 0x38
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4610      	mov	r0, r2
 80087b6:	4798      	blx	r3
}
 80087b8:	bf00      	nop
 80087ba:	3708      	adds	r7, #8
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <_ZN21CPantallaEliminarPasoC1Ev>:

#include <GUI/Rampa/PantallaEliminarPaso/CPantallaEliminarPaso.hpp>
#include <RapaTemperatura/CControladorPasosRampa.hpp>
#include <GUI/ManejadorPantallas/CManejadorPantallas.hpp>

CPantallaEliminarPaso::CPantallaEliminarPaso():
 80087c0:	b590      	push	{r4, r7, lr}
 80087c2:	b08b      	sub	sp, #44	@ 0x2c
 80087c4:	af08      	add	r7, sp, #32
 80087c6:	6078      	str	r0, [r7, #4]
CPantallaBase(1, (char*)" ELIMINAR PASO")
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a35      	ldr	r2, [pc, #212]	@ (80088a0 <_ZN21CPantallaEliminarPasoC1Ev+0xe0>)
 80087cc:	2101      	movs	r1, #1
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7fa fdc6 	bl	8003360 <_ZN13CPantallaBaseC1EiPc>
 80087d4:	4a33      	ldr	r2, [pc, #204]	@ (80088a4 <_ZN21CPantallaEliminarPasoC1Ev+0xe4>)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	601a      	str	r2, [r3, #0]
 80087da:	4a33      	ldr	r2, [pc, #204]	@ (80088a8 <_ZN21CPantallaEliminarPasoC1Ev+0xe8>)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated constructor stub
	LabelMemoria=new CEtiquetaTft( 5, 35, 50, 20, COLOR::BLACK,(char*)"Eliminar: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 80087e0:	20a4      	movs	r0, #164	@ 0xa4
 80087e2:	f009 f955 	bl	8011a90 <_Znwj>
 80087e6:	4603      	mov	r3, r0
 80087e8:	461c      	mov	r4, r3
 80087ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80087ee:	9306      	str	r3, [sp, #24]
 80087f0:	2300      	movs	r3, #0
 80087f2:	9305      	str	r3, [sp, #20]
 80087f4:	2303      	movs	r3, #3
 80087f6:	9304      	str	r3, [sp, #16]
 80087f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80087fc:	9303      	str	r3, [sp, #12]
 80087fe:	4b2b      	ldr	r3, [pc, #172]	@ (80088ac <_ZN21CPantallaEliminarPasoC1Ev+0xec>)
 8008800:	9302      	str	r3, [sp, #8]
 8008802:	2300      	movs	r3, #0
 8008804:	9301      	str	r3, [sp, #4]
 8008806:	2314      	movs	r3, #20
 8008808:	9300      	str	r3, [sp, #0]
 800880a:	2332      	movs	r3, #50	@ 0x32
 800880c:	2223      	movs	r2, #35	@ 0x23
 800880e:	2105      	movs	r1, #5
 8008810:	4620      	mov	r0, r4
 8008812:	f7fa fb59 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8c3 40dc 	str.w	r4, [r3, #220]	@ 0xdc
	LabelGuardar=new CEtiquetaTft( 10, 200, 130, 30, COLOR::GREEN,(char*)"ACEPTAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 800881c:	20a4      	movs	r0, #164	@ 0xa4
 800881e:	f009 f937 	bl	8011a90 <_Znwj>
 8008822:	4603      	mov	r3, r0
 8008824:	461c      	mov	r4, r3
 8008826:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800882a:	9306      	str	r3, [sp, #24]
 800882c:	2301      	movs	r3, #1
 800882e:	9305      	str	r3, [sp, #20]
 8008830:	2303      	movs	r3, #3
 8008832:	9304      	str	r3, [sp, #16]
 8008834:	2300      	movs	r3, #0
 8008836:	9303      	str	r3, [sp, #12]
 8008838:	4b1d      	ldr	r3, [pc, #116]	@ (80088b0 <_ZN21CPantallaEliminarPasoC1Ev+0xf0>)
 800883a:	9302      	str	r3, [sp, #8]
 800883c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8008840:	9301      	str	r3, [sp, #4]
 8008842:	231e      	movs	r3, #30
 8008844:	9300      	str	r3, [sp, #0]
 8008846:	2382      	movs	r3, #130	@ 0x82
 8008848:	22c8      	movs	r2, #200	@ 0xc8
 800884a:	210a      	movs	r1, #10
 800884c:	4620      	mov	r0, r4
 800884e:	f7fa fb3b 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8c3 40d4 	str.w	r4, [r3, #212]	@ 0xd4
	LabelCancelar=new CEtiquetaTft( 160, 200, 145, 30, COLOR::RED,(char*)"CANCELAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 8008858:	20a4      	movs	r0, #164	@ 0xa4
 800885a:	f009 f919 	bl	8011a90 <_Znwj>
 800885e:	4603      	mov	r3, r0
 8008860:	461c      	mov	r4, r3
 8008862:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008866:	9306      	str	r3, [sp, #24]
 8008868:	2301      	movs	r3, #1
 800886a:	9305      	str	r3, [sp, #20]
 800886c:	2303      	movs	r3, #3
 800886e:	9304      	str	r3, [sp, #16]
 8008870:	2300      	movs	r3, #0
 8008872:	9303      	str	r3, [sp, #12]
 8008874:	4b0f      	ldr	r3, [pc, #60]	@ (80088b4 <_ZN21CPantallaEliminarPasoC1Ev+0xf4>)
 8008876:	9302      	str	r3, [sp, #8]
 8008878:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800887c:	9301      	str	r3, [sp, #4]
 800887e:	231e      	movs	r3, #30
 8008880:	9300      	str	r3, [sp, #0]
 8008882:	2391      	movs	r3, #145	@ 0x91
 8008884:	22c8      	movs	r2, #200	@ 0xc8
 8008886:	21a0      	movs	r1, #160	@ 0xa0
 8008888:	4620      	mov	r0, r4
 800888a:	f7fa fb1d 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8c3 40d8 	str.w	r4, [r3, #216]	@ 0xd8

}
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	4618      	mov	r0, r3
 8008898:	370c      	adds	r7, #12
 800889a:	46bd      	mov	sp, r7
 800889c:	bd90      	pop	{r4, r7, pc}
 800889e:	bf00      	nop
 80088a0:	08014b28 	.word	0x08014b28
 80088a4:	08015944 	.word	0x08015944
 80088a8:	080159d0 	.word	0x080159d0
 80088ac:	08014b38 	.word	0x08014b38
 80088b0:	08014b44 	.word	0x08014b44
 80088b4:	08014b4c 	.word	0x08014b4c

080088b8 <_ZN21CPantallaEliminarPasoD1Ev>:

CPantallaEliminarPaso::~CPantallaEliminarPaso()
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	4a07      	ldr	r2, [pc, #28]	@ (80088e0 <_ZN21CPantallaEliminarPasoD1Ev+0x28>)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	601a      	str	r2, [r3, #0]
 80088c6:	4a07      	ldr	r2, [pc, #28]	@ (80088e4 <_ZN21CPantallaEliminarPasoD1Ev+0x2c>)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7fa fd12 	bl	80032f8 <_ZN13CPantallaBaseD1Ev>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	4618      	mov	r0, r3
 80088d8:	3708      	adds	r7, #8
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	08015944 	.word	0x08015944
 80088e4:	080159d0 	.word	0x080159d0

080088e8 <_ZThn48_N21CPantallaEliminarPasoD1Ev>:
	CEtiquetaTft *LabelGuardar;
	CEtiquetaTft *LabelCancelar;
	CEtiquetaTft *LabelMemoria;
public:
	CPantallaEliminarPaso();
	virtual ~CPantallaEliminarPaso();
 80088e8:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80088ec:	f7ff bfe4 	b.w	80088b8 <_ZN21CPantallaEliminarPasoD1Ev>

080088f0 <_ZN21CPantallaEliminarPasoD0Ev>:
CPantallaEliminarPaso::~CPantallaEliminarPaso()
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
}
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f7ff ffdd 	bl	80088b8 <_ZN21CPantallaEliminarPasoD1Ev>
 80088fe:	21e0      	movs	r1, #224	@ 0xe0
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f009 f8c3 	bl	8011a8c <_ZdlPvj>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	4618      	mov	r0, r3
 800890a:	3708      	adds	r7, #8
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <_ZThn48_N21CPantallaEliminarPasoD0Ev>:
 8008910:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008914:	f7ff bfec 	b.w	80088f0 <_ZN21CPantallaEliminarPasoD0Ev>

08008918 <_ZN21CPantallaEliminarPaso20OnBotonUnoClickEventEv>:

void CPantallaEliminarPaso::OnBotonUnoClickEvent()
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
	//ControladorRampas.EliminaRampa(ID_Rampa);
	ControladorPasosRampa.EliminaPasoRampa(ID_Paso);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008926:	4619      	mov	r1, r3
 8008928:	4806      	ldr	r0, [pc, #24]	@ (8008944 <_ZN21CPantallaEliminarPaso20OnBotonUnoClickEventEv+0x2c>)
 800892a:	f002 fa78 	bl	800ae1e <_ZN22CControladorPasosRampa16EliminaPasoRampaEi>
	ManejadorPantallas.AsignaPantallaPasosRampa(ID_Rampa);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008934:	4619      	mov	r1, r3
 8008936:	4804      	ldr	r0, [pc, #16]	@ (8008948 <_ZN21CPantallaEliminarPaso20OnBotonUnoClickEventEv+0x30>)
 8008938:	f7fb fc01 	bl	800413e <_ZN19CManejadorPantallas24AsignaPantallaPasosRampaEi>
}
 800893c:	bf00      	nop
 800893e:	3708      	adds	r7, #8
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}
 8008944:	200001f4 	.word	0x200001f4
 8008948:	20000258 	.word	0x20000258

0800894c <_ZThn48_N21CPantallaEliminarPaso20OnBotonUnoClickEventEv>:
	virtual void OnBotonUnoClickEvent();
 800894c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008950:	f7ff bfe2 	b.w	8008918 <_ZN21CPantallaEliminarPaso20OnBotonUnoClickEventEv>

08008954 <_ZN21CPantallaEliminarPaso21OnBotonTresClickEventEv>:
void CPantallaEliminarPaso::OnBotonTresClickEvent()
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]

	 ManejadorPantallas.MuestraPantallaPaso(ID_Rampa, ID_Paso);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008968:	461a      	mov	r2, r3
 800896a:	4803      	ldr	r0, [pc, #12]	@ (8008978 <_ZN21CPantallaEliminarPaso21OnBotonTresClickEventEv+0x24>)
 800896c:	f7fb fc5c 	bl	8004228 <_ZN19CManejadorPantallas19MuestraPantallaPasoEii>

}
 8008970:	bf00      	nop
 8008972:	3708      	adds	r7, #8
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}
 8008978:	20000258 	.word	0x20000258

0800897c <_ZThn48_N21CPantallaEliminarPaso21OnBotonTresClickEventEv>:
	virtual void OnBotonTresClickEvent();
 800897c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008980:	f7ff bfe8 	b.w	8008954 <_ZN21CPantallaEliminarPaso21OnBotonTresClickEventEv>

08008984 <_ZN21CPantallaEliminarPaso9SetIdPasoEii>:

void CPantallaEliminarPaso::SetIdPaso(int id_rampa,int id_paso)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	607a      	str	r2, [r7, #4]
	ID_Paso=id_paso;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	ID_Rampa=id_rampa;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	68ba      	ldr	r2, [r7, #8]
 800899c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	//CRampa rampa=	ControladorRampas.DameRampa(ID_Rampa);
	sprintf(TextoEliminar,"Eliminar ?");
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	33b4      	adds	r3, #180	@ 0xb4
 80089a4:	4903      	ldr	r1, [pc, #12]	@ (80089b4 <_ZN21CPantallaEliminarPaso9SetIdPasoEii+0x30>)
 80089a6:	4618      	mov	r0, r3
 80089a8:	f009 fe6e 	bl	8012688 <siprintf>
}
 80089ac:	bf00      	nop
 80089ae:	3710      	adds	r7, #16
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	08014b58 	.word	0x08014b58

080089b8 <_ZN21CPantallaEliminarPaso4ShowEv>:

void CPantallaEliminarPaso::Show()
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
	CPantallaBase::Show();
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7fa fd3e 	bl	8003444 <_ZN13CPantallaBase4ShowEv>
	LabelMemoria->SetTexto(TextoEliminar);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	33b4      	adds	r3, #180	@ 0xb4
 80089d2:	4619      	mov	r1, r3
 80089d4:	4610      	mov	r0, r2
 80089d6:	f7fa fab1 	bl	8002f3c <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelMemoria->Show();
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	334c      	adds	r3, #76	@ 0x4c
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4610      	mov	r0, r2
 80089ee:	4798      	blx	r3
	LabelGuardar->Show();
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	334c      	adds	r3, #76	@ 0x4c
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4610      	mov	r0, r2
 8008a04:	4798      	blx	r3
	LabelCancelar->Show();
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	334c      	adds	r3, #76	@ 0x4c
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4610      	mov	r0, r2
 8008a1a:	4798      	blx	r3

}
 8008a1c:	bf00      	nop
 8008a1e:	3708      	adds	r7, #8
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <_ZN22CPantallaEliminarRampaC1Ev>:
#include <GUI/ManejadorPantallas/CManejadorPantallas.hpp>
#include <EPROM/CEprom.hpp>
#include<string.h>
#include <RapaTemperatura/CControladorPasosRampa.hpp>

CPantallaEliminarRampa::CPantallaEliminarRampa():
 8008a24:	b590      	push	{r4, r7, lr}
 8008a26:	b08b      	sub	sp, #44	@ 0x2c
 8008a28:	af08      	add	r7, sp, #32
 8008a2a:	6078      	str	r0, [r7, #4]
CPantallaBase(1, (char*)" ELIMINAR RAMPA")
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4a35      	ldr	r2, [pc, #212]	@ (8008b04 <_ZN22CPantallaEliminarRampaC1Ev+0xe0>)
 8008a30:	2101      	movs	r1, #1
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7fa fc94 	bl	8003360 <_ZN13CPantallaBaseC1EiPc>
 8008a38:	4a33      	ldr	r2, [pc, #204]	@ (8008b08 <_ZN22CPantallaEliminarRampaC1Ev+0xe4>)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	601a      	str	r2, [r3, #0]
 8008a3e:	4a33      	ldr	r2, [pc, #204]	@ (8008b0c <_ZN22CPantallaEliminarRampaC1Ev+0xe8>)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated constructor stub
	LabelMemoria=new CEtiquetaTft( 5, 35, 50, 20, COLOR::BLACK,(char*)"Eliminar: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8008a44:	20a4      	movs	r0, #164	@ 0xa4
 8008a46:	f009 f823 	bl	8011a90 <_Znwj>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	461c      	mov	r4, r3
 8008a4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008a52:	9306      	str	r3, [sp, #24]
 8008a54:	2300      	movs	r3, #0
 8008a56:	9305      	str	r3, [sp, #20]
 8008a58:	2303      	movs	r3, #3
 8008a5a:	9304      	str	r3, [sp, #16]
 8008a5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008a60:	9303      	str	r3, [sp, #12]
 8008a62:	4b2b      	ldr	r3, [pc, #172]	@ (8008b10 <_ZN22CPantallaEliminarRampaC1Ev+0xec>)
 8008a64:	9302      	str	r3, [sp, #8]
 8008a66:	2300      	movs	r3, #0
 8008a68:	9301      	str	r3, [sp, #4]
 8008a6a:	2314      	movs	r3, #20
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	2332      	movs	r3, #50	@ 0x32
 8008a70:	2223      	movs	r2, #35	@ 0x23
 8008a72:	2105      	movs	r1, #5
 8008a74:	4620      	mov	r0, r4
 8008a76:	f7fa fa27 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8c3 40d8 	str.w	r4, [r3, #216]	@ 0xd8
	LabelGuardar=new CEtiquetaTft( 10, 200, 130, 30, COLOR::GREEN,(char*)"ACEPTAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 8008a80:	20a4      	movs	r0, #164	@ 0xa4
 8008a82:	f009 f805 	bl	8011a90 <_Znwj>
 8008a86:	4603      	mov	r3, r0
 8008a88:	461c      	mov	r4, r3
 8008a8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008a8e:	9306      	str	r3, [sp, #24]
 8008a90:	2301      	movs	r3, #1
 8008a92:	9305      	str	r3, [sp, #20]
 8008a94:	2303      	movs	r3, #3
 8008a96:	9304      	str	r3, [sp, #16]
 8008a98:	2300      	movs	r3, #0
 8008a9a:	9303      	str	r3, [sp, #12]
 8008a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8008b14 <_ZN22CPantallaEliminarRampaC1Ev+0xf0>)
 8008a9e:	9302      	str	r3, [sp, #8]
 8008aa0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8008aa4:	9301      	str	r3, [sp, #4]
 8008aa6:	231e      	movs	r3, #30
 8008aa8:	9300      	str	r3, [sp, #0]
 8008aaa:	2382      	movs	r3, #130	@ 0x82
 8008aac:	22c8      	movs	r2, #200	@ 0xc8
 8008aae:	210a      	movs	r1, #10
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	f7fa fa09 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8c3 40d0 	str.w	r4, [r3, #208]	@ 0xd0
	LabelCancelar=new CEtiquetaTft( 160, 200, 145, 30, COLOR::RED,(char*)"CANCELAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 8008abc:	20a4      	movs	r0, #164	@ 0xa4
 8008abe:	f008 ffe7 	bl	8011a90 <_Znwj>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	461c      	mov	r4, r3
 8008ac6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008aca:	9306      	str	r3, [sp, #24]
 8008acc:	2301      	movs	r3, #1
 8008ace:	9305      	str	r3, [sp, #20]
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	9304      	str	r3, [sp, #16]
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	9303      	str	r3, [sp, #12]
 8008ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8008b18 <_ZN22CPantallaEliminarRampaC1Ev+0xf4>)
 8008ada:	9302      	str	r3, [sp, #8]
 8008adc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8008ae0:	9301      	str	r3, [sp, #4]
 8008ae2:	231e      	movs	r3, #30
 8008ae4:	9300      	str	r3, [sp, #0]
 8008ae6:	2391      	movs	r3, #145	@ 0x91
 8008ae8:	22c8      	movs	r2, #200	@ 0xc8
 8008aea:	21a0      	movs	r1, #160	@ 0xa0
 8008aec:	4620      	mov	r0, r4
 8008aee:	f7fa f9eb 	bl	8002ec8 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8c3 40d4 	str.w	r4, [r3, #212]	@ 0xd4

}
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	4618      	mov	r0, r3
 8008afc:	370c      	adds	r7, #12
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd90      	pop	{r4, r7, pc}
 8008b02:	bf00      	nop
 8008b04:	08014b64 	.word	0x08014b64
 8008b08:	08015a04 	.word	0x08015a04
 8008b0c:	08015a90 	.word	0x08015a90
 8008b10:	08014b74 	.word	0x08014b74
 8008b14:	08014b80 	.word	0x08014b80
 8008b18:	08014b88 	.word	0x08014b88

08008b1c <_ZN22CPantallaEliminarRampaD1Ev>:

CPantallaEliminarRampa::~CPantallaEliminarRampa()
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	4a07      	ldr	r2, [pc, #28]	@ (8008b44 <_ZN22CPantallaEliminarRampaD1Ev+0x28>)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	601a      	str	r2, [r3, #0]
 8008b2a:	4a07      	ldr	r2, [pc, #28]	@ (8008b48 <_ZN22CPantallaEliminarRampaD1Ev+0x2c>)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7fa fbe0 	bl	80032f8 <_ZN13CPantallaBaseD1Ev>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3708      	adds	r7, #8
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	08015a04 	.word	0x08015a04
 8008b48:	08015a90 	.word	0x08015a90

08008b4c <_ZThn48_N22CPantallaEliminarRampaD1Ev>:
	CEtiquetaTft *LabelGuardar;
	CEtiquetaTft *LabelCancelar;
	CEtiquetaTft *LabelMemoria;
public:
	CPantallaEliminarRampa();
	virtual ~CPantallaEliminarRampa();
 8008b4c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008b50:	f7ff bfe4 	b.w	8008b1c <_ZN22CPantallaEliminarRampaD1Ev>

08008b54 <_ZN22CPantallaEliminarRampaD0Ev>:
CPantallaEliminarRampa::~CPantallaEliminarRampa()
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
}
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f7ff ffdd 	bl	8008b1c <_ZN22CPantallaEliminarRampaD1Ev>
 8008b62:	21dc      	movs	r1, #220	@ 0xdc
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f008 ff91 	bl	8011a8c <_ZdlPvj>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3708      	adds	r7, #8
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <_ZThn48_N22CPantallaEliminarRampaD0Ev>:
 8008b74:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008b78:	f7ff bfec 	b.w	8008b54 <_ZN22CPantallaEliminarRampaD0Ev>

08008b7c <_ZN22CPantallaEliminarRampa20OnBotonUnoClickEventEv>:

void CPantallaEliminarRampa::OnBotonUnoClickEvent()
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
	ControladorRampas.EliminaRampa(ID_Rampa);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	4808      	ldr	r0, [pc, #32]	@ (8008bb0 <_ZN22CPantallaEliminarRampa20OnBotonUnoClickEventEv+0x34>)
 8008b8e:	f002 fef9 	bl	800b984 <_ZN18CControladorRampas12EliminaRampaEi>
	ControladorPasosRampa.EliminaPasosRampa(ID_Rampa);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008b98:	4619      	mov	r1, r3
 8008b9a:	4806      	ldr	r0, [pc, #24]	@ (8008bb4 <_ZN22CPantallaEliminarRampa20OnBotonUnoClickEventEv+0x38>)
 8008b9c:	f001 ffba 	bl	800ab14 <_ZN22CControladorPasosRampa17EliminaPasosRampaEi>
	ManejadorPantallas.MuestraMenuRampa();
 8008ba0:	4805      	ldr	r0, [pc, #20]	@ (8008bb8 <_ZN22CPantallaEliminarRampa20OnBotonUnoClickEventEv+0x3c>)
 8008ba2:	f7fb f965 	bl	8003e70 <_ZN19CManejadorPantallas16MuestraMenuRampaEv>
}
 8008ba6:	bf00      	nop
 8008ba8:	3708      	adds	r7, #8
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	20000360 	.word	0x20000360
 8008bb4:	200001f4 	.word	0x200001f4
 8008bb8:	20000258 	.word	0x20000258

08008bbc <_ZThn48_N22CPantallaEliminarRampa20OnBotonUnoClickEventEv>:
	virtual void OnBotonUnoClickEvent();
 8008bbc:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008bc0:	f7ff bfdc 	b.w	8008b7c <_ZN22CPantallaEliminarRampa20OnBotonUnoClickEventEv>

08008bc4 <_ZN22CPantallaEliminarRampa21OnBotonTresClickEventEv>:
void CPantallaEliminarRampa::OnBotonTresClickEvent()
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]

	 ManejadorPantallas.MuestraPantallaRampa(ID_Rampa);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	4803      	ldr	r0, [pc, #12]	@ (8008be4 <_ZN22CPantallaEliminarRampa21OnBotonTresClickEventEv+0x20>)
 8008bd6:	f7fb fa4f 	bl	8004078 <_ZN19CManejadorPantallas20MuestraPantallaRampaEi>

}
 8008bda:	bf00      	nop
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	20000258 	.word	0x20000258

08008be8 <_ZThn48_N22CPantallaEliminarRampa21OnBotonTresClickEventEv>:
	virtual void OnBotonTresClickEvent();
 8008be8:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008bec:	f7ff bfea 	b.w	8008bc4 <_ZN22CPantallaEliminarRampa21OnBotonTresClickEventEv>

08008bf0 <_ZN22CPantallaEliminarRampa10SetIdRampaEi>:

void CPantallaEliminarRampa::SetIdRampa(int id_rampa)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b088      	sub	sp, #32
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
	ID_Rampa=id_rampa;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	683a      	ldr	r2, [r7, #0]
 8008bfe:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	CRampa rampa=	ControladorRampas.DameRampa(ID_Rampa);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8008c08:	f107 0308 	add.w	r3, r7, #8
 8008c0c:	490a      	ldr	r1, [pc, #40]	@ (8008c38 <_ZN22CPantallaEliminarRampa10SetIdRampaEi+0x48>)
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f002 fc9d 	bl	800b54e <_ZN18CControladorRampas9DameRampaEi>
	sprintf(TextoEliminar,"Eliminar %s?",rampa.Nombre);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f103 00b0 	add.w	r0, r3, #176	@ 0xb0
 8008c1a:	f107 0308 	add.w	r3, r7, #8
 8008c1e:	3308      	adds	r3, #8
 8008c20:	461a      	mov	r2, r3
 8008c22:	4906      	ldr	r1, [pc, #24]	@ (8008c3c <_ZN22CPantallaEliminarRampa10SetIdRampaEi+0x4c>)
 8008c24:	f009 fd30 	bl	8012688 <siprintf>
}
 8008c28:	f107 0308 	add.w	r3, r7, #8
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f002 ff9b 	bl	800bb68 <_ZN6CRampaD1Ev>
 8008c32:	3720      	adds	r7, #32
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	20000360 	.word	0x20000360
 8008c3c:	08014b94 	.word	0x08014b94

08008c40 <_ZN22CPantallaEliminarRampa4ShowEv>:

void CPantallaEliminarRampa::Show()
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
	CPantallaBase::Show();
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7fa fbfa 	bl	8003444 <_ZN13CPantallaBase4ShowEv>

	LabelMemoria->SetTexto(TextoEliminar);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	33b0      	adds	r3, #176	@ 0xb0
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	4610      	mov	r0, r2
 8008c5e:	f7fa f96d 	bl	8002f3c <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelMemoria->Show();
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	334c      	adds	r3, #76	@ 0x4c
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4610      	mov	r0, r2
 8008c76:	4798      	blx	r3
	LabelGuardar->Show();
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	334c      	adds	r3, #76	@ 0x4c
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4610      	mov	r0, r2
 8008c8c:	4798      	blx	r3
	LabelCancelar->Show();
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	334c      	adds	r3, #76	@ 0x4c
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4610      	mov	r0, r2
 8008ca2:	4798      	blx	r3

}
 8008ca4:	bf00      	nop
 8008ca6:	3708      	adds	r7, #8
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <_ZN18CPantallaMenuRampaC1Ev>:
#include "GUI/Menu/CMenu.hpp"
#include "string.h"
#include <RapaTemperatura/CControladorRampas.hpp>
#include <GUI/PantallaMenuBase/CPantallaMenuBase.hpp>

CPantallaMenuRampa::CPantallaMenuRampa():
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
CPantallaMenuBase((char*) " Menu Rampa")
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	4909      	ldr	r1, [pc, #36]	@ (8008cdc <_ZN18CPantallaMenuRampaC1Ev+0x30>)
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f7fd fc0b 	bl	80064d4 <_ZN17CPantallaMenuBaseC1EPc>
 8008cbe:	4a08      	ldr	r2, [pc, #32]	@ (8008ce0 <_ZN18CPantallaMenuRampaC1Ev+0x34>)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	601a      	str	r2, [r3, #0]
 8008cc4:	4a07      	ldr	r2, [pc, #28]	@ (8008ce4 <_ZN18CPantallaMenuRampaC1Ev+0x38>)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	631a      	str	r2, [r3, #48]	@ 0x30
 8008cca:	4a07      	ldr	r2, [pc, #28]	@ (8008ce8 <_ZN18CPantallaMenuRampaC1Ev+0x3c>)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{

}
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3708      	adds	r7, #8
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	08014ba4 	.word	0x08014ba4
 8008ce0:	08015ac4 	.word	0x08015ac4
 8008ce4:	08015b70 	.word	0x08015b70
 8008ce8:	08015ba4 	.word	0x08015ba4

08008cec <_ZN18CPantallaMenuRampaD1Ev>:

CPantallaMenuRampa::~CPantallaMenuRampa()
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	4a09      	ldr	r2, [pc, #36]	@ (8008d1c <_ZN18CPantallaMenuRampaD1Ev+0x30>)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	601a      	str	r2, [r3, #0]
 8008cfa:	4a09      	ldr	r2, [pc, #36]	@ (8008d20 <_ZN18CPantallaMenuRampaD1Ev+0x34>)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	631a      	str	r2, [r3, #48]	@ 0x30
 8008d00:	4a08      	ldr	r2, [pc, #32]	@ (8008d24 <_ZN18CPantallaMenuRampaD1Ev+0x38>)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	// TODO Auto-generated destructor stub
}
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7fd fc36 	bl	800657c <_ZN17CPantallaMenuBaseD1Ev>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	4618      	mov	r0, r3
 8008d14:	3708      	adds	r7, #8
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	08015ac4 	.word	0x08015ac4
 8008d20:	08015b70 	.word	0x08015b70
 8008d24:	08015ba4 	.word	0x08015ba4

08008d28 <_ZThn48_N18CPantallaMenuRampaD1Ev>:
private:
	CEstacionBase *Estacion;
	CMenuItem* item1,*item2;
public:
	CPantallaMenuRampa();
	virtual ~CPantallaMenuRampa();
 8008d28:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008d2c:	f7ff bfde 	b.w	8008cec <_ZN18CPantallaMenuRampaD1Ev>

08008d30 <_ZThn172_N18CPantallaMenuRampaD1Ev>:
 8008d30:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8008d34:	f7ff bfda 	b.w	8008cec <_ZN18CPantallaMenuRampaD1Ev>

08008d38 <_ZN18CPantallaMenuRampaD0Ev>:
CPantallaMenuRampa::~CPantallaMenuRampa()
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
}
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f7ff ffd3 	bl	8008cec <_ZN18CPantallaMenuRampaD1Ev>
 8008d46:	21c0      	movs	r1, #192	@ 0xc0
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f008 fe9f 	bl	8011a8c <_ZdlPvj>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4618      	mov	r0, r3
 8008d52:	3708      	adds	r7, #8
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <_ZThn172_N18CPantallaMenuRampaD0Ev>:
 8008d58:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8008d5c:	f7ff bfec 	b.w	8008d38 <_ZN18CPantallaMenuRampaD0Ev>

08008d60 <_ZThn48_N18CPantallaMenuRampaD0Ev>:
 8008d60:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008d64:	f7ff bfe8 	b.w	8008d38 <_ZN18CPantallaMenuRampaD0Ev>

08008d68 <_ZN18CPantallaMenuRampa23OnBotonCuatroClickEventEv>:
void CPantallaMenuRampa::OnBotonCuatroClickEvent()
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaManual();
 8008d70:	4803      	ldr	r0, [pc, #12]	@ (8008d80 <_ZN18CPantallaMenuRampa23OnBotonCuatroClickEventEv+0x18>)
 8008d72:	f7fb f845 	bl	8003e00 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
}
 8008d76:	bf00      	nop
 8008d78:	3708      	adds	r7, #8
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	20000258 	.word	0x20000258

08008d84 <_ZThn48_N18CPantallaMenuRampa23OnBotonCuatroClickEventEv>:
	virtual void OnBotonCuatroClickEvent();
 8008d84:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008d88:	f7ff bfee 	b.w	8008d68 <_ZN18CPantallaMenuRampa23OnBotonCuatroClickEventEv>

08008d8c <_ZN18CPantallaMenuRampa11OnMenuEventEi>:
void CPantallaMenuRampa::OnMenuEvent(int identificador)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
	switch(identificador)
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	f113 0f02 	cmn.w	r3, #2
 8008d9c:	d004      	beq.n	8008da8 <_ZN18CPantallaMenuRampa11OnMenuEventEi+0x1c>
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da4:	d004      	beq.n	8008db0 <_ZN18CPantallaMenuRampa11OnMenuEventEi+0x24>
 8008da6:	e009      	b.n	8008dbc <_ZN18CPantallaMenuRampa11OnMenuEventEi+0x30>
	{
	case MENU_RAMPA::MENU_RAMPA_SALIR:
		ManejadorPantallas.MuestraMenuPrincipal();
 8008da8:	4809      	ldr	r0, [pc, #36]	@ (8008dd0 <_ZN18CPantallaMenuRampa11OnMenuEventEi+0x44>)
 8008daa:	f7fb f845 	bl	8003e38 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>
		break;
 8008dae:	e00a      	b.n	8008dc6 <_ZN18CPantallaMenuRampa11OnMenuEventEi+0x3a>
//	case MENU_PRINCIPAL::MENU_MEMORIA_2:
//	case MENU_PRINCIPAL::MENU_MEMORIA_3:
//		ManejadorPantallas.MuestraPantallaConfiguracionMemoria(identificador);
//		break;
	case MENU_RAMPA::MENU_AGREGAR:
		ManejadorPantallas.MuestraPantallaEditorNombre(-1);
 8008db0:	f04f 31ff 	mov.w	r1, #4294967295
 8008db4:	4806      	ldr	r0, [pc, #24]	@ (8008dd0 <_ZN18CPantallaMenuRampa11OnMenuEventEi+0x44>)
 8008db6:	f7fb f99e 	bl	80040f6 <_ZN19CManejadorPantallas27MuestraPantallaEditorNombreEi>
//		ManejadorPantallas.MuestraPantallaEliminarRampa(0);
		break;
 8008dba:	e004      	b.n	8008dc6 <_ZN18CPantallaMenuRampa11OnMenuEventEi+0x3a>
	default:
		ManejadorPantallas.MuestraPantallaRampa(identificador);
 8008dbc:	6839      	ldr	r1, [r7, #0]
 8008dbe:	4804      	ldr	r0, [pc, #16]	@ (8008dd0 <_ZN18CPantallaMenuRampa11OnMenuEventEi+0x44>)
 8008dc0:	f7fb f95a 	bl	8004078 <_ZN19CManejadorPantallas20MuestraPantallaRampaEi>
	}

}
 8008dc4:	bf00      	nop
 8008dc6:	bf00      	nop
 8008dc8:	3708      	adds	r7, #8
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	20000258 	.word	0x20000258

08008dd4 <_ZThn172_N18CPantallaMenuRampa11OnMenuEventEi>:
	virtual void OnMenuEvent(int identificador);
 8008dd4:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8008dd8:	f7ff bfd8 	b.w	8008d8c <_ZN18CPantallaMenuRampa11OnMenuEventEi>

08008ddc <_ZN18CPantallaMenuRampa21OnBotonTresClickEventEv>:

void CPantallaMenuRampa::OnBotonTresClickEvent()
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(3);
 8008de4:	2103      	movs	r1, #3
 8008de6:	4803      	ldr	r0, [pc, #12]	@ (8008df4 <_ZN18CPantallaMenuRampa21OnBotonTresClickEventEv+0x18>)
 8008de8:	f7fb f906 	bl	8003ff8 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 8008dec:	bf00      	nop
 8008dee:	3708      	adds	r7, #8
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	20000258 	.word	0x20000258

08008df8 <_ZThn48_N18CPantallaMenuRampa21OnBotonTresClickEventEv>:

	virtual void OnBotonUnoClickEvent();
	virtual void OnBotonDosClickEvent();
	virtual void OnBotonTresClickEvent();
 8008df8:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008dfc:	f7ff bfee 	b.w	8008ddc <_ZN18CPantallaMenuRampa21OnBotonTresClickEventEv>

08008e00 <_ZN18CPantallaMenuRampa20OnBotonUnoClickEventEv>:
void CPantallaMenuRampa::OnBotonUnoClickEvent()
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(1);
 8008e08:	2101      	movs	r1, #1
 8008e0a:	4803      	ldr	r0, [pc, #12]	@ (8008e18 <_ZN18CPantallaMenuRampa20OnBotonUnoClickEventEv+0x18>)
 8008e0c:	f7fb f8f4 	bl	8003ff8 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 8008e10:	bf00      	nop
 8008e12:	3708      	adds	r7, #8
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	20000258 	.word	0x20000258

08008e1c <_ZThn48_N18CPantallaMenuRampa20OnBotonUnoClickEventEv>:
	virtual void OnBotonUnoClickEvent();
 8008e1c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008e20:	f7ff bfee 	b.w	8008e00 <_ZN18CPantallaMenuRampa20OnBotonUnoClickEventEv>

08008e24 <_ZN18CPantallaMenuRampa20OnBotonDosClickEventEv>:
void CPantallaMenuRampa::OnBotonDosClickEvent()
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b082      	sub	sp, #8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(2);
 8008e2c:	2102      	movs	r1, #2
 8008e2e:	4803      	ldr	r0, [pc, #12]	@ (8008e3c <_ZN18CPantallaMenuRampa20OnBotonDosClickEventEv+0x18>)
 8008e30:	f7fb f8e2 	bl	8003ff8 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 8008e34:	bf00      	nop
 8008e36:	3708      	adds	r7, #8
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}
 8008e3c:	20000258 	.word	0x20000258

08008e40 <_ZThn48_N18CPantallaMenuRampa20OnBotonDosClickEventEv>:
	virtual void OnBotonDosClickEvent();
 8008e40:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008e44:	f7ff bfee 	b.w	8008e24 <_ZN18CPantallaMenuRampa20OnBotonDosClickEventEv>

08008e48 <_ZN18CPantallaMenuRampa12SeleccionadaEv>:
void CPantallaMenuRampa::Seleccionada()
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b090      	sub	sp, #64	@ 0x40
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
	this->BorraMenu();
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	338c      	adds	r3, #140	@ 0x8c
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4610      	mov	r0, r2
 8008e5c:	4798      	blx	r3
	char texto[20];
	// TODO Auto-generated constructor stub
	int nrampas=ControladorRampas.DameNumeroRampas();
 8008e5e:	481e      	ldr	r0, [pc, #120]	@ (8008ed8 <_ZN18CPantallaMenuRampa12SeleccionadaEv+0x90>)
 8008e60:	f002 fb38 	bl	800b4d4 <_ZN18CControladorRampas16DameNumeroRampasEv>
 8008e64:	63b8      	str	r0, [r7, #56]	@ 0x38
	for(int i=0;i<nrampas;i++)
 8008e66:	2300      	movs	r3, #0
 8008e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e6a:	e01f      	b.n	8008eac <_ZN18CPantallaMenuRampa12SeleccionadaEv+0x64>
	{
		CRampa rampa=ControladorRampas.DameRampaNumero(i);
 8008e6c:	f107 030c 	add.w	r3, r7, #12
 8008e70:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008e72:	4919      	ldr	r1, [pc, #100]	@ (8008ed8 <_ZN18CPantallaMenuRampa12SeleccionadaEv+0x90>)
 8008e74:	4618      	mov	r0, r3
 8008e76:	f002 fbbe 	bl	800b5f6 <_ZN18CControladorRampas15DameRampaNumeroEi>
		sprintf(texto,"%s",rampa.Nombre);
 8008e7a:	f107 030c 	add.w	r3, r7, #12
 8008e7e:	f103 0208 	add.w	r2, r3, #8
 8008e82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e86:	4915      	ldr	r1, [pc, #84]	@ (8008edc <_ZN18CPantallaMenuRampa12SeleccionadaEv+0x94>)
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f009 fbfd 	bl	8012688 <siprintf>
		AgregaMenuItem(texto, rampa.ID_RAMPA);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	8a7a      	ldrh	r2, [r7, #18]
 8008e92:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7fd fbb2 	bl	8006600 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	}
 8008e9c:	f107 030c 	add.w	r3, r7, #12
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f002 fe61 	bl	800bb68 <_ZN6CRampaD1Ev>
	for(int i=0;i<nrampas;i++)
 8008ea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008eac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	dbdb      	blt.n	8008e6c <_ZN18CPantallaMenuRampa12SeleccionadaEv+0x24>
	AgregaMenuItem((char*)"Agregar", MENU_RAMPA::MENU_AGREGAR);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8008eba:	4909      	ldr	r1, [pc, #36]	@ (8008ee0 <_ZN18CPantallaMenuRampa12SeleccionadaEv+0x98>)
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7fd fb9f 	bl	8006600 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"Salir", MENU_RAMPA::MENU_RAMPA_SALIR);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f06f 0201 	mvn.w	r2, #1
 8008ec8:	4906      	ldr	r1, [pc, #24]	@ (8008ee4 <_ZN18CPantallaMenuRampa12SeleccionadaEv+0x9c>)
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7fd fb98 	bl	8006600 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
}
 8008ed0:	bf00      	nop
 8008ed2:	3740      	adds	r7, #64	@ 0x40
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	20000360 	.word	0x20000360
 8008edc:	08014bb0 	.word	0x08014bb0
 8008ee0:	08014bb4 	.word	0x08014bb4
 8008ee4:	08014bbc 	.word	0x08014bbc

08008ee8 <_ZN13CPantallaPasoC1Ev>:

#include <GUI/Rampa/PantallaPaso/CPantallaPaso.hpp>
#include <GUI/PantallaMenuBase/CPantallaMenuBase.hpp>
#include <GUI/ManejadorPantallas/CManejadorPantallas.hpp>

CPantallaPaso::CPantallaPaso():
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
CPantallaMenuBase((char*) " PASO")
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4912      	ldr	r1, [pc, #72]	@ (8008f3c <_ZN13CPantallaPasoC1Ev+0x54>)
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7fd faed 	bl	80064d4 <_ZN17CPantallaMenuBaseC1EPc>
 8008efa:	4a11      	ldr	r2, [pc, #68]	@ (8008f40 <_ZN13CPantallaPasoC1Ev+0x58>)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	601a      	str	r2, [r3, #0]
 8008f00:	4a10      	ldr	r2, [pc, #64]	@ (8008f44 <_ZN13CPantallaPasoC1Ev+0x5c>)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	631a      	str	r2, [r3, #48]	@ 0x30
 8008f06:	4a10      	ldr	r2, [pc, #64]	@ (8008f48 <_ZN13CPantallaPasoC1Ev+0x60>)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	// TODO Auto-generated constructor stub
	AgregaMenuItem((char*)"Modificar",MENU_PANTALLA_PASO::PANTALLA_PASO_MODIFICAR);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	490e      	ldr	r1, [pc, #56]	@ (8008f4c <_ZN13CPantallaPasoC1Ev+0x64>)
 8008f14:	4618      	mov	r0, r3
 8008f16:	f7fd fb73 	bl	8006600 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"Eliminar", MENU_PANTALLA_PASO::PANTALLA_PASO_ELIMINAR);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	490c      	ldr	r1, [pc, #48]	@ (8008f50 <_ZN13CPantallaPasoC1Ev+0x68>)
 8008f20:	4618      	mov	r0, r3
 8008f22:	f7fd fb6d 	bl	8006600 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"Salir", MENU_PANTALLA_PASO::PANTALLA_PASO_SALIR);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2202      	movs	r2, #2
 8008f2a:	490a      	ldr	r1, [pc, #40]	@ (8008f54 <_ZN13CPantallaPasoC1Ev+0x6c>)
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7fd fb67 	bl	8006600 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>

}
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	4618      	mov	r0, r3
 8008f36:	3708      	adds	r7, #8
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	08014bc4 	.word	0x08014bc4
 8008f40:	08015bb8 	.word	0x08015bb8
 8008f44:	08015c54 	.word	0x08015c54
 8008f48:	08015c88 	.word	0x08015c88
 8008f4c:	08014bcc 	.word	0x08014bcc
 8008f50:	08014bd8 	.word	0x08014bd8
 8008f54:	08014be4 	.word	0x08014be4

08008f58 <_ZN13CPantallaPasoD1Ev>:

CPantallaPaso::~CPantallaPaso()
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b082      	sub	sp, #8
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	4a09      	ldr	r2, [pc, #36]	@ (8008f88 <_ZN13CPantallaPasoD1Ev+0x30>)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	601a      	str	r2, [r3, #0]
 8008f66:	4a09      	ldr	r2, [pc, #36]	@ (8008f8c <_ZN13CPantallaPasoD1Ev+0x34>)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8008f6c:	4a08      	ldr	r2, [pc, #32]	@ (8008f90 <_ZN13CPantallaPasoD1Ev+0x38>)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	// TODO Auto-generated destructor stub
}
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7fd fb00 	bl	800657c <_ZN17CPantallaMenuBaseD1Ev>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3708      	adds	r7, #8
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	08015bb8 	.word	0x08015bb8
 8008f8c:	08015c54 	.word	0x08015c54
 8008f90:	08015c88 	.word	0x08015c88

08008f94 <_ZThn48_N13CPantallaPasoD1Ev>:
private:
	int ID_Paso;
	int ID_Rampa;
public:
	CPantallaPaso();
	virtual ~CPantallaPaso();
 8008f94:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008f98:	f7ff bfde 	b.w	8008f58 <_ZN13CPantallaPasoD1Ev>

08008f9c <_ZThn172_N13CPantallaPasoD1Ev>:
 8008f9c:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8008fa0:	f7ff bfda 	b.w	8008f58 <_ZN13CPantallaPasoD1Ev>

08008fa4 <_ZN13CPantallaPasoD0Ev>:
CPantallaPaso::~CPantallaPaso()
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
}
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f7ff ffd3 	bl	8008f58 <_ZN13CPantallaPasoD1Ev>
 8008fb2:	21bc      	movs	r1, #188	@ 0xbc
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f008 fd69 	bl	8011a8c <_ZdlPvj>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3708      	adds	r7, #8
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <_ZThn172_N13CPantallaPasoD0Ev>:
 8008fc4:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8008fc8:	f7ff bfec 	b.w	8008fa4 <_ZN13CPantallaPasoD0Ev>

08008fcc <_ZThn48_N13CPantallaPasoD0Ev>:
 8008fcc:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008fd0:	f7ff bfe8 	b.w	8008fa4 <_ZN13CPantallaPasoD0Ev>

08008fd4 <_ZN13CPantallaPaso9SetIdPasoEii>:

void CPantallaPaso::SetIdPaso(int id_rampa,int id_Paso)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b085      	sub	sp, #20
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	60f8      	str	r0, [r7, #12]
 8008fdc:	60b9      	str	r1, [r7, #8]
 8008fde:	607a      	str	r2, [r7, #4]
	ID_Paso=id_Paso;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	ID_Rampa=id_rampa;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	68ba      	ldr	r2, [r7, #8]
 8008fec:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
//	CRampa rampa=ControladorRampas.DameRampa(ID_Rampa);
//	this->SetTituloPantalla(rampa.Nombre);
}
 8008ff0:	bf00      	nop
 8008ff2:	3714      	adds	r7, #20
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <_ZN13CPantallaPaso11OnMenuEventEi>:
void CPantallaPaso::OnMenuEvent(int identificador)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]

	switch(identificador)
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	2b02      	cmp	r3, #2
 800900a:	d009      	beq.n	8009020 <_ZN13CPantallaPaso11OnMenuEventEi+0x24>
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	2b02      	cmp	r3, #2
 8009010:	dc24      	bgt.n	800905c <_ZN13CPantallaPaso11OnMenuEventEi+0x60>
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00b      	beq.n	8009030 <_ZN13CPantallaPaso11OnMenuEventEi+0x34>
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	2b01      	cmp	r3, #1
 800901c:	d013      	beq.n	8009046 <_ZN13CPantallaPaso11OnMenuEventEi+0x4a>
	case MENU_PANTALLA_PASO::PANTALLA_PASO_ELIMINAR:
		ManejadorPantallas.MuestraPantallaEliminarPaso(ID_Rampa,ID_Paso);
		break;
	}

}
 800901e:	e01d      	b.n	800905c <_ZN13CPantallaPaso11OnMenuEventEi+0x60>
		ManejadorPantallas.AsignaPantallaPasosRampa(ID_Rampa);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009026:	4619      	mov	r1, r3
 8009028:	480e      	ldr	r0, [pc, #56]	@ (8009064 <_ZN13CPantallaPaso11OnMenuEventEi+0x68>)
 800902a:	f7fb f888 	bl	800413e <_ZN19CManejadorPantallas24AsignaPantallaPasosRampaEi>
		break;
 800902e:	e015      	b.n	800905c <_ZN13CPantallaPaso11OnMenuEventEi+0x60>
		ManejadorPantallas.MuestraPantallaEdicionPaso(ID_Rampa, ID_Paso);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 10b8 	ldr.w	r1, [r3, #184]	@ 0xb8
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800903c:	461a      	mov	r2, r3
 800903e:	4809      	ldr	r0, [pc, #36]	@ (8009064 <_ZN13CPantallaPaso11OnMenuEventEi+0x68>)
 8009040:	f7fb f8cc 	bl	80041dc <_ZN19CManejadorPantallas26MuestraPantallaEdicionPasoEii>
		break;
 8009044:	e00a      	b.n	800905c <_ZN13CPantallaPaso11OnMenuEventEi+0x60>
		ManejadorPantallas.MuestraPantallaEliminarPaso(ID_Rampa,ID_Paso);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8d3 10b8 	ldr.w	r1, [r3, #184]	@ 0xb8
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009052:	461a      	mov	r2, r3
 8009054:	4803      	ldr	r0, [pc, #12]	@ (8009064 <_ZN13CPantallaPaso11OnMenuEventEi+0x68>)
 8009056:	f7fb f90c 	bl	8004272 <_ZN19CManejadorPantallas27MuestraPantallaEliminarPasoEii>
		break;
 800905a:	bf00      	nop
}
 800905c:	bf00      	nop
 800905e:	3708      	adds	r7, #8
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}
 8009064:	20000258 	.word	0x20000258

08009068 <_ZThn172_N13CPantallaPaso11OnMenuEventEi>:
	void SetIdPaso(int id_rampa,int id_Paso);
	virtual void OnMenuEvent(int identificador);
 8009068:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 800906c:	f7ff bfc6 	b.w	8008ffc <_ZN13CPantallaPaso11OnMenuEventEi>

08009070 <_ZN19CPantallaPasosRampaC1Ei>:
#include "string.h"
#include <RapaTemperatura/CControladorRampas.hpp>
#include <GUI/PantallaMenuBase/CPantallaMenuBase.hpp>
CControladorPasosRampa ControladorPasosRampa;

CPantallaPasosRampa::CPantallaPasosRampa(int id_Rampa):
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
CPantallaMenuBase((char*) " Menu PASOS")
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	490b      	ldr	r1, [pc, #44]	@ (80090ac <_ZN19CPantallaPasosRampaC1Ei+0x3c>)
 800907e:	4618      	mov	r0, r3
 8009080:	f7fd fa28 	bl	80064d4 <_ZN17CPantallaMenuBaseC1EPc>
 8009084:	4a0a      	ldr	r2, [pc, #40]	@ (80090b0 <_ZN19CPantallaPasosRampaC1Ei+0x40>)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	601a      	str	r2, [r3, #0]
 800908a:	4a0a      	ldr	r2, [pc, #40]	@ (80090b4 <_ZN19CPantallaPasosRampaC1Ei+0x44>)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	631a      	str	r2, [r3, #48]	@ 0x30
 8009090:	4a09      	ldr	r2, [pc, #36]	@ (80090b8 <_ZN19CPantallaPasosRampaC1Ei+0x48>)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	// TODO Auto-generated constructor stub
	ID_Rampa=id_Rampa;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	683a      	ldr	r2, [r7, #0]
 800909c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4618      	mov	r0, r3
 80090a4:	3708      	adds	r7, #8
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	08014bec 	.word	0x08014bec
 80090b0:	08015c9c 	.word	0x08015c9c
 80090b4:	08015d3c 	.word	0x08015d3c
 80090b8:	08015d70 	.word	0x08015d70

080090bc <_ZN19CPantallaPasosRampa10SetIDRampaEi>:
void CPantallaPasosRampa::SetIDRampa(int idRampa)
{
 80090bc:	b590      	push	{r4, r7, lr}
 80090be:	b095      	sub	sp, #84	@ 0x54
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
	ID_Rampa=idRampa;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	683a      	ldr	r2, [r7, #0]
 80090ca:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	int numeroPaso=1;
 80090ce:	2301      	movs	r3, #1
 80090d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int id_paso=0;
 80090d2:	2300      	movs	r3, #0
 80090d4:	64bb      	str	r3, [r7, #72]	@ 0x48
	char texto[20];
	this->BorraMenu();
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	338c      	adds	r3, #140	@ 0x8c
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4610      	mov	r0, r2
 80090e2:	4798      	blx	r3
	CRampa rampa=ControladorRampas.DameRampa(ID_Rampa);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80090ea:	f107 0314 	add.w	r3, r7, #20
 80090ee:	492f      	ldr	r1, [pc, #188]	@ (80091ac <_ZN19CPantallaPasosRampa10SetIDRampaEi+0xf0>)
 80090f0:	4618      	mov	r0, r3
 80090f2:	f002 fa2c 	bl	800b54e <_ZN18CControladorRampas9DameRampaEi>
	this->SetTituloPantalla(rampa.Nombre);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	3370      	adds	r3, #112	@ 0x70
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f107 0214 	add.w	r2, r7, #20
 8009104:	3208      	adds	r2, #8
 8009106:	4611      	mov	r1, r2
 8009108:	4798      	blx	r3

	int npasos=ControladorPasosRampa.DameNumeroPasosRampa(ID_Rampa);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009110:	4619      	mov	r1, r3
 8009112:	4827      	ldr	r0, [pc, #156]	@ (80091b0 <_ZN19CPantallaPasosRampa10SetIDRampaEi+0xf4>)
 8009114:	f001 ff28 	bl	800af68 <_ZN22CControladorPasosRampa20DameNumeroPasosRampaEi>
 8009118:	6438      	str	r0, [r7, #64]	@ 0x40
	for(int i=0;i<npasos;i++)
 800911a:	2300      	movs	r3, #0
 800911c:	647b      	str	r3, [r7, #68]	@ 0x44
 800911e:	e02a      	b.n	8009176 <_ZN19CPantallaPasosRampa10SetIDRampaEi+0xba>
	{
		CPaso paso=		ControladorPasosRampa.DameSiguientePaso(ID_Rampa,id_paso);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8009126:	f107 0008 	add.w	r0, r7, #8
 800912a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800912c:	4920      	ldr	r1, [pc, #128]	@ (80091b0 <_ZN19CPantallaPasosRampa10SetIDRampaEi+0xf4>)
 800912e:	f001 ff56 	bl	800afde <_ZN22CControladorPasosRampa17DameSiguientePasoEii>
		if(paso.Ocupado==0)
 8009132:	7b3b      	ldrb	r3, [r7, #12]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d101      	bne.n	800913c <_ZN19CPantallaPasosRampa10SetIDRampaEi+0x80>
			continue;
 8009138:	2400      	movs	r4, #0
 800913a:	e013      	b.n	8009164 <_ZN19CPantallaPasosRampa10SetIDRampaEi+0xa8>
		id_paso=paso.ID_Paso;
 800913c:	7bbb      	ldrb	r3, [r7, #14]
 800913e:	64bb      	str	r3, [r7, #72]	@ 0x48
		sprintf(texto,"Paso %d",numeroPaso);
 8009140:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009144:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009146:	491b      	ldr	r1, [pc, #108]	@ (80091b4 <_ZN19CPantallaPasosRampa10SetIDRampaEi+0xf8>)
 8009148:	4618      	mov	r0, r3
 800914a:	f009 fa9d 	bl	8012688 <siprintf>
		numeroPaso++;
 800914e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009150:	3301      	adds	r3, #1
 8009152:	64fb      	str	r3, [r7, #76]	@ 0x4c
		AgregaMenuItem(texto,paso.ID_Paso);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	7bba      	ldrb	r2, [r7, #14]
 8009158:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800915c:	4618      	mov	r0, r3
 800915e:	f7fd fa4f 	bl	8006600 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	}
 8009162:	2401      	movs	r4, #1
 8009164:	f107 0308 	add.w	r3, r7, #8
 8009168:	4618      	mov	r0, r3
 800916a:	f002 fcb7 	bl	800badc <_ZN5CPasoD1Ev>
 800916e:	2c01      	cmp	r4, #1
	for(int i=0;i<npasos;i++)
 8009170:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009172:	3301      	adds	r3, #1
 8009174:	647b      	str	r3, [r7, #68]	@ 0x44
 8009176:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009178:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800917a:	429a      	cmp	r2, r3
 800917c:	dbd0      	blt.n	8009120 <_ZN19CPantallaPasosRampa10SetIDRampaEi+0x64>
	AgregaMenuItem((char*)"Agregar", MENU_PASO::MENU_PASO_AGREGAR);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f04f 32ff 	mov.w	r2, #4294967295
 8009184:	490c      	ldr	r1, [pc, #48]	@ (80091b8 <_ZN19CPantallaPasosRampa10SetIDRampaEi+0xfc>)
 8009186:	4618      	mov	r0, r3
 8009188:	f7fd fa3a 	bl	8006600 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"Salir", MENU_PASO::MENU_PASO_SALIR);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f06f 0201 	mvn.w	r2, #1
 8009192:	490a      	ldr	r1, [pc, #40]	@ (80091bc <_ZN19CPantallaPasosRampa10SetIDRampaEi+0x100>)
 8009194:	4618      	mov	r0, r3
 8009196:	f7fd fa33 	bl	8006600 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>

}
 800919a:	f107 0314 	add.w	r3, r7, #20
 800919e:	4618      	mov	r0, r3
 80091a0:	f002 fce2 	bl	800bb68 <_ZN6CRampaD1Ev>
 80091a4:	3754      	adds	r7, #84	@ 0x54
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd90      	pop	{r4, r7, pc}
 80091aa:	bf00      	nop
 80091ac:	20000360 	.word	0x20000360
 80091b0:	200001f4 	.word	0x200001f4
 80091b4:	08014bf8 	.word	0x08014bf8
 80091b8:	08014c00 	.word	0x08014c00
 80091bc:	08014c08 	.word	0x08014c08

080091c0 <_ZN19CPantallaPasosRampaD1Ev>:
CPantallaPasosRampa::~CPantallaPasosRampa()
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	4a09      	ldr	r2, [pc, #36]	@ (80091f0 <_ZN19CPantallaPasosRampaD1Ev+0x30>)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	601a      	str	r2, [r3, #0]
 80091ce:	4a09      	ldr	r2, [pc, #36]	@ (80091f4 <_ZN19CPantallaPasosRampaD1Ev+0x34>)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80091d4:	4a08      	ldr	r2, [pc, #32]	@ (80091f8 <_ZN19CPantallaPasosRampaD1Ev+0x38>)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	// TODO Auto-generated destructor stub
}
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	4618      	mov	r0, r3
 80091e0:	f7fd f9cc 	bl	800657c <_ZN17CPantallaMenuBaseD1Ev>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	4618      	mov	r0, r3
 80091e8:	3708      	adds	r7, #8
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop
 80091f0:	08015c9c 	.word	0x08015c9c
 80091f4:	08015d3c 	.word	0x08015d3c
 80091f8:	08015d70 	.word	0x08015d70

080091fc <_ZThn48_N19CPantallaPasosRampaD1Ev>:
	CEstacionBase *Estacion;
	CMenuItem* item1,*item2;
	int ID_Rampa;
public:
	CPantallaPasosRampa(int id_Rampa);
	virtual ~CPantallaPasosRampa();
 80091fc:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8009200:	f7ff bfde 	b.w	80091c0 <_ZN19CPantallaPasosRampaD1Ev>

08009204 <_ZThn172_N19CPantallaPasosRampaD1Ev>:
 8009204:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8009208:	f7ff bfda 	b.w	80091c0 <_ZN19CPantallaPasosRampaD1Ev>

0800920c <_ZN19CPantallaPasosRampaD0Ev>:
CPantallaPasosRampa::~CPantallaPasosRampa()
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
}
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f7ff ffd3 	bl	80091c0 <_ZN19CPantallaPasosRampaD1Ev>
 800921a:	21c4      	movs	r1, #196	@ 0xc4
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f008 fc35 	bl	8011a8c <_ZdlPvj>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4618      	mov	r0, r3
 8009226:	3708      	adds	r7, #8
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <_ZThn172_N19CPantallaPasosRampaD0Ev>:
 800922c:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8009230:	f7ff bfec 	b.w	800920c <_ZN19CPantallaPasosRampaD0Ev>

08009234 <_ZThn48_N19CPantallaPasosRampaD0Ev>:
 8009234:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8009238:	f7ff bfe8 	b.w	800920c <_ZN19CPantallaPasosRampaD0Ev>

0800923c <_ZN19CPantallaPasosRampa11OnMenuEventEi>:

void CPantallaPasosRampa::OnMenuEvent(int identificador)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
	switch(identificador)
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	f113 0f02 	cmn.w	r3, #2
 800924c:	d004      	beq.n	8009258 <_ZN19CPantallaPasosRampa11OnMenuEventEi+0x1c>
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009254:	d008      	beq.n	8009268 <_ZN19CPantallaPasosRampa11OnMenuEventEi+0x2c>
 8009256:	e011      	b.n	800927c <_ZN19CPantallaPasosRampa11OnMenuEventEi+0x40>
	{
	case MENU_PASO::MENU_PASO_SALIR:
		ManejadorPantallas.MuestraPantallaRampa(ID_Rampa);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800925e:	4619      	mov	r1, r3
 8009260:	480d      	ldr	r0, [pc, #52]	@ (8009298 <_ZN19CPantallaPasosRampa11OnMenuEventEi+0x5c>)
 8009262:	f7fa ff09 	bl	8004078 <_ZN19CManejadorPantallas20MuestraPantallaRampaEi>
		break;
 8009266:	e012      	b.n	800928e <_ZN19CPantallaPasosRampa11OnMenuEventEi+0x52>
	case MENU_PASO::MENU_PASO_AGREGAR:
		ManejadorPantallas.MuestraPantallaEdicionPaso(ID_Rampa,-1);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800926e:	f04f 32ff 	mov.w	r2, #4294967295
 8009272:	4619      	mov	r1, r3
 8009274:	4808      	ldr	r0, [pc, #32]	@ (8009298 <_ZN19CPantallaPasosRampa11OnMenuEventEi+0x5c>)
 8009276:	f7fa ffb1 	bl	80041dc <_ZN19CManejadorPantallas26MuestraPantallaEdicionPasoEii>
		break;
 800927a:	e008      	b.n	800928e <_ZN19CPantallaPasosRampa11OnMenuEventEi+0x52>
	default:
		ManejadorPantallas.MuestraPantallaPaso(ID_Rampa,identificador);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009282:	683a      	ldr	r2, [r7, #0]
 8009284:	4619      	mov	r1, r3
 8009286:	4804      	ldr	r0, [pc, #16]	@ (8009298 <_ZN19CPantallaPasosRampa11OnMenuEventEi+0x5c>)
 8009288:	f7fa ffce 	bl	8004228 <_ZN19CManejadorPantallas19MuestraPantallaPasoEii>
		//ManejadorPantallas.MuestraPantallaRampa(identificador);

	}

}
 800928c:	bf00      	nop
 800928e:	bf00      	nop
 8009290:	3708      	adds	r7, #8
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	20000258 	.word	0x20000258

0800929c <_ZThn172_N19CPantallaPasosRampa11OnMenuEventEi>:
	virtual void OnMenuEvent(int identificador);
 800929c:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 80092a0:	f7ff bfcc 	b.w	800923c <_ZN19CPantallaPasosRampa11OnMenuEventEi>

080092a4 <_Z41__static_initialization_and_destruction_0ii>:
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	6039      	str	r1, [r7, #0]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d107      	bne.n	80092c4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d102      	bne.n	80092c4 <_Z41__static_initialization_and_destruction_0ii+0x20>
CControladorPasosRampa ControladorPasosRampa;
 80092be:	4809      	ldr	r0, [pc, #36]	@ (80092e4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80092c0:	f001 fbc6 	bl	800aa50 <_ZN22CControladorPasosRampaC1Ev>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d107      	bne.n	80092da <_Z41__static_initialization_and_destruction_0ii+0x36>
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d102      	bne.n	80092da <_Z41__static_initialization_and_destruction_0ii+0x36>
 80092d4:	4803      	ldr	r0, [pc, #12]	@ (80092e4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80092d6:	f001 fbd3 	bl	800aa80 <_ZN22CControladorPasosRampaD1Ev>
}
 80092da:	bf00      	nop
 80092dc:	3708      	adds	r7, #8
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	200001f4 	.word	0x200001f4

080092e8 <_GLOBAL__sub_I_ControladorPasosRampa>:
 80092e8:	b580      	push	{r7, lr}
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80092f0:	2001      	movs	r0, #1
 80092f2:	f7ff ffd7 	bl	80092a4 <_Z41__static_initialization_and_destruction_0ii>
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <_GLOBAL__sub_D_ControladorPasosRampa>:
 80092f8:	b580      	push	{r7, lr}
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8009300:	2000      	movs	r0, #0
 8009302:	f7ff ffcf 	bl	80092a4 <_Z41__static_initialization_and_destruction_0ii>
 8009306:	bd80      	pop	{r7, pc}

08009308 <_ZN14CPantallaRampaC1Ev>:
#include <RapaTemperatura/CControladorRampas.hpp>
#include "GUI/Menu/CMenuItem.hpp"
#include <GUI/PantallaMenuBase/CPantallaMenuBase.hpp>
#include <GUI/ManejadorPantallas/CManejadorPantallas.hpp>

CPantallaRampa::CPantallaRampa():
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
	CPantallaMenuBase((char*) " Rampa")
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	4918      	ldr	r1, [pc, #96]	@ (8009374 <_ZN14CPantallaRampaC1Ev+0x6c>)
 8009314:	4618      	mov	r0, r3
 8009316:	f7fd f8dd 	bl	80064d4 <_ZN17CPantallaMenuBaseC1EPc>
 800931a:	4a17      	ldr	r2, [pc, #92]	@ (8009378 <_ZN14CPantallaRampaC1Ev+0x70>)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	601a      	str	r2, [r3, #0]
 8009320:	4a16      	ldr	r2, [pc, #88]	@ (800937c <_ZN14CPantallaRampaC1Ev+0x74>)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	631a      	str	r2, [r3, #48]	@ 0x30
 8009326:	4a16      	ldr	r2, [pc, #88]	@ (8009380 <_ZN14CPantallaRampaC1Ev+0x78>)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	// TODO Auto-generated constructor stub
	AgregaMenuItem((char*)"Ejecutar", MENU_PANTALLA_RAMPA::PANTALLA_RAMPA_EJECUTAR);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	4914      	ldr	r1, [pc, #80]	@ (8009384 <_ZN14CPantallaRampaC1Ev+0x7c>)
 8009334:	4618      	mov	r0, r3
 8009336:	f7fd f963 	bl	8006600 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"Modificar",MENU_PANTALLA_RAMPA::PANTALLA_RAMPA_MODIFICAR);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2201      	movs	r2, #1
 800933e:	4912      	ldr	r1, [pc, #72]	@ (8009388 <_ZN14CPantallaRampaC1Ev+0x80>)
 8009340:	4618      	mov	r0, r3
 8009342:	f7fd f95d 	bl	8006600 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"EDITAR PASOS",MENU_PANTALLA_RAMPA::PANTALLA_RAMPA_PASOS);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2204      	movs	r2, #4
 800934a:	4910      	ldr	r1, [pc, #64]	@ (800938c <_ZN14CPantallaRampaC1Ev+0x84>)
 800934c:	4618      	mov	r0, r3
 800934e:	f7fd f957 	bl	8006600 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"Eliminar", MENU_PANTALLA_RAMPA::PANTALLA_RAMPA_ELIMINAR);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2202      	movs	r2, #2
 8009356:	490e      	ldr	r1, [pc, #56]	@ (8009390 <_ZN14CPantallaRampaC1Ev+0x88>)
 8009358:	4618      	mov	r0, r3
 800935a:	f7fd f951 	bl	8006600 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"Salir", MENU_PANTALLA_RAMPA::PANTALLA_RAMPA_SALIR);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2203      	movs	r2, #3
 8009362:	490c      	ldr	r1, [pc, #48]	@ (8009394 <_ZN14CPantallaRampaC1Ev+0x8c>)
 8009364:	4618      	mov	r0, r3
 8009366:	f7fd f94b 	bl	8006600 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>

}
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	4618      	mov	r0, r3
 800936e:	3708      	adds	r7, #8
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}
 8009374:	08014c10 	.word	0x08014c10
 8009378:	08015d84 	.word	0x08015d84
 800937c:	08015e20 	.word	0x08015e20
 8009380:	08015e54 	.word	0x08015e54
 8009384:	08014c18 	.word	0x08014c18
 8009388:	08014c24 	.word	0x08014c24
 800938c:	08014c30 	.word	0x08014c30
 8009390:	08014c40 	.word	0x08014c40
 8009394:	08014c4c 	.word	0x08014c4c

08009398 <_ZN14CPantallaRampaD1Ev>:

CPantallaRampa::~CPantallaRampa()
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	4a09      	ldr	r2, [pc, #36]	@ (80093c8 <_ZN14CPantallaRampaD1Ev+0x30>)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	601a      	str	r2, [r3, #0]
 80093a6:	4a09      	ldr	r2, [pc, #36]	@ (80093cc <_ZN14CPantallaRampaD1Ev+0x34>)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80093ac:	4a08      	ldr	r2, [pc, #32]	@ (80093d0 <_ZN14CPantallaRampaD1Ev+0x38>)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	// TODO Auto-generated destructor stub
}
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7fd f8e0 	bl	800657c <_ZN17CPantallaMenuBaseD1Ev>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	4618      	mov	r0, r3
 80093c0:	3708      	adds	r7, #8
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	08015d84 	.word	0x08015d84
 80093cc:	08015e20 	.word	0x08015e20
 80093d0:	08015e54 	.word	0x08015e54

080093d4 <_ZThn48_N14CPantallaRampaD1Ev>:
{
private:
	int ID_Rampa;
public:
	CPantallaRampa();
	virtual ~CPantallaRampa();
 80093d4:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80093d8:	f7ff bfde 	b.w	8009398 <_ZN14CPantallaRampaD1Ev>

080093dc <_ZThn172_N14CPantallaRampaD1Ev>:
 80093dc:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 80093e0:	f7ff bfda 	b.w	8009398 <_ZN14CPantallaRampaD1Ev>

080093e4 <_ZN14CPantallaRampaD0Ev>:
CPantallaRampa::~CPantallaRampa()
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
}
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f7ff ffd3 	bl	8009398 <_ZN14CPantallaRampaD1Ev>
 80093f2:	21b8      	movs	r1, #184	@ 0xb8
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f008 fb49 	bl	8011a8c <_ZdlPvj>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4618      	mov	r0, r3
 80093fe:	3708      	adds	r7, #8
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <_ZThn172_N14CPantallaRampaD0Ev>:
 8009404:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8009408:	f7ff bfec 	b.w	80093e4 <_ZN14CPantallaRampaD0Ev>

0800940c <_ZThn48_N14CPantallaRampaD0Ev>:
 800940c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8009410:	f7ff bfe8 	b.w	80093e4 <_ZN14CPantallaRampaD0Ev>

08009414 <_ZN14CPantallaRampa14SetNumeroRampaEi>:

void CPantallaRampa::SetNumeroRampa(int id_Rampa)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b088      	sub	sp, #32
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
	ID_Rampa=id_Rampa;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	683a      	ldr	r2, [r7, #0]
 8009422:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	CRampa rampa=ControladorRampas.DameRampa(ID_Rampa);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800942c:	f107 0308 	add.w	r3, r7, #8
 8009430:	490a      	ldr	r1, [pc, #40]	@ (800945c <_ZN14CPantallaRampa14SetNumeroRampaEi+0x48>)
 8009432:	4618      	mov	r0, r3
 8009434:	f002 f88b 	bl	800b54e <_ZN18CControladorRampas9DameRampaEi>
	this->SetTituloPantalla(rampa.Nombre);
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	3370      	adds	r3, #112	@ 0x70
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f107 0208 	add.w	r2, r7, #8
 8009446:	3208      	adds	r2, #8
 8009448:	4611      	mov	r1, r2
 800944a:	4798      	blx	r3
}
 800944c:	f107 0308 	add.w	r3, r7, #8
 8009450:	4618      	mov	r0, r3
 8009452:	f002 fb89 	bl	800bb68 <_ZN6CRampaD1Ev>
 8009456:	3720      	adds	r7, #32
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	20000360 	.word	0x20000360

08009460 <_ZN14CPantallaRampa11OnMenuEventEi>:
void CPantallaRampa::OnMenuEvent(int identificador)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	6039      	str	r1, [r7, #0]

	switch(identificador)
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	2b04      	cmp	r3, #4
 800946e:	d831      	bhi.n	80094d4 <_ZN14CPantallaRampa11OnMenuEventEi+0x74>
 8009470:	a201      	add	r2, pc, #4	@ (adr r2, 8009478 <_ZN14CPantallaRampa11OnMenuEventEi+0x18>)
 8009472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009476:	bf00      	nop
 8009478:	080094c5 	.word	0x080094c5
 800947c:	08009495 	.word	0x08009495
 8009480:	080094a5 	.word	0x080094a5
 8009484:	0800948d 	.word	0x0800948d
 8009488:	080094b5 	.word	0x080094b5
	{
	case MENU_PANTALLA_RAMPA::PANTALLA_RAMPA_SALIR:
		ManejadorPantallas.MuestraMenuRampa();
 800948c:	4813      	ldr	r0, [pc, #76]	@ (80094dc <_ZN14CPantallaRampa11OnMenuEventEi+0x7c>)
 800948e:	f7fa fcef 	bl	8003e70 <_ZN19CManejadorPantallas16MuestraMenuRampaEv>
		break;
 8009492:	e01f      	b.n	80094d4 <_ZN14CPantallaRampa11OnMenuEventEi+0x74>
	case MENU_PANTALLA_RAMPA::PANTALLA_RAMPA_MODIFICAR:
		ManejadorPantallas.MuestraPantallaEditorNombre(ID_Rampa);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800949a:	4619      	mov	r1, r3
 800949c:	480f      	ldr	r0, [pc, #60]	@ (80094dc <_ZN14CPantallaRampa11OnMenuEventEi+0x7c>)
 800949e:	f7fa fe2a 	bl	80040f6 <_ZN19CManejadorPantallas27MuestraPantallaEditorNombreEi>
		break;
 80094a2:	e017      	b.n	80094d4 <_ZN14CPantallaRampa11OnMenuEventEi+0x74>
	case MENU_PANTALLA_RAMPA::PANTALLA_RAMPA_ELIMINAR:
		ManejadorPantallas.MuestraPantallaEliminarRampa(ID_Rampa);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80094aa:	4619      	mov	r1, r3
 80094ac:	480b      	ldr	r0, [pc, #44]	@ (80094dc <_ZN14CPantallaRampa11OnMenuEventEi+0x7c>)
 80094ae:	f7fa fe6e 	bl	800418e <_ZN19CManejadorPantallas28MuestraPantallaEliminarRampaEi>
		break;
 80094b2:	e00f      	b.n	80094d4 <_ZN14CPantallaRampa11OnMenuEventEi+0x74>
	case MENU_PANTALLA_RAMPA::PANTALLA_RAMPA_PASOS:
		ManejadorPantallas.AsignaPantallaPasosRampa(ID_Rampa);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80094ba:	4619      	mov	r1, r3
 80094bc:	4807      	ldr	r0, [pc, #28]	@ (80094dc <_ZN14CPantallaRampa11OnMenuEventEi+0x7c>)
 80094be:	f7fa fe3e 	bl	800413e <_ZN19CManejadorPantallas24AsignaPantallaPasosRampaEi>
		break;
 80094c2:	e007      	b.n	80094d4 <_ZN14CPantallaRampa11OnMenuEventEi+0x74>
	case MENU_PANTALLA_RAMPA::PANTALLA_RAMPA_EJECUTAR:
		ManejadorPantallas.MuestraPantallaEjecucionRampa(ID_Rampa);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80094ca:	4619      	mov	r1, r3
 80094cc:	4803      	ldr	r0, [pc, #12]	@ (80094dc <_ZN14CPantallaRampa11OnMenuEventEi+0x7c>)
 80094ce:	f7fa fef8 	bl	80042c2 <_ZN19CManejadorPantallas29MuestraPantallaEjecucionRampaEi>
		break;
 80094d2:	bf00      	nop
	}

}
 80094d4:	bf00      	nop
 80094d6:	3708      	adds	r7, #8
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	20000258 	.word	0x20000258

080094e0 <_ZThn172_N14CPantallaRampa11OnMenuEventEi>:
	void SetNumeroRampa(int id_Rampa);
	virtual void OnMenuEvent(int identificador);
 80094e0:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 80094e4:	f7ff bfbc 	b.w	8009460 <_ZN14CPantallaRampa11OnMenuEventEi>

080094e8 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt>:
}

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1,
		uint16_t Y1, uint16_t Colour)
{
 80094e8:	b590      	push	{r4, r7, lr}
 80094ea:	b087      	sub	sp, #28
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	4604      	mov	r4, r0
 80094f0:	4608      	mov	r0, r1
 80094f2:	4611      	mov	r1, r2
 80094f4:	461a      	mov	r2, r3
 80094f6:	4623      	mov	r3, r4
 80094f8:	80fb      	strh	r3, [r7, #6]
 80094fa:	4603      	mov	r3, r0
 80094fc:	80bb      	strh	r3, [r7, #4]
 80094fe:	460b      	mov	r3, r1
 8009500:	807b      	strh	r3, [r7, #2]
 8009502:	4613      	mov	r3, r2
 8009504:	803b      	strh	r3, [r7, #0]
	uint16_t X_length = 0;
 8009506:	2300      	movs	r3, #0
 8009508:	82fb      	strh	r3, [r7, #22]
	uint16_t Y_length = 0;
 800950a:	2300      	movs	r3, #0
 800950c:	82bb      	strh	r3, [r7, #20]
	uint8_t Negative_X = 0;
 800950e:	2300      	movs	r3, #0
 8009510:	74fb      	strb	r3, [r7, #19]
	uint8_t Negative_Y = 0;
 8009512:	2300      	movs	r3, #0
 8009514:	74bb      	strb	r3, [r7, #18]
	float Calc_Negative = 0;
 8009516:	f04f 0300 	mov.w	r3, #0
 800951a:	60fb      	str	r3, [r7, #12]

	Calc_Negative = X1 - X0;
 800951c:	887a      	ldrh	r2, [r7, #2]
 800951e:	88fb      	ldrh	r3, [r7, #6]
 8009520:	1ad3      	subs	r3, r2, r3
 8009522:	ee07 3a90 	vmov	s15, r3
 8009526:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800952a:	edc7 7a03 	vstr	s15, [r7, #12]
	if (Calc_Negative < 0)
 800952e:	edd7 7a03 	vldr	s15, [r7, #12]
 8009532:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800953a:	d501      	bpl.n	8009540 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x58>
		Negative_X = 1;
 800953c:	2301      	movs	r3, #1
 800953e:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8009540:	f04f 0300 	mov.w	r3, #0
 8009544:	60fb      	str	r3, [r7, #12]

	Calc_Negative = Y1 - Y0;
 8009546:	883a      	ldrh	r2, [r7, #0]
 8009548:	88bb      	ldrh	r3, [r7, #4]
 800954a:	1ad3      	subs	r3, r2, r3
 800954c:	ee07 3a90 	vmov	s15, r3
 8009550:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009554:	edc7 7a03 	vstr	s15, [r7, #12]
	if (Calc_Negative < 0)
 8009558:	edd7 7a03 	vldr	s15, [r7, #12]
 800955c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009564:	d501      	bpl.n	800956a <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x82>
		Negative_Y = 1;
 8009566:	2301      	movs	r3, #1
 8009568:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if (!Negative_X)
 800956a:	7cfb      	ldrb	r3, [r7, #19]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d104      	bne.n	800957a <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x92>
	{
		X_length = X1 - X0;
 8009570:	887a      	ldrh	r2, [r7, #2]
 8009572:	88fb      	ldrh	r3, [r7, #6]
 8009574:	1ad3      	subs	r3, r2, r3
 8009576:	82fb      	strh	r3, [r7, #22]
 8009578:	e003      	b.n	8009582 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x9a>
	}
	else
	{
		X_length = X0 - X1;
 800957a:	88fa      	ldrh	r2, [r7, #6]
 800957c:	887b      	ldrh	r3, [r7, #2]
 800957e:	1ad3      	subs	r3, r2, r3
 8009580:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 8009582:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009584:	8afa      	ldrh	r2, [r7, #22]
 8009586:	88b9      	ldrh	r1, [r7, #4]
 8009588:	88f8      	ldrh	r0, [r7, #6]
 800958a:	f000 fd73 	bl	800a074 <_Z28ILI9341_Draw_Horizontal_Linetttt>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 800958e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009590:	8afa      	ldrh	r2, [r7, #22]
 8009592:	8839      	ldrh	r1, [r7, #0]
 8009594:	88f8      	ldrh	r0, [r7, #6]
 8009596:	f000 fd6d 	bl	800a074 <_Z28ILI9341_Draw_Horizontal_Linetttt>

	//DRAW VERTICAL!
	if (!Negative_Y)
 800959a:	7cbb      	ldrb	r3, [r7, #18]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d104      	bne.n	80095aa <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xc2>
	{
		Y_length = Y1 - Y0;
 80095a0:	883a      	ldrh	r2, [r7, #0]
 80095a2:	88bb      	ldrh	r3, [r7, #4]
 80095a4:	1ad3      	subs	r3, r2, r3
 80095a6:	82bb      	strh	r3, [r7, #20]
 80095a8:	e003      	b.n	80095b2 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xca>
	}
	else
	{
		Y_length = Y0 - Y1;
 80095aa:	88ba      	ldrh	r2, [r7, #4]
 80095ac:	883b      	ldrh	r3, [r7, #0]
 80095ae:	1ad3      	subs	r3, r2, r3
 80095b0:	82bb      	strh	r3, [r7, #20]
	}
	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 80095b2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80095b4:	8aba      	ldrh	r2, [r7, #20]
 80095b6:	88b9      	ldrh	r1, [r7, #4]
 80095b8:	88f8      	ldrh	r0, [r7, #6]
 80095ba:	f000 fda9 	bl	800a110 <_Z26ILI9341_Draw_Vertical_Linetttt>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 80095be:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80095c0:	8aba      	ldrh	r2, [r7, #20]
 80095c2:	88b9      	ldrh	r1, [r7, #4]
 80095c4:	8878      	ldrh	r0, [r7, #2]
 80095c6:	f000 fda3 	bl	800a110 <_Z26ILI9341_Draw_Vertical_Linetttt>

	if ((X_length > 0) || (Y_length > 0))
 80095ca:	8afb      	ldrh	r3, [r7, #22]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d102      	bne.n	80095d6 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xee>
 80095d0:	8abb      	ldrh	r3, [r7, #20]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d005      	beq.n	80095e2 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xfa>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 80095d6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80095d8:	8839      	ldrh	r1, [r7, #0]
 80095da:	887b      	ldrh	r3, [r7, #2]
 80095dc:	4618      	mov	r0, r3
 80095de:	f000 fc13 	bl	8009e08 <_Z18ILI9341_Draw_Pixelttt>
	}

}
 80095e2:	bf00      	nop
 80095e4:	371c      	adds	r7, #28
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd90      	pop	{r4, r7, pc}

080095ea <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt>:

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1,
		uint16_t Y1, uint16_t Colour)
{
 80095ea:	b590      	push	{r4, r7, lr}
 80095ec:	b089      	sub	sp, #36	@ 0x24
 80095ee:	af02      	add	r7, sp, #8
 80095f0:	4604      	mov	r4, r0
 80095f2:	4608      	mov	r0, r1
 80095f4:	4611      	mov	r1, r2
 80095f6:	461a      	mov	r2, r3
 80095f8:	4623      	mov	r3, r4
 80095fa:	80fb      	strh	r3, [r7, #6]
 80095fc:	4603      	mov	r3, r0
 80095fe:	80bb      	strh	r3, [r7, #4]
 8009600:	460b      	mov	r3, r1
 8009602:	807b      	strh	r3, [r7, #2]
 8009604:	4613      	mov	r3, r2
 8009606:	803b      	strh	r3, [r7, #0]
	uint16_t X_length = 0;
 8009608:	2300      	movs	r3, #0
 800960a:	82fb      	strh	r3, [r7, #22]
	uint16_t Y_length = 0;
 800960c:	2300      	movs	r3, #0
 800960e:	82bb      	strh	r3, [r7, #20]
	uint8_t Negative_X = 0;
 8009610:	2300      	movs	r3, #0
 8009612:	74fb      	strb	r3, [r7, #19]
	uint8_t Negative_Y = 0;
 8009614:	2300      	movs	r3, #0
 8009616:	74bb      	strb	r3, [r7, #18]
	int32_t Calc_Negative = 0;
 8009618:	2300      	movs	r3, #0
 800961a:	60bb      	str	r3, [r7, #8]

	uint16_t X0_true = 0;
 800961c:	2300      	movs	r3, #0
 800961e:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 8009620:	2300      	movs	r3, #0
 8009622:	81fb      	strh	r3, [r7, #14]

	Calc_Negative = X1 - X0;
 8009624:	887a      	ldrh	r2, [r7, #2]
 8009626:	88fb      	ldrh	r3, [r7, #6]
 8009628:	1ad3      	subs	r3, r2, r3
 800962a:	60bb      	str	r3, [r7, #8]
	if (Calc_Negative < 0)
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	2b00      	cmp	r3, #0
 8009630:	da01      	bge.n	8009636 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x4c>
		Negative_X = 1;
 8009632:	2301      	movs	r3, #1
 8009634:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8009636:	2300      	movs	r3, #0
 8009638:	60bb      	str	r3, [r7, #8]

	Calc_Negative = Y1 - Y0;
 800963a:	883a      	ldrh	r2, [r7, #0]
 800963c:	88bb      	ldrh	r3, [r7, #4]
 800963e:	1ad3      	subs	r3, r2, r3
 8009640:	60bb      	str	r3, [r7, #8]
	if (Calc_Negative < 0)
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	2b00      	cmp	r3, #0
 8009646:	da01      	bge.n	800964c <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x62>
		Negative_Y = 1;
 8009648:	2301      	movs	r3, #1
 800964a:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if (!Negative_X)
 800964c:	7cfb      	ldrb	r3, [r7, #19]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d106      	bne.n	8009660 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x76>
	{
		X_length = X1 - X0;
 8009652:	887a      	ldrh	r2, [r7, #2]
 8009654:	88fb      	ldrh	r3, [r7, #6]
 8009656:	1ad3      	subs	r3, r2, r3
 8009658:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 800965a:	88fb      	ldrh	r3, [r7, #6]
 800965c:	823b      	strh	r3, [r7, #16]
 800965e:	e005      	b.n	800966c <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8009660:	88fa      	ldrh	r2, [r7, #6]
 8009662:	887b      	ldrh	r3, [r7, #2]
 8009664:	1ad3      	subs	r3, r2, r3
 8009666:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8009668:	887b      	ldrh	r3, [r7, #2]
 800966a:	823b      	strh	r3, [r7, #16]
	}

	//DRAW VERTICAL!
	if (!Negative_Y)
 800966c:	7cbb      	ldrb	r3, [r7, #18]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d106      	bne.n	8009680 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x96>
	{
		Y_length = Y1 - Y0;
 8009672:	883a      	ldrh	r2, [r7, #0]
 8009674:	88bb      	ldrh	r3, [r7, #4]
 8009676:	1ad3      	subs	r3, r2, r3
 8009678:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;
 800967a:	88bb      	ldrh	r3, [r7, #4]
 800967c:	81fb      	strh	r3, [r7, #14]
 800967e:	e005      	b.n	800968c <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 8009680:	88ba      	ldrh	r2, [r7, #4]
 8009682:	883b      	ldrh	r3, [r7, #0]
 8009684:	1ad3      	subs	r3, r2, r3
 8009686:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;
 8009688:	883b      	ldrh	r3, [r7, #0]
 800968a:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);
 800968c:	8abc      	ldrh	r4, [r7, #20]
 800968e:	8afa      	ldrh	r2, [r7, #22]
 8009690:	89f9      	ldrh	r1, [r7, #14]
 8009692:	8a38      	ldrh	r0, [r7, #16]
 8009694:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009696:	9300      	str	r3, [sp, #0]
 8009698:	4623      	mov	r3, r4
 800969a:	f000 fc81 	bl	8009fa0 <_Z22ILI9341_Draw_Rectanglettttt>
}
 800969e:	bf00      	nop
 80096a0:	371c      	adds	r7, #28
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd90      	pop	{r4, r7, pc}
	...

080096a8 <_Z17ILI9341_Draw_Charciittt>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, int X, int Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour)
{
 80096a8:	b590      	push	{r4, r7, lr}
 80096aa:	b08b      	sub	sp, #44	@ 0x2c
 80096ac:	af02      	add	r7, sp, #8
 80096ae:	60b9      	str	r1, [r7, #8]
 80096b0:	607a      	str	r2, [r7, #4]
 80096b2:	461a      	mov	r2, r3
 80096b4:	4603      	mov	r3, r0
 80096b6:	73fb      	strb	r3, [r7, #15]
 80096b8:	4613      	mov	r3, r2
 80096ba:	81bb      	strh	r3, [r7, #12]
	uint8_t function_char;
	uint8_t i, j;

	function_char = Character;
 80096bc:	7bfb      	ldrb	r3, [r7, #15]
 80096be:	77fb      	strb	r3, [r7, #31]

	if (function_char < ' ')
 80096c0:	7ffb      	ldrb	r3, [r7, #31]
 80096c2:	2b1f      	cmp	r3, #31
 80096c4:	d802      	bhi.n	80096cc <_Z17ILI9341_Draw_Charciittt+0x24>
	{
		Character = 0;
 80096c6:	2300      	movs	r3, #0
 80096c8:	73fb      	strb	r3, [r7, #15]
 80096ca:	e002      	b.n	80096d2 <_Z17ILI9341_Draw_Charciittt+0x2a>
	}
	else
	{
		function_char -= 32;
 80096cc:	7ffb      	ldrb	r3, [r7, #31]
 80096ce:	3b20      	subs	r3, #32
 80096d0:	77fb      	strb	r3, [r7, #31]
	}

	char temp[CHAR_WIDTH];
	for (uint8_t k = 0; k < CHAR_WIDTH; k++)
 80096d2:	2300      	movs	r3, #0
 80096d4:	773b      	strb	r3, [r7, #28]
 80096d6:	e012      	b.n	80096fe <_Z17ILI9341_Draw_Charciittt+0x56>
	{
		temp[k] = font[function_char][k];
 80096d8:	7ffa      	ldrb	r2, [r7, #31]
 80096da:	7f38      	ldrb	r0, [r7, #28]
 80096dc:	7f39      	ldrb	r1, [r7, #28]
 80096de:	4c3c      	ldr	r4, [pc, #240]	@ (80097d0 <_Z17ILI9341_Draw_Charciittt+0x128>)
 80096e0:	4613      	mov	r3, r2
 80096e2:	005b      	lsls	r3, r3, #1
 80096e4:	4413      	add	r3, r2
 80096e6:	005b      	lsls	r3, r3, #1
 80096e8:	4423      	add	r3, r4
 80096ea:	4403      	add	r3, r0
 80096ec:	781a      	ldrb	r2, [r3, #0]
 80096ee:	f101 0320 	add.w	r3, r1, #32
 80096f2:	443b      	add	r3, r7
 80096f4:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t k = 0; k < CHAR_WIDTH; k++)
 80096f8:	7f3b      	ldrb	r3, [r7, #28]
 80096fa:	3301      	adds	r3, #1
 80096fc:	773b      	strb	r3, [r7, #28]
 80096fe:	7f3b      	ldrb	r3, [r7, #28]
 8009700:	2b05      	cmp	r3, #5
 8009702:	d9e9      	bls.n	80096d8 <_Z17ILI9341_Draw_Charciittt+0x30>
	}

	// Draw pixels
	ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH * Size, CHAR_HEIGHT * Size,
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	b298      	uxth	r0, r3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	b299      	uxth	r1, r3
 800970c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800970e:	461a      	mov	r2, r3
 8009710:	0052      	lsls	r2, r2, #1
 8009712:	4413      	add	r3, r2
 8009714:	005b      	lsls	r3, r3, #1
 8009716:	b29a      	uxth	r2, r3
 8009718:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800971a:	00db      	lsls	r3, r3, #3
 800971c:	b29c      	uxth	r4, r3
 800971e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009720:	9300      	str	r3, [sp, #0]
 8009722:	4623      	mov	r3, r4
 8009724:	f000 fc3c 	bl	8009fa0 <_Z22ILI9341_Draw_Rectanglettttt>
			Background_Colour);
	for (j = 0; j < CHAR_WIDTH; j++)
 8009728:	2300      	movs	r3, #0
 800972a:	777b      	strb	r3, [r7, #29]
 800972c:	e047      	b.n	80097be <_Z17ILI9341_Draw_Charciittt+0x116>
	{
		for (i = 0; i < CHAR_HEIGHT; i++)
 800972e:	2300      	movs	r3, #0
 8009730:	77bb      	strb	r3, [r7, #30]
 8009732:	e03e      	b.n	80097b2 <_Z17ILI9341_Draw_Charciittt+0x10a>
		{
			if (temp[j] & (1 << i))
 8009734:	7f7b      	ldrb	r3, [r7, #29]
 8009736:	3320      	adds	r3, #32
 8009738:	443b      	add	r3, r7
 800973a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800973e:	461a      	mov	r2, r3
 8009740:	7fbb      	ldrb	r3, [r7, #30]
 8009742:	fa42 f303 	asr.w	r3, r2, r3
 8009746:	f003 0301 	and.w	r3, r3, #1
 800974a:	2b00      	cmp	r3, #0
 800974c:	d02e      	beq.n	80097ac <_Z17ILI9341_Draw_Charciittt+0x104>
			{
				if (Size == 1)
 800974e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8009750:	2b01      	cmp	r3, #1
 8009752:	d110      	bne.n	8009776 <_Z17ILI9341_Draw_Charciittt+0xce>
				{
					ILI9341_Draw_Pixel(X + j, Y + i, Colour);
 8009754:	7f7b      	ldrb	r3, [r7, #29]
 8009756:	b29a      	uxth	r2, r3
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	b29b      	uxth	r3, r3
 800975c:	4413      	add	r3, r2
 800975e:	b298      	uxth	r0, r3
 8009760:	7fbb      	ldrb	r3, [r7, #30]
 8009762:	b29a      	uxth	r2, r3
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	b29b      	uxth	r3, r3
 8009768:	4413      	add	r3, r2
 800976a:	b29b      	uxth	r3, r3
 800976c:	89ba      	ldrh	r2, [r7, #12]
 800976e:	4619      	mov	r1, r3
 8009770:	f000 fb4a 	bl	8009e08 <_Z18ILI9341_Draw_Pixelttt>
 8009774:	e01a      	b.n	80097ac <_Z17ILI9341_Draw_Charciittt+0x104>
				}
				else
				{
					ILI9341_Draw_Rectangle(X + (j * Size), Y + (i * Size), Size,
 8009776:	7f7b      	ldrb	r3, [r7, #29]
 8009778:	b29b      	uxth	r3, r3
 800977a:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800977c:	fb12 f303 	smulbb	r3, r2, r3
 8009780:	b29a      	uxth	r2, r3
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	b29b      	uxth	r3, r3
 8009786:	4413      	add	r3, r2
 8009788:	b298      	uxth	r0, r3
 800978a:	7fbb      	ldrb	r3, [r7, #30]
 800978c:	b29b      	uxth	r3, r3
 800978e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8009790:	fb12 f303 	smulbb	r3, r2, r3
 8009794:	b29a      	uxth	r2, r3
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	b29b      	uxth	r3, r3
 800979a:	4413      	add	r3, r2
 800979c:	b299      	uxth	r1, r3
 800979e:	8e3c      	ldrh	r4, [r7, #48]	@ 0x30
 80097a0:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80097a2:	89bb      	ldrh	r3, [r7, #12]
 80097a4:	9300      	str	r3, [sp, #0]
 80097a6:	4623      	mov	r3, r4
 80097a8:	f000 fbfa 	bl	8009fa0 <_Z22ILI9341_Draw_Rectanglettttt>
		for (i = 0; i < CHAR_HEIGHT; i++)
 80097ac:	7fbb      	ldrb	r3, [r7, #30]
 80097ae:	3301      	adds	r3, #1
 80097b0:	77bb      	strb	r3, [r7, #30]
 80097b2:	7fbb      	ldrb	r3, [r7, #30]
 80097b4:	2b07      	cmp	r3, #7
 80097b6:	d9bd      	bls.n	8009734 <_Z17ILI9341_Draw_Charciittt+0x8c>
	for (j = 0; j < CHAR_WIDTH; j++)
 80097b8:	7f7b      	ldrb	r3, [r7, #29]
 80097ba:	3301      	adds	r3, #1
 80097bc:	777b      	strb	r3, [r7, #29]
 80097be:	7f7b      	ldrb	r3, [r7, #29]
 80097c0:	2b05      	cmp	r3, #5
 80097c2:	d9b4      	bls.n	800972e <_Z17ILI9341_Draw_Charciittt+0x86>
							Size, Colour);
				}
			}
		}
	}
}
 80097c4:	bf00      	nop
 80097c6:	bf00      	nop
 80097c8:	3724      	adds	r7, #36	@ 0x24
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd90      	pop	{r4, r7, pc}
 80097ce:	bf00      	nop
 80097d0:	08015e60 	.word	0x08015e60

080097d4 <_Z17ILI9341_Draw_TextPKciittt>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char *Text, int X, int Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b086      	sub	sp, #24
 80097d8:	af02      	add	r7, sp, #8
 80097da:	60f8      	str	r0, [r7, #12]
 80097dc:	60b9      	str	r1, [r7, #8]
 80097de:	607a      	str	r2, [r7, #4]
 80097e0:	807b      	strh	r3, [r7, #2]
	while (*Text)
 80097e2:	e016      	b.n	8009812 <_Z17ILI9341_Draw_TextPKciittt+0x3e>
	{
		ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	1c5a      	adds	r2, r3, #1
 80097e8:	60fa      	str	r2, [r7, #12]
 80097ea:	7818      	ldrb	r0, [r3, #0]
 80097ec:	887a      	ldrh	r2, [r7, #2]
 80097ee:	8bbb      	ldrh	r3, [r7, #28]
 80097f0:	9301      	str	r3, [sp, #4]
 80097f2:	8b3b      	ldrh	r3, [r7, #24]
 80097f4:	9300      	str	r3, [sp, #0]
 80097f6:	4613      	mov	r3, r2
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	68b9      	ldr	r1, [r7, #8]
 80097fc:	f7ff ff54 	bl	80096a8 <_Z17ILI9341_Draw_Charciittt>
		X += CHAR_WIDTH * Size;
 8009800:	8b3a      	ldrh	r2, [r7, #24]
 8009802:	4613      	mov	r3, r2
 8009804:	005b      	lsls	r3, r3, #1
 8009806:	4413      	add	r3, r2
 8009808:	005b      	lsls	r3, r3, #1
 800980a:	461a      	mov	r2, r3
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	4413      	add	r3, r2
 8009810:	60bb      	str	r3, [r7, #8]
	while (*Text)
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d1e4      	bne.n	80097e4 <_Z17ILI9341_Draw_TextPKciittt+0x10>
	}
}
 800981a:	bf00      	nop
 800981c:	bf00      	nop
 800981e:	3710      	adds	r7, #16
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <_Z16ILI9341_SPI_Initv>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	af00      	add	r7, sp, #0
	SPI1_Init();													//SPI INIT
 8009828:	f003 fc2a 	bl	800d080 <SPI1_Init>
	MX_GPIO_Init();													//GPIO INIT
 800982c:	f002 ffa6 	bl	800c77c <MX_GPIO_Init>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8009830:	2200      	movs	r2, #0
 8009832:	2101      	movs	r1, #1
 8009834:	4802      	ldr	r0, [pc, #8]	@ (8009840 <_Z16ILI9341_SPI_Initv+0x1c>)
 8009836:	f004 fe0d 	bl	800e454 <HAL_GPIO_WritePin>
}
 800983a:	bf00      	nop
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	40020400 	.word	0x40020400

08009844 <_Z16ILI9341_SPI_Sendh>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	4603      	mov	r3, r0
 800984c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 800984e:	1df9      	adds	r1, r7, #7
 8009850:	2301      	movs	r3, #1
 8009852:	2201      	movs	r2, #1
 8009854:	4803      	ldr	r0, [pc, #12]	@ (8009864 <_Z16ILI9341_SPI_Sendh+0x20>)
 8009856:	f006 fb34 	bl	800fec2 <HAL_SPI_Transmit>
}
 800985a:	bf00      	nop
 800985c:	3708      	adds	r7, #8
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	2000055c 	.word	0x2000055c

08009868 <_Z21ILI9341_Write_Commandh>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
 800986e:	4603      	mov	r3, r0
 8009870:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8009872:	2200      	movs	r2, #0
 8009874:	2101      	movs	r1, #1
 8009876:	480a      	ldr	r0, [pc, #40]	@ (80098a0 <_Z21ILI9341_Write_Commandh+0x38>)
 8009878:	f004 fdec 	bl	800e454 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 800987c:	2200      	movs	r2, #0
 800987e:	2102      	movs	r1, #2
 8009880:	4807      	ldr	r0, [pc, #28]	@ (80098a0 <_Z21ILI9341_Write_Commandh+0x38>)
 8009882:	f004 fde7 	bl	800e454 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Command);
 8009886:	79fb      	ldrb	r3, [r7, #7]
 8009888:	4618      	mov	r0, r3
 800988a:	f7ff ffdb 	bl	8009844 <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800988e:	2201      	movs	r2, #1
 8009890:	2101      	movs	r1, #1
 8009892:	4803      	ldr	r0, [pc, #12]	@ (80098a0 <_Z21ILI9341_Write_Commandh+0x38>)
 8009894:	f004 fdde 	bl	800e454 <HAL_GPIO_WritePin>
}
 8009898:	bf00      	nop
 800989a:	3708      	adds	r7, #8
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	40020400 	.word	0x40020400

080098a4 <_Z18ILI9341_Write_Datah>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	4603      	mov	r3, r0
 80098ac:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80098ae:	2201      	movs	r2, #1
 80098b0:	2102      	movs	r1, #2
 80098b2:	480a      	ldr	r0, [pc, #40]	@ (80098dc <_Z18ILI9341_Write_Datah+0x38>)
 80098b4:	f004 fdce 	bl	800e454 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80098b8:	2200      	movs	r2, #0
 80098ba:	2101      	movs	r1, #1
 80098bc:	4807      	ldr	r0, [pc, #28]	@ (80098dc <_Z18ILI9341_Write_Datah+0x38>)
 80098be:	f004 fdc9 	bl	800e454 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Data);
 80098c2:	79fb      	ldrb	r3, [r7, #7]
 80098c4:	4618      	mov	r0, r3
 80098c6:	f7ff ffbd 	bl	8009844 <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80098ca:	2201      	movs	r2, #1
 80098cc:	2101      	movs	r1, #1
 80098ce:	4803      	ldr	r0, [pc, #12]	@ (80098dc <_Z18ILI9341_Write_Datah+0x38>)
 80098d0:	f004 fdc0 	bl	800e454 <HAL_GPIO_WritePin>
}
 80098d4:	bf00      	nop
 80098d6:	3708      	adds	r7, #8
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	40020400 	.word	0x40020400

080098e0 <_Z19ILI9341_Set_Addresstttt>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80098e0:	b590      	push	{r4, r7, lr}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	4604      	mov	r4, r0
 80098e8:	4608      	mov	r0, r1
 80098ea:	4611      	mov	r1, r2
 80098ec:	461a      	mov	r2, r3
 80098ee:	4623      	mov	r3, r4
 80098f0:	80fb      	strh	r3, [r7, #6]
 80098f2:	4603      	mov	r3, r0
 80098f4:	80bb      	strh	r3, [r7, #4]
 80098f6:	460b      	mov	r3, r1
 80098f8:	807b      	strh	r3, [r7, #2]
 80098fa:	4613      	mov	r3, r2
 80098fc:	803b      	strh	r3, [r7, #0]
	ILI9341_Write_Command(0x2A);
 80098fe:	202a      	movs	r0, #42	@ 0x2a
 8009900:	f7ff ffb2 	bl	8009868 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(X1 >> 8);
 8009904:	88fb      	ldrh	r3, [r7, #6]
 8009906:	0a1b      	lsrs	r3, r3, #8
 8009908:	b29b      	uxth	r3, r3
 800990a:	b2db      	uxtb	r3, r3
 800990c:	4618      	mov	r0, r3
 800990e:	f7ff ffc9 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(X1);
 8009912:	88fb      	ldrh	r3, [r7, #6]
 8009914:	b2db      	uxtb	r3, r3
 8009916:	4618      	mov	r0, r3
 8009918:	f7ff ffc4 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(X2 >> 8);
 800991c:	887b      	ldrh	r3, [r7, #2]
 800991e:	0a1b      	lsrs	r3, r3, #8
 8009920:	b29b      	uxth	r3, r3
 8009922:	b2db      	uxtb	r3, r3
 8009924:	4618      	mov	r0, r3
 8009926:	f7ff ffbd 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(X2);
 800992a:	887b      	ldrh	r3, [r7, #2]
 800992c:	b2db      	uxtb	r3, r3
 800992e:	4618      	mov	r0, r3
 8009930:	f7ff ffb8 	bl	80098a4 <_Z18ILI9341_Write_Datah>

	ILI9341_Write_Command(0x2B);
 8009934:	202b      	movs	r0, #43	@ 0x2b
 8009936:	f7ff ff97 	bl	8009868 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(Y1 >> 8);
 800993a:	88bb      	ldrh	r3, [r7, #4]
 800993c:	0a1b      	lsrs	r3, r3, #8
 800993e:	b29b      	uxth	r3, r3
 8009940:	b2db      	uxtb	r3, r3
 8009942:	4618      	mov	r0, r3
 8009944:	f7ff ffae 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(Y1);
 8009948:	88bb      	ldrh	r3, [r7, #4]
 800994a:	b2db      	uxtb	r3, r3
 800994c:	4618      	mov	r0, r3
 800994e:	f7ff ffa9 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(Y2 >> 8);
 8009952:	883b      	ldrh	r3, [r7, #0]
 8009954:	0a1b      	lsrs	r3, r3, #8
 8009956:	b29b      	uxth	r3, r3
 8009958:	b2db      	uxtb	r3, r3
 800995a:	4618      	mov	r0, r3
 800995c:	f7ff ffa2 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(Y2);
 8009960:	883b      	ldrh	r3, [r7, #0]
 8009962:	b2db      	uxtb	r3, r3
 8009964:	4618      	mov	r0, r3
 8009966:	f7ff ff9d 	bl	80098a4 <_Z18ILI9341_Write_Datah>

	ILI9341_Write_Command(0x2C);
 800996a:	202c      	movs	r0, #44	@ 0x2c
 800996c:	f7ff ff7c 	bl	8009868 <_Z21ILI9341_Write_Commandh>
}
 8009970:	bf00      	nop
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	bd90      	pop	{r4, r7, pc}

08009978 <_Z13ILI9341_Resetv>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 800997c:	2201      	movs	r2, #1
 800997e:	2120      	movs	r1, #32
 8009980:	480a      	ldr	r0, [pc, #40]	@ (80099ac <_Z13ILI9341_Resetv+0x34>)
 8009982:	f004 fd67 	bl	800e454 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8009986:	20c8      	movs	r0, #200	@ 0xc8
 8009988:	f003 ff5e 	bl	800d848 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800998c:	2200      	movs	r2, #0
 800998e:	2101      	movs	r1, #1
 8009990:	4806      	ldr	r0, [pc, #24]	@ (80099ac <_Z13ILI9341_Resetv+0x34>)
 8009992:	f004 fd5f 	bl	800e454 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8009996:	20c8      	movs	r0, #200	@ 0xc8
 8009998:	f003 ff56 	bl	800d848 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 800999c:	2201      	movs	r2, #1
 800999e:	2120      	movs	r1, #32
 80099a0:	4802      	ldr	r0, [pc, #8]	@ (80099ac <_Z13ILI9341_Resetv+0x34>)
 80099a2:	f004 fd57 	bl	800e454 <HAL_GPIO_WritePin>
}
 80099a6:	bf00      	nop
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	40020400 	.word	0x40020400

080099b0 <_Z20ILI9341_Set_Rotationh>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	4603      	mov	r3, r0
 80099b8:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = Rotation;
 80099ba:	79fb      	ldrb	r3, [r7, #7]
 80099bc:	73fb      	strb	r3, [r7, #15]

	ILI9341_Write_Command(0x36);
 80099be:	2036      	movs	r0, #54	@ 0x36
 80099c0:	f7ff ff52 	bl	8009868 <_Z21ILI9341_Write_Commandh>
	HAL_Delay(1);
 80099c4:	2001      	movs	r0, #1
 80099c6:	f003 ff3f 	bl	800d848 <HAL_Delay>

	switch (screen_rotation)
 80099ca:	7bfb      	ldrb	r3, [r7, #15]
 80099cc:	2b03      	cmp	r3, #3
 80099ce:	d837      	bhi.n	8009a40 <_Z20ILI9341_Set_Rotationh+0x90>
 80099d0:	a201      	add	r2, pc, #4	@ (adr r2, 80099d8 <_Z20ILI9341_Set_Rotationh+0x28>)
 80099d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d6:	bf00      	nop
 80099d8:	080099e9 	.word	0x080099e9
 80099dc:	080099ff 	.word	0x080099ff
 80099e0:	08009a15 	.word	0x08009a15
 80099e4:	08009a2b 	.word	0x08009a2b
	{
	case SCREEN_VERTICAL_1:
		ILI9341_Write_Data(0x40 | 0x08);
 80099e8:	2048      	movs	r0, #72	@ 0x48
 80099ea:	f7ff ff5b 	bl	80098a4 <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 240;
 80099ee:	4b17      	ldr	r3, [pc, #92]	@ (8009a4c <_Z20ILI9341_Set_Rotationh+0x9c>)
 80099f0:	22f0      	movs	r2, #240	@ 0xf0
 80099f2:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80099f4:	4b16      	ldr	r3, [pc, #88]	@ (8009a50 <_Z20ILI9341_Set_Rotationh+0xa0>)
 80099f6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80099fa:	801a      	strh	r2, [r3, #0]
		break;
 80099fc:	e021      	b.n	8009a42 <_Z20ILI9341_Set_Rotationh+0x92>
	case SCREEN_HORIZONTAL_1:
		ILI9341_Write_Data(0x20 | 0x08);
 80099fe:	2028      	movs	r0, #40	@ 0x28
 8009a00:	f7ff ff50 	bl	80098a4 <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 320;
 8009a04:	4b11      	ldr	r3, [pc, #68]	@ (8009a4c <_Z20ILI9341_Set_Rotationh+0x9c>)
 8009a06:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8009a0a:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8009a0c:	4b10      	ldr	r3, [pc, #64]	@ (8009a50 <_Z20ILI9341_Set_Rotationh+0xa0>)
 8009a0e:	22f0      	movs	r2, #240	@ 0xf0
 8009a10:	801a      	strh	r2, [r3, #0]
		break;
 8009a12:	e016      	b.n	8009a42 <_Z20ILI9341_Set_Rotationh+0x92>
	case SCREEN_VERTICAL_2:
		ILI9341_Write_Data(0x80 | 0x08);
 8009a14:	2088      	movs	r0, #136	@ 0x88
 8009a16:	f7ff ff45 	bl	80098a4 <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 240;
 8009a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8009a4c <_Z20ILI9341_Set_Rotationh+0x9c>)
 8009a1c:	22f0      	movs	r2, #240	@ 0xf0
 8009a1e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8009a20:	4b0b      	ldr	r3, [pc, #44]	@ (8009a50 <_Z20ILI9341_Set_Rotationh+0xa0>)
 8009a22:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8009a26:	801a      	strh	r2, [r3, #0]
		break;
 8009a28:	e00b      	b.n	8009a42 <_Z20ILI9341_Set_Rotationh+0x92>
	case SCREEN_HORIZONTAL_2:
		ILI9341_Write_Data(0x40 | 0x80 | 0x20 | 0x08);
 8009a2a:	20e8      	movs	r0, #232	@ 0xe8
 8009a2c:	f7ff ff3a 	bl	80098a4 <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 320;
 8009a30:	4b06      	ldr	r3, [pc, #24]	@ (8009a4c <_Z20ILI9341_Set_Rotationh+0x9c>)
 8009a32:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8009a36:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8009a38:	4b05      	ldr	r3, [pc, #20]	@ (8009a50 <_Z20ILI9341_Set_Rotationh+0xa0>)
 8009a3a:	22f0      	movs	r2, #240	@ 0xf0
 8009a3c:	801a      	strh	r2, [r3, #0]
		break;
 8009a3e:	e000      	b.n	8009a42 <_Z20ILI9341_Set_Rotationh+0x92>
	default:
		//EXIT IF SCREEN ROTATION NOT VALID!
		break;
 8009a40:	bf00      	nop
	}
}
 8009a42:	bf00      	nop
 8009a44:	3710      	adds	r7, #16
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	20000002 	.word	0x20000002
 8009a50:	20000000 	.word	0x20000000

08009a54 <_Z14ILI9341_Enablev>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8009a58:	2201      	movs	r2, #1
 8009a5a:	2120      	movs	r1, #32
 8009a5c:	4802      	ldr	r0, [pc, #8]	@ (8009a68 <_Z14ILI9341_Enablev+0x14>)
 8009a5e:	f004 fcf9 	bl	800e454 <HAL_GPIO_WritePin>
}
 8009a62:	bf00      	nop
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop
 8009a68:	40020400 	.word	0x40020400

08009a6c <_Z12ILI9341_Initv>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	af00      	add	r7, sp, #0

	ILI9341_Enable();
 8009a70:	f7ff fff0 	bl	8009a54 <_Z14ILI9341_Enablev>
	ILI9341_SPI_Init();
 8009a74:	f7ff fed6 	bl	8009824 <_Z16ILI9341_SPI_Initv>
	ILI9341_Reset();
 8009a78:	f7ff ff7e 	bl	8009978 <_Z13ILI9341_Resetv>

//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 8009a7c:	2001      	movs	r0, #1
 8009a7e:	f7ff fef3 	bl	8009868 <_Z21ILI9341_Write_Commandh>
	HAL_Delay(1000);
 8009a82:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009a86:	f003 fedf 	bl	800d848 <HAL_Delay>

//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 8009a8a:	20cb      	movs	r0, #203	@ 0xcb
 8009a8c:	f7ff feec 	bl	8009868 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x39);
 8009a90:	2039      	movs	r0, #57	@ 0x39
 8009a92:	f7ff ff07 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x2C);
 8009a96:	202c      	movs	r0, #44	@ 0x2c
 8009a98:	f7ff ff04 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 8009a9c:	2000      	movs	r0, #0
 8009a9e:	f7ff ff01 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x34);
 8009aa2:	2034      	movs	r0, #52	@ 0x34
 8009aa4:	f7ff fefe 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x02);
 8009aa8:	2002      	movs	r0, #2
 8009aaa:	f7ff fefb 	bl	80098a4 <_Z18ILI9341_Write_Datah>

//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 8009aae:	20cf      	movs	r0, #207	@ 0xcf
 8009ab0:	f7ff feda 	bl	8009868 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8009ab4:	2000      	movs	r0, #0
 8009ab6:	f7ff fef5 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0xC1);
 8009aba:	20c1      	movs	r0, #193	@ 0xc1
 8009abc:	f7ff fef2 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x30);
 8009ac0:	2030      	movs	r0, #48	@ 0x30
 8009ac2:	f7ff feef 	bl	80098a4 <_Z18ILI9341_Write_Datah>

//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 8009ac6:	20e8      	movs	r0, #232	@ 0xe8
 8009ac8:	f7ff fece 	bl	8009868 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x85);
 8009acc:	2085      	movs	r0, #133	@ 0x85
 8009ace:	f7ff fee9 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 8009ad2:	2000      	movs	r0, #0
 8009ad4:	f7ff fee6 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x78);
 8009ad8:	2078      	movs	r0, #120	@ 0x78
 8009ada:	f7ff fee3 	bl	80098a4 <_Z18ILI9341_Write_Datah>

//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 8009ade:	20ea      	movs	r0, #234	@ 0xea
 8009ae0:	f7ff fec2 	bl	8009868 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8009ae4:	2000      	movs	r0, #0
 8009ae6:	f7ff fedd 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 8009aea:	2000      	movs	r0, #0
 8009aec:	f7ff feda 	bl	80098a4 <_Z18ILI9341_Write_Datah>

//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 8009af0:	20ed      	movs	r0, #237	@ 0xed
 8009af2:	f7ff feb9 	bl	8009868 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x64);
 8009af6:	2064      	movs	r0, #100	@ 0x64
 8009af8:	f7ff fed4 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x03);
 8009afc:	2003      	movs	r0, #3
 8009afe:	f7ff fed1 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x12);
 8009b02:	2012      	movs	r0, #18
 8009b04:	f7ff fece 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x81);
 8009b08:	2081      	movs	r0, #129	@ 0x81
 8009b0a:	f7ff fecb 	bl	80098a4 <_Z18ILI9341_Write_Datah>

//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 8009b0e:	20f7      	movs	r0, #247	@ 0xf7
 8009b10:	f7ff feaa 	bl	8009868 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x20);
 8009b14:	2020      	movs	r0, #32
 8009b16:	f7ff fec5 	bl	80098a4 <_Z18ILI9341_Write_Datah>

//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 8009b1a:	20c0      	movs	r0, #192	@ 0xc0
 8009b1c:	f7ff fea4 	bl	8009868 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x23);
 8009b20:	2023      	movs	r0, #35	@ 0x23
 8009b22:	f7ff febf 	bl	80098a4 <_Z18ILI9341_Write_Datah>

//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 8009b26:	20c1      	movs	r0, #193	@ 0xc1
 8009b28:	f7ff fe9e 	bl	8009868 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x10);
 8009b2c:	2010      	movs	r0, #16
 8009b2e:	f7ff feb9 	bl	80098a4 <_Z18ILI9341_Write_Datah>

//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 8009b32:	20c5      	movs	r0, #197	@ 0xc5
 8009b34:	f7ff fe98 	bl	8009868 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x3E);
 8009b38:	203e      	movs	r0, #62	@ 0x3e
 8009b3a:	f7ff feb3 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x28);
 8009b3e:	2028      	movs	r0, #40	@ 0x28
 8009b40:	f7ff feb0 	bl	80098a4 <_Z18ILI9341_Write_Datah>

//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 8009b44:	20c7      	movs	r0, #199	@ 0xc7
 8009b46:	f7ff fe8f 	bl	8009868 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x86);
 8009b4a:	2086      	movs	r0, #134	@ 0x86
 8009b4c:	f7ff feaa 	bl	80098a4 <_Z18ILI9341_Write_Datah>

//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 8009b50:	2036      	movs	r0, #54	@ 0x36
 8009b52:	f7ff fe89 	bl	8009868 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x48);
 8009b56:	2048      	movs	r0, #72	@ 0x48
 8009b58:	f7ff fea4 	bl	80098a4 <_Z18ILI9341_Write_Datah>

//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 8009b5c:	203a      	movs	r0, #58	@ 0x3a
 8009b5e:	f7ff fe83 	bl	8009868 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x55);
 8009b62:	2055      	movs	r0, #85	@ 0x55
 8009b64:	f7ff fe9e 	bl	80098a4 <_Z18ILI9341_Write_Datah>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 8009b68:	20b1      	movs	r0, #177	@ 0xb1
 8009b6a:	f7ff fe7d 	bl	8009868 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8009b6e:	2000      	movs	r0, #0
 8009b70:	f7ff fe98 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x18);
 8009b74:	2018      	movs	r0, #24
 8009b76:	f7ff fe95 	bl	80098a4 <_Z18ILI9341_Write_Datah>

//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 8009b7a:	20b6      	movs	r0, #182	@ 0xb6
 8009b7c:	f7ff fe74 	bl	8009868 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x08);
 8009b80:	2008      	movs	r0, #8
 8009b82:	f7ff fe8f 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x82);
 8009b86:	2082      	movs	r0, #130	@ 0x82
 8009b88:	f7ff fe8c 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x27);
 8009b8c:	2027      	movs	r0, #39	@ 0x27
 8009b8e:	f7ff fe89 	bl	80098a4 <_Z18ILI9341_Write_Datah>

//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 8009b92:	20f2      	movs	r0, #242	@ 0xf2
 8009b94:	f7ff fe68 	bl	8009868 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8009b98:	2000      	movs	r0, #0
 8009b9a:	f7ff fe83 	bl	80098a4 <_Z18ILI9341_Write_Datah>

//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 8009b9e:	2026      	movs	r0, #38	@ 0x26
 8009ba0:	f7ff fe62 	bl	8009868 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x01);
 8009ba4:	2001      	movs	r0, #1
 8009ba6:	f7ff fe7d 	bl	80098a4 <_Z18ILI9341_Write_Datah>

//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 8009baa:	20e0      	movs	r0, #224	@ 0xe0
 8009bac:	f7ff fe5c 	bl	8009868 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x0F);
 8009bb0:	200f      	movs	r0, #15
 8009bb2:	f7ff fe77 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x31);
 8009bb6:	2031      	movs	r0, #49	@ 0x31
 8009bb8:	f7ff fe74 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x2B);
 8009bbc:	202b      	movs	r0, #43	@ 0x2b
 8009bbe:	f7ff fe71 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0C);
 8009bc2:	200c      	movs	r0, #12
 8009bc4:	f7ff fe6e 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0E);
 8009bc8:	200e      	movs	r0, #14
 8009bca:	f7ff fe6b 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x08);
 8009bce:	2008      	movs	r0, #8
 8009bd0:	f7ff fe68 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x4E);
 8009bd4:	204e      	movs	r0, #78	@ 0x4e
 8009bd6:	f7ff fe65 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0xF1);
 8009bda:	20f1      	movs	r0, #241	@ 0xf1
 8009bdc:	f7ff fe62 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x37);
 8009be0:	2037      	movs	r0, #55	@ 0x37
 8009be2:	f7ff fe5f 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x07);
 8009be6:	2007      	movs	r0, #7
 8009be8:	f7ff fe5c 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x10);
 8009bec:	2010      	movs	r0, #16
 8009bee:	f7ff fe59 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x03);
 8009bf2:	2003      	movs	r0, #3
 8009bf4:	f7ff fe56 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0E);
 8009bf8:	200e      	movs	r0, #14
 8009bfa:	f7ff fe53 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x09);
 8009bfe:	2009      	movs	r0, #9
 8009c00:	f7ff fe50 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 8009c04:	2000      	movs	r0, #0
 8009c06:	f7ff fe4d 	bl	80098a4 <_Z18ILI9341_Write_Datah>

//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 8009c0a:	20e1      	movs	r0, #225	@ 0xe1
 8009c0c:	f7ff fe2c 	bl	8009868 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8009c10:	2000      	movs	r0, #0
 8009c12:	f7ff fe47 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0E);
 8009c16:	200e      	movs	r0, #14
 8009c18:	f7ff fe44 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x14);
 8009c1c:	2014      	movs	r0, #20
 8009c1e:	f7ff fe41 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x03);
 8009c22:	2003      	movs	r0, #3
 8009c24:	f7ff fe3e 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x11);
 8009c28:	2011      	movs	r0, #17
 8009c2a:	f7ff fe3b 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x07);
 8009c2e:	2007      	movs	r0, #7
 8009c30:	f7ff fe38 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x31);
 8009c34:	2031      	movs	r0, #49	@ 0x31
 8009c36:	f7ff fe35 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0xC1);
 8009c3a:	20c1      	movs	r0, #193	@ 0xc1
 8009c3c:	f7ff fe32 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x48);
 8009c40:	2048      	movs	r0, #72	@ 0x48
 8009c42:	f7ff fe2f 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x08);
 8009c46:	2008      	movs	r0, #8
 8009c48:	f7ff fe2c 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0F);
 8009c4c:	200f      	movs	r0, #15
 8009c4e:	f7ff fe29 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0C);
 8009c52:	200c      	movs	r0, #12
 8009c54:	f7ff fe26 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x31);
 8009c58:	2031      	movs	r0, #49	@ 0x31
 8009c5a:	f7ff fe23 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x36);
 8009c5e:	2036      	movs	r0, #54	@ 0x36
 8009c60:	f7ff fe20 	bl	80098a4 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0F);
 8009c64:	200f      	movs	r0, #15
 8009c66:	f7ff fe1d 	bl	80098a4 <_Z18ILI9341_Write_Datah>

//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 8009c6a:	2011      	movs	r0, #17
 8009c6c:	f7ff fdfc 	bl	8009868 <_Z21ILI9341_Write_Commandh>
	HAL_Delay(120);
 8009c70:	2078      	movs	r0, #120	@ 0x78
 8009c72:	f003 fde9 	bl	800d848 <HAL_Delay>

//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 8009c76:	2029      	movs	r0, #41	@ 0x29
 8009c78:	f7ff fdf6 	bl	8009868 <_Z21ILI9341_Write_Commandh>

//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8009c7c:	2000      	movs	r0, #0
 8009c7e:	f7ff fe97 	bl	80099b0 <_Z20ILI9341_Set_Rotationh>
}
 8009c82:	bf00      	nop
 8009c84:	bd80      	pop	{r7, pc}
	...

08009c88 <_Z25ILI9341_Draw_Colour_Bursttm>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8009c88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c8c:	b08d      	sub	sp, #52	@ 0x34
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	4603      	mov	r3, r0
 8009c92:	6039      	str	r1, [r7, #0]
 8009c94:	80fb      	strh	r3, [r7, #6]
//REMAINDER!
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
			Remainder_from_block, 10);

	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
}
 8009c96:	466b      	mov	r3, sp
 8009c98:	461e      	mov	r6, r3
	uint32_t Buffer_Size = 0;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if ((Size * 2) < BURST_MAX_SIZE)
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	005b      	lsls	r3, r3, #1
 8009ca2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8009ca6:	d202      	bcs.n	8009cae <_Z25ILI9341_Draw_Colour_Bursttm+0x26>
		Buffer_Size = Size;
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009cac:	e002      	b.n	8009cb4 <_Z25ILI9341_Draw_Colour_Bursttm+0x2c>
		Buffer_Size = BURST_MAX_SIZE;
 8009cae:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8009cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	2102      	movs	r1, #2
 8009cb8:	483e      	ldr	r0, [pc, #248]	@ (8009db4 <_Z25ILI9341_Draw_Colour_Bursttm+0x12c>)
 8009cba:	f004 fbcb 	bl	800e454 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	2101      	movs	r1, #1
 8009cc2:	483c      	ldr	r0, [pc, #240]	@ (8009db4 <_Z25ILI9341_Draw_Colour_Bursttm+0x12c>)
 8009cc4:	f004 fbc6 	bl	800e454 <HAL_GPIO_WritePin>
	unsigned char chifted = Colour >> 8;
 8009cc8:	88fb      	ldrh	r3, [r7, #6]
 8009cca:	0a1b      	lsrs	r3, r3, #8
 8009ccc:	b29b      	uxth	r3, r3
 8009cce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	unsigned char burst_buffer[Buffer_Size];
 8009cd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	3b01      	subs	r3, #1
 8009cd8:	61fb      	str	r3, [r7, #28]
 8009cda:	2300      	movs	r3, #0
 8009cdc:	4688      	mov	r8, r1
 8009cde:	4699      	mov	r9, r3
 8009ce0:	f04f 0200 	mov.w	r2, #0
 8009ce4:	f04f 0300 	mov.w	r3, #0
 8009ce8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009cec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009cf0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	460c      	mov	r4, r1
 8009cf8:	461d      	mov	r5, r3
 8009cfa:	f04f 0200 	mov.w	r2, #0
 8009cfe:	f04f 0300 	mov.w	r3, #0
 8009d02:	00eb      	lsls	r3, r5, #3
 8009d04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009d08:	00e2      	lsls	r2, r4, #3
 8009d0a:	1dcb      	adds	r3, r1, #7
 8009d0c:	08db      	lsrs	r3, r3, #3
 8009d0e:	00db      	lsls	r3, r3, #3
 8009d10:	ebad 0d03 	sub.w	sp, sp, r3
 8009d14:	466b      	mov	r3, sp
 8009d16:	3300      	adds	r3, #0
 8009d18:	61bb      	str	r3, [r7, #24]
	for (uint32_t j = 0; j < Buffer_Size; j += 2)
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009d1e:	e00e      	b.n	8009d3e <_Z25ILI9341_Draw_Colour_Bursttm+0xb6>
		burst_buffer[j] = chifted;
 8009d20:	69ba      	ldr	r2, [r7, #24]
 8009d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d24:	4413      	add	r3, r2
 8009d26:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8009d2a:	701a      	strb	r2, [r3, #0]
		burst_buffer[j + 1] = Colour;
 8009d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d2e:	3301      	adds	r3, #1
 8009d30:	88fa      	ldrh	r2, [r7, #6]
 8009d32:	b2d1      	uxtb	r1, r2
 8009d34:	69ba      	ldr	r2, [r7, #24]
 8009d36:	54d1      	strb	r1, [r2, r3]
	for (uint32_t j = 0; j < Buffer_Size; j += 2)
 8009d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d3a:	3302      	adds	r3, #2
 8009d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009d3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d3ec      	bcc.n	8009d20 <_Z25ILI9341_Draw_Colour_Bursttm+0x98>
	uint32_t Sending_Size = Size * 2;
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	005b      	lsls	r3, r3, #1
 8009d4a:	617b      	str	r3, [r7, #20]
	uint32_t Sending_in_Block = Sending_Size / Buffer_Size;
 8009d4c:	697a      	ldr	r2, [r7, #20]
 8009d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d54:	613b      	str	r3, [r7, #16]
	uint32_t Remainder_from_block = Sending_Size % Buffer_Size;
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d60:	fb01 f202 	mul.w	r2, r1, r2
 8009d64:	1a9b      	subs	r3, r3, r2
 8009d66:	60fb      	str	r3, [r7, #12]
	if (Sending_in_Block != 0)
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d010      	beq.n	8009d90 <_Z25ILI9341_Draw_Colour_Bursttm+0x108>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 8009d6e:	2300      	movs	r3, #0
 8009d70:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d72:	e009      	b.n	8009d88 <_Z25ILI9341_Draw_Colour_Bursttm+0x100>
			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
 8009d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d76:	b29a      	uxth	r2, r3
 8009d78:	230a      	movs	r3, #10
 8009d7a:	69b9      	ldr	r1, [r7, #24]
 8009d7c:	480e      	ldr	r0, [pc, #56]	@ (8009db8 <_Z25ILI9341_Draw_Colour_Bursttm+0x130>)
 8009d7e:	f006 f8a0 	bl	800fec2 <HAL_SPI_Transmit>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 8009d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d84:	3301      	adds	r3, #1
 8009d86:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d3f1      	bcc.n	8009d74 <_Z25ILI9341_Draw_Colour_Bursttm+0xec>
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	b29a      	uxth	r2, r3
 8009d94:	230a      	movs	r3, #10
 8009d96:	69b9      	ldr	r1, [r7, #24]
 8009d98:	4807      	ldr	r0, [pc, #28]	@ (8009db8 <_Z25ILI9341_Draw_Colour_Bursttm+0x130>)
 8009d9a:	f006 f892 	bl	800fec2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8009d9e:	2201      	movs	r2, #1
 8009da0:	2101      	movs	r1, #1
 8009da2:	4804      	ldr	r0, [pc, #16]	@ (8009db4 <_Z25ILI9341_Draw_Colour_Bursttm+0x12c>)
 8009da4:	f004 fb56 	bl	800e454 <HAL_GPIO_WritePin>
 8009da8:	46b5      	mov	sp, r6
}
 8009daa:	bf00      	nop
 8009dac:	3734      	adds	r7, #52	@ 0x34
 8009dae:	46bd      	mov	sp, r7
 8009db0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009db4:	40020400 	.word	0x40020400
 8009db8:	2000055c 	.word	0x2000055c

08009dbc <_Z19ILI9341_Fill_Screent>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b082      	sub	sp, #8
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8009dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8009e00 <_Z19ILI9341_Fill_Screent+0x44>)
 8009dc8:	881b      	ldrh	r3, [r3, #0]
 8009dca:	b29a      	uxth	r2, r3
 8009dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8009e04 <_Z19ILI9341_Fill_Screent+0x48>)
 8009dce:	881b      	ldrh	r3, [r3, #0]
 8009dd0:	b29b      	uxth	r3, r3
 8009dd2:	2100      	movs	r1, #0
 8009dd4:	2000      	movs	r0, #0
 8009dd6:	f7ff fd83 	bl	80098e0 <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH * LCD_HEIGHT);
 8009dda:	4b09      	ldr	r3, [pc, #36]	@ (8009e00 <_Z19ILI9341_Fill_Screent+0x44>)
 8009ddc:	881b      	ldrh	r3, [r3, #0]
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	461a      	mov	r2, r3
 8009de2:	4b08      	ldr	r3, [pc, #32]	@ (8009e04 <_Z19ILI9341_Fill_Screent+0x48>)
 8009de4:	881b      	ldrh	r3, [r3, #0]
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	fb02 f303 	mul.w	r3, r2, r3
 8009dec:	461a      	mov	r2, r3
 8009dee:	88fb      	ldrh	r3, [r7, #6]
 8009df0:	4611      	mov	r1, r2
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7ff ff48 	bl	8009c88 <_Z25ILI9341_Draw_Colour_Bursttm>
}
 8009df8:	bf00      	nop
 8009dfa:	3708      	adds	r7, #8
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	20000002 	.word	0x20000002
 8009e04:	20000000 	.word	0x20000000

08009e08 <_Z18ILI9341_Draw_Pixelttt>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X, uint16_t Y, uint16_t Colour)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b086      	sub	sp, #24
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	4603      	mov	r3, r0
 8009e10:	80fb      	strh	r3, [r7, #6]
 8009e12:	460b      	mov	r3, r1
 8009e14:	80bb      	strh	r3, [r7, #4]
 8009e16:	4613      	mov	r3, r2
 8009e18:	807b      	strh	r3, [r7, #2]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 8009e1a:	4b5d      	ldr	r3, [pc, #372]	@ (8009f90 <_Z18ILI9341_Draw_Pixelttt+0x188>)
 8009e1c:	881b      	ldrh	r3, [r3, #0]
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	88fa      	ldrh	r2, [r7, #6]
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d205      	bcs.n	8009e32 <_Z18ILI9341_Draw_Pixelttt+0x2a>
 8009e26:	4b5b      	ldr	r3, [pc, #364]	@ (8009f94 <_Z18ILI9341_Draw_Pixelttt+0x18c>)
 8009e28:	881b      	ldrh	r3, [r3, #0]
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	88ba      	ldrh	r2, [r7, #4]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d301      	bcc.n	8009e36 <_Z18ILI9341_Draw_Pixelttt+0x2e>
 8009e32:	2301      	movs	r3, #1
 8009e34:	e000      	b.n	8009e38 <_Z18ILI9341_Draw_Pixelttt+0x30>
 8009e36:	2300      	movs	r3, #0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	f040 80a5 	bne.w	8009f88 <_Z18ILI9341_Draw_Pixelttt+0x180>
		return;	//OUT OF BOUNDS!

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8009e3e:	2200      	movs	r2, #0
 8009e40:	2102      	movs	r1, #2
 8009e42:	4855      	ldr	r0, [pc, #340]	@ (8009f98 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009e44:	f004 fb06 	bl	800e454 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8009e48:	2200      	movs	r2, #0
 8009e4a:	2101      	movs	r1, #1
 8009e4c:	4852      	ldr	r0, [pc, #328]	@ (8009f98 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009e4e:	f004 fb01 	bl	800e454 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2A);
 8009e52:	202a      	movs	r0, #42	@ 0x2a
 8009e54:	f7ff fcf6 	bl	8009844 <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8009e58:	2201      	movs	r2, #1
 8009e5a:	2102      	movs	r1, #2
 8009e5c:	484e      	ldr	r0, [pc, #312]	@ (8009f98 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009e5e:	f004 faf9 	bl	800e454 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8009e62:	2201      	movs	r2, #1
 8009e64:	2101      	movs	r1, #1
 8009e66:	484c      	ldr	r0, [pc, #304]	@ (8009f98 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009e68:	f004 faf4 	bl	800e454 <HAL_GPIO_WritePin>

//XDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	2101      	movs	r1, #1
 8009e70:	4849      	ldr	r0, [pc, #292]	@ (8009f98 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009e72:	f004 faef 	bl	800e454 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer[4] =	{(unsigned char) (X >> 8),(unsigned char) X, (unsigned char)((X + 1) >> 8),(unsigned char) (X + 1) };
 8009e76:	88fb      	ldrh	r3, [r7, #6]
 8009e78:	0a1b      	lsrs	r3, r3, #8
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	753b      	strb	r3, [r7, #20]
 8009e80:	88fb      	ldrh	r3, [r7, #6]
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	757b      	strb	r3, [r7, #21]
 8009e86:	88fb      	ldrh	r3, [r7, #6]
 8009e88:	3301      	adds	r3, #1
 8009e8a:	121b      	asrs	r3, r3, #8
 8009e8c:	b2db      	uxtb	r3, r3
 8009e8e:	75bb      	strb	r3, [r7, #22]
 8009e90:	88fb      	ldrh	r3, [r7, #6]
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	3301      	adds	r3, #1
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8009e9a:	f107 0114 	add.w	r1, r7, #20
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	2204      	movs	r2, #4
 8009ea2:	483e      	ldr	r0, [pc, #248]	@ (8009f9c <_Z18ILI9341_Draw_Pixelttt+0x194>)
 8009ea4:	f006 f80d 	bl	800fec2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	2101      	movs	r1, #1
 8009eac:	483a      	ldr	r0, [pc, #232]	@ (8009f98 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009eae:	f004 fad1 	bl	800e454 <HAL_GPIO_WritePin>

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	2102      	movs	r1, #2
 8009eb6:	4838      	ldr	r0, [pc, #224]	@ (8009f98 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009eb8:	f004 facc 	bl	800e454 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	2101      	movs	r1, #1
 8009ec0:	4835      	ldr	r0, [pc, #212]	@ (8009f98 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009ec2:	f004 fac7 	bl	800e454 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2B);
 8009ec6:	202b      	movs	r0, #43	@ 0x2b
 8009ec8:	f7ff fcbc 	bl	8009844 <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8009ecc:	2201      	movs	r2, #1
 8009ece:	2102      	movs	r1, #2
 8009ed0:	4831      	ldr	r0, [pc, #196]	@ (8009f98 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009ed2:	f004 fabf 	bl	800e454 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	2101      	movs	r1, #1
 8009eda:	482f      	ldr	r0, [pc, #188]	@ (8009f98 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009edc:	f004 faba 	bl	800e454 <HAL_GPIO_WritePin>

//YDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	2101      	movs	r1, #1
 8009ee4:	482c      	ldr	r0, [pc, #176]	@ (8009f98 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009ee6:	f004 fab5 	bl	800e454 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer1[4] =	{(unsigned char)( Y >> 8),(unsigned char) Y,(unsigned char)( (Y + 1) >> 8),(unsigned char) (Y + 1) };
 8009eea:	88bb      	ldrh	r3, [r7, #4]
 8009eec:	0a1b      	lsrs	r3, r3, #8
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	743b      	strb	r3, [r7, #16]
 8009ef4:	88bb      	ldrh	r3, [r7, #4]
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	747b      	strb	r3, [r7, #17]
 8009efa:	88bb      	ldrh	r3, [r7, #4]
 8009efc:	3301      	adds	r3, #1
 8009efe:	121b      	asrs	r3, r3, #8
 8009f00:	b2db      	uxtb	r3, r3
 8009f02:	74bb      	strb	r3, [r7, #18]
 8009f04:	88bb      	ldrh	r3, [r7, #4]
 8009f06:	b2db      	uxtb	r3, r3
 8009f08:	3301      	adds	r3, #1
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8009f0e:	f107 0110 	add.w	r1, r7, #16
 8009f12:	2301      	movs	r3, #1
 8009f14:	2204      	movs	r2, #4
 8009f16:	4821      	ldr	r0, [pc, #132]	@ (8009f9c <_Z18ILI9341_Draw_Pixelttt+0x194>)
 8009f18:	f005 ffd3 	bl	800fec2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	2101      	movs	r1, #1
 8009f20:	481d      	ldr	r0, [pc, #116]	@ (8009f98 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009f22:	f004 fa97 	bl	800e454 <HAL_GPIO_WritePin>

//ADDRESS	
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8009f26:	2200      	movs	r2, #0
 8009f28:	2102      	movs	r1, #2
 8009f2a:	481b      	ldr	r0, [pc, #108]	@ (8009f98 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009f2c:	f004 fa92 	bl	800e454 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8009f30:	2200      	movs	r2, #0
 8009f32:	2101      	movs	r1, #1
 8009f34:	4818      	ldr	r0, [pc, #96]	@ (8009f98 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009f36:	f004 fa8d 	bl	800e454 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8009f3a:	202c      	movs	r0, #44	@ 0x2c
 8009f3c:	f7ff fc82 	bl	8009844 <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8009f40:	2201      	movs	r2, #1
 8009f42:	2102      	movs	r1, #2
 8009f44:	4814      	ldr	r0, [pc, #80]	@ (8009f98 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009f46:	f004 fa85 	bl	800e454 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	2101      	movs	r1, #1
 8009f4e:	4812      	ldr	r0, [pc, #72]	@ (8009f98 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009f50:	f004 fa80 	bl	800e454 <HAL_GPIO_WritePin>

//COLOUR	
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8009f54:	2200      	movs	r2, #0
 8009f56:	2101      	movs	r1, #1
 8009f58:	480f      	ldr	r0, [pc, #60]	@ (8009f98 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009f5a:	f004 fa7b 	bl	800e454 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer2[2] =	{(unsigned char)( Colour >> 8),(unsigned char) Colour };
 8009f5e:	887b      	ldrh	r3, [r7, #2]
 8009f60:	0a1b      	lsrs	r3, r3, #8
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	733b      	strb	r3, [r7, #12]
 8009f68:	887b      	ldrh	r3, [r7, #2]
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8009f6e:	f107 010c 	add.w	r1, r7, #12
 8009f72:	2301      	movs	r3, #1
 8009f74:	2202      	movs	r2, #2
 8009f76:	4809      	ldr	r0, [pc, #36]	@ (8009f9c <_Z18ILI9341_Draw_Pixelttt+0x194>)
 8009f78:	f005 ffa3 	bl	800fec2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	2101      	movs	r1, #1
 8009f80:	4805      	ldr	r0, [pc, #20]	@ (8009f98 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009f82:	f004 fa67 	bl	800e454 <HAL_GPIO_WritePin>
 8009f86:	e000      	b.n	8009f8a <_Z18ILI9341_Draw_Pixelttt+0x182>
		return;	//OUT OF BOUNDS!
 8009f88:	bf00      	nop

}
 8009f8a:	3718      	adds	r7, #24
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	20000002 	.word	0x20000002
 8009f94:	20000000 	.word	0x20000000
 8009f98:	40020400 	.word	0x40020400
 8009f9c:	2000055c 	.word	0x2000055c

08009fa0 <_Z22ILI9341_Draw_Rectanglettttt>:
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width,
		uint16_t Height, uint16_t Colour)
{
 8009fa0:	b590      	push	{r4, r7, lr}
 8009fa2:	b083      	sub	sp, #12
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	4604      	mov	r4, r0
 8009fa8:	4608      	mov	r0, r1
 8009faa:	4611      	mov	r1, r2
 8009fac:	461a      	mov	r2, r3
 8009fae:	4623      	mov	r3, r4
 8009fb0:	80fb      	strh	r3, [r7, #6]
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	80bb      	strh	r3, [r7, #4]
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	807b      	strh	r3, [r7, #2]
 8009fba:	4613      	mov	r3, r2
 8009fbc:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 8009fbe:	4b2b      	ldr	r3, [pc, #172]	@ (800a06c <_Z22ILI9341_Draw_Rectanglettttt+0xcc>)
 8009fc0:	881b      	ldrh	r3, [r3, #0]
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	88fa      	ldrh	r2, [r7, #6]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d205      	bcs.n	8009fd6 <_Z22ILI9341_Draw_Rectanglettttt+0x36>
 8009fca:	4b29      	ldr	r3, [pc, #164]	@ (800a070 <_Z22ILI9341_Draw_Rectanglettttt+0xd0>)
 8009fcc:	881b      	ldrh	r3, [r3, #0]
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	88ba      	ldrh	r2, [r7, #4]
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d301      	bcc.n	8009fda <_Z22ILI9341_Draw_Rectanglettttt+0x3a>
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	e000      	b.n	8009fdc <_Z22ILI9341_Draw_Rectanglettttt+0x3c>
 8009fda:	2300      	movs	r3, #0
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d141      	bne.n	800a064 <_Z22ILI9341_Draw_Rectanglettttt+0xc4>
		return;
	if ((X + Width - 1) >= LCD_WIDTH)
 8009fe0:	88fa      	ldrh	r2, [r7, #6]
 8009fe2:	887b      	ldrh	r3, [r7, #2]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	4a21      	ldr	r2, [pc, #132]	@ (800a06c <_Z22ILI9341_Draw_Rectanglettttt+0xcc>)
 8009fe8:	8812      	ldrh	r2, [r2, #0]
 8009fea:	b292      	uxth	r2, r2
 8009fec:	4293      	cmp	r3, r2
 8009fee:	bfcc      	ite	gt
 8009ff0:	2301      	movgt	r3, #1
 8009ff2:	2300      	movle	r3, #0
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d005      	beq.n	800a006 <_Z22ILI9341_Draw_Rectanglettttt+0x66>
	{
		Width = LCD_WIDTH - X;
 8009ffa:	4b1c      	ldr	r3, [pc, #112]	@ (800a06c <_Z22ILI9341_Draw_Rectanglettttt+0xcc>)
 8009ffc:	881b      	ldrh	r3, [r3, #0]
 8009ffe:	b29a      	uxth	r2, r3
 800a000:	88fb      	ldrh	r3, [r7, #6]
 800a002:	1ad3      	subs	r3, r2, r3
 800a004:	807b      	strh	r3, [r7, #2]
	}
	if ((Y + Height - 1) >= LCD_HEIGHT)
 800a006:	88ba      	ldrh	r2, [r7, #4]
 800a008:	883b      	ldrh	r3, [r7, #0]
 800a00a:	4413      	add	r3, r2
 800a00c:	4a18      	ldr	r2, [pc, #96]	@ (800a070 <_Z22ILI9341_Draw_Rectanglettttt+0xd0>)
 800a00e:	8812      	ldrh	r2, [r2, #0]
 800a010:	b292      	uxth	r2, r2
 800a012:	4293      	cmp	r3, r2
 800a014:	bfcc      	ite	gt
 800a016:	2301      	movgt	r3, #1
 800a018:	2300      	movle	r3, #0
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d005      	beq.n	800a02c <_Z22ILI9341_Draw_Rectanglettttt+0x8c>
	{
		Height = LCD_HEIGHT - Y;
 800a020:	4b13      	ldr	r3, [pc, #76]	@ (800a070 <_Z22ILI9341_Draw_Rectanglettttt+0xd0>)
 800a022:	881b      	ldrh	r3, [r3, #0]
 800a024:	b29a      	uxth	r2, r3
 800a026:	88bb      	ldrh	r3, [r7, #4]
 800a028:	1ad3      	subs	r3, r2, r3
 800a02a:	803b      	strh	r3, [r7, #0]
	}
	ILI9341_Set_Address(X, Y, X + Width - 1, Y + Height - 1);
 800a02c:	88fa      	ldrh	r2, [r7, #6]
 800a02e:	887b      	ldrh	r3, [r7, #2]
 800a030:	4413      	add	r3, r2
 800a032:	b29b      	uxth	r3, r3
 800a034:	3b01      	subs	r3, #1
 800a036:	b29c      	uxth	r4, r3
 800a038:	88ba      	ldrh	r2, [r7, #4]
 800a03a:	883b      	ldrh	r3, [r7, #0]
 800a03c:	4413      	add	r3, r2
 800a03e:	b29b      	uxth	r3, r3
 800a040:	3b01      	subs	r3, #1
 800a042:	b29b      	uxth	r3, r3
 800a044:	88b9      	ldrh	r1, [r7, #4]
 800a046:	88f8      	ldrh	r0, [r7, #6]
 800a048:	4622      	mov	r2, r4
 800a04a:	f7ff fc49 	bl	80098e0 <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, Height * Width);
 800a04e:	883b      	ldrh	r3, [r7, #0]
 800a050:	887a      	ldrh	r2, [r7, #2]
 800a052:	fb02 f303 	mul.w	r3, r2, r3
 800a056:	461a      	mov	r2, r3
 800a058:	8b3b      	ldrh	r3, [r7, #24]
 800a05a:	4611      	mov	r1, r2
 800a05c:	4618      	mov	r0, r3
 800a05e:	f7ff fe13 	bl	8009c88 <_Z25ILI9341_Draw_Colour_Bursttm>
 800a062:	e000      	b.n	800a066 <_Z22ILI9341_Draw_Rectanglettttt+0xc6>
		return;
 800a064:	bf00      	nop
}
 800a066:	370c      	adds	r7, #12
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd90      	pop	{r4, r7, pc}
 800a06c:	20000002 	.word	0x20000002
 800a070:	20000000 	.word	0x20000000

0800a074 <_Z28ILI9341_Draw_Horizontal_Linetttt>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width,
		uint16_t Colour)
{
 800a074:	b590      	push	{r4, r7, lr}
 800a076:	b083      	sub	sp, #12
 800a078:	af00      	add	r7, sp, #0
 800a07a:	4604      	mov	r4, r0
 800a07c:	4608      	mov	r0, r1
 800a07e:	4611      	mov	r1, r2
 800a080:	461a      	mov	r2, r3
 800a082:	4623      	mov	r3, r4
 800a084:	80fb      	strh	r3, [r7, #6]
 800a086:	4603      	mov	r3, r0
 800a088:	80bb      	strh	r3, [r7, #4]
 800a08a:	460b      	mov	r3, r1
 800a08c:	807b      	strh	r3, [r7, #2]
 800a08e:	4613      	mov	r3, r2
 800a090:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 800a092:	4b1d      	ldr	r3, [pc, #116]	@ (800a108 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x94>)
 800a094:	881b      	ldrh	r3, [r3, #0]
 800a096:	b29b      	uxth	r3, r3
 800a098:	88fa      	ldrh	r2, [r7, #6]
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d205      	bcs.n	800a0aa <_Z28ILI9341_Draw_Horizontal_Linetttt+0x36>
 800a09e:	4b1b      	ldr	r3, [pc, #108]	@ (800a10c <_Z28ILI9341_Draw_Horizontal_Linetttt+0x98>)
 800a0a0:	881b      	ldrh	r3, [r3, #0]
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	88ba      	ldrh	r2, [r7, #4]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d301      	bcc.n	800a0ae <_Z28ILI9341_Draw_Horizontal_Linetttt+0x3a>
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e000      	b.n	800a0b0 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x3c>
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d124      	bne.n	800a0fe <_Z28ILI9341_Draw_Horizontal_Linetttt+0x8a>
		return;
	if ((X + Width - 1) >= LCD_WIDTH)
 800a0b4:	88fa      	ldrh	r2, [r7, #6]
 800a0b6:	887b      	ldrh	r3, [r7, #2]
 800a0b8:	4413      	add	r3, r2
 800a0ba:	4a13      	ldr	r2, [pc, #76]	@ (800a108 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x94>)
 800a0bc:	8812      	ldrh	r2, [r2, #0]
 800a0be:	b292      	uxth	r2, r2
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	bfcc      	ite	gt
 800a0c4:	2301      	movgt	r3, #1
 800a0c6:	2300      	movle	r3, #0
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d005      	beq.n	800a0da <_Z28ILI9341_Draw_Horizontal_Linetttt+0x66>
	{
		Width = LCD_WIDTH - X;
 800a0ce:	4b0e      	ldr	r3, [pc, #56]	@ (800a108 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x94>)
 800a0d0:	881b      	ldrh	r3, [r3, #0]
 800a0d2:	b29a      	uxth	r2, r3
 800a0d4:	88fb      	ldrh	r3, [r7, #6]
 800a0d6:	1ad3      	subs	r3, r2, r3
 800a0d8:	807b      	strh	r3, [r7, #2]
	}
	ILI9341_Set_Address(X, Y, X + Width - 1, Y);
 800a0da:	88fa      	ldrh	r2, [r7, #6]
 800a0dc:	887b      	ldrh	r3, [r7, #2]
 800a0de:	4413      	add	r3, r2
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	3b01      	subs	r3, #1
 800a0e4:	b29a      	uxth	r2, r3
 800a0e6:	88bb      	ldrh	r3, [r7, #4]
 800a0e8:	88b9      	ldrh	r1, [r7, #4]
 800a0ea:	88f8      	ldrh	r0, [r7, #6]
 800a0ec:	f7ff fbf8 	bl	80098e0 <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, Width);
 800a0f0:	887a      	ldrh	r2, [r7, #2]
 800a0f2:	883b      	ldrh	r3, [r7, #0]
 800a0f4:	4611      	mov	r1, r2
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7ff fdc6 	bl	8009c88 <_Z25ILI9341_Draw_Colour_Bursttm>
 800a0fc:	e000      	b.n	800a100 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x8c>
		return;
 800a0fe:	bf00      	nop
}
 800a100:	370c      	adds	r7, #12
 800a102:	46bd      	mov	sp, r7
 800a104:	bd90      	pop	{r4, r7, pc}
 800a106:	bf00      	nop
 800a108:	20000002 	.word	0x20000002
 800a10c:	20000000 	.word	0x20000000

0800a110 <_Z26ILI9341_Draw_Vertical_Linetttt>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height,
		uint16_t Colour)
{
 800a110:	b590      	push	{r4, r7, lr}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	4604      	mov	r4, r0
 800a118:	4608      	mov	r0, r1
 800a11a:	4611      	mov	r1, r2
 800a11c:	461a      	mov	r2, r3
 800a11e:	4623      	mov	r3, r4
 800a120:	80fb      	strh	r3, [r7, #6]
 800a122:	4603      	mov	r3, r0
 800a124:	80bb      	strh	r3, [r7, #4]
 800a126:	460b      	mov	r3, r1
 800a128:	807b      	strh	r3, [r7, #2]
 800a12a:	4613      	mov	r3, r2
 800a12c:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 800a12e:	4b1d      	ldr	r3, [pc, #116]	@ (800a1a4 <_Z26ILI9341_Draw_Vertical_Linetttt+0x94>)
 800a130:	881b      	ldrh	r3, [r3, #0]
 800a132:	b29b      	uxth	r3, r3
 800a134:	88fa      	ldrh	r2, [r7, #6]
 800a136:	429a      	cmp	r2, r3
 800a138:	d205      	bcs.n	800a146 <_Z26ILI9341_Draw_Vertical_Linetttt+0x36>
 800a13a:	4b1b      	ldr	r3, [pc, #108]	@ (800a1a8 <_Z26ILI9341_Draw_Vertical_Linetttt+0x98>)
 800a13c:	881b      	ldrh	r3, [r3, #0]
 800a13e:	b29b      	uxth	r3, r3
 800a140:	88ba      	ldrh	r2, [r7, #4]
 800a142:	429a      	cmp	r2, r3
 800a144:	d301      	bcc.n	800a14a <_Z26ILI9341_Draw_Vertical_Linetttt+0x3a>
 800a146:	2301      	movs	r3, #1
 800a148:	e000      	b.n	800a14c <_Z26ILI9341_Draw_Vertical_Linetttt+0x3c>
 800a14a:	2300      	movs	r3, #0
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d124      	bne.n	800a19a <_Z26ILI9341_Draw_Vertical_Linetttt+0x8a>
		return;
	if ((Y + Height - 1) >= LCD_HEIGHT)
 800a150:	88ba      	ldrh	r2, [r7, #4]
 800a152:	887b      	ldrh	r3, [r7, #2]
 800a154:	4413      	add	r3, r2
 800a156:	4a14      	ldr	r2, [pc, #80]	@ (800a1a8 <_Z26ILI9341_Draw_Vertical_Linetttt+0x98>)
 800a158:	8812      	ldrh	r2, [r2, #0]
 800a15a:	b292      	uxth	r2, r2
 800a15c:	4293      	cmp	r3, r2
 800a15e:	bfcc      	ite	gt
 800a160:	2301      	movgt	r3, #1
 800a162:	2300      	movle	r3, #0
 800a164:	b2db      	uxtb	r3, r3
 800a166:	2b00      	cmp	r3, #0
 800a168:	d005      	beq.n	800a176 <_Z26ILI9341_Draw_Vertical_Linetttt+0x66>
	{
		Height = LCD_HEIGHT - Y;
 800a16a:	4b0f      	ldr	r3, [pc, #60]	@ (800a1a8 <_Z26ILI9341_Draw_Vertical_Linetttt+0x98>)
 800a16c:	881b      	ldrh	r3, [r3, #0]
 800a16e:	b29a      	uxth	r2, r3
 800a170:	88bb      	ldrh	r3, [r7, #4]
 800a172:	1ad3      	subs	r3, r2, r3
 800a174:	807b      	strh	r3, [r7, #2]
	}
	ILI9341_Set_Address(X, Y, X, Y + Height - 1);
 800a176:	88ba      	ldrh	r2, [r7, #4]
 800a178:	887b      	ldrh	r3, [r7, #2]
 800a17a:	4413      	add	r3, r2
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	3b01      	subs	r3, #1
 800a180:	b29b      	uxth	r3, r3
 800a182:	88fa      	ldrh	r2, [r7, #6]
 800a184:	88b9      	ldrh	r1, [r7, #4]
 800a186:	88f8      	ldrh	r0, [r7, #6]
 800a188:	f7ff fbaa 	bl	80098e0 <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, Height);
 800a18c:	887a      	ldrh	r2, [r7, #2]
 800a18e:	883b      	ldrh	r3, [r7, #0]
 800a190:	4611      	mov	r1, r2
 800a192:	4618      	mov	r0, r3
 800a194:	f7ff fd78 	bl	8009c88 <_Z25ILI9341_Draw_Colour_Bursttm>
 800a198:	e000      	b.n	800a19c <_Z26ILI9341_Draw_Vertical_Linetttt+0x8c>
		return;
 800a19a:	bf00      	nop
}
 800a19c:	370c      	adds	r7, #12
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd90      	pop	{r4, r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	20000002 	.word	0x20000002
 800a1a8:	20000000 	.word	0x20000000

0800a1ac <_ZN19CManejadorControlesC1Ev>:

#include <ManejadorControles/CManejadorControles.hpp>
#include "Constantes.hpp"
#include "Uart/Uart.hpp"

CManejadorControles::CManejadorControles()
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b086      	sub	sp, #24
 800a1b0:	af04      	add	r7, sp, #16
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7f6 ff9e 	bl	80010f8 <_ZN22CManejadorEventosBotonC1Ev>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	3304      	adds	r3, #4
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f7f7 fe93 	bl	8001eec <_ZN24CManejadorEventosEncoderC1Ev>
 800a1c6:	4a52      	ldr	r2, [pc, #328]	@ (800a310 <_ZN19CManejadorControlesC1Ev+0x164>)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	601a      	str	r2, [r3, #0]
 800a1cc:	4a51      	ldr	r2, [pc, #324]	@ (800a314 <_ZN19CManejadorControlesC1Ev+0x168>)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	605a      	str	r2, [r3, #4]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	609a      	str	r2, [r3, #8]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	330c      	adds	r3, #12
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7f6 feb3 	bl	8000f48 <_ZN15CManejadorBotonC1Ev>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	332c      	adds	r3, #44	@ 0x2c
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7f6 feae 	bl	8000f48 <_ZN15CManejadorBotonC1Ev>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	334c      	adds	r3, #76	@ 0x4c
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f7f6 fea9 	bl	8000f48 <_ZN15CManejadorBotonC1Ev>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	336c      	adds	r3, #108	@ 0x6c
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f7f6 fea4 	bl	8000f48 <_ZN15CManejadorBotonC1Ev>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	338c      	adds	r3, #140	@ 0x8c
 800a204:	4618      	mov	r0, r3
 800a206:	f7f7 fce5 	bl	8001bd4 <_ZN8CEncoderC1Ev>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	33e0      	adds	r3, #224	@ 0xe0
 800a20e:	4618      	mov	r0, r3
 800a210:	f7f7 f840 	bl	8001294 <_ZN20ControlVelocidadAireC1Ev>
{
	// TODO Auto-generated constructor stub
	//configuracion de los botones
	BotonMemoria1.Configurar(GPIOC, GPIO_PIN_13, 1);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f103 000c 	add.w	r0, r3, #12
 800a21a:	2301      	movs	r3, #1
 800a21c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800a220:	493d      	ldr	r1, [pc, #244]	@ (800a318 <_ZN19CManejadorControlesC1Ev+0x16c>)
 800a222:	f7f6 fed1 	bl	8000fc8 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonMemoria1.AsignaManejadorEventos(this);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	330c      	adds	r3, #12
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	4611      	mov	r1, r2
 800a22e:	4618      	mov	r0, r3
 800a230:	f7f6 ff14 	bl	800105c <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonMemoria1.Init();
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	330c      	adds	r3, #12
 800a238:	4618      	mov	r0, r3
 800a23a:	f7f6 fedf 	bl	8000ffc <_ZN15CManejadorBoton4InitEv>

	BotonMemoria2.Configurar(GPIOA, GPIO_PIN_6, 2);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f103 002c 	add.w	r0, r3, #44	@ 0x2c
 800a244:	2302      	movs	r3, #2
 800a246:	2240      	movs	r2, #64	@ 0x40
 800a248:	4934      	ldr	r1, [pc, #208]	@ (800a31c <_ZN19CManejadorControlesC1Ev+0x170>)
 800a24a:	f7f6 febd 	bl	8000fc8 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonMemoria2.AsignaManejadorEventos(this);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	332c      	adds	r3, #44	@ 0x2c
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	4611      	mov	r1, r2
 800a256:	4618      	mov	r0, r3
 800a258:	f7f6 ff00 	bl	800105c <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonMemoria2.Init();
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	332c      	adds	r3, #44	@ 0x2c
 800a260:	4618      	mov	r0, r3
 800a262:	f7f6 fecb 	bl	8000ffc <_ZN15CManejadorBoton4InitEv>

	BotonMemoria3.Configurar(GPIOB, GPIO_PIN_10, 3);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 800a26c:	2303      	movs	r3, #3
 800a26e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a272:	492b      	ldr	r1, [pc, #172]	@ (800a320 <_ZN19CManejadorControlesC1Ev+0x174>)
 800a274:	f7f6 fea8 	bl	8000fc8 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonMemoria3.AsignaManejadorEventos(this);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	334c      	adds	r3, #76	@ 0x4c
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	4611      	mov	r1, r2
 800a280:	4618      	mov	r0, r3
 800a282:	f7f6 feeb 	bl	800105c <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonMemoria3.Init();
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	334c      	adds	r3, #76	@ 0x4c
 800a28a:	4618      	mov	r0, r3
 800a28c:	f7f6 feb6 	bl	8000ffc <_ZN15CManejadorBoton4InitEv>

	BotonManual.Configurar(GPIOB, GPIO_PIN_15, 4);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 800a296:	2304      	movs	r3, #4
 800a298:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800a29c:	4920      	ldr	r1, [pc, #128]	@ (800a320 <_ZN19CManejadorControlesC1Ev+0x174>)
 800a29e:	f7f6 fe93 	bl	8000fc8 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonManual.AsignaManejadorEventos(this);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	336c      	adds	r3, #108	@ 0x6c
 800a2a6:	687a      	ldr	r2, [r7, #4]
 800a2a8:	4611      	mov	r1, r2
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7f6 fed6 	bl	800105c <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonManual.Init();
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	336c      	adds	r3, #108	@ 0x6c
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f7f6 fea1 	bl	8000ffc <_ZN15CManejadorBoton4InitEv>

	Encoder.Configurar(GPIOB, GPIO_PIN_2, GPIOB, GPIO_PIN_12, GPIOB,
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f103 008c 	add.w	r0, r3, #140	@ 0x8c
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	9303      	str	r3, [sp, #12]
 800a2c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a2c8:	9302      	str	r3, [sp, #8]
 800a2ca:	4b15      	ldr	r3, [pc, #84]	@ (800a320 <_ZN19CManejadorControlesC1Ev+0x174>)
 800a2cc:	9301      	str	r3, [sp, #4]
 800a2ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a2d2:	9300      	str	r3, [sp, #0]
 800a2d4:	4b12      	ldr	r3, [pc, #72]	@ (800a320 <_ZN19CManejadorControlesC1Ev+0x174>)
 800a2d6:	2204      	movs	r2, #4
 800a2d8:	4911      	ldr	r1, [pc, #68]	@ (800a320 <_ZN19CManejadorControlesC1Ev+0x174>)
 800a2da:	f7f7 fcc5 	bl	8001c68 <_ZN8CEncoder10ConfigurarEP12GPIO_TypeDeftS1_tS1_ti>
			GPIO_PIN_8, 1);
	Encoder.AsignaManejadorEventos(this);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f103 028c 	add.w	r2, r3, #140	@ 0x8c
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	3304      	adds	r3, #4
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	4610      	mov	r0, r2
 800a2ec:	f7f7 fd5d 	bl	8001daa <_ZN8CEncoder22AsignaManejadorEventosEP24CManejadorEventosEncoder>
	Encoder.Init();
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	338c      	adds	r3, #140	@ 0x8c
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f7f7 fd1a 	bl	8001d2e <_ZN8CEncoder4InitEv>

	controlVelocidadAire.Inicializa();
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	33e0      	adds	r3, #224	@ 0xe0
 800a2fe:	4618      	mov	r0, r3
 800a300:	f7f6 fff8 	bl	80012f4 <_ZN20ControlVelocidadAire10InicializaEv>

}
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	4618      	mov	r0, r3
 800a308:	3708      	adds	r7, #8
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	080160a8 	.word	0x080160a8
 800a314:	080160f0 	.word	0x080160f0
 800a318:	40020800 	.word	0x40020800
 800a31c:	40020000 	.word	0x40020000
 800a320:	40020400 	.word	0x40020400

0800a324 <_ZN19CManejadorControlesD1Ev>:

CManejadorControles::~CManejadorControles()
 800a324:	b580      	push	{r7, lr}
 800a326:	b082      	sub	sp, #8
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	4a18      	ldr	r2, [pc, #96]	@ (800a390 <_ZN19CManejadorControlesD1Ev+0x6c>)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	601a      	str	r2, [r3, #0]
 800a332:	4a18      	ldr	r2, [pc, #96]	@ (800a394 <_ZN19CManejadorControlesD1Ev+0x70>)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	605a      	str	r2, [r3, #4]
{
	// TODO Auto-generated destructor stub
}
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	33e0      	adds	r3, #224	@ 0xe0
 800a33c:	4618      	mov	r0, r3
 800a33e:	f7f6 ffb9 	bl	80012b4 <_ZN20ControlVelocidadAireD1Ev>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	338c      	adds	r3, #140	@ 0x8c
 800a346:	4618      	mov	r0, r3
 800a348:	f7f7 fc6c 	bl	8001c24 <_ZN8CEncoderD1Ev>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	336c      	adds	r3, #108	@ 0x6c
 800a350:	4618      	mov	r0, r3
 800a352:	f7f6 fe19 	bl	8000f88 <_ZN15CManejadorBotonD1Ev>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	334c      	adds	r3, #76	@ 0x4c
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7f6 fe14 	bl	8000f88 <_ZN15CManejadorBotonD1Ev>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	332c      	adds	r3, #44	@ 0x2c
 800a364:	4618      	mov	r0, r3
 800a366:	f7f6 fe0f 	bl	8000f88 <_ZN15CManejadorBotonD1Ev>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	330c      	adds	r3, #12
 800a36e:	4618      	mov	r0, r3
 800a370:	f7f6 fe0a 	bl	8000f88 <_ZN15CManejadorBotonD1Ev>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	3304      	adds	r3, #4
 800a378:	4618      	mov	r0, r3
 800a37a:	f7f7 fdc7 	bl	8001f0c <_ZN24CManejadorEventosEncoderD1Ev>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	4618      	mov	r0, r3
 800a382:	f7f6 fec9 	bl	8001118 <_ZN22CManejadorEventosBotonD1Ev>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	4618      	mov	r0, r3
 800a38a:	3708      	adds	r7, #8
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}
 800a390:	080160a8 	.word	0x080160a8
 800a394:	080160f0 	.word	0x080160f0

0800a398 <_ZThn4_N19CManejadorControlesD1Ev>:
	virtual void EncoderDecremento();


public:
	CManejadorControles();
	virtual ~CManejadorControles();
 800a398:	f1a0 0004 	sub.w	r0, r0, #4
 800a39c:	f7ff bfc2 	b.w	800a324 <_ZN19CManejadorControlesD1Ev>

0800a3a0 <_ZN19CManejadorControlesD0Ev>:
CManejadorControles::~CManejadorControles()
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
}
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f7ff ffbb 	bl	800a324 <_ZN19CManejadorControlesD1Ev>
 800a3ae:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f007 fb6a 	bl	8011a8c <_ZdlPvj>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3708      	adds	r7, #8
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}

0800a3c2 <_ZThn4_N19CManejadorControlesD0Ev>:
 800a3c2:	f1a0 0004 	sub.w	r0, r0, #4
 800a3c6:	f7ff bfeb 	b.w	800a3a0 <_ZN19CManejadorControlesD0Ev>

0800a3ca <_ZN19CManejadorControles17GPIO_INTERRUPCIONEi>:

void CManejadorControles::GPIO_INTERRUPCION(int GPIO_Pin)
{
 800a3ca:	b580      	push	{r7, lr}
 800a3cc:	b082      	sub	sp, #8
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
 800a3d2:	6039      	str	r1, [r7, #0]
	ProcesaBotones(GPIO_Pin);
 800a3d4:	6839      	ldr	r1, [r7, #0]
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 f80b 	bl	800a3f2 <_ZN19CManejadorControles14ProcesaBotonesEi>
	InterrupcionEncoder(GPIO_Pin);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	3338      	adds	r3, #56	@ 0x38
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	6839      	ldr	r1, [r7, #0]
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	4798      	blx	r3
}
 800a3ea:	bf00      	nop
 800a3ec:	3708      	adds	r7, #8
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}

0800a3f2 <_ZN19CManejadorControles14ProcesaBotonesEi>:

void CManejadorControles::ProcesaBotones(int gpio_pin)
{
 800a3f2:	b580      	push	{r7, lr}
 800a3f4:	b082      	sub	sp, #8
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
 800a3fa:	6039      	str	r1, [r7, #0]
	BotonMemoria1.Procesa(gpio_pin);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	330c      	adds	r3, #12
 800a400:	6839      	ldr	r1, [r7, #0]
 800a402:	4618      	mov	r0, r3
 800a404:	f7f6 fe38 	bl	8001078 <_ZN15CManejadorBoton7ProcesaEi>
	BotonMemoria2.Procesa(gpio_pin);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	332c      	adds	r3, #44	@ 0x2c
 800a40c:	6839      	ldr	r1, [r7, #0]
 800a40e:	4618      	mov	r0, r3
 800a410:	f7f6 fe32 	bl	8001078 <_ZN15CManejadorBoton7ProcesaEi>
	BotonMemoria3.Procesa(gpio_pin);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	334c      	adds	r3, #76	@ 0x4c
 800a418:	6839      	ldr	r1, [r7, #0]
 800a41a:	4618      	mov	r0, r3
 800a41c:	f7f6 fe2c 	bl	8001078 <_ZN15CManejadorBoton7ProcesaEi>
///	SerialPrintf("\r\n ProcesaBotones");

	BotonManual.Procesa(gpio_pin);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	336c      	adds	r3, #108	@ 0x6c
 800a424:	6839      	ldr	r1, [r7, #0]
 800a426:	4618      	mov	r0, r3
 800a428:	f7f6 fe26 	bl	8001078 <_ZN15CManejadorBoton7ProcesaEi>
}
 800a42c:	bf00      	nop
 800a42e:	3708      	adds	r7, #8
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <_ZN19CManejadorControles19InterrupcionEncoderEi>:
void CManejadorControles::InterrupcionEncoder(int GPIO_Pin)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
	Encoder.Procesa(GPIO_Pin);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	338c      	adds	r3, #140	@ 0x8c
 800a442:	6839      	ldr	r1, [r7, #0]
 800a444:	4618      	mov	r0, r3
 800a446:	f7f7 fcd6 	bl	8001df6 <_ZN8CEncoder7ProcesaEi>
}
 800a44a:	bf00      	nop
 800a44c:	3708      	adds	r7, #8
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}

0800a452 <_ZN19CManejadorControles12GetNivelAireEv>:

//regresa el nivel de aire setado
int CManejadorControles::GetNivelAire()
{
 800a452:	b580      	push	{r7, lr}
 800a454:	b082      	sub	sp, #8
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
	return controlVelocidadAire.LeeVelocidad();
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	33e0      	adds	r3, #224	@ 0xe0
 800a45e:	4618      	mov	r0, r3
 800a460:	f7f6 ffc2 	bl	80013e8 <_ZN20ControlVelocidadAire12LeeVelocidadEv>
 800a464:	4603      	mov	r3, r0
}
 800a466:	4618      	mov	r0, r3
 800a468:	3708      	adds	r7, #8
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}

0800a46e <_ZN19CManejadorControles18BotonUnoClickEventEv>:

//eventros del boton uno
void CManejadorControles::BotonUnoClickEvent()
{
 800a46e:	b580      	push	{r7, lr}
 800a470:	b082      	sub	sp, #8
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	689b      	ldr	r3, [r3, #8]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d009      	beq.n	800a492 <_ZN19CManejadorControles18BotonUnoClickEventEv+0x24>
		return;
	ManejadorControles->OnBotonUnoClickEvent();
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	689a      	ldr	r2, [r3, #8]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	689b      	ldr	r3, [r3, #8]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	3310      	adds	r3, #16
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4610      	mov	r0, r2
 800a48e:	4798      	blx	r3
 800a490:	e000      	b.n	800a494 <_ZN19CManejadorControles18BotonUnoClickEventEv+0x26>
		return;
 800a492:	bf00      	nop

}
 800a494:	3708      	adds	r7, #8
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <_ZN19CManejadorControles18BotonDosClickEventEv>:
//eventros del boton dos
void CManejadorControles::BotonDosClickEvent()
{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b082      	sub	sp, #8
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	689b      	ldr	r3, [r3, #8]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d009      	beq.n	800a4be <_ZN19CManejadorControles18BotonDosClickEventEv+0x24>
		return;
	ManejadorControles->OnBotonDosClickEvent();
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	689a      	ldr	r2, [r3, #8]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	689b      	ldr	r3, [r3, #8]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	3314      	adds	r3, #20
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4610      	mov	r0, r2
 800a4ba:	4798      	blx	r3
 800a4bc:	e000      	b.n	800a4c0 <_ZN19CManejadorControles18BotonDosClickEventEv+0x26>
		return;
 800a4be:	bf00      	nop

}
 800a4c0:	3708      	adds	r7, #8
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <_ZN19CManejadorControles19BotonTresClickEventEv>:
//eventros del boton tres
void CManejadorControles::BotonTresClickEvent()
{
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b082      	sub	sp, #8
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	689b      	ldr	r3, [r3, #8]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d009      	beq.n	800a4ea <_ZN19CManejadorControles19BotonTresClickEventEv+0x24>
		return;
	ManejadorControles->OnBotonTresClickEvent();
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	689a      	ldr	r2, [r3, #8]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	689b      	ldr	r3, [r3, #8]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	3318      	adds	r3, #24
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4610      	mov	r0, r2
 800a4e6:	4798      	blx	r3
 800a4e8:	e000      	b.n	800a4ec <_ZN19CManejadorControles19BotonTresClickEventEv+0x26>
		return;
 800a4ea:	bf00      	nop

}
 800a4ec:	3708      	adds	r7, #8
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <_ZN19CManejadorControles21BotonCuatroClickEventEv>:
//eventros del boton Cuatro
void CManejadorControles::BotonCuatroClickEvent()
{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b082      	sub	sp, #8
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	689b      	ldr	r3, [r3, #8]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d009      	beq.n	800a516 <_ZN19CManejadorControles21BotonCuatroClickEventEv+0x24>
		return;
	ManejadorControles->OnBotonCuatroClickEvent();
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	689a      	ldr	r2, [r3, #8]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	689b      	ldr	r3, [r3, #8]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	331c      	adds	r3, #28
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4610      	mov	r0, r2
 800a512:	4798      	blx	r3
 800a514:	e000      	b.n	800a518 <_ZN19CManejadorControles21BotonCuatroClickEventEv+0x26>
		return;
 800a516:	bf00      	nop

}
 800a518:	3708      	adds	r7, #8
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}

0800a51e <_ZN19CManejadorControles22BotonPerillaClickEventEv>:
//eventros del boton Perilla
void CManejadorControles::BotonPerillaClickEvent()
{
 800a51e:	b580      	push	{r7, lr}
 800a520:	b082      	sub	sp, #8
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	689b      	ldr	r3, [r3, #8]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d009      	beq.n	800a542 <_ZN19CManejadorControles22BotonPerillaClickEventEv+0x24>
		return;
	ManejadorControles->OnBotonPerillaClickEvent();
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	689a      	ldr	r2, [r3, #8]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	689b      	ldr	r3, [r3, #8]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	3320      	adds	r3, #32
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4610      	mov	r0, r2
 800a53e:	4798      	blx	r3
 800a540:	e000      	b.n	800a544 <_ZN19CManejadorControles22BotonPerillaClickEventEv+0x26>
		return;
 800a542:	bf00      	nop

}
 800a544:	3708      	adds	r7, #8
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}

0800a54a <_ZN19CManejadorControles17EncoderIncrementoEv>:
//eventos del encoder
void CManejadorControles::EncoderIncremento()
{
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b082      	sub	sp, #8
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	689b      	ldr	r3, [r3, #8]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d009      	beq.n	800a56e <_ZN19CManejadorControles17EncoderIncrementoEv+0x24>
		return;
	ManejadorControles->OnPerillaIncremento();
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	689a      	ldr	r2, [r3, #8]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	689b      	ldr	r3, [r3, #8]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	3324      	adds	r3, #36	@ 0x24
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4610      	mov	r0, r2
 800a56a:	4798      	blx	r3
 800a56c:	e000      	b.n	800a570 <_ZN19CManejadorControles17EncoderIncrementoEv+0x26>
		return;
 800a56e:	bf00      	nop

}
 800a570:	3708      	adds	r7, #8
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}

0800a576 <_ZN19CManejadorControles17EncoderDecrementoEv>:
void CManejadorControles::EncoderDecremento()
{
 800a576:	b580      	push	{r7, lr}
 800a578:	b082      	sub	sp, #8
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d009      	beq.n	800a59a <_ZN19CManejadorControles17EncoderDecrementoEv+0x24>
		return;
	ManejadorControles->OnPerillaDecremento();
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	689a      	ldr	r2, [r3, #8]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	689b      	ldr	r3, [r3, #8]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	3328      	adds	r3, #40	@ 0x28
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4610      	mov	r0, r2
 800a596:	4798      	blx	r3
 800a598:	e000      	b.n	800a59c <_ZN19CManejadorControles17EncoderDecrementoEv+0x26>
		return;
 800a59a:	bf00      	nop

}
 800a59c:	3708      	adds	r7, #8
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
	...

0800a5a4 <_ZN19CManejadorControles17OnBotonClickEventEi>:

void CManejadorControles::OnBotonClickEvent(int idBoton)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	6039      	str	r1, [r7, #0]
	switch (idBoton)
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	2b03      	cmp	r3, #3
 800a5b4:	d826      	bhi.n	800a604 <_ZN19CManejadorControles17OnBotonClickEventEi+0x60>
 800a5b6:	a201      	add	r2, pc, #4	@ (adr r2, 800a5bc <_ZN19CManejadorControles17OnBotonClickEventEi+0x18>)
 800a5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5bc:	0800a5cd 	.word	0x0800a5cd
 800a5c0:	0800a5db 	.word	0x0800a5db
 800a5c4:	0800a5e9 	.word	0x0800a5e9
 800a5c8:	0800a5f7 	.word	0x0800a5f7
	{
	case BOTON_MEMORIA1:
		BotonUnoClickEvent();
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	3318      	adds	r3, #24
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	4798      	blx	r3
		break;
 800a5d8:	e014      	b.n	800a604 <_ZN19CManejadorControles17OnBotonClickEventEi+0x60>
	case BOTON_MEMORIA2:
		BotonDosClickEvent();
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	331c      	adds	r3, #28
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	4798      	blx	r3
		break;
 800a5e6:	e00d      	b.n	800a604 <_ZN19CManejadorControles17OnBotonClickEventEi+0x60>
	case BOTON_MEMORIA3:
		BotonTresClickEvent();
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	3320      	adds	r3, #32
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	4798      	blx	r3
		break;
 800a5f4:	e006      	b.n	800a604 <_ZN19CManejadorControles17OnBotonClickEventEi+0x60>
	case BOTON_MANUAL:
		BotonCuatroClickEvent();
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	3324      	adds	r3, #36	@ 0x24
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	4798      	blx	r3
		break;
 800a602:	bf00      	nop
	}
}
 800a604:	bf00      	nop
 800a606:	3708      	adds	r7, #8
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <_ZN19CManejadorControles19OnIncrementoEncoderEi>:


//eventros del encoder
void CManejadorControles::OnIncrementoEncoder(int id_Encoder)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b082      	sub	sp, #8
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
	EncoderIncremento();
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	332c      	adds	r3, #44	@ 0x2c
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	4798      	blx	r3
}
 800a622:	bf00      	nop
 800a624:	3708      	adds	r7, #8
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}

0800a62a <_ZThn4_N19CManejadorControles19OnIncrementoEncoderEi>:
	virtual void OnIncrementoEncoder(int id_Encoder);
 800a62a:	f1a0 0004 	sub.w	r0, r0, #4
 800a62e:	f7ff bfed 	b.w	800a60c <_ZN19CManejadorControles19OnIncrementoEncoderEi>

0800a632 <_ZN19CManejadorControles19OnDecrementoEncoderEi>:

void CManejadorControles::OnDecrementoEncoder(int id_Encoder)
{
 800a632:	b580      	push	{r7, lr}
 800a634:	b082      	sub	sp, #8
 800a636:	af00      	add	r7, sp, #0
 800a638:	6078      	str	r0, [r7, #4]
 800a63a:	6039      	str	r1, [r7, #0]
	EncoderDecremento();
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	3330      	adds	r3, #48	@ 0x30
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	4798      	blx	r3
}
 800a648:	bf00      	nop
 800a64a:	3708      	adds	r7, #8
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <_ZThn4_N19CManejadorControles19OnDecrementoEncoderEi>:
	virtual void OnDecrementoEncoder(int id_Encoder);
 800a650:	f1a0 0004 	sub.w	r0, r0, #4
 800a654:	f7ff bfed 	b.w	800a632 <_ZN19CManejadorControles19OnDecrementoEncoderEi>

0800a658 <_ZN19CManejadorControles24OnBotonEncoderClickEventEi>:

void CManejadorControles::OnBotonEncoderClickEvent(int id_Encoder )
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b082      	sub	sp, #8
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
	BotonPerillaClickEvent();
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	3328      	adds	r3, #40	@ 0x28
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	4798      	blx	r3
}
 800a66e:	bf00      	nop
 800a670:	3708      	adds	r7, #8
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}

0800a676 <_ZThn4_N19CManejadorControles24OnBotonEncoderClickEventEi>:
	virtual void OnBotonEncoderClickEvent(int id_Encoder);
 800a676:	f1a0 0004 	sub.w	r0, r0, #4
 800a67a:	f7ff bfed 	b.w	800a658 <_ZN19CManejadorControles24OnBotonEncoderClickEventEi>

0800a67e <_ZN19CManejadorControles21SetManejadorControlesEP26CManejadorEventosControles>:




void CManejadorControles::SetManejadorControles(CManejadorEventosControles *obj)
{
 800a67e:	b480      	push	{r7}
 800a680:	b083      	sub	sp, #12
 800a682:	af00      	add	r7, sp, #0
 800a684:	6078      	str	r0, [r7, #4]
 800a686:	6039      	str	r1, [r7, #0]
	ManejadorControles = obj;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	683a      	ldr	r2, [r7, #0]
 800a68c:	609a      	str	r2, [r3, #8]
}
 800a68e:	bf00      	nop
 800a690:	370c      	adds	r7, #12
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr
	...

0800a69c <_ZN26CManejadorEventosControlesC1Ev>:
 *      Author: W10
 */

#include <ManejadorControles/CManejadorEventosControles.hpp>

CManejadorEventosControles::CManejadorEventosControles()
 800a69c:	b480      	push	{r7}
 800a69e:	b083      	sub	sp, #12
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	4a04      	ldr	r2, [pc, #16]	@ (800a6b8 <_ZN26CManejadorEventosControlesC1Ev+0x1c>)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	370c      	adds	r7, #12
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr
 800a6b8:	0801610c 	.word	0x0801610c

0800a6bc <_ZN26CManejadorEventosControlesD1Ev>:

CManejadorEventosControles::~CManejadorEventosControles()
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	4a04      	ldr	r2, [pc, #16]	@ (800a6d8 <_ZN26CManejadorEventosControlesD1Ev+0x1c>)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	370c      	adds	r7, #12
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr
 800a6d8:	0801610c 	.word	0x0801610c

0800a6dc <_ZN26CManejadorEventosControlesD0Ev>:
CManejadorEventosControles::~CManejadorEventosControles()
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b082      	sub	sp, #8
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
}
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f7ff ffe9 	bl	800a6bc <_ZN26CManejadorEventosControlesD1Ev>
 800a6ea:	2104      	movs	r1, #4
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f007 f9cd 	bl	8011a8c <_ZdlPvj>
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3708      	adds	r7, #8
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <_ZN26CManejadorEventosControles22OnTemperaturaRealEventEi>:

void CManejadorEventosControles::OnTemperaturaRealEvent(int temperatura)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b083      	sub	sp, #12
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]

}
 800a706:	bf00      	nop
 800a708:	370c      	adds	r7, #12
 800a70a:	46bd      	mov	sp, r7
 800a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a710:	4770      	bx	lr

0800a712 <_ZN26CManejadorEventosControles16OnNivelAireEventEi>:
void CManejadorEventosControles::OnNivelAireEvent(int aire)
{
 800a712:	b480      	push	{r7}
 800a714:	b083      	sub	sp, #12
 800a716:	af00      	add	r7, sp, #0
 800a718:	6078      	str	r0, [r7, #4]
 800a71a:	6039      	str	r1, [r7, #0]

}
 800a71c:	bf00      	nop
 800a71e:	370c      	adds	r7, #12
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr

0800a728 <_ZN26CManejadorEventosControles20OnBotonUnoClickEventEv>:
//eventros del boton uno
void CManejadorEventosControles::OnBotonUnoClickEvent()
{
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]

}
 800a730:	bf00      	nop
 800a732:	370c      	adds	r7, #12
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <_ZN26CManejadorEventosControles20OnBotonDosClickEventEv>:
//eventros del boton dos
void CManejadorEventosControles::OnBotonDosClickEvent()
{
 800a73c:	b480      	push	{r7}
 800a73e:	b083      	sub	sp, #12
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]

}
 800a744:	bf00      	nop
 800a746:	370c      	adds	r7, #12
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr

0800a750 <_ZN26CManejadorEventosControles21OnBotonTresClickEventEv>:
//eventros del boton tres
void CManejadorEventosControles::OnBotonTresClickEvent()
{
 800a750:	b480      	push	{r7}
 800a752:	b083      	sub	sp, #12
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]

}
 800a758:	bf00      	nop
 800a75a:	370c      	adds	r7, #12
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr

0800a764 <_ZN26CManejadorEventosControles23OnBotonCuatroClickEventEv>:
//eventros del boton Cuatro
void CManejadorEventosControles::OnBotonCuatroClickEvent()
{
 800a764:	b480      	push	{r7}
 800a766:	b083      	sub	sp, #12
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]

}
 800a76c:	bf00      	nop
 800a76e:	370c      	adds	r7, #12
 800a770:	46bd      	mov	sp, r7
 800a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a776:	4770      	bx	lr

0800a778 <_ZN26CManejadorEventosControles24OnBotonPerillaClickEventEv>:
//eventros del boton Perilla
void CManejadorEventosControles::OnBotonPerillaClickEvent()
{
 800a778:	b480      	push	{r7}
 800a77a:	b083      	sub	sp, #12
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]

}
 800a780:	bf00      	nop
 800a782:	370c      	adds	r7, #12
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr

0800a78c <_ZN26CManejadorEventosControles19OnPerillaIncrementoEv>:
//eventos del Encoder
void CManejadorEventosControles::OnPerillaIncremento()
{
 800a78c:	b480      	push	{r7}
 800a78e:	b083      	sub	sp, #12
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]

}
 800a794:	bf00      	nop
 800a796:	370c      	adds	r7, #12
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <_ZN26CManejadorEventosControles19OnPerillaDecrementoEv>:
void CManejadorEventosControles::OnPerillaDecremento()
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b083      	sub	sp, #12
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]

}
 800a7a8:	bf00      	nop
 800a7aa:	370c      	adds	r7, #12
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr

0800a7b4 <_ZN3PwmC1Ev>:

#include <PWM/Pwm.hpp>
#include "stm32f4xx_hal.h"
#include "stdlib.h"

Pwm::Pwm()
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	4a04      	ldr	r2, [pc, #16]	@ (800a7d0 <_ZN3PwmC1Ev+0x1c>)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	370c      	adds	r7, #12
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr
 800a7d0:	08016140 	.word	0x08016140

0800a7d4 <_ZN3PwmD1Ev>:

Pwm::~Pwm()
 800a7d4:	b480      	push	{r7}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	4a04      	ldr	r2, [pc, #16]	@ (800a7f0 <_ZN3PwmD1Ev+0x1c>)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	370c      	adds	r7, #12
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr
 800a7f0:	08016140 	.word	0x08016140

0800a7f4 <_ZN3PwmD0Ev>:
Pwm::~Pwm()
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
}
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f7ff ffe9 	bl	800a7d4 <_ZN3PwmD1Ev>
 800a802:	214c      	movs	r1, #76	@ 0x4c
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f007 f941 	bl	8011a8c <_ZdlPvj>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	4618      	mov	r0, r3
 800a80e:	3708      	adds	r7, #8
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <_ZN3Pwm4InitEP11TIM_TypeDefii>:
void Pwm::Init(TIM_TypeDef * timer, int chanel,int periodo)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b092      	sub	sp, #72	@ 0x48
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	607a      	str	r2, [r7, #4]
 800a820:	603b      	str	r3, [r7, #0]

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a822:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a826:	2200      	movs	r2, #0
 800a828:	601a      	str	r2, [r3, #0]
 800a82a:	605a      	str	r2, [r3, #4]
 800a82c:	609a      	str	r2, [r3, #8]
 800a82e:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a830:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a834:	2200      	movs	r2, #0
 800a836:	601a      	str	r2, [r3, #0]
 800a838:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 800a83a:	f107 0314 	add.w	r3, r7, #20
 800a83e:	2200      	movs	r2, #0
 800a840:	601a      	str	r2, [r3, #0]
 800a842:	605a      	str	r2, [r3, #4]
 800a844:	609a      	str	r2, [r3, #8]
 800a846:	60da      	str	r2, [r3, #12]
 800a848:	611a      	str	r2, [r3, #16]
 800a84a:	615a      	str	r2, [r3, #20]
 800a84c:	619a      	str	r2, [r3, #24]
	  //periodo=99;
	  Htim.Instance = timer;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	68ba      	ldr	r2, [r7, #8]
 800a852:	605a      	str	r2, [r3, #4]
	  Htim.Init.Prescaler = 64;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2240      	movs	r2, #64	@ 0x40
 800a858:	609a      	str	r2, [r3, #8]
	  Htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2200      	movs	r2, #0
 800a85e:	60da      	str	r2, [r3, #12]
	  Htim.Init.Period = periodo;
 800a860:	683a      	ldr	r2, [r7, #0]
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	611a      	str	r2, [r3, #16]
	  Htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	2200      	movs	r2, #0
 800a86a:	615a      	str	r2, [r3, #20]
	  Htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2280      	movs	r2, #128	@ 0x80
 800a870:	61da      	str	r2, [r3, #28]
	  if (HAL_TIM_Base_Init(&Htim) != HAL_OK)
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	3304      	adds	r3, #4
 800a876:	4618      	mov	r0, r3
 800a878:	f005 fd44 	bl	8010304 <HAL_TIM_Base_Init>
 800a87c:	4603      	mov	r3, r0
 800a87e:	2b00      	cmp	r3, #0
 800a880:	bf14      	ite	ne
 800a882:	2301      	movne	r3, #1
 800a884:	2300      	moveq	r3, #0
 800a886:	b2db      	uxtb	r3, r3
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d002      	beq.n	800a892 <_ZN3Pwm4InitEP11TIM_TypeDefii+0x7e>
	  {
	    Error_Handler();
 800a88c:	68f8      	ldr	r0, [r7, #12]
 800a88e:	f000 f883 	bl	800a998 <_ZN3Pwm13Error_HandlerEv>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a892:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a896:	63bb      	str	r3, [r7, #56]	@ 0x38
	  if (HAL_TIM_ConfigClockSource(&Htim, &sClockSourceConfig) != HAL_OK)
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	3304      	adds	r3, #4
 800a89c:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800a8a0:	4611      	mov	r1, r2
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f006 f89c 	bl	80109e0 <HAL_TIM_ConfigClockSource>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	bf14      	ite	ne
 800a8ae:	2301      	movne	r3, #1
 800a8b0:	2300      	moveq	r3, #0
 800a8b2:	b2db      	uxtb	r3, r3
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d002      	beq.n	800a8be <_ZN3Pwm4InitEP11TIM_TypeDefii+0xaa>
	  {
	    Error_Handler();
 800a8b8:	68f8      	ldr	r0, [r7, #12]
 800a8ba:	f000 f86d 	bl	800a998 <_ZN3Pwm13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_Init(&Htim) != HAL_OK)
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	3304      	adds	r3, #4
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f005 fdd0 	bl	8010468 <HAL_TIM_PWM_Init>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	bf14      	ite	ne
 800a8ce:	2301      	movne	r3, #1
 800a8d0:	2300      	moveq	r3, #0
 800a8d2:	b2db      	uxtb	r3, r3
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d002      	beq.n	800a8de <_ZN3Pwm4InitEP11TIM_TypeDefii+0xca>
	  {
	    Error_Handler();
 800a8d8:	68f8      	ldr	r0, [r7, #12]
 800a8da:	f000 f85d 	bl	800a998 <_ZN3Pwm13Error_HandlerEv>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	633b      	str	r3, [r7, #48]	@ 0x30
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	637b      	str	r3, [r7, #52]	@ 0x34
	  if (HAL_TIMEx_MasterConfigSynchronization(&Htim, &sMasterConfig) != HAL_OK)
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	3304      	adds	r3, #4
 800a8ea:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800a8ee:	4611      	mov	r1, r2
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f006 fc3d 	bl	8011170 <HAL_TIMEx_MasterConfigSynchronization>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	bf14      	ite	ne
 800a8fc:	2301      	movne	r3, #1
 800a8fe:	2300      	moveq	r3, #0
 800a900:	b2db      	uxtb	r3, r3
 800a902:	2b00      	cmp	r3, #0
 800a904:	d002      	beq.n	800a90c <_ZN3Pwm4InitEP11TIM_TypeDefii+0xf8>
	  {
	    Error_Handler();
 800a906:	68f8      	ldr	r0, [r7, #12]
 800a908:	f000 f846 	bl	800a998 <_ZN3Pwm13Error_HandlerEv>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a90c:	2360      	movs	r3, #96	@ 0x60
 800a90e:	617b      	str	r3, [r7, #20]
	  sConfigOC.Pulse = 0;
 800a910:	2300      	movs	r3, #0
 800a912:	61bb      	str	r3, [r7, #24]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a914:	2300      	movs	r3, #0
 800a916:	61fb      	str	r3, [r7, #28]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a918:	2300      	movs	r3, #0
 800a91a:	627b      	str	r3, [r7, #36]	@ 0x24
	  if (HAL_TIM_PWM_ConfigChannel(&Htim, &sConfigOC, chanel) != HAL_OK)
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	3304      	adds	r3, #4
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	f107 0114 	add.w	r1, r7, #20
 800a926:	4618      	mov	r0, r3
 800a928:	f005 ff98 	bl	801085c <HAL_TIM_PWM_ConfigChannel>
 800a92c:	4603      	mov	r3, r0
 800a92e:	2b00      	cmp	r3, #0
 800a930:	bf14      	ite	ne
 800a932:	2301      	movne	r3, #1
 800a934:	2300      	moveq	r3, #0
 800a936:	b2db      	uxtb	r3, r3
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d002      	beq.n	800a942 <_ZN3Pwm4InitEP11TIM_TypeDefii+0x12e>
	  {
	    Error_Handler();
 800a93c:	68f8      	ldr	r0, [r7, #12]
 800a93e:	f000 f82b 	bl	800a998 <_ZN3Pwm13Error_HandlerEv>
	  }
//	  HAL_TIM_MspPostInit(&Htim);

	HAL_TIM_PWM_Start(&Htim,chanel);
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	3304      	adds	r3, #4
 800a946:	687a      	ldr	r2, [r7, #4]
 800a948:	4611      	mov	r1, r2
 800a94a:	4618      	mov	r0, r3
 800a94c:	f005 fde6 	bl	801051c <HAL_TIM_PWM_Start>
	SicloTrabajo(0);
 800a950:	2100      	movs	r1, #0
 800a952:	68f8      	ldr	r0, [r7, #12]
 800a954:	f000 f804 	bl	800a960 <_ZN3Pwm12SicloTrabajoEi>


//	__HAL_TIM_SET_COMPARE(&Htim, chanel, 500);
}
 800a958:	bf00      	nop
 800a95a:	3748      	adds	r7, #72	@ 0x48
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <_ZN3Pwm12SicloTrabajoEi>:
void Pwm::SicloTrabajo(int siclo)
{
 800a960:	b480      	push	{r7}
 800a962:	b085      	sub	sp, #20
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	6039      	str	r1, [r7, #0]
	// si 65535->100
	// x->siclo
	int valor=siclo*Htim.Init.Period/100;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	691b      	ldr	r3, [r3, #16]
 800a96e:	683a      	ldr	r2, [r7, #0]
 800a970:	fb02 f303 	mul.w	r3, r2, r3
 800a974:	4a07      	ldr	r2, [pc, #28]	@ (800a994 <_ZN3Pwm12SicloTrabajoEi+0x34>)
 800a976:	fba2 2303 	umull	r2, r3, r2, r3
 800a97a:	095b      	lsrs	r3, r3, #5
 800a97c:	60fb      	str	r3, [r7, #12]
	Htim.Instance->CCR1=valor;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	68fa      	ldr	r2, [r7, #12]
 800a984:	635a      	str	r2, [r3, #52]	@ 0x34

}
 800a986:	bf00      	nop
 800a988:	3714      	adds	r7, #20
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr
 800a992:	bf00      	nop
 800a994:	51eb851f 	.word	0x51eb851f

0800a998 <_ZN3Pwm13Error_HandlerEv>:

void Pwm::Error_Handler(void)
{
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]

}
 800a9a0:	bf00      	nop
 800a9a2:	370c      	adds	r7, #12
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <_ZN16CControlProgresoC1Ev>:
 *      Author: W10
 */

#include <RapaTemperatura/CControlProgreso.hpp>

CControlProgreso::CControlProgreso()
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	4a04      	ldr	r2, [pc, #16]	@ (800a9c8 <_ZN16CControlProgresoC1Ev+0x1c>)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	4618      	mov	r0, r3
 800a9be:	370c      	adds	r7, #12
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr
 800a9c8:	08016150 	.word	0x08016150

0800a9cc <_ZN16CControlProgresoD1Ev>:

CControlProgreso::~CControlProgreso()
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	4a04      	ldr	r2, [pc, #16]	@ (800a9e8 <_ZN16CControlProgresoD1Ev+0x1c>)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	4618      	mov	r0, r3
 800a9de:	370c      	adds	r7, #12
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e6:	4770      	bx	lr
 800a9e8:	08016150 	.word	0x08016150

0800a9ec <_ZN16CControlProgresoD0Ev>:
CControlProgreso::~CControlProgreso()
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b082      	sub	sp, #8
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
}
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f7ff ffe9 	bl	800a9cc <_ZN16CControlProgresoD1Ev>
 800a9fa:	2104      	movs	r1, #4
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f007 f845 	bl	8011a8c <_ZdlPvj>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	4618      	mov	r0, r3
 800aa06:	3708      	adds	r7, #8
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <_ZN16CControlProgreso10OnProgresoEii>:

void CControlProgreso::OnProgreso(int valor, int maximo)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b085      	sub	sp, #20
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	60f8      	str	r0, [r7, #12]
 800aa14:	60b9      	str	r1, [r7, #8]
 800aa16:	607a      	str	r2, [r7, #4]

}
 800aa18:	bf00      	nop
 800aa1a:	3714      	adds	r7, #20
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr

0800aa24 <_ZN16CControlProgreso9OnMensajeEPc>:
void CControlProgreso::OnMensaje(char *texto)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b083      	sub	sp, #12
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	6039      	str	r1, [r7, #0]

}
 800aa2e:	bf00      	nop
 800aa30:	370c      	adds	r7, #12
 800aa32:	46bd      	mov	sp, r7
 800aa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa38:	4770      	bx	lr

0800aa3a <_ZN16CControlProgreso13OnFinProgresoEv>:
void CControlProgreso::OnFinProgreso()
{
 800aa3a:	b480      	push	{r7}
 800aa3c:	b083      	sub	sp, #12
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]

}
 800aa42:	bf00      	nop
 800aa44:	370c      	adds	r7, #12
 800aa46:	46bd      	mov	sp, r7
 800aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4c:	4770      	bx	lr
	...

0800aa50 <_ZN22CControladorPasosRampaC1Ev>:
#include <EPROM/CEprom.hpp>
#include <RapaTemperatura/CRampa.hpp>
#include <RapaTemperatura/CPaso.hpp>
#include<string.h>

CControladorPasosRampa::CControladorPasosRampa()
 800aa50:	b480      	push	{r7}
 800aa52:	b083      	sub	sp, #12
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	4a08      	ldr	r2, [pc, #32]	@ (800aa7c <_ZN22CControladorPasosRampaC1Ev+0x2c>)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	601a      	str	r2, [r3, #0]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800aa64:	605a      	str	r2, [r3, #4]
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2206      	movs	r2, #6
 800aa6a:	609a      	str	r2, [r3, #8]
{
	// TODO Auto-generated constructor stub

}
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	4618      	mov	r0, r3
 800aa70:	370c      	adds	r7, #12
 800aa72:	46bd      	mov	sp, r7
 800aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa78:	4770      	bx	lr
 800aa7a:	bf00      	nop
 800aa7c:	0801616c 	.word	0x0801616c

0800aa80 <_ZN22CControladorPasosRampaD1Ev>:

CControladorPasosRampa::~CControladorPasosRampa()
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	4a04      	ldr	r2, [pc, #16]	@ (800aa9c <_ZN22CControladorPasosRampaD1Ev+0x1c>)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	4618      	mov	r0, r3
 800aa92:	370c      	adds	r7, #12
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr
 800aa9c:	0801616c 	.word	0x0801616c

0800aaa0 <_ZN22CControladorPasosRampaD0Ev>:
CControladorPasosRampa::~CControladorPasosRampa()
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b082      	sub	sp, #8
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
}
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f7ff ffe9 	bl	800aa80 <_ZN22CControladorPasosRampaD1Ev>
 800aaae:	2118      	movs	r1, #24
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f006 ffeb 	bl	8011a8c <_ZdlPvj>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	4618      	mov	r0, r3
 800aaba:	3708      	adds	r7, #8
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <_ZN5CPasoC1ERKS_>:
#ifndef INC_RAPATEMPERATURA_CPASO_HPP_
#define INC_RAPATEMPERATURA_CPASO_HPP_
#include "stm32f4xx.h"
#include "stm32f4xx_hal_conf.h"

class CPaso
 800aac0:	b480      	push	{r7}
 800aac2:	b083      	sub	sp, #12
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
 800aaca:	4a11      	ldr	r2, [pc, #68]	@ (800ab10 <_ZN5CPasoC1ERKS_+0x50>)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	601a      	str	r2, [r3, #0]
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	791a      	ldrb	r2, [r3, #4]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	711a      	strb	r2, [r3, #4]
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	795a      	ldrb	r2, [r3, #5]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	715a      	strb	r2, [r3, #5]
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	799a      	ldrb	r2, [r3, #6]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	719a      	strb	r2, [r3, #6]
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	79da      	ldrb	r2, [r3, #7]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	71da      	strb	r2, [r3, #7]
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	7a1a      	ldrb	r2, [r3, #8]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	721a      	strb	r2, [r3, #8]
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	7a5a      	ldrb	r2, [r3, #9]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	725a      	strb	r2, [r3, #9]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	4618      	mov	r0, r3
 800ab04:	370c      	adds	r7, #12
 800ab06:	46bd      	mov	sp, r7
 800ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0c:	4770      	bx	lr
 800ab0e:	bf00      	nop
 800ab10:	0801618c 	.word	0x0801618c

0800ab14 <_ZN22CControladorPasosRampa17EliminaPasosRampaEi>:

bool CControladorPasosRampa::EliminaPasosRampa(int ID_Rampa)
{
 800ab14:	b590      	push	{r4, r7, lr}
 800ab16:	b089      	sub	sp, #36	@ 0x24
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]
//	CPaso paso;
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800ab1e:	2300      	movs	r3, #0
 800ab20:	61fb      	str	r3, [r7, #28]
 800ab22:	e02e      	b.n	800ab82 <_ZN22CControladorPasosRampa17EliminaPasosRampaEi+0x6e>
	{
		int direccionPaso = DireccionTablaPasos + (BytesPaso * i);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	695a      	ldr	r2, [r3, #20]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	689b      	ldr	r3, [r3, #8]
 800ab2c:	69f9      	ldr	r1, [r7, #28]
 800ab2e:	fb01 f303 	mul.w	r3, r1, r3
 800ab32:	4413      	add	r3, r2
 800ab34:	61bb      	str	r3, [r7, #24]
		CPaso paso=LeePasoMemoria(direccionPaso);
 800ab36:	f107 030c 	add.w	r3, r7, #12
 800ab3a:	69ba      	ldr	r2, [r7, #24]
 800ab3c:	6879      	ldr	r1, [r7, #4]
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f000 f8c4 	bl	800accc <_ZN22CControladorPasosRampa14LeePasoMemoriaEi>
		//if (Eprom.LeeBytes(direccionPaso, BytesPaso, (uint8_t*)&paso) == false)
		//	return false;
		if (paso.Ocupado == 0)
 800ab44:	7c3b      	ldrb	r3, [r7, #16]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d101      	bne.n	800ab4e <_ZN22CControladorPasosRampa17EliminaPasosRampaEi+0x3a>
			continue;
 800ab4a:	2400      	movs	r4, #0
 800ab4c:	e010      	b.n	800ab70 <_ZN22CControladorPasosRampa17EliminaPasosRampaEi+0x5c>
		if (paso.ID_Rampa != ID_Rampa)
 800ab4e:	7c7b      	ldrb	r3, [r7, #17]
 800ab50:	461a      	mov	r2, r3
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d001      	beq.n	800ab5c <_ZN22CControladorPasosRampa17EliminaPasosRampaEi+0x48>
			continue;
 800ab58:	2400      	movs	r4, #0
 800ab5a:	e009      	b.n	800ab70 <_ZN22CControladorPasosRampa17EliminaPasosRampaEi+0x5c>
		paso.Ocupado = 0;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	743b      	strb	r3, [r7, #16]
		GuardaPasoMemoria(direccionPaso, &paso);
 800ab60:	f107 030c 	add.w	r3, r7, #12
 800ab64:	461a      	mov	r2, r3
 800ab66:	69b9      	ldr	r1, [r7, #24]
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f000 f851 	bl	800ac10 <_ZN22CControladorPasosRampa17GuardaPasoMemoriaEiP5CPaso>
//		if (Eprom.GuardaBytes(direccionPaso, BytesPaso, (uint8_t*)&paso) == false)
	//		return false;
	}
 800ab6e:	2401      	movs	r4, #1
 800ab70:	f107 030c 	add.w	r3, r7, #12
 800ab74:	4618      	mov	r0, r3
 800ab76:	f000 ffb1 	bl	800badc <_ZN5CPasoD1Ev>
 800ab7a:	2c01      	cmp	r4, #1
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800ab7c:	69fb      	ldr	r3, [r7, #28]
 800ab7e:	3301      	adds	r3, #1
 800ab80:	61fb      	str	r3, [r7, #28]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	69fa      	ldr	r2, [r7, #28]
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	dbcb      	blt.n	800ab24 <_ZN22CControladorPasosRampa17EliminaPasosRampaEi+0x10>
	return true;
 800ab8c:	2301      	movs	r3, #1
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3724      	adds	r7, #36	@ 0x24
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd90      	pop	{r4, r7, pc}

0800ab96 <_ZN22CControladorPasosRampa20DameSiguienteID_PasoEv>:

int CControladorPasosRampa::DameSiguienteID_Paso()
{
 800ab96:	b590      	push	{r4, r7, lr}
 800ab98:	b089      	sub	sp, #36	@ 0x24
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
	int id_paso=0;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800aba2:	2300      	movs	r3, #0
 800aba4:	61bb      	str	r3, [r7, #24]
 800aba6:	e025      	b.n	800abf4 <_ZN22CControladorPasosRampa20DameSiguienteID_PasoEv+0x5e>
	{
		int direccionPaso = DireccionTablaPasos + (BytesPaso * i);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	695a      	ldr	r2, [r3, #20]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	689b      	ldr	r3, [r3, #8]
 800abb0:	69b9      	ldr	r1, [r7, #24]
 800abb2:	fb01 f303 	mul.w	r3, r1, r3
 800abb6:	4413      	add	r3, r2
 800abb8:	617b      	str	r3, [r7, #20]
		CPaso paso=LeePasoMemoria(direccionPaso);
 800abba:	f107 0308 	add.w	r3, r7, #8
 800abbe:	697a      	ldr	r2, [r7, #20]
 800abc0:	6879      	ldr	r1, [r7, #4]
 800abc2:	4618      	mov	r0, r3
 800abc4:	f000 f882 	bl	800accc <_ZN22CControladorPasosRampa14LeePasoMemoriaEi>
		if (paso.Ocupado == false)
 800abc8:	7b3b      	ldrb	r3, [r7, #12]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d101      	bne.n	800abd2 <_ZN22CControladorPasosRampa20DameSiguienteID_PasoEv+0x3c>
		{
			continue;
 800abce:	2400      	movs	r4, #0
 800abd0:	e007      	b.n	800abe2 <_ZN22CControladorPasosRampa20DameSiguienteID_PasoEv+0x4c>
		}
		if(paso.ID_Paso>=id_paso)
 800abd2:	7bbb      	ldrb	r3, [r7, #14]
 800abd4:	461a      	mov	r2, r3
 800abd6:	69fb      	ldr	r3, [r7, #28]
 800abd8:	4293      	cmp	r3, r2
 800abda:	dc01      	bgt.n	800abe0 <_ZN22CControladorPasosRampa20DameSiguienteID_PasoEv+0x4a>
			id_paso=paso.ID_Paso;
 800abdc:	7bbb      	ldrb	r3, [r7, #14]
 800abde:	61fb      	str	r3, [r7, #28]
	}
 800abe0:	2401      	movs	r4, #1
 800abe2:	f107 0308 	add.w	r3, r7, #8
 800abe6:	4618      	mov	r0, r3
 800abe8:	f000 ff78 	bl	800badc <_ZN5CPasoD1Ev>
 800abec:	2c01      	cmp	r4, #1
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800abee:	69bb      	ldr	r3, [r7, #24]
 800abf0:	3301      	adds	r3, #1
 800abf2:	61bb      	str	r3, [r7, #24]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	685b      	ldr	r3, [r3, #4]
 800abf8:	69ba      	ldr	r2, [r7, #24]
 800abfa:	429a      	cmp	r2, r3
 800abfc:	dbd4      	blt.n	800aba8 <_ZN22CControladorPasosRampa20DameSiguienteID_PasoEv+0x12>
	id_paso++;
 800abfe:	69fb      	ldr	r3, [r7, #28]
 800ac00:	3301      	adds	r3, #1
 800ac02:	61fb      	str	r3, [r7, #28]
	return id_paso;
 800ac04:	69fb      	ldr	r3, [r7, #28]
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3724      	adds	r7, #36	@ 0x24
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd90      	pop	{r4, r7, pc}
	...

0800ac10 <_ZN22CControladorPasosRampa17GuardaPasoMemoriaEiP5CPaso>:
//			}
//		}
//	}
//}
void CControladorPasosRampa::GuardaPasoMemoria(int direccion, CPaso *paso)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b086      	sub	sp, #24
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	60f8      	str	r0, [r7, #12]
 800ac18:	60b9      	str	r1, [r7, #8]
 800ac1a:	607a      	str	r2, [r7, #4]
	uint8_t Ocupado=paso->Ocupado;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	791b      	ldrb	r3, [r3, #4]
 800ac20:	75fb      	strb	r3, [r7, #23]
	uint8_t ID_Rampa=paso->ID_Rampa;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	795b      	ldrb	r3, [r3, #5]
 800ac26:	75bb      	strb	r3, [r7, #22]
	uint8_t ID_Paso=paso->ID_Paso;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	799b      	ldrb	r3, [r3, #6]
 800ac2c:	757b      	strb	r3, [r7, #21]
	uint8_t NivelAire=paso->NivelAire;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	7a1b      	ldrb	r3, [r3, #8]
 800ac32:	753b      	strb	r3, [r7, #20]
	uint8_t Minutos=paso->Minutos;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	7a5b      	ldrb	r3, [r3, #9]
 800ac38:	74fb      	strb	r3, [r7, #19]
	uint8_t Temperatura=paso->Temperatura;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	79db      	ldrb	r3, [r3, #7]
 800ac3e:	74bb      	strb	r3, [r7, #18]

	Eprom.GuardaBytes(direccion, 1,&Ocupado);
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	b299      	uxth	r1, r3
 800ac44:	f107 0317 	add.w	r3, r7, #23
 800ac48:	2201      	movs	r2, #1
 800ac4a:	481f      	ldr	r0, [pc, #124]	@ (800acc8 <_ZN22CControladorPasosRampa17GuardaPasoMemoriaEiP5CPaso+0xb8>)
 800ac4c:	f7f6 ff1e 	bl	8001a8c <_ZN6CEprom11GuardaBytesEttPh>
	direccion++;
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	3301      	adds	r3, #1
 800ac54:	60bb      	str	r3, [r7, #8]
	Eprom.GuardaBytes(direccion, 1,&ID_Rampa);
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	b299      	uxth	r1, r3
 800ac5a:	f107 0316 	add.w	r3, r7, #22
 800ac5e:	2201      	movs	r2, #1
 800ac60:	4819      	ldr	r0, [pc, #100]	@ (800acc8 <_ZN22CControladorPasosRampa17GuardaPasoMemoriaEiP5CPaso+0xb8>)
 800ac62:	f7f6 ff13 	bl	8001a8c <_ZN6CEprom11GuardaBytesEttPh>
	direccion++;
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	3301      	adds	r3, #1
 800ac6a:	60bb      	str	r3, [r7, #8]
	Eprom.GuardaBytes(direccion,1 ,&ID_Paso);
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	b299      	uxth	r1, r3
 800ac70:	f107 0315 	add.w	r3, r7, #21
 800ac74:	2201      	movs	r2, #1
 800ac76:	4814      	ldr	r0, [pc, #80]	@ (800acc8 <_ZN22CControladorPasosRampa17GuardaPasoMemoriaEiP5CPaso+0xb8>)
 800ac78:	f7f6 ff08 	bl	8001a8c <_ZN6CEprom11GuardaBytesEttPh>
	direccion++;
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	3301      	adds	r3, #1
 800ac80:	60bb      	str	r3, [r7, #8]
	Eprom.GuardaBytes(direccion, 1,&NivelAire);
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	b299      	uxth	r1, r3
 800ac86:	f107 0314 	add.w	r3, r7, #20
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	480e      	ldr	r0, [pc, #56]	@ (800acc8 <_ZN22CControladorPasosRampa17GuardaPasoMemoriaEiP5CPaso+0xb8>)
 800ac8e:	f7f6 fefd 	bl	8001a8c <_ZN6CEprom11GuardaBytesEttPh>
	direccion++;
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	3301      	adds	r3, #1
 800ac96:	60bb      	str	r3, [r7, #8]
	Eprom.GuardaBytes(direccion, 1,&Temperatura);
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	b299      	uxth	r1, r3
 800ac9c:	f107 0312 	add.w	r3, r7, #18
 800aca0:	2201      	movs	r2, #1
 800aca2:	4809      	ldr	r0, [pc, #36]	@ (800acc8 <_ZN22CControladorPasosRampa17GuardaPasoMemoriaEiP5CPaso+0xb8>)
 800aca4:	f7f6 fef2 	bl	8001a8c <_ZN6CEprom11GuardaBytesEttPh>
	direccion++;
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	3301      	adds	r3, #1
 800acac:	60bb      	str	r3, [r7, #8]
	Eprom.GuardaBytes(direccion, 1, &Minutos);
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	b299      	uxth	r1, r3
 800acb2:	f107 0313 	add.w	r3, r7, #19
 800acb6:	2201      	movs	r2, #1
 800acb8:	4803      	ldr	r0, [pc, #12]	@ (800acc8 <_ZN22CControladorPasosRampa17GuardaPasoMemoriaEiP5CPaso+0xb8>)
 800acba:	f7f6 fee7 	bl	8001a8c <_ZN6CEprom11GuardaBytesEttPh>
}
 800acbe:	bf00      	nop
 800acc0:	3718      	adds	r7, #24
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
 800acc6:	bf00      	nop
 800acc8:	20000318 	.word	0x20000318

0800accc <_ZN22CControladorPasosRampa14LeePasoMemoriaEi>:
CPaso CControladorPasosRampa::LeePasoMemoria(int direccion)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b086      	sub	sp, #24
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	60f8      	str	r0, [r7, #12]
 800acd4:	60b9      	str	r1, [r7, #8]
 800acd6:	607a      	str	r2, [r7, #4]
	uint8_t ID_Paso;
	uint8_t NivelAire;
	uint8_t Minutos;
	uint8_t Temperatura;

	Eprom.LeeBytes(direccion, 1,&Ocupado);
 800acd8:	f107 0317 	add.w	r3, r7, #23
 800acdc:	2201      	movs	r2, #1
 800acde:	6879      	ldr	r1, [r7, #4]
 800ace0:	4827      	ldr	r0, [pc, #156]	@ (800ad80 <_ZN22CControladorPasosRampa14LeePasoMemoriaEi+0xb4>)
 800ace2:	f7f6 ff21 	bl	8001b28 <_ZN6CEprom8LeeBytesEiiPh>
	direccion++;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	3301      	adds	r3, #1
 800acea:	607b      	str	r3, [r7, #4]
	Eprom.LeeBytes(direccion, 1,&ID_Rampa);
 800acec:	f107 0316 	add.w	r3, r7, #22
 800acf0:	2201      	movs	r2, #1
 800acf2:	6879      	ldr	r1, [r7, #4]
 800acf4:	4822      	ldr	r0, [pc, #136]	@ (800ad80 <_ZN22CControladorPasosRampa14LeePasoMemoriaEi+0xb4>)
 800acf6:	f7f6 ff17 	bl	8001b28 <_ZN6CEprom8LeeBytesEiiPh>
	direccion++;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	3301      	adds	r3, #1
 800acfe:	607b      	str	r3, [r7, #4]
	Eprom.LeeBytes(direccion,1 ,&ID_Paso);
 800ad00:	f107 0315 	add.w	r3, r7, #21
 800ad04:	2201      	movs	r2, #1
 800ad06:	6879      	ldr	r1, [r7, #4]
 800ad08:	481d      	ldr	r0, [pc, #116]	@ (800ad80 <_ZN22CControladorPasosRampa14LeePasoMemoriaEi+0xb4>)
 800ad0a:	f7f6 ff0d 	bl	8001b28 <_ZN6CEprom8LeeBytesEiiPh>
	direccion++;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	3301      	adds	r3, #1
 800ad12:	607b      	str	r3, [r7, #4]
	Eprom.LeeBytes(direccion, 1,&NivelAire);
 800ad14:	f107 0314 	add.w	r3, r7, #20
 800ad18:	2201      	movs	r2, #1
 800ad1a:	6879      	ldr	r1, [r7, #4]
 800ad1c:	4818      	ldr	r0, [pc, #96]	@ (800ad80 <_ZN22CControladorPasosRampa14LeePasoMemoriaEi+0xb4>)
 800ad1e:	f7f6 ff03 	bl	8001b28 <_ZN6CEprom8LeeBytesEiiPh>
	direccion++;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	3301      	adds	r3, #1
 800ad26:	607b      	str	r3, [r7, #4]
	Eprom.LeeBytes(direccion, 1,&Temperatura);
 800ad28:	f107 0312 	add.w	r3, r7, #18
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	6879      	ldr	r1, [r7, #4]
 800ad30:	4813      	ldr	r0, [pc, #76]	@ (800ad80 <_ZN22CControladorPasosRampa14LeePasoMemoriaEi+0xb4>)
 800ad32:	f7f6 fef9 	bl	8001b28 <_ZN6CEprom8LeeBytesEiiPh>
	direccion++;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	3301      	adds	r3, #1
 800ad3a:	607b      	str	r3, [r7, #4]
	Eprom.LeeBytes(direccion, 1,&Minutos);
 800ad3c:	f107 0313 	add.w	r3, r7, #19
 800ad40:	2201      	movs	r2, #1
 800ad42:	6879      	ldr	r1, [r7, #4]
 800ad44:	480e      	ldr	r0, [pc, #56]	@ (800ad80 <_ZN22CControladorPasosRampa14LeePasoMemoriaEi+0xb4>)
 800ad46:	f7f6 feef 	bl	8001b28 <_ZN6CEprom8LeeBytesEiiPh>

	CPaso paso;
 800ad4a:	68f8      	ldr	r0, [r7, #12]
 800ad4c:	f000 fea4 	bl	800ba98 <_ZN5CPasoC1Ev>
	paso.Ocupado=Ocupado;
 800ad50:	7dfa      	ldrb	r2, [r7, #23]
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	711a      	strb	r2, [r3, #4]
	paso.ID_Rampa=ID_Rampa;
 800ad56:	7dba      	ldrb	r2, [r7, #22]
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	715a      	strb	r2, [r3, #5]
	paso.ID_Paso=ID_Paso;
 800ad5c:	7d7a      	ldrb	r2, [r7, #21]
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	719a      	strb	r2, [r3, #6]
	paso.NivelAire=NivelAire;
 800ad62:	7d3a      	ldrb	r2, [r7, #20]
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	721a      	strb	r2, [r3, #8]
	paso.Minutos=Minutos;
 800ad68:	7cfa      	ldrb	r2, [r7, #19]
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	725a      	strb	r2, [r3, #9]
	paso.Temperatura=Temperatura;
 800ad6e:	7cba      	ldrb	r2, [r7, #18]
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	71da      	strb	r2, [r3, #7]
	return paso;
 800ad74:	bf00      	nop
}
 800ad76:	68f8      	ldr	r0, [r7, #12]
 800ad78:	3718      	adds	r7, #24
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	20000318 	.word	0x20000318

0800ad84 <_ZN22CControladorPasosRampa18ActualizaPasoRampaEiihhh>:
bool CControladorPasosRampa::ActualizaPasoRampa(int ID_Paso,int ID_Rampa,uint8_t Temperatura,uint8_t NivelAire,uint8_t Minutos)
{
 800ad84:	b5b0      	push	{r4, r5, r7, lr}
 800ad86:	b08a      	sub	sp, #40	@ 0x28
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	60f8      	str	r0, [r7, #12]
 800ad8c:	60b9      	str	r1, [r7, #8]
 800ad8e:	607a      	str	r2, [r7, #4]
 800ad90:	70fb      	strb	r3, [r7, #3]
 800ad92:	2400      	movs	r4, #0
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800ad94:	2300      	movs	r3, #0
 800ad96:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad98:	e036      	b.n	800ae08 <_ZN22CControladorPasosRampa18ActualizaPasoRampaEiihhh+0x84>
	{
		int direccionPaso = DireccionTablaPasos + (BytesPaso * i);
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	695a      	ldr	r2, [r3, #20]
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	689b      	ldr	r3, [r3, #8]
 800ada2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ada4:	fb01 f303 	mul.w	r3, r1, r3
 800ada8:	4413      	add	r3, r2
 800adaa:	623b      	str	r3, [r7, #32]
		CPaso pasoTmp=LeePasoMemoria(direccionPaso);
 800adac:	f107 0314 	add.w	r3, r7, #20
 800adb0:	6a3a      	ldr	r2, [r7, #32]
 800adb2:	68f9      	ldr	r1, [r7, #12]
 800adb4:	4618      	mov	r0, r3
 800adb6:	f7ff ff89 	bl	800accc <_ZN22CControladorPasosRampa14LeePasoMemoriaEi>
		if (pasoTmp.ID_Paso != ID_Paso)
 800adba:	7ebb      	ldrb	r3, [r7, #26]
 800adbc:	461a      	mov	r2, r3
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d001      	beq.n	800adc8 <_ZN22CControladorPasosRampa18ActualizaPasoRampaEiihhh+0x44>
			continue;
 800adc4:	2500      	movs	r5, #0
 800adc6:	e015      	b.n	800adf4 <_ZN22CControladorPasosRampa18ActualizaPasoRampaEiihhh+0x70>
		pasoTmp.ID_Rampa = ID_Rampa;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	b2db      	uxtb	r3, r3
 800adcc:	767b      	strb	r3, [r7, #25]
		pasoTmp.Ocupado = 1;
 800adce:	2301      	movs	r3, #1
 800add0:	763b      	strb	r3, [r7, #24]
		pasoTmp.NivelAire = NivelAire;
 800add2:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800add6:	773b      	strb	r3, [r7, #28]
		pasoTmp.Minutos = Minutos;
 800add8:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800addc:	777b      	strb	r3, [r7, #29]
		pasoTmp.Temperatura = Temperatura;
 800adde:	78fb      	ldrb	r3, [r7, #3]
 800ade0:	76fb      	strb	r3, [r7, #27]
		GuardaPasoMemoria(direccionPaso,&pasoTmp);
 800ade2:	f107 0314 	add.w	r3, r7, #20
 800ade6:	461a      	mov	r2, r3
 800ade8:	6a39      	ldr	r1, [r7, #32]
 800adea:	68f8      	ldr	r0, [r7, #12]
 800adec:	f7ff ff10 	bl	800ac10 <_ZN22CControladorPasosRampa17GuardaPasoMemoriaEiP5CPaso>
		return true;
 800adf0:	2401      	movs	r4, #1
 800adf2:	2501      	movs	r5, #1
	}
 800adf4:	f107 0314 	add.w	r3, r7, #20
 800adf8:	4618      	mov	r0, r3
 800adfa:	f000 fe6f 	bl	800badc <_ZN5CPasoD1Ev>
 800adfe:	2d00      	cmp	r5, #0
 800ae00:	d108      	bne.n	800ae14 <_ZN22CControladorPasosRampa18ActualizaPasoRampaEiihhh+0x90>
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800ae02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae04:	3301      	adds	r3, #1
 800ae06:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	dbc3      	blt.n	800ad9a <_ZN22CControladorPasosRampa18ActualizaPasoRampaEiihhh+0x16>
	return false;
 800ae12:	2400      	movs	r4, #0

}
 800ae14:	4623      	mov	r3, r4
 800ae16:	4618      	mov	r0, r3
 800ae18:	3728      	adds	r7, #40	@ 0x28
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bdb0      	pop	{r4, r5, r7, pc}

0800ae1e <_ZN22CControladorPasosRampa16EliminaPasoRampaEi>:
bool CControladorPasosRampa::EliminaPasoRampa(int ID_Paso)
{
 800ae1e:	b590      	push	{r4, r7, lr}
 800ae20:	b089      	sub	sp, #36	@ 0x24
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
 800ae26:	6039      	str	r1, [r7, #0]
//	CPaso pasoTmp;
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800ae28:	2300      	movs	r3, #0
 800ae2a:	61fb      	str	r3, [r7, #28]
 800ae2c:	e029      	b.n	800ae82 <_ZN22CControladorPasosRampa16EliminaPasoRampaEi+0x64>
	{
		int direccionPaso = DireccionTablaPasos + (BytesPaso * i);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	695a      	ldr	r2, [r3, #20]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	69f9      	ldr	r1, [r7, #28]
 800ae38:	fb01 f303 	mul.w	r3, r1, r3
 800ae3c:	4413      	add	r3, r2
 800ae3e:	61bb      	str	r3, [r7, #24]
		CPaso pasoTmp=LeePasoMemoria(direccionPaso);
 800ae40:	f107 030c 	add.w	r3, r7, #12
 800ae44:	69ba      	ldr	r2, [r7, #24]
 800ae46:	6879      	ldr	r1, [r7, #4]
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f7ff ff3f 	bl	800accc <_ZN22CControladorPasosRampa14LeePasoMemoriaEi>
	//	if (Eprom.LeeBytes(direccionPaso, BytesPaso,(uint8_t*) &pasoTmp) == false)
		//	return false;
		if (pasoTmp.ID_Paso != ID_Paso)
 800ae4e:	7cbb      	ldrb	r3, [r7, #18]
 800ae50:	461a      	mov	r2, r3
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d001      	beq.n	800ae5c <_ZN22CControladorPasosRampa16EliminaPasoRampaEi+0x3e>
			continue;
 800ae58:	2400      	movs	r4, #0
 800ae5a:	e009      	b.n	800ae70 <_ZN22CControladorPasosRampa16EliminaPasoRampaEi+0x52>
		pasoTmp.Ocupado = 0;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	743b      	strb	r3, [r7, #16]
		GuardaPasoMemoria(direccionPaso,&pasoTmp);
 800ae60:	f107 030c 	add.w	r3, r7, #12
 800ae64:	461a      	mov	r2, r3
 800ae66:	69b9      	ldr	r1, [r7, #24]
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f7ff fed1 	bl	800ac10 <_ZN22CControladorPasosRampa17GuardaPasoMemoriaEiP5CPaso>
		//return Eprom.GuardaBytes(direccionPaso, BytesPaso,(uint8_t*) &pasoTmp);
	}
 800ae6e:	2401      	movs	r4, #1
 800ae70:	f107 030c 	add.w	r3, r7, #12
 800ae74:	4618      	mov	r0, r3
 800ae76:	f000 fe31 	bl	800badc <_ZN5CPasoD1Ev>
 800ae7a:	2c01      	cmp	r4, #1
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800ae7c:	69fb      	ldr	r3, [r7, #28]
 800ae7e:	3301      	adds	r3, #1
 800ae80:	61fb      	str	r3, [r7, #28]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	69fa      	ldr	r2, [r7, #28]
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	dbd0      	blt.n	800ae2e <_ZN22CControladorPasosRampa16EliminaPasoRampaEi+0x10>
	return false;
 800ae8c:	2300      	movs	r3, #0

}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3724      	adds	r7, #36	@ 0x24
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd90      	pop	{r4, r7, pc}

0800ae96 <_ZN22CControladorPasosRampa25SetDireccionUltimoID_PasoEi>:
void CControladorPasosRampa::SetDireccionUltimoID_Paso(int ultimoID)
{
 800ae96:	b480      	push	{r7}
 800ae98:	b083      	sub	sp, #12
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
 800ae9e:	6039      	str	r1, [r7, #0]
	DireccionUltimoID_Paso=	ultimoID;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	683a      	ldr	r2, [r7, #0]
 800aea4:	60da      	str	r2, [r3, #12]
}
 800aea6:	bf00      	nop
 800aea8:	370c      	adds	r7, #12
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb0:	4770      	bx	lr

0800aeb2 <_ZN22CControladorPasosRampa22SetDireccionTablaPasosEi>:

void CControladorPasosRampa::SetDireccionTablaPasos(int direccion)
{
 800aeb2:	b480      	push	{r7}
 800aeb4:	b083      	sub	sp, #12
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
 800aeba:	6039      	str	r1, [r7, #0]
	DireccionTablaPasos=direccion;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	683a      	ldr	r2, [r7, #0]
 800aec0:	615a      	str	r2, [r3, #20]
}
 800aec2:	bf00      	nop
 800aec4:	370c      	adds	r7, #12
 800aec6:	46bd      	mov	sp, r7
 800aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aecc:	4770      	bx	lr

0800aece <_ZN22CControladorPasosRampa20SetNumeroMaximoPasosEi>:
void CControladorPasosRampa::SetNumeroMaximoPasos(int valor)
{
 800aece:	b480      	push	{r7}
 800aed0:	b083      	sub	sp, #12
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	6078      	str	r0, [r7, #4]
 800aed6:	6039      	str	r1, [r7, #0]
	NUMERO_MAXIMO_PASOS=valor;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	683a      	ldr	r2, [r7, #0]
 800aedc:	605a      	str	r2, [r3, #4]
}
 800aede:	bf00      	nop
 800aee0:	370c      	adds	r7, #12
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr

0800aeea <_ZN22CControladorPasosRampa13GetBytesXPasoEv>:
int CControladorPasosRampa::GetBytesXPaso()
{
 800aeea:	b480      	push	{r7}
 800aeec:	b083      	sub	sp, #12
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
	return BytesPaso;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	689b      	ldr	r3, [r3, #8]
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	370c      	adds	r7, #12
 800aefa:	46bd      	mov	sp, r7
 800aefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af00:	4770      	bx	lr

0800af02 <_ZN22CControladorPasosRampa20GetNumeroMaximoPasosEv>:
int CControladorPasosRampa::GetNumeroMaximoPasos()
{
 800af02:	b480      	push	{r7}
 800af04:	b083      	sub	sp, #12
 800af06:	af00      	add	r7, sp, #0
 800af08:	6078      	str	r0, [r7, #4]
	return NUMERO_MAXIMO_PASOS;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	685b      	ldr	r3, [r3, #4]
}
 800af0e:	4618      	mov	r0, r3
 800af10:	370c      	adds	r7, #12
 800af12:	46bd      	mov	sp, r7
 800af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af18:	4770      	bx	lr

0800af1a <_ZN22CControladorPasosRampa22GetDireccionTablaPasosEv>:
int CControladorPasosRampa::GetDireccionTablaPasos()
{
 800af1a:	b480      	push	{r7}
 800af1c:	b083      	sub	sp, #12
 800af1e:	af00      	add	r7, sp, #0
 800af20:	6078      	str	r0, [r7, #4]
	return DireccionTablaPasos;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	695b      	ldr	r3, [r3, #20]
}
 800af26:	4618      	mov	r0, r3
 800af28:	370c      	adds	r7, #12
 800af2a:	46bd      	mov	sp, r7
 800af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af30:	4770      	bx	lr
	...

0800af34 <_ZN22CControladorPasosRampa15SetUltimoIDPadoEh>:
void CControladorPasosRampa::SetUltimoIDPado(uint8_t id)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b082      	sub	sp, #8
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
 800af3c:	460b      	mov	r3, r1
 800af3e:	70fb      	strb	r3, [r7, #3]
	UltimoID_Paso=id;
 800af40:	78fb      	ldrb	r3, [r7, #3]
 800af42:	b29a      	uxth	r2, r3
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	821a      	strh	r2, [r3, #16]
	Eprom.GuardaBytes(DireccionUltimoID_Paso, 2, (uint8_t*)&UltimoID_Paso);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	68db      	ldr	r3, [r3, #12]
 800af4c:	b299      	uxth	r1, r3
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	3310      	adds	r3, #16
 800af52:	2202      	movs	r2, #2
 800af54:	4803      	ldr	r0, [pc, #12]	@ (800af64 <_ZN22CControladorPasosRampa15SetUltimoIDPadoEh+0x30>)
 800af56:	f7f6 fd99 	bl	8001a8c <_ZN6CEprom11GuardaBytesEttPh>
}
 800af5a:	bf00      	nop
 800af5c:	3708      	adds	r7, #8
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}
 800af62:	bf00      	nop
 800af64:	20000318 	.word	0x20000318

0800af68 <_ZN22CControladorPasosRampa20DameNumeroPasosRampaEi>:
//-------------------------------------------------------------------------------------------------------------------------------
int CControladorPasosRampa::DameNumeroPasosRampa(int ID_Rampa)
{
 800af68:	b590      	push	{r4, r7, lr}
 800af6a:	b089      	sub	sp, #36	@ 0x24
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
	int npasos=0;
 800af72:	2300      	movs	r3, #0
 800af74:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800af76:	2300      	movs	r3, #0
 800af78:	61bb      	str	r3, [r7, #24]
 800af7a:	e026      	b.n	800afca <_ZN22CControladorPasosRampa20DameNumeroPasosRampaEi+0x62>
	{
		int direccionPaso = DireccionTablaPasos + (BytesPaso * i);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	695a      	ldr	r2, [r3, #20]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	689b      	ldr	r3, [r3, #8]
 800af84:	69b9      	ldr	r1, [r7, #24]
 800af86:	fb01 f303 	mul.w	r3, r1, r3
 800af8a:	4413      	add	r3, r2
 800af8c:	617b      	str	r3, [r7, #20]
		CPaso pasoTmp=LeePasoMemoria(direccionPaso);
 800af8e:	f107 0308 	add.w	r3, r7, #8
 800af92:	697a      	ldr	r2, [r7, #20]
 800af94:	6879      	ldr	r1, [r7, #4]
 800af96:	4618      	mov	r0, r3
 800af98:	f7ff fe98 	bl	800accc <_ZN22CControladorPasosRampa14LeePasoMemoriaEi>
		if (pasoTmp.Ocupado != true)
 800af9c:	7b3b      	ldrb	r3, [r7, #12]
 800af9e:	2b01      	cmp	r3, #1
 800afa0:	d001      	beq.n	800afa6 <_ZN22CControladorPasosRampa20DameNumeroPasosRampaEi+0x3e>
			continue;
 800afa2:	2400      	movs	r4, #0
 800afa4:	e008      	b.n	800afb8 <_ZN22CControladorPasosRampa20DameNumeroPasosRampaEi+0x50>
		if (pasoTmp.ID_Rampa == ID_Rampa)
 800afa6:	7b7b      	ldrb	r3, [r7, #13]
 800afa8:	461a      	mov	r2, r3
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	4293      	cmp	r3, r2
 800afae:	d102      	bne.n	800afb6 <_ZN22CControladorPasosRampa20DameNumeroPasosRampaEi+0x4e>
		{
			npasos++;
 800afb0:	69fb      	ldr	r3, [r7, #28]
 800afb2:	3301      	adds	r3, #1
 800afb4:	61fb      	str	r3, [r7, #28]
		}
	}
 800afb6:	2401      	movs	r4, #1
 800afb8:	f107 0308 	add.w	r3, r7, #8
 800afbc:	4618      	mov	r0, r3
 800afbe:	f000 fd8d 	bl	800badc <_ZN5CPasoD1Ev>
 800afc2:	2c01      	cmp	r4, #1
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800afc4:	69bb      	ldr	r3, [r7, #24]
 800afc6:	3301      	adds	r3, #1
 800afc8:	61bb      	str	r3, [r7, #24]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	685b      	ldr	r3, [r3, #4]
 800afce:	69ba      	ldr	r2, [r7, #24]
 800afd0:	429a      	cmp	r2, r3
 800afd2:	dbd3      	blt.n	800af7c <_ZN22CControladorPasosRampa20DameNumeroPasosRampaEi+0x14>
	return npasos;
 800afd4:	69fb      	ldr	r3, [r7, #28]
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3724      	adds	r7, #36	@ 0x24
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd90      	pop	{r4, r7, pc}

0800afde <_ZN22CControladorPasosRampa17DameSiguientePasoEii>:
CPaso CControladorPasosRampa::DameSiguientePaso(int id_rampa, int id_pasActual)
{
 800afde:	b590      	push	{r4, r7, lr}
 800afe0:	b08b      	sub	sp, #44	@ 0x2c
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	60f8      	str	r0, [r7, #12]
 800afe6:	60b9      	str	r1, [r7, #8]
 800afe8:	607a      	str	r2, [r7, #4]
 800afea:	603b      	str	r3, [r7, #0]
	int id_paso=0;
 800afec:	2300      	movs	r3, #0
 800afee:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800aff0:	2300      	movs	r3, #0
 800aff2:	623b      	str	r3, [r7, #32]
 800aff4:	e03c      	b.n	800b070 <_ZN22CControladorPasosRampa17DameSiguientePasoEii+0x92>
	{
		int direccionPaso = DireccionTablaPasos + (BytesPaso * i);
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	695a      	ldr	r2, [r3, #20]
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	689b      	ldr	r3, [r3, #8]
 800affe:	6a39      	ldr	r1, [r7, #32]
 800b000:	fb01 f303 	mul.w	r3, r1, r3
 800b004:	4413      	add	r3, r2
 800b006:	61fb      	str	r3, [r7, #28]
		CPaso pasoTmp=LeePasoMemoria(direccionPaso);
 800b008:	f107 0310 	add.w	r3, r7, #16
 800b00c:	69fa      	ldr	r2, [r7, #28]
 800b00e:	68b9      	ldr	r1, [r7, #8]
 800b010:	4618      	mov	r0, r3
 800b012:	f7ff fe5b 	bl	800accc <_ZN22CControladorPasosRampa14LeePasoMemoriaEi>
		if (pasoTmp.Ocupado != true)
 800b016:	7d3b      	ldrb	r3, [r7, #20]
 800b018:	2b01      	cmp	r3, #1
 800b01a:	d001      	beq.n	800b020 <_ZN22CControladorPasosRampa17DameSiguientePasoEii+0x42>
			continue;
 800b01c:	2400      	movs	r4, #0
 800b01e:	e01e      	b.n	800b05e <_ZN22CControladorPasosRampa17DameSiguientePasoEii+0x80>
		if (pasoTmp.ID_Rampa != id_rampa)
 800b020:	7d7b      	ldrb	r3, [r7, #21]
 800b022:	461a      	mov	r2, r3
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	4293      	cmp	r3, r2
 800b028:	d001      	beq.n	800b02e <_ZN22CControladorPasosRampa17DameSiguientePasoEii+0x50>
			continue;
 800b02a:	2400      	movs	r4, #0
 800b02c:	e017      	b.n	800b05e <_ZN22CControladorPasosRampa17DameSiguientePasoEii+0x80>
		if(pasoTmp.ID_Paso<=id_pasActual)
 800b02e:	7dbb      	ldrb	r3, [r7, #22]
 800b030:	461a      	mov	r2, r3
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	4293      	cmp	r3, r2
 800b036:	db01      	blt.n	800b03c <_ZN22CControladorPasosRampa17DameSiguientePasoEii+0x5e>
			continue;
 800b038:	2400      	movs	r4, #0
 800b03a:	e010      	b.n	800b05e <_ZN22CControladorPasosRampa17DameSiguientePasoEii+0x80>
		if(id_paso==0)
 800b03c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d103      	bne.n	800b04a <_ZN22CControladorPasosRampa17DameSiguientePasoEii+0x6c>
		{
			id_paso=pasoTmp.ID_Paso;
 800b042:	7dbb      	ldrb	r3, [r7, #22]
 800b044:	627b      	str	r3, [r7, #36]	@ 0x24
			continue;
 800b046:	2400      	movs	r4, #0
 800b048:	e009      	b.n	800b05e <_ZN22CControladorPasosRampa17DameSiguientePasoEii+0x80>
		}
		if(id_paso<=pasoTmp.ID_Paso)
 800b04a:	7dbb      	ldrb	r3, [r7, #22]
 800b04c:	461a      	mov	r2, r3
 800b04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b050:	4293      	cmp	r3, r2
 800b052:	dc01      	bgt.n	800b058 <_ZN22CControladorPasosRampa17DameSiguientePasoEii+0x7a>
			continue;
 800b054:	2400      	movs	r4, #0
 800b056:	e002      	b.n	800b05e <_ZN22CControladorPasosRampa17DameSiguientePasoEii+0x80>
		id_paso=pasoTmp.ID_Paso;
 800b058:	7dbb      	ldrb	r3, [r7, #22]
 800b05a:	627b      	str	r3, [r7, #36]	@ 0x24
	}
 800b05c:	2401      	movs	r4, #1
 800b05e:	f107 0310 	add.w	r3, r7, #16
 800b062:	4618      	mov	r0, r3
 800b064:	f000 fd3a 	bl	800badc <_ZN5CPasoD1Ev>
 800b068:	2c01      	cmp	r4, #1
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800b06a:	6a3b      	ldr	r3, [r7, #32]
 800b06c:	3301      	adds	r3, #1
 800b06e:	623b      	str	r3, [r7, #32]
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	6a3a      	ldr	r2, [r7, #32]
 800b076:	429a      	cmp	r2, r3
 800b078:	dbbd      	blt.n	800aff6 <_ZN22CControladorPasosRampa17DameSiguientePasoEii+0x18>
	return DamePasoRampa(id_paso);
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b07e:	68b9      	ldr	r1, [r7, #8]
 800b080:	4618      	mov	r0, r3
 800b082:	f000 f804 	bl	800b08e <_ZN22CControladorPasosRampa13DamePasoRampaEi>
}
 800b086:	68f8      	ldr	r0, [r7, #12]
 800b088:	372c      	adds	r7, #44	@ 0x2c
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd90      	pop	{r4, r7, pc}

0800b08e <_ZN22CControladorPasosRampa13DamePasoRampaEi>:
CPaso CControladorPasosRampa::DamePasoRampa(int ID_Paso)
{
 800b08e:	b590      	push	{r4, r7, lr}
 800b090:	b08d      	sub	sp, #52	@ 0x34
 800b092:	af00      	add	r7, sp, #0
 800b094:	60f8      	str	r0, [r7, #12]
 800b096:	60b9      	str	r1, [r7, #8]
 800b098:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800b09a:	2300      	movs	r3, #0
 800b09c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b09e:	e027      	b.n	800b0f0 <_ZN22CControladorPasosRampa13DamePasoRampaEi+0x62>
	{
		int direccionPaso = DireccionTablaPasos + (BytesPaso * i);
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	695a      	ldr	r2, [r3, #20]
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	689b      	ldr	r3, [r3, #8]
 800b0a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b0aa:	fb01 f303 	mul.w	r3, r1, r3
 800b0ae:	4413      	add	r3, r2
 800b0b0:	62bb      	str	r3, [r7, #40]	@ 0x28
		CPaso pasoTmp=LeePasoMemoria(direccionPaso);
 800b0b2:	f107 0310 	add.w	r3, r7, #16
 800b0b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b0b8:	68b9      	ldr	r1, [r7, #8]
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f7ff fe06 	bl	800accc <_ZN22CControladorPasosRampa14LeePasoMemoriaEi>
		if (pasoTmp.ID_Paso != ID_Paso)
 800b0c0:	7dbb      	ldrb	r3, [r7, #22]
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d001      	beq.n	800b0ce <_ZN22CControladorPasosRampa13DamePasoRampaEi+0x40>
			continue;
 800b0ca:	2400      	movs	r4, #0
 800b0cc:	e006      	b.n	800b0dc <_ZN22CControladorPasosRampa13DamePasoRampaEi+0x4e>
		return pasoTmp;
 800b0ce:	f107 0310 	add.w	r3, r7, #16
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	68f8      	ldr	r0, [r7, #12]
 800b0d6:	f7ff fcf3 	bl	800aac0 <_ZN5CPasoC1ERKS_>
 800b0da:	2401      	movs	r4, #1
	}
 800b0dc:	f107 0310 	add.w	r3, r7, #16
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f000 fcfb 	bl	800badc <_ZN5CPasoD1Ev>
 800b0e6:	2c00      	cmp	r4, #0
 800b0e8:	d117      	bne.n	800b11a <_ZN22CControladorPasosRampa13DamePasoRampaEi+0x8c>
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800b0ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	685b      	ldr	r3, [r3, #4]
 800b0f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	dbd2      	blt.n	800b0a0 <_ZN22CControladorPasosRampa13DamePasoRampaEi+0x12>
	CPaso pasoTmp2;
 800b0fa:	f107 031c 	add.w	r3, r7, #28
 800b0fe:	4618      	mov	r0, r3
 800b100:	f000 fcca 	bl	800ba98 <_ZN5CPasoC1Ev>
	return pasoTmp2;
 800b104:	f107 031c 	add.w	r3, r7, #28
 800b108:	4619      	mov	r1, r3
 800b10a:	68f8      	ldr	r0, [r7, #12]
 800b10c:	f7ff fcd8 	bl	800aac0 <_ZN5CPasoC1ERKS_>
}
 800b110:	f107 031c 	add.w	r3, r7, #28
 800b114:	4618      	mov	r0, r3
 800b116:	f000 fce1 	bl	800badc <_ZN5CPasoD1Ev>
 800b11a:	68f8      	ldr	r0, [r7, #12]
 800b11c:	3734      	adds	r7, #52	@ 0x34
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd90      	pop	{r4, r7, pc}

0800b122 <_ZN22CControladorPasosRampa16AgregarPasoRampaEihhh>:
bool CControladorPasosRampa::AgregarPasoRampa(int ID_Rampa, uint8_t Temperatura, uint8_t NivelAire, uint8_t Minutos)
{
 800b122:	b5b0      	push	{r4, r5, r7, lr}
 800b124:	b08a      	sub	sp, #40	@ 0x28
 800b126:	af00      	add	r7, sp, #0
 800b128:	60f8      	str	r0, [r7, #12]
 800b12a:	60b9      	str	r1, [r7, #8]
 800b12c:	4611      	mov	r1, r2
 800b12e:	461a      	mov	r2, r3
 800b130:	460b      	mov	r3, r1
 800b132:	71fb      	strb	r3, [r7, #7]
 800b134:	4613      	mov	r3, r2
 800b136:	71bb      	strb	r3, [r7, #6]
 800b138:	2400      	movs	r4, #0
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800b13a:	2300      	movs	r3, #0
 800b13c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b13e:	e03a      	b.n	800b1b6 <_ZN22CControladorPasosRampa16AgregarPasoRampaEihhh+0x94>
	{
		int direccionPaso = DireccionTablaPasos + (BytesPaso * i);
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	695a      	ldr	r2, [r3, #20]
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	689b      	ldr	r3, [r3, #8]
 800b148:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b14a:	fb01 f303 	mul.w	r3, r1, r3
 800b14e:	4413      	add	r3, r2
 800b150:	623b      	str	r3, [r7, #32]
		CPaso pasoTmp=LeePasoMemoria(direccionPaso);
 800b152:	f107 0310 	add.w	r3, r7, #16
 800b156:	6a3a      	ldr	r2, [r7, #32]
 800b158:	68f9      	ldr	r1, [r7, #12]
 800b15a:	4618      	mov	r0, r3
 800b15c:	f7ff fdb6 	bl	800accc <_ZN22CControladorPasosRampa14LeePasoMemoriaEi>
		if (pasoTmp.Ocupado == 1)
 800b160:	7d3b      	ldrb	r3, [r7, #20]
 800b162:	2b01      	cmp	r3, #1
 800b164:	d101      	bne.n	800b16a <_ZN22CControladorPasosRampa16AgregarPasoRampaEihhh+0x48>
		{
			continue;
 800b166:	2500      	movs	r5, #0
 800b168:	e01b      	b.n	800b1a2 <_ZN22CControladorPasosRampa16AgregarPasoRampaEihhh+0x80>
		}
		pasoTmp.ID_Rampa = ID_Rampa;
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	b2db      	uxtb	r3, r3
 800b16e:	757b      	strb	r3, [r7, #21]
		int id_paso=DameSiguienteID_Paso();
 800b170:	68f8      	ldr	r0, [r7, #12]
 800b172:	f7ff fd10 	bl	800ab96 <_ZN22CControladorPasosRampa20DameSiguienteID_PasoEv>
 800b176:	61f8      	str	r0, [r7, #28]
		pasoTmp.ID_Paso =id_paso;
 800b178:	69fb      	ldr	r3, [r7, #28]
 800b17a:	b2db      	uxtb	r3, r3
 800b17c:	75bb      	strb	r3, [r7, #22]
		pasoTmp.Ocupado = 1;
 800b17e:	2301      	movs	r3, #1
 800b180:	753b      	strb	r3, [r7, #20]
		pasoTmp.NivelAire = NivelAire;
 800b182:	79bb      	ldrb	r3, [r7, #6]
 800b184:	763b      	strb	r3, [r7, #24]
		pasoTmp.Minutos = Minutos;
 800b186:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800b18a:	767b      	strb	r3, [r7, #25]
		pasoTmp.Temperatura = Temperatura;
 800b18c:	79fb      	ldrb	r3, [r7, #7]
 800b18e:	75fb      	strb	r3, [r7, #23]
		GuardaPasoMemoria(direccionPaso, &pasoTmp);
 800b190:	f107 0310 	add.w	r3, r7, #16
 800b194:	461a      	mov	r2, r3
 800b196:	6a39      	ldr	r1, [r7, #32]
 800b198:	68f8      	ldr	r0, [r7, #12]
 800b19a:	f7ff fd39 	bl	800ac10 <_ZN22CControladorPasosRampa17GuardaPasoMemoriaEiP5CPaso>
		return true;
 800b19e:	2401      	movs	r4, #1
 800b1a0:	2501      	movs	r5, #1
	}
 800b1a2:	f107 0310 	add.w	r3, r7, #16
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f000 fc98 	bl	800badc <_ZN5CPasoD1Ev>
 800b1ac:	2d00      	cmp	r5, #0
 800b1ae:	d108      	bne.n	800b1c2 <_ZN22CControladorPasosRampa16AgregarPasoRampaEihhh+0xa0>
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800b1b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1b2:	3301      	adds	r3, #1
 800b1b4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	dbbf      	blt.n	800b140 <_ZN22CControladorPasosRampa16AgregarPasoRampaEihhh+0x1e>
	return false;
 800b1c0:	2400      	movs	r4, #0
}
 800b1c2:	4623      	mov	r3, r4
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3728      	adds	r7, #40	@ 0x28
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bdb0      	pop	{r4, r5, r7, pc}

0800b1cc <_ZN18CControladorRampasC1Ev>:
#include <RapaTemperatura/CRampa.hpp>
#include <RapaTemperatura/CPaso.hpp>
#include<string.h>
#include <RapaTemperatura/CControladorPasosRampa.hpp>

CControladorRampas::CControladorRampas()
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b086      	sub	sp, #24
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	4a2f      	ldr	r2, [pc, #188]	@ (800b294 <_ZN18CControladorRampasC1Ev+0xc8>)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	601a      	str	r2, [r3, #0]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	4a2e      	ldr	r2, [pc, #184]	@ (800b298 <_ZN18CControladorRampasC1Ev+0xcc>)
 800b1de:	605a      	str	r2, [r3, #4]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	221e      	movs	r2, #30
 800b1e4:	609a      	str	r2, [r3, #8]
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f04f 32ff 	mov.w	r2, #4294967295
 800b1ec:	60da      	str	r2, [r3, #12]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b1f4:	611a      	str	r2, [r3, #16]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f04f 32ff 	mov.w	r2, #4294967295
 800b1fc:	615a      	str	r2, [r3, #20]
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2200      	movs	r2, #0
 800b202:	62da      	str	r2, [r3, #44]	@ 0x2c
{
	// TODO Auto-generated constructor stub
	int capacidadMemoriaInstalada = Eprom.DameCapacidadMaximaMemoria();
 800b204:	4825      	ldr	r0, [pc, #148]	@ (800b29c <_ZN18CControladorRampasC1Ev+0xd0>)
 800b206:	f7f6 fcbf 	bl	8001b88 <_ZN6CEprom26DameCapacidadMaximaMemoriaEv>
 800b20a:	6178      	str	r0, [r7, #20]
	DireccionInicial = Eprom.DameDireccionInicioRampas();
 800b20c:	4823      	ldr	r0, [pc, #140]	@ (800b29c <_ZN18CControladorRampasC1Ev+0xd0>)
 800b20e:	f7f6 fc31 	bl	8001a74 <_ZN6CEprom25DameDireccionInicioRampasEv>
 800b212:	4602      	mov	r2, r0
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	611a      	str	r2, [r3, #16]
	DireccionKey = DireccionInicial;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	691a      	ldr	r2, [r3, #16]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	61da      	str	r2, [r3, #28]
	DireccionUltimoID_Rampa = DireccionKey + 3;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	69db      	ldr	r3, [r3, #28]
 800b224:	1cda      	adds	r2, r3, #3
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	621a      	str	r2, [r3, #32]
	int direccionUltimoID_Paso=DireccionUltimoID_Rampa + 2;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6a1b      	ldr	r3, [r3, #32]
 800b22e:	3302      	adds	r3, #2
 800b230:	613b      	str	r3, [r7, #16]
	ControladorPasosRampa.SetDireccionUltimoID_Paso(direccionUltimoID_Paso);
 800b232:	6939      	ldr	r1, [r7, #16]
 800b234:	481a      	ldr	r0, [pc, #104]	@ (800b2a0 <_ZN18CControladorRampasC1Ev+0xd4>)
 800b236:	f7ff fe2e 	bl	800ae96 <_ZN22CControladorPasosRampa25SetDireccionUltimoID_PasoEi>
	DireccionTablaRampas = direccionUltimoID_Paso + 2;
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	1c9a      	adds	r2, r3, #2
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	629a      	str	r2, [r3, #40]	@ 0x28
	BytesRampa = sizeof(CRampa);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2218      	movs	r2, #24
 800b246:	615a      	str	r2, [r3, #20]
	int direccionTablaPasos= DireccionTablaRampas + (BytesRampa * NUMERO_MAXIMO_RAMPAS);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	695b      	ldr	r3, [r3, #20]
 800b250:	6879      	ldr	r1, [r7, #4]
 800b252:	6889      	ldr	r1, [r1, #8]
 800b254:	fb01 f303 	mul.w	r3, r1, r3
 800b258:	4413      	add	r3, r2
 800b25a:	60fb      	str	r3, [r7, #12]
	ControladorPasosRampa.SetDireccionTablaPasos(direccionTablaPasos);
 800b25c:	68f9      	ldr	r1, [r7, #12]
 800b25e:	4810      	ldr	r0, [pc, #64]	@ (800b2a0 <_ZN18CControladorRampasC1Ev+0xd4>)
 800b260:	f7ff fe27 	bl	800aeb2 <_ZN22CControladorPasosRampa22SetDireccionTablaPasosEi>
	int bytesPaso = ControladorPasosRampa.GetBytesXPaso();
 800b264:	480e      	ldr	r0, [pc, #56]	@ (800b2a0 <_ZN18CControladorRampasC1Ev+0xd4>)
 800b266:	f7ff fe40 	bl	800aeea <_ZN22CControladorPasosRampa13GetBytesXPasoEv>
 800b26a:	60b8      	str	r0, [r7, #8]
	ControladorPasosRampa.SetNumeroMaximoPasos( (capacidadMemoriaInstalada - direccionTablaPasos) / bytesPaso);
 800b26c:	697a      	ldr	r2, [r7, #20]
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	1ad2      	subs	r2, r2, r3
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	fb92 f3f3 	sdiv	r3, r2, r3
 800b278:	4619      	mov	r1, r3
 800b27a:	4809      	ldr	r0, [pc, #36]	@ (800b2a0 <_ZN18CControladorRampasC1Ev+0xd4>)
 800b27c:	f7ff fe27 	bl	800aece <_ZN22CControladorPasosRampa20SetNumeroMaximoPasosEi>
	UltimoID_Rampa = -1;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b286:	849a      	strh	r2, [r3, #36]	@ 0x24
}
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	4618      	mov	r0, r3
 800b28c:	3718      	adds	r7, #24
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}
 800b292:	bf00      	nop
 800b294:	0801617c 	.word	0x0801617c
 800b298:	08014c54 	.word	0x08014c54
 800b29c:	20000318 	.word	0x20000318
 800b2a0:	200001f4 	.word	0x200001f4

0800b2a4 <_ZN18CControladorRampasD1Ev>:

CControladorRampas::~CControladorRampas()
 800b2a4:	b480      	push	{r7}
 800b2a6:	b083      	sub	sp, #12
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	4a04      	ldr	r2, [pc, #16]	@ (800b2c0 <_ZN18CControladorRampasD1Ev+0x1c>)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	370c      	adds	r7, #12
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr
 800b2c0:	0801617c 	.word	0x0801617c

0800b2c4 <_ZN18CControladorRampasD0Ev>:
CControladorRampas::~CControladorRampas()
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b082      	sub	sp, #8
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
}
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f7ff ffe9 	bl	800b2a4 <_ZN18CControladorRampasD1Ev>
 800b2d2:	2130      	movs	r1, #48	@ 0x30
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f006 fbd9 	bl	8011a8c <_ZdlPvj>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3708      	adds	r7, #8
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <_ZN18CControladorRampas19MemoriaInicialidadaEv>:


bool CControladorRampas::MemoriaInicialidada()
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b084      	sub	sp, #16
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
	Eprom.LeeBytes(DireccionKey, 3, (uint8_t*)&Key);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	69d9      	ldr	r1, [r3, #28]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	3318      	adds	r3, #24
 800b2f4:	2203      	movs	r2, #3
 800b2f6:	480f      	ldr	r0, [pc, #60]	@ (800b334 <_ZN18CControladorRampas19MemoriaInicialidadaEv+0x50>)
 800b2f8:	f7f6 fc16 	bl	8001b28 <_ZN6CEprom8LeeBytesEiiPh>
	//char key[] = "OSC";
	for (int i = 0; i < 3; i++)
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	60fb      	str	r3, [r7, #12]
 800b300:	e010      	b.n	800b324 <_ZN18CControladorRampas19MemoriaInicialidadaEv+0x40>
	{
		if (Key[i] != KEY[i])
 800b302:	687a      	ldr	r2, [r7, #4]
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	4413      	add	r3, r2
 800b308:	3318      	adds	r3, #24
 800b30a:	781a      	ldrb	r2, [r3, #0]
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6859      	ldr	r1, [r3, #4]
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	440b      	add	r3, r1
 800b314:	781b      	ldrb	r3, [r3, #0]
 800b316:	429a      	cmp	r2, r3
 800b318:	d001      	beq.n	800b31e <_ZN18CControladorRampas19MemoriaInicialidadaEv+0x3a>
		{
			return false;
 800b31a:	2300      	movs	r3, #0
 800b31c:	e006      	b.n	800b32c <_ZN18CControladorRampas19MemoriaInicialidadaEv+0x48>
	for (int i = 0; i < 3; i++)
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	3301      	adds	r3, #1
 800b322:	60fb      	str	r3, [r7, #12]
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2b02      	cmp	r3, #2
 800b328:	ddeb      	ble.n	800b302 <_ZN18CControladorRampas19MemoriaInicialidadaEv+0x1e>
		}
	}
	return true;
 800b32a:	2301      	movs	r3, #1
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3710      	adds	r7, #16
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}
 800b334:	20000318 	.word	0x20000318

0800b338 <_ZN18CControladorRampas17InicializaMemoriaEv>:

void CControladorRampas::InicializaMemoria()
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b094      	sub	sp, #80	@ 0x50
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
	CRampa rampa;
 800b340:	f107 0314 	add.w	r3, r7, #20
 800b344:	4618      	mov	r0, r3
 800b346:	f000 fbe9 	bl	800bb1c <_ZN6CRampaC1Ev>
	CPaso paso;
 800b34a:	f107 0308 	add.w	r3, r7, #8
 800b34e:	4618      	mov	r0, r3
 800b350:	f000 fba2 	bl	800ba98 <_ZN5CPasoC1Ev>
	int direccionRampa;
	int direccionPaso;
	int progreso = 0;
 800b354:	2300      	movs	r3, #0
 800b356:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int numeroMaximoPasos=ControladorPasosRampa.GetNumeroMaximoPasos();
 800b358:	4854      	ldr	r0, [pc, #336]	@ (800b4ac <_ZN18CControladorRampas17InicializaMemoriaEv+0x174>)
 800b35a:	f7ff fdd2 	bl	800af02 <_ZN22CControladorPasosRampa20GetNumeroMaximoPasosEv>
 800b35e:	6438      	str	r0, [r7, #64]	@ 0x40
	int direccionTablaPasos=ControladorPasosRampa.GetDireccionTablaPasos();
 800b360:	4852      	ldr	r0, [pc, #328]	@ (800b4ac <_ZN18CControladorRampas17InicializaMemoriaEv+0x174>)
 800b362:	f7ff fdda 	bl	800af1a <_ZN22CControladorPasosRampa22GetDireccionTablaPasosEv>
 800b366:	63f8      	str	r0, [r7, #60]	@ 0x3c
	int bytesPaso=ControladorPasosRampa.GetBytesXPaso();
 800b368:	4850      	ldr	r0, [pc, #320]	@ (800b4ac <_ZN18CControladorRampas17InicializaMemoriaEv+0x174>)
 800b36a:	f7ff fdbe 	bl	800aeea <_ZN22CControladorPasosRampa13GetBytesXPasoEv>
 800b36e:	63b8      	str	r0, [r7, #56]	@ 0x38
	int maximo = NUMERO_MAXIMO_RAMPAS + numeroMaximoPasos;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	689b      	ldr	r3, [r3, #8]
 800b374:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b376:	4413      	add	r3, r2
 800b378:	637b      	str	r3, [r7, #52]	@ 0x34

	if (ControlProgreso != NULL)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d009      	beq.n	800b396 <_ZN18CControladorRampas17InicializaMemoriaEv+0x5e>
		ControlProgreso->OnMensaje((char*) "Iniciando memoria");
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	330c      	adds	r3, #12
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	4947      	ldr	r1, [pc, #284]	@ (800b4b0 <_ZN18CControladorRampas17InicializaMemoriaEv+0x178>)
 800b392:	4610      	mov	r0, r2
 800b394:	4798      	blx	r3

	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800b396:	2300      	movs	r3, #0
 800b398:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b39a:	e023      	b.n	800b3e4 <_ZN18CControladorRampas17InicializaMemoriaEv+0xac>
	{
		if (ControlProgreso != NULL)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d00c      	beq.n	800b3be <_ZN18CControladorRampas17InicializaMemoriaEv+0x86>
		{
			ControlProgreso->OnProgreso(progreso, maximo);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	3308      	adds	r3, #8
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b3b4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b3b6:	4798      	blx	r3
			progreso++;
 800b3b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
		}
		direccionRampa = DireccionTablaRampas + (BytesRampa * i);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	695b      	ldr	r3, [r3, #20]
 800b3c6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800b3c8:	fb01 f303 	mul.w	r3, r1, r3
 800b3cc:	4413      	add	r3, r2
 800b3ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
		GuardaRampaMemoria(direccionRampa, &rampa);
 800b3d0:	f107 0314 	add.w	r3, r7, #20
 800b3d4:	461a      	mov	r2, r3
 800b3d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f000 f9ad 	bl	800b738 <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa>
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800b3de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	689b      	ldr	r3, [r3, #8]
 800b3e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b3ea:	429a      	cmp	r2, r3
 800b3ec:	dbd6      	blt.n	800b39c <_ZN18CControladorRampas17InicializaMemoriaEv+0x64>
	}

	for (int i = 0; i < numeroMaximoPasos; i++)
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3f2:	e021      	b.n	800b438 <_ZN18CControladorRampas17InicializaMemoriaEv+0x100>
	{
		if (ControlProgreso != NULL)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d00c      	beq.n	800b416 <_ZN18CControladorRampas17InicializaMemoriaEv+0xde>
		{
			ControlProgreso->OnProgreso(progreso, maximo);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	3308      	adds	r3, #8
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b40c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b40e:	4798      	blx	r3
			progreso++;
 800b410:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b412:	3301      	adds	r3, #1
 800b414:	64fb      	str	r3, [r7, #76]	@ 0x4c
		}
		direccionPaso = direccionTablaPasos + (bytesPaso * i);
 800b416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b418:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b41a:	fb02 f303 	mul.w	r3, r2, r3
 800b41e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b420:	4413      	add	r3, r2
 800b422:	633b      	str	r3, [r7, #48]	@ 0x30
		ControladorPasosRampa.GuardaPasoMemoria(direccionPaso,&paso);
 800b424:	f107 0308 	add.w	r3, r7, #8
 800b428:	461a      	mov	r2, r3
 800b42a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b42c:	481f      	ldr	r0, [pc, #124]	@ (800b4ac <_ZN18CControladorRampas17InicializaMemoriaEv+0x174>)
 800b42e:	f7ff fbef 	bl	800ac10 <_ZN22CControladorPasosRampa17GuardaPasoMemoriaEiP5CPaso>
	for (int i = 0; i < numeroMaximoPasos; i++)
 800b432:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b434:	3301      	adds	r3, #1
 800b436:	647b      	str	r3, [r7, #68]	@ 0x44
 800b438:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b43a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b43c:	429a      	cmp	r2, r3
 800b43e:	dbd9      	blt.n	800b3f4 <_ZN18CControladorRampas17InicializaMemoriaEv+0xbc>
	}
	UltimoID_Rampa = 0;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2200      	movs	r2, #0
 800b444:	849a      	strh	r2, [r3, #36]	@ 0x24
	Eprom.GuardaBytes(DireccionUltimoID_Rampa, 2, (uint8_t*)&UltimoID_Rampa);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6a1b      	ldr	r3, [r3, #32]
 800b44a:	b299      	uxth	r1, r3
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	3324      	adds	r3, #36	@ 0x24
 800b450:	2202      	movs	r2, #2
 800b452:	4818      	ldr	r0, [pc, #96]	@ (800b4b4 <_ZN18CControladorRampas17InicializaMemoriaEv+0x17c>)
 800b454:	f7f6 fb1a 	bl	8001a8c <_ZN6CEprom11GuardaBytesEttPh>
	ControladorPasosRampa.SetUltimoIDPado(0);
 800b458:	2100      	movs	r1, #0
 800b45a:	4814      	ldr	r0, [pc, #80]	@ (800b4ac <_ZN18CControladorRampas17InicializaMemoriaEv+0x174>)
 800b45c:	f7ff fd6a 	bl	800af34 <_ZN22CControladorPasosRampa15SetUltimoIDPadoEh>
	Eprom.GuardaBytes(DireccionKey, 3,(uint8_t*) KEY);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	69db      	ldr	r3, [r3, #28]
 800b464:	b299      	uxth	r1, r3
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	2203      	movs	r2, #3
 800b46c:	4811      	ldr	r0, [pc, #68]	@ (800b4b4 <_ZN18CControladorRampas17InicializaMemoriaEv+0x17c>)
 800b46e:	f7f6 fb0d 	bl	8001a8c <_ZN6CEprom11GuardaBytesEttPh>

	if (ControlProgreso != NULL)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b476:	2b00      	cmp	r3, #0
 800b478:	d00b      	beq.n	800b492 <_ZN18CControladorRampas17InicializaMemoriaEv+0x15a>
	{
		ControlProgreso->OnFinProgreso();
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	3310      	adds	r3, #16
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	4610      	mov	r0, r2
 800b48a:	4798      	blx	r3
		progreso++;
 800b48c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b48e:	3301      	adds	r3, #1
 800b490:	64fb      	str	r3, [r7, #76]	@ 0x4c
	}

}
 800b492:	f107 0308 	add.w	r3, r7, #8
 800b496:	4618      	mov	r0, r3
 800b498:	f000 fb20 	bl	800badc <_ZN5CPasoD1Ev>
 800b49c:	f107 0314 	add.w	r3, r7, #20
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f000 fb61 	bl	800bb68 <_ZN6CRampaD1Ev>
 800b4a6:	3750      	adds	r7, #80	@ 0x50
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	200001f4 	.word	0x200001f4
 800b4b0:	08014c58 	.word	0x08014c58
 800b4b4:	20000318 	.word	0x20000318

0800b4b8 <_ZN18CControladorRampas18SetControlProgresoEP16CControlProgreso>:

void CControladorRampas::SetControlProgreso(CControlProgreso *controlProgreso)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b083      	sub	sp, #12
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	6039      	str	r1, [r7, #0]
	ControlProgreso = controlProgreso;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	683a      	ldr	r2, [r7, #0]
 800b4c6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800b4c8:	bf00      	nop
 800b4ca:	370c      	adds	r7, #12
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d2:	4770      	bx	lr

0800b4d4 <_ZN18CControladorRampas16DameNumeroRampasEv>:

int CControladorRampas::DameNumeroRampas()
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b08a      	sub	sp, #40	@ 0x28
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
	if (TotalRampas != -1)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	68db      	ldr	r3, [r3, #12]
 800b4e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4e4:	d002      	beq.n	800b4ec <_ZN18CControladorRampas16DameNumeroRampasEv+0x18>
		return TotalRampas;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	68db      	ldr	r3, [r3, #12]
 800b4ea:	e02c      	b.n	800b546 <_ZN18CControladorRampas16DameNumeroRampasEv+0x72>
	TotalRampas = 0;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	60da      	str	r2, [r3, #12]
	//recorro toda la tabla de rampas y cuento las que estan activas
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4f6:	e01f      	b.n	800b538 <_ZN18CControladorRampas16DameNumeroRampasEv+0x64>
	{
		int direccionRampa = DireccionTablaRampas + (BytesRampa * i);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	695b      	ldr	r3, [r3, #20]
 800b500:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b502:	fb01 f303 	mul.w	r3, r1, r3
 800b506:	4413      	add	r3, r2
 800b508:	623b      	str	r3, [r7, #32]
		//me traigo los datos de la rampa de la memoria
		CRampa rampa=LeeRampaMemoria(direccionRampa);
 800b50a:	f107 0308 	add.w	r3, r7, #8
 800b50e:	6a3a      	ldr	r2, [r7, #32]
 800b510:	6879      	ldr	r1, [r7, #4]
 800b512:	4618      	mov	r0, r3
 800b514:	f000 f8c4 	bl	800b6a0 <_ZN18CControladorRampas15LeeRampaMemoriaEi>
		if (rampa.Ocupado == true)
 800b518:	7b3b      	ldrb	r3, [r7, #12]
 800b51a:	2b01      	cmp	r3, #1
 800b51c:	d104      	bne.n	800b528 <_ZN18CControladorRampas16DameNumeroRampasEv+0x54>
			TotalRampas++;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	68db      	ldr	r3, [r3, #12]
 800b522:	1c5a      	adds	r2, r3, #1
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	60da      	str	r2, [r3, #12]
	}
 800b528:	f107 0308 	add.w	r3, r7, #8
 800b52c:	4618      	mov	r0, r3
 800b52e:	f000 fb1b 	bl	800bb68 <_ZN6CRampaD1Ev>
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800b532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b534:	3301      	adds	r3, #1
 800b536:	627b      	str	r3, [r7, #36]	@ 0x24
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	689b      	ldr	r3, [r3, #8]
 800b53c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b53e:	429a      	cmp	r2, r3
 800b540:	dbda      	blt.n	800b4f8 <_ZN18CControladorRampas16DameNumeroRampasEv+0x24>
	return TotalRampas;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	68db      	ldr	r3, [r3, #12]
}
 800b546:	4618      	mov	r0, r3
 800b548:	3728      	adds	r7, #40	@ 0x28
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}

0800b54e <_ZN18CControladorRampas9DameRampaEi>:

CRampa CControladorRampas::DameRampa(int id_Rampa)
{
 800b54e:	b590      	push	{r4, r7, lr}
 800b550:	b095      	sub	sp, #84	@ 0x54
 800b552:	af00      	add	r7, sp, #0
 800b554:	60f8      	str	r0, [r7, #12]
 800b556:	60b9      	str	r1, [r7, #8]
 800b558:	607a      	str	r2, [r7, #4]

	int numeroRampa = 0;
 800b55a:	2300      	movs	r3, #0
 800b55c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	//recorro toda la tabla de rampas y cuento las que estan activas
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800b55e:	2300      	movs	r3, #0
 800b560:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b562:	e02f      	b.n	800b5c4 <_ZN18CControladorRampas9DameRampaEi+0x76>
	{
		int direccionRampa = DireccionTablaRampas + (BytesRampa * i);
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	695b      	ldr	r3, [r3, #20]
 800b56c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800b56e:	fb01 f303 	mul.w	r3, r1, r3
 800b572:	4413      	add	r3, r2
 800b574:	647b      	str	r3, [r7, #68]	@ 0x44
		//me traigo los datos de la rampa de la memoria
		CRampa tmpRampa=LeeRampaMemoria(direccionRampa);
 800b576:	f107 0314 	add.w	r3, r7, #20
 800b57a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b57c:	68b9      	ldr	r1, [r7, #8]
 800b57e:	4618      	mov	r0, r3
 800b580:	f000 f88e 	bl	800b6a0 <_ZN18CControladorRampas15LeeRampaMemoriaEi>
		if (tmpRampa.Ocupado == false)
 800b584:	7e3b      	ldrb	r3, [r7, #24]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d101      	bne.n	800b58e <_ZN18CControladorRampas9DameRampaEi+0x40>
			continue;
 800b58a:	2400      	movs	r4, #0
 800b58c:	e010      	b.n	800b5b0 <_ZN18CControladorRampas9DameRampaEi+0x62>
		numeroRampa++;
 800b58e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b590:	3301      	adds	r3, #1
 800b592:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (tmpRampa.ID_RAMPA != id_Rampa)
 800b594:	8b7b      	ldrh	r3, [r7, #26]
 800b596:	461a      	mov	r2, r3
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d001      	beq.n	800b5a2 <_ZN18CControladorRampas9DameRampaEi+0x54>
			continue;
 800b59e:	2400      	movs	r4, #0
 800b5a0:	e006      	b.n	800b5b0 <_ZN18CControladorRampas9DameRampaEi+0x62>
		return tmpRampa;
 800b5a2:	f107 0314 	add.w	r3, r7, #20
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	68f8      	ldr	r0, [r7, #12]
 800b5aa:	f000 fb1d 	bl	800bbe8 <_ZN6CRampaC1EOS_>
 800b5ae:	2401      	movs	r4, #1
	}
 800b5b0:	f107 0314 	add.w	r3, r7, #20
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f000 fad7 	bl	800bb68 <_ZN6CRampaD1Ev>
 800b5ba:	2c00      	cmp	r4, #0
 800b5bc:	d117      	bne.n	800b5ee <_ZN18CControladorRampas9DameRampaEi+0xa0>
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800b5be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	689b      	ldr	r3, [r3, #8]
 800b5c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	dbca      	blt.n	800b564 <_ZN18CControladorRampas9DameRampaEi+0x16>
	CRampa tmpRampa2;
 800b5ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f000 faa2 	bl	800bb1c <_ZN6CRampaC1Ev>
	return tmpRampa2;
 800b5d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b5dc:	4619      	mov	r1, r3
 800b5de:	68f8      	ldr	r0, [r7, #12]
 800b5e0:	f000 fb02 	bl	800bbe8 <_ZN6CRampaC1EOS_>
}
 800b5e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f000 fabd 	bl	800bb68 <_ZN6CRampaD1Ev>
 800b5ee:	68f8      	ldr	r0, [r7, #12]
 800b5f0:	3754      	adds	r7, #84	@ 0x54
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd90      	pop	{r4, r7, pc}

0800b5f6 <_ZN18CControladorRampas15DameRampaNumeroEi>:
CRampa CControladorRampas::DameRampaNumero(int posicion)
{
 800b5f6:	b590      	push	{r4, r7, lr}
 800b5f8:	b095      	sub	sp, #84	@ 0x54
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	60f8      	str	r0, [r7, #12]
 800b5fe:	60b9      	str	r1, [r7, #8]
 800b600:	607a      	str	r2, [r7, #4]

	int numeroRampa = 0;
 800b602:	2300      	movs	r3, #0
 800b604:	64fb      	str	r3, [r7, #76]	@ 0x4c
	//recorro toda la tabla de rampas y cuento las que estan activas
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800b606:	2300      	movs	r3, #0
 800b608:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b60a:	e02f      	b.n	800b66c <_ZN18CControladorRampas15DameRampaNumeroEi+0x76>
	{
		int direccionRampa = DireccionTablaRampas + (BytesRampa * i);
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	695b      	ldr	r3, [r3, #20]
 800b614:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800b616:	fb01 f303 	mul.w	r3, r1, r3
 800b61a:	4413      	add	r3, r2
 800b61c:	647b      	str	r3, [r7, #68]	@ 0x44
		//me traigo los datos de la rampa de la memoria
		CRampa tmpRampa=LeeRampaMemoria(direccionRampa);
 800b61e:	f107 0314 	add.w	r3, r7, #20
 800b622:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b624:	68b9      	ldr	r1, [r7, #8]
 800b626:	4618      	mov	r0, r3
 800b628:	f000 f83a 	bl	800b6a0 <_ZN18CControladorRampas15LeeRampaMemoriaEi>
		if (tmpRampa.Ocupado != true)
 800b62c:	7e3b      	ldrb	r3, [r7, #24]
 800b62e:	2b01      	cmp	r3, #1
 800b630:	d001      	beq.n	800b636 <_ZN18CControladorRampas15DameRampaNumeroEi+0x40>
			continue;
 800b632:	2400      	movs	r4, #0
 800b634:	e010      	b.n	800b658 <_ZN18CControladorRampas15DameRampaNumeroEi+0x62>
		numeroRampa++;
 800b636:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b638:	3301      	adds	r3, #1
 800b63a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (numeroRampa-1 != posicion)
 800b63c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b63e:	3b01      	subs	r3, #1
 800b640:	687a      	ldr	r2, [r7, #4]
 800b642:	429a      	cmp	r2, r3
 800b644:	d001      	beq.n	800b64a <_ZN18CControladorRampas15DameRampaNumeroEi+0x54>
			continue;
 800b646:	2400      	movs	r4, #0
 800b648:	e006      	b.n	800b658 <_ZN18CControladorRampas15DameRampaNumeroEi+0x62>
		return tmpRampa;
 800b64a:	f107 0314 	add.w	r3, r7, #20
 800b64e:	4619      	mov	r1, r3
 800b650:	68f8      	ldr	r0, [r7, #12]
 800b652:	f000 fac9 	bl	800bbe8 <_ZN6CRampaC1EOS_>
 800b656:	2401      	movs	r4, #1
	}
 800b658:	f107 0314 	add.w	r3, r7, #20
 800b65c:	4618      	mov	r0, r3
 800b65e:	f000 fa83 	bl	800bb68 <_ZN6CRampaD1Ev>
 800b662:	2c00      	cmp	r4, #0
 800b664:	d117      	bne.n	800b696 <_ZN18CControladorRampas15DameRampaNumeroEi+0xa0>
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800b666:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b668:	3301      	adds	r3, #1
 800b66a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	689b      	ldr	r3, [r3, #8]
 800b670:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b672:	429a      	cmp	r2, r3
 800b674:	dbca      	blt.n	800b60c <_ZN18CControladorRampas15DameRampaNumeroEi+0x16>
	CRampa tmpRampa2;
 800b676:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b67a:	4618      	mov	r0, r3
 800b67c:	f000 fa4e 	bl	800bb1c <_ZN6CRampaC1Ev>
	return tmpRampa2;
 800b680:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b684:	4619      	mov	r1, r3
 800b686:	68f8      	ldr	r0, [r7, #12]
 800b688:	f000 faae 	bl	800bbe8 <_ZN6CRampaC1EOS_>
}
 800b68c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b690:	4618      	mov	r0, r3
 800b692:	f000 fa69 	bl	800bb68 <_ZN6CRampaD1Ev>
 800b696:	68f8      	ldr	r0, [r7, #12]
 800b698:	3754      	adds	r7, #84	@ 0x54
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd90      	pop	{r4, r7, pc}
	...

0800b6a0 <_ZN18CControladorRampas15LeeRampaMemoriaEi>:
CRampa CControladorRampas::LeeRampaMemoria(int direccion)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b08a      	sub	sp, #40	@ 0x28
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	60f8      	str	r0, [r7, #12]
 800b6a8:	60b9      	str	r1, [r7, #8]
 800b6aa:	607a      	str	r2, [r7, #4]
	 * -----------------------------------------
	 */
	uint8_t ocupado;
	uint16_t id_rampa;
	char nombre[20];
	CRampa rampa;
 800b6ac:	68f8      	ldr	r0, [r7, #12]
 800b6ae:	f000 fa35 	bl	800bb1c <_ZN6CRampaC1Ev>
	//leo la bandera de ocupado
	Eprom.LeeBytes(direccion, 1, &ocupado);
 800b6b2:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	6879      	ldr	r1, [r7, #4]
 800b6ba:	481e      	ldr	r0, [pc, #120]	@ (800b734 <_ZN18CControladorRampas15LeeRampaMemoriaEi+0x94>)
 800b6bc:	f7f6 fa34 	bl	8001b28 <_ZN6CEprom8LeeBytesEiiPh>
	Eprom.LeeBytes(direccion, 1, &ocupado);
 800b6c0:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 800b6c4:	2201      	movs	r2, #1
 800b6c6:	6879      	ldr	r1, [r7, #4]
 800b6c8:	481a      	ldr	r0, [pc, #104]	@ (800b734 <_ZN18CControladorRampas15LeeRampaMemoriaEi+0x94>)
 800b6ca:	f7f6 fa2d 	bl	8001b28 <_ZN6CEprom8LeeBytesEiiPh>
	rampa.Ocupado=ocupado;
 800b6ce:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	711a      	strb	r2, [r3, #4]
	//leo el ID_RAMPA
	Eprom.LeeBytes(direccion+1, 2, (uint8_t*)&id_rampa);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	1c59      	adds	r1, r3, #1
 800b6da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b6de:	2202      	movs	r2, #2
 800b6e0:	4814      	ldr	r0, [pc, #80]	@ (800b734 <_ZN18CControladorRampas15LeeRampaMemoriaEi+0x94>)
 800b6e2:	f7f6 fa21 	bl	8001b28 <_ZN6CEprom8LeeBytesEiiPh>
	Eprom.LeeBytes(direccion+1, 2, (uint8_t*)&id_rampa);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	1c59      	adds	r1, r3, #1
 800b6ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b6ee:	2202      	movs	r2, #2
 800b6f0:	4810      	ldr	r0, [pc, #64]	@ (800b734 <_ZN18CControladorRampas15LeeRampaMemoriaEi+0x94>)
 800b6f2:	f7f6 fa19 	bl	8001b28 <_ZN6CEprom8LeeBytesEiiPh>
	rampa.ID_RAMPA=id_rampa;
 800b6f6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	80da      	strh	r2, [r3, #6]
	//leo el nombre
	Eprom.LeeBytes(direccion+3, 15, (uint8_t*)nombre);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	1cd9      	adds	r1, r3, #3
 800b700:	f107 0310 	add.w	r3, r7, #16
 800b704:	220f      	movs	r2, #15
 800b706:	480b      	ldr	r0, [pc, #44]	@ (800b734 <_ZN18CControladorRampas15LeeRampaMemoriaEi+0x94>)
 800b708:	f7f6 fa0e 	bl	8001b28 <_ZN6CEprom8LeeBytesEiiPh>
	Eprom.LeeBytes(direccion+3, 15, (uint8_t*)nombre);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	1cd9      	adds	r1, r3, #3
 800b710:	f107 0310 	add.w	r3, r7, #16
 800b714:	220f      	movs	r2, #15
 800b716:	4807      	ldr	r0, [pc, #28]	@ (800b734 <_ZN18CControladorRampas15LeeRampaMemoriaEi+0x94>)
 800b718:	f7f6 fa06 	bl	8001b28 <_ZN6CEprom8LeeBytesEiiPh>
	rampa.SetNombre(nombre);
 800b71c:	f107 0310 	add.w	r3, r7, #16
 800b720:	4619      	mov	r1, r3
 800b722:	68f8      	ldr	r0, [r7, #12]
 800b724:	f000 fa40 	bl	800bba8 <_ZN6CRampa9SetNombreEPc>
	return rampa;
 800b728:	bf00      	nop

}
 800b72a:	68f8      	ldr	r0, [r7, #12]
 800b72c:	3728      	adds	r7, #40	@ 0x28
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}
 800b732:	bf00      	nop
 800b734:	20000318 	.word	0x20000318

0800b738 <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa>:
void CControladorRampas::GuardaRampaMemoria(int direccion, CRampa *rampa)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b094      	sub	sp, #80	@ 0x50
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	60f8      	str	r0, [r7, #12]
 800b740:	60b9      	str	r1, [r7, #8]
 800b742:	607a      	str	r2, [r7, #4]
	//guardo la bandera de ocupado
	uint8_t ocupado;
	uint16_t id_rampa;
	char nombre[20];
	uint8_t tmp[30];
	ocupado=rampa->Ocupado;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	791b      	ldrb	r3, [r3, #4]
 800b748:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	id_rampa=rampa->ID_RAMPA;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	88db      	ldrh	r3, [r3, #6]
 800b750:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
	strcpy(nombre,rampa->Nombre);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f103 0208 	add.w	r2, r3, #8
 800b75a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800b75e:	4611      	mov	r1, r2
 800b760:	4618      	mov	r0, r3
 800b762:	f007 f8c8 	bl	80128f6 <strcpy>
	Eprom.GuardaBytes(direccion, 1, &ocupado);
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	b299      	uxth	r1, r3
 800b76a:	f107 034b 	add.w	r3, r7, #75	@ 0x4b
 800b76e:	2201      	movs	r2, #1
 800b770:	4827      	ldr	r0, [pc, #156]	@ (800b810 <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa+0xd8>)
 800b772:	f7f6 f98b 	bl	8001a8c <_ZN6CEprom11GuardaBytesEttPh>
	//guardo el ID_RAMPA
	Eprom.GuardaBytes(direccion+1, 2, (uint8_t*)&id_rampa);
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	b29b      	uxth	r3, r3
 800b77a:	3301      	adds	r3, #1
 800b77c:	b299      	uxth	r1, r3
 800b77e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800b782:	2202      	movs	r2, #2
 800b784:	4822      	ldr	r0, [pc, #136]	@ (800b810 <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa+0xd8>)
 800b786:	f7f6 f981 	bl	8001a8c <_ZN6CEprom11GuardaBytesEttPh>
	//guardo el nombre
	Eprom.GuardaBytes(direccion+3, 15, (uint8_t*)nombre);
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	b29b      	uxth	r3, r3
 800b78e:	3303      	adds	r3, #3
 800b790:	b299      	uxth	r1, r3
 800b792:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800b796:	220f      	movs	r2, #15
 800b798:	481d      	ldr	r0, [pc, #116]	@ (800b810 <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa+0xd8>)
 800b79a:	f7f6 f977 	bl	8001a8c <_ZN6CEprom11GuardaBytesEttPh>

	id_rampa=-1;
 800b79e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b7a2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
	ocupado=-1;
 800b7a6:	23ff      	movs	r3, #255	@ 0xff
 800b7a8:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	for(int i=0;i<15;i++)
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b7b0:	e008      	b.n	800b7c4 <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa+0x8c>
		nombre[i]='\0';
 800b7b2:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800b7b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7b8:	4413      	add	r3, r2
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<15;i++)
 800b7be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7c0:	3301      	adds	r3, #1
 800b7c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b7c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7c6:	2b0e      	cmp	r3, #14
 800b7c8:	ddf3      	ble.n	800b7b2 <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa+0x7a>

	Eprom.LeeBytes(direccion+3, 15, (uint8_t*)nombre);
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	1cd9      	adds	r1, r3, #3
 800b7ce:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800b7d2:	220f      	movs	r2, #15
 800b7d4:	480e      	ldr	r0, [pc, #56]	@ (800b810 <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa+0xd8>)
 800b7d6:	f7f6 f9a7 	bl	8001b28 <_ZN6CEprom8LeeBytesEiiPh>
	Eprom.LeeBytes(direccion+1, 2, (uint8_t*)&id_rampa);
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	1c59      	adds	r1, r3, #1
 800b7de:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800b7e2:	2202      	movs	r2, #2
 800b7e4:	480a      	ldr	r0, [pc, #40]	@ (800b810 <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa+0xd8>)
 800b7e6:	f7f6 f99f 	bl	8001b28 <_ZN6CEprom8LeeBytesEiiPh>
	Eprom.LeeBytes(direccion, 1, &ocupado);
 800b7ea:	f107 034b 	add.w	r3, r7, #75	@ 0x4b
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	68b9      	ldr	r1, [r7, #8]
 800b7f2:	4807      	ldr	r0, [pc, #28]	@ (800b810 <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa+0xd8>)
 800b7f4:	f7f6 f998 	bl	8001b28 <_ZN6CEprom8LeeBytesEiiPh>
	Eprom.LeeBytes(direccion, 18, tmp);
 800b7f8:	f107 0314 	add.w	r3, r7, #20
 800b7fc:	2212      	movs	r2, #18
 800b7fe:	68b9      	ldr	r1, [r7, #8]
 800b800:	4803      	ldr	r0, [pc, #12]	@ (800b810 <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa+0xd8>)
 800b802:	f7f6 f991 	bl	8001b28 <_ZN6CEprom8LeeBytesEiiPh>
}
 800b806:	bf00      	nop
 800b808:	3750      	adds	r7, #80	@ 0x50
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}
 800b80e:	bf00      	nop
 800b810:	20000318 	.word	0x20000318

0800b814 <_ZN18CControladorRampas11AgregaRampaEPc>:
CRampa CControladorRampas::AgregaRampa(char *nombre)
{
 800b814:	b590      	push	{r4, r7, lr}
 800b816:	b099      	sub	sp, #100	@ 0x64
 800b818:	af00      	add	r7, sp, #0
 800b81a:	60f8      	str	r0, [r7, #12]
 800b81c:	60b9      	str	r1, [r7, #8]
 800b81e:	607a      	str	r2, [r7, #4]
	//busco la primer ubicacion vacia para almacear la rampa
	//recorro toda la tabla de rampas y cuento las que estan activas
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800b820:	2300      	movs	r3, #0
 800b822:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b824:	e04d      	b.n	800b8c2 <_ZN18CControladorRampas11AgregaRampaEPc+0xae>
	{
		int direccionRampa = DireccionTablaRampas + (BytesRampa * i);
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	695b      	ldr	r3, [r3, #20]
 800b82e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800b830:	fb01 f303 	mul.w	r3, r1, r3
 800b834:	4413      	add	r3, r2
 800b836:	65bb      	str	r3, [r7, #88]	@ 0x58
		//me traigo los datos de la rampa de la memoria
		CRampa tmpRampa=LeeRampaMemoria(direccionRampa);
 800b838:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b83c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b83e:	68b9      	ldr	r1, [r7, #8]
 800b840:	4618      	mov	r0, r3
 800b842:	f7ff ff2d 	bl	800b6a0 <_ZN18CControladorRampas15LeeRampaMemoriaEi>
		if (tmpRampa.Ocupado == 0)
 800b846:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d12e      	bne.n	800b8ac <_ZN18CControladorRampas11AgregaRampaEPc+0x98>
		{
			tmpRampa.Ocupado = 1;
 800b84e:	2301      	movs	r3, #1
 800b850:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
			tmpRampa.ID_RAMPA = DameSiguienteID_Rampa();
 800b854:	68b8      	ldr	r0, [r7, #8]
 800b856:	f000 f8e1 	bl	800ba1c <_ZN18CControladorRampas21DameSiguienteID_RampaEv>
 800b85a:	4603      	mov	r3, r0
 800b85c:	b29b      	uxth	r3, r3
 800b85e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			tmpRampa.SetNombre(nombre);
 800b860:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b864:	6879      	ldr	r1, [r7, #4]
 800b866:	4618      	mov	r0, r3
 800b868:	f000 f99e 	bl	800bba8 <_ZN6CRampa9SetNombreEPc>
			TotalRampas++;
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	68db      	ldr	r3, [r3, #12]
 800b870:	1c5a      	adds	r2, r3, #1
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	60da      	str	r2, [r3, #12]
			GuardaRampaMemoria(direccionRampa,&tmpRampa);
 800b876:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b87a:	461a      	mov	r2, r3
 800b87c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b87e:	68b8      	ldr	r0, [r7, #8]
 800b880:	f7ff ff5a 	bl	800b738 <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa>
			CRampa rampa2=LeeRampaMemoria(direccionRampa);
 800b884:	f107 0310 	add.w	r3, r7, #16
 800b888:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b88a:	68b9      	ldr	r1, [r7, #8]
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7ff ff07 	bl	800b6a0 <_ZN18CControladorRampas15LeeRampaMemoriaEi>
			return tmpRampa;
 800b892:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b896:	4619      	mov	r1, r3
 800b898:	68f8      	ldr	r0, [r7, #12]
 800b89a:	f000 f9a5 	bl	800bbe8 <_ZN6CRampaC1EOS_>
		}
 800b89e:	f107 0310 	add.w	r3, r7, #16
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f000 f960 	bl	800bb68 <_ZN6CRampaD1Ev>
 800b8a8:	2400      	movs	r4, #0
 800b8aa:	e000      	b.n	800b8ae <_ZN18CControladorRampas11AgregaRampaEPc+0x9a>
	}
 800b8ac:	2401      	movs	r4, #1
 800b8ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f000 f958 	bl	800bb68 <_ZN6CRampaD1Ev>
 800b8b8:	2c01      	cmp	r4, #1
 800b8ba:	d117      	bne.n	800b8ec <_ZN18CControladorRampas11AgregaRampaEPc+0xd8>
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800b8bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b8be:	3301      	adds	r3, #1
 800b8c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	689b      	ldr	r3, [r3, #8]
 800b8c6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b8c8:	429a      	cmp	r2, r3
 800b8ca:	dbac      	blt.n	800b826 <_ZN18CControladorRampas11AgregaRampaEPc+0x12>
	CRampa tmpRampa2;
 800b8cc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f000 f923 	bl	800bb1c <_ZN6CRampaC1Ev>
	return tmpRampa2;
 800b8d6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800b8da:	4619      	mov	r1, r3
 800b8dc:	68f8      	ldr	r0, [r7, #12]
 800b8de:	f000 f983 	bl	800bbe8 <_ZN6CRampaC1EOS_>
}
 800b8e2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f000 f93e 	bl	800bb68 <_ZN6CRampaD1Ev>
 800b8ec:	68f8      	ldr	r0, [r7, #12]
 800b8ee:	3764      	adds	r7, #100	@ 0x64
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd90      	pop	{r4, r7, pc}

0800b8f4 <_ZN18CControladorRampas14ActualizaRampaEiPc>:

bool CControladorRampas::ActualizaRampa(int ID_Rampa, char *nombre)
{
 800b8f4:	b5b0      	push	{r4, r5, r7, lr}
 800b8f6:	b08c      	sub	sp, #48	@ 0x30
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	60f8      	str	r0, [r7, #12]
 800b8fc:	60b9      	str	r1, [r7, #8]
 800b8fe:	607a      	str	r2, [r7, #4]
 800b900:	2400      	movs	r4, #0
	//recorro toda la tabla de rampas y cuento las que estan activas
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800b902:	2300      	movs	r3, #0
 800b904:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b906:	e031      	b.n	800b96c <_ZN18CControladorRampas14ActualizaRampaEiPc+0x78>
	{
		int direccionRampa = DireccionTablaRampas + (BytesRampa * i);
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	695b      	ldr	r3, [r3, #20]
 800b910:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b912:	fb01 f303 	mul.w	r3, r1, r3
 800b916:	4413      	add	r3, r2
 800b918:	62bb      	str	r3, [r7, #40]	@ 0x28
		//me traigo los datos de la rampa de la memoria
		CRampa tmpRampa=LeeRampaMemoria(direccionRampa);
 800b91a:	f107 0310 	add.w	r3, r7, #16
 800b91e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b920:	68f9      	ldr	r1, [r7, #12]
 800b922:	4618      	mov	r0, r3
 800b924:	f7ff febc 	bl	800b6a0 <_ZN18CControladorRampas15LeeRampaMemoriaEi>
		if (tmpRampa.ID_RAMPA == ID_Rampa)
 800b928:	8afb      	ldrh	r3, [r7, #22]
 800b92a:	461a      	mov	r2, r3
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	4293      	cmp	r3, r2
 800b930:	d111      	bne.n	800b956 <_ZN18CControladorRampas14ActualizaRampaEiPc+0x62>
		{
			tmpRampa.Ocupado = 1;
 800b932:	2301      	movs	r3, #1
 800b934:	753b      	strb	r3, [r7, #20]
			tmpRampa.SetNombre(nombre);
 800b936:	f107 0310 	add.w	r3, r7, #16
 800b93a:	6879      	ldr	r1, [r7, #4]
 800b93c:	4618      	mov	r0, r3
 800b93e:	f000 f933 	bl	800bba8 <_ZN6CRampa9SetNombreEPc>
			GuardaRampaMemoria(direccionRampa,&tmpRampa);
 800b942:	f107 0310 	add.w	r3, r7, #16
 800b946:	461a      	mov	r2, r3
 800b948:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b94a:	68f8      	ldr	r0, [r7, #12]
 800b94c:	f7ff fef4 	bl	800b738 <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa>
			return true;
 800b950:	2401      	movs	r4, #1
 800b952:	2500      	movs	r5, #0
 800b954:	e000      	b.n	800b958 <_ZN18CControladorRampas14ActualizaRampaEiPc+0x64>
		}
	}
 800b956:	2501      	movs	r5, #1
 800b958:	f107 0310 	add.w	r3, r7, #16
 800b95c:	4618      	mov	r0, r3
 800b95e:	f000 f903 	bl	800bb68 <_ZN6CRampaD1Ev>
 800b962:	2d01      	cmp	r5, #1
 800b964:	d108      	bne.n	800b978 <_ZN18CControladorRampas14ActualizaRampaEiPc+0x84>
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800b966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b968:	3301      	adds	r3, #1
 800b96a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	689b      	ldr	r3, [r3, #8]
 800b970:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b972:	429a      	cmp	r2, r3
 800b974:	dbc8      	blt.n	800b908 <_ZN18CControladorRampas14ActualizaRampaEiPc+0x14>
	return false;
 800b976:	2400      	movs	r4, #0
}
 800b978:	4623      	mov	r3, r4
 800b97a:	4618      	mov	r0, r3
 800b97c:	3730      	adds	r7, #48	@ 0x30
 800b97e:	46bd      	mov	sp, r7
 800b980:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b984 <_ZN18CControladorRampas12EliminaRampaEi>:

bool CControladorRampas::EliminaRampa(int ID_Rampa)
{
 800b984:	b5b0      	push	{r4, r5, r7, lr}
 800b986:	b08a      	sub	sp, #40	@ 0x28
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
 800b98c:	6039      	str	r1, [r7, #0]
 800b98e:	2500      	movs	r5, #0
	//recorro toda la tabla de rampas y cuento las que estan activas
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800b990:	2300      	movs	r3, #0
 800b992:	627b      	str	r3, [r7, #36]	@ 0x24
 800b994:	e035      	b.n	800ba02 <_ZN18CControladorRampas12EliminaRampaEi+0x7e>
	{
		int direccionRampa = DireccionTablaRampas + (BytesRampa * i);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	695b      	ldr	r3, [r3, #20]
 800b99e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b9a0:	fb01 f303 	mul.w	r3, r1, r3
 800b9a4:	4413      	add	r3, r2
 800b9a6:	623b      	str	r3, [r7, #32]
		//me traigo los datos de la rampa de la memoria
		CRampa tmpRampa=LeeRampaMemoria(direccionRampa);
 800b9a8:	f107 0308 	add.w	r3, r7, #8
 800b9ac:	6a3a      	ldr	r2, [r7, #32]
 800b9ae:	6879      	ldr	r1, [r7, #4]
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f7ff fe75 	bl	800b6a0 <_ZN18CControladorRampas15LeeRampaMemoriaEi>
		if (tmpRampa.ID_RAMPA == ID_Rampa)
 800b9b6:	89fb      	ldrh	r3, [r7, #14]
 800b9b8:	461a      	mov	r2, r3
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d115      	bne.n	800b9ec <_ZN18CControladorRampas12EliminaRampaEi+0x68>
		{
			tmpRampa.Ocupado = 0;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	733b      	strb	r3, [r7, #12]
			GuardaRampaMemoria(direccionRampa,&tmpRampa);
 800b9c4:	f107 0308 	add.w	r3, r7, #8
 800b9c8:	461a      	mov	r2, r3
 800b9ca:	6a39      	ldr	r1, [r7, #32]
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f7ff feb3 	bl	800b738 <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa>
			//Eprom.GuardaBytes(direccionRampa, BytesRampa,(uint8_t*) &tmpRampa);
			TotalRampas--;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	68db      	ldr	r3, [r3, #12]
 800b9d6:	1e5a      	subs	r2, r3, #1
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	60da      	str	r2, [r3, #12]
			return ControladorPasosRampa.EliminaPasosRampa(ID_Rampa);
 800b9dc:	6839      	ldr	r1, [r7, #0]
 800b9de:	480e      	ldr	r0, [pc, #56]	@ (800ba18 <_ZN18CControladorRampas12EliminaRampaEi+0x94>)
 800b9e0:	f7ff f898 	bl	800ab14 <_ZN22CControladorPasosRampa17EliminaPasosRampaEi>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	461d      	mov	r5, r3
 800b9e8:	2400      	movs	r4, #0
 800b9ea:	e000      	b.n	800b9ee <_ZN18CControladorRampas12EliminaRampaEi+0x6a>
		}
	}
 800b9ec:	2401      	movs	r4, #1
 800b9ee:	f107 0308 	add.w	r3, r7, #8
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f000 f8b8 	bl	800bb68 <_ZN6CRampaD1Ev>
 800b9f8:	2c01      	cmp	r4, #1
 800b9fa:	d108      	bne.n	800ba0e <_ZN18CControladorRampas12EliminaRampaEi+0x8a>
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800b9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9fe:	3301      	adds	r3, #1
 800ba00:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	689b      	ldr	r3, [r3, #8]
 800ba06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	dbc4      	blt.n	800b996 <_ZN18CControladorRampas12EliminaRampaEi+0x12>
	return false;
 800ba0c:	2500      	movs	r5, #0
}
 800ba0e:	462b      	mov	r3, r5
 800ba10:	4618      	mov	r0, r3
 800ba12:	3728      	adds	r7, #40	@ 0x28
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bdb0      	pop	{r4, r5, r7, pc}
 800ba18:	200001f4 	.word	0x200001f4

0800ba1c <_ZN18CControladorRampas21DameSiguienteID_RampaEv>:
			return;
		}
	}
}
int CControladorRampas::DameSiguienteID_Rampa()
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b08a      	sub	sp, #40	@ 0x28
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
	UltimoID_Rampa=0;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2200      	movs	r2, #0
 800ba28:	849a      	strh	r2, [r3, #36]	@ 0x24
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba2e:	e022      	b.n	800ba76 <_ZN18CControladorRampas21DameSiguienteID_RampaEv+0x5a>
	{
		int direccionRampa = DireccionTablaRampas + (BytesRampa * i);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	695b      	ldr	r3, [r3, #20]
 800ba38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ba3a:	fb01 f303 	mul.w	r3, r1, r3
 800ba3e:	4413      	add	r3, r2
 800ba40:	623b      	str	r3, [r7, #32]
		//me traigo los datos de la rampa de la memoria
		CRampa tmpRampa=LeeRampaMemoria(direccionRampa);
 800ba42:	f107 0308 	add.w	r3, r7, #8
 800ba46:	6a3a      	ldr	r2, [r7, #32]
 800ba48:	6879      	ldr	r1, [r7, #4]
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f7ff fe28 	bl	800b6a0 <_ZN18CControladorRampas15LeeRampaMemoriaEi>

		if (tmpRampa.Ocupado == 1)
 800ba50:	7b3b      	ldrb	r3, [r7, #12]
 800ba52:	2b01      	cmp	r3, #1
 800ba54:	d107      	bne.n	800ba66 <_ZN18CControladorRampas21DameSiguienteID_RampaEv+0x4a>
		{
			if(tmpRampa.ID_RAMPA>=UltimoID_Rampa)
 800ba56:	89fa      	ldrh	r2, [r7, #14]
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d302      	bcc.n	800ba66 <_ZN18CControladorRampas21DameSiguienteID_RampaEv+0x4a>
			{
				UltimoID_Rampa=tmpRampa.ID_RAMPA;
 800ba60:	89fa      	ldrh	r2, [r7, #14]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	849a      	strh	r2, [r3, #36]	@ 0x24
			}
		}
	}
 800ba66:	f107 0308 	add.w	r3, r7, #8
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f000 f87c 	bl	800bb68 <_ZN6CRampaD1Ev>
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800ba70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba72:	3301      	adds	r3, #1
 800ba74:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	689b      	ldr	r3, [r3, #8]
 800ba7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	dbd7      	blt.n	800ba30 <_ZN18CControladorRampas21DameSiguienteID_RampaEv+0x14>
	UltimoID_Rampa++;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ba84:	3301      	adds	r3, #1
 800ba86:	b29a      	uxth	r2, r3
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	849a      	strh	r2, [r3, #36]	@ 0x24
	return UltimoID_Rampa;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3728      	adds	r7, #40	@ 0x28
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}

0800ba98 <_ZN5CPasoC1Ev>:

#include <RapaTemperatura/CPaso.hpp>
#include "stm32f4xx.h"
#include "stm32f4xx_hal_conf.h"

CPaso::CPaso()
 800ba98:	b480      	push	{r7}
 800ba9a:	b083      	sub	sp, #12
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	4a0d      	ldr	r2, [pc, #52]	@ (800bad8 <_ZN5CPasoC1Ev+0x40>)
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub
	Ocupado=0;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2200      	movs	r2, #0
 800baaa:	711a      	strb	r2, [r3, #4]
	ID_Rampa=0;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2200      	movs	r2, #0
 800bab0:	715a      	strb	r2, [r3, #5]
	ID_Paso=0;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2200      	movs	r2, #0
 800bab6:	719a      	strb	r2, [r3, #6]
	Temperatura=0;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2200      	movs	r2, #0
 800babc:	71da      	strb	r2, [r3, #7]
	NivelAire=0;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2200      	movs	r2, #0
 800bac2:	721a      	strb	r2, [r3, #8]
	Minutos=0;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2200      	movs	r2, #0
 800bac8:	725a      	strb	r2, [r3, #9]

}
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	4618      	mov	r0, r3
 800bace:	370c      	adds	r7, #12
 800bad0:	46bd      	mov	sp, r7
 800bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad6:	4770      	bx	lr
 800bad8:	0801618c 	.word	0x0801618c

0800badc <_ZN5CPasoD1Ev>:

CPaso::~CPaso()
 800badc:	b480      	push	{r7}
 800bade:	b083      	sub	sp, #12
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	4a04      	ldr	r2, [pc, #16]	@ (800baf8 <_ZN5CPasoD1Ev+0x1c>)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	4618      	mov	r0, r3
 800baee:	370c      	adds	r7, #12
 800baf0:	46bd      	mov	sp, r7
 800baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf6:	4770      	bx	lr
 800baf8:	0801618c 	.word	0x0801618c

0800bafc <_ZN5CPasoD0Ev>:
CPaso::~CPaso()
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b082      	sub	sp, #8
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
}
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f7ff ffe9 	bl	800badc <_ZN5CPasoD1Ev>
 800bb0a:	210c      	movs	r1, #12
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f005 ffbd 	bl	8011a8c <_ZdlPvj>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	4618      	mov	r0, r3
 800bb16:	3708      	adds	r7, #8
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}

0800bb1c <_ZN6CRampaC1Ev>:

#include <RapaTemperatura/CRampa.hpp>
#include "stm32f4xx.h"
#include "stm32f4xx_hal_conf.h"

CRampa::CRampa()
 800bb1c:	b480      	push	{r7}
 800bb1e:	b085      	sub	sp, #20
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	4a0f      	ldr	r2, [pc, #60]	@ (800bb64 <_ZN6CRampaC1Ev+0x48>)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub
	ID_RAMPA=0;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	80da      	strh	r2, [r3, #6]
	Ocupado=0;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2200      	movs	r2, #0
 800bb34:	711a      	strb	r2, [r3, #4]
	for(int i=0;i<TAM_NOMBRE;i++)
 800bb36:	2300      	movs	r3, #0
 800bb38:	60fb      	str	r3, [r7, #12]
 800bb3a:	e008      	b.n	800bb4e <_ZN6CRampaC1Ev+0x32>
	{
		Nombre[i]=' ';
 800bb3c:	687a      	ldr	r2, [r7, #4]
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	4413      	add	r3, r2
 800bb42:	3308      	adds	r3, #8
 800bb44:	2220      	movs	r2, #32
 800bb46:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<TAM_NOMBRE;i++)
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	60fb      	str	r3, [r7, #12]
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	2b0e      	cmp	r3, #14
 800bb52:	ddf3      	ble.n	800bb3c <_ZN6CRampaC1Ev+0x20>
	}

}
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	4618      	mov	r0, r3
 800bb58:	3714      	adds	r7, #20
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb60:	4770      	bx	lr
 800bb62:	bf00      	nop
 800bb64:	0801619c 	.word	0x0801619c

0800bb68 <_ZN6CRampaD1Ev>:

CRampa::~CRampa()
 800bb68:	b480      	push	{r7}
 800bb6a:	b083      	sub	sp, #12
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	4a04      	ldr	r2, [pc, #16]	@ (800bb84 <_ZN6CRampaD1Ev+0x1c>)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	4618      	mov	r0, r3
 800bb7a:	370c      	adds	r7, #12
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb82:	4770      	bx	lr
 800bb84:	0801619c 	.word	0x0801619c

0800bb88 <_ZN6CRampaD0Ev>:
CRampa::~CRampa()
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b082      	sub	sp, #8
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
}
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f7ff ffe9 	bl	800bb68 <_ZN6CRampaD1Ev>
 800bb96:	2118      	movs	r1, #24
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f005 ff77 	bl	8011a8c <_ZdlPvj>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	4618      	mov	r0, r3
 800bba2:	3708      	adds	r7, #8
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}

0800bba8 <_ZN6CRampa9SetNombreEPc>:
	}
	return tmp;

}
void CRampa::SetNombre(char* nombre)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b085      	sub	sp, #20
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
 800bbb0:	6039      	str	r1, [r7, #0]
	for(int i=0;i<TAM_NOMBRE;i++)
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	60fb      	str	r3, [r7, #12]
 800bbb6:	e00c      	b.n	800bbd2 <_ZN6CRampa9SetNombreEPc+0x2a>
	{
		Nombre[i]=nombre[i];
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	683a      	ldr	r2, [r7, #0]
 800bbbc:	4413      	add	r3, r2
 800bbbe:	7819      	ldrb	r1, [r3, #0]
 800bbc0:	687a      	ldr	r2, [r7, #4]
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	4413      	add	r3, r2
 800bbc6:	3308      	adds	r3, #8
 800bbc8:	460a      	mov	r2, r1
 800bbca:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<TAM_NOMBRE;i++)
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	3301      	adds	r3, #1
 800bbd0:	60fb      	str	r3, [r7, #12]
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2b0e      	cmp	r3, #14
 800bbd6:	ddef      	ble.n	800bbb8 <_ZN6CRampa9SetNombreEPc+0x10>
	}
}
 800bbd8:	bf00      	nop
 800bbda:	bf00      	nop
 800bbdc:	3714      	adds	r7, #20
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe4:	4770      	bx	lr
	...

0800bbe8 <_ZN6CRampaC1EOS_>:
CRampa::CRampa(CRampa &&rampa)
 800bbe8:	b480      	push	{r7}
 800bbea:	b085      	sub	sp, #20
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	6039      	str	r1, [r7, #0]
 800bbf2:	4a13      	ldr	r2, [pc, #76]	@ (800bc40 <_ZN6CRampaC1EOS_+0x58>)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	601a      	str	r2, [r3, #0]
{
	ID_RAMPA=rampa.ID_RAMPA;
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	88da      	ldrh	r2, [r3, #6]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	80da      	strh	r2, [r3, #6]
	Ocupado=rampa.Ocupado;
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	791a      	ldrb	r2, [r3, #4]
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	711a      	strb	r2, [r3, #4]
	for(int i=0;i<TAM_NOMBRE;i++)
 800bc08:	2300      	movs	r3, #0
 800bc0a:	60fb      	str	r3, [r7, #12]
 800bc0c:	e00d      	b.n	800bc2a <_ZN6CRampaC1EOS_+0x42>
	{
		Nombre[i]=rampa.Nombre[i];
 800bc0e:	683a      	ldr	r2, [r7, #0]
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	4413      	add	r3, r2
 800bc14:	3308      	adds	r3, #8
 800bc16:	7819      	ldrb	r1, [r3, #0]
 800bc18:	687a      	ldr	r2, [r7, #4]
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	4413      	add	r3, r2
 800bc1e:	3308      	adds	r3, #8
 800bc20:	460a      	mov	r2, r1
 800bc22:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<TAM_NOMBRE;i++)
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	3301      	adds	r3, #1
 800bc28:	60fb      	str	r3, [r7, #12]
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	2b0e      	cmp	r3, #14
 800bc2e:	ddee      	ble.n	800bc0e <_ZN6CRampaC1EOS_+0x26>
	}

}
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	4618      	mov	r0, r3
 800bc34:	3714      	adds	r7, #20
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr
 800bc3e:	bf00      	nop
 800bc40:	0801619c 	.word	0x0801619c

0800bc44 <_ZN31CManejadorEventoSensorMagneticoC1Ev>:
 *      Author: W10
 */

#include <SensorMagnetico/CManejadorEventoSensorMagnetico.hpp>

CManejadorEventoSensorMagnetico::CManejadorEventoSensorMagnetico()
 800bc44:	b480      	push	{r7}
 800bc46:	b083      	sub	sp, #12
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	4a04      	ldr	r2, [pc, #16]	@ (800bc60 <_ZN31CManejadorEventoSensorMagneticoC1Ev+0x1c>)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	4618      	mov	r0, r3
 800bc56:	370c      	adds	r7, #12
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5e:	4770      	bx	lr
 800bc60:	080161ac 	.word	0x080161ac

0800bc64 <_ZN31CManejadorEventoSensorMagneticoD1Ev>:

CManejadorEventoSensorMagnetico::~CManejadorEventoSensorMagnetico()
 800bc64:	b480      	push	{r7}
 800bc66:	b083      	sub	sp, #12
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
 800bc6c:	4a04      	ldr	r2, [pc, #16]	@ (800bc80 <_ZN31CManejadorEventoSensorMagneticoD1Ev+0x1c>)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	4618      	mov	r0, r3
 800bc76:	370c      	adds	r7, #12
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr
 800bc80:	080161ac 	.word	0x080161ac

0800bc84 <_ZN31CManejadorEventoSensorMagneticoD0Ev>:
CManejadorEventoSensorMagnetico::~CManejadorEventoSensorMagnetico()
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b082      	sub	sp, #8
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
}
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f7ff ffe9 	bl	800bc64 <_ZN31CManejadorEventoSensorMagneticoD1Ev>
 800bc92:	2104      	movs	r1, #4
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f005 fef9 	bl	8011a8c <_ZdlPvj>
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3708      	adds	r7, #8
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}

0800bca4 <_ZN31CManejadorEventoSensorMagnetico23OnSensorMagneticoChangeEi>:
void CManejadorEventoSensorMagnetico::OnSensorMagneticoChange(int Estado)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b083      	sub	sp, #12
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	6039      	str	r1, [r7, #0]
	//evento que se llama cuando cambia el estado del sensor
}
 800bcae:	bf00      	nop
 800bcb0:	370c      	adds	r7, #12
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb8:	4770      	bx	lr
	...

0800bcbc <_ZN15SensorMagneticoC1Ev>:
#include <SensorMagnetico/SensorMagnetico.hpp>
#include "stm32f4xx.h"
#include "Constantes.hpp"
#include "Uart/Uart.hpp"

SensorMagnetico::SensorMagnetico()
 800bcbc:	b480      	push	{r7}
 800bcbe:	b083      	sub	sp, #12
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	4a0a      	ldr	r2, [pc, #40]	@ (800bcf0 <_ZN15SensorMagneticoC1Ev+0x34>)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	601a      	str	r2, [r3, #0]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2200      	movs	r2, #0
 800bcce:	60da      	str	r2, [r3, #12]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	611a      	str	r2, [r3, #16]
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2201      	movs	r2, #1
 800bcda:	615a      	str	r2, [r3, #20]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2200      	movs	r2, #0
 800bce0:	619a      	str	r2, [r3, #24]
{
	// TODO Auto-generated constructor stub

}
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	4618      	mov	r0, r3
 800bce6:	370c      	adds	r7, #12
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr
 800bcf0:	080161c0 	.word	0x080161c0

0800bcf4 <_ZN15SensorMagneticoD1Ev>:

SensorMagnetico::~SensorMagnetico()
 800bcf4:	b480      	push	{r7}
 800bcf6:	b083      	sub	sp, #12
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
 800bcfc:	4a04      	ldr	r2, [pc, #16]	@ (800bd10 <_ZN15SensorMagneticoD1Ev+0x1c>)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	4618      	mov	r0, r3
 800bd06:	370c      	adds	r7, #12
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr
 800bd10:	080161c0 	.word	0x080161c0

0800bd14 <_ZN15SensorMagneticoD0Ev>:
SensorMagnetico::~SensorMagnetico()
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b082      	sub	sp, #8
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
}
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f7ff ffe9 	bl	800bcf4 <_ZN15SensorMagneticoD1Ev>
 800bd22:	211c      	movs	r1, #28
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f005 feb1 	bl	8011a8c <_ZdlPvj>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3708      	adds	r7, #8
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <_ZN15SensorMagnetico10ConfigurarEP12GPIO_TypeDeft>:

void SensorMagnetico::Configurar(GPIO_TypeDef *puerto, uint16_t pin)
{
 800bd34:	b480      	push	{r7}
 800bd36:	b085      	sub	sp, #20
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	60f8      	str	r0, [r7, #12]
 800bd3c:	60b9      	str	r1, [r7, #8]
 800bd3e:	4613      	mov	r3, r2
 800bd40:	80fb      	strh	r3, [r7, #6]
	GPIO_Port = puerto;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	68ba      	ldr	r2, [r7, #8]
 800bd46:	605a      	str	r2, [r3, #4]
	Gpio_Pin = pin;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	88fa      	ldrh	r2, [r7, #6]
 800bd4c:	811a      	strh	r2, [r3, #8]

}
 800bd4e:	bf00      	nop
 800bd50:	3714      	adds	r7, #20
 800bd52:	46bd      	mov	sp, r7
 800bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd58:	4770      	bx	lr

0800bd5a <_ZN15SensorMagnetico4InitEv>:
void SensorMagnetico::Init()
{
 800bd5a:	b580      	push	{r7, lr}
 800bd5c:	b088      	sub	sp, #32
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 800bd62:	f107 030c 	add.w	r3, r7, #12
 800bd66:	2200      	movs	r2, #0
 800bd68:	601a      	str	r2, [r3, #0]
 800bd6a:	605a      	str	r2, [r3, #4]
 800bd6c:	609a      	str	r2, [r3, #8]
 800bd6e:	60da      	str	r2, [r3, #12]
 800bd70:	611a      	str	r2, [r3, #16]
	{ 0 };
	GPIO_InitStruct.Pin = Gpio_Pin;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	891b      	ldrh	r3, [r3, #8]
 800bd76:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	617b      	str	r3, [r7, #20]
	//PruebaTempratura(0);
	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	f107 020c 	add.w	r2, r7, #12
 800bd88:	4611      	mov	r1, r2
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f002 f9c6 	bl	800e11c <HAL_GPIO_Init>
}
 800bd90:	bf00      	nop
 800bd92:	3720      	adds	r7, #32
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}

0800bd98 <_ZN15SensorMagnetico22AsignaManejadorEventosEP31CManejadorEventoSensorMagnetico>:
void SensorMagnetico::AsignaManejadorEventos(
		CManejadorEventoSensorMagnetico *manejador)
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b083      	sub	sp, #12
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	6039      	str	r1, [r7, #0]
	Manejador = manejador;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	683a      	ldr	r2, [r7, #0]
 800bda6:	60da      	str	r2, [r3, #12]

}
 800bda8:	bf00      	nop
 800bdaa:	370c      	adds	r7, #12
 800bdac:	46bd      	mov	sp, r7
 800bdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb2:	4770      	bx	lr

0800bdb4 <_ZN15SensorMagnetico4LeerEv>:
int SensorMagnetico::Leer()
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b082      	sub	sp, #8
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(GPIO_Port, Gpio_Pin); // lee el pin
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	685a      	ldr	r2, [r3, #4]
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	891b      	ldrh	r3, [r3, #8]
 800bdc4:	4619      	mov	r1, r3
 800bdc6:	4610      	mov	r0, r2
 800bdc8:	f002 fb2c 	bl	800e424 <HAL_GPIO_ReadPin>
 800bdcc:	4603      	mov	r3, r0

}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3708      	adds	r7, #8
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
	...

0800bdd8 <_ZN26InterfaceSensorTemperaturaC1Ev>:
 *      Author: W10
 */

#include <SensorTemperatura/InterfaceSensorTemperatura/InterfaceSensorTemperatura.hpp>

InterfaceSensorTemperatura::InterfaceSensorTemperatura()
 800bdd8:	b480      	push	{r7}
 800bdda:	b083      	sub	sp, #12
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	4a04      	ldr	r2, [pc, #16]	@ (800bdf4 <_ZN26InterfaceSensorTemperaturaC1Ev+0x1c>)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	4618      	mov	r0, r3
 800bdea:	370c      	adds	r7, #12
 800bdec:	46bd      	mov	sp, r7
 800bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf2:	4770      	bx	lr
 800bdf4:	080161d0 	.word	0x080161d0

0800bdf8 <_ZN26InterfaceSensorTemperaturaD1Ev>:

InterfaceSensorTemperatura::~InterfaceSensorTemperatura()
 800bdf8:	b480      	push	{r7}
 800bdfa:	b083      	sub	sp, #12
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	4a04      	ldr	r2, [pc, #16]	@ (800be14 <_ZN26InterfaceSensorTemperaturaD1Ev+0x1c>)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	4618      	mov	r0, r3
 800be0a:	370c      	adds	r7, #12
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr
 800be14:	080161d0 	.word	0x080161d0

0800be18 <_ZN26InterfaceSensorTemperaturaD0Ev>:
InterfaceSensorTemperatura::~InterfaceSensorTemperatura()
 800be18:	b580      	push	{r7, lr}
 800be1a:	b082      	sub	sp, #8
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
}
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f7ff ffe9 	bl	800bdf8 <_ZN26InterfaceSensorTemperaturaD1Ev>
 800be26:	2104      	movs	r1, #4
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f005 fe2f 	bl	8011a8c <_ZdlPvj>
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	4618      	mov	r0, r3
 800be32:	3708      	adds	r7, #8
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}

0800be38 <_ZN26InterfaceSensorTemperatura4InitEv>:

void InterfaceSensorTemperatura::Init()
{
 800be38:	b480      	push	{r7}
 800be3a:	b083      	sub	sp, #12
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]

}
 800be40:	bf00      	nop
 800be42:	370c      	adds	r7, #12
 800be44:	46bd      	mov	sp, r7
 800be46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4a:	4770      	bx	lr

0800be4c <_ZN26InterfaceSensorTemperatura13LeeTemepaturaEv>:
int InterfaceSensorTemperatura::LeeTemepatura()
{
 800be4c:	b480      	push	{r7}
 800be4e:	b083      	sub	sp, #12
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
	return 0;
 800be54:	2300      	movs	r3, #0
}
 800be56:	4618      	mov	r0, r3
 800be58:	370c      	adds	r7, #12
 800be5a:	46bd      	mov	sp, r7
 800be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be60:	4770      	bx	lr
	...

0800be64 <_ZN15SensorAnalogicoC1Ev>:
#include "Constantes.hpp"
#include <EPROM/CEprom.hpp>

extern I2C_HandleTypeDef hi2c1;

SensorAnalogico::SensorAnalogico()
 800be64:	b580      	push	{r7, lr}
 800be66:	b082      	sub	sp, #8
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	4618      	mov	r0, r3
 800be70:	f7ff ffb2 	bl	800bdd8 <_ZN26InterfaceSensorTemperaturaC1Ev>
 800be74:	4a06      	ldr	r2, [pc, #24]	@ (800be90 <_ZN15SensorAnalogicoC1Ev+0x2c>)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	601a      	str	r2, [r3, #0]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2200      	movs	r2, #0
 800be7e:	64da      	str	r2, [r3, #76]	@ 0x4c
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2200      	movs	r2, #0
 800be84:	651a      	str	r2, [r3, #80]	@ 0x50
{
	// TODO Auto-generated constructor stub

}
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	4618      	mov	r0, r3
 800be8a:	3708      	adds	r7, #8
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}
 800be90:	080161e8 	.word	0x080161e8

0800be94 <_ZN15SensorAnalogicoD1Ev>:

SensorAnalogico::~SensorAnalogico()
 800be94:	b580      	push	{r7, lr}
 800be96:	b082      	sub	sp, #8
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	4a05      	ldr	r2, [pc, #20]	@ (800beb4 <_ZN15SensorAnalogicoD1Ev+0x20>)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	4618      	mov	r0, r3
 800bea6:	f7ff ffa7 	bl	800bdf8 <_ZN26InterfaceSensorTemperaturaD1Ev>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	4618      	mov	r0, r3
 800beae:	3708      	adds	r7, #8
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}
 800beb4:	080161e8 	.word	0x080161e8

0800beb8 <_ZN15SensorAnalogicoD0Ev>:
SensorAnalogico::~SensorAnalogico()
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
}
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f7ff ffe7 	bl	800be94 <_ZN15SensorAnalogicoD1Ev>
 800bec6:	2154      	movs	r1, #84	@ 0x54
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f005 fddf 	bl	8011a8c <_ZdlPvj>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	4618      	mov	r0, r3
 800bed2:	3708      	adds	r7, #8
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}

0800bed8 <_ZN15SensorAnalogico4InitEv>:

void SensorAnalogico::Init()
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b088      	sub	sp, #32
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800bee0:	2300      	movs	r3, #0
 800bee2:	60fb      	str	r3, [r7, #12]
 800bee4:	4b36      	ldr	r3, [pc, #216]	@ (800bfc0 <_ZN15SensorAnalogico4InitEv+0xe8>)
 800bee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bee8:	4a35      	ldr	r2, [pc, #212]	@ (800bfc0 <_ZN15SensorAnalogico4InitEv+0xe8>)
 800beea:	f043 0301 	orr.w	r3, r3, #1
 800beee:	6313      	str	r3, [r2, #48]	@ 0x30
 800bef0:	4b33      	ldr	r3, [pc, #204]	@ (800bfc0 <_ZN15SensorAnalogico4InitEv+0xe8>)
 800bef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bef4:	f003 0301 	and.w	r3, r3, #1
 800bef8:	60fb      	str	r3, [r7, #12]
 800befa:	68fb      	ldr	r3, [r7, #12]
	 ADC_ChannelConfTypeDef sConfig = {0};
 800befc:	f107 0310 	add.w	r3, r7, #16
 800bf00:	2200      	movs	r2, #0
 800bf02:	601a      	str	r2, [r3, #0]
 800bf04:	605a      	str	r2, [r3, #4]
 800bf06:	609a      	str	r2, [r3, #8]
 800bf08:	60da      	str	r2, [r3, #12]
	 hadc1.Instance = ADC1;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	4a2d      	ldr	r2, [pc, #180]	@ (800bfc4 <_ZN15SensorAnalogico4InitEv+0xec>)
 800bf0e:	605a      	str	r2, [r3, #4]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2; //NUEVO
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2200      	movs	r2, #0
 800bf14:	609a      	str	r2, [r3, #8]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B; //nuevo
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	60da      	str	r2, [r3, #12]

	 hadc1.Init.ScanConvMode =  DISABLE;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	615a      	str	r2, [r3, #20]
	 hadc1.Init.ContinuousConvMode = ENABLE;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2201      	movs	r2, #1
 800bf26:	771a      	strb	r2, [r3, #28]
	 hadc1.Init.DiscontinuousConvMode = DISABLE;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	 hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;//nuevo
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2200      	movs	r2, #0
 800bf34:	631a      	str	r2, [r3, #48]	@ 0x30
	 hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	4a23      	ldr	r2, [pc, #140]	@ (800bfc8 <_ZN15SensorAnalogico4InitEv+0xf0>)
 800bf3a:	62da      	str	r2, [r3, #44]	@ 0x2c
	 hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2200      	movs	r2, #0
 800bf40:	611a      	str	r2, [r3, #16]
	 hadc1.State=	 HAL_ADC_STATE_RESET;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2200      	movs	r2, #0
 800bf46:	645a      	str	r2, [r3, #68]	@ 0x44
	 hadc1.Init.NbrOfConversion = 1;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2201      	movs	r2, #1
 800bf4c:	621a      	str	r2, [r3, #32]
	  hadc1.Init.DMAContinuousRequests = DISABLE; //nuevo
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2200      	movs	r2, #0
 800bf52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2201      	movs	r2, #1
 800bf5a:	619a      	str	r2, [r3, #24]

	 if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	3304      	adds	r3, #4
 800bf60:	4618      	mov	r0, r3
 800bf62:	f001 fc95 	bl	800d890 <HAL_ADC_Init>
 800bf66:	4603      	mov	r3, r0
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	bf14      	ite	ne
 800bf6c:	2301      	movne	r3, #1
 800bf6e:	2300      	moveq	r3, #0
 800bf70:	b2db      	uxtb	r3, r3
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d002      	beq.n	800bf7c <_ZN15SensorAnalogico4InitEv+0xa4>
	 {
	 Error_Handler();
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f000 f86a 	bl	800c050 <_ZN15SensorAnalogico13Error_HandlerEv>
	 }

	 sConfig.Channel = ADC_CHANNEL_4;//ADC_CHANNEL_3;
 800bf7c:	2304      	movs	r3, #4
 800bf7e:	613b      	str	r3, [r7, #16]
	 sConfig.Rank =1; // ADC_REGULAR_RANK_1;
 800bf80:	2301      	movs	r3, #1
 800bf82:	617b      	str	r3, [r7, #20]
	 sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES; //ADC_SAMPLETIME_239CYCLES_5;
 800bf84:	2300      	movs	r3, #0
 800bf86:	61bb      	str	r3, [r7, #24]
	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	3304      	adds	r3, #4
 800bf8c:	f107 0210 	add.w	r2, r7, #16
 800bf90:	4611      	mov	r1, r2
 800bf92:	4618      	mov	r0, r3
 800bf94:	f001 fd82 	bl	800da9c <HAL_ADC_ConfigChannel>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	bf14      	ite	ne
 800bf9e:	2301      	movne	r3, #1
 800bfa0:	2300      	moveq	r3, #0
 800bfa2:	b2db      	uxtb	r3, r3
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d002      	beq.n	800bfae <_ZN15SensorAnalogico4InitEv+0xd6>
	 {
	 Error_Handler();
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f000 f851 	bl	800c050 <_ZN15SensorAnalogico13Error_HandlerEv>
	 }
	 HAL_ADC_Start(&hadc1);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	3304      	adds	r3, #4
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f001 fcb0 	bl	800d918 <HAL_ADC_Start>

}
 800bfb8:	bf00      	nop
 800bfba:	3720      	adds	r7, #32
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}
 800bfc0:	40023800 	.word	0x40023800
 800bfc4:	40012000 	.word	0x40012000
 800bfc8:	0f000001 	.word	0x0f000001

0800bfcc <_ZN15SensorAnalogico13LeeTemepaturaEv>:
int SensorAnalogico::LeeTemepatura()
{
 800bfcc:	b590      	push	{r4, r7, lr}
 800bfce:	b085      	sub	sp, #20
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
	int tiempoactual=HAL_GetTick();
 800bfd4:	f001 fc2c 	bl	800d830 <HAL_GetTick>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	60fb      	str	r3, [r7, #12]
	if(tiempoactual<TiempoTranscurrido)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bfe0:	68fa      	ldr	r2, [r7, #12]
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	da02      	bge.n	800bfec <_ZN15SensorAnalogico13LeeTemepaturaEv+0x20>
	{
		return UltimaTemperatura;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bfea:	e02b      	b.n	800c044 <_ZN15SensorAnalogico13LeeTemepaturaEv+0x78>
	}
	TiempoTranscurrido=tiempoactual+500;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	f503 72fa 	add.w	r2, r3, #500	@ 0x1f4
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	64da      	str	r2, [r3, #76]	@ 0x4c

	Init();
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	3308      	adds	r3, #8
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	4798      	blx	r3
	HAL_ADC_Start(&hadc1);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	3304      	adds	r3, #4
 800c006:	4618      	mov	r0, r3
 800c008:	f001 fc86 	bl	800d918 <HAL_ADC_Start>
	int valor=HAL_ADC_GetValue(&hadc1);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	3304      	adds	r3, #4
 800c010:	4618      	mov	r0, r3
 800c012:	f001 fd35 	bl	800da80 <HAL_ADC_GetValue>
 800c016:	4603      	mov	r3, r0
 800c018:	60bb      	str	r3, [r7, #8]
	//4095->500
	//valor->X
	//x=valor*500/4095
	UltimaTemperatura=(int)(valor*400/4095)+LeeMemoria();
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800c020:	fb02 f303 	mul.w	r3, r2, r3
 800c024:	4a09      	ldr	r2, [pc, #36]	@ (800c04c <_ZN15SensorAnalogico13LeeTemepaturaEv+0x80>)
 800c026:	fb82 1203 	smull	r1, r2, r2, r3
 800c02a:	441a      	add	r2, r3
 800c02c:	12d2      	asrs	r2, r2, #11
 800c02e:	17db      	asrs	r3, r3, #31
 800c030:	1ad4      	subs	r4, r2, r3
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f000 f816 	bl	800c064 <_ZN15SensorAnalogico10LeeMemoriaEv>
 800c038:	4603      	mov	r3, r0
 800c03a:	18e2      	adds	r2, r4, r3
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	651a      	str	r2, [r3, #80]	@ 0x50
	return 	UltimaTemperatura;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50

}
 800c044:	4618      	mov	r0, r3
 800c046:	3714      	adds	r7, #20
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd90      	pop	{r4, r7, pc}
 800c04c:	80080081 	.word	0x80080081

0800c050 <_ZN15SensorAnalogico13Error_HandlerEv>:
void SensorAnalogico::Error_Handler(void)
{
 800c050:	b480      	push	{r7}
 800c052:	b083      	sub	sp, #12
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]

}
 800c058:	bf00      	nop
 800c05a:	370c      	adds	r7, #12
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr

0800c064 <_ZN15SensorAnalogico10LeeMemoriaEv>:
int SensorAnalogico::LeeMemoria()
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b082      	sub	sp, #8
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
	return Eprom.DameAjusteTemperatura();
 800c06c:	4803      	ldr	r0, [pc, #12]	@ (800c07c <_ZN15SensorAnalogico10LeeMemoriaEv+0x18>)
 800c06e:	f7f5 fabb 	bl	80015e8 <_ZN6CEprom21DameAjusteTemperaturaEv>
 800c072:	4603      	mov	r3, r0
}
 800c074:	4618      	mov	r0, r3
 800c076:	3708      	adds	r7, #8
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}
 800c07c:	20000318 	.word	0x20000318

0800c080 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type>:

#include "Timer.hpp"
#include<stdbool.h>

bool CTimer::Init(TIM_TypeDef* TimInstance, uint32_t periodo, 	IRQn_Type Tim_Irq)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b08c      	sub	sp, #48	@ 0x30
 800c084:	af00      	add	r7, sp, #0
 800c086:	60f8      	str	r0, [r7, #12]
 800c088:	60b9      	str	r1, [r7, #8]
 800c08a:	607a      	str	r2, [r7, #4]
 800c08c:	70fb      	strb	r3, [r7, #3]
	Periodo = periodo;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	687a      	ldr	r2, [r7, #4]
 800c092:	64da      	str	r2, [r3, #76]	@ 0x4c
	__HAL_RCC_TIM3_CLK_ENABLE();
 800c094:	2300      	movs	r3, #0
 800c096:	617b      	str	r3, [r7, #20]
 800c098:	4b3b      	ldr	r3, [pc, #236]	@ (800c188 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x108>)
 800c09a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c09c:	4a3a      	ldr	r2, [pc, #232]	@ (800c188 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x108>)
 800c09e:	f043 0302 	orr.w	r3, r3, #2
 800c0a2:	6413      	str	r3, [r2, #64]	@ 0x40
 800c0a4:	4b38      	ldr	r3, [pc, #224]	@ (800c188 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x108>)
 800c0a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0a8:	f003 0302 	and.w	r3, r3, #2
 800c0ac:	617b      	str	r3, [r7, #20]
 800c0ae:	697b      	ldr	r3, [r7, #20]
	HTim.Instance = TimInstance;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	68ba      	ldr	r2, [r7, #8]
 800c0b4:	601a      	str	r2, [r3, #0]
	HTim.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	609a      	str	r2, [r3, #8]
	HTim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	611a      	str	r2, [r3, #16]
	//la siguiente configuracion es para que me de un tiempo de 83.3 micro segundos para generar la interrupcion
	
	HTim.Init.Period = 3350-1;//3000 - 1; //8399
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	f640 5215 	movw	r2, #3349	@ 0xd15
 800c0c8:	60da      	str	r2, [r3, #12]
	HTim.Init.Prescaler = (Periodo * 1) - 1;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c0ce:	1e5a      	subs	r2, r3, #1
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	605a      	str	r2, [r3, #4]
	HTim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	619a      	str	r2, [r3, #24]
	HTim.Init.RepetitionCounter = 0;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&HTim) != HAL_OK)
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f004 f90e 	bl	8010304 <HAL_TIM_Base_Init>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	bf14      	ite	ne
 800c0ee:	2301      	movne	r3, #1
 800c0f0:	2300      	moveq	r3, #0
 800c0f2:	b2db      	uxtb	r3, r3
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d001      	beq.n	800c0fc <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x7c>
	{
		return false;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	e041      	b.n	800c180 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x100>
	}

	TIM_ClockConfigTypeDef TimClock =
 800c0fc:	f107 0320 	add.w	r3, r7, #32
 800c100:	2200      	movs	r2, #0
 800c102:	601a      	str	r2, [r3, #0]
 800c104:	605a      	str	r2, [r3, #4]
 800c106:	609a      	str	r2, [r3, #8]
 800c108:	60da      	str	r2, [r3, #12]
	{ 0 };
	TimClock.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c10a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c10e:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_ConfigClockSource(&HTim, &TimClock) != HAL_OK)
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	f107 0220 	add.w	r2, r7, #32
 800c116:	4611      	mov	r1, r2
 800c118:	4618      	mov	r0, r3
 800c11a:	f004 fc61 	bl	80109e0 <HAL_TIM_ConfigClockSource>
 800c11e:	4603      	mov	r3, r0
 800c120:	2b00      	cmp	r3, #0
 800c122:	bf14      	ite	ne
 800c124:	2301      	movne	r3, #1
 800c126:	2300      	moveq	r3, #0
 800c128:	b2db      	uxtb	r3, r3
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d001      	beq.n	800c132 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0xb2>
	{
		return false;
 800c12e:	2300      	movs	r3, #0
 800c130:	e026      	b.n	800c180 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x100>
	}

	TIM_MasterConfigTypeDef TimMaster =
 800c132:	f107 0318 	add.w	r3, r7, #24
 800c136:	2200      	movs	r2, #0
 800c138:	601a      	str	r2, [r3, #0]
 800c13a:	605a      	str	r2, [r3, #4]
	{ 0 };
	TimMaster.MasterSlaveMode = TIM_SLAVEMODE_DISABLE;
 800c13c:	2300      	movs	r3, #0
 800c13e:	61fb      	str	r3, [r7, #28]
	TimMaster.MasterOutputTrigger = TIM_TRGO_RESET;
 800c140:	2300      	movs	r3, #0
 800c142:	61bb      	str	r3, [r7, #24]
	if (HAL_TIMEx_MasterConfigSynchronization(&HTim, &TimMaster) != HAL_OK)
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	f107 0218 	add.w	r2, r7, #24
 800c14a:	4611      	mov	r1, r2
 800c14c:	4618      	mov	r0, r3
 800c14e:	f005 f80f 	bl	8011170 <HAL_TIMEx_MasterConfigSynchronization>
 800c152:	4603      	mov	r3, r0
 800c154:	2b00      	cmp	r3, #0
 800c156:	bf14      	ite	ne
 800c158:	2301      	movne	r3, #1
 800c15a:	2300      	moveq	r3, #0
 800c15c:	b2db      	uxtb	r3, r3
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d001      	beq.n	800c166 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0xe6>
	{
		return false;
 800c162:	2300      	movs	r3, #0
 800c164:	e00c      	b.n	800c180 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x100>
	}

	HAL_NVIC_SetPriority(Tim_Irq, 5, 0);
 800c166:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c16a:	2200      	movs	r2, #0
 800c16c:	2105      	movs	r1, #5
 800c16e:	4618      	mov	r0, r3
 800c170:	f001 ff9d 	bl	800e0ae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(Tim_Irq);
 800c174:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c178:	4618      	mov	r0, r3
 800c17a:	f001 ffb4 	bl	800e0e6 <HAL_NVIC_EnableIRQ>
	return true;
 800c17e:	2301      	movs	r3, #1
}
 800c180:	4618      	mov	r0, r3
 800c182:	3730      	adds	r7, #48	@ 0x30
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}
 800c188:	40023800 	.word	0x40023800

0800c18c <_Z11uartx_writec>:
#include "string.h"
#include "stm32f4xx_hal.h"
UART_HandleTypeDef Huart1;

void uartx_write(char ch)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b082      	sub	sp, #8
 800c190:	af00      	add	r7, sp, #0
 800c192:	4603      	mov	r3, r0
 800c194:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&Huart1,(uint8_t*) &ch, 1, 0xffff);
 800c196:	1df9      	adds	r1, r7, #7
 800c198:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c19c:	2201      	movs	r2, #1
 800c19e:	4803      	ldr	r0, [pc, #12]	@ (800c1ac <_Z11uartx_writec+0x20>)
 800c1a0:	f005 f8b8 	bl	8011314 <HAL_UART_Transmit>

}
 800c1a4:	bf00      	nop
 800c1a6:	3708      	adds	r7, #8
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}
 800c1ac:	2000020c 	.word	0x2000020c

0800c1b0 <_Z16uartx_write_textPc>:

void uartx_write_text(char *info)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b082      	sub	sp, #8
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]

	while(*info)  uartx_write(*info++);
 800c1b8:	e006      	b.n	800c1c8 <_Z16uartx_write_textPc+0x18>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	1c5a      	adds	r2, r3, #1
 800c1be:	607a      	str	r2, [r7, #4]
 800c1c0:	781b      	ldrb	r3, [r3, #0]
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f7ff ffe2 	bl	800c18c <_Z11uartx_writec>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d1f4      	bne.n	800c1ba <_Z16uartx_write_textPc+0xa>

}
 800c1d0:	bf00      	nop
 800c1d2:	bf00      	nop
 800c1d4:	3708      	adds	r7, #8
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}
	...

0800c1dc <_Z16USART1_UART_Initv>:
	}
}

//static
void USART1_UART_Init(void)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	Huart1.Instance = USART1;
 800c1e0:	4b13      	ldr	r3, [pc, #76]	@ (800c230 <_Z16USART1_UART_Initv+0x54>)
 800c1e2:	4a14      	ldr	r2, [pc, #80]	@ (800c234 <_Z16USART1_UART_Initv+0x58>)
 800c1e4:	601a      	str	r2, [r3, #0]
	Huart1.Init.BaudRate = 115200;
 800c1e6:	4b12      	ldr	r3, [pc, #72]	@ (800c230 <_Z16USART1_UART_Initv+0x54>)
 800c1e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800c1ec:	605a      	str	r2, [r3, #4]
	Huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c1ee:	4b10      	ldr	r3, [pc, #64]	@ (800c230 <_Z16USART1_UART_Initv+0x54>)
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	609a      	str	r2, [r3, #8]
	Huart1.Init.StopBits = UART_STOPBITS_1;
 800c1f4:	4b0e      	ldr	r3, [pc, #56]	@ (800c230 <_Z16USART1_UART_Initv+0x54>)
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	60da      	str	r2, [r3, #12]
	Huart1.Init.Parity = UART_PARITY_NONE;
 800c1fa:	4b0d      	ldr	r3, [pc, #52]	@ (800c230 <_Z16USART1_UART_Initv+0x54>)
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	611a      	str	r2, [r3, #16]
	Huart1.Init.Mode = UART_MODE_TX_RX;
 800c200:	4b0b      	ldr	r3, [pc, #44]	@ (800c230 <_Z16USART1_UART_Initv+0x54>)
 800c202:	220c      	movs	r2, #12
 800c204:	615a      	str	r2, [r3, #20]
	Huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c206:	4b0a      	ldr	r3, [pc, #40]	@ (800c230 <_Z16USART1_UART_Initv+0x54>)
 800c208:	2200      	movs	r2, #0
 800c20a:	619a      	str	r2, [r3, #24]
	Huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c20c:	4b08      	ldr	r3, [pc, #32]	@ (800c230 <_Z16USART1_UART_Initv+0x54>)
 800c20e:	2200      	movs	r2, #0
 800c210:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&Huart1) != HAL_OK)
 800c212:	4807      	ldr	r0, [pc, #28]	@ (800c230 <_Z16USART1_UART_Initv+0x54>)
 800c214:	f005 f82e 	bl	8011274 <HAL_UART_Init>
 800c218:	4603      	mov	r3, r0
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	bf14      	ite	ne
 800c21e:	2301      	movne	r3, #1
 800c220:	2300      	moveq	r3, #0
 800c222:	b2db      	uxtb	r3, r3
 800c224:	2b00      	cmp	r3, #0
 800c226:	d001      	beq.n	800c22c <_Z16USART1_UART_Initv+0x50>
	{
		ErrorHandler();
 800c228:	f000 f806 	bl	800c238 <_Z12ErrorHandlerv>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800c22c:	bf00      	nop
 800c22e:	bd80      	pop	{r7, pc}
 800c230:	2000020c 	.word	0x2000020c
 800c234:	40011000 	.word	0x40011000

0800c238 <_Z12ErrorHandlerv>:
void ErrorHandler(void)
{
 800c238:	b480      	push	{r7}
 800c23a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800c23c:	b672      	cpsid	i
}
 800c23e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800c240:	bf00      	nop
 800c242:	e7fd      	b.n	800c240 <_Z12ErrorHandlerv+0x8>

0800c244 <_Z12SerialPrintfPcz>:
	{
	}
	/* USER CODE END Error_Handler_Debug */
}
void SerialPrintf(char * formato, ...)
{
 800c244:	b40f      	push	{r0, r1, r2, r3}
 800c246:	b580      	push	{r7, lr}
 800c248:	b0be      	sub	sp, #248	@ 0xf8
 800c24a:	af00      	add	r7, sp, #0

    char *p;
    char buffer[100];

    char formatoFlotante[20];
    int posisionFormato=0;
 800c24c:	2300      	movs	r3, #0
 800c24e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    char tmp[100];
    int postmp=0;
 800c252:	2300      	movs	r3, #0
 800c254:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    int posbuffer = 0;
 800c258:	2300      	movs	r3, #0
 800c25a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    va_list pa;
    int encontrado=0;
 800c25e:	2300      	movs	r3, #0
 800c260:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    //float a;
    va_start(pa, formato);
 800c264:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800c268:	607b      	str	r3, [r7, #4]
    for (p = formato; *p; p++)
 800c26a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c26e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c272:	e143      	b.n	800c4fc <_Z12SerialPrintfPcz+0x2b8>
    {

      if (*p != '%')
 800c274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c278:	781b      	ldrb	r3, [r3, #0]
 800c27a:	2b25      	cmp	r3, #37	@ 0x25
 800c27c:	d00f      	beq.n	800c29e <_Z12SerialPrintfPcz+0x5a>
      {
        buffer[posbuffer] = *p;
 800c27e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c282:	7819      	ldrb	r1, [r3, #0]
 800c284:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 800c288:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c28c:	4413      	add	r3, r2
 800c28e:	460a      	mov	r2, r1
 800c290:	701a      	strb	r2, [r3, #0]
        posbuffer++;
 800c292:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c296:	3301      	adds	r3, #1
 800c298:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
        continue;
 800c29c:	e129      	b.n	800c4f2 <_Z12SerialPrintfPcz+0x2ae>
      }
      encontrado=0;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      switch (*++p)
 800c2a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2a8:	3301      	adds	r3, #1
 800c2aa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c2ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2b2:	781b      	ldrb	r3, [r3, #0]
 800c2b4:	2b2e      	cmp	r3, #46	@ 0x2e
 800c2b6:	f000 80a3 	beq.w	800c400 <_Z12SerialPrintfPcz+0x1bc>
 800c2ba:	2b2e      	cmp	r3, #46	@ 0x2e
 800c2bc:	f2c0 80e2 	blt.w	800c484 <_Z12SerialPrintfPcz+0x240>
 800c2c0:	2b78      	cmp	r3, #120	@ 0x78
 800c2c2:	f300 80df 	bgt.w	800c484 <_Z12SerialPrintfPcz+0x240>
 800c2c6:	2b63      	cmp	r3, #99	@ 0x63
 800c2c8:	f2c0 80dc 	blt.w	800c484 <_Z12SerialPrintfPcz+0x240>
 800c2cc:	3b63      	subs	r3, #99	@ 0x63
 800c2ce:	2b15      	cmp	r3, #21
 800c2d0:	f200 80d8 	bhi.w	800c484 <_Z12SerialPrintfPcz+0x240>
 800c2d4:	a201      	add	r2, pc, #4	@ (adr r2, 800c2dc <_Z12SerialPrintfPcz+0x98>)
 800c2d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2da:	bf00      	nop
 800c2dc:	0800c3a5 	.word	0x0800c3a5
 800c2e0:	0800c335 	.word	0x0800c335
 800c2e4:	0800c485 	.word	0x0800c485
 800c2e8:	0800c3c1 	.word	0x0800c3c1
 800c2ec:	0800c485 	.word	0x0800c485
 800c2f0:	0800c485 	.word	0x0800c485
 800c2f4:	0800c351 	.word	0x0800c351
 800c2f8:	0800c485 	.word	0x0800c485
 800c2fc:	0800c485 	.word	0x0800c485
 800c300:	0800c485 	.word	0x0800c485
 800c304:	0800c485 	.word	0x0800c485
 800c308:	0800c485 	.word	0x0800c485
 800c30c:	0800c485 	.word	0x0800c485
 800c310:	0800c389 	.word	0x0800c389
 800c314:	0800c485 	.word	0x0800c485
 800c318:	0800c485 	.word	0x0800c485
 800c31c:	0800c3e5 	.word	0x0800c3e5
 800c320:	0800c485 	.word	0x0800c485
 800c324:	0800c485 	.word	0x0800c485
 800c328:	0800c485 	.word	0x0800c485
 800c32c:	0800c485 	.word	0x0800c485
 800c330:	0800c36d 	.word	0x0800c36d
      {
        case 'd':
          sprintf(tmp, "%d", va_arg(pa, int));
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	1d1a      	adds	r2, r3, #4
 800c338:	607a      	str	r2, [r7, #4]
 800c33a:	681a      	ldr	r2, [r3, #0]
 800c33c:	f107 0308 	add.w	r3, r7, #8
 800c340:	497b      	ldr	r1, [pc, #492]	@ (800c530 <_Z12SerialPrintfPcz+0x2ec>)
 800c342:	4618      	mov	r0, r3
 800c344:	f006 f9a0 	bl	8012688 <siprintf>
          encontrado=1;
 800c348:	2301      	movs	r3, #1
 800c34a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 800c34e:	e0a9      	b.n	800c4a4 <_Z12SerialPrintfPcz+0x260>
        case 'i':
          sprintf(tmp, "%i", va_arg(pa, int));
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	1d1a      	adds	r2, r3, #4
 800c354:	607a      	str	r2, [r7, #4]
 800c356:	681a      	ldr	r2, [r3, #0]
 800c358:	f107 0308 	add.w	r3, r7, #8
 800c35c:	4975      	ldr	r1, [pc, #468]	@ (800c534 <_Z12SerialPrintfPcz+0x2f0>)
 800c35e:	4618      	mov	r0, r3
 800c360:	f006 f992 	bl	8012688 <siprintf>
          encontrado=1;
 800c364:	2301      	movs	r3, #1
 800c366:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 800c36a:	e09b      	b.n	800c4a4 <_Z12SerialPrintfPcz+0x260>
        case 'x':
          sprintf(tmp, "%x", va_arg(pa, int));
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	1d1a      	adds	r2, r3, #4
 800c370:	607a      	str	r2, [r7, #4]
 800c372:	681a      	ldr	r2, [r3, #0]
 800c374:	f107 0308 	add.w	r3, r7, #8
 800c378:	496f      	ldr	r1, [pc, #444]	@ (800c538 <_Z12SerialPrintfPcz+0x2f4>)
 800c37a:	4618      	mov	r0, r3
 800c37c:	f006 f984 	bl	8012688 <siprintf>
          encontrado=1;
 800c380:	2301      	movs	r3, #1
 800c382:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 800c386:	e08d      	b.n	800c4a4 <_Z12SerialPrintfPcz+0x260>
        case 'p':
          sprintf(tmp, "%p", va_arg(pa, void*));
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	1d1a      	adds	r2, r3, #4
 800c38c:	607a      	str	r2, [r7, #4]
 800c38e:	681a      	ldr	r2, [r3, #0]
 800c390:	f107 0308 	add.w	r3, r7, #8
 800c394:	4969      	ldr	r1, [pc, #420]	@ (800c53c <_Z12SerialPrintfPcz+0x2f8>)
 800c396:	4618      	mov	r0, r3
 800c398:	f006 f976 	bl	8012688 <siprintf>
          encontrado=1;
 800c39c:	2301      	movs	r3, #1
 800c39e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 800c3a2:	e07f      	b.n	800c4a4 <_Z12SerialPrintfPcz+0x260>
        case 'c':
          sprintf(tmp, "%c", va_arg(pa, int));
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	1d1a      	adds	r2, r3, #4
 800c3a8:	607a      	str	r2, [r7, #4]
 800c3aa:	681a      	ldr	r2, [r3, #0]
 800c3ac:	f107 0308 	add.w	r3, r7, #8
 800c3b0:	4963      	ldr	r1, [pc, #396]	@ (800c540 <_Z12SerialPrintfPcz+0x2fc>)
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f006 f968 	bl	8012688 <siprintf>
          encontrado=1;
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 800c3be:	e071      	b.n	800c4a4 <_Z12SerialPrintfPcz+0x260>
        case 'f':
          sprintf(tmp, "%f", va_arg(pa, double));
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	3307      	adds	r3, #7
 800c3c4:	f023 0307 	bic.w	r3, r3, #7
 800c3c8:	f103 0208 	add.w	r2, r3, #8
 800c3cc:	607a      	str	r2, [r7, #4]
 800c3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d2:	f107 0008 	add.w	r0, r7, #8
 800c3d6:	495b      	ldr	r1, [pc, #364]	@ (800c544 <_Z12SerialPrintfPcz+0x300>)
 800c3d8:	f006 f956 	bl	8012688 <siprintf>
          encontrado=1;
 800c3dc:	2301      	movs	r3, #1
 800c3de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 800c3e2:	e05f      	b.n	800c4a4 <_Z12SerialPrintfPcz+0x260>
        case 's':
          sprintf(tmp, "%s", va_arg(pa, char *));
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	1d1a      	adds	r2, r3, #4
 800c3e8:	607a      	str	r2, [r7, #4]
 800c3ea:	681a      	ldr	r2, [r3, #0]
 800c3ec:	f107 0308 	add.w	r3, r7, #8
 800c3f0:	4955      	ldr	r1, [pc, #340]	@ (800c548 <_Z12SerialPrintfPcz+0x304>)
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f006 f948 	bl	8012688 <siprintf>
          encontrado=1;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 800c3fe:	e051      	b.n	800c4a4 <_Z12SerialPrintfPcz+0x260>
        case '.':
        	//asume que es flotante con decimales definidos
        	formatoFlotante[0]='%';
 800c400:	2325      	movs	r3, #37	@ 0x25
 800c402:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
        	posisionFormato=1;
 800c406:	2301      	movs	r3, #1
 800c408:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
        	while(*p!='f')
 800c40c:	e013      	b.n	800c436 <_Z12SerialPrintfPcz+0x1f2>
        	{
        		formatoFlotante[posisionFormato]=*p;
 800c40e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c412:	7819      	ldrb	r1, [r3, #0]
 800c414:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800c418:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c41c:	4413      	add	r3, r2
 800c41e:	460a      	mov	r2, r1
 800c420:	701a      	strb	r2, [r3, #0]
        		p++;
 800c422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c426:	3301      	adds	r3, #1
 800c428:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
        		posisionFormato++;
 800c42c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c430:	3301      	adds	r3, #1
 800c432:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
        	while(*p!='f')
 800c436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c43a:	781b      	ldrb	r3, [r3, #0]
 800c43c:	2b66      	cmp	r3, #102	@ 0x66
 800c43e:	d1e6      	bne.n	800c40e <_Z12SerialPrintfPcz+0x1ca>
        	}
        	formatoFlotante[posisionFormato]='f';
 800c440:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800c444:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c448:	4413      	add	r3, r2
 800c44a:	2266      	movs	r2, #102	@ 0x66
 800c44c:	701a      	strb	r2, [r3, #0]
        	formatoFlotante[posisionFormato+1]='\0';
 800c44e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c452:	3301      	adds	r3, #1
 800c454:	33f8      	adds	r3, #248	@ 0xf8
 800c456:	443b      	add	r3, r7
 800c458:	2200      	movs	r2, #0
 800c45a:	f803 2c8c 	strb.w	r2, [r3, #-140]
            sprintf(tmp, formatoFlotante, va_arg(pa, double));
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	3307      	adds	r3, #7
 800c462:	f023 0307 	bic.w	r3, r3, #7
 800c466:	f103 0208 	add.w	r2, r3, #8
 800c46a:	607a      	str	r2, [r7, #4]
 800c46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c470:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 800c474:	f107 0008 	add.w	r0, r7, #8
 800c478:	f006 f906 	bl	8012688 <siprintf>
            encontrado=1;
 800c47c:	2301      	movs	r3, #1
 800c47e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
            break;
 800c482:	e00f      	b.n	800c4a4 <_Z12SerialPrintfPcz+0x260>
        default:
          buffer[posbuffer] = *p;
 800c484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c488:	7819      	ldrb	r1, [r3, #0]
 800c48a:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 800c48e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c492:	4413      	add	r3, r2
 800c494:	460a      	mov	r2, r1
 800c496:	701a      	strb	r2, [r3, #0]
          posbuffer++;
 800c498:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c49c:	3301      	adds	r3, #1
 800c49e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
          break;
 800c4a2:	bf00      	nop
      }
      if(encontrado==1)
 800c4a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4a8:	2b01      	cmp	r3, #1
 800c4aa:	d122      	bne.n	800c4f2 <_Z12SerialPrintfPcz+0x2ae>
      {
          postmp=0;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
          while(tmp[postmp]!='\0')
 800c4b2:	e016      	b.n	800c4e2 <_Z12SerialPrintfPcz+0x29e>
          {
          buffer[posbuffer] = tmp[postmp];
 800c4b4:	f107 0208 	add.w	r2, r7, #8
 800c4b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c4bc:	4413      	add	r3, r2
 800c4be:	7819      	ldrb	r1, [r3, #0]
 800c4c0:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 800c4c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c4c8:	4413      	add	r3, r2
 800c4ca:	460a      	mov	r2, r1
 800c4cc:	701a      	strb	r2, [r3, #0]
          posbuffer++;
 800c4ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
          postmp++;
 800c4d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c4dc:	3301      	adds	r3, #1
 800c4de:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
          while(tmp[postmp]!='\0')
 800c4e2:	f107 0208 	add.w	r2, r7, #8
 800c4e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c4ea:	4413      	add	r3, r2
 800c4ec:	781b      	ldrb	r3, [r3, #0]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d1e0      	bne.n	800c4b4 <_Z12SerialPrintfPcz+0x270>
    for (p = formato; *p; p++)
 800c4f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c4f6:	3301      	adds	r3, #1
 800c4f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c4fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	2b00      	cmp	r3, #0
 800c504:	f47f aeb6 	bne.w	800c274 <_Z12SerialPrintfPcz+0x30>
          }
      }
    }
    va_end(pa);
    buffer[posbuffer] = '\0';
 800c508:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 800c50c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c510:	4413      	add	r3, r2
 800c512:	2200      	movs	r2, #0
 800c514:	701a      	strb	r2, [r3, #0]
    uartx_write_text(buffer);
 800c516:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800c51a:	4618      	mov	r0, r3
 800c51c:	f7ff fe48 	bl	800c1b0 <_Z16uartx_write_textPc>
}
 800c520:	bf00      	nop
 800c522:	37f8      	adds	r7, #248	@ 0xf8
 800c524:	46bd      	mov	sp, r7
 800c526:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c52a:	b004      	add	sp, #16
 800c52c:	4770      	bx	lr
 800c52e:	bf00      	nop
 800c530:	08014c6c 	.word	0x08014c6c
 800c534:	08014c70 	.word	0x08014c70
 800c538:	08014c74 	.word	0x08014c74
 800c53c:	08014c78 	.word	0x08014c78
 800c540:	08014c7c 	.word	0x08014c7c
 800c544:	08014c80 	.word	0x08014c80
 800c548:	08014c84 	.word	0x08014c84

0800c54c <_ZN6CTimerC1Ev>:
#define INC_TIMER_HPP_

#include "main.h"
#include <stdio.h>
#include<stdbool.h>
class CTimer
 800c54c:	b480      	push	{r7}
 800c54e:	b083      	sub	sp, #12
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2201      	movs	r2, #1
 800c558:	64da      	str	r2, [r3, #76]	@ 0x4c
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	4618      	mov	r0, r3
 800c55e:	370c      	adds	r7, #12
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr

0800c568 <_Z16IncializaSistemav>:
CManejadorPantallas ManejadorPantallas;
CManejadorControles *ManejadorControles;
CEprom Eprom;
CControladorRampas ControladorRampas;
void IncializaSistema()
{
 800c568:	b590      	push	{r4, r7, lr}
 800c56a:	b095      	sub	sp, #84	@ 0x54
 800c56c:	af00      	add	r7, sp, #0
	USART1_UART_Init();
 800c56e:	f7ff fe35 	bl	800c1dc <_Z16USART1_UART_Initv>
	CTimer timer;
 800c572:	463b      	mov	r3, r7
 800c574:	4618      	mov	r0, r3
 800c576:	f7ff ffe9 	bl	800c54c <_ZN6CTimerC1Ev>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800c57a:	2200      	movs	r2, #0
 800c57c:	2100      	movs	r1, #0
 800c57e:	2028      	movs	r0, #40	@ 0x28
 800c580:	f001 fd95 	bl	800e0ae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800c584:	2028      	movs	r0, #40	@ 0x28
 800c586:	f001 fdae 	bl	800e0e6 <HAL_NVIC_EnableIRQ>

	estacion = new CestacionBaku601();
 800c58a:	20f8      	movs	r0, #248	@ 0xf8
 800c58c:	f005 fa80 	bl	8011a90 <_Znwj>
 800c590:	4603      	mov	r3, r0
 800c592:	461c      	mov	r4, r3
 800c594:	4620      	mov	r0, r4
 800c596:	f7f5 fe8b 	bl	80022b0 <_ZN16CestacionBaku601C1Ev>
 800c59a:	4b0f      	ldr	r3, [pc, #60]	@ (800c5d8 <_Z16IncializaSistemav+0x70>)
 800c59c:	601c      	str	r4, [r3, #0]
	ManejadorControles=new CManejadorControles();
 800c59e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c5a2:	f005 fa75 	bl	8011a90 <_Znwj>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	461c      	mov	r4, r3
 800c5aa:	4620      	mov	r0, r4
 800c5ac:	f7fd fdfe 	bl	800a1ac <_ZN19CManejadorControlesC1Ev>
 800c5b0:	4b0a      	ldr	r3, [pc, #40]	@ (800c5dc <_Z16IncializaSistemav+0x74>)
 800c5b2:	601c      	str	r4, [r3, #0]
	ILI9341_Init(); //initial driver setup to drive ili9341
 800c5b4:	f7fd fa5a 	bl	8009a6c <_Z12ILI9341_Initv>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 800c5b8:	2003      	movs	r0, #3
 800c5ba:	f7fd f9f9 	bl	80099b0 <_Z20ILI9341_Set_Rotationh>
	ILI9341_Fill_Screen(BLACK);
 800c5be:	2000      	movs	r0, #0
 800c5c0:	f7fd fbfc 	bl	8009dbc <_Z19ILI9341_Fill_Screent>
	//nicio eltimer
	timer.Init(TIM3, 1,  TIM3_IRQn);
 800c5c4:	4638      	mov	r0, r7
 800c5c6:	231d      	movs	r3, #29
 800c5c8:	2201      	movs	r2, #1
 800c5ca:	4905      	ldr	r1, [pc, #20]	@ (800c5e0 <_Z16IncializaSistemav+0x78>)
 800c5cc:	f7ff fd58 	bl	800c080 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type>

}
 800c5d0:	bf00      	nop
 800c5d2:	3754      	adds	r7, #84	@ 0x54
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd90      	pop	{r4, r7, pc}
 800c5d8:	20000254 	.word	0x20000254
 800c5dc:	20000314 	.word	0x20000314
 800c5e0:	40000400 	.word	0x40000400

0800c5e4 <_Z14EjecutaSistemav>:

void EjecutaSistema()
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	af00      	add	r7, sp, #0
	int n=0;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	607b      	str	r3, [r7, #4]
	ManejadorPantallas.SetEstacion(estacion);
 800c5ee:	4b19      	ldr	r3, [pc, #100]	@ (800c654 <_Z14EjecutaSistemav+0x70>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	4619      	mov	r1, r3
 800c5f4:	4818      	ldr	r0, [pc, #96]	@ (800c658 <_Z14EjecutaSistemav+0x74>)
 800c5f6:	f7f7 fbf5 	bl	8003de4 <_ZN19CManejadorPantallas11SetEstacionEP13CEstacionBase>
	ManejadorPantallas.SetManejadorControles(ManejadorControles);
 800c5fa:	4b18      	ldr	r3, [pc, #96]	@ (800c65c <_Z14EjecutaSistemav+0x78>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	4619      	mov	r1, r3
 800c600:	4815      	ldr	r0, [pc, #84]	@ (800c658 <_Z14EjecutaSistemav+0x74>)
 800c602:	f7f7 fcc4 	bl	8003f8e <_ZN19CManejadorPantallas21SetManejadorControlesEP19CManejadorControles>
	if(ControladorRampas.MemoriaInicialidada()==false)
 800c606:	4816      	ldr	r0, [pc, #88]	@ (800c660 <_Z14EjecutaSistemav+0x7c>)
 800c608:	f7fe fe6c 	bl	800b2e4 <_ZN18CControladorRampas19MemoriaInicialidadaEv>
 800c60c:	4603      	mov	r3, r0
 800c60e:	2b00      	cmp	r3, #0
 800c610:	bf0c      	ite	eq
 800c612:	2301      	moveq	r3, #1
 800c614:	2300      	movne	r3, #0
 800c616:	b2db      	uxtb	r3, r3
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d003      	beq.n	800c624 <_Z14EjecutaSistemav+0x40>
		ManejadorPantallas.MuestraPantallaInicializaMemoria();
 800c61c:	480e      	ldr	r0, [pc, #56]	@ (800c658 <_Z14EjecutaSistemav+0x74>)
 800c61e:	f7f7 fd4e 	bl	80040be <_ZN19CManejadorPantallas32MuestraPantallaInicializaMemoriaEv>
 800c622:	e002      	b.n	800c62a <_Z14EjecutaSistemav+0x46>
	else
		ManejadorPantallas.MuestraPantallaManual();
 800c624:	480c      	ldr	r0, [pc, #48]	@ (800c658 <_Z14EjecutaSistemav+0x74>)
 800c626:	f7f7 fbeb 	bl	8003e00 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
	while (true)
	{
		n++;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	3301      	adds	r3, #1
 800c62e:	607b      	str	r3, [r7, #4]
		estacion->Procesa();
 800c630:	4b08      	ldr	r3, [pc, #32]	@ (800c654 <_Z14EjecutaSistemav+0x70>)
 800c632:	681a      	ldr	r2, [r3, #0]
 800c634:	4b07      	ldr	r3, [pc, #28]	@ (800c654 <_Z14EjecutaSistemav+0x70>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	3330      	adds	r3, #48	@ 0x30
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	4610      	mov	r0, r2
 800c640:	4798      	blx	r3
		ManejadorPantallas.RefrescaPantalla();
 800c642:	4805      	ldr	r0, [pc, #20]	@ (800c658 <_Z14EjecutaSistemav+0x74>)
 800c644:	f7f7 fc30 	bl	8003ea8 <_ZN19CManejadorPantallas16RefrescaPantallaEv>
		HAL_Delay(1);
 800c648:	2001      	movs	r0, #1
 800c64a:	f001 f8fd 	bl	800d848 <HAL_Delay>
		n++;
 800c64e:	bf00      	nop
 800c650:	e7eb      	b.n	800c62a <_Z14EjecutaSistemav+0x46>
 800c652:	bf00      	nop
 800c654:	20000254 	.word	0x20000254
 800c658:	20000258 	.word	0x20000258
 800c65c:	20000314 	.word	0x20000314
 800c660:	20000360 	.word	0x20000360

0800c664 <HAL_GPIO_EXTI_Callback>:
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b082      	sub	sp, #8
 800c668:	af00      	add	r7, sp, #0
 800c66a:	4603      	mov	r3, r0
 800c66c:	80fb      	strh	r3, [r7, #6]
	if(estacion!=NULL)
 800c66e:	4b10      	ldr	r3, [pc, #64]	@ (800c6b0 <HAL_GPIO_EXTI_Callback+0x4c>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d009      	beq.n	800c68a <HAL_GPIO_EXTI_Callback+0x26>
	{
		estacion->GPIO_INTERRUPCION(GPIO_Pin);
 800c676:	4b0e      	ldr	r3, [pc, #56]	@ (800c6b0 <HAL_GPIO_EXTI_Callback+0x4c>)
 800c678:	681a      	ldr	r2, [r3, #0]
 800c67a:	4b0d      	ldr	r3, [pc, #52]	@ (800c6b0 <HAL_GPIO_EXTI_Callback+0x4c>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	3358      	adds	r3, #88	@ 0x58
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	88f9      	ldrh	r1, [r7, #6]
 800c686:	4610      	mov	r0, r2
 800c688:	4798      	blx	r3
	}
	if(ManejadorControles!=NULL)
 800c68a:	4b0a      	ldr	r3, [pc, #40]	@ (800c6b4 <HAL_GPIO_EXTI_Callback+0x50>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d009      	beq.n	800c6a6 <HAL_GPIO_EXTI_Callback+0x42>
	{
		ManejadorControles->GPIO_INTERRUPCION(GPIO_Pin);
 800c692:	4b08      	ldr	r3, [pc, #32]	@ (800c6b4 <HAL_GPIO_EXTI_Callback+0x50>)
 800c694:	681a      	ldr	r2, [r3, #0]
 800c696:	4b07      	ldr	r3, [pc, #28]	@ (800c6b4 <HAL_GPIO_EXTI_Callback+0x50>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	3334      	adds	r3, #52	@ 0x34
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	88f9      	ldrh	r1, [r7, #6]
 800c6a2:	4610      	mov	r0, r2
 800c6a4:	4798      	blx	r3
	}
}
 800c6a6:	bf00      	nop
 800c6a8:	3708      	adds	r7, #8
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}
 800c6ae:	bf00      	nop
 800c6b0:	20000254 	.word	0x20000254
 800c6b4:	20000314 	.word	0x20000314

0800c6b8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM3)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	4a0a      	ldr	r2, [pc, #40]	@ (800c6f0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	d10e      	bne.n	800c6e8 <HAL_TIM_PeriodElapsedCallback+0x30>
	{
		if(estacion==NULL)
 800c6ca:	4b0a      	ldr	r3, [pc, #40]	@ (800c6f4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d009      	beq.n	800c6e6 <HAL_TIM_PeriodElapsedCallback+0x2e>
			return;
		estacion->TimerTick();
 800c6d2:	4b08      	ldr	r3, [pc, #32]	@ (800c6f4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800c6d4:	681a      	ldr	r2, [r3, #0]
 800c6d6:	4b07      	ldr	r3, [pc, #28]	@ (800c6f4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	3340      	adds	r3, #64	@ 0x40
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	4610      	mov	r0, r2
 800c6e2:	4798      	blx	r3
 800c6e4:	e000      	b.n	800c6e8 <HAL_TIM_PeriodElapsedCallback+0x30>
			return;
 800c6e6:	bf00      	nop
	}
}
 800c6e8:	3708      	adds	r7, #8
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}
 800c6ee:	bf00      	nop
 800c6f0:	40000400 	.word	0x40000400
 800c6f4:	20000254 	.word	0x20000254

0800c6f8 <_Z41__static_initialization_and_destruction_0ii>:
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b082      	sub	sp, #8
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
 800c700:	6039      	str	r1, [r7, #0]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2b01      	cmp	r3, #1
 800c706:	d10d      	bne.n	800c724 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c70e:	4293      	cmp	r3, r2
 800c710:	d108      	bne.n	800c724 <_Z41__static_initialization_and_destruction_0ii+0x2c>
CManejadorPantallas ManejadorPantallas;
 800c712:	480f      	ldr	r0, [pc, #60]	@ (800c750 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800c714:	f7f7 fb1c 	bl	8003d50 <_ZN19CManejadorPantallasC1Ev>
CEprom Eprom;
 800c718:	480e      	ldr	r0, [pc, #56]	@ (800c754 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800c71a:	f7f4 fe95 	bl	8001448 <_ZN6CEpromC1Ev>
CControladorRampas ControladorRampas;
 800c71e:	480e      	ldr	r0, [pc, #56]	@ (800c758 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800c720:	f7fe fd54 	bl	800b1cc <_ZN18CControladorRampasC1Ev>
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d10d      	bne.n	800c746 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c730:	4293      	cmp	r3, r2
 800c732:	d108      	bne.n	800c746 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 800c734:	4808      	ldr	r0, [pc, #32]	@ (800c758 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800c736:	f7fe fdb5 	bl	800b2a4 <_ZN18CControladorRampasD1Ev>
CEprom Eprom;
 800c73a:	4806      	ldr	r0, [pc, #24]	@ (800c754 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800c73c:	f7f4 fed2 	bl	80014e4 <_ZN6CEpromD1Ev>
CManejadorPantallas ManejadorPantallas;
 800c740:	4803      	ldr	r0, [pc, #12]	@ (800c750 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800c742:	f7f7 fb2f 	bl	8003da4 <_ZN19CManejadorPantallasD1Ev>
}
 800c746:	bf00      	nop
 800c748:	3708      	adds	r7, #8
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}
 800c74e:	bf00      	nop
 800c750:	20000258 	.word	0x20000258
 800c754:	20000318 	.word	0x20000318
 800c758:	20000360 	.word	0x20000360

0800c75c <_GLOBAL__sub_I_estacion>:
 800c75c:	b580      	push	{r7, lr}
 800c75e:	af00      	add	r7, sp, #0
 800c760:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800c764:	2001      	movs	r0, #1
 800c766:	f7ff ffc7 	bl	800c6f8 <_Z41__static_initialization_and_destruction_0ii>
 800c76a:	bd80      	pop	{r7, pc}

0800c76c <_GLOBAL__sub_D_estacion>:
 800c76c:	b580      	push	{r7, lr}
 800c76e:	af00      	add	r7, sp, #0
 800c770:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800c774:	2000      	movs	r0, #0
 800c776:	f7ff ffbf 	bl	800c6f8 <_Z41__static_initialization_and_destruction_0ii>
 800c77a:	bd80      	pop	{r7, pc}

0800c77c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b08a      	sub	sp, #40	@ 0x28
 800c780:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800c782:	2300      	movs	r3, #0
 800c784:	613b      	str	r3, [r7, #16]
 800c786:	4b6e      	ldr	r3, [pc, #440]	@ (800c940 <MX_GPIO_Init+0x1c4>)
 800c788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c78a:	4a6d      	ldr	r2, [pc, #436]	@ (800c940 <MX_GPIO_Init+0x1c4>)
 800c78c:	f043 0310 	orr.w	r3, r3, #16
 800c790:	6313      	str	r3, [r2, #48]	@ 0x30
 800c792:	4b6b      	ldr	r3, [pc, #428]	@ (800c940 <MX_GPIO_Init+0x1c4>)
 800c794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c796:	f003 0310 	and.w	r3, r3, #16
 800c79a:	613b      	str	r3, [r7, #16]
 800c79c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c79e:	2300      	movs	r3, #0
 800c7a0:	60fb      	str	r3, [r7, #12]
 800c7a2:	4b67      	ldr	r3, [pc, #412]	@ (800c940 <MX_GPIO_Init+0x1c4>)
 800c7a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7a6:	4a66      	ldr	r2, [pc, #408]	@ (800c940 <MX_GPIO_Init+0x1c4>)
 800c7a8:	f043 0304 	orr.w	r3, r3, #4
 800c7ac:	6313      	str	r3, [r2, #48]	@ 0x30
 800c7ae:	4b64      	ldr	r3, [pc, #400]	@ (800c940 <MX_GPIO_Init+0x1c4>)
 800c7b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7b2:	f003 0304 	and.w	r3, r3, #4
 800c7b6:	60fb      	str	r3, [r7, #12]
 800c7b8:	68fb      	ldr	r3, [r7, #12]
//  __HAL_RCC_GPIOF_CLK_ENABLE();
//  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	60bb      	str	r3, [r7, #8]
 800c7be:	4b60      	ldr	r3, [pc, #384]	@ (800c940 <MX_GPIO_Init+0x1c4>)
 800c7c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7c2:	4a5f      	ldr	r2, [pc, #380]	@ (800c940 <MX_GPIO_Init+0x1c4>)
 800c7c4:	f043 0301 	orr.w	r3, r3, #1
 800c7c8:	6313      	str	r3, [r2, #48]	@ 0x30
 800c7ca:	4b5d      	ldr	r3, [pc, #372]	@ (800c940 <MX_GPIO_Init+0x1c4>)
 800c7cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7ce:	f003 0301 	and.w	r3, r3, #1
 800c7d2:	60bb      	str	r3, [r7, #8]
 800c7d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	607b      	str	r3, [r7, #4]
 800c7da:	4b59      	ldr	r3, [pc, #356]	@ (800c940 <MX_GPIO_Init+0x1c4>)
 800c7dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7de:	4a58      	ldr	r2, [pc, #352]	@ (800c940 <MX_GPIO_Init+0x1c4>)
 800c7e0:	f043 0302 	orr.w	r3, r3, #2
 800c7e4:	6313      	str	r3, [r2, #48]	@ 0x30
 800c7e6:	4b56      	ldr	r3, [pc, #344]	@ (800c940 <MX_GPIO_Init+0x1c4>)
 800c7e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7ea:	f003 0302 	and.w	r3, r3, #2
 800c7ee:	607b      	str	r3, [r7, #4]
 800c7f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	603b      	str	r3, [r7, #0]
 800c7f6:	4b52      	ldr	r3, [pc, #328]	@ (800c940 <MX_GPIO_Init+0x1c4>)
 800c7f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7fa:	4a51      	ldr	r2, [pc, #324]	@ (800c940 <MX_GPIO_Init+0x1c4>)
 800c7fc:	f043 0308 	orr.w	r3, r3, #8
 800c800:	6313      	str	r3, [r2, #48]	@ 0x30
 800c802:	4b4f      	ldr	r3, [pc, #316]	@ (800c940 <MX_GPIO_Init+0x1c4>)
 800c804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c806:	f003 0308 	and.w	r3, r3, #8
 800c80a:	603b      	str	r3, [r7, #0]
 800c80c:	683b      	ldr	r3, [r7, #0]
//  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 800c80e:	2304      	movs	r3, #4
 800c810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c812:	2300      	movs	r3, #0
 800c814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c816:	2300      	movs	r3, #0
 800c818:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 800c81a:	f107 0314 	add.w	r3, r7, #20
 800c81e:	4619      	mov	r1, r3
 800c820:	4848      	ldr	r0, [pc, #288]	@ (800c944 <MX_GPIO_Init+0x1c8>)
 800c822:	f001 fc7b 	bl	800e11c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 800c826:	2368      	movs	r3, #104	@ 0x68
 800c828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c82a:	2301      	movs	r3, #1
 800c82c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c82e:	2300      	movs	r3, #0
 800c830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c832:	2303      	movs	r3, #3
 800c834:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800c836:	f107 0314 	add.w	r3, r7, #20
 800c83a:	4619      	mov	r1, r3
 800c83c:	4841      	ldr	r0, [pc, #260]	@ (800c944 <MX_GPIO_Init+0x1c8>)
 800c83e:	f001 fc6d 	bl	800e11c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 800c842:	2310      	movs	r3, #16
 800c844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c846:	2300      	movs	r3, #0
 800c848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c84a:	2301      	movs	r3, #1
 800c84c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 800c84e:	f107 0314 	add.w	r3, r7, #20
 800c852:	4619      	mov	r1, r3
 800c854:	483b      	ldr	r0, [pc, #236]	@ (800c944 <MX_GPIO_Init+0x1c8>)
 800c856:	f001 fc61 	bl	800e11c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 800c85a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c85e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c860:	2300      	movs	r3, #0
 800c862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c864:	2300      	movs	r3, #0
 800c866:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 800c868:	f107 0314 	add.w	r3, r7, #20
 800c86c:	4619      	mov	r1, r3
 800c86e:	4836      	ldr	r0, [pc, #216]	@ (800c948 <MX_GPIO_Init+0x1cc>)
 800c870:	f001 fc54 	bl	800e11c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800c874:	2332      	movs	r3, #50	@ 0x32
 800c876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c878:	2302      	movs	r3, #2
 800c87a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c87c:	2300      	movs	r3, #0
 800c87e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c880:	2303      	movs	r3, #3
 800c882:	623b      	str	r3, [r7, #32]
  //GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c884:	f107 0314 	add.w	r3, r7, #20
 800c888:	4619      	mov	r1, r3
 800c88a:	482f      	ldr	r0, [pc, #188]	@ (800c948 <MX_GPIO_Init+0x1cc>)
 800c88c:	f001 fc46 	bl	800e11c <HAL_GPIO_Init>
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
////  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
//  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800c890:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c896:	2302      	movs	r3, #2
 800c898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c89a:	2300      	movs	r3, #0
 800c89c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c89e:	2303      	movs	r3, #3
 800c8a0:	623b      	str	r3, [r7, #32]
  //GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800c8a2:	f107 0314 	add.w	r3, r7, #20
 800c8a6:	4619      	mov	r1, r3
 800c8a8:	4828      	ldr	r0, [pc, #160]	@ (800c94c <MX_GPIO_Init+0x1d0>)
 800c8aa:	f001 fc37 	bl	800e11c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800c8ae:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 800c8b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c8c0:	f107 0314 	add.w	r3, r7, #20
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	4821      	ldr	r0, [pc, #132]	@ (800c94c <MX_GPIO_Init+0x1d0>)
 800c8c8:	f001 fc28 	bl	800e11c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800c8cc:	2340      	movs	r3, #64	@ 0x40
 800c8ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	623b      	str	r3, [r7, #32]
  //HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800c8dc:	2380      	movs	r3, #128	@ 0x80
 800c8de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	61fb      	str	r3, [r7, #28]
  //HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 800c8e8:	2323      	movs	r3, #35	@ 0x23
 800c8ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c8f4:	2303      	movs	r3, #3
 800c8f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c8f8:	f107 0314 	add.w	r3, r7, #20
 800c8fc:	4619      	mov	r1, r3
 800c8fe:	4812      	ldr	r0, [pc, #72]	@ (800c948 <MX_GPIO_Init+0x1cc>)
 800c900:	f001 fc0c 	bl	800e11c <HAL_GPIO_Init>
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  //GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
//  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800c904:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800c908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c90a:	2302      	movs	r3, #2
 800c90c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c90e:	2300      	movs	r3, #0
 800c910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c912:	2303      	movs	r3, #3
 800c914:	623b      	str	r3, [r7, #32]
//  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
//  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 800c916:	2200      	movs	r2, #0
 800c918:	2168      	movs	r1, #104	@ 0x68
 800c91a:	480a      	ldr	r0, [pc, #40]	@ (800c944 <MX_GPIO_Init+0x1c8>)
 800c91c:	f001 fd9a 	bl	800e454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800c920:	2200      	movs	r2, #0
 800c922:	f44f 4184 	mov.w	r1, #16896	@ 0x4200
 800c926:	4809      	ldr	r0, [pc, #36]	@ (800c94c <MX_GPIO_Init+0x1d0>)
 800c928:	f001 fd94 	bl	800e454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
//  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 800c92c:	2200      	movs	r2, #0
 800c92e:	2123      	movs	r1, #35	@ 0x23
 800c930:	4805      	ldr	r0, [pc, #20]	@ (800c948 <MX_GPIO_Init+0x1cc>)
 800c932:	f001 fd8f 	bl	800e454 <HAL_GPIO_WritePin>

}
 800c936:	bf00      	nop
 800c938:	3728      	adds	r7, #40	@ 0x28
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}
 800c93e:	bf00      	nop
 800c940:	40023800 	.word	0x40023800
 800c944:	40021000 	.word	0x40021000
 800c948:	40020800 	.word	0x40020800
 800c94c:	40020400 	.word	0x40020400

0800c950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b082      	sub	sp, #8
 800c954:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800c956:	f000 ff05 	bl	800d764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800c95a:	f000 f82f 	bl	800c9bc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800c95e:	f000 fa83 	bl	800ce68 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 800c962:	f000 f89d 	bl	800caa0 <_ZL12MX_ADC1_Initv>
  MX_I2C1_Init();
 800c966:	f000 f8f7 	bl	800cb58 <_ZL12MX_I2C1_Initv>
  MX_SPI1_Init();
 800c96a:	f000 f929 	bl	800cbc0 <_ZL12MX_SPI1_Initv>
  MX_TIM2_Init();
 800c96e:	f000 f963 	bl	800cc38 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 800c972:	f000 f9ef 	bl	800cd54 <_ZL12MX_TIM3_Initv>
  MX_USART1_UART_Init();
 800c976:	f000 fa49 	bl	800ce0c <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 800c97a:	480d      	ldr	r0, [pc, #52]	@ (800c9b0 <main+0x60>)
 800c97c:	f003 fd12 	bl	80103a4 <HAL_TIM_Base_Start_IT>
	IncializaSistema();
 800c980:	f7ff fdf2 	bl	800c568 <_Z16IncializaSistemav>
	EjecutaSistema();
 800c984:	f7ff fe2e 	bl	800c5e4 <_Z14EjecutaSistemav>
  USART1_UART_Init();
 800c988:	f7ff fc28 	bl	800c1dc <_Z16USART1_UART_Initv>
	  HAL_ADC_Start(&hadc1);
 800c98c:	4809      	ldr	r0, [pc, #36]	@ (800c9b4 <main+0x64>)
 800c98e:	f000 ffc3 	bl	800d918 <HAL_ADC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		int valor=HAL_ADC_GetValue(&hadc1);
 800c992:	4808      	ldr	r0, [pc, #32]	@ (800c9b4 <main+0x64>)
 800c994:	f001 f874 	bl	800da80 <HAL_ADC_GetValue>
 800c998:	4603      	mov	r3, r0
 800c99a:	607b      	str	r3, [r7, #4]
		SerialPrintf((char*)"\r\n analogo: %d",valor);
 800c99c:	6879      	ldr	r1, [r7, #4]
 800c99e:	4806      	ldr	r0, [pc, #24]	@ (800c9b8 <main+0x68>)
 800c9a0:	f7ff fc50 	bl	800c244 <_Z12SerialPrintfPcz>
		HAL_Delay(500);
 800c9a4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800c9a8:	f000 ff4e 	bl	800d848 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800c9ac:	bf00      	nop
 800c9ae:	e7f0      	b.n	800c992 <main+0x42>
 800c9b0:	200004cc 	.word	0x200004cc
 800c9b4:	20000390 	.word	0x20000390
 800c9b8:	08014c88 	.word	0x08014c88

0800c9bc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b094      	sub	sp, #80	@ 0x50
 800c9c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c9c2:	f107 0320 	add.w	r3, r7, #32
 800c9c6:	2230      	movs	r2, #48	@ 0x30
 800c9c8:	2100      	movs	r1, #0
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f005 febf 	bl	801274e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c9d0:	f107 030c 	add.w	r3, r7, #12
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	601a      	str	r2, [r3, #0]
 800c9d8:	605a      	str	r2, [r3, #4]
 800c9da:	609a      	str	r2, [r3, #8]
 800c9dc:	60da      	str	r2, [r3, #12]
 800c9de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	60bb      	str	r3, [r7, #8]
 800c9e4:	4b2c      	ldr	r3, [pc, #176]	@ (800ca98 <_Z18SystemClock_Configv+0xdc>)
 800c9e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9e8:	4a2b      	ldr	r2, [pc, #172]	@ (800ca98 <_Z18SystemClock_Configv+0xdc>)
 800c9ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c9ee:	6413      	str	r3, [r2, #64]	@ 0x40
 800c9f0:	4b29      	ldr	r3, [pc, #164]	@ (800ca98 <_Z18SystemClock_Configv+0xdc>)
 800c9f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c9f8:	60bb      	str	r3, [r7, #8]
 800c9fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	607b      	str	r3, [r7, #4]
 800ca00:	4b26      	ldr	r3, [pc, #152]	@ (800ca9c <_Z18SystemClock_Configv+0xe0>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	4a25      	ldr	r2, [pc, #148]	@ (800ca9c <_Z18SystemClock_Configv+0xe0>)
 800ca06:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ca0a:	6013      	str	r3, [r2, #0]
 800ca0c:	4b23      	ldr	r3, [pc, #140]	@ (800ca9c <_Z18SystemClock_Configv+0xe0>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ca14:	607b      	str	r3, [r7, #4]
 800ca16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800ca18:	2302      	movs	r3, #2
 800ca1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800ca20:	2310      	movs	r3, #16
 800ca22:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ca24:	2302      	movs	r3, #2
 800ca26:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800ca2c:	2308      	movs	r3, #8
 800ca2e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800ca30:	2348      	movs	r3, #72	@ 0x48
 800ca32:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800ca34:	2302      	movs	r3, #2
 800ca36:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800ca38:	2304      	movs	r3, #4
 800ca3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ca3c:	f107 0320 	add.w	r3, r7, #32
 800ca40:	4618      	mov	r0, r3
 800ca42:	f002 fd5d 	bl	800f500 <HAL_RCC_OscConfig>
 800ca46:	4603      	mov	r3, r0
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	bf14      	ite	ne
 800ca4c:	2301      	movne	r3, #1
 800ca4e:	2300      	moveq	r3, #0
 800ca50:	b2db      	uxtb	r3, r3
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d001      	beq.n	800ca5a <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800ca56:	f000 fb0d 	bl	800d074 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ca5a:	230f      	movs	r3, #15
 800ca5c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ca5e:	2302      	movs	r3, #2
 800ca60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800ca62:	2300      	movs	r3, #0
 800ca64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800ca66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ca6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800ca70:	f107 030c 	add.w	r3, r7, #12
 800ca74:	2102      	movs	r1, #2
 800ca76:	4618      	mov	r0, r3
 800ca78:	f002 ffba 	bl	800f9f0 <HAL_RCC_ClockConfig>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	bf14      	ite	ne
 800ca82:	2301      	movne	r3, #1
 800ca84:	2300      	moveq	r3, #0
 800ca86:	b2db      	uxtb	r3, r3
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d001      	beq.n	800ca90 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 800ca8c:	f000 faf2 	bl	800d074 <Error_Handler>
  }
}
 800ca90:	bf00      	nop
 800ca92:	3750      	adds	r7, #80	@ 0x50
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}
 800ca98:	40023800 	.word	0x40023800
 800ca9c:	40007000 	.word	0x40007000

0800caa0 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b084      	sub	sp, #16
 800caa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800caa6:	463b      	mov	r3, r7
 800caa8:	2200      	movs	r2, #0
 800caaa:	601a      	str	r2, [r3, #0]
 800caac:	605a      	str	r2, [r3, #4]
 800caae:	609a      	str	r2, [r3, #8]
 800cab0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800cab2:	4b26      	ldr	r3, [pc, #152]	@ (800cb4c <_ZL12MX_ADC1_Initv+0xac>)
 800cab4:	4a26      	ldr	r2, [pc, #152]	@ (800cb50 <_ZL12MX_ADC1_Initv+0xb0>)
 800cab6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800cab8:	4b24      	ldr	r3, [pc, #144]	@ (800cb4c <_ZL12MX_ADC1_Initv+0xac>)
 800caba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800cabe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800cac0:	4b22      	ldr	r3, [pc, #136]	@ (800cb4c <_ZL12MX_ADC1_Initv+0xac>)
 800cac2:	2200      	movs	r2, #0
 800cac4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800cac6:	4b21      	ldr	r3, [pc, #132]	@ (800cb4c <_ZL12MX_ADC1_Initv+0xac>)
 800cac8:	2200      	movs	r2, #0
 800caca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800cacc:	4b1f      	ldr	r3, [pc, #124]	@ (800cb4c <_ZL12MX_ADC1_Initv+0xac>)
 800cace:	2201      	movs	r2, #1
 800cad0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800cad2:	4b1e      	ldr	r3, [pc, #120]	@ (800cb4c <_ZL12MX_ADC1_Initv+0xac>)
 800cad4:	2200      	movs	r2, #0
 800cad6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800cada:	4b1c      	ldr	r3, [pc, #112]	@ (800cb4c <_ZL12MX_ADC1_Initv+0xac>)
 800cadc:	2200      	movs	r2, #0
 800cade:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800cae0:	4b1a      	ldr	r3, [pc, #104]	@ (800cb4c <_ZL12MX_ADC1_Initv+0xac>)
 800cae2:	4a1c      	ldr	r2, [pc, #112]	@ (800cb54 <_ZL12MX_ADC1_Initv+0xb4>)
 800cae4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800cae6:	4b19      	ldr	r3, [pc, #100]	@ (800cb4c <_ZL12MX_ADC1_Initv+0xac>)
 800cae8:	2200      	movs	r2, #0
 800caea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800caec:	4b17      	ldr	r3, [pc, #92]	@ (800cb4c <_ZL12MX_ADC1_Initv+0xac>)
 800caee:	2201      	movs	r2, #1
 800caf0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800caf2:	4b16      	ldr	r3, [pc, #88]	@ (800cb4c <_ZL12MX_ADC1_Initv+0xac>)
 800caf4:	2200      	movs	r2, #0
 800caf6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800cafa:	4b14      	ldr	r3, [pc, #80]	@ (800cb4c <_ZL12MX_ADC1_Initv+0xac>)
 800cafc:	2201      	movs	r2, #1
 800cafe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800cb00:	4812      	ldr	r0, [pc, #72]	@ (800cb4c <_ZL12MX_ADC1_Initv+0xac>)
 800cb02:	f000 fec5 	bl	800d890 <HAL_ADC_Init>
 800cb06:	4603      	mov	r3, r0
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	bf14      	ite	ne
 800cb0c:	2301      	movne	r3, #1
 800cb0e:	2300      	moveq	r3, #0
 800cb10:	b2db      	uxtb	r3, r3
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d001      	beq.n	800cb1a <_ZL12MX_ADC1_Initv+0x7a>
  {
    Error_Handler();
 800cb16:	f000 faad 	bl	800d074 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800cb1a:	2303      	movs	r3, #3
 800cb1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800cb1e:	2301      	movs	r3, #1
 800cb20:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800cb22:	2300      	movs	r3, #0
 800cb24:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cb26:	463b      	mov	r3, r7
 800cb28:	4619      	mov	r1, r3
 800cb2a:	4808      	ldr	r0, [pc, #32]	@ (800cb4c <_ZL12MX_ADC1_Initv+0xac>)
 800cb2c:	f000 ffb6 	bl	800da9c <HAL_ADC_ConfigChannel>
 800cb30:	4603      	mov	r3, r0
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	bf14      	ite	ne
 800cb36:	2301      	movne	r3, #1
 800cb38:	2300      	moveq	r3, #0
 800cb3a:	b2db      	uxtb	r3, r3
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d001      	beq.n	800cb44 <_ZL12MX_ADC1_Initv+0xa4>
  {
    Error_Handler();
 800cb40:	f000 fa98 	bl	800d074 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800cb44:	bf00      	nop
 800cb46:	3710      	adds	r7, #16
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}
 800cb4c:	20000390 	.word	0x20000390
 800cb50:	40012000 	.word	0x40012000
 800cb54:	0f000001 	.word	0x0f000001

0800cb58 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800cb5c:	4b15      	ldr	r3, [pc, #84]	@ (800cbb4 <_ZL12MX_I2C1_Initv+0x5c>)
 800cb5e:	4a16      	ldr	r2, [pc, #88]	@ (800cbb8 <_ZL12MX_I2C1_Initv+0x60>)
 800cb60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800cb62:	4b14      	ldr	r3, [pc, #80]	@ (800cbb4 <_ZL12MX_I2C1_Initv+0x5c>)
 800cb64:	4a15      	ldr	r2, [pc, #84]	@ (800cbbc <_ZL12MX_I2C1_Initv+0x64>)
 800cb66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800cb68:	4b12      	ldr	r3, [pc, #72]	@ (800cbb4 <_ZL12MX_I2C1_Initv+0x5c>)
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800cb6e:	4b11      	ldr	r3, [pc, #68]	@ (800cbb4 <_ZL12MX_I2C1_Initv+0x5c>)
 800cb70:	2200      	movs	r2, #0
 800cb72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800cb74:	4b0f      	ldr	r3, [pc, #60]	@ (800cbb4 <_ZL12MX_I2C1_Initv+0x5c>)
 800cb76:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800cb7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800cb7c:	4b0d      	ldr	r3, [pc, #52]	@ (800cbb4 <_ZL12MX_I2C1_Initv+0x5c>)
 800cb7e:	2200      	movs	r2, #0
 800cb80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800cb82:	4b0c      	ldr	r3, [pc, #48]	@ (800cbb4 <_ZL12MX_I2C1_Initv+0x5c>)
 800cb84:	2200      	movs	r2, #0
 800cb86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800cb88:	4b0a      	ldr	r3, [pc, #40]	@ (800cbb4 <_ZL12MX_I2C1_Initv+0x5c>)
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800cb8e:	4b09      	ldr	r3, [pc, #36]	@ (800cbb4 <_ZL12MX_I2C1_Initv+0x5c>)
 800cb90:	2200      	movs	r2, #0
 800cb92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800cb94:	4807      	ldr	r0, [pc, #28]	@ (800cbb4 <_ZL12MX_I2C1_Initv+0x5c>)
 800cb96:	f001 fc8f 	bl	800e4b8 <HAL_I2C_Init>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	bf14      	ite	ne
 800cba0:	2301      	movne	r3, #1
 800cba2:	2300      	moveq	r3, #0
 800cba4:	b2db      	uxtb	r3, r3
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d001      	beq.n	800cbae <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800cbaa:	f000 fa63 	bl	800d074 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800cbae:	bf00      	nop
 800cbb0:	bd80      	pop	{r7, pc}
 800cbb2:	bf00      	nop
 800cbb4:	200003d8 	.word	0x200003d8
 800cbb8:	40005400 	.word	0x40005400
 800cbbc:	000186a0 	.word	0x000186a0

0800cbc0 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800cbc4:	4b1a      	ldr	r3, [pc, #104]	@ (800cc30 <_ZL12MX_SPI1_Initv+0x70>)
 800cbc6:	4a1b      	ldr	r2, [pc, #108]	@ (800cc34 <_ZL12MX_SPI1_Initv+0x74>)
 800cbc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800cbca:	4b19      	ldr	r3, [pc, #100]	@ (800cc30 <_ZL12MX_SPI1_Initv+0x70>)
 800cbcc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800cbd0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800cbd2:	4b17      	ldr	r3, [pc, #92]	@ (800cc30 <_ZL12MX_SPI1_Initv+0x70>)
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800cbd8:	4b15      	ldr	r3, [pc, #84]	@ (800cc30 <_ZL12MX_SPI1_Initv+0x70>)
 800cbda:	2200      	movs	r2, #0
 800cbdc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800cbde:	4b14      	ldr	r3, [pc, #80]	@ (800cc30 <_ZL12MX_SPI1_Initv+0x70>)
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800cbe4:	4b12      	ldr	r3, [pc, #72]	@ (800cc30 <_ZL12MX_SPI1_Initv+0x70>)
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800cbea:	4b11      	ldr	r3, [pc, #68]	@ (800cc30 <_ZL12MX_SPI1_Initv+0x70>)
 800cbec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cbf0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800cbf2:	4b0f      	ldr	r3, [pc, #60]	@ (800cc30 <_ZL12MX_SPI1_Initv+0x70>)
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800cbf8:	4b0d      	ldr	r3, [pc, #52]	@ (800cc30 <_ZL12MX_SPI1_Initv+0x70>)
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800cbfe:	4b0c      	ldr	r3, [pc, #48]	@ (800cc30 <_ZL12MX_SPI1_Initv+0x70>)
 800cc00:	2200      	movs	r2, #0
 800cc02:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cc04:	4b0a      	ldr	r3, [pc, #40]	@ (800cc30 <_ZL12MX_SPI1_Initv+0x70>)
 800cc06:	2200      	movs	r2, #0
 800cc08:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800cc0a:	4b09      	ldr	r3, [pc, #36]	@ (800cc30 <_ZL12MX_SPI1_Initv+0x70>)
 800cc0c:	220a      	movs	r2, #10
 800cc0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800cc10:	4807      	ldr	r0, [pc, #28]	@ (800cc30 <_ZL12MX_SPI1_Initv+0x70>)
 800cc12:	f003 f8cd 	bl	800fdb0 <HAL_SPI_Init>
 800cc16:	4603      	mov	r3, r0
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	bf14      	ite	ne
 800cc1c:	2301      	movne	r3, #1
 800cc1e:	2300      	moveq	r3, #0
 800cc20:	b2db      	uxtb	r3, r3
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d001      	beq.n	800cc2a <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800cc26:	f000 fa25 	bl	800d074 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800cc2a:	bf00      	nop
 800cc2c:	bd80      	pop	{r7, pc}
 800cc2e:	bf00      	nop
 800cc30:	2000042c 	.word	0x2000042c
 800cc34:	40013000 	.word	0x40013000

0800cc38 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b08e      	sub	sp, #56	@ 0x38
 800cc3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800cc3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800cc42:	2200      	movs	r2, #0
 800cc44:	601a      	str	r2, [r3, #0]
 800cc46:	605a      	str	r2, [r3, #4]
 800cc48:	609a      	str	r2, [r3, #8]
 800cc4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cc4c:	f107 0320 	add.w	r3, r7, #32
 800cc50:	2200      	movs	r2, #0
 800cc52:	601a      	str	r2, [r3, #0]
 800cc54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800cc56:	1d3b      	adds	r3, r7, #4
 800cc58:	2200      	movs	r2, #0
 800cc5a:	601a      	str	r2, [r3, #0]
 800cc5c:	605a      	str	r2, [r3, #4]
 800cc5e:	609a      	str	r2, [r3, #8]
 800cc60:	60da      	str	r2, [r3, #12]
 800cc62:	611a      	str	r2, [r3, #16]
 800cc64:	615a      	str	r2, [r3, #20]
 800cc66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800cc68:	4b39      	ldr	r3, [pc, #228]	@ (800cd50 <_ZL12MX_TIM2_Initv+0x118>)
 800cc6a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800cc6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800cc70:	4b37      	ldr	r3, [pc, #220]	@ (800cd50 <_ZL12MX_TIM2_Initv+0x118>)
 800cc72:	2247      	movs	r2, #71	@ 0x47
 800cc74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cc76:	4b36      	ldr	r3, [pc, #216]	@ (800cd50 <_ZL12MX_TIM2_Initv+0x118>)
 800cc78:	2200      	movs	r2, #0
 800cc7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800cc7c:	4b34      	ldr	r3, [pc, #208]	@ (800cd50 <_ZL12MX_TIM2_Initv+0x118>)
 800cc7e:	2263      	movs	r2, #99	@ 0x63
 800cc80:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cc82:	4b33      	ldr	r3, [pc, #204]	@ (800cd50 <_ZL12MX_TIM2_Initv+0x118>)
 800cc84:	2200      	movs	r2, #0
 800cc86:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800cc88:	4b31      	ldr	r3, [pc, #196]	@ (800cd50 <_ZL12MX_TIM2_Initv+0x118>)
 800cc8a:	2280      	movs	r2, #128	@ 0x80
 800cc8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800cc8e:	4830      	ldr	r0, [pc, #192]	@ (800cd50 <_ZL12MX_TIM2_Initv+0x118>)
 800cc90:	f003 fb38 	bl	8010304 <HAL_TIM_Base_Init>
 800cc94:	4603      	mov	r3, r0
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	bf14      	ite	ne
 800cc9a:	2301      	movne	r3, #1
 800cc9c:	2300      	moveq	r3, #0
 800cc9e:	b2db      	uxtb	r3, r3
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d001      	beq.n	800cca8 <_ZL12MX_TIM2_Initv+0x70>
  {
    Error_Handler();
 800cca4:	f000 f9e6 	bl	800d074 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800cca8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ccac:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800ccae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ccb2:	4619      	mov	r1, r3
 800ccb4:	4826      	ldr	r0, [pc, #152]	@ (800cd50 <_ZL12MX_TIM2_Initv+0x118>)
 800ccb6:	f003 fe93 	bl	80109e0 <HAL_TIM_ConfigClockSource>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	bf14      	ite	ne
 800ccc0:	2301      	movne	r3, #1
 800ccc2:	2300      	moveq	r3, #0
 800ccc4:	b2db      	uxtb	r3, r3
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d001      	beq.n	800ccce <_ZL12MX_TIM2_Initv+0x96>
  {
    Error_Handler();
 800ccca:	f000 f9d3 	bl	800d074 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800ccce:	4820      	ldr	r0, [pc, #128]	@ (800cd50 <_ZL12MX_TIM2_Initv+0x118>)
 800ccd0:	f003 fbca 	bl	8010468 <HAL_TIM_PWM_Init>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	bf14      	ite	ne
 800ccda:	2301      	movne	r3, #1
 800ccdc:	2300      	moveq	r3, #0
 800ccde:	b2db      	uxtb	r3, r3
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d001      	beq.n	800cce8 <_ZL12MX_TIM2_Initv+0xb0>
  {
    Error_Handler();
 800cce4:	f000 f9c6 	bl	800d074 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cce8:	2300      	movs	r3, #0
 800ccea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ccec:	2300      	movs	r3, #0
 800ccee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800ccf0:	f107 0320 	add.w	r3, r7, #32
 800ccf4:	4619      	mov	r1, r3
 800ccf6:	4816      	ldr	r0, [pc, #88]	@ (800cd50 <_ZL12MX_TIM2_Initv+0x118>)
 800ccf8:	f004 fa3a 	bl	8011170 <HAL_TIMEx_MasterConfigSynchronization>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	bf14      	ite	ne
 800cd02:	2301      	movne	r3, #1
 800cd04:	2300      	moveq	r3, #0
 800cd06:	b2db      	uxtb	r3, r3
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d001      	beq.n	800cd10 <_ZL12MX_TIM2_Initv+0xd8>
  {
    Error_Handler();
 800cd0c:	f000 f9b2 	bl	800d074 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800cd10:	2360      	movs	r3, #96	@ 0x60
 800cd12:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800cd14:	2300      	movs	r3, #0
 800cd16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800cd18:	2300      	movs	r3, #0
 800cd1a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800cd20:	1d3b      	adds	r3, r7, #4
 800cd22:	2200      	movs	r2, #0
 800cd24:	4619      	mov	r1, r3
 800cd26:	480a      	ldr	r0, [pc, #40]	@ (800cd50 <_ZL12MX_TIM2_Initv+0x118>)
 800cd28:	f003 fd98 	bl	801085c <HAL_TIM_PWM_ConfigChannel>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	bf14      	ite	ne
 800cd32:	2301      	movne	r3, #1
 800cd34:	2300      	moveq	r3, #0
 800cd36:	b2db      	uxtb	r3, r3
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d001      	beq.n	800cd40 <_ZL12MX_TIM2_Initv+0x108>
  {
    Error_Handler();
 800cd3c:	f000 f99a 	bl	800d074 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800cd40:	4803      	ldr	r0, [pc, #12]	@ (800cd50 <_ZL12MX_TIM2_Initv+0x118>)
 800cd42:	f000 fb19 	bl	800d378 <HAL_TIM_MspPostInit>

}
 800cd46:	bf00      	nop
 800cd48:	3738      	adds	r7, #56	@ 0x38
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}
 800cd4e:	bf00      	nop
 800cd50:	20000484 	.word	0x20000484

0800cd54 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b086      	sub	sp, #24
 800cd58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800cd5a:	f107 0308 	add.w	r3, r7, #8
 800cd5e:	2200      	movs	r2, #0
 800cd60:	601a      	str	r2, [r3, #0]
 800cd62:	605a      	str	r2, [r3, #4]
 800cd64:	609a      	str	r2, [r3, #8]
 800cd66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cd68:	463b      	mov	r3, r7
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	601a      	str	r2, [r3, #0]
 800cd6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800cd70:	4b24      	ldr	r3, [pc, #144]	@ (800ce04 <_ZL12MX_TIM3_Initv+0xb0>)
 800cd72:	4a25      	ldr	r2, [pc, #148]	@ (800ce08 <_ZL12MX_TIM3_Initv+0xb4>)
 800cd74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800cd76:	4b23      	ldr	r3, [pc, #140]	@ (800ce04 <_ZL12MX_TIM3_Initv+0xb0>)
 800cd78:	2200      	movs	r2, #0
 800cd7a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cd7c:	4b21      	ldr	r3, [pc, #132]	@ (800ce04 <_ZL12MX_TIM3_Initv+0xb0>)
 800cd7e:	2200      	movs	r2, #0
 800cd80:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800cd82:	4b20      	ldr	r3, [pc, #128]	@ (800ce04 <_ZL12MX_TIM3_Initv+0xb0>)
 800cd84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cd88:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cd8a:	4b1e      	ldr	r3, [pc, #120]	@ (800ce04 <_ZL12MX_TIM3_Initv+0xb0>)
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cd90:	4b1c      	ldr	r3, [pc, #112]	@ (800ce04 <_ZL12MX_TIM3_Initv+0xb0>)
 800cd92:	2200      	movs	r2, #0
 800cd94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800cd96:	481b      	ldr	r0, [pc, #108]	@ (800ce04 <_ZL12MX_TIM3_Initv+0xb0>)
 800cd98:	f003 fab4 	bl	8010304 <HAL_TIM_Base_Init>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	bf14      	ite	ne
 800cda2:	2301      	movne	r3, #1
 800cda4:	2300      	moveq	r3, #0
 800cda6:	b2db      	uxtb	r3, r3
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d001      	beq.n	800cdb0 <_ZL12MX_TIM3_Initv+0x5c>
  {
    Error_Handler();
 800cdac:	f000 f962 	bl	800d074 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800cdb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cdb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800cdb6:	f107 0308 	add.w	r3, r7, #8
 800cdba:	4619      	mov	r1, r3
 800cdbc:	4811      	ldr	r0, [pc, #68]	@ (800ce04 <_ZL12MX_TIM3_Initv+0xb0>)
 800cdbe:	f003 fe0f 	bl	80109e0 <HAL_TIM_ConfigClockSource>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	bf14      	ite	ne
 800cdc8:	2301      	movne	r3, #1
 800cdca:	2300      	moveq	r3, #0
 800cdcc:	b2db      	uxtb	r3, r3
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d001      	beq.n	800cdd6 <_ZL12MX_TIM3_Initv+0x82>
  {
    Error_Handler();
 800cdd2:	f000 f94f 	bl	800d074 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cdda:	2300      	movs	r3, #0
 800cddc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800cdde:	463b      	mov	r3, r7
 800cde0:	4619      	mov	r1, r3
 800cde2:	4808      	ldr	r0, [pc, #32]	@ (800ce04 <_ZL12MX_TIM3_Initv+0xb0>)
 800cde4:	f004 f9c4 	bl	8011170 <HAL_TIMEx_MasterConfigSynchronization>
 800cde8:	4603      	mov	r3, r0
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	bf14      	ite	ne
 800cdee:	2301      	movne	r3, #1
 800cdf0:	2300      	moveq	r3, #0
 800cdf2:	b2db      	uxtb	r3, r3
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d001      	beq.n	800cdfc <_ZL12MX_TIM3_Initv+0xa8>
  {
    Error_Handler();
 800cdf8:	f000 f93c 	bl	800d074 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800cdfc:	bf00      	nop
 800cdfe:	3718      	adds	r7, #24
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd80      	pop	{r7, pc}
 800ce04:	200004cc 	.word	0x200004cc
 800ce08:	40000400 	.word	0x40000400

0800ce0c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800ce10:	4b13      	ldr	r3, [pc, #76]	@ (800ce60 <_ZL19MX_USART1_UART_Initv+0x54>)
 800ce12:	4a14      	ldr	r2, [pc, #80]	@ (800ce64 <_ZL19MX_USART1_UART_Initv+0x58>)
 800ce14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800ce16:	4b12      	ldr	r3, [pc, #72]	@ (800ce60 <_ZL19MX_USART1_UART_Initv+0x54>)
 800ce18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800ce1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800ce1e:	4b10      	ldr	r3, [pc, #64]	@ (800ce60 <_ZL19MX_USART1_UART_Initv+0x54>)
 800ce20:	2200      	movs	r2, #0
 800ce22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800ce24:	4b0e      	ldr	r3, [pc, #56]	@ (800ce60 <_ZL19MX_USART1_UART_Initv+0x54>)
 800ce26:	2200      	movs	r2, #0
 800ce28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800ce2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ce60 <_ZL19MX_USART1_UART_Initv+0x54>)
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800ce30:	4b0b      	ldr	r3, [pc, #44]	@ (800ce60 <_ZL19MX_USART1_UART_Initv+0x54>)
 800ce32:	220c      	movs	r2, #12
 800ce34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ce36:	4b0a      	ldr	r3, [pc, #40]	@ (800ce60 <_ZL19MX_USART1_UART_Initv+0x54>)
 800ce38:	2200      	movs	r2, #0
 800ce3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800ce3c:	4b08      	ldr	r3, [pc, #32]	@ (800ce60 <_ZL19MX_USART1_UART_Initv+0x54>)
 800ce3e:	2200      	movs	r2, #0
 800ce40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800ce42:	4807      	ldr	r0, [pc, #28]	@ (800ce60 <_ZL19MX_USART1_UART_Initv+0x54>)
 800ce44:	f004 fa16 	bl	8011274 <HAL_UART_Init>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	bf14      	ite	ne
 800ce4e:	2301      	movne	r3, #1
 800ce50:	2300      	moveq	r3, #0
 800ce52:	b2db      	uxtb	r3, r3
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d001      	beq.n	800ce5c <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 800ce58:	f000 f90c 	bl	800d074 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800ce5c:	bf00      	nop
 800ce5e:	bd80      	pop	{r7, pc}
 800ce60:	20000514 	.word	0x20000514
 800ce64:	40011000 	.word	0x40011000

0800ce68 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b08a      	sub	sp, #40	@ 0x28
 800ce6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce6e:	f107 0314 	add.w	r3, r7, #20
 800ce72:	2200      	movs	r2, #0
 800ce74:	601a      	str	r2, [r3, #0]
 800ce76:	605a      	str	r2, [r3, #4]
 800ce78:	609a      	str	r2, [r3, #8]
 800ce7a:	60da      	str	r2, [r3, #12]
 800ce7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ce7e:	2300      	movs	r3, #0
 800ce80:	613b      	str	r3, [r7, #16]
 800ce82:	4b78      	ldr	r3, [pc, #480]	@ (800d064 <_ZL12MX_GPIO_Initv+0x1fc>)
 800ce84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce86:	4a77      	ldr	r2, [pc, #476]	@ (800d064 <_ZL12MX_GPIO_Initv+0x1fc>)
 800ce88:	f043 0304 	orr.w	r3, r3, #4
 800ce8c:	6313      	str	r3, [r2, #48]	@ 0x30
 800ce8e:	4b75      	ldr	r3, [pc, #468]	@ (800d064 <_ZL12MX_GPIO_Initv+0x1fc>)
 800ce90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce92:	f003 0304 	and.w	r3, r3, #4
 800ce96:	613b      	str	r3, [r7, #16]
 800ce98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	60fb      	str	r3, [r7, #12]
 800ce9e:	4b71      	ldr	r3, [pc, #452]	@ (800d064 <_ZL12MX_GPIO_Initv+0x1fc>)
 800cea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cea2:	4a70      	ldr	r2, [pc, #448]	@ (800d064 <_ZL12MX_GPIO_Initv+0x1fc>)
 800cea4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cea8:	6313      	str	r3, [r2, #48]	@ 0x30
 800ceaa:	4b6e      	ldr	r3, [pc, #440]	@ (800d064 <_ZL12MX_GPIO_Initv+0x1fc>)
 800ceac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ceae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ceb2:	60fb      	str	r3, [r7, #12]
 800ceb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	60bb      	str	r3, [r7, #8]
 800ceba:	4b6a      	ldr	r3, [pc, #424]	@ (800d064 <_ZL12MX_GPIO_Initv+0x1fc>)
 800cebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cebe:	4a69      	ldr	r2, [pc, #420]	@ (800d064 <_ZL12MX_GPIO_Initv+0x1fc>)
 800cec0:	f043 0301 	orr.w	r3, r3, #1
 800cec4:	6313      	str	r3, [r2, #48]	@ 0x30
 800cec6:	4b67      	ldr	r3, [pc, #412]	@ (800d064 <_ZL12MX_GPIO_Initv+0x1fc>)
 800cec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ceca:	f003 0301 	and.w	r3, r3, #1
 800cece:	60bb      	str	r3, [r7, #8]
 800ced0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ced2:	2300      	movs	r3, #0
 800ced4:	607b      	str	r3, [r7, #4]
 800ced6:	4b63      	ldr	r3, [pc, #396]	@ (800d064 <_ZL12MX_GPIO_Initv+0x1fc>)
 800ced8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ceda:	4a62      	ldr	r2, [pc, #392]	@ (800d064 <_ZL12MX_GPIO_Initv+0x1fc>)
 800cedc:	f043 0302 	orr.w	r3, r3, #2
 800cee0:	6313      	str	r3, [r2, #48]	@ 0x30
 800cee2:	4b60      	ldr	r3, [pc, #384]	@ (800d064 <_ZL12MX_GPIO_Initv+0x1fc>)
 800cee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cee6:	f003 0302 	and.w	r3, r3, #2
 800ceea:	607b      	str	r3, [r7, #4]
 800ceec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800ceee:	2200      	movs	r2, #0
 800cef0:	2106      	movs	r1, #6
 800cef2:	485d      	ldr	r0, [pc, #372]	@ (800d068 <_ZL12MX_GPIO_Initv+0x200>)
 800cef4:	f001 faae 	bl	800e454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|Display_DC_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 800cef8:	2200      	movs	r2, #0
 800cefa:	2123      	movs	r1, #35	@ 0x23
 800cefc:	485b      	ldr	r0, [pc, #364]	@ (800d06c <_ZL12MX_GPIO_Initv+0x204>)
 800cefe:	f001 faa9 	bl	800e454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 800cf02:	2201      	movs	r2, #1
 800cf04:	2108      	movs	r1, #8
 800cf06:	4859      	ldr	r0, [pc, #356]	@ (800d06c <_ZL12MX_GPIO_Initv+0x204>)
 800cf08:	f001 faa4 	bl	800e454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800cf0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cf10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800cf12:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800cf16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cf18:	2301      	movs	r3, #1
 800cf1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cf1c:	f107 0314 	add.w	r3, r7, #20
 800cf20:	4619      	mov	r1, r3
 800cf22:	4853      	ldr	r0, [pc, #332]	@ (800d070 <_ZL12MX_GPIO_Initv+0x208>)
 800cf24:	f001 f8fa 	bl	800e11c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800cf28:	2301      	movs	r3, #1
 800cf2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cf30:	2301      	movs	r3, #1
 800cf32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf34:	f107 0314 	add.w	r3, r7, #20
 800cf38:	4619      	mov	r1, r3
 800cf3a:	484b      	ldr	r0, [pc, #300]	@ (800d068 <_ZL12MX_GPIO_Initv+0x200>)
 800cf3c:	f001 f8ee 	bl	800e11c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800cf40:	2306      	movs	r3, #6
 800cf42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cf44:	2301      	movs	r3, #1
 800cf46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf50:	f107 0314 	add.w	r3, r7, #20
 800cf54:	4619      	mov	r1, r3
 800cf56:	4844      	ldr	r0, [pc, #272]	@ (800d068 <_ZL12MX_GPIO_Initv+0x200>)
 800cf58:	f001 f8e0 	bl	800e11c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800cf5c:	2340      	movs	r3, #64	@ 0x40
 800cf5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800cf60:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800cf64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cf66:	2301      	movs	r3, #1
 800cf68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf6a:	f107 0314 	add.w	r3, r7, #20
 800cf6e:	4619      	mov	r1, r3
 800cf70:	483d      	ldr	r0, [pc, #244]	@ (800d068 <_ZL12MX_GPIO_Initv+0x200>)
 800cf72:	f001 f8d3 	bl	800e11c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 Display_DC_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|Display_DC_Pin;
 800cf76:	2303      	movs	r3, #3
 800cf78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cf7e:	2301      	movs	r3, #1
 800cf80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cf82:	2300      	movs	r3, #0
 800cf84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cf86:	f107 0314 	add.w	r3, r7, #20
 800cf8a:	4619      	mov	r1, r3
 800cf8c:	4837      	ldr	r0, [pc, #220]	@ (800d06c <_ZL12MX_GPIO_Initv+0x204>)
 800cf8e:	f001 f8c5 	bl	800e11c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 800cf92:	f240 4304 	movw	r3, #1028	@ 0x404
 800cf96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800cf98:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800cf9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cfa2:	f107 0314 	add.w	r3, r7, #20
 800cfa6:	4619      	mov	r1, r3
 800cfa8:	4830      	ldr	r0, [pc, #192]	@ (800d06c <_ZL12MX_GPIO_Initv+0x204>)
 800cfaa:	f001 f8b7 	bl	800e11c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800cfae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cfb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cfb8:	2301      	movs	r3, #1
 800cfba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cfbc:	f107 0314 	add.w	r3, r7, #20
 800cfc0:	4619      	mov	r1, r3
 800cfc2:	482a      	ldr	r0, [pc, #168]	@ (800d06c <_ZL12MX_GPIO_Initv+0x204>)
 800cfc4:	f001 f8aa 	bl	800e11c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8;
 800cfc8:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 800cfcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800cfce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800cfd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cfd8:	f107 0314 	add.w	r3, r7, #20
 800cfdc:	4619      	mov	r1, r3
 800cfde:	4823      	ldr	r0, [pc, #140]	@ (800d06c <_ZL12MX_GPIO_Initv+0x204>)
 800cfe0:	f001 f89c 	bl	800e11c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800cfe4:	2328      	movs	r3, #40	@ 0x28
 800cfe6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cfe8:	2301      	movs	r3, #1
 800cfea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cfec:	2300      	movs	r3, #0
 800cfee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cff0:	2300      	movs	r3, #0
 800cff2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cff4:	f107 0314 	add.w	r3, r7, #20
 800cff8:	4619      	mov	r1, r3
 800cffa:	481c      	ldr	r0, [pc, #112]	@ (800d06c <_ZL12MX_GPIO_Initv+0x204>)
 800cffc:	f001 f88e 	bl	800e11c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800d000:	2310      	movs	r3, #16
 800d002:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d004:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800d008:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d00a:	2300      	movs	r3, #0
 800d00c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d00e:	f107 0314 	add.w	r3, r7, #20
 800d012:	4619      	mov	r1, r3
 800d014:	4815      	ldr	r0, [pc, #84]	@ (800d06c <_ZL12MX_GPIO_Initv+0x204>)
 800d016:	f001 f881 	bl	800e11c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800d01a:	2200      	movs	r2, #0
 800d01c:	2100      	movs	r1, #0
 800d01e:	2008      	movs	r0, #8
 800d020:	f001 f845 	bl	800e0ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800d024:	2008      	movs	r0, #8
 800d026:	f001 f85e 	bl	800e0e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800d02a:	2200      	movs	r2, #0
 800d02c:	2100      	movs	r1, #0
 800d02e:	200a      	movs	r0, #10
 800d030:	f001 f83d 	bl	800e0ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800d034:	200a      	movs	r0, #10
 800d036:	f001 f856 	bl	800e0e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800d03a:	2200      	movs	r2, #0
 800d03c:	2100      	movs	r1, #0
 800d03e:	2017      	movs	r0, #23
 800d040:	f001 f835 	bl	800e0ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800d044:	2017      	movs	r0, #23
 800d046:	f001 f84e 	bl	800e0e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800d04a:	2200      	movs	r2, #0
 800d04c:	2100      	movs	r1, #0
 800d04e:	2028      	movs	r0, #40	@ 0x28
 800d050:	f001 f82d 	bl	800e0ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800d054:	2028      	movs	r0, #40	@ 0x28
 800d056:	f001 f846 	bl	800e0e6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800d05a:	bf00      	nop
 800d05c:	3728      	adds	r7, #40	@ 0x28
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
 800d062:	bf00      	nop
 800d064:	40023800 	.word	0x40023800
 800d068:	40020000 	.word	0x40020000
 800d06c:	40020400 	.word	0x40020400
 800d070:	40020800 	.word	0x40020800

0800d074 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d074:	b480      	push	{r7}
 800d076:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800d078:	b672      	cpsid	i
}
 800d07a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800d07c:	bf00      	nop
 800d07e:	e7fd      	b.n	800d07c <Error_Handler+0x8>

0800d080 <SPI1_Init>:

SPI_HandleTypeDef Hspi;

/* SPI5 init function */
void SPI1_Init(void)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	af00      	add	r7, sp, #0
	Hspi.Instance = SPI1;
 800d084:	4b17      	ldr	r3, [pc, #92]	@ (800d0e4 <SPI1_Init+0x64>)
 800d086:	4a18      	ldr	r2, [pc, #96]	@ (800d0e8 <SPI1_Init+0x68>)
 800d088:	601a      	str	r2, [r3, #0]
	Hspi.Init.Mode = SPI_MODE_MASTER;
 800d08a:	4b16      	ldr	r3, [pc, #88]	@ (800d0e4 <SPI1_Init+0x64>)
 800d08c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800d090:	605a      	str	r2, [r3, #4]
	Hspi.Init.Direction = SPI_DIRECTION_2LINES;
 800d092:	4b14      	ldr	r3, [pc, #80]	@ (800d0e4 <SPI1_Init+0x64>)
 800d094:	2200      	movs	r2, #0
 800d096:	609a      	str	r2, [r3, #8]
	Hspi.Init.DataSize = SPI_DATASIZE_8BIT;
 800d098:	4b12      	ldr	r3, [pc, #72]	@ (800d0e4 <SPI1_Init+0x64>)
 800d09a:	2200      	movs	r2, #0
 800d09c:	60da      	str	r2, [r3, #12]
	Hspi.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d09e:	4b11      	ldr	r3, [pc, #68]	@ (800d0e4 <SPI1_Init+0x64>)
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	611a      	str	r2, [r3, #16]
	Hspi.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d0a4:	4b0f      	ldr	r3, [pc, #60]	@ (800d0e4 <SPI1_Init+0x64>)
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	615a      	str	r2, [r3, #20]
	Hspi.Init.NSS = SPI_NSS_SOFT;
 800d0aa:	4b0e      	ldr	r3, [pc, #56]	@ (800d0e4 <SPI1_Init+0x64>)
 800d0ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d0b0:	619a      	str	r2, [r3, #24]
	Hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d0b2:	4b0c      	ldr	r3, [pc, #48]	@ (800d0e4 <SPI1_Init+0x64>)
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	61da      	str	r2, [r3, #28]
	Hspi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d0b8:	4b0a      	ldr	r3, [pc, #40]	@ (800d0e4 <SPI1_Init+0x64>)
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	621a      	str	r2, [r3, #32]
	Hspi.Init.TIMode = SPI_TIMODE_DISABLE;
 800d0be:	4b09      	ldr	r3, [pc, #36]	@ (800d0e4 <SPI1_Init+0x64>)
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	625a      	str	r2, [r3, #36]	@ 0x24
	Hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d0c4:	4b07      	ldr	r3, [pc, #28]	@ (800d0e4 <SPI1_Init+0x64>)
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	629a      	str	r2, [r3, #40]	@ 0x28
	Hspi.Init.CRCPolynomial = 7;
 800d0ca:	4b06      	ldr	r3, [pc, #24]	@ (800d0e4 <SPI1_Init+0x64>)
 800d0cc:	2207      	movs	r2, #7
 800d0ce:	62da      	str	r2, [r3, #44]	@ 0x2c
//  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
//  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  if (HAL_SPI_Init(&Hspi) != HAL_OK)
 800d0d0:	4804      	ldr	r0, [pc, #16]	@ (800d0e4 <SPI1_Init+0x64>)
 800d0d2:	f002 fe6d 	bl	800fdb0 <HAL_SPI_Init>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d001      	beq.n	800d0e0 <SPI1_Init+0x60>
  {
    Error_Handler();
 800d0dc:	f7ff ffca 	bl	800d074 <Error_Handler>
  }

}
 800d0e0:	bf00      	nop
 800d0e2:	bd80      	pop	{r7, pc}
 800d0e4:	2000055c 	.word	0x2000055c
 800d0e8:	40013000 	.word	0x40013000

0800d0ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b082      	sub	sp, #8
 800d0f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	607b      	str	r3, [r7, #4]
 800d0f6:	4b13      	ldr	r3, [pc, #76]	@ (800d144 <HAL_MspInit+0x58>)
 800d0f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0fa:	4a12      	ldr	r2, [pc, #72]	@ (800d144 <HAL_MspInit+0x58>)
 800d0fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d100:	6453      	str	r3, [r2, #68]	@ 0x44
 800d102:	4b10      	ldr	r3, [pc, #64]	@ (800d144 <HAL_MspInit+0x58>)
 800d104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d106:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d10a:	607b      	str	r3, [r7, #4]
 800d10c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d10e:	2300      	movs	r3, #0
 800d110:	603b      	str	r3, [r7, #0]
 800d112:	4b0c      	ldr	r3, [pc, #48]	@ (800d144 <HAL_MspInit+0x58>)
 800d114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d116:	4a0b      	ldr	r2, [pc, #44]	@ (800d144 <HAL_MspInit+0x58>)
 800d118:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d11c:	6413      	str	r3, [r2, #64]	@ 0x40
 800d11e:	4b09      	ldr	r3, [pc, #36]	@ (800d144 <HAL_MspInit+0x58>)
 800d120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d126:	603b      	str	r3, [r7, #0]
 800d128:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800d12a:	2200      	movs	r2, #0
 800d12c:	2100      	movs	r1, #0
 800d12e:	2005      	movs	r0, #5
 800d130:	f000 ffbd 	bl	800e0ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800d134:	2005      	movs	r0, #5
 800d136:	f000 ffd6 	bl	800e0e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d13a:	bf00      	nop
 800d13c:	3708      	adds	r7, #8
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}
 800d142:	bf00      	nop
 800d144:	40023800 	.word	0x40023800

0800d148 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b08a      	sub	sp, #40	@ 0x28
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d150:	f107 0314 	add.w	r3, r7, #20
 800d154:	2200      	movs	r2, #0
 800d156:	601a      	str	r2, [r3, #0]
 800d158:	605a      	str	r2, [r3, #4]
 800d15a:	609a      	str	r2, [r3, #8]
 800d15c:	60da      	str	r2, [r3, #12]
 800d15e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	4a17      	ldr	r2, [pc, #92]	@ (800d1c4 <HAL_ADC_MspInit+0x7c>)
 800d166:	4293      	cmp	r3, r2
 800d168:	d127      	bne.n	800d1ba <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800d16a:	2300      	movs	r3, #0
 800d16c:	613b      	str	r3, [r7, #16]
 800d16e:	4b16      	ldr	r3, [pc, #88]	@ (800d1c8 <HAL_ADC_MspInit+0x80>)
 800d170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d172:	4a15      	ldr	r2, [pc, #84]	@ (800d1c8 <HAL_ADC_MspInit+0x80>)
 800d174:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d178:	6453      	str	r3, [r2, #68]	@ 0x44
 800d17a:	4b13      	ldr	r3, [pc, #76]	@ (800d1c8 <HAL_ADC_MspInit+0x80>)
 800d17c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d17e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d182:	613b      	str	r3, [r7, #16]
 800d184:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d186:	2300      	movs	r3, #0
 800d188:	60fb      	str	r3, [r7, #12]
 800d18a:	4b0f      	ldr	r3, [pc, #60]	@ (800d1c8 <HAL_ADC_MspInit+0x80>)
 800d18c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d18e:	4a0e      	ldr	r2, [pc, #56]	@ (800d1c8 <HAL_ADC_MspInit+0x80>)
 800d190:	f043 0301 	orr.w	r3, r3, #1
 800d194:	6313      	str	r3, [r2, #48]	@ 0x30
 800d196:	4b0c      	ldr	r3, [pc, #48]	@ (800d1c8 <HAL_ADC_MspInit+0x80>)
 800d198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d19a:	f003 0301 	and.w	r3, r3, #1
 800d19e:	60fb      	str	r3, [r7, #12]
 800d1a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800d1a2:	2318      	movs	r3, #24
 800d1a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d1a6:	2303      	movs	r3, #3
 800d1a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d1ae:	f107 0314 	add.w	r3, r7, #20
 800d1b2:	4619      	mov	r1, r3
 800d1b4:	4805      	ldr	r0, [pc, #20]	@ (800d1cc <HAL_ADC_MspInit+0x84>)
 800d1b6:	f000 ffb1 	bl	800e11c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800d1ba:	bf00      	nop
 800d1bc:	3728      	adds	r7, #40	@ 0x28
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
 800d1c2:	bf00      	nop
 800d1c4:	40012000 	.word	0x40012000
 800d1c8:	40023800 	.word	0x40023800
 800d1cc:	40020000 	.word	0x40020000

0800d1d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b08a      	sub	sp, #40	@ 0x28
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d1d8:	f107 0314 	add.w	r3, r7, #20
 800d1dc:	2200      	movs	r2, #0
 800d1de:	601a      	str	r2, [r3, #0]
 800d1e0:	605a      	str	r2, [r3, #4]
 800d1e2:	609a      	str	r2, [r3, #8]
 800d1e4:	60da      	str	r2, [r3, #12]
 800d1e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	4a19      	ldr	r2, [pc, #100]	@ (800d254 <HAL_I2C_MspInit+0x84>)
 800d1ee:	4293      	cmp	r3, r2
 800d1f0:	d12b      	bne.n	800d24a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	613b      	str	r3, [r7, #16]
 800d1f6:	4b18      	ldr	r3, [pc, #96]	@ (800d258 <HAL_I2C_MspInit+0x88>)
 800d1f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1fa:	4a17      	ldr	r2, [pc, #92]	@ (800d258 <HAL_I2C_MspInit+0x88>)
 800d1fc:	f043 0302 	orr.w	r3, r3, #2
 800d200:	6313      	str	r3, [r2, #48]	@ 0x30
 800d202:	4b15      	ldr	r3, [pc, #84]	@ (800d258 <HAL_I2C_MspInit+0x88>)
 800d204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d206:	f003 0302 	and.w	r3, r3, #2
 800d20a:	613b      	str	r3, [r7, #16]
 800d20c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800d20e:	23c0      	movs	r3, #192	@ 0xc0
 800d210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d212:	2312      	movs	r3, #18
 800d214:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d216:	2300      	movs	r3, #0
 800d218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d21a:	2303      	movs	r3, #3
 800d21c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800d21e:	2304      	movs	r3, #4
 800d220:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d222:	f107 0314 	add.w	r3, r7, #20
 800d226:	4619      	mov	r1, r3
 800d228:	480c      	ldr	r0, [pc, #48]	@ (800d25c <HAL_I2C_MspInit+0x8c>)
 800d22a:	f000 ff77 	bl	800e11c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800d22e:	2300      	movs	r3, #0
 800d230:	60fb      	str	r3, [r7, #12]
 800d232:	4b09      	ldr	r3, [pc, #36]	@ (800d258 <HAL_I2C_MspInit+0x88>)
 800d234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d236:	4a08      	ldr	r2, [pc, #32]	@ (800d258 <HAL_I2C_MspInit+0x88>)
 800d238:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d23c:	6413      	str	r3, [r2, #64]	@ 0x40
 800d23e:	4b06      	ldr	r3, [pc, #24]	@ (800d258 <HAL_I2C_MspInit+0x88>)
 800d240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d242:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d246:	60fb      	str	r3, [r7, #12]
 800d248:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800d24a:	bf00      	nop
 800d24c:	3728      	adds	r7, #40	@ 0x28
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd80      	pop	{r7, pc}
 800d252:	bf00      	nop
 800d254:	40005400 	.word	0x40005400
 800d258:	40023800 	.word	0x40023800
 800d25c:	40020400 	.word	0x40020400

0800d260 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b08a      	sub	sp, #40	@ 0x28
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d268:	f107 0314 	add.w	r3, r7, #20
 800d26c:	2200      	movs	r2, #0
 800d26e:	601a      	str	r2, [r3, #0]
 800d270:	605a      	str	r2, [r3, #4]
 800d272:	609a      	str	r2, [r3, #8]
 800d274:	60da      	str	r2, [r3, #12]
 800d276:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	4a19      	ldr	r2, [pc, #100]	@ (800d2e4 <HAL_SPI_MspInit+0x84>)
 800d27e:	4293      	cmp	r3, r2
 800d280:	d12b      	bne.n	800d2da <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800d282:	2300      	movs	r3, #0
 800d284:	613b      	str	r3, [r7, #16]
 800d286:	4b18      	ldr	r3, [pc, #96]	@ (800d2e8 <HAL_SPI_MspInit+0x88>)
 800d288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d28a:	4a17      	ldr	r2, [pc, #92]	@ (800d2e8 <HAL_SPI_MspInit+0x88>)
 800d28c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d290:	6453      	str	r3, [r2, #68]	@ 0x44
 800d292:	4b15      	ldr	r3, [pc, #84]	@ (800d2e8 <HAL_SPI_MspInit+0x88>)
 800d294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d296:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d29a:	613b      	str	r3, [r7, #16]
 800d29c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d29e:	2300      	movs	r3, #0
 800d2a0:	60fb      	str	r3, [r7, #12]
 800d2a2:	4b11      	ldr	r3, [pc, #68]	@ (800d2e8 <HAL_SPI_MspInit+0x88>)
 800d2a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2a6:	4a10      	ldr	r2, [pc, #64]	@ (800d2e8 <HAL_SPI_MspInit+0x88>)
 800d2a8:	f043 0301 	orr.w	r3, r3, #1
 800d2ac:	6313      	str	r3, [r2, #48]	@ 0x30
 800d2ae:	4b0e      	ldr	r3, [pc, #56]	@ (800d2e8 <HAL_SPI_MspInit+0x88>)
 800d2b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2b2:	f003 0301 	and.w	r3, r3, #1
 800d2b6:	60fb      	str	r3, [r7, #12]
 800d2b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800d2ba:	23a0      	movs	r3, #160	@ 0xa0
 800d2bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2be:	2302      	movs	r3, #2
 800d2c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d2c6:	2303      	movs	r3, #3
 800d2c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800d2ca:	2305      	movs	r3, #5
 800d2cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d2ce:	f107 0314 	add.w	r3, r7, #20
 800d2d2:	4619      	mov	r1, r3
 800d2d4:	4805      	ldr	r0, [pc, #20]	@ (800d2ec <HAL_SPI_MspInit+0x8c>)
 800d2d6:	f000 ff21 	bl	800e11c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800d2da:	bf00      	nop
 800d2dc:	3728      	adds	r7, #40	@ 0x28
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}
 800d2e2:	bf00      	nop
 800d2e4:	40013000 	.word	0x40013000
 800d2e8:	40023800 	.word	0x40023800
 800d2ec:	40020000 	.word	0x40020000

0800d2f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b084      	sub	sp, #16
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d300:	d116      	bne.n	800d330 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800d302:	2300      	movs	r3, #0
 800d304:	60fb      	str	r3, [r7, #12]
 800d306:	4b1a      	ldr	r3, [pc, #104]	@ (800d370 <HAL_TIM_Base_MspInit+0x80>)
 800d308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d30a:	4a19      	ldr	r2, [pc, #100]	@ (800d370 <HAL_TIM_Base_MspInit+0x80>)
 800d30c:	f043 0301 	orr.w	r3, r3, #1
 800d310:	6413      	str	r3, [r2, #64]	@ 0x40
 800d312:	4b17      	ldr	r3, [pc, #92]	@ (800d370 <HAL_TIM_Base_MspInit+0x80>)
 800d314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d316:	f003 0301 	and.w	r3, r3, #1
 800d31a:	60fb      	str	r3, [r7, #12]
 800d31c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800d31e:	2200      	movs	r2, #0
 800d320:	2100      	movs	r1, #0
 800d322:	201c      	movs	r0, #28
 800d324:	f000 fec3 	bl	800e0ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800d328:	201c      	movs	r0, #28
 800d32a:	f000 fedc 	bl	800e0e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800d32e:	e01a      	b.n	800d366 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	4a0f      	ldr	r2, [pc, #60]	@ (800d374 <HAL_TIM_Base_MspInit+0x84>)
 800d336:	4293      	cmp	r3, r2
 800d338:	d115      	bne.n	800d366 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800d33a:	2300      	movs	r3, #0
 800d33c:	60bb      	str	r3, [r7, #8]
 800d33e:	4b0c      	ldr	r3, [pc, #48]	@ (800d370 <HAL_TIM_Base_MspInit+0x80>)
 800d340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d342:	4a0b      	ldr	r2, [pc, #44]	@ (800d370 <HAL_TIM_Base_MspInit+0x80>)
 800d344:	f043 0302 	orr.w	r3, r3, #2
 800d348:	6413      	str	r3, [r2, #64]	@ 0x40
 800d34a:	4b09      	ldr	r3, [pc, #36]	@ (800d370 <HAL_TIM_Base_MspInit+0x80>)
 800d34c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d34e:	f003 0302 	and.w	r3, r3, #2
 800d352:	60bb      	str	r3, [r7, #8]
 800d354:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800d356:	2200      	movs	r2, #0
 800d358:	2100      	movs	r1, #0
 800d35a:	201d      	movs	r0, #29
 800d35c:	f000 fea7 	bl	800e0ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800d360:	201d      	movs	r0, #29
 800d362:	f000 fec0 	bl	800e0e6 <HAL_NVIC_EnableIRQ>
}
 800d366:	bf00      	nop
 800d368:	3710      	adds	r7, #16
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}
 800d36e:	bf00      	nop
 800d370:	40023800 	.word	0x40023800
 800d374:	40000400 	.word	0x40000400

0800d378 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b088      	sub	sp, #32
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d380:	f107 030c 	add.w	r3, r7, #12
 800d384:	2200      	movs	r2, #0
 800d386:	601a      	str	r2, [r3, #0]
 800d388:	605a      	str	r2, [r3, #4]
 800d38a:	609a      	str	r2, [r3, #8]
 800d38c:	60da      	str	r2, [r3, #12]
 800d38e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d398:	d11e      	bne.n	800d3d8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d39a:	2300      	movs	r3, #0
 800d39c:	60bb      	str	r3, [r7, #8]
 800d39e:	4b10      	ldr	r3, [pc, #64]	@ (800d3e0 <HAL_TIM_MspPostInit+0x68>)
 800d3a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3a2:	4a0f      	ldr	r2, [pc, #60]	@ (800d3e0 <HAL_TIM_MspPostInit+0x68>)
 800d3a4:	f043 0301 	orr.w	r3, r3, #1
 800d3a8:	6313      	str	r3, [r2, #48]	@ 0x30
 800d3aa:	4b0d      	ldr	r3, [pc, #52]	@ (800d3e0 <HAL_TIM_MspPostInit+0x68>)
 800d3ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3ae:	f003 0301 	and.w	r3, r3, #1
 800d3b2:	60bb      	str	r3, [r7, #8]
 800d3b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800d3b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d3ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3bc:	2302      	movs	r3, #2
 800d3be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d3cc:	f107 030c 	add.w	r3, r7, #12
 800d3d0:	4619      	mov	r1, r3
 800d3d2:	4804      	ldr	r0, [pc, #16]	@ (800d3e4 <HAL_TIM_MspPostInit+0x6c>)
 800d3d4:	f000 fea2 	bl	800e11c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800d3d8:	bf00      	nop
 800d3da:	3720      	adds	r7, #32
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}
 800d3e0:	40023800 	.word	0x40023800
 800d3e4:	40020000 	.word	0x40020000

0800d3e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b08a      	sub	sp, #40	@ 0x28
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d3f0:	f107 0314 	add.w	r3, r7, #20
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	601a      	str	r2, [r3, #0]
 800d3f8:	605a      	str	r2, [r3, #4]
 800d3fa:	609a      	str	r2, [r3, #8]
 800d3fc:	60da      	str	r2, [r3, #12]
 800d3fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	4a19      	ldr	r2, [pc, #100]	@ (800d46c <HAL_UART_MspInit+0x84>)
 800d406:	4293      	cmp	r3, r2
 800d408:	d12c      	bne.n	800d464 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800d40a:	2300      	movs	r3, #0
 800d40c:	613b      	str	r3, [r7, #16]
 800d40e:	4b18      	ldr	r3, [pc, #96]	@ (800d470 <HAL_UART_MspInit+0x88>)
 800d410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d412:	4a17      	ldr	r2, [pc, #92]	@ (800d470 <HAL_UART_MspInit+0x88>)
 800d414:	f043 0310 	orr.w	r3, r3, #16
 800d418:	6453      	str	r3, [r2, #68]	@ 0x44
 800d41a:	4b15      	ldr	r3, [pc, #84]	@ (800d470 <HAL_UART_MspInit+0x88>)
 800d41c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d41e:	f003 0310 	and.w	r3, r3, #16
 800d422:	613b      	str	r3, [r7, #16]
 800d424:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d426:	2300      	movs	r3, #0
 800d428:	60fb      	str	r3, [r7, #12]
 800d42a:	4b11      	ldr	r3, [pc, #68]	@ (800d470 <HAL_UART_MspInit+0x88>)
 800d42c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d42e:	4a10      	ldr	r2, [pc, #64]	@ (800d470 <HAL_UART_MspInit+0x88>)
 800d430:	f043 0301 	orr.w	r3, r3, #1
 800d434:	6313      	str	r3, [r2, #48]	@ 0x30
 800d436:	4b0e      	ldr	r3, [pc, #56]	@ (800d470 <HAL_UART_MspInit+0x88>)
 800d438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d43a:	f003 0301 	and.w	r3, r3, #1
 800d43e:	60fb      	str	r3, [r7, #12]
 800d440:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800d442:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800d446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d448:	2302      	movs	r3, #2
 800d44a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d44c:	2300      	movs	r3, #0
 800d44e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d450:	2303      	movs	r3, #3
 800d452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800d454:	2307      	movs	r3, #7
 800d456:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d458:	f107 0314 	add.w	r3, r7, #20
 800d45c:	4619      	mov	r1, r3
 800d45e:	4805      	ldr	r0, [pc, #20]	@ (800d474 <HAL_UART_MspInit+0x8c>)
 800d460:	f000 fe5c 	bl	800e11c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800d464:	bf00      	nop
 800d466:	3728      	adds	r7, #40	@ 0x28
 800d468:	46bd      	mov	sp, r7
 800d46a:	bd80      	pop	{r7, pc}
 800d46c:	40011000 	.word	0x40011000
 800d470:	40023800 	.word	0x40023800
 800d474:	40020000 	.word	0x40020000

0800d478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d478:	b480      	push	{r7}
 800d47a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800d47c:	bf00      	nop
 800d47e:	e7fd      	b.n	800d47c <NMI_Handler+0x4>

0800d480 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d480:	b480      	push	{r7}
 800d482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d484:	bf00      	nop
 800d486:	e7fd      	b.n	800d484 <HardFault_Handler+0x4>

0800d488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d488:	b480      	push	{r7}
 800d48a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d48c:	bf00      	nop
 800d48e:	e7fd      	b.n	800d48c <MemManage_Handler+0x4>

0800d490 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d490:	b480      	push	{r7}
 800d492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d494:	bf00      	nop
 800d496:	e7fd      	b.n	800d494 <BusFault_Handler+0x4>

0800d498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d498:	b480      	push	{r7}
 800d49a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d49c:	bf00      	nop
 800d49e:	e7fd      	b.n	800d49c <UsageFault_Handler+0x4>

0800d4a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800d4a4:	bf00      	nop
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ac:	4770      	bx	lr

0800d4ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d4ae:	b480      	push	{r7}
 800d4b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d4b2:	bf00      	nop
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ba:	4770      	bx	lr

0800d4bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d4bc:	b480      	push	{r7}
 800d4be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d4c0:	bf00      	nop
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c8:	4770      	bx	lr

0800d4ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d4ca:	b580      	push	{r7, lr}
 800d4cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d4ce:	f000 f99b 	bl	800d808 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d4d2:	bf00      	nop
 800d4d4:	bd80      	pop	{r7, pc}

0800d4d6 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800d4d6:	b480      	push	{r7}
 800d4d8:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800d4da:	bf00      	nop
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e2:	4770      	bx	lr

0800d4e4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800d4e8:	2004      	movs	r0, #4
 800d4ea:	f000 ffcd 	bl	800e488 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800d4ee:	bf00      	nop
 800d4f0:	bd80      	pop	{r7, pc}

0800d4f2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800d4f2:	b580      	push	{r7, lr}
 800d4f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800d4f6:	2010      	movs	r0, #16
 800d4f8:	f000 ffc6 	bl	800e488 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800d4fc:	bf00      	nop
 800d4fe:	bd80      	pop	{r7, pc}

0800d500 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800d504:	2040      	movs	r0, #64	@ 0x40
 800d506:	f000 ffbf 	bl	800e488 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800d50a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800d50e:	f000 ffbb 	bl	800e488 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800d512:	bf00      	nop
 800d514:	bd80      	pop	{r7, pc}
	...

0800d518 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800d51c:	4802      	ldr	r0, [pc, #8]	@ (800d528 <TIM2_IRQHandler+0x10>)
 800d51e:	f003 f8ad 	bl	801067c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800d522:	bf00      	nop
 800d524:	bd80      	pop	{r7, pc}
 800d526:	bf00      	nop
 800d528:	20000484 	.word	0x20000484

0800d52c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800d530:	4802      	ldr	r0, [pc, #8]	@ (800d53c <TIM3_IRQHandler+0x10>)
 800d532:	f003 f8a3 	bl	801067c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800d536:	bf00      	nop
 800d538:	bd80      	pop	{r7, pc}
 800d53a:	bf00      	nop
 800d53c:	200004cc 	.word	0x200004cc

0800d540 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800d544:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800d548:	f000 ff9e 	bl	800e488 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800d54c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800d550:	f000 ff9a 	bl	800e488 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800d554:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800d558:	f000 ff96 	bl	800e488 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800d55c:	bf00      	nop
 800d55e:	bd80      	pop	{r7, pc}

0800d560 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800d560:	b480      	push	{r7}
 800d562:	af00      	add	r7, sp, #0
  return 1;
 800d564:	2301      	movs	r3, #1
}
 800d566:	4618      	mov	r0, r3
 800d568:	46bd      	mov	sp, r7
 800d56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56e:	4770      	bx	lr

0800d570 <_kill>:

int _kill(int pid, int sig)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b082      	sub	sp, #8
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800d57a:	f005 f98f 	bl	801289c <__errno>
 800d57e:	4603      	mov	r3, r0
 800d580:	2216      	movs	r2, #22
 800d582:	601a      	str	r2, [r3, #0]
  return -1;
 800d584:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d588:	4618      	mov	r0, r3
 800d58a:	3708      	adds	r7, #8
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}

0800d590 <_exit>:

void _exit (int status)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b082      	sub	sp, #8
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800d598:	f04f 31ff 	mov.w	r1, #4294967295
 800d59c:	6878      	ldr	r0, [r7, #4]
 800d59e:	f7ff ffe7 	bl	800d570 <_kill>
  while (1) {}    /* Make sure we hang here */
 800d5a2:	bf00      	nop
 800d5a4:	e7fd      	b.n	800d5a2 <_exit+0x12>

0800d5a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800d5a6:	b580      	push	{r7, lr}
 800d5a8:	b086      	sub	sp, #24
 800d5aa:	af00      	add	r7, sp, #0
 800d5ac:	60f8      	str	r0, [r7, #12]
 800d5ae:	60b9      	str	r1, [r7, #8]
 800d5b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	617b      	str	r3, [r7, #20]
 800d5b6:	e00a      	b.n	800d5ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800d5b8:	f3af 8000 	nop.w
 800d5bc:	4601      	mov	r1, r0
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	1c5a      	adds	r2, r3, #1
 800d5c2:	60ba      	str	r2, [r7, #8]
 800d5c4:	b2ca      	uxtb	r2, r1
 800d5c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	3301      	adds	r3, #1
 800d5cc:	617b      	str	r3, [r7, #20]
 800d5ce:	697a      	ldr	r2, [r7, #20]
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	429a      	cmp	r2, r3
 800d5d4:	dbf0      	blt.n	800d5b8 <_read+0x12>
  }

  return len;
 800d5d6:	687b      	ldr	r3, [r7, #4]
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3718      	adds	r7, #24
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b086      	sub	sp, #24
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	60f8      	str	r0, [r7, #12]
 800d5e8:	60b9      	str	r1, [r7, #8]
 800d5ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	617b      	str	r3, [r7, #20]
 800d5f0:	e009      	b.n	800d606 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	1c5a      	adds	r2, r3, #1
 800d5f6:	60ba      	str	r2, [r7, #8]
 800d5f8:	781b      	ldrb	r3, [r3, #0]
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d600:	697b      	ldr	r3, [r7, #20]
 800d602:	3301      	adds	r3, #1
 800d604:	617b      	str	r3, [r7, #20]
 800d606:	697a      	ldr	r2, [r7, #20]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	429a      	cmp	r2, r3
 800d60c:	dbf1      	blt.n	800d5f2 <_write+0x12>
  }
  return len;
 800d60e:	687b      	ldr	r3, [r7, #4]
}
 800d610:	4618      	mov	r0, r3
 800d612:	3718      	adds	r7, #24
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}

0800d618 <_close>:

int _close(int file)
{
 800d618:	b480      	push	{r7}
 800d61a:	b083      	sub	sp, #12
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800d620:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d624:	4618      	mov	r0, r3
 800d626:	370c      	adds	r7, #12
 800d628:	46bd      	mov	sp, r7
 800d62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62e:	4770      	bx	lr

0800d630 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800d630:	b480      	push	{r7}
 800d632:	b083      	sub	sp, #12
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
 800d638:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800d640:	605a      	str	r2, [r3, #4]
  return 0;
 800d642:	2300      	movs	r3, #0
}
 800d644:	4618      	mov	r0, r3
 800d646:	370c      	adds	r7, #12
 800d648:	46bd      	mov	sp, r7
 800d64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64e:	4770      	bx	lr

0800d650 <_isatty>:

int _isatty(int file)
{
 800d650:	b480      	push	{r7}
 800d652:	b083      	sub	sp, #12
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800d658:	2301      	movs	r3, #1
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	370c      	adds	r7, #12
 800d65e:	46bd      	mov	sp, r7
 800d660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d664:	4770      	bx	lr

0800d666 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800d666:	b480      	push	{r7}
 800d668:	b085      	sub	sp, #20
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	60f8      	str	r0, [r7, #12]
 800d66e:	60b9      	str	r1, [r7, #8]
 800d670:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800d672:	2300      	movs	r3, #0
}
 800d674:	4618      	mov	r0, r3
 800d676:	3714      	adds	r7, #20
 800d678:	46bd      	mov	sp, r7
 800d67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67e:	4770      	bx	lr

0800d680 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b086      	sub	sp, #24
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d688:	4a14      	ldr	r2, [pc, #80]	@ (800d6dc <_sbrk+0x5c>)
 800d68a:	4b15      	ldr	r3, [pc, #84]	@ (800d6e0 <_sbrk+0x60>)
 800d68c:	1ad3      	subs	r3, r2, r3
 800d68e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d694:	4b13      	ldr	r3, [pc, #76]	@ (800d6e4 <_sbrk+0x64>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d102      	bne.n	800d6a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800d69c:	4b11      	ldr	r3, [pc, #68]	@ (800d6e4 <_sbrk+0x64>)
 800d69e:	4a12      	ldr	r2, [pc, #72]	@ (800d6e8 <_sbrk+0x68>)
 800d6a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d6a2:	4b10      	ldr	r3, [pc, #64]	@ (800d6e4 <_sbrk+0x64>)
 800d6a4:	681a      	ldr	r2, [r3, #0]
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	4413      	add	r3, r2
 800d6aa:	693a      	ldr	r2, [r7, #16]
 800d6ac:	429a      	cmp	r2, r3
 800d6ae:	d207      	bcs.n	800d6c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800d6b0:	f005 f8f4 	bl	801289c <__errno>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	220c      	movs	r2, #12
 800d6b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800d6ba:	f04f 33ff 	mov.w	r3, #4294967295
 800d6be:	e009      	b.n	800d6d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800d6c0:	4b08      	ldr	r3, [pc, #32]	@ (800d6e4 <_sbrk+0x64>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800d6c6:	4b07      	ldr	r3, [pc, #28]	@ (800d6e4 <_sbrk+0x64>)
 800d6c8:	681a      	ldr	r2, [r3, #0]
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	4413      	add	r3, r2
 800d6ce:	4a05      	ldr	r2, [pc, #20]	@ (800d6e4 <_sbrk+0x64>)
 800d6d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3718      	adds	r7, #24
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}
 800d6dc:	20020000 	.word	0x20020000
 800d6e0:	00000400 	.word	0x00000400
 800d6e4:	200005b4 	.word	0x200005b4
 800d6e8:	20000710 	.word	0x20000710

0800d6ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d6ec:	b480      	push	{r7}
 800d6ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d6f0:	4b06      	ldr	r3, [pc, #24]	@ (800d70c <SystemInit+0x20>)
 800d6f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d6f6:	4a05      	ldr	r2, [pc, #20]	@ (800d70c <SystemInit+0x20>)
 800d6f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d6fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800d700:	bf00      	nop
 800d702:	46bd      	mov	sp, r7
 800d704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d708:	4770      	bx	lr
 800d70a:	bf00      	nop
 800d70c:	e000ed00 	.word	0xe000ed00

0800d710 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800d710:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800d748 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800d714:	f7ff ffea 	bl	800d6ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800d718:	480c      	ldr	r0, [pc, #48]	@ (800d74c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800d71a:	490d      	ldr	r1, [pc, #52]	@ (800d750 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800d71c:	4a0d      	ldr	r2, [pc, #52]	@ (800d754 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800d71e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800d720:	e002      	b.n	800d728 <LoopCopyDataInit>

0800d722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800d722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800d724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800d726:	3304      	adds	r3, #4

0800d728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800d728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800d72a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800d72c:	d3f9      	bcc.n	800d722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800d72e:	4a0a      	ldr	r2, [pc, #40]	@ (800d758 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800d730:	4c0a      	ldr	r4, [pc, #40]	@ (800d75c <LoopFillZerobss+0x22>)
  movs r3, #0
 800d732:	2300      	movs	r3, #0
  b LoopFillZerobss
 800d734:	e001      	b.n	800d73a <LoopFillZerobss>

0800d736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800d736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d738:	3204      	adds	r2, #4

0800d73a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800d73a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800d73c:	d3fb      	bcc.n	800d736 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800d73e:	f005 f8b3 	bl	80128a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d742:	f7ff f905 	bl	800c950 <main>
  bx  lr    
 800d746:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800d748:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800d74c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800d750:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800d754:	080165a0 	.word	0x080165a0
  ldr r2, =_sbss
 800d758:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800d75c:	2000070c 	.word	0x2000070c

0800d760 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d760:	e7fe      	b.n	800d760 <ADC_IRQHandler>
	...

0800d764 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800d764:	b580      	push	{r7, lr}
 800d766:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800d768:	4b0e      	ldr	r3, [pc, #56]	@ (800d7a4 <HAL_Init+0x40>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	4a0d      	ldr	r2, [pc, #52]	@ (800d7a4 <HAL_Init+0x40>)
 800d76e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d772:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800d774:	4b0b      	ldr	r3, [pc, #44]	@ (800d7a4 <HAL_Init+0x40>)
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	4a0a      	ldr	r2, [pc, #40]	@ (800d7a4 <HAL_Init+0x40>)
 800d77a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d77e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800d780:	4b08      	ldr	r3, [pc, #32]	@ (800d7a4 <HAL_Init+0x40>)
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	4a07      	ldr	r2, [pc, #28]	@ (800d7a4 <HAL_Init+0x40>)
 800d786:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d78a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d78c:	2003      	movs	r0, #3
 800d78e:	f000 fc83 	bl	800e098 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800d792:	200f      	movs	r0, #15
 800d794:	f000 f808 	bl	800d7a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800d798:	f7ff fca8 	bl	800d0ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800d79c:	2300      	movs	r3, #0
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	bd80      	pop	{r7, pc}
 800d7a2:	bf00      	nop
 800d7a4:	40023c00 	.word	0x40023c00

0800d7a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b082      	sub	sp, #8
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800d7b0:	4b12      	ldr	r3, [pc, #72]	@ (800d7fc <HAL_InitTick+0x54>)
 800d7b2:	681a      	ldr	r2, [r3, #0]
 800d7b4:	4b12      	ldr	r3, [pc, #72]	@ (800d800 <HAL_InitTick+0x58>)
 800d7b6:	781b      	ldrb	r3, [r3, #0]
 800d7b8:	4619      	mov	r1, r3
 800d7ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d7be:	fbb3 f3f1 	udiv	r3, r3, r1
 800d7c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f000 fc9b 	bl	800e102 <HAL_SYSTICK_Config>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d001      	beq.n	800d7d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	e00e      	b.n	800d7f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2b0f      	cmp	r3, #15
 800d7da:	d80a      	bhi.n	800d7f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800d7dc:	2200      	movs	r2, #0
 800d7de:	6879      	ldr	r1, [r7, #4]
 800d7e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d7e4:	f000 fc63 	bl	800e0ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800d7e8:	4a06      	ldr	r2, [pc, #24]	@ (800d804 <HAL_InitTick+0x5c>)
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	e000      	b.n	800d7f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800d7f2:	2301      	movs	r3, #1
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	3708      	adds	r7, #8
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}
 800d7fc:	20000004 	.word	0x20000004
 800d800:	2000000c 	.word	0x2000000c
 800d804:	20000008 	.word	0x20000008

0800d808 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800d808:	b480      	push	{r7}
 800d80a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800d80c:	4b06      	ldr	r3, [pc, #24]	@ (800d828 <HAL_IncTick+0x20>)
 800d80e:	781b      	ldrb	r3, [r3, #0]
 800d810:	461a      	mov	r2, r3
 800d812:	4b06      	ldr	r3, [pc, #24]	@ (800d82c <HAL_IncTick+0x24>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	4413      	add	r3, r2
 800d818:	4a04      	ldr	r2, [pc, #16]	@ (800d82c <HAL_IncTick+0x24>)
 800d81a:	6013      	str	r3, [r2, #0]
}
 800d81c:	bf00      	nop
 800d81e:	46bd      	mov	sp, r7
 800d820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d824:	4770      	bx	lr
 800d826:	bf00      	nop
 800d828:	2000000c 	.word	0x2000000c
 800d82c:	200005b8 	.word	0x200005b8

0800d830 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800d830:	b480      	push	{r7}
 800d832:	af00      	add	r7, sp, #0
  return uwTick;
 800d834:	4b03      	ldr	r3, [pc, #12]	@ (800d844 <HAL_GetTick+0x14>)
 800d836:	681b      	ldr	r3, [r3, #0]
}
 800d838:	4618      	mov	r0, r3
 800d83a:	46bd      	mov	sp, r7
 800d83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d840:	4770      	bx	lr
 800d842:	bf00      	nop
 800d844:	200005b8 	.word	0x200005b8

0800d848 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b084      	sub	sp, #16
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800d850:	f7ff ffee 	bl	800d830 <HAL_GetTick>
 800d854:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d860:	d005      	beq.n	800d86e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800d862:	4b0a      	ldr	r3, [pc, #40]	@ (800d88c <HAL_Delay+0x44>)
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	461a      	mov	r2, r3
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	4413      	add	r3, r2
 800d86c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800d86e:	bf00      	nop
 800d870:	f7ff ffde 	bl	800d830 <HAL_GetTick>
 800d874:	4602      	mov	r2, r0
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	1ad3      	subs	r3, r2, r3
 800d87a:	68fa      	ldr	r2, [r7, #12]
 800d87c:	429a      	cmp	r2, r3
 800d87e:	d8f7      	bhi.n	800d870 <HAL_Delay+0x28>
  {
  }
}
 800d880:	bf00      	nop
 800d882:	bf00      	nop
 800d884:	3710      	adds	r7, #16
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}
 800d88a:	bf00      	nop
 800d88c:	2000000c 	.word	0x2000000c

0800d890 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b084      	sub	sp, #16
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800d898:	2300      	movs	r3, #0
 800d89a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d101      	bne.n	800d8a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	e033      	b.n	800d90e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d109      	bne.n	800d8c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f7ff fc4a 	bl	800d148 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	2200      	movs	r2, #0
 800d8be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8c6:	f003 0310 	and.w	r3, r3, #16
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d118      	bne.n	800d900 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8d2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800d8d6:	f023 0302 	bic.w	r3, r3, #2
 800d8da:	f043 0202 	orr.w	r2, r3, #2
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f000 fa0c 	bl	800dd00 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8f2:	f023 0303 	bic.w	r3, r3, #3
 800d8f6:	f043 0201 	orr.w	r2, r3, #1
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	641a      	str	r2, [r3, #64]	@ 0x40
 800d8fe:	e001      	b.n	800d904 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800d900:	2301      	movs	r3, #1
 800d902:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2200      	movs	r2, #0
 800d908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800d90c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d90e:	4618      	mov	r0, r3
 800d910:	3710      	adds	r7, #16
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}
	...

0800d918 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800d918:	b480      	push	{r7}
 800d91a:	b085      	sub	sp, #20
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800d920:	2300      	movs	r3, #0
 800d922:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d92a:	2b01      	cmp	r3, #1
 800d92c:	d101      	bne.n	800d932 <HAL_ADC_Start+0x1a>
 800d92e:	2302      	movs	r3, #2
 800d930:	e097      	b.n	800da62 <HAL_ADC_Start+0x14a>
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	2201      	movs	r2, #1
 800d936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	689b      	ldr	r3, [r3, #8]
 800d940:	f003 0301 	and.w	r3, r3, #1
 800d944:	2b01      	cmp	r3, #1
 800d946:	d018      	beq.n	800d97a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	689a      	ldr	r2, [r3, #8]
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	f042 0201 	orr.w	r2, r2, #1
 800d956:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800d958:	4b45      	ldr	r3, [pc, #276]	@ (800da70 <HAL_ADC_Start+0x158>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	4a45      	ldr	r2, [pc, #276]	@ (800da74 <HAL_ADC_Start+0x15c>)
 800d95e:	fba2 2303 	umull	r2, r3, r2, r3
 800d962:	0c9a      	lsrs	r2, r3, #18
 800d964:	4613      	mov	r3, r2
 800d966:	005b      	lsls	r3, r3, #1
 800d968:	4413      	add	r3, r2
 800d96a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800d96c:	e002      	b.n	800d974 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	3b01      	subs	r3, #1
 800d972:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d1f9      	bne.n	800d96e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	689b      	ldr	r3, [r3, #8]
 800d980:	f003 0301 	and.w	r3, r3, #1
 800d984:	2b01      	cmp	r3, #1
 800d986:	d15f      	bne.n	800da48 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d98c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800d990:	f023 0301 	bic.w	r3, r3, #1
 800d994:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	685b      	ldr	r3, [r3, #4]
 800d9a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d007      	beq.n	800d9ba <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9ae:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800d9b2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d9c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d9c6:	d106      	bne.n	800d9d6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9cc:	f023 0206 	bic.w	r2, r3, #6
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	645a      	str	r2, [r3, #68]	@ 0x44
 800d9d4:	e002      	b.n	800d9dc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2200      	movs	r2, #0
 800d9da:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2200      	movs	r2, #0
 800d9e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800d9e4:	4b24      	ldr	r3, [pc, #144]	@ (800da78 <HAL_ADC_Start+0x160>)
 800d9e6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800d9f0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	685b      	ldr	r3, [r3, #4]
 800d9f6:	f003 031f 	and.w	r3, r3, #31
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d10f      	bne.n	800da1e <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	689b      	ldr	r3, [r3, #8]
 800da04:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d129      	bne.n	800da60 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	689a      	ldr	r2, [r3, #8]
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800da1a:	609a      	str	r2, [r3, #8]
 800da1c:	e020      	b.n	800da60 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	4a16      	ldr	r2, [pc, #88]	@ (800da7c <HAL_ADC_Start+0x164>)
 800da24:	4293      	cmp	r3, r2
 800da26:	d11b      	bne.n	800da60 <HAL_ADC_Start+0x148>
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	689b      	ldr	r3, [r3, #8]
 800da2e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800da32:	2b00      	cmp	r3, #0
 800da34:	d114      	bne.n	800da60 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	689a      	ldr	r2, [r3, #8]
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800da44:	609a      	str	r2, [r3, #8]
 800da46:	e00b      	b.n	800da60 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da4c:	f043 0210 	orr.w	r2, r3, #16
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da58:	f043 0201 	orr.w	r2, r3, #1
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800da60:	2300      	movs	r3, #0
}
 800da62:	4618      	mov	r0, r3
 800da64:	3714      	adds	r7, #20
 800da66:	46bd      	mov	sp, r7
 800da68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6c:	4770      	bx	lr
 800da6e:	bf00      	nop
 800da70:	20000004 	.word	0x20000004
 800da74:	431bde83 	.word	0x431bde83
 800da78:	40012300 	.word	0x40012300
 800da7c:	40012000 	.word	0x40012000

0800da80 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800da80:	b480      	push	{r7}
 800da82:	b083      	sub	sp, #12
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800da8e:	4618      	mov	r0, r3
 800da90:	370c      	adds	r7, #12
 800da92:	46bd      	mov	sp, r7
 800da94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da98:	4770      	bx	lr
	...

0800da9c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800da9c:	b480      	push	{r7}
 800da9e:	b085      	sub	sp, #20
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
 800daa4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800daa6:	2300      	movs	r3, #0
 800daa8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dab0:	2b01      	cmp	r3, #1
 800dab2:	d101      	bne.n	800dab8 <HAL_ADC_ConfigChannel+0x1c>
 800dab4:	2302      	movs	r3, #2
 800dab6:	e113      	b.n	800dce0 <HAL_ADC_ConfigChannel+0x244>
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2201      	movs	r2, #1
 800dabc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	2b09      	cmp	r3, #9
 800dac6:	d925      	bls.n	800db14 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	68d9      	ldr	r1, [r3, #12]
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	b29b      	uxth	r3, r3
 800dad4:	461a      	mov	r2, r3
 800dad6:	4613      	mov	r3, r2
 800dad8:	005b      	lsls	r3, r3, #1
 800dada:	4413      	add	r3, r2
 800dadc:	3b1e      	subs	r3, #30
 800dade:	2207      	movs	r2, #7
 800dae0:	fa02 f303 	lsl.w	r3, r2, r3
 800dae4:	43da      	mvns	r2, r3
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	400a      	ands	r2, r1
 800daec:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	68d9      	ldr	r1, [r3, #12]
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	689a      	ldr	r2, [r3, #8]
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	b29b      	uxth	r3, r3
 800dafe:	4618      	mov	r0, r3
 800db00:	4603      	mov	r3, r0
 800db02:	005b      	lsls	r3, r3, #1
 800db04:	4403      	add	r3, r0
 800db06:	3b1e      	subs	r3, #30
 800db08:	409a      	lsls	r2, r3
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	430a      	orrs	r2, r1
 800db10:	60da      	str	r2, [r3, #12]
 800db12:	e022      	b.n	800db5a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	6919      	ldr	r1, [r3, #16]
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	b29b      	uxth	r3, r3
 800db20:	461a      	mov	r2, r3
 800db22:	4613      	mov	r3, r2
 800db24:	005b      	lsls	r3, r3, #1
 800db26:	4413      	add	r3, r2
 800db28:	2207      	movs	r2, #7
 800db2a:	fa02 f303 	lsl.w	r3, r2, r3
 800db2e:	43da      	mvns	r2, r3
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	400a      	ands	r2, r1
 800db36:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	6919      	ldr	r1, [r3, #16]
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	689a      	ldr	r2, [r3, #8]
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	b29b      	uxth	r3, r3
 800db48:	4618      	mov	r0, r3
 800db4a:	4603      	mov	r3, r0
 800db4c:	005b      	lsls	r3, r3, #1
 800db4e:	4403      	add	r3, r0
 800db50:	409a      	lsls	r2, r3
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	430a      	orrs	r2, r1
 800db58:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	685b      	ldr	r3, [r3, #4]
 800db5e:	2b06      	cmp	r3, #6
 800db60:	d824      	bhi.n	800dbac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	685a      	ldr	r2, [r3, #4]
 800db6c:	4613      	mov	r3, r2
 800db6e:	009b      	lsls	r3, r3, #2
 800db70:	4413      	add	r3, r2
 800db72:	3b05      	subs	r3, #5
 800db74:	221f      	movs	r2, #31
 800db76:	fa02 f303 	lsl.w	r3, r2, r3
 800db7a:	43da      	mvns	r2, r3
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	400a      	ands	r2, r1
 800db82:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800db8a:	683b      	ldr	r3, [r7, #0]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	b29b      	uxth	r3, r3
 800db90:	4618      	mov	r0, r3
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	685a      	ldr	r2, [r3, #4]
 800db96:	4613      	mov	r3, r2
 800db98:	009b      	lsls	r3, r3, #2
 800db9a:	4413      	add	r3, r2
 800db9c:	3b05      	subs	r3, #5
 800db9e:	fa00 f203 	lsl.w	r2, r0, r3
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	430a      	orrs	r2, r1
 800dba8:	635a      	str	r2, [r3, #52]	@ 0x34
 800dbaa:	e04c      	b.n	800dc46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	685b      	ldr	r3, [r3, #4]
 800dbb0:	2b0c      	cmp	r3, #12
 800dbb2:	d824      	bhi.n	800dbfe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	685a      	ldr	r2, [r3, #4]
 800dbbe:	4613      	mov	r3, r2
 800dbc0:	009b      	lsls	r3, r3, #2
 800dbc2:	4413      	add	r3, r2
 800dbc4:	3b23      	subs	r3, #35	@ 0x23
 800dbc6:	221f      	movs	r2, #31
 800dbc8:	fa02 f303 	lsl.w	r3, r2, r3
 800dbcc:	43da      	mvns	r2, r3
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	400a      	ands	r2, r1
 800dbd4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	b29b      	uxth	r3, r3
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	685a      	ldr	r2, [r3, #4]
 800dbe8:	4613      	mov	r3, r2
 800dbea:	009b      	lsls	r3, r3, #2
 800dbec:	4413      	add	r3, r2
 800dbee:	3b23      	subs	r3, #35	@ 0x23
 800dbf0:	fa00 f203 	lsl.w	r2, r0, r3
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	430a      	orrs	r2, r1
 800dbfa:	631a      	str	r2, [r3, #48]	@ 0x30
 800dbfc:	e023      	b.n	800dc46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	685a      	ldr	r2, [r3, #4]
 800dc08:	4613      	mov	r3, r2
 800dc0a:	009b      	lsls	r3, r3, #2
 800dc0c:	4413      	add	r3, r2
 800dc0e:	3b41      	subs	r3, #65	@ 0x41
 800dc10:	221f      	movs	r2, #31
 800dc12:	fa02 f303 	lsl.w	r3, r2, r3
 800dc16:	43da      	mvns	r2, r3
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	400a      	ands	r2, r1
 800dc1e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800dc26:	683b      	ldr	r3, [r7, #0]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	b29b      	uxth	r3, r3
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	685a      	ldr	r2, [r3, #4]
 800dc32:	4613      	mov	r3, r2
 800dc34:	009b      	lsls	r3, r3, #2
 800dc36:	4413      	add	r3, r2
 800dc38:	3b41      	subs	r3, #65	@ 0x41
 800dc3a:	fa00 f203 	lsl.w	r2, r0, r3
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	430a      	orrs	r2, r1
 800dc44:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800dc46:	4b29      	ldr	r3, [pc, #164]	@ (800dcec <HAL_ADC_ConfigChannel+0x250>)
 800dc48:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	4a28      	ldr	r2, [pc, #160]	@ (800dcf0 <HAL_ADC_ConfigChannel+0x254>)
 800dc50:	4293      	cmp	r3, r2
 800dc52:	d10f      	bne.n	800dc74 <HAL_ADC_ConfigChannel+0x1d8>
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	2b12      	cmp	r3, #18
 800dc5a:	d10b      	bne.n	800dc74 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	685b      	ldr	r3, [r3, #4]
 800dc60:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	685b      	ldr	r3, [r3, #4]
 800dc6c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	4a1d      	ldr	r2, [pc, #116]	@ (800dcf0 <HAL_ADC_ConfigChannel+0x254>)
 800dc7a:	4293      	cmp	r3, r2
 800dc7c:	d12b      	bne.n	800dcd6 <HAL_ADC_ConfigChannel+0x23a>
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	4a1c      	ldr	r2, [pc, #112]	@ (800dcf4 <HAL_ADC_ConfigChannel+0x258>)
 800dc84:	4293      	cmp	r3, r2
 800dc86:	d003      	beq.n	800dc90 <HAL_ADC_ConfigChannel+0x1f4>
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	2b11      	cmp	r3, #17
 800dc8e:	d122      	bne.n	800dcd6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	685b      	ldr	r3, [r3, #4]
 800dc94:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	685b      	ldr	r3, [r3, #4]
 800dca0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	4a11      	ldr	r2, [pc, #68]	@ (800dcf4 <HAL_ADC_ConfigChannel+0x258>)
 800dcae:	4293      	cmp	r3, r2
 800dcb0:	d111      	bne.n	800dcd6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800dcb2:	4b11      	ldr	r3, [pc, #68]	@ (800dcf8 <HAL_ADC_ConfigChannel+0x25c>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	4a11      	ldr	r2, [pc, #68]	@ (800dcfc <HAL_ADC_ConfigChannel+0x260>)
 800dcb8:	fba2 2303 	umull	r2, r3, r2, r3
 800dcbc:	0c9a      	lsrs	r2, r3, #18
 800dcbe:	4613      	mov	r3, r2
 800dcc0:	009b      	lsls	r3, r3, #2
 800dcc2:	4413      	add	r3, r2
 800dcc4:	005b      	lsls	r3, r3, #1
 800dcc6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800dcc8:	e002      	b.n	800dcd0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	3b01      	subs	r3, #1
 800dcce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d1f9      	bne.n	800dcca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2200      	movs	r2, #0
 800dcda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800dcde:	2300      	movs	r3, #0
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	3714      	adds	r7, #20
 800dce4:	46bd      	mov	sp, r7
 800dce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcea:	4770      	bx	lr
 800dcec:	40012300 	.word	0x40012300
 800dcf0:	40012000 	.word	0x40012000
 800dcf4:	10000012 	.word	0x10000012
 800dcf8:	20000004 	.word	0x20000004
 800dcfc:	431bde83 	.word	0x431bde83

0800dd00 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800dd00:	b480      	push	{r7}
 800dd02:	b085      	sub	sp, #20
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800dd08:	4b79      	ldr	r3, [pc, #484]	@ (800def0 <ADC_Init+0x1f0>)
 800dd0a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	685b      	ldr	r3, [r3, #4]
 800dd10:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	685a      	ldr	r2, [r3, #4]
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	685b      	ldr	r3, [r3, #4]
 800dd20:	431a      	orrs	r2, r3
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	685a      	ldr	r2, [r3, #4]
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800dd34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	6859      	ldr	r1, [r3, #4]
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	691b      	ldr	r3, [r3, #16]
 800dd40:	021a      	lsls	r2, r3, #8
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	430a      	orrs	r2, r1
 800dd48:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	685a      	ldr	r2, [r3, #4]
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800dd58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	6859      	ldr	r1, [r3, #4]
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	689a      	ldr	r2, [r3, #8]
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	430a      	orrs	r2, r1
 800dd6a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	689a      	ldr	r2, [r3, #8]
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800dd7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	6899      	ldr	r1, [r3, #8]
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	68da      	ldr	r2, [r3, #12]
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	430a      	orrs	r2, r1
 800dd8c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd92:	4a58      	ldr	r2, [pc, #352]	@ (800def4 <ADC_Init+0x1f4>)
 800dd94:	4293      	cmp	r3, r2
 800dd96:	d022      	beq.n	800ddde <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	689a      	ldr	r2, [r3, #8]
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800dda6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	6899      	ldr	r1, [r3, #8]
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	430a      	orrs	r2, r1
 800ddb8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	689a      	ldr	r2, [r3, #8]
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800ddc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	6899      	ldr	r1, [r3, #8]
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	430a      	orrs	r2, r1
 800ddda:	609a      	str	r2, [r3, #8]
 800dddc:	e00f      	b.n	800ddfe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	689a      	ldr	r2, [r3, #8]
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800ddec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	689a      	ldr	r2, [r3, #8]
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800ddfc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	689a      	ldr	r2, [r3, #8]
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	f022 0202 	bic.w	r2, r2, #2
 800de0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	6899      	ldr	r1, [r3, #8]
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	7e1b      	ldrb	r3, [r3, #24]
 800de18:	005a      	lsls	r2, r3, #1
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	430a      	orrs	r2, r1
 800de20:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	f893 3020 	ldrb.w	r3, [r3, #32]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d01b      	beq.n	800de64 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	685a      	ldr	r2, [r3, #4]
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800de3a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	685a      	ldr	r2, [r3, #4]
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800de4a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	6859      	ldr	r1, [r3, #4]
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de56:	3b01      	subs	r3, #1
 800de58:	035a      	lsls	r2, r3, #13
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	430a      	orrs	r2, r1
 800de60:	605a      	str	r2, [r3, #4]
 800de62:	e007      	b.n	800de74 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	685a      	ldr	r2, [r3, #4]
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800de72:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800de82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	69db      	ldr	r3, [r3, #28]
 800de8e:	3b01      	subs	r3, #1
 800de90:	051a      	lsls	r2, r3, #20
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	430a      	orrs	r2, r1
 800de98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	689a      	ldr	r2, [r3, #8]
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800dea8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	6899      	ldr	r1, [r3, #8]
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800deb6:	025a      	lsls	r2, r3, #9
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	430a      	orrs	r2, r1
 800debe:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	689a      	ldr	r2, [r3, #8]
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dece:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	6899      	ldr	r1, [r3, #8]
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	695b      	ldr	r3, [r3, #20]
 800deda:	029a      	lsls	r2, r3, #10
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	430a      	orrs	r2, r1
 800dee2:	609a      	str	r2, [r3, #8]
}
 800dee4:	bf00      	nop
 800dee6:	3714      	adds	r7, #20
 800dee8:	46bd      	mov	sp, r7
 800deea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deee:	4770      	bx	lr
 800def0:	40012300 	.word	0x40012300
 800def4:	0f000001 	.word	0x0f000001

0800def8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800def8:	b480      	push	{r7}
 800defa:	b085      	sub	sp, #20
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f003 0307 	and.w	r3, r3, #7
 800df06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800df08:	4b0c      	ldr	r3, [pc, #48]	@ (800df3c <__NVIC_SetPriorityGrouping+0x44>)
 800df0a:	68db      	ldr	r3, [r3, #12]
 800df0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800df0e:	68ba      	ldr	r2, [r7, #8]
 800df10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800df14:	4013      	ands	r3, r2
 800df16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800df20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800df24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800df28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800df2a:	4a04      	ldr	r2, [pc, #16]	@ (800df3c <__NVIC_SetPriorityGrouping+0x44>)
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	60d3      	str	r3, [r2, #12]
}
 800df30:	bf00      	nop
 800df32:	3714      	adds	r7, #20
 800df34:	46bd      	mov	sp, r7
 800df36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3a:	4770      	bx	lr
 800df3c:	e000ed00 	.word	0xe000ed00

0800df40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800df40:	b480      	push	{r7}
 800df42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800df44:	4b04      	ldr	r3, [pc, #16]	@ (800df58 <__NVIC_GetPriorityGrouping+0x18>)
 800df46:	68db      	ldr	r3, [r3, #12]
 800df48:	0a1b      	lsrs	r3, r3, #8
 800df4a:	f003 0307 	and.w	r3, r3, #7
}
 800df4e:	4618      	mov	r0, r3
 800df50:	46bd      	mov	sp, r7
 800df52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df56:	4770      	bx	lr
 800df58:	e000ed00 	.word	0xe000ed00

0800df5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800df5c:	b480      	push	{r7}
 800df5e:	b083      	sub	sp, #12
 800df60:	af00      	add	r7, sp, #0
 800df62:	4603      	mov	r3, r0
 800df64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800df66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	db0b      	blt.n	800df86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800df6e:	79fb      	ldrb	r3, [r7, #7]
 800df70:	f003 021f 	and.w	r2, r3, #31
 800df74:	4907      	ldr	r1, [pc, #28]	@ (800df94 <__NVIC_EnableIRQ+0x38>)
 800df76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800df7a:	095b      	lsrs	r3, r3, #5
 800df7c:	2001      	movs	r0, #1
 800df7e:	fa00 f202 	lsl.w	r2, r0, r2
 800df82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800df86:	bf00      	nop
 800df88:	370c      	adds	r7, #12
 800df8a:	46bd      	mov	sp, r7
 800df8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df90:	4770      	bx	lr
 800df92:	bf00      	nop
 800df94:	e000e100 	.word	0xe000e100

0800df98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800df98:	b480      	push	{r7}
 800df9a:	b083      	sub	sp, #12
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	4603      	mov	r3, r0
 800dfa0:	6039      	str	r1, [r7, #0]
 800dfa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800dfa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	db0a      	blt.n	800dfc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	b2da      	uxtb	r2, r3
 800dfb0:	490c      	ldr	r1, [pc, #48]	@ (800dfe4 <__NVIC_SetPriority+0x4c>)
 800dfb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dfb6:	0112      	lsls	r2, r2, #4
 800dfb8:	b2d2      	uxtb	r2, r2
 800dfba:	440b      	add	r3, r1
 800dfbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800dfc0:	e00a      	b.n	800dfd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	b2da      	uxtb	r2, r3
 800dfc6:	4908      	ldr	r1, [pc, #32]	@ (800dfe8 <__NVIC_SetPriority+0x50>)
 800dfc8:	79fb      	ldrb	r3, [r7, #7]
 800dfca:	f003 030f 	and.w	r3, r3, #15
 800dfce:	3b04      	subs	r3, #4
 800dfd0:	0112      	lsls	r2, r2, #4
 800dfd2:	b2d2      	uxtb	r2, r2
 800dfd4:	440b      	add	r3, r1
 800dfd6:	761a      	strb	r2, [r3, #24]
}
 800dfd8:	bf00      	nop
 800dfda:	370c      	adds	r7, #12
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe2:	4770      	bx	lr
 800dfe4:	e000e100 	.word	0xe000e100
 800dfe8:	e000ed00 	.word	0xe000ed00

0800dfec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800dfec:	b480      	push	{r7}
 800dfee:	b089      	sub	sp, #36	@ 0x24
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	60f8      	str	r0, [r7, #12]
 800dff4:	60b9      	str	r1, [r7, #8]
 800dff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	f003 0307 	and.w	r3, r3, #7
 800dffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e000:	69fb      	ldr	r3, [r7, #28]
 800e002:	f1c3 0307 	rsb	r3, r3, #7
 800e006:	2b04      	cmp	r3, #4
 800e008:	bf28      	it	cs
 800e00a:	2304      	movcs	r3, #4
 800e00c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e00e:	69fb      	ldr	r3, [r7, #28]
 800e010:	3304      	adds	r3, #4
 800e012:	2b06      	cmp	r3, #6
 800e014:	d902      	bls.n	800e01c <NVIC_EncodePriority+0x30>
 800e016:	69fb      	ldr	r3, [r7, #28]
 800e018:	3b03      	subs	r3, #3
 800e01a:	e000      	b.n	800e01e <NVIC_EncodePriority+0x32>
 800e01c:	2300      	movs	r3, #0
 800e01e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e020:	f04f 32ff 	mov.w	r2, #4294967295
 800e024:	69bb      	ldr	r3, [r7, #24]
 800e026:	fa02 f303 	lsl.w	r3, r2, r3
 800e02a:	43da      	mvns	r2, r3
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	401a      	ands	r2, r3
 800e030:	697b      	ldr	r3, [r7, #20]
 800e032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800e034:	f04f 31ff 	mov.w	r1, #4294967295
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	fa01 f303 	lsl.w	r3, r1, r3
 800e03e:	43d9      	mvns	r1, r3
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e044:	4313      	orrs	r3, r2
         );
}
 800e046:	4618      	mov	r0, r3
 800e048:	3724      	adds	r7, #36	@ 0x24
 800e04a:	46bd      	mov	sp, r7
 800e04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e050:	4770      	bx	lr
	...

0800e054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b082      	sub	sp, #8
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	3b01      	subs	r3, #1
 800e060:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e064:	d301      	bcc.n	800e06a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800e066:	2301      	movs	r3, #1
 800e068:	e00f      	b.n	800e08a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800e06a:	4a0a      	ldr	r2, [pc, #40]	@ (800e094 <SysTick_Config+0x40>)
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	3b01      	subs	r3, #1
 800e070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800e072:	210f      	movs	r1, #15
 800e074:	f04f 30ff 	mov.w	r0, #4294967295
 800e078:	f7ff ff8e 	bl	800df98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800e07c:	4b05      	ldr	r3, [pc, #20]	@ (800e094 <SysTick_Config+0x40>)
 800e07e:	2200      	movs	r2, #0
 800e080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800e082:	4b04      	ldr	r3, [pc, #16]	@ (800e094 <SysTick_Config+0x40>)
 800e084:	2207      	movs	r2, #7
 800e086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800e088:	2300      	movs	r3, #0
}
 800e08a:	4618      	mov	r0, r3
 800e08c:	3708      	adds	r7, #8
 800e08e:	46bd      	mov	sp, r7
 800e090:	bd80      	pop	{r7, pc}
 800e092:	bf00      	nop
 800e094:	e000e010 	.word	0xe000e010

0800e098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b082      	sub	sp, #8
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800e0a0:	6878      	ldr	r0, [r7, #4]
 800e0a2:	f7ff ff29 	bl	800def8 <__NVIC_SetPriorityGrouping>
}
 800e0a6:	bf00      	nop
 800e0a8:	3708      	adds	r7, #8
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}

0800e0ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800e0ae:	b580      	push	{r7, lr}
 800e0b0:	b086      	sub	sp, #24
 800e0b2:	af00      	add	r7, sp, #0
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	60b9      	str	r1, [r7, #8]
 800e0b8:	607a      	str	r2, [r7, #4]
 800e0ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800e0c0:	f7ff ff3e 	bl	800df40 <__NVIC_GetPriorityGrouping>
 800e0c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800e0c6:	687a      	ldr	r2, [r7, #4]
 800e0c8:	68b9      	ldr	r1, [r7, #8]
 800e0ca:	6978      	ldr	r0, [r7, #20]
 800e0cc:	f7ff ff8e 	bl	800dfec <NVIC_EncodePriority>
 800e0d0:	4602      	mov	r2, r0
 800e0d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0d6:	4611      	mov	r1, r2
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f7ff ff5d 	bl	800df98 <__NVIC_SetPriority>
}
 800e0de:	bf00      	nop
 800e0e0:	3718      	adds	r7, #24
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}

0800e0e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e0e6:	b580      	push	{r7, lr}
 800e0e8:	b082      	sub	sp, #8
 800e0ea:	af00      	add	r7, sp, #0
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800e0f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f7ff ff31 	bl	800df5c <__NVIC_EnableIRQ>
}
 800e0fa:	bf00      	nop
 800e0fc:	3708      	adds	r7, #8
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd80      	pop	{r7, pc}

0800e102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800e102:	b580      	push	{r7, lr}
 800e104:	b082      	sub	sp, #8
 800e106:	af00      	add	r7, sp, #0
 800e108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	f7ff ffa2 	bl	800e054 <SysTick_Config>
 800e110:	4603      	mov	r3, r0
}
 800e112:	4618      	mov	r0, r3
 800e114:	3708      	adds	r7, #8
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}
	...

0800e11c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e11c:	b480      	push	{r7}
 800e11e:	b089      	sub	sp, #36	@ 0x24
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
 800e124:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800e126:	2300      	movs	r3, #0
 800e128:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800e12a:	2300      	movs	r3, #0
 800e12c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800e12e:	2300      	movs	r3, #0
 800e130:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800e132:	2300      	movs	r3, #0
 800e134:	61fb      	str	r3, [r7, #28]
 800e136:	e159      	b.n	800e3ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800e138:	2201      	movs	r2, #1
 800e13a:	69fb      	ldr	r3, [r7, #28]
 800e13c:	fa02 f303 	lsl.w	r3, r2, r3
 800e140:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	697a      	ldr	r2, [r7, #20]
 800e148:	4013      	ands	r3, r2
 800e14a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800e14c:	693a      	ldr	r2, [r7, #16]
 800e14e:	697b      	ldr	r3, [r7, #20]
 800e150:	429a      	cmp	r2, r3
 800e152:	f040 8148 	bne.w	800e3e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	685b      	ldr	r3, [r3, #4]
 800e15a:	f003 0303 	and.w	r3, r3, #3
 800e15e:	2b01      	cmp	r3, #1
 800e160:	d005      	beq.n	800e16e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	685b      	ldr	r3, [r3, #4]
 800e166:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800e16a:	2b02      	cmp	r3, #2
 800e16c:	d130      	bne.n	800e1d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	689b      	ldr	r3, [r3, #8]
 800e172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800e174:	69fb      	ldr	r3, [r7, #28]
 800e176:	005b      	lsls	r3, r3, #1
 800e178:	2203      	movs	r2, #3
 800e17a:	fa02 f303 	lsl.w	r3, r2, r3
 800e17e:	43db      	mvns	r3, r3
 800e180:	69ba      	ldr	r2, [r7, #24]
 800e182:	4013      	ands	r3, r2
 800e184:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	68da      	ldr	r2, [r3, #12]
 800e18a:	69fb      	ldr	r3, [r7, #28]
 800e18c:	005b      	lsls	r3, r3, #1
 800e18e:	fa02 f303 	lsl.w	r3, r2, r3
 800e192:	69ba      	ldr	r2, [r7, #24]
 800e194:	4313      	orrs	r3, r2
 800e196:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	69ba      	ldr	r2, [r7, #24]
 800e19c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	685b      	ldr	r3, [r3, #4]
 800e1a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800e1a4:	2201      	movs	r2, #1
 800e1a6:	69fb      	ldr	r3, [r7, #28]
 800e1a8:	fa02 f303 	lsl.w	r3, r2, r3
 800e1ac:	43db      	mvns	r3, r3
 800e1ae:	69ba      	ldr	r2, [r7, #24]
 800e1b0:	4013      	ands	r3, r2
 800e1b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	685b      	ldr	r3, [r3, #4]
 800e1b8:	091b      	lsrs	r3, r3, #4
 800e1ba:	f003 0201 	and.w	r2, r3, #1
 800e1be:	69fb      	ldr	r3, [r7, #28]
 800e1c0:	fa02 f303 	lsl.w	r3, r2, r3
 800e1c4:	69ba      	ldr	r2, [r7, #24]
 800e1c6:	4313      	orrs	r3, r2
 800e1c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	69ba      	ldr	r2, [r7, #24]
 800e1ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e1d0:	683b      	ldr	r3, [r7, #0]
 800e1d2:	685b      	ldr	r3, [r3, #4]
 800e1d4:	f003 0303 	and.w	r3, r3, #3
 800e1d8:	2b03      	cmp	r3, #3
 800e1da:	d017      	beq.n	800e20c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	68db      	ldr	r3, [r3, #12]
 800e1e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800e1e2:	69fb      	ldr	r3, [r7, #28]
 800e1e4:	005b      	lsls	r3, r3, #1
 800e1e6:	2203      	movs	r2, #3
 800e1e8:	fa02 f303 	lsl.w	r3, r2, r3
 800e1ec:	43db      	mvns	r3, r3
 800e1ee:	69ba      	ldr	r2, [r7, #24]
 800e1f0:	4013      	ands	r3, r2
 800e1f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	689a      	ldr	r2, [r3, #8]
 800e1f8:	69fb      	ldr	r3, [r7, #28]
 800e1fa:	005b      	lsls	r3, r3, #1
 800e1fc:	fa02 f303 	lsl.w	r3, r2, r3
 800e200:	69ba      	ldr	r2, [r7, #24]
 800e202:	4313      	orrs	r3, r2
 800e204:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	69ba      	ldr	r2, [r7, #24]
 800e20a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	685b      	ldr	r3, [r3, #4]
 800e210:	f003 0303 	and.w	r3, r3, #3
 800e214:	2b02      	cmp	r3, #2
 800e216:	d123      	bne.n	800e260 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e218:	69fb      	ldr	r3, [r7, #28]
 800e21a:	08da      	lsrs	r2, r3, #3
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	3208      	adds	r2, #8
 800e220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e224:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800e226:	69fb      	ldr	r3, [r7, #28]
 800e228:	f003 0307 	and.w	r3, r3, #7
 800e22c:	009b      	lsls	r3, r3, #2
 800e22e:	220f      	movs	r2, #15
 800e230:	fa02 f303 	lsl.w	r3, r2, r3
 800e234:	43db      	mvns	r3, r3
 800e236:	69ba      	ldr	r2, [r7, #24]
 800e238:	4013      	ands	r3, r2
 800e23a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	691a      	ldr	r2, [r3, #16]
 800e240:	69fb      	ldr	r3, [r7, #28]
 800e242:	f003 0307 	and.w	r3, r3, #7
 800e246:	009b      	lsls	r3, r3, #2
 800e248:	fa02 f303 	lsl.w	r3, r2, r3
 800e24c:	69ba      	ldr	r2, [r7, #24]
 800e24e:	4313      	orrs	r3, r2
 800e250:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800e252:	69fb      	ldr	r3, [r7, #28]
 800e254:	08da      	lsrs	r2, r3, #3
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	3208      	adds	r2, #8
 800e25a:	69b9      	ldr	r1, [r7, #24]
 800e25c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800e266:	69fb      	ldr	r3, [r7, #28]
 800e268:	005b      	lsls	r3, r3, #1
 800e26a:	2203      	movs	r2, #3
 800e26c:	fa02 f303 	lsl.w	r3, r2, r3
 800e270:	43db      	mvns	r3, r3
 800e272:	69ba      	ldr	r2, [r7, #24]
 800e274:	4013      	ands	r3, r2
 800e276:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	685b      	ldr	r3, [r3, #4]
 800e27c:	f003 0203 	and.w	r2, r3, #3
 800e280:	69fb      	ldr	r3, [r7, #28]
 800e282:	005b      	lsls	r3, r3, #1
 800e284:	fa02 f303 	lsl.w	r3, r2, r3
 800e288:	69ba      	ldr	r2, [r7, #24]
 800e28a:	4313      	orrs	r3, r2
 800e28c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	69ba      	ldr	r2, [r7, #24]
 800e292:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	685b      	ldr	r3, [r3, #4]
 800e298:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	f000 80a2 	beq.w	800e3e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	60fb      	str	r3, [r7, #12]
 800e2a6:	4b57      	ldr	r3, [pc, #348]	@ (800e404 <HAL_GPIO_Init+0x2e8>)
 800e2a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e2aa:	4a56      	ldr	r2, [pc, #344]	@ (800e404 <HAL_GPIO_Init+0x2e8>)
 800e2ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e2b0:	6453      	str	r3, [r2, #68]	@ 0x44
 800e2b2:	4b54      	ldr	r3, [pc, #336]	@ (800e404 <HAL_GPIO_Init+0x2e8>)
 800e2b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e2b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e2ba:	60fb      	str	r3, [r7, #12]
 800e2bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800e2be:	4a52      	ldr	r2, [pc, #328]	@ (800e408 <HAL_GPIO_Init+0x2ec>)
 800e2c0:	69fb      	ldr	r3, [r7, #28]
 800e2c2:	089b      	lsrs	r3, r3, #2
 800e2c4:	3302      	adds	r3, #2
 800e2c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800e2cc:	69fb      	ldr	r3, [r7, #28]
 800e2ce:	f003 0303 	and.w	r3, r3, #3
 800e2d2:	009b      	lsls	r3, r3, #2
 800e2d4:	220f      	movs	r2, #15
 800e2d6:	fa02 f303 	lsl.w	r3, r2, r3
 800e2da:	43db      	mvns	r3, r3
 800e2dc:	69ba      	ldr	r2, [r7, #24]
 800e2de:	4013      	ands	r3, r2
 800e2e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	4a49      	ldr	r2, [pc, #292]	@ (800e40c <HAL_GPIO_Init+0x2f0>)
 800e2e6:	4293      	cmp	r3, r2
 800e2e8:	d019      	beq.n	800e31e <HAL_GPIO_Init+0x202>
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	4a48      	ldr	r2, [pc, #288]	@ (800e410 <HAL_GPIO_Init+0x2f4>)
 800e2ee:	4293      	cmp	r3, r2
 800e2f0:	d013      	beq.n	800e31a <HAL_GPIO_Init+0x1fe>
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	4a47      	ldr	r2, [pc, #284]	@ (800e414 <HAL_GPIO_Init+0x2f8>)
 800e2f6:	4293      	cmp	r3, r2
 800e2f8:	d00d      	beq.n	800e316 <HAL_GPIO_Init+0x1fa>
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	4a46      	ldr	r2, [pc, #280]	@ (800e418 <HAL_GPIO_Init+0x2fc>)
 800e2fe:	4293      	cmp	r3, r2
 800e300:	d007      	beq.n	800e312 <HAL_GPIO_Init+0x1f6>
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	4a45      	ldr	r2, [pc, #276]	@ (800e41c <HAL_GPIO_Init+0x300>)
 800e306:	4293      	cmp	r3, r2
 800e308:	d101      	bne.n	800e30e <HAL_GPIO_Init+0x1f2>
 800e30a:	2304      	movs	r3, #4
 800e30c:	e008      	b.n	800e320 <HAL_GPIO_Init+0x204>
 800e30e:	2307      	movs	r3, #7
 800e310:	e006      	b.n	800e320 <HAL_GPIO_Init+0x204>
 800e312:	2303      	movs	r3, #3
 800e314:	e004      	b.n	800e320 <HAL_GPIO_Init+0x204>
 800e316:	2302      	movs	r3, #2
 800e318:	e002      	b.n	800e320 <HAL_GPIO_Init+0x204>
 800e31a:	2301      	movs	r3, #1
 800e31c:	e000      	b.n	800e320 <HAL_GPIO_Init+0x204>
 800e31e:	2300      	movs	r3, #0
 800e320:	69fa      	ldr	r2, [r7, #28]
 800e322:	f002 0203 	and.w	r2, r2, #3
 800e326:	0092      	lsls	r2, r2, #2
 800e328:	4093      	lsls	r3, r2
 800e32a:	69ba      	ldr	r2, [r7, #24]
 800e32c:	4313      	orrs	r3, r2
 800e32e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e330:	4935      	ldr	r1, [pc, #212]	@ (800e408 <HAL_GPIO_Init+0x2ec>)
 800e332:	69fb      	ldr	r3, [r7, #28]
 800e334:	089b      	lsrs	r3, r3, #2
 800e336:	3302      	adds	r3, #2
 800e338:	69ba      	ldr	r2, [r7, #24]
 800e33a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800e33e:	4b38      	ldr	r3, [pc, #224]	@ (800e420 <HAL_GPIO_Init+0x304>)
 800e340:	689b      	ldr	r3, [r3, #8]
 800e342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e344:	693b      	ldr	r3, [r7, #16]
 800e346:	43db      	mvns	r3, r3
 800e348:	69ba      	ldr	r2, [r7, #24]
 800e34a:	4013      	ands	r3, r2
 800e34c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	685b      	ldr	r3, [r3, #4]
 800e352:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e356:	2b00      	cmp	r3, #0
 800e358:	d003      	beq.n	800e362 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800e35a:	69ba      	ldr	r2, [r7, #24]
 800e35c:	693b      	ldr	r3, [r7, #16]
 800e35e:	4313      	orrs	r3, r2
 800e360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800e362:	4a2f      	ldr	r2, [pc, #188]	@ (800e420 <HAL_GPIO_Init+0x304>)
 800e364:	69bb      	ldr	r3, [r7, #24]
 800e366:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800e368:	4b2d      	ldr	r3, [pc, #180]	@ (800e420 <HAL_GPIO_Init+0x304>)
 800e36a:	68db      	ldr	r3, [r3, #12]
 800e36c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e36e:	693b      	ldr	r3, [r7, #16]
 800e370:	43db      	mvns	r3, r3
 800e372:	69ba      	ldr	r2, [r7, #24]
 800e374:	4013      	ands	r3, r2
 800e376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	685b      	ldr	r3, [r3, #4]
 800e37c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e380:	2b00      	cmp	r3, #0
 800e382:	d003      	beq.n	800e38c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800e384:	69ba      	ldr	r2, [r7, #24]
 800e386:	693b      	ldr	r3, [r7, #16]
 800e388:	4313      	orrs	r3, r2
 800e38a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800e38c:	4a24      	ldr	r2, [pc, #144]	@ (800e420 <HAL_GPIO_Init+0x304>)
 800e38e:	69bb      	ldr	r3, [r7, #24]
 800e390:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800e392:	4b23      	ldr	r3, [pc, #140]	@ (800e420 <HAL_GPIO_Init+0x304>)
 800e394:	685b      	ldr	r3, [r3, #4]
 800e396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e398:	693b      	ldr	r3, [r7, #16]
 800e39a:	43db      	mvns	r3, r3
 800e39c:	69ba      	ldr	r2, [r7, #24]
 800e39e:	4013      	ands	r3, r2
 800e3a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	685b      	ldr	r3, [r3, #4]
 800e3a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d003      	beq.n	800e3b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800e3ae:	69ba      	ldr	r2, [r7, #24]
 800e3b0:	693b      	ldr	r3, [r7, #16]
 800e3b2:	4313      	orrs	r3, r2
 800e3b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800e3b6:	4a1a      	ldr	r2, [pc, #104]	@ (800e420 <HAL_GPIO_Init+0x304>)
 800e3b8:	69bb      	ldr	r3, [r7, #24]
 800e3ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800e3bc:	4b18      	ldr	r3, [pc, #96]	@ (800e420 <HAL_GPIO_Init+0x304>)
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e3c2:	693b      	ldr	r3, [r7, #16]
 800e3c4:	43db      	mvns	r3, r3
 800e3c6:	69ba      	ldr	r2, [r7, #24]
 800e3c8:	4013      	ands	r3, r2
 800e3ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	685b      	ldr	r3, [r3, #4]
 800e3d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d003      	beq.n	800e3e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800e3d8:	69ba      	ldr	r2, [r7, #24]
 800e3da:	693b      	ldr	r3, [r7, #16]
 800e3dc:	4313      	orrs	r3, r2
 800e3de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800e3e0:	4a0f      	ldr	r2, [pc, #60]	@ (800e420 <HAL_GPIO_Init+0x304>)
 800e3e2:	69bb      	ldr	r3, [r7, #24]
 800e3e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800e3e6:	69fb      	ldr	r3, [r7, #28]
 800e3e8:	3301      	adds	r3, #1
 800e3ea:	61fb      	str	r3, [r7, #28]
 800e3ec:	69fb      	ldr	r3, [r7, #28]
 800e3ee:	2b0f      	cmp	r3, #15
 800e3f0:	f67f aea2 	bls.w	800e138 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800e3f4:	bf00      	nop
 800e3f6:	bf00      	nop
 800e3f8:	3724      	adds	r7, #36	@ 0x24
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e400:	4770      	bx	lr
 800e402:	bf00      	nop
 800e404:	40023800 	.word	0x40023800
 800e408:	40013800 	.word	0x40013800
 800e40c:	40020000 	.word	0x40020000
 800e410:	40020400 	.word	0x40020400
 800e414:	40020800 	.word	0x40020800
 800e418:	40020c00 	.word	0x40020c00
 800e41c:	40021000 	.word	0x40021000
 800e420:	40013c00 	.word	0x40013c00

0800e424 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800e424:	b480      	push	{r7}
 800e426:	b085      	sub	sp, #20
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
 800e42c:	460b      	mov	r3, r1
 800e42e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	691a      	ldr	r2, [r3, #16]
 800e434:	887b      	ldrh	r3, [r7, #2]
 800e436:	4013      	ands	r3, r2
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d002      	beq.n	800e442 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800e43c:	2301      	movs	r3, #1
 800e43e:	73fb      	strb	r3, [r7, #15]
 800e440:	e001      	b.n	800e446 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800e442:	2300      	movs	r3, #0
 800e444:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e446:	7bfb      	ldrb	r3, [r7, #15]
}
 800e448:	4618      	mov	r0, r3
 800e44a:	3714      	adds	r7, #20
 800e44c:	46bd      	mov	sp, r7
 800e44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e452:	4770      	bx	lr

0800e454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e454:	b480      	push	{r7}
 800e456:	b083      	sub	sp, #12
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
 800e45c:	460b      	mov	r3, r1
 800e45e:	807b      	strh	r3, [r7, #2]
 800e460:	4613      	mov	r3, r2
 800e462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800e464:	787b      	ldrb	r3, [r7, #1]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d003      	beq.n	800e472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800e46a:	887a      	ldrh	r2, [r7, #2]
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800e470:	e003      	b.n	800e47a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800e472:	887b      	ldrh	r3, [r7, #2]
 800e474:	041a      	lsls	r2, r3, #16
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	619a      	str	r2, [r3, #24]
}
 800e47a:	bf00      	nop
 800e47c:	370c      	adds	r7, #12
 800e47e:	46bd      	mov	sp, r7
 800e480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e484:	4770      	bx	lr
	...

0800e488 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b082      	sub	sp, #8
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	4603      	mov	r3, r0
 800e490:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800e492:	4b08      	ldr	r3, [pc, #32]	@ (800e4b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800e494:	695a      	ldr	r2, [r3, #20]
 800e496:	88fb      	ldrh	r3, [r7, #6]
 800e498:	4013      	ands	r3, r2
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d006      	beq.n	800e4ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800e49e:	4a05      	ldr	r2, [pc, #20]	@ (800e4b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800e4a0:	88fb      	ldrh	r3, [r7, #6]
 800e4a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800e4a4:	88fb      	ldrh	r3, [r7, #6]
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f7fe f8dc 	bl	800c664 <HAL_GPIO_EXTI_Callback>
  }
}
 800e4ac:	bf00      	nop
 800e4ae:	3708      	adds	r7, #8
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	bd80      	pop	{r7, pc}
 800e4b4:	40013c00 	.word	0x40013c00

0800e4b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b084      	sub	sp, #16
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d101      	bne.n	800e4ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800e4c6:	2301      	movs	r3, #1
 800e4c8:	e12b      	b.n	800e722 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e4d0:	b2db      	uxtb	r3, r3
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d106      	bne.n	800e4e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	2200      	movs	r2, #0
 800e4da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	f7fe fe76 	bl	800d1d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2224      	movs	r2, #36	@ 0x24
 800e4e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	681a      	ldr	r2, [r3, #0]
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	f022 0201 	bic.w	r2, r2, #1
 800e4fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	681a      	ldr	r2, [r3, #0]
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e50a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	681a      	ldr	r2, [r3, #0]
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e51a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800e51c:	f001 fc20 	bl	800fd60 <HAL_RCC_GetPCLK1Freq>
 800e520:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	685b      	ldr	r3, [r3, #4]
 800e526:	4a81      	ldr	r2, [pc, #516]	@ (800e72c <HAL_I2C_Init+0x274>)
 800e528:	4293      	cmp	r3, r2
 800e52a:	d807      	bhi.n	800e53c <HAL_I2C_Init+0x84>
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	4a80      	ldr	r2, [pc, #512]	@ (800e730 <HAL_I2C_Init+0x278>)
 800e530:	4293      	cmp	r3, r2
 800e532:	bf94      	ite	ls
 800e534:	2301      	movls	r3, #1
 800e536:	2300      	movhi	r3, #0
 800e538:	b2db      	uxtb	r3, r3
 800e53a:	e006      	b.n	800e54a <HAL_I2C_Init+0x92>
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	4a7d      	ldr	r2, [pc, #500]	@ (800e734 <HAL_I2C_Init+0x27c>)
 800e540:	4293      	cmp	r3, r2
 800e542:	bf94      	ite	ls
 800e544:	2301      	movls	r3, #1
 800e546:	2300      	movhi	r3, #0
 800e548:	b2db      	uxtb	r3, r3
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d001      	beq.n	800e552 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800e54e:	2301      	movs	r3, #1
 800e550:	e0e7      	b.n	800e722 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	4a78      	ldr	r2, [pc, #480]	@ (800e738 <HAL_I2C_Init+0x280>)
 800e556:	fba2 2303 	umull	r2, r3, r2, r3
 800e55a:	0c9b      	lsrs	r3, r3, #18
 800e55c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	685b      	ldr	r3, [r3, #4]
 800e564:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	68ba      	ldr	r2, [r7, #8]
 800e56e:	430a      	orrs	r2, r1
 800e570:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	6a1b      	ldr	r3, [r3, #32]
 800e578:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	685b      	ldr	r3, [r3, #4]
 800e580:	4a6a      	ldr	r2, [pc, #424]	@ (800e72c <HAL_I2C_Init+0x274>)
 800e582:	4293      	cmp	r3, r2
 800e584:	d802      	bhi.n	800e58c <HAL_I2C_Init+0xd4>
 800e586:	68bb      	ldr	r3, [r7, #8]
 800e588:	3301      	adds	r3, #1
 800e58a:	e009      	b.n	800e5a0 <HAL_I2C_Init+0xe8>
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800e592:	fb02 f303 	mul.w	r3, r2, r3
 800e596:	4a69      	ldr	r2, [pc, #420]	@ (800e73c <HAL_I2C_Init+0x284>)
 800e598:	fba2 2303 	umull	r2, r3, r2, r3
 800e59c:	099b      	lsrs	r3, r3, #6
 800e59e:	3301      	adds	r3, #1
 800e5a0:	687a      	ldr	r2, [r7, #4]
 800e5a2:	6812      	ldr	r2, [r2, #0]
 800e5a4:	430b      	orrs	r3, r1
 800e5a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	69db      	ldr	r3, [r3, #28]
 800e5ae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800e5b2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	685b      	ldr	r3, [r3, #4]
 800e5ba:	495c      	ldr	r1, [pc, #368]	@ (800e72c <HAL_I2C_Init+0x274>)
 800e5bc:	428b      	cmp	r3, r1
 800e5be:	d819      	bhi.n	800e5f4 <HAL_I2C_Init+0x13c>
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	1e59      	subs	r1, r3, #1
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	685b      	ldr	r3, [r3, #4]
 800e5c8:	005b      	lsls	r3, r3, #1
 800e5ca:	fbb1 f3f3 	udiv	r3, r1, r3
 800e5ce:	1c59      	adds	r1, r3, #1
 800e5d0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800e5d4:	400b      	ands	r3, r1
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d00a      	beq.n	800e5f0 <HAL_I2C_Init+0x138>
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	1e59      	subs	r1, r3, #1
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	685b      	ldr	r3, [r3, #4]
 800e5e2:	005b      	lsls	r3, r3, #1
 800e5e4:	fbb1 f3f3 	udiv	r3, r1, r3
 800e5e8:	3301      	adds	r3, #1
 800e5ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e5ee:	e051      	b.n	800e694 <HAL_I2C_Init+0x1dc>
 800e5f0:	2304      	movs	r3, #4
 800e5f2:	e04f      	b.n	800e694 <HAL_I2C_Init+0x1dc>
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	689b      	ldr	r3, [r3, #8]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d111      	bne.n	800e620 <HAL_I2C_Init+0x168>
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	1e58      	subs	r0, r3, #1
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	6859      	ldr	r1, [r3, #4]
 800e604:	460b      	mov	r3, r1
 800e606:	005b      	lsls	r3, r3, #1
 800e608:	440b      	add	r3, r1
 800e60a:	fbb0 f3f3 	udiv	r3, r0, r3
 800e60e:	3301      	adds	r3, #1
 800e610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e614:	2b00      	cmp	r3, #0
 800e616:	bf0c      	ite	eq
 800e618:	2301      	moveq	r3, #1
 800e61a:	2300      	movne	r3, #0
 800e61c:	b2db      	uxtb	r3, r3
 800e61e:	e012      	b.n	800e646 <HAL_I2C_Init+0x18e>
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	1e58      	subs	r0, r3, #1
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	6859      	ldr	r1, [r3, #4]
 800e628:	460b      	mov	r3, r1
 800e62a:	009b      	lsls	r3, r3, #2
 800e62c:	440b      	add	r3, r1
 800e62e:	0099      	lsls	r1, r3, #2
 800e630:	440b      	add	r3, r1
 800e632:	fbb0 f3f3 	udiv	r3, r0, r3
 800e636:	3301      	adds	r3, #1
 800e638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	bf0c      	ite	eq
 800e640:	2301      	moveq	r3, #1
 800e642:	2300      	movne	r3, #0
 800e644:	b2db      	uxtb	r3, r3
 800e646:	2b00      	cmp	r3, #0
 800e648:	d001      	beq.n	800e64e <HAL_I2C_Init+0x196>
 800e64a:	2301      	movs	r3, #1
 800e64c:	e022      	b.n	800e694 <HAL_I2C_Init+0x1dc>
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	689b      	ldr	r3, [r3, #8]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d10e      	bne.n	800e674 <HAL_I2C_Init+0x1bc>
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	1e58      	subs	r0, r3, #1
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	6859      	ldr	r1, [r3, #4]
 800e65e:	460b      	mov	r3, r1
 800e660:	005b      	lsls	r3, r3, #1
 800e662:	440b      	add	r3, r1
 800e664:	fbb0 f3f3 	udiv	r3, r0, r3
 800e668:	3301      	adds	r3, #1
 800e66a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e66e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e672:	e00f      	b.n	800e694 <HAL_I2C_Init+0x1dc>
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	1e58      	subs	r0, r3, #1
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	6859      	ldr	r1, [r3, #4]
 800e67c:	460b      	mov	r3, r1
 800e67e:	009b      	lsls	r3, r3, #2
 800e680:	440b      	add	r3, r1
 800e682:	0099      	lsls	r1, r3, #2
 800e684:	440b      	add	r3, r1
 800e686:	fbb0 f3f3 	udiv	r3, r0, r3
 800e68a:	3301      	adds	r3, #1
 800e68c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e690:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e694:	6879      	ldr	r1, [r7, #4]
 800e696:	6809      	ldr	r1, [r1, #0]
 800e698:	4313      	orrs	r3, r2
 800e69a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	69da      	ldr	r2, [r3, #28]
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	6a1b      	ldr	r3, [r3, #32]
 800e6ae:	431a      	orrs	r2, r3
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	430a      	orrs	r2, r1
 800e6b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	689b      	ldr	r3, [r3, #8]
 800e6be:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800e6c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e6c6:	687a      	ldr	r2, [r7, #4]
 800e6c8:	6911      	ldr	r1, [r2, #16]
 800e6ca:	687a      	ldr	r2, [r7, #4]
 800e6cc:	68d2      	ldr	r2, [r2, #12]
 800e6ce:	4311      	orrs	r1, r2
 800e6d0:	687a      	ldr	r2, [r7, #4]
 800e6d2:	6812      	ldr	r2, [r2, #0]
 800e6d4:	430b      	orrs	r3, r1
 800e6d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	68db      	ldr	r3, [r3, #12]
 800e6de:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	695a      	ldr	r2, [r3, #20]
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	699b      	ldr	r3, [r3, #24]
 800e6ea:	431a      	orrs	r2, r3
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	430a      	orrs	r2, r1
 800e6f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	681a      	ldr	r2, [r3, #0]
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	f042 0201 	orr.w	r2, r2, #1
 800e702:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2200      	movs	r2, #0
 800e708:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2220      	movs	r2, #32
 800e70e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	2200      	movs	r2, #0
 800e716:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	2200      	movs	r2, #0
 800e71c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800e720:	2300      	movs	r3, #0
}
 800e722:	4618      	mov	r0, r3
 800e724:	3710      	adds	r7, #16
 800e726:	46bd      	mov	sp, r7
 800e728:	bd80      	pop	{r7, pc}
 800e72a:	bf00      	nop
 800e72c:	000186a0 	.word	0x000186a0
 800e730:	001e847f 	.word	0x001e847f
 800e734:	003d08ff 	.word	0x003d08ff
 800e738:	431bde83 	.word	0x431bde83
 800e73c:	10624dd3 	.word	0x10624dd3

0800e740 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b088      	sub	sp, #32
 800e744:	af02      	add	r7, sp, #8
 800e746:	60f8      	str	r0, [r7, #12]
 800e748:	4608      	mov	r0, r1
 800e74a:	4611      	mov	r1, r2
 800e74c:	461a      	mov	r2, r3
 800e74e:	4603      	mov	r3, r0
 800e750:	817b      	strh	r3, [r7, #10]
 800e752:	460b      	mov	r3, r1
 800e754:	813b      	strh	r3, [r7, #8]
 800e756:	4613      	mov	r3, r2
 800e758:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800e75a:	f7ff f869 	bl	800d830 <HAL_GetTick>
 800e75e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e766:	b2db      	uxtb	r3, r3
 800e768:	2b20      	cmp	r3, #32
 800e76a:	f040 80d9 	bne.w	800e920 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800e76e:	697b      	ldr	r3, [r7, #20]
 800e770:	9300      	str	r3, [sp, #0]
 800e772:	2319      	movs	r3, #25
 800e774:	2201      	movs	r2, #1
 800e776:	496d      	ldr	r1, [pc, #436]	@ (800e92c <HAL_I2C_Mem_Write+0x1ec>)
 800e778:	68f8      	ldr	r0, [r7, #12]
 800e77a:	f000 fc8b 	bl	800f094 <I2C_WaitOnFlagUntilTimeout>
 800e77e:	4603      	mov	r3, r0
 800e780:	2b00      	cmp	r3, #0
 800e782:	d001      	beq.n	800e788 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800e784:	2302      	movs	r3, #2
 800e786:	e0cc      	b.n	800e922 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e78e:	2b01      	cmp	r3, #1
 800e790:	d101      	bne.n	800e796 <HAL_I2C_Mem_Write+0x56>
 800e792:	2302      	movs	r3, #2
 800e794:	e0c5      	b.n	800e922 <HAL_I2C_Mem_Write+0x1e2>
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	2201      	movs	r2, #1
 800e79a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	f003 0301 	and.w	r3, r3, #1
 800e7a8:	2b01      	cmp	r3, #1
 800e7aa:	d007      	beq.n	800e7bc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	681a      	ldr	r2, [r3, #0]
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	f042 0201 	orr.w	r2, r2, #1
 800e7ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	681a      	ldr	r2, [r3, #0]
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e7ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	2221      	movs	r2, #33	@ 0x21
 800e7d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	2240      	movs	r2, #64	@ 0x40
 800e7d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	2200      	movs	r2, #0
 800e7e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	6a3a      	ldr	r2, [r7, #32]
 800e7e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e7ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e7f2:	b29a      	uxth	r2, r3
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	4a4d      	ldr	r2, [pc, #308]	@ (800e930 <HAL_I2C_Mem_Write+0x1f0>)
 800e7fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e7fe:	88f8      	ldrh	r0, [r7, #6]
 800e800:	893a      	ldrh	r2, [r7, #8]
 800e802:	8979      	ldrh	r1, [r7, #10]
 800e804:	697b      	ldr	r3, [r7, #20]
 800e806:	9301      	str	r3, [sp, #4]
 800e808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e80a:	9300      	str	r3, [sp, #0]
 800e80c:	4603      	mov	r3, r0
 800e80e:	68f8      	ldr	r0, [r7, #12]
 800e810:	f000 fac2 	bl	800ed98 <I2C_RequestMemoryWrite>
 800e814:	4603      	mov	r3, r0
 800e816:	2b00      	cmp	r3, #0
 800e818:	d052      	beq.n	800e8c0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800e81a:	2301      	movs	r3, #1
 800e81c:	e081      	b.n	800e922 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e81e:	697a      	ldr	r2, [r7, #20]
 800e820:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e822:	68f8      	ldr	r0, [r7, #12]
 800e824:	f000 fd50 	bl	800f2c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800e828:	4603      	mov	r3, r0
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d00d      	beq.n	800e84a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e832:	2b04      	cmp	r3, #4
 800e834:	d107      	bne.n	800e846 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	681a      	ldr	r2, [r3, #0]
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e844:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800e846:	2301      	movs	r3, #1
 800e848:	e06b      	b.n	800e922 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e84e:	781a      	ldrb	r2, [r3, #0]
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e85a:	1c5a      	adds	r2, r3, #1
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e864:	3b01      	subs	r3, #1
 800e866:	b29a      	uxth	r2, r3
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e870:	b29b      	uxth	r3, r3
 800e872:	3b01      	subs	r3, #1
 800e874:	b29a      	uxth	r2, r3
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	695b      	ldr	r3, [r3, #20]
 800e880:	f003 0304 	and.w	r3, r3, #4
 800e884:	2b04      	cmp	r3, #4
 800e886:	d11b      	bne.n	800e8c0 <HAL_I2C_Mem_Write+0x180>
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d017      	beq.n	800e8c0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e894:	781a      	ldrb	r2, [r3, #0]
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8a0:	1c5a      	adds	r2, r3, #1
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e8aa:	3b01      	subs	r3, #1
 800e8ac:	b29a      	uxth	r2, r3
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e8b6:	b29b      	uxth	r3, r3
 800e8b8:	3b01      	subs	r3, #1
 800e8ba:	b29a      	uxth	r2, r3
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d1aa      	bne.n	800e81e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e8c8:	697a      	ldr	r2, [r7, #20]
 800e8ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e8cc:	68f8      	ldr	r0, [r7, #12]
 800e8ce:	f000 fd43 	bl	800f358 <I2C_WaitOnBTFFlagUntilTimeout>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d00d      	beq.n	800e8f4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8dc:	2b04      	cmp	r3, #4
 800e8de:	d107      	bne.n	800e8f0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	681a      	ldr	r2, [r3, #0]
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e8ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e8f0:	2301      	movs	r3, #1
 800e8f2:	e016      	b.n	800e922 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	681a      	ldr	r2, [r3, #0]
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e902:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	2220      	movs	r2, #32
 800e908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	2200      	movs	r2, #0
 800e910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	2200      	movs	r2, #0
 800e918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800e91c:	2300      	movs	r3, #0
 800e91e:	e000      	b.n	800e922 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800e920:	2302      	movs	r3, #2
  }
}
 800e922:	4618      	mov	r0, r3
 800e924:	3718      	adds	r7, #24
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}
 800e92a:	bf00      	nop
 800e92c:	00100002 	.word	0x00100002
 800e930:	ffff0000 	.word	0xffff0000

0800e934 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b08c      	sub	sp, #48	@ 0x30
 800e938:	af02      	add	r7, sp, #8
 800e93a:	60f8      	str	r0, [r7, #12]
 800e93c:	4608      	mov	r0, r1
 800e93e:	4611      	mov	r1, r2
 800e940:	461a      	mov	r2, r3
 800e942:	4603      	mov	r3, r0
 800e944:	817b      	strh	r3, [r7, #10]
 800e946:	460b      	mov	r3, r1
 800e948:	813b      	strh	r3, [r7, #8]
 800e94a:	4613      	mov	r3, r2
 800e94c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800e94e:	f7fe ff6f 	bl	800d830 <HAL_GetTick>
 800e952:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e95a:	b2db      	uxtb	r3, r3
 800e95c:	2b20      	cmp	r3, #32
 800e95e:	f040 8214 	bne.w	800ed8a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800e962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e964:	9300      	str	r3, [sp, #0]
 800e966:	2319      	movs	r3, #25
 800e968:	2201      	movs	r2, #1
 800e96a:	497b      	ldr	r1, [pc, #492]	@ (800eb58 <HAL_I2C_Mem_Read+0x224>)
 800e96c:	68f8      	ldr	r0, [r7, #12]
 800e96e:	f000 fb91 	bl	800f094 <I2C_WaitOnFlagUntilTimeout>
 800e972:	4603      	mov	r3, r0
 800e974:	2b00      	cmp	r3, #0
 800e976:	d001      	beq.n	800e97c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800e978:	2302      	movs	r3, #2
 800e97a:	e207      	b.n	800ed8c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e982:	2b01      	cmp	r3, #1
 800e984:	d101      	bne.n	800e98a <HAL_I2C_Mem_Read+0x56>
 800e986:	2302      	movs	r3, #2
 800e988:	e200      	b.n	800ed8c <HAL_I2C_Mem_Read+0x458>
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	2201      	movs	r2, #1
 800e98e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	f003 0301 	and.w	r3, r3, #1
 800e99c:	2b01      	cmp	r3, #1
 800e99e:	d007      	beq.n	800e9b0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	681a      	ldr	r2, [r3, #0]
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	f042 0201 	orr.w	r2, r2, #1
 800e9ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	681a      	ldr	r2, [r3, #0]
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e9be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	2222      	movs	r2, #34	@ 0x22
 800e9c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	2240      	movs	r2, #64	@ 0x40
 800e9cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e9da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800e9e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e9e6:	b29a      	uxth	r2, r3
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	4a5b      	ldr	r2, [pc, #364]	@ (800eb5c <HAL_I2C_Mem_Read+0x228>)
 800e9f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e9f2:	88f8      	ldrh	r0, [r7, #6]
 800e9f4:	893a      	ldrh	r2, [r7, #8]
 800e9f6:	8979      	ldrh	r1, [r7, #10]
 800e9f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9fa:	9301      	str	r3, [sp, #4]
 800e9fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9fe:	9300      	str	r3, [sp, #0]
 800ea00:	4603      	mov	r3, r0
 800ea02:	68f8      	ldr	r0, [r7, #12]
 800ea04:	f000 fa5e 	bl	800eec4 <I2C_RequestMemoryRead>
 800ea08:	4603      	mov	r3, r0
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d001      	beq.n	800ea12 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800ea0e:	2301      	movs	r3, #1
 800ea10:	e1bc      	b.n	800ed8c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d113      	bne.n	800ea42 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	623b      	str	r3, [r7, #32]
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	695b      	ldr	r3, [r3, #20]
 800ea24:	623b      	str	r3, [r7, #32]
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	699b      	ldr	r3, [r3, #24]
 800ea2c:	623b      	str	r3, [r7, #32]
 800ea2e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	681a      	ldr	r2, [r3, #0]
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ea3e:	601a      	str	r2, [r3, #0]
 800ea40:	e190      	b.n	800ed64 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea46:	2b01      	cmp	r3, #1
 800ea48:	d11b      	bne.n	800ea82 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	681a      	ldr	r2, [r3, #0]
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ea58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	61fb      	str	r3, [r7, #28]
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	695b      	ldr	r3, [r3, #20]
 800ea64:	61fb      	str	r3, [r7, #28]
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	699b      	ldr	r3, [r3, #24]
 800ea6c:	61fb      	str	r3, [r7, #28]
 800ea6e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	681a      	ldr	r2, [r3, #0]
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ea7e:	601a      	str	r2, [r3, #0]
 800ea80:	e170      	b.n	800ed64 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea86:	2b02      	cmp	r3, #2
 800ea88:	d11b      	bne.n	800eac2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	681a      	ldr	r2, [r3, #0]
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ea98:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	681a      	ldr	r2, [r3, #0]
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800eaa8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800eaaa:	2300      	movs	r3, #0
 800eaac:	61bb      	str	r3, [r7, #24]
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	695b      	ldr	r3, [r3, #20]
 800eab4:	61bb      	str	r3, [r7, #24]
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	699b      	ldr	r3, [r3, #24]
 800eabc:	61bb      	str	r3, [r7, #24]
 800eabe:	69bb      	ldr	r3, [r7, #24]
 800eac0:	e150      	b.n	800ed64 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800eac2:	2300      	movs	r3, #0
 800eac4:	617b      	str	r3, [r7, #20]
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	695b      	ldr	r3, [r3, #20]
 800eacc:	617b      	str	r3, [r7, #20]
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	699b      	ldr	r3, [r3, #24]
 800ead4:	617b      	str	r3, [r7, #20]
 800ead6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800ead8:	e144      	b.n	800ed64 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eade:	2b03      	cmp	r3, #3
 800eae0:	f200 80f1 	bhi.w	800ecc6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eae8:	2b01      	cmp	r3, #1
 800eaea:	d123      	bne.n	800eb34 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800eaec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eaee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800eaf0:	68f8      	ldr	r0, [r7, #12]
 800eaf2:	f000 fc79 	bl	800f3e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d001      	beq.n	800eb00 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800eafc:	2301      	movs	r3, #1
 800eafe:	e145      	b.n	800ed8c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	691a      	ldr	r2, [r3, #16]
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb0a:	b2d2      	uxtb	r2, r2
 800eb0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb12:	1c5a      	adds	r2, r3, #1
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb1c:	3b01      	subs	r3, #1
 800eb1e:	b29a      	uxth	r2, r3
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb28:	b29b      	uxth	r3, r3
 800eb2a:	3b01      	subs	r3, #1
 800eb2c:	b29a      	uxth	r2, r3
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800eb32:	e117      	b.n	800ed64 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb38:	2b02      	cmp	r3, #2
 800eb3a:	d14e      	bne.n	800ebda <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800eb3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb3e:	9300      	str	r3, [sp, #0]
 800eb40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb42:	2200      	movs	r2, #0
 800eb44:	4906      	ldr	r1, [pc, #24]	@ (800eb60 <HAL_I2C_Mem_Read+0x22c>)
 800eb46:	68f8      	ldr	r0, [r7, #12]
 800eb48:	f000 faa4 	bl	800f094 <I2C_WaitOnFlagUntilTimeout>
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d008      	beq.n	800eb64 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800eb52:	2301      	movs	r3, #1
 800eb54:	e11a      	b.n	800ed8c <HAL_I2C_Mem_Read+0x458>
 800eb56:	bf00      	nop
 800eb58:	00100002 	.word	0x00100002
 800eb5c:	ffff0000 	.word	0xffff0000
 800eb60:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	681a      	ldr	r2, [r3, #0]
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800eb72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	691a      	ldr	r2, [r3, #16]
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb7e:	b2d2      	uxtb	r2, r2
 800eb80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb86:	1c5a      	adds	r2, r3, #1
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb90:	3b01      	subs	r3, #1
 800eb92:	b29a      	uxth	r2, r3
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb9c:	b29b      	uxth	r3, r3
 800eb9e:	3b01      	subs	r3, #1
 800eba0:	b29a      	uxth	r2, r3
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	691a      	ldr	r2, [r3, #16]
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebb0:	b2d2      	uxtb	r2, r2
 800ebb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebb8:	1c5a      	adds	r2, r3, #1
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ebc2:	3b01      	subs	r3, #1
 800ebc4:	b29a      	uxth	r2, r3
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ebce:	b29b      	uxth	r3, r3
 800ebd0:	3b01      	subs	r3, #1
 800ebd2:	b29a      	uxth	r2, r3
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ebd8:	e0c4      	b.n	800ed64 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ebda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebdc:	9300      	str	r3, [sp, #0]
 800ebde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	496c      	ldr	r1, [pc, #432]	@ (800ed94 <HAL_I2C_Mem_Read+0x460>)
 800ebe4:	68f8      	ldr	r0, [r7, #12]
 800ebe6:	f000 fa55 	bl	800f094 <I2C_WaitOnFlagUntilTimeout>
 800ebea:	4603      	mov	r3, r0
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d001      	beq.n	800ebf4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800ebf0:	2301      	movs	r3, #1
 800ebf2:	e0cb      	b.n	800ed8c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	681a      	ldr	r2, [r3, #0]
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ec02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	691a      	ldr	r2, [r3, #16]
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec0e:	b2d2      	uxtb	r2, r2
 800ec10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec16:	1c5a      	adds	r2, r3, #1
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ec20:	3b01      	subs	r3, #1
 800ec22:	b29a      	uxth	r2, r3
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ec2c:	b29b      	uxth	r3, r3
 800ec2e:	3b01      	subs	r3, #1
 800ec30:	b29a      	uxth	r2, r3
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ec36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec38:	9300      	str	r3, [sp, #0]
 800ec3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	4955      	ldr	r1, [pc, #340]	@ (800ed94 <HAL_I2C_Mem_Read+0x460>)
 800ec40:	68f8      	ldr	r0, [r7, #12]
 800ec42:	f000 fa27 	bl	800f094 <I2C_WaitOnFlagUntilTimeout>
 800ec46:	4603      	mov	r3, r0
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d001      	beq.n	800ec50 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	e09d      	b.n	800ed8c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	681a      	ldr	r2, [r3, #0]
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ec5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	691a      	ldr	r2, [r3, #16]
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec6a:	b2d2      	uxtb	r2, r2
 800ec6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec72:	1c5a      	adds	r2, r3, #1
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ec7c:	3b01      	subs	r3, #1
 800ec7e:	b29a      	uxth	r2, r3
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ec88:	b29b      	uxth	r3, r3
 800ec8a:	3b01      	subs	r3, #1
 800ec8c:	b29a      	uxth	r2, r3
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	691a      	ldr	r2, [r3, #16]
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec9c:	b2d2      	uxtb	r2, r2
 800ec9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eca4:	1c5a      	adds	r2, r3, #1
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ecae:	3b01      	subs	r3, #1
 800ecb0:	b29a      	uxth	r2, r3
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ecba:	b29b      	uxth	r3, r3
 800ecbc:	3b01      	subs	r3, #1
 800ecbe:	b29a      	uxth	r2, r3
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ecc4:	e04e      	b.n	800ed64 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ecc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ecc8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ecca:	68f8      	ldr	r0, [r7, #12]
 800eccc:	f000 fb8c 	bl	800f3e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d001      	beq.n	800ecda <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800ecd6:	2301      	movs	r3, #1
 800ecd8:	e058      	b.n	800ed8c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	691a      	ldr	r2, [r3, #16]
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ece4:	b2d2      	uxtb	r2, r2
 800ece6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecec:	1c5a      	adds	r2, r3, #1
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ecf6:	3b01      	subs	r3, #1
 800ecf8:	b29a      	uxth	r2, r3
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed02:	b29b      	uxth	r3, r3
 800ed04:	3b01      	subs	r3, #1
 800ed06:	b29a      	uxth	r2, r3
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	695b      	ldr	r3, [r3, #20]
 800ed12:	f003 0304 	and.w	r3, r3, #4
 800ed16:	2b04      	cmp	r3, #4
 800ed18:	d124      	bne.n	800ed64 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed1e:	2b03      	cmp	r3, #3
 800ed20:	d107      	bne.n	800ed32 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	681a      	ldr	r2, [r3, #0]
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ed30:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	691a      	ldr	r2, [r3, #16]
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed3c:	b2d2      	uxtb	r2, r2
 800ed3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed44:	1c5a      	adds	r2, r3, #1
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed4e:	3b01      	subs	r3, #1
 800ed50:	b29a      	uxth	r2, r3
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed5a:	b29b      	uxth	r3, r3
 800ed5c:	3b01      	subs	r3, #1
 800ed5e:	b29a      	uxth	r2, r3
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	f47f aeb6 	bne.w	800eada <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	2220      	movs	r2, #32
 800ed72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	2200      	movs	r2, #0
 800ed7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	2200      	movs	r2, #0
 800ed82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800ed86:	2300      	movs	r3, #0
 800ed88:	e000      	b.n	800ed8c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800ed8a:	2302      	movs	r3, #2
  }
}
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	3728      	adds	r7, #40	@ 0x28
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bd80      	pop	{r7, pc}
 800ed94:	00010004 	.word	0x00010004

0800ed98 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b088      	sub	sp, #32
 800ed9c:	af02      	add	r7, sp, #8
 800ed9e:	60f8      	str	r0, [r7, #12]
 800eda0:	4608      	mov	r0, r1
 800eda2:	4611      	mov	r1, r2
 800eda4:	461a      	mov	r2, r3
 800eda6:	4603      	mov	r3, r0
 800eda8:	817b      	strh	r3, [r7, #10]
 800edaa:	460b      	mov	r3, r1
 800edac:	813b      	strh	r3, [r7, #8]
 800edae:	4613      	mov	r3, r2
 800edb0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	681a      	ldr	r2, [r3, #0]
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800edc0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800edc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edc4:	9300      	str	r3, [sp, #0]
 800edc6:	6a3b      	ldr	r3, [r7, #32]
 800edc8:	2200      	movs	r2, #0
 800edca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800edce:	68f8      	ldr	r0, [r7, #12]
 800edd0:	f000 f960 	bl	800f094 <I2C_WaitOnFlagUntilTimeout>
 800edd4:	4603      	mov	r3, r0
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d00d      	beq.n	800edf6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ede4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ede8:	d103      	bne.n	800edf2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800edf0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800edf2:	2303      	movs	r3, #3
 800edf4:	e05f      	b.n	800eeb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800edf6:	897b      	ldrh	r3, [r7, #10]
 800edf8:	b2db      	uxtb	r3, r3
 800edfa:	461a      	mov	r2, r3
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ee04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ee06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee08:	6a3a      	ldr	r2, [r7, #32]
 800ee0a:	492d      	ldr	r1, [pc, #180]	@ (800eec0 <I2C_RequestMemoryWrite+0x128>)
 800ee0c:	68f8      	ldr	r0, [r7, #12]
 800ee0e:	f000 f9bb 	bl	800f188 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ee12:	4603      	mov	r3, r0
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d001      	beq.n	800ee1c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800ee18:	2301      	movs	r3, #1
 800ee1a:	e04c      	b.n	800eeb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	617b      	str	r3, [r7, #20]
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	695b      	ldr	r3, [r3, #20]
 800ee26:	617b      	str	r3, [r7, #20]
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	699b      	ldr	r3, [r3, #24]
 800ee2e:	617b      	str	r3, [r7, #20]
 800ee30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ee32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ee34:	6a39      	ldr	r1, [r7, #32]
 800ee36:	68f8      	ldr	r0, [r7, #12]
 800ee38:	f000 fa46 	bl	800f2c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d00d      	beq.n	800ee5e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee46:	2b04      	cmp	r3, #4
 800ee48:	d107      	bne.n	800ee5a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	681a      	ldr	r2, [r3, #0]
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ee58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ee5a:	2301      	movs	r3, #1
 800ee5c:	e02b      	b.n	800eeb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ee5e:	88fb      	ldrh	r3, [r7, #6]
 800ee60:	2b01      	cmp	r3, #1
 800ee62:	d105      	bne.n	800ee70 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ee64:	893b      	ldrh	r3, [r7, #8]
 800ee66:	b2da      	uxtb	r2, r3
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	611a      	str	r2, [r3, #16]
 800ee6e:	e021      	b.n	800eeb4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ee70:	893b      	ldrh	r3, [r7, #8]
 800ee72:	0a1b      	lsrs	r3, r3, #8
 800ee74:	b29b      	uxth	r3, r3
 800ee76:	b2da      	uxtb	r2, r3
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ee7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ee80:	6a39      	ldr	r1, [r7, #32]
 800ee82:	68f8      	ldr	r0, [r7, #12]
 800ee84:	f000 fa20 	bl	800f2c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800ee88:	4603      	mov	r3, r0
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d00d      	beq.n	800eeaa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee92:	2b04      	cmp	r3, #4
 800ee94:	d107      	bne.n	800eea6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	681a      	ldr	r2, [r3, #0]
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800eea4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800eea6:	2301      	movs	r3, #1
 800eea8:	e005      	b.n	800eeb6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800eeaa:	893b      	ldrh	r3, [r7, #8]
 800eeac:	b2da      	uxtb	r2, r3
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800eeb4:	2300      	movs	r3, #0
}
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	3718      	adds	r7, #24
 800eeba:	46bd      	mov	sp, r7
 800eebc:	bd80      	pop	{r7, pc}
 800eebe:	bf00      	nop
 800eec0:	00010002 	.word	0x00010002

0800eec4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b088      	sub	sp, #32
 800eec8:	af02      	add	r7, sp, #8
 800eeca:	60f8      	str	r0, [r7, #12]
 800eecc:	4608      	mov	r0, r1
 800eece:	4611      	mov	r1, r2
 800eed0:	461a      	mov	r2, r3
 800eed2:	4603      	mov	r3, r0
 800eed4:	817b      	strh	r3, [r7, #10]
 800eed6:	460b      	mov	r3, r1
 800eed8:	813b      	strh	r3, [r7, #8]
 800eeda:	4613      	mov	r3, r2
 800eedc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	681a      	ldr	r2, [r3, #0]
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800eeec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	681a      	ldr	r2, [r3, #0]
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800eefc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800eefe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef00:	9300      	str	r3, [sp, #0]
 800ef02:	6a3b      	ldr	r3, [r7, #32]
 800ef04:	2200      	movs	r2, #0
 800ef06:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800ef0a:	68f8      	ldr	r0, [r7, #12]
 800ef0c:	f000 f8c2 	bl	800f094 <I2C_WaitOnFlagUntilTimeout>
 800ef10:	4603      	mov	r3, r0
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d00d      	beq.n	800ef32 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ef20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ef24:	d103      	bne.n	800ef2e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ef2c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800ef2e:	2303      	movs	r3, #3
 800ef30:	e0aa      	b.n	800f088 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ef32:	897b      	ldrh	r3, [r7, #10]
 800ef34:	b2db      	uxtb	r3, r3
 800ef36:	461a      	mov	r2, r3
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ef40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ef42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef44:	6a3a      	ldr	r2, [r7, #32]
 800ef46:	4952      	ldr	r1, [pc, #328]	@ (800f090 <I2C_RequestMemoryRead+0x1cc>)
 800ef48:	68f8      	ldr	r0, [r7, #12]
 800ef4a:	f000 f91d 	bl	800f188 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d001      	beq.n	800ef58 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800ef54:	2301      	movs	r3, #1
 800ef56:	e097      	b.n	800f088 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ef58:	2300      	movs	r3, #0
 800ef5a:	617b      	str	r3, [r7, #20]
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	695b      	ldr	r3, [r3, #20]
 800ef62:	617b      	str	r3, [r7, #20]
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	699b      	ldr	r3, [r3, #24]
 800ef6a:	617b      	str	r3, [r7, #20]
 800ef6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ef6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ef70:	6a39      	ldr	r1, [r7, #32]
 800ef72:	68f8      	ldr	r0, [r7, #12]
 800ef74:	f000 f9a8 	bl	800f2c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800ef78:	4603      	mov	r3, r0
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d00d      	beq.n	800ef9a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef82:	2b04      	cmp	r3, #4
 800ef84:	d107      	bne.n	800ef96 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	681a      	ldr	r2, [r3, #0]
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ef94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ef96:	2301      	movs	r3, #1
 800ef98:	e076      	b.n	800f088 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ef9a:	88fb      	ldrh	r3, [r7, #6]
 800ef9c:	2b01      	cmp	r3, #1
 800ef9e:	d105      	bne.n	800efac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800efa0:	893b      	ldrh	r3, [r7, #8]
 800efa2:	b2da      	uxtb	r2, r3
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	611a      	str	r2, [r3, #16]
 800efaa:	e021      	b.n	800eff0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800efac:	893b      	ldrh	r3, [r7, #8]
 800efae:	0a1b      	lsrs	r3, r3, #8
 800efb0:	b29b      	uxth	r3, r3
 800efb2:	b2da      	uxtb	r2, r3
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800efba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800efbc:	6a39      	ldr	r1, [r7, #32]
 800efbe:	68f8      	ldr	r0, [r7, #12]
 800efc0:	f000 f982 	bl	800f2c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800efc4:	4603      	mov	r3, r0
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d00d      	beq.n	800efe6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efce:	2b04      	cmp	r3, #4
 800efd0:	d107      	bne.n	800efe2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	681a      	ldr	r2, [r3, #0]
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800efe0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800efe2:	2301      	movs	r3, #1
 800efe4:	e050      	b.n	800f088 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800efe6:	893b      	ldrh	r3, [r7, #8]
 800efe8:	b2da      	uxtb	r2, r3
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800eff0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eff2:	6a39      	ldr	r1, [r7, #32]
 800eff4:	68f8      	ldr	r0, [r7, #12]
 800eff6:	f000 f967 	bl	800f2c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800effa:	4603      	mov	r3, r0
 800effc:	2b00      	cmp	r3, #0
 800effe:	d00d      	beq.n	800f01c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f004:	2b04      	cmp	r3, #4
 800f006:	d107      	bne.n	800f018 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	681a      	ldr	r2, [r3, #0]
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f016:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800f018:	2301      	movs	r3, #1
 800f01a:	e035      	b.n	800f088 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	681a      	ldr	r2, [r3, #0]
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f02a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800f02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f02e:	9300      	str	r3, [sp, #0]
 800f030:	6a3b      	ldr	r3, [r7, #32]
 800f032:	2200      	movs	r2, #0
 800f034:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800f038:	68f8      	ldr	r0, [r7, #12]
 800f03a:	f000 f82b 	bl	800f094 <I2C_WaitOnFlagUntilTimeout>
 800f03e:	4603      	mov	r3, r0
 800f040:	2b00      	cmp	r3, #0
 800f042:	d00d      	beq.n	800f060 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f04e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f052:	d103      	bne.n	800f05c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f05a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800f05c:	2303      	movs	r3, #3
 800f05e:	e013      	b.n	800f088 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800f060:	897b      	ldrh	r3, [r7, #10]
 800f062:	b2db      	uxtb	r3, r3
 800f064:	f043 0301 	orr.w	r3, r3, #1
 800f068:	b2da      	uxtb	r2, r3
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800f070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f072:	6a3a      	ldr	r2, [r7, #32]
 800f074:	4906      	ldr	r1, [pc, #24]	@ (800f090 <I2C_RequestMemoryRead+0x1cc>)
 800f076:	68f8      	ldr	r0, [r7, #12]
 800f078:	f000 f886 	bl	800f188 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f07c:	4603      	mov	r3, r0
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d001      	beq.n	800f086 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800f082:	2301      	movs	r3, #1
 800f084:	e000      	b.n	800f088 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800f086:	2300      	movs	r3, #0
}
 800f088:	4618      	mov	r0, r3
 800f08a:	3718      	adds	r7, #24
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}
 800f090:	00010002 	.word	0x00010002

0800f094 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b084      	sub	sp, #16
 800f098:	af00      	add	r7, sp, #0
 800f09a:	60f8      	str	r0, [r7, #12]
 800f09c:	60b9      	str	r1, [r7, #8]
 800f09e:	603b      	str	r3, [r7, #0]
 800f0a0:	4613      	mov	r3, r2
 800f0a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f0a4:	e048      	b.n	800f138 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0ac:	d044      	beq.n	800f138 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f0ae:	f7fe fbbf 	bl	800d830 <HAL_GetTick>
 800f0b2:	4602      	mov	r2, r0
 800f0b4:	69bb      	ldr	r3, [r7, #24]
 800f0b6:	1ad3      	subs	r3, r2, r3
 800f0b8:	683a      	ldr	r2, [r7, #0]
 800f0ba:	429a      	cmp	r2, r3
 800f0bc:	d302      	bcc.n	800f0c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d139      	bne.n	800f138 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800f0c4:	68bb      	ldr	r3, [r7, #8]
 800f0c6:	0c1b      	lsrs	r3, r3, #16
 800f0c8:	b2db      	uxtb	r3, r3
 800f0ca:	2b01      	cmp	r3, #1
 800f0cc:	d10d      	bne.n	800f0ea <I2C_WaitOnFlagUntilTimeout+0x56>
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	695b      	ldr	r3, [r3, #20]
 800f0d4:	43da      	mvns	r2, r3
 800f0d6:	68bb      	ldr	r3, [r7, #8]
 800f0d8:	4013      	ands	r3, r2
 800f0da:	b29b      	uxth	r3, r3
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	bf0c      	ite	eq
 800f0e0:	2301      	moveq	r3, #1
 800f0e2:	2300      	movne	r3, #0
 800f0e4:	b2db      	uxtb	r3, r3
 800f0e6:	461a      	mov	r2, r3
 800f0e8:	e00c      	b.n	800f104 <I2C_WaitOnFlagUntilTimeout+0x70>
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	699b      	ldr	r3, [r3, #24]
 800f0f0:	43da      	mvns	r2, r3
 800f0f2:	68bb      	ldr	r3, [r7, #8]
 800f0f4:	4013      	ands	r3, r2
 800f0f6:	b29b      	uxth	r3, r3
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	bf0c      	ite	eq
 800f0fc:	2301      	moveq	r3, #1
 800f0fe:	2300      	movne	r3, #0
 800f100:	b2db      	uxtb	r3, r3
 800f102:	461a      	mov	r2, r3
 800f104:	79fb      	ldrb	r3, [r7, #7]
 800f106:	429a      	cmp	r2, r3
 800f108:	d116      	bne.n	800f138 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	2200      	movs	r2, #0
 800f10e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	2220      	movs	r2, #32
 800f114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	2200      	movs	r2, #0
 800f11c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f124:	f043 0220 	orr.w	r2, r3, #32
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	2200      	movs	r2, #0
 800f130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800f134:	2301      	movs	r3, #1
 800f136:	e023      	b.n	800f180 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f138:	68bb      	ldr	r3, [r7, #8]
 800f13a:	0c1b      	lsrs	r3, r3, #16
 800f13c:	b2db      	uxtb	r3, r3
 800f13e:	2b01      	cmp	r3, #1
 800f140:	d10d      	bne.n	800f15e <I2C_WaitOnFlagUntilTimeout+0xca>
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	695b      	ldr	r3, [r3, #20]
 800f148:	43da      	mvns	r2, r3
 800f14a:	68bb      	ldr	r3, [r7, #8]
 800f14c:	4013      	ands	r3, r2
 800f14e:	b29b      	uxth	r3, r3
 800f150:	2b00      	cmp	r3, #0
 800f152:	bf0c      	ite	eq
 800f154:	2301      	moveq	r3, #1
 800f156:	2300      	movne	r3, #0
 800f158:	b2db      	uxtb	r3, r3
 800f15a:	461a      	mov	r2, r3
 800f15c:	e00c      	b.n	800f178 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	699b      	ldr	r3, [r3, #24]
 800f164:	43da      	mvns	r2, r3
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	4013      	ands	r3, r2
 800f16a:	b29b      	uxth	r3, r3
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	bf0c      	ite	eq
 800f170:	2301      	moveq	r3, #1
 800f172:	2300      	movne	r3, #0
 800f174:	b2db      	uxtb	r3, r3
 800f176:	461a      	mov	r2, r3
 800f178:	79fb      	ldrb	r3, [r7, #7]
 800f17a:	429a      	cmp	r2, r3
 800f17c:	d093      	beq.n	800f0a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f17e:	2300      	movs	r3, #0
}
 800f180:	4618      	mov	r0, r3
 800f182:	3710      	adds	r7, #16
 800f184:	46bd      	mov	sp, r7
 800f186:	bd80      	pop	{r7, pc}

0800f188 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b084      	sub	sp, #16
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	60f8      	str	r0, [r7, #12]
 800f190:	60b9      	str	r1, [r7, #8]
 800f192:	607a      	str	r2, [r7, #4]
 800f194:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800f196:	e071      	b.n	800f27c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	695b      	ldr	r3, [r3, #20]
 800f19e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f1a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f1a6:	d123      	bne.n	800f1f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	681a      	ldr	r2, [r3, #0]
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f1b6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800f1c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	2220      	movs	r2, #32
 800f1cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f1dc:	f043 0204 	orr.w	r2, r3, #4
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800f1ec:	2301      	movs	r3, #1
 800f1ee:	e067      	b.n	800f2c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1f6:	d041      	beq.n	800f27c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f1f8:	f7fe fb1a 	bl	800d830 <HAL_GetTick>
 800f1fc:	4602      	mov	r2, r0
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	1ad3      	subs	r3, r2, r3
 800f202:	687a      	ldr	r2, [r7, #4]
 800f204:	429a      	cmp	r2, r3
 800f206:	d302      	bcc.n	800f20e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d136      	bne.n	800f27c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800f20e:	68bb      	ldr	r3, [r7, #8]
 800f210:	0c1b      	lsrs	r3, r3, #16
 800f212:	b2db      	uxtb	r3, r3
 800f214:	2b01      	cmp	r3, #1
 800f216:	d10c      	bne.n	800f232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	695b      	ldr	r3, [r3, #20]
 800f21e:	43da      	mvns	r2, r3
 800f220:	68bb      	ldr	r3, [r7, #8]
 800f222:	4013      	ands	r3, r2
 800f224:	b29b      	uxth	r3, r3
 800f226:	2b00      	cmp	r3, #0
 800f228:	bf14      	ite	ne
 800f22a:	2301      	movne	r3, #1
 800f22c:	2300      	moveq	r3, #0
 800f22e:	b2db      	uxtb	r3, r3
 800f230:	e00b      	b.n	800f24a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	699b      	ldr	r3, [r3, #24]
 800f238:	43da      	mvns	r2, r3
 800f23a:	68bb      	ldr	r3, [r7, #8]
 800f23c:	4013      	ands	r3, r2
 800f23e:	b29b      	uxth	r3, r3
 800f240:	2b00      	cmp	r3, #0
 800f242:	bf14      	ite	ne
 800f244:	2301      	movne	r3, #1
 800f246:	2300      	moveq	r3, #0
 800f248:	b2db      	uxtb	r3, r3
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d016      	beq.n	800f27c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	2200      	movs	r2, #0
 800f252:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	2220      	movs	r2, #32
 800f258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	2200      	movs	r2, #0
 800f260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f268:	f043 0220 	orr.w	r2, r3, #32
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	2200      	movs	r2, #0
 800f274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800f278:	2301      	movs	r3, #1
 800f27a:	e021      	b.n	800f2c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	0c1b      	lsrs	r3, r3, #16
 800f280:	b2db      	uxtb	r3, r3
 800f282:	2b01      	cmp	r3, #1
 800f284:	d10c      	bne.n	800f2a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	695b      	ldr	r3, [r3, #20]
 800f28c:	43da      	mvns	r2, r3
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	4013      	ands	r3, r2
 800f292:	b29b      	uxth	r3, r3
 800f294:	2b00      	cmp	r3, #0
 800f296:	bf14      	ite	ne
 800f298:	2301      	movne	r3, #1
 800f29a:	2300      	moveq	r3, #0
 800f29c:	b2db      	uxtb	r3, r3
 800f29e:	e00b      	b.n	800f2b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	699b      	ldr	r3, [r3, #24]
 800f2a6:	43da      	mvns	r2, r3
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	4013      	ands	r3, r2
 800f2ac:	b29b      	uxth	r3, r3
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	bf14      	ite	ne
 800f2b2:	2301      	movne	r3, #1
 800f2b4:	2300      	moveq	r3, #0
 800f2b6:	b2db      	uxtb	r3, r3
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	f47f af6d 	bne.w	800f198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800f2be:	2300      	movs	r3, #0
}
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	3710      	adds	r7, #16
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd80      	pop	{r7, pc}

0800f2c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b084      	sub	sp, #16
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	60f8      	str	r0, [r7, #12]
 800f2d0:	60b9      	str	r1, [r7, #8]
 800f2d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f2d4:	e034      	b.n	800f340 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800f2d6:	68f8      	ldr	r0, [r7, #12]
 800f2d8:	f000 f8e3 	bl	800f4a2 <I2C_IsAcknowledgeFailed>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d001      	beq.n	800f2e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800f2e2:	2301      	movs	r3, #1
 800f2e4:	e034      	b.n	800f350 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f2e6:	68bb      	ldr	r3, [r7, #8]
 800f2e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2ec:	d028      	beq.n	800f340 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f2ee:	f7fe fa9f 	bl	800d830 <HAL_GetTick>
 800f2f2:	4602      	mov	r2, r0
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	1ad3      	subs	r3, r2, r3
 800f2f8:	68ba      	ldr	r2, [r7, #8]
 800f2fa:	429a      	cmp	r2, r3
 800f2fc:	d302      	bcc.n	800f304 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800f2fe:	68bb      	ldr	r3, [r7, #8]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d11d      	bne.n	800f340 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	695b      	ldr	r3, [r3, #20]
 800f30a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f30e:	2b80      	cmp	r3, #128	@ 0x80
 800f310:	d016      	beq.n	800f340 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	2200      	movs	r2, #0
 800f316:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	2220      	movs	r2, #32
 800f31c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	2200      	movs	r2, #0
 800f324:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f32c:	f043 0220 	orr.w	r2, r3, #32
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	2200      	movs	r2, #0
 800f338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800f33c:	2301      	movs	r3, #1
 800f33e:	e007      	b.n	800f350 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	695b      	ldr	r3, [r3, #20]
 800f346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f34a:	2b80      	cmp	r3, #128	@ 0x80
 800f34c:	d1c3      	bne.n	800f2d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800f34e:	2300      	movs	r3, #0
}
 800f350:	4618      	mov	r0, r3
 800f352:	3710      	adds	r7, #16
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}

0800f358 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b084      	sub	sp, #16
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	60f8      	str	r0, [r7, #12]
 800f360:	60b9      	str	r1, [r7, #8]
 800f362:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800f364:	e034      	b.n	800f3d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800f366:	68f8      	ldr	r0, [r7, #12]
 800f368:	f000 f89b 	bl	800f4a2 <I2C_IsAcknowledgeFailed>
 800f36c:	4603      	mov	r3, r0
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d001      	beq.n	800f376 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800f372:	2301      	movs	r3, #1
 800f374:	e034      	b.n	800f3e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f37c:	d028      	beq.n	800f3d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f37e:	f7fe fa57 	bl	800d830 <HAL_GetTick>
 800f382:	4602      	mov	r2, r0
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	1ad3      	subs	r3, r2, r3
 800f388:	68ba      	ldr	r2, [r7, #8]
 800f38a:	429a      	cmp	r2, r3
 800f38c:	d302      	bcc.n	800f394 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800f38e:	68bb      	ldr	r3, [r7, #8]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d11d      	bne.n	800f3d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	695b      	ldr	r3, [r3, #20]
 800f39a:	f003 0304 	and.w	r3, r3, #4
 800f39e:	2b04      	cmp	r3, #4
 800f3a0:	d016      	beq.n	800f3d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	2220      	movs	r2, #32
 800f3ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f3bc:	f043 0220 	orr.w	r2, r3, #32
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800f3cc:	2301      	movs	r3, #1
 800f3ce:	e007      	b.n	800f3e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	695b      	ldr	r3, [r3, #20]
 800f3d6:	f003 0304 	and.w	r3, r3, #4
 800f3da:	2b04      	cmp	r3, #4
 800f3dc:	d1c3      	bne.n	800f366 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800f3de:	2300      	movs	r3, #0
}
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	3710      	adds	r7, #16
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd80      	pop	{r7, pc}

0800f3e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b084      	sub	sp, #16
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	60f8      	str	r0, [r7, #12]
 800f3f0:	60b9      	str	r1, [r7, #8]
 800f3f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800f3f4:	e049      	b.n	800f48a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	695b      	ldr	r3, [r3, #20]
 800f3fc:	f003 0310 	and.w	r3, r3, #16
 800f400:	2b10      	cmp	r3, #16
 800f402:	d119      	bne.n	800f438 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	f06f 0210 	mvn.w	r2, #16
 800f40c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	2200      	movs	r2, #0
 800f412:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	2220      	movs	r2, #32
 800f418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	2200      	movs	r2, #0
 800f420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	2200      	movs	r2, #0
 800f430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800f434:	2301      	movs	r3, #1
 800f436:	e030      	b.n	800f49a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f438:	f7fe f9fa 	bl	800d830 <HAL_GetTick>
 800f43c:	4602      	mov	r2, r0
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	1ad3      	subs	r3, r2, r3
 800f442:	68ba      	ldr	r2, [r7, #8]
 800f444:	429a      	cmp	r2, r3
 800f446:	d302      	bcc.n	800f44e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800f448:	68bb      	ldr	r3, [r7, #8]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d11d      	bne.n	800f48a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	695b      	ldr	r3, [r3, #20]
 800f454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f458:	2b40      	cmp	r3, #64	@ 0x40
 800f45a:	d016      	beq.n	800f48a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	2200      	movs	r2, #0
 800f460:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	2220      	movs	r2, #32
 800f466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	2200      	movs	r2, #0
 800f46e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f476:	f043 0220 	orr.w	r2, r3, #32
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	2200      	movs	r2, #0
 800f482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800f486:	2301      	movs	r3, #1
 800f488:	e007      	b.n	800f49a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	695b      	ldr	r3, [r3, #20]
 800f490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f494:	2b40      	cmp	r3, #64	@ 0x40
 800f496:	d1ae      	bne.n	800f3f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800f498:	2300      	movs	r3, #0
}
 800f49a:	4618      	mov	r0, r3
 800f49c:	3710      	adds	r7, #16
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bd80      	pop	{r7, pc}

0800f4a2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800f4a2:	b480      	push	{r7}
 800f4a4:	b083      	sub	sp, #12
 800f4a6:	af00      	add	r7, sp, #0
 800f4a8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	695b      	ldr	r3, [r3, #20]
 800f4b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f4b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f4b8:	d11b      	bne.n	800f4f2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800f4c2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	2220      	movs	r2, #32
 800f4ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	2200      	movs	r2, #0
 800f4d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f4de:	f043 0204 	orr.w	r2, r3, #4
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800f4ee:	2301      	movs	r3, #1
 800f4f0:	e000      	b.n	800f4f4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800f4f2:	2300      	movs	r3, #0
}
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	370c      	adds	r7, #12
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fe:	4770      	bx	lr

0800f500 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b086      	sub	sp, #24
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d101      	bne.n	800f512 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f50e:	2301      	movs	r3, #1
 800f510:	e267      	b.n	800f9e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	f003 0301 	and.w	r3, r3, #1
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d075      	beq.n	800f60a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800f51e:	4b88      	ldr	r3, [pc, #544]	@ (800f740 <HAL_RCC_OscConfig+0x240>)
 800f520:	689b      	ldr	r3, [r3, #8]
 800f522:	f003 030c 	and.w	r3, r3, #12
 800f526:	2b04      	cmp	r3, #4
 800f528:	d00c      	beq.n	800f544 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f52a:	4b85      	ldr	r3, [pc, #532]	@ (800f740 <HAL_RCC_OscConfig+0x240>)
 800f52c:	689b      	ldr	r3, [r3, #8]
 800f52e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800f532:	2b08      	cmp	r3, #8
 800f534:	d112      	bne.n	800f55c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f536:	4b82      	ldr	r3, [pc, #520]	@ (800f740 <HAL_RCC_OscConfig+0x240>)
 800f538:	685b      	ldr	r3, [r3, #4]
 800f53a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f53e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f542:	d10b      	bne.n	800f55c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f544:	4b7e      	ldr	r3, [pc, #504]	@ (800f740 <HAL_RCC_OscConfig+0x240>)
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d05b      	beq.n	800f608 <HAL_RCC_OscConfig+0x108>
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	685b      	ldr	r3, [r3, #4]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d157      	bne.n	800f608 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800f558:	2301      	movs	r3, #1
 800f55a:	e242      	b.n	800f9e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	685b      	ldr	r3, [r3, #4]
 800f560:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f564:	d106      	bne.n	800f574 <HAL_RCC_OscConfig+0x74>
 800f566:	4b76      	ldr	r3, [pc, #472]	@ (800f740 <HAL_RCC_OscConfig+0x240>)
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	4a75      	ldr	r2, [pc, #468]	@ (800f740 <HAL_RCC_OscConfig+0x240>)
 800f56c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f570:	6013      	str	r3, [r2, #0]
 800f572:	e01d      	b.n	800f5b0 <HAL_RCC_OscConfig+0xb0>
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	685b      	ldr	r3, [r3, #4]
 800f578:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f57c:	d10c      	bne.n	800f598 <HAL_RCC_OscConfig+0x98>
 800f57e:	4b70      	ldr	r3, [pc, #448]	@ (800f740 <HAL_RCC_OscConfig+0x240>)
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	4a6f      	ldr	r2, [pc, #444]	@ (800f740 <HAL_RCC_OscConfig+0x240>)
 800f584:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800f588:	6013      	str	r3, [r2, #0]
 800f58a:	4b6d      	ldr	r3, [pc, #436]	@ (800f740 <HAL_RCC_OscConfig+0x240>)
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	4a6c      	ldr	r2, [pc, #432]	@ (800f740 <HAL_RCC_OscConfig+0x240>)
 800f590:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f594:	6013      	str	r3, [r2, #0]
 800f596:	e00b      	b.n	800f5b0 <HAL_RCC_OscConfig+0xb0>
 800f598:	4b69      	ldr	r3, [pc, #420]	@ (800f740 <HAL_RCC_OscConfig+0x240>)
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	4a68      	ldr	r2, [pc, #416]	@ (800f740 <HAL_RCC_OscConfig+0x240>)
 800f59e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f5a2:	6013      	str	r3, [r2, #0]
 800f5a4:	4b66      	ldr	r3, [pc, #408]	@ (800f740 <HAL_RCC_OscConfig+0x240>)
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	4a65      	ldr	r2, [pc, #404]	@ (800f740 <HAL_RCC_OscConfig+0x240>)
 800f5aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f5ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	685b      	ldr	r3, [r3, #4]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d013      	beq.n	800f5e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f5b8:	f7fe f93a 	bl	800d830 <HAL_GetTick>
 800f5bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f5be:	e008      	b.n	800f5d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f5c0:	f7fe f936 	bl	800d830 <HAL_GetTick>
 800f5c4:	4602      	mov	r2, r0
 800f5c6:	693b      	ldr	r3, [r7, #16]
 800f5c8:	1ad3      	subs	r3, r2, r3
 800f5ca:	2b64      	cmp	r3, #100	@ 0x64
 800f5cc:	d901      	bls.n	800f5d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800f5ce:	2303      	movs	r3, #3
 800f5d0:	e207      	b.n	800f9e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f5d2:	4b5b      	ldr	r3, [pc, #364]	@ (800f740 <HAL_RCC_OscConfig+0x240>)
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d0f0      	beq.n	800f5c0 <HAL_RCC_OscConfig+0xc0>
 800f5de:	e014      	b.n	800f60a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f5e0:	f7fe f926 	bl	800d830 <HAL_GetTick>
 800f5e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f5e6:	e008      	b.n	800f5fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f5e8:	f7fe f922 	bl	800d830 <HAL_GetTick>
 800f5ec:	4602      	mov	r2, r0
 800f5ee:	693b      	ldr	r3, [r7, #16]
 800f5f0:	1ad3      	subs	r3, r2, r3
 800f5f2:	2b64      	cmp	r3, #100	@ 0x64
 800f5f4:	d901      	bls.n	800f5fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800f5f6:	2303      	movs	r3, #3
 800f5f8:	e1f3      	b.n	800f9e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f5fa:	4b51      	ldr	r3, [pc, #324]	@ (800f740 <HAL_RCC_OscConfig+0x240>)
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f602:	2b00      	cmp	r3, #0
 800f604:	d1f0      	bne.n	800f5e8 <HAL_RCC_OscConfig+0xe8>
 800f606:	e000      	b.n	800f60a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	f003 0302 	and.w	r3, r3, #2
 800f612:	2b00      	cmp	r3, #0
 800f614:	d063      	beq.n	800f6de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800f616:	4b4a      	ldr	r3, [pc, #296]	@ (800f740 <HAL_RCC_OscConfig+0x240>)
 800f618:	689b      	ldr	r3, [r3, #8]
 800f61a:	f003 030c 	and.w	r3, r3, #12
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d00b      	beq.n	800f63a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f622:	4b47      	ldr	r3, [pc, #284]	@ (800f740 <HAL_RCC_OscConfig+0x240>)
 800f624:	689b      	ldr	r3, [r3, #8]
 800f626:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800f62a:	2b08      	cmp	r3, #8
 800f62c:	d11c      	bne.n	800f668 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f62e:	4b44      	ldr	r3, [pc, #272]	@ (800f740 <HAL_RCC_OscConfig+0x240>)
 800f630:	685b      	ldr	r3, [r3, #4]
 800f632:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f636:	2b00      	cmp	r3, #0
 800f638:	d116      	bne.n	800f668 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f63a:	4b41      	ldr	r3, [pc, #260]	@ (800f740 <HAL_RCC_OscConfig+0x240>)
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	f003 0302 	and.w	r3, r3, #2
 800f642:	2b00      	cmp	r3, #0
 800f644:	d005      	beq.n	800f652 <HAL_RCC_OscConfig+0x152>
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	68db      	ldr	r3, [r3, #12]
 800f64a:	2b01      	cmp	r3, #1
 800f64c:	d001      	beq.n	800f652 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800f64e:	2301      	movs	r3, #1
 800f650:	e1c7      	b.n	800f9e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f652:	4b3b      	ldr	r3, [pc, #236]	@ (800f740 <HAL_RCC_OscConfig+0x240>)
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	691b      	ldr	r3, [r3, #16]
 800f65e:	00db      	lsls	r3, r3, #3
 800f660:	4937      	ldr	r1, [pc, #220]	@ (800f740 <HAL_RCC_OscConfig+0x240>)
 800f662:	4313      	orrs	r3, r2
 800f664:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f666:	e03a      	b.n	800f6de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	68db      	ldr	r3, [r3, #12]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d020      	beq.n	800f6b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f670:	4b34      	ldr	r3, [pc, #208]	@ (800f744 <HAL_RCC_OscConfig+0x244>)
 800f672:	2201      	movs	r2, #1
 800f674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f676:	f7fe f8db 	bl	800d830 <HAL_GetTick>
 800f67a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f67c:	e008      	b.n	800f690 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f67e:	f7fe f8d7 	bl	800d830 <HAL_GetTick>
 800f682:	4602      	mov	r2, r0
 800f684:	693b      	ldr	r3, [r7, #16]
 800f686:	1ad3      	subs	r3, r2, r3
 800f688:	2b02      	cmp	r3, #2
 800f68a:	d901      	bls.n	800f690 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800f68c:	2303      	movs	r3, #3
 800f68e:	e1a8      	b.n	800f9e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f690:	4b2b      	ldr	r3, [pc, #172]	@ (800f740 <HAL_RCC_OscConfig+0x240>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	f003 0302 	and.w	r3, r3, #2
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d0f0      	beq.n	800f67e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f69c:	4b28      	ldr	r3, [pc, #160]	@ (800f740 <HAL_RCC_OscConfig+0x240>)
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	691b      	ldr	r3, [r3, #16]
 800f6a8:	00db      	lsls	r3, r3, #3
 800f6aa:	4925      	ldr	r1, [pc, #148]	@ (800f740 <HAL_RCC_OscConfig+0x240>)
 800f6ac:	4313      	orrs	r3, r2
 800f6ae:	600b      	str	r3, [r1, #0]
 800f6b0:	e015      	b.n	800f6de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f6b2:	4b24      	ldr	r3, [pc, #144]	@ (800f744 <HAL_RCC_OscConfig+0x244>)
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f6b8:	f7fe f8ba 	bl	800d830 <HAL_GetTick>
 800f6bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f6be:	e008      	b.n	800f6d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f6c0:	f7fe f8b6 	bl	800d830 <HAL_GetTick>
 800f6c4:	4602      	mov	r2, r0
 800f6c6:	693b      	ldr	r3, [r7, #16]
 800f6c8:	1ad3      	subs	r3, r2, r3
 800f6ca:	2b02      	cmp	r3, #2
 800f6cc:	d901      	bls.n	800f6d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800f6ce:	2303      	movs	r3, #3
 800f6d0:	e187      	b.n	800f9e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f6d2:	4b1b      	ldr	r3, [pc, #108]	@ (800f740 <HAL_RCC_OscConfig+0x240>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	f003 0302 	and.w	r3, r3, #2
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d1f0      	bne.n	800f6c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	f003 0308 	and.w	r3, r3, #8
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d036      	beq.n	800f758 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	695b      	ldr	r3, [r3, #20]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d016      	beq.n	800f720 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f6f2:	4b15      	ldr	r3, [pc, #84]	@ (800f748 <HAL_RCC_OscConfig+0x248>)
 800f6f4:	2201      	movs	r2, #1
 800f6f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f6f8:	f7fe f89a 	bl	800d830 <HAL_GetTick>
 800f6fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f6fe:	e008      	b.n	800f712 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f700:	f7fe f896 	bl	800d830 <HAL_GetTick>
 800f704:	4602      	mov	r2, r0
 800f706:	693b      	ldr	r3, [r7, #16]
 800f708:	1ad3      	subs	r3, r2, r3
 800f70a:	2b02      	cmp	r3, #2
 800f70c:	d901      	bls.n	800f712 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800f70e:	2303      	movs	r3, #3
 800f710:	e167      	b.n	800f9e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f712:	4b0b      	ldr	r3, [pc, #44]	@ (800f740 <HAL_RCC_OscConfig+0x240>)
 800f714:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f716:	f003 0302 	and.w	r3, r3, #2
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d0f0      	beq.n	800f700 <HAL_RCC_OscConfig+0x200>
 800f71e:	e01b      	b.n	800f758 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f720:	4b09      	ldr	r3, [pc, #36]	@ (800f748 <HAL_RCC_OscConfig+0x248>)
 800f722:	2200      	movs	r2, #0
 800f724:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f726:	f7fe f883 	bl	800d830 <HAL_GetTick>
 800f72a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f72c:	e00e      	b.n	800f74c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f72e:	f7fe f87f 	bl	800d830 <HAL_GetTick>
 800f732:	4602      	mov	r2, r0
 800f734:	693b      	ldr	r3, [r7, #16]
 800f736:	1ad3      	subs	r3, r2, r3
 800f738:	2b02      	cmp	r3, #2
 800f73a:	d907      	bls.n	800f74c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800f73c:	2303      	movs	r3, #3
 800f73e:	e150      	b.n	800f9e2 <HAL_RCC_OscConfig+0x4e2>
 800f740:	40023800 	.word	0x40023800
 800f744:	42470000 	.word	0x42470000
 800f748:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f74c:	4b88      	ldr	r3, [pc, #544]	@ (800f970 <HAL_RCC_OscConfig+0x470>)
 800f74e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f750:	f003 0302 	and.w	r3, r3, #2
 800f754:	2b00      	cmp	r3, #0
 800f756:	d1ea      	bne.n	800f72e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	f003 0304 	and.w	r3, r3, #4
 800f760:	2b00      	cmp	r3, #0
 800f762:	f000 8097 	beq.w	800f894 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f766:	2300      	movs	r3, #0
 800f768:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f76a:	4b81      	ldr	r3, [pc, #516]	@ (800f970 <HAL_RCC_OscConfig+0x470>)
 800f76c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f76e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f772:	2b00      	cmp	r3, #0
 800f774:	d10f      	bne.n	800f796 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f776:	2300      	movs	r3, #0
 800f778:	60bb      	str	r3, [r7, #8]
 800f77a:	4b7d      	ldr	r3, [pc, #500]	@ (800f970 <HAL_RCC_OscConfig+0x470>)
 800f77c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f77e:	4a7c      	ldr	r2, [pc, #496]	@ (800f970 <HAL_RCC_OscConfig+0x470>)
 800f780:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f784:	6413      	str	r3, [r2, #64]	@ 0x40
 800f786:	4b7a      	ldr	r3, [pc, #488]	@ (800f970 <HAL_RCC_OscConfig+0x470>)
 800f788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f78a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f78e:	60bb      	str	r3, [r7, #8]
 800f790:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f792:	2301      	movs	r3, #1
 800f794:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f796:	4b77      	ldr	r3, [pc, #476]	@ (800f974 <HAL_RCC_OscConfig+0x474>)
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d118      	bne.n	800f7d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f7a2:	4b74      	ldr	r3, [pc, #464]	@ (800f974 <HAL_RCC_OscConfig+0x474>)
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	4a73      	ldr	r2, [pc, #460]	@ (800f974 <HAL_RCC_OscConfig+0x474>)
 800f7a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f7ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f7ae:	f7fe f83f 	bl	800d830 <HAL_GetTick>
 800f7b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f7b4:	e008      	b.n	800f7c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f7b6:	f7fe f83b 	bl	800d830 <HAL_GetTick>
 800f7ba:	4602      	mov	r2, r0
 800f7bc:	693b      	ldr	r3, [r7, #16]
 800f7be:	1ad3      	subs	r3, r2, r3
 800f7c0:	2b02      	cmp	r3, #2
 800f7c2:	d901      	bls.n	800f7c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800f7c4:	2303      	movs	r3, #3
 800f7c6:	e10c      	b.n	800f9e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f7c8:	4b6a      	ldr	r3, [pc, #424]	@ (800f974 <HAL_RCC_OscConfig+0x474>)
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d0f0      	beq.n	800f7b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	689b      	ldr	r3, [r3, #8]
 800f7d8:	2b01      	cmp	r3, #1
 800f7da:	d106      	bne.n	800f7ea <HAL_RCC_OscConfig+0x2ea>
 800f7dc:	4b64      	ldr	r3, [pc, #400]	@ (800f970 <HAL_RCC_OscConfig+0x470>)
 800f7de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f7e0:	4a63      	ldr	r2, [pc, #396]	@ (800f970 <HAL_RCC_OscConfig+0x470>)
 800f7e2:	f043 0301 	orr.w	r3, r3, #1
 800f7e6:	6713      	str	r3, [r2, #112]	@ 0x70
 800f7e8:	e01c      	b.n	800f824 <HAL_RCC_OscConfig+0x324>
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	689b      	ldr	r3, [r3, #8]
 800f7ee:	2b05      	cmp	r3, #5
 800f7f0:	d10c      	bne.n	800f80c <HAL_RCC_OscConfig+0x30c>
 800f7f2:	4b5f      	ldr	r3, [pc, #380]	@ (800f970 <HAL_RCC_OscConfig+0x470>)
 800f7f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f7f6:	4a5e      	ldr	r2, [pc, #376]	@ (800f970 <HAL_RCC_OscConfig+0x470>)
 800f7f8:	f043 0304 	orr.w	r3, r3, #4
 800f7fc:	6713      	str	r3, [r2, #112]	@ 0x70
 800f7fe:	4b5c      	ldr	r3, [pc, #368]	@ (800f970 <HAL_RCC_OscConfig+0x470>)
 800f800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f802:	4a5b      	ldr	r2, [pc, #364]	@ (800f970 <HAL_RCC_OscConfig+0x470>)
 800f804:	f043 0301 	orr.w	r3, r3, #1
 800f808:	6713      	str	r3, [r2, #112]	@ 0x70
 800f80a:	e00b      	b.n	800f824 <HAL_RCC_OscConfig+0x324>
 800f80c:	4b58      	ldr	r3, [pc, #352]	@ (800f970 <HAL_RCC_OscConfig+0x470>)
 800f80e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f810:	4a57      	ldr	r2, [pc, #348]	@ (800f970 <HAL_RCC_OscConfig+0x470>)
 800f812:	f023 0301 	bic.w	r3, r3, #1
 800f816:	6713      	str	r3, [r2, #112]	@ 0x70
 800f818:	4b55      	ldr	r3, [pc, #340]	@ (800f970 <HAL_RCC_OscConfig+0x470>)
 800f81a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f81c:	4a54      	ldr	r2, [pc, #336]	@ (800f970 <HAL_RCC_OscConfig+0x470>)
 800f81e:	f023 0304 	bic.w	r3, r3, #4
 800f822:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	689b      	ldr	r3, [r3, #8]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d015      	beq.n	800f858 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f82c:	f7fe f800 	bl	800d830 <HAL_GetTick>
 800f830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f832:	e00a      	b.n	800f84a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f834:	f7fd fffc 	bl	800d830 <HAL_GetTick>
 800f838:	4602      	mov	r2, r0
 800f83a:	693b      	ldr	r3, [r7, #16]
 800f83c:	1ad3      	subs	r3, r2, r3
 800f83e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f842:	4293      	cmp	r3, r2
 800f844:	d901      	bls.n	800f84a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800f846:	2303      	movs	r3, #3
 800f848:	e0cb      	b.n	800f9e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f84a:	4b49      	ldr	r3, [pc, #292]	@ (800f970 <HAL_RCC_OscConfig+0x470>)
 800f84c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f84e:	f003 0302 	and.w	r3, r3, #2
 800f852:	2b00      	cmp	r3, #0
 800f854:	d0ee      	beq.n	800f834 <HAL_RCC_OscConfig+0x334>
 800f856:	e014      	b.n	800f882 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f858:	f7fd ffea 	bl	800d830 <HAL_GetTick>
 800f85c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f85e:	e00a      	b.n	800f876 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f860:	f7fd ffe6 	bl	800d830 <HAL_GetTick>
 800f864:	4602      	mov	r2, r0
 800f866:	693b      	ldr	r3, [r7, #16]
 800f868:	1ad3      	subs	r3, r2, r3
 800f86a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f86e:	4293      	cmp	r3, r2
 800f870:	d901      	bls.n	800f876 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800f872:	2303      	movs	r3, #3
 800f874:	e0b5      	b.n	800f9e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f876:	4b3e      	ldr	r3, [pc, #248]	@ (800f970 <HAL_RCC_OscConfig+0x470>)
 800f878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f87a:	f003 0302 	and.w	r3, r3, #2
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d1ee      	bne.n	800f860 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800f882:	7dfb      	ldrb	r3, [r7, #23]
 800f884:	2b01      	cmp	r3, #1
 800f886:	d105      	bne.n	800f894 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f888:	4b39      	ldr	r3, [pc, #228]	@ (800f970 <HAL_RCC_OscConfig+0x470>)
 800f88a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f88c:	4a38      	ldr	r2, [pc, #224]	@ (800f970 <HAL_RCC_OscConfig+0x470>)
 800f88e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f892:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	699b      	ldr	r3, [r3, #24]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	f000 80a1 	beq.w	800f9e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800f89e:	4b34      	ldr	r3, [pc, #208]	@ (800f970 <HAL_RCC_OscConfig+0x470>)
 800f8a0:	689b      	ldr	r3, [r3, #8]
 800f8a2:	f003 030c 	and.w	r3, r3, #12
 800f8a6:	2b08      	cmp	r3, #8
 800f8a8:	d05c      	beq.n	800f964 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	699b      	ldr	r3, [r3, #24]
 800f8ae:	2b02      	cmp	r3, #2
 800f8b0:	d141      	bne.n	800f936 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f8b2:	4b31      	ldr	r3, [pc, #196]	@ (800f978 <HAL_RCC_OscConfig+0x478>)
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f8b8:	f7fd ffba 	bl	800d830 <HAL_GetTick>
 800f8bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f8be:	e008      	b.n	800f8d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f8c0:	f7fd ffb6 	bl	800d830 <HAL_GetTick>
 800f8c4:	4602      	mov	r2, r0
 800f8c6:	693b      	ldr	r3, [r7, #16]
 800f8c8:	1ad3      	subs	r3, r2, r3
 800f8ca:	2b02      	cmp	r3, #2
 800f8cc:	d901      	bls.n	800f8d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800f8ce:	2303      	movs	r3, #3
 800f8d0:	e087      	b.n	800f9e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f8d2:	4b27      	ldr	r3, [pc, #156]	@ (800f970 <HAL_RCC_OscConfig+0x470>)
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d1f0      	bne.n	800f8c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	69da      	ldr	r2, [r3, #28]
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	6a1b      	ldr	r3, [r3, #32]
 800f8e6:	431a      	orrs	r2, r3
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8ec:	019b      	lsls	r3, r3, #6
 800f8ee:	431a      	orrs	r2, r3
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8f4:	085b      	lsrs	r3, r3, #1
 800f8f6:	3b01      	subs	r3, #1
 800f8f8:	041b      	lsls	r3, r3, #16
 800f8fa:	431a      	orrs	r2, r3
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f900:	061b      	lsls	r3, r3, #24
 800f902:	491b      	ldr	r1, [pc, #108]	@ (800f970 <HAL_RCC_OscConfig+0x470>)
 800f904:	4313      	orrs	r3, r2
 800f906:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f908:	4b1b      	ldr	r3, [pc, #108]	@ (800f978 <HAL_RCC_OscConfig+0x478>)
 800f90a:	2201      	movs	r2, #1
 800f90c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f90e:	f7fd ff8f 	bl	800d830 <HAL_GetTick>
 800f912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f914:	e008      	b.n	800f928 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f916:	f7fd ff8b 	bl	800d830 <HAL_GetTick>
 800f91a:	4602      	mov	r2, r0
 800f91c:	693b      	ldr	r3, [r7, #16]
 800f91e:	1ad3      	subs	r3, r2, r3
 800f920:	2b02      	cmp	r3, #2
 800f922:	d901      	bls.n	800f928 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800f924:	2303      	movs	r3, #3
 800f926:	e05c      	b.n	800f9e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f928:	4b11      	ldr	r3, [pc, #68]	@ (800f970 <HAL_RCC_OscConfig+0x470>)
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f930:	2b00      	cmp	r3, #0
 800f932:	d0f0      	beq.n	800f916 <HAL_RCC_OscConfig+0x416>
 800f934:	e054      	b.n	800f9e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f936:	4b10      	ldr	r3, [pc, #64]	@ (800f978 <HAL_RCC_OscConfig+0x478>)
 800f938:	2200      	movs	r2, #0
 800f93a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f93c:	f7fd ff78 	bl	800d830 <HAL_GetTick>
 800f940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f942:	e008      	b.n	800f956 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f944:	f7fd ff74 	bl	800d830 <HAL_GetTick>
 800f948:	4602      	mov	r2, r0
 800f94a:	693b      	ldr	r3, [r7, #16]
 800f94c:	1ad3      	subs	r3, r2, r3
 800f94e:	2b02      	cmp	r3, #2
 800f950:	d901      	bls.n	800f956 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800f952:	2303      	movs	r3, #3
 800f954:	e045      	b.n	800f9e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f956:	4b06      	ldr	r3, [pc, #24]	@ (800f970 <HAL_RCC_OscConfig+0x470>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d1f0      	bne.n	800f944 <HAL_RCC_OscConfig+0x444>
 800f962:	e03d      	b.n	800f9e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	699b      	ldr	r3, [r3, #24]
 800f968:	2b01      	cmp	r3, #1
 800f96a:	d107      	bne.n	800f97c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800f96c:	2301      	movs	r3, #1
 800f96e:	e038      	b.n	800f9e2 <HAL_RCC_OscConfig+0x4e2>
 800f970:	40023800 	.word	0x40023800
 800f974:	40007000 	.word	0x40007000
 800f978:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800f97c:	4b1b      	ldr	r3, [pc, #108]	@ (800f9ec <HAL_RCC_OscConfig+0x4ec>)
 800f97e:	685b      	ldr	r3, [r3, #4]
 800f980:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	699b      	ldr	r3, [r3, #24]
 800f986:	2b01      	cmp	r3, #1
 800f988:	d028      	beq.n	800f9dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f994:	429a      	cmp	r2, r3
 800f996:	d121      	bne.n	800f9dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f9a2:	429a      	cmp	r2, r3
 800f9a4:	d11a      	bne.n	800f9dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f9a6:	68fa      	ldr	r2, [r7, #12]
 800f9a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800f9ac:	4013      	ands	r3, r2
 800f9ae:	687a      	ldr	r2, [r7, #4]
 800f9b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800f9b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f9b4:	4293      	cmp	r3, r2
 800f9b6:	d111      	bne.n	800f9dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9c2:	085b      	lsrs	r3, r3, #1
 800f9c4:	3b01      	subs	r3, #1
 800f9c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f9c8:	429a      	cmp	r2, r3
 800f9ca:	d107      	bne.n	800f9dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f9d8:	429a      	cmp	r2, r3
 800f9da:	d001      	beq.n	800f9e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800f9dc:	2301      	movs	r3, #1
 800f9de:	e000      	b.n	800f9e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800f9e0:	2300      	movs	r3, #0
}
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	3718      	adds	r7, #24
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	bd80      	pop	{r7, pc}
 800f9ea:	bf00      	nop
 800f9ec:	40023800 	.word	0x40023800

0800f9f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b084      	sub	sp, #16
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
 800f9f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d101      	bne.n	800fa04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800fa00:	2301      	movs	r3, #1
 800fa02:	e0cc      	b.n	800fb9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800fa04:	4b68      	ldr	r3, [pc, #416]	@ (800fba8 <HAL_RCC_ClockConfig+0x1b8>)
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	f003 0307 	and.w	r3, r3, #7
 800fa0c:	683a      	ldr	r2, [r7, #0]
 800fa0e:	429a      	cmp	r2, r3
 800fa10:	d90c      	bls.n	800fa2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fa12:	4b65      	ldr	r3, [pc, #404]	@ (800fba8 <HAL_RCC_ClockConfig+0x1b8>)
 800fa14:	683a      	ldr	r2, [r7, #0]
 800fa16:	b2d2      	uxtb	r2, r2
 800fa18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fa1a:	4b63      	ldr	r3, [pc, #396]	@ (800fba8 <HAL_RCC_ClockConfig+0x1b8>)
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	f003 0307 	and.w	r3, r3, #7
 800fa22:	683a      	ldr	r2, [r7, #0]
 800fa24:	429a      	cmp	r2, r3
 800fa26:	d001      	beq.n	800fa2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800fa28:	2301      	movs	r3, #1
 800fa2a:	e0b8      	b.n	800fb9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	f003 0302 	and.w	r3, r3, #2
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d020      	beq.n	800fa7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	f003 0304 	and.w	r3, r3, #4
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d005      	beq.n	800fa50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800fa44:	4b59      	ldr	r3, [pc, #356]	@ (800fbac <HAL_RCC_ClockConfig+0x1bc>)
 800fa46:	689b      	ldr	r3, [r3, #8]
 800fa48:	4a58      	ldr	r2, [pc, #352]	@ (800fbac <HAL_RCC_ClockConfig+0x1bc>)
 800fa4a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800fa4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	f003 0308 	and.w	r3, r3, #8
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d005      	beq.n	800fa68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800fa5c:	4b53      	ldr	r3, [pc, #332]	@ (800fbac <HAL_RCC_ClockConfig+0x1bc>)
 800fa5e:	689b      	ldr	r3, [r3, #8]
 800fa60:	4a52      	ldr	r2, [pc, #328]	@ (800fbac <HAL_RCC_ClockConfig+0x1bc>)
 800fa62:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800fa66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fa68:	4b50      	ldr	r3, [pc, #320]	@ (800fbac <HAL_RCC_ClockConfig+0x1bc>)
 800fa6a:	689b      	ldr	r3, [r3, #8]
 800fa6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	689b      	ldr	r3, [r3, #8]
 800fa74:	494d      	ldr	r1, [pc, #308]	@ (800fbac <HAL_RCC_ClockConfig+0x1bc>)
 800fa76:	4313      	orrs	r3, r2
 800fa78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	f003 0301 	and.w	r3, r3, #1
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d044      	beq.n	800fb10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	685b      	ldr	r3, [r3, #4]
 800fa8a:	2b01      	cmp	r3, #1
 800fa8c:	d107      	bne.n	800fa9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fa8e:	4b47      	ldr	r3, [pc, #284]	@ (800fbac <HAL_RCC_ClockConfig+0x1bc>)
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d119      	bne.n	800face <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800fa9a:	2301      	movs	r3, #1
 800fa9c:	e07f      	b.n	800fb9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	685b      	ldr	r3, [r3, #4]
 800faa2:	2b02      	cmp	r3, #2
 800faa4:	d003      	beq.n	800faae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800faaa:	2b03      	cmp	r3, #3
 800faac:	d107      	bne.n	800fabe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800faae:	4b3f      	ldr	r3, [pc, #252]	@ (800fbac <HAL_RCC_ClockConfig+0x1bc>)
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d109      	bne.n	800face <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800faba:	2301      	movs	r3, #1
 800fabc:	e06f      	b.n	800fb9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fabe:	4b3b      	ldr	r3, [pc, #236]	@ (800fbac <HAL_RCC_ClockConfig+0x1bc>)
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	f003 0302 	and.w	r3, r3, #2
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d101      	bne.n	800face <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800faca:	2301      	movs	r3, #1
 800facc:	e067      	b.n	800fb9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800face:	4b37      	ldr	r3, [pc, #220]	@ (800fbac <HAL_RCC_ClockConfig+0x1bc>)
 800fad0:	689b      	ldr	r3, [r3, #8]
 800fad2:	f023 0203 	bic.w	r2, r3, #3
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	685b      	ldr	r3, [r3, #4]
 800fada:	4934      	ldr	r1, [pc, #208]	@ (800fbac <HAL_RCC_ClockConfig+0x1bc>)
 800fadc:	4313      	orrs	r3, r2
 800fade:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800fae0:	f7fd fea6 	bl	800d830 <HAL_GetTick>
 800fae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fae6:	e00a      	b.n	800fafe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800fae8:	f7fd fea2 	bl	800d830 <HAL_GetTick>
 800faec:	4602      	mov	r2, r0
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	1ad3      	subs	r3, r2, r3
 800faf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800faf6:	4293      	cmp	r3, r2
 800faf8:	d901      	bls.n	800fafe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800fafa:	2303      	movs	r3, #3
 800fafc:	e04f      	b.n	800fb9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fafe:	4b2b      	ldr	r3, [pc, #172]	@ (800fbac <HAL_RCC_ClockConfig+0x1bc>)
 800fb00:	689b      	ldr	r3, [r3, #8]
 800fb02:	f003 020c 	and.w	r2, r3, #12
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	685b      	ldr	r3, [r3, #4]
 800fb0a:	009b      	lsls	r3, r3, #2
 800fb0c:	429a      	cmp	r2, r3
 800fb0e:	d1eb      	bne.n	800fae8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800fb10:	4b25      	ldr	r3, [pc, #148]	@ (800fba8 <HAL_RCC_ClockConfig+0x1b8>)
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	f003 0307 	and.w	r3, r3, #7
 800fb18:	683a      	ldr	r2, [r7, #0]
 800fb1a:	429a      	cmp	r2, r3
 800fb1c:	d20c      	bcs.n	800fb38 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fb1e:	4b22      	ldr	r3, [pc, #136]	@ (800fba8 <HAL_RCC_ClockConfig+0x1b8>)
 800fb20:	683a      	ldr	r2, [r7, #0]
 800fb22:	b2d2      	uxtb	r2, r2
 800fb24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fb26:	4b20      	ldr	r3, [pc, #128]	@ (800fba8 <HAL_RCC_ClockConfig+0x1b8>)
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	f003 0307 	and.w	r3, r3, #7
 800fb2e:	683a      	ldr	r2, [r7, #0]
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d001      	beq.n	800fb38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800fb34:	2301      	movs	r3, #1
 800fb36:	e032      	b.n	800fb9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	f003 0304 	and.w	r3, r3, #4
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d008      	beq.n	800fb56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800fb44:	4b19      	ldr	r3, [pc, #100]	@ (800fbac <HAL_RCC_ClockConfig+0x1bc>)
 800fb46:	689b      	ldr	r3, [r3, #8]
 800fb48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	68db      	ldr	r3, [r3, #12]
 800fb50:	4916      	ldr	r1, [pc, #88]	@ (800fbac <HAL_RCC_ClockConfig+0x1bc>)
 800fb52:	4313      	orrs	r3, r2
 800fb54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	f003 0308 	and.w	r3, r3, #8
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d009      	beq.n	800fb76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800fb62:	4b12      	ldr	r3, [pc, #72]	@ (800fbac <HAL_RCC_ClockConfig+0x1bc>)
 800fb64:	689b      	ldr	r3, [r3, #8]
 800fb66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	691b      	ldr	r3, [r3, #16]
 800fb6e:	00db      	lsls	r3, r3, #3
 800fb70:	490e      	ldr	r1, [pc, #56]	@ (800fbac <HAL_RCC_ClockConfig+0x1bc>)
 800fb72:	4313      	orrs	r3, r2
 800fb74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800fb76:	f000 f821 	bl	800fbbc <HAL_RCC_GetSysClockFreq>
 800fb7a:	4602      	mov	r2, r0
 800fb7c:	4b0b      	ldr	r3, [pc, #44]	@ (800fbac <HAL_RCC_ClockConfig+0x1bc>)
 800fb7e:	689b      	ldr	r3, [r3, #8]
 800fb80:	091b      	lsrs	r3, r3, #4
 800fb82:	f003 030f 	and.w	r3, r3, #15
 800fb86:	490a      	ldr	r1, [pc, #40]	@ (800fbb0 <HAL_RCC_ClockConfig+0x1c0>)
 800fb88:	5ccb      	ldrb	r3, [r1, r3]
 800fb8a:	fa22 f303 	lsr.w	r3, r2, r3
 800fb8e:	4a09      	ldr	r2, [pc, #36]	@ (800fbb4 <HAL_RCC_ClockConfig+0x1c4>)
 800fb90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800fb92:	4b09      	ldr	r3, [pc, #36]	@ (800fbb8 <HAL_RCC_ClockConfig+0x1c8>)
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	4618      	mov	r0, r3
 800fb98:	f7fd fe06 	bl	800d7a8 <HAL_InitTick>

  return HAL_OK;
 800fb9c:	2300      	movs	r3, #0
}
 800fb9e:	4618      	mov	r0, r3
 800fba0:	3710      	adds	r7, #16
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bd80      	pop	{r7, pc}
 800fba6:	bf00      	nop
 800fba8:	40023c00 	.word	0x40023c00
 800fbac:	40023800 	.word	0x40023800
 800fbb0:	080161f8 	.word	0x080161f8
 800fbb4:	20000004 	.word	0x20000004
 800fbb8:	20000008 	.word	0x20000008

0800fbbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800fbbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fbc0:	b090      	sub	sp, #64	@ 0x40
 800fbc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800fbc8:	2300      	movs	r3, #0
 800fbca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800fbcc:	2300      	movs	r3, #0
 800fbce:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800fbd4:	4b59      	ldr	r3, [pc, #356]	@ (800fd3c <HAL_RCC_GetSysClockFreq+0x180>)
 800fbd6:	689b      	ldr	r3, [r3, #8]
 800fbd8:	f003 030c 	and.w	r3, r3, #12
 800fbdc:	2b08      	cmp	r3, #8
 800fbde:	d00d      	beq.n	800fbfc <HAL_RCC_GetSysClockFreq+0x40>
 800fbe0:	2b08      	cmp	r3, #8
 800fbe2:	f200 80a1 	bhi.w	800fd28 <HAL_RCC_GetSysClockFreq+0x16c>
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d002      	beq.n	800fbf0 <HAL_RCC_GetSysClockFreq+0x34>
 800fbea:	2b04      	cmp	r3, #4
 800fbec:	d003      	beq.n	800fbf6 <HAL_RCC_GetSysClockFreq+0x3a>
 800fbee:	e09b      	b.n	800fd28 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800fbf0:	4b53      	ldr	r3, [pc, #332]	@ (800fd40 <HAL_RCC_GetSysClockFreq+0x184>)
 800fbf2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800fbf4:	e09b      	b.n	800fd2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800fbf6:	4b53      	ldr	r3, [pc, #332]	@ (800fd44 <HAL_RCC_GetSysClockFreq+0x188>)
 800fbf8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800fbfa:	e098      	b.n	800fd2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800fbfc:	4b4f      	ldr	r3, [pc, #316]	@ (800fd3c <HAL_RCC_GetSysClockFreq+0x180>)
 800fbfe:	685b      	ldr	r3, [r3, #4]
 800fc00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fc04:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800fc06:	4b4d      	ldr	r3, [pc, #308]	@ (800fd3c <HAL_RCC_GetSysClockFreq+0x180>)
 800fc08:	685b      	ldr	r3, [r3, #4]
 800fc0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d028      	beq.n	800fc64 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800fc12:	4b4a      	ldr	r3, [pc, #296]	@ (800fd3c <HAL_RCC_GetSysClockFreq+0x180>)
 800fc14:	685b      	ldr	r3, [r3, #4]
 800fc16:	099b      	lsrs	r3, r3, #6
 800fc18:	2200      	movs	r2, #0
 800fc1a:	623b      	str	r3, [r7, #32]
 800fc1c:	627a      	str	r2, [r7, #36]	@ 0x24
 800fc1e:	6a3b      	ldr	r3, [r7, #32]
 800fc20:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800fc24:	2100      	movs	r1, #0
 800fc26:	4b47      	ldr	r3, [pc, #284]	@ (800fd44 <HAL_RCC_GetSysClockFreq+0x188>)
 800fc28:	fb03 f201 	mul.w	r2, r3, r1
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	fb00 f303 	mul.w	r3, r0, r3
 800fc32:	4413      	add	r3, r2
 800fc34:	4a43      	ldr	r2, [pc, #268]	@ (800fd44 <HAL_RCC_GetSysClockFreq+0x188>)
 800fc36:	fba0 1202 	umull	r1, r2, r0, r2
 800fc3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fc3c:	460a      	mov	r2, r1
 800fc3e:	62ba      	str	r2, [r7, #40]	@ 0x28
 800fc40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fc42:	4413      	add	r3, r2
 800fc44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fc46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc48:	2200      	movs	r2, #0
 800fc4a:	61bb      	str	r3, [r7, #24]
 800fc4c:	61fa      	str	r2, [r7, #28]
 800fc4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800fc52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800fc56:	f7f0 ffff 	bl	8000c58 <__aeabi_uldivmod>
 800fc5a:	4602      	mov	r2, r0
 800fc5c:	460b      	mov	r3, r1
 800fc5e:	4613      	mov	r3, r2
 800fc60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fc62:	e053      	b.n	800fd0c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800fc64:	4b35      	ldr	r3, [pc, #212]	@ (800fd3c <HAL_RCC_GetSysClockFreq+0x180>)
 800fc66:	685b      	ldr	r3, [r3, #4]
 800fc68:	099b      	lsrs	r3, r3, #6
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	613b      	str	r3, [r7, #16]
 800fc6e:	617a      	str	r2, [r7, #20]
 800fc70:	693b      	ldr	r3, [r7, #16]
 800fc72:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800fc76:	f04f 0b00 	mov.w	fp, #0
 800fc7a:	4652      	mov	r2, sl
 800fc7c:	465b      	mov	r3, fp
 800fc7e:	f04f 0000 	mov.w	r0, #0
 800fc82:	f04f 0100 	mov.w	r1, #0
 800fc86:	0159      	lsls	r1, r3, #5
 800fc88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800fc8c:	0150      	lsls	r0, r2, #5
 800fc8e:	4602      	mov	r2, r0
 800fc90:	460b      	mov	r3, r1
 800fc92:	ebb2 080a 	subs.w	r8, r2, sl
 800fc96:	eb63 090b 	sbc.w	r9, r3, fp
 800fc9a:	f04f 0200 	mov.w	r2, #0
 800fc9e:	f04f 0300 	mov.w	r3, #0
 800fca2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800fca6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800fcaa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800fcae:	ebb2 0408 	subs.w	r4, r2, r8
 800fcb2:	eb63 0509 	sbc.w	r5, r3, r9
 800fcb6:	f04f 0200 	mov.w	r2, #0
 800fcba:	f04f 0300 	mov.w	r3, #0
 800fcbe:	00eb      	lsls	r3, r5, #3
 800fcc0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800fcc4:	00e2      	lsls	r2, r4, #3
 800fcc6:	4614      	mov	r4, r2
 800fcc8:	461d      	mov	r5, r3
 800fcca:	eb14 030a 	adds.w	r3, r4, sl
 800fcce:	603b      	str	r3, [r7, #0]
 800fcd0:	eb45 030b 	adc.w	r3, r5, fp
 800fcd4:	607b      	str	r3, [r7, #4]
 800fcd6:	f04f 0200 	mov.w	r2, #0
 800fcda:	f04f 0300 	mov.w	r3, #0
 800fcde:	e9d7 4500 	ldrd	r4, r5, [r7]
 800fce2:	4629      	mov	r1, r5
 800fce4:	028b      	lsls	r3, r1, #10
 800fce6:	4621      	mov	r1, r4
 800fce8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800fcec:	4621      	mov	r1, r4
 800fcee:	028a      	lsls	r2, r1, #10
 800fcf0:	4610      	mov	r0, r2
 800fcf2:	4619      	mov	r1, r3
 800fcf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	60bb      	str	r3, [r7, #8]
 800fcfa:	60fa      	str	r2, [r7, #12]
 800fcfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fd00:	f7f0 ffaa 	bl	8000c58 <__aeabi_uldivmod>
 800fd04:	4602      	mov	r2, r0
 800fd06:	460b      	mov	r3, r1
 800fd08:	4613      	mov	r3, r2
 800fd0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800fd0c:	4b0b      	ldr	r3, [pc, #44]	@ (800fd3c <HAL_RCC_GetSysClockFreq+0x180>)
 800fd0e:	685b      	ldr	r3, [r3, #4]
 800fd10:	0c1b      	lsrs	r3, r3, #16
 800fd12:	f003 0303 	and.w	r3, r3, #3
 800fd16:	3301      	adds	r3, #1
 800fd18:	005b      	lsls	r3, r3, #1
 800fd1a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800fd1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fd1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd20:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd24:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800fd26:	e002      	b.n	800fd2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800fd28:	4b05      	ldr	r3, [pc, #20]	@ (800fd40 <HAL_RCC_GetSysClockFreq+0x184>)
 800fd2a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800fd2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800fd2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800fd30:	4618      	mov	r0, r3
 800fd32:	3740      	adds	r7, #64	@ 0x40
 800fd34:	46bd      	mov	sp, r7
 800fd36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fd3a:	bf00      	nop
 800fd3c:	40023800 	.word	0x40023800
 800fd40:	00f42400 	.word	0x00f42400
 800fd44:	017d7840 	.word	0x017d7840

0800fd48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800fd48:	b480      	push	{r7}
 800fd4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800fd4c:	4b03      	ldr	r3, [pc, #12]	@ (800fd5c <HAL_RCC_GetHCLKFreq+0x14>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
}
 800fd50:	4618      	mov	r0, r3
 800fd52:	46bd      	mov	sp, r7
 800fd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd58:	4770      	bx	lr
 800fd5a:	bf00      	nop
 800fd5c:	20000004 	.word	0x20000004

0800fd60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800fd60:	b580      	push	{r7, lr}
 800fd62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800fd64:	f7ff fff0 	bl	800fd48 <HAL_RCC_GetHCLKFreq>
 800fd68:	4602      	mov	r2, r0
 800fd6a:	4b05      	ldr	r3, [pc, #20]	@ (800fd80 <HAL_RCC_GetPCLK1Freq+0x20>)
 800fd6c:	689b      	ldr	r3, [r3, #8]
 800fd6e:	0a9b      	lsrs	r3, r3, #10
 800fd70:	f003 0307 	and.w	r3, r3, #7
 800fd74:	4903      	ldr	r1, [pc, #12]	@ (800fd84 <HAL_RCC_GetPCLK1Freq+0x24>)
 800fd76:	5ccb      	ldrb	r3, [r1, r3]
 800fd78:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	bd80      	pop	{r7, pc}
 800fd80:	40023800 	.word	0x40023800
 800fd84:	08016208 	.word	0x08016208

0800fd88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800fd8c:	f7ff ffdc 	bl	800fd48 <HAL_RCC_GetHCLKFreq>
 800fd90:	4602      	mov	r2, r0
 800fd92:	4b05      	ldr	r3, [pc, #20]	@ (800fda8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800fd94:	689b      	ldr	r3, [r3, #8]
 800fd96:	0b5b      	lsrs	r3, r3, #13
 800fd98:	f003 0307 	and.w	r3, r3, #7
 800fd9c:	4903      	ldr	r1, [pc, #12]	@ (800fdac <HAL_RCC_GetPCLK2Freq+0x24>)
 800fd9e:	5ccb      	ldrb	r3, [r1, r3]
 800fda0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fda4:	4618      	mov	r0, r3
 800fda6:	bd80      	pop	{r7, pc}
 800fda8:	40023800 	.word	0x40023800
 800fdac:	08016208 	.word	0x08016208

0800fdb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b082      	sub	sp, #8
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d101      	bne.n	800fdc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800fdbe:	2301      	movs	r3, #1
 800fdc0:	e07b      	b.n	800feba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d108      	bne.n	800fddc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	685b      	ldr	r3, [r3, #4]
 800fdce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fdd2:	d009      	beq.n	800fde8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	61da      	str	r2, [r3, #28]
 800fdda:	e005      	b.n	800fde8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	2200      	movs	r2, #0
 800fde0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	2200      	movs	r2, #0
 800fde6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	2200      	movs	r2, #0
 800fdec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800fdf4:	b2db      	uxtb	r3, r3
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d106      	bne.n	800fe08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800fe02:	6878      	ldr	r0, [r7, #4]
 800fe04:	f7fd fa2c 	bl	800d260 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	2202      	movs	r2, #2
 800fe0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	681a      	ldr	r2, [r3, #0]
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fe1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	685b      	ldr	r3, [r3, #4]
 800fe24:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	689b      	ldr	r3, [r3, #8]
 800fe2c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800fe30:	431a      	orrs	r2, r3
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	68db      	ldr	r3, [r3, #12]
 800fe36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fe3a:	431a      	orrs	r2, r3
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	691b      	ldr	r3, [r3, #16]
 800fe40:	f003 0302 	and.w	r3, r3, #2
 800fe44:	431a      	orrs	r2, r3
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	695b      	ldr	r3, [r3, #20]
 800fe4a:	f003 0301 	and.w	r3, r3, #1
 800fe4e:	431a      	orrs	r2, r3
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	699b      	ldr	r3, [r3, #24]
 800fe54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fe58:	431a      	orrs	r2, r3
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	69db      	ldr	r3, [r3, #28]
 800fe5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fe62:	431a      	orrs	r2, r3
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	6a1b      	ldr	r3, [r3, #32]
 800fe68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fe6c:	ea42 0103 	orr.w	r1, r2, r3
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe74:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	430a      	orrs	r2, r1
 800fe7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	699b      	ldr	r3, [r3, #24]
 800fe84:	0c1b      	lsrs	r3, r3, #16
 800fe86:	f003 0104 	and.w	r1, r3, #4
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe8e:	f003 0210 	and.w	r2, r3, #16
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	430a      	orrs	r2, r1
 800fe98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	69da      	ldr	r2, [r3, #28]
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800fea8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	2200      	movs	r2, #0
 800feae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	2201      	movs	r2, #1
 800feb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800feb8:	2300      	movs	r3, #0
}
 800feba:	4618      	mov	r0, r3
 800febc:	3708      	adds	r7, #8
 800febe:	46bd      	mov	sp, r7
 800fec0:	bd80      	pop	{r7, pc}

0800fec2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fec2:	b580      	push	{r7, lr}
 800fec4:	b088      	sub	sp, #32
 800fec6:	af00      	add	r7, sp, #0
 800fec8:	60f8      	str	r0, [r7, #12]
 800feca:	60b9      	str	r1, [r7, #8]
 800fecc:	603b      	str	r3, [r7, #0]
 800fece:	4613      	mov	r3, r2
 800fed0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fed2:	f7fd fcad 	bl	800d830 <HAL_GetTick>
 800fed6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800fed8:	88fb      	ldrh	r3, [r7, #6]
 800feda:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800fee2:	b2db      	uxtb	r3, r3
 800fee4:	2b01      	cmp	r3, #1
 800fee6:	d001      	beq.n	800feec <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800fee8:	2302      	movs	r3, #2
 800feea:	e12a      	b.n	8010142 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800feec:	68bb      	ldr	r3, [r7, #8]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d002      	beq.n	800fef8 <HAL_SPI_Transmit+0x36>
 800fef2:	88fb      	ldrh	r3, [r7, #6]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d101      	bne.n	800fefc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800fef8:	2301      	movs	r3, #1
 800fefa:	e122      	b.n	8010142 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ff02:	2b01      	cmp	r3, #1
 800ff04:	d101      	bne.n	800ff0a <HAL_SPI_Transmit+0x48>
 800ff06:	2302      	movs	r3, #2
 800ff08:	e11b      	b.n	8010142 <HAL_SPI_Transmit+0x280>
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	2201      	movs	r2, #1
 800ff0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	2203      	movs	r2, #3
 800ff16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	2200      	movs	r2, #0
 800ff1e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	68ba      	ldr	r2, [r7, #8]
 800ff24:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	88fa      	ldrh	r2, [r7, #6]
 800ff2a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	88fa      	ldrh	r2, [r7, #6]
 800ff30:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	2200      	movs	r2, #0
 800ff36:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	2200      	movs	r2, #0
 800ff42:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	2200      	movs	r2, #0
 800ff48:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	2200      	movs	r2, #0
 800ff4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	689b      	ldr	r3, [r3, #8]
 800ff54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ff58:	d10f      	bne.n	800ff7a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	681a      	ldr	r2, [r3, #0]
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ff68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	681a      	ldr	r2, [r3, #0]
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ff78:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ff84:	2b40      	cmp	r3, #64	@ 0x40
 800ff86:	d007      	beq.n	800ff98 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	681a      	ldr	r2, [r3, #0]
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ff96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	68db      	ldr	r3, [r3, #12]
 800ff9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ffa0:	d152      	bne.n	8010048 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	685b      	ldr	r3, [r3, #4]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d002      	beq.n	800ffb0 <HAL_SPI_Transmit+0xee>
 800ffaa:	8b7b      	ldrh	r3, [r7, #26]
 800ffac:	2b01      	cmp	r3, #1
 800ffae:	d145      	bne.n	801003c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ffb4:	881a      	ldrh	r2, [r3, #0]
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ffc0:	1c9a      	adds	r2, r3, #2
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ffca:	b29b      	uxth	r3, r3
 800ffcc:	3b01      	subs	r3, #1
 800ffce:	b29a      	uxth	r2, r3
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ffd4:	e032      	b.n	801003c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	689b      	ldr	r3, [r3, #8]
 800ffdc:	f003 0302 	and.w	r3, r3, #2
 800ffe0:	2b02      	cmp	r3, #2
 800ffe2:	d112      	bne.n	801000a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ffe8:	881a      	ldrh	r2, [r3, #0]
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fff4:	1c9a      	adds	r2, r3, #2
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fffe:	b29b      	uxth	r3, r3
 8010000:	3b01      	subs	r3, #1
 8010002:	b29a      	uxth	r2, r3
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	86da      	strh	r2, [r3, #54]	@ 0x36
 8010008:	e018      	b.n	801003c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801000a:	f7fd fc11 	bl	800d830 <HAL_GetTick>
 801000e:	4602      	mov	r2, r0
 8010010:	69fb      	ldr	r3, [r7, #28]
 8010012:	1ad3      	subs	r3, r2, r3
 8010014:	683a      	ldr	r2, [r7, #0]
 8010016:	429a      	cmp	r2, r3
 8010018:	d803      	bhi.n	8010022 <HAL_SPI_Transmit+0x160>
 801001a:	683b      	ldr	r3, [r7, #0]
 801001c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010020:	d102      	bne.n	8010028 <HAL_SPI_Transmit+0x166>
 8010022:	683b      	ldr	r3, [r7, #0]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d109      	bne.n	801003c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	2201      	movs	r2, #1
 801002c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	2200      	movs	r2, #0
 8010034:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8010038:	2303      	movs	r3, #3
 801003a:	e082      	b.n	8010142 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8010040:	b29b      	uxth	r3, r3
 8010042:	2b00      	cmp	r3, #0
 8010044:	d1c7      	bne.n	800ffd6 <HAL_SPI_Transmit+0x114>
 8010046:	e053      	b.n	80100f0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	685b      	ldr	r3, [r3, #4]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d002      	beq.n	8010056 <HAL_SPI_Transmit+0x194>
 8010050:	8b7b      	ldrh	r3, [r7, #26]
 8010052:	2b01      	cmp	r3, #1
 8010054:	d147      	bne.n	80100e6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	330c      	adds	r3, #12
 8010060:	7812      	ldrb	r2, [r2, #0]
 8010062:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010068:	1c5a      	adds	r2, r3, #1
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8010072:	b29b      	uxth	r3, r3
 8010074:	3b01      	subs	r3, #1
 8010076:	b29a      	uxth	r2, r3
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 801007c:	e033      	b.n	80100e6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	689b      	ldr	r3, [r3, #8]
 8010084:	f003 0302 	and.w	r3, r3, #2
 8010088:	2b02      	cmp	r3, #2
 801008a:	d113      	bne.n	80100b4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	330c      	adds	r3, #12
 8010096:	7812      	ldrb	r2, [r2, #0]
 8010098:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801009e:	1c5a      	adds	r2, r3, #1
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80100a8:	b29b      	uxth	r3, r3
 80100aa:	3b01      	subs	r3, #1
 80100ac:	b29a      	uxth	r2, r3
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80100b2:	e018      	b.n	80100e6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80100b4:	f7fd fbbc 	bl	800d830 <HAL_GetTick>
 80100b8:	4602      	mov	r2, r0
 80100ba:	69fb      	ldr	r3, [r7, #28]
 80100bc:	1ad3      	subs	r3, r2, r3
 80100be:	683a      	ldr	r2, [r7, #0]
 80100c0:	429a      	cmp	r2, r3
 80100c2:	d803      	bhi.n	80100cc <HAL_SPI_Transmit+0x20a>
 80100c4:	683b      	ldr	r3, [r7, #0]
 80100c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100ca:	d102      	bne.n	80100d2 <HAL_SPI_Transmit+0x210>
 80100cc:	683b      	ldr	r3, [r7, #0]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d109      	bne.n	80100e6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	2201      	movs	r2, #1
 80100d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	2200      	movs	r2, #0
 80100de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80100e2:	2303      	movs	r3, #3
 80100e4:	e02d      	b.n	8010142 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80100ea:	b29b      	uxth	r3, r3
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d1c6      	bne.n	801007e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80100f0:	69fa      	ldr	r2, [r7, #28]
 80100f2:	6839      	ldr	r1, [r7, #0]
 80100f4:	68f8      	ldr	r0, [r7, #12]
 80100f6:	f000 f8b1 	bl	801025c <SPI_EndRxTxTransaction>
 80100fa:	4603      	mov	r3, r0
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d002      	beq.n	8010106 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	2220      	movs	r2, #32
 8010104:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	689b      	ldr	r3, [r3, #8]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d10a      	bne.n	8010124 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801010e:	2300      	movs	r3, #0
 8010110:	617b      	str	r3, [r7, #20]
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	68db      	ldr	r3, [r3, #12]
 8010118:	617b      	str	r3, [r7, #20]
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	689b      	ldr	r3, [r3, #8]
 8010120:	617b      	str	r3, [r7, #20]
 8010122:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	2201      	movs	r2, #1
 8010128:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	2200      	movs	r2, #0
 8010130:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010138:	2b00      	cmp	r3, #0
 801013a:	d001      	beq.n	8010140 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 801013c:	2301      	movs	r3, #1
 801013e:	e000      	b.n	8010142 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8010140:	2300      	movs	r3, #0
  }
}
 8010142:	4618      	mov	r0, r3
 8010144:	3720      	adds	r7, #32
 8010146:	46bd      	mov	sp, r7
 8010148:	bd80      	pop	{r7, pc}
	...

0801014c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b088      	sub	sp, #32
 8010150:	af00      	add	r7, sp, #0
 8010152:	60f8      	str	r0, [r7, #12]
 8010154:	60b9      	str	r1, [r7, #8]
 8010156:	603b      	str	r3, [r7, #0]
 8010158:	4613      	mov	r3, r2
 801015a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801015c:	f7fd fb68 	bl	800d830 <HAL_GetTick>
 8010160:	4602      	mov	r2, r0
 8010162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010164:	1a9b      	subs	r3, r3, r2
 8010166:	683a      	ldr	r2, [r7, #0]
 8010168:	4413      	add	r3, r2
 801016a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801016c:	f7fd fb60 	bl	800d830 <HAL_GetTick>
 8010170:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8010172:	4b39      	ldr	r3, [pc, #228]	@ (8010258 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	015b      	lsls	r3, r3, #5
 8010178:	0d1b      	lsrs	r3, r3, #20
 801017a:	69fa      	ldr	r2, [r7, #28]
 801017c:	fb02 f303 	mul.w	r3, r2, r3
 8010180:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010182:	e054      	b.n	801022e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8010184:	683b      	ldr	r3, [r7, #0]
 8010186:	f1b3 3fff 	cmp.w	r3, #4294967295
 801018a:	d050      	beq.n	801022e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801018c:	f7fd fb50 	bl	800d830 <HAL_GetTick>
 8010190:	4602      	mov	r2, r0
 8010192:	69bb      	ldr	r3, [r7, #24]
 8010194:	1ad3      	subs	r3, r2, r3
 8010196:	69fa      	ldr	r2, [r7, #28]
 8010198:	429a      	cmp	r2, r3
 801019a:	d902      	bls.n	80101a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 801019c:	69fb      	ldr	r3, [r7, #28]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d13d      	bne.n	801021e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	685a      	ldr	r2, [r3, #4]
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80101b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	685b      	ldr	r3, [r3, #4]
 80101b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80101ba:	d111      	bne.n	80101e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	689b      	ldr	r3, [r3, #8]
 80101c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80101c4:	d004      	beq.n	80101d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	689b      	ldr	r3, [r3, #8]
 80101ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80101ce:	d107      	bne.n	80101e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	681a      	ldr	r2, [r3, #0]
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80101de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80101e8:	d10f      	bne.n	801020a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	681a      	ldr	r2, [r3, #0]
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80101f8:	601a      	str	r2, [r3, #0]
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	681a      	ldr	r2, [r3, #0]
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8010208:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	2201      	movs	r2, #1
 801020e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	2200      	movs	r2, #0
 8010216:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 801021a:	2303      	movs	r3, #3
 801021c:	e017      	b.n	801024e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801021e:	697b      	ldr	r3, [r7, #20]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d101      	bne.n	8010228 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8010224:	2300      	movs	r3, #0
 8010226:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8010228:	697b      	ldr	r3, [r7, #20]
 801022a:	3b01      	subs	r3, #1
 801022c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	689a      	ldr	r2, [r3, #8]
 8010234:	68bb      	ldr	r3, [r7, #8]
 8010236:	4013      	ands	r3, r2
 8010238:	68ba      	ldr	r2, [r7, #8]
 801023a:	429a      	cmp	r2, r3
 801023c:	bf0c      	ite	eq
 801023e:	2301      	moveq	r3, #1
 8010240:	2300      	movne	r3, #0
 8010242:	b2db      	uxtb	r3, r3
 8010244:	461a      	mov	r2, r3
 8010246:	79fb      	ldrb	r3, [r7, #7]
 8010248:	429a      	cmp	r2, r3
 801024a:	d19b      	bne.n	8010184 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801024c:	2300      	movs	r3, #0
}
 801024e:	4618      	mov	r0, r3
 8010250:	3720      	adds	r7, #32
 8010252:	46bd      	mov	sp, r7
 8010254:	bd80      	pop	{r7, pc}
 8010256:	bf00      	nop
 8010258:	20000004 	.word	0x20000004

0801025c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801025c:	b580      	push	{r7, lr}
 801025e:	b088      	sub	sp, #32
 8010260:	af02      	add	r7, sp, #8
 8010262:	60f8      	str	r0, [r7, #12]
 8010264:	60b9      	str	r1, [r7, #8]
 8010266:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	9300      	str	r3, [sp, #0]
 801026c:	68bb      	ldr	r3, [r7, #8]
 801026e:	2201      	movs	r2, #1
 8010270:	2102      	movs	r1, #2
 8010272:	68f8      	ldr	r0, [r7, #12]
 8010274:	f7ff ff6a 	bl	801014c <SPI_WaitFlagStateUntilTimeout>
 8010278:	4603      	mov	r3, r0
 801027a:	2b00      	cmp	r3, #0
 801027c:	d007      	beq.n	801028e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010282:	f043 0220 	orr.w	r2, r3, #32
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 801028a:	2303      	movs	r3, #3
 801028c:	e032      	b.n	80102f4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801028e:	4b1b      	ldr	r3, [pc, #108]	@ (80102fc <SPI_EndRxTxTransaction+0xa0>)
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	4a1b      	ldr	r2, [pc, #108]	@ (8010300 <SPI_EndRxTxTransaction+0xa4>)
 8010294:	fba2 2303 	umull	r2, r3, r2, r3
 8010298:	0d5b      	lsrs	r3, r3, #21
 801029a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801029e:	fb02 f303 	mul.w	r3, r2, r3
 80102a2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	685b      	ldr	r3, [r3, #4]
 80102a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80102ac:	d112      	bne.n	80102d4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	9300      	str	r3, [sp, #0]
 80102b2:	68bb      	ldr	r3, [r7, #8]
 80102b4:	2200      	movs	r2, #0
 80102b6:	2180      	movs	r1, #128	@ 0x80
 80102b8:	68f8      	ldr	r0, [r7, #12]
 80102ba:	f7ff ff47 	bl	801014c <SPI_WaitFlagStateUntilTimeout>
 80102be:	4603      	mov	r3, r0
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d016      	beq.n	80102f2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80102c8:	f043 0220 	orr.w	r2, r3, #32
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80102d0:	2303      	movs	r3, #3
 80102d2:	e00f      	b.n	80102f4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80102d4:	697b      	ldr	r3, [r7, #20]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d00a      	beq.n	80102f0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80102da:	697b      	ldr	r3, [r7, #20]
 80102dc:	3b01      	subs	r3, #1
 80102de:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	689b      	ldr	r3, [r3, #8]
 80102e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80102ea:	2b80      	cmp	r3, #128	@ 0x80
 80102ec:	d0f2      	beq.n	80102d4 <SPI_EndRxTxTransaction+0x78>
 80102ee:	e000      	b.n	80102f2 <SPI_EndRxTxTransaction+0x96>
        break;
 80102f0:	bf00      	nop
  }

  return HAL_OK;
 80102f2:	2300      	movs	r3, #0
}
 80102f4:	4618      	mov	r0, r3
 80102f6:	3718      	adds	r7, #24
 80102f8:	46bd      	mov	sp, r7
 80102fa:	bd80      	pop	{r7, pc}
 80102fc:	20000004 	.word	0x20000004
 8010300:	165e9f81 	.word	0x165e9f81

08010304 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b082      	sub	sp, #8
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d101      	bne.n	8010316 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010312:	2301      	movs	r3, #1
 8010314:	e041      	b.n	801039a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801031c:	b2db      	uxtb	r3, r3
 801031e:	2b00      	cmp	r3, #0
 8010320:	d106      	bne.n	8010330 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	2200      	movs	r2, #0
 8010326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801032a:	6878      	ldr	r0, [r7, #4]
 801032c:	f7fc ffe0 	bl	800d2f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	2202      	movs	r2, #2
 8010334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	681a      	ldr	r2, [r3, #0]
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	3304      	adds	r3, #4
 8010340:	4619      	mov	r1, r3
 8010342:	4610      	mov	r0, r2
 8010344:	f000 fc3c 	bl	8010bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	2201      	movs	r2, #1
 801034c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	2201      	movs	r2, #1
 8010354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	2201      	movs	r2, #1
 801035c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	2201      	movs	r2, #1
 8010364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	2201      	movs	r2, #1
 801036c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	2201      	movs	r2, #1
 8010374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	2201      	movs	r2, #1
 801037c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	2201      	movs	r2, #1
 8010384:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	2201      	movs	r2, #1
 801038c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2201      	movs	r2, #1
 8010394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010398:	2300      	movs	r3, #0
}
 801039a:	4618      	mov	r0, r3
 801039c:	3708      	adds	r7, #8
 801039e:	46bd      	mov	sp, r7
 80103a0:	bd80      	pop	{r7, pc}
	...

080103a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80103a4:	b480      	push	{r7}
 80103a6:	b085      	sub	sp, #20
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80103b2:	b2db      	uxtb	r3, r3
 80103b4:	2b01      	cmp	r3, #1
 80103b6:	d001      	beq.n	80103bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80103b8:	2301      	movs	r3, #1
 80103ba:	e044      	b.n	8010446 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	2202      	movs	r2, #2
 80103c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	68da      	ldr	r2, [r3, #12]
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	f042 0201 	orr.w	r2, r2, #1
 80103d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	4a1e      	ldr	r2, [pc, #120]	@ (8010454 <HAL_TIM_Base_Start_IT+0xb0>)
 80103da:	4293      	cmp	r3, r2
 80103dc:	d018      	beq.n	8010410 <HAL_TIM_Base_Start_IT+0x6c>
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80103e6:	d013      	beq.n	8010410 <HAL_TIM_Base_Start_IT+0x6c>
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	4a1a      	ldr	r2, [pc, #104]	@ (8010458 <HAL_TIM_Base_Start_IT+0xb4>)
 80103ee:	4293      	cmp	r3, r2
 80103f0:	d00e      	beq.n	8010410 <HAL_TIM_Base_Start_IT+0x6c>
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	4a19      	ldr	r2, [pc, #100]	@ (801045c <HAL_TIM_Base_Start_IT+0xb8>)
 80103f8:	4293      	cmp	r3, r2
 80103fa:	d009      	beq.n	8010410 <HAL_TIM_Base_Start_IT+0x6c>
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	4a17      	ldr	r2, [pc, #92]	@ (8010460 <HAL_TIM_Base_Start_IT+0xbc>)
 8010402:	4293      	cmp	r3, r2
 8010404:	d004      	beq.n	8010410 <HAL_TIM_Base_Start_IT+0x6c>
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	4a16      	ldr	r2, [pc, #88]	@ (8010464 <HAL_TIM_Base_Start_IT+0xc0>)
 801040c:	4293      	cmp	r3, r2
 801040e:	d111      	bne.n	8010434 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	689b      	ldr	r3, [r3, #8]
 8010416:	f003 0307 	and.w	r3, r3, #7
 801041a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	2b06      	cmp	r3, #6
 8010420:	d010      	beq.n	8010444 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	681a      	ldr	r2, [r3, #0]
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	f042 0201 	orr.w	r2, r2, #1
 8010430:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010432:	e007      	b.n	8010444 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	681a      	ldr	r2, [r3, #0]
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	f042 0201 	orr.w	r2, r2, #1
 8010442:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010444:	2300      	movs	r3, #0
}
 8010446:	4618      	mov	r0, r3
 8010448:	3714      	adds	r7, #20
 801044a:	46bd      	mov	sp, r7
 801044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010450:	4770      	bx	lr
 8010452:	bf00      	nop
 8010454:	40010000 	.word	0x40010000
 8010458:	40000400 	.word	0x40000400
 801045c:	40000800 	.word	0x40000800
 8010460:	40000c00 	.word	0x40000c00
 8010464:	40014000 	.word	0x40014000

08010468 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010468:	b580      	push	{r7, lr}
 801046a:	b082      	sub	sp, #8
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d101      	bne.n	801047a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010476:	2301      	movs	r3, #1
 8010478:	e041      	b.n	80104fe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010480:	b2db      	uxtb	r3, r3
 8010482:	2b00      	cmp	r3, #0
 8010484:	d106      	bne.n	8010494 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	2200      	movs	r2, #0
 801048a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801048e:	6878      	ldr	r0, [r7, #4]
 8010490:	f000 f839 	bl	8010506 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	2202      	movs	r2, #2
 8010498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	681a      	ldr	r2, [r3, #0]
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	3304      	adds	r3, #4
 80104a4:	4619      	mov	r1, r3
 80104a6:	4610      	mov	r0, r2
 80104a8:	f000 fb8a 	bl	8010bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	2201      	movs	r2, #1
 80104b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	2201      	movs	r2, #1
 80104b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	2201      	movs	r2, #1
 80104c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	2201      	movs	r2, #1
 80104c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	2201      	movs	r2, #1
 80104d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	2201      	movs	r2, #1
 80104d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	2201      	movs	r2, #1
 80104e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	2201      	movs	r2, #1
 80104e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	2201      	movs	r2, #1
 80104f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	2201      	movs	r2, #1
 80104f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80104fc:	2300      	movs	r3, #0
}
 80104fe:	4618      	mov	r0, r3
 8010500:	3708      	adds	r7, #8
 8010502:	46bd      	mov	sp, r7
 8010504:	bd80      	pop	{r7, pc}

08010506 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8010506:	b480      	push	{r7}
 8010508:	b083      	sub	sp, #12
 801050a:	af00      	add	r7, sp, #0
 801050c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801050e:	bf00      	nop
 8010510:	370c      	adds	r7, #12
 8010512:	46bd      	mov	sp, r7
 8010514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010518:	4770      	bx	lr
	...

0801051c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b084      	sub	sp, #16
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
 8010524:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8010526:	683b      	ldr	r3, [r7, #0]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d109      	bne.n	8010540 <HAL_TIM_PWM_Start+0x24>
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8010532:	b2db      	uxtb	r3, r3
 8010534:	2b01      	cmp	r3, #1
 8010536:	bf14      	ite	ne
 8010538:	2301      	movne	r3, #1
 801053a:	2300      	moveq	r3, #0
 801053c:	b2db      	uxtb	r3, r3
 801053e:	e022      	b.n	8010586 <HAL_TIM_PWM_Start+0x6a>
 8010540:	683b      	ldr	r3, [r7, #0]
 8010542:	2b04      	cmp	r3, #4
 8010544:	d109      	bne.n	801055a <HAL_TIM_PWM_Start+0x3e>
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 801054c:	b2db      	uxtb	r3, r3
 801054e:	2b01      	cmp	r3, #1
 8010550:	bf14      	ite	ne
 8010552:	2301      	movne	r3, #1
 8010554:	2300      	moveq	r3, #0
 8010556:	b2db      	uxtb	r3, r3
 8010558:	e015      	b.n	8010586 <HAL_TIM_PWM_Start+0x6a>
 801055a:	683b      	ldr	r3, [r7, #0]
 801055c:	2b08      	cmp	r3, #8
 801055e:	d109      	bne.n	8010574 <HAL_TIM_PWM_Start+0x58>
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010566:	b2db      	uxtb	r3, r3
 8010568:	2b01      	cmp	r3, #1
 801056a:	bf14      	ite	ne
 801056c:	2301      	movne	r3, #1
 801056e:	2300      	moveq	r3, #0
 8010570:	b2db      	uxtb	r3, r3
 8010572:	e008      	b.n	8010586 <HAL_TIM_PWM_Start+0x6a>
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801057a:	b2db      	uxtb	r3, r3
 801057c:	2b01      	cmp	r3, #1
 801057e:	bf14      	ite	ne
 8010580:	2301      	movne	r3, #1
 8010582:	2300      	moveq	r3, #0
 8010584:	b2db      	uxtb	r3, r3
 8010586:	2b00      	cmp	r3, #0
 8010588:	d001      	beq.n	801058e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 801058a:	2301      	movs	r3, #1
 801058c:	e068      	b.n	8010660 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801058e:	683b      	ldr	r3, [r7, #0]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d104      	bne.n	801059e <HAL_TIM_PWM_Start+0x82>
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	2202      	movs	r2, #2
 8010598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801059c:	e013      	b.n	80105c6 <HAL_TIM_PWM_Start+0xaa>
 801059e:	683b      	ldr	r3, [r7, #0]
 80105a0:	2b04      	cmp	r3, #4
 80105a2:	d104      	bne.n	80105ae <HAL_TIM_PWM_Start+0x92>
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	2202      	movs	r2, #2
 80105a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80105ac:	e00b      	b.n	80105c6 <HAL_TIM_PWM_Start+0xaa>
 80105ae:	683b      	ldr	r3, [r7, #0]
 80105b0:	2b08      	cmp	r3, #8
 80105b2:	d104      	bne.n	80105be <HAL_TIM_PWM_Start+0xa2>
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	2202      	movs	r2, #2
 80105b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80105bc:	e003      	b.n	80105c6 <HAL_TIM_PWM_Start+0xaa>
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	2202      	movs	r2, #2
 80105c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	2201      	movs	r2, #1
 80105cc:	6839      	ldr	r1, [r7, #0]
 80105ce:	4618      	mov	r0, r3
 80105d0:	f000 fda8 	bl	8011124 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	4a23      	ldr	r2, [pc, #140]	@ (8010668 <HAL_TIM_PWM_Start+0x14c>)
 80105da:	4293      	cmp	r3, r2
 80105dc:	d107      	bne.n	80105ee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80105ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	4a1d      	ldr	r2, [pc, #116]	@ (8010668 <HAL_TIM_PWM_Start+0x14c>)
 80105f4:	4293      	cmp	r3, r2
 80105f6:	d018      	beq.n	801062a <HAL_TIM_PWM_Start+0x10e>
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010600:	d013      	beq.n	801062a <HAL_TIM_PWM_Start+0x10e>
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	4a19      	ldr	r2, [pc, #100]	@ (801066c <HAL_TIM_PWM_Start+0x150>)
 8010608:	4293      	cmp	r3, r2
 801060a:	d00e      	beq.n	801062a <HAL_TIM_PWM_Start+0x10e>
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	4a17      	ldr	r2, [pc, #92]	@ (8010670 <HAL_TIM_PWM_Start+0x154>)
 8010612:	4293      	cmp	r3, r2
 8010614:	d009      	beq.n	801062a <HAL_TIM_PWM_Start+0x10e>
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	4a16      	ldr	r2, [pc, #88]	@ (8010674 <HAL_TIM_PWM_Start+0x158>)
 801061c:	4293      	cmp	r3, r2
 801061e:	d004      	beq.n	801062a <HAL_TIM_PWM_Start+0x10e>
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	4a14      	ldr	r2, [pc, #80]	@ (8010678 <HAL_TIM_PWM_Start+0x15c>)
 8010626:	4293      	cmp	r3, r2
 8010628:	d111      	bne.n	801064e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	689b      	ldr	r3, [r3, #8]
 8010630:	f003 0307 	and.w	r3, r3, #7
 8010634:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	2b06      	cmp	r3, #6
 801063a:	d010      	beq.n	801065e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	681a      	ldr	r2, [r3, #0]
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	f042 0201 	orr.w	r2, r2, #1
 801064a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801064c:	e007      	b.n	801065e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	681a      	ldr	r2, [r3, #0]
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	f042 0201 	orr.w	r2, r2, #1
 801065c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801065e:	2300      	movs	r3, #0
}
 8010660:	4618      	mov	r0, r3
 8010662:	3710      	adds	r7, #16
 8010664:	46bd      	mov	sp, r7
 8010666:	bd80      	pop	{r7, pc}
 8010668:	40010000 	.word	0x40010000
 801066c:	40000400 	.word	0x40000400
 8010670:	40000800 	.word	0x40000800
 8010674:	40000c00 	.word	0x40000c00
 8010678:	40014000 	.word	0x40014000

0801067c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b084      	sub	sp, #16
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	68db      	ldr	r3, [r3, #12]
 801068a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	691b      	ldr	r3, [r3, #16]
 8010692:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8010694:	68bb      	ldr	r3, [r7, #8]
 8010696:	f003 0302 	and.w	r3, r3, #2
 801069a:	2b00      	cmp	r3, #0
 801069c:	d020      	beq.n	80106e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	f003 0302 	and.w	r3, r3, #2
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d01b      	beq.n	80106e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	f06f 0202 	mvn.w	r2, #2
 80106b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	2201      	movs	r2, #1
 80106b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	699b      	ldr	r3, [r3, #24]
 80106be:	f003 0303 	and.w	r3, r3, #3
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d003      	beq.n	80106ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80106c6:	6878      	ldr	r0, [r7, #4]
 80106c8:	f000 fa5b 	bl	8010b82 <HAL_TIM_IC_CaptureCallback>
 80106cc:	e005      	b.n	80106da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80106ce:	6878      	ldr	r0, [r7, #4]
 80106d0:	f000 fa4d 	bl	8010b6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80106d4:	6878      	ldr	r0, [r7, #4]
 80106d6:	f000 fa5e 	bl	8010b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	2200      	movs	r2, #0
 80106de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80106e0:	68bb      	ldr	r3, [r7, #8]
 80106e2:	f003 0304 	and.w	r3, r3, #4
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d020      	beq.n	801072c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	f003 0304 	and.w	r3, r3, #4
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d01b      	beq.n	801072c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	f06f 0204 	mvn.w	r2, #4
 80106fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	2202      	movs	r2, #2
 8010702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	699b      	ldr	r3, [r3, #24]
 801070a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801070e:	2b00      	cmp	r3, #0
 8010710:	d003      	beq.n	801071a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010712:	6878      	ldr	r0, [r7, #4]
 8010714:	f000 fa35 	bl	8010b82 <HAL_TIM_IC_CaptureCallback>
 8010718:	e005      	b.n	8010726 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801071a:	6878      	ldr	r0, [r7, #4]
 801071c:	f000 fa27 	bl	8010b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010720:	6878      	ldr	r0, [r7, #4]
 8010722:	f000 fa38 	bl	8010b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	2200      	movs	r2, #0
 801072a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 801072c:	68bb      	ldr	r3, [r7, #8]
 801072e:	f003 0308 	and.w	r3, r3, #8
 8010732:	2b00      	cmp	r3, #0
 8010734:	d020      	beq.n	8010778 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	f003 0308 	and.w	r3, r3, #8
 801073c:	2b00      	cmp	r3, #0
 801073e:	d01b      	beq.n	8010778 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	f06f 0208 	mvn.w	r2, #8
 8010748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	2204      	movs	r2, #4
 801074e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	69db      	ldr	r3, [r3, #28]
 8010756:	f003 0303 	and.w	r3, r3, #3
 801075a:	2b00      	cmp	r3, #0
 801075c:	d003      	beq.n	8010766 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801075e:	6878      	ldr	r0, [r7, #4]
 8010760:	f000 fa0f 	bl	8010b82 <HAL_TIM_IC_CaptureCallback>
 8010764:	e005      	b.n	8010772 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010766:	6878      	ldr	r0, [r7, #4]
 8010768:	f000 fa01 	bl	8010b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801076c:	6878      	ldr	r0, [r7, #4]
 801076e:	f000 fa12 	bl	8010b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	2200      	movs	r2, #0
 8010776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8010778:	68bb      	ldr	r3, [r7, #8]
 801077a:	f003 0310 	and.w	r3, r3, #16
 801077e:	2b00      	cmp	r3, #0
 8010780:	d020      	beq.n	80107c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	f003 0310 	and.w	r3, r3, #16
 8010788:	2b00      	cmp	r3, #0
 801078a:	d01b      	beq.n	80107c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	f06f 0210 	mvn.w	r2, #16
 8010794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	2208      	movs	r2, #8
 801079a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	69db      	ldr	r3, [r3, #28]
 80107a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d003      	beq.n	80107b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80107aa:	6878      	ldr	r0, [r7, #4]
 80107ac:	f000 f9e9 	bl	8010b82 <HAL_TIM_IC_CaptureCallback>
 80107b0:	e005      	b.n	80107be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80107b2:	6878      	ldr	r0, [r7, #4]
 80107b4:	f000 f9db 	bl	8010b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80107b8:	6878      	ldr	r0, [r7, #4]
 80107ba:	f000 f9ec 	bl	8010b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	2200      	movs	r2, #0
 80107c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80107c4:	68bb      	ldr	r3, [r7, #8]
 80107c6:	f003 0301 	and.w	r3, r3, #1
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d00c      	beq.n	80107e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	f003 0301 	and.w	r3, r3, #1
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d007      	beq.n	80107e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	f06f 0201 	mvn.w	r2, #1
 80107e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80107e2:	6878      	ldr	r0, [r7, #4]
 80107e4:	f7fb ff68 	bl	800c6b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80107e8:	68bb      	ldr	r3, [r7, #8]
 80107ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d00c      	beq.n	801080c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d007      	beq.n	801080c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8010804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010806:	6878      	ldr	r0, [r7, #4]
 8010808:	f000 fd2a 	bl	8011260 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 801080c:	68bb      	ldr	r3, [r7, #8]
 801080e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010812:	2b00      	cmp	r3, #0
 8010814:	d00c      	beq.n	8010830 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801081c:	2b00      	cmp	r3, #0
 801081e:	d007      	beq.n	8010830 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8010828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801082a:	6878      	ldr	r0, [r7, #4]
 801082c:	f000 f9bd 	bl	8010baa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8010830:	68bb      	ldr	r3, [r7, #8]
 8010832:	f003 0320 	and.w	r3, r3, #32
 8010836:	2b00      	cmp	r3, #0
 8010838:	d00c      	beq.n	8010854 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	f003 0320 	and.w	r3, r3, #32
 8010840:	2b00      	cmp	r3, #0
 8010842:	d007      	beq.n	8010854 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	f06f 0220 	mvn.w	r2, #32
 801084c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801084e:	6878      	ldr	r0, [r7, #4]
 8010850:	f000 fcfc 	bl	801124c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010854:	bf00      	nop
 8010856:	3710      	adds	r7, #16
 8010858:	46bd      	mov	sp, r7
 801085a:	bd80      	pop	{r7, pc}

0801085c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b086      	sub	sp, #24
 8010860:	af00      	add	r7, sp, #0
 8010862:	60f8      	str	r0, [r7, #12]
 8010864:	60b9      	str	r1, [r7, #8]
 8010866:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010868:	2300      	movs	r3, #0
 801086a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010872:	2b01      	cmp	r3, #1
 8010874:	d101      	bne.n	801087a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8010876:	2302      	movs	r3, #2
 8010878:	e0ae      	b.n	80109d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	2201      	movs	r2, #1
 801087e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	2b0c      	cmp	r3, #12
 8010886:	f200 809f 	bhi.w	80109c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 801088a:	a201      	add	r2, pc, #4	@ (adr r2, 8010890 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801088c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010890:	080108c5 	.word	0x080108c5
 8010894:	080109c9 	.word	0x080109c9
 8010898:	080109c9 	.word	0x080109c9
 801089c:	080109c9 	.word	0x080109c9
 80108a0:	08010905 	.word	0x08010905
 80108a4:	080109c9 	.word	0x080109c9
 80108a8:	080109c9 	.word	0x080109c9
 80108ac:	080109c9 	.word	0x080109c9
 80108b0:	08010947 	.word	0x08010947
 80108b4:	080109c9 	.word	0x080109c9
 80108b8:	080109c9 	.word	0x080109c9
 80108bc:	080109c9 	.word	0x080109c9
 80108c0:	08010987 	.word	0x08010987
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	68b9      	ldr	r1, [r7, #8]
 80108ca:	4618      	mov	r0, r3
 80108cc:	f000 fa04 	bl	8010cd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	699a      	ldr	r2, [r3, #24]
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	f042 0208 	orr.w	r2, r2, #8
 80108de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	699a      	ldr	r2, [r3, #24]
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	f022 0204 	bic.w	r2, r2, #4
 80108ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	6999      	ldr	r1, [r3, #24]
 80108f6:	68bb      	ldr	r3, [r7, #8]
 80108f8:	691a      	ldr	r2, [r3, #16]
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	430a      	orrs	r2, r1
 8010900:	619a      	str	r2, [r3, #24]
      break;
 8010902:	e064      	b.n	80109ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	68b9      	ldr	r1, [r7, #8]
 801090a:	4618      	mov	r0, r3
 801090c:	f000 fa4a 	bl	8010da4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	699a      	ldr	r2, [r3, #24]
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801091e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	699a      	ldr	r2, [r3, #24]
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801092e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	6999      	ldr	r1, [r3, #24]
 8010936:	68bb      	ldr	r3, [r7, #8]
 8010938:	691b      	ldr	r3, [r3, #16]
 801093a:	021a      	lsls	r2, r3, #8
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	430a      	orrs	r2, r1
 8010942:	619a      	str	r2, [r3, #24]
      break;
 8010944:	e043      	b.n	80109ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	68b9      	ldr	r1, [r7, #8]
 801094c:	4618      	mov	r0, r3
 801094e:	f000 fa95 	bl	8010e7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	69da      	ldr	r2, [r3, #28]
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	f042 0208 	orr.w	r2, r2, #8
 8010960:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	69da      	ldr	r2, [r3, #28]
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	f022 0204 	bic.w	r2, r2, #4
 8010970:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	69d9      	ldr	r1, [r3, #28]
 8010978:	68bb      	ldr	r3, [r7, #8]
 801097a:	691a      	ldr	r2, [r3, #16]
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	430a      	orrs	r2, r1
 8010982:	61da      	str	r2, [r3, #28]
      break;
 8010984:	e023      	b.n	80109ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	68b9      	ldr	r1, [r7, #8]
 801098c:	4618      	mov	r0, r3
 801098e:	f000 fadf 	bl	8010f50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	69da      	ldr	r2, [r3, #28]
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80109a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	69da      	ldr	r2, [r3, #28]
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80109b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	69d9      	ldr	r1, [r3, #28]
 80109b8:	68bb      	ldr	r3, [r7, #8]
 80109ba:	691b      	ldr	r3, [r3, #16]
 80109bc:	021a      	lsls	r2, r3, #8
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	430a      	orrs	r2, r1
 80109c4:	61da      	str	r2, [r3, #28]
      break;
 80109c6:	e002      	b.n	80109ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80109c8:	2301      	movs	r3, #1
 80109ca:	75fb      	strb	r3, [r7, #23]
      break;
 80109cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	2200      	movs	r2, #0
 80109d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80109d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80109d8:	4618      	mov	r0, r3
 80109da:	3718      	adds	r7, #24
 80109dc:	46bd      	mov	sp, r7
 80109de:	bd80      	pop	{r7, pc}

080109e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b084      	sub	sp, #16
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
 80109e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80109ea:	2300      	movs	r3, #0
 80109ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80109f4:	2b01      	cmp	r3, #1
 80109f6:	d101      	bne.n	80109fc <HAL_TIM_ConfigClockSource+0x1c>
 80109f8:	2302      	movs	r3, #2
 80109fa:	e0b4      	b.n	8010b66 <HAL_TIM_ConfigClockSource+0x186>
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	2201      	movs	r2, #1
 8010a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	2202      	movs	r2, #2
 8010a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	689b      	ldr	r3, [r3, #8]
 8010a12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010a14:	68bb      	ldr	r3, [r7, #8]
 8010a16:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8010a1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010a1c:	68bb      	ldr	r3, [r7, #8]
 8010a1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010a22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	68ba      	ldr	r2, [r7, #8]
 8010a2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010a2c:	683b      	ldr	r3, [r7, #0]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010a34:	d03e      	beq.n	8010ab4 <HAL_TIM_ConfigClockSource+0xd4>
 8010a36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010a3a:	f200 8087 	bhi.w	8010b4c <HAL_TIM_ConfigClockSource+0x16c>
 8010a3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010a42:	f000 8086 	beq.w	8010b52 <HAL_TIM_ConfigClockSource+0x172>
 8010a46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010a4a:	d87f      	bhi.n	8010b4c <HAL_TIM_ConfigClockSource+0x16c>
 8010a4c:	2b70      	cmp	r3, #112	@ 0x70
 8010a4e:	d01a      	beq.n	8010a86 <HAL_TIM_ConfigClockSource+0xa6>
 8010a50:	2b70      	cmp	r3, #112	@ 0x70
 8010a52:	d87b      	bhi.n	8010b4c <HAL_TIM_ConfigClockSource+0x16c>
 8010a54:	2b60      	cmp	r3, #96	@ 0x60
 8010a56:	d050      	beq.n	8010afa <HAL_TIM_ConfigClockSource+0x11a>
 8010a58:	2b60      	cmp	r3, #96	@ 0x60
 8010a5a:	d877      	bhi.n	8010b4c <HAL_TIM_ConfigClockSource+0x16c>
 8010a5c:	2b50      	cmp	r3, #80	@ 0x50
 8010a5e:	d03c      	beq.n	8010ada <HAL_TIM_ConfigClockSource+0xfa>
 8010a60:	2b50      	cmp	r3, #80	@ 0x50
 8010a62:	d873      	bhi.n	8010b4c <HAL_TIM_ConfigClockSource+0x16c>
 8010a64:	2b40      	cmp	r3, #64	@ 0x40
 8010a66:	d058      	beq.n	8010b1a <HAL_TIM_ConfigClockSource+0x13a>
 8010a68:	2b40      	cmp	r3, #64	@ 0x40
 8010a6a:	d86f      	bhi.n	8010b4c <HAL_TIM_ConfigClockSource+0x16c>
 8010a6c:	2b30      	cmp	r3, #48	@ 0x30
 8010a6e:	d064      	beq.n	8010b3a <HAL_TIM_ConfigClockSource+0x15a>
 8010a70:	2b30      	cmp	r3, #48	@ 0x30
 8010a72:	d86b      	bhi.n	8010b4c <HAL_TIM_ConfigClockSource+0x16c>
 8010a74:	2b20      	cmp	r3, #32
 8010a76:	d060      	beq.n	8010b3a <HAL_TIM_ConfigClockSource+0x15a>
 8010a78:	2b20      	cmp	r3, #32
 8010a7a:	d867      	bhi.n	8010b4c <HAL_TIM_ConfigClockSource+0x16c>
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d05c      	beq.n	8010b3a <HAL_TIM_ConfigClockSource+0x15a>
 8010a80:	2b10      	cmp	r3, #16
 8010a82:	d05a      	beq.n	8010b3a <HAL_TIM_ConfigClockSource+0x15a>
 8010a84:	e062      	b.n	8010b4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010a8a:	683b      	ldr	r3, [r7, #0]
 8010a8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8010a8e:	683b      	ldr	r3, [r7, #0]
 8010a90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8010a92:	683b      	ldr	r3, [r7, #0]
 8010a94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010a96:	f000 fb25 	bl	80110e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	689b      	ldr	r3, [r3, #8]
 8010aa0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010aa2:	68bb      	ldr	r3, [r7, #8]
 8010aa4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8010aa8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	68ba      	ldr	r2, [r7, #8]
 8010ab0:	609a      	str	r2, [r3, #8]
      break;
 8010ab2:	e04f      	b.n	8010b54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010ab8:	683b      	ldr	r3, [r7, #0]
 8010aba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8010abc:	683b      	ldr	r3, [r7, #0]
 8010abe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8010ac0:	683b      	ldr	r3, [r7, #0]
 8010ac2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010ac4:	f000 fb0e 	bl	80110e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	689a      	ldr	r2, [r3, #8]
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010ad6:	609a      	str	r2, [r3, #8]
      break;
 8010ad8:	e03c      	b.n	8010b54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010ade:	683b      	ldr	r3, [r7, #0]
 8010ae0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010ae2:	683b      	ldr	r3, [r7, #0]
 8010ae4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010ae6:	461a      	mov	r2, r3
 8010ae8:	f000 fa82 	bl	8010ff0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	2150      	movs	r1, #80	@ 0x50
 8010af2:	4618      	mov	r0, r3
 8010af4:	f000 fadb 	bl	80110ae <TIM_ITRx_SetConfig>
      break;
 8010af8:	e02c      	b.n	8010b54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010b02:	683b      	ldr	r3, [r7, #0]
 8010b04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010b06:	461a      	mov	r2, r3
 8010b08:	f000 faa1 	bl	801104e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	2160      	movs	r1, #96	@ 0x60
 8010b12:	4618      	mov	r0, r3
 8010b14:	f000 facb 	bl	80110ae <TIM_ITRx_SetConfig>
      break;
 8010b18:	e01c      	b.n	8010b54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010b1e:	683b      	ldr	r3, [r7, #0]
 8010b20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010b22:	683b      	ldr	r3, [r7, #0]
 8010b24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010b26:	461a      	mov	r2, r3
 8010b28:	f000 fa62 	bl	8010ff0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	2140      	movs	r1, #64	@ 0x40
 8010b32:	4618      	mov	r0, r3
 8010b34:	f000 fabb 	bl	80110ae <TIM_ITRx_SetConfig>
      break;
 8010b38:	e00c      	b.n	8010b54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	681a      	ldr	r2, [r3, #0]
 8010b3e:	683b      	ldr	r3, [r7, #0]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	4619      	mov	r1, r3
 8010b44:	4610      	mov	r0, r2
 8010b46:	f000 fab2 	bl	80110ae <TIM_ITRx_SetConfig>
      break;
 8010b4a:	e003      	b.n	8010b54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8010b4c:	2301      	movs	r3, #1
 8010b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8010b50:	e000      	b.n	8010b54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8010b52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	2201      	movs	r2, #1
 8010b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	2200      	movs	r2, #0
 8010b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b66:	4618      	mov	r0, r3
 8010b68:	3710      	adds	r7, #16
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	bd80      	pop	{r7, pc}

08010b6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010b6e:	b480      	push	{r7}
 8010b70:	b083      	sub	sp, #12
 8010b72:	af00      	add	r7, sp, #0
 8010b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010b76:	bf00      	nop
 8010b78:	370c      	adds	r7, #12
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b80:	4770      	bx	lr

08010b82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010b82:	b480      	push	{r7}
 8010b84:	b083      	sub	sp, #12
 8010b86:	af00      	add	r7, sp, #0
 8010b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010b8a:	bf00      	nop
 8010b8c:	370c      	adds	r7, #12
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b94:	4770      	bx	lr

08010b96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010b96:	b480      	push	{r7}
 8010b98:	b083      	sub	sp, #12
 8010b9a:	af00      	add	r7, sp, #0
 8010b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010b9e:	bf00      	nop
 8010ba0:	370c      	adds	r7, #12
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba8:	4770      	bx	lr

08010baa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010baa:	b480      	push	{r7}
 8010bac:	b083      	sub	sp, #12
 8010bae:	af00      	add	r7, sp, #0
 8010bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010bb2:	bf00      	nop
 8010bb4:	370c      	adds	r7, #12
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bbc:	4770      	bx	lr
	...

08010bc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010bc0:	b480      	push	{r7}
 8010bc2:	b085      	sub	sp, #20
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
 8010bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	4a3a      	ldr	r2, [pc, #232]	@ (8010cbc <TIM_Base_SetConfig+0xfc>)
 8010bd4:	4293      	cmp	r3, r2
 8010bd6:	d00f      	beq.n	8010bf8 <TIM_Base_SetConfig+0x38>
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010bde:	d00b      	beq.n	8010bf8 <TIM_Base_SetConfig+0x38>
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	4a37      	ldr	r2, [pc, #220]	@ (8010cc0 <TIM_Base_SetConfig+0x100>)
 8010be4:	4293      	cmp	r3, r2
 8010be6:	d007      	beq.n	8010bf8 <TIM_Base_SetConfig+0x38>
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	4a36      	ldr	r2, [pc, #216]	@ (8010cc4 <TIM_Base_SetConfig+0x104>)
 8010bec:	4293      	cmp	r3, r2
 8010bee:	d003      	beq.n	8010bf8 <TIM_Base_SetConfig+0x38>
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	4a35      	ldr	r2, [pc, #212]	@ (8010cc8 <TIM_Base_SetConfig+0x108>)
 8010bf4:	4293      	cmp	r3, r2
 8010bf6:	d108      	bne.n	8010c0a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010bfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010c00:	683b      	ldr	r3, [r7, #0]
 8010c02:	685b      	ldr	r3, [r3, #4]
 8010c04:	68fa      	ldr	r2, [r7, #12]
 8010c06:	4313      	orrs	r3, r2
 8010c08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	4a2b      	ldr	r2, [pc, #172]	@ (8010cbc <TIM_Base_SetConfig+0xfc>)
 8010c0e:	4293      	cmp	r3, r2
 8010c10:	d01b      	beq.n	8010c4a <TIM_Base_SetConfig+0x8a>
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010c18:	d017      	beq.n	8010c4a <TIM_Base_SetConfig+0x8a>
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	4a28      	ldr	r2, [pc, #160]	@ (8010cc0 <TIM_Base_SetConfig+0x100>)
 8010c1e:	4293      	cmp	r3, r2
 8010c20:	d013      	beq.n	8010c4a <TIM_Base_SetConfig+0x8a>
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	4a27      	ldr	r2, [pc, #156]	@ (8010cc4 <TIM_Base_SetConfig+0x104>)
 8010c26:	4293      	cmp	r3, r2
 8010c28:	d00f      	beq.n	8010c4a <TIM_Base_SetConfig+0x8a>
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	4a26      	ldr	r2, [pc, #152]	@ (8010cc8 <TIM_Base_SetConfig+0x108>)
 8010c2e:	4293      	cmp	r3, r2
 8010c30:	d00b      	beq.n	8010c4a <TIM_Base_SetConfig+0x8a>
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	4a25      	ldr	r2, [pc, #148]	@ (8010ccc <TIM_Base_SetConfig+0x10c>)
 8010c36:	4293      	cmp	r3, r2
 8010c38:	d007      	beq.n	8010c4a <TIM_Base_SetConfig+0x8a>
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	4a24      	ldr	r2, [pc, #144]	@ (8010cd0 <TIM_Base_SetConfig+0x110>)
 8010c3e:	4293      	cmp	r3, r2
 8010c40:	d003      	beq.n	8010c4a <TIM_Base_SetConfig+0x8a>
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	4a23      	ldr	r2, [pc, #140]	@ (8010cd4 <TIM_Base_SetConfig+0x114>)
 8010c46:	4293      	cmp	r3, r2
 8010c48:	d108      	bne.n	8010c5c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010c50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010c52:	683b      	ldr	r3, [r7, #0]
 8010c54:	68db      	ldr	r3, [r3, #12]
 8010c56:	68fa      	ldr	r2, [r7, #12]
 8010c58:	4313      	orrs	r3, r2
 8010c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010c62:	683b      	ldr	r3, [r7, #0]
 8010c64:	695b      	ldr	r3, [r3, #20]
 8010c66:	4313      	orrs	r3, r2
 8010c68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	68fa      	ldr	r2, [r7, #12]
 8010c6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010c70:	683b      	ldr	r3, [r7, #0]
 8010c72:	689a      	ldr	r2, [r3, #8]
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010c78:	683b      	ldr	r3, [r7, #0]
 8010c7a:	681a      	ldr	r2, [r3, #0]
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	4a0e      	ldr	r2, [pc, #56]	@ (8010cbc <TIM_Base_SetConfig+0xfc>)
 8010c84:	4293      	cmp	r3, r2
 8010c86:	d103      	bne.n	8010c90 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010c88:	683b      	ldr	r3, [r7, #0]
 8010c8a:	691a      	ldr	r2, [r3, #16]
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	2201      	movs	r2, #1
 8010c94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	691b      	ldr	r3, [r3, #16]
 8010c9a:	f003 0301 	and.w	r3, r3, #1
 8010c9e:	2b01      	cmp	r3, #1
 8010ca0:	d105      	bne.n	8010cae <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	691b      	ldr	r3, [r3, #16]
 8010ca6:	f023 0201 	bic.w	r2, r3, #1
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	611a      	str	r2, [r3, #16]
  }
}
 8010cae:	bf00      	nop
 8010cb0:	3714      	adds	r7, #20
 8010cb2:	46bd      	mov	sp, r7
 8010cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb8:	4770      	bx	lr
 8010cba:	bf00      	nop
 8010cbc:	40010000 	.word	0x40010000
 8010cc0:	40000400 	.word	0x40000400
 8010cc4:	40000800 	.word	0x40000800
 8010cc8:	40000c00 	.word	0x40000c00
 8010ccc:	40014000 	.word	0x40014000
 8010cd0:	40014400 	.word	0x40014400
 8010cd4:	40014800 	.word	0x40014800

08010cd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010cd8:	b480      	push	{r7}
 8010cda:	b087      	sub	sp, #28
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	6078      	str	r0, [r7, #4]
 8010ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	6a1b      	ldr	r3, [r3, #32]
 8010ce6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	6a1b      	ldr	r3, [r3, #32]
 8010cec:	f023 0201 	bic.w	r2, r3, #1
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	685b      	ldr	r3, [r3, #4]
 8010cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	699b      	ldr	r3, [r3, #24]
 8010cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	f023 0303 	bic.w	r3, r3, #3
 8010d0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010d10:	683b      	ldr	r3, [r7, #0]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	68fa      	ldr	r2, [r7, #12]
 8010d16:	4313      	orrs	r3, r2
 8010d18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010d1a:	697b      	ldr	r3, [r7, #20]
 8010d1c:	f023 0302 	bic.w	r3, r3, #2
 8010d20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010d22:	683b      	ldr	r3, [r7, #0]
 8010d24:	689b      	ldr	r3, [r3, #8]
 8010d26:	697a      	ldr	r2, [r7, #20]
 8010d28:	4313      	orrs	r3, r2
 8010d2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	4a1c      	ldr	r2, [pc, #112]	@ (8010da0 <TIM_OC1_SetConfig+0xc8>)
 8010d30:	4293      	cmp	r3, r2
 8010d32:	d10c      	bne.n	8010d4e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010d34:	697b      	ldr	r3, [r7, #20]
 8010d36:	f023 0308 	bic.w	r3, r3, #8
 8010d3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010d3c:	683b      	ldr	r3, [r7, #0]
 8010d3e:	68db      	ldr	r3, [r3, #12]
 8010d40:	697a      	ldr	r2, [r7, #20]
 8010d42:	4313      	orrs	r3, r2
 8010d44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010d46:	697b      	ldr	r3, [r7, #20]
 8010d48:	f023 0304 	bic.w	r3, r3, #4
 8010d4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	4a13      	ldr	r2, [pc, #76]	@ (8010da0 <TIM_OC1_SetConfig+0xc8>)
 8010d52:	4293      	cmp	r3, r2
 8010d54:	d111      	bne.n	8010d7a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010d56:	693b      	ldr	r3, [r7, #16]
 8010d58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010d5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010d5e:	693b      	ldr	r3, [r7, #16]
 8010d60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010d64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010d66:	683b      	ldr	r3, [r7, #0]
 8010d68:	695b      	ldr	r3, [r3, #20]
 8010d6a:	693a      	ldr	r2, [r7, #16]
 8010d6c:	4313      	orrs	r3, r2
 8010d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010d70:	683b      	ldr	r3, [r7, #0]
 8010d72:	699b      	ldr	r3, [r3, #24]
 8010d74:	693a      	ldr	r2, [r7, #16]
 8010d76:	4313      	orrs	r3, r2
 8010d78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	693a      	ldr	r2, [r7, #16]
 8010d7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	68fa      	ldr	r2, [r7, #12]
 8010d84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010d86:	683b      	ldr	r3, [r7, #0]
 8010d88:	685a      	ldr	r2, [r3, #4]
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	697a      	ldr	r2, [r7, #20]
 8010d92:	621a      	str	r2, [r3, #32]
}
 8010d94:	bf00      	nop
 8010d96:	371c      	adds	r7, #28
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9e:	4770      	bx	lr
 8010da0:	40010000 	.word	0x40010000

08010da4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010da4:	b480      	push	{r7}
 8010da6:	b087      	sub	sp, #28
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
 8010dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	6a1b      	ldr	r3, [r3, #32]
 8010db2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	6a1b      	ldr	r3, [r3, #32]
 8010db8:	f023 0210 	bic.w	r2, r3, #16
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	685b      	ldr	r3, [r3, #4]
 8010dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	699b      	ldr	r3, [r3, #24]
 8010dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010dda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010ddc:	683b      	ldr	r3, [r7, #0]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	021b      	lsls	r3, r3, #8
 8010de2:	68fa      	ldr	r2, [r7, #12]
 8010de4:	4313      	orrs	r3, r2
 8010de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010de8:	697b      	ldr	r3, [r7, #20]
 8010dea:	f023 0320 	bic.w	r3, r3, #32
 8010dee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010df0:	683b      	ldr	r3, [r7, #0]
 8010df2:	689b      	ldr	r3, [r3, #8]
 8010df4:	011b      	lsls	r3, r3, #4
 8010df6:	697a      	ldr	r2, [r7, #20]
 8010df8:	4313      	orrs	r3, r2
 8010dfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	4a1e      	ldr	r2, [pc, #120]	@ (8010e78 <TIM_OC2_SetConfig+0xd4>)
 8010e00:	4293      	cmp	r3, r2
 8010e02:	d10d      	bne.n	8010e20 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010e04:	697b      	ldr	r3, [r7, #20]
 8010e06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010e0c:	683b      	ldr	r3, [r7, #0]
 8010e0e:	68db      	ldr	r3, [r3, #12]
 8010e10:	011b      	lsls	r3, r3, #4
 8010e12:	697a      	ldr	r2, [r7, #20]
 8010e14:	4313      	orrs	r3, r2
 8010e16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010e18:	697b      	ldr	r3, [r7, #20]
 8010e1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010e1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	4a15      	ldr	r2, [pc, #84]	@ (8010e78 <TIM_OC2_SetConfig+0xd4>)
 8010e24:	4293      	cmp	r3, r2
 8010e26:	d113      	bne.n	8010e50 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010e28:	693b      	ldr	r3, [r7, #16]
 8010e2a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010e2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010e30:	693b      	ldr	r3, [r7, #16]
 8010e32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010e36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010e38:	683b      	ldr	r3, [r7, #0]
 8010e3a:	695b      	ldr	r3, [r3, #20]
 8010e3c:	009b      	lsls	r3, r3, #2
 8010e3e:	693a      	ldr	r2, [r7, #16]
 8010e40:	4313      	orrs	r3, r2
 8010e42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010e44:	683b      	ldr	r3, [r7, #0]
 8010e46:	699b      	ldr	r3, [r3, #24]
 8010e48:	009b      	lsls	r3, r3, #2
 8010e4a:	693a      	ldr	r2, [r7, #16]
 8010e4c:	4313      	orrs	r3, r2
 8010e4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	693a      	ldr	r2, [r7, #16]
 8010e54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	68fa      	ldr	r2, [r7, #12]
 8010e5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010e5c:	683b      	ldr	r3, [r7, #0]
 8010e5e:	685a      	ldr	r2, [r3, #4]
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	697a      	ldr	r2, [r7, #20]
 8010e68:	621a      	str	r2, [r3, #32]
}
 8010e6a:	bf00      	nop
 8010e6c:	371c      	adds	r7, #28
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e74:	4770      	bx	lr
 8010e76:	bf00      	nop
 8010e78:	40010000 	.word	0x40010000

08010e7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010e7c:	b480      	push	{r7}
 8010e7e:	b087      	sub	sp, #28
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	6078      	str	r0, [r7, #4]
 8010e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	6a1b      	ldr	r3, [r3, #32]
 8010e8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	6a1b      	ldr	r3, [r3, #32]
 8010e90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	685b      	ldr	r3, [r3, #4]
 8010e9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	69db      	ldr	r3, [r3, #28]
 8010ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	f023 0303 	bic.w	r3, r3, #3
 8010eb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010eb4:	683b      	ldr	r3, [r7, #0]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	68fa      	ldr	r2, [r7, #12]
 8010eba:	4313      	orrs	r3, r2
 8010ebc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010ebe:	697b      	ldr	r3, [r7, #20]
 8010ec0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010ec4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010ec6:	683b      	ldr	r3, [r7, #0]
 8010ec8:	689b      	ldr	r3, [r3, #8]
 8010eca:	021b      	lsls	r3, r3, #8
 8010ecc:	697a      	ldr	r2, [r7, #20]
 8010ece:	4313      	orrs	r3, r2
 8010ed0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	4a1d      	ldr	r2, [pc, #116]	@ (8010f4c <TIM_OC3_SetConfig+0xd0>)
 8010ed6:	4293      	cmp	r3, r2
 8010ed8:	d10d      	bne.n	8010ef6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010eda:	697b      	ldr	r3, [r7, #20]
 8010edc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010ee0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010ee2:	683b      	ldr	r3, [r7, #0]
 8010ee4:	68db      	ldr	r3, [r3, #12]
 8010ee6:	021b      	lsls	r3, r3, #8
 8010ee8:	697a      	ldr	r2, [r7, #20]
 8010eea:	4313      	orrs	r3, r2
 8010eec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010eee:	697b      	ldr	r3, [r7, #20]
 8010ef0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010ef4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	4a14      	ldr	r2, [pc, #80]	@ (8010f4c <TIM_OC3_SetConfig+0xd0>)
 8010efa:	4293      	cmp	r3, r2
 8010efc:	d113      	bne.n	8010f26 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010efe:	693b      	ldr	r3, [r7, #16]
 8010f00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010f04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010f06:	693b      	ldr	r3, [r7, #16]
 8010f08:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010f0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010f0e:	683b      	ldr	r3, [r7, #0]
 8010f10:	695b      	ldr	r3, [r3, #20]
 8010f12:	011b      	lsls	r3, r3, #4
 8010f14:	693a      	ldr	r2, [r7, #16]
 8010f16:	4313      	orrs	r3, r2
 8010f18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010f1a:	683b      	ldr	r3, [r7, #0]
 8010f1c:	699b      	ldr	r3, [r3, #24]
 8010f1e:	011b      	lsls	r3, r3, #4
 8010f20:	693a      	ldr	r2, [r7, #16]
 8010f22:	4313      	orrs	r3, r2
 8010f24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	693a      	ldr	r2, [r7, #16]
 8010f2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	68fa      	ldr	r2, [r7, #12]
 8010f30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010f32:	683b      	ldr	r3, [r7, #0]
 8010f34:	685a      	ldr	r2, [r3, #4]
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	697a      	ldr	r2, [r7, #20]
 8010f3e:	621a      	str	r2, [r3, #32]
}
 8010f40:	bf00      	nop
 8010f42:	371c      	adds	r7, #28
 8010f44:	46bd      	mov	sp, r7
 8010f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4a:	4770      	bx	lr
 8010f4c:	40010000 	.word	0x40010000

08010f50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010f50:	b480      	push	{r7}
 8010f52:	b087      	sub	sp, #28
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]
 8010f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	6a1b      	ldr	r3, [r3, #32]
 8010f5e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	6a1b      	ldr	r3, [r3, #32]
 8010f64:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	685b      	ldr	r3, [r3, #4]
 8010f70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	69db      	ldr	r3, [r3, #28]
 8010f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010f86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010f88:	683b      	ldr	r3, [r7, #0]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	021b      	lsls	r3, r3, #8
 8010f8e:	68fa      	ldr	r2, [r7, #12]
 8010f90:	4313      	orrs	r3, r2
 8010f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010f94:	693b      	ldr	r3, [r7, #16]
 8010f96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010f9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010f9c:	683b      	ldr	r3, [r7, #0]
 8010f9e:	689b      	ldr	r3, [r3, #8]
 8010fa0:	031b      	lsls	r3, r3, #12
 8010fa2:	693a      	ldr	r2, [r7, #16]
 8010fa4:	4313      	orrs	r3, r2
 8010fa6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	4a10      	ldr	r2, [pc, #64]	@ (8010fec <TIM_OC4_SetConfig+0x9c>)
 8010fac:	4293      	cmp	r3, r2
 8010fae:	d109      	bne.n	8010fc4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010fb0:	697b      	ldr	r3, [r7, #20]
 8010fb2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010fb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010fb8:	683b      	ldr	r3, [r7, #0]
 8010fba:	695b      	ldr	r3, [r3, #20]
 8010fbc:	019b      	lsls	r3, r3, #6
 8010fbe:	697a      	ldr	r2, [r7, #20]
 8010fc0:	4313      	orrs	r3, r2
 8010fc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	697a      	ldr	r2, [r7, #20]
 8010fc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	68fa      	ldr	r2, [r7, #12]
 8010fce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010fd0:	683b      	ldr	r3, [r7, #0]
 8010fd2:	685a      	ldr	r2, [r3, #4]
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	693a      	ldr	r2, [r7, #16]
 8010fdc:	621a      	str	r2, [r3, #32]
}
 8010fde:	bf00      	nop
 8010fe0:	371c      	adds	r7, #28
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe8:	4770      	bx	lr
 8010fea:	bf00      	nop
 8010fec:	40010000 	.word	0x40010000

08010ff0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010ff0:	b480      	push	{r7}
 8010ff2:	b087      	sub	sp, #28
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	60f8      	str	r0, [r7, #12]
 8010ff8:	60b9      	str	r1, [r7, #8]
 8010ffa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	6a1b      	ldr	r3, [r3, #32]
 8011000:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	6a1b      	ldr	r3, [r3, #32]
 8011006:	f023 0201 	bic.w	r2, r3, #1
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	699b      	ldr	r3, [r3, #24]
 8011012:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011014:	693b      	ldr	r3, [r7, #16]
 8011016:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801101a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	011b      	lsls	r3, r3, #4
 8011020:	693a      	ldr	r2, [r7, #16]
 8011022:	4313      	orrs	r3, r2
 8011024:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011026:	697b      	ldr	r3, [r7, #20]
 8011028:	f023 030a 	bic.w	r3, r3, #10
 801102c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801102e:	697a      	ldr	r2, [r7, #20]
 8011030:	68bb      	ldr	r3, [r7, #8]
 8011032:	4313      	orrs	r3, r2
 8011034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	693a      	ldr	r2, [r7, #16]
 801103a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	697a      	ldr	r2, [r7, #20]
 8011040:	621a      	str	r2, [r3, #32]
}
 8011042:	bf00      	nop
 8011044:	371c      	adds	r7, #28
 8011046:	46bd      	mov	sp, r7
 8011048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104c:	4770      	bx	lr

0801104e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801104e:	b480      	push	{r7}
 8011050:	b087      	sub	sp, #28
 8011052:	af00      	add	r7, sp, #0
 8011054:	60f8      	str	r0, [r7, #12]
 8011056:	60b9      	str	r1, [r7, #8]
 8011058:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	6a1b      	ldr	r3, [r3, #32]
 801105e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	6a1b      	ldr	r3, [r3, #32]
 8011064:	f023 0210 	bic.w	r2, r3, #16
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	699b      	ldr	r3, [r3, #24]
 8011070:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011072:	693b      	ldr	r3, [r7, #16]
 8011074:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8011078:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	031b      	lsls	r3, r3, #12
 801107e:	693a      	ldr	r2, [r7, #16]
 8011080:	4313      	orrs	r3, r2
 8011082:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011084:	697b      	ldr	r3, [r7, #20]
 8011086:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801108a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801108c:	68bb      	ldr	r3, [r7, #8]
 801108e:	011b      	lsls	r3, r3, #4
 8011090:	697a      	ldr	r2, [r7, #20]
 8011092:	4313      	orrs	r3, r2
 8011094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	693a      	ldr	r2, [r7, #16]
 801109a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	697a      	ldr	r2, [r7, #20]
 80110a0:	621a      	str	r2, [r3, #32]
}
 80110a2:	bf00      	nop
 80110a4:	371c      	adds	r7, #28
 80110a6:	46bd      	mov	sp, r7
 80110a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ac:	4770      	bx	lr

080110ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80110ae:	b480      	push	{r7}
 80110b0:	b085      	sub	sp, #20
 80110b2:	af00      	add	r7, sp, #0
 80110b4:	6078      	str	r0, [r7, #4]
 80110b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	689b      	ldr	r3, [r3, #8]
 80110bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80110c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80110c6:	683a      	ldr	r2, [r7, #0]
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	4313      	orrs	r3, r2
 80110cc:	f043 0307 	orr.w	r3, r3, #7
 80110d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	68fa      	ldr	r2, [r7, #12]
 80110d6:	609a      	str	r2, [r3, #8]
}
 80110d8:	bf00      	nop
 80110da:	3714      	adds	r7, #20
 80110dc:	46bd      	mov	sp, r7
 80110de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e2:	4770      	bx	lr

080110e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80110e4:	b480      	push	{r7}
 80110e6:	b087      	sub	sp, #28
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	60f8      	str	r0, [r7, #12]
 80110ec:	60b9      	str	r1, [r7, #8]
 80110ee:	607a      	str	r2, [r7, #4]
 80110f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	689b      	ldr	r3, [r3, #8]
 80110f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80110f8:	697b      	ldr	r3, [r7, #20]
 80110fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80110fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011100:	683b      	ldr	r3, [r7, #0]
 8011102:	021a      	lsls	r2, r3, #8
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	431a      	orrs	r2, r3
 8011108:	68bb      	ldr	r3, [r7, #8]
 801110a:	4313      	orrs	r3, r2
 801110c:	697a      	ldr	r2, [r7, #20]
 801110e:	4313      	orrs	r3, r2
 8011110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	697a      	ldr	r2, [r7, #20]
 8011116:	609a      	str	r2, [r3, #8]
}
 8011118:	bf00      	nop
 801111a:	371c      	adds	r7, #28
 801111c:	46bd      	mov	sp, r7
 801111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011122:	4770      	bx	lr

08011124 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011124:	b480      	push	{r7}
 8011126:	b087      	sub	sp, #28
 8011128:	af00      	add	r7, sp, #0
 801112a:	60f8      	str	r0, [r7, #12]
 801112c:	60b9      	str	r1, [r7, #8]
 801112e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011130:	68bb      	ldr	r3, [r7, #8]
 8011132:	f003 031f 	and.w	r3, r3, #31
 8011136:	2201      	movs	r2, #1
 8011138:	fa02 f303 	lsl.w	r3, r2, r3
 801113c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	6a1a      	ldr	r2, [r3, #32]
 8011142:	697b      	ldr	r3, [r7, #20]
 8011144:	43db      	mvns	r3, r3
 8011146:	401a      	ands	r2, r3
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	6a1a      	ldr	r2, [r3, #32]
 8011150:	68bb      	ldr	r3, [r7, #8]
 8011152:	f003 031f 	and.w	r3, r3, #31
 8011156:	6879      	ldr	r1, [r7, #4]
 8011158:	fa01 f303 	lsl.w	r3, r1, r3
 801115c:	431a      	orrs	r2, r3
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	621a      	str	r2, [r3, #32]
}
 8011162:	bf00      	nop
 8011164:	371c      	adds	r7, #28
 8011166:	46bd      	mov	sp, r7
 8011168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116c:	4770      	bx	lr
	...

08011170 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011170:	b480      	push	{r7}
 8011172:	b085      	sub	sp, #20
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
 8011178:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011180:	2b01      	cmp	r3, #1
 8011182:	d101      	bne.n	8011188 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011184:	2302      	movs	r3, #2
 8011186:	e050      	b.n	801122a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	2201      	movs	r2, #1
 801118c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	2202      	movs	r2, #2
 8011194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	685b      	ldr	r3, [r3, #4]
 801119e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	689b      	ldr	r3, [r3, #8]
 80111a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80111ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80111b0:	683b      	ldr	r3, [r7, #0]
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	68fa      	ldr	r2, [r7, #12]
 80111b6:	4313      	orrs	r3, r2
 80111b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	68fa      	ldr	r2, [r7, #12]
 80111c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	4a1c      	ldr	r2, [pc, #112]	@ (8011238 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80111c8:	4293      	cmp	r3, r2
 80111ca:	d018      	beq.n	80111fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80111d4:	d013      	beq.n	80111fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	4a18      	ldr	r2, [pc, #96]	@ (801123c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80111dc:	4293      	cmp	r3, r2
 80111de:	d00e      	beq.n	80111fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	4a16      	ldr	r2, [pc, #88]	@ (8011240 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80111e6:	4293      	cmp	r3, r2
 80111e8:	d009      	beq.n	80111fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	4a15      	ldr	r2, [pc, #84]	@ (8011244 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80111f0:	4293      	cmp	r3, r2
 80111f2:	d004      	beq.n	80111fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	4a13      	ldr	r2, [pc, #76]	@ (8011248 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80111fa:	4293      	cmp	r3, r2
 80111fc:	d10c      	bne.n	8011218 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80111fe:	68bb      	ldr	r3, [r7, #8]
 8011200:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011204:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011206:	683b      	ldr	r3, [r7, #0]
 8011208:	685b      	ldr	r3, [r3, #4]
 801120a:	68ba      	ldr	r2, [r7, #8]
 801120c:	4313      	orrs	r3, r2
 801120e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	68ba      	ldr	r2, [r7, #8]
 8011216:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	2201      	movs	r2, #1
 801121c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2200      	movs	r2, #0
 8011224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8011228:	2300      	movs	r3, #0
}
 801122a:	4618      	mov	r0, r3
 801122c:	3714      	adds	r7, #20
 801122e:	46bd      	mov	sp, r7
 8011230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011234:	4770      	bx	lr
 8011236:	bf00      	nop
 8011238:	40010000 	.word	0x40010000
 801123c:	40000400 	.word	0x40000400
 8011240:	40000800 	.word	0x40000800
 8011244:	40000c00 	.word	0x40000c00
 8011248:	40014000 	.word	0x40014000

0801124c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801124c:	b480      	push	{r7}
 801124e:	b083      	sub	sp, #12
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011254:	bf00      	nop
 8011256:	370c      	adds	r7, #12
 8011258:	46bd      	mov	sp, r7
 801125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801125e:	4770      	bx	lr

08011260 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011260:	b480      	push	{r7}
 8011262:	b083      	sub	sp, #12
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011268:	bf00      	nop
 801126a:	370c      	adds	r7, #12
 801126c:	46bd      	mov	sp, r7
 801126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011272:	4770      	bx	lr

08011274 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011274:	b580      	push	{r7, lr}
 8011276:	b082      	sub	sp, #8
 8011278:	af00      	add	r7, sp, #0
 801127a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d101      	bne.n	8011286 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011282:	2301      	movs	r3, #1
 8011284:	e042      	b.n	801130c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801128c:	b2db      	uxtb	r3, r3
 801128e:	2b00      	cmp	r3, #0
 8011290:	d106      	bne.n	80112a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	2200      	movs	r2, #0
 8011296:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801129a:	6878      	ldr	r0, [r7, #4]
 801129c:	f7fc f8a4 	bl	800d3e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	2224      	movs	r2, #36	@ 0x24
 80112a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	68da      	ldr	r2, [r3, #12]
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80112b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80112b8:	6878      	ldr	r0, [r7, #4]
 80112ba:	f000 f973 	bl	80115a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	691a      	ldr	r2, [r3, #16]
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80112cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	695a      	ldr	r2, [r3, #20]
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80112dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	68da      	ldr	r2, [r3, #12]
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80112ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	2200      	movs	r2, #0
 80112f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	2220      	movs	r2, #32
 80112f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	2220      	movs	r2, #32
 8011300:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	2200      	movs	r2, #0
 8011308:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 801130a:	2300      	movs	r3, #0
}
 801130c:	4618      	mov	r0, r3
 801130e:	3708      	adds	r7, #8
 8011310:	46bd      	mov	sp, r7
 8011312:	bd80      	pop	{r7, pc}

08011314 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b08a      	sub	sp, #40	@ 0x28
 8011318:	af02      	add	r7, sp, #8
 801131a:	60f8      	str	r0, [r7, #12]
 801131c:	60b9      	str	r1, [r7, #8]
 801131e:	603b      	str	r3, [r7, #0]
 8011320:	4613      	mov	r3, r2
 8011322:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8011324:	2300      	movs	r3, #0
 8011326:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801132e:	b2db      	uxtb	r3, r3
 8011330:	2b20      	cmp	r3, #32
 8011332:	d175      	bne.n	8011420 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8011334:	68bb      	ldr	r3, [r7, #8]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d002      	beq.n	8011340 <HAL_UART_Transmit+0x2c>
 801133a:	88fb      	ldrh	r3, [r7, #6]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d101      	bne.n	8011344 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8011340:	2301      	movs	r3, #1
 8011342:	e06e      	b.n	8011422 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	2200      	movs	r2, #0
 8011348:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	2221      	movs	r2, #33	@ 0x21
 801134e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011352:	f7fc fa6d 	bl	800d830 <HAL_GetTick>
 8011356:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	88fa      	ldrh	r2, [r7, #6]
 801135c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	88fa      	ldrh	r2, [r7, #6]
 8011362:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	689b      	ldr	r3, [r3, #8]
 8011368:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801136c:	d108      	bne.n	8011380 <HAL_UART_Transmit+0x6c>
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	691b      	ldr	r3, [r3, #16]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d104      	bne.n	8011380 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8011376:	2300      	movs	r3, #0
 8011378:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801137a:	68bb      	ldr	r3, [r7, #8]
 801137c:	61bb      	str	r3, [r7, #24]
 801137e:	e003      	b.n	8011388 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8011380:	68bb      	ldr	r3, [r7, #8]
 8011382:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011384:	2300      	movs	r3, #0
 8011386:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8011388:	e02e      	b.n	80113e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801138a:	683b      	ldr	r3, [r7, #0]
 801138c:	9300      	str	r3, [sp, #0]
 801138e:	697b      	ldr	r3, [r7, #20]
 8011390:	2200      	movs	r2, #0
 8011392:	2180      	movs	r1, #128	@ 0x80
 8011394:	68f8      	ldr	r0, [r7, #12]
 8011396:	f000 f848 	bl	801142a <UART_WaitOnFlagUntilTimeout>
 801139a:	4603      	mov	r3, r0
 801139c:	2b00      	cmp	r3, #0
 801139e:	d005      	beq.n	80113ac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	2220      	movs	r2, #32
 80113a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80113a8:	2303      	movs	r3, #3
 80113aa:	e03a      	b.n	8011422 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80113ac:	69fb      	ldr	r3, [r7, #28]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d10b      	bne.n	80113ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80113b2:	69bb      	ldr	r3, [r7, #24]
 80113b4:	881b      	ldrh	r3, [r3, #0]
 80113b6:	461a      	mov	r2, r3
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80113c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80113c2:	69bb      	ldr	r3, [r7, #24]
 80113c4:	3302      	adds	r3, #2
 80113c6:	61bb      	str	r3, [r7, #24]
 80113c8:	e007      	b.n	80113da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80113ca:	69fb      	ldr	r3, [r7, #28]
 80113cc:	781a      	ldrb	r2, [r3, #0]
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80113d4:	69fb      	ldr	r3, [r7, #28]
 80113d6:	3301      	adds	r3, #1
 80113d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80113de:	b29b      	uxth	r3, r3
 80113e0:	3b01      	subs	r3, #1
 80113e2:	b29a      	uxth	r2, r3
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80113ec:	b29b      	uxth	r3, r3
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d1cb      	bne.n	801138a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80113f2:	683b      	ldr	r3, [r7, #0]
 80113f4:	9300      	str	r3, [sp, #0]
 80113f6:	697b      	ldr	r3, [r7, #20]
 80113f8:	2200      	movs	r2, #0
 80113fa:	2140      	movs	r1, #64	@ 0x40
 80113fc:	68f8      	ldr	r0, [r7, #12]
 80113fe:	f000 f814 	bl	801142a <UART_WaitOnFlagUntilTimeout>
 8011402:	4603      	mov	r3, r0
 8011404:	2b00      	cmp	r3, #0
 8011406:	d005      	beq.n	8011414 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	2220      	movs	r2, #32
 801140c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8011410:	2303      	movs	r3, #3
 8011412:	e006      	b.n	8011422 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	2220      	movs	r2, #32
 8011418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 801141c:	2300      	movs	r3, #0
 801141e:	e000      	b.n	8011422 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8011420:	2302      	movs	r3, #2
  }
}
 8011422:	4618      	mov	r0, r3
 8011424:	3720      	adds	r7, #32
 8011426:	46bd      	mov	sp, r7
 8011428:	bd80      	pop	{r7, pc}

0801142a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 801142a:	b580      	push	{r7, lr}
 801142c:	b086      	sub	sp, #24
 801142e:	af00      	add	r7, sp, #0
 8011430:	60f8      	str	r0, [r7, #12]
 8011432:	60b9      	str	r1, [r7, #8]
 8011434:	603b      	str	r3, [r7, #0]
 8011436:	4613      	mov	r3, r2
 8011438:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801143a:	e03b      	b.n	80114b4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801143c:	6a3b      	ldr	r3, [r7, #32]
 801143e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011442:	d037      	beq.n	80114b4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011444:	f7fc f9f4 	bl	800d830 <HAL_GetTick>
 8011448:	4602      	mov	r2, r0
 801144a:	683b      	ldr	r3, [r7, #0]
 801144c:	1ad3      	subs	r3, r2, r3
 801144e:	6a3a      	ldr	r2, [r7, #32]
 8011450:	429a      	cmp	r2, r3
 8011452:	d302      	bcc.n	801145a <UART_WaitOnFlagUntilTimeout+0x30>
 8011454:	6a3b      	ldr	r3, [r7, #32]
 8011456:	2b00      	cmp	r3, #0
 8011458:	d101      	bne.n	801145e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801145a:	2303      	movs	r3, #3
 801145c:	e03a      	b.n	80114d4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	68db      	ldr	r3, [r3, #12]
 8011464:	f003 0304 	and.w	r3, r3, #4
 8011468:	2b00      	cmp	r3, #0
 801146a:	d023      	beq.n	80114b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 801146c:	68bb      	ldr	r3, [r7, #8]
 801146e:	2b80      	cmp	r3, #128	@ 0x80
 8011470:	d020      	beq.n	80114b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8011472:	68bb      	ldr	r3, [r7, #8]
 8011474:	2b40      	cmp	r3, #64	@ 0x40
 8011476:	d01d      	beq.n	80114b4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	f003 0308 	and.w	r3, r3, #8
 8011482:	2b08      	cmp	r3, #8
 8011484:	d116      	bne.n	80114b4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8011486:	2300      	movs	r3, #0
 8011488:	617b      	str	r3, [r7, #20]
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	617b      	str	r3, [r7, #20]
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	685b      	ldr	r3, [r3, #4]
 8011498:	617b      	str	r3, [r7, #20]
 801149a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801149c:	68f8      	ldr	r0, [r7, #12]
 801149e:	f000 f81d 	bl	80114dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	2208      	movs	r2, #8
 80114a6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	2200      	movs	r2, #0
 80114ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80114b0:	2301      	movs	r3, #1
 80114b2:	e00f      	b.n	80114d4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	681a      	ldr	r2, [r3, #0]
 80114ba:	68bb      	ldr	r3, [r7, #8]
 80114bc:	4013      	ands	r3, r2
 80114be:	68ba      	ldr	r2, [r7, #8]
 80114c0:	429a      	cmp	r2, r3
 80114c2:	bf0c      	ite	eq
 80114c4:	2301      	moveq	r3, #1
 80114c6:	2300      	movne	r3, #0
 80114c8:	b2db      	uxtb	r3, r3
 80114ca:	461a      	mov	r2, r3
 80114cc:	79fb      	ldrb	r3, [r7, #7]
 80114ce:	429a      	cmp	r2, r3
 80114d0:	d0b4      	beq.n	801143c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80114d2:	2300      	movs	r3, #0
}
 80114d4:	4618      	mov	r0, r3
 80114d6:	3718      	adds	r7, #24
 80114d8:	46bd      	mov	sp, r7
 80114da:	bd80      	pop	{r7, pc}

080114dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80114dc:	b480      	push	{r7}
 80114de:	b095      	sub	sp, #84	@ 0x54
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	330c      	adds	r3, #12
 80114ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80114ee:	e853 3f00 	ldrex	r3, [r3]
 80114f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80114f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80114fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	330c      	adds	r3, #12
 8011502:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011504:	643a      	str	r2, [r7, #64]	@ 0x40
 8011506:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011508:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801150a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801150c:	e841 2300 	strex	r3, r2, [r1]
 8011510:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011514:	2b00      	cmp	r3, #0
 8011516:	d1e5      	bne.n	80114e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	3314      	adds	r3, #20
 801151e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011520:	6a3b      	ldr	r3, [r7, #32]
 8011522:	e853 3f00 	ldrex	r3, [r3]
 8011526:	61fb      	str	r3, [r7, #28]
   return(result);
 8011528:	69fb      	ldr	r3, [r7, #28]
 801152a:	f023 0301 	bic.w	r3, r3, #1
 801152e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	3314      	adds	r3, #20
 8011536:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011538:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801153a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801153c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801153e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011540:	e841 2300 	strex	r3, r2, [r1]
 8011544:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011548:	2b00      	cmp	r3, #0
 801154a:	d1e5      	bne.n	8011518 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011550:	2b01      	cmp	r3, #1
 8011552:	d119      	bne.n	8011588 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	330c      	adds	r3, #12
 801155a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	e853 3f00 	ldrex	r3, [r3]
 8011562:	60bb      	str	r3, [r7, #8]
   return(result);
 8011564:	68bb      	ldr	r3, [r7, #8]
 8011566:	f023 0310 	bic.w	r3, r3, #16
 801156a:	647b      	str	r3, [r7, #68]	@ 0x44
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	330c      	adds	r3, #12
 8011572:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011574:	61ba      	str	r2, [r7, #24]
 8011576:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011578:	6979      	ldr	r1, [r7, #20]
 801157a:	69ba      	ldr	r2, [r7, #24]
 801157c:	e841 2300 	strex	r3, r2, [r1]
 8011580:	613b      	str	r3, [r7, #16]
   return(result);
 8011582:	693b      	ldr	r3, [r7, #16]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d1e5      	bne.n	8011554 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	2220      	movs	r2, #32
 801158c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	2200      	movs	r2, #0
 8011594:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8011596:	bf00      	nop
 8011598:	3754      	adds	r7, #84	@ 0x54
 801159a:	46bd      	mov	sp, r7
 801159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a0:	4770      	bx	lr
	...

080115a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80115a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80115a8:	b0c0      	sub	sp, #256	@ 0x100
 80115aa:	af00      	add	r7, sp, #0
 80115ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80115b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	691b      	ldr	r3, [r3, #16]
 80115b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80115bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80115c0:	68d9      	ldr	r1, [r3, #12]
 80115c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80115c6:	681a      	ldr	r2, [r3, #0]
 80115c8:	ea40 0301 	orr.w	r3, r0, r1
 80115cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80115ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80115d2:	689a      	ldr	r2, [r3, #8]
 80115d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80115d8:	691b      	ldr	r3, [r3, #16]
 80115da:	431a      	orrs	r2, r3
 80115dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80115e0:	695b      	ldr	r3, [r3, #20]
 80115e2:	431a      	orrs	r2, r3
 80115e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80115e8:	69db      	ldr	r3, [r3, #28]
 80115ea:	4313      	orrs	r3, r2
 80115ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80115f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	68db      	ldr	r3, [r3, #12]
 80115f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80115fc:	f021 010c 	bic.w	r1, r1, #12
 8011600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011604:	681a      	ldr	r2, [r3, #0]
 8011606:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801160a:	430b      	orrs	r3, r1
 801160c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801160e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	695b      	ldr	r3, [r3, #20]
 8011616:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 801161a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801161e:	6999      	ldr	r1, [r3, #24]
 8011620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011624:	681a      	ldr	r2, [r3, #0]
 8011626:	ea40 0301 	orr.w	r3, r0, r1
 801162a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801162c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011630:	681a      	ldr	r2, [r3, #0]
 8011632:	4b8f      	ldr	r3, [pc, #572]	@ (8011870 <UART_SetConfig+0x2cc>)
 8011634:	429a      	cmp	r2, r3
 8011636:	d005      	beq.n	8011644 <UART_SetConfig+0xa0>
 8011638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801163c:	681a      	ldr	r2, [r3, #0]
 801163e:	4b8d      	ldr	r3, [pc, #564]	@ (8011874 <UART_SetConfig+0x2d0>)
 8011640:	429a      	cmp	r2, r3
 8011642:	d104      	bne.n	801164e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8011644:	f7fe fba0 	bl	800fd88 <HAL_RCC_GetPCLK2Freq>
 8011648:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 801164c:	e003      	b.n	8011656 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801164e:	f7fe fb87 	bl	800fd60 <HAL_RCC_GetPCLK1Freq>
 8011652:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801165a:	69db      	ldr	r3, [r3, #28]
 801165c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011660:	f040 810c 	bne.w	801187c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011664:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011668:	2200      	movs	r2, #0
 801166a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801166e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8011672:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8011676:	4622      	mov	r2, r4
 8011678:	462b      	mov	r3, r5
 801167a:	1891      	adds	r1, r2, r2
 801167c:	65b9      	str	r1, [r7, #88]	@ 0x58
 801167e:	415b      	adcs	r3, r3
 8011680:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011682:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8011686:	4621      	mov	r1, r4
 8011688:	eb12 0801 	adds.w	r8, r2, r1
 801168c:	4629      	mov	r1, r5
 801168e:	eb43 0901 	adc.w	r9, r3, r1
 8011692:	f04f 0200 	mov.w	r2, #0
 8011696:	f04f 0300 	mov.w	r3, #0
 801169a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801169e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80116a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80116a6:	4690      	mov	r8, r2
 80116a8:	4699      	mov	r9, r3
 80116aa:	4623      	mov	r3, r4
 80116ac:	eb18 0303 	adds.w	r3, r8, r3
 80116b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80116b4:	462b      	mov	r3, r5
 80116b6:	eb49 0303 	adc.w	r3, r9, r3
 80116ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80116be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80116c2:	685b      	ldr	r3, [r3, #4]
 80116c4:	2200      	movs	r2, #0
 80116c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80116ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80116ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80116d2:	460b      	mov	r3, r1
 80116d4:	18db      	adds	r3, r3, r3
 80116d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80116d8:	4613      	mov	r3, r2
 80116da:	eb42 0303 	adc.w	r3, r2, r3
 80116de:	657b      	str	r3, [r7, #84]	@ 0x54
 80116e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80116e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80116e8:	f7ef fab6 	bl	8000c58 <__aeabi_uldivmod>
 80116ec:	4602      	mov	r2, r0
 80116ee:	460b      	mov	r3, r1
 80116f0:	4b61      	ldr	r3, [pc, #388]	@ (8011878 <UART_SetConfig+0x2d4>)
 80116f2:	fba3 2302 	umull	r2, r3, r3, r2
 80116f6:	095b      	lsrs	r3, r3, #5
 80116f8:	011c      	lsls	r4, r3, #4
 80116fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80116fe:	2200      	movs	r2, #0
 8011700:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8011704:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8011708:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 801170c:	4642      	mov	r2, r8
 801170e:	464b      	mov	r3, r9
 8011710:	1891      	adds	r1, r2, r2
 8011712:	64b9      	str	r1, [r7, #72]	@ 0x48
 8011714:	415b      	adcs	r3, r3
 8011716:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011718:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 801171c:	4641      	mov	r1, r8
 801171e:	eb12 0a01 	adds.w	sl, r2, r1
 8011722:	4649      	mov	r1, r9
 8011724:	eb43 0b01 	adc.w	fp, r3, r1
 8011728:	f04f 0200 	mov.w	r2, #0
 801172c:	f04f 0300 	mov.w	r3, #0
 8011730:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011734:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8011738:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801173c:	4692      	mov	sl, r2
 801173e:	469b      	mov	fp, r3
 8011740:	4643      	mov	r3, r8
 8011742:	eb1a 0303 	adds.w	r3, sl, r3
 8011746:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801174a:	464b      	mov	r3, r9
 801174c:	eb4b 0303 	adc.w	r3, fp, r3
 8011750:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8011754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011758:	685b      	ldr	r3, [r3, #4]
 801175a:	2200      	movs	r2, #0
 801175c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8011760:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8011764:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8011768:	460b      	mov	r3, r1
 801176a:	18db      	adds	r3, r3, r3
 801176c:	643b      	str	r3, [r7, #64]	@ 0x40
 801176e:	4613      	mov	r3, r2
 8011770:	eb42 0303 	adc.w	r3, r2, r3
 8011774:	647b      	str	r3, [r7, #68]	@ 0x44
 8011776:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 801177a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 801177e:	f7ef fa6b 	bl	8000c58 <__aeabi_uldivmod>
 8011782:	4602      	mov	r2, r0
 8011784:	460b      	mov	r3, r1
 8011786:	4611      	mov	r1, r2
 8011788:	4b3b      	ldr	r3, [pc, #236]	@ (8011878 <UART_SetConfig+0x2d4>)
 801178a:	fba3 2301 	umull	r2, r3, r3, r1
 801178e:	095b      	lsrs	r3, r3, #5
 8011790:	2264      	movs	r2, #100	@ 0x64
 8011792:	fb02 f303 	mul.w	r3, r2, r3
 8011796:	1acb      	subs	r3, r1, r3
 8011798:	00db      	lsls	r3, r3, #3
 801179a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 801179e:	4b36      	ldr	r3, [pc, #216]	@ (8011878 <UART_SetConfig+0x2d4>)
 80117a0:	fba3 2302 	umull	r2, r3, r3, r2
 80117a4:	095b      	lsrs	r3, r3, #5
 80117a6:	005b      	lsls	r3, r3, #1
 80117a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80117ac:	441c      	add	r4, r3
 80117ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80117b2:	2200      	movs	r2, #0
 80117b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80117b8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80117bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80117c0:	4642      	mov	r2, r8
 80117c2:	464b      	mov	r3, r9
 80117c4:	1891      	adds	r1, r2, r2
 80117c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80117c8:	415b      	adcs	r3, r3
 80117ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80117cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80117d0:	4641      	mov	r1, r8
 80117d2:	1851      	adds	r1, r2, r1
 80117d4:	6339      	str	r1, [r7, #48]	@ 0x30
 80117d6:	4649      	mov	r1, r9
 80117d8:	414b      	adcs	r3, r1
 80117da:	637b      	str	r3, [r7, #52]	@ 0x34
 80117dc:	f04f 0200 	mov.w	r2, #0
 80117e0:	f04f 0300 	mov.w	r3, #0
 80117e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80117e8:	4659      	mov	r1, fp
 80117ea:	00cb      	lsls	r3, r1, #3
 80117ec:	4651      	mov	r1, sl
 80117ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80117f2:	4651      	mov	r1, sl
 80117f4:	00ca      	lsls	r2, r1, #3
 80117f6:	4610      	mov	r0, r2
 80117f8:	4619      	mov	r1, r3
 80117fa:	4603      	mov	r3, r0
 80117fc:	4642      	mov	r2, r8
 80117fe:	189b      	adds	r3, r3, r2
 8011800:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011804:	464b      	mov	r3, r9
 8011806:	460a      	mov	r2, r1
 8011808:	eb42 0303 	adc.w	r3, r2, r3
 801180c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011814:	685b      	ldr	r3, [r3, #4]
 8011816:	2200      	movs	r2, #0
 8011818:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801181c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8011820:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8011824:	460b      	mov	r3, r1
 8011826:	18db      	adds	r3, r3, r3
 8011828:	62bb      	str	r3, [r7, #40]	@ 0x28
 801182a:	4613      	mov	r3, r2
 801182c:	eb42 0303 	adc.w	r3, r2, r3
 8011830:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011832:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8011836:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 801183a:	f7ef fa0d 	bl	8000c58 <__aeabi_uldivmod>
 801183e:	4602      	mov	r2, r0
 8011840:	460b      	mov	r3, r1
 8011842:	4b0d      	ldr	r3, [pc, #52]	@ (8011878 <UART_SetConfig+0x2d4>)
 8011844:	fba3 1302 	umull	r1, r3, r3, r2
 8011848:	095b      	lsrs	r3, r3, #5
 801184a:	2164      	movs	r1, #100	@ 0x64
 801184c:	fb01 f303 	mul.w	r3, r1, r3
 8011850:	1ad3      	subs	r3, r2, r3
 8011852:	00db      	lsls	r3, r3, #3
 8011854:	3332      	adds	r3, #50	@ 0x32
 8011856:	4a08      	ldr	r2, [pc, #32]	@ (8011878 <UART_SetConfig+0x2d4>)
 8011858:	fba2 2303 	umull	r2, r3, r2, r3
 801185c:	095b      	lsrs	r3, r3, #5
 801185e:	f003 0207 	and.w	r2, r3, #7
 8011862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	4422      	add	r2, r4
 801186a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801186c:	e106      	b.n	8011a7c <UART_SetConfig+0x4d8>
 801186e:	bf00      	nop
 8011870:	40011000 	.word	0x40011000
 8011874:	40011400 	.word	0x40011400
 8011878:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801187c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011880:	2200      	movs	r2, #0
 8011882:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011886:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801188a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 801188e:	4642      	mov	r2, r8
 8011890:	464b      	mov	r3, r9
 8011892:	1891      	adds	r1, r2, r2
 8011894:	6239      	str	r1, [r7, #32]
 8011896:	415b      	adcs	r3, r3
 8011898:	627b      	str	r3, [r7, #36]	@ 0x24
 801189a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801189e:	4641      	mov	r1, r8
 80118a0:	1854      	adds	r4, r2, r1
 80118a2:	4649      	mov	r1, r9
 80118a4:	eb43 0501 	adc.w	r5, r3, r1
 80118a8:	f04f 0200 	mov.w	r2, #0
 80118ac:	f04f 0300 	mov.w	r3, #0
 80118b0:	00eb      	lsls	r3, r5, #3
 80118b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80118b6:	00e2      	lsls	r2, r4, #3
 80118b8:	4614      	mov	r4, r2
 80118ba:	461d      	mov	r5, r3
 80118bc:	4643      	mov	r3, r8
 80118be:	18e3      	adds	r3, r4, r3
 80118c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80118c4:	464b      	mov	r3, r9
 80118c6:	eb45 0303 	adc.w	r3, r5, r3
 80118ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80118ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80118d2:	685b      	ldr	r3, [r3, #4]
 80118d4:	2200      	movs	r2, #0
 80118d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80118da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80118de:	f04f 0200 	mov.w	r2, #0
 80118e2:	f04f 0300 	mov.w	r3, #0
 80118e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80118ea:	4629      	mov	r1, r5
 80118ec:	008b      	lsls	r3, r1, #2
 80118ee:	4621      	mov	r1, r4
 80118f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80118f4:	4621      	mov	r1, r4
 80118f6:	008a      	lsls	r2, r1, #2
 80118f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80118fc:	f7ef f9ac 	bl	8000c58 <__aeabi_uldivmod>
 8011900:	4602      	mov	r2, r0
 8011902:	460b      	mov	r3, r1
 8011904:	4b60      	ldr	r3, [pc, #384]	@ (8011a88 <UART_SetConfig+0x4e4>)
 8011906:	fba3 2302 	umull	r2, r3, r3, r2
 801190a:	095b      	lsrs	r3, r3, #5
 801190c:	011c      	lsls	r4, r3, #4
 801190e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011912:	2200      	movs	r2, #0
 8011914:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011918:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801191c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8011920:	4642      	mov	r2, r8
 8011922:	464b      	mov	r3, r9
 8011924:	1891      	adds	r1, r2, r2
 8011926:	61b9      	str	r1, [r7, #24]
 8011928:	415b      	adcs	r3, r3
 801192a:	61fb      	str	r3, [r7, #28]
 801192c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011930:	4641      	mov	r1, r8
 8011932:	1851      	adds	r1, r2, r1
 8011934:	6139      	str	r1, [r7, #16]
 8011936:	4649      	mov	r1, r9
 8011938:	414b      	adcs	r3, r1
 801193a:	617b      	str	r3, [r7, #20]
 801193c:	f04f 0200 	mov.w	r2, #0
 8011940:	f04f 0300 	mov.w	r3, #0
 8011944:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8011948:	4659      	mov	r1, fp
 801194a:	00cb      	lsls	r3, r1, #3
 801194c:	4651      	mov	r1, sl
 801194e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011952:	4651      	mov	r1, sl
 8011954:	00ca      	lsls	r2, r1, #3
 8011956:	4610      	mov	r0, r2
 8011958:	4619      	mov	r1, r3
 801195a:	4603      	mov	r3, r0
 801195c:	4642      	mov	r2, r8
 801195e:	189b      	adds	r3, r3, r2
 8011960:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011964:	464b      	mov	r3, r9
 8011966:	460a      	mov	r2, r1
 8011968:	eb42 0303 	adc.w	r3, r2, r3
 801196c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011974:	685b      	ldr	r3, [r3, #4]
 8011976:	2200      	movs	r2, #0
 8011978:	67bb      	str	r3, [r7, #120]	@ 0x78
 801197a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 801197c:	f04f 0200 	mov.w	r2, #0
 8011980:	f04f 0300 	mov.w	r3, #0
 8011984:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8011988:	4649      	mov	r1, r9
 801198a:	008b      	lsls	r3, r1, #2
 801198c:	4641      	mov	r1, r8
 801198e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011992:	4641      	mov	r1, r8
 8011994:	008a      	lsls	r2, r1, #2
 8011996:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 801199a:	f7ef f95d 	bl	8000c58 <__aeabi_uldivmod>
 801199e:	4602      	mov	r2, r0
 80119a0:	460b      	mov	r3, r1
 80119a2:	4611      	mov	r1, r2
 80119a4:	4b38      	ldr	r3, [pc, #224]	@ (8011a88 <UART_SetConfig+0x4e4>)
 80119a6:	fba3 2301 	umull	r2, r3, r3, r1
 80119aa:	095b      	lsrs	r3, r3, #5
 80119ac:	2264      	movs	r2, #100	@ 0x64
 80119ae:	fb02 f303 	mul.w	r3, r2, r3
 80119b2:	1acb      	subs	r3, r1, r3
 80119b4:	011b      	lsls	r3, r3, #4
 80119b6:	3332      	adds	r3, #50	@ 0x32
 80119b8:	4a33      	ldr	r2, [pc, #204]	@ (8011a88 <UART_SetConfig+0x4e4>)
 80119ba:	fba2 2303 	umull	r2, r3, r2, r3
 80119be:	095b      	lsrs	r3, r3, #5
 80119c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80119c4:	441c      	add	r4, r3
 80119c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80119ca:	2200      	movs	r2, #0
 80119cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80119ce:	677a      	str	r2, [r7, #116]	@ 0x74
 80119d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80119d4:	4642      	mov	r2, r8
 80119d6:	464b      	mov	r3, r9
 80119d8:	1891      	adds	r1, r2, r2
 80119da:	60b9      	str	r1, [r7, #8]
 80119dc:	415b      	adcs	r3, r3
 80119de:	60fb      	str	r3, [r7, #12]
 80119e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80119e4:	4641      	mov	r1, r8
 80119e6:	1851      	adds	r1, r2, r1
 80119e8:	6039      	str	r1, [r7, #0]
 80119ea:	4649      	mov	r1, r9
 80119ec:	414b      	adcs	r3, r1
 80119ee:	607b      	str	r3, [r7, #4]
 80119f0:	f04f 0200 	mov.w	r2, #0
 80119f4:	f04f 0300 	mov.w	r3, #0
 80119f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80119fc:	4659      	mov	r1, fp
 80119fe:	00cb      	lsls	r3, r1, #3
 8011a00:	4651      	mov	r1, sl
 8011a02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011a06:	4651      	mov	r1, sl
 8011a08:	00ca      	lsls	r2, r1, #3
 8011a0a:	4610      	mov	r0, r2
 8011a0c:	4619      	mov	r1, r3
 8011a0e:	4603      	mov	r3, r0
 8011a10:	4642      	mov	r2, r8
 8011a12:	189b      	adds	r3, r3, r2
 8011a14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011a16:	464b      	mov	r3, r9
 8011a18:	460a      	mov	r2, r1
 8011a1a:	eb42 0303 	adc.w	r3, r2, r3
 8011a1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011a24:	685b      	ldr	r3, [r3, #4]
 8011a26:	2200      	movs	r2, #0
 8011a28:	663b      	str	r3, [r7, #96]	@ 0x60
 8011a2a:	667a      	str	r2, [r7, #100]	@ 0x64
 8011a2c:	f04f 0200 	mov.w	r2, #0
 8011a30:	f04f 0300 	mov.w	r3, #0
 8011a34:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8011a38:	4649      	mov	r1, r9
 8011a3a:	008b      	lsls	r3, r1, #2
 8011a3c:	4641      	mov	r1, r8
 8011a3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011a42:	4641      	mov	r1, r8
 8011a44:	008a      	lsls	r2, r1, #2
 8011a46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8011a4a:	f7ef f905 	bl	8000c58 <__aeabi_uldivmod>
 8011a4e:	4602      	mov	r2, r0
 8011a50:	460b      	mov	r3, r1
 8011a52:	4b0d      	ldr	r3, [pc, #52]	@ (8011a88 <UART_SetConfig+0x4e4>)
 8011a54:	fba3 1302 	umull	r1, r3, r3, r2
 8011a58:	095b      	lsrs	r3, r3, #5
 8011a5a:	2164      	movs	r1, #100	@ 0x64
 8011a5c:	fb01 f303 	mul.w	r3, r1, r3
 8011a60:	1ad3      	subs	r3, r2, r3
 8011a62:	011b      	lsls	r3, r3, #4
 8011a64:	3332      	adds	r3, #50	@ 0x32
 8011a66:	4a08      	ldr	r2, [pc, #32]	@ (8011a88 <UART_SetConfig+0x4e4>)
 8011a68:	fba2 2303 	umull	r2, r3, r2, r3
 8011a6c:	095b      	lsrs	r3, r3, #5
 8011a6e:	f003 020f 	and.w	r2, r3, #15
 8011a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	4422      	add	r2, r4
 8011a7a:	609a      	str	r2, [r3, #8]
}
 8011a7c:	bf00      	nop
 8011a7e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8011a82:	46bd      	mov	sp, r7
 8011a84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011a88:	51eb851f 	.word	0x51eb851f

08011a8c <_ZdlPvj>:
 8011a8c:	f000 b811 	b.w	8011ab2 <_ZdlPv>

08011a90 <_Znwj>:
 8011a90:	2801      	cmp	r0, #1
 8011a92:	bf38      	it	cc
 8011a94:	2001      	movcc	r0, #1
 8011a96:	b510      	push	{r4, lr}
 8011a98:	4604      	mov	r4, r0
 8011a9a:	4620      	mov	r0, r4
 8011a9c:	f000 f81c 	bl	8011ad8 <malloc>
 8011aa0:	b100      	cbz	r0, 8011aa4 <_Znwj+0x14>
 8011aa2:	bd10      	pop	{r4, pc}
 8011aa4:	f000 f808 	bl	8011ab8 <_ZSt15get_new_handlerv>
 8011aa8:	b908      	cbnz	r0, 8011aae <_Znwj+0x1e>
 8011aaa:	f000 f80d 	bl	8011ac8 <abort>
 8011aae:	4780      	blx	r0
 8011ab0:	e7f3      	b.n	8011a9a <_Znwj+0xa>

08011ab2 <_ZdlPv>:
 8011ab2:	f000 b819 	b.w	8011ae8 <free>
	...

08011ab8 <_ZSt15get_new_handlerv>:
 8011ab8:	4b02      	ldr	r3, [pc, #8]	@ (8011ac4 <_ZSt15get_new_handlerv+0xc>)
 8011aba:	6818      	ldr	r0, [r3, #0]
 8011abc:	f3bf 8f5b 	dmb	ish
 8011ac0:	4770      	bx	lr
 8011ac2:	bf00      	nop
 8011ac4:	200005bc 	.word	0x200005bc

08011ac8 <abort>:
 8011ac8:	b508      	push	{r3, lr}
 8011aca:	2006      	movs	r0, #6
 8011acc:	f000 fe70 	bl	80127b0 <raise>
 8011ad0:	2001      	movs	r0, #1
 8011ad2:	f7fb fd5d 	bl	800d590 <_exit>
	...

08011ad8 <malloc>:
 8011ad8:	4b02      	ldr	r3, [pc, #8]	@ (8011ae4 <malloc+0xc>)
 8011ada:	4601      	mov	r1, r0
 8011adc:	6818      	ldr	r0, [r3, #0]
 8011ade:	f000 b82d 	b.w	8011b3c <_malloc_r>
 8011ae2:	bf00      	nop
 8011ae4:	2000001c 	.word	0x2000001c

08011ae8 <free>:
 8011ae8:	4b02      	ldr	r3, [pc, #8]	@ (8011af4 <free+0xc>)
 8011aea:	4601      	mov	r1, r0
 8011aec:	6818      	ldr	r0, [r3, #0]
 8011aee:	f001 bd57 	b.w	80135a0 <_free_r>
 8011af2:	bf00      	nop
 8011af4:	2000001c 	.word	0x2000001c

08011af8 <sbrk_aligned>:
 8011af8:	b570      	push	{r4, r5, r6, lr}
 8011afa:	4e0f      	ldr	r6, [pc, #60]	@ (8011b38 <sbrk_aligned+0x40>)
 8011afc:	460c      	mov	r4, r1
 8011afe:	6831      	ldr	r1, [r6, #0]
 8011b00:	4605      	mov	r5, r0
 8011b02:	b911      	cbnz	r1, 8011b0a <sbrk_aligned+0x12>
 8011b04:	f000 fea8 	bl	8012858 <_sbrk_r>
 8011b08:	6030      	str	r0, [r6, #0]
 8011b0a:	4621      	mov	r1, r4
 8011b0c:	4628      	mov	r0, r5
 8011b0e:	f000 fea3 	bl	8012858 <_sbrk_r>
 8011b12:	1c43      	adds	r3, r0, #1
 8011b14:	d103      	bne.n	8011b1e <sbrk_aligned+0x26>
 8011b16:	f04f 34ff 	mov.w	r4, #4294967295
 8011b1a:	4620      	mov	r0, r4
 8011b1c:	bd70      	pop	{r4, r5, r6, pc}
 8011b1e:	1cc4      	adds	r4, r0, #3
 8011b20:	f024 0403 	bic.w	r4, r4, #3
 8011b24:	42a0      	cmp	r0, r4
 8011b26:	d0f8      	beq.n	8011b1a <sbrk_aligned+0x22>
 8011b28:	1a21      	subs	r1, r4, r0
 8011b2a:	4628      	mov	r0, r5
 8011b2c:	f000 fe94 	bl	8012858 <_sbrk_r>
 8011b30:	3001      	adds	r0, #1
 8011b32:	d1f2      	bne.n	8011b1a <sbrk_aligned+0x22>
 8011b34:	e7ef      	b.n	8011b16 <sbrk_aligned+0x1e>
 8011b36:	bf00      	nop
 8011b38:	200005c0 	.word	0x200005c0

08011b3c <_malloc_r>:
 8011b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b40:	1ccd      	adds	r5, r1, #3
 8011b42:	f025 0503 	bic.w	r5, r5, #3
 8011b46:	3508      	adds	r5, #8
 8011b48:	2d0c      	cmp	r5, #12
 8011b4a:	bf38      	it	cc
 8011b4c:	250c      	movcc	r5, #12
 8011b4e:	2d00      	cmp	r5, #0
 8011b50:	4606      	mov	r6, r0
 8011b52:	db01      	blt.n	8011b58 <_malloc_r+0x1c>
 8011b54:	42a9      	cmp	r1, r5
 8011b56:	d904      	bls.n	8011b62 <_malloc_r+0x26>
 8011b58:	230c      	movs	r3, #12
 8011b5a:	6033      	str	r3, [r6, #0]
 8011b5c:	2000      	movs	r0, #0
 8011b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011c38 <_malloc_r+0xfc>
 8011b66:	f000 f869 	bl	8011c3c <__malloc_lock>
 8011b6a:	f8d8 3000 	ldr.w	r3, [r8]
 8011b6e:	461c      	mov	r4, r3
 8011b70:	bb44      	cbnz	r4, 8011bc4 <_malloc_r+0x88>
 8011b72:	4629      	mov	r1, r5
 8011b74:	4630      	mov	r0, r6
 8011b76:	f7ff ffbf 	bl	8011af8 <sbrk_aligned>
 8011b7a:	1c43      	adds	r3, r0, #1
 8011b7c:	4604      	mov	r4, r0
 8011b7e:	d158      	bne.n	8011c32 <_malloc_r+0xf6>
 8011b80:	f8d8 4000 	ldr.w	r4, [r8]
 8011b84:	4627      	mov	r7, r4
 8011b86:	2f00      	cmp	r7, #0
 8011b88:	d143      	bne.n	8011c12 <_malloc_r+0xd6>
 8011b8a:	2c00      	cmp	r4, #0
 8011b8c:	d04b      	beq.n	8011c26 <_malloc_r+0xea>
 8011b8e:	6823      	ldr	r3, [r4, #0]
 8011b90:	4639      	mov	r1, r7
 8011b92:	4630      	mov	r0, r6
 8011b94:	eb04 0903 	add.w	r9, r4, r3
 8011b98:	f000 fe5e 	bl	8012858 <_sbrk_r>
 8011b9c:	4581      	cmp	r9, r0
 8011b9e:	d142      	bne.n	8011c26 <_malloc_r+0xea>
 8011ba0:	6821      	ldr	r1, [r4, #0]
 8011ba2:	1a6d      	subs	r5, r5, r1
 8011ba4:	4629      	mov	r1, r5
 8011ba6:	4630      	mov	r0, r6
 8011ba8:	f7ff ffa6 	bl	8011af8 <sbrk_aligned>
 8011bac:	3001      	adds	r0, #1
 8011bae:	d03a      	beq.n	8011c26 <_malloc_r+0xea>
 8011bb0:	6823      	ldr	r3, [r4, #0]
 8011bb2:	442b      	add	r3, r5
 8011bb4:	6023      	str	r3, [r4, #0]
 8011bb6:	f8d8 3000 	ldr.w	r3, [r8]
 8011bba:	685a      	ldr	r2, [r3, #4]
 8011bbc:	bb62      	cbnz	r2, 8011c18 <_malloc_r+0xdc>
 8011bbe:	f8c8 7000 	str.w	r7, [r8]
 8011bc2:	e00f      	b.n	8011be4 <_malloc_r+0xa8>
 8011bc4:	6822      	ldr	r2, [r4, #0]
 8011bc6:	1b52      	subs	r2, r2, r5
 8011bc8:	d420      	bmi.n	8011c0c <_malloc_r+0xd0>
 8011bca:	2a0b      	cmp	r2, #11
 8011bcc:	d917      	bls.n	8011bfe <_malloc_r+0xc2>
 8011bce:	1961      	adds	r1, r4, r5
 8011bd0:	42a3      	cmp	r3, r4
 8011bd2:	6025      	str	r5, [r4, #0]
 8011bd4:	bf18      	it	ne
 8011bd6:	6059      	strne	r1, [r3, #4]
 8011bd8:	6863      	ldr	r3, [r4, #4]
 8011bda:	bf08      	it	eq
 8011bdc:	f8c8 1000 	streq.w	r1, [r8]
 8011be0:	5162      	str	r2, [r4, r5]
 8011be2:	604b      	str	r3, [r1, #4]
 8011be4:	4630      	mov	r0, r6
 8011be6:	f000 f82f 	bl	8011c48 <__malloc_unlock>
 8011bea:	f104 000b 	add.w	r0, r4, #11
 8011bee:	1d23      	adds	r3, r4, #4
 8011bf0:	f020 0007 	bic.w	r0, r0, #7
 8011bf4:	1ac2      	subs	r2, r0, r3
 8011bf6:	bf1c      	itt	ne
 8011bf8:	1a1b      	subne	r3, r3, r0
 8011bfa:	50a3      	strne	r3, [r4, r2]
 8011bfc:	e7af      	b.n	8011b5e <_malloc_r+0x22>
 8011bfe:	6862      	ldr	r2, [r4, #4]
 8011c00:	42a3      	cmp	r3, r4
 8011c02:	bf0c      	ite	eq
 8011c04:	f8c8 2000 	streq.w	r2, [r8]
 8011c08:	605a      	strne	r2, [r3, #4]
 8011c0a:	e7eb      	b.n	8011be4 <_malloc_r+0xa8>
 8011c0c:	4623      	mov	r3, r4
 8011c0e:	6864      	ldr	r4, [r4, #4]
 8011c10:	e7ae      	b.n	8011b70 <_malloc_r+0x34>
 8011c12:	463c      	mov	r4, r7
 8011c14:	687f      	ldr	r7, [r7, #4]
 8011c16:	e7b6      	b.n	8011b86 <_malloc_r+0x4a>
 8011c18:	461a      	mov	r2, r3
 8011c1a:	685b      	ldr	r3, [r3, #4]
 8011c1c:	42a3      	cmp	r3, r4
 8011c1e:	d1fb      	bne.n	8011c18 <_malloc_r+0xdc>
 8011c20:	2300      	movs	r3, #0
 8011c22:	6053      	str	r3, [r2, #4]
 8011c24:	e7de      	b.n	8011be4 <_malloc_r+0xa8>
 8011c26:	230c      	movs	r3, #12
 8011c28:	6033      	str	r3, [r6, #0]
 8011c2a:	4630      	mov	r0, r6
 8011c2c:	f000 f80c 	bl	8011c48 <__malloc_unlock>
 8011c30:	e794      	b.n	8011b5c <_malloc_r+0x20>
 8011c32:	6005      	str	r5, [r0, #0]
 8011c34:	e7d6      	b.n	8011be4 <_malloc_r+0xa8>
 8011c36:	bf00      	nop
 8011c38:	200005c4 	.word	0x200005c4

08011c3c <__malloc_lock>:
 8011c3c:	4801      	ldr	r0, [pc, #4]	@ (8011c44 <__malloc_lock+0x8>)
 8011c3e:	f000 be58 	b.w	80128f2 <__retarget_lock_acquire_recursive>
 8011c42:	bf00      	nop
 8011c44:	20000708 	.word	0x20000708

08011c48 <__malloc_unlock>:
 8011c48:	4801      	ldr	r0, [pc, #4]	@ (8011c50 <__malloc_unlock+0x8>)
 8011c4a:	f000 be53 	b.w	80128f4 <__retarget_lock_release_recursive>
 8011c4e:	bf00      	nop
 8011c50:	20000708 	.word	0x20000708

08011c54 <__cvt>:
 8011c54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011c58:	ec57 6b10 	vmov	r6, r7, d0
 8011c5c:	2f00      	cmp	r7, #0
 8011c5e:	460c      	mov	r4, r1
 8011c60:	4619      	mov	r1, r3
 8011c62:	463b      	mov	r3, r7
 8011c64:	bfbb      	ittet	lt
 8011c66:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8011c6a:	461f      	movlt	r7, r3
 8011c6c:	2300      	movge	r3, #0
 8011c6e:	232d      	movlt	r3, #45	@ 0x2d
 8011c70:	700b      	strb	r3, [r1, #0]
 8011c72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011c74:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8011c78:	4691      	mov	r9, r2
 8011c7a:	f023 0820 	bic.w	r8, r3, #32
 8011c7e:	bfbc      	itt	lt
 8011c80:	4632      	movlt	r2, r6
 8011c82:	4616      	movlt	r6, r2
 8011c84:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011c88:	d005      	beq.n	8011c96 <__cvt+0x42>
 8011c8a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8011c8e:	d100      	bne.n	8011c92 <__cvt+0x3e>
 8011c90:	3401      	adds	r4, #1
 8011c92:	2102      	movs	r1, #2
 8011c94:	e000      	b.n	8011c98 <__cvt+0x44>
 8011c96:	2103      	movs	r1, #3
 8011c98:	ab03      	add	r3, sp, #12
 8011c9a:	9301      	str	r3, [sp, #4]
 8011c9c:	ab02      	add	r3, sp, #8
 8011c9e:	9300      	str	r3, [sp, #0]
 8011ca0:	ec47 6b10 	vmov	d0, r6, r7
 8011ca4:	4653      	mov	r3, sl
 8011ca6:	4622      	mov	r2, r4
 8011ca8:	f000 feb6 	bl	8012a18 <_dtoa_r>
 8011cac:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8011cb0:	4605      	mov	r5, r0
 8011cb2:	d119      	bne.n	8011ce8 <__cvt+0x94>
 8011cb4:	f019 0f01 	tst.w	r9, #1
 8011cb8:	d00e      	beq.n	8011cd8 <__cvt+0x84>
 8011cba:	eb00 0904 	add.w	r9, r0, r4
 8011cbe:	2200      	movs	r2, #0
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	4630      	mov	r0, r6
 8011cc4:	4639      	mov	r1, r7
 8011cc6:	f7ee ff07 	bl	8000ad8 <__aeabi_dcmpeq>
 8011cca:	b108      	cbz	r0, 8011cd0 <__cvt+0x7c>
 8011ccc:	f8cd 900c 	str.w	r9, [sp, #12]
 8011cd0:	2230      	movs	r2, #48	@ 0x30
 8011cd2:	9b03      	ldr	r3, [sp, #12]
 8011cd4:	454b      	cmp	r3, r9
 8011cd6:	d31e      	bcc.n	8011d16 <__cvt+0xc2>
 8011cd8:	9b03      	ldr	r3, [sp, #12]
 8011cda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011cdc:	1b5b      	subs	r3, r3, r5
 8011cde:	4628      	mov	r0, r5
 8011ce0:	6013      	str	r3, [r2, #0]
 8011ce2:	b004      	add	sp, #16
 8011ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ce8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011cec:	eb00 0904 	add.w	r9, r0, r4
 8011cf0:	d1e5      	bne.n	8011cbe <__cvt+0x6a>
 8011cf2:	7803      	ldrb	r3, [r0, #0]
 8011cf4:	2b30      	cmp	r3, #48	@ 0x30
 8011cf6:	d10a      	bne.n	8011d0e <__cvt+0xba>
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	4630      	mov	r0, r6
 8011cfe:	4639      	mov	r1, r7
 8011d00:	f7ee feea 	bl	8000ad8 <__aeabi_dcmpeq>
 8011d04:	b918      	cbnz	r0, 8011d0e <__cvt+0xba>
 8011d06:	f1c4 0401 	rsb	r4, r4, #1
 8011d0a:	f8ca 4000 	str.w	r4, [sl]
 8011d0e:	f8da 3000 	ldr.w	r3, [sl]
 8011d12:	4499      	add	r9, r3
 8011d14:	e7d3      	b.n	8011cbe <__cvt+0x6a>
 8011d16:	1c59      	adds	r1, r3, #1
 8011d18:	9103      	str	r1, [sp, #12]
 8011d1a:	701a      	strb	r2, [r3, #0]
 8011d1c:	e7d9      	b.n	8011cd2 <__cvt+0x7e>

08011d1e <__exponent>:
 8011d1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011d20:	2900      	cmp	r1, #0
 8011d22:	bfba      	itte	lt
 8011d24:	4249      	neglt	r1, r1
 8011d26:	232d      	movlt	r3, #45	@ 0x2d
 8011d28:	232b      	movge	r3, #43	@ 0x2b
 8011d2a:	2909      	cmp	r1, #9
 8011d2c:	7002      	strb	r2, [r0, #0]
 8011d2e:	7043      	strb	r3, [r0, #1]
 8011d30:	dd29      	ble.n	8011d86 <__exponent+0x68>
 8011d32:	f10d 0307 	add.w	r3, sp, #7
 8011d36:	461d      	mov	r5, r3
 8011d38:	270a      	movs	r7, #10
 8011d3a:	461a      	mov	r2, r3
 8011d3c:	fbb1 f6f7 	udiv	r6, r1, r7
 8011d40:	fb07 1416 	mls	r4, r7, r6, r1
 8011d44:	3430      	adds	r4, #48	@ 0x30
 8011d46:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011d4a:	460c      	mov	r4, r1
 8011d4c:	2c63      	cmp	r4, #99	@ 0x63
 8011d4e:	f103 33ff 	add.w	r3, r3, #4294967295
 8011d52:	4631      	mov	r1, r6
 8011d54:	dcf1      	bgt.n	8011d3a <__exponent+0x1c>
 8011d56:	3130      	adds	r1, #48	@ 0x30
 8011d58:	1e94      	subs	r4, r2, #2
 8011d5a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011d5e:	1c41      	adds	r1, r0, #1
 8011d60:	4623      	mov	r3, r4
 8011d62:	42ab      	cmp	r3, r5
 8011d64:	d30a      	bcc.n	8011d7c <__exponent+0x5e>
 8011d66:	f10d 0309 	add.w	r3, sp, #9
 8011d6a:	1a9b      	subs	r3, r3, r2
 8011d6c:	42ac      	cmp	r4, r5
 8011d6e:	bf88      	it	hi
 8011d70:	2300      	movhi	r3, #0
 8011d72:	3302      	adds	r3, #2
 8011d74:	4403      	add	r3, r0
 8011d76:	1a18      	subs	r0, r3, r0
 8011d78:	b003      	add	sp, #12
 8011d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d7c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011d80:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011d84:	e7ed      	b.n	8011d62 <__exponent+0x44>
 8011d86:	2330      	movs	r3, #48	@ 0x30
 8011d88:	3130      	adds	r1, #48	@ 0x30
 8011d8a:	7083      	strb	r3, [r0, #2]
 8011d8c:	70c1      	strb	r1, [r0, #3]
 8011d8e:	1d03      	adds	r3, r0, #4
 8011d90:	e7f1      	b.n	8011d76 <__exponent+0x58>
	...

08011d94 <_printf_float>:
 8011d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d98:	b08d      	sub	sp, #52	@ 0x34
 8011d9a:	460c      	mov	r4, r1
 8011d9c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011da0:	4616      	mov	r6, r2
 8011da2:	461f      	mov	r7, r3
 8011da4:	4605      	mov	r5, r0
 8011da6:	f000 fd0b 	bl	80127c0 <_localeconv_r>
 8011daa:	6803      	ldr	r3, [r0, #0]
 8011dac:	9304      	str	r3, [sp, #16]
 8011dae:	4618      	mov	r0, r3
 8011db0:	f7ee fa66 	bl	8000280 <strlen>
 8011db4:	2300      	movs	r3, #0
 8011db6:	930a      	str	r3, [sp, #40]	@ 0x28
 8011db8:	f8d8 3000 	ldr.w	r3, [r8]
 8011dbc:	9005      	str	r0, [sp, #20]
 8011dbe:	3307      	adds	r3, #7
 8011dc0:	f023 0307 	bic.w	r3, r3, #7
 8011dc4:	f103 0208 	add.w	r2, r3, #8
 8011dc8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011dcc:	f8d4 b000 	ldr.w	fp, [r4]
 8011dd0:	f8c8 2000 	str.w	r2, [r8]
 8011dd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011dd8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8011ddc:	9307      	str	r3, [sp, #28]
 8011dde:	f8cd 8018 	str.w	r8, [sp, #24]
 8011de2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8011de6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011dea:	4b9c      	ldr	r3, [pc, #624]	@ (801205c <_printf_float+0x2c8>)
 8011dec:	f04f 32ff 	mov.w	r2, #4294967295
 8011df0:	f7ee fea4 	bl	8000b3c <__aeabi_dcmpun>
 8011df4:	bb70      	cbnz	r0, 8011e54 <_printf_float+0xc0>
 8011df6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011dfa:	4b98      	ldr	r3, [pc, #608]	@ (801205c <_printf_float+0x2c8>)
 8011dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8011e00:	f7ee fe7e 	bl	8000b00 <__aeabi_dcmple>
 8011e04:	bb30      	cbnz	r0, 8011e54 <_printf_float+0xc0>
 8011e06:	2200      	movs	r2, #0
 8011e08:	2300      	movs	r3, #0
 8011e0a:	4640      	mov	r0, r8
 8011e0c:	4649      	mov	r1, r9
 8011e0e:	f7ee fe6d 	bl	8000aec <__aeabi_dcmplt>
 8011e12:	b110      	cbz	r0, 8011e1a <_printf_float+0x86>
 8011e14:	232d      	movs	r3, #45	@ 0x2d
 8011e16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011e1a:	4a91      	ldr	r2, [pc, #580]	@ (8012060 <_printf_float+0x2cc>)
 8011e1c:	4b91      	ldr	r3, [pc, #580]	@ (8012064 <_printf_float+0x2d0>)
 8011e1e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011e22:	bf94      	ite	ls
 8011e24:	4690      	movls	r8, r2
 8011e26:	4698      	movhi	r8, r3
 8011e28:	2303      	movs	r3, #3
 8011e2a:	6123      	str	r3, [r4, #16]
 8011e2c:	f02b 0304 	bic.w	r3, fp, #4
 8011e30:	6023      	str	r3, [r4, #0]
 8011e32:	f04f 0900 	mov.w	r9, #0
 8011e36:	9700      	str	r7, [sp, #0]
 8011e38:	4633      	mov	r3, r6
 8011e3a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011e3c:	4621      	mov	r1, r4
 8011e3e:	4628      	mov	r0, r5
 8011e40:	f000 f9d2 	bl	80121e8 <_printf_common>
 8011e44:	3001      	adds	r0, #1
 8011e46:	f040 808d 	bne.w	8011f64 <_printf_float+0x1d0>
 8011e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8011e4e:	b00d      	add	sp, #52	@ 0x34
 8011e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e54:	4642      	mov	r2, r8
 8011e56:	464b      	mov	r3, r9
 8011e58:	4640      	mov	r0, r8
 8011e5a:	4649      	mov	r1, r9
 8011e5c:	f7ee fe6e 	bl	8000b3c <__aeabi_dcmpun>
 8011e60:	b140      	cbz	r0, 8011e74 <_printf_float+0xe0>
 8011e62:	464b      	mov	r3, r9
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	bfbc      	itt	lt
 8011e68:	232d      	movlt	r3, #45	@ 0x2d
 8011e6a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011e6e:	4a7e      	ldr	r2, [pc, #504]	@ (8012068 <_printf_float+0x2d4>)
 8011e70:	4b7e      	ldr	r3, [pc, #504]	@ (801206c <_printf_float+0x2d8>)
 8011e72:	e7d4      	b.n	8011e1e <_printf_float+0x8a>
 8011e74:	6863      	ldr	r3, [r4, #4]
 8011e76:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8011e7a:	9206      	str	r2, [sp, #24]
 8011e7c:	1c5a      	adds	r2, r3, #1
 8011e7e:	d13b      	bne.n	8011ef8 <_printf_float+0x164>
 8011e80:	2306      	movs	r3, #6
 8011e82:	6063      	str	r3, [r4, #4]
 8011e84:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8011e88:	2300      	movs	r3, #0
 8011e8a:	6022      	str	r2, [r4, #0]
 8011e8c:	9303      	str	r3, [sp, #12]
 8011e8e:	ab0a      	add	r3, sp, #40	@ 0x28
 8011e90:	e9cd a301 	strd	sl, r3, [sp, #4]
 8011e94:	ab09      	add	r3, sp, #36	@ 0x24
 8011e96:	9300      	str	r3, [sp, #0]
 8011e98:	6861      	ldr	r1, [r4, #4]
 8011e9a:	ec49 8b10 	vmov	d0, r8, r9
 8011e9e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011ea2:	4628      	mov	r0, r5
 8011ea4:	f7ff fed6 	bl	8011c54 <__cvt>
 8011ea8:	9b06      	ldr	r3, [sp, #24]
 8011eaa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011eac:	2b47      	cmp	r3, #71	@ 0x47
 8011eae:	4680      	mov	r8, r0
 8011eb0:	d129      	bne.n	8011f06 <_printf_float+0x172>
 8011eb2:	1cc8      	adds	r0, r1, #3
 8011eb4:	db02      	blt.n	8011ebc <_printf_float+0x128>
 8011eb6:	6863      	ldr	r3, [r4, #4]
 8011eb8:	4299      	cmp	r1, r3
 8011eba:	dd41      	ble.n	8011f40 <_printf_float+0x1ac>
 8011ebc:	f1aa 0a02 	sub.w	sl, sl, #2
 8011ec0:	fa5f fa8a 	uxtb.w	sl, sl
 8011ec4:	3901      	subs	r1, #1
 8011ec6:	4652      	mov	r2, sl
 8011ec8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011ecc:	9109      	str	r1, [sp, #36]	@ 0x24
 8011ece:	f7ff ff26 	bl	8011d1e <__exponent>
 8011ed2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011ed4:	1813      	adds	r3, r2, r0
 8011ed6:	2a01      	cmp	r2, #1
 8011ed8:	4681      	mov	r9, r0
 8011eda:	6123      	str	r3, [r4, #16]
 8011edc:	dc02      	bgt.n	8011ee4 <_printf_float+0x150>
 8011ede:	6822      	ldr	r2, [r4, #0]
 8011ee0:	07d2      	lsls	r2, r2, #31
 8011ee2:	d501      	bpl.n	8011ee8 <_printf_float+0x154>
 8011ee4:	3301      	adds	r3, #1
 8011ee6:	6123      	str	r3, [r4, #16]
 8011ee8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d0a2      	beq.n	8011e36 <_printf_float+0xa2>
 8011ef0:	232d      	movs	r3, #45	@ 0x2d
 8011ef2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011ef6:	e79e      	b.n	8011e36 <_printf_float+0xa2>
 8011ef8:	9a06      	ldr	r2, [sp, #24]
 8011efa:	2a47      	cmp	r2, #71	@ 0x47
 8011efc:	d1c2      	bne.n	8011e84 <_printf_float+0xf0>
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d1c0      	bne.n	8011e84 <_printf_float+0xf0>
 8011f02:	2301      	movs	r3, #1
 8011f04:	e7bd      	b.n	8011e82 <_printf_float+0xee>
 8011f06:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011f0a:	d9db      	bls.n	8011ec4 <_printf_float+0x130>
 8011f0c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8011f10:	d118      	bne.n	8011f44 <_printf_float+0x1b0>
 8011f12:	2900      	cmp	r1, #0
 8011f14:	6863      	ldr	r3, [r4, #4]
 8011f16:	dd0b      	ble.n	8011f30 <_printf_float+0x19c>
 8011f18:	6121      	str	r1, [r4, #16]
 8011f1a:	b913      	cbnz	r3, 8011f22 <_printf_float+0x18e>
 8011f1c:	6822      	ldr	r2, [r4, #0]
 8011f1e:	07d0      	lsls	r0, r2, #31
 8011f20:	d502      	bpl.n	8011f28 <_printf_float+0x194>
 8011f22:	3301      	adds	r3, #1
 8011f24:	440b      	add	r3, r1
 8011f26:	6123      	str	r3, [r4, #16]
 8011f28:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011f2a:	f04f 0900 	mov.w	r9, #0
 8011f2e:	e7db      	b.n	8011ee8 <_printf_float+0x154>
 8011f30:	b913      	cbnz	r3, 8011f38 <_printf_float+0x1a4>
 8011f32:	6822      	ldr	r2, [r4, #0]
 8011f34:	07d2      	lsls	r2, r2, #31
 8011f36:	d501      	bpl.n	8011f3c <_printf_float+0x1a8>
 8011f38:	3302      	adds	r3, #2
 8011f3a:	e7f4      	b.n	8011f26 <_printf_float+0x192>
 8011f3c:	2301      	movs	r3, #1
 8011f3e:	e7f2      	b.n	8011f26 <_printf_float+0x192>
 8011f40:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8011f44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011f46:	4299      	cmp	r1, r3
 8011f48:	db05      	blt.n	8011f56 <_printf_float+0x1c2>
 8011f4a:	6823      	ldr	r3, [r4, #0]
 8011f4c:	6121      	str	r1, [r4, #16]
 8011f4e:	07d8      	lsls	r0, r3, #31
 8011f50:	d5ea      	bpl.n	8011f28 <_printf_float+0x194>
 8011f52:	1c4b      	adds	r3, r1, #1
 8011f54:	e7e7      	b.n	8011f26 <_printf_float+0x192>
 8011f56:	2900      	cmp	r1, #0
 8011f58:	bfd4      	ite	le
 8011f5a:	f1c1 0202 	rsble	r2, r1, #2
 8011f5e:	2201      	movgt	r2, #1
 8011f60:	4413      	add	r3, r2
 8011f62:	e7e0      	b.n	8011f26 <_printf_float+0x192>
 8011f64:	6823      	ldr	r3, [r4, #0]
 8011f66:	055a      	lsls	r2, r3, #21
 8011f68:	d407      	bmi.n	8011f7a <_printf_float+0x1e6>
 8011f6a:	6923      	ldr	r3, [r4, #16]
 8011f6c:	4642      	mov	r2, r8
 8011f6e:	4631      	mov	r1, r6
 8011f70:	4628      	mov	r0, r5
 8011f72:	47b8      	blx	r7
 8011f74:	3001      	adds	r0, #1
 8011f76:	d12b      	bne.n	8011fd0 <_printf_float+0x23c>
 8011f78:	e767      	b.n	8011e4a <_printf_float+0xb6>
 8011f7a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011f7e:	f240 80dd 	bls.w	801213c <_printf_float+0x3a8>
 8011f82:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011f86:	2200      	movs	r2, #0
 8011f88:	2300      	movs	r3, #0
 8011f8a:	f7ee fda5 	bl	8000ad8 <__aeabi_dcmpeq>
 8011f8e:	2800      	cmp	r0, #0
 8011f90:	d033      	beq.n	8011ffa <_printf_float+0x266>
 8011f92:	4a37      	ldr	r2, [pc, #220]	@ (8012070 <_printf_float+0x2dc>)
 8011f94:	2301      	movs	r3, #1
 8011f96:	4631      	mov	r1, r6
 8011f98:	4628      	mov	r0, r5
 8011f9a:	47b8      	blx	r7
 8011f9c:	3001      	adds	r0, #1
 8011f9e:	f43f af54 	beq.w	8011e4a <_printf_float+0xb6>
 8011fa2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8011fa6:	4543      	cmp	r3, r8
 8011fa8:	db02      	blt.n	8011fb0 <_printf_float+0x21c>
 8011faa:	6823      	ldr	r3, [r4, #0]
 8011fac:	07d8      	lsls	r0, r3, #31
 8011fae:	d50f      	bpl.n	8011fd0 <_printf_float+0x23c>
 8011fb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011fb4:	4631      	mov	r1, r6
 8011fb6:	4628      	mov	r0, r5
 8011fb8:	47b8      	blx	r7
 8011fba:	3001      	adds	r0, #1
 8011fbc:	f43f af45 	beq.w	8011e4a <_printf_float+0xb6>
 8011fc0:	f04f 0900 	mov.w	r9, #0
 8011fc4:	f108 38ff 	add.w	r8, r8, #4294967295
 8011fc8:	f104 0a1a 	add.w	sl, r4, #26
 8011fcc:	45c8      	cmp	r8, r9
 8011fce:	dc09      	bgt.n	8011fe4 <_printf_float+0x250>
 8011fd0:	6823      	ldr	r3, [r4, #0]
 8011fd2:	079b      	lsls	r3, r3, #30
 8011fd4:	f100 8103 	bmi.w	80121de <_printf_float+0x44a>
 8011fd8:	68e0      	ldr	r0, [r4, #12]
 8011fda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011fdc:	4298      	cmp	r0, r3
 8011fde:	bfb8      	it	lt
 8011fe0:	4618      	movlt	r0, r3
 8011fe2:	e734      	b.n	8011e4e <_printf_float+0xba>
 8011fe4:	2301      	movs	r3, #1
 8011fe6:	4652      	mov	r2, sl
 8011fe8:	4631      	mov	r1, r6
 8011fea:	4628      	mov	r0, r5
 8011fec:	47b8      	blx	r7
 8011fee:	3001      	adds	r0, #1
 8011ff0:	f43f af2b 	beq.w	8011e4a <_printf_float+0xb6>
 8011ff4:	f109 0901 	add.w	r9, r9, #1
 8011ff8:	e7e8      	b.n	8011fcc <_printf_float+0x238>
 8011ffa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	dc39      	bgt.n	8012074 <_printf_float+0x2e0>
 8012000:	4a1b      	ldr	r2, [pc, #108]	@ (8012070 <_printf_float+0x2dc>)
 8012002:	2301      	movs	r3, #1
 8012004:	4631      	mov	r1, r6
 8012006:	4628      	mov	r0, r5
 8012008:	47b8      	blx	r7
 801200a:	3001      	adds	r0, #1
 801200c:	f43f af1d 	beq.w	8011e4a <_printf_float+0xb6>
 8012010:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012014:	ea59 0303 	orrs.w	r3, r9, r3
 8012018:	d102      	bne.n	8012020 <_printf_float+0x28c>
 801201a:	6823      	ldr	r3, [r4, #0]
 801201c:	07d9      	lsls	r1, r3, #31
 801201e:	d5d7      	bpl.n	8011fd0 <_printf_float+0x23c>
 8012020:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012024:	4631      	mov	r1, r6
 8012026:	4628      	mov	r0, r5
 8012028:	47b8      	blx	r7
 801202a:	3001      	adds	r0, #1
 801202c:	f43f af0d 	beq.w	8011e4a <_printf_float+0xb6>
 8012030:	f04f 0a00 	mov.w	sl, #0
 8012034:	f104 0b1a 	add.w	fp, r4, #26
 8012038:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801203a:	425b      	negs	r3, r3
 801203c:	4553      	cmp	r3, sl
 801203e:	dc01      	bgt.n	8012044 <_printf_float+0x2b0>
 8012040:	464b      	mov	r3, r9
 8012042:	e793      	b.n	8011f6c <_printf_float+0x1d8>
 8012044:	2301      	movs	r3, #1
 8012046:	465a      	mov	r2, fp
 8012048:	4631      	mov	r1, r6
 801204a:	4628      	mov	r0, r5
 801204c:	47b8      	blx	r7
 801204e:	3001      	adds	r0, #1
 8012050:	f43f aefb 	beq.w	8011e4a <_printf_float+0xb6>
 8012054:	f10a 0a01 	add.w	sl, sl, #1
 8012058:	e7ee      	b.n	8012038 <_printf_float+0x2a4>
 801205a:	bf00      	nop
 801205c:	7fefffff 	.word	0x7fefffff
 8012060:	08016210 	.word	0x08016210
 8012064:	08016214 	.word	0x08016214
 8012068:	08016218 	.word	0x08016218
 801206c:	0801621c 	.word	0x0801621c
 8012070:	08016220 	.word	0x08016220
 8012074:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012076:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801207a:	4553      	cmp	r3, sl
 801207c:	bfa8      	it	ge
 801207e:	4653      	movge	r3, sl
 8012080:	2b00      	cmp	r3, #0
 8012082:	4699      	mov	r9, r3
 8012084:	dc36      	bgt.n	80120f4 <_printf_float+0x360>
 8012086:	f04f 0b00 	mov.w	fp, #0
 801208a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801208e:	f104 021a 	add.w	r2, r4, #26
 8012092:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012094:	9306      	str	r3, [sp, #24]
 8012096:	eba3 0309 	sub.w	r3, r3, r9
 801209a:	455b      	cmp	r3, fp
 801209c:	dc31      	bgt.n	8012102 <_printf_float+0x36e>
 801209e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80120a0:	459a      	cmp	sl, r3
 80120a2:	dc3a      	bgt.n	801211a <_printf_float+0x386>
 80120a4:	6823      	ldr	r3, [r4, #0]
 80120a6:	07da      	lsls	r2, r3, #31
 80120a8:	d437      	bmi.n	801211a <_printf_float+0x386>
 80120aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80120ac:	ebaa 0903 	sub.w	r9, sl, r3
 80120b0:	9b06      	ldr	r3, [sp, #24]
 80120b2:	ebaa 0303 	sub.w	r3, sl, r3
 80120b6:	4599      	cmp	r9, r3
 80120b8:	bfa8      	it	ge
 80120ba:	4699      	movge	r9, r3
 80120bc:	f1b9 0f00 	cmp.w	r9, #0
 80120c0:	dc33      	bgt.n	801212a <_printf_float+0x396>
 80120c2:	f04f 0800 	mov.w	r8, #0
 80120c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80120ca:	f104 0b1a 	add.w	fp, r4, #26
 80120ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80120d0:	ebaa 0303 	sub.w	r3, sl, r3
 80120d4:	eba3 0309 	sub.w	r3, r3, r9
 80120d8:	4543      	cmp	r3, r8
 80120da:	f77f af79 	ble.w	8011fd0 <_printf_float+0x23c>
 80120de:	2301      	movs	r3, #1
 80120e0:	465a      	mov	r2, fp
 80120e2:	4631      	mov	r1, r6
 80120e4:	4628      	mov	r0, r5
 80120e6:	47b8      	blx	r7
 80120e8:	3001      	adds	r0, #1
 80120ea:	f43f aeae 	beq.w	8011e4a <_printf_float+0xb6>
 80120ee:	f108 0801 	add.w	r8, r8, #1
 80120f2:	e7ec      	b.n	80120ce <_printf_float+0x33a>
 80120f4:	4642      	mov	r2, r8
 80120f6:	4631      	mov	r1, r6
 80120f8:	4628      	mov	r0, r5
 80120fa:	47b8      	blx	r7
 80120fc:	3001      	adds	r0, #1
 80120fe:	d1c2      	bne.n	8012086 <_printf_float+0x2f2>
 8012100:	e6a3      	b.n	8011e4a <_printf_float+0xb6>
 8012102:	2301      	movs	r3, #1
 8012104:	4631      	mov	r1, r6
 8012106:	4628      	mov	r0, r5
 8012108:	9206      	str	r2, [sp, #24]
 801210a:	47b8      	blx	r7
 801210c:	3001      	adds	r0, #1
 801210e:	f43f ae9c 	beq.w	8011e4a <_printf_float+0xb6>
 8012112:	9a06      	ldr	r2, [sp, #24]
 8012114:	f10b 0b01 	add.w	fp, fp, #1
 8012118:	e7bb      	b.n	8012092 <_printf_float+0x2fe>
 801211a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801211e:	4631      	mov	r1, r6
 8012120:	4628      	mov	r0, r5
 8012122:	47b8      	blx	r7
 8012124:	3001      	adds	r0, #1
 8012126:	d1c0      	bne.n	80120aa <_printf_float+0x316>
 8012128:	e68f      	b.n	8011e4a <_printf_float+0xb6>
 801212a:	9a06      	ldr	r2, [sp, #24]
 801212c:	464b      	mov	r3, r9
 801212e:	4442      	add	r2, r8
 8012130:	4631      	mov	r1, r6
 8012132:	4628      	mov	r0, r5
 8012134:	47b8      	blx	r7
 8012136:	3001      	adds	r0, #1
 8012138:	d1c3      	bne.n	80120c2 <_printf_float+0x32e>
 801213a:	e686      	b.n	8011e4a <_printf_float+0xb6>
 801213c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012140:	f1ba 0f01 	cmp.w	sl, #1
 8012144:	dc01      	bgt.n	801214a <_printf_float+0x3b6>
 8012146:	07db      	lsls	r3, r3, #31
 8012148:	d536      	bpl.n	80121b8 <_printf_float+0x424>
 801214a:	2301      	movs	r3, #1
 801214c:	4642      	mov	r2, r8
 801214e:	4631      	mov	r1, r6
 8012150:	4628      	mov	r0, r5
 8012152:	47b8      	blx	r7
 8012154:	3001      	adds	r0, #1
 8012156:	f43f ae78 	beq.w	8011e4a <_printf_float+0xb6>
 801215a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801215e:	4631      	mov	r1, r6
 8012160:	4628      	mov	r0, r5
 8012162:	47b8      	blx	r7
 8012164:	3001      	adds	r0, #1
 8012166:	f43f ae70 	beq.w	8011e4a <_printf_float+0xb6>
 801216a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801216e:	2200      	movs	r2, #0
 8012170:	2300      	movs	r3, #0
 8012172:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012176:	f7ee fcaf 	bl	8000ad8 <__aeabi_dcmpeq>
 801217a:	b9c0      	cbnz	r0, 80121ae <_printf_float+0x41a>
 801217c:	4653      	mov	r3, sl
 801217e:	f108 0201 	add.w	r2, r8, #1
 8012182:	4631      	mov	r1, r6
 8012184:	4628      	mov	r0, r5
 8012186:	47b8      	blx	r7
 8012188:	3001      	adds	r0, #1
 801218a:	d10c      	bne.n	80121a6 <_printf_float+0x412>
 801218c:	e65d      	b.n	8011e4a <_printf_float+0xb6>
 801218e:	2301      	movs	r3, #1
 8012190:	465a      	mov	r2, fp
 8012192:	4631      	mov	r1, r6
 8012194:	4628      	mov	r0, r5
 8012196:	47b8      	blx	r7
 8012198:	3001      	adds	r0, #1
 801219a:	f43f ae56 	beq.w	8011e4a <_printf_float+0xb6>
 801219e:	f108 0801 	add.w	r8, r8, #1
 80121a2:	45d0      	cmp	r8, sl
 80121a4:	dbf3      	blt.n	801218e <_printf_float+0x3fa>
 80121a6:	464b      	mov	r3, r9
 80121a8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80121ac:	e6df      	b.n	8011f6e <_printf_float+0x1da>
 80121ae:	f04f 0800 	mov.w	r8, #0
 80121b2:	f104 0b1a 	add.w	fp, r4, #26
 80121b6:	e7f4      	b.n	80121a2 <_printf_float+0x40e>
 80121b8:	2301      	movs	r3, #1
 80121ba:	4642      	mov	r2, r8
 80121bc:	e7e1      	b.n	8012182 <_printf_float+0x3ee>
 80121be:	2301      	movs	r3, #1
 80121c0:	464a      	mov	r2, r9
 80121c2:	4631      	mov	r1, r6
 80121c4:	4628      	mov	r0, r5
 80121c6:	47b8      	blx	r7
 80121c8:	3001      	adds	r0, #1
 80121ca:	f43f ae3e 	beq.w	8011e4a <_printf_float+0xb6>
 80121ce:	f108 0801 	add.w	r8, r8, #1
 80121d2:	68e3      	ldr	r3, [r4, #12]
 80121d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80121d6:	1a5b      	subs	r3, r3, r1
 80121d8:	4543      	cmp	r3, r8
 80121da:	dcf0      	bgt.n	80121be <_printf_float+0x42a>
 80121dc:	e6fc      	b.n	8011fd8 <_printf_float+0x244>
 80121de:	f04f 0800 	mov.w	r8, #0
 80121e2:	f104 0919 	add.w	r9, r4, #25
 80121e6:	e7f4      	b.n	80121d2 <_printf_float+0x43e>

080121e8 <_printf_common>:
 80121e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80121ec:	4616      	mov	r6, r2
 80121ee:	4698      	mov	r8, r3
 80121f0:	688a      	ldr	r2, [r1, #8]
 80121f2:	690b      	ldr	r3, [r1, #16]
 80121f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80121f8:	4293      	cmp	r3, r2
 80121fa:	bfb8      	it	lt
 80121fc:	4613      	movlt	r3, r2
 80121fe:	6033      	str	r3, [r6, #0]
 8012200:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012204:	4607      	mov	r7, r0
 8012206:	460c      	mov	r4, r1
 8012208:	b10a      	cbz	r2, 801220e <_printf_common+0x26>
 801220a:	3301      	adds	r3, #1
 801220c:	6033      	str	r3, [r6, #0]
 801220e:	6823      	ldr	r3, [r4, #0]
 8012210:	0699      	lsls	r1, r3, #26
 8012212:	bf42      	ittt	mi
 8012214:	6833      	ldrmi	r3, [r6, #0]
 8012216:	3302      	addmi	r3, #2
 8012218:	6033      	strmi	r3, [r6, #0]
 801221a:	6825      	ldr	r5, [r4, #0]
 801221c:	f015 0506 	ands.w	r5, r5, #6
 8012220:	d106      	bne.n	8012230 <_printf_common+0x48>
 8012222:	f104 0a19 	add.w	sl, r4, #25
 8012226:	68e3      	ldr	r3, [r4, #12]
 8012228:	6832      	ldr	r2, [r6, #0]
 801222a:	1a9b      	subs	r3, r3, r2
 801222c:	42ab      	cmp	r3, r5
 801222e:	dc26      	bgt.n	801227e <_printf_common+0x96>
 8012230:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012234:	6822      	ldr	r2, [r4, #0]
 8012236:	3b00      	subs	r3, #0
 8012238:	bf18      	it	ne
 801223a:	2301      	movne	r3, #1
 801223c:	0692      	lsls	r2, r2, #26
 801223e:	d42b      	bmi.n	8012298 <_printf_common+0xb0>
 8012240:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012244:	4641      	mov	r1, r8
 8012246:	4638      	mov	r0, r7
 8012248:	47c8      	blx	r9
 801224a:	3001      	adds	r0, #1
 801224c:	d01e      	beq.n	801228c <_printf_common+0xa4>
 801224e:	6823      	ldr	r3, [r4, #0]
 8012250:	6922      	ldr	r2, [r4, #16]
 8012252:	f003 0306 	and.w	r3, r3, #6
 8012256:	2b04      	cmp	r3, #4
 8012258:	bf02      	ittt	eq
 801225a:	68e5      	ldreq	r5, [r4, #12]
 801225c:	6833      	ldreq	r3, [r6, #0]
 801225e:	1aed      	subeq	r5, r5, r3
 8012260:	68a3      	ldr	r3, [r4, #8]
 8012262:	bf0c      	ite	eq
 8012264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012268:	2500      	movne	r5, #0
 801226a:	4293      	cmp	r3, r2
 801226c:	bfc4      	itt	gt
 801226e:	1a9b      	subgt	r3, r3, r2
 8012270:	18ed      	addgt	r5, r5, r3
 8012272:	2600      	movs	r6, #0
 8012274:	341a      	adds	r4, #26
 8012276:	42b5      	cmp	r5, r6
 8012278:	d11a      	bne.n	80122b0 <_printf_common+0xc8>
 801227a:	2000      	movs	r0, #0
 801227c:	e008      	b.n	8012290 <_printf_common+0xa8>
 801227e:	2301      	movs	r3, #1
 8012280:	4652      	mov	r2, sl
 8012282:	4641      	mov	r1, r8
 8012284:	4638      	mov	r0, r7
 8012286:	47c8      	blx	r9
 8012288:	3001      	adds	r0, #1
 801228a:	d103      	bne.n	8012294 <_printf_common+0xac>
 801228c:	f04f 30ff 	mov.w	r0, #4294967295
 8012290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012294:	3501      	adds	r5, #1
 8012296:	e7c6      	b.n	8012226 <_printf_common+0x3e>
 8012298:	18e1      	adds	r1, r4, r3
 801229a:	1c5a      	adds	r2, r3, #1
 801229c:	2030      	movs	r0, #48	@ 0x30
 801229e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80122a2:	4422      	add	r2, r4
 80122a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80122a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80122ac:	3302      	adds	r3, #2
 80122ae:	e7c7      	b.n	8012240 <_printf_common+0x58>
 80122b0:	2301      	movs	r3, #1
 80122b2:	4622      	mov	r2, r4
 80122b4:	4641      	mov	r1, r8
 80122b6:	4638      	mov	r0, r7
 80122b8:	47c8      	blx	r9
 80122ba:	3001      	adds	r0, #1
 80122bc:	d0e6      	beq.n	801228c <_printf_common+0xa4>
 80122be:	3601      	adds	r6, #1
 80122c0:	e7d9      	b.n	8012276 <_printf_common+0x8e>
	...

080122c4 <_printf_i>:
 80122c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80122c8:	7e0f      	ldrb	r7, [r1, #24]
 80122ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80122cc:	2f78      	cmp	r7, #120	@ 0x78
 80122ce:	4691      	mov	r9, r2
 80122d0:	4680      	mov	r8, r0
 80122d2:	460c      	mov	r4, r1
 80122d4:	469a      	mov	sl, r3
 80122d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80122da:	d807      	bhi.n	80122ec <_printf_i+0x28>
 80122dc:	2f62      	cmp	r7, #98	@ 0x62
 80122de:	d80a      	bhi.n	80122f6 <_printf_i+0x32>
 80122e0:	2f00      	cmp	r7, #0
 80122e2:	f000 80d2 	beq.w	801248a <_printf_i+0x1c6>
 80122e6:	2f58      	cmp	r7, #88	@ 0x58
 80122e8:	f000 80b9 	beq.w	801245e <_printf_i+0x19a>
 80122ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80122f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80122f4:	e03a      	b.n	801236c <_printf_i+0xa8>
 80122f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80122fa:	2b15      	cmp	r3, #21
 80122fc:	d8f6      	bhi.n	80122ec <_printf_i+0x28>
 80122fe:	a101      	add	r1, pc, #4	@ (adr r1, 8012304 <_printf_i+0x40>)
 8012300:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012304:	0801235d 	.word	0x0801235d
 8012308:	08012371 	.word	0x08012371
 801230c:	080122ed 	.word	0x080122ed
 8012310:	080122ed 	.word	0x080122ed
 8012314:	080122ed 	.word	0x080122ed
 8012318:	080122ed 	.word	0x080122ed
 801231c:	08012371 	.word	0x08012371
 8012320:	080122ed 	.word	0x080122ed
 8012324:	080122ed 	.word	0x080122ed
 8012328:	080122ed 	.word	0x080122ed
 801232c:	080122ed 	.word	0x080122ed
 8012330:	08012471 	.word	0x08012471
 8012334:	0801239b 	.word	0x0801239b
 8012338:	0801242b 	.word	0x0801242b
 801233c:	080122ed 	.word	0x080122ed
 8012340:	080122ed 	.word	0x080122ed
 8012344:	08012493 	.word	0x08012493
 8012348:	080122ed 	.word	0x080122ed
 801234c:	0801239b 	.word	0x0801239b
 8012350:	080122ed 	.word	0x080122ed
 8012354:	080122ed 	.word	0x080122ed
 8012358:	08012433 	.word	0x08012433
 801235c:	6833      	ldr	r3, [r6, #0]
 801235e:	1d1a      	adds	r2, r3, #4
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	6032      	str	r2, [r6, #0]
 8012364:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012368:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801236c:	2301      	movs	r3, #1
 801236e:	e09d      	b.n	80124ac <_printf_i+0x1e8>
 8012370:	6833      	ldr	r3, [r6, #0]
 8012372:	6820      	ldr	r0, [r4, #0]
 8012374:	1d19      	adds	r1, r3, #4
 8012376:	6031      	str	r1, [r6, #0]
 8012378:	0606      	lsls	r6, r0, #24
 801237a:	d501      	bpl.n	8012380 <_printf_i+0xbc>
 801237c:	681d      	ldr	r5, [r3, #0]
 801237e:	e003      	b.n	8012388 <_printf_i+0xc4>
 8012380:	0645      	lsls	r5, r0, #25
 8012382:	d5fb      	bpl.n	801237c <_printf_i+0xb8>
 8012384:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012388:	2d00      	cmp	r5, #0
 801238a:	da03      	bge.n	8012394 <_printf_i+0xd0>
 801238c:	232d      	movs	r3, #45	@ 0x2d
 801238e:	426d      	negs	r5, r5
 8012390:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012394:	4859      	ldr	r0, [pc, #356]	@ (80124fc <_printf_i+0x238>)
 8012396:	230a      	movs	r3, #10
 8012398:	e011      	b.n	80123be <_printf_i+0xfa>
 801239a:	6821      	ldr	r1, [r4, #0]
 801239c:	6833      	ldr	r3, [r6, #0]
 801239e:	0608      	lsls	r0, r1, #24
 80123a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80123a4:	d402      	bmi.n	80123ac <_printf_i+0xe8>
 80123a6:	0649      	lsls	r1, r1, #25
 80123a8:	bf48      	it	mi
 80123aa:	b2ad      	uxthmi	r5, r5
 80123ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80123ae:	4853      	ldr	r0, [pc, #332]	@ (80124fc <_printf_i+0x238>)
 80123b0:	6033      	str	r3, [r6, #0]
 80123b2:	bf14      	ite	ne
 80123b4:	230a      	movne	r3, #10
 80123b6:	2308      	moveq	r3, #8
 80123b8:	2100      	movs	r1, #0
 80123ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80123be:	6866      	ldr	r6, [r4, #4]
 80123c0:	60a6      	str	r6, [r4, #8]
 80123c2:	2e00      	cmp	r6, #0
 80123c4:	bfa2      	ittt	ge
 80123c6:	6821      	ldrge	r1, [r4, #0]
 80123c8:	f021 0104 	bicge.w	r1, r1, #4
 80123cc:	6021      	strge	r1, [r4, #0]
 80123ce:	b90d      	cbnz	r5, 80123d4 <_printf_i+0x110>
 80123d0:	2e00      	cmp	r6, #0
 80123d2:	d04b      	beq.n	801246c <_printf_i+0x1a8>
 80123d4:	4616      	mov	r6, r2
 80123d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80123da:	fb03 5711 	mls	r7, r3, r1, r5
 80123de:	5dc7      	ldrb	r7, [r0, r7]
 80123e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80123e4:	462f      	mov	r7, r5
 80123e6:	42bb      	cmp	r3, r7
 80123e8:	460d      	mov	r5, r1
 80123ea:	d9f4      	bls.n	80123d6 <_printf_i+0x112>
 80123ec:	2b08      	cmp	r3, #8
 80123ee:	d10b      	bne.n	8012408 <_printf_i+0x144>
 80123f0:	6823      	ldr	r3, [r4, #0]
 80123f2:	07df      	lsls	r7, r3, #31
 80123f4:	d508      	bpl.n	8012408 <_printf_i+0x144>
 80123f6:	6923      	ldr	r3, [r4, #16]
 80123f8:	6861      	ldr	r1, [r4, #4]
 80123fa:	4299      	cmp	r1, r3
 80123fc:	bfde      	ittt	le
 80123fe:	2330      	movle	r3, #48	@ 0x30
 8012400:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012404:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012408:	1b92      	subs	r2, r2, r6
 801240a:	6122      	str	r2, [r4, #16]
 801240c:	f8cd a000 	str.w	sl, [sp]
 8012410:	464b      	mov	r3, r9
 8012412:	aa03      	add	r2, sp, #12
 8012414:	4621      	mov	r1, r4
 8012416:	4640      	mov	r0, r8
 8012418:	f7ff fee6 	bl	80121e8 <_printf_common>
 801241c:	3001      	adds	r0, #1
 801241e:	d14a      	bne.n	80124b6 <_printf_i+0x1f2>
 8012420:	f04f 30ff 	mov.w	r0, #4294967295
 8012424:	b004      	add	sp, #16
 8012426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801242a:	6823      	ldr	r3, [r4, #0]
 801242c:	f043 0320 	orr.w	r3, r3, #32
 8012430:	6023      	str	r3, [r4, #0]
 8012432:	4833      	ldr	r0, [pc, #204]	@ (8012500 <_printf_i+0x23c>)
 8012434:	2778      	movs	r7, #120	@ 0x78
 8012436:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801243a:	6823      	ldr	r3, [r4, #0]
 801243c:	6831      	ldr	r1, [r6, #0]
 801243e:	061f      	lsls	r7, r3, #24
 8012440:	f851 5b04 	ldr.w	r5, [r1], #4
 8012444:	d402      	bmi.n	801244c <_printf_i+0x188>
 8012446:	065f      	lsls	r7, r3, #25
 8012448:	bf48      	it	mi
 801244a:	b2ad      	uxthmi	r5, r5
 801244c:	6031      	str	r1, [r6, #0]
 801244e:	07d9      	lsls	r1, r3, #31
 8012450:	bf44      	itt	mi
 8012452:	f043 0320 	orrmi.w	r3, r3, #32
 8012456:	6023      	strmi	r3, [r4, #0]
 8012458:	b11d      	cbz	r5, 8012462 <_printf_i+0x19e>
 801245a:	2310      	movs	r3, #16
 801245c:	e7ac      	b.n	80123b8 <_printf_i+0xf4>
 801245e:	4827      	ldr	r0, [pc, #156]	@ (80124fc <_printf_i+0x238>)
 8012460:	e7e9      	b.n	8012436 <_printf_i+0x172>
 8012462:	6823      	ldr	r3, [r4, #0]
 8012464:	f023 0320 	bic.w	r3, r3, #32
 8012468:	6023      	str	r3, [r4, #0]
 801246a:	e7f6      	b.n	801245a <_printf_i+0x196>
 801246c:	4616      	mov	r6, r2
 801246e:	e7bd      	b.n	80123ec <_printf_i+0x128>
 8012470:	6833      	ldr	r3, [r6, #0]
 8012472:	6825      	ldr	r5, [r4, #0]
 8012474:	6961      	ldr	r1, [r4, #20]
 8012476:	1d18      	adds	r0, r3, #4
 8012478:	6030      	str	r0, [r6, #0]
 801247a:	062e      	lsls	r6, r5, #24
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	d501      	bpl.n	8012484 <_printf_i+0x1c0>
 8012480:	6019      	str	r1, [r3, #0]
 8012482:	e002      	b.n	801248a <_printf_i+0x1c6>
 8012484:	0668      	lsls	r0, r5, #25
 8012486:	d5fb      	bpl.n	8012480 <_printf_i+0x1bc>
 8012488:	8019      	strh	r1, [r3, #0]
 801248a:	2300      	movs	r3, #0
 801248c:	6123      	str	r3, [r4, #16]
 801248e:	4616      	mov	r6, r2
 8012490:	e7bc      	b.n	801240c <_printf_i+0x148>
 8012492:	6833      	ldr	r3, [r6, #0]
 8012494:	1d1a      	adds	r2, r3, #4
 8012496:	6032      	str	r2, [r6, #0]
 8012498:	681e      	ldr	r6, [r3, #0]
 801249a:	6862      	ldr	r2, [r4, #4]
 801249c:	2100      	movs	r1, #0
 801249e:	4630      	mov	r0, r6
 80124a0:	f7ed fe9e 	bl	80001e0 <memchr>
 80124a4:	b108      	cbz	r0, 80124aa <_printf_i+0x1e6>
 80124a6:	1b80      	subs	r0, r0, r6
 80124a8:	6060      	str	r0, [r4, #4]
 80124aa:	6863      	ldr	r3, [r4, #4]
 80124ac:	6123      	str	r3, [r4, #16]
 80124ae:	2300      	movs	r3, #0
 80124b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80124b4:	e7aa      	b.n	801240c <_printf_i+0x148>
 80124b6:	6923      	ldr	r3, [r4, #16]
 80124b8:	4632      	mov	r2, r6
 80124ba:	4649      	mov	r1, r9
 80124bc:	4640      	mov	r0, r8
 80124be:	47d0      	blx	sl
 80124c0:	3001      	adds	r0, #1
 80124c2:	d0ad      	beq.n	8012420 <_printf_i+0x15c>
 80124c4:	6823      	ldr	r3, [r4, #0]
 80124c6:	079b      	lsls	r3, r3, #30
 80124c8:	d413      	bmi.n	80124f2 <_printf_i+0x22e>
 80124ca:	68e0      	ldr	r0, [r4, #12]
 80124cc:	9b03      	ldr	r3, [sp, #12]
 80124ce:	4298      	cmp	r0, r3
 80124d0:	bfb8      	it	lt
 80124d2:	4618      	movlt	r0, r3
 80124d4:	e7a6      	b.n	8012424 <_printf_i+0x160>
 80124d6:	2301      	movs	r3, #1
 80124d8:	4632      	mov	r2, r6
 80124da:	4649      	mov	r1, r9
 80124dc:	4640      	mov	r0, r8
 80124de:	47d0      	blx	sl
 80124e0:	3001      	adds	r0, #1
 80124e2:	d09d      	beq.n	8012420 <_printf_i+0x15c>
 80124e4:	3501      	adds	r5, #1
 80124e6:	68e3      	ldr	r3, [r4, #12]
 80124e8:	9903      	ldr	r1, [sp, #12]
 80124ea:	1a5b      	subs	r3, r3, r1
 80124ec:	42ab      	cmp	r3, r5
 80124ee:	dcf2      	bgt.n	80124d6 <_printf_i+0x212>
 80124f0:	e7eb      	b.n	80124ca <_printf_i+0x206>
 80124f2:	2500      	movs	r5, #0
 80124f4:	f104 0619 	add.w	r6, r4, #25
 80124f8:	e7f5      	b.n	80124e6 <_printf_i+0x222>
 80124fa:	bf00      	nop
 80124fc:	08016222 	.word	0x08016222
 8012500:	08016233 	.word	0x08016233

08012504 <std>:
 8012504:	2300      	movs	r3, #0
 8012506:	b510      	push	{r4, lr}
 8012508:	4604      	mov	r4, r0
 801250a:	e9c0 3300 	strd	r3, r3, [r0]
 801250e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012512:	6083      	str	r3, [r0, #8]
 8012514:	8181      	strh	r1, [r0, #12]
 8012516:	6643      	str	r3, [r0, #100]	@ 0x64
 8012518:	81c2      	strh	r2, [r0, #14]
 801251a:	6183      	str	r3, [r0, #24]
 801251c:	4619      	mov	r1, r3
 801251e:	2208      	movs	r2, #8
 8012520:	305c      	adds	r0, #92	@ 0x5c
 8012522:	f000 f914 	bl	801274e <memset>
 8012526:	4b0d      	ldr	r3, [pc, #52]	@ (801255c <std+0x58>)
 8012528:	6263      	str	r3, [r4, #36]	@ 0x24
 801252a:	4b0d      	ldr	r3, [pc, #52]	@ (8012560 <std+0x5c>)
 801252c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801252e:	4b0d      	ldr	r3, [pc, #52]	@ (8012564 <std+0x60>)
 8012530:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012532:	4b0d      	ldr	r3, [pc, #52]	@ (8012568 <std+0x64>)
 8012534:	6323      	str	r3, [r4, #48]	@ 0x30
 8012536:	4b0d      	ldr	r3, [pc, #52]	@ (801256c <std+0x68>)
 8012538:	6224      	str	r4, [r4, #32]
 801253a:	429c      	cmp	r4, r3
 801253c:	d006      	beq.n	801254c <std+0x48>
 801253e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012542:	4294      	cmp	r4, r2
 8012544:	d002      	beq.n	801254c <std+0x48>
 8012546:	33d0      	adds	r3, #208	@ 0xd0
 8012548:	429c      	cmp	r4, r3
 801254a:	d105      	bne.n	8012558 <std+0x54>
 801254c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012554:	f000 b9cc 	b.w	80128f0 <__retarget_lock_init_recursive>
 8012558:	bd10      	pop	{r4, pc}
 801255a:	bf00      	nop
 801255c:	080126c9 	.word	0x080126c9
 8012560:	080126eb 	.word	0x080126eb
 8012564:	08012723 	.word	0x08012723
 8012568:	08012747 	.word	0x08012747
 801256c:	200005c8 	.word	0x200005c8

08012570 <stdio_exit_handler>:
 8012570:	4a02      	ldr	r2, [pc, #8]	@ (801257c <stdio_exit_handler+0xc>)
 8012572:	4903      	ldr	r1, [pc, #12]	@ (8012580 <stdio_exit_handler+0x10>)
 8012574:	4803      	ldr	r0, [pc, #12]	@ (8012584 <stdio_exit_handler+0x14>)
 8012576:	f000 b869 	b.w	801264c <_fwalk_sglue>
 801257a:	bf00      	nop
 801257c:	20000010 	.word	0x20000010
 8012580:	080140f1 	.word	0x080140f1
 8012584:	20000020 	.word	0x20000020

08012588 <cleanup_stdio>:
 8012588:	6841      	ldr	r1, [r0, #4]
 801258a:	4b0c      	ldr	r3, [pc, #48]	@ (80125bc <cleanup_stdio+0x34>)
 801258c:	4299      	cmp	r1, r3
 801258e:	b510      	push	{r4, lr}
 8012590:	4604      	mov	r4, r0
 8012592:	d001      	beq.n	8012598 <cleanup_stdio+0x10>
 8012594:	f001 fdac 	bl	80140f0 <_fflush_r>
 8012598:	68a1      	ldr	r1, [r4, #8]
 801259a:	4b09      	ldr	r3, [pc, #36]	@ (80125c0 <cleanup_stdio+0x38>)
 801259c:	4299      	cmp	r1, r3
 801259e:	d002      	beq.n	80125a6 <cleanup_stdio+0x1e>
 80125a0:	4620      	mov	r0, r4
 80125a2:	f001 fda5 	bl	80140f0 <_fflush_r>
 80125a6:	68e1      	ldr	r1, [r4, #12]
 80125a8:	4b06      	ldr	r3, [pc, #24]	@ (80125c4 <cleanup_stdio+0x3c>)
 80125aa:	4299      	cmp	r1, r3
 80125ac:	d004      	beq.n	80125b8 <cleanup_stdio+0x30>
 80125ae:	4620      	mov	r0, r4
 80125b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80125b4:	f001 bd9c 	b.w	80140f0 <_fflush_r>
 80125b8:	bd10      	pop	{r4, pc}
 80125ba:	bf00      	nop
 80125bc:	200005c8 	.word	0x200005c8
 80125c0:	20000630 	.word	0x20000630
 80125c4:	20000698 	.word	0x20000698

080125c8 <global_stdio_init.part.0>:
 80125c8:	b510      	push	{r4, lr}
 80125ca:	4b0b      	ldr	r3, [pc, #44]	@ (80125f8 <global_stdio_init.part.0+0x30>)
 80125cc:	4c0b      	ldr	r4, [pc, #44]	@ (80125fc <global_stdio_init.part.0+0x34>)
 80125ce:	4a0c      	ldr	r2, [pc, #48]	@ (8012600 <global_stdio_init.part.0+0x38>)
 80125d0:	601a      	str	r2, [r3, #0]
 80125d2:	4620      	mov	r0, r4
 80125d4:	2200      	movs	r2, #0
 80125d6:	2104      	movs	r1, #4
 80125d8:	f7ff ff94 	bl	8012504 <std>
 80125dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80125e0:	2201      	movs	r2, #1
 80125e2:	2109      	movs	r1, #9
 80125e4:	f7ff ff8e 	bl	8012504 <std>
 80125e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80125ec:	2202      	movs	r2, #2
 80125ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80125f2:	2112      	movs	r1, #18
 80125f4:	f7ff bf86 	b.w	8012504 <std>
 80125f8:	20000700 	.word	0x20000700
 80125fc:	200005c8 	.word	0x200005c8
 8012600:	08012571 	.word	0x08012571

08012604 <__sfp_lock_acquire>:
 8012604:	4801      	ldr	r0, [pc, #4]	@ (801260c <__sfp_lock_acquire+0x8>)
 8012606:	f000 b974 	b.w	80128f2 <__retarget_lock_acquire_recursive>
 801260a:	bf00      	nop
 801260c:	20000709 	.word	0x20000709

08012610 <__sfp_lock_release>:
 8012610:	4801      	ldr	r0, [pc, #4]	@ (8012618 <__sfp_lock_release+0x8>)
 8012612:	f000 b96f 	b.w	80128f4 <__retarget_lock_release_recursive>
 8012616:	bf00      	nop
 8012618:	20000709 	.word	0x20000709

0801261c <__sinit>:
 801261c:	b510      	push	{r4, lr}
 801261e:	4604      	mov	r4, r0
 8012620:	f7ff fff0 	bl	8012604 <__sfp_lock_acquire>
 8012624:	6a23      	ldr	r3, [r4, #32]
 8012626:	b11b      	cbz	r3, 8012630 <__sinit+0x14>
 8012628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801262c:	f7ff bff0 	b.w	8012610 <__sfp_lock_release>
 8012630:	4b04      	ldr	r3, [pc, #16]	@ (8012644 <__sinit+0x28>)
 8012632:	6223      	str	r3, [r4, #32]
 8012634:	4b04      	ldr	r3, [pc, #16]	@ (8012648 <__sinit+0x2c>)
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d1f5      	bne.n	8012628 <__sinit+0xc>
 801263c:	f7ff ffc4 	bl	80125c8 <global_stdio_init.part.0>
 8012640:	e7f2      	b.n	8012628 <__sinit+0xc>
 8012642:	bf00      	nop
 8012644:	08012589 	.word	0x08012589
 8012648:	20000700 	.word	0x20000700

0801264c <_fwalk_sglue>:
 801264c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012650:	4607      	mov	r7, r0
 8012652:	4688      	mov	r8, r1
 8012654:	4614      	mov	r4, r2
 8012656:	2600      	movs	r6, #0
 8012658:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801265c:	f1b9 0901 	subs.w	r9, r9, #1
 8012660:	d505      	bpl.n	801266e <_fwalk_sglue+0x22>
 8012662:	6824      	ldr	r4, [r4, #0]
 8012664:	2c00      	cmp	r4, #0
 8012666:	d1f7      	bne.n	8012658 <_fwalk_sglue+0xc>
 8012668:	4630      	mov	r0, r6
 801266a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801266e:	89ab      	ldrh	r3, [r5, #12]
 8012670:	2b01      	cmp	r3, #1
 8012672:	d907      	bls.n	8012684 <_fwalk_sglue+0x38>
 8012674:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012678:	3301      	adds	r3, #1
 801267a:	d003      	beq.n	8012684 <_fwalk_sglue+0x38>
 801267c:	4629      	mov	r1, r5
 801267e:	4638      	mov	r0, r7
 8012680:	47c0      	blx	r8
 8012682:	4306      	orrs	r6, r0
 8012684:	3568      	adds	r5, #104	@ 0x68
 8012686:	e7e9      	b.n	801265c <_fwalk_sglue+0x10>

08012688 <siprintf>:
 8012688:	b40e      	push	{r1, r2, r3}
 801268a:	b500      	push	{lr}
 801268c:	b09c      	sub	sp, #112	@ 0x70
 801268e:	ab1d      	add	r3, sp, #116	@ 0x74
 8012690:	9002      	str	r0, [sp, #8]
 8012692:	9006      	str	r0, [sp, #24]
 8012694:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012698:	4809      	ldr	r0, [pc, #36]	@ (80126c0 <siprintf+0x38>)
 801269a:	9107      	str	r1, [sp, #28]
 801269c:	9104      	str	r1, [sp, #16]
 801269e:	4909      	ldr	r1, [pc, #36]	@ (80126c4 <siprintf+0x3c>)
 80126a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80126a4:	9105      	str	r1, [sp, #20]
 80126a6:	6800      	ldr	r0, [r0, #0]
 80126a8:	9301      	str	r3, [sp, #4]
 80126aa:	a902      	add	r1, sp, #8
 80126ac:	f001 fba0 	bl	8013df0 <_svfiprintf_r>
 80126b0:	9b02      	ldr	r3, [sp, #8]
 80126b2:	2200      	movs	r2, #0
 80126b4:	701a      	strb	r2, [r3, #0]
 80126b6:	b01c      	add	sp, #112	@ 0x70
 80126b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80126bc:	b003      	add	sp, #12
 80126be:	4770      	bx	lr
 80126c0:	2000001c 	.word	0x2000001c
 80126c4:	ffff0208 	.word	0xffff0208

080126c8 <__sread>:
 80126c8:	b510      	push	{r4, lr}
 80126ca:	460c      	mov	r4, r1
 80126cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126d0:	f000 f89c 	bl	801280c <_read_r>
 80126d4:	2800      	cmp	r0, #0
 80126d6:	bfab      	itete	ge
 80126d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80126da:	89a3      	ldrhlt	r3, [r4, #12]
 80126dc:	181b      	addge	r3, r3, r0
 80126de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80126e2:	bfac      	ite	ge
 80126e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80126e6:	81a3      	strhlt	r3, [r4, #12]
 80126e8:	bd10      	pop	{r4, pc}

080126ea <__swrite>:
 80126ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126ee:	461f      	mov	r7, r3
 80126f0:	898b      	ldrh	r3, [r1, #12]
 80126f2:	05db      	lsls	r3, r3, #23
 80126f4:	4605      	mov	r5, r0
 80126f6:	460c      	mov	r4, r1
 80126f8:	4616      	mov	r6, r2
 80126fa:	d505      	bpl.n	8012708 <__swrite+0x1e>
 80126fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012700:	2302      	movs	r3, #2
 8012702:	2200      	movs	r2, #0
 8012704:	f000 f870 	bl	80127e8 <_lseek_r>
 8012708:	89a3      	ldrh	r3, [r4, #12]
 801270a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801270e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012712:	81a3      	strh	r3, [r4, #12]
 8012714:	4632      	mov	r2, r6
 8012716:	463b      	mov	r3, r7
 8012718:	4628      	mov	r0, r5
 801271a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801271e:	f000 b8ab 	b.w	8012878 <_write_r>

08012722 <__sseek>:
 8012722:	b510      	push	{r4, lr}
 8012724:	460c      	mov	r4, r1
 8012726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801272a:	f000 f85d 	bl	80127e8 <_lseek_r>
 801272e:	1c43      	adds	r3, r0, #1
 8012730:	89a3      	ldrh	r3, [r4, #12]
 8012732:	bf15      	itete	ne
 8012734:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012736:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801273a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801273e:	81a3      	strheq	r3, [r4, #12]
 8012740:	bf18      	it	ne
 8012742:	81a3      	strhne	r3, [r4, #12]
 8012744:	bd10      	pop	{r4, pc}

08012746 <__sclose>:
 8012746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801274a:	f000 b83d 	b.w	80127c8 <_close_r>

0801274e <memset>:
 801274e:	4402      	add	r2, r0
 8012750:	4603      	mov	r3, r0
 8012752:	4293      	cmp	r3, r2
 8012754:	d100      	bne.n	8012758 <memset+0xa>
 8012756:	4770      	bx	lr
 8012758:	f803 1b01 	strb.w	r1, [r3], #1
 801275c:	e7f9      	b.n	8012752 <memset+0x4>

0801275e <_raise_r>:
 801275e:	291f      	cmp	r1, #31
 8012760:	b538      	push	{r3, r4, r5, lr}
 8012762:	4605      	mov	r5, r0
 8012764:	460c      	mov	r4, r1
 8012766:	d904      	bls.n	8012772 <_raise_r+0x14>
 8012768:	2316      	movs	r3, #22
 801276a:	6003      	str	r3, [r0, #0]
 801276c:	f04f 30ff 	mov.w	r0, #4294967295
 8012770:	bd38      	pop	{r3, r4, r5, pc}
 8012772:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012774:	b112      	cbz	r2, 801277c <_raise_r+0x1e>
 8012776:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801277a:	b94b      	cbnz	r3, 8012790 <_raise_r+0x32>
 801277c:	4628      	mov	r0, r5
 801277e:	f000 f869 	bl	8012854 <_getpid_r>
 8012782:	4622      	mov	r2, r4
 8012784:	4601      	mov	r1, r0
 8012786:	4628      	mov	r0, r5
 8012788:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801278c:	f000 b850 	b.w	8012830 <_kill_r>
 8012790:	2b01      	cmp	r3, #1
 8012792:	d00a      	beq.n	80127aa <_raise_r+0x4c>
 8012794:	1c59      	adds	r1, r3, #1
 8012796:	d103      	bne.n	80127a0 <_raise_r+0x42>
 8012798:	2316      	movs	r3, #22
 801279a:	6003      	str	r3, [r0, #0]
 801279c:	2001      	movs	r0, #1
 801279e:	e7e7      	b.n	8012770 <_raise_r+0x12>
 80127a0:	2100      	movs	r1, #0
 80127a2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80127a6:	4620      	mov	r0, r4
 80127a8:	4798      	blx	r3
 80127aa:	2000      	movs	r0, #0
 80127ac:	e7e0      	b.n	8012770 <_raise_r+0x12>
	...

080127b0 <raise>:
 80127b0:	4b02      	ldr	r3, [pc, #8]	@ (80127bc <raise+0xc>)
 80127b2:	4601      	mov	r1, r0
 80127b4:	6818      	ldr	r0, [r3, #0]
 80127b6:	f7ff bfd2 	b.w	801275e <_raise_r>
 80127ba:	bf00      	nop
 80127bc:	2000001c 	.word	0x2000001c

080127c0 <_localeconv_r>:
 80127c0:	4800      	ldr	r0, [pc, #0]	@ (80127c4 <_localeconv_r+0x4>)
 80127c2:	4770      	bx	lr
 80127c4:	2000015c 	.word	0x2000015c

080127c8 <_close_r>:
 80127c8:	b538      	push	{r3, r4, r5, lr}
 80127ca:	4d06      	ldr	r5, [pc, #24]	@ (80127e4 <_close_r+0x1c>)
 80127cc:	2300      	movs	r3, #0
 80127ce:	4604      	mov	r4, r0
 80127d0:	4608      	mov	r0, r1
 80127d2:	602b      	str	r3, [r5, #0]
 80127d4:	f7fa ff20 	bl	800d618 <_close>
 80127d8:	1c43      	adds	r3, r0, #1
 80127da:	d102      	bne.n	80127e2 <_close_r+0x1a>
 80127dc:	682b      	ldr	r3, [r5, #0]
 80127de:	b103      	cbz	r3, 80127e2 <_close_r+0x1a>
 80127e0:	6023      	str	r3, [r4, #0]
 80127e2:	bd38      	pop	{r3, r4, r5, pc}
 80127e4:	20000704 	.word	0x20000704

080127e8 <_lseek_r>:
 80127e8:	b538      	push	{r3, r4, r5, lr}
 80127ea:	4d07      	ldr	r5, [pc, #28]	@ (8012808 <_lseek_r+0x20>)
 80127ec:	4604      	mov	r4, r0
 80127ee:	4608      	mov	r0, r1
 80127f0:	4611      	mov	r1, r2
 80127f2:	2200      	movs	r2, #0
 80127f4:	602a      	str	r2, [r5, #0]
 80127f6:	461a      	mov	r2, r3
 80127f8:	f7fa ff35 	bl	800d666 <_lseek>
 80127fc:	1c43      	adds	r3, r0, #1
 80127fe:	d102      	bne.n	8012806 <_lseek_r+0x1e>
 8012800:	682b      	ldr	r3, [r5, #0]
 8012802:	b103      	cbz	r3, 8012806 <_lseek_r+0x1e>
 8012804:	6023      	str	r3, [r4, #0]
 8012806:	bd38      	pop	{r3, r4, r5, pc}
 8012808:	20000704 	.word	0x20000704

0801280c <_read_r>:
 801280c:	b538      	push	{r3, r4, r5, lr}
 801280e:	4d07      	ldr	r5, [pc, #28]	@ (801282c <_read_r+0x20>)
 8012810:	4604      	mov	r4, r0
 8012812:	4608      	mov	r0, r1
 8012814:	4611      	mov	r1, r2
 8012816:	2200      	movs	r2, #0
 8012818:	602a      	str	r2, [r5, #0]
 801281a:	461a      	mov	r2, r3
 801281c:	f7fa fec3 	bl	800d5a6 <_read>
 8012820:	1c43      	adds	r3, r0, #1
 8012822:	d102      	bne.n	801282a <_read_r+0x1e>
 8012824:	682b      	ldr	r3, [r5, #0]
 8012826:	b103      	cbz	r3, 801282a <_read_r+0x1e>
 8012828:	6023      	str	r3, [r4, #0]
 801282a:	bd38      	pop	{r3, r4, r5, pc}
 801282c:	20000704 	.word	0x20000704

08012830 <_kill_r>:
 8012830:	b538      	push	{r3, r4, r5, lr}
 8012832:	4d07      	ldr	r5, [pc, #28]	@ (8012850 <_kill_r+0x20>)
 8012834:	2300      	movs	r3, #0
 8012836:	4604      	mov	r4, r0
 8012838:	4608      	mov	r0, r1
 801283a:	4611      	mov	r1, r2
 801283c:	602b      	str	r3, [r5, #0]
 801283e:	f7fa fe97 	bl	800d570 <_kill>
 8012842:	1c43      	adds	r3, r0, #1
 8012844:	d102      	bne.n	801284c <_kill_r+0x1c>
 8012846:	682b      	ldr	r3, [r5, #0]
 8012848:	b103      	cbz	r3, 801284c <_kill_r+0x1c>
 801284a:	6023      	str	r3, [r4, #0]
 801284c:	bd38      	pop	{r3, r4, r5, pc}
 801284e:	bf00      	nop
 8012850:	20000704 	.word	0x20000704

08012854 <_getpid_r>:
 8012854:	f7fa be84 	b.w	800d560 <_getpid>

08012858 <_sbrk_r>:
 8012858:	b538      	push	{r3, r4, r5, lr}
 801285a:	4d06      	ldr	r5, [pc, #24]	@ (8012874 <_sbrk_r+0x1c>)
 801285c:	2300      	movs	r3, #0
 801285e:	4604      	mov	r4, r0
 8012860:	4608      	mov	r0, r1
 8012862:	602b      	str	r3, [r5, #0]
 8012864:	f7fa ff0c 	bl	800d680 <_sbrk>
 8012868:	1c43      	adds	r3, r0, #1
 801286a:	d102      	bne.n	8012872 <_sbrk_r+0x1a>
 801286c:	682b      	ldr	r3, [r5, #0]
 801286e:	b103      	cbz	r3, 8012872 <_sbrk_r+0x1a>
 8012870:	6023      	str	r3, [r4, #0]
 8012872:	bd38      	pop	{r3, r4, r5, pc}
 8012874:	20000704 	.word	0x20000704

08012878 <_write_r>:
 8012878:	b538      	push	{r3, r4, r5, lr}
 801287a:	4d07      	ldr	r5, [pc, #28]	@ (8012898 <_write_r+0x20>)
 801287c:	4604      	mov	r4, r0
 801287e:	4608      	mov	r0, r1
 8012880:	4611      	mov	r1, r2
 8012882:	2200      	movs	r2, #0
 8012884:	602a      	str	r2, [r5, #0]
 8012886:	461a      	mov	r2, r3
 8012888:	f7fa feaa 	bl	800d5e0 <_write>
 801288c:	1c43      	adds	r3, r0, #1
 801288e:	d102      	bne.n	8012896 <_write_r+0x1e>
 8012890:	682b      	ldr	r3, [r5, #0]
 8012892:	b103      	cbz	r3, 8012896 <_write_r+0x1e>
 8012894:	6023      	str	r3, [r4, #0]
 8012896:	bd38      	pop	{r3, r4, r5, pc}
 8012898:	20000704 	.word	0x20000704

0801289c <__errno>:
 801289c:	4b01      	ldr	r3, [pc, #4]	@ (80128a4 <__errno+0x8>)
 801289e:	6818      	ldr	r0, [r3, #0]
 80128a0:	4770      	bx	lr
 80128a2:	bf00      	nop
 80128a4:	2000001c 	.word	0x2000001c

080128a8 <__libc_init_array>:
 80128a8:	b570      	push	{r4, r5, r6, lr}
 80128aa:	4d0d      	ldr	r5, [pc, #52]	@ (80128e0 <__libc_init_array+0x38>)
 80128ac:	4c0d      	ldr	r4, [pc, #52]	@ (80128e4 <__libc_init_array+0x3c>)
 80128ae:	1b64      	subs	r4, r4, r5
 80128b0:	10a4      	asrs	r4, r4, #2
 80128b2:	2600      	movs	r6, #0
 80128b4:	42a6      	cmp	r6, r4
 80128b6:	d109      	bne.n	80128cc <__libc_init_array+0x24>
 80128b8:	4d0b      	ldr	r5, [pc, #44]	@ (80128e8 <__libc_init_array+0x40>)
 80128ba:	4c0c      	ldr	r4, [pc, #48]	@ (80128ec <__libc_init_array+0x44>)
 80128bc:	f001 ff5c 	bl	8014778 <_init>
 80128c0:	1b64      	subs	r4, r4, r5
 80128c2:	10a4      	asrs	r4, r4, #2
 80128c4:	2600      	movs	r6, #0
 80128c6:	42a6      	cmp	r6, r4
 80128c8:	d105      	bne.n	80128d6 <__libc_init_array+0x2e>
 80128ca:	bd70      	pop	{r4, r5, r6, pc}
 80128cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80128d0:	4798      	blx	r3
 80128d2:	3601      	adds	r6, #1
 80128d4:	e7ee      	b.n	80128b4 <__libc_init_array+0xc>
 80128d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80128da:	4798      	blx	r3
 80128dc:	3601      	adds	r6, #1
 80128de:	e7f2      	b.n	80128c6 <__libc_init_array+0x1e>
 80128e0:	08016588 	.word	0x08016588
 80128e4:	08016588 	.word	0x08016588
 80128e8:	08016588 	.word	0x08016588
 80128ec:	08016594 	.word	0x08016594

080128f0 <__retarget_lock_init_recursive>:
 80128f0:	4770      	bx	lr

080128f2 <__retarget_lock_acquire_recursive>:
 80128f2:	4770      	bx	lr

080128f4 <__retarget_lock_release_recursive>:
 80128f4:	4770      	bx	lr

080128f6 <strcpy>:
 80128f6:	4603      	mov	r3, r0
 80128f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80128fc:	f803 2b01 	strb.w	r2, [r3], #1
 8012900:	2a00      	cmp	r2, #0
 8012902:	d1f9      	bne.n	80128f8 <strcpy+0x2>
 8012904:	4770      	bx	lr

08012906 <quorem>:
 8012906:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801290a:	6903      	ldr	r3, [r0, #16]
 801290c:	690c      	ldr	r4, [r1, #16]
 801290e:	42a3      	cmp	r3, r4
 8012910:	4607      	mov	r7, r0
 8012912:	db7e      	blt.n	8012a12 <quorem+0x10c>
 8012914:	3c01      	subs	r4, #1
 8012916:	f101 0814 	add.w	r8, r1, #20
 801291a:	00a3      	lsls	r3, r4, #2
 801291c:	f100 0514 	add.w	r5, r0, #20
 8012920:	9300      	str	r3, [sp, #0]
 8012922:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012926:	9301      	str	r3, [sp, #4]
 8012928:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801292c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012930:	3301      	adds	r3, #1
 8012932:	429a      	cmp	r2, r3
 8012934:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012938:	fbb2 f6f3 	udiv	r6, r2, r3
 801293c:	d32e      	bcc.n	801299c <quorem+0x96>
 801293e:	f04f 0a00 	mov.w	sl, #0
 8012942:	46c4      	mov	ip, r8
 8012944:	46ae      	mov	lr, r5
 8012946:	46d3      	mov	fp, sl
 8012948:	f85c 3b04 	ldr.w	r3, [ip], #4
 801294c:	b298      	uxth	r0, r3
 801294e:	fb06 a000 	mla	r0, r6, r0, sl
 8012952:	0c02      	lsrs	r2, r0, #16
 8012954:	0c1b      	lsrs	r3, r3, #16
 8012956:	fb06 2303 	mla	r3, r6, r3, r2
 801295a:	f8de 2000 	ldr.w	r2, [lr]
 801295e:	b280      	uxth	r0, r0
 8012960:	b292      	uxth	r2, r2
 8012962:	1a12      	subs	r2, r2, r0
 8012964:	445a      	add	r2, fp
 8012966:	f8de 0000 	ldr.w	r0, [lr]
 801296a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801296e:	b29b      	uxth	r3, r3
 8012970:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012974:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012978:	b292      	uxth	r2, r2
 801297a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801297e:	45e1      	cmp	r9, ip
 8012980:	f84e 2b04 	str.w	r2, [lr], #4
 8012984:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012988:	d2de      	bcs.n	8012948 <quorem+0x42>
 801298a:	9b00      	ldr	r3, [sp, #0]
 801298c:	58eb      	ldr	r3, [r5, r3]
 801298e:	b92b      	cbnz	r3, 801299c <quorem+0x96>
 8012990:	9b01      	ldr	r3, [sp, #4]
 8012992:	3b04      	subs	r3, #4
 8012994:	429d      	cmp	r5, r3
 8012996:	461a      	mov	r2, r3
 8012998:	d32f      	bcc.n	80129fa <quorem+0xf4>
 801299a:	613c      	str	r4, [r7, #16]
 801299c:	4638      	mov	r0, r7
 801299e:	f001 f8c3 	bl	8013b28 <__mcmp>
 80129a2:	2800      	cmp	r0, #0
 80129a4:	db25      	blt.n	80129f2 <quorem+0xec>
 80129a6:	4629      	mov	r1, r5
 80129a8:	2000      	movs	r0, #0
 80129aa:	f858 2b04 	ldr.w	r2, [r8], #4
 80129ae:	f8d1 c000 	ldr.w	ip, [r1]
 80129b2:	fa1f fe82 	uxth.w	lr, r2
 80129b6:	fa1f f38c 	uxth.w	r3, ip
 80129ba:	eba3 030e 	sub.w	r3, r3, lr
 80129be:	4403      	add	r3, r0
 80129c0:	0c12      	lsrs	r2, r2, #16
 80129c2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80129c6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80129ca:	b29b      	uxth	r3, r3
 80129cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80129d0:	45c1      	cmp	r9, r8
 80129d2:	f841 3b04 	str.w	r3, [r1], #4
 80129d6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80129da:	d2e6      	bcs.n	80129aa <quorem+0xa4>
 80129dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80129e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80129e4:	b922      	cbnz	r2, 80129f0 <quorem+0xea>
 80129e6:	3b04      	subs	r3, #4
 80129e8:	429d      	cmp	r5, r3
 80129ea:	461a      	mov	r2, r3
 80129ec:	d30b      	bcc.n	8012a06 <quorem+0x100>
 80129ee:	613c      	str	r4, [r7, #16]
 80129f0:	3601      	adds	r6, #1
 80129f2:	4630      	mov	r0, r6
 80129f4:	b003      	add	sp, #12
 80129f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129fa:	6812      	ldr	r2, [r2, #0]
 80129fc:	3b04      	subs	r3, #4
 80129fe:	2a00      	cmp	r2, #0
 8012a00:	d1cb      	bne.n	801299a <quorem+0x94>
 8012a02:	3c01      	subs	r4, #1
 8012a04:	e7c6      	b.n	8012994 <quorem+0x8e>
 8012a06:	6812      	ldr	r2, [r2, #0]
 8012a08:	3b04      	subs	r3, #4
 8012a0a:	2a00      	cmp	r2, #0
 8012a0c:	d1ef      	bne.n	80129ee <quorem+0xe8>
 8012a0e:	3c01      	subs	r4, #1
 8012a10:	e7ea      	b.n	80129e8 <quorem+0xe2>
 8012a12:	2000      	movs	r0, #0
 8012a14:	e7ee      	b.n	80129f4 <quorem+0xee>
	...

08012a18 <_dtoa_r>:
 8012a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a1c:	69c7      	ldr	r7, [r0, #28]
 8012a1e:	b099      	sub	sp, #100	@ 0x64
 8012a20:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012a24:	ec55 4b10 	vmov	r4, r5, d0
 8012a28:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8012a2a:	9109      	str	r1, [sp, #36]	@ 0x24
 8012a2c:	4683      	mov	fp, r0
 8012a2e:	920e      	str	r2, [sp, #56]	@ 0x38
 8012a30:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012a32:	b97f      	cbnz	r7, 8012a54 <_dtoa_r+0x3c>
 8012a34:	2010      	movs	r0, #16
 8012a36:	f7ff f84f 	bl	8011ad8 <malloc>
 8012a3a:	4602      	mov	r2, r0
 8012a3c:	f8cb 001c 	str.w	r0, [fp, #28]
 8012a40:	b920      	cbnz	r0, 8012a4c <_dtoa_r+0x34>
 8012a42:	4ba7      	ldr	r3, [pc, #668]	@ (8012ce0 <_dtoa_r+0x2c8>)
 8012a44:	21ef      	movs	r1, #239	@ 0xef
 8012a46:	48a7      	ldr	r0, [pc, #668]	@ (8012ce4 <_dtoa_r+0x2cc>)
 8012a48:	f001 fba2 	bl	8014190 <__assert_func>
 8012a4c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012a50:	6007      	str	r7, [r0, #0]
 8012a52:	60c7      	str	r7, [r0, #12]
 8012a54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012a58:	6819      	ldr	r1, [r3, #0]
 8012a5a:	b159      	cbz	r1, 8012a74 <_dtoa_r+0x5c>
 8012a5c:	685a      	ldr	r2, [r3, #4]
 8012a5e:	604a      	str	r2, [r1, #4]
 8012a60:	2301      	movs	r3, #1
 8012a62:	4093      	lsls	r3, r2
 8012a64:	608b      	str	r3, [r1, #8]
 8012a66:	4658      	mov	r0, fp
 8012a68:	f000 fe24 	bl	80136b4 <_Bfree>
 8012a6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012a70:	2200      	movs	r2, #0
 8012a72:	601a      	str	r2, [r3, #0]
 8012a74:	1e2b      	subs	r3, r5, #0
 8012a76:	bfb9      	ittee	lt
 8012a78:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012a7c:	9303      	strlt	r3, [sp, #12]
 8012a7e:	2300      	movge	r3, #0
 8012a80:	6033      	strge	r3, [r6, #0]
 8012a82:	9f03      	ldr	r7, [sp, #12]
 8012a84:	4b98      	ldr	r3, [pc, #608]	@ (8012ce8 <_dtoa_r+0x2d0>)
 8012a86:	bfbc      	itt	lt
 8012a88:	2201      	movlt	r2, #1
 8012a8a:	6032      	strlt	r2, [r6, #0]
 8012a8c:	43bb      	bics	r3, r7
 8012a8e:	d112      	bne.n	8012ab6 <_dtoa_r+0x9e>
 8012a90:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012a92:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012a96:	6013      	str	r3, [r2, #0]
 8012a98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012a9c:	4323      	orrs	r3, r4
 8012a9e:	f000 854d 	beq.w	801353c <_dtoa_r+0xb24>
 8012aa2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012aa4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8012cfc <_dtoa_r+0x2e4>
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	f000 854f 	beq.w	801354c <_dtoa_r+0xb34>
 8012aae:	f10a 0303 	add.w	r3, sl, #3
 8012ab2:	f000 bd49 	b.w	8013548 <_dtoa_r+0xb30>
 8012ab6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012aba:	2200      	movs	r2, #0
 8012abc:	ec51 0b17 	vmov	r0, r1, d7
 8012ac0:	2300      	movs	r3, #0
 8012ac2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8012ac6:	f7ee f807 	bl	8000ad8 <__aeabi_dcmpeq>
 8012aca:	4680      	mov	r8, r0
 8012acc:	b158      	cbz	r0, 8012ae6 <_dtoa_r+0xce>
 8012ace:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012ad0:	2301      	movs	r3, #1
 8012ad2:	6013      	str	r3, [r2, #0]
 8012ad4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012ad6:	b113      	cbz	r3, 8012ade <_dtoa_r+0xc6>
 8012ad8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012ada:	4b84      	ldr	r3, [pc, #528]	@ (8012cec <_dtoa_r+0x2d4>)
 8012adc:	6013      	str	r3, [r2, #0]
 8012ade:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8012d00 <_dtoa_r+0x2e8>
 8012ae2:	f000 bd33 	b.w	801354c <_dtoa_r+0xb34>
 8012ae6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012aea:	aa16      	add	r2, sp, #88	@ 0x58
 8012aec:	a917      	add	r1, sp, #92	@ 0x5c
 8012aee:	4658      	mov	r0, fp
 8012af0:	f001 f8ca 	bl	8013c88 <__d2b>
 8012af4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012af8:	4681      	mov	r9, r0
 8012afa:	2e00      	cmp	r6, #0
 8012afc:	d077      	beq.n	8012bee <_dtoa_r+0x1d6>
 8012afe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012b00:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8012b04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012b08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012b0c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012b10:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8012b14:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012b18:	4619      	mov	r1, r3
 8012b1a:	2200      	movs	r2, #0
 8012b1c:	4b74      	ldr	r3, [pc, #464]	@ (8012cf0 <_dtoa_r+0x2d8>)
 8012b1e:	f7ed fbbb 	bl	8000298 <__aeabi_dsub>
 8012b22:	a369      	add	r3, pc, #420	@ (adr r3, 8012cc8 <_dtoa_r+0x2b0>)
 8012b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b28:	f7ed fd6e 	bl	8000608 <__aeabi_dmul>
 8012b2c:	a368      	add	r3, pc, #416	@ (adr r3, 8012cd0 <_dtoa_r+0x2b8>)
 8012b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b32:	f7ed fbb3 	bl	800029c <__adddf3>
 8012b36:	4604      	mov	r4, r0
 8012b38:	4630      	mov	r0, r6
 8012b3a:	460d      	mov	r5, r1
 8012b3c:	f7ed fcfa 	bl	8000534 <__aeabi_i2d>
 8012b40:	a365      	add	r3, pc, #404	@ (adr r3, 8012cd8 <_dtoa_r+0x2c0>)
 8012b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b46:	f7ed fd5f 	bl	8000608 <__aeabi_dmul>
 8012b4a:	4602      	mov	r2, r0
 8012b4c:	460b      	mov	r3, r1
 8012b4e:	4620      	mov	r0, r4
 8012b50:	4629      	mov	r1, r5
 8012b52:	f7ed fba3 	bl	800029c <__adddf3>
 8012b56:	4604      	mov	r4, r0
 8012b58:	460d      	mov	r5, r1
 8012b5a:	f7ee f805 	bl	8000b68 <__aeabi_d2iz>
 8012b5e:	2200      	movs	r2, #0
 8012b60:	4607      	mov	r7, r0
 8012b62:	2300      	movs	r3, #0
 8012b64:	4620      	mov	r0, r4
 8012b66:	4629      	mov	r1, r5
 8012b68:	f7ed ffc0 	bl	8000aec <__aeabi_dcmplt>
 8012b6c:	b140      	cbz	r0, 8012b80 <_dtoa_r+0x168>
 8012b6e:	4638      	mov	r0, r7
 8012b70:	f7ed fce0 	bl	8000534 <__aeabi_i2d>
 8012b74:	4622      	mov	r2, r4
 8012b76:	462b      	mov	r3, r5
 8012b78:	f7ed ffae 	bl	8000ad8 <__aeabi_dcmpeq>
 8012b7c:	b900      	cbnz	r0, 8012b80 <_dtoa_r+0x168>
 8012b7e:	3f01      	subs	r7, #1
 8012b80:	2f16      	cmp	r7, #22
 8012b82:	d851      	bhi.n	8012c28 <_dtoa_r+0x210>
 8012b84:	4b5b      	ldr	r3, [pc, #364]	@ (8012cf4 <_dtoa_r+0x2dc>)
 8012b86:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012b92:	f7ed ffab 	bl	8000aec <__aeabi_dcmplt>
 8012b96:	2800      	cmp	r0, #0
 8012b98:	d048      	beq.n	8012c2c <_dtoa_r+0x214>
 8012b9a:	3f01      	subs	r7, #1
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	9312      	str	r3, [sp, #72]	@ 0x48
 8012ba0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012ba2:	1b9b      	subs	r3, r3, r6
 8012ba4:	1e5a      	subs	r2, r3, #1
 8012ba6:	bf44      	itt	mi
 8012ba8:	f1c3 0801 	rsbmi	r8, r3, #1
 8012bac:	2300      	movmi	r3, #0
 8012bae:	9208      	str	r2, [sp, #32]
 8012bb0:	bf54      	ite	pl
 8012bb2:	f04f 0800 	movpl.w	r8, #0
 8012bb6:	9308      	strmi	r3, [sp, #32]
 8012bb8:	2f00      	cmp	r7, #0
 8012bba:	db39      	blt.n	8012c30 <_dtoa_r+0x218>
 8012bbc:	9b08      	ldr	r3, [sp, #32]
 8012bbe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8012bc0:	443b      	add	r3, r7
 8012bc2:	9308      	str	r3, [sp, #32]
 8012bc4:	2300      	movs	r3, #0
 8012bc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8012bc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012bca:	2b09      	cmp	r3, #9
 8012bcc:	d864      	bhi.n	8012c98 <_dtoa_r+0x280>
 8012bce:	2b05      	cmp	r3, #5
 8012bd0:	bfc4      	itt	gt
 8012bd2:	3b04      	subgt	r3, #4
 8012bd4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8012bd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012bd8:	f1a3 0302 	sub.w	r3, r3, #2
 8012bdc:	bfcc      	ite	gt
 8012bde:	2400      	movgt	r4, #0
 8012be0:	2401      	movle	r4, #1
 8012be2:	2b03      	cmp	r3, #3
 8012be4:	d863      	bhi.n	8012cae <_dtoa_r+0x296>
 8012be6:	e8df f003 	tbb	[pc, r3]
 8012bea:	372a      	.short	0x372a
 8012bec:	5535      	.short	0x5535
 8012bee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8012bf2:	441e      	add	r6, r3
 8012bf4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012bf8:	2b20      	cmp	r3, #32
 8012bfa:	bfc1      	itttt	gt
 8012bfc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012c00:	409f      	lslgt	r7, r3
 8012c02:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8012c06:	fa24 f303 	lsrgt.w	r3, r4, r3
 8012c0a:	bfd6      	itet	le
 8012c0c:	f1c3 0320 	rsble	r3, r3, #32
 8012c10:	ea47 0003 	orrgt.w	r0, r7, r3
 8012c14:	fa04 f003 	lslle.w	r0, r4, r3
 8012c18:	f7ed fc7c 	bl	8000514 <__aeabi_ui2d>
 8012c1c:	2201      	movs	r2, #1
 8012c1e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8012c22:	3e01      	subs	r6, #1
 8012c24:	9214      	str	r2, [sp, #80]	@ 0x50
 8012c26:	e777      	b.n	8012b18 <_dtoa_r+0x100>
 8012c28:	2301      	movs	r3, #1
 8012c2a:	e7b8      	b.n	8012b9e <_dtoa_r+0x186>
 8012c2c:	9012      	str	r0, [sp, #72]	@ 0x48
 8012c2e:	e7b7      	b.n	8012ba0 <_dtoa_r+0x188>
 8012c30:	427b      	negs	r3, r7
 8012c32:	930a      	str	r3, [sp, #40]	@ 0x28
 8012c34:	2300      	movs	r3, #0
 8012c36:	eba8 0807 	sub.w	r8, r8, r7
 8012c3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012c3c:	e7c4      	b.n	8012bc8 <_dtoa_r+0x1b0>
 8012c3e:	2300      	movs	r3, #0
 8012c40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012c42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	dc35      	bgt.n	8012cb4 <_dtoa_r+0x29c>
 8012c48:	2301      	movs	r3, #1
 8012c4a:	9300      	str	r3, [sp, #0]
 8012c4c:	9307      	str	r3, [sp, #28]
 8012c4e:	461a      	mov	r2, r3
 8012c50:	920e      	str	r2, [sp, #56]	@ 0x38
 8012c52:	e00b      	b.n	8012c6c <_dtoa_r+0x254>
 8012c54:	2301      	movs	r3, #1
 8012c56:	e7f3      	b.n	8012c40 <_dtoa_r+0x228>
 8012c58:	2300      	movs	r3, #0
 8012c5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012c5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012c5e:	18fb      	adds	r3, r7, r3
 8012c60:	9300      	str	r3, [sp, #0]
 8012c62:	3301      	adds	r3, #1
 8012c64:	2b01      	cmp	r3, #1
 8012c66:	9307      	str	r3, [sp, #28]
 8012c68:	bfb8      	it	lt
 8012c6a:	2301      	movlt	r3, #1
 8012c6c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8012c70:	2100      	movs	r1, #0
 8012c72:	2204      	movs	r2, #4
 8012c74:	f102 0514 	add.w	r5, r2, #20
 8012c78:	429d      	cmp	r5, r3
 8012c7a:	d91f      	bls.n	8012cbc <_dtoa_r+0x2a4>
 8012c7c:	6041      	str	r1, [r0, #4]
 8012c7e:	4658      	mov	r0, fp
 8012c80:	f000 fcd8 	bl	8013634 <_Balloc>
 8012c84:	4682      	mov	sl, r0
 8012c86:	2800      	cmp	r0, #0
 8012c88:	d13c      	bne.n	8012d04 <_dtoa_r+0x2ec>
 8012c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8012cf8 <_dtoa_r+0x2e0>)
 8012c8c:	4602      	mov	r2, r0
 8012c8e:	f240 11af 	movw	r1, #431	@ 0x1af
 8012c92:	e6d8      	b.n	8012a46 <_dtoa_r+0x2e>
 8012c94:	2301      	movs	r3, #1
 8012c96:	e7e0      	b.n	8012c5a <_dtoa_r+0x242>
 8012c98:	2401      	movs	r4, #1
 8012c9a:	2300      	movs	r3, #0
 8012c9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8012c9e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8012ca4:	9300      	str	r3, [sp, #0]
 8012ca6:	9307      	str	r3, [sp, #28]
 8012ca8:	2200      	movs	r2, #0
 8012caa:	2312      	movs	r3, #18
 8012cac:	e7d0      	b.n	8012c50 <_dtoa_r+0x238>
 8012cae:	2301      	movs	r3, #1
 8012cb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012cb2:	e7f5      	b.n	8012ca0 <_dtoa_r+0x288>
 8012cb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012cb6:	9300      	str	r3, [sp, #0]
 8012cb8:	9307      	str	r3, [sp, #28]
 8012cba:	e7d7      	b.n	8012c6c <_dtoa_r+0x254>
 8012cbc:	3101      	adds	r1, #1
 8012cbe:	0052      	lsls	r2, r2, #1
 8012cc0:	e7d8      	b.n	8012c74 <_dtoa_r+0x25c>
 8012cc2:	bf00      	nop
 8012cc4:	f3af 8000 	nop.w
 8012cc8:	636f4361 	.word	0x636f4361
 8012ccc:	3fd287a7 	.word	0x3fd287a7
 8012cd0:	8b60c8b3 	.word	0x8b60c8b3
 8012cd4:	3fc68a28 	.word	0x3fc68a28
 8012cd8:	509f79fb 	.word	0x509f79fb
 8012cdc:	3fd34413 	.word	0x3fd34413
 8012ce0:	08016251 	.word	0x08016251
 8012ce4:	08016268 	.word	0x08016268
 8012ce8:	7ff00000 	.word	0x7ff00000
 8012cec:	08016221 	.word	0x08016221
 8012cf0:	3ff80000 	.word	0x3ff80000
 8012cf4:	08016360 	.word	0x08016360
 8012cf8:	080162c0 	.word	0x080162c0
 8012cfc:	0801624d 	.word	0x0801624d
 8012d00:	08016220 	.word	0x08016220
 8012d04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012d08:	6018      	str	r0, [r3, #0]
 8012d0a:	9b07      	ldr	r3, [sp, #28]
 8012d0c:	2b0e      	cmp	r3, #14
 8012d0e:	f200 80a4 	bhi.w	8012e5a <_dtoa_r+0x442>
 8012d12:	2c00      	cmp	r4, #0
 8012d14:	f000 80a1 	beq.w	8012e5a <_dtoa_r+0x442>
 8012d18:	2f00      	cmp	r7, #0
 8012d1a:	dd33      	ble.n	8012d84 <_dtoa_r+0x36c>
 8012d1c:	4bad      	ldr	r3, [pc, #692]	@ (8012fd4 <_dtoa_r+0x5bc>)
 8012d1e:	f007 020f 	and.w	r2, r7, #15
 8012d22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012d26:	ed93 7b00 	vldr	d7, [r3]
 8012d2a:	05f8      	lsls	r0, r7, #23
 8012d2c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012d30:	ea4f 1427 	mov.w	r4, r7, asr #4
 8012d34:	d516      	bpl.n	8012d64 <_dtoa_r+0x34c>
 8012d36:	4ba8      	ldr	r3, [pc, #672]	@ (8012fd8 <_dtoa_r+0x5c0>)
 8012d38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012d3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012d40:	f7ed fd8c 	bl	800085c <__aeabi_ddiv>
 8012d44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012d48:	f004 040f 	and.w	r4, r4, #15
 8012d4c:	2603      	movs	r6, #3
 8012d4e:	4da2      	ldr	r5, [pc, #648]	@ (8012fd8 <_dtoa_r+0x5c0>)
 8012d50:	b954      	cbnz	r4, 8012d68 <_dtoa_r+0x350>
 8012d52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012d56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d5a:	f7ed fd7f 	bl	800085c <__aeabi_ddiv>
 8012d5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012d62:	e028      	b.n	8012db6 <_dtoa_r+0x39e>
 8012d64:	2602      	movs	r6, #2
 8012d66:	e7f2      	b.n	8012d4e <_dtoa_r+0x336>
 8012d68:	07e1      	lsls	r1, r4, #31
 8012d6a:	d508      	bpl.n	8012d7e <_dtoa_r+0x366>
 8012d6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012d70:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012d74:	f7ed fc48 	bl	8000608 <__aeabi_dmul>
 8012d78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012d7c:	3601      	adds	r6, #1
 8012d7e:	1064      	asrs	r4, r4, #1
 8012d80:	3508      	adds	r5, #8
 8012d82:	e7e5      	b.n	8012d50 <_dtoa_r+0x338>
 8012d84:	f000 80d2 	beq.w	8012f2c <_dtoa_r+0x514>
 8012d88:	427c      	negs	r4, r7
 8012d8a:	4b92      	ldr	r3, [pc, #584]	@ (8012fd4 <_dtoa_r+0x5bc>)
 8012d8c:	4d92      	ldr	r5, [pc, #584]	@ (8012fd8 <_dtoa_r+0x5c0>)
 8012d8e:	f004 020f 	and.w	r2, r4, #15
 8012d92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012d9e:	f7ed fc33 	bl	8000608 <__aeabi_dmul>
 8012da2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012da6:	1124      	asrs	r4, r4, #4
 8012da8:	2300      	movs	r3, #0
 8012daa:	2602      	movs	r6, #2
 8012dac:	2c00      	cmp	r4, #0
 8012dae:	f040 80b2 	bne.w	8012f16 <_dtoa_r+0x4fe>
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d1d3      	bne.n	8012d5e <_dtoa_r+0x346>
 8012db6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012db8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	f000 80b7 	beq.w	8012f30 <_dtoa_r+0x518>
 8012dc2:	4b86      	ldr	r3, [pc, #536]	@ (8012fdc <_dtoa_r+0x5c4>)
 8012dc4:	2200      	movs	r2, #0
 8012dc6:	4620      	mov	r0, r4
 8012dc8:	4629      	mov	r1, r5
 8012dca:	f7ed fe8f 	bl	8000aec <__aeabi_dcmplt>
 8012dce:	2800      	cmp	r0, #0
 8012dd0:	f000 80ae 	beq.w	8012f30 <_dtoa_r+0x518>
 8012dd4:	9b07      	ldr	r3, [sp, #28]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	f000 80aa 	beq.w	8012f30 <_dtoa_r+0x518>
 8012ddc:	9b00      	ldr	r3, [sp, #0]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	dd37      	ble.n	8012e52 <_dtoa_r+0x43a>
 8012de2:	1e7b      	subs	r3, r7, #1
 8012de4:	9304      	str	r3, [sp, #16]
 8012de6:	4620      	mov	r0, r4
 8012de8:	4b7d      	ldr	r3, [pc, #500]	@ (8012fe0 <_dtoa_r+0x5c8>)
 8012dea:	2200      	movs	r2, #0
 8012dec:	4629      	mov	r1, r5
 8012dee:	f7ed fc0b 	bl	8000608 <__aeabi_dmul>
 8012df2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012df6:	9c00      	ldr	r4, [sp, #0]
 8012df8:	3601      	adds	r6, #1
 8012dfa:	4630      	mov	r0, r6
 8012dfc:	f7ed fb9a 	bl	8000534 <__aeabi_i2d>
 8012e00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012e04:	f7ed fc00 	bl	8000608 <__aeabi_dmul>
 8012e08:	4b76      	ldr	r3, [pc, #472]	@ (8012fe4 <_dtoa_r+0x5cc>)
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	f7ed fa46 	bl	800029c <__adddf3>
 8012e10:	4605      	mov	r5, r0
 8012e12:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8012e16:	2c00      	cmp	r4, #0
 8012e18:	f040 808d 	bne.w	8012f36 <_dtoa_r+0x51e>
 8012e1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012e20:	4b71      	ldr	r3, [pc, #452]	@ (8012fe8 <_dtoa_r+0x5d0>)
 8012e22:	2200      	movs	r2, #0
 8012e24:	f7ed fa38 	bl	8000298 <__aeabi_dsub>
 8012e28:	4602      	mov	r2, r0
 8012e2a:	460b      	mov	r3, r1
 8012e2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012e30:	462a      	mov	r2, r5
 8012e32:	4633      	mov	r3, r6
 8012e34:	f7ed fe78 	bl	8000b28 <__aeabi_dcmpgt>
 8012e38:	2800      	cmp	r0, #0
 8012e3a:	f040 828b 	bne.w	8013354 <_dtoa_r+0x93c>
 8012e3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012e42:	462a      	mov	r2, r5
 8012e44:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8012e48:	f7ed fe50 	bl	8000aec <__aeabi_dcmplt>
 8012e4c:	2800      	cmp	r0, #0
 8012e4e:	f040 8128 	bne.w	80130a2 <_dtoa_r+0x68a>
 8012e52:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8012e56:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8012e5a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	f2c0 815a 	blt.w	8013116 <_dtoa_r+0x6fe>
 8012e62:	2f0e      	cmp	r7, #14
 8012e64:	f300 8157 	bgt.w	8013116 <_dtoa_r+0x6fe>
 8012e68:	4b5a      	ldr	r3, [pc, #360]	@ (8012fd4 <_dtoa_r+0x5bc>)
 8012e6a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012e6e:	ed93 7b00 	vldr	d7, [r3]
 8012e72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	ed8d 7b00 	vstr	d7, [sp]
 8012e7a:	da03      	bge.n	8012e84 <_dtoa_r+0x46c>
 8012e7c:	9b07      	ldr	r3, [sp, #28]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	f340 8101 	ble.w	8013086 <_dtoa_r+0x66e>
 8012e84:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012e88:	4656      	mov	r6, sl
 8012e8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012e8e:	4620      	mov	r0, r4
 8012e90:	4629      	mov	r1, r5
 8012e92:	f7ed fce3 	bl	800085c <__aeabi_ddiv>
 8012e96:	f7ed fe67 	bl	8000b68 <__aeabi_d2iz>
 8012e9a:	4680      	mov	r8, r0
 8012e9c:	f7ed fb4a 	bl	8000534 <__aeabi_i2d>
 8012ea0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012ea4:	f7ed fbb0 	bl	8000608 <__aeabi_dmul>
 8012ea8:	4602      	mov	r2, r0
 8012eaa:	460b      	mov	r3, r1
 8012eac:	4620      	mov	r0, r4
 8012eae:	4629      	mov	r1, r5
 8012eb0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8012eb4:	f7ed f9f0 	bl	8000298 <__aeabi_dsub>
 8012eb8:	f806 4b01 	strb.w	r4, [r6], #1
 8012ebc:	9d07      	ldr	r5, [sp, #28]
 8012ebe:	eba6 040a 	sub.w	r4, r6, sl
 8012ec2:	42a5      	cmp	r5, r4
 8012ec4:	4602      	mov	r2, r0
 8012ec6:	460b      	mov	r3, r1
 8012ec8:	f040 8117 	bne.w	80130fa <_dtoa_r+0x6e2>
 8012ecc:	f7ed f9e6 	bl	800029c <__adddf3>
 8012ed0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012ed4:	4604      	mov	r4, r0
 8012ed6:	460d      	mov	r5, r1
 8012ed8:	f7ed fe26 	bl	8000b28 <__aeabi_dcmpgt>
 8012edc:	2800      	cmp	r0, #0
 8012ede:	f040 80f9 	bne.w	80130d4 <_dtoa_r+0x6bc>
 8012ee2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012ee6:	4620      	mov	r0, r4
 8012ee8:	4629      	mov	r1, r5
 8012eea:	f7ed fdf5 	bl	8000ad8 <__aeabi_dcmpeq>
 8012eee:	b118      	cbz	r0, 8012ef8 <_dtoa_r+0x4e0>
 8012ef0:	f018 0f01 	tst.w	r8, #1
 8012ef4:	f040 80ee 	bne.w	80130d4 <_dtoa_r+0x6bc>
 8012ef8:	4649      	mov	r1, r9
 8012efa:	4658      	mov	r0, fp
 8012efc:	f000 fbda 	bl	80136b4 <_Bfree>
 8012f00:	2300      	movs	r3, #0
 8012f02:	7033      	strb	r3, [r6, #0]
 8012f04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012f06:	3701      	adds	r7, #1
 8012f08:	601f      	str	r7, [r3, #0]
 8012f0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	f000 831d 	beq.w	801354c <_dtoa_r+0xb34>
 8012f12:	601e      	str	r6, [r3, #0]
 8012f14:	e31a      	b.n	801354c <_dtoa_r+0xb34>
 8012f16:	07e2      	lsls	r2, r4, #31
 8012f18:	d505      	bpl.n	8012f26 <_dtoa_r+0x50e>
 8012f1a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012f1e:	f7ed fb73 	bl	8000608 <__aeabi_dmul>
 8012f22:	3601      	adds	r6, #1
 8012f24:	2301      	movs	r3, #1
 8012f26:	1064      	asrs	r4, r4, #1
 8012f28:	3508      	adds	r5, #8
 8012f2a:	e73f      	b.n	8012dac <_dtoa_r+0x394>
 8012f2c:	2602      	movs	r6, #2
 8012f2e:	e742      	b.n	8012db6 <_dtoa_r+0x39e>
 8012f30:	9c07      	ldr	r4, [sp, #28]
 8012f32:	9704      	str	r7, [sp, #16]
 8012f34:	e761      	b.n	8012dfa <_dtoa_r+0x3e2>
 8012f36:	4b27      	ldr	r3, [pc, #156]	@ (8012fd4 <_dtoa_r+0x5bc>)
 8012f38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012f3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012f3e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012f42:	4454      	add	r4, sl
 8012f44:	2900      	cmp	r1, #0
 8012f46:	d053      	beq.n	8012ff0 <_dtoa_r+0x5d8>
 8012f48:	4928      	ldr	r1, [pc, #160]	@ (8012fec <_dtoa_r+0x5d4>)
 8012f4a:	2000      	movs	r0, #0
 8012f4c:	f7ed fc86 	bl	800085c <__aeabi_ddiv>
 8012f50:	4633      	mov	r3, r6
 8012f52:	462a      	mov	r2, r5
 8012f54:	f7ed f9a0 	bl	8000298 <__aeabi_dsub>
 8012f58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012f5c:	4656      	mov	r6, sl
 8012f5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f62:	f7ed fe01 	bl	8000b68 <__aeabi_d2iz>
 8012f66:	4605      	mov	r5, r0
 8012f68:	f7ed fae4 	bl	8000534 <__aeabi_i2d>
 8012f6c:	4602      	mov	r2, r0
 8012f6e:	460b      	mov	r3, r1
 8012f70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f74:	f7ed f990 	bl	8000298 <__aeabi_dsub>
 8012f78:	3530      	adds	r5, #48	@ 0x30
 8012f7a:	4602      	mov	r2, r0
 8012f7c:	460b      	mov	r3, r1
 8012f7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012f82:	f806 5b01 	strb.w	r5, [r6], #1
 8012f86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012f8a:	f7ed fdaf 	bl	8000aec <__aeabi_dcmplt>
 8012f8e:	2800      	cmp	r0, #0
 8012f90:	d171      	bne.n	8013076 <_dtoa_r+0x65e>
 8012f92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012f96:	4911      	ldr	r1, [pc, #68]	@ (8012fdc <_dtoa_r+0x5c4>)
 8012f98:	2000      	movs	r0, #0
 8012f9a:	f7ed f97d 	bl	8000298 <__aeabi_dsub>
 8012f9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012fa2:	f7ed fda3 	bl	8000aec <__aeabi_dcmplt>
 8012fa6:	2800      	cmp	r0, #0
 8012fa8:	f040 8095 	bne.w	80130d6 <_dtoa_r+0x6be>
 8012fac:	42a6      	cmp	r6, r4
 8012fae:	f43f af50 	beq.w	8012e52 <_dtoa_r+0x43a>
 8012fb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8012fe0 <_dtoa_r+0x5c8>)
 8012fb8:	2200      	movs	r2, #0
 8012fba:	f7ed fb25 	bl	8000608 <__aeabi_dmul>
 8012fbe:	4b08      	ldr	r3, [pc, #32]	@ (8012fe0 <_dtoa_r+0x5c8>)
 8012fc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012fc4:	2200      	movs	r2, #0
 8012fc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012fca:	f7ed fb1d 	bl	8000608 <__aeabi_dmul>
 8012fce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012fd2:	e7c4      	b.n	8012f5e <_dtoa_r+0x546>
 8012fd4:	08016360 	.word	0x08016360
 8012fd8:	08016338 	.word	0x08016338
 8012fdc:	3ff00000 	.word	0x3ff00000
 8012fe0:	40240000 	.word	0x40240000
 8012fe4:	401c0000 	.word	0x401c0000
 8012fe8:	40140000 	.word	0x40140000
 8012fec:	3fe00000 	.word	0x3fe00000
 8012ff0:	4631      	mov	r1, r6
 8012ff2:	4628      	mov	r0, r5
 8012ff4:	f7ed fb08 	bl	8000608 <__aeabi_dmul>
 8012ff8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012ffc:	9415      	str	r4, [sp, #84]	@ 0x54
 8012ffe:	4656      	mov	r6, sl
 8013000:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013004:	f7ed fdb0 	bl	8000b68 <__aeabi_d2iz>
 8013008:	4605      	mov	r5, r0
 801300a:	f7ed fa93 	bl	8000534 <__aeabi_i2d>
 801300e:	4602      	mov	r2, r0
 8013010:	460b      	mov	r3, r1
 8013012:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013016:	f7ed f93f 	bl	8000298 <__aeabi_dsub>
 801301a:	3530      	adds	r5, #48	@ 0x30
 801301c:	f806 5b01 	strb.w	r5, [r6], #1
 8013020:	4602      	mov	r2, r0
 8013022:	460b      	mov	r3, r1
 8013024:	42a6      	cmp	r6, r4
 8013026:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801302a:	f04f 0200 	mov.w	r2, #0
 801302e:	d124      	bne.n	801307a <_dtoa_r+0x662>
 8013030:	4bac      	ldr	r3, [pc, #688]	@ (80132e4 <_dtoa_r+0x8cc>)
 8013032:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8013036:	f7ed f931 	bl	800029c <__adddf3>
 801303a:	4602      	mov	r2, r0
 801303c:	460b      	mov	r3, r1
 801303e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013042:	f7ed fd71 	bl	8000b28 <__aeabi_dcmpgt>
 8013046:	2800      	cmp	r0, #0
 8013048:	d145      	bne.n	80130d6 <_dtoa_r+0x6be>
 801304a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801304e:	49a5      	ldr	r1, [pc, #660]	@ (80132e4 <_dtoa_r+0x8cc>)
 8013050:	2000      	movs	r0, #0
 8013052:	f7ed f921 	bl	8000298 <__aeabi_dsub>
 8013056:	4602      	mov	r2, r0
 8013058:	460b      	mov	r3, r1
 801305a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801305e:	f7ed fd45 	bl	8000aec <__aeabi_dcmplt>
 8013062:	2800      	cmp	r0, #0
 8013064:	f43f aef5 	beq.w	8012e52 <_dtoa_r+0x43a>
 8013068:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801306a:	1e73      	subs	r3, r6, #1
 801306c:	9315      	str	r3, [sp, #84]	@ 0x54
 801306e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013072:	2b30      	cmp	r3, #48	@ 0x30
 8013074:	d0f8      	beq.n	8013068 <_dtoa_r+0x650>
 8013076:	9f04      	ldr	r7, [sp, #16]
 8013078:	e73e      	b.n	8012ef8 <_dtoa_r+0x4e0>
 801307a:	4b9b      	ldr	r3, [pc, #620]	@ (80132e8 <_dtoa_r+0x8d0>)
 801307c:	f7ed fac4 	bl	8000608 <__aeabi_dmul>
 8013080:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013084:	e7bc      	b.n	8013000 <_dtoa_r+0x5e8>
 8013086:	d10c      	bne.n	80130a2 <_dtoa_r+0x68a>
 8013088:	4b98      	ldr	r3, [pc, #608]	@ (80132ec <_dtoa_r+0x8d4>)
 801308a:	2200      	movs	r2, #0
 801308c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013090:	f7ed faba 	bl	8000608 <__aeabi_dmul>
 8013094:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013098:	f7ed fd3c 	bl	8000b14 <__aeabi_dcmpge>
 801309c:	2800      	cmp	r0, #0
 801309e:	f000 8157 	beq.w	8013350 <_dtoa_r+0x938>
 80130a2:	2400      	movs	r4, #0
 80130a4:	4625      	mov	r5, r4
 80130a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80130a8:	43db      	mvns	r3, r3
 80130aa:	9304      	str	r3, [sp, #16]
 80130ac:	4656      	mov	r6, sl
 80130ae:	2700      	movs	r7, #0
 80130b0:	4621      	mov	r1, r4
 80130b2:	4658      	mov	r0, fp
 80130b4:	f000 fafe 	bl	80136b4 <_Bfree>
 80130b8:	2d00      	cmp	r5, #0
 80130ba:	d0dc      	beq.n	8013076 <_dtoa_r+0x65e>
 80130bc:	b12f      	cbz	r7, 80130ca <_dtoa_r+0x6b2>
 80130be:	42af      	cmp	r7, r5
 80130c0:	d003      	beq.n	80130ca <_dtoa_r+0x6b2>
 80130c2:	4639      	mov	r1, r7
 80130c4:	4658      	mov	r0, fp
 80130c6:	f000 faf5 	bl	80136b4 <_Bfree>
 80130ca:	4629      	mov	r1, r5
 80130cc:	4658      	mov	r0, fp
 80130ce:	f000 faf1 	bl	80136b4 <_Bfree>
 80130d2:	e7d0      	b.n	8013076 <_dtoa_r+0x65e>
 80130d4:	9704      	str	r7, [sp, #16]
 80130d6:	4633      	mov	r3, r6
 80130d8:	461e      	mov	r6, r3
 80130da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80130de:	2a39      	cmp	r2, #57	@ 0x39
 80130e0:	d107      	bne.n	80130f2 <_dtoa_r+0x6da>
 80130e2:	459a      	cmp	sl, r3
 80130e4:	d1f8      	bne.n	80130d8 <_dtoa_r+0x6c0>
 80130e6:	9a04      	ldr	r2, [sp, #16]
 80130e8:	3201      	adds	r2, #1
 80130ea:	9204      	str	r2, [sp, #16]
 80130ec:	2230      	movs	r2, #48	@ 0x30
 80130ee:	f88a 2000 	strb.w	r2, [sl]
 80130f2:	781a      	ldrb	r2, [r3, #0]
 80130f4:	3201      	adds	r2, #1
 80130f6:	701a      	strb	r2, [r3, #0]
 80130f8:	e7bd      	b.n	8013076 <_dtoa_r+0x65e>
 80130fa:	4b7b      	ldr	r3, [pc, #492]	@ (80132e8 <_dtoa_r+0x8d0>)
 80130fc:	2200      	movs	r2, #0
 80130fe:	f7ed fa83 	bl	8000608 <__aeabi_dmul>
 8013102:	2200      	movs	r2, #0
 8013104:	2300      	movs	r3, #0
 8013106:	4604      	mov	r4, r0
 8013108:	460d      	mov	r5, r1
 801310a:	f7ed fce5 	bl	8000ad8 <__aeabi_dcmpeq>
 801310e:	2800      	cmp	r0, #0
 8013110:	f43f aebb 	beq.w	8012e8a <_dtoa_r+0x472>
 8013114:	e6f0      	b.n	8012ef8 <_dtoa_r+0x4e0>
 8013116:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013118:	2a00      	cmp	r2, #0
 801311a:	f000 80db 	beq.w	80132d4 <_dtoa_r+0x8bc>
 801311e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013120:	2a01      	cmp	r2, #1
 8013122:	f300 80bf 	bgt.w	80132a4 <_dtoa_r+0x88c>
 8013126:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013128:	2a00      	cmp	r2, #0
 801312a:	f000 80b7 	beq.w	801329c <_dtoa_r+0x884>
 801312e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8013132:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8013134:	4646      	mov	r6, r8
 8013136:	9a08      	ldr	r2, [sp, #32]
 8013138:	2101      	movs	r1, #1
 801313a:	441a      	add	r2, r3
 801313c:	4658      	mov	r0, fp
 801313e:	4498      	add	r8, r3
 8013140:	9208      	str	r2, [sp, #32]
 8013142:	f000 fb6b 	bl	801381c <__i2b>
 8013146:	4605      	mov	r5, r0
 8013148:	b15e      	cbz	r6, 8013162 <_dtoa_r+0x74a>
 801314a:	9b08      	ldr	r3, [sp, #32]
 801314c:	2b00      	cmp	r3, #0
 801314e:	dd08      	ble.n	8013162 <_dtoa_r+0x74a>
 8013150:	42b3      	cmp	r3, r6
 8013152:	9a08      	ldr	r2, [sp, #32]
 8013154:	bfa8      	it	ge
 8013156:	4633      	movge	r3, r6
 8013158:	eba8 0803 	sub.w	r8, r8, r3
 801315c:	1af6      	subs	r6, r6, r3
 801315e:	1ad3      	subs	r3, r2, r3
 8013160:	9308      	str	r3, [sp, #32]
 8013162:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013164:	b1f3      	cbz	r3, 80131a4 <_dtoa_r+0x78c>
 8013166:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013168:	2b00      	cmp	r3, #0
 801316a:	f000 80b7 	beq.w	80132dc <_dtoa_r+0x8c4>
 801316e:	b18c      	cbz	r4, 8013194 <_dtoa_r+0x77c>
 8013170:	4629      	mov	r1, r5
 8013172:	4622      	mov	r2, r4
 8013174:	4658      	mov	r0, fp
 8013176:	f000 fc11 	bl	801399c <__pow5mult>
 801317a:	464a      	mov	r2, r9
 801317c:	4601      	mov	r1, r0
 801317e:	4605      	mov	r5, r0
 8013180:	4658      	mov	r0, fp
 8013182:	f000 fb61 	bl	8013848 <__multiply>
 8013186:	4649      	mov	r1, r9
 8013188:	9004      	str	r0, [sp, #16]
 801318a:	4658      	mov	r0, fp
 801318c:	f000 fa92 	bl	80136b4 <_Bfree>
 8013190:	9b04      	ldr	r3, [sp, #16]
 8013192:	4699      	mov	r9, r3
 8013194:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013196:	1b1a      	subs	r2, r3, r4
 8013198:	d004      	beq.n	80131a4 <_dtoa_r+0x78c>
 801319a:	4649      	mov	r1, r9
 801319c:	4658      	mov	r0, fp
 801319e:	f000 fbfd 	bl	801399c <__pow5mult>
 80131a2:	4681      	mov	r9, r0
 80131a4:	2101      	movs	r1, #1
 80131a6:	4658      	mov	r0, fp
 80131a8:	f000 fb38 	bl	801381c <__i2b>
 80131ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80131ae:	4604      	mov	r4, r0
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	f000 81cf 	beq.w	8013554 <_dtoa_r+0xb3c>
 80131b6:	461a      	mov	r2, r3
 80131b8:	4601      	mov	r1, r0
 80131ba:	4658      	mov	r0, fp
 80131bc:	f000 fbee 	bl	801399c <__pow5mult>
 80131c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80131c2:	2b01      	cmp	r3, #1
 80131c4:	4604      	mov	r4, r0
 80131c6:	f300 8095 	bgt.w	80132f4 <_dtoa_r+0x8dc>
 80131ca:	9b02      	ldr	r3, [sp, #8]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	f040 8087 	bne.w	80132e0 <_dtoa_r+0x8c8>
 80131d2:	9b03      	ldr	r3, [sp, #12]
 80131d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80131d8:	2b00      	cmp	r3, #0
 80131da:	f040 8089 	bne.w	80132f0 <_dtoa_r+0x8d8>
 80131de:	9b03      	ldr	r3, [sp, #12]
 80131e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80131e4:	0d1b      	lsrs	r3, r3, #20
 80131e6:	051b      	lsls	r3, r3, #20
 80131e8:	b12b      	cbz	r3, 80131f6 <_dtoa_r+0x7de>
 80131ea:	9b08      	ldr	r3, [sp, #32]
 80131ec:	3301      	adds	r3, #1
 80131ee:	9308      	str	r3, [sp, #32]
 80131f0:	f108 0801 	add.w	r8, r8, #1
 80131f4:	2301      	movs	r3, #1
 80131f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80131f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	f000 81b0 	beq.w	8013560 <_dtoa_r+0xb48>
 8013200:	6923      	ldr	r3, [r4, #16]
 8013202:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013206:	6918      	ldr	r0, [r3, #16]
 8013208:	f000 fabc 	bl	8013784 <__hi0bits>
 801320c:	f1c0 0020 	rsb	r0, r0, #32
 8013210:	9b08      	ldr	r3, [sp, #32]
 8013212:	4418      	add	r0, r3
 8013214:	f010 001f 	ands.w	r0, r0, #31
 8013218:	d077      	beq.n	801330a <_dtoa_r+0x8f2>
 801321a:	f1c0 0320 	rsb	r3, r0, #32
 801321e:	2b04      	cmp	r3, #4
 8013220:	dd6b      	ble.n	80132fa <_dtoa_r+0x8e2>
 8013222:	9b08      	ldr	r3, [sp, #32]
 8013224:	f1c0 001c 	rsb	r0, r0, #28
 8013228:	4403      	add	r3, r0
 801322a:	4480      	add	r8, r0
 801322c:	4406      	add	r6, r0
 801322e:	9308      	str	r3, [sp, #32]
 8013230:	f1b8 0f00 	cmp.w	r8, #0
 8013234:	dd05      	ble.n	8013242 <_dtoa_r+0x82a>
 8013236:	4649      	mov	r1, r9
 8013238:	4642      	mov	r2, r8
 801323a:	4658      	mov	r0, fp
 801323c:	f000 fc08 	bl	8013a50 <__lshift>
 8013240:	4681      	mov	r9, r0
 8013242:	9b08      	ldr	r3, [sp, #32]
 8013244:	2b00      	cmp	r3, #0
 8013246:	dd05      	ble.n	8013254 <_dtoa_r+0x83c>
 8013248:	4621      	mov	r1, r4
 801324a:	461a      	mov	r2, r3
 801324c:	4658      	mov	r0, fp
 801324e:	f000 fbff 	bl	8013a50 <__lshift>
 8013252:	4604      	mov	r4, r0
 8013254:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013256:	2b00      	cmp	r3, #0
 8013258:	d059      	beq.n	801330e <_dtoa_r+0x8f6>
 801325a:	4621      	mov	r1, r4
 801325c:	4648      	mov	r0, r9
 801325e:	f000 fc63 	bl	8013b28 <__mcmp>
 8013262:	2800      	cmp	r0, #0
 8013264:	da53      	bge.n	801330e <_dtoa_r+0x8f6>
 8013266:	1e7b      	subs	r3, r7, #1
 8013268:	9304      	str	r3, [sp, #16]
 801326a:	4649      	mov	r1, r9
 801326c:	2300      	movs	r3, #0
 801326e:	220a      	movs	r2, #10
 8013270:	4658      	mov	r0, fp
 8013272:	f000 fa41 	bl	80136f8 <__multadd>
 8013276:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013278:	4681      	mov	r9, r0
 801327a:	2b00      	cmp	r3, #0
 801327c:	f000 8172 	beq.w	8013564 <_dtoa_r+0xb4c>
 8013280:	2300      	movs	r3, #0
 8013282:	4629      	mov	r1, r5
 8013284:	220a      	movs	r2, #10
 8013286:	4658      	mov	r0, fp
 8013288:	f000 fa36 	bl	80136f8 <__multadd>
 801328c:	9b00      	ldr	r3, [sp, #0]
 801328e:	2b00      	cmp	r3, #0
 8013290:	4605      	mov	r5, r0
 8013292:	dc67      	bgt.n	8013364 <_dtoa_r+0x94c>
 8013294:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013296:	2b02      	cmp	r3, #2
 8013298:	dc41      	bgt.n	801331e <_dtoa_r+0x906>
 801329a:	e063      	b.n	8013364 <_dtoa_r+0x94c>
 801329c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801329e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80132a2:	e746      	b.n	8013132 <_dtoa_r+0x71a>
 80132a4:	9b07      	ldr	r3, [sp, #28]
 80132a6:	1e5c      	subs	r4, r3, #1
 80132a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80132aa:	42a3      	cmp	r3, r4
 80132ac:	bfbf      	itttt	lt
 80132ae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80132b0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80132b2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80132b4:	1ae3      	sublt	r3, r4, r3
 80132b6:	bfb4      	ite	lt
 80132b8:	18d2      	addlt	r2, r2, r3
 80132ba:	1b1c      	subge	r4, r3, r4
 80132bc:	9b07      	ldr	r3, [sp, #28]
 80132be:	bfbc      	itt	lt
 80132c0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80132c2:	2400      	movlt	r4, #0
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	bfb5      	itete	lt
 80132c8:	eba8 0603 	sublt.w	r6, r8, r3
 80132cc:	9b07      	ldrge	r3, [sp, #28]
 80132ce:	2300      	movlt	r3, #0
 80132d0:	4646      	movge	r6, r8
 80132d2:	e730      	b.n	8013136 <_dtoa_r+0x71e>
 80132d4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80132d6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80132d8:	4646      	mov	r6, r8
 80132da:	e735      	b.n	8013148 <_dtoa_r+0x730>
 80132dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80132de:	e75c      	b.n	801319a <_dtoa_r+0x782>
 80132e0:	2300      	movs	r3, #0
 80132e2:	e788      	b.n	80131f6 <_dtoa_r+0x7de>
 80132e4:	3fe00000 	.word	0x3fe00000
 80132e8:	40240000 	.word	0x40240000
 80132ec:	40140000 	.word	0x40140000
 80132f0:	9b02      	ldr	r3, [sp, #8]
 80132f2:	e780      	b.n	80131f6 <_dtoa_r+0x7de>
 80132f4:	2300      	movs	r3, #0
 80132f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80132f8:	e782      	b.n	8013200 <_dtoa_r+0x7e8>
 80132fa:	d099      	beq.n	8013230 <_dtoa_r+0x818>
 80132fc:	9a08      	ldr	r2, [sp, #32]
 80132fe:	331c      	adds	r3, #28
 8013300:	441a      	add	r2, r3
 8013302:	4498      	add	r8, r3
 8013304:	441e      	add	r6, r3
 8013306:	9208      	str	r2, [sp, #32]
 8013308:	e792      	b.n	8013230 <_dtoa_r+0x818>
 801330a:	4603      	mov	r3, r0
 801330c:	e7f6      	b.n	80132fc <_dtoa_r+0x8e4>
 801330e:	9b07      	ldr	r3, [sp, #28]
 8013310:	9704      	str	r7, [sp, #16]
 8013312:	2b00      	cmp	r3, #0
 8013314:	dc20      	bgt.n	8013358 <_dtoa_r+0x940>
 8013316:	9300      	str	r3, [sp, #0]
 8013318:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801331a:	2b02      	cmp	r3, #2
 801331c:	dd1e      	ble.n	801335c <_dtoa_r+0x944>
 801331e:	9b00      	ldr	r3, [sp, #0]
 8013320:	2b00      	cmp	r3, #0
 8013322:	f47f aec0 	bne.w	80130a6 <_dtoa_r+0x68e>
 8013326:	4621      	mov	r1, r4
 8013328:	2205      	movs	r2, #5
 801332a:	4658      	mov	r0, fp
 801332c:	f000 f9e4 	bl	80136f8 <__multadd>
 8013330:	4601      	mov	r1, r0
 8013332:	4604      	mov	r4, r0
 8013334:	4648      	mov	r0, r9
 8013336:	f000 fbf7 	bl	8013b28 <__mcmp>
 801333a:	2800      	cmp	r0, #0
 801333c:	f77f aeb3 	ble.w	80130a6 <_dtoa_r+0x68e>
 8013340:	4656      	mov	r6, sl
 8013342:	2331      	movs	r3, #49	@ 0x31
 8013344:	f806 3b01 	strb.w	r3, [r6], #1
 8013348:	9b04      	ldr	r3, [sp, #16]
 801334a:	3301      	adds	r3, #1
 801334c:	9304      	str	r3, [sp, #16]
 801334e:	e6ae      	b.n	80130ae <_dtoa_r+0x696>
 8013350:	9c07      	ldr	r4, [sp, #28]
 8013352:	9704      	str	r7, [sp, #16]
 8013354:	4625      	mov	r5, r4
 8013356:	e7f3      	b.n	8013340 <_dtoa_r+0x928>
 8013358:	9b07      	ldr	r3, [sp, #28]
 801335a:	9300      	str	r3, [sp, #0]
 801335c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801335e:	2b00      	cmp	r3, #0
 8013360:	f000 8104 	beq.w	801356c <_dtoa_r+0xb54>
 8013364:	2e00      	cmp	r6, #0
 8013366:	dd05      	ble.n	8013374 <_dtoa_r+0x95c>
 8013368:	4629      	mov	r1, r5
 801336a:	4632      	mov	r2, r6
 801336c:	4658      	mov	r0, fp
 801336e:	f000 fb6f 	bl	8013a50 <__lshift>
 8013372:	4605      	mov	r5, r0
 8013374:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013376:	2b00      	cmp	r3, #0
 8013378:	d05a      	beq.n	8013430 <_dtoa_r+0xa18>
 801337a:	6869      	ldr	r1, [r5, #4]
 801337c:	4658      	mov	r0, fp
 801337e:	f000 f959 	bl	8013634 <_Balloc>
 8013382:	4606      	mov	r6, r0
 8013384:	b928      	cbnz	r0, 8013392 <_dtoa_r+0x97a>
 8013386:	4b84      	ldr	r3, [pc, #528]	@ (8013598 <_dtoa_r+0xb80>)
 8013388:	4602      	mov	r2, r0
 801338a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801338e:	f7ff bb5a 	b.w	8012a46 <_dtoa_r+0x2e>
 8013392:	692a      	ldr	r2, [r5, #16]
 8013394:	3202      	adds	r2, #2
 8013396:	0092      	lsls	r2, r2, #2
 8013398:	f105 010c 	add.w	r1, r5, #12
 801339c:	300c      	adds	r0, #12
 801339e:	f000 fee9 	bl	8014174 <memcpy>
 80133a2:	2201      	movs	r2, #1
 80133a4:	4631      	mov	r1, r6
 80133a6:	4658      	mov	r0, fp
 80133a8:	f000 fb52 	bl	8013a50 <__lshift>
 80133ac:	f10a 0301 	add.w	r3, sl, #1
 80133b0:	9307      	str	r3, [sp, #28]
 80133b2:	9b00      	ldr	r3, [sp, #0]
 80133b4:	4453      	add	r3, sl
 80133b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80133b8:	9b02      	ldr	r3, [sp, #8]
 80133ba:	f003 0301 	and.w	r3, r3, #1
 80133be:	462f      	mov	r7, r5
 80133c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80133c2:	4605      	mov	r5, r0
 80133c4:	9b07      	ldr	r3, [sp, #28]
 80133c6:	4621      	mov	r1, r4
 80133c8:	3b01      	subs	r3, #1
 80133ca:	4648      	mov	r0, r9
 80133cc:	9300      	str	r3, [sp, #0]
 80133ce:	f7ff fa9a 	bl	8012906 <quorem>
 80133d2:	4639      	mov	r1, r7
 80133d4:	9002      	str	r0, [sp, #8]
 80133d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80133da:	4648      	mov	r0, r9
 80133dc:	f000 fba4 	bl	8013b28 <__mcmp>
 80133e0:	462a      	mov	r2, r5
 80133e2:	9008      	str	r0, [sp, #32]
 80133e4:	4621      	mov	r1, r4
 80133e6:	4658      	mov	r0, fp
 80133e8:	f000 fbba 	bl	8013b60 <__mdiff>
 80133ec:	68c2      	ldr	r2, [r0, #12]
 80133ee:	4606      	mov	r6, r0
 80133f0:	bb02      	cbnz	r2, 8013434 <_dtoa_r+0xa1c>
 80133f2:	4601      	mov	r1, r0
 80133f4:	4648      	mov	r0, r9
 80133f6:	f000 fb97 	bl	8013b28 <__mcmp>
 80133fa:	4602      	mov	r2, r0
 80133fc:	4631      	mov	r1, r6
 80133fe:	4658      	mov	r0, fp
 8013400:	920e      	str	r2, [sp, #56]	@ 0x38
 8013402:	f000 f957 	bl	80136b4 <_Bfree>
 8013406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013408:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801340a:	9e07      	ldr	r6, [sp, #28]
 801340c:	ea43 0102 	orr.w	r1, r3, r2
 8013410:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013412:	4319      	orrs	r1, r3
 8013414:	d110      	bne.n	8013438 <_dtoa_r+0xa20>
 8013416:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801341a:	d029      	beq.n	8013470 <_dtoa_r+0xa58>
 801341c:	9b08      	ldr	r3, [sp, #32]
 801341e:	2b00      	cmp	r3, #0
 8013420:	dd02      	ble.n	8013428 <_dtoa_r+0xa10>
 8013422:	9b02      	ldr	r3, [sp, #8]
 8013424:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8013428:	9b00      	ldr	r3, [sp, #0]
 801342a:	f883 8000 	strb.w	r8, [r3]
 801342e:	e63f      	b.n	80130b0 <_dtoa_r+0x698>
 8013430:	4628      	mov	r0, r5
 8013432:	e7bb      	b.n	80133ac <_dtoa_r+0x994>
 8013434:	2201      	movs	r2, #1
 8013436:	e7e1      	b.n	80133fc <_dtoa_r+0x9e4>
 8013438:	9b08      	ldr	r3, [sp, #32]
 801343a:	2b00      	cmp	r3, #0
 801343c:	db04      	blt.n	8013448 <_dtoa_r+0xa30>
 801343e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013440:	430b      	orrs	r3, r1
 8013442:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013444:	430b      	orrs	r3, r1
 8013446:	d120      	bne.n	801348a <_dtoa_r+0xa72>
 8013448:	2a00      	cmp	r2, #0
 801344a:	dded      	ble.n	8013428 <_dtoa_r+0xa10>
 801344c:	4649      	mov	r1, r9
 801344e:	2201      	movs	r2, #1
 8013450:	4658      	mov	r0, fp
 8013452:	f000 fafd 	bl	8013a50 <__lshift>
 8013456:	4621      	mov	r1, r4
 8013458:	4681      	mov	r9, r0
 801345a:	f000 fb65 	bl	8013b28 <__mcmp>
 801345e:	2800      	cmp	r0, #0
 8013460:	dc03      	bgt.n	801346a <_dtoa_r+0xa52>
 8013462:	d1e1      	bne.n	8013428 <_dtoa_r+0xa10>
 8013464:	f018 0f01 	tst.w	r8, #1
 8013468:	d0de      	beq.n	8013428 <_dtoa_r+0xa10>
 801346a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801346e:	d1d8      	bne.n	8013422 <_dtoa_r+0xa0a>
 8013470:	9a00      	ldr	r2, [sp, #0]
 8013472:	2339      	movs	r3, #57	@ 0x39
 8013474:	7013      	strb	r3, [r2, #0]
 8013476:	4633      	mov	r3, r6
 8013478:	461e      	mov	r6, r3
 801347a:	3b01      	subs	r3, #1
 801347c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013480:	2a39      	cmp	r2, #57	@ 0x39
 8013482:	d052      	beq.n	801352a <_dtoa_r+0xb12>
 8013484:	3201      	adds	r2, #1
 8013486:	701a      	strb	r2, [r3, #0]
 8013488:	e612      	b.n	80130b0 <_dtoa_r+0x698>
 801348a:	2a00      	cmp	r2, #0
 801348c:	dd07      	ble.n	801349e <_dtoa_r+0xa86>
 801348e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8013492:	d0ed      	beq.n	8013470 <_dtoa_r+0xa58>
 8013494:	9a00      	ldr	r2, [sp, #0]
 8013496:	f108 0301 	add.w	r3, r8, #1
 801349a:	7013      	strb	r3, [r2, #0]
 801349c:	e608      	b.n	80130b0 <_dtoa_r+0x698>
 801349e:	9b07      	ldr	r3, [sp, #28]
 80134a0:	9a07      	ldr	r2, [sp, #28]
 80134a2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80134a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80134a8:	4293      	cmp	r3, r2
 80134aa:	d028      	beq.n	80134fe <_dtoa_r+0xae6>
 80134ac:	4649      	mov	r1, r9
 80134ae:	2300      	movs	r3, #0
 80134b0:	220a      	movs	r2, #10
 80134b2:	4658      	mov	r0, fp
 80134b4:	f000 f920 	bl	80136f8 <__multadd>
 80134b8:	42af      	cmp	r7, r5
 80134ba:	4681      	mov	r9, r0
 80134bc:	f04f 0300 	mov.w	r3, #0
 80134c0:	f04f 020a 	mov.w	r2, #10
 80134c4:	4639      	mov	r1, r7
 80134c6:	4658      	mov	r0, fp
 80134c8:	d107      	bne.n	80134da <_dtoa_r+0xac2>
 80134ca:	f000 f915 	bl	80136f8 <__multadd>
 80134ce:	4607      	mov	r7, r0
 80134d0:	4605      	mov	r5, r0
 80134d2:	9b07      	ldr	r3, [sp, #28]
 80134d4:	3301      	adds	r3, #1
 80134d6:	9307      	str	r3, [sp, #28]
 80134d8:	e774      	b.n	80133c4 <_dtoa_r+0x9ac>
 80134da:	f000 f90d 	bl	80136f8 <__multadd>
 80134de:	4629      	mov	r1, r5
 80134e0:	4607      	mov	r7, r0
 80134e2:	2300      	movs	r3, #0
 80134e4:	220a      	movs	r2, #10
 80134e6:	4658      	mov	r0, fp
 80134e8:	f000 f906 	bl	80136f8 <__multadd>
 80134ec:	4605      	mov	r5, r0
 80134ee:	e7f0      	b.n	80134d2 <_dtoa_r+0xaba>
 80134f0:	9b00      	ldr	r3, [sp, #0]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	bfcc      	ite	gt
 80134f6:	461e      	movgt	r6, r3
 80134f8:	2601      	movle	r6, #1
 80134fa:	4456      	add	r6, sl
 80134fc:	2700      	movs	r7, #0
 80134fe:	4649      	mov	r1, r9
 8013500:	2201      	movs	r2, #1
 8013502:	4658      	mov	r0, fp
 8013504:	f000 faa4 	bl	8013a50 <__lshift>
 8013508:	4621      	mov	r1, r4
 801350a:	4681      	mov	r9, r0
 801350c:	f000 fb0c 	bl	8013b28 <__mcmp>
 8013510:	2800      	cmp	r0, #0
 8013512:	dcb0      	bgt.n	8013476 <_dtoa_r+0xa5e>
 8013514:	d102      	bne.n	801351c <_dtoa_r+0xb04>
 8013516:	f018 0f01 	tst.w	r8, #1
 801351a:	d1ac      	bne.n	8013476 <_dtoa_r+0xa5e>
 801351c:	4633      	mov	r3, r6
 801351e:	461e      	mov	r6, r3
 8013520:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013524:	2a30      	cmp	r2, #48	@ 0x30
 8013526:	d0fa      	beq.n	801351e <_dtoa_r+0xb06>
 8013528:	e5c2      	b.n	80130b0 <_dtoa_r+0x698>
 801352a:	459a      	cmp	sl, r3
 801352c:	d1a4      	bne.n	8013478 <_dtoa_r+0xa60>
 801352e:	9b04      	ldr	r3, [sp, #16]
 8013530:	3301      	adds	r3, #1
 8013532:	9304      	str	r3, [sp, #16]
 8013534:	2331      	movs	r3, #49	@ 0x31
 8013536:	f88a 3000 	strb.w	r3, [sl]
 801353a:	e5b9      	b.n	80130b0 <_dtoa_r+0x698>
 801353c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801353e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801359c <_dtoa_r+0xb84>
 8013542:	b11b      	cbz	r3, 801354c <_dtoa_r+0xb34>
 8013544:	f10a 0308 	add.w	r3, sl, #8
 8013548:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801354a:	6013      	str	r3, [r2, #0]
 801354c:	4650      	mov	r0, sl
 801354e:	b019      	add	sp, #100	@ 0x64
 8013550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013554:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013556:	2b01      	cmp	r3, #1
 8013558:	f77f ae37 	ble.w	80131ca <_dtoa_r+0x7b2>
 801355c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801355e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013560:	2001      	movs	r0, #1
 8013562:	e655      	b.n	8013210 <_dtoa_r+0x7f8>
 8013564:	9b00      	ldr	r3, [sp, #0]
 8013566:	2b00      	cmp	r3, #0
 8013568:	f77f aed6 	ble.w	8013318 <_dtoa_r+0x900>
 801356c:	4656      	mov	r6, sl
 801356e:	4621      	mov	r1, r4
 8013570:	4648      	mov	r0, r9
 8013572:	f7ff f9c8 	bl	8012906 <quorem>
 8013576:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801357a:	f806 8b01 	strb.w	r8, [r6], #1
 801357e:	9b00      	ldr	r3, [sp, #0]
 8013580:	eba6 020a 	sub.w	r2, r6, sl
 8013584:	4293      	cmp	r3, r2
 8013586:	ddb3      	ble.n	80134f0 <_dtoa_r+0xad8>
 8013588:	4649      	mov	r1, r9
 801358a:	2300      	movs	r3, #0
 801358c:	220a      	movs	r2, #10
 801358e:	4658      	mov	r0, fp
 8013590:	f000 f8b2 	bl	80136f8 <__multadd>
 8013594:	4681      	mov	r9, r0
 8013596:	e7ea      	b.n	801356e <_dtoa_r+0xb56>
 8013598:	080162c0 	.word	0x080162c0
 801359c:	08016244 	.word	0x08016244

080135a0 <_free_r>:
 80135a0:	b538      	push	{r3, r4, r5, lr}
 80135a2:	4605      	mov	r5, r0
 80135a4:	2900      	cmp	r1, #0
 80135a6:	d041      	beq.n	801362c <_free_r+0x8c>
 80135a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80135ac:	1f0c      	subs	r4, r1, #4
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	bfb8      	it	lt
 80135b2:	18e4      	addlt	r4, r4, r3
 80135b4:	f7fe fb42 	bl	8011c3c <__malloc_lock>
 80135b8:	4a1d      	ldr	r2, [pc, #116]	@ (8013630 <_free_r+0x90>)
 80135ba:	6813      	ldr	r3, [r2, #0]
 80135bc:	b933      	cbnz	r3, 80135cc <_free_r+0x2c>
 80135be:	6063      	str	r3, [r4, #4]
 80135c0:	6014      	str	r4, [r2, #0]
 80135c2:	4628      	mov	r0, r5
 80135c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80135c8:	f7fe bb3e 	b.w	8011c48 <__malloc_unlock>
 80135cc:	42a3      	cmp	r3, r4
 80135ce:	d908      	bls.n	80135e2 <_free_r+0x42>
 80135d0:	6820      	ldr	r0, [r4, #0]
 80135d2:	1821      	adds	r1, r4, r0
 80135d4:	428b      	cmp	r3, r1
 80135d6:	bf01      	itttt	eq
 80135d8:	6819      	ldreq	r1, [r3, #0]
 80135da:	685b      	ldreq	r3, [r3, #4]
 80135dc:	1809      	addeq	r1, r1, r0
 80135de:	6021      	streq	r1, [r4, #0]
 80135e0:	e7ed      	b.n	80135be <_free_r+0x1e>
 80135e2:	461a      	mov	r2, r3
 80135e4:	685b      	ldr	r3, [r3, #4]
 80135e6:	b10b      	cbz	r3, 80135ec <_free_r+0x4c>
 80135e8:	42a3      	cmp	r3, r4
 80135ea:	d9fa      	bls.n	80135e2 <_free_r+0x42>
 80135ec:	6811      	ldr	r1, [r2, #0]
 80135ee:	1850      	adds	r0, r2, r1
 80135f0:	42a0      	cmp	r0, r4
 80135f2:	d10b      	bne.n	801360c <_free_r+0x6c>
 80135f4:	6820      	ldr	r0, [r4, #0]
 80135f6:	4401      	add	r1, r0
 80135f8:	1850      	adds	r0, r2, r1
 80135fa:	4283      	cmp	r3, r0
 80135fc:	6011      	str	r1, [r2, #0]
 80135fe:	d1e0      	bne.n	80135c2 <_free_r+0x22>
 8013600:	6818      	ldr	r0, [r3, #0]
 8013602:	685b      	ldr	r3, [r3, #4]
 8013604:	6053      	str	r3, [r2, #4]
 8013606:	4408      	add	r0, r1
 8013608:	6010      	str	r0, [r2, #0]
 801360a:	e7da      	b.n	80135c2 <_free_r+0x22>
 801360c:	d902      	bls.n	8013614 <_free_r+0x74>
 801360e:	230c      	movs	r3, #12
 8013610:	602b      	str	r3, [r5, #0]
 8013612:	e7d6      	b.n	80135c2 <_free_r+0x22>
 8013614:	6820      	ldr	r0, [r4, #0]
 8013616:	1821      	adds	r1, r4, r0
 8013618:	428b      	cmp	r3, r1
 801361a:	bf04      	itt	eq
 801361c:	6819      	ldreq	r1, [r3, #0]
 801361e:	685b      	ldreq	r3, [r3, #4]
 8013620:	6063      	str	r3, [r4, #4]
 8013622:	bf04      	itt	eq
 8013624:	1809      	addeq	r1, r1, r0
 8013626:	6021      	streq	r1, [r4, #0]
 8013628:	6054      	str	r4, [r2, #4]
 801362a:	e7ca      	b.n	80135c2 <_free_r+0x22>
 801362c:	bd38      	pop	{r3, r4, r5, pc}
 801362e:	bf00      	nop
 8013630:	200005c4 	.word	0x200005c4

08013634 <_Balloc>:
 8013634:	b570      	push	{r4, r5, r6, lr}
 8013636:	69c6      	ldr	r6, [r0, #28]
 8013638:	4604      	mov	r4, r0
 801363a:	460d      	mov	r5, r1
 801363c:	b976      	cbnz	r6, 801365c <_Balloc+0x28>
 801363e:	2010      	movs	r0, #16
 8013640:	f7fe fa4a 	bl	8011ad8 <malloc>
 8013644:	4602      	mov	r2, r0
 8013646:	61e0      	str	r0, [r4, #28]
 8013648:	b920      	cbnz	r0, 8013654 <_Balloc+0x20>
 801364a:	4b18      	ldr	r3, [pc, #96]	@ (80136ac <_Balloc+0x78>)
 801364c:	4818      	ldr	r0, [pc, #96]	@ (80136b0 <_Balloc+0x7c>)
 801364e:	216b      	movs	r1, #107	@ 0x6b
 8013650:	f000 fd9e 	bl	8014190 <__assert_func>
 8013654:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013658:	6006      	str	r6, [r0, #0]
 801365a:	60c6      	str	r6, [r0, #12]
 801365c:	69e6      	ldr	r6, [r4, #28]
 801365e:	68f3      	ldr	r3, [r6, #12]
 8013660:	b183      	cbz	r3, 8013684 <_Balloc+0x50>
 8013662:	69e3      	ldr	r3, [r4, #28]
 8013664:	68db      	ldr	r3, [r3, #12]
 8013666:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801366a:	b9b8      	cbnz	r0, 801369c <_Balloc+0x68>
 801366c:	2101      	movs	r1, #1
 801366e:	fa01 f605 	lsl.w	r6, r1, r5
 8013672:	1d72      	adds	r2, r6, #5
 8013674:	0092      	lsls	r2, r2, #2
 8013676:	4620      	mov	r0, r4
 8013678:	f000 fda8 	bl	80141cc <_calloc_r>
 801367c:	b160      	cbz	r0, 8013698 <_Balloc+0x64>
 801367e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013682:	e00e      	b.n	80136a2 <_Balloc+0x6e>
 8013684:	2221      	movs	r2, #33	@ 0x21
 8013686:	2104      	movs	r1, #4
 8013688:	4620      	mov	r0, r4
 801368a:	f000 fd9f 	bl	80141cc <_calloc_r>
 801368e:	69e3      	ldr	r3, [r4, #28]
 8013690:	60f0      	str	r0, [r6, #12]
 8013692:	68db      	ldr	r3, [r3, #12]
 8013694:	2b00      	cmp	r3, #0
 8013696:	d1e4      	bne.n	8013662 <_Balloc+0x2e>
 8013698:	2000      	movs	r0, #0
 801369a:	bd70      	pop	{r4, r5, r6, pc}
 801369c:	6802      	ldr	r2, [r0, #0]
 801369e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80136a2:	2300      	movs	r3, #0
 80136a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80136a8:	e7f7      	b.n	801369a <_Balloc+0x66>
 80136aa:	bf00      	nop
 80136ac:	08016251 	.word	0x08016251
 80136b0:	080162d1 	.word	0x080162d1

080136b4 <_Bfree>:
 80136b4:	b570      	push	{r4, r5, r6, lr}
 80136b6:	69c6      	ldr	r6, [r0, #28]
 80136b8:	4605      	mov	r5, r0
 80136ba:	460c      	mov	r4, r1
 80136bc:	b976      	cbnz	r6, 80136dc <_Bfree+0x28>
 80136be:	2010      	movs	r0, #16
 80136c0:	f7fe fa0a 	bl	8011ad8 <malloc>
 80136c4:	4602      	mov	r2, r0
 80136c6:	61e8      	str	r0, [r5, #28]
 80136c8:	b920      	cbnz	r0, 80136d4 <_Bfree+0x20>
 80136ca:	4b09      	ldr	r3, [pc, #36]	@ (80136f0 <_Bfree+0x3c>)
 80136cc:	4809      	ldr	r0, [pc, #36]	@ (80136f4 <_Bfree+0x40>)
 80136ce:	218f      	movs	r1, #143	@ 0x8f
 80136d0:	f000 fd5e 	bl	8014190 <__assert_func>
 80136d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80136d8:	6006      	str	r6, [r0, #0]
 80136da:	60c6      	str	r6, [r0, #12]
 80136dc:	b13c      	cbz	r4, 80136ee <_Bfree+0x3a>
 80136de:	69eb      	ldr	r3, [r5, #28]
 80136e0:	6862      	ldr	r2, [r4, #4]
 80136e2:	68db      	ldr	r3, [r3, #12]
 80136e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80136e8:	6021      	str	r1, [r4, #0]
 80136ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80136ee:	bd70      	pop	{r4, r5, r6, pc}
 80136f0:	08016251 	.word	0x08016251
 80136f4:	080162d1 	.word	0x080162d1

080136f8 <__multadd>:
 80136f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136fc:	690d      	ldr	r5, [r1, #16]
 80136fe:	4607      	mov	r7, r0
 8013700:	460c      	mov	r4, r1
 8013702:	461e      	mov	r6, r3
 8013704:	f101 0c14 	add.w	ip, r1, #20
 8013708:	2000      	movs	r0, #0
 801370a:	f8dc 3000 	ldr.w	r3, [ip]
 801370e:	b299      	uxth	r1, r3
 8013710:	fb02 6101 	mla	r1, r2, r1, r6
 8013714:	0c1e      	lsrs	r6, r3, #16
 8013716:	0c0b      	lsrs	r3, r1, #16
 8013718:	fb02 3306 	mla	r3, r2, r6, r3
 801371c:	b289      	uxth	r1, r1
 801371e:	3001      	adds	r0, #1
 8013720:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013724:	4285      	cmp	r5, r0
 8013726:	f84c 1b04 	str.w	r1, [ip], #4
 801372a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801372e:	dcec      	bgt.n	801370a <__multadd+0x12>
 8013730:	b30e      	cbz	r6, 8013776 <__multadd+0x7e>
 8013732:	68a3      	ldr	r3, [r4, #8]
 8013734:	42ab      	cmp	r3, r5
 8013736:	dc19      	bgt.n	801376c <__multadd+0x74>
 8013738:	6861      	ldr	r1, [r4, #4]
 801373a:	4638      	mov	r0, r7
 801373c:	3101      	adds	r1, #1
 801373e:	f7ff ff79 	bl	8013634 <_Balloc>
 8013742:	4680      	mov	r8, r0
 8013744:	b928      	cbnz	r0, 8013752 <__multadd+0x5a>
 8013746:	4602      	mov	r2, r0
 8013748:	4b0c      	ldr	r3, [pc, #48]	@ (801377c <__multadd+0x84>)
 801374a:	480d      	ldr	r0, [pc, #52]	@ (8013780 <__multadd+0x88>)
 801374c:	21ba      	movs	r1, #186	@ 0xba
 801374e:	f000 fd1f 	bl	8014190 <__assert_func>
 8013752:	6922      	ldr	r2, [r4, #16]
 8013754:	3202      	adds	r2, #2
 8013756:	f104 010c 	add.w	r1, r4, #12
 801375a:	0092      	lsls	r2, r2, #2
 801375c:	300c      	adds	r0, #12
 801375e:	f000 fd09 	bl	8014174 <memcpy>
 8013762:	4621      	mov	r1, r4
 8013764:	4638      	mov	r0, r7
 8013766:	f7ff ffa5 	bl	80136b4 <_Bfree>
 801376a:	4644      	mov	r4, r8
 801376c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013770:	3501      	adds	r5, #1
 8013772:	615e      	str	r6, [r3, #20]
 8013774:	6125      	str	r5, [r4, #16]
 8013776:	4620      	mov	r0, r4
 8013778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801377c:	080162c0 	.word	0x080162c0
 8013780:	080162d1 	.word	0x080162d1

08013784 <__hi0bits>:
 8013784:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013788:	4603      	mov	r3, r0
 801378a:	bf36      	itet	cc
 801378c:	0403      	lslcc	r3, r0, #16
 801378e:	2000      	movcs	r0, #0
 8013790:	2010      	movcc	r0, #16
 8013792:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013796:	bf3c      	itt	cc
 8013798:	021b      	lslcc	r3, r3, #8
 801379a:	3008      	addcc	r0, #8
 801379c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80137a0:	bf3c      	itt	cc
 80137a2:	011b      	lslcc	r3, r3, #4
 80137a4:	3004      	addcc	r0, #4
 80137a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80137aa:	bf3c      	itt	cc
 80137ac:	009b      	lslcc	r3, r3, #2
 80137ae:	3002      	addcc	r0, #2
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	db05      	blt.n	80137c0 <__hi0bits+0x3c>
 80137b4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80137b8:	f100 0001 	add.w	r0, r0, #1
 80137bc:	bf08      	it	eq
 80137be:	2020      	moveq	r0, #32
 80137c0:	4770      	bx	lr

080137c2 <__lo0bits>:
 80137c2:	6803      	ldr	r3, [r0, #0]
 80137c4:	4602      	mov	r2, r0
 80137c6:	f013 0007 	ands.w	r0, r3, #7
 80137ca:	d00b      	beq.n	80137e4 <__lo0bits+0x22>
 80137cc:	07d9      	lsls	r1, r3, #31
 80137ce:	d421      	bmi.n	8013814 <__lo0bits+0x52>
 80137d0:	0798      	lsls	r0, r3, #30
 80137d2:	bf49      	itett	mi
 80137d4:	085b      	lsrmi	r3, r3, #1
 80137d6:	089b      	lsrpl	r3, r3, #2
 80137d8:	2001      	movmi	r0, #1
 80137da:	6013      	strmi	r3, [r2, #0]
 80137dc:	bf5c      	itt	pl
 80137de:	6013      	strpl	r3, [r2, #0]
 80137e0:	2002      	movpl	r0, #2
 80137e2:	4770      	bx	lr
 80137e4:	b299      	uxth	r1, r3
 80137e6:	b909      	cbnz	r1, 80137ec <__lo0bits+0x2a>
 80137e8:	0c1b      	lsrs	r3, r3, #16
 80137ea:	2010      	movs	r0, #16
 80137ec:	b2d9      	uxtb	r1, r3
 80137ee:	b909      	cbnz	r1, 80137f4 <__lo0bits+0x32>
 80137f0:	3008      	adds	r0, #8
 80137f2:	0a1b      	lsrs	r3, r3, #8
 80137f4:	0719      	lsls	r1, r3, #28
 80137f6:	bf04      	itt	eq
 80137f8:	091b      	lsreq	r3, r3, #4
 80137fa:	3004      	addeq	r0, #4
 80137fc:	0799      	lsls	r1, r3, #30
 80137fe:	bf04      	itt	eq
 8013800:	089b      	lsreq	r3, r3, #2
 8013802:	3002      	addeq	r0, #2
 8013804:	07d9      	lsls	r1, r3, #31
 8013806:	d403      	bmi.n	8013810 <__lo0bits+0x4e>
 8013808:	085b      	lsrs	r3, r3, #1
 801380a:	f100 0001 	add.w	r0, r0, #1
 801380e:	d003      	beq.n	8013818 <__lo0bits+0x56>
 8013810:	6013      	str	r3, [r2, #0]
 8013812:	4770      	bx	lr
 8013814:	2000      	movs	r0, #0
 8013816:	4770      	bx	lr
 8013818:	2020      	movs	r0, #32
 801381a:	4770      	bx	lr

0801381c <__i2b>:
 801381c:	b510      	push	{r4, lr}
 801381e:	460c      	mov	r4, r1
 8013820:	2101      	movs	r1, #1
 8013822:	f7ff ff07 	bl	8013634 <_Balloc>
 8013826:	4602      	mov	r2, r0
 8013828:	b928      	cbnz	r0, 8013836 <__i2b+0x1a>
 801382a:	4b05      	ldr	r3, [pc, #20]	@ (8013840 <__i2b+0x24>)
 801382c:	4805      	ldr	r0, [pc, #20]	@ (8013844 <__i2b+0x28>)
 801382e:	f240 1145 	movw	r1, #325	@ 0x145
 8013832:	f000 fcad 	bl	8014190 <__assert_func>
 8013836:	2301      	movs	r3, #1
 8013838:	6144      	str	r4, [r0, #20]
 801383a:	6103      	str	r3, [r0, #16]
 801383c:	bd10      	pop	{r4, pc}
 801383e:	bf00      	nop
 8013840:	080162c0 	.word	0x080162c0
 8013844:	080162d1 	.word	0x080162d1

08013848 <__multiply>:
 8013848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801384c:	4614      	mov	r4, r2
 801384e:	690a      	ldr	r2, [r1, #16]
 8013850:	6923      	ldr	r3, [r4, #16]
 8013852:	429a      	cmp	r2, r3
 8013854:	bfa8      	it	ge
 8013856:	4623      	movge	r3, r4
 8013858:	460f      	mov	r7, r1
 801385a:	bfa4      	itt	ge
 801385c:	460c      	movge	r4, r1
 801385e:	461f      	movge	r7, r3
 8013860:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013864:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013868:	68a3      	ldr	r3, [r4, #8]
 801386a:	6861      	ldr	r1, [r4, #4]
 801386c:	eb0a 0609 	add.w	r6, sl, r9
 8013870:	42b3      	cmp	r3, r6
 8013872:	b085      	sub	sp, #20
 8013874:	bfb8      	it	lt
 8013876:	3101      	addlt	r1, #1
 8013878:	f7ff fedc 	bl	8013634 <_Balloc>
 801387c:	b930      	cbnz	r0, 801388c <__multiply+0x44>
 801387e:	4602      	mov	r2, r0
 8013880:	4b44      	ldr	r3, [pc, #272]	@ (8013994 <__multiply+0x14c>)
 8013882:	4845      	ldr	r0, [pc, #276]	@ (8013998 <__multiply+0x150>)
 8013884:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013888:	f000 fc82 	bl	8014190 <__assert_func>
 801388c:	f100 0514 	add.w	r5, r0, #20
 8013890:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013894:	462b      	mov	r3, r5
 8013896:	2200      	movs	r2, #0
 8013898:	4543      	cmp	r3, r8
 801389a:	d321      	bcc.n	80138e0 <__multiply+0x98>
 801389c:	f107 0114 	add.w	r1, r7, #20
 80138a0:	f104 0214 	add.w	r2, r4, #20
 80138a4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80138a8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80138ac:	9302      	str	r3, [sp, #8]
 80138ae:	1b13      	subs	r3, r2, r4
 80138b0:	3b15      	subs	r3, #21
 80138b2:	f023 0303 	bic.w	r3, r3, #3
 80138b6:	3304      	adds	r3, #4
 80138b8:	f104 0715 	add.w	r7, r4, #21
 80138bc:	42ba      	cmp	r2, r7
 80138be:	bf38      	it	cc
 80138c0:	2304      	movcc	r3, #4
 80138c2:	9301      	str	r3, [sp, #4]
 80138c4:	9b02      	ldr	r3, [sp, #8]
 80138c6:	9103      	str	r1, [sp, #12]
 80138c8:	428b      	cmp	r3, r1
 80138ca:	d80c      	bhi.n	80138e6 <__multiply+0x9e>
 80138cc:	2e00      	cmp	r6, #0
 80138ce:	dd03      	ble.n	80138d8 <__multiply+0x90>
 80138d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d05b      	beq.n	8013990 <__multiply+0x148>
 80138d8:	6106      	str	r6, [r0, #16]
 80138da:	b005      	add	sp, #20
 80138dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138e0:	f843 2b04 	str.w	r2, [r3], #4
 80138e4:	e7d8      	b.n	8013898 <__multiply+0x50>
 80138e6:	f8b1 a000 	ldrh.w	sl, [r1]
 80138ea:	f1ba 0f00 	cmp.w	sl, #0
 80138ee:	d024      	beq.n	801393a <__multiply+0xf2>
 80138f0:	f104 0e14 	add.w	lr, r4, #20
 80138f4:	46a9      	mov	r9, r5
 80138f6:	f04f 0c00 	mov.w	ip, #0
 80138fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80138fe:	f8d9 3000 	ldr.w	r3, [r9]
 8013902:	fa1f fb87 	uxth.w	fp, r7
 8013906:	b29b      	uxth	r3, r3
 8013908:	fb0a 330b 	mla	r3, sl, fp, r3
 801390c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013910:	f8d9 7000 	ldr.w	r7, [r9]
 8013914:	4463      	add	r3, ip
 8013916:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801391a:	fb0a c70b 	mla	r7, sl, fp, ip
 801391e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013922:	b29b      	uxth	r3, r3
 8013924:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013928:	4572      	cmp	r2, lr
 801392a:	f849 3b04 	str.w	r3, [r9], #4
 801392e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013932:	d8e2      	bhi.n	80138fa <__multiply+0xb2>
 8013934:	9b01      	ldr	r3, [sp, #4]
 8013936:	f845 c003 	str.w	ip, [r5, r3]
 801393a:	9b03      	ldr	r3, [sp, #12]
 801393c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013940:	3104      	adds	r1, #4
 8013942:	f1b9 0f00 	cmp.w	r9, #0
 8013946:	d021      	beq.n	801398c <__multiply+0x144>
 8013948:	682b      	ldr	r3, [r5, #0]
 801394a:	f104 0c14 	add.w	ip, r4, #20
 801394e:	46ae      	mov	lr, r5
 8013950:	f04f 0a00 	mov.w	sl, #0
 8013954:	f8bc b000 	ldrh.w	fp, [ip]
 8013958:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801395c:	fb09 770b 	mla	r7, r9, fp, r7
 8013960:	4457      	add	r7, sl
 8013962:	b29b      	uxth	r3, r3
 8013964:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013968:	f84e 3b04 	str.w	r3, [lr], #4
 801396c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013970:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013974:	f8be 3000 	ldrh.w	r3, [lr]
 8013978:	fb09 330a 	mla	r3, r9, sl, r3
 801397c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013980:	4562      	cmp	r2, ip
 8013982:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013986:	d8e5      	bhi.n	8013954 <__multiply+0x10c>
 8013988:	9f01      	ldr	r7, [sp, #4]
 801398a:	51eb      	str	r3, [r5, r7]
 801398c:	3504      	adds	r5, #4
 801398e:	e799      	b.n	80138c4 <__multiply+0x7c>
 8013990:	3e01      	subs	r6, #1
 8013992:	e79b      	b.n	80138cc <__multiply+0x84>
 8013994:	080162c0 	.word	0x080162c0
 8013998:	080162d1 	.word	0x080162d1

0801399c <__pow5mult>:
 801399c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80139a0:	4615      	mov	r5, r2
 80139a2:	f012 0203 	ands.w	r2, r2, #3
 80139a6:	4607      	mov	r7, r0
 80139a8:	460e      	mov	r6, r1
 80139aa:	d007      	beq.n	80139bc <__pow5mult+0x20>
 80139ac:	4c25      	ldr	r4, [pc, #148]	@ (8013a44 <__pow5mult+0xa8>)
 80139ae:	3a01      	subs	r2, #1
 80139b0:	2300      	movs	r3, #0
 80139b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80139b6:	f7ff fe9f 	bl	80136f8 <__multadd>
 80139ba:	4606      	mov	r6, r0
 80139bc:	10ad      	asrs	r5, r5, #2
 80139be:	d03d      	beq.n	8013a3c <__pow5mult+0xa0>
 80139c0:	69fc      	ldr	r4, [r7, #28]
 80139c2:	b97c      	cbnz	r4, 80139e4 <__pow5mult+0x48>
 80139c4:	2010      	movs	r0, #16
 80139c6:	f7fe f887 	bl	8011ad8 <malloc>
 80139ca:	4602      	mov	r2, r0
 80139cc:	61f8      	str	r0, [r7, #28]
 80139ce:	b928      	cbnz	r0, 80139dc <__pow5mult+0x40>
 80139d0:	4b1d      	ldr	r3, [pc, #116]	@ (8013a48 <__pow5mult+0xac>)
 80139d2:	481e      	ldr	r0, [pc, #120]	@ (8013a4c <__pow5mult+0xb0>)
 80139d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80139d8:	f000 fbda 	bl	8014190 <__assert_func>
 80139dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80139e0:	6004      	str	r4, [r0, #0]
 80139e2:	60c4      	str	r4, [r0, #12]
 80139e4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80139e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80139ec:	b94c      	cbnz	r4, 8013a02 <__pow5mult+0x66>
 80139ee:	f240 2171 	movw	r1, #625	@ 0x271
 80139f2:	4638      	mov	r0, r7
 80139f4:	f7ff ff12 	bl	801381c <__i2b>
 80139f8:	2300      	movs	r3, #0
 80139fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80139fe:	4604      	mov	r4, r0
 8013a00:	6003      	str	r3, [r0, #0]
 8013a02:	f04f 0900 	mov.w	r9, #0
 8013a06:	07eb      	lsls	r3, r5, #31
 8013a08:	d50a      	bpl.n	8013a20 <__pow5mult+0x84>
 8013a0a:	4631      	mov	r1, r6
 8013a0c:	4622      	mov	r2, r4
 8013a0e:	4638      	mov	r0, r7
 8013a10:	f7ff ff1a 	bl	8013848 <__multiply>
 8013a14:	4631      	mov	r1, r6
 8013a16:	4680      	mov	r8, r0
 8013a18:	4638      	mov	r0, r7
 8013a1a:	f7ff fe4b 	bl	80136b4 <_Bfree>
 8013a1e:	4646      	mov	r6, r8
 8013a20:	106d      	asrs	r5, r5, #1
 8013a22:	d00b      	beq.n	8013a3c <__pow5mult+0xa0>
 8013a24:	6820      	ldr	r0, [r4, #0]
 8013a26:	b938      	cbnz	r0, 8013a38 <__pow5mult+0x9c>
 8013a28:	4622      	mov	r2, r4
 8013a2a:	4621      	mov	r1, r4
 8013a2c:	4638      	mov	r0, r7
 8013a2e:	f7ff ff0b 	bl	8013848 <__multiply>
 8013a32:	6020      	str	r0, [r4, #0]
 8013a34:	f8c0 9000 	str.w	r9, [r0]
 8013a38:	4604      	mov	r4, r0
 8013a3a:	e7e4      	b.n	8013a06 <__pow5mult+0x6a>
 8013a3c:	4630      	mov	r0, r6
 8013a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a42:	bf00      	nop
 8013a44:	0801632c 	.word	0x0801632c
 8013a48:	08016251 	.word	0x08016251
 8013a4c:	080162d1 	.word	0x080162d1

08013a50 <__lshift>:
 8013a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a54:	460c      	mov	r4, r1
 8013a56:	6849      	ldr	r1, [r1, #4]
 8013a58:	6923      	ldr	r3, [r4, #16]
 8013a5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013a5e:	68a3      	ldr	r3, [r4, #8]
 8013a60:	4607      	mov	r7, r0
 8013a62:	4691      	mov	r9, r2
 8013a64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013a68:	f108 0601 	add.w	r6, r8, #1
 8013a6c:	42b3      	cmp	r3, r6
 8013a6e:	db0b      	blt.n	8013a88 <__lshift+0x38>
 8013a70:	4638      	mov	r0, r7
 8013a72:	f7ff fddf 	bl	8013634 <_Balloc>
 8013a76:	4605      	mov	r5, r0
 8013a78:	b948      	cbnz	r0, 8013a8e <__lshift+0x3e>
 8013a7a:	4602      	mov	r2, r0
 8013a7c:	4b28      	ldr	r3, [pc, #160]	@ (8013b20 <__lshift+0xd0>)
 8013a7e:	4829      	ldr	r0, [pc, #164]	@ (8013b24 <__lshift+0xd4>)
 8013a80:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013a84:	f000 fb84 	bl	8014190 <__assert_func>
 8013a88:	3101      	adds	r1, #1
 8013a8a:	005b      	lsls	r3, r3, #1
 8013a8c:	e7ee      	b.n	8013a6c <__lshift+0x1c>
 8013a8e:	2300      	movs	r3, #0
 8013a90:	f100 0114 	add.w	r1, r0, #20
 8013a94:	f100 0210 	add.w	r2, r0, #16
 8013a98:	4618      	mov	r0, r3
 8013a9a:	4553      	cmp	r3, sl
 8013a9c:	db33      	blt.n	8013b06 <__lshift+0xb6>
 8013a9e:	6920      	ldr	r0, [r4, #16]
 8013aa0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013aa4:	f104 0314 	add.w	r3, r4, #20
 8013aa8:	f019 091f 	ands.w	r9, r9, #31
 8013aac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013ab0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013ab4:	d02b      	beq.n	8013b0e <__lshift+0xbe>
 8013ab6:	f1c9 0e20 	rsb	lr, r9, #32
 8013aba:	468a      	mov	sl, r1
 8013abc:	2200      	movs	r2, #0
 8013abe:	6818      	ldr	r0, [r3, #0]
 8013ac0:	fa00 f009 	lsl.w	r0, r0, r9
 8013ac4:	4310      	orrs	r0, r2
 8013ac6:	f84a 0b04 	str.w	r0, [sl], #4
 8013aca:	f853 2b04 	ldr.w	r2, [r3], #4
 8013ace:	459c      	cmp	ip, r3
 8013ad0:	fa22 f20e 	lsr.w	r2, r2, lr
 8013ad4:	d8f3      	bhi.n	8013abe <__lshift+0x6e>
 8013ad6:	ebac 0304 	sub.w	r3, ip, r4
 8013ada:	3b15      	subs	r3, #21
 8013adc:	f023 0303 	bic.w	r3, r3, #3
 8013ae0:	3304      	adds	r3, #4
 8013ae2:	f104 0015 	add.w	r0, r4, #21
 8013ae6:	4584      	cmp	ip, r0
 8013ae8:	bf38      	it	cc
 8013aea:	2304      	movcc	r3, #4
 8013aec:	50ca      	str	r2, [r1, r3]
 8013aee:	b10a      	cbz	r2, 8013af4 <__lshift+0xa4>
 8013af0:	f108 0602 	add.w	r6, r8, #2
 8013af4:	3e01      	subs	r6, #1
 8013af6:	4638      	mov	r0, r7
 8013af8:	612e      	str	r6, [r5, #16]
 8013afa:	4621      	mov	r1, r4
 8013afc:	f7ff fdda 	bl	80136b4 <_Bfree>
 8013b00:	4628      	mov	r0, r5
 8013b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b06:	f842 0f04 	str.w	r0, [r2, #4]!
 8013b0a:	3301      	adds	r3, #1
 8013b0c:	e7c5      	b.n	8013a9a <__lshift+0x4a>
 8013b0e:	3904      	subs	r1, #4
 8013b10:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b14:	f841 2f04 	str.w	r2, [r1, #4]!
 8013b18:	459c      	cmp	ip, r3
 8013b1a:	d8f9      	bhi.n	8013b10 <__lshift+0xc0>
 8013b1c:	e7ea      	b.n	8013af4 <__lshift+0xa4>
 8013b1e:	bf00      	nop
 8013b20:	080162c0 	.word	0x080162c0
 8013b24:	080162d1 	.word	0x080162d1

08013b28 <__mcmp>:
 8013b28:	690a      	ldr	r2, [r1, #16]
 8013b2a:	4603      	mov	r3, r0
 8013b2c:	6900      	ldr	r0, [r0, #16]
 8013b2e:	1a80      	subs	r0, r0, r2
 8013b30:	b530      	push	{r4, r5, lr}
 8013b32:	d10e      	bne.n	8013b52 <__mcmp+0x2a>
 8013b34:	3314      	adds	r3, #20
 8013b36:	3114      	adds	r1, #20
 8013b38:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013b3c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013b40:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013b44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013b48:	4295      	cmp	r5, r2
 8013b4a:	d003      	beq.n	8013b54 <__mcmp+0x2c>
 8013b4c:	d205      	bcs.n	8013b5a <__mcmp+0x32>
 8013b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8013b52:	bd30      	pop	{r4, r5, pc}
 8013b54:	42a3      	cmp	r3, r4
 8013b56:	d3f3      	bcc.n	8013b40 <__mcmp+0x18>
 8013b58:	e7fb      	b.n	8013b52 <__mcmp+0x2a>
 8013b5a:	2001      	movs	r0, #1
 8013b5c:	e7f9      	b.n	8013b52 <__mcmp+0x2a>
	...

08013b60 <__mdiff>:
 8013b60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b64:	4689      	mov	r9, r1
 8013b66:	4606      	mov	r6, r0
 8013b68:	4611      	mov	r1, r2
 8013b6a:	4648      	mov	r0, r9
 8013b6c:	4614      	mov	r4, r2
 8013b6e:	f7ff ffdb 	bl	8013b28 <__mcmp>
 8013b72:	1e05      	subs	r5, r0, #0
 8013b74:	d112      	bne.n	8013b9c <__mdiff+0x3c>
 8013b76:	4629      	mov	r1, r5
 8013b78:	4630      	mov	r0, r6
 8013b7a:	f7ff fd5b 	bl	8013634 <_Balloc>
 8013b7e:	4602      	mov	r2, r0
 8013b80:	b928      	cbnz	r0, 8013b8e <__mdiff+0x2e>
 8013b82:	4b3f      	ldr	r3, [pc, #252]	@ (8013c80 <__mdiff+0x120>)
 8013b84:	f240 2137 	movw	r1, #567	@ 0x237
 8013b88:	483e      	ldr	r0, [pc, #248]	@ (8013c84 <__mdiff+0x124>)
 8013b8a:	f000 fb01 	bl	8014190 <__assert_func>
 8013b8e:	2301      	movs	r3, #1
 8013b90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013b94:	4610      	mov	r0, r2
 8013b96:	b003      	add	sp, #12
 8013b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b9c:	bfbc      	itt	lt
 8013b9e:	464b      	movlt	r3, r9
 8013ba0:	46a1      	movlt	r9, r4
 8013ba2:	4630      	mov	r0, r6
 8013ba4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013ba8:	bfba      	itte	lt
 8013baa:	461c      	movlt	r4, r3
 8013bac:	2501      	movlt	r5, #1
 8013bae:	2500      	movge	r5, #0
 8013bb0:	f7ff fd40 	bl	8013634 <_Balloc>
 8013bb4:	4602      	mov	r2, r0
 8013bb6:	b918      	cbnz	r0, 8013bc0 <__mdiff+0x60>
 8013bb8:	4b31      	ldr	r3, [pc, #196]	@ (8013c80 <__mdiff+0x120>)
 8013bba:	f240 2145 	movw	r1, #581	@ 0x245
 8013bbe:	e7e3      	b.n	8013b88 <__mdiff+0x28>
 8013bc0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013bc4:	6926      	ldr	r6, [r4, #16]
 8013bc6:	60c5      	str	r5, [r0, #12]
 8013bc8:	f109 0310 	add.w	r3, r9, #16
 8013bcc:	f109 0514 	add.w	r5, r9, #20
 8013bd0:	f104 0e14 	add.w	lr, r4, #20
 8013bd4:	f100 0b14 	add.w	fp, r0, #20
 8013bd8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013bdc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013be0:	9301      	str	r3, [sp, #4]
 8013be2:	46d9      	mov	r9, fp
 8013be4:	f04f 0c00 	mov.w	ip, #0
 8013be8:	9b01      	ldr	r3, [sp, #4]
 8013bea:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013bee:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013bf2:	9301      	str	r3, [sp, #4]
 8013bf4:	fa1f f38a 	uxth.w	r3, sl
 8013bf8:	4619      	mov	r1, r3
 8013bfa:	b283      	uxth	r3, r0
 8013bfc:	1acb      	subs	r3, r1, r3
 8013bfe:	0c00      	lsrs	r0, r0, #16
 8013c00:	4463      	add	r3, ip
 8013c02:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013c06:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013c0a:	b29b      	uxth	r3, r3
 8013c0c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013c10:	4576      	cmp	r6, lr
 8013c12:	f849 3b04 	str.w	r3, [r9], #4
 8013c16:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013c1a:	d8e5      	bhi.n	8013be8 <__mdiff+0x88>
 8013c1c:	1b33      	subs	r3, r6, r4
 8013c1e:	3b15      	subs	r3, #21
 8013c20:	f023 0303 	bic.w	r3, r3, #3
 8013c24:	3415      	adds	r4, #21
 8013c26:	3304      	adds	r3, #4
 8013c28:	42a6      	cmp	r6, r4
 8013c2a:	bf38      	it	cc
 8013c2c:	2304      	movcc	r3, #4
 8013c2e:	441d      	add	r5, r3
 8013c30:	445b      	add	r3, fp
 8013c32:	461e      	mov	r6, r3
 8013c34:	462c      	mov	r4, r5
 8013c36:	4544      	cmp	r4, r8
 8013c38:	d30e      	bcc.n	8013c58 <__mdiff+0xf8>
 8013c3a:	f108 0103 	add.w	r1, r8, #3
 8013c3e:	1b49      	subs	r1, r1, r5
 8013c40:	f021 0103 	bic.w	r1, r1, #3
 8013c44:	3d03      	subs	r5, #3
 8013c46:	45a8      	cmp	r8, r5
 8013c48:	bf38      	it	cc
 8013c4a:	2100      	movcc	r1, #0
 8013c4c:	440b      	add	r3, r1
 8013c4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013c52:	b191      	cbz	r1, 8013c7a <__mdiff+0x11a>
 8013c54:	6117      	str	r7, [r2, #16]
 8013c56:	e79d      	b.n	8013b94 <__mdiff+0x34>
 8013c58:	f854 1b04 	ldr.w	r1, [r4], #4
 8013c5c:	46e6      	mov	lr, ip
 8013c5e:	0c08      	lsrs	r0, r1, #16
 8013c60:	fa1c fc81 	uxtah	ip, ip, r1
 8013c64:	4471      	add	r1, lr
 8013c66:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013c6a:	b289      	uxth	r1, r1
 8013c6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013c70:	f846 1b04 	str.w	r1, [r6], #4
 8013c74:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013c78:	e7dd      	b.n	8013c36 <__mdiff+0xd6>
 8013c7a:	3f01      	subs	r7, #1
 8013c7c:	e7e7      	b.n	8013c4e <__mdiff+0xee>
 8013c7e:	bf00      	nop
 8013c80:	080162c0 	.word	0x080162c0
 8013c84:	080162d1 	.word	0x080162d1

08013c88 <__d2b>:
 8013c88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013c8c:	460f      	mov	r7, r1
 8013c8e:	2101      	movs	r1, #1
 8013c90:	ec59 8b10 	vmov	r8, r9, d0
 8013c94:	4616      	mov	r6, r2
 8013c96:	f7ff fccd 	bl	8013634 <_Balloc>
 8013c9a:	4604      	mov	r4, r0
 8013c9c:	b930      	cbnz	r0, 8013cac <__d2b+0x24>
 8013c9e:	4602      	mov	r2, r0
 8013ca0:	4b23      	ldr	r3, [pc, #140]	@ (8013d30 <__d2b+0xa8>)
 8013ca2:	4824      	ldr	r0, [pc, #144]	@ (8013d34 <__d2b+0xac>)
 8013ca4:	f240 310f 	movw	r1, #783	@ 0x30f
 8013ca8:	f000 fa72 	bl	8014190 <__assert_func>
 8013cac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013cb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013cb4:	b10d      	cbz	r5, 8013cba <__d2b+0x32>
 8013cb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013cba:	9301      	str	r3, [sp, #4]
 8013cbc:	f1b8 0300 	subs.w	r3, r8, #0
 8013cc0:	d023      	beq.n	8013d0a <__d2b+0x82>
 8013cc2:	4668      	mov	r0, sp
 8013cc4:	9300      	str	r3, [sp, #0]
 8013cc6:	f7ff fd7c 	bl	80137c2 <__lo0bits>
 8013cca:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013cce:	b1d0      	cbz	r0, 8013d06 <__d2b+0x7e>
 8013cd0:	f1c0 0320 	rsb	r3, r0, #32
 8013cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8013cd8:	430b      	orrs	r3, r1
 8013cda:	40c2      	lsrs	r2, r0
 8013cdc:	6163      	str	r3, [r4, #20]
 8013cde:	9201      	str	r2, [sp, #4]
 8013ce0:	9b01      	ldr	r3, [sp, #4]
 8013ce2:	61a3      	str	r3, [r4, #24]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	bf0c      	ite	eq
 8013ce8:	2201      	moveq	r2, #1
 8013cea:	2202      	movne	r2, #2
 8013cec:	6122      	str	r2, [r4, #16]
 8013cee:	b1a5      	cbz	r5, 8013d1a <__d2b+0x92>
 8013cf0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013cf4:	4405      	add	r5, r0
 8013cf6:	603d      	str	r5, [r7, #0]
 8013cf8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013cfc:	6030      	str	r0, [r6, #0]
 8013cfe:	4620      	mov	r0, r4
 8013d00:	b003      	add	sp, #12
 8013d02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d06:	6161      	str	r1, [r4, #20]
 8013d08:	e7ea      	b.n	8013ce0 <__d2b+0x58>
 8013d0a:	a801      	add	r0, sp, #4
 8013d0c:	f7ff fd59 	bl	80137c2 <__lo0bits>
 8013d10:	9b01      	ldr	r3, [sp, #4]
 8013d12:	6163      	str	r3, [r4, #20]
 8013d14:	3020      	adds	r0, #32
 8013d16:	2201      	movs	r2, #1
 8013d18:	e7e8      	b.n	8013cec <__d2b+0x64>
 8013d1a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013d1e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013d22:	6038      	str	r0, [r7, #0]
 8013d24:	6918      	ldr	r0, [r3, #16]
 8013d26:	f7ff fd2d 	bl	8013784 <__hi0bits>
 8013d2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013d2e:	e7e5      	b.n	8013cfc <__d2b+0x74>
 8013d30:	080162c0 	.word	0x080162c0
 8013d34:	080162d1 	.word	0x080162d1

08013d38 <__ssputs_r>:
 8013d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d3c:	688e      	ldr	r6, [r1, #8]
 8013d3e:	461f      	mov	r7, r3
 8013d40:	42be      	cmp	r6, r7
 8013d42:	680b      	ldr	r3, [r1, #0]
 8013d44:	4682      	mov	sl, r0
 8013d46:	460c      	mov	r4, r1
 8013d48:	4690      	mov	r8, r2
 8013d4a:	d82d      	bhi.n	8013da8 <__ssputs_r+0x70>
 8013d4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013d50:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013d54:	d026      	beq.n	8013da4 <__ssputs_r+0x6c>
 8013d56:	6965      	ldr	r5, [r4, #20]
 8013d58:	6909      	ldr	r1, [r1, #16]
 8013d5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013d5e:	eba3 0901 	sub.w	r9, r3, r1
 8013d62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013d66:	1c7b      	adds	r3, r7, #1
 8013d68:	444b      	add	r3, r9
 8013d6a:	106d      	asrs	r5, r5, #1
 8013d6c:	429d      	cmp	r5, r3
 8013d6e:	bf38      	it	cc
 8013d70:	461d      	movcc	r5, r3
 8013d72:	0553      	lsls	r3, r2, #21
 8013d74:	d527      	bpl.n	8013dc6 <__ssputs_r+0x8e>
 8013d76:	4629      	mov	r1, r5
 8013d78:	f7fd fee0 	bl	8011b3c <_malloc_r>
 8013d7c:	4606      	mov	r6, r0
 8013d7e:	b360      	cbz	r0, 8013dda <__ssputs_r+0xa2>
 8013d80:	6921      	ldr	r1, [r4, #16]
 8013d82:	464a      	mov	r2, r9
 8013d84:	f000 f9f6 	bl	8014174 <memcpy>
 8013d88:	89a3      	ldrh	r3, [r4, #12]
 8013d8a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013d8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013d92:	81a3      	strh	r3, [r4, #12]
 8013d94:	6126      	str	r6, [r4, #16]
 8013d96:	6165      	str	r5, [r4, #20]
 8013d98:	444e      	add	r6, r9
 8013d9a:	eba5 0509 	sub.w	r5, r5, r9
 8013d9e:	6026      	str	r6, [r4, #0]
 8013da0:	60a5      	str	r5, [r4, #8]
 8013da2:	463e      	mov	r6, r7
 8013da4:	42be      	cmp	r6, r7
 8013da6:	d900      	bls.n	8013daa <__ssputs_r+0x72>
 8013da8:	463e      	mov	r6, r7
 8013daa:	6820      	ldr	r0, [r4, #0]
 8013dac:	4632      	mov	r2, r6
 8013dae:	4641      	mov	r1, r8
 8013db0:	f000 f9c6 	bl	8014140 <memmove>
 8013db4:	68a3      	ldr	r3, [r4, #8]
 8013db6:	1b9b      	subs	r3, r3, r6
 8013db8:	60a3      	str	r3, [r4, #8]
 8013dba:	6823      	ldr	r3, [r4, #0]
 8013dbc:	4433      	add	r3, r6
 8013dbe:	6023      	str	r3, [r4, #0]
 8013dc0:	2000      	movs	r0, #0
 8013dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013dc6:	462a      	mov	r2, r5
 8013dc8:	f000 fa26 	bl	8014218 <_realloc_r>
 8013dcc:	4606      	mov	r6, r0
 8013dce:	2800      	cmp	r0, #0
 8013dd0:	d1e0      	bne.n	8013d94 <__ssputs_r+0x5c>
 8013dd2:	6921      	ldr	r1, [r4, #16]
 8013dd4:	4650      	mov	r0, sl
 8013dd6:	f7ff fbe3 	bl	80135a0 <_free_r>
 8013dda:	230c      	movs	r3, #12
 8013ddc:	f8ca 3000 	str.w	r3, [sl]
 8013de0:	89a3      	ldrh	r3, [r4, #12]
 8013de2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013de6:	81a3      	strh	r3, [r4, #12]
 8013de8:	f04f 30ff 	mov.w	r0, #4294967295
 8013dec:	e7e9      	b.n	8013dc2 <__ssputs_r+0x8a>
	...

08013df0 <_svfiprintf_r>:
 8013df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013df4:	4698      	mov	r8, r3
 8013df6:	898b      	ldrh	r3, [r1, #12]
 8013df8:	061b      	lsls	r3, r3, #24
 8013dfa:	b09d      	sub	sp, #116	@ 0x74
 8013dfc:	4607      	mov	r7, r0
 8013dfe:	460d      	mov	r5, r1
 8013e00:	4614      	mov	r4, r2
 8013e02:	d510      	bpl.n	8013e26 <_svfiprintf_r+0x36>
 8013e04:	690b      	ldr	r3, [r1, #16]
 8013e06:	b973      	cbnz	r3, 8013e26 <_svfiprintf_r+0x36>
 8013e08:	2140      	movs	r1, #64	@ 0x40
 8013e0a:	f7fd fe97 	bl	8011b3c <_malloc_r>
 8013e0e:	6028      	str	r0, [r5, #0]
 8013e10:	6128      	str	r0, [r5, #16]
 8013e12:	b930      	cbnz	r0, 8013e22 <_svfiprintf_r+0x32>
 8013e14:	230c      	movs	r3, #12
 8013e16:	603b      	str	r3, [r7, #0]
 8013e18:	f04f 30ff 	mov.w	r0, #4294967295
 8013e1c:	b01d      	add	sp, #116	@ 0x74
 8013e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e22:	2340      	movs	r3, #64	@ 0x40
 8013e24:	616b      	str	r3, [r5, #20]
 8013e26:	2300      	movs	r3, #0
 8013e28:	9309      	str	r3, [sp, #36]	@ 0x24
 8013e2a:	2320      	movs	r3, #32
 8013e2c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013e30:	f8cd 800c 	str.w	r8, [sp, #12]
 8013e34:	2330      	movs	r3, #48	@ 0x30
 8013e36:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013fd4 <_svfiprintf_r+0x1e4>
 8013e3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013e3e:	f04f 0901 	mov.w	r9, #1
 8013e42:	4623      	mov	r3, r4
 8013e44:	469a      	mov	sl, r3
 8013e46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013e4a:	b10a      	cbz	r2, 8013e50 <_svfiprintf_r+0x60>
 8013e4c:	2a25      	cmp	r2, #37	@ 0x25
 8013e4e:	d1f9      	bne.n	8013e44 <_svfiprintf_r+0x54>
 8013e50:	ebba 0b04 	subs.w	fp, sl, r4
 8013e54:	d00b      	beq.n	8013e6e <_svfiprintf_r+0x7e>
 8013e56:	465b      	mov	r3, fp
 8013e58:	4622      	mov	r2, r4
 8013e5a:	4629      	mov	r1, r5
 8013e5c:	4638      	mov	r0, r7
 8013e5e:	f7ff ff6b 	bl	8013d38 <__ssputs_r>
 8013e62:	3001      	adds	r0, #1
 8013e64:	f000 80a7 	beq.w	8013fb6 <_svfiprintf_r+0x1c6>
 8013e68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013e6a:	445a      	add	r2, fp
 8013e6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8013e6e:	f89a 3000 	ldrb.w	r3, [sl]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	f000 809f 	beq.w	8013fb6 <_svfiprintf_r+0x1c6>
 8013e78:	2300      	movs	r3, #0
 8013e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8013e7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013e82:	f10a 0a01 	add.w	sl, sl, #1
 8013e86:	9304      	str	r3, [sp, #16]
 8013e88:	9307      	str	r3, [sp, #28]
 8013e8a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013e8e:	931a      	str	r3, [sp, #104]	@ 0x68
 8013e90:	4654      	mov	r4, sl
 8013e92:	2205      	movs	r2, #5
 8013e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e98:	484e      	ldr	r0, [pc, #312]	@ (8013fd4 <_svfiprintf_r+0x1e4>)
 8013e9a:	f7ec f9a1 	bl	80001e0 <memchr>
 8013e9e:	9a04      	ldr	r2, [sp, #16]
 8013ea0:	b9d8      	cbnz	r0, 8013eda <_svfiprintf_r+0xea>
 8013ea2:	06d0      	lsls	r0, r2, #27
 8013ea4:	bf44      	itt	mi
 8013ea6:	2320      	movmi	r3, #32
 8013ea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013eac:	0711      	lsls	r1, r2, #28
 8013eae:	bf44      	itt	mi
 8013eb0:	232b      	movmi	r3, #43	@ 0x2b
 8013eb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013eb6:	f89a 3000 	ldrb.w	r3, [sl]
 8013eba:	2b2a      	cmp	r3, #42	@ 0x2a
 8013ebc:	d015      	beq.n	8013eea <_svfiprintf_r+0xfa>
 8013ebe:	9a07      	ldr	r2, [sp, #28]
 8013ec0:	4654      	mov	r4, sl
 8013ec2:	2000      	movs	r0, #0
 8013ec4:	f04f 0c0a 	mov.w	ip, #10
 8013ec8:	4621      	mov	r1, r4
 8013eca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013ece:	3b30      	subs	r3, #48	@ 0x30
 8013ed0:	2b09      	cmp	r3, #9
 8013ed2:	d94b      	bls.n	8013f6c <_svfiprintf_r+0x17c>
 8013ed4:	b1b0      	cbz	r0, 8013f04 <_svfiprintf_r+0x114>
 8013ed6:	9207      	str	r2, [sp, #28]
 8013ed8:	e014      	b.n	8013f04 <_svfiprintf_r+0x114>
 8013eda:	eba0 0308 	sub.w	r3, r0, r8
 8013ede:	fa09 f303 	lsl.w	r3, r9, r3
 8013ee2:	4313      	orrs	r3, r2
 8013ee4:	9304      	str	r3, [sp, #16]
 8013ee6:	46a2      	mov	sl, r4
 8013ee8:	e7d2      	b.n	8013e90 <_svfiprintf_r+0xa0>
 8013eea:	9b03      	ldr	r3, [sp, #12]
 8013eec:	1d19      	adds	r1, r3, #4
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	9103      	str	r1, [sp, #12]
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	bfbb      	ittet	lt
 8013ef6:	425b      	neglt	r3, r3
 8013ef8:	f042 0202 	orrlt.w	r2, r2, #2
 8013efc:	9307      	strge	r3, [sp, #28]
 8013efe:	9307      	strlt	r3, [sp, #28]
 8013f00:	bfb8      	it	lt
 8013f02:	9204      	strlt	r2, [sp, #16]
 8013f04:	7823      	ldrb	r3, [r4, #0]
 8013f06:	2b2e      	cmp	r3, #46	@ 0x2e
 8013f08:	d10a      	bne.n	8013f20 <_svfiprintf_r+0x130>
 8013f0a:	7863      	ldrb	r3, [r4, #1]
 8013f0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8013f0e:	d132      	bne.n	8013f76 <_svfiprintf_r+0x186>
 8013f10:	9b03      	ldr	r3, [sp, #12]
 8013f12:	1d1a      	adds	r2, r3, #4
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	9203      	str	r2, [sp, #12]
 8013f18:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013f1c:	3402      	adds	r4, #2
 8013f1e:	9305      	str	r3, [sp, #20]
 8013f20:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013fe4 <_svfiprintf_r+0x1f4>
 8013f24:	7821      	ldrb	r1, [r4, #0]
 8013f26:	2203      	movs	r2, #3
 8013f28:	4650      	mov	r0, sl
 8013f2a:	f7ec f959 	bl	80001e0 <memchr>
 8013f2e:	b138      	cbz	r0, 8013f40 <_svfiprintf_r+0x150>
 8013f30:	9b04      	ldr	r3, [sp, #16]
 8013f32:	eba0 000a 	sub.w	r0, r0, sl
 8013f36:	2240      	movs	r2, #64	@ 0x40
 8013f38:	4082      	lsls	r2, r0
 8013f3a:	4313      	orrs	r3, r2
 8013f3c:	3401      	adds	r4, #1
 8013f3e:	9304      	str	r3, [sp, #16]
 8013f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f44:	4824      	ldr	r0, [pc, #144]	@ (8013fd8 <_svfiprintf_r+0x1e8>)
 8013f46:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013f4a:	2206      	movs	r2, #6
 8013f4c:	f7ec f948 	bl	80001e0 <memchr>
 8013f50:	2800      	cmp	r0, #0
 8013f52:	d036      	beq.n	8013fc2 <_svfiprintf_r+0x1d2>
 8013f54:	4b21      	ldr	r3, [pc, #132]	@ (8013fdc <_svfiprintf_r+0x1ec>)
 8013f56:	bb1b      	cbnz	r3, 8013fa0 <_svfiprintf_r+0x1b0>
 8013f58:	9b03      	ldr	r3, [sp, #12]
 8013f5a:	3307      	adds	r3, #7
 8013f5c:	f023 0307 	bic.w	r3, r3, #7
 8013f60:	3308      	adds	r3, #8
 8013f62:	9303      	str	r3, [sp, #12]
 8013f64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f66:	4433      	add	r3, r6
 8013f68:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f6a:	e76a      	b.n	8013e42 <_svfiprintf_r+0x52>
 8013f6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8013f70:	460c      	mov	r4, r1
 8013f72:	2001      	movs	r0, #1
 8013f74:	e7a8      	b.n	8013ec8 <_svfiprintf_r+0xd8>
 8013f76:	2300      	movs	r3, #0
 8013f78:	3401      	adds	r4, #1
 8013f7a:	9305      	str	r3, [sp, #20]
 8013f7c:	4619      	mov	r1, r3
 8013f7e:	f04f 0c0a 	mov.w	ip, #10
 8013f82:	4620      	mov	r0, r4
 8013f84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013f88:	3a30      	subs	r2, #48	@ 0x30
 8013f8a:	2a09      	cmp	r2, #9
 8013f8c:	d903      	bls.n	8013f96 <_svfiprintf_r+0x1a6>
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d0c6      	beq.n	8013f20 <_svfiprintf_r+0x130>
 8013f92:	9105      	str	r1, [sp, #20]
 8013f94:	e7c4      	b.n	8013f20 <_svfiprintf_r+0x130>
 8013f96:	fb0c 2101 	mla	r1, ip, r1, r2
 8013f9a:	4604      	mov	r4, r0
 8013f9c:	2301      	movs	r3, #1
 8013f9e:	e7f0      	b.n	8013f82 <_svfiprintf_r+0x192>
 8013fa0:	ab03      	add	r3, sp, #12
 8013fa2:	9300      	str	r3, [sp, #0]
 8013fa4:	462a      	mov	r2, r5
 8013fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8013fe0 <_svfiprintf_r+0x1f0>)
 8013fa8:	a904      	add	r1, sp, #16
 8013faa:	4638      	mov	r0, r7
 8013fac:	f7fd fef2 	bl	8011d94 <_printf_float>
 8013fb0:	1c42      	adds	r2, r0, #1
 8013fb2:	4606      	mov	r6, r0
 8013fb4:	d1d6      	bne.n	8013f64 <_svfiprintf_r+0x174>
 8013fb6:	89ab      	ldrh	r3, [r5, #12]
 8013fb8:	065b      	lsls	r3, r3, #25
 8013fba:	f53f af2d 	bmi.w	8013e18 <_svfiprintf_r+0x28>
 8013fbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013fc0:	e72c      	b.n	8013e1c <_svfiprintf_r+0x2c>
 8013fc2:	ab03      	add	r3, sp, #12
 8013fc4:	9300      	str	r3, [sp, #0]
 8013fc6:	462a      	mov	r2, r5
 8013fc8:	4b05      	ldr	r3, [pc, #20]	@ (8013fe0 <_svfiprintf_r+0x1f0>)
 8013fca:	a904      	add	r1, sp, #16
 8013fcc:	4638      	mov	r0, r7
 8013fce:	f7fe f979 	bl	80122c4 <_printf_i>
 8013fd2:	e7ed      	b.n	8013fb0 <_svfiprintf_r+0x1c0>
 8013fd4:	08016428 	.word	0x08016428
 8013fd8:	08016432 	.word	0x08016432
 8013fdc:	08011d95 	.word	0x08011d95
 8013fe0:	08013d39 	.word	0x08013d39
 8013fe4:	0801642e 	.word	0x0801642e

08013fe8 <__sflush_r>:
 8013fe8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ff0:	0716      	lsls	r6, r2, #28
 8013ff2:	4605      	mov	r5, r0
 8013ff4:	460c      	mov	r4, r1
 8013ff6:	d454      	bmi.n	80140a2 <__sflush_r+0xba>
 8013ff8:	684b      	ldr	r3, [r1, #4]
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	dc02      	bgt.n	8014004 <__sflush_r+0x1c>
 8013ffe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014000:	2b00      	cmp	r3, #0
 8014002:	dd48      	ble.n	8014096 <__sflush_r+0xae>
 8014004:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014006:	2e00      	cmp	r6, #0
 8014008:	d045      	beq.n	8014096 <__sflush_r+0xae>
 801400a:	2300      	movs	r3, #0
 801400c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014010:	682f      	ldr	r7, [r5, #0]
 8014012:	6a21      	ldr	r1, [r4, #32]
 8014014:	602b      	str	r3, [r5, #0]
 8014016:	d030      	beq.n	801407a <__sflush_r+0x92>
 8014018:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801401a:	89a3      	ldrh	r3, [r4, #12]
 801401c:	0759      	lsls	r1, r3, #29
 801401e:	d505      	bpl.n	801402c <__sflush_r+0x44>
 8014020:	6863      	ldr	r3, [r4, #4]
 8014022:	1ad2      	subs	r2, r2, r3
 8014024:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014026:	b10b      	cbz	r3, 801402c <__sflush_r+0x44>
 8014028:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801402a:	1ad2      	subs	r2, r2, r3
 801402c:	2300      	movs	r3, #0
 801402e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014030:	6a21      	ldr	r1, [r4, #32]
 8014032:	4628      	mov	r0, r5
 8014034:	47b0      	blx	r6
 8014036:	1c43      	adds	r3, r0, #1
 8014038:	89a3      	ldrh	r3, [r4, #12]
 801403a:	d106      	bne.n	801404a <__sflush_r+0x62>
 801403c:	6829      	ldr	r1, [r5, #0]
 801403e:	291d      	cmp	r1, #29
 8014040:	d82b      	bhi.n	801409a <__sflush_r+0xb2>
 8014042:	4a2a      	ldr	r2, [pc, #168]	@ (80140ec <__sflush_r+0x104>)
 8014044:	410a      	asrs	r2, r1
 8014046:	07d6      	lsls	r6, r2, #31
 8014048:	d427      	bmi.n	801409a <__sflush_r+0xb2>
 801404a:	2200      	movs	r2, #0
 801404c:	6062      	str	r2, [r4, #4]
 801404e:	04d9      	lsls	r1, r3, #19
 8014050:	6922      	ldr	r2, [r4, #16]
 8014052:	6022      	str	r2, [r4, #0]
 8014054:	d504      	bpl.n	8014060 <__sflush_r+0x78>
 8014056:	1c42      	adds	r2, r0, #1
 8014058:	d101      	bne.n	801405e <__sflush_r+0x76>
 801405a:	682b      	ldr	r3, [r5, #0]
 801405c:	b903      	cbnz	r3, 8014060 <__sflush_r+0x78>
 801405e:	6560      	str	r0, [r4, #84]	@ 0x54
 8014060:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014062:	602f      	str	r7, [r5, #0]
 8014064:	b1b9      	cbz	r1, 8014096 <__sflush_r+0xae>
 8014066:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801406a:	4299      	cmp	r1, r3
 801406c:	d002      	beq.n	8014074 <__sflush_r+0x8c>
 801406e:	4628      	mov	r0, r5
 8014070:	f7ff fa96 	bl	80135a0 <_free_r>
 8014074:	2300      	movs	r3, #0
 8014076:	6363      	str	r3, [r4, #52]	@ 0x34
 8014078:	e00d      	b.n	8014096 <__sflush_r+0xae>
 801407a:	2301      	movs	r3, #1
 801407c:	4628      	mov	r0, r5
 801407e:	47b0      	blx	r6
 8014080:	4602      	mov	r2, r0
 8014082:	1c50      	adds	r0, r2, #1
 8014084:	d1c9      	bne.n	801401a <__sflush_r+0x32>
 8014086:	682b      	ldr	r3, [r5, #0]
 8014088:	2b00      	cmp	r3, #0
 801408a:	d0c6      	beq.n	801401a <__sflush_r+0x32>
 801408c:	2b1d      	cmp	r3, #29
 801408e:	d001      	beq.n	8014094 <__sflush_r+0xac>
 8014090:	2b16      	cmp	r3, #22
 8014092:	d11e      	bne.n	80140d2 <__sflush_r+0xea>
 8014094:	602f      	str	r7, [r5, #0]
 8014096:	2000      	movs	r0, #0
 8014098:	e022      	b.n	80140e0 <__sflush_r+0xf8>
 801409a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801409e:	b21b      	sxth	r3, r3
 80140a0:	e01b      	b.n	80140da <__sflush_r+0xf2>
 80140a2:	690f      	ldr	r7, [r1, #16]
 80140a4:	2f00      	cmp	r7, #0
 80140a6:	d0f6      	beq.n	8014096 <__sflush_r+0xae>
 80140a8:	0793      	lsls	r3, r2, #30
 80140aa:	680e      	ldr	r6, [r1, #0]
 80140ac:	bf08      	it	eq
 80140ae:	694b      	ldreq	r3, [r1, #20]
 80140b0:	600f      	str	r7, [r1, #0]
 80140b2:	bf18      	it	ne
 80140b4:	2300      	movne	r3, #0
 80140b6:	eba6 0807 	sub.w	r8, r6, r7
 80140ba:	608b      	str	r3, [r1, #8]
 80140bc:	f1b8 0f00 	cmp.w	r8, #0
 80140c0:	dde9      	ble.n	8014096 <__sflush_r+0xae>
 80140c2:	6a21      	ldr	r1, [r4, #32]
 80140c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80140c6:	4643      	mov	r3, r8
 80140c8:	463a      	mov	r2, r7
 80140ca:	4628      	mov	r0, r5
 80140cc:	47b0      	blx	r6
 80140ce:	2800      	cmp	r0, #0
 80140d0:	dc08      	bgt.n	80140e4 <__sflush_r+0xfc>
 80140d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80140d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80140da:	81a3      	strh	r3, [r4, #12]
 80140dc:	f04f 30ff 	mov.w	r0, #4294967295
 80140e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140e4:	4407      	add	r7, r0
 80140e6:	eba8 0800 	sub.w	r8, r8, r0
 80140ea:	e7e7      	b.n	80140bc <__sflush_r+0xd4>
 80140ec:	dfbffffe 	.word	0xdfbffffe

080140f0 <_fflush_r>:
 80140f0:	b538      	push	{r3, r4, r5, lr}
 80140f2:	690b      	ldr	r3, [r1, #16]
 80140f4:	4605      	mov	r5, r0
 80140f6:	460c      	mov	r4, r1
 80140f8:	b913      	cbnz	r3, 8014100 <_fflush_r+0x10>
 80140fa:	2500      	movs	r5, #0
 80140fc:	4628      	mov	r0, r5
 80140fe:	bd38      	pop	{r3, r4, r5, pc}
 8014100:	b118      	cbz	r0, 801410a <_fflush_r+0x1a>
 8014102:	6a03      	ldr	r3, [r0, #32]
 8014104:	b90b      	cbnz	r3, 801410a <_fflush_r+0x1a>
 8014106:	f7fe fa89 	bl	801261c <__sinit>
 801410a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801410e:	2b00      	cmp	r3, #0
 8014110:	d0f3      	beq.n	80140fa <_fflush_r+0xa>
 8014112:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014114:	07d0      	lsls	r0, r2, #31
 8014116:	d404      	bmi.n	8014122 <_fflush_r+0x32>
 8014118:	0599      	lsls	r1, r3, #22
 801411a:	d402      	bmi.n	8014122 <_fflush_r+0x32>
 801411c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801411e:	f7fe fbe8 	bl	80128f2 <__retarget_lock_acquire_recursive>
 8014122:	4628      	mov	r0, r5
 8014124:	4621      	mov	r1, r4
 8014126:	f7ff ff5f 	bl	8013fe8 <__sflush_r>
 801412a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801412c:	07da      	lsls	r2, r3, #31
 801412e:	4605      	mov	r5, r0
 8014130:	d4e4      	bmi.n	80140fc <_fflush_r+0xc>
 8014132:	89a3      	ldrh	r3, [r4, #12]
 8014134:	059b      	lsls	r3, r3, #22
 8014136:	d4e1      	bmi.n	80140fc <_fflush_r+0xc>
 8014138:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801413a:	f7fe fbdb 	bl	80128f4 <__retarget_lock_release_recursive>
 801413e:	e7dd      	b.n	80140fc <_fflush_r+0xc>

08014140 <memmove>:
 8014140:	4288      	cmp	r0, r1
 8014142:	b510      	push	{r4, lr}
 8014144:	eb01 0402 	add.w	r4, r1, r2
 8014148:	d902      	bls.n	8014150 <memmove+0x10>
 801414a:	4284      	cmp	r4, r0
 801414c:	4623      	mov	r3, r4
 801414e:	d807      	bhi.n	8014160 <memmove+0x20>
 8014150:	1e43      	subs	r3, r0, #1
 8014152:	42a1      	cmp	r1, r4
 8014154:	d008      	beq.n	8014168 <memmove+0x28>
 8014156:	f811 2b01 	ldrb.w	r2, [r1], #1
 801415a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801415e:	e7f8      	b.n	8014152 <memmove+0x12>
 8014160:	4402      	add	r2, r0
 8014162:	4601      	mov	r1, r0
 8014164:	428a      	cmp	r2, r1
 8014166:	d100      	bne.n	801416a <memmove+0x2a>
 8014168:	bd10      	pop	{r4, pc}
 801416a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801416e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014172:	e7f7      	b.n	8014164 <memmove+0x24>

08014174 <memcpy>:
 8014174:	440a      	add	r2, r1
 8014176:	4291      	cmp	r1, r2
 8014178:	f100 33ff 	add.w	r3, r0, #4294967295
 801417c:	d100      	bne.n	8014180 <memcpy+0xc>
 801417e:	4770      	bx	lr
 8014180:	b510      	push	{r4, lr}
 8014182:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014186:	f803 4f01 	strb.w	r4, [r3, #1]!
 801418a:	4291      	cmp	r1, r2
 801418c:	d1f9      	bne.n	8014182 <memcpy+0xe>
 801418e:	bd10      	pop	{r4, pc}

08014190 <__assert_func>:
 8014190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014192:	4614      	mov	r4, r2
 8014194:	461a      	mov	r2, r3
 8014196:	4b09      	ldr	r3, [pc, #36]	@ (80141bc <__assert_func+0x2c>)
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	4605      	mov	r5, r0
 801419c:	68d8      	ldr	r0, [r3, #12]
 801419e:	b954      	cbnz	r4, 80141b6 <__assert_func+0x26>
 80141a0:	4b07      	ldr	r3, [pc, #28]	@ (80141c0 <__assert_func+0x30>)
 80141a2:	461c      	mov	r4, r3
 80141a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80141a8:	9100      	str	r1, [sp, #0]
 80141aa:	462b      	mov	r3, r5
 80141ac:	4905      	ldr	r1, [pc, #20]	@ (80141c4 <__assert_func+0x34>)
 80141ae:	f000 f86f 	bl	8014290 <fiprintf>
 80141b2:	f7fd fc89 	bl	8011ac8 <abort>
 80141b6:	4b04      	ldr	r3, [pc, #16]	@ (80141c8 <__assert_func+0x38>)
 80141b8:	e7f4      	b.n	80141a4 <__assert_func+0x14>
 80141ba:	bf00      	nop
 80141bc:	2000001c 	.word	0x2000001c
 80141c0:	0801647e 	.word	0x0801647e
 80141c4:	08016450 	.word	0x08016450
 80141c8:	08016443 	.word	0x08016443

080141cc <_calloc_r>:
 80141cc:	b570      	push	{r4, r5, r6, lr}
 80141ce:	fba1 5402 	umull	r5, r4, r1, r2
 80141d2:	b93c      	cbnz	r4, 80141e4 <_calloc_r+0x18>
 80141d4:	4629      	mov	r1, r5
 80141d6:	f7fd fcb1 	bl	8011b3c <_malloc_r>
 80141da:	4606      	mov	r6, r0
 80141dc:	b928      	cbnz	r0, 80141ea <_calloc_r+0x1e>
 80141de:	2600      	movs	r6, #0
 80141e0:	4630      	mov	r0, r6
 80141e2:	bd70      	pop	{r4, r5, r6, pc}
 80141e4:	220c      	movs	r2, #12
 80141e6:	6002      	str	r2, [r0, #0]
 80141e8:	e7f9      	b.n	80141de <_calloc_r+0x12>
 80141ea:	462a      	mov	r2, r5
 80141ec:	4621      	mov	r1, r4
 80141ee:	f7fe faae 	bl	801274e <memset>
 80141f2:	e7f5      	b.n	80141e0 <_calloc_r+0x14>

080141f4 <__ascii_mbtowc>:
 80141f4:	b082      	sub	sp, #8
 80141f6:	b901      	cbnz	r1, 80141fa <__ascii_mbtowc+0x6>
 80141f8:	a901      	add	r1, sp, #4
 80141fa:	b142      	cbz	r2, 801420e <__ascii_mbtowc+0x1a>
 80141fc:	b14b      	cbz	r3, 8014212 <__ascii_mbtowc+0x1e>
 80141fe:	7813      	ldrb	r3, [r2, #0]
 8014200:	600b      	str	r3, [r1, #0]
 8014202:	7812      	ldrb	r2, [r2, #0]
 8014204:	1e10      	subs	r0, r2, #0
 8014206:	bf18      	it	ne
 8014208:	2001      	movne	r0, #1
 801420a:	b002      	add	sp, #8
 801420c:	4770      	bx	lr
 801420e:	4610      	mov	r0, r2
 8014210:	e7fb      	b.n	801420a <__ascii_mbtowc+0x16>
 8014212:	f06f 0001 	mvn.w	r0, #1
 8014216:	e7f8      	b.n	801420a <__ascii_mbtowc+0x16>

08014218 <_realloc_r>:
 8014218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801421c:	4680      	mov	r8, r0
 801421e:	4615      	mov	r5, r2
 8014220:	460c      	mov	r4, r1
 8014222:	b921      	cbnz	r1, 801422e <_realloc_r+0x16>
 8014224:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014228:	4611      	mov	r1, r2
 801422a:	f7fd bc87 	b.w	8011b3c <_malloc_r>
 801422e:	b92a      	cbnz	r2, 801423c <_realloc_r+0x24>
 8014230:	f7ff f9b6 	bl	80135a0 <_free_r>
 8014234:	2400      	movs	r4, #0
 8014236:	4620      	mov	r0, r4
 8014238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801423c:	f000 f83a 	bl	80142b4 <_malloc_usable_size_r>
 8014240:	4285      	cmp	r5, r0
 8014242:	4606      	mov	r6, r0
 8014244:	d802      	bhi.n	801424c <_realloc_r+0x34>
 8014246:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801424a:	d8f4      	bhi.n	8014236 <_realloc_r+0x1e>
 801424c:	4629      	mov	r1, r5
 801424e:	4640      	mov	r0, r8
 8014250:	f7fd fc74 	bl	8011b3c <_malloc_r>
 8014254:	4607      	mov	r7, r0
 8014256:	2800      	cmp	r0, #0
 8014258:	d0ec      	beq.n	8014234 <_realloc_r+0x1c>
 801425a:	42b5      	cmp	r5, r6
 801425c:	462a      	mov	r2, r5
 801425e:	4621      	mov	r1, r4
 8014260:	bf28      	it	cs
 8014262:	4632      	movcs	r2, r6
 8014264:	f7ff ff86 	bl	8014174 <memcpy>
 8014268:	4621      	mov	r1, r4
 801426a:	4640      	mov	r0, r8
 801426c:	f7ff f998 	bl	80135a0 <_free_r>
 8014270:	463c      	mov	r4, r7
 8014272:	e7e0      	b.n	8014236 <_realloc_r+0x1e>

08014274 <__ascii_wctomb>:
 8014274:	4603      	mov	r3, r0
 8014276:	4608      	mov	r0, r1
 8014278:	b141      	cbz	r1, 801428c <__ascii_wctomb+0x18>
 801427a:	2aff      	cmp	r2, #255	@ 0xff
 801427c:	d904      	bls.n	8014288 <__ascii_wctomb+0x14>
 801427e:	228a      	movs	r2, #138	@ 0x8a
 8014280:	601a      	str	r2, [r3, #0]
 8014282:	f04f 30ff 	mov.w	r0, #4294967295
 8014286:	4770      	bx	lr
 8014288:	700a      	strb	r2, [r1, #0]
 801428a:	2001      	movs	r0, #1
 801428c:	4770      	bx	lr
	...

08014290 <fiprintf>:
 8014290:	b40e      	push	{r1, r2, r3}
 8014292:	b503      	push	{r0, r1, lr}
 8014294:	4601      	mov	r1, r0
 8014296:	ab03      	add	r3, sp, #12
 8014298:	4805      	ldr	r0, [pc, #20]	@ (80142b0 <fiprintf+0x20>)
 801429a:	f853 2b04 	ldr.w	r2, [r3], #4
 801429e:	6800      	ldr	r0, [r0, #0]
 80142a0:	9301      	str	r3, [sp, #4]
 80142a2:	f000 f839 	bl	8014318 <_vfiprintf_r>
 80142a6:	b002      	add	sp, #8
 80142a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80142ac:	b003      	add	sp, #12
 80142ae:	4770      	bx	lr
 80142b0:	2000001c 	.word	0x2000001c

080142b4 <_malloc_usable_size_r>:
 80142b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80142b8:	1f18      	subs	r0, r3, #4
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	bfbc      	itt	lt
 80142be:	580b      	ldrlt	r3, [r1, r0]
 80142c0:	18c0      	addlt	r0, r0, r3
 80142c2:	4770      	bx	lr

080142c4 <__sfputc_r>:
 80142c4:	6893      	ldr	r3, [r2, #8]
 80142c6:	3b01      	subs	r3, #1
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	b410      	push	{r4}
 80142cc:	6093      	str	r3, [r2, #8]
 80142ce:	da08      	bge.n	80142e2 <__sfputc_r+0x1e>
 80142d0:	6994      	ldr	r4, [r2, #24]
 80142d2:	42a3      	cmp	r3, r4
 80142d4:	db01      	blt.n	80142da <__sfputc_r+0x16>
 80142d6:	290a      	cmp	r1, #10
 80142d8:	d103      	bne.n	80142e2 <__sfputc_r+0x1e>
 80142da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80142de:	f000 b933 	b.w	8014548 <__swbuf_r>
 80142e2:	6813      	ldr	r3, [r2, #0]
 80142e4:	1c58      	adds	r0, r3, #1
 80142e6:	6010      	str	r0, [r2, #0]
 80142e8:	7019      	strb	r1, [r3, #0]
 80142ea:	4608      	mov	r0, r1
 80142ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80142f0:	4770      	bx	lr

080142f2 <__sfputs_r>:
 80142f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142f4:	4606      	mov	r6, r0
 80142f6:	460f      	mov	r7, r1
 80142f8:	4614      	mov	r4, r2
 80142fa:	18d5      	adds	r5, r2, r3
 80142fc:	42ac      	cmp	r4, r5
 80142fe:	d101      	bne.n	8014304 <__sfputs_r+0x12>
 8014300:	2000      	movs	r0, #0
 8014302:	e007      	b.n	8014314 <__sfputs_r+0x22>
 8014304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014308:	463a      	mov	r2, r7
 801430a:	4630      	mov	r0, r6
 801430c:	f7ff ffda 	bl	80142c4 <__sfputc_r>
 8014310:	1c43      	adds	r3, r0, #1
 8014312:	d1f3      	bne.n	80142fc <__sfputs_r+0xa>
 8014314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014318 <_vfiprintf_r>:
 8014318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801431c:	460d      	mov	r5, r1
 801431e:	b09d      	sub	sp, #116	@ 0x74
 8014320:	4614      	mov	r4, r2
 8014322:	4698      	mov	r8, r3
 8014324:	4606      	mov	r6, r0
 8014326:	b118      	cbz	r0, 8014330 <_vfiprintf_r+0x18>
 8014328:	6a03      	ldr	r3, [r0, #32]
 801432a:	b90b      	cbnz	r3, 8014330 <_vfiprintf_r+0x18>
 801432c:	f7fe f976 	bl	801261c <__sinit>
 8014330:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014332:	07d9      	lsls	r1, r3, #31
 8014334:	d405      	bmi.n	8014342 <_vfiprintf_r+0x2a>
 8014336:	89ab      	ldrh	r3, [r5, #12]
 8014338:	059a      	lsls	r2, r3, #22
 801433a:	d402      	bmi.n	8014342 <_vfiprintf_r+0x2a>
 801433c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801433e:	f7fe fad8 	bl	80128f2 <__retarget_lock_acquire_recursive>
 8014342:	89ab      	ldrh	r3, [r5, #12]
 8014344:	071b      	lsls	r3, r3, #28
 8014346:	d501      	bpl.n	801434c <_vfiprintf_r+0x34>
 8014348:	692b      	ldr	r3, [r5, #16]
 801434a:	b99b      	cbnz	r3, 8014374 <_vfiprintf_r+0x5c>
 801434c:	4629      	mov	r1, r5
 801434e:	4630      	mov	r0, r6
 8014350:	f000 f938 	bl	80145c4 <__swsetup_r>
 8014354:	b170      	cbz	r0, 8014374 <_vfiprintf_r+0x5c>
 8014356:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014358:	07dc      	lsls	r4, r3, #31
 801435a:	d504      	bpl.n	8014366 <_vfiprintf_r+0x4e>
 801435c:	f04f 30ff 	mov.w	r0, #4294967295
 8014360:	b01d      	add	sp, #116	@ 0x74
 8014362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014366:	89ab      	ldrh	r3, [r5, #12]
 8014368:	0598      	lsls	r0, r3, #22
 801436a:	d4f7      	bmi.n	801435c <_vfiprintf_r+0x44>
 801436c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801436e:	f7fe fac1 	bl	80128f4 <__retarget_lock_release_recursive>
 8014372:	e7f3      	b.n	801435c <_vfiprintf_r+0x44>
 8014374:	2300      	movs	r3, #0
 8014376:	9309      	str	r3, [sp, #36]	@ 0x24
 8014378:	2320      	movs	r3, #32
 801437a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801437e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014382:	2330      	movs	r3, #48	@ 0x30
 8014384:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014534 <_vfiprintf_r+0x21c>
 8014388:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801438c:	f04f 0901 	mov.w	r9, #1
 8014390:	4623      	mov	r3, r4
 8014392:	469a      	mov	sl, r3
 8014394:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014398:	b10a      	cbz	r2, 801439e <_vfiprintf_r+0x86>
 801439a:	2a25      	cmp	r2, #37	@ 0x25
 801439c:	d1f9      	bne.n	8014392 <_vfiprintf_r+0x7a>
 801439e:	ebba 0b04 	subs.w	fp, sl, r4
 80143a2:	d00b      	beq.n	80143bc <_vfiprintf_r+0xa4>
 80143a4:	465b      	mov	r3, fp
 80143a6:	4622      	mov	r2, r4
 80143a8:	4629      	mov	r1, r5
 80143aa:	4630      	mov	r0, r6
 80143ac:	f7ff ffa1 	bl	80142f2 <__sfputs_r>
 80143b0:	3001      	adds	r0, #1
 80143b2:	f000 80a7 	beq.w	8014504 <_vfiprintf_r+0x1ec>
 80143b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80143b8:	445a      	add	r2, fp
 80143ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80143bc:	f89a 3000 	ldrb.w	r3, [sl]
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	f000 809f 	beq.w	8014504 <_vfiprintf_r+0x1ec>
 80143c6:	2300      	movs	r3, #0
 80143c8:	f04f 32ff 	mov.w	r2, #4294967295
 80143cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80143d0:	f10a 0a01 	add.w	sl, sl, #1
 80143d4:	9304      	str	r3, [sp, #16]
 80143d6:	9307      	str	r3, [sp, #28]
 80143d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80143dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80143de:	4654      	mov	r4, sl
 80143e0:	2205      	movs	r2, #5
 80143e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143e6:	4853      	ldr	r0, [pc, #332]	@ (8014534 <_vfiprintf_r+0x21c>)
 80143e8:	f7eb fefa 	bl	80001e0 <memchr>
 80143ec:	9a04      	ldr	r2, [sp, #16]
 80143ee:	b9d8      	cbnz	r0, 8014428 <_vfiprintf_r+0x110>
 80143f0:	06d1      	lsls	r1, r2, #27
 80143f2:	bf44      	itt	mi
 80143f4:	2320      	movmi	r3, #32
 80143f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80143fa:	0713      	lsls	r3, r2, #28
 80143fc:	bf44      	itt	mi
 80143fe:	232b      	movmi	r3, #43	@ 0x2b
 8014400:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014404:	f89a 3000 	ldrb.w	r3, [sl]
 8014408:	2b2a      	cmp	r3, #42	@ 0x2a
 801440a:	d015      	beq.n	8014438 <_vfiprintf_r+0x120>
 801440c:	9a07      	ldr	r2, [sp, #28]
 801440e:	4654      	mov	r4, sl
 8014410:	2000      	movs	r0, #0
 8014412:	f04f 0c0a 	mov.w	ip, #10
 8014416:	4621      	mov	r1, r4
 8014418:	f811 3b01 	ldrb.w	r3, [r1], #1
 801441c:	3b30      	subs	r3, #48	@ 0x30
 801441e:	2b09      	cmp	r3, #9
 8014420:	d94b      	bls.n	80144ba <_vfiprintf_r+0x1a2>
 8014422:	b1b0      	cbz	r0, 8014452 <_vfiprintf_r+0x13a>
 8014424:	9207      	str	r2, [sp, #28]
 8014426:	e014      	b.n	8014452 <_vfiprintf_r+0x13a>
 8014428:	eba0 0308 	sub.w	r3, r0, r8
 801442c:	fa09 f303 	lsl.w	r3, r9, r3
 8014430:	4313      	orrs	r3, r2
 8014432:	9304      	str	r3, [sp, #16]
 8014434:	46a2      	mov	sl, r4
 8014436:	e7d2      	b.n	80143de <_vfiprintf_r+0xc6>
 8014438:	9b03      	ldr	r3, [sp, #12]
 801443a:	1d19      	adds	r1, r3, #4
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	9103      	str	r1, [sp, #12]
 8014440:	2b00      	cmp	r3, #0
 8014442:	bfbb      	ittet	lt
 8014444:	425b      	neglt	r3, r3
 8014446:	f042 0202 	orrlt.w	r2, r2, #2
 801444a:	9307      	strge	r3, [sp, #28]
 801444c:	9307      	strlt	r3, [sp, #28]
 801444e:	bfb8      	it	lt
 8014450:	9204      	strlt	r2, [sp, #16]
 8014452:	7823      	ldrb	r3, [r4, #0]
 8014454:	2b2e      	cmp	r3, #46	@ 0x2e
 8014456:	d10a      	bne.n	801446e <_vfiprintf_r+0x156>
 8014458:	7863      	ldrb	r3, [r4, #1]
 801445a:	2b2a      	cmp	r3, #42	@ 0x2a
 801445c:	d132      	bne.n	80144c4 <_vfiprintf_r+0x1ac>
 801445e:	9b03      	ldr	r3, [sp, #12]
 8014460:	1d1a      	adds	r2, r3, #4
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	9203      	str	r2, [sp, #12]
 8014466:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801446a:	3402      	adds	r4, #2
 801446c:	9305      	str	r3, [sp, #20]
 801446e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014544 <_vfiprintf_r+0x22c>
 8014472:	7821      	ldrb	r1, [r4, #0]
 8014474:	2203      	movs	r2, #3
 8014476:	4650      	mov	r0, sl
 8014478:	f7eb feb2 	bl	80001e0 <memchr>
 801447c:	b138      	cbz	r0, 801448e <_vfiprintf_r+0x176>
 801447e:	9b04      	ldr	r3, [sp, #16]
 8014480:	eba0 000a 	sub.w	r0, r0, sl
 8014484:	2240      	movs	r2, #64	@ 0x40
 8014486:	4082      	lsls	r2, r0
 8014488:	4313      	orrs	r3, r2
 801448a:	3401      	adds	r4, #1
 801448c:	9304      	str	r3, [sp, #16]
 801448e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014492:	4829      	ldr	r0, [pc, #164]	@ (8014538 <_vfiprintf_r+0x220>)
 8014494:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014498:	2206      	movs	r2, #6
 801449a:	f7eb fea1 	bl	80001e0 <memchr>
 801449e:	2800      	cmp	r0, #0
 80144a0:	d03f      	beq.n	8014522 <_vfiprintf_r+0x20a>
 80144a2:	4b26      	ldr	r3, [pc, #152]	@ (801453c <_vfiprintf_r+0x224>)
 80144a4:	bb1b      	cbnz	r3, 80144ee <_vfiprintf_r+0x1d6>
 80144a6:	9b03      	ldr	r3, [sp, #12]
 80144a8:	3307      	adds	r3, #7
 80144aa:	f023 0307 	bic.w	r3, r3, #7
 80144ae:	3308      	adds	r3, #8
 80144b0:	9303      	str	r3, [sp, #12]
 80144b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80144b4:	443b      	add	r3, r7
 80144b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80144b8:	e76a      	b.n	8014390 <_vfiprintf_r+0x78>
 80144ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80144be:	460c      	mov	r4, r1
 80144c0:	2001      	movs	r0, #1
 80144c2:	e7a8      	b.n	8014416 <_vfiprintf_r+0xfe>
 80144c4:	2300      	movs	r3, #0
 80144c6:	3401      	adds	r4, #1
 80144c8:	9305      	str	r3, [sp, #20]
 80144ca:	4619      	mov	r1, r3
 80144cc:	f04f 0c0a 	mov.w	ip, #10
 80144d0:	4620      	mov	r0, r4
 80144d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80144d6:	3a30      	subs	r2, #48	@ 0x30
 80144d8:	2a09      	cmp	r2, #9
 80144da:	d903      	bls.n	80144e4 <_vfiprintf_r+0x1cc>
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d0c6      	beq.n	801446e <_vfiprintf_r+0x156>
 80144e0:	9105      	str	r1, [sp, #20]
 80144e2:	e7c4      	b.n	801446e <_vfiprintf_r+0x156>
 80144e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80144e8:	4604      	mov	r4, r0
 80144ea:	2301      	movs	r3, #1
 80144ec:	e7f0      	b.n	80144d0 <_vfiprintf_r+0x1b8>
 80144ee:	ab03      	add	r3, sp, #12
 80144f0:	9300      	str	r3, [sp, #0]
 80144f2:	462a      	mov	r2, r5
 80144f4:	4b12      	ldr	r3, [pc, #72]	@ (8014540 <_vfiprintf_r+0x228>)
 80144f6:	a904      	add	r1, sp, #16
 80144f8:	4630      	mov	r0, r6
 80144fa:	f7fd fc4b 	bl	8011d94 <_printf_float>
 80144fe:	4607      	mov	r7, r0
 8014500:	1c78      	adds	r0, r7, #1
 8014502:	d1d6      	bne.n	80144b2 <_vfiprintf_r+0x19a>
 8014504:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014506:	07d9      	lsls	r1, r3, #31
 8014508:	d405      	bmi.n	8014516 <_vfiprintf_r+0x1fe>
 801450a:	89ab      	ldrh	r3, [r5, #12]
 801450c:	059a      	lsls	r2, r3, #22
 801450e:	d402      	bmi.n	8014516 <_vfiprintf_r+0x1fe>
 8014510:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014512:	f7fe f9ef 	bl	80128f4 <__retarget_lock_release_recursive>
 8014516:	89ab      	ldrh	r3, [r5, #12]
 8014518:	065b      	lsls	r3, r3, #25
 801451a:	f53f af1f 	bmi.w	801435c <_vfiprintf_r+0x44>
 801451e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014520:	e71e      	b.n	8014360 <_vfiprintf_r+0x48>
 8014522:	ab03      	add	r3, sp, #12
 8014524:	9300      	str	r3, [sp, #0]
 8014526:	462a      	mov	r2, r5
 8014528:	4b05      	ldr	r3, [pc, #20]	@ (8014540 <_vfiprintf_r+0x228>)
 801452a:	a904      	add	r1, sp, #16
 801452c:	4630      	mov	r0, r6
 801452e:	f7fd fec9 	bl	80122c4 <_printf_i>
 8014532:	e7e4      	b.n	80144fe <_vfiprintf_r+0x1e6>
 8014534:	08016428 	.word	0x08016428
 8014538:	08016432 	.word	0x08016432
 801453c:	08011d95 	.word	0x08011d95
 8014540:	080142f3 	.word	0x080142f3
 8014544:	0801642e 	.word	0x0801642e

08014548 <__swbuf_r>:
 8014548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801454a:	460e      	mov	r6, r1
 801454c:	4614      	mov	r4, r2
 801454e:	4605      	mov	r5, r0
 8014550:	b118      	cbz	r0, 801455a <__swbuf_r+0x12>
 8014552:	6a03      	ldr	r3, [r0, #32]
 8014554:	b90b      	cbnz	r3, 801455a <__swbuf_r+0x12>
 8014556:	f7fe f861 	bl	801261c <__sinit>
 801455a:	69a3      	ldr	r3, [r4, #24]
 801455c:	60a3      	str	r3, [r4, #8]
 801455e:	89a3      	ldrh	r3, [r4, #12]
 8014560:	071a      	lsls	r2, r3, #28
 8014562:	d501      	bpl.n	8014568 <__swbuf_r+0x20>
 8014564:	6923      	ldr	r3, [r4, #16]
 8014566:	b943      	cbnz	r3, 801457a <__swbuf_r+0x32>
 8014568:	4621      	mov	r1, r4
 801456a:	4628      	mov	r0, r5
 801456c:	f000 f82a 	bl	80145c4 <__swsetup_r>
 8014570:	b118      	cbz	r0, 801457a <__swbuf_r+0x32>
 8014572:	f04f 37ff 	mov.w	r7, #4294967295
 8014576:	4638      	mov	r0, r7
 8014578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801457a:	6823      	ldr	r3, [r4, #0]
 801457c:	6922      	ldr	r2, [r4, #16]
 801457e:	1a98      	subs	r0, r3, r2
 8014580:	6963      	ldr	r3, [r4, #20]
 8014582:	b2f6      	uxtb	r6, r6
 8014584:	4283      	cmp	r3, r0
 8014586:	4637      	mov	r7, r6
 8014588:	dc05      	bgt.n	8014596 <__swbuf_r+0x4e>
 801458a:	4621      	mov	r1, r4
 801458c:	4628      	mov	r0, r5
 801458e:	f7ff fdaf 	bl	80140f0 <_fflush_r>
 8014592:	2800      	cmp	r0, #0
 8014594:	d1ed      	bne.n	8014572 <__swbuf_r+0x2a>
 8014596:	68a3      	ldr	r3, [r4, #8]
 8014598:	3b01      	subs	r3, #1
 801459a:	60a3      	str	r3, [r4, #8]
 801459c:	6823      	ldr	r3, [r4, #0]
 801459e:	1c5a      	adds	r2, r3, #1
 80145a0:	6022      	str	r2, [r4, #0]
 80145a2:	701e      	strb	r6, [r3, #0]
 80145a4:	6962      	ldr	r2, [r4, #20]
 80145a6:	1c43      	adds	r3, r0, #1
 80145a8:	429a      	cmp	r2, r3
 80145aa:	d004      	beq.n	80145b6 <__swbuf_r+0x6e>
 80145ac:	89a3      	ldrh	r3, [r4, #12]
 80145ae:	07db      	lsls	r3, r3, #31
 80145b0:	d5e1      	bpl.n	8014576 <__swbuf_r+0x2e>
 80145b2:	2e0a      	cmp	r6, #10
 80145b4:	d1df      	bne.n	8014576 <__swbuf_r+0x2e>
 80145b6:	4621      	mov	r1, r4
 80145b8:	4628      	mov	r0, r5
 80145ba:	f7ff fd99 	bl	80140f0 <_fflush_r>
 80145be:	2800      	cmp	r0, #0
 80145c0:	d0d9      	beq.n	8014576 <__swbuf_r+0x2e>
 80145c2:	e7d6      	b.n	8014572 <__swbuf_r+0x2a>

080145c4 <__swsetup_r>:
 80145c4:	b538      	push	{r3, r4, r5, lr}
 80145c6:	4b29      	ldr	r3, [pc, #164]	@ (801466c <__swsetup_r+0xa8>)
 80145c8:	4605      	mov	r5, r0
 80145ca:	6818      	ldr	r0, [r3, #0]
 80145cc:	460c      	mov	r4, r1
 80145ce:	b118      	cbz	r0, 80145d8 <__swsetup_r+0x14>
 80145d0:	6a03      	ldr	r3, [r0, #32]
 80145d2:	b90b      	cbnz	r3, 80145d8 <__swsetup_r+0x14>
 80145d4:	f7fe f822 	bl	801261c <__sinit>
 80145d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80145dc:	0719      	lsls	r1, r3, #28
 80145de:	d422      	bmi.n	8014626 <__swsetup_r+0x62>
 80145e0:	06da      	lsls	r2, r3, #27
 80145e2:	d407      	bmi.n	80145f4 <__swsetup_r+0x30>
 80145e4:	2209      	movs	r2, #9
 80145e6:	602a      	str	r2, [r5, #0]
 80145e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80145ec:	81a3      	strh	r3, [r4, #12]
 80145ee:	f04f 30ff 	mov.w	r0, #4294967295
 80145f2:	e033      	b.n	801465c <__swsetup_r+0x98>
 80145f4:	0758      	lsls	r0, r3, #29
 80145f6:	d512      	bpl.n	801461e <__swsetup_r+0x5a>
 80145f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80145fa:	b141      	cbz	r1, 801460e <__swsetup_r+0x4a>
 80145fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014600:	4299      	cmp	r1, r3
 8014602:	d002      	beq.n	801460a <__swsetup_r+0x46>
 8014604:	4628      	mov	r0, r5
 8014606:	f7fe ffcb 	bl	80135a0 <_free_r>
 801460a:	2300      	movs	r3, #0
 801460c:	6363      	str	r3, [r4, #52]	@ 0x34
 801460e:	89a3      	ldrh	r3, [r4, #12]
 8014610:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014614:	81a3      	strh	r3, [r4, #12]
 8014616:	2300      	movs	r3, #0
 8014618:	6063      	str	r3, [r4, #4]
 801461a:	6923      	ldr	r3, [r4, #16]
 801461c:	6023      	str	r3, [r4, #0]
 801461e:	89a3      	ldrh	r3, [r4, #12]
 8014620:	f043 0308 	orr.w	r3, r3, #8
 8014624:	81a3      	strh	r3, [r4, #12]
 8014626:	6923      	ldr	r3, [r4, #16]
 8014628:	b94b      	cbnz	r3, 801463e <__swsetup_r+0x7a>
 801462a:	89a3      	ldrh	r3, [r4, #12]
 801462c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014630:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014634:	d003      	beq.n	801463e <__swsetup_r+0x7a>
 8014636:	4621      	mov	r1, r4
 8014638:	4628      	mov	r0, r5
 801463a:	f000 f83f 	bl	80146bc <__smakebuf_r>
 801463e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014642:	f013 0201 	ands.w	r2, r3, #1
 8014646:	d00a      	beq.n	801465e <__swsetup_r+0x9a>
 8014648:	2200      	movs	r2, #0
 801464a:	60a2      	str	r2, [r4, #8]
 801464c:	6962      	ldr	r2, [r4, #20]
 801464e:	4252      	negs	r2, r2
 8014650:	61a2      	str	r2, [r4, #24]
 8014652:	6922      	ldr	r2, [r4, #16]
 8014654:	b942      	cbnz	r2, 8014668 <__swsetup_r+0xa4>
 8014656:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801465a:	d1c5      	bne.n	80145e8 <__swsetup_r+0x24>
 801465c:	bd38      	pop	{r3, r4, r5, pc}
 801465e:	0799      	lsls	r1, r3, #30
 8014660:	bf58      	it	pl
 8014662:	6962      	ldrpl	r2, [r4, #20]
 8014664:	60a2      	str	r2, [r4, #8]
 8014666:	e7f4      	b.n	8014652 <__swsetup_r+0x8e>
 8014668:	2000      	movs	r0, #0
 801466a:	e7f7      	b.n	801465c <__swsetup_r+0x98>
 801466c:	2000001c 	.word	0x2000001c

08014670 <__swhatbuf_r>:
 8014670:	b570      	push	{r4, r5, r6, lr}
 8014672:	460c      	mov	r4, r1
 8014674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014678:	2900      	cmp	r1, #0
 801467a:	b096      	sub	sp, #88	@ 0x58
 801467c:	4615      	mov	r5, r2
 801467e:	461e      	mov	r6, r3
 8014680:	da0d      	bge.n	801469e <__swhatbuf_r+0x2e>
 8014682:	89a3      	ldrh	r3, [r4, #12]
 8014684:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014688:	f04f 0100 	mov.w	r1, #0
 801468c:	bf14      	ite	ne
 801468e:	2340      	movne	r3, #64	@ 0x40
 8014690:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014694:	2000      	movs	r0, #0
 8014696:	6031      	str	r1, [r6, #0]
 8014698:	602b      	str	r3, [r5, #0]
 801469a:	b016      	add	sp, #88	@ 0x58
 801469c:	bd70      	pop	{r4, r5, r6, pc}
 801469e:	466a      	mov	r2, sp
 80146a0:	f000 f848 	bl	8014734 <_fstat_r>
 80146a4:	2800      	cmp	r0, #0
 80146a6:	dbec      	blt.n	8014682 <__swhatbuf_r+0x12>
 80146a8:	9901      	ldr	r1, [sp, #4]
 80146aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80146ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80146b2:	4259      	negs	r1, r3
 80146b4:	4159      	adcs	r1, r3
 80146b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80146ba:	e7eb      	b.n	8014694 <__swhatbuf_r+0x24>

080146bc <__smakebuf_r>:
 80146bc:	898b      	ldrh	r3, [r1, #12]
 80146be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80146c0:	079d      	lsls	r5, r3, #30
 80146c2:	4606      	mov	r6, r0
 80146c4:	460c      	mov	r4, r1
 80146c6:	d507      	bpl.n	80146d8 <__smakebuf_r+0x1c>
 80146c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80146cc:	6023      	str	r3, [r4, #0]
 80146ce:	6123      	str	r3, [r4, #16]
 80146d0:	2301      	movs	r3, #1
 80146d2:	6163      	str	r3, [r4, #20]
 80146d4:	b003      	add	sp, #12
 80146d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80146d8:	ab01      	add	r3, sp, #4
 80146da:	466a      	mov	r2, sp
 80146dc:	f7ff ffc8 	bl	8014670 <__swhatbuf_r>
 80146e0:	9f00      	ldr	r7, [sp, #0]
 80146e2:	4605      	mov	r5, r0
 80146e4:	4639      	mov	r1, r7
 80146e6:	4630      	mov	r0, r6
 80146e8:	f7fd fa28 	bl	8011b3c <_malloc_r>
 80146ec:	b948      	cbnz	r0, 8014702 <__smakebuf_r+0x46>
 80146ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146f2:	059a      	lsls	r2, r3, #22
 80146f4:	d4ee      	bmi.n	80146d4 <__smakebuf_r+0x18>
 80146f6:	f023 0303 	bic.w	r3, r3, #3
 80146fa:	f043 0302 	orr.w	r3, r3, #2
 80146fe:	81a3      	strh	r3, [r4, #12]
 8014700:	e7e2      	b.n	80146c8 <__smakebuf_r+0xc>
 8014702:	89a3      	ldrh	r3, [r4, #12]
 8014704:	6020      	str	r0, [r4, #0]
 8014706:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801470a:	81a3      	strh	r3, [r4, #12]
 801470c:	9b01      	ldr	r3, [sp, #4]
 801470e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014712:	b15b      	cbz	r3, 801472c <__smakebuf_r+0x70>
 8014714:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014718:	4630      	mov	r0, r6
 801471a:	f000 f81d 	bl	8014758 <_isatty_r>
 801471e:	b128      	cbz	r0, 801472c <__smakebuf_r+0x70>
 8014720:	89a3      	ldrh	r3, [r4, #12]
 8014722:	f023 0303 	bic.w	r3, r3, #3
 8014726:	f043 0301 	orr.w	r3, r3, #1
 801472a:	81a3      	strh	r3, [r4, #12]
 801472c:	89a3      	ldrh	r3, [r4, #12]
 801472e:	431d      	orrs	r5, r3
 8014730:	81a5      	strh	r5, [r4, #12]
 8014732:	e7cf      	b.n	80146d4 <__smakebuf_r+0x18>

08014734 <_fstat_r>:
 8014734:	b538      	push	{r3, r4, r5, lr}
 8014736:	4d07      	ldr	r5, [pc, #28]	@ (8014754 <_fstat_r+0x20>)
 8014738:	2300      	movs	r3, #0
 801473a:	4604      	mov	r4, r0
 801473c:	4608      	mov	r0, r1
 801473e:	4611      	mov	r1, r2
 8014740:	602b      	str	r3, [r5, #0]
 8014742:	f7f8 ff75 	bl	800d630 <_fstat>
 8014746:	1c43      	adds	r3, r0, #1
 8014748:	d102      	bne.n	8014750 <_fstat_r+0x1c>
 801474a:	682b      	ldr	r3, [r5, #0]
 801474c:	b103      	cbz	r3, 8014750 <_fstat_r+0x1c>
 801474e:	6023      	str	r3, [r4, #0]
 8014750:	bd38      	pop	{r3, r4, r5, pc}
 8014752:	bf00      	nop
 8014754:	20000704 	.word	0x20000704

08014758 <_isatty_r>:
 8014758:	b538      	push	{r3, r4, r5, lr}
 801475a:	4d06      	ldr	r5, [pc, #24]	@ (8014774 <_isatty_r+0x1c>)
 801475c:	2300      	movs	r3, #0
 801475e:	4604      	mov	r4, r0
 8014760:	4608      	mov	r0, r1
 8014762:	602b      	str	r3, [r5, #0]
 8014764:	f7f8 ff74 	bl	800d650 <_isatty>
 8014768:	1c43      	adds	r3, r0, #1
 801476a:	d102      	bne.n	8014772 <_isatty_r+0x1a>
 801476c:	682b      	ldr	r3, [r5, #0]
 801476e:	b103      	cbz	r3, 8014772 <_isatty_r+0x1a>
 8014770:	6023      	str	r3, [r4, #0]
 8014772:	bd38      	pop	{r3, r4, r5, pc}
 8014774:	20000704 	.word	0x20000704

08014778 <_init>:
 8014778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801477a:	bf00      	nop
 801477c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801477e:	bc08      	pop	{r3}
 8014780:	469e      	mov	lr, r3
 8014782:	4770      	bx	lr

08014784 <_fini>:
 8014784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014786:	bf00      	nop
 8014788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801478a:	bc08      	pop	{r3}
 801478c:	469e      	mov	lr, r3
 801478e:	4770      	bx	lr


EstacionAireProM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014640  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001df0  080147e0  080147e0  000157e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080165d0  080165d0  000181dc  2**0
                  CONTENTS
  4 .ARM          00000008  080165d0  080165d0  000175d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080165d8  080165d8  000181dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080165d8  080165d8  000175d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   0000000c  080165e4  080165e4  000175e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  080165f0  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000053c  200001dc  080167cc  000181dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000718  080167cc  00018718  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000181dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036e42  00000000  00000000  0001820c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000c08d  00000000  00000000  0004f04e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002e40  00000000  00000000  0005b0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000022d5  00000000  00000000  0005df20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000264a6  00000000  00000000  000601f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00040fcd  00000000  00000000  0008669b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000adc3e  00000000  00000000  000c7668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  001752a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c81c  00000000  00000000  0017532c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00181b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080147c8 	.word	0x080147c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080147c8 	.word	0x080147c8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_ldivmod>:
 8000bb8:	b97b      	cbnz	r3, 8000bda <__aeabi_ldivmod+0x22>
 8000bba:	b972      	cbnz	r2, 8000bda <__aeabi_ldivmod+0x22>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bfbe      	ittt	lt
 8000bc0:	2000      	movlt	r0, #0
 8000bc2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bc6:	e006      	blt.n	8000bd6 <__aeabi_ldivmod+0x1e>
 8000bc8:	bf08      	it	eq
 8000bca:	2800      	cmpeq	r0, #0
 8000bcc:	bf1c      	itt	ne
 8000bce:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000bd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd6:	f000 b9b5 	b.w	8000f44 <__aeabi_idiv0>
 8000bda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be2:	2900      	cmp	r1, #0
 8000be4:	db09      	blt.n	8000bfa <__aeabi_ldivmod+0x42>
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	db1a      	blt.n	8000c20 <__aeabi_ldivmod+0x68>
 8000bea:	f000 f84d 	bl	8000c88 <__udivmoddi4>
 8000bee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf6:	b004      	add	sp, #16
 8000bf8:	4770      	bx	lr
 8000bfa:	4240      	negs	r0, r0
 8000bfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	db1b      	blt.n	8000c3c <__aeabi_ldivmod+0x84>
 8000c04:	f000 f840 	bl	8000c88 <__udivmoddi4>
 8000c08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c10:	b004      	add	sp, #16
 8000c12:	4240      	negs	r0, r0
 8000c14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c18:	4252      	negs	r2, r2
 8000c1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c1e:	4770      	bx	lr
 8000c20:	4252      	negs	r2, r2
 8000c22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c26:	f000 f82f 	bl	8000c88 <__udivmoddi4>
 8000c2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c32:	b004      	add	sp, #16
 8000c34:	4240      	negs	r0, r0
 8000c36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3a:	4770      	bx	lr
 8000c3c:	4252      	negs	r2, r2
 8000c3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c42:	f000 f821 	bl	8000c88 <__udivmoddi4>
 8000c46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4e:	b004      	add	sp, #16
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <_ZN15CManejadorBotonC1Ev>:

#include "Boton/CManejadorBoton.hpp"
#include "Constantes.hpp"
#include "Uart/Uart.hpp"

CManejadorBoton::CManejadorBoton()
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	4a0c      	ldr	r2, [pc, #48]	@ (8000f84 <_ZN15CManejadorBotonC1Ev+0x3c>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2201      	movs	r2, #1
 8000f5a:	60da      	str	r2, [r3, #12]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	611a      	str	r2, [r3, #16]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	615a      	str	r2, [r3, #20]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	619a      	str	r2, [r3, #24]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	61da      	str	r2, [r3, #28]
{
	// TODO Auto-generated constructor stub

}
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4618      	mov	r0, r3
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	08014cf0 	.word	0x08014cf0

08000f88 <_ZN15CManejadorBotonD1Ev>:

CManejadorBoton::~CManejadorBoton()
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	4a04      	ldr	r2, [pc, #16]	@ (8000fa4 <_ZN15CManejadorBotonD1Ev+0x1c>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	08014cf0 	.word	0x08014cf0

08000fa8 <_ZN15CManejadorBotonD0Ev>:
CManejadorBoton::~CManejadorBoton()
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
}
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff ffe9 	bl	8000f88 <_ZN15CManejadorBotonD1Ev>
 8000fb6:	2120      	movs	r1, #32
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f010 fd8f 	bl	8011adc <_ZdlPvj>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>:

void CManejadorBoton::Configurar(GPIO_TypeDef *puerto, uint16_t pin,uint8_t identificador)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	80fb      	strh	r3, [r7, #6]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	717b      	strb	r3, [r7, #5]
	GPIO_Port = puerto;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	68ba      	ldr	r2, [r7, #8]
 8000fe2:	605a      	str	r2, [r3, #4]
	Gpio_Pin = pin;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	88fa      	ldrh	r2, [r7, #6]
 8000fe8:	811a      	strh	r2, [r3, #8]
	Identificador = identificador;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	797a      	ldrb	r2, [r7, #5]
 8000fee:	729a      	strb	r2, [r3, #10]
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <_ZN15CManejadorBoton4InitEv>:
void CManejadorBoton::Init()
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
	{ 0 };
	GPIO_InitStruct.Pin = Gpio_Pin;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	891b      	ldrh	r3, [r3, #8]
 8001018:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f107 020c 	add.w	r2, r7, #12
 800102a:	4611      	mov	r1, r2
 800102c:	4618      	mov	r0, r3
 800102e:	f00d f89d 	bl	800e16c <HAL_GPIO_Init>
}
 8001032:	bf00      	nop
 8001034:	3720      	adds	r7, #32
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <_ZN15CManejadorBoton4LeerEv>:
int CManejadorBoton::Leer()
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(GPIO_Port, Gpio_Pin); // lee el pin
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	891b      	ldrh	r3, [r3, #8]
 800104a:	4619      	mov	r1, r3
 800104c:	4610      	mov	r0, r2
 800104e:	f00d fa11 	bl	800e474 <HAL_GPIO_ReadPin>
 8001052:	4603      	mov	r3, r0

}
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>:
void CManejadorBoton::AsignaManejadorEventos(CManejadorEventosBoton *manejador)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
	Manejador = manejador;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	683a      	ldr	r2, [r7, #0]
 800106a:	61da      	str	r2, [r3, #28]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <_ZN15CManejadorBoton7ProcesaEi>:
void CManejadorBoton::Procesa(int gpio_pin)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
	if (Manejador == NULL)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d02e      	beq.n	80010e8 <_ZN15CManejadorBoton7ProcesaEi+0x70>
		return;
	if(gpio_pin!=Gpio_Pin)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	891b      	ldrh	r3, [r3, #8]
 800108e:	461a      	mov	r2, r3
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	4293      	cmp	r3, r2
 8001094:	d12a      	bne.n	80010ec <_ZN15CManejadorBoton7ProcesaEi+0x74>
		return;
	int estado = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
	estado = Leer();
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff ffcd 	bl	800103a <_ZN15CManejadorBoton4LeerEv>
 80010a0:	60f8      	str	r0, [r7, #12]
	//leo el tiempo actual
	int tiempo = HAL_GetTick();
 80010a2:	f00c fbed 	bl	800d880 <HAL_GetTick>
 80010a6:	4603      	mov	r3, r0
 80010a8:	60bb      	str	r3, [r7, #8]
	if ((tiempo - ReboteMilis) < TIEMPO_REBOTE)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2bc7      	cmp	r3, #199	@ 0xc7
 80010b4:	dd1c      	ble.n	80010f0 <_ZN15CManejadorBoton7ProcesaEi+0x78>
	{
		//como todavia no pasa el tiempo de espera para evitar rebotes no hago nada
		return;
	}
	ReboteMilis = HAL_GetTick();  //leo el tiempo actual
 80010b6:	f00c fbe3 	bl	800d880 <HAL_GetTick>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	615a      	str	r2, [r3, #20]

	//ya filtre los rebotes, por lo que ahora si informo del cambio de estado del boton
	Estado = estado;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	60da      	str	r2, [r3, #12]
	if (Estado == BOTON_SUELTO)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d110      	bne.n	80010f2 <_ZN15CManejadorBoton7ProcesaEi+0x7a>
	{
		Manejador->OnBotonClickEvent(Identificador);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	69d8      	ldr	r0, [r3, #28]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	69db      	ldr	r3, [r3, #28]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	3308      	adds	r3, #8
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	7a92      	ldrb	r2, [r2, #10]
 80010e2:	4611      	mov	r1, r2
 80010e4:	4798      	blx	r3
 80010e6:	e004      	b.n	80010f2 <_ZN15CManejadorBoton7ProcesaEi+0x7a>
		return;
 80010e8:	bf00      	nop
 80010ea:	e002      	b.n	80010f2 <_ZN15CManejadorBoton7ProcesaEi+0x7a>
		return;
 80010ec:	bf00      	nop
 80010ee:	e000      	b.n	80010f2 <_ZN15CManejadorBoton7ProcesaEi+0x7a>
		return;
 80010f0:	bf00      	nop
	}
}
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <_ZN22CManejadorEventosBotonC1Ev>:
 *      Author: W10
 */

#include "Boton/CManejadorEventosBoton.hpp"

CManejadorEventosBoton::CManejadorEventosBoton()
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	4a04      	ldr	r2, [pc, #16]	@ (8001114 <_ZN22CManejadorEventosBotonC1Ev+0x1c>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	08014d00 	.word	0x08014d00

08001118 <_ZN22CManejadorEventosBotonD1Ev>:

CManejadorEventosBoton::~CManejadorEventosBoton()
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	4a04      	ldr	r2, [pc, #16]	@ (8001134 <_ZN22CManejadorEventosBotonD1Ev+0x1c>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	08014d00 	.word	0x08014d00

08001138 <_ZN22CManejadorEventosBotonD0Ev>:
CManejadorEventosBoton::~CManejadorEventosBoton()
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
}
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ffe9 	bl	8001118 <_ZN22CManejadorEventosBotonD1Ev>
 8001146:	2104      	movs	r1, #4
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f010 fcc7 	bl	8011adc <_ZdlPvj>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4618      	mov	r0, r3
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <_ZN22CManejadorEventosBoton17OnBotonClickEventEi>:

void CManejadorEventosBoton::OnBotonClickEvent(int idBoton)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]

}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
	...

08001170 <_ZN10CalefactorC1Ev>:
 *      Author: W10
 */

#include <Calefactor/Calefactor.hpp>
#include "Uart/Uart.hpp"
Calefactor::Calefactor()
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	4a06      	ldr	r2, [pc, #24]	@ (8001194 <_ZN10CalefactorC1Ev+0x24>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	60da      	str	r2, [r3, #12]
{
	// TODO Auto-generated constructor stub

}
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4618      	mov	r0, r3
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	08014d14 	.word	0x08014d14

08001198 <_ZN10CalefactorD1Ev>:

Calefactor::~Calefactor()
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	4a04      	ldr	r2, [pc, #16]	@ (80011b4 <_ZN10CalefactorD1Ev+0x1c>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4618      	mov	r0, r3
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	08014d14 	.word	0x08014d14

080011b8 <_ZN10CalefactorD0Ev>:
Calefactor::~Calefactor()
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
}
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ffe9 	bl	8001198 <_ZN10CalefactorD1Ev>
 80011c6:	2110      	movs	r1, #16
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f010 fc87 	bl	8011adc <_ZdlPvj>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <_ZN10Calefactor10ConfigurarEP12GPIO_TypeDeft>:

void Calefactor::Configurar(GPIO_TypeDef *puerto, uint16_t pin)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	4613      	mov	r3, r2
 80011e4:	80fb      	strh	r3, [r7, #6]
	GPIO_Port = puerto;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	68ba      	ldr	r2, [r7, #8]
 80011ea:	605a      	str	r2, [r3, #4]
	Gpio_Pin = pin;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	88fa      	ldrh	r2, [r7, #6]
 80011f0:	811a      	strh	r2, [r3, #8]

}
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <_ZN10Calefactor4InitEv>:
void Calefactor::Init()
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b088      	sub	sp, #32
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =	{ 0 };
 8001206:	f107 030c 	add.w	r3, r7, #12
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = Gpio_Pin;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	891b      	ldrh	r3, [r3, #8]
 800121a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121c:	2301      	movs	r3, #1
 800121e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	2300      	movs	r3, #0
 8001226:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f107 020c 	add.w	r2, r7, #12
 8001230:	4611      	mov	r1, r2
 8001232:	4618      	mov	r0, r3
 8001234:	f00c ff9a 	bl	800e16c <HAL_GPIO_Init>
	Apagar();
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f000 f817 	bl	800126c <_ZN10Calefactor6ApagarEv>
}
 800123e:	bf00      	nop
 8001240:	3720      	adds	r7, #32
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <_ZN10Calefactor8EncenderEv>:
void Calefactor::Encender()
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO_Port, Gpio_Pin,	GPIO_PinState::GPIO_PIN_SET);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6858      	ldr	r0, [r3, #4]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	891b      	ldrh	r3, [r3, #8]
 8001256:	2201      	movs	r2, #1
 8001258:	4619      	mov	r1, r3
 800125a:	f00d f923 	bl	800e4a4 <HAL_GPIO_WritePin>
	Estado=ENCENDIDO;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2201      	movs	r2, #1
 8001262:	60da      	str	r2, [r3, #12]
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <_ZN10Calefactor6ApagarEv>:
void Calefactor::Apagar()
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO_Port, Gpio_Pin,	GPIO_PinState::GPIO_PIN_RESET);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6858      	ldr	r0, [r3, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	891b      	ldrh	r3, [r3, #8]
 800127c:	2200      	movs	r2, #0
 800127e:	4619      	mov	r1, r3
 8001280:	f00d f910 	bl	800e4a4 <HAL_GPIO_WritePin>
	Estado=APAGADO;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <_ZN20ControlVelocidadAireC1Ev>:

#include "ControlVelocidadAire.hpp"
#include "stm32f4xx.h"
//#include "stm32f1xx_hal_adc.h"

ControlVelocidadAire::ControlVelocidadAire()
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	4a04      	ldr	r2, [pc, #16]	@ (80012b0 <_ZN20ControlVelocidadAireC1Ev+0x1c>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4618      	mov	r0, r3
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	08014d24 	.word	0x08014d24

080012b4 <_ZN20ControlVelocidadAireD1Ev>:

ControlVelocidadAire::~ControlVelocidadAire()
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	4a04      	ldr	r2, [pc, #16]	@ (80012d0 <_ZN20ControlVelocidadAireD1Ev+0x1c>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4618      	mov	r0, r3
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	08014d24 	.word	0x08014d24

080012d4 <_ZN20ControlVelocidadAireD0Ev>:
ControlVelocidadAire::~ControlVelocidadAire()
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
}
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ffe9 	bl	80012b4 <_ZN20ControlVelocidadAireD1Ev>
 80012e2:	214c      	movs	r1, #76	@ 0x4c
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f010 fbf9 	bl	8011adc <_ZdlPvj>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4618      	mov	r0, r3
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <_ZN20ControlVelocidadAire10InicializaEv>:

void ControlVelocidadAire::Inicializa()
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	4b36      	ldr	r3, [pc, #216]	@ (80013dc <_ZN20ControlVelocidadAire10InicializaEv+0xe8>)
 8001302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001304:	4a35      	ldr	r2, [pc, #212]	@ (80013dc <_ZN20ControlVelocidadAire10InicializaEv+0xe8>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	6313      	str	r3, [r2, #48]	@ 0x30
 800130c:	4b33      	ldr	r3, [pc, #204]	@ (80013dc <_ZN20ControlVelocidadAire10InicializaEv+0xe8>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	68fb      	ldr	r3, [r7, #12]
	 ADC_ChannelConfTypeDef sConfig = {0};
 8001318:	f107 0310 	add.w	r3, r7, #16
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
	 hadc1.Instance = ADC1;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a2d      	ldr	r2, [pc, #180]	@ (80013e0 <_ZN20ControlVelocidadAire10InicializaEv+0xec>)
 800132a:	605a      	str	r2, [r3, #4]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2; //NUEVO
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B; //nuevo
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	60da      	str	r2, [r3, #12]

	 hadc1.Init.ScanConvMode =  DISABLE;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	615a      	str	r2, [r3, #20]
	 hadc1.Init.ContinuousConvMode = ENABLE;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2201      	movs	r2, #1
 8001342:	771a      	strb	r2, [r3, #28]
	 hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	 hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;//nuevo
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	631a      	str	r2, [r3, #48]	@ 0x30
	 hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a23      	ldr	r2, [pc, #140]	@ (80013e4 <_ZN20ControlVelocidadAire10InicializaEv+0xf0>)
 8001356:	62da      	str	r2, [r3, #44]	@ 0x2c
	 hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	611a      	str	r2, [r3, #16]
	 hadc1.State=	 HAL_ADC_STATE_RESET;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	645a      	str	r2, [r3, #68]	@ 0x44
	 hadc1.Init.NbrOfConversion = 1;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	621a      	str	r2, [r3, #32]
	  hadc1.Init.DMAContinuousRequests = DISABLE; //nuevo
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	619a      	str	r2, [r3, #24]

	 if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3304      	adds	r3, #4
 800137c:	4618      	mov	r0, r3
 800137e:	f00c faaf 	bl	800d8e0 <HAL_ADC_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	bf14      	ite	ne
 8001388:	2301      	movne	r3, #1
 800138a:	2300      	moveq	r3, #0
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	d002      	beq.n	8001398 <_ZN20ControlVelocidadAire10InicializaEv+0xa4>
	 {
	 Error_Handler();
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 f84e 	bl	8001434 <_ZN20ControlVelocidadAire13Error_HandlerEv>
	 }

	 sConfig.Channel = ADC_CHANNEL_3;
 8001398:	2303      	movs	r3, #3
 800139a:	613b      	str	r3, [r7, #16]
	 sConfig.Rank =1; // ADC_REGULAR_RANK_1;
 800139c:	2301      	movs	r3, #1
 800139e:	617b      	str	r3, [r7, #20]
	 sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES; //ADC_SAMPLETIME_239CYCLES_5;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61bb      	str	r3, [r7, #24]
	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3304      	adds	r3, #4
 80013a8:	f107 0210 	add.w	r2, r7, #16
 80013ac:	4611      	mov	r1, r2
 80013ae:	4618      	mov	r0, r3
 80013b0:	f00c fb9c 	bl	800daec <HAL_ADC_ConfigChannel>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	bf14      	ite	ne
 80013ba:	2301      	movne	r3, #1
 80013bc:	2300      	moveq	r3, #0
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d002      	beq.n	80013ca <_ZN20ControlVelocidadAire10InicializaEv+0xd6>
	 {
	 Error_Handler();
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f000 f835 	bl	8001434 <_ZN20ControlVelocidadAire13Error_HandlerEv>
	 }
	 HAL_ADC_Start(&hadc1);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3304      	adds	r3, #4
 80013ce:	4618      	mov	r0, r3
 80013d0:	f00c faca 	bl	800d968 <HAL_ADC_Start>
}
 80013d4:	bf00      	nop
 80013d6:	3720      	adds	r7, #32
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40012000 	.word	0x40012000
 80013e4:	0f000001 	.word	0x0f000001

080013e8 <_ZN20ControlVelocidadAire12LeeVelocidadEv>:
int ControlVelocidadAire::LeeVelocidad()
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	Inicializa();
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff ff7f 	bl	80012f4 <_ZN20ControlVelocidadAire10InicializaEv>
	HAL_ADC_Start(&hadc1);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3304      	adds	r3, #4
 80013fa:	4618      	mov	r0, r3
 80013fc:	f00c fab4 	bl	800d968 <HAL_ADC_Start>
	int valor=HAL_ADC_GetValue(&hadc1);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3304      	adds	r3, #4
 8001404:	4618      	mov	r0, r3
 8001406:	f00c fb63 	bl	800dad0 <HAL_ADC_GetValue>
 800140a:	4603      	mov	r3, r0
 800140c:	60fb      	str	r3, [r7, #12]
	//4095->100
	//valor->X
	//x=valor*100/4095
	return 	100-(int)(valor*100/4095);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2264      	movs	r2, #100	@ 0x64
 8001412:	fb02 f303 	mul.w	r3, r2, r3
 8001416:	4a06      	ldr	r2, [pc, #24]	@ (8001430 <_ZN20ControlVelocidadAire12LeeVelocidadEv+0x48>)
 8001418:	fb82 1203 	smull	r1, r2, r2, r3
 800141c:	441a      	add	r2, r3
 800141e:	12d2      	asrs	r2, r2, #11
 8001420:	17db      	asrs	r3, r3, #31
 8001422:	1a9b      	subs	r3, r3, r2
 8001424:	3364      	adds	r3, #100	@ 0x64
}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	80080081 	.word	0x80080081

08001434 <_ZN20ControlVelocidadAire13Error_HandlerEv>:
void ControlVelocidadAire::Error_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]

}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <_ZN6CEpromC1Ev>:
#include <EPROM/CEprom.hpp>
#include "stm32f4xx.h"
#include "stm32f4xx_hal_conf.h"
extern I2C_HandleTypeDef hi2c1;

CEprom::CEprom()
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	4a23      	ldr	r2, [pc, #140]	@ (80014e0 <_ZN6CEpromC1Ev+0x98>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2202      	movs	r2, #2
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2204      	movs	r2, #4
 800146e:	611a      	str	r2, [r3, #16]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2208      	movs	r2, #8
 8001474:	615a      	str	r2, [r3, #20]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	220c      	movs	r2, #12
 800147a:	619a      	str	r2, [r3, #24]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2210      	movs	r2, #16
 8001480:	61da      	str	r2, [r3, #28]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2212      	movs	r2, #18
 8001486:	621a      	str	r2, [r3, #32]
{
	// TODO Auto-generated constructor stub
	Diferencia = -1;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f04f 32ff 	mov.w	r2, #4294967295
 800148e:	625a      	str	r2, [r3, #36]	@ 0x24
	TemperaturaManual = -1;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f04f 32ff 	mov.w	r2, #4294967295
 8001496:	629a      	str	r2, [r3, #40]	@ 0x28
	Memoria1_Temperatura = -1;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f04f 32ff 	mov.w	r2, #4294967295
 800149e:	62da      	str	r2, [r3, #44]	@ 0x2c
	Memoria1_VelocidadAire = -1;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f04f 32ff 	mov.w	r2, #4294967295
 80014a6:	631a      	str	r2, [r3, #48]	@ 0x30
	Memoria2_Temperatura = -1;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f04f 32ff 	mov.w	r2, #4294967295
 80014ae:	635a      	str	r2, [r3, #52]	@ 0x34
	Memoria2_VelocidadAire = -1;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f04f 32ff 	mov.w	r2, #4294967295
 80014b6:	639a      	str	r2, [r3, #56]	@ 0x38
	Memoria3_Temperatura = -1;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f04f 32ff 	mov.w	r2, #4294967295
 80014be:	63da      	str	r2, [r3, #60]	@ 0x3c
	Memoria3_VelocidadAire = -1;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f04f 32ff 	mov.w	r2, #4294967295
 80014c6:	641a      	str	r2, [r3, #64]	@ 0x40
	NRampas=-1;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f04f 32ff 	mov.w	r2, #4294967295
 80014ce:	645a      	str	r2, [r3, #68]	@ 0x44

}
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4618      	mov	r0, r3
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	08014d34 	.word	0x08014d34

080014e4 <_ZN6CEpromD1Ev>:

CEprom::~CEprom()
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	4a04      	ldr	r2, [pc, #16]	@ (8001500 <_ZN6CEpromD1Ev+0x1c>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4618      	mov	r0, r3
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	08014d34 	.word	0x08014d34

08001504 <_ZN6CEpromD0Ev>:
CEprom::~CEprom()
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
}
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff ffe9 	bl	80014e4 <_ZN6CEpromD1Ev>
 8001512:	2148      	movs	r1, #72	@ 0x48
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f010 fae1 	bl	8011adc <_ZdlPvj>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4618      	mov	r0, r3
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <_ZN6CEprom21DameTemperaturaManualEv>:

int CEprom::DameTemperaturaManual()
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af04      	add	r7, sp, #16
 800152a:	6078      	str	r0, [r7, #4]
	if (TemperaturaManual != -1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001534:	d002      	beq.n	800153c <_ZN6CEprom21DameTemperaturaManualEv+0x18>
		return TemperaturaManual;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800153a:	e029      	b.n	8001590 <_ZN6CEprom21DameTemperaturaManualEv+0x6c>
	uint16_t temperatura;
	if (HAL_I2C_Mem_Read(&hi2c1, DameDireccionAlta(TEMPERATURAMANUAL), TEMPERATURAMANUAL, I2C_MEMADD_SIZE_8BIT, (uint8_t*) &temperatura, 2, HAL_MAX_DELAY) == HAL_OK)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	b29b      	uxth	r3, r3
 8001542:	4619      	mov	r1, r3
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f000 fb2b 	bl	8001ba0 <_ZN6CEprom17DameDireccionAltaEt>
 800154a:	4603      	mov	r3, r0
 800154c:	4619      	mov	r1, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	b29a      	uxth	r2, r3
 8001554:	f04f 33ff 	mov.w	r3, #4294967295
 8001558:	9302      	str	r3, [sp, #8]
 800155a:	2302      	movs	r3, #2
 800155c:	9301      	str	r3, [sp, #4]
 800155e:	f107 030e 	add.w	r3, r7, #14
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	2301      	movs	r3, #1
 8001566:	480c      	ldr	r0, [pc, #48]	@ (8001598 <_ZN6CEprom21DameTemperaturaManualEv+0x74>)
 8001568:	f00d fa0c 	bl	800e984 <HAL_I2C_Mem_Read>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	bf0c      	ite	eq
 8001572:	2301      	moveq	r3, #1
 8001574:	2300      	movne	r3, #0
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	d007      	beq.n	800158c <_ZN6CEprom21DameTemperaturaManualEv+0x68>
	{
		if (temperatura >= 0 && temperatura <= 500)
 800157c:	89fb      	ldrh	r3, [r7, #14]
 800157e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001582:	d803      	bhi.n	800158c <_ZN6CEprom21DameTemperaturaManualEv+0x68>
		{
			TemperaturaManual = temperatura;
 8001584:	89fb      	ldrh	r3, [r7, #14]
 8001586:	461a      	mov	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	629a      	str	r2, [r3, #40]	@ 0x28
		}
	}
	return TemperaturaManual;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8001590:	4618      	mov	r0, r3
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	200003e4 	.word	0x200003e4

0800159c <_ZN6CEprom23GuardaTemepraturaManualEi>:

void CEprom::GuardaTemepraturaManual(int temperatura)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af04      	add	r7, sp, #16
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
	TemperaturaManual = temperatura;
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_I2C_Mem_Write(&hi2c1, DameDireccionAlta(TEMPERATURAMANUAL), TEMPERATURAMANUAL, I2C_MEMADD_SIZE_8BIT, (uint8_t*) &temperatura, 2, HAL_MAX_DELAY);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	4619      	mov	r1, r3
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f000 faf3 	bl	8001ba0 <_ZN6CEprom17DameDireccionAltaEt>
 80015ba:	4603      	mov	r3, r0
 80015bc:	4619      	mov	r1, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	f04f 33ff 	mov.w	r3, #4294967295
 80015c8:	9302      	str	r3, [sp, #8]
 80015ca:	2302      	movs	r3, #2
 80015cc:	9301      	str	r3, [sp, #4]
 80015ce:	463b      	mov	r3, r7
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	2301      	movs	r3, #1
 80015d4:	4803      	ldr	r0, [pc, #12]	@ (80015e4 <_ZN6CEprom23GuardaTemepraturaManualEi+0x48>)
 80015d6:	f00d f8db 	bl	800e790 <HAL_I2C_Mem_Write>
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	200003e4 	.word	0x200003e4

080015e8 <_ZN6CEprom21DameAjusteTemperaturaEv>:

int CEprom::DameAjusteTemperatura()
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af04      	add	r7, sp, #16
 80015ee:	6078      	str	r0, [r7, #4]
	if (Diferencia != -1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f8:	d002      	beq.n	8001600 <_ZN6CEprom21DameAjusteTemperaturaEv+0x18>
		return Diferencia;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015fe:	e032      	b.n	8001666 <_ZN6CEprom21DameAjusteTemperaturaEv+0x7e>
	if (HAL_I2C_Mem_Read(&hi2c1, DameDireccionAlta(AJUSTETEMPERATURA), AJUSTETEMPERATURA, I2C_MEMADD_SIZE_8BIT, (uint8_t*) &Diferencia, 2, HAL_MAX_DELAY) == HAL_OK)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	b29b      	uxth	r3, r3
 8001606:	4619      	mov	r1, r3
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f000 fac9 	bl	8001ba0 <_ZN6CEprom17DameDireccionAltaEt>
 800160e:	4603      	mov	r3, r0
 8001610:	4618      	mov	r0, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	b29a      	uxth	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3324      	adds	r3, #36	@ 0x24
 800161c:	f04f 31ff 	mov.w	r1, #4294967295
 8001620:	9102      	str	r1, [sp, #8]
 8001622:	2102      	movs	r1, #2
 8001624:	9101      	str	r1, [sp, #4]
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	2301      	movs	r3, #1
 800162a:	4601      	mov	r1, r0
 800162c:	4810      	ldr	r0, [pc, #64]	@ (8001670 <_ZN6CEprom21DameAjusteTemperaturaEv+0x88>)
 800162e:	f00d f9a9 	bl	800e984 <HAL_I2C_Mem_Read>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	bf0c      	ite	eq
 8001638:	2301      	moveq	r3, #1
 800163a:	2300      	movne	r3, #0
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00c      	beq.n	800165c <_ZN6CEprom21DameAjusteTemperaturaEv+0x74>
	{
		if (Diferencia >= -500 && Diferencia <= 500)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001646:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 800164a:	db07      	blt.n	800165c <_ZN6CEprom21DameAjusteTemperaturaEv+0x74>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001650:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001654:	dc02      	bgt.n	800165c <_ZN6CEprom21DameAjusteTemperaturaEv+0x74>
		{
			return Diferencia;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165a:	e004      	b.n	8001666 <_ZN6CEprom21DameAjusteTemperaturaEv+0x7e>
		}
	}
	Diferencia = 0;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	625a      	str	r2, [r3, #36]	@ 0x24
	return Diferencia;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200003e4 	.word	0x200003e4

08001674 <_ZN6CEprom23GuardaAjusteTemperaturaEi>:

void CEprom::GuardaAjusteTemperatura(int diferencia)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af04      	add	r7, sp, #16
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
	Diferencia=diferencia;
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_I2C_Mem_Write(&hi2c1,DameDireccionAlta(AJUSTETEMPERATURA),AJUSTETEMPERATURA,I2C_MEMADD_SIZE_8BIT,(uint8_t*)&diferencia,2,HAL_MAX_DELAY);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	b29b      	uxth	r3, r3
 800168a:	4619      	mov	r1, r3
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 fa87 	bl	8001ba0 <_ZN6CEprom17DameDireccionAltaEt>
 8001692:	4603      	mov	r3, r0
 8001694:	4619      	mov	r1, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	b29a      	uxth	r2, r3
 800169c:	f04f 33ff 	mov.w	r3, #4294967295
 80016a0:	9302      	str	r3, [sp, #8]
 80016a2:	2302      	movs	r3, #2
 80016a4:	9301      	str	r3, [sp, #4]
 80016a6:	463b      	mov	r3, r7
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	2301      	movs	r3, #1
 80016ac:	4803      	ldr	r0, [pc, #12]	@ (80016bc <_ZN6CEprom23GuardaAjusteTemperaturaEi+0x48>)
 80016ae:	f00d f86f 	bl	800e790 <HAL_I2C_Mem_Write>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200003e4 	.word	0x200003e4

080016c0 <_ZN6CEprom23DameTemperatuarMemoria1Ev>:

int CEprom::DameTemperatuarMemoria1()
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	if (Memoria1_Temperatura == -1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d0:	d102      	bne.n	80016d8 <_ZN6CEprom23DameTemperatuarMemoria1Ev+0x18>
		LeeMemoria1();
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f000 f8f0 	bl	80018b8 <_ZN6CEprom11LeeMemoria1Ev>
	return Memoria1_Temperatura;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c

}
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <_ZN6CEprom21DameVelocidadMemoria1Ev>:

int CEprom::DameVelocidadMemoria1()
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	if (Memoria1_VelocidadAire == -1)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f4:	d102      	bne.n	80016fc <_ZN6CEprom21DameVelocidadMemoria1Ev+0x18>
		LeeMemoria1();
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 f8de 	bl	80018b8 <_ZN6CEprom11LeeMemoria1Ev>
	return Memoria1_VelocidadAire;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
}
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <_ZN6CEprom14GuardaMemoria1Eii>:

void CEprom::GuardaMemoria1(int temperatura, int velocidad)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	@ 0x28
 800170c:	af04      	add	r7, sp, #16
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
	Memoria1_Temperatura = temperatura;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	62da      	str	r2, [r3, #44]	@ 0x2c
	Memoria1_VelocidadAire = velocidad;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	631a      	str	r2, [r3, #48]	@ 0x30
	uint16_t datos_w[2];
	datos_w[0] = temperatura;
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	b29b      	uxth	r3, r3
 8001724:	82bb      	strh	r3, [r7, #20]
	datos_w[1] = velocidad;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	b29b      	uxth	r3, r3
 800172a:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Write(&hi2c1, DameDireccionAlta(MEMORIA1), MEMORIA1, I2C_MEMADD_SIZE_8BIT, (uint8_t*) datos_w, 4, HAL_MAX_DELAY);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	b29b      	uxth	r3, r3
 8001732:	4619      	mov	r1, r3
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f000 fa33 	bl	8001ba0 <_ZN6CEprom17DameDireccionAltaEt>
 800173a:	4603      	mov	r3, r0
 800173c:	4619      	mov	r1, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	b29a      	uxth	r2, r3
 8001744:	f04f 33ff 	mov.w	r3, #4294967295
 8001748:	9302      	str	r3, [sp, #8]
 800174a:	2304      	movs	r3, #4
 800174c:	9301      	str	r3, [sp, #4]
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	2301      	movs	r3, #1
 8001756:	4803      	ldr	r0, [pc, #12]	@ (8001764 <_ZN6CEprom14GuardaMemoria1Eii+0x5c>)
 8001758:	f00d f81a 	bl	800e790 <HAL_I2C_Mem_Write>

}
 800175c:	bf00      	nop
 800175e:	3718      	adds	r7, #24
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	200003e4 	.word	0x200003e4

08001768 <_ZN6CEprom23DameTemperatuarMemoria2Ev>:

int CEprom::DameTemperatuarMemoria2()
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
	if (Memoria2_Temperatura == -1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001778:	d102      	bne.n	8001780 <_ZN6CEprom23DameTemperatuarMemoria2Ev+0x18>
		LeeMemoria2();
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 f8e6 	bl	800194c <_ZN6CEprom11LeeMemoria2Ev>
	return Memoria2_Temperatura;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34

}
 8001784:	4618      	mov	r0, r3
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <_ZN6CEprom21DameVelocidadMemoria2Ev>:

int CEprom::DameVelocidadMemoria2()
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
	if (Memoria2_VelocidadAire == -1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800179c:	d102      	bne.n	80017a4 <_ZN6CEprom21DameVelocidadMemoria2Ev+0x18>
		LeeMemoria2();
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 f8d4 	bl	800194c <_ZN6CEprom11LeeMemoria2Ev>
	return Memoria2_VelocidadAire;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <_ZN6CEprom14GuardaMemoria2Eii>:

void CEprom::GuardaMemoria2(int temperatura, int velocidad)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	@ 0x28
 80017b4:	af04      	add	r7, sp, #16
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
	Memoria2_Temperatura = temperatura;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	635a      	str	r2, [r3, #52]	@ 0x34
	Memoria2_VelocidadAire = velocidad;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	639a      	str	r2, [r3, #56]	@ 0x38
	uint16_t datos_w[2];
	datos_w[0] = temperatura;
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	82bb      	strh	r3, [r7, #20]
	datos_w[1] = velocidad;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Write(&hi2c1, DameDireccionAlta(MEMORIA2), MEMORIA2, I2C_MEMADD_SIZE_8BIT, (uint8_t*) datos_w, 4, HAL_MAX_DELAY);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	695b      	ldr	r3, [r3, #20]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	4619      	mov	r1, r3
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f000 f9df 	bl	8001ba0 <_ZN6CEprom17DameDireccionAltaEt>
 80017e2:	4603      	mov	r3, r0
 80017e4:	4619      	mov	r1, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	f04f 33ff 	mov.w	r3, #4294967295
 80017f0:	9302      	str	r3, [sp, #8]
 80017f2:	2304      	movs	r3, #4
 80017f4:	9301      	str	r3, [sp, #4]
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	2301      	movs	r3, #1
 80017fe:	4803      	ldr	r0, [pc, #12]	@ (800180c <_ZN6CEprom14GuardaMemoria2Eii+0x5c>)
 8001800:	f00c ffc6 	bl	800e790 <HAL_I2C_Mem_Write>

}
 8001804:	bf00      	nop
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	200003e4 	.word	0x200003e4

08001810 <_ZN6CEprom23DameTemperatuarMemoria3Ev>:

int CEprom::DameTemperatuarMemoria3()
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	if (Memoria3_Temperatura == -1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800181c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001820:	d102      	bne.n	8001828 <_ZN6CEprom23DameTemperatuarMemoria3Ev+0x18>
		LeeMemoria3();
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f8dc 	bl	80019e0 <_ZN6CEprom11LeeMemoria3Ev>
	return Memoria3_Temperatura;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c

}
 800182c:	4618      	mov	r0, r3
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <_ZN6CEprom21DameVelocidadMemoria3Ev>:
int CEprom::DameVelocidadMemoria3()
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
	if (Memoria3_VelocidadAire == -1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001844:	d102      	bne.n	800184c <_ZN6CEprom21DameVelocidadMemoria3Ev+0x18>
		LeeMemoria3();
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 f8ca 	bl	80019e0 <_ZN6CEprom11LeeMemoria3Ev>
	return Memoria3_VelocidadAire;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <_ZN6CEprom14GuardaMemoria3Eii>:
void CEprom::GuardaMemoria3(int temperatura, int velocidad)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08a      	sub	sp, #40	@ 0x28
 800185c:	af04      	add	r7, sp, #16
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
	Memoria3_Temperatura = temperatura;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	63da      	str	r2, [r3, #60]	@ 0x3c
	Memoria3_VelocidadAire = velocidad;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	641a      	str	r2, [r3, #64]	@ 0x40
	uint16_t datos_w[2];
	datos_w[0] = temperatura;
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	b29b      	uxth	r3, r3
 8001874:	82bb      	strh	r3, [r7, #20]
	datos_w[1] = velocidad;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	b29b      	uxth	r3, r3
 800187a:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Write(&hi2c1, DameDireccionAlta(MEMORIA3), MEMORIA3, I2C_MEMADD_SIZE_8BIT, (uint8_t*) datos_w, 4, HAL_MAX_DELAY);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	b29b      	uxth	r3, r3
 8001882:	4619      	mov	r1, r3
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	f000 f98b 	bl	8001ba0 <_ZN6CEprom17DameDireccionAltaEt>
 800188a:	4603      	mov	r3, r0
 800188c:	4619      	mov	r1, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	b29a      	uxth	r2, r3
 8001894:	f04f 33ff 	mov.w	r3, #4294967295
 8001898:	9302      	str	r3, [sp, #8]
 800189a:	2304      	movs	r3, #4
 800189c:	9301      	str	r3, [sp, #4]
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	2301      	movs	r3, #1
 80018a6:	4803      	ldr	r0, [pc, #12]	@ (80018b4 <_ZN6CEprom14GuardaMemoria3Eii+0x5c>)
 80018a8:	f00c ff72 	bl	800e790 <HAL_I2C_Mem_Write>
}
 80018ac:	bf00      	nop
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	200003e4 	.word	0x200003e4

080018b8 <_ZN6CEprom11LeeMemoria1Ev>:
void CEprom::LeeMemoria1()
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af04      	add	r7, sp, #16
 80018be:	6078      	str	r0, [r7, #4]
	uint16_t datos_r[2];
	if (HAL_I2C_Mem_Read(&hi2c1, DameDireccionAlta(MEMORIA1), MEMORIA1, I2C_MEMADD_SIZE_8BIT, (uint8_t*) datos_r, 4, HAL_MAX_DELAY) == HAL_OK)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	4619      	mov	r1, r3
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 f969 	bl	8001ba0 <_ZN6CEprom17DameDireccionAltaEt>
 80018ce:	4603      	mov	r3, r0
 80018d0:	4619      	mov	r1, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	f04f 33ff 	mov.w	r3, #4294967295
 80018dc:	9302      	str	r3, [sp, #8]
 80018de:	2304      	movs	r3, #4
 80018e0:	9301      	str	r3, [sp, #4]
 80018e2:	f107 030c 	add.w	r3, r7, #12
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	2301      	movs	r3, #1
 80018ea:	4817      	ldr	r0, [pc, #92]	@ (8001948 <_ZN6CEprom11LeeMemoria1Ev+0x90>)
 80018ec:	f00d f84a 	bl	800e984 <HAL_I2C_Mem_Read>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	bf0c      	ite	eq
 80018f6:	2301      	moveq	r3, #1
 80018f8:	2300      	movne	r3, #0
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d01e      	beq.n	800193e <_ZN6CEprom11LeeMemoria1Ev+0x86>
	{
		Memoria1_Temperatura = datos_r[0];
 8001900:	89bb      	ldrh	r3, [r7, #12]
 8001902:	461a      	mov	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	62da      	str	r2, [r3, #44]	@ 0x2c
		Memoria1_VelocidadAire = datos_r[1];
 8001908:	89fb      	ldrh	r3, [r7, #14]
 800190a:	461a      	mov	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	631a      	str	r2, [r3, #48]	@ 0x30
		if (Memoria1_Temperatura < 0 || Memoria1_Temperatura > 500)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001914:	2b00      	cmp	r3, #0
 8001916:	db04      	blt.n	8001922 <_ZN6CEprom11LeeMemoria1Ev+0x6a>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800191c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001920:	dd02      	ble.n	8001928 <_ZN6CEprom11LeeMemoria1Ev+0x70>
		{
			Memoria1_Temperatura = 100;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2264      	movs	r2, #100	@ 0x64
 8001926:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
		if (Memoria1_VelocidadAire < 0 || Memoria1_VelocidadAire > 100)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192c:	2b00      	cmp	r3, #0
 800192e:	db03      	blt.n	8001938 <_ZN6CEprom11LeeMemoria1Ev+0x80>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001934:	2b64      	cmp	r3, #100	@ 0x64
 8001936:	dd02      	ble.n	800193e <_ZN6CEprom11LeeMemoria1Ev+0x86>
		{
			Memoria1_VelocidadAire = 50;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2232      	movs	r2, #50	@ 0x32
 800193c:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
}
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200003e4 	.word	0x200003e4

0800194c <_ZN6CEprom11LeeMemoria2Ev>:
void CEprom::LeeMemoria2()
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af04      	add	r7, sp, #16
 8001952:	6078      	str	r0, [r7, #4]
	uint16_t datos_r[2];
	if (HAL_I2C_Mem_Read(&hi2c1, DameDireccionAlta(MEMORIA2), MEMORIA2, I2C_MEMADD_SIZE_8BIT, (uint8_t*) datos_r, 4, HAL_MAX_DELAY) == HAL_OK)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	695b      	ldr	r3, [r3, #20]
 8001958:	b29b      	uxth	r3, r3
 800195a:	4619      	mov	r1, r3
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 f91f 	bl	8001ba0 <_ZN6CEprom17DameDireccionAltaEt>
 8001962:	4603      	mov	r3, r0
 8001964:	4619      	mov	r1, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	b29a      	uxth	r2, r3
 800196c:	f04f 33ff 	mov.w	r3, #4294967295
 8001970:	9302      	str	r3, [sp, #8]
 8001972:	2304      	movs	r3, #4
 8001974:	9301      	str	r3, [sp, #4]
 8001976:	f107 030c 	add.w	r3, r7, #12
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	2301      	movs	r3, #1
 800197e:	4817      	ldr	r0, [pc, #92]	@ (80019dc <_ZN6CEprom11LeeMemoria2Ev+0x90>)
 8001980:	f00d f800 	bl	800e984 <HAL_I2C_Mem_Read>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	bf0c      	ite	eq
 800198a:	2301      	moveq	r3, #1
 800198c:	2300      	movne	r3, #0
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b00      	cmp	r3, #0
 8001992:	d01e      	beq.n	80019d2 <_ZN6CEprom11LeeMemoria2Ev+0x86>
	{
		Memoria2_Temperatura = datos_r[0];
 8001994:	89bb      	ldrh	r3, [r7, #12]
 8001996:	461a      	mov	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	635a      	str	r2, [r3, #52]	@ 0x34
		Memoria2_VelocidadAire = datos_r[1];
 800199c:	89fb      	ldrh	r3, [r7, #14]
 800199e:	461a      	mov	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	639a      	str	r2, [r3, #56]	@ 0x38
		if (Memoria2_Temperatura < 0 || Memoria2_Temperatura > 500)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	db04      	blt.n	80019b6 <_ZN6CEprom11LeeMemoria2Ev+0x6a>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019b0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80019b4:	dd02      	ble.n	80019bc <_ZN6CEprom11LeeMemoria2Ev+0x70>
		{
			Memoria2_Temperatura = 100;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2264      	movs	r2, #100	@ 0x64
 80019ba:	635a      	str	r2, [r3, #52]	@ 0x34
		}
		if (Memoria2_VelocidadAire < 0 || Memoria2_VelocidadAire > 100)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	db03      	blt.n	80019cc <_ZN6CEprom11LeeMemoria2Ev+0x80>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019c8:	2b64      	cmp	r3, #100	@ 0x64
 80019ca:	dd02      	ble.n	80019d2 <_ZN6CEprom11LeeMemoria2Ev+0x86>
		{
			Memoria2_VelocidadAire = 50;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2232      	movs	r2, #50	@ 0x32
 80019d0:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
}
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200003e4 	.word	0x200003e4

080019e0 <_ZN6CEprom11LeeMemoria3Ev>:
void CEprom::LeeMemoria3()
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b088      	sub	sp, #32
 80019e4:	af04      	add	r7, sp, #16
 80019e6:	6078      	str	r0, [r7, #4]
	uint16_t datos_r[2];
	if (HAL_I2C_Mem_Read(&hi2c1, DameDireccionAlta(MEMORIA3), MEMORIA3, I2C_MEMADD_SIZE_8BIT, (uint8_t*) datos_r, 4, HAL_MAX_DELAY) == HAL_OK)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	4619      	mov	r1, r3
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 f8d5 	bl	8001ba0 <_ZN6CEprom17DameDireccionAltaEt>
 80019f6:	4603      	mov	r3, r0
 80019f8:	4619      	mov	r1, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	f04f 33ff 	mov.w	r3, #4294967295
 8001a04:	9302      	str	r3, [sp, #8]
 8001a06:	2304      	movs	r3, #4
 8001a08:	9301      	str	r3, [sp, #4]
 8001a0a:	f107 030c 	add.w	r3, r7, #12
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	2301      	movs	r3, #1
 8001a12:	4817      	ldr	r0, [pc, #92]	@ (8001a70 <_ZN6CEprom11LeeMemoria3Ev+0x90>)
 8001a14:	f00c ffb6 	bl	800e984 <HAL_I2C_Mem_Read>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	bf0c      	ite	eq
 8001a1e:	2301      	moveq	r3, #1
 8001a20:	2300      	movne	r3, #0
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d01e      	beq.n	8001a66 <_ZN6CEprom11LeeMemoria3Ev+0x86>
	{
		Memoria3_Temperatura = datos_r[0];
 8001a28:	89bb      	ldrh	r3, [r7, #12]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	63da      	str	r2, [r3, #60]	@ 0x3c
		Memoria3_VelocidadAire = datos_r[1];
 8001a30:	89fb      	ldrh	r3, [r7, #14]
 8001a32:	461a      	mov	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	641a      	str	r2, [r3, #64]	@ 0x40
		if (Memoria3_Temperatura < 0 || Memoria3_Temperatura > 500)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	db04      	blt.n	8001a4a <_ZN6CEprom11LeeMemoria3Ev+0x6a>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a44:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001a48:	dd02      	ble.n	8001a50 <_ZN6CEprom11LeeMemoria3Ev+0x70>
		{
			Memoria3_Temperatura = 100;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2264      	movs	r2, #100	@ 0x64
 8001a4e:	63da      	str	r2, [r3, #60]	@ 0x3c
		}
		if (Memoria3_VelocidadAire < 0 || Memoria3_VelocidadAire > 100)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	db03      	blt.n	8001a60 <_ZN6CEprom11LeeMemoria3Ev+0x80>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5c:	2b64      	cmp	r3, #100	@ 0x64
 8001a5e:	dd02      	ble.n	8001a66 <_ZN6CEprom11LeeMemoria3Ev+0x86>
		{
			Memoria3_VelocidadAire = 50;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2232      	movs	r2, #50	@ 0x32
 8001a64:	641a      	str	r2, [r3, #64]	@ 0x40
		}
	}
}
 8001a66:	bf00      	nop
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	200003e4 	.word	0x200003e4

08001a74 <_ZN6CEprom25DameDireccionInicioRampasEv>:
	NRampas=nrampas;
	HAL_I2C_Mem_Write(&hi2c1,DameDireccionAlta(DIRNRAMPAS),DIRNRAMPAS,I2C_MEMADD_SIZE_8BIT,(uint8_t*)&NRampas,2,HAL_MAX_DELAY);

}
int CEprom::DameDireccionInicioRampas()
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
	return DIRECCION_INICIO_RAMPAS;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <_ZN6CEprom11GuardaBytesEttPh>:
bool CEprom::GuardaBytes(uint16_t direccion, uint16_t numBytes,uint8_t* bloque)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08c      	sub	sp, #48	@ 0x30
 8001a90:	af04      	add	r7, sp, #16
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	607b      	str	r3, [r7, #4]
 8001a96:	460b      	mov	r3, r1
 8001a98:	817b      	strh	r3, [r7, #10]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	813b      	strh	r3, [r7, #8]
	int dirtmp=direccion;
 8001a9e:	897b      	ldrh	r3, [r7, #10]
 8001aa0:	61fb      	str	r3, [r7, #28]
	for(int x=0;x<numBytes;x++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61bb      	str	r3, [r7, #24]
 8001aa6:	e031      	b.n	8001b0c <_ZN6CEprom11GuardaBytesEttPh+0x80>
	{
		if(HAL_I2C_Mem_Write(&hi2c1,DameDireccionAlta(dirtmp),dirtmp,I2C_MEMADD_SIZE_8BIT,bloque,1,HAL_MAX_DELAY)!= HAL_OK)
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	4619      	mov	r1, r3
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	f000 f876 	bl	8001ba0 <_ZN6CEprom17DameDireccionAltaEt>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac0:	9302      	str	r3, [sp, #8]
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	9301      	str	r3, [sp, #4]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	2301      	movs	r3, #1
 8001acc:	4814      	ldr	r0, [pc, #80]	@ (8001b20 <_ZN6CEprom11GuardaBytesEttPh+0x94>)
 8001ace:	f00c fe5f 	bl	800e790 <HAL_I2C_Mem_Write>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	bf14      	ite	ne
 8001ad8:	2301      	movne	r3, #1
 8001ada:	2300      	moveq	r3, #0
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <_ZN6CEprom11GuardaBytesEttPh+0x5a>
		{
			return false;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e017      	b.n	8001b16 <_ZN6CEprom11GuardaBytesEttPh+0x8a>
		}
		for(int i=0;i<100000;i++);
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	e002      	b.n	8001af2 <_ZN6CEprom11GuardaBytesEttPh+0x66>
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	3301      	adds	r3, #1
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	4a0b      	ldr	r2, [pc, #44]	@ (8001b24 <_ZN6CEprom11GuardaBytesEttPh+0x98>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	ddf8      	ble.n	8001aec <_ZN6CEprom11GuardaBytesEttPh+0x60>
		bloque++;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3301      	adds	r3, #1
 8001afe:	607b      	str	r3, [r7, #4]
		dirtmp++;
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	3301      	adds	r3, #1
 8001b04:	61fb      	str	r3, [r7, #28]
	for(int x=0;x<numBytes;x++)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	61bb      	str	r3, [r7, #24]
 8001b0c:	893b      	ldrh	r3, [r7, #8]
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	dbc9      	blt.n	8001aa8 <_ZN6CEprom11GuardaBytesEttPh+0x1c>
	}
	return true;
 8001b14:	2301      	movs	r3, #1
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3720      	adds	r7, #32
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200003e4 	.word	0x200003e4
 8001b24:	0001869f 	.word	0x0001869f

08001b28 <_ZN6CEprom8LeeBytesEiiPh>:
bool CEprom::LeeBytes(int direccion, int numBytes,uint8_t* bloque)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af04      	add	r7, sp, #16
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
 8001b34:	603b      	str	r3, [r7, #0]
	if(HAL_I2C_Mem_Read(&hi2c1, DameDireccionAlta(direccion), direccion, I2C_MEMADD_SIZE_8BIT,  bloque, numBytes, HAL_MAX_DELAY) == HAL_OK)
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f000 f82f 	bl	8001ba0 <_ZN6CEprom17DameDireccionAltaEt>
 8001b42:	4603      	mov	r3, r0
 8001b44:	4618      	mov	r0, r3
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	f04f 31ff 	mov.w	r1, #4294967295
 8001b52:	9102      	str	r1, [sp, #8]
 8001b54:	9301      	str	r3, [sp, #4]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	4601      	mov	r1, r0
 8001b5e:	4809      	ldr	r0, [pc, #36]	@ (8001b84 <_ZN6CEprom8LeeBytesEiiPh+0x5c>)
 8001b60:	f00c ff10 	bl	800e984 <HAL_I2C_Mem_Read>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	bf0c      	ite	eq
 8001b6a:	2301      	moveq	r3, #1
 8001b6c:	2300      	movne	r3, #0
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <_ZN6CEprom8LeeBytesEiiPh+0x50>
	{
			return true;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e000      	b.n	8001b7a <_ZN6CEprom8LeeBytesEiiPh+0x52>
	}
	return false;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	200003e4 	.word	0x200003e4

08001b88 <_ZN6CEprom26DameCapacidadMaximaMemoriaEv>:
{
	return (direccion+nbytes)<TAM_MAXIMO_MEMORIA;
}

int CEprom::DameCapacidadMaximaMemoria()
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
	return TAM_MAXIMO_MEMORIA;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <_ZN6CEprom17DameDireccionAltaEt>:
uint8_t CEprom::DameDireccionAlta(uint16_t direccion)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	807b      	strh	r3, [r7, #2]
	uint8_t tmp=direccion>>7;
 8001bac:	887b      	ldrh	r3, [r7, #2]
 8001bae:	09db      	lsrs	r3, r3, #7
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	73fb      	strb	r3, [r7, #15]
	tmp=tmp|0xF0;
 8001bb4:	7bfb      	ldrb	r3, [r7, #15]
 8001bb6:	f063 030f 	orn	r3, r3, #15
 8001bba:	73fb      	strb	r3, [r7, #15]
	tmp=tmp&0xAF;
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 8001bc2:	73fb      	strb	r3, [r7, #15]
	return tmp;
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <_ZN8CEncoderC1Ev>:
 *      Author: W10
 */

#include "Encoder/CEncoder.hpp"

CEncoder::CEncoder()
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff fa8a 	bl	80010f8 <_ZN22CManejadorEventosBotonC1Ev>
 8001be4:	4a0e      	ldr	r2, [pc, #56]	@ (8001c20 <_ZN8CEncoderC1Ev+0x4c>)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	629a      	str	r2, [r3, #40]	@ 0x28
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	631a      	str	r2, [r3, #48]	@ 0x30
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2214      	movs	r2, #20
 8001c12:	651a      	str	r2, [r3, #80]	@ 0x50
{
	// TODO Auto-generated constructor stub

}
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	08014d44 	.word	0x08014d44

08001c24 <_ZN8CEncoderD1Ev>:

CEncoder::~CEncoder()
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	4a05      	ldr	r2, [pc, #20]	@ (8001c44 <_ZN8CEncoderD1Ev+0x20>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff fa6f 	bl	8001118 <_ZN22CManejadorEventosBotonD1Ev>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	08014d44 	.word	0x08014d44

08001c48 <_ZN8CEncoderD0Ev>:
CEncoder::~CEncoder()
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
}
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff ffe7 	bl	8001c24 <_ZN8CEncoderD1Ev>
 8001c56:	2154      	movs	r1, #84	@ 0x54
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f00f ff3f 	bl	8011adc <_ZdlPvj>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <_ZN8CEncoder10ConfigurarEP12GPIO_TypeDeftS1_tS1_ti>:

void CEncoder::Configurar(GPIO_TypeDef *clk_Port, uint16_t pinClk,GPIO_TypeDef *dt_Port, uint16_t pinDt, GPIO_TypeDef *boton_Port,uint16_t pinBoton, int id_Encoder)
{
 8001c68:	b590      	push	{r4, r7, lr}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	4613      	mov	r3, r2
 8001c76:	80fb      	strh	r3, [r7, #6]
	Clk_Port = clk_Port;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	68ba      	ldr	r2, [r7, #8]
 8001c7c:	605a      	str	r2, [r3, #4]
	PinClk = pinClk;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	88fa      	ldrh	r2, [r7, #6]
 8001c82:	811a      	strh	r2, [r3, #8]

	Dt_Port = dt_Port;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	60da      	str	r2, [r3, #12]
	PinDt = pinDt;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8c3a      	ldrh	r2, [r7, #32]
 8001c8e:	821a      	strh	r2, [r3, #16]

	Boton_Port = boton_Port;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c94:	615a      	str	r2, [r3, #20]
	PinBoton = pinBoton;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001c9a:	831a      	strh	r2, [r3, #24]

	ID_Encoder = id_Encoder;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ca0:	625a      	str	r2, [r3, #36]	@ 0x24
	Boton = new CManejadorBoton();
 8001ca2:	2020      	movs	r0, #32
 8001ca4:	f00f ff1c 	bl	8011ae0 <_Znwj>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	461c      	mov	r4, r3
 8001cac:	4620      	mov	r0, r4
 8001cae:	f7ff f94b 	bl	8000f48 <_ZN15CManejadorBotonC1Ev>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	61dc      	str	r4, [r3, #28]
	Boton->AsignaManejadorEventos(this);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	4611      	mov	r1, r2
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff f9cc 	bl	800105c <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	Boton->Configurar(Boton_Port, PinBoton, ID_BOTON);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	69d8      	ldr	r0, [r3, #28]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6959      	ldr	r1, [r3, #20]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8b1a      	ldrh	r2, [r3, #24]
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	f7ff f979 	bl	8000fc8 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	CLK_statusAnterior = LeeClk();
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f000 f807 	bl	8001cea <_ZN8CEncoder6LeeClkEv>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	641a      	str	r2, [r3, #64]	@ 0x40

}
 8001ce2:	bf00      	nop
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd90      	pop	{r4, r7, pc}

08001cea <_ZN8CEncoder6LeeClkEv>:

int CEncoder::LeeClk()
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(Clk_Port, PinClk);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685a      	ldr	r2, [r3, #4]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	891b      	ldrh	r3, [r3, #8]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	f00c fbb9 	bl	800e474 <HAL_GPIO_ReadPin>
 8001d02:	4603      	mov	r3, r0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <_ZN8CEncoder5LeeDtEv>:
int CEncoder::LeeDt()
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(Dt_Port, PinDt);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	8a1b      	ldrh	r3, [r3, #16]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4610      	mov	r0, r2
 8001d20:	f00c fba8 	bl	800e474 <HAL_GPIO_ReadPin>
 8001d24:	4603      	mov	r3, r0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <_ZN8CEncoder4InitEv>:

void CEncoder::Init()
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b088      	sub	sp, #32
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 8001d36:	f107 030c 	add.w	r3, r7, #12
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]
 8001d42:	60da      	str	r2, [r3, #12]
 8001d44:	611a      	str	r2, [r3, #16]
	{ 0 };
	// CKL
	GPIO_InitStruct.Pin = PinClk;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	891b      	ldrh	r3, [r3, #8]
 8001d4a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode =GPIO_MODE_IT_RISING_FALLING;
 8001d4c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001d50:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(Clk_Port, &GPIO_InitStruct);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f107 020c 	add.w	r2, r7, #12
 8001d5e:	4611      	mov	r1, r2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f00c fa03 	bl	800e16c <HAL_GPIO_Init>
	//DT
	GPIO_InitStruct.Pin = PinDt;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	8a1b      	ldrh	r3, [r3, #16]
 8001d6a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(Dt_Port, &GPIO_InitStruct);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	f107 020c 	add.w	r2, r7, #12
 8001d7c:	4611      	mov	r1, r2
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f00c f9f4 	bl	800e16c <HAL_GPIO_Init>
	//Boton
	GPIO_InitStruct.Pin = PinBoton;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	8b1b      	ldrh	r3, [r3, #24]
 8001d88:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(Boton_Port, &GPIO_InitStruct);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	f107 020c 	add.w	r2, r7, #12
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f00c f9e5 	bl	800e16c <HAL_GPIO_Init>
}
 8001da2:	bf00      	nop
 8001da4:	3720      	adds	r7, #32
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <_ZN8CEncoder22AsignaManejadorEventosEP24CManejadorEventosEncoder>:

void CEncoder::AsignaManejadorEventos(CManejadorEventosEncoder *manejador)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
 8001db2:	6039      	str	r1, [r7, #0]
	Manejador = manejador;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	621a      	str	r2, [r3, #32]
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <_ZN8CEncoder17OnBotonClickEventEi>:
void CEncoder::OnBotonClickEvent(int idBoton)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	6039      	str	r1, [r7, #0]

	switch (idBoton)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d10b      	bne.n	8001dee <_ZN8CEncoder17OnBotonClickEventEi+0x28>
	{
	case ID_BOTON:
		Manejador->OnBotonEncoderClickEvent(ID_Encoder);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a18      	ldr	r0, [r3, #32]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	3310      	adds	r3, #16
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001de8:	4611      	mov	r1, r2
 8001dea:	4798      	blx	r3
		break;
 8001dec:	bf00      	nop
	}
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <_ZN8CEncoder7ProcesaEi>:

void CEncoder::Procesa(int gpio_pin)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	6039      	str	r1, [r7, #0]
	Boton->Procesa(gpio_pin);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69db      	ldr	r3, [r3, #28]
 8001e04:	6839      	ldr	r1, [r7, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff f936 	bl	8001078 <_ZN15CManejadorBoton7ProcesaEi>
	leeEncoder(gpio_pin);
 8001e0c:	6839      	ldr	r1, [r7, #0]
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f804 	bl	8001e1c <_ZN8CEncoder10leeEncoderEi>
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <_ZN8CEncoder10leeEncoderEi>:

void CEncoder::leeEncoder(int gpio_pin)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
	if(PinClk!=gpio_pin)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	891b      	ldrh	r3, [r3, #8]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d132      	bne.n	8001e98 <_ZN8CEncoder10leeEncoderEi+0x7c>
	{
		ReboteMilis = HAL_GetTick();  //leo el tiempo actual
	}
	while((tiempo - ReboteMilis) < TiempoReboteEncoder);
	*/
	for(int i=8000;i>0;i--);
 8001e32:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	e002      	b.n	8001e40 <_ZN8CEncoder10leeEncoderEi+0x24>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	dcf9      	bgt.n	8001e3a <_ZN8CEncoder10leeEncoderEi+0x1e>
	CLK_status = LeeClk();
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff ff4f 	bl	8001cea <_ZN8CEncoder6LeeClkEv>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	629a      	str	r2, [r3, #40]	@ 0x28
	if (CLK_status != CLK_statusAnterior && CLK_status == 1)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d017      	beq.n	8001e8e <_ZN8CEncoder10leeEncoderEi+0x72>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d113      	bne.n	8001e8e <_ZN8CEncoder10leeEncoderEi+0x72>
	{
		if (LeeDt() != CLK_status)
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff ff50 	bl	8001d0c <_ZN8CEncoder5LeeDtEv>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e72:	429a      	cmp	r2, r3
 8001e74:	bf14      	ite	ne
 8001e76:	2301      	movne	r3, #1
 8001e78:	2300      	moveq	r3, #0
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <_ZN8CEncoder10leeEncoderEi+0x6c>
		{
			incrementa();
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 f80d 	bl	8001ea0 <_ZN8CEncoder10incrementaEv>
 8001e86:	e002      	b.n	8001e8e <_ZN8CEncoder10leeEncoderEi+0x72>
		}
		else
		{
			decrementa();
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 f81c 	bl	8001ec6 <_ZN8CEncoder10decrementaEv>
		}
	}
	CLK_statusAnterior = CLK_status;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e96:	e000      	b.n	8001e9a <_ZN8CEncoder10leeEncoderEi+0x7e>
		return;
 8001e98:	bf00      	nop
}
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <_ZN8CEncoder10incrementaEv>:

void CEncoder::incrementa()
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
	Manejador->OnIncrementoEncoder(ID_Encoder);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a18      	ldr	r0, [r3, #32]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	3308      	adds	r3, #8
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001eba:	4611      	mov	r1, r2
 8001ebc:	4798      	blx	r3
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <_ZN8CEncoder10decrementaEv>:

void CEncoder::decrementa()
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
	Manejador->OnDecrementoEncoder(ID_Encoder);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a18      	ldr	r0, [r3, #32]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	330c      	adds	r3, #12
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	4798      	blx	r3
}
 8001ee4:	bf00      	nop
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <_ZN24CManejadorEventosEncoderC1Ev>:
 *      Author: W10
 */

#include <Encoder/CManejadorEventosEncoder.hpp>

CManejadorEventosEncoder::CManejadorEventosEncoder()
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	4a04      	ldr	r2, [pc, #16]	@ (8001f08 <_ZN24CManejadorEventosEncoderC1Ev+0x1c>)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4618      	mov	r0, r3
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	08014d5c 	.word	0x08014d5c

08001f0c <_ZN24CManejadorEventosEncoderD1Ev>:

CManejadorEventosEncoder::~CManejadorEventosEncoder()
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	4a04      	ldr	r2, [pc, #16]	@ (8001f28 <_ZN24CManejadorEventosEncoderD1Ev+0x1c>)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	08014d5c 	.word	0x08014d5c

08001f2c <_ZN24CManejadorEventosEncoderD0Ev>:
CManejadorEventosEncoder::~CManejadorEventosEncoder()
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
}
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff ffe9 	bl	8001f0c <_ZN24CManejadorEventosEncoderD1Ev>
 8001f3a:	2104      	movs	r1, #4
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f00f fdcd 	bl	8011adc <_ZdlPvj>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4618      	mov	r0, r3
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <_ZN24CManejadorEventosEncoder19OnIncrementoEncoderEi>:

void CManejadorEventosEncoder::OnIncrementoEncoder(int id_Encoder)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]

}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <_ZN24CManejadorEventosEncoder19OnDecrementoEncoderEi>:
void CManejadorEventosEncoder::OnDecrementoEncoder(int id_Encoder)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	6039      	str	r1, [r7, #0]

}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <_ZN24CManejadorEventosEncoder24OnBotonEncoderClickEventEi>:
void CManejadorEventosEncoder::OnBotonEncoderClickEvent(int id_Encoder)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]

}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
	...

08001f90 <_ZN13CEstacionBaseC1Ev>:
 *      Author: W10
 */

#include <Estaciones/CEstacionBase.hpp>

CEstacionBase::CEstacionBase()
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	4a06      	ldr	r2, [pc, #24]	@ (8001fb4 <_ZN13CEstacionBaseC1Ev+0x24>)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	605a      	str	r2, [r3, #4]
{
	// TODO Auto-generated constructor stub

}
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	08014d78 	.word	0x08014d78

08001fb8 <_ZN13CEstacionBaseD1Ev>:

CEstacionBase::~CEstacionBase()
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	4a04      	ldr	r2, [pc, #16]	@ (8001fd4 <_ZN13CEstacionBaseD1Ev+0x1c>)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	08014d78 	.word	0x08014d78

08001fd8 <_ZN13CEstacionBaseD0Ev>:
CEstacionBase::~CEstacionBase()
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
}
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff ffe9 	bl	8001fb8 <_ZN13CEstacionBaseD1Ev>
 8001fe6:	2108      	movs	r1, #8
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f00f fd77 	bl	8011adc <_ZdlPvj>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <_ZN13CEstacionBase19GetTemperaturaRealxEv>:

float CEstacionBase::GetTemperaturaRealx() //regresa la tenperatura actual de la estacion
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
	return 0;
 8002000:	f04f 0300 	mov.w	r3, #0
 8002004:	ee07 3a90 	vmov	s15, r3
}
 8002008:	eeb0 0a67 	vmov.f32	s0, s15
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <_ZN13CEstacionBase14SetTemperaturaEi>:
void CEstacionBase::SetTemperatura(int temperatura) //establece la temperatura que se quiere alcanzar
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	6039      	str	r1, [r7, #0]

}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <_ZN13CEstacionBase14GetTemperaturaEv>:
int CEstacionBase::GetTemperatura() // regresa la temperatura seteada
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
	return 0;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <_ZN13CEstacionBase12SetNivelAireEi>:
void CEstacionBase::SetNivelAire(int nivel) //establece el nivel de aire
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	6039      	str	r1, [r7, #0]

}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <_ZN13CEstacionBase12GetNivelAireEv>:
int CEstacionBase::GetNivelAire() //regresa el nivel de aire setado
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
	return 0;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <_ZN13CEstacionBase9GetEstadoEv>:
int CEstacionBase::GetEstado() //regresa 1 si esta activo y 0 si esta en reposo
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
	return 0;
 8002076:	2300      	movs	r3, #0

}
 8002078:	4618      	mov	r0, r3
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <_ZN13CEstacionBase21IncrementaTemperaturaEv>:
//para que la misma estacion incremente la temperatura
void CEstacionBase::IncrementaTemperatura()
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]

}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <_ZN13CEstacionBase21DecrementaTemperaturaEv>:
//para que la misma estacion decremente la temeperatura
void CEstacionBase::DecrementaTemperatura()
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]

}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <_ZN13CEstacionBase21SetManejadorControlesEP26CManejadorEventosControles>:
// asigna el evento que sellamara cuando cambie la temperatura que el usuario especifica
void CEstacionBase::SetManejadorControles(CManejadorEventosControles *obj)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
	ManejadorControles = obj;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	605a      	str	r2, [r3, #4]
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <_ZN13CEstacionBase7ProcesaEv>:
//funcion que se debera llamar para controlar la estacion de calor
void CEstacionBase::Procesa()
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]

}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <_ZN13CEstacionBase14NivelAireEventEi>:
void CEstacionBase::NivelAireEvent(int aire)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00a      	beq.n	8002104 <_ZN13CEstacionBase14NivelAireEventEi+0x28>
		return;
	ManejadorControles->OnNivelAireEvent(aire);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	330c      	adds	r3, #12
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6839      	ldr	r1, [r7, #0]
 80020fe:	4610      	mov	r0, r2
 8002100:	4798      	blx	r3
 8002102:	e000      	b.n	8002106 <_ZN13CEstacionBase14NivelAireEventEi+0x2a>
		return;
 8002104:	bf00      	nop
}
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <_ZN13CEstacionBase20TemperaturaRealEventEi>:
void CEstacionBase::TemperaturaRealEvent(int temperatura)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00a      	beq.n	8002134 <_ZN13CEstacionBase20TemperaturaRealEventEi+0x28>
		return;
	ManejadorControles->OnTemperaturaRealEvent(temperatura);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	3308      	adds	r3, #8
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6839      	ldr	r1, [r7, #0]
 800212e:	4610      	mov	r0, r2
 8002130:	4798      	blx	r3
 8002132:	e000      	b.n	8002136 <_ZN13CEstacionBase20TemperaturaRealEventEi+0x2a>
		return;
 8002134:	bf00      	nop

}
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <_ZN13CEstacionBase17ActivarCalefactorEv>:
void CEstacionBase::ActivarCalefactor()
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]

}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <_ZN13CEstacionBase20DesactivarCalefactorEv>:
void CEstacionBase::DesactivarCalefactor()
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]

}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <_ZN13CEstacionBase10CruceXCeroEi>:
void CEstacionBase::CruceXCero(int gpio_pin)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]

}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <_ZN13CEstacionBase9TimerTickEv>:
void CEstacionBase::TimerTick()
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]

}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <_ZN13CEstacionBase6GetPIDEv>:
int CEstacionBase::GetPID()
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
	return 0;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <_ZN13CEstacionBase6SetPIDEi>:
void CEstacionBase::SetPID(int valor)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]

}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <_ZN13CEstacionBase17GPIO_INTERRUPCIONEi>:
void CEstacionBase::GPIO_INTERRUPCION(int GPIO_Pin)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	6039      	str	r1, [r7, #0]

}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <_ZN13CEstacionBase23QuitaManejadorControlesEv>:
void CEstacionBase::QuitaManejadorControles()
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
	ManejadorControles = NULL;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	605a      	str	r2, [r3, #4]
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <_ZN13CEstacionBase19EnfriaYApagaPistolaEv>:
void CEstacionBase::EnfriaYApagaPistola()
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]

}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <_ZN16CestacionBaku601D1Ev>:
#include "Constantes.hpp"
#include "Uart/Uart.hpp"
#include "SensorTemperatura/Max6675/MAX6675.hpp"
#include <SensorTemperatura/SensorAnalogico.hpp>

CestacionBaku601::~CestacionBaku601()
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	4a11      	ldr	r2, [pc, #68]	@ (8002250 <_ZN16CestacionBaku601D1Ev+0x50>)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	4a11      	ldr	r2, [pc, #68]	@ (8002254 <_ZN16CestacionBaku601D1Ev+0x54>)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	609a      	str	r2, [r3, #8]
{
	// TODO Auto-generated destructor stub
}
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	33cc      	adds	r3, #204	@ 0xcc
 8002218:	4618      	mov	r0, r3
 800221a:	f009 fd67 	bl	800bcec <_ZN15SensorMagneticoD1Ev>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	33bc      	adds	r3, #188	@ 0xbc
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe ffb8 	bl	8001198 <_ZN10CalefactorD1Ev>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3370      	adds	r3, #112	@ 0x70
 800222c:	4618      	mov	r0, r3
 800222e:	f008 facd 	bl	800a7cc <_ZN3PwmD1Ev>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3308      	adds	r3, #8
 8002236:	4618      	mov	r0, r3
 8002238:	f009 fd10 	bl	800bc5c <_ZN31CManejadorEventoSensorMagneticoD1Ev>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff feba 	bl	8001fb8 <_ZN13CEstacionBaseD1Ev>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	08014ddc 	.word	0x08014ddc
 8002254:	08014e44 	.word	0x08014e44

08002258 <_ZThn8_N16CestacionBaku601D1Ev>:
	int NivelAire=0;
	float TemperaturaRealActual;
	int conteolecturatemperatura=0;
public:
	CestacionBaku601();
	virtual ~CestacionBaku601();
 8002258:	f1a0 0008 	sub.w	r0, r0, #8
 800225c:	f7ff bfd0 	b.w	8002200 <_ZN16CestacionBaku601D1Ev>

08002260 <_ZN16CestacionBaku601D0Ev>:
CestacionBaku601::~CestacionBaku601()
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
}
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff ffc9 	bl	8002200 <_ZN16CestacionBaku601D1Ev>
 800226e:	21f8      	movs	r1, #248	@ 0xf8
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f00f fc33 	bl	8011adc <_ZdlPvj>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <_ZThn8_N16CestacionBaku601D0Ev>:
 8002280:	f1a0 0008 	sub.w	r0, r0, #8
 8002284:	f7ff bfec 	b.w	8002260 <_ZN16CestacionBaku601D0Ev>

08002288 <_ZN16CestacionBaku60132IniciaSensorTemperaturaAnalogicoEv>:
	max6675->SetConfigCsPin(GPIOA, GPIO_PIN_2);
	max6675->SetConfigDatPin(GPIOA, GPIO_PIN_0);
	thermocouple = max6675;
}
void CestacionBaku601::IniciaSensorTemperaturaAnalogico()
{
 8002288:	b590      	push	{r4, r7, lr}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
	SensorAnalogico *sensorTemeratura = new SensorAnalogico();
 8002290:	2054      	movs	r0, #84	@ 0x54
 8002292:	f00f fc25 	bl	8011ae0 <_Znwj>
 8002296:	4603      	mov	r3, r0
 8002298:	461c      	mov	r4, r3
 800229a:	4620      	mov	r0, r4
 800229c:	f009 fdde 	bl	800be5c <_ZN15SensorAnalogicoC1Ev>
 80022a0:	60fc      	str	r4, [r7, #12]
	thermocouple = sensorTemeratura;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 80022a8:	bf00      	nop
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd90      	pop	{r4, r7, pc}

080022b0 <_ZN16CestacionBaku601C1Ev>:
CestacionBaku601::CestacionBaku601() :
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
		CEstacionBase()
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff fe68 	bl	8001f90 <_ZN13CEstacionBaseC1Ev>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3308      	adds	r3, #8
 80022c4:	4618      	mov	r0, r3
 80022c6:	f009 fcb9 	bl	800bc3c <_ZN31CManejadorEventoSensorMagneticoC1Ev>
 80022ca:	4a50      	ldr	r2, [pc, #320]	@ (800240c <_ZN16CestacionBaku601C1Ev+0x15c>)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	4a4f      	ldr	r2, [pc, #316]	@ (8002410 <_ZN16CestacionBaku601C1Ev+0x160>)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	609a      	str	r2, [r3, #8]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80022dc:	60da      	str	r2, [r3, #12]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2264      	movs	r2, #100	@ 0x64
 80022e2:	611a      	str	r2, [r3, #16]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	615a      	str	r2, [r3, #20]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	619a      	str	r2, [r3, #24]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	61da      	str	r2, [r3, #28]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	f04f 0200 	mov.w	r2, #0
 80022fc:	f04f 0300 	mov.w	r3, #0
 8002300:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2205      	movs	r2, #5
 8002308:	629a      	str	r2, [r3, #40]	@ 0x28
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002316:	631a      	str	r2, [r3, #48]	@ 0x30
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	635a      	str	r2, [r3, #52]	@ 0x34
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	639a      	str	r2, [r3, #56]	@ 0x38
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	641a      	str	r2, [r3, #64]	@ 0x40
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f04f 0200 	mov.w	r2, #0
 8002332:	645a      	str	r2, [r3, #68]	@ 0x44
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a37      	ldr	r2, [pc, #220]	@ (8002414 <_ZN16CestacionBaku601C1Ev+0x164>)
 8002338:	649a      	str	r2, [r3, #72]	@ 0x48
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a36      	ldr	r2, [pc, #216]	@ (8002418 <_ZN16CestacionBaku601C1Ev+0x168>)
 800233e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	651a      	str	r2, [r3, #80]	@ 0x50
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	655a      	str	r2, [r3, #84]	@ 0x54
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2208      	movs	r2, #8
 8002350:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	220b      	movs	r2, #11
 8002356:	661a      	str	r2, [r3, #96]	@ 0x60
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	220c      	movs	r2, #12
 800235c:	665a      	str	r2, [r3, #100]	@ 0x64
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	669a      	str	r2, [r3, #104]	@ 0x68
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3370      	adds	r3, #112	@ 0x70
 8002368:	4618      	mov	r0, r3
 800236a:	f008 fa1f 	bl	800a7ac <_ZN3PwmC1Ev>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	33bc      	adds	r3, #188	@ 0xbc
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe fefc 	bl	8001170 <_ZN10CalefactorC1Ev>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	33cc      	adds	r3, #204	@ 0xcc
 800237c:	4618      	mov	r0, r3
 800237e:	f009 fc99 	bl	800bcb4 <_ZN15SensorMagneticoC1Ev>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
{
	pwm.Init(TIM2, TIM_CHANNEL_1, 65535);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8002398:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800239c:	2200      	movs	r2, #0
 800239e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80023a2:	f008 fa33 	bl	800a80c <_ZN3Pwm4InitEP11TIM_TypeDefii>
	IniciaSensorTemperaturaAnalogico();
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff ff6e 	bl	8002288 <_ZN16CestacionBaku60132IniciaSensorTemperaturaAnalogicoEv>
	thermocouple->Init();
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	3308      	adds	r3, #8
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4610      	mov	r0, r2
 80023bc:	4798      	blx	r3

	calefactor.Configurar(GPIOB, GPIO_PIN_3);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	33bc      	adds	r3, #188	@ 0xbc
 80023c2:	2208      	movs	r2, #8
 80023c4:	4915      	ldr	r1, [pc, #84]	@ (800241c <_ZN16CestacionBaku601C1Ev+0x16c>)
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7fe ff06 	bl	80011d8 <_ZN10Calefactor10ConfigurarEP12GPIO_TypeDeft>
	calefactor.Init();
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	33bc      	adds	r3, #188	@ 0xbc
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7fe ff14 	bl	80011fe <_ZN10Calefactor4InitEv>
	sensorMagnetico.Configurar(GPIOB, GPIO_PIN_5);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	33cc      	adds	r3, #204	@ 0xcc
 80023da:	2220      	movs	r2, #32
 80023dc:	490f      	ldr	r1, [pc, #60]	@ (800241c <_ZN16CestacionBaku601C1Ev+0x16c>)
 80023de:	4618      	mov	r0, r3
 80023e0:	f009 fca4 	bl	800bd2c <_ZN15SensorMagnetico10ConfigurarEP12GPIO_TypeDeft>
	sensorMagnetico.Init();
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	33cc      	adds	r3, #204	@ 0xcc
 80023e8:	4618      	mov	r0, r3
 80023ea:	f009 fcb2 	bl	800bd52 <_ZN15SensorMagnetico4InitEv>
	sensorMagnetico.AsignaManejadorEventos(this);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3308      	adds	r3, #8
 80023f8:	4619      	mov	r1, r3
 80023fa:	4610      	mov	r0, r2
 80023fc:	f009 fcc8 	bl	800bd90 <_ZN15SensorMagnetico22AsignaManejadorEventosEP31CManejadorEventoSensorMagnetico>

}
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	08014ddc 	.word	0x08014ddc
 8002410:	08014e44 	.word	0x08014e44
 8002414:	42c80000 	.word	0x42c80000
 8002418:	447a0000 	.word	0x447a0000
 800241c:	40020400 	.word	0x40020400

08002420 <_ZN16CestacionBaku60119GetTemperaturaRealxEv>:

//regresa la tenperatura actual de la estacion
float CestacionBaku601::GetTemperaturaRealx()
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
	//return //TemperaturaRealActual;//
	return thermocouple->LeeTemepatura(); //* .59;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	330c      	adds	r3, #12
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4610      	mov	r0, r2
 8002438:	4798      	blx	r3
 800243a:	ee07 0a90 	vmov	s15, r0
 800243e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8002442:	eeb0 0a67 	vmov.f32	s0, s15
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <_ZN16CestacionBaku60114SetTemperaturaEi>:

//establece la temperatura que se quiere alcanzar
void CestacionBaku601::SetTemperatura(int temperatura)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
	TemperaturaEspecificada = temperatura;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	611a      	str	r2, [r3, #16]
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <_ZN16CestacionBaku60114GetTemperaturaEv>:

// regresa la temperatura seteada
int CestacionBaku601::GetTemperatura()
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
	return TemperaturaEspecificada;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
}
 8002474:	4618      	mov	r0, r3
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <_ZN16CestacionBaku60112SetNivelAireEi>:

//establece el nivel de aire
void CestacionBaku601::SetNivelAire(int nivel)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
	NivelAire = nivel;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <_ZN16CestacionBaku60112GetNivelAireEv>:
int CestacionBaku601::GetNivelAire()
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
	return NivelAire;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <_ZN16CestacionBaku6019GetEstadoEv>:

//regresa 1 si esta activo y 0 si esta en reposo
int CestacionBaku601::GetEstado()
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
	return sensorMagnetico.Leer();
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	33cc      	adds	r3, #204	@ 0xcc
 80024c4:	4618      	mov	r0, r3
 80024c6:	f009 fc71 	bl	800bdac <_ZN15SensorMagnetico4LeerEv>
 80024ca:	4603      	mov	r3, r0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <_ZN16CestacionBaku60121IncrementaTemperaturaEv>:

void CestacionBaku601::IncrementaTemperatura()
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
	if (TemperaturaEspecificada > TemperaturaMaxima)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691a      	ldr	r2, [r3, #16]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	dd03      	ble.n	80024f0 <_ZN16CestacionBaku60121IncrementaTemperaturaEv+0x1c>
	{
		TemperaturaEspecificada = TemperaturaMaxima;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	611a      	str	r2, [r3, #16]
	}
	TemperaturaEspecificada++;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	1c5a      	adds	r2, r3, #1
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	611a      	str	r2, [r3, #16]
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <_ZN16CestacionBaku60121DecrementaTemperaturaEv>:

void CestacionBaku601::DecrementaTemperatura()
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
	if (TemperaturaEspecificada > 0)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	2b00      	cmp	r3, #0
 8002514:	dd04      	ble.n	8002520 <_ZN16CestacionBaku60121DecrementaTemperaturaEv+0x1a>
	{
		TemperaturaEspecificada--;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	1e5a      	subs	r2, r3, #1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	611a      	str	r2, [r3, #16]
	}
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <_ZN16CestacionBaku60117ActivarCalefactorEv>:

void CestacionBaku601::ActivarCalefactor()
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
	EstadoCalefator = ENCENDIDO;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <_ZN16CestacionBaku60120DesactivarCalefactorEv>:

void CestacionBaku601::DesactivarCalefactor()
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
	EstadoCalefator = APAGADO;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <_ZN16CestacionBaku60123OnSensorMagneticoChangeEi>:

void CestacionBaku601::OnSensorMagneticoChange(int estado)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]

}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <_ZThn8_N16CestacionBaku60123OnSensorMagneticoChangeEi>:
	void ProcesaTemperaturaReal();
	//eventros del encoder
	virtual void IncrementaTemperatura();
	virtual void DecrementaTemperatura();
	void ProcesaCalefactor();
	virtual void OnSensorMagneticoChange(int estado);
 8002576:	f1a0 0008 	sub.w	r0, r0, #8
 800257a:	f7ff bff1 	b.w	8002560 <_ZN16CestacionBaku60123OnSensorMagneticoChangeEi>

0800257e <_ZN16CestacionBaku6017ProcesaEv>:

void CestacionBaku601::Procesa()
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
	ProcesaTemperatura();
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f80a 	bl	80025a0 <_ZN16CestacionBaku60118ProcesaTemperaturaEv>
	procesaAire();
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 f81e 	bl	80025ce <_ZN16CestacionBaku60111procesaAireEv>
	ProcesaCalefactor();
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f83b 	bl	800260e <_ZN16CestacionBaku60117ProcesaCalefactorEv>
}
 8002598:	bf00      	nop
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <_ZN16CestacionBaku60118ProcesaTemperaturaEv>:

//verifica el nivel de temperatura seleccinada por el usuario
void CestacionBaku601::ProcesaTemperatura()
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
	//leo la temperatura
	int temp = GetTemperatura();
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	3310      	adds	r3, #16
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	4798      	blx	r3
 80025b4:	60f8      	str	r0, [r7, #12]
	//veo si cambio
	if (temperaturaAnterior != temp)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d002      	beq.n	80025c6 <_ZN16CestacionBaku60118ProcesaTemperaturaEv+0x26>
	{
		temperaturaAnterior = temp;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	615a      	str	r2, [r3, #20]
	}
}
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <_ZN16CestacionBaku60111procesaAireEv>:
{
}

//verifica elnivel de aire
void CestacionBaku601::procesaAire()
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b084      	sub	sp, #16
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
	int aire = GetNivelAire();
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	3318      	adds	r3, #24
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	4798      	blx	r3
 80025e2:	60f8      	str	r0, [r7, #12]
	if (AireAnterior != aire)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d00b      	beq.n	8002606 <_ZN16CestacionBaku60111procesaAireEv+0x38>
	{
		AireAnterior = aire;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	61da      	str	r2, [r3, #28]
		NivelAireEvent(AireAnterior);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	3350      	adds	r3, #80	@ 0x50
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	69d2      	ldr	r2, [r2, #28]
 8002602:	4611      	mov	r1, r2
 8002604:	4798      	blx	r3
	}
}
 8002606:	bf00      	nop
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <_ZN16CestacionBaku60117ProcesaCalefactorEv>:

void CestacionBaku601::ProcesaCalefactor()
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b084      	sub	sp, #16
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
	if (EstadoCalefator == APAGADO)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800261a:	2b00      	cmp	r3, #0
 800261c:	d106      	bne.n	800262c <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x1e>
	{
		//esta apagado el calefactor
		//PotenciaCalefactor = 0;
		//calefactor.Apagar();
		EnfriaYApagaPistola();
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	334c      	adds	r3, #76	@ 0x4c
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	4798      	blx	r3
		return;
 800262a:	e096      	b.n	800275a <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x14c>
	}
	EstadoSensorMagnetico = sensorMagnetico.Leer();
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	33cc      	adds	r3, #204	@ 0xcc
 8002630:	4618      	mov	r0, r3
 8002632:	f009 fbbb 	bl	800bdac <_ZN15SensorMagnetico4LeerEv>
 8002636:	4602      	mov	r2, r0
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	659a      	str	r2, [r3, #88]	@ 0x58
	if (EstadoSensorMagnetico == BOTON_PRESIONADO)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002640:	2b00      	cmp	r3, #0
 8002642:	d106      	bne.n	8002652 <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x44>
	{
		//el usuario coloco la pistola en su base por lo que hay que enfriarla
		EnfriaYApagaPistola();
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	334c      	adds	r3, #76	@ 0x4c
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	4798      	blx	r3
		return;
 8002650:	e083      	b.n	800275a <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x14c>
	}
	TiempoEnfriando = 0;
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	f04f 0300 	mov.w	r3, #0
 800265c:	e9c1 2308 	strd	r2, r3, [r1, #32]
	//enciendo el aire
	int aire = GetNivelAire();
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	3318      	adds	r3, #24
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	4798      	blx	r3
 800266c:	60f8      	str	r0, [r7, #12]
	pwm.SicloTrabajo(aire);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3370      	adds	r3, #112	@ 0x70
 8002672:	68f9      	ldr	r1, [r7, #12]
 8002674:	4618      	mov	r0, r3
 8002676:	f008 f96f 	bl	800a958 <_ZN3Pwm12SicloTrabajoEi>
	//aqui se hace al calculo del PID
	//veo si ya paso el tiempo para hacer el muestreo
	TiempoActual = HAL_GetTick(); //me trae el tiempo en milisegundos
 800267a:	f00b f901 	bl	800d880 <HAL_GetTick>
 800267e:	4603      	mov	r3, r0
 8002680:	461a      	mov	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	635a      	str	r2, [r3, #52]	@ 0x34
	if (TiempoActual < TiempoProximoMuestreo)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800268e:	429a      	cmp	r2, r3
 8002690:	db62      	blt.n	8002758 <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x14a>
	{
		//a un no ha paso el tiempo para
		return;
	}
	//calculo el siguiente tiempo de muestreo
	TiempoProximoMuestreo = TiempoActual + TiempoMuestreoTemperatura;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	441a      	add	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	639a      	str	r2, [r3, #56]	@ 0x38
	TemperaturaRealActual = GetTemperaturaRealx();
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	3308      	adds	r3, #8
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	4798      	blx	r3
 80026ac:	eef0 7a40 	vmov.f32	s15, s0
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	edc3 7a3b 	vstr	s15, [r3, #236]	@ 0xec
	int temperatura = TemperaturaRealActual;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	edd3 7a3b 	vldr	s15, [r3, #236]	@ 0xec
 80026bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026c0:	ee17 3a90 	vmov	r3, s15
 80026c4:	60bb      	str	r3, [r7, #8]
	PID_error = TemperaturaEspecificada - temperatura;                       //Calculo del error
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	691a      	ldr	r2, [r3, #16]
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	ee07 3a90 	vmov	s15, r3
 80026d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	Error_INT = Error_INT + PID_error * (1000 / TiempoMuestreoTemperatura);  //Calculo de la integral del error
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80026f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80026f4:	ee07 3a90 	vmov	s15, r3
 80026f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002700:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	PID_value = Kc * (PID_error + (1 / Tao_I) * Error_INT) / 10;   //Calculo de la salida del controlador PI
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800271c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8002720:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800272a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800272e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002732:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002736:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800273a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	//asigno la potencia del calefactor
	PotenciaCalefactor = PID_value;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800274a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800274e:	ee17 2a90 	vmov	r2, s15
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	629a      	str	r2, [r3, #40]	@ 0x28
 8002756:	e000      	b.n	800275a <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x14c>
		return;
 8002758:	bf00      	nop
}
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv>:

void CestacionBaku601::EnfriaYApagaPistola()
{
 8002760:	b590      	push	{r4, r7, lr}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
	PotenciaCalefactor = 0; //bajo toda la potencia
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	629a      	str	r2, [r3, #40]	@ 0x28
	float temperatura = GetTemperaturaRealx();
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	3308      	adds	r3, #8
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	4798      	blx	r3
 800277a:	ed87 0a03 	vstr	s0, [r7, #12]
	if (temperatura <= TEMPERATURA_APAGADO)
 800277e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002782:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002786:	eef4 7ac7 	vcmpe.f32	s15, s14
 800278a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800278e:	d83c      	bhi.n	800280a <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xaa>
	{
		if (TiempoEnfriando == 0)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	f04f 0300 	mov.w	r3, #0
 800279e:	f7fe f99b 	bl	8000ad8 <__aeabi_dcmpeq>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00b      	beq.n	80027c0 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0x60>
		{
			TiempoEnfriando = HAL_GetTick();
 80027a8:	f00b f86a 	bl	800d880 <HAL_GetTick>
 80027ac:	4603      	mov	r3, r0
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7fd feb0 	bl	8000514 <__aeabi_ui2d>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	e9c1 2308 	strd	r2, r3, [r1, #32]
			return;
 80027be:	e035      	b.n	800282c <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xcc>
		}
		if (HAL_GetTick() - TiempoEnfriando <= 10000)
 80027c0:	f00b f85e 	bl	800d880 <HAL_GetTick>
 80027c4:	4603      	mov	r3, r0
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fd fea4 	bl	8000514 <__aeabi_ui2d>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80027d2:	f7fd fd61 	bl	8000298 <__aeabi_dsub>
 80027d6:	4602      	mov	r2, r0
 80027d8:	460b      	mov	r3, r1
 80027da:	4610      	mov	r0, r2
 80027dc:	4619      	mov	r1, r3
 80027de:	2301      	movs	r3, #1
 80027e0:	461c      	mov	r4, r3
 80027e2:	a315      	add	r3, pc, #84	@ (adr r3, 8002838 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xd8>)
 80027e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e8:	f7fe f98a 	bl	8000b00 <__aeabi_dcmple>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0x96>
 80027f2:	2300      	movs	r3, #0
 80027f4:	461c      	mov	r4, r3
 80027f6:	b2e3      	uxtb	r3, r4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d116      	bne.n	800282a <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xca>
		{
			return;
		}
		pwm.SicloTrabajo(0);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3370      	adds	r3, #112	@ 0x70
 8002800:	2100      	movs	r1, #0
 8002802:	4618      	mov	r0, r3
 8002804:	f008 f8a8 	bl	800a958 <_ZN3Pwm12SicloTrabajoEi>
		return;
 8002808:	e010      	b.n	800282c <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xcc>
	}
	//pongo al maximo el aire para enfriar la pistola
	if (temperatura > 10)
 800280a:	edd7 7a03 	vldr	s15, [r7, #12]
 800280e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002812:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800281a:	dd07      	ble.n	800282c <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xcc>
	{
		pwm.SicloTrabajo(100);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3370      	adds	r3, #112	@ 0x70
 8002820:	2164      	movs	r1, #100	@ 0x64
 8002822:	4618      	mov	r0, r3
 8002824:	f008 f898 	bl	800a958 <_ZN3Pwm12SicloTrabajoEi>
 8002828:	e000      	b.n	800282c <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xcc>
			return;
 800282a:	bf00      	nop
	}
}
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	bd90      	pop	{r4, r7, pc}
 8002832:	bf00      	nop
 8002834:	f3af 8000 	nop.w
 8002838:	00000000 	.word	0x00000000
 800283c:	40c38800 	.word	0x40c38800

08002840 <_ZN16CestacionBaku60110CruceXCeroEi>:
void CestacionBaku601::CruceXCero(int gpio_pin)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
	if (EstadoSensorMagnetico == BOTON_PRESIONADO)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800284e:	2b00      	cmp	r3, #0
 8002850:	d105      	bne.n	800285e <_ZN16CestacionBaku60110CruceXCeroEi+0x1e>
	{
		calefactor.Apagar();
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	33bc      	adds	r3, #188	@ 0xbc
 8002856:	4618      	mov	r0, r3
 8002858:	f7fe fd08 	bl	800126c <_ZN10Calefactor6ApagarEv>
		return;
 800285c:	e031      	b.n	80028c2 <_ZN16CestacionBaku60110CruceXCeroEi+0x82>
	}
	if (gpio_pin != CruceCero_Pin)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	2b10      	cmp	r3, #16
 8002862:	d12d      	bne.n	80028c0 <_ZN16CestacionBaku60110CruceXCeroEi+0x80>
		return;
	if (conteolecturatemperatura > 10)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800286a:	2b0a      	cmp	r3, #10
 800286c:	dd03      	ble.n	8002876 <_ZN16CestacionBaku60110CruceXCeroEi+0x36>
	{
		conteolecturatemperatura = 0;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
	}
	conteolecturatemperatura++;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800287c:	1c5a      	adds	r2, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
	if (ciclos >= 100)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002888:	2b63      	cmp	r3, #99	@ 0x63
 800288a:	dd02      	ble.n	8002892 <_ZN16CestacionBaku60110CruceXCeroEi+0x52>
	{
		ciclos = 0;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	if (ciclos < PotenciaCalefactor)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800289a:	429a      	cmp	r2, r3
 800289c:	da05      	bge.n	80028aa <_ZN16CestacionBaku60110CruceXCeroEi+0x6a>
	{
		calefactor.Encender();
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	33bc      	adds	r3, #188	@ 0xbc
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fe fccf 	bl	8001246 <_ZN10Calefactor8EncenderEv>
 80028a8:	e004      	b.n	80028b4 <_ZN16CestacionBaku60110CruceXCeroEi+0x74>
	}
	else
	{
		calefactor.Apagar();
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	33bc      	adds	r3, #188	@ 0xbc
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fe fcdc 	bl	800126c <_ZN10Calefactor6ApagarEv>
	}
	ciclos = ciclos + 1;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	655a      	str	r2, [r3, #84]	@ 0x54
 80028be:	e000      	b.n	80028c2 <_ZN16CestacionBaku60110CruceXCeroEi+0x82>
		return;
 80028c0:	bf00      	nop
}
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <_ZN16CestacionBaku6019TimerTickEv>:
void CestacionBaku601::TimerTick()
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
	if (TiempoAntiReboresCruceXCero > 0)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	dd05      	ble.n	80028e4 <_ZN16CestacionBaku6019TimerTickEv+0x1c>
	{
		TiempoAntiReboresCruceXCero--;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028dc:	1e5a      	subs	r2, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	651a      	str	r2, [r3, #80]	@ 0x50
	else
	{
		CruceXCero(CruceCero_Pin);
		TiempoAntiReboresCruceXCero =250;// 2000;
	}
}
 80028e2:	e009      	b.n	80028f8 <_ZN16CestacionBaku6019TimerTickEv+0x30>
		CruceXCero(CruceCero_Pin);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	333c      	adds	r3, #60	@ 0x3c
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2110      	movs	r1, #16
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	4798      	blx	r3
		TiempoAntiReboresCruceXCero =250;// 2000;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	22fa      	movs	r2, #250	@ 0xfa
 80028f6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80028f8:	bf00      	nop
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <_ZN16CestacionBaku6016GetPIDEv>:
int CestacionBaku601::GetPID()
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
	return PotenciaCalefactor;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 800290c:	4618      	mov	r0, r3
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <_ZN16CestacionBaku6016SetPIDEi>:
void CestacionBaku601::SetPID(int valor)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
	PotenciaCalefactor = valor;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <_ZN16CestacionBaku60117GPIO_INTERRUPCIONEi>:
void CestacionBaku601::GPIO_INTERRUPCION(int GPIO_Pin)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
	...

0800294c <_ZN14CBarraProgresoC1Eiiiiiiii>:
 */

#include <GUI/CBarraProgreso.hpp>
#include <GUI/CRectanguloTft.hpp>

CBarraProgreso::CBarraProgreso(int xi, int yi, int ancho, int alto,	int backColor,int colorBarra, int contorno, int colorContorno):
 800294c:	b580      	push	{r7, lr}
 800294e:	b088      	sub	sp, #32
 8002950:	af04      	add	r7, sp, #16
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
 8002958:	603b      	str	r3, [r7, #0]
CRectanguloTft(xi,yi,ancho,alto,backColor,contorno,colorContorno)
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800295e:	9303      	str	r3, [sp, #12]
 8002960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002962:	9302      	str	r3, [sp, #8]
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	9301      	str	r3, [sp, #4]
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	68b9      	ldr	r1, [r7, #8]
 8002972:	f000 fe43 	bl	80035fc <_ZN14CRectanguloTftC1Eiiiiiii>
 8002976:	4a05      	ldr	r2, [pc, #20]	@ (800298c <_ZN14CBarraProgresoC1Eiiiiiiii+0x40>)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub
	ColorBarra=colorBarra;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6a3a      	ldr	r2, [r7, #32]
 8002980:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	4618      	mov	r0, r3
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	08014e58 	.word	0x08014e58

08002990 <_ZN14CBarraProgresoD1Ev>:

CBarraProgreso::~CBarraProgreso()
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	4a05      	ldr	r2, [pc, #20]	@ (80029b0 <_ZN14CBarraProgresoD1Ev+0x20>)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f000 fe09 	bl	80035b8 <_ZN14CRectanguloTftD1Ev>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4618      	mov	r0, r3
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	08014e58 	.word	0x08014e58

080029b4 <_ZN14CBarraProgresoD0Ev>:
CBarraProgreso::~CBarraProgreso()
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
}
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff ffe7 	bl	8002990 <_ZN14CBarraProgresoD1Ev>
 80029c2:	213c      	movs	r1, #60	@ 0x3c
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f00f f889 	bl	8011adc <_ZdlPvj>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4618      	mov	r0, r3
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <_ZN14CBarraProgreso9SetMaximoEi>:

void CBarraProgreso::SetMaximo(int maximo)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
	Maximo=maximo;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <_ZN14CBarraProgreso8SetValorEi>:
void CBarraProgreso::SetValor(int valor)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
	Valor=valor;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <_ZN14CBarraProgreso4ShowEv>:
void CBarraProgreso::Show()
{
 8002a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a0e:	b087      	sub	sp, #28
 8002a10:	af02      	add	r7, sp, #8
 8002a12:	6078      	str	r0, [r7, #4]
  //dibujo el rectangulo
  fillRect(Xi, Yi, Ancho, Alto, BackColor);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	3338      	adds	r3, #56	@ 0x38
 8002a1c:	681c      	ldr	r4, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	b219      	sxth	r1, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	b21d      	sxth	r5, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	b21e      	sxth	r6, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a34:	b21b      	sxth	r3, r3
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6952      	ldr	r2, [r2, #20]
 8002a3a:	b292      	uxth	r2, r2
 8002a3c:	9201      	str	r2, [sp, #4]
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	4633      	mov	r3, r6
 8002a42:	462a      	mov	r2, r5
 8002a44:	47a0      	blx	r4

  int ancho2=Valor*Ancho/Maximo;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6a12      	ldr	r2, [r2, #32]
 8002a4e:	fb03 f202 	mul.w	r2, r3, r2
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a56:	fb92 f3f3 	sdiv	r3, r2, r3
 8002a5a:	60fb      	str	r3, [r7, #12]
  if(ancho2==0)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <_ZN14CBarraProgreso4ShowEv+0x5a>
	  ancho2=1;
 8002a62:	2301      	movs	r3, #1
 8002a64:	60fb      	str	r3, [r7, #12]
  fillRect(Xi, Yi, ancho2, Alto, ColorBarra);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	3338      	adds	r3, #56	@ 0x38
 8002a6e:	681c      	ldr	r4, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	b219      	sxth	r1, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	b21d      	sxth	r5, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	b21e      	sxth	r6, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a84:	b21b      	sxth	r3, r3
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a8a:	b292      	uxth	r2, r2
 8002a8c:	9201      	str	r2, [sp, #4]
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	4633      	mov	r3, r6
 8002a92:	462a      	mov	r2, r5
 8002a94:	47a0      	blx	r4
  //hay que mostrar contorno?
  if (Contorno == 1) {
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d118      	bne.n	8002ad0 <_ZN14CBarraProgreso4ShowEv+0xc4>
    drawRect(Xi, Yi, Ancho, Alto, ColorControrno);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	3344      	adds	r3, #68	@ 0x44
 8002aa6:	681c      	ldr	r4, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	b219      	sxth	r1, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	b21d      	sxth	r5, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	b21e      	sxth	r6, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002abe:	b21b      	sxth	r3, r3
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002ac4:	b292      	uxth	r2, r2
 8002ac6:	9201      	str	r2, [sp, #4]
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	4633      	mov	r3, r6
 8002acc:	462a      	mov	r2, r5
 8002ace:	47a0      	blx	r4
  }
}
 8002ad0:	bf00      	nop
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ad8 <_ZN18CComponenteBaseTftC1Ev>:
#include <GUI/CComponenteBaseTft.hpp>
#include "stdio.h"
#include <stdarg.h>
#include "string.h"
#include "ILI9341/ILI9341_GFX.hpp"
CComponenteBaseTft::CComponenteBaseTft()
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	4a09      	ldr	r2, [pc, #36]	@ (8002b08 <_ZN18CComponenteBaseTftC1Ev+0x30>)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	605a      	str	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	609a      	str	r2, [r3, #8]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	615a      	str	r2, [r3, #20]
{
	// TODO Auto-generated constructor stub

}
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4618      	mov	r0, r3
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	08014eb8 	.word	0x08014eb8

08002b0c <_ZN18CComponenteBaseTftD1Ev>:

CComponenteBaseTft::~CComponenteBaseTft()
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	4a04      	ldr	r2, [pc, #16]	@ (8002b28 <_ZN18CComponenteBaseTftD1Ev+0x1c>)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	08014eb8 	.word	0x08014eb8

08002b2c <_ZN18CComponenteBaseTftD0Ev>:
CComponenteBaseTft::~CComponenteBaseTft()
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
}
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7ff ffe9 	bl	8002b0c <_ZN18CComponenteBaseTftD1Ev>
 8002b3a:	2118      	movs	r1, #24
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f00e ffcd 	bl	8011adc <_ZdlPvj>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4618      	mov	r0, r3
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <_ZN18CComponenteBaseTft9drawPixelEsst>:

//creo una capa que envuelve todas las funciones de la pantalla tft para mejorar el codigo
void CComponenteBaseTft::CComponenteBaseTft::drawPixel(int16_t x, int16_t y,
		uint16_t color)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	4608      	mov	r0, r1
 8002b56:	4611      	mov	r1, r2
 8002b58:	461a      	mov	r2, r3
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	817b      	strh	r3, [r7, #10]
 8002b5e:	460b      	mov	r3, r1
 8002b60:	813b      	strh	r3, [r7, #8]
 8002b62:	4613      	mov	r3, r2
 8002b64:	80fb      	strh	r3, [r7, #6]
}
 8002b66:	bf00      	nop
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <_ZN18CComponenteBaseTft10startWriteEv>:

void CComponenteBaseTft::startWrite(void)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <_ZN18CComponenteBaseTft10writePixelEsst>:
void CComponenteBaseTft::writePixel(int16_t x, int16_t y, uint16_t color)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b085      	sub	sp, #20
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	60f8      	str	r0, [r7, #12]
 8002b8e:	4608      	mov	r0, r1
 8002b90:	4611      	mov	r1, r2
 8002b92:	461a      	mov	r2, r3
 8002b94:	4603      	mov	r3, r0
 8002b96:	817b      	strh	r3, [r7, #10]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	813b      	strh	r3, [r7, #8]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	80fb      	strh	r3, [r7, #6]
}
 8002ba0:	bf00      	nop
 8002ba2:	3714      	adds	r7, #20
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <_ZN18CComponenteBaseTft13writeFillRectEsssst>:
void CComponenteBaseTft::writeFillRect(int16_t x, int16_t y, int16_t w,
		int16_t h, uint16_t color)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	4608      	mov	r0, r1
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4603      	mov	r3, r0
 8002bbc:	817b      	strh	r3, [r7, #10]
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	813b      	strh	r3, [r7, #8]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	80fb      	strh	r3, [r7, #6]
}
 8002bc6:	bf00      	nop
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <_ZN18CComponenteBaseTft14writeFastVLineEssst>:
void CComponenteBaseTft::writeFastVLine(int16_t x, int16_t y, int16_t h,
		uint16_t color)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b085      	sub	sp, #20
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	60f8      	str	r0, [r7, #12]
 8002bda:	4608      	mov	r0, r1
 8002bdc:	4611      	mov	r1, r2
 8002bde:	461a      	mov	r2, r3
 8002be0:	4603      	mov	r3, r0
 8002be2:	817b      	strh	r3, [r7, #10]
 8002be4:	460b      	mov	r3, r1
 8002be6:	813b      	strh	r3, [r7, #8]
 8002be8:	4613      	mov	r3, r2
 8002bea:	80fb      	strh	r3, [r7, #6]
}
 8002bec:	bf00      	nop
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <_ZN18CComponenteBaseTft14writeFastHLineEssst>:
void CComponenteBaseTft::writeFastHLine(int16_t x, int16_t y, int16_t w,
		uint16_t color)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	4608      	mov	r0, r1
 8002c02:	4611      	mov	r1, r2
 8002c04:	461a      	mov	r2, r3
 8002c06:	4603      	mov	r3, r0
 8002c08:	817b      	strh	r3, [r7, #10]
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	813b      	strh	r3, [r7, #8]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	80fb      	strh	r3, [r7, #6]
}
 8002c12:	bf00      	nop
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <_ZN18CComponenteBaseTft9writeLineEsssst>:
void CComponenteBaseTft::writeLine(int16_t x0, int16_t y0, int16_t x1,
		int16_t y1, uint16_t color)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b085      	sub	sp, #20
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	60f8      	str	r0, [r7, #12]
 8002c26:	4608      	mov	r0, r1
 8002c28:	4611      	mov	r1, r2
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	817b      	strh	r3, [r7, #10]
 8002c30:	460b      	mov	r3, r1
 8002c32:	813b      	strh	r3, [r7, #8]
 8002c34:	4613      	mov	r3, r2
 8002c36:	80fb      	strh	r3, [r7, #6]
}
 8002c38:	bf00      	nop
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <_ZN18CComponenteBaseTft8endWriteEv>:
void CComponenteBaseTft::endWrite(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <_ZN18CComponenteBaseTft11setRotationEh>:
void CComponenteBaseTft::setRotation(uint8_t r)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	70fb      	strb	r3, [r7, #3]
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <_ZN18CComponenteBaseTft13invertDisplayEb>:
void CComponenteBaseTft::invertDisplay(bool i)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	70fb      	strb	r3, [r7, #3]
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <_ZN18CComponenteBaseTft13drawFastVLineEssst>:
void CComponenteBaseTft::drawFastVLine(int16_t x, int16_t y, int16_t h,
		uint16_t color)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	4608      	mov	r0, r1
 8002c92:	4611      	mov	r1, r2
 8002c94:	461a      	mov	r2, r3
 8002c96:	4603      	mov	r3, r0
 8002c98:	817b      	strh	r3, [r7, #10]
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	813b      	strh	r3, [r7, #8]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	80fb      	strh	r3, [r7, #6]
}
 8002ca2:	bf00      	nop
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <_ZN18CComponenteBaseTft13drawFastHLineEssst>:
void CComponenteBaseTft::drawFastHLine(int16_t x, int16_t y, int16_t w,
		uint16_t color)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b085      	sub	sp, #20
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	4608      	mov	r0, r1
 8002cb8:	4611      	mov	r1, r2
 8002cba:	461a      	mov	r2, r3
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	817b      	strh	r3, [r7, #10]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	813b      	strh	r3, [r7, #8]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	80fb      	strh	r3, [r7, #6]
}
 8002cc8:	bf00      	nop
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <_ZN18CComponenteBaseTft10fillScreenEt>:
void CComponenteBaseTft::fillScreen(uint16_t color)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	807b      	strh	r3, [r7, #2]
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <_ZN18CComponenteBaseTft8drawLineEsssst>:
void CComponenteBaseTft::drawLine(int16_t x0, int16_t y0, int16_t x1,
		int16_t y1, uint16_t color)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	4608      	mov	r0, r1
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	817b      	strh	r3, [r7, #10]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	813b      	strh	r3, [r7, #8]
 8002d02:	4613      	mov	r3, r2
 8002d04:	80fb      	strh	r3, [r7, #6]
}
 8002d06:	bf00      	nop
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <_ZN18CComponenteBaseTft5widthEv>:
}
void CComponenteBaseTft::cp437(bool x)
{
}
int16_t CComponenteBaseTft::width(void)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
	return 319;
 8002d1a:	f240 133f 	movw	r3, #319	@ 0x13f
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <_ZN18CComponenteBaseTft6heightEv>:
int16_t CComponenteBaseTft::height(void)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
	return 239;
 8002d32:	23ef      	movs	r3, #239	@ 0xef
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <_ZN18CComponenteBaseTft8fillRectEsssst>:
	va_end(pa);
	buffer[posbuffer] = '\0';
	print(buffer);
}
void CComponenteBaseTft::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,uint16_t color)
{
 8002d40:	b590      	push	{r4, r7, lr}
 8002d42:	b087      	sub	sp, #28
 8002d44:	af02      	add	r7, sp, #8
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	4608      	mov	r0, r1
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	4603      	mov	r3, r0
 8002d50:	817b      	strh	r3, [r7, #10]
 8002d52:	460b      	mov	r3, r1
 8002d54:	813b      	strh	r3, [r7, #8]
 8002d56:	4613      	mov	r3, r2
 8002d58:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Filled_Rectangle_Coord(x, y, x+w, y+h, color);
 8002d5a:	8978      	ldrh	r0, [r7, #10]
 8002d5c:	8939      	ldrh	r1, [r7, #8]
 8002d5e:	897a      	ldrh	r2, [r7, #10]
 8002d60:	88fb      	ldrh	r3, [r7, #6]
 8002d62:	4413      	add	r3, r2
 8002d64:	b29c      	uxth	r4, r3
 8002d66:	893a      	ldrh	r2, [r7, #8]
 8002d68:	8c3b      	ldrh	r3, [r7, #32]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	4613      	mov	r3, r2
 8002d74:	4622      	mov	r2, r4
 8002d76:	f006 fc34 	bl	80095e2 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt>
}
 8002d7a:	bf00      	nop
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd90      	pop	{r4, r7, pc}

08002d82 <_ZN18CComponenteBaseTft8drawRectEsssst>:
void CComponenteBaseTft::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,uint16_t color)
{
 8002d82:	b590      	push	{r4, r7, lr}
 8002d84:	b087      	sub	sp, #28
 8002d86:	af02      	add	r7, sp, #8
 8002d88:	60f8      	str	r0, [r7, #12]
 8002d8a:	4608      	mov	r0, r1
 8002d8c:	4611      	mov	r1, r2
 8002d8e:	461a      	mov	r2, r3
 8002d90:	4603      	mov	r3, r0
 8002d92:	817b      	strh	r3, [r7, #10]
 8002d94:	460b      	mov	r3, r1
 8002d96:	813b      	strh	r3, [r7, #8]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Hollow_Rectangle_Coord(x, y,x+w,y+h,color);
 8002d9c:	8978      	ldrh	r0, [r7, #10]
 8002d9e:	8939      	ldrh	r1, [r7, #8]
 8002da0:	897a      	ldrh	r2, [r7, #10]
 8002da2:	88fb      	ldrh	r3, [r7, #6]
 8002da4:	4413      	add	r3, r2
 8002da6:	b29c      	uxth	r4, r3
 8002da8:	893a      	ldrh	r2, [r7, #8]
 8002daa:	8c3b      	ldrh	r3, [r7, #32]
 8002dac:	4413      	add	r3, r2
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	4613      	mov	r3, r2
 8002db6:	4622      	mov	r2, r4
 8002db8:	f006 fb92 	bl	80094e0 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt>
}
 8002dbc:	bf00      	nop
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd90      	pop	{r4, r7, pc}

08002dc4 <_ZN18CComponenteBaseTft9setCursorEss>:
void CComponenteBaseTft::setCursor(int16_t x, int16_t y)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	807b      	strh	r3, [r7, #2]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	803b      	strh	r3, [r7, #0]
    CursorX=x;
 8002dd4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	605a      	str	r2, [r3, #4]
    CursorY=y;
 8002ddc:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	609a      	str	r2, [r3, #8]
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <_ZN18CComponenteBaseTft11setTextSizeEh>:
void CComponenteBaseTft::setTextSize(uint8_t s)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	70fb      	strb	r3, [r7, #3]
	TextSize=s;
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	60da      	str	r2, [r3, #12]
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <_ZN18CComponenteBaseTft12setTextColorEt>:
void CComponenteBaseTft::setTextSize(uint8_t sx, uint8_t sy)
{
}
void CComponenteBaseTft::setTextColor(uint16_t c)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
 8002e16:	460b      	mov	r3, r1
 8002e18:	807b      	strh	r3, [r7, #2]
	ColorTexto=c;
 8002e1a:	887a      	ldrh	r2, [r7, #2]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	611a      	str	r2, [r3, #16]
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <_ZN18CComponenteBaseTft5printEPc>:
void CComponenteBaseTft::print(char *texto)
{
 8002e2c:	b590      	push	{r4, r7, lr}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
	ILI9341_Draw_Text(texto, CursorX,CursorY, ColorTexto, TextSize, BackColor);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6859      	ldr	r1, [r3, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6898      	ldr	r0, [r3, #8]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	b29c      	uxth	r4, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6952      	ldr	r2, [r2, #20]
 8002e4e:	b292      	uxth	r2, r2
 8002e50:	9201      	str	r2, [sp, #4]
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	4623      	mov	r3, r4
 8002e56:	4602      	mov	r2, r0
 8002e58:	6838      	ldr	r0, [r7, #0]
 8002e5a:	f006 fcb7 	bl	80097cc <_Z17ILI9341_Draw_TextPKciittt>
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd90      	pop	{r4, r7, pc}

08002e66 <_ZN18CComponenteBaseTft11LimpiaTextoEv>:
void CComponenteBaseTft::LimpiaTexto()
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]

}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
	...

08002e7c <_ZN12CEtiquetaTftD1Ev>:
 */

#include <GUI/CEtiquetaTft.hpp>


CEtiquetaTft::~CEtiquetaTft()
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	4a05      	ldr	r2, [pc, #20]	@ (8002e9c <_ZN12CEtiquetaTftD1Ev+0x20>)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 fb93 	bl	80035b8 <_ZN14CRectanguloTftD1Ev>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4618      	mov	r0, r3
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	08014f0c 	.word	0x08014f0c

08002ea0 <_ZN12CEtiquetaTftD0Ev>:
CEtiquetaTft::~CEtiquetaTft()
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
}
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f7ff ffe7 	bl	8002e7c <_ZN12CEtiquetaTftD1Ev>
 8002eae:	21a4      	movs	r1, #164	@ 0xa4
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f00e fe13 	bl	8011adc <_ZdlPvj>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3708      	adds	r7, #8
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>:

CEtiquetaTft::CEtiquetaTft(int xi, int yi, int ancho, int alto,	int backColor, char *texto, int colorTexto, int textSize, int contorno,	int colorContorno) :
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af04      	add	r7, sp, #16
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
 8002ecc:	603b      	str	r3, [r7, #0]
		CRectanguloTft(xi, yi, ancho, alto, backColor, contorno, colorContorno)
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed2:	9303      	str	r3, [sp, #12]
 8002ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ed6:	9302      	str	r3, [sp, #8]
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	9301      	str	r3, [sp, #4]
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	68b9      	ldr	r1, [r7, #8]
 8002ee6:	f000 fb89 	bl	80035fc <_ZN14CRectanguloTftC1Eiiiiiii>
 8002eea:	4a11      	ldr	r2, [pc, #68]	@ (8002f30 <_ZN12CEtiquetaTftC1EiiiiiPciiii+0x70>)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
{
	strcpy(Texto, texto);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	3330      	adds	r3, #48	@ 0x30
 8002f0c:	6a39      	ldr	r1, [r7, #32]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f00f fd19 	bl	8012946 <strcpy>
	ColorTexto = colorTexto;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f18:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	TextSize = textSize;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f20:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
}
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	08014f0c 	.word	0x08014f0c

08002f34 <_ZN12CEtiquetaTft8SetTextoEPcz>:

void CEtiquetaTft::SetTexto(char *formato, ...)
{
 8002f34:	b40e      	push	{r1, r2, r3}
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b0bb      	sub	sp, #236	@ 0xec
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
//	LimpiaTexto();
	char *p;
	char buffer[100];
	char tmp[100];
	for(int i=0;i<100;i++)
 8002f3e:	2300      	movs	r3, #0
 8002f40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f44:	e012      	b.n	8002f6c <_ZN12CEtiquetaTft8SetTextoEPcz+0x38>
	{
		buffer[i]='\0';
 8002f46:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8002f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f4e:	4413      	add	r3, r2
 8002f50:	2200      	movs	r2, #0
 8002f52:	701a      	strb	r2, [r3, #0]
		tmp[i]='\0';
 8002f54:	f107 020c 	add.w	r2, r7, #12
 8002f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f5c:	4413      	add	r3, r2
 8002f5e:	2200      	movs	r2, #0
 8002f60:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<100;i++)
 8002f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f66:	3301      	adds	r3, #1
 8002f68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f70:	2b63      	cmp	r3, #99	@ 0x63
 8002f72:	dde8      	ble.n	8002f46 <_ZN12CEtiquetaTft8SetTextoEPcz+0x12>
	}
	int postmp = 0;
 8002f74:	2300      	movs	r3, #0
 8002f76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	int posbuffer = 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
	va_list pa;
	int encontrado = 0;
 8002f80:	2300      	movs	r3, #0
 8002f82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

	va_start(pa, formato);
 8002f86:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8002f8a:	60bb      	str	r3, [r7, #8]

	for (p = formato; *p; p++)
 8002f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f90:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f94:	e0f4      	b.n	8003180 <_ZN12CEtiquetaTft8SetTextoEPcz+0x24c>
	{

		if (*p != '%')
 8002f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b25      	cmp	r3, #37	@ 0x25
 8002f9e:	d00f      	beq.n	8002fc0 <_ZN12CEtiquetaTft8SetTextoEPcz+0x8c>
		{
			buffer[posbuffer] = *p;
 8002fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fa4:	7819      	ldrb	r1, [r3, #0]
 8002fa6:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8002faa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002fae:	4413      	add	r3, r2
 8002fb0:	460a      	mov	r2, r1
 8002fb2:	701a      	strb	r2, [r3, #0]
			posbuffer++;
 8002fb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002fb8:	3301      	adds	r3, #1
 8002fba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			continue;
 8002fbe:	e0da      	b.n	8003176 <_ZN12CEtiquetaTft8SetTextoEPcz+0x242>
		}
		encontrado = 0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		switch (*++p)
 8002fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fca:	3301      	adds	r3, #1
 8002fcc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	3b63      	subs	r3, #99	@ 0x63
 8002fd8:	2b15      	cmp	r3, #21
 8002fda:	f200 8095 	bhi.w	8003108 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1d4>
 8002fde:	a201      	add	r2, pc, #4	@ (adr r2, 8002fe4 <_ZN12CEtiquetaTft8SetTextoEPcz+0xb0>)
 8002fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe4:	080030ad 	.word	0x080030ad
 8002fe8:	0800303d 	.word	0x0800303d
 8002fec:	08003109 	.word	0x08003109
 8002ff0:	080030c9 	.word	0x080030c9
 8002ff4:	08003109 	.word	0x08003109
 8002ff8:	08003109 	.word	0x08003109
 8002ffc:	08003059 	.word	0x08003059
 8003000:	08003109 	.word	0x08003109
 8003004:	08003109 	.word	0x08003109
 8003008:	08003109 	.word	0x08003109
 800300c:	08003109 	.word	0x08003109
 8003010:	08003109 	.word	0x08003109
 8003014:	08003109 	.word	0x08003109
 8003018:	08003091 	.word	0x08003091
 800301c:	08003109 	.word	0x08003109
 8003020:	08003109 	.word	0x08003109
 8003024:	080030ed 	.word	0x080030ed
 8003028:	08003109 	.word	0x08003109
 800302c:	08003109 	.word	0x08003109
 8003030:	08003109 	.word	0x08003109
 8003034:	08003109 	.word	0x08003109
 8003038:	08003075 	.word	0x08003075
		{
		case 'd':
			sprintf(tmp, "%d", va_arg(pa, int));
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	1d1a      	adds	r2, r3, #4
 8003040:	60ba      	str	r2, [r7, #8]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	f107 030c 	add.w	r3, r7, #12
 8003048:	495b      	ldr	r1, [pc, #364]	@ (80031b8 <_ZN12CEtiquetaTft8SetTextoEPcz+0x284>)
 800304a:	4618      	mov	r0, r3
 800304c:	f00f fb44 	bl	80126d8 <siprintf>
			encontrado = 1;
 8003050:	2301      	movs	r3, #1
 8003052:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
			break;
 8003056:	e067      	b.n	8003128 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1f4>
		case 'i':
			sprintf(tmp, "%i", va_arg(pa, int));
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	1d1a      	adds	r2, r3, #4
 800305c:	60ba      	str	r2, [r7, #8]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	f107 030c 	add.w	r3, r7, #12
 8003064:	4955      	ldr	r1, [pc, #340]	@ (80031bc <_ZN12CEtiquetaTft8SetTextoEPcz+0x288>)
 8003066:	4618      	mov	r0, r3
 8003068:	f00f fb36 	bl	80126d8 <siprintf>
			encontrado = 1;
 800306c:	2301      	movs	r3, #1
 800306e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
			break;
 8003072:	e059      	b.n	8003128 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1f4>
		case 'x':
			sprintf(tmp, "%x", va_arg(pa, int));
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	1d1a      	adds	r2, r3, #4
 8003078:	60ba      	str	r2, [r7, #8]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	f107 030c 	add.w	r3, r7, #12
 8003080:	494f      	ldr	r1, [pc, #316]	@ (80031c0 <_ZN12CEtiquetaTft8SetTextoEPcz+0x28c>)
 8003082:	4618      	mov	r0, r3
 8003084:	f00f fb28 	bl	80126d8 <siprintf>
			encontrado = 1;
 8003088:	2301      	movs	r3, #1
 800308a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
			break;
 800308e:	e04b      	b.n	8003128 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1f4>
		case 'p':
			sprintf(tmp, "%p", va_arg(pa, void*));
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	1d1a      	adds	r2, r3, #4
 8003094:	60ba      	str	r2, [r7, #8]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	f107 030c 	add.w	r3, r7, #12
 800309c:	4949      	ldr	r1, [pc, #292]	@ (80031c4 <_ZN12CEtiquetaTft8SetTextoEPcz+0x290>)
 800309e:	4618      	mov	r0, r3
 80030a0:	f00f fb1a 	bl	80126d8 <siprintf>
			encontrado = 1;
 80030a4:	2301      	movs	r3, #1
 80030a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
			break;
 80030aa:	e03d      	b.n	8003128 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1f4>
		case 'c':
			sprintf(tmp, "%c", va_arg(pa, int));
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	1d1a      	adds	r2, r3, #4
 80030b0:	60ba      	str	r2, [r7, #8]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	f107 030c 	add.w	r3, r7, #12
 80030b8:	4943      	ldr	r1, [pc, #268]	@ (80031c8 <_ZN12CEtiquetaTft8SetTextoEPcz+0x294>)
 80030ba:	4618      	mov	r0, r3
 80030bc:	f00f fb0c 	bl	80126d8 <siprintf>
			encontrado = 1;
 80030c0:	2301      	movs	r3, #1
 80030c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
			break;
 80030c6:	e02f      	b.n	8003128 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1f4>
		case 'f':
			sprintf(tmp, "%f", va_arg(pa, double));
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	3307      	adds	r3, #7
 80030cc:	f023 0307 	bic.w	r3, r3, #7
 80030d0:	f103 0208 	add.w	r2, r3, #8
 80030d4:	60ba      	str	r2, [r7, #8]
 80030d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030da:	f107 000c 	add.w	r0, r7, #12
 80030de:	493b      	ldr	r1, [pc, #236]	@ (80031cc <_ZN12CEtiquetaTft8SetTextoEPcz+0x298>)
 80030e0:	f00f fafa 	bl	80126d8 <siprintf>
			encontrado = 1;
 80030e4:	2301      	movs	r3, #1
 80030e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
			break;
 80030ea:	e01d      	b.n	8003128 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1f4>
		case 's':
			sprintf(tmp, "%s", va_arg(pa, char *));
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	1d1a      	adds	r2, r3, #4
 80030f0:	60ba      	str	r2, [r7, #8]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	f107 030c 	add.w	r3, r7, #12
 80030f8:	4935      	ldr	r1, [pc, #212]	@ (80031d0 <_ZN12CEtiquetaTft8SetTextoEPcz+0x29c>)
 80030fa:	4618      	mov	r0, r3
 80030fc:	f00f faec 	bl	80126d8 <siprintf>
			encontrado = 1;
 8003100:	2301      	movs	r3, #1
 8003102:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
			break;
 8003106:	e00f      	b.n	8003128 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1f4>
		default:
			buffer[posbuffer] = *p;
 8003108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800310c:	7819      	ldrb	r1, [r3, #0]
 800310e:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8003112:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003116:	4413      	add	r3, r2
 8003118:	460a      	mov	r2, r1
 800311a:	701a      	strb	r2, [r3, #0]
			posbuffer++;
 800311c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003120:	3301      	adds	r3, #1
 8003122:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 8003126:	bf00      	nop
		}
		if (encontrado == 1)
 8003128:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800312c:	2b01      	cmp	r3, #1
 800312e:	d122      	bne.n	8003176 <_ZN12CEtiquetaTft8SetTextoEPcz+0x242>
		{
			postmp = 0;
 8003130:	2300      	movs	r3, #0
 8003132:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
			while (tmp[postmp] != '\0')
 8003136:	e016      	b.n	8003166 <_ZN12CEtiquetaTft8SetTextoEPcz+0x232>
			{
				buffer[posbuffer] = tmp[postmp];
 8003138:	f107 020c 	add.w	r2, r7, #12
 800313c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003140:	4413      	add	r3, r2
 8003142:	7819      	ldrb	r1, [r3, #0]
 8003144:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8003148:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800314c:	4413      	add	r3, r2
 800314e:	460a      	mov	r2, r1
 8003150:	701a      	strb	r2, [r3, #0]
				posbuffer++;
 8003152:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003156:	3301      	adds	r3, #1
 8003158:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
				postmp++;
 800315c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003160:	3301      	adds	r3, #1
 8003162:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
			while (tmp[postmp] != '\0')
 8003166:	f107 020c 	add.w	r2, r7, #12
 800316a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800316e:	4413      	add	r3, r2
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1e0      	bne.n	8003138 <_ZN12CEtiquetaTft8SetTextoEPcz+0x204>
	for (p = formato; *p; p++)
 8003176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800317a:	3301      	adds	r3, #1
 800317c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	f47f af05 	bne.w	8002f96 <_ZN12CEtiquetaTft8SetTextoEPcz+0x62>
			}
		}
	}
	va_end(pa);
	buffer[posbuffer] = '\0';
 800318c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8003190:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003194:	4413      	add	r3, r2
 8003196:	2200      	movs	r2, #0
 8003198:	701a      	strb	r2, [r3, #0]
	strcpy(Texto, buffer);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	3330      	adds	r3, #48	@ 0x30
 800319e:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80031a2:	4611      	mov	r1, r2
 80031a4:	4618      	mov	r0, r3
 80031a6:	f00f fbce 	bl	8012946 <strcpy>
}
 80031aa:	bf00      	nop
 80031ac:	37ec      	adds	r7, #236	@ 0xec
 80031ae:	46bd      	mov	sp, r7
 80031b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80031b4:	b003      	add	sp, #12
 80031b6:	4770      	bx	lr
 80031b8:	080147e0 	.word	0x080147e0
 80031bc:	080147e4 	.word	0x080147e4
 80031c0:	080147e8 	.word	0x080147e8
 80031c4:	080147ec 	.word	0x080147ec
 80031c8:	080147f0 	.word	0x080147f0
 80031cc:	080147f4 	.word	0x080147f4
 80031d0:	080147f8 	.word	0x080147f8

080031d4 <_ZN12CEtiquetaTft13SetSeparacionEii>:
{
	return Texto;
}

void CEtiquetaTft::SetSeparacion(int izquieda, int arriba)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
	SeparacionIzquierda = izquieda;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	SeparacionArriba = arriba;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
}
 80031f0:	bf00      	nop
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <_ZN12CEtiquetaTft13SetColorTextoEi>:
{
	return SeparacionIzquierda;
}

void CEtiquetaTft::SetColorTexto(int color)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
	ColorTexto = color;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 800320e:	bf00      	nop
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <_ZN12CEtiquetaTft4ShowEv>:
{
	return ColorTexto;
}

void CEtiquetaTft::Show()
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
	//mandamos a dibujar el rectangulo
	CRectanguloTft::Show();
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4618      	mov	r0, r3
 8003226:	f000 fa1b 	bl	8003660 <_ZN14CRectanguloTft4ShowEv>
	//me posiciono el la pocicion del texto
	setCursor(Xi + SeparacionIzquierda, Yi + SeparacionArriba);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	b29a      	uxth	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003238:	b29b      	uxth	r3, r3
 800323a:	4413      	add	r3, r2
 800323c:	b29b      	uxth	r3, r3
 800323e:	b219      	sxth	r1, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	b29a      	uxth	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800324c:	b29b      	uxth	r3, r3
 800324e:	4413      	add	r3, r2
 8003250:	b29b      	uxth	r3, r3
 8003252:	b21b      	sxth	r3, r3
 8003254:	461a      	mov	r2, r3
 8003256:	f7ff fdb5 	bl	8002dc4 <_ZN18CComponenteBaseTft9setCursorEss>
	//asigno tamaño de la letra
	setTextSize (TextSize);
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003262:	b2db      	uxtb	r3, r3
 8003264:	4619      	mov	r1, r3
 8003266:	4610      	mov	r0, r2
 8003268:	f7ff fdc2 	bl	8002df0 <_ZN18CComponenteBaseTft11setTextSizeEh>
	//asigno el color de texto
	setTextColor (ColorTexto);
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003274:	b29b      	uxth	r3, r3
 8003276:	4619      	mov	r1, r3
 8003278:	4610      	mov	r0, r2
 800327a:	f7ff fdc8 	bl	8002e0e <_ZN18CComponenteBaseTft12setTextColorEt>
	//muestro el texto;
	print (Texto);
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3330      	adds	r3, #48	@ 0x30
 8003284:	4619      	mov	r1, r3
 8003286:	4610      	mov	r0, r2
 8003288:	f7ff fdd0 	bl	8002e2c <_ZN18CComponenteBaseTft5printEPc>
}
 800328c:	bf00      	nop
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <_ZN12CEtiquetaTft12SetBackColorEi>:
int CEtiquetaTft::DameTextSize()
{
	return TextSize;
}
void CEtiquetaTft::SetBackColor(int color)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
	BackColor=color;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	615a      	str	r2, [r3, #20]
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <_ZN12CEtiquetaTft11LimpiaTextoEv>:
void CEtiquetaTft::LimpiaTexto()
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
	setTextColor (BackColor);
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	b29b      	uxth	r3, r3
 80032c0:	4619      	mov	r1, r3
 80032c2:	4610      	mov	r0, r2
 80032c4:	f7ff fda3 	bl	8002e0e <_ZN18CComponenteBaseTft12setTextColorEt>
	//muestro el texto;
	print (Texto);
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	3330      	adds	r3, #48	@ 0x30
 80032ce:	4619      	mov	r1, r3
 80032d0:	4610      	mov	r0, r2
 80032d2:	f7ff fdab 	bl	8002e2c <_ZN18CComponenteBaseTft5printEPc>
	setTextColor (ColorTexto);
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032de:	b29b      	uxth	r3, r3
 80032e0:	4619      	mov	r1, r3
 80032e2:	4610      	mov	r0, r2
 80032e4:	f7ff fd93 	bl	8002e0e <_ZN18CComponenteBaseTft12setTextColorEt>
	//muestro el texto;
//	print (Texto);

}
 80032e8:	bf00      	nop
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <_ZN13CPantallaBaseD1Ev>:
 *      Author: W10
 */

#include <GUI/CPantallaBase.hpp>

CPantallaBase::~CPantallaBase()
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	4a09      	ldr	r2, [pc, #36]	@ (8003320 <_ZN13CPantallaBaseD1Ev+0x30>)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	4a09      	ldr	r2, [pc, #36]	@ (8003324 <_ZN13CPantallaBaseD1Ev+0x34>)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3330      	adds	r3, #48	@ 0x30
 8003308:	4618      	mov	r0, r3
 800330a:	f007 f9d3 	bl	800a6b4 <_ZN26CManejadorEventosControlesD1Ev>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4618      	mov	r0, r3
 8003312:	f000 f951 	bl	80035b8 <_ZN14CRectanguloTftD1Ev>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4618      	mov	r0, r3
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	08014f6c 	.word	0x08014f6c
 8003324:	08014fec 	.word	0x08014fec

08003328 <_ZThn48_N13CPantallaBaseD1Ev>:
	char Titulo[100];
	CEstacionBase *Estacion;
	CManejadorControles *ManejadorControles;

public:
	virtual ~CPantallaBase();
 8003328:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800332c:	f7ff bfe0 	b.w	80032f0 <_ZN13CPantallaBaseD1Ev>

08003330 <_ZN13CPantallaBaseD0Ev>:
CPantallaBase::~CPantallaBase()
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
}
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7ff ffd9 	bl	80032f0 <_ZN13CPantallaBaseD1Ev>
 800333e:	21ac      	movs	r1, #172	@ 0xac
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f00e fbcb 	bl	8011adc <_ZdlPvj>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4618      	mov	r0, r3
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <_ZThn48_N13CPantallaBaseD0Ev>:
 8003350:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8003354:	f7ff bfec 	b.w	8003330 <_ZN13CPantallaBaseD0Ev>

08003358 <_ZN13CPantallaBaseC1EiPc>:

//constructor
CPantallaBase::CPantallaBase(int verTitulo, char *titulo) :
 8003358:	b590      	push	{r4, r7, lr}
 800335a:	b08f      	sub	sp, #60	@ 0x3c
 800335c:	af08      	add	r7, sp, #32
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
		CRectanguloTft(0, 0, 0, 0, COLOR::BLACK, 1, COLOR::BLUE)
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	231f      	movs	r3, #31
 8003368:	9303      	str	r3, [sp, #12]
 800336a:	2301      	movs	r3, #1
 800336c:	9302      	str	r3, [sp, #8]
 800336e:	2300      	movs	r3, #0
 8003370:	9301      	str	r3, [sp, #4]
 8003372:	2300      	movs	r3, #0
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	2300      	movs	r3, #0
 8003378:	2200      	movs	r2, #0
 800337a:	2100      	movs	r1, #0
 800337c:	f000 f93e 	bl	80035fc <_ZN14CRectanguloTftC1Eiiiiiii>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	3330      	adds	r3, #48	@ 0x30
 8003384:	4618      	mov	r0, r3
 8003386:	f007 f985 	bl	800a694 <_ZN26CManejadorEventosControlesC1Ev>
 800338a:	4a2a      	ldr	r2, [pc, #168]	@ (8003434 <_ZN13CPantallaBaseC1EiPc+0xdc>)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	4a29      	ldr	r2, [pc, #164]	@ (8003438 <_ZN13CPantallaBaseC1EiPc+0xe0>)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	631a      	str	r2, [r3, #48]	@ 0x30
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2201      	movs	r2, #1
 80033a2:	63da      	str	r2, [r3, #60]	@ 0x3c
{
	Visible=false;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	VerTitulo = verTitulo;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	63da      	str	r2, [r3, #60]	@ 0x3c
	strcpy(Titulo, titulo);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	3340      	adds	r3, #64	@ 0x40
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f00f fac4 	bl	8012946 <strcpy>
	setRotation(3);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2103      	movs	r1, #3
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7ff fc48 	bl	8002c58 <_ZN18CComponenteBaseTft11setRotationEh>
	int ancho = width();
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff fca1 	bl	8002d12 <_ZN18CComponenteBaseTft5widthEv>
 80033d0:	4603      	mov	r3, r0
 80033d2:	617b      	str	r3, [r7, #20]
	int alto = height();
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff fca7 	bl	8002d2a <_ZN18CComponenteBaseTft6heightEv>
 80033dc:	4603      	mov	r3, r0
 80033de:	613b      	str	r3, [r7, #16]
	Redimenciona(ancho, alto);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	6979      	ldr	r1, [r7, #20]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 f98a 	bl	8003700 <_ZN14CRectanguloTft12RedimencionaEii>
	LabelTitulo = new CEtiquetaTft( Xi, Yi, ancho, 30, COLOR::BLUE, Titulo,	COLOR::WHITE, 3, 0, COLOR::BLUE);
 80033ec:	20a4      	movs	r0, #164	@ 0xa4
 80033ee:	f00e fb77 	bl	8011ae0 <_Znwj>
 80033f2:	4603      	mov	r3, r0
 80033f4:	461c      	mov	r4, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6999      	ldr	r1, [r3, #24]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	69da      	ldr	r2, [r3, #28]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	3340      	adds	r3, #64	@ 0x40
 8003402:	201f      	movs	r0, #31
 8003404:	9006      	str	r0, [sp, #24]
 8003406:	2000      	movs	r0, #0
 8003408:	9005      	str	r0, [sp, #20]
 800340a:	2003      	movs	r0, #3
 800340c:	9004      	str	r0, [sp, #16]
 800340e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003412:	9003      	str	r0, [sp, #12]
 8003414:	9302      	str	r3, [sp, #8]
 8003416:	231f      	movs	r3, #31
 8003418:	9301      	str	r3, [sp, #4]
 800341a:	231e      	movs	r3, #30
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	4620      	mov	r0, r4
 8003422:	f7ff fd4d 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	639c      	str	r4, [r3, #56]	@ 0x38
}
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	4618      	mov	r0, r3
 800342e:	371c      	adds	r7, #28
 8003430:	46bd      	mov	sp, r7
 8003432:	bd90      	pop	{r4, r7, pc}
 8003434:	08014f6c 	.word	0x08014f6c
 8003438:	08014fec 	.word	0x08014fec

0800343c <_ZN13CPantallaBase4ShowEv>:
//funcion que se tiene que reemplazar para verse
void CPantallaBase::Show()
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
	//dibujo el fondo
//	CRectanguloTft::Show();
	//dibujo el titulo
	LabelTitulo->Show();
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	334c      	adds	r3, #76	@ 0x4c
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4610      	mov	r0, r2
 8003454:	4798      	blx	r3
}
 8003456:	bf00      	nop
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <_ZN13CPantallaBase8RefrescaEv>:
void CPantallaBase::Refresca()
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <_ZN13CPantallaBase11SetEstacionEP13CEstacionBase>:
void CPantallaBase::SetEstacion(CEstacionBase *estacion)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b082      	sub	sp, #8
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	6039      	str	r1, [r7, #0]
	Estacion = estacion;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	//asigno los evetos de la estacion
	Estacion->SetManejadorControles(this);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	3328      	adds	r3, #40	@ 0x28
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	3230      	adds	r2, #48	@ 0x30
 800349a:	4611      	mov	r1, r2
 800349c:	4798      	blx	r3
	Estacion->DesactivarCalefactor();
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	3338      	adds	r3, #56	@ 0x38
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4610      	mov	r0, r2
 80034b2:	4798      	blx	r3
}
 80034b4:	bf00      	nop
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <_ZN13CPantallaBase7OcultarEv>:
void CPantallaBase::Ocultar()
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
	CRectanguloTft::Show();
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 f8ca 	bl	8003660 <_ZN14CRectanguloTft4ShowEv>
	Estacion->QuitaManejadorControles();
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	332c      	adds	r3, #44	@ 0x2c
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4610      	mov	r0, r2
 80034e0:	4798      	blx	r3
	Visible=false;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
}
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <_ZN13CPantallaBase9EsVisibleEv>:
bool CPantallaBase::EsVisible()
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
	return Visible;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
}
 8003500:	4618      	mov	r0, r3
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <_ZN13CPantallaBase10SetVisibleEb>:
void CPantallaBase::SetVisible(bool visible)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	460b      	mov	r3, r1
 8003516:	70fb      	strb	r3, [r7, #3]
	if(Visible==visible)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800351e:	78fa      	ldrb	r2, [r7, #3]
 8003520:	429a      	cmp	r2, r3
 8003522:	d004      	beq.n	800352e <_ZN13CPantallaBase10SetVisibleEb+0x22>
		return;
	Visible=visible;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	78fa      	ldrb	r2, [r7, #3]
 8003528:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800352c:	e000      	b.n	8003530 <_ZN13CPantallaBase10SetVisibleEb+0x24>
		return;
 800352e:	bf00      	nop
}
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <_ZN13CPantallaBase21SetManejadorControlesEP19CManejadorControles>:

void CPantallaBase::SetManejadorControles(CManejadorControles *manejador)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b082      	sub	sp, #8
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
 8003542:	6039      	str	r1, [r7, #0]
	ManejadorControles=manejador;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	if(ManejadorControles==NULL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00d      	beq.n	8003572 <_ZN13CPantallaBase21SetManejadorControlesEP19CManejadorControles+0x38>
		return;
	ManejadorControles->SetManejadorControles(this);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f8d3 00a8 	ldr.w	r0, [r3, #168]	@ 0xa8
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	333c      	adds	r3, #60	@ 0x3c
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	3230      	adds	r2, #48	@ 0x30
 800356c:	4611      	mov	r1, r2
 800356e:	4798      	blx	r3
 8003570:	e000      	b.n	8003574 <_ZN13CPantallaBase21SetManejadorControlesEP19CManejadorControles+0x3a>
		return;
 8003572:	bf00      	nop
}
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <_ZN13CPantallaBase17SetTituloPantallaEPc>:
void CPantallaBase::SetTituloPantalla(char *texto)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b082      	sub	sp, #8
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
 8003582:	6039      	str	r1, [r7, #0]
	strcpy(Titulo, texto);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3340      	adds	r3, #64	@ 0x40
 8003588:	6839      	ldr	r1, [r7, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f00f f9db 	bl	8012946 <strcpy>
	LabelTitulo->SetTexto(texto);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003594:	6839      	ldr	r1, [r7, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff fccc 	bl	8002f34 <_ZN12CEtiquetaTft8SetTextoEPcz>

}
 800359c:	bf00      	nop
 800359e:	3708      	adds	r7, #8
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <_ZN13CPantallaBase12SeleccionadaEv>:
void CPantallaBase::Seleccionada()
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]

}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <_ZN14CRectanguloTftD1Ev>:
 *      Author: W10
 */

#include <GUI/CRectanguloTft.hpp>

CRectanguloTft::~CRectanguloTft()
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	4a05      	ldr	r2, [pc, #20]	@ (80035d8 <_ZN14CRectanguloTftD1Ev+0x20>)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff fa9f 	bl	8002b0c <_ZN18CComponenteBaseTftD1Ev>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4618      	mov	r0, r3
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	08015020 	.word	0x08015020

080035dc <_ZN14CRectanguloTftD0Ev>:
CRectanguloTft::~CRectanguloTft()
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
}
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f7ff ffe7 	bl	80035b8 <_ZN14CRectanguloTftD1Ev>
 80035ea:	2130      	movs	r1, #48	@ 0x30
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f00e fa75 	bl	8011adc <_ZdlPvj>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4618      	mov	r0, r3
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <_ZN14CRectanguloTftC1Eiiiiiii>:

CRectanguloTft::CRectanguloTft(int xi, int yi, int ancho , int alto , int backColor , int contorno , int colorContorno )
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
 8003608:	603b      	str	r3, [r7, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff fa63 	bl	8002ad8 <_ZN18CComponenteBaseTftC1Ev>
 8003612:	4a12      	ldr	r2, [pc, #72]	@ (800365c <_ZN14CRectanguloTftC1Eiiiiiii+0x60>)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	629a      	str	r2, [r3, #40]	@ 0x28
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003624:	62da      	str	r2, [r3, #44]	@ 0x2c
{
  Xi = xi;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	619a      	str	r2, [r3, #24]
  Ancho = ancho;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	621a      	str	r2, [r3, #32]
  Yi = yi;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	61da      	str	r2, [r3, #28]
  Alto = alto;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	625a      	str	r2, [r3, #36]	@ 0x24
  BackColor = backColor;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	69fa      	ldr	r2, [r7, #28]
 8003642:	615a      	str	r2, [r3, #20]
  ColorControrno = colorContorno;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003648:	62da      	str	r2, [r3, #44]	@ 0x2c
  Contorno = contorno;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6a3a      	ldr	r2, [r7, #32]
 800364e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	08015020 	.word	0x08015020

08003660 <_ZN14CRectanguloTft4ShowEv>:
//muestra el rectangulo en pantalla

void CRectanguloTft::Show()
{
 8003660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003662:	b085      	sub	sp, #20
 8003664:	af02      	add	r7, sp, #8
 8003666:	6078      	str	r0, [r7, #4]
  //dibujo el rectangulo
  fillRect(Xi, Yi, Ancho, Alto, BackColor);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	3338      	adds	r3, #56	@ 0x38
 8003670:	681c      	ldr	r4, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	b219      	sxth	r1, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	b21d      	sxth	r5, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	b21e      	sxth	r6, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003688:	b21b      	sxth	r3, r3
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6952      	ldr	r2, [r2, #20]
 800368e:	b292      	uxth	r2, r2
 8003690:	9201      	str	r2, [sp, #4]
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	4633      	mov	r3, r6
 8003696:	462a      	mov	r2, r5
 8003698:	47a0      	blx	r4
  //hay que mostrar contorno?
  if (Contorno == 1) {
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d118      	bne.n	80036d4 <_ZN14CRectanguloTft4ShowEv+0x74>
    drawRect(Xi, Yi, Ancho, Alto, ColorControrno);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	3344      	adds	r3, #68	@ 0x44
 80036aa:	681c      	ldr	r4, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	b219      	sxth	r1, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	b21d      	sxth	r5, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	b21e      	sxth	r6, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c2:	b21b      	sxth	r3, r3
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80036c8:	b292      	uxth	r2, r2
 80036ca:	9201      	str	r2, [sp, #4]
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	4633      	mov	r3, r6
 80036d0:	462a      	mov	r2, r5
 80036d2:	47a0      	blx	r4
  }
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036dc <_ZN14CRectanguloTft14CambiaPosicionEii>:

void CRectanguloTft::CambiaPosicion(int x, int y)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  Xi=x;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	619a      	str	r2, [r3, #24]
  Yi=y;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	61da      	str	r2, [r3, #28]
}
 80036f4:	bf00      	nop
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <_ZN14CRectanguloTft12RedimencionaEii>:

void CRectanguloTft::Redimenciona(int ancho, int alto)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
  Ancho=ancho;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	621a      	str	r2, [r3, #32]
  Alto=alto;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003718:	bf00      	nop
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <_ZN14CRectanguloTft13SetColorFondoEi>:

void CRectanguloTft::SetColorFondo(int color)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  BackColor=color;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	615a      	str	r2, [r3, #20]
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <_ZN14CRectanguloTft13DamePosicionXEv>:
{
  return ColorControrno;
}

int CRectanguloTft::DamePosicionX()
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  return Xi;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	699b      	ldr	r3, [r3, #24]
}
 800374c:	4618      	mov	r0, r3
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <_ZN14CRectanguloTft13DamePosicionYEv>:

int CRectanguloTft::DamePosicionY()
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  return Yi;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	69db      	ldr	r3, [r3, #28]
}
 8003764:	4618      	mov	r0, r3
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <_ZN14CRectanguloTft8DameAltoEv>:
{
  return Ancho;
}

int CRectanguloTft::DameAlto()
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  return Alto;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 800377c:	4618      	mov	r0, r3
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <_ZN14CRectanguloTft11DameCentroXEv>:

//regresa el punto central del rectangulo
int CRectanguloTft::DameCentroX()
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  return Xi+(Ancho/2);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	699a      	ldr	r2, [r3, #24]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	0fd9      	lsrs	r1, r3, #31
 800379a:	440b      	add	r3, r1
 800379c:	105b      	asrs	r3, r3, #1
 800379e:	4413      	add	r3, r2
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <_ZN26CConfigurarPantallaMemoriaC1Ev>:
#include <GUI/ManejadorPantallas/CManejadorPantallas.hpp>
#include <EPROM/CEprom.hpp>

extern I2C_HandleTypeDef hi2c1;

CConfigurarPantallaMemoria::CConfigurarPantallaMemoria():
 80037ac:	b590      	push	{r4, r7, lr}
 80037ae:	b08d      	sub	sp, #52	@ 0x34
 80037b0:	af08      	add	r7, sp, #32
 80037b2:	6078      	str	r0, [r7, #4]
CPantallaBase(1, (char*)"CONF MEMORIA")
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a6b      	ldr	r2, [pc, #428]	@ (8003964 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1b8>)
 80037b8:	2101      	movs	r1, #1
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7ff fdcc 	bl	8003358 <_ZN13CPantallaBaseC1EiPc>
 80037c0:	4a69      	ldr	r2, [pc, #420]	@ (8003968 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1bc>)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	4a69      	ldr	r2, [pc, #420]	@ (800396c <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1c0>)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

{
	// TODO Auto-generated constructor stub
	LabelMemoria=new CEtiquetaTft( 5, 35, 50, 20, COLOR::BLACK,(char*)"Memoria: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 80037d4:	20a4      	movs	r0, #164	@ 0xa4
 80037d6:	f00e f983 	bl	8011ae0 <_Znwj>
 80037da:	4603      	mov	r3, r0
 80037dc:	461c      	mov	r4, r3
 80037de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037e2:	9306      	str	r3, [sp, #24]
 80037e4:	2300      	movs	r3, #0
 80037e6:	9305      	str	r3, [sp, #20]
 80037e8:	2303      	movs	r3, #3
 80037ea:	9304      	str	r3, [sp, #16]
 80037ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037f0:	9303      	str	r3, [sp, #12]
 80037f2:	4b5f      	ldr	r3, [pc, #380]	@ (8003970 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1c4>)
 80037f4:	9302      	str	r3, [sp, #8]
 80037f6:	2300      	movs	r3, #0
 80037f8:	9301      	str	r3, [sp, #4]
 80037fa:	2314      	movs	r3, #20
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	2332      	movs	r3, #50	@ 0x32
 8003800:	2223      	movs	r2, #35	@ 0x23
 8003802:	2105      	movs	r1, #5
 8003804:	4620      	mov	r0, r4
 8003806:	f7ff fb5b 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f8c3 40b4 	str.w	r4, [r3, #180]	@ 0xb4
	LabelTemperatura = new CEtiquetaTft( 5, 65, 50, 20, COLOR::BLACK,(char*)"Temperatura", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8003810:	20a4      	movs	r0, #164	@ 0xa4
 8003812:	f00e f965 	bl	8011ae0 <_Znwj>
 8003816:	4603      	mov	r3, r0
 8003818:	461c      	mov	r4, r3
 800381a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800381e:	9306      	str	r3, [sp, #24]
 8003820:	2300      	movs	r3, #0
 8003822:	9305      	str	r3, [sp, #20]
 8003824:	2303      	movs	r3, #3
 8003826:	9304      	str	r3, [sp, #16]
 8003828:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800382c:	9303      	str	r3, [sp, #12]
 800382e:	4b51      	ldr	r3, [pc, #324]	@ (8003974 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1c8>)
 8003830:	9302      	str	r3, [sp, #8]
 8003832:	2300      	movs	r3, #0
 8003834:	9301      	str	r3, [sp, #4]
 8003836:	2314      	movs	r3, #20
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	2332      	movs	r3, #50	@ 0x32
 800383c:	2241      	movs	r2, #65	@ 0x41
 800383e:	2105      	movs	r1, #5
 8003840:	4620      	mov	r0, r4
 8003842:	f7ff fb3d 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f8c3 40b8 	str.w	r4, [r3, #184]	@ 0xb8
	int centroX = DameCentroX();
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4618      	mov	r0, r3
 8003850:	f7ff ff9a 	bl	8003788 <_ZN14CRectanguloTft11DameCentroXEv>
 8003854:	60f8      	str	r0, [r7, #12]
	LabelTemperaturas = new CEtiquetaTft( centroX - 150 / 2, 105, 150, 30,COLOR::WHITE, (char*)"000/000", COLOR::BLACK, 3, 1, COLOR::RED);
 8003856:	20a4      	movs	r0, #164	@ 0xa4
 8003858:	f00e f942 	bl	8011ae0 <_Znwj>
 800385c:	4603      	mov	r3, r0
 800385e:	461c      	mov	r4, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f1a3 014b 	sub.w	r1, r3, #75	@ 0x4b
 8003866:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800386a:	9306      	str	r3, [sp, #24]
 800386c:	2301      	movs	r3, #1
 800386e:	9305      	str	r3, [sp, #20]
 8003870:	2303      	movs	r3, #3
 8003872:	9304      	str	r3, [sp, #16]
 8003874:	2300      	movs	r3, #0
 8003876:	9303      	str	r3, [sp, #12]
 8003878:	4b3f      	ldr	r3, [pc, #252]	@ (8003978 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1cc>)
 800387a:	9302      	str	r3, [sp, #8]
 800387c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003880:	9301      	str	r3, [sp, #4]
 8003882:	231e      	movs	r3, #30
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	2396      	movs	r3, #150	@ 0x96
 8003888:	2269      	movs	r2, #105	@ 0x69
 800388a:	4620      	mov	r0, r4
 800388c:	f7ff fb18 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f8c3 40bc 	str.w	r4, [r3, #188]	@ 0xbc
	LabelTemperaturas->SetSeparacion(5, 5);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800389c:	2205      	movs	r2, #5
 800389e:	2105      	movs	r1, #5
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff fc97 	bl	80031d4 <_ZN12CEtiquetaTft13SetSeparacionEii>
	LabelAire = new CEtiquetaTft( 5, 135, 200, 30, COLOR::BLACK,(char*) "Aire: 00",COLOR::WHITE, 3, 0, COLOR::RED);
 80038a6:	20a4      	movs	r0, #164	@ 0xa4
 80038a8:	f00e f91a 	bl	8011ae0 <_Znwj>
 80038ac:	4603      	mov	r3, r0
 80038ae:	461c      	mov	r4, r3
 80038b0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80038b4:	9306      	str	r3, [sp, #24]
 80038b6:	2300      	movs	r3, #0
 80038b8:	9305      	str	r3, [sp, #20]
 80038ba:	2303      	movs	r3, #3
 80038bc:	9304      	str	r3, [sp, #16]
 80038be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038c2:	9303      	str	r3, [sp, #12]
 80038c4:	4b2d      	ldr	r3, [pc, #180]	@ (800397c <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1d0>)
 80038c6:	9302      	str	r3, [sp, #8]
 80038c8:	2300      	movs	r3, #0
 80038ca:	9301      	str	r3, [sp, #4]
 80038cc:	231e      	movs	r3, #30
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	23c8      	movs	r3, #200	@ 0xc8
 80038d2:	2287      	movs	r2, #135	@ 0x87
 80038d4:	2105      	movs	r1, #5
 80038d6:	4620      	mov	r0, r4
 80038d8:	f7ff faf2 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f8c3 40c0 	str.w	r4, [r3, #192]	@ 0xc0

	LabelGuardar=new CEtiquetaTft( 10, 200, 130, 30, COLOR::GREEN,(char*)"GUARDAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 80038e2:	20a4      	movs	r0, #164	@ 0xa4
 80038e4:	f00e f8fc 	bl	8011ae0 <_Znwj>
 80038e8:	4603      	mov	r3, r0
 80038ea:	461c      	mov	r4, r3
 80038ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038f0:	9306      	str	r3, [sp, #24]
 80038f2:	2301      	movs	r3, #1
 80038f4:	9305      	str	r3, [sp, #20]
 80038f6:	2303      	movs	r3, #3
 80038f8:	9304      	str	r3, [sp, #16]
 80038fa:	2300      	movs	r3, #0
 80038fc:	9303      	str	r3, [sp, #12]
 80038fe:	4b20      	ldr	r3, [pc, #128]	@ (8003980 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1d4>)
 8003900:	9302      	str	r3, [sp, #8]
 8003902:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8003906:	9301      	str	r3, [sp, #4]
 8003908:	231e      	movs	r3, #30
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	2382      	movs	r3, #130	@ 0x82
 800390e:	22c8      	movs	r2, #200	@ 0xc8
 8003910:	210a      	movs	r1, #10
 8003912:	4620      	mov	r0, r4
 8003914:	f7ff fad4 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f8c3 40ac 	str.w	r4, [r3, #172]	@ 0xac
	LabelCancelar=new CEtiquetaTft( 160, 200, 145, 30, COLOR::RED,(char*)"CANCELAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 800391e:	20a4      	movs	r0, #164	@ 0xa4
 8003920:	f00e f8de 	bl	8011ae0 <_Znwj>
 8003924:	4603      	mov	r3, r0
 8003926:	461c      	mov	r4, r3
 8003928:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800392c:	9306      	str	r3, [sp, #24]
 800392e:	2301      	movs	r3, #1
 8003930:	9305      	str	r3, [sp, #20]
 8003932:	2303      	movs	r3, #3
 8003934:	9304      	str	r3, [sp, #16]
 8003936:	2300      	movs	r3, #0
 8003938:	9303      	str	r3, [sp, #12]
 800393a:	4b12      	ldr	r3, [pc, #72]	@ (8003984 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1d8>)
 800393c:	9302      	str	r3, [sp, #8]
 800393e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003942:	9301      	str	r3, [sp, #4]
 8003944:	231e      	movs	r3, #30
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	2391      	movs	r3, #145	@ 0x91
 800394a:	22c8      	movs	r2, #200	@ 0xc8
 800394c:	21a0      	movs	r1, #160	@ 0xa0
 800394e:	4620      	mov	r0, r4
 8003950:	f7ff fab6 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f8c3 40b0 	str.w	r4, [r3, #176]	@ 0xb0

}
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4618      	mov	r0, r3
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	bd90      	pop	{r4, r7, pc}
 8003964:	080147fc 	.word	0x080147fc
 8003968:	08015080 	.word	0x08015080
 800396c:	08015114 	.word	0x08015114
 8003970:	0801480c 	.word	0x0801480c
 8003974:	08014818 	.word	0x08014818
 8003978:	08014824 	.word	0x08014824
 800397c:	0801482c 	.word	0x0801482c
 8003980:	08014838 	.word	0x08014838
 8003984:	08014840 	.word	0x08014840

08003988 <_ZN26CConfigurarPantallaMemoriaD1Ev>:

CConfigurarPantallaMemoria::~CConfigurarPantallaMemoria()
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	4a07      	ldr	r2, [pc, #28]	@ (80039b0 <_ZN26CConfigurarPantallaMemoriaD1Ev+0x28>)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	4a07      	ldr	r2, [pc, #28]	@ (80039b4 <_ZN26CConfigurarPantallaMemoriaD1Ev+0x2c>)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7ff fca6 	bl	80032f0 <_ZN13CPantallaBaseD1Ev>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4618      	mov	r0, r3
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	08015080 	.word	0x08015080
 80039b4:	08015114 	.word	0x08015114

080039b8 <_ZThn48_N26CConfigurarPantallaMemoriaD1Ev>:

	void LeeDatosMemoria();
	void MuestraInformacion();
public:
	CConfigurarPantallaMemoria();
	virtual ~CConfigurarPantallaMemoria();
 80039b8:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80039bc:	f7ff bfe4 	b.w	8003988 <_ZN26CConfigurarPantallaMemoriaD1Ev>

080039c0 <_ZN26CConfigurarPantallaMemoriaD0Ev>:
CConfigurarPantallaMemoria::~CConfigurarPantallaMemoria()
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
}
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f7ff ffdd 	bl	8003988 <_ZN26CConfigurarPantallaMemoriaD1Ev>
 80039ce:	21dc      	movs	r1, #220	@ 0xdc
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f00e f883 	bl	8011adc <_ZdlPvj>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4618      	mov	r0, r3
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <_ZThn48_N26CConfigurarPantallaMemoriaD0Ev>:
 80039e0:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80039e4:	f7ff bfec 	b.w	80039c0 <_ZN26CConfigurarPantallaMemoriaD0Ev>

080039e8 <_ZN26CConfigurarPantallaMemoria4ShowEv>:

void CConfigurarPantallaMemoria::Show()
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
	VelocidadAireInicialPotenciometro=ManejadorControles->GetNivelAire();
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80039f6:	4618      	mov	r0, r3
 80039f8:	f006 fd27 	bl	800a44a <_ZN19CManejadorControles12GetNivelAireEv>
 80039fc:	4602      	mov	r2, r0
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	CPantallaBase::Show();
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff fd18 	bl	800343c <_ZN13CPantallaBase4ShowEv>
	LeeDatosMemoria();
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f87d 	bl	8003b0c <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv>
	LabelTemperatura->Show();
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	334c      	adds	r3, #76	@ 0x4c
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4610      	mov	r0, r2
 8003a26:	4798      	blx	r3
	MuestraInformacion();
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f8b3 	bl	8003b94 <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv>
	LabelMemoria->SetTexto((char*)"Memoria: %d", NumeroMemoria);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f8d3 00b4 	ldr.w	r0, [r3, #180]	@ 0xb4
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	4913      	ldr	r1, [pc, #76]	@ (8003a8c <_ZN26CConfigurarPantallaMemoria4ShowEv+0xa4>)
 8003a3e:	f7ff fa79 	bl	8002f34 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelMemoria->Show();
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	334c      	adds	r3, #76	@ 0x4c
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4610      	mov	r0, r2
 8003a56:	4798      	blx	r3
	LabelGuardar->Show();
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	334c      	adds	r3, #76	@ 0x4c
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4610      	mov	r0, r2
 8003a6c:	4798      	blx	r3
	LabelCancelar->Show();
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	334c      	adds	r3, #76	@ 0x4c
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4610      	mov	r0, r2
 8003a82:	4798      	blx	r3
}
 8003a84:	bf00      	nop
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	0801484c 	.word	0x0801484c

08003a90 <_ZN26CConfigurarPantallaMemoria8RefrescaEv>:

void CConfigurarPantallaMemoria::Refresca()
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
	int velocidad=ManejadorControles->GetNivelAire();
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f006 fcd3 	bl	800a44a <_ZN19CManejadorControles12GetNivelAireEv>
 8003aa4:	60f8      	str	r0, [r7, #12]
	if(VelocidadAireInicialPotenciometro>velocidad+1 ||VelocidadAireInicialPotenciometro<velocidad-1)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	dc06      	bgt.n	8003ac2 <_ZN26CConfigurarPantallaMemoria8RefrescaEv+0x32>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	3b01      	subs	r3, #1
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	da03      	bge.n	8003aca <_ZN26CConfigurarPantallaMemoria8RefrescaEv+0x3a>
	{
		VelocidadAire =velocidad;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
	}
	MuestraInformacion();
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f862 	bl	8003b94 <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv>
}
 8003ad0:	bf00      	nop
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <_ZN26CConfigurarPantallaMemoria10SetMemoriaEi>:
void CConfigurarPantallaMemoria::SetMemoria(int numeroMemoria)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
	TemperaturaAnterior=-1;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ae8:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	VelocidadAireAnterior=-1;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f04f 32ff 	mov.w	r2, #4294967295
 8003af2:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	NumeroMemoria=numeroMemoria;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
//	DireccionMemoria=DameDireccionMemoria();
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
	...

08003b0c <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv>:

void CConfigurarPantallaMemoria::LeeDatosMemoria()
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
	switch(NumeroMemoria)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003b1a:	2b03      	cmp	r3, #3
 8003b1c:	d024      	beq.n	8003b68 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x5c>
 8003b1e:	2b03      	cmp	r3, #3
 8003b20:	dc31      	bgt.n	8003b86 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x7a>
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d002      	beq.n	8003b2c <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x20>
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d00f      	beq.n	8003b4a <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x3e>
	case 3:
		Temperatura=Eprom.DameTemperatuarMemoria3();
		VelocidadAire=Eprom.DameVelocidadMemoria3();
		break;
	}
}
 8003b2a:	e02c      	b.n	8003b86 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x7a>
		Temperatura=Eprom.DameTemperatuarMemoria1();
 8003b2c:	4818      	ldr	r0, [pc, #96]	@ (8003b90 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x84>)
 8003b2e:	f7fd fdc7 	bl	80016c0 <_ZN6CEprom23DameTemperatuarMemoria1Ev>
 8003b32:	4602      	mov	r2, r0
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
		VelocidadAire=Eprom.DameVelocidadMemoria1();
 8003b3a:	4815      	ldr	r0, [pc, #84]	@ (8003b90 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x84>)
 8003b3c:	f7fd fdd2 	bl	80016e4 <_ZN6CEprom21DameVelocidadMemoria1Ev>
 8003b40:	4602      	mov	r2, r0
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
		break;
 8003b48:	e01d      	b.n	8003b86 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x7a>
		Temperatura=Eprom.DameTemperatuarMemoria2();
 8003b4a:	4811      	ldr	r0, [pc, #68]	@ (8003b90 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x84>)
 8003b4c:	f7fd fe0c 	bl	8001768 <_ZN6CEprom23DameTemperatuarMemoria2Ev>
 8003b50:	4602      	mov	r2, r0
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
		VelocidadAire=Eprom.DameVelocidadMemoria2();
 8003b58:	480d      	ldr	r0, [pc, #52]	@ (8003b90 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x84>)
 8003b5a:	f7fd fe17 	bl	800178c <_ZN6CEprom21DameVelocidadMemoria2Ev>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
		break;
 8003b66:	e00e      	b.n	8003b86 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x7a>
		Temperatura=Eprom.DameTemperatuarMemoria3();
 8003b68:	4809      	ldr	r0, [pc, #36]	@ (8003b90 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x84>)
 8003b6a:	f7fd fe51 	bl	8001810 <_ZN6CEprom23DameTemperatuarMemoria3Ev>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
		VelocidadAire=Eprom.DameVelocidadMemoria3();
 8003b76:	4806      	ldr	r0, [pc, #24]	@ (8003b90 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x84>)
 8003b78:	f7fd fe5c 	bl	8001834 <_ZN6CEprom21DameVelocidadMemoria3Ev>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
		break;
 8003b84:	bf00      	nop
}
 8003b86:	bf00      	nop
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	2000031c 	.word	0x2000031c

08003b94 <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv>:
void CConfigurarPantallaMemoria::MuestraInformacion()
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]

	if(TemperaturaAnterior!=Temperatura)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d01a      	beq.n	8003be2 <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv+0x4e>
	{
		LabelTemperaturas->SetTexto((char*)"%d", Temperatura);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003bb8:	461a      	mov	r2, r3
 8003bba:	491d      	ldr	r1, [pc, #116]	@ (8003c30 <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv+0x9c>)
 8003bbc:	f7ff f9ba 	bl	8002f34 <_ZN12CEtiquetaTft8SetTextoEPcz>
		LabelTemperaturas->Show();
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	334c      	adds	r3, #76	@ 0x4c
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4610      	mov	r0, r2
 8003bd4:	4798      	blx	r3
		TemperaturaAnterior=Temperatura;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	}

	if( VelocidadAireAnterior!=VelocidadAire)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d01a      	beq.n	8003c28 <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv+0x94>
	{
		LabelAire->SetTexto((char*)"Aire: %d", VelocidadAire);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003bfe:	461a      	mov	r2, r3
 8003c00:	490c      	ldr	r1, [pc, #48]	@ (8003c34 <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv+0xa0>)
 8003c02:	f7ff f997 	bl	8002f34 <_ZN12CEtiquetaTft8SetTextoEPcz>
		LabelAire->Show();
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	334c      	adds	r3, #76	@ 0x4c
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4610      	mov	r0, r2
 8003c1a:	4798      	blx	r3
		VelocidadAireAnterior=VelocidadAire;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	}
}
 8003c28:	bf00      	nop
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	08014858 	.word	0x08014858
 8003c34:	0801485c 	.word	0x0801485c

08003c38 <_ZN26CConfigurarPantallaMemoria19OnPerillaIncrementoEv>:
void CConfigurarPantallaMemoria::OnPerillaIncremento()
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
	if(Temperatura<500)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003c46:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003c4a:	da06      	bge.n	8003c5a <_ZN26CConfigurarPantallaMemoria19OnPerillaIncrementoEv+0x22>
		Temperatura++;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003c52:	1c5a      	adds	r2, r3, #1
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <_ZThn48_N26CConfigurarPantallaMemoria19OnPerillaIncrementoEv>:
	virtual void Show();
	virtual void Refresca();
	virtual void SetMemoria(int numeroMemoria);
	virtual void OnPerillaIncremento();
 8003c66:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8003c6a:	f7ff bfe5 	b.w	8003c38 <_ZN26CConfigurarPantallaMemoria19OnPerillaIncrementoEv>

08003c6e <_ZN26CConfigurarPantallaMemoria19OnPerillaDecrementoEv>:
void CConfigurarPantallaMemoria::OnPerillaDecremento()
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
	if(Temperatura>0)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	dd06      	ble.n	8003c8e <_ZN26CConfigurarPantallaMemoria19OnPerillaDecrementoEv+0x20>
		Temperatura--;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003c86:	1e5a      	subs	r2, r3, #1
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <_ZThn48_N26CConfigurarPantallaMemoria19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 8003c9a:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8003c9e:	f7ff bfe6 	b.w	8003c6e <_ZN26CConfigurarPantallaMemoria19OnPerillaDecrementoEv>
	...

08003ca4 <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv>:
void CConfigurarPantallaMemoria::OnBotonUnoClickEvent()
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
	switch(NumeroMemoria)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003cb2:	2b03      	cmp	r3, #3
 8003cb4:	d01c      	beq.n	8003cf0 <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x4c>
 8003cb6:	2b03      	cmp	r3, #3
 8003cb8:	dc25      	bgt.n	8003d06 <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x62>
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d002      	beq.n	8003cc4 <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x20>
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d00b      	beq.n	8003cda <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x36>
 8003cc2:	e020      	b.n	8003d06 <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x62>
	{
	case 1:
		Eprom.GuardaMemoria1(Temperatura, VelocidadAire);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4810      	ldr	r0, [pc, #64]	@ (8003d14 <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x70>)
 8003cd4:	f7fd fd18 	bl	8001708 <_ZN6CEprom14GuardaMemoria1Eii>
		break;
 8003cd8:	e015      	b.n	8003d06 <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x62>
	case 2:
		Eprom.GuardaMemoria2(Temperatura, VelocidadAire);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	480a      	ldr	r0, [pc, #40]	@ (8003d14 <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x70>)
 8003cea:	f7fd fd61 	bl	80017b0 <_ZN6CEprom14GuardaMemoria2Eii>
		break;
 8003cee:	e00a      	b.n	8003d06 <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x62>
	case 3:
		Eprom.GuardaMemoria3(Temperatura, VelocidadAire);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	4805      	ldr	r0, [pc, #20]	@ (8003d14 <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x70>)
 8003d00:	f7fd fdaa 	bl	8001858 <_ZN6CEprom14GuardaMemoria3Eii>
		break;
 8003d04:	bf00      	nop
	}
	 ManejadorPantallas.MuestraMenuPrincipal();
 8003d06:	4804      	ldr	r0, [pc, #16]	@ (8003d18 <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x74>)
 8003d08:	f000 f892 	bl	8003e30 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>
}
 8003d0c:	bf00      	nop
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	2000031c 	.word	0x2000031c
 8003d18:	2000025c 	.word	0x2000025c

08003d1c <_ZThn48_N26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv>:
	virtual void OnBotonUnoClickEvent();
 8003d1c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8003d20:	f7ff bfc0 	b.w	8003ca4 <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv>

08003d24 <_ZN26CConfigurarPantallaMemoria21OnBotonTresClickEventEv>:
void CConfigurarPantallaMemoria::OnBotonTresClickEvent()
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
	 ManejadorPantallas.MuestraMenuPrincipal();
 8003d2c:	4803      	ldr	r0, [pc, #12]	@ (8003d3c <_ZN26CConfigurarPantallaMemoria21OnBotonTresClickEventEv+0x18>)
 8003d2e:	f000 f87f 	bl	8003e30 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>

}
 8003d32:	bf00      	nop
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	2000025c 	.word	0x2000025c

08003d40 <_ZThn48_N26CConfigurarPantallaMemoria21OnBotonTresClickEventEv>:
	virtual void OnBotonTresClickEvent();
 8003d40:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8003d44:	f7ff bfee 	b.w	8003d24 <_ZN26CConfigurarPantallaMemoria21OnBotonTresClickEventEv>

08003d48 <_ZN19CManejadorPantallasC1Ev>:
#include<string.h>
#include <GUI/ConfigurarPantallaMemoria/CConfigurarPantallaMemoria.hpp>
#include <GUI/Rampa/PantallaEditorNombre/CPantallaEditorNombre.hpp>
#include <GUI/Rampa/PantallaEliminarRampa/CPantallaEliminarRampa.hpp>

CManejadorPantallas::CManejadorPantallas()
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	4a11      	ldr	r2, [pc, #68]	@ (8003d98 <_ZN19CManejadorPantallasC1Ev+0x50>)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	605a      	str	r2, [r3, #4]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	609a      	str	r2, [r3, #8]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	60da      	str	r2, [r3, #12]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	611a      	str	r2, [r3, #16]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	615a      	str	r2, [r3, #20]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	619a      	str	r2, [r3, #24]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	61da      	str	r2, [r3, #28]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
{
	// TODO Auto-generated constructor stub
}
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	08015148 	.word	0x08015148

08003d9c <_ZN19CManejadorPantallasD1Ev>:

CManejadorPantallas::~CManejadorPantallas()
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	4a04      	ldr	r2, [pc, #16]	@ (8003db8 <_ZN19CManejadorPantallasD1Ev+0x1c>)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4618      	mov	r0, r3
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	08015148 	.word	0x08015148

08003dbc <_ZN19CManejadorPantallasD0Ev>:
CManejadorPantallas::~CManejadorPantallas()
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
}
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7ff ffe9 	bl	8003d9c <_ZN19CManejadorPantallasD1Ev>
 8003dca:	21bc      	movs	r1, #188	@ 0xbc
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f00d fe85 	bl	8011adc <_ZdlPvj>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <_ZN19CManejadorPantallas11SetEstacionEP13CEstacionBase>:
void CManejadorPantallas::SetEstacion(CEstacionBase* estacion)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
	Estacion=estacion;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	605a      	str	r2, [r3, #4]
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>:
void CManejadorPantallas::MuestraPantallaManual()
{
 8003df8:	b590      	push	{r4, r7, lr}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
	if(pantallaManual==NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	695b      	ldr	r3, [r3, #20]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d109      	bne.n	8003e1c <_ZN19CManejadorPantallas21MuestraPantallaManualEv+0x24>
		pantallaManual=new CPantallaManual();
 8003e08:	20ec      	movs	r0, #236	@ 0xec
 8003e0a:	f00d fe69 	bl	8011ae0 <_Znwj>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	461c      	mov	r4, r3
 8003e12:	4620      	mov	r0, r4
 8003e14:	f001 fd52 	bl	80058bc <_ZN15CPantallaManualC1Ev>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	615c      	str	r4, [r3, #20]
	AsignaPantallaActual(pantallaManual);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	4619      	mov	r1, r3
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f850 	bl	8003ec8 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd90      	pop	{r4, r7, pc}

08003e30 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>:
void CManejadorPantallas::MuestraMenuPrincipal()
{
 8003e30:	b590      	push	{r4, r7, lr}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
	if(menuPrincipal==NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d109      	bne.n	8003e54 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv+0x24>
		menuPrincipal=new CMenuPrincipal();
 8003e40:	20c0      	movs	r0, #192	@ 0xc0
 8003e42:	f00d fe4d 	bl	8011ae0 <_Znwj>
 8003e46:	4603      	mov	r3, r0
 8003e48:	461c      	mov	r4, r3
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	f002 fca0 	bl	8006790 <_ZN14CMenuPrincipalC1Ev>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	619c      	str	r4, [r3, #24]
	AsignaPantallaActual(menuPrincipal);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	4619      	mov	r1, r3
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f834 	bl	8003ec8 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd90      	pop	{r4, r7, pc}

08003e68 <_ZN19CManejadorPantallas16MuestraMenuRampaEv>:

void CManejadorPantallas::MuestraMenuRampa()
{
 8003e68:	b590      	push	{r4, r7, lr}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
	if(menuRampa==NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	69db      	ldr	r3, [r3, #28]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d109      	bne.n	8003e8c <_ZN19CManejadorPantallas16MuestraMenuRampaEv+0x24>
		menuRampa=new CPantallaMenuRampa();
 8003e78:	20c0      	movs	r0, #192	@ 0xc0
 8003e7a:	f00d fe31 	bl	8011ae0 <_Znwj>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	461c      	mov	r4, r3
 8003e82:	4620      	mov	r0, r4
 8003e84:	f004 ff0e 	bl	8008ca4 <_ZN18CPantallaMenuRampaC1Ev>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	61dc      	str	r4, [r3, #28]
	AsignaPantallaActual(menuRampa);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	4619      	mov	r1, r3
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f818 	bl	8003ec8 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd90      	pop	{r4, r7, pc}

08003ea0 <_ZN19CManejadorPantallas16RefrescaPantallaEv>:
void CManejadorPantallas::RefrescaPantalla()
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
	CambiaPantalla();
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 f826 	bl	8003efa <_ZN19CManejadorPantallas14CambiaPantallaEv>
	PantallaActual->Refresca();
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	3358      	adds	r3, #88	@ 0x58
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4610      	mov	r0, r2
 8003ebe:	4798      	blx	r3
}
 8003ec0:	bf00      	nop
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>:
void CManejadorPantallas::AsignaPantallaActual(CPantallaBase* pantalla)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
	PantallaPendinteCambiar=pantalla;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	609a      	str	r2, [r3, #8]
	CambioPantalla=true;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
	PantallaPendinteCambiar->Seleccionada();
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3374      	adds	r3, #116	@ 0x74
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4610      	mov	r0, r2
 8003ef0:	4798      	blx	r3
}
 8003ef2:	bf00      	nop
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <_ZN19CManejadorPantallas14CambiaPantallaEv>:
void CManejadorPantallas::CambiaPantalla()
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b082      	sub	sp, #8
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
	if(	CambioPantalla==false)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d038      	beq.n	8003f7e <_ZN19CManejadorPantallas14CambiaPantallaEv+0x84>
		return;
	if(PantallaActual!=NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00c      	beq.n	8003f2e <_ZN19CManejadorPantallas14CambiaPantallaEv+0x34>
	{
		PantallaActual->Ocultar();
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68da      	ldr	r2, [r3, #12]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3364      	adds	r3, #100	@ 0x64
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4610      	mov	r0, r2
 8003f24:	4798      	blx	r3
		PantallaAnterior=PantallaActual;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	611a      	str	r2, [r3, #16]
	}
	PantallaActual=PantallaPendinteCambiar;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689a      	ldr	r2, [r3, #8]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	60da      	str	r2, [r3, #12]
	PantallaActual->SetEstacion(Estacion);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68d8      	ldr	r0, [r3, #12]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	335c      	adds	r3, #92	@ 0x5c
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	6852      	ldr	r2, [r2, #4]
 8003f48:	4611      	mov	r1, r2
 8003f4a:	4798      	blx	r3
	PantallaActual->SetManejadorControles(ManejadorControles);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68d8      	ldr	r0, [r3, #12]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	3360      	adds	r3, #96	@ 0x60
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6a12      	ldr	r2, [r2, #32]
 8003f5e:	4611      	mov	r1, r2
 8003f60:	4798      	blx	r3
	PantallaActual->Show();
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	334c      	adds	r3, #76	@ 0x4c
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4610      	mov	r0, r2
 8003f72:	4798      	blx	r3
	CambioPantalla=false;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8003f7c:	e000      	b.n	8003f80 <_ZN19CManejadorPantallas14CambiaPantallaEv+0x86>
		return;
 8003f7e:	bf00      	nop
}
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <_ZN19CManejadorPantallas21SetManejadorControlesEP19CManejadorControles>:

void CManejadorPantallas::SetManejadorControles(CManejadorControles* manejador)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
 8003f8e:	6039      	str	r1, [r7, #0]
	ManejadorControles=manejador;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	621a      	str	r2, [r3, #32]
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <_ZN19CManejadorPantallas35MuestraPantallaConfiguracionMemoriaEi>:

void CManejadorPantallas::MuestraPantallaConfiguracionMemoria(int meoria)
{
 8003fa2:	b590      	push	{r4, r7, lr}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	6039      	str	r1, [r7, #0]
	if(ConfigurarPantallaMemoria==NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d109      	bne.n	8003fc8 <_ZN19CManejadorPantallas35MuestraPantallaConfiguracionMemoriaEi+0x26>
		ConfigurarPantallaMemoria=new CConfigurarPantallaMemoria();
 8003fb4:	20dc      	movs	r0, #220	@ 0xdc
 8003fb6:	f00d fd93 	bl	8011ae0 <_Znwj>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	461c      	mov	r4, r3
 8003fbe:	4620      	mov	r0, r4
 8003fc0:	f7ff fbf4 	bl	80037ac <_ZN26CConfigurarPantallaMemoriaC1Ev>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	625c      	str	r4, [r3, #36]	@ 0x24
	ConfigurarPantallaMemoria->SetMemoria(meoria);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	3378      	adds	r3, #120	@ 0x78
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6839      	ldr	r1, [r7, #0]
 8003fd8:	4610      	mov	r0, r2
 8003fda:	4798      	blx	r3
	AsignaPantallaActual(ConfigurarPantallaMemoria);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7ff ff70 	bl	8003ec8 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd90      	pop	{r4, r7, pc}

08003ff0 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>:
void CManejadorPantallas::MuestraPantallaMemoria(int memoria)
{
 8003ff0:	b590      	push	{r4, r7, lr}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
	if(PantallaMemoria==NULL)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10a      	bne.n	8004018 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi+0x28>
		PantallaMemoria=new CPantallaMemoria();
 8004002:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8004006:	f00d fd6b 	bl	8011ae0 <_Znwj>
 800400a:	4603      	mov	r3, r0
 800400c:	461c      	mov	r4, r3
 800400e:	4620      	mov	r0, r4
 8004010:	f002 f86a 	bl	80060e8 <_ZN16CPantallaMemoriaC1Ev>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	629c      	str	r4, [r3, #40]	@ 0x28
	PantallaMemoria->SetMemoria(memoria);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401c:	6839      	ldr	r1, [r7, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f002 f93e 	bl	80062a0 <_ZN16CPantallaMemoria10SetMemoriaEi>
	AsignaPantallaActual(PantallaMemoria);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004028:	4619      	mov	r1, r3
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7ff ff4c 	bl	8003ec8 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>

}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	bd90      	pop	{r4, r7, pc}

08004038 <_ZN19CManejadorPantallas27MuestraCPantallaCalibracionEv>:
	if(PantallaAnterior==NULL)
		return;
	AsignaPantallaActual(PantallaAnterior);
}
void CManejadorPantallas::MuestraCPantallaCalibracion()
{
 8004038:	b590      	push	{r4, r7, lr}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
	if(PantallaCalibracion==NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004044:	2b00      	cmp	r3, #0
 8004046:	d109      	bne.n	800405c <_ZN19CManejadorPantallas27MuestraCPantallaCalibracionEv+0x24>
		PantallaCalibracion=new CPantallaCalibracion();
 8004048:	20ec      	movs	r0, #236	@ 0xec
 800404a:	f00d fd49 	bl	8011ae0 <_Znwj>
 800404e:	4603      	mov	r3, r0
 8004050:	461c      	mov	r4, r3
 8004052:	4620      	mov	r0, r4
 8004054:	f000 feae 	bl	8004db4 <_ZN20CPantallaCalibracionC1Ev>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	62dc      	str	r4, [r3, #44]	@ 0x2c
	AsignaPantallaActual(PantallaCalibracion);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004060:	4619      	mov	r1, r3
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7ff ff30 	bl	8003ec8 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	bd90      	pop	{r4, r7, pc}

08004070 <_ZN19CManejadorPantallas20MuestraPantallaRampaEi>:
void CManejadorPantallas::MuestraPantallaRampa(int nrampa)
{
 8004070:	b590      	push	{r4, r7, lr}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
	if(PantallaRampa==NULL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800407e:	2b00      	cmp	r3, #0
 8004080:	d109      	bne.n	8004096 <_ZN19CManejadorPantallas20MuestraPantallaRampaEi+0x26>
		PantallaRampa=new CPantallaRampa();
 8004082:	20b8      	movs	r0, #184	@ 0xb8
 8004084:	f00d fd2c 	bl	8011ae0 <_Znwj>
 8004088:	4603      	mov	r3, r0
 800408a:	461c      	mov	r4, r3
 800408c:	4620      	mov	r0, r4
 800408e:	f005 f937 	bl	8009300 <_ZN14CPantallaRampaC1Ev>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	631c      	str	r4, [r3, #48]	@ 0x30
	PantallaRampa->SetNumeroRampa(nrampa);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800409a:	6839      	ldr	r1, [r7, #0]
 800409c:	4618      	mov	r0, r3
 800409e:	f005 f9b5 	bl	800940c <_ZN14CPantallaRampa14SetNumeroRampaEi>
	AsignaPantallaActual(PantallaRampa);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a6:	4619      	mov	r1, r3
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f7ff ff0d 	bl	8003ec8 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>

}
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd90      	pop	{r4, r7, pc}

080040b6 <_ZN19CManejadorPantallas32MuestraPantallaInicializaMemoriaEv>:
void CManejadorPantallas::MuestraPantallaInicializaMemoria()
{
 80040b6:	b590      	push	{r4, r7, lr}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
	if(PantallaInicializaMemoria==NULL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d109      	bne.n	80040da <_ZN19CManejadorPantallas32MuestraPantallaInicializaMemoriaEv+0x24>
		PantallaInicializaMemoria=new CPantallaInicializaMemoria();
 80040c6:	20b4      	movs	r0, #180	@ 0xb4
 80040c8:	f00d fd0a 	bl	8011ae0 <_Znwj>
 80040cc:	4603      	mov	r3, r0
 80040ce:	461c      	mov	r4, r3
 80040d0:	4620      	mov	r0, r4
 80040d2:	f001 facb 	bl	800566c <_ZN26CPantallaInicializaMemoriaC1Ev>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	635c      	str	r4, [r3, #52]	@ 0x34
	AsignaPantallaActual(PantallaInicializaMemoria);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040de:	4619      	mov	r1, r3
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f7ff fef1 	bl	8003ec8 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd90      	pop	{r4, r7, pc}

080040ee <_ZN19CManejadorPantallas27MuestraPantallaEditorNombreEi>:
void CManejadorPantallas::MuestraPantallaEditorNombre(int id_Rampa)
{
 80040ee:	b590      	push	{r4, r7, lr}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
 80040f6:	6039      	str	r1, [r7, #0]
	if(PantallaEditorNombre==NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10a      	bne.n	8004116 <_ZN19CManejadorPantallas27MuestraPantallaEditorNombreEi+0x28>
		PantallaEditorNombre=new CPantallaEditorNombre(id_Rampa);
 8004100:	20dc      	movs	r0, #220	@ 0xdc
 8004102:	f00d fced 	bl	8011ae0 <_Znwj>
 8004106:	4603      	mov	r3, r0
 8004108:	461c      	mov	r4, r3
 800410a:	6839      	ldr	r1, [r7, #0]
 800410c:	4620      	mov	r0, r4
 800410e:	f003 f965 	bl	80073dc <_ZN21CPantallaEditorNombreC1Ei>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	639c      	str	r4, [r3, #56]	@ 0x38
	PantallaEditorNombre->AsignaID(id_Rampa);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800411a:	6839      	ldr	r1, [r7, #0]
 800411c:	4618      	mov	r0, r3
 800411e:	f003 fdeb 	bl	8007cf8 <_ZN21CPantallaEditorNombre8AsignaIDEi>
	AsignaPantallaActual(PantallaEditorNombre);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004126:	4619      	mov	r1, r3
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f7ff fecd 	bl	8003ec8 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	bd90      	pop	{r4, r7, pc}

08004136 <_ZN19CManejadorPantallas24AsignaPantallaPasosRampaEi>:
void CManejadorPantallas::AsignaPantallaPasosRampa(int id_rampa)
{
 8004136:	b590      	push	{r4, r7, lr}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
 800413e:	6039      	str	r1, [r7, #0]
	if(PantallaPasosRampa==NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10a      	bne.n	800415e <_ZN19CManejadorPantallas24AsignaPantallaPasosRampaEi+0x28>
		PantallaPasosRampa=new CPantallaPasosRampa(id_rampa);
 8004148:	20c4      	movs	r0, #196	@ 0xc4
 800414a:	f00d fcc9 	bl	8011ae0 <_Znwj>
 800414e:	4603      	mov	r3, r0
 8004150:	461c      	mov	r4, r3
 8004152:	6839      	ldr	r1, [r7, #0]
 8004154:	4620      	mov	r0, r4
 8004156:	f004 ff87 	bl	8009068 <_ZN19CPantallaPasosRampaC1Ei>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	63dc      	str	r4, [r3, #60]	@ 0x3c
	PantallaPasosRampa->SetIDRampa(id_rampa);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	3394      	adds	r3, #148	@ 0x94
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6839      	ldr	r1, [r7, #0]
 800416e:	4610      	mov	r0, r2
 8004170:	4798      	blx	r3
	AsignaPantallaActual(PantallaPasosRampa);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004176:	4619      	mov	r1, r3
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f7ff fea5 	bl	8003ec8 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>

}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	bd90      	pop	{r4, r7, pc}

08004186 <_ZN19CManejadorPantallas28MuestraPantallaEliminarRampaEi>:
void CManejadorPantallas::MuestraPantallaEliminarRampa(int id_rampa)
{
 8004186:	b590      	push	{r4, r7, lr}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
 800418e:	6039      	str	r1, [r7, #0]
	if(PantallaEliminarRampa==NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004194:	2b00      	cmp	r3, #0
 8004196:	d109      	bne.n	80041ac <_ZN19CManejadorPantallas28MuestraPantallaEliminarRampaEi+0x26>
		PantallaEliminarRampa=new CPantallaEliminarRampa();
 8004198:	20dc      	movs	r0, #220	@ 0xdc
 800419a:	f00d fca1 	bl	8011ae0 <_Znwj>
 800419e:	4603      	mov	r3, r0
 80041a0:	461c      	mov	r4, r3
 80041a2:	4620      	mov	r0, r4
 80041a4:	f004 fc3a 	bl	8008a1c <_ZN22CPantallaEliminarRampaC1Ev>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	641c      	str	r4, [r3, #64]	@ 0x40
	PantallaEliminarRampa->SetIdRampa(id_rampa);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	3380      	adds	r3, #128	@ 0x80
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6839      	ldr	r1, [r7, #0]
 80041bc:	4610      	mov	r0, r2
 80041be:	4798      	blx	r3
	AsignaPantallaActual(PantallaEliminarRampa);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c4:	4619      	mov	r1, r3
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7ff fe7e 	bl	8003ec8 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>

}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd90      	pop	{r4, r7, pc}

080041d4 <_ZN19CManejadorPantallas26MuestraPantallaEdicionPasoEii>:
void CManejadorPantallas::MuestraPantallaEdicionPaso(int id_rampa,int id_paso)
{
 80041d4:	b590      	push	{r4, r7, lr}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
	if(PantallaEdicionPaso==NULL)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10a      	bne.n	80041fe <_ZN19CManejadorPantallas26MuestraPantallaEdicionPasoEii+0x2a>
		PantallaEdicionPaso=new CPantallaEdicionPaso();
 80041e8:	f44f 70ae 	mov.w	r0, #348	@ 0x15c
 80041ec:	f00d fc78 	bl	8011ae0 <_Znwj>
 80041f0:	4603      	mov	r3, r0
 80041f2:	461c      	mov	r4, r3
 80041f4:	4620      	mov	r0, r4
 80041f6:	f002 fbd5 	bl	80069a4 <_ZN20CPantallaEdicionPasoC1Ev>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	645c      	str	r4, [r3, #68]	@ 0x44
	PantallaEdicionPaso->SetIdPaso(id_rampa,id_paso);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	68b9      	ldr	r1, [r7, #8]
 8004206:	4618      	mov	r0, r3
 8004208:	f002 fd52 	bl	8006cb0 <_ZN20CPantallaEdicionPaso9SetIdPasoEii>
	AsignaPantallaActual(PantallaEdicionPaso);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004210:	4619      	mov	r1, r3
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f7ff fe58 	bl	8003ec8 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 8004218:	bf00      	nop
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	bd90      	pop	{r4, r7, pc}

08004220 <_ZN19CManejadorPantallas19MuestraPantallaPasoEii>:
void CManejadorPantallas::MuestraPantallaPaso(int id_rampa,int id_paso)
{
 8004220:	b590      	push	{r4, r7, lr}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
	if(PantallaPaso==NULL)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004230:	2b00      	cmp	r3, #0
 8004232:	d109      	bne.n	8004248 <_ZN19CManejadorPantallas19MuestraPantallaPasoEii+0x28>
		PantallaPaso=new CPantallaPaso();
 8004234:	20bc      	movs	r0, #188	@ 0xbc
 8004236:	f00d fc53 	bl	8011ae0 <_Znwj>
 800423a:	4603      	mov	r3, r0
 800423c:	461c      	mov	r4, r3
 800423e:	4620      	mov	r0, r4
 8004240:	f004 fe4e 	bl	8008ee0 <_ZN13CPantallaPasoC1Ev>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	649c      	str	r4, [r3, #72]	@ 0x48
	PantallaPaso->SetIdPaso(id_rampa,id_paso);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	68b9      	ldr	r1, [r7, #8]
 8004250:	4618      	mov	r0, r3
 8004252:	f004 febb 	bl	8008fcc <_ZN13CPantallaPaso9SetIdPasoEii>
	AsignaPantallaActual(PantallaPaso);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800425a:	4619      	mov	r1, r3
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f7ff fe33 	bl	8003ec8 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 8004262:	bf00      	nop
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	bd90      	pop	{r4, r7, pc}

0800426a <_ZN19CManejadorPantallas27MuestraPantallaEliminarPasoEii>:
void CManejadorPantallas::MuestraPantallaEliminarPaso(int id_rampa,int id_paso)
{
 800426a:	b590      	push	{r4, r7, lr}
 800426c:	b085      	sub	sp, #20
 800426e:	af00      	add	r7, sp, #0
 8004270:	60f8      	str	r0, [r7, #12]
 8004272:	60b9      	str	r1, [r7, #8]
 8004274:	607a      	str	r2, [r7, #4]
	if(PantallaEliminarPaso==NULL)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800427a:	2b00      	cmp	r3, #0
 800427c:	d109      	bne.n	8004292 <_ZN19CManejadorPantallas27MuestraPantallaEliminarPasoEii+0x28>
		PantallaEliminarPaso=new CPantallaEliminarPaso();
 800427e:	20e0      	movs	r0, #224	@ 0xe0
 8004280:	f00d fc2e 	bl	8011ae0 <_Znwj>
 8004284:	4603      	mov	r3, r0
 8004286:	461c      	mov	r4, r3
 8004288:	4620      	mov	r0, r4
 800428a:	f004 fa95 	bl	80087b8 <_ZN21CPantallaEliminarPasoC1Ev>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	64dc      	str	r4, [r3, #76]	@ 0x4c
	PantallaEliminarPaso->SetIdPaso(id_rampa,id_paso);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	3380      	adds	r3, #128	@ 0x80
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	68b9      	ldr	r1, [r7, #8]
 80042a4:	4798      	blx	r3
	AsignaPantallaActual(PantallaEliminarPaso);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042aa:	4619      	mov	r1, r3
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f7ff fe0b 	bl	8003ec8 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 80042b2:	bf00      	nop
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd90      	pop	{r4, r7, pc}

080042ba <_ZN19CManejadorPantallas29MuestraPantallaEjecucionRampaEi>:
void CManejadorPantallas::MuestraPantallaEjecucionRampa(int id_rampa)
{
 80042ba:	b590      	push	{r4, r7, lr}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
 80042c2:	6039      	str	r1, [r7, #0]
	if(PantallaEjecucionRampa==NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10a      	bne.n	80042e2 <_ZN19CManejadorPantallas29MuestraPantallaEjecucionRampaEi+0x28>
		PantallaEjecucionRampa=new CPantallaEjecucionRampa();
 80042cc:	f44f 703a 	mov.w	r0, #744	@ 0x2e8
 80042d0:	f00d fc06 	bl	8011ae0 <_Znwj>
 80042d4:	4603      	mov	r3, r0
 80042d6:	461c      	mov	r4, r3
 80042d8:	4620      	mov	r0, r4
 80042da:	f003 fdfb 	bl	8007ed4 <_ZN23CPantallaEjecucionRampaC1Ev>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	651c      	str	r4, [r3, #80]	@ 0x50
	PantallaEjecucionRampa->SetIDRampa(id_rampa);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042e6:	6839      	ldr	r1, [r7, #0]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f003 ff0d 	bl	8008108 <_ZN23CPantallaEjecucionRampa10SetIDRampaEi>
	AsignaPantallaActual(PantallaEjecucionRampa);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042f2:	4619      	mov	r1, r3
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f7ff fde7 	bl	8003ec8 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 80042fa:	bf00      	nop
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd90      	pop	{r4, r7, pc}
	...

08004304 <_ZN20CManejadorEventoMenuC1Ev>:
 *      Author: W10
 */

#include <GUI/Menu/CManejadorEventoMenu.hpp>

CManejadorEventoMenu::CManejadorEventoMenu()
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	4a04      	ldr	r2, [pc, #16]	@ (8004320 <_ZN20CManejadorEventoMenuC1Ev+0x1c>)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4618      	mov	r0, r3
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	08015158 	.word	0x08015158

08004324 <_ZN20CManejadorEventoMenuD1Ev>:

CManejadorEventoMenu::~CManejadorEventoMenu()
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	4a04      	ldr	r2, [pc, #16]	@ (8004340 <_ZN20CManejadorEventoMenuD1Ev+0x1c>)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4618      	mov	r0, r3
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	08015158 	.word	0x08015158

08004344 <_ZN20CManejadorEventoMenuD0Ev>:
CManejadorEventoMenu::~CManejadorEventoMenu()
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
}
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7ff ffe9 	bl	8004324 <_ZN20CManejadorEventoMenuD1Ev>
 8004352:	2104      	movs	r1, #4
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f00d fbc1 	bl	8011adc <_ZdlPvj>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4618      	mov	r0, r3
 800435e:	3708      	adds	r7, #8
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <_ZN20CManejadorEventoMenu11OnMenuEventEi>:

void CManejadorEventoMenu::OnMenuEvent(int identificador)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]

}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
	...

0800437c <_ZN5CMenuC1Eiiiiiii>:
 */

#include <GUI/Menu/CMenu.hpp>
#include "GUI/CRectanguloTft.hpp"

CMenu::CMenu(int xi, int yi, int ancho, int alto,int backColor, int contorno, int colorContorno):
 800437c:	b580      	push	{r7, lr}
 800437e:	b088      	sub	sp, #32
 8004380:	af04      	add	r7, sp, #16
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
 8004388:	603b      	str	r3, [r7, #0]
	CRectanguloTft(xi,yi,ancho,alto,backColor,contorno,colorContorno)
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438e:	9303      	str	r3, [sp, #12]
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	9302      	str	r3, [sp, #8]
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	9301      	str	r3, [sp, #4]
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	68b9      	ldr	r1, [r7, #8]
 80043a2:	f7ff f92b 	bl	80035fc <_ZN14CRectanguloTftC1Eiiiiiii>
 80043a6:	4a0c      	ldr	r2, [pc, #48]	@ (80043d8 <_ZN5CMenuC1Eiiiiiii+0x5c>)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2219      	movs	r2, #25
 80043b0:	651a      	str	r2, [r3, #80]	@ 0x50
{
	// TODO Auto-generated constructor stub
	Opciones=NULL;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	631a      	str	r2, [r3, #48]	@ 0x30
	ItemInicial=NULL;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	635a      	str	r2, [r3, #52]	@ 0x34
	ItemsXPagina=alto/(AnchoItem+5);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043c2:	3305      	adds	r3, #5
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	fb92 f2f3 	sdiv	r2, r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	4618      	mov	r0, r3
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	0801516c 	.word	0x0801516c

080043dc <_ZN5CMenuD1Ev>:

CMenu::~CMenu()
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	4a05      	ldr	r2, [pc, #20]	@ (80043fc <_ZN5CMenuD1Ev+0x20>)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff f8e3 	bl	80035b8 <_ZN14CRectanguloTftD1Ev>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4618      	mov	r0, r3
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	0801516c 	.word	0x0801516c

08004400 <_ZN5CMenuD0Ev>:
CMenu::~CMenu()
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
}
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f7ff ffe7 	bl	80043dc <_ZN5CMenuD1Ev>
 800440e:	2180      	movs	r1, #128	@ 0x80
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f00d fb63 	bl	8011adc <_ZdlPvj>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4618      	mov	r0, r3
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <_ZN5CMenu4ShowEv>:

void CMenu::Show()
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
//	int y;
	CRectanguloTft::Show();
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4618      	mov	r0, r3
 800442c:	f7ff f918 	bl	8003660 <_ZN14CRectanguloTft4ShowEv>
	CMenuItem* tmp=ItemInicial;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004434:	60fb      	str	r3, [r7, #12]
	while(tmp!=NULL)
 8004436:	e012      	b.n	800445e <_ZN5CMenu4ShowEv+0x3e>
	{
//		y=tmp->DamePosicionY()+tmp->DameAltura();
		//Si cabe en altura, lo muestro
		if(SePuedeMostrar(tmp)==false)
 8004438:	68f9      	ldr	r1, [r7, #12]
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f8c4 	bl	80045c8 <_ZN5CMenu14SePuedeMostrarEP9CMenuItem>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	bf0c      	ite	eq
 8004446:	2301      	moveq	r3, #1
 8004448:	2300      	movne	r3, #0
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10a      	bne.n	8004466 <_ZN5CMenu4ShowEv+0x46>
		{
			return;
		}
		tmp->Show();
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 fbd2 	bl	8004bfa <_ZN9CMenuItem4ShowEv>
		tmp=tmp->DameSiguiente();
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 fc5e 	bl	8004d18 <_ZN9CMenuItem13DameSiguienteEv>
 800445c:	60f8      	str	r0, [r7, #12]
	while(tmp!=NULL)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1e9      	bne.n	8004438 <_ZN5CMenu4ShowEv+0x18>
 8004464:	e000      	b.n	8004468 <_ZN5CMenu4ShowEv+0x48>
			return;
 8004466:	bf00      	nop
	}
}
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <_ZN5CMenu18AsignaColoresItemsEiiii>:

void CMenu::AsignaColoresItems(int colorTexto, int colorFondo, int colorTextoResaltado, int solorFondoResaltado)
{
 800446e:	b480      	push	{r7}
 8004470:	b085      	sub	sp, #20
 8004472:	af00      	add	r7, sp, #0
 8004474:	60f8      	str	r0, [r7, #12]
 8004476:	60b9      	str	r1, [r7, #8]
 8004478:	607a      	str	r2, [r7, #4]
 800447a:	603b      	str	r3, [r7, #0]
	ColorTexto=colorTexto;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	63da      	str	r2, [r3, #60]	@ 0x3c
	ColorFondo=colorFondo;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	641a      	str	r2, [r3, #64]	@ 0x40
	ColoTextoSeleccionado=colorTextoResaltado;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	645a      	str	r2, [r3, #68]	@ 0x44
	ColorFondoSeleccionado=solorFondoResaltado;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8004494:	bf00      	nop
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <_ZN5CMenu8CreaItemEPcib>:

CMenuItem* CMenu::CreaItem(char* texto, int identificador,bool seleccionado)
{
 80044a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044a2:	b091      	sub	sp, #68	@ 0x44
 80044a4:	af08      	add	r7, sp, #32
 80044a6:	6178      	str	r0, [r7, #20]
 80044a8:	6139      	str	r1, [r7, #16]
 80044aa:	60fa      	str	r2, [r7, #12]
 80044ac:	72fb      	strb	r3, [r7, #11]
	CEtiquetaTft* etiquetaTmp=new CEtiquetaTft(Xi, Yi, Ancho, AnchoItem, ColorFondo,texto, ColorTexto, 3, 0, ColorFondo);
 80044ae:	20a4      	movs	r0, #164	@ 0xa4
 80044b0:	f00d fb16 	bl	8011ae0 <_Znwj>
 80044b4:	4603      	mov	r3, r0
 80044b6:	461c      	mov	r4, r3
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	699d      	ldr	r5, [r3, #24]
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	69de      	ldr	r6, [r3, #28]
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	607b      	str	r3, [r7, #4]
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80044ce:	6979      	ldr	r1, [r7, #20]
 80044d0:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 80044d2:	6978      	ldr	r0, [r7, #20]
 80044d4:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 80044d6:	9006      	str	r0, [sp, #24]
 80044d8:	2000      	movs	r0, #0
 80044da:	9005      	str	r0, [sp, #20]
 80044dc:	2003      	movs	r0, #3
 80044de:	9004      	str	r0, [sp, #16]
 80044e0:	9103      	str	r1, [sp, #12]
 80044e2:	6939      	ldr	r1, [r7, #16]
 80044e4:	9102      	str	r1, [sp, #8]
 80044e6:	9201      	str	r2, [sp, #4]
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4632      	mov	r2, r6
 80044ee:	4629      	mov	r1, r5
 80044f0:	4620      	mov	r0, r4
 80044f2:	f7fe fce5 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 80044f6:	61fc      	str	r4, [r7, #28]
	CMenuItem* tmp=new CMenuItem(etiquetaTmp,identificador,seleccionado);
 80044f8:	2028      	movs	r0, #40	@ 0x28
 80044fa:	f00d faf1 	bl	8011ae0 <_Znwj>
 80044fe:	4603      	mov	r3, r0
 8004500:	461c      	mov	r4, r3
 8004502:	7afb      	ldrb	r3, [r7, #11]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	69f9      	ldr	r1, [r7, #28]
 8004508:	4620      	mov	r0, r4
 800450a:	f000 fb0d 	bl	8004b28 <_ZN9CMenuItemC1EP12CEtiquetaTftib>
 800450e:	61bc      	str	r4, [r7, #24]
	tmp->AsignaColores(ColorTexto, ColorFondo, ColoTextoSeleccionado, ColorFondoSeleccionado);
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	4603      	mov	r3, r0
 8004524:	69b8      	ldr	r0, [r7, #24]
 8004526:	f000 fb9f 	bl	8004c68 <_ZN9CMenuItem13AsignaColoresEiiii>
	return tmp;
 800452a:	69bb      	ldr	r3, [r7, #24]
}
 800452c:	4618      	mov	r0, r3
 800452e:	3724      	adds	r7, #36	@ 0x24
 8004530:	46bd      	mov	sp, r7
 8004532:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004534 <_ZN5CMenu10AgregaItemEPcib>:

void CMenu::AgregaItem(char* texto, int identificador,bool seleccionado)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
 8004540:	70fb      	strb	r3, [r7, #3]
	CMenuItem* tmp=CreaItem(texto,identificador,seleccionado);
 8004542:	78fb      	ldrb	r3, [r7, #3]
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	68b9      	ldr	r1, [r7, #8]
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f7ff ffa9 	bl	80044a0 <_ZN5CMenu8CreaItemEPcib>
 800454e:	6178      	str	r0, [r7, #20]
	if(Opciones==NULL)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004554:	2b00      	cmp	r3, #0
 8004556:	d111      	bne.n	800457c <_ZN5CMenu10AgregaItemEPcib+0x48>
	{
		Opciones=tmp;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	631a      	str	r2, [r3, #48]	@ 0x30
		Opciones->Selecciona(true);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004562:	2101      	movs	r1, #1
 8004564:	4618      	mov	r0, r3
 8004566:	f000 fb98 	bl	8004c9a <_ZN9CMenuItem10SeleccionaEb>
		Seleccionado=Opciones;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	639a      	str	r2, [r3, #56]	@ 0x38
		ItemInicial=Opciones;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	635a      	str	r2, [r3, #52]	@ 0x34
		return;
 800457a:	e00e      	b.n	800459a <_ZN5CMenu10AgregaItemEPcib+0x66>
	}
	Opciones->AgregaAlFinal(tmp);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004580:	6979      	ldr	r1, [r7, #20]
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fb20 	bl	8004bc8 <_ZN9CMenuItem13AgregaAlFinalEPS_>
	CalaculaPosicionItems(Opciones);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800458c:	4619      	mov	r1, r3
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 f806 	bl	80045a0 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem>
	CalculaPaginas();
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f000 f911 	bl	80047bc <_ZN5CMenu14CalculaPaginasEv>
}
 800459a:	3718      	adds	r7, #24
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem>:
void CMenu::CalaculaPosicionItems(CMenuItem* raiz)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
	if(raiz==NULL)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d007      	beq.n	80045c0 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem+0x20>
		return;
	raiz->CalculaPosicionY(Yi+5);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	69db      	ldr	r3, [r3, #28]
 80045b4:	3305      	adds	r3, #5
 80045b6:	4619      	mov	r1, r3
 80045b8:	6838      	ldr	r0, [r7, #0]
 80045ba:	f000 fb7e 	bl	8004cba <_ZN9CMenuItem16CalculaPosicionYEi>
 80045be:	e000      	b.n	80045c2 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem+0x22>
		return;
 80045c0:	bf00      	nop
}
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <_ZN5CMenu14SePuedeMostrarEP9CMenuItem>:
bool CMenu::SePuedeMostrar(CMenuItem *item)
{
 80045c8:	b590      	push	{r4, r7, lr}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
	int y=item->DamePosicionY()+item->DameAltura();
 80045d2:	6838      	ldr	r0, [r7, #0]
 80045d4:	f000 fbac 	bl	8004d30 <_ZN9CMenuItem13DamePosicionYEv>
 80045d8:	4604      	mov	r4, r0
 80045da:	6838      	ldr	r0, [r7, #0]
 80045dc:	f000 fbb6 	bl	8004d4c <_ZN9CMenuItem10DameAlturaEv>
 80045e0:	4603      	mov	r3, r0
 80045e2:	4423      	add	r3, r4
 80045e4:	60fb      	str	r3, [r7, #12]
	//Si cabe en altura, lo muestro
	if(y> Yi+Alto)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69da      	ldr	r2, [r3, #28]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ee:	4413      	add	r3, r2
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	dd01      	ble.n	80045fa <_ZN5CMenu14SePuedeMostrarEP9CMenuItem+0x32>
		return false;
 80045f6:	2300      	movs	r3, #0
 80045f8:	e000      	b.n	80045fc <_ZN5CMenu14SePuedeMostrarEP9CMenuItem+0x34>
	return true;
 80045fa:	2301      	movs	r3, #1
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3714      	adds	r7, #20
 8004600:	46bd      	mov	sp, r7
 8004602:	bd90      	pop	{r4, r7, pc}

08004604 <_ZN5CMenu21OnSeleccionaSiguienteEv>:
void CMenu::OnSeleccionaSiguiente()
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
	if(Opciones==NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004610:	2b00      	cmp	r3, #0
 8004612:	d03f      	beq.n	8004694 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x90>
		return;
	CMenuItem* tmp=Seleccionado;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004618:	60fb      	str	r3, [r7, #12]
	CMenuItem* siguiente;
	//me muevo hasta encontrar el que esta seleccionado
	while(tmp!=NULL)
 800461a:	e037      	b.n	800468c <_ZN5CMenu21OnSeleccionaSiguienteEv+0x88>
	{
		if(tmp->EstaSeleccionado())
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 fba3 	bl	8004d68 <_ZN9CMenuItem16EstaSeleccionadoEv>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d02d      	beq.n	8004684 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x80>
		{
			siguiente=tmp->DameSiguiente();
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 fb75 	bl	8004d18 <_ZN9CMenuItem13DameSiguienteEv>
 800462e:	60b8      	str	r0, [r7, #8]
			if(siguiente==NULL)
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d030      	beq.n	8004698 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x94>
				return;
			tmp->Selecciona(false);
 8004636:	2100      	movs	r1, #0
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f000 fb2e 	bl	8004c9a <_ZN9CMenuItem10SeleccionaEb>
			siguiente->Selecciona(true);
 800463e:	2101      	movs	r1, #1
 8004640:	68b8      	ldr	r0, [r7, #8]
 8004642:	f000 fb2a 	bl	8004c9a <_ZN9CMenuItem10SeleccionaEb>
			Seleccionado=siguiente;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	639a      	str	r2, [r3, #56]	@ 0x38
			if(SePuedeMostrar(siguiente))
 800464c:	68b9      	ldr	r1, [r7, #8]
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7ff ffba 	bl	80045c8 <_ZN5CMenu14SePuedeMostrarEP9CMenuItem>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d006      	beq.n	8004668 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x64>
			{
				tmp->Show();
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 facd 	bl	8004bfa <_ZN9CMenuItem4ShowEv>
				siguiente->Show();
 8004660:	68b8      	ldr	r0, [r7, #8]
 8004662:	f000 faca 	bl	8004bfa <_ZN9CMenuItem4ShowEv>
				return;
 8004666:	e018      	b.n	800469a <_ZN5CMenu21OnSeleccionaSiguienteEv+0x96>
			}
			else
			{
				//hago una paginacion hacia abajo
				CalaculaPosicionItems(siguiente);
 8004668:	68b9      	ldr	r1, [r7, #8]
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7ff ff98 	bl	80045a0 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem>
				ItemInicial=siguiente;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	635a      	str	r2, [r3, #52]	@ 0x34
				Show();
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	334c      	adds	r3, #76	@ 0x4c
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	4798      	blx	r3
				return;
 8004682:	e00a      	b.n	800469a <_ZN5CMenu21OnSeleccionaSiguienteEv+0x96>
			}
		}
		tmp=tmp->DameSiguiente();
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f000 fb47 	bl	8004d18 <_ZN9CMenuItem13DameSiguienteEv>
 800468a:	60f8      	str	r0, [r7, #12]
	while(tmp!=NULL)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1c4      	bne.n	800461c <_ZN5CMenu21OnSeleccionaSiguienteEv+0x18>
 8004692:	e002      	b.n	800469a <_ZN5CMenu21OnSeleccionaSiguienteEv+0x96>
		return;
 8004694:	bf00      	nop
 8004696:	e000      	b.n	800469a <_ZN5CMenu21OnSeleccionaSiguienteEv+0x96>
				return;
 8004698:	bf00      	nop
	}

}
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <_ZN5CMenu20OnSeleccionaAnteriorEv>:
void CMenu::OnSeleccionaAnterior()
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
	if(Opciones==NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d05c      	beq.n	800476a <_ZN5CMenu20OnSeleccionaAnteriorEv+0xca>
		return;
	CMenuItem* tmp=Seleccionado;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b4:	617b      	str	r3, [r7, #20]
	CMenuItem* anterior;
	while(tmp!=NULL)
 80046b6:	e054      	b.n	8004762 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xc2>
	{
		if(tmp->EstaSeleccionado())
 80046b8:	6978      	ldr	r0, [r7, #20]
 80046ba:	f000 fb55 	bl	8004d68 <_ZN9CMenuItem16EstaSeleccionadoEv>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d04a      	beq.n	800475a <_ZN5CMenu20OnSeleccionaAnteriorEv+0xba>
		{
			anterior=tmp->DameAnterior();
 80046c4:	6978      	ldr	r0, [r7, #20]
 80046c6:	f000 fb5c 	bl	8004d82 <_ZN9CMenuItem12DameAnteriorEv>
 80046ca:	60f8      	str	r0, [r7, #12]
			if(anterior==NULL)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d04d      	beq.n	800476e <_ZN5CMenu20OnSeleccionaAnteriorEv+0xce>
				return;
			tmp->Selecciona(false);
 80046d2:	2100      	movs	r1, #0
 80046d4:	6978      	ldr	r0, [r7, #20]
 80046d6:	f000 fae0 	bl	8004c9a <_ZN9CMenuItem10SeleccionaEb>
			anterior->Selecciona(true);
 80046da:	2101      	movs	r1, #1
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 fadc 	bl	8004c9a <_ZN9CMenuItem10SeleccionaEb>
			Seleccionado=anterior;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	639a      	str	r2, [r3, #56]	@ 0x38
			if(EstaInicioPagina(tmp)==false)
 80046e8:	6979      	ldr	r1, [r7, #20]
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f8bb 	bl	8004866 <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	bf0c      	ite	eq
 80046f6:	2301      	moveq	r3, #1
 80046f8:	2300      	movne	r3, #0
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d006      	beq.n	800470e <_ZN5CMenu20OnSeleccionaAnteriorEv+0x6e>
			{
				tmp->Show();
 8004700:	6978      	ldr	r0, [r7, #20]
 8004702:	f000 fa7a 	bl	8004bfa <_ZN9CMenuItem4ShowEv>
				anterior->Show();
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 fa77 	bl	8004bfa <_ZN9CMenuItem4ShowEv>
				return;
 800470c:	e030      	b.n	8004770 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xd0>
			}
			else
			{
				//hago una paginacion hacia arriba
				//regreso ItemsXPagina para calcular la pagina
				int itemsContados=ItemsXPagina;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004712:	613b      	str	r3, [r7, #16]
				while(tmp!=NULL && itemsContados>0)
 8004714:	e00b      	b.n	800472e <_ZN5CMenu20OnSeleccionaAnteriorEv+0x8e>
				{
					anterior=tmp->DameAnterior();
 8004716:	6978      	ldr	r0, [r7, #20]
 8004718:	f000 fb33 	bl	8004d82 <_ZN9CMenuItem12DameAnteriorEv>
 800471c:	60f8      	str	r0, [r7, #12]
					itemsContados--;
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	3b01      	subs	r3, #1
 8004722:	613b      	str	r3, [r7, #16]
					if(anterior==NULL)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d008      	beq.n	800473c <_ZN5CMenu20OnSeleccionaAnteriorEv+0x9c>
						break;
					tmp=anterior;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	617b      	str	r3, [r7, #20]
				while(tmp!=NULL && itemsContados>0)
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d004      	beq.n	800473e <_ZN5CMenu20OnSeleccionaAnteriorEv+0x9e>
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	dced      	bgt.n	8004716 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x76>
 800473a:	e000      	b.n	800473e <_ZN5CMenu20OnSeleccionaAnteriorEv+0x9e>
						break;
 800473c:	bf00      	nop
				}
				CalaculaPosicionItems(tmp);
 800473e:	6979      	ldr	r1, [r7, #20]
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7ff ff2d 	bl	80045a0 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem>
				ItemInicial=tmp;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	635a      	str	r2, [r3, #52]	@ 0x34
				Show();
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	334c      	adds	r3, #76	@ 0x4c
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	4798      	blx	r3
				return;
 8004758:	e00a      	b.n	8004770 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xd0>
			}
		}
		tmp=tmp->DameAnterior();
 800475a:	6978      	ldr	r0, [r7, #20]
 800475c:	f000 fb11 	bl	8004d82 <_ZN9CMenuItem12DameAnteriorEv>
 8004760:	6178      	str	r0, [r7, #20]
	while(tmp!=NULL)
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1a7      	bne.n	80046b8 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x18>
 8004768:	e002      	b.n	8004770 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xd0>
		return;
 800476a:	bf00      	nop
 800476c:	e000      	b.n	8004770 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xd0>
				return;
 800476e:	bf00      	nop
	}

}
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <_ZN5CMenu19OnClickSeleccionadoEv>:
void CMenu::OnClickSeleccionado()
{
 8004776:	b5b0      	push	{r4, r5, r7, lr}
 8004778:	b082      	sub	sp, #8
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
	if(Manejador==NULL)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004782:	2b00      	cmp	r3, #0
 8004784:	d014      	beq.n	80047b0 <_ZN5CMenu19OnClickSeleccionadoEv+0x3a>
		return;
	if(Seleccionado==NULL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800478a:	2b00      	cmp	r3, #0
 800478c:	d012      	beq.n	80047b4 <_ZN5CMenu19OnClickSeleccionadoEv+0x3e>
		return;
	Manejador->OnMenuEvent(Seleccionado->DameIdentificador());
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6fdd      	ldr	r5, [r3, #124]	@ 0x7c
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	3308      	adds	r3, #8
 800479a:	681c      	ldr	r4, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 fafa 	bl	8004d9a <_ZN9CMenuItem17DameIdentificadorEv>
 80047a6:	4603      	mov	r3, r0
 80047a8:	4619      	mov	r1, r3
 80047aa:	4628      	mov	r0, r5
 80047ac:	47a0      	blx	r4
 80047ae:	e002      	b.n	80047b6 <_ZN5CMenu19OnClickSeleccionadoEv+0x40>
		return;
 80047b0:	bf00      	nop
 80047b2:	e000      	b.n	80047b6 <_ZN5CMenu19OnClickSeleccionadoEv+0x40>
		return;
 80047b4:	bf00      	nop
}
 80047b6:	3708      	adds	r7, #8
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bdb0      	pop	{r4, r5, r7, pc}

080047bc <_ZN5CMenu14CalculaPaginasEv>:
void CMenu::CalculaPaginas()
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
	LimpiaPaginas();
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f833 	bl	8004830 <_ZN5CMenu13LimpiaPaginasEv>
	int conteoItems=0;
 80047ca:	2300      	movs	r3, #0
 80047cc:	617b      	str	r3, [r7, #20]
	int numeroPagina=0;
 80047ce:	2300      	movs	r3, #0
 80047d0:	613b      	str	r3, [r7, #16]
	Paginas[numeroPagina]=Opciones;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	3314      	adds	r3, #20
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	440b      	add	r3, r1
 80047e0:	605a      	str	r2, [r3, #4]
	CMenuItem* tmp=Opciones;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e6:	60fb      	str	r3, [r7, #12]
	while(tmp!=NULL)
 80047e8:	e01a      	b.n	8004820 <_ZN5CMenu14CalculaPaginasEv+0x64>
	{
		if(conteoItems%ItemsXPagina==0)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	fb93 f1f2 	sdiv	r1, r3, r2
 80047f4:	fb01 f202 	mul.w	r2, r1, r2
 80047f8:	1a9b      	subs	r3, r3, r2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d109      	bne.n	8004812 <_ZN5CMenu14CalculaPaginasEv+0x56>
		{
			Paginas[numeroPagina]=tmp;
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	3314      	adds	r3, #20
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4413      	add	r3, r2
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	605a      	str	r2, [r3, #4]
			numeroPagina++;
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	3301      	adds	r3, #1
 8004810:	613b      	str	r3, [r7, #16]
		}
		conteoItems++;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	3301      	adds	r3, #1
 8004816:	617b      	str	r3, [r7, #20]
		tmp=tmp->DameSiguiente();
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f000 fa7d 	bl	8004d18 <_ZN9CMenuItem13DameSiguienteEv>
 800481e:	60f8      	str	r0, [r7, #12]
	while(tmp!=NULL)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1e1      	bne.n	80047ea <_ZN5CMenu14CalculaPaginasEv+0x2e>
	}
}
 8004826:	bf00      	nop
 8004828:	bf00      	nop
 800482a:	3718      	adds	r7, #24
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <_ZN5CMenu13LimpiaPaginasEv>:

void CMenu::LimpiaPaginas()
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
	for(int i=0;i<MaximoPaginas;i++)
 8004838:	2300      	movs	r3, #0
 800483a:	60fb      	str	r3, [r7, #12]
 800483c:	e009      	b.n	8004852 <_ZN5CMenu13LimpiaPaginasEv+0x22>
	{
		Paginas[i]=NULL;
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	3314      	adds	r3, #20
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	4413      	add	r3, r2
 8004848:	2200      	movs	r2, #0
 800484a:	605a      	str	r2, [r3, #4]
	for(int i=0;i<MaximoPaginas;i++)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	3301      	adds	r3, #1
 8004850:	60fb      	str	r3, [r7, #12]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2b09      	cmp	r3, #9
 8004856:	ddf2      	ble.n	800483e <_ZN5CMenu13LimpiaPaginasEv+0xe>
	}
}
 8004858:	bf00      	nop
 800485a:	bf00      	nop
 800485c:	3714      	adds	r7, #20
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem>:

bool CMenu::EstaInicioPagina(CMenuItem* item)
{
 8004866:	b480      	push	{r7}
 8004868:	b085      	sub	sp, #20
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
 800486e:	6039      	str	r1, [r7, #0]
	for(int i=0;i<MaximoPaginas;i++)
 8004870:	2300      	movs	r3, #0
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	e00d      	b.n	8004892 <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem+0x2c>
	{
		if(Paginas[i]==item)
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	3314      	adds	r3, #20
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	4413      	add	r3, r2
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	429a      	cmp	r2, r3
 8004886:	d101      	bne.n	800488c <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem+0x26>
			return true;
 8004888:	2301      	movs	r3, #1
 800488a:	e006      	b.n	800489a <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem+0x34>
	for(int i=0;i<MaximoPaginas;i++)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	3301      	adds	r3, #1
 8004890:	60fb      	str	r3, [r7, #12]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2b09      	cmp	r3, #9
 8004896:	ddee      	ble.n	8004876 <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem+0x10>
	}
	return false;
 8004898:	2300      	movs	r3, #0

}
 800489a:	4618      	mov	r0, r3
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <_ZN5CMenu26AsignaManejadorEventosMenuEP20CManejadorEventoMenu>:
void CMenu::AsignaManejadorEventosMenu(CManejadorEventoMenu *manejador)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
 80048ae:	6039      	str	r1, [r7, #0]
	Manejador=manejador;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <_ZN5CMenu10AgregaItemEPciiiiib>:

void CMenu::AgregaItem(char* texto, int identificador,int x, int y,int ancho, int alto,bool seleccionado)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b08a      	sub	sp, #40	@ 0x28
 80048c6:	af04      	add	r7, sp, #16
 80048c8:	60f8      	str	r0, [r7, #12]
 80048ca:	60b9      	str	r1, [r7, #8]
 80048cc:	607a      	str	r2, [r7, #4]
 80048ce:	603b      	str	r3, [r7, #0]
	CMenuItem* tmp=CreaItem(texto,identificador,Xi+x,Yi+y,ancho, alto,seleccionado);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	699a      	ldr	r2, [r3, #24]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	18d1      	adds	r1, r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	69da      	ldr	r2, [r3, #28]
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	4413      	add	r3, r2
 80048e0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80048e4:	9203      	str	r2, [sp, #12]
 80048e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048e8:	9202      	str	r2, [sp, #8]
 80048ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048ec:	9201      	str	r2, [sp, #4]
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	460b      	mov	r3, r1
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	68b9      	ldr	r1, [r7, #8]
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 f820 	bl	800493c <_ZN5CMenu8CreaItemEPciiiiib>
 80048fc:	6178      	str	r0, [r7, #20]
	if(Opciones==NULL)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004902:	2b00      	cmp	r3, #0
 8004904:	d111      	bne.n	800492a <_ZN5CMenu10AgregaItemEPciiiiib+0x68>
	{
		Opciones=tmp;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	631a      	str	r2, [r3, #48]	@ 0x30
		Opciones->Selecciona(true);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004910:	2101      	movs	r1, #1
 8004912:	4618      	mov	r0, r3
 8004914:	f000 f9c1 	bl	8004c9a <_ZN9CMenuItem10SeleccionaEb>
		Seleccionado=Opciones;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	639a      	str	r2, [r3, #56]	@ 0x38
		ItemInicial=Opciones;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	635a      	str	r2, [r3, #52]	@ 0x34
		return;
 8004928:	e005      	b.n	8004936 <_ZN5CMenu10AgregaItemEPciiiiib+0x74>
	}
	Opciones->AgregaAlFinal(tmp);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800492e:	6979      	ldr	r1, [r7, #20]
 8004930:	4618      	mov	r0, r3
 8004932:	f000 f949 	bl	8004bc8 <_ZN9CMenuItem13AgregaAlFinalEPS_>
}
 8004936:	3718      	adds	r7, #24
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <_ZN5CMenu8CreaItemEPciiiiib>:
CMenuItem* CMenu::CreaItem(char* texto, int identificador,int x, int y,int ancho, int alto,bool seleccionado)
{
 800493c:	b590      	push	{r4, r7, lr}
 800493e:	b08f      	sub	sp, #60	@ 0x3c
 8004940:	af08      	add	r7, sp, #32
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
 8004948:	603b      	str	r3, [r7, #0]
	CEtiquetaTft* etiquetaTmp=new CEtiquetaTft(x, y, ancho, alto, ColorFondo,texto, ColorTexto, 3, 0, ColorFondo);
 800494a:	20a4      	movs	r0, #164	@ 0xa4
 800494c:	f00d f8c8 	bl	8011ae0 <_Znwj>
 8004950:	4603      	mov	r3, r0
 8004952:	461c      	mov	r4, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800495c:	68f9      	ldr	r1, [r7, #12]
 800495e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004960:	9106      	str	r1, [sp, #24]
 8004962:	2100      	movs	r1, #0
 8004964:	9105      	str	r1, [sp, #20]
 8004966:	2103      	movs	r1, #3
 8004968:	9104      	str	r1, [sp, #16]
 800496a:	9203      	str	r2, [sp, #12]
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	9202      	str	r2, [sp, #8]
 8004970:	9301      	str	r3, [sp, #4]
 8004972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004978:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800497a:	6839      	ldr	r1, [r7, #0]
 800497c:	4620      	mov	r0, r4
 800497e:	f7fe fa9f 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004982:	617c      	str	r4, [r7, #20]
	CMenuItem* tmp=new CMenuItem(etiquetaTmp,identificador,seleccionado);
 8004984:	2028      	movs	r0, #40	@ 0x28
 8004986:	f00d f8ab 	bl	8011ae0 <_Znwj>
 800498a:	4603      	mov	r3, r0
 800498c:	461c      	mov	r4, r3
 800498e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	6979      	ldr	r1, [r7, #20]
 8004996:	4620      	mov	r0, r4
 8004998:	f000 f8c6 	bl	8004b28 <_ZN9CMenuItemC1EP12CEtiquetaTftib>
 800499c:	613c      	str	r4, [r7, #16]
	tmp->AsignaColores(ColorTexto, ColorFondo, ColoTextoSeleccionado, ColorFondoSeleccionado);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049ae:	9300      	str	r3, [sp, #0]
 80049b0:	4603      	mov	r3, r0
 80049b2:	6938      	ldr	r0, [r7, #16]
 80049b4:	f000 f958 	bl	8004c68 <_ZN9CMenuItem13AsignaColoresEiiii>
	return tmp;
 80049b8:	693b      	ldr	r3, [r7, #16]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	371c      	adds	r7, #28
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd90      	pop	{r4, r7, pc}

080049c2 <_ZN5CMenu11SetPosicionEii>:
void CMenu::SetPosicion(int x, int y)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b085      	sub	sp, #20
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	60f8      	str	r0, [r7, #12]
 80049ca:	60b9      	str	r1, [r7, #8]
 80049cc:	607a      	str	r2, [r7, #4]
	Xi=x;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	619a      	str	r2, [r3, #24]
	Yi=y;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	61da      	str	r2, [r3, #28]
}
 80049da:	bf00      	nop
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <_ZN5CMenu10AgregaItemEPciiiiiiib>:
void CMenu::AgregaItem(char* texto, int identificador,int x, int y,int ancho, int alto,int colorFondo,int colorTexto,bool seleccionado)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b08c      	sub	sp, #48	@ 0x30
 80049ea:	af06      	add	r7, sp, #24
 80049ec:	60f8      	str	r0, [r7, #12]
 80049ee:	60b9      	str	r1, [r7, #8]
 80049f0:	607a      	str	r2, [r7, #4]
 80049f2:	603b      	str	r3, [r7, #0]
	CMenuItem* tmp=CreaItem(texto,identificador,Xi+x,Yi+y,ancho, alto,colorFondo,colorTexto,seleccionado);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	699a      	ldr	r2, [r3, #24]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	18d1      	adds	r1, r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	69da      	ldr	r2, [r3, #28]
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	4413      	add	r3, r2
 8004a04:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8004a08:	9205      	str	r2, [sp, #20]
 8004a0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a0c:	9204      	str	r2, [sp, #16]
 8004a0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a10:	9203      	str	r2, [sp, #12]
 8004a12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a14:	9202      	str	r2, [sp, #8]
 8004a16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a18:	9201      	str	r2, [sp, #4]
 8004a1a:	9300      	str	r3, [sp, #0]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	68b9      	ldr	r1, [r7, #8]
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f000 f820 	bl	8004a68 <_ZN5CMenu8CreaItemEPciiiiiiib>
 8004a28:	6178      	str	r0, [r7, #20]
	if(Opciones==NULL)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d111      	bne.n	8004a56 <_ZN5CMenu10AgregaItemEPciiiiiiib+0x70>
	{
		Opciones=tmp;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	631a      	str	r2, [r3, #48]	@ 0x30
		Opciones->Selecciona(true);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 f92b 	bl	8004c9a <_ZN9CMenuItem10SeleccionaEb>
		Seleccionado=Opciones;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	639a      	str	r2, [r3, #56]	@ 0x38
		ItemInicial=Opciones;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	635a      	str	r2, [r3, #52]	@ 0x34
		return;
 8004a54:	e005      	b.n	8004a62 <_ZN5CMenu10AgregaItemEPciiiiiiib+0x7c>
	}
	Opciones->AgregaAlFinal(tmp);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a5a:	6979      	ldr	r1, [r7, #20]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f000 f8b3 	bl	8004bc8 <_ZN9CMenuItem13AgregaAlFinalEPS_>

}
 8004a62:	3718      	adds	r7, #24
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <_ZN5CMenu8CreaItemEPciiiiiiib>:
CMenuItem* CMenu::CreaItem(char* texto, int identificador,int x, int y,int ancho, int alto,int colorFondo,int colorTexto,bool seleccionado)
{
 8004a68:	b590      	push	{r4, r7, lr}
 8004a6a:	b08f      	sub	sp, #60	@ 0x3c
 8004a6c:	af08      	add	r7, sp, #32
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
 8004a74:	603b      	str	r3, [r7, #0]
	CEtiquetaTft* etiquetaTmp=new CEtiquetaTft(x, y, ancho, alto, colorFondo,texto, colorTexto, 3, 0, ColorFondo);
 8004a76:	20a4      	movs	r0, #164	@ 0xa4
 8004a78:	f00d f832 	bl	8011ae0 <_Znwj>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	461c      	mov	r4, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a84:	9306      	str	r3, [sp, #24]
 8004a86:	2300      	movs	r3, #0
 8004a88:	9305      	str	r3, [sp, #20]
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	9304      	str	r3, [sp, #16]
 8004a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a90:	9303      	str	r3, [sp, #12]
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	9302      	str	r3, [sp, #8]
 8004a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a98:	9301      	str	r3, [sp, #4]
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aa0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004aa2:	6839      	ldr	r1, [r7, #0]
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	f7fe fa0b 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004aaa:	617c      	str	r4, [r7, #20]
	CMenuItem* tmp=new CMenuItem(etiquetaTmp,identificador,seleccionado);
 8004aac:	2028      	movs	r0, #40	@ 0x28
 8004aae:	f00d f817 	bl	8011ae0 <_Znwj>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	461c      	mov	r4, r3
 8004ab6:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	6979      	ldr	r1, [r7, #20]
 8004abe:	4620      	mov	r0, r4
 8004ac0:	f000 f832 	bl	8004b28 <_ZN9CMenuItemC1EP12CEtiquetaTftib>
 8004ac4:	613c      	str	r4, [r7, #16]
	tmp->AsignaColores(colorTexto, colorFondo, ColoTextoSeleccionado, ColorFondoSeleccionado);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ad4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004ad6:	6938      	ldr	r0, [r7, #16]
 8004ad8:	f000 f8c6 	bl	8004c68 <_ZN9CMenuItem13AsignaColoresEiiii>
	return tmp;
 8004adc:	693b      	ldr	r3, [r7, #16]

}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	371c      	adds	r7, #28
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd90      	pop	{r4, r7, pc}

08004ae6 <_ZN5CMenu12BorrarItemnsEv>:

void CMenu::BorrarItemns()
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b084      	sub	sp, #16
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]

	CMenuItem *tmp=Opciones;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af2:	60fb      	str	r3, [r7, #12]
	CMenuItem *tmp2;
	while(tmp!=NULL)
 8004af4:	e00d      	b.n	8004b12 <_ZN5CMenu12BorrarItemnsEv+0x2c>
	{
		tmp2=tmp->DameSiguiente();
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f000 f90e 	bl	8004d18 <_ZN9CMenuItem13DameSiguienteEv>
 8004afc:	60b8      	str	r0, [r7, #8]
		delete tmp;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d004      	beq.n	8004b0e <_ZN5CMenu12BorrarItemnsEv+0x28>
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	3204      	adds	r2, #4
 8004b08:	6812      	ldr	r2, [r2, #0]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	4790      	blx	r2
		tmp=tmp2;
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	60fb      	str	r3, [r7, #12]
	while(tmp!=NULL)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1ee      	bne.n	8004af6 <_ZN5CMenu12BorrarItemnsEv+0x10>
	}
	Opciones=NULL;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004b1e:	bf00      	nop
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
	...

08004b28 <_ZN9CMenuItemC1EP12CEtiquetaTftib>:
 *      Author: W10
 */

#include <GUI/Menu/CMenuItem.hpp>

CMenuItem::CMenuItem(CEtiquetaTft* etiqueta,int identificador,bool seleccionado)
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
 8004b34:	70fb      	strb	r3, [r7, #3]
 8004b36:	4a0d      	ldr	r2, [pc, #52]	@ (8004b6c <_ZN9CMenuItemC1EP12CEtiquetaTftib+0x44>)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub
	Etiqueta=etiqueta;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	605a      	str	r2, [r3, #4]
	Siguiente=NULL;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	609a      	str	r2, [r3, #8]
	Anterior=NULL;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	60da      	str	r2, [r3, #12]
	Identificador=identificador;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	611a      	str	r2, [r3, #16]
	Seleccionado=seleccionado;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	78fa      	ldrb	r2, [r7, #3]
 8004b58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	080151cc 	.word	0x080151cc

08004b70 <_ZN9CMenuItemD1Ev>:

CMenuItem::~CMenuItem()
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	4a0a      	ldr	r2, [pc, #40]	@ (8004ba4 <_ZN9CMenuItemD1Ev+0x34>)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	601a      	str	r2, [r3, #0]
{
	if(Etiqueta!=NULL)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d008      	beq.n	8004b98 <_ZN9CMenuItemD1Ev+0x28>
		delete Etiqueta;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d004      	beq.n	8004b98 <_ZN9CMenuItemD1Ev+0x28>
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	3204      	adds	r2, #4
 8004b92:	6812      	ldr	r2, [r2, #0]
 8004b94:	4618      	mov	r0, r3
 8004b96:	4790      	blx	r2
	// TODO Auto-generated destructor stub
}
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	080151cc 	.word	0x080151cc

08004ba8 <_ZN9CMenuItemD0Ev>:
CMenuItem::~CMenuItem()
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
}
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7ff ffdd 	bl	8004b70 <_ZN9CMenuItemD1Ev>
 8004bb6:	2128      	movs	r1, #40	@ 0x28
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f00c ff8f 	bl	8011adc <_ZdlPvj>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3708      	adds	r7, #8
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <_ZN9CMenuItem13AgregaAlFinalEPS_>:

void CMenuItem::AgregaAlFinal(CMenuItem* siguiente)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
	if(Siguiente==NULL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d106      	bne.n	8004be8 <_ZN9CMenuItem13AgregaAlFinalEPS_+0x20>
	{
		Siguiente=siguiente;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	609a      	str	r2, [r3, #8]
		siguiente->Anterior=this;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	60da      	str	r2, [r3, #12]
		return;
 8004be6:	e005      	b.n	8004bf4 <_ZN9CMenuItem13AgregaAlFinalEPS_+0x2c>
	}
	Siguiente->AgregaAlFinal(siguiente);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	6839      	ldr	r1, [r7, #0]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7ff ffea 	bl	8004bc8 <_ZN9CMenuItem13AgregaAlFinalEPS_>
}
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <_ZN9CMenuItem4ShowEv>:

void CMenuItem::Show()
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b082      	sub	sp, #8
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
	if(Seleccionado)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d010      	beq.n	8004c2e <_ZN9CMenuItem4ShowEv+0x34>
	{
		Etiqueta->SetColorTexto(ColoTextoSeleccionado);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	69db      	ldr	r3, [r3, #28]
 8004c14:	4619      	mov	r1, r3
 8004c16:	4610      	mov	r0, r2
 8004c18:	f7fe faf0 	bl	80031fc <_ZN12CEtiquetaTft13SetColorTextoEi>
		Etiqueta->SetBackColor(ColorFondoSeleccionado);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	4619      	mov	r1, r3
 8004c26:	4610      	mov	r0, r2
 8004c28:	f7fe fb34 	bl	8003294 <_ZN12CEtiquetaTft12SetBackColorEi>
 8004c2c:	e00f      	b.n	8004c4e <_ZN9CMenuItem4ShowEv+0x54>
	}
	else
	{
		Etiqueta->SetColorTexto(ColorTexto);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	4619      	mov	r1, r3
 8004c38:	4610      	mov	r0, r2
 8004c3a:	f7fe fadf 	bl	80031fc <_ZN12CEtiquetaTft13SetColorTextoEi>
		Etiqueta->SetBackColor(ColorFondo);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	4619      	mov	r1, r3
 8004c48:	4610      	mov	r0, r2
 8004c4a:	f7fe fb23 	bl	8003294 <_ZN12CEtiquetaTft12SetBackColorEi>
	}
	Etiqueta->Show();
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	334c      	adds	r3, #76	@ 0x4c
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4610      	mov	r0, r2
 8004c5e:	4798      	blx	r3
}
 8004c60:	bf00      	nop
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <_ZN9CMenuItem13AsignaColoresEiiii>:
void CMenuItem::AsignaColores(int colorTexto, int colorFondo, int colorTextoResaltado, int solorFondoResaltado)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
 8004c74:	603b      	str	r3, [r7, #0]
	ColorTexto=colorTexto;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	615a      	str	r2, [r3, #20]
	ColorFondo=colorFondo;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	619a      	str	r2, [r3, #24]
	ColoTextoSeleccionado=colorTextoResaltado;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	61da      	str	r2, [r3, #28]
	ColorFondoSeleccionado=solorFondoResaltado;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	69ba      	ldr	r2, [r7, #24]
 8004c8c:	621a      	str	r2, [r3, #32]
}
 8004c8e:	bf00      	nop
 8004c90:	3714      	adds	r7, #20
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr

08004c9a <_ZN9CMenuItem10SeleccionaEb>:
void CMenuItem::Selecciona(bool valor)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	b083      	sub	sp, #12
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	70fb      	strb	r3, [r7, #3]
	Seleccionado=valor;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	78fa      	ldrb	r2, [r7, #3]
 8004caa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8004cae:	bf00      	nop
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <_ZN9CMenuItem16CalculaPosicionYEi>:

void CMenuItem::CalculaPosicionY(int posicion)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b084      	sub	sp, #16
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
 8004cc2:	6039      	str	r1, [r7, #0]
	int x=Etiqueta->DamePosicionX();
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7fe fd39 	bl	8003740 <_ZN14CRectanguloTft13DamePosicionXEv>
 8004cce:	60f8      	str	r0, [r7, #12]
	Etiqueta->CambiaPosicion(x, posicion);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	3350      	adds	r3, #80	@ 0x50
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	68f9      	ldr	r1, [r7, #12]
 8004ce4:	4798      	blx	r3
	if(Siguiente==NULL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d010      	beq.n	8004d10 <_ZN9CMenuItem16CalculaPosicionYEi+0x56>
		return;
	int y=Etiqueta->DameAlto()+posicion+5;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7fe fd3c 	bl	8003770 <_ZN14CRectanguloTft8DameAltoEv>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	3305      	adds	r3, #5
 8004d00:	60bb      	str	r3, [r7, #8]
	Siguiente->CalculaPosicionY(y);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	68b9      	ldr	r1, [r7, #8]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7ff ffd6 	bl	8004cba <_ZN9CMenuItem16CalculaPosicionYEi>
 8004d0e:	e000      	b.n	8004d12 <_ZN9CMenuItem16CalculaPosicionYEi+0x58>
		return;
 8004d10:	bf00      	nop
}
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <_ZN9CMenuItem13DameSiguienteEv>:
CMenuItem* CMenuItem::DameSiguiente()
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
	return Siguiente;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <_ZN9CMenuItem13DamePosicionYEv>:
int CMenuItem::DamePosicionY()
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
	return Etiqueta->DamePosicionY();
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7fe fd0b 	bl	8003758 <_ZN14CRectanguloTft13DamePosicionYEv>
 8004d42:	4603      	mov	r3, r0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3708      	adds	r7, #8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <_ZN9CMenuItem10DameAlturaEv>:
int CMenuItem::DameAltura()
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
	return Etiqueta->DameAlto();
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7fe fd09 	bl	8003770 <_ZN14CRectanguloTft8DameAltoEv>
 8004d5e:	4603      	mov	r3, r0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3708      	adds	r7, #8
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <_ZN9CMenuItem16EstaSeleccionadoEv>:
bool CMenuItem::EstaSeleccionado()
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
	return Seleccionado;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <_ZN9CMenuItem12DameAnteriorEv>:
CMenuItem* CMenuItem::DameAnterior()
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
	return Anterior;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68db      	ldr	r3, [r3, #12]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <_ZN9CMenuItem17DameIdentificadorEv>:
void CMenuItem::AsignaAnterior(CMenuItem* anterior)
{
	Anterior=anterior;
}
int CMenuItem::DameIdentificador()
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
	return Identificador;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	691b      	ldr	r3, [r3, #16]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
	...

08004db4 <_ZN20CPantallaCalibracionC1Ev>:
#include "stm32f4xx_hal_conf.h"
#include <EPROM/CEprom.hpp>

extern I2C_HandleTypeDef hi2c1;

CPantallaCalibracion::CPantallaCalibracion():
 8004db4:	b590      	push	{r4, r7, lr}
 8004db6:	b08b      	sub	sp, #44	@ 0x2c
 8004db8:	af08      	add	r7, sp, #32
 8004dba:	6078      	str	r0, [r7, #4]
CPantallaBase(1, (char*)"   Modo: Calibrar")
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a9d      	ldr	r2, [pc, #628]	@ (8005034 <_ZN20CPantallaCalibracionC1Ev+0x280>)
 8004dc0:	2101      	movs	r1, #1
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7fe fac8 	bl	8003358 <_ZN13CPantallaBaseC1EiPc>
 8004dc8:	4a9b      	ldr	r2, [pc, #620]	@ (8005038 <_ZN20CPantallaCalibracionC1Ev+0x284>)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	601a      	str	r2, [r3, #0]
 8004dce:	4a9b      	ldr	r2, [pc, #620]	@ (800503c <_ZN20CPantallaCalibracionC1Ev+0x288>)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	631a      	str	r2, [r3, #48]	@ 0x30
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
{
	TemperaturaODiferencia=true;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
	Diferencia=0;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	Temperatura=0;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	DiferenciaAnterior=0;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	// TODO Auto-generated constructor stub
	LabelTemperatura=new CEtiquetaTft( 5, 40, 50, 20, COLOR::BLACK,(char*)"temp: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8004dfc:	20a4      	movs	r0, #164	@ 0xa4
 8004dfe:	f00c fe6f 	bl	8011ae0 <_Znwj>
 8004e02:	4603      	mov	r3, r0
 8004e04:	461c      	mov	r4, r3
 8004e06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004e0a:	9306      	str	r3, [sp, #24]
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	9305      	str	r3, [sp, #20]
 8004e10:	2303      	movs	r3, #3
 8004e12:	9304      	str	r3, [sp, #16]
 8004e14:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004e18:	9303      	str	r3, [sp, #12]
 8004e1a:	4b89      	ldr	r3, [pc, #548]	@ (8005040 <_ZN20CPantallaCalibracionC1Ev+0x28c>)
 8004e1c:	9302      	str	r3, [sp, #8]
 8004e1e:	2300      	movs	r3, #0
 8004e20:	9301      	str	r3, [sp, #4]
 8004e22:	2314      	movs	r3, #20
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	2332      	movs	r3, #50	@ 0x32
 8004e28:	2228      	movs	r2, #40	@ 0x28
 8004e2a:	2105      	movs	r1, #5
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	f7fe f847 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f8c3 40b4 	str.w	r4, [r3, #180]	@ 0xb4
	TextTemperatura = new CEtiquetaTft( 95, 40, 150, 30,COLOR::WHITE, (char*)"000", COLOR::BLACK, 3, 1, COLOR::RED);
 8004e38:	20a4      	movs	r0, #164	@ 0xa4
 8004e3a:	f00c fe51 	bl	8011ae0 <_Znwj>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	461c      	mov	r4, r3
 8004e42:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004e46:	9306      	str	r3, [sp, #24]
 8004e48:	2301      	movs	r3, #1
 8004e4a:	9305      	str	r3, [sp, #20]
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	9304      	str	r3, [sp, #16]
 8004e50:	2300      	movs	r3, #0
 8004e52:	9303      	str	r3, [sp, #12]
 8004e54:	4b7b      	ldr	r3, [pc, #492]	@ (8005044 <_ZN20CPantallaCalibracionC1Ev+0x290>)
 8004e56:	9302      	str	r3, [sp, #8]
 8004e58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004e5c:	9301      	str	r3, [sp, #4]
 8004e5e:	231e      	movs	r3, #30
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	2396      	movs	r3, #150	@ 0x96
 8004e64:	2228      	movs	r2, #40	@ 0x28
 8004e66:	215f      	movs	r1, #95	@ 0x5f
 8004e68:	4620      	mov	r0, r4
 8004e6a:	f7fe f829 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f8c3 40b8 	str.w	r4, [r3, #184]	@ 0xb8

	LabelDiferencia=new CEtiquetaTft( 5, 80, 50, 20, COLOR::BLACK,(char*)"Dif: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8004e74:	20a4      	movs	r0, #164	@ 0xa4
 8004e76:	f00c fe33 	bl	8011ae0 <_Znwj>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	461c      	mov	r4, r3
 8004e7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004e82:	9306      	str	r3, [sp, #24]
 8004e84:	2300      	movs	r3, #0
 8004e86:	9305      	str	r3, [sp, #20]
 8004e88:	2303      	movs	r3, #3
 8004e8a:	9304      	str	r3, [sp, #16]
 8004e8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004e90:	9303      	str	r3, [sp, #12]
 8004e92:	4b6d      	ldr	r3, [pc, #436]	@ (8005048 <_ZN20CPantallaCalibracionC1Ev+0x294>)
 8004e94:	9302      	str	r3, [sp, #8]
 8004e96:	2300      	movs	r3, #0
 8004e98:	9301      	str	r3, [sp, #4]
 8004e9a:	2314      	movs	r3, #20
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	2332      	movs	r3, #50	@ 0x32
 8004ea0:	2250      	movs	r2, #80	@ 0x50
 8004ea2:	2105      	movs	r1, #5
 8004ea4:	4620      	mov	r0, r4
 8004ea6:	f7fe f80b 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8c3 40c0 	str.w	r4, [r3, #192]	@ 0xc0
	TextDiferencia = new CEtiquetaTft( 95, 80, 150, 30,COLOR::GREY, (char*)"000", COLOR::BLACK, 3, 1, COLOR::RED);
 8004eb0:	20a4      	movs	r0, #164	@ 0xa4
 8004eb2:	f00c fe15 	bl	8011ae0 <_Znwj>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	461c      	mov	r4, r3
 8004eba:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004ebe:	9306      	str	r3, [sp, #24]
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	9305      	str	r3, [sp, #20]
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	9304      	str	r3, [sp, #16]
 8004ec8:	2300      	movs	r3, #0
 8004eca:	9303      	str	r3, [sp, #12]
 8004ecc:	4b5d      	ldr	r3, [pc, #372]	@ (8005044 <_ZN20CPantallaCalibracionC1Ev+0x290>)
 8004ece:	9302      	str	r3, [sp, #8]
 8004ed0:	f64d 63de 	movw	r3, #57054	@ 0xdede
 8004ed4:	9301      	str	r3, [sp, #4]
 8004ed6:	231e      	movs	r3, #30
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	2396      	movs	r3, #150	@ 0x96
 8004edc:	2250      	movs	r2, #80	@ 0x50
 8004ede:	215f      	movs	r1, #95	@ 0x5f
 8004ee0:	4620      	mov	r0, r4
 8004ee2:	f7fd ffed 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8c3 40c4 	str.w	r4, [r3, #196]	@ 0xc4
	TextDiferencia->SetSeparacion(5, 5);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004ef2:	2205      	movs	r2, #5
 8004ef4:	2105      	movs	r1, #5
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7fe f96c 	bl	80031d4 <_ZN12CEtiquetaTft13SetSeparacionEii>

	LabelTemperatura2=new CEtiquetaTft( 5, 120, 50, 20, COLOR::BLACK,(char*)"temp: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8004efc:	20a4      	movs	r0, #164	@ 0xa4
 8004efe:	f00c fdef 	bl	8011ae0 <_Znwj>
 8004f02:	4603      	mov	r3, r0
 8004f04:	461c      	mov	r4, r3
 8004f06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004f0a:	9306      	str	r3, [sp, #24]
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	9305      	str	r3, [sp, #20]
 8004f10:	2303      	movs	r3, #3
 8004f12:	9304      	str	r3, [sp, #16]
 8004f14:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004f18:	9303      	str	r3, [sp, #12]
 8004f1a:	4b49      	ldr	r3, [pc, #292]	@ (8005040 <_ZN20CPantallaCalibracionC1Ev+0x28c>)
 8004f1c:	9302      	str	r3, [sp, #8]
 8004f1e:	2300      	movs	r3, #0
 8004f20:	9301      	str	r3, [sp, #4]
 8004f22:	2314      	movs	r3, #20
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	2332      	movs	r3, #50	@ 0x32
 8004f28:	2278      	movs	r2, #120	@ 0x78
 8004f2a:	2105      	movs	r1, #5
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	f7fd ffc7 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8c3 40c8 	str.w	r4, [r3, #200]	@ 0xc8
	TextTemperatura2 = new CEtiquetaTft( 95, 120, 150, 30,COLOR::GREY, (char*)"000", COLOR::BLACK, 3, 1, COLOR::RED);
 8004f38:	20a4      	movs	r0, #164	@ 0xa4
 8004f3a:	f00c fdd1 	bl	8011ae0 <_Znwj>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	461c      	mov	r4, r3
 8004f42:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004f46:	9306      	str	r3, [sp, #24]
 8004f48:	2301      	movs	r3, #1
 8004f4a:	9305      	str	r3, [sp, #20]
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	9304      	str	r3, [sp, #16]
 8004f50:	2300      	movs	r3, #0
 8004f52:	9303      	str	r3, [sp, #12]
 8004f54:	4b3b      	ldr	r3, [pc, #236]	@ (8005044 <_ZN20CPantallaCalibracionC1Ev+0x290>)
 8004f56:	9302      	str	r3, [sp, #8]
 8004f58:	f64d 63de 	movw	r3, #57054	@ 0xdede
 8004f5c:	9301      	str	r3, [sp, #4]
 8004f5e:	231e      	movs	r3, #30
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	2396      	movs	r3, #150	@ 0x96
 8004f64:	2278      	movs	r2, #120	@ 0x78
 8004f66:	215f      	movs	r1, #95	@ 0x5f
 8004f68:	4620      	mov	r0, r4
 8004f6a:	f7fd ffa9 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8c3 40cc 	str.w	r4, [r3, #204]	@ 0xcc

	LabelAire = new CEtiquetaTft( 5, 160, 200, 30, COLOR::BLACK,(char*) "Aire: 00",COLOR::WHITE, 3, 0, COLOR::RED);
 8004f74:	20a4      	movs	r0, #164	@ 0xa4
 8004f76:	f00c fdb3 	bl	8011ae0 <_Znwj>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	461c      	mov	r4, r3
 8004f7e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004f82:	9306      	str	r3, [sp, #24]
 8004f84:	2300      	movs	r3, #0
 8004f86:	9305      	str	r3, [sp, #20]
 8004f88:	2303      	movs	r3, #3
 8004f8a:	9304      	str	r3, [sp, #16]
 8004f8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004f90:	9303      	str	r3, [sp, #12]
 8004f92:	4b2e      	ldr	r3, [pc, #184]	@ (800504c <_ZN20CPantallaCalibracionC1Ev+0x298>)
 8004f94:	9302      	str	r3, [sp, #8]
 8004f96:	2300      	movs	r3, #0
 8004f98:	9301      	str	r3, [sp, #4]
 8004f9a:	231e      	movs	r3, #30
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	23c8      	movs	r3, #200	@ 0xc8
 8004fa0:	22a0      	movs	r2, #160	@ 0xa0
 8004fa2:	2105      	movs	r1, #5
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	f7fd ff8b 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8c3 40bc 	str.w	r4, [r3, #188]	@ 0xbc

	LabelGuardar=new CEtiquetaTft( 10, 200, 130, 30, COLOR::GREEN,(char*)"GUARDAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 8004fb0:	20a4      	movs	r0, #164	@ 0xa4
 8004fb2:	f00c fd95 	bl	8011ae0 <_Znwj>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	461c      	mov	r4, r3
 8004fba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004fbe:	9306      	str	r3, [sp, #24]
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	9305      	str	r3, [sp, #20]
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	9304      	str	r3, [sp, #16]
 8004fc8:	2300      	movs	r3, #0
 8004fca:	9303      	str	r3, [sp, #12]
 8004fcc:	4b20      	ldr	r3, [pc, #128]	@ (8005050 <_ZN20CPantallaCalibracionC1Ev+0x29c>)
 8004fce:	9302      	str	r3, [sp, #8]
 8004fd0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004fd4:	9301      	str	r3, [sp, #4]
 8004fd6:	231e      	movs	r3, #30
 8004fd8:	9300      	str	r3, [sp, #0]
 8004fda:	2382      	movs	r3, #130	@ 0x82
 8004fdc:	22c8      	movs	r2, #200	@ 0xc8
 8004fde:	210a      	movs	r1, #10
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	f7fd ff6d 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f8c3 40ac 	str.w	r4, [r3, #172]	@ 0xac
	LabelCancelar=new CEtiquetaTft( 160, 200, 145, 30, COLOR::RED,(char*)"CANCELAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 8004fec:	20a4      	movs	r0, #164	@ 0xa4
 8004fee:	f00c fd77 	bl	8011ae0 <_Znwj>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	461c      	mov	r4, r3
 8004ff6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004ffa:	9306      	str	r3, [sp, #24]
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	9305      	str	r3, [sp, #20]
 8005000:	2303      	movs	r3, #3
 8005002:	9304      	str	r3, [sp, #16]
 8005004:	2300      	movs	r3, #0
 8005006:	9303      	str	r3, [sp, #12]
 8005008:	4b12      	ldr	r3, [pc, #72]	@ (8005054 <_ZN20CPantallaCalibracionC1Ev+0x2a0>)
 800500a:	9302      	str	r3, [sp, #8]
 800500c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005010:	9301      	str	r3, [sp, #4]
 8005012:	231e      	movs	r3, #30
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	2391      	movs	r3, #145	@ 0x91
 8005018:	22c8      	movs	r2, #200	@ 0xc8
 800501a:	21a0      	movs	r1, #160	@ 0xa0
 800501c:	4620      	mov	r0, r4
 800501e:	f7fd ff4f 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f8c3 40b0 	str.w	r4, [r3, #176]	@ 0xb0
}
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4618      	mov	r0, r3
 800502c:	370c      	adds	r7, #12
 800502e:	46bd      	mov	sp, r7
 8005030:	bd90      	pop	{r4, r7, pc}
 8005032:	bf00      	nop
 8005034:	08014868 	.word	0x08014868
 8005038:	080151dc 	.word	0x080151dc
 800503c:	08015274 	.word	0x08015274
 8005040:	0801487c 	.word	0x0801487c
 8005044:	08014884 	.word	0x08014884
 8005048:	08014888 	.word	0x08014888
 800504c:	08014890 	.word	0x08014890
 8005050:	0801489c 	.word	0x0801489c
 8005054:	080148a4 	.word	0x080148a4

08005058 <_ZN20CPantallaCalibracionD1Ev>:

CPantallaCalibracion::~CPantallaCalibracion()
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	4a07      	ldr	r2, [pc, #28]	@ (8005080 <_ZN20CPantallaCalibracionD1Ev+0x28>)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	601a      	str	r2, [r3, #0]
 8005066:	4a07      	ldr	r2, [pc, #28]	@ (8005084 <_ZN20CPantallaCalibracionD1Ev+0x2c>)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4618      	mov	r0, r3
 8005070:	f7fe f93e 	bl	80032f0 <_ZN13CPantallaBaseD1Ev>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4618      	mov	r0, r3
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	080151dc 	.word	0x080151dc
 8005084:	08015274 	.word	0x08015274

08005088 <_ZThn48_N20CPantallaCalibracionD1Ev>:

	void MuestraInformacion();
	void LeeMemoria();
public:
	CPantallaCalibracion();
	virtual ~CPantallaCalibracion();
 8005088:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800508c:	f7ff bfe4 	b.w	8005058 <_ZN20CPantallaCalibracionD1Ev>

08005090 <_ZN20CPantallaCalibracionD0Ev>:
CPantallaCalibracion::~CPantallaCalibracion()
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
}
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7ff ffdd 	bl	8005058 <_ZN20CPantallaCalibracionD1Ev>
 800509e:	21ec      	movs	r1, #236	@ 0xec
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f00c fd1b 	bl	8011adc <_ZdlPvj>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4618      	mov	r0, r3
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <_ZThn48_N20CPantallaCalibracionD0Ev>:
 80050b0:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80050b4:	f7ff bfec 	b.w	8005090 <_ZN20CPantallaCalibracionD0Ev>

080050b8 <_ZN20CPantallaCalibracion4ShowEv>:

 void CPantallaCalibracion::Show()
 {
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
		LeeMemoria();
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 fa59 	bl	8005578 <_ZN20CPantallaCalibracion10LeeMemoriaEv>
	 	CPantallaBase::Show();
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7fe f9b7 	bl	800343c <_ZN13CPantallaBase4ShowEv>
	 	LabelTemperatura->Show();
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	334c      	adds	r3, #76	@ 0x4c
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4610      	mov	r0, r2
 80050e2:	4798      	blx	r3
		LabelGuardar->Show();
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	334c      	adds	r3, #76	@ 0x4c
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4610      	mov	r0, r2
 80050f8:	4798      	blx	r3
		LabelCancelar->Show();
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	334c      	adds	r3, #76	@ 0x4c
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4610      	mov	r0, r2
 800510e:	4798      	blx	r3
		LabelAire->Show();
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	334c      	adds	r3, #76	@ 0x4c
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4610      	mov	r0, r2
 8005124:	4798      	blx	r3
		TextTemperatura->Show();
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	334c      	adds	r3, #76	@ 0x4c
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4610      	mov	r0, r2
 800513a:	4798      	blx	r3
		LabelDiferencia->Show();
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	334c      	adds	r3, #76	@ 0x4c
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4610      	mov	r0, r2
 8005150:	4798      	blx	r3
		TextDiferencia->Show();
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	334c      	adds	r3, #76	@ 0x4c
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4610      	mov	r0, r2
 8005166:	4798      	blx	r3
	 	LabelTemperatura2->Show();
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	334c      	adds	r3, #76	@ 0x4c
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4610      	mov	r0, r2
 800517c:	4798      	blx	r3
		TextTemperatura2->Show();
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	334c      	adds	r3, #76	@ 0x4c
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4610      	mov	r0, r2
 8005192:	4798      	blx	r3
		MuestraInformacion();
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f821 	bl	80051dc <_ZN20CPantallaCalibracion18MuestraInformacionEv>
 }
 800519a:	bf00      	nop
 800519c:	3708      	adds	r7, #8
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <_ZN20CPantallaCalibracion8RefrescaEv>:
void CPantallaCalibracion::Refresca()
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b082      	sub	sp, #8
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
	MuestraInformacion();
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f816 	bl	80051dc <_ZN20CPantallaCalibracion18MuestraInformacionEv>
}
 80051b0:	bf00      	nop
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <_ZN20CPantallaCalibracion21OnBotonTresClickEventEv>:
void CPantallaCalibracion::OnBotonTresClickEvent()
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
	 ManejadorPantallas.MuestraMenuPrincipal();
 80051c0:	4803      	ldr	r0, [pc, #12]	@ (80051d0 <_ZN20CPantallaCalibracion21OnBotonTresClickEventEv+0x18>)
 80051c2:	f7fe fe35 	bl	8003e30 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>

}
 80051c6:	bf00      	nop
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	2000025c 	.word	0x2000025c

080051d4 <_ZThn48_N20CPantallaCalibracion21OnBotonTresClickEventEv>:
	virtual void Show();
	virtual void Refresca();
	virtual void OnBotonTresClickEvent();
 80051d4:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80051d8:	f7ff bfee 	b.w	80051b8 <_ZN20CPantallaCalibracion21OnBotonTresClickEventEv>

080051dc <_ZN20CPantallaCalibracion18MuestraInformacionEv>:
void CPantallaCalibracion::MuestraInformacion()
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
	LeeDatosEstacion();
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	3388      	adds	r3, #136	@ 0x88
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	4798      	blx	r3

	if(TemperaturaAnterior!=Temperatura)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d01a      	beq.n	8005236 <_ZN20CPantallaCalibracion18MuestraInformacionEv+0x5a>
	{
		TextTemperatura->SetTexto((char*)"%d", Temperatura);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800520c:	461a      	mov	r2, r3
 800520e:	492f      	ldr	r1, [pc, #188]	@ (80052cc <_ZN20CPantallaCalibracion18MuestraInformacionEv+0xf0>)
 8005210:	f7fd fe90 	bl	8002f34 <_ZN12CEtiquetaTft8SetTextoEPcz>
		TextTemperatura->Show();
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	334c      	adds	r3, #76	@ 0x4c
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4610      	mov	r0, r2
 8005228:	4798      	blx	r3
		TemperaturaAnterior=Temperatura;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
	}

	if(DiferenciaAnterior!=Diferencia)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005242:	429a      	cmp	r2, r3
 8005244:	d01a      	beq.n	800527c <_ZN20CPantallaCalibracion18MuestraInformacionEv+0xa0>
	{
		DiferenciaAnterior=Diferencia;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
		TextDiferencia->SetTexto((char*)"%d",Diferencia);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800525e:	461a      	mov	r2, r3
 8005260:	491a      	ldr	r1, [pc, #104]	@ (80052cc <_ZN20CPantallaCalibracion18MuestraInformacionEv+0xf0>)
 8005262:	f7fd fe67 	bl	8002f34 <_ZN12CEtiquetaTft8SetTextoEPcz>
		TextDiferencia->Show();
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	334c      	adds	r3, #76	@ 0x4c
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4610      	mov	r0, r2
 800527a:	4798      	blx	r3
	}

	if( VelocidadAireAnterior!=VelocidadAire)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005288:	429a      	cmp	r2, r3
 800528a:	d01a      	beq.n	80052c2 <_ZN20CPantallaCalibracion18MuestraInformacionEv+0xe6>
	{
		LabelAire->SetTexto((char*)"Aire: %d", VelocidadAire);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005298:	461a      	mov	r2, r3
 800529a:	490d      	ldr	r1, [pc, #52]	@ (80052d0 <_ZN20CPantallaCalibracion18MuestraInformacionEv+0xf4>)
 800529c:	f7fd fe4a 	bl	8002f34 <_ZN12CEtiquetaTft8SetTextoEPcz>
		LabelAire->Show();
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	334c      	adds	r3, #76	@ 0x4c
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4610      	mov	r0, r2
 80052b4:	4798      	blx	r3
		VelocidadAireAnterior=VelocidadAire;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
	}
}
 80052c2:	bf00      	nop
 80052c4:	3708      	adds	r7, #8
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	080148b0 	.word	0x080148b0
 80052d0:	080148b4 	.word	0x080148b4

080052d4 <_ZN20CPantallaCalibracion24OnBotonPerillaClickEventEv>:
void CPantallaCalibracion::OnBotonPerillaClickEvent()
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
	TemperaturaODiferencia=!TemperaturaODiferencia;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 80052e2:	f083 0301 	eor.w	r3, r3, #1
 80052e6:	b2da      	uxtb	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
	if(TemperaturaODiferencia==true)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d110      	bne.n	800531a <_ZN20CPantallaCalibracion24OnBotonPerillaClickEventEv+0x46>
	{
		TextTemperatura->SetBackColor(COLOR::WHITE);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80052fe:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005302:	4618      	mov	r0, r3
 8005304:	f7fd ffc6 	bl	8003294 <_ZN12CEtiquetaTft12SetBackColorEi>
		TextDiferencia->SetBackColor(COLOR::GREY);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800530e:	f64d 61de 	movw	r1, #57054	@ 0xdede
 8005312:	4618      	mov	r0, r3
 8005314:	f7fd ffbe 	bl	8003294 <_ZN12CEtiquetaTft12SetBackColorEi>
 8005318:	e00f      	b.n	800533a <_ZN20CPantallaCalibracion24OnBotonPerillaClickEventEv+0x66>
	}
	else
	{
		TextTemperatura->SetBackColor(COLOR::GREY);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005320:	f64d 61de 	movw	r1, #57054	@ 0xdede
 8005324:	4618      	mov	r0, r3
 8005326:	f7fd ffb5 	bl	8003294 <_ZN12CEtiquetaTft12SetBackColorEi>
		TextDiferencia->SetBackColor(COLOR::WHITE);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005330:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005334:	4618      	mov	r0, r3
 8005336:	f7fd ffad 	bl	8003294 <_ZN12CEtiquetaTft12SetBackColorEi>
	}
	TextTemperatura->Show();
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	334c      	adds	r3, #76	@ 0x4c
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4610      	mov	r0, r2
 800534e:	4798      	blx	r3
	TextDiferencia->Show();
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	334c      	adds	r3, #76	@ 0x4c
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4610      	mov	r0, r2
 8005364:	4798      	blx	r3
}
 8005366:	bf00      	nop
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <_ZThn48_N20CPantallaCalibracion24OnBotonPerillaClickEventEv>:
	virtual void OnPerillaIncremento();
	virtual void OnPerillaDecremento();
	virtual void OnBotonPerillaClickEvent();
 800536e:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005372:	f7ff bfaf 	b.w	80052d4 <_ZN20CPantallaCalibracion24OnBotonPerillaClickEventEv>
	...

08005378 <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv>:

void CPantallaCalibracion::OnPerillaIncremento()
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
	if(TemperaturaODiferencia==true)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8005386:	2b01      	cmp	r3, #1
 8005388:	d122      	bne.n	80053d0 <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv+0x58>
	{
		if(Temperatura<=500)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8005390:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005394:	dc06      	bgt.n	80053a4 <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv+0x2c>
			Temperatura++;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800539c:	1c5a      	adds	r2, r3, #1
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
		TextTemperatura->SetTexto((char*)"%d",Temperatura);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80053b0:	461a      	mov	r2, r3
 80053b2:	492e      	ldr	r1, [pc, #184]	@ (800546c <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv+0xf4>)
 80053b4:	f7fd fdbe 	bl	8002f34 <_ZN12CEtiquetaTft8SetTextoEPcz>
		TextTemperatura->Show();
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	334c      	adds	r3, #76	@ 0x4c
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4610      	mov	r0, r2
 80053cc:	4798      	blx	r3
 80053ce:	e02f      	b.n	8005430 <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv+0xb8>
	}
	else
	{
		if(Diferencia>=500)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80053d6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80053da:	da43      	bge.n	8005464 <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv+0xec>
			return;
		Diferencia++;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80053e2:	1c5a      	adds	r2, r3, #1
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
		Estacion->SetTemperatura(Temperatura);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	330c      	adds	r3, #12
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	f8d2 20d0 	ldr.w	r2, [r2, #208]	@ 0xd0
 8005402:	4611      	mov	r1, r2
 8005404:	4798      	blx	r3
		TextDiferencia->SetTexto((char*)"%d",Diferencia);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005412:	461a      	mov	r2, r3
 8005414:	4915      	ldr	r1, [pc, #84]	@ (800546c <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv+0xf4>)
 8005416:	f7fd fd8d 	bl	8002f34 <_ZN12CEtiquetaTft8SetTextoEPcz>
		TextDiferencia->Show();
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	334c      	adds	r3, #76	@ 0x4c
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4610      	mov	r0, r2
 800542e:	4798      	blx	r3
	}
	TextTemperatura2->SetTexto((char*)"%d",Temperatura+Diferencia);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005442:	4413      	add	r3, r2
 8005444:	461a      	mov	r2, r3
 8005446:	4909      	ldr	r1, [pc, #36]	@ (800546c <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv+0xf4>)
 8005448:	f7fd fd74 	bl	8002f34 <_ZN12CEtiquetaTft8SetTextoEPcz>
	TextTemperatura2->Show();
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	334c      	adds	r3, #76	@ 0x4c
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4610      	mov	r0, r2
 8005460:	4798      	blx	r3
 8005462:	e000      	b.n	8005466 <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv+0xee>
			return;
 8005464:	bf00      	nop
}
 8005466:	3708      	adds	r7, #8
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	080148b0 	.word	0x080148b0

08005470 <_ZThn48_N20CPantallaCalibracion19OnPerillaIncrementoEv>:
	virtual void OnPerillaIncremento();
 8005470:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005474:	f7ff bf80 	b.w	8005378 <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv>

08005478 <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv>:
void CPantallaCalibracion::OnPerillaDecremento()
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
	if(TemperaturaODiferencia==true)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8005486:	2b01      	cmp	r3, #1
 8005488:	d12f      	bne.n	80054ea <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv+0x72>
	{
		if(Temperatura<=0)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8005490:	2b00      	cmp	r3, #0
 8005492:	dd66      	ble.n	8005562 <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv+0xea>
			return;
		Temperatura--;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800549a:	1e5a      	subs	r2, r3, #1
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
		Estacion->SetTemperatura(Temperatura);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	330c      	adds	r3, #12
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	f8d2 20d0 	ldr.w	r2, [r2, #208]	@ 0xd0
 80054ba:	4611      	mov	r1, r2
 80054bc:	4798      	blx	r3
		TextTemperatura->SetTexto((char*)"%d",Temperatura);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80054ca:	461a      	mov	r2, r3
 80054cc:	4927      	ldr	r1, [pc, #156]	@ (800556c <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv+0xf4>)
 80054ce:	f7fd fd31 	bl	8002f34 <_ZN12CEtiquetaTft8SetTextoEPcz>
		TextTemperatura->Show();
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	334c      	adds	r3, #76	@ 0x4c
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4610      	mov	r0, r2
 80054e6:	4798      	blx	r3
 80054e8:	e021      	b.n	800552e <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv+0xb6>
	}
	else
	{
		if(Diferencia>-500)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80054f0:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 80054f4:	dd06      	ble.n	8005504 <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv+0x8c>
			Diferencia--;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80054fc:	1e5a      	subs	r2, r3, #1
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
		TextDiferencia->SetTexto((char*)"%d",Diferencia);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005510:	461a      	mov	r2, r3
 8005512:	4916      	ldr	r1, [pc, #88]	@ (800556c <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv+0xf4>)
 8005514:	f7fd fd0e 	bl	8002f34 <_ZN12CEtiquetaTft8SetTextoEPcz>
		TextDiferencia->Show();
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	334c      	adds	r3, #76	@ 0x4c
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4610      	mov	r0, r2
 800552c:	4798      	blx	r3
	}
	TextTemperatura2->SetTexto((char*)"%d",Temperatura+Diferencia);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005540:	4413      	add	r3, r2
 8005542:	461a      	mov	r2, r3
 8005544:	4909      	ldr	r1, [pc, #36]	@ (800556c <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv+0xf4>)
 8005546:	f7fd fcf5 	bl	8002f34 <_ZN12CEtiquetaTft8SetTextoEPcz>
	TextTemperatura2->Show();
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	334c      	adds	r3, #76	@ 0x4c
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4610      	mov	r0, r2
 800555e:	4798      	blx	r3
 8005560:	e000      	b.n	8005564 <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv+0xec>
			return;
 8005562:	bf00      	nop
}
 8005564:	3708      	adds	r7, #8
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	080148b0 	.word	0x080148b0

08005570 <_ZThn48_N20CPantallaCalibracion19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 8005570:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005574:	f7ff bf80 	b.w	8005478 <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv>

08005578 <_ZN20CPantallaCalibracion10LeeMemoriaEv>:

void CPantallaCalibracion::LeeMemoria()
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
	Temperatura=Eprom.DameTemperaturaManual();
 8005580:	480f      	ldr	r0, [pc, #60]	@ (80055c0 <_ZN20CPantallaCalibracion10LeeMemoriaEv+0x48>)
 8005582:	f7fb ffcf 	bl	8001524 <_ZN6CEprom21DameTemperaturaManualEv>
 8005586:	4602      	mov	r2, r0
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	Diferencia=Eprom.DameAjusteTemperatura();
 800558e:	480c      	ldr	r0, [pc, #48]	@ (80055c0 <_ZN20CPantallaCalibracion10LeeMemoriaEv+0x48>)
 8005590:	f7fc f82a 	bl	80015e8 <_ZN6CEprom21DameAjusteTemperaturaEv>
 8005594:	4602      	mov	r2, r0
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	Estacion->SetTemperatura(Temperatura);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	330c      	adds	r3, #12
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	f8d2 20d0 	ldr.w	r2, [r2, #208]	@ 0xd0
 80055b4:	4611      	mov	r1, r2
 80055b6:	4798      	blx	r3
}
 80055b8:	bf00      	nop
 80055ba:	3708      	adds	r7, #8
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	2000031c 	.word	0x2000031c

080055c4 <_ZN20CPantallaCalibracion16LeeDatosEstacionEv>:
void CPantallaCalibracion::LeeDatosEstacion()
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
	VelocidadAire = ManejadorControles->GetNivelAire();
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80055d2:	4618      	mov	r0, r3
 80055d4:	f004 ff39 	bl	800a44a <_ZN19CManejadorControles12GetNivelAireEv>
 80055d8:	4602      	mov	r2, r0
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	Estacion->SetNivelAire(VelocidadAire);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	3314      	adds	r3, #20
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	f8d2 20dc 	ldr.w	r2, [r2, #220]	@ 0xdc
 80055f8:	4611      	mov	r1, r2
 80055fa:	4798      	blx	r3
}
 80055fc:	bf00      	nop
 80055fe:	3708      	adds	r7, #8
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <_ZN20CPantallaCalibracion20OnBotonUnoClickEventEv>:
void CPantallaCalibracion::OnBotonUnoClickEvent()
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
	Eprom.GuardaAjusteTemperatura(Diferencia);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005612:	4619      	mov	r1, r3
 8005614:	4804      	ldr	r0, [pc, #16]	@ (8005628 <_ZN20CPantallaCalibracion20OnBotonUnoClickEventEv+0x24>)
 8005616:	f7fc f82d 	bl	8001674 <_ZN6CEprom23GuardaAjusteTemperaturaEi>
	 ManejadorPantallas.MuestraMenuPrincipal();
 800561a:	4804      	ldr	r0, [pc, #16]	@ (800562c <_ZN20CPantallaCalibracion20OnBotonUnoClickEventEv+0x28>)
 800561c:	f7fe fc08 	bl	8003e30 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>
}
 8005620:	bf00      	nop
 8005622:	3708      	adds	r7, #8
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	2000031c 	.word	0x2000031c
 800562c:	2000025c 	.word	0x2000025c

08005630 <_ZThn48_N20CPantallaCalibracion20OnBotonUnoClickEventEv>:
	virtual void LeeDatosEstacion();
	virtual void OnBotonUnoClickEvent();
 8005630:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005634:	f7ff bfe6 	b.w	8005604 <_ZN20CPantallaCalibracion20OnBotonUnoClickEventEv>

08005638 <_ZN20CPantallaCalibracion11SetEstacionEP13CEstacionBase>:
void CPantallaCalibracion::SetEstacion(CEstacionBase *estacion)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
	CPantallaBase::SetEstacion(estacion);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6839      	ldr	r1, [r7, #0]
 8005646:	4618      	mov	r0, r3
 8005648:	f7fd ff13 	bl	8003472 <_ZN13CPantallaBase11SetEstacionEP13CEstacionBase>
	Estacion->ActivarCalefactor();
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	3334      	adds	r3, #52	@ 0x34
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4610      	mov	r0, r2
 8005660:	4798      	blx	r3
}
 8005662:	bf00      	nop
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
	...

0800566c <_ZN26CPantallaInicializaMemoriaC1Ev>:
#include <GUI/PantallaManual/CPantallaManual.hpp>
#include <GUI/ManejadorPantallas/CManejadorPantallas.hpp>
#include <RapaTemperatura/CControladorRampas.hpp>
#include <GUI/ManejadorPantallas/CManejadorPantallas.hpp>

CPantallaInicializaMemoria::CPantallaInicializaMemoria():
 800566c:	b590      	push	{r4, r7, lr}
 800566e:	b089      	sub	sp, #36	@ 0x24
 8005670:	af06      	add	r7, sp, #24
 8005672:	6078      	str	r0, [r7, #4]
	CPantallaBase(1, (char*)"Iniciando memoria")
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a24      	ldr	r2, [pc, #144]	@ (8005708 <_ZN26CPantallaInicializaMemoriaC1Ev+0x9c>)
 8005678:	2101      	movs	r1, #1
 800567a:	4618      	mov	r0, r3
 800567c:	f7fd fe6c 	bl	8003358 <_ZN13CPantallaBaseC1EiPc>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	33ac      	adds	r3, #172	@ 0xac
 8005684:	4618      	mov	r0, r3
 8005686:	f005 f98d 	bl	800a9a4 <_ZN16CControlProgresoC1Ev>
 800568a:	4a20      	ldr	r2, [pc, #128]	@ (800570c <_ZN26CPantallaInicializaMemoriaC1Ev+0xa0>)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	601a      	str	r2, [r3, #0]
 8005690:	4a1f      	ldr	r2, [pc, #124]	@ (8005710 <_ZN26CPantallaInicializaMemoriaC1Ev+0xa4>)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	631a      	str	r2, [r3, #48]	@ 0x30
 8005696:	4a1f      	ldr	r2, [pc, #124]	@ (8005714 <_ZN26CPantallaInicializaMemoriaC1Ev+0xa8>)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

{
	// TODO Auto-generated constructor stub
	BarraProgreso=new CBarraProgreso(10, 100, 300,20);
 800569e:	203c      	movs	r0, #60	@ 0x3c
 80056a0:	f00c fa1e 	bl	8011ae0 <_Znwj>
 80056a4:	4603      	mov	r3, r0
 80056a6:	461c      	mov	r4, r3
 80056a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80056ac:	9304      	str	r3, [sp, #16]
 80056ae:	2300      	movs	r3, #0
 80056b0:	9303      	str	r3, [sp, #12]
 80056b2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80056b6:	9302      	str	r3, [sp, #8]
 80056b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80056bc:	9301      	str	r3, [sp, #4]
 80056be:	2314      	movs	r3, #20
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80056c6:	2264      	movs	r2, #100	@ 0x64
 80056c8:	210a      	movs	r1, #10
 80056ca:	4620      	mov	r0, r4
 80056cc:	f7fd f93e 	bl	800294c <_ZN14CBarraProgresoC1Eiiiiiiii>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8c3 40b0 	str.w	r4, [r3, #176]	@ 0xb0
	BarraProgreso->SetMaximo(100);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80056dc:	2164      	movs	r1, #100	@ 0x64
 80056de:	4618      	mov	r0, r3
 80056e0:	f7fd f978 	bl	80029d4 <_ZN14CBarraProgreso9SetMaximoEi>
	BarraProgreso->SetValor(0);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80056ea:	2100      	movs	r1, #0
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7fd f97f 	bl	80029f0 <_ZN14CBarraProgreso8SetValorEi>
	ControladorRampas.SetControlProgreso(this);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	33ac      	adds	r3, #172	@ 0xac
 80056f6:	4619      	mov	r1, r3
 80056f8:	4807      	ldr	r0, [pc, #28]	@ (8005718 <_ZN26CPantallaInicializaMemoriaC1Ev+0xac>)
 80056fa:	f005 fed9 	bl	800b4b0 <_ZN18CControladorRampas18SetControlProgresoEP16CControlProgreso>
}
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4618      	mov	r0, r3
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	bd90      	pop	{r4, r7, pc}
 8005708:	080148c0 	.word	0x080148c0
 800570c:	080152a8 	.word	0x080152a8
 8005710:	08015330 	.word	0x08015330
 8005714:	08015364 	.word	0x08015364
 8005718:	20000364 	.word	0x20000364

0800571c <_ZN26CPantallaInicializaMemoriaD1Ev>:

CPantallaInicializaMemoria::~CPantallaInicializaMemoria()
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	4a0b      	ldr	r2, [pc, #44]	@ (8005754 <_ZN26CPantallaInicializaMemoriaD1Ev+0x38>)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	4a0b      	ldr	r2, [pc, #44]	@ (8005758 <_ZN26CPantallaInicializaMemoriaD1Ev+0x3c>)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005730:	4a0a      	ldr	r2, [pc, #40]	@ (800575c <_ZN26CPantallaInicializaMemoriaD1Ev+0x40>)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	// TODO Auto-generated destructor stub
}
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	33ac      	adds	r3, #172	@ 0xac
 800573c:	4618      	mov	r0, r3
 800573e:	f005 f941 	bl	800a9c4 <_ZN16CControlProgresoD1Ev>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4618      	mov	r0, r3
 8005746:	f7fd fdd3 	bl	80032f0 <_ZN13CPantallaBaseD1Ev>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4618      	mov	r0, r3
 800574e:	3708      	adds	r7, #8
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	080152a8 	.word	0x080152a8
 8005758:	08015330 	.word	0x08015330
 800575c:	08015364 	.word	0x08015364

08005760 <_ZThn48_N26CPantallaInicializaMemoriaD1Ev>:
{
private:
	CBarraProgreso *BarraProgreso;
public:
	CPantallaInicializaMemoria();
	virtual ~CPantallaInicializaMemoria();
 8005760:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005764:	f7ff bfda 	b.w	800571c <_ZN26CPantallaInicializaMemoriaD1Ev>

08005768 <_ZThn172_N26CPantallaInicializaMemoriaD1Ev>:
 8005768:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 800576c:	f7ff bfd6 	b.w	800571c <_ZN26CPantallaInicializaMemoriaD1Ev>

08005770 <_ZN26CPantallaInicializaMemoriaD0Ev>:
CPantallaInicializaMemoria::~CPantallaInicializaMemoria()
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
}
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f7ff ffcf 	bl	800571c <_ZN26CPantallaInicializaMemoriaD1Ev>
 800577e:	21b4      	movs	r1, #180	@ 0xb4
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f00c f9ab 	bl	8011adc <_ZdlPvj>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4618      	mov	r0, r3
 800578a:	3708      	adds	r7, #8
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <_ZThn172_N26CPantallaInicializaMemoriaD0Ev>:
 8005790:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8005794:	f7ff bfec 	b.w	8005770 <_ZN26CPantallaInicializaMemoriaD0Ev>

08005798 <_ZThn48_N26CPantallaInicializaMemoriaD0Ev>:
 8005798:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800579c:	f7ff bfe8 	b.w	8005770 <_ZN26CPantallaInicializaMemoriaD0Ev>

080057a0 <_ZN26CPantallaInicializaMemoria4ShowEv>:

void CPantallaInicializaMemoria::Show()
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
	CPantallaBase::Show();
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7fd fe46 	bl	800343c <_ZN13CPantallaBase4ShowEv>
	BarraProgreso->Show();
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	334c      	adds	r3, #76	@ 0x4c
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4610      	mov	r0, r2
 80057c4:	4798      	blx	r3
}
 80057c6:	bf00      	nop
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <_ZN26CPantallaInicializaMemoria10OnProgresoEii>:
void CPantallaInicializaMemoria::OnProgreso(int valor, int maximo)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b084      	sub	sp, #16
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	60f8      	str	r0, [r7, #12]
 80057d6:	60b9      	str	r1, [r7, #8]
 80057d8:	607a      	str	r2, [r7, #4]
	BarraProgreso->SetMaximo(maximo);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80057e0:	6879      	ldr	r1, [r7, #4]
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7fd f8f6 	bl	80029d4 <_ZN14CBarraProgreso9SetMaximoEi>
	BarraProgreso->SetValor(valor);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80057ee:	68b9      	ldr	r1, [r7, #8]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7fd f8fd 	bl	80029f0 <_ZN14CBarraProgreso8SetValorEi>
	BarraProgreso->Show();
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	334c      	adds	r3, #76	@ 0x4c
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4610      	mov	r0, r2
 800580a:	4798      	blx	r3
}
 800580c:	bf00      	nop
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <_ZThn172_N26CPantallaInicializaMemoria10OnProgresoEii>:
	virtual void Show();
	virtual void OnProgreso(int valor, int maximo);
 8005814:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8005818:	f7ff bfd9 	b.w	80057ce <_ZN26CPantallaInicializaMemoria10OnProgresoEii>

0800581c <_ZN26CPantallaInicializaMemoria13OnFinProgresoEv>:
void CPantallaInicializaMemoria::OnFinProgreso()
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaManual();
 8005824:	4803      	ldr	r0, [pc, #12]	@ (8005834 <_ZN26CPantallaInicializaMemoria13OnFinProgresoEv+0x18>)
 8005826:	f7fe fae7 	bl	8003df8 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
}
 800582a:	bf00      	nop
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	2000025c 	.word	0x2000025c

08005838 <_ZThn172_N26CPantallaInicializaMemoria13OnFinProgresoEv>:
//	virtual void OnMensaje(char *texto);
	virtual void OnFinProgreso();
 8005838:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 800583c:	f7ff bfee 	b.w	800581c <_ZN26CPantallaInicializaMemoria13OnFinProgresoEv>

08005840 <_ZN26CPantallaInicializaMemoria8RefrescaEv>:
void CPantallaInicializaMemoria::Refresca()
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
	ControladorRampas.InicializaMemoria();
 8005848:	4803      	ldr	r0, [pc, #12]	@ (8005858 <_ZN26CPantallaInicializaMemoria8RefrescaEv+0x18>)
 800584a:	f005 fd71 	bl	800b330 <_ZN18CControladorRampas17InicializaMemoriaEv>
}
 800584e:	bf00      	nop
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	20000364 	.word	0x20000364

0800585c <_ZN15CPantallaManualD1Ev>:
#include <EPROM/CEprom.hpp>

extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart1;

CPantallaManual::~CPantallaManual()
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	4a07      	ldr	r2, [pc, #28]	@ (8005884 <_ZN15CPantallaManualD1Ev+0x28>)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	601a      	str	r2, [r3, #0]
 800586a:	4a07      	ldr	r2, [pc, #28]	@ (8005888 <_ZN15CPantallaManualD1Ev+0x2c>)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4618      	mov	r0, r3
 8005874:	f7fd fd3c 	bl	80032f0 <_ZN13CPantallaBaseD1Ev>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4618      	mov	r0, r3
 800587c:	3708      	adds	r7, #8
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	08015380 	.word	0x08015380
 8005888:	08015430 	.word	0x08015430

0800588c <_ZThn48_N15CPantallaManualD1Ev>:
	CEtiquetaTft *LabelEstado;
	int NivelAire = 0;

public:
	CPantallaManual(CEstacionBase *estacion);
	virtual ~CPantallaManual();
 800588c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005890:	f7ff bfe4 	b.w	800585c <_ZN15CPantallaManualD1Ev>

08005894 <_ZN15CPantallaManualD0Ev>:
CPantallaManual::~CPantallaManual()
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
}
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f7ff ffdd 	bl	800585c <_ZN15CPantallaManualD1Ev>
 80058a2:	21ec      	movs	r1, #236	@ 0xec
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f00c f919 	bl	8011adc <_ZdlPvj>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4618      	mov	r0, r3
 80058ae:	3708      	adds	r7, #8
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <_ZThn48_N15CPantallaManualD0Ev>:
 80058b4:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80058b8:	f7ff bfec 	b.w	8005894 <_ZN15CPantallaManualD0Ev>

080058bc <_ZN15CPantallaManualC1Ev>:

CPantallaManual::CPantallaManual() :
 80058bc:	b590      	push	{r4, r7, lr}
 80058be:	b08d      	sub	sp, #52	@ 0x34
 80058c0:	af08      	add	r7, sp, #32
 80058c2:	6078      	str	r0, [r7, #4]
		CPantallaBase(1, (char*)"   Modo: Manual")
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a77      	ldr	r2, [pc, #476]	@ (8005aa4 <_ZN15CPantallaManualC1Ev+0x1e8>)
 80058c8:	2101      	movs	r1, #1
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7fd fd44 	bl	8003358 <_ZN13CPantallaBaseC1EiPc>
 80058d0:	4a75      	ldr	r2, [pc, #468]	@ (8005aa8 <_ZN15CPantallaManualC1Ev+0x1ec>)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	601a      	str	r2, [r3, #0]
 80058d6:	4a75      	ldr	r2, [pc, #468]	@ (8005aac <_ZN15CPantallaManualC1Ev+0x1f0>)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	631a      	str	r2, [r3, #48]	@ 0x30
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f04f 32ff 	mov.w	r2, #4294967295
 80058ea:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f04f 32ff 	mov.w	r2, #4294967295
 80058f4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f04f 32ff 	mov.w	r2, #4294967295
 80058fe:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f04f 32ff 	mov.w	r2, #4294967295
 8005910:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
{
	LabelTemperatura = new CEtiquetaTft( 5, 35, 50, 20, COLOR::BLACK,(char*)"Temperatura", COLOR::WHITE, 3, 0, COLOR::WHITE);
 800593c:	20a4      	movs	r0, #164	@ 0xa4
 800593e:	f00c f8cf 	bl	8011ae0 <_Znwj>
 8005942:	4603      	mov	r3, r0
 8005944:	461c      	mov	r4, r3
 8005946:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800594a:	9306      	str	r3, [sp, #24]
 800594c:	2300      	movs	r3, #0
 800594e:	9305      	str	r3, [sp, #20]
 8005950:	2303      	movs	r3, #3
 8005952:	9304      	str	r3, [sp, #16]
 8005954:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005958:	9303      	str	r3, [sp, #12]
 800595a:	4b55      	ldr	r3, [pc, #340]	@ (8005ab0 <_ZN15CPantallaManualC1Ev+0x1f4>)
 800595c:	9302      	str	r3, [sp, #8]
 800595e:	2300      	movs	r3, #0
 8005960:	9301      	str	r3, [sp, #4]
 8005962:	2314      	movs	r3, #20
 8005964:	9300      	str	r3, [sp, #0]
 8005966:	2332      	movs	r3, #50	@ 0x32
 8005968:	2223      	movs	r2, #35	@ 0x23
 800596a:	2105      	movs	r1, #5
 800596c:	4620      	mov	r0, r4
 800596e:	f7fd faa7 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f8c3 40d4 	str.w	r4, [r3, #212]	@ 0xd4
	int centroX = DameCentroX();
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4618      	mov	r0, r3
 800597c:	f7fd ff04 	bl	8003788 <_ZN14CRectanguloTft11DameCentroXEv>
 8005980:	60f8      	str	r0, [r7, #12]
	LabelTemperaturas = new CEtiquetaTft( centroX - 150 / 2, 65, 150, 30,COLOR::WHITE,(char*) "000/000", COLOR::BLACK, 3, 1, COLOR::RED);
 8005982:	20a4      	movs	r0, #164	@ 0xa4
 8005984:	f00c f8ac 	bl	8011ae0 <_Znwj>
 8005988:	4603      	mov	r3, r0
 800598a:	461c      	mov	r4, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f1a3 014b 	sub.w	r1, r3, #75	@ 0x4b
 8005992:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005996:	9306      	str	r3, [sp, #24]
 8005998:	2301      	movs	r3, #1
 800599a:	9305      	str	r3, [sp, #20]
 800599c:	2303      	movs	r3, #3
 800599e:	9304      	str	r3, [sp, #16]
 80059a0:	2300      	movs	r3, #0
 80059a2:	9303      	str	r3, [sp, #12]
 80059a4:	4b43      	ldr	r3, [pc, #268]	@ (8005ab4 <_ZN15CPantallaManualC1Ev+0x1f8>)
 80059a6:	9302      	str	r3, [sp, #8]
 80059a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80059ac:	9301      	str	r3, [sp, #4]
 80059ae:	231e      	movs	r3, #30
 80059b0:	9300      	str	r3, [sp, #0]
 80059b2:	2396      	movs	r3, #150	@ 0x96
 80059b4:	2241      	movs	r2, #65	@ 0x41
 80059b6:	4620      	mov	r0, r4
 80059b8:	f7fd fa82 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8c3 40d8 	str.w	r4, [r3, #216]	@ 0xd8
	LabelTemperaturas->SetSeparacion(5, 5);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80059c8:	2205      	movs	r2, #5
 80059ca:	2105      	movs	r1, #5
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7fd fc01 	bl	80031d4 <_ZN12CEtiquetaTft13SetSeparacionEii>
	LabelAire1 = new CEtiquetaTft( 5, 105, 200, 30, COLOR::BLACK, (char*)"Aire:",COLOR::WHITE, 3, 0, COLOR::RED);
 80059d2:	20a4      	movs	r0, #164	@ 0xa4
 80059d4:	f00c f884 	bl	8011ae0 <_Znwj>
 80059d8:	4603      	mov	r3, r0
 80059da:	461c      	mov	r4, r3
 80059dc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80059e0:	9306      	str	r3, [sp, #24]
 80059e2:	2300      	movs	r3, #0
 80059e4:	9305      	str	r3, [sp, #20]
 80059e6:	2303      	movs	r3, #3
 80059e8:	9304      	str	r3, [sp, #16]
 80059ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80059ee:	9303      	str	r3, [sp, #12]
 80059f0:	4b31      	ldr	r3, [pc, #196]	@ (8005ab8 <_ZN15CPantallaManualC1Ev+0x1fc>)
 80059f2:	9302      	str	r3, [sp, #8]
 80059f4:	2300      	movs	r3, #0
 80059f6:	9301      	str	r3, [sp, #4]
 80059f8:	231e      	movs	r3, #30
 80059fa:	9300      	str	r3, [sp, #0]
 80059fc:	23c8      	movs	r3, #200	@ 0xc8
 80059fe:	2269      	movs	r2, #105	@ 0x69
 8005a00:	2105      	movs	r1, #5
 8005a02:	4620      	mov	r0, r4
 8005a04:	f7fd fa5c 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8c3 40dc 	str.w	r4, [r3, #220]	@ 0xdc
	LabelAire2 = new CEtiquetaTft( 110, 105, 100, 30, COLOR::WHITE, (char*)"00",COLOR::BLACK, 3, 0, COLOR::RED);
 8005a0e:	20a4      	movs	r0, #164	@ 0xa4
 8005a10:	f00c f866 	bl	8011ae0 <_Znwj>
 8005a14:	4603      	mov	r3, r0
 8005a16:	461c      	mov	r4, r3
 8005a18:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005a1c:	9306      	str	r3, [sp, #24]
 8005a1e:	2300      	movs	r3, #0
 8005a20:	9305      	str	r3, [sp, #20]
 8005a22:	2303      	movs	r3, #3
 8005a24:	9304      	str	r3, [sp, #16]
 8005a26:	2300      	movs	r3, #0
 8005a28:	9303      	str	r3, [sp, #12]
 8005a2a:	4b24      	ldr	r3, [pc, #144]	@ (8005abc <_ZN15CPantallaManualC1Ev+0x200>)
 8005a2c:	9302      	str	r3, [sp, #8]
 8005a2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005a32:	9301      	str	r3, [sp, #4]
 8005a34:	231e      	movs	r3, #30
 8005a36:	9300      	str	r3, [sp, #0]
 8005a38:	2364      	movs	r3, #100	@ 0x64
 8005a3a:	2269      	movs	r2, #105	@ 0x69
 8005a3c:	216e      	movs	r1, #110	@ 0x6e
 8005a3e:	4620      	mov	r0, r4
 8005a40:	f7fd fa3e 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8c3 40e0 	str.w	r4, [r3, #224]	@ 0xe0
	LabelEstado = new CEtiquetaTft( 5, 145, 300, 35, COLOR::BLACK,(char*)"Estado: REPOSO", COLOR::WHITE, 3, 0, COLOR::RED);
 8005a4a:	20a4      	movs	r0, #164	@ 0xa4
 8005a4c:	f00c f848 	bl	8011ae0 <_Znwj>
 8005a50:	4603      	mov	r3, r0
 8005a52:	461c      	mov	r4, r3
 8005a54:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005a58:	9306      	str	r3, [sp, #24]
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	9305      	str	r3, [sp, #20]
 8005a5e:	2303      	movs	r3, #3
 8005a60:	9304      	str	r3, [sp, #16]
 8005a62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005a66:	9303      	str	r3, [sp, #12]
 8005a68:	4b15      	ldr	r3, [pc, #84]	@ (8005ac0 <_ZN15CPantallaManualC1Ev+0x204>)
 8005a6a:	9302      	str	r3, [sp, #8]
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	9301      	str	r3, [sp, #4]
 8005a70:	2323      	movs	r3, #35	@ 0x23
 8005a72:	9300      	str	r3, [sp, #0]
 8005a74:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8005a78:	2291      	movs	r2, #145	@ 0x91
 8005a7a:	2105      	movs	r1, #5
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	f7fd fa1f 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8c3 40e4 	str.w	r4, [r3, #228]	@ 0xe4
	LabelEstado->SetSeparacion(15, 5);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a8e:	2205      	movs	r2, #5
 8005a90:	210f      	movs	r1, #15
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7fd fb9e 	bl	80031d4 <_ZN12CEtiquetaTft13SetSeparacionEii>
}
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3714      	adds	r7, #20
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd90      	pop	{r4, r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	080148d4 	.word	0x080148d4
 8005aa8:	08015380 	.word	0x08015380
 8005aac:	08015430 	.word	0x08015430
 8005ab0:	080148e4 	.word	0x080148e4
 8005ab4:	080148f0 	.word	0x080148f0
 8005ab8:	080148f8 	.word	0x080148f8
 8005abc:	08014900 	.word	0x08014900
 8005ac0:	08014904 	.word	0x08014904

08005ac4 <_ZN15CPantallaManual13MuestraEstadoEb>:


void CPantallaManual::MuestraEstado(bool forzar)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	460b      	mov	r3, r1
 8005ace:	70fb      	strb	r3, [r7, #3]
	if(forzar==false)
 8005ad0:	78fb      	ldrb	r3, [r7, #3]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d116      	bne.n	8005b04 <_ZN15CPantallaManual13MuestraEstadoEb+0x40>
	{
		if(EstadoBoquillaAnterior==EstadoBoquilla )
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d10e      	bne.n	8005b04 <_ZN15CPantallaManual13MuestraEstadoEb+0x40>
		{
			if(EsVisible()==true)
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	3368      	adds	r3, #104	@ 0x68
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4610      	mov	r0, r2
 8005af2:	4798      	blx	r3
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	bf0c      	ite	eq
 8005afa:	2301      	moveq	r3, #1
 8005afc:	2300      	movne	r3, #0
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d143      	bne.n	8005b8c <_ZN15CPantallaManual13MuestraEstadoEb+0xc8>
			{
				return;
			}
		}
	}
	EstadoBoquillaAnterior=EstadoBoquilla;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	if (EstadoBoquilla == 1)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d115      	bne.n	8005b46 <_ZN15CPantallaManual13MuestraEstadoEb+0x82>
	{
		LabelEstado->SetColorFondo(COLOR::BLUE);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b20:	211f      	movs	r1, #31
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fd fdfe 	bl	8003724 <_ZN14CRectanguloTft13SetColorFondoEi>
		LabelEstado->SetColorTexto(COLOR::BLACK);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b2e:	2100      	movs	r1, #0
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7fd fb63 	bl	80031fc <_ZN12CEtiquetaTft13SetColorTextoEi>
		LabelEstado->SetTexto((char*)"Estado: ACTIVO");
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b3c:	4915      	ldr	r1, [pc, #84]	@ (8005b94 <_ZN15CPantallaManual13MuestraEstadoEb+0xd0>)
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7fd f9f8 	bl	8002f34 <_ZN12CEtiquetaTft8SetTextoEPcz>
 8005b44:	e016      	b.n	8005b74 <_ZN15CPantallaManual13MuestraEstadoEb+0xb0>
	}
	else
	{
		LabelEstado->SetColorFondo(COLOR::RED);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b4c:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7fd fde7 	bl	8003724 <_ZN14CRectanguloTft13SetColorFondoEi>
		LabelEstado->SetColorTexto(COLOR::WHITE);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b5c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7fd fb4b 	bl	80031fc <_ZN12CEtiquetaTft13SetColorTextoEi>
		LabelEstado->SetTexto((char*)"Estado: REPOSO");
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b6c:	490a      	ldr	r1, [pc, #40]	@ (8005b98 <_ZN15CPantallaManual13MuestraEstadoEb+0xd4>)
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7fd f9e0 	bl	8002f34 <_ZN12CEtiquetaTft8SetTextoEPcz>
	}
	LabelEstado->Show();
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	334c      	adds	r3, #76	@ 0x4c
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4610      	mov	r0, r2
 8005b88:	4798      	blx	r3
 8005b8a:	e000      	b.n	8005b8e <_ZN15CPantallaManual13MuestraEstadoEb+0xca>
				return;
 8005b8c:	bf00      	nop
}
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	08014914 	.word	0x08014914
 8005b98:	08014904 	.word	0x08014904

08005b9c <_ZN15CPantallaManual16LeeDatosEstacionEv>:

void CPantallaManual::LeeDatosEstacion()
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
	SetTemperatura = Estacion->GetTemperatura();
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	3310      	adds	r3, #16
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4610      	mov	r0, r2
 8005bb8:	4798      	blx	r3
 8005bba:	4602      	mov	r2, r0
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	Temperatura = Estacion->GetTemperaturaRealx();
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	3308      	adds	r3, #8
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4610      	mov	r0, r2
 8005bd6:	4798      	blx	r3
 8005bd8:	eef0 7a40 	vmov.f32	s15, s0
 8005bdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005be0:	ee17 2a90 	vmov	r2, s15
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	NivelAire = ManejadorControles->GetNivelAire();
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f004 fc2a 	bl	800a44a <_ZN19CManejadorControles12GetNivelAireEv>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
	Estacion->SetNivelAire(NivelAire);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	3314      	adds	r3, #20
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	f8d2 20e8 	ldr.w	r2, [r2, #232]	@ 0xe8
 8005c16:	4611      	mov	r1, r2
 8005c18:	4798      	blx	r3
	EstadoBoquilla=Estacion->GetEstado();
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	331c      	adds	r3, #28
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4610      	mov	r0, r2
 8005c2e:	4798      	blx	r3
 8005c30:	4602      	mov	r2, r0
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
}
 8005c38:	bf00      	nop
 8005c3a:	3708      	adds	r7, #8
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <_ZN15CPantallaManual19MuestraTemperaturasEb>:


void CPantallaManual::MuestraTemperaturas(bool forzar)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	460b      	mov	r3, r1
 8005c4a:	70fb      	strb	r3, [r7, #3]
	if(forzar==false)
 8005c4c:	78fb      	ldrb	r3, [r7, #3]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10f      	bne.n	8005c72 <_ZN15CPantallaManual19MuestraTemperaturasEb+0x32>
	{
		if(TemperaturaAnterior==Temperatura &&SetTemperaturaAnterior==SetTemperatura)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d107      	bne.n	8005c72 <_ZN15CPantallaManual19MuestraTemperaturasEb+0x32>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d023      	beq.n	8005cba <_ZN15CPantallaManual19MuestraTemperaturasEb+0x7a>
			return;
	}

	TemperaturaAnterior=Temperatura;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	SetTemperaturaAnterior=SetTemperatura;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	LabelTemperaturas->SetTexto((char*)"%d/%d", Temperatura, SetTemperatura);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8d3 00d8 	ldr.w	r0, [r3, #216]	@ 0xd8
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005c9c:	4909      	ldr	r1, [pc, #36]	@ (8005cc4 <_ZN15CPantallaManual19MuestraTemperaturasEb+0x84>)
 8005c9e:	f7fd f949 	bl	8002f34 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelTemperaturas->Show();
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	334c      	adds	r3, #76	@ 0x4c
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4610      	mov	r0, r2
 8005cb6:	4798      	blx	r3
 8005cb8:	e000      	b.n	8005cbc <_ZN15CPantallaManual19MuestraTemperaturasEb+0x7c>
			return;
 8005cba:	bf00      	nop
}
 8005cbc:	3708      	adds	r7, #8
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	08014924 	.word	0x08014924

08005cc8 <_ZN15CPantallaManual16OnNivelAireEventEi>:

void CPantallaManual::OnNivelAireEvent(int aire)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
	NivelAire = aire;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
	Estacion->SetNivelAire(NivelAire);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	3314      	adds	r3, #20
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	f8d2 20e8 	ldr.w	r2, [r2, #232]	@ 0xe8
 8005cf2:	4611      	mov	r1, r2
 8005cf4:	4798      	blx	r3
}
 8005cf6:	bf00      	nop
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <_ZThn48_N15CPantallaManual16OnNivelAireEventEi>:
	CPantallaManual();
	virtual void Show();
	virtual void Refresca();

private:
	void OnNivelAireEvent(int aire);
 8005cfe:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005d02:	f7ff bfe1 	b.w	8005cc8 <_ZN15CPantallaManual16OnNivelAireEventEi>
	...

08005d08 <_ZN15CPantallaManual16MuestraNivelAireEb>:

void CPantallaManual::MuestraNivelAire(bool forzar)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	460b      	mov	r3, r1
 8005d12:	70fb      	strb	r3, [r7, #3]
	if(forzar==false)
 8005d14:	78fb      	ldrb	r3, [r7, #3]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d116      	bne.n	8005d48 <_ZN15CPantallaManual16MuestraNivelAireEb+0x40>
	{
		if(NivelAireAnterior==NivelAire && EsVisible()==true )
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d10b      	bne.n	8005d42 <_ZN15CPantallaManual16MuestraNivelAireEb+0x3a>
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3368      	adds	r3, #104	@ 0x68
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4610      	mov	r0, r2
 8005d36:	4798      	blx	r3
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d101      	bne.n	8005d42 <_ZN15CPantallaManual16MuestraNivelAireEb+0x3a>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e000      	b.n	8005d44 <_ZN15CPantallaManual16MuestraNivelAireEb+0x3c>
 8005d42:	2300      	movs	r3, #0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d129      	bne.n	8005d9c <_ZN15CPantallaManual16MuestraNivelAireEb+0x94>
			return;
	}
	NivelAireAnterior=NivelAire;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	Estacion->SetNivelAire(NivelAire);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	3314      	adds	r3, #20
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	f8d2 20e8 	ldr.w	r2, [r2, #232]	@ 0xe8
 8005d6c:	4611      	mov	r1, r2
 8005d6e:	4798      	blx	r3
	LabelAire2->SetTexto((char*)"%d", NivelAire);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	4909      	ldr	r1, [pc, #36]	@ (8005da4 <_ZN15CPantallaManual16MuestraNivelAireEb+0x9c>)
 8005d80:	f7fd f8d8 	bl	8002f34 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelAire2->Show();
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	334c      	adds	r3, #76	@ 0x4c
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4610      	mov	r0, r2
 8005d98:	4798      	blx	r3
 8005d9a:	e000      	b.n	8005d9e <_ZN15CPantallaManual16MuestraNivelAireEb+0x96>
			return;
 8005d9c:	bf00      	nop

}
 8005d9e:	3708      	adds	r7, #8
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	0801492c 	.word	0x0801492c

08005da8 <_ZN15CPantallaManual22OnTemperaturaRealEventEi>:

void CPantallaManual::OnTemperaturaRealEvent(int temperatura)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
}
 8005db2:	bf00      	nop
 8005db4:	370c      	adds	r7, #12
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <_ZThn48_N15CPantallaManual22OnTemperaturaRealEventEi>:
	virtual void OnTemperaturaRealEvent(int temperatura);
 8005dbe:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005dc2:	f7ff bff1 	b.w	8005da8 <_ZN15CPantallaManual22OnTemperaturaRealEventEi>

08005dc6 <_ZN15CPantallaManual19OnPerillaIncrementoEv>:

//eventos del Encoder
void CPantallaManual::OnPerillaIncremento()
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b082      	sub	sp, #8
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
	Estacion->IncrementaTemperatura();
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	3320      	adds	r3, #32
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4610      	mov	r0, r2
 8005de2:	4798      	blx	r3
	TemperaturaGuardada=false;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
}
 8005dec:	bf00      	nop
 8005dee:	3708      	adds	r7, #8
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <_ZThn48_N15CPantallaManual19OnPerillaIncrementoEv>:

	virtual void OnBotonUnoClickEvent();
	virtual void OnBotonDosClickEvent();
	virtual void OnBotonTresClickEvent();
protected:
	virtual void OnPerillaIncremento();
 8005df4:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005df8:	f7ff bfe5 	b.w	8005dc6 <_ZN15CPantallaManual19OnPerillaIncrementoEv>

08005dfc <_ZN15CPantallaManual19OnPerillaDecrementoEv>:

void CPantallaManual::OnPerillaDecremento()
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
	Estacion->DecrementaTemperatura();
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	3324      	adds	r3, #36	@ 0x24
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4610      	mov	r0, r2
 8005e18:	4798      	blx	r3
	TemperaturaGuardada=false;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
}
 8005e22:	bf00      	nop
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <_ZThn48_N15CPantallaManual19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 8005e2a:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005e2e:	f7ff bfe5 	b.w	8005dfc <_ZN15CPantallaManual19OnPerillaDecrementoEv>

08005e32 <_ZN15CPantallaManual8RefrescaEv>:

void CPantallaManual::Refresca()
{
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b082      	sub	sp, #8
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
	if(TemperaturaGuardada==false)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d105      	bne.n	8005e50 <_ZN15CPantallaManual8RefrescaEv+0x1e>
		GuardaTemperatura();
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	3398      	adds	r3, #152	@ 0x98
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	4798      	blx	r3
	MuestraInformacion(false);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	33a4      	adds	r3, #164	@ 0xa4
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2100      	movs	r1, #0
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	4798      	blx	r3
}
 8005e5e:	bf00      	nop
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
	...

08005e68 <_ZN15CPantallaManual24OnBotonPerillaClickEventEv>:
 void CPantallaManual::OnBotonPerillaClickEvent()
 {
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
	 ManejadorPantallas.MuestraMenuPrincipal();
 8005e70:	4803      	ldr	r0, [pc, #12]	@ (8005e80 <_ZN15CPantallaManual24OnBotonPerillaClickEventEv+0x18>)
 8005e72:	f7fd ffdd 	bl	8003e30 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>
 }
 8005e76:	bf00      	nop
 8005e78:	3708      	adds	r7, #8
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	2000025c 	.word	0x2000025c

08005e84 <_ZThn48_N15CPantallaManual24OnBotonPerillaClickEventEv>:
	virtual void OnBotonPerillaClickEvent();
 8005e84:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005e88:	f7ff bfee 	b.w	8005e68 <_ZN15CPantallaManual24OnBotonPerillaClickEventEv>

08005e8c <_ZN15CPantallaManual18MuestraInformacionEb>:
 void CPantallaManual::MuestraInformacion(bool forzar)
 {
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	460b      	mov	r3, r1
 8005e96:	70fb      	strb	r3, [r7, #3]
		LeeDatosEstacion();
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	339c      	adds	r3, #156	@ 0x9c
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	4798      	blx	r3
		MuestraTemperaturas(forzar);
 8005ea4:	78fb      	ldrb	r3, [r7, #3]
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f7ff fec9 	bl	8005c40 <_ZN15CPantallaManual19MuestraTemperaturasEb>
		MuestraEstado(forzar);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	33a0      	adds	r3, #160	@ 0xa0
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	78fa      	ldrb	r2, [r7, #3]
 8005eb8:	4611      	mov	r1, r2
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	4798      	blx	r3
		MuestraNivelAire(forzar);
 8005ebe:	78fb      	ldrb	r3, [r7, #3]
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f7ff ff20 	bl	8005d08 <_ZN15CPantallaManual16MuestraNivelAireEb>
		//marco como visible
		SetVisible(true);
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	336c      	adds	r3, #108	@ 0x6c
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2101      	movs	r1, #1
 8005ed4:	4610      	mov	r0, r2
 8005ed6:	4798      	blx	r3

 }
 8005ed8:	bf00      	nop
 8005eda:	3708      	adds	r7, #8
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <_ZN15CPantallaManual17GuardaTemperaturaEv>:
 void CPantallaManual::GuardaTemperatura()
 {
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 	uint16_t temperatura=Estacion->GetTemperatura();
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	3310      	adds	r3, #16
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4610      	mov	r0, r2
 8005efc:	4798      	blx	r3
 8005efe:	4603      	mov	r3, r0
 8005f00:	81fb      	strh	r3, [r7, #14]
 	int t= HAL_GetTick();
 8005f02:	f007 fcbd 	bl	800d880 <HAL_GetTick>
 8005f06:	4603      	mov	r3, r0
 8005f08:	60bb      	str	r3, [r7, #8]
 	if(t>tiempoescritura)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8005f10:	68ba      	ldr	r2, [r7, #8]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	dd0e      	ble.n	8005f34 <_ZN15CPantallaManual17GuardaTemperaturaEv+0x54>
 	{
 		Eprom.GuardaTemepraturaManual(temperatura);
 8005f16:	89fb      	ldrh	r3, [r7, #14]
 8005f18:	4619      	mov	r1, r3
 8005f1a:	4808      	ldr	r0, [pc, #32]	@ (8005f3c <_ZN15CPantallaManual17GuardaTemperaturaEv+0x5c>)
 8005f1c:	f7fb fb3e 	bl	800159c <_ZN6CEprom23GuardaTemepraturaManualEi>
 		TemperaturaGuardada=true;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 		tiempoescritura=t+1000;
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 	}

 }
 8005f34:	bf00      	nop
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	2000031c 	.word	0x2000031c

08005f40 <_ZN15CPantallaManual10LeeMemoriaEv>:
void CPantallaManual::LeeMemoria()
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]

 	uint16_t temperatura=Eprom.DameTemperaturaManual();
 8005f48:	480c      	ldr	r0, [pc, #48]	@ (8005f7c <_ZN15CPantallaManual10LeeMemoriaEv+0x3c>)
 8005f4a:	f7fb faeb 	bl	8001524 <_ZN6CEprom21DameTemperaturaManualEv>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	81fb      	strh	r3, [r7, #14]
	Estacion->SetTemperatura(temperatura);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	330c      	adds	r3, #12
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	89f9      	ldrh	r1, [r7, #14]
 8005f66:	4610      	mov	r0, r2
 8005f68:	4798      	blx	r3
	TemperaturaGuardada=true;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
}
 8005f72:	bf00      	nop
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	2000031c 	.word	0x2000031c

08005f80 <_ZN15CPantallaManual4ShowEv>:

 void CPantallaManual::Show()
 {
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 	CPantallaBase::Show();
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7fd fa56 	bl	800343c <_ZN13CPantallaBase4ShowEv>
 	LabelTemperatura->Show();
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	334c      	adds	r3, #76	@ 0x4c
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4610      	mov	r0, r2
 8005fa4:	4798      	blx	r3
 	LabelAire1->Show();
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	334c      	adds	r3, #76	@ 0x4c
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4610      	mov	r0, r2
 8005fba:	4798      	blx	r3
 	//leo la temperatura desde la memoria
 	LeeMemoria();
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7ff ffbf 	bl	8005f40 <_ZN15CPantallaManual10LeeMemoriaEv>
 	LeeDatosEstacion();
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	339c      	adds	r3, #156	@ 0x9c
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	4798      	blx	r3
 	MuestraInformacion(true);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	33a4      	adds	r3, #164	@ 0xa4
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2101      	movs	r1, #1
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	4798      	blx	r3
 }
 8005fdc:	bf00      	nop
 8005fde:	3708      	adds	r7, #8
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <_ZN15CPantallaManual21OnBotonTresClickEventEv>:
void CPantallaManual::OnBotonTresClickEvent()
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(3);
 8005fec:	2103      	movs	r1, #3
 8005fee:	4803      	ldr	r0, [pc, #12]	@ (8005ffc <_ZN15CPantallaManual21OnBotonTresClickEventEv+0x18>)
 8005ff0:	f7fd fffe 	bl	8003ff0 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 8005ff4:	bf00      	nop
 8005ff6:	3708      	adds	r7, #8
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	2000025c 	.word	0x2000025c

08006000 <_ZThn48_N15CPantallaManual21OnBotonTresClickEventEv>:
	virtual void OnBotonTresClickEvent();
 8006000:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8006004:	f7ff bfee 	b.w	8005fe4 <_ZN15CPantallaManual21OnBotonTresClickEventEv>

08006008 <_ZN15CPantallaManual20OnBotonUnoClickEventEv>:
void CPantallaManual::OnBotonUnoClickEvent()
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(1);
 8006010:	2101      	movs	r1, #1
 8006012:	4803      	ldr	r0, [pc, #12]	@ (8006020 <_ZN15CPantallaManual20OnBotonUnoClickEventEv+0x18>)
 8006014:	f7fd ffec 	bl	8003ff0 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 8006018:	bf00      	nop
 800601a:	3708      	adds	r7, #8
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	2000025c 	.word	0x2000025c

08006024 <_ZThn48_N15CPantallaManual20OnBotonUnoClickEventEv>:
	virtual void OnBotonUnoClickEvent();
 8006024:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8006028:	f7ff bfee 	b.w	8006008 <_ZN15CPantallaManual20OnBotonUnoClickEventEv>

0800602c <_ZN15CPantallaManual20OnBotonDosClickEventEv>:
void CPantallaManual::OnBotonDosClickEvent()
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(2);
 8006034:	2102      	movs	r1, #2
 8006036:	4803      	ldr	r0, [pc, #12]	@ (8006044 <_ZN15CPantallaManual20OnBotonDosClickEventEv+0x18>)
 8006038:	f7fd ffda 	bl	8003ff0 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 800603c:	bf00      	nop
 800603e:	3708      	adds	r7, #8
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	2000025c 	.word	0x2000025c

08006048 <_ZThn48_N15CPantallaManual20OnBotonDosClickEventEv>:
	virtual void OnBotonDosClickEvent();
 8006048:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800604c:	f7ff bfee 	b.w	800602c <_ZN15CPantallaManual20OnBotonDosClickEventEv>

08006050 <_ZN15CPantallaManual11SetEstacionEP13CEstacionBase>:
void CPantallaManual::SetEstacion(CEstacionBase *estacion)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
	CPantallaBase::SetEstacion(estacion);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6839      	ldr	r1, [r7, #0]
 800605e:	4618      	mov	r0, r3
 8006060:	f7fd fa07 	bl	8003472 <_ZN13CPantallaBase11SetEstacionEP13CEstacionBase>
	Estacion->ActivarCalefactor();
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	3334      	adds	r3, #52	@ 0x34
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4610      	mov	r0, r2
 8006078:	4798      	blx	r3
}
 800607a:	bf00      	nop
 800607c:	3708      	adds	r7, #8
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
	...

08006084 <_ZN16CPantallaMemoriaD1Ev>:
#include <EPROM/CEprom.hpp>

extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart1;

CPantallaMemoria::~CPantallaMemoria()
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	4a07      	ldr	r2, [pc, #28]	@ (80060ac <_ZN16CPantallaMemoriaD1Ev+0x28>)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	601a      	str	r2, [r3, #0]
 8006092:	4a07      	ldr	r2, [pc, #28]	@ (80060b0 <_ZN16CPantallaMemoriaD1Ev+0x2c>)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4618      	mov	r0, r3
 800609c:	f7ff fbde 	bl	800585c <_ZN15CPantallaManualD1Ev>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4618      	mov	r0, r3
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	08015464 	.word	0x08015464
 80060b0:	08015518 	.word	0x08015518

080060b4 <_ZThn48_N16CPantallaMemoriaD1Ev>:
public:
	virtual void OnPerillaIncremento();
	virtual void OnPerillaDecremento();
	CPantallaMemoria(CEstacionBase *estacion);
	CPantallaMemoria();
	virtual ~CPantallaMemoria();
 80060b4:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80060b8:	f7ff bfe4 	b.w	8006084 <_ZN16CPantallaMemoriaD1Ev>

080060bc <_ZN16CPantallaMemoriaD0Ev>:
CPantallaMemoria::~CPantallaMemoria()
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
}
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f7ff ffdd 	bl	8006084 <_ZN16CPantallaMemoriaD1Ev>
 80060ca:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f00b fd04 	bl	8011adc <_ZdlPvj>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4618      	mov	r0, r3
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <_ZThn48_N16CPantallaMemoriaD0Ev>:
 80060de:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80060e2:	f7ff bfeb 	b.w	80060bc <_ZN16CPantallaMemoriaD0Ev>
	...

080060e8 <_ZN16CPantallaMemoriaC1Ev>:


CPantallaMemoria::CPantallaMemoria() :
 80060e8:	b590      	push	{r4, r7, lr}
 80060ea:	b08d      	sub	sp, #52	@ 0x34
 80060ec:	af08      	add	r7, sp, #32
 80060ee:	6078      	str	r0, [r7, #4]
		CPantallaManual()
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7ff fbe2 	bl	80058bc <_ZN15CPantallaManualC1Ev>
 80060f8:	4a41      	ldr	r2, [pc, #260]	@ (8006200 <_ZN16CPantallaMemoriaC1Ev+0x118>)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	601a      	str	r2, [r3, #0]
 80060fe:	4a41      	ldr	r2, [pc, #260]	@ (8006204 <_ZN16CPantallaMemoriaC1Ev+0x11c>)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	631a      	str	r2, [r3, #48]	@ 0x30
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2205      	movs	r2, #5
 8006110:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
{
	LabelTitulo->SetTexto((char*)"MODO: MEMORIA");
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006120:	4939      	ldr	r1, [pc, #228]	@ (8006208 <_ZN16CPantallaMemoriaC1Ev+0x120>)
 8006122:	4618      	mov	r0, r3
 8006124:	f7fc ff06 	bl	8002f34 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelMemoria=new CEtiquetaTft( 5, 35, 50, 20, COLOR::BLACK,(char*)"Memoria: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8006128:	20a4      	movs	r0, #164	@ 0xa4
 800612a:	f00b fcd9 	bl	8011ae0 <_Znwj>
 800612e:	4603      	mov	r3, r0
 8006130:	461c      	mov	r4, r3
 8006132:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006136:	9306      	str	r3, [sp, #24]
 8006138:	2300      	movs	r3, #0
 800613a:	9305      	str	r3, [sp, #20]
 800613c:	2303      	movs	r3, #3
 800613e:	9304      	str	r3, [sp, #16]
 8006140:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006144:	9303      	str	r3, [sp, #12]
 8006146:	4b31      	ldr	r3, [pc, #196]	@ (800620c <_ZN16CPantallaMemoriaC1Ev+0x124>)
 8006148:	9302      	str	r3, [sp, #8]
 800614a:	2300      	movs	r3, #0
 800614c:	9301      	str	r3, [sp, #4]
 800614e:	2314      	movs	r3, #20
 8006150:	9300      	str	r3, [sp, #0]
 8006152:	2332      	movs	r3, #50	@ 0x32
 8006154:	2223      	movs	r2, #35	@ 0x23
 8006156:	2105      	movs	r1, #5
 8006158:	4620      	mov	r0, r4
 800615a:	f7fc feb1 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8c3 40f4 	str.w	r4, [r3, #244]	@ 0xf4
	LabelTemperatura->CambiaPosicion(5,65);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800616a:	4618      	mov	r0, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	3350      	adds	r3, #80	@ 0x50
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2241      	movs	r2, #65	@ 0x41
 800617a:	2105      	movs	r1, #5
 800617c:	4798      	blx	r3
	int centroX = DameCentroX();
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4618      	mov	r0, r3
 8006182:	f7fd fb01 	bl	8003788 <_ZN14CRectanguloTft11DameCentroXEv>
 8006186:	60f8      	str	r0, [r7, #12]
	LabelTemperaturas->CambiaPosicion(centroX - 150 / 2, 95);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800618e:	4618      	mov	r0, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	3350      	adds	r3, #80	@ 0x50
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	f1a2 014b 	sub.w	r1, r2, #75	@ 0x4b
 80061a2:	225f      	movs	r2, #95	@ 0x5f
 80061a4:	4798      	blx	r3
	LabelAire1->CambiaPosicion(5, 135);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80061ac:	4618      	mov	r0, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	3350      	adds	r3, #80	@ 0x50
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2287      	movs	r2, #135	@ 0x87
 80061bc:	2105      	movs	r1, #5
 80061be:	4798      	blx	r3
	LabelAire2->CambiaPosicion(110, 135);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80061c6:	4618      	mov	r0, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	3350      	adds	r3, #80	@ 0x50
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2287      	movs	r2, #135	@ 0x87
 80061d6:	216e      	movs	r1, #110	@ 0x6e
 80061d8:	4798      	blx	r3
	LabelEstado->CambiaPosicion(5, 175);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80061e0:	4618      	mov	r0, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	3350      	adds	r3, #80	@ 0x50
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	22af      	movs	r2, #175	@ 0xaf
 80061f0:	2105      	movs	r1, #5
 80061f2:	4798      	blx	r3

}
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4618      	mov	r0, r3
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd90      	pop	{r4, r7, pc}
 80061fe:	bf00      	nop
 8006200:	08015464 	.word	0x08015464
 8006204:	08015518 	.word	0x08015518
 8006208:	08014930 	.word	0x08014930
 800620c:	08014940 	.word	0x08014940

08006210 <_ZN16CPantallaMemoria17GuardaTemperaturaEv>:


 void CPantallaMemoria::GuardaTemperatura()
 {
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 }
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <_ZN16CPantallaMemoria4ShowEv>:


 void CPantallaMemoria::Show()
 {
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
	 CPantallaManual::Show();
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4618      	mov	r0, r3
 8006230:	f7ff fea6 	bl	8005f80 <_ZN15CPantallaManual4ShowEv>
 	//leo la temperatura desde la memoria
	LabelMemoria->SetTexto((char*)"Memoria: %d", NumeroMemoria);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 00f4 	ldr.w	r0, [r3, #244]	@ 0xf4
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8006240:	461a      	mov	r2, r3
 8006242:	4916      	ldr	r1, [pc, #88]	@ (800629c <_ZN16CPantallaMemoria4ShowEv+0x78>)
 8006244:	f7fc fe76 	bl	8002f34 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelMemoria->Show();
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	334c      	adds	r3, #76	@ 0x4c
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4610      	mov	r0, r2
 800625c:	4798      	blx	r3
	LeeDatosMemoria();
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f840 	bl	80062e4 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv>
	Estacion->SetTemperatura(Temperatura);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	330c      	adds	r3, #12
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	f8d2 20d0 	ldr.w	r2, [r2, #208]	@ 0xd0
 800627c:	4611      	mov	r1, r2
 800627e:	4798      	blx	r3
	VelocidadAireInicialPotenciometro=ManejadorControles->GetNivelAire();
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006286:	4618      	mov	r0, r3
 8006288:	f004 f8df 	bl	800a44a <_ZN19CManejadorControles12GetNivelAireEv>
 800628c:	4602      	mov	r2, r0
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
 }
 8006294:	bf00      	nop
 8006296:	3708      	adds	r7, #8
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	0801494c 	.word	0x0801494c

080062a0 <_ZN16CPantallaMemoria10SetMemoriaEi>:


void CPantallaMemoria::SetMemoria(int numeroMemoria)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
	NumeroMemoria=numeroMemoria;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	683a      	ldr	r2, [r7, #0]
 80062ae:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
//	DireccionMemoria=DameDireccionMemoria();
}
 80062b2:	bf00      	nop
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
	...

080062c0 <_ZN16CPantallaMemoria23OnBotonCuatroClickEventEv>:


void CPantallaMemoria::OnBotonCuatroClickEvent()
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaManual();
 80062c8:	4803      	ldr	r0, [pc, #12]	@ (80062d8 <_ZN16CPantallaMemoria23OnBotonCuatroClickEventEv+0x18>)
 80062ca:	f7fd fd95 	bl	8003df8 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
}
 80062ce:	bf00      	nop
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	2000025c 	.word	0x2000025c

080062dc <_ZThn48_N16CPantallaMemoria23OnBotonCuatroClickEventEv>:
	virtual void OnBotonCuatroClickEvent();
 80062dc:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80062e0:	f7ff bfee 	b.w	80062c0 <_ZN16CPantallaMemoria23OnBotonCuatroClickEventEv>

080062e4 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv>:

void CPantallaMemoria::LeeDatosMemoria()
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]

	switch(NumeroMemoria)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80062f2:	2b03      	cmp	r3, #3
 80062f4:	d024      	beq.n	8006340 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x5c>
 80062f6:	2b03      	cmp	r3, #3
 80062f8:	dc31      	bgt.n	800635e <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x7a>
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d002      	beq.n	8006304 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x20>
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d00f      	beq.n	8006322 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x3e>
		Temperatura=Eprom.DameTemperatuarMemoria3();
		VelocidadAire=Eprom.DameVelocidadMemoria3();
		break;
	}

}
 8006302:	e02c      	b.n	800635e <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x7a>
		Temperatura=Eprom.DameTemperatuarMemoria1();
 8006304:	4818      	ldr	r0, [pc, #96]	@ (8006368 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x84>)
 8006306:	f7fb f9db 	bl	80016c0 <_ZN6CEprom23DameTemperatuarMemoria1Ev>
 800630a:	4602      	mov	r2, r0
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
		VelocidadAire=Eprom.DameVelocidadMemoria1();
 8006312:	4815      	ldr	r0, [pc, #84]	@ (8006368 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x84>)
 8006314:	f7fb f9e6 	bl	80016e4 <_ZN6CEprom21DameVelocidadMemoria1Ev>
 8006318:	4602      	mov	r2, r0
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
		break;
 8006320:	e01d      	b.n	800635e <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x7a>
		Temperatura=Eprom.DameTemperatuarMemoria2();
 8006322:	4811      	ldr	r0, [pc, #68]	@ (8006368 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x84>)
 8006324:	f7fb fa20 	bl	8001768 <_ZN6CEprom23DameTemperatuarMemoria2Ev>
 8006328:	4602      	mov	r2, r0
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
		VelocidadAire=Eprom.DameVelocidadMemoria2();
 8006330:	480d      	ldr	r0, [pc, #52]	@ (8006368 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x84>)
 8006332:	f7fb fa2b 	bl	800178c <_ZN6CEprom21DameVelocidadMemoria2Ev>
 8006336:	4602      	mov	r2, r0
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
		break;
 800633e:	e00e      	b.n	800635e <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x7a>
		Temperatura=Eprom.DameTemperatuarMemoria3();
 8006340:	4809      	ldr	r0, [pc, #36]	@ (8006368 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x84>)
 8006342:	f7fb fa65 	bl	8001810 <_ZN6CEprom23DameTemperatuarMemoria3Ev>
 8006346:	4602      	mov	r2, r0
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
		VelocidadAire=Eprom.DameVelocidadMemoria3();
 800634e:	4806      	ldr	r0, [pc, #24]	@ (8006368 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x84>)
 8006350:	f7fb fa70 	bl	8001834 <_ZN6CEprom21DameVelocidadMemoria3Ev>
 8006354:	4602      	mov	r2, r0
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
		break;
 800635c:	bf00      	nop
}
 800635e:	bf00      	nop
 8006360:	3708      	adds	r7, #8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	2000031c 	.word	0x2000031c

0800636c <_ZN16CPantallaMemoria16LeeDatosEstacionEv>:
void CPantallaMemoria::LeeDatosEstacion()
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
	CPantallaManual::LeeDatosEstacion();
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4618      	mov	r0, r3
 8006378:	f7ff fc10 	bl	8005b9c <_ZN15CPantallaManual16LeeDatosEstacionEv>
	int velocidad=ManejadorControles->GetNivelAire();
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006382:	4618      	mov	r0, r3
 8006384:	f004 f861 	bl	800a44a <_ZN19CManejadorControles12GetNivelAireEv>
 8006388:	60f8      	str	r0, [r7, #12]
	if(VelocidadAireInicialPotenciometro>velocidad+DiferenciaAire ||VelocidadAireInicialPotenciometro<velocidad-DiferenciaAire)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 10fc 	ldr.w	r1, [r3, #252]	@ 0xfc
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	440b      	add	r3, r1
 800639a:	429a      	cmp	r2, r3
 800639c:	dc09      	bgt.n	80063b2 <_ZN16CPantallaMemoria16LeeDatosEstacionEv+0x46>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80063aa:	68f9      	ldr	r1, [r7, #12]
 80063ac:	1acb      	subs	r3, r1, r3
 80063ae:	429a      	cmp	r2, r3
 80063b0:	da08      	bge.n	80063c4 <_ZN16CPantallaMemoria16LeeDatosEstacionEv+0x58>
	{
		NivelAire =velocidad;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
		CambioNIvelAire=true;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
 80063c2:	e00a      	b.n	80063da <_ZN16CPantallaMemoria16LeeDatosEstacionEv+0x6e>
	}
	else
	{
		NivelAire =VelocidadAire;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
		CambioNIvelAire=false;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
	}
}
 80063d8:	bf00      	nop
 80063da:	bf00      	nop
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
	...

080063e4 <_ZN16CPantallaMemoria19OnPerillaIncrementoEv>:
void CPantallaMemoria::OnPerillaIncremento()
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaManual();
 80063ec:	4803      	ldr	r0, [pc, #12]	@ (80063fc <_ZN16CPantallaMemoria19OnPerillaIncrementoEv+0x18>)
 80063ee:	f7fd fd03 	bl	8003df8 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
}
 80063f2:	bf00      	nop
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	2000025c 	.word	0x2000025c

08006400 <_ZThn48_N16CPantallaMemoria19OnPerillaIncrementoEv>:
	virtual void OnPerillaIncremento();
 8006400:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8006404:	f7ff bfee 	b.w	80063e4 <_ZN16CPantallaMemoria19OnPerillaIncrementoEv>

08006408 <_ZN16CPantallaMemoria19OnPerillaDecrementoEv>:
void CPantallaMemoria::OnPerillaDecremento()
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaManual();
 8006410:	4803      	ldr	r0, [pc, #12]	@ (8006420 <_ZN16CPantallaMemoria19OnPerillaDecrementoEv+0x18>)
 8006412:	f7fd fcf1 	bl	8003df8 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
}
 8006416:	bf00      	nop
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	2000025c 	.word	0x2000025c

08006424 <_ZThn48_N16CPantallaMemoria19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 8006424:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8006428:	f7ff bfee 	b.w	8006408 <_ZN16CPantallaMemoria19OnPerillaDecrementoEv>

0800642c <_ZN16CPantallaMemoria18MuestraInformacionEb>:
void CPantallaMemoria::MuestraInformacion(bool forzar)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	460b      	mov	r3, r1
 8006436:	70fb      	strb	r3, [r7, #3]
		LeeDatosEstacion();
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	339c      	adds	r3, #156	@ 0x9c
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	4798      	blx	r3
		if(CambioNIvelAire==true)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 800644a:	2b01      	cmp	r3, #1
 800644c:	d103      	bne.n	8006456 <_ZN16CPantallaMemoria18MuestraInformacionEb+0x2a>
		{
			ManejadorPantallas.MuestraPantallaManual();
 800644e:	4811      	ldr	r0, [pc, #68]	@ (8006494 <_ZN16CPantallaMemoria18MuestraInformacionEb+0x68>)
 8006450:	f7fd fcd2 	bl	8003df8 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
			return;
 8006454:	e01b      	b.n	800648e <_ZN16CPantallaMemoria18MuestraInformacionEb+0x62>
		}
		MuestraTemperaturas(forzar);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	78fa      	ldrb	r2, [r7, #3]
 800645a:	4611      	mov	r1, r2
 800645c:	4618      	mov	r0, r3
 800645e:	f7ff fbef 	bl	8005c40 <_ZN15CPantallaManual19MuestraTemperaturasEb>
		MuestraEstado(forzar);
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	33a0      	adds	r3, #160	@ 0xa0
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	78f9      	ldrb	r1, [r7, #3]
 800646e:	4610      	mov	r0, r2
 8006470:	4798      	blx	r3
		MuestraNivelAire(forzar);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	78fa      	ldrb	r2, [r7, #3]
 8006476:	4611      	mov	r1, r2
 8006478:	4618      	mov	r0, r3
 800647a:	f7ff fc45 	bl	8005d08 <_ZN15CPantallaManual16MuestraNivelAireEb>
		//marco como visible
		SetVisible(true);
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	336c      	adds	r3, #108	@ 0x6c
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2101      	movs	r1, #1
 800648a:	4610      	mov	r0, r2
 800648c:	4798      	blx	r3
}
 800648e:	3708      	adds	r7, #8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	2000025c 	.word	0x2000025c

08006498 <_ZN16CPantallaMemoria11SetEstacionEP13CEstacionBase>:

void CPantallaMemoria::SetEstacion(CEstacionBase *estacion)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
	CPantallaBase::SetEstacion(estacion);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6839      	ldr	r1, [r7, #0]
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7fc ffe3 	bl	8003472 <_ZN13CPantallaBase11SetEstacionEP13CEstacionBase>
	Estacion->ActivarCalefactor();
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	3334      	adds	r3, #52	@ 0x34
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4610      	mov	r0, r2
 80064c0:	4798      	blx	r3
}
 80064c2:	bf00      	nop
 80064c4:	3708      	adds	r7, #8
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
	...

080064cc <_ZN17CPantallaMenuBaseC1EPc>:
 *      Author: W10
 */

#include <GUI/PantallaMenuBase/CPantallaMenuBase.hpp>

CPantallaMenuBase::CPantallaMenuBase(char *titulo):
 80064cc:	b590      	push	{r4, r7, lr}
 80064ce:	b087      	sub	sp, #28
 80064d0:	af04      	add	r7, sp, #16
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
	CPantallaBase(1,titulo)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	683a      	ldr	r2, [r7, #0]
 80064da:	2101      	movs	r1, #1
 80064dc:	4618      	mov	r0, r3
 80064de:	f7fc ff3b 	bl	8003358 <_ZN13CPantallaBaseC1EiPc>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	33ac      	adds	r3, #172	@ 0xac
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7fd ff0c 	bl	8004304 <_ZN20CManejadorEventoMenuC1Ev>
 80064ec:	4a1e      	ldr	r2, [pc, #120]	@ (8006568 <_ZN17CPantallaMenuBaseC1EPc+0x9c>)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	601a      	str	r2, [r3, #0]
 80064f2:	4a1e      	ldr	r2, [pc, #120]	@ (800656c <_ZN17CPantallaMenuBaseC1EPc+0xa0>)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80064f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006570 <_ZN17CPantallaMenuBaseC1EPc+0xa4>)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

{
	// TODO Auto-generated constructor stub
	Menu=new CMenu(4,30,310, 210,COLOR::WHITE,1, COLOR::RED);
 8006500:	2080      	movs	r0, #128	@ 0x80
 8006502:	f00b faed 	bl	8011ae0 <_Znwj>
 8006506:	4603      	mov	r3, r0
 8006508:	461c      	mov	r4, r3
 800650a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800650e:	9303      	str	r3, [sp, #12]
 8006510:	2301      	movs	r3, #1
 8006512:	9302      	str	r3, [sp, #8]
 8006514:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006518:	9301      	str	r3, [sp, #4]
 800651a:	23d2      	movs	r3, #210	@ 0xd2
 800651c:	9300      	str	r3, [sp, #0]
 800651e:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8006522:	221e      	movs	r2, #30
 8006524:	2104      	movs	r1, #4
 8006526:	4620      	mov	r0, r4
 8006528:	f7fd ff28 	bl	800437c <_ZN5CMenuC1Eiiiiiii>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8c3 40b0 	str.w	r4, [r3, #176]	@ 0xb0
	Menu->AsignaManejadorEventosMenu(this);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	33ac      	adds	r3, #172	@ 0xac
 800653c:	4619      	mov	r1, r3
 800653e:	4610      	mov	r0, r2
 8006540:	f7fe f9b1 	bl	80048a6 <_ZN5CMenu26AsignaManejadorEventosMenuEP20CManejadorEventoMenu>
	Menu->AsignaColoresItems(COLOR::BLACK, 0X776F, COLOR::WHITE, COLOR::BLACK);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 800654a:	2300      	movs	r3, #0
 800654c:	9300      	str	r3, [sp, #0]
 800654e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006552:	f247 726f 	movw	r2, #30575	@ 0x776f
 8006556:	2100      	movs	r1, #0
 8006558:	f7fd ff89 	bl	800446e <_ZN5CMenu18AsignaColoresItemsEiiii>

}
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4618      	mov	r0, r3
 8006560:	370c      	adds	r7, #12
 8006562:	46bd      	mov	sp, r7
 8006564:	bd90      	pop	{r4, r7, pc}
 8006566:	bf00      	nop
 8006568:	0801554c 	.word	0x0801554c
 800656c:	080155e4 	.word	0x080155e4
 8006570:	08015618 	.word	0x08015618

08006574 <_ZN17CPantallaMenuBaseD1Ev>:

CPantallaMenuBase::~CPantallaMenuBase()
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	4a0b      	ldr	r2, [pc, #44]	@ (80065ac <_ZN17CPantallaMenuBaseD1Ev+0x38>)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	601a      	str	r2, [r3, #0]
 8006582:	4a0b      	ldr	r2, [pc, #44]	@ (80065b0 <_ZN17CPantallaMenuBaseD1Ev+0x3c>)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	631a      	str	r2, [r3, #48]	@ 0x30
 8006588:	4a0a      	ldr	r2, [pc, #40]	@ (80065b4 <_ZN17CPantallaMenuBaseD1Ev+0x40>)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	// TODO Auto-generated destructor stub
}
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	33ac      	adds	r3, #172	@ 0xac
 8006594:	4618      	mov	r0, r3
 8006596:	f7fd fec5 	bl	8004324 <_ZN20CManejadorEventoMenuD1Ev>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4618      	mov	r0, r3
 800659e:	f7fc fea7 	bl	80032f0 <_ZN13CPantallaBaseD1Ev>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4618      	mov	r0, r3
 80065a6:	3708      	adds	r7, #8
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	0801554c 	.word	0x0801554c
 80065b0:	080155e4 	.word	0x080155e4
 80065b4:	08015618 	.word	0x08015618

080065b8 <_ZThn48_N17CPantallaMenuBaseD1Ev>:
protected:
	CMenu* Menu;

public:
	CPantallaMenuBase(char *titulo);
	virtual ~CPantallaMenuBase();
 80065b8:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80065bc:	f7ff bfda 	b.w	8006574 <_ZN17CPantallaMenuBaseD1Ev>

080065c0 <_ZThn172_N17CPantallaMenuBaseD1Ev>:
 80065c0:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 80065c4:	f7ff bfd6 	b.w	8006574 <_ZN17CPantallaMenuBaseD1Ev>

080065c8 <_ZN17CPantallaMenuBaseD0Ev>:
CPantallaMenuBase::~CPantallaMenuBase()
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
}
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7ff ffcf 	bl	8006574 <_ZN17CPantallaMenuBaseD1Ev>
 80065d6:	21b4      	movs	r1, #180	@ 0xb4
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f00b fa7f 	bl	8011adc <_ZdlPvj>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4618      	mov	r0, r3
 80065e2:	3708      	adds	r7, #8
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <_ZThn172_N17CPantallaMenuBaseD0Ev>:
 80065e8:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 80065ec:	f7ff bfec 	b.w	80065c8 <_ZN17CPantallaMenuBaseD0Ev>

080065f0 <_ZThn48_N17CPantallaMenuBaseD0Ev>:
 80065f0:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80065f4:	f7ff bfe8 	b.w	80065c8 <_ZN17CPantallaMenuBaseD0Ev>

080065f8 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>:

void CPantallaMenuBase::AgregaMenuItem(char *texto, int Opcion)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]
	Menu->AgregaItem(texto, Opcion);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 800660a:	2300      	movs	r3, #0
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	68b9      	ldr	r1, [r7, #8]
 8006610:	f7fd ff90 	bl	8004534 <_ZN5CMenu10AgregaItemEPcib>
}
 8006614:	bf00      	nop
 8006616:	3710      	adds	r7, #16
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <_ZN17CPantallaMenuBase19OnPerillaIncrementoEv>:
void CPantallaMenuBase::OnPerillaIncremento()
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
	Menu->OnSeleccionaSiguiente();
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800662a:	4618      	mov	r0, r3
 800662c:	f7fd ffea 	bl	8004604 <_ZN5CMenu21OnSeleccionaSiguienteEv>
}
 8006630:	bf00      	nop
 8006632:	3708      	adds	r7, #8
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <_ZThn48_N17CPantallaMenuBase19OnPerillaIncrementoEv>:
	void AgregaMenuItem(char *texto, int Opcion);
	virtual void AgregaMenuItem(char *texto, int Opcion, int x, int y, int ancho,int alto);
	virtual void AgregaMenuItem(char *texto, int Opcion, int x, int y, int ancho,int alto,int colorFondo, int colorTexto);
	virtual void OnPerillaIncremento();
 8006638:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800663c:	f7ff bfee 	b.w	800661c <_ZN17CPantallaMenuBase19OnPerillaIncrementoEv>

08006640 <_ZN17CPantallaMenuBase19OnPerillaDecrementoEv>:
void CPantallaMenuBase::OnPerillaDecremento()
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
	Menu->OnSeleccionaAnterior();
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800664e:	4618      	mov	r0, r3
 8006650:	f7fe f826 	bl	80046a0 <_ZN5CMenu20OnSeleccionaAnteriorEv>
}
 8006654:	bf00      	nop
 8006656:	3708      	adds	r7, #8
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <_ZThn48_N17CPantallaMenuBase19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 800665c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8006660:	f7ff bfee 	b.w	8006640 <_ZN17CPantallaMenuBase19OnPerillaDecrementoEv>

08006664 <_ZN17CPantallaMenuBase24OnBotonPerillaClickEventEv>:
void CPantallaMenuBase::OnBotonPerillaClickEvent()
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
	Menu->OnClickSeleccionado();
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006672:	4618      	mov	r0, r3
 8006674:	f7fe f87f 	bl	8004776 <_ZN5CMenu19OnClickSeleccionadoEv>
}
 8006678:	bf00      	nop
 800667a:	3708      	adds	r7, #8
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <_ZThn48_N17CPantallaMenuBase24OnBotonPerillaClickEventEv>:
	virtual void OnBotonPerillaClickEvent();
 8006680:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8006684:	f7ff bfee 	b.w	8006664 <_ZN17CPantallaMenuBase24OnBotonPerillaClickEventEv>

08006688 <_ZN17CPantallaMenuBase4ShowEv>:
void CPantallaMenuBase::Show()
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
	CPantallaBase::Show();
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4618      	mov	r0, r3
 8006694:	f7fc fed2 	bl	800343c <_ZN13CPantallaBase4ShowEv>
	Menu->Show();
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	334c      	adds	r3, #76	@ 0x4c
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4610      	mov	r0, r2
 80066ac:	4798      	blx	r3
	SetVisible(true);
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	336c      	adds	r3, #108	@ 0x6c
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2101      	movs	r1, #1
 80066ba:	4610      	mov	r0, r2
 80066bc:	4798      	blx	r3
}
 80066be:	bf00      	nop
 80066c0:	3708      	adds	r7, #8
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <_ZN17CPantallaMenuBase8RefrescaEv>:
void CPantallaMenuBase::Refresca()
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b082      	sub	sp, #8
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
	if(EsVisible()==false)
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	3368      	adds	r3, #104	@ 0x68
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4610      	mov	r0, r2
 80066da:	4798      	blx	r3
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	bf0c      	ite	eq
 80066e2:	2301      	moveq	r3, #1
 80066e4:	2300      	movne	r3, #0
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d005      	beq.n	80066f8 <_ZN17CPantallaMenuBase8RefrescaEv+0x32>
		Show();
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	334c      	adds	r3, #76	@ 0x4c
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	4798      	blx	r3
}
 80066f8:	bf00      	nop
 80066fa:	3708      	adds	r7, #8
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>:
void CPantallaMenuBase::AgregaMenuItem(char *texto, int Opcion, int x, int y,int ancho,int alto)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b088      	sub	sp, #32
 8006704:	af04      	add	r7, sp, #16
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
 800670c:	603b      	str	r3, [r7, #0]
	Menu->AgregaItem(texto, Opcion,x,y,ancho,alto);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8006714:	2300      	movs	r3, #0
 8006716:	9303      	str	r3, [sp, #12]
 8006718:	6a3b      	ldr	r3, [r7, #32]
 800671a:	9302      	str	r3, [sp, #8]
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	9301      	str	r3, [sp, #4]
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	9300      	str	r3, [sp, #0]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	68b9      	ldr	r1, [r7, #8]
 800672a:	f7fe f8ca 	bl	80048c2 <_ZN5CMenu10AgregaItemEPciiiiib>

}
 800672e:	bf00      	nop
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiiiii>:
void CPantallaMenuBase::AgregaMenuItem(char *texto, int Opcion, int x, int y, int ancho,int alto,int colorFondo, int colorTexto)
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b08a      	sub	sp, #40	@ 0x28
 800673a:	af06      	add	r7, sp, #24
 800673c:	60f8      	str	r0, [r7, #12]
 800673e:	60b9      	str	r1, [r7, #8]
 8006740:	607a      	str	r2, [r7, #4]
 8006742:	603b      	str	r3, [r7, #0]
	Menu->AgregaItem(texto, Opcion,x,y,ancho,alto,colorFondo,colorTexto);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 800674a:	2300      	movs	r3, #0
 800674c:	9305      	str	r3, [sp, #20]
 800674e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006750:	9304      	str	r3, [sp, #16]
 8006752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006754:	9303      	str	r3, [sp, #12]
 8006756:	6a3b      	ldr	r3, [r7, #32]
 8006758:	9302      	str	r3, [sp, #8]
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	9301      	str	r3, [sp, #4]
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	68b9      	ldr	r1, [r7, #8]
 8006768:	f7fe f93d 	bl	80049e6 <_ZN5CMenu10AgregaItemEPciiiiiiib>

}
 800676c:	bf00      	nop
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <_ZN17CPantallaMenuBase9BorraMenuEv>:
void CPantallaMenuBase::BorraMenu()
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
	Menu->BorrarItemns();
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006782:	4618      	mov	r0, r3
 8006784:	f7fe f9af 	bl	8004ae6 <_ZN5CMenu12BorrarItemnsEv>
}
 8006788:	bf00      	nop
 800678a:	3708      	adds	r7, #8
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <_ZN14CMenuPrincipalC1Ev>:
#include "GUI/Menu/CMenuItem.hpp"
#include "GUI/CEtiquetaTft.hpp"
#include "GUI/Menu/CMenu.hpp"
#include "string.h"

CMenuPrincipal::CMenuPrincipal():
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
	CPantallaMenuBase((char*) " Menu Principal")
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	491b      	ldr	r1, [pc, #108]	@ (8006808 <_ZN14CMenuPrincipalC1Ev+0x78>)
 800679c:	4618      	mov	r0, r3
 800679e:	f7ff fe95 	bl	80064cc <_ZN17CPantallaMenuBaseC1EPc>
 80067a2:	4a1a      	ldr	r2, [pc, #104]	@ (800680c <_ZN14CMenuPrincipalC1Ev+0x7c>)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	601a      	str	r2, [r3, #0]
 80067a8:	4a19      	ldr	r2, [pc, #100]	@ (8006810 <_ZN14CMenuPrincipalC1Ev+0x80>)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80067ae:	4a19      	ldr	r2, [pc, #100]	@ (8006814 <_ZN14CMenuPrincipalC1Ev+0x84>)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	AgregaMenuItem((char*)"Conf Memoria 1", MENU_PRINCIPAL::MENU_MEMORIA_1);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	4917      	ldr	r1, [pc, #92]	@ (8006818 <_ZN14CMenuPrincipalC1Ev+0x88>)
 80067bc:	4618      	mov	r0, r3
 80067be:	f7ff ff1b 	bl	80065f8 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"Conf Memoria 2",(int)MENU_PRINCIPAL::MENU_MEMORIA_2);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2202      	movs	r2, #2
 80067c6:	4915      	ldr	r1, [pc, #84]	@ (800681c <_ZN14CMenuPrincipalC1Ev+0x8c>)
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7ff ff15 	bl	80065f8 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"Conf Memoria 3", (int)MENU_PRINCIPAL::MENU_MEMORIA_3);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2203      	movs	r2, #3
 80067d2:	4913      	ldr	r1, [pc, #76]	@ (8006820 <_ZN14CMenuPrincipalC1Ev+0x90>)
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7ff ff0f 	bl	80065f8 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"Calibrar", (int)MENU_PRINCIPAL::MENU_CALIBRAR);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2205      	movs	r2, #5
 80067de:	4911      	ldr	r1, [pc, #68]	@ (8006824 <_ZN14CMenuPrincipalC1Ev+0x94>)
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7ff ff09 	bl	80065f8 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"Rampa", (int)MENU_PRINCIPAL::MENU_RAMPA);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2204      	movs	r2, #4
 80067ea:	490f      	ldr	r1, [pc, #60]	@ (8006828 <_ZN14CMenuPrincipalC1Ev+0x98>)
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7ff ff03 	bl	80065f8 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"Salir", MENU_SALIR);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	490d      	ldr	r1, [pc, #52]	@ (800682c <_ZN14CMenuPrincipalC1Ev+0x9c>)
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7ff fefd 	bl	80065f8 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
}
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4618      	mov	r0, r3
 8006802:	3708      	adds	r7, #8
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	08014958 	.word	0x08014958
 800680c:	0801562c 	.word	0x0801562c
 8006810:	080156d8 	.word	0x080156d8
 8006814:	0801570c 	.word	0x0801570c
 8006818:	08014968 	.word	0x08014968
 800681c:	08014978 	.word	0x08014978
 8006820:	08014988 	.word	0x08014988
 8006824:	08014998 	.word	0x08014998
 8006828:	080149a4 	.word	0x080149a4
 800682c:	080149ac 	.word	0x080149ac

08006830 <_ZN14CMenuPrincipalD1Ev>:

CMenuPrincipal::~CMenuPrincipal()
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	4a09      	ldr	r2, [pc, #36]	@ (8006860 <_ZN14CMenuPrincipalD1Ev+0x30>)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	601a      	str	r2, [r3, #0]
 800683e:	4a09      	ldr	r2, [pc, #36]	@ (8006864 <_ZN14CMenuPrincipalD1Ev+0x34>)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	631a      	str	r2, [r3, #48]	@ 0x30
 8006844:	4a08      	ldr	r2, [pc, #32]	@ (8006868 <_ZN14CMenuPrincipalD1Ev+0x38>)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	// TODO Auto-generated destructor stub
}
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4618      	mov	r0, r3
 8006850:	f7ff fe90 	bl	8006574 <_ZN17CPantallaMenuBaseD1Ev>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4618      	mov	r0, r3
 8006858:	3708      	adds	r7, #8
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	0801562c 	.word	0x0801562c
 8006864:	080156d8 	.word	0x080156d8
 8006868:	0801570c 	.word	0x0801570c

0800686c <_ZThn48_N14CMenuPrincipalD1Ev>:
	CEstacionBase *Estacion;
	CMenuItem* item1,*item2;

public:
	CMenuPrincipal();
	virtual ~CMenuPrincipal();
 800686c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8006870:	f7ff bfde 	b.w	8006830 <_ZN14CMenuPrincipalD1Ev>

08006874 <_ZThn172_N14CMenuPrincipalD1Ev>:
 8006874:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8006878:	f7ff bfda 	b.w	8006830 <_ZN14CMenuPrincipalD1Ev>

0800687c <_ZN14CMenuPrincipalD0Ev>:
CMenuPrincipal::~CMenuPrincipal()
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
}
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f7ff ffd3 	bl	8006830 <_ZN14CMenuPrincipalD1Ev>
 800688a:	21c0      	movs	r1, #192	@ 0xc0
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f00b f925 	bl	8011adc <_ZdlPvj>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4618      	mov	r0, r3
 8006896:	3708      	adds	r7, #8
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <_ZThn172_N14CMenuPrincipalD0Ev>:
 800689c:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 80068a0:	f7ff bfec 	b.w	800687c <_ZN14CMenuPrincipalD0Ev>

080068a4 <_ZThn48_N14CMenuPrincipalD0Ev>:
 80068a4:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80068a8:	f7ff bfe8 	b.w	800687c <_ZN14CMenuPrincipalD0Ev>

080068ac <_ZN14CMenuPrincipal11OnMenuEventEi>:
void CMenuPrincipal::OnMenuEvent(int identificador)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
	switch(identificador)
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	2b05      	cmp	r3, #5
 80068ba:	d820      	bhi.n	80068fe <_ZN14CMenuPrincipal11OnMenuEventEi+0x52>
 80068bc:	a201      	add	r2, pc, #4	@ (adr r2, 80068c4 <_ZN14CMenuPrincipal11OnMenuEventEi+0x18>)
 80068be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c2:	bf00      	nop
 80068c4:	080068dd 	.word	0x080068dd
 80068c8:	080068e5 	.word	0x080068e5
 80068cc:	080068e5 	.word	0x080068e5
 80068d0:	080068e5 	.word	0x080068e5
 80068d4:	080068f7 	.word	0x080068f7
 80068d8:	080068ef 	.word	0x080068ef
	{
	case MENU_PRINCIPAL::MENU_SALIR:
		ManejadorPantallas.MuestraPantallaManual();
 80068dc:	480a      	ldr	r0, [pc, #40]	@ (8006908 <_ZN14CMenuPrincipal11OnMenuEventEi+0x5c>)
 80068de:	f7fd fa8b 	bl	8003df8 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
		break;
 80068e2:	e00c      	b.n	80068fe <_ZN14CMenuPrincipal11OnMenuEventEi+0x52>
	case MENU_PRINCIPAL::MENU_MEMORIA_1:
	case MENU_PRINCIPAL::MENU_MEMORIA_2:
	case MENU_PRINCIPAL::MENU_MEMORIA_3:
		ManejadorPantallas.MuestraPantallaConfiguracionMemoria(identificador);
 80068e4:	6839      	ldr	r1, [r7, #0]
 80068e6:	4808      	ldr	r0, [pc, #32]	@ (8006908 <_ZN14CMenuPrincipal11OnMenuEventEi+0x5c>)
 80068e8:	f7fd fb5b 	bl	8003fa2 <_ZN19CManejadorPantallas35MuestraPantallaConfiguracionMemoriaEi>
		break;
 80068ec:	e007      	b.n	80068fe <_ZN14CMenuPrincipal11OnMenuEventEi+0x52>
	case MENU_PRINCIPAL::MENU_CALIBRAR:
		ManejadorPantallas.MuestraCPantallaCalibracion();
 80068ee:	4806      	ldr	r0, [pc, #24]	@ (8006908 <_ZN14CMenuPrincipal11OnMenuEventEi+0x5c>)
 80068f0:	f7fd fba2 	bl	8004038 <_ZN19CManejadorPantallas27MuestraCPantallaCalibracionEv>
		break;
 80068f4:	e003      	b.n	80068fe <_ZN14CMenuPrincipal11OnMenuEventEi+0x52>
	case MENU_PRINCIPAL::MENU_RAMPA:
		ManejadorPantallas.MuestraMenuRampa();
 80068f6:	4804      	ldr	r0, [pc, #16]	@ (8006908 <_ZN14CMenuPrincipal11OnMenuEventEi+0x5c>)
 80068f8:	f7fd fab6 	bl	8003e68 <_ZN19CManejadorPantallas16MuestraMenuRampaEv>
		break;
 80068fc:	bf00      	nop
	}

}
 80068fe:	bf00      	nop
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	2000025c 	.word	0x2000025c

0800690c <_ZThn172_N14CMenuPrincipal11OnMenuEventEi>:
	virtual void OnBotonCuatroClickEvent();
	virtual void OnMenuEvent(int identificador);
 800690c:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8006910:	f7ff bfcc 	b.w	80068ac <_ZN14CMenuPrincipal11OnMenuEventEi>

08006914 <_ZN14CMenuPrincipal21OnBotonTresClickEventEv>:

void CMenuPrincipal::OnBotonTresClickEvent()
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(3);
 800691c:	2103      	movs	r1, #3
 800691e:	4803      	ldr	r0, [pc, #12]	@ (800692c <_ZN14CMenuPrincipal21OnBotonTresClickEventEv+0x18>)
 8006920:	f7fd fb66 	bl	8003ff0 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 8006924:	bf00      	nop
 8006926:	3708      	adds	r7, #8
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	2000025c 	.word	0x2000025c

08006930 <_ZThn48_N14CMenuPrincipal21OnBotonTresClickEventEv>:

	virtual void OnBotonUnoClickEvent();
	virtual void OnBotonDosClickEvent();
	virtual void OnBotonTresClickEvent();
 8006930:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8006934:	f7ff bfee 	b.w	8006914 <_ZN14CMenuPrincipal21OnBotonTresClickEventEv>

08006938 <_ZN14CMenuPrincipal20OnBotonUnoClickEventEv>:
void CMenuPrincipal::OnBotonUnoClickEvent()
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(1);
 8006940:	2101      	movs	r1, #1
 8006942:	4803      	ldr	r0, [pc, #12]	@ (8006950 <_ZN14CMenuPrincipal20OnBotonUnoClickEventEv+0x18>)
 8006944:	f7fd fb54 	bl	8003ff0 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 8006948:	bf00      	nop
 800694a:	3708      	adds	r7, #8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	2000025c 	.word	0x2000025c

08006954 <_ZThn48_N14CMenuPrincipal20OnBotonUnoClickEventEv>:
	virtual void OnBotonUnoClickEvent();
 8006954:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8006958:	f7ff bfee 	b.w	8006938 <_ZN14CMenuPrincipal20OnBotonUnoClickEventEv>

0800695c <_ZN14CMenuPrincipal20OnBotonDosClickEventEv>:
void CMenuPrincipal::OnBotonDosClickEvent()
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(2);
 8006964:	2102      	movs	r1, #2
 8006966:	4803      	ldr	r0, [pc, #12]	@ (8006974 <_ZN14CMenuPrincipal20OnBotonDosClickEventEv+0x18>)
 8006968:	f7fd fb42 	bl	8003ff0 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 800696c:	bf00      	nop
 800696e:	3708      	adds	r7, #8
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	2000025c 	.word	0x2000025c

08006978 <_ZThn48_N14CMenuPrincipal20OnBotonDosClickEventEv>:
	virtual void OnBotonDosClickEvent();
 8006978:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800697c:	f7ff bfee 	b.w	800695c <_ZN14CMenuPrincipal20OnBotonDosClickEventEv>

08006980 <_ZN14CMenuPrincipal23OnBotonCuatroClickEventEv>:
void CMenuPrincipal::OnBotonCuatroClickEvent()
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaManual();
 8006988:	4803      	ldr	r0, [pc, #12]	@ (8006998 <_ZN14CMenuPrincipal23OnBotonCuatroClickEventEv+0x18>)
 800698a:	f7fd fa35 	bl	8003df8 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
}
 800698e:	bf00      	nop
 8006990:	3708      	adds	r7, #8
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	2000025c 	.word	0x2000025c

0800699c <_ZThn48_N14CMenuPrincipal23OnBotonCuatroClickEventEv>:
	virtual void OnBotonCuatroClickEvent();
 800699c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80069a0:	f7ff bfee 	b.w	8006980 <_ZN14CMenuPrincipal23OnBotonCuatroClickEventEv>

080069a4 <_ZN20CPantallaEdicionPasoC1Ev>:
#include <GUI/Rampa/PantallaEdicionPaso/CPantallaEdicionPaso.hpp>
#include <RapaTemperatura/CControladorRampas.hpp>
#include <GUI/ManejadorPantallas/CManejadorPantallas.hpp>
#include <RapaTemperatura/CControladorPasosRampa.hpp>

CPantallaEdicionPaso::CPantallaEdicionPaso():
 80069a4:	b590      	push	{r4, r7, lr}
 80069a6:	b08b      	sub	sp, #44	@ 0x2c
 80069a8:	af08      	add	r7, sp, #32
 80069aa:	6078      	str	r0, [r7, #4]
CPantallaBase(1, (char*)"EDITOR PASO")
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a9c      	ldr	r2, [pc, #624]	@ (8006c20 <_ZN20CPantallaEdicionPasoC1Ev+0x27c>)
 80069b0:	2101      	movs	r1, #1
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7fc fcd0 	bl	8003358 <_ZN13CPantallaBaseC1EiPc>
 80069b8:	4a9a      	ldr	r2, [pc, #616]	@ (8006c24 <_ZN20CPantallaEdicionPasoC1Ev+0x280>)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	601a      	str	r2, [r3, #0]
 80069be:	4a9a      	ldr	r2, [pc, #616]	@ (8006c28 <_ZN20CPantallaEdicionPasoC1Ev+0x284>)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated constructor stub
	// TODO Auto-generated constructor stub
	LabelRampa=new CEtiquetaTft( 5, 35, 50, 20, COLOR::BLACK,(char*)"Memoria: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 80069c4:	20a4      	movs	r0, #164	@ 0xa4
 80069c6:	f00b f88b 	bl	8011ae0 <_Znwj>
 80069ca:	4603      	mov	r3, r0
 80069cc:	461c      	mov	r4, r3
 80069ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80069d2:	9306      	str	r3, [sp, #24]
 80069d4:	2300      	movs	r3, #0
 80069d6:	9305      	str	r3, [sp, #20]
 80069d8:	2303      	movs	r3, #3
 80069da:	9304      	str	r3, [sp, #16]
 80069dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80069e0:	9303      	str	r3, [sp, #12]
 80069e2:	4b92      	ldr	r3, [pc, #584]	@ (8006c2c <_ZN20CPantallaEdicionPasoC1Ev+0x288>)
 80069e4:	9302      	str	r3, [sp, #8]
 80069e6:	2300      	movs	r3, #0
 80069e8:	9301      	str	r3, [sp, #4]
 80069ea:	2314      	movs	r3, #20
 80069ec:	9300      	str	r3, [sp, #0]
 80069ee:	2332      	movs	r3, #50	@ 0x32
 80069f0:	2223      	movs	r2, #35	@ 0x23
 80069f2:	2105      	movs	r1, #5
 80069f4:	4620      	mov	r0, r4
 80069f6:	f7fc fa63 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8c3 412c 	str.w	r4, [r3, #300]	@ 0x12c
	// temperatra
	LabelTemperatura = new CEtiquetaTft( 5, 65, 50, 20, COLOR::BLACK,(char*)"Temp", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8006a00:	20a4      	movs	r0, #164	@ 0xa4
 8006a02:	f00b f86d 	bl	8011ae0 <_Znwj>
 8006a06:	4603      	mov	r3, r0
 8006a08:	461c      	mov	r4, r3
 8006a0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006a0e:	9306      	str	r3, [sp, #24]
 8006a10:	2300      	movs	r3, #0
 8006a12:	9305      	str	r3, [sp, #20]
 8006a14:	2303      	movs	r3, #3
 8006a16:	9304      	str	r3, [sp, #16]
 8006a18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006a1c:	9303      	str	r3, [sp, #12]
 8006a1e:	4b84      	ldr	r3, [pc, #528]	@ (8006c30 <_ZN20CPantallaEdicionPasoC1Ev+0x28c>)
 8006a20:	9302      	str	r3, [sp, #8]
 8006a22:	2300      	movs	r3, #0
 8006a24:	9301      	str	r3, [sp, #4]
 8006a26:	2314      	movs	r3, #20
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	2332      	movs	r3, #50	@ 0x32
 8006a2c:	2241      	movs	r2, #65	@ 0x41
 8006a2e:	2105      	movs	r1, #5
 8006a30:	4620      	mov	r0, r4
 8006a32:	f7fc fa45 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8c3 4130 	str.w	r4, [r3, #304]	@ 0x130
	TextTemperatura = new CEtiquetaTft( 100, 65, 150, 30,COLOR::GREEN, (char*)"000/000", COLOR::BLACK, 3, 1, COLOR::RED);
 8006a3c:	20a4      	movs	r0, #164	@ 0xa4
 8006a3e:	f00b f84f 	bl	8011ae0 <_Znwj>
 8006a42:	4603      	mov	r3, r0
 8006a44:	461c      	mov	r4, r3
 8006a46:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8006a4a:	9306      	str	r3, [sp, #24]
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	9305      	str	r3, [sp, #20]
 8006a50:	2303      	movs	r3, #3
 8006a52:	9304      	str	r3, [sp, #16]
 8006a54:	2300      	movs	r3, #0
 8006a56:	9303      	str	r3, [sp, #12]
 8006a58:	4b76      	ldr	r3, [pc, #472]	@ (8006c34 <_ZN20CPantallaEdicionPasoC1Ev+0x290>)
 8006a5a:	9302      	str	r3, [sp, #8]
 8006a5c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8006a60:	9301      	str	r3, [sp, #4]
 8006a62:	231e      	movs	r3, #30
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	2396      	movs	r3, #150	@ 0x96
 8006a68:	2241      	movs	r2, #65	@ 0x41
 8006a6a:	2164      	movs	r1, #100	@ 0x64
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	f7fc fa27 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8c3 4134 	str.w	r4, [r3, #308]	@ 0x134
//	TextTemperatura->SetSeparacion(5, 5);
	//nivel de ire
	LabelAire = new CEtiquetaTft( 5, 100, 200, 30, COLOR::BLACK,(char*) "Aire",COLOR::WHITE, 3, 0, COLOR::RED);
 8006a78:	20a4      	movs	r0, #164	@ 0xa4
 8006a7a:	f00b f831 	bl	8011ae0 <_Znwj>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	461c      	mov	r4, r3
 8006a82:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8006a86:	9306      	str	r3, [sp, #24]
 8006a88:	2300      	movs	r3, #0
 8006a8a:	9305      	str	r3, [sp, #20]
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	9304      	str	r3, [sp, #16]
 8006a90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006a94:	9303      	str	r3, [sp, #12]
 8006a96:	4b68      	ldr	r3, [pc, #416]	@ (8006c38 <_ZN20CPantallaEdicionPasoC1Ev+0x294>)
 8006a98:	9302      	str	r3, [sp, #8]
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	9301      	str	r3, [sp, #4]
 8006a9e:	231e      	movs	r3, #30
 8006aa0:	9300      	str	r3, [sp, #0]
 8006aa2:	23c8      	movs	r3, #200	@ 0xc8
 8006aa4:	2264      	movs	r2, #100	@ 0x64
 8006aa6:	2105      	movs	r1, #5
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	f7fc fa09 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8c3 4138 	str.w	r4, [r3, #312]	@ 0x138
	TextAire = new CEtiquetaTft( 100, 100, 150, 30, COLOR::GREY,(char*) "00",COLOR::BLACK, 3, 0, COLOR::RED);
 8006ab4:	20a4      	movs	r0, #164	@ 0xa4
 8006ab6:	f00b f813 	bl	8011ae0 <_Znwj>
 8006aba:	4603      	mov	r3, r0
 8006abc:	461c      	mov	r4, r3
 8006abe:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8006ac2:	9306      	str	r3, [sp, #24]
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	9305      	str	r3, [sp, #20]
 8006ac8:	2303      	movs	r3, #3
 8006aca:	9304      	str	r3, [sp, #16]
 8006acc:	2300      	movs	r3, #0
 8006ace:	9303      	str	r3, [sp, #12]
 8006ad0:	4b5a      	ldr	r3, [pc, #360]	@ (8006c3c <_ZN20CPantallaEdicionPasoC1Ev+0x298>)
 8006ad2:	9302      	str	r3, [sp, #8]
 8006ad4:	f64d 63de 	movw	r3, #57054	@ 0xdede
 8006ad8:	9301      	str	r3, [sp, #4]
 8006ada:	231e      	movs	r3, #30
 8006adc:	9300      	str	r3, [sp, #0]
 8006ade:	2396      	movs	r3, #150	@ 0x96
 8006ae0:	2264      	movs	r2, #100	@ 0x64
 8006ae2:	2164      	movs	r1, #100	@ 0x64
 8006ae4:	4620      	mov	r0, r4
 8006ae6:	f7fc f9eb 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8c3 413c 	str.w	r4, [r3, #316]	@ 0x13c
	// Tiempo
	LabelTiempo = new CEtiquetaTft( 5, 135, 200, 30, COLOR::BLACK,(char*) "TIEM",COLOR::WHITE, 3, 0, COLOR::RED);
 8006af0:	20a4      	movs	r0, #164	@ 0xa4
 8006af2:	f00a fff5 	bl	8011ae0 <_Znwj>
 8006af6:	4603      	mov	r3, r0
 8006af8:	461c      	mov	r4, r3
 8006afa:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8006afe:	9306      	str	r3, [sp, #24]
 8006b00:	2300      	movs	r3, #0
 8006b02:	9305      	str	r3, [sp, #20]
 8006b04:	2303      	movs	r3, #3
 8006b06:	9304      	str	r3, [sp, #16]
 8006b08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006b0c:	9303      	str	r3, [sp, #12]
 8006b0e:	4b4c      	ldr	r3, [pc, #304]	@ (8006c40 <_ZN20CPantallaEdicionPasoC1Ev+0x29c>)
 8006b10:	9302      	str	r3, [sp, #8]
 8006b12:	2300      	movs	r3, #0
 8006b14:	9301      	str	r3, [sp, #4]
 8006b16:	231e      	movs	r3, #30
 8006b18:	9300      	str	r3, [sp, #0]
 8006b1a:	23c8      	movs	r3, #200	@ 0xc8
 8006b1c:	2287      	movs	r2, #135	@ 0x87
 8006b1e:	2105      	movs	r1, #5
 8006b20:	4620      	mov	r0, r4
 8006b22:	f7fc f9cd 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8c3 4140 	str.w	r4, [r3, #320]	@ 0x140
	TextTiempo = new CEtiquetaTft( 100, 135, 150, 30, COLOR::GREY,(char*) "00",COLOR::BLACK, 3, 0, COLOR::RED);
 8006b2c:	20a4      	movs	r0, #164	@ 0xa4
 8006b2e:	f00a ffd7 	bl	8011ae0 <_Znwj>
 8006b32:	4603      	mov	r3, r0
 8006b34:	461c      	mov	r4, r3
 8006b36:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8006b3a:	9306      	str	r3, [sp, #24]
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	9305      	str	r3, [sp, #20]
 8006b40:	2303      	movs	r3, #3
 8006b42:	9304      	str	r3, [sp, #16]
 8006b44:	2300      	movs	r3, #0
 8006b46:	9303      	str	r3, [sp, #12]
 8006b48:	4b3c      	ldr	r3, [pc, #240]	@ (8006c3c <_ZN20CPantallaEdicionPasoC1Ev+0x298>)
 8006b4a:	9302      	str	r3, [sp, #8]
 8006b4c:	f64d 63de 	movw	r3, #57054	@ 0xdede
 8006b50:	9301      	str	r3, [sp, #4]
 8006b52:	231e      	movs	r3, #30
 8006b54:	9300      	str	r3, [sp, #0]
 8006b56:	2396      	movs	r3, #150	@ 0x96
 8006b58:	2287      	movs	r2, #135	@ 0x87
 8006b5a:	2164      	movs	r1, #100	@ 0x64
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	f7fc f9af 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8c3 4144 	str.w	r4, [r3, #324]	@ 0x144

	LabelGuardar=new CEtiquetaTft( 10, 200, 130, 30, COLOR::GREEN,(char*)"GUARDAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 8006b68:	20a4      	movs	r0, #164	@ 0xa4
 8006b6a:	f00a ffb9 	bl	8011ae0 <_Znwj>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	461c      	mov	r4, r3
 8006b72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006b76:	9306      	str	r3, [sp, #24]
 8006b78:	2301      	movs	r3, #1
 8006b7a:	9305      	str	r3, [sp, #20]
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	9304      	str	r3, [sp, #16]
 8006b80:	2300      	movs	r3, #0
 8006b82:	9303      	str	r3, [sp, #12]
 8006b84:	4b2f      	ldr	r3, [pc, #188]	@ (8006c44 <_ZN20CPantallaEdicionPasoC1Ev+0x2a0>)
 8006b86:	9302      	str	r3, [sp, #8]
 8006b88:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8006b8c:	9301      	str	r3, [sp, #4]
 8006b8e:	231e      	movs	r3, #30
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	2382      	movs	r3, #130	@ 0x82
 8006b94:	22c8      	movs	r2, #200	@ 0xc8
 8006b96:	210a      	movs	r1, #10
 8006b98:	4620      	mov	r0, r4
 8006b9a:	f7fc f991 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8c3 4124 	str.w	r4, [r3, #292]	@ 0x124
	LabelCancelar=new CEtiquetaTft( 160, 200, 145, 30, COLOR::RED,(char*)"CANCELAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 8006ba4:	20a4      	movs	r0, #164	@ 0xa4
 8006ba6:	f00a ff9b 	bl	8011ae0 <_Znwj>
 8006baa:	4603      	mov	r3, r0
 8006bac:	461c      	mov	r4, r3
 8006bae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006bb2:	9306      	str	r3, [sp, #24]
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	9305      	str	r3, [sp, #20]
 8006bb8:	2303      	movs	r3, #3
 8006bba:	9304      	str	r3, [sp, #16]
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	9303      	str	r3, [sp, #12]
 8006bc0:	4b21      	ldr	r3, [pc, #132]	@ (8006c48 <_ZN20CPantallaEdicionPasoC1Ev+0x2a4>)
 8006bc2:	9302      	str	r3, [sp, #8]
 8006bc4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8006bc8:	9301      	str	r3, [sp, #4]
 8006bca:	231e      	movs	r3, #30
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	2391      	movs	r3, #145	@ 0x91
 8006bd0:	22c8      	movs	r2, #200	@ 0xc8
 8006bd2:	21a0      	movs	r1, #160	@ 0xa0
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	f7fc f973 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8c3 4128 	str.w	r4, [r3, #296]	@ 0x128

	Textos[0]=TextTemperatura;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
	Textos[1]=TextAire;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
	Textos[2]=TextTiempo;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
	Seleccionado=0;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
	Estado=ESTADO_EDICION_PASO::SELECIONANDO;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
}
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4618      	mov	r0, r3
 8006c18:	370c      	adds	r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd90      	pop	{r4, r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	080149b4 	.word	0x080149b4
 8006c24:	08015720 	.word	0x08015720
 8006c28:	080157b4 	.word	0x080157b4
 8006c2c:	080149c0 	.word	0x080149c0
 8006c30:	080149cc 	.word	0x080149cc
 8006c34:	080149d4 	.word	0x080149d4
 8006c38:	080149dc 	.word	0x080149dc
 8006c3c:	080149e4 	.word	0x080149e4
 8006c40:	080149e8 	.word	0x080149e8
 8006c44:	080149f0 	.word	0x080149f0
 8006c48:	080149f8 	.word	0x080149f8

08006c4c <_ZN20CPantallaEdicionPasoD1Ev>:

CPantallaEdicionPaso::~CPantallaEdicionPaso()
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	4a07      	ldr	r2, [pc, #28]	@ (8006c74 <_ZN20CPantallaEdicionPasoD1Ev+0x28>)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	601a      	str	r2, [r3, #0]
 8006c5a:	4a07      	ldr	r2, [pc, #28]	@ (8006c78 <_ZN20CPantallaEdicionPasoD1Ev+0x2c>)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7fc fb44 	bl	80032f0 <_ZN13CPantallaBaseD1Ev>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3708      	adds	r7, #8
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	08015720 	.word	0x08015720
 8006c78:	080157b4 	.word	0x080157b4

08006c7c <_ZThn48_N20CPantallaEdicionPasoD1Ev>:
	void MuestraTemperatura();
	void MuestraAire();
	void MuestraTiempo();
public:
	CPantallaEdicionPaso();
	virtual ~CPantallaEdicionPaso();
 8006c7c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8006c80:	f7ff bfe4 	b.w	8006c4c <_ZN20CPantallaEdicionPasoD1Ev>

08006c84 <_ZN20CPantallaEdicionPasoD0Ev>:
CPantallaEdicionPaso::~CPantallaEdicionPaso()
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
}
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7ff ffdd 	bl	8006c4c <_ZN20CPantallaEdicionPasoD1Ev>
 8006c92:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f00a ff20 	bl	8011adc <_ZdlPvj>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3708      	adds	r7, #8
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <_ZThn48_N20CPantallaEdicionPasoD0Ev>:
 8006ca6:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8006caa:	f7ff bfeb 	b.w	8006c84 <_ZN20CPantallaEdicionPasoD0Ev>
	...

08006cb0 <_ZN20CPantallaEdicionPaso9SetIdPasoEii>:
void CPantallaEdicionPaso::SetIdPaso(int id_rampa, int id_paso)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b08e      	sub	sp, #56	@ 0x38
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
	ID_Paso=id_paso;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	ID_Rampa=id_rampa;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	68ba      	ldr	r2, [r7, #8]
 8006cc8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	Temperatura=100;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2264      	movs	r2, #100	@ 0x64
 8006cd0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	NivelAire=50;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2232      	movs	r2, #50	@ 0x32
 8006cd8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	Minutos=10;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	220a      	movs	r2, #10
 8006ce0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	CRampa rampa=	ControladorRampas.DameRampa(ID_Rampa);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006cea:	f107 0320 	add.w	r3, r7, #32
 8006cee:	491b      	ldr	r1, [pc, #108]	@ (8006d5c <_ZN20CPantallaEdicionPaso9SetIdPasoEii+0xac>)
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f004 fc28 	bl	800b546 <_ZN18CControladorRampas9DameRampaEi>
	LabelRampa->SetTexto((char*)"Rampa:%s",rampa.Nombre);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f8d3 012c 	ldr.w	r0, [r3, #300]	@ 0x12c
 8006cfc:	f107 0320 	add.w	r3, r7, #32
 8006d00:	3308      	adds	r3, #8
 8006d02:	461a      	mov	r2, r3
 8006d04:	4916      	ldr	r1, [pc, #88]	@ (8006d60 <_ZN20CPantallaEdicionPaso9SetIdPasoEii+0xb0>)
 8006d06:	f7fc f915 	bl	8002f34 <_ZN12CEtiquetaTft8SetTextoEPcz>
	if(id_paso!=-1)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d10:	d01c      	beq.n	8006d4c <_ZN20CPantallaEdicionPaso9SetIdPasoEii+0x9c>
	{
		CPaso paso=ControladorPasosRampa.DamePasoRampa(ID_Paso);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8006d18:	f107 0314 	add.w	r3, r7, #20
 8006d1c:	4911      	ldr	r1, [pc, #68]	@ (8006d64 <_ZN20CPantallaEdicionPaso9SetIdPasoEii+0xb4>)
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f004 f9b1 	bl	800b086 <_ZN22CControladorPasosRampa13DamePasoRampaEi>
		Temperatura=paso.Temperatura;
 8006d24:	7efb      	ldrb	r3, [r7, #27]
 8006d26:	461a      	mov	r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		NivelAire=paso.NivelAire;
 8006d2e:	7f3b      	ldrb	r3, [r7, #28]
 8006d30:	461a      	mov	r2, r3
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
		Minutos=paso.Minutos;
 8006d38:	7f7b      	ldrb	r3, [r7, #29]
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	}
 8006d42:	f107 0314 	add.w	r3, r7, #20
 8006d46:	4618      	mov	r0, r3
 8006d48:	f004 fec4 	bl	800bad4 <_ZN5CPasoD1Ev>
}
 8006d4c:	f107 0320 	add.w	r3, r7, #32
 8006d50:	4618      	mov	r0, r3
 8006d52:	f004 ff05 	bl	800bb60 <_ZN6CRampaD1Ev>
 8006d56:	3738      	adds	r7, #56	@ 0x38
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	20000364 	.word	0x20000364
 8006d60:	08014a04 	.word	0x08014a04
 8006d64:	200001f8 	.word	0x200001f8

08006d68 <_ZN20CPantallaEdicionPaso19OnPerillaIncrementoEv>:
void CPantallaEdicionPaso::OnPerillaIncremento()
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
	if(Estado==ESTADO_EDICION_PASO::SELECIONANDO)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d103      	bne.n	8006d82 <_ZN20CPantallaEdicionPaso19OnPerillaIncrementoEv+0x1a>
		NavegarIncremento();
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f8f5 	bl	8006f6a <_ZN20CPantallaEdicionPaso17NavegarIncrementoEv>
	else
		ValorIncremento();

}
 8006d80:	e002      	b.n	8006d88 <_ZN20CPantallaEdicionPaso19OnPerillaIncrementoEv+0x20>
		ValorIncremento();
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f9f5 	bl	8007172 <_ZN20CPantallaEdicionPaso15ValorIncrementoEv>
}
 8006d88:	bf00      	nop
 8006d8a:	3708      	adds	r7, #8
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <_ZThn48_N20CPantallaEdicionPaso19OnPerillaIncrementoEv>:
	void SetIdPaso(int id_Rampa,int id_paso);
	virtual void OnPerillaIncremento();
 8006d90:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8006d94:	f7ff bfe8 	b.w	8006d68 <_ZN20CPantallaEdicionPaso19OnPerillaIncrementoEv>

08006d98 <_ZN20CPantallaEdicionPaso19OnPerillaDecrementoEv>:
void CPantallaEdicionPaso::OnPerillaDecremento()
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
	if(Estado==ESTADO_EDICION_PASO::SELECIONANDO)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d103      	bne.n	8006db2 <_ZN20CPantallaEdicionPaso19OnPerillaDecrementoEv+0x1a>
		NavegarDecremento();
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f933 	bl	8007016 <_ZN20CPantallaEdicionPaso17NavegarDecrementoEv>
	else
		ValorDecremento();
}
 8006db0:	e002      	b.n	8006db8 <_ZN20CPantallaEdicionPaso19OnPerillaDecrementoEv+0x20>
		ValorDecremento();
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 fa2f 	bl	8007216 <_ZN20CPantallaEdicionPaso15ValorDecrementoEv>
}
 8006db8:	bf00      	nop
 8006dba:	3708      	adds	r7, #8
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <_ZThn48_N20CPantallaEdicionPaso19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 8006dc0:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8006dc4:	f7ff bfe8 	b.w	8006d98 <_ZN20CPantallaEdicionPaso19OnPerillaDecrementoEv>

08006dc8 <_ZN20CPantallaEdicionPaso20OnBotonUnoClickEventEv>:
void CPantallaEdicionPaso::OnBotonUnoClickEvent()
{
 8006dc8:	b590      	push	{r4, r7, lr}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af02      	add	r7, sp, #8
 8006dce:	6078      	str	r0, [r7, #4]
	if(ID_Paso<=0)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	dc1b      	bgt.n	8006e12 <_ZN20CPantallaEdicionPaso20OnBotonUnoClickEventEv+0x4a>
	{
		ControladorPasosRampa.AgregarPasoRampa(ID_Rampa, Temperatura, NivelAire, Minutos);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006de6:	b2da      	uxtb	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006dee:	b2d8      	uxtb	r0, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	9300      	str	r3, [sp, #0]
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	4818      	ldr	r0, [pc, #96]	@ (8006e60 <_ZN20CPantallaEdicionPaso20OnBotonUnoClickEventEv+0x98>)
 8006dfe:	f004 f98c 	bl	800b11a <_ZN22CControladorPasosRampa16AgregarPasoRampaEihhh>
		ManejadorPantallas.AsignaPantallaPasosRampa(ID_Rampa);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006e08:	4619      	mov	r1, r3
 8006e0a:	4816      	ldr	r0, [pc, #88]	@ (8006e64 <_ZN20CPantallaEdicionPaso20OnBotonUnoClickEventEv+0x9c>)
 8006e0c:	f7fd f993 	bl	8004136 <_ZN19CManejadorPantallas24AsignaPantallaPasosRampaEi>
	{
		ControladorPasosRampa.ActualizaPasoRampa(ID_Paso, ID_Rampa, Temperatura, NivelAire, Minutos);
		ManejadorPantallas.MuestraPantallaPaso(ID_Rampa, ID_Paso);
	}

}
 8006e10:	e022      	b.n	8006e58 <_ZN20CPantallaEdicionPaso20OnBotonUnoClickEventEv+0x90>
		ControladorPasosRampa.ActualizaPasoRampa(ID_Paso, ID_Rampa, Temperatura, NivelAire, Minutos);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8d3 10ac 	ldr.w	r1, [r3, #172]	@ 0xac
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006e24:	b2dc      	uxtb	r4, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	f8d2 20bc 	ldr.w	r2, [r2, #188]	@ 0xbc
 8006e34:	b2d2      	uxtb	r2, r2
 8006e36:	9201      	str	r2, [sp, #4]
 8006e38:	9300      	str	r3, [sp, #0]
 8006e3a:	4623      	mov	r3, r4
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	4808      	ldr	r0, [pc, #32]	@ (8006e60 <_ZN20CPantallaEdicionPaso20OnBotonUnoClickEventEv+0x98>)
 8006e40:	f003 ff9c 	bl	800ad7c <_ZN22CControladorPasosRampa18ActualizaPasoRampaEiihhh>
		ManejadorPantallas.MuestraPantallaPaso(ID_Rampa, ID_Paso);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006e50:	461a      	mov	r2, r3
 8006e52:	4804      	ldr	r0, [pc, #16]	@ (8006e64 <_ZN20CPantallaEdicionPaso20OnBotonUnoClickEventEv+0x9c>)
 8006e54:	f7fd f9e4 	bl	8004220 <_ZN19CManejadorPantallas19MuestraPantallaPasoEii>
}
 8006e58:	bf00      	nop
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd90      	pop	{r4, r7, pc}
 8006e60:	200001f8 	.word	0x200001f8
 8006e64:	2000025c 	.word	0x2000025c

08006e68 <_ZThn48_N20CPantallaEdicionPaso20OnBotonUnoClickEventEv>:
	virtual void OnBotonUnoClickEvent();
 8006e68:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8006e6c:	f7ff bfac 	b.w	8006dc8 <_ZN20CPantallaEdicionPaso20OnBotonUnoClickEventEv>

08006e70 <_ZN20CPantallaEdicionPaso21OnBotonTresClickEventEv>:

void CPantallaEdicionPaso::OnBotonTresClickEvent()
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
	if(ID_Paso<=0)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	dc07      	bgt.n	8006e92 <_ZN20CPantallaEdicionPaso21OnBotonTresClickEventEv+0x22>
		ManejadorPantallas.AsignaPantallaPasosRampa(ID_Rampa);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006e88:	4619      	mov	r1, r3
 8006e8a:	4809      	ldr	r0, [pc, #36]	@ (8006eb0 <_ZN20CPantallaEdicionPaso21OnBotonTresClickEventEv+0x40>)
 8006e8c:	f7fd f953 	bl	8004136 <_ZN19CManejadorPantallas24AsignaPantallaPasosRampaEi>
	else
		ManejadorPantallas.MuestraPantallaPaso(ID_Rampa, ID_Paso);
}
 8006e90:	e009      	b.n	8006ea6 <_ZN20CPantallaEdicionPaso21OnBotonTresClickEventEv+0x36>
		ManejadorPantallas.MuestraPantallaPaso(ID_Rampa, ID_Paso);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	4803      	ldr	r0, [pc, #12]	@ (8006eb0 <_ZN20CPantallaEdicionPaso21OnBotonTresClickEventEv+0x40>)
 8006ea2:	f7fd f9bd 	bl	8004220 <_ZN19CManejadorPantallas19MuestraPantallaPasoEii>
}
 8006ea6:	bf00      	nop
 8006ea8:	3708      	adds	r7, #8
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	2000025c 	.word	0x2000025c

08006eb4 <_ZThn48_N20CPantallaEdicionPaso21OnBotonTresClickEventEv>:
	virtual void OnBotonTresClickEvent();
 8006eb4:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8006eb8:	f7ff bfda 	b.w	8006e70 <_ZN20CPantallaEdicionPaso21OnBotonTresClickEventEv>

08006ebc <_ZN20CPantallaEdicionPaso4ShowEv>:
void CPantallaEdicionPaso::Show()
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
	//VelocidadAireInicialPotenciometro=ManejadorControles->GetNivelAire();
	CPantallaBase::Show();
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7fc fab8 	bl	800343c <_ZN13CPantallaBase4ShowEv>

	LabelTemperatura->Show();
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	334c      	adds	r3, #76	@ 0x4c
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4610      	mov	r0, r2
 8006ee0:	4798      	blx	r3
	MuestraTemperatura();
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f9e8 	bl	80072b8 <_ZN20CPantallaEdicionPaso18MuestraTemperaturaEv>

	LabelAire->Show();
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	334c      	adds	r3, #76	@ 0x4c
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4610      	mov	r0, r2
 8006efc:	4798      	blx	r3
	MuestraAire();
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f9fa 	bl	80072f8 <_ZN20CPantallaEdicionPaso11MuestraAireEv>

	LabelTiempo->Show();
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	334c      	adds	r3, #76	@ 0x4c
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4610      	mov	r0, r2
 8006f18:	4798      	blx	r3
	MuestraTiempo();
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 fa0c 	bl	8007338 <_ZN20CPantallaEdicionPaso13MuestraTiempoEv>

	LabelRampa->Show();
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	334c      	adds	r3, #76	@ 0x4c
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4610      	mov	r0, r2
 8006f34:	4798      	blx	r3
	LabelGuardar->Show();
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	334c      	adds	r3, #76	@ 0x4c
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4610      	mov	r0, r2
 8006f4a:	4798      	blx	r3
	LabelCancelar->Show();
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	334c      	adds	r3, #76	@ 0x4c
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4610      	mov	r0, r2
 8006f60:	4798      	blx	r3
}
 8006f62:	bf00      	nop
 8006f64:	3708      	adds	r7, #8
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <_ZN20CPantallaEdicionPaso17NavegarIncrementoEv>:
void CPantallaEdicionPaso::NavegarIncremento()
{
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b082      	sub	sp, #8
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]

	Textos[Seleccionado]->SetBackColor(COLOR::GREY);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	3252      	adds	r2, #82	@ 0x52
 8006f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f80:	f64d 61de 	movw	r1, #57054	@ 0xdede
 8006f84:	4618      	mov	r0, r3
 8006f86:	f7fc f985 	bl	8003294 <_ZN12CEtiquetaTft12SetBackColorEi>
	Textos[Seleccionado]->Show();
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	3252      	adds	r2, #82	@ 0x52
 8006f94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	3252      	adds	r2, #82	@ 0x52
 8006fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	334c      	adds	r3, #76	@ 0x4c
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4608      	mov	r0, r1
 8006fae:	4798      	blx	r3
	Seleccionado++;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006fb6:	1c5a      	adds	r2, r3, #1
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
	if(Seleccionado>2)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	dd03      	ble.n	8006fd0 <_ZN20CPantallaEdicionPaso17NavegarIncrementoEv+0x66>
		Seleccionado=0;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
	Textos[Seleccionado]->SetBackColor(COLOR::GREEN);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	3252      	adds	r2, #82	@ 0x52
 8006fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fde:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7fc f956 	bl	8003294 <_ZN12CEtiquetaTft12SetBackColorEi>
	Textos[Seleccionado]->Show();
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	3252      	adds	r2, #82	@ 0x52
 8006ff2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	3252      	adds	r2, #82	@ 0x52
 8007000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	334c      	adds	r3, #76	@ 0x4c
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4608      	mov	r0, r1
 800700c:	4798      	blx	r3
}
 800700e:	bf00      	nop
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <_ZN20CPantallaEdicionPaso17NavegarDecrementoEv>:
void CPantallaEdicionPaso::NavegarDecremento()
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b082      	sub	sp, #8
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
	Textos[Seleccionado]->SetBackColor(COLOR::GREY);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	3252      	adds	r2, #82	@ 0x52
 8007028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800702c:	f64d 61de 	movw	r1, #57054	@ 0xdede
 8007030:	4618      	mov	r0, r3
 8007032:	f7fc f92f 	bl	8003294 <_ZN12CEtiquetaTft12SetBackColorEi>
	Textos[Seleccionado]->Show();
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	3252      	adds	r2, #82	@ 0x52
 8007040:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	3252      	adds	r2, #82	@ 0x52
 800704e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	334c      	adds	r3, #76	@ 0x4c
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4608      	mov	r0, r1
 800705a:	4798      	blx	r3
	Seleccionado--;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8007062:	1e5a      	subs	r2, r3, #1
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
	if(Seleccionado<0)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8007070:	2b00      	cmp	r3, #0
 8007072:	da03      	bge.n	800707c <_ZN20CPantallaEdicionPaso17NavegarDecrementoEv+0x66>
		Seleccionado=2;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2202      	movs	r2, #2
 8007078:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
	Textos[Seleccionado]->SetBackColor(COLOR::GREEN);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	3252      	adds	r2, #82	@ 0x52
 8007086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800708a:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 800708e:	4618      	mov	r0, r3
 8007090:	f7fc f900 	bl	8003294 <_ZN12CEtiquetaTft12SetBackColorEi>
	Textos[Seleccionado]->Show();
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	3252      	adds	r2, #82	@ 0x52
 800709e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	3252      	adds	r2, #82	@ 0x52
 80070ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	334c      	adds	r3, #76	@ 0x4c
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4608      	mov	r0, r1
 80070b8:	4798      	blx	r3

}
 80070ba:	bf00      	nop
 80070bc:	3708      	adds	r7, #8
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <_ZN20CPantallaEdicionPaso24OnBotonPerillaClickEventEv>:
void CPantallaEdicionPaso::OnBotonPerillaClickEvent()
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b082      	sub	sp, #8
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
	if(Estado==ESTADO_EDICION_PASO::SELECIONANDO)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d123      	bne.n	800711c <_ZN20CPantallaEdicionPaso24OnBotonPerillaClickEventEv+0x5a>
	{
		Estado=ESTADO_EDICION_PASO::EDITANDO;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
		Textos[Seleccionado]->SetBackColor(COLOR::WHITE);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	3252      	adds	r2, #82	@ 0x52
 80070e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ea:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fc f8d0 	bl	8003294 <_ZN12CEtiquetaTft12SetBackColorEi>
		Textos[Seleccionado]->Show();
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	3252      	adds	r2, #82	@ 0x52
 80070fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	3252      	adds	r2, #82	@ 0x52
 800710c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	334c      	adds	r3, #76	@ 0x4c
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4608      	mov	r0, r1
 8007118:	4798      	blx	r3
	{
		Estado=ESTADO_EDICION_PASO::SELECIONANDO;
		Textos[Seleccionado]->SetBackColor(COLOR::GREEN);
		Textos[Seleccionado]->Show();
	}
}
 800711a:	e022      	b.n	8007162 <_ZN20CPantallaEdicionPaso24OnBotonPerillaClickEventEv+0xa0>
		Estado=ESTADO_EDICION_PASO::SELECIONANDO;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
		Textos[Seleccionado]->SetBackColor(COLOR::GREEN);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	3252      	adds	r2, #82	@ 0x52
 800712e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007132:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8007136:	4618      	mov	r0, r3
 8007138:	f7fc f8ac 	bl	8003294 <_ZN12CEtiquetaTft12SetBackColorEi>
		Textos[Seleccionado]->Show();
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	3252      	adds	r2, #82	@ 0x52
 8007146:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	3252      	adds	r2, #82	@ 0x52
 8007154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	334c      	adds	r3, #76	@ 0x4c
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4608      	mov	r0, r1
 8007160:	4798      	blx	r3
}
 8007162:	bf00      	nop
 8007164:	3708      	adds	r7, #8
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <_ZThn48_N20CPantallaEdicionPaso24OnBotonPerillaClickEventEv>:
	virtual void Show();
	virtual void OnBotonPerillaClickEvent();
 800716a:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800716e:	f7ff bfa8 	b.w	80070c2 <_ZN20CPantallaEdicionPaso24OnBotonPerillaClickEventEv>

08007172 <_ZN20CPantallaEdicionPaso15ValorIncrementoEv>:
void CPantallaEdicionPaso::ValorIncremento()
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b082      	sub	sp, #8
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
	switch(Seleccionado)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8007180:	2b02      	cmp	r3, #2
 8007182:	d030      	beq.n	80071e6 <_ZN20CPantallaEdicionPaso15ValorIncrementoEv+0x74>
 8007184:	2b02      	cmp	r3, #2
 8007186:	dc42      	bgt.n	800720e <_ZN20CPantallaEdicionPaso15ValorIncrementoEv+0x9c>
 8007188:	2b00      	cmp	r3, #0
 800718a:	d002      	beq.n	8007192 <_ZN20CPantallaEdicionPaso15ValorIncrementoEv+0x20>
 800718c:	2b01      	cmp	r3, #1
 800718e:	d016      	beq.n	80071be <_ZN20CPantallaEdicionPaso15ValorIncrementoEv+0x4c>
		if(Minutos>255)
			Minutos=255;
		MuestraTiempo();
		break;
	}
}
 8007190:	e03d      	b.n	800720e <_ZN20CPantallaEdicionPaso15ValorIncrementoEv+0x9c>
		Temperatura++;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007198:	1c5a      	adds	r2, r3, #1
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		if(Temperatura>500)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80071a6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80071aa:	dd04      	ble.n	80071b6 <_ZN20CPantallaEdicionPaso15ValorIncrementoEv+0x44>
			Temperatura=500;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80071b2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		MuestraTemperatura();
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f87e 	bl	80072b8 <_ZN20CPantallaEdicionPaso18MuestraTemperaturaEv>
		break;
 80071bc:	e027      	b.n	800720e <_ZN20CPantallaEdicionPaso15ValorIncrementoEv+0x9c>
		NivelAire++;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80071c4:	1c5a      	adds	r2, r3, #1
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
		if(NivelAire>100)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80071d2:	2b64      	cmp	r3, #100	@ 0x64
 80071d4:	dd03      	ble.n	80071de <_ZN20CPantallaEdicionPaso15ValorIncrementoEv+0x6c>
			NivelAire=100;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2264      	movs	r2, #100	@ 0x64
 80071da:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
		MuestraAire();
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f88a 	bl	80072f8 <_ZN20CPantallaEdicionPaso11MuestraAireEv>
		break;
 80071e4:	e013      	b.n	800720e <_ZN20CPantallaEdicionPaso15ValorIncrementoEv+0x9c>
		Minutos++;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80071ec:	1c5a      	adds	r2, r3, #1
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
		if(Minutos>255)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80071fa:	2bff      	cmp	r3, #255	@ 0xff
 80071fc:	dd03      	ble.n	8007206 <_ZN20CPantallaEdicionPaso15ValorIncrementoEv+0x94>
			Minutos=255;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	22ff      	movs	r2, #255	@ 0xff
 8007202:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
		MuestraTiempo();
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 f896 	bl	8007338 <_ZN20CPantallaEdicionPaso13MuestraTiempoEv>
		break;
 800720c:	bf00      	nop
}
 800720e:	bf00      	nop
 8007210:	3708      	adds	r7, #8
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <_ZN20CPantallaEdicionPaso15ValorDecrementoEv>:
void CPantallaEdicionPaso::ValorDecremento()
{
 8007216:	b580      	push	{r7, lr}
 8007218:	b082      	sub	sp, #8
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
	switch(Seleccionado)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8007224:	2b02      	cmp	r3, #2
 8007226:	d02e      	beq.n	8007286 <_ZN20CPantallaEdicionPaso15ValorDecrementoEv+0x70>
 8007228:	2b02      	cmp	r3, #2
 800722a:	dc40      	bgt.n	80072ae <_ZN20CPantallaEdicionPaso15ValorDecrementoEv+0x98>
 800722c:	2b00      	cmp	r3, #0
 800722e:	d002      	beq.n	8007236 <_ZN20CPantallaEdicionPaso15ValorDecrementoEv+0x20>
 8007230:	2b01      	cmp	r3, #1
 8007232:	d014      	beq.n	800725e <_ZN20CPantallaEdicionPaso15ValorDecrementoEv+0x48>
			Minutos=0;
		MuestraTiempo();
		break;
	}

}
 8007234:	e03b      	b.n	80072ae <_ZN20CPantallaEdicionPaso15ValorDecrementoEv+0x98>
		Temperatura--;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800723c:	1e5a      	subs	r2, r3, #1
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		if(Temperatura<0)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800724a:	2b00      	cmp	r3, #0
 800724c:	da03      	bge.n	8007256 <_ZN20CPantallaEdicionPaso15ValorDecrementoEv+0x40>
			Temperatura=0;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		MuestraTemperatura();
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f82e 	bl	80072b8 <_ZN20CPantallaEdicionPaso18MuestraTemperaturaEv>
		break;
 800725c:	e027      	b.n	80072ae <_ZN20CPantallaEdicionPaso15ValorDecrementoEv+0x98>
		NivelAire--;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007264:	1e5a      	subs	r2, r3, #1
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
		if(NivelAire<0)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007272:	2b00      	cmp	r3, #0
 8007274:	da03      	bge.n	800727e <_ZN20CPantallaEdicionPaso15ValorDecrementoEv+0x68>
			NivelAire=0;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
		MuestraAire();
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 f83a 	bl	80072f8 <_ZN20CPantallaEdicionPaso11MuestraAireEv>
		break;
 8007284:	e013      	b.n	80072ae <_ZN20CPantallaEdicionPaso15ValorDecrementoEv+0x98>
		Minutos--;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800728c:	1e5a      	subs	r2, r3, #1
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
		if(Minutos<0)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800729a:	2b00      	cmp	r3, #0
 800729c:	da03      	bge.n	80072a6 <_ZN20CPantallaEdicionPaso15ValorDecrementoEv+0x90>
			Minutos=0;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
		MuestraTiempo();
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 f846 	bl	8007338 <_ZN20CPantallaEdicionPaso13MuestraTiempoEv>
		break;
 80072ac:	bf00      	nop
}
 80072ae:	bf00      	nop
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
	...

080072b8 <_ZN20CPantallaEdicionPaso18MuestraTemperaturaEv>:

void CPantallaEdicionPaso::MuestraTemperatura()
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
	TextTemperatura->SetTexto((char*)"%d", Temperatura);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 0134 	ldr.w	r0, [r3, #308]	@ 0x134
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80072cc:	461a      	mov	r2, r3
 80072ce:	4909      	ldr	r1, [pc, #36]	@ (80072f4 <_ZN20CPantallaEdicionPaso18MuestraTemperaturaEv+0x3c>)
 80072d0:	f7fb fe30 	bl	8002f34 <_ZN12CEtiquetaTft8SetTextoEPcz>
	TextTemperatura->Show();
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	334c      	adds	r3, #76	@ 0x4c
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4610      	mov	r0, r2
 80072e8:	4798      	blx	r3
}
 80072ea:	bf00      	nop
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	08014a10 	.word	0x08014a10

080072f8 <_ZN20CPantallaEdicionPaso11MuestraAireEv>:
void CPantallaEdicionPaso::MuestraAire()
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
	TextAire->SetTexto((char*)"%d", NivelAire);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 013c 	ldr.w	r0, [r3, #316]	@ 0x13c
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800730c:	461a      	mov	r2, r3
 800730e:	4909      	ldr	r1, [pc, #36]	@ (8007334 <_ZN20CPantallaEdicionPaso11MuestraAireEv+0x3c>)
 8007310:	f7fb fe10 	bl	8002f34 <_ZN12CEtiquetaTft8SetTextoEPcz>
	TextAire->Show();
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	334c      	adds	r3, #76	@ 0x4c
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4610      	mov	r0, r2
 8007328:	4798      	blx	r3
}
 800732a:	bf00      	nop
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	08014a10 	.word	0x08014a10

08007338 <_ZN20CPantallaEdicionPaso13MuestraTiempoEv>:
void CPantallaEdicionPaso::MuestraTiempo()
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
	SegundosATexto(Minutos);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007346:	4619      	mov	r1, r3
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 f819 	bl	8007380 <_ZN20CPantallaEdicionPaso14SegundosATextoEi>
//	TextTiempo->SetTexto((char*)"%d", Segundos);
	TextTiempo->SetTexto(TextoTiempo);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	33c0      	adds	r3, #192	@ 0xc0
 8007358:	4619      	mov	r1, r3
 800735a:	4610      	mov	r0, r2
 800735c:	f7fb fdea 	bl	8002f34 <_ZN12CEtiquetaTft8SetTextoEPcz>
	TextTiempo->Show();
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	334c      	adds	r3, #76	@ 0x4c
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4610      	mov	r0, r2
 8007374:	4798      	blx	r3
}
 8007376:	bf00      	nop
 8007378:	3708      	adds	r7, #8
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
	...

08007380 <_ZN20CPantallaEdicionPaso14SegundosATextoEi>:
void CPantallaEdicionPaso::SegundosATexto(int tiempoMinutos)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b088      	sub	sp, #32
 8007384:	af02      	add	r7, sp, #8
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
	int horas;
	int minutos;
	int segundos;
	horas=tiempoMinutos/(60);
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	4a11      	ldr	r2, [pc, #68]	@ (80073d4 <_ZN20CPantallaEdicionPaso14SegundosATextoEi+0x54>)
 800738e:	fb82 1203 	smull	r1, r2, r2, r3
 8007392:	441a      	add	r2, r3
 8007394:	1152      	asrs	r2, r2, #5
 8007396:	17db      	asrs	r3, r3, #31
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	617b      	str	r3, [r7, #20]
	tiempoMinutos=tiempoMinutos-(horas*60);
 800739c:	697a      	ldr	r2, [r7, #20]
 800739e:	4613      	mov	r3, r2
 80073a0:	0112      	lsls	r2, r2, #4
 80073a2:	1a9b      	subs	r3, r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	461a      	mov	r2, r3
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	4413      	add	r3, r2
 80073ac:	603b      	str	r3, [r7, #0]
	minutos=tiempoMinutos;
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	613b      	str	r3, [r7, #16]
	//tiempoSegundos=0;//tiempoSegundos-(minutos*60);
	segundos=0;//tiempoSegundos;
 80073b2:	2300      	movs	r3, #0
 80073b4:	60fb      	str	r3, [r7, #12]
	sprintf(TextoTiempo,(char*)"%d:%d:%d",horas,minutos,segundos);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f103 00c0 	add.w	r0, r3, #192	@ 0xc0
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	9300      	str	r3, [sp, #0]
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	697a      	ldr	r2, [r7, #20]
 80073c4:	4904      	ldr	r1, [pc, #16]	@ (80073d8 <_ZN20CPantallaEdicionPaso14SegundosATextoEi+0x58>)
 80073c6:	f00b f987 	bl	80126d8 <siprintf>
}
 80073ca:	bf00      	nop
 80073cc:	3718      	adds	r7, #24
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	88888889 	.word	0x88888889
 80073d8:	08014a14 	.word	0x08014a14

080073dc <_ZN21CPantallaEditorNombreC1Ei>:
 */

#include <GUI/Rampa/PantallaEditorNombre/CPantallaEditorNombre.hpp>
#include <GUI/ManejadorPantallas/CManejadorPantallas.hpp>

CPantallaEditorNombre::CPantallaEditorNombre(int id_Rampa) :
 80073dc:	b590      	push	{r4, r7, lr}
 80073de:	b09b      	sub	sp, #108	@ 0x6c
 80073e0:	af08      	add	r7, sp, #32
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
		CPantallaMenuBase((char*) "   Editor")
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	49a7      	ldr	r1, [pc, #668]	@ (8007688 <_ZN21CPantallaEditorNombreC1Ei+0x2ac>)
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7ff f86e 	bl	80064cc <_ZN17CPantallaMenuBaseC1EPc>
 80073f0:	4aa6      	ldr	r2, [pc, #664]	@ (800768c <_ZN21CPantallaEditorNombreC1Ei+0x2b0>)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	601a      	str	r2, [r3, #0]
 80073f6:	4aa6      	ldr	r2, [pc, #664]	@ (8007690 <_ZN21CPantallaEditorNombreC1Ei+0x2b4>)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80073fc:	4aa5      	ldr	r2, [pc, #660]	@ (8007694 <_ZN21CPantallaEditorNombreC1Ei+0x2b8>)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	220f      	movs	r2, #15
 8007408:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
{
	ID_Rampa=id_Rampa;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	683a      	ldr	r2, [r7, #0]
 8007418:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	// TODO Auto-generated constructor stub
	LabelNombre = new CEtiquetaTft(5, 35, 50, 20, COLOR::BLACK, (char*) "Nombre:", COLOR::WHITE, 3, 0, COLOR::WHITE);
 800741c:	20a4      	movs	r0, #164	@ 0xa4
 800741e:	f00a fb5f 	bl	8011ae0 <_Znwj>
 8007422:	4603      	mov	r3, r0
 8007424:	461c      	mov	r4, r3
 8007426:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800742a:	9306      	str	r3, [sp, #24]
 800742c:	2300      	movs	r3, #0
 800742e:	9305      	str	r3, [sp, #20]
 8007430:	2303      	movs	r3, #3
 8007432:	9304      	str	r3, [sp, #16]
 8007434:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007438:	9303      	str	r3, [sp, #12]
 800743a:	4b97      	ldr	r3, [pc, #604]	@ (8007698 <_ZN21CPantallaEditorNombreC1Ei+0x2bc>)
 800743c:	9302      	str	r3, [sp, #8]
 800743e:	2300      	movs	r3, #0
 8007440:	9301      	str	r3, [sp, #4]
 8007442:	2314      	movs	r3, #20
 8007444:	9300      	str	r3, [sp, #0]
 8007446:	2332      	movs	r3, #50	@ 0x32
 8007448:	2223      	movs	r2, #35	@ 0x23
 800744a:	2105      	movs	r1, #5
 800744c:	4620      	mov	r0, r4
 800744e:	f7fb fd37 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8c3 40b4 	str.w	r4, [r3, #180]	@ 0xb4
	TextNombre = new CEtiquetaTft(10, 65, 300, 30, COLOR::WHITE, (char*) "", COLOR::BLACK, 3, 0, COLOR::WHITE);
 8007458:	20a4      	movs	r0, #164	@ 0xa4
 800745a:	f00a fb41 	bl	8011ae0 <_Znwj>
 800745e:	4603      	mov	r3, r0
 8007460:	461c      	mov	r4, r3
 8007462:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007466:	9306      	str	r3, [sp, #24]
 8007468:	2300      	movs	r3, #0
 800746a:	9305      	str	r3, [sp, #20]
 800746c:	2303      	movs	r3, #3
 800746e:	9304      	str	r3, [sp, #16]
 8007470:	2300      	movs	r3, #0
 8007472:	9303      	str	r3, [sp, #12]
 8007474:	4b89      	ldr	r3, [pc, #548]	@ (800769c <_ZN21CPantallaEditorNombreC1Ei+0x2c0>)
 8007476:	9302      	str	r3, [sp, #8]
 8007478:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800747c:	9301      	str	r3, [sp, #4]
 800747e:	231e      	movs	r3, #30
 8007480:	9300      	str	r3, [sp, #0]
 8007482:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8007486:	2241      	movs	r2, #65	@ 0x41
 8007488:	210a      	movs	r1, #10
 800748a:	4620      	mov	r0, r4
 800748c:	f7fb fd18 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8c3 40b8 	str.w	r4, [r3, #184]	@ 0xb8
	Opciones=NULL;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	Menu->SetPosicion(10, 100);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80074a4:	2264      	movs	r2, #100	@ 0x64
 80074a6:	210a      	movs	r1, #10
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7fd fa8a 	bl	80049c2 <_ZN5CMenu11SetPosicionEii>
	//inico el teclado
	int x1=10;
 80074ae:	230a      	movs	r3, #10
 80074b0:	643b      	str	r3, [r7, #64]	@ 0x40
	int x2=x1+20;
 80074b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074b4:	3314      	adds	r3, #20
 80074b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int x3=x2+20;
 80074b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074ba:	3314      	adds	r3, #20
 80074bc:	63bb      	str	r3, [r7, #56]	@ 0x38
	int x4=x3+20;
 80074be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074c0:	3314      	adds	r3, #20
 80074c2:	637b      	str	r3, [r7, #52]	@ 0x34
	int x5=x4+20;
 80074c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074c6:	3314      	adds	r3, #20
 80074c8:	633b      	str	r3, [r7, #48]	@ 0x30
	int x6=x5+20;
 80074ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074cc:	3314      	adds	r3, #20
 80074ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int x7=x6+20;
 80074d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074d2:	3314      	adds	r3, #20
 80074d4:	62bb      	str	r3, [r7, #40]	@ 0x28
	int x8=x7+20;
 80074d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d8:	3314      	adds	r3, #20
 80074da:	627b      	str	r3, [r7, #36]	@ 0x24
	int x9=x8+20;
 80074dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074de:	3314      	adds	r3, #20
 80074e0:	623b      	str	r3, [r7, #32]
	int x10=x9+20;
 80074e2:	6a3b      	ldr	r3, [r7, #32]
 80074e4:	3314      	adds	r3, #20
 80074e6:	61fb      	str	r3, [r7, #28]

	int y1=5;
 80074e8:	2305      	movs	r3, #5
 80074ea:	61bb      	str	r3, [r7, #24]
	int y2=y1+25;
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	3319      	adds	r3, #25
 80074f0:	617b      	str	r3, [r7, #20]
	int y3=y2+25;
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	3319      	adds	r3, #25
 80074f6:	613b      	str	r3, [r7, #16]
	int y4=y3+25;
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	3319      	adds	r3, #25
 80074fc:	60fb      	str	r3, [r7, #12]
	int y5=y4+30;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	331e      	adds	r3, #30
 8007502:	60bb      	str	r3, [r7, #8]
	AgregaMenuItem((char*) "0", EDITOR_TECLAS::TECLA_0,x1,y1,10,10);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	230a      	movs	r3, #10
 8007508:	9302      	str	r3, [sp, #8]
 800750a:	230a      	movs	r3, #10
 800750c:	9301      	str	r3, [sp, #4]
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	9300      	str	r3, [sp, #0]
 8007512:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007514:	2200      	movs	r2, #0
 8007516:	4962      	ldr	r1, [pc, #392]	@ (80076a0 <_ZN21CPantallaEditorNombreC1Ei+0x2c4>)
 8007518:	f7ff f8f2 	bl	8006700 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "1", EDITOR_TECLAS::TECLA_1,x2,y1,10,10);
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	230a      	movs	r3, #10
 8007520:	9302      	str	r3, [sp, #8]
 8007522:	230a      	movs	r3, #10
 8007524:	9301      	str	r3, [sp, #4]
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	9300      	str	r3, [sp, #0]
 800752a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800752c:	2201      	movs	r2, #1
 800752e:	495d      	ldr	r1, [pc, #372]	@ (80076a4 <_ZN21CPantallaEditorNombreC1Ei+0x2c8>)
 8007530:	f7ff f8e6 	bl	8006700 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "2", EDITOR_TECLAS::TECLA_2,x3,y1,10,10);
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	230a      	movs	r3, #10
 8007538:	9302      	str	r3, [sp, #8]
 800753a:	230a      	movs	r3, #10
 800753c:	9301      	str	r3, [sp, #4]
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	9300      	str	r3, [sp, #0]
 8007542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007544:	2202      	movs	r2, #2
 8007546:	4958      	ldr	r1, [pc, #352]	@ (80076a8 <_ZN21CPantallaEditorNombreC1Ei+0x2cc>)
 8007548:	f7ff f8da 	bl	8006700 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "3", EDITOR_TECLAS::TECLA_3,x4,y1,10,10);
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	230a      	movs	r3, #10
 8007550:	9302      	str	r3, [sp, #8]
 8007552:	230a      	movs	r3, #10
 8007554:	9301      	str	r3, [sp, #4]
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	9300      	str	r3, [sp, #0]
 800755a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800755c:	2203      	movs	r2, #3
 800755e:	4953      	ldr	r1, [pc, #332]	@ (80076ac <_ZN21CPantallaEditorNombreC1Ei+0x2d0>)
 8007560:	f7ff f8ce 	bl	8006700 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "4", EDITOR_TECLAS::TECLA_4,x5,y1,10,10);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	230a      	movs	r3, #10
 8007568:	9302      	str	r3, [sp, #8]
 800756a:	230a      	movs	r3, #10
 800756c:	9301      	str	r3, [sp, #4]
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	9300      	str	r3, [sp, #0]
 8007572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007574:	2204      	movs	r2, #4
 8007576:	494e      	ldr	r1, [pc, #312]	@ (80076b0 <_ZN21CPantallaEditorNombreC1Ei+0x2d4>)
 8007578:	f7ff f8c2 	bl	8006700 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "5", EDITOR_TECLAS::TECLA_5,x6,y1,10,10);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	230a      	movs	r3, #10
 8007580:	9302      	str	r3, [sp, #8]
 8007582:	230a      	movs	r3, #10
 8007584:	9301      	str	r3, [sp, #4]
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	9300      	str	r3, [sp, #0]
 800758a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800758c:	2205      	movs	r2, #5
 800758e:	4949      	ldr	r1, [pc, #292]	@ (80076b4 <_ZN21CPantallaEditorNombreC1Ei+0x2d8>)
 8007590:	f7ff f8b6 	bl	8006700 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "6", EDITOR_TECLAS::TECLA_6,x7,y1,10,10);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	230a      	movs	r3, #10
 8007598:	9302      	str	r3, [sp, #8]
 800759a:	230a      	movs	r3, #10
 800759c:	9301      	str	r3, [sp, #4]
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	9300      	str	r3, [sp, #0]
 80075a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a4:	2206      	movs	r2, #6
 80075a6:	4944      	ldr	r1, [pc, #272]	@ (80076b8 <_ZN21CPantallaEditorNombreC1Ei+0x2dc>)
 80075a8:	f7ff f8aa 	bl	8006700 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "7", EDITOR_TECLAS::TECLA_7,x8,y1,10,10);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	230a      	movs	r3, #10
 80075b0:	9302      	str	r3, [sp, #8]
 80075b2:	230a      	movs	r3, #10
 80075b4:	9301      	str	r3, [sp, #4]
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075bc:	2207      	movs	r2, #7
 80075be:	493f      	ldr	r1, [pc, #252]	@ (80076bc <_ZN21CPantallaEditorNombreC1Ei+0x2e0>)
 80075c0:	f7ff f89e 	bl	8006700 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "8", EDITOR_TECLAS::TECLA_8,x9,y1,10,10);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	230a      	movs	r3, #10
 80075c8:	9302      	str	r3, [sp, #8]
 80075ca:	230a      	movs	r3, #10
 80075cc:	9301      	str	r3, [sp, #4]
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	9300      	str	r3, [sp, #0]
 80075d2:	6a3b      	ldr	r3, [r7, #32]
 80075d4:	2208      	movs	r2, #8
 80075d6:	493a      	ldr	r1, [pc, #232]	@ (80076c0 <_ZN21CPantallaEditorNombreC1Ei+0x2e4>)
 80075d8:	f7ff f892 	bl	8006700 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "9", EDITOR_TECLAS::TECLA_9,x10,y1,10,10);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	230a      	movs	r3, #10
 80075e0:	9302      	str	r3, [sp, #8]
 80075e2:	230a      	movs	r3, #10
 80075e4:	9301      	str	r3, [sp, #4]
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	9300      	str	r3, [sp, #0]
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	2209      	movs	r2, #9
 80075ee:	4935      	ldr	r1, [pc, #212]	@ (80076c4 <_ZN21CPantallaEditorNombreC1Ei+0x2e8>)
 80075f0:	f7ff f886 	bl	8006700 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>

	AgregaMenuItem((char*) "Q", EDITOR_TECLAS::TECLA_Q,x1,y2,10,10);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	230a      	movs	r3, #10
 80075f8:	9302      	str	r3, [sp, #8]
 80075fa:	230a      	movs	r3, #10
 80075fc:	9301      	str	r3, [sp, #4]
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	9300      	str	r3, [sp, #0]
 8007602:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007604:	221b      	movs	r2, #27
 8007606:	4930      	ldr	r1, [pc, #192]	@ (80076c8 <_ZN21CPantallaEditorNombreC1Ei+0x2ec>)
 8007608:	f7ff f87a 	bl	8006700 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "W", EDITOR_TECLAS::TECLA_W,x2,y2,10,10);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	230a      	movs	r3, #10
 8007610:	9302      	str	r3, [sp, #8]
 8007612:	230a      	movs	r3, #10
 8007614:	9301      	str	r3, [sp, #4]
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	9300      	str	r3, [sp, #0]
 800761a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800761c:	2220      	movs	r2, #32
 800761e:	492b      	ldr	r1, [pc, #172]	@ (80076cc <_ZN21CPantallaEditorNombreC1Ei+0x2f0>)
 8007620:	f7ff f86e 	bl	8006700 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "E", EDITOR_TECLAS::TECLA_E,x3,y2,10,10);
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	230a      	movs	r3, #10
 8007628:	9302      	str	r3, [sp, #8]
 800762a:	230a      	movs	r3, #10
 800762c:	9301      	str	r3, [sp, #4]
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	9300      	str	r3, [sp, #0]
 8007632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007634:	220b      	movs	r2, #11
 8007636:	4926      	ldr	r1, [pc, #152]	@ (80076d0 <_ZN21CPantallaEditorNombreC1Ei+0x2f4>)
 8007638:	f7ff f862 	bl	8006700 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "R", EDITOR_TECLAS::TECLA_R,x4,y2,10,10);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	230a      	movs	r3, #10
 8007640:	9302      	str	r3, [sp, #8]
 8007642:	230a      	movs	r3, #10
 8007644:	9301      	str	r3, [sp, #4]
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	9300      	str	r3, [sp, #0]
 800764a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800764c:	221c      	movs	r2, #28
 800764e:	4921      	ldr	r1, [pc, #132]	@ (80076d4 <_ZN21CPantallaEditorNombreC1Ei+0x2f8>)
 8007650:	f7ff f856 	bl	8006700 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "T", EDITOR_TECLAS::TECLA_T,x5,y2,10,10);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	230a      	movs	r3, #10
 8007658:	9302      	str	r3, [sp, #8]
 800765a:	230a      	movs	r3, #10
 800765c:	9301      	str	r3, [sp, #4]
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	9300      	str	r3, [sp, #0]
 8007662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007664:	221e      	movs	r2, #30
 8007666:	491c      	ldr	r1, [pc, #112]	@ (80076d8 <_ZN21CPantallaEditorNombreC1Ei+0x2fc>)
 8007668:	f7ff f84a 	bl	8006700 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "Y", EDITOR_TECLAS::TECLA_Y,x6,y2,10,10);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	230a      	movs	r3, #10
 8007670:	9302      	str	r3, [sp, #8]
 8007672:	230a      	movs	r3, #10
 8007674:	9301      	str	r3, [sp, #4]
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800767c:	2222      	movs	r2, #34	@ 0x22
 800767e:	4917      	ldr	r1, [pc, #92]	@ (80076dc <_ZN21CPantallaEditorNombreC1Ei+0x300>)
 8007680:	f7ff f83e 	bl	8006700 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
 8007684:	e02c      	b.n	80076e0 <_ZN21CPantallaEditorNombreC1Ei+0x304>
 8007686:	bf00      	nop
 8007688:	08014a20 	.word	0x08014a20
 800768c:	080157e8 	.word	0x080157e8
 8007690:	08015890 	.word	0x08015890
 8007694:	080158c4 	.word	0x080158c4
 8007698:	08014a2c 	.word	0x08014a2c
 800769c:	08014a34 	.word	0x08014a34
 80076a0:	08014a38 	.word	0x08014a38
 80076a4:	08014a3c 	.word	0x08014a3c
 80076a8:	08014a40 	.word	0x08014a40
 80076ac:	08014a44 	.word	0x08014a44
 80076b0:	08014a48 	.word	0x08014a48
 80076b4:	08014a4c 	.word	0x08014a4c
 80076b8:	08014a50 	.word	0x08014a50
 80076bc:	08014a54 	.word	0x08014a54
 80076c0:	08014a58 	.word	0x08014a58
 80076c4:	08014a5c 	.word	0x08014a5c
 80076c8:	08014a60 	.word	0x08014a60
 80076cc:	08014a64 	.word	0x08014a64
 80076d0:	08014a68 	.word	0x08014a68
 80076d4:	08014a6c 	.word	0x08014a6c
 80076d8:	08014a70 	.word	0x08014a70
 80076dc:	08014a74 	.word	0x08014a74
	AgregaMenuItem((char*) "U", EDITOR_TECLAS::TECLA_U,x7,y2,10,10);
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	230a      	movs	r3, #10
 80076e4:	9302      	str	r3, [sp, #8]
 80076e6:	230a      	movs	r3, #10
 80076e8:	9301      	str	r3, [sp, #4]
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	9300      	str	r3, [sp, #0]
 80076ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f0:	220e      	movs	r2, #14
 80076f2:	499f      	ldr	r1, [pc, #636]	@ (8007970 <_ZN21CPantallaEditorNombreC1Ei+0x594>)
 80076f4:	f7ff f804 	bl	8006700 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "I", EDITOR_TECLAS::TECLA_I,x8,y2,10,10);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	230a      	movs	r3, #10
 80076fc:	9302      	str	r3, [sp, #8]
 80076fe:	230a      	movs	r3, #10
 8007700:	9301      	str	r3, [sp, #4]
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	9300      	str	r3, [sp, #0]
 8007706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007708:	220c      	movs	r2, #12
 800770a:	499a      	ldr	r1, [pc, #616]	@ (8007974 <_ZN21CPantallaEditorNombreC1Ei+0x598>)
 800770c:	f7fe fff8 	bl	8006700 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "O", EDITOR_TECLAS::TECLA_O,x9,y2,10,10);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	230a      	movs	r3, #10
 8007714:	9302      	str	r3, [sp, #8]
 8007716:	230a      	movs	r3, #10
 8007718:	9301      	str	r3, [sp, #4]
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	9300      	str	r3, [sp, #0]
 800771e:	6a3b      	ldr	r3, [r7, #32]
 8007720:	220d      	movs	r2, #13
 8007722:	4995      	ldr	r1, [pc, #596]	@ (8007978 <_ZN21CPantallaEditorNombreC1Ei+0x59c>)
 8007724:	f7fe ffec 	bl	8006700 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "P", EDITOR_TECLAS::TECLA_P,x10,y2,10,10);
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	230a      	movs	r3, #10
 800772c:	9302      	str	r3, [sp, #8]
 800772e:	230a      	movs	r3, #10
 8007730:	9301      	str	r3, [sp, #4]
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	221a      	movs	r2, #26
 800773a:	4990      	ldr	r1, [pc, #576]	@ (800797c <_ZN21CPantallaEditorNombreC1Ei+0x5a0>)
 800773c:	f7fe ffe0 	bl	8006700 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>

	AgregaMenuItem((char*) "A", EDITOR_TECLAS::TECLA_A,x1,y3,10,10);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	230a      	movs	r3, #10
 8007744:	9302      	str	r3, [sp, #8]
 8007746:	230a      	movs	r3, #10
 8007748:	9301      	str	r3, [sp, #4]
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	9300      	str	r3, [sp, #0]
 800774e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007750:	220a      	movs	r2, #10
 8007752:	498b      	ldr	r1, [pc, #556]	@ (8007980 <_ZN21CPantallaEditorNombreC1Ei+0x5a4>)
 8007754:	f7fe ffd4 	bl	8006700 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "S", EDITOR_TECLAS::TECLA_S,x2,y3,10,10);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	230a      	movs	r3, #10
 800775c:	9302      	str	r3, [sp, #8]
 800775e:	230a      	movs	r3, #10
 8007760:	9301      	str	r3, [sp, #4]
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	9300      	str	r3, [sp, #0]
 8007766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007768:	221d      	movs	r2, #29
 800776a:	4986      	ldr	r1, [pc, #536]	@ (8007984 <_ZN21CPantallaEditorNombreC1Ei+0x5a8>)
 800776c:	f7fe ffc8 	bl	8006700 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "D", EDITOR_TECLAS::TECLA_D,x3,y3,10,10);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	230a      	movs	r3, #10
 8007774:	9302      	str	r3, [sp, #8]
 8007776:	230a      	movs	r3, #10
 8007778:	9301      	str	r3, [sp, #4]
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	9300      	str	r3, [sp, #0]
 800777e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007780:	2211      	movs	r2, #17
 8007782:	4981      	ldr	r1, [pc, #516]	@ (8007988 <_ZN21CPantallaEditorNombreC1Ei+0x5ac>)
 8007784:	f7fe ffbc 	bl	8006700 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "F", EDITOR_TECLAS::TECLA_F,x4,y3,10,10);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	230a      	movs	r3, #10
 800778c:	9302      	str	r3, [sp, #8]
 800778e:	230a      	movs	r3, #10
 8007790:	9301      	str	r3, [sp, #4]
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	9300      	str	r3, [sp, #0]
 8007796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007798:	2212      	movs	r2, #18
 800779a:	497c      	ldr	r1, [pc, #496]	@ (800798c <_ZN21CPantallaEditorNombreC1Ei+0x5b0>)
 800779c:	f7fe ffb0 	bl	8006700 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "G", EDITOR_TECLAS::TECLA_G,x5,y3,10,10);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	230a      	movs	r3, #10
 80077a4:	9302      	str	r3, [sp, #8]
 80077a6:	230a      	movs	r3, #10
 80077a8:	9301      	str	r3, [sp, #4]
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	9300      	str	r3, [sp, #0]
 80077ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b0:	2213      	movs	r2, #19
 80077b2:	4977      	ldr	r1, [pc, #476]	@ (8007990 <_ZN21CPantallaEditorNombreC1Ei+0x5b4>)
 80077b4:	f7fe ffa4 	bl	8006700 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "H", EDITOR_TECLAS::TECLA_H,x6,y3,10,10);
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	230a      	movs	r3, #10
 80077bc:	9302      	str	r3, [sp, #8]
 80077be:	230a      	movs	r3, #10
 80077c0:	9301      	str	r3, [sp, #4]
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	9300      	str	r3, [sp, #0]
 80077c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077c8:	2214      	movs	r2, #20
 80077ca:	4972      	ldr	r1, [pc, #456]	@ (8007994 <_ZN21CPantallaEditorNombreC1Ei+0x5b8>)
 80077cc:	f7fe ff98 	bl	8006700 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "J", EDITOR_TECLAS::TECLA_J,x7,y3,10,10);
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	230a      	movs	r3, #10
 80077d4:	9302      	str	r3, [sp, #8]
 80077d6:	230a      	movs	r3, #10
 80077d8:	9301      	str	r3, [sp, #4]
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	9300      	str	r3, [sp, #0]
 80077de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e0:	2215      	movs	r2, #21
 80077e2:	496d      	ldr	r1, [pc, #436]	@ (8007998 <_ZN21CPantallaEditorNombreC1Ei+0x5bc>)
 80077e4:	f7fe ff8c 	bl	8006700 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "K", EDITOR_TECLAS::TECLA_K,x8,y3,10,10);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	230a      	movs	r3, #10
 80077ec:	9302      	str	r3, [sp, #8]
 80077ee:	230a      	movs	r3, #10
 80077f0:	9301      	str	r3, [sp, #4]
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	9300      	str	r3, [sp, #0]
 80077f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f8:	2216      	movs	r2, #22
 80077fa:	4968      	ldr	r1, [pc, #416]	@ (800799c <_ZN21CPantallaEditorNombreC1Ei+0x5c0>)
 80077fc:	f7fe ff80 	bl	8006700 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "L", EDITOR_TECLAS::TECLA_L,x9,y3,10,10);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	230a      	movs	r3, #10
 8007804:	9302      	str	r3, [sp, #8]
 8007806:	230a      	movs	r3, #10
 8007808:	9301      	str	r3, [sp, #4]
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	9300      	str	r3, [sp, #0]
 800780e:	6a3b      	ldr	r3, [r7, #32]
 8007810:	2217      	movs	r2, #23
 8007812:	4963      	ldr	r1, [pc, #396]	@ (80079a0 <_ZN21CPantallaEditorNombreC1Ei+0x5c4>)
 8007814:	f7fe ff74 	bl	8006700 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "Z", EDITOR_TECLAS::TECLA_Z,x10,y3,10,10);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	230a      	movs	r3, #10
 800781c:	9302      	str	r3, [sp, #8]
 800781e:	230a      	movs	r3, #10
 8007820:	9301      	str	r3, [sp, #4]
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	2223      	movs	r2, #35	@ 0x23
 800782a:	495e      	ldr	r1, [pc, #376]	@ (80079a4 <_ZN21CPantallaEditorNombreC1Ei+0x5c8>)
 800782c:	f7fe ff68 	bl	8006700 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>

	AgregaMenuItem((char*) "X", EDITOR_TECLAS::TECLA_X,x2,y4,10,10);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	230a      	movs	r3, #10
 8007834:	9302      	str	r3, [sp, #8]
 8007836:	230a      	movs	r3, #10
 8007838:	9301      	str	r3, [sp, #4]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007840:	2221      	movs	r2, #33	@ 0x21
 8007842:	4959      	ldr	r1, [pc, #356]	@ (80079a8 <_ZN21CPantallaEditorNombreC1Ei+0x5cc>)
 8007844:	f7fe ff5c 	bl	8006700 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "C", EDITOR_TECLAS::TECLA_C,x3,y4,10,10);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	230a      	movs	r3, #10
 800784c:	9302      	str	r3, [sp, #8]
 800784e:	230a      	movs	r3, #10
 8007850:	9301      	str	r3, [sp, #4]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007858:	2210      	movs	r2, #16
 800785a:	4954      	ldr	r1, [pc, #336]	@ (80079ac <_ZN21CPantallaEditorNombreC1Ei+0x5d0>)
 800785c:	f7fe ff50 	bl	8006700 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "V", EDITOR_TECLAS::TECLA_V,x4,y4,10,10);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	230a      	movs	r3, #10
 8007864:	9302      	str	r3, [sp, #8]
 8007866:	230a      	movs	r3, #10
 8007868:	9301      	str	r3, [sp, #4]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	9300      	str	r3, [sp, #0]
 800786e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007870:	221f      	movs	r2, #31
 8007872:	494f      	ldr	r1, [pc, #316]	@ (80079b0 <_ZN21CPantallaEditorNombreC1Ei+0x5d4>)
 8007874:	f7fe ff44 	bl	8006700 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "__", EDITOR_TECLAS::TECLA_TABULADOR,x5,y4,10,10);
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	230a      	movs	r3, #10
 800787c:	9302      	str	r3, [sp, #8]
 800787e:	230a      	movs	r3, #10
 8007880:	9301      	str	r3, [sp, #4]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	9300      	str	r3, [sp, #0]
 8007886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007888:	2227      	movs	r2, #39	@ 0x27
 800788a:	494a      	ldr	r1, [pc, #296]	@ (80079b4 <_ZN21CPantallaEditorNombreC1Ei+0x5d8>)
 800788c:	f7fe ff38 	bl	8006700 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "B", EDITOR_TECLAS::TECLA_B,x7,y4,10,10);
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	230a      	movs	r3, #10
 8007894:	9302      	str	r3, [sp, #8]
 8007896:	230a      	movs	r3, #10
 8007898:	9301      	str	r3, [sp, #4]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	9300      	str	r3, [sp, #0]
 800789e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a0:	220f      	movs	r2, #15
 80078a2:	4945      	ldr	r1, [pc, #276]	@ (80079b8 <_ZN21CPantallaEditorNombreC1Ei+0x5dc>)
 80078a4:	f7fe ff2c 	bl	8006700 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "N", EDITOR_TECLAS::TECLA_N,x8,y4,10,10);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	230a      	movs	r3, #10
 80078ac:	9302      	str	r3, [sp, #8]
 80078ae:	230a      	movs	r3, #10
 80078b0:	9301      	str	r3, [sp, #4]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	9300      	str	r3, [sp, #0]
 80078b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b8:	2219      	movs	r2, #25
 80078ba:	4940      	ldr	r1, [pc, #256]	@ (80079bc <_ZN21CPantallaEditorNombreC1Ei+0x5e0>)
 80078bc:	f7fe ff20 	bl	8006700 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "M", EDITOR_TECLAS::TECLA_M,x9,y4,10,10);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	230a      	movs	r3, #10
 80078c4:	9302      	str	r3, [sp, #8]
 80078c6:	230a      	movs	r3, #10
 80078c8:	9301      	str	r3, [sp, #4]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	9300      	str	r3, [sp, #0]
 80078ce:	6a3b      	ldr	r3, [r7, #32]
 80078d0:	2218      	movs	r2, #24
 80078d2:	493b      	ldr	r1, [pc, #236]	@ (80079c0 <_ZN21CPantallaEditorNombreC1Ei+0x5e4>)
 80078d4:	f7fe ff14 	bl	8006700 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>

	AgregaMenuItem((char*) "<-", EDITOR_TECLAS::TECLA_DELETE,x10+30,y1,20,10,COLOR::RED,COLOR::BLACK);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	f103 021e 	add.w	r2, r3, #30
 80078e0:	2300      	movs	r3, #0
 80078e2:	9304      	str	r3, [sp, #16]
 80078e4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80078e8:	9303      	str	r3, [sp, #12]
 80078ea:	230a      	movs	r3, #10
 80078ec:	9302      	str	r3, [sp, #8]
 80078ee:	2314      	movs	r3, #20
 80078f0:	9301      	str	r3, [sp, #4]
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	9300      	str	r3, [sp, #0]
 80078f6:	4613      	mov	r3, r2
 80078f8:	2224      	movs	r2, #36	@ 0x24
 80078fa:	4932      	ldr	r1, [pc, #200]	@ (80079c4 <_ZN21CPantallaEditorNombreC1Ei+0x5e8>)
 80078fc:	f7fe ff1b 	bl	8006736 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiiiii>


	AgregaMenuItem((char*) "Aceptar", EDITOR_TECLAS::TECLA_ACEPTAR,x1,y5,10,10,COLOR::BLUE,COLOR::BLACK);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	2300      	movs	r3, #0
 8007904:	9304      	str	r3, [sp, #16]
 8007906:	231f      	movs	r3, #31
 8007908:	9303      	str	r3, [sp, #12]
 800790a:	230a      	movs	r3, #10
 800790c:	9302      	str	r3, [sp, #8]
 800790e:	230a      	movs	r3, #10
 8007910:	9301      	str	r3, [sp, #4]
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	9300      	str	r3, [sp, #0]
 8007916:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007918:	2225      	movs	r2, #37	@ 0x25
 800791a:	492b      	ldr	r1, [pc, #172]	@ (80079c8 <_ZN21CPantallaEditorNombreC1Ei+0x5ec>)
 800791c:	f7fe ff0b 	bl	8006736 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiiiii>
	AgregaMenuItem((char*) "Cancelar", EDITOR_TECLAS::TECLA_CANCELAR,x8,y5,10,10,COLOR::RED,COLOR::BLACK);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	2300      	movs	r3, #0
 8007924:	9304      	str	r3, [sp, #16]
 8007926:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800792a:	9303      	str	r3, [sp, #12]
 800792c:	230a      	movs	r3, #10
 800792e:	9302      	str	r3, [sp, #8]
 8007930:	230a      	movs	r3, #10
 8007932:	9301      	str	r3, [sp, #4]
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	9300      	str	r3, [sp, #0]
 8007938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800793a:	2226      	movs	r2, #38	@ 0x26
 800793c:	4923      	ldr	r1, [pc, #140]	@ (80079cc <_ZN21CPantallaEditorNombreC1Ei+0x5f0>)
 800793e:	f7fe fefa 	bl	8006736 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiiiii>

	for(int i=0;i<=MAXTEXT;i++)
 8007942:	2300      	movs	r3, #0
 8007944:	647b      	str	r3, [r7, #68]	@ 0x44
 8007946:	e008      	b.n	800795a <_ZN21CPantallaEditorNombreC1Ei+0x57e>
		Texto[i]='\0';
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800794c:	4413      	add	r3, r2
 800794e:	33c4      	adds	r3, #196	@ 0xc4
 8007950:	2200      	movs	r2, #0
 8007952:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<=MAXTEXT;i++)
 8007954:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007956:	3301      	adds	r3, #1
 8007958:	647b      	str	r3, [r7, #68]	@ 0x44
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007960:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007962:	429a      	cmp	r2, r3
 8007964:	ddf0      	ble.n	8007948 <_ZN21CPantallaEditorNombreC1Ei+0x56c>

}
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4618      	mov	r0, r3
 800796a:	374c      	adds	r7, #76	@ 0x4c
 800796c:	46bd      	mov	sp, r7
 800796e:	bd90      	pop	{r4, r7, pc}
 8007970:	08014a78 	.word	0x08014a78
 8007974:	08014a7c 	.word	0x08014a7c
 8007978:	08014a80 	.word	0x08014a80
 800797c:	08014a84 	.word	0x08014a84
 8007980:	08014a88 	.word	0x08014a88
 8007984:	08014a8c 	.word	0x08014a8c
 8007988:	08014a90 	.word	0x08014a90
 800798c:	08014a94 	.word	0x08014a94
 8007990:	08014a98 	.word	0x08014a98
 8007994:	08014a9c 	.word	0x08014a9c
 8007998:	08014aa0 	.word	0x08014aa0
 800799c:	08014aa4 	.word	0x08014aa4
 80079a0:	08014aa8 	.word	0x08014aa8
 80079a4:	08014aac 	.word	0x08014aac
 80079a8:	08014ab0 	.word	0x08014ab0
 80079ac:	08014ab4 	.word	0x08014ab4
 80079b0:	08014ab8 	.word	0x08014ab8
 80079b4:	08014abc 	.word	0x08014abc
 80079b8:	08014ac0 	.word	0x08014ac0
 80079bc:	08014ac4 	.word	0x08014ac4
 80079c0:	08014ac8 	.word	0x08014ac8
 80079c4:	08014acc 	.word	0x08014acc
 80079c8:	08014ad0 	.word	0x08014ad0
 80079cc:	08014ad8 	.word	0x08014ad8

080079d0 <_ZN21CPantallaEditorNombreD1Ev>:

CPantallaEditorNombre::~CPantallaEditorNombre()
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	4a09      	ldr	r2, [pc, #36]	@ (8007a00 <_ZN21CPantallaEditorNombreD1Ev+0x30>)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	601a      	str	r2, [r3, #0]
 80079de:	4a09      	ldr	r2, [pc, #36]	@ (8007a04 <_ZN21CPantallaEditorNombreD1Ev+0x34>)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80079e4:	4a08      	ldr	r2, [pc, #32]	@ (8007a08 <_ZN21CPantallaEditorNombreD1Ev+0x38>)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	// TODO Auto-generated destructor stub
}
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7fe fdc0 	bl	8006574 <_ZN17CPantallaMenuBaseD1Ev>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	4618      	mov	r0, r3
 80079f8:	3708      	adds	r7, #8
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	080157e8 	.word	0x080157e8
 8007a04:	08015890 	.word	0x08015890
 8007a08:	080158c4 	.word	0x080158c4

08007a0c <_ZThn48_N21CPantallaEditorNombreD1Ev>:
	int PosicionTexto=0;
	int ID_Rampa;
	void GuardaNombreRampa();
public:
	CPantallaEditorNombre(int id_Rampa);
	virtual ~CPantallaEditorNombre();
 8007a0c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8007a10:	f7ff bfde 	b.w	80079d0 <_ZN21CPantallaEditorNombreD1Ev>

08007a14 <_ZThn172_N21CPantallaEditorNombreD1Ev>:
 8007a14:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8007a18:	f7ff bfda 	b.w	80079d0 <_ZN21CPantallaEditorNombreD1Ev>

08007a1c <_ZN21CPantallaEditorNombreD0Ev>:
CPantallaEditorNombre::~CPantallaEditorNombre()
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
}
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f7ff ffd3 	bl	80079d0 <_ZN21CPantallaEditorNombreD1Ev>
 8007a2a:	21dc      	movs	r1, #220	@ 0xdc
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f00a f855 	bl	8011adc <_ZdlPvj>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4618      	mov	r0, r3
 8007a36:	3708      	adds	r7, #8
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <_ZThn172_N21CPantallaEditorNombreD0Ev>:
 8007a3c:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8007a40:	f7ff bfec 	b.w	8007a1c <_ZN21CPantallaEditorNombreD0Ev>

08007a44 <_ZThn48_N21CPantallaEditorNombreD0Ev>:
 8007a44:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8007a48:	f7ff bfe8 	b.w	8007a1c <_ZN21CPantallaEditorNombreD0Ev>

08007a4c <_ZN21CPantallaEditorNombre4ShowEv>:

void CPantallaEditorNombre::Show()
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
	CPantallaMenuBase::Show();
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7fe fe16 	bl	8006688 <_ZN17CPantallaMenuBase4ShowEv>
	LabelNombre->Show();
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	334c      	adds	r3, #76	@ 0x4c
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4610      	mov	r0, r2
 8007a70:	4798      	blx	r3
	TextNombre->Show();
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	334c      	adds	r3, #76	@ 0x4c
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4610      	mov	r0, r2
 8007a86:	4798      	blx	r3
}
 8007a88:	bf00      	nop
 8007a8a:	3708      	adds	r7, #8
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <_ZN21CPantallaEditorNombre8RefrescaEv>:
void CPantallaEditorNombre::Refresca()
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
}
 8007a98:	bf00      	nop
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <_ZN21CPantallaEditorNombre11OnMenuEventEi>:
void CPantallaEditorNombre::OnMenuEvent(int identificador)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
	char tecla='\0';
 8007aae:	2300      	movs	r3, #0
 8007ab0:	73fb      	strb	r3, [r7, #15]
	switch(identificador)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	2b27      	cmp	r3, #39	@ 0x27
 8007ab6:	f200 80cd 	bhi.w	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
 8007aba:	a201      	add	r2, pc, #4	@ (adr r2, 8007ac0 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1c>)
 8007abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac0:	08007b61 	.word	0x08007b61
 8007ac4:	08007b67 	.word	0x08007b67
 8007ac8:	08007b6d 	.word	0x08007b6d
 8007acc:	08007b73 	.word	0x08007b73
 8007ad0:	08007b79 	.word	0x08007b79
 8007ad4:	08007b7f 	.word	0x08007b7f
 8007ad8:	08007b85 	.word	0x08007b85
 8007adc:	08007b8b 	.word	0x08007b8b
 8007ae0:	08007b91 	.word	0x08007b91
 8007ae4:	08007b97 	.word	0x08007b97
 8007ae8:	08007b9d 	.word	0x08007b9d
 8007aec:	08007ba3 	.word	0x08007ba3
 8007af0:	08007ba9 	.word	0x08007ba9
 8007af4:	08007baf 	.word	0x08007baf
 8007af8:	08007bb5 	.word	0x08007bb5
 8007afc:	08007bbb 	.word	0x08007bbb
 8007b00:	08007bc1 	.word	0x08007bc1
 8007b04:	08007bc7 	.word	0x08007bc7
 8007b08:	08007bcd 	.word	0x08007bcd
 8007b0c:	08007bd3 	.word	0x08007bd3
 8007b10:	08007bd9 	.word	0x08007bd9
 8007b14:	08007bdf 	.word	0x08007bdf
 8007b18:	08007be5 	.word	0x08007be5
 8007b1c:	08007beb 	.word	0x08007beb
 8007b20:	08007bf1 	.word	0x08007bf1
 8007b24:	08007bf7 	.word	0x08007bf7
 8007b28:	08007bfd 	.word	0x08007bfd
 8007b2c:	08007c03 	.word	0x08007c03
 8007b30:	08007c09 	.word	0x08007c09
 8007b34:	08007c0f 	.word	0x08007c0f
 8007b38:	08007c15 	.word	0x08007c15
 8007b3c:	08007c1b 	.word	0x08007c1b
 8007b40:	08007c27 	.word	0x08007c27
 8007b44:	08007c2d 	.word	0x08007c2d
 8007b48:	08007c33 	.word	0x08007c33
 8007b4c:	08007c39 	.word	0x08007c39
 8007b50:	08007c3f 	.word	0x08007c3f
 8007b54:	08007c45 	.word	0x08007c45
 8007b58:	08007c4d 	.word	0x08007c4d
 8007b5c:	08007c21 	.word	0x08007c21
	{
	case EDITOR_TECLAS::TECLA_0:
		tecla='0';
 8007b60:	2330      	movs	r3, #48	@ 0x30
 8007b62:	73fb      	strb	r3, [r7, #15]
		break;
 8007b64:	e076      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_1:
		tecla='1';
 8007b66:	2331      	movs	r3, #49	@ 0x31
 8007b68:	73fb      	strb	r3, [r7, #15]
		break;
 8007b6a:	e073      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_2:
		tecla='2';
 8007b6c:	2332      	movs	r3, #50	@ 0x32
 8007b6e:	73fb      	strb	r3, [r7, #15]
		break;
 8007b70:	e070      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_3:
		tecla='3';
 8007b72:	2333      	movs	r3, #51	@ 0x33
 8007b74:	73fb      	strb	r3, [r7, #15]
		break;
 8007b76:	e06d      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_4:
		tecla='4';
 8007b78:	2334      	movs	r3, #52	@ 0x34
 8007b7a:	73fb      	strb	r3, [r7, #15]
		break;
 8007b7c:	e06a      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_5:
		tecla='5';
 8007b7e:	2335      	movs	r3, #53	@ 0x35
 8007b80:	73fb      	strb	r3, [r7, #15]
		break;
 8007b82:	e067      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_6:
		tecla='6';
 8007b84:	2336      	movs	r3, #54	@ 0x36
 8007b86:	73fb      	strb	r3, [r7, #15]
		break;
 8007b88:	e064      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_7:
		tecla='7';
 8007b8a:	2337      	movs	r3, #55	@ 0x37
 8007b8c:	73fb      	strb	r3, [r7, #15]
		break;
 8007b8e:	e061      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_8:
		tecla='8';
 8007b90:	2338      	movs	r3, #56	@ 0x38
 8007b92:	73fb      	strb	r3, [r7, #15]
		break;
 8007b94:	e05e      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_9:
		tecla='9';
 8007b96:	2339      	movs	r3, #57	@ 0x39
 8007b98:	73fb      	strb	r3, [r7, #15]
		break;
 8007b9a:	e05b      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_A:
		tecla='A';
 8007b9c:	2341      	movs	r3, #65	@ 0x41
 8007b9e:	73fb      	strb	r3, [r7, #15]
		break;
 8007ba0:	e058      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_E:
		tecla='E';
 8007ba2:	2345      	movs	r3, #69	@ 0x45
 8007ba4:	73fb      	strb	r3, [r7, #15]
		break;
 8007ba6:	e055      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_I:
		tecla='I';
 8007ba8:	2349      	movs	r3, #73	@ 0x49
 8007baa:	73fb      	strb	r3, [r7, #15]
		break;
 8007bac:	e052      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_O:
		tecla='O';
 8007bae:	234f      	movs	r3, #79	@ 0x4f
 8007bb0:	73fb      	strb	r3, [r7, #15]
		break;
 8007bb2:	e04f      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_U:
		tecla='U';
 8007bb4:	2355      	movs	r3, #85	@ 0x55
 8007bb6:	73fb      	strb	r3, [r7, #15]
		break;
 8007bb8:	e04c      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_B:
		tecla='B';
 8007bba:	2342      	movs	r3, #66	@ 0x42
 8007bbc:	73fb      	strb	r3, [r7, #15]
		break;
 8007bbe:	e049      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_C:
		tecla='C';
 8007bc0:	2343      	movs	r3, #67	@ 0x43
 8007bc2:	73fb      	strb	r3, [r7, #15]
		break;
 8007bc4:	e046      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_D:
		tecla='D';
 8007bc6:	2344      	movs	r3, #68	@ 0x44
 8007bc8:	73fb      	strb	r3, [r7, #15]
		break;
 8007bca:	e043      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_F:
		tecla='F';
 8007bcc:	2346      	movs	r3, #70	@ 0x46
 8007bce:	73fb      	strb	r3, [r7, #15]
		break;
 8007bd0:	e040      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_G:
		tecla='G';
 8007bd2:	2347      	movs	r3, #71	@ 0x47
 8007bd4:	73fb      	strb	r3, [r7, #15]
		break;
 8007bd6:	e03d      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_H:
		tecla='H';
 8007bd8:	2348      	movs	r3, #72	@ 0x48
 8007bda:	73fb      	strb	r3, [r7, #15]
		break;
 8007bdc:	e03a      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_J:
		tecla='J';
 8007bde:	234a      	movs	r3, #74	@ 0x4a
 8007be0:	73fb      	strb	r3, [r7, #15]
		break;
 8007be2:	e037      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_K:
		tecla='K';
 8007be4:	234b      	movs	r3, #75	@ 0x4b
 8007be6:	73fb      	strb	r3, [r7, #15]
		break;
 8007be8:	e034      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_L:
		tecla='L';
 8007bea:	234c      	movs	r3, #76	@ 0x4c
 8007bec:	73fb      	strb	r3, [r7, #15]
		break;
 8007bee:	e031      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_M:
		tecla='M';
 8007bf0:	234d      	movs	r3, #77	@ 0x4d
 8007bf2:	73fb      	strb	r3, [r7, #15]
		break;
 8007bf4:	e02e      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_N:
		tecla='N';
 8007bf6:	234e      	movs	r3, #78	@ 0x4e
 8007bf8:	73fb      	strb	r3, [r7, #15]
		break;
 8007bfa:	e02b      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_P:
		tecla='P';
 8007bfc:	2350      	movs	r3, #80	@ 0x50
 8007bfe:	73fb      	strb	r3, [r7, #15]
		break;
 8007c00:	e028      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_Q:
		tecla='Q';
 8007c02:	2351      	movs	r3, #81	@ 0x51
 8007c04:	73fb      	strb	r3, [r7, #15]
		break;
 8007c06:	e025      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_R:
		tecla='R';
 8007c08:	2352      	movs	r3, #82	@ 0x52
 8007c0a:	73fb      	strb	r3, [r7, #15]
		break;
 8007c0c:	e022      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_S:
		tecla='S';
 8007c0e:	2353      	movs	r3, #83	@ 0x53
 8007c10:	73fb      	strb	r3, [r7, #15]
		break;
 8007c12:	e01f      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_T:
		tecla='T';
 8007c14:	2354      	movs	r3, #84	@ 0x54
 8007c16:	73fb      	strb	r3, [r7, #15]
		break;
 8007c18:	e01c      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_V:
		tecla='V';
 8007c1a:	2356      	movs	r3, #86	@ 0x56
 8007c1c:	73fb      	strb	r3, [r7, #15]
		break;
 8007c1e:	e019      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_TABULADOR:
		tecla=' ';
 8007c20:	2320      	movs	r3, #32
 8007c22:	73fb      	strb	r3, [r7, #15]
		break;
 8007c24:	e016      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_W:
		tecla='W';
 8007c26:	2357      	movs	r3, #87	@ 0x57
 8007c28:	73fb      	strb	r3, [r7, #15]
		break;
 8007c2a:	e013      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_X:
		tecla='X';
 8007c2c:	2358      	movs	r3, #88	@ 0x58
 8007c2e:	73fb      	strb	r3, [r7, #15]
		break;
 8007c30:	e010      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_Y:
		tecla='Y';
 8007c32:	2359      	movs	r3, #89	@ 0x59
 8007c34:	73fb      	strb	r3, [r7, #15]
		break;
 8007c36:	e00d      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_Z:
		tecla='Z';
 8007c38:	235a      	movs	r3, #90	@ 0x5a
 8007c3a:	73fb      	strb	r3, [r7, #15]
		break;
 8007c3c:	e00a      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_DELETE:
		tecla='<';
 8007c3e:	233c      	movs	r3, #60	@ 0x3c
 8007c40:	73fb      	strb	r3, [r7, #15]
		break;
 8007c42:	e007      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_ACEPTAR:
		GuardaNombreRampa();
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 f8cb 	bl	8007de0 <_ZN21CPantallaEditorNombre17GuardaNombreRampaEv>
		break;
 8007c4a:	e003      	b.n	8007c54 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_CANCELAR:
		ManejadorPantallas.MuestraMenuRampa();
 8007c4c:	4827      	ldr	r0, [pc, #156]	@ (8007cec <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x248>)
 8007c4e:	f7fc f90b 	bl	8003e68 <_ZN19CManejadorPantallas16MuestraMenuRampaEv>
		break;
 8007c52:	bf00      	nop

	}
	if(tecla!='\0')
 8007c54:	7bfb      	ldrb	r3, [r7, #15]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d043      	beq.n	8007ce2 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x23e>
	{
		if(tecla=='<')
 8007c5a:	7bfb      	ldrb	r3, [r7, #15]
 8007c5c:	2b3c      	cmp	r3, #60	@ 0x3c
 8007c5e:	d114      	bne.n	8007c8a <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1e6>
		{
			Texto[PosicionTexto]='\0';
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	4413      	add	r3, r2
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
			if(PosicionTexto>0)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	dd1f      	ble.n	8007cba <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x216>
				PosicionTexto--;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007c80:	1e5a      	subs	r2, r3, #1
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8007c88:	e017      	b.n	8007cba <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x216>
		}
		else
		{
			Texto[PosicionTexto]=tecla;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	4413      	add	r3, r2
 8007c94:	7bfa      	ldrb	r2, [r7, #15]
 8007c96:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
			if(PosicionTexto<MAXTEXT-1)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	da06      	bge.n	8007cba <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x216>
				PosicionTexto++;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007cb2:	1c5a      	adds	r2, r3, #1
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
		}
		TextNombre->SetTexto(Texto);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	33c4      	adds	r3, #196	@ 0xc4
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	4610      	mov	r0, r2
 8007cc8:	f7fb f934 	bl	8002f34 <_ZN12CEtiquetaTft8SetTextoEPcz>
		TextNombre->Show();
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	334c      	adds	r3, #76	@ 0x4c
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4610      	mov	r0, r2
 8007ce0:	4798      	blx	r3
	}
}
 8007ce2:	bf00      	nop
 8007ce4:	3710      	adds	r7, #16
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	2000025c 	.word	0x2000025c

08007cf0 <_ZThn172_N21CPantallaEditorNombre11OnMenuEventEi>:
	virtual void Show();
	virtual void Refresca();
	virtual void OnMenuEvent(int identificador);
 8007cf0:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8007cf4:	f7ff bed6 	b.w	8007aa4 <_ZN21CPantallaEditorNombre11OnMenuEventEi>

08007cf8 <_ZN21CPantallaEditorNombre8AsignaIDEi>:
void CPantallaEditorNombre::AsignaID(int id_Rampa)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b08a      	sub	sp, #40	@ 0x28
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
	if(id_Rampa==-1)
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d08:	d12a      	bne.n	8007d60 <_ZN21CPantallaEditorNombre8AsignaIDEi+0x68>
	{
		for(int i=0;i<MAXTEXT;i++)
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d0e:	e008      	b.n	8007d22 <_ZN21CPantallaEditorNombre8AsignaIDEi+0x2a>
			Texto[i]='\0';
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d14:	4413      	add	r3, r2
 8007d16:	33c4      	adds	r3, #196	@ 0xc4
 8007d18:	2200      	movs	r2, #0
 8007d1a:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<MAXTEXT;i++)
 8007d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d1e:	3301      	adds	r3, #1
 8007d20:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007d28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	dbf0      	blt.n	8007d10 <_ZN21CPantallaEditorNombre8AsignaIDEi+0x18>
		PosicionTexto=0;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
		TextNombre->SetTexto(Texto);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	33c4      	adds	r3, #196	@ 0xc4
 8007d40:	4619      	mov	r1, r3
 8007d42:	4610      	mov	r0, r2
 8007d44:	f7fb f8f6 	bl	8002f34 <_ZN12CEtiquetaTft8SetTextoEPcz>
		TextNombre->Show();
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	334c      	adds	r3, #76	@ 0x4c
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4610      	mov	r0, r2
 8007d5c:	4798      	blx	r3
 8007d5e:	e034      	b.n	8007dca <_ZN21CPantallaEditorNombre8AsignaIDEi+0xd2>
	}
	else
	{
			CRampa rampa=ControladorRampas.DameRampa(id_Rampa);
 8007d60:	f107 030c 	add.w	r3, r7, #12
 8007d64:	683a      	ldr	r2, [r7, #0]
 8007d66:	491d      	ldr	r1, [pc, #116]	@ (8007ddc <_ZN21CPantallaEditorNombre8AsignaIDEi+0xe4>)
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f003 fbec 	bl	800b546 <_ZN18CControladorRampas9DameRampaEi>
			strcpy(Texto,rampa.Nombre);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f103 02c4 	add.w	r2, r3, #196	@ 0xc4
 8007d74:	f107 030c 	add.w	r3, r7, #12
 8007d78:	3308      	adds	r3, #8
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	4610      	mov	r0, r2
 8007d7e:	f00a fde2 	bl	8012946 <strcpy>
			PosicionTexto=strlen(Texto)-1;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	33c4      	adds	r3, #196	@ 0xc4
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7f8 fa7a 	bl	8000280 <strlen>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	461a      	mov	r2, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
			TextNombre->SetTexto(Texto);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	33c4      	adds	r3, #196	@ 0xc4
 8007da2:	4619      	mov	r1, r3
 8007da4:	4610      	mov	r0, r2
 8007da6:	f7fb f8c5 	bl	8002f34 <_ZN12CEtiquetaTft8SetTextoEPcz>
			TextNombre->Show();
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	334c      	adds	r3, #76	@ 0x4c
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4610      	mov	r0, r2
 8007dbe:	4798      	blx	r3
	}
 8007dc0:	f107 030c 	add.w	r3, r7, #12
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f003 fecb 	bl	800bb60 <_ZN6CRampaD1Ev>
	ID_Rampa=id_Rampa;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	683a      	ldr	r2, [r7, #0]
 8007dce:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
}
 8007dd2:	bf00      	nop
 8007dd4:	3728      	adds	r7, #40	@ 0x28
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	20000364 	.word	0x20000364

08007de0 <_ZN21CPantallaEditorNombre17GuardaNombreRampaEv>:
void CPantallaEditorNombre::GuardaNombreRampa()
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b088      	sub	sp, #32
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
	if(ID_Rampa==-1)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df2:	d113      	bne.n	8007e1c <_ZN21CPantallaEditorNombre17GuardaNombreRampaEv+0x3c>
	{
		//hay que crear la rampa
		CRampa rampa=ControladorRampas.AgregaRampa(Texto);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f103 02c4 	add.w	r2, r3, #196	@ 0xc4
 8007dfa:	f107 0308 	add.w	r3, r7, #8
 8007dfe:	4911      	ldr	r1, [pc, #68]	@ (8007e44 <_ZN21CPantallaEditorNombre17GuardaNombreRampaEv+0x64>)
 8007e00:	4618      	mov	r0, r3
 8007e02:	f003 fd03 	bl	800b80c <_ZN18CControladorRampas11AgregaRampaEPc>
		ID_Rampa=rampa.ID_RAMPA;
 8007e06:	89fb      	ldrh	r3, [r7, #14]
 8007e08:	461a      	mov	r2, r3
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	}
 8007e10:	f107 0308 	add.w	r3, r7, #8
 8007e14:	4618      	mov	r0, r3
 8007e16:	f003 fea3 	bl	800bb60 <_ZN6CRampaD1Ev>
 8007e1a:	e008      	b.n	8007e2e <_ZN21CPantallaEditorNombre17GuardaNombreRampaEv+0x4e>
	else
	{
		//hay que actualizar
		ControladorRampas.ActualizaRampa(ID_Rampa, Texto);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 10d8 	ldr.w	r1, [r3, #216]	@ 0xd8
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	33c4      	adds	r3, #196	@ 0xc4
 8007e26:	461a      	mov	r2, r3
 8007e28:	4806      	ldr	r0, [pc, #24]	@ (8007e44 <_ZN21CPantallaEditorNombre17GuardaNombreRampaEv+0x64>)
 8007e2a:	f003 fd5f 	bl	800b8ec <_ZN18CControladorRampas14ActualizaRampaEiPc>
	}
	ManejadorPantallas.AsignaPantallaPasosRampa(ID_Rampa);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007e34:	4619      	mov	r1, r3
 8007e36:	4804      	ldr	r0, [pc, #16]	@ (8007e48 <_ZN21CPantallaEditorNombre17GuardaNombreRampaEv+0x68>)
 8007e38:	f7fc f97d 	bl	8004136 <_ZN19CManejadorPantallas24AsignaPantallaPasosRampaEi>

}
 8007e3c:	bf00      	nop
 8007e3e:	3720      	adds	r7, #32
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	20000364 	.word	0x20000364
 8007e48:	2000025c 	.word	0x2000025c

08007e4c <_ZN21CPantallaEditorNombre12SeleccionadaEv>:
void CPantallaEditorNombre::Seleccionada()
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]

}
 8007e54:	bf00      	nop
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <_ZN21CPantallaEditorNombre20OnBotonUnoClickEventEv>:
void CPantallaEditorNombre::OnBotonUnoClickEvent()
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
	OnMenuEvent(EDITOR_TECLAS::TECLA_ACEPTAR);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	3390      	adds	r3, #144	@ 0x90
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2125      	movs	r1, #37	@ 0x25
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	4798      	blx	r3
}
 8007e76:	bf00      	nop
 8007e78:	3708      	adds	r7, #8
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <_ZThn48_N21CPantallaEditorNombre20OnBotonUnoClickEventEv>:
	void AsignaID(int id_Rampa);
	virtual void Seleccionada();
	virtual void OnBotonUnoClickEvent();
 8007e7e:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8007e82:	f7ff bfed 	b.w	8007e60 <_ZN21CPantallaEditorNombre20OnBotonUnoClickEventEv>

08007e86 <_ZN21CPantallaEditorNombre21OnBotonTresClickEventEv>:
void CPantallaEditorNombre::OnBotonTresClickEvent()
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b082      	sub	sp, #8
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
	OnMenuEvent(EDITOR_TECLAS::TECLA_CANCELAR);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	3390      	adds	r3, #144	@ 0x90
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2126      	movs	r1, #38	@ 0x26
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	4798      	blx	r3

}
 8007e9c:	bf00      	nop
 8007e9e:	3708      	adds	r7, #8
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <_ZThn48_N21CPantallaEditorNombre21OnBotonTresClickEventEv>:
	virtual void OnBotonTresClickEvent();
 8007ea4:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8007ea8:	f7ff bfed 	b.w	8007e86 <_ZN21CPantallaEditorNombre21OnBotonTresClickEventEv>

08007eac <_ZN21CPantallaEditorNombre23OnBotonCuatroClickEventEv>:
void CPantallaEditorNombre::OnBotonCuatroClickEvent()
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
	OnMenuEvent(EDITOR_TECLAS::TECLA_DELETE);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	3390      	adds	r3, #144	@ 0x90
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2124      	movs	r1, #36	@ 0x24
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	4798      	blx	r3

}
 8007ec2:	bf00      	nop
 8007ec4:	3708      	adds	r7, #8
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <_ZThn48_N21CPantallaEditorNombre23OnBotonCuatroClickEventEv>:
	virtual void OnBotonCuatroClickEvent();
 8007eca:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8007ece:	f7ff bfed 	b.w	8007eac <_ZN21CPantallaEditorNombre23OnBotonCuatroClickEventEv>
	...

08007ed4 <_ZN23CPantallaEjecucionRampaC1Ev>:
#include <RapaTemperatura/CControladorRampas.hpp>
#include <RapaTemperatura/CRampa.hpp>
#include <RapaTemperatura/CPaso.hpp>
#include <GUI/ManejadorPantallas/CManejadorPantallas.hpp>
#include<string.h>
CPantallaEjecucionRampa::CPantallaEjecucionRampa():
 8007ed4:	b590      	push	{r4, r7, lr}
 8007ed6:	b08b      	sub	sp, #44	@ 0x2c
 8007ed8:	af08      	add	r7, sp, #32
 8007eda:	6078      	str	r0, [r7, #4]
CPantallaBase(1, (char*)"RAMPA")
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	4a65      	ldr	r2, [pc, #404]	@ (8008074 <_ZN23CPantallaEjecucionRampaC1Ev+0x1a0>)
 8007ee0:	2101      	movs	r1, #1
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7fb fa38 	bl	8003358 <_ZN13CPantallaBaseC1EiPc>
 8007ee8:	4a63      	ldr	r2, [pc, #396]	@ (8008078 <_ZN23CPantallaEjecucionRampaC1Ev+0x1a4>)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	601a      	str	r2, [r3, #0]
 8007eee:	4a63      	ldr	r2, [pc, #396]	@ (800807c <_ZN23CPantallaEjecucionRampaC1Ev+0x1a8>)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	631a      	str	r2, [r3, #48]	@ 0x30
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8007efa:	4618      	mov	r0, r3
 8007efc:	f003 fdc8 	bl	800ba90 <_ZN5CPasoC1Ev>
{
	// TODO Auto-generated constructor stub
	LabelPaso=new CEtiquetaTft( 5, 35, 50, 20, COLOR::BLACK,(char*)"PASO: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8007f00:	20a4      	movs	r0, #164	@ 0xa4
 8007f02:	f009 fded 	bl	8011ae0 <_Znwj>
 8007f06:	4603      	mov	r3, r0
 8007f08:	461c      	mov	r4, r3
 8007f0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007f0e:	9306      	str	r3, [sp, #24]
 8007f10:	2300      	movs	r3, #0
 8007f12:	9305      	str	r3, [sp, #20]
 8007f14:	2303      	movs	r3, #3
 8007f16:	9304      	str	r3, [sp, #16]
 8007f18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007f1c:	9303      	str	r3, [sp, #12]
 8007f1e:	4b58      	ldr	r3, [pc, #352]	@ (8008080 <_ZN23CPantallaEjecucionRampaC1Ev+0x1ac>)
 8007f20:	9302      	str	r3, [sp, #8]
 8007f22:	2300      	movs	r3, #0
 8007f24:	9301      	str	r3, [sp, #4]
 8007f26:	2314      	movs	r3, #20
 8007f28:	9300      	str	r3, [sp, #0]
 8007f2a:	2332      	movs	r3, #50	@ 0x32
 8007f2c:	2223      	movs	r2, #35	@ 0x23
 8007f2e:	2105      	movs	r1, #5
 8007f30:	4620      	mov	r0, r4
 8007f32:	f7fa ffc5 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8c3 42d8 	str.w	r4, [r3, #728]	@ 0x2d8
	LabelTemperatura=new CEtiquetaTft( 5, 70, 50, 20, COLOR::BLACK,(char*)"TEMP: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8007f3c:	20a4      	movs	r0, #164	@ 0xa4
 8007f3e:	f009 fdcf 	bl	8011ae0 <_Znwj>
 8007f42:	4603      	mov	r3, r0
 8007f44:	461c      	mov	r4, r3
 8007f46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007f4a:	9306      	str	r3, [sp, #24]
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	9305      	str	r3, [sp, #20]
 8007f50:	2303      	movs	r3, #3
 8007f52:	9304      	str	r3, [sp, #16]
 8007f54:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007f58:	9303      	str	r3, [sp, #12]
 8007f5a:	4b4a      	ldr	r3, [pc, #296]	@ (8008084 <_ZN23CPantallaEjecucionRampaC1Ev+0x1b0>)
 8007f5c:	9302      	str	r3, [sp, #8]
 8007f5e:	2300      	movs	r3, #0
 8007f60:	9301      	str	r3, [sp, #4]
 8007f62:	2314      	movs	r3, #20
 8007f64:	9300      	str	r3, [sp, #0]
 8007f66:	2332      	movs	r3, #50	@ 0x32
 8007f68:	2246      	movs	r2, #70	@ 0x46
 8007f6a:	2105      	movs	r1, #5
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	f7fa ffa7 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8c3 42dc 	str.w	r4, [r3, #732]	@ 0x2dc
	LabelAire=new CEtiquetaTft( 5, 105, 105, 20, COLOR::BLACK,(char*)"AIRE: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8007f78:	20a4      	movs	r0, #164	@ 0xa4
 8007f7a:	f009 fdb1 	bl	8011ae0 <_Znwj>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	461c      	mov	r4, r3
 8007f82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007f86:	9306      	str	r3, [sp, #24]
 8007f88:	2300      	movs	r3, #0
 8007f8a:	9305      	str	r3, [sp, #20]
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	9304      	str	r3, [sp, #16]
 8007f90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007f94:	9303      	str	r3, [sp, #12]
 8007f96:	4b3c      	ldr	r3, [pc, #240]	@ (8008088 <_ZN23CPantallaEjecucionRampaC1Ev+0x1b4>)
 8007f98:	9302      	str	r3, [sp, #8]
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	9301      	str	r3, [sp, #4]
 8007f9e:	2314      	movs	r3, #20
 8007fa0:	9300      	str	r3, [sp, #0]
 8007fa2:	2369      	movs	r3, #105	@ 0x69
 8007fa4:	2269      	movs	r2, #105	@ 0x69
 8007fa6:	2105      	movs	r1, #5
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f7fa ff89 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8c3 42e0 	str.w	r4, [r3, #736]	@ 0x2e0
	LabelTiempo=new CEtiquetaTft( 5, 140, 50, 20, COLOR::BLACK,(char*)"TIEM: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8007fb4:	20a4      	movs	r0, #164	@ 0xa4
 8007fb6:	f009 fd93 	bl	8011ae0 <_Znwj>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	461c      	mov	r4, r3
 8007fbe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007fc2:	9306      	str	r3, [sp, #24]
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	9305      	str	r3, [sp, #20]
 8007fc8:	2303      	movs	r3, #3
 8007fca:	9304      	str	r3, [sp, #16]
 8007fcc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007fd0:	9303      	str	r3, [sp, #12]
 8007fd2:	4b2e      	ldr	r3, [pc, #184]	@ (800808c <_ZN23CPantallaEjecucionRampaC1Ev+0x1b8>)
 8007fd4:	9302      	str	r3, [sp, #8]
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	9301      	str	r3, [sp, #4]
 8007fda:	2314      	movs	r3, #20
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	2332      	movs	r3, #50	@ 0x32
 8007fe0:	228c      	movs	r2, #140	@ 0x8c
 8007fe2:	2105      	movs	r1, #5
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	f7fa ff6b 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8c3 42e4 	str.w	r4, [r3, #740]	@ 0x2e4

	LabelGuardar=new CEtiquetaTft( 10, 200, 130, 30, COLOR::GREEN,(char*)"INICIAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 8007ff0:	20a4      	movs	r0, #164	@ 0xa4
 8007ff2:	f009 fd75 	bl	8011ae0 <_Znwj>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	461c      	mov	r4, r3
 8007ffa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007ffe:	9306      	str	r3, [sp, #24]
 8008000:	2301      	movs	r3, #1
 8008002:	9305      	str	r3, [sp, #20]
 8008004:	2303      	movs	r3, #3
 8008006:	9304      	str	r3, [sp, #16]
 8008008:	2300      	movs	r3, #0
 800800a:	9303      	str	r3, [sp, #12]
 800800c:	4b20      	ldr	r3, [pc, #128]	@ (8008090 <_ZN23CPantallaEjecucionRampaC1Ev+0x1bc>)
 800800e:	9302      	str	r3, [sp, #8]
 8008010:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8008014:	9301      	str	r3, [sp, #4]
 8008016:	231e      	movs	r3, #30
 8008018:	9300      	str	r3, [sp, #0]
 800801a:	2382      	movs	r3, #130	@ 0x82
 800801c:	22c8      	movs	r2, #200	@ 0xc8
 800801e:	210a      	movs	r1, #10
 8008020:	4620      	mov	r0, r4
 8008022:	f7fa ff4d 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8c3 42d0 	str.w	r4, [r3, #720]	@ 0x2d0
	LabelCancelar=new CEtiquetaTft( 160, 200, 145, 30, COLOR::RED,(char*)"REGRESAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 800802c:	20a4      	movs	r0, #164	@ 0xa4
 800802e:	f009 fd57 	bl	8011ae0 <_Znwj>
 8008032:	4603      	mov	r3, r0
 8008034:	461c      	mov	r4, r3
 8008036:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800803a:	9306      	str	r3, [sp, #24]
 800803c:	2301      	movs	r3, #1
 800803e:	9305      	str	r3, [sp, #20]
 8008040:	2303      	movs	r3, #3
 8008042:	9304      	str	r3, [sp, #16]
 8008044:	2300      	movs	r3, #0
 8008046:	9303      	str	r3, [sp, #12]
 8008048:	4b12      	ldr	r3, [pc, #72]	@ (8008094 <_ZN23CPantallaEjecucionRampaC1Ev+0x1c0>)
 800804a:	9302      	str	r3, [sp, #8]
 800804c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8008050:	9301      	str	r3, [sp, #4]
 8008052:	231e      	movs	r3, #30
 8008054:	9300      	str	r3, [sp, #0]
 8008056:	2391      	movs	r3, #145	@ 0x91
 8008058:	22c8      	movs	r2, #200	@ 0xc8
 800805a:	21a0      	movs	r1, #160	@ 0xa0
 800805c:	4620      	mov	r0, r4
 800805e:	f7fa ff2f 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8c3 42d4 	str.w	r4, [r3, #724]	@ 0x2d4

}
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4618      	mov	r0, r3
 800806c:	370c      	adds	r7, #12
 800806e:	46bd      	mov	sp, r7
 8008070:	bd90      	pop	{r4, r7, pc}
 8008072:	bf00      	nop
 8008074:	08014ae4 	.word	0x08014ae4
 8008078:	080158d8 	.word	0x080158d8
 800807c:	08015960 	.word	0x08015960
 8008080:	08014aec 	.word	0x08014aec
 8008084:	08014af4 	.word	0x08014af4
 8008088:	08014afc 	.word	0x08014afc
 800808c:	08014b04 	.word	0x08014b04
 8008090:	08014b0c 	.word	0x08014b0c
 8008094:	08014b14 	.word	0x08014b14

08008098 <_ZN23CPantallaEjecucionRampaD1Ev>:

CPantallaEjecucionRampa::~CPantallaEjecucionRampa()
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	4a0a      	ldr	r2, [pc, #40]	@ (80080cc <_ZN23CPantallaEjecucionRampaD1Ev+0x34>)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	601a      	str	r2, [r3, #0]
 80080a6:	4a0a      	ldr	r2, [pc, #40]	@ (80080d0 <_ZN23CPantallaEjecucionRampaD1Ev+0x38>)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 80080b2:	4618      	mov	r0, r3
 80080b4:	f003 fd0e 	bl	800bad4 <_ZN5CPasoD1Ev>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7fb f918 	bl	80032f0 <_ZN13CPantallaBaseD1Ev>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4618      	mov	r0, r3
 80080c4:	3708      	adds	r7, #8
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	080158d8 	.word	0x080158d8
 80080d0:	08015960 	.word	0x08015960

080080d4 <_ZThn48_N23CPantallaEjecucionRampaD1Ev>:
	void PasoTerminado();
	void MuestraDatos();
	void ActualizaEstacion();
public:
	CPantallaEjecucionRampa();
	virtual ~CPantallaEjecucionRampa();
 80080d4:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80080d8:	f7ff bfde 	b.w	8008098 <_ZN23CPantallaEjecucionRampaD1Ev>

080080dc <_ZN23CPantallaEjecucionRampaD0Ev>:
CPantallaEjecucionRampa::~CPantallaEjecucionRampa()
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
}
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f7ff ffd7 	bl	8008098 <_ZN23CPantallaEjecucionRampaD1Ev>
 80080ea:	f44f 713a 	mov.w	r1, #744	@ 0x2e8
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f009 fcf4 	bl	8011adc <_ZdlPvj>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4618      	mov	r0, r3
 80080f8:	3708      	adds	r7, #8
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <_ZThn48_N23CPantallaEjecucionRampaD0Ev>:
 80080fe:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008102:	f7ff bfeb 	b.w	80080dc <_ZN23CPantallaEjecucionRampaD0Ev>
	...

08008108 <_ZN23CPantallaEjecucionRampa10SetIDRampaEi>:
void CPantallaEjecucionRampa::SetIDRampa(int id_rampa)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b088      	sub	sp, #32
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
	ID_Rampa=id_rampa;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	683a      	ldr	r2, [r7, #0]
 8008116:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	CRampa rampa=	ControladorRampas.DameRampa(ID_Rampa);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8008120:	f107 0308 	add.w	r3, r7, #8
 8008124:	491f      	ldr	r1, [pc, #124]	@ (80081a4 <_ZN23CPantallaEjecucionRampa10SetIDRampaEi+0x9c>)
 8008126:	4618      	mov	r0, r3
 8008128:	f003 fa0d 	bl	800b546 <_ZN18CControladorRampas9DameRampaEi>
	this->SetTituloPantalla(rampa.Nombre);
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	3370      	adds	r3, #112	@ 0x70
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f107 0208 	add.w	r2, r7, #8
 800813a:	3208      	adds	r2, #8
 800813c:	4611      	mov	r1, r2
 800813e:	4798      	blx	r3
	LabelGuardar->SetBackColor(COLOR::GREEN);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8008146:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 800814a:	4618      	mov	r0, r3
 800814c:	f7fb f8a2 	bl	8003294 <_ZN12CEtiquetaTft12SetBackColorEi>
	LabelCancelar->SetTexto((char*)"REGRESAR");
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008156:	4914      	ldr	r1, [pc, #80]	@ (80081a8 <_ZN23CPantallaEjecucionRampa10SetIDRampaEi+0xa0>)
 8008158:	4618      	mov	r0, r3
 800815a:	f7fa feeb 	bl	8002f34 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelGuardar->Show();
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	334c      	adds	r3, #76	@ 0x4c
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4610      	mov	r0, r2
 8008172:	4798      	blx	r3
	LabelCancelar->Show();
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	334c      	adds	r3, #76	@ 0x4c
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4610      	mov	r0, r2
 8008188:	4798      	blx	r3
	Ejecutando=false;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	f883 2248 	strb.w	r2, [r3, #584]	@ 0x248

}
 8008192:	f107 0308 	add.w	r3, r7, #8
 8008196:	4618      	mov	r0, r3
 8008198:	f003 fce2 	bl	800bb60 <_ZN6CRampaD1Ev>
 800819c:	3720      	adds	r7, #32
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	20000364 	.word	0x20000364
 80081a8:	08014b14 	.word	0x08014b14

080081ac <_ZN23CPantallaEjecucionRampa20OnBotonUnoClickEventEv>:

void CPantallaEjecucionRampa::OnBotonUnoClickEvent()
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b088      	sub	sp, #32
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
	if(Ejecutando==true)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f893 3248 	ldrb.w	r3, [r3, #584]	@ 0x248
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d06c      	beq.n	8008298 <_ZN23CPantallaEjecucionRampa20OnBotonUnoClickEventEv+0xec>
		return;
	//ControladorRampas.EliminaRampa(ID_Rampa);
	NPasos=	ControladorPasosRampa.DameNumeroPasosRampa(ID_Rampa);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80081c4:	4619      	mov	r1, r3
 80081c6:	4836      	ldr	r0, [pc, #216]	@ (80082a0 <_ZN23CPantallaEjecucionRampa20OnBotonUnoClickEventEv+0xf4>)
 80081c8:	f002 feca 	bl	800af60 <_ZN22CControladorPasosRampa20DameNumeroPasosRampaEi>
 80081cc:	4602      	mov	r2, r0
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	int id_pasActual=0;
 80081d4:	2300      	movs	r3, #0
 80081d6:	61fb      	str	r3, [r7, #28]
	for(int i=0;i<100;i++)
 80081d8:	2300      	movs	r3, #0
 80081da:	61bb      	str	r3, [r7, #24]
 80081dc:	e028      	b.n	8008230 <_ZN23CPantallaEjecucionRampa20OnBotonUnoClickEventEv+0x84>
	{
		if(i<NPasos)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80081e4:	69ba      	ldr	r2, [r7, #24]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	da18      	bge.n	800821c <_ZN23CPantallaEjecucionRampa20OnBotonUnoClickEventEv+0x70>
		{
			CPaso paso=ControladorPasosRampa.DameSiguientePaso(ID_Rampa, id_pasActual);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80081f0:	f107 000c 	add.w	r0, r7, #12
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	492a      	ldr	r1, [pc, #168]	@ (80082a0 <_ZN23CPantallaEjecucionRampa20OnBotonUnoClickEventEv+0xf4>)
 80081f8:	f002 feed 	bl	800afd6 <_ZN22CControladorPasosRampa17DameSiguientePasoEii>
			Pasos[i]=paso.ID_Paso;
 80081fc:	7cbb      	ldrb	r3, [r7, #18]
 80081fe:	4619      	mov	r1, r3
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	332c      	adds	r3, #44	@ 0x2c
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	4413      	add	r3, r2
 800820a:	6059      	str	r1, [r3, #4]
			id_pasActual=paso.ID_Paso;
 800820c:	7cbb      	ldrb	r3, [r7, #18]
 800820e:	61fb      	str	r3, [r7, #28]
		}
 8008210:	f107 030c 	add.w	r3, r7, #12
 8008214:	4618      	mov	r0, r3
 8008216:	f003 fc5d 	bl	800bad4 <_ZN5CPasoD1Ev>
 800821a:	e006      	b.n	800822a <_ZN23CPantallaEjecucionRampa20OnBotonUnoClickEventEv+0x7e>
		else
		{
			Pasos[i]=0;
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	332c      	adds	r3, #44	@ 0x2c
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	4413      	add	r3, r2
 8008226:	2200      	movs	r2, #0
 8008228:	605a      	str	r2, [r3, #4]
	for(int i=0;i<100;i++)
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	3301      	adds	r3, #1
 800822e:	61bb      	str	r3, [r7, #24]
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	2b63      	cmp	r3, #99	@ 0x63
 8008234:	ddd3      	ble.n	80081de <_ZN23CPantallaEjecucionRampa20OnBotonUnoClickEventEv+0x32>
		}
	}
	PasoActual=0;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	f8c3 2244 	str.w	r2, [r3, #580]	@ 0x244
	LabelGuardar->SetBackColor(COLOR::GREY);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8008244:	f64d 61de 	movw	r1, #57054	@ 0xdede
 8008248:	4618      	mov	r0, r3
 800824a:	f7fb f823 	bl	8003294 <_ZN12CEtiquetaTft12SetBackColorEi>
	LabelCancelar->SetTexto((char*)"CANCELAR");
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008254:	4913      	ldr	r1, [pc, #76]	@ (80082a4 <_ZN23CPantallaEjecucionRampa20OnBotonUnoClickEventEv+0xf8>)
 8008256:	4618      	mov	r0, r3
 8008258:	f7fa fe6c 	bl	8002f34 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelGuardar->Show();
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	334c      	adds	r3, #76	@ 0x4c
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4610      	mov	r0, r2
 8008270:	4798      	blx	r3
	LabelCancelar->Show();
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	334c      	adds	r3, #76	@ 0x4c
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4610      	mov	r0, r2
 8008286:	4798      	blx	r3
	Ejecutando=true;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 2248 	strb.w	r2, [r3, #584]	@ 0x248
	PasoTerminado();
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 f91d 	bl	80084d0 <_ZN23CPantallaEjecucionRampa13PasoTerminadoEv>
 8008296:	e000      	b.n	800829a <_ZN23CPantallaEjecucionRampa20OnBotonUnoClickEventEv+0xee>
		return;
 8008298:	bf00      	nop
//	ManejadorPantallas.AsignaPantallaPasosRampa(ID_Rampa);
}
 800829a:	3720      	adds	r7, #32
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	200001f8 	.word	0x200001f8
 80082a4:	08014b20 	.word	0x08014b20

080082a8 <_ZThn48_N23CPantallaEjecucionRampa20OnBotonUnoClickEventEv>:
	void SetIDRampa(int id_rampa);
	virtual void OnBotonUnoClickEvent();
 80082a8:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80082ac:	f7ff bf7e 	b.w	80081ac <_ZN23CPantallaEjecucionRampa20OnBotonUnoClickEventEv>

080082b0 <_ZN23CPantallaEjecucionRampa21OnBotonTresClickEventEv>:
void CPantallaEjecucionRampa::OnBotonTresClickEvent()
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]

	 ManejadorPantallas.MuestraPantallaRampa(ID_Rampa);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80082be:	4619      	mov	r1, r3
 80082c0:	4803      	ldr	r0, [pc, #12]	@ (80082d0 <_ZN23CPantallaEjecucionRampa21OnBotonTresClickEventEv+0x20>)
 80082c2:	f7fb fed5 	bl	8004070 <_ZN19CManejadorPantallas20MuestraPantallaRampaEi>

}
 80082c6:	bf00      	nop
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	2000025c 	.word	0x2000025c

080082d4 <_ZThn48_N23CPantallaEjecucionRampa21OnBotonTresClickEventEv>:
	virtual void OnBotonTresClickEvent();
 80082d4:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80082d8:	f7ff bfea 	b.w	80082b0 <_ZN23CPantallaEjecucionRampa21OnBotonTresClickEventEv>

080082dc <_ZN23CPantallaEjecucionRampa4ShowEv>:
void CPantallaEjecucionRampa::Show()
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
	CPantallaBase::Show();
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7fb f8a8 	bl	800343c <_ZN13CPantallaBase4ShowEv>
	MuestraDatos();
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 f95f 	bl	80085b0 <_ZN23CPantallaEjecucionRampa12MuestraDatosEv>

	LabelGuardar->Show();
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	334c      	adds	r3, #76	@ 0x4c
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4610      	mov	r0, r2
 8008306:	4798      	blx	r3
	LabelCancelar->Show();
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	334c      	adds	r3, #76	@ 0x4c
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4610      	mov	r0, r2
 800831c:	4798      	blx	r3

}
 800831e:	bf00      	nop
 8008320:	3708      	adds	r7, #8
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
	...

08008328 <_ZN23CPantallaEjecucionRampa8RefrescaEv>:
void CPantallaEjecucionRampa::Refresca()
{
 8008328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800832c:	b084      	sub	sp, #16
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
	if(Ejecutando==true)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f893 3248 	ldrb.w	r3, [r3, #584]	@ 0x248
 8008338:	2b01      	cmp	r3, #1
 800833a:	f040 8095 	bne.w	8008468 <_ZN23CPantallaEjecucionRampa8RefrescaEv+0x140>
	{
		if(TiempoMilis<=0)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	e9d3 2394 	ldrd	r2, r3, [r3, #592]	@ 0x250
 8008344:	2a01      	cmp	r2, #1
 8008346:	f173 0300 	sbcs.w	r3, r3, #0
 800834a:	da03      	bge.n	8008354 <_ZN23CPantallaEjecucionRampa8RefrescaEv+0x2c>
		{
			PasoTerminado();
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 f8bf 	bl	80084d0 <_ZN23CPantallaEjecucionRampa13PasoTerminadoEv>
			return;
 8008352:	e094      	b.n	800847e <_ZN23CPantallaEjecucionRampa8RefrescaEv+0x156>
		}
		int mili=HAL_GetTick();
 8008354:	f005 fa94 	bl	800d880 <HAL_GetTick>
 8008358:	4603      	mov	r3, r0
 800835a:	60fb      	str	r3, [r7, #12]
		if(mili>UltimoMili)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	429a      	cmp	r2, r3
 8008366:	f340 808a 	ble.w	800847e <_ZN23CPantallaEjecucionRampa8RefrescaEv+0x156>
		{
			TiempoMilis=TiempoMilis-(mili-UltimoMili);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	e9d3 2394 	ldrd	r2, r3, [r3, #592]	@ 0x250
 8008370:	6879      	ldr	r1, [r7, #4]
 8008372:	f8d1 1258 	ldr.w	r1, [r1, #600]	@ 0x258
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	1a41      	subs	r1, r0, r1
 800837a:	17c8      	asrs	r0, r1, #31
 800837c:	4688      	mov	r8, r1
 800837e:	4681      	mov	r9, r0
 8008380:	ebb2 0a08 	subs.w	sl, r2, r8
 8008384:	eb63 0b09 	sbc.w	fp, r3, r9
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	e9c3 ab94 	strd	sl, fp, [r3, #592]	@ 0x250
			UltimoMili=mili;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	f8c3 2258 	str.w	r2, [r3, #600]	@ 0x258
			if((TiempoMilis/1000)!=Segundos)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	e9d3 0194 	ldrd	r0, r1, [r3, #592]	@ 0x250
 800839c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80083a0:	f04f 0300 	mov.w	r3, #0
 80083a4:	f7f8 fc08 	bl	8000bb8 <__aeabi_ldivmod>
 80083a8:	4602      	mov	r2, r0
 80083aa:	460b      	mov	r3, r1
 80083ac:	6879      	ldr	r1, [r7, #4]
 80083ae:	f9b1 12c0 	ldrsh.w	r1, [r1, #704]	@ 0x2c0
 80083b2:	b209      	sxth	r1, r1
 80083b4:	17c8      	asrs	r0, r1, #31
 80083b6:	460c      	mov	r4, r1
 80083b8:	4605      	mov	r5, r0
 80083ba:	42ab      	cmp	r3, r5
 80083bc:	bf08      	it	eq
 80083be:	42a2      	cmpeq	r2, r4
 80083c0:	d05d      	beq.n	800847e <_ZN23CPantallaEjecucionRampa8RefrescaEv+0x156>
			{
				Segundos=(TiempoMilis/1000);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	e9d3 0194 	ldrd	r0, r1, [r3, #592]	@ 0x250
 80083c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80083cc:	f04f 0300 	mov.w	r3, #0
 80083d0:	f7f8 fbf2 	bl	8000bb8 <__aeabi_ldivmod>
 80083d4:	4602      	mov	r2, r0
 80083d6:	460b      	mov	r3, r1
 80083d8:	b212      	sxth	r2, r2
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8a3 22c0 	strh.w	r2, [r3, #704]	@ 0x2c0
				SegundosATexto(Segundos);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f9b3 32c0 	ldrsh.w	r3, [r3, #704]	@ 0x2c0
 80083e6:	4619      	mov	r1, r3
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 f94d 	bl	8008688 <_ZN23CPantallaEjecucionRampa14SegundosATextoEi>
				LabelTiempo->SetTexto((char*)"TIEM:%s     ",TextoTiempo);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 02e4 	ldr.w	r0, [r3, #740]	@ 0x2e4
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80083fa:	461a      	mov	r2, r3
 80083fc:	4922      	ldr	r1, [pc, #136]	@ (8008488 <_ZN23CPantallaEjecucionRampa8RefrescaEv+0x160>)
 80083fe:	f7fa fd99 	bl	8002f34 <_ZN12CEtiquetaTft8SetTextoEPcz>
				LabelTiempo->Show();
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 22e4 	ldr.w	r2, [r3, #740]	@ 0x2e4
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	334c      	adds	r3, #76	@ 0x4c
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4610      	mov	r0, r2
 8008416:	4798      	blx	r3
				int temperaturaReal=Estacion->GetTemperaturaRealx();
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	3308      	adds	r3, #8
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4610      	mov	r0, r2
 800842c:	4798      	blx	r3
 800842e:	eef0 7a40 	vmov.f32	s15, s0
 8008432:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008436:	ee17 3a90 	vmov	r3, s15
 800843a:	60bb      	str	r3, [r7, #8]
				LabelTemperatura->SetTexto((char*)"TEMP:%d/%d     ",temperaturaReal,Paso.Temperatura);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 02dc 	ldr.w	r0, [r3, #732]	@ 0x2dc
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f893 32cb 	ldrb.w	r3, [r3, #715]	@ 0x2cb
 8008448:	68ba      	ldr	r2, [r7, #8]
 800844a:	4910      	ldr	r1, [pc, #64]	@ (800848c <_ZN23CPantallaEjecucionRampa8RefrescaEv+0x164>)
 800844c:	f7fa fd72 	bl	8002f34 <_ZN12CEtiquetaTft8SetTextoEPcz>
				LabelTemperatura->Show();
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 22dc 	ldr.w	r2, [r3, #732]	@ 0x2dc
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	334c      	adds	r3, #76	@ 0x4c
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4610      	mov	r0, r2
 8008464:	4798      	blx	r3
 8008466:	e00a      	b.n	800847e <_ZN23CPantallaEjecucionRampa8RefrescaEv+0x156>
			}
		}
	}
	else
	{
		Estacion->DesactivarCalefactor();
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	3338      	adds	r3, #56	@ 0x38
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4610      	mov	r0, r2
 800847c:	4798      	blx	r3

	}
}
 800847e:	3710      	adds	r7, #16
 8008480:	46bd      	mov	sp, r7
 8008482:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008486:	bf00      	nop
 8008488:	08014b2c 	.word	0x08014b2c
 800848c:	08014b3c 	.word	0x08014b3c

08008490 <_ZN23CPantallaEjecucionRampa12FinEjecucionEv>:
void CPantallaEjecucionRampa::FinEjecucion()
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
	Ejecutando=false;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	f883 2248 	strb.w	r2, [r3, #584]	@ 0x248
	 ManejadorPantallas.MuestraPantallaRampa(ID_Rampa);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80084a6:	4619      	mov	r1, r3
 80084a8:	4808      	ldr	r0, [pc, #32]	@ (80084cc <_ZN23CPantallaEjecucionRampa12FinEjecucionEv+0x3c>)
 80084aa:	f7fb fde1 	bl	8004070 <_ZN19CManejadorPantallas20MuestraPantallaRampaEi>
	 Estacion->DesactivarCalefactor();
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	3338      	adds	r3, #56	@ 0x38
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4610      	mov	r0, r2
 80084c2:	4798      	blx	r3
}
 80084c4:	bf00      	nop
 80084c6:	3708      	adds	r7, #8
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	2000025c 	.word	0x2000025c

080084d0 <_ZN23CPantallaEjecucionRampa13PasoTerminadoEv>:
void CPantallaEjecucionRampa::PasoTerminado()
{
 80084d0:	b5b0      	push	{r4, r5, r7, lr}
 80084d2:	b086      	sub	sp, #24
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
	if(PasoActual>=NPasos)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 2244 	ldr.w	r2, [r3, #580]	@ 0x244
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80084e4:	429a      	cmp	r2, r3
 80084e6:	db03      	blt.n	80084f0 <_ZN23CPantallaEjecucionRampa13PasoTerminadoEv+0x20>
	{
		FinEjecucion();
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f7ff ffd1 	bl	8008490 <_ZN23CPantallaEjecucionRampa12FinEjecucionEv>
 80084ee:	e05a      	b.n	80085a6 <_ZN23CPantallaEjecucionRampa13PasoTerminadoEv+0xd6>
		return;
	}

	int id_pasActual=Pasos[PasoActual];
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 3244 	ldr.w	r3, [r3, #580]	@ 0x244
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	332c      	adds	r3, #44	@ 0x2c
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4413      	add	r3, r2
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	617b      	str	r3, [r7, #20]
	CPaso paso=ControladorPasosRampa.DamePasoRampa( id_pasActual);
 8008502:	f107 0308 	add.w	r3, r7, #8
 8008506:	697a      	ldr	r2, [r7, #20]
 8008508:	4928      	ldr	r1, [pc, #160]	@ (80085ac <_ZN23CPantallaEjecucionRampa13PasoTerminadoEv+0xdc>)
 800850a:	4618      	mov	r0, r3
 800850c:	f002 fdbb 	bl	800b086 <_ZN22CControladorPasosRampa13DamePasoRampaEi>
	PasoActual++;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 3244 	ldr.w	r3, [r3, #580]	@ 0x244
 8008516:	1c5a      	adds	r2, r3, #1
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8c3 2244 	str.w	r2, [r3, #580]	@ 0x244
	Paso.ID_Paso=paso.ID_Paso;
 800851e:	7bba      	ldrb	r2, [r7, #14]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f883 22ca 	strb.w	r2, [r3, #714]	@ 0x2ca
	Paso.ID_Rampa=paso.ID_Rampa;
 8008526:	7b7a      	ldrb	r2, [r7, #13]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f883 22c9 	strb.w	r2, [r3, #713]	@ 0x2c9
	Paso.NivelAire=paso.NivelAire;
 800852e:	7c3a      	ldrb	r2, [r7, #16]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
	Paso.Ocupado=paso.Ocupado;
 8008536:	7b3a      	ldrb	r2, [r7, #12]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
	Paso.Minutos=paso.Minutos;
 800853e:	7c7a      	ldrb	r2, [r7, #17]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f883 22cd 	strb.w	r2, [r3, #717]	@ 0x2cd
	Segundos=Paso.Minutos*60;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f893 32cd 	ldrb.w	r3, [r3, #717]	@ 0x2cd
 800854c:	461a      	mov	r2, r3
 800854e:	0112      	lsls	r2, r2, #4
 8008550:	1ad3      	subs	r3, r2, r3
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	b29b      	uxth	r3, r3
 8008556:	b21a      	sxth	r2, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8a3 22c0 	strh.w	r2, [r3, #704]	@ 0x2c0
	Paso.Temperatura=paso.Temperatura;
 800855e:	7bfa      	ldrb	r2, [r7, #15]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f883 22cb 	strb.w	r2, [r3, #715]	@ 0x2cb
	TiempoMilis=Segundos*1000;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f9b3 32c0 	ldrsh.w	r3, [r3, #704]	@ 0x2c0
 800856c:	461a      	mov	r2, r3
 800856e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008572:	fb02 f303 	mul.w	r3, r2, r3
 8008576:	17da      	asrs	r2, r3, #31
 8008578:	461c      	mov	r4, r3
 800857a:	4615      	mov	r5, r2
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	e9c3 4594 	strd	r4, r5, [r3, #592]	@ 0x250
	UltimoMili=HAL_GetTick();
 8008582:	f005 f97d 	bl	800d880 <HAL_GetTick>
 8008586:	4603      	mov	r3, r0
 8008588:	461a      	mov	r2, r3
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8c3 2258 	str.w	r2, [r3, #600]	@ 0x258
	 ActualizaEstacion();
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 f8c9 	bl	8008728 <_ZN23CPantallaEjecucionRampa17ActualizaEstacionEv>
	MuestraDatos();
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 f80a 	bl	80085b0 <_ZN23CPantallaEjecucionRampa12MuestraDatosEv>
}
 800859c:	f107 0308 	add.w	r3, r7, #8
 80085a0:	4618      	mov	r0, r3
 80085a2:	f003 fa97 	bl	800bad4 <_ZN5CPasoD1Ev>
 80085a6:	3718      	adds	r7, #24
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bdb0      	pop	{r4, r5, r7, pc}
 80085ac:	200001f8 	.word	0x200001f8

080085b0 <_ZN23CPantallaEjecucionRampa12MuestraDatosEv>:
void CPantallaEjecucionRampa::MuestraDatos()
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
	LabelPaso->SetTexto((char*)"Paso:%d",Paso.ID_Paso);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f893 32ca 	ldrb.w	r3, [r3, #714]	@ 0x2ca
 80085c4:	461a      	mov	r2, r3
 80085c6:	492c      	ldr	r1, [pc, #176]	@ (8008678 <_ZN23CPantallaEjecucionRampa12MuestraDatosEv+0xc8>)
 80085c8:	f7fa fcb4 	bl	8002f34 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelPaso->Show();
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	334c      	adds	r3, #76	@ 0x4c
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4610      	mov	r0, r2
 80085e0:	4798      	blx	r3
	LabelTemperatura->SetTexto((char*)"TEMP:%d",Paso.Temperatura);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 02dc 	ldr.w	r0, [r3, #732]	@ 0x2dc
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f893 32cb 	ldrb.w	r3, [r3, #715]	@ 0x2cb
 80085ee:	461a      	mov	r2, r3
 80085f0:	4922      	ldr	r1, [pc, #136]	@ (800867c <_ZN23CPantallaEjecucionRampa12MuestraDatosEv+0xcc>)
 80085f2:	f7fa fc9f 	bl	8002f34 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelTemperatura->Show();
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8d3 22dc 	ldr.w	r2, [r3, #732]	@ 0x2dc
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	334c      	adds	r3, #76	@ 0x4c
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4610      	mov	r0, r2
 800860a:	4798      	blx	r3
	LabelAire->SetTexto((char*)"AIRE:%d",Paso.NivelAire);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8008618:	461a      	mov	r2, r3
 800861a:	4919      	ldr	r1, [pc, #100]	@ (8008680 <_ZN23CPantallaEjecucionRampa12MuestraDatosEv+0xd0>)
 800861c:	f7fa fc8a 	bl	8002f34 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelAire->Show();
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	334c      	adds	r3, #76	@ 0x4c
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4610      	mov	r0, r2
 8008634:	4798      	blx	r3
	SegundosATexto(Segundos);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f9b3 32c0 	ldrsh.w	r3, [r3, #704]	@ 0x2c0
 800863c:	4619      	mov	r1, r3
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f822 	bl	8008688 <_ZN23CPantallaEjecucionRampa14SegundosATextoEi>
	LabelTiempo->SetTexto((char*)"SEG:%s",TextoTiempo);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 02e4 	ldr.w	r0, [r3, #740]	@ 0x2e4
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8008650:	461a      	mov	r2, r3
 8008652:	490c      	ldr	r1, [pc, #48]	@ (8008684 <_ZN23CPantallaEjecucionRampa12MuestraDatosEv+0xd4>)
 8008654:	f7fa fc6e 	bl	8002f34 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelTiempo->Show();
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 22e4 	ldr.w	r2, [r3, #740]	@ 0x2e4
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	334c      	adds	r3, #76	@ 0x4c
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4610      	mov	r0, r2
 800866c:	4798      	blx	r3
}
 800866e:	bf00      	nop
 8008670:	3708      	adds	r7, #8
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	08014b4c 	.word	0x08014b4c
 800867c:	08014b54 	.word	0x08014b54
 8008680:	08014b5c 	.word	0x08014b5c
 8008684:	08014b64 	.word	0x08014b64

08008688 <_ZN23CPantallaEjecucionRampa14SegundosATextoEi>:
void CPantallaEjecucionRampa::SegundosATexto(int tiempoSegundos)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b088      	sub	sp, #32
 800868c:	af02      	add	r7, sp, #8
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
	int horas;
	int minutos;
	int segundos;
	for(int i=0;i<100;i++)
 8008692:	2300      	movs	r3, #0
 8008694:	617b      	str	r3, [r7, #20]
 8008696:	e009      	b.n	80086ac <_ZN23CPantallaEjecucionRampa14SegundosATextoEi+0x24>
	{
		TextoTiempo[i]='\0';
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	4413      	add	r3, r2
 800869e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80086a2:	2200      	movs	r2, #0
 80086a4:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<100;i++)
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	3301      	adds	r3, #1
 80086aa:	617b      	str	r3, [r7, #20]
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	2b63      	cmp	r3, #99	@ 0x63
 80086b0:	ddf2      	ble.n	8008698 <_ZN23CPantallaEjecucionRampa14SegundosATextoEi+0x10>
	}
	horas=tiempoSegundos/(3600);
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	4a18      	ldr	r2, [pc, #96]	@ (8008718 <_ZN23CPantallaEjecucionRampa14SegundosATextoEi+0x90>)
 80086b6:	fb82 1203 	smull	r1, r2, r2, r3
 80086ba:	441a      	add	r2, r3
 80086bc:	12d2      	asrs	r2, r2, #11
 80086be:	17db      	asrs	r3, r3, #31
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	613b      	str	r3, [r7, #16]
	tiempoSegundos=tiempoSegundos-(horas*3600);
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	4a15      	ldr	r2, [pc, #84]	@ (800871c <_ZN23CPantallaEjecucionRampa14SegundosATextoEi+0x94>)
 80086c8:	fb02 f303 	mul.w	r3, r2, r3
 80086cc:	683a      	ldr	r2, [r7, #0]
 80086ce:	4413      	add	r3, r2
 80086d0:	603b      	str	r3, [r7, #0]
	minutos=tiempoSegundos/(60);
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	4a12      	ldr	r2, [pc, #72]	@ (8008720 <_ZN23CPantallaEjecucionRampa14SegundosATextoEi+0x98>)
 80086d6:	fb82 1203 	smull	r1, r2, r2, r3
 80086da:	441a      	add	r2, r3
 80086dc:	1152      	asrs	r2, r2, #5
 80086de:	17db      	asrs	r3, r3, #31
 80086e0:	1ad3      	subs	r3, r2, r3
 80086e2:	60fb      	str	r3, [r7, #12]
	tiempoSegundos=tiempoSegundos-(minutos*60);
 80086e4:	68fa      	ldr	r2, [r7, #12]
 80086e6:	4613      	mov	r3, r2
 80086e8:	0112      	lsls	r2, r2, #4
 80086ea:	1a9b      	subs	r3, r3, r2
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	461a      	mov	r2, r3
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	4413      	add	r3, r2
 80086f4:	603b      	str	r3, [r7, #0]
	segundos=tiempoSegundos;
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	60bb      	str	r3, [r7, #8]
	sprintf(TextoTiempo,(char*)"%d:%d:%d",horas,minutos,segundos);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f503 7017 	add.w	r0, r3, #604	@ 0x25c
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	9300      	str	r3, [sp, #0]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	693a      	ldr	r2, [r7, #16]
 8008708:	4906      	ldr	r1, [pc, #24]	@ (8008724 <_ZN23CPantallaEjecucionRampa14SegundosATextoEi+0x9c>)
 800870a:	f009 ffe5 	bl	80126d8 <siprintf>
}
 800870e:	bf00      	nop
 8008710:	3718      	adds	r7, #24
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	91a2b3c5 	.word	0x91a2b3c5
 800871c:	fffff1f0 	.word	0xfffff1f0
 8008720:	88888889 	.word	0x88888889
 8008724:	08014b6c 	.word	0x08014b6c

08008728 <_ZN23CPantallaEjecucionRampa17ActualizaEstacionEv>:
void CPantallaEjecucionRampa::ActualizaEstacion()
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
	Estacion->SetTemperatura(Paso.Temperatura);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	330c      	adds	r3, #12
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	f892 22cb 	ldrb.w	r2, [r2, #715]	@ 0x2cb
 8008748:	4611      	mov	r1, r2
 800874a:	4798      	blx	r3
	Estacion->SetNivelAire(Paso.NivelAire);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	3314      	adds	r3, #20
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	f892 22cc 	ldrb.w	r2, [r2, #716]	@ 0x2cc
 8008764:	4611      	mov	r1, r2
 8008766:	4798      	blx	r3
	Estacion->ActivarCalefactor();
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3334      	adds	r3, #52	@ 0x34
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4610      	mov	r0, r2
 800877c:	4798      	blx	r3
}
 800877e:	bf00      	nop
 8008780:	3708      	adds	r7, #8
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <_ZN23CPantallaEjecucionRampa11SetEstacionEP13CEstacionBase>:
void CPantallaEjecucionRampa::SetEstacion(CEstacionBase *estacion)
{
 8008786:	b580      	push	{r7, lr}
 8008788:	b082      	sub	sp, #8
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
 800878e:	6039      	str	r1, [r7, #0]
	CPantallaBase::SetEstacion(estacion);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6839      	ldr	r1, [r7, #0]
 8008794:	4618      	mov	r0, r3
 8008796:	f7fa fe6c 	bl	8003472 <_ZN13CPantallaBase11SetEstacionEP13CEstacionBase>
	Estacion->DesactivarCalefactor();
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	3338      	adds	r3, #56	@ 0x38
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4610      	mov	r0, r2
 80087ae:	4798      	blx	r3
}
 80087b0:	bf00      	nop
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <_ZN21CPantallaEliminarPasoC1Ev>:

#include <GUI/Rampa/PantallaEliminarPaso/CPantallaEliminarPaso.hpp>
#include <RapaTemperatura/CControladorPasosRampa.hpp>
#include <GUI/ManejadorPantallas/CManejadorPantallas.hpp>

CPantallaEliminarPaso::CPantallaEliminarPaso():
 80087b8:	b590      	push	{r4, r7, lr}
 80087ba:	b08b      	sub	sp, #44	@ 0x2c
 80087bc:	af08      	add	r7, sp, #32
 80087be:	6078      	str	r0, [r7, #4]
CPantallaBase(1, (char*)" ELIMINAR PASO")
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a35      	ldr	r2, [pc, #212]	@ (8008898 <_ZN21CPantallaEliminarPasoC1Ev+0xe0>)
 80087c4:	2101      	movs	r1, #1
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7fa fdc6 	bl	8003358 <_ZN13CPantallaBaseC1EiPc>
 80087cc:	4a33      	ldr	r2, [pc, #204]	@ (800889c <_ZN21CPantallaEliminarPasoC1Ev+0xe4>)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	601a      	str	r2, [r3, #0]
 80087d2:	4a33      	ldr	r2, [pc, #204]	@ (80088a0 <_ZN21CPantallaEliminarPasoC1Ev+0xe8>)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated constructor stub
	LabelMemoria=new CEtiquetaTft( 5, 35, 50, 20, COLOR::BLACK,(char*)"Eliminar: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 80087d8:	20a4      	movs	r0, #164	@ 0xa4
 80087da:	f009 f981 	bl	8011ae0 <_Znwj>
 80087de:	4603      	mov	r3, r0
 80087e0:	461c      	mov	r4, r3
 80087e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80087e6:	9306      	str	r3, [sp, #24]
 80087e8:	2300      	movs	r3, #0
 80087ea:	9305      	str	r3, [sp, #20]
 80087ec:	2303      	movs	r3, #3
 80087ee:	9304      	str	r3, [sp, #16]
 80087f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80087f4:	9303      	str	r3, [sp, #12]
 80087f6:	4b2b      	ldr	r3, [pc, #172]	@ (80088a4 <_ZN21CPantallaEliminarPasoC1Ev+0xec>)
 80087f8:	9302      	str	r3, [sp, #8]
 80087fa:	2300      	movs	r3, #0
 80087fc:	9301      	str	r3, [sp, #4]
 80087fe:	2314      	movs	r3, #20
 8008800:	9300      	str	r3, [sp, #0]
 8008802:	2332      	movs	r3, #50	@ 0x32
 8008804:	2223      	movs	r2, #35	@ 0x23
 8008806:	2105      	movs	r1, #5
 8008808:	4620      	mov	r0, r4
 800880a:	f7fa fb59 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f8c3 40dc 	str.w	r4, [r3, #220]	@ 0xdc
	LabelGuardar=new CEtiquetaTft( 10, 200, 130, 30, COLOR::GREEN,(char*)"ACEPTAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 8008814:	20a4      	movs	r0, #164	@ 0xa4
 8008816:	f009 f963 	bl	8011ae0 <_Znwj>
 800881a:	4603      	mov	r3, r0
 800881c:	461c      	mov	r4, r3
 800881e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008822:	9306      	str	r3, [sp, #24]
 8008824:	2301      	movs	r3, #1
 8008826:	9305      	str	r3, [sp, #20]
 8008828:	2303      	movs	r3, #3
 800882a:	9304      	str	r3, [sp, #16]
 800882c:	2300      	movs	r3, #0
 800882e:	9303      	str	r3, [sp, #12]
 8008830:	4b1d      	ldr	r3, [pc, #116]	@ (80088a8 <_ZN21CPantallaEliminarPasoC1Ev+0xf0>)
 8008832:	9302      	str	r3, [sp, #8]
 8008834:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8008838:	9301      	str	r3, [sp, #4]
 800883a:	231e      	movs	r3, #30
 800883c:	9300      	str	r3, [sp, #0]
 800883e:	2382      	movs	r3, #130	@ 0x82
 8008840:	22c8      	movs	r2, #200	@ 0xc8
 8008842:	210a      	movs	r1, #10
 8008844:	4620      	mov	r0, r4
 8008846:	f7fa fb3b 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8c3 40d4 	str.w	r4, [r3, #212]	@ 0xd4
	LabelCancelar=new CEtiquetaTft( 160, 200, 145, 30, COLOR::RED,(char*)"CANCELAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 8008850:	20a4      	movs	r0, #164	@ 0xa4
 8008852:	f009 f945 	bl	8011ae0 <_Znwj>
 8008856:	4603      	mov	r3, r0
 8008858:	461c      	mov	r4, r3
 800885a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800885e:	9306      	str	r3, [sp, #24]
 8008860:	2301      	movs	r3, #1
 8008862:	9305      	str	r3, [sp, #20]
 8008864:	2303      	movs	r3, #3
 8008866:	9304      	str	r3, [sp, #16]
 8008868:	2300      	movs	r3, #0
 800886a:	9303      	str	r3, [sp, #12]
 800886c:	4b0f      	ldr	r3, [pc, #60]	@ (80088ac <_ZN21CPantallaEliminarPasoC1Ev+0xf4>)
 800886e:	9302      	str	r3, [sp, #8]
 8008870:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8008874:	9301      	str	r3, [sp, #4]
 8008876:	231e      	movs	r3, #30
 8008878:	9300      	str	r3, [sp, #0]
 800887a:	2391      	movs	r3, #145	@ 0x91
 800887c:	22c8      	movs	r2, #200	@ 0xc8
 800887e:	21a0      	movs	r1, #160	@ 0xa0
 8008880:	4620      	mov	r0, r4
 8008882:	f7fa fb1d 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8c3 40d8 	str.w	r4, [r3, #216]	@ 0xd8

}
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4618      	mov	r0, r3
 8008890:	370c      	adds	r7, #12
 8008892:	46bd      	mov	sp, r7
 8008894:	bd90      	pop	{r4, r7, pc}
 8008896:	bf00      	nop
 8008898:	08014b78 	.word	0x08014b78
 800889c:	08015994 	.word	0x08015994
 80088a0:	08015a20 	.word	0x08015a20
 80088a4:	08014b88 	.word	0x08014b88
 80088a8:	08014b94 	.word	0x08014b94
 80088ac:	08014b9c 	.word	0x08014b9c

080088b0 <_ZN21CPantallaEliminarPasoD1Ev>:

CPantallaEliminarPaso::~CPantallaEliminarPaso()
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	4a07      	ldr	r2, [pc, #28]	@ (80088d8 <_ZN21CPantallaEliminarPasoD1Ev+0x28>)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	601a      	str	r2, [r3, #0]
 80088be:	4a07      	ldr	r2, [pc, #28]	@ (80088dc <_ZN21CPantallaEliminarPasoD1Ev+0x2c>)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7fa fd12 	bl	80032f0 <_ZN13CPantallaBaseD1Ev>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	4618      	mov	r0, r3
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	08015994 	.word	0x08015994
 80088dc:	08015a20 	.word	0x08015a20

080088e0 <_ZThn48_N21CPantallaEliminarPasoD1Ev>:
	CEtiquetaTft *LabelGuardar;
	CEtiquetaTft *LabelCancelar;
	CEtiquetaTft *LabelMemoria;
public:
	CPantallaEliminarPaso();
	virtual ~CPantallaEliminarPaso();
 80088e0:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80088e4:	f7ff bfe4 	b.w	80088b0 <_ZN21CPantallaEliminarPasoD1Ev>

080088e8 <_ZN21CPantallaEliminarPasoD0Ev>:
CPantallaEliminarPaso::~CPantallaEliminarPaso()
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
}
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f7ff ffdd 	bl	80088b0 <_ZN21CPantallaEliminarPasoD1Ev>
 80088f6:	21e0      	movs	r1, #224	@ 0xe0
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f009 f8ef 	bl	8011adc <_ZdlPvj>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	4618      	mov	r0, r3
 8008902:	3708      	adds	r7, #8
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <_ZThn48_N21CPantallaEliminarPasoD0Ev>:
 8008908:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800890c:	f7ff bfec 	b.w	80088e8 <_ZN21CPantallaEliminarPasoD0Ev>

08008910 <_ZN21CPantallaEliminarPaso20OnBotonUnoClickEventEv>:

void CPantallaEliminarPaso::OnBotonUnoClickEvent()
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
	//ControladorRampas.EliminaRampa(ID_Rampa);
	ControladorPasosRampa.EliminaPasoRampa(ID_Paso);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800891e:	4619      	mov	r1, r3
 8008920:	4806      	ldr	r0, [pc, #24]	@ (800893c <_ZN21CPantallaEliminarPaso20OnBotonUnoClickEventEv+0x2c>)
 8008922:	f002 fa78 	bl	800ae16 <_ZN22CControladorPasosRampa16EliminaPasoRampaEi>
	ManejadorPantallas.AsignaPantallaPasosRampa(ID_Rampa);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800892c:	4619      	mov	r1, r3
 800892e:	4804      	ldr	r0, [pc, #16]	@ (8008940 <_ZN21CPantallaEliminarPaso20OnBotonUnoClickEventEv+0x30>)
 8008930:	f7fb fc01 	bl	8004136 <_ZN19CManejadorPantallas24AsignaPantallaPasosRampaEi>
}
 8008934:	bf00      	nop
 8008936:	3708      	adds	r7, #8
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}
 800893c:	200001f8 	.word	0x200001f8
 8008940:	2000025c 	.word	0x2000025c

08008944 <_ZThn48_N21CPantallaEliminarPaso20OnBotonUnoClickEventEv>:
	virtual void OnBotonUnoClickEvent();
 8008944:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008948:	f7ff bfe2 	b.w	8008910 <_ZN21CPantallaEliminarPaso20OnBotonUnoClickEventEv>

0800894c <_ZN21CPantallaEliminarPaso21OnBotonTresClickEventEv>:
void CPantallaEliminarPaso::OnBotonTresClickEvent()
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]

	 ManejadorPantallas.MuestraPantallaPaso(ID_Rampa, ID_Paso);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008960:	461a      	mov	r2, r3
 8008962:	4803      	ldr	r0, [pc, #12]	@ (8008970 <_ZN21CPantallaEliminarPaso21OnBotonTresClickEventEv+0x24>)
 8008964:	f7fb fc5c 	bl	8004220 <_ZN19CManejadorPantallas19MuestraPantallaPasoEii>

}
 8008968:	bf00      	nop
 800896a:	3708      	adds	r7, #8
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}
 8008970:	2000025c 	.word	0x2000025c

08008974 <_ZThn48_N21CPantallaEliminarPaso21OnBotonTresClickEventEv>:
	virtual void OnBotonTresClickEvent();
 8008974:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008978:	f7ff bfe8 	b.w	800894c <_ZN21CPantallaEliminarPaso21OnBotonTresClickEventEv>

0800897c <_ZN21CPantallaEliminarPaso9SetIdPasoEii>:

void CPantallaEliminarPaso::SetIdPaso(int id_rampa,int id_paso)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
	ID_Paso=id_paso;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	ID_Rampa=id_rampa;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	68ba      	ldr	r2, [r7, #8]
 8008994:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	//CRampa rampa=	ControladorRampas.DameRampa(ID_Rampa);
	sprintf(TextoEliminar,"Eliminar ?");
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	33b4      	adds	r3, #180	@ 0xb4
 800899c:	4903      	ldr	r1, [pc, #12]	@ (80089ac <_ZN21CPantallaEliminarPaso9SetIdPasoEii+0x30>)
 800899e:	4618      	mov	r0, r3
 80089a0:	f009 fe9a 	bl	80126d8 <siprintf>
}
 80089a4:	bf00      	nop
 80089a6:	3710      	adds	r7, #16
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	08014ba8 	.word	0x08014ba8

080089b0 <_ZN21CPantallaEliminarPaso4ShowEv>:

void CPantallaEliminarPaso::Show()
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
	CPantallaBase::Show();
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7fa fd3e 	bl	800343c <_ZN13CPantallaBase4ShowEv>
	LabelMemoria->SetTexto(TextoEliminar);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	33b4      	adds	r3, #180	@ 0xb4
 80089ca:	4619      	mov	r1, r3
 80089cc:	4610      	mov	r0, r2
 80089ce:	f7fa fab1 	bl	8002f34 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelMemoria->Show();
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	334c      	adds	r3, #76	@ 0x4c
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4610      	mov	r0, r2
 80089e6:	4798      	blx	r3
	LabelGuardar->Show();
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	334c      	adds	r3, #76	@ 0x4c
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4610      	mov	r0, r2
 80089fc:	4798      	blx	r3
	LabelCancelar->Show();
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	334c      	adds	r3, #76	@ 0x4c
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4610      	mov	r0, r2
 8008a12:	4798      	blx	r3

}
 8008a14:	bf00      	nop
 8008a16:	3708      	adds	r7, #8
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <_ZN22CPantallaEliminarRampaC1Ev>:
#include <GUI/ManejadorPantallas/CManejadorPantallas.hpp>
#include <EPROM/CEprom.hpp>
#include<string.h>
#include <RapaTemperatura/CControladorPasosRampa.hpp>

CPantallaEliminarRampa::CPantallaEliminarRampa():
 8008a1c:	b590      	push	{r4, r7, lr}
 8008a1e:	b08b      	sub	sp, #44	@ 0x2c
 8008a20:	af08      	add	r7, sp, #32
 8008a22:	6078      	str	r0, [r7, #4]
CPantallaBase(1, (char*)" ELIMINAR RAMPA")
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	4a35      	ldr	r2, [pc, #212]	@ (8008afc <_ZN22CPantallaEliminarRampaC1Ev+0xe0>)
 8008a28:	2101      	movs	r1, #1
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7fa fc94 	bl	8003358 <_ZN13CPantallaBaseC1EiPc>
 8008a30:	4a33      	ldr	r2, [pc, #204]	@ (8008b00 <_ZN22CPantallaEliminarRampaC1Ev+0xe4>)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	601a      	str	r2, [r3, #0]
 8008a36:	4a33      	ldr	r2, [pc, #204]	@ (8008b04 <_ZN22CPantallaEliminarRampaC1Ev+0xe8>)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated constructor stub
	LabelMemoria=new CEtiquetaTft( 5, 35, 50, 20, COLOR::BLACK,(char*)"Eliminar: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8008a3c:	20a4      	movs	r0, #164	@ 0xa4
 8008a3e:	f009 f84f 	bl	8011ae0 <_Znwj>
 8008a42:	4603      	mov	r3, r0
 8008a44:	461c      	mov	r4, r3
 8008a46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008a4a:	9306      	str	r3, [sp, #24]
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	9305      	str	r3, [sp, #20]
 8008a50:	2303      	movs	r3, #3
 8008a52:	9304      	str	r3, [sp, #16]
 8008a54:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008a58:	9303      	str	r3, [sp, #12]
 8008a5a:	4b2b      	ldr	r3, [pc, #172]	@ (8008b08 <_ZN22CPantallaEliminarRampaC1Ev+0xec>)
 8008a5c:	9302      	str	r3, [sp, #8]
 8008a5e:	2300      	movs	r3, #0
 8008a60:	9301      	str	r3, [sp, #4]
 8008a62:	2314      	movs	r3, #20
 8008a64:	9300      	str	r3, [sp, #0]
 8008a66:	2332      	movs	r3, #50	@ 0x32
 8008a68:	2223      	movs	r2, #35	@ 0x23
 8008a6a:	2105      	movs	r1, #5
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	f7fa fa27 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8c3 40d8 	str.w	r4, [r3, #216]	@ 0xd8
	LabelGuardar=new CEtiquetaTft( 10, 200, 130, 30, COLOR::GREEN,(char*)"ACEPTAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 8008a78:	20a4      	movs	r0, #164	@ 0xa4
 8008a7a:	f009 f831 	bl	8011ae0 <_Znwj>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	461c      	mov	r4, r3
 8008a82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008a86:	9306      	str	r3, [sp, #24]
 8008a88:	2301      	movs	r3, #1
 8008a8a:	9305      	str	r3, [sp, #20]
 8008a8c:	2303      	movs	r3, #3
 8008a8e:	9304      	str	r3, [sp, #16]
 8008a90:	2300      	movs	r3, #0
 8008a92:	9303      	str	r3, [sp, #12]
 8008a94:	4b1d      	ldr	r3, [pc, #116]	@ (8008b0c <_ZN22CPantallaEliminarRampaC1Ev+0xf0>)
 8008a96:	9302      	str	r3, [sp, #8]
 8008a98:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8008a9c:	9301      	str	r3, [sp, #4]
 8008a9e:	231e      	movs	r3, #30
 8008aa0:	9300      	str	r3, [sp, #0]
 8008aa2:	2382      	movs	r3, #130	@ 0x82
 8008aa4:	22c8      	movs	r2, #200	@ 0xc8
 8008aa6:	210a      	movs	r1, #10
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	f7fa fa09 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8c3 40d0 	str.w	r4, [r3, #208]	@ 0xd0
	LabelCancelar=new CEtiquetaTft( 160, 200, 145, 30, COLOR::RED,(char*)"CANCELAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 8008ab4:	20a4      	movs	r0, #164	@ 0xa4
 8008ab6:	f009 f813 	bl	8011ae0 <_Znwj>
 8008aba:	4603      	mov	r3, r0
 8008abc:	461c      	mov	r4, r3
 8008abe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008ac2:	9306      	str	r3, [sp, #24]
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	9305      	str	r3, [sp, #20]
 8008ac8:	2303      	movs	r3, #3
 8008aca:	9304      	str	r3, [sp, #16]
 8008acc:	2300      	movs	r3, #0
 8008ace:	9303      	str	r3, [sp, #12]
 8008ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8008b10 <_ZN22CPantallaEliminarRampaC1Ev+0xf4>)
 8008ad2:	9302      	str	r3, [sp, #8]
 8008ad4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8008ad8:	9301      	str	r3, [sp, #4]
 8008ada:	231e      	movs	r3, #30
 8008adc:	9300      	str	r3, [sp, #0]
 8008ade:	2391      	movs	r3, #145	@ 0x91
 8008ae0:	22c8      	movs	r2, #200	@ 0xc8
 8008ae2:	21a0      	movs	r1, #160	@ 0xa0
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	f7fa f9eb 	bl	8002ec0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8c3 40d4 	str.w	r4, [r3, #212]	@ 0xd4

}
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	4618      	mov	r0, r3
 8008af4:	370c      	adds	r7, #12
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd90      	pop	{r4, r7, pc}
 8008afa:	bf00      	nop
 8008afc:	08014bb4 	.word	0x08014bb4
 8008b00:	08015a54 	.word	0x08015a54
 8008b04:	08015ae0 	.word	0x08015ae0
 8008b08:	08014bc4 	.word	0x08014bc4
 8008b0c:	08014bd0 	.word	0x08014bd0
 8008b10:	08014bd8 	.word	0x08014bd8

08008b14 <_ZN22CPantallaEliminarRampaD1Ev>:

CPantallaEliminarRampa::~CPantallaEliminarRampa()
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	4a07      	ldr	r2, [pc, #28]	@ (8008b3c <_ZN22CPantallaEliminarRampaD1Ev+0x28>)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	601a      	str	r2, [r3, #0]
 8008b22:	4a07      	ldr	r2, [pc, #28]	@ (8008b40 <_ZN22CPantallaEliminarRampaD1Ev+0x2c>)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7fa fbe0 	bl	80032f0 <_ZN13CPantallaBaseD1Ev>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4618      	mov	r0, r3
 8008b34:	3708      	adds	r7, #8
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	08015a54 	.word	0x08015a54
 8008b40:	08015ae0 	.word	0x08015ae0

08008b44 <_ZThn48_N22CPantallaEliminarRampaD1Ev>:
	CEtiquetaTft *LabelGuardar;
	CEtiquetaTft *LabelCancelar;
	CEtiquetaTft *LabelMemoria;
public:
	CPantallaEliminarRampa();
	virtual ~CPantallaEliminarRampa();
 8008b44:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008b48:	f7ff bfe4 	b.w	8008b14 <_ZN22CPantallaEliminarRampaD1Ev>

08008b4c <_ZN22CPantallaEliminarRampaD0Ev>:
CPantallaEliminarRampa::~CPantallaEliminarRampa()
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
}
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f7ff ffdd 	bl	8008b14 <_ZN22CPantallaEliminarRampaD1Ev>
 8008b5a:	21dc      	movs	r1, #220	@ 0xdc
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f008 ffbd 	bl	8011adc <_ZdlPvj>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4618      	mov	r0, r3
 8008b66:	3708      	adds	r7, #8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <_ZThn48_N22CPantallaEliminarRampaD0Ev>:
 8008b6c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008b70:	f7ff bfec 	b.w	8008b4c <_ZN22CPantallaEliminarRampaD0Ev>

08008b74 <_ZN22CPantallaEliminarRampa20OnBotonUnoClickEventEv>:

void CPantallaEliminarRampa::OnBotonUnoClickEvent()
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
	ControladorRampas.EliminaRampa(ID_Rampa);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008b82:	4619      	mov	r1, r3
 8008b84:	4808      	ldr	r0, [pc, #32]	@ (8008ba8 <_ZN22CPantallaEliminarRampa20OnBotonUnoClickEventEv+0x34>)
 8008b86:	f002 fef9 	bl	800b97c <_ZN18CControladorRampas12EliminaRampaEi>
	ControladorPasosRampa.EliminaPasosRampa(ID_Rampa);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008b90:	4619      	mov	r1, r3
 8008b92:	4806      	ldr	r0, [pc, #24]	@ (8008bac <_ZN22CPantallaEliminarRampa20OnBotonUnoClickEventEv+0x38>)
 8008b94:	f001 ffba 	bl	800ab0c <_ZN22CControladorPasosRampa17EliminaPasosRampaEi>
	ManejadorPantallas.MuestraMenuRampa();
 8008b98:	4805      	ldr	r0, [pc, #20]	@ (8008bb0 <_ZN22CPantallaEliminarRampa20OnBotonUnoClickEventEv+0x3c>)
 8008b9a:	f7fb f965 	bl	8003e68 <_ZN19CManejadorPantallas16MuestraMenuRampaEv>
}
 8008b9e:	bf00      	nop
 8008ba0:	3708      	adds	r7, #8
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	20000364 	.word	0x20000364
 8008bac:	200001f8 	.word	0x200001f8
 8008bb0:	2000025c 	.word	0x2000025c

08008bb4 <_ZThn48_N22CPantallaEliminarRampa20OnBotonUnoClickEventEv>:
	virtual void OnBotonUnoClickEvent();
 8008bb4:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008bb8:	f7ff bfdc 	b.w	8008b74 <_ZN22CPantallaEliminarRampa20OnBotonUnoClickEventEv>

08008bbc <_ZN22CPantallaEliminarRampa21OnBotonTresClickEventEv>:
void CPantallaEliminarRampa::OnBotonTresClickEvent()
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]

	 ManejadorPantallas.MuestraPantallaRampa(ID_Rampa);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008bca:	4619      	mov	r1, r3
 8008bcc:	4803      	ldr	r0, [pc, #12]	@ (8008bdc <_ZN22CPantallaEliminarRampa21OnBotonTresClickEventEv+0x20>)
 8008bce:	f7fb fa4f 	bl	8004070 <_ZN19CManejadorPantallas20MuestraPantallaRampaEi>

}
 8008bd2:	bf00      	nop
 8008bd4:	3708      	adds	r7, #8
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	2000025c 	.word	0x2000025c

08008be0 <_ZThn48_N22CPantallaEliminarRampa21OnBotonTresClickEventEv>:
	virtual void OnBotonTresClickEvent();
 8008be0:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008be4:	f7ff bfea 	b.w	8008bbc <_ZN22CPantallaEliminarRampa21OnBotonTresClickEventEv>

08008be8 <_ZN22CPantallaEliminarRampa10SetIdRampaEi>:

void CPantallaEliminarRampa::SetIdRampa(int id_rampa)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b088      	sub	sp, #32
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
	ID_Rampa=id_rampa;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	683a      	ldr	r2, [r7, #0]
 8008bf6:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	CRampa rampa=	ControladorRampas.DameRampa(ID_Rampa);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8008c00:	f107 0308 	add.w	r3, r7, #8
 8008c04:	490a      	ldr	r1, [pc, #40]	@ (8008c30 <_ZN22CPantallaEliminarRampa10SetIdRampaEi+0x48>)
 8008c06:	4618      	mov	r0, r3
 8008c08:	f002 fc9d 	bl	800b546 <_ZN18CControladorRampas9DameRampaEi>
	sprintf(TextoEliminar,"Eliminar %s?",rampa.Nombre);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f103 00b0 	add.w	r0, r3, #176	@ 0xb0
 8008c12:	f107 0308 	add.w	r3, r7, #8
 8008c16:	3308      	adds	r3, #8
 8008c18:	461a      	mov	r2, r3
 8008c1a:	4906      	ldr	r1, [pc, #24]	@ (8008c34 <_ZN22CPantallaEliminarRampa10SetIdRampaEi+0x4c>)
 8008c1c:	f009 fd5c 	bl	80126d8 <siprintf>
}
 8008c20:	f107 0308 	add.w	r3, r7, #8
 8008c24:	4618      	mov	r0, r3
 8008c26:	f002 ff9b 	bl	800bb60 <_ZN6CRampaD1Ev>
 8008c2a:	3720      	adds	r7, #32
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	20000364 	.word	0x20000364
 8008c34:	08014be4 	.word	0x08014be4

08008c38 <_ZN22CPantallaEliminarRampa4ShowEv>:

void CPantallaEliminarRampa::Show()
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
	CPantallaBase::Show();
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7fa fbfa 	bl	800343c <_ZN13CPantallaBase4ShowEv>

	LabelMemoria->SetTexto(TextoEliminar);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	33b0      	adds	r3, #176	@ 0xb0
 8008c52:	4619      	mov	r1, r3
 8008c54:	4610      	mov	r0, r2
 8008c56:	f7fa f96d 	bl	8002f34 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelMemoria->Show();
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	334c      	adds	r3, #76	@ 0x4c
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4610      	mov	r0, r2
 8008c6e:	4798      	blx	r3
	LabelGuardar->Show();
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	334c      	adds	r3, #76	@ 0x4c
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4610      	mov	r0, r2
 8008c84:	4798      	blx	r3
	LabelCancelar->Show();
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	334c      	adds	r3, #76	@ 0x4c
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4610      	mov	r0, r2
 8008c9a:	4798      	blx	r3

}
 8008c9c:	bf00      	nop
 8008c9e:	3708      	adds	r7, #8
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <_ZN18CPantallaMenuRampaC1Ev>:
#include "GUI/Menu/CMenu.hpp"
#include "string.h"
#include <RapaTemperatura/CControladorRampas.hpp>
#include <GUI/PantallaMenuBase/CPantallaMenuBase.hpp>

CPantallaMenuRampa::CPantallaMenuRampa():
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
CPantallaMenuBase((char*) " Menu Rampa")
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4909      	ldr	r1, [pc, #36]	@ (8008cd4 <_ZN18CPantallaMenuRampaC1Ev+0x30>)
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7fd fc0b 	bl	80064cc <_ZN17CPantallaMenuBaseC1EPc>
 8008cb6:	4a08      	ldr	r2, [pc, #32]	@ (8008cd8 <_ZN18CPantallaMenuRampaC1Ev+0x34>)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	601a      	str	r2, [r3, #0]
 8008cbc:	4a07      	ldr	r2, [pc, #28]	@ (8008cdc <_ZN18CPantallaMenuRampaC1Ev+0x38>)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	631a      	str	r2, [r3, #48]	@ 0x30
 8008cc2:	4a07      	ldr	r2, [pc, #28]	@ (8008ce0 <_ZN18CPantallaMenuRampaC1Ev+0x3c>)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{

}
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3708      	adds	r7, #8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	08014bf4 	.word	0x08014bf4
 8008cd8:	08015b14 	.word	0x08015b14
 8008cdc:	08015bc0 	.word	0x08015bc0
 8008ce0:	08015bf4 	.word	0x08015bf4

08008ce4 <_ZN18CPantallaMenuRampaD1Ev>:

CPantallaMenuRampa::~CPantallaMenuRampa()
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	4a09      	ldr	r2, [pc, #36]	@ (8008d14 <_ZN18CPantallaMenuRampaD1Ev+0x30>)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	601a      	str	r2, [r3, #0]
 8008cf2:	4a09      	ldr	r2, [pc, #36]	@ (8008d18 <_ZN18CPantallaMenuRampaD1Ev+0x34>)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	631a      	str	r2, [r3, #48]	@ 0x30
 8008cf8:	4a08      	ldr	r2, [pc, #32]	@ (8008d1c <_ZN18CPantallaMenuRampaD1Ev+0x38>)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	// TODO Auto-generated destructor stub
}
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7fd fc36 	bl	8006574 <_ZN17CPantallaMenuBaseD1Ev>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3708      	adds	r7, #8
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	08015b14 	.word	0x08015b14
 8008d18:	08015bc0 	.word	0x08015bc0
 8008d1c:	08015bf4 	.word	0x08015bf4

08008d20 <_ZThn48_N18CPantallaMenuRampaD1Ev>:
private:
	CEstacionBase *Estacion;
	CMenuItem* item1,*item2;
public:
	CPantallaMenuRampa();
	virtual ~CPantallaMenuRampa();
 8008d20:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008d24:	f7ff bfde 	b.w	8008ce4 <_ZN18CPantallaMenuRampaD1Ev>

08008d28 <_ZThn172_N18CPantallaMenuRampaD1Ev>:
 8008d28:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8008d2c:	f7ff bfda 	b.w	8008ce4 <_ZN18CPantallaMenuRampaD1Ev>

08008d30 <_ZN18CPantallaMenuRampaD0Ev>:
CPantallaMenuRampa::~CPantallaMenuRampa()
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
}
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f7ff ffd3 	bl	8008ce4 <_ZN18CPantallaMenuRampaD1Ev>
 8008d3e:	21c0      	movs	r1, #192	@ 0xc0
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f008 fecb 	bl	8011adc <_ZdlPvj>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3708      	adds	r7, #8
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <_ZThn172_N18CPantallaMenuRampaD0Ev>:
 8008d50:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8008d54:	f7ff bfec 	b.w	8008d30 <_ZN18CPantallaMenuRampaD0Ev>

08008d58 <_ZThn48_N18CPantallaMenuRampaD0Ev>:
 8008d58:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008d5c:	f7ff bfe8 	b.w	8008d30 <_ZN18CPantallaMenuRampaD0Ev>

08008d60 <_ZN18CPantallaMenuRampa23OnBotonCuatroClickEventEv>:
void CPantallaMenuRampa::OnBotonCuatroClickEvent()
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaManual();
 8008d68:	4803      	ldr	r0, [pc, #12]	@ (8008d78 <_ZN18CPantallaMenuRampa23OnBotonCuatroClickEventEv+0x18>)
 8008d6a:	f7fb f845 	bl	8003df8 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
}
 8008d6e:	bf00      	nop
 8008d70:	3708      	adds	r7, #8
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	2000025c 	.word	0x2000025c

08008d7c <_ZThn48_N18CPantallaMenuRampa23OnBotonCuatroClickEventEv>:
	virtual void OnBotonCuatroClickEvent();
 8008d7c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008d80:	f7ff bfee 	b.w	8008d60 <_ZN18CPantallaMenuRampa23OnBotonCuatroClickEventEv>

08008d84 <_ZN18CPantallaMenuRampa11OnMenuEventEi>:
void CPantallaMenuRampa::OnMenuEvent(int identificador)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
	switch(identificador)
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	f113 0f02 	cmn.w	r3, #2
 8008d94:	d004      	beq.n	8008da0 <_ZN18CPantallaMenuRampa11OnMenuEventEi+0x1c>
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d9c:	d004      	beq.n	8008da8 <_ZN18CPantallaMenuRampa11OnMenuEventEi+0x24>
 8008d9e:	e009      	b.n	8008db4 <_ZN18CPantallaMenuRampa11OnMenuEventEi+0x30>
	{
	case MENU_RAMPA::MENU_RAMPA_SALIR:
		ManejadorPantallas.MuestraMenuPrincipal();
 8008da0:	4809      	ldr	r0, [pc, #36]	@ (8008dc8 <_ZN18CPantallaMenuRampa11OnMenuEventEi+0x44>)
 8008da2:	f7fb f845 	bl	8003e30 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>
		break;
 8008da6:	e00a      	b.n	8008dbe <_ZN18CPantallaMenuRampa11OnMenuEventEi+0x3a>
//	case MENU_PRINCIPAL::MENU_MEMORIA_2:
//	case MENU_PRINCIPAL::MENU_MEMORIA_3:
//		ManejadorPantallas.MuestraPantallaConfiguracionMemoria(identificador);
//		break;
	case MENU_RAMPA::MENU_AGREGAR:
		ManejadorPantallas.MuestraPantallaEditorNombre(-1);
 8008da8:	f04f 31ff 	mov.w	r1, #4294967295
 8008dac:	4806      	ldr	r0, [pc, #24]	@ (8008dc8 <_ZN18CPantallaMenuRampa11OnMenuEventEi+0x44>)
 8008dae:	f7fb f99e 	bl	80040ee <_ZN19CManejadorPantallas27MuestraPantallaEditorNombreEi>
//		ManejadorPantallas.MuestraPantallaEliminarRampa(0);
		break;
 8008db2:	e004      	b.n	8008dbe <_ZN18CPantallaMenuRampa11OnMenuEventEi+0x3a>
	default:
		ManejadorPantallas.MuestraPantallaRampa(identificador);
 8008db4:	6839      	ldr	r1, [r7, #0]
 8008db6:	4804      	ldr	r0, [pc, #16]	@ (8008dc8 <_ZN18CPantallaMenuRampa11OnMenuEventEi+0x44>)
 8008db8:	f7fb f95a 	bl	8004070 <_ZN19CManejadorPantallas20MuestraPantallaRampaEi>
	}

}
 8008dbc:	bf00      	nop
 8008dbe:	bf00      	nop
 8008dc0:	3708      	adds	r7, #8
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	2000025c 	.word	0x2000025c

08008dcc <_ZThn172_N18CPantallaMenuRampa11OnMenuEventEi>:
	virtual void OnMenuEvent(int identificador);
 8008dcc:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8008dd0:	f7ff bfd8 	b.w	8008d84 <_ZN18CPantallaMenuRampa11OnMenuEventEi>

08008dd4 <_ZN18CPantallaMenuRampa21OnBotonTresClickEventEv>:

void CPantallaMenuRampa::OnBotonTresClickEvent()
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(3);
 8008ddc:	2103      	movs	r1, #3
 8008dde:	4803      	ldr	r0, [pc, #12]	@ (8008dec <_ZN18CPantallaMenuRampa21OnBotonTresClickEventEv+0x18>)
 8008de0:	f7fb f906 	bl	8003ff0 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 8008de4:	bf00      	nop
 8008de6:	3708      	adds	r7, #8
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	2000025c 	.word	0x2000025c

08008df0 <_ZThn48_N18CPantallaMenuRampa21OnBotonTresClickEventEv>:

	virtual void OnBotonUnoClickEvent();
	virtual void OnBotonDosClickEvent();
	virtual void OnBotonTresClickEvent();
 8008df0:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008df4:	f7ff bfee 	b.w	8008dd4 <_ZN18CPantallaMenuRampa21OnBotonTresClickEventEv>

08008df8 <_ZN18CPantallaMenuRampa20OnBotonUnoClickEventEv>:
void CPantallaMenuRampa::OnBotonUnoClickEvent()
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(1);
 8008e00:	2101      	movs	r1, #1
 8008e02:	4803      	ldr	r0, [pc, #12]	@ (8008e10 <_ZN18CPantallaMenuRampa20OnBotonUnoClickEventEv+0x18>)
 8008e04:	f7fb f8f4 	bl	8003ff0 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 8008e08:	bf00      	nop
 8008e0a:	3708      	adds	r7, #8
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	2000025c 	.word	0x2000025c

08008e14 <_ZThn48_N18CPantallaMenuRampa20OnBotonUnoClickEventEv>:
	virtual void OnBotonUnoClickEvent();
 8008e14:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008e18:	f7ff bfee 	b.w	8008df8 <_ZN18CPantallaMenuRampa20OnBotonUnoClickEventEv>

08008e1c <_ZN18CPantallaMenuRampa20OnBotonDosClickEventEv>:
void CPantallaMenuRampa::OnBotonDosClickEvent()
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(2);
 8008e24:	2102      	movs	r1, #2
 8008e26:	4803      	ldr	r0, [pc, #12]	@ (8008e34 <_ZN18CPantallaMenuRampa20OnBotonDosClickEventEv+0x18>)
 8008e28:	f7fb f8e2 	bl	8003ff0 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 8008e2c:	bf00      	nop
 8008e2e:	3708      	adds	r7, #8
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	2000025c 	.word	0x2000025c

08008e38 <_ZThn48_N18CPantallaMenuRampa20OnBotonDosClickEventEv>:
	virtual void OnBotonDosClickEvent();
 8008e38:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008e3c:	f7ff bfee 	b.w	8008e1c <_ZN18CPantallaMenuRampa20OnBotonDosClickEventEv>

08008e40 <_ZN18CPantallaMenuRampa12SeleccionadaEv>:
void CPantallaMenuRampa::Seleccionada()
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b090      	sub	sp, #64	@ 0x40
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
	this->BorraMenu();
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	338c      	adds	r3, #140	@ 0x8c
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4610      	mov	r0, r2
 8008e54:	4798      	blx	r3
	char texto[20];
	// TODO Auto-generated constructor stub
	int nrampas=ControladorRampas.DameNumeroRampas();
 8008e56:	481e      	ldr	r0, [pc, #120]	@ (8008ed0 <_ZN18CPantallaMenuRampa12SeleccionadaEv+0x90>)
 8008e58:	f002 fb38 	bl	800b4cc <_ZN18CControladorRampas16DameNumeroRampasEv>
 8008e5c:	63b8      	str	r0, [r7, #56]	@ 0x38
	for(int i=0;i<nrampas;i++)
 8008e5e:	2300      	movs	r3, #0
 8008e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e62:	e01f      	b.n	8008ea4 <_ZN18CPantallaMenuRampa12SeleccionadaEv+0x64>
	{
		CRampa rampa=ControladorRampas.DameRampaNumero(i);
 8008e64:	f107 030c 	add.w	r3, r7, #12
 8008e68:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008e6a:	4919      	ldr	r1, [pc, #100]	@ (8008ed0 <_ZN18CPantallaMenuRampa12SeleccionadaEv+0x90>)
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f002 fbbe 	bl	800b5ee <_ZN18CControladorRampas15DameRampaNumeroEi>
		sprintf(texto,"%s",rampa.Nombre);
 8008e72:	f107 030c 	add.w	r3, r7, #12
 8008e76:	f103 0208 	add.w	r2, r3, #8
 8008e7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e7e:	4915      	ldr	r1, [pc, #84]	@ (8008ed4 <_ZN18CPantallaMenuRampa12SeleccionadaEv+0x94>)
 8008e80:	4618      	mov	r0, r3
 8008e82:	f009 fc29 	bl	80126d8 <siprintf>
		AgregaMenuItem(texto, rampa.ID_RAMPA);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	8a7a      	ldrh	r2, [r7, #18]
 8008e8a:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7fd fbb2 	bl	80065f8 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	}
 8008e94:	f107 030c 	add.w	r3, r7, #12
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f002 fe61 	bl	800bb60 <_ZN6CRampaD1Ev>
	for(int i=0;i<nrampas;i++)
 8008e9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ea4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	dbdb      	blt.n	8008e64 <_ZN18CPantallaMenuRampa12SeleccionadaEv+0x24>
	AgregaMenuItem((char*)"Agregar", MENU_RAMPA::MENU_AGREGAR);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f04f 32ff 	mov.w	r2, #4294967295
 8008eb2:	4909      	ldr	r1, [pc, #36]	@ (8008ed8 <_ZN18CPantallaMenuRampa12SeleccionadaEv+0x98>)
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7fd fb9f 	bl	80065f8 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"Salir", MENU_RAMPA::MENU_RAMPA_SALIR);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f06f 0201 	mvn.w	r2, #1
 8008ec0:	4906      	ldr	r1, [pc, #24]	@ (8008edc <_ZN18CPantallaMenuRampa12SeleccionadaEv+0x9c>)
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7fd fb98 	bl	80065f8 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
}
 8008ec8:	bf00      	nop
 8008eca:	3740      	adds	r7, #64	@ 0x40
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	20000364 	.word	0x20000364
 8008ed4:	08014c00 	.word	0x08014c00
 8008ed8:	08014c04 	.word	0x08014c04
 8008edc:	08014c0c 	.word	0x08014c0c

08008ee0 <_ZN13CPantallaPasoC1Ev>:

#include <GUI/Rampa/PantallaPaso/CPantallaPaso.hpp>
#include <GUI/PantallaMenuBase/CPantallaMenuBase.hpp>
#include <GUI/ManejadorPantallas/CManejadorPantallas.hpp>

CPantallaPaso::CPantallaPaso():
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
CPantallaMenuBase((char*) " PASO")
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4912      	ldr	r1, [pc, #72]	@ (8008f34 <_ZN13CPantallaPasoC1Ev+0x54>)
 8008eec:	4618      	mov	r0, r3
 8008eee:	f7fd faed 	bl	80064cc <_ZN17CPantallaMenuBaseC1EPc>
 8008ef2:	4a11      	ldr	r2, [pc, #68]	@ (8008f38 <_ZN13CPantallaPasoC1Ev+0x58>)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	601a      	str	r2, [r3, #0]
 8008ef8:	4a10      	ldr	r2, [pc, #64]	@ (8008f3c <_ZN13CPantallaPasoC1Ev+0x5c>)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	631a      	str	r2, [r3, #48]	@ 0x30
 8008efe:	4a10      	ldr	r2, [pc, #64]	@ (8008f40 <_ZN13CPantallaPasoC1Ev+0x60>)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	// TODO Auto-generated constructor stub
	AgregaMenuItem((char*)"Modificar",MENU_PANTALLA_PASO::PANTALLA_PASO_MODIFICAR);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	490e      	ldr	r1, [pc, #56]	@ (8008f44 <_ZN13CPantallaPasoC1Ev+0x64>)
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f7fd fb73 	bl	80065f8 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"Eliminar", MENU_PANTALLA_PASO::PANTALLA_PASO_ELIMINAR);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2201      	movs	r2, #1
 8008f16:	490c      	ldr	r1, [pc, #48]	@ (8008f48 <_ZN13CPantallaPasoC1Ev+0x68>)
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7fd fb6d 	bl	80065f8 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"Salir", MENU_PANTALLA_PASO::PANTALLA_PASO_SALIR);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2202      	movs	r2, #2
 8008f22:	490a      	ldr	r1, [pc, #40]	@ (8008f4c <_ZN13CPantallaPasoC1Ev+0x6c>)
 8008f24:	4618      	mov	r0, r3
 8008f26:	f7fd fb67 	bl	80065f8 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>

}
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3708      	adds	r7, #8
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	08014c14 	.word	0x08014c14
 8008f38:	08015c08 	.word	0x08015c08
 8008f3c:	08015ca4 	.word	0x08015ca4
 8008f40:	08015cd8 	.word	0x08015cd8
 8008f44:	08014c1c 	.word	0x08014c1c
 8008f48:	08014c28 	.word	0x08014c28
 8008f4c:	08014c34 	.word	0x08014c34

08008f50 <_ZN13CPantallaPasoD1Ev>:

CPantallaPaso::~CPantallaPaso()
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	4a09      	ldr	r2, [pc, #36]	@ (8008f80 <_ZN13CPantallaPasoD1Ev+0x30>)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	601a      	str	r2, [r3, #0]
 8008f5e:	4a09      	ldr	r2, [pc, #36]	@ (8008f84 <_ZN13CPantallaPasoD1Ev+0x34>)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	631a      	str	r2, [r3, #48]	@ 0x30
 8008f64:	4a08      	ldr	r2, [pc, #32]	@ (8008f88 <_ZN13CPantallaPasoD1Ev+0x38>)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	// TODO Auto-generated destructor stub
}
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7fd fb00 	bl	8006574 <_ZN17CPantallaMenuBaseD1Ev>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4618      	mov	r0, r3
 8008f78:	3708      	adds	r7, #8
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	bf00      	nop
 8008f80:	08015c08 	.word	0x08015c08
 8008f84:	08015ca4 	.word	0x08015ca4
 8008f88:	08015cd8 	.word	0x08015cd8

08008f8c <_ZThn48_N13CPantallaPasoD1Ev>:
private:
	int ID_Paso;
	int ID_Rampa;
public:
	CPantallaPaso();
	virtual ~CPantallaPaso();
 8008f8c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008f90:	f7ff bfde 	b.w	8008f50 <_ZN13CPantallaPasoD1Ev>

08008f94 <_ZThn172_N13CPantallaPasoD1Ev>:
 8008f94:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8008f98:	f7ff bfda 	b.w	8008f50 <_ZN13CPantallaPasoD1Ev>

08008f9c <_ZN13CPantallaPasoD0Ev>:
CPantallaPaso::~CPantallaPaso()
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
}
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f7ff ffd3 	bl	8008f50 <_ZN13CPantallaPasoD1Ev>
 8008faa:	21bc      	movs	r1, #188	@ 0xbc
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f008 fd95 	bl	8011adc <_ZdlPvj>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3708      	adds	r7, #8
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <_ZThn172_N13CPantallaPasoD0Ev>:
 8008fbc:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8008fc0:	f7ff bfec 	b.w	8008f9c <_ZN13CPantallaPasoD0Ev>

08008fc4 <_ZThn48_N13CPantallaPasoD0Ev>:
 8008fc4:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008fc8:	f7ff bfe8 	b.w	8008f9c <_ZN13CPantallaPasoD0Ev>

08008fcc <_ZN13CPantallaPaso9SetIdPasoEii>:

void CPantallaPaso::SetIdPaso(int id_rampa,int id_Paso)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b085      	sub	sp, #20
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	607a      	str	r2, [r7, #4]
	ID_Paso=id_Paso;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	ID_Rampa=id_rampa;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	68ba      	ldr	r2, [r7, #8]
 8008fe4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
//	CRampa rampa=ControladorRampas.DameRampa(ID_Rampa);
//	this->SetTituloPantalla(rampa.Nombre);
}
 8008fe8:	bf00      	nop
 8008fea:	3714      	adds	r7, #20
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <_ZN13CPantallaPaso11OnMenuEventEi>:
void CPantallaPaso::OnMenuEvent(int identificador)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]

	switch(identificador)
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	2b02      	cmp	r3, #2
 8009002:	d009      	beq.n	8009018 <_ZN13CPantallaPaso11OnMenuEventEi+0x24>
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	2b02      	cmp	r3, #2
 8009008:	dc24      	bgt.n	8009054 <_ZN13CPantallaPaso11OnMenuEventEi+0x60>
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d00b      	beq.n	8009028 <_ZN13CPantallaPaso11OnMenuEventEi+0x34>
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	2b01      	cmp	r3, #1
 8009014:	d013      	beq.n	800903e <_ZN13CPantallaPaso11OnMenuEventEi+0x4a>
	case MENU_PANTALLA_PASO::PANTALLA_PASO_ELIMINAR:
		ManejadorPantallas.MuestraPantallaEliminarPaso(ID_Rampa,ID_Paso);
		break;
	}

}
 8009016:	e01d      	b.n	8009054 <_ZN13CPantallaPaso11OnMenuEventEi+0x60>
		ManejadorPantallas.AsignaPantallaPasosRampa(ID_Rampa);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800901e:	4619      	mov	r1, r3
 8009020:	480e      	ldr	r0, [pc, #56]	@ (800905c <_ZN13CPantallaPaso11OnMenuEventEi+0x68>)
 8009022:	f7fb f888 	bl	8004136 <_ZN19CManejadorPantallas24AsignaPantallaPasosRampaEi>
		break;
 8009026:	e015      	b.n	8009054 <_ZN13CPantallaPaso11OnMenuEventEi+0x60>
		ManejadorPantallas.MuestraPantallaEdicionPaso(ID_Rampa, ID_Paso);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 10b8 	ldr.w	r1, [r3, #184]	@ 0xb8
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009034:	461a      	mov	r2, r3
 8009036:	4809      	ldr	r0, [pc, #36]	@ (800905c <_ZN13CPantallaPaso11OnMenuEventEi+0x68>)
 8009038:	f7fb f8cc 	bl	80041d4 <_ZN19CManejadorPantallas26MuestraPantallaEdicionPasoEii>
		break;
 800903c:	e00a      	b.n	8009054 <_ZN13CPantallaPaso11OnMenuEventEi+0x60>
		ManejadorPantallas.MuestraPantallaEliminarPaso(ID_Rampa,ID_Paso);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8d3 10b8 	ldr.w	r1, [r3, #184]	@ 0xb8
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800904a:	461a      	mov	r2, r3
 800904c:	4803      	ldr	r0, [pc, #12]	@ (800905c <_ZN13CPantallaPaso11OnMenuEventEi+0x68>)
 800904e:	f7fb f90c 	bl	800426a <_ZN19CManejadorPantallas27MuestraPantallaEliminarPasoEii>
		break;
 8009052:	bf00      	nop
}
 8009054:	bf00      	nop
 8009056:	3708      	adds	r7, #8
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}
 800905c:	2000025c 	.word	0x2000025c

08009060 <_ZThn172_N13CPantallaPaso11OnMenuEventEi>:
	void SetIdPaso(int id_rampa,int id_Paso);
	virtual void OnMenuEvent(int identificador);
 8009060:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8009064:	f7ff bfc6 	b.w	8008ff4 <_ZN13CPantallaPaso11OnMenuEventEi>

08009068 <_ZN19CPantallaPasosRampaC1Ei>:
#include "string.h"
#include <RapaTemperatura/CControladorRampas.hpp>
#include <GUI/PantallaMenuBase/CPantallaMenuBase.hpp>
CControladorPasosRampa ControladorPasosRampa;

CPantallaPasosRampa::CPantallaPasosRampa(int id_Rampa):
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
CPantallaMenuBase((char*) " Menu PASOS")
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	490b      	ldr	r1, [pc, #44]	@ (80090a4 <_ZN19CPantallaPasosRampaC1Ei+0x3c>)
 8009076:	4618      	mov	r0, r3
 8009078:	f7fd fa28 	bl	80064cc <_ZN17CPantallaMenuBaseC1EPc>
 800907c:	4a0a      	ldr	r2, [pc, #40]	@ (80090a8 <_ZN19CPantallaPasosRampaC1Ei+0x40>)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	601a      	str	r2, [r3, #0]
 8009082:	4a0a      	ldr	r2, [pc, #40]	@ (80090ac <_ZN19CPantallaPasosRampaC1Ei+0x44>)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	631a      	str	r2, [r3, #48]	@ 0x30
 8009088:	4a09      	ldr	r2, [pc, #36]	@ (80090b0 <_ZN19CPantallaPasosRampaC1Ei+0x48>)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	// TODO Auto-generated constructor stub
	ID_Rampa=id_Rampa;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	683a      	ldr	r2, [r7, #0]
 8009094:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	4618      	mov	r0, r3
 800909c:	3708      	adds	r7, #8
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop
 80090a4:	08014c3c 	.word	0x08014c3c
 80090a8:	08015cec 	.word	0x08015cec
 80090ac:	08015d8c 	.word	0x08015d8c
 80090b0:	08015dc0 	.word	0x08015dc0

080090b4 <_ZN19CPantallaPasosRampa10SetIDRampaEi>:
void CPantallaPasosRampa::SetIDRampa(int idRampa)
{
 80090b4:	b590      	push	{r4, r7, lr}
 80090b6:	b095      	sub	sp, #84	@ 0x54
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
	ID_Rampa=idRampa;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	683a      	ldr	r2, [r7, #0]
 80090c2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	int numeroPaso=1;
 80090c6:	2301      	movs	r3, #1
 80090c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int id_paso=0;
 80090ca:	2300      	movs	r3, #0
 80090cc:	64bb      	str	r3, [r7, #72]	@ 0x48
	char texto[20];
	this->BorraMenu();
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	338c      	adds	r3, #140	@ 0x8c
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4610      	mov	r0, r2
 80090da:	4798      	blx	r3
	CRampa rampa=ControladorRampas.DameRampa(ID_Rampa);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80090e2:	f107 0314 	add.w	r3, r7, #20
 80090e6:	492f      	ldr	r1, [pc, #188]	@ (80091a4 <_ZN19CPantallaPasosRampa10SetIDRampaEi+0xf0>)
 80090e8:	4618      	mov	r0, r3
 80090ea:	f002 fa2c 	bl	800b546 <_ZN18CControladorRampas9DameRampaEi>
	this->SetTituloPantalla(rampa.Nombre);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	3370      	adds	r3, #112	@ 0x70
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f107 0214 	add.w	r2, r7, #20
 80090fc:	3208      	adds	r2, #8
 80090fe:	4611      	mov	r1, r2
 8009100:	4798      	blx	r3

	int npasos=ControladorPasosRampa.DameNumeroPasosRampa(ID_Rampa);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009108:	4619      	mov	r1, r3
 800910a:	4827      	ldr	r0, [pc, #156]	@ (80091a8 <_ZN19CPantallaPasosRampa10SetIDRampaEi+0xf4>)
 800910c:	f001 ff28 	bl	800af60 <_ZN22CControladorPasosRampa20DameNumeroPasosRampaEi>
 8009110:	6438      	str	r0, [r7, #64]	@ 0x40
	for(int i=0;i<npasos;i++)
 8009112:	2300      	movs	r3, #0
 8009114:	647b      	str	r3, [r7, #68]	@ 0x44
 8009116:	e02a      	b.n	800916e <_ZN19CPantallaPasosRampa10SetIDRampaEi+0xba>
	{
		CPaso paso=		ControladorPasosRampa.DameSiguientePaso(ID_Rampa,id_paso);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800911e:	f107 0008 	add.w	r0, r7, #8
 8009122:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009124:	4920      	ldr	r1, [pc, #128]	@ (80091a8 <_ZN19CPantallaPasosRampa10SetIDRampaEi+0xf4>)
 8009126:	f001 ff56 	bl	800afd6 <_ZN22CControladorPasosRampa17DameSiguientePasoEii>
		if(paso.Ocupado==0)
 800912a:	7b3b      	ldrb	r3, [r7, #12]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d101      	bne.n	8009134 <_ZN19CPantallaPasosRampa10SetIDRampaEi+0x80>
			continue;
 8009130:	2400      	movs	r4, #0
 8009132:	e013      	b.n	800915c <_ZN19CPantallaPasosRampa10SetIDRampaEi+0xa8>
		id_paso=paso.ID_Paso;
 8009134:	7bbb      	ldrb	r3, [r7, #14]
 8009136:	64bb      	str	r3, [r7, #72]	@ 0x48
		sprintf(texto,"Paso %d",numeroPaso);
 8009138:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800913c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800913e:	491b      	ldr	r1, [pc, #108]	@ (80091ac <_ZN19CPantallaPasosRampa10SetIDRampaEi+0xf8>)
 8009140:	4618      	mov	r0, r3
 8009142:	f009 fac9 	bl	80126d8 <siprintf>
		numeroPaso++;
 8009146:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009148:	3301      	adds	r3, #1
 800914a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		AgregaMenuItem(texto,paso.ID_Paso);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	7bba      	ldrb	r2, [r7, #14]
 8009150:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8009154:	4618      	mov	r0, r3
 8009156:	f7fd fa4f 	bl	80065f8 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	}
 800915a:	2401      	movs	r4, #1
 800915c:	f107 0308 	add.w	r3, r7, #8
 8009160:	4618      	mov	r0, r3
 8009162:	f002 fcb7 	bl	800bad4 <_ZN5CPasoD1Ev>
 8009166:	2c01      	cmp	r4, #1
	for(int i=0;i<npasos;i++)
 8009168:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800916a:	3301      	adds	r3, #1
 800916c:	647b      	str	r3, [r7, #68]	@ 0x44
 800916e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009170:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009172:	429a      	cmp	r2, r3
 8009174:	dbd0      	blt.n	8009118 <_ZN19CPantallaPasosRampa10SetIDRampaEi+0x64>
	AgregaMenuItem((char*)"Agregar", MENU_PASO::MENU_PASO_AGREGAR);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f04f 32ff 	mov.w	r2, #4294967295
 800917c:	490c      	ldr	r1, [pc, #48]	@ (80091b0 <_ZN19CPantallaPasosRampa10SetIDRampaEi+0xfc>)
 800917e:	4618      	mov	r0, r3
 8009180:	f7fd fa3a 	bl	80065f8 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"Salir", MENU_PASO::MENU_PASO_SALIR);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f06f 0201 	mvn.w	r2, #1
 800918a:	490a      	ldr	r1, [pc, #40]	@ (80091b4 <_ZN19CPantallaPasosRampa10SetIDRampaEi+0x100>)
 800918c:	4618      	mov	r0, r3
 800918e:	f7fd fa33 	bl	80065f8 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>

}
 8009192:	f107 0314 	add.w	r3, r7, #20
 8009196:	4618      	mov	r0, r3
 8009198:	f002 fce2 	bl	800bb60 <_ZN6CRampaD1Ev>
 800919c:	3754      	adds	r7, #84	@ 0x54
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd90      	pop	{r4, r7, pc}
 80091a2:	bf00      	nop
 80091a4:	20000364 	.word	0x20000364
 80091a8:	200001f8 	.word	0x200001f8
 80091ac:	08014c48 	.word	0x08014c48
 80091b0:	08014c50 	.word	0x08014c50
 80091b4:	08014c58 	.word	0x08014c58

080091b8 <_ZN19CPantallaPasosRampaD1Ev>:
CPantallaPasosRampa::~CPantallaPasosRampa()
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	4a09      	ldr	r2, [pc, #36]	@ (80091e8 <_ZN19CPantallaPasosRampaD1Ev+0x30>)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	601a      	str	r2, [r3, #0]
 80091c6:	4a09      	ldr	r2, [pc, #36]	@ (80091ec <_ZN19CPantallaPasosRampaD1Ev+0x34>)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80091cc:	4a08      	ldr	r2, [pc, #32]	@ (80091f0 <_ZN19CPantallaPasosRampaD1Ev+0x38>)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	// TODO Auto-generated destructor stub
}
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7fd f9cc 	bl	8006574 <_ZN17CPantallaMenuBaseD1Ev>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	4618      	mov	r0, r3
 80091e0:	3708      	adds	r7, #8
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop
 80091e8:	08015cec 	.word	0x08015cec
 80091ec:	08015d8c 	.word	0x08015d8c
 80091f0:	08015dc0 	.word	0x08015dc0

080091f4 <_ZThn48_N19CPantallaPasosRampaD1Ev>:
	CEstacionBase *Estacion;
	CMenuItem* item1,*item2;
	int ID_Rampa;
public:
	CPantallaPasosRampa(int id_Rampa);
	virtual ~CPantallaPasosRampa();
 80091f4:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80091f8:	f7ff bfde 	b.w	80091b8 <_ZN19CPantallaPasosRampaD1Ev>

080091fc <_ZThn172_N19CPantallaPasosRampaD1Ev>:
 80091fc:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8009200:	f7ff bfda 	b.w	80091b8 <_ZN19CPantallaPasosRampaD1Ev>

08009204 <_ZN19CPantallaPasosRampaD0Ev>:
CPantallaPasosRampa::~CPantallaPasosRampa()
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
}
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f7ff ffd3 	bl	80091b8 <_ZN19CPantallaPasosRampaD1Ev>
 8009212:	21c4      	movs	r1, #196	@ 0xc4
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f008 fc61 	bl	8011adc <_ZdlPvj>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4618      	mov	r0, r3
 800921e:	3708      	adds	r7, #8
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <_ZThn172_N19CPantallaPasosRampaD0Ev>:
 8009224:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8009228:	f7ff bfec 	b.w	8009204 <_ZN19CPantallaPasosRampaD0Ev>

0800922c <_ZThn48_N19CPantallaPasosRampaD0Ev>:
 800922c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8009230:	f7ff bfe8 	b.w	8009204 <_ZN19CPantallaPasosRampaD0Ev>

08009234 <_ZN19CPantallaPasosRampa11OnMenuEventEi>:

void CPantallaPasosRampa::OnMenuEvent(int identificador)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
	switch(identificador)
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	f113 0f02 	cmn.w	r3, #2
 8009244:	d004      	beq.n	8009250 <_ZN19CPantallaPasosRampa11OnMenuEventEi+0x1c>
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800924c:	d008      	beq.n	8009260 <_ZN19CPantallaPasosRampa11OnMenuEventEi+0x2c>
 800924e:	e011      	b.n	8009274 <_ZN19CPantallaPasosRampa11OnMenuEventEi+0x40>
	{
	case MENU_PASO::MENU_PASO_SALIR:
		ManejadorPantallas.MuestraPantallaRampa(ID_Rampa);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009256:	4619      	mov	r1, r3
 8009258:	480d      	ldr	r0, [pc, #52]	@ (8009290 <_ZN19CPantallaPasosRampa11OnMenuEventEi+0x5c>)
 800925a:	f7fa ff09 	bl	8004070 <_ZN19CManejadorPantallas20MuestraPantallaRampaEi>
		break;
 800925e:	e012      	b.n	8009286 <_ZN19CPantallaPasosRampa11OnMenuEventEi+0x52>
	case MENU_PASO::MENU_PASO_AGREGAR:
		ManejadorPantallas.MuestraPantallaEdicionPaso(ID_Rampa,-1);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009266:	f04f 32ff 	mov.w	r2, #4294967295
 800926a:	4619      	mov	r1, r3
 800926c:	4808      	ldr	r0, [pc, #32]	@ (8009290 <_ZN19CPantallaPasosRampa11OnMenuEventEi+0x5c>)
 800926e:	f7fa ffb1 	bl	80041d4 <_ZN19CManejadorPantallas26MuestraPantallaEdicionPasoEii>
		break;
 8009272:	e008      	b.n	8009286 <_ZN19CPantallaPasosRampa11OnMenuEventEi+0x52>
	default:
		ManejadorPantallas.MuestraPantallaPaso(ID_Rampa,identificador);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800927a:	683a      	ldr	r2, [r7, #0]
 800927c:	4619      	mov	r1, r3
 800927e:	4804      	ldr	r0, [pc, #16]	@ (8009290 <_ZN19CPantallaPasosRampa11OnMenuEventEi+0x5c>)
 8009280:	f7fa ffce 	bl	8004220 <_ZN19CManejadorPantallas19MuestraPantallaPasoEii>
		//ManejadorPantallas.MuestraPantallaRampa(identificador);

	}

}
 8009284:	bf00      	nop
 8009286:	bf00      	nop
 8009288:	3708      	adds	r7, #8
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	2000025c 	.word	0x2000025c

08009294 <_ZThn172_N19CPantallaPasosRampa11OnMenuEventEi>:
	virtual void OnMenuEvent(int identificador);
 8009294:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8009298:	f7ff bfcc 	b.w	8009234 <_ZN19CPantallaPasosRampa11OnMenuEventEi>

0800929c <_Z41__static_initialization_and_destruction_0ii>:
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d107      	bne.n	80092bc <_Z41__static_initialization_and_destruction_0ii+0x20>
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d102      	bne.n	80092bc <_Z41__static_initialization_and_destruction_0ii+0x20>
CControladorPasosRampa ControladorPasosRampa;
 80092b6:	4809      	ldr	r0, [pc, #36]	@ (80092dc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80092b8:	f001 fbc6 	bl	800aa48 <_ZN22CControladorPasosRampaC1Ev>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d107      	bne.n	80092d2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d102      	bne.n	80092d2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80092cc:	4803      	ldr	r0, [pc, #12]	@ (80092dc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80092ce:	f001 fbd3 	bl	800aa78 <_ZN22CControladorPasosRampaD1Ev>
}
 80092d2:	bf00      	nop
 80092d4:	3708      	adds	r7, #8
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop
 80092dc:	200001f8 	.word	0x200001f8

080092e0 <_GLOBAL__sub_I_ControladorPasosRampa>:
 80092e0:	b580      	push	{r7, lr}
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80092e8:	2001      	movs	r0, #1
 80092ea:	f7ff ffd7 	bl	800929c <_Z41__static_initialization_and_destruction_0ii>
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <_GLOBAL__sub_D_ControladorPasosRampa>:
 80092f0:	b580      	push	{r7, lr}
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80092f8:	2000      	movs	r0, #0
 80092fa:	f7ff ffcf 	bl	800929c <_Z41__static_initialization_and_destruction_0ii>
 80092fe:	bd80      	pop	{r7, pc}

08009300 <_ZN14CPantallaRampaC1Ev>:
#include <RapaTemperatura/CControladorRampas.hpp>
#include "GUI/Menu/CMenuItem.hpp"
#include <GUI/PantallaMenuBase/CPantallaMenuBase.hpp>
#include <GUI/ManejadorPantallas/CManejadorPantallas.hpp>

CPantallaRampa::CPantallaRampa():
 8009300:	b580      	push	{r7, lr}
 8009302:	b082      	sub	sp, #8
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
	CPantallaMenuBase((char*) " Rampa")
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	4918      	ldr	r1, [pc, #96]	@ (800936c <_ZN14CPantallaRampaC1Ev+0x6c>)
 800930c:	4618      	mov	r0, r3
 800930e:	f7fd f8dd 	bl	80064cc <_ZN17CPantallaMenuBaseC1EPc>
 8009312:	4a17      	ldr	r2, [pc, #92]	@ (8009370 <_ZN14CPantallaRampaC1Ev+0x70>)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	601a      	str	r2, [r3, #0]
 8009318:	4a16      	ldr	r2, [pc, #88]	@ (8009374 <_ZN14CPantallaRampaC1Ev+0x74>)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	631a      	str	r2, [r3, #48]	@ 0x30
 800931e:	4a16      	ldr	r2, [pc, #88]	@ (8009378 <_ZN14CPantallaRampaC1Ev+0x78>)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	// TODO Auto-generated constructor stub
	AgregaMenuItem((char*)"Ejecutar", MENU_PANTALLA_RAMPA::PANTALLA_RAMPA_EJECUTAR);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2200      	movs	r2, #0
 800932a:	4914      	ldr	r1, [pc, #80]	@ (800937c <_ZN14CPantallaRampaC1Ev+0x7c>)
 800932c:	4618      	mov	r0, r3
 800932e:	f7fd f963 	bl	80065f8 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"Modificar",MENU_PANTALLA_RAMPA::PANTALLA_RAMPA_MODIFICAR);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2201      	movs	r2, #1
 8009336:	4912      	ldr	r1, [pc, #72]	@ (8009380 <_ZN14CPantallaRampaC1Ev+0x80>)
 8009338:	4618      	mov	r0, r3
 800933a:	f7fd f95d 	bl	80065f8 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"EDITAR PASOS",MENU_PANTALLA_RAMPA::PANTALLA_RAMPA_PASOS);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2204      	movs	r2, #4
 8009342:	4910      	ldr	r1, [pc, #64]	@ (8009384 <_ZN14CPantallaRampaC1Ev+0x84>)
 8009344:	4618      	mov	r0, r3
 8009346:	f7fd f957 	bl	80065f8 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"Eliminar", MENU_PANTALLA_RAMPA::PANTALLA_RAMPA_ELIMINAR);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2202      	movs	r2, #2
 800934e:	490e      	ldr	r1, [pc, #56]	@ (8009388 <_ZN14CPantallaRampaC1Ev+0x88>)
 8009350:	4618      	mov	r0, r3
 8009352:	f7fd f951 	bl	80065f8 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"Salir", MENU_PANTALLA_RAMPA::PANTALLA_RAMPA_SALIR);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2203      	movs	r2, #3
 800935a:	490c      	ldr	r1, [pc, #48]	@ (800938c <_ZN14CPantallaRampaC1Ev+0x8c>)
 800935c:	4618      	mov	r0, r3
 800935e:	f7fd f94b 	bl	80065f8 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>

}
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	4618      	mov	r0, r3
 8009366:	3708      	adds	r7, #8
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	08014c60 	.word	0x08014c60
 8009370:	08015dd4 	.word	0x08015dd4
 8009374:	08015e70 	.word	0x08015e70
 8009378:	08015ea4 	.word	0x08015ea4
 800937c:	08014c68 	.word	0x08014c68
 8009380:	08014c74 	.word	0x08014c74
 8009384:	08014c80 	.word	0x08014c80
 8009388:	08014c90 	.word	0x08014c90
 800938c:	08014c9c 	.word	0x08014c9c

08009390 <_ZN14CPantallaRampaD1Ev>:

CPantallaRampa::~CPantallaRampa()
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	4a09      	ldr	r2, [pc, #36]	@ (80093c0 <_ZN14CPantallaRampaD1Ev+0x30>)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	601a      	str	r2, [r3, #0]
 800939e:	4a09      	ldr	r2, [pc, #36]	@ (80093c4 <_ZN14CPantallaRampaD1Ev+0x34>)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80093a4:	4a08      	ldr	r2, [pc, #32]	@ (80093c8 <_ZN14CPantallaRampaD1Ev+0x38>)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	// TODO Auto-generated destructor stub
}
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7fd f8e0 	bl	8006574 <_ZN17CPantallaMenuBaseD1Ev>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	4618      	mov	r0, r3
 80093b8:	3708      	adds	r7, #8
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	08015dd4 	.word	0x08015dd4
 80093c4:	08015e70 	.word	0x08015e70
 80093c8:	08015ea4 	.word	0x08015ea4

080093cc <_ZThn48_N14CPantallaRampaD1Ev>:
{
private:
	int ID_Rampa;
public:
	CPantallaRampa();
	virtual ~CPantallaRampa();
 80093cc:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80093d0:	f7ff bfde 	b.w	8009390 <_ZN14CPantallaRampaD1Ev>

080093d4 <_ZThn172_N14CPantallaRampaD1Ev>:
 80093d4:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 80093d8:	f7ff bfda 	b.w	8009390 <_ZN14CPantallaRampaD1Ev>

080093dc <_ZN14CPantallaRampaD0Ev>:
CPantallaRampa::~CPantallaRampa()
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
}
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f7ff ffd3 	bl	8009390 <_ZN14CPantallaRampaD1Ev>
 80093ea:	21b8      	movs	r1, #184	@ 0xb8
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f008 fb75 	bl	8011adc <_ZdlPvj>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	4618      	mov	r0, r3
 80093f6:	3708      	adds	r7, #8
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <_ZThn172_N14CPantallaRampaD0Ev>:
 80093fc:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8009400:	f7ff bfec 	b.w	80093dc <_ZN14CPantallaRampaD0Ev>

08009404 <_ZThn48_N14CPantallaRampaD0Ev>:
 8009404:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8009408:	f7ff bfe8 	b.w	80093dc <_ZN14CPantallaRampaD0Ev>

0800940c <_ZN14CPantallaRampa14SetNumeroRampaEi>:

void CPantallaRampa::SetNumeroRampa(int id_Rampa)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b088      	sub	sp, #32
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
	ID_Rampa=id_Rampa;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	683a      	ldr	r2, [r7, #0]
 800941a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	CRampa rampa=ControladorRampas.DameRampa(ID_Rampa);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8009424:	f107 0308 	add.w	r3, r7, #8
 8009428:	490a      	ldr	r1, [pc, #40]	@ (8009454 <_ZN14CPantallaRampa14SetNumeroRampaEi+0x48>)
 800942a:	4618      	mov	r0, r3
 800942c:	f002 f88b 	bl	800b546 <_ZN18CControladorRampas9DameRampaEi>
	this->SetTituloPantalla(rampa.Nombre);
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	3370      	adds	r3, #112	@ 0x70
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f107 0208 	add.w	r2, r7, #8
 800943e:	3208      	adds	r2, #8
 8009440:	4611      	mov	r1, r2
 8009442:	4798      	blx	r3
}
 8009444:	f107 0308 	add.w	r3, r7, #8
 8009448:	4618      	mov	r0, r3
 800944a:	f002 fb89 	bl	800bb60 <_ZN6CRampaD1Ev>
 800944e:	3720      	adds	r7, #32
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}
 8009454:	20000364 	.word	0x20000364

08009458 <_ZN14CPantallaRampa11OnMenuEventEi>:
void CPantallaRampa::OnMenuEvent(int identificador)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]

	switch(identificador)
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	2b04      	cmp	r3, #4
 8009466:	d831      	bhi.n	80094cc <_ZN14CPantallaRampa11OnMenuEventEi+0x74>
 8009468:	a201      	add	r2, pc, #4	@ (adr r2, 8009470 <_ZN14CPantallaRampa11OnMenuEventEi+0x18>)
 800946a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800946e:	bf00      	nop
 8009470:	080094bd 	.word	0x080094bd
 8009474:	0800948d 	.word	0x0800948d
 8009478:	0800949d 	.word	0x0800949d
 800947c:	08009485 	.word	0x08009485
 8009480:	080094ad 	.word	0x080094ad
	{
	case MENU_PANTALLA_RAMPA::PANTALLA_RAMPA_SALIR:
		ManejadorPantallas.MuestraMenuRampa();
 8009484:	4813      	ldr	r0, [pc, #76]	@ (80094d4 <_ZN14CPantallaRampa11OnMenuEventEi+0x7c>)
 8009486:	f7fa fcef 	bl	8003e68 <_ZN19CManejadorPantallas16MuestraMenuRampaEv>
		break;
 800948a:	e01f      	b.n	80094cc <_ZN14CPantallaRampa11OnMenuEventEi+0x74>
	case MENU_PANTALLA_RAMPA::PANTALLA_RAMPA_MODIFICAR:
		ManejadorPantallas.MuestraPantallaEditorNombre(ID_Rampa);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009492:	4619      	mov	r1, r3
 8009494:	480f      	ldr	r0, [pc, #60]	@ (80094d4 <_ZN14CPantallaRampa11OnMenuEventEi+0x7c>)
 8009496:	f7fa fe2a 	bl	80040ee <_ZN19CManejadorPantallas27MuestraPantallaEditorNombreEi>
		break;
 800949a:	e017      	b.n	80094cc <_ZN14CPantallaRampa11OnMenuEventEi+0x74>
	case MENU_PANTALLA_RAMPA::PANTALLA_RAMPA_ELIMINAR:
		ManejadorPantallas.MuestraPantallaEliminarRampa(ID_Rampa);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80094a2:	4619      	mov	r1, r3
 80094a4:	480b      	ldr	r0, [pc, #44]	@ (80094d4 <_ZN14CPantallaRampa11OnMenuEventEi+0x7c>)
 80094a6:	f7fa fe6e 	bl	8004186 <_ZN19CManejadorPantallas28MuestraPantallaEliminarRampaEi>
		break;
 80094aa:	e00f      	b.n	80094cc <_ZN14CPantallaRampa11OnMenuEventEi+0x74>
	case MENU_PANTALLA_RAMPA::PANTALLA_RAMPA_PASOS:
		ManejadorPantallas.AsignaPantallaPasosRampa(ID_Rampa);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80094b2:	4619      	mov	r1, r3
 80094b4:	4807      	ldr	r0, [pc, #28]	@ (80094d4 <_ZN14CPantallaRampa11OnMenuEventEi+0x7c>)
 80094b6:	f7fa fe3e 	bl	8004136 <_ZN19CManejadorPantallas24AsignaPantallaPasosRampaEi>
		break;
 80094ba:	e007      	b.n	80094cc <_ZN14CPantallaRampa11OnMenuEventEi+0x74>
	case MENU_PANTALLA_RAMPA::PANTALLA_RAMPA_EJECUTAR:
		ManejadorPantallas.MuestraPantallaEjecucionRampa(ID_Rampa);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80094c2:	4619      	mov	r1, r3
 80094c4:	4803      	ldr	r0, [pc, #12]	@ (80094d4 <_ZN14CPantallaRampa11OnMenuEventEi+0x7c>)
 80094c6:	f7fa fef8 	bl	80042ba <_ZN19CManejadorPantallas29MuestraPantallaEjecucionRampaEi>
		break;
 80094ca:	bf00      	nop
	}

}
 80094cc:	bf00      	nop
 80094ce:	3708      	adds	r7, #8
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	2000025c 	.word	0x2000025c

080094d8 <_ZThn172_N14CPantallaRampa11OnMenuEventEi>:
	void SetNumeroRampa(int id_Rampa);
	virtual void OnMenuEvent(int identificador);
 80094d8:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 80094dc:	f7ff bfbc 	b.w	8009458 <_ZN14CPantallaRampa11OnMenuEventEi>

080094e0 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt>:
}

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1,
		uint16_t Y1, uint16_t Colour)
{
 80094e0:	b590      	push	{r4, r7, lr}
 80094e2:	b087      	sub	sp, #28
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	4604      	mov	r4, r0
 80094e8:	4608      	mov	r0, r1
 80094ea:	4611      	mov	r1, r2
 80094ec:	461a      	mov	r2, r3
 80094ee:	4623      	mov	r3, r4
 80094f0:	80fb      	strh	r3, [r7, #6]
 80094f2:	4603      	mov	r3, r0
 80094f4:	80bb      	strh	r3, [r7, #4]
 80094f6:	460b      	mov	r3, r1
 80094f8:	807b      	strh	r3, [r7, #2]
 80094fa:	4613      	mov	r3, r2
 80094fc:	803b      	strh	r3, [r7, #0]
	uint16_t X_length = 0;
 80094fe:	2300      	movs	r3, #0
 8009500:	82fb      	strh	r3, [r7, #22]
	uint16_t Y_length = 0;
 8009502:	2300      	movs	r3, #0
 8009504:	82bb      	strh	r3, [r7, #20]
	uint8_t Negative_X = 0;
 8009506:	2300      	movs	r3, #0
 8009508:	74fb      	strb	r3, [r7, #19]
	uint8_t Negative_Y = 0;
 800950a:	2300      	movs	r3, #0
 800950c:	74bb      	strb	r3, [r7, #18]
	float Calc_Negative = 0;
 800950e:	f04f 0300 	mov.w	r3, #0
 8009512:	60fb      	str	r3, [r7, #12]

	Calc_Negative = X1 - X0;
 8009514:	887a      	ldrh	r2, [r7, #2]
 8009516:	88fb      	ldrh	r3, [r7, #6]
 8009518:	1ad3      	subs	r3, r2, r3
 800951a:	ee07 3a90 	vmov	s15, r3
 800951e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009522:	edc7 7a03 	vstr	s15, [r7, #12]
	if (Calc_Negative < 0)
 8009526:	edd7 7a03 	vldr	s15, [r7, #12]
 800952a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800952e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009532:	d501      	bpl.n	8009538 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x58>
		Negative_X = 1;
 8009534:	2301      	movs	r3, #1
 8009536:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8009538:	f04f 0300 	mov.w	r3, #0
 800953c:	60fb      	str	r3, [r7, #12]

	Calc_Negative = Y1 - Y0;
 800953e:	883a      	ldrh	r2, [r7, #0]
 8009540:	88bb      	ldrh	r3, [r7, #4]
 8009542:	1ad3      	subs	r3, r2, r3
 8009544:	ee07 3a90 	vmov	s15, r3
 8009548:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800954c:	edc7 7a03 	vstr	s15, [r7, #12]
	if (Calc_Negative < 0)
 8009550:	edd7 7a03 	vldr	s15, [r7, #12]
 8009554:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800955c:	d501      	bpl.n	8009562 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x82>
		Negative_Y = 1;
 800955e:	2301      	movs	r3, #1
 8009560:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if (!Negative_X)
 8009562:	7cfb      	ldrb	r3, [r7, #19]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d104      	bne.n	8009572 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x92>
	{
		X_length = X1 - X0;
 8009568:	887a      	ldrh	r2, [r7, #2]
 800956a:	88fb      	ldrh	r3, [r7, #6]
 800956c:	1ad3      	subs	r3, r2, r3
 800956e:	82fb      	strh	r3, [r7, #22]
 8009570:	e003      	b.n	800957a <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x9a>
	}
	else
	{
		X_length = X0 - X1;
 8009572:	88fa      	ldrh	r2, [r7, #6]
 8009574:	887b      	ldrh	r3, [r7, #2]
 8009576:	1ad3      	subs	r3, r2, r3
 8009578:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 800957a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800957c:	8afa      	ldrh	r2, [r7, #22]
 800957e:	88b9      	ldrh	r1, [r7, #4]
 8009580:	88f8      	ldrh	r0, [r7, #6]
 8009582:	f000 fd73 	bl	800a06c <_Z28ILI9341_Draw_Horizontal_Linetttt>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 8009586:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009588:	8afa      	ldrh	r2, [r7, #22]
 800958a:	8839      	ldrh	r1, [r7, #0]
 800958c:	88f8      	ldrh	r0, [r7, #6]
 800958e:	f000 fd6d 	bl	800a06c <_Z28ILI9341_Draw_Horizontal_Linetttt>

	//DRAW VERTICAL!
	if (!Negative_Y)
 8009592:	7cbb      	ldrb	r3, [r7, #18]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d104      	bne.n	80095a2 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xc2>
	{
		Y_length = Y1 - Y0;
 8009598:	883a      	ldrh	r2, [r7, #0]
 800959a:	88bb      	ldrh	r3, [r7, #4]
 800959c:	1ad3      	subs	r3, r2, r3
 800959e:	82bb      	strh	r3, [r7, #20]
 80095a0:	e003      	b.n	80095aa <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xca>
	}
	else
	{
		Y_length = Y0 - Y1;
 80095a2:	88ba      	ldrh	r2, [r7, #4]
 80095a4:	883b      	ldrh	r3, [r7, #0]
 80095a6:	1ad3      	subs	r3, r2, r3
 80095a8:	82bb      	strh	r3, [r7, #20]
	}
	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 80095aa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80095ac:	8aba      	ldrh	r2, [r7, #20]
 80095ae:	88b9      	ldrh	r1, [r7, #4]
 80095b0:	88f8      	ldrh	r0, [r7, #6]
 80095b2:	f000 fda9 	bl	800a108 <_Z26ILI9341_Draw_Vertical_Linetttt>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 80095b6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80095b8:	8aba      	ldrh	r2, [r7, #20]
 80095ba:	88b9      	ldrh	r1, [r7, #4]
 80095bc:	8878      	ldrh	r0, [r7, #2]
 80095be:	f000 fda3 	bl	800a108 <_Z26ILI9341_Draw_Vertical_Linetttt>

	if ((X_length > 0) || (Y_length > 0))
 80095c2:	8afb      	ldrh	r3, [r7, #22]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d102      	bne.n	80095ce <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xee>
 80095c8:	8abb      	ldrh	r3, [r7, #20]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d005      	beq.n	80095da <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xfa>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 80095ce:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80095d0:	8839      	ldrh	r1, [r7, #0]
 80095d2:	887b      	ldrh	r3, [r7, #2]
 80095d4:	4618      	mov	r0, r3
 80095d6:	f000 fc13 	bl	8009e00 <_Z18ILI9341_Draw_Pixelttt>
	}

}
 80095da:	bf00      	nop
 80095dc:	371c      	adds	r7, #28
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd90      	pop	{r4, r7, pc}

080095e2 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt>:

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1,
		uint16_t Y1, uint16_t Colour)
{
 80095e2:	b590      	push	{r4, r7, lr}
 80095e4:	b089      	sub	sp, #36	@ 0x24
 80095e6:	af02      	add	r7, sp, #8
 80095e8:	4604      	mov	r4, r0
 80095ea:	4608      	mov	r0, r1
 80095ec:	4611      	mov	r1, r2
 80095ee:	461a      	mov	r2, r3
 80095f0:	4623      	mov	r3, r4
 80095f2:	80fb      	strh	r3, [r7, #6]
 80095f4:	4603      	mov	r3, r0
 80095f6:	80bb      	strh	r3, [r7, #4]
 80095f8:	460b      	mov	r3, r1
 80095fa:	807b      	strh	r3, [r7, #2]
 80095fc:	4613      	mov	r3, r2
 80095fe:	803b      	strh	r3, [r7, #0]
	uint16_t X_length = 0;
 8009600:	2300      	movs	r3, #0
 8009602:	82fb      	strh	r3, [r7, #22]
	uint16_t Y_length = 0;
 8009604:	2300      	movs	r3, #0
 8009606:	82bb      	strh	r3, [r7, #20]
	uint8_t Negative_X = 0;
 8009608:	2300      	movs	r3, #0
 800960a:	74fb      	strb	r3, [r7, #19]
	uint8_t Negative_Y = 0;
 800960c:	2300      	movs	r3, #0
 800960e:	74bb      	strb	r3, [r7, #18]
	int32_t Calc_Negative = 0;
 8009610:	2300      	movs	r3, #0
 8009612:	60bb      	str	r3, [r7, #8]

	uint16_t X0_true = 0;
 8009614:	2300      	movs	r3, #0
 8009616:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 8009618:	2300      	movs	r3, #0
 800961a:	81fb      	strh	r3, [r7, #14]

	Calc_Negative = X1 - X0;
 800961c:	887a      	ldrh	r2, [r7, #2]
 800961e:	88fb      	ldrh	r3, [r7, #6]
 8009620:	1ad3      	subs	r3, r2, r3
 8009622:	60bb      	str	r3, [r7, #8]
	if (Calc_Negative < 0)
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	2b00      	cmp	r3, #0
 8009628:	da01      	bge.n	800962e <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x4c>
		Negative_X = 1;
 800962a:	2301      	movs	r3, #1
 800962c:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 800962e:	2300      	movs	r3, #0
 8009630:	60bb      	str	r3, [r7, #8]

	Calc_Negative = Y1 - Y0;
 8009632:	883a      	ldrh	r2, [r7, #0]
 8009634:	88bb      	ldrh	r3, [r7, #4]
 8009636:	1ad3      	subs	r3, r2, r3
 8009638:	60bb      	str	r3, [r7, #8]
	if (Calc_Negative < 0)
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	2b00      	cmp	r3, #0
 800963e:	da01      	bge.n	8009644 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x62>
		Negative_Y = 1;
 8009640:	2301      	movs	r3, #1
 8009642:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if (!Negative_X)
 8009644:	7cfb      	ldrb	r3, [r7, #19]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d106      	bne.n	8009658 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x76>
	{
		X_length = X1 - X0;
 800964a:	887a      	ldrh	r2, [r7, #2]
 800964c:	88fb      	ldrh	r3, [r7, #6]
 800964e:	1ad3      	subs	r3, r2, r3
 8009650:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8009652:	88fb      	ldrh	r3, [r7, #6]
 8009654:	823b      	strh	r3, [r7, #16]
 8009656:	e005      	b.n	8009664 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8009658:	88fa      	ldrh	r2, [r7, #6]
 800965a:	887b      	ldrh	r3, [r7, #2]
 800965c:	1ad3      	subs	r3, r2, r3
 800965e:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8009660:	887b      	ldrh	r3, [r7, #2]
 8009662:	823b      	strh	r3, [r7, #16]
	}

	//DRAW VERTICAL!
	if (!Negative_Y)
 8009664:	7cbb      	ldrb	r3, [r7, #18]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d106      	bne.n	8009678 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x96>
	{
		Y_length = Y1 - Y0;
 800966a:	883a      	ldrh	r2, [r7, #0]
 800966c:	88bb      	ldrh	r3, [r7, #4]
 800966e:	1ad3      	subs	r3, r2, r3
 8009670:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;
 8009672:	88bb      	ldrh	r3, [r7, #4]
 8009674:	81fb      	strh	r3, [r7, #14]
 8009676:	e005      	b.n	8009684 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 8009678:	88ba      	ldrh	r2, [r7, #4]
 800967a:	883b      	ldrh	r3, [r7, #0]
 800967c:	1ad3      	subs	r3, r2, r3
 800967e:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;
 8009680:	883b      	ldrh	r3, [r7, #0]
 8009682:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);
 8009684:	8abc      	ldrh	r4, [r7, #20]
 8009686:	8afa      	ldrh	r2, [r7, #22]
 8009688:	89f9      	ldrh	r1, [r7, #14]
 800968a:	8a38      	ldrh	r0, [r7, #16]
 800968c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800968e:	9300      	str	r3, [sp, #0]
 8009690:	4623      	mov	r3, r4
 8009692:	f000 fc81 	bl	8009f98 <_Z22ILI9341_Draw_Rectanglettttt>
}
 8009696:	bf00      	nop
 8009698:	371c      	adds	r7, #28
 800969a:	46bd      	mov	sp, r7
 800969c:	bd90      	pop	{r4, r7, pc}
	...

080096a0 <_Z17ILI9341_Draw_Charciittt>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, int X, int Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour)
{
 80096a0:	b590      	push	{r4, r7, lr}
 80096a2:	b08b      	sub	sp, #44	@ 0x2c
 80096a4:	af02      	add	r7, sp, #8
 80096a6:	60b9      	str	r1, [r7, #8]
 80096a8:	607a      	str	r2, [r7, #4]
 80096aa:	461a      	mov	r2, r3
 80096ac:	4603      	mov	r3, r0
 80096ae:	73fb      	strb	r3, [r7, #15]
 80096b0:	4613      	mov	r3, r2
 80096b2:	81bb      	strh	r3, [r7, #12]
	uint8_t function_char;
	uint8_t i, j;

	function_char = Character;
 80096b4:	7bfb      	ldrb	r3, [r7, #15]
 80096b6:	77fb      	strb	r3, [r7, #31]

	if (function_char < ' ')
 80096b8:	7ffb      	ldrb	r3, [r7, #31]
 80096ba:	2b1f      	cmp	r3, #31
 80096bc:	d802      	bhi.n	80096c4 <_Z17ILI9341_Draw_Charciittt+0x24>
	{
		Character = 0;
 80096be:	2300      	movs	r3, #0
 80096c0:	73fb      	strb	r3, [r7, #15]
 80096c2:	e002      	b.n	80096ca <_Z17ILI9341_Draw_Charciittt+0x2a>
	}
	else
	{
		function_char -= 32;
 80096c4:	7ffb      	ldrb	r3, [r7, #31]
 80096c6:	3b20      	subs	r3, #32
 80096c8:	77fb      	strb	r3, [r7, #31]
	}

	char temp[CHAR_WIDTH];
	for (uint8_t k = 0; k < CHAR_WIDTH; k++)
 80096ca:	2300      	movs	r3, #0
 80096cc:	773b      	strb	r3, [r7, #28]
 80096ce:	e012      	b.n	80096f6 <_Z17ILI9341_Draw_Charciittt+0x56>
	{
		temp[k] = font[function_char][k];
 80096d0:	7ffa      	ldrb	r2, [r7, #31]
 80096d2:	7f38      	ldrb	r0, [r7, #28]
 80096d4:	7f39      	ldrb	r1, [r7, #28]
 80096d6:	4c3c      	ldr	r4, [pc, #240]	@ (80097c8 <_Z17ILI9341_Draw_Charciittt+0x128>)
 80096d8:	4613      	mov	r3, r2
 80096da:	005b      	lsls	r3, r3, #1
 80096dc:	4413      	add	r3, r2
 80096de:	005b      	lsls	r3, r3, #1
 80096e0:	4423      	add	r3, r4
 80096e2:	4403      	add	r3, r0
 80096e4:	781a      	ldrb	r2, [r3, #0]
 80096e6:	f101 0320 	add.w	r3, r1, #32
 80096ea:	443b      	add	r3, r7
 80096ec:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t k = 0; k < CHAR_WIDTH; k++)
 80096f0:	7f3b      	ldrb	r3, [r7, #28]
 80096f2:	3301      	adds	r3, #1
 80096f4:	773b      	strb	r3, [r7, #28]
 80096f6:	7f3b      	ldrb	r3, [r7, #28]
 80096f8:	2b05      	cmp	r3, #5
 80096fa:	d9e9      	bls.n	80096d0 <_Z17ILI9341_Draw_Charciittt+0x30>
	}

	// Draw pixels
	ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH * Size, CHAR_HEIGHT * Size,
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	b298      	uxth	r0, r3
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	b299      	uxth	r1, r3
 8009704:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8009706:	461a      	mov	r2, r3
 8009708:	0052      	lsls	r2, r2, #1
 800970a:	4413      	add	r3, r2
 800970c:	005b      	lsls	r3, r3, #1
 800970e:	b29a      	uxth	r2, r3
 8009710:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8009712:	00db      	lsls	r3, r3, #3
 8009714:	b29c      	uxth	r4, r3
 8009716:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009718:	9300      	str	r3, [sp, #0]
 800971a:	4623      	mov	r3, r4
 800971c:	f000 fc3c 	bl	8009f98 <_Z22ILI9341_Draw_Rectanglettttt>
			Background_Colour);
	for (j = 0; j < CHAR_WIDTH; j++)
 8009720:	2300      	movs	r3, #0
 8009722:	777b      	strb	r3, [r7, #29]
 8009724:	e047      	b.n	80097b6 <_Z17ILI9341_Draw_Charciittt+0x116>
	{
		for (i = 0; i < CHAR_HEIGHT; i++)
 8009726:	2300      	movs	r3, #0
 8009728:	77bb      	strb	r3, [r7, #30]
 800972a:	e03e      	b.n	80097aa <_Z17ILI9341_Draw_Charciittt+0x10a>
		{
			if (temp[j] & (1 << i))
 800972c:	7f7b      	ldrb	r3, [r7, #29]
 800972e:	3320      	adds	r3, #32
 8009730:	443b      	add	r3, r7
 8009732:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8009736:	461a      	mov	r2, r3
 8009738:	7fbb      	ldrb	r3, [r7, #30]
 800973a:	fa42 f303 	asr.w	r3, r2, r3
 800973e:	f003 0301 	and.w	r3, r3, #1
 8009742:	2b00      	cmp	r3, #0
 8009744:	d02e      	beq.n	80097a4 <_Z17ILI9341_Draw_Charciittt+0x104>
			{
				if (Size == 1)
 8009746:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8009748:	2b01      	cmp	r3, #1
 800974a:	d110      	bne.n	800976e <_Z17ILI9341_Draw_Charciittt+0xce>
				{
					ILI9341_Draw_Pixel(X + j, Y + i, Colour);
 800974c:	7f7b      	ldrb	r3, [r7, #29]
 800974e:	b29a      	uxth	r2, r3
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	b29b      	uxth	r3, r3
 8009754:	4413      	add	r3, r2
 8009756:	b298      	uxth	r0, r3
 8009758:	7fbb      	ldrb	r3, [r7, #30]
 800975a:	b29a      	uxth	r2, r3
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	b29b      	uxth	r3, r3
 8009760:	4413      	add	r3, r2
 8009762:	b29b      	uxth	r3, r3
 8009764:	89ba      	ldrh	r2, [r7, #12]
 8009766:	4619      	mov	r1, r3
 8009768:	f000 fb4a 	bl	8009e00 <_Z18ILI9341_Draw_Pixelttt>
 800976c:	e01a      	b.n	80097a4 <_Z17ILI9341_Draw_Charciittt+0x104>
				}
				else
				{
					ILI9341_Draw_Rectangle(X + (j * Size), Y + (i * Size), Size,
 800976e:	7f7b      	ldrb	r3, [r7, #29]
 8009770:	b29b      	uxth	r3, r3
 8009772:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8009774:	fb12 f303 	smulbb	r3, r2, r3
 8009778:	b29a      	uxth	r2, r3
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	b29b      	uxth	r3, r3
 800977e:	4413      	add	r3, r2
 8009780:	b298      	uxth	r0, r3
 8009782:	7fbb      	ldrb	r3, [r7, #30]
 8009784:	b29b      	uxth	r3, r3
 8009786:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8009788:	fb12 f303 	smulbb	r3, r2, r3
 800978c:	b29a      	uxth	r2, r3
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	b29b      	uxth	r3, r3
 8009792:	4413      	add	r3, r2
 8009794:	b299      	uxth	r1, r3
 8009796:	8e3c      	ldrh	r4, [r7, #48]	@ 0x30
 8009798:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800979a:	89bb      	ldrh	r3, [r7, #12]
 800979c:	9300      	str	r3, [sp, #0]
 800979e:	4623      	mov	r3, r4
 80097a0:	f000 fbfa 	bl	8009f98 <_Z22ILI9341_Draw_Rectanglettttt>
		for (i = 0; i < CHAR_HEIGHT; i++)
 80097a4:	7fbb      	ldrb	r3, [r7, #30]
 80097a6:	3301      	adds	r3, #1
 80097a8:	77bb      	strb	r3, [r7, #30]
 80097aa:	7fbb      	ldrb	r3, [r7, #30]
 80097ac:	2b07      	cmp	r3, #7
 80097ae:	d9bd      	bls.n	800972c <_Z17ILI9341_Draw_Charciittt+0x8c>
	for (j = 0; j < CHAR_WIDTH; j++)
 80097b0:	7f7b      	ldrb	r3, [r7, #29]
 80097b2:	3301      	adds	r3, #1
 80097b4:	777b      	strb	r3, [r7, #29]
 80097b6:	7f7b      	ldrb	r3, [r7, #29]
 80097b8:	2b05      	cmp	r3, #5
 80097ba:	d9b4      	bls.n	8009726 <_Z17ILI9341_Draw_Charciittt+0x86>
							Size, Colour);
				}
			}
		}
	}
}
 80097bc:	bf00      	nop
 80097be:	bf00      	nop
 80097c0:	3724      	adds	r7, #36	@ 0x24
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd90      	pop	{r4, r7, pc}
 80097c6:	bf00      	nop
 80097c8:	08015eb0 	.word	0x08015eb0

080097cc <_Z17ILI9341_Draw_TextPKciittt>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char *Text, int X, int Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b086      	sub	sp, #24
 80097d0:	af02      	add	r7, sp, #8
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	60b9      	str	r1, [r7, #8]
 80097d6:	607a      	str	r2, [r7, #4]
 80097d8:	807b      	strh	r3, [r7, #2]
	while (*Text)
 80097da:	e016      	b.n	800980a <_Z17ILI9341_Draw_TextPKciittt+0x3e>
	{
		ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	1c5a      	adds	r2, r3, #1
 80097e0:	60fa      	str	r2, [r7, #12]
 80097e2:	7818      	ldrb	r0, [r3, #0]
 80097e4:	887a      	ldrh	r2, [r7, #2]
 80097e6:	8bbb      	ldrh	r3, [r7, #28]
 80097e8:	9301      	str	r3, [sp, #4]
 80097ea:	8b3b      	ldrh	r3, [r7, #24]
 80097ec:	9300      	str	r3, [sp, #0]
 80097ee:	4613      	mov	r3, r2
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	68b9      	ldr	r1, [r7, #8]
 80097f4:	f7ff ff54 	bl	80096a0 <_Z17ILI9341_Draw_Charciittt>
		X += CHAR_WIDTH * Size;
 80097f8:	8b3a      	ldrh	r2, [r7, #24]
 80097fa:	4613      	mov	r3, r2
 80097fc:	005b      	lsls	r3, r3, #1
 80097fe:	4413      	add	r3, r2
 8009800:	005b      	lsls	r3, r3, #1
 8009802:	461a      	mov	r2, r3
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	4413      	add	r3, r2
 8009808:	60bb      	str	r3, [r7, #8]
	while (*Text)
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d1e4      	bne.n	80097dc <_Z17ILI9341_Draw_TextPKciittt+0x10>
	}
}
 8009812:	bf00      	nop
 8009814:	bf00      	nop
 8009816:	3710      	adds	r7, #16
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <_Z16ILI9341_SPI_Initv>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	af00      	add	r7, sp, #0
	SPI1_Init();													//SPI INIT
 8009820:	f003 fc56 	bl	800d0d0 <SPI1_Init>
	MX_GPIO_Init();													//GPIO INIT
 8009824:	f002 ffd2 	bl	800c7cc <MX_GPIO_Init>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8009828:	2200      	movs	r2, #0
 800982a:	2101      	movs	r1, #1
 800982c:	4802      	ldr	r0, [pc, #8]	@ (8009838 <_Z16ILI9341_SPI_Initv+0x1c>)
 800982e:	f004 fe39 	bl	800e4a4 <HAL_GPIO_WritePin>
}
 8009832:	bf00      	nop
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	40020400 	.word	0x40020400

0800983c <_Z16ILI9341_SPI_Sendh>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	4603      	mov	r3, r0
 8009844:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8009846:	1df9      	adds	r1, r7, #7
 8009848:	2301      	movs	r3, #1
 800984a:	2201      	movs	r2, #1
 800984c:	4803      	ldr	r0, [pc, #12]	@ (800985c <_Z16ILI9341_SPI_Sendh+0x20>)
 800984e:	f006 fb60 	bl	800ff12 <HAL_SPI_Transmit>
}
 8009852:	bf00      	nop
 8009854:	3708      	adds	r7, #8
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	20000568 	.word	0x20000568

08009860 <_Z21ILI9341_Write_Commandh>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	4603      	mov	r3, r0
 8009868:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800986a:	2200      	movs	r2, #0
 800986c:	2101      	movs	r1, #1
 800986e:	480a      	ldr	r0, [pc, #40]	@ (8009898 <_Z21ILI9341_Write_Commandh+0x38>)
 8009870:	f004 fe18 	bl	800e4a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8009874:	2200      	movs	r2, #0
 8009876:	2102      	movs	r1, #2
 8009878:	4807      	ldr	r0, [pc, #28]	@ (8009898 <_Z21ILI9341_Write_Commandh+0x38>)
 800987a:	f004 fe13 	bl	800e4a4 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Command);
 800987e:	79fb      	ldrb	r3, [r7, #7]
 8009880:	4618      	mov	r0, r3
 8009882:	f7ff ffdb 	bl	800983c <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8009886:	2201      	movs	r2, #1
 8009888:	2101      	movs	r1, #1
 800988a:	4803      	ldr	r0, [pc, #12]	@ (8009898 <_Z21ILI9341_Write_Commandh+0x38>)
 800988c:	f004 fe0a 	bl	800e4a4 <HAL_GPIO_WritePin>
}
 8009890:	bf00      	nop
 8009892:	3708      	adds	r7, #8
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}
 8009898:	40020400 	.word	0x40020400

0800989c <_Z18ILI9341_Write_Datah>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b082      	sub	sp, #8
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	4603      	mov	r3, r0
 80098a4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80098a6:	2201      	movs	r2, #1
 80098a8:	2102      	movs	r1, #2
 80098aa:	480a      	ldr	r0, [pc, #40]	@ (80098d4 <_Z18ILI9341_Write_Datah+0x38>)
 80098ac:	f004 fdfa 	bl	800e4a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80098b0:	2200      	movs	r2, #0
 80098b2:	2101      	movs	r1, #1
 80098b4:	4807      	ldr	r0, [pc, #28]	@ (80098d4 <_Z18ILI9341_Write_Datah+0x38>)
 80098b6:	f004 fdf5 	bl	800e4a4 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Data);
 80098ba:	79fb      	ldrb	r3, [r7, #7]
 80098bc:	4618      	mov	r0, r3
 80098be:	f7ff ffbd 	bl	800983c <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80098c2:	2201      	movs	r2, #1
 80098c4:	2101      	movs	r1, #1
 80098c6:	4803      	ldr	r0, [pc, #12]	@ (80098d4 <_Z18ILI9341_Write_Datah+0x38>)
 80098c8:	f004 fdec 	bl	800e4a4 <HAL_GPIO_WritePin>
}
 80098cc:	bf00      	nop
 80098ce:	3708      	adds	r7, #8
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}
 80098d4:	40020400 	.word	0x40020400

080098d8 <_Z19ILI9341_Set_Addresstttt>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80098d8:	b590      	push	{r4, r7, lr}
 80098da:	b083      	sub	sp, #12
 80098dc:	af00      	add	r7, sp, #0
 80098de:	4604      	mov	r4, r0
 80098e0:	4608      	mov	r0, r1
 80098e2:	4611      	mov	r1, r2
 80098e4:	461a      	mov	r2, r3
 80098e6:	4623      	mov	r3, r4
 80098e8:	80fb      	strh	r3, [r7, #6]
 80098ea:	4603      	mov	r3, r0
 80098ec:	80bb      	strh	r3, [r7, #4]
 80098ee:	460b      	mov	r3, r1
 80098f0:	807b      	strh	r3, [r7, #2]
 80098f2:	4613      	mov	r3, r2
 80098f4:	803b      	strh	r3, [r7, #0]
	ILI9341_Write_Command(0x2A);
 80098f6:	202a      	movs	r0, #42	@ 0x2a
 80098f8:	f7ff ffb2 	bl	8009860 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(X1 >> 8);
 80098fc:	88fb      	ldrh	r3, [r7, #6]
 80098fe:	0a1b      	lsrs	r3, r3, #8
 8009900:	b29b      	uxth	r3, r3
 8009902:	b2db      	uxtb	r3, r3
 8009904:	4618      	mov	r0, r3
 8009906:	f7ff ffc9 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(X1);
 800990a:	88fb      	ldrh	r3, [r7, #6]
 800990c:	b2db      	uxtb	r3, r3
 800990e:	4618      	mov	r0, r3
 8009910:	f7ff ffc4 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(X2 >> 8);
 8009914:	887b      	ldrh	r3, [r7, #2]
 8009916:	0a1b      	lsrs	r3, r3, #8
 8009918:	b29b      	uxth	r3, r3
 800991a:	b2db      	uxtb	r3, r3
 800991c:	4618      	mov	r0, r3
 800991e:	f7ff ffbd 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(X2);
 8009922:	887b      	ldrh	r3, [r7, #2]
 8009924:	b2db      	uxtb	r3, r3
 8009926:	4618      	mov	r0, r3
 8009928:	f7ff ffb8 	bl	800989c <_Z18ILI9341_Write_Datah>

	ILI9341_Write_Command(0x2B);
 800992c:	202b      	movs	r0, #43	@ 0x2b
 800992e:	f7ff ff97 	bl	8009860 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(Y1 >> 8);
 8009932:	88bb      	ldrh	r3, [r7, #4]
 8009934:	0a1b      	lsrs	r3, r3, #8
 8009936:	b29b      	uxth	r3, r3
 8009938:	b2db      	uxtb	r3, r3
 800993a:	4618      	mov	r0, r3
 800993c:	f7ff ffae 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(Y1);
 8009940:	88bb      	ldrh	r3, [r7, #4]
 8009942:	b2db      	uxtb	r3, r3
 8009944:	4618      	mov	r0, r3
 8009946:	f7ff ffa9 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(Y2 >> 8);
 800994a:	883b      	ldrh	r3, [r7, #0]
 800994c:	0a1b      	lsrs	r3, r3, #8
 800994e:	b29b      	uxth	r3, r3
 8009950:	b2db      	uxtb	r3, r3
 8009952:	4618      	mov	r0, r3
 8009954:	f7ff ffa2 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(Y2);
 8009958:	883b      	ldrh	r3, [r7, #0]
 800995a:	b2db      	uxtb	r3, r3
 800995c:	4618      	mov	r0, r3
 800995e:	f7ff ff9d 	bl	800989c <_Z18ILI9341_Write_Datah>

	ILI9341_Write_Command(0x2C);
 8009962:	202c      	movs	r0, #44	@ 0x2c
 8009964:	f7ff ff7c 	bl	8009860 <_Z21ILI9341_Write_Commandh>
}
 8009968:	bf00      	nop
 800996a:	370c      	adds	r7, #12
 800996c:	46bd      	mov	sp, r7
 800996e:	bd90      	pop	{r4, r7, pc}

08009970 <_Z13ILI9341_Resetv>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8009974:	2201      	movs	r2, #1
 8009976:	2120      	movs	r1, #32
 8009978:	480a      	ldr	r0, [pc, #40]	@ (80099a4 <_Z13ILI9341_Resetv+0x34>)
 800997a:	f004 fd93 	bl	800e4a4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800997e:	20c8      	movs	r0, #200	@ 0xc8
 8009980:	f003 ff8a 	bl	800d898 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8009984:	2200      	movs	r2, #0
 8009986:	2101      	movs	r1, #1
 8009988:	4806      	ldr	r0, [pc, #24]	@ (80099a4 <_Z13ILI9341_Resetv+0x34>)
 800998a:	f004 fd8b 	bl	800e4a4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800998e:	20c8      	movs	r0, #200	@ 0xc8
 8009990:	f003 ff82 	bl	800d898 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8009994:	2201      	movs	r2, #1
 8009996:	2120      	movs	r1, #32
 8009998:	4802      	ldr	r0, [pc, #8]	@ (80099a4 <_Z13ILI9341_Resetv+0x34>)
 800999a:	f004 fd83 	bl	800e4a4 <HAL_GPIO_WritePin>
}
 800999e:	bf00      	nop
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	bf00      	nop
 80099a4:	40020400 	.word	0x40020400

080099a8 <_Z20ILI9341_Set_Rotationh>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	4603      	mov	r3, r0
 80099b0:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = Rotation;
 80099b2:	79fb      	ldrb	r3, [r7, #7]
 80099b4:	73fb      	strb	r3, [r7, #15]

	ILI9341_Write_Command(0x36);
 80099b6:	2036      	movs	r0, #54	@ 0x36
 80099b8:	f7ff ff52 	bl	8009860 <_Z21ILI9341_Write_Commandh>
	HAL_Delay(1);
 80099bc:	2001      	movs	r0, #1
 80099be:	f003 ff6b 	bl	800d898 <HAL_Delay>

	switch (screen_rotation)
 80099c2:	7bfb      	ldrb	r3, [r7, #15]
 80099c4:	2b03      	cmp	r3, #3
 80099c6:	d837      	bhi.n	8009a38 <_Z20ILI9341_Set_Rotationh+0x90>
 80099c8:	a201      	add	r2, pc, #4	@ (adr r2, 80099d0 <_Z20ILI9341_Set_Rotationh+0x28>)
 80099ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ce:	bf00      	nop
 80099d0:	080099e1 	.word	0x080099e1
 80099d4:	080099f7 	.word	0x080099f7
 80099d8:	08009a0d 	.word	0x08009a0d
 80099dc:	08009a23 	.word	0x08009a23
	{
	case SCREEN_VERTICAL_1:
		ILI9341_Write_Data(0x40 | 0x08);
 80099e0:	2048      	movs	r0, #72	@ 0x48
 80099e2:	f7ff ff5b 	bl	800989c <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 240;
 80099e6:	4b17      	ldr	r3, [pc, #92]	@ (8009a44 <_Z20ILI9341_Set_Rotationh+0x9c>)
 80099e8:	22f0      	movs	r2, #240	@ 0xf0
 80099ea:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80099ec:	4b16      	ldr	r3, [pc, #88]	@ (8009a48 <_Z20ILI9341_Set_Rotationh+0xa0>)
 80099ee:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80099f2:	801a      	strh	r2, [r3, #0]
		break;
 80099f4:	e021      	b.n	8009a3a <_Z20ILI9341_Set_Rotationh+0x92>
	case SCREEN_HORIZONTAL_1:
		ILI9341_Write_Data(0x20 | 0x08);
 80099f6:	2028      	movs	r0, #40	@ 0x28
 80099f8:	f7ff ff50 	bl	800989c <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 320;
 80099fc:	4b11      	ldr	r3, [pc, #68]	@ (8009a44 <_Z20ILI9341_Set_Rotationh+0x9c>)
 80099fe:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8009a02:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8009a04:	4b10      	ldr	r3, [pc, #64]	@ (8009a48 <_Z20ILI9341_Set_Rotationh+0xa0>)
 8009a06:	22f0      	movs	r2, #240	@ 0xf0
 8009a08:	801a      	strh	r2, [r3, #0]
		break;
 8009a0a:	e016      	b.n	8009a3a <_Z20ILI9341_Set_Rotationh+0x92>
	case SCREEN_VERTICAL_2:
		ILI9341_Write_Data(0x80 | 0x08);
 8009a0c:	2088      	movs	r0, #136	@ 0x88
 8009a0e:	f7ff ff45 	bl	800989c <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 240;
 8009a12:	4b0c      	ldr	r3, [pc, #48]	@ (8009a44 <_Z20ILI9341_Set_Rotationh+0x9c>)
 8009a14:	22f0      	movs	r2, #240	@ 0xf0
 8009a16:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8009a18:	4b0b      	ldr	r3, [pc, #44]	@ (8009a48 <_Z20ILI9341_Set_Rotationh+0xa0>)
 8009a1a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8009a1e:	801a      	strh	r2, [r3, #0]
		break;
 8009a20:	e00b      	b.n	8009a3a <_Z20ILI9341_Set_Rotationh+0x92>
	case SCREEN_HORIZONTAL_2:
		ILI9341_Write_Data(0x40 | 0x80 | 0x20 | 0x08);
 8009a22:	20e8      	movs	r0, #232	@ 0xe8
 8009a24:	f7ff ff3a 	bl	800989c <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 320;
 8009a28:	4b06      	ldr	r3, [pc, #24]	@ (8009a44 <_Z20ILI9341_Set_Rotationh+0x9c>)
 8009a2a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8009a2e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8009a30:	4b05      	ldr	r3, [pc, #20]	@ (8009a48 <_Z20ILI9341_Set_Rotationh+0xa0>)
 8009a32:	22f0      	movs	r2, #240	@ 0xf0
 8009a34:	801a      	strh	r2, [r3, #0]
		break;
 8009a36:	e000      	b.n	8009a3a <_Z20ILI9341_Set_Rotationh+0x92>
	default:
		//EXIT IF SCREEN ROTATION NOT VALID!
		break;
 8009a38:	bf00      	nop
	}
}
 8009a3a:	bf00      	nop
 8009a3c:	3710      	adds	r7, #16
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	20000002 	.word	0x20000002
 8009a48:	20000000 	.word	0x20000000

08009a4c <_Z14ILI9341_Enablev>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8009a50:	2201      	movs	r2, #1
 8009a52:	2120      	movs	r1, #32
 8009a54:	4802      	ldr	r0, [pc, #8]	@ (8009a60 <_Z14ILI9341_Enablev+0x14>)
 8009a56:	f004 fd25 	bl	800e4a4 <HAL_GPIO_WritePin>
}
 8009a5a:	bf00      	nop
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	40020400 	.word	0x40020400

08009a64 <_Z12ILI9341_Initv>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	af00      	add	r7, sp, #0

	ILI9341_Enable();
 8009a68:	f7ff fff0 	bl	8009a4c <_Z14ILI9341_Enablev>
	ILI9341_SPI_Init();
 8009a6c:	f7ff fed6 	bl	800981c <_Z16ILI9341_SPI_Initv>
	ILI9341_Reset();
 8009a70:	f7ff ff7e 	bl	8009970 <_Z13ILI9341_Resetv>

//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 8009a74:	2001      	movs	r0, #1
 8009a76:	f7ff fef3 	bl	8009860 <_Z21ILI9341_Write_Commandh>
	HAL_Delay(1000);
 8009a7a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009a7e:	f003 ff0b 	bl	800d898 <HAL_Delay>

//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 8009a82:	20cb      	movs	r0, #203	@ 0xcb
 8009a84:	f7ff feec 	bl	8009860 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x39);
 8009a88:	2039      	movs	r0, #57	@ 0x39
 8009a8a:	f7ff ff07 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x2C);
 8009a8e:	202c      	movs	r0, #44	@ 0x2c
 8009a90:	f7ff ff04 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 8009a94:	2000      	movs	r0, #0
 8009a96:	f7ff ff01 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x34);
 8009a9a:	2034      	movs	r0, #52	@ 0x34
 8009a9c:	f7ff fefe 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x02);
 8009aa0:	2002      	movs	r0, #2
 8009aa2:	f7ff fefb 	bl	800989c <_Z18ILI9341_Write_Datah>

//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 8009aa6:	20cf      	movs	r0, #207	@ 0xcf
 8009aa8:	f7ff feda 	bl	8009860 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8009aac:	2000      	movs	r0, #0
 8009aae:	f7ff fef5 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0xC1);
 8009ab2:	20c1      	movs	r0, #193	@ 0xc1
 8009ab4:	f7ff fef2 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x30);
 8009ab8:	2030      	movs	r0, #48	@ 0x30
 8009aba:	f7ff feef 	bl	800989c <_Z18ILI9341_Write_Datah>

//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 8009abe:	20e8      	movs	r0, #232	@ 0xe8
 8009ac0:	f7ff fece 	bl	8009860 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x85);
 8009ac4:	2085      	movs	r0, #133	@ 0x85
 8009ac6:	f7ff fee9 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 8009aca:	2000      	movs	r0, #0
 8009acc:	f7ff fee6 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x78);
 8009ad0:	2078      	movs	r0, #120	@ 0x78
 8009ad2:	f7ff fee3 	bl	800989c <_Z18ILI9341_Write_Datah>

//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 8009ad6:	20ea      	movs	r0, #234	@ 0xea
 8009ad8:	f7ff fec2 	bl	8009860 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8009adc:	2000      	movs	r0, #0
 8009ade:	f7ff fedd 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 8009ae2:	2000      	movs	r0, #0
 8009ae4:	f7ff feda 	bl	800989c <_Z18ILI9341_Write_Datah>

//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 8009ae8:	20ed      	movs	r0, #237	@ 0xed
 8009aea:	f7ff feb9 	bl	8009860 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x64);
 8009aee:	2064      	movs	r0, #100	@ 0x64
 8009af0:	f7ff fed4 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x03);
 8009af4:	2003      	movs	r0, #3
 8009af6:	f7ff fed1 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x12);
 8009afa:	2012      	movs	r0, #18
 8009afc:	f7ff fece 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x81);
 8009b00:	2081      	movs	r0, #129	@ 0x81
 8009b02:	f7ff fecb 	bl	800989c <_Z18ILI9341_Write_Datah>

//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 8009b06:	20f7      	movs	r0, #247	@ 0xf7
 8009b08:	f7ff feaa 	bl	8009860 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x20);
 8009b0c:	2020      	movs	r0, #32
 8009b0e:	f7ff fec5 	bl	800989c <_Z18ILI9341_Write_Datah>

//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 8009b12:	20c0      	movs	r0, #192	@ 0xc0
 8009b14:	f7ff fea4 	bl	8009860 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x23);
 8009b18:	2023      	movs	r0, #35	@ 0x23
 8009b1a:	f7ff febf 	bl	800989c <_Z18ILI9341_Write_Datah>

//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 8009b1e:	20c1      	movs	r0, #193	@ 0xc1
 8009b20:	f7ff fe9e 	bl	8009860 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x10);
 8009b24:	2010      	movs	r0, #16
 8009b26:	f7ff feb9 	bl	800989c <_Z18ILI9341_Write_Datah>

//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 8009b2a:	20c5      	movs	r0, #197	@ 0xc5
 8009b2c:	f7ff fe98 	bl	8009860 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x3E);
 8009b30:	203e      	movs	r0, #62	@ 0x3e
 8009b32:	f7ff feb3 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x28);
 8009b36:	2028      	movs	r0, #40	@ 0x28
 8009b38:	f7ff feb0 	bl	800989c <_Z18ILI9341_Write_Datah>

//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 8009b3c:	20c7      	movs	r0, #199	@ 0xc7
 8009b3e:	f7ff fe8f 	bl	8009860 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x86);
 8009b42:	2086      	movs	r0, #134	@ 0x86
 8009b44:	f7ff feaa 	bl	800989c <_Z18ILI9341_Write_Datah>

//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 8009b48:	2036      	movs	r0, #54	@ 0x36
 8009b4a:	f7ff fe89 	bl	8009860 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x48);
 8009b4e:	2048      	movs	r0, #72	@ 0x48
 8009b50:	f7ff fea4 	bl	800989c <_Z18ILI9341_Write_Datah>

//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 8009b54:	203a      	movs	r0, #58	@ 0x3a
 8009b56:	f7ff fe83 	bl	8009860 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x55);
 8009b5a:	2055      	movs	r0, #85	@ 0x55
 8009b5c:	f7ff fe9e 	bl	800989c <_Z18ILI9341_Write_Datah>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 8009b60:	20b1      	movs	r0, #177	@ 0xb1
 8009b62:	f7ff fe7d 	bl	8009860 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8009b66:	2000      	movs	r0, #0
 8009b68:	f7ff fe98 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x18);
 8009b6c:	2018      	movs	r0, #24
 8009b6e:	f7ff fe95 	bl	800989c <_Z18ILI9341_Write_Datah>

//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 8009b72:	20b6      	movs	r0, #182	@ 0xb6
 8009b74:	f7ff fe74 	bl	8009860 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x08);
 8009b78:	2008      	movs	r0, #8
 8009b7a:	f7ff fe8f 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x82);
 8009b7e:	2082      	movs	r0, #130	@ 0x82
 8009b80:	f7ff fe8c 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x27);
 8009b84:	2027      	movs	r0, #39	@ 0x27
 8009b86:	f7ff fe89 	bl	800989c <_Z18ILI9341_Write_Datah>

//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 8009b8a:	20f2      	movs	r0, #242	@ 0xf2
 8009b8c:	f7ff fe68 	bl	8009860 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8009b90:	2000      	movs	r0, #0
 8009b92:	f7ff fe83 	bl	800989c <_Z18ILI9341_Write_Datah>

//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 8009b96:	2026      	movs	r0, #38	@ 0x26
 8009b98:	f7ff fe62 	bl	8009860 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x01);
 8009b9c:	2001      	movs	r0, #1
 8009b9e:	f7ff fe7d 	bl	800989c <_Z18ILI9341_Write_Datah>

//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 8009ba2:	20e0      	movs	r0, #224	@ 0xe0
 8009ba4:	f7ff fe5c 	bl	8009860 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x0F);
 8009ba8:	200f      	movs	r0, #15
 8009baa:	f7ff fe77 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x31);
 8009bae:	2031      	movs	r0, #49	@ 0x31
 8009bb0:	f7ff fe74 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x2B);
 8009bb4:	202b      	movs	r0, #43	@ 0x2b
 8009bb6:	f7ff fe71 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0C);
 8009bba:	200c      	movs	r0, #12
 8009bbc:	f7ff fe6e 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0E);
 8009bc0:	200e      	movs	r0, #14
 8009bc2:	f7ff fe6b 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x08);
 8009bc6:	2008      	movs	r0, #8
 8009bc8:	f7ff fe68 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x4E);
 8009bcc:	204e      	movs	r0, #78	@ 0x4e
 8009bce:	f7ff fe65 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0xF1);
 8009bd2:	20f1      	movs	r0, #241	@ 0xf1
 8009bd4:	f7ff fe62 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x37);
 8009bd8:	2037      	movs	r0, #55	@ 0x37
 8009bda:	f7ff fe5f 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x07);
 8009bde:	2007      	movs	r0, #7
 8009be0:	f7ff fe5c 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x10);
 8009be4:	2010      	movs	r0, #16
 8009be6:	f7ff fe59 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x03);
 8009bea:	2003      	movs	r0, #3
 8009bec:	f7ff fe56 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0E);
 8009bf0:	200e      	movs	r0, #14
 8009bf2:	f7ff fe53 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x09);
 8009bf6:	2009      	movs	r0, #9
 8009bf8:	f7ff fe50 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 8009bfc:	2000      	movs	r0, #0
 8009bfe:	f7ff fe4d 	bl	800989c <_Z18ILI9341_Write_Datah>

//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 8009c02:	20e1      	movs	r0, #225	@ 0xe1
 8009c04:	f7ff fe2c 	bl	8009860 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8009c08:	2000      	movs	r0, #0
 8009c0a:	f7ff fe47 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0E);
 8009c0e:	200e      	movs	r0, #14
 8009c10:	f7ff fe44 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x14);
 8009c14:	2014      	movs	r0, #20
 8009c16:	f7ff fe41 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x03);
 8009c1a:	2003      	movs	r0, #3
 8009c1c:	f7ff fe3e 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x11);
 8009c20:	2011      	movs	r0, #17
 8009c22:	f7ff fe3b 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x07);
 8009c26:	2007      	movs	r0, #7
 8009c28:	f7ff fe38 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x31);
 8009c2c:	2031      	movs	r0, #49	@ 0x31
 8009c2e:	f7ff fe35 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0xC1);
 8009c32:	20c1      	movs	r0, #193	@ 0xc1
 8009c34:	f7ff fe32 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x48);
 8009c38:	2048      	movs	r0, #72	@ 0x48
 8009c3a:	f7ff fe2f 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x08);
 8009c3e:	2008      	movs	r0, #8
 8009c40:	f7ff fe2c 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0F);
 8009c44:	200f      	movs	r0, #15
 8009c46:	f7ff fe29 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0C);
 8009c4a:	200c      	movs	r0, #12
 8009c4c:	f7ff fe26 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x31);
 8009c50:	2031      	movs	r0, #49	@ 0x31
 8009c52:	f7ff fe23 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x36);
 8009c56:	2036      	movs	r0, #54	@ 0x36
 8009c58:	f7ff fe20 	bl	800989c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0F);
 8009c5c:	200f      	movs	r0, #15
 8009c5e:	f7ff fe1d 	bl	800989c <_Z18ILI9341_Write_Datah>

//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 8009c62:	2011      	movs	r0, #17
 8009c64:	f7ff fdfc 	bl	8009860 <_Z21ILI9341_Write_Commandh>
	HAL_Delay(120);
 8009c68:	2078      	movs	r0, #120	@ 0x78
 8009c6a:	f003 fe15 	bl	800d898 <HAL_Delay>

//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 8009c6e:	2029      	movs	r0, #41	@ 0x29
 8009c70:	f7ff fdf6 	bl	8009860 <_Z21ILI9341_Write_Commandh>

//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8009c74:	2000      	movs	r0, #0
 8009c76:	f7ff fe97 	bl	80099a8 <_Z20ILI9341_Set_Rotationh>
}
 8009c7a:	bf00      	nop
 8009c7c:	bd80      	pop	{r7, pc}
	...

08009c80 <_Z25ILI9341_Draw_Colour_Bursttm>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8009c80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c84:	b08d      	sub	sp, #52	@ 0x34
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	4603      	mov	r3, r0
 8009c8a:	6039      	str	r1, [r7, #0]
 8009c8c:	80fb      	strh	r3, [r7, #6]
//REMAINDER!
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
			Remainder_from_block, 10);

	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
}
 8009c8e:	466b      	mov	r3, sp
 8009c90:	461e      	mov	r6, r3
	uint32_t Buffer_Size = 0;
 8009c92:	2300      	movs	r3, #0
 8009c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if ((Size * 2) < BURST_MAX_SIZE)
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	005b      	lsls	r3, r3, #1
 8009c9a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8009c9e:	d202      	bcs.n	8009ca6 <_Z25ILI9341_Draw_Colour_Bursttm+0x26>
		Buffer_Size = Size;
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009ca4:	e002      	b.n	8009cac <_Z25ILI9341_Draw_Colour_Bursttm+0x2c>
		Buffer_Size = BURST_MAX_SIZE;
 8009ca6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8009caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8009cac:	2201      	movs	r2, #1
 8009cae:	2102      	movs	r1, #2
 8009cb0:	483e      	ldr	r0, [pc, #248]	@ (8009dac <_Z25ILI9341_Draw_Colour_Bursttm+0x12c>)
 8009cb2:	f004 fbf7 	bl	800e4a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	2101      	movs	r1, #1
 8009cba:	483c      	ldr	r0, [pc, #240]	@ (8009dac <_Z25ILI9341_Draw_Colour_Bursttm+0x12c>)
 8009cbc:	f004 fbf2 	bl	800e4a4 <HAL_GPIO_WritePin>
	unsigned char chifted = Colour >> 8;
 8009cc0:	88fb      	ldrh	r3, [r7, #6]
 8009cc2:	0a1b      	lsrs	r3, r3, #8
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	unsigned char burst_buffer[Buffer_Size];
 8009cca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ccc:	460b      	mov	r3, r1
 8009cce:	3b01      	subs	r3, #1
 8009cd0:	61fb      	str	r3, [r7, #28]
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	4688      	mov	r8, r1
 8009cd6:	4699      	mov	r9, r3
 8009cd8:	f04f 0200 	mov.w	r2, #0
 8009cdc:	f04f 0300 	mov.w	r3, #0
 8009ce0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009ce4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009ce8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009cec:	2300      	movs	r3, #0
 8009cee:	460c      	mov	r4, r1
 8009cf0:	461d      	mov	r5, r3
 8009cf2:	f04f 0200 	mov.w	r2, #0
 8009cf6:	f04f 0300 	mov.w	r3, #0
 8009cfa:	00eb      	lsls	r3, r5, #3
 8009cfc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009d00:	00e2      	lsls	r2, r4, #3
 8009d02:	1dcb      	adds	r3, r1, #7
 8009d04:	08db      	lsrs	r3, r3, #3
 8009d06:	00db      	lsls	r3, r3, #3
 8009d08:	ebad 0d03 	sub.w	sp, sp, r3
 8009d0c:	466b      	mov	r3, sp
 8009d0e:	3300      	adds	r3, #0
 8009d10:	61bb      	str	r3, [r7, #24]
	for (uint32_t j = 0; j < Buffer_Size; j += 2)
 8009d12:	2300      	movs	r3, #0
 8009d14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009d16:	e00e      	b.n	8009d36 <_Z25ILI9341_Draw_Colour_Bursttm+0xb6>
		burst_buffer[j] = chifted;
 8009d18:	69ba      	ldr	r2, [r7, #24]
 8009d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d1c:	4413      	add	r3, r2
 8009d1e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8009d22:	701a      	strb	r2, [r3, #0]
		burst_buffer[j + 1] = Colour;
 8009d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d26:	3301      	adds	r3, #1
 8009d28:	88fa      	ldrh	r2, [r7, #6]
 8009d2a:	b2d1      	uxtb	r1, r2
 8009d2c:	69ba      	ldr	r2, [r7, #24]
 8009d2e:	54d1      	strb	r1, [r2, r3]
	for (uint32_t j = 0; j < Buffer_Size; j += 2)
 8009d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d32:	3302      	adds	r3, #2
 8009d34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009d36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d3ec      	bcc.n	8009d18 <_Z25ILI9341_Draw_Colour_Bursttm+0x98>
	uint32_t Sending_Size = Size * 2;
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	005b      	lsls	r3, r3, #1
 8009d42:	617b      	str	r3, [r7, #20]
	uint32_t Sending_in_Block = Sending_Size / Buffer_Size;
 8009d44:	697a      	ldr	r2, [r7, #20]
 8009d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d4c:	613b      	str	r3, [r7, #16]
	uint32_t Remainder_from_block = Sending_Size % Buffer_Size;
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d52:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d58:	fb01 f202 	mul.w	r2, r1, r2
 8009d5c:	1a9b      	subs	r3, r3, r2
 8009d5e:	60fb      	str	r3, [r7, #12]
	if (Sending_in_Block != 0)
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d010      	beq.n	8009d88 <_Z25ILI9341_Draw_Colour_Bursttm+0x108>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 8009d66:	2300      	movs	r3, #0
 8009d68:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d6a:	e009      	b.n	8009d80 <_Z25ILI9341_Draw_Colour_Bursttm+0x100>
			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
 8009d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d6e:	b29a      	uxth	r2, r3
 8009d70:	230a      	movs	r3, #10
 8009d72:	69b9      	ldr	r1, [r7, #24]
 8009d74:	480e      	ldr	r0, [pc, #56]	@ (8009db0 <_Z25ILI9341_Draw_Colour_Bursttm+0x130>)
 8009d76:	f006 f8cc 	bl	800ff12 <HAL_SPI_Transmit>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 8009d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d3f1      	bcc.n	8009d6c <_Z25ILI9341_Draw_Colour_Bursttm+0xec>
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	b29a      	uxth	r2, r3
 8009d8c:	230a      	movs	r3, #10
 8009d8e:	69b9      	ldr	r1, [r7, #24]
 8009d90:	4807      	ldr	r0, [pc, #28]	@ (8009db0 <_Z25ILI9341_Draw_Colour_Bursttm+0x130>)
 8009d92:	f006 f8be 	bl	800ff12 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8009d96:	2201      	movs	r2, #1
 8009d98:	2101      	movs	r1, #1
 8009d9a:	4804      	ldr	r0, [pc, #16]	@ (8009dac <_Z25ILI9341_Draw_Colour_Bursttm+0x12c>)
 8009d9c:	f004 fb82 	bl	800e4a4 <HAL_GPIO_WritePin>
 8009da0:	46b5      	mov	sp, r6
}
 8009da2:	bf00      	nop
 8009da4:	3734      	adds	r7, #52	@ 0x34
 8009da6:	46bd      	mov	sp, r7
 8009da8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009dac:	40020400 	.word	0x40020400
 8009db0:	20000568 	.word	0x20000568

08009db4 <_Z19ILI9341_Fill_Screent>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	4603      	mov	r3, r0
 8009dbc:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8009dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8009df8 <_Z19ILI9341_Fill_Screent+0x44>)
 8009dc0:	881b      	ldrh	r3, [r3, #0]
 8009dc2:	b29a      	uxth	r2, r3
 8009dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8009dfc <_Z19ILI9341_Fill_Screent+0x48>)
 8009dc6:	881b      	ldrh	r3, [r3, #0]
 8009dc8:	b29b      	uxth	r3, r3
 8009dca:	2100      	movs	r1, #0
 8009dcc:	2000      	movs	r0, #0
 8009dce:	f7ff fd83 	bl	80098d8 <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH * LCD_HEIGHT);
 8009dd2:	4b09      	ldr	r3, [pc, #36]	@ (8009df8 <_Z19ILI9341_Fill_Screent+0x44>)
 8009dd4:	881b      	ldrh	r3, [r3, #0]
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	461a      	mov	r2, r3
 8009dda:	4b08      	ldr	r3, [pc, #32]	@ (8009dfc <_Z19ILI9341_Fill_Screent+0x48>)
 8009ddc:	881b      	ldrh	r3, [r3, #0]
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	fb02 f303 	mul.w	r3, r2, r3
 8009de4:	461a      	mov	r2, r3
 8009de6:	88fb      	ldrh	r3, [r7, #6]
 8009de8:	4611      	mov	r1, r2
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7ff ff48 	bl	8009c80 <_Z25ILI9341_Draw_Colour_Bursttm>
}
 8009df0:	bf00      	nop
 8009df2:	3708      	adds	r7, #8
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	20000002 	.word	0x20000002
 8009dfc:	20000000 	.word	0x20000000

08009e00 <_Z18ILI9341_Draw_Pixelttt>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X, uint16_t Y, uint16_t Colour)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b086      	sub	sp, #24
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	4603      	mov	r3, r0
 8009e08:	80fb      	strh	r3, [r7, #6]
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	80bb      	strh	r3, [r7, #4]
 8009e0e:	4613      	mov	r3, r2
 8009e10:	807b      	strh	r3, [r7, #2]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 8009e12:	4b5d      	ldr	r3, [pc, #372]	@ (8009f88 <_Z18ILI9341_Draw_Pixelttt+0x188>)
 8009e14:	881b      	ldrh	r3, [r3, #0]
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	88fa      	ldrh	r2, [r7, #6]
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d205      	bcs.n	8009e2a <_Z18ILI9341_Draw_Pixelttt+0x2a>
 8009e1e:	4b5b      	ldr	r3, [pc, #364]	@ (8009f8c <_Z18ILI9341_Draw_Pixelttt+0x18c>)
 8009e20:	881b      	ldrh	r3, [r3, #0]
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	88ba      	ldrh	r2, [r7, #4]
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d301      	bcc.n	8009e2e <_Z18ILI9341_Draw_Pixelttt+0x2e>
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	e000      	b.n	8009e30 <_Z18ILI9341_Draw_Pixelttt+0x30>
 8009e2e:	2300      	movs	r3, #0
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	f040 80a5 	bne.w	8009f80 <_Z18ILI9341_Draw_Pixelttt+0x180>
		return;	//OUT OF BOUNDS!

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8009e36:	2200      	movs	r2, #0
 8009e38:	2102      	movs	r1, #2
 8009e3a:	4855      	ldr	r0, [pc, #340]	@ (8009f90 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009e3c:	f004 fb32 	bl	800e4a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8009e40:	2200      	movs	r2, #0
 8009e42:	2101      	movs	r1, #1
 8009e44:	4852      	ldr	r0, [pc, #328]	@ (8009f90 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009e46:	f004 fb2d 	bl	800e4a4 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2A);
 8009e4a:	202a      	movs	r0, #42	@ 0x2a
 8009e4c:	f7ff fcf6 	bl	800983c <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8009e50:	2201      	movs	r2, #1
 8009e52:	2102      	movs	r1, #2
 8009e54:	484e      	ldr	r0, [pc, #312]	@ (8009f90 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009e56:	f004 fb25 	bl	800e4a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	2101      	movs	r1, #1
 8009e5e:	484c      	ldr	r0, [pc, #304]	@ (8009f90 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009e60:	f004 fb20 	bl	800e4a4 <HAL_GPIO_WritePin>

//XDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8009e64:	2200      	movs	r2, #0
 8009e66:	2101      	movs	r1, #1
 8009e68:	4849      	ldr	r0, [pc, #292]	@ (8009f90 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009e6a:	f004 fb1b 	bl	800e4a4 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer[4] =	{(unsigned char) (X >> 8),(unsigned char) X, (unsigned char)((X + 1) >> 8),(unsigned char) (X + 1) };
 8009e6e:	88fb      	ldrh	r3, [r7, #6]
 8009e70:	0a1b      	lsrs	r3, r3, #8
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	753b      	strb	r3, [r7, #20]
 8009e78:	88fb      	ldrh	r3, [r7, #6]
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	757b      	strb	r3, [r7, #21]
 8009e7e:	88fb      	ldrh	r3, [r7, #6]
 8009e80:	3301      	adds	r3, #1
 8009e82:	121b      	asrs	r3, r3, #8
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	75bb      	strb	r3, [r7, #22]
 8009e88:	88fb      	ldrh	r3, [r7, #6]
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8009e92:	f107 0114 	add.w	r1, r7, #20
 8009e96:	2301      	movs	r3, #1
 8009e98:	2204      	movs	r2, #4
 8009e9a:	483e      	ldr	r0, [pc, #248]	@ (8009f94 <_Z18ILI9341_Draw_Pixelttt+0x194>)
 8009e9c:	f006 f839 	bl	800ff12 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	2101      	movs	r1, #1
 8009ea4:	483a      	ldr	r0, [pc, #232]	@ (8009f90 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009ea6:	f004 fafd 	bl	800e4a4 <HAL_GPIO_WritePin>

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8009eaa:	2200      	movs	r2, #0
 8009eac:	2102      	movs	r1, #2
 8009eae:	4838      	ldr	r0, [pc, #224]	@ (8009f90 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009eb0:	f004 faf8 	bl	800e4a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	2101      	movs	r1, #1
 8009eb8:	4835      	ldr	r0, [pc, #212]	@ (8009f90 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009eba:	f004 faf3 	bl	800e4a4 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2B);
 8009ebe:	202b      	movs	r0, #43	@ 0x2b
 8009ec0:	f7ff fcbc 	bl	800983c <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	2102      	movs	r1, #2
 8009ec8:	4831      	ldr	r0, [pc, #196]	@ (8009f90 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009eca:	f004 faeb 	bl	800e4a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8009ece:	2201      	movs	r2, #1
 8009ed0:	2101      	movs	r1, #1
 8009ed2:	482f      	ldr	r0, [pc, #188]	@ (8009f90 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009ed4:	f004 fae6 	bl	800e4a4 <HAL_GPIO_WritePin>

//YDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8009ed8:	2200      	movs	r2, #0
 8009eda:	2101      	movs	r1, #1
 8009edc:	482c      	ldr	r0, [pc, #176]	@ (8009f90 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009ede:	f004 fae1 	bl	800e4a4 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer1[4] =	{(unsigned char)( Y >> 8),(unsigned char) Y,(unsigned char)( (Y + 1) >> 8),(unsigned char) (Y + 1) };
 8009ee2:	88bb      	ldrh	r3, [r7, #4]
 8009ee4:	0a1b      	lsrs	r3, r3, #8
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	743b      	strb	r3, [r7, #16]
 8009eec:	88bb      	ldrh	r3, [r7, #4]
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	747b      	strb	r3, [r7, #17]
 8009ef2:	88bb      	ldrh	r3, [r7, #4]
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	121b      	asrs	r3, r3, #8
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	74bb      	strb	r3, [r7, #18]
 8009efc:	88bb      	ldrh	r3, [r7, #4]
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	3301      	adds	r3, #1
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8009f06:	f107 0110 	add.w	r1, r7, #16
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	2204      	movs	r2, #4
 8009f0e:	4821      	ldr	r0, [pc, #132]	@ (8009f94 <_Z18ILI9341_Draw_Pixelttt+0x194>)
 8009f10:	f005 ffff 	bl	800ff12 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8009f14:	2201      	movs	r2, #1
 8009f16:	2101      	movs	r1, #1
 8009f18:	481d      	ldr	r0, [pc, #116]	@ (8009f90 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009f1a:	f004 fac3 	bl	800e4a4 <HAL_GPIO_WritePin>

//ADDRESS	
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8009f1e:	2200      	movs	r2, #0
 8009f20:	2102      	movs	r1, #2
 8009f22:	481b      	ldr	r0, [pc, #108]	@ (8009f90 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009f24:	f004 fabe 	bl	800e4a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8009f28:	2200      	movs	r2, #0
 8009f2a:	2101      	movs	r1, #1
 8009f2c:	4818      	ldr	r0, [pc, #96]	@ (8009f90 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009f2e:	f004 fab9 	bl	800e4a4 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8009f32:	202c      	movs	r0, #44	@ 0x2c
 8009f34:	f7ff fc82 	bl	800983c <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8009f38:	2201      	movs	r2, #1
 8009f3a:	2102      	movs	r1, #2
 8009f3c:	4814      	ldr	r0, [pc, #80]	@ (8009f90 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009f3e:	f004 fab1 	bl	800e4a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8009f42:	2201      	movs	r2, #1
 8009f44:	2101      	movs	r1, #1
 8009f46:	4812      	ldr	r0, [pc, #72]	@ (8009f90 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009f48:	f004 faac 	bl	800e4a4 <HAL_GPIO_WritePin>

//COLOUR	
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	2101      	movs	r1, #1
 8009f50:	480f      	ldr	r0, [pc, #60]	@ (8009f90 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009f52:	f004 faa7 	bl	800e4a4 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer2[2] =	{(unsigned char)( Colour >> 8),(unsigned char) Colour };
 8009f56:	887b      	ldrh	r3, [r7, #2]
 8009f58:	0a1b      	lsrs	r3, r3, #8
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	733b      	strb	r3, [r7, #12]
 8009f60:	887b      	ldrh	r3, [r7, #2]
 8009f62:	b2db      	uxtb	r3, r3
 8009f64:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8009f66:	f107 010c 	add.w	r1, r7, #12
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	2202      	movs	r2, #2
 8009f6e:	4809      	ldr	r0, [pc, #36]	@ (8009f94 <_Z18ILI9341_Draw_Pixelttt+0x194>)
 8009f70:	f005 ffcf 	bl	800ff12 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8009f74:	2201      	movs	r2, #1
 8009f76:	2101      	movs	r1, #1
 8009f78:	4805      	ldr	r0, [pc, #20]	@ (8009f90 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009f7a:	f004 fa93 	bl	800e4a4 <HAL_GPIO_WritePin>
 8009f7e:	e000      	b.n	8009f82 <_Z18ILI9341_Draw_Pixelttt+0x182>
		return;	//OUT OF BOUNDS!
 8009f80:	bf00      	nop

}
 8009f82:	3718      	adds	r7, #24
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	20000002 	.word	0x20000002
 8009f8c:	20000000 	.word	0x20000000
 8009f90:	40020400 	.word	0x40020400
 8009f94:	20000568 	.word	0x20000568

08009f98 <_Z22ILI9341_Draw_Rectanglettttt>:
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width,
		uint16_t Height, uint16_t Colour)
{
 8009f98:	b590      	push	{r4, r7, lr}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	4604      	mov	r4, r0
 8009fa0:	4608      	mov	r0, r1
 8009fa2:	4611      	mov	r1, r2
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	4623      	mov	r3, r4
 8009fa8:	80fb      	strh	r3, [r7, #6]
 8009faa:	4603      	mov	r3, r0
 8009fac:	80bb      	strh	r3, [r7, #4]
 8009fae:	460b      	mov	r3, r1
 8009fb0:	807b      	strh	r3, [r7, #2]
 8009fb2:	4613      	mov	r3, r2
 8009fb4:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 8009fb6:	4b2b      	ldr	r3, [pc, #172]	@ (800a064 <_Z22ILI9341_Draw_Rectanglettttt+0xcc>)
 8009fb8:	881b      	ldrh	r3, [r3, #0]
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	88fa      	ldrh	r2, [r7, #6]
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d205      	bcs.n	8009fce <_Z22ILI9341_Draw_Rectanglettttt+0x36>
 8009fc2:	4b29      	ldr	r3, [pc, #164]	@ (800a068 <_Z22ILI9341_Draw_Rectanglettttt+0xd0>)
 8009fc4:	881b      	ldrh	r3, [r3, #0]
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	88ba      	ldrh	r2, [r7, #4]
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d301      	bcc.n	8009fd2 <_Z22ILI9341_Draw_Rectanglettttt+0x3a>
 8009fce:	2301      	movs	r3, #1
 8009fd0:	e000      	b.n	8009fd4 <_Z22ILI9341_Draw_Rectanglettttt+0x3c>
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d141      	bne.n	800a05c <_Z22ILI9341_Draw_Rectanglettttt+0xc4>
		return;
	if ((X + Width - 1) >= LCD_WIDTH)
 8009fd8:	88fa      	ldrh	r2, [r7, #6]
 8009fda:	887b      	ldrh	r3, [r7, #2]
 8009fdc:	4413      	add	r3, r2
 8009fde:	4a21      	ldr	r2, [pc, #132]	@ (800a064 <_Z22ILI9341_Draw_Rectanglettttt+0xcc>)
 8009fe0:	8812      	ldrh	r2, [r2, #0]
 8009fe2:	b292      	uxth	r2, r2
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	bfcc      	ite	gt
 8009fe8:	2301      	movgt	r3, #1
 8009fea:	2300      	movle	r3, #0
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d005      	beq.n	8009ffe <_Z22ILI9341_Draw_Rectanglettttt+0x66>
	{
		Width = LCD_WIDTH - X;
 8009ff2:	4b1c      	ldr	r3, [pc, #112]	@ (800a064 <_Z22ILI9341_Draw_Rectanglettttt+0xcc>)
 8009ff4:	881b      	ldrh	r3, [r3, #0]
 8009ff6:	b29a      	uxth	r2, r3
 8009ff8:	88fb      	ldrh	r3, [r7, #6]
 8009ffa:	1ad3      	subs	r3, r2, r3
 8009ffc:	807b      	strh	r3, [r7, #2]
	}
	if ((Y + Height - 1) >= LCD_HEIGHT)
 8009ffe:	88ba      	ldrh	r2, [r7, #4]
 800a000:	883b      	ldrh	r3, [r7, #0]
 800a002:	4413      	add	r3, r2
 800a004:	4a18      	ldr	r2, [pc, #96]	@ (800a068 <_Z22ILI9341_Draw_Rectanglettttt+0xd0>)
 800a006:	8812      	ldrh	r2, [r2, #0]
 800a008:	b292      	uxth	r2, r2
 800a00a:	4293      	cmp	r3, r2
 800a00c:	bfcc      	ite	gt
 800a00e:	2301      	movgt	r3, #1
 800a010:	2300      	movle	r3, #0
 800a012:	b2db      	uxtb	r3, r3
 800a014:	2b00      	cmp	r3, #0
 800a016:	d005      	beq.n	800a024 <_Z22ILI9341_Draw_Rectanglettttt+0x8c>
	{
		Height = LCD_HEIGHT - Y;
 800a018:	4b13      	ldr	r3, [pc, #76]	@ (800a068 <_Z22ILI9341_Draw_Rectanglettttt+0xd0>)
 800a01a:	881b      	ldrh	r3, [r3, #0]
 800a01c:	b29a      	uxth	r2, r3
 800a01e:	88bb      	ldrh	r3, [r7, #4]
 800a020:	1ad3      	subs	r3, r2, r3
 800a022:	803b      	strh	r3, [r7, #0]
	}
	ILI9341_Set_Address(X, Y, X + Width - 1, Y + Height - 1);
 800a024:	88fa      	ldrh	r2, [r7, #6]
 800a026:	887b      	ldrh	r3, [r7, #2]
 800a028:	4413      	add	r3, r2
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	3b01      	subs	r3, #1
 800a02e:	b29c      	uxth	r4, r3
 800a030:	88ba      	ldrh	r2, [r7, #4]
 800a032:	883b      	ldrh	r3, [r7, #0]
 800a034:	4413      	add	r3, r2
 800a036:	b29b      	uxth	r3, r3
 800a038:	3b01      	subs	r3, #1
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	88b9      	ldrh	r1, [r7, #4]
 800a03e:	88f8      	ldrh	r0, [r7, #6]
 800a040:	4622      	mov	r2, r4
 800a042:	f7ff fc49 	bl	80098d8 <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, Height * Width);
 800a046:	883b      	ldrh	r3, [r7, #0]
 800a048:	887a      	ldrh	r2, [r7, #2]
 800a04a:	fb02 f303 	mul.w	r3, r2, r3
 800a04e:	461a      	mov	r2, r3
 800a050:	8b3b      	ldrh	r3, [r7, #24]
 800a052:	4611      	mov	r1, r2
 800a054:	4618      	mov	r0, r3
 800a056:	f7ff fe13 	bl	8009c80 <_Z25ILI9341_Draw_Colour_Bursttm>
 800a05a:	e000      	b.n	800a05e <_Z22ILI9341_Draw_Rectanglettttt+0xc6>
		return;
 800a05c:	bf00      	nop
}
 800a05e:	370c      	adds	r7, #12
 800a060:	46bd      	mov	sp, r7
 800a062:	bd90      	pop	{r4, r7, pc}
 800a064:	20000002 	.word	0x20000002
 800a068:	20000000 	.word	0x20000000

0800a06c <_Z28ILI9341_Draw_Horizontal_Linetttt>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width,
		uint16_t Colour)
{
 800a06c:	b590      	push	{r4, r7, lr}
 800a06e:	b083      	sub	sp, #12
 800a070:	af00      	add	r7, sp, #0
 800a072:	4604      	mov	r4, r0
 800a074:	4608      	mov	r0, r1
 800a076:	4611      	mov	r1, r2
 800a078:	461a      	mov	r2, r3
 800a07a:	4623      	mov	r3, r4
 800a07c:	80fb      	strh	r3, [r7, #6]
 800a07e:	4603      	mov	r3, r0
 800a080:	80bb      	strh	r3, [r7, #4]
 800a082:	460b      	mov	r3, r1
 800a084:	807b      	strh	r3, [r7, #2]
 800a086:	4613      	mov	r3, r2
 800a088:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 800a08a:	4b1d      	ldr	r3, [pc, #116]	@ (800a100 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x94>)
 800a08c:	881b      	ldrh	r3, [r3, #0]
 800a08e:	b29b      	uxth	r3, r3
 800a090:	88fa      	ldrh	r2, [r7, #6]
 800a092:	429a      	cmp	r2, r3
 800a094:	d205      	bcs.n	800a0a2 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x36>
 800a096:	4b1b      	ldr	r3, [pc, #108]	@ (800a104 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x98>)
 800a098:	881b      	ldrh	r3, [r3, #0]
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	88ba      	ldrh	r2, [r7, #4]
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d301      	bcc.n	800a0a6 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x3a>
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e000      	b.n	800a0a8 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x3c>
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d124      	bne.n	800a0f6 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x8a>
		return;
	if ((X + Width - 1) >= LCD_WIDTH)
 800a0ac:	88fa      	ldrh	r2, [r7, #6]
 800a0ae:	887b      	ldrh	r3, [r7, #2]
 800a0b0:	4413      	add	r3, r2
 800a0b2:	4a13      	ldr	r2, [pc, #76]	@ (800a100 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x94>)
 800a0b4:	8812      	ldrh	r2, [r2, #0]
 800a0b6:	b292      	uxth	r2, r2
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	bfcc      	ite	gt
 800a0bc:	2301      	movgt	r3, #1
 800a0be:	2300      	movle	r3, #0
 800a0c0:	b2db      	uxtb	r3, r3
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d005      	beq.n	800a0d2 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x66>
	{
		Width = LCD_WIDTH - X;
 800a0c6:	4b0e      	ldr	r3, [pc, #56]	@ (800a100 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x94>)
 800a0c8:	881b      	ldrh	r3, [r3, #0]
 800a0ca:	b29a      	uxth	r2, r3
 800a0cc:	88fb      	ldrh	r3, [r7, #6]
 800a0ce:	1ad3      	subs	r3, r2, r3
 800a0d0:	807b      	strh	r3, [r7, #2]
	}
	ILI9341_Set_Address(X, Y, X + Width - 1, Y);
 800a0d2:	88fa      	ldrh	r2, [r7, #6]
 800a0d4:	887b      	ldrh	r3, [r7, #2]
 800a0d6:	4413      	add	r3, r2
 800a0d8:	b29b      	uxth	r3, r3
 800a0da:	3b01      	subs	r3, #1
 800a0dc:	b29a      	uxth	r2, r3
 800a0de:	88bb      	ldrh	r3, [r7, #4]
 800a0e0:	88b9      	ldrh	r1, [r7, #4]
 800a0e2:	88f8      	ldrh	r0, [r7, #6]
 800a0e4:	f7ff fbf8 	bl	80098d8 <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, Width);
 800a0e8:	887a      	ldrh	r2, [r7, #2]
 800a0ea:	883b      	ldrh	r3, [r7, #0]
 800a0ec:	4611      	mov	r1, r2
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f7ff fdc6 	bl	8009c80 <_Z25ILI9341_Draw_Colour_Bursttm>
 800a0f4:	e000      	b.n	800a0f8 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x8c>
		return;
 800a0f6:	bf00      	nop
}
 800a0f8:	370c      	adds	r7, #12
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd90      	pop	{r4, r7, pc}
 800a0fe:	bf00      	nop
 800a100:	20000002 	.word	0x20000002
 800a104:	20000000 	.word	0x20000000

0800a108 <_Z26ILI9341_Draw_Vertical_Linetttt>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height,
		uint16_t Colour)
{
 800a108:	b590      	push	{r4, r7, lr}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	4604      	mov	r4, r0
 800a110:	4608      	mov	r0, r1
 800a112:	4611      	mov	r1, r2
 800a114:	461a      	mov	r2, r3
 800a116:	4623      	mov	r3, r4
 800a118:	80fb      	strh	r3, [r7, #6]
 800a11a:	4603      	mov	r3, r0
 800a11c:	80bb      	strh	r3, [r7, #4]
 800a11e:	460b      	mov	r3, r1
 800a120:	807b      	strh	r3, [r7, #2]
 800a122:	4613      	mov	r3, r2
 800a124:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 800a126:	4b1d      	ldr	r3, [pc, #116]	@ (800a19c <_Z26ILI9341_Draw_Vertical_Linetttt+0x94>)
 800a128:	881b      	ldrh	r3, [r3, #0]
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	88fa      	ldrh	r2, [r7, #6]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d205      	bcs.n	800a13e <_Z26ILI9341_Draw_Vertical_Linetttt+0x36>
 800a132:	4b1b      	ldr	r3, [pc, #108]	@ (800a1a0 <_Z26ILI9341_Draw_Vertical_Linetttt+0x98>)
 800a134:	881b      	ldrh	r3, [r3, #0]
 800a136:	b29b      	uxth	r3, r3
 800a138:	88ba      	ldrh	r2, [r7, #4]
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d301      	bcc.n	800a142 <_Z26ILI9341_Draw_Vertical_Linetttt+0x3a>
 800a13e:	2301      	movs	r3, #1
 800a140:	e000      	b.n	800a144 <_Z26ILI9341_Draw_Vertical_Linetttt+0x3c>
 800a142:	2300      	movs	r3, #0
 800a144:	2b00      	cmp	r3, #0
 800a146:	d124      	bne.n	800a192 <_Z26ILI9341_Draw_Vertical_Linetttt+0x8a>
		return;
	if ((Y + Height - 1) >= LCD_HEIGHT)
 800a148:	88ba      	ldrh	r2, [r7, #4]
 800a14a:	887b      	ldrh	r3, [r7, #2]
 800a14c:	4413      	add	r3, r2
 800a14e:	4a14      	ldr	r2, [pc, #80]	@ (800a1a0 <_Z26ILI9341_Draw_Vertical_Linetttt+0x98>)
 800a150:	8812      	ldrh	r2, [r2, #0]
 800a152:	b292      	uxth	r2, r2
 800a154:	4293      	cmp	r3, r2
 800a156:	bfcc      	ite	gt
 800a158:	2301      	movgt	r3, #1
 800a15a:	2300      	movle	r3, #0
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d005      	beq.n	800a16e <_Z26ILI9341_Draw_Vertical_Linetttt+0x66>
	{
		Height = LCD_HEIGHT - Y;
 800a162:	4b0f      	ldr	r3, [pc, #60]	@ (800a1a0 <_Z26ILI9341_Draw_Vertical_Linetttt+0x98>)
 800a164:	881b      	ldrh	r3, [r3, #0]
 800a166:	b29a      	uxth	r2, r3
 800a168:	88bb      	ldrh	r3, [r7, #4]
 800a16a:	1ad3      	subs	r3, r2, r3
 800a16c:	807b      	strh	r3, [r7, #2]
	}
	ILI9341_Set_Address(X, Y, X, Y + Height - 1);
 800a16e:	88ba      	ldrh	r2, [r7, #4]
 800a170:	887b      	ldrh	r3, [r7, #2]
 800a172:	4413      	add	r3, r2
 800a174:	b29b      	uxth	r3, r3
 800a176:	3b01      	subs	r3, #1
 800a178:	b29b      	uxth	r3, r3
 800a17a:	88fa      	ldrh	r2, [r7, #6]
 800a17c:	88b9      	ldrh	r1, [r7, #4]
 800a17e:	88f8      	ldrh	r0, [r7, #6]
 800a180:	f7ff fbaa 	bl	80098d8 <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, Height);
 800a184:	887a      	ldrh	r2, [r7, #2]
 800a186:	883b      	ldrh	r3, [r7, #0]
 800a188:	4611      	mov	r1, r2
 800a18a:	4618      	mov	r0, r3
 800a18c:	f7ff fd78 	bl	8009c80 <_Z25ILI9341_Draw_Colour_Bursttm>
 800a190:	e000      	b.n	800a194 <_Z26ILI9341_Draw_Vertical_Linetttt+0x8c>
		return;
 800a192:	bf00      	nop
}
 800a194:	370c      	adds	r7, #12
 800a196:	46bd      	mov	sp, r7
 800a198:	bd90      	pop	{r4, r7, pc}
 800a19a:	bf00      	nop
 800a19c:	20000002 	.word	0x20000002
 800a1a0:	20000000 	.word	0x20000000

0800a1a4 <_ZN19CManejadorControlesC1Ev>:

#include <ManejadorControles/CManejadorControles.hpp>
#include "Constantes.hpp"
#include "Uart/Uart.hpp"

CManejadorControles::CManejadorControles()
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b086      	sub	sp, #24
 800a1a8:	af04      	add	r7, sp, #16
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7f6 ffa2 	bl	80010f8 <_ZN22CManejadorEventosBotonC1Ev>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	3304      	adds	r3, #4
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f7f7 fe97 	bl	8001eec <_ZN24CManejadorEventosEncoderC1Ev>
 800a1be:	4a52      	ldr	r2, [pc, #328]	@ (800a308 <_ZN19CManejadorControlesC1Ev+0x164>)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	601a      	str	r2, [r3, #0]
 800a1c4:	4a51      	ldr	r2, [pc, #324]	@ (800a30c <_ZN19CManejadorControlesC1Ev+0x168>)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	605a      	str	r2, [r3, #4]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	609a      	str	r2, [r3, #8]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	330c      	adds	r3, #12
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f7f6 feb7 	bl	8000f48 <_ZN15CManejadorBotonC1Ev>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	332c      	adds	r3, #44	@ 0x2c
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f7f6 feb2 	bl	8000f48 <_ZN15CManejadorBotonC1Ev>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	334c      	adds	r3, #76	@ 0x4c
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f7f6 fead 	bl	8000f48 <_ZN15CManejadorBotonC1Ev>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	336c      	adds	r3, #108	@ 0x6c
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7f6 fea8 	bl	8000f48 <_ZN15CManejadorBotonC1Ev>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	338c      	adds	r3, #140	@ 0x8c
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f7f7 fce9 	bl	8001bd4 <_ZN8CEncoderC1Ev>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	33e0      	adds	r3, #224	@ 0xe0
 800a206:	4618      	mov	r0, r3
 800a208:	f7f7 f844 	bl	8001294 <_ZN20ControlVelocidadAireC1Ev>
{
	// TODO Auto-generated constructor stub
	//configuracion de los botones
	BotonMemoria1.Configurar(GPIOC, GPIO_PIN_13, 1);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f103 000c 	add.w	r0, r3, #12
 800a212:	2301      	movs	r3, #1
 800a214:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800a218:	493d      	ldr	r1, [pc, #244]	@ (800a310 <_ZN19CManejadorControlesC1Ev+0x16c>)
 800a21a:	f7f6 fed5 	bl	8000fc8 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonMemoria1.AsignaManejadorEventos(this);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	330c      	adds	r3, #12
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	4611      	mov	r1, r2
 800a226:	4618      	mov	r0, r3
 800a228:	f7f6 ff18 	bl	800105c <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonMemoria1.Init();
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	330c      	adds	r3, #12
 800a230:	4618      	mov	r0, r3
 800a232:	f7f6 fee3 	bl	8000ffc <_ZN15CManejadorBoton4InitEv>

	BotonMemoria2.Configurar(GPIOA, GPIO_PIN_6, 2);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f103 002c 	add.w	r0, r3, #44	@ 0x2c
 800a23c:	2302      	movs	r3, #2
 800a23e:	2240      	movs	r2, #64	@ 0x40
 800a240:	4934      	ldr	r1, [pc, #208]	@ (800a314 <_ZN19CManejadorControlesC1Ev+0x170>)
 800a242:	f7f6 fec1 	bl	8000fc8 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonMemoria2.AsignaManejadorEventos(this);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	332c      	adds	r3, #44	@ 0x2c
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	4611      	mov	r1, r2
 800a24e:	4618      	mov	r0, r3
 800a250:	f7f6 ff04 	bl	800105c <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonMemoria2.Init();
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	332c      	adds	r3, #44	@ 0x2c
 800a258:	4618      	mov	r0, r3
 800a25a:	f7f6 fecf 	bl	8000ffc <_ZN15CManejadorBoton4InitEv>

	BotonMemoria3.Configurar(GPIOB, GPIO_PIN_10, 3);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 800a264:	2303      	movs	r3, #3
 800a266:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a26a:	492b      	ldr	r1, [pc, #172]	@ (800a318 <_ZN19CManejadorControlesC1Ev+0x174>)
 800a26c:	f7f6 feac 	bl	8000fc8 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonMemoria3.AsignaManejadorEventos(this);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	334c      	adds	r3, #76	@ 0x4c
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	4611      	mov	r1, r2
 800a278:	4618      	mov	r0, r3
 800a27a:	f7f6 feef 	bl	800105c <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonMemoria3.Init();
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	334c      	adds	r3, #76	@ 0x4c
 800a282:	4618      	mov	r0, r3
 800a284:	f7f6 feba 	bl	8000ffc <_ZN15CManejadorBoton4InitEv>

	BotonManual.Configurar(GPIOB, GPIO_PIN_15, 4);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 800a28e:	2304      	movs	r3, #4
 800a290:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800a294:	4920      	ldr	r1, [pc, #128]	@ (800a318 <_ZN19CManejadorControlesC1Ev+0x174>)
 800a296:	f7f6 fe97 	bl	8000fc8 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonManual.AsignaManejadorEventos(this);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	336c      	adds	r3, #108	@ 0x6c
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	4611      	mov	r1, r2
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7f6 feda 	bl	800105c <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonManual.Init();
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	336c      	adds	r3, #108	@ 0x6c
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f7f6 fea5 	bl	8000ffc <_ZN15CManejadorBoton4InitEv>

	Encoder.Configurar(GPIOB, GPIO_PIN_2, GPIOB, GPIO_PIN_12, GPIOB,
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f103 008c 	add.w	r0, r3, #140	@ 0x8c
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	9303      	str	r3, [sp, #12]
 800a2bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a2c0:	9302      	str	r3, [sp, #8]
 800a2c2:	4b15      	ldr	r3, [pc, #84]	@ (800a318 <_ZN19CManejadorControlesC1Ev+0x174>)
 800a2c4:	9301      	str	r3, [sp, #4]
 800a2c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a2ca:	9300      	str	r3, [sp, #0]
 800a2cc:	4b12      	ldr	r3, [pc, #72]	@ (800a318 <_ZN19CManejadorControlesC1Ev+0x174>)
 800a2ce:	2204      	movs	r2, #4
 800a2d0:	4911      	ldr	r1, [pc, #68]	@ (800a318 <_ZN19CManejadorControlesC1Ev+0x174>)
 800a2d2:	f7f7 fcc9 	bl	8001c68 <_ZN8CEncoder10ConfigurarEP12GPIO_TypeDeftS1_tS1_ti>
			GPIO_PIN_8, 1);
	Encoder.AsignaManejadorEventos(this);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f103 028c 	add.w	r2, r3, #140	@ 0x8c
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	3304      	adds	r3, #4
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	4610      	mov	r0, r2
 800a2e4:	f7f7 fd61 	bl	8001daa <_ZN8CEncoder22AsignaManejadorEventosEP24CManejadorEventosEncoder>
	Encoder.Init();
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	338c      	adds	r3, #140	@ 0x8c
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7f7 fd1e 	bl	8001d2e <_ZN8CEncoder4InitEv>

	controlVelocidadAire.Inicializa();
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	33e0      	adds	r3, #224	@ 0xe0
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f7f6 fffc 	bl	80012f4 <_ZN20ControlVelocidadAire10InicializaEv>

}
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	4618      	mov	r0, r3
 800a300:	3708      	adds	r7, #8
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}
 800a306:	bf00      	nop
 800a308:	080160f8 	.word	0x080160f8
 800a30c:	08016140 	.word	0x08016140
 800a310:	40020800 	.word	0x40020800
 800a314:	40020000 	.word	0x40020000
 800a318:	40020400 	.word	0x40020400

0800a31c <_ZN19CManejadorControlesD1Ev>:

CManejadorControles::~CManejadorControles()
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	4a18      	ldr	r2, [pc, #96]	@ (800a388 <_ZN19CManejadorControlesD1Ev+0x6c>)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	601a      	str	r2, [r3, #0]
 800a32a:	4a18      	ldr	r2, [pc, #96]	@ (800a38c <_ZN19CManejadorControlesD1Ev+0x70>)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	605a      	str	r2, [r3, #4]
{
	// TODO Auto-generated destructor stub
}
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	33e0      	adds	r3, #224	@ 0xe0
 800a334:	4618      	mov	r0, r3
 800a336:	f7f6 ffbd 	bl	80012b4 <_ZN20ControlVelocidadAireD1Ev>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	338c      	adds	r3, #140	@ 0x8c
 800a33e:	4618      	mov	r0, r3
 800a340:	f7f7 fc70 	bl	8001c24 <_ZN8CEncoderD1Ev>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	336c      	adds	r3, #108	@ 0x6c
 800a348:	4618      	mov	r0, r3
 800a34a:	f7f6 fe1d 	bl	8000f88 <_ZN15CManejadorBotonD1Ev>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	334c      	adds	r3, #76	@ 0x4c
 800a352:	4618      	mov	r0, r3
 800a354:	f7f6 fe18 	bl	8000f88 <_ZN15CManejadorBotonD1Ev>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	332c      	adds	r3, #44	@ 0x2c
 800a35c:	4618      	mov	r0, r3
 800a35e:	f7f6 fe13 	bl	8000f88 <_ZN15CManejadorBotonD1Ev>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	330c      	adds	r3, #12
 800a366:	4618      	mov	r0, r3
 800a368:	f7f6 fe0e 	bl	8000f88 <_ZN15CManejadorBotonD1Ev>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	3304      	adds	r3, #4
 800a370:	4618      	mov	r0, r3
 800a372:	f7f7 fdcb 	bl	8001f0c <_ZN24CManejadorEventosEncoderD1Ev>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	4618      	mov	r0, r3
 800a37a:	f7f6 fecd 	bl	8001118 <_ZN22CManejadorEventosBotonD1Ev>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	4618      	mov	r0, r3
 800a382:	3708      	adds	r7, #8
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}
 800a388:	080160f8 	.word	0x080160f8
 800a38c:	08016140 	.word	0x08016140

0800a390 <_ZThn4_N19CManejadorControlesD1Ev>:
	virtual void EncoderDecremento();


public:
	CManejadorControles();
	virtual ~CManejadorControles();
 800a390:	f1a0 0004 	sub.w	r0, r0, #4
 800a394:	f7ff bfc2 	b.w	800a31c <_ZN19CManejadorControlesD1Ev>

0800a398 <_ZN19CManejadorControlesD0Ev>:
CManejadorControles::~CManejadorControles()
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
}
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f7ff ffbb 	bl	800a31c <_ZN19CManejadorControlesD1Ev>
 800a3a6:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f007 fb96 	bl	8011adc <_ZdlPvj>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3708      	adds	r7, #8
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <_ZThn4_N19CManejadorControlesD0Ev>:
 800a3ba:	f1a0 0004 	sub.w	r0, r0, #4
 800a3be:	f7ff bfeb 	b.w	800a398 <_ZN19CManejadorControlesD0Ev>

0800a3c2 <_ZN19CManejadorControles17GPIO_INTERRUPCIONEi>:

void CManejadorControles::GPIO_INTERRUPCION(int GPIO_Pin)
{
 800a3c2:	b580      	push	{r7, lr}
 800a3c4:	b082      	sub	sp, #8
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	6078      	str	r0, [r7, #4]
 800a3ca:	6039      	str	r1, [r7, #0]
	ProcesaBotones(GPIO_Pin);
 800a3cc:	6839      	ldr	r1, [r7, #0]
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 f80b 	bl	800a3ea <_ZN19CManejadorControles14ProcesaBotonesEi>
	InterrupcionEncoder(GPIO_Pin);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	3338      	adds	r3, #56	@ 0x38
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	6839      	ldr	r1, [r7, #0]
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	4798      	blx	r3
}
 800a3e2:	bf00      	nop
 800a3e4:	3708      	adds	r7, #8
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}

0800a3ea <_ZN19CManejadorControles14ProcesaBotonesEi>:

void CManejadorControles::ProcesaBotones(int gpio_pin)
{
 800a3ea:	b580      	push	{r7, lr}
 800a3ec:	b082      	sub	sp, #8
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
 800a3f2:	6039      	str	r1, [r7, #0]
	BotonMemoria1.Procesa(gpio_pin);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	330c      	adds	r3, #12
 800a3f8:	6839      	ldr	r1, [r7, #0]
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7f6 fe3c 	bl	8001078 <_ZN15CManejadorBoton7ProcesaEi>
	BotonMemoria2.Procesa(gpio_pin);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	332c      	adds	r3, #44	@ 0x2c
 800a404:	6839      	ldr	r1, [r7, #0]
 800a406:	4618      	mov	r0, r3
 800a408:	f7f6 fe36 	bl	8001078 <_ZN15CManejadorBoton7ProcesaEi>
	BotonMemoria3.Procesa(gpio_pin);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	334c      	adds	r3, #76	@ 0x4c
 800a410:	6839      	ldr	r1, [r7, #0]
 800a412:	4618      	mov	r0, r3
 800a414:	f7f6 fe30 	bl	8001078 <_ZN15CManejadorBoton7ProcesaEi>
///	SerialPrintf("\r\n ProcesaBotones");

	BotonManual.Procesa(gpio_pin);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	336c      	adds	r3, #108	@ 0x6c
 800a41c:	6839      	ldr	r1, [r7, #0]
 800a41e:	4618      	mov	r0, r3
 800a420:	f7f6 fe2a 	bl	8001078 <_ZN15CManejadorBoton7ProcesaEi>
}
 800a424:	bf00      	nop
 800a426:	3708      	adds	r7, #8
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}

0800a42c <_ZN19CManejadorControles19InterrupcionEncoderEi>:
void CManejadorControles::InterrupcionEncoder(int GPIO_Pin)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	6039      	str	r1, [r7, #0]
	Encoder.Procesa(GPIO_Pin);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	338c      	adds	r3, #140	@ 0x8c
 800a43a:	6839      	ldr	r1, [r7, #0]
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7f7 fcda 	bl	8001df6 <_ZN8CEncoder7ProcesaEi>
}
 800a442:	bf00      	nop
 800a444:	3708      	adds	r7, #8
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <_ZN19CManejadorControles12GetNivelAireEv>:

//regresa el nivel de aire setado
int CManejadorControles::GetNivelAire()
{
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b082      	sub	sp, #8
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
	return controlVelocidadAire.LeeVelocidad();
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	33e0      	adds	r3, #224	@ 0xe0
 800a456:	4618      	mov	r0, r3
 800a458:	f7f6 ffc6 	bl	80013e8 <_ZN20ControlVelocidadAire12LeeVelocidadEv>
 800a45c:	4603      	mov	r3, r0
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3708      	adds	r7, #8
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}

0800a466 <_ZN19CManejadorControles18BotonUnoClickEventEv>:

//eventros del boton uno
void CManejadorControles::BotonUnoClickEvent()
{
 800a466:	b580      	push	{r7, lr}
 800a468:	b082      	sub	sp, #8
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	689b      	ldr	r3, [r3, #8]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d009      	beq.n	800a48a <_ZN19CManejadorControles18BotonUnoClickEventEv+0x24>
		return;
	ManejadorControles->OnBotonUnoClickEvent();
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	689a      	ldr	r2, [r3, #8]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	3310      	adds	r3, #16
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4610      	mov	r0, r2
 800a486:	4798      	blx	r3
 800a488:	e000      	b.n	800a48c <_ZN19CManejadorControles18BotonUnoClickEventEv+0x26>
		return;
 800a48a:	bf00      	nop

}
 800a48c:	3708      	adds	r7, #8
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}

0800a492 <_ZN19CManejadorControles18BotonDosClickEventEv>:
//eventros del boton dos
void CManejadorControles::BotonDosClickEvent()
{
 800a492:	b580      	push	{r7, lr}
 800a494:	b082      	sub	sp, #8
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d009      	beq.n	800a4b6 <_ZN19CManejadorControles18BotonDosClickEventEv+0x24>
		return;
	ManejadorControles->OnBotonDosClickEvent();
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	689a      	ldr	r2, [r3, #8]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	3314      	adds	r3, #20
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4610      	mov	r0, r2
 800a4b2:	4798      	blx	r3
 800a4b4:	e000      	b.n	800a4b8 <_ZN19CManejadorControles18BotonDosClickEventEv+0x26>
		return;
 800a4b6:	bf00      	nop

}
 800a4b8:	3708      	adds	r7, #8
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}

0800a4be <_ZN19CManejadorControles19BotonTresClickEventEv>:
//eventros del boton tres
void CManejadorControles::BotonTresClickEvent()
{
 800a4be:	b580      	push	{r7, lr}
 800a4c0:	b082      	sub	sp, #8
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	689b      	ldr	r3, [r3, #8]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d009      	beq.n	800a4e2 <_ZN19CManejadorControles19BotonTresClickEventEv+0x24>
		return;
	ManejadorControles->OnBotonTresClickEvent();
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	689a      	ldr	r2, [r3, #8]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	3318      	adds	r3, #24
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4610      	mov	r0, r2
 800a4de:	4798      	blx	r3
 800a4e0:	e000      	b.n	800a4e4 <_ZN19CManejadorControles19BotonTresClickEventEv+0x26>
		return;
 800a4e2:	bf00      	nop

}
 800a4e4:	3708      	adds	r7, #8
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}

0800a4ea <_ZN19CManejadorControles21BotonCuatroClickEventEv>:
//eventros del boton Cuatro
void CManejadorControles::BotonCuatroClickEvent()
{
 800a4ea:	b580      	push	{r7, lr}
 800a4ec:	b082      	sub	sp, #8
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	689b      	ldr	r3, [r3, #8]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d009      	beq.n	800a50e <_ZN19CManejadorControles21BotonCuatroClickEventEv+0x24>
		return;
	ManejadorControles->OnBotonCuatroClickEvent();
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	689a      	ldr	r2, [r3, #8]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	689b      	ldr	r3, [r3, #8]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	331c      	adds	r3, #28
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4610      	mov	r0, r2
 800a50a:	4798      	blx	r3
 800a50c:	e000      	b.n	800a510 <_ZN19CManejadorControles21BotonCuatroClickEventEv+0x26>
		return;
 800a50e:	bf00      	nop

}
 800a510:	3708      	adds	r7, #8
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}

0800a516 <_ZN19CManejadorControles22BotonPerillaClickEventEv>:
//eventros del boton Perilla
void CManejadorControles::BotonPerillaClickEvent()
{
 800a516:	b580      	push	{r7, lr}
 800a518:	b082      	sub	sp, #8
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	689b      	ldr	r3, [r3, #8]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d009      	beq.n	800a53a <_ZN19CManejadorControles22BotonPerillaClickEventEv+0x24>
		return;
	ManejadorControles->OnBotonPerillaClickEvent();
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	689a      	ldr	r2, [r3, #8]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	689b      	ldr	r3, [r3, #8]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	3320      	adds	r3, #32
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4610      	mov	r0, r2
 800a536:	4798      	blx	r3
 800a538:	e000      	b.n	800a53c <_ZN19CManejadorControles22BotonPerillaClickEventEv+0x26>
		return;
 800a53a:	bf00      	nop

}
 800a53c:	3708      	adds	r7, #8
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}

0800a542 <_ZN19CManejadorControles17EncoderIncrementoEv>:
//eventos del encoder
void CManejadorControles::EncoderIncremento()
{
 800a542:	b580      	push	{r7, lr}
 800a544:	b082      	sub	sp, #8
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d009      	beq.n	800a566 <_ZN19CManejadorControles17EncoderIncrementoEv+0x24>
		return;
	ManejadorControles->OnPerillaIncremento();
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	689a      	ldr	r2, [r3, #8]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	689b      	ldr	r3, [r3, #8]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	3324      	adds	r3, #36	@ 0x24
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4610      	mov	r0, r2
 800a562:	4798      	blx	r3
 800a564:	e000      	b.n	800a568 <_ZN19CManejadorControles17EncoderIncrementoEv+0x26>
		return;
 800a566:	bf00      	nop

}
 800a568:	3708      	adds	r7, #8
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}

0800a56e <_ZN19CManejadorControles17EncoderDecrementoEv>:
void CManejadorControles::EncoderDecremento()
{
 800a56e:	b580      	push	{r7, lr}
 800a570:	b082      	sub	sp, #8
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	689b      	ldr	r3, [r3, #8]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d009      	beq.n	800a592 <_ZN19CManejadorControles17EncoderDecrementoEv+0x24>
		return;
	ManejadorControles->OnPerillaDecremento();
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	689a      	ldr	r2, [r3, #8]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	689b      	ldr	r3, [r3, #8]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	3328      	adds	r3, #40	@ 0x28
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4610      	mov	r0, r2
 800a58e:	4798      	blx	r3
 800a590:	e000      	b.n	800a594 <_ZN19CManejadorControles17EncoderDecrementoEv+0x26>
		return;
 800a592:	bf00      	nop

}
 800a594:	3708      	adds	r7, #8
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
	...

0800a59c <_ZN19CManejadorControles17OnBotonClickEventEi>:

void CManejadorControles::OnBotonClickEvent(int idBoton)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	6039      	str	r1, [r7, #0]
	switch (idBoton)
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	3b01      	subs	r3, #1
 800a5aa:	2b03      	cmp	r3, #3
 800a5ac:	d826      	bhi.n	800a5fc <_ZN19CManejadorControles17OnBotonClickEventEi+0x60>
 800a5ae:	a201      	add	r2, pc, #4	@ (adr r2, 800a5b4 <_ZN19CManejadorControles17OnBotonClickEventEi+0x18>)
 800a5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b4:	0800a5c5 	.word	0x0800a5c5
 800a5b8:	0800a5d3 	.word	0x0800a5d3
 800a5bc:	0800a5e1 	.word	0x0800a5e1
 800a5c0:	0800a5ef 	.word	0x0800a5ef
	{
	case BOTON_MEMORIA1:
		BotonUnoClickEvent();
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	3318      	adds	r3, #24
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	4798      	blx	r3
		break;
 800a5d0:	e014      	b.n	800a5fc <_ZN19CManejadorControles17OnBotonClickEventEi+0x60>
	case BOTON_MEMORIA2:
		BotonDosClickEvent();
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	331c      	adds	r3, #28
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	4798      	blx	r3
		break;
 800a5de:	e00d      	b.n	800a5fc <_ZN19CManejadorControles17OnBotonClickEventEi+0x60>
	case BOTON_MEMORIA3:
		BotonTresClickEvent();
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	3320      	adds	r3, #32
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	4798      	blx	r3
		break;
 800a5ec:	e006      	b.n	800a5fc <_ZN19CManejadorControles17OnBotonClickEventEi+0x60>
	case BOTON_MANUAL:
		BotonCuatroClickEvent();
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	3324      	adds	r3, #36	@ 0x24
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	4798      	blx	r3
		break;
 800a5fa:	bf00      	nop
	}
}
 800a5fc:	bf00      	nop
 800a5fe:	3708      	adds	r7, #8
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <_ZN19CManejadorControles19OnIncrementoEncoderEi>:


//eventros del encoder
void CManejadorControles::OnIncrementoEncoder(int id_Encoder)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	6039      	str	r1, [r7, #0]
	EncoderIncremento();
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	332c      	adds	r3, #44	@ 0x2c
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	4798      	blx	r3
}
 800a61a:	bf00      	nop
 800a61c:	3708      	adds	r7, #8
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}

0800a622 <_ZThn4_N19CManejadorControles19OnIncrementoEncoderEi>:
	virtual void OnIncrementoEncoder(int id_Encoder);
 800a622:	f1a0 0004 	sub.w	r0, r0, #4
 800a626:	f7ff bfed 	b.w	800a604 <_ZN19CManejadorControles19OnIncrementoEncoderEi>

0800a62a <_ZN19CManejadorControles19OnDecrementoEncoderEi>:

void CManejadorControles::OnDecrementoEncoder(int id_Encoder)
{
 800a62a:	b580      	push	{r7, lr}
 800a62c:	b082      	sub	sp, #8
 800a62e:	af00      	add	r7, sp, #0
 800a630:	6078      	str	r0, [r7, #4]
 800a632:	6039      	str	r1, [r7, #0]
	EncoderDecremento();
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	3330      	adds	r3, #48	@ 0x30
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	4798      	blx	r3
}
 800a640:	bf00      	nop
 800a642:	3708      	adds	r7, #8
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <_ZThn4_N19CManejadorControles19OnDecrementoEncoderEi>:
	virtual void OnDecrementoEncoder(int id_Encoder);
 800a648:	f1a0 0004 	sub.w	r0, r0, #4
 800a64c:	f7ff bfed 	b.w	800a62a <_ZN19CManejadorControles19OnDecrementoEncoderEi>

0800a650 <_ZN19CManejadorControles24OnBotonEncoderClickEventEi>:

void CManejadorControles::OnBotonEncoderClickEvent(int id_Encoder )
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
	BotonPerillaClickEvent();
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	3328      	adds	r3, #40	@ 0x28
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	4798      	blx	r3
}
 800a666:	bf00      	nop
 800a668:	3708      	adds	r7, #8
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <_ZThn4_N19CManejadorControles24OnBotonEncoderClickEventEi>:
	virtual void OnBotonEncoderClickEvent(int id_Encoder);
 800a66e:	f1a0 0004 	sub.w	r0, r0, #4
 800a672:	f7ff bfed 	b.w	800a650 <_ZN19CManejadorControles24OnBotonEncoderClickEventEi>

0800a676 <_ZN19CManejadorControles21SetManejadorControlesEP26CManejadorEventosControles>:




void CManejadorControles::SetManejadorControles(CManejadorEventosControles *obj)
{
 800a676:	b480      	push	{r7}
 800a678:	b083      	sub	sp, #12
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
 800a67e:	6039      	str	r1, [r7, #0]
	ManejadorControles = obj;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	683a      	ldr	r2, [r7, #0]
 800a684:	609a      	str	r2, [r3, #8]
}
 800a686:	bf00      	nop
 800a688:	370c      	adds	r7, #12
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr
	...

0800a694 <_ZN26CManejadorEventosControlesC1Ev>:
 *      Author: W10
 */

#include <ManejadorControles/CManejadorEventosControles.hpp>

CManejadorEventosControles::CManejadorEventosControles()
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	4a04      	ldr	r2, [pc, #16]	@ (800a6b0 <_ZN26CManejadorEventosControlesC1Ev+0x1c>)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	370c      	adds	r7, #12
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr
 800a6b0:	0801615c 	.word	0x0801615c

0800a6b4 <_ZN26CManejadorEventosControlesD1Ev>:

CManejadorEventosControles::~CManejadorEventosControles()
 800a6b4:	b480      	push	{r7}
 800a6b6:	b083      	sub	sp, #12
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	4a04      	ldr	r2, [pc, #16]	@ (800a6d0 <_ZN26CManejadorEventosControlesD1Ev+0x1c>)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	370c      	adds	r7, #12
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr
 800a6d0:	0801615c 	.word	0x0801615c

0800a6d4 <_ZN26CManejadorEventosControlesD0Ev>:
CManejadorEventosControles::~CManejadorEventosControles()
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
}
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f7ff ffe9 	bl	800a6b4 <_ZN26CManejadorEventosControlesD1Ev>
 800a6e2:	2104      	movs	r1, #4
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f007 f9f9 	bl	8011adc <_ZdlPvj>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3708      	adds	r7, #8
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <_ZN26CManejadorEventosControles22OnTemperaturaRealEventEi>:

void CManejadorEventosControles::OnTemperaturaRealEvent(int temperatura)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b083      	sub	sp, #12
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	6039      	str	r1, [r7, #0]

}
 800a6fe:	bf00      	nop
 800a700:	370c      	adds	r7, #12
 800a702:	46bd      	mov	sp, r7
 800a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a708:	4770      	bx	lr

0800a70a <_ZN26CManejadorEventosControles16OnNivelAireEventEi>:
void CManejadorEventosControles::OnNivelAireEvent(int aire)
{
 800a70a:	b480      	push	{r7}
 800a70c:	b083      	sub	sp, #12
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
 800a712:	6039      	str	r1, [r7, #0]

}
 800a714:	bf00      	nop
 800a716:	370c      	adds	r7, #12
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr

0800a720 <_ZN26CManejadorEventosControles20OnBotonUnoClickEventEv>:
//eventros del boton uno
void CManejadorEventosControles::OnBotonUnoClickEvent()
{
 800a720:	b480      	push	{r7}
 800a722:	b083      	sub	sp, #12
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]

}
 800a728:	bf00      	nop
 800a72a:	370c      	adds	r7, #12
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <_ZN26CManejadorEventosControles20OnBotonDosClickEventEv>:
//eventros del boton dos
void CManejadorEventosControles::OnBotonDosClickEvent()
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]

}
 800a73c:	bf00      	nop
 800a73e:	370c      	adds	r7, #12
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <_ZN26CManejadorEventosControles21OnBotonTresClickEventEv>:
//eventros del boton tres
void CManejadorEventosControles::OnBotonTresClickEvent()
{
 800a748:	b480      	push	{r7}
 800a74a:	b083      	sub	sp, #12
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]

}
 800a750:	bf00      	nop
 800a752:	370c      	adds	r7, #12
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr

0800a75c <_ZN26CManejadorEventosControles23OnBotonCuatroClickEventEv>:
//eventros del boton Cuatro
void CManejadorEventosControles::OnBotonCuatroClickEvent()
{
 800a75c:	b480      	push	{r7}
 800a75e:	b083      	sub	sp, #12
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]

}
 800a764:	bf00      	nop
 800a766:	370c      	adds	r7, #12
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr

0800a770 <_ZN26CManejadorEventosControles24OnBotonPerillaClickEventEv>:
//eventros del boton Perilla
void CManejadorEventosControles::OnBotonPerillaClickEvent()
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]

}
 800a778:	bf00      	nop
 800a77a:	370c      	adds	r7, #12
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr

0800a784 <_ZN26CManejadorEventosControles19OnPerillaIncrementoEv>:
//eventos del Encoder
void CManejadorEventosControles::OnPerillaIncremento()
{
 800a784:	b480      	push	{r7}
 800a786:	b083      	sub	sp, #12
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]

}
 800a78c:	bf00      	nop
 800a78e:	370c      	adds	r7, #12
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <_ZN26CManejadorEventosControles19OnPerillaDecrementoEv>:
void CManejadorEventosControles::OnPerillaDecremento()
{
 800a798:	b480      	push	{r7}
 800a79a:	b083      	sub	sp, #12
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]

}
 800a7a0:	bf00      	nop
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr

0800a7ac <_ZN3PwmC1Ev>:

#include <PWM/Pwm.hpp>
#include "stm32f4xx_hal.h"
#include "stdlib.h"

Pwm::Pwm()
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	4a04      	ldr	r2, [pc, #16]	@ (800a7c8 <_ZN3PwmC1Ev+0x1c>)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	4618      	mov	r0, r3
 800a7be:	370c      	adds	r7, #12
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr
 800a7c8:	08016190 	.word	0x08016190

0800a7cc <_ZN3PwmD1Ev>:

Pwm::~Pwm()
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	4a04      	ldr	r2, [pc, #16]	@ (800a7e8 <_ZN3PwmD1Ev+0x1c>)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	4618      	mov	r0, r3
 800a7de:	370c      	adds	r7, #12
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr
 800a7e8:	08016190 	.word	0x08016190

0800a7ec <_ZN3PwmD0Ev>:
Pwm::~Pwm()
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b082      	sub	sp, #8
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
}
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f7ff ffe9 	bl	800a7cc <_ZN3PwmD1Ev>
 800a7fa:	214c      	movs	r1, #76	@ 0x4c
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f007 f96d 	bl	8011adc <_ZdlPvj>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	4618      	mov	r0, r3
 800a806:	3708      	adds	r7, #8
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <_ZN3Pwm4InitEP11TIM_TypeDefii>:
void Pwm::Init(TIM_TypeDef * timer, int chanel,int periodo)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b092      	sub	sp, #72	@ 0x48
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	60b9      	str	r1, [r7, #8]
 800a816:	607a      	str	r2, [r7, #4]
 800a818:	603b      	str	r3, [r7, #0]

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a81a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a81e:	2200      	movs	r2, #0
 800a820:	601a      	str	r2, [r3, #0]
 800a822:	605a      	str	r2, [r3, #4]
 800a824:	609a      	str	r2, [r3, #8]
 800a826:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a828:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a82c:	2200      	movs	r2, #0
 800a82e:	601a      	str	r2, [r3, #0]
 800a830:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 800a832:	f107 0314 	add.w	r3, r7, #20
 800a836:	2200      	movs	r2, #0
 800a838:	601a      	str	r2, [r3, #0]
 800a83a:	605a      	str	r2, [r3, #4]
 800a83c:	609a      	str	r2, [r3, #8]
 800a83e:	60da      	str	r2, [r3, #12]
 800a840:	611a      	str	r2, [r3, #16]
 800a842:	615a      	str	r2, [r3, #20]
 800a844:	619a      	str	r2, [r3, #24]
	  //periodo=99;
	  Htim.Instance = timer;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	68ba      	ldr	r2, [r7, #8]
 800a84a:	605a      	str	r2, [r3, #4]
	  Htim.Init.Prescaler = 64;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2240      	movs	r2, #64	@ 0x40
 800a850:	609a      	str	r2, [r3, #8]
	  Htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2200      	movs	r2, #0
 800a856:	60da      	str	r2, [r3, #12]
	  Htim.Init.Period = periodo;
 800a858:	683a      	ldr	r2, [r7, #0]
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	611a      	str	r2, [r3, #16]
	  Htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2200      	movs	r2, #0
 800a862:	615a      	str	r2, [r3, #20]
	  Htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2280      	movs	r2, #128	@ 0x80
 800a868:	61da      	str	r2, [r3, #28]
	  if (HAL_TIM_Base_Init(&Htim) != HAL_OK)
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	3304      	adds	r3, #4
 800a86e:	4618      	mov	r0, r3
 800a870:	f005 fd70 	bl	8010354 <HAL_TIM_Base_Init>
 800a874:	4603      	mov	r3, r0
 800a876:	2b00      	cmp	r3, #0
 800a878:	bf14      	ite	ne
 800a87a:	2301      	movne	r3, #1
 800a87c:	2300      	moveq	r3, #0
 800a87e:	b2db      	uxtb	r3, r3
 800a880:	2b00      	cmp	r3, #0
 800a882:	d002      	beq.n	800a88a <_ZN3Pwm4InitEP11TIM_TypeDefii+0x7e>
	  {
	    Error_Handler();
 800a884:	68f8      	ldr	r0, [r7, #12]
 800a886:	f000 f883 	bl	800a990 <_ZN3Pwm13Error_HandlerEv>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a88a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a88e:	63bb      	str	r3, [r7, #56]	@ 0x38
	  if (HAL_TIM_ConfigClockSource(&Htim, &sClockSourceConfig) != HAL_OK)
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	3304      	adds	r3, #4
 800a894:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800a898:	4611      	mov	r1, r2
 800a89a:	4618      	mov	r0, r3
 800a89c:	f006 f8c8 	bl	8010a30 <HAL_TIM_ConfigClockSource>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	bf14      	ite	ne
 800a8a6:	2301      	movne	r3, #1
 800a8a8:	2300      	moveq	r3, #0
 800a8aa:	b2db      	uxtb	r3, r3
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d002      	beq.n	800a8b6 <_ZN3Pwm4InitEP11TIM_TypeDefii+0xaa>
	  {
	    Error_Handler();
 800a8b0:	68f8      	ldr	r0, [r7, #12]
 800a8b2:	f000 f86d 	bl	800a990 <_ZN3Pwm13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_Init(&Htim) != HAL_OK)
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	3304      	adds	r3, #4
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f005 fdfc 	bl	80104b8 <HAL_TIM_PWM_Init>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	bf14      	ite	ne
 800a8c6:	2301      	movne	r3, #1
 800a8c8:	2300      	moveq	r3, #0
 800a8ca:	b2db      	uxtb	r3, r3
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d002      	beq.n	800a8d6 <_ZN3Pwm4InitEP11TIM_TypeDefii+0xca>
	  {
	    Error_Handler();
 800a8d0:	68f8      	ldr	r0, [r7, #12]
 800a8d2:	f000 f85d 	bl	800a990 <_ZN3Pwm13Error_HandlerEv>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	633b      	str	r3, [r7, #48]	@ 0x30
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	637b      	str	r3, [r7, #52]	@ 0x34
	  if (HAL_TIMEx_MasterConfigSynchronization(&Htim, &sMasterConfig) != HAL_OK)
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	3304      	adds	r3, #4
 800a8e2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800a8e6:	4611      	mov	r1, r2
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f006 fc69 	bl	80111c0 <HAL_TIMEx_MasterConfigSynchronization>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	bf14      	ite	ne
 800a8f4:	2301      	movne	r3, #1
 800a8f6:	2300      	moveq	r3, #0
 800a8f8:	b2db      	uxtb	r3, r3
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d002      	beq.n	800a904 <_ZN3Pwm4InitEP11TIM_TypeDefii+0xf8>
	  {
	    Error_Handler();
 800a8fe:	68f8      	ldr	r0, [r7, #12]
 800a900:	f000 f846 	bl	800a990 <_ZN3Pwm13Error_HandlerEv>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a904:	2360      	movs	r3, #96	@ 0x60
 800a906:	617b      	str	r3, [r7, #20]
	  sConfigOC.Pulse = 0;
 800a908:	2300      	movs	r3, #0
 800a90a:	61bb      	str	r3, [r7, #24]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a90c:	2300      	movs	r3, #0
 800a90e:	61fb      	str	r3, [r7, #28]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a910:	2300      	movs	r3, #0
 800a912:	627b      	str	r3, [r7, #36]	@ 0x24
	  if (HAL_TIM_PWM_ConfigChannel(&Htim, &sConfigOC, chanel) != HAL_OK)
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	3304      	adds	r3, #4
 800a918:	687a      	ldr	r2, [r7, #4]
 800a91a:	f107 0114 	add.w	r1, r7, #20
 800a91e:	4618      	mov	r0, r3
 800a920:	f005 ffc4 	bl	80108ac <HAL_TIM_PWM_ConfigChannel>
 800a924:	4603      	mov	r3, r0
 800a926:	2b00      	cmp	r3, #0
 800a928:	bf14      	ite	ne
 800a92a:	2301      	movne	r3, #1
 800a92c:	2300      	moveq	r3, #0
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	2b00      	cmp	r3, #0
 800a932:	d002      	beq.n	800a93a <_ZN3Pwm4InitEP11TIM_TypeDefii+0x12e>
	  {
	    Error_Handler();
 800a934:	68f8      	ldr	r0, [r7, #12]
 800a936:	f000 f82b 	bl	800a990 <_ZN3Pwm13Error_HandlerEv>
	  }
//	  HAL_TIM_MspPostInit(&Htim);

	HAL_TIM_PWM_Start(&Htim,chanel);
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	3304      	adds	r3, #4
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	4611      	mov	r1, r2
 800a942:	4618      	mov	r0, r3
 800a944:	f005 fe12 	bl	801056c <HAL_TIM_PWM_Start>
	SicloTrabajo(0);
 800a948:	2100      	movs	r1, #0
 800a94a:	68f8      	ldr	r0, [r7, #12]
 800a94c:	f000 f804 	bl	800a958 <_ZN3Pwm12SicloTrabajoEi>


//	__HAL_TIM_SET_COMPARE(&Htim, chanel, 500);
}
 800a950:	bf00      	nop
 800a952:	3748      	adds	r7, #72	@ 0x48
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <_ZN3Pwm12SicloTrabajoEi>:
void Pwm::SicloTrabajo(int siclo)
{
 800a958:	b480      	push	{r7}
 800a95a:	b085      	sub	sp, #20
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	6039      	str	r1, [r7, #0]
	// si 65535->100
	// x->siclo
	int valor=siclo*Htim.Init.Period/100;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	691b      	ldr	r3, [r3, #16]
 800a966:	683a      	ldr	r2, [r7, #0]
 800a968:	fb02 f303 	mul.w	r3, r2, r3
 800a96c:	4a07      	ldr	r2, [pc, #28]	@ (800a98c <_ZN3Pwm12SicloTrabajoEi+0x34>)
 800a96e:	fba2 2303 	umull	r2, r3, r2, r3
 800a972:	095b      	lsrs	r3, r3, #5
 800a974:	60fb      	str	r3, [r7, #12]
	Htim.Instance->CCR1=valor;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	68fa      	ldr	r2, [r7, #12]
 800a97c:	635a      	str	r2, [r3, #52]	@ 0x34

}
 800a97e:	bf00      	nop
 800a980:	3714      	adds	r7, #20
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr
 800a98a:	bf00      	nop
 800a98c:	51eb851f 	.word	0x51eb851f

0800a990 <_ZN3Pwm13Error_HandlerEv>:

void Pwm::Error_Handler(void)
{
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]

}
 800a998:	bf00      	nop
 800a99a:	370c      	adds	r7, #12
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr

0800a9a4 <_ZN16CControlProgresoC1Ev>:
 *      Author: W10
 */

#include <RapaTemperatura/CControlProgreso.hpp>

CControlProgreso::CControlProgreso()
 800a9a4:	b480      	push	{r7}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	4a04      	ldr	r2, [pc, #16]	@ (800a9c0 <_ZN16CControlProgresoC1Ev+0x1c>)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	370c      	adds	r7, #12
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr
 800a9c0:	080161a0 	.word	0x080161a0

0800a9c4 <_ZN16CControlProgresoD1Ev>:

CControlProgreso::~CControlProgreso()
 800a9c4:	b480      	push	{r7}
 800a9c6:	b083      	sub	sp, #12
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	4a04      	ldr	r2, [pc, #16]	@ (800a9e0 <_ZN16CControlProgresoD1Ev+0x1c>)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	370c      	adds	r7, #12
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr
 800a9e0:	080161a0 	.word	0x080161a0

0800a9e4 <_ZN16CControlProgresoD0Ev>:
CControlProgreso::~CControlProgreso()
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b082      	sub	sp, #8
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
}
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f7ff ffe9 	bl	800a9c4 <_ZN16CControlProgresoD1Ev>
 800a9f2:	2104      	movs	r1, #4
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f007 f871 	bl	8011adc <_ZdlPvj>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3708      	adds	r7, #8
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <_ZN16CControlProgreso10OnProgresoEii>:

void CControlProgreso::OnProgreso(int valor, int maximo)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b085      	sub	sp, #20
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	60f8      	str	r0, [r7, #12]
 800aa0c:	60b9      	str	r1, [r7, #8]
 800aa0e:	607a      	str	r2, [r7, #4]

}
 800aa10:	bf00      	nop
 800aa12:	3714      	adds	r7, #20
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr

0800aa1c <_ZN16CControlProgreso9OnMensajeEPc>:
void CControlProgreso::OnMensaje(char *texto)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b083      	sub	sp, #12
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	6039      	str	r1, [r7, #0]

}
 800aa26:	bf00      	nop
 800aa28:	370c      	adds	r7, #12
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr

0800aa32 <_ZN16CControlProgreso13OnFinProgresoEv>:
void CControlProgreso::OnFinProgreso()
{
 800aa32:	b480      	push	{r7}
 800aa34:	b083      	sub	sp, #12
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]

}
 800aa3a:	bf00      	nop
 800aa3c:	370c      	adds	r7, #12
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr
	...

0800aa48 <_ZN22CControladorPasosRampaC1Ev>:
#include <EPROM/CEprom.hpp>
#include <RapaTemperatura/CRampa.hpp>
#include <RapaTemperatura/CPaso.hpp>
#include<string.h>

CControladorPasosRampa::CControladorPasosRampa()
 800aa48:	b480      	push	{r7}
 800aa4a:	b083      	sub	sp, #12
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	4a08      	ldr	r2, [pc, #32]	@ (800aa74 <_ZN22CControladorPasosRampaC1Ev+0x2c>)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	601a      	str	r2, [r3, #0]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800aa5c:	605a      	str	r2, [r3, #4]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2206      	movs	r2, #6
 800aa62:	609a      	str	r2, [r3, #8]
{
	// TODO Auto-generated constructor stub

}
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	4618      	mov	r0, r3
 800aa68:	370c      	adds	r7, #12
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr
 800aa72:	bf00      	nop
 800aa74:	080161bc 	.word	0x080161bc

0800aa78 <_ZN22CControladorPasosRampaD1Ev>:

CControladorPasosRampa::~CControladorPasosRampa()
 800aa78:	b480      	push	{r7}
 800aa7a:	b083      	sub	sp, #12
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	4a04      	ldr	r2, [pc, #16]	@ (800aa94 <_ZN22CControladorPasosRampaD1Ev+0x1c>)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	4618      	mov	r0, r3
 800aa8a:	370c      	adds	r7, #12
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr
 800aa94:	080161bc 	.word	0x080161bc

0800aa98 <_ZN22CControladorPasosRampaD0Ev>:
CControladorPasosRampa::~CControladorPasosRampa()
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
}
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f7ff ffe9 	bl	800aa78 <_ZN22CControladorPasosRampaD1Ev>
 800aaa6:	2118      	movs	r1, #24
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f007 f817 	bl	8011adc <_ZdlPvj>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	4618      	mov	r0, r3
 800aab2:	3708      	adds	r7, #8
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <_ZN5CPasoC1ERKS_>:
#ifndef INC_RAPATEMPERATURA_CPASO_HPP_
#define INC_RAPATEMPERATURA_CPASO_HPP_
#include "stm32f4xx.h"
#include "stm32f4xx_hal_conf.h"

class CPaso
 800aab8:	b480      	push	{r7}
 800aaba:	b083      	sub	sp, #12
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	6039      	str	r1, [r7, #0]
 800aac2:	4a11      	ldr	r2, [pc, #68]	@ (800ab08 <_ZN5CPasoC1ERKS_+0x50>)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	601a      	str	r2, [r3, #0]
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	791a      	ldrb	r2, [r3, #4]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	711a      	strb	r2, [r3, #4]
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	795a      	ldrb	r2, [r3, #5]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	715a      	strb	r2, [r3, #5]
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	799a      	ldrb	r2, [r3, #6]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	719a      	strb	r2, [r3, #6]
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	79da      	ldrb	r2, [r3, #7]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	71da      	strb	r2, [r3, #7]
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	7a1a      	ldrb	r2, [r3, #8]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	721a      	strb	r2, [r3, #8]
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	7a5a      	ldrb	r2, [r3, #9]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	725a      	strb	r2, [r3, #9]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	4618      	mov	r0, r3
 800aafc:	370c      	adds	r7, #12
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr
 800ab06:	bf00      	nop
 800ab08:	080161dc 	.word	0x080161dc

0800ab0c <_ZN22CControladorPasosRampa17EliminaPasosRampaEi>:

bool CControladorPasosRampa::EliminaPasosRampa(int ID_Rampa)
{
 800ab0c:	b590      	push	{r4, r7, lr}
 800ab0e:	b089      	sub	sp, #36	@ 0x24
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	6039      	str	r1, [r7, #0]
//	CPaso paso;
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800ab16:	2300      	movs	r3, #0
 800ab18:	61fb      	str	r3, [r7, #28]
 800ab1a:	e02e      	b.n	800ab7a <_ZN22CControladorPasosRampa17EliminaPasosRampaEi+0x6e>
	{
		int direccionPaso = DireccionTablaPasos + (BytesPaso * i);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	695a      	ldr	r2, [r3, #20]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	689b      	ldr	r3, [r3, #8]
 800ab24:	69f9      	ldr	r1, [r7, #28]
 800ab26:	fb01 f303 	mul.w	r3, r1, r3
 800ab2a:	4413      	add	r3, r2
 800ab2c:	61bb      	str	r3, [r7, #24]
		CPaso paso=LeePasoMemoria(direccionPaso);
 800ab2e:	f107 030c 	add.w	r3, r7, #12
 800ab32:	69ba      	ldr	r2, [r7, #24]
 800ab34:	6879      	ldr	r1, [r7, #4]
 800ab36:	4618      	mov	r0, r3
 800ab38:	f000 f8c4 	bl	800acc4 <_ZN22CControladorPasosRampa14LeePasoMemoriaEi>
		//if (Eprom.LeeBytes(direccionPaso, BytesPaso, (uint8_t*)&paso) == false)
		//	return false;
		if (paso.Ocupado == 0)
 800ab3c:	7c3b      	ldrb	r3, [r7, #16]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d101      	bne.n	800ab46 <_ZN22CControladorPasosRampa17EliminaPasosRampaEi+0x3a>
			continue;
 800ab42:	2400      	movs	r4, #0
 800ab44:	e010      	b.n	800ab68 <_ZN22CControladorPasosRampa17EliminaPasosRampaEi+0x5c>
		if (paso.ID_Rampa != ID_Rampa)
 800ab46:	7c7b      	ldrb	r3, [r7, #17]
 800ab48:	461a      	mov	r2, r3
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d001      	beq.n	800ab54 <_ZN22CControladorPasosRampa17EliminaPasosRampaEi+0x48>
			continue;
 800ab50:	2400      	movs	r4, #0
 800ab52:	e009      	b.n	800ab68 <_ZN22CControladorPasosRampa17EliminaPasosRampaEi+0x5c>
		paso.Ocupado = 0;
 800ab54:	2300      	movs	r3, #0
 800ab56:	743b      	strb	r3, [r7, #16]
		GuardaPasoMemoria(direccionPaso, &paso);
 800ab58:	f107 030c 	add.w	r3, r7, #12
 800ab5c:	461a      	mov	r2, r3
 800ab5e:	69b9      	ldr	r1, [r7, #24]
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f000 f851 	bl	800ac08 <_ZN22CControladorPasosRampa17GuardaPasoMemoriaEiP5CPaso>
//		if (Eprom.GuardaBytes(direccionPaso, BytesPaso, (uint8_t*)&paso) == false)
	//		return false;
	}
 800ab66:	2401      	movs	r4, #1
 800ab68:	f107 030c 	add.w	r3, r7, #12
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f000 ffb1 	bl	800bad4 <_ZN5CPasoD1Ev>
 800ab72:	2c01      	cmp	r4, #1
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800ab74:	69fb      	ldr	r3, [r7, #28]
 800ab76:	3301      	adds	r3, #1
 800ab78:	61fb      	str	r3, [r7, #28]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	685b      	ldr	r3, [r3, #4]
 800ab7e:	69fa      	ldr	r2, [r7, #28]
 800ab80:	429a      	cmp	r2, r3
 800ab82:	dbcb      	blt.n	800ab1c <_ZN22CControladorPasosRampa17EliminaPasosRampaEi+0x10>
	return true;
 800ab84:	2301      	movs	r3, #1
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3724      	adds	r7, #36	@ 0x24
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd90      	pop	{r4, r7, pc}

0800ab8e <_ZN22CControladorPasosRampa20DameSiguienteID_PasoEv>:

int CControladorPasosRampa::DameSiguienteID_Paso()
{
 800ab8e:	b590      	push	{r4, r7, lr}
 800ab90:	b089      	sub	sp, #36	@ 0x24
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
	int id_paso=0;
 800ab96:	2300      	movs	r3, #0
 800ab98:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	61bb      	str	r3, [r7, #24]
 800ab9e:	e025      	b.n	800abec <_ZN22CControladorPasosRampa20DameSiguienteID_PasoEv+0x5e>
	{
		int direccionPaso = DireccionTablaPasos + (BytesPaso * i);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	695a      	ldr	r2, [r3, #20]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	689b      	ldr	r3, [r3, #8]
 800aba8:	69b9      	ldr	r1, [r7, #24]
 800abaa:	fb01 f303 	mul.w	r3, r1, r3
 800abae:	4413      	add	r3, r2
 800abb0:	617b      	str	r3, [r7, #20]
		CPaso paso=LeePasoMemoria(direccionPaso);
 800abb2:	f107 0308 	add.w	r3, r7, #8
 800abb6:	697a      	ldr	r2, [r7, #20]
 800abb8:	6879      	ldr	r1, [r7, #4]
 800abba:	4618      	mov	r0, r3
 800abbc:	f000 f882 	bl	800acc4 <_ZN22CControladorPasosRampa14LeePasoMemoriaEi>
		if (paso.Ocupado == false)
 800abc0:	7b3b      	ldrb	r3, [r7, #12]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d101      	bne.n	800abca <_ZN22CControladorPasosRampa20DameSiguienteID_PasoEv+0x3c>
		{
			continue;
 800abc6:	2400      	movs	r4, #0
 800abc8:	e007      	b.n	800abda <_ZN22CControladorPasosRampa20DameSiguienteID_PasoEv+0x4c>
		}
		if(paso.ID_Paso>=id_paso)
 800abca:	7bbb      	ldrb	r3, [r7, #14]
 800abcc:	461a      	mov	r2, r3
 800abce:	69fb      	ldr	r3, [r7, #28]
 800abd0:	4293      	cmp	r3, r2
 800abd2:	dc01      	bgt.n	800abd8 <_ZN22CControladorPasosRampa20DameSiguienteID_PasoEv+0x4a>
			id_paso=paso.ID_Paso;
 800abd4:	7bbb      	ldrb	r3, [r7, #14]
 800abd6:	61fb      	str	r3, [r7, #28]
	}
 800abd8:	2401      	movs	r4, #1
 800abda:	f107 0308 	add.w	r3, r7, #8
 800abde:	4618      	mov	r0, r3
 800abe0:	f000 ff78 	bl	800bad4 <_ZN5CPasoD1Ev>
 800abe4:	2c01      	cmp	r4, #1
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800abe6:	69bb      	ldr	r3, [r7, #24]
 800abe8:	3301      	adds	r3, #1
 800abea:	61bb      	str	r3, [r7, #24]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	69ba      	ldr	r2, [r7, #24]
 800abf2:	429a      	cmp	r2, r3
 800abf4:	dbd4      	blt.n	800aba0 <_ZN22CControladorPasosRampa20DameSiguienteID_PasoEv+0x12>
	id_paso++;
 800abf6:	69fb      	ldr	r3, [r7, #28]
 800abf8:	3301      	adds	r3, #1
 800abfa:	61fb      	str	r3, [r7, #28]
	return id_paso;
 800abfc:	69fb      	ldr	r3, [r7, #28]
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3724      	adds	r7, #36	@ 0x24
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd90      	pop	{r4, r7, pc}
	...

0800ac08 <_ZN22CControladorPasosRampa17GuardaPasoMemoriaEiP5CPaso>:
//			}
//		}
//	}
//}
void CControladorPasosRampa::GuardaPasoMemoria(int direccion, CPaso *paso)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b086      	sub	sp, #24
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	60f8      	str	r0, [r7, #12]
 800ac10:	60b9      	str	r1, [r7, #8]
 800ac12:	607a      	str	r2, [r7, #4]
	uint8_t Ocupado=paso->Ocupado;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	791b      	ldrb	r3, [r3, #4]
 800ac18:	75fb      	strb	r3, [r7, #23]
	uint8_t ID_Rampa=paso->ID_Rampa;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	795b      	ldrb	r3, [r3, #5]
 800ac1e:	75bb      	strb	r3, [r7, #22]
	uint8_t ID_Paso=paso->ID_Paso;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	799b      	ldrb	r3, [r3, #6]
 800ac24:	757b      	strb	r3, [r7, #21]
	uint8_t NivelAire=paso->NivelAire;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	7a1b      	ldrb	r3, [r3, #8]
 800ac2a:	753b      	strb	r3, [r7, #20]
	uint8_t Minutos=paso->Minutos;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	7a5b      	ldrb	r3, [r3, #9]
 800ac30:	74fb      	strb	r3, [r7, #19]
	uint8_t Temperatura=paso->Temperatura;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	79db      	ldrb	r3, [r3, #7]
 800ac36:	74bb      	strb	r3, [r7, #18]

	Eprom.GuardaBytes(direccion, 1,&Ocupado);
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	b299      	uxth	r1, r3
 800ac3c:	f107 0317 	add.w	r3, r7, #23
 800ac40:	2201      	movs	r2, #1
 800ac42:	481f      	ldr	r0, [pc, #124]	@ (800acc0 <_ZN22CControladorPasosRampa17GuardaPasoMemoriaEiP5CPaso+0xb8>)
 800ac44:	f7f6 ff22 	bl	8001a8c <_ZN6CEprom11GuardaBytesEttPh>
	direccion++;
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	3301      	adds	r3, #1
 800ac4c:	60bb      	str	r3, [r7, #8]
	Eprom.GuardaBytes(direccion, 1,&ID_Rampa);
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	b299      	uxth	r1, r3
 800ac52:	f107 0316 	add.w	r3, r7, #22
 800ac56:	2201      	movs	r2, #1
 800ac58:	4819      	ldr	r0, [pc, #100]	@ (800acc0 <_ZN22CControladorPasosRampa17GuardaPasoMemoriaEiP5CPaso+0xb8>)
 800ac5a:	f7f6 ff17 	bl	8001a8c <_ZN6CEprom11GuardaBytesEttPh>
	direccion++;
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	3301      	adds	r3, #1
 800ac62:	60bb      	str	r3, [r7, #8]
	Eprom.GuardaBytes(direccion,1 ,&ID_Paso);
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	b299      	uxth	r1, r3
 800ac68:	f107 0315 	add.w	r3, r7, #21
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	4814      	ldr	r0, [pc, #80]	@ (800acc0 <_ZN22CControladorPasosRampa17GuardaPasoMemoriaEiP5CPaso+0xb8>)
 800ac70:	f7f6 ff0c 	bl	8001a8c <_ZN6CEprom11GuardaBytesEttPh>
	direccion++;
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	3301      	adds	r3, #1
 800ac78:	60bb      	str	r3, [r7, #8]
	Eprom.GuardaBytes(direccion, 1,&NivelAire);
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	b299      	uxth	r1, r3
 800ac7e:	f107 0314 	add.w	r3, r7, #20
 800ac82:	2201      	movs	r2, #1
 800ac84:	480e      	ldr	r0, [pc, #56]	@ (800acc0 <_ZN22CControladorPasosRampa17GuardaPasoMemoriaEiP5CPaso+0xb8>)
 800ac86:	f7f6 ff01 	bl	8001a8c <_ZN6CEprom11GuardaBytesEttPh>
	direccion++;
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	3301      	adds	r3, #1
 800ac8e:	60bb      	str	r3, [r7, #8]
	Eprom.GuardaBytes(direccion, 1,&Temperatura);
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	b299      	uxth	r1, r3
 800ac94:	f107 0312 	add.w	r3, r7, #18
 800ac98:	2201      	movs	r2, #1
 800ac9a:	4809      	ldr	r0, [pc, #36]	@ (800acc0 <_ZN22CControladorPasosRampa17GuardaPasoMemoriaEiP5CPaso+0xb8>)
 800ac9c:	f7f6 fef6 	bl	8001a8c <_ZN6CEprom11GuardaBytesEttPh>
	direccion++;
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	3301      	adds	r3, #1
 800aca4:	60bb      	str	r3, [r7, #8]
	Eprom.GuardaBytes(direccion, 1, &Minutos);
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	b299      	uxth	r1, r3
 800acaa:	f107 0313 	add.w	r3, r7, #19
 800acae:	2201      	movs	r2, #1
 800acb0:	4803      	ldr	r0, [pc, #12]	@ (800acc0 <_ZN22CControladorPasosRampa17GuardaPasoMemoriaEiP5CPaso+0xb8>)
 800acb2:	f7f6 feeb 	bl	8001a8c <_ZN6CEprom11GuardaBytesEttPh>
}
 800acb6:	bf00      	nop
 800acb8:	3718      	adds	r7, #24
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	2000031c 	.word	0x2000031c

0800acc4 <_ZN22CControladorPasosRampa14LeePasoMemoriaEi>:
CPaso CControladorPasosRampa::LeePasoMemoria(int direccion)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b086      	sub	sp, #24
 800acc8:	af00      	add	r7, sp, #0
 800acca:	60f8      	str	r0, [r7, #12]
 800accc:	60b9      	str	r1, [r7, #8]
 800acce:	607a      	str	r2, [r7, #4]
	uint8_t ID_Paso;
	uint8_t NivelAire;
	uint8_t Minutos;
	uint8_t Temperatura;

	Eprom.LeeBytes(direccion, 1,&Ocupado);
 800acd0:	f107 0317 	add.w	r3, r7, #23
 800acd4:	2201      	movs	r2, #1
 800acd6:	6879      	ldr	r1, [r7, #4]
 800acd8:	4827      	ldr	r0, [pc, #156]	@ (800ad78 <_ZN22CControladorPasosRampa14LeePasoMemoriaEi+0xb4>)
 800acda:	f7f6 ff25 	bl	8001b28 <_ZN6CEprom8LeeBytesEiiPh>
	direccion++;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	3301      	adds	r3, #1
 800ace2:	607b      	str	r3, [r7, #4]
	Eprom.LeeBytes(direccion, 1,&ID_Rampa);
 800ace4:	f107 0316 	add.w	r3, r7, #22
 800ace8:	2201      	movs	r2, #1
 800acea:	6879      	ldr	r1, [r7, #4]
 800acec:	4822      	ldr	r0, [pc, #136]	@ (800ad78 <_ZN22CControladorPasosRampa14LeePasoMemoriaEi+0xb4>)
 800acee:	f7f6 ff1b 	bl	8001b28 <_ZN6CEprom8LeeBytesEiiPh>
	direccion++;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	3301      	adds	r3, #1
 800acf6:	607b      	str	r3, [r7, #4]
	Eprom.LeeBytes(direccion,1 ,&ID_Paso);
 800acf8:	f107 0315 	add.w	r3, r7, #21
 800acfc:	2201      	movs	r2, #1
 800acfe:	6879      	ldr	r1, [r7, #4]
 800ad00:	481d      	ldr	r0, [pc, #116]	@ (800ad78 <_ZN22CControladorPasosRampa14LeePasoMemoriaEi+0xb4>)
 800ad02:	f7f6 ff11 	bl	8001b28 <_ZN6CEprom8LeeBytesEiiPh>
	direccion++;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	3301      	adds	r3, #1
 800ad0a:	607b      	str	r3, [r7, #4]
	Eprom.LeeBytes(direccion, 1,&NivelAire);
 800ad0c:	f107 0314 	add.w	r3, r7, #20
 800ad10:	2201      	movs	r2, #1
 800ad12:	6879      	ldr	r1, [r7, #4]
 800ad14:	4818      	ldr	r0, [pc, #96]	@ (800ad78 <_ZN22CControladorPasosRampa14LeePasoMemoriaEi+0xb4>)
 800ad16:	f7f6 ff07 	bl	8001b28 <_ZN6CEprom8LeeBytesEiiPh>
	direccion++;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	3301      	adds	r3, #1
 800ad1e:	607b      	str	r3, [r7, #4]
	Eprom.LeeBytes(direccion, 1,&Temperatura);
 800ad20:	f107 0312 	add.w	r3, r7, #18
 800ad24:	2201      	movs	r2, #1
 800ad26:	6879      	ldr	r1, [r7, #4]
 800ad28:	4813      	ldr	r0, [pc, #76]	@ (800ad78 <_ZN22CControladorPasosRampa14LeePasoMemoriaEi+0xb4>)
 800ad2a:	f7f6 fefd 	bl	8001b28 <_ZN6CEprom8LeeBytesEiiPh>
	direccion++;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	3301      	adds	r3, #1
 800ad32:	607b      	str	r3, [r7, #4]
	Eprom.LeeBytes(direccion, 1,&Minutos);
 800ad34:	f107 0313 	add.w	r3, r7, #19
 800ad38:	2201      	movs	r2, #1
 800ad3a:	6879      	ldr	r1, [r7, #4]
 800ad3c:	480e      	ldr	r0, [pc, #56]	@ (800ad78 <_ZN22CControladorPasosRampa14LeePasoMemoriaEi+0xb4>)
 800ad3e:	f7f6 fef3 	bl	8001b28 <_ZN6CEprom8LeeBytesEiiPh>

	CPaso paso;
 800ad42:	68f8      	ldr	r0, [r7, #12]
 800ad44:	f000 fea4 	bl	800ba90 <_ZN5CPasoC1Ev>
	paso.Ocupado=Ocupado;
 800ad48:	7dfa      	ldrb	r2, [r7, #23]
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	711a      	strb	r2, [r3, #4]
	paso.ID_Rampa=ID_Rampa;
 800ad4e:	7dba      	ldrb	r2, [r7, #22]
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	715a      	strb	r2, [r3, #5]
	paso.ID_Paso=ID_Paso;
 800ad54:	7d7a      	ldrb	r2, [r7, #21]
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	719a      	strb	r2, [r3, #6]
	paso.NivelAire=NivelAire;
 800ad5a:	7d3a      	ldrb	r2, [r7, #20]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	721a      	strb	r2, [r3, #8]
	paso.Minutos=Minutos;
 800ad60:	7cfa      	ldrb	r2, [r7, #19]
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	725a      	strb	r2, [r3, #9]
	paso.Temperatura=Temperatura;
 800ad66:	7cba      	ldrb	r2, [r7, #18]
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	71da      	strb	r2, [r3, #7]
	return paso;
 800ad6c:	bf00      	nop
}
 800ad6e:	68f8      	ldr	r0, [r7, #12]
 800ad70:	3718      	adds	r7, #24
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}
 800ad76:	bf00      	nop
 800ad78:	2000031c 	.word	0x2000031c

0800ad7c <_ZN22CControladorPasosRampa18ActualizaPasoRampaEiihhh>:
bool CControladorPasosRampa::ActualizaPasoRampa(int ID_Paso,int ID_Rampa,uint8_t Temperatura,uint8_t NivelAire,uint8_t Minutos)
{
 800ad7c:	b5b0      	push	{r4, r5, r7, lr}
 800ad7e:	b08a      	sub	sp, #40	@ 0x28
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	60f8      	str	r0, [r7, #12]
 800ad84:	60b9      	str	r1, [r7, #8]
 800ad86:	607a      	str	r2, [r7, #4]
 800ad88:	70fb      	strb	r3, [r7, #3]
 800ad8a:	2400      	movs	r4, #0
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad90:	e036      	b.n	800ae00 <_ZN22CControladorPasosRampa18ActualizaPasoRampaEiihhh+0x84>
	{
		int direccionPaso = DireccionTablaPasos + (BytesPaso * i);
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	695a      	ldr	r2, [r3, #20]
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	689b      	ldr	r3, [r3, #8]
 800ad9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ad9c:	fb01 f303 	mul.w	r3, r1, r3
 800ada0:	4413      	add	r3, r2
 800ada2:	623b      	str	r3, [r7, #32]
		CPaso pasoTmp=LeePasoMemoria(direccionPaso);
 800ada4:	f107 0314 	add.w	r3, r7, #20
 800ada8:	6a3a      	ldr	r2, [r7, #32]
 800adaa:	68f9      	ldr	r1, [r7, #12]
 800adac:	4618      	mov	r0, r3
 800adae:	f7ff ff89 	bl	800acc4 <_ZN22CControladorPasosRampa14LeePasoMemoriaEi>
		if (pasoTmp.ID_Paso != ID_Paso)
 800adb2:	7ebb      	ldrb	r3, [r7, #26]
 800adb4:	461a      	mov	r2, r3
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	4293      	cmp	r3, r2
 800adba:	d001      	beq.n	800adc0 <_ZN22CControladorPasosRampa18ActualizaPasoRampaEiihhh+0x44>
			continue;
 800adbc:	2500      	movs	r5, #0
 800adbe:	e015      	b.n	800adec <_ZN22CControladorPasosRampa18ActualizaPasoRampaEiihhh+0x70>
		pasoTmp.ID_Rampa = ID_Rampa;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	767b      	strb	r3, [r7, #25]
		pasoTmp.Ocupado = 1;
 800adc6:	2301      	movs	r3, #1
 800adc8:	763b      	strb	r3, [r7, #24]
		pasoTmp.NivelAire = NivelAire;
 800adca:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800adce:	773b      	strb	r3, [r7, #28]
		pasoTmp.Minutos = Minutos;
 800add0:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800add4:	777b      	strb	r3, [r7, #29]
		pasoTmp.Temperatura = Temperatura;
 800add6:	78fb      	ldrb	r3, [r7, #3]
 800add8:	76fb      	strb	r3, [r7, #27]
		GuardaPasoMemoria(direccionPaso,&pasoTmp);
 800adda:	f107 0314 	add.w	r3, r7, #20
 800adde:	461a      	mov	r2, r3
 800ade0:	6a39      	ldr	r1, [r7, #32]
 800ade2:	68f8      	ldr	r0, [r7, #12]
 800ade4:	f7ff ff10 	bl	800ac08 <_ZN22CControladorPasosRampa17GuardaPasoMemoriaEiP5CPaso>
		return true;
 800ade8:	2401      	movs	r4, #1
 800adea:	2501      	movs	r5, #1
	}
 800adec:	f107 0314 	add.w	r3, r7, #20
 800adf0:	4618      	mov	r0, r3
 800adf2:	f000 fe6f 	bl	800bad4 <_ZN5CPasoD1Ev>
 800adf6:	2d00      	cmp	r5, #0
 800adf8:	d108      	bne.n	800ae0c <_ZN22CControladorPasosRampa18ActualizaPasoRampaEiihhh+0x90>
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800adfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adfc:	3301      	adds	r3, #1
 800adfe:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae06:	429a      	cmp	r2, r3
 800ae08:	dbc3      	blt.n	800ad92 <_ZN22CControladorPasosRampa18ActualizaPasoRampaEiihhh+0x16>
	return false;
 800ae0a:	2400      	movs	r4, #0

}
 800ae0c:	4623      	mov	r3, r4
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3728      	adds	r7, #40	@ 0x28
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bdb0      	pop	{r4, r5, r7, pc}

0800ae16 <_ZN22CControladorPasosRampa16EliminaPasoRampaEi>:
bool CControladorPasosRampa::EliminaPasoRampa(int ID_Paso)
{
 800ae16:	b590      	push	{r4, r7, lr}
 800ae18:	b089      	sub	sp, #36	@ 0x24
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
 800ae1e:	6039      	str	r1, [r7, #0]
//	CPaso pasoTmp;
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800ae20:	2300      	movs	r3, #0
 800ae22:	61fb      	str	r3, [r7, #28]
 800ae24:	e029      	b.n	800ae7a <_ZN22CControladorPasosRampa16EliminaPasoRampaEi+0x64>
	{
		int direccionPaso = DireccionTablaPasos + (BytesPaso * i);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	695a      	ldr	r2, [r3, #20]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	689b      	ldr	r3, [r3, #8]
 800ae2e:	69f9      	ldr	r1, [r7, #28]
 800ae30:	fb01 f303 	mul.w	r3, r1, r3
 800ae34:	4413      	add	r3, r2
 800ae36:	61bb      	str	r3, [r7, #24]
		CPaso pasoTmp=LeePasoMemoria(direccionPaso);
 800ae38:	f107 030c 	add.w	r3, r7, #12
 800ae3c:	69ba      	ldr	r2, [r7, #24]
 800ae3e:	6879      	ldr	r1, [r7, #4]
 800ae40:	4618      	mov	r0, r3
 800ae42:	f7ff ff3f 	bl	800acc4 <_ZN22CControladorPasosRampa14LeePasoMemoriaEi>
	//	if (Eprom.LeeBytes(direccionPaso, BytesPaso,(uint8_t*) &pasoTmp) == false)
		//	return false;
		if (pasoTmp.ID_Paso != ID_Paso)
 800ae46:	7cbb      	ldrb	r3, [r7, #18]
 800ae48:	461a      	mov	r2, r3
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d001      	beq.n	800ae54 <_ZN22CControladorPasosRampa16EliminaPasoRampaEi+0x3e>
			continue;
 800ae50:	2400      	movs	r4, #0
 800ae52:	e009      	b.n	800ae68 <_ZN22CControladorPasosRampa16EliminaPasoRampaEi+0x52>
		pasoTmp.Ocupado = 0;
 800ae54:	2300      	movs	r3, #0
 800ae56:	743b      	strb	r3, [r7, #16]
		GuardaPasoMemoria(direccionPaso,&pasoTmp);
 800ae58:	f107 030c 	add.w	r3, r7, #12
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	69b9      	ldr	r1, [r7, #24]
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f7ff fed1 	bl	800ac08 <_ZN22CControladorPasosRampa17GuardaPasoMemoriaEiP5CPaso>
		//return Eprom.GuardaBytes(direccionPaso, BytesPaso,(uint8_t*) &pasoTmp);
	}
 800ae66:	2401      	movs	r4, #1
 800ae68:	f107 030c 	add.w	r3, r7, #12
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f000 fe31 	bl	800bad4 <_ZN5CPasoD1Ev>
 800ae72:	2c01      	cmp	r4, #1
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800ae74:	69fb      	ldr	r3, [r7, #28]
 800ae76:	3301      	adds	r3, #1
 800ae78:	61fb      	str	r3, [r7, #28]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	69fa      	ldr	r2, [r7, #28]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	dbd0      	blt.n	800ae26 <_ZN22CControladorPasosRampa16EliminaPasoRampaEi+0x10>
	return false;
 800ae84:	2300      	movs	r3, #0

}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3724      	adds	r7, #36	@ 0x24
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd90      	pop	{r4, r7, pc}

0800ae8e <_ZN22CControladorPasosRampa25SetDireccionUltimoID_PasoEi>:
void CControladorPasosRampa::SetDireccionUltimoID_Paso(int ultimoID)
{
 800ae8e:	b480      	push	{r7}
 800ae90:	b083      	sub	sp, #12
 800ae92:	af00      	add	r7, sp, #0
 800ae94:	6078      	str	r0, [r7, #4]
 800ae96:	6039      	str	r1, [r7, #0]
	DireccionUltimoID_Paso=	ultimoID;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	683a      	ldr	r2, [r7, #0]
 800ae9c:	60da      	str	r2, [r3, #12]
}
 800ae9e:	bf00      	nop
 800aea0:	370c      	adds	r7, #12
 800aea2:	46bd      	mov	sp, r7
 800aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea8:	4770      	bx	lr

0800aeaa <_ZN22CControladorPasosRampa22SetDireccionTablaPasosEi>:

void CControladorPasosRampa::SetDireccionTablaPasos(int direccion)
{
 800aeaa:	b480      	push	{r7}
 800aeac:	b083      	sub	sp, #12
 800aeae:	af00      	add	r7, sp, #0
 800aeb0:	6078      	str	r0, [r7, #4]
 800aeb2:	6039      	str	r1, [r7, #0]
	DireccionTablaPasos=direccion;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	683a      	ldr	r2, [r7, #0]
 800aeb8:	615a      	str	r2, [r3, #20]
}
 800aeba:	bf00      	nop
 800aebc:	370c      	adds	r7, #12
 800aebe:	46bd      	mov	sp, r7
 800aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec4:	4770      	bx	lr

0800aec6 <_ZN22CControladorPasosRampa20SetNumeroMaximoPasosEi>:
void CControladorPasosRampa::SetNumeroMaximoPasos(int valor)
{
 800aec6:	b480      	push	{r7}
 800aec8:	b083      	sub	sp, #12
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
 800aece:	6039      	str	r1, [r7, #0]
	NUMERO_MAXIMO_PASOS=valor;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	683a      	ldr	r2, [r7, #0]
 800aed4:	605a      	str	r2, [r3, #4]
}
 800aed6:	bf00      	nop
 800aed8:	370c      	adds	r7, #12
 800aeda:	46bd      	mov	sp, r7
 800aedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee0:	4770      	bx	lr

0800aee2 <_ZN22CControladorPasosRampa13GetBytesXPasoEv>:
int CControladorPasosRampa::GetBytesXPaso()
{
 800aee2:	b480      	push	{r7}
 800aee4:	b083      	sub	sp, #12
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	6078      	str	r0, [r7, #4]
	return BytesPaso;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	689b      	ldr	r3, [r3, #8]
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	370c      	adds	r7, #12
 800aef2:	46bd      	mov	sp, r7
 800aef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef8:	4770      	bx	lr

0800aefa <_ZN22CControladorPasosRampa20GetNumeroMaximoPasosEv>:
int CControladorPasosRampa::GetNumeroMaximoPasos()
{
 800aefa:	b480      	push	{r7}
 800aefc:	b083      	sub	sp, #12
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
	return NUMERO_MAXIMO_PASOS;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	685b      	ldr	r3, [r3, #4]
}
 800af06:	4618      	mov	r0, r3
 800af08:	370c      	adds	r7, #12
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr

0800af12 <_ZN22CControladorPasosRampa22GetDireccionTablaPasosEv>:
int CControladorPasosRampa::GetDireccionTablaPasos()
{
 800af12:	b480      	push	{r7}
 800af14:	b083      	sub	sp, #12
 800af16:	af00      	add	r7, sp, #0
 800af18:	6078      	str	r0, [r7, #4]
	return DireccionTablaPasos;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	695b      	ldr	r3, [r3, #20]
}
 800af1e:	4618      	mov	r0, r3
 800af20:	370c      	adds	r7, #12
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr
	...

0800af2c <_ZN22CControladorPasosRampa15SetUltimoIDPadoEh>:
void CControladorPasosRampa::SetUltimoIDPado(uint8_t id)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b082      	sub	sp, #8
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	460b      	mov	r3, r1
 800af36:	70fb      	strb	r3, [r7, #3]
	UltimoID_Paso=id;
 800af38:	78fb      	ldrb	r3, [r7, #3]
 800af3a:	b29a      	uxth	r2, r3
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	821a      	strh	r2, [r3, #16]
	Eprom.GuardaBytes(DireccionUltimoID_Paso, 2, (uint8_t*)&UltimoID_Paso);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	68db      	ldr	r3, [r3, #12]
 800af44:	b299      	uxth	r1, r3
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	3310      	adds	r3, #16
 800af4a:	2202      	movs	r2, #2
 800af4c:	4803      	ldr	r0, [pc, #12]	@ (800af5c <_ZN22CControladorPasosRampa15SetUltimoIDPadoEh+0x30>)
 800af4e:	f7f6 fd9d 	bl	8001a8c <_ZN6CEprom11GuardaBytesEttPh>
}
 800af52:	bf00      	nop
 800af54:	3708      	adds	r7, #8
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	2000031c 	.word	0x2000031c

0800af60 <_ZN22CControladorPasosRampa20DameNumeroPasosRampaEi>:
//-------------------------------------------------------------------------------------------------------------------------------
int CControladorPasosRampa::DameNumeroPasosRampa(int ID_Rampa)
{
 800af60:	b590      	push	{r4, r7, lr}
 800af62:	b089      	sub	sp, #36	@ 0x24
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	6039      	str	r1, [r7, #0]
	int npasos=0;
 800af6a:	2300      	movs	r3, #0
 800af6c:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800af6e:	2300      	movs	r3, #0
 800af70:	61bb      	str	r3, [r7, #24]
 800af72:	e026      	b.n	800afc2 <_ZN22CControladorPasosRampa20DameNumeroPasosRampaEi+0x62>
	{
		int direccionPaso = DireccionTablaPasos + (BytesPaso * i);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	695a      	ldr	r2, [r3, #20]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	689b      	ldr	r3, [r3, #8]
 800af7c:	69b9      	ldr	r1, [r7, #24]
 800af7e:	fb01 f303 	mul.w	r3, r1, r3
 800af82:	4413      	add	r3, r2
 800af84:	617b      	str	r3, [r7, #20]
		CPaso pasoTmp=LeePasoMemoria(direccionPaso);
 800af86:	f107 0308 	add.w	r3, r7, #8
 800af8a:	697a      	ldr	r2, [r7, #20]
 800af8c:	6879      	ldr	r1, [r7, #4]
 800af8e:	4618      	mov	r0, r3
 800af90:	f7ff fe98 	bl	800acc4 <_ZN22CControladorPasosRampa14LeePasoMemoriaEi>
		if (pasoTmp.Ocupado != true)
 800af94:	7b3b      	ldrb	r3, [r7, #12]
 800af96:	2b01      	cmp	r3, #1
 800af98:	d001      	beq.n	800af9e <_ZN22CControladorPasosRampa20DameNumeroPasosRampaEi+0x3e>
			continue;
 800af9a:	2400      	movs	r4, #0
 800af9c:	e008      	b.n	800afb0 <_ZN22CControladorPasosRampa20DameNumeroPasosRampaEi+0x50>
		if (pasoTmp.ID_Rampa == ID_Rampa)
 800af9e:	7b7b      	ldrb	r3, [r7, #13]
 800afa0:	461a      	mov	r2, r3
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d102      	bne.n	800afae <_ZN22CControladorPasosRampa20DameNumeroPasosRampaEi+0x4e>
		{
			npasos++;
 800afa8:	69fb      	ldr	r3, [r7, #28]
 800afaa:	3301      	adds	r3, #1
 800afac:	61fb      	str	r3, [r7, #28]
		}
	}
 800afae:	2401      	movs	r4, #1
 800afb0:	f107 0308 	add.w	r3, r7, #8
 800afb4:	4618      	mov	r0, r3
 800afb6:	f000 fd8d 	bl	800bad4 <_ZN5CPasoD1Ev>
 800afba:	2c01      	cmp	r4, #1
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800afbc:	69bb      	ldr	r3, [r7, #24]
 800afbe:	3301      	adds	r3, #1
 800afc0:	61bb      	str	r3, [r7, #24]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	69ba      	ldr	r2, [r7, #24]
 800afc8:	429a      	cmp	r2, r3
 800afca:	dbd3      	blt.n	800af74 <_ZN22CControladorPasosRampa20DameNumeroPasosRampaEi+0x14>
	return npasos;
 800afcc:	69fb      	ldr	r3, [r7, #28]
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3724      	adds	r7, #36	@ 0x24
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd90      	pop	{r4, r7, pc}

0800afd6 <_ZN22CControladorPasosRampa17DameSiguientePasoEii>:
CPaso CControladorPasosRampa::DameSiguientePaso(int id_rampa, int id_pasActual)
{
 800afd6:	b590      	push	{r4, r7, lr}
 800afd8:	b08b      	sub	sp, #44	@ 0x2c
 800afda:	af00      	add	r7, sp, #0
 800afdc:	60f8      	str	r0, [r7, #12]
 800afde:	60b9      	str	r1, [r7, #8]
 800afe0:	607a      	str	r2, [r7, #4]
 800afe2:	603b      	str	r3, [r7, #0]
	int id_paso=0;
 800afe4:	2300      	movs	r3, #0
 800afe6:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800afe8:	2300      	movs	r3, #0
 800afea:	623b      	str	r3, [r7, #32]
 800afec:	e03c      	b.n	800b068 <_ZN22CControladorPasosRampa17DameSiguientePasoEii+0x92>
	{
		int direccionPaso = DireccionTablaPasos + (BytesPaso * i);
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	695a      	ldr	r2, [r3, #20]
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	689b      	ldr	r3, [r3, #8]
 800aff6:	6a39      	ldr	r1, [r7, #32]
 800aff8:	fb01 f303 	mul.w	r3, r1, r3
 800affc:	4413      	add	r3, r2
 800affe:	61fb      	str	r3, [r7, #28]
		CPaso pasoTmp=LeePasoMemoria(direccionPaso);
 800b000:	f107 0310 	add.w	r3, r7, #16
 800b004:	69fa      	ldr	r2, [r7, #28]
 800b006:	68b9      	ldr	r1, [r7, #8]
 800b008:	4618      	mov	r0, r3
 800b00a:	f7ff fe5b 	bl	800acc4 <_ZN22CControladorPasosRampa14LeePasoMemoriaEi>
		if (pasoTmp.Ocupado != true)
 800b00e:	7d3b      	ldrb	r3, [r7, #20]
 800b010:	2b01      	cmp	r3, #1
 800b012:	d001      	beq.n	800b018 <_ZN22CControladorPasosRampa17DameSiguientePasoEii+0x42>
			continue;
 800b014:	2400      	movs	r4, #0
 800b016:	e01e      	b.n	800b056 <_ZN22CControladorPasosRampa17DameSiguientePasoEii+0x80>
		if (pasoTmp.ID_Rampa != id_rampa)
 800b018:	7d7b      	ldrb	r3, [r7, #21]
 800b01a:	461a      	mov	r2, r3
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	4293      	cmp	r3, r2
 800b020:	d001      	beq.n	800b026 <_ZN22CControladorPasosRampa17DameSiguientePasoEii+0x50>
			continue;
 800b022:	2400      	movs	r4, #0
 800b024:	e017      	b.n	800b056 <_ZN22CControladorPasosRampa17DameSiguientePasoEii+0x80>
		if(pasoTmp.ID_Paso<=id_pasActual)
 800b026:	7dbb      	ldrb	r3, [r7, #22]
 800b028:	461a      	mov	r2, r3
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	4293      	cmp	r3, r2
 800b02e:	db01      	blt.n	800b034 <_ZN22CControladorPasosRampa17DameSiguientePasoEii+0x5e>
			continue;
 800b030:	2400      	movs	r4, #0
 800b032:	e010      	b.n	800b056 <_ZN22CControladorPasosRampa17DameSiguientePasoEii+0x80>
		if(id_paso==0)
 800b034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b036:	2b00      	cmp	r3, #0
 800b038:	d103      	bne.n	800b042 <_ZN22CControladorPasosRampa17DameSiguientePasoEii+0x6c>
		{
			id_paso=pasoTmp.ID_Paso;
 800b03a:	7dbb      	ldrb	r3, [r7, #22]
 800b03c:	627b      	str	r3, [r7, #36]	@ 0x24
			continue;
 800b03e:	2400      	movs	r4, #0
 800b040:	e009      	b.n	800b056 <_ZN22CControladorPasosRampa17DameSiguientePasoEii+0x80>
		}
		if(id_paso<=pasoTmp.ID_Paso)
 800b042:	7dbb      	ldrb	r3, [r7, #22]
 800b044:	461a      	mov	r2, r3
 800b046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b048:	4293      	cmp	r3, r2
 800b04a:	dc01      	bgt.n	800b050 <_ZN22CControladorPasosRampa17DameSiguientePasoEii+0x7a>
			continue;
 800b04c:	2400      	movs	r4, #0
 800b04e:	e002      	b.n	800b056 <_ZN22CControladorPasosRampa17DameSiguientePasoEii+0x80>
		id_paso=pasoTmp.ID_Paso;
 800b050:	7dbb      	ldrb	r3, [r7, #22]
 800b052:	627b      	str	r3, [r7, #36]	@ 0x24
	}
 800b054:	2401      	movs	r4, #1
 800b056:	f107 0310 	add.w	r3, r7, #16
 800b05a:	4618      	mov	r0, r3
 800b05c:	f000 fd3a 	bl	800bad4 <_ZN5CPasoD1Ev>
 800b060:	2c01      	cmp	r4, #1
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800b062:	6a3b      	ldr	r3, [r7, #32]
 800b064:	3301      	adds	r3, #1
 800b066:	623b      	str	r3, [r7, #32]
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	6a3a      	ldr	r2, [r7, #32]
 800b06e:	429a      	cmp	r2, r3
 800b070:	dbbd      	blt.n	800afee <_ZN22CControladorPasosRampa17DameSiguientePasoEii+0x18>
	return DamePasoRampa(id_paso);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b076:	68b9      	ldr	r1, [r7, #8]
 800b078:	4618      	mov	r0, r3
 800b07a:	f000 f804 	bl	800b086 <_ZN22CControladorPasosRampa13DamePasoRampaEi>
}
 800b07e:	68f8      	ldr	r0, [r7, #12]
 800b080:	372c      	adds	r7, #44	@ 0x2c
 800b082:	46bd      	mov	sp, r7
 800b084:	bd90      	pop	{r4, r7, pc}

0800b086 <_ZN22CControladorPasosRampa13DamePasoRampaEi>:
CPaso CControladorPasosRampa::DamePasoRampa(int ID_Paso)
{
 800b086:	b590      	push	{r4, r7, lr}
 800b088:	b08d      	sub	sp, #52	@ 0x34
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	60f8      	str	r0, [r7, #12]
 800b08e:	60b9      	str	r1, [r7, #8]
 800b090:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800b092:	2300      	movs	r3, #0
 800b094:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b096:	e027      	b.n	800b0e8 <_ZN22CControladorPasosRampa13DamePasoRampaEi+0x62>
	{
		int direccionPaso = DireccionTablaPasos + (BytesPaso * i);
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	695a      	ldr	r2, [r3, #20]
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	689b      	ldr	r3, [r3, #8]
 800b0a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b0a2:	fb01 f303 	mul.w	r3, r1, r3
 800b0a6:	4413      	add	r3, r2
 800b0a8:	62bb      	str	r3, [r7, #40]	@ 0x28
		CPaso pasoTmp=LeePasoMemoria(direccionPaso);
 800b0aa:	f107 0310 	add.w	r3, r7, #16
 800b0ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b0b0:	68b9      	ldr	r1, [r7, #8]
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f7ff fe06 	bl	800acc4 <_ZN22CControladorPasosRampa14LeePasoMemoriaEi>
		if (pasoTmp.ID_Paso != ID_Paso)
 800b0b8:	7dbb      	ldrb	r3, [r7, #22]
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d001      	beq.n	800b0c6 <_ZN22CControladorPasosRampa13DamePasoRampaEi+0x40>
			continue;
 800b0c2:	2400      	movs	r4, #0
 800b0c4:	e006      	b.n	800b0d4 <_ZN22CControladorPasosRampa13DamePasoRampaEi+0x4e>
		return pasoTmp;
 800b0c6:	f107 0310 	add.w	r3, r7, #16
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	68f8      	ldr	r0, [r7, #12]
 800b0ce:	f7ff fcf3 	bl	800aab8 <_ZN5CPasoC1ERKS_>
 800b0d2:	2401      	movs	r4, #1
	}
 800b0d4:	f107 0310 	add.w	r3, r7, #16
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f000 fcfb 	bl	800bad4 <_ZN5CPasoD1Ev>
 800b0de:	2c00      	cmp	r4, #0
 800b0e0:	d117      	bne.n	800b112 <_ZN22CControladorPasosRampa13DamePasoRampaEi+0x8c>
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800b0e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0e4:	3301      	adds	r3, #1
 800b0e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	dbd2      	blt.n	800b098 <_ZN22CControladorPasosRampa13DamePasoRampaEi+0x12>
	CPaso pasoTmp2;
 800b0f2:	f107 031c 	add.w	r3, r7, #28
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f000 fcca 	bl	800ba90 <_ZN5CPasoC1Ev>
	return pasoTmp2;
 800b0fc:	f107 031c 	add.w	r3, r7, #28
 800b100:	4619      	mov	r1, r3
 800b102:	68f8      	ldr	r0, [r7, #12]
 800b104:	f7ff fcd8 	bl	800aab8 <_ZN5CPasoC1ERKS_>
}
 800b108:	f107 031c 	add.w	r3, r7, #28
 800b10c:	4618      	mov	r0, r3
 800b10e:	f000 fce1 	bl	800bad4 <_ZN5CPasoD1Ev>
 800b112:	68f8      	ldr	r0, [r7, #12]
 800b114:	3734      	adds	r7, #52	@ 0x34
 800b116:	46bd      	mov	sp, r7
 800b118:	bd90      	pop	{r4, r7, pc}

0800b11a <_ZN22CControladorPasosRampa16AgregarPasoRampaEihhh>:
bool CControladorPasosRampa::AgregarPasoRampa(int ID_Rampa, uint8_t Temperatura, uint8_t NivelAire, uint8_t Minutos)
{
 800b11a:	b5b0      	push	{r4, r5, r7, lr}
 800b11c:	b08a      	sub	sp, #40	@ 0x28
 800b11e:	af00      	add	r7, sp, #0
 800b120:	60f8      	str	r0, [r7, #12]
 800b122:	60b9      	str	r1, [r7, #8]
 800b124:	4611      	mov	r1, r2
 800b126:	461a      	mov	r2, r3
 800b128:	460b      	mov	r3, r1
 800b12a:	71fb      	strb	r3, [r7, #7]
 800b12c:	4613      	mov	r3, r2
 800b12e:	71bb      	strb	r3, [r7, #6]
 800b130:	2400      	movs	r4, #0
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800b132:	2300      	movs	r3, #0
 800b134:	627b      	str	r3, [r7, #36]	@ 0x24
 800b136:	e03a      	b.n	800b1ae <_ZN22CControladorPasosRampa16AgregarPasoRampaEihhh+0x94>
	{
		int direccionPaso = DireccionTablaPasos + (BytesPaso * i);
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	695a      	ldr	r2, [r3, #20]
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	689b      	ldr	r3, [r3, #8]
 800b140:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b142:	fb01 f303 	mul.w	r3, r1, r3
 800b146:	4413      	add	r3, r2
 800b148:	623b      	str	r3, [r7, #32]
		CPaso pasoTmp=LeePasoMemoria(direccionPaso);
 800b14a:	f107 0310 	add.w	r3, r7, #16
 800b14e:	6a3a      	ldr	r2, [r7, #32]
 800b150:	68f9      	ldr	r1, [r7, #12]
 800b152:	4618      	mov	r0, r3
 800b154:	f7ff fdb6 	bl	800acc4 <_ZN22CControladorPasosRampa14LeePasoMemoriaEi>
		if (pasoTmp.Ocupado == 1)
 800b158:	7d3b      	ldrb	r3, [r7, #20]
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	d101      	bne.n	800b162 <_ZN22CControladorPasosRampa16AgregarPasoRampaEihhh+0x48>
		{
			continue;
 800b15e:	2500      	movs	r5, #0
 800b160:	e01b      	b.n	800b19a <_ZN22CControladorPasosRampa16AgregarPasoRampaEihhh+0x80>
		}
		pasoTmp.ID_Rampa = ID_Rampa;
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	b2db      	uxtb	r3, r3
 800b166:	757b      	strb	r3, [r7, #21]
		int id_paso=DameSiguienteID_Paso();
 800b168:	68f8      	ldr	r0, [r7, #12]
 800b16a:	f7ff fd10 	bl	800ab8e <_ZN22CControladorPasosRampa20DameSiguienteID_PasoEv>
 800b16e:	61f8      	str	r0, [r7, #28]
		pasoTmp.ID_Paso =id_paso;
 800b170:	69fb      	ldr	r3, [r7, #28]
 800b172:	b2db      	uxtb	r3, r3
 800b174:	75bb      	strb	r3, [r7, #22]
		pasoTmp.Ocupado = 1;
 800b176:	2301      	movs	r3, #1
 800b178:	753b      	strb	r3, [r7, #20]
		pasoTmp.NivelAire = NivelAire;
 800b17a:	79bb      	ldrb	r3, [r7, #6]
 800b17c:	763b      	strb	r3, [r7, #24]
		pasoTmp.Minutos = Minutos;
 800b17e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800b182:	767b      	strb	r3, [r7, #25]
		pasoTmp.Temperatura = Temperatura;
 800b184:	79fb      	ldrb	r3, [r7, #7]
 800b186:	75fb      	strb	r3, [r7, #23]
		GuardaPasoMemoria(direccionPaso, &pasoTmp);
 800b188:	f107 0310 	add.w	r3, r7, #16
 800b18c:	461a      	mov	r2, r3
 800b18e:	6a39      	ldr	r1, [r7, #32]
 800b190:	68f8      	ldr	r0, [r7, #12]
 800b192:	f7ff fd39 	bl	800ac08 <_ZN22CControladorPasosRampa17GuardaPasoMemoriaEiP5CPaso>
		return true;
 800b196:	2401      	movs	r4, #1
 800b198:	2501      	movs	r5, #1
	}
 800b19a:	f107 0310 	add.w	r3, r7, #16
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f000 fc98 	bl	800bad4 <_ZN5CPasoD1Ev>
 800b1a4:	2d00      	cmp	r5, #0
 800b1a6:	d108      	bne.n	800b1ba <_ZN22CControladorPasosRampa16AgregarPasoRampaEihhh+0xa0>
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800b1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1aa:	3301      	adds	r3, #1
 800b1ac:	627b      	str	r3, [r7, #36]	@ 0x24
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	dbbf      	blt.n	800b138 <_ZN22CControladorPasosRampa16AgregarPasoRampaEihhh+0x1e>
	return false;
 800b1b8:	2400      	movs	r4, #0
}
 800b1ba:	4623      	mov	r3, r4
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3728      	adds	r7, #40	@ 0x28
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bdb0      	pop	{r4, r5, r7, pc}

0800b1c4 <_ZN18CControladorRampasC1Ev>:
#include <RapaTemperatura/CRampa.hpp>
#include <RapaTemperatura/CPaso.hpp>
#include<string.h>
#include <RapaTemperatura/CControladorPasosRampa.hpp>

CControladorRampas::CControladorRampas()
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b086      	sub	sp, #24
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	4a2f      	ldr	r2, [pc, #188]	@ (800b28c <_ZN18CControladorRampasC1Ev+0xc8>)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	601a      	str	r2, [r3, #0]
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	4a2e      	ldr	r2, [pc, #184]	@ (800b290 <_ZN18CControladorRampasC1Ev+0xcc>)
 800b1d6:	605a      	str	r2, [r3, #4]
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	221e      	movs	r2, #30
 800b1dc:	609a      	str	r2, [r3, #8]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b1e4:	60da      	str	r2, [r3, #12]
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f04f 32ff 	mov.w	r2, #4294967295
 800b1ec:	611a      	str	r2, [r3, #16]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b1f4:	615a      	str	r2, [r3, #20]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	62da      	str	r2, [r3, #44]	@ 0x2c
{
	// TODO Auto-generated constructor stub
	int capacidadMemoriaInstalada = Eprom.DameCapacidadMaximaMemoria();
 800b1fc:	4825      	ldr	r0, [pc, #148]	@ (800b294 <_ZN18CControladorRampasC1Ev+0xd0>)
 800b1fe:	f7f6 fcc3 	bl	8001b88 <_ZN6CEprom26DameCapacidadMaximaMemoriaEv>
 800b202:	6178      	str	r0, [r7, #20]
	DireccionInicial = Eprom.DameDireccionInicioRampas();
 800b204:	4823      	ldr	r0, [pc, #140]	@ (800b294 <_ZN18CControladorRampasC1Ev+0xd0>)
 800b206:	f7f6 fc35 	bl	8001a74 <_ZN6CEprom25DameDireccionInicioRampasEv>
 800b20a:	4602      	mov	r2, r0
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	611a      	str	r2, [r3, #16]
	DireccionKey = DireccionInicial;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	691a      	ldr	r2, [r3, #16]
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	61da      	str	r2, [r3, #28]
	DireccionUltimoID_Rampa = DireccionKey + 3;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	69db      	ldr	r3, [r3, #28]
 800b21c:	1cda      	adds	r2, r3, #3
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	621a      	str	r2, [r3, #32]
	int direccionUltimoID_Paso=DireccionUltimoID_Rampa + 2;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6a1b      	ldr	r3, [r3, #32]
 800b226:	3302      	adds	r3, #2
 800b228:	613b      	str	r3, [r7, #16]
	ControladorPasosRampa.SetDireccionUltimoID_Paso(direccionUltimoID_Paso);
 800b22a:	6939      	ldr	r1, [r7, #16]
 800b22c:	481a      	ldr	r0, [pc, #104]	@ (800b298 <_ZN18CControladorRampasC1Ev+0xd4>)
 800b22e:	f7ff fe2e 	bl	800ae8e <_ZN22CControladorPasosRampa25SetDireccionUltimoID_PasoEi>
	DireccionTablaRampas = direccionUltimoID_Paso + 2;
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	1c9a      	adds	r2, r3, #2
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	629a      	str	r2, [r3, #40]	@ 0x28
	BytesRampa = sizeof(CRampa);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2218      	movs	r2, #24
 800b23e:	615a      	str	r2, [r3, #20]
	int direccionTablaPasos= DireccionTablaRampas + (BytesRampa * NUMERO_MAXIMO_RAMPAS);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	695b      	ldr	r3, [r3, #20]
 800b248:	6879      	ldr	r1, [r7, #4]
 800b24a:	6889      	ldr	r1, [r1, #8]
 800b24c:	fb01 f303 	mul.w	r3, r1, r3
 800b250:	4413      	add	r3, r2
 800b252:	60fb      	str	r3, [r7, #12]
	ControladorPasosRampa.SetDireccionTablaPasos(direccionTablaPasos);
 800b254:	68f9      	ldr	r1, [r7, #12]
 800b256:	4810      	ldr	r0, [pc, #64]	@ (800b298 <_ZN18CControladorRampasC1Ev+0xd4>)
 800b258:	f7ff fe27 	bl	800aeaa <_ZN22CControladorPasosRampa22SetDireccionTablaPasosEi>
	int bytesPaso = ControladorPasosRampa.GetBytesXPaso();
 800b25c:	480e      	ldr	r0, [pc, #56]	@ (800b298 <_ZN18CControladorRampasC1Ev+0xd4>)
 800b25e:	f7ff fe40 	bl	800aee2 <_ZN22CControladorPasosRampa13GetBytesXPasoEv>
 800b262:	60b8      	str	r0, [r7, #8]
	ControladorPasosRampa.SetNumeroMaximoPasos( (capacidadMemoriaInstalada - direccionTablaPasos) / bytesPaso);
 800b264:	697a      	ldr	r2, [r7, #20]
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	1ad2      	subs	r2, r2, r3
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	fb92 f3f3 	sdiv	r3, r2, r3
 800b270:	4619      	mov	r1, r3
 800b272:	4809      	ldr	r0, [pc, #36]	@ (800b298 <_ZN18CControladorRampasC1Ev+0xd4>)
 800b274:	f7ff fe27 	bl	800aec6 <_ZN22CControladorPasosRampa20SetNumeroMaximoPasosEi>
	UltimoID_Rampa = -1;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b27e:	849a      	strh	r2, [r3, #36]	@ 0x24
}
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	4618      	mov	r0, r3
 800b284:	3718      	adds	r7, #24
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
 800b28a:	bf00      	nop
 800b28c:	080161cc 	.word	0x080161cc
 800b290:	08014ca4 	.word	0x08014ca4
 800b294:	2000031c 	.word	0x2000031c
 800b298:	200001f8 	.word	0x200001f8

0800b29c <_ZN18CControladorRampasD1Ev>:

CControladorRampas::~CControladorRampas()
 800b29c:	b480      	push	{r7}
 800b29e:	b083      	sub	sp, #12
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	4a04      	ldr	r2, [pc, #16]	@ (800b2b8 <_ZN18CControladorRampasD1Ev+0x1c>)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	370c      	adds	r7, #12
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b6:	4770      	bx	lr
 800b2b8:	080161cc 	.word	0x080161cc

0800b2bc <_ZN18CControladorRampasD0Ev>:
CControladorRampas::~CControladorRampas()
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
}
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f7ff ffe9 	bl	800b29c <_ZN18CControladorRampasD1Ev>
 800b2ca:	2130      	movs	r1, #48	@ 0x30
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f006 fc05 	bl	8011adc <_ZdlPvj>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3708      	adds	r7, #8
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}

0800b2dc <_ZN18CControladorRampas19MemoriaInicialidadaEv>:


bool CControladorRampas::MemoriaInicialidada()
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b084      	sub	sp, #16
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
	Eprom.LeeBytes(DireccionKey, 3, (uint8_t*)&Key);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	69d9      	ldr	r1, [r3, #28]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	3318      	adds	r3, #24
 800b2ec:	2203      	movs	r2, #3
 800b2ee:	480f      	ldr	r0, [pc, #60]	@ (800b32c <_ZN18CControladorRampas19MemoriaInicialidadaEv+0x50>)
 800b2f0:	f7f6 fc1a 	bl	8001b28 <_ZN6CEprom8LeeBytesEiiPh>
	//char key[] = "OSC";
	for (int i = 0; i < 3; i++)
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	60fb      	str	r3, [r7, #12]
 800b2f8:	e010      	b.n	800b31c <_ZN18CControladorRampas19MemoriaInicialidadaEv+0x40>
	{
		if (Key[i] != KEY[i])
 800b2fa:	687a      	ldr	r2, [r7, #4]
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	4413      	add	r3, r2
 800b300:	3318      	adds	r3, #24
 800b302:	781a      	ldrb	r2, [r3, #0]
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6859      	ldr	r1, [r3, #4]
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	440b      	add	r3, r1
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	429a      	cmp	r2, r3
 800b310:	d001      	beq.n	800b316 <_ZN18CControladorRampas19MemoriaInicialidadaEv+0x3a>
		{
			return false;
 800b312:	2300      	movs	r3, #0
 800b314:	e006      	b.n	800b324 <_ZN18CControladorRampas19MemoriaInicialidadaEv+0x48>
	for (int i = 0; i < 3; i++)
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	3301      	adds	r3, #1
 800b31a:	60fb      	str	r3, [r7, #12]
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2b02      	cmp	r3, #2
 800b320:	ddeb      	ble.n	800b2fa <_ZN18CControladorRampas19MemoriaInicialidadaEv+0x1e>
		}
	}
	return true;
 800b322:	2301      	movs	r3, #1
}
 800b324:	4618      	mov	r0, r3
 800b326:	3710      	adds	r7, #16
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}
 800b32c:	2000031c 	.word	0x2000031c

0800b330 <_ZN18CControladorRampas17InicializaMemoriaEv>:

void CControladorRampas::InicializaMemoria()
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b094      	sub	sp, #80	@ 0x50
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
	CRampa rampa;
 800b338:	f107 0314 	add.w	r3, r7, #20
 800b33c:	4618      	mov	r0, r3
 800b33e:	f000 fbe9 	bl	800bb14 <_ZN6CRampaC1Ev>
	CPaso paso;
 800b342:	f107 0308 	add.w	r3, r7, #8
 800b346:	4618      	mov	r0, r3
 800b348:	f000 fba2 	bl	800ba90 <_ZN5CPasoC1Ev>
	int direccionRampa;
	int direccionPaso;
	int progreso = 0;
 800b34c:	2300      	movs	r3, #0
 800b34e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int numeroMaximoPasos=ControladorPasosRampa.GetNumeroMaximoPasos();
 800b350:	4854      	ldr	r0, [pc, #336]	@ (800b4a4 <_ZN18CControladorRampas17InicializaMemoriaEv+0x174>)
 800b352:	f7ff fdd2 	bl	800aefa <_ZN22CControladorPasosRampa20GetNumeroMaximoPasosEv>
 800b356:	6438      	str	r0, [r7, #64]	@ 0x40
	int direccionTablaPasos=ControladorPasosRampa.GetDireccionTablaPasos();
 800b358:	4852      	ldr	r0, [pc, #328]	@ (800b4a4 <_ZN18CControladorRampas17InicializaMemoriaEv+0x174>)
 800b35a:	f7ff fdda 	bl	800af12 <_ZN22CControladorPasosRampa22GetDireccionTablaPasosEv>
 800b35e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	int bytesPaso=ControladorPasosRampa.GetBytesXPaso();
 800b360:	4850      	ldr	r0, [pc, #320]	@ (800b4a4 <_ZN18CControladorRampas17InicializaMemoriaEv+0x174>)
 800b362:	f7ff fdbe 	bl	800aee2 <_ZN22CControladorPasosRampa13GetBytesXPasoEv>
 800b366:	63b8      	str	r0, [r7, #56]	@ 0x38
	int maximo = NUMERO_MAXIMO_RAMPAS + numeroMaximoPasos;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	689b      	ldr	r3, [r3, #8]
 800b36c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b36e:	4413      	add	r3, r2
 800b370:	637b      	str	r3, [r7, #52]	@ 0x34

	if (ControlProgreso != NULL)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b376:	2b00      	cmp	r3, #0
 800b378:	d009      	beq.n	800b38e <_ZN18CControladorRampas17InicializaMemoriaEv+0x5e>
		ControlProgreso->OnMensaje((char*) "Iniciando memoria");
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	330c      	adds	r3, #12
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	4947      	ldr	r1, [pc, #284]	@ (800b4a8 <_ZN18CControladorRampas17InicializaMemoriaEv+0x178>)
 800b38a:	4610      	mov	r0, r2
 800b38c:	4798      	blx	r3

	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800b38e:	2300      	movs	r3, #0
 800b390:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b392:	e023      	b.n	800b3dc <_ZN18CControladorRampas17InicializaMemoriaEv+0xac>
	{
		if (ControlProgreso != NULL)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d00c      	beq.n	800b3b6 <_ZN18CControladorRampas17InicializaMemoriaEv+0x86>
		{
			ControlProgreso->OnProgreso(progreso, maximo);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	3308      	adds	r3, #8
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b3ac:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b3ae:	4798      	blx	r3
			progreso++;
 800b3b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
		}
		direccionRampa = DireccionTablaRampas + (BytesRampa * i);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	695b      	ldr	r3, [r3, #20]
 800b3be:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800b3c0:	fb01 f303 	mul.w	r3, r1, r3
 800b3c4:	4413      	add	r3, r2
 800b3c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		GuardaRampaMemoria(direccionRampa, &rampa);
 800b3c8:	f107 0314 	add.w	r3, r7, #20
 800b3cc:	461a      	mov	r2, r3
 800b3ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f000 f9ad 	bl	800b730 <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa>
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800b3d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b3d8:	3301      	adds	r3, #1
 800b3da:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	689b      	ldr	r3, [r3, #8]
 800b3e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	dbd6      	blt.n	800b394 <_ZN18CControladorRampas17InicializaMemoriaEv+0x64>
	}

	for (int i = 0; i < numeroMaximoPasos; i++)
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3ea:	e021      	b.n	800b430 <_ZN18CControladorRampas17InicializaMemoriaEv+0x100>
	{
		if (ControlProgreso != NULL)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d00c      	beq.n	800b40e <_ZN18CControladorRampas17InicializaMemoriaEv+0xde>
		{
			ControlProgreso->OnProgreso(progreso, maximo);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	3308      	adds	r3, #8
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b404:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b406:	4798      	blx	r3
			progreso++;
 800b408:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b40a:	3301      	adds	r3, #1
 800b40c:	64fb      	str	r3, [r7, #76]	@ 0x4c
		}
		direccionPaso = direccionTablaPasos + (bytesPaso * i);
 800b40e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b410:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b412:	fb02 f303 	mul.w	r3, r2, r3
 800b416:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b418:	4413      	add	r3, r2
 800b41a:	633b      	str	r3, [r7, #48]	@ 0x30
		ControladorPasosRampa.GuardaPasoMemoria(direccionPaso,&paso);
 800b41c:	f107 0308 	add.w	r3, r7, #8
 800b420:	461a      	mov	r2, r3
 800b422:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b424:	481f      	ldr	r0, [pc, #124]	@ (800b4a4 <_ZN18CControladorRampas17InicializaMemoriaEv+0x174>)
 800b426:	f7ff fbef 	bl	800ac08 <_ZN22CControladorPasosRampa17GuardaPasoMemoriaEiP5CPaso>
	for (int i = 0; i < numeroMaximoPasos; i++)
 800b42a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b42c:	3301      	adds	r3, #1
 800b42e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b430:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b432:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b434:	429a      	cmp	r2, r3
 800b436:	dbd9      	blt.n	800b3ec <_ZN18CControladorRampas17InicializaMemoriaEv+0xbc>
	}
	UltimoID_Rampa = 0;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2200      	movs	r2, #0
 800b43c:	849a      	strh	r2, [r3, #36]	@ 0x24
	Eprom.GuardaBytes(DireccionUltimoID_Rampa, 2, (uint8_t*)&UltimoID_Rampa);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6a1b      	ldr	r3, [r3, #32]
 800b442:	b299      	uxth	r1, r3
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	3324      	adds	r3, #36	@ 0x24
 800b448:	2202      	movs	r2, #2
 800b44a:	4818      	ldr	r0, [pc, #96]	@ (800b4ac <_ZN18CControladorRampas17InicializaMemoriaEv+0x17c>)
 800b44c:	f7f6 fb1e 	bl	8001a8c <_ZN6CEprom11GuardaBytesEttPh>
	ControladorPasosRampa.SetUltimoIDPado(0);
 800b450:	2100      	movs	r1, #0
 800b452:	4814      	ldr	r0, [pc, #80]	@ (800b4a4 <_ZN18CControladorRampas17InicializaMemoriaEv+0x174>)
 800b454:	f7ff fd6a 	bl	800af2c <_ZN22CControladorPasosRampa15SetUltimoIDPadoEh>
	Eprom.GuardaBytes(DireccionKey, 3,(uint8_t*) KEY);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	69db      	ldr	r3, [r3, #28]
 800b45c:	b299      	uxth	r1, r3
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	2203      	movs	r2, #3
 800b464:	4811      	ldr	r0, [pc, #68]	@ (800b4ac <_ZN18CControladorRampas17InicializaMemoriaEv+0x17c>)
 800b466:	f7f6 fb11 	bl	8001a8c <_ZN6CEprom11GuardaBytesEttPh>

	if (ControlProgreso != NULL)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d00b      	beq.n	800b48a <_ZN18CControladorRampas17InicializaMemoriaEv+0x15a>
	{
		ControlProgreso->OnFinProgreso();
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	3310      	adds	r3, #16
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	4610      	mov	r0, r2
 800b482:	4798      	blx	r3
		progreso++;
 800b484:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b486:	3301      	adds	r3, #1
 800b488:	64fb      	str	r3, [r7, #76]	@ 0x4c
	}

}
 800b48a:	f107 0308 	add.w	r3, r7, #8
 800b48e:	4618      	mov	r0, r3
 800b490:	f000 fb20 	bl	800bad4 <_ZN5CPasoD1Ev>
 800b494:	f107 0314 	add.w	r3, r7, #20
 800b498:	4618      	mov	r0, r3
 800b49a:	f000 fb61 	bl	800bb60 <_ZN6CRampaD1Ev>
 800b49e:	3750      	adds	r7, #80	@ 0x50
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	200001f8 	.word	0x200001f8
 800b4a8:	08014ca8 	.word	0x08014ca8
 800b4ac:	2000031c 	.word	0x2000031c

0800b4b0 <_ZN18CControladorRampas18SetControlProgresoEP16CControlProgreso>:

void CControladorRampas::SetControlProgreso(CControlProgreso *controlProgreso)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b083      	sub	sp, #12
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
 800b4b8:	6039      	str	r1, [r7, #0]
	ControlProgreso = controlProgreso;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	683a      	ldr	r2, [r7, #0]
 800b4be:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800b4c0:	bf00      	nop
 800b4c2:	370c      	adds	r7, #12
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr

0800b4cc <_ZN18CControladorRampas16DameNumeroRampasEv>:

int CControladorRampas::DameNumeroRampas()
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b08a      	sub	sp, #40	@ 0x28
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
	if (TotalRampas != -1)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	68db      	ldr	r3, [r3, #12]
 800b4d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4dc:	d002      	beq.n	800b4e4 <_ZN18CControladorRampas16DameNumeroRampasEv+0x18>
		return TotalRampas;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	68db      	ldr	r3, [r3, #12]
 800b4e2:	e02c      	b.n	800b53e <_ZN18CControladorRampas16DameNumeroRampasEv+0x72>
	TotalRampas = 0;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	60da      	str	r2, [r3, #12]
	//recorro toda la tabla de rampas y cuento las que estan activas
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4ee:	e01f      	b.n	800b530 <_ZN18CControladorRampas16DameNumeroRampasEv+0x64>
	{
		int direccionRampa = DireccionTablaRampas + (BytesRampa * i);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	695b      	ldr	r3, [r3, #20]
 800b4f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b4fa:	fb01 f303 	mul.w	r3, r1, r3
 800b4fe:	4413      	add	r3, r2
 800b500:	623b      	str	r3, [r7, #32]
		//me traigo los datos de la rampa de la memoria
		CRampa rampa=LeeRampaMemoria(direccionRampa);
 800b502:	f107 0308 	add.w	r3, r7, #8
 800b506:	6a3a      	ldr	r2, [r7, #32]
 800b508:	6879      	ldr	r1, [r7, #4]
 800b50a:	4618      	mov	r0, r3
 800b50c:	f000 f8c4 	bl	800b698 <_ZN18CControladorRampas15LeeRampaMemoriaEi>
		if (rampa.Ocupado == true)
 800b510:	7b3b      	ldrb	r3, [r7, #12]
 800b512:	2b01      	cmp	r3, #1
 800b514:	d104      	bne.n	800b520 <_ZN18CControladorRampas16DameNumeroRampasEv+0x54>
			TotalRampas++;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	68db      	ldr	r3, [r3, #12]
 800b51a:	1c5a      	adds	r2, r3, #1
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	60da      	str	r2, [r3, #12]
	}
 800b520:	f107 0308 	add.w	r3, r7, #8
 800b524:	4618      	mov	r0, r3
 800b526:	f000 fb1b 	bl	800bb60 <_ZN6CRampaD1Ev>
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800b52a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b52c:	3301      	adds	r3, #1
 800b52e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	689b      	ldr	r3, [r3, #8]
 800b534:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b536:	429a      	cmp	r2, r3
 800b538:	dbda      	blt.n	800b4f0 <_ZN18CControladorRampas16DameNumeroRampasEv+0x24>
	return TotalRampas;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	68db      	ldr	r3, [r3, #12]
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3728      	adds	r7, #40	@ 0x28
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}

0800b546 <_ZN18CControladorRampas9DameRampaEi>:

CRampa CControladorRampas::DameRampa(int id_Rampa)
{
 800b546:	b590      	push	{r4, r7, lr}
 800b548:	b095      	sub	sp, #84	@ 0x54
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	60f8      	str	r0, [r7, #12]
 800b54e:	60b9      	str	r1, [r7, #8]
 800b550:	607a      	str	r2, [r7, #4]

	int numeroRampa = 0;
 800b552:	2300      	movs	r3, #0
 800b554:	64fb      	str	r3, [r7, #76]	@ 0x4c
	//recorro toda la tabla de rampas y cuento las que estan activas
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800b556:	2300      	movs	r3, #0
 800b558:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b55a:	e02f      	b.n	800b5bc <_ZN18CControladorRampas9DameRampaEi+0x76>
	{
		int direccionRampa = DireccionTablaRampas + (BytesRampa * i);
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	695b      	ldr	r3, [r3, #20]
 800b564:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800b566:	fb01 f303 	mul.w	r3, r1, r3
 800b56a:	4413      	add	r3, r2
 800b56c:	647b      	str	r3, [r7, #68]	@ 0x44
		//me traigo los datos de la rampa de la memoria
		CRampa tmpRampa=LeeRampaMemoria(direccionRampa);
 800b56e:	f107 0314 	add.w	r3, r7, #20
 800b572:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b574:	68b9      	ldr	r1, [r7, #8]
 800b576:	4618      	mov	r0, r3
 800b578:	f000 f88e 	bl	800b698 <_ZN18CControladorRampas15LeeRampaMemoriaEi>
		if (tmpRampa.Ocupado == false)
 800b57c:	7e3b      	ldrb	r3, [r7, #24]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d101      	bne.n	800b586 <_ZN18CControladorRampas9DameRampaEi+0x40>
			continue;
 800b582:	2400      	movs	r4, #0
 800b584:	e010      	b.n	800b5a8 <_ZN18CControladorRampas9DameRampaEi+0x62>
		numeroRampa++;
 800b586:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b588:	3301      	adds	r3, #1
 800b58a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (tmpRampa.ID_RAMPA != id_Rampa)
 800b58c:	8b7b      	ldrh	r3, [r7, #26]
 800b58e:	461a      	mov	r2, r3
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	4293      	cmp	r3, r2
 800b594:	d001      	beq.n	800b59a <_ZN18CControladorRampas9DameRampaEi+0x54>
			continue;
 800b596:	2400      	movs	r4, #0
 800b598:	e006      	b.n	800b5a8 <_ZN18CControladorRampas9DameRampaEi+0x62>
		return tmpRampa;
 800b59a:	f107 0314 	add.w	r3, r7, #20
 800b59e:	4619      	mov	r1, r3
 800b5a0:	68f8      	ldr	r0, [r7, #12]
 800b5a2:	f000 fb1d 	bl	800bbe0 <_ZN6CRampaC1EOS_>
 800b5a6:	2401      	movs	r4, #1
	}
 800b5a8:	f107 0314 	add.w	r3, r7, #20
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f000 fad7 	bl	800bb60 <_ZN6CRampaD1Ev>
 800b5b2:	2c00      	cmp	r4, #0
 800b5b4:	d117      	bne.n	800b5e6 <_ZN18CControladorRampas9DameRampaEi+0xa0>
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800b5b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	689b      	ldr	r3, [r3, #8]
 800b5c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	dbca      	blt.n	800b55c <_ZN18CControladorRampas9DameRampaEi+0x16>
	CRampa tmpRampa2;
 800b5c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f000 faa2 	bl	800bb14 <_ZN6CRampaC1Ev>
	return tmpRampa2;
 800b5d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	68f8      	ldr	r0, [r7, #12]
 800b5d8:	f000 fb02 	bl	800bbe0 <_ZN6CRampaC1EOS_>
}
 800b5dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f000 fabd 	bl	800bb60 <_ZN6CRampaD1Ev>
 800b5e6:	68f8      	ldr	r0, [r7, #12]
 800b5e8:	3754      	adds	r7, #84	@ 0x54
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd90      	pop	{r4, r7, pc}

0800b5ee <_ZN18CControladorRampas15DameRampaNumeroEi>:
CRampa CControladorRampas::DameRampaNumero(int posicion)
{
 800b5ee:	b590      	push	{r4, r7, lr}
 800b5f0:	b095      	sub	sp, #84	@ 0x54
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	60f8      	str	r0, [r7, #12]
 800b5f6:	60b9      	str	r1, [r7, #8]
 800b5f8:	607a      	str	r2, [r7, #4]

	int numeroRampa = 0;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	//recorro toda la tabla de rampas y cuento las que estan activas
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800b5fe:	2300      	movs	r3, #0
 800b600:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b602:	e02f      	b.n	800b664 <_ZN18CControladorRampas15DameRampaNumeroEi+0x76>
	{
		int direccionRampa = DireccionTablaRampas + (BytesRampa * i);
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	695b      	ldr	r3, [r3, #20]
 800b60c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800b60e:	fb01 f303 	mul.w	r3, r1, r3
 800b612:	4413      	add	r3, r2
 800b614:	647b      	str	r3, [r7, #68]	@ 0x44
		//me traigo los datos de la rampa de la memoria
		CRampa tmpRampa=LeeRampaMemoria(direccionRampa);
 800b616:	f107 0314 	add.w	r3, r7, #20
 800b61a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b61c:	68b9      	ldr	r1, [r7, #8]
 800b61e:	4618      	mov	r0, r3
 800b620:	f000 f83a 	bl	800b698 <_ZN18CControladorRampas15LeeRampaMemoriaEi>
		if (tmpRampa.Ocupado != true)
 800b624:	7e3b      	ldrb	r3, [r7, #24]
 800b626:	2b01      	cmp	r3, #1
 800b628:	d001      	beq.n	800b62e <_ZN18CControladorRampas15DameRampaNumeroEi+0x40>
			continue;
 800b62a:	2400      	movs	r4, #0
 800b62c:	e010      	b.n	800b650 <_ZN18CControladorRampas15DameRampaNumeroEi+0x62>
		numeroRampa++;
 800b62e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b630:	3301      	adds	r3, #1
 800b632:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (numeroRampa-1 != posicion)
 800b634:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b636:	3b01      	subs	r3, #1
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	429a      	cmp	r2, r3
 800b63c:	d001      	beq.n	800b642 <_ZN18CControladorRampas15DameRampaNumeroEi+0x54>
			continue;
 800b63e:	2400      	movs	r4, #0
 800b640:	e006      	b.n	800b650 <_ZN18CControladorRampas15DameRampaNumeroEi+0x62>
		return tmpRampa;
 800b642:	f107 0314 	add.w	r3, r7, #20
 800b646:	4619      	mov	r1, r3
 800b648:	68f8      	ldr	r0, [r7, #12]
 800b64a:	f000 fac9 	bl	800bbe0 <_ZN6CRampaC1EOS_>
 800b64e:	2401      	movs	r4, #1
	}
 800b650:	f107 0314 	add.w	r3, r7, #20
 800b654:	4618      	mov	r0, r3
 800b656:	f000 fa83 	bl	800bb60 <_ZN6CRampaD1Ev>
 800b65a:	2c00      	cmp	r4, #0
 800b65c:	d117      	bne.n	800b68e <_ZN18CControladorRampas15DameRampaNumeroEi+0xa0>
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800b65e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b660:	3301      	adds	r3, #1
 800b662:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	689b      	ldr	r3, [r3, #8]
 800b668:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b66a:	429a      	cmp	r2, r3
 800b66c:	dbca      	blt.n	800b604 <_ZN18CControladorRampas15DameRampaNumeroEi+0x16>
	CRampa tmpRampa2;
 800b66e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b672:	4618      	mov	r0, r3
 800b674:	f000 fa4e 	bl	800bb14 <_ZN6CRampaC1Ev>
	return tmpRampa2;
 800b678:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b67c:	4619      	mov	r1, r3
 800b67e:	68f8      	ldr	r0, [r7, #12]
 800b680:	f000 faae 	bl	800bbe0 <_ZN6CRampaC1EOS_>
}
 800b684:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b688:	4618      	mov	r0, r3
 800b68a:	f000 fa69 	bl	800bb60 <_ZN6CRampaD1Ev>
 800b68e:	68f8      	ldr	r0, [r7, #12]
 800b690:	3754      	adds	r7, #84	@ 0x54
 800b692:	46bd      	mov	sp, r7
 800b694:	bd90      	pop	{r4, r7, pc}
	...

0800b698 <_ZN18CControladorRampas15LeeRampaMemoriaEi>:
CRampa CControladorRampas::LeeRampaMemoria(int direccion)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b08a      	sub	sp, #40	@ 0x28
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	60f8      	str	r0, [r7, #12]
 800b6a0:	60b9      	str	r1, [r7, #8]
 800b6a2:	607a      	str	r2, [r7, #4]
	 * -----------------------------------------
	 */
	uint8_t ocupado;
	uint16_t id_rampa;
	char nombre[20];
	CRampa rampa;
 800b6a4:	68f8      	ldr	r0, [r7, #12]
 800b6a6:	f000 fa35 	bl	800bb14 <_ZN6CRampaC1Ev>
	//leo la bandera de ocupado
	Eprom.LeeBytes(direccion, 1, &ocupado);
 800b6aa:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	6879      	ldr	r1, [r7, #4]
 800b6b2:	481e      	ldr	r0, [pc, #120]	@ (800b72c <_ZN18CControladorRampas15LeeRampaMemoriaEi+0x94>)
 800b6b4:	f7f6 fa38 	bl	8001b28 <_ZN6CEprom8LeeBytesEiiPh>
	Eprom.LeeBytes(direccion, 1, &ocupado);
 800b6b8:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 800b6bc:	2201      	movs	r2, #1
 800b6be:	6879      	ldr	r1, [r7, #4]
 800b6c0:	481a      	ldr	r0, [pc, #104]	@ (800b72c <_ZN18CControladorRampas15LeeRampaMemoriaEi+0x94>)
 800b6c2:	f7f6 fa31 	bl	8001b28 <_ZN6CEprom8LeeBytesEiiPh>
	rampa.Ocupado=ocupado;
 800b6c6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	711a      	strb	r2, [r3, #4]
	//leo el ID_RAMPA
	Eprom.LeeBytes(direccion+1, 2, (uint8_t*)&id_rampa);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	1c59      	adds	r1, r3, #1
 800b6d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b6d6:	2202      	movs	r2, #2
 800b6d8:	4814      	ldr	r0, [pc, #80]	@ (800b72c <_ZN18CControladorRampas15LeeRampaMemoriaEi+0x94>)
 800b6da:	f7f6 fa25 	bl	8001b28 <_ZN6CEprom8LeeBytesEiiPh>
	Eprom.LeeBytes(direccion+1, 2, (uint8_t*)&id_rampa);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	1c59      	adds	r1, r3, #1
 800b6e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b6e6:	2202      	movs	r2, #2
 800b6e8:	4810      	ldr	r0, [pc, #64]	@ (800b72c <_ZN18CControladorRampas15LeeRampaMemoriaEi+0x94>)
 800b6ea:	f7f6 fa1d 	bl	8001b28 <_ZN6CEprom8LeeBytesEiiPh>
	rampa.ID_RAMPA=id_rampa;
 800b6ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	80da      	strh	r2, [r3, #6]
	//leo el nombre
	Eprom.LeeBytes(direccion+3, 15, (uint8_t*)nombre);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	1cd9      	adds	r1, r3, #3
 800b6f8:	f107 0310 	add.w	r3, r7, #16
 800b6fc:	220f      	movs	r2, #15
 800b6fe:	480b      	ldr	r0, [pc, #44]	@ (800b72c <_ZN18CControladorRampas15LeeRampaMemoriaEi+0x94>)
 800b700:	f7f6 fa12 	bl	8001b28 <_ZN6CEprom8LeeBytesEiiPh>
	Eprom.LeeBytes(direccion+3, 15, (uint8_t*)nombre);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	1cd9      	adds	r1, r3, #3
 800b708:	f107 0310 	add.w	r3, r7, #16
 800b70c:	220f      	movs	r2, #15
 800b70e:	4807      	ldr	r0, [pc, #28]	@ (800b72c <_ZN18CControladorRampas15LeeRampaMemoriaEi+0x94>)
 800b710:	f7f6 fa0a 	bl	8001b28 <_ZN6CEprom8LeeBytesEiiPh>
	rampa.SetNombre(nombre);
 800b714:	f107 0310 	add.w	r3, r7, #16
 800b718:	4619      	mov	r1, r3
 800b71a:	68f8      	ldr	r0, [r7, #12]
 800b71c:	f000 fa40 	bl	800bba0 <_ZN6CRampa9SetNombreEPc>
	return rampa;
 800b720:	bf00      	nop

}
 800b722:	68f8      	ldr	r0, [r7, #12]
 800b724:	3728      	adds	r7, #40	@ 0x28
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
 800b72a:	bf00      	nop
 800b72c:	2000031c 	.word	0x2000031c

0800b730 <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa>:
void CControladorRampas::GuardaRampaMemoria(int direccion, CRampa *rampa)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b094      	sub	sp, #80	@ 0x50
 800b734:	af00      	add	r7, sp, #0
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	60b9      	str	r1, [r7, #8]
 800b73a:	607a      	str	r2, [r7, #4]
	//guardo la bandera de ocupado
	uint8_t ocupado;
	uint16_t id_rampa;
	char nombre[20];
	uint8_t tmp[30];
	ocupado=rampa->Ocupado;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	791b      	ldrb	r3, [r3, #4]
 800b740:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	id_rampa=rampa->ID_RAMPA;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	88db      	ldrh	r3, [r3, #6]
 800b748:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
	strcpy(nombre,rampa->Nombre);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f103 0208 	add.w	r2, r3, #8
 800b752:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800b756:	4611      	mov	r1, r2
 800b758:	4618      	mov	r0, r3
 800b75a:	f007 f8f4 	bl	8012946 <strcpy>
	Eprom.GuardaBytes(direccion, 1, &ocupado);
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	b299      	uxth	r1, r3
 800b762:	f107 034b 	add.w	r3, r7, #75	@ 0x4b
 800b766:	2201      	movs	r2, #1
 800b768:	4827      	ldr	r0, [pc, #156]	@ (800b808 <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa+0xd8>)
 800b76a:	f7f6 f98f 	bl	8001a8c <_ZN6CEprom11GuardaBytesEttPh>
	//guardo el ID_RAMPA
	Eprom.GuardaBytes(direccion+1, 2, (uint8_t*)&id_rampa);
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	b29b      	uxth	r3, r3
 800b772:	3301      	adds	r3, #1
 800b774:	b299      	uxth	r1, r3
 800b776:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800b77a:	2202      	movs	r2, #2
 800b77c:	4822      	ldr	r0, [pc, #136]	@ (800b808 <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa+0xd8>)
 800b77e:	f7f6 f985 	bl	8001a8c <_ZN6CEprom11GuardaBytesEttPh>
	//guardo el nombre
	Eprom.GuardaBytes(direccion+3, 15, (uint8_t*)nombre);
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	b29b      	uxth	r3, r3
 800b786:	3303      	adds	r3, #3
 800b788:	b299      	uxth	r1, r3
 800b78a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800b78e:	220f      	movs	r2, #15
 800b790:	481d      	ldr	r0, [pc, #116]	@ (800b808 <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa+0xd8>)
 800b792:	f7f6 f97b 	bl	8001a8c <_ZN6CEprom11GuardaBytesEttPh>

	id_rampa=-1;
 800b796:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b79a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
	ocupado=-1;
 800b79e:	23ff      	movs	r3, #255	@ 0xff
 800b7a0:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	for(int i=0;i<15;i++)
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b7a8:	e008      	b.n	800b7bc <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa+0x8c>
		nombre[i]='\0';
 800b7aa:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800b7ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7b0:	4413      	add	r3, r2
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<15;i++)
 800b7b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b7bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7be:	2b0e      	cmp	r3, #14
 800b7c0:	ddf3      	ble.n	800b7aa <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa+0x7a>

	Eprom.LeeBytes(direccion+3, 15, (uint8_t*)nombre);
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	1cd9      	adds	r1, r3, #3
 800b7c6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800b7ca:	220f      	movs	r2, #15
 800b7cc:	480e      	ldr	r0, [pc, #56]	@ (800b808 <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa+0xd8>)
 800b7ce:	f7f6 f9ab 	bl	8001b28 <_ZN6CEprom8LeeBytesEiiPh>
	Eprom.LeeBytes(direccion+1, 2, (uint8_t*)&id_rampa);
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	1c59      	adds	r1, r3, #1
 800b7d6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800b7da:	2202      	movs	r2, #2
 800b7dc:	480a      	ldr	r0, [pc, #40]	@ (800b808 <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa+0xd8>)
 800b7de:	f7f6 f9a3 	bl	8001b28 <_ZN6CEprom8LeeBytesEiiPh>
	Eprom.LeeBytes(direccion, 1, &ocupado);
 800b7e2:	f107 034b 	add.w	r3, r7, #75	@ 0x4b
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	68b9      	ldr	r1, [r7, #8]
 800b7ea:	4807      	ldr	r0, [pc, #28]	@ (800b808 <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa+0xd8>)
 800b7ec:	f7f6 f99c 	bl	8001b28 <_ZN6CEprom8LeeBytesEiiPh>
	Eprom.LeeBytes(direccion, 18, tmp);
 800b7f0:	f107 0314 	add.w	r3, r7, #20
 800b7f4:	2212      	movs	r2, #18
 800b7f6:	68b9      	ldr	r1, [r7, #8]
 800b7f8:	4803      	ldr	r0, [pc, #12]	@ (800b808 <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa+0xd8>)
 800b7fa:	f7f6 f995 	bl	8001b28 <_ZN6CEprom8LeeBytesEiiPh>
}
 800b7fe:	bf00      	nop
 800b800:	3750      	adds	r7, #80	@ 0x50
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}
 800b806:	bf00      	nop
 800b808:	2000031c 	.word	0x2000031c

0800b80c <_ZN18CControladorRampas11AgregaRampaEPc>:
CRampa CControladorRampas::AgregaRampa(char *nombre)
{
 800b80c:	b590      	push	{r4, r7, lr}
 800b80e:	b099      	sub	sp, #100	@ 0x64
 800b810:	af00      	add	r7, sp, #0
 800b812:	60f8      	str	r0, [r7, #12]
 800b814:	60b9      	str	r1, [r7, #8]
 800b816:	607a      	str	r2, [r7, #4]
	//busco la primer ubicacion vacia para almacear la rampa
	//recorro toda la tabla de rampas y cuento las que estan activas
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800b818:	2300      	movs	r3, #0
 800b81a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b81c:	e04d      	b.n	800b8ba <_ZN18CControladorRampas11AgregaRampaEPc+0xae>
	{
		int direccionRampa = DireccionTablaRampas + (BytesRampa * i);
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	695b      	ldr	r3, [r3, #20]
 800b826:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800b828:	fb01 f303 	mul.w	r3, r1, r3
 800b82c:	4413      	add	r3, r2
 800b82e:	65bb      	str	r3, [r7, #88]	@ 0x58
		//me traigo los datos de la rampa de la memoria
		CRampa tmpRampa=LeeRampaMemoria(direccionRampa);
 800b830:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b834:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b836:	68b9      	ldr	r1, [r7, #8]
 800b838:	4618      	mov	r0, r3
 800b83a:	f7ff ff2d 	bl	800b698 <_ZN18CControladorRampas15LeeRampaMemoriaEi>
		if (tmpRampa.Ocupado == 0)
 800b83e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b842:	2b00      	cmp	r3, #0
 800b844:	d12e      	bne.n	800b8a4 <_ZN18CControladorRampas11AgregaRampaEPc+0x98>
		{
			tmpRampa.Ocupado = 1;
 800b846:	2301      	movs	r3, #1
 800b848:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
			tmpRampa.ID_RAMPA = DameSiguienteID_Rampa();
 800b84c:	68b8      	ldr	r0, [r7, #8]
 800b84e:	f000 f8e1 	bl	800ba14 <_ZN18CControladorRampas21DameSiguienteID_RampaEv>
 800b852:	4603      	mov	r3, r0
 800b854:	b29b      	uxth	r3, r3
 800b856:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			tmpRampa.SetNombre(nombre);
 800b858:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b85c:	6879      	ldr	r1, [r7, #4]
 800b85e:	4618      	mov	r0, r3
 800b860:	f000 f99e 	bl	800bba0 <_ZN6CRampa9SetNombreEPc>
			TotalRampas++;
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	68db      	ldr	r3, [r3, #12]
 800b868:	1c5a      	adds	r2, r3, #1
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	60da      	str	r2, [r3, #12]
			GuardaRampaMemoria(direccionRampa,&tmpRampa);
 800b86e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b872:	461a      	mov	r2, r3
 800b874:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b876:	68b8      	ldr	r0, [r7, #8]
 800b878:	f7ff ff5a 	bl	800b730 <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa>
			CRampa rampa2=LeeRampaMemoria(direccionRampa);
 800b87c:	f107 0310 	add.w	r3, r7, #16
 800b880:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b882:	68b9      	ldr	r1, [r7, #8]
 800b884:	4618      	mov	r0, r3
 800b886:	f7ff ff07 	bl	800b698 <_ZN18CControladorRampas15LeeRampaMemoriaEi>
			return tmpRampa;
 800b88a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b88e:	4619      	mov	r1, r3
 800b890:	68f8      	ldr	r0, [r7, #12]
 800b892:	f000 f9a5 	bl	800bbe0 <_ZN6CRampaC1EOS_>
		}
 800b896:	f107 0310 	add.w	r3, r7, #16
 800b89a:	4618      	mov	r0, r3
 800b89c:	f000 f960 	bl	800bb60 <_ZN6CRampaD1Ev>
 800b8a0:	2400      	movs	r4, #0
 800b8a2:	e000      	b.n	800b8a6 <_ZN18CControladorRampas11AgregaRampaEPc+0x9a>
	}
 800b8a4:	2401      	movs	r4, #1
 800b8a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f000 f958 	bl	800bb60 <_ZN6CRampaD1Ev>
 800b8b0:	2c01      	cmp	r4, #1
 800b8b2:	d117      	bne.n	800b8e4 <_ZN18CControladorRampas11AgregaRampaEPc+0xd8>
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800b8b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	689b      	ldr	r3, [r3, #8]
 800b8be:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b8c0:	429a      	cmp	r2, r3
 800b8c2:	dbac      	blt.n	800b81e <_ZN18CControladorRampas11AgregaRampaEPc+0x12>
	CRampa tmpRampa2;
 800b8c4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f000 f923 	bl	800bb14 <_ZN6CRampaC1Ev>
	return tmpRampa2;
 800b8ce:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	68f8      	ldr	r0, [r7, #12]
 800b8d6:	f000 f983 	bl	800bbe0 <_ZN6CRampaC1EOS_>
}
 800b8da:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f000 f93e 	bl	800bb60 <_ZN6CRampaD1Ev>
 800b8e4:	68f8      	ldr	r0, [r7, #12]
 800b8e6:	3764      	adds	r7, #100	@ 0x64
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd90      	pop	{r4, r7, pc}

0800b8ec <_ZN18CControladorRampas14ActualizaRampaEiPc>:

bool CControladorRampas::ActualizaRampa(int ID_Rampa, char *nombre)
{
 800b8ec:	b5b0      	push	{r4, r5, r7, lr}
 800b8ee:	b08c      	sub	sp, #48	@ 0x30
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	60f8      	str	r0, [r7, #12]
 800b8f4:	60b9      	str	r1, [r7, #8]
 800b8f6:	607a      	str	r2, [r7, #4]
 800b8f8:	2400      	movs	r4, #0
	//recorro toda la tabla de rampas y cuento las que estan activas
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b8fe:	e031      	b.n	800b964 <_ZN18CControladorRampas14ActualizaRampaEiPc+0x78>
	{
		int direccionRampa = DireccionTablaRampas + (BytesRampa * i);
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	695b      	ldr	r3, [r3, #20]
 800b908:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b90a:	fb01 f303 	mul.w	r3, r1, r3
 800b90e:	4413      	add	r3, r2
 800b910:	62bb      	str	r3, [r7, #40]	@ 0x28
		//me traigo los datos de la rampa de la memoria
		CRampa tmpRampa=LeeRampaMemoria(direccionRampa);
 800b912:	f107 0310 	add.w	r3, r7, #16
 800b916:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b918:	68f9      	ldr	r1, [r7, #12]
 800b91a:	4618      	mov	r0, r3
 800b91c:	f7ff febc 	bl	800b698 <_ZN18CControladorRampas15LeeRampaMemoriaEi>
		if (tmpRampa.ID_RAMPA == ID_Rampa)
 800b920:	8afb      	ldrh	r3, [r7, #22]
 800b922:	461a      	mov	r2, r3
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	4293      	cmp	r3, r2
 800b928:	d111      	bne.n	800b94e <_ZN18CControladorRampas14ActualizaRampaEiPc+0x62>
		{
			tmpRampa.Ocupado = 1;
 800b92a:	2301      	movs	r3, #1
 800b92c:	753b      	strb	r3, [r7, #20]
			tmpRampa.SetNombre(nombre);
 800b92e:	f107 0310 	add.w	r3, r7, #16
 800b932:	6879      	ldr	r1, [r7, #4]
 800b934:	4618      	mov	r0, r3
 800b936:	f000 f933 	bl	800bba0 <_ZN6CRampa9SetNombreEPc>
			GuardaRampaMemoria(direccionRampa,&tmpRampa);
 800b93a:	f107 0310 	add.w	r3, r7, #16
 800b93e:	461a      	mov	r2, r3
 800b940:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b942:	68f8      	ldr	r0, [r7, #12]
 800b944:	f7ff fef4 	bl	800b730 <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa>
			return true;
 800b948:	2401      	movs	r4, #1
 800b94a:	2500      	movs	r5, #0
 800b94c:	e000      	b.n	800b950 <_ZN18CControladorRampas14ActualizaRampaEiPc+0x64>
		}
	}
 800b94e:	2501      	movs	r5, #1
 800b950:	f107 0310 	add.w	r3, r7, #16
 800b954:	4618      	mov	r0, r3
 800b956:	f000 f903 	bl	800bb60 <_ZN6CRampaD1Ev>
 800b95a:	2d01      	cmp	r5, #1
 800b95c:	d108      	bne.n	800b970 <_ZN18CControladorRampas14ActualizaRampaEiPc+0x84>
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800b95e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b960:	3301      	adds	r3, #1
 800b962:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	689b      	ldr	r3, [r3, #8]
 800b968:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b96a:	429a      	cmp	r2, r3
 800b96c:	dbc8      	blt.n	800b900 <_ZN18CControladorRampas14ActualizaRampaEiPc+0x14>
	return false;
 800b96e:	2400      	movs	r4, #0
}
 800b970:	4623      	mov	r3, r4
 800b972:	4618      	mov	r0, r3
 800b974:	3730      	adds	r7, #48	@ 0x30
 800b976:	46bd      	mov	sp, r7
 800b978:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b97c <_ZN18CControladorRampas12EliminaRampaEi>:

bool CControladorRampas::EliminaRampa(int ID_Rampa)
{
 800b97c:	b5b0      	push	{r4, r5, r7, lr}
 800b97e:	b08a      	sub	sp, #40	@ 0x28
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
 800b984:	6039      	str	r1, [r7, #0]
 800b986:	2500      	movs	r5, #0
	//recorro toda la tabla de rampas y cuento las que estan activas
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800b988:	2300      	movs	r3, #0
 800b98a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b98c:	e035      	b.n	800b9fa <_ZN18CControladorRampas12EliminaRampaEi+0x7e>
	{
		int direccionRampa = DireccionTablaRampas + (BytesRampa * i);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	695b      	ldr	r3, [r3, #20]
 800b996:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b998:	fb01 f303 	mul.w	r3, r1, r3
 800b99c:	4413      	add	r3, r2
 800b99e:	623b      	str	r3, [r7, #32]
		//me traigo los datos de la rampa de la memoria
		CRampa tmpRampa=LeeRampaMemoria(direccionRampa);
 800b9a0:	f107 0308 	add.w	r3, r7, #8
 800b9a4:	6a3a      	ldr	r2, [r7, #32]
 800b9a6:	6879      	ldr	r1, [r7, #4]
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f7ff fe75 	bl	800b698 <_ZN18CControladorRampas15LeeRampaMemoriaEi>
		if (tmpRampa.ID_RAMPA == ID_Rampa)
 800b9ae:	89fb      	ldrh	r3, [r7, #14]
 800b9b0:	461a      	mov	r2, r3
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d115      	bne.n	800b9e4 <_ZN18CControladorRampas12EliminaRampaEi+0x68>
		{
			tmpRampa.Ocupado = 0;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	733b      	strb	r3, [r7, #12]
			GuardaRampaMemoria(direccionRampa,&tmpRampa);
 800b9bc:	f107 0308 	add.w	r3, r7, #8
 800b9c0:	461a      	mov	r2, r3
 800b9c2:	6a39      	ldr	r1, [r7, #32]
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f7ff feb3 	bl	800b730 <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa>
			//Eprom.GuardaBytes(direccionRampa, BytesRampa,(uint8_t*) &tmpRampa);
			TotalRampas--;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	68db      	ldr	r3, [r3, #12]
 800b9ce:	1e5a      	subs	r2, r3, #1
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	60da      	str	r2, [r3, #12]
			return ControladorPasosRampa.EliminaPasosRampa(ID_Rampa);
 800b9d4:	6839      	ldr	r1, [r7, #0]
 800b9d6:	480e      	ldr	r0, [pc, #56]	@ (800ba10 <_ZN18CControladorRampas12EliminaRampaEi+0x94>)
 800b9d8:	f7ff f898 	bl	800ab0c <_ZN22CControladorPasosRampa17EliminaPasosRampaEi>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	461d      	mov	r5, r3
 800b9e0:	2400      	movs	r4, #0
 800b9e2:	e000      	b.n	800b9e6 <_ZN18CControladorRampas12EliminaRampaEi+0x6a>
		}
	}
 800b9e4:	2401      	movs	r4, #1
 800b9e6:	f107 0308 	add.w	r3, r7, #8
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f000 f8b8 	bl	800bb60 <_ZN6CRampaD1Ev>
 800b9f0:	2c01      	cmp	r4, #1
 800b9f2:	d108      	bne.n	800ba06 <_ZN18CControladorRampas12EliminaRampaEi+0x8a>
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800b9f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	689b      	ldr	r3, [r3, #8]
 800b9fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba00:	429a      	cmp	r2, r3
 800ba02:	dbc4      	blt.n	800b98e <_ZN18CControladorRampas12EliminaRampaEi+0x12>
	return false;
 800ba04:	2500      	movs	r5, #0
}
 800ba06:	462b      	mov	r3, r5
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3728      	adds	r7, #40	@ 0x28
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bdb0      	pop	{r4, r5, r7, pc}
 800ba10:	200001f8 	.word	0x200001f8

0800ba14 <_ZN18CControladorRampas21DameSiguienteID_RampaEv>:
			return;
		}
	}
}
int CControladorRampas::DameSiguienteID_Rampa()
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b08a      	sub	sp, #40	@ 0x28
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
	UltimoID_Rampa=0;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	849a      	strh	r2, [r3, #36]	@ 0x24
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800ba22:	2300      	movs	r3, #0
 800ba24:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba26:	e022      	b.n	800ba6e <_ZN18CControladorRampas21DameSiguienteID_RampaEv+0x5a>
	{
		int direccionRampa = DireccionTablaRampas + (BytesRampa * i);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	695b      	ldr	r3, [r3, #20]
 800ba30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ba32:	fb01 f303 	mul.w	r3, r1, r3
 800ba36:	4413      	add	r3, r2
 800ba38:	623b      	str	r3, [r7, #32]
		//me traigo los datos de la rampa de la memoria
		CRampa tmpRampa=LeeRampaMemoria(direccionRampa);
 800ba3a:	f107 0308 	add.w	r3, r7, #8
 800ba3e:	6a3a      	ldr	r2, [r7, #32]
 800ba40:	6879      	ldr	r1, [r7, #4]
 800ba42:	4618      	mov	r0, r3
 800ba44:	f7ff fe28 	bl	800b698 <_ZN18CControladorRampas15LeeRampaMemoriaEi>

		if (tmpRampa.Ocupado == 1)
 800ba48:	7b3b      	ldrb	r3, [r7, #12]
 800ba4a:	2b01      	cmp	r3, #1
 800ba4c:	d107      	bne.n	800ba5e <_ZN18CControladorRampas21DameSiguienteID_RampaEv+0x4a>
		{
			if(tmpRampa.ID_RAMPA>=UltimoID_Rampa)
 800ba4e:	89fa      	ldrh	r2, [r7, #14]
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d302      	bcc.n	800ba5e <_ZN18CControladorRampas21DameSiguienteID_RampaEv+0x4a>
			{
				UltimoID_Rampa=tmpRampa.ID_RAMPA;
 800ba58:	89fa      	ldrh	r2, [r7, #14]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	849a      	strh	r2, [r3, #36]	@ 0x24
			}
		}
	}
 800ba5e:	f107 0308 	add.w	r3, r7, #8
 800ba62:	4618      	mov	r0, r3
 800ba64:	f000 f87c 	bl	800bb60 <_ZN6CRampaD1Ev>
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800ba68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba6a:	3301      	adds	r3, #1
 800ba6c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	689b      	ldr	r3, [r3, #8]
 800ba72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba74:	429a      	cmp	r2, r3
 800ba76:	dbd7      	blt.n	800ba28 <_ZN18CControladorRampas21DameSiguienteID_RampaEv+0x14>
	UltimoID_Rampa++;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ba7c:	3301      	adds	r3, #1
 800ba7e:	b29a      	uxth	r2, r3
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	849a      	strh	r2, [r3, #36]	@ 0x24
	return UltimoID_Rampa;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3728      	adds	r7, #40	@ 0x28
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <_ZN5CPasoC1Ev>:

#include <RapaTemperatura/CPaso.hpp>
#include "stm32f4xx.h"
#include "stm32f4xx_hal_conf.h"

CPaso::CPaso()
 800ba90:	b480      	push	{r7}
 800ba92:	b083      	sub	sp, #12
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	4a0d      	ldr	r2, [pc, #52]	@ (800bad0 <_ZN5CPasoC1Ev+0x40>)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub
	Ocupado=0;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2200      	movs	r2, #0
 800baa2:	711a      	strb	r2, [r3, #4]
	ID_Rampa=0;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2200      	movs	r2, #0
 800baa8:	715a      	strb	r2, [r3, #5]
	ID_Paso=0;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2200      	movs	r2, #0
 800baae:	719a      	strb	r2, [r3, #6]
	Temperatura=0;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2200      	movs	r2, #0
 800bab4:	71da      	strb	r2, [r3, #7]
	NivelAire=0;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2200      	movs	r2, #0
 800baba:	721a      	strb	r2, [r3, #8]
	Minutos=0;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2200      	movs	r2, #0
 800bac0:	725a      	strb	r2, [r3, #9]

}
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	4618      	mov	r0, r3
 800bac6:	370c      	adds	r7, #12
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr
 800bad0:	080161dc 	.word	0x080161dc

0800bad4 <_ZN5CPasoD1Ev>:

CPaso::~CPaso()
 800bad4:	b480      	push	{r7}
 800bad6:	b083      	sub	sp, #12
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	4a04      	ldr	r2, [pc, #16]	@ (800baf0 <_ZN5CPasoD1Ev+0x1c>)
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	4618      	mov	r0, r3
 800bae6:	370c      	adds	r7, #12
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr
 800baf0:	080161dc 	.word	0x080161dc

0800baf4 <_ZN5CPasoD0Ev>:
CPaso::~CPaso()
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b082      	sub	sp, #8
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
}
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f7ff ffe9 	bl	800bad4 <_ZN5CPasoD1Ev>
 800bb02:	210c      	movs	r1, #12
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f005 ffe9 	bl	8011adc <_ZdlPvj>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3708      	adds	r7, #8
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}

0800bb14 <_ZN6CRampaC1Ev>:

#include <RapaTemperatura/CRampa.hpp>
#include "stm32f4xx.h"
#include "stm32f4xx_hal_conf.h"

CRampa::CRampa()
 800bb14:	b480      	push	{r7}
 800bb16:	b085      	sub	sp, #20
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
 800bb1c:	4a0f      	ldr	r2, [pc, #60]	@ (800bb5c <_ZN6CRampaC1Ev+0x48>)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub
	ID_RAMPA=0;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2200      	movs	r2, #0
 800bb26:	80da      	strh	r2, [r3, #6]
	Ocupado=0;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	711a      	strb	r2, [r3, #4]
	for(int i=0;i<TAM_NOMBRE;i++)
 800bb2e:	2300      	movs	r3, #0
 800bb30:	60fb      	str	r3, [r7, #12]
 800bb32:	e008      	b.n	800bb46 <_ZN6CRampaC1Ev+0x32>
	{
		Nombre[i]=' ';
 800bb34:	687a      	ldr	r2, [r7, #4]
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	4413      	add	r3, r2
 800bb3a:	3308      	adds	r3, #8
 800bb3c:	2220      	movs	r2, #32
 800bb3e:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<TAM_NOMBRE;i++)
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	3301      	adds	r3, #1
 800bb44:	60fb      	str	r3, [r7, #12]
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2b0e      	cmp	r3, #14
 800bb4a:	ddf3      	ble.n	800bb34 <_ZN6CRampaC1Ev+0x20>
	}

}
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3714      	adds	r7, #20
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr
 800bb5a:	bf00      	nop
 800bb5c:	080161ec 	.word	0x080161ec

0800bb60 <_ZN6CRampaD1Ev>:

CRampa::~CRampa()
 800bb60:	b480      	push	{r7}
 800bb62:	b083      	sub	sp, #12
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
 800bb68:	4a04      	ldr	r2, [pc, #16]	@ (800bb7c <_ZN6CRampaD1Ev+0x1c>)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	4618      	mov	r0, r3
 800bb72:	370c      	adds	r7, #12
 800bb74:	46bd      	mov	sp, r7
 800bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7a:	4770      	bx	lr
 800bb7c:	080161ec 	.word	0x080161ec

0800bb80 <_ZN6CRampaD0Ev>:
CRampa::~CRampa()
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b082      	sub	sp, #8
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
}
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f7ff ffe9 	bl	800bb60 <_ZN6CRampaD1Ev>
 800bb8e:	2118      	movs	r1, #24
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f005 ffa3 	bl	8011adc <_ZdlPvj>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3708      	adds	r7, #8
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <_ZN6CRampa9SetNombreEPc>:
	}
	return tmp;

}
void CRampa::SetNombre(char* nombre)
{
 800bba0:	b480      	push	{r7}
 800bba2:	b085      	sub	sp, #20
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	6039      	str	r1, [r7, #0]
	for(int i=0;i<TAM_NOMBRE;i++)
 800bbaa:	2300      	movs	r3, #0
 800bbac:	60fb      	str	r3, [r7, #12]
 800bbae:	e00c      	b.n	800bbca <_ZN6CRampa9SetNombreEPc+0x2a>
	{
		Nombre[i]=nombre[i];
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	683a      	ldr	r2, [r7, #0]
 800bbb4:	4413      	add	r3, r2
 800bbb6:	7819      	ldrb	r1, [r3, #0]
 800bbb8:	687a      	ldr	r2, [r7, #4]
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	4413      	add	r3, r2
 800bbbe:	3308      	adds	r3, #8
 800bbc0:	460a      	mov	r2, r1
 800bbc2:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<TAM_NOMBRE;i++)
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	60fb      	str	r3, [r7, #12]
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	2b0e      	cmp	r3, #14
 800bbce:	ddef      	ble.n	800bbb0 <_ZN6CRampa9SetNombreEPc+0x10>
	}
}
 800bbd0:	bf00      	nop
 800bbd2:	bf00      	nop
 800bbd4:	3714      	adds	r7, #20
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbdc:	4770      	bx	lr
	...

0800bbe0 <_ZN6CRampaC1EOS_>:
CRampa::CRampa(CRampa &&rampa)
 800bbe0:	b480      	push	{r7}
 800bbe2:	b085      	sub	sp, #20
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	6039      	str	r1, [r7, #0]
 800bbea:	4a13      	ldr	r2, [pc, #76]	@ (800bc38 <_ZN6CRampaC1EOS_+0x58>)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	601a      	str	r2, [r3, #0]
{
	ID_RAMPA=rampa.ID_RAMPA;
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	88da      	ldrh	r2, [r3, #6]
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	80da      	strh	r2, [r3, #6]
	Ocupado=rampa.Ocupado;
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	791a      	ldrb	r2, [r3, #4]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	711a      	strb	r2, [r3, #4]
	for(int i=0;i<TAM_NOMBRE;i++)
 800bc00:	2300      	movs	r3, #0
 800bc02:	60fb      	str	r3, [r7, #12]
 800bc04:	e00d      	b.n	800bc22 <_ZN6CRampaC1EOS_+0x42>
	{
		Nombre[i]=rampa.Nombre[i];
 800bc06:	683a      	ldr	r2, [r7, #0]
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	4413      	add	r3, r2
 800bc0c:	3308      	adds	r3, #8
 800bc0e:	7819      	ldrb	r1, [r3, #0]
 800bc10:	687a      	ldr	r2, [r7, #4]
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	4413      	add	r3, r2
 800bc16:	3308      	adds	r3, #8
 800bc18:	460a      	mov	r2, r1
 800bc1a:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<TAM_NOMBRE;i++)
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	3301      	adds	r3, #1
 800bc20:	60fb      	str	r3, [r7, #12]
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2b0e      	cmp	r3, #14
 800bc26:	ddee      	ble.n	800bc06 <_ZN6CRampaC1EOS_+0x26>
	}

}
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3714      	adds	r7, #20
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc34:	4770      	bx	lr
 800bc36:	bf00      	nop
 800bc38:	080161ec 	.word	0x080161ec

0800bc3c <_ZN31CManejadorEventoSensorMagneticoC1Ev>:
 *      Author: W10
 */

#include <SensorMagnetico/CManejadorEventoSensorMagnetico.hpp>

CManejadorEventoSensorMagnetico::CManejadorEventoSensorMagnetico()
 800bc3c:	b480      	push	{r7}
 800bc3e:	b083      	sub	sp, #12
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	4a04      	ldr	r2, [pc, #16]	@ (800bc58 <_ZN31CManejadorEventoSensorMagneticoC1Ev+0x1c>)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	370c      	adds	r7, #12
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr
 800bc58:	080161fc 	.word	0x080161fc

0800bc5c <_ZN31CManejadorEventoSensorMagneticoD1Ev>:

CManejadorEventoSensorMagnetico::~CManejadorEventoSensorMagnetico()
 800bc5c:	b480      	push	{r7}
 800bc5e:	b083      	sub	sp, #12
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	4a04      	ldr	r2, [pc, #16]	@ (800bc78 <_ZN31CManejadorEventoSensorMagneticoD1Ev+0x1c>)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	370c      	adds	r7, #12
 800bc70:	46bd      	mov	sp, r7
 800bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc76:	4770      	bx	lr
 800bc78:	080161fc 	.word	0x080161fc

0800bc7c <_ZN31CManejadorEventoSensorMagneticoD0Ev>:
CManejadorEventoSensorMagnetico::~CManejadorEventoSensorMagnetico()
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b082      	sub	sp, #8
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
}
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f7ff ffe9 	bl	800bc5c <_ZN31CManejadorEventoSensorMagneticoD1Ev>
 800bc8a:	2104      	movs	r1, #4
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f005 ff25 	bl	8011adc <_ZdlPvj>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	4618      	mov	r0, r3
 800bc96:	3708      	adds	r7, #8
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <_ZN31CManejadorEventoSensorMagnetico23OnSensorMagneticoChangeEi>:
void CManejadorEventoSensorMagnetico::OnSensorMagneticoChange(int Estado)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b083      	sub	sp, #12
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
	//evento que se llama cuando cambia el estado del sensor
}
 800bca6:	bf00      	nop
 800bca8:	370c      	adds	r7, #12
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb0:	4770      	bx	lr
	...

0800bcb4 <_ZN15SensorMagneticoC1Ev>:
#include <SensorMagnetico/SensorMagnetico.hpp>
#include "stm32f4xx.h"
#include "Constantes.hpp"
#include "Uart/Uart.hpp"

SensorMagnetico::SensorMagnetico()
 800bcb4:	b480      	push	{r7}
 800bcb6:	b083      	sub	sp, #12
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	4a0a      	ldr	r2, [pc, #40]	@ (800bce8 <_ZN15SensorMagneticoC1Ev+0x34>)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	601a      	str	r2, [r3, #0]
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	60da      	str	r2, [r3, #12]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2201      	movs	r2, #1
 800bccc:	611a      	str	r2, [r3, #16]
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2201      	movs	r2, #1
 800bcd2:	615a      	str	r2, [r3, #20]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	619a      	str	r2, [r3, #24]
{
	// TODO Auto-generated constructor stub

}
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	4618      	mov	r0, r3
 800bcde:	370c      	adds	r7, #12
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr
 800bce8:	08016210 	.word	0x08016210

0800bcec <_ZN15SensorMagneticoD1Ev>:

SensorMagnetico::~SensorMagnetico()
 800bcec:	b480      	push	{r7}
 800bcee:	b083      	sub	sp, #12
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	4a04      	ldr	r2, [pc, #16]	@ (800bd08 <_ZN15SensorMagneticoD1Ev+0x1c>)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	370c      	adds	r7, #12
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr
 800bd08:	08016210 	.word	0x08016210

0800bd0c <_ZN15SensorMagneticoD0Ev>:
SensorMagnetico::~SensorMagnetico()
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b082      	sub	sp, #8
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
}
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f7ff ffe9 	bl	800bcec <_ZN15SensorMagneticoD1Ev>
 800bd1a:	211c      	movs	r1, #28
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f005 fedd 	bl	8011adc <_ZdlPvj>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	4618      	mov	r0, r3
 800bd26:	3708      	adds	r7, #8
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <_ZN15SensorMagnetico10ConfigurarEP12GPIO_TypeDeft>:

void SensorMagnetico::Configurar(GPIO_TypeDef *puerto, uint16_t pin)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b085      	sub	sp, #20
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	60f8      	str	r0, [r7, #12]
 800bd34:	60b9      	str	r1, [r7, #8]
 800bd36:	4613      	mov	r3, r2
 800bd38:	80fb      	strh	r3, [r7, #6]
	GPIO_Port = puerto;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	68ba      	ldr	r2, [r7, #8]
 800bd3e:	605a      	str	r2, [r3, #4]
	Gpio_Pin = pin;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	88fa      	ldrh	r2, [r7, #6]
 800bd44:	811a      	strh	r2, [r3, #8]

}
 800bd46:	bf00      	nop
 800bd48:	3714      	adds	r7, #20
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd50:	4770      	bx	lr

0800bd52 <_ZN15SensorMagnetico4InitEv>:
void SensorMagnetico::Init()
{
 800bd52:	b580      	push	{r7, lr}
 800bd54:	b088      	sub	sp, #32
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 800bd5a:	f107 030c 	add.w	r3, r7, #12
 800bd5e:	2200      	movs	r2, #0
 800bd60:	601a      	str	r2, [r3, #0]
 800bd62:	605a      	str	r2, [r3, #4]
 800bd64:	609a      	str	r2, [r3, #8]
 800bd66:	60da      	str	r2, [r3, #12]
 800bd68:	611a      	str	r2, [r3, #16]
	{ 0 };
	GPIO_InitStruct.Pin = Gpio_Pin;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	891b      	ldrh	r3, [r3, #8]
 800bd6e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bd70:	2300      	movs	r3, #0
 800bd72:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bd74:	2301      	movs	r3, #1
 800bd76:	617b      	str	r3, [r7, #20]
	//PruebaTempratura(0);
	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	f107 020c 	add.w	r2, r7, #12
 800bd80:	4611      	mov	r1, r2
 800bd82:	4618      	mov	r0, r3
 800bd84:	f002 f9f2 	bl	800e16c <HAL_GPIO_Init>
}
 800bd88:	bf00      	nop
 800bd8a:	3720      	adds	r7, #32
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <_ZN15SensorMagnetico22AsignaManejadorEventosEP31CManejadorEventoSensorMagnetico>:
void SensorMagnetico::AsignaManejadorEventos(
		CManejadorEventoSensorMagnetico *manejador)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b083      	sub	sp, #12
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	6039      	str	r1, [r7, #0]
	Manejador = manejador;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	683a      	ldr	r2, [r7, #0]
 800bd9e:	60da      	str	r2, [r3, #12]

}
 800bda0:	bf00      	nop
 800bda2:	370c      	adds	r7, #12
 800bda4:	46bd      	mov	sp, r7
 800bda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdaa:	4770      	bx	lr

0800bdac <_ZN15SensorMagnetico4LeerEv>:
int SensorMagnetico::Leer()
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b082      	sub	sp, #8
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(GPIO_Port, Gpio_Pin); // lee el pin
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	685a      	ldr	r2, [r3, #4]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	891b      	ldrh	r3, [r3, #8]
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	4610      	mov	r0, r2
 800bdc0:	f002 fb58 	bl	800e474 <HAL_GPIO_ReadPin>
 800bdc4:	4603      	mov	r3, r0

}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3708      	adds	r7, #8
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}
	...

0800bdd0 <_ZN26InterfaceSensorTemperaturaC1Ev>:
 *      Author: W10
 */

#include <SensorTemperatura/InterfaceSensorTemperatura/InterfaceSensorTemperatura.hpp>

InterfaceSensorTemperatura::InterfaceSensorTemperatura()
 800bdd0:	b480      	push	{r7}
 800bdd2:	b083      	sub	sp, #12
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	4a04      	ldr	r2, [pc, #16]	@ (800bdec <_ZN26InterfaceSensorTemperaturaC1Ev+0x1c>)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	4618      	mov	r0, r3
 800bde2:	370c      	adds	r7, #12
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr
 800bdec:	08016220 	.word	0x08016220

0800bdf0 <_ZN26InterfaceSensorTemperaturaD1Ev>:

InterfaceSensorTemperatura::~InterfaceSensorTemperatura()
 800bdf0:	b480      	push	{r7}
 800bdf2:	b083      	sub	sp, #12
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	4a04      	ldr	r2, [pc, #16]	@ (800be0c <_ZN26InterfaceSensorTemperaturaD1Ev+0x1c>)
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	4618      	mov	r0, r3
 800be02:	370c      	adds	r7, #12
 800be04:	46bd      	mov	sp, r7
 800be06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0a:	4770      	bx	lr
 800be0c:	08016220 	.word	0x08016220

0800be10 <_ZN26InterfaceSensorTemperaturaD0Ev>:
InterfaceSensorTemperatura::~InterfaceSensorTemperatura()
 800be10:	b580      	push	{r7, lr}
 800be12:	b082      	sub	sp, #8
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
}
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f7ff ffe9 	bl	800bdf0 <_ZN26InterfaceSensorTemperaturaD1Ev>
 800be1e:	2104      	movs	r1, #4
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f005 fe5b 	bl	8011adc <_ZdlPvj>
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	4618      	mov	r0, r3
 800be2a:	3708      	adds	r7, #8
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}

0800be30 <_ZN26InterfaceSensorTemperatura4InitEv>:

void InterfaceSensorTemperatura::Init()
{
 800be30:	b480      	push	{r7}
 800be32:	b083      	sub	sp, #12
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]

}
 800be38:	bf00      	nop
 800be3a:	370c      	adds	r7, #12
 800be3c:	46bd      	mov	sp, r7
 800be3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be42:	4770      	bx	lr

0800be44 <_ZN26InterfaceSensorTemperatura13LeeTemepaturaEv>:
int InterfaceSensorTemperatura::LeeTemepatura()
{
 800be44:	b480      	push	{r7}
 800be46:	b083      	sub	sp, #12
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
	return 0;
 800be4c:	2300      	movs	r3, #0
}
 800be4e:	4618      	mov	r0, r3
 800be50:	370c      	adds	r7, #12
 800be52:	46bd      	mov	sp, r7
 800be54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be58:	4770      	bx	lr
	...

0800be5c <_ZN15SensorAnalogicoC1Ev>:
#include "Constantes.hpp"
#include <EPROM/CEprom.hpp>

extern I2C_HandleTypeDef hi2c1;

SensorAnalogico::SensorAnalogico()
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b082      	sub	sp, #8
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	4618      	mov	r0, r3
 800be68:	f7ff ffb2 	bl	800bdd0 <_ZN26InterfaceSensorTemperaturaC1Ev>
 800be6c:	4a06      	ldr	r2, [pc, #24]	@ (800be88 <_ZN15SensorAnalogicoC1Ev+0x2c>)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	601a      	str	r2, [r3, #0]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2200      	movs	r2, #0
 800be76:	64da      	str	r2, [r3, #76]	@ 0x4c
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2200      	movs	r2, #0
 800be7c:	651a      	str	r2, [r3, #80]	@ 0x50
{
	// TODO Auto-generated constructor stub

}
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	4618      	mov	r0, r3
 800be82:	3708      	adds	r7, #8
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}
 800be88:	08016238 	.word	0x08016238

0800be8c <_ZN15SensorAnalogicoD1Ev>:

SensorAnalogico::~SensorAnalogico()
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b082      	sub	sp, #8
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	4a05      	ldr	r2, [pc, #20]	@ (800beac <_ZN15SensorAnalogicoD1Ev+0x20>)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	4618      	mov	r0, r3
 800be9e:	f7ff ffa7 	bl	800bdf0 <_ZN26InterfaceSensorTemperaturaD1Ev>
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	4618      	mov	r0, r3
 800bea6:	3708      	adds	r7, #8
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}
 800beac:	08016238 	.word	0x08016238

0800beb0 <_ZN15SensorAnalogicoD0Ev>:
SensorAnalogico::~SensorAnalogico()
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b082      	sub	sp, #8
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
}
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f7ff ffe7 	bl	800be8c <_ZN15SensorAnalogicoD1Ev>
 800bebe:	2154      	movs	r1, #84	@ 0x54
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f005 fe0b 	bl	8011adc <_ZdlPvj>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	4618      	mov	r0, r3
 800beca:	3708      	adds	r7, #8
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}

0800bed0 <_ZN15SensorAnalogico4InitEv>:

void SensorAnalogico::Init()
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b088      	sub	sp, #32
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800bed8:	2300      	movs	r3, #0
 800beda:	60fb      	str	r3, [r7, #12]
 800bedc:	4b36      	ldr	r3, [pc, #216]	@ (800bfb8 <_ZN15SensorAnalogico4InitEv+0xe8>)
 800bede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bee0:	4a35      	ldr	r2, [pc, #212]	@ (800bfb8 <_ZN15SensorAnalogico4InitEv+0xe8>)
 800bee2:	f043 0301 	orr.w	r3, r3, #1
 800bee6:	6313      	str	r3, [r2, #48]	@ 0x30
 800bee8:	4b33      	ldr	r3, [pc, #204]	@ (800bfb8 <_ZN15SensorAnalogico4InitEv+0xe8>)
 800beea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800beec:	f003 0301 	and.w	r3, r3, #1
 800bef0:	60fb      	str	r3, [r7, #12]
 800bef2:	68fb      	ldr	r3, [r7, #12]
	 ADC_ChannelConfTypeDef sConfig = {0};
 800bef4:	f107 0310 	add.w	r3, r7, #16
 800bef8:	2200      	movs	r2, #0
 800befa:	601a      	str	r2, [r3, #0]
 800befc:	605a      	str	r2, [r3, #4]
 800befe:	609a      	str	r2, [r3, #8]
 800bf00:	60da      	str	r2, [r3, #12]
	 hadc1.Instance = ADC1;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	4a2d      	ldr	r2, [pc, #180]	@ (800bfbc <_ZN15SensorAnalogico4InitEv+0xec>)
 800bf06:	605a      	str	r2, [r3, #4]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2; //NUEVO
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	609a      	str	r2, [r3, #8]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B; //nuevo
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2200      	movs	r2, #0
 800bf12:	60da      	str	r2, [r3, #12]

	 hadc1.Init.ScanConvMode =  DISABLE;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2200      	movs	r2, #0
 800bf18:	615a      	str	r2, [r3, #20]
	 hadc1.Init.ContinuousConvMode = ENABLE;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2201      	movs	r2, #1
 800bf1e:	771a      	strb	r2, [r3, #28]
	 hadc1.Init.DiscontinuousConvMode = DISABLE;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2200      	movs	r2, #0
 800bf24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	 hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;//nuevo
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	631a      	str	r2, [r3, #48]	@ 0x30
	 hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	4a23      	ldr	r2, [pc, #140]	@ (800bfc0 <_ZN15SensorAnalogico4InitEv+0xf0>)
 800bf32:	62da      	str	r2, [r3, #44]	@ 0x2c
	 hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2200      	movs	r2, #0
 800bf38:	611a      	str	r2, [r3, #16]
	 hadc1.State=	 HAL_ADC_STATE_RESET;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	645a      	str	r2, [r3, #68]	@ 0x44
	 hadc1.Init.NbrOfConversion = 1;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2201      	movs	r2, #1
 800bf44:	621a      	str	r2, [r3, #32]
	  hadc1.Init.DMAContinuousRequests = DISABLE; //nuevo
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2201      	movs	r2, #1
 800bf52:	619a      	str	r2, [r3, #24]

	 if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	3304      	adds	r3, #4
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f001 fcc1 	bl	800d8e0 <HAL_ADC_Init>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	bf14      	ite	ne
 800bf64:	2301      	movne	r3, #1
 800bf66:	2300      	moveq	r3, #0
 800bf68:	b2db      	uxtb	r3, r3
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d002      	beq.n	800bf74 <_ZN15SensorAnalogico4InitEv+0xa4>
	 {
	 Error_Handler();
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 f86a 	bl	800c048 <_ZN15SensorAnalogico13Error_HandlerEv>
	 }

	 sConfig.Channel = ADC_CHANNEL_4;//ADC_CHANNEL_3;
 800bf74:	2304      	movs	r3, #4
 800bf76:	613b      	str	r3, [r7, #16]
	 sConfig.Rank =1; // ADC_REGULAR_RANK_1;
 800bf78:	2301      	movs	r3, #1
 800bf7a:	617b      	str	r3, [r7, #20]
	 sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES; //ADC_SAMPLETIME_239CYCLES_5;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	61bb      	str	r3, [r7, #24]
	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	3304      	adds	r3, #4
 800bf84:	f107 0210 	add.w	r2, r7, #16
 800bf88:	4611      	mov	r1, r2
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f001 fdae 	bl	800daec <HAL_ADC_ConfigChannel>
 800bf90:	4603      	mov	r3, r0
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	bf14      	ite	ne
 800bf96:	2301      	movne	r3, #1
 800bf98:	2300      	moveq	r3, #0
 800bf9a:	b2db      	uxtb	r3, r3
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d002      	beq.n	800bfa6 <_ZN15SensorAnalogico4InitEv+0xd6>
	 {
	 Error_Handler();
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f000 f851 	bl	800c048 <_ZN15SensorAnalogico13Error_HandlerEv>
	 }
	 HAL_ADC_Start(&hadc1);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	3304      	adds	r3, #4
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f001 fcdc 	bl	800d968 <HAL_ADC_Start>

}
 800bfb0:	bf00      	nop
 800bfb2:	3720      	adds	r7, #32
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}
 800bfb8:	40023800 	.word	0x40023800
 800bfbc:	40012000 	.word	0x40012000
 800bfc0:	0f000001 	.word	0x0f000001

0800bfc4 <_ZN15SensorAnalogico13LeeTemepaturaEv>:
int SensorAnalogico::LeeTemepatura()
{
 800bfc4:	b590      	push	{r4, r7, lr}
 800bfc6:	b085      	sub	sp, #20
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
	int tiempoactual=HAL_GetTick();
 800bfcc:	f001 fc58 	bl	800d880 <HAL_GetTick>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	60fb      	str	r3, [r7, #12]
	if(tiempoactual<TiempoTranscurrido)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bfd8:	68fa      	ldr	r2, [r7, #12]
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	da02      	bge.n	800bfe4 <_ZN15SensorAnalogico13LeeTemepaturaEv+0x20>
	{
		return UltimaTemperatura;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bfe2:	e02b      	b.n	800c03c <_ZN15SensorAnalogico13LeeTemepaturaEv+0x78>
	}
	TiempoTranscurrido=tiempoactual+500;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	f503 72fa 	add.w	r2, r3, #500	@ 0x1f4
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	64da      	str	r2, [r3, #76]	@ 0x4c

	Init();
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	3308      	adds	r3, #8
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	4798      	blx	r3
	HAL_ADC_Start(&hadc1);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	3304      	adds	r3, #4
 800bffe:	4618      	mov	r0, r3
 800c000:	f001 fcb2 	bl	800d968 <HAL_ADC_Start>
	int valor=HAL_ADC_GetValue(&hadc1);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	3304      	adds	r3, #4
 800c008:	4618      	mov	r0, r3
 800c00a:	f001 fd61 	bl	800dad0 <HAL_ADC_GetValue>
 800c00e:	4603      	mov	r3, r0
 800c010:	60bb      	str	r3, [r7, #8]
	//4095->500
	//valor->X
	//x=valor*500/4095
	UltimaTemperatura=(int)(valor*400/4095)+LeeMemoria();
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800c018:	fb02 f303 	mul.w	r3, r2, r3
 800c01c:	4a09      	ldr	r2, [pc, #36]	@ (800c044 <_ZN15SensorAnalogico13LeeTemepaturaEv+0x80>)
 800c01e:	fb82 1203 	smull	r1, r2, r2, r3
 800c022:	441a      	add	r2, r3
 800c024:	12d2      	asrs	r2, r2, #11
 800c026:	17db      	asrs	r3, r3, #31
 800c028:	1ad4      	subs	r4, r2, r3
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f000 f816 	bl	800c05c <_ZN15SensorAnalogico10LeeMemoriaEv>
 800c030:	4603      	mov	r3, r0
 800c032:	18e2      	adds	r2, r4, r3
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	651a      	str	r2, [r3, #80]	@ 0x50
	return 	UltimaTemperatura;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50

}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3714      	adds	r7, #20
 800c040:	46bd      	mov	sp, r7
 800c042:	bd90      	pop	{r4, r7, pc}
 800c044:	80080081 	.word	0x80080081

0800c048 <_ZN15SensorAnalogico13Error_HandlerEv>:
void SensorAnalogico::Error_Handler(void)
{
 800c048:	b480      	push	{r7}
 800c04a:	b083      	sub	sp, #12
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]

}
 800c050:	bf00      	nop
 800c052:	370c      	adds	r7, #12
 800c054:	46bd      	mov	sp, r7
 800c056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05a:	4770      	bx	lr

0800c05c <_ZN15SensorAnalogico10LeeMemoriaEv>:
int SensorAnalogico::LeeMemoria()
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b082      	sub	sp, #8
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
	return Eprom.DameAjusteTemperatura();
 800c064:	4803      	ldr	r0, [pc, #12]	@ (800c074 <_ZN15SensorAnalogico10LeeMemoriaEv+0x18>)
 800c066:	f7f5 fabf 	bl	80015e8 <_ZN6CEprom21DameAjusteTemperaturaEv>
 800c06a:	4603      	mov	r3, r0
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	3708      	adds	r7, #8
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}
 800c074:	2000031c 	.word	0x2000031c

0800c078 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type>:

#include "Timer.hpp"
#include<stdbool.h>

bool CTimer::Init(TIM_TypeDef* TimInstance, uint32_t periodo, 	IRQn_Type Tim_Irq)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b08c      	sub	sp, #48	@ 0x30
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	60f8      	str	r0, [r7, #12]
 800c080:	60b9      	str	r1, [r7, #8]
 800c082:	607a      	str	r2, [r7, #4]
 800c084:	70fb      	strb	r3, [r7, #3]
	Periodo = periodo;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	687a      	ldr	r2, [r7, #4]
 800c08a:	64da      	str	r2, [r3, #76]	@ 0x4c
	__HAL_RCC_TIM3_CLK_ENABLE();
 800c08c:	2300      	movs	r3, #0
 800c08e:	617b      	str	r3, [r7, #20]
 800c090:	4b3b      	ldr	r3, [pc, #236]	@ (800c180 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x108>)
 800c092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c094:	4a3a      	ldr	r2, [pc, #232]	@ (800c180 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x108>)
 800c096:	f043 0302 	orr.w	r3, r3, #2
 800c09a:	6413      	str	r3, [r2, #64]	@ 0x40
 800c09c:	4b38      	ldr	r3, [pc, #224]	@ (800c180 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x108>)
 800c09e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0a0:	f003 0302 	and.w	r3, r3, #2
 800c0a4:	617b      	str	r3, [r7, #20]
 800c0a6:	697b      	ldr	r3, [r7, #20]
	HTim.Instance = TimInstance;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	68ba      	ldr	r2, [r7, #8]
 800c0ac:	601a      	str	r2, [r3, #0]
	HTim.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	609a      	str	r2, [r3, #8]
	HTim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	611a      	str	r2, [r3, #16]
	//la siguiente configuracion es para que me de un tiempo de 83.3 micro segundos para generar la interrupcion
	
	HTim.Init.Period = 3350-1;//3000 - 1; //8399
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	f640 5215 	movw	r2, #3349	@ 0xd15
 800c0c0:	60da      	str	r2, [r3, #12]
	HTim.Init.Prescaler = (Periodo * 1) - 1;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c0c6:	1e5a      	subs	r2, r3, #1
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	605a      	str	r2, [r3, #4]
	HTim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	619a      	str	r2, [r3, #24]
	HTim.Init.RepetitionCounter = 0;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&HTim) != HAL_OK)
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f004 f93a 	bl	8010354 <HAL_TIM_Base_Init>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	bf14      	ite	ne
 800c0e6:	2301      	movne	r3, #1
 800c0e8:	2300      	moveq	r3, #0
 800c0ea:	b2db      	uxtb	r3, r3
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d001      	beq.n	800c0f4 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x7c>
	{
		return false;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	e041      	b.n	800c178 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x100>
	}

	TIM_ClockConfigTypeDef TimClock =
 800c0f4:	f107 0320 	add.w	r3, r7, #32
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	601a      	str	r2, [r3, #0]
 800c0fc:	605a      	str	r2, [r3, #4]
 800c0fe:	609a      	str	r2, [r3, #8]
 800c100:	60da      	str	r2, [r3, #12]
	{ 0 };
	TimClock.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c102:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c106:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_ConfigClockSource(&HTim, &TimClock) != HAL_OK)
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	f107 0220 	add.w	r2, r7, #32
 800c10e:	4611      	mov	r1, r2
 800c110:	4618      	mov	r0, r3
 800c112:	f004 fc8d 	bl	8010a30 <HAL_TIM_ConfigClockSource>
 800c116:	4603      	mov	r3, r0
 800c118:	2b00      	cmp	r3, #0
 800c11a:	bf14      	ite	ne
 800c11c:	2301      	movne	r3, #1
 800c11e:	2300      	moveq	r3, #0
 800c120:	b2db      	uxtb	r3, r3
 800c122:	2b00      	cmp	r3, #0
 800c124:	d001      	beq.n	800c12a <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0xb2>
	{
		return false;
 800c126:	2300      	movs	r3, #0
 800c128:	e026      	b.n	800c178 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x100>
	}

	TIM_MasterConfigTypeDef TimMaster =
 800c12a:	f107 0318 	add.w	r3, r7, #24
 800c12e:	2200      	movs	r2, #0
 800c130:	601a      	str	r2, [r3, #0]
 800c132:	605a      	str	r2, [r3, #4]
	{ 0 };
	TimMaster.MasterSlaveMode = TIM_SLAVEMODE_DISABLE;
 800c134:	2300      	movs	r3, #0
 800c136:	61fb      	str	r3, [r7, #28]
	TimMaster.MasterOutputTrigger = TIM_TRGO_RESET;
 800c138:	2300      	movs	r3, #0
 800c13a:	61bb      	str	r3, [r7, #24]
	if (HAL_TIMEx_MasterConfigSynchronization(&HTim, &TimMaster) != HAL_OK)
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	f107 0218 	add.w	r2, r7, #24
 800c142:	4611      	mov	r1, r2
 800c144:	4618      	mov	r0, r3
 800c146:	f005 f83b 	bl	80111c0 <HAL_TIMEx_MasterConfigSynchronization>
 800c14a:	4603      	mov	r3, r0
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	bf14      	ite	ne
 800c150:	2301      	movne	r3, #1
 800c152:	2300      	moveq	r3, #0
 800c154:	b2db      	uxtb	r3, r3
 800c156:	2b00      	cmp	r3, #0
 800c158:	d001      	beq.n	800c15e <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0xe6>
	{
		return false;
 800c15a:	2300      	movs	r3, #0
 800c15c:	e00c      	b.n	800c178 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x100>
	}

	HAL_NVIC_SetPriority(Tim_Irq, 5, 0);
 800c15e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c162:	2200      	movs	r2, #0
 800c164:	2105      	movs	r1, #5
 800c166:	4618      	mov	r0, r3
 800c168:	f001 ffc9 	bl	800e0fe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(Tim_Irq);
 800c16c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c170:	4618      	mov	r0, r3
 800c172:	f001 ffe0 	bl	800e136 <HAL_NVIC_EnableIRQ>
	return true;
 800c176:	2301      	movs	r3, #1
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3730      	adds	r7, #48	@ 0x30
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}
 800c180:	40023800 	.word	0x40023800

0800c184 <_Z11uartx_writec>:
#include "string.h"
#include "stm32f4xx_hal.h"
UART_HandleTypeDef Huart1;

void uartx_write(char ch)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b082      	sub	sp, #8
 800c188:	af00      	add	r7, sp, #0
 800c18a:	4603      	mov	r3, r0
 800c18c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&Huart1,(uint8_t*) &ch, 1, 0xffff);
 800c18e:	1df9      	adds	r1, r7, #7
 800c190:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c194:	2201      	movs	r2, #1
 800c196:	4803      	ldr	r0, [pc, #12]	@ (800c1a4 <_Z11uartx_writec+0x20>)
 800c198:	f005 f8e4 	bl	8011364 <HAL_UART_Transmit>

}
 800c19c:	bf00      	nop
 800c19e:	3708      	adds	r7, #8
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}
 800c1a4:	20000210 	.word	0x20000210

0800c1a8 <_Z16uartx_write_textPc>:

void uartx_write_text(char *info)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b082      	sub	sp, #8
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]

	while(*info)  uartx_write(*info++);
 800c1b0:	e006      	b.n	800c1c0 <_Z16uartx_write_textPc+0x18>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	1c5a      	adds	r2, r3, #1
 800c1b6:	607a      	str	r2, [r7, #4]
 800c1b8:	781b      	ldrb	r3, [r3, #0]
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7ff ffe2 	bl	800c184 <_Z11uartx_writec>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	781b      	ldrb	r3, [r3, #0]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d1f4      	bne.n	800c1b2 <_Z16uartx_write_textPc+0xa>

}
 800c1c8:	bf00      	nop
 800c1ca:	bf00      	nop
 800c1cc:	3708      	adds	r7, #8
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}
	...

0800c1d4 <_Z16USART1_UART_Initv>:
	}
}

//static
void USART1_UART_Init(void)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	Huart1.Instance = USART1;
 800c1d8:	4b13      	ldr	r3, [pc, #76]	@ (800c228 <_Z16USART1_UART_Initv+0x54>)
 800c1da:	4a14      	ldr	r2, [pc, #80]	@ (800c22c <_Z16USART1_UART_Initv+0x58>)
 800c1dc:	601a      	str	r2, [r3, #0]
	Huart1.Init.BaudRate = 115200;
 800c1de:	4b12      	ldr	r3, [pc, #72]	@ (800c228 <_Z16USART1_UART_Initv+0x54>)
 800c1e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800c1e4:	605a      	str	r2, [r3, #4]
	Huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c1e6:	4b10      	ldr	r3, [pc, #64]	@ (800c228 <_Z16USART1_UART_Initv+0x54>)
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	609a      	str	r2, [r3, #8]
	Huart1.Init.StopBits = UART_STOPBITS_1;
 800c1ec:	4b0e      	ldr	r3, [pc, #56]	@ (800c228 <_Z16USART1_UART_Initv+0x54>)
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	60da      	str	r2, [r3, #12]
	Huart1.Init.Parity = UART_PARITY_NONE;
 800c1f2:	4b0d      	ldr	r3, [pc, #52]	@ (800c228 <_Z16USART1_UART_Initv+0x54>)
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	611a      	str	r2, [r3, #16]
	Huart1.Init.Mode = UART_MODE_TX_RX;
 800c1f8:	4b0b      	ldr	r3, [pc, #44]	@ (800c228 <_Z16USART1_UART_Initv+0x54>)
 800c1fa:	220c      	movs	r2, #12
 800c1fc:	615a      	str	r2, [r3, #20]
	Huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c1fe:	4b0a      	ldr	r3, [pc, #40]	@ (800c228 <_Z16USART1_UART_Initv+0x54>)
 800c200:	2200      	movs	r2, #0
 800c202:	619a      	str	r2, [r3, #24]
	Huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c204:	4b08      	ldr	r3, [pc, #32]	@ (800c228 <_Z16USART1_UART_Initv+0x54>)
 800c206:	2200      	movs	r2, #0
 800c208:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&Huart1) != HAL_OK)
 800c20a:	4807      	ldr	r0, [pc, #28]	@ (800c228 <_Z16USART1_UART_Initv+0x54>)
 800c20c:	f005 f85a 	bl	80112c4 <HAL_UART_Init>
 800c210:	4603      	mov	r3, r0
 800c212:	2b00      	cmp	r3, #0
 800c214:	bf14      	ite	ne
 800c216:	2301      	movne	r3, #1
 800c218:	2300      	moveq	r3, #0
 800c21a:	b2db      	uxtb	r3, r3
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d001      	beq.n	800c224 <_Z16USART1_UART_Initv+0x50>
	{
		ErrorHandler();
 800c220:	f000 f806 	bl	800c230 <_Z12ErrorHandlerv>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800c224:	bf00      	nop
 800c226:	bd80      	pop	{r7, pc}
 800c228:	20000210 	.word	0x20000210
 800c22c:	40011000 	.word	0x40011000

0800c230 <_Z12ErrorHandlerv>:
void ErrorHandler(void)
{
 800c230:	b480      	push	{r7}
 800c232:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800c234:	b672      	cpsid	i
}
 800c236:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800c238:	bf00      	nop
 800c23a:	e7fd      	b.n	800c238 <_Z12ErrorHandlerv+0x8>

0800c23c <_Z12SerialPrintfPcz>:
	{
	}
	/* USER CODE END Error_Handler_Debug */
}
void SerialPrintf(char * formato, ...)
{
 800c23c:	b40f      	push	{r0, r1, r2, r3}
 800c23e:	b580      	push	{r7, lr}
 800c240:	b0be      	sub	sp, #248	@ 0xf8
 800c242:	af00      	add	r7, sp, #0

    char *p;
    char buffer[100];

    char formatoFlotante[20];
    int posisionFormato=0;
 800c244:	2300      	movs	r3, #0
 800c246:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    char tmp[100];
    int postmp=0;
 800c24a:	2300      	movs	r3, #0
 800c24c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    int posbuffer = 0;
 800c250:	2300      	movs	r3, #0
 800c252:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    va_list pa;
    int encontrado=0;
 800c256:	2300      	movs	r3, #0
 800c258:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    //float a;
    va_start(pa, formato);
 800c25c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800c260:	607b      	str	r3, [r7, #4]
    for (p = formato; *p; p++)
 800c262:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c266:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c26a:	e143      	b.n	800c4f4 <_Z12SerialPrintfPcz+0x2b8>
    {

      if (*p != '%')
 800c26c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c270:	781b      	ldrb	r3, [r3, #0]
 800c272:	2b25      	cmp	r3, #37	@ 0x25
 800c274:	d00f      	beq.n	800c296 <_Z12SerialPrintfPcz+0x5a>
      {
        buffer[posbuffer] = *p;
 800c276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c27a:	7819      	ldrb	r1, [r3, #0]
 800c27c:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 800c280:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c284:	4413      	add	r3, r2
 800c286:	460a      	mov	r2, r1
 800c288:	701a      	strb	r2, [r3, #0]
        posbuffer++;
 800c28a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c28e:	3301      	adds	r3, #1
 800c290:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
        continue;
 800c294:	e129      	b.n	800c4ea <_Z12SerialPrintfPcz+0x2ae>
      }
      encontrado=0;
 800c296:	2300      	movs	r3, #0
 800c298:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      switch (*++p)
 800c29c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2a0:	3301      	adds	r3, #1
 800c2a2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c2a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2aa:	781b      	ldrb	r3, [r3, #0]
 800c2ac:	2b2e      	cmp	r3, #46	@ 0x2e
 800c2ae:	f000 80a3 	beq.w	800c3f8 <_Z12SerialPrintfPcz+0x1bc>
 800c2b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c2b4:	f2c0 80e2 	blt.w	800c47c <_Z12SerialPrintfPcz+0x240>
 800c2b8:	2b78      	cmp	r3, #120	@ 0x78
 800c2ba:	f300 80df 	bgt.w	800c47c <_Z12SerialPrintfPcz+0x240>
 800c2be:	2b63      	cmp	r3, #99	@ 0x63
 800c2c0:	f2c0 80dc 	blt.w	800c47c <_Z12SerialPrintfPcz+0x240>
 800c2c4:	3b63      	subs	r3, #99	@ 0x63
 800c2c6:	2b15      	cmp	r3, #21
 800c2c8:	f200 80d8 	bhi.w	800c47c <_Z12SerialPrintfPcz+0x240>
 800c2cc:	a201      	add	r2, pc, #4	@ (adr r2, 800c2d4 <_Z12SerialPrintfPcz+0x98>)
 800c2ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2d2:	bf00      	nop
 800c2d4:	0800c39d 	.word	0x0800c39d
 800c2d8:	0800c32d 	.word	0x0800c32d
 800c2dc:	0800c47d 	.word	0x0800c47d
 800c2e0:	0800c3b9 	.word	0x0800c3b9
 800c2e4:	0800c47d 	.word	0x0800c47d
 800c2e8:	0800c47d 	.word	0x0800c47d
 800c2ec:	0800c349 	.word	0x0800c349
 800c2f0:	0800c47d 	.word	0x0800c47d
 800c2f4:	0800c47d 	.word	0x0800c47d
 800c2f8:	0800c47d 	.word	0x0800c47d
 800c2fc:	0800c47d 	.word	0x0800c47d
 800c300:	0800c47d 	.word	0x0800c47d
 800c304:	0800c47d 	.word	0x0800c47d
 800c308:	0800c381 	.word	0x0800c381
 800c30c:	0800c47d 	.word	0x0800c47d
 800c310:	0800c47d 	.word	0x0800c47d
 800c314:	0800c3dd 	.word	0x0800c3dd
 800c318:	0800c47d 	.word	0x0800c47d
 800c31c:	0800c47d 	.word	0x0800c47d
 800c320:	0800c47d 	.word	0x0800c47d
 800c324:	0800c47d 	.word	0x0800c47d
 800c328:	0800c365 	.word	0x0800c365
      {
        case 'd':
          sprintf(tmp, "%d", va_arg(pa, int));
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	1d1a      	adds	r2, r3, #4
 800c330:	607a      	str	r2, [r7, #4]
 800c332:	681a      	ldr	r2, [r3, #0]
 800c334:	f107 0308 	add.w	r3, r7, #8
 800c338:	497b      	ldr	r1, [pc, #492]	@ (800c528 <_Z12SerialPrintfPcz+0x2ec>)
 800c33a:	4618      	mov	r0, r3
 800c33c:	f006 f9cc 	bl	80126d8 <siprintf>
          encontrado=1;
 800c340:	2301      	movs	r3, #1
 800c342:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 800c346:	e0a9      	b.n	800c49c <_Z12SerialPrintfPcz+0x260>
        case 'i':
          sprintf(tmp, "%i", va_arg(pa, int));
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	1d1a      	adds	r2, r3, #4
 800c34c:	607a      	str	r2, [r7, #4]
 800c34e:	681a      	ldr	r2, [r3, #0]
 800c350:	f107 0308 	add.w	r3, r7, #8
 800c354:	4975      	ldr	r1, [pc, #468]	@ (800c52c <_Z12SerialPrintfPcz+0x2f0>)
 800c356:	4618      	mov	r0, r3
 800c358:	f006 f9be 	bl	80126d8 <siprintf>
          encontrado=1;
 800c35c:	2301      	movs	r3, #1
 800c35e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 800c362:	e09b      	b.n	800c49c <_Z12SerialPrintfPcz+0x260>
        case 'x':
          sprintf(tmp, "%x", va_arg(pa, int));
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	1d1a      	adds	r2, r3, #4
 800c368:	607a      	str	r2, [r7, #4]
 800c36a:	681a      	ldr	r2, [r3, #0]
 800c36c:	f107 0308 	add.w	r3, r7, #8
 800c370:	496f      	ldr	r1, [pc, #444]	@ (800c530 <_Z12SerialPrintfPcz+0x2f4>)
 800c372:	4618      	mov	r0, r3
 800c374:	f006 f9b0 	bl	80126d8 <siprintf>
          encontrado=1;
 800c378:	2301      	movs	r3, #1
 800c37a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 800c37e:	e08d      	b.n	800c49c <_Z12SerialPrintfPcz+0x260>
        case 'p':
          sprintf(tmp, "%p", va_arg(pa, void*));
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	1d1a      	adds	r2, r3, #4
 800c384:	607a      	str	r2, [r7, #4]
 800c386:	681a      	ldr	r2, [r3, #0]
 800c388:	f107 0308 	add.w	r3, r7, #8
 800c38c:	4969      	ldr	r1, [pc, #420]	@ (800c534 <_Z12SerialPrintfPcz+0x2f8>)
 800c38e:	4618      	mov	r0, r3
 800c390:	f006 f9a2 	bl	80126d8 <siprintf>
          encontrado=1;
 800c394:	2301      	movs	r3, #1
 800c396:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 800c39a:	e07f      	b.n	800c49c <_Z12SerialPrintfPcz+0x260>
        case 'c':
          sprintf(tmp, "%c", va_arg(pa, int));
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	1d1a      	adds	r2, r3, #4
 800c3a0:	607a      	str	r2, [r7, #4]
 800c3a2:	681a      	ldr	r2, [r3, #0]
 800c3a4:	f107 0308 	add.w	r3, r7, #8
 800c3a8:	4963      	ldr	r1, [pc, #396]	@ (800c538 <_Z12SerialPrintfPcz+0x2fc>)
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f006 f994 	bl	80126d8 <siprintf>
          encontrado=1;
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 800c3b6:	e071      	b.n	800c49c <_Z12SerialPrintfPcz+0x260>
        case 'f':
          sprintf(tmp, "%f", va_arg(pa, double));
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	3307      	adds	r3, #7
 800c3bc:	f023 0307 	bic.w	r3, r3, #7
 800c3c0:	f103 0208 	add.w	r2, r3, #8
 800c3c4:	607a      	str	r2, [r7, #4]
 800c3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ca:	f107 0008 	add.w	r0, r7, #8
 800c3ce:	495b      	ldr	r1, [pc, #364]	@ (800c53c <_Z12SerialPrintfPcz+0x300>)
 800c3d0:	f006 f982 	bl	80126d8 <siprintf>
          encontrado=1;
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 800c3da:	e05f      	b.n	800c49c <_Z12SerialPrintfPcz+0x260>
        case 's':
          sprintf(tmp, "%s", va_arg(pa, char *));
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	1d1a      	adds	r2, r3, #4
 800c3e0:	607a      	str	r2, [r7, #4]
 800c3e2:	681a      	ldr	r2, [r3, #0]
 800c3e4:	f107 0308 	add.w	r3, r7, #8
 800c3e8:	4955      	ldr	r1, [pc, #340]	@ (800c540 <_Z12SerialPrintfPcz+0x304>)
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f006 f974 	bl	80126d8 <siprintf>
          encontrado=1;
 800c3f0:	2301      	movs	r3, #1
 800c3f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 800c3f6:	e051      	b.n	800c49c <_Z12SerialPrintfPcz+0x260>
        case '.':
        	//asume que es flotante con decimales definidos
        	formatoFlotante[0]='%';
 800c3f8:	2325      	movs	r3, #37	@ 0x25
 800c3fa:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
        	posisionFormato=1;
 800c3fe:	2301      	movs	r3, #1
 800c400:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
        	while(*p!='f')
 800c404:	e013      	b.n	800c42e <_Z12SerialPrintfPcz+0x1f2>
        	{
        		formatoFlotante[posisionFormato]=*p;
 800c406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c40a:	7819      	ldrb	r1, [r3, #0]
 800c40c:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800c410:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c414:	4413      	add	r3, r2
 800c416:	460a      	mov	r2, r1
 800c418:	701a      	strb	r2, [r3, #0]
        		p++;
 800c41a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c41e:	3301      	adds	r3, #1
 800c420:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
        		posisionFormato++;
 800c424:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c428:	3301      	adds	r3, #1
 800c42a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
        	while(*p!='f')
 800c42e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	2b66      	cmp	r3, #102	@ 0x66
 800c436:	d1e6      	bne.n	800c406 <_Z12SerialPrintfPcz+0x1ca>
        	}
        	formatoFlotante[posisionFormato]='f';
 800c438:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800c43c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c440:	4413      	add	r3, r2
 800c442:	2266      	movs	r2, #102	@ 0x66
 800c444:	701a      	strb	r2, [r3, #0]
        	formatoFlotante[posisionFormato+1]='\0';
 800c446:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c44a:	3301      	adds	r3, #1
 800c44c:	33f8      	adds	r3, #248	@ 0xf8
 800c44e:	443b      	add	r3, r7
 800c450:	2200      	movs	r2, #0
 800c452:	f803 2c8c 	strb.w	r2, [r3, #-140]
            sprintf(tmp, formatoFlotante, va_arg(pa, double));
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	3307      	adds	r3, #7
 800c45a:	f023 0307 	bic.w	r3, r3, #7
 800c45e:	f103 0208 	add.w	r2, r3, #8
 800c462:	607a      	str	r2, [r7, #4]
 800c464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c468:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 800c46c:	f107 0008 	add.w	r0, r7, #8
 800c470:	f006 f932 	bl	80126d8 <siprintf>
            encontrado=1;
 800c474:	2301      	movs	r3, #1
 800c476:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
            break;
 800c47a:	e00f      	b.n	800c49c <_Z12SerialPrintfPcz+0x260>
        default:
          buffer[posbuffer] = *p;
 800c47c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c480:	7819      	ldrb	r1, [r3, #0]
 800c482:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 800c486:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c48a:	4413      	add	r3, r2
 800c48c:	460a      	mov	r2, r1
 800c48e:	701a      	strb	r2, [r3, #0]
          posbuffer++;
 800c490:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c494:	3301      	adds	r3, #1
 800c496:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
          break;
 800c49a:	bf00      	nop
      }
      if(encontrado==1)
 800c49c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4a0:	2b01      	cmp	r3, #1
 800c4a2:	d122      	bne.n	800c4ea <_Z12SerialPrintfPcz+0x2ae>
      {
          postmp=0;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
          while(tmp[postmp]!='\0')
 800c4aa:	e016      	b.n	800c4da <_Z12SerialPrintfPcz+0x29e>
          {
          buffer[posbuffer] = tmp[postmp];
 800c4ac:	f107 0208 	add.w	r2, r7, #8
 800c4b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c4b4:	4413      	add	r3, r2
 800c4b6:	7819      	ldrb	r1, [r3, #0]
 800c4b8:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 800c4bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c4c0:	4413      	add	r3, r2
 800c4c2:	460a      	mov	r2, r1
 800c4c4:	701a      	strb	r2, [r3, #0]
          posbuffer++;
 800c4c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
          postmp++;
 800c4d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c4d4:	3301      	adds	r3, #1
 800c4d6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
          while(tmp[postmp]!='\0')
 800c4da:	f107 0208 	add.w	r2, r7, #8
 800c4de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c4e2:	4413      	add	r3, r2
 800c4e4:	781b      	ldrb	r3, [r3, #0]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d1e0      	bne.n	800c4ac <_Z12SerialPrintfPcz+0x270>
    for (p = formato; *p; p++)
 800c4ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c4ee:	3301      	adds	r3, #1
 800c4f0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c4f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	f47f aeb6 	bne.w	800c26c <_Z12SerialPrintfPcz+0x30>
          }
      }
    }
    va_end(pa);
    buffer[posbuffer] = '\0';
 800c500:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 800c504:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c508:	4413      	add	r3, r2
 800c50a:	2200      	movs	r2, #0
 800c50c:	701a      	strb	r2, [r3, #0]
    uartx_write_text(buffer);
 800c50e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800c512:	4618      	mov	r0, r3
 800c514:	f7ff fe48 	bl	800c1a8 <_Z16uartx_write_textPc>
}
 800c518:	bf00      	nop
 800c51a:	37f8      	adds	r7, #248	@ 0xf8
 800c51c:	46bd      	mov	sp, r7
 800c51e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c522:	b004      	add	sp, #16
 800c524:	4770      	bx	lr
 800c526:	bf00      	nop
 800c528:	08014cbc 	.word	0x08014cbc
 800c52c:	08014cc0 	.word	0x08014cc0
 800c530:	08014cc4 	.word	0x08014cc4
 800c534:	08014cc8 	.word	0x08014cc8
 800c538:	08014ccc 	.word	0x08014ccc
 800c53c:	08014cd0 	.word	0x08014cd0
 800c540:	08014cd4 	.word	0x08014cd4

0800c544 <_ZN6CTimerC1Ev>:
#define INC_TIMER_HPP_

#include "main.h"
#include <stdio.h>
#include<stdbool.h>
class CTimer
 800c544:	b480      	push	{r7}
 800c546:	b083      	sub	sp, #12
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2201      	movs	r2, #1
 800c550:	64da      	str	r2, [r3, #76]	@ 0x4c
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	4618      	mov	r0, r3
 800c556:	370c      	adds	r7, #12
 800c558:	46bd      	mov	sp, r7
 800c55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55e:	4770      	bx	lr

0800c560 <_Z16IncializaSistemav>:
CControladorRampas ControladorRampas;
int tiempoZumbido=2000;
int tiempozumbando=0;
bool zumba=0;
void IncializaSistema()
{
 800c560:	b590      	push	{r4, r7, lr}
 800c562:	b095      	sub	sp, #84	@ 0x54
 800c564:	af00      	add	r7, sp, #0
	USART1_UART_Init();
 800c566:	f7ff fe35 	bl	800c1d4 <_Z16USART1_UART_Initv>
	CTimer timer;
 800c56a:	463b      	mov	r3, r7
 800c56c:	4618      	mov	r0, r3
 800c56e:	f7ff ffe9 	bl	800c544 <_ZN6CTimerC1Ev>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800c572:	2200      	movs	r2, #0
 800c574:	2100      	movs	r1, #0
 800c576:	2028      	movs	r0, #40	@ 0x28
 800c578:	f001 fdc1 	bl	800e0fe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800c57c:	2028      	movs	r0, #40	@ 0x28
 800c57e:	f001 fdda 	bl	800e136 <HAL_NVIC_EnableIRQ>

	estacion = new CestacionBaku601();
 800c582:	20f8      	movs	r0, #248	@ 0xf8
 800c584:	f005 faac 	bl	8011ae0 <_Znwj>
 800c588:	4603      	mov	r3, r0
 800c58a:	461c      	mov	r4, r3
 800c58c:	4620      	mov	r0, r4
 800c58e:	f7f5 fe8f 	bl	80022b0 <_ZN16CestacionBaku601C1Ev>
 800c592:	4b0f      	ldr	r3, [pc, #60]	@ (800c5d0 <_Z16IncializaSistemav+0x70>)
 800c594:	601c      	str	r4, [r3, #0]
	ManejadorControles=new CManejadorControles();
 800c596:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c59a:	f005 faa1 	bl	8011ae0 <_Znwj>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	461c      	mov	r4, r3
 800c5a2:	4620      	mov	r0, r4
 800c5a4:	f7fd fdfe 	bl	800a1a4 <_ZN19CManejadorControlesC1Ev>
 800c5a8:	4b0a      	ldr	r3, [pc, #40]	@ (800c5d4 <_Z16IncializaSistemav+0x74>)
 800c5aa:	601c      	str	r4, [r3, #0]
	ILI9341_Init(); //initial driver setup to drive ili9341
 800c5ac:	f7fd fa5a 	bl	8009a64 <_Z12ILI9341_Initv>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 800c5b0:	2003      	movs	r0, #3
 800c5b2:	f7fd f9f9 	bl	80099a8 <_Z20ILI9341_Set_Rotationh>
	ILI9341_Fill_Screen(BLACK);
 800c5b6:	2000      	movs	r0, #0
 800c5b8:	f7fd fbfc 	bl	8009db4 <_Z19ILI9341_Fill_Screent>
	//nicio eltimer
	timer.Init(TIM3, 1,  TIM3_IRQn);
 800c5bc:	4638      	mov	r0, r7
 800c5be:	231d      	movs	r3, #29
 800c5c0:	2201      	movs	r2, #1
 800c5c2:	4905      	ldr	r1, [pc, #20]	@ (800c5d8 <_Z16IncializaSistemav+0x78>)
 800c5c4:	f7ff fd58 	bl	800c078 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type>

}
 800c5c8:	bf00      	nop
 800c5ca:	3754      	adds	r7, #84	@ 0x54
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd90      	pop	{r4, r7, pc}
 800c5d0:	20000258 	.word	0x20000258
 800c5d4:	20000318 	.word	0x20000318
 800c5d8:	40000400 	.word	0x40000400

0800c5dc <_Z14EjecutaSistemav>:

void EjecutaSistema()
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b082      	sub	sp, #8
 800c5e0:	af00      	add	r7, sp, #0
	int n=0;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	607b      	str	r3, [r7, #4]
	ManejadorPantallas.SetEstacion(estacion);
 800c5e6:	4b19      	ldr	r3, [pc, #100]	@ (800c64c <_Z14EjecutaSistemav+0x70>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	4818      	ldr	r0, [pc, #96]	@ (800c650 <_Z14EjecutaSistemav+0x74>)
 800c5ee:	f7f7 fbf5 	bl	8003ddc <_ZN19CManejadorPantallas11SetEstacionEP13CEstacionBase>
	ManejadorPantallas.SetManejadorControles(ManejadorControles);
 800c5f2:	4b18      	ldr	r3, [pc, #96]	@ (800c654 <_Z14EjecutaSistemav+0x78>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	4619      	mov	r1, r3
 800c5f8:	4815      	ldr	r0, [pc, #84]	@ (800c650 <_Z14EjecutaSistemav+0x74>)
 800c5fa:	f7f7 fcc4 	bl	8003f86 <_ZN19CManejadorPantallas21SetManejadorControlesEP19CManejadorControles>
	if(ControladorRampas.MemoriaInicialidada()==false)
 800c5fe:	4816      	ldr	r0, [pc, #88]	@ (800c658 <_Z14EjecutaSistemav+0x7c>)
 800c600:	f7fe fe6c 	bl	800b2dc <_ZN18CControladorRampas19MemoriaInicialidadaEv>
 800c604:	4603      	mov	r3, r0
 800c606:	2b00      	cmp	r3, #0
 800c608:	bf0c      	ite	eq
 800c60a:	2301      	moveq	r3, #1
 800c60c:	2300      	movne	r3, #0
 800c60e:	b2db      	uxtb	r3, r3
 800c610:	2b00      	cmp	r3, #0
 800c612:	d003      	beq.n	800c61c <_Z14EjecutaSistemav+0x40>
		ManejadorPantallas.MuestraPantallaInicializaMemoria();
 800c614:	480e      	ldr	r0, [pc, #56]	@ (800c650 <_Z14EjecutaSistemav+0x74>)
 800c616:	f7f7 fd4e 	bl	80040b6 <_ZN19CManejadorPantallas32MuestraPantallaInicializaMemoriaEv>
 800c61a:	e002      	b.n	800c622 <_Z14EjecutaSistemav+0x46>
	else
		ManejadorPantallas.MuestraPantallaManual();
 800c61c:	480c      	ldr	r0, [pc, #48]	@ (800c650 <_Z14EjecutaSistemav+0x74>)
 800c61e:	f7f7 fbeb 	bl	8003df8 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
	while (true)
	{
		n++;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	3301      	adds	r3, #1
 800c626:	607b      	str	r3, [r7, #4]
		estacion->Procesa();
 800c628:	4b08      	ldr	r3, [pc, #32]	@ (800c64c <_Z14EjecutaSistemav+0x70>)
 800c62a:	681a      	ldr	r2, [r3, #0]
 800c62c:	4b07      	ldr	r3, [pc, #28]	@ (800c64c <_Z14EjecutaSistemav+0x70>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	3330      	adds	r3, #48	@ 0x30
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	4610      	mov	r0, r2
 800c638:	4798      	blx	r3
		ManejadorPantallas.RefrescaPantalla();
 800c63a:	4805      	ldr	r0, [pc, #20]	@ (800c650 <_Z14EjecutaSistemav+0x74>)
 800c63c:	f7f7 fc30 	bl	8003ea0 <_ZN19CManejadorPantallas16RefrescaPantallaEv>
		HAL_Delay(1);
 800c640:	2001      	movs	r0, #1
 800c642:	f001 f929 	bl	800d898 <HAL_Delay>
		n++;
 800c646:	bf00      	nop
 800c648:	e7eb      	b.n	800c622 <_Z14EjecutaSistemav+0x46>
 800c64a:	bf00      	nop
 800c64c:	20000258 	.word	0x20000258
 800c650:	2000025c 	.word	0x2000025c
 800c654:	20000318 	.word	0x20000318
 800c658:	20000364 	.word	0x20000364

0800c65c <HAL_GPIO_EXTI_Callback>:
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b082      	sub	sp, #8
 800c660:	af00      	add	r7, sp, #0
 800c662:	4603      	mov	r3, r0
 800c664:	80fb      	strh	r3, [r7, #6]
	zumba=true;
 800c666:	4b13      	ldr	r3, [pc, #76]	@ (800c6b4 <HAL_GPIO_EXTI_Callback+0x58>)
 800c668:	2201      	movs	r2, #1
 800c66a:	701a      	strb	r2, [r3, #0]
	tiempozumbando=tiempoZumbido;
 800c66c:	4b12      	ldr	r3, [pc, #72]	@ (800c6b8 <HAL_GPIO_EXTI_Callback+0x5c>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	4a12      	ldr	r2, [pc, #72]	@ (800c6bc <HAL_GPIO_EXTI_Callback+0x60>)
 800c672:	6013      	str	r3, [r2, #0]
	if(estacion!=NULL)
 800c674:	4b12      	ldr	r3, [pc, #72]	@ (800c6c0 <HAL_GPIO_EXTI_Callback+0x64>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d009      	beq.n	800c690 <HAL_GPIO_EXTI_Callback+0x34>
	{
		estacion->GPIO_INTERRUPCION(GPIO_Pin);
 800c67c:	4b10      	ldr	r3, [pc, #64]	@ (800c6c0 <HAL_GPIO_EXTI_Callback+0x64>)
 800c67e:	681a      	ldr	r2, [r3, #0]
 800c680:	4b0f      	ldr	r3, [pc, #60]	@ (800c6c0 <HAL_GPIO_EXTI_Callback+0x64>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	3358      	adds	r3, #88	@ 0x58
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	88f9      	ldrh	r1, [r7, #6]
 800c68c:	4610      	mov	r0, r2
 800c68e:	4798      	blx	r3
	}
	if(ManejadorControles!=NULL)
 800c690:	4b0c      	ldr	r3, [pc, #48]	@ (800c6c4 <HAL_GPIO_EXTI_Callback+0x68>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d009      	beq.n	800c6ac <HAL_GPIO_EXTI_Callback+0x50>
	{
		ManejadorControles->GPIO_INTERRUPCION(GPIO_Pin);
 800c698:	4b0a      	ldr	r3, [pc, #40]	@ (800c6c4 <HAL_GPIO_EXTI_Callback+0x68>)
 800c69a:	681a      	ldr	r2, [r3, #0]
 800c69c:	4b09      	ldr	r3, [pc, #36]	@ (800c6c4 <HAL_GPIO_EXTI_Callback+0x68>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	3334      	adds	r3, #52	@ 0x34
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	88f9      	ldrh	r1, [r7, #6]
 800c6a8:	4610      	mov	r0, r2
 800c6aa:	4798      	blx	r3
	}
}
 800c6ac:	bf00      	nop
 800c6ae:	3708      	adds	r7, #8
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}
 800c6b4:	20000398 	.word	0x20000398
 800c6b8:	20000004 	.word	0x20000004
 800c6bc:	20000394 	.word	0x20000394
 800c6c0:	20000258 	.word	0x20000258
 800c6c4:	20000318 	.word	0x20000318

0800c6c8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b082      	sub	sp, #8
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM3)
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	4a17      	ldr	r2, [pc, #92]	@ (800c734 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	d128      	bne.n	800c72c <HAL_TIM_PeriodElapsedCallback+0x64>
	{
		if(estacion==NULL)
 800c6da:	4b17      	ldr	r3, [pc, #92]	@ (800c738 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d023      	beq.n	800c72a <HAL_TIM_PeriodElapsedCallback+0x62>
			return;
		estacion->TimerTick();
 800c6e2:	4b15      	ldr	r3, [pc, #84]	@ (800c738 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800c6e4:	681a      	ldr	r2, [r3, #0]
 800c6e6:	4b14      	ldr	r3, [pc, #80]	@ (800c738 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	3340      	adds	r3, #64	@ 0x40
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	4610      	mov	r0, r2
 800c6f2:	4798      	blx	r3
		if(zumba)
 800c6f4:	4b11      	ldr	r3, [pc, #68]	@ (800c73c <HAL_TIM_PeriodElapsedCallback+0x74>)
 800c6f6:	781b      	ldrb	r3, [r3, #0]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d017      	beq.n	800c72c <HAL_TIM_PeriodElapsedCallback+0x64>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2,	GPIO_PinState::GPIO_PIN_SET);
 800c6fc:	2201      	movs	r2, #1
 800c6fe:	2104      	movs	r1, #4
 800c700:	480f      	ldr	r0, [pc, #60]	@ (800c740 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800c702:	f001 fecf 	bl	800e4a4 <HAL_GPIO_WritePin>
			if(tiempozumbando<=0)
 800c706:	4b0f      	ldr	r3, [pc, #60]	@ (800c744 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	dc07      	bgt.n	800c71e <HAL_TIM_PeriodElapsedCallback+0x56>
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2,	GPIO_PinState::GPIO_PIN_RESET);
 800c70e:	2200      	movs	r2, #0
 800c710:	2104      	movs	r1, #4
 800c712:	480b      	ldr	r0, [pc, #44]	@ (800c740 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800c714:	f001 fec6 	bl	800e4a4 <HAL_GPIO_WritePin>
				zumba=false;
 800c718:	4b08      	ldr	r3, [pc, #32]	@ (800c73c <HAL_TIM_PeriodElapsedCallback+0x74>)
 800c71a:	2200      	movs	r2, #0
 800c71c:	701a      	strb	r2, [r3, #0]
			}
			tiempozumbando--;
 800c71e:	4b09      	ldr	r3, [pc, #36]	@ (800c744 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	3b01      	subs	r3, #1
 800c724:	4a07      	ldr	r2, [pc, #28]	@ (800c744 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800c726:	6013      	str	r3, [r2, #0]
 800c728:	e000      	b.n	800c72c <HAL_TIM_PeriodElapsedCallback+0x64>
			return;
 800c72a:	bf00      	nop
		}
	}
}
 800c72c:	3708      	adds	r7, #8
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}
 800c732:	bf00      	nop
 800c734:	40000400 	.word	0x40000400
 800c738:	20000258 	.word	0x20000258
 800c73c:	20000398 	.word	0x20000398
 800c740:	40020000 	.word	0x40020000
 800c744:	20000394 	.word	0x20000394

0800c748 <_Z41__static_initialization_and_destruction_0ii>:
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
 800c750:	6039      	str	r1, [r7, #0]
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2b01      	cmp	r3, #1
 800c756:	d10d      	bne.n	800c774 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c75e:	4293      	cmp	r3, r2
 800c760:	d108      	bne.n	800c774 <_Z41__static_initialization_and_destruction_0ii+0x2c>
CManejadorPantallas ManejadorPantallas;
 800c762:	480f      	ldr	r0, [pc, #60]	@ (800c7a0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800c764:	f7f7 faf0 	bl	8003d48 <_ZN19CManejadorPantallasC1Ev>
CEprom Eprom;
 800c768:	480e      	ldr	r0, [pc, #56]	@ (800c7a4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800c76a:	f7f4 fe6d 	bl	8001448 <_ZN6CEpromC1Ev>
CControladorRampas ControladorRampas;
 800c76e:	480e      	ldr	r0, [pc, #56]	@ (800c7a8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800c770:	f7fe fd28 	bl	800b1c4 <_ZN18CControladorRampasC1Ev>
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d10d      	bne.n	800c796 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c780:	4293      	cmp	r3, r2
 800c782:	d108      	bne.n	800c796 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 800c784:	4808      	ldr	r0, [pc, #32]	@ (800c7a8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800c786:	f7fe fd89 	bl	800b29c <_ZN18CControladorRampasD1Ev>
CEprom Eprom;
 800c78a:	4806      	ldr	r0, [pc, #24]	@ (800c7a4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800c78c:	f7f4 feaa 	bl	80014e4 <_ZN6CEpromD1Ev>
CManejadorPantallas ManejadorPantallas;
 800c790:	4803      	ldr	r0, [pc, #12]	@ (800c7a0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800c792:	f7f7 fb03 	bl	8003d9c <_ZN19CManejadorPantallasD1Ev>
}
 800c796:	bf00      	nop
 800c798:	3708      	adds	r7, #8
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}
 800c79e:	bf00      	nop
 800c7a0:	2000025c 	.word	0x2000025c
 800c7a4:	2000031c 	.word	0x2000031c
 800c7a8:	20000364 	.word	0x20000364

0800c7ac <_GLOBAL__sub_I_estacion>:
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	af00      	add	r7, sp, #0
 800c7b0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800c7b4:	2001      	movs	r0, #1
 800c7b6:	f7ff ffc7 	bl	800c748 <_Z41__static_initialization_and_destruction_0ii>
 800c7ba:	bd80      	pop	{r7, pc}

0800c7bc <_GLOBAL__sub_D_estacion>:
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	af00      	add	r7, sp, #0
 800c7c0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800c7c4:	2000      	movs	r0, #0
 800c7c6:	f7ff ffbf 	bl	800c748 <_Z41__static_initialization_and_destruction_0ii>
 800c7ca:	bd80      	pop	{r7, pc}

0800c7cc <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b08a      	sub	sp, #40	@ 0x28
 800c7d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	613b      	str	r3, [r7, #16]
 800c7d6:	4b6e      	ldr	r3, [pc, #440]	@ (800c990 <MX_GPIO_Init+0x1c4>)
 800c7d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7da:	4a6d      	ldr	r2, [pc, #436]	@ (800c990 <MX_GPIO_Init+0x1c4>)
 800c7dc:	f043 0310 	orr.w	r3, r3, #16
 800c7e0:	6313      	str	r3, [r2, #48]	@ 0x30
 800c7e2:	4b6b      	ldr	r3, [pc, #428]	@ (800c990 <MX_GPIO_Init+0x1c4>)
 800c7e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7e6:	f003 0310 	and.w	r3, r3, #16
 800c7ea:	613b      	str	r3, [r7, #16]
 800c7ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	60fb      	str	r3, [r7, #12]
 800c7f2:	4b67      	ldr	r3, [pc, #412]	@ (800c990 <MX_GPIO_Init+0x1c4>)
 800c7f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7f6:	4a66      	ldr	r2, [pc, #408]	@ (800c990 <MX_GPIO_Init+0x1c4>)
 800c7f8:	f043 0304 	orr.w	r3, r3, #4
 800c7fc:	6313      	str	r3, [r2, #48]	@ 0x30
 800c7fe:	4b64      	ldr	r3, [pc, #400]	@ (800c990 <MX_GPIO_Init+0x1c4>)
 800c800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c802:	f003 0304 	and.w	r3, r3, #4
 800c806:	60fb      	str	r3, [r7, #12]
 800c808:	68fb      	ldr	r3, [r7, #12]
//  __HAL_RCC_GPIOF_CLK_ENABLE();
//  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c80a:	2300      	movs	r3, #0
 800c80c:	60bb      	str	r3, [r7, #8]
 800c80e:	4b60      	ldr	r3, [pc, #384]	@ (800c990 <MX_GPIO_Init+0x1c4>)
 800c810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c812:	4a5f      	ldr	r2, [pc, #380]	@ (800c990 <MX_GPIO_Init+0x1c4>)
 800c814:	f043 0301 	orr.w	r3, r3, #1
 800c818:	6313      	str	r3, [r2, #48]	@ 0x30
 800c81a:	4b5d      	ldr	r3, [pc, #372]	@ (800c990 <MX_GPIO_Init+0x1c4>)
 800c81c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c81e:	f003 0301 	and.w	r3, r3, #1
 800c822:	60bb      	str	r3, [r7, #8]
 800c824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c826:	2300      	movs	r3, #0
 800c828:	607b      	str	r3, [r7, #4]
 800c82a:	4b59      	ldr	r3, [pc, #356]	@ (800c990 <MX_GPIO_Init+0x1c4>)
 800c82c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c82e:	4a58      	ldr	r2, [pc, #352]	@ (800c990 <MX_GPIO_Init+0x1c4>)
 800c830:	f043 0302 	orr.w	r3, r3, #2
 800c834:	6313      	str	r3, [r2, #48]	@ 0x30
 800c836:	4b56      	ldr	r3, [pc, #344]	@ (800c990 <MX_GPIO_Init+0x1c4>)
 800c838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c83a:	f003 0302 	and.w	r3, r3, #2
 800c83e:	607b      	str	r3, [r7, #4]
 800c840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c842:	2300      	movs	r3, #0
 800c844:	603b      	str	r3, [r7, #0]
 800c846:	4b52      	ldr	r3, [pc, #328]	@ (800c990 <MX_GPIO_Init+0x1c4>)
 800c848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c84a:	4a51      	ldr	r2, [pc, #324]	@ (800c990 <MX_GPIO_Init+0x1c4>)
 800c84c:	f043 0308 	orr.w	r3, r3, #8
 800c850:	6313      	str	r3, [r2, #48]	@ 0x30
 800c852:	4b4f      	ldr	r3, [pc, #316]	@ (800c990 <MX_GPIO_Init+0x1c4>)
 800c854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c856:	f003 0308 	and.w	r3, r3, #8
 800c85a:	603b      	str	r3, [r7, #0]
 800c85c:	683b      	ldr	r3, [r7, #0]
//  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 800c85e:	2304      	movs	r3, #4
 800c860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c862:	2300      	movs	r3, #0
 800c864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c866:	2300      	movs	r3, #0
 800c868:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 800c86a:	f107 0314 	add.w	r3, r7, #20
 800c86e:	4619      	mov	r1, r3
 800c870:	4848      	ldr	r0, [pc, #288]	@ (800c994 <MX_GPIO_Init+0x1c8>)
 800c872:	f001 fc7b 	bl	800e16c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 800c876:	2368      	movs	r3, #104	@ 0x68
 800c878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c87a:	2301      	movs	r3, #1
 800c87c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c87e:	2300      	movs	r3, #0
 800c880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c882:	2303      	movs	r3, #3
 800c884:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800c886:	f107 0314 	add.w	r3, r7, #20
 800c88a:	4619      	mov	r1, r3
 800c88c:	4841      	ldr	r0, [pc, #260]	@ (800c994 <MX_GPIO_Init+0x1c8>)
 800c88e:	f001 fc6d 	bl	800e16c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 800c892:	2310      	movs	r3, #16
 800c894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c896:	2300      	movs	r3, #0
 800c898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c89a:	2301      	movs	r3, #1
 800c89c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 800c89e:	f107 0314 	add.w	r3, r7, #20
 800c8a2:	4619      	mov	r1, r3
 800c8a4:	483b      	ldr	r0, [pc, #236]	@ (800c994 <MX_GPIO_Init+0x1c8>)
 800c8a6:	f001 fc61 	bl	800e16c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 800c8aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c8ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 800c8b8:	f107 0314 	add.w	r3, r7, #20
 800c8bc:	4619      	mov	r1, r3
 800c8be:	4836      	ldr	r0, [pc, #216]	@ (800c998 <MX_GPIO_Init+0x1cc>)
 800c8c0:	f001 fc54 	bl	800e16c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800c8c4:	2332      	movs	r3, #50	@ 0x32
 800c8c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c8c8:	2302      	movs	r3, #2
 800c8ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c8d0:	2303      	movs	r3, #3
 800c8d2:	623b      	str	r3, [r7, #32]
  //GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c8d4:	f107 0314 	add.w	r3, r7, #20
 800c8d8:	4619      	mov	r1, r3
 800c8da:	482f      	ldr	r0, [pc, #188]	@ (800c998 <MX_GPIO_Init+0x1cc>)
 800c8dc:	f001 fc46 	bl	800e16c <HAL_GPIO_Init>
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
////  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
//  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800c8e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c8e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c8e6:	2302      	movs	r3, #2
 800c8e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c8ee:	2303      	movs	r3, #3
 800c8f0:	623b      	str	r3, [r7, #32]
  //GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800c8f2:	f107 0314 	add.w	r3, r7, #20
 800c8f6:	4619      	mov	r1, r3
 800c8f8:	4828      	ldr	r0, [pc, #160]	@ (800c99c <MX_GPIO_Init+0x1d0>)
 800c8fa:	f001 fc37 	bl	800e16c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800c8fe:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 800c902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c904:	2301      	movs	r3, #1
 800c906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c908:	2300      	movs	r3, #0
 800c90a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c90c:	2300      	movs	r3, #0
 800c90e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c910:	f107 0314 	add.w	r3, r7, #20
 800c914:	4619      	mov	r1, r3
 800c916:	4821      	ldr	r0, [pc, #132]	@ (800c99c <MX_GPIO_Init+0x1d0>)
 800c918:	f001 fc28 	bl	800e16c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800c91c:	2340      	movs	r3, #64	@ 0x40
 800c91e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c920:	2301      	movs	r3, #1
 800c922:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c924:	2300      	movs	r3, #0
 800c926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c928:	2300      	movs	r3, #0
 800c92a:	623b      	str	r3, [r7, #32]
  //HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800c92c:	2380      	movs	r3, #128	@ 0x80
 800c92e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c930:	2300      	movs	r3, #0
 800c932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c934:	2300      	movs	r3, #0
 800c936:	61fb      	str	r3, [r7, #28]
  //HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 800c938:	2323      	movs	r3, #35	@ 0x23
 800c93a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c93c:	2301      	movs	r3, #1
 800c93e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c940:	2300      	movs	r3, #0
 800c942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c944:	2303      	movs	r3, #3
 800c946:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c948:	f107 0314 	add.w	r3, r7, #20
 800c94c:	4619      	mov	r1, r3
 800c94e:	4812      	ldr	r0, [pc, #72]	@ (800c998 <MX_GPIO_Init+0x1cc>)
 800c950:	f001 fc0c 	bl	800e16c <HAL_GPIO_Init>
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  //GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
//  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800c954:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800c958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c95a:	2302      	movs	r3, #2
 800c95c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c95e:	2300      	movs	r3, #0
 800c960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c962:	2303      	movs	r3, #3
 800c964:	623b      	str	r3, [r7, #32]
//  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
//  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 800c966:	2200      	movs	r2, #0
 800c968:	2168      	movs	r1, #104	@ 0x68
 800c96a:	480a      	ldr	r0, [pc, #40]	@ (800c994 <MX_GPIO_Init+0x1c8>)
 800c96c:	f001 fd9a 	bl	800e4a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800c970:	2200      	movs	r2, #0
 800c972:	f44f 4184 	mov.w	r1, #16896	@ 0x4200
 800c976:	4809      	ldr	r0, [pc, #36]	@ (800c99c <MX_GPIO_Init+0x1d0>)
 800c978:	f001 fd94 	bl	800e4a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
//  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 800c97c:	2200      	movs	r2, #0
 800c97e:	2123      	movs	r1, #35	@ 0x23
 800c980:	4805      	ldr	r0, [pc, #20]	@ (800c998 <MX_GPIO_Init+0x1cc>)
 800c982:	f001 fd8f 	bl	800e4a4 <HAL_GPIO_WritePin>

}
 800c986:	bf00      	nop
 800c988:	3728      	adds	r7, #40	@ 0x28
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}
 800c98e:	bf00      	nop
 800c990:	40023800 	.word	0x40023800
 800c994:	40021000 	.word	0x40021000
 800c998:	40020800 	.word	0x40020800
 800c99c:	40020400 	.word	0x40020400

0800c9a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b082      	sub	sp, #8
 800c9a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800c9a6:	f000 ff05 	bl	800d7b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800c9aa:	f000 f82f 	bl	800ca0c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800c9ae:	f000 fa83 	bl	800ceb8 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 800c9b2:	f000 f89d 	bl	800caf0 <_ZL12MX_ADC1_Initv>
  MX_I2C1_Init();
 800c9b6:	f000 f8f7 	bl	800cba8 <_ZL12MX_I2C1_Initv>
  MX_SPI1_Init();
 800c9ba:	f000 f929 	bl	800cc10 <_ZL12MX_SPI1_Initv>
  MX_TIM2_Init();
 800c9be:	f000 f963 	bl	800cc88 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 800c9c2:	f000 f9ef 	bl	800cda4 <_ZL12MX_TIM3_Initv>
  MX_USART1_UART_Init();
 800c9c6:	f000 fa49 	bl	800ce5c <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 800c9ca:	480d      	ldr	r0, [pc, #52]	@ (800ca00 <main+0x60>)
 800c9cc:	f003 fd12 	bl	80103f4 <HAL_TIM_Base_Start_IT>
	IncializaSistema();
 800c9d0:	f7ff fdc6 	bl	800c560 <_Z16IncializaSistemav>
	EjecutaSistema();
 800c9d4:	f7ff fe02 	bl	800c5dc <_Z14EjecutaSistemav>
  USART1_UART_Init();
 800c9d8:	f7ff fbfc 	bl	800c1d4 <_Z16USART1_UART_Initv>
	  HAL_ADC_Start(&hadc1);
 800c9dc:	4809      	ldr	r0, [pc, #36]	@ (800ca04 <main+0x64>)
 800c9de:	f000 ffc3 	bl	800d968 <HAL_ADC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		int valor=HAL_ADC_GetValue(&hadc1);
 800c9e2:	4808      	ldr	r0, [pc, #32]	@ (800ca04 <main+0x64>)
 800c9e4:	f001 f874 	bl	800dad0 <HAL_ADC_GetValue>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	607b      	str	r3, [r7, #4]
		SerialPrintf((char*)"\r\n analogo: %d",valor);
 800c9ec:	6879      	ldr	r1, [r7, #4]
 800c9ee:	4806      	ldr	r0, [pc, #24]	@ (800ca08 <main+0x68>)
 800c9f0:	f7ff fc24 	bl	800c23c <_Z12SerialPrintfPcz>
		HAL_Delay(500);
 800c9f4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800c9f8:	f000 ff4e 	bl	800d898 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800c9fc:	bf00      	nop
 800c9fe:	e7f0      	b.n	800c9e2 <main+0x42>
 800ca00:	200004d8 	.word	0x200004d8
 800ca04:	2000039c 	.word	0x2000039c
 800ca08:	08014cd8 	.word	0x08014cd8

0800ca0c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b094      	sub	sp, #80	@ 0x50
 800ca10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ca12:	f107 0320 	add.w	r3, r7, #32
 800ca16:	2230      	movs	r2, #48	@ 0x30
 800ca18:	2100      	movs	r1, #0
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f005 febf 	bl	801279e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ca20:	f107 030c 	add.w	r3, r7, #12
 800ca24:	2200      	movs	r2, #0
 800ca26:	601a      	str	r2, [r3, #0]
 800ca28:	605a      	str	r2, [r3, #4]
 800ca2a:	609a      	str	r2, [r3, #8]
 800ca2c:	60da      	str	r2, [r3, #12]
 800ca2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800ca30:	2300      	movs	r3, #0
 800ca32:	60bb      	str	r3, [r7, #8]
 800ca34:	4b2c      	ldr	r3, [pc, #176]	@ (800cae8 <_Z18SystemClock_Configv+0xdc>)
 800ca36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca38:	4a2b      	ldr	r2, [pc, #172]	@ (800cae8 <_Z18SystemClock_Configv+0xdc>)
 800ca3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ca3e:	6413      	str	r3, [r2, #64]	@ 0x40
 800ca40:	4b29      	ldr	r3, [pc, #164]	@ (800cae8 <_Z18SystemClock_Configv+0xdc>)
 800ca42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ca48:	60bb      	str	r3, [r7, #8]
 800ca4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	607b      	str	r3, [r7, #4]
 800ca50:	4b26      	ldr	r3, [pc, #152]	@ (800caec <_Z18SystemClock_Configv+0xe0>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	4a25      	ldr	r2, [pc, #148]	@ (800caec <_Z18SystemClock_Configv+0xe0>)
 800ca56:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ca5a:	6013      	str	r3, [r2, #0]
 800ca5c:	4b23      	ldr	r3, [pc, #140]	@ (800caec <_Z18SystemClock_Configv+0xe0>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ca64:	607b      	str	r3, [r7, #4]
 800ca66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800ca68:	2302      	movs	r3, #2
 800ca6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800ca70:	2310      	movs	r3, #16
 800ca72:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ca74:	2302      	movs	r3, #2
 800ca76:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800ca7c:	2308      	movs	r3, #8
 800ca7e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800ca80:	2348      	movs	r3, #72	@ 0x48
 800ca82:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800ca84:	2302      	movs	r3, #2
 800ca86:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800ca88:	2304      	movs	r3, #4
 800ca8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ca8c:	f107 0320 	add.w	r3, r7, #32
 800ca90:	4618      	mov	r0, r3
 800ca92:	f002 fd5d 	bl	800f550 <HAL_RCC_OscConfig>
 800ca96:	4603      	mov	r3, r0
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	bf14      	ite	ne
 800ca9c:	2301      	movne	r3, #1
 800ca9e:	2300      	moveq	r3, #0
 800caa0:	b2db      	uxtb	r3, r3
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d001      	beq.n	800caaa <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800caa6:	f000 fb0d 	bl	800d0c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800caaa:	230f      	movs	r3, #15
 800caac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800caae:	2302      	movs	r3, #2
 800cab0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800cab2:	2300      	movs	r3, #0
 800cab4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800cab6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800caba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800cabc:	2300      	movs	r3, #0
 800cabe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800cac0:	f107 030c 	add.w	r3, r7, #12
 800cac4:	2102      	movs	r1, #2
 800cac6:	4618      	mov	r0, r3
 800cac8:	f002 ffba 	bl	800fa40 <HAL_RCC_ClockConfig>
 800cacc:	4603      	mov	r3, r0
 800cace:	2b00      	cmp	r3, #0
 800cad0:	bf14      	ite	ne
 800cad2:	2301      	movne	r3, #1
 800cad4:	2300      	moveq	r3, #0
 800cad6:	b2db      	uxtb	r3, r3
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d001      	beq.n	800cae0 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 800cadc:	f000 faf2 	bl	800d0c4 <Error_Handler>
  }
}
 800cae0:	bf00      	nop
 800cae2:	3750      	adds	r7, #80	@ 0x50
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}
 800cae8:	40023800 	.word	0x40023800
 800caec:	40007000 	.word	0x40007000

0800caf0 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b084      	sub	sp, #16
 800caf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800caf6:	463b      	mov	r3, r7
 800caf8:	2200      	movs	r2, #0
 800cafa:	601a      	str	r2, [r3, #0]
 800cafc:	605a      	str	r2, [r3, #4]
 800cafe:	609a      	str	r2, [r3, #8]
 800cb00:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800cb02:	4b26      	ldr	r3, [pc, #152]	@ (800cb9c <_ZL12MX_ADC1_Initv+0xac>)
 800cb04:	4a26      	ldr	r2, [pc, #152]	@ (800cba0 <_ZL12MX_ADC1_Initv+0xb0>)
 800cb06:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800cb08:	4b24      	ldr	r3, [pc, #144]	@ (800cb9c <_ZL12MX_ADC1_Initv+0xac>)
 800cb0a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800cb0e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800cb10:	4b22      	ldr	r3, [pc, #136]	@ (800cb9c <_ZL12MX_ADC1_Initv+0xac>)
 800cb12:	2200      	movs	r2, #0
 800cb14:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800cb16:	4b21      	ldr	r3, [pc, #132]	@ (800cb9c <_ZL12MX_ADC1_Initv+0xac>)
 800cb18:	2200      	movs	r2, #0
 800cb1a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800cb1c:	4b1f      	ldr	r3, [pc, #124]	@ (800cb9c <_ZL12MX_ADC1_Initv+0xac>)
 800cb1e:	2201      	movs	r2, #1
 800cb20:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800cb22:	4b1e      	ldr	r3, [pc, #120]	@ (800cb9c <_ZL12MX_ADC1_Initv+0xac>)
 800cb24:	2200      	movs	r2, #0
 800cb26:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800cb2a:	4b1c      	ldr	r3, [pc, #112]	@ (800cb9c <_ZL12MX_ADC1_Initv+0xac>)
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800cb30:	4b1a      	ldr	r3, [pc, #104]	@ (800cb9c <_ZL12MX_ADC1_Initv+0xac>)
 800cb32:	4a1c      	ldr	r2, [pc, #112]	@ (800cba4 <_ZL12MX_ADC1_Initv+0xb4>)
 800cb34:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800cb36:	4b19      	ldr	r3, [pc, #100]	@ (800cb9c <_ZL12MX_ADC1_Initv+0xac>)
 800cb38:	2200      	movs	r2, #0
 800cb3a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800cb3c:	4b17      	ldr	r3, [pc, #92]	@ (800cb9c <_ZL12MX_ADC1_Initv+0xac>)
 800cb3e:	2201      	movs	r2, #1
 800cb40:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800cb42:	4b16      	ldr	r3, [pc, #88]	@ (800cb9c <_ZL12MX_ADC1_Initv+0xac>)
 800cb44:	2200      	movs	r2, #0
 800cb46:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800cb4a:	4b14      	ldr	r3, [pc, #80]	@ (800cb9c <_ZL12MX_ADC1_Initv+0xac>)
 800cb4c:	2201      	movs	r2, #1
 800cb4e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800cb50:	4812      	ldr	r0, [pc, #72]	@ (800cb9c <_ZL12MX_ADC1_Initv+0xac>)
 800cb52:	f000 fec5 	bl	800d8e0 <HAL_ADC_Init>
 800cb56:	4603      	mov	r3, r0
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	bf14      	ite	ne
 800cb5c:	2301      	movne	r3, #1
 800cb5e:	2300      	moveq	r3, #0
 800cb60:	b2db      	uxtb	r3, r3
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d001      	beq.n	800cb6a <_ZL12MX_ADC1_Initv+0x7a>
  {
    Error_Handler();
 800cb66:	f000 faad 	bl	800d0c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800cb6a:	2303      	movs	r3, #3
 800cb6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800cb6e:	2301      	movs	r3, #1
 800cb70:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800cb72:	2300      	movs	r3, #0
 800cb74:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cb76:	463b      	mov	r3, r7
 800cb78:	4619      	mov	r1, r3
 800cb7a:	4808      	ldr	r0, [pc, #32]	@ (800cb9c <_ZL12MX_ADC1_Initv+0xac>)
 800cb7c:	f000 ffb6 	bl	800daec <HAL_ADC_ConfigChannel>
 800cb80:	4603      	mov	r3, r0
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	bf14      	ite	ne
 800cb86:	2301      	movne	r3, #1
 800cb88:	2300      	moveq	r3, #0
 800cb8a:	b2db      	uxtb	r3, r3
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d001      	beq.n	800cb94 <_ZL12MX_ADC1_Initv+0xa4>
  {
    Error_Handler();
 800cb90:	f000 fa98 	bl	800d0c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800cb94:	bf00      	nop
 800cb96:	3710      	adds	r7, #16
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}
 800cb9c:	2000039c 	.word	0x2000039c
 800cba0:	40012000 	.word	0x40012000
 800cba4:	0f000001 	.word	0x0f000001

0800cba8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800cbac:	4b15      	ldr	r3, [pc, #84]	@ (800cc04 <_ZL12MX_I2C1_Initv+0x5c>)
 800cbae:	4a16      	ldr	r2, [pc, #88]	@ (800cc08 <_ZL12MX_I2C1_Initv+0x60>)
 800cbb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800cbb2:	4b14      	ldr	r3, [pc, #80]	@ (800cc04 <_ZL12MX_I2C1_Initv+0x5c>)
 800cbb4:	4a15      	ldr	r2, [pc, #84]	@ (800cc0c <_ZL12MX_I2C1_Initv+0x64>)
 800cbb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800cbb8:	4b12      	ldr	r3, [pc, #72]	@ (800cc04 <_ZL12MX_I2C1_Initv+0x5c>)
 800cbba:	2200      	movs	r2, #0
 800cbbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800cbbe:	4b11      	ldr	r3, [pc, #68]	@ (800cc04 <_ZL12MX_I2C1_Initv+0x5c>)
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800cbc4:	4b0f      	ldr	r3, [pc, #60]	@ (800cc04 <_ZL12MX_I2C1_Initv+0x5c>)
 800cbc6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800cbca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800cbcc:	4b0d      	ldr	r3, [pc, #52]	@ (800cc04 <_ZL12MX_I2C1_Initv+0x5c>)
 800cbce:	2200      	movs	r2, #0
 800cbd0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800cbd2:	4b0c      	ldr	r3, [pc, #48]	@ (800cc04 <_ZL12MX_I2C1_Initv+0x5c>)
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800cbd8:	4b0a      	ldr	r3, [pc, #40]	@ (800cc04 <_ZL12MX_I2C1_Initv+0x5c>)
 800cbda:	2200      	movs	r2, #0
 800cbdc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800cbde:	4b09      	ldr	r3, [pc, #36]	@ (800cc04 <_ZL12MX_I2C1_Initv+0x5c>)
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800cbe4:	4807      	ldr	r0, [pc, #28]	@ (800cc04 <_ZL12MX_I2C1_Initv+0x5c>)
 800cbe6:	f001 fc8f 	bl	800e508 <HAL_I2C_Init>
 800cbea:	4603      	mov	r3, r0
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	bf14      	ite	ne
 800cbf0:	2301      	movne	r3, #1
 800cbf2:	2300      	moveq	r3, #0
 800cbf4:	b2db      	uxtb	r3, r3
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d001      	beq.n	800cbfe <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800cbfa:	f000 fa63 	bl	800d0c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800cbfe:	bf00      	nop
 800cc00:	bd80      	pop	{r7, pc}
 800cc02:	bf00      	nop
 800cc04:	200003e4 	.word	0x200003e4
 800cc08:	40005400 	.word	0x40005400
 800cc0c:	000186a0 	.word	0x000186a0

0800cc10 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800cc14:	4b1a      	ldr	r3, [pc, #104]	@ (800cc80 <_ZL12MX_SPI1_Initv+0x70>)
 800cc16:	4a1b      	ldr	r2, [pc, #108]	@ (800cc84 <_ZL12MX_SPI1_Initv+0x74>)
 800cc18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800cc1a:	4b19      	ldr	r3, [pc, #100]	@ (800cc80 <_ZL12MX_SPI1_Initv+0x70>)
 800cc1c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800cc20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800cc22:	4b17      	ldr	r3, [pc, #92]	@ (800cc80 <_ZL12MX_SPI1_Initv+0x70>)
 800cc24:	2200      	movs	r2, #0
 800cc26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800cc28:	4b15      	ldr	r3, [pc, #84]	@ (800cc80 <_ZL12MX_SPI1_Initv+0x70>)
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800cc2e:	4b14      	ldr	r3, [pc, #80]	@ (800cc80 <_ZL12MX_SPI1_Initv+0x70>)
 800cc30:	2200      	movs	r2, #0
 800cc32:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800cc34:	4b12      	ldr	r3, [pc, #72]	@ (800cc80 <_ZL12MX_SPI1_Initv+0x70>)
 800cc36:	2200      	movs	r2, #0
 800cc38:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800cc3a:	4b11      	ldr	r3, [pc, #68]	@ (800cc80 <_ZL12MX_SPI1_Initv+0x70>)
 800cc3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cc40:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800cc42:	4b0f      	ldr	r3, [pc, #60]	@ (800cc80 <_ZL12MX_SPI1_Initv+0x70>)
 800cc44:	2200      	movs	r2, #0
 800cc46:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800cc48:	4b0d      	ldr	r3, [pc, #52]	@ (800cc80 <_ZL12MX_SPI1_Initv+0x70>)
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800cc4e:	4b0c      	ldr	r3, [pc, #48]	@ (800cc80 <_ZL12MX_SPI1_Initv+0x70>)
 800cc50:	2200      	movs	r2, #0
 800cc52:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cc54:	4b0a      	ldr	r3, [pc, #40]	@ (800cc80 <_ZL12MX_SPI1_Initv+0x70>)
 800cc56:	2200      	movs	r2, #0
 800cc58:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800cc5a:	4b09      	ldr	r3, [pc, #36]	@ (800cc80 <_ZL12MX_SPI1_Initv+0x70>)
 800cc5c:	220a      	movs	r2, #10
 800cc5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800cc60:	4807      	ldr	r0, [pc, #28]	@ (800cc80 <_ZL12MX_SPI1_Initv+0x70>)
 800cc62:	f003 f8cd 	bl	800fe00 <HAL_SPI_Init>
 800cc66:	4603      	mov	r3, r0
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	bf14      	ite	ne
 800cc6c:	2301      	movne	r3, #1
 800cc6e:	2300      	moveq	r3, #0
 800cc70:	b2db      	uxtb	r3, r3
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d001      	beq.n	800cc7a <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800cc76:	f000 fa25 	bl	800d0c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800cc7a:	bf00      	nop
 800cc7c:	bd80      	pop	{r7, pc}
 800cc7e:	bf00      	nop
 800cc80:	20000438 	.word	0x20000438
 800cc84:	40013000 	.word	0x40013000

0800cc88 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b08e      	sub	sp, #56	@ 0x38
 800cc8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800cc8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800cc92:	2200      	movs	r2, #0
 800cc94:	601a      	str	r2, [r3, #0]
 800cc96:	605a      	str	r2, [r3, #4]
 800cc98:	609a      	str	r2, [r3, #8]
 800cc9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cc9c:	f107 0320 	add.w	r3, r7, #32
 800cca0:	2200      	movs	r2, #0
 800cca2:	601a      	str	r2, [r3, #0]
 800cca4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800cca6:	1d3b      	adds	r3, r7, #4
 800cca8:	2200      	movs	r2, #0
 800ccaa:	601a      	str	r2, [r3, #0]
 800ccac:	605a      	str	r2, [r3, #4]
 800ccae:	609a      	str	r2, [r3, #8]
 800ccb0:	60da      	str	r2, [r3, #12]
 800ccb2:	611a      	str	r2, [r3, #16]
 800ccb4:	615a      	str	r2, [r3, #20]
 800ccb6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800ccb8:	4b39      	ldr	r3, [pc, #228]	@ (800cda0 <_ZL12MX_TIM2_Initv+0x118>)
 800ccba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800ccbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800ccc0:	4b37      	ldr	r3, [pc, #220]	@ (800cda0 <_ZL12MX_TIM2_Initv+0x118>)
 800ccc2:	2247      	movs	r2, #71	@ 0x47
 800ccc4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ccc6:	4b36      	ldr	r3, [pc, #216]	@ (800cda0 <_ZL12MX_TIM2_Initv+0x118>)
 800ccc8:	2200      	movs	r2, #0
 800ccca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800cccc:	4b34      	ldr	r3, [pc, #208]	@ (800cda0 <_ZL12MX_TIM2_Initv+0x118>)
 800ccce:	2263      	movs	r2, #99	@ 0x63
 800ccd0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ccd2:	4b33      	ldr	r3, [pc, #204]	@ (800cda0 <_ZL12MX_TIM2_Initv+0x118>)
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800ccd8:	4b31      	ldr	r3, [pc, #196]	@ (800cda0 <_ZL12MX_TIM2_Initv+0x118>)
 800ccda:	2280      	movs	r2, #128	@ 0x80
 800ccdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800ccde:	4830      	ldr	r0, [pc, #192]	@ (800cda0 <_ZL12MX_TIM2_Initv+0x118>)
 800cce0:	f003 fb38 	bl	8010354 <HAL_TIM_Base_Init>
 800cce4:	4603      	mov	r3, r0
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	bf14      	ite	ne
 800ccea:	2301      	movne	r3, #1
 800ccec:	2300      	moveq	r3, #0
 800ccee:	b2db      	uxtb	r3, r3
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d001      	beq.n	800ccf8 <_ZL12MX_TIM2_Initv+0x70>
  {
    Error_Handler();
 800ccf4:	f000 f9e6 	bl	800d0c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ccf8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ccfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800ccfe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800cd02:	4619      	mov	r1, r3
 800cd04:	4826      	ldr	r0, [pc, #152]	@ (800cda0 <_ZL12MX_TIM2_Initv+0x118>)
 800cd06:	f003 fe93 	bl	8010a30 <HAL_TIM_ConfigClockSource>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	bf14      	ite	ne
 800cd10:	2301      	movne	r3, #1
 800cd12:	2300      	moveq	r3, #0
 800cd14:	b2db      	uxtb	r3, r3
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d001      	beq.n	800cd1e <_ZL12MX_TIM2_Initv+0x96>
  {
    Error_Handler();
 800cd1a:	f000 f9d3 	bl	800d0c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800cd1e:	4820      	ldr	r0, [pc, #128]	@ (800cda0 <_ZL12MX_TIM2_Initv+0x118>)
 800cd20:	f003 fbca 	bl	80104b8 <HAL_TIM_PWM_Init>
 800cd24:	4603      	mov	r3, r0
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	bf14      	ite	ne
 800cd2a:	2301      	movne	r3, #1
 800cd2c:	2300      	moveq	r3, #0
 800cd2e:	b2db      	uxtb	r3, r3
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d001      	beq.n	800cd38 <_ZL12MX_TIM2_Initv+0xb0>
  {
    Error_Handler();
 800cd34:	f000 f9c6 	bl	800d0c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cd38:	2300      	movs	r3, #0
 800cd3a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800cd40:	f107 0320 	add.w	r3, r7, #32
 800cd44:	4619      	mov	r1, r3
 800cd46:	4816      	ldr	r0, [pc, #88]	@ (800cda0 <_ZL12MX_TIM2_Initv+0x118>)
 800cd48:	f004 fa3a 	bl	80111c0 <HAL_TIMEx_MasterConfigSynchronization>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	bf14      	ite	ne
 800cd52:	2301      	movne	r3, #1
 800cd54:	2300      	moveq	r3, #0
 800cd56:	b2db      	uxtb	r3, r3
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d001      	beq.n	800cd60 <_ZL12MX_TIM2_Initv+0xd8>
  {
    Error_Handler();
 800cd5c:	f000 f9b2 	bl	800d0c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800cd60:	2360      	movs	r3, #96	@ 0x60
 800cd62:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800cd64:	2300      	movs	r3, #0
 800cd66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800cd70:	1d3b      	adds	r3, r7, #4
 800cd72:	2200      	movs	r2, #0
 800cd74:	4619      	mov	r1, r3
 800cd76:	480a      	ldr	r0, [pc, #40]	@ (800cda0 <_ZL12MX_TIM2_Initv+0x118>)
 800cd78:	f003 fd98 	bl	80108ac <HAL_TIM_PWM_ConfigChannel>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	bf14      	ite	ne
 800cd82:	2301      	movne	r3, #1
 800cd84:	2300      	moveq	r3, #0
 800cd86:	b2db      	uxtb	r3, r3
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d001      	beq.n	800cd90 <_ZL12MX_TIM2_Initv+0x108>
  {
    Error_Handler();
 800cd8c:	f000 f99a 	bl	800d0c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800cd90:	4803      	ldr	r0, [pc, #12]	@ (800cda0 <_ZL12MX_TIM2_Initv+0x118>)
 800cd92:	f000 fb19 	bl	800d3c8 <HAL_TIM_MspPostInit>

}
 800cd96:	bf00      	nop
 800cd98:	3738      	adds	r7, #56	@ 0x38
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}
 800cd9e:	bf00      	nop
 800cda0:	20000490 	.word	0x20000490

0800cda4 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b086      	sub	sp, #24
 800cda8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800cdaa:	f107 0308 	add.w	r3, r7, #8
 800cdae:	2200      	movs	r2, #0
 800cdb0:	601a      	str	r2, [r3, #0]
 800cdb2:	605a      	str	r2, [r3, #4]
 800cdb4:	609a      	str	r2, [r3, #8]
 800cdb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cdb8:	463b      	mov	r3, r7
 800cdba:	2200      	movs	r2, #0
 800cdbc:	601a      	str	r2, [r3, #0]
 800cdbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800cdc0:	4b24      	ldr	r3, [pc, #144]	@ (800ce54 <_ZL12MX_TIM3_Initv+0xb0>)
 800cdc2:	4a25      	ldr	r2, [pc, #148]	@ (800ce58 <_ZL12MX_TIM3_Initv+0xb4>)
 800cdc4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800cdc6:	4b23      	ldr	r3, [pc, #140]	@ (800ce54 <_ZL12MX_TIM3_Initv+0xb0>)
 800cdc8:	2200      	movs	r2, #0
 800cdca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cdcc:	4b21      	ldr	r3, [pc, #132]	@ (800ce54 <_ZL12MX_TIM3_Initv+0xb0>)
 800cdce:	2200      	movs	r2, #0
 800cdd0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800cdd2:	4b20      	ldr	r3, [pc, #128]	@ (800ce54 <_ZL12MX_TIM3_Initv+0xb0>)
 800cdd4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cdd8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cdda:	4b1e      	ldr	r3, [pc, #120]	@ (800ce54 <_ZL12MX_TIM3_Initv+0xb0>)
 800cddc:	2200      	movs	r2, #0
 800cdde:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cde0:	4b1c      	ldr	r3, [pc, #112]	@ (800ce54 <_ZL12MX_TIM3_Initv+0xb0>)
 800cde2:	2200      	movs	r2, #0
 800cde4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800cde6:	481b      	ldr	r0, [pc, #108]	@ (800ce54 <_ZL12MX_TIM3_Initv+0xb0>)
 800cde8:	f003 fab4 	bl	8010354 <HAL_TIM_Base_Init>
 800cdec:	4603      	mov	r3, r0
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	bf14      	ite	ne
 800cdf2:	2301      	movne	r3, #1
 800cdf4:	2300      	moveq	r3, #0
 800cdf6:	b2db      	uxtb	r3, r3
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d001      	beq.n	800ce00 <_ZL12MX_TIM3_Initv+0x5c>
  {
    Error_Handler();
 800cdfc:	f000 f962 	bl	800d0c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ce00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ce04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800ce06:	f107 0308 	add.w	r3, r7, #8
 800ce0a:	4619      	mov	r1, r3
 800ce0c:	4811      	ldr	r0, [pc, #68]	@ (800ce54 <_ZL12MX_TIM3_Initv+0xb0>)
 800ce0e:	f003 fe0f 	bl	8010a30 <HAL_TIM_ConfigClockSource>
 800ce12:	4603      	mov	r3, r0
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	bf14      	ite	ne
 800ce18:	2301      	movne	r3, #1
 800ce1a:	2300      	moveq	r3, #0
 800ce1c:	b2db      	uxtb	r3, r3
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d001      	beq.n	800ce26 <_ZL12MX_TIM3_Initv+0x82>
  {
    Error_Handler();
 800ce22:	f000 f94f 	bl	800d0c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ce26:	2300      	movs	r3, #0
 800ce28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800ce2e:	463b      	mov	r3, r7
 800ce30:	4619      	mov	r1, r3
 800ce32:	4808      	ldr	r0, [pc, #32]	@ (800ce54 <_ZL12MX_TIM3_Initv+0xb0>)
 800ce34:	f004 f9c4 	bl	80111c0 <HAL_TIMEx_MasterConfigSynchronization>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	bf14      	ite	ne
 800ce3e:	2301      	movne	r3, #1
 800ce40:	2300      	moveq	r3, #0
 800ce42:	b2db      	uxtb	r3, r3
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d001      	beq.n	800ce4c <_ZL12MX_TIM3_Initv+0xa8>
  {
    Error_Handler();
 800ce48:	f000 f93c 	bl	800d0c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800ce4c:	bf00      	nop
 800ce4e:	3718      	adds	r7, #24
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}
 800ce54:	200004d8 	.word	0x200004d8
 800ce58:	40000400 	.word	0x40000400

0800ce5c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800ce60:	4b13      	ldr	r3, [pc, #76]	@ (800ceb0 <_ZL19MX_USART1_UART_Initv+0x54>)
 800ce62:	4a14      	ldr	r2, [pc, #80]	@ (800ceb4 <_ZL19MX_USART1_UART_Initv+0x58>)
 800ce64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800ce66:	4b12      	ldr	r3, [pc, #72]	@ (800ceb0 <_ZL19MX_USART1_UART_Initv+0x54>)
 800ce68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800ce6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800ce6e:	4b10      	ldr	r3, [pc, #64]	@ (800ceb0 <_ZL19MX_USART1_UART_Initv+0x54>)
 800ce70:	2200      	movs	r2, #0
 800ce72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800ce74:	4b0e      	ldr	r3, [pc, #56]	@ (800ceb0 <_ZL19MX_USART1_UART_Initv+0x54>)
 800ce76:	2200      	movs	r2, #0
 800ce78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800ce7a:	4b0d      	ldr	r3, [pc, #52]	@ (800ceb0 <_ZL19MX_USART1_UART_Initv+0x54>)
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800ce80:	4b0b      	ldr	r3, [pc, #44]	@ (800ceb0 <_ZL19MX_USART1_UART_Initv+0x54>)
 800ce82:	220c      	movs	r2, #12
 800ce84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ce86:	4b0a      	ldr	r3, [pc, #40]	@ (800ceb0 <_ZL19MX_USART1_UART_Initv+0x54>)
 800ce88:	2200      	movs	r2, #0
 800ce8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800ce8c:	4b08      	ldr	r3, [pc, #32]	@ (800ceb0 <_ZL19MX_USART1_UART_Initv+0x54>)
 800ce8e:	2200      	movs	r2, #0
 800ce90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800ce92:	4807      	ldr	r0, [pc, #28]	@ (800ceb0 <_ZL19MX_USART1_UART_Initv+0x54>)
 800ce94:	f004 fa16 	bl	80112c4 <HAL_UART_Init>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	bf14      	ite	ne
 800ce9e:	2301      	movne	r3, #1
 800cea0:	2300      	moveq	r3, #0
 800cea2:	b2db      	uxtb	r3, r3
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d001      	beq.n	800ceac <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 800cea8:	f000 f90c 	bl	800d0c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800ceac:	bf00      	nop
 800ceae:	bd80      	pop	{r7, pc}
 800ceb0:	20000520 	.word	0x20000520
 800ceb4:	40011000 	.word	0x40011000

0800ceb8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b08a      	sub	sp, #40	@ 0x28
 800cebc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cebe:	f107 0314 	add.w	r3, r7, #20
 800cec2:	2200      	movs	r2, #0
 800cec4:	601a      	str	r2, [r3, #0]
 800cec6:	605a      	str	r2, [r3, #4]
 800cec8:	609a      	str	r2, [r3, #8]
 800ceca:	60da      	str	r2, [r3, #12]
 800cecc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800cece:	2300      	movs	r3, #0
 800ced0:	613b      	str	r3, [r7, #16]
 800ced2:	4b78      	ldr	r3, [pc, #480]	@ (800d0b4 <_ZL12MX_GPIO_Initv+0x1fc>)
 800ced4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ced6:	4a77      	ldr	r2, [pc, #476]	@ (800d0b4 <_ZL12MX_GPIO_Initv+0x1fc>)
 800ced8:	f043 0304 	orr.w	r3, r3, #4
 800cedc:	6313      	str	r3, [r2, #48]	@ 0x30
 800cede:	4b75      	ldr	r3, [pc, #468]	@ (800d0b4 <_ZL12MX_GPIO_Initv+0x1fc>)
 800cee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cee2:	f003 0304 	and.w	r3, r3, #4
 800cee6:	613b      	str	r3, [r7, #16]
 800cee8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800ceea:	2300      	movs	r3, #0
 800ceec:	60fb      	str	r3, [r7, #12]
 800ceee:	4b71      	ldr	r3, [pc, #452]	@ (800d0b4 <_ZL12MX_GPIO_Initv+0x1fc>)
 800cef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cef2:	4a70      	ldr	r2, [pc, #448]	@ (800d0b4 <_ZL12MX_GPIO_Initv+0x1fc>)
 800cef4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cef8:	6313      	str	r3, [r2, #48]	@ 0x30
 800cefa:	4b6e      	ldr	r3, [pc, #440]	@ (800d0b4 <_ZL12MX_GPIO_Initv+0x1fc>)
 800cefc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cefe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cf02:	60fb      	str	r3, [r7, #12]
 800cf04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf06:	2300      	movs	r3, #0
 800cf08:	60bb      	str	r3, [r7, #8]
 800cf0a:	4b6a      	ldr	r3, [pc, #424]	@ (800d0b4 <_ZL12MX_GPIO_Initv+0x1fc>)
 800cf0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf0e:	4a69      	ldr	r2, [pc, #420]	@ (800d0b4 <_ZL12MX_GPIO_Initv+0x1fc>)
 800cf10:	f043 0301 	orr.w	r3, r3, #1
 800cf14:	6313      	str	r3, [r2, #48]	@ 0x30
 800cf16:	4b67      	ldr	r3, [pc, #412]	@ (800d0b4 <_ZL12MX_GPIO_Initv+0x1fc>)
 800cf18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf1a:	f003 0301 	and.w	r3, r3, #1
 800cf1e:	60bb      	str	r3, [r7, #8]
 800cf20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800cf22:	2300      	movs	r3, #0
 800cf24:	607b      	str	r3, [r7, #4]
 800cf26:	4b63      	ldr	r3, [pc, #396]	@ (800d0b4 <_ZL12MX_GPIO_Initv+0x1fc>)
 800cf28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf2a:	4a62      	ldr	r2, [pc, #392]	@ (800d0b4 <_ZL12MX_GPIO_Initv+0x1fc>)
 800cf2c:	f043 0302 	orr.w	r3, r3, #2
 800cf30:	6313      	str	r3, [r2, #48]	@ 0x30
 800cf32:	4b60      	ldr	r3, [pc, #384]	@ (800d0b4 <_ZL12MX_GPIO_Initv+0x1fc>)
 800cf34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf36:	f003 0302 	and.w	r3, r3, #2
 800cf3a:	607b      	str	r3, [r7, #4]
 800cf3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800cf3e:	2200      	movs	r2, #0
 800cf40:	2106      	movs	r1, #6
 800cf42:	485d      	ldr	r0, [pc, #372]	@ (800d0b8 <_ZL12MX_GPIO_Initv+0x200>)
 800cf44:	f001 faae 	bl	800e4a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|Display_DC_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 800cf48:	2200      	movs	r2, #0
 800cf4a:	2123      	movs	r1, #35	@ 0x23
 800cf4c:	485b      	ldr	r0, [pc, #364]	@ (800d0bc <_ZL12MX_GPIO_Initv+0x204>)
 800cf4e:	f001 faa9 	bl	800e4a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 800cf52:	2201      	movs	r2, #1
 800cf54:	2108      	movs	r1, #8
 800cf56:	4859      	ldr	r0, [pc, #356]	@ (800d0bc <_ZL12MX_GPIO_Initv+0x204>)
 800cf58:	f001 faa4 	bl	800e4a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800cf5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cf60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800cf62:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800cf66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cf68:	2301      	movs	r3, #1
 800cf6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cf6c:	f107 0314 	add.w	r3, r7, #20
 800cf70:	4619      	mov	r1, r3
 800cf72:	4853      	ldr	r0, [pc, #332]	@ (800d0c0 <_ZL12MX_GPIO_Initv+0x208>)
 800cf74:	f001 f8fa 	bl	800e16c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800cf78:	2301      	movs	r3, #1
 800cf7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cf80:	2301      	movs	r3, #1
 800cf82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf84:	f107 0314 	add.w	r3, r7, #20
 800cf88:	4619      	mov	r1, r3
 800cf8a:	484b      	ldr	r0, [pc, #300]	@ (800d0b8 <_ZL12MX_GPIO_Initv+0x200>)
 800cf8c:	f001 f8ee 	bl	800e16c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800cf90:	2306      	movs	r3, #6
 800cf92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cf94:	2301      	movs	r3, #1
 800cf96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cfa0:	f107 0314 	add.w	r3, r7, #20
 800cfa4:	4619      	mov	r1, r3
 800cfa6:	4844      	ldr	r0, [pc, #272]	@ (800d0b8 <_ZL12MX_GPIO_Initv+0x200>)
 800cfa8:	f001 f8e0 	bl	800e16c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800cfac:	2340      	movs	r3, #64	@ 0x40
 800cfae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800cfb0:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800cfb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cfba:	f107 0314 	add.w	r3, r7, #20
 800cfbe:	4619      	mov	r1, r3
 800cfc0:	483d      	ldr	r0, [pc, #244]	@ (800d0b8 <_ZL12MX_GPIO_Initv+0x200>)
 800cfc2:	f001 f8d3 	bl	800e16c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 Display_DC_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|Display_DC_Pin;
 800cfc6:	2303      	movs	r3, #3
 800cfc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cfca:	2301      	movs	r3, #1
 800cfcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cfce:	2301      	movs	r3, #1
 800cfd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cfd6:	f107 0314 	add.w	r3, r7, #20
 800cfda:	4619      	mov	r1, r3
 800cfdc:	4837      	ldr	r0, [pc, #220]	@ (800d0bc <_ZL12MX_GPIO_Initv+0x204>)
 800cfde:	f001 f8c5 	bl	800e16c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 800cfe2:	f240 4304 	movw	r3, #1028	@ 0x404
 800cfe6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800cfe8:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800cfec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cfee:	2301      	movs	r3, #1
 800cff0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cff2:	f107 0314 	add.w	r3, r7, #20
 800cff6:	4619      	mov	r1, r3
 800cff8:	4830      	ldr	r0, [pc, #192]	@ (800d0bc <_ZL12MX_GPIO_Initv+0x204>)
 800cffa:	f001 f8b7 	bl	800e16c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800cffe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d002:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d004:	2300      	movs	r3, #0
 800d006:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d008:	2301      	movs	r3, #1
 800d00a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d00c:	f107 0314 	add.w	r3, r7, #20
 800d010:	4619      	mov	r1, r3
 800d012:	482a      	ldr	r0, [pc, #168]	@ (800d0bc <_ZL12MX_GPIO_Initv+0x204>)
 800d014:	f001 f8aa 	bl	800e16c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8;
 800d018:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 800d01c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d01e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800d022:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d024:	2301      	movs	r3, #1
 800d026:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d028:	f107 0314 	add.w	r3, r7, #20
 800d02c:	4619      	mov	r1, r3
 800d02e:	4823      	ldr	r0, [pc, #140]	@ (800d0bc <_ZL12MX_GPIO_Initv+0x204>)
 800d030:	f001 f89c 	bl	800e16c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800d034:	2328      	movs	r3, #40	@ 0x28
 800d036:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d038:	2301      	movs	r3, #1
 800d03a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d03c:	2300      	movs	r3, #0
 800d03e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d040:	2300      	movs	r3, #0
 800d042:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d044:	f107 0314 	add.w	r3, r7, #20
 800d048:	4619      	mov	r1, r3
 800d04a:	481c      	ldr	r0, [pc, #112]	@ (800d0bc <_ZL12MX_GPIO_Initv+0x204>)
 800d04c:	f001 f88e 	bl	800e16c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800d050:	2310      	movs	r3, #16
 800d052:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d054:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800d058:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d05a:	2300      	movs	r3, #0
 800d05c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d05e:	f107 0314 	add.w	r3, r7, #20
 800d062:	4619      	mov	r1, r3
 800d064:	4815      	ldr	r0, [pc, #84]	@ (800d0bc <_ZL12MX_GPIO_Initv+0x204>)
 800d066:	f001 f881 	bl	800e16c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800d06a:	2200      	movs	r2, #0
 800d06c:	2100      	movs	r1, #0
 800d06e:	2008      	movs	r0, #8
 800d070:	f001 f845 	bl	800e0fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800d074:	2008      	movs	r0, #8
 800d076:	f001 f85e 	bl	800e136 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800d07a:	2200      	movs	r2, #0
 800d07c:	2100      	movs	r1, #0
 800d07e:	200a      	movs	r0, #10
 800d080:	f001 f83d 	bl	800e0fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800d084:	200a      	movs	r0, #10
 800d086:	f001 f856 	bl	800e136 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800d08a:	2200      	movs	r2, #0
 800d08c:	2100      	movs	r1, #0
 800d08e:	2017      	movs	r0, #23
 800d090:	f001 f835 	bl	800e0fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800d094:	2017      	movs	r0, #23
 800d096:	f001 f84e 	bl	800e136 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800d09a:	2200      	movs	r2, #0
 800d09c:	2100      	movs	r1, #0
 800d09e:	2028      	movs	r0, #40	@ 0x28
 800d0a0:	f001 f82d 	bl	800e0fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800d0a4:	2028      	movs	r0, #40	@ 0x28
 800d0a6:	f001 f846 	bl	800e136 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800d0aa:	bf00      	nop
 800d0ac:	3728      	adds	r7, #40	@ 0x28
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}
 800d0b2:	bf00      	nop
 800d0b4:	40023800 	.word	0x40023800
 800d0b8:	40020000 	.word	0x40020000
 800d0bc:	40020400 	.word	0x40020400
 800d0c0:	40020800 	.word	0x40020800

0800d0c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d0c4:	b480      	push	{r7}
 800d0c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800d0c8:	b672      	cpsid	i
}
 800d0ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800d0cc:	bf00      	nop
 800d0ce:	e7fd      	b.n	800d0cc <Error_Handler+0x8>

0800d0d0 <SPI1_Init>:

SPI_HandleTypeDef Hspi;

/* SPI5 init function */
void SPI1_Init(void)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	af00      	add	r7, sp, #0
	Hspi.Instance = SPI1;
 800d0d4:	4b17      	ldr	r3, [pc, #92]	@ (800d134 <SPI1_Init+0x64>)
 800d0d6:	4a18      	ldr	r2, [pc, #96]	@ (800d138 <SPI1_Init+0x68>)
 800d0d8:	601a      	str	r2, [r3, #0]
	Hspi.Init.Mode = SPI_MODE_MASTER;
 800d0da:	4b16      	ldr	r3, [pc, #88]	@ (800d134 <SPI1_Init+0x64>)
 800d0dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800d0e0:	605a      	str	r2, [r3, #4]
	Hspi.Init.Direction = SPI_DIRECTION_2LINES;
 800d0e2:	4b14      	ldr	r3, [pc, #80]	@ (800d134 <SPI1_Init+0x64>)
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	609a      	str	r2, [r3, #8]
	Hspi.Init.DataSize = SPI_DATASIZE_8BIT;
 800d0e8:	4b12      	ldr	r3, [pc, #72]	@ (800d134 <SPI1_Init+0x64>)
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	60da      	str	r2, [r3, #12]
	Hspi.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d0ee:	4b11      	ldr	r3, [pc, #68]	@ (800d134 <SPI1_Init+0x64>)
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	611a      	str	r2, [r3, #16]
	Hspi.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d0f4:	4b0f      	ldr	r3, [pc, #60]	@ (800d134 <SPI1_Init+0x64>)
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	615a      	str	r2, [r3, #20]
	Hspi.Init.NSS = SPI_NSS_SOFT;
 800d0fa:	4b0e      	ldr	r3, [pc, #56]	@ (800d134 <SPI1_Init+0x64>)
 800d0fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d100:	619a      	str	r2, [r3, #24]
	Hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d102:	4b0c      	ldr	r3, [pc, #48]	@ (800d134 <SPI1_Init+0x64>)
 800d104:	2200      	movs	r2, #0
 800d106:	61da      	str	r2, [r3, #28]
	Hspi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d108:	4b0a      	ldr	r3, [pc, #40]	@ (800d134 <SPI1_Init+0x64>)
 800d10a:	2200      	movs	r2, #0
 800d10c:	621a      	str	r2, [r3, #32]
	Hspi.Init.TIMode = SPI_TIMODE_DISABLE;
 800d10e:	4b09      	ldr	r3, [pc, #36]	@ (800d134 <SPI1_Init+0x64>)
 800d110:	2200      	movs	r2, #0
 800d112:	625a      	str	r2, [r3, #36]	@ 0x24
	Hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d114:	4b07      	ldr	r3, [pc, #28]	@ (800d134 <SPI1_Init+0x64>)
 800d116:	2200      	movs	r2, #0
 800d118:	629a      	str	r2, [r3, #40]	@ 0x28
	Hspi.Init.CRCPolynomial = 7;
 800d11a:	4b06      	ldr	r3, [pc, #24]	@ (800d134 <SPI1_Init+0x64>)
 800d11c:	2207      	movs	r2, #7
 800d11e:	62da      	str	r2, [r3, #44]	@ 0x2c
//  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
//  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  if (HAL_SPI_Init(&Hspi) != HAL_OK)
 800d120:	4804      	ldr	r0, [pc, #16]	@ (800d134 <SPI1_Init+0x64>)
 800d122:	f002 fe6d 	bl	800fe00 <HAL_SPI_Init>
 800d126:	4603      	mov	r3, r0
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d001      	beq.n	800d130 <SPI1_Init+0x60>
  {
    Error_Handler();
 800d12c:	f7ff ffca 	bl	800d0c4 <Error_Handler>
  }

}
 800d130:	bf00      	nop
 800d132:	bd80      	pop	{r7, pc}
 800d134:	20000568 	.word	0x20000568
 800d138:	40013000 	.word	0x40013000

0800d13c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b082      	sub	sp, #8
 800d140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d142:	2300      	movs	r3, #0
 800d144:	607b      	str	r3, [r7, #4]
 800d146:	4b13      	ldr	r3, [pc, #76]	@ (800d194 <HAL_MspInit+0x58>)
 800d148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d14a:	4a12      	ldr	r2, [pc, #72]	@ (800d194 <HAL_MspInit+0x58>)
 800d14c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d150:	6453      	str	r3, [r2, #68]	@ 0x44
 800d152:	4b10      	ldr	r3, [pc, #64]	@ (800d194 <HAL_MspInit+0x58>)
 800d154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d156:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d15a:	607b      	str	r3, [r7, #4]
 800d15c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d15e:	2300      	movs	r3, #0
 800d160:	603b      	str	r3, [r7, #0]
 800d162:	4b0c      	ldr	r3, [pc, #48]	@ (800d194 <HAL_MspInit+0x58>)
 800d164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d166:	4a0b      	ldr	r2, [pc, #44]	@ (800d194 <HAL_MspInit+0x58>)
 800d168:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d16c:	6413      	str	r3, [r2, #64]	@ 0x40
 800d16e:	4b09      	ldr	r3, [pc, #36]	@ (800d194 <HAL_MspInit+0x58>)
 800d170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d176:	603b      	str	r3, [r7, #0]
 800d178:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800d17a:	2200      	movs	r2, #0
 800d17c:	2100      	movs	r1, #0
 800d17e:	2005      	movs	r0, #5
 800d180:	f000 ffbd 	bl	800e0fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800d184:	2005      	movs	r0, #5
 800d186:	f000 ffd6 	bl	800e136 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d18a:	bf00      	nop
 800d18c:	3708      	adds	r7, #8
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}
 800d192:	bf00      	nop
 800d194:	40023800 	.word	0x40023800

0800d198 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b08a      	sub	sp, #40	@ 0x28
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d1a0:	f107 0314 	add.w	r3, r7, #20
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	601a      	str	r2, [r3, #0]
 800d1a8:	605a      	str	r2, [r3, #4]
 800d1aa:	609a      	str	r2, [r3, #8]
 800d1ac:	60da      	str	r2, [r3, #12]
 800d1ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	4a17      	ldr	r2, [pc, #92]	@ (800d214 <HAL_ADC_MspInit+0x7c>)
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	d127      	bne.n	800d20a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	613b      	str	r3, [r7, #16]
 800d1be:	4b16      	ldr	r3, [pc, #88]	@ (800d218 <HAL_ADC_MspInit+0x80>)
 800d1c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d1c2:	4a15      	ldr	r2, [pc, #84]	@ (800d218 <HAL_ADC_MspInit+0x80>)
 800d1c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d1c8:	6453      	str	r3, [r2, #68]	@ 0x44
 800d1ca:	4b13      	ldr	r3, [pc, #76]	@ (800d218 <HAL_ADC_MspInit+0x80>)
 800d1cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d1ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d1d2:	613b      	str	r3, [r7, #16]
 800d1d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	60fb      	str	r3, [r7, #12]
 800d1da:	4b0f      	ldr	r3, [pc, #60]	@ (800d218 <HAL_ADC_MspInit+0x80>)
 800d1dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1de:	4a0e      	ldr	r2, [pc, #56]	@ (800d218 <HAL_ADC_MspInit+0x80>)
 800d1e0:	f043 0301 	orr.w	r3, r3, #1
 800d1e4:	6313      	str	r3, [r2, #48]	@ 0x30
 800d1e6:	4b0c      	ldr	r3, [pc, #48]	@ (800d218 <HAL_ADC_MspInit+0x80>)
 800d1e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1ea:	f003 0301 	and.w	r3, r3, #1
 800d1ee:	60fb      	str	r3, [r7, #12]
 800d1f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800d1f2:	2318      	movs	r3, #24
 800d1f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d1f6:	2303      	movs	r3, #3
 800d1f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d1fe:	f107 0314 	add.w	r3, r7, #20
 800d202:	4619      	mov	r1, r3
 800d204:	4805      	ldr	r0, [pc, #20]	@ (800d21c <HAL_ADC_MspInit+0x84>)
 800d206:	f000 ffb1 	bl	800e16c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800d20a:	bf00      	nop
 800d20c:	3728      	adds	r7, #40	@ 0x28
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}
 800d212:	bf00      	nop
 800d214:	40012000 	.word	0x40012000
 800d218:	40023800 	.word	0x40023800
 800d21c:	40020000 	.word	0x40020000

0800d220 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b08a      	sub	sp, #40	@ 0x28
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d228:	f107 0314 	add.w	r3, r7, #20
 800d22c:	2200      	movs	r2, #0
 800d22e:	601a      	str	r2, [r3, #0]
 800d230:	605a      	str	r2, [r3, #4]
 800d232:	609a      	str	r2, [r3, #8]
 800d234:	60da      	str	r2, [r3, #12]
 800d236:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	4a19      	ldr	r2, [pc, #100]	@ (800d2a4 <HAL_I2C_MspInit+0x84>)
 800d23e:	4293      	cmp	r3, r2
 800d240:	d12b      	bne.n	800d29a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d242:	2300      	movs	r3, #0
 800d244:	613b      	str	r3, [r7, #16]
 800d246:	4b18      	ldr	r3, [pc, #96]	@ (800d2a8 <HAL_I2C_MspInit+0x88>)
 800d248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d24a:	4a17      	ldr	r2, [pc, #92]	@ (800d2a8 <HAL_I2C_MspInit+0x88>)
 800d24c:	f043 0302 	orr.w	r3, r3, #2
 800d250:	6313      	str	r3, [r2, #48]	@ 0x30
 800d252:	4b15      	ldr	r3, [pc, #84]	@ (800d2a8 <HAL_I2C_MspInit+0x88>)
 800d254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d256:	f003 0302 	and.w	r3, r3, #2
 800d25a:	613b      	str	r3, [r7, #16]
 800d25c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800d25e:	23c0      	movs	r3, #192	@ 0xc0
 800d260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d262:	2312      	movs	r3, #18
 800d264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d266:	2300      	movs	r3, #0
 800d268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d26a:	2303      	movs	r3, #3
 800d26c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800d26e:	2304      	movs	r3, #4
 800d270:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d272:	f107 0314 	add.w	r3, r7, #20
 800d276:	4619      	mov	r1, r3
 800d278:	480c      	ldr	r0, [pc, #48]	@ (800d2ac <HAL_I2C_MspInit+0x8c>)
 800d27a:	f000 ff77 	bl	800e16c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800d27e:	2300      	movs	r3, #0
 800d280:	60fb      	str	r3, [r7, #12]
 800d282:	4b09      	ldr	r3, [pc, #36]	@ (800d2a8 <HAL_I2C_MspInit+0x88>)
 800d284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d286:	4a08      	ldr	r2, [pc, #32]	@ (800d2a8 <HAL_I2C_MspInit+0x88>)
 800d288:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d28c:	6413      	str	r3, [r2, #64]	@ 0x40
 800d28e:	4b06      	ldr	r3, [pc, #24]	@ (800d2a8 <HAL_I2C_MspInit+0x88>)
 800d290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d292:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d296:	60fb      	str	r3, [r7, #12]
 800d298:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800d29a:	bf00      	nop
 800d29c:	3728      	adds	r7, #40	@ 0x28
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}
 800d2a2:	bf00      	nop
 800d2a4:	40005400 	.word	0x40005400
 800d2a8:	40023800 	.word	0x40023800
 800d2ac:	40020400 	.word	0x40020400

0800d2b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b08a      	sub	sp, #40	@ 0x28
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d2b8:	f107 0314 	add.w	r3, r7, #20
 800d2bc:	2200      	movs	r2, #0
 800d2be:	601a      	str	r2, [r3, #0]
 800d2c0:	605a      	str	r2, [r3, #4]
 800d2c2:	609a      	str	r2, [r3, #8]
 800d2c4:	60da      	str	r2, [r3, #12]
 800d2c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	4a19      	ldr	r2, [pc, #100]	@ (800d334 <HAL_SPI_MspInit+0x84>)
 800d2ce:	4293      	cmp	r3, r2
 800d2d0:	d12b      	bne.n	800d32a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	613b      	str	r3, [r7, #16]
 800d2d6:	4b18      	ldr	r3, [pc, #96]	@ (800d338 <HAL_SPI_MspInit+0x88>)
 800d2d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2da:	4a17      	ldr	r2, [pc, #92]	@ (800d338 <HAL_SPI_MspInit+0x88>)
 800d2dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d2e0:	6453      	str	r3, [r2, #68]	@ 0x44
 800d2e2:	4b15      	ldr	r3, [pc, #84]	@ (800d338 <HAL_SPI_MspInit+0x88>)
 800d2e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d2ea:	613b      	str	r3, [r7, #16]
 800d2ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	60fb      	str	r3, [r7, #12]
 800d2f2:	4b11      	ldr	r3, [pc, #68]	@ (800d338 <HAL_SPI_MspInit+0x88>)
 800d2f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2f6:	4a10      	ldr	r2, [pc, #64]	@ (800d338 <HAL_SPI_MspInit+0x88>)
 800d2f8:	f043 0301 	orr.w	r3, r3, #1
 800d2fc:	6313      	str	r3, [r2, #48]	@ 0x30
 800d2fe:	4b0e      	ldr	r3, [pc, #56]	@ (800d338 <HAL_SPI_MspInit+0x88>)
 800d300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d302:	f003 0301 	and.w	r3, r3, #1
 800d306:	60fb      	str	r3, [r7, #12]
 800d308:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800d30a:	23a0      	movs	r3, #160	@ 0xa0
 800d30c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d30e:	2302      	movs	r3, #2
 800d310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d312:	2300      	movs	r3, #0
 800d314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d316:	2303      	movs	r3, #3
 800d318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800d31a:	2305      	movs	r3, #5
 800d31c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d31e:	f107 0314 	add.w	r3, r7, #20
 800d322:	4619      	mov	r1, r3
 800d324:	4805      	ldr	r0, [pc, #20]	@ (800d33c <HAL_SPI_MspInit+0x8c>)
 800d326:	f000 ff21 	bl	800e16c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800d32a:	bf00      	nop
 800d32c:	3728      	adds	r7, #40	@ 0x28
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}
 800d332:	bf00      	nop
 800d334:	40013000 	.word	0x40013000
 800d338:	40023800 	.word	0x40023800
 800d33c:	40020000 	.word	0x40020000

0800d340 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b084      	sub	sp, #16
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d350:	d116      	bne.n	800d380 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800d352:	2300      	movs	r3, #0
 800d354:	60fb      	str	r3, [r7, #12]
 800d356:	4b1a      	ldr	r3, [pc, #104]	@ (800d3c0 <HAL_TIM_Base_MspInit+0x80>)
 800d358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d35a:	4a19      	ldr	r2, [pc, #100]	@ (800d3c0 <HAL_TIM_Base_MspInit+0x80>)
 800d35c:	f043 0301 	orr.w	r3, r3, #1
 800d360:	6413      	str	r3, [r2, #64]	@ 0x40
 800d362:	4b17      	ldr	r3, [pc, #92]	@ (800d3c0 <HAL_TIM_Base_MspInit+0x80>)
 800d364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d366:	f003 0301 	and.w	r3, r3, #1
 800d36a:	60fb      	str	r3, [r7, #12]
 800d36c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800d36e:	2200      	movs	r2, #0
 800d370:	2100      	movs	r1, #0
 800d372:	201c      	movs	r0, #28
 800d374:	f000 fec3 	bl	800e0fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800d378:	201c      	movs	r0, #28
 800d37a:	f000 fedc 	bl	800e136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800d37e:	e01a      	b.n	800d3b6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	4a0f      	ldr	r2, [pc, #60]	@ (800d3c4 <HAL_TIM_Base_MspInit+0x84>)
 800d386:	4293      	cmp	r3, r2
 800d388:	d115      	bne.n	800d3b6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800d38a:	2300      	movs	r3, #0
 800d38c:	60bb      	str	r3, [r7, #8]
 800d38e:	4b0c      	ldr	r3, [pc, #48]	@ (800d3c0 <HAL_TIM_Base_MspInit+0x80>)
 800d390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d392:	4a0b      	ldr	r2, [pc, #44]	@ (800d3c0 <HAL_TIM_Base_MspInit+0x80>)
 800d394:	f043 0302 	orr.w	r3, r3, #2
 800d398:	6413      	str	r3, [r2, #64]	@ 0x40
 800d39a:	4b09      	ldr	r3, [pc, #36]	@ (800d3c0 <HAL_TIM_Base_MspInit+0x80>)
 800d39c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d39e:	f003 0302 	and.w	r3, r3, #2
 800d3a2:	60bb      	str	r3, [r7, #8]
 800d3a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	2100      	movs	r1, #0
 800d3aa:	201d      	movs	r0, #29
 800d3ac:	f000 fea7 	bl	800e0fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800d3b0:	201d      	movs	r0, #29
 800d3b2:	f000 fec0 	bl	800e136 <HAL_NVIC_EnableIRQ>
}
 800d3b6:	bf00      	nop
 800d3b8:	3710      	adds	r7, #16
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}
 800d3be:	bf00      	nop
 800d3c0:	40023800 	.word	0x40023800
 800d3c4:	40000400 	.word	0x40000400

0800d3c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b088      	sub	sp, #32
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d3d0:	f107 030c 	add.w	r3, r7, #12
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	601a      	str	r2, [r3, #0]
 800d3d8:	605a      	str	r2, [r3, #4]
 800d3da:	609a      	str	r2, [r3, #8]
 800d3dc:	60da      	str	r2, [r3, #12]
 800d3de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d3e8:	d11e      	bne.n	800d428 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	60bb      	str	r3, [r7, #8]
 800d3ee:	4b10      	ldr	r3, [pc, #64]	@ (800d430 <HAL_TIM_MspPostInit+0x68>)
 800d3f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3f2:	4a0f      	ldr	r2, [pc, #60]	@ (800d430 <HAL_TIM_MspPostInit+0x68>)
 800d3f4:	f043 0301 	orr.w	r3, r3, #1
 800d3f8:	6313      	str	r3, [r2, #48]	@ 0x30
 800d3fa:	4b0d      	ldr	r3, [pc, #52]	@ (800d430 <HAL_TIM_MspPostInit+0x68>)
 800d3fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3fe:	f003 0301 	and.w	r3, r3, #1
 800d402:	60bb      	str	r3, [r7, #8]
 800d404:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800d406:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d40a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d40c:	2302      	movs	r3, #2
 800d40e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d410:	2301      	movs	r3, #1
 800d412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d414:	2300      	movs	r3, #0
 800d416:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800d418:	2301      	movs	r3, #1
 800d41a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d41c:	f107 030c 	add.w	r3, r7, #12
 800d420:	4619      	mov	r1, r3
 800d422:	4804      	ldr	r0, [pc, #16]	@ (800d434 <HAL_TIM_MspPostInit+0x6c>)
 800d424:	f000 fea2 	bl	800e16c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800d428:	bf00      	nop
 800d42a:	3720      	adds	r7, #32
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}
 800d430:	40023800 	.word	0x40023800
 800d434:	40020000 	.word	0x40020000

0800d438 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b08a      	sub	sp, #40	@ 0x28
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d440:	f107 0314 	add.w	r3, r7, #20
 800d444:	2200      	movs	r2, #0
 800d446:	601a      	str	r2, [r3, #0]
 800d448:	605a      	str	r2, [r3, #4]
 800d44a:	609a      	str	r2, [r3, #8]
 800d44c:	60da      	str	r2, [r3, #12]
 800d44e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	4a19      	ldr	r2, [pc, #100]	@ (800d4bc <HAL_UART_MspInit+0x84>)
 800d456:	4293      	cmp	r3, r2
 800d458:	d12c      	bne.n	800d4b4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800d45a:	2300      	movs	r3, #0
 800d45c:	613b      	str	r3, [r7, #16]
 800d45e:	4b18      	ldr	r3, [pc, #96]	@ (800d4c0 <HAL_UART_MspInit+0x88>)
 800d460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d462:	4a17      	ldr	r2, [pc, #92]	@ (800d4c0 <HAL_UART_MspInit+0x88>)
 800d464:	f043 0310 	orr.w	r3, r3, #16
 800d468:	6453      	str	r3, [r2, #68]	@ 0x44
 800d46a:	4b15      	ldr	r3, [pc, #84]	@ (800d4c0 <HAL_UART_MspInit+0x88>)
 800d46c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d46e:	f003 0310 	and.w	r3, r3, #16
 800d472:	613b      	str	r3, [r7, #16]
 800d474:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d476:	2300      	movs	r3, #0
 800d478:	60fb      	str	r3, [r7, #12]
 800d47a:	4b11      	ldr	r3, [pc, #68]	@ (800d4c0 <HAL_UART_MspInit+0x88>)
 800d47c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d47e:	4a10      	ldr	r2, [pc, #64]	@ (800d4c0 <HAL_UART_MspInit+0x88>)
 800d480:	f043 0301 	orr.w	r3, r3, #1
 800d484:	6313      	str	r3, [r2, #48]	@ 0x30
 800d486:	4b0e      	ldr	r3, [pc, #56]	@ (800d4c0 <HAL_UART_MspInit+0x88>)
 800d488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d48a:	f003 0301 	and.w	r3, r3, #1
 800d48e:	60fb      	str	r3, [r7, #12]
 800d490:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800d492:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800d496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d498:	2302      	movs	r3, #2
 800d49a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d49c:	2300      	movs	r3, #0
 800d49e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d4a0:	2303      	movs	r3, #3
 800d4a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800d4a4:	2307      	movs	r3, #7
 800d4a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d4a8:	f107 0314 	add.w	r3, r7, #20
 800d4ac:	4619      	mov	r1, r3
 800d4ae:	4805      	ldr	r0, [pc, #20]	@ (800d4c4 <HAL_UART_MspInit+0x8c>)
 800d4b0:	f000 fe5c 	bl	800e16c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800d4b4:	bf00      	nop
 800d4b6:	3728      	adds	r7, #40	@ 0x28
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bd80      	pop	{r7, pc}
 800d4bc:	40011000 	.word	0x40011000
 800d4c0:	40023800 	.word	0x40023800
 800d4c4:	40020000 	.word	0x40020000

0800d4c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800d4cc:	bf00      	nop
 800d4ce:	e7fd      	b.n	800d4cc <NMI_Handler+0x4>

0800d4d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d4d0:	b480      	push	{r7}
 800d4d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d4d4:	bf00      	nop
 800d4d6:	e7fd      	b.n	800d4d4 <HardFault_Handler+0x4>

0800d4d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d4d8:	b480      	push	{r7}
 800d4da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d4dc:	bf00      	nop
 800d4de:	e7fd      	b.n	800d4dc <MemManage_Handler+0x4>

0800d4e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d4e4:	bf00      	nop
 800d4e6:	e7fd      	b.n	800d4e4 <BusFault_Handler+0x4>

0800d4e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d4ec:	bf00      	nop
 800d4ee:	e7fd      	b.n	800d4ec <UsageFault_Handler+0x4>

0800d4f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800d4f4:	bf00      	nop
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fc:	4770      	bx	lr

0800d4fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d4fe:	b480      	push	{r7}
 800d500:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d502:	bf00      	nop
 800d504:	46bd      	mov	sp, r7
 800d506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50a:	4770      	bx	lr

0800d50c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d50c:	b480      	push	{r7}
 800d50e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d510:	bf00      	nop
 800d512:	46bd      	mov	sp, r7
 800d514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d518:	4770      	bx	lr

0800d51a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d51a:	b580      	push	{r7, lr}
 800d51c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d51e:	f000 f99b 	bl	800d858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d522:	bf00      	nop
 800d524:	bd80      	pop	{r7, pc}

0800d526 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800d526:	b480      	push	{r7}
 800d528:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800d52a:	bf00      	nop
 800d52c:	46bd      	mov	sp, r7
 800d52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d532:	4770      	bx	lr

0800d534 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800d538:	2004      	movs	r0, #4
 800d53a:	f000 ffcd 	bl	800e4d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800d53e:	bf00      	nop
 800d540:	bd80      	pop	{r7, pc}

0800d542 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800d542:	b580      	push	{r7, lr}
 800d544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800d546:	2010      	movs	r0, #16
 800d548:	f000 ffc6 	bl	800e4d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800d54c:	bf00      	nop
 800d54e:	bd80      	pop	{r7, pc}

0800d550 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800d554:	2040      	movs	r0, #64	@ 0x40
 800d556:	f000 ffbf 	bl	800e4d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800d55a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800d55e:	f000 ffbb 	bl	800e4d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800d562:	bf00      	nop
 800d564:	bd80      	pop	{r7, pc}
	...

0800d568 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800d56c:	4802      	ldr	r0, [pc, #8]	@ (800d578 <TIM2_IRQHandler+0x10>)
 800d56e:	f003 f8ad 	bl	80106cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800d572:	bf00      	nop
 800d574:	bd80      	pop	{r7, pc}
 800d576:	bf00      	nop
 800d578:	20000490 	.word	0x20000490

0800d57c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800d580:	4802      	ldr	r0, [pc, #8]	@ (800d58c <TIM3_IRQHandler+0x10>)
 800d582:	f003 f8a3 	bl	80106cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800d586:	bf00      	nop
 800d588:	bd80      	pop	{r7, pc}
 800d58a:	bf00      	nop
 800d58c:	200004d8 	.word	0x200004d8

0800d590 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800d594:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800d598:	f000 ff9e 	bl	800e4d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800d59c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800d5a0:	f000 ff9a 	bl	800e4d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800d5a4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800d5a8:	f000 ff96 	bl	800e4d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800d5ac:	bf00      	nop
 800d5ae:	bd80      	pop	{r7, pc}

0800d5b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800d5b0:	b480      	push	{r7}
 800d5b2:	af00      	add	r7, sp, #0
  return 1;
 800d5b4:	2301      	movs	r3, #1
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5be:	4770      	bx	lr

0800d5c0 <_kill>:

int _kill(int pid, int sig)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b082      	sub	sp, #8
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
 800d5c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800d5ca:	f005 f98f 	bl	80128ec <__errno>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	2216      	movs	r2, #22
 800d5d2:	601a      	str	r2, [r3, #0]
  return -1;
 800d5d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3708      	adds	r7, #8
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <_exit>:

void _exit (int status)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b082      	sub	sp, #8
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800d5e8:	f04f 31ff 	mov.w	r1, #4294967295
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f7ff ffe7 	bl	800d5c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 800d5f2:	bf00      	nop
 800d5f4:	e7fd      	b.n	800d5f2 <_exit+0x12>

0800d5f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800d5f6:	b580      	push	{r7, lr}
 800d5f8:	b086      	sub	sp, #24
 800d5fa:	af00      	add	r7, sp, #0
 800d5fc:	60f8      	str	r0, [r7, #12]
 800d5fe:	60b9      	str	r1, [r7, #8]
 800d600:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d602:	2300      	movs	r3, #0
 800d604:	617b      	str	r3, [r7, #20]
 800d606:	e00a      	b.n	800d61e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800d608:	f3af 8000 	nop.w
 800d60c:	4601      	mov	r1, r0
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	1c5a      	adds	r2, r3, #1
 800d612:	60ba      	str	r2, [r7, #8]
 800d614:	b2ca      	uxtb	r2, r1
 800d616:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d618:	697b      	ldr	r3, [r7, #20]
 800d61a:	3301      	adds	r3, #1
 800d61c:	617b      	str	r3, [r7, #20]
 800d61e:	697a      	ldr	r2, [r7, #20]
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	429a      	cmp	r2, r3
 800d624:	dbf0      	blt.n	800d608 <_read+0x12>
  }

  return len;
 800d626:	687b      	ldr	r3, [r7, #4]
}
 800d628:	4618      	mov	r0, r3
 800d62a:	3718      	adds	r7, #24
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}

0800d630 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b086      	sub	sp, #24
 800d634:	af00      	add	r7, sp, #0
 800d636:	60f8      	str	r0, [r7, #12]
 800d638:	60b9      	str	r1, [r7, #8]
 800d63a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d63c:	2300      	movs	r3, #0
 800d63e:	617b      	str	r3, [r7, #20]
 800d640:	e009      	b.n	800d656 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	1c5a      	adds	r2, r3, #1
 800d646:	60ba      	str	r2, [r7, #8]
 800d648:	781b      	ldrb	r3, [r3, #0]
 800d64a:	4618      	mov	r0, r3
 800d64c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d650:	697b      	ldr	r3, [r7, #20]
 800d652:	3301      	adds	r3, #1
 800d654:	617b      	str	r3, [r7, #20]
 800d656:	697a      	ldr	r2, [r7, #20]
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	429a      	cmp	r2, r3
 800d65c:	dbf1      	blt.n	800d642 <_write+0x12>
  }
  return len;
 800d65e:	687b      	ldr	r3, [r7, #4]
}
 800d660:	4618      	mov	r0, r3
 800d662:	3718      	adds	r7, #24
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}

0800d668 <_close>:

int _close(int file)
{
 800d668:	b480      	push	{r7}
 800d66a:	b083      	sub	sp, #12
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800d670:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d674:	4618      	mov	r0, r3
 800d676:	370c      	adds	r7, #12
 800d678:	46bd      	mov	sp, r7
 800d67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67e:	4770      	bx	lr

0800d680 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800d680:	b480      	push	{r7}
 800d682:	b083      	sub	sp, #12
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
 800d688:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800d690:	605a      	str	r2, [r3, #4]
  return 0;
 800d692:	2300      	movs	r3, #0
}
 800d694:	4618      	mov	r0, r3
 800d696:	370c      	adds	r7, #12
 800d698:	46bd      	mov	sp, r7
 800d69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69e:	4770      	bx	lr

0800d6a0 <_isatty>:

int _isatty(int file)
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b083      	sub	sp, #12
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800d6a8:	2301      	movs	r3, #1
}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	370c      	adds	r7, #12
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b4:	4770      	bx	lr

0800d6b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800d6b6:	b480      	push	{r7}
 800d6b8:	b085      	sub	sp, #20
 800d6ba:	af00      	add	r7, sp, #0
 800d6bc:	60f8      	str	r0, [r7, #12]
 800d6be:	60b9      	str	r1, [r7, #8]
 800d6c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800d6c2:	2300      	movs	r3, #0
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	3714      	adds	r7, #20
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr

0800d6d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b086      	sub	sp, #24
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d6d8:	4a14      	ldr	r2, [pc, #80]	@ (800d72c <_sbrk+0x5c>)
 800d6da:	4b15      	ldr	r3, [pc, #84]	@ (800d730 <_sbrk+0x60>)
 800d6dc:	1ad3      	subs	r3, r2, r3
 800d6de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800d6e0:	697b      	ldr	r3, [r7, #20]
 800d6e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d6e4:	4b13      	ldr	r3, [pc, #76]	@ (800d734 <_sbrk+0x64>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d102      	bne.n	800d6f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800d6ec:	4b11      	ldr	r3, [pc, #68]	@ (800d734 <_sbrk+0x64>)
 800d6ee:	4a12      	ldr	r2, [pc, #72]	@ (800d738 <_sbrk+0x68>)
 800d6f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d6f2:	4b10      	ldr	r3, [pc, #64]	@ (800d734 <_sbrk+0x64>)
 800d6f4:	681a      	ldr	r2, [r3, #0]
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	4413      	add	r3, r2
 800d6fa:	693a      	ldr	r2, [r7, #16]
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	d207      	bcs.n	800d710 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800d700:	f005 f8f4 	bl	80128ec <__errno>
 800d704:	4603      	mov	r3, r0
 800d706:	220c      	movs	r2, #12
 800d708:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800d70a:	f04f 33ff 	mov.w	r3, #4294967295
 800d70e:	e009      	b.n	800d724 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800d710:	4b08      	ldr	r3, [pc, #32]	@ (800d734 <_sbrk+0x64>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800d716:	4b07      	ldr	r3, [pc, #28]	@ (800d734 <_sbrk+0x64>)
 800d718:	681a      	ldr	r2, [r3, #0]
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	4413      	add	r3, r2
 800d71e:	4a05      	ldr	r2, [pc, #20]	@ (800d734 <_sbrk+0x64>)
 800d720:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800d722:	68fb      	ldr	r3, [r7, #12]
}
 800d724:	4618      	mov	r0, r3
 800d726:	3718      	adds	r7, #24
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}
 800d72c:	20020000 	.word	0x20020000
 800d730:	00000400 	.word	0x00000400
 800d734:	200005c0 	.word	0x200005c0
 800d738:	20000718 	.word	0x20000718

0800d73c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d73c:	b480      	push	{r7}
 800d73e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d740:	4b06      	ldr	r3, [pc, #24]	@ (800d75c <SystemInit+0x20>)
 800d742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d746:	4a05      	ldr	r2, [pc, #20]	@ (800d75c <SystemInit+0x20>)
 800d748:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d74c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800d750:	bf00      	nop
 800d752:	46bd      	mov	sp, r7
 800d754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d758:	4770      	bx	lr
 800d75a:	bf00      	nop
 800d75c:	e000ed00 	.word	0xe000ed00

0800d760 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800d760:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800d798 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800d764:	f7ff ffea 	bl	800d73c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800d768:	480c      	ldr	r0, [pc, #48]	@ (800d79c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800d76a:	490d      	ldr	r1, [pc, #52]	@ (800d7a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800d76c:	4a0d      	ldr	r2, [pc, #52]	@ (800d7a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800d76e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800d770:	e002      	b.n	800d778 <LoopCopyDataInit>

0800d772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800d772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800d774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800d776:	3304      	adds	r3, #4

0800d778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800d778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800d77a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800d77c:	d3f9      	bcc.n	800d772 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800d77e:	4a0a      	ldr	r2, [pc, #40]	@ (800d7a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800d780:	4c0a      	ldr	r4, [pc, #40]	@ (800d7ac <LoopFillZerobss+0x22>)
  movs r3, #0
 800d782:	2300      	movs	r3, #0
  b LoopFillZerobss
 800d784:	e001      	b.n	800d78a <LoopFillZerobss>

0800d786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800d786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d788:	3204      	adds	r2, #4

0800d78a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800d78a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800d78c:	d3fb      	bcc.n	800d786 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800d78e:	f005 f8b3 	bl	80128f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d792:	f7ff f905 	bl	800c9a0 <main>
  bx  lr    
 800d796:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800d798:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800d79c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800d7a0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800d7a4:	080165f0 	.word	0x080165f0
  ldr r2, =_sbss
 800d7a8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800d7ac:	20000718 	.word	0x20000718

0800d7b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d7b0:	e7fe      	b.n	800d7b0 <ADC_IRQHandler>
	...

0800d7b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800d7b8:	4b0e      	ldr	r3, [pc, #56]	@ (800d7f4 <HAL_Init+0x40>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	4a0d      	ldr	r2, [pc, #52]	@ (800d7f4 <HAL_Init+0x40>)
 800d7be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d7c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800d7c4:	4b0b      	ldr	r3, [pc, #44]	@ (800d7f4 <HAL_Init+0x40>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	4a0a      	ldr	r2, [pc, #40]	@ (800d7f4 <HAL_Init+0x40>)
 800d7ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d7ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800d7d0:	4b08      	ldr	r3, [pc, #32]	@ (800d7f4 <HAL_Init+0x40>)
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	4a07      	ldr	r2, [pc, #28]	@ (800d7f4 <HAL_Init+0x40>)
 800d7d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d7da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d7dc:	2003      	movs	r0, #3
 800d7de:	f000 fc83 	bl	800e0e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800d7e2:	200f      	movs	r0, #15
 800d7e4:	f000 f808 	bl	800d7f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800d7e8:	f7ff fca8 	bl	800d13c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800d7ec:	2300      	movs	r3, #0
}
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	bd80      	pop	{r7, pc}
 800d7f2:	bf00      	nop
 800d7f4:	40023c00 	.word	0x40023c00

0800d7f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b082      	sub	sp, #8
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800d800:	4b12      	ldr	r3, [pc, #72]	@ (800d84c <HAL_InitTick+0x54>)
 800d802:	681a      	ldr	r2, [r3, #0]
 800d804:	4b12      	ldr	r3, [pc, #72]	@ (800d850 <HAL_InitTick+0x58>)
 800d806:	781b      	ldrb	r3, [r3, #0]
 800d808:	4619      	mov	r1, r3
 800d80a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d80e:	fbb3 f3f1 	udiv	r3, r3, r1
 800d812:	fbb2 f3f3 	udiv	r3, r2, r3
 800d816:	4618      	mov	r0, r3
 800d818:	f000 fc9b 	bl	800e152 <HAL_SYSTICK_Config>
 800d81c:	4603      	mov	r3, r0
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d001      	beq.n	800d826 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800d822:	2301      	movs	r3, #1
 800d824:	e00e      	b.n	800d844 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2b0f      	cmp	r3, #15
 800d82a:	d80a      	bhi.n	800d842 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800d82c:	2200      	movs	r2, #0
 800d82e:	6879      	ldr	r1, [r7, #4]
 800d830:	f04f 30ff 	mov.w	r0, #4294967295
 800d834:	f000 fc63 	bl	800e0fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800d838:	4a06      	ldr	r2, [pc, #24]	@ (800d854 <HAL_InitTick+0x5c>)
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800d83e:	2300      	movs	r3, #0
 800d840:	e000      	b.n	800d844 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800d842:	2301      	movs	r3, #1
}
 800d844:	4618      	mov	r0, r3
 800d846:	3708      	adds	r7, #8
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd80      	pop	{r7, pc}
 800d84c:	20000008 	.word	0x20000008
 800d850:	20000010 	.word	0x20000010
 800d854:	2000000c 	.word	0x2000000c

0800d858 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800d858:	b480      	push	{r7}
 800d85a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800d85c:	4b06      	ldr	r3, [pc, #24]	@ (800d878 <HAL_IncTick+0x20>)
 800d85e:	781b      	ldrb	r3, [r3, #0]
 800d860:	461a      	mov	r2, r3
 800d862:	4b06      	ldr	r3, [pc, #24]	@ (800d87c <HAL_IncTick+0x24>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	4413      	add	r3, r2
 800d868:	4a04      	ldr	r2, [pc, #16]	@ (800d87c <HAL_IncTick+0x24>)
 800d86a:	6013      	str	r3, [r2, #0]
}
 800d86c:	bf00      	nop
 800d86e:	46bd      	mov	sp, r7
 800d870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d874:	4770      	bx	lr
 800d876:	bf00      	nop
 800d878:	20000010 	.word	0x20000010
 800d87c:	200005c4 	.word	0x200005c4

0800d880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800d880:	b480      	push	{r7}
 800d882:	af00      	add	r7, sp, #0
  return uwTick;
 800d884:	4b03      	ldr	r3, [pc, #12]	@ (800d894 <HAL_GetTick+0x14>)
 800d886:	681b      	ldr	r3, [r3, #0]
}
 800d888:	4618      	mov	r0, r3
 800d88a:	46bd      	mov	sp, r7
 800d88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d890:	4770      	bx	lr
 800d892:	bf00      	nop
 800d894:	200005c4 	.word	0x200005c4

0800d898 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b084      	sub	sp, #16
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800d8a0:	f7ff ffee 	bl	800d880 <HAL_GetTick>
 800d8a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8b0:	d005      	beq.n	800d8be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800d8b2:	4b0a      	ldr	r3, [pc, #40]	@ (800d8dc <HAL_Delay+0x44>)
 800d8b4:	781b      	ldrb	r3, [r3, #0]
 800d8b6:	461a      	mov	r2, r3
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	4413      	add	r3, r2
 800d8bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800d8be:	bf00      	nop
 800d8c0:	f7ff ffde 	bl	800d880 <HAL_GetTick>
 800d8c4:	4602      	mov	r2, r0
 800d8c6:	68bb      	ldr	r3, [r7, #8]
 800d8c8:	1ad3      	subs	r3, r2, r3
 800d8ca:	68fa      	ldr	r2, [r7, #12]
 800d8cc:	429a      	cmp	r2, r3
 800d8ce:	d8f7      	bhi.n	800d8c0 <HAL_Delay+0x28>
  {
  }
}
 800d8d0:	bf00      	nop
 800d8d2:	bf00      	nop
 800d8d4:	3710      	adds	r7, #16
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}
 800d8da:	bf00      	nop
 800d8dc:	20000010 	.word	0x20000010

0800d8e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b084      	sub	sp, #16
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d101      	bne.n	800d8f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800d8f2:	2301      	movs	r3, #1
 800d8f4:	e033      	b.n	800d95e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d109      	bne.n	800d912 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f7ff fc4a 	bl	800d198 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2200      	movs	r2, #0
 800d908:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	2200      	movs	r2, #0
 800d90e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d916:	f003 0310 	and.w	r3, r3, #16
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d118      	bne.n	800d950 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d922:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800d926:	f023 0302 	bic.w	r3, r3, #2
 800d92a:	f043 0202 	orr.w	r2, r3, #2
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f000 fa0c 	bl	800dd50 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2200      	movs	r2, #0
 800d93c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d942:	f023 0303 	bic.w	r3, r3, #3
 800d946:	f043 0201 	orr.w	r2, r3, #1
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	641a      	str	r2, [r3, #64]	@ 0x40
 800d94e:	e001      	b.n	800d954 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800d950:	2301      	movs	r3, #1
 800d952:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2200      	movs	r2, #0
 800d958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800d95c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d95e:	4618      	mov	r0, r3
 800d960:	3710      	adds	r7, #16
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}
	...

0800d968 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800d968:	b480      	push	{r7}
 800d96a:	b085      	sub	sp, #20
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800d970:	2300      	movs	r3, #0
 800d972:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d97a:	2b01      	cmp	r3, #1
 800d97c:	d101      	bne.n	800d982 <HAL_ADC_Start+0x1a>
 800d97e:	2302      	movs	r3, #2
 800d980:	e097      	b.n	800dab2 <HAL_ADC_Start+0x14a>
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2201      	movs	r2, #1
 800d986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	689b      	ldr	r3, [r3, #8]
 800d990:	f003 0301 	and.w	r3, r3, #1
 800d994:	2b01      	cmp	r3, #1
 800d996:	d018      	beq.n	800d9ca <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	689a      	ldr	r2, [r3, #8]
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	f042 0201 	orr.w	r2, r2, #1
 800d9a6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800d9a8:	4b45      	ldr	r3, [pc, #276]	@ (800dac0 <HAL_ADC_Start+0x158>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	4a45      	ldr	r2, [pc, #276]	@ (800dac4 <HAL_ADC_Start+0x15c>)
 800d9ae:	fba2 2303 	umull	r2, r3, r2, r3
 800d9b2:	0c9a      	lsrs	r2, r3, #18
 800d9b4:	4613      	mov	r3, r2
 800d9b6:	005b      	lsls	r3, r3, #1
 800d9b8:	4413      	add	r3, r2
 800d9ba:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800d9bc:	e002      	b.n	800d9c4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	3b01      	subs	r3, #1
 800d9c2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800d9c4:	68bb      	ldr	r3, [r7, #8]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d1f9      	bne.n	800d9be <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	689b      	ldr	r3, [r3, #8]
 800d9d0:	f003 0301 	and.w	r3, r3, #1
 800d9d4:	2b01      	cmp	r3, #1
 800d9d6:	d15f      	bne.n	800da98 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9dc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800d9e0:	f023 0301 	bic.w	r3, r3, #1
 800d9e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	685b      	ldr	r3, [r3, #4]
 800d9f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d007      	beq.n	800da0a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9fe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800da02:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800da12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800da16:	d106      	bne.n	800da26 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da1c:	f023 0206 	bic.w	r2, r3, #6
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	645a      	str	r2, [r3, #68]	@ 0x44
 800da24:	e002      	b.n	800da2c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2200      	movs	r2, #0
 800da2a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2200      	movs	r2, #0
 800da30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800da34:	4b24      	ldr	r3, [pc, #144]	@ (800dac8 <HAL_ADC_Start+0x160>)
 800da36:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800da40:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	685b      	ldr	r3, [r3, #4]
 800da46:	f003 031f 	and.w	r3, r3, #31
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d10f      	bne.n	800da6e <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	689b      	ldr	r3, [r3, #8]
 800da54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d129      	bne.n	800dab0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	689a      	ldr	r2, [r3, #8]
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800da6a:	609a      	str	r2, [r3, #8]
 800da6c:	e020      	b.n	800dab0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	4a16      	ldr	r2, [pc, #88]	@ (800dacc <HAL_ADC_Start+0x164>)
 800da74:	4293      	cmp	r3, r2
 800da76:	d11b      	bne.n	800dab0 <HAL_ADC_Start+0x148>
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	689b      	ldr	r3, [r3, #8]
 800da7e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800da82:	2b00      	cmp	r3, #0
 800da84:	d114      	bne.n	800dab0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	689a      	ldr	r2, [r3, #8]
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800da94:	609a      	str	r2, [r3, #8]
 800da96:	e00b      	b.n	800dab0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da9c:	f043 0210 	orr.w	r2, r3, #16
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800daa8:	f043 0201 	orr.w	r2, r3, #1
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800dab0:	2300      	movs	r3, #0
}
 800dab2:	4618      	mov	r0, r3
 800dab4:	3714      	adds	r7, #20
 800dab6:	46bd      	mov	sp, r7
 800dab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabc:	4770      	bx	lr
 800dabe:	bf00      	nop
 800dac0:	20000008 	.word	0x20000008
 800dac4:	431bde83 	.word	0x431bde83
 800dac8:	40012300 	.word	0x40012300
 800dacc:	40012000 	.word	0x40012000

0800dad0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800dad0:	b480      	push	{r7}
 800dad2:	b083      	sub	sp, #12
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800dade:	4618      	mov	r0, r3
 800dae0:	370c      	adds	r7, #12
 800dae2:	46bd      	mov	sp, r7
 800dae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae8:	4770      	bx	lr
	...

0800daec <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800daec:	b480      	push	{r7}
 800daee:	b085      	sub	sp, #20
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800daf6:	2300      	movs	r3, #0
 800daf8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800db00:	2b01      	cmp	r3, #1
 800db02:	d101      	bne.n	800db08 <HAL_ADC_ConfigChannel+0x1c>
 800db04:	2302      	movs	r3, #2
 800db06:	e113      	b.n	800dd30 <HAL_ADC_ConfigChannel+0x244>
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2201      	movs	r2, #1
 800db0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	2b09      	cmp	r3, #9
 800db16:	d925      	bls.n	800db64 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	68d9      	ldr	r1, [r3, #12]
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	b29b      	uxth	r3, r3
 800db24:	461a      	mov	r2, r3
 800db26:	4613      	mov	r3, r2
 800db28:	005b      	lsls	r3, r3, #1
 800db2a:	4413      	add	r3, r2
 800db2c:	3b1e      	subs	r3, #30
 800db2e:	2207      	movs	r2, #7
 800db30:	fa02 f303 	lsl.w	r3, r2, r3
 800db34:	43da      	mvns	r2, r3
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	400a      	ands	r2, r1
 800db3c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	68d9      	ldr	r1, [r3, #12]
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	689a      	ldr	r2, [r3, #8]
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	b29b      	uxth	r3, r3
 800db4e:	4618      	mov	r0, r3
 800db50:	4603      	mov	r3, r0
 800db52:	005b      	lsls	r3, r3, #1
 800db54:	4403      	add	r3, r0
 800db56:	3b1e      	subs	r3, #30
 800db58:	409a      	lsls	r2, r3
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	430a      	orrs	r2, r1
 800db60:	60da      	str	r2, [r3, #12]
 800db62:	e022      	b.n	800dbaa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	6919      	ldr	r1, [r3, #16]
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	b29b      	uxth	r3, r3
 800db70:	461a      	mov	r2, r3
 800db72:	4613      	mov	r3, r2
 800db74:	005b      	lsls	r3, r3, #1
 800db76:	4413      	add	r3, r2
 800db78:	2207      	movs	r2, #7
 800db7a:	fa02 f303 	lsl.w	r3, r2, r3
 800db7e:	43da      	mvns	r2, r3
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	400a      	ands	r2, r1
 800db86:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	6919      	ldr	r1, [r3, #16]
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	689a      	ldr	r2, [r3, #8]
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	b29b      	uxth	r3, r3
 800db98:	4618      	mov	r0, r3
 800db9a:	4603      	mov	r3, r0
 800db9c:	005b      	lsls	r3, r3, #1
 800db9e:	4403      	add	r3, r0
 800dba0:	409a      	lsls	r2, r3
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	430a      	orrs	r2, r1
 800dba8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	685b      	ldr	r3, [r3, #4]
 800dbae:	2b06      	cmp	r3, #6
 800dbb0:	d824      	bhi.n	800dbfc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	685a      	ldr	r2, [r3, #4]
 800dbbc:	4613      	mov	r3, r2
 800dbbe:	009b      	lsls	r3, r3, #2
 800dbc0:	4413      	add	r3, r2
 800dbc2:	3b05      	subs	r3, #5
 800dbc4:	221f      	movs	r2, #31
 800dbc6:	fa02 f303 	lsl.w	r3, r2, r3
 800dbca:	43da      	mvns	r2, r3
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	400a      	ands	r2, r1
 800dbd2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	b29b      	uxth	r3, r3
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	685a      	ldr	r2, [r3, #4]
 800dbe6:	4613      	mov	r3, r2
 800dbe8:	009b      	lsls	r3, r3, #2
 800dbea:	4413      	add	r3, r2
 800dbec:	3b05      	subs	r3, #5
 800dbee:	fa00 f203 	lsl.w	r2, r0, r3
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	430a      	orrs	r2, r1
 800dbf8:	635a      	str	r2, [r3, #52]	@ 0x34
 800dbfa:	e04c      	b.n	800dc96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	685b      	ldr	r3, [r3, #4]
 800dc00:	2b0c      	cmp	r3, #12
 800dc02:	d824      	bhi.n	800dc4e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	685a      	ldr	r2, [r3, #4]
 800dc0e:	4613      	mov	r3, r2
 800dc10:	009b      	lsls	r3, r3, #2
 800dc12:	4413      	add	r3, r2
 800dc14:	3b23      	subs	r3, #35	@ 0x23
 800dc16:	221f      	movs	r2, #31
 800dc18:	fa02 f303 	lsl.w	r3, r2, r3
 800dc1c:	43da      	mvns	r2, r3
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	400a      	ands	r2, r1
 800dc24:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800dc2c:	683b      	ldr	r3, [r7, #0]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	b29b      	uxth	r3, r3
 800dc32:	4618      	mov	r0, r3
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	685a      	ldr	r2, [r3, #4]
 800dc38:	4613      	mov	r3, r2
 800dc3a:	009b      	lsls	r3, r3, #2
 800dc3c:	4413      	add	r3, r2
 800dc3e:	3b23      	subs	r3, #35	@ 0x23
 800dc40:	fa00 f203 	lsl.w	r2, r0, r3
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	430a      	orrs	r2, r1
 800dc4a:	631a      	str	r2, [r3, #48]	@ 0x30
 800dc4c:	e023      	b.n	800dc96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	685a      	ldr	r2, [r3, #4]
 800dc58:	4613      	mov	r3, r2
 800dc5a:	009b      	lsls	r3, r3, #2
 800dc5c:	4413      	add	r3, r2
 800dc5e:	3b41      	subs	r3, #65	@ 0x41
 800dc60:	221f      	movs	r2, #31
 800dc62:	fa02 f303 	lsl.w	r3, r2, r3
 800dc66:	43da      	mvns	r2, r3
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	400a      	ands	r2, r1
 800dc6e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	b29b      	uxth	r3, r3
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	685a      	ldr	r2, [r3, #4]
 800dc82:	4613      	mov	r3, r2
 800dc84:	009b      	lsls	r3, r3, #2
 800dc86:	4413      	add	r3, r2
 800dc88:	3b41      	subs	r3, #65	@ 0x41
 800dc8a:	fa00 f203 	lsl.w	r2, r0, r3
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	430a      	orrs	r2, r1
 800dc94:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800dc96:	4b29      	ldr	r3, [pc, #164]	@ (800dd3c <HAL_ADC_ConfigChannel+0x250>)
 800dc98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	4a28      	ldr	r2, [pc, #160]	@ (800dd40 <HAL_ADC_ConfigChannel+0x254>)
 800dca0:	4293      	cmp	r3, r2
 800dca2:	d10f      	bne.n	800dcc4 <HAL_ADC_ConfigChannel+0x1d8>
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	2b12      	cmp	r3, #18
 800dcaa:	d10b      	bne.n	800dcc4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	685b      	ldr	r3, [r3, #4]
 800dcb0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	685b      	ldr	r3, [r3, #4]
 800dcbc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	4a1d      	ldr	r2, [pc, #116]	@ (800dd40 <HAL_ADC_ConfigChannel+0x254>)
 800dcca:	4293      	cmp	r3, r2
 800dccc:	d12b      	bne.n	800dd26 <HAL_ADC_ConfigChannel+0x23a>
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	4a1c      	ldr	r2, [pc, #112]	@ (800dd44 <HAL_ADC_ConfigChannel+0x258>)
 800dcd4:	4293      	cmp	r3, r2
 800dcd6:	d003      	beq.n	800dce0 <HAL_ADC_ConfigChannel+0x1f4>
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	2b11      	cmp	r3, #17
 800dcde:	d122      	bne.n	800dd26 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	685b      	ldr	r3, [r3, #4]
 800dce4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	685b      	ldr	r3, [r3, #4]
 800dcf0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	4a11      	ldr	r2, [pc, #68]	@ (800dd44 <HAL_ADC_ConfigChannel+0x258>)
 800dcfe:	4293      	cmp	r3, r2
 800dd00:	d111      	bne.n	800dd26 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800dd02:	4b11      	ldr	r3, [pc, #68]	@ (800dd48 <HAL_ADC_ConfigChannel+0x25c>)
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	4a11      	ldr	r2, [pc, #68]	@ (800dd4c <HAL_ADC_ConfigChannel+0x260>)
 800dd08:	fba2 2303 	umull	r2, r3, r2, r3
 800dd0c:	0c9a      	lsrs	r2, r3, #18
 800dd0e:	4613      	mov	r3, r2
 800dd10:	009b      	lsls	r3, r3, #2
 800dd12:	4413      	add	r3, r2
 800dd14:	005b      	lsls	r3, r3, #1
 800dd16:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800dd18:	e002      	b.n	800dd20 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	3b01      	subs	r3, #1
 800dd1e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d1f9      	bne.n	800dd1a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2200      	movs	r2, #0
 800dd2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800dd2e:	2300      	movs	r3, #0
}
 800dd30:	4618      	mov	r0, r3
 800dd32:	3714      	adds	r7, #20
 800dd34:	46bd      	mov	sp, r7
 800dd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3a:	4770      	bx	lr
 800dd3c:	40012300 	.word	0x40012300
 800dd40:	40012000 	.word	0x40012000
 800dd44:	10000012 	.word	0x10000012
 800dd48:	20000008 	.word	0x20000008
 800dd4c:	431bde83 	.word	0x431bde83

0800dd50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800dd50:	b480      	push	{r7}
 800dd52:	b085      	sub	sp, #20
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800dd58:	4b79      	ldr	r3, [pc, #484]	@ (800df40 <ADC_Init+0x1f0>)
 800dd5a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	685b      	ldr	r3, [r3, #4]
 800dd60:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	685a      	ldr	r2, [r3, #4]
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	685b      	ldr	r3, [r3, #4]
 800dd70:	431a      	orrs	r2, r3
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	685a      	ldr	r2, [r3, #4]
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800dd84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	6859      	ldr	r1, [r3, #4]
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	691b      	ldr	r3, [r3, #16]
 800dd90:	021a      	lsls	r2, r3, #8
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	430a      	orrs	r2, r1
 800dd98:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	685a      	ldr	r2, [r3, #4]
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800dda8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	6859      	ldr	r1, [r3, #4]
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	689a      	ldr	r2, [r3, #8]
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	430a      	orrs	r2, r1
 800ddba:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	689a      	ldr	r2, [r3, #8]
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ddca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	6899      	ldr	r1, [r3, #8]
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	68da      	ldr	r2, [r3, #12]
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	430a      	orrs	r2, r1
 800dddc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dde2:	4a58      	ldr	r2, [pc, #352]	@ (800df44 <ADC_Init+0x1f4>)
 800dde4:	4293      	cmp	r3, r2
 800dde6:	d022      	beq.n	800de2e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	689a      	ldr	r2, [r3, #8]
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800ddf6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	6899      	ldr	r1, [r3, #8]
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	430a      	orrs	r2, r1
 800de08:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	689a      	ldr	r2, [r3, #8]
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800de18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	6899      	ldr	r1, [r3, #8]
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	430a      	orrs	r2, r1
 800de2a:	609a      	str	r2, [r3, #8]
 800de2c:	e00f      	b.n	800de4e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	689a      	ldr	r2, [r3, #8]
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800de3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	689a      	ldr	r2, [r3, #8]
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800de4c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	689a      	ldr	r2, [r3, #8]
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	f022 0202 	bic.w	r2, r2, #2
 800de5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	6899      	ldr	r1, [r3, #8]
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	7e1b      	ldrb	r3, [r3, #24]
 800de68:	005a      	lsls	r2, r3, #1
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	430a      	orrs	r2, r1
 800de70:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f893 3020 	ldrb.w	r3, [r3, #32]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d01b      	beq.n	800deb4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	685a      	ldr	r2, [r3, #4]
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800de8a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	685a      	ldr	r2, [r3, #4]
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800de9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	6859      	ldr	r1, [r3, #4]
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dea6:	3b01      	subs	r3, #1
 800dea8:	035a      	lsls	r2, r3, #13
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	430a      	orrs	r2, r1
 800deb0:	605a      	str	r2, [r3, #4]
 800deb2:	e007      	b.n	800dec4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	685a      	ldr	r2, [r3, #4]
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800dec2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800ded2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	69db      	ldr	r3, [r3, #28]
 800dede:	3b01      	subs	r3, #1
 800dee0:	051a      	lsls	r2, r3, #20
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	430a      	orrs	r2, r1
 800dee8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	689a      	ldr	r2, [r3, #8]
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800def8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	6899      	ldr	r1, [r3, #8]
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800df06:	025a      	lsls	r2, r3, #9
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	430a      	orrs	r2, r1
 800df0e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	689a      	ldr	r2, [r3, #8]
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800df1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	6899      	ldr	r1, [r3, #8]
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	695b      	ldr	r3, [r3, #20]
 800df2a:	029a      	lsls	r2, r3, #10
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	430a      	orrs	r2, r1
 800df32:	609a      	str	r2, [r3, #8]
}
 800df34:	bf00      	nop
 800df36:	3714      	adds	r7, #20
 800df38:	46bd      	mov	sp, r7
 800df3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3e:	4770      	bx	lr
 800df40:	40012300 	.word	0x40012300
 800df44:	0f000001 	.word	0x0f000001

0800df48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800df48:	b480      	push	{r7}
 800df4a:	b085      	sub	sp, #20
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f003 0307 	and.w	r3, r3, #7
 800df56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800df58:	4b0c      	ldr	r3, [pc, #48]	@ (800df8c <__NVIC_SetPriorityGrouping+0x44>)
 800df5a:	68db      	ldr	r3, [r3, #12]
 800df5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800df5e:	68ba      	ldr	r2, [r7, #8]
 800df60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800df64:	4013      	ands	r3, r2
 800df66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800df70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800df74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800df78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800df7a:	4a04      	ldr	r2, [pc, #16]	@ (800df8c <__NVIC_SetPriorityGrouping+0x44>)
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	60d3      	str	r3, [r2, #12]
}
 800df80:	bf00      	nop
 800df82:	3714      	adds	r7, #20
 800df84:	46bd      	mov	sp, r7
 800df86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8a:	4770      	bx	lr
 800df8c:	e000ed00 	.word	0xe000ed00

0800df90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800df90:	b480      	push	{r7}
 800df92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800df94:	4b04      	ldr	r3, [pc, #16]	@ (800dfa8 <__NVIC_GetPriorityGrouping+0x18>)
 800df96:	68db      	ldr	r3, [r3, #12]
 800df98:	0a1b      	lsrs	r3, r3, #8
 800df9a:	f003 0307 	and.w	r3, r3, #7
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa6:	4770      	bx	lr
 800dfa8:	e000ed00 	.word	0xe000ed00

0800dfac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800dfac:	b480      	push	{r7}
 800dfae:	b083      	sub	sp, #12
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800dfb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	db0b      	blt.n	800dfd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800dfbe:	79fb      	ldrb	r3, [r7, #7]
 800dfc0:	f003 021f 	and.w	r2, r3, #31
 800dfc4:	4907      	ldr	r1, [pc, #28]	@ (800dfe4 <__NVIC_EnableIRQ+0x38>)
 800dfc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dfca:	095b      	lsrs	r3, r3, #5
 800dfcc:	2001      	movs	r0, #1
 800dfce:	fa00 f202 	lsl.w	r2, r0, r2
 800dfd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800dfd6:	bf00      	nop
 800dfd8:	370c      	adds	r7, #12
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe0:	4770      	bx	lr
 800dfe2:	bf00      	nop
 800dfe4:	e000e100 	.word	0xe000e100

0800dfe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800dfe8:	b480      	push	{r7}
 800dfea:	b083      	sub	sp, #12
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	4603      	mov	r3, r0
 800dff0:	6039      	str	r1, [r7, #0]
 800dff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800dff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	db0a      	blt.n	800e012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	b2da      	uxtb	r2, r3
 800e000:	490c      	ldr	r1, [pc, #48]	@ (800e034 <__NVIC_SetPriority+0x4c>)
 800e002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e006:	0112      	lsls	r2, r2, #4
 800e008:	b2d2      	uxtb	r2, r2
 800e00a:	440b      	add	r3, r1
 800e00c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800e010:	e00a      	b.n	800e028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	b2da      	uxtb	r2, r3
 800e016:	4908      	ldr	r1, [pc, #32]	@ (800e038 <__NVIC_SetPriority+0x50>)
 800e018:	79fb      	ldrb	r3, [r7, #7]
 800e01a:	f003 030f 	and.w	r3, r3, #15
 800e01e:	3b04      	subs	r3, #4
 800e020:	0112      	lsls	r2, r2, #4
 800e022:	b2d2      	uxtb	r2, r2
 800e024:	440b      	add	r3, r1
 800e026:	761a      	strb	r2, [r3, #24]
}
 800e028:	bf00      	nop
 800e02a:	370c      	adds	r7, #12
 800e02c:	46bd      	mov	sp, r7
 800e02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e032:	4770      	bx	lr
 800e034:	e000e100 	.word	0xe000e100
 800e038:	e000ed00 	.word	0xe000ed00

0800e03c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800e03c:	b480      	push	{r7}
 800e03e:	b089      	sub	sp, #36	@ 0x24
 800e040:	af00      	add	r7, sp, #0
 800e042:	60f8      	str	r0, [r7, #12]
 800e044:	60b9      	str	r1, [r7, #8]
 800e046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	f003 0307 	and.w	r3, r3, #7
 800e04e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e050:	69fb      	ldr	r3, [r7, #28]
 800e052:	f1c3 0307 	rsb	r3, r3, #7
 800e056:	2b04      	cmp	r3, #4
 800e058:	bf28      	it	cs
 800e05a:	2304      	movcs	r3, #4
 800e05c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e05e:	69fb      	ldr	r3, [r7, #28]
 800e060:	3304      	adds	r3, #4
 800e062:	2b06      	cmp	r3, #6
 800e064:	d902      	bls.n	800e06c <NVIC_EncodePriority+0x30>
 800e066:	69fb      	ldr	r3, [r7, #28]
 800e068:	3b03      	subs	r3, #3
 800e06a:	e000      	b.n	800e06e <NVIC_EncodePriority+0x32>
 800e06c:	2300      	movs	r3, #0
 800e06e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e070:	f04f 32ff 	mov.w	r2, #4294967295
 800e074:	69bb      	ldr	r3, [r7, #24]
 800e076:	fa02 f303 	lsl.w	r3, r2, r3
 800e07a:	43da      	mvns	r2, r3
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	401a      	ands	r2, r3
 800e080:	697b      	ldr	r3, [r7, #20]
 800e082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800e084:	f04f 31ff 	mov.w	r1, #4294967295
 800e088:	697b      	ldr	r3, [r7, #20]
 800e08a:	fa01 f303 	lsl.w	r3, r1, r3
 800e08e:	43d9      	mvns	r1, r3
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e094:	4313      	orrs	r3, r2
         );
}
 800e096:	4618      	mov	r0, r3
 800e098:	3724      	adds	r7, #36	@ 0x24
 800e09a:	46bd      	mov	sp, r7
 800e09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a0:	4770      	bx	lr
	...

0800e0a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b082      	sub	sp, #8
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	3b01      	subs	r3, #1
 800e0b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e0b4:	d301      	bcc.n	800e0ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	e00f      	b.n	800e0da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800e0ba:	4a0a      	ldr	r2, [pc, #40]	@ (800e0e4 <SysTick_Config+0x40>)
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	3b01      	subs	r3, #1
 800e0c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800e0c2:	210f      	movs	r1, #15
 800e0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e0c8:	f7ff ff8e 	bl	800dfe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800e0cc:	4b05      	ldr	r3, [pc, #20]	@ (800e0e4 <SysTick_Config+0x40>)
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800e0d2:	4b04      	ldr	r3, [pc, #16]	@ (800e0e4 <SysTick_Config+0x40>)
 800e0d4:	2207      	movs	r2, #7
 800e0d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800e0d8:	2300      	movs	r3, #0
}
 800e0da:	4618      	mov	r0, r3
 800e0dc:	3708      	adds	r7, #8
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bd80      	pop	{r7, pc}
 800e0e2:	bf00      	nop
 800e0e4:	e000e010 	.word	0xe000e010

0800e0e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b082      	sub	sp, #8
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f7ff ff29 	bl	800df48 <__NVIC_SetPriorityGrouping>
}
 800e0f6:	bf00      	nop
 800e0f8:	3708      	adds	r7, #8
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bd80      	pop	{r7, pc}

0800e0fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800e0fe:	b580      	push	{r7, lr}
 800e100:	b086      	sub	sp, #24
 800e102:	af00      	add	r7, sp, #0
 800e104:	4603      	mov	r3, r0
 800e106:	60b9      	str	r1, [r7, #8]
 800e108:	607a      	str	r2, [r7, #4]
 800e10a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800e10c:	2300      	movs	r3, #0
 800e10e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800e110:	f7ff ff3e 	bl	800df90 <__NVIC_GetPriorityGrouping>
 800e114:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800e116:	687a      	ldr	r2, [r7, #4]
 800e118:	68b9      	ldr	r1, [r7, #8]
 800e11a:	6978      	ldr	r0, [r7, #20]
 800e11c:	f7ff ff8e 	bl	800e03c <NVIC_EncodePriority>
 800e120:	4602      	mov	r2, r0
 800e122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e126:	4611      	mov	r1, r2
 800e128:	4618      	mov	r0, r3
 800e12a:	f7ff ff5d 	bl	800dfe8 <__NVIC_SetPriority>
}
 800e12e:	bf00      	nop
 800e130:	3718      	adds	r7, #24
 800e132:	46bd      	mov	sp, r7
 800e134:	bd80      	pop	{r7, pc}

0800e136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e136:	b580      	push	{r7, lr}
 800e138:	b082      	sub	sp, #8
 800e13a:	af00      	add	r7, sp, #0
 800e13c:	4603      	mov	r3, r0
 800e13e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800e140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e144:	4618      	mov	r0, r3
 800e146:	f7ff ff31 	bl	800dfac <__NVIC_EnableIRQ>
}
 800e14a:	bf00      	nop
 800e14c:	3708      	adds	r7, #8
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}

0800e152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800e152:	b580      	push	{r7, lr}
 800e154:	b082      	sub	sp, #8
 800e156:	af00      	add	r7, sp, #0
 800e158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	f7ff ffa2 	bl	800e0a4 <SysTick_Config>
 800e160:	4603      	mov	r3, r0
}
 800e162:	4618      	mov	r0, r3
 800e164:	3708      	adds	r7, #8
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}
	...

0800e16c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e16c:	b480      	push	{r7}
 800e16e:	b089      	sub	sp, #36	@ 0x24
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
 800e174:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800e176:	2300      	movs	r3, #0
 800e178:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800e17a:	2300      	movs	r3, #0
 800e17c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800e17e:	2300      	movs	r3, #0
 800e180:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800e182:	2300      	movs	r3, #0
 800e184:	61fb      	str	r3, [r7, #28]
 800e186:	e159      	b.n	800e43c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800e188:	2201      	movs	r2, #1
 800e18a:	69fb      	ldr	r3, [r7, #28]
 800e18c:	fa02 f303 	lsl.w	r3, r2, r3
 800e190:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	697a      	ldr	r2, [r7, #20]
 800e198:	4013      	ands	r3, r2
 800e19a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800e19c:	693a      	ldr	r2, [r7, #16]
 800e19e:	697b      	ldr	r3, [r7, #20]
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	f040 8148 	bne.w	800e436 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	685b      	ldr	r3, [r3, #4]
 800e1aa:	f003 0303 	and.w	r3, r3, #3
 800e1ae:	2b01      	cmp	r3, #1
 800e1b0:	d005      	beq.n	800e1be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	685b      	ldr	r3, [r3, #4]
 800e1b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800e1ba:	2b02      	cmp	r3, #2
 800e1bc:	d130      	bne.n	800e220 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	689b      	ldr	r3, [r3, #8]
 800e1c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800e1c4:	69fb      	ldr	r3, [r7, #28]
 800e1c6:	005b      	lsls	r3, r3, #1
 800e1c8:	2203      	movs	r2, #3
 800e1ca:	fa02 f303 	lsl.w	r3, r2, r3
 800e1ce:	43db      	mvns	r3, r3
 800e1d0:	69ba      	ldr	r2, [r7, #24]
 800e1d2:	4013      	ands	r3, r2
 800e1d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	68da      	ldr	r2, [r3, #12]
 800e1da:	69fb      	ldr	r3, [r7, #28]
 800e1dc:	005b      	lsls	r3, r3, #1
 800e1de:	fa02 f303 	lsl.w	r3, r2, r3
 800e1e2:	69ba      	ldr	r2, [r7, #24]
 800e1e4:	4313      	orrs	r3, r2
 800e1e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	69ba      	ldr	r2, [r7, #24]
 800e1ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	685b      	ldr	r3, [r3, #4]
 800e1f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800e1f4:	2201      	movs	r2, #1
 800e1f6:	69fb      	ldr	r3, [r7, #28]
 800e1f8:	fa02 f303 	lsl.w	r3, r2, r3
 800e1fc:	43db      	mvns	r3, r3
 800e1fe:	69ba      	ldr	r2, [r7, #24]
 800e200:	4013      	ands	r3, r2
 800e202:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	685b      	ldr	r3, [r3, #4]
 800e208:	091b      	lsrs	r3, r3, #4
 800e20a:	f003 0201 	and.w	r2, r3, #1
 800e20e:	69fb      	ldr	r3, [r7, #28]
 800e210:	fa02 f303 	lsl.w	r3, r2, r3
 800e214:	69ba      	ldr	r2, [r7, #24]
 800e216:	4313      	orrs	r3, r2
 800e218:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	69ba      	ldr	r2, [r7, #24]
 800e21e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	685b      	ldr	r3, [r3, #4]
 800e224:	f003 0303 	and.w	r3, r3, #3
 800e228:	2b03      	cmp	r3, #3
 800e22a:	d017      	beq.n	800e25c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	68db      	ldr	r3, [r3, #12]
 800e230:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800e232:	69fb      	ldr	r3, [r7, #28]
 800e234:	005b      	lsls	r3, r3, #1
 800e236:	2203      	movs	r2, #3
 800e238:	fa02 f303 	lsl.w	r3, r2, r3
 800e23c:	43db      	mvns	r3, r3
 800e23e:	69ba      	ldr	r2, [r7, #24]
 800e240:	4013      	ands	r3, r2
 800e242:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	689a      	ldr	r2, [r3, #8]
 800e248:	69fb      	ldr	r3, [r7, #28]
 800e24a:	005b      	lsls	r3, r3, #1
 800e24c:	fa02 f303 	lsl.w	r3, r2, r3
 800e250:	69ba      	ldr	r2, [r7, #24]
 800e252:	4313      	orrs	r3, r2
 800e254:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	69ba      	ldr	r2, [r7, #24]
 800e25a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	685b      	ldr	r3, [r3, #4]
 800e260:	f003 0303 	and.w	r3, r3, #3
 800e264:	2b02      	cmp	r3, #2
 800e266:	d123      	bne.n	800e2b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e268:	69fb      	ldr	r3, [r7, #28]
 800e26a:	08da      	lsrs	r2, r3, #3
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	3208      	adds	r2, #8
 800e270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e274:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800e276:	69fb      	ldr	r3, [r7, #28]
 800e278:	f003 0307 	and.w	r3, r3, #7
 800e27c:	009b      	lsls	r3, r3, #2
 800e27e:	220f      	movs	r2, #15
 800e280:	fa02 f303 	lsl.w	r3, r2, r3
 800e284:	43db      	mvns	r3, r3
 800e286:	69ba      	ldr	r2, [r7, #24]
 800e288:	4013      	ands	r3, r2
 800e28a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	691a      	ldr	r2, [r3, #16]
 800e290:	69fb      	ldr	r3, [r7, #28]
 800e292:	f003 0307 	and.w	r3, r3, #7
 800e296:	009b      	lsls	r3, r3, #2
 800e298:	fa02 f303 	lsl.w	r3, r2, r3
 800e29c:	69ba      	ldr	r2, [r7, #24]
 800e29e:	4313      	orrs	r3, r2
 800e2a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800e2a2:	69fb      	ldr	r3, [r7, #28]
 800e2a4:	08da      	lsrs	r2, r3, #3
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	3208      	adds	r2, #8
 800e2aa:	69b9      	ldr	r1, [r7, #24]
 800e2ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800e2b6:	69fb      	ldr	r3, [r7, #28]
 800e2b8:	005b      	lsls	r3, r3, #1
 800e2ba:	2203      	movs	r2, #3
 800e2bc:	fa02 f303 	lsl.w	r3, r2, r3
 800e2c0:	43db      	mvns	r3, r3
 800e2c2:	69ba      	ldr	r2, [r7, #24]
 800e2c4:	4013      	ands	r3, r2
 800e2c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	685b      	ldr	r3, [r3, #4]
 800e2cc:	f003 0203 	and.w	r2, r3, #3
 800e2d0:	69fb      	ldr	r3, [r7, #28]
 800e2d2:	005b      	lsls	r3, r3, #1
 800e2d4:	fa02 f303 	lsl.w	r3, r2, r3
 800e2d8:	69ba      	ldr	r2, [r7, #24]
 800e2da:	4313      	orrs	r3, r2
 800e2dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	69ba      	ldr	r2, [r7, #24]
 800e2e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	685b      	ldr	r3, [r3, #4]
 800e2e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	f000 80a2 	beq.w	800e436 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	60fb      	str	r3, [r7, #12]
 800e2f6:	4b57      	ldr	r3, [pc, #348]	@ (800e454 <HAL_GPIO_Init+0x2e8>)
 800e2f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e2fa:	4a56      	ldr	r2, [pc, #344]	@ (800e454 <HAL_GPIO_Init+0x2e8>)
 800e2fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e300:	6453      	str	r3, [r2, #68]	@ 0x44
 800e302:	4b54      	ldr	r3, [pc, #336]	@ (800e454 <HAL_GPIO_Init+0x2e8>)
 800e304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e306:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e30a:	60fb      	str	r3, [r7, #12]
 800e30c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800e30e:	4a52      	ldr	r2, [pc, #328]	@ (800e458 <HAL_GPIO_Init+0x2ec>)
 800e310:	69fb      	ldr	r3, [r7, #28]
 800e312:	089b      	lsrs	r3, r3, #2
 800e314:	3302      	adds	r3, #2
 800e316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e31a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800e31c:	69fb      	ldr	r3, [r7, #28]
 800e31e:	f003 0303 	and.w	r3, r3, #3
 800e322:	009b      	lsls	r3, r3, #2
 800e324:	220f      	movs	r2, #15
 800e326:	fa02 f303 	lsl.w	r3, r2, r3
 800e32a:	43db      	mvns	r3, r3
 800e32c:	69ba      	ldr	r2, [r7, #24]
 800e32e:	4013      	ands	r3, r2
 800e330:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	4a49      	ldr	r2, [pc, #292]	@ (800e45c <HAL_GPIO_Init+0x2f0>)
 800e336:	4293      	cmp	r3, r2
 800e338:	d019      	beq.n	800e36e <HAL_GPIO_Init+0x202>
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	4a48      	ldr	r2, [pc, #288]	@ (800e460 <HAL_GPIO_Init+0x2f4>)
 800e33e:	4293      	cmp	r3, r2
 800e340:	d013      	beq.n	800e36a <HAL_GPIO_Init+0x1fe>
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	4a47      	ldr	r2, [pc, #284]	@ (800e464 <HAL_GPIO_Init+0x2f8>)
 800e346:	4293      	cmp	r3, r2
 800e348:	d00d      	beq.n	800e366 <HAL_GPIO_Init+0x1fa>
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	4a46      	ldr	r2, [pc, #280]	@ (800e468 <HAL_GPIO_Init+0x2fc>)
 800e34e:	4293      	cmp	r3, r2
 800e350:	d007      	beq.n	800e362 <HAL_GPIO_Init+0x1f6>
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	4a45      	ldr	r2, [pc, #276]	@ (800e46c <HAL_GPIO_Init+0x300>)
 800e356:	4293      	cmp	r3, r2
 800e358:	d101      	bne.n	800e35e <HAL_GPIO_Init+0x1f2>
 800e35a:	2304      	movs	r3, #4
 800e35c:	e008      	b.n	800e370 <HAL_GPIO_Init+0x204>
 800e35e:	2307      	movs	r3, #7
 800e360:	e006      	b.n	800e370 <HAL_GPIO_Init+0x204>
 800e362:	2303      	movs	r3, #3
 800e364:	e004      	b.n	800e370 <HAL_GPIO_Init+0x204>
 800e366:	2302      	movs	r3, #2
 800e368:	e002      	b.n	800e370 <HAL_GPIO_Init+0x204>
 800e36a:	2301      	movs	r3, #1
 800e36c:	e000      	b.n	800e370 <HAL_GPIO_Init+0x204>
 800e36e:	2300      	movs	r3, #0
 800e370:	69fa      	ldr	r2, [r7, #28]
 800e372:	f002 0203 	and.w	r2, r2, #3
 800e376:	0092      	lsls	r2, r2, #2
 800e378:	4093      	lsls	r3, r2
 800e37a:	69ba      	ldr	r2, [r7, #24]
 800e37c:	4313      	orrs	r3, r2
 800e37e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e380:	4935      	ldr	r1, [pc, #212]	@ (800e458 <HAL_GPIO_Init+0x2ec>)
 800e382:	69fb      	ldr	r3, [r7, #28]
 800e384:	089b      	lsrs	r3, r3, #2
 800e386:	3302      	adds	r3, #2
 800e388:	69ba      	ldr	r2, [r7, #24]
 800e38a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800e38e:	4b38      	ldr	r3, [pc, #224]	@ (800e470 <HAL_GPIO_Init+0x304>)
 800e390:	689b      	ldr	r3, [r3, #8]
 800e392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e394:	693b      	ldr	r3, [r7, #16]
 800e396:	43db      	mvns	r3, r3
 800e398:	69ba      	ldr	r2, [r7, #24]
 800e39a:	4013      	ands	r3, r2
 800e39c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	685b      	ldr	r3, [r3, #4]
 800e3a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d003      	beq.n	800e3b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800e3aa:	69ba      	ldr	r2, [r7, #24]
 800e3ac:	693b      	ldr	r3, [r7, #16]
 800e3ae:	4313      	orrs	r3, r2
 800e3b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800e3b2:	4a2f      	ldr	r2, [pc, #188]	@ (800e470 <HAL_GPIO_Init+0x304>)
 800e3b4:	69bb      	ldr	r3, [r7, #24]
 800e3b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800e3b8:	4b2d      	ldr	r3, [pc, #180]	@ (800e470 <HAL_GPIO_Init+0x304>)
 800e3ba:	68db      	ldr	r3, [r3, #12]
 800e3bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e3be:	693b      	ldr	r3, [r7, #16]
 800e3c0:	43db      	mvns	r3, r3
 800e3c2:	69ba      	ldr	r2, [r7, #24]
 800e3c4:	4013      	ands	r3, r2
 800e3c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	685b      	ldr	r3, [r3, #4]
 800e3cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d003      	beq.n	800e3dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800e3d4:	69ba      	ldr	r2, [r7, #24]
 800e3d6:	693b      	ldr	r3, [r7, #16]
 800e3d8:	4313      	orrs	r3, r2
 800e3da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800e3dc:	4a24      	ldr	r2, [pc, #144]	@ (800e470 <HAL_GPIO_Init+0x304>)
 800e3de:	69bb      	ldr	r3, [r7, #24]
 800e3e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800e3e2:	4b23      	ldr	r3, [pc, #140]	@ (800e470 <HAL_GPIO_Init+0x304>)
 800e3e4:	685b      	ldr	r3, [r3, #4]
 800e3e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e3e8:	693b      	ldr	r3, [r7, #16]
 800e3ea:	43db      	mvns	r3, r3
 800e3ec:	69ba      	ldr	r2, [r7, #24]
 800e3ee:	4013      	ands	r3, r2
 800e3f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	685b      	ldr	r3, [r3, #4]
 800e3f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d003      	beq.n	800e406 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800e3fe:	69ba      	ldr	r2, [r7, #24]
 800e400:	693b      	ldr	r3, [r7, #16]
 800e402:	4313      	orrs	r3, r2
 800e404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800e406:	4a1a      	ldr	r2, [pc, #104]	@ (800e470 <HAL_GPIO_Init+0x304>)
 800e408:	69bb      	ldr	r3, [r7, #24]
 800e40a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800e40c:	4b18      	ldr	r3, [pc, #96]	@ (800e470 <HAL_GPIO_Init+0x304>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e412:	693b      	ldr	r3, [r7, #16]
 800e414:	43db      	mvns	r3, r3
 800e416:	69ba      	ldr	r2, [r7, #24]
 800e418:	4013      	ands	r3, r2
 800e41a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	685b      	ldr	r3, [r3, #4]
 800e420:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e424:	2b00      	cmp	r3, #0
 800e426:	d003      	beq.n	800e430 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800e428:	69ba      	ldr	r2, [r7, #24]
 800e42a:	693b      	ldr	r3, [r7, #16]
 800e42c:	4313      	orrs	r3, r2
 800e42e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800e430:	4a0f      	ldr	r2, [pc, #60]	@ (800e470 <HAL_GPIO_Init+0x304>)
 800e432:	69bb      	ldr	r3, [r7, #24]
 800e434:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800e436:	69fb      	ldr	r3, [r7, #28]
 800e438:	3301      	adds	r3, #1
 800e43a:	61fb      	str	r3, [r7, #28]
 800e43c:	69fb      	ldr	r3, [r7, #28]
 800e43e:	2b0f      	cmp	r3, #15
 800e440:	f67f aea2 	bls.w	800e188 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800e444:	bf00      	nop
 800e446:	bf00      	nop
 800e448:	3724      	adds	r7, #36	@ 0x24
 800e44a:	46bd      	mov	sp, r7
 800e44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e450:	4770      	bx	lr
 800e452:	bf00      	nop
 800e454:	40023800 	.word	0x40023800
 800e458:	40013800 	.word	0x40013800
 800e45c:	40020000 	.word	0x40020000
 800e460:	40020400 	.word	0x40020400
 800e464:	40020800 	.word	0x40020800
 800e468:	40020c00 	.word	0x40020c00
 800e46c:	40021000 	.word	0x40021000
 800e470:	40013c00 	.word	0x40013c00

0800e474 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800e474:	b480      	push	{r7}
 800e476:	b085      	sub	sp, #20
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
 800e47c:	460b      	mov	r3, r1
 800e47e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	691a      	ldr	r2, [r3, #16]
 800e484:	887b      	ldrh	r3, [r7, #2]
 800e486:	4013      	ands	r3, r2
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d002      	beq.n	800e492 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800e48c:	2301      	movs	r3, #1
 800e48e:	73fb      	strb	r3, [r7, #15]
 800e490:	e001      	b.n	800e496 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800e492:	2300      	movs	r3, #0
 800e494:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e496:	7bfb      	ldrb	r3, [r7, #15]
}
 800e498:	4618      	mov	r0, r3
 800e49a:	3714      	adds	r7, #20
 800e49c:	46bd      	mov	sp, r7
 800e49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a2:	4770      	bx	lr

0800e4a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e4a4:	b480      	push	{r7}
 800e4a6:	b083      	sub	sp, #12
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
 800e4ac:	460b      	mov	r3, r1
 800e4ae:	807b      	strh	r3, [r7, #2]
 800e4b0:	4613      	mov	r3, r2
 800e4b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800e4b4:	787b      	ldrb	r3, [r7, #1]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d003      	beq.n	800e4c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800e4ba:	887a      	ldrh	r2, [r7, #2]
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800e4c0:	e003      	b.n	800e4ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800e4c2:	887b      	ldrh	r3, [r7, #2]
 800e4c4:	041a      	lsls	r2, r3, #16
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	619a      	str	r2, [r3, #24]
}
 800e4ca:	bf00      	nop
 800e4cc:	370c      	adds	r7, #12
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d4:	4770      	bx	lr
	...

0800e4d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b082      	sub	sp, #8
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	4603      	mov	r3, r0
 800e4e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800e4e2:	4b08      	ldr	r3, [pc, #32]	@ (800e504 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800e4e4:	695a      	ldr	r2, [r3, #20]
 800e4e6:	88fb      	ldrh	r3, [r7, #6]
 800e4e8:	4013      	ands	r3, r2
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d006      	beq.n	800e4fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800e4ee:	4a05      	ldr	r2, [pc, #20]	@ (800e504 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800e4f0:	88fb      	ldrh	r3, [r7, #6]
 800e4f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800e4f4:	88fb      	ldrh	r3, [r7, #6]
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f7fe f8b0 	bl	800c65c <HAL_GPIO_EXTI_Callback>
  }
}
 800e4fc:	bf00      	nop
 800e4fe:	3708      	adds	r7, #8
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}
 800e504:	40013c00 	.word	0x40013c00

0800e508 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b084      	sub	sp, #16
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d101      	bne.n	800e51a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800e516:	2301      	movs	r3, #1
 800e518:	e12b      	b.n	800e772 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e520:	b2db      	uxtb	r3, r3
 800e522:	2b00      	cmp	r3, #0
 800e524:	d106      	bne.n	800e534 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2200      	movs	r2, #0
 800e52a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	f7fe fe76 	bl	800d220 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2224      	movs	r2, #36	@ 0x24
 800e538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	681a      	ldr	r2, [r3, #0]
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	f022 0201 	bic.w	r2, r2, #1
 800e54a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	681a      	ldr	r2, [r3, #0]
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e55a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	681a      	ldr	r2, [r3, #0]
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e56a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800e56c:	f001 fc20 	bl	800fdb0 <HAL_RCC_GetPCLK1Freq>
 800e570:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	685b      	ldr	r3, [r3, #4]
 800e576:	4a81      	ldr	r2, [pc, #516]	@ (800e77c <HAL_I2C_Init+0x274>)
 800e578:	4293      	cmp	r3, r2
 800e57a:	d807      	bhi.n	800e58c <HAL_I2C_Init+0x84>
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	4a80      	ldr	r2, [pc, #512]	@ (800e780 <HAL_I2C_Init+0x278>)
 800e580:	4293      	cmp	r3, r2
 800e582:	bf94      	ite	ls
 800e584:	2301      	movls	r3, #1
 800e586:	2300      	movhi	r3, #0
 800e588:	b2db      	uxtb	r3, r3
 800e58a:	e006      	b.n	800e59a <HAL_I2C_Init+0x92>
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	4a7d      	ldr	r2, [pc, #500]	@ (800e784 <HAL_I2C_Init+0x27c>)
 800e590:	4293      	cmp	r3, r2
 800e592:	bf94      	ite	ls
 800e594:	2301      	movls	r3, #1
 800e596:	2300      	movhi	r3, #0
 800e598:	b2db      	uxtb	r3, r3
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d001      	beq.n	800e5a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800e59e:	2301      	movs	r3, #1
 800e5a0:	e0e7      	b.n	800e772 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	4a78      	ldr	r2, [pc, #480]	@ (800e788 <HAL_I2C_Init+0x280>)
 800e5a6:	fba2 2303 	umull	r2, r3, r2, r3
 800e5aa:	0c9b      	lsrs	r3, r3, #18
 800e5ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	685b      	ldr	r3, [r3, #4]
 800e5b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	68ba      	ldr	r2, [r7, #8]
 800e5be:	430a      	orrs	r2, r1
 800e5c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	6a1b      	ldr	r3, [r3, #32]
 800e5c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	685b      	ldr	r3, [r3, #4]
 800e5d0:	4a6a      	ldr	r2, [pc, #424]	@ (800e77c <HAL_I2C_Init+0x274>)
 800e5d2:	4293      	cmp	r3, r2
 800e5d4:	d802      	bhi.n	800e5dc <HAL_I2C_Init+0xd4>
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	3301      	adds	r3, #1
 800e5da:	e009      	b.n	800e5f0 <HAL_I2C_Init+0xe8>
 800e5dc:	68bb      	ldr	r3, [r7, #8]
 800e5de:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800e5e2:	fb02 f303 	mul.w	r3, r2, r3
 800e5e6:	4a69      	ldr	r2, [pc, #420]	@ (800e78c <HAL_I2C_Init+0x284>)
 800e5e8:	fba2 2303 	umull	r2, r3, r2, r3
 800e5ec:	099b      	lsrs	r3, r3, #6
 800e5ee:	3301      	adds	r3, #1
 800e5f0:	687a      	ldr	r2, [r7, #4]
 800e5f2:	6812      	ldr	r2, [r2, #0]
 800e5f4:	430b      	orrs	r3, r1
 800e5f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	69db      	ldr	r3, [r3, #28]
 800e5fe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800e602:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	685b      	ldr	r3, [r3, #4]
 800e60a:	495c      	ldr	r1, [pc, #368]	@ (800e77c <HAL_I2C_Init+0x274>)
 800e60c:	428b      	cmp	r3, r1
 800e60e:	d819      	bhi.n	800e644 <HAL_I2C_Init+0x13c>
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	1e59      	subs	r1, r3, #1
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	685b      	ldr	r3, [r3, #4]
 800e618:	005b      	lsls	r3, r3, #1
 800e61a:	fbb1 f3f3 	udiv	r3, r1, r3
 800e61e:	1c59      	adds	r1, r3, #1
 800e620:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800e624:	400b      	ands	r3, r1
 800e626:	2b00      	cmp	r3, #0
 800e628:	d00a      	beq.n	800e640 <HAL_I2C_Init+0x138>
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	1e59      	subs	r1, r3, #1
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	685b      	ldr	r3, [r3, #4]
 800e632:	005b      	lsls	r3, r3, #1
 800e634:	fbb1 f3f3 	udiv	r3, r1, r3
 800e638:	3301      	adds	r3, #1
 800e63a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e63e:	e051      	b.n	800e6e4 <HAL_I2C_Init+0x1dc>
 800e640:	2304      	movs	r3, #4
 800e642:	e04f      	b.n	800e6e4 <HAL_I2C_Init+0x1dc>
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	689b      	ldr	r3, [r3, #8]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d111      	bne.n	800e670 <HAL_I2C_Init+0x168>
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	1e58      	subs	r0, r3, #1
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	6859      	ldr	r1, [r3, #4]
 800e654:	460b      	mov	r3, r1
 800e656:	005b      	lsls	r3, r3, #1
 800e658:	440b      	add	r3, r1
 800e65a:	fbb0 f3f3 	udiv	r3, r0, r3
 800e65e:	3301      	adds	r3, #1
 800e660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e664:	2b00      	cmp	r3, #0
 800e666:	bf0c      	ite	eq
 800e668:	2301      	moveq	r3, #1
 800e66a:	2300      	movne	r3, #0
 800e66c:	b2db      	uxtb	r3, r3
 800e66e:	e012      	b.n	800e696 <HAL_I2C_Init+0x18e>
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	1e58      	subs	r0, r3, #1
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	6859      	ldr	r1, [r3, #4]
 800e678:	460b      	mov	r3, r1
 800e67a:	009b      	lsls	r3, r3, #2
 800e67c:	440b      	add	r3, r1
 800e67e:	0099      	lsls	r1, r3, #2
 800e680:	440b      	add	r3, r1
 800e682:	fbb0 f3f3 	udiv	r3, r0, r3
 800e686:	3301      	adds	r3, #1
 800e688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	bf0c      	ite	eq
 800e690:	2301      	moveq	r3, #1
 800e692:	2300      	movne	r3, #0
 800e694:	b2db      	uxtb	r3, r3
 800e696:	2b00      	cmp	r3, #0
 800e698:	d001      	beq.n	800e69e <HAL_I2C_Init+0x196>
 800e69a:	2301      	movs	r3, #1
 800e69c:	e022      	b.n	800e6e4 <HAL_I2C_Init+0x1dc>
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	689b      	ldr	r3, [r3, #8]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d10e      	bne.n	800e6c4 <HAL_I2C_Init+0x1bc>
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	1e58      	subs	r0, r3, #1
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	6859      	ldr	r1, [r3, #4]
 800e6ae:	460b      	mov	r3, r1
 800e6b0:	005b      	lsls	r3, r3, #1
 800e6b2:	440b      	add	r3, r1
 800e6b4:	fbb0 f3f3 	udiv	r3, r0, r3
 800e6b8:	3301      	adds	r3, #1
 800e6ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e6be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e6c2:	e00f      	b.n	800e6e4 <HAL_I2C_Init+0x1dc>
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	1e58      	subs	r0, r3, #1
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	6859      	ldr	r1, [r3, #4]
 800e6cc:	460b      	mov	r3, r1
 800e6ce:	009b      	lsls	r3, r3, #2
 800e6d0:	440b      	add	r3, r1
 800e6d2:	0099      	lsls	r1, r3, #2
 800e6d4:	440b      	add	r3, r1
 800e6d6:	fbb0 f3f3 	udiv	r3, r0, r3
 800e6da:	3301      	adds	r3, #1
 800e6dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e6e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e6e4:	6879      	ldr	r1, [r7, #4]
 800e6e6:	6809      	ldr	r1, [r1, #0]
 800e6e8:	4313      	orrs	r3, r2
 800e6ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	69da      	ldr	r2, [r3, #28]
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	6a1b      	ldr	r3, [r3, #32]
 800e6fe:	431a      	orrs	r2, r3
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	430a      	orrs	r2, r1
 800e706:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	689b      	ldr	r3, [r3, #8]
 800e70e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800e712:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e716:	687a      	ldr	r2, [r7, #4]
 800e718:	6911      	ldr	r1, [r2, #16]
 800e71a:	687a      	ldr	r2, [r7, #4]
 800e71c:	68d2      	ldr	r2, [r2, #12]
 800e71e:	4311      	orrs	r1, r2
 800e720:	687a      	ldr	r2, [r7, #4]
 800e722:	6812      	ldr	r2, [r2, #0]
 800e724:	430b      	orrs	r3, r1
 800e726:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	68db      	ldr	r3, [r3, #12]
 800e72e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	695a      	ldr	r2, [r3, #20]
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	699b      	ldr	r3, [r3, #24]
 800e73a:	431a      	orrs	r2, r3
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	430a      	orrs	r2, r1
 800e742:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	681a      	ldr	r2, [r3, #0]
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	f042 0201 	orr.w	r2, r2, #1
 800e752:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2200      	movs	r2, #0
 800e758:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	2220      	movs	r2, #32
 800e75e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	2200      	movs	r2, #0
 800e766:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2200      	movs	r2, #0
 800e76c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800e770:	2300      	movs	r3, #0
}
 800e772:	4618      	mov	r0, r3
 800e774:	3710      	adds	r7, #16
 800e776:	46bd      	mov	sp, r7
 800e778:	bd80      	pop	{r7, pc}
 800e77a:	bf00      	nop
 800e77c:	000186a0 	.word	0x000186a0
 800e780:	001e847f 	.word	0x001e847f
 800e784:	003d08ff 	.word	0x003d08ff
 800e788:	431bde83 	.word	0x431bde83
 800e78c:	10624dd3 	.word	0x10624dd3

0800e790 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b088      	sub	sp, #32
 800e794:	af02      	add	r7, sp, #8
 800e796:	60f8      	str	r0, [r7, #12]
 800e798:	4608      	mov	r0, r1
 800e79a:	4611      	mov	r1, r2
 800e79c:	461a      	mov	r2, r3
 800e79e:	4603      	mov	r3, r0
 800e7a0:	817b      	strh	r3, [r7, #10]
 800e7a2:	460b      	mov	r3, r1
 800e7a4:	813b      	strh	r3, [r7, #8]
 800e7a6:	4613      	mov	r3, r2
 800e7a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800e7aa:	f7ff f869 	bl	800d880 <HAL_GetTick>
 800e7ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e7b6:	b2db      	uxtb	r3, r3
 800e7b8:	2b20      	cmp	r3, #32
 800e7ba:	f040 80d9 	bne.w	800e970 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800e7be:	697b      	ldr	r3, [r7, #20]
 800e7c0:	9300      	str	r3, [sp, #0]
 800e7c2:	2319      	movs	r3, #25
 800e7c4:	2201      	movs	r2, #1
 800e7c6:	496d      	ldr	r1, [pc, #436]	@ (800e97c <HAL_I2C_Mem_Write+0x1ec>)
 800e7c8:	68f8      	ldr	r0, [r7, #12]
 800e7ca:	f000 fc8b 	bl	800f0e4 <I2C_WaitOnFlagUntilTimeout>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d001      	beq.n	800e7d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800e7d4:	2302      	movs	r3, #2
 800e7d6:	e0cc      	b.n	800e972 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e7de:	2b01      	cmp	r3, #1
 800e7e0:	d101      	bne.n	800e7e6 <HAL_I2C_Mem_Write+0x56>
 800e7e2:	2302      	movs	r3, #2
 800e7e4:	e0c5      	b.n	800e972 <HAL_I2C_Mem_Write+0x1e2>
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	2201      	movs	r2, #1
 800e7ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	f003 0301 	and.w	r3, r3, #1
 800e7f8:	2b01      	cmp	r3, #1
 800e7fa:	d007      	beq.n	800e80c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	681a      	ldr	r2, [r3, #0]
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	f042 0201 	orr.w	r2, r2, #1
 800e80a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	681a      	ldr	r2, [r3, #0]
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e81a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	2221      	movs	r2, #33	@ 0x21
 800e820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	2240      	movs	r2, #64	@ 0x40
 800e828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	2200      	movs	r2, #0
 800e830:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	6a3a      	ldr	r2, [r7, #32]
 800e836:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e83c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e842:	b29a      	uxth	r2, r3
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	4a4d      	ldr	r2, [pc, #308]	@ (800e980 <HAL_I2C_Mem_Write+0x1f0>)
 800e84c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e84e:	88f8      	ldrh	r0, [r7, #6]
 800e850:	893a      	ldrh	r2, [r7, #8]
 800e852:	8979      	ldrh	r1, [r7, #10]
 800e854:	697b      	ldr	r3, [r7, #20]
 800e856:	9301      	str	r3, [sp, #4]
 800e858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e85a:	9300      	str	r3, [sp, #0]
 800e85c:	4603      	mov	r3, r0
 800e85e:	68f8      	ldr	r0, [r7, #12]
 800e860:	f000 fac2 	bl	800ede8 <I2C_RequestMemoryWrite>
 800e864:	4603      	mov	r3, r0
 800e866:	2b00      	cmp	r3, #0
 800e868:	d052      	beq.n	800e910 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800e86a:	2301      	movs	r3, #1
 800e86c:	e081      	b.n	800e972 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e86e:	697a      	ldr	r2, [r7, #20]
 800e870:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e872:	68f8      	ldr	r0, [r7, #12]
 800e874:	f000 fd50 	bl	800f318 <I2C_WaitOnTXEFlagUntilTimeout>
 800e878:	4603      	mov	r3, r0
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d00d      	beq.n	800e89a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e882:	2b04      	cmp	r3, #4
 800e884:	d107      	bne.n	800e896 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	681a      	ldr	r2, [r3, #0]
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e894:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800e896:	2301      	movs	r3, #1
 800e898:	e06b      	b.n	800e972 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e89e:	781a      	ldrb	r2, [r3, #0]
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8aa:	1c5a      	adds	r2, r3, #1
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e8b4:	3b01      	subs	r3, #1
 800e8b6:	b29a      	uxth	r2, r3
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e8c0:	b29b      	uxth	r3, r3
 800e8c2:	3b01      	subs	r3, #1
 800e8c4:	b29a      	uxth	r2, r3
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	695b      	ldr	r3, [r3, #20]
 800e8d0:	f003 0304 	and.w	r3, r3, #4
 800e8d4:	2b04      	cmp	r3, #4
 800e8d6:	d11b      	bne.n	800e910 <HAL_I2C_Mem_Write+0x180>
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d017      	beq.n	800e910 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8e4:	781a      	ldrb	r2, [r3, #0]
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8f0:	1c5a      	adds	r2, r3, #1
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e8fa:	3b01      	subs	r3, #1
 800e8fc:	b29a      	uxth	r2, r3
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e906:	b29b      	uxth	r3, r3
 800e908:	3b01      	subs	r3, #1
 800e90a:	b29a      	uxth	r2, r3
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e914:	2b00      	cmp	r3, #0
 800e916:	d1aa      	bne.n	800e86e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e918:	697a      	ldr	r2, [r7, #20]
 800e91a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e91c:	68f8      	ldr	r0, [r7, #12]
 800e91e:	f000 fd43 	bl	800f3a8 <I2C_WaitOnBTFFlagUntilTimeout>
 800e922:	4603      	mov	r3, r0
 800e924:	2b00      	cmp	r3, #0
 800e926:	d00d      	beq.n	800e944 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e92c:	2b04      	cmp	r3, #4
 800e92e:	d107      	bne.n	800e940 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	681a      	ldr	r2, [r3, #0]
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e93e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e940:	2301      	movs	r3, #1
 800e942:	e016      	b.n	800e972 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	681a      	ldr	r2, [r3, #0]
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e952:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	2220      	movs	r2, #32
 800e958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	2200      	movs	r2, #0
 800e960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	2200      	movs	r2, #0
 800e968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800e96c:	2300      	movs	r3, #0
 800e96e:	e000      	b.n	800e972 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800e970:	2302      	movs	r3, #2
  }
}
 800e972:	4618      	mov	r0, r3
 800e974:	3718      	adds	r7, #24
 800e976:	46bd      	mov	sp, r7
 800e978:	bd80      	pop	{r7, pc}
 800e97a:	bf00      	nop
 800e97c:	00100002 	.word	0x00100002
 800e980:	ffff0000 	.word	0xffff0000

0800e984 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b08c      	sub	sp, #48	@ 0x30
 800e988:	af02      	add	r7, sp, #8
 800e98a:	60f8      	str	r0, [r7, #12]
 800e98c:	4608      	mov	r0, r1
 800e98e:	4611      	mov	r1, r2
 800e990:	461a      	mov	r2, r3
 800e992:	4603      	mov	r3, r0
 800e994:	817b      	strh	r3, [r7, #10]
 800e996:	460b      	mov	r3, r1
 800e998:	813b      	strh	r3, [r7, #8]
 800e99a:	4613      	mov	r3, r2
 800e99c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800e99e:	f7fe ff6f 	bl	800d880 <HAL_GetTick>
 800e9a2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e9aa:	b2db      	uxtb	r3, r3
 800e9ac:	2b20      	cmp	r3, #32
 800e9ae:	f040 8214 	bne.w	800edda <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800e9b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9b4:	9300      	str	r3, [sp, #0]
 800e9b6:	2319      	movs	r3, #25
 800e9b8:	2201      	movs	r2, #1
 800e9ba:	497b      	ldr	r1, [pc, #492]	@ (800eba8 <HAL_I2C_Mem_Read+0x224>)
 800e9bc:	68f8      	ldr	r0, [r7, #12]
 800e9be:	f000 fb91 	bl	800f0e4 <I2C_WaitOnFlagUntilTimeout>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d001      	beq.n	800e9cc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800e9c8:	2302      	movs	r3, #2
 800e9ca:	e207      	b.n	800eddc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e9d2:	2b01      	cmp	r3, #1
 800e9d4:	d101      	bne.n	800e9da <HAL_I2C_Mem_Read+0x56>
 800e9d6:	2302      	movs	r3, #2
 800e9d8:	e200      	b.n	800eddc <HAL_I2C_Mem_Read+0x458>
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	2201      	movs	r2, #1
 800e9de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	f003 0301 	and.w	r3, r3, #1
 800e9ec:	2b01      	cmp	r3, #1
 800e9ee:	d007      	beq.n	800ea00 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	681a      	ldr	r2, [r3, #0]
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	f042 0201 	orr.w	r2, r2, #1
 800e9fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	681a      	ldr	r2, [r3, #0]
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ea0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	2222      	movs	r2, #34	@ 0x22
 800ea14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	2240      	movs	r2, #64	@ 0x40
 800ea1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	2200      	movs	r2, #0
 800ea24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800ea30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea36:	b29a      	uxth	r2, r3
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	4a5b      	ldr	r2, [pc, #364]	@ (800ebac <HAL_I2C_Mem_Read+0x228>)
 800ea40:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ea42:	88f8      	ldrh	r0, [r7, #6]
 800ea44:	893a      	ldrh	r2, [r7, #8]
 800ea46:	8979      	ldrh	r1, [r7, #10]
 800ea48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea4a:	9301      	str	r3, [sp, #4]
 800ea4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea4e:	9300      	str	r3, [sp, #0]
 800ea50:	4603      	mov	r3, r0
 800ea52:	68f8      	ldr	r0, [r7, #12]
 800ea54:	f000 fa5e 	bl	800ef14 <I2C_RequestMemoryRead>
 800ea58:	4603      	mov	r3, r0
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d001      	beq.n	800ea62 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800ea5e:	2301      	movs	r3, #1
 800ea60:	e1bc      	b.n	800eddc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d113      	bne.n	800ea92 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	623b      	str	r3, [r7, #32]
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	695b      	ldr	r3, [r3, #20]
 800ea74:	623b      	str	r3, [r7, #32]
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	699b      	ldr	r3, [r3, #24]
 800ea7c:	623b      	str	r3, [r7, #32]
 800ea7e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	681a      	ldr	r2, [r3, #0]
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ea8e:	601a      	str	r2, [r3, #0]
 800ea90:	e190      	b.n	800edb4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea96:	2b01      	cmp	r3, #1
 800ea98:	d11b      	bne.n	800ead2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	681a      	ldr	r2, [r3, #0]
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800eaa8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800eaaa:	2300      	movs	r3, #0
 800eaac:	61fb      	str	r3, [r7, #28]
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	695b      	ldr	r3, [r3, #20]
 800eab4:	61fb      	str	r3, [r7, #28]
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	699b      	ldr	r3, [r3, #24]
 800eabc:	61fb      	str	r3, [r7, #28]
 800eabe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	681a      	ldr	r2, [r3, #0]
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800eace:	601a      	str	r2, [r3, #0]
 800ead0:	e170      	b.n	800edb4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ead6:	2b02      	cmp	r3, #2
 800ead8:	d11b      	bne.n	800eb12 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	681a      	ldr	r2, [r3, #0]
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800eae8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	681a      	ldr	r2, [r3, #0]
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800eaf8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800eafa:	2300      	movs	r3, #0
 800eafc:	61bb      	str	r3, [r7, #24]
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	695b      	ldr	r3, [r3, #20]
 800eb04:	61bb      	str	r3, [r7, #24]
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	699b      	ldr	r3, [r3, #24]
 800eb0c:	61bb      	str	r3, [r7, #24]
 800eb0e:	69bb      	ldr	r3, [r7, #24]
 800eb10:	e150      	b.n	800edb4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800eb12:	2300      	movs	r3, #0
 800eb14:	617b      	str	r3, [r7, #20]
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	695b      	ldr	r3, [r3, #20]
 800eb1c:	617b      	str	r3, [r7, #20]
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	699b      	ldr	r3, [r3, #24]
 800eb24:	617b      	str	r3, [r7, #20]
 800eb26:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800eb28:	e144      	b.n	800edb4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb2e:	2b03      	cmp	r3, #3
 800eb30:	f200 80f1 	bhi.w	800ed16 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb38:	2b01      	cmp	r3, #1
 800eb3a:	d123      	bne.n	800eb84 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800eb3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb3e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800eb40:	68f8      	ldr	r0, [r7, #12]
 800eb42:	f000 fc79 	bl	800f438 <I2C_WaitOnRXNEFlagUntilTimeout>
 800eb46:	4603      	mov	r3, r0
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d001      	beq.n	800eb50 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	e145      	b.n	800eddc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	691a      	ldr	r2, [r3, #16]
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb5a:	b2d2      	uxtb	r2, r2
 800eb5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb62:	1c5a      	adds	r2, r3, #1
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb6c:	3b01      	subs	r3, #1
 800eb6e:	b29a      	uxth	r2, r3
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb78:	b29b      	uxth	r3, r3
 800eb7a:	3b01      	subs	r3, #1
 800eb7c:	b29a      	uxth	r2, r3
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800eb82:	e117      	b.n	800edb4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb88:	2b02      	cmp	r3, #2
 800eb8a:	d14e      	bne.n	800ec2a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800eb8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb8e:	9300      	str	r3, [sp, #0]
 800eb90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb92:	2200      	movs	r2, #0
 800eb94:	4906      	ldr	r1, [pc, #24]	@ (800ebb0 <HAL_I2C_Mem_Read+0x22c>)
 800eb96:	68f8      	ldr	r0, [r7, #12]
 800eb98:	f000 faa4 	bl	800f0e4 <I2C_WaitOnFlagUntilTimeout>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d008      	beq.n	800ebb4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800eba2:	2301      	movs	r3, #1
 800eba4:	e11a      	b.n	800eddc <HAL_I2C_Mem_Read+0x458>
 800eba6:	bf00      	nop
 800eba8:	00100002 	.word	0x00100002
 800ebac:	ffff0000 	.word	0xffff0000
 800ebb0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	681a      	ldr	r2, [r3, #0]
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ebc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	691a      	ldr	r2, [r3, #16]
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebce:	b2d2      	uxtb	r2, r2
 800ebd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebd6:	1c5a      	adds	r2, r3, #1
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ebe0:	3b01      	subs	r3, #1
 800ebe2:	b29a      	uxth	r2, r3
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ebec:	b29b      	uxth	r3, r3
 800ebee:	3b01      	subs	r3, #1
 800ebf0:	b29a      	uxth	r2, r3
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	691a      	ldr	r2, [r3, #16]
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec00:	b2d2      	uxtb	r2, r2
 800ec02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec08:	1c5a      	adds	r2, r3, #1
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ec12:	3b01      	subs	r3, #1
 800ec14:	b29a      	uxth	r2, r3
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ec1e:	b29b      	uxth	r3, r3
 800ec20:	3b01      	subs	r3, #1
 800ec22:	b29a      	uxth	r2, r3
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ec28:	e0c4      	b.n	800edb4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ec2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec2c:	9300      	str	r3, [sp, #0]
 800ec2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec30:	2200      	movs	r2, #0
 800ec32:	496c      	ldr	r1, [pc, #432]	@ (800ede4 <HAL_I2C_Mem_Read+0x460>)
 800ec34:	68f8      	ldr	r0, [r7, #12]
 800ec36:	f000 fa55 	bl	800f0e4 <I2C_WaitOnFlagUntilTimeout>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d001      	beq.n	800ec44 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800ec40:	2301      	movs	r3, #1
 800ec42:	e0cb      	b.n	800eddc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	681a      	ldr	r2, [r3, #0]
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ec52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	691a      	ldr	r2, [r3, #16]
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec5e:	b2d2      	uxtb	r2, r2
 800ec60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec66:	1c5a      	adds	r2, r3, #1
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ec70:	3b01      	subs	r3, #1
 800ec72:	b29a      	uxth	r2, r3
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ec7c:	b29b      	uxth	r3, r3
 800ec7e:	3b01      	subs	r3, #1
 800ec80:	b29a      	uxth	r2, r3
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ec86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec88:	9300      	str	r3, [sp, #0]
 800ec8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	4955      	ldr	r1, [pc, #340]	@ (800ede4 <HAL_I2C_Mem_Read+0x460>)
 800ec90:	68f8      	ldr	r0, [r7, #12]
 800ec92:	f000 fa27 	bl	800f0e4 <I2C_WaitOnFlagUntilTimeout>
 800ec96:	4603      	mov	r3, r0
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d001      	beq.n	800eca0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800ec9c:	2301      	movs	r3, #1
 800ec9e:	e09d      	b.n	800eddc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	681a      	ldr	r2, [r3, #0]
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ecae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	691a      	ldr	r2, [r3, #16]
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecba:	b2d2      	uxtb	r2, r2
 800ecbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecc2:	1c5a      	adds	r2, r3, #1
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eccc:	3b01      	subs	r3, #1
 800ecce:	b29a      	uxth	r2, r3
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ecd8:	b29b      	uxth	r3, r3
 800ecda:	3b01      	subs	r3, #1
 800ecdc:	b29a      	uxth	r2, r3
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	691a      	ldr	r2, [r3, #16]
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecec:	b2d2      	uxtb	r2, r2
 800ecee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecf4:	1c5a      	adds	r2, r3, #1
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ecfe:	3b01      	subs	r3, #1
 800ed00:	b29a      	uxth	r2, r3
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed0a:	b29b      	uxth	r3, r3
 800ed0c:	3b01      	subs	r3, #1
 800ed0e:	b29a      	uxth	r2, r3
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ed14:	e04e      	b.n	800edb4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ed16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ed18:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ed1a:	68f8      	ldr	r0, [r7, #12]
 800ed1c:	f000 fb8c 	bl	800f438 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ed20:	4603      	mov	r3, r0
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d001      	beq.n	800ed2a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800ed26:	2301      	movs	r3, #1
 800ed28:	e058      	b.n	800eddc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	691a      	ldr	r2, [r3, #16]
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed34:	b2d2      	uxtb	r2, r2
 800ed36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed3c:	1c5a      	adds	r2, r3, #1
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed46:	3b01      	subs	r3, #1
 800ed48:	b29a      	uxth	r2, r3
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed52:	b29b      	uxth	r3, r3
 800ed54:	3b01      	subs	r3, #1
 800ed56:	b29a      	uxth	r2, r3
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	695b      	ldr	r3, [r3, #20]
 800ed62:	f003 0304 	and.w	r3, r3, #4
 800ed66:	2b04      	cmp	r3, #4
 800ed68:	d124      	bne.n	800edb4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed6e:	2b03      	cmp	r3, #3
 800ed70:	d107      	bne.n	800ed82 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	681a      	ldr	r2, [r3, #0]
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ed80:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	691a      	ldr	r2, [r3, #16]
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed8c:	b2d2      	uxtb	r2, r2
 800ed8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed94:	1c5a      	adds	r2, r3, #1
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed9e:	3b01      	subs	r3, #1
 800eda0:	b29a      	uxth	r2, r3
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800edaa:	b29b      	uxth	r3, r3
 800edac:	3b01      	subs	r3, #1
 800edae:	b29a      	uxth	r2, r3
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800edb8:	2b00      	cmp	r3, #0
 800edba:	f47f aeb6 	bne.w	800eb2a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	2220      	movs	r2, #32
 800edc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	2200      	movs	r2, #0
 800edca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	2200      	movs	r2, #0
 800edd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800edd6:	2300      	movs	r3, #0
 800edd8:	e000      	b.n	800eddc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800edda:	2302      	movs	r3, #2
  }
}
 800eddc:	4618      	mov	r0, r3
 800edde:	3728      	adds	r7, #40	@ 0x28
 800ede0:	46bd      	mov	sp, r7
 800ede2:	bd80      	pop	{r7, pc}
 800ede4:	00010004 	.word	0x00010004

0800ede8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b088      	sub	sp, #32
 800edec:	af02      	add	r7, sp, #8
 800edee:	60f8      	str	r0, [r7, #12]
 800edf0:	4608      	mov	r0, r1
 800edf2:	4611      	mov	r1, r2
 800edf4:	461a      	mov	r2, r3
 800edf6:	4603      	mov	r3, r0
 800edf8:	817b      	strh	r3, [r7, #10]
 800edfa:	460b      	mov	r3, r1
 800edfc:	813b      	strh	r3, [r7, #8]
 800edfe:	4613      	mov	r3, r2
 800ee00:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	681a      	ldr	r2, [r3, #0]
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ee10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ee12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee14:	9300      	str	r3, [sp, #0]
 800ee16:	6a3b      	ldr	r3, [r7, #32]
 800ee18:	2200      	movs	r2, #0
 800ee1a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800ee1e:	68f8      	ldr	r0, [r7, #12]
 800ee20:	f000 f960 	bl	800f0e4 <I2C_WaitOnFlagUntilTimeout>
 800ee24:	4603      	mov	r3, r0
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d00d      	beq.n	800ee46 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ee34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ee38:	d103      	bne.n	800ee42 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ee40:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800ee42:	2303      	movs	r3, #3
 800ee44:	e05f      	b.n	800ef06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ee46:	897b      	ldrh	r3, [r7, #10]
 800ee48:	b2db      	uxtb	r3, r3
 800ee4a:	461a      	mov	r2, r3
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ee54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ee56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee58:	6a3a      	ldr	r2, [r7, #32]
 800ee5a:	492d      	ldr	r1, [pc, #180]	@ (800ef10 <I2C_RequestMemoryWrite+0x128>)
 800ee5c:	68f8      	ldr	r0, [r7, #12]
 800ee5e:	f000 f9bb 	bl	800f1d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ee62:	4603      	mov	r3, r0
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d001      	beq.n	800ee6c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800ee68:	2301      	movs	r3, #1
 800ee6a:	e04c      	b.n	800ef06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	617b      	str	r3, [r7, #20]
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	695b      	ldr	r3, [r3, #20]
 800ee76:	617b      	str	r3, [r7, #20]
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	699b      	ldr	r3, [r3, #24]
 800ee7e:	617b      	str	r3, [r7, #20]
 800ee80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ee82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ee84:	6a39      	ldr	r1, [r7, #32]
 800ee86:	68f8      	ldr	r0, [r7, #12]
 800ee88:	f000 fa46 	bl	800f318 <I2C_WaitOnTXEFlagUntilTimeout>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d00d      	beq.n	800eeae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee96:	2b04      	cmp	r3, #4
 800ee98:	d107      	bne.n	800eeaa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	681a      	ldr	r2, [r3, #0]
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800eea8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800eeaa:	2301      	movs	r3, #1
 800eeac:	e02b      	b.n	800ef06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800eeae:	88fb      	ldrh	r3, [r7, #6]
 800eeb0:	2b01      	cmp	r3, #1
 800eeb2:	d105      	bne.n	800eec0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800eeb4:	893b      	ldrh	r3, [r7, #8]
 800eeb6:	b2da      	uxtb	r2, r3
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	611a      	str	r2, [r3, #16]
 800eebe:	e021      	b.n	800ef04 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800eec0:	893b      	ldrh	r3, [r7, #8]
 800eec2:	0a1b      	lsrs	r3, r3, #8
 800eec4:	b29b      	uxth	r3, r3
 800eec6:	b2da      	uxtb	r2, r3
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800eece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eed0:	6a39      	ldr	r1, [r7, #32]
 800eed2:	68f8      	ldr	r0, [r7, #12]
 800eed4:	f000 fa20 	bl	800f318 <I2C_WaitOnTXEFlagUntilTimeout>
 800eed8:	4603      	mov	r3, r0
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d00d      	beq.n	800eefa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eee2:	2b04      	cmp	r3, #4
 800eee4:	d107      	bne.n	800eef6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	681a      	ldr	r2, [r3, #0]
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800eef4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800eef6:	2301      	movs	r3, #1
 800eef8:	e005      	b.n	800ef06 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800eefa:	893b      	ldrh	r3, [r7, #8]
 800eefc:	b2da      	uxtb	r2, r3
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800ef04:	2300      	movs	r3, #0
}
 800ef06:	4618      	mov	r0, r3
 800ef08:	3718      	adds	r7, #24
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}
 800ef0e:	bf00      	nop
 800ef10:	00010002 	.word	0x00010002

0800ef14 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b088      	sub	sp, #32
 800ef18:	af02      	add	r7, sp, #8
 800ef1a:	60f8      	str	r0, [r7, #12]
 800ef1c:	4608      	mov	r0, r1
 800ef1e:	4611      	mov	r1, r2
 800ef20:	461a      	mov	r2, r3
 800ef22:	4603      	mov	r3, r0
 800ef24:	817b      	strh	r3, [r7, #10]
 800ef26:	460b      	mov	r3, r1
 800ef28:	813b      	strh	r3, [r7, #8]
 800ef2a:	4613      	mov	r3, r2
 800ef2c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	681a      	ldr	r2, [r3, #0]
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ef3c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	681a      	ldr	r2, [r3, #0]
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ef4c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ef4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef50:	9300      	str	r3, [sp, #0]
 800ef52:	6a3b      	ldr	r3, [r7, #32]
 800ef54:	2200      	movs	r2, #0
 800ef56:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800ef5a:	68f8      	ldr	r0, [r7, #12]
 800ef5c:	f000 f8c2 	bl	800f0e4 <I2C_WaitOnFlagUntilTimeout>
 800ef60:	4603      	mov	r3, r0
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d00d      	beq.n	800ef82 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ef70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ef74:	d103      	bne.n	800ef7e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ef7c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800ef7e:	2303      	movs	r3, #3
 800ef80:	e0aa      	b.n	800f0d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ef82:	897b      	ldrh	r3, [r7, #10]
 800ef84:	b2db      	uxtb	r3, r3
 800ef86:	461a      	mov	r2, r3
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ef90:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ef92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef94:	6a3a      	ldr	r2, [r7, #32]
 800ef96:	4952      	ldr	r1, [pc, #328]	@ (800f0e0 <I2C_RequestMemoryRead+0x1cc>)
 800ef98:	68f8      	ldr	r0, [r7, #12]
 800ef9a:	f000 f91d 	bl	800f1d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d001      	beq.n	800efa8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800efa4:	2301      	movs	r3, #1
 800efa6:	e097      	b.n	800f0d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800efa8:	2300      	movs	r3, #0
 800efaa:	617b      	str	r3, [r7, #20]
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	695b      	ldr	r3, [r3, #20]
 800efb2:	617b      	str	r3, [r7, #20]
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	699b      	ldr	r3, [r3, #24]
 800efba:	617b      	str	r3, [r7, #20]
 800efbc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800efbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800efc0:	6a39      	ldr	r1, [r7, #32]
 800efc2:	68f8      	ldr	r0, [r7, #12]
 800efc4:	f000 f9a8 	bl	800f318 <I2C_WaitOnTXEFlagUntilTimeout>
 800efc8:	4603      	mov	r3, r0
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d00d      	beq.n	800efea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efd2:	2b04      	cmp	r3, #4
 800efd4:	d107      	bne.n	800efe6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	681a      	ldr	r2, [r3, #0]
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800efe4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800efe6:	2301      	movs	r3, #1
 800efe8:	e076      	b.n	800f0d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800efea:	88fb      	ldrh	r3, [r7, #6]
 800efec:	2b01      	cmp	r3, #1
 800efee:	d105      	bne.n	800effc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800eff0:	893b      	ldrh	r3, [r7, #8]
 800eff2:	b2da      	uxtb	r2, r3
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	611a      	str	r2, [r3, #16]
 800effa:	e021      	b.n	800f040 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800effc:	893b      	ldrh	r3, [r7, #8]
 800effe:	0a1b      	lsrs	r3, r3, #8
 800f000:	b29b      	uxth	r3, r3
 800f002:	b2da      	uxtb	r2, r3
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f00a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f00c:	6a39      	ldr	r1, [r7, #32]
 800f00e:	68f8      	ldr	r0, [r7, #12]
 800f010:	f000 f982 	bl	800f318 <I2C_WaitOnTXEFlagUntilTimeout>
 800f014:	4603      	mov	r3, r0
 800f016:	2b00      	cmp	r3, #0
 800f018:	d00d      	beq.n	800f036 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f01e:	2b04      	cmp	r3, #4
 800f020:	d107      	bne.n	800f032 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	681a      	ldr	r2, [r3, #0]
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f030:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800f032:	2301      	movs	r3, #1
 800f034:	e050      	b.n	800f0d8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800f036:	893b      	ldrh	r3, [r7, #8]
 800f038:	b2da      	uxtb	r2, r3
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f040:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f042:	6a39      	ldr	r1, [r7, #32]
 800f044:	68f8      	ldr	r0, [r7, #12]
 800f046:	f000 f967 	bl	800f318 <I2C_WaitOnTXEFlagUntilTimeout>
 800f04a:	4603      	mov	r3, r0
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d00d      	beq.n	800f06c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f054:	2b04      	cmp	r3, #4
 800f056:	d107      	bne.n	800f068 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	681a      	ldr	r2, [r3, #0]
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f066:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800f068:	2301      	movs	r3, #1
 800f06a:	e035      	b.n	800f0d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	681a      	ldr	r2, [r3, #0]
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f07a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800f07c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f07e:	9300      	str	r3, [sp, #0]
 800f080:	6a3b      	ldr	r3, [r7, #32]
 800f082:	2200      	movs	r2, #0
 800f084:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800f088:	68f8      	ldr	r0, [r7, #12]
 800f08a:	f000 f82b 	bl	800f0e4 <I2C_WaitOnFlagUntilTimeout>
 800f08e:	4603      	mov	r3, r0
 800f090:	2b00      	cmp	r3, #0
 800f092:	d00d      	beq.n	800f0b0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f09e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f0a2:	d103      	bne.n	800f0ac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f0aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800f0ac:	2303      	movs	r3, #3
 800f0ae:	e013      	b.n	800f0d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800f0b0:	897b      	ldrh	r3, [r7, #10]
 800f0b2:	b2db      	uxtb	r3, r3
 800f0b4:	f043 0301 	orr.w	r3, r3, #1
 800f0b8:	b2da      	uxtb	r2, r3
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800f0c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0c2:	6a3a      	ldr	r2, [r7, #32]
 800f0c4:	4906      	ldr	r1, [pc, #24]	@ (800f0e0 <I2C_RequestMemoryRead+0x1cc>)
 800f0c6:	68f8      	ldr	r0, [r7, #12]
 800f0c8:	f000 f886 	bl	800f1d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d001      	beq.n	800f0d6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800f0d2:	2301      	movs	r3, #1
 800f0d4:	e000      	b.n	800f0d8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800f0d6:	2300      	movs	r3, #0
}
 800f0d8:	4618      	mov	r0, r3
 800f0da:	3718      	adds	r7, #24
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	bd80      	pop	{r7, pc}
 800f0e0:	00010002 	.word	0x00010002

0800f0e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b084      	sub	sp, #16
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	60f8      	str	r0, [r7, #12]
 800f0ec:	60b9      	str	r1, [r7, #8]
 800f0ee:	603b      	str	r3, [r7, #0]
 800f0f0:	4613      	mov	r3, r2
 800f0f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f0f4:	e048      	b.n	800f188 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0fc:	d044      	beq.n	800f188 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f0fe:	f7fe fbbf 	bl	800d880 <HAL_GetTick>
 800f102:	4602      	mov	r2, r0
 800f104:	69bb      	ldr	r3, [r7, #24]
 800f106:	1ad3      	subs	r3, r2, r3
 800f108:	683a      	ldr	r2, [r7, #0]
 800f10a:	429a      	cmp	r2, r3
 800f10c:	d302      	bcc.n	800f114 <I2C_WaitOnFlagUntilTimeout+0x30>
 800f10e:	683b      	ldr	r3, [r7, #0]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d139      	bne.n	800f188 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	0c1b      	lsrs	r3, r3, #16
 800f118:	b2db      	uxtb	r3, r3
 800f11a:	2b01      	cmp	r3, #1
 800f11c:	d10d      	bne.n	800f13a <I2C_WaitOnFlagUntilTimeout+0x56>
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	695b      	ldr	r3, [r3, #20]
 800f124:	43da      	mvns	r2, r3
 800f126:	68bb      	ldr	r3, [r7, #8]
 800f128:	4013      	ands	r3, r2
 800f12a:	b29b      	uxth	r3, r3
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	bf0c      	ite	eq
 800f130:	2301      	moveq	r3, #1
 800f132:	2300      	movne	r3, #0
 800f134:	b2db      	uxtb	r3, r3
 800f136:	461a      	mov	r2, r3
 800f138:	e00c      	b.n	800f154 <I2C_WaitOnFlagUntilTimeout+0x70>
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	699b      	ldr	r3, [r3, #24]
 800f140:	43da      	mvns	r2, r3
 800f142:	68bb      	ldr	r3, [r7, #8]
 800f144:	4013      	ands	r3, r2
 800f146:	b29b      	uxth	r3, r3
 800f148:	2b00      	cmp	r3, #0
 800f14a:	bf0c      	ite	eq
 800f14c:	2301      	moveq	r3, #1
 800f14e:	2300      	movne	r3, #0
 800f150:	b2db      	uxtb	r3, r3
 800f152:	461a      	mov	r2, r3
 800f154:	79fb      	ldrb	r3, [r7, #7]
 800f156:	429a      	cmp	r2, r3
 800f158:	d116      	bne.n	800f188 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	2200      	movs	r2, #0
 800f15e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	2220      	movs	r2, #32
 800f164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	2200      	movs	r2, #0
 800f16c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f174:	f043 0220 	orr.w	r2, r3, #32
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	2200      	movs	r2, #0
 800f180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800f184:	2301      	movs	r3, #1
 800f186:	e023      	b.n	800f1d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f188:	68bb      	ldr	r3, [r7, #8]
 800f18a:	0c1b      	lsrs	r3, r3, #16
 800f18c:	b2db      	uxtb	r3, r3
 800f18e:	2b01      	cmp	r3, #1
 800f190:	d10d      	bne.n	800f1ae <I2C_WaitOnFlagUntilTimeout+0xca>
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	695b      	ldr	r3, [r3, #20]
 800f198:	43da      	mvns	r2, r3
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	4013      	ands	r3, r2
 800f19e:	b29b      	uxth	r3, r3
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	bf0c      	ite	eq
 800f1a4:	2301      	moveq	r3, #1
 800f1a6:	2300      	movne	r3, #0
 800f1a8:	b2db      	uxtb	r3, r3
 800f1aa:	461a      	mov	r2, r3
 800f1ac:	e00c      	b.n	800f1c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	699b      	ldr	r3, [r3, #24]
 800f1b4:	43da      	mvns	r2, r3
 800f1b6:	68bb      	ldr	r3, [r7, #8]
 800f1b8:	4013      	ands	r3, r2
 800f1ba:	b29b      	uxth	r3, r3
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	bf0c      	ite	eq
 800f1c0:	2301      	moveq	r3, #1
 800f1c2:	2300      	movne	r3, #0
 800f1c4:	b2db      	uxtb	r3, r3
 800f1c6:	461a      	mov	r2, r3
 800f1c8:	79fb      	ldrb	r3, [r7, #7]
 800f1ca:	429a      	cmp	r2, r3
 800f1cc:	d093      	beq.n	800f0f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f1ce:	2300      	movs	r3, #0
}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	3710      	adds	r7, #16
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}

0800f1d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b084      	sub	sp, #16
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	60f8      	str	r0, [r7, #12]
 800f1e0:	60b9      	str	r1, [r7, #8]
 800f1e2:	607a      	str	r2, [r7, #4]
 800f1e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800f1e6:	e071      	b.n	800f2cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	695b      	ldr	r3, [r3, #20]
 800f1ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f1f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f1f6:	d123      	bne.n	800f240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	681a      	ldr	r2, [r3, #0]
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f206:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800f210:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	2200      	movs	r2, #0
 800f216:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	2220      	movs	r2, #32
 800f21c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	2200      	movs	r2, #0
 800f224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f22c:	f043 0204 	orr.w	r2, r3, #4
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	2200      	movs	r2, #0
 800f238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800f23c:	2301      	movs	r3, #1
 800f23e:	e067      	b.n	800f310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f246:	d041      	beq.n	800f2cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f248:	f7fe fb1a 	bl	800d880 <HAL_GetTick>
 800f24c:	4602      	mov	r2, r0
 800f24e:	683b      	ldr	r3, [r7, #0]
 800f250:	1ad3      	subs	r3, r2, r3
 800f252:	687a      	ldr	r2, [r7, #4]
 800f254:	429a      	cmp	r2, r3
 800f256:	d302      	bcc.n	800f25e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d136      	bne.n	800f2cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	0c1b      	lsrs	r3, r3, #16
 800f262:	b2db      	uxtb	r3, r3
 800f264:	2b01      	cmp	r3, #1
 800f266:	d10c      	bne.n	800f282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	695b      	ldr	r3, [r3, #20]
 800f26e:	43da      	mvns	r2, r3
 800f270:	68bb      	ldr	r3, [r7, #8]
 800f272:	4013      	ands	r3, r2
 800f274:	b29b      	uxth	r3, r3
 800f276:	2b00      	cmp	r3, #0
 800f278:	bf14      	ite	ne
 800f27a:	2301      	movne	r3, #1
 800f27c:	2300      	moveq	r3, #0
 800f27e:	b2db      	uxtb	r3, r3
 800f280:	e00b      	b.n	800f29a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	699b      	ldr	r3, [r3, #24]
 800f288:	43da      	mvns	r2, r3
 800f28a:	68bb      	ldr	r3, [r7, #8]
 800f28c:	4013      	ands	r3, r2
 800f28e:	b29b      	uxth	r3, r3
 800f290:	2b00      	cmp	r3, #0
 800f292:	bf14      	ite	ne
 800f294:	2301      	movne	r3, #1
 800f296:	2300      	moveq	r3, #0
 800f298:	b2db      	uxtb	r3, r3
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d016      	beq.n	800f2cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	2220      	movs	r2, #32
 800f2a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2b8:	f043 0220 	orr.w	r2, r3, #32
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800f2c8:	2301      	movs	r3, #1
 800f2ca:	e021      	b.n	800f310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800f2cc:	68bb      	ldr	r3, [r7, #8]
 800f2ce:	0c1b      	lsrs	r3, r3, #16
 800f2d0:	b2db      	uxtb	r3, r3
 800f2d2:	2b01      	cmp	r3, #1
 800f2d4:	d10c      	bne.n	800f2f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	695b      	ldr	r3, [r3, #20]
 800f2dc:	43da      	mvns	r2, r3
 800f2de:	68bb      	ldr	r3, [r7, #8]
 800f2e0:	4013      	ands	r3, r2
 800f2e2:	b29b      	uxth	r3, r3
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	bf14      	ite	ne
 800f2e8:	2301      	movne	r3, #1
 800f2ea:	2300      	moveq	r3, #0
 800f2ec:	b2db      	uxtb	r3, r3
 800f2ee:	e00b      	b.n	800f308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	699b      	ldr	r3, [r3, #24]
 800f2f6:	43da      	mvns	r2, r3
 800f2f8:	68bb      	ldr	r3, [r7, #8]
 800f2fa:	4013      	ands	r3, r2
 800f2fc:	b29b      	uxth	r3, r3
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	bf14      	ite	ne
 800f302:	2301      	movne	r3, #1
 800f304:	2300      	moveq	r3, #0
 800f306:	b2db      	uxtb	r3, r3
 800f308:	2b00      	cmp	r3, #0
 800f30a:	f47f af6d 	bne.w	800f1e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800f30e:	2300      	movs	r3, #0
}
 800f310:	4618      	mov	r0, r3
 800f312:	3710      	adds	r7, #16
 800f314:	46bd      	mov	sp, r7
 800f316:	bd80      	pop	{r7, pc}

0800f318 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b084      	sub	sp, #16
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	60f8      	str	r0, [r7, #12]
 800f320:	60b9      	str	r1, [r7, #8]
 800f322:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f324:	e034      	b.n	800f390 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800f326:	68f8      	ldr	r0, [r7, #12]
 800f328:	f000 f8e3 	bl	800f4f2 <I2C_IsAcknowledgeFailed>
 800f32c:	4603      	mov	r3, r0
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d001      	beq.n	800f336 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800f332:	2301      	movs	r3, #1
 800f334:	e034      	b.n	800f3a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f33c:	d028      	beq.n	800f390 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f33e:	f7fe fa9f 	bl	800d880 <HAL_GetTick>
 800f342:	4602      	mov	r2, r0
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	1ad3      	subs	r3, r2, r3
 800f348:	68ba      	ldr	r2, [r7, #8]
 800f34a:	429a      	cmp	r2, r3
 800f34c:	d302      	bcc.n	800f354 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800f34e:	68bb      	ldr	r3, [r7, #8]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d11d      	bne.n	800f390 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	695b      	ldr	r3, [r3, #20]
 800f35a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f35e:	2b80      	cmp	r3, #128	@ 0x80
 800f360:	d016      	beq.n	800f390 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	2200      	movs	r2, #0
 800f366:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	2220      	movs	r2, #32
 800f36c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	2200      	movs	r2, #0
 800f374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f37c:	f043 0220 	orr.w	r2, r3, #32
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	2200      	movs	r2, #0
 800f388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800f38c:	2301      	movs	r3, #1
 800f38e:	e007      	b.n	800f3a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	695b      	ldr	r3, [r3, #20]
 800f396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f39a:	2b80      	cmp	r3, #128	@ 0x80
 800f39c:	d1c3      	bne.n	800f326 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800f39e:	2300      	movs	r3, #0
}
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	3710      	adds	r7, #16
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bd80      	pop	{r7, pc}

0800f3a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b084      	sub	sp, #16
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	60f8      	str	r0, [r7, #12]
 800f3b0:	60b9      	str	r1, [r7, #8]
 800f3b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800f3b4:	e034      	b.n	800f420 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800f3b6:	68f8      	ldr	r0, [r7, #12]
 800f3b8:	f000 f89b 	bl	800f4f2 <I2C_IsAcknowledgeFailed>
 800f3bc:	4603      	mov	r3, r0
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d001      	beq.n	800f3c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800f3c2:	2301      	movs	r3, #1
 800f3c4:	e034      	b.n	800f430 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f3c6:	68bb      	ldr	r3, [r7, #8]
 800f3c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3cc:	d028      	beq.n	800f420 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f3ce:	f7fe fa57 	bl	800d880 <HAL_GetTick>
 800f3d2:	4602      	mov	r2, r0
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	1ad3      	subs	r3, r2, r3
 800f3d8:	68ba      	ldr	r2, [r7, #8]
 800f3da:	429a      	cmp	r2, r3
 800f3dc:	d302      	bcc.n	800f3e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800f3de:	68bb      	ldr	r3, [r7, #8]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d11d      	bne.n	800f420 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	695b      	ldr	r3, [r3, #20]
 800f3ea:	f003 0304 	and.w	r3, r3, #4
 800f3ee:	2b04      	cmp	r3, #4
 800f3f0:	d016      	beq.n	800f420 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	2220      	movs	r2, #32
 800f3fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	2200      	movs	r2, #0
 800f404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f40c:	f043 0220 	orr.w	r2, r3, #32
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	2200      	movs	r2, #0
 800f418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800f41c:	2301      	movs	r3, #1
 800f41e:	e007      	b.n	800f430 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	695b      	ldr	r3, [r3, #20]
 800f426:	f003 0304 	and.w	r3, r3, #4
 800f42a:	2b04      	cmp	r3, #4
 800f42c:	d1c3      	bne.n	800f3b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800f42e:	2300      	movs	r3, #0
}
 800f430:	4618      	mov	r0, r3
 800f432:	3710      	adds	r7, #16
 800f434:	46bd      	mov	sp, r7
 800f436:	bd80      	pop	{r7, pc}

0800f438 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b084      	sub	sp, #16
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	60f8      	str	r0, [r7, #12]
 800f440:	60b9      	str	r1, [r7, #8]
 800f442:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800f444:	e049      	b.n	800f4da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	695b      	ldr	r3, [r3, #20]
 800f44c:	f003 0310 	and.w	r3, r3, #16
 800f450:	2b10      	cmp	r3, #16
 800f452:	d119      	bne.n	800f488 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	f06f 0210 	mvn.w	r2, #16
 800f45c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	2200      	movs	r2, #0
 800f462:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	2220      	movs	r2, #32
 800f468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	2200      	movs	r2, #0
 800f470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	2200      	movs	r2, #0
 800f480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800f484:	2301      	movs	r3, #1
 800f486:	e030      	b.n	800f4ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f488:	f7fe f9fa 	bl	800d880 <HAL_GetTick>
 800f48c:	4602      	mov	r2, r0
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	1ad3      	subs	r3, r2, r3
 800f492:	68ba      	ldr	r2, [r7, #8]
 800f494:	429a      	cmp	r2, r3
 800f496:	d302      	bcc.n	800f49e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800f498:	68bb      	ldr	r3, [r7, #8]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d11d      	bne.n	800f4da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	695b      	ldr	r3, [r3, #20]
 800f4a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f4a8:	2b40      	cmp	r3, #64	@ 0x40
 800f4aa:	d016      	beq.n	800f4da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	2220      	movs	r2, #32
 800f4b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	2200      	movs	r2, #0
 800f4be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f4c6:	f043 0220 	orr.w	r2, r3, #32
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800f4d6:	2301      	movs	r3, #1
 800f4d8:	e007      	b.n	800f4ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	695b      	ldr	r3, [r3, #20]
 800f4e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f4e4:	2b40      	cmp	r3, #64	@ 0x40
 800f4e6:	d1ae      	bne.n	800f446 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800f4e8:	2300      	movs	r3, #0
}
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	3710      	adds	r7, #16
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	bd80      	pop	{r7, pc}

0800f4f2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800f4f2:	b480      	push	{r7}
 800f4f4:	b083      	sub	sp, #12
 800f4f6:	af00      	add	r7, sp, #0
 800f4f8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	695b      	ldr	r3, [r3, #20]
 800f500:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f504:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f508:	d11b      	bne.n	800f542 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800f512:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2200      	movs	r2, #0
 800f518:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	2220      	movs	r2, #32
 800f51e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	2200      	movs	r2, #0
 800f526:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f52e:	f043 0204 	orr.w	r2, r3, #4
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	2200      	movs	r2, #0
 800f53a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800f53e:	2301      	movs	r3, #1
 800f540:	e000      	b.n	800f544 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800f542:	2300      	movs	r3, #0
}
 800f544:	4618      	mov	r0, r3
 800f546:	370c      	adds	r7, #12
 800f548:	46bd      	mov	sp, r7
 800f54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54e:	4770      	bx	lr

0800f550 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b086      	sub	sp, #24
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d101      	bne.n	800f562 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f55e:	2301      	movs	r3, #1
 800f560:	e267      	b.n	800fa32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	f003 0301 	and.w	r3, r3, #1
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d075      	beq.n	800f65a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800f56e:	4b88      	ldr	r3, [pc, #544]	@ (800f790 <HAL_RCC_OscConfig+0x240>)
 800f570:	689b      	ldr	r3, [r3, #8]
 800f572:	f003 030c 	and.w	r3, r3, #12
 800f576:	2b04      	cmp	r3, #4
 800f578:	d00c      	beq.n	800f594 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f57a:	4b85      	ldr	r3, [pc, #532]	@ (800f790 <HAL_RCC_OscConfig+0x240>)
 800f57c:	689b      	ldr	r3, [r3, #8]
 800f57e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800f582:	2b08      	cmp	r3, #8
 800f584:	d112      	bne.n	800f5ac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f586:	4b82      	ldr	r3, [pc, #520]	@ (800f790 <HAL_RCC_OscConfig+0x240>)
 800f588:	685b      	ldr	r3, [r3, #4]
 800f58a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f58e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f592:	d10b      	bne.n	800f5ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f594:	4b7e      	ldr	r3, [pc, #504]	@ (800f790 <HAL_RCC_OscConfig+0x240>)
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d05b      	beq.n	800f658 <HAL_RCC_OscConfig+0x108>
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	685b      	ldr	r3, [r3, #4]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d157      	bne.n	800f658 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	e242      	b.n	800fa32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	685b      	ldr	r3, [r3, #4]
 800f5b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f5b4:	d106      	bne.n	800f5c4 <HAL_RCC_OscConfig+0x74>
 800f5b6:	4b76      	ldr	r3, [pc, #472]	@ (800f790 <HAL_RCC_OscConfig+0x240>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	4a75      	ldr	r2, [pc, #468]	@ (800f790 <HAL_RCC_OscConfig+0x240>)
 800f5bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f5c0:	6013      	str	r3, [r2, #0]
 800f5c2:	e01d      	b.n	800f600 <HAL_RCC_OscConfig+0xb0>
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	685b      	ldr	r3, [r3, #4]
 800f5c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f5cc:	d10c      	bne.n	800f5e8 <HAL_RCC_OscConfig+0x98>
 800f5ce:	4b70      	ldr	r3, [pc, #448]	@ (800f790 <HAL_RCC_OscConfig+0x240>)
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	4a6f      	ldr	r2, [pc, #444]	@ (800f790 <HAL_RCC_OscConfig+0x240>)
 800f5d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800f5d8:	6013      	str	r3, [r2, #0]
 800f5da:	4b6d      	ldr	r3, [pc, #436]	@ (800f790 <HAL_RCC_OscConfig+0x240>)
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	4a6c      	ldr	r2, [pc, #432]	@ (800f790 <HAL_RCC_OscConfig+0x240>)
 800f5e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f5e4:	6013      	str	r3, [r2, #0]
 800f5e6:	e00b      	b.n	800f600 <HAL_RCC_OscConfig+0xb0>
 800f5e8:	4b69      	ldr	r3, [pc, #420]	@ (800f790 <HAL_RCC_OscConfig+0x240>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	4a68      	ldr	r2, [pc, #416]	@ (800f790 <HAL_RCC_OscConfig+0x240>)
 800f5ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f5f2:	6013      	str	r3, [r2, #0]
 800f5f4:	4b66      	ldr	r3, [pc, #408]	@ (800f790 <HAL_RCC_OscConfig+0x240>)
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	4a65      	ldr	r2, [pc, #404]	@ (800f790 <HAL_RCC_OscConfig+0x240>)
 800f5fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f5fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	685b      	ldr	r3, [r3, #4]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d013      	beq.n	800f630 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f608:	f7fe f93a 	bl	800d880 <HAL_GetTick>
 800f60c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f60e:	e008      	b.n	800f622 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f610:	f7fe f936 	bl	800d880 <HAL_GetTick>
 800f614:	4602      	mov	r2, r0
 800f616:	693b      	ldr	r3, [r7, #16]
 800f618:	1ad3      	subs	r3, r2, r3
 800f61a:	2b64      	cmp	r3, #100	@ 0x64
 800f61c:	d901      	bls.n	800f622 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800f61e:	2303      	movs	r3, #3
 800f620:	e207      	b.n	800fa32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f622:	4b5b      	ldr	r3, [pc, #364]	@ (800f790 <HAL_RCC_OscConfig+0x240>)
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d0f0      	beq.n	800f610 <HAL_RCC_OscConfig+0xc0>
 800f62e:	e014      	b.n	800f65a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f630:	f7fe f926 	bl	800d880 <HAL_GetTick>
 800f634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f636:	e008      	b.n	800f64a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f638:	f7fe f922 	bl	800d880 <HAL_GetTick>
 800f63c:	4602      	mov	r2, r0
 800f63e:	693b      	ldr	r3, [r7, #16]
 800f640:	1ad3      	subs	r3, r2, r3
 800f642:	2b64      	cmp	r3, #100	@ 0x64
 800f644:	d901      	bls.n	800f64a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800f646:	2303      	movs	r3, #3
 800f648:	e1f3      	b.n	800fa32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f64a:	4b51      	ldr	r3, [pc, #324]	@ (800f790 <HAL_RCC_OscConfig+0x240>)
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f652:	2b00      	cmp	r3, #0
 800f654:	d1f0      	bne.n	800f638 <HAL_RCC_OscConfig+0xe8>
 800f656:	e000      	b.n	800f65a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	f003 0302 	and.w	r3, r3, #2
 800f662:	2b00      	cmp	r3, #0
 800f664:	d063      	beq.n	800f72e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800f666:	4b4a      	ldr	r3, [pc, #296]	@ (800f790 <HAL_RCC_OscConfig+0x240>)
 800f668:	689b      	ldr	r3, [r3, #8]
 800f66a:	f003 030c 	and.w	r3, r3, #12
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d00b      	beq.n	800f68a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f672:	4b47      	ldr	r3, [pc, #284]	@ (800f790 <HAL_RCC_OscConfig+0x240>)
 800f674:	689b      	ldr	r3, [r3, #8]
 800f676:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800f67a:	2b08      	cmp	r3, #8
 800f67c:	d11c      	bne.n	800f6b8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f67e:	4b44      	ldr	r3, [pc, #272]	@ (800f790 <HAL_RCC_OscConfig+0x240>)
 800f680:	685b      	ldr	r3, [r3, #4]
 800f682:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f686:	2b00      	cmp	r3, #0
 800f688:	d116      	bne.n	800f6b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f68a:	4b41      	ldr	r3, [pc, #260]	@ (800f790 <HAL_RCC_OscConfig+0x240>)
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	f003 0302 	and.w	r3, r3, #2
 800f692:	2b00      	cmp	r3, #0
 800f694:	d005      	beq.n	800f6a2 <HAL_RCC_OscConfig+0x152>
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	68db      	ldr	r3, [r3, #12]
 800f69a:	2b01      	cmp	r3, #1
 800f69c:	d001      	beq.n	800f6a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800f69e:	2301      	movs	r3, #1
 800f6a0:	e1c7      	b.n	800fa32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f6a2:	4b3b      	ldr	r3, [pc, #236]	@ (800f790 <HAL_RCC_OscConfig+0x240>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	691b      	ldr	r3, [r3, #16]
 800f6ae:	00db      	lsls	r3, r3, #3
 800f6b0:	4937      	ldr	r1, [pc, #220]	@ (800f790 <HAL_RCC_OscConfig+0x240>)
 800f6b2:	4313      	orrs	r3, r2
 800f6b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f6b6:	e03a      	b.n	800f72e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	68db      	ldr	r3, [r3, #12]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d020      	beq.n	800f702 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f6c0:	4b34      	ldr	r3, [pc, #208]	@ (800f794 <HAL_RCC_OscConfig+0x244>)
 800f6c2:	2201      	movs	r2, #1
 800f6c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f6c6:	f7fe f8db 	bl	800d880 <HAL_GetTick>
 800f6ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f6cc:	e008      	b.n	800f6e0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f6ce:	f7fe f8d7 	bl	800d880 <HAL_GetTick>
 800f6d2:	4602      	mov	r2, r0
 800f6d4:	693b      	ldr	r3, [r7, #16]
 800f6d6:	1ad3      	subs	r3, r2, r3
 800f6d8:	2b02      	cmp	r3, #2
 800f6da:	d901      	bls.n	800f6e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800f6dc:	2303      	movs	r3, #3
 800f6de:	e1a8      	b.n	800fa32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f6e0:	4b2b      	ldr	r3, [pc, #172]	@ (800f790 <HAL_RCC_OscConfig+0x240>)
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	f003 0302 	and.w	r3, r3, #2
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d0f0      	beq.n	800f6ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f6ec:	4b28      	ldr	r3, [pc, #160]	@ (800f790 <HAL_RCC_OscConfig+0x240>)
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	691b      	ldr	r3, [r3, #16]
 800f6f8:	00db      	lsls	r3, r3, #3
 800f6fa:	4925      	ldr	r1, [pc, #148]	@ (800f790 <HAL_RCC_OscConfig+0x240>)
 800f6fc:	4313      	orrs	r3, r2
 800f6fe:	600b      	str	r3, [r1, #0]
 800f700:	e015      	b.n	800f72e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f702:	4b24      	ldr	r3, [pc, #144]	@ (800f794 <HAL_RCC_OscConfig+0x244>)
 800f704:	2200      	movs	r2, #0
 800f706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f708:	f7fe f8ba 	bl	800d880 <HAL_GetTick>
 800f70c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f70e:	e008      	b.n	800f722 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f710:	f7fe f8b6 	bl	800d880 <HAL_GetTick>
 800f714:	4602      	mov	r2, r0
 800f716:	693b      	ldr	r3, [r7, #16]
 800f718:	1ad3      	subs	r3, r2, r3
 800f71a:	2b02      	cmp	r3, #2
 800f71c:	d901      	bls.n	800f722 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800f71e:	2303      	movs	r3, #3
 800f720:	e187      	b.n	800fa32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f722:	4b1b      	ldr	r3, [pc, #108]	@ (800f790 <HAL_RCC_OscConfig+0x240>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	f003 0302 	and.w	r3, r3, #2
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d1f0      	bne.n	800f710 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	f003 0308 	and.w	r3, r3, #8
 800f736:	2b00      	cmp	r3, #0
 800f738:	d036      	beq.n	800f7a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	695b      	ldr	r3, [r3, #20]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d016      	beq.n	800f770 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f742:	4b15      	ldr	r3, [pc, #84]	@ (800f798 <HAL_RCC_OscConfig+0x248>)
 800f744:	2201      	movs	r2, #1
 800f746:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f748:	f7fe f89a 	bl	800d880 <HAL_GetTick>
 800f74c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f74e:	e008      	b.n	800f762 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f750:	f7fe f896 	bl	800d880 <HAL_GetTick>
 800f754:	4602      	mov	r2, r0
 800f756:	693b      	ldr	r3, [r7, #16]
 800f758:	1ad3      	subs	r3, r2, r3
 800f75a:	2b02      	cmp	r3, #2
 800f75c:	d901      	bls.n	800f762 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800f75e:	2303      	movs	r3, #3
 800f760:	e167      	b.n	800fa32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f762:	4b0b      	ldr	r3, [pc, #44]	@ (800f790 <HAL_RCC_OscConfig+0x240>)
 800f764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f766:	f003 0302 	and.w	r3, r3, #2
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d0f0      	beq.n	800f750 <HAL_RCC_OscConfig+0x200>
 800f76e:	e01b      	b.n	800f7a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f770:	4b09      	ldr	r3, [pc, #36]	@ (800f798 <HAL_RCC_OscConfig+0x248>)
 800f772:	2200      	movs	r2, #0
 800f774:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f776:	f7fe f883 	bl	800d880 <HAL_GetTick>
 800f77a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f77c:	e00e      	b.n	800f79c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f77e:	f7fe f87f 	bl	800d880 <HAL_GetTick>
 800f782:	4602      	mov	r2, r0
 800f784:	693b      	ldr	r3, [r7, #16]
 800f786:	1ad3      	subs	r3, r2, r3
 800f788:	2b02      	cmp	r3, #2
 800f78a:	d907      	bls.n	800f79c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800f78c:	2303      	movs	r3, #3
 800f78e:	e150      	b.n	800fa32 <HAL_RCC_OscConfig+0x4e2>
 800f790:	40023800 	.word	0x40023800
 800f794:	42470000 	.word	0x42470000
 800f798:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f79c:	4b88      	ldr	r3, [pc, #544]	@ (800f9c0 <HAL_RCC_OscConfig+0x470>)
 800f79e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f7a0:	f003 0302 	and.w	r3, r3, #2
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d1ea      	bne.n	800f77e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	f003 0304 	and.w	r3, r3, #4
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	f000 8097 	beq.w	800f8e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f7ba:	4b81      	ldr	r3, [pc, #516]	@ (800f9c0 <HAL_RCC_OscConfig+0x470>)
 800f7bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f7be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d10f      	bne.n	800f7e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	60bb      	str	r3, [r7, #8]
 800f7ca:	4b7d      	ldr	r3, [pc, #500]	@ (800f9c0 <HAL_RCC_OscConfig+0x470>)
 800f7cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f7ce:	4a7c      	ldr	r2, [pc, #496]	@ (800f9c0 <HAL_RCC_OscConfig+0x470>)
 800f7d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f7d4:	6413      	str	r3, [r2, #64]	@ 0x40
 800f7d6:	4b7a      	ldr	r3, [pc, #488]	@ (800f9c0 <HAL_RCC_OscConfig+0x470>)
 800f7d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f7da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f7de:	60bb      	str	r3, [r7, #8]
 800f7e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f7e2:	2301      	movs	r3, #1
 800f7e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f7e6:	4b77      	ldr	r3, [pc, #476]	@ (800f9c4 <HAL_RCC_OscConfig+0x474>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d118      	bne.n	800f824 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f7f2:	4b74      	ldr	r3, [pc, #464]	@ (800f9c4 <HAL_RCC_OscConfig+0x474>)
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	4a73      	ldr	r2, [pc, #460]	@ (800f9c4 <HAL_RCC_OscConfig+0x474>)
 800f7f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f7fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f7fe:	f7fe f83f 	bl	800d880 <HAL_GetTick>
 800f802:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f804:	e008      	b.n	800f818 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f806:	f7fe f83b 	bl	800d880 <HAL_GetTick>
 800f80a:	4602      	mov	r2, r0
 800f80c:	693b      	ldr	r3, [r7, #16]
 800f80e:	1ad3      	subs	r3, r2, r3
 800f810:	2b02      	cmp	r3, #2
 800f812:	d901      	bls.n	800f818 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800f814:	2303      	movs	r3, #3
 800f816:	e10c      	b.n	800fa32 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f818:	4b6a      	ldr	r3, [pc, #424]	@ (800f9c4 <HAL_RCC_OscConfig+0x474>)
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f820:	2b00      	cmp	r3, #0
 800f822:	d0f0      	beq.n	800f806 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	689b      	ldr	r3, [r3, #8]
 800f828:	2b01      	cmp	r3, #1
 800f82a:	d106      	bne.n	800f83a <HAL_RCC_OscConfig+0x2ea>
 800f82c:	4b64      	ldr	r3, [pc, #400]	@ (800f9c0 <HAL_RCC_OscConfig+0x470>)
 800f82e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f830:	4a63      	ldr	r2, [pc, #396]	@ (800f9c0 <HAL_RCC_OscConfig+0x470>)
 800f832:	f043 0301 	orr.w	r3, r3, #1
 800f836:	6713      	str	r3, [r2, #112]	@ 0x70
 800f838:	e01c      	b.n	800f874 <HAL_RCC_OscConfig+0x324>
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	689b      	ldr	r3, [r3, #8]
 800f83e:	2b05      	cmp	r3, #5
 800f840:	d10c      	bne.n	800f85c <HAL_RCC_OscConfig+0x30c>
 800f842:	4b5f      	ldr	r3, [pc, #380]	@ (800f9c0 <HAL_RCC_OscConfig+0x470>)
 800f844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f846:	4a5e      	ldr	r2, [pc, #376]	@ (800f9c0 <HAL_RCC_OscConfig+0x470>)
 800f848:	f043 0304 	orr.w	r3, r3, #4
 800f84c:	6713      	str	r3, [r2, #112]	@ 0x70
 800f84e:	4b5c      	ldr	r3, [pc, #368]	@ (800f9c0 <HAL_RCC_OscConfig+0x470>)
 800f850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f852:	4a5b      	ldr	r2, [pc, #364]	@ (800f9c0 <HAL_RCC_OscConfig+0x470>)
 800f854:	f043 0301 	orr.w	r3, r3, #1
 800f858:	6713      	str	r3, [r2, #112]	@ 0x70
 800f85a:	e00b      	b.n	800f874 <HAL_RCC_OscConfig+0x324>
 800f85c:	4b58      	ldr	r3, [pc, #352]	@ (800f9c0 <HAL_RCC_OscConfig+0x470>)
 800f85e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f860:	4a57      	ldr	r2, [pc, #348]	@ (800f9c0 <HAL_RCC_OscConfig+0x470>)
 800f862:	f023 0301 	bic.w	r3, r3, #1
 800f866:	6713      	str	r3, [r2, #112]	@ 0x70
 800f868:	4b55      	ldr	r3, [pc, #340]	@ (800f9c0 <HAL_RCC_OscConfig+0x470>)
 800f86a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f86c:	4a54      	ldr	r2, [pc, #336]	@ (800f9c0 <HAL_RCC_OscConfig+0x470>)
 800f86e:	f023 0304 	bic.w	r3, r3, #4
 800f872:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	689b      	ldr	r3, [r3, #8]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d015      	beq.n	800f8a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f87c:	f7fe f800 	bl	800d880 <HAL_GetTick>
 800f880:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f882:	e00a      	b.n	800f89a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f884:	f7fd fffc 	bl	800d880 <HAL_GetTick>
 800f888:	4602      	mov	r2, r0
 800f88a:	693b      	ldr	r3, [r7, #16]
 800f88c:	1ad3      	subs	r3, r2, r3
 800f88e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f892:	4293      	cmp	r3, r2
 800f894:	d901      	bls.n	800f89a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800f896:	2303      	movs	r3, #3
 800f898:	e0cb      	b.n	800fa32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f89a:	4b49      	ldr	r3, [pc, #292]	@ (800f9c0 <HAL_RCC_OscConfig+0x470>)
 800f89c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f89e:	f003 0302 	and.w	r3, r3, #2
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d0ee      	beq.n	800f884 <HAL_RCC_OscConfig+0x334>
 800f8a6:	e014      	b.n	800f8d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f8a8:	f7fd ffea 	bl	800d880 <HAL_GetTick>
 800f8ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f8ae:	e00a      	b.n	800f8c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f8b0:	f7fd ffe6 	bl	800d880 <HAL_GetTick>
 800f8b4:	4602      	mov	r2, r0
 800f8b6:	693b      	ldr	r3, [r7, #16]
 800f8b8:	1ad3      	subs	r3, r2, r3
 800f8ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f8be:	4293      	cmp	r3, r2
 800f8c0:	d901      	bls.n	800f8c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800f8c2:	2303      	movs	r3, #3
 800f8c4:	e0b5      	b.n	800fa32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f8c6:	4b3e      	ldr	r3, [pc, #248]	@ (800f9c0 <HAL_RCC_OscConfig+0x470>)
 800f8c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f8ca:	f003 0302 	and.w	r3, r3, #2
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d1ee      	bne.n	800f8b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800f8d2:	7dfb      	ldrb	r3, [r7, #23]
 800f8d4:	2b01      	cmp	r3, #1
 800f8d6:	d105      	bne.n	800f8e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f8d8:	4b39      	ldr	r3, [pc, #228]	@ (800f9c0 <HAL_RCC_OscConfig+0x470>)
 800f8da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f8dc:	4a38      	ldr	r2, [pc, #224]	@ (800f9c0 <HAL_RCC_OscConfig+0x470>)
 800f8de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f8e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	699b      	ldr	r3, [r3, #24]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	f000 80a1 	beq.w	800fa30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800f8ee:	4b34      	ldr	r3, [pc, #208]	@ (800f9c0 <HAL_RCC_OscConfig+0x470>)
 800f8f0:	689b      	ldr	r3, [r3, #8]
 800f8f2:	f003 030c 	and.w	r3, r3, #12
 800f8f6:	2b08      	cmp	r3, #8
 800f8f8:	d05c      	beq.n	800f9b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	699b      	ldr	r3, [r3, #24]
 800f8fe:	2b02      	cmp	r3, #2
 800f900:	d141      	bne.n	800f986 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f902:	4b31      	ldr	r3, [pc, #196]	@ (800f9c8 <HAL_RCC_OscConfig+0x478>)
 800f904:	2200      	movs	r2, #0
 800f906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f908:	f7fd ffba 	bl	800d880 <HAL_GetTick>
 800f90c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f90e:	e008      	b.n	800f922 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f910:	f7fd ffb6 	bl	800d880 <HAL_GetTick>
 800f914:	4602      	mov	r2, r0
 800f916:	693b      	ldr	r3, [r7, #16]
 800f918:	1ad3      	subs	r3, r2, r3
 800f91a:	2b02      	cmp	r3, #2
 800f91c:	d901      	bls.n	800f922 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800f91e:	2303      	movs	r3, #3
 800f920:	e087      	b.n	800fa32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f922:	4b27      	ldr	r3, [pc, #156]	@ (800f9c0 <HAL_RCC_OscConfig+0x470>)
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d1f0      	bne.n	800f910 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	69da      	ldr	r2, [r3, #28]
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	6a1b      	ldr	r3, [r3, #32]
 800f936:	431a      	orrs	r2, r3
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f93c:	019b      	lsls	r3, r3, #6
 800f93e:	431a      	orrs	r2, r3
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f944:	085b      	lsrs	r3, r3, #1
 800f946:	3b01      	subs	r3, #1
 800f948:	041b      	lsls	r3, r3, #16
 800f94a:	431a      	orrs	r2, r3
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f950:	061b      	lsls	r3, r3, #24
 800f952:	491b      	ldr	r1, [pc, #108]	@ (800f9c0 <HAL_RCC_OscConfig+0x470>)
 800f954:	4313      	orrs	r3, r2
 800f956:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f958:	4b1b      	ldr	r3, [pc, #108]	@ (800f9c8 <HAL_RCC_OscConfig+0x478>)
 800f95a:	2201      	movs	r2, #1
 800f95c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f95e:	f7fd ff8f 	bl	800d880 <HAL_GetTick>
 800f962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f964:	e008      	b.n	800f978 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f966:	f7fd ff8b 	bl	800d880 <HAL_GetTick>
 800f96a:	4602      	mov	r2, r0
 800f96c:	693b      	ldr	r3, [r7, #16]
 800f96e:	1ad3      	subs	r3, r2, r3
 800f970:	2b02      	cmp	r3, #2
 800f972:	d901      	bls.n	800f978 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800f974:	2303      	movs	r3, #3
 800f976:	e05c      	b.n	800fa32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f978:	4b11      	ldr	r3, [pc, #68]	@ (800f9c0 <HAL_RCC_OscConfig+0x470>)
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f980:	2b00      	cmp	r3, #0
 800f982:	d0f0      	beq.n	800f966 <HAL_RCC_OscConfig+0x416>
 800f984:	e054      	b.n	800fa30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f986:	4b10      	ldr	r3, [pc, #64]	@ (800f9c8 <HAL_RCC_OscConfig+0x478>)
 800f988:	2200      	movs	r2, #0
 800f98a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f98c:	f7fd ff78 	bl	800d880 <HAL_GetTick>
 800f990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f992:	e008      	b.n	800f9a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f994:	f7fd ff74 	bl	800d880 <HAL_GetTick>
 800f998:	4602      	mov	r2, r0
 800f99a:	693b      	ldr	r3, [r7, #16]
 800f99c:	1ad3      	subs	r3, r2, r3
 800f99e:	2b02      	cmp	r3, #2
 800f9a0:	d901      	bls.n	800f9a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800f9a2:	2303      	movs	r3, #3
 800f9a4:	e045      	b.n	800fa32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f9a6:	4b06      	ldr	r3, [pc, #24]	@ (800f9c0 <HAL_RCC_OscConfig+0x470>)
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d1f0      	bne.n	800f994 <HAL_RCC_OscConfig+0x444>
 800f9b2:	e03d      	b.n	800fa30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	699b      	ldr	r3, [r3, #24]
 800f9b8:	2b01      	cmp	r3, #1
 800f9ba:	d107      	bne.n	800f9cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800f9bc:	2301      	movs	r3, #1
 800f9be:	e038      	b.n	800fa32 <HAL_RCC_OscConfig+0x4e2>
 800f9c0:	40023800 	.word	0x40023800
 800f9c4:	40007000 	.word	0x40007000
 800f9c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800f9cc:	4b1b      	ldr	r3, [pc, #108]	@ (800fa3c <HAL_RCC_OscConfig+0x4ec>)
 800f9ce:	685b      	ldr	r3, [r3, #4]
 800f9d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	699b      	ldr	r3, [r3, #24]
 800f9d6:	2b01      	cmp	r3, #1
 800f9d8:	d028      	beq.n	800fa2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f9e4:	429a      	cmp	r2, r3
 800f9e6:	d121      	bne.n	800fa2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f9f2:	429a      	cmp	r2, r3
 800f9f4:	d11a      	bne.n	800fa2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f9f6:	68fa      	ldr	r2, [r7, #12]
 800f9f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800f9fc:	4013      	ands	r3, r2
 800f9fe:	687a      	ldr	r2, [r7, #4]
 800fa00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800fa02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800fa04:	4293      	cmp	r3, r2
 800fa06:	d111      	bne.n	800fa2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa12:	085b      	lsrs	r3, r3, #1
 800fa14:	3b01      	subs	r3, #1
 800fa16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800fa18:	429a      	cmp	r2, r3
 800fa1a:	d107      	bne.n	800fa2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800fa28:	429a      	cmp	r2, r3
 800fa2a:	d001      	beq.n	800fa30 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800fa2c:	2301      	movs	r3, #1
 800fa2e:	e000      	b.n	800fa32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800fa30:	2300      	movs	r3, #0
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	3718      	adds	r7, #24
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd80      	pop	{r7, pc}
 800fa3a:	bf00      	nop
 800fa3c:	40023800 	.word	0x40023800

0800fa40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b084      	sub	sp, #16
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
 800fa48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d101      	bne.n	800fa54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800fa50:	2301      	movs	r3, #1
 800fa52:	e0cc      	b.n	800fbee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800fa54:	4b68      	ldr	r3, [pc, #416]	@ (800fbf8 <HAL_RCC_ClockConfig+0x1b8>)
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	f003 0307 	and.w	r3, r3, #7
 800fa5c:	683a      	ldr	r2, [r7, #0]
 800fa5e:	429a      	cmp	r2, r3
 800fa60:	d90c      	bls.n	800fa7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fa62:	4b65      	ldr	r3, [pc, #404]	@ (800fbf8 <HAL_RCC_ClockConfig+0x1b8>)
 800fa64:	683a      	ldr	r2, [r7, #0]
 800fa66:	b2d2      	uxtb	r2, r2
 800fa68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fa6a:	4b63      	ldr	r3, [pc, #396]	@ (800fbf8 <HAL_RCC_ClockConfig+0x1b8>)
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	f003 0307 	and.w	r3, r3, #7
 800fa72:	683a      	ldr	r2, [r7, #0]
 800fa74:	429a      	cmp	r2, r3
 800fa76:	d001      	beq.n	800fa7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800fa78:	2301      	movs	r3, #1
 800fa7a:	e0b8      	b.n	800fbee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	f003 0302 	and.w	r3, r3, #2
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d020      	beq.n	800faca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	f003 0304 	and.w	r3, r3, #4
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d005      	beq.n	800faa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800fa94:	4b59      	ldr	r3, [pc, #356]	@ (800fbfc <HAL_RCC_ClockConfig+0x1bc>)
 800fa96:	689b      	ldr	r3, [r3, #8]
 800fa98:	4a58      	ldr	r2, [pc, #352]	@ (800fbfc <HAL_RCC_ClockConfig+0x1bc>)
 800fa9a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800fa9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	f003 0308 	and.w	r3, r3, #8
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d005      	beq.n	800fab8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800faac:	4b53      	ldr	r3, [pc, #332]	@ (800fbfc <HAL_RCC_ClockConfig+0x1bc>)
 800faae:	689b      	ldr	r3, [r3, #8]
 800fab0:	4a52      	ldr	r2, [pc, #328]	@ (800fbfc <HAL_RCC_ClockConfig+0x1bc>)
 800fab2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800fab6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fab8:	4b50      	ldr	r3, [pc, #320]	@ (800fbfc <HAL_RCC_ClockConfig+0x1bc>)
 800faba:	689b      	ldr	r3, [r3, #8]
 800fabc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	689b      	ldr	r3, [r3, #8]
 800fac4:	494d      	ldr	r1, [pc, #308]	@ (800fbfc <HAL_RCC_ClockConfig+0x1bc>)
 800fac6:	4313      	orrs	r3, r2
 800fac8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	f003 0301 	and.w	r3, r3, #1
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d044      	beq.n	800fb60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	685b      	ldr	r3, [r3, #4]
 800fada:	2b01      	cmp	r3, #1
 800fadc:	d107      	bne.n	800faee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fade:	4b47      	ldr	r3, [pc, #284]	@ (800fbfc <HAL_RCC_ClockConfig+0x1bc>)
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d119      	bne.n	800fb1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800faea:	2301      	movs	r3, #1
 800faec:	e07f      	b.n	800fbee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	685b      	ldr	r3, [r3, #4]
 800faf2:	2b02      	cmp	r3, #2
 800faf4:	d003      	beq.n	800fafe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800fafa:	2b03      	cmp	r3, #3
 800fafc:	d107      	bne.n	800fb0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800fafe:	4b3f      	ldr	r3, [pc, #252]	@ (800fbfc <HAL_RCC_ClockConfig+0x1bc>)
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d109      	bne.n	800fb1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800fb0a:	2301      	movs	r3, #1
 800fb0c:	e06f      	b.n	800fbee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fb0e:	4b3b      	ldr	r3, [pc, #236]	@ (800fbfc <HAL_RCC_ClockConfig+0x1bc>)
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	f003 0302 	and.w	r3, r3, #2
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d101      	bne.n	800fb1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800fb1a:	2301      	movs	r3, #1
 800fb1c:	e067      	b.n	800fbee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800fb1e:	4b37      	ldr	r3, [pc, #220]	@ (800fbfc <HAL_RCC_ClockConfig+0x1bc>)
 800fb20:	689b      	ldr	r3, [r3, #8]
 800fb22:	f023 0203 	bic.w	r2, r3, #3
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	685b      	ldr	r3, [r3, #4]
 800fb2a:	4934      	ldr	r1, [pc, #208]	@ (800fbfc <HAL_RCC_ClockConfig+0x1bc>)
 800fb2c:	4313      	orrs	r3, r2
 800fb2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800fb30:	f7fd fea6 	bl	800d880 <HAL_GetTick>
 800fb34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fb36:	e00a      	b.n	800fb4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800fb38:	f7fd fea2 	bl	800d880 <HAL_GetTick>
 800fb3c:	4602      	mov	r2, r0
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	1ad3      	subs	r3, r2, r3
 800fb42:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fb46:	4293      	cmp	r3, r2
 800fb48:	d901      	bls.n	800fb4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800fb4a:	2303      	movs	r3, #3
 800fb4c:	e04f      	b.n	800fbee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fb4e:	4b2b      	ldr	r3, [pc, #172]	@ (800fbfc <HAL_RCC_ClockConfig+0x1bc>)
 800fb50:	689b      	ldr	r3, [r3, #8]
 800fb52:	f003 020c 	and.w	r2, r3, #12
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	685b      	ldr	r3, [r3, #4]
 800fb5a:	009b      	lsls	r3, r3, #2
 800fb5c:	429a      	cmp	r2, r3
 800fb5e:	d1eb      	bne.n	800fb38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800fb60:	4b25      	ldr	r3, [pc, #148]	@ (800fbf8 <HAL_RCC_ClockConfig+0x1b8>)
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	f003 0307 	and.w	r3, r3, #7
 800fb68:	683a      	ldr	r2, [r7, #0]
 800fb6a:	429a      	cmp	r2, r3
 800fb6c:	d20c      	bcs.n	800fb88 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fb6e:	4b22      	ldr	r3, [pc, #136]	@ (800fbf8 <HAL_RCC_ClockConfig+0x1b8>)
 800fb70:	683a      	ldr	r2, [r7, #0]
 800fb72:	b2d2      	uxtb	r2, r2
 800fb74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fb76:	4b20      	ldr	r3, [pc, #128]	@ (800fbf8 <HAL_RCC_ClockConfig+0x1b8>)
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	f003 0307 	and.w	r3, r3, #7
 800fb7e:	683a      	ldr	r2, [r7, #0]
 800fb80:	429a      	cmp	r2, r3
 800fb82:	d001      	beq.n	800fb88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800fb84:	2301      	movs	r3, #1
 800fb86:	e032      	b.n	800fbee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	f003 0304 	and.w	r3, r3, #4
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d008      	beq.n	800fba6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800fb94:	4b19      	ldr	r3, [pc, #100]	@ (800fbfc <HAL_RCC_ClockConfig+0x1bc>)
 800fb96:	689b      	ldr	r3, [r3, #8]
 800fb98:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	68db      	ldr	r3, [r3, #12]
 800fba0:	4916      	ldr	r1, [pc, #88]	@ (800fbfc <HAL_RCC_ClockConfig+0x1bc>)
 800fba2:	4313      	orrs	r3, r2
 800fba4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	f003 0308 	and.w	r3, r3, #8
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d009      	beq.n	800fbc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800fbb2:	4b12      	ldr	r3, [pc, #72]	@ (800fbfc <HAL_RCC_ClockConfig+0x1bc>)
 800fbb4:	689b      	ldr	r3, [r3, #8]
 800fbb6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	691b      	ldr	r3, [r3, #16]
 800fbbe:	00db      	lsls	r3, r3, #3
 800fbc0:	490e      	ldr	r1, [pc, #56]	@ (800fbfc <HAL_RCC_ClockConfig+0x1bc>)
 800fbc2:	4313      	orrs	r3, r2
 800fbc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800fbc6:	f000 f821 	bl	800fc0c <HAL_RCC_GetSysClockFreq>
 800fbca:	4602      	mov	r2, r0
 800fbcc:	4b0b      	ldr	r3, [pc, #44]	@ (800fbfc <HAL_RCC_ClockConfig+0x1bc>)
 800fbce:	689b      	ldr	r3, [r3, #8]
 800fbd0:	091b      	lsrs	r3, r3, #4
 800fbd2:	f003 030f 	and.w	r3, r3, #15
 800fbd6:	490a      	ldr	r1, [pc, #40]	@ (800fc00 <HAL_RCC_ClockConfig+0x1c0>)
 800fbd8:	5ccb      	ldrb	r3, [r1, r3]
 800fbda:	fa22 f303 	lsr.w	r3, r2, r3
 800fbde:	4a09      	ldr	r2, [pc, #36]	@ (800fc04 <HAL_RCC_ClockConfig+0x1c4>)
 800fbe0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800fbe2:	4b09      	ldr	r3, [pc, #36]	@ (800fc08 <HAL_RCC_ClockConfig+0x1c8>)
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f7fd fe06 	bl	800d7f8 <HAL_InitTick>

  return HAL_OK;
 800fbec:	2300      	movs	r3, #0
}
 800fbee:	4618      	mov	r0, r3
 800fbf0:	3710      	adds	r7, #16
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	bd80      	pop	{r7, pc}
 800fbf6:	bf00      	nop
 800fbf8:	40023c00 	.word	0x40023c00
 800fbfc:	40023800 	.word	0x40023800
 800fc00:	08016248 	.word	0x08016248
 800fc04:	20000008 	.word	0x20000008
 800fc08:	2000000c 	.word	0x2000000c

0800fc0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800fc0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fc10:	b090      	sub	sp, #64	@ 0x40
 800fc12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800fc14:	2300      	movs	r3, #0
 800fc16:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800fc18:	2300      	movs	r3, #0
 800fc1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800fc20:	2300      	movs	r3, #0
 800fc22:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800fc24:	4b59      	ldr	r3, [pc, #356]	@ (800fd8c <HAL_RCC_GetSysClockFreq+0x180>)
 800fc26:	689b      	ldr	r3, [r3, #8]
 800fc28:	f003 030c 	and.w	r3, r3, #12
 800fc2c:	2b08      	cmp	r3, #8
 800fc2e:	d00d      	beq.n	800fc4c <HAL_RCC_GetSysClockFreq+0x40>
 800fc30:	2b08      	cmp	r3, #8
 800fc32:	f200 80a1 	bhi.w	800fd78 <HAL_RCC_GetSysClockFreq+0x16c>
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d002      	beq.n	800fc40 <HAL_RCC_GetSysClockFreq+0x34>
 800fc3a:	2b04      	cmp	r3, #4
 800fc3c:	d003      	beq.n	800fc46 <HAL_RCC_GetSysClockFreq+0x3a>
 800fc3e:	e09b      	b.n	800fd78 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800fc40:	4b53      	ldr	r3, [pc, #332]	@ (800fd90 <HAL_RCC_GetSysClockFreq+0x184>)
 800fc42:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800fc44:	e09b      	b.n	800fd7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800fc46:	4b53      	ldr	r3, [pc, #332]	@ (800fd94 <HAL_RCC_GetSysClockFreq+0x188>)
 800fc48:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800fc4a:	e098      	b.n	800fd7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800fc4c:	4b4f      	ldr	r3, [pc, #316]	@ (800fd8c <HAL_RCC_GetSysClockFreq+0x180>)
 800fc4e:	685b      	ldr	r3, [r3, #4]
 800fc50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fc54:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800fc56:	4b4d      	ldr	r3, [pc, #308]	@ (800fd8c <HAL_RCC_GetSysClockFreq+0x180>)
 800fc58:	685b      	ldr	r3, [r3, #4]
 800fc5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d028      	beq.n	800fcb4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800fc62:	4b4a      	ldr	r3, [pc, #296]	@ (800fd8c <HAL_RCC_GetSysClockFreq+0x180>)
 800fc64:	685b      	ldr	r3, [r3, #4]
 800fc66:	099b      	lsrs	r3, r3, #6
 800fc68:	2200      	movs	r2, #0
 800fc6a:	623b      	str	r3, [r7, #32]
 800fc6c:	627a      	str	r2, [r7, #36]	@ 0x24
 800fc6e:	6a3b      	ldr	r3, [r7, #32]
 800fc70:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800fc74:	2100      	movs	r1, #0
 800fc76:	4b47      	ldr	r3, [pc, #284]	@ (800fd94 <HAL_RCC_GetSysClockFreq+0x188>)
 800fc78:	fb03 f201 	mul.w	r2, r3, r1
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	fb00 f303 	mul.w	r3, r0, r3
 800fc82:	4413      	add	r3, r2
 800fc84:	4a43      	ldr	r2, [pc, #268]	@ (800fd94 <HAL_RCC_GetSysClockFreq+0x188>)
 800fc86:	fba0 1202 	umull	r1, r2, r0, r2
 800fc8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fc8c:	460a      	mov	r2, r1
 800fc8e:	62ba      	str	r2, [r7, #40]	@ 0x28
 800fc90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fc92:	4413      	add	r3, r2
 800fc94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fc96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc98:	2200      	movs	r2, #0
 800fc9a:	61bb      	str	r3, [r7, #24]
 800fc9c:	61fa      	str	r2, [r7, #28]
 800fc9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800fca2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800fca6:	f7f0 ffd7 	bl	8000c58 <__aeabi_uldivmod>
 800fcaa:	4602      	mov	r2, r0
 800fcac:	460b      	mov	r3, r1
 800fcae:	4613      	mov	r3, r2
 800fcb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fcb2:	e053      	b.n	800fd5c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800fcb4:	4b35      	ldr	r3, [pc, #212]	@ (800fd8c <HAL_RCC_GetSysClockFreq+0x180>)
 800fcb6:	685b      	ldr	r3, [r3, #4]
 800fcb8:	099b      	lsrs	r3, r3, #6
 800fcba:	2200      	movs	r2, #0
 800fcbc:	613b      	str	r3, [r7, #16]
 800fcbe:	617a      	str	r2, [r7, #20]
 800fcc0:	693b      	ldr	r3, [r7, #16]
 800fcc2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800fcc6:	f04f 0b00 	mov.w	fp, #0
 800fcca:	4652      	mov	r2, sl
 800fccc:	465b      	mov	r3, fp
 800fcce:	f04f 0000 	mov.w	r0, #0
 800fcd2:	f04f 0100 	mov.w	r1, #0
 800fcd6:	0159      	lsls	r1, r3, #5
 800fcd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800fcdc:	0150      	lsls	r0, r2, #5
 800fcde:	4602      	mov	r2, r0
 800fce0:	460b      	mov	r3, r1
 800fce2:	ebb2 080a 	subs.w	r8, r2, sl
 800fce6:	eb63 090b 	sbc.w	r9, r3, fp
 800fcea:	f04f 0200 	mov.w	r2, #0
 800fcee:	f04f 0300 	mov.w	r3, #0
 800fcf2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800fcf6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800fcfa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800fcfe:	ebb2 0408 	subs.w	r4, r2, r8
 800fd02:	eb63 0509 	sbc.w	r5, r3, r9
 800fd06:	f04f 0200 	mov.w	r2, #0
 800fd0a:	f04f 0300 	mov.w	r3, #0
 800fd0e:	00eb      	lsls	r3, r5, #3
 800fd10:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800fd14:	00e2      	lsls	r2, r4, #3
 800fd16:	4614      	mov	r4, r2
 800fd18:	461d      	mov	r5, r3
 800fd1a:	eb14 030a 	adds.w	r3, r4, sl
 800fd1e:	603b      	str	r3, [r7, #0]
 800fd20:	eb45 030b 	adc.w	r3, r5, fp
 800fd24:	607b      	str	r3, [r7, #4]
 800fd26:	f04f 0200 	mov.w	r2, #0
 800fd2a:	f04f 0300 	mov.w	r3, #0
 800fd2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800fd32:	4629      	mov	r1, r5
 800fd34:	028b      	lsls	r3, r1, #10
 800fd36:	4621      	mov	r1, r4
 800fd38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800fd3c:	4621      	mov	r1, r4
 800fd3e:	028a      	lsls	r2, r1, #10
 800fd40:	4610      	mov	r0, r2
 800fd42:	4619      	mov	r1, r3
 800fd44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd46:	2200      	movs	r2, #0
 800fd48:	60bb      	str	r3, [r7, #8]
 800fd4a:	60fa      	str	r2, [r7, #12]
 800fd4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fd50:	f7f0 ff82 	bl	8000c58 <__aeabi_uldivmod>
 800fd54:	4602      	mov	r2, r0
 800fd56:	460b      	mov	r3, r1
 800fd58:	4613      	mov	r3, r2
 800fd5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800fd5c:	4b0b      	ldr	r3, [pc, #44]	@ (800fd8c <HAL_RCC_GetSysClockFreq+0x180>)
 800fd5e:	685b      	ldr	r3, [r3, #4]
 800fd60:	0c1b      	lsrs	r3, r3, #16
 800fd62:	f003 0303 	and.w	r3, r3, #3
 800fd66:	3301      	adds	r3, #1
 800fd68:	005b      	lsls	r3, r3, #1
 800fd6a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800fd6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fd6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd70:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd74:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800fd76:	e002      	b.n	800fd7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800fd78:	4b05      	ldr	r3, [pc, #20]	@ (800fd90 <HAL_RCC_GetSysClockFreq+0x184>)
 800fd7a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800fd7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800fd7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800fd80:	4618      	mov	r0, r3
 800fd82:	3740      	adds	r7, #64	@ 0x40
 800fd84:	46bd      	mov	sp, r7
 800fd86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fd8a:	bf00      	nop
 800fd8c:	40023800 	.word	0x40023800
 800fd90:	00f42400 	.word	0x00f42400
 800fd94:	017d7840 	.word	0x017d7840

0800fd98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800fd98:	b480      	push	{r7}
 800fd9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800fd9c:	4b03      	ldr	r3, [pc, #12]	@ (800fdac <HAL_RCC_GetHCLKFreq+0x14>)
 800fd9e:	681b      	ldr	r3, [r3, #0]
}
 800fda0:	4618      	mov	r0, r3
 800fda2:	46bd      	mov	sp, r7
 800fda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda8:	4770      	bx	lr
 800fdaa:	bf00      	nop
 800fdac:	20000008 	.word	0x20000008

0800fdb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800fdb4:	f7ff fff0 	bl	800fd98 <HAL_RCC_GetHCLKFreq>
 800fdb8:	4602      	mov	r2, r0
 800fdba:	4b05      	ldr	r3, [pc, #20]	@ (800fdd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800fdbc:	689b      	ldr	r3, [r3, #8]
 800fdbe:	0a9b      	lsrs	r3, r3, #10
 800fdc0:	f003 0307 	and.w	r3, r3, #7
 800fdc4:	4903      	ldr	r1, [pc, #12]	@ (800fdd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800fdc6:	5ccb      	ldrb	r3, [r1, r3]
 800fdc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fdcc:	4618      	mov	r0, r3
 800fdce:	bd80      	pop	{r7, pc}
 800fdd0:	40023800 	.word	0x40023800
 800fdd4:	08016258 	.word	0x08016258

0800fdd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800fddc:	f7ff ffdc 	bl	800fd98 <HAL_RCC_GetHCLKFreq>
 800fde0:	4602      	mov	r2, r0
 800fde2:	4b05      	ldr	r3, [pc, #20]	@ (800fdf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800fde4:	689b      	ldr	r3, [r3, #8]
 800fde6:	0b5b      	lsrs	r3, r3, #13
 800fde8:	f003 0307 	and.w	r3, r3, #7
 800fdec:	4903      	ldr	r1, [pc, #12]	@ (800fdfc <HAL_RCC_GetPCLK2Freq+0x24>)
 800fdee:	5ccb      	ldrb	r3, [r1, r3]
 800fdf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	bd80      	pop	{r7, pc}
 800fdf8:	40023800 	.word	0x40023800
 800fdfc:	08016258 	.word	0x08016258

0800fe00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b082      	sub	sp, #8
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d101      	bne.n	800fe12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800fe0e:	2301      	movs	r3, #1
 800fe10:	e07b      	b.n	800ff0a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d108      	bne.n	800fe2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	685b      	ldr	r3, [r3, #4]
 800fe1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fe22:	d009      	beq.n	800fe38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	2200      	movs	r2, #0
 800fe28:	61da      	str	r2, [r3, #28]
 800fe2a:	e005      	b.n	800fe38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	2200      	movs	r2, #0
 800fe30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	2200      	movs	r2, #0
 800fe36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800fe44:	b2db      	uxtb	r3, r3
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d106      	bne.n	800fe58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800fe52:	6878      	ldr	r0, [r7, #4]
 800fe54:	f7fd fa2c 	bl	800d2b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	2202      	movs	r2, #2
 800fe5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	681a      	ldr	r2, [r3, #0]
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fe6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	685b      	ldr	r3, [r3, #4]
 800fe74:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	689b      	ldr	r3, [r3, #8]
 800fe7c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800fe80:	431a      	orrs	r2, r3
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	68db      	ldr	r3, [r3, #12]
 800fe86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fe8a:	431a      	orrs	r2, r3
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	691b      	ldr	r3, [r3, #16]
 800fe90:	f003 0302 	and.w	r3, r3, #2
 800fe94:	431a      	orrs	r2, r3
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	695b      	ldr	r3, [r3, #20]
 800fe9a:	f003 0301 	and.w	r3, r3, #1
 800fe9e:	431a      	orrs	r2, r3
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	699b      	ldr	r3, [r3, #24]
 800fea4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fea8:	431a      	orrs	r2, r3
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	69db      	ldr	r3, [r3, #28]
 800feae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800feb2:	431a      	orrs	r2, r3
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	6a1b      	ldr	r3, [r3, #32]
 800feb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800febc:	ea42 0103 	orr.w	r1, r2, r3
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fec4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	430a      	orrs	r2, r1
 800fece:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	699b      	ldr	r3, [r3, #24]
 800fed4:	0c1b      	lsrs	r3, r3, #16
 800fed6:	f003 0104 	and.w	r1, r3, #4
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fede:	f003 0210 	and.w	r2, r3, #16
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	430a      	orrs	r2, r1
 800fee8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	69da      	ldr	r2, [r3, #28]
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800fef8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	2200      	movs	r2, #0
 800fefe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	2201      	movs	r2, #1
 800ff04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800ff08:	2300      	movs	r3, #0
}
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	3708      	adds	r7, #8
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	bd80      	pop	{r7, pc}

0800ff12 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ff12:	b580      	push	{r7, lr}
 800ff14:	b088      	sub	sp, #32
 800ff16:	af00      	add	r7, sp, #0
 800ff18:	60f8      	str	r0, [r7, #12]
 800ff1a:	60b9      	str	r1, [r7, #8]
 800ff1c:	603b      	str	r3, [r7, #0]
 800ff1e:	4613      	mov	r3, r2
 800ff20:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ff22:	f7fd fcad 	bl	800d880 <HAL_GetTick>
 800ff26:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800ff28:	88fb      	ldrh	r3, [r7, #6]
 800ff2a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ff32:	b2db      	uxtb	r3, r3
 800ff34:	2b01      	cmp	r3, #1
 800ff36:	d001      	beq.n	800ff3c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800ff38:	2302      	movs	r3, #2
 800ff3a:	e12a      	b.n	8010192 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800ff3c:	68bb      	ldr	r3, [r7, #8]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d002      	beq.n	800ff48 <HAL_SPI_Transmit+0x36>
 800ff42:	88fb      	ldrh	r3, [r7, #6]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d101      	bne.n	800ff4c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800ff48:	2301      	movs	r3, #1
 800ff4a:	e122      	b.n	8010192 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ff52:	2b01      	cmp	r3, #1
 800ff54:	d101      	bne.n	800ff5a <HAL_SPI_Transmit+0x48>
 800ff56:	2302      	movs	r3, #2
 800ff58:	e11b      	b.n	8010192 <HAL_SPI_Transmit+0x280>
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	2201      	movs	r2, #1
 800ff5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	2203      	movs	r2, #3
 800ff66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	68ba      	ldr	r2, [r7, #8]
 800ff74:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	88fa      	ldrh	r2, [r7, #6]
 800ff7a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	88fa      	ldrh	r2, [r7, #6]
 800ff80:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	2200      	movs	r2, #0
 800ff86:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	2200      	movs	r2, #0
 800ff92:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	2200      	movs	r2, #0
 800ff98:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	689b      	ldr	r3, [r3, #8]
 800ffa4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ffa8:	d10f      	bne.n	800ffca <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	681a      	ldr	r2, [r3, #0]
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ffb8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	681a      	ldr	r2, [r3, #0]
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ffc8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ffd4:	2b40      	cmp	r3, #64	@ 0x40
 800ffd6:	d007      	beq.n	800ffe8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	681a      	ldr	r2, [r3, #0]
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ffe6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	68db      	ldr	r3, [r3, #12]
 800ffec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fff0:	d152      	bne.n	8010098 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	685b      	ldr	r3, [r3, #4]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d002      	beq.n	8010000 <HAL_SPI_Transmit+0xee>
 800fffa:	8b7b      	ldrh	r3, [r7, #26]
 800fffc:	2b01      	cmp	r3, #1
 800fffe:	d145      	bne.n	801008c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010004:	881a      	ldrh	r2, [r3, #0]
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010010:	1c9a      	adds	r2, r3, #2
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801001a:	b29b      	uxth	r3, r3
 801001c:	3b01      	subs	r3, #1
 801001e:	b29a      	uxth	r2, r3
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8010024:	e032      	b.n	801008c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	689b      	ldr	r3, [r3, #8]
 801002c:	f003 0302 	and.w	r3, r3, #2
 8010030:	2b02      	cmp	r3, #2
 8010032:	d112      	bne.n	801005a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010038:	881a      	ldrh	r2, [r3, #0]
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010044:	1c9a      	adds	r2, r3, #2
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801004e:	b29b      	uxth	r3, r3
 8010050:	3b01      	subs	r3, #1
 8010052:	b29a      	uxth	r2, r3
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	86da      	strh	r2, [r3, #54]	@ 0x36
 8010058:	e018      	b.n	801008c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801005a:	f7fd fc11 	bl	800d880 <HAL_GetTick>
 801005e:	4602      	mov	r2, r0
 8010060:	69fb      	ldr	r3, [r7, #28]
 8010062:	1ad3      	subs	r3, r2, r3
 8010064:	683a      	ldr	r2, [r7, #0]
 8010066:	429a      	cmp	r2, r3
 8010068:	d803      	bhi.n	8010072 <HAL_SPI_Transmit+0x160>
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010070:	d102      	bne.n	8010078 <HAL_SPI_Transmit+0x166>
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d109      	bne.n	801008c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	2201      	movs	r2, #1
 801007c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	2200      	movs	r2, #0
 8010084:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8010088:	2303      	movs	r3, #3
 801008a:	e082      	b.n	8010192 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8010090:	b29b      	uxth	r3, r3
 8010092:	2b00      	cmp	r3, #0
 8010094:	d1c7      	bne.n	8010026 <HAL_SPI_Transmit+0x114>
 8010096:	e053      	b.n	8010140 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	685b      	ldr	r3, [r3, #4]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d002      	beq.n	80100a6 <HAL_SPI_Transmit+0x194>
 80100a0:	8b7b      	ldrh	r3, [r7, #26]
 80100a2:	2b01      	cmp	r3, #1
 80100a4:	d147      	bne.n	8010136 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	330c      	adds	r3, #12
 80100b0:	7812      	ldrb	r2, [r2, #0]
 80100b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80100b8:	1c5a      	adds	r2, r3, #1
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80100c2:	b29b      	uxth	r3, r3
 80100c4:	3b01      	subs	r3, #1
 80100c6:	b29a      	uxth	r2, r3
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80100cc:	e033      	b.n	8010136 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	689b      	ldr	r3, [r3, #8]
 80100d4:	f003 0302 	and.w	r3, r3, #2
 80100d8:	2b02      	cmp	r3, #2
 80100da:	d113      	bne.n	8010104 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	330c      	adds	r3, #12
 80100e6:	7812      	ldrb	r2, [r2, #0]
 80100e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80100ee:	1c5a      	adds	r2, r3, #1
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80100f8:	b29b      	uxth	r3, r3
 80100fa:	3b01      	subs	r3, #1
 80100fc:	b29a      	uxth	r2, r3
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	86da      	strh	r2, [r3, #54]	@ 0x36
 8010102:	e018      	b.n	8010136 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010104:	f7fd fbbc 	bl	800d880 <HAL_GetTick>
 8010108:	4602      	mov	r2, r0
 801010a:	69fb      	ldr	r3, [r7, #28]
 801010c:	1ad3      	subs	r3, r2, r3
 801010e:	683a      	ldr	r2, [r7, #0]
 8010110:	429a      	cmp	r2, r3
 8010112:	d803      	bhi.n	801011c <HAL_SPI_Transmit+0x20a>
 8010114:	683b      	ldr	r3, [r7, #0]
 8010116:	f1b3 3fff 	cmp.w	r3, #4294967295
 801011a:	d102      	bne.n	8010122 <HAL_SPI_Transmit+0x210>
 801011c:	683b      	ldr	r3, [r7, #0]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d109      	bne.n	8010136 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	2201      	movs	r2, #1
 8010126:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	2200      	movs	r2, #0
 801012e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8010132:	2303      	movs	r3, #3
 8010134:	e02d      	b.n	8010192 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801013a:	b29b      	uxth	r3, r3
 801013c:	2b00      	cmp	r3, #0
 801013e:	d1c6      	bne.n	80100ce <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010140:	69fa      	ldr	r2, [r7, #28]
 8010142:	6839      	ldr	r1, [r7, #0]
 8010144:	68f8      	ldr	r0, [r7, #12]
 8010146:	f000 f8b1 	bl	80102ac <SPI_EndRxTxTransaction>
 801014a:	4603      	mov	r3, r0
 801014c:	2b00      	cmp	r3, #0
 801014e:	d002      	beq.n	8010156 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	2220      	movs	r2, #32
 8010154:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	689b      	ldr	r3, [r3, #8]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d10a      	bne.n	8010174 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801015e:	2300      	movs	r3, #0
 8010160:	617b      	str	r3, [r7, #20]
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	68db      	ldr	r3, [r3, #12]
 8010168:	617b      	str	r3, [r7, #20]
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	689b      	ldr	r3, [r3, #8]
 8010170:	617b      	str	r3, [r7, #20]
 8010172:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	2201      	movs	r2, #1
 8010178:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	2200      	movs	r2, #0
 8010180:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010188:	2b00      	cmp	r3, #0
 801018a:	d001      	beq.n	8010190 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 801018c:	2301      	movs	r3, #1
 801018e:	e000      	b.n	8010192 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8010190:	2300      	movs	r3, #0
  }
}
 8010192:	4618      	mov	r0, r3
 8010194:	3720      	adds	r7, #32
 8010196:	46bd      	mov	sp, r7
 8010198:	bd80      	pop	{r7, pc}
	...

0801019c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b088      	sub	sp, #32
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	60f8      	str	r0, [r7, #12]
 80101a4:	60b9      	str	r1, [r7, #8]
 80101a6:	603b      	str	r3, [r7, #0]
 80101a8:	4613      	mov	r3, r2
 80101aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80101ac:	f7fd fb68 	bl	800d880 <HAL_GetTick>
 80101b0:	4602      	mov	r2, r0
 80101b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101b4:	1a9b      	subs	r3, r3, r2
 80101b6:	683a      	ldr	r2, [r7, #0]
 80101b8:	4413      	add	r3, r2
 80101ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80101bc:	f7fd fb60 	bl	800d880 <HAL_GetTick>
 80101c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80101c2:	4b39      	ldr	r3, [pc, #228]	@ (80102a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	015b      	lsls	r3, r3, #5
 80101c8:	0d1b      	lsrs	r3, r3, #20
 80101ca:	69fa      	ldr	r2, [r7, #28]
 80101cc:	fb02 f303 	mul.w	r3, r2, r3
 80101d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80101d2:	e054      	b.n	801027e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80101d4:	683b      	ldr	r3, [r7, #0]
 80101d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101da:	d050      	beq.n	801027e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80101dc:	f7fd fb50 	bl	800d880 <HAL_GetTick>
 80101e0:	4602      	mov	r2, r0
 80101e2:	69bb      	ldr	r3, [r7, #24]
 80101e4:	1ad3      	subs	r3, r2, r3
 80101e6:	69fa      	ldr	r2, [r7, #28]
 80101e8:	429a      	cmp	r2, r3
 80101ea:	d902      	bls.n	80101f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80101ec:	69fb      	ldr	r3, [r7, #28]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d13d      	bne.n	801026e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	685a      	ldr	r2, [r3, #4]
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8010200:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	685b      	ldr	r3, [r3, #4]
 8010206:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801020a:	d111      	bne.n	8010230 <SPI_WaitFlagStateUntilTimeout+0x94>
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	689b      	ldr	r3, [r3, #8]
 8010210:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010214:	d004      	beq.n	8010220 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	689b      	ldr	r3, [r3, #8]
 801021a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801021e:	d107      	bne.n	8010230 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	681a      	ldr	r2, [r3, #0]
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801022e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010234:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010238:	d10f      	bne.n	801025a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	681a      	ldr	r2, [r3, #0]
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8010248:	601a      	str	r2, [r3, #0]
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	681a      	ldr	r2, [r3, #0]
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8010258:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	2201      	movs	r2, #1
 801025e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	2200      	movs	r2, #0
 8010266:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 801026a:	2303      	movs	r3, #3
 801026c:	e017      	b.n	801029e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801026e:	697b      	ldr	r3, [r7, #20]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d101      	bne.n	8010278 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8010274:	2300      	movs	r3, #0
 8010276:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8010278:	697b      	ldr	r3, [r7, #20]
 801027a:	3b01      	subs	r3, #1
 801027c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	689a      	ldr	r2, [r3, #8]
 8010284:	68bb      	ldr	r3, [r7, #8]
 8010286:	4013      	ands	r3, r2
 8010288:	68ba      	ldr	r2, [r7, #8]
 801028a:	429a      	cmp	r2, r3
 801028c:	bf0c      	ite	eq
 801028e:	2301      	moveq	r3, #1
 8010290:	2300      	movne	r3, #0
 8010292:	b2db      	uxtb	r3, r3
 8010294:	461a      	mov	r2, r3
 8010296:	79fb      	ldrb	r3, [r7, #7]
 8010298:	429a      	cmp	r2, r3
 801029a:	d19b      	bne.n	80101d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801029c:	2300      	movs	r3, #0
}
 801029e:	4618      	mov	r0, r3
 80102a0:	3720      	adds	r7, #32
 80102a2:	46bd      	mov	sp, r7
 80102a4:	bd80      	pop	{r7, pc}
 80102a6:	bf00      	nop
 80102a8:	20000008 	.word	0x20000008

080102ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b088      	sub	sp, #32
 80102b0:	af02      	add	r7, sp, #8
 80102b2:	60f8      	str	r0, [r7, #12]
 80102b4:	60b9      	str	r1, [r7, #8]
 80102b6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	9300      	str	r3, [sp, #0]
 80102bc:	68bb      	ldr	r3, [r7, #8]
 80102be:	2201      	movs	r2, #1
 80102c0:	2102      	movs	r1, #2
 80102c2:	68f8      	ldr	r0, [r7, #12]
 80102c4:	f7ff ff6a 	bl	801019c <SPI_WaitFlagStateUntilTimeout>
 80102c8:	4603      	mov	r3, r0
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d007      	beq.n	80102de <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80102d2:	f043 0220 	orr.w	r2, r3, #32
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80102da:	2303      	movs	r3, #3
 80102dc:	e032      	b.n	8010344 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80102de:	4b1b      	ldr	r3, [pc, #108]	@ (801034c <SPI_EndRxTxTransaction+0xa0>)
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	4a1b      	ldr	r2, [pc, #108]	@ (8010350 <SPI_EndRxTxTransaction+0xa4>)
 80102e4:	fba2 2303 	umull	r2, r3, r2, r3
 80102e8:	0d5b      	lsrs	r3, r3, #21
 80102ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80102ee:	fb02 f303 	mul.w	r3, r2, r3
 80102f2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	685b      	ldr	r3, [r3, #4]
 80102f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80102fc:	d112      	bne.n	8010324 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	9300      	str	r3, [sp, #0]
 8010302:	68bb      	ldr	r3, [r7, #8]
 8010304:	2200      	movs	r2, #0
 8010306:	2180      	movs	r1, #128	@ 0x80
 8010308:	68f8      	ldr	r0, [r7, #12]
 801030a:	f7ff ff47 	bl	801019c <SPI_WaitFlagStateUntilTimeout>
 801030e:	4603      	mov	r3, r0
 8010310:	2b00      	cmp	r3, #0
 8010312:	d016      	beq.n	8010342 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010318:	f043 0220 	orr.w	r2, r3, #32
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8010320:	2303      	movs	r3, #3
 8010322:	e00f      	b.n	8010344 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8010324:	697b      	ldr	r3, [r7, #20]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d00a      	beq.n	8010340 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 801032a:	697b      	ldr	r3, [r7, #20]
 801032c:	3b01      	subs	r3, #1
 801032e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	689b      	ldr	r3, [r3, #8]
 8010336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801033a:	2b80      	cmp	r3, #128	@ 0x80
 801033c:	d0f2      	beq.n	8010324 <SPI_EndRxTxTransaction+0x78>
 801033e:	e000      	b.n	8010342 <SPI_EndRxTxTransaction+0x96>
        break;
 8010340:	bf00      	nop
  }

  return HAL_OK;
 8010342:	2300      	movs	r3, #0
}
 8010344:	4618      	mov	r0, r3
 8010346:	3718      	adds	r7, #24
 8010348:	46bd      	mov	sp, r7
 801034a:	bd80      	pop	{r7, pc}
 801034c:	20000008 	.word	0x20000008
 8010350:	165e9f81 	.word	0x165e9f81

08010354 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010354:	b580      	push	{r7, lr}
 8010356:	b082      	sub	sp, #8
 8010358:	af00      	add	r7, sp, #0
 801035a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d101      	bne.n	8010366 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010362:	2301      	movs	r3, #1
 8010364:	e041      	b.n	80103ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801036c:	b2db      	uxtb	r3, r3
 801036e:	2b00      	cmp	r3, #0
 8010370:	d106      	bne.n	8010380 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	2200      	movs	r2, #0
 8010376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801037a:	6878      	ldr	r0, [r7, #4]
 801037c:	f7fc ffe0 	bl	800d340 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	2202      	movs	r2, #2
 8010384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681a      	ldr	r2, [r3, #0]
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	3304      	adds	r3, #4
 8010390:	4619      	mov	r1, r3
 8010392:	4610      	mov	r0, r2
 8010394:	f000 fc3c 	bl	8010c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2201      	movs	r2, #1
 801039c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	2201      	movs	r2, #1
 80103a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	2201      	movs	r2, #1
 80103ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	2201      	movs	r2, #1
 80103b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	2201      	movs	r2, #1
 80103bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	2201      	movs	r2, #1
 80103c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	2201      	movs	r2, #1
 80103cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	2201      	movs	r2, #1
 80103d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	2201      	movs	r2, #1
 80103dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	2201      	movs	r2, #1
 80103e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80103e8:	2300      	movs	r3, #0
}
 80103ea:	4618      	mov	r0, r3
 80103ec:	3708      	adds	r7, #8
 80103ee:	46bd      	mov	sp, r7
 80103f0:	bd80      	pop	{r7, pc}
	...

080103f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80103f4:	b480      	push	{r7}
 80103f6:	b085      	sub	sp, #20
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010402:	b2db      	uxtb	r3, r3
 8010404:	2b01      	cmp	r3, #1
 8010406:	d001      	beq.n	801040c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010408:	2301      	movs	r3, #1
 801040a:	e044      	b.n	8010496 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2202      	movs	r2, #2
 8010410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	68da      	ldr	r2, [r3, #12]
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	f042 0201 	orr.w	r2, r2, #1
 8010422:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	4a1e      	ldr	r2, [pc, #120]	@ (80104a4 <HAL_TIM_Base_Start_IT+0xb0>)
 801042a:	4293      	cmp	r3, r2
 801042c:	d018      	beq.n	8010460 <HAL_TIM_Base_Start_IT+0x6c>
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010436:	d013      	beq.n	8010460 <HAL_TIM_Base_Start_IT+0x6c>
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	4a1a      	ldr	r2, [pc, #104]	@ (80104a8 <HAL_TIM_Base_Start_IT+0xb4>)
 801043e:	4293      	cmp	r3, r2
 8010440:	d00e      	beq.n	8010460 <HAL_TIM_Base_Start_IT+0x6c>
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	4a19      	ldr	r2, [pc, #100]	@ (80104ac <HAL_TIM_Base_Start_IT+0xb8>)
 8010448:	4293      	cmp	r3, r2
 801044a:	d009      	beq.n	8010460 <HAL_TIM_Base_Start_IT+0x6c>
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	4a17      	ldr	r2, [pc, #92]	@ (80104b0 <HAL_TIM_Base_Start_IT+0xbc>)
 8010452:	4293      	cmp	r3, r2
 8010454:	d004      	beq.n	8010460 <HAL_TIM_Base_Start_IT+0x6c>
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	4a16      	ldr	r2, [pc, #88]	@ (80104b4 <HAL_TIM_Base_Start_IT+0xc0>)
 801045c:	4293      	cmp	r3, r2
 801045e:	d111      	bne.n	8010484 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	689b      	ldr	r3, [r3, #8]
 8010466:	f003 0307 	and.w	r3, r3, #7
 801046a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	2b06      	cmp	r3, #6
 8010470:	d010      	beq.n	8010494 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	681a      	ldr	r2, [r3, #0]
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	f042 0201 	orr.w	r2, r2, #1
 8010480:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010482:	e007      	b.n	8010494 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	681a      	ldr	r2, [r3, #0]
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	f042 0201 	orr.w	r2, r2, #1
 8010492:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010494:	2300      	movs	r3, #0
}
 8010496:	4618      	mov	r0, r3
 8010498:	3714      	adds	r7, #20
 801049a:	46bd      	mov	sp, r7
 801049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a0:	4770      	bx	lr
 80104a2:	bf00      	nop
 80104a4:	40010000 	.word	0x40010000
 80104a8:	40000400 	.word	0x40000400
 80104ac:	40000800 	.word	0x40000800
 80104b0:	40000c00 	.word	0x40000c00
 80104b4:	40014000 	.word	0x40014000

080104b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b082      	sub	sp, #8
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d101      	bne.n	80104ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80104c6:	2301      	movs	r3, #1
 80104c8:	e041      	b.n	801054e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80104d0:	b2db      	uxtb	r3, r3
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d106      	bne.n	80104e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	2200      	movs	r2, #0
 80104da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80104de:	6878      	ldr	r0, [r7, #4]
 80104e0:	f000 f839 	bl	8010556 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	2202      	movs	r2, #2
 80104e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	681a      	ldr	r2, [r3, #0]
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	3304      	adds	r3, #4
 80104f4:	4619      	mov	r1, r3
 80104f6:	4610      	mov	r0, r2
 80104f8:	f000 fb8a 	bl	8010c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	2201      	movs	r2, #1
 8010500:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	2201      	movs	r2, #1
 8010508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	2201      	movs	r2, #1
 8010510:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	2201      	movs	r2, #1
 8010518:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	2201      	movs	r2, #1
 8010520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	2201      	movs	r2, #1
 8010528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	2201      	movs	r2, #1
 8010530:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2201      	movs	r2, #1
 8010538:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	2201      	movs	r2, #1
 8010540:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	2201      	movs	r2, #1
 8010548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801054c:	2300      	movs	r3, #0
}
 801054e:	4618      	mov	r0, r3
 8010550:	3708      	adds	r7, #8
 8010552:	46bd      	mov	sp, r7
 8010554:	bd80      	pop	{r7, pc}

08010556 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8010556:	b480      	push	{r7}
 8010558:	b083      	sub	sp, #12
 801055a:	af00      	add	r7, sp, #0
 801055c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801055e:	bf00      	nop
 8010560:	370c      	adds	r7, #12
 8010562:	46bd      	mov	sp, r7
 8010564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010568:	4770      	bx	lr
	...

0801056c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801056c:	b580      	push	{r7, lr}
 801056e:	b084      	sub	sp, #16
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
 8010574:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8010576:	683b      	ldr	r3, [r7, #0]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d109      	bne.n	8010590 <HAL_TIM_PWM_Start+0x24>
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8010582:	b2db      	uxtb	r3, r3
 8010584:	2b01      	cmp	r3, #1
 8010586:	bf14      	ite	ne
 8010588:	2301      	movne	r3, #1
 801058a:	2300      	moveq	r3, #0
 801058c:	b2db      	uxtb	r3, r3
 801058e:	e022      	b.n	80105d6 <HAL_TIM_PWM_Start+0x6a>
 8010590:	683b      	ldr	r3, [r7, #0]
 8010592:	2b04      	cmp	r3, #4
 8010594:	d109      	bne.n	80105aa <HAL_TIM_PWM_Start+0x3e>
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 801059c:	b2db      	uxtb	r3, r3
 801059e:	2b01      	cmp	r3, #1
 80105a0:	bf14      	ite	ne
 80105a2:	2301      	movne	r3, #1
 80105a4:	2300      	moveq	r3, #0
 80105a6:	b2db      	uxtb	r3, r3
 80105a8:	e015      	b.n	80105d6 <HAL_TIM_PWM_Start+0x6a>
 80105aa:	683b      	ldr	r3, [r7, #0]
 80105ac:	2b08      	cmp	r3, #8
 80105ae:	d109      	bne.n	80105c4 <HAL_TIM_PWM_Start+0x58>
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80105b6:	b2db      	uxtb	r3, r3
 80105b8:	2b01      	cmp	r3, #1
 80105ba:	bf14      	ite	ne
 80105bc:	2301      	movne	r3, #1
 80105be:	2300      	moveq	r3, #0
 80105c0:	b2db      	uxtb	r3, r3
 80105c2:	e008      	b.n	80105d6 <HAL_TIM_PWM_Start+0x6a>
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80105ca:	b2db      	uxtb	r3, r3
 80105cc:	2b01      	cmp	r3, #1
 80105ce:	bf14      	ite	ne
 80105d0:	2301      	movne	r3, #1
 80105d2:	2300      	moveq	r3, #0
 80105d4:	b2db      	uxtb	r3, r3
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d001      	beq.n	80105de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80105da:	2301      	movs	r3, #1
 80105dc:	e068      	b.n	80106b0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80105de:	683b      	ldr	r3, [r7, #0]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d104      	bne.n	80105ee <HAL_TIM_PWM_Start+0x82>
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	2202      	movs	r2, #2
 80105e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80105ec:	e013      	b.n	8010616 <HAL_TIM_PWM_Start+0xaa>
 80105ee:	683b      	ldr	r3, [r7, #0]
 80105f0:	2b04      	cmp	r3, #4
 80105f2:	d104      	bne.n	80105fe <HAL_TIM_PWM_Start+0x92>
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	2202      	movs	r2, #2
 80105f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80105fc:	e00b      	b.n	8010616 <HAL_TIM_PWM_Start+0xaa>
 80105fe:	683b      	ldr	r3, [r7, #0]
 8010600:	2b08      	cmp	r3, #8
 8010602:	d104      	bne.n	801060e <HAL_TIM_PWM_Start+0xa2>
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	2202      	movs	r2, #2
 8010608:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801060c:	e003      	b.n	8010616 <HAL_TIM_PWM_Start+0xaa>
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	2202      	movs	r2, #2
 8010612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	2201      	movs	r2, #1
 801061c:	6839      	ldr	r1, [r7, #0]
 801061e:	4618      	mov	r0, r3
 8010620:	f000 fda8 	bl	8011174 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	4a23      	ldr	r2, [pc, #140]	@ (80106b8 <HAL_TIM_PWM_Start+0x14c>)
 801062a:	4293      	cmp	r3, r2
 801062c:	d107      	bne.n	801063e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801063c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	4a1d      	ldr	r2, [pc, #116]	@ (80106b8 <HAL_TIM_PWM_Start+0x14c>)
 8010644:	4293      	cmp	r3, r2
 8010646:	d018      	beq.n	801067a <HAL_TIM_PWM_Start+0x10e>
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010650:	d013      	beq.n	801067a <HAL_TIM_PWM_Start+0x10e>
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	4a19      	ldr	r2, [pc, #100]	@ (80106bc <HAL_TIM_PWM_Start+0x150>)
 8010658:	4293      	cmp	r3, r2
 801065a:	d00e      	beq.n	801067a <HAL_TIM_PWM_Start+0x10e>
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	4a17      	ldr	r2, [pc, #92]	@ (80106c0 <HAL_TIM_PWM_Start+0x154>)
 8010662:	4293      	cmp	r3, r2
 8010664:	d009      	beq.n	801067a <HAL_TIM_PWM_Start+0x10e>
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	4a16      	ldr	r2, [pc, #88]	@ (80106c4 <HAL_TIM_PWM_Start+0x158>)
 801066c:	4293      	cmp	r3, r2
 801066e:	d004      	beq.n	801067a <HAL_TIM_PWM_Start+0x10e>
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	4a14      	ldr	r2, [pc, #80]	@ (80106c8 <HAL_TIM_PWM_Start+0x15c>)
 8010676:	4293      	cmp	r3, r2
 8010678:	d111      	bne.n	801069e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	689b      	ldr	r3, [r3, #8]
 8010680:	f003 0307 	and.w	r3, r3, #7
 8010684:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	2b06      	cmp	r3, #6
 801068a:	d010      	beq.n	80106ae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	681a      	ldr	r2, [r3, #0]
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	f042 0201 	orr.w	r2, r2, #1
 801069a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801069c:	e007      	b.n	80106ae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	681a      	ldr	r2, [r3, #0]
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	f042 0201 	orr.w	r2, r2, #1
 80106ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80106ae:	2300      	movs	r3, #0
}
 80106b0:	4618      	mov	r0, r3
 80106b2:	3710      	adds	r7, #16
 80106b4:	46bd      	mov	sp, r7
 80106b6:	bd80      	pop	{r7, pc}
 80106b8:	40010000 	.word	0x40010000
 80106bc:	40000400 	.word	0x40000400
 80106c0:	40000800 	.word	0x40000800
 80106c4:	40000c00 	.word	0x40000c00
 80106c8:	40014000 	.word	0x40014000

080106cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b084      	sub	sp, #16
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	68db      	ldr	r3, [r3, #12]
 80106da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	691b      	ldr	r3, [r3, #16]
 80106e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80106e4:	68bb      	ldr	r3, [r7, #8]
 80106e6:	f003 0302 	and.w	r3, r3, #2
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d020      	beq.n	8010730 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	f003 0302 	and.w	r3, r3, #2
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d01b      	beq.n	8010730 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	f06f 0202 	mvn.w	r2, #2
 8010700:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	2201      	movs	r2, #1
 8010706:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	699b      	ldr	r3, [r3, #24]
 801070e:	f003 0303 	and.w	r3, r3, #3
 8010712:	2b00      	cmp	r3, #0
 8010714:	d003      	beq.n	801071e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010716:	6878      	ldr	r0, [r7, #4]
 8010718:	f000 fa5b 	bl	8010bd2 <HAL_TIM_IC_CaptureCallback>
 801071c:	e005      	b.n	801072a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801071e:	6878      	ldr	r0, [r7, #4]
 8010720:	f000 fa4d 	bl	8010bbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010724:	6878      	ldr	r0, [r7, #4]
 8010726:	f000 fa5e 	bl	8010be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	2200      	movs	r2, #0
 801072e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8010730:	68bb      	ldr	r3, [r7, #8]
 8010732:	f003 0304 	and.w	r3, r3, #4
 8010736:	2b00      	cmp	r3, #0
 8010738:	d020      	beq.n	801077c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	f003 0304 	and.w	r3, r3, #4
 8010740:	2b00      	cmp	r3, #0
 8010742:	d01b      	beq.n	801077c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	f06f 0204 	mvn.w	r2, #4
 801074c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	2202      	movs	r2, #2
 8010752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	699b      	ldr	r3, [r3, #24]
 801075a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801075e:	2b00      	cmp	r3, #0
 8010760:	d003      	beq.n	801076a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010762:	6878      	ldr	r0, [r7, #4]
 8010764:	f000 fa35 	bl	8010bd2 <HAL_TIM_IC_CaptureCallback>
 8010768:	e005      	b.n	8010776 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801076a:	6878      	ldr	r0, [r7, #4]
 801076c:	f000 fa27 	bl	8010bbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010770:	6878      	ldr	r0, [r7, #4]
 8010772:	f000 fa38 	bl	8010be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	2200      	movs	r2, #0
 801077a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 801077c:	68bb      	ldr	r3, [r7, #8]
 801077e:	f003 0308 	and.w	r3, r3, #8
 8010782:	2b00      	cmp	r3, #0
 8010784:	d020      	beq.n	80107c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	f003 0308 	and.w	r3, r3, #8
 801078c:	2b00      	cmp	r3, #0
 801078e:	d01b      	beq.n	80107c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	f06f 0208 	mvn.w	r2, #8
 8010798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	2204      	movs	r2, #4
 801079e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	69db      	ldr	r3, [r3, #28]
 80107a6:	f003 0303 	and.w	r3, r3, #3
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d003      	beq.n	80107b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80107ae:	6878      	ldr	r0, [r7, #4]
 80107b0:	f000 fa0f 	bl	8010bd2 <HAL_TIM_IC_CaptureCallback>
 80107b4:	e005      	b.n	80107c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80107b6:	6878      	ldr	r0, [r7, #4]
 80107b8:	f000 fa01 	bl	8010bbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80107bc:	6878      	ldr	r0, [r7, #4]
 80107be:	f000 fa12 	bl	8010be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	2200      	movs	r2, #0
 80107c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80107c8:	68bb      	ldr	r3, [r7, #8]
 80107ca:	f003 0310 	and.w	r3, r3, #16
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d020      	beq.n	8010814 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	f003 0310 	and.w	r3, r3, #16
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d01b      	beq.n	8010814 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	f06f 0210 	mvn.w	r2, #16
 80107e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	2208      	movs	r2, #8
 80107ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	69db      	ldr	r3, [r3, #28]
 80107f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d003      	beq.n	8010802 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80107fa:	6878      	ldr	r0, [r7, #4]
 80107fc:	f000 f9e9 	bl	8010bd2 <HAL_TIM_IC_CaptureCallback>
 8010800:	e005      	b.n	801080e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010802:	6878      	ldr	r0, [r7, #4]
 8010804:	f000 f9db 	bl	8010bbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010808:	6878      	ldr	r0, [r7, #4]
 801080a:	f000 f9ec 	bl	8010be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	2200      	movs	r2, #0
 8010812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8010814:	68bb      	ldr	r3, [r7, #8]
 8010816:	f003 0301 	and.w	r3, r3, #1
 801081a:	2b00      	cmp	r3, #0
 801081c:	d00c      	beq.n	8010838 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	f003 0301 	and.w	r3, r3, #1
 8010824:	2b00      	cmp	r3, #0
 8010826:	d007      	beq.n	8010838 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	f06f 0201 	mvn.w	r2, #1
 8010830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010832:	6878      	ldr	r0, [r7, #4]
 8010834:	f7fb ff48 	bl	800c6c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8010838:	68bb      	ldr	r3, [r7, #8]
 801083a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801083e:	2b00      	cmp	r3, #0
 8010840:	d00c      	beq.n	801085c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010848:	2b00      	cmp	r3, #0
 801084a:	d007      	beq.n	801085c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8010854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010856:	6878      	ldr	r0, [r7, #4]
 8010858:	f000 fd2a 	bl	80112b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 801085c:	68bb      	ldr	r3, [r7, #8]
 801085e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010862:	2b00      	cmp	r3, #0
 8010864:	d00c      	beq.n	8010880 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801086c:	2b00      	cmp	r3, #0
 801086e:	d007      	beq.n	8010880 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8010878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801087a:	6878      	ldr	r0, [r7, #4]
 801087c:	f000 f9bd 	bl	8010bfa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8010880:	68bb      	ldr	r3, [r7, #8]
 8010882:	f003 0320 	and.w	r3, r3, #32
 8010886:	2b00      	cmp	r3, #0
 8010888:	d00c      	beq.n	80108a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	f003 0320 	and.w	r3, r3, #32
 8010890:	2b00      	cmp	r3, #0
 8010892:	d007      	beq.n	80108a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	f06f 0220 	mvn.w	r2, #32
 801089c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801089e:	6878      	ldr	r0, [r7, #4]
 80108a0:	f000 fcfc 	bl	801129c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80108a4:	bf00      	nop
 80108a6:	3710      	adds	r7, #16
 80108a8:	46bd      	mov	sp, r7
 80108aa:	bd80      	pop	{r7, pc}

080108ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80108ac:	b580      	push	{r7, lr}
 80108ae:	b086      	sub	sp, #24
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	60f8      	str	r0, [r7, #12]
 80108b4:	60b9      	str	r1, [r7, #8]
 80108b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80108b8:	2300      	movs	r3, #0
 80108ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80108c2:	2b01      	cmp	r3, #1
 80108c4:	d101      	bne.n	80108ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80108c6:	2302      	movs	r3, #2
 80108c8:	e0ae      	b.n	8010a28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	2201      	movs	r2, #1
 80108ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	2b0c      	cmp	r3, #12
 80108d6:	f200 809f 	bhi.w	8010a18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80108da:	a201      	add	r2, pc, #4	@ (adr r2, 80108e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80108dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108e0:	08010915 	.word	0x08010915
 80108e4:	08010a19 	.word	0x08010a19
 80108e8:	08010a19 	.word	0x08010a19
 80108ec:	08010a19 	.word	0x08010a19
 80108f0:	08010955 	.word	0x08010955
 80108f4:	08010a19 	.word	0x08010a19
 80108f8:	08010a19 	.word	0x08010a19
 80108fc:	08010a19 	.word	0x08010a19
 8010900:	08010997 	.word	0x08010997
 8010904:	08010a19 	.word	0x08010a19
 8010908:	08010a19 	.word	0x08010a19
 801090c:	08010a19 	.word	0x08010a19
 8010910:	080109d7 	.word	0x080109d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	68b9      	ldr	r1, [r7, #8]
 801091a:	4618      	mov	r0, r3
 801091c:	f000 fa04 	bl	8010d28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	699a      	ldr	r2, [r3, #24]
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	f042 0208 	orr.w	r2, r2, #8
 801092e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	699a      	ldr	r2, [r3, #24]
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	f022 0204 	bic.w	r2, r2, #4
 801093e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	6999      	ldr	r1, [r3, #24]
 8010946:	68bb      	ldr	r3, [r7, #8]
 8010948:	691a      	ldr	r2, [r3, #16]
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	430a      	orrs	r2, r1
 8010950:	619a      	str	r2, [r3, #24]
      break;
 8010952:	e064      	b.n	8010a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	68b9      	ldr	r1, [r7, #8]
 801095a:	4618      	mov	r0, r3
 801095c:	f000 fa4a 	bl	8010df4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	699a      	ldr	r2, [r3, #24]
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801096e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	699a      	ldr	r2, [r3, #24]
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801097e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	6999      	ldr	r1, [r3, #24]
 8010986:	68bb      	ldr	r3, [r7, #8]
 8010988:	691b      	ldr	r3, [r3, #16]
 801098a:	021a      	lsls	r2, r3, #8
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	430a      	orrs	r2, r1
 8010992:	619a      	str	r2, [r3, #24]
      break;
 8010994:	e043      	b.n	8010a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	68b9      	ldr	r1, [r7, #8]
 801099c:	4618      	mov	r0, r3
 801099e:	f000 fa95 	bl	8010ecc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	69da      	ldr	r2, [r3, #28]
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	f042 0208 	orr.w	r2, r2, #8
 80109b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	69da      	ldr	r2, [r3, #28]
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	f022 0204 	bic.w	r2, r2, #4
 80109c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	69d9      	ldr	r1, [r3, #28]
 80109c8:	68bb      	ldr	r3, [r7, #8]
 80109ca:	691a      	ldr	r2, [r3, #16]
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	430a      	orrs	r2, r1
 80109d2:	61da      	str	r2, [r3, #28]
      break;
 80109d4:	e023      	b.n	8010a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	68b9      	ldr	r1, [r7, #8]
 80109dc:	4618      	mov	r0, r3
 80109de:	f000 fadf 	bl	8010fa0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	69da      	ldr	r2, [r3, #28]
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80109f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	69da      	ldr	r2, [r3, #28]
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010a00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	69d9      	ldr	r1, [r3, #28]
 8010a08:	68bb      	ldr	r3, [r7, #8]
 8010a0a:	691b      	ldr	r3, [r3, #16]
 8010a0c:	021a      	lsls	r2, r3, #8
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	430a      	orrs	r2, r1
 8010a14:	61da      	str	r2, [r3, #28]
      break;
 8010a16:	e002      	b.n	8010a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8010a18:	2301      	movs	r3, #1
 8010a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8010a1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	2200      	movs	r2, #0
 8010a22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a28:	4618      	mov	r0, r3
 8010a2a:	3718      	adds	r7, #24
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	bd80      	pop	{r7, pc}

08010a30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b084      	sub	sp, #16
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
 8010a38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010a44:	2b01      	cmp	r3, #1
 8010a46:	d101      	bne.n	8010a4c <HAL_TIM_ConfigClockSource+0x1c>
 8010a48:	2302      	movs	r3, #2
 8010a4a:	e0b4      	b.n	8010bb6 <HAL_TIM_ConfigClockSource+0x186>
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	2201      	movs	r2, #1
 8010a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	2202      	movs	r2, #2
 8010a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	689b      	ldr	r3, [r3, #8]
 8010a62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010a64:	68bb      	ldr	r3, [r7, #8]
 8010a66:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8010a6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010a6c:	68bb      	ldr	r3, [r7, #8]
 8010a6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010a72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	68ba      	ldr	r2, [r7, #8]
 8010a7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010a7c:	683b      	ldr	r3, [r7, #0]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010a84:	d03e      	beq.n	8010b04 <HAL_TIM_ConfigClockSource+0xd4>
 8010a86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010a8a:	f200 8087 	bhi.w	8010b9c <HAL_TIM_ConfigClockSource+0x16c>
 8010a8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010a92:	f000 8086 	beq.w	8010ba2 <HAL_TIM_ConfigClockSource+0x172>
 8010a96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010a9a:	d87f      	bhi.n	8010b9c <HAL_TIM_ConfigClockSource+0x16c>
 8010a9c:	2b70      	cmp	r3, #112	@ 0x70
 8010a9e:	d01a      	beq.n	8010ad6 <HAL_TIM_ConfigClockSource+0xa6>
 8010aa0:	2b70      	cmp	r3, #112	@ 0x70
 8010aa2:	d87b      	bhi.n	8010b9c <HAL_TIM_ConfigClockSource+0x16c>
 8010aa4:	2b60      	cmp	r3, #96	@ 0x60
 8010aa6:	d050      	beq.n	8010b4a <HAL_TIM_ConfigClockSource+0x11a>
 8010aa8:	2b60      	cmp	r3, #96	@ 0x60
 8010aaa:	d877      	bhi.n	8010b9c <HAL_TIM_ConfigClockSource+0x16c>
 8010aac:	2b50      	cmp	r3, #80	@ 0x50
 8010aae:	d03c      	beq.n	8010b2a <HAL_TIM_ConfigClockSource+0xfa>
 8010ab0:	2b50      	cmp	r3, #80	@ 0x50
 8010ab2:	d873      	bhi.n	8010b9c <HAL_TIM_ConfigClockSource+0x16c>
 8010ab4:	2b40      	cmp	r3, #64	@ 0x40
 8010ab6:	d058      	beq.n	8010b6a <HAL_TIM_ConfigClockSource+0x13a>
 8010ab8:	2b40      	cmp	r3, #64	@ 0x40
 8010aba:	d86f      	bhi.n	8010b9c <HAL_TIM_ConfigClockSource+0x16c>
 8010abc:	2b30      	cmp	r3, #48	@ 0x30
 8010abe:	d064      	beq.n	8010b8a <HAL_TIM_ConfigClockSource+0x15a>
 8010ac0:	2b30      	cmp	r3, #48	@ 0x30
 8010ac2:	d86b      	bhi.n	8010b9c <HAL_TIM_ConfigClockSource+0x16c>
 8010ac4:	2b20      	cmp	r3, #32
 8010ac6:	d060      	beq.n	8010b8a <HAL_TIM_ConfigClockSource+0x15a>
 8010ac8:	2b20      	cmp	r3, #32
 8010aca:	d867      	bhi.n	8010b9c <HAL_TIM_ConfigClockSource+0x16c>
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d05c      	beq.n	8010b8a <HAL_TIM_ConfigClockSource+0x15a>
 8010ad0:	2b10      	cmp	r3, #16
 8010ad2:	d05a      	beq.n	8010b8a <HAL_TIM_ConfigClockSource+0x15a>
 8010ad4:	e062      	b.n	8010b9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010ada:	683b      	ldr	r3, [r7, #0]
 8010adc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8010ade:	683b      	ldr	r3, [r7, #0]
 8010ae0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8010ae2:	683b      	ldr	r3, [r7, #0]
 8010ae4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010ae6:	f000 fb25 	bl	8011134 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	689b      	ldr	r3, [r3, #8]
 8010af0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010af2:	68bb      	ldr	r3, [r7, #8]
 8010af4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8010af8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	68ba      	ldr	r2, [r7, #8]
 8010b00:	609a      	str	r2, [r3, #8]
      break;
 8010b02:	e04f      	b.n	8010ba4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010b08:	683b      	ldr	r3, [r7, #0]
 8010b0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8010b0c:	683b      	ldr	r3, [r7, #0]
 8010b0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8010b10:	683b      	ldr	r3, [r7, #0]
 8010b12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010b14:	f000 fb0e 	bl	8011134 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	689a      	ldr	r2, [r3, #8]
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010b26:	609a      	str	r2, [r3, #8]
      break;
 8010b28:	e03c      	b.n	8010ba4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010b2e:	683b      	ldr	r3, [r7, #0]
 8010b30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010b32:	683b      	ldr	r3, [r7, #0]
 8010b34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010b36:	461a      	mov	r2, r3
 8010b38:	f000 fa82 	bl	8011040 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	2150      	movs	r1, #80	@ 0x50
 8010b42:	4618      	mov	r0, r3
 8010b44:	f000 fadb 	bl	80110fe <TIM_ITRx_SetConfig>
      break;
 8010b48:	e02c      	b.n	8010ba4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010b4e:	683b      	ldr	r3, [r7, #0]
 8010b50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010b52:	683b      	ldr	r3, [r7, #0]
 8010b54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010b56:	461a      	mov	r2, r3
 8010b58:	f000 faa1 	bl	801109e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	2160      	movs	r1, #96	@ 0x60
 8010b62:	4618      	mov	r0, r3
 8010b64:	f000 facb 	bl	80110fe <TIM_ITRx_SetConfig>
      break;
 8010b68:	e01c      	b.n	8010ba4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010b6e:	683b      	ldr	r3, [r7, #0]
 8010b70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010b72:	683b      	ldr	r3, [r7, #0]
 8010b74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010b76:	461a      	mov	r2, r3
 8010b78:	f000 fa62 	bl	8011040 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	2140      	movs	r1, #64	@ 0x40
 8010b82:	4618      	mov	r0, r3
 8010b84:	f000 fabb 	bl	80110fe <TIM_ITRx_SetConfig>
      break;
 8010b88:	e00c      	b.n	8010ba4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	681a      	ldr	r2, [r3, #0]
 8010b8e:	683b      	ldr	r3, [r7, #0]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	4619      	mov	r1, r3
 8010b94:	4610      	mov	r0, r2
 8010b96:	f000 fab2 	bl	80110fe <TIM_ITRx_SetConfig>
      break;
 8010b9a:	e003      	b.n	8010ba4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8010b9c:	2301      	movs	r3, #1
 8010b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8010ba0:	e000      	b.n	8010ba4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8010ba2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	2201      	movs	r2, #1
 8010ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	2200      	movs	r2, #0
 8010bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	3710      	adds	r7, #16
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	bd80      	pop	{r7, pc}

08010bbe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010bbe:	b480      	push	{r7}
 8010bc0:	b083      	sub	sp, #12
 8010bc2:	af00      	add	r7, sp, #0
 8010bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010bc6:	bf00      	nop
 8010bc8:	370c      	adds	r7, #12
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd0:	4770      	bx	lr

08010bd2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010bd2:	b480      	push	{r7}
 8010bd4:	b083      	sub	sp, #12
 8010bd6:	af00      	add	r7, sp, #0
 8010bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010bda:	bf00      	nop
 8010bdc:	370c      	adds	r7, #12
 8010bde:	46bd      	mov	sp, r7
 8010be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be4:	4770      	bx	lr

08010be6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010be6:	b480      	push	{r7}
 8010be8:	b083      	sub	sp, #12
 8010bea:	af00      	add	r7, sp, #0
 8010bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010bee:	bf00      	nop
 8010bf0:	370c      	adds	r7, #12
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf8:	4770      	bx	lr

08010bfa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010bfa:	b480      	push	{r7}
 8010bfc:	b083      	sub	sp, #12
 8010bfe:	af00      	add	r7, sp, #0
 8010c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010c02:	bf00      	nop
 8010c04:	370c      	adds	r7, #12
 8010c06:	46bd      	mov	sp, r7
 8010c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c0c:	4770      	bx	lr
	...

08010c10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010c10:	b480      	push	{r7}
 8010c12:	b085      	sub	sp, #20
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
 8010c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	4a3a      	ldr	r2, [pc, #232]	@ (8010d0c <TIM_Base_SetConfig+0xfc>)
 8010c24:	4293      	cmp	r3, r2
 8010c26:	d00f      	beq.n	8010c48 <TIM_Base_SetConfig+0x38>
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010c2e:	d00b      	beq.n	8010c48 <TIM_Base_SetConfig+0x38>
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	4a37      	ldr	r2, [pc, #220]	@ (8010d10 <TIM_Base_SetConfig+0x100>)
 8010c34:	4293      	cmp	r3, r2
 8010c36:	d007      	beq.n	8010c48 <TIM_Base_SetConfig+0x38>
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	4a36      	ldr	r2, [pc, #216]	@ (8010d14 <TIM_Base_SetConfig+0x104>)
 8010c3c:	4293      	cmp	r3, r2
 8010c3e:	d003      	beq.n	8010c48 <TIM_Base_SetConfig+0x38>
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	4a35      	ldr	r2, [pc, #212]	@ (8010d18 <TIM_Base_SetConfig+0x108>)
 8010c44:	4293      	cmp	r3, r2
 8010c46:	d108      	bne.n	8010c5a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010c4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010c50:	683b      	ldr	r3, [r7, #0]
 8010c52:	685b      	ldr	r3, [r3, #4]
 8010c54:	68fa      	ldr	r2, [r7, #12]
 8010c56:	4313      	orrs	r3, r2
 8010c58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	4a2b      	ldr	r2, [pc, #172]	@ (8010d0c <TIM_Base_SetConfig+0xfc>)
 8010c5e:	4293      	cmp	r3, r2
 8010c60:	d01b      	beq.n	8010c9a <TIM_Base_SetConfig+0x8a>
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010c68:	d017      	beq.n	8010c9a <TIM_Base_SetConfig+0x8a>
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	4a28      	ldr	r2, [pc, #160]	@ (8010d10 <TIM_Base_SetConfig+0x100>)
 8010c6e:	4293      	cmp	r3, r2
 8010c70:	d013      	beq.n	8010c9a <TIM_Base_SetConfig+0x8a>
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	4a27      	ldr	r2, [pc, #156]	@ (8010d14 <TIM_Base_SetConfig+0x104>)
 8010c76:	4293      	cmp	r3, r2
 8010c78:	d00f      	beq.n	8010c9a <TIM_Base_SetConfig+0x8a>
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	4a26      	ldr	r2, [pc, #152]	@ (8010d18 <TIM_Base_SetConfig+0x108>)
 8010c7e:	4293      	cmp	r3, r2
 8010c80:	d00b      	beq.n	8010c9a <TIM_Base_SetConfig+0x8a>
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	4a25      	ldr	r2, [pc, #148]	@ (8010d1c <TIM_Base_SetConfig+0x10c>)
 8010c86:	4293      	cmp	r3, r2
 8010c88:	d007      	beq.n	8010c9a <TIM_Base_SetConfig+0x8a>
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	4a24      	ldr	r2, [pc, #144]	@ (8010d20 <TIM_Base_SetConfig+0x110>)
 8010c8e:	4293      	cmp	r3, r2
 8010c90:	d003      	beq.n	8010c9a <TIM_Base_SetConfig+0x8a>
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	4a23      	ldr	r2, [pc, #140]	@ (8010d24 <TIM_Base_SetConfig+0x114>)
 8010c96:	4293      	cmp	r3, r2
 8010c98:	d108      	bne.n	8010cac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010ca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010ca2:	683b      	ldr	r3, [r7, #0]
 8010ca4:	68db      	ldr	r3, [r3, #12]
 8010ca6:	68fa      	ldr	r2, [r7, #12]
 8010ca8:	4313      	orrs	r3, r2
 8010caa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	695b      	ldr	r3, [r3, #20]
 8010cb6:	4313      	orrs	r3, r2
 8010cb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	68fa      	ldr	r2, [r7, #12]
 8010cbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	689a      	ldr	r2, [r3, #8]
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010cc8:	683b      	ldr	r3, [r7, #0]
 8010cca:	681a      	ldr	r2, [r3, #0]
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	4a0e      	ldr	r2, [pc, #56]	@ (8010d0c <TIM_Base_SetConfig+0xfc>)
 8010cd4:	4293      	cmp	r3, r2
 8010cd6:	d103      	bne.n	8010ce0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010cd8:	683b      	ldr	r3, [r7, #0]
 8010cda:	691a      	ldr	r2, [r3, #16]
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	2201      	movs	r2, #1
 8010ce4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	691b      	ldr	r3, [r3, #16]
 8010cea:	f003 0301 	and.w	r3, r3, #1
 8010cee:	2b01      	cmp	r3, #1
 8010cf0:	d105      	bne.n	8010cfe <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	691b      	ldr	r3, [r3, #16]
 8010cf6:	f023 0201 	bic.w	r2, r3, #1
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	611a      	str	r2, [r3, #16]
  }
}
 8010cfe:	bf00      	nop
 8010d00:	3714      	adds	r7, #20
 8010d02:	46bd      	mov	sp, r7
 8010d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d08:	4770      	bx	lr
 8010d0a:	bf00      	nop
 8010d0c:	40010000 	.word	0x40010000
 8010d10:	40000400 	.word	0x40000400
 8010d14:	40000800 	.word	0x40000800
 8010d18:	40000c00 	.word	0x40000c00
 8010d1c:	40014000 	.word	0x40014000
 8010d20:	40014400 	.word	0x40014400
 8010d24:	40014800 	.word	0x40014800

08010d28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010d28:	b480      	push	{r7}
 8010d2a:	b087      	sub	sp, #28
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
 8010d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	6a1b      	ldr	r3, [r3, #32]
 8010d36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	6a1b      	ldr	r3, [r3, #32]
 8010d3c:	f023 0201 	bic.w	r2, r3, #1
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	685b      	ldr	r3, [r3, #4]
 8010d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	699b      	ldr	r3, [r3, #24]
 8010d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	f023 0303 	bic.w	r3, r3, #3
 8010d5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010d60:	683b      	ldr	r3, [r7, #0]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	68fa      	ldr	r2, [r7, #12]
 8010d66:	4313      	orrs	r3, r2
 8010d68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010d6a:	697b      	ldr	r3, [r7, #20]
 8010d6c:	f023 0302 	bic.w	r3, r3, #2
 8010d70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010d72:	683b      	ldr	r3, [r7, #0]
 8010d74:	689b      	ldr	r3, [r3, #8]
 8010d76:	697a      	ldr	r2, [r7, #20]
 8010d78:	4313      	orrs	r3, r2
 8010d7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	4a1c      	ldr	r2, [pc, #112]	@ (8010df0 <TIM_OC1_SetConfig+0xc8>)
 8010d80:	4293      	cmp	r3, r2
 8010d82:	d10c      	bne.n	8010d9e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010d84:	697b      	ldr	r3, [r7, #20]
 8010d86:	f023 0308 	bic.w	r3, r3, #8
 8010d8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010d8c:	683b      	ldr	r3, [r7, #0]
 8010d8e:	68db      	ldr	r3, [r3, #12]
 8010d90:	697a      	ldr	r2, [r7, #20]
 8010d92:	4313      	orrs	r3, r2
 8010d94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010d96:	697b      	ldr	r3, [r7, #20]
 8010d98:	f023 0304 	bic.w	r3, r3, #4
 8010d9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	4a13      	ldr	r2, [pc, #76]	@ (8010df0 <TIM_OC1_SetConfig+0xc8>)
 8010da2:	4293      	cmp	r3, r2
 8010da4:	d111      	bne.n	8010dca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010da6:	693b      	ldr	r3, [r7, #16]
 8010da8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010dac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010dae:	693b      	ldr	r3, [r7, #16]
 8010db0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010db4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010db6:	683b      	ldr	r3, [r7, #0]
 8010db8:	695b      	ldr	r3, [r3, #20]
 8010dba:	693a      	ldr	r2, [r7, #16]
 8010dbc:	4313      	orrs	r3, r2
 8010dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010dc0:	683b      	ldr	r3, [r7, #0]
 8010dc2:	699b      	ldr	r3, [r3, #24]
 8010dc4:	693a      	ldr	r2, [r7, #16]
 8010dc6:	4313      	orrs	r3, r2
 8010dc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	693a      	ldr	r2, [r7, #16]
 8010dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	68fa      	ldr	r2, [r7, #12]
 8010dd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010dd6:	683b      	ldr	r3, [r7, #0]
 8010dd8:	685a      	ldr	r2, [r3, #4]
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	697a      	ldr	r2, [r7, #20]
 8010de2:	621a      	str	r2, [r3, #32]
}
 8010de4:	bf00      	nop
 8010de6:	371c      	adds	r7, #28
 8010de8:	46bd      	mov	sp, r7
 8010dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dee:	4770      	bx	lr
 8010df0:	40010000 	.word	0x40010000

08010df4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010df4:	b480      	push	{r7}
 8010df6:	b087      	sub	sp, #28
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
 8010dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	6a1b      	ldr	r3, [r3, #32]
 8010e02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	6a1b      	ldr	r3, [r3, #32]
 8010e08:	f023 0210 	bic.w	r2, r3, #16
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	685b      	ldr	r3, [r3, #4]
 8010e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	699b      	ldr	r3, [r3, #24]
 8010e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010e2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010e2c:	683b      	ldr	r3, [r7, #0]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	021b      	lsls	r3, r3, #8
 8010e32:	68fa      	ldr	r2, [r7, #12]
 8010e34:	4313      	orrs	r3, r2
 8010e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010e38:	697b      	ldr	r3, [r7, #20]
 8010e3a:	f023 0320 	bic.w	r3, r3, #32
 8010e3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010e40:	683b      	ldr	r3, [r7, #0]
 8010e42:	689b      	ldr	r3, [r3, #8]
 8010e44:	011b      	lsls	r3, r3, #4
 8010e46:	697a      	ldr	r2, [r7, #20]
 8010e48:	4313      	orrs	r3, r2
 8010e4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	4a1e      	ldr	r2, [pc, #120]	@ (8010ec8 <TIM_OC2_SetConfig+0xd4>)
 8010e50:	4293      	cmp	r3, r2
 8010e52:	d10d      	bne.n	8010e70 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010e54:	697b      	ldr	r3, [r7, #20]
 8010e56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010e5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010e5c:	683b      	ldr	r3, [r7, #0]
 8010e5e:	68db      	ldr	r3, [r3, #12]
 8010e60:	011b      	lsls	r3, r3, #4
 8010e62:	697a      	ldr	r2, [r7, #20]
 8010e64:	4313      	orrs	r3, r2
 8010e66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010e68:	697b      	ldr	r3, [r7, #20]
 8010e6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010e6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	4a15      	ldr	r2, [pc, #84]	@ (8010ec8 <TIM_OC2_SetConfig+0xd4>)
 8010e74:	4293      	cmp	r3, r2
 8010e76:	d113      	bne.n	8010ea0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010e78:	693b      	ldr	r3, [r7, #16]
 8010e7a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010e7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010e80:	693b      	ldr	r3, [r7, #16]
 8010e82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010e86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010e88:	683b      	ldr	r3, [r7, #0]
 8010e8a:	695b      	ldr	r3, [r3, #20]
 8010e8c:	009b      	lsls	r3, r3, #2
 8010e8e:	693a      	ldr	r2, [r7, #16]
 8010e90:	4313      	orrs	r3, r2
 8010e92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010e94:	683b      	ldr	r3, [r7, #0]
 8010e96:	699b      	ldr	r3, [r3, #24]
 8010e98:	009b      	lsls	r3, r3, #2
 8010e9a:	693a      	ldr	r2, [r7, #16]
 8010e9c:	4313      	orrs	r3, r2
 8010e9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	693a      	ldr	r2, [r7, #16]
 8010ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	68fa      	ldr	r2, [r7, #12]
 8010eaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010eac:	683b      	ldr	r3, [r7, #0]
 8010eae:	685a      	ldr	r2, [r3, #4]
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	697a      	ldr	r2, [r7, #20]
 8010eb8:	621a      	str	r2, [r3, #32]
}
 8010eba:	bf00      	nop
 8010ebc:	371c      	adds	r7, #28
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec4:	4770      	bx	lr
 8010ec6:	bf00      	nop
 8010ec8:	40010000 	.word	0x40010000

08010ecc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010ecc:	b480      	push	{r7}
 8010ece:	b087      	sub	sp, #28
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
 8010ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	6a1b      	ldr	r3, [r3, #32]
 8010eda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	6a1b      	ldr	r3, [r3, #32]
 8010ee0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	685b      	ldr	r3, [r3, #4]
 8010eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	69db      	ldr	r3, [r3, #28]
 8010ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	f023 0303 	bic.w	r3, r3, #3
 8010f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010f04:	683b      	ldr	r3, [r7, #0]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	68fa      	ldr	r2, [r7, #12]
 8010f0a:	4313      	orrs	r3, r2
 8010f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010f0e:	697b      	ldr	r3, [r7, #20]
 8010f10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010f14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010f16:	683b      	ldr	r3, [r7, #0]
 8010f18:	689b      	ldr	r3, [r3, #8]
 8010f1a:	021b      	lsls	r3, r3, #8
 8010f1c:	697a      	ldr	r2, [r7, #20]
 8010f1e:	4313      	orrs	r3, r2
 8010f20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	4a1d      	ldr	r2, [pc, #116]	@ (8010f9c <TIM_OC3_SetConfig+0xd0>)
 8010f26:	4293      	cmp	r3, r2
 8010f28:	d10d      	bne.n	8010f46 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010f2a:	697b      	ldr	r3, [r7, #20]
 8010f2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010f30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010f32:	683b      	ldr	r3, [r7, #0]
 8010f34:	68db      	ldr	r3, [r3, #12]
 8010f36:	021b      	lsls	r3, r3, #8
 8010f38:	697a      	ldr	r2, [r7, #20]
 8010f3a:	4313      	orrs	r3, r2
 8010f3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010f3e:	697b      	ldr	r3, [r7, #20]
 8010f40:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010f44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	4a14      	ldr	r2, [pc, #80]	@ (8010f9c <TIM_OC3_SetConfig+0xd0>)
 8010f4a:	4293      	cmp	r3, r2
 8010f4c:	d113      	bne.n	8010f76 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010f4e:	693b      	ldr	r3, [r7, #16]
 8010f50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010f54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010f56:	693b      	ldr	r3, [r7, #16]
 8010f58:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010f5e:	683b      	ldr	r3, [r7, #0]
 8010f60:	695b      	ldr	r3, [r3, #20]
 8010f62:	011b      	lsls	r3, r3, #4
 8010f64:	693a      	ldr	r2, [r7, #16]
 8010f66:	4313      	orrs	r3, r2
 8010f68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010f6a:	683b      	ldr	r3, [r7, #0]
 8010f6c:	699b      	ldr	r3, [r3, #24]
 8010f6e:	011b      	lsls	r3, r3, #4
 8010f70:	693a      	ldr	r2, [r7, #16]
 8010f72:	4313      	orrs	r3, r2
 8010f74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	693a      	ldr	r2, [r7, #16]
 8010f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	68fa      	ldr	r2, [r7, #12]
 8010f80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010f82:	683b      	ldr	r3, [r7, #0]
 8010f84:	685a      	ldr	r2, [r3, #4]
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	697a      	ldr	r2, [r7, #20]
 8010f8e:	621a      	str	r2, [r3, #32]
}
 8010f90:	bf00      	nop
 8010f92:	371c      	adds	r7, #28
 8010f94:	46bd      	mov	sp, r7
 8010f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9a:	4770      	bx	lr
 8010f9c:	40010000 	.word	0x40010000

08010fa0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010fa0:	b480      	push	{r7}
 8010fa2:	b087      	sub	sp, #28
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
 8010fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	6a1b      	ldr	r3, [r3, #32]
 8010fae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	6a1b      	ldr	r3, [r3, #32]
 8010fb4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	685b      	ldr	r3, [r3, #4]
 8010fc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	69db      	ldr	r3, [r3, #28]
 8010fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010fd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010fd8:	683b      	ldr	r3, [r7, #0]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	021b      	lsls	r3, r3, #8
 8010fde:	68fa      	ldr	r2, [r7, #12]
 8010fe0:	4313      	orrs	r3, r2
 8010fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010fe4:	693b      	ldr	r3, [r7, #16]
 8010fe6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010fea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010fec:	683b      	ldr	r3, [r7, #0]
 8010fee:	689b      	ldr	r3, [r3, #8]
 8010ff0:	031b      	lsls	r3, r3, #12
 8010ff2:	693a      	ldr	r2, [r7, #16]
 8010ff4:	4313      	orrs	r3, r2
 8010ff6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	4a10      	ldr	r2, [pc, #64]	@ (801103c <TIM_OC4_SetConfig+0x9c>)
 8010ffc:	4293      	cmp	r3, r2
 8010ffe:	d109      	bne.n	8011014 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011000:	697b      	ldr	r3, [r7, #20]
 8011002:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011006:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011008:	683b      	ldr	r3, [r7, #0]
 801100a:	695b      	ldr	r3, [r3, #20]
 801100c:	019b      	lsls	r3, r3, #6
 801100e:	697a      	ldr	r2, [r7, #20]
 8011010:	4313      	orrs	r3, r2
 8011012:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	697a      	ldr	r2, [r7, #20]
 8011018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	68fa      	ldr	r2, [r7, #12]
 801101e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011020:	683b      	ldr	r3, [r7, #0]
 8011022:	685a      	ldr	r2, [r3, #4]
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	693a      	ldr	r2, [r7, #16]
 801102c:	621a      	str	r2, [r3, #32]
}
 801102e:	bf00      	nop
 8011030:	371c      	adds	r7, #28
 8011032:	46bd      	mov	sp, r7
 8011034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011038:	4770      	bx	lr
 801103a:	bf00      	nop
 801103c:	40010000 	.word	0x40010000

08011040 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011040:	b480      	push	{r7}
 8011042:	b087      	sub	sp, #28
 8011044:	af00      	add	r7, sp, #0
 8011046:	60f8      	str	r0, [r7, #12]
 8011048:	60b9      	str	r1, [r7, #8]
 801104a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	6a1b      	ldr	r3, [r3, #32]
 8011050:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	6a1b      	ldr	r3, [r3, #32]
 8011056:	f023 0201 	bic.w	r2, r3, #1
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	699b      	ldr	r3, [r3, #24]
 8011062:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011064:	693b      	ldr	r3, [r7, #16]
 8011066:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801106a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	011b      	lsls	r3, r3, #4
 8011070:	693a      	ldr	r2, [r7, #16]
 8011072:	4313      	orrs	r3, r2
 8011074:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011076:	697b      	ldr	r3, [r7, #20]
 8011078:	f023 030a 	bic.w	r3, r3, #10
 801107c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801107e:	697a      	ldr	r2, [r7, #20]
 8011080:	68bb      	ldr	r3, [r7, #8]
 8011082:	4313      	orrs	r3, r2
 8011084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	693a      	ldr	r2, [r7, #16]
 801108a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	697a      	ldr	r2, [r7, #20]
 8011090:	621a      	str	r2, [r3, #32]
}
 8011092:	bf00      	nop
 8011094:	371c      	adds	r7, #28
 8011096:	46bd      	mov	sp, r7
 8011098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109c:	4770      	bx	lr

0801109e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801109e:	b480      	push	{r7}
 80110a0:	b087      	sub	sp, #28
 80110a2:	af00      	add	r7, sp, #0
 80110a4:	60f8      	str	r0, [r7, #12]
 80110a6:	60b9      	str	r1, [r7, #8]
 80110a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	6a1b      	ldr	r3, [r3, #32]
 80110ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	6a1b      	ldr	r3, [r3, #32]
 80110b4:	f023 0210 	bic.w	r2, r3, #16
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	699b      	ldr	r3, [r3, #24]
 80110c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80110c2:	693b      	ldr	r3, [r7, #16]
 80110c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80110c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	031b      	lsls	r3, r3, #12
 80110ce:	693a      	ldr	r2, [r7, #16]
 80110d0:	4313      	orrs	r3, r2
 80110d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80110d4:	697b      	ldr	r3, [r7, #20]
 80110d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80110da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80110dc:	68bb      	ldr	r3, [r7, #8]
 80110de:	011b      	lsls	r3, r3, #4
 80110e0:	697a      	ldr	r2, [r7, #20]
 80110e2:	4313      	orrs	r3, r2
 80110e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	693a      	ldr	r2, [r7, #16]
 80110ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	697a      	ldr	r2, [r7, #20]
 80110f0:	621a      	str	r2, [r3, #32]
}
 80110f2:	bf00      	nop
 80110f4:	371c      	adds	r7, #28
 80110f6:	46bd      	mov	sp, r7
 80110f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fc:	4770      	bx	lr

080110fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80110fe:	b480      	push	{r7}
 8011100:	b085      	sub	sp, #20
 8011102:	af00      	add	r7, sp, #0
 8011104:	6078      	str	r0, [r7, #4]
 8011106:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	689b      	ldr	r3, [r3, #8]
 801110c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011114:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011116:	683a      	ldr	r2, [r7, #0]
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	4313      	orrs	r3, r2
 801111c:	f043 0307 	orr.w	r3, r3, #7
 8011120:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	68fa      	ldr	r2, [r7, #12]
 8011126:	609a      	str	r2, [r3, #8]
}
 8011128:	bf00      	nop
 801112a:	3714      	adds	r7, #20
 801112c:	46bd      	mov	sp, r7
 801112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011132:	4770      	bx	lr

08011134 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011134:	b480      	push	{r7}
 8011136:	b087      	sub	sp, #28
 8011138:	af00      	add	r7, sp, #0
 801113a:	60f8      	str	r0, [r7, #12]
 801113c:	60b9      	str	r1, [r7, #8]
 801113e:	607a      	str	r2, [r7, #4]
 8011140:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	689b      	ldr	r3, [r3, #8]
 8011146:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011148:	697b      	ldr	r3, [r7, #20]
 801114a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801114e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011150:	683b      	ldr	r3, [r7, #0]
 8011152:	021a      	lsls	r2, r3, #8
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	431a      	orrs	r2, r3
 8011158:	68bb      	ldr	r3, [r7, #8]
 801115a:	4313      	orrs	r3, r2
 801115c:	697a      	ldr	r2, [r7, #20]
 801115e:	4313      	orrs	r3, r2
 8011160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	697a      	ldr	r2, [r7, #20]
 8011166:	609a      	str	r2, [r3, #8]
}
 8011168:	bf00      	nop
 801116a:	371c      	adds	r7, #28
 801116c:	46bd      	mov	sp, r7
 801116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011172:	4770      	bx	lr

08011174 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011174:	b480      	push	{r7}
 8011176:	b087      	sub	sp, #28
 8011178:	af00      	add	r7, sp, #0
 801117a:	60f8      	str	r0, [r7, #12]
 801117c:	60b9      	str	r1, [r7, #8]
 801117e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011180:	68bb      	ldr	r3, [r7, #8]
 8011182:	f003 031f 	and.w	r3, r3, #31
 8011186:	2201      	movs	r2, #1
 8011188:	fa02 f303 	lsl.w	r3, r2, r3
 801118c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	6a1a      	ldr	r2, [r3, #32]
 8011192:	697b      	ldr	r3, [r7, #20]
 8011194:	43db      	mvns	r3, r3
 8011196:	401a      	ands	r2, r3
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	6a1a      	ldr	r2, [r3, #32]
 80111a0:	68bb      	ldr	r3, [r7, #8]
 80111a2:	f003 031f 	and.w	r3, r3, #31
 80111a6:	6879      	ldr	r1, [r7, #4]
 80111a8:	fa01 f303 	lsl.w	r3, r1, r3
 80111ac:	431a      	orrs	r2, r3
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	621a      	str	r2, [r3, #32]
}
 80111b2:	bf00      	nop
 80111b4:	371c      	adds	r7, #28
 80111b6:	46bd      	mov	sp, r7
 80111b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111bc:	4770      	bx	lr
	...

080111c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80111c0:	b480      	push	{r7}
 80111c2:	b085      	sub	sp, #20
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	6078      	str	r0, [r7, #4]
 80111c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80111d0:	2b01      	cmp	r3, #1
 80111d2:	d101      	bne.n	80111d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80111d4:	2302      	movs	r3, #2
 80111d6:	e050      	b.n	801127a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	2201      	movs	r2, #1
 80111dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	2202      	movs	r2, #2
 80111e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	685b      	ldr	r3, [r3, #4]
 80111ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	689b      	ldr	r3, [r3, #8]
 80111f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80111fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011200:	683b      	ldr	r3, [r7, #0]
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	68fa      	ldr	r2, [r7, #12]
 8011206:	4313      	orrs	r3, r2
 8011208:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	68fa      	ldr	r2, [r7, #12]
 8011210:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	4a1c      	ldr	r2, [pc, #112]	@ (8011288 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8011218:	4293      	cmp	r3, r2
 801121a:	d018      	beq.n	801124e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011224:	d013      	beq.n	801124e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	4a18      	ldr	r2, [pc, #96]	@ (801128c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 801122c:	4293      	cmp	r3, r2
 801122e:	d00e      	beq.n	801124e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	4a16      	ldr	r2, [pc, #88]	@ (8011290 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8011236:	4293      	cmp	r3, r2
 8011238:	d009      	beq.n	801124e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	4a15      	ldr	r2, [pc, #84]	@ (8011294 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8011240:	4293      	cmp	r3, r2
 8011242:	d004      	beq.n	801124e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	4a13      	ldr	r2, [pc, #76]	@ (8011298 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 801124a:	4293      	cmp	r3, r2
 801124c:	d10c      	bne.n	8011268 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801124e:	68bb      	ldr	r3, [r7, #8]
 8011250:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011254:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011256:	683b      	ldr	r3, [r7, #0]
 8011258:	685b      	ldr	r3, [r3, #4]
 801125a:	68ba      	ldr	r2, [r7, #8]
 801125c:	4313      	orrs	r3, r2
 801125e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	68ba      	ldr	r2, [r7, #8]
 8011266:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	2201      	movs	r2, #1
 801126c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	2200      	movs	r2, #0
 8011274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8011278:	2300      	movs	r3, #0
}
 801127a:	4618      	mov	r0, r3
 801127c:	3714      	adds	r7, #20
 801127e:	46bd      	mov	sp, r7
 8011280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011284:	4770      	bx	lr
 8011286:	bf00      	nop
 8011288:	40010000 	.word	0x40010000
 801128c:	40000400 	.word	0x40000400
 8011290:	40000800 	.word	0x40000800
 8011294:	40000c00 	.word	0x40000c00
 8011298:	40014000 	.word	0x40014000

0801129c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801129c:	b480      	push	{r7}
 801129e:	b083      	sub	sp, #12
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80112a4:	bf00      	nop
 80112a6:	370c      	adds	r7, #12
 80112a8:	46bd      	mov	sp, r7
 80112aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ae:	4770      	bx	lr

080112b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80112b0:	b480      	push	{r7}
 80112b2:	b083      	sub	sp, #12
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80112b8:	bf00      	nop
 80112ba:	370c      	adds	r7, #12
 80112bc:	46bd      	mov	sp, r7
 80112be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c2:	4770      	bx	lr

080112c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80112c4:	b580      	push	{r7, lr}
 80112c6:	b082      	sub	sp, #8
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d101      	bne.n	80112d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80112d2:	2301      	movs	r3, #1
 80112d4:	e042      	b.n	801135c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80112dc:	b2db      	uxtb	r3, r3
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d106      	bne.n	80112f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	2200      	movs	r2, #0
 80112e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80112ea:	6878      	ldr	r0, [r7, #4]
 80112ec:	f7fc f8a4 	bl	800d438 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	2224      	movs	r2, #36	@ 0x24
 80112f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	68da      	ldr	r2, [r3, #12]
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8011306:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8011308:	6878      	ldr	r0, [r7, #4]
 801130a:	f000 f973 	bl	80115f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	691a      	ldr	r2, [r3, #16]
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801131c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	695a      	ldr	r2, [r3, #20]
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801132c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	68da      	ldr	r2, [r3, #12]
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801133c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	2200      	movs	r2, #0
 8011342:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	2220      	movs	r2, #32
 8011348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	2220      	movs	r2, #32
 8011350:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	2200      	movs	r2, #0
 8011358:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 801135a:	2300      	movs	r3, #0
}
 801135c:	4618      	mov	r0, r3
 801135e:	3708      	adds	r7, #8
 8011360:	46bd      	mov	sp, r7
 8011362:	bd80      	pop	{r7, pc}

08011364 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011364:	b580      	push	{r7, lr}
 8011366:	b08a      	sub	sp, #40	@ 0x28
 8011368:	af02      	add	r7, sp, #8
 801136a:	60f8      	str	r0, [r7, #12]
 801136c:	60b9      	str	r1, [r7, #8]
 801136e:	603b      	str	r3, [r7, #0]
 8011370:	4613      	mov	r3, r2
 8011372:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8011374:	2300      	movs	r3, #0
 8011376:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801137e:	b2db      	uxtb	r3, r3
 8011380:	2b20      	cmp	r3, #32
 8011382:	d175      	bne.n	8011470 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8011384:	68bb      	ldr	r3, [r7, #8]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d002      	beq.n	8011390 <HAL_UART_Transmit+0x2c>
 801138a:	88fb      	ldrh	r3, [r7, #6]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d101      	bne.n	8011394 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8011390:	2301      	movs	r3, #1
 8011392:	e06e      	b.n	8011472 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	2200      	movs	r2, #0
 8011398:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	2221      	movs	r2, #33	@ 0x21
 801139e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80113a2:	f7fc fa6d 	bl	800d880 <HAL_GetTick>
 80113a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	88fa      	ldrh	r2, [r7, #6]
 80113ac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	88fa      	ldrh	r2, [r7, #6]
 80113b2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	689b      	ldr	r3, [r3, #8]
 80113b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80113bc:	d108      	bne.n	80113d0 <HAL_UART_Transmit+0x6c>
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	691b      	ldr	r3, [r3, #16]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d104      	bne.n	80113d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80113c6:	2300      	movs	r3, #0
 80113c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80113ca:	68bb      	ldr	r3, [r7, #8]
 80113cc:	61bb      	str	r3, [r7, #24]
 80113ce:	e003      	b.n	80113d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80113d0:	68bb      	ldr	r3, [r7, #8]
 80113d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80113d4:	2300      	movs	r3, #0
 80113d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80113d8:	e02e      	b.n	8011438 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80113da:	683b      	ldr	r3, [r7, #0]
 80113dc:	9300      	str	r3, [sp, #0]
 80113de:	697b      	ldr	r3, [r7, #20]
 80113e0:	2200      	movs	r2, #0
 80113e2:	2180      	movs	r1, #128	@ 0x80
 80113e4:	68f8      	ldr	r0, [r7, #12]
 80113e6:	f000 f848 	bl	801147a <UART_WaitOnFlagUntilTimeout>
 80113ea:	4603      	mov	r3, r0
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d005      	beq.n	80113fc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	2220      	movs	r2, #32
 80113f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80113f8:	2303      	movs	r3, #3
 80113fa:	e03a      	b.n	8011472 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80113fc:	69fb      	ldr	r3, [r7, #28]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d10b      	bne.n	801141a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011402:	69bb      	ldr	r3, [r7, #24]
 8011404:	881b      	ldrh	r3, [r3, #0]
 8011406:	461a      	mov	r2, r3
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011410:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8011412:	69bb      	ldr	r3, [r7, #24]
 8011414:	3302      	adds	r3, #2
 8011416:	61bb      	str	r3, [r7, #24]
 8011418:	e007      	b.n	801142a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 801141a:	69fb      	ldr	r3, [r7, #28]
 801141c:	781a      	ldrb	r2, [r3, #0]
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8011424:	69fb      	ldr	r3, [r7, #28]
 8011426:	3301      	adds	r3, #1
 8011428:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 801142e:	b29b      	uxth	r3, r3
 8011430:	3b01      	subs	r3, #1
 8011432:	b29a      	uxth	r2, r3
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 801143c:	b29b      	uxth	r3, r3
 801143e:	2b00      	cmp	r3, #0
 8011440:	d1cb      	bne.n	80113da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011442:	683b      	ldr	r3, [r7, #0]
 8011444:	9300      	str	r3, [sp, #0]
 8011446:	697b      	ldr	r3, [r7, #20]
 8011448:	2200      	movs	r2, #0
 801144a:	2140      	movs	r1, #64	@ 0x40
 801144c:	68f8      	ldr	r0, [r7, #12]
 801144e:	f000 f814 	bl	801147a <UART_WaitOnFlagUntilTimeout>
 8011452:	4603      	mov	r3, r0
 8011454:	2b00      	cmp	r3, #0
 8011456:	d005      	beq.n	8011464 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	2220      	movs	r2, #32
 801145c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8011460:	2303      	movs	r3, #3
 8011462:	e006      	b.n	8011472 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	2220      	movs	r2, #32
 8011468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 801146c:	2300      	movs	r3, #0
 801146e:	e000      	b.n	8011472 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8011470:	2302      	movs	r3, #2
  }
}
 8011472:	4618      	mov	r0, r3
 8011474:	3720      	adds	r7, #32
 8011476:	46bd      	mov	sp, r7
 8011478:	bd80      	pop	{r7, pc}

0801147a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 801147a:	b580      	push	{r7, lr}
 801147c:	b086      	sub	sp, #24
 801147e:	af00      	add	r7, sp, #0
 8011480:	60f8      	str	r0, [r7, #12]
 8011482:	60b9      	str	r1, [r7, #8]
 8011484:	603b      	str	r3, [r7, #0]
 8011486:	4613      	mov	r3, r2
 8011488:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801148a:	e03b      	b.n	8011504 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801148c:	6a3b      	ldr	r3, [r7, #32]
 801148e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011492:	d037      	beq.n	8011504 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011494:	f7fc f9f4 	bl	800d880 <HAL_GetTick>
 8011498:	4602      	mov	r2, r0
 801149a:	683b      	ldr	r3, [r7, #0]
 801149c:	1ad3      	subs	r3, r2, r3
 801149e:	6a3a      	ldr	r2, [r7, #32]
 80114a0:	429a      	cmp	r2, r3
 80114a2:	d302      	bcc.n	80114aa <UART_WaitOnFlagUntilTimeout+0x30>
 80114a4:	6a3b      	ldr	r3, [r7, #32]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d101      	bne.n	80114ae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80114aa:	2303      	movs	r3, #3
 80114ac:	e03a      	b.n	8011524 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	68db      	ldr	r3, [r3, #12]
 80114b4:	f003 0304 	and.w	r3, r3, #4
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d023      	beq.n	8011504 <UART_WaitOnFlagUntilTimeout+0x8a>
 80114bc:	68bb      	ldr	r3, [r7, #8]
 80114be:	2b80      	cmp	r3, #128	@ 0x80
 80114c0:	d020      	beq.n	8011504 <UART_WaitOnFlagUntilTimeout+0x8a>
 80114c2:	68bb      	ldr	r3, [r7, #8]
 80114c4:	2b40      	cmp	r3, #64	@ 0x40
 80114c6:	d01d      	beq.n	8011504 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	f003 0308 	and.w	r3, r3, #8
 80114d2:	2b08      	cmp	r3, #8
 80114d4:	d116      	bne.n	8011504 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80114d6:	2300      	movs	r3, #0
 80114d8:	617b      	str	r3, [r7, #20]
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	617b      	str	r3, [r7, #20]
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	685b      	ldr	r3, [r3, #4]
 80114e8:	617b      	str	r3, [r7, #20]
 80114ea:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80114ec:	68f8      	ldr	r0, [r7, #12]
 80114ee:	f000 f81d 	bl	801152c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	2208      	movs	r2, #8
 80114f6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	2200      	movs	r2, #0
 80114fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8011500:	2301      	movs	r3, #1
 8011502:	e00f      	b.n	8011524 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	681a      	ldr	r2, [r3, #0]
 801150a:	68bb      	ldr	r3, [r7, #8]
 801150c:	4013      	ands	r3, r2
 801150e:	68ba      	ldr	r2, [r7, #8]
 8011510:	429a      	cmp	r2, r3
 8011512:	bf0c      	ite	eq
 8011514:	2301      	moveq	r3, #1
 8011516:	2300      	movne	r3, #0
 8011518:	b2db      	uxtb	r3, r3
 801151a:	461a      	mov	r2, r3
 801151c:	79fb      	ldrb	r3, [r7, #7]
 801151e:	429a      	cmp	r2, r3
 8011520:	d0b4      	beq.n	801148c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011522:	2300      	movs	r3, #0
}
 8011524:	4618      	mov	r0, r3
 8011526:	3718      	adds	r7, #24
 8011528:	46bd      	mov	sp, r7
 801152a:	bd80      	pop	{r7, pc}

0801152c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801152c:	b480      	push	{r7}
 801152e:	b095      	sub	sp, #84	@ 0x54
 8011530:	af00      	add	r7, sp, #0
 8011532:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	330c      	adds	r3, #12
 801153a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801153c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801153e:	e853 3f00 	ldrex	r3, [r3]
 8011542:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011546:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801154a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	330c      	adds	r3, #12
 8011552:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011554:	643a      	str	r2, [r7, #64]	@ 0x40
 8011556:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011558:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801155a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801155c:	e841 2300 	strex	r3, r2, [r1]
 8011560:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011564:	2b00      	cmp	r3, #0
 8011566:	d1e5      	bne.n	8011534 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	3314      	adds	r3, #20
 801156e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011570:	6a3b      	ldr	r3, [r7, #32]
 8011572:	e853 3f00 	ldrex	r3, [r3]
 8011576:	61fb      	str	r3, [r7, #28]
   return(result);
 8011578:	69fb      	ldr	r3, [r7, #28]
 801157a:	f023 0301 	bic.w	r3, r3, #1
 801157e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	3314      	adds	r3, #20
 8011586:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011588:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801158a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801158c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801158e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011590:	e841 2300 	strex	r3, r2, [r1]
 8011594:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011598:	2b00      	cmp	r3, #0
 801159a:	d1e5      	bne.n	8011568 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80115a0:	2b01      	cmp	r3, #1
 80115a2:	d119      	bne.n	80115d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	330c      	adds	r3, #12
 80115aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	e853 3f00 	ldrex	r3, [r3]
 80115b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80115b4:	68bb      	ldr	r3, [r7, #8]
 80115b6:	f023 0310 	bic.w	r3, r3, #16
 80115ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	330c      	adds	r3, #12
 80115c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80115c4:	61ba      	str	r2, [r7, #24]
 80115c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115c8:	6979      	ldr	r1, [r7, #20]
 80115ca:	69ba      	ldr	r2, [r7, #24]
 80115cc:	e841 2300 	strex	r3, r2, [r1]
 80115d0:	613b      	str	r3, [r7, #16]
   return(result);
 80115d2:	693b      	ldr	r3, [r7, #16]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d1e5      	bne.n	80115a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	2220      	movs	r2, #32
 80115dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	2200      	movs	r2, #0
 80115e4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80115e6:	bf00      	nop
 80115e8:	3754      	adds	r7, #84	@ 0x54
 80115ea:	46bd      	mov	sp, r7
 80115ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f0:	4770      	bx	lr
	...

080115f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80115f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80115f8:	b0c0      	sub	sp, #256	@ 0x100
 80115fa:	af00      	add	r7, sp, #0
 80115fc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	691b      	ldr	r3, [r3, #16]
 8011608:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 801160c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011610:	68d9      	ldr	r1, [r3, #12]
 8011612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011616:	681a      	ldr	r2, [r3, #0]
 8011618:	ea40 0301 	orr.w	r3, r0, r1
 801161c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801161e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011622:	689a      	ldr	r2, [r3, #8]
 8011624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011628:	691b      	ldr	r3, [r3, #16]
 801162a:	431a      	orrs	r2, r3
 801162c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011630:	695b      	ldr	r3, [r3, #20]
 8011632:	431a      	orrs	r2, r3
 8011634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011638:	69db      	ldr	r3, [r3, #28]
 801163a:	4313      	orrs	r3, r2
 801163c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8011640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	68db      	ldr	r3, [r3, #12]
 8011648:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 801164c:	f021 010c 	bic.w	r1, r1, #12
 8011650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011654:	681a      	ldr	r2, [r3, #0]
 8011656:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801165a:	430b      	orrs	r3, r1
 801165c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801165e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	695b      	ldr	r3, [r3, #20]
 8011666:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 801166a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801166e:	6999      	ldr	r1, [r3, #24]
 8011670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011674:	681a      	ldr	r2, [r3, #0]
 8011676:	ea40 0301 	orr.w	r3, r0, r1
 801167a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801167c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011680:	681a      	ldr	r2, [r3, #0]
 8011682:	4b8f      	ldr	r3, [pc, #572]	@ (80118c0 <UART_SetConfig+0x2cc>)
 8011684:	429a      	cmp	r2, r3
 8011686:	d005      	beq.n	8011694 <UART_SetConfig+0xa0>
 8011688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801168c:	681a      	ldr	r2, [r3, #0]
 801168e:	4b8d      	ldr	r3, [pc, #564]	@ (80118c4 <UART_SetConfig+0x2d0>)
 8011690:	429a      	cmp	r2, r3
 8011692:	d104      	bne.n	801169e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8011694:	f7fe fba0 	bl	800fdd8 <HAL_RCC_GetPCLK2Freq>
 8011698:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 801169c:	e003      	b.n	80116a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801169e:	f7fe fb87 	bl	800fdb0 <HAL_RCC_GetPCLK1Freq>
 80116a2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80116a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80116aa:	69db      	ldr	r3, [r3, #28]
 80116ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80116b0:	f040 810c 	bne.w	80118cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80116b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80116b8:	2200      	movs	r2, #0
 80116ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80116be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80116c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80116c6:	4622      	mov	r2, r4
 80116c8:	462b      	mov	r3, r5
 80116ca:	1891      	adds	r1, r2, r2
 80116cc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80116ce:	415b      	adcs	r3, r3
 80116d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80116d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80116d6:	4621      	mov	r1, r4
 80116d8:	eb12 0801 	adds.w	r8, r2, r1
 80116dc:	4629      	mov	r1, r5
 80116de:	eb43 0901 	adc.w	r9, r3, r1
 80116e2:	f04f 0200 	mov.w	r2, #0
 80116e6:	f04f 0300 	mov.w	r3, #0
 80116ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80116ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80116f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80116f6:	4690      	mov	r8, r2
 80116f8:	4699      	mov	r9, r3
 80116fa:	4623      	mov	r3, r4
 80116fc:	eb18 0303 	adds.w	r3, r8, r3
 8011700:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8011704:	462b      	mov	r3, r5
 8011706:	eb49 0303 	adc.w	r3, r9, r3
 801170a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801170e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011712:	685b      	ldr	r3, [r3, #4]
 8011714:	2200      	movs	r2, #0
 8011716:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801171a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 801171e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8011722:	460b      	mov	r3, r1
 8011724:	18db      	adds	r3, r3, r3
 8011726:	653b      	str	r3, [r7, #80]	@ 0x50
 8011728:	4613      	mov	r3, r2
 801172a:	eb42 0303 	adc.w	r3, r2, r3
 801172e:	657b      	str	r3, [r7, #84]	@ 0x54
 8011730:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8011734:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8011738:	f7ef fa8e 	bl	8000c58 <__aeabi_uldivmod>
 801173c:	4602      	mov	r2, r0
 801173e:	460b      	mov	r3, r1
 8011740:	4b61      	ldr	r3, [pc, #388]	@ (80118c8 <UART_SetConfig+0x2d4>)
 8011742:	fba3 2302 	umull	r2, r3, r3, r2
 8011746:	095b      	lsrs	r3, r3, #5
 8011748:	011c      	lsls	r4, r3, #4
 801174a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801174e:	2200      	movs	r2, #0
 8011750:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8011754:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8011758:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 801175c:	4642      	mov	r2, r8
 801175e:	464b      	mov	r3, r9
 8011760:	1891      	adds	r1, r2, r2
 8011762:	64b9      	str	r1, [r7, #72]	@ 0x48
 8011764:	415b      	adcs	r3, r3
 8011766:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011768:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 801176c:	4641      	mov	r1, r8
 801176e:	eb12 0a01 	adds.w	sl, r2, r1
 8011772:	4649      	mov	r1, r9
 8011774:	eb43 0b01 	adc.w	fp, r3, r1
 8011778:	f04f 0200 	mov.w	r2, #0
 801177c:	f04f 0300 	mov.w	r3, #0
 8011780:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011784:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8011788:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801178c:	4692      	mov	sl, r2
 801178e:	469b      	mov	fp, r3
 8011790:	4643      	mov	r3, r8
 8011792:	eb1a 0303 	adds.w	r3, sl, r3
 8011796:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801179a:	464b      	mov	r3, r9
 801179c:	eb4b 0303 	adc.w	r3, fp, r3
 80117a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80117a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80117a8:	685b      	ldr	r3, [r3, #4]
 80117aa:	2200      	movs	r2, #0
 80117ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80117b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80117b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80117b8:	460b      	mov	r3, r1
 80117ba:	18db      	adds	r3, r3, r3
 80117bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80117be:	4613      	mov	r3, r2
 80117c0:	eb42 0303 	adc.w	r3, r2, r3
 80117c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80117c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80117ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80117ce:	f7ef fa43 	bl	8000c58 <__aeabi_uldivmod>
 80117d2:	4602      	mov	r2, r0
 80117d4:	460b      	mov	r3, r1
 80117d6:	4611      	mov	r1, r2
 80117d8:	4b3b      	ldr	r3, [pc, #236]	@ (80118c8 <UART_SetConfig+0x2d4>)
 80117da:	fba3 2301 	umull	r2, r3, r3, r1
 80117de:	095b      	lsrs	r3, r3, #5
 80117e0:	2264      	movs	r2, #100	@ 0x64
 80117e2:	fb02 f303 	mul.w	r3, r2, r3
 80117e6:	1acb      	subs	r3, r1, r3
 80117e8:	00db      	lsls	r3, r3, #3
 80117ea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80117ee:	4b36      	ldr	r3, [pc, #216]	@ (80118c8 <UART_SetConfig+0x2d4>)
 80117f0:	fba3 2302 	umull	r2, r3, r3, r2
 80117f4:	095b      	lsrs	r3, r3, #5
 80117f6:	005b      	lsls	r3, r3, #1
 80117f8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80117fc:	441c      	add	r4, r3
 80117fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011802:	2200      	movs	r2, #0
 8011804:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8011808:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 801180c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8011810:	4642      	mov	r2, r8
 8011812:	464b      	mov	r3, r9
 8011814:	1891      	adds	r1, r2, r2
 8011816:	63b9      	str	r1, [r7, #56]	@ 0x38
 8011818:	415b      	adcs	r3, r3
 801181a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801181c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8011820:	4641      	mov	r1, r8
 8011822:	1851      	adds	r1, r2, r1
 8011824:	6339      	str	r1, [r7, #48]	@ 0x30
 8011826:	4649      	mov	r1, r9
 8011828:	414b      	adcs	r3, r1
 801182a:	637b      	str	r3, [r7, #52]	@ 0x34
 801182c:	f04f 0200 	mov.w	r2, #0
 8011830:	f04f 0300 	mov.w	r3, #0
 8011834:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8011838:	4659      	mov	r1, fp
 801183a:	00cb      	lsls	r3, r1, #3
 801183c:	4651      	mov	r1, sl
 801183e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011842:	4651      	mov	r1, sl
 8011844:	00ca      	lsls	r2, r1, #3
 8011846:	4610      	mov	r0, r2
 8011848:	4619      	mov	r1, r3
 801184a:	4603      	mov	r3, r0
 801184c:	4642      	mov	r2, r8
 801184e:	189b      	adds	r3, r3, r2
 8011850:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011854:	464b      	mov	r3, r9
 8011856:	460a      	mov	r2, r1
 8011858:	eb42 0303 	adc.w	r3, r2, r3
 801185c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011864:	685b      	ldr	r3, [r3, #4]
 8011866:	2200      	movs	r2, #0
 8011868:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801186c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8011870:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8011874:	460b      	mov	r3, r1
 8011876:	18db      	adds	r3, r3, r3
 8011878:	62bb      	str	r3, [r7, #40]	@ 0x28
 801187a:	4613      	mov	r3, r2
 801187c:	eb42 0303 	adc.w	r3, r2, r3
 8011880:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011882:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8011886:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 801188a:	f7ef f9e5 	bl	8000c58 <__aeabi_uldivmod>
 801188e:	4602      	mov	r2, r0
 8011890:	460b      	mov	r3, r1
 8011892:	4b0d      	ldr	r3, [pc, #52]	@ (80118c8 <UART_SetConfig+0x2d4>)
 8011894:	fba3 1302 	umull	r1, r3, r3, r2
 8011898:	095b      	lsrs	r3, r3, #5
 801189a:	2164      	movs	r1, #100	@ 0x64
 801189c:	fb01 f303 	mul.w	r3, r1, r3
 80118a0:	1ad3      	subs	r3, r2, r3
 80118a2:	00db      	lsls	r3, r3, #3
 80118a4:	3332      	adds	r3, #50	@ 0x32
 80118a6:	4a08      	ldr	r2, [pc, #32]	@ (80118c8 <UART_SetConfig+0x2d4>)
 80118a8:	fba2 2303 	umull	r2, r3, r2, r3
 80118ac:	095b      	lsrs	r3, r3, #5
 80118ae:	f003 0207 	and.w	r2, r3, #7
 80118b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	4422      	add	r2, r4
 80118ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80118bc:	e106      	b.n	8011acc <UART_SetConfig+0x4d8>
 80118be:	bf00      	nop
 80118c0:	40011000 	.word	0x40011000
 80118c4:	40011400 	.word	0x40011400
 80118c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80118cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80118d0:	2200      	movs	r2, #0
 80118d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80118d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80118da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80118de:	4642      	mov	r2, r8
 80118e0:	464b      	mov	r3, r9
 80118e2:	1891      	adds	r1, r2, r2
 80118e4:	6239      	str	r1, [r7, #32]
 80118e6:	415b      	adcs	r3, r3
 80118e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80118ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80118ee:	4641      	mov	r1, r8
 80118f0:	1854      	adds	r4, r2, r1
 80118f2:	4649      	mov	r1, r9
 80118f4:	eb43 0501 	adc.w	r5, r3, r1
 80118f8:	f04f 0200 	mov.w	r2, #0
 80118fc:	f04f 0300 	mov.w	r3, #0
 8011900:	00eb      	lsls	r3, r5, #3
 8011902:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8011906:	00e2      	lsls	r2, r4, #3
 8011908:	4614      	mov	r4, r2
 801190a:	461d      	mov	r5, r3
 801190c:	4643      	mov	r3, r8
 801190e:	18e3      	adds	r3, r4, r3
 8011910:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011914:	464b      	mov	r3, r9
 8011916:	eb45 0303 	adc.w	r3, r5, r3
 801191a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801191e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011922:	685b      	ldr	r3, [r3, #4]
 8011924:	2200      	movs	r2, #0
 8011926:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801192a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 801192e:	f04f 0200 	mov.w	r2, #0
 8011932:	f04f 0300 	mov.w	r3, #0
 8011936:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 801193a:	4629      	mov	r1, r5
 801193c:	008b      	lsls	r3, r1, #2
 801193e:	4621      	mov	r1, r4
 8011940:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011944:	4621      	mov	r1, r4
 8011946:	008a      	lsls	r2, r1, #2
 8011948:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 801194c:	f7ef f984 	bl	8000c58 <__aeabi_uldivmod>
 8011950:	4602      	mov	r2, r0
 8011952:	460b      	mov	r3, r1
 8011954:	4b60      	ldr	r3, [pc, #384]	@ (8011ad8 <UART_SetConfig+0x4e4>)
 8011956:	fba3 2302 	umull	r2, r3, r3, r2
 801195a:	095b      	lsrs	r3, r3, #5
 801195c:	011c      	lsls	r4, r3, #4
 801195e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011962:	2200      	movs	r2, #0
 8011964:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011968:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801196c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8011970:	4642      	mov	r2, r8
 8011972:	464b      	mov	r3, r9
 8011974:	1891      	adds	r1, r2, r2
 8011976:	61b9      	str	r1, [r7, #24]
 8011978:	415b      	adcs	r3, r3
 801197a:	61fb      	str	r3, [r7, #28]
 801197c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011980:	4641      	mov	r1, r8
 8011982:	1851      	adds	r1, r2, r1
 8011984:	6139      	str	r1, [r7, #16]
 8011986:	4649      	mov	r1, r9
 8011988:	414b      	adcs	r3, r1
 801198a:	617b      	str	r3, [r7, #20]
 801198c:	f04f 0200 	mov.w	r2, #0
 8011990:	f04f 0300 	mov.w	r3, #0
 8011994:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8011998:	4659      	mov	r1, fp
 801199a:	00cb      	lsls	r3, r1, #3
 801199c:	4651      	mov	r1, sl
 801199e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80119a2:	4651      	mov	r1, sl
 80119a4:	00ca      	lsls	r2, r1, #3
 80119a6:	4610      	mov	r0, r2
 80119a8:	4619      	mov	r1, r3
 80119aa:	4603      	mov	r3, r0
 80119ac:	4642      	mov	r2, r8
 80119ae:	189b      	adds	r3, r3, r2
 80119b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80119b4:	464b      	mov	r3, r9
 80119b6:	460a      	mov	r2, r1
 80119b8:	eb42 0303 	adc.w	r3, r2, r3
 80119bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80119c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80119c4:	685b      	ldr	r3, [r3, #4]
 80119c6:	2200      	movs	r2, #0
 80119c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80119ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80119cc:	f04f 0200 	mov.w	r2, #0
 80119d0:	f04f 0300 	mov.w	r3, #0
 80119d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80119d8:	4649      	mov	r1, r9
 80119da:	008b      	lsls	r3, r1, #2
 80119dc:	4641      	mov	r1, r8
 80119de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80119e2:	4641      	mov	r1, r8
 80119e4:	008a      	lsls	r2, r1, #2
 80119e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80119ea:	f7ef f935 	bl	8000c58 <__aeabi_uldivmod>
 80119ee:	4602      	mov	r2, r0
 80119f0:	460b      	mov	r3, r1
 80119f2:	4611      	mov	r1, r2
 80119f4:	4b38      	ldr	r3, [pc, #224]	@ (8011ad8 <UART_SetConfig+0x4e4>)
 80119f6:	fba3 2301 	umull	r2, r3, r3, r1
 80119fa:	095b      	lsrs	r3, r3, #5
 80119fc:	2264      	movs	r2, #100	@ 0x64
 80119fe:	fb02 f303 	mul.w	r3, r2, r3
 8011a02:	1acb      	subs	r3, r1, r3
 8011a04:	011b      	lsls	r3, r3, #4
 8011a06:	3332      	adds	r3, #50	@ 0x32
 8011a08:	4a33      	ldr	r2, [pc, #204]	@ (8011ad8 <UART_SetConfig+0x4e4>)
 8011a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8011a0e:	095b      	lsrs	r3, r3, #5
 8011a10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011a14:	441c      	add	r4, r3
 8011a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8011a1e:	677a      	str	r2, [r7, #116]	@ 0x74
 8011a20:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8011a24:	4642      	mov	r2, r8
 8011a26:	464b      	mov	r3, r9
 8011a28:	1891      	adds	r1, r2, r2
 8011a2a:	60b9      	str	r1, [r7, #8]
 8011a2c:	415b      	adcs	r3, r3
 8011a2e:	60fb      	str	r3, [r7, #12]
 8011a30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011a34:	4641      	mov	r1, r8
 8011a36:	1851      	adds	r1, r2, r1
 8011a38:	6039      	str	r1, [r7, #0]
 8011a3a:	4649      	mov	r1, r9
 8011a3c:	414b      	adcs	r3, r1
 8011a3e:	607b      	str	r3, [r7, #4]
 8011a40:	f04f 0200 	mov.w	r2, #0
 8011a44:	f04f 0300 	mov.w	r3, #0
 8011a48:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8011a4c:	4659      	mov	r1, fp
 8011a4e:	00cb      	lsls	r3, r1, #3
 8011a50:	4651      	mov	r1, sl
 8011a52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011a56:	4651      	mov	r1, sl
 8011a58:	00ca      	lsls	r2, r1, #3
 8011a5a:	4610      	mov	r0, r2
 8011a5c:	4619      	mov	r1, r3
 8011a5e:	4603      	mov	r3, r0
 8011a60:	4642      	mov	r2, r8
 8011a62:	189b      	adds	r3, r3, r2
 8011a64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011a66:	464b      	mov	r3, r9
 8011a68:	460a      	mov	r2, r1
 8011a6a:	eb42 0303 	adc.w	r3, r2, r3
 8011a6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011a74:	685b      	ldr	r3, [r3, #4]
 8011a76:	2200      	movs	r2, #0
 8011a78:	663b      	str	r3, [r7, #96]	@ 0x60
 8011a7a:	667a      	str	r2, [r7, #100]	@ 0x64
 8011a7c:	f04f 0200 	mov.w	r2, #0
 8011a80:	f04f 0300 	mov.w	r3, #0
 8011a84:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8011a88:	4649      	mov	r1, r9
 8011a8a:	008b      	lsls	r3, r1, #2
 8011a8c:	4641      	mov	r1, r8
 8011a8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011a92:	4641      	mov	r1, r8
 8011a94:	008a      	lsls	r2, r1, #2
 8011a96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8011a9a:	f7ef f8dd 	bl	8000c58 <__aeabi_uldivmod>
 8011a9e:	4602      	mov	r2, r0
 8011aa0:	460b      	mov	r3, r1
 8011aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8011ad8 <UART_SetConfig+0x4e4>)
 8011aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8011aa8:	095b      	lsrs	r3, r3, #5
 8011aaa:	2164      	movs	r1, #100	@ 0x64
 8011aac:	fb01 f303 	mul.w	r3, r1, r3
 8011ab0:	1ad3      	subs	r3, r2, r3
 8011ab2:	011b      	lsls	r3, r3, #4
 8011ab4:	3332      	adds	r3, #50	@ 0x32
 8011ab6:	4a08      	ldr	r2, [pc, #32]	@ (8011ad8 <UART_SetConfig+0x4e4>)
 8011ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8011abc:	095b      	lsrs	r3, r3, #5
 8011abe:	f003 020f 	and.w	r2, r3, #15
 8011ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	4422      	add	r2, r4
 8011aca:	609a      	str	r2, [r3, #8]
}
 8011acc:	bf00      	nop
 8011ace:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011ad8:	51eb851f 	.word	0x51eb851f

08011adc <_ZdlPvj>:
 8011adc:	f000 b811 	b.w	8011b02 <_ZdlPv>

08011ae0 <_Znwj>:
 8011ae0:	2801      	cmp	r0, #1
 8011ae2:	bf38      	it	cc
 8011ae4:	2001      	movcc	r0, #1
 8011ae6:	b510      	push	{r4, lr}
 8011ae8:	4604      	mov	r4, r0
 8011aea:	4620      	mov	r0, r4
 8011aec:	f000 f81c 	bl	8011b28 <malloc>
 8011af0:	b100      	cbz	r0, 8011af4 <_Znwj+0x14>
 8011af2:	bd10      	pop	{r4, pc}
 8011af4:	f000 f808 	bl	8011b08 <_ZSt15get_new_handlerv>
 8011af8:	b908      	cbnz	r0, 8011afe <_Znwj+0x1e>
 8011afa:	f000 f80d 	bl	8011b18 <abort>
 8011afe:	4780      	blx	r0
 8011b00:	e7f3      	b.n	8011aea <_Znwj+0xa>

08011b02 <_ZdlPv>:
 8011b02:	f000 b819 	b.w	8011b38 <free>
	...

08011b08 <_ZSt15get_new_handlerv>:
 8011b08:	4b02      	ldr	r3, [pc, #8]	@ (8011b14 <_ZSt15get_new_handlerv+0xc>)
 8011b0a:	6818      	ldr	r0, [r3, #0]
 8011b0c:	f3bf 8f5b 	dmb	ish
 8011b10:	4770      	bx	lr
 8011b12:	bf00      	nop
 8011b14:	200005c8 	.word	0x200005c8

08011b18 <abort>:
 8011b18:	b508      	push	{r3, lr}
 8011b1a:	2006      	movs	r0, #6
 8011b1c:	f000 fe70 	bl	8012800 <raise>
 8011b20:	2001      	movs	r0, #1
 8011b22:	f7fb fd5d 	bl	800d5e0 <_exit>
	...

08011b28 <malloc>:
 8011b28:	4b02      	ldr	r3, [pc, #8]	@ (8011b34 <malloc+0xc>)
 8011b2a:	4601      	mov	r1, r0
 8011b2c:	6818      	ldr	r0, [r3, #0]
 8011b2e:	f000 b82d 	b.w	8011b8c <_malloc_r>
 8011b32:	bf00      	nop
 8011b34:	20000020 	.word	0x20000020

08011b38 <free>:
 8011b38:	4b02      	ldr	r3, [pc, #8]	@ (8011b44 <free+0xc>)
 8011b3a:	4601      	mov	r1, r0
 8011b3c:	6818      	ldr	r0, [r3, #0]
 8011b3e:	f001 bd57 	b.w	80135f0 <_free_r>
 8011b42:	bf00      	nop
 8011b44:	20000020 	.word	0x20000020

08011b48 <sbrk_aligned>:
 8011b48:	b570      	push	{r4, r5, r6, lr}
 8011b4a:	4e0f      	ldr	r6, [pc, #60]	@ (8011b88 <sbrk_aligned+0x40>)
 8011b4c:	460c      	mov	r4, r1
 8011b4e:	6831      	ldr	r1, [r6, #0]
 8011b50:	4605      	mov	r5, r0
 8011b52:	b911      	cbnz	r1, 8011b5a <sbrk_aligned+0x12>
 8011b54:	f000 fea8 	bl	80128a8 <_sbrk_r>
 8011b58:	6030      	str	r0, [r6, #0]
 8011b5a:	4621      	mov	r1, r4
 8011b5c:	4628      	mov	r0, r5
 8011b5e:	f000 fea3 	bl	80128a8 <_sbrk_r>
 8011b62:	1c43      	adds	r3, r0, #1
 8011b64:	d103      	bne.n	8011b6e <sbrk_aligned+0x26>
 8011b66:	f04f 34ff 	mov.w	r4, #4294967295
 8011b6a:	4620      	mov	r0, r4
 8011b6c:	bd70      	pop	{r4, r5, r6, pc}
 8011b6e:	1cc4      	adds	r4, r0, #3
 8011b70:	f024 0403 	bic.w	r4, r4, #3
 8011b74:	42a0      	cmp	r0, r4
 8011b76:	d0f8      	beq.n	8011b6a <sbrk_aligned+0x22>
 8011b78:	1a21      	subs	r1, r4, r0
 8011b7a:	4628      	mov	r0, r5
 8011b7c:	f000 fe94 	bl	80128a8 <_sbrk_r>
 8011b80:	3001      	adds	r0, #1
 8011b82:	d1f2      	bne.n	8011b6a <sbrk_aligned+0x22>
 8011b84:	e7ef      	b.n	8011b66 <sbrk_aligned+0x1e>
 8011b86:	bf00      	nop
 8011b88:	200005cc 	.word	0x200005cc

08011b8c <_malloc_r>:
 8011b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b90:	1ccd      	adds	r5, r1, #3
 8011b92:	f025 0503 	bic.w	r5, r5, #3
 8011b96:	3508      	adds	r5, #8
 8011b98:	2d0c      	cmp	r5, #12
 8011b9a:	bf38      	it	cc
 8011b9c:	250c      	movcc	r5, #12
 8011b9e:	2d00      	cmp	r5, #0
 8011ba0:	4606      	mov	r6, r0
 8011ba2:	db01      	blt.n	8011ba8 <_malloc_r+0x1c>
 8011ba4:	42a9      	cmp	r1, r5
 8011ba6:	d904      	bls.n	8011bb2 <_malloc_r+0x26>
 8011ba8:	230c      	movs	r3, #12
 8011baa:	6033      	str	r3, [r6, #0]
 8011bac:	2000      	movs	r0, #0
 8011bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011c88 <_malloc_r+0xfc>
 8011bb6:	f000 f869 	bl	8011c8c <__malloc_lock>
 8011bba:	f8d8 3000 	ldr.w	r3, [r8]
 8011bbe:	461c      	mov	r4, r3
 8011bc0:	bb44      	cbnz	r4, 8011c14 <_malloc_r+0x88>
 8011bc2:	4629      	mov	r1, r5
 8011bc4:	4630      	mov	r0, r6
 8011bc6:	f7ff ffbf 	bl	8011b48 <sbrk_aligned>
 8011bca:	1c43      	adds	r3, r0, #1
 8011bcc:	4604      	mov	r4, r0
 8011bce:	d158      	bne.n	8011c82 <_malloc_r+0xf6>
 8011bd0:	f8d8 4000 	ldr.w	r4, [r8]
 8011bd4:	4627      	mov	r7, r4
 8011bd6:	2f00      	cmp	r7, #0
 8011bd8:	d143      	bne.n	8011c62 <_malloc_r+0xd6>
 8011bda:	2c00      	cmp	r4, #0
 8011bdc:	d04b      	beq.n	8011c76 <_malloc_r+0xea>
 8011bde:	6823      	ldr	r3, [r4, #0]
 8011be0:	4639      	mov	r1, r7
 8011be2:	4630      	mov	r0, r6
 8011be4:	eb04 0903 	add.w	r9, r4, r3
 8011be8:	f000 fe5e 	bl	80128a8 <_sbrk_r>
 8011bec:	4581      	cmp	r9, r0
 8011bee:	d142      	bne.n	8011c76 <_malloc_r+0xea>
 8011bf0:	6821      	ldr	r1, [r4, #0]
 8011bf2:	1a6d      	subs	r5, r5, r1
 8011bf4:	4629      	mov	r1, r5
 8011bf6:	4630      	mov	r0, r6
 8011bf8:	f7ff ffa6 	bl	8011b48 <sbrk_aligned>
 8011bfc:	3001      	adds	r0, #1
 8011bfe:	d03a      	beq.n	8011c76 <_malloc_r+0xea>
 8011c00:	6823      	ldr	r3, [r4, #0]
 8011c02:	442b      	add	r3, r5
 8011c04:	6023      	str	r3, [r4, #0]
 8011c06:	f8d8 3000 	ldr.w	r3, [r8]
 8011c0a:	685a      	ldr	r2, [r3, #4]
 8011c0c:	bb62      	cbnz	r2, 8011c68 <_malloc_r+0xdc>
 8011c0e:	f8c8 7000 	str.w	r7, [r8]
 8011c12:	e00f      	b.n	8011c34 <_malloc_r+0xa8>
 8011c14:	6822      	ldr	r2, [r4, #0]
 8011c16:	1b52      	subs	r2, r2, r5
 8011c18:	d420      	bmi.n	8011c5c <_malloc_r+0xd0>
 8011c1a:	2a0b      	cmp	r2, #11
 8011c1c:	d917      	bls.n	8011c4e <_malloc_r+0xc2>
 8011c1e:	1961      	adds	r1, r4, r5
 8011c20:	42a3      	cmp	r3, r4
 8011c22:	6025      	str	r5, [r4, #0]
 8011c24:	bf18      	it	ne
 8011c26:	6059      	strne	r1, [r3, #4]
 8011c28:	6863      	ldr	r3, [r4, #4]
 8011c2a:	bf08      	it	eq
 8011c2c:	f8c8 1000 	streq.w	r1, [r8]
 8011c30:	5162      	str	r2, [r4, r5]
 8011c32:	604b      	str	r3, [r1, #4]
 8011c34:	4630      	mov	r0, r6
 8011c36:	f000 f82f 	bl	8011c98 <__malloc_unlock>
 8011c3a:	f104 000b 	add.w	r0, r4, #11
 8011c3e:	1d23      	adds	r3, r4, #4
 8011c40:	f020 0007 	bic.w	r0, r0, #7
 8011c44:	1ac2      	subs	r2, r0, r3
 8011c46:	bf1c      	itt	ne
 8011c48:	1a1b      	subne	r3, r3, r0
 8011c4a:	50a3      	strne	r3, [r4, r2]
 8011c4c:	e7af      	b.n	8011bae <_malloc_r+0x22>
 8011c4e:	6862      	ldr	r2, [r4, #4]
 8011c50:	42a3      	cmp	r3, r4
 8011c52:	bf0c      	ite	eq
 8011c54:	f8c8 2000 	streq.w	r2, [r8]
 8011c58:	605a      	strne	r2, [r3, #4]
 8011c5a:	e7eb      	b.n	8011c34 <_malloc_r+0xa8>
 8011c5c:	4623      	mov	r3, r4
 8011c5e:	6864      	ldr	r4, [r4, #4]
 8011c60:	e7ae      	b.n	8011bc0 <_malloc_r+0x34>
 8011c62:	463c      	mov	r4, r7
 8011c64:	687f      	ldr	r7, [r7, #4]
 8011c66:	e7b6      	b.n	8011bd6 <_malloc_r+0x4a>
 8011c68:	461a      	mov	r2, r3
 8011c6a:	685b      	ldr	r3, [r3, #4]
 8011c6c:	42a3      	cmp	r3, r4
 8011c6e:	d1fb      	bne.n	8011c68 <_malloc_r+0xdc>
 8011c70:	2300      	movs	r3, #0
 8011c72:	6053      	str	r3, [r2, #4]
 8011c74:	e7de      	b.n	8011c34 <_malloc_r+0xa8>
 8011c76:	230c      	movs	r3, #12
 8011c78:	6033      	str	r3, [r6, #0]
 8011c7a:	4630      	mov	r0, r6
 8011c7c:	f000 f80c 	bl	8011c98 <__malloc_unlock>
 8011c80:	e794      	b.n	8011bac <_malloc_r+0x20>
 8011c82:	6005      	str	r5, [r0, #0]
 8011c84:	e7d6      	b.n	8011c34 <_malloc_r+0xa8>
 8011c86:	bf00      	nop
 8011c88:	200005d0 	.word	0x200005d0

08011c8c <__malloc_lock>:
 8011c8c:	4801      	ldr	r0, [pc, #4]	@ (8011c94 <__malloc_lock+0x8>)
 8011c8e:	f000 be58 	b.w	8012942 <__retarget_lock_acquire_recursive>
 8011c92:	bf00      	nop
 8011c94:	20000714 	.word	0x20000714

08011c98 <__malloc_unlock>:
 8011c98:	4801      	ldr	r0, [pc, #4]	@ (8011ca0 <__malloc_unlock+0x8>)
 8011c9a:	f000 be53 	b.w	8012944 <__retarget_lock_release_recursive>
 8011c9e:	bf00      	nop
 8011ca0:	20000714 	.word	0x20000714

08011ca4 <__cvt>:
 8011ca4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011ca8:	ec57 6b10 	vmov	r6, r7, d0
 8011cac:	2f00      	cmp	r7, #0
 8011cae:	460c      	mov	r4, r1
 8011cb0:	4619      	mov	r1, r3
 8011cb2:	463b      	mov	r3, r7
 8011cb4:	bfbb      	ittet	lt
 8011cb6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8011cba:	461f      	movlt	r7, r3
 8011cbc:	2300      	movge	r3, #0
 8011cbe:	232d      	movlt	r3, #45	@ 0x2d
 8011cc0:	700b      	strb	r3, [r1, #0]
 8011cc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011cc4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8011cc8:	4691      	mov	r9, r2
 8011cca:	f023 0820 	bic.w	r8, r3, #32
 8011cce:	bfbc      	itt	lt
 8011cd0:	4632      	movlt	r2, r6
 8011cd2:	4616      	movlt	r6, r2
 8011cd4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011cd8:	d005      	beq.n	8011ce6 <__cvt+0x42>
 8011cda:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8011cde:	d100      	bne.n	8011ce2 <__cvt+0x3e>
 8011ce0:	3401      	adds	r4, #1
 8011ce2:	2102      	movs	r1, #2
 8011ce4:	e000      	b.n	8011ce8 <__cvt+0x44>
 8011ce6:	2103      	movs	r1, #3
 8011ce8:	ab03      	add	r3, sp, #12
 8011cea:	9301      	str	r3, [sp, #4]
 8011cec:	ab02      	add	r3, sp, #8
 8011cee:	9300      	str	r3, [sp, #0]
 8011cf0:	ec47 6b10 	vmov	d0, r6, r7
 8011cf4:	4653      	mov	r3, sl
 8011cf6:	4622      	mov	r2, r4
 8011cf8:	f000 feb6 	bl	8012a68 <_dtoa_r>
 8011cfc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8011d00:	4605      	mov	r5, r0
 8011d02:	d119      	bne.n	8011d38 <__cvt+0x94>
 8011d04:	f019 0f01 	tst.w	r9, #1
 8011d08:	d00e      	beq.n	8011d28 <__cvt+0x84>
 8011d0a:	eb00 0904 	add.w	r9, r0, r4
 8011d0e:	2200      	movs	r2, #0
 8011d10:	2300      	movs	r3, #0
 8011d12:	4630      	mov	r0, r6
 8011d14:	4639      	mov	r1, r7
 8011d16:	f7ee fedf 	bl	8000ad8 <__aeabi_dcmpeq>
 8011d1a:	b108      	cbz	r0, 8011d20 <__cvt+0x7c>
 8011d1c:	f8cd 900c 	str.w	r9, [sp, #12]
 8011d20:	2230      	movs	r2, #48	@ 0x30
 8011d22:	9b03      	ldr	r3, [sp, #12]
 8011d24:	454b      	cmp	r3, r9
 8011d26:	d31e      	bcc.n	8011d66 <__cvt+0xc2>
 8011d28:	9b03      	ldr	r3, [sp, #12]
 8011d2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011d2c:	1b5b      	subs	r3, r3, r5
 8011d2e:	4628      	mov	r0, r5
 8011d30:	6013      	str	r3, [r2, #0]
 8011d32:	b004      	add	sp, #16
 8011d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d38:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011d3c:	eb00 0904 	add.w	r9, r0, r4
 8011d40:	d1e5      	bne.n	8011d0e <__cvt+0x6a>
 8011d42:	7803      	ldrb	r3, [r0, #0]
 8011d44:	2b30      	cmp	r3, #48	@ 0x30
 8011d46:	d10a      	bne.n	8011d5e <__cvt+0xba>
 8011d48:	2200      	movs	r2, #0
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	4630      	mov	r0, r6
 8011d4e:	4639      	mov	r1, r7
 8011d50:	f7ee fec2 	bl	8000ad8 <__aeabi_dcmpeq>
 8011d54:	b918      	cbnz	r0, 8011d5e <__cvt+0xba>
 8011d56:	f1c4 0401 	rsb	r4, r4, #1
 8011d5a:	f8ca 4000 	str.w	r4, [sl]
 8011d5e:	f8da 3000 	ldr.w	r3, [sl]
 8011d62:	4499      	add	r9, r3
 8011d64:	e7d3      	b.n	8011d0e <__cvt+0x6a>
 8011d66:	1c59      	adds	r1, r3, #1
 8011d68:	9103      	str	r1, [sp, #12]
 8011d6a:	701a      	strb	r2, [r3, #0]
 8011d6c:	e7d9      	b.n	8011d22 <__cvt+0x7e>

08011d6e <__exponent>:
 8011d6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011d70:	2900      	cmp	r1, #0
 8011d72:	bfba      	itte	lt
 8011d74:	4249      	neglt	r1, r1
 8011d76:	232d      	movlt	r3, #45	@ 0x2d
 8011d78:	232b      	movge	r3, #43	@ 0x2b
 8011d7a:	2909      	cmp	r1, #9
 8011d7c:	7002      	strb	r2, [r0, #0]
 8011d7e:	7043      	strb	r3, [r0, #1]
 8011d80:	dd29      	ble.n	8011dd6 <__exponent+0x68>
 8011d82:	f10d 0307 	add.w	r3, sp, #7
 8011d86:	461d      	mov	r5, r3
 8011d88:	270a      	movs	r7, #10
 8011d8a:	461a      	mov	r2, r3
 8011d8c:	fbb1 f6f7 	udiv	r6, r1, r7
 8011d90:	fb07 1416 	mls	r4, r7, r6, r1
 8011d94:	3430      	adds	r4, #48	@ 0x30
 8011d96:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011d9a:	460c      	mov	r4, r1
 8011d9c:	2c63      	cmp	r4, #99	@ 0x63
 8011d9e:	f103 33ff 	add.w	r3, r3, #4294967295
 8011da2:	4631      	mov	r1, r6
 8011da4:	dcf1      	bgt.n	8011d8a <__exponent+0x1c>
 8011da6:	3130      	adds	r1, #48	@ 0x30
 8011da8:	1e94      	subs	r4, r2, #2
 8011daa:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011dae:	1c41      	adds	r1, r0, #1
 8011db0:	4623      	mov	r3, r4
 8011db2:	42ab      	cmp	r3, r5
 8011db4:	d30a      	bcc.n	8011dcc <__exponent+0x5e>
 8011db6:	f10d 0309 	add.w	r3, sp, #9
 8011dba:	1a9b      	subs	r3, r3, r2
 8011dbc:	42ac      	cmp	r4, r5
 8011dbe:	bf88      	it	hi
 8011dc0:	2300      	movhi	r3, #0
 8011dc2:	3302      	adds	r3, #2
 8011dc4:	4403      	add	r3, r0
 8011dc6:	1a18      	subs	r0, r3, r0
 8011dc8:	b003      	add	sp, #12
 8011dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011dcc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011dd0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011dd4:	e7ed      	b.n	8011db2 <__exponent+0x44>
 8011dd6:	2330      	movs	r3, #48	@ 0x30
 8011dd8:	3130      	adds	r1, #48	@ 0x30
 8011dda:	7083      	strb	r3, [r0, #2]
 8011ddc:	70c1      	strb	r1, [r0, #3]
 8011dde:	1d03      	adds	r3, r0, #4
 8011de0:	e7f1      	b.n	8011dc6 <__exponent+0x58>
	...

08011de4 <_printf_float>:
 8011de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011de8:	b08d      	sub	sp, #52	@ 0x34
 8011dea:	460c      	mov	r4, r1
 8011dec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011df0:	4616      	mov	r6, r2
 8011df2:	461f      	mov	r7, r3
 8011df4:	4605      	mov	r5, r0
 8011df6:	f000 fd0b 	bl	8012810 <_localeconv_r>
 8011dfa:	6803      	ldr	r3, [r0, #0]
 8011dfc:	9304      	str	r3, [sp, #16]
 8011dfe:	4618      	mov	r0, r3
 8011e00:	f7ee fa3e 	bl	8000280 <strlen>
 8011e04:	2300      	movs	r3, #0
 8011e06:	930a      	str	r3, [sp, #40]	@ 0x28
 8011e08:	f8d8 3000 	ldr.w	r3, [r8]
 8011e0c:	9005      	str	r0, [sp, #20]
 8011e0e:	3307      	adds	r3, #7
 8011e10:	f023 0307 	bic.w	r3, r3, #7
 8011e14:	f103 0208 	add.w	r2, r3, #8
 8011e18:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011e1c:	f8d4 b000 	ldr.w	fp, [r4]
 8011e20:	f8c8 2000 	str.w	r2, [r8]
 8011e24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011e28:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8011e2c:	9307      	str	r3, [sp, #28]
 8011e2e:	f8cd 8018 	str.w	r8, [sp, #24]
 8011e32:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8011e36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011e3a:	4b9c      	ldr	r3, [pc, #624]	@ (80120ac <_printf_float+0x2c8>)
 8011e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8011e40:	f7ee fe7c 	bl	8000b3c <__aeabi_dcmpun>
 8011e44:	bb70      	cbnz	r0, 8011ea4 <_printf_float+0xc0>
 8011e46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011e4a:	4b98      	ldr	r3, [pc, #608]	@ (80120ac <_printf_float+0x2c8>)
 8011e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8011e50:	f7ee fe56 	bl	8000b00 <__aeabi_dcmple>
 8011e54:	bb30      	cbnz	r0, 8011ea4 <_printf_float+0xc0>
 8011e56:	2200      	movs	r2, #0
 8011e58:	2300      	movs	r3, #0
 8011e5a:	4640      	mov	r0, r8
 8011e5c:	4649      	mov	r1, r9
 8011e5e:	f7ee fe45 	bl	8000aec <__aeabi_dcmplt>
 8011e62:	b110      	cbz	r0, 8011e6a <_printf_float+0x86>
 8011e64:	232d      	movs	r3, #45	@ 0x2d
 8011e66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011e6a:	4a91      	ldr	r2, [pc, #580]	@ (80120b0 <_printf_float+0x2cc>)
 8011e6c:	4b91      	ldr	r3, [pc, #580]	@ (80120b4 <_printf_float+0x2d0>)
 8011e6e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011e72:	bf94      	ite	ls
 8011e74:	4690      	movls	r8, r2
 8011e76:	4698      	movhi	r8, r3
 8011e78:	2303      	movs	r3, #3
 8011e7a:	6123      	str	r3, [r4, #16]
 8011e7c:	f02b 0304 	bic.w	r3, fp, #4
 8011e80:	6023      	str	r3, [r4, #0]
 8011e82:	f04f 0900 	mov.w	r9, #0
 8011e86:	9700      	str	r7, [sp, #0]
 8011e88:	4633      	mov	r3, r6
 8011e8a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011e8c:	4621      	mov	r1, r4
 8011e8e:	4628      	mov	r0, r5
 8011e90:	f000 f9d2 	bl	8012238 <_printf_common>
 8011e94:	3001      	adds	r0, #1
 8011e96:	f040 808d 	bne.w	8011fb4 <_printf_float+0x1d0>
 8011e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8011e9e:	b00d      	add	sp, #52	@ 0x34
 8011ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ea4:	4642      	mov	r2, r8
 8011ea6:	464b      	mov	r3, r9
 8011ea8:	4640      	mov	r0, r8
 8011eaa:	4649      	mov	r1, r9
 8011eac:	f7ee fe46 	bl	8000b3c <__aeabi_dcmpun>
 8011eb0:	b140      	cbz	r0, 8011ec4 <_printf_float+0xe0>
 8011eb2:	464b      	mov	r3, r9
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	bfbc      	itt	lt
 8011eb8:	232d      	movlt	r3, #45	@ 0x2d
 8011eba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011ebe:	4a7e      	ldr	r2, [pc, #504]	@ (80120b8 <_printf_float+0x2d4>)
 8011ec0:	4b7e      	ldr	r3, [pc, #504]	@ (80120bc <_printf_float+0x2d8>)
 8011ec2:	e7d4      	b.n	8011e6e <_printf_float+0x8a>
 8011ec4:	6863      	ldr	r3, [r4, #4]
 8011ec6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8011eca:	9206      	str	r2, [sp, #24]
 8011ecc:	1c5a      	adds	r2, r3, #1
 8011ece:	d13b      	bne.n	8011f48 <_printf_float+0x164>
 8011ed0:	2306      	movs	r3, #6
 8011ed2:	6063      	str	r3, [r4, #4]
 8011ed4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8011ed8:	2300      	movs	r3, #0
 8011eda:	6022      	str	r2, [r4, #0]
 8011edc:	9303      	str	r3, [sp, #12]
 8011ede:	ab0a      	add	r3, sp, #40	@ 0x28
 8011ee0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8011ee4:	ab09      	add	r3, sp, #36	@ 0x24
 8011ee6:	9300      	str	r3, [sp, #0]
 8011ee8:	6861      	ldr	r1, [r4, #4]
 8011eea:	ec49 8b10 	vmov	d0, r8, r9
 8011eee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011ef2:	4628      	mov	r0, r5
 8011ef4:	f7ff fed6 	bl	8011ca4 <__cvt>
 8011ef8:	9b06      	ldr	r3, [sp, #24]
 8011efa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011efc:	2b47      	cmp	r3, #71	@ 0x47
 8011efe:	4680      	mov	r8, r0
 8011f00:	d129      	bne.n	8011f56 <_printf_float+0x172>
 8011f02:	1cc8      	adds	r0, r1, #3
 8011f04:	db02      	blt.n	8011f0c <_printf_float+0x128>
 8011f06:	6863      	ldr	r3, [r4, #4]
 8011f08:	4299      	cmp	r1, r3
 8011f0a:	dd41      	ble.n	8011f90 <_printf_float+0x1ac>
 8011f0c:	f1aa 0a02 	sub.w	sl, sl, #2
 8011f10:	fa5f fa8a 	uxtb.w	sl, sl
 8011f14:	3901      	subs	r1, #1
 8011f16:	4652      	mov	r2, sl
 8011f18:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011f1c:	9109      	str	r1, [sp, #36]	@ 0x24
 8011f1e:	f7ff ff26 	bl	8011d6e <__exponent>
 8011f22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011f24:	1813      	adds	r3, r2, r0
 8011f26:	2a01      	cmp	r2, #1
 8011f28:	4681      	mov	r9, r0
 8011f2a:	6123      	str	r3, [r4, #16]
 8011f2c:	dc02      	bgt.n	8011f34 <_printf_float+0x150>
 8011f2e:	6822      	ldr	r2, [r4, #0]
 8011f30:	07d2      	lsls	r2, r2, #31
 8011f32:	d501      	bpl.n	8011f38 <_printf_float+0x154>
 8011f34:	3301      	adds	r3, #1
 8011f36:	6123      	str	r3, [r4, #16]
 8011f38:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d0a2      	beq.n	8011e86 <_printf_float+0xa2>
 8011f40:	232d      	movs	r3, #45	@ 0x2d
 8011f42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011f46:	e79e      	b.n	8011e86 <_printf_float+0xa2>
 8011f48:	9a06      	ldr	r2, [sp, #24]
 8011f4a:	2a47      	cmp	r2, #71	@ 0x47
 8011f4c:	d1c2      	bne.n	8011ed4 <_printf_float+0xf0>
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d1c0      	bne.n	8011ed4 <_printf_float+0xf0>
 8011f52:	2301      	movs	r3, #1
 8011f54:	e7bd      	b.n	8011ed2 <_printf_float+0xee>
 8011f56:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011f5a:	d9db      	bls.n	8011f14 <_printf_float+0x130>
 8011f5c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8011f60:	d118      	bne.n	8011f94 <_printf_float+0x1b0>
 8011f62:	2900      	cmp	r1, #0
 8011f64:	6863      	ldr	r3, [r4, #4]
 8011f66:	dd0b      	ble.n	8011f80 <_printf_float+0x19c>
 8011f68:	6121      	str	r1, [r4, #16]
 8011f6a:	b913      	cbnz	r3, 8011f72 <_printf_float+0x18e>
 8011f6c:	6822      	ldr	r2, [r4, #0]
 8011f6e:	07d0      	lsls	r0, r2, #31
 8011f70:	d502      	bpl.n	8011f78 <_printf_float+0x194>
 8011f72:	3301      	adds	r3, #1
 8011f74:	440b      	add	r3, r1
 8011f76:	6123      	str	r3, [r4, #16]
 8011f78:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011f7a:	f04f 0900 	mov.w	r9, #0
 8011f7e:	e7db      	b.n	8011f38 <_printf_float+0x154>
 8011f80:	b913      	cbnz	r3, 8011f88 <_printf_float+0x1a4>
 8011f82:	6822      	ldr	r2, [r4, #0]
 8011f84:	07d2      	lsls	r2, r2, #31
 8011f86:	d501      	bpl.n	8011f8c <_printf_float+0x1a8>
 8011f88:	3302      	adds	r3, #2
 8011f8a:	e7f4      	b.n	8011f76 <_printf_float+0x192>
 8011f8c:	2301      	movs	r3, #1
 8011f8e:	e7f2      	b.n	8011f76 <_printf_float+0x192>
 8011f90:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8011f94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011f96:	4299      	cmp	r1, r3
 8011f98:	db05      	blt.n	8011fa6 <_printf_float+0x1c2>
 8011f9a:	6823      	ldr	r3, [r4, #0]
 8011f9c:	6121      	str	r1, [r4, #16]
 8011f9e:	07d8      	lsls	r0, r3, #31
 8011fa0:	d5ea      	bpl.n	8011f78 <_printf_float+0x194>
 8011fa2:	1c4b      	adds	r3, r1, #1
 8011fa4:	e7e7      	b.n	8011f76 <_printf_float+0x192>
 8011fa6:	2900      	cmp	r1, #0
 8011fa8:	bfd4      	ite	le
 8011faa:	f1c1 0202 	rsble	r2, r1, #2
 8011fae:	2201      	movgt	r2, #1
 8011fb0:	4413      	add	r3, r2
 8011fb2:	e7e0      	b.n	8011f76 <_printf_float+0x192>
 8011fb4:	6823      	ldr	r3, [r4, #0]
 8011fb6:	055a      	lsls	r2, r3, #21
 8011fb8:	d407      	bmi.n	8011fca <_printf_float+0x1e6>
 8011fba:	6923      	ldr	r3, [r4, #16]
 8011fbc:	4642      	mov	r2, r8
 8011fbe:	4631      	mov	r1, r6
 8011fc0:	4628      	mov	r0, r5
 8011fc2:	47b8      	blx	r7
 8011fc4:	3001      	adds	r0, #1
 8011fc6:	d12b      	bne.n	8012020 <_printf_float+0x23c>
 8011fc8:	e767      	b.n	8011e9a <_printf_float+0xb6>
 8011fca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011fce:	f240 80dd 	bls.w	801218c <_printf_float+0x3a8>
 8011fd2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011fd6:	2200      	movs	r2, #0
 8011fd8:	2300      	movs	r3, #0
 8011fda:	f7ee fd7d 	bl	8000ad8 <__aeabi_dcmpeq>
 8011fde:	2800      	cmp	r0, #0
 8011fe0:	d033      	beq.n	801204a <_printf_float+0x266>
 8011fe2:	4a37      	ldr	r2, [pc, #220]	@ (80120c0 <_printf_float+0x2dc>)
 8011fe4:	2301      	movs	r3, #1
 8011fe6:	4631      	mov	r1, r6
 8011fe8:	4628      	mov	r0, r5
 8011fea:	47b8      	blx	r7
 8011fec:	3001      	adds	r0, #1
 8011fee:	f43f af54 	beq.w	8011e9a <_printf_float+0xb6>
 8011ff2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8011ff6:	4543      	cmp	r3, r8
 8011ff8:	db02      	blt.n	8012000 <_printf_float+0x21c>
 8011ffa:	6823      	ldr	r3, [r4, #0]
 8011ffc:	07d8      	lsls	r0, r3, #31
 8011ffe:	d50f      	bpl.n	8012020 <_printf_float+0x23c>
 8012000:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012004:	4631      	mov	r1, r6
 8012006:	4628      	mov	r0, r5
 8012008:	47b8      	blx	r7
 801200a:	3001      	adds	r0, #1
 801200c:	f43f af45 	beq.w	8011e9a <_printf_float+0xb6>
 8012010:	f04f 0900 	mov.w	r9, #0
 8012014:	f108 38ff 	add.w	r8, r8, #4294967295
 8012018:	f104 0a1a 	add.w	sl, r4, #26
 801201c:	45c8      	cmp	r8, r9
 801201e:	dc09      	bgt.n	8012034 <_printf_float+0x250>
 8012020:	6823      	ldr	r3, [r4, #0]
 8012022:	079b      	lsls	r3, r3, #30
 8012024:	f100 8103 	bmi.w	801222e <_printf_float+0x44a>
 8012028:	68e0      	ldr	r0, [r4, #12]
 801202a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801202c:	4298      	cmp	r0, r3
 801202e:	bfb8      	it	lt
 8012030:	4618      	movlt	r0, r3
 8012032:	e734      	b.n	8011e9e <_printf_float+0xba>
 8012034:	2301      	movs	r3, #1
 8012036:	4652      	mov	r2, sl
 8012038:	4631      	mov	r1, r6
 801203a:	4628      	mov	r0, r5
 801203c:	47b8      	blx	r7
 801203e:	3001      	adds	r0, #1
 8012040:	f43f af2b 	beq.w	8011e9a <_printf_float+0xb6>
 8012044:	f109 0901 	add.w	r9, r9, #1
 8012048:	e7e8      	b.n	801201c <_printf_float+0x238>
 801204a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801204c:	2b00      	cmp	r3, #0
 801204e:	dc39      	bgt.n	80120c4 <_printf_float+0x2e0>
 8012050:	4a1b      	ldr	r2, [pc, #108]	@ (80120c0 <_printf_float+0x2dc>)
 8012052:	2301      	movs	r3, #1
 8012054:	4631      	mov	r1, r6
 8012056:	4628      	mov	r0, r5
 8012058:	47b8      	blx	r7
 801205a:	3001      	adds	r0, #1
 801205c:	f43f af1d 	beq.w	8011e9a <_printf_float+0xb6>
 8012060:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012064:	ea59 0303 	orrs.w	r3, r9, r3
 8012068:	d102      	bne.n	8012070 <_printf_float+0x28c>
 801206a:	6823      	ldr	r3, [r4, #0]
 801206c:	07d9      	lsls	r1, r3, #31
 801206e:	d5d7      	bpl.n	8012020 <_printf_float+0x23c>
 8012070:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012074:	4631      	mov	r1, r6
 8012076:	4628      	mov	r0, r5
 8012078:	47b8      	blx	r7
 801207a:	3001      	adds	r0, #1
 801207c:	f43f af0d 	beq.w	8011e9a <_printf_float+0xb6>
 8012080:	f04f 0a00 	mov.w	sl, #0
 8012084:	f104 0b1a 	add.w	fp, r4, #26
 8012088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801208a:	425b      	negs	r3, r3
 801208c:	4553      	cmp	r3, sl
 801208e:	dc01      	bgt.n	8012094 <_printf_float+0x2b0>
 8012090:	464b      	mov	r3, r9
 8012092:	e793      	b.n	8011fbc <_printf_float+0x1d8>
 8012094:	2301      	movs	r3, #1
 8012096:	465a      	mov	r2, fp
 8012098:	4631      	mov	r1, r6
 801209a:	4628      	mov	r0, r5
 801209c:	47b8      	blx	r7
 801209e:	3001      	adds	r0, #1
 80120a0:	f43f aefb 	beq.w	8011e9a <_printf_float+0xb6>
 80120a4:	f10a 0a01 	add.w	sl, sl, #1
 80120a8:	e7ee      	b.n	8012088 <_printf_float+0x2a4>
 80120aa:	bf00      	nop
 80120ac:	7fefffff 	.word	0x7fefffff
 80120b0:	08016260 	.word	0x08016260
 80120b4:	08016264 	.word	0x08016264
 80120b8:	08016268 	.word	0x08016268
 80120bc:	0801626c 	.word	0x0801626c
 80120c0:	08016270 	.word	0x08016270
 80120c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80120c6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80120ca:	4553      	cmp	r3, sl
 80120cc:	bfa8      	it	ge
 80120ce:	4653      	movge	r3, sl
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	4699      	mov	r9, r3
 80120d4:	dc36      	bgt.n	8012144 <_printf_float+0x360>
 80120d6:	f04f 0b00 	mov.w	fp, #0
 80120da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80120de:	f104 021a 	add.w	r2, r4, #26
 80120e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80120e4:	9306      	str	r3, [sp, #24]
 80120e6:	eba3 0309 	sub.w	r3, r3, r9
 80120ea:	455b      	cmp	r3, fp
 80120ec:	dc31      	bgt.n	8012152 <_printf_float+0x36e>
 80120ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80120f0:	459a      	cmp	sl, r3
 80120f2:	dc3a      	bgt.n	801216a <_printf_float+0x386>
 80120f4:	6823      	ldr	r3, [r4, #0]
 80120f6:	07da      	lsls	r2, r3, #31
 80120f8:	d437      	bmi.n	801216a <_printf_float+0x386>
 80120fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80120fc:	ebaa 0903 	sub.w	r9, sl, r3
 8012100:	9b06      	ldr	r3, [sp, #24]
 8012102:	ebaa 0303 	sub.w	r3, sl, r3
 8012106:	4599      	cmp	r9, r3
 8012108:	bfa8      	it	ge
 801210a:	4699      	movge	r9, r3
 801210c:	f1b9 0f00 	cmp.w	r9, #0
 8012110:	dc33      	bgt.n	801217a <_printf_float+0x396>
 8012112:	f04f 0800 	mov.w	r8, #0
 8012116:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801211a:	f104 0b1a 	add.w	fp, r4, #26
 801211e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012120:	ebaa 0303 	sub.w	r3, sl, r3
 8012124:	eba3 0309 	sub.w	r3, r3, r9
 8012128:	4543      	cmp	r3, r8
 801212a:	f77f af79 	ble.w	8012020 <_printf_float+0x23c>
 801212e:	2301      	movs	r3, #1
 8012130:	465a      	mov	r2, fp
 8012132:	4631      	mov	r1, r6
 8012134:	4628      	mov	r0, r5
 8012136:	47b8      	blx	r7
 8012138:	3001      	adds	r0, #1
 801213a:	f43f aeae 	beq.w	8011e9a <_printf_float+0xb6>
 801213e:	f108 0801 	add.w	r8, r8, #1
 8012142:	e7ec      	b.n	801211e <_printf_float+0x33a>
 8012144:	4642      	mov	r2, r8
 8012146:	4631      	mov	r1, r6
 8012148:	4628      	mov	r0, r5
 801214a:	47b8      	blx	r7
 801214c:	3001      	adds	r0, #1
 801214e:	d1c2      	bne.n	80120d6 <_printf_float+0x2f2>
 8012150:	e6a3      	b.n	8011e9a <_printf_float+0xb6>
 8012152:	2301      	movs	r3, #1
 8012154:	4631      	mov	r1, r6
 8012156:	4628      	mov	r0, r5
 8012158:	9206      	str	r2, [sp, #24]
 801215a:	47b8      	blx	r7
 801215c:	3001      	adds	r0, #1
 801215e:	f43f ae9c 	beq.w	8011e9a <_printf_float+0xb6>
 8012162:	9a06      	ldr	r2, [sp, #24]
 8012164:	f10b 0b01 	add.w	fp, fp, #1
 8012168:	e7bb      	b.n	80120e2 <_printf_float+0x2fe>
 801216a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801216e:	4631      	mov	r1, r6
 8012170:	4628      	mov	r0, r5
 8012172:	47b8      	blx	r7
 8012174:	3001      	adds	r0, #1
 8012176:	d1c0      	bne.n	80120fa <_printf_float+0x316>
 8012178:	e68f      	b.n	8011e9a <_printf_float+0xb6>
 801217a:	9a06      	ldr	r2, [sp, #24]
 801217c:	464b      	mov	r3, r9
 801217e:	4442      	add	r2, r8
 8012180:	4631      	mov	r1, r6
 8012182:	4628      	mov	r0, r5
 8012184:	47b8      	blx	r7
 8012186:	3001      	adds	r0, #1
 8012188:	d1c3      	bne.n	8012112 <_printf_float+0x32e>
 801218a:	e686      	b.n	8011e9a <_printf_float+0xb6>
 801218c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012190:	f1ba 0f01 	cmp.w	sl, #1
 8012194:	dc01      	bgt.n	801219a <_printf_float+0x3b6>
 8012196:	07db      	lsls	r3, r3, #31
 8012198:	d536      	bpl.n	8012208 <_printf_float+0x424>
 801219a:	2301      	movs	r3, #1
 801219c:	4642      	mov	r2, r8
 801219e:	4631      	mov	r1, r6
 80121a0:	4628      	mov	r0, r5
 80121a2:	47b8      	blx	r7
 80121a4:	3001      	adds	r0, #1
 80121a6:	f43f ae78 	beq.w	8011e9a <_printf_float+0xb6>
 80121aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80121ae:	4631      	mov	r1, r6
 80121b0:	4628      	mov	r0, r5
 80121b2:	47b8      	blx	r7
 80121b4:	3001      	adds	r0, #1
 80121b6:	f43f ae70 	beq.w	8011e9a <_printf_float+0xb6>
 80121ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80121be:	2200      	movs	r2, #0
 80121c0:	2300      	movs	r3, #0
 80121c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80121c6:	f7ee fc87 	bl	8000ad8 <__aeabi_dcmpeq>
 80121ca:	b9c0      	cbnz	r0, 80121fe <_printf_float+0x41a>
 80121cc:	4653      	mov	r3, sl
 80121ce:	f108 0201 	add.w	r2, r8, #1
 80121d2:	4631      	mov	r1, r6
 80121d4:	4628      	mov	r0, r5
 80121d6:	47b8      	blx	r7
 80121d8:	3001      	adds	r0, #1
 80121da:	d10c      	bne.n	80121f6 <_printf_float+0x412>
 80121dc:	e65d      	b.n	8011e9a <_printf_float+0xb6>
 80121de:	2301      	movs	r3, #1
 80121e0:	465a      	mov	r2, fp
 80121e2:	4631      	mov	r1, r6
 80121e4:	4628      	mov	r0, r5
 80121e6:	47b8      	blx	r7
 80121e8:	3001      	adds	r0, #1
 80121ea:	f43f ae56 	beq.w	8011e9a <_printf_float+0xb6>
 80121ee:	f108 0801 	add.w	r8, r8, #1
 80121f2:	45d0      	cmp	r8, sl
 80121f4:	dbf3      	blt.n	80121de <_printf_float+0x3fa>
 80121f6:	464b      	mov	r3, r9
 80121f8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80121fc:	e6df      	b.n	8011fbe <_printf_float+0x1da>
 80121fe:	f04f 0800 	mov.w	r8, #0
 8012202:	f104 0b1a 	add.w	fp, r4, #26
 8012206:	e7f4      	b.n	80121f2 <_printf_float+0x40e>
 8012208:	2301      	movs	r3, #1
 801220a:	4642      	mov	r2, r8
 801220c:	e7e1      	b.n	80121d2 <_printf_float+0x3ee>
 801220e:	2301      	movs	r3, #1
 8012210:	464a      	mov	r2, r9
 8012212:	4631      	mov	r1, r6
 8012214:	4628      	mov	r0, r5
 8012216:	47b8      	blx	r7
 8012218:	3001      	adds	r0, #1
 801221a:	f43f ae3e 	beq.w	8011e9a <_printf_float+0xb6>
 801221e:	f108 0801 	add.w	r8, r8, #1
 8012222:	68e3      	ldr	r3, [r4, #12]
 8012224:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012226:	1a5b      	subs	r3, r3, r1
 8012228:	4543      	cmp	r3, r8
 801222a:	dcf0      	bgt.n	801220e <_printf_float+0x42a>
 801222c:	e6fc      	b.n	8012028 <_printf_float+0x244>
 801222e:	f04f 0800 	mov.w	r8, #0
 8012232:	f104 0919 	add.w	r9, r4, #25
 8012236:	e7f4      	b.n	8012222 <_printf_float+0x43e>

08012238 <_printf_common>:
 8012238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801223c:	4616      	mov	r6, r2
 801223e:	4698      	mov	r8, r3
 8012240:	688a      	ldr	r2, [r1, #8]
 8012242:	690b      	ldr	r3, [r1, #16]
 8012244:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012248:	4293      	cmp	r3, r2
 801224a:	bfb8      	it	lt
 801224c:	4613      	movlt	r3, r2
 801224e:	6033      	str	r3, [r6, #0]
 8012250:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012254:	4607      	mov	r7, r0
 8012256:	460c      	mov	r4, r1
 8012258:	b10a      	cbz	r2, 801225e <_printf_common+0x26>
 801225a:	3301      	adds	r3, #1
 801225c:	6033      	str	r3, [r6, #0]
 801225e:	6823      	ldr	r3, [r4, #0]
 8012260:	0699      	lsls	r1, r3, #26
 8012262:	bf42      	ittt	mi
 8012264:	6833      	ldrmi	r3, [r6, #0]
 8012266:	3302      	addmi	r3, #2
 8012268:	6033      	strmi	r3, [r6, #0]
 801226a:	6825      	ldr	r5, [r4, #0]
 801226c:	f015 0506 	ands.w	r5, r5, #6
 8012270:	d106      	bne.n	8012280 <_printf_common+0x48>
 8012272:	f104 0a19 	add.w	sl, r4, #25
 8012276:	68e3      	ldr	r3, [r4, #12]
 8012278:	6832      	ldr	r2, [r6, #0]
 801227a:	1a9b      	subs	r3, r3, r2
 801227c:	42ab      	cmp	r3, r5
 801227e:	dc26      	bgt.n	80122ce <_printf_common+0x96>
 8012280:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012284:	6822      	ldr	r2, [r4, #0]
 8012286:	3b00      	subs	r3, #0
 8012288:	bf18      	it	ne
 801228a:	2301      	movne	r3, #1
 801228c:	0692      	lsls	r2, r2, #26
 801228e:	d42b      	bmi.n	80122e8 <_printf_common+0xb0>
 8012290:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012294:	4641      	mov	r1, r8
 8012296:	4638      	mov	r0, r7
 8012298:	47c8      	blx	r9
 801229a:	3001      	adds	r0, #1
 801229c:	d01e      	beq.n	80122dc <_printf_common+0xa4>
 801229e:	6823      	ldr	r3, [r4, #0]
 80122a0:	6922      	ldr	r2, [r4, #16]
 80122a2:	f003 0306 	and.w	r3, r3, #6
 80122a6:	2b04      	cmp	r3, #4
 80122a8:	bf02      	ittt	eq
 80122aa:	68e5      	ldreq	r5, [r4, #12]
 80122ac:	6833      	ldreq	r3, [r6, #0]
 80122ae:	1aed      	subeq	r5, r5, r3
 80122b0:	68a3      	ldr	r3, [r4, #8]
 80122b2:	bf0c      	ite	eq
 80122b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80122b8:	2500      	movne	r5, #0
 80122ba:	4293      	cmp	r3, r2
 80122bc:	bfc4      	itt	gt
 80122be:	1a9b      	subgt	r3, r3, r2
 80122c0:	18ed      	addgt	r5, r5, r3
 80122c2:	2600      	movs	r6, #0
 80122c4:	341a      	adds	r4, #26
 80122c6:	42b5      	cmp	r5, r6
 80122c8:	d11a      	bne.n	8012300 <_printf_common+0xc8>
 80122ca:	2000      	movs	r0, #0
 80122cc:	e008      	b.n	80122e0 <_printf_common+0xa8>
 80122ce:	2301      	movs	r3, #1
 80122d0:	4652      	mov	r2, sl
 80122d2:	4641      	mov	r1, r8
 80122d4:	4638      	mov	r0, r7
 80122d6:	47c8      	blx	r9
 80122d8:	3001      	adds	r0, #1
 80122da:	d103      	bne.n	80122e4 <_printf_common+0xac>
 80122dc:	f04f 30ff 	mov.w	r0, #4294967295
 80122e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122e4:	3501      	adds	r5, #1
 80122e6:	e7c6      	b.n	8012276 <_printf_common+0x3e>
 80122e8:	18e1      	adds	r1, r4, r3
 80122ea:	1c5a      	adds	r2, r3, #1
 80122ec:	2030      	movs	r0, #48	@ 0x30
 80122ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80122f2:	4422      	add	r2, r4
 80122f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80122f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80122fc:	3302      	adds	r3, #2
 80122fe:	e7c7      	b.n	8012290 <_printf_common+0x58>
 8012300:	2301      	movs	r3, #1
 8012302:	4622      	mov	r2, r4
 8012304:	4641      	mov	r1, r8
 8012306:	4638      	mov	r0, r7
 8012308:	47c8      	blx	r9
 801230a:	3001      	adds	r0, #1
 801230c:	d0e6      	beq.n	80122dc <_printf_common+0xa4>
 801230e:	3601      	adds	r6, #1
 8012310:	e7d9      	b.n	80122c6 <_printf_common+0x8e>
	...

08012314 <_printf_i>:
 8012314:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012318:	7e0f      	ldrb	r7, [r1, #24]
 801231a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801231c:	2f78      	cmp	r7, #120	@ 0x78
 801231e:	4691      	mov	r9, r2
 8012320:	4680      	mov	r8, r0
 8012322:	460c      	mov	r4, r1
 8012324:	469a      	mov	sl, r3
 8012326:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801232a:	d807      	bhi.n	801233c <_printf_i+0x28>
 801232c:	2f62      	cmp	r7, #98	@ 0x62
 801232e:	d80a      	bhi.n	8012346 <_printf_i+0x32>
 8012330:	2f00      	cmp	r7, #0
 8012332:	f000 80d2 	beq.w	80124da <_printf_i+0x1c6>
 8012336:	2f58      	cmp	r7, #88	@ 0x58
 8012338:	f000 80b9 	beq.w	80124ae <_printf_i+0x19a>
 801233c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012340:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012344:	e03a      	b.n	80123bc <_printf_i+0xa8>
 8012346:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801234a:	2b15      	cmp	r3, #21
 801234c:	d8f6      	bhi.n	801233c <_printf_i+0x28>
 801234e:	a101      	add	r1, pc, #4	@ (adr r1, 8012354 <_printf_i+0x40>)
 8012350:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012354:	080123ad 	.word	0x080123ad
 8012358:	080123c1 	.word	0x080123c1
 801235c:	0801233d 	.word	0x0801233d
 8012360:	0801233d 	.word	0x0801233d
 8012364:	0801233d 	.word	0x0801233d
 8012368:	0801233d 	.word	0x0801233d
 801236c:	080123c1 	.word	0x080123c1
 8012370:	0801233d 	.word	0x0801233d
 8012374:	0801233d 	.word	0x0801233d
 8012378:	0801233d 	.word	0x0801233d
 801237c:	0801233d 	.word	0x0801233d
 8012380:	080124c1 	.word	0x080124c1
 8012384:	080123eb 	.word	0x080123eb
 8012388:	0801247b 	.word	0x0801247b
 801238c:	0801233d 	.word	0x0801233d
 8012390:	0801233d 	.word	0x0801233d
 8012394:	080124e3 	.word	0x080124e3
 8012398:	0801233d 	.word	0x0801233d
 801239c:	080123eb 	.word	0x080123eb
 80123a0:	0801233d 	.word	0x0801233d
 80123a4:	0801233d 	.word	0x0801233d
 80123a8:	08012483 	.word	0x08012483
 80123ac:	6833      	ldr	r3, [r6, #0]
 80123ae:	1d1a      	adds	r2, r3, #4
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	6032      	str	r2, [r6, #0]
 80123b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80123b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80123bc:	2301      	movs	r3, #1
 80123be:	e09d      	b.n	80124fc <_printf_i+0x1e8>
 80123c0:	6833      	ldr	r3, [r6, #0]
 80123c2:	6820      	ldr	r0, [r4, #0]
 80123c4:	1d19      	adds	r1, r3, #4
 80123c6:	6031      	str	r1, [r6, #0]
 80123c8:	0606      	lsls	r6, r0, #24
 80123ca:	d501      	bpl.n	80123d0 <_printf_i+0xbc>
 80123cc:	681d      	ldr	r5, [r3, #0]
 80123ce:	e003      	b.n	80123d8 <_printf_i+0xc4>
 80123d0:	0645      	lsls	r5, r0, #25
 80123d2:	d5fb      	bpl.n	80123cc <_printf_i+0xb8>
 80123d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80123d8:	2d00      	cmp	r5, #0
 80123da:	da03      	bge.n	80123e4 <_printf_i+0xd0>
 80123dc:	232d      	movs	r3, #45	@ 0x2d
 80123de:	426d      	negs	r5, r5
 80123e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80123e4:	4859      	ldr	r0, [pc, #356]	@ (801254c <_printf_i+0x238>)
 80123e6:	230a      	movs	r3, #10
 80123e8:	e011      	b.n	801240e <_printf_i+0xfa>
 80123ea:	6821      	ldr	r1, [r4, #0]
 80123ec:	6833      	ldr	r3, [r6, #0]
 80123ee:	0608      	lsls	r0, r1, #24
 80123f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80123f4:	d402      	bmi.n	80123fc <_printf_i+0xe8>
 80123f6:	0649      	lsls	r1, r1, #25
 80123f8:	bf48      	it	mi
 80123fa:	b2ad      	uxthmi	r5, r5
 80123fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80123fe:	4853      	ldr	r0, [pc, #332]	@ (801254c <_printf_i+0x238>)
 8012400:	6033      	str	r3, [r6, #0]
 8012402:	bf14      	ite	ne
 8012404:	230a      	movne	r3, #10
 8012406:	2308      	moveq	r3, #8
 8012408:	2100      	movs	r1, #0
 801240a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801240e:	6866      	ldr	r6, [r4, #4]
 8012410:	60a6      	str	r6, [r4, #8]
 8012412:	2e00      	cmp	r6, #0
 8012414:	bfa2      	ittt	ge
 8012416:	6821      	ldrge	r1, [r4, #0]
 8012418:	f021 0104 	bicge.w	r1, r1, #4
 801241c:	6021      	strge	r1, [r4, #0]
 801241e:	b90d      	cbnz	r5, 8012424 <_printf_i+0x110>
 8012420:	2e00      	cmp	r6, #0
 8012422:	d04b      	beq.n	80124bc <_printf_i+0x1a8>
 8012424:	4616      	mov	r6, r2
 8012426:	fbb5 f1f3 	udiv	r1, r5, r3
 801242a:	fb03 5711 	mls	r7, r3, r1, r5
 801242e:	5dc7      	ldrb	r7, [r0, r7]
 8012430:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012434:	462f      	mov	r7, r5
 8012436:	42bb      	cmp	r3, r7
 8012438:	460d      	mov	r5, r1
 801243a:	d9f4      	bls.n	8012426 <_printf_i+0x112>
 801243c:	2b08      	cmp	r3, #8
 801243e:	d10b      	bne.n	8012458 <_printf_i+0x144>
 8012440:	6823      	ldr	r3, [r4, #0]
 8012442:	07df      	lsls	r7, r3, #31
 8012444:	d508      	bpl.n	8012458 <_printf_i+0x144>
 8012446:	6923      	ldr	r3, [r4, #16]
 8012448:	6861      	ldr	r1, [r4, #4]
 801244a:	4299      	cmp	r1, r3
 801244c:	bfde      	ittt	le
 801244e:	2330      	movle	r3, #48	@ 0x30
 8012450:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012454:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012458:	1b92      	subs	r2, r2, r6
 801245a:	6122      	str	r2, [r4, #16]
 801245c:	f8cd a000 	str.w	sl, [sp]
 8012460:	464b      	mov	r3, r9
 8012462:	aa03      	add	r2, sp, #12
 8012464:	4621      	mov	r1, r4
 8012466:	4640      	mov	r0, r8
 8012468:	f7ff fee6 	bl	8012238 <_printf_common>
 801246c:	3001      	adds	r0, #1
 801246e:	d14a      	bne.n	8012506 <_printf_i+0x1f2>
 8012470:	f04f 30ff 	mov.w	r0, #4294967295
 8012474:	b004      	add	sp, #16
 8012476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801247a:	6823      	ldr	r3, [r4, #0]
 801247c:	f043 0320 	orr.w	r3, r3, #32
 8012480:	6023      	str	r3, [r4, #0]
 8012482:	4833      	ldr	r0, [pc, #204]	@ (8012550 <_printf_i+0x23c>)
 8012484:	2778      	movs	r7, #120	@ 0x78
 8012486:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801248a:	6823      	ldr	r3, [r4, #0]
 801248c:	6831      	ldr	r1, [r6, #0]
 801248e:	061f      	lsls	r7, r3, #24
 8012490:	f851 5b04 	ldr.w	r5, [r1], #4
 8012494:	d402      	bmi.n	801249c <_printf_i+0x188>
 8012496:	065f      	lsls	r7, r3, #25
 8012498:	bf48      	it	mi
 801249a:	b2ad      	uxthmi	r5, r5
 801249c:	6031      	str	r1, [r6, #0]
 801249e:	07d9      	lsls	r1, r3, #31
 80124a0:	bf44      	itt	mi
 80124a2:	f043 0320 	orrmi.w	r3, r3, #32
 80124a6:	6023      	strmi	r3, [r4, #0]
 80124a8:	b11d      	cbz	r5, 80124b2 <_printf_i+0x19e>
 80124aa:	2310      	movs	r3, #16
 80124ac:	e7ac      	b.n	8012408 <_printf_i+0xf4>
 80124ae:	4827      	ldr	r0, [pc, #156]	@ (801254c <_printf_i+0x238>)
 80124b0:	e7e9      	b.n	8012486 <_printf_i+0x172>
 80124b2:	6823      	ldr	r3, [r4, #0]
 80124b4:	f023 0320 	bic.w	r3, r3, #32
 80124b8:	6023      	str	r3, [r4, #0]
 80124ba:	e7f6      	b.n	80124aa <_printf_i+0x196>
 80124bc:	4616      	mov	r6, r2
 80124be:	e7bd      	b.n	801243c <_printf_i+0x128>
 80124c0:	6833      	ldr	r3, [r6, #0]
 80124c2:	6825      	ldr	r5, [r4, #0]
 80124c4:	6961      	ldr	r1, [r4, #20]
 80124c6:	1d18      	adds	r0, r3, #4
 80124c8:	6030      	str	r0, [r6, #0]
 80124ca:	062e      	lsls	r6, r5, #24
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	d501      	bpl.n	80124d4 <_printf_i+0x1c0>
 80124d0:	6019      	str	r1, [r3, #0]
 80124d2:	e002      	b.n	80124da <_printf_i+0x1c6>
 80124d4:	0668      	lsls	r0, r5, #25
 80124d6:	d5fb      	bpl.n	80124d0 <_printf_i+0x1bc>
 80124d8:	8019      	strh	r1, [r3, #0]
 80124da:	2300      	movs	r3, #0
 80124dc:	6123      	str	r3, [r4, #16]
 80124de:	4616      	mov	r6, r2
 80124e0:	e7bc      	b.n	801245c <_printf_i+0x148>
 80124e2:	6833      	ldr	r3, [r6, #0]
 80124e4:	1d1a      	adds	r2, r3, #4
 80124e6:	6032      	str	r2, [r6, #0]
 80124e8:	681e      	ldr	r6, [r3, #0]
 80124ea:	6862      	ldr	r2, [r4, #4]
 80124ec:	2100      	movs	r1, #0
 80124ee:	4630      	mov	r0, r6
 80124f0:	f7ed fe76 	bl	80001e0 <memchr>
 80124f4:	b108      	cbz	r0, 80124fa <_printf_i+0x1e6>
 80124f6:	1b80      	subs	r0, r0, r6
 80124f8:	6060      	str	r0, [r4, #4]
 80124fa:	6863      	ldr	r3, [r4, #4]
 80124fc:	6123      	str	r3, [r4, #16]
 80124fe:	2300      	movs	r3, #0
 8012500:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012504:	e7aa      	b.n	801245c <_printf_i+0x148>
 8012506:	6923      	ldr	r3, [r4, #16]
 8012508:	4632      	mov	r2, r6
 801250a:	4649      	mov	r1, r9
 801250c:	4640      	mov	r0, r8
 801250e:	47d0      	blx	sl
 8012510:	3001      	adds	r0, #1
 8012512:	d0ad      	beq.n	8012470 <_printf_i+0x15c>
 8012514:	6823      	ldr	r3, [r4, #0]
 8012516:	079b      	lsls	r3, r3, #30
 8012518:	d413      	bmi.n	8012542 <_printf_i+0x22e>
 801251a:	68e0      	ldr	r0, [r4, #12]
 801251c:	9b03      	ldr	r3, [sp, #12]
 801251e:	4298      	cmp	r0, r3
 8012520:	bfb8      	it	lt
 8012522:	4618      	movlt	r0, r3
 8012524:	e7a6      	b.n	8012474 <_printf_i+0x160>
 8012526:	2301      	movs	r3, #1
 8012528:	4632      	mov	r2, r6
 801252a:	4649      	mov	r1, r9
 801252c:	4640      	mov	r0, r8
 801252e:	47d0      	blx	sl
 8012530:	3001      	adds	r0, #1
 8012532:	d09d      	beq.n	8012470 <_printf_i+0x15c>
 8012534:	3501      	adds	r5, #1
 8012536:	68e3      	ldr	r3, [r4, #12]
 8012538:	9903      	ldr	r1, [sp, #12]
 801253a:	1a5b      	subs	r3, r3, r1
 801253c:	42ab      	cmp	r3, r5
 801253e:	dcf2      	bgt.n	8012526 <_printf_i+0x212>
 8012540:	e7eb      	b.n	801251a <_printf_i+0x206>
 8012542:	2500      	movs	r5, #0
 8012544:	f104 0619 	add.w	r6, r4, #25
 8012548:	e7f5      	b.n	8012536 <_printf_i+0x222>
 801254a:	bf00      	nop
 801254c:	08016272 	.word	0x08016272
 8012550:	08016283 	.word	0x08016283

08012554 <std>:
 8012554:	2300      	movs	r3, #0
 8012556:	b510      	push	{r4, lr}
 8012558:	4604      	mov	r4, r0
 801255a:	e9c0 3300 	strd	r3, r3, [r0]
 801255e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012562:	6083      	str	r3, [r0, #8]
 8012564:	8181      	strh	r1, [r0, #12]
 8012566:	6643      	str	r3, [r0, #100]	@ 0x64
 8012568:	81c2      	strh	r2, [r0, #14]
 801256a:	6183      	str	r3, [r0, #24]
 801256c:	4619      	mov	r1, r3
 801256e:	2208      	movs	r2, #8
 8012570:	305c      	adds	r0, #92	@ 0x5c
 8012572:	f000 f914 	bl	801279e <memset>
 8012576:	4b0d      	ldr	r3, [pc, #52]	@ (80125ac <std+0x58>)
 8012578:	6263      	str	r3, [r4, #36]	@ 0x24
 801257a:	4b0d      	ldr	r3, [pc, #52]	@ (80125b0 <std+0x5c>)
 801257c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801257e:	4b0d      	ldr	r3, [pc, #52]	@ (80125b4 <std+0x60>)
 8012580:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012582:	4b0d      	ldr	r3, [pc, #52]	@ (80125b8 <std+0x64>)
 8012584:	6323      	str	r3, [r4, #48]	@ 0x30
 8012586:	4b0d      	ldr	r3, [pc, #52]	@ (80125bc <std+0x68>)
 8012588:	6224      	str	r4, [r4, #32]
 801258a:	429c      	cmp	r4, r3
 801258c:	d006      	beq.n	801259c <std+0x48>
 801258e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012592:	4294      	cmp	r4, r2
 8012594:	d002      	beq.n	801259c <std+0x48>
 8012596:	33d0      	adds	r3, #208	@ 0xd0
 8012598:	429c      	cmp	r4, r3
 801259a:	d105      	bne.n	80125a8 <std+0x54>
 801259c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80125a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80125a4:	f000 b9cc 	b.w	8012940 <__retarget_lock_init_recursive>
 80125a8:	bd10      	pop	{r4, pc}
 80125aa:	bf00      	nop
 80125ac:	08012719 	.word	0x08012719
 80125b0:	0801273b 	.word	0x0801273b
 80125b4:	08012773 	.word	0x08012773
 80125b8:	08012797 	.word	0x08012797
 80125bc:	200005d4 	.word	0x200005d4

080125c0 <stdio_exit_handler>:
 80125c0:	4a02      	ldr	r2, [pc, #8]	@ (80125cc <stdio_exit_handler+0xc>)
 80125c2:	4903      	ldr	r1, [pc, #12]	@ (80125d0 <stdio_exit_handler+0x10>)
 80125c4:	4803      	ldr	r0, [pc, #12]	@ (80125d4 <stdio_exit_handler+0x14>)
 80125c6:	f000 b869 	b.w	801269c <_fwalk_sglue>
 80125ca:	bf00      	nop
 80125cc:	20000014 	.word	0x20000014
 80125d0:	08014141 	.word	0x08014141
 80125d4:	20000024 	.word	0x20000024

080125d8 <cleanup_stdio>:
 80125d8:	6841      	ldr	r1, [r0, #4]
 80125da:	4b0c      	ldr	r3, [pc, #48]	@ (801260c <cleanup_stdio+0x34>)
 80125dc:	4299      	cmp	r1, r3
 80125de:	b510      	push	{r4, lr}
 80125e0:	4604      	mov	r4, r0
 80125e2:	d001      	beq.n	80125e8 <cleanup_stdio+0x10>
 80125e4:	f001 fdac 	bl	8014140 <_fflush_r>
 80125e8:	68a1      	ldr	r1, [r4, #8]
 80125ea:	4b09      	ldr	r3, [pc, #36]	@ (8012610 <cleanup_stdio+0x38>)
 80125ec:	4299      	cmp	r1, r3
 80125ee:	d002      	beq.n	80125f6 <cleanup_stdio+0x1e>
 80125f0:	4620      	mov	r0, r4
 80125f2:	f001 fda5 	bl	8014140 <_fflush_r>
 80125f6:	68e1      	ldr	r1, [r4, #12]
 80125f8:	4b06      	ldr	r3, [pc, #24]	@ (8012614 <cleanup_stdio+0x3c>)
 80125fa:	4299      	cmp	r1, r3
 80125fc:	d004      	beq.n	8012608 <cleanup_stdio+0x30>
 80125fe:	4620      	mov	r0, r4
 8012600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012604:	f001 bd9c 	b.w	8014140 <_fflush_r>
 8012608:	bd10      	pop	{r4, pc}
 801260a:	bf00      	nop
 801260c:	200005d4 	.word	0x200005d4
 8012610:	2000063c 	.word	0x2000063c
 8012614:	200006a4 	.word	0x200006a4

08012618 <global_stdio_init.part.0>:
 8012618:	b510      	push	{r4, lr}
 801261a:	4b0b      	ldr	r3, [pc, #44]	@ (8012648 <global_stdio_init.part.0+0x30>)
 801261c:	4c0b      	ldr	r4, [pc, #44]	@ (801264c <global_stdio_init.part.0+0x34>)
 801261e:	4a0c      	ldr	r2, [pc, #48]	@ (8012650 <global_stdio_init.part.0+0x38>)
 8012620:	601a      	str	r2, [r3, #0]
 8012622:	4620      	mov	r0, r4
 8012624:	2200      	movs	r2, #0
 8012626:	2104      	movs	r1, #4
 8012628:	f7ff ff94 	bl	8012554 <std>
 801262c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012630:	2201      	movs	r2, #1
 8012632:	2109      	movs	r1, #9
 8012634:	f7ff ff8e 	bl	8012554 <std>
 8012638:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801263c:	2202      	movs	r2, #2
 801263e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012642:	2112      	movs	r1, #18
 8012644:	f7ff bf86 	b.w	8012554 <std>
 8012648:	2000070c 	.word	0x2000070c
 801264c:	200005d4 	.word	0x200005d4
 8012650:	080125c1 	.word	0x080125c1

08012654 <__sfp_lock_acquire>:
 8012654:	4801      	ldr	r0, [pc, #4]	@ (801265c <__sfp_lock_acquire+0x8>)
 8012656:	f000 b974 	b.w	8012942 <__retarget_lock_acquire_recursive>
 801265a:	bf00      	nop
 801265c:	20000715 	.word	0x20000715

08012660 <__sfp_lock_release>:
 8012660:	4801      	ldr	r0, [pc, #4]	@ (8012668 <__sfp_lock_release+0x8>)
 8012662:	f000 b96f 	b.w	8012944 <__retarget_lock_release_recursive>
 8012666:	bf00      	nop
 8012668:	20000715 	.word	0x20000715

0801266c <__sinit>:
 801266c:	b510      	push	{r4, lr}
 801266e:	4604      	mov	r4, r0
 8012670:	f7ff fff0 	bl	8012654 <__sfp_lock_acquire>
 8012674:	6a23      	ldr	r3, [r4, #32]
 8012676:	b11b      	cbz	r3, 8012680 <__sinit+0x14>
 8012678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801267c:	f7ff bff0 	b.w	8012660 <__sfp_lock_release>
 8012680:	4b04      	ldr	r3, [pc, #16]	@ (8012694 <__sinit+0x28>)
 8012682:	6223      	str	r3, [r4, #32]
 8012684:	4b04      	ldr	r3, [pc, #16]	@ (8012698 <__sinit+0x2c>)
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d1f5      	bne.n	8012678 <__sinit+0xc>
 801268c:	f7ff ffc4 	bl	8012618 <global_stdio_init.part.0>
 8012690:	e7f2      	b.n	8012678 <__sinit+0xc>
 8012692:	bf00      	nop
 8012694:	080125d9 	.word	0x080125d9
 8012698:	2000070c 	.word	0x2000070c

0801269c <_fwalk_sglue>:
 801269c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126a0:	4607      	mov	r7, r0
 80126a2:	4688      	mov	r8, r1
 80126a4:	4614      	mov	r4, r2
 80126a6:	2600      	movs	r6, #0
 80126a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80126ac:	f1b9 0901 	subs.w	r9, r9, #1
 80126b0:	d505      	bpl.n	80126be <_fwalk_sglue+0x22>
 80126b2:	6824      	ldr	r4, [r4, #0]
 80126b4:	2c00      	cmp	r4, #0
 80126b6:	d1f7      	bne.n	80126a8 <_fwalk_sglue+0xc>
 80126b8:	4630      	mov	r0, r6
 80126ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126be:	89ab      	ldrh	r3, [r5, #12]
 80126c0:	2b01      	cmp	r3, #1
 80126c2:	d907      	bls.n	80126d4 <_fwalk_sglue+0x38>
 80126c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80126c8:	3301      	adds	r3, #1
 80126ca:	d003      	beq.n	80126d4 <_fwalk_sglue+0x38>
 80126cc:	4629      	mov	r1, r5
 80126ce:	4638      	mov	r0, r7
 80126d0:	47c0      	blx	r8
 80126d2:	4306      	orrs	r6, r0
 80126d4:	3568      	adds	r5, #104	@ 0x68
 80126d6:	e7e9      	b.n	80126ac <_fwalk_sglue+0x10>

080126d8 <siprintf>:
 80126d8:	b40e      	push	{r1, r2, r3}
 80126da:	b500      	push	{lr}
 80126dc:	b09c      	sub	sp, #112	@ 0x70
 80126de:	ab1d      	add	r3, sp, #116	@ 0x74
 80126e0:	9002      	str	r0, [sp, #8]
 80126e2:	9006      	str	r0, [sp, #24]
 80126e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80126e8:	4809      	ldr	r0, [pc, #36]	@ (8012710 <siprintf+0x38>)
 80126ea:	9107      	str	r1, [sp, #28]
 80126ec:	9104      	str	r1, [sp, #16]
 80126ee:	4909      	ldr	r1, [pc, #36]	@ (8012714 <siprintf+0x3c>)
 80126f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80126f4:	9105      	str	r1, [sp, #20]
 80126f6:	6800      	ldr	r0, [r0, #0]
 80126f8:	9301      	str	r3, [sp, #4]
 80126fa:	a902      	add	r1, sp, #8
 80126fc:	f001 fba0 	bl	8013e40 <_svfiprintf_r>
 8012700:	9b02      	ldr	r3, [sp, #8]
 8012702:	2200      	movs	r2, #0
 8012704:	701a      	strb	r2, [r3, #0]
 8012706:	b01c      	add	sp, #112	@ 0x70
 8012708:	f85d eb04 	ldr.w	lr, [sp], #4
 801270c:	b003      	add	sp, #12
 801270e:	4770      	bx	lr
 8012710:	20000020 	.word	0x20000020
 8012714:	ffff0208 	.word	0xffff0208

08012718 <__sread>:
 8012718:	b510      	push	{r4, lr}
 801271a:	460c      	mov	r4, r1
 801271c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012720:	f000 f89c 	bl	801285c <_read_r>
 8012724:	2800      	cmp	r0, #0
 8012726:	bfab      	itete	ge
 8012728:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801272a:	89a3      	ldrhlt	r3, [r4, #12]
 801272c:	181b      	addge	r3, r3, r0
 801272e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012732:	bfac      	ite	ge
 8012734:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012736:	81a3      	strhlt	r3, [r4, #12]
 8012738:	bd10      	pop	{r4, pc}

0801273a <__swrite>:
 801273a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801273e:	461f      	mov	r7, r3
 8012740:	898b      	ldrh	r3, [r1, #12]
 8012742:	05db      	lsls	r3, r3, #23
 8012744:	4605      	mov	r5, r0
 8012746:	460c      	mov	r4, r1
 8012748:	4616      	mov	r6, r2
 801274a:	d505      	bpl.n	8012758 <__swrite+0x1e>
 801274c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012750:	2302      	movs	r3, #2
 8012752:	2200      	movs	r2, #0
 8012754:	f000 f870 	bl	8012838 <_lseek_r>
 8012758:	89a3      	ldrh	r3, [r4, #12]
 801275a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801275e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012762:	81a3      	strh	r3, [r4, #12]
 8012764:	4632      	mov	r2, r6
 8012766:	463b      	mov	r3, r7
 8012768:	4628      	mov	r0, r5
 801276a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801276e:	f000 b8ab 	b.w	80128c8 <_write_r>

08012772 <__sseek>:
 8012772:	b510      	push	{r4, lr}
 8012774:	460c      	mov	r4, r1
 8012776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801277a:	f000 f85d 	bl	8012838 <_lseek_r>
 801277e:	1c43      	adds	r3, r0, #1
 8012780:	89a3      	ldrh	r3, [r4, #12]
 8012782:	bf15      	itete	ne
 8012784:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012786:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801278a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801278e:	81a3      	strheq	r3, [r4, #12]
 8012790:	bf18      	it	ne
 8012792:	81a3      	strhne	r3, [r4, #12]
 8012794:	bd10      	pop	{r4, pc}

08012796 <__sclose>:
 8012796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801279a:	f000 b83d 	b.w	8012818 <_close_r>

0801279e <memset>:
 801279e:	4402      	add	r2, r0
 80127a0:	4603      	mov	r3, r0
 80127a2:	4293      	cmp	r3, r2
 80127a4:	d100      	bne.n	80127a8 <memset+0xa>
 80127a6:	4770      	bx	lr
 80127a8:	f803 1b01 	strb.w	r1, [r3], #1
 80127ac:	e7f9      	b.n	80127a2 <memset+0x4>

080127ae <_raise_r>:
 80127ae:	291f      	cmp	r1, #31
 80127b0:	b538      	push	{r3, r4, r5, lr}
 80127b2:	4605      	mov	r5, r0
 80127b4:	460c      	mov	r4, r1
 80127b6:	d904      	bls.n	80127c2 <_raise_r+0x14>
 80127b8:	2316      	movs	r3, #22
 80127ba:	6003      	str	r3, [r0, #0]
 80127bc:	f04f 30ff 	mov.w	r0, #4294967295
 80127c0:	bd38      	pop	{r3, r4, r5, pc}
 80127c2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80127c4:	b112      	cbz	r2, 80127cc <_raise_r+0x1e>
 80127c6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80127ca:	b94b      	cbnz	r3, 80127e0 <_raise_r+0x32>
 80127cc:	4628      	mov	r0, r5
 80127ce:	f000 f869 	bl	80128a4 <_getpid_r>
 80127d2:	4622      	mov	r2, r4
 80127d4:	4601      	mov	r1, r0
 80127d6:	4628      	mov	r0, r5
 80127d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80127dc:	f000 b850 	b.w	8012880 <_kill_r>
 80127e0:	2b01      	cmp	r3, #1
 80127e2:	d00a      	beq.n	80127fa <_raise_r+0x4c>
 80127e4:	1c59      	adds	r1, r3, #1
 80127e6:	d103      	bne.n	80127f0 <_raise_r+0x42>
 80127e8:	2316      	movs	r3, #22
 80127ea:	6003      	str	r3, [r0, #0]
 80127ec:	2001      	movs	r0, #1
 80127ee:	e7e7      	b.n	80127c0 <_raise_r+0x12>
 80127f0:	2100      	movs	r1, #0
 80127f2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80127f6:	4620      	mov	r0, r4
 80127f8:	4798      	blx	r3
 80127fa:	2000      	movs	r0, #0
 80127fc:	e7e0      	b.n	80127c0 <_raise_r+0x12>
	...

08012800 <raise>:
 8012800:	4b02      	ldr	r3, [pc, #8]	@ (801280c <raise+0xc>)
 8012802:	4601      	mov	r1, r0
 8012804:	6818      	ldr	r0, [r3, #0]
 8012806:	f7ff bfd2 	b.w	80127ae <_raise_r>
 801280a:	bf00      	nop
 801280c:	20000020 	.word	0x20000020

08012810 <_localeconv_r>:
 8012810:	4800      	ldr	r0, [pc, #0]	@ (8012814 <_localeconv_r+0x4>)
 8012812:	4770      	bx	lr
 8012814:	20000160 	.word	0x20000160

08012818 <_close_r>:
 8012818:	b538      	push	{r3, r4, r5, lr}
 801281a:	4d06      	ldr	r5, [pc, #24]	@ (8012834 <_close_r+0x1c>)
 801281c:	2300      	movs	r3, #0
 801281e:	4604      	mov	r4, r0
 8012820:	4608      	mov	r0, r1
 8012822:	602b      	str	r3, [r5, #0]
 8012824:	f7fa ff20 	bl	800d668 <_close>
 8012828:	1c43      	adds	r3, r0, #1
 801282a:	d102      	bne.n	8012832 <_close_r+0x1a>
 801282c:	682b      	ldr	r3, [r5, #0]
 801282e:	b103      	cbz	r3, 8012832 <_close_r+0x1a>
 8012830:	6023      	str	r3, [r4, #0]
 8012832:	bd38      	pop	{r3, r4, r5, pc}
 8012834:	20000710 	.word	0x20000710

08012838 <_lseek_r>:
 8012838:	b538      	push	{r3, r4, r5, lr}
 801283a:	4d07      	ldr	r5, [pc, #28]	@ (8012858 <_lseek_r+0x20>)
 801283c:	4604      	mov	r4, r0
 801283e:	4608      	mov	r0, r1
 8012840:	4611      	mov	r1, r2
 8012842:	2200      	movs	r2, #0
 8012844:	602a      	str	r2, [r5, #0]
 8012846:	461a      	mov	r2, r3
 8012848:	f7fa ff35 	bl	800d6b6 <_lseek>
 801284c:	1c43      	adds	r3, r0, #1
 801284e:	d102      	bne.n	8012856 <_lseek_r+0x1e>
 8012850:	682b      	ldr	r3, [r5, #0]
 8012852:	b103      	cbz	r3, 8012856 <_lseek_r+0x1e>
 8012854:	6023      	str	r3, [r4, #0]
 8012856:	bd38      	pop	{r3, r4, r5, pc}
 8012858:	20000710 	.word	0x20000710

0801285c <_read_r>:
 801285c:	b538      	push	{r3, r4, r5, lr}
 801285e:	4d07      	ldr	r5, [pc, #28]	@ (801287c <_read_r+0x20>)
 8012860:	4604      	mov	r4, r0
 8012862:	4608      	mov	r0, r1
 8012864:	4611      	mov	r1, r2
 8012866:	2200      	movs	r2, #0
 8012868:	602a      	str	r2, [r5, #0]
 801286a:	461a      	mov	r2, r3
 801286c:	f7fa fec3 	bl	800d5f6 <_read>
 8012870:	1c43      	adds	r3, r0, #1
 8012872:	d102      	bne.n	801287a <_read_r+0x1e>
 8012874:	682b      	ldr	r3, [r5, #0]
 8012876:	b103      	cbz	r3, 801287a <_read_r+0x1e>
 8012878:	6023      	str	r3, [r4, #0]
 801287a:	bd38      	pop	{r3, r4, r5, pc}
 801287c:	20000710 	.word	0x20000710

08012880 <_kill_r>:
 8012880:	b538      	push	{r3, r4, r5, lr}
 8012882:	4d07      	ldr	r5, [pc, #28]	@ (80128a0 <_kill_r+0x20>)
 8012884:	2300      	movs	r3, #0
 8012886:	4604      	mov	r4, r0
 8012888:	4608      	mov	r0, r1
 801288a:	4611      	mov	r1, r2
 801288c:	602b      	str	r3, [r5, #0]
 801288e:	f7fa fe97 	bl	800d5c0 <_kill>
 8012892:	1c43      	adds	r3, r0, #1
 8012894:	d102      	bne.n	801289c <_kill_r+0x1c>
 8012896:	682b      	ldr	r3, [r5, #0]
 8012898:	b103      	cbz	r3, 801289c <_kill_r+0x1c>
 801289a:	6023      	str	r3, [r4, #0]
 801289c:	bd38      	pop	{r3, r4, r5, pc}
 801289e:	bf00      	nop
 80128a0:	20000710 	.word	0x20000710

080128a4 <_getpid_r>:
 80128a4:	f7fa be84 	b.w	800d5b0 <_getpid>

080128a8 <_sbrk_r>:
 80128a8:	b538      	push	{r3, r4, r5, lr}
 80128aa:	4d06      	ldr	r5, [pc, #24]	@ (80128c4 <_sbrk_r+0x1c>)
 80128ac:	2300      	movs	r3, #0
 80128ae:	4604      	mov	r4, r0
 80128b0:	4608      	mov	r0, r1
 80128b2:	602b      	str	r3, [r5, #0]
 80128b4:	f7fa ff0c 	bl	800d6d0 <_sbrk>
 80128b8:	1c43      	adds	r3, r0, #1
 80128ba:	d102      	bne.n	80128c2 <_sbrk_r+0x1a>
 80128bc:	682b      	ldr	r3, [r5, #0]
 80128be:	b103      	cbz	r3, 80128c2 <_sbrk_r+0x1a>
 80128c0:	6023      	str	r3, [r4, #0]
 80128c2:	bd38      	pop	{r3, r4, r5, pc}
 80128c4:	20000710 	.word	0x20000710

080128c8 <_write_r>:
 80128c8:	b538      	push	{r3, r4, r5, lr}
 80128ca:	4d07      	ldr	r5, [pc, #28]	@ (80128e8 <_write_r+0x20>)
 80128cc:	4604      	mov	r4, r0
 80128ce:	4608      	mov	r0, r1
 80128d0:	4611      	mov	r1, r2
 80128d2:	2200      	movs	r2, #0
 80128d4:	602a      	str	r2, [r5, #0]
 80128d6:	461a      	mov	r2, r3
 80128d8:	f7fa feaa 	bl	800d630 <_write>
 80128dc:	1c43      	adds	r3, r0, #1
 80128de:	d102      	bne.n	80128e6 <_write_r+0x1e>
 80128e0:	682b      	ldr	r3, [r5, #0]
 80128e2:	b103      	cbz	r3, 80128e6 <_write_r+0x1e>
 80128e4:	6023      	str	r3, [r4, #0]
 80128e6:	bd38      	pop	{r3, r4, r5, pc}
 80128e8:	20000710 	.word	0x20000710

080128ec <__errno>:
 80128ec:	4b01      	ldr	r3, [pc, #4]	@ (80128f4 <__errno+0x8>)
 80128ee:	6818      	ldr	r0, [r3, #0]
 80128f0:	4770      	bx	lr
 80128f2:	bf00      	nop
 80128f4:	20000020 	.word	0x20000020

080128f8 <__libc_init_array>:
 80128f8:	b570      	push	{r4, r5, r6, lr}
 80128fa:	4d0d      	ldr	r5, [pc, #52]	@ (8012930 <__libc_init_array+0x38>)
 80128fc:	4c0d      	ldr	r4, [pc, #52]	@ (8012934 <__libc_init_array+0x3c>)
 80128fe:	1b64      	subs	r4, r4, r5
 8012900:	10a4      	asrs	r4, r4, #2
 8012902:	2600      	movs	r6, #0
 8012904:	42a6      	cmp	r6, r4
 8012906:	d109      	bne.n	801291c <__libc_init_array+0x24>
 8012908:	4d0b      	ldr	r5, [pc, #44]	@ (8012938 <__libc_init_array+0x40>)
 801290a:	4c0c      	ldr	r4, [pc, #48]	@ (801293c <__libc_init_array+0x44>)
 801290c:	f001 ff5c 	bl	80147c8 <_init>
 8012910:	1b64      	subs	r4, r4, r5
 8012912:	10a4      	asrs	r4, r4, #2
 8012914:	2600      	movs	r6, #0
 8012916:	42a6      	cmp	r6, r4
 8012918:	d105      	bne.n	8012926 <__libc_init_array+0x2e>
 801291a:	bd70      	pop	{r4, r5, r6, pc}
 801291c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012920:	4798      	blx	r3
 8012922:	3601      	adds	r6, #1
 8012924:	e7ee      	b.n	8012904 <__libc_init_array+0xc>
 8012926:	f855 3b04 	ldr.w	r3, [r5], #4
 801292a:	4798      	blx	r3
 801292c:	3601      	adds	r6, #1
 801292e:	e7f2      	b.n	8012916 <__libc_init_array+0x1e>
 8012930:	080165d8 	.word	0x080165d8
 8012934:	080165d8 	.word	0x080165d8
 8012938:	080165d8 	.word	0x080165d8
 801293c:	080165e4 	.word	0x080165e4

08012940 <__retarget_lock_init_recursive>:
 8012940:	4770      	bx	lr

08012942 <__retarget_lock_acquire_recursive>:
 8012942:	4770      	bx	lr

08012944 <__retarget_lock_release_recursive>:
 8012944:	4770      	bx	lr

08012946 <strcpy>:
 8012946:	4603      	mov	r3, r0
 8012948:	f811 2b01 	ldrb.w	r2, [r1], #1
 801294c:	f803 2b01 	strb.w	r2, [r3], #1
 8012950:	2a00      	cmp	r2, #0
 8012952:	d1f9      	bne.n	8012948 <strcpy+0x2>
 8012954:	4770      	bx	lr

08012956 <quorem>:
 8012956:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801295a:	6903      	ldr	r3, [r0, #16]
 801295c:	690c      	ldr	r4, [r1, #16]
 801295e:	42a3      	cmp	r3, r4
 8012960:	4607      	mov	r7, r0
 8012962:	db7e      	blt.n	8012a62 <quorem+0x10c>
 8012964:	3c01      	subs	r4, #1
 8012966:	f101 0814 	add.w	r8, r1, #20
 801296a:	00a3      	lsls	r3, r4, #2
 801296c:	f100 0514 	add.w	r5, r0, #20
 8012970:	9300      	str	r3, [sp, #0]
 8012972:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012976:	9301      	str	r3, [sp, #4]
 8012978:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801297c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012980:	3301      	adds	r3, #1
 8012982:	429a      	cmp	r2, r3
 8012984:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012988:	fbb2 f6f3 	udiv	r6, r2, r3
 801298c:	d32e      	bcc.n	80129ec <quorem+0x96>
 801298e:	f04f 0a00 	mov.w	sl, #0
 8012992:	46c4      	mov	ip, r8
 8012994:	46ae      	mov	lr, r5
 8012996:	46d3      	mov	fp, sl
 8012998:	f85c 3b04 	ldr.w	r3, [ip], #4
 801299c:	b298      	uxth	r0, r3
 801299e:	fb06 a000 	mla	r0, r6, r0, sl
 80129a2:	0c02      	lsrs	r2, r0, #16
 80129a4:	0c1b      	lsrs	r3, r3, #16
 80129a6:	fb06 2303 	mla	r3, r6, r3, r2
 80129aa:	f8de 2000 	ldr.w	r2, [lr]
 80129ae:	b280      	uxth	r0, r0
 80129b0:	b292      	uxth	r2, r2
 80129b2:	1a12      	subs	r2, r2, r0
 80129b4:	445a      	add	r2, fp
 80129b6:	f8de 0000 	ldr.w	r0, [lr]
 80129ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80129be:	b29b      	uxth	r3, r3
 80129c0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80129c4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80129c8:	b292      	uxth	r2, r2
 80129ca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80129ce:	45e1      	cmp	r9, ip
 80129d0:	f84e 2b04 	str.w	r2, [lr], #4
 80129d4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80129d8:	d2de      	bcs.n	8012998 <quorem+0x42>
 80129da:	9b00      	ldr	r3, [sp, #0]
 80129dc:	58eb      	ldr	r3, [r5, r3]
 80129de:	b92b      	cbnz	r3, 80129ec <quorem+0x96>
 80129e0:	9b01      	ldr	r3, [sp, #4]
 80129e2:	3b04      	subs	r3, #4
 80129e4:	429d      	cmp	r5, r3
 80129e6:	461a      	mov	r2, r3
 80129e8:	d32f      	bcc.n	8012a4a <quorem+0xf4>
 80129ea:	613c      	str	r4, [r7, #16]
 80129ec:	4638      	mov	r0, r7
 80129ee:	f001 f8c3 	bl	8013b78 <__mcmp>
 80129f2:	2800      	cmp	r0, #0
 80129f4:	db25      	blt.n	8012a42 <quorem+0xec>
 80129f6:	4629      	mov	r1, r5
 80129f8:	2000      	movs	r0, #0
 80129fa:	f858 2b04 	ldr.w	r2, [r8], #4
 80129fe:	f8d1 c000 	ldr.w	ip, [r1]
 8012a02:	fa1f fe82 	uxth.w	lr, r2
 8012a06:	fa1f f38c 	uxth.w	r3, ip
 8012a0a:	eba3 030e 	sub.w	r3, r3, lr
 8012a0e:	4403      	add	r3, r0
 8012a10:	0c12      	lsrs	r2, r2, #16
 8012a12:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8012a16:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012a1a:	b29b      	uxth	r3, r3
 8012a1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012a20:	45c1      	cmp	r9, r8
 8012a22:	f841 3b04 	str.w	r3, [r1], #4
 8012a26:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012a2a:	d2e6      	bcs.n	80129fa <quorem+0xa4>
 8012a2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012a30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012a34:	b922      	cbnz	r2, 8012a40 <quorem+0xea>
 8012a36:	3b04      	subs	r3, #4
 8012a38:	429d      	cmp	r5, r3
 8012a3a:	461a      	mov	r2, r3
 8012a3c:	d30b      	bcc.n	8012a56 <quorem+0x100>
 8012a3e:	613c      	str	r4, [r7, #16]
 8012a40:	3601      	adds	r6, #1
 8012a42:	4630      	mov	r0, r6
 8012a44:	b003      	add	sp, #12
 8012a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a4a:	6812      	ldr	r2, [r2, #0]
 8012a4c:	3b04      	subs	r3, #4
 8012a4e:	2a00      	cmp	r2, #0
 8012a50:	d1cb      	bne.n	80129ea <quorem+0x94>
 8012a52:	3c01      	subs	r4, #1
 8012a54:	e7c6      	b.n	80129e4 <quorem+0x8e>
 8012a56:	6812      	ldr	r2, [r2, #0]
 8012a58:	3b04      	subs	r3, #4
 8012a5a:	2a00      	cmp	r2, #0
 8012a5c:	d1ef      	bne.n	8012a3e <quorem+0xe8>
 8012a5e:	3c01      	subs	r4, #1
 8012a60:	e7ea      	b.n	8012a38 <quorem+0xe2>
 8012a62:	2000      	movs	r0, #0
 8012a64:	e7ee      	b.n	8012a44 <quorem+0xee>
	...

08012a68 <_dtoa_r>:
 8012a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a6c:	69c7      	ldr	r7, [r0, #28]
 8012a6e:	b099      	sub	sp, #100	@ 0x64
 8012a70:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012a74:	ec55 4b10 	vmov	r4, r5, d0
 8012a78:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8012a7a:	9109      	str	r1, [sp, #36]	@ 0x24
 8012a7c:	4683      	mov	fp, r0
 8012a7e:	920e      	str	r2, [sp, #56]	@ 0x38
 8012a80:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012a82:	b97f      	cbnz	r7, 8012aa4 <_dtoa_r+0x3c>
 8012a84:	2010      	movs	r0, #16
 8012a86:	f7ff f84f 	bl	8011b28 <malloc>
 8012a8a:	4602      	mov	r2, r0
 8012a8c:	f8cb 001c 	str.w	r0, [fp, #28]
 8012a90:	b920      	cbnz	r0, 8012a9c <_dtoa_r+0x34>
 8012a92:	4ba7      	ldr	r3, [pc, #668]	@ (8012d30 <_dtoa_r+0x2c8>)
 8012a94:	21ef      	movs	r1, #239	@ 0xef
 8012a96:	48a7      	ldr	r0, [pc, #668]	@ (8012d34 <_dtoa_r+0x2cc>)
 8012a98:	f001 fba2 	bl	80141e0 <__assert_func>
 8012a9c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012aa0:	6007      	str	r7, [r0, #0]
 8012aa2:	60c7      	str	r7, [r0, #12]
 8012aa4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012aa8:	6819      	ldr	r1, [r3, #0]
 8012aaa:	b159      	cbz	r1, 8012ac4 <_dtoa_r+0x5c>
 8012aac:	685a      	ldr	r2, [r3, #4]
 8012aae:	604a      	str	r2, [r1, #4]
 8012ab0:	2301      	movs	r3, #1
 8012ab2:	4093      	lsls	r3, r2
 8012ab4:	608b      	str	r3, [r1, #8]
 8012ab6:	4658      	mov	r0, fp
 8012ab8:	f000 fe24 	bl	8013704 <_Bfree>
 8012abc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012ac0:	2200      	movs	r2, #0
 8012ac2:	601a      	str	r2, [r3, #0]
 8012ac4:	1e2b      	subs	r3, r5, #0
 8012ac6:	bfb9      	ittee	lt
 8012ac8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012acc:	9303      	strlt	r3, [sp, #12]
 8012ace:	2300      	movge	r3, #0
 8012ad0:	6033      	strge	r3, [r6, #0]
 8012ad2:	9f03      	ldr	r7, [sp, #12]
 8012ad4:	4b98      	ldr	r3, [pc, #608]	@ (8012d38 <_dtoa_r+0x2d0>)
 8012ad6:	bfbc      	itt	lt
 8012ad8:	2201      	movlt	r2, #1
 8012ada:	6032      	strlt	r2, [r6, #0]
 8012adc:	43bb      	bics	r3, r7
 8012ade:	d112      	bne.n	8012b06 <_dtoa_r+0x9e>
 8012ae0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012ae2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012ae6:	6013      	str	r3, [r2, #0]
 8012ae8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012aec:	4323      	orrs	r3, r4
 8012aee:	f000 854d 	beq.w	801358c <_dtoa_r+0xb24>
 8012af2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012af4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8012d4c <_dtoa_r+0x2e4>
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	f000 854f 	beq.w	801359c <_dtoa_r+0xb34>
 8012afe:	f10a 0303 	add.w	r3, sl, #3
 8012b02:	f000 bd49 	b.w	8013598 <_dtoa_r+0xb30>
 8012b06:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012b0a:	2200      	movs	r2, #0
 8012b0c:	ec51 0b17 	vmov	r0, r1, d7
 8012b10:	2300      	movs	r3, #0
 8012b12:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8012b16:	f7ed ffdf 	bl	8000ad8 <__aeabi_dcmpeq>
 8012b1a:	4680      	mov	r8, r0
 8012b1c:	b158      	cbz	r0, 8012b36 <_dtoa_r+0xce>
 8012b1e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012b20:	2301      	movs	r3, #1
 8012b22:	6013      	str	r3, [r2, #0]
 8012b24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012b26:	b113      	cbz	r3, 8012b2e <_dtoa_r+0xc6>
 8012b28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012b2a:	4b84      	ldr	r3, [pc, #528]	@ (8012d3c <_dtoa_r+0x2d4>)
 8012b2c:	6013      	str	r3, [r2, #0]
 8012b2e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8012d50 <_dtoa_r+0x2e8>
 8012b32:	f000 bd33 	b.w	801359c <_dtoa_r+0xb34>
 8012b36:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012b3a:	aa16      	add	r2, sp, #88	@ 0x58
 8012b3c:	a917      	add	r1, sp, #92	@ 0x5c
 8012b3e:	4658      	mov	r0, fp
 8012b40:	f001 f8ca 	bl	8013cd8 <__d2b>
 8012b44:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012b48:	4681      	mov	r9, r0
 8012b4a:	2e00      	cmp	r6, #0
 8012b4c:	d077      	beq.n	8012c3e <_dtoa_r+0x1d6>
 8012b4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012b50:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8012b54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012b58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012b5c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012b60:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8012b64:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012b68:	4619      	mov	r1, r3
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	4b74      	ldr	r3, [pc, #464]	@ (8012d40 <_dtoa_r+0x2d8>)
 8012b6e:	f7ed fb93 	bl	8000298 <__aeabi_dsub>
 8012b72:	a369      	add	r3, pc, #420	@ (adr r3, 8012d18 <_dtoa_r+0x2b0>)
 8012b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b78:	f7ed fd46 	bl	8000608 <__aeabi_dmul>
 8012b7c:	a368      	add	r3, pc, #416	@ (adr r3, 8012d20 <_dtoa_r+0x2b8>)
 8012b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b82:	f7ed fb8b 	bl	800029c <__adddf3>
 8012b86:	4604      	mov	r4, r0
 8012b88:	4630      	mov	r0, r6
 8012b8a:	460d      	mov	r5, r1
 8012b8c:	f7ed fcd2 	bl	8000534 <__aeabi_i2d>
 8012b90:	a365      	add	r3, pc, #404	@ (adr r3, 8012d28 <_dtoa_r+0x2c0>)
 8012b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b96:	f7ed fd37 	bl	8000608 <__aeabi_dmul>
 8012b9a:	4602      	mov	r2, r0
 8012b9c:	460b      	mov	r3, r1
 8012b9e:	4620      	mov	r0, r4
 8012ba0:	4629      	mov	r1, r5
 8012ba2:	f7ed fb7b 	bl	800029c <__adddf3>
 8012ba6:	4604      	mov	r4, r0
 8012ba8:	460d      	mov	r5, r1
 8012baa:	f7ed ffdd 	bl	8000b68 <__aeabi_d2iz>
 8012bae:	2200      	movs	r2, #0
 8012bb0:	4607      	mov	r7, r0
 8012bb2:	2300      	movs	r3, #0
 8012bb4:	4620      	mov	r0, r4
 8012bb6:	4629      	mov	r1, r5
 8012bb8:	f7ed ff98 	bl	8000aec <__aeabi_dcmplt>
 8012bbc:	b140      	cbz	r0, 8012bd0 <_dtoa_r+0x168>
 8012bbe:	4638      	mov	r0, r7
 8012bc0:	f7ed fcb8 	bl	8000534 <__aeabi_i2d>
 8012bc4:	4622      	mov	r2, r4
 8012bc6:	462b      	mov	r3, r5
 8012bc8:	f7ed ff86 	bl	8000ad8 <__aeabi_dcmpeq>
 8012bcc:	b900      	cbnz	r0, 8012bd0 <_dtoa_r+0x168>
 8012bce:	3f01      	subs	r7, #1
 8012bd0:	2f16      	cmp	r7, #22
 8012bd2:	d851      	bhi.n	8012c78 <_dtoa_r+0x210>
 8012bd4:	4b5b      	ldr	r3, [pc, #364]	@ (8012d44 <_dtoa_r+0x2dc>)
 8012bd6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012be2:	f7ed ff83 	bl	8000aec <__aeabi_dcmplt>
 8012be6:	2800      	cmp	r0, #0
 8012be8:	d048      	beq.n	8012c7c <_dtoa_r+0x214>
 8012bea:	3f01      	subs	r7, #1
 8012bec:	2300      	movs	r3, #0
 8012bee:	9312      	str	r3, [sp, #72]	@ 0x48
 8012bf0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012bf2:	1b9b      	subs	r3, r3, r6
 8012bf4:	1e5a      	subs	r2, r3, #1
 8012bf6:	bf44      	itt	mi
 8012bf8:	f1c3 0801 	rsbmi	r8, r3, #1
 8012bfc:	2300      	movmi	r3, #0
 8012bfe:	9208      	str	r2, [sp, #32]
 8012c00:	bf54      	ite	pl
 8012c02:	f04f 0800 	movpl.w	r8, #0
 8012c06:	9308      	strmi	r3, [sp, #32]
 8012c08:	2f00      	cmp	r7, #0
 8012c0a:	db39      	blt.n	8012c80 <_dtoa_r+0x218>
 8012c0c:	9b08      	ldr	r3, [sp, #32]
 8012c0e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8012c10:	443b      	add	r3, r7
 8012c12:	9308      	str	r3, [sp, #32]
 8012c14:	2300      	movs	r3, #0
 8012c16:	930a      	str	r3, [sp, #40]	@ 0x28
 8012c18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c1a:	2b09      	cmp	r3, #9
 8012c1c:	d864      	bhi.n	8012ce8 <_dtoa_r+0x280>
 8012c1e:	2b05      	cmp	r3, #5
 8012c20:	bfc4      	itt	gt
 8012c22:	3b04      	subgt	r3, #4
 8012c24:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8012c26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c28:	f1a3 0302 	sub.w	r3, r3, #2
 8012c2c:	bfcc      	ite	gt
 8012c2e:	2400      	movgt	r4, #0
 8012c30:	2401      	movle	r4, #1
 8012c32:	2b03      	cmp	r3, #3
 8012c34:	d863      	bhi.n	8012cfe <_dtoa_r+0x296>
 8012c36:	e8df f003 	tbb	[pc, r3]
 8012c3a:	372a      	.short	0x372a
 8012c3c:	5535      	.short	0x5535
 8012c3e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8012c42:	441e      	add	r6, r3
 8012c44:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012c48:	2b20      	cmp	r3, #32
 8012c4a:	bfc1      	itttt	gt
 8012c4c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012c50:	409f      	lslgt	r7, r3
 8012c52:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8012c56:	fa24 f303 	lsrgt.w	r3, r4, r3
 8012c5a:	bfd6      	itet	le
 8012c5c:	f1c3 0320 	rsble	r3, r3, #32
 8012c60:	ea47 0003 	orrgt.w	r0, r7, r3
 8012c64:	fa04 f003 	lslle.w	r0, r4, r3
 8012c68:	f7ed fc54 	bl	8000514 <__aeabi_ui2d>
 8012c6c:	2201      	movs	r2, #1
 8012c6e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8012c72:	3e01      	subs	r6, #1
 8012c74:	9214      	str	r2, [sp, #80]	@ 0x50
 8012c76:	e777      	b.n	8012b68 <_dtoa_r+0x100>
 8012c78:	2301      	movs	r3, #1
 8012c7a:	e7b8      	b.n	8012bee <_dtoa_r+0x186>
 8012c7c:	9012      	str	r0, [sp, #72]	@ 0x48
 8012c7e:	e7b7      	b.n	8012bf0 <_dtoa_r+0x188>
 8012c80:	427b      	negs	r3, r7
 8012c82:	930a      	str	r3, [sp, #40]	@ 0x28
 8012c84:	2300      	movs	r3, #0
 8012c86:	eba8 0807 	sub.w	r8, r8, r7
 8012c8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012c8c:	e7c4      	b.n	8012c18 <_dtoa_r+0x1b0>
 8012c8e:	2300      	movs	r3, #0
 8012c90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012c92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	dc35      	bgt.n	8012d04 <_dtoa_r+0x29c>
 8012c98:	2301      	movs	r3, #1
 8012c9a:	9300      	str	r3, [sp, #0]
 8012c9c:	9307      	str	r3, [sp, #28]
 8012c9e:	461a      	mov	r2, r3
 8012ca0:	920e      	str	r2, [sp, #56]	@ 0x38
 8012ca2:	e00b      	b.n	8012cbc <_dtoa_r+0x254>
 8012ca4:	2301      	movs	r3, #1
 8012ca6:	e7f3      	b.n	8012c90 <_dtoa_r+0x228>
 8012ca8:	2300      	movs	r3, #0
 8012caa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012cac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012cae:	18fb      	adds	r3, r7, r3
 8012cb0:	9300      	str	r3, [sp, #0]
 8012cb2:	3301      	adds	r3, #1
 8012cb4:	2b01      	cmp	r3, #1
 8012cb6:	9307      	str	r3, [sp, #28]
 8012cb8:	bfb8      	it	lt
 8012cba:	2301      	movlt	r3, #1
 8012cbc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8012cc0:	2100      	movs	r1, #0
 8012cc2:	2204      	movs	r2, #4
 8012cc4:	f102 0514 	add.w	r5, r2, #20
 8012cc8:	429d      	cmp	r5, r3
 8012cca:	d91f      	bls.n	8012d0c <_dtoa_r+0x2a4>
 8012ccc:	6041      	str	r1, [r0, #4]
 8012cce:	4658      	mov	r0, fp
 8012cd0:	f000 fcd8 	bl	8013684 <_Balloc>
 8012cd4:	4682      	mov	sl, r0
 8012cd6:	2800      	cmp	r0, #0
 8012cd8:	d13c      	bne.n	8012d54 <_dtoa_r+0x2ec>
 8012cda:	4b1b      	ldr	r3, [pc, #108]	@ (8012d48 <_dtoa_r+0x2e0>)
 8012cdc:	4602      	mov	r2, r0
 8012cde:	f240 11af 	movw	r1, #431	@ 0x1af
 8012ce2:	e6d8      	b.n	8012a96 <_dtoa_r+0x2e>
 8012ce4:	2301      	movs	r3, #1
 8012ce6:	e7e0      	b.n	8012caa <_dtoa_r+0x242>
 8012ce8:	2401      	movs	r4, #1
 8012cea:	2300      	movs	r3, #0
 8012cec:	9309      	str	r3, [sp, #36]	@ 0x24
 8012cee:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8012cf4:	9300      	str	r3, [sp, #0]
 8012cf6:	9307      	str	r3, [sp, #28]
 8012cf8:	2200      	movs	r2, #0
 8012cfa:	2312      	movs	r3, #18
 8012cfc:	e7d0      	b.n	8012ca0 <_dtoa_r+0x238>
 8012cfe:	2301      	movs	r3, #1
 8012d00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012d02:	e7f5      	b.n	8012cf0 <_dtoa_r+0x288>
 8012d04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012d06:	9300      	str	r3, [sp, #0]
 8012d08:	9307      	str	r3, [sp, #28]
 8012d0a:	e7d7      	b.n	8012cbc <_dtoa_r+0x254>
 8012d0c:	3101      	adds	r1, #1
 8012d0e:	0052      	lsls	r2, r2, #1
 8012d10:	e7d8      	b.n	8012cc4 <_dtoa_r+0x25c>
 8012d12:	bf00      	nop
 8012d14:	f3af 8000 	nop.w
 8012d18:	636f4361 	.word	0x636f4361
 8012d1c:	3fd287a7 	.word	0x3fd287a7
 8012d20:	8b60c8b3 	.word	0x8b60c8b3
 8012d24:	3fc68a28 	.word	0x3fc68a28
 8012d28:	509f79fb 	.word	0x509f79fb
 8012d2c:	3fd34413 	.word	0x3fd34413
 8012d30:	080162a1 	.word	0x080162a1
 8012d34:	080162b8 	.word	0x080162b8
 8012d38:	7ff00000 	.word	0x7ff00000
 8012d3c:	08016271 	.word	0x08016271
 8012d40:	3ff80000 	.word	0x3ff80000
 8012d44:	080163b0 	.word	0x080163b0
 8012d48:	08016310 	.word	0x08016310
 8012d4c:	0801629d 	.word	0x0801629d
 8012d50:	08016270 	.word	0x08016270
 8012d54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012d58:	6018      	str	r0, [r3, #0]
 8012d5a:	9b07      	ldr	r3, [sp, #28]
 8012d5c:	2b0e      	cmp	r3, #14
 8012d5e:	f200 80a4 	bhi.w	8012eaa <_dtoa_r+0x442>
 8012d62:	2c00      	cmp	r4, #0
 8012d64:	f000 80a1 	beq.w	8012eaa <_dtoa_r+0x442>
 8012d68:	2f00      	cmp	r7, #0
 8012d6a:	dd33      	ble.n	8012dd4 <_dtoa_r+0x36c>
 8012d6c:	4bad      	ldr	r3, [pc, #692]	@ (8013024 <_dtoa_r+0x5bc>)
 8012d6e:	f007 020f 	and.w	r2, r7, #15
 8012d72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012d76:	ed93 7b00 	vldr	d7, [r3]
 8012d7a:	05f8      	lsls	r0, r7, #23
 8012d7c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012d80:	ea4f 1427 	mov.w	r4, r7, asr #4
 8012d84:	d516      	bpl.n	8012db4 <_dtoa_r+0x34c>
 8012d86:	4ba8      	ldr	r3, [pc, #672]	@ (8013028 <_dtoa_r+0x5c0>)
 8012d88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012d8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012d90:	f7ed fd64 	bl	800085c <__aeabi_ddiv>
 8012d94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012d98:	f004 040f 	and.w	r4, r4, #15
 8012d9c:	2603      	movs	r6, #3
 8012d9e:	4da2      	ldr	r5, [pc, #648]	@ (8013028 <_dtoa_r+0x5c0>)
 8012da0:	b954      	cbnz	r4, 8012db8 <_dtoa_r+0x350>
 8012da2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012da6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012daa:	f7ed fd57 	bl	800085c <__aeabi_ddiv>
 8012dae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012db2:	e028      	b.n	8012e06 <_dtoa_r+0x39e>
 8012db4:	2602      	movs	r6, #2
 8012db6:	e7f2      	b.n	8012d9e <_dtoa_r+0x336>
 8012db8:	07e1      	lsls	r1, r4, #31
 8012dba:	d508      	bpl.n	8012dce <_dtoa_r+0x366>
 8012dbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012dc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012dc4:	f7ed fc20 	bl	8000608 <__aeabi_dmul>
 8012dc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012dcc:	3601      	adds	r6, #1
 8012dce:	1064      	asrs	r4, r4, #1
 8012dd0:	3508      	adds	r5, #8
 8012dd2:	e7e5      	b.n	8012da0 <_dtoa_r+0x338>
 8012dd4:	f000 80d2 	beq.w	8012f7c <_dtoa_r+0x514>
 8012dd8:	427c      	negs	r4, r7
 8012dda:	4b92      	ldr	r3, [pc, #584]	@ (8013024 <_dtoa_r+0x5bc>)
 8012ddc:	4d92      	ldr	r5, [pc, #584]	@ (8013028 <_dtoa_r+0x5c0>)
 8012dde:	f004 020f 	and.w	r2, r4, #15
 8012de2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012dee:	f7ed fc0b 	bl	8000608 <__aeabi_dmul>
 8012df2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012df6:	1124      	asrs	r4, r4, #4
 8012df8:	2300      	movs	r3, #0
 8012dfa:	2602      	movs	r6, #2
 8012dfc:	2c00      	cmp	r4, #0
 8012dfe:	f040 80b2 	bne.w	8012f66 <_dtoa_r+0x4fe>
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d1d3      	bne.n	8012dae <_dtoa_r+0x346>
 8012e06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012e08:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	f000 80b7 	beq.w	8012f80 <_dtoa_r+0x518>
 8012e12:	4b86      	ldr	r3, [pc, #536]	@ (801302c <_dtoa_r+0x5c4>)
 8012e14:	2200      	movs	r2, #0
 8012e16:	4620      	mov	r0, r4
 8012e18:	4629      	mov	r1, r5
 8012e1a:	f7ed fe67 	bl	8000aec <__aeabi_dcmplt>
 8012e1e:	2800      	cmp	r0, #0
 8012e20:	f000 80ae 	beq.w	8012f80 <_dtoa_r+0x518>
 8012e24:	9b07      	ldr	r3, [sp, #28]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	f000 80aa 	beq.w	8012f80 <_dtoa_r+0x518>
 8012e2c:	9b00      	ldr	r3, [sp, #0]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	dd37      	ble.n	8012ea2 <_dtoa_r+0x43a>
 8012e32:	1e7b      	subs	r3, r7, #1
 8012e34:	9304      	str	r3, [sp, #16]
 8012e36:	4620      	mov	r0, r4
 8012e38:	4b7d      	ldr	r3, [pc, #500]	@ (8013030 <_dtoa_r+0x5c8>)
 8012e3a:	2200      	movs	r2, #0
 8012e3c:	4629      	mov	r1, r5
 8012e3e:	f7ed fbe3 	bl	8000608 <__aeabi_dmul>
 8012e42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012e46:	9c00      	ldr	r4, [sp, #0]
 8012e48:	3601      	adds	r6, #1
 8012e4a:	4630      	mov	r0, r6
 8012e4c:	f7ed fb72 	bl	8000534 <__aeabi_i2d>
 8012e50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012e54:	f7ed fbd8 	bl	8000608 <__aeabi_dmul>
 8012e58:	4b76      	ldr	r3, [pc, #472]	@ (8013034 <_dtoa_r+0x5cc>)
 8012e5a:	2200      	movs	r2, #0
 8012e5c:	f7ed fa1e 	bl	800029c <__adddf3>
 8012e60:	4605      	mov	r5, r0
 8012e62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8012e66:	2c00      	cmp	r4, #0
 8012e68:	f040 808d 	bne.w	8012f86 <_dtoa_r+0x51e>
 8012e6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012e70:	4b71      	ldr	r3, [pc, #452]	@ (8013038 <_dtoa_r+0x5d0>)
 8012e72:	2200      	movs	r2, #0
 8012e74:	f7ed fa10 	bl	8000298 <__aeabi_dsub>
 8012e78:	4602      	mov	r2, r0
 8012e7a:	460b      	mov	r3, r1
 8012e7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012e80:	462a      	mov	r2, r5
 8012e82:	4633      	mov	r3, r6
 8012e84:	f7ed fe50 	bl	8000b28 <__aeabi_dcmpgt>
 8012e88:	2800      	cmp	r0, #0
 8012e8a:	f040 828b 	bne.w	80133a4 <_dtoa_r+0x93c>
 8012e8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012e92:	462a      	mov	r2, r5
 8012e94:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8012e98:	f7ed fe28 	bl	8000aec <__aeabi_dcmplt>
 8012e9c:	2800      	cmp	r0, #0
 8012e9e:	f040 8128 	bne.w	80130f2 <_dtoa_r+0x68a>
 8012ea2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8012ea6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8012eaa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	f2c0 815a 	blt.w	8013166 <_dtoa_r+0x6fe>
 8012eb2:	2f0e      	cmp	r7, #14
 8012eb4:	f300 8157 	bgt.w	8013166 <_dtoa_r+0x6fe>
 8012eb8:	4b5a      	ldr	r3, [pc, #360]	@ (8013024 <_dtoa_r+0x5bc>)
 8012eba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012ebe:	ed93 7b00 	vldr	d7, [r3]
 8012ec2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	ed8d 7b00 	vstr	d7, [sp]
 8012eca:	da03      	bge.n	8012ed4 <_dtoa_r+0x46c>
 8012ecc:	9b07      	ldr	r3, [sp, #28]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	f340 8101 	ble.w	80130d6 <_dtoa_r+0x66e>
 8012ed4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012ed8:	4656      	mov	r6, sl
 8012eda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012ede:	4620      	mov	r0, r4
 8012ee0:	4629      	mov	r1, r5
 8012ee2:	f7ed fcbb 	bl	800085c <__aeabi_ddiv>
 8012ee6:	f7ed fe3f 	bl	8000b68 <__aeabi_d2iz>
 8012eea:	4680      	mov	r8, r0
 8012eec:	f7ed fb22 	bl	8000534 <__aeabi_i2d>
 8012ef0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012ef4:	f7ed fb88 	bl	8000608 <__aeabi_dmul>
 8012ef8:	4602      	mov	r2, r0
 8012efa:	460b      	mov	r3, r1
 8012efc:	4620      	mov	r0, r4
 8012efe:	4629      	mov	r1, r5
 8012f00:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8012f04:	f7ed f9c8 	bl	8000298 <__aeabi_dsub>
 8012f08:	f806 4b01 	strb.w	r4, [r6], #1
 8012f0c:	9d07      	ldr	r5, [sp, #28]
 8012f0e:	eba6 040a 	sub.w	r4, r6, sl
 8012f12:	42a5      	cmp	r5, r4
 8012f14:	4602      	mov	r2, r0
 8012f16:	460b      	mov	r3, r1
 8012f18:	f040 8117 	bne.w	801314a <_dtoa_r+0x6e2>
 8012f1c:	f7ed f9be 	bl	800029c <__adddf3>
 8012f20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012f24:	4604      	mov	r4, r0
 8012f26:	460d      	mov	r5, r1
 8012f28:	f7ed fdfe 	bl	8000b28 <__aeabi_dcmpgt>
 8012f2c:	2800      	cmp	r0, #0
 8012f2e:	f040 80f9 	bne.w	8013124 <_dtoa_r+0x6bc>
 8012f32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012f36:	4620      	mov	r0, r4
 8012f38:	4629      	mov	r1, r5
 8012f3a:	f7ed fdcd 	bl	8000ad8 <__aeabi_dcmpeq>
 8012f3e:	b118      	cbz	r0, 8012f48 <_dtoa_r+0x4e0>
 8012f40:	f018 0f01 	tst.w	r8, #1
 8012f44:	f040 80ee 	bne.w	8013124 <_dtoa_r+0x6bc>
 8012f48:	4649      	mov	r1, r9
 8012f4a:	4658      	mov	r0, fp
 8012f4c:	f000 fbda 	bl	8013704 <_Bfree>
 8012f50:	2300      	movs	r3, #0
 8012f52:	7033      	strb	r3, [r6, #0]
 8012f54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012f56:	3701      	adds	r7, #1
 8012f58:	601f      	str	r7, [r3, #0]
 8012f5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	f000 831d 	beq.w	801359c <_dtoa_r+0xb34>
 8012f62:	601e      	str	r6, [r3, #0]
 8012f64:	e31a      	b.n	801359c <_dtoa_r+0xb34>
 8012f66:	07e2      	lsls	r2, r4, #31
 8012f68:	d505      	bpl.n	8012f76 <_dtoa_r+0x50e>
 8012f6a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012f6e:	f7ed fb4b 	bl	8000608 <__aeabi_dmul>
 8012f72:	3601      	adds	r6, #1
 8012f74:	2301      	movs	r3, #1
 8012f76:	1064      	asrs	r4, r4, #1
 8012f78:	3508      	adds	r5, #8
 8012f7a:	e73f      	b.n	8012dfc <_dtoa_r+0x394>
 8012f7c:	2602      	movs	r6, #2
 8012f7e:	e742      	b.n	8012e06 <_dtoa_r+0x39e>
 8012f80:	9c07      	ldr	r4, [sp, #28]
 8012f82:	9704      	str	r7, [sp, #16]
 8012f84:	e761      	b.n	8012e4a <_dtoa_r+0x3e2>
 8012f86:	4b27      	ldr	r3, [pc, #156]	@ (8013024 <_dtoa_r+0x5bc>)
 8012f88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012f8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012f8e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012f92:	4454      	add	r4, sl
 8012f94:	2900      	cmp	r1, #0
 8012f96:	d053      	beq.n	8013040 <_dtoa_r+0x5d8>
 8012f98:	4928      	ldr	r1, [pc, #160]	@ (801303c <_dtoa_r+0x5d4>)
 8012f9a:	2000      	movs	r0, #0
 8012f9c:	f7ed fc5e 	bl	800085c <__aeabi_ddiv>
 8012fa0:	4633      	mov	r3, r6
 8012fa2:	462a      	mov	r2, r5
 8012fa4:	f7ed f978 	bl	8000298 <__aeabi_dsub>
 8012fa8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012fac:	4656      	mov	r6, sl
 8012fae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012fb2:	f7ed fdd9 	bl	8000b68 <__aeabi_d2iz>
 8012fb6:	4605      	mov	r5, r0
 8012fb8:	f7ed fabc 	bl	8000534 <__aeabi_i2d>
 8012fbc:	4602      	mov	r2, r0
 8012fbe:	460b      	mov	r3, r1
 8012fc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012fc4:	f7ed f968 	bl	8000298 <__aeabi_dsub>
 8012fc8:	3530      	adds	r5, #48	@ 0x30
 8012fca:	4602      	mov	r2, r0
 8012fcc:	460b      	mov	r3, r1
 8012fce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012fd2:	f806 5b01 	strb.w	r5, [r6], #1
 8012fd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012fda:	f7ed fd87 	bl	8000aec <__aeabi_dcmplt>
 8012fde:	2800      	cmp	r0, #0
 8012fe0:	d171      	bne.n	80130c6 <_dtoa_r+0x65e>
 8012fe2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012fe6:	4911      	ldr	r1, [pc, #68]	@ (801302c <_dtoa_r+0x5c4>)
 8012fe8:	2000      	movs	r0, #0
 8012fea:	f7ed f955 	bl	8000298 <__aeabi_dsub>
 8012fee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012ff2:	f7ed fd7b 	bl	8000aec <__aeabi_dcmplt>
 8012ff6:	2800      	cmp	r0, #0
 8012ff8:	f040 8095 	bne.w	8013126 <_dtoa_r+0x6be>
 8012ffc:	42a6      	cmp	r6, r4
 8012ffe:	f43f af50 	beq.w	8012ea2 <_dtoa_r+0x43a>
 8013002:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8013006:	4b0a      	ldr	r3, [pc, #40]	@ (8013030 <_dtoa_r+0x5c8>)
 8013008:	2200      	movs	r2, #0
 801300a:	f7ed fafd 	bl	8000608 <__aeabi_dmul>
 801300e:	4b08      	ldr	r3, [pc, #32]	@ (8013030 <_dtoa_r+0x5c8>)
 8013010:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013014:	2200      	movs	r2, #0
 8013016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801301a:	f7ed faf5 	bl	8000608 <__aeabi_dmul>
 801301e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013022:	e7c4      	b.n	8012fae <_dtoa_r+0x546>
 8013024:	080163b0 	.word	0x080163b0
 8013028:	08016388 	.word	0x08016388
 801302c:	3ff00000 	.word	0x3ff00000
 8013030:	40240000 	.word	0x40240000
 8013034:	401c0000 	.word	0x401c0000
 8013038:	40140000 	.word	0x40140000
 801303c:	3fe00000 	.word	0x3fe00000
 8013040:	4631      	mov	r1, r6
 8013042:	4628      	mov	r0, r5
 8013044:	f7ed fae0 	bl	8000608 <__aeabi_dmul>
 8013048:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801304c:	9415      	str	r4, [sp, #84]	@ 0x54
 801304e:	4656      	mov	r6, sl
 8013050:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013054:	f7ed fd88 	bl	8000b68 <__aeabi_d2iz>
 8013058:	4605      	mov	r5, r0
 801305a:	f7ed fa6b 	bl	8000534 <__aeabi_i2d>
 801305e:	4602      	mov	r2, r0
 8013060:	460b      	mov	r3, r1
 8013062:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013066:	f7ed f917 	bl	8000298 <__aeabi_dsub>
 801306a:	3530      	adds	r5, #48	@ 0x30
 801306c:	f806 5b01 	strb.w	r5, [r6], #1
 8013070:	4602      	mov	r2, r0
 8013072:	460b      	mov	r3, r1
 8013074:	42a6      	cmp	r6, r4
 8013076:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801307a:	f04f 0200 	mov.w	r2, #0
 801307e:	d124      	bne.n	80130ca <_dtoa_r+0x662>
 8013080:	4bac      	ldr	r3, [pc, #688]	@ (8013334 <_dtoa_r+0x8cc>)
 8013082:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8013086:	f7ed f909 	bl	800029c <__adddf3>
 801308a:	4602      	mov	r2, r0
 801308c:	460b      	mov	r3, r1
 801308e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013092:	f7ed fd49 	bl	8000b28 <__aeabi_dcmpgt>
 8013096:	2800      	cmp	r0, #0
 8013098:	d145      	bne.n	8013126 <_dtoa_r+0x6be>
 801309a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801309e:	49a5      	ldr	r1, [pc, #660]	@ (8013334 <_dtoa_r+0x8cc>)
 80130a0:	2000      	movs	r0, #0
 80130a2:	f7ed f8f9 	bl	8000298 <__aeabi_dsub>
 80130a6:	4602      	mov	r2, r0
 80130a8:	460b      	mov	r3, r1
 80130aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80130ae:	f7ed fd1d 	bl	8000aec <__aeabi_dcmplt>
 80130b2:	2800      	cmp	r0, #0
 80130b4:	f43f aef5 	beq.w	8012ea2 <_dtoa_r+0x43a>
 80130b8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80130ba:	1e73      	subs	r3, r6, #1
 80130bc:	9315      	str	r3, [sp, #84]	@ 0x54
 80130be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80130c2:	2b30      	cmp	r3, #48	@ 0x30
 80130c4:	d0f8      	beq.n	80130b8 <_dtoa_r+0x650>
 80130c6:	9f04      	ldr	r7, [sp, #16]
 80130c8:	e73e      	b.n	8012f48 <_dtoa_r+0x4e0>
 80130ca:	4b9b      	ldr	r3, [pc, #620]	@ (8013338 <_dtoa_r+0x8d0>)
 80130cc:	f7ed fa9c 	bl	8000608 <__aeabi_dmul>
 80130d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80130d4:	e7bc      	b.n	8013050 <_dtoa_r+0x5e8>
 80130d6:	d10c      	bne.n	80130f2 <_dtoa_r+0x68a>
 80130d8:	4b98      	ldr	r3, [pc, #608]	@ (801333c <_dtoa_r+0x8d4>)
 80130da:	2200      	movs	r2, #0
 80130dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80130e0:	f7ed fa92 	bl	8000608 <__aeabi_dmul>
 80130e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80130e8:	f7ed fd14 	bl	8000b14 <__aeabi_dcmpge>
 80130ec:	2800      	cmp	r0, #0
 80130ee:	f000 8157 	beq.w	80133a0 <_dtoa_r+0x938>
 80130f2:	2400      	movs	r4, #0
 80130f4:	4625      	mov	r5, r4
 80130f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80130f8:	43db      	mvns	r3, r3
 80130fa:	9304      	str	r3, [sp, #16]
 80130fc:	4656      	mov	r6, sl
 80130fe:	2700      	movs	r7, #0
 8013100:	4621      	mov	r1, r4
 8013102:	4658      	mov	r0, fp
 8013104:	f000 fafe 	bl	8013704 <_Bfree>
 8013108:	2d00      	cmp	r5, #0
 801310a:	d0dc      	beq.n	80130c6 <_dtoa_r+0x65e>
 801310c:	b12f      	cbz	r7, 801311a <_dtoa_r+0x6b2>
 801310e:	42af      	cmp	r7, r5
 8013110:	d003      	beq.n	801311a <_dtoa_r+0x6b2>
 8013112:	4639      	mov	r1, r7
 8013114:	4658      	mov	r0, fp
 8013116:	f000 faf5 	bl	8013704 <_Bfree>
 801311a:	4629      	mov	r1, r5
 801311c:	4658      	mov	r0, fp
 801311e:	f000 faf1 	bl	8013704 <_Bfree>
 8013122:	e7d0      	b.n	80130c6 <_dtoa_r+0x65e>
 8013124:	9704      	str	r7, [sp, #16]
 8013126:	4633      	mov	r3, r6
 8013128:	461e      	mov	r6, r3
 801312a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801312e:	2a39      	cmp	r2, #57	@ 0x39
 8013130:	d107      	bne.n	8013142 <_dtoa_r+0x6da>
 8013132:	459a      	cmp	sl, r3
 8013134:	d1f8      	bne.n	8013128 <_dtoa_r+0x6c0>
 8013136:	9a04      	ldr	r2, [sp, #16]
 8013138:	3201      	adds	r2, #1
 801313a:	9204      	str	r2, [sp, #16]
 801313c:	2230      	movs	r2, #48	@ 0x30
 801313e:	f88a 2000 	strb.w	r2, [sl]
 8013142:	781a      	ldrb	r2, [r3, #0]
 8013144:	3201      	adds	r2, #1
 8013146:	701a      	strb	r2, [r3, #0]
 8013148:	e7bd      	b.n	80130c6 <_dtoa_r+0x65e>
 801314a:	4b7b      	ldr	r3, [pc, #492]	@ (8013338 <_dtoa_r+0x8d0>)
 801314c:	2200      	movs	r2, #0
 801314e:	f7ed fa5b 	bl	8000608 <__aeabi_dmul>
 8013152:	2200      	movs	r2, #0
 8013154:	2300      	movs	r3, #0
 8013156:	4604      	mov	r4, r0
 8013158:	460d      	mov	r5, r1
 801315a:	f7ed fcbd 	bl	8000ad8 <__aeabi_dcmpeq>
 801315e:	2800      	cmp	r0, #0
 8013160:	f43f aebb 	beq.w	8012eda <_dtoa_r+0x472>
 8013164:	e6f0      	b.n	8012f48 <_dtoa_r+0x4e0>
 8013166:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013168:	2a00      	cmp	r2, #0
 801316a:	f000 80db 	beq.w	8013324 <_dtoa_r+0x8bc>
 801316e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013170:	2a01      	cmp	r2, #1
 8013172:	f300 80bf 	bgt.w	80132f4 <_dtoa_r+0x88c>
 8013176:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013178:	2a00      	cmp	r2, #0
 801317a:	f000 80b7 	beq.w	80132ec <_dtoa_r+0x884>
 801317e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8013182:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8013184:	4646      	mov	r6, r8
 8013186:	9a08      	ldr	r2, [sp, #32]
 8013188:	2101      	movs	r1, #1
 801318a:	441a      	add	r2, r3
 801318c:	4658      	mov	r0, fp
 801318e:	4498      	add	r8, r3
 8013190:	9208      	str	r2, [sp, #32]
 8013192:	f000 fb6b 	bl	801386c <__i2b>
 8013196:	4605      	mov	r5, r0
 8013198:	b15e      	cbz	r6, 80131b2 <_dtoa_r+0x74a>
 801319a:	9b08      	ldr	r3, [sp, #32]
 801319c:	2b00      	cmp	r3, #0
 801319e:	dd08      	ble.n	80131b2 <_dtoa_r+0x74a>
 80131a0:	42b3      	cmp	r3, r6
 80131a2:	9a08      	ldr	r2, [sp, #32]
 80131a4:	bfa8      	it	ge
 80131a6:	4633      	movge	r3, r6
 80131a8:	eba8 0803 	sub.w	r8, r8, r3
 80131ac:	1af6      	subs	r6, r6, r3
 80131ae:	1ad3      	subs	r3, r2, r3
 80131b0:	9308      	str	r3, [sp, #32]
 80131b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80131b4:	b1f3      	cbz	r3, 80131f4 <_dtoa_r+0x78c>
 80131b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	f000 80b7 	beq.w	801332c <_dtoa_r+0x8c4>
 80131be:	b18c      	cbz	r4, 80131e4 <_dtoa_r+0x77c>
 80131c0:	4629      	mov	r1, r5
 80131c2:	4622      	mov	r2, r4
 80131c4:	4658      	mov	r0, fp
 80131c6:	f000 fc11 	bl	80139ec <__pow5mult>
 80131ca:	464a      	mov	r2, r9
 80131cc:	4601      	mov	r1, r0
 80131ce:	4605      	mov	r5, r0
 80131d0:	4658      	mov	r0, fp
 80131d2:	f000 fb61 	bl	8013898 <__multiply>
 80131d6:	4649      	mov	r1, r9
 80131d8:	9004      	str	r0, [sp, #16]
 80131da:	4658      	mov	r0, fp
 80131dc:	f000 fa92 	bl	8013704 <_Bfree>
 80131e0:	9b04      	ldr	r3, [sp, #16]
 80131e2:	4699      	mov	r9, r3
 80131e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80131e6:	1b1a      	subs	r2, r3, r4
 80131e8:	d004      	beq.n	80131f4 <_dtoa_r+0x78c>
 80131ea:	4649      	mov	r1, r9
 80131ec:	4658      	mov	r0, fp
 80131ee:	f000 fbfd 	bl	80139ec <__pow5mult>
 80131f2:	4681      	mov	r9, r0
 80131f4:	2101      	movs	r1, #1
 80131f6:	4658      	mov	r0, fp
 80131f8:	f000 fb38 	bl	801386c <__i2b>
 80131fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80131fe:	4604      	mov	r4, r0
 8013200:	2b00      	cmp	r3, #0
 8013202:	f000 81cf 	beq.w	80135a4 <_dtoa_r+0xb3c>
 8013206:	461a      	mov	r2, r3
 8013208:	4601      	mov	r1, r0
 801320a:	4658      	mov	r0, fp
 801320c:	f000 fbee 	bl	80139ec <__pow5mult>
 8013210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013212:	2b01      	cmp	r3, #1
 8013214:	4604      	mov	r4, r0
 8013216:	f300 8095 	bgt.w	8013344 <_dtoa_r+0x8dc>
 801321a:	9b02      	ldr	r3, [sp, #8]
 801321c:	2b00      	cmp	r3, #0
 801321e:	f040 8087 	bne.w	8013330 <_dtoa_r+0x8c8>
 8013222:	9b03      	ldr	r3, [sp, #12]
 8013224:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013228:	2b00      	cmp	r3, #0
 801322a:	f040 8089 	bne.w	8013340 <_dtoa_r+0x8d8>
 801322e:	9b03      	ldr	r3, [sp, #12]
 8013230:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013234:	0d1b      	lsrs	r3, r3, #20
 8013236:	051b      	lsls	r3, r3, #20
 8013238:	b12b      	cbz	r3, 8013246 <_dtoa_r+0x7de>
 801323a:	9b08      	ldr	r3, [sp, #32]
 801323c:	3301      	adds	r3, #1
 801323e:	9308      	str	r3, [sp, #32]
 8013240:	f108 0801 	add.w	r8, r8, #1
 8013244:	2301      	movs	r3, #1
 8013246:	930a      	str	r3, [sp, #40]	@ 0x28
 8013248:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801324a:	2b00      	cmp	r3, #0
 801324c:	f000 81b0 	beq.w	80135b0 <_dtoa_r+0xb48>
 8013250:	6923      	ldr	r3, [r4, #16]
 8013252:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013256:	6918      	ldr	r0, [r3, #16]
 8013258:	f000 fabc 	bl	80137d4 <__hi0bits>
 801325c:	f1c0 0020 	rsb	r0, r0, #32
 8013260:	9b08      	ldr	r3, [sp, #32]
 8013262:	4418      	add	r0, r3
 8013264:	f010 001f 	ands.w	r0, r0, #31
 8013268:	d077      	beq.n	801335a <_dtoa_r+0x8f2>
 801326a:	f1c0 0320 	rsb	r3, r0, #32
 801326e:	2b04      	cmp	r3, #4
 8013270:	dd6b      	ble.n	801334a <_dtoa_r+0x8e2>
 8013272:	9b08      	ldr	r3, [sp, #32]
 8013274:	f1c0 001c 	rsb	r0, r0, #28
 8013278:	4403      	add	r3, r0
 801327a:	4480      	add	r8, r0
 801327c:	4406      	add	r6, r0
 801327e:	9308      	str	r3, [sp, #32]
 8013280:	f1b8 0f00 	cmp.w	r8, #0
 8013284:	dd05      	ble.n	8013292 <_dtoa_r+0x82a>
 8013286:	4649      	mov	r1, r9
 8013288:	4642      	mov	r2, r8
 801328a:	4658      	mov	r0, fp
 801328c:	f000 fc08 	bl	8013aa0 <__lshift>
 8013290:	4681      	mov	r9, r0
 8013292:	9b08      	ldr	r3, [sp, #32]
 8013294:	2b00      	cmp	r3, #0
 8013296:	dd05      	ble.n	80132a4 <_dtoa_r+0x83c>
 8013298:	4621      	mov	r1, r4
 801329a:	461a      	mov	r2, r3
 801329c:	4658      	mov	r0, fp
 801329e:	f000 fbff 	bl	8013aa0 <__lshift>
 80132a2:	4604      	mov	r4, r0
 80132a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d059      	beq.n	801335e <_dtoa_r+0x8f6>
 80132aa:	4621      	mov	r1, r4
 80132ac:	4648      	mov	r0, r9
 80132ae:	f000 fc63 	bl	8013b78 <__mcmp>
 80132b2:	2800      	cmp	r0, #0
 80132b4:	da53      	bge.n	801335e <_dtoa_r+0x8f6>
 80132b6:	1e7b      	subs	r3, r7, #1
 80132b8:	9304      	str	r3, [sp, #16]
 80132ba:	4649      	mov	r1, r9
 80132bc:	2300      	movs	r3, #0
 80132be:	220a      	movs	r2, #10
 80132c0:	4658      	mov	r0, fp
 80132c2:	f000 fa41 	bl	8013748 <__multadd>
 80132c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80132c8:	4681      	mov	r9, r0
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	f000 8172 	beq.w	80135b4 <_dtoa_r+0xb4c>
 80132d0:	2300      	movs	r3, #0
 80132d2:	4629      	mov	r1, r5
 80132d4:	220a      	movs	r2, #10
 80132d6:	4658      	mov	r0, fp
 80132d8:	f000 fa36 	bl	8013748 <__multadd>
 80132dc:	9b00      	ldr	r3, [sp, #0]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	4605      	mov	r5, r0
 80132e2:	dc67      	bgt.n	80133b4 <_dtoa_r+0x94c>
 80132e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80132e6:	2b02      	cmp	r3, #2
 80132e8:	dc41      	bgt.n	801336e <_dtoa_r+0x906>
 80132ea:	e063      	b.n	80133b4 <_dtoa_r+0x94c>
 80132ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80132ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80132f2:	e746      	b.n	8013182 <_dtoa_r+0x71a>
 80132f4:	9b07      	ldr	r3, [sp, #28]
 80132f6:	1e5c      	subs	r4, r3, #1
 80132f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80132fa:	42a3      	cmp	r3, r4
 80132fc:	bfbf      	itttt	lt
 80132fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8013300:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8013302:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8013304:	1ae3      	sublt	r3, r4, r3
 8013306:	bfb4      	ite	lt
 8013308:	18d2      	addlt	r2, r2, r3
 801330a:	1b1c      	subge	r4, r3, r4
 801330c:	9b07      	ldr	r3, [sp, #28]
 801330e:	bfbc      	itt	lt
 8013310:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8013312:	2400      	movlt	r4, #0
 8013314:	2b00      	cmp	r3, #0
 8013316:	bfb5      	itete	lt
 8013318:	eba8 0603 	sublt.w	r6, r8, r3
 801331c:	9b07      	ldrge	r3, [sp, #28]
 801331e:	2300      	movlt	r3, #0
 8013320:	4646      	movge	r6, r8
 8013322:	e730      	b.n	8013186 <_dtoa_r+0x71e>
 8013324:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8013326:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8013328:	4646      	mov	r6, r8
 801332a:	e735      	b.n	8013198 <_dtoa_r+0x730>
 801332c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801332e:	e75c      	b.n	80131ea <_dtoa_r+0x782>
 8013330:	2300      	movs	r3, #0
 8013332:	e788      	b.n	8013246 <_dtoa_r+0x7de>
 8013334:	3fe00000 	.word	0x3fe00000
 8013338:	40240000 	.word	0x40240000
 801333c:	40140000 	.word	0x40140000
 8013340:	9b02      	ldr	r3, [sp, #8]
 8013342:	e780      	b.n	8013246 <_dtoa_r+0x7de>
 8013344:	2300      	movs	r3, #0
 8013346:	930a      	str	r3, [sp, #40]	@ 0x28
 8013348:	e782      	b.n	8013250 <_dtoa_r+0x7e8>
 801334a:	d099      	beq.n	8013280 <_dtoa_r+0x818>
 801334c:	9a08      	ldr	r2, [sp, #32]
 801334e:	331c      	adds	r3, #28
 8013350:	441a      	add	r2, r3
 8013352:	4498      	add	r8, r3
 8013354:	441e      	add	r6, r3
 8013356:	9208      	str	r2, [sp, #32]
 8013358:	e792      	b.n	8013280 <_dtoa_r+0x818>
 801335a:	4603      	mov	r3, r0
 801335c:	e7f6      	b.n	801334c <_dtoa_r+0x8e4>
 801335e:	9b07      	ldr	r3, [sp, #28]
 8013360:	9704      	str	r7, [sp, #16]
 8013362:	2b00      	cmp	r3, #0
 8013364:	dc20      	bgt.n	80133a8 <_dtoa_r+0x940>
 8013366:	9300      	str	r3, [sp, #0]
 8013368:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801336a:	2b02      	cmp	r3, #2
 801336c:	dd1e      	ble.n	80133ac <_dtoa_r+0x944>
 801336e:	9b00      	ldr	r3, [sp, #0]
 8013370:	2b00      	cmp	r3, #0
 8013372:	f47f aec0 	bne.w	80130f6 <_dtoa_r+0x68e>
 8013376:	4621      	mov	r1, r4
 8013378:	2205      	movs	r2, #5
 801337a:	4658      	mov	r0, fp
 801337c:	f000 f9e4 	bl	8013748 <__multadd>
 8013380:	4601      	mov	r1, r0
 8013382:	4604      	mov	r4, r0
 8013384:	4648      	mov	r0, r9
 8013386:	f000 fbf7 	bl	8013b78 <__mcmp>
 801338a:	2800      	cmp	r0, #0
 801338c:	f77f aeb3 	ble.w	80130f6 <_dtoa_r+0x68e>
 8013390:	4656      	mov	r6, sl
 8013392:	2331      	movs	r3, #49	@ 0x31
 8013394:	f806 3b01 	strb.w	r3, [r6], #1
 8013398:	9b04      	ldr	r3, [sp, #16]
 801339a:	3301      	adds	r3, #1
 801339c:	9304      	str	r3, [sp, #16]
 801339e:	e6ae      	b.n	80130fe <_dtoa_r+0x696>
 80133a0:	9c07      	ldr	r4, [sp, #28]
 80133a2:	9704      	str	r7, [sp, #16]
 80133a4:	4625      	mov	r5, r4
 80133a6:	e7f3      	b.n	8013390 <_dtoa_r+0x928>
 80133a8:	9b07      	ldr	r3, [sp, #28]
 80133aa:	9300      	str	r3, [sp, #0]
 80133ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	f000 8104 	beq.w	80135bc <_dtoa_r+0xb54>
 80133b4:	2e00      	cmp	r6, #0
 80133b6:	dd05      	ble.n	80133c4 <_dtoa_r+0x95c>
 80133b8:	4629      	mov	r1, r5
 80133ba:	4632      	mov	r2, r6
 80133bc:	4658      	mov	r0, fp
 80133be:	f000 fb6f 	bl	8013aa0 <__lshift>
 80133c2:	4605      	mov	r5, r0
 80133c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d05a      	beq.n	8013480 <_dtoa_r+0xa18>
 80133ca:	6869      	ldr	r1, [r5, #4]
 80133cc:	4658      	mov	r0, fp
 80133ce:	f000 f959 	bl	8013684 <_Balloc>
 80133d2:	4606      	mov	r6, r0
 80133d4:	b928      	cbnz	r0, 80133e2 <_dtoa_r+0x97a>
 80133d6:	4b84      	ldr	r3, [pc, #528]	@ (80135e8 <_dtoa_r+0xb80>)
 80133d8:	4602      	mov	r2, r0
 80133da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80133de:	f7ff bb5a 	b.w	8012a96 <_dtoa_r+0x2e>
 80133e2:	692a      	ldr	r2, [r5, #16]
 80133e4:	3202      	adds	r2, #2
 80133e6:	0092      	lsls	r2, r2, #2
 80133e8:	f105 010c 	add.w	r1, r5, #12
 80133ec:	300c      	adds	r0, #12
 80133ee:	f000 fee9 	bl	80141c4 <memcpy>
 80133f2:	2201      	movs	r2, #1
 80133f4:	4631      	mov	r1, r6
 80133f6:	4658      	mov	r0, fp
 80133f8:	f000 fb52 	bl	8013aa0 <__lshift>
 80133fc:	f10a 0301 	add.w	r3, sl, #1
 8013400:	9307      	str	r3, [sp, #28]
 8013402:	9b00      	ldr	r3, [sp, #0]
 8013404:	4453      	add	r3, sl
 8013406:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013408:	9b02      	ldr	r3, [sp, #8]
 801340a:	f003 0301 	and.w	r3, r3, #1
 801340e:	462f      	mov	r7, r5
 8013410:	930a      	str	r3, [sp, #40]	@ 0x28
 8013412:	4605      	mov	r5, r0
 8013414:	9b07      	ldr	r3, [sp, #28]
 8013416:	4621      	mov	r1, r4
 8013418:	3b01      	subs	r3, #1
 801341a:	4648      	mov	r0, r9
 801341c:	9300      	str	r3, [sp, #0]
 801341e:	f7ff fa9a 	bl	8012956 <quorem>
 8013422:	4639      	mov	r1, r7
 8013424:	9002      	str	r0, [sp, #8]
 8013426:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801342a:	4648      	mov	r0, r9
 801342c:	f000 fba4 	bl	8013b78 <__mcmp>
 8013430:	462a      	mov	r2, r5
 8013432:	9008      	str	r0, [sp, #32]
 8013434:	4621      	mov	r1, r4
 8013436:	4658      	mov	r0, fp
 8013438:	f000 fbba 	bl	8013bb0 <__mdiff>
 801343c:	68c2      	ldr	r2, [r0, #12]
 801343e:	4606      	mov	r6, r0
 8013440:	bb02      	cbnz	r2, 8013484 <_dtoa_r+0xa1c>
 8013442:	4601      	mov	r1, r0
 8013444:	4648      	mov	r0, r9
 8013446:	f000 fb97 	bl	8013b78 <__mcmp>
 801344a:	4602      	mov	r2, r0
 801344c:	4631      	mov	r1, r6
 801344e:	4658      	mov	r0, fp
 8013450:	920e      	str	r2, [sp, #56]	@ 0x38
 8013452:	f000 f957 	bl	8013704 <_Bfree>
 8013456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013458:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801345a:	9e07      	ldr	r6, [sp, #28]
 801345c:	ea43 0102 	orr.w	r1, r3, r2
 8013460:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013462:	4319      	orrs	r1, r3
 8013464:	d110      	bne.n	8013488 <_dtoa_r+0xa20>
 8013466:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801346a:	d029      	beq.n	80134c0 <_dtoa_r+0xa58>
 801346c:	9b08      	ldr	r3, [sp, #32]
 801346e:	2b00      	cmp	r3, #0
 8013470:	dd02      	ble.n	8013478 <_dtoa_r+0xa10>
 8013472:	9b02      	ldr	r3, [sp, #8]
 8013474:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8013478:	9b00      	ldr	r3, [sp, #0]
 801347a:	f883 8000 	strb.w	r8, [r3]
 801347e:	e63f      	b.n	8013100 <_dtoa_r+0x698>
 8013480:	4628      	mov	r0, r5
 8013482:	e7bb      	b.n	80133fc <_dtoa_r+0x994>
 8013484:	2201      	movs	r2, #1
 8013486:	e7e1      	b.n	801344c <_dtoa_r+0x9e4>
 8013488:	9b08      	ldr	r3, [sp, #32]
 801348a:	2b00      	cmp	r3, #0
 801348c:	db04      	blt.n	8013498 <_dtoa_r+0xa30>
 801348e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013490:	430b      	orrs	r3, r1
 8013492:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013494:	430b      	orrs	r3, r1
 8013496:	d120      	bne.n	80134da <_dtoa_r+0xa72>
 8013498:	2a00      	cmp	r2, #0
 801349a:	dded      	ble.n	8013478 <_dtoa_r+0xa10>
 801349c:	4649      	mov	r1, r9
 801349e:	2201      	movs	r2, #1
 80134a0:	4658      	mov	r0, fp
 80134a2:	f000 fafd 	bl	8013aa0 <__lshift>
 80134a6:	4621      	mov	r1, r4
 80134a8:	4681      	mov	r9, r0
 80134aa:	f000 fb65 	bl	8013b78 <__mcmp>
 80134ae:	2800      	cmp	r0, #0
 80134b0:	dc03      	bgt.n	80134ba <_dtoa_r+0xa52>
 80134b2:	d1e1      	bne.n	8013478 <_dtoa_r+0xa10>
 80134b4:	f018 0f01 	tst.w	r8, #1
 80134b8:	d0de      	beq.n	8013478 <_dtoa_r+0xa10>
 80134ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80134be:	d1d8      	bne.n	8013472 <_dtoa_r+0xa0a>
 80134c0:	9a00      	ldr	r2, [sp, #0]
 80134c2:	2339      	movs	r3, #57	@ 0x39
 80134c4:	7013      	strb	r3, [r2, #0]
 80134c6:	4633      	mov	r3, r6
 80134c8:	461e      	mov	r6, r3
 80134ca:	3b01      	subs	r3, #1
 80134cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80134d0:	2a39      	cmp	r2, #57	@ 0x39
 80134d2:	d052      	beq.n	801357a <_dtoa_r+0xb12>
 80134d4:	3201      	adds	r2, #1
 80134d6:	701a      	strb	r2, [r3, #0]
 80134d8:	e612      	b.n	8013100 <_dtoa_r+0x698>
 80134da:	2a00      	cmp	r2, #0
 80134dc:	dd07      	ble.n	80134ee <_dtoa_r+0xa86>
 80134de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80134e2:	d0ed      	beq.n	80134c0 <_dtoa_r+0xa58>
 80134e4:	9a00      	ldr	r2, [sp, #0]
 80134e6:	f108 0301 	add.w	r3, r8, #1
 80134ea:	7013      	strb	r3, [r2, #0]
 80134ec:	e608      	b.n	8013100 <_dtoa_r+0x698>
 80134ee:	9b07      	ldr	r3, [sp, #28]
 80134f0:	9a07      	ldr	r2, [sp, #28]
 80134f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80134f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80134f8:	4293      	cmp	r3, r2
 80134fa:	d028      	beq.n	801354e <_dtoa_r+0xae6>
 80134fc:	4649      	mov	r1, r9
 80134fe:	2300      	movs	r3, #0
 8013500:	220a      	movs	r2, #10
 8013502:	4658      	mov	r0, fp
 8013504:	f000 f920 	bl	8013748 <__multadd>
 8013508:	42af      	cmp	r7, r5
 801350a:	4681      	mov	r9, r0
 801350c:	f04f 0300 	mov.w	r3, #0
 8013510:	f04f 020a 	mov.w	r2, #10
 8013514:	4639      	mov	r1, r7
 8013516:	4658      	mov	r0, fp
 8013518:	d107      	bne.n	801352a <_dtoa_r+0xac2>
 801351a:	f000 f915 	bl	8013748 <__multadd>
 801351e:	4607      	mov	r7, r0
 8013520:	4605      	mov	r5, r0
 8013522:	9b07      	ldr	r3, [sp, #28]
 8013524:	3301      	adds	r3, #1
 8013526:	9307      	str	r3, [sp, #28]
 8013528:	e774      	b.n	8013414 <_dtoa_r+0x9ac>
 801352a:	f000 f90d 	bl	8013748 <__multadd>
 801352e:	4629      	mov	r1, r5
 8013530:	4607      	mov	r7, r0
 8013532:	2300      	movs	r3, #0
 8013534:	220a      	movs	r2, #10
 8013536:	4658      	mov	r0, fp
 8013538:	f000 f906 	bl	8013748 <__multadd>
 801353c:	4605      	mov	r5, r0
 801353e:	e7f0      	b.n	8013522 <_dtoa_r+0xaba>
 8013540:	9b00      	ldr	r3, [sp, #0]
 8013542:	2b00      	cmp	r3, #0
 8013544:	bfcc      	ite	gt
 8013546:	461e      	movgt	r6, r3
 8013548:	2601      	movle	r6, #1
 801354a:	4456      	add	r6, sl
 801354c:	2700      	movs	r7, #0
 801354e:	4649      	mov	r1, r9
 8013550:	2201      	movs	r2, #1
 8013552:	4658      	mov	r0, fp
 8013554:	f000 faa4 	bl	8013aa0 <__lshift>
 8013558:	4621      	mov	r1, r4
 801355a:	4681      	mov	r9, r0
 801355c:	f000 fb0c 	bl	8013b78 <__mcmp>
 8013560:	2800      	cmp	r0, #0
 8013562:	dcb0      	bgt.n	80134c6 <_dtoa_r+0xa5e>
 8013564:	d102      	bne.n	801356c <_dtoa_r+0xb04>
 8013566:	f018 0f01 	tst.w	r8, #1
 801356a:	d1ac      	bne.n	80134c6 <_dtoa_r+0xa5e>
 801356c:	4633      	mov	r3, r6
 801356e:	461e      	mov	r6, r3
 8013570:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013574:	2a30      	cmp	r2, #48	@ 0x30
 8013576:	d0fa      	beq.n	801356e <_dtoa_r+0xb06>
 8013578:	e5c2      	b.n	8013100 <_dtoa_r+0x698>
 801357a:	459a      	cmp	sl, r3
 801357c:	d1a4      	bne.n	80134c8 <_dtoa_r+0xa60>
 801357e:	9b04      	ldr	r3, [sp, #16]
 8013580:	3301      	adds	r3, #1
 8013582:	9304      	str	r3, [sp, #16]
 8013584:	2331      	movs	r3, #49	@ 0x31
 8013586:	f88a 3000 	strb.w	r3, [sl]
 801358a:	e5b9      	b.n	8013100 <_dtoa_r+0x698>
 801358c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801358e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80135ec <_dtoa_r+0xb84>
 8013592:	b11b      	cbz	r3, 801359c <_dtoa_r+0xb34>
 8013594:	f10a 0308 	add.w	r3, sl, #8
 8013598:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801359a:	6013      	str	r3, [r2, #0]
 801359c:	4650      	mov	r0, sl
 801359e:	b019      	add	sp, #100	@ 0x64
 80135a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80135a6:	2b01      	cmp	r3, #1
 80135a8:	f77f ae37 	ble.w	801321a <_dtoa_r+0x7b2>
 80135ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80135ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80135b0:	2001      	movs	r0, #1
 80135b2:	e655      	b.n	8013260 <_dtoa_r+0x7f8>
 80135b4:	9b00      	ldr	r3, [sp, #0]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	f77f aed6 	ble.w	8013368 <_dtoa_r+0x900>
 80135bc:	4656      	mov	r6, sl
 80135be:	4621      	mov	r1, r4
 80135c0:	4648      	mov	r0, r9
 80135c2:	f7ff f9c8 	bl	8012956 <quorem>
 80135c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80135ca:	f806 8b01 	strb.w	r8, [r6], #1
 80135ce:	9b00      	ldr	r3, [sp, #0]
 80135d0:	eba6 020a 	sub.w	r2, r6, sl
 80135d4:	4293      	cmp	r3, r2
 80135d6:	ddb3      	ble.n	8013540 <_dtoa_r+0xad8>
 80135d8:	4649      	mov	r1, r9
 80135da:	2300      	movs	r3, #0
 80135dc:	220a      	movs	r2, #10
 80135de:	4658      	mov	r0, fp
 80135e0:	f000 f8b2 	bl	8013748 <__multadd>
 80135e4:	4681      	mov	r9, r0
 80135e6:	e7ea      	b.n	80135be <_dtoa_r+0xb56>
 80135e8:	08016310 	.word	0x08016310
 80135ec:	08016294 	.word	0x08016294

080135f0 <_free_r>:
 80135f0:	b538      	push	{r3, r4, r5, lr}
 80135f2:	4605      	mov	r5, r0
 80135f4:	2900      	cmp	r1, #0
 80135f6:	d041      	beq.n	801367c <_free_r+0x8c>
 80135f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80135fc:	1f0c      	subs	r4, r1, #4
 80135fe:	2b00      	cmp	r3, #0
 8013600:	bfb8      	it	lt
 8013602:	18e4      	addlt	r4, r4, r3
 8013604:	f7fe fb42 	bl	8011c8c <__malloc_lock>
 8013608:	4a1d      	ldr	r2, [pc, #116]	@ (8013680 <_free_r+0x90>)
 801360a:	6813      	ldr	r3, [r2, #0]
 801360c:	b933      	cbnz	r3, 801361c <_free_r+0x2c>
 801360e:	6063      	str	r3, [r4, #4]
 8013610:	6014      	str	r4, [r2, #0]
 8013612:	4628      	mov	r0, r5
 8013614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013618:	f7fe bb3e 	b.w	8011c98 <__malloc_unlock>
 801361c:	42a3      	cmp	r3, r4
 801361e:	d908      	bls.n	8013632 <_free_r+0x42>
 8013620:	6820      	ldr	r0, [r4, #0]
 8013622:	1821      	adds	r1, r4, r0
 8013624:	428b      	cmp	r3, r1
 8013626:	bf01      	itttt	eq
 8013628:	6819      	ldreq	r1, [r3, #0]
 801362a:	685b      	ldreq	r3, [r3, #4]
 801362c:	1809      	addeq	r1, r1, r0
 801362e:	6021      	streq	r1, [r4, #0]
 8013630:	e7ed      	b.n	801360e <_free_r+0x1e>
 8013632:	461a      	mov	r2, r3
 8013634:	685b      	ldr	r3, [r3, #4]
 8013636:	b10b      	cbz	r3, 801363c <_free_r+0x4c>
 8013638:	42a3      	cmp	r3, r4
 801363a:	d9fa      	bls.n	8013632 <_free_r+0x42>
 801363c:	6811      	ldr	r1, [r2, #0]
 801363e:	1850      	adds	r0, r2, r1
 8013640:	42a0      	cmp	r0, r4
 8013642:	d10b      	bne.n	801365c <_free_r+0x6c>
 8013644:	6820      	ldr	r0, [r4, #0]
 8013646:	4401      	add	r1, r0
 8013648:	1850      	adds	r0, r2, r1
 801364a:	4283      	cmp	r3, r0
 801364c:	6011      	str	r1, [r2, #0]
 801364e:	d1e0      	bne.n	8013612 <_free_r+0x22>
 8013650:	6818      	ldr	r0, [r3, #0]
 8013652:	685b      	ldr	r3, [r3, #4]
 8013654:	6053      	str	r3, [r2, #4]
 8013656:	4408      	add	r0, r1
 8013658:	6010      	str	r0, [r2, #0]
 801365a:	e7da      	b.n	8013612 <_free_r+0x22>
 801365c:	d902      	bls.n	8013664 <_free_r+0x74>
 801365e:	230c      	movs	r3, #12
 8013660:	602b      	str	r3, [r5, #0]
 8013662:	e7d6      	b.n	8013612 <_free_r+0x22>
 8013664:	6820      	ldr	r0, [r4, #0]
 8013666:	1821      	adds	r1, r4, r0
 8013668:	428b      	cmp	r3, r1
 801366a:	bf04      	itt	eq
 801366c:	6819      	ldreq	r1, [r3, #0]
 801366e:	685b      	ldreq	r3, [r3, #4]
 8013670:	6063      	str	r3, [r4, #4]
 8013672:	bf04      	itt	eq
 8013674:	1809      	addeq	r1, r1, r0
 8013676:	6021      	streq	r1, [r4, #0]
 8013678:	6054      	str	r4, [r2, #4]
 801367a:	e7ca      	b.n	8013612 <_free_r+0x22>
 801367c:	bd38      	pop	{r3, r4, r5, pc}
 801367e:	bf00      	nop
 8013680:	200005d0 	.word	0x200005d0

08013684 <_Balloc>:
 8013684:	b570      	push	{r4, r5, r6, lr}
 8013686:	69c6      	ldr	r6, [r0, #28]
 8013688:	4604      	mov	r4, r0
 801368a:	460d      	mov	r5, r1
 801368c:	b976      	cbnz	r6, 80136ac <_Balloc+0x28>
 801368e:	2010      	movs	r0, #16
 8013690:	f7fe fa4a 	bl	8011b28 <malloc>
 8013694:	4602      	mov	r2, r0
 8013696:	61e0      	str	r0, [r4, #28]
 8013698:	b920      	cbnz	r0, 80136a4 <_Balloc+0x20>
 801369a:	4b18      	ldr	r3, [pc, #96]	@ (80136fc <_Balloc+0x78>)
 801369c:	4818      	ldr	r0, [pc, #96]	@ (8013700 <_Balloc+0x7c>)
 801369e:	216b      	movs	r1, #107	@ 0x6b
 80136a0:	f000 fd9e 	bl	80141e0 <__assert_func>
 80136a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80136a8:	6006      	str	r6, [r0, #0]
 80136aa:	60c6      	str	r6, [r0, #12]
 80136ac:	69e6      	ldr	r6, [r4, #28]
 80136ae:	68f3      	ldr	r3, [r6, #12]
 80136b0:	b183      	cbz	r3, 80136d4 <_Balloc+0x50>
 80136b2:	69e3      	ldr	r3, [r4, #28]
 80136b4:	68db      	ldr	r3, [r3, #12]
 80136b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80136ba:	b9b8      	cbnz	r0, 80136ec <_Balloc+0x68>
 80136bc:	2101      	movs	r1, #1
 80136be:	fa01 f605 	lsl.w	r6, r1, r5
 80136c2:	1d72      	adds	r2, r6, #5
 80136c4:	0092      	lsls	r2, r2, #2
 80136c6:	4620      	mov	r0, r4
 80136c8:	f000 fda8 	bl	801421c <_calloc_r>
 80136cc:	b160      	cbz	r0, 80136e8 <_Balloc+0x64>
 80136ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80136d2:	e00e      	b.n	80136f2 <_Balloc+0x6e>
 80136d4:	2221      	movs	r2, #33	@ 0x21
 80136d6:	2104      	movs	r1, #4
 80136d8:	4620      	mov	r0, r4
 80136da:	f000 fd9f 	bl	801421c <_calloc_r>
 80136de:	69e3      	ldr	r3, [r4, #28]
 80136e0:	60f0      	str	r0, [r6, #12]
 80136e2:	68db      	ldr	r3, [r3, #12]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d1e4      	bne.n	80136b2 <_Balloc+0x2e>
 80136e8:	2000      	movs	r0, #0
 80136ea:	bd70      	pop	{r4, r5, r6, pc}
 80136ec:	6802      	ldr	r2, [r0, #0]
 80136ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80136f2:	2300      	movs	r3, #0
 80136f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80136f8:	e7f7      	b.n	80136ea <_Balloc+0x66>
 80136fa:	bf00      	nop
 80136fc:	080162a1 	.word	0x080162a1
 8013700:	08016321 	.word	0x08016321

08013704 <_Bfree>:
 8013704:	b570      	push	{r4, r5, r6, lr}
 8013706:	69c6      	ldr	r6, [r0, #28]
 8013708:	4605      	mov	r5, r0
 801370a:	460c      	mov	r4, r1
 801370c:	b976      	cbnz	r6, 801372c <_Bfree+0x28>
 801370e:	2010      	movs	r0, #16
 8013710:	f7fe fa0a 	bl	8011b28 <malloc>
 8013714:	4602      	mov	r2, r0
 8013716:	61e8      	str	r0, [r5, #28]
 8013718:	b920      	cbnz	r0, 8013724 <_Bfree+0x20>
 801371a:	4b09      	ldr	r3, [pc, #36]	@ (8013740 <_Bfree+0x3c>)
 801371c:	4809      	ldr	r0, [pc, #36]	@ (8013744 <_Bfree+0x40>)
 801371e:	218f      	movs	r1, #143	@ 0x8f
 8013720:	f000 fd5e 	bl	80141e0 <__assert_func>
 8013724:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013728:	6006      	str	r6, [r0, #0]
 801372a:	60c6      	str	r6, [r0, #12]
 801372c:	b13c      	cbz	r4, 801373e <_Bfree+0x3a>
 801372e:	69eb      	ldr	r3, [r5, #28]
 8013730:	6862      	ldr	r2, [r4, #4]
 8013732:	68db      	ldr	r3, [r3, #12]
 8013734:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013738:	6021      	str	r1, [r4, #0]
 801373a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801373e:	bd70      	pop	{r4, r5, r6, pc}
 8013740:	080162a1 	.word	0x080162a1
 8013744:	08016321 	.word	0x08016321

08013748 <__multadd>:
 8013748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801374c:	690d      	ldr	r5, [r1, #16]
 801374e:	4607      	mov	r7, r0
 8013750:	460c      	mov	r4, r1
 8013752:	461e      	mov	r6, r3
 8013754:	f101 0c14 	add.w	ip, r1, #20
 8013758:	2000      	movs	r0, #0
 801375a:	f8dc 3000 	ldr.w	r3, [ip]
 801375e:	b299      	uxth	r1, r3
 8013760:	fb02 6101 	mla	r1, r2, r1, r6
 8013764:	0c1e      	lsrs	r6, r3, #16
 8013766:	0c0b      	lsrs	r3, r1, #16
 8013768:	fb02 3306 	mla	r3, r2, r6, r3
 801376c:	b289      	uxth	r1, r1
 801376e:	3001      	adds	r0, #1
 8013770:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013774:	4285      	cmp	r5, r0
 8013776:	f84c 1b04 	str.w	r1, [ip], #4
 801377a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801377e:	dcec      	bgt.n	801375a <__multadd+0x12>
 8013780:	b30e      	cbz	r6, 80137c6 <__multadd+0x7e>
 8013782:	68a3      	ldr	r3, [r4, #8]
 8013784:	42ab      	cmp	r3, r5
 8013786:	dc19      	bgt.n	80137bc <__multadd+0x74>
 8013788:	6861      	ldr	r1, [r4, #4]
 801378a:	4638      	mov	r0, r7
 801378c:	3101      	adds	r1, #1
 801378e:	f7ff ff79 	bl	8013684 <_Balloc>
 8013792:	4680      	mov	r8, r0
 8013794:	b928      	cbnz	r0, 80137a2 <__multadd+0x5a>
 8013796:	4602      	mov	r2, r0
 8013798:	4b0c      	ldr	r3, [pc, #48]	@ (80137cc <__multadd+0x84>)
 801379a:	480d      	ldr	r0, [pc, #52]	@ (80137d0 <__multadd+0x88>)
 801379c:	21ba      	movs	r1, #186	@ 0xba
 801379e:	f000 fd1f 	bl	80141e0 <__assert_func>
 80137a2:	6922      	ldr	r2, [r4, #16]
 80137a4:	3202      	adds	r2, #2
 80137a6:	f104 010c 	add.w	r1, r4, #12
 80137aa:	0092      	lsls	r2, r2, #2
 80137ac:	300c      	adds	r0, #12
 80137ae:	f000 fd09 	bl	80141c4 <memcpy>
 80137b2:	4621      	mov	r1, r4
 80137b4:	4638      	mov	r0, r7
 80137b6:	f7ff ffa5 	bl	8013704 <_Bfree>
 80137ba:	4644      	mov	r4, r8
 80137bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80137c0:	3501      	adds	r5, #1
 80137c2:	615e      	str	r6, [r3, #20]
 80137c4:	6125      	str	r5, [r4, #16]
 80137c6:	4620      	mov	r0, r4
 80137c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137cc:	08016310 	.word	0x08016310
 80137d0:	08016321 	.word	0x08016321

080137d4 <__hi0bits>:
 80137d4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80137d8:	4603      	mov	r3, r0
 80137da:	bf36      	itet	cc
 80137dc:	0403      	lslcc	r3, r0, #16
 80137de:	2000      	movcs	r0, #0
 80137e0:	2010      	movcc	r0, #16
 80137e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80137e6:	bf3c      	itt	cc
 80137e8:	021b      	lslcc	r3, r3, #8
 80137ea:	3008      	addcc	r0, #8
 80137ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80137f0:	bf3c      	itt	cc
 80137f2:	011b      	lslcc	r3, r3, #4
 80137f4:	3004      	addcc	r0, #4
 80137f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80137fa:	bf3c      	itt	cc
 80137fc:	009b      	lslcc	r3, r3, #2
 80137fe:	3002      	addcc	r0, #2
 8013800:	2b00      	cmp	r3, #0
 8013802:	db05      	blt.n	8013810 <__hi0bits+0x3c>
 8013804:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013808:	f100 0001 	add.w	r0, r0, #1
 801380c:	bf08      	it	eq
 801380e:	2020      	moveq	r0, #32
 8013810:	4770      	bx	lr

08013812 <__lo0bits>:
 8013812:	6803      	ldr	r3, [r0, #0]
 8013814:	4602      	mov	r2, r0
 8013816:	f013 0007 	ands.w	r0, r3, #7
 801381a:	d00b      	beq.n	8013834 <__lo0bits+0x22>
 801381c:	07d9      	lsls	r1, r3, #31
 801381e:	d421      	bmi.n	8013864 <__lo0bits+0x52>
 8013820:	0798      	lsls	r0, r3, #30
 8013822:	bf49      	itett	mi
 8013824:	085b      	lsrmi	r3, r3, #1
 8013826:	089b      	lsrpl	r3, r3, #2
 8013828:	2001      	movmi	r0, #1
 801382a:	6013      	strmi	r3, [r2, #0]
 801382c:	bf5c      	itt	pl
 801382e:	6013      	strpl	r3, [r2, #0]
 8013830:	2002      	movpl	r0, #2
 8013832:	4770      	bx	lr
 8013834:	b299      	uxth	r1, r3
 8013836:	b909      	cbnz	r1, 801383c <__lo0bits+0x2a>
 8013838:	0c1b      	lsrs	r3, r3, #16
 801383a:	2010      	movs	r0, #16
 801383c:	b2d9      	uxtb	r1, r3
 801383e:	b909      	cbnz	r1, 8013844 <__lo0bits+0x32>
 8013840:	3008      	adds	r0, #8
 8013842:	0a1b      	lsrs	r3, r3, #8
 8013844:	0719      	lsls	r1, r3, #28
 8013846:	bf04      	itt	eq
 8013848:	091b      	lsreq	r3, r3, #4
 801384a:	3004      	addeq	r0, #4
 801384c:	0799      	lsls	r1, r3, #30
 801384e:	bf04      	itt	eq
 8013850:	089b      	lsreq	r3, r3, #2
 8013852:	3002      	addeq	r0, #2
 8013854:	07d9      	lsls	r1, r3, #31
 8013856:	d403      	bmi.n	8013860 <__lo0bits+0x4e>
 8013858:	085b      	lsrs	r3, r3, #1
 801385a:	f100 0001 	add.w	r0, r0, #1
 801385e:	d003      	beq.n	8013868 <__lo0bits+0x56>
 8013860:	6013      	str	r3, [r2, #0]
 8013862:	4770      	bx	lr
 8013864:	2000      	movs	r0, #0
 8013866:	4770      	bx	lr
 8013868:	2020      	movs	r0, #32
 801386a:	4770      	bx	lr

0801386c <__i2b>:
 801386c:	b510      	push	{r4, lr}
 801386e:	460c      	mov	r4, r1
 8013870:	2101      	movs	r1, #1
 8013872:	f7ff ff07 	bl	8013684 <_Balloc>
 8013876:	4602      	mov	r2, r0
 8013878:	b928      	cbnz	r0, 8013886 <__i2b+0x1a>
 801387a:	4b05      	ldr	r3, [pc, #20]	@ (8013890 <__i2b+0x24>)
 801387c:	4805      	ldr	r0, [pc, #20]	@ (8013894 <__i2b+0x28>)
 801387e:	f240 1145 	movw	r1, #325	@ 0x145
 8013882:	f000 fcad 	bl	80141e0 <__assert_func>
 8013886:	2301      	movs	r3, #1
 8013888:	6144      	str	r4, [r0, #20]
 801388a:	6103      	str	r3, [r0, #16]
 801388c:	bd10      	pop	{r4, pc}
 801388e:	bf00      	nop
 8013890:	08016310 	.word	0x08016310
 8013894:	08016321 	.word	0x08016321

08013898 <__multiply>:
 8013898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801389c:	4614      	mov	r4, r2
 801389e:	690a      	ldr	r2, [r1, #16]
 80138a0:	6923      	ldr	r3, [r4, #16]
 80138a2:	429a      	cmp	r2, r3
 80138a4:	bfa8      	it	ge
 80138a6:	4623      	movge	r3, r4
 80138a8:	460f      	mov	r7, r1
 80138aa:	bfa4      	itt	ge
 80138ac:	460c      	movge	r4, r1
 80138ae:	461f      	movge	r7, r3
 80138b0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80138b4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80138b8:	68a3      	ldr	r3, [r4, #8]
 80138ba:	6861      	ldr	r1, [r4, #4]
 80138bc:	eb0a 0609 	add.w	r6, sl, r9
 80138c0:	42b3      	cmp	r3, r6
 80138c2:	b085      	sub	sp, #20
 80138c4:	bfb8      	it	lt
 80138c6:	3101      	addlt	r1, #1
 80138c8:	f7ff fedc 	bl	8013684 <_Balloc>
 80138cc:	b930      	cbnz	r0, 80138dc <__multiply+0x44>
 80138ce:	4602      	mov	r2, r0
 80138d0:	4b44      	ldr	r3, [pc, #272]	@ (80139e4 <__multiply+0x14c>)
 80138d2:	4845      	ldr	r0, [pc, #276]	@ (80139e8 <__multiply+0x150>)
 80138d4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80138d8:	f000 fc82 	bl	80141e0 <__assert_func>
 80138dc:	f100 0514 	add.w	r5, r0, #20
 80138e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80138e4:	462b      	mov	r3, r5
 80138e6:	2200      	movs	r2, #0
 80138e8:	4543      	cmp	r3, r8
 80138ea:	d321      	bcc.n	8013930 <__multiply+0x98>
 80138ec:	f107 0114 	add.w	r1, r7, #20
 80138f0:	f104 0214 	add.w	r2, r4, #20
 80138f4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80138f8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80138fc:	9302      	str	r3, [sp, #8]
 80138fe:	1b13      	subs	r3, r2, r4
 8013900:	3b15      	subs	r3, #21
 8013902:	f023 0303 	bic.w	r3, r3, #3
 8013906:	3304      	adds	r3, #4
 8013908:	f104 0715 	add.w	r7, r4, #21
 801390c:	42ba      	cmp	r2, r7
 801390e:	bf38      	it	cc
 8013910:	2304      	movcc	r3, #4
 8013912:	9301      	str	r3, [sp, #4]
 8013914:	9b02      	ldr	r3, [sp, #8]
 8013916:	9103      	str	r1, [sp, #12]
 8013918:	428b      	cmp	r3, r1
 801391a:	d80c      	bhi.n	8013936 <__multiply+0x9e>
 801391c:	2e00      	cmp	r6, #0
 801391e:	dd03      	ble.n	8013928 <__multiply+0x90>
 8013920:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013924:	2b00      	cmp	r3, #0
 8013926:	d05b      	beq.n	80139e0 <__multiply+0x148>
 8013928:	6106      	str	r6, [r0, #16]
 801392a:	b005      	add	sp, #20
 801392c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013930:	f843 2b04 	str.w	r2, [r3], #4
 8013934:	e7d8      	b.n	80138e8 <__multiply+0x50>
 8013936:	f8b1 a000 	ldrh.w	sl, [r1]
 801393a:	f1ba 0f00 	cmp.w	sl, #0
 801393e:	d024      	beq.n	801398a <__multiply+0xf2>
 8013940:	f104 0e14 	add.w	lr, r4, #20
 8013944:	46a9      	mov	r9, r5
 8013946:	f04f 0c00 	mov.w	ip, #0
 801394a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801394e:	f8d9 3000 	ldr.w	r3, [r9]
 8013952:	fa1f fb87 	uxth.w	fp, r7
 8013956:	b29b      	uxth	r3, r3
 8013958:	fb0a 330b 	mla	r3, sl, fp, r3
 801395c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013960:	f8d9 7000 	ldr.w	r7, [r9]
 8013964:	4463      	add	r3, ip
 8013966:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801396a:	fb0a c70b 	mla	r7, sl, fp, ip
 801396e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013972:	b29b      	uxth	r3, r3
 8013974:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013978:	4572      	cmp	r2, lr
 801397a:	f849 3b04 	str.w	r3, [r9], #4
 801397e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013982:	d8e2      	bhi.n	801394a <__multiply+0xb2>
 8013984:	9b01      	ldr	r3, [sp, #4]
 8013986:	f845 c003 	str.w	ip, [r5, r3]
 801398a:	9b03      	ldr	r3, [sp, #12]
 801398c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013990:	3104      	adds	r1, #4
 8013992:	f1b9 0f00 	cmp.w	r9, #0
 8013996:	d021      	beq.n	80139dc <__multiply+0x144>
 8013998:	682b      	ldr	r3, [r5, #0]
 801399a:	f104 0c14 	add.w	ip, r4, #20
 801399e:	46ae      	mov	lr, r5
 80139a0:	f04f 0a00 	mov.w	sl, #0
 80139a4:	f8bc b000 	ldrh.w	fp, [ip]
 80139a8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80139ac:	fb09 770b 	mla	r7, r9, fp, r7
 80139b0:	4457      	add	r7, sl
 80139b2:	b29b      	uxth	r3, r3
 80139b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80139b8:	f84e 3b04 	str.w	r3, [lr], #4
 80139bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80139c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80139c4:	f8be 3000 	ldrh.w	r3, [lr]
 80139c8:	fb09 330a 	mla	r3, r9, sl, r3
 80139cc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80139d0:	4562      	cmp	r2, ip
 80139d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80139d6:	d8e5      	bhi.n	80139a4 <__multiply+0x10c>
 80139d8:	9f01      	ldr	r7, [sp, #4]
 80139da:	51eb      	str	r3, [r5, r7]
 80139dc:	3504      	adds	r5, #4
 80139de:	e799      	b.n	8013914 <__multiply+0x7c>
 80139e0:	3e01      	subs	r6, #1
 80139e2:	e79b      	b.n	801391c <__multiply+0x84>
 80139e4:	08016310 	.word	0x08016310
 80139e8:	08016321 	.word	0x08016321

080139ec <__pow5mult>:
 80139ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80139f0:	4615      	mov	r5, r2
 80139f2:	f012 0203 	ands.w	r2, r2, #3
 80139f6:	4607      	mov	r7, r0
 80139f8:	460e      	mov	r6, r1
 80139fa:	d007      	beq.n	8013a0c <__pow5mult+0x20>
 80139fc:	4c25      	ldr	r4, [pc, #148]	@ (8013a94 <__pow5mult+0xa8>)
 80139fe:	3a01      	subs	r2, #1
 8013a00:	2300      	movs	r3, #0
 8013a02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013a06:	f7ff fe9f 	bl	8013748 <__multadd>
 8013a0a:	4606      	mov	r6, r0
 8013a0c:	10ad      	asrs	r5, r5, #2
 8013a0e:	d03d      	beq.n	8013a8c <__pow5mult+0xa0>
 8013a10:	69fc      	ldr	r4, [r7, #28]
 8013a12:	b97c      	cbnz	r4, 8013a34 <__pow5mult+0x48>
 8013a14:	2010      	movs	r0, #16
 8013a16:	f7fe f887 	bl	8011b28 <malloc>
 8013a1a:	4602      	mov	r2, r0
 8013a1c:	61f8      	str	r0, [r7, #28]
 8013a1e:	b928      	cbnz	r0, 8013a2c <__pow5mult+0x40>
 8013a20:	4b1d      	ldr	r3, [pc, #116]	@ (8013a98 <__pow5mult+0xac>)
 8013a22:	481e      	ldr	r0, [pc, #120]	@ (8013a9c <__pow5mult+0xb0>)
 8013a24:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013a28:	f000 fbda 	bl	80141e0 <__assert_func>
 8013a2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013a30:	6004      	str	r4, [r0, #0]
 8013a32:	60c4      	str	r4, [r0, #12]
 8013a34:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013a38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013a3c:	b94c      	cbnz	r4, 8013a52 <__pow5mult+0x66>
 8013a3e:	f240 2171 	movw	r1, #625	@ 0x271
 8013a42:	4638      	mov	r0, r7
 8013a44:	f7ff ff12 	bl	801386c <__i2b>
 8013a48:	2300      	movs	r3, #0
 8013a4a:	f8c8 0008 	str.w	r0, [r8, #8]
 8013a4e:	4604      	mov	r4, r0
 8013a50:	6003      	str	r3, [r0, #0]
 8013a52:	f04f 0900 	mov.w	r9, #0
 8013a56:	07eb      	lsls	r3, r5, #31
 8013a58:	d50a      	bpl.n	8013a70 <__pow5mult+0x84>
 8013a5a:	4631      	mov	r1, r6
 8013a5c:	4622      	mov	r2, r4
 8013a5e:	4638      	mov	r0, r7
 8013a60:	f7ff ff1a 	bl	8013898 <__multiply>
 8013a64:	4631      	mov	r1, r6
 8013a66:	4680      	mov	r8, r0
 8013a68:	4638      	mov	r0, r7
 8013a6a:	f7ff fe4b 	bl	8013704 <_Bfree>
 8013a6e:	4646      	mov	r6, r8
 8013a70:	106d      	asrs	r5, r5, #1
 8013a72:	d00b      	beq.n	8013a8c <__pow5mult+0xa0>
 8013a74:	6820      	ldr	r0, [r4, #0]
 8013a76:	b938      	cbnz	r0, 8013a88 <__pow5mult+0x9c>
 8013a78:	4622      	mov	r2, r4
 8013a7a:	4621      	mov	r1, r4
 8013a7c:	4638      	mov	r0, r7
 8013a7e:	f7ff ff0b 	bl	8013898 <__multiply>
 8013a82:	6020      	str	r0, [r4, #0]
 8013a84:	f8c0 9000 	str.w	r9, [r0]
 8013a88:	4604      	mov	r4, r0
 8013a8a:	e7e4      	b.n	8013a56 <__pow5mult+0x6a>
 8013a8c:	4630      	mov	r0, r6
 8013a8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a92:	bf00      	nop
 8013a94:	0801637c 	.word	0x0801637c
 8013a98:	080162a1 	.word	0x080162a1
 8013a9c:	08016321 	.word	0x08016321

08013aa0 <__lshift>:
 8013aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013aa4:	460c      	mov	r4, r1
 8013aa6:	6849      	ldr	r1, [r1, #4]
 8013aa8:	6923      	ldr	r3, [r4, #16]
 8013aaa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013aae:	68a3      	ldr	r3, [r4, #8]
 8013ab0:	4607      	mov	r7, r0
 8013ab2:	4691      	mov	r9, r2
 8013ab4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013ab8:	f108 0601 	add.w	r6, r8, #1
 8013abc:	42b3      	cmp	r3, r6
 8013abe:	db0b      	blt.n	8013ad8 <__lshift+0x38>
 8013ac0:	4638      	mov	r0, r7
 8013ac2:	f7ff fddf 	bl	8013684 <_Balloc>
 8013ac6:	4605      	mov	r5, r0
 8013ac8:	b948      	cbnz	r0, 8013ade <__lshift+0x3e>
 8013aca:	4602      	mov	r2, r0
 8013acc:	4b28      	ldr	r3, [pc, #160]	@ (8013b70 <__lshift+0xd0>)
 8013ace:	4829      	ldr	r0, [pc, #164]	@ (8013b74 <__lshift+0xd4>)
 8013ad0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013ad4:	f000 fb84 	bl	80141e0 <__assert_func>
 8013ad8:	3101      	adds	r1, #1
 8013ada:	005b      	lsls	r3, r3, #1
 8013adc:	e7ee      	b.n	8013abc <__lshift+0x1c>
 8013ade:	2300      	movs	r3, #0
 8013ae0:	f100 0114 	add.w	r1, r0, #20
 8013ae4:	f100 0210 	add.w	r2, r0, #16
 8013ae8:	4618      	mov	r0, r3
 8013aea:	4553      	cmp	r3, sl
 8013aec:	db33      	blt.n	8013b56 <__lshift+0xb6>
 8013aee:	6920      	ldr	r0, [r4, #16]
 8013af0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013af4:	f104 0314 	add.w	r3, r4, #20
 8013af8:	f019 091f 	ands.w	r9, r9, #31
 8013afc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013b00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013b04:	d02b      	beq.n	8013b5e <__lshift+0xbe>
 8013b06:	f1c9 0e20 	rsb	lr, r9, #32
 8013b0a:	468a      	mov	sl, r1
 8013b0c:	2200      	movs	r2, #0
 8013b0e:	6818      	ldr	r0, [r3, #0]
 8013b10:	fa00 f009 	lsl.w	r0, r0, r9
 8013b14:	4310      	orrs	r0, r2
 8013b16:	f84a 0b04 	str.w	r0, [sl], #4
 8013b1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b1e:	459c      	cmp	ip, r3
 8013b20:	fa22 f20e 	lsr.w	r2, r2, lr
 8013b24:	d8f3      	bhi.n	8013b0e <__lshift+0x6e>
 8013b26:	ebac 0304 	sub.w	r3, ip, r4
 8013b2a:	3b15      	subs	r3, #21
 8013b2c:	f023 0303 	bic.w	r3, r3, #3
 8013b30:	3304      	adds	r3, #4
 8013b32:	f104 0015 	add.w	r0, r4, #21
 8013b36:	4584      	cmp	ip, r0
 8013b38:	bf38      	it	cc
 8013b3a:	2304      	movcc	r3, #4
 8013b3c:	50ca      	str	r2, [r1, r3]
 8013b3e:	b10a      	cbz	r2, 8013b44 <__lshift+0xa4>
 8013b40:	f108 0602 	add.w	r6, r8, #2
 8013b44:	3e01      	subs	r6, #1
 8013b46:	4638      	mov	r0, r7
 8013b48:	612e      	str	r6, [r5, #16]
 8013b4a:	4621      	mov	r1, r4
 8013b4c:	f7ff fdda 	bl	8013704 <_Bfree>
 8013b50:	4628      	mov	r0, r5
 8013b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b56:	f842 0f04 	str.w	r0, [r2, #4]!
 8013b5a:	3301      	adds	r3, #1
 8013b5c:	e7c5      	b.n	8013aea <__lshift+0x4a>
 8013b5e:	3904      	subs	r1, #4
 8013b60:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b64:	f841 2f04 	str.w	r2, [r1, #4]!
 8013b68:	459c      	cmp	ip, r3
 8013b6a:	d8f9      	bhi.n	8013b60 <__lshift+0xc0>
 8013b6c:	e7ea      	b.n	8013b44 <__lshift+0xa4>
 8013b6e:	bf00      	nop
 8013b70:	08016310 	.word	0x08016310
 8013b74:	08016321 	.word	0x08016321

08013b78 <__mcmp>:
 8013b78:	690a      	ldr	r2, [r1, #16]
 8013b7a:	4603      	mov	r3, r0
 8013b7c:	6900      	ldr	r0, [r0, #16]
 8013b7e:	1a80      	subs	r0, r0, r2
 8013b80:	b530      	push	{r4, r5, lr}
 8013b82:	d10e      	bne.n	8013ba2 <__mcmp+0x2a>
 8013b84:	3314      	adds	r3, #20
 8013b86:	3114      	adds	r1, #20
 8013b88:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013b8c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013b90:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013b94:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013b98:	4295      	cmp	r5, r2
 8013b9a:	d003      	beq.n	8013ba4 <__mcmp+0x2c>
 8013b9c:	d205      	bcs.n	8013baa <__mcmp+0x32>
 8013b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8013ba2:	bd30      	pop	{r4, r5, pc}
 8013ba4:	42a3      	cmp	r3, r4
 8013ba6:	d3f3      	bcc.n	8013b90 <__mcmp+0x18>
 8013ba8:	e7fb      	b.n	8013ba2 <__mcmp+0x2a>
 8013baa:	2001      	movs	r0, #1
 8013bac:	e7f9      	b.n	8013ba2 <__mcmp+0x2a>
	...

08013bb0 <__mdiff>:
 8013bb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bb4:	4689      	mov	r9, r1
 8013bb6:	4606      	mov	r6, r0
 8013bb8:	4611      	mov	r1, r2
 8013bba:	4648      	mov	r0, r9
 8013bbc:	4614      	mov	r4, r2
 8013bbe:	f7ff ffdb 	bl	8013b78 <__mcmp>
 8013bc2:	1e05      	subs	r5, r0, #0
 8013bc4:	d112      	bne.n	8013bec <__mdiff+0x3c>
 8013bc6:	4629      	mov	r1, r5
 8013bc8:	4630      	mov	r0, r6
 8013bca:	f7ff fd5b 	bl	8013684 <_Balloc>
 8013bce:	4602      	mov	r2, r0
 8013bd0:	b928      	cbnz	r0, 8013bde <__mdiff+0x2e>
 8013bd2:	4b3f      	ldr	r3, [pc, #252]	@ (8013cd0 <__mdiff+0x120>)
 8013bd4:	f240 2137 	movw	r1, #567	@ 0x237
 8013bd8:	483e      	ldr	r0, [pc, #248]	@ (8013cd4 <__mdiff+0x124>)
 8013bda:	f000 fb01 	bl	80141e0 <__assert_func>
 8013bde:	2301      	movs	r3, #1
 8013be0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013be4:	4610      	mov	r0, r2
 8013be6:	b003      	add	sp, #12
 8013be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bec:	bfbc      	itt	lt
 8013bee:	464b      	movlt	r3, r9
 8013bf0:	46a1      	movlt	r9, r4
 8013bf2:	4630      	mov	r0, r6
 8013bf4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013bf8:	bfba      	itte	lt
 8013bfa:	461c      	movlt	r4, r3
 8013bfc:	2501      	movlt	r5, #1
 8013bfe:	2500      	movge	r5, #0
 8013c00:	f7ff fd40 	bl	8013684 <_Balloc>
 8013c04:	4602      	mov	r2, r0
 8013c06:	b918      	cbnz	r0, 8013c10 <__mdiff+0x60>
 8013c08:	4b31      	ldr	r3, [pc, #196]	@ (8013cd0 <__mdiff+0x120>)
 8013c0a:	f240 2145 	movw	r1, #581	@ 0x245
 8013c0e:	e7e3      	b.n	8013bd8 <__mdiff+0x28>
 8013c10:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013c14:	6926      	ldr	r6, [r4, #16]
 8013c16:	60c5      	str	r5, [r0, #12]
 8013c18:	f109 0310 	add.w	r3, r9, #16
 8013c1c:	f109 0514 	add.w	r5, r9, #20
 8013c20:	f104 0e14 	add.w	lr, r4, #20
 8013c24:	f100 0b14 	add.w	fp, r0, #20
 8013c28:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013c2c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013c30:	9301      	str	r3, [sp, #4]
 8013c32:	46d9      	mov	r9, fp
 8013c34:	f04f 0c00 	mov.w	ip, #0
 8013c38:	9b01      	ldr	r3, [sp, #4]
 8013c3a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013c3e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013c42:	9301      	str	r3, [sp, #4]
 8013c44:	fa1f f38a 	uxth.w	r3, sl
 8013c48:	4619      	mov	r1, r3
 8013c4a:	b283      	uxth	r3, r0
 8013c4c:	1acb      	subs	r3, r1, r3
 8013c4e:	0c00      	lsrs	r0, r0, #16
 8013c50:	4463      	add	r3, ip
 8013c52:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013c56:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013c5a:	b29b      	uxth	r3, r3
 8013c5c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013c60:	4576      	cmp	r6, lr
 8013c62:	f849 3b04 	str.w	r3, [r9], #4
 8013c66:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013c6a:	d8e5      	bhi.n	8013c38 <__mdiff+0x88>
 8013c6c:	1b33      	subs	r3, r6, r4
 8013c6e:	3b15      	subs	r3, #21
 8013c70:	f023 0303 	bic.w	r3, r3, #3
 8013c74:	3415      	adds	r4, #21
 8013c76:	3304      	adds	r3, #4
 8013c78:	42a6      	cmp	r6, r4
 8013c7a:	bf38      	it	cc
 8013c7c:	2304      	movcc	r3, #4
 8013c7e:	441d      	add	r5, r3
 8013c80:	445b      	add	r3, fp
 8013c82:	461e      	mov	r6, r3
 8013c84:	462c      	mov	r4, r5
 8013c86:	4544      	cmp	r4, r8
 8013c88:	d30e      	bcc.n	8013ca8 <__mdiff+0xf8>
 8013c8a:	f108 0103 	add.w	r1, r8, #3
 8013c8e:	1b49      	subs	r1, r1, r5
 8013c90:	f021 0103 	bic.w	r1, r1, #3
 8013c94:	3d03      	subs	r5, #3
 8013c96:	45a8      	cmp	r8, r5
 8013c98:	bf38      	it	cc
 8013c9a:	2100      	movcc	r1, #0
 8013c9c:	440b      	add	r3, r1
 8013c9e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013ca2:	b191      	cbz	r1, 8013cca <__mdiff+0x11a>
 8013ca4:	6117      	str	r7, [r2, #16]
 8013ca6:	e79d      	b.n	8013be4 <__mdiff+0x34>
 8013ca8:	f854 1b04 	ldr.w	r1, [r4], #4
 8013cac:	46e6      	mov	lr, ip
 8013cae:	0c08      	lsrs	r0, r1, #16
 8013cb0:	fa1c fc81 	uxtah	ip, ip, r1
 8013cb4:	4471      	add	r1, lr
 8013cb6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013cba:	b289      	uxth	r1, r1
 8013cbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013cc0:	f846 1b04 	str.w	r1, [r6], #4
 8013cc4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013cc8:	e7dd      	b.n	8013c86 <__mdiff+0xd6>
 8013cca:	3f01      	subs	r7, #1
 8013ccc:	e7e7      	b.n	8013c9e <__mdiff+0xee>
 8013cce:	bf00      	nop
 8013cd0:	08016310 	.word	0x08016310
 8013cd4:	08016321 	.word	0x08016321

08013cd8 <__d2b>:
 8013cd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013cdc:	460f      	mov	r7, r1
 8013cde:	2101      	movs	r1, #1
 8013ce0:	ec59 8b10 	vmov	r8, r9, d0
 8013ce4:	4616      	mov	r6, r2
 8013ce6:	f7ff fccd 	bl	8013684 <_Balloc>
 8013cea:	4604      	mov	r4, r0
 8013cec:	b930      	cbnz	r0, 8013cfc <__d2b+0x24>
 8013cee:	4602      	mov	r2, r0
 8013cf0:	4b23      	ldr	r3, [pc, #140]	@ (8013d80 <__d2b+0xa8>)
 8013cf2:	4824      	ldr	r0, [pc, #144]	@ (8013d84 <__d2b+0xac>)
 8013cf4:	f240 310f 	movw	r1, #783	@ 0x30f
 8013cf8:	f000 fa72 	bl	80141e0 <__assert_func>
 8013cfc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013d00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013d04:	b10d      	cbz	r5, 8013d0a <__d2b+0x32>
 8013d06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013d0a:	9301      	str	r3, [sp, #4]
 8013d0c:	f1b8 0300 	subs.w	r3, r8, #0
 8013d10:	d023      	beq.n	8013d5a <__d2b+0x82>
 8013d12:	4668      	mov	r0, sp
 8013d14:	9300      	str	r3, [sp, #0]
 8013d16:	f7ff fd7c 	bl	8013812 <__lo0bits>
 8013d1a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013d1e:	b1d0      	cbz	r0, 8013d56 <__d2b+0x7e>
 8013d20:	f1c0 0320 	rsb	r3, r0, #32
 8013d24:	fa02 f303 	lsl.w	r3, r2, r3
 8013d28:	430b      	orrs	r3, r1
 8013d2a:	40c2      	lsrs	r2, r0
 8013d2c:	6163      	str	r3, [r4, #20]
 8013d2e:	9201      	str	r2, [sp, #4]
 8013d30:	9b01      	ldr	r3, [sp, #4]
 8013d32:	61a3      	str	r3, [r4, #24]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	bf0c      	ite	eq
 8013d38:	2201      	moveq	r2, #1
 8013d3a:	2202      	movne	r2, #2
 8013d3c:	6122      	str	r2, [r4, #16]
 8013d3e:	b1a5      	cbz	r5, 8013d6a <__d2b+0x92>
 8013d40:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013d44:	4405      	add	r5, r0
 8013d46:	603d      	str	r5, [r7, #0]
 8013d48:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013d4c:	6030      	str	r0, [r6, #0]
 8013d4e:	4620      	mov	r0, r4
 8013d50:	b003      	add	sp, #12
 8013d52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d56:	6161      	str	r1, [r4, #20]
 8013d58:	e7ea      	b.n	8013d30 <__d2b+0x58>
 8013d5a:	a801      	add	r0, sp, #4
 8013d5c:	f7ff fd59 	bl	8013812 <__lo0bits>
 8013d60:	9b01      	ldr	r3, [sp, #4]
 8013d62:	6163      	str	r3, [r4, #20]
 8013d64:	3020      	adds	r0, #32
 8013d66:	2201      	movs	r2, #1
 8013d68:	e7e8      	b.n	8013d3c <__d2b+0x64>
 8013d6a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013d6e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013d72:	6038      	str	r0, [r7, #0]
 8013d74:	6918      	ldr	r0, [r3, #16]
 8013d76:	f7ff fd2d 	bl	80137d4 <__hi0bits>
 8013d7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013d7e:	e7e5      	b.n	8013d4c <__d2b+0x74>
 8013d80:	08016310 	.word	0x08016310
 8013d84:	08016321 	.word	0x08016321

08013d88 <__ssputs_r>:
 8013d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d8c:	688e      	ldr	r6, [r1, #8]
 8013d8e:	461f      	mov	r7, r3
 8013d90:	42be      	cmp	r6, r7
 8013d92:	680b      	ldr	r3, [r1, #0]
 8013d94:	4682      	mov	sl, r0
 8013d96:	460c      	mov	r4, r1
 8013d98:	4690      	mov	r8, r2
 8013d9a:	d82d      	bhi.n	8013df8 <__ssputs_r+0x70>
 8013d9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013da0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013da4:	d026      	beq.n	8013df4 <__ssputs_r+0x6c>
 8013da6:	6965      	ldr	r5, [r4, #20]
 8013da8:	6909      	ldr	r1, [r1, #16]
 8013daa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013dae:	eba3 0901 	sub.w	r9, r3, r1
 8013db2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013db6:	1c7b      	adds	r3, r7, #1
 8013db8:	444b      	add	r3, r9
 8013dba:	106d      	asrs	r5, r5, #1
 8013dbc:	429d      	cmp	r5, r3
 8013dbe:	bf38      	it	cc
 8013dc0:	461d      	movcc	r5, r3
 8013dc2:	0553      	lsls	r3, r2, #21
 8013dc4:	d527      	bpl.n	8013e16 <__ssputs_r+0x8e>
 8013dc6:	4629      	mov	r1, r5
 8013dc8:	f7fd fee0 	bl	8011b8c <_malloc_r>
 8013dcc:	4606      	mov	r6, r0
 8013dce:	b360      	cbz	r0, 8013e2a <__ssputs_r+0xa2>
 8013dd0:	6921      	ldr	r1, [r4, #16]
 8013dd2:	464a      	mov	r2, r9
 8013dd4:	f000 f9f6 	bl	80141c4 <memcpy>
 8013dd8:	89a3      	ldrh	r3, [r4, #12]
 8013dda:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013dde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013de2:	81a3      	strh	r3, [r4, #12]
 8013de4:	6126      	str	r6, [r4, #16]
 8013de6:	6165      	str	r5, [r4, #20]
 8013de8:	444e      	add	r6, r9
 8013dea:	eba5 0509 	sub.w	r5, r5, r9
 8013dee:	6026      	str	r6, [r4, #0]
 8013df0:	60a5      	str	r5, [r4, #8]
 8013df2:	463e      	mov	r6, r7
 8013df4:	42be      	cmp	r6, r7
 8013df6:	d900      	bls.n	8013dfa <__ssputs_r+0x72>
 8013df8:	463e      	mov	r6, r7
 8013dfa:	6820      	ldr	r0, [r4, #0]
 8013dfc:	4632      	mov	r2, r6
 8013dfe:	4641      	mov	r1, r8
 8013e00:	f000 f9c6 	bl	8014190 <memmove>
 8013e04:	68a3      	ldr	r3, [r4, #8]
 8013e06:	1b9b      	subs	r3, r3, r6
 8013e08:	60a3      	str	r3, [r4, #8]
 8013e0a:	6823      	ldr	r3, [r4, #0]
 8013e0c:	4433      	add	r3, r6
 8013e0e:	6023      	str	r3, [r4, #0]
 8013e10:	2000      	movs	r0, #0
 8013e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e16:	462a      	mov	r2, r5
 8013e18:	f000 fa26 	bl	8014268 <_realloc_r>
 8013e1c:	4606      	mov	r6, r0
 8013e1e:	2800      	cmp	r0, #0
 8013e20:	d1e0      	bne.n	8013de4 <__ssputs_r+0x5c>
 8013e22:	6921      	ldr	r1, [r4, #16]
 8013e24:	4650      	mov	r0, sl
 8013e26:	f7ff fbe3 	bl	80135f0 <_free_r>
 8013e2a:	230c      	movs	r3, #12
 8013e2c:	f8ca 3000 	str.w	r3, [sl]
 8013e30:	89a3      	ldrh	r3, [r4, #12]
 8013e32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013e36:	81a3      	strh	r3, [r4, #12]
 8013e38:	f04f 30ff 	mov.w	r0, #4294967295
 8013e3c:	e7e9      	b.n	8013e12 <__ssputs_r+0x8a>
	...

08013e40 <_svfiprintf_r>:
 8013e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e44:	4698      	mov	r8, r3
 8013e46:	898b      	ldrh	r3, [r1, #12]
 8013e48:	061b      	lsls	r3, r3, #24
 8013e4a:	b09d      	sub	sp, #116	@ 0x74
 8013e4c:	4607      	mov	r7, r0
 8013e4e:	460d      	mov	r5, r1
 8013e50:	4614      	mov	r4, r2
 8013e52:	d510      	bpl.n	8013e76 <_svfiprintf_r+0x36>
 8013e54:	690b      	ldr	r3, [r1, #16]
 8013e56:	b973      	cbnz	r3, 8013e76 <_svfiprintf_r+0x36>
 8013e58:	2140      	movs	r1, #64	@ 0x40
 8013e5a:	f7fd fe97 	bl	8011b8c <_malloc_r>
 8013e5e:	6028      	str	r0, [r5, #0]
 8013e60:	6128      	str	r0, [r5, #16]
 8013e62:	b930      	cbnz	r0, 8013e72 <_svfiprintf_r+0x32>
 8013e64:	230c      	movs	r3, #12
 8013e66:	603b      	str	r3, [r7, #0]
 8013e68:	f04f 30ff 	mov.w	r0, #4294967295
 8013e6c:	b01d      	add	sp, #116	@ 0x74
 8013e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e72:	2340      	movs	r3, #64	@ 0x40
 8013e74:	616b      	str	r3, [r5, #20]
 8013e76:	2300      	movs	r3, #0
 8013e78:	9309      	str	r3, [sp, #36]	@ 0x24
 8013e7a:	2320      	movs	r3, #32
 8013e7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013e80:	f8cd 800c 	str.w	r8, [sp, #12]
 8013e84:	2330      	movs	r3, #48	@ 0x30
 8013e86:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014024 <_svfiprintf_r+0x1e4>
 8013e8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013e8e:	f04f 0901 	mov.w	r9, #1
 8013e92:	4623      	mov	r3, r4
 8013e94:	469a      	mov	sl, r3
 8013e96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013e9a:	b10a      	cbz	r2, 8013ea0 <_svfiprintf_r+0x60>
 8013e9c:	2a25      	cmp	r2, #37	@ 0x25
 8013e9e:	d1f9      	bne.n	8013e94 <_svfiprintf_r+0x54>
 8013ea0:	ebba 0b04 	subs.w	fp, sl, r4
 8013ea4:	d00b      	beq.n	8013ebe <_svfiprintf_r+0x7e>
 8013ea6:	465b      	mov	r3, fp
 8013ea8:	4622      	mov	r2, r4
 8013eaa:	4629      	mov	r1, r5
 8013eac:	4638      	mov	r0, r7
 8013eae:	f7ff ff6b 	bl	8013d88 <__ssputs_r>
 8013eb2:	3001      	adds	r0, #1
 8013eb4:	f000 80a7 	beq.w	8014006 <_svfiprintf_r+0x1c6>
 8013eb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013eba:	445a      	add	r2, fp
 8013ebc:	9209      	str	r2, [sp, #36]	@ 0x24
 8013ebe:	f89a 3000 	ldrb.w	r3, [sl]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	f000 809f 	beq.w	8014006 <_svfiprintf_r+0x1c6>
 8013ec8:	2300      	movs	r3, #0
 8013eca:	f04f 32ff 	mov.w	r2, #4294967295
 8013ece:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013ed2:	f10a 0a01 	add.w	sl, sl, #1
 8013ed6:	9304      	str	r3, [sp, #16]
 8013ed8:	9307      	str	r3, [sp, #28]
 8013eda:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013ede:	931a      	str	r3, [sp, #104]	@ 0x68
 8013ee0:	4654      	mov	r4, sl
 8013ee2:	2205      	movs	r2, #5
 8013ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ee8:	484e      	ldr	r0, [pc, #312]	@ (8014024 <_svfiprintf_r+0x1e4>)
 8013eea:	f7ec f979 	bl	80001e0 <memchr>
 8013eee:	9a04      	ldr	r2, [sp, #16]
 8013ef0:	b9d8      	cbnz	r0, 8013f2a <_svfiprintf_r+0xea>
 8013ef2:	06d0      	lsls	r0, r2, #27
 8013ef4:	bf44      	itt	mi
 8013ef6:	2320      	movmi	r3, #32
 8013ef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013efc:	0711      	lsls	r1, r2, #28
 8013efe:	bf44      	itt	mi
 8013f00:	232b      	movmi	r3, #43	@ 0x2b
 8013f02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013f06:	f89a 3000 	ldrb.w	r3, [sl]
 8013f0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8013f0c:	d015      	beq.n	8013f3a <_svfiprintf_r+0xfa>
 8013f0e:	9a07      	ldr	r2, [sp, #28]
 8013f10:	4654      	mov	r4, sl
 8013f12:	2000      	movs	r0, #0
 8013f14:	f04f 0c0a 	mov.w	ip, #10
 8013f18:	4621      	mov	r1, r4
 8013f1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013f1e:	3b30      	subs	r3, #48	@ 0x30
 8013f20:	2b09      	cmp	r3, #9
 8013f22:	d94b      	bls.n	8013fbc <_svfiprintf_r+0x17c>
 8013f24:	b1b0      	cbz	r0, 8013f54 <_svfiprintf_r+0x114>
 8013f26:	9207      	str	r2, [sp, #28]
 8013f28:	e014      	b.n	8013f54 <_svfiprintf_r+0x114>
 8013f2a:	eba0 0308 	sub.w	r3, r0, r8
 8013f2e:	fa09 f303 	lsl.w	r3, r9, r3
 8013f32:	4313      	orrs	r3, r2
 8013f34:	9304      	str	r3, [sp, #16]
 8013f36:	46a2      	mov	sl, r4
 8013f38:	e7d2      	b.n	8013ee0 <_svfiprintf_r+0xa0>
 8013f3a:	9b03      	ldr	r3, [sp, #12]
 8013f3c:	1d19      	adds	r1, r3, #4
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	9103      	str	r1, [sp, #12]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	bfbb      	ittet	lt
 8013f46:	425b      	neglt	r3, r3
 8013f48:	f042 0202 	orrlt.w	r2, r2, #2
 8013f4c:	9307      	strge	r3, [sp, #28]
 8013f4e:	9307      	strlt	r3, [sp, #28]
 8013f50:	bfb8      	it	lt
 8013f52:	9204      	strlt	r2, [sp, #16]
 8013f54:	7823      	ldrb	r3, [r4, #0]
 8013f56:	2b2e      	cmp	r3, #46	@ 0x2e
 8013f58:	d10a      	bne.n	8013f70 <_svfiprintf_r+0x130>
 8013f5a:	7863      	ldrb	r3, [r4, #1]
 8013f5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8013f5e:	d132      	bne.n	8013fc6 <_svfiprintf_r+0x186>
 8013f60:	9b03      	ldr	r3, [sp, #12]
 8013f62:	1d1a      	adds	r2, r3, #4
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	9203      	str	r2, [sp, #12]
 8013f68:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013f6c:	3402      	adds	r4, #2
 8013f6e:	9305      	str	r3, [sp, #20]
 8013f70:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014034 <_svfiprintf_r+0x1f4>
 8013f74:	7821      	ldrb	r1, [r4, #0]
 8013f76:	2203      	movs	r2, #3
 8013f78:	4650      	mov	r0, sl
 8013f7a:	f7ec f931 	bl	80001e0 <memchr>
 8013f7e:	b138      	cbz	r0, 8013f90 <_svfiprintf_r+0x150>
 8013f80:	9b04      	ldr	r3, [sp, #16]
 8013f82:	eba0 000a 	sub.w	r0, r0, sl
 8013f86:	2240      	movs	r2, #64	@ 0x40
 8013f88:	4082      	lsls	r2, r0
 8013f8a:	4313      	orrs	r3, r2
 8013f8c:	3401      	adds	r4, #1
 8013f8e:	9304      	str	r3, [sp, #16]
 8013f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f94:	4824      	ldr	r0, [pc, #144]	@ (8014028 <_svfiprintf_r+0x1e8>)
 8013f96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013f9a:	2206      	movs	r2, #6
 8013f9c:	f7ec f920 	bl	80001e0 <memchr>
 8013fa0:	2800      	cmp	r0, #0
 8013fa2:	d036      	beq.n	8014012 <_svfiprintf_r+0x1d2>
 8013fa4:	4b21      	ldr	r3, [pc, #132]	@ (801402c <_svfiprintf_r+0x1ec>)
 8013fa6:	bb1b      	cbnz	r3, 8013ff0 <_svfiprintf_r+0x1b0>
 8013fa8:	9b03      	ldr	r3, [sp, #12]
 8013faa:	3307      	adds	r3, #7
 8013fac:	f023 0307 	bic.w	r3, r3, #7
 8013fb0:	3308      	adds	r3, #8
 8013fb2:	9303      	str	r3, [sp, #12]
 8013fb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013fb6:	4433      	add	r3, r6
 8013fb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8013fba:	e76a      	b.n	8013e92 <_svfiprintf_r+0x52>
 8013fbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8013fc0:	460c      	mov	r4, r1
 8013fc2:	2001      	movs	r0, #1
 8013fc4:	e7a8      	b.n	8013f18 <_svfiprintf_r+0xd8>
 8013fc6:	2300      	movs	r3, #0
 8013fc8:	3401      	adds	r4, #1
 8013fca:	9305      	str	r3, [sp, #20]
 8013fcc:	4619      	mov	r1, r3
 8013fce:	f04f 0c0a 	mov.w	ip, #10
 8013fd2:	4620      	mov	r0, r4
 8013fd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013fd8:	3a30      	subs	r2, #48	@ 0x30
 8013fda:	2a09      	cmp	r2, #9
 8013fdc:	d903      	bls.n	8013fe6 <_svfiprintf_r+0x1a6>
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d0c6      	beq.n	8013f70 <_svfiprintf_r+0x130>
 8013fe2:	9105      	str	r1, [sp, #20]
 8013fe4:	e7c4      	b.n	8013f70 <_svfiprintf_r+0x130>
 8013fe6:	fb0c 2101 	mla	r1, ip, r1, r2
 8013fea:	4604      	mov	r4, r0
 8013fec:	2301      	movs	r3, #1
 8013fee:	e7f0      	b.n	8013fd2 <_svfiprintf_r+0x192>
 8013ff0:	ab03      	add	r3, sp, #12
 8013ff2:	9300      	str	r3, [sp, #0]
 8013ff4:	462a      	mov	r2, r5
 8013ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8014030 <_svfiprintf_r+0x1f0>)
 8013ff8:	a904      	add	r1, sp, #16
 8013ffa:	4638      	mov	r0, r7
 8013ffc:	f7fd fef2 	bl	8011de4 <_printf_float>
 8014000:	1c42      	adds	r2, r0, #1
 8014002:	4606      	mov	r6, r0
 8014004:	d1d6      	bne.n	8013fb4 <_svfiprintf_r+0x174>
 8014006:	89ab      	ldrh	r3, [r5, #12]
 8014008:	065b      	lsls	r3, r3, #25
 801400a:	f53f af2d 	bmi.w	8013e68 <_svfiprintf_r+0x28>
 801400e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014010:	e72c      	b.n	8013e6c <_svfiprintf_r+0x2c>
 8014012:	ab03      	add	r3, sp, #12
 8014014:	9300      	str	r3, [sp, #0]
 8014016:	462a      	mov	r2, r5
 8014018:	4b05      	ldr	r3, [pc, #20]	@ (8014030 <_svfiprintf_r+0x1f0>)
 801401a:	a904      	add	r1, sp, #16
 801401c:	4638      	mov	r0, r7
 801401e:	f7fe f979 	bl	8012314 <_printf_i>
 8014022:	e7ed      	b.n	8014000 <_svfiprintf_r+0x1c0>
 8014024:	08016478 	.word	0x08016478
 8014028:	08016482 	.word	0x08016482
 801402c:	08011de5 	.word	0x08011de5
 8014030:	08013d89 	.word	0x08013d89
 8014034:	0801647e 	.word	0x0801647e

08014038 <__sflush_r>:
 8014038:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801403c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014040:	0716      	lsls	r6, r2, #28
 8014042:	4605      	mov	r5, r0
 8014044:	460c      	mov	r4, r1
 8014046:	d454      	bmi.n	80140f2 <__sflush_r+0xba>
 8014048:	684b      	ldr	r3, [r1, #4]
 801404a:	2b00      	cmp	r3, #0
 801404c:	dc02      	bgt.n	8014054 <__sflush_r+0x1c>
 801404e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014050:	2b00      	cmp	r3, #0
 8014052:	dd48      	ble.n	80140e6 <__sflush_r+0xae>
 8014054:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014056:	2e00      	cmp	r6, #0
 8014058:	d045      	beq.n	80140e6 <__sflush_r+0xae>
 801405a:	2300      	movs	r3, #0
 801405c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014060:	682f      	ldr	r7, [r5, #0]
 8014062:	6a21      	ldr	r1, [r4, #32]
 8014064:	602b      	str	r3, [r5, #0]
 8014066:	d030      	beq.n	80140ca <__sflush_r+0x92>
 8014068:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801406a:	89a3      	ldrh	r3, [r4, #12]
 801406c:	0759      	lsls	r1, r3, #29
 801406e:	d505      	bpl.n	801407c <__sflush_r+0x44>
 8014070:	6863      	ldr	r3, [r4, #4]
 8014072:	1ad2      	subs	r2, r2, r3
 8014074:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014076:	b10b      	cbz	r3, 801407c <__sflush_r+0x44>
 8014078:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801407a:	1ad2      	subs	r2, r2, r3
 801407c:	2300      	movs	r3, #0
 801407e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014080:	6a21      	ldr	r1, [r4, #32]
 8014082:	4628      	mov	r0, r5
 8014084:	47b0      	blx	r6
 8014086:	1c43      	adds	r3, r0, #1
 8014088:	89a3      	ldrh	r3, [r4, #12]
 801408a:	d106      	bne.n	801409a <__sflush_r+0x62>
 801408c:	6829      	ldr	r1, [r5, #0]
 801408e:	291d      	cmp	r1, #29
 8014090:	d82b      	bhi.n	80140ea <__sflush_r+0xb2>
 8014092:	4a2a      	ldr	r2, [pc, #168]	@ (801413c <__sflush_r+0x104>)
 8014094:	410a      	asrs	r2, r1
 8014096:	07d6      	lsls	r6, r2, #31
 8014098:	d427      	bmi.n	80140ea <__sflush_r+0xb2>
 801409a:	2200      	movs	r2, #0
 801409c:	6062      	str	r2, [r4, #4]
 801409e:	04d9      	lsls	r1, r3, #19
 80140a0:	6922      	ldr	r2, [r4, #16]
 80140a2:	6022      	str	r2, [r4, #0]
 80140a4:	d504      	bpl.n	80140b0 <__sflush_r+0x78>
 80140a6:	1c42      	adds	r2, r0, #1
 80140a8:	d101      	bne.n	80140ae <__sflush_r+0x76>
 80140aa:	682b      	ldr	r3, [r5, #0]
 80140ac:	b903      	cbnz	r3, 80140b0 <__sflush_r+0x78>
 80140ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80140b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80140b2:	602f      	str	r7, [r5, #0]
 80140b4:	b1b9      	cbz	r1, 80140e6 <__sflush_r+0xae>
 80140b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80140ba:	4299      	cmp	r1, r3
 80140bc:	d002      	beq.n	80140c4 <__sflush_r+0x8c>
 80140be:	4628      	mov	r0, r5
 80140c0:	f7ff fa96 	bl	80135f0 <_free_r>
 80140c4:	2300      	movs	r3, #0
 80140c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80140c8:	e00d      	b.n	80140e6 <__sflush_r+0xae>
 80140ca:	2301      	movs	r3, #1
 80140cc:	4628      	mov	r0, r5
 80140ce:	47b0      	blx	r6
 80140d0:	4602      	mov	r2, r0
 80140d2:	1c50      	adds	r0, r2, #1
 80140d4:	d1c9      	bne.n	801406a <__sflush_r+0x32>
 80140d6:	682b      	ldr	r3, [r5, #0]
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d0c6      	beq.n	801406a <__sflush_r+0x32>
 80140dc:	2b1d      	cmp	r3, #29
 80140de:	d001      	beq.n	80140e4 <__sflush_r+0xac>
 80140e0:	2b16      	cmp	r3, #22
 80140e2:	d11e      	bne.n	8014122 <__sflush_r+0xea>
 80140e4:	602f      	str	r7, [r5, #0]
 80140e6:	2000      	movs	r0, #0
 80140e8:	e022      	b.n	8014130 <__sflush_r+0xf8>
 80140ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80140ee:	b21b      	sxth	r3, r3
 80140f0:	e01b      	b.n	801412a <__sflush_r+0xf2>
 80140f2:	690f      	ldr	r7, [r1, #16]
 80140f4:	2f00      	cmp	r7, #0
 80140f6:	d0f6      	beq.n	80140e6 <__sflush_r+0xae>
 80140f8:	0793      	lsls	r3, r2, #30
 80140fa:	680e      	ldr	r6, [r1, #0]
 80140fc:	bf08      	it	eq
 80140fe:	694b      	ldreq	r3, [r1, #20]
 8014100:	600f      	str	r7, [r1, #0]
 8014102:	bf18      	it	ne
 8014104:	2300      	movne	r3, #0
 8014106:	eba6 0807 	sub.w	r8, r6, r7
 801410a:	608b      	str	r3, [r1, #8]
 801410c:	f1b8 0f00 	cmp.w	r8, #0
 8014110:	dde9      	ble.n	80140e6 <__sflush_r+0xae>
 8014112:	6a21      	ldr	r1, [r4, #32]
 8014114:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014116:	4643      	mov	r3, r8
 8014118:	463a      	mov	r2, r7
 801411a:	4628      	mov	r0, r5
 801411c:	47b0      	blx	r6
 801411e:	2800      	cmp	r0, #0
 8014120:	dc08      	bgt.n	8014134 <__sflush_r+0xfc>
 8014122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014126:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801412a:	81a3      	strh	r3, [r4, #12]
 801412c:	f04f 30ff 	mov.w	r0, #4294967295
 8014130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014134:	4407      	add	r7, r0
 8014136:	eba8 0800 	sub.w	r8, r8, r0
 801413a:	e7e7      	b.n	801410c <__sflush_r+0xd4>
 801413c:	dfbffffe 	.word	0xdfbffffe

08014140 <_fflush_r>:
 8014140:	b538      	push	{r3, r4, r5, lr}
 8014142:	690b      	ldr	r3, [r1, #16]
 8014144:	4605      	mov	r5, r0
 8014146:	460c      	mov	r4, r1
 8014148:	b913      	cbnz	r3, 8014150 <_fflush_r+0x10>
 801414a:	2500      	movs	r5, #0
 801414c:	4628      	mov	r0, r5
 801414e:	bd38      	pop	{r3, r4, r5, pc}
 8014150:	b118      	cbz	r0, 801415a <_fflush_r+0x1a>
 8014152:	6a03      	ldr	r3, [r0, #32]
 8014154:	b90b      	cbnz	r3, 801415a <_fflush_r+0x1a>
 8014156:	f7fe fa89 	bl	801266c <__sinit>
 801415a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801415e:	2b00      	cmp	r3, #0
 8014160:	d0f3      	beq.n	801414a <_fflush_r+0xa>
 8014162:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014164:	07d0      	lsls	r0, r2, #31
 8014166:	d404      	bmi.n	8014172 <_fflush_r+0x32>
 8014168:	0599      	lsls	r1, r3, #22
 801416a:	d402      	bmi.n	8014172 <_fflush_r+0x32>
 801416c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801416e:	f7fe fbe8 	bl	8012942 <__retarget_lock_acquire_recursive>
 8014172:	4628      	mov	r0, r5
 8014174:	4621      	mov	r1, r4
 8014176:	f7ff ff5f 	bl	8014038 <__sflush_r>
 801417a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801417c:	07da      	lsls	r2, r3, #31
 801417e:	4605      	mov	r5, r0
 8014180:	d4e4      	bmi.n	801414c <_fflush_r+0xc>
 8014182:	89a3      	ldrh	r3, [r4, #12]
 8014184:	059b      	lsls	r3, r3, #22
 8014186:	d4e1      	bmi.n	801414c <_fflush_r+0xc>
 8014188:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801418a:	f7fe fbdb 	bl	8012944 <__retarget_lock_release_recursive>
 801418e:	e7dd      	b.n	801414c <_fflush_r+0xc>

08014190 <memmove>:
 8014190:	4288      	cmp	r0, r1
 8014192:	b510      	push	{r4, lr}
 8014194:	eb01 0402 	add.w	r4, r1, r2
 8014198:	d902      	bls.n	80141a0 <memmove+0x10>
 801419a:	4284      	cmp	r4, r0
 801419c:	4623      	mov	r3, r4
 801419e:	d807      	bhi.n	80141b0 <memmove+0x20>
 80141a0:	1e43      	subs	r3, r0, #1
 80141a2:	42a1      	cmp	r1, r4
 80141a4:	d008      	beq.n	80141b8 <memmove+0x28>
 80141a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80141aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80141ae:	e7f8      	b.n	80141a2 <memmove+0x12>
 80141b0:	4402      	add	r2, r0
 80141b2:	4601      	mov	r1, r0
 80141b4:	428a      	cmp	r2, r1
 80141b6:	d100      	bne.n	80141ba <memmove+0x2a>
 80141b8:	bd10      	pop	{r4, pc}
 80141ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80141be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80141c2:	e7f7      	b.n	80141b4 <memmove+0x24>

080141c4 <memcpy>:
 80141c4:	440a      	add	r2, r1
 80141c6:	4291      	cmp	r1, r2
 80141c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80141cc:	d100      	bne.n	80141d0 <memcpy+0xc>
 80141ce:	4770      	bx	lr
 80141d0:	b510      	push	{r4, lr}
 80141d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80141d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80141da:	4291      	cmp	r1, r2
 80141dc:	d1f9      	bne.n	80141d2 <memcpy+0xe>
 80141de:	bd10      	pop	{r4, pc}

080141e0 <__assert_func>:
 80141e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80141e2:	4614      	mov	r4, r2
 80141e4:	461a      	mov	r2, r3
 80141e6:	4b09      	ldr	r3, [pc, #36]	@ (801420c <__assert_func+0x2c>)
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	4605      	mov	r5, r0
 80141ec:	68d8      	ldr	r0, [r3, #12]
 80141ee:	b954      	cbnz	r4, 8014206 <__assert_func+0x26>
 80141f0:	4b07      	ldr	r3, [pc, #28]	@ (8014210 <__assert_func+0x30>)
 80141f2:	461c      	mov	r4, r3
 80141f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80141f8:	9100      	str	r1, [sp, #0]
 80141fa:	462b      	mov	r3, r5
 80141fc:	4905      	ldr	r1, [pc, #20]	@ (8014214 <__assert_func+0x34>)
 80141fe:	f000 f86f 	bl	80142e0 <fiprintf>
 8014202:	f7fd fc89 	bl	8011b18 <abort>
 8014206:	4b04      	ldr	r3, [pc, #16]	@ (8014218 <__assert_func+0x38>)
 8014208:	e7f4      	b.n	80141f4 <__assert_func+0x14>
 801420a:	bf00      	nop
 801420c:	20000020 	.word	0x20000020
 8014210:	080164ce 	.word	0x080164ce
 8014214:	080164a0 	.word	0x080164a0
 8014218:	08016493 	.word	0x08016493

0801421c <_calloc_r>:
 801421c:	b570      	push	{r4, r5, r6, lr}
 801421e:	fba1 5402 	umull	r5, r4, r1, r2
 8014222:	b93c      	cbnz	r4, 8014234 <_calloc_r+0x18>
 8014224:	4629      	mov	r1, r5
 8014226:	f7fd fcb1 	bl	8011b8c <_malloc_r>
 801422a:	4606      	mov	r6, r0
 801422c:	b928      	cbnz	r0, 801423a <_calloc_r+0x1e>
 801422e:	2600      	movs	r6, #0
 8014230:	4630      	mov	r0, r6
 8014232:	bd70      	pop	{r4, r5, r6, pc}
 8014234:	220c      	movs	r2, #12
 8014236:	6002      	str	r2, [r0, #0]
 8014238:	e7f9      	b.n	801422e <_calloc_r+0x12>
 801423a:	462a      	mov	r2, r5
 801423c:	4621      	mov	r1, r4
 801423e:	f7fe faae 	bl	801279e <memset>
 8014242:	e7f5      	b.n	8014230 <_calloc_r+0x14>

08014244 <__ascii_mbtowc>:
 8014244:	b082      	sub	sp, #8
 8014246:	b901      	cbnz	r1, 801424a <__ascii_mbtowc+0x6>
 8014248:	a901      	add	r1, sp, #4
 801424a:	b142      	cbz	r2, 801425e <__ascii_mbtowc+0x1a>
 801424c:	b14b      	cbz	r3, 8014262 <__ascii_mbtowc+0x1e>
 801424e:	7813      	ldrb	r3, [r2, #0]
 8014250:	600b      	str	r3, [r1, #0]
 8014252:	7812      	ldrb	r2, [r2, #0]
 8014254:	1e10      	subs	r0, r2, #0
 8014256:	bf18      	it	ne
 8014258:	2001      	movne	r0, #1
 801425a:	b002      	add	sp, #8
 801425c:	4770      	bx	lr
 801425e:	4610      	mov	r0, r2
 8014260:	e7fb      	b.n	801425a <__ascii_mbtowc+0x16>
 8014262:	f06f 0001 	mvn.w	r0, #1
 8014266:	e7f8      	b.n	801425a <__ascii_mbtowc+0x16>

08014268 <_realloc_r>:
 8014268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801426c:	4680      	mov	r8, r0
 801426e:	4615      	mov	r5, r2
 8014270:	460c      	mov	r4, r1
 8014272:	b921      	cbnz	r1, 801427e <_realloc_r+0x16>
 8014274:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014278:	4611      	mov	r1, r2
 801427a:	f7fd bc87 	b.w	8011b8c <_malloc_r>
 801427e:	b92a      	cbnz	r2, 801428c <_realloc_r+0x24>
 8014280:	f7ff f9b6 	bl	80135f0 <_free_r>
 8014284:	2400      	movs	r4, #0
 8014286:	4620      	mov	r0, r4
 8014288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801428c:	f000 f83a 	bl	8014304 <_malloc_usable_size_r>
 8014290:	4285      	cmp	r5, r0
 8014292:	4606      	mov	r6, r0
 8014294:	d802      	bhi.n	801429c <_realloc_r+0x34>
 8014296:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801429a:	d8f4      	bhi.n	8014286 <_realloc_r+0x1e>
 801429c:	4629      	mov	r1, r5
 801429e:	4640      	mov	r0, r8
 80142a0:	f7fd fc74 	bl	8011b8c <_malloc_r>
 80142a4:	4607      	mov	r7, r0
 80142a6:	2800      	cmp	r0, #0
 80142a8:	d0ec      	beq.n	8014284 <_realloc_r+0x1c>
 80142aa:	42b5      	cmp	r5, r6
 80142ac:	462a      	mov	r2, r5
 80142ae:	4621      	mov	r1, r4
 80142b0:	bf28      	it	cs
 80142b2:	4632      	movcs	r2, r6
 80142b4:	f7ff ff86 	bl	80141c4 <memcpy>
 80142b8:	4621      	mov	r1, r4
 80142ba:	4640      	mov	r0, r8
 80142bc:	f7ff f998 	bl	80135f0 <_free_r>
 80142c0:	463c      	mov	r4, r7
 80142c2:	e7e0      	b.n	8014286 <_realloc_r+0x1e>

080142c4 <__ascii_wctomb>:
 80142c4:	4603      	mov	r3, r0
 80142c6:	4608      	mov	r0, r1
 80142c8:	b141      	cbz	r1, 80142dc <__ascii_wctomb+0x18>
 80142ca:	2aff      	cmp	r2, #255	@ 0xff
 80142cc:	d904      	bls.n	80142d8 <__ascii_wctomb+0x14>
 80142ce:	228a      	movs	r2, #138	@ 0x8a
 80142d0:	601a      	str	r2, [r3, #0]
 80142d2:	f04f 30ff 	mov.w	r0, #4294967295
 80142d6:	4770      	bx	lr
 80142d8:	700a      	strb	r2, [r1, #0]
 80142da:	2001      	movs	r0, #1
 80142dc:	4770      	bx	lr
	...

080142e0 <fiprintf>:
 80142e0:	b40e      	push	{r1, r2, r3}
 80142e2:	b503      	push	{r0, r1, lr}
 80142e4:	4601      	mov	r1, r0
 80142e6:	ab03      	add	r3, sp, #12
 80142e8:	4805      	ldr	r0, [pc, #20]	@ (8014300 <fiprintf+0x20>)
 80142ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80142ee:	6800      	ldr	r0, [r0, #0]
 80142f0:	9301      	str	r3, [sp, #4]
 80142f2:	f000 f839 	bl	8014368 <_vfiprintf_r>
 80142f6:	b002      	add	sp, #8
 80142f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80142fc:	b003      	add	sp, #12
 80142fe:	4770      	bx	lr
 8014300:	20000020 	.word	0x20000020

08014304 <_malloc_usable_size_r>:
 8014304:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014308:	1f18      	subs	r0, r3, #4
 801430a:	2b00      	cmp	r3, #0
 801430c:	bfbc      	itt	lt
 801430e:	580b      	ldrlt	r3, [r1, r0]
 8014310:	18c0      	addlt	r0, r0, r3
 8014312:	4770      	bx	lr

08014314 <__sfputc_r>:
 8014314:	6893      	ldr	r3, [r2, #8]
 8014316:	3b01      	subs	r3, #1
 8014318:	2b00      	cmp	r3, #0
 801431a:	b410      	push	{r4}
 801431c:	6093      	str	r3, [r2, #8]
 801431e:	da08      	bge.n	8014332 <__sfputc_r+0x1e>
 8014320:	6994      	ldr	r4, [r2, #24]
 8014322:	42a3      	cmp	r3, r4
 8014324:	db01      	blt.n	801432a <__sfputc_r+0x16>
 8014326:	290a      	cmp	r1, #10
 8014328:	d103      	bne.n	8014332 <__sfputc_r+0x1e>
 801432a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801432e:	f000 b933 	b.w	8014598 <__swbuf_r>
 8014332:	6813      	ldr	r3, [r2, #0]
 8014334:	1c58      	adds	r0, r3, #1
 8014336:	6010      	str	r0, [r2, #0]
 8014338:	7019      	strb	r1, [r3, #0]
 801433a:	4608      	mov	r0, r1
 801433c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014340:	4770      	bx	lr

08014342 <__sfputs_r>:
 8014342:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014344:	4606      	mov	r6, r0
 8014346:	460f      	mov	r7, r1
 8014348:	4614      	mov	r4, r2
 801434a:	18d5      	adds	r5, r2, r3
 801434c:	42ac      	cmp	r4, r5
 801434e:	d101      	bne.n	8014354 <__sfputs_r+0x12>
 8014350:	2000      	movs	r0, #0
 8014352:	e007      	b.n	8014364 <__sfputs_r+0x22>
 8014354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014358:	463a      	mov	r2, r7
 801435a:	4630      	mov	r0, r6
 801435c:	f7ff ffda 	bl	8014314 <__sfputc_r>
 8014360:	1c43      	adds	r3, r0, #1
 8014362:	d1f3      	bne.n	801434c <__sfputs_r+0xa>
 8014364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014368 <_vfiprintf_r>:
 8014368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801436c:	460d      	mov	r5, r1
 801436e:	b09d      	sub	sp, #116	@ 0x74
 8014370:	4614      	mov	r4, r2
 8014372:	4698      	mov	r8, r3
 8014374:	4606      	mov	r6, r0
 8014376:	b118      	cbz	r0, 8014380 <_vfiprintf_r+0x18>
 8014378:	6a03      	ldr	r3, [r0, #32]
 801437a:	b90b      	cbnz	r3, 8014380 <_vfiprintf_r+0x18>
 801437c:	f7fe f976 	bl	801266c <__sinit>
 8014380:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014382:	07d9      	lsls	r1, r3, #31
 8014384:	d405      	bmi.n	8014392 <_vfiprintf_r+0x2a>
 8014386:	89ab      	ldrh	r3, [r5, #12]
 8014388:	059a      	lsls	r2, r3, #22
 801438a:	d402      	bmi.n	8014392 <_vfiprintf_r+0x2a>
 801438c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801438e:	f7fe fad8 	bl	8012942 <__retarget_lock_acquire_recursive>
 8014392:	89ab      	ldrh	r3, [r5, #12]
 8014394:	071b      	lsls	r3, r3, #28
 8014396:	d501      	bpl.n	801439c <_vfiprintf_r+0x34>
 8014398:	692b      	ldr	r3, [r5, #16]
 801439a:	b99b      	cbnz	r3, 80143c4 <_vfiprintf_r+0x5c>
 801439c:	4629      	mov	r1, r5
 801439e:	4630      	mov	r0, r6
 80143a0:	f000 f938 	bl	8014614 <__swsetup_r>
 80143a4:	b170      	cbz	r0, 80143c4 <_vfiprintf_r+0x5c>
 80143a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80143a8:	07dc      	lsls	r4, r3, #31
 80143aa:	d504      	bpl.n	80143b6 <_vfiprintf_r+0x4e>
 80143ac:	f04f 30ff 	mov.w	r0, #4294967295
 80143b0:	b01d      	add	sp, #116	@ 0x74
 80143b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143b6:	89ab      	ldrh	r3, [r5, #12]
 80143b8:	0598      	lsls	r0, r3, #22
 80143ba:	d4f7      	bmi.n	80143ac <_vfiprintf_r+0x44>
 80143bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80143be:	f7fe fac1 	bl	8012944 <__retarget_lock_release_recursive>
 80143c2:	e7f3      	b.n	80143ac <_vfiprintf_r+0x44>
 80143c4:	2300      	movs	r3, #0
 80143c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80143c8:	2320      	movs	r3, #32
 80143ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80143ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80143d2:	2330      	movs	r3, #48	@ 0x30
 80143d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014584 <_vfiprintf_r+0x21c>
 80143d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80143dc:	f04f 0901 	mov.w	r9, #1
 80143e0:	4623      	mov	r3, r4
 80143e2:	469a      	mov	sl, r3
 80143e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80143e8:	b10a      	cbz	r2, 80143ee <_vfiprintf_r+0x86>
 80143ea:	2a25      	cmp	r2, #37	@ 0x25
 80143ec:	d1f9      	bne.n	80143e2 <_vfiprintf_r+0x7a>
 80143ee:	ebba 0b04 	subs.w	fp, sl, r4
 80143f2:	d00b      	beq.n	801440c <_vfiprintf_r+0xa4>
 80143f4:	465b      	mov	r3, fp
 80143f6:	4622      	mov	r2, r4
 80143f8:	4629      	mov	r1, r5
 80143fa:	4630      	mov	r0, r6
 80143fc:	f7ff ffa1 	bl	8014342 <__sfputs_r>
 8014400:	3001      	adds	r0, #1
 8014402:	f000 80a7 	beq.w	8014554 <_vfiprintf_r+0x1ec>
 8014406:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014408:	445a      	add	r2, fp
 801440a:	9209      	str	r2, [sp, #36]	@ 0x24
 801440c:	f89a 3000 	ldrb.w	r3, [sl]
 8014410:	2b00      	cmp	r3, #0
 8014412:	f000 809f 	beq.w	8014554 <_vfiprintf_r+0x1ec>
 8014416:	2300      	movs	r3, #0
 8014418:	f04f 32ff 	mov.w	r2, #4294967295
 801441c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014420:	f10a 0a01 	add.w	sl, sl, #1
 8014424:	9304      	str	r3, [sp, #16]
 8014426:	9307      	str	r3, [sp, #28]
 8014428:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801442c:	931a      	str	r3, [sp, #104]	@ 0x68
 801442e:	4654      	mov	r4, sl
 8014430:	2205      	movs	r2, #5
 8014432:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014436:	4853      	ldr	r0, [pc, #332]	@ (8014584 <_vfiprintf_r+0x21c>)
 8014438:	f7eb fed2 	bl	80001e0 <memchr>
 801443c:	9a04      	ldr	r2, [sp, #16]
 801443e:	b9d8      	cbnz	r0, 8014478 <_vfiprintf_r+0x110>
 8014440:	06d1      	lsls	r1, r2, #27
 8014442:	bf44      	itt	mi
 8014444:	2320      	movmi	r3, #32
 8014446:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801444a:	0713      	lsls	r3, r2, #28
 801444c:	bf44      	itt	mi
 801444e:	232b      	movmi	r3, #43	@ 0x2b
 8014450:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014454:	f89a 3000 	ldrb.w	r3, [sl]
 8014458:	2b2a      	cmp	r3, #42	@ 0x2a
 801445a:	d015      	beq.n	8014488 <_vfiprintf_r+0x120>
 801445c:	9a07      	ldr	r2, [sp, #28]
 801445e:	4654      	mov	r4, sl
 8014460:	2000      	movs	r0, #0
 8014462:	f04f 0c0a 	mov.w	ip, #10
 8014466:	4621      	mov	r1, r4
 8014468:	f811 3b01 	ldrb.w	r3, [r1], #1
 801446c:	3b30      	subs	r3, #48	@ 0x30
 801446e:	2b09      	cmp	r3, #9
 8014470:	d94b      	bls.n	801450a <_vfiprintf_r+0x1a2>
 8014472:	b1b0      	cbz	r0, 80144a2 <_vfiprintf_r+0x13a>
 8014474:	9207      	str	r2, [sp, #28]
 8014476:	e014      	b.n	80144a2 <_vfiprintf_r+0x13a>
 8014478:	eba0 0308 	sub.w	r3, r0, r8
 801447c:	fa09 f303 	lsl.w	r3, r9, r3
 8014480:	4313      	orrs	r3, r2
 8014482:	9304      	str	r3, [sp, #16]
 8014484:	46a2      	mov	sl, r4
 8014486:	e7d2      	b.n	801442e <_vfiprintf_r+0xc6>
 8014488:	9b03      	ldr	r3, [sp, #12]
 801448a:	1d19      	adds	r1, r3, #4
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	9103      	str	r1, [sp, #12]
 8014490:	2b00      	cmp	r3, #0
 8014492:	bfbb      	ittet	lt
 8014494:	425b      	neglt	r3, r3
 8014496:	f042 0202 	orrlt.w	r2, r2, #2
 801449a:	9307      	strge	r3, [sp, #28]
 801449c:	9307      	strlt	r3, [sp, #28]
 801449e:	bfb8      	it	lt
 80144a0:	9204      	strlt	r2, [sp, #16]
 80144a2:	7823      	ldrb	r3, [r4, #0]
 80144a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80144a6:	d10a      	bne.n	80144be <_vfiprintf_r+0x156>
 80144a8:	7863      	ldrb	r3, [r4, #1]
 80144aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80144ac:	d132      	bne.n	8014514 <_vfiprintf_r+0x1ac>
 80144ae:	9b03      	ldr	r3, [sp, #12]
 80144b0:	1d1a      	adds	r2, r3, #4
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	9203      	str	r2, [sp, #12]
 80144b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80144ba:	3402      	adds	r4, #2
 80144bc:	9305      	str	r3, [sp, #20]
 80144be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014594 <_vfiprintf_r+0x22c>
 80144c2:	7821      	ldrb	r1, [r4, #0]
 80144c4:	2203      	movs	r2, #3
 80144c6:	4650      	mov	r0, sl
 80144c8:	f7eb fe8a 	bl	80001e0 <memchr>
 80144cc:	b138      	cbz	r0, 80144de <_vfiprintf_r+0x176>
 80144ce:	9b04      	ldr	r3, [sp, #16]
 80144d0:	eba0 000a 	sub.w	r0, r0, sl
 80144d4:	2240      	movs	r2, #64	@ 0x40
 80144d6:	4082      	lsls	r2, r0
 80144d8:	4313      	orrs	r3, r2
 80144da:	3401      	adds	r4, #1
 80144dc:	9304      	str	r3, [sp, #16]
 80144de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144e2:	4829      	ldr	r0, [pc, #164]	@ (8014588 <_vfiprintf_r+0x220>)
 80144e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80144e8:	2206      	movs	r2, #6
 80144ea:	f7eb fe79 	bl	80001e0 <memchr>
 80144ee:	2800      	cmp	r0, #0
 80144f0:	d03f      	beq.n	8014572 <_vfiprintf_r+0x20a>
 80144f2:	4b26      	ldr	r3, [pc, #152]	@ (801458c <_vfiprintf_r+0x224>)
 80144f4:	bb1b      	cbnz	r3, 801453e <_vfiprintf_r+0x1d6>
 80144f6:	9b03      	ldr	r3, [sp, #12]
 80144f8:	3307      	adds	r3, #7
 80144fa:	f023 0307 	bic.w	r3, r3, #7
 80144fe:	3308      	adds	r3, #8
 8014500:	9303      	str	r3, [sp, #12]
 8014502:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014504:	443b      	add	r3, r7
 8014506:	9309      	str	r3, [sp, #36]	@ 0x24
 8014508:	e76a      	b.n	80143e0 <_vfiprintf_r+0x78>
 801450a:	fb0c 3202 	mla	r2, ip, r2, r3
 801450e:	460c      	mov	r4, r1
 8014510:	2001      	movs	r0, #1
 8014512:	e7a8      	b.n	8014466 <_vfiprintf_r+0xfe>
 8014514:	2300      	movs	r3, #0
 8014516:	3401      	adds	r4, #1
 8014518:	9305      	str	r3, [sp, #20]
 801451a:	4619      	mov	r1, r3
 801451c:	f04f 0c0a 	mov.w	ip, #10
 8014520:	4620      	mov	r0, r4
 8014522:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014526:	3a30      	subs	r2, #48	@ 0x30
 8014528:	2a09      	cmp	r2, #9
 801452a:	d903      	bls.n	8014534 <_vfiprintf_r+0x1cc>
 801452c:	2b00      	cmp	r3, #0
 801452e:	d0c6      	beq.n	80144be <_vfiprintf_r+0x156>
 8014530:	9105      	str	r1, [sp, #20]
 8014532:	e7c4      	b.n	80144be <_vfiprintf_r+0x156>
 8014534:	fb0c 2101 	mla	r1, ip, r1, r2
 8014538:	4604      	mov	r4, r0
 801453a:	2301      	movs	r3, #1
 801453c:	e7f0      	b.n	8014520 <_vfiprintf_r+0x1b8>
 801453e:	ab03      	add	r3, sp, #12
 8014540:	9300      	str	r3, [sp, #0]
 8014542:	462a      	mov	r2, r5
 8014544:	4b12      	ldr	r3, [pc, #72]	@ (8014590 <_vfiprintf_r+0x228>)
 8014546:	a904      	add	r1, sp, #16
 8014548:	4630      	mov	r0, r6
 801454a:	f7fd fc4b 	bl	8011de4 <_printf_float>
 801454e:	4607      	mov	r7, r0
 8014550:	1c78      	adds	r0, r7, #1
 8014552:	d1d6      	bne.n	8014502 <_vfiprintf_r+0x19a>
 8014554:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014556:	07d9      	lsls	r1, r3, #31
 8014558:	d405      	bmi.n	8014566 <_vfiprintf_r+0x1fe>
 801455a:	89ab      	ldrh	r3, [r5, #12]
 801455c:	059a      	lsls	r2, r3, #22
 801455e:	d402      	bmi.n	8014566 <_vfiprintf_r+0x1fe>
 8014560:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014562:	f7fe f9ef 	bl	8012944 <__retarget_lock_release_recursive>
 8014566:	89ab      	ldrh	r3, [r5, #12]
 8014568:	065b      	lsls	r3, r3, #25
 801456a:	f53f af1f 	bmi.w	80143ac <_vfiprintf_r+0x44>
 801456e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014570:	e71e      	b.n	80143b0 <_vfiprintf_r+0x48>
 8014572:	ab03      	add	r3, sp, #12
 8014574:	9300      	str	r3, [sp, #0]
 8014576:	462a      	mov	r2, r5
 8014578:	4b05      	ldr	r3, [pc, #20]	@ (8014590 <_vfiprintf_r+0x228>)
 801457a:	a904      	add	r1, sp, #16
 801457c:	4630      	mov	r0, r6
 801457e:	f7fd fec9 	bl	8012314 <_printf_i>
 8014582:	e7e4      	b.n	801454e <_vfiprintf_r+0x1e6>
 8014584:	08016478 	.word	0x08016478
 8014588:	08016482 	.word	0x08016482
 801458c:	08011de5 	.word	0x08011de5
 8014590:	08014343 	.word	0x08014343
 8014594:	0801647e 	.word	0x0801647e

08014598 <__swbuf_r>:
 8014598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801459a:	460e      	mov	r6, r1
 801459c:	4614      	mov	r4, r2
 801459e:	4605      	mov	r5, r0
 80145a0:	b118      	cbz	r0, 80145aa <__swbuf_r+0x12>
 80145a2:	6a03      	ldr	r3, [r0, #32]
 80145a4:	b90b      	cbnz	r3, 80145aa <__swbuf_r+0x12>
 80145a6:	f7fe f861 	bl	801266c <__sinit>
 80145aa:	69a3      	ldr	r3, [r4, #24]
 80145ac:	60a3      	str	r3, [r4, #8]
 80145ae:	89a3      	ldrh	r3, [r4, #12]
 80145b0:	071a      	lsls	r2, r3, #28
 80145b2:	d501      	bpl.n	80145b8 <__swbuf_r+0x20>
 80145b4:	6923      	ldr	r3, [r4, #16]
 80145b6:	b943      	cbnz	r3, 80145ca <__swbuf_r+0x32>
 80145b8:	4621      	mov	r1, r4
 80145ba:	4628      	mov	r0, r5
 80145bc:	f000 f82a 	bl	8014614 <__swsetup_r>
 80145c0:	b118      	cbz	r0, 80145ca <__swbuf_r+0x32>
 80145c2:	f04f 37ff 	mov.w	r7, #4294967295
 80145c6:	4638      	mov	r0, r7
 80145c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145ca:	6823      	ldr	r3, [r4, #0]
 80145cc:	6922      	ldr	r2, [r4, #16]
 80145ce:	1a98      	subs	r0, r3, r2
 80145d0:	6963      	ldr	r3, [r4, #20]
 80145d2:	b2f6      	uxtb	r6, r6
 80145d4:	4283      	cmp	r3, r0
 80145d6:	4637      	mov	r7, r6
 80145d8:	dc05      	bgt.n	80145e6 <__swbuf_r+0x4e>
 80145da:	4621      	mov	r1, r4
 80145dc:	4628      	mov	r0, r5
 80145de:	f7ff fdaf 	bl	8014140 <_fflush_r>
 80145e2:	2800      	cmp	r0, #0
 80145e4:	d1ed      	bne.n	80145c2 <__swbuf_r+0x2a>
 80145e6:	68a3      	ldr	r3, [r4, #8]
 80145e8:	3b01      	subs	r3, #1
 80145ea:	60a3      	str	r3, [r4, #8]
 80145ec:	6823      	ldr	r3, [r4, #0]
 80145ee:	1c5a      	adds	r2, r3, #1
 80145f0:	6022      	str	r2, [r4, #0]
 80145f2:	701e      	strb	r6, [r3, #0]
 80145f4:	6962      	ldr	r2, [r4, #20]
 80145f6:	1c43      	adds	r3, r0, #1
 80145f8:	429a      	cmp	r2, r3
 80145fa:	d004      	beq.n	8014606 <__swbuf_r+0x6e>
 80145fc:	89a3      	ldrh	r3, [r4, #12]
 80145fe:	07db      	lsls	r3, r3, #31
 8014600:	d5e1      	bpl.n	80145c6 <__swbuf_r+0x2e>
 8014602:	2e0a      	cmp	r6, #10
 8014604:	d1df      	bne.n	80145c6 <__swbuf_r+0x2e>
 8014606:	4621      	mov	r1, r4
 8014608:	4628      	mov	r0, r5
 801460a:	f7ff fd99 	bl	8014140 <_fflush_r>
 801460e:	2800      	cmp	r0, #0
 8014610:	d0d9      	beq.n	80145c6 <__swbuf_r+0x2e>
 8014612:	e7d6      	b.n	80145c2 <__swbuf_r+0x2a>

08014614 <__swsetup_r>:
 8014614:	b538      	push	{r3, r4, r5, lr}
 8014616:	4b29      	ldr	r3, [pc, #164]	@ (80146bc <__swsetup_r+0xa8>)
 8014618:	4605      	mov	r5, r0
 801461a:	6818      	ldr	r0, [r3, #0]
 801461c:	460c      	mov	r4, r1
 801461e:	b118      	cbz	r0, 8014628 <__swsetup_r+0x14>
 8014620:	6a03      	ldr	r3, [r0, #32]
 8014622:	b90b      	cbnz	r3, 8014628 <__swsetup_r+0x14>
 8014624:	f7fe f822 	bl	801266c <__sinit>
 8014628:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801462c:	0719      	lsls	r1, r3, #28
 801462e:	d422      	bmi.n	8014676 <__swsetup_r+0x62>
 8014630:	06da      	lsls	r2, r3, #27
 8014632:	d407      	bmi.n	8014644 <__swsetup_r+0x30>
 8014634:	2209      	movs	r2, #9
 8014636:	602a      	str	r2, [r5, #0]
 8014638:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801463c:	81a3      	strh	r3, [r4, #12]
 801463e:	f04f 30ff 	mov.w	r0, #4294967295
 8014642:	e033      	b.n	80146ac <__swsetup_r+0x98>
 8014644:	0758      	lsls	r0, r3, #29
 8014646:	d512      	bpl.n	801466e <__swsetup_r+0x5a>
 8014648:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801464a:	b141      	cbz	r1, 801465e <__swsetup_r+0x4a>
 801464c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014650:	4299      	cmp	r1, r3
 8014652:	d002      	beq.n	801465a <__swsetup_r+0x46>
 8014654:	4628      	mov	r0, r5
 8014656:	f7fe ffcb 	bl	80135f0 <_free_r>
 801465a:	2300      	movs	r3, #0
 801465c:	6363      	str	r3, [r4, #52]	@ 0x34
 801465e:	89a3      	ldrh	r3, [r4, #12]
 8014660:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014664:	81a3      	strh	r3, [r4, #12]
 8014666:	2300      	movs	r3, #0
 8014668:	6063      	str	r3, [r4, #4]
 801466a:	6923      	ldr	r3, [r4, #16]
 801466c:	6023      	str	r3, [r4, #0]
 801466e:	89a3      	ldrh	r3, [r4, #12]
 8014670:	f043 0308 	orr.w	r3, r3, #8
 8014674:	81a3      	strh	r3, [r4, #12]
 8014676:	6923      	ldr	r3, [r4, #16]
 8014678:	b94b      	cbnz	r3, 801468e <__swsetup_r+0x7a>
 801467a:	89a3      	ldrh	r3, [r4, #12]
 801467c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014680:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014684:	d003      	beq.n	801468e <__swsetup_r+0x7a>
 8014686:	4621      	mov	r1, r4
 8014688:	4628      	mov	r0, r5
 801468a:	f000 f83f 	bl	801470c <__smakebuf_r>
 801468e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014692:	f013 0201 	ands.w	r2, r3, #1
 8014696:	d00a      	beq.n	80146ae <__swsetup_r+0x9a>
 8014698:	2200      	movs	r2, #0
 801469a:	60a2      	str	r2, [r4, #8]
 801469c:	6962      	ldr	r2, [r4, #20]
 801469e:	4252      	negs	r2, r2
 80146a0:	61a2      	str	r2, [r4, #24]
 80146a2:	6922      	ldr	r2, [r4, #16]
 80146a4:	b942      	cbnz	r2, 80146b8 <__swsetup_r+0xa4>
 80146a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80146aa:	d1c5      	bne.n	8014638 <__swsetup_r+0x24>
 80146ac:	bd38      	pop	{r3, r4, r5, pc}
 80146ae:	0799      	lsls	r1, r3, #30
 80146b0:	bf58      	it	pl
 80146b2:	6962      	ldrpl	r2, [r4, #20]
 80146b4:	60a2      	str	r2, [r4, #8]
 80146b6:	e7f4      	b.n	80146a2 <__swsetup_r+0x8e>
 80146b8:	2000      	movs	r0, #0
 80146ba:	e7f7      	b.n	80146ac <__swsetup_r+0x98>
 80146bc:	20000020 	.word	0x20000020

080146c0 <__swhatbuf_r>:
 80146c0:	b570      	push	{r4, r5, r6, lr}
 80146c2:	460c      	mov	r4, r1
 80146c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146c8:	2900      	cmp	r1, #0
 80146ca:	b096      	sub	sp, #88	@ 0x58
 80146cc:	4615      	mov	r5, r2
 80146ce:	461e      	mov	r6, r3
 80146d0:	da0d      	bge.n	80146ee <__swhatbuf_r+0x2e>
 80146d2:	89a3      	ldrh	r3, [r4, #12]
 80146d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80146d8:	f04f 0100 	mov.w	r1, #0
 80146dc:	bf14      	ite	ne
 80146de:	2340      	movne	r3, #64	@ 0x40
 80146e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80146e4:	2000      	movs	r0, #0
 80146e6:	6031      	str	r1, [r6, #0]
 80146e8:	602b      	str	r3, [r5, #0]
 80146ea:	b016      	add	sp, #88	@ 0x58
 80146ec:	bd70      	pop	{r4, r5, r6, pc}
 80146ee:	466a      	mov	r2, sp
 80146f0:	f000 f848 	bl	8014784 <_fstat_r>
 80146f4:	2800      	cmp	r0, #0
 80146f6:	dbec      	blt.n	80146d2 <__swhatbuf_r+0x12>
 80146f8:	9901      	ldr	r1, [sp, #4]
 80146fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80146fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014702:	4259      	negs	r1, r3
 8014704:	4159      	adcs	r1, r3
 8014706:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801470a:	e7eb      	b.n	80146e4 <__swhatbuf_r+0x24>

0801470c <__smakebuf_r>:
 801470c:	898b      	ldrh	r3, [r1, #12]
 801470e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014710:	079d      	lsls	r5, r3, #30
 8014712:	4606      	mov	r6, r0
 8014714:	460c      	mov	r4, r1
 8014716:	d507      	bpl.n	8014728 <__smakebuf_r+0x1c>
 8014718:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801471c:	6023      	str	r3, [r4, #0]
 801471e:	6123      	str	r3, [r4, #16]
 8014720:	2301      	movs	r3, #1
 8014722:	6163      	str	r3, [r4, #20]
 8014724:	b003      	add	sp, #12
 8014726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014728:	ab01      	add	r3, sp, #4
 801472a:	466a      	mov	r2, sp
 801472c:	f7ff ffc8 	bl	80146c0 <__swhatbuf_r>
 8014730:	9f00      	ldr	r7, [sp, #0]
 8014732:	4605      	mov	r5, r0
 8014734:	4639      	mov	r1, r7
 8014736:	4630      	mov	r0, r6
 8014738:	f7fd fa28 	bl	8011b8c <_malloc_r>
 801473c:	b948      	cbnz	r0, 8014752 <__smakebuf_r+0x46>
 801473e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014742:	059a      	lsls	r2, r3, #22
 8014744:	d4ee      	bmi.n	8014724 <__smakebuf_r+0x18>
 8014746:	f023 0303 	bic.w	r3, r3, #3
 801474a:	f043 0302 	orr.w	r3, r3, #2
 801474e:	81a3      	strh	r3, [r4, #12]
 8014750:	e7e2      	b.n	8014718 <__smakebuf_r+0xc>
 8014752:	89a3      	ldrh	r3, [r4, #12]
 8014754:	6020      	str	r0, [r4, #0]
 8014756:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801475a:	81a3      	strh	r3, [r4, #12]
 801475c:	9b01      	ldr	r3, [sp, #4]
 801475e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014762:	b15b      	cbz	r3, 801477c <__smakebuf_r+0x70>
 8014764:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014768:	4630      	mov	r0, r6
 801476a:	f000 f81d 	bl	80147a8 <_isatty_r>
 801476e:	b128      	cbz	r0, 801477c <__smakebuf_r+0x70>
 8014770:	89a3      	ldrh	r3, [r4, #12]
 8014772:	f023 0303 	bic.w	r3, r3, #3
 8014776:	f043 0301 	orr.w	r3, r3, #1
 801477a:	81a3      	strh	r3, [r4, #12]
 801477c:	89a3      	ldrh	r3, [r4, #12]
 801477e:	431d      	orrs	r5, r3
 8014780:	81a5      	strh	r5, [r4, #12]
 8014782:	e7cf      	b.n	8014724 <__smakebuf_r+0x18>

08014784 <_fstat_r>:
 8014784:	b538      	push	{r3, r4, r5, lr}
 8014786:	4d07      	ldr	r5, [pc, #28]	@ (80147a4 <_fstat_r+0x20>)
 8014788:	2300      	movs	r3, #0
 801478a:	4604      	mov	r4, r0
 801478c:	4608      	mov	r0, r1
 801478e:	4611      	mov	r1, r2
 8014790:	602b      	str	r3, [r5, #0]
 8014792:	f7f8 ff75 	bl	800d680 <_fstat>
 8014796:	1c43      	adds	r3, r0, #1
 8014798:	d102      	bne.n	80147a0 <_fstat_r+0x1c>
 801479a:	682b      	ldr	r3, [r5, #0]
 801479c:	b103      	cbz	r3, 80147a0 <_fstat_r+0x1c>
 801479e:	6023      	str	r3, [r4, #0]
 80147a0:	bd38      	pop	{r3, r4, r5, pc}
 80147a2:	bf00      	nop
 80147a4:	20000710 	.word	0x20000710

080147a8 <_isatty_r>:
 80147a8:	b538      	push	{r3, r4, r5, lr}
 80147aa:	4d06      	ldr	r5, [pc, #24]	@ (80147c4 <_isatty_r+0x1c>)
 80147ac:	2300      	movs	r3, #0
 80147ae:	4604      	mov	r4, r0
 80147b0:	4608      	mov	r0, r1
 80147b2:	602b      	str	r3, [r5, #0]
 80147b4:	f7f8 ff74 	bl	800d6a0 <_isatty>
 80147b8:	1c43      	adds	r3, r0, #1
 80147ba:	d102      	bne.n	80147c2 <_isatty_r+0x1a>
 80147bc:	682b      	ldr	r3, [r5, #0]
 80147be:	b103      	cbz	r3, 80147c2 <_isatty_r+0x1a>
 80147c0:	6023      	str	r3, [r4, #0]
 80147c2:	bd38      	pop	{r3, r4, r5, pc}
 80147c4:	20000710 	.word	0x20000710

080147c8 <_init>:
 80147c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147ca:	bf00      	nop
 80147cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80147ce:	bc08      	pop	{r3}
 80147d0:	469e      	mov	lr, r3
 80147d2:	4770      	bx	lr

080147d4 <_fini>:
 80147d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147d6:	bf00      	nop
 80147d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80147da:	bc08      	pop	{r3}
 80147dc:	469e      	mov	lr, r3
 80147de:	4770      	bx	lr

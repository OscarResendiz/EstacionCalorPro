
EstacionAireProM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eae0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f10  0800ec80  0800ec80  0000fc80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb90  0800fb90  000111d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb90  0800fb90  00010b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb98  0800fb98  000111d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800fb98  0800fb98  00010b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800fba0  0800fba0  00010ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800fba8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000414  200001d8  0800fd80  000111d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005ec  0800fd80  000115ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000111d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028b98  00000000  00000000  00011208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000081c7  00000000  00000000  00039da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002328  00000000  00000000  00041f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001aab  00000000  00000000  00044290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002156d  00000000  00000000  00045d3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ba21  00000000  00000000  000672a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a967d  00000000  00000000  00092cc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013c346  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a12c  00000000  00000000  0013c38c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001464b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ec68 	.word	0x0800ec68

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800ec68 	.word	0x0800ec68

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <_ZN15CManejadorBotonC1Ev>:

#include "Boton/CManejadorBoton.hpp"
#include "Constantes.hpp"
#include "Uart/Uart.hpp"

CManejadorBoton::CManejadorBoton()
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	4a0c      	ldr	r2, [pc, #48]	@ (8000ee4 <_ZN15CManejadorBotonC1Ev+0x3c>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2201      	movs	r2, #1
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	611a      	str	r2, [r3, #16]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	615a      	str	r2, [r3, #20]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	619a      	str	r2, [r3, #24]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	61da      	str	r2, [r3, #28]
{
	// TODO Auto-generated constructor stub

}
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	0800ee24 	.word	0x0800ee24

08000ee8 <_ZN15CManejadorBotonD1Ev>:

CManejadorBoton::~CManejadorBoton()
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	4a04      	ldr	r2, [pc, #16]	@ (8000f04 <_ZN15CManejadorBotonD1Ev+0x1c>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	0800ee24 	.word	0x0800ee24

08000f08 <_ZN15CManejadorBotonD0Ev>:
CManejadorBoton::~CManejadorBoton()
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
}
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff ffe9 	bl	8000ee8 <_ZN15CManejadorBotonD1Ev>
 8000f16:	2120      	movs	r1, #32
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f00b f82d 	bl	800bf78 <_ZdlPvj>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>:

void CManejadorBoton::Configurar(GPIO_TypeDef *puerto, uint16_t pin,uint8_t identificador)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	4611      	mov	r1, r2
 8000f34:	461a      	mov	r2, r3
 8000f36:	460b      	mov	r3, r1
 8000f38:	80fb      	strh	r3, [r7, #6]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	717b      	strb	r3, [r7, #5]
	GPIO_Port = puerto;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	68ba      	ldr	r2, [r7, #8]
 8000f42:	605a      	str	r2, [r3, #4]
	Gpio_Pin = pin;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	88fa      	ldrh	r2, [r7, #6]
 8000f48:	811a      	strh	r2, [r3, #8]
	Identificador = identificador;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	797a      	ldrb	r2, [r7, #5]
 8000f4e:	729a      	strb	r2, [r3, #10]
}
 8000f50:	bf00      	nop
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <_ZN15CManejadorBoton4InitEv>:
void CManejadorBoton::Init()
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
	{ 0 };
	GPIO_InitStruct.Pin = Gpio_Pin;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	891b      	ldrh	r3, [r3, #8]
 8000f78:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f107 020c 	add.w	r2, r7, #12
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f007 fb3b 	bl	8008608 <HAL_GPIO_Init>
}
 8000f92:	bf00      	nop
 8000f94:	3720      	adds	r7, #32
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <_ZN15CManejadorBoton4LeerEv>:
int CManejadorBoton::Leer()
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(GPIO_Port, Gpio_Pin); // lee el pin
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685a      	ldr	r2, [r3, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	891b      	ldrh	r3, [r3, #8]
 8000faa:	4619      	mov	r1, r3
 8000fac:	4610      	mov	r0, r2
 8000fae:	f007 fcaf 	bl	8008910 <HAL_GPIO_ReadPin>
 8000fb2:	4603      	mov	r3, r0

}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>:
void CManejadorBoton::AsignaManejadorEventos(CManejadorEventosBoton *manejador)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
	Manejador = manejador;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	683a      	ldr	r2, [r7, #0]
 8000fca:	61da      	str	r2, [r3, #28]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <_ZN15CManejadorBoton7ProcesaEi>:
void CManejadorBoton::Procesa(int gpio_pin)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
	if (Manejador == NULL)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d02e      	beq.n	8001048 <_ZN15CManejadorBoton7ProcesaEi+0x70>
		return;
	if(gpio_pin!=Gpio_Pin)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	891b      	ldrh	r3, [r3, #8]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d12a      	bne.n	800104c <_ZN15CManejadorBoton7ProcesaEi+0x74>
		return;
	int estado = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
	estado = Leer();
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff ffcd 	bl	8000f9a <_ZN15CManejadorBoton4LeerEv>
 8001000:	60f8      	str	r0, [r7, #12]
	//leo el tiempo actual
	int tiempo = HAL_GetTick();
 8001002:	f006 fe8b 	bl	8007d1c <HAL_GetTick>
 8001006:	4603      	mov	r3, r0
 8001008:	60bb      	str	r3, [r7, #8]
	if ((tiempo - ReboteMilis) < TIEMPO_REBOTE)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b63      	cmp	r3, #99	@ 0x63
 8001014:	dd1c      	ble.n	8001050 <_ZN15CManejadorBoton7ProcesaEi+0x78>
	{
		//como todavia no pasa el tiempo de espera para evitar rebotes no hago nada
		return;
	}
	ReboteMilis = HAL_GetTick();  //leo el tiempo actual
 8001016:	f006 fe81 	bl	8007d1c <HAL_GetTick>
 800101a:	4603      	mov	r3, r0
 800101c:	461a      	mov	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	615a      	str	r2, [r3, #20]

	//ya filtre los rebotes, por lo que ahora si informo del cambio de estado del boton
	Estado = estado;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	60da      	str	r2, [r3, #12]
	if (Estado == BOTON_SUELTO)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d110      	bne.n	8001052 <_ZN15CManejadorBoton7ProcesaEi+0x7a>
	{
		Manejador->OnBotonClickEvent(Identificador);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	69d8      	ldr	r0, [r3, #28]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	69db      	ldr	r3, [r3, #28]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	3308      	adds	r3, #8
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	7a92      	ldrb	r2, [r2, #10]
 8001042:	4611      	mov	r1, r2
 8001044:	4798      	blx	r3
 8001046:	e004      	b.n	8001052 <_ZN15CManejadorBoton7ProcesaEi+0x7a>
		return;
 8001048:	bf00      	nop
 800104a:	e002      	b.n	8001052 <_ZN15CManejadorBoton7ProcesaEi+0x7a>
		return;
 800104c:	bf00      	nop
 800104e:	e000      	b.n	8001052 <_ZN15CManejadorBoton7ProcesaEi+0x7a>
		return;
 8001050:	bf00      	nop
	}
}
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <_ZN22CManejadorEventosBotonC1Ev>:
 *      Author: W10
 */

#include "Boton/CManejadorEventosBoton.hpp"

CManejadorEventosBoton::CManejadorEventosBoton()
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	4a04      	ldr	r2, [pc, #16]	@ (8001074 <_ZN22CManejadorEventosBotonC1Ev+0x1c>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4618      	mov	r0, r3
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	0800ee34 	.word	0x0800ee34

08001078 <_ZN22CManejadorEventosBotonD1Ev>:

CManejadorEventosBoton::~CManejadorEventosBoton()
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	4a04      	ldr	r2, [pc, #16]	@ (8001094 <_ZN22CManejadorEventosBotonD1Ev+0x1c>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4618      	mov	r0, r3
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	0800ee34 	.word	0x0800ee34

08001098 <_ZN22CManejadorEventosBotonD0Ev>:
CManejadorEventosBoton::~CManejadorEventosBoton()
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
}
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ffe9 	bl	8001078 <_ZN22CManejadorEventosBotonD1Ev>
 80010a6:	2104      	movs	r1, #4
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f00a ff65 	bl	800bf78 <_ZdlPvj>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <_ZN22CManejadorEventosBoton17OnBotonClickEventEi>:

void CManejadorEventosBoton::OnBotonClickEvent(int idBoton)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]

}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <_ZN10CalefactorC1Ev>:
		SerialPrintf("\r\nTemperatura: %d intento = %d",temperatura,n);
		HAL_Delay(100);
	}
}
*/
Calefactor::Calefactor()
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	4a06      	ldr	r2, [pc, #24]	@ (80010f4 <_ZN10CalefactorC1Ev+0x24>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	60da      	str	r2, [r3, #12]
{
	// TODO Auto-generated constructor stub

}
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	0800ee48 	.word	0x0800ee48

080010f8 <_ZN10CalefactorD1Ev>:

Calefactor::~Calefactor()
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	4a04      	ldr	r2, [pc, #16]	@ (8001114 <_ZN10CalefactorD1Ev+0x1c>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	0800ee48 	.word	0x0800ee48

08001118 <_ZN10CalefactorD0Ev>:
Calefactor::~Calefactor()
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
}
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ffe9 	bl	80010f8 <_ZN10CalefactorD1Ev>
 8001126:	2110      	movs	r1, #16
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f00a ff25 	bl	800bf78 <_ZdlPvj>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <_ZN10Calefactor10ConfigurarEP12GPIO_TypeDeft>:

void Calefactor::Configurar(GPIO_TypeDef *puerto, uint16_t pin)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	4613      	mov	r3, r2
 8001144:	80fb      	strh	r3, [r7, #6]
	GPIO_Port = puerto;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	68ba      	ldr	r2, [r7, #8]
 800114a:	605a      	str	r2, [r3, #4]
	Gpio_Pin = pin;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	88fa      	ldrh	r2, [r7, #6]
 8001150:	811a      	strh	r2, [r3, #8]

}
 8001152:	bf00      	nop
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <_ZN10Calefactor4InitEv>:
void Calefactor::Init()
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b088      	sub	sp, #32
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =	{ 0 };
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
 8001174:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = Gpio_Pin;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	891b      	ldrh	r3, [r3, #8]
 800117a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117c:	2301      	movs	r3, #1
 800117e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f107 020c 	add.w	r2, r7, #12
 8001190:	4611      	mov	r1, r2
 8001192:	4618      	mov	r0, r3
 8001194:	f007 fa38 	bl	8008608 <HAL_GPIO_Init>
	Apagar();
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f000 f817 	bl	80011cc <_ZN10Calefactor6ApagarEv>
//	PruebaTempratura(0);
}
 800119e:	bf00      	nop
 80011a0:	3720      	adds	r7, #32
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <_ZN10Calefactor8EncenderEv>:
void Calefactor::Encender()
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO_Port, Gpio_Pin,	GPIO_PinState::GPIO_PIN_SET);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6858      	ldr	r0, [r3, #4]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	891b      	ldrh	r3, [r3, #8]
 80011b6:	2201      	movs	r2, #1
 80011b8:	4619      	mov	r1, r3
 80011ba:	f007 fbc1 	bl	8008940 <HAL_GPIO_WritePin>
	Estado=ENCENDIDO;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2201      	movs	r2, #1
 80011c2:	60da      	str	r2, [r3, #12]
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <_ZN10Calefactor6ApagarEv>:
void Calefactor::Apagar()
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO_Port, Gpio_Pin,	GPIO_PinState::GPIO_PIN_RESET);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6858      	ldr	r0, [r3, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	891b      	ldrh	r3, [r3, #8]
 80011dc:	2200      	movs	r2, #0
 80011de:	4619      	mov	r1, r3
 80011e0:	f007 fbae 	bl	8008940 <HAL_GPIO_WritePin>
	Estado=APAGADO;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <_ZN20ControlVelocidadAireC1Ev>:

#include "ControlVelocidadAire.hpp"
#include "stm32f4xx.h"
//#include "stm32f1xx_hal_adc.h"

ControlVelocidadAire::ControlVelocidadAire()
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	4a04      	ldr	r2, [pc, #16]	@ (8001210 <_ZN20ControlVelocidadAireC1Ev+0x1c>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4618      	mov	r0, r3
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	0800ee58 	.word	0x0800ee58

08001214 <_ZN20ControlVelocidadAireD1Ev>:

ControlVelocidadAire::~ControlVelocidadAire()
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	4a04      	ldr	r2, [pc, #16]	@ (8001230 <_ZN20ControlVelocidadAireD1Ev+0x1c>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4618      	mov	r0, r3
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	0800ee58 	.word	0x0800ee58

08001234 <_ZN20ControlVelocidadAireD0Ev>:
ControlVelocidadAire::~ControlVelocidadAire()
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
}
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ffe9 	bl	8001214 <_ZN20ControlVelocidadAireD1Ev>
 8001242:	214c      	movs	r1, #76	@ 0x4c
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f00a fe97 	bl	800bf78 <_ZdlPvj>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <_ZN20ControlVelocidadAire10InicializaEv>:

void ControlVelocidadAire::Inicializa()
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	4b36      	ldr	r3, [pc, #216]	@ (800133c <_ZN20ControlVelocidadAire10InicializaEv+0xe8>)
 8001262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001264:	4a35      	ldr	r2, [pc, #212]	@ (800133c <_ZN20ControlVelocidadAire10InicializaEv+0xe8>)
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	6313      	str	r3, [r2, #48]	@ 0x30
 800126c:	4b33      	ldr	r3, [pc, #204]	@ (800133c <_ZN20ControlVelocidadAire10InicializaEv+0xe8>)
 800126e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	68fb      	ldr	r3, [r7, #12]
	 ADC_ChannelConfTypeDef sConfig = {0};
 8001278:	f107 0310 	add.w	r3, r7, #16
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
	 hadc1.Instance = ADC1;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a2d      	ldr	r2, [pc, #180]	@ (8001340 <_ZN20ControlVelocidadAire10InicializaEv+0xec>)
 800128a:	605a      	str	r2, [r3, #4]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2; //NUEVO
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B; //nuevo
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	60da      	str	r2, [r3, #12]

	 hadc1.Init.ScanConvMode =  DISABLE;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	615a      	str	r2, [r3, #20]
	 hadc1.Init.ContinuousConvMode = ENABLE;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2201      	movs	r2, #1
 80012a2:	771a      	strb	r2, [r3, #28]
	 hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	 hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;//nuevo
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	631a      	str	r2, [r3, #48]	@ 0x30
	 hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a23      	ldr	r2, [pc, #140]	@ (8001344 <_ZN20ControlVelocidadAire10InicializaEv+0xf0>)
 80012b6:	62da      	str	r2, [r3, #44]	@ 0x2c
	 hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
	 hadc1.State=	 HAL_ADC_STATE_RESET;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	645a      	str	r2, [r3, #68]	@ 0x44
	 hadc1.Init.NbrOfConversion = 1;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2201      	movs	r2, #1
 80012c8:	621a      	str	r2, [r3, #32]
	  hadc1.Init.DMAContinuousRequests = DISABLE; //nuevo
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2201      	movs	r2, #1
 80012d6:	619a      	str	r2, [r3, #24]

	 if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3304      	adds	r3, #4
 80012dc:	4618      	mov	r0, r3
 80012de:	f006 fd4d 	bl	8007d7c <HAL_ADC_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	bf14      	ite	ne
 80012e8:	2301      	movne	r3, #1
 80012ea:	2300      	moveq	r3, #0
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d002      	beq.n	80012f8 <_ZN20ControlVelocidadAire10InicializaEv+0xa4>
	 {
	 Error_Handler();
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f000 f84a 	bl	800138c <_ZN20ControlVelocidadAire13Error_HandlerEv>
	 }

	 sConfig.Channel = ADC_CHANNEL_3;
 80012f8:	2303      	movs	r3, #3
 80012fa:	613b      	str	r3, [r7, #16]
	 sConfig.Rank =1; // ADC_REGULAR_RANK_1;
 80012fc:	2301      	movs	r3, #1
 80012fe:	617b      	str	r3, [r7, #20]
	 sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES; //ADC_SAMPLETIME_239CYCLES_5;
 8001300:	2300      	movs	r3, #0
 8001302:	61bb      	str	r3, [r7, #24]
	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3304      	adds	r3, #4
 8001308:	f107 0210 	add.w	r2, r7, #16
 800130c:	4611      	mov	r1, r2
 800130e:	4618      	mov	r0, r3
 8001310:	f006 fe3a 	bl	8007f88 <HAL_ADC_ConfigChannel>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	bf14      	ite	ne
 800131a:	2301      	movne	r3, #1
 800131c:	2300      	moveq	r3, #0
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b00      	cmp	r3, #0
 8001322:	d002      	beq.n	800132a <_ZN20ControlVelocidadAire10InicializaEv+0xd6>
	 {
	 Error_Handler();
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f000 f831 	bl	800138c <_ZN20ControlVelocidadAire13Error_HandlerEv>
	 }
	 HAL_ADC_Start(&hadc1);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3304      	adds	r3, #4
 800132e:	4618      	mov	r0, r3
 8001330:	f006 fd68 	bl	8007e04 <HAL_ADC_Start>
}
 8001334:	bf00      	nop
 8001336:	3720      	adds	r7, #32
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40023800 	.word	0x40023800
 8001340:	40012000 	.word	0x40012000
 8001344:	0f000001 	.word	0x0f000001

08001348 <_ZN20ControlVelocidadAire12LeeVelocidadEv>:
int ControlVelocidadAire::LeeVelocidad()
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(&hadc1);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3304      	adds	r3, #4
 8001354:	4618      	mov	r0, r3
 8001356:	f006 fd55 	bl	8007e04 <HAL_ADC_Start>
	int valor=HAL_ADC_GetValue(&hadc1);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	3304      	adds	r3, #4
 800135e:	4618      	mov	r0, r3
 8001360:	f006 fe04 	bl	8007f6c <HAL_ADC_GetValue>
 8001364:	4603      	mov	r3, r0
 8001366:	60fb      	str	r3, [r7, #12]
	//4095->100
	//valor->X
	//x=valor*100/4095
	return 	100-(int)(valor*100/4095);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2264      	movs	r2, #100	@ 0x64
 800136c:	fb02 f303 	mul.w	r3, r2, r3
 8001370:	4a05      	ldr	r2, [pc, #20]	@ (8001388 <_ZN20ControlVelocidadAire12LeeVelocidadEv+0x40>)
 8001372:	fb82 1203 	smull	r1, r2, r2, r3
 8001376:	441a      	add	r2, r3
 8001378:	12d2      	asrs	r2, r2, #11
 800137a:	17db      	asrs	r3, r3, #31
 800137c:	1a9b      	subs	r3, r3, r2
 800137e:	3364      	adds	r3, #100	@ 0x64
}
 8001380:	4618      	mov	r0, r3
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	80080081 	.word	0x80080081

0800138c <_ZN20ControlVelocidadAire13Error_HandlerEv>:
void ControlVelocidadAire::Error_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]

}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <_ZN8CEncoderC1Ev>:
 *      Author: W10
 */

#include "Encoder/CEncoder.hpp"

CEncoder::CEncoder()
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fe54 	bl	8001058 <_ZN22CManejadorEventosBotonC1Ev>
 80013b0:	4a0c      	ldr	r2, [pc, #48]	@ (80013e4 <_ZN8CEncoderC1Ev+0x44>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	639a      	str	r2, [r3, #56]	@ 0x38
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	63da      	str	r2, [r3, #60]	@ 0x3c
{
	// TODO Auto-generated constructor stub

}
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4618      	mov	r0, r3
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	0800ee68 	.word	0x0800ee68

080013e8 <_ZN8CEncoderD1Ev>:

CEncoder::~CEncoder()
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	4a05      	ldr	r2, [pc, #20]	@ (8001408 <_ZN8CEncoderD1Ev+0x20>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fe3d 	bl	8001078 <_ZN22CManejadorEventosBotonD1Ev>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4618      	mov	r0, r3
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	0800ee68 	.word	0x0800ee68

0800140c <_ZN8CEncoderD0Ev>:
CEncoder::~CEncoder()
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
}
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ffe7 	bl	80013e8 <_ZN8CEncoderD1Ev>
 800141a:	214c      	movs	r1, #76	@ 0x4c
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f00a fdab 	bl	800bf78 <_ZdlPvj>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4618      	mov	r0, r3
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <_ZN8CEncoder10ConfigurarEP12GPIO_TypeDeftS1_tS1_ti>:

void CEncoder::Configurar(GPIO_TypeDef *clk_Port, uint16_t pinClk,GPIO_TypeDef *dt_Port, uint16_t pinDt, GPIO_TypeDef *boton_Port,uint16_t pinBoton, int id_Encoder)
{
 800142c:	b590      	push	{r4, r7, lr}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	4613      	mov	r3, r2
 800143a:	80fb      	strh	r3, [r7, #6]
	Clk_Port = clk_Port;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	605a      	str	r2, [r3, #4]
	PinClk = pinClk;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	88fa      	ldrh	r2, [r7, #6]
 8001446:	811a      	strh	r2, [r3, #8]

	Dt_Port = dt_Port;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	60da      	str	r2, [r3, #12]
	PinDt = pinDt;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	8c3a      	ldrh	r2, [r7, #32]
 8001452:	821a      	strh	r2, [r3, #16]

	Boton_Port = boton_Port;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001458:	615a      	str	r2, [r3, #20]
	PinBoton = pinBoton;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800145e:	831a      	strh	r2, [r3, #24]

	ID_Encoder = id_Encoder;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001464:	625a      	str	r2, [r3, #36]	@ 0x24
	Boton = new CManejadorBoton();
 8001466:	2020      	movs	r0, #32
 8001468:	f00a fd88 	bl	800bf7c <_Znwj>
 800146c:	4603      	mov	r3, r0
 800146e:	461c      	mov	r4, r3
 8001470:	4620      	mov	r0, r4
 8001472:	f7ff fd19 	bl	8000ea8 <_ZN15CManejadorBotonC1Ev>
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	61dc      	str	r4, [r3, #28]
	Boton->AsignaManejadorEventos(this);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	4611      	mov	r1, r2
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fd9a 	bl	8000fbc <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	Boton->Configurar(Boton_Port, PinBoton, ID_BOTON);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	69d8      	ldr	r0, [r3, #28]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6959      	ldr	r1, [r3, #20]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	8b1a      	ldrh	r2, [r3, #24]
 8001494:	2303      	movs	r3, #3
 8001496:	f7ff fd47 	bl	8000f28 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	CLK_statusAnterior = LeeClk();
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f000 f807 	bl	80014ae <_ZN8CEncoder6LeeClkEv>
 80014a0:	4602      	mov	r2, r0
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	641a      	str	r2, [r3, #64]	@ 0x40

}
 80014a6:	bf00      	nop
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd90      	pop	{r4, r7, pc}

080014ae <_ZN8CEncoder6LeeClkEv>:

int CEncoder::LeeClk()
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(Clk_Port, PinClk);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	891b      	ldrh	r3, [r3, #8]
 80014be:	4619      	mov	r1, r3
 80014c0:	4610      	mov	r0, r2
 80014c2:	f007 fa25 	bl	8008910 <HAL_GPIO_ReadPin>
 80014c6:	4603      	mov	r3, r0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <_ZN8CEncoder5LeeDtEv>:
int CEncoder::LeeDt()
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(Dt_Port, PinDt);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68da      	ldr	r2, [r3, #12]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	8a1b      	ldrh	r3, [r3, #16]
 80014e0:	4619      	mov	r1, r3
 80014e2:	4610      	mov	r0, r2
 80014e4:	f007 fa14 	bl	8008910 <HAL_GPIO_ReadPin>
 80014e8:	4603      	mov	r3, r0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <_ZN8CEncoder4InitEv>:

void CEncoder::Init()
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b088      	sub	sp, #32
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 80014fa:	f107 030c 	add.w	r3, r7, #12
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
 8001508:	611a      	str	r2, [r3, #16]
	{ 0 };
	// CKL
	GPIO_InitStruct.Pin = PinClk;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	891b      	ldrh	r3, [r3, #8]
 800150e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode =GPIO_MODE_IT_RISING_FALLING;
 8001510:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001514:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(Clk_Port, &GPIO_InitStruct);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f107 020c 	add.w	r2, r7, #12
 8001522:	4611      	mov	r1, r2
 8001524:	4618      	mov	r0, r3
 8001526:	f007 f86f 	bl	8008608 <HAL_GPIO_Init>
	//DT
	GPIO_InitStruct.Pin = PinDt;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	8a1b      	ldrh	r3, [r3, #16]
 800152e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001530:	2300      	movs	r3, #0
 8001532:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(Dt_Port, &GPIO_InitStruct);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	f107 020c 	add.w	r2, r7, #12
 8001540:	4611      	mov	r1, r2
 8001542:	4618      	mov	r0, r3
 8001544:	f007 f860 	bl	8008608 <HAL_GPIO_Init>
	//Boton
	GPIO_InitStruct.Pin = PinBoton;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	8b1b      	ldrh	r3, [r3, #24]
 800154c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(Boton_Port, &GPIO_InitStruct);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	f107 020c 	add.w	r2, r7, #12
 800155e:	4611      	mov	r1, r2
 8001560:	4618      	mov	r0, r3
 8001562:	f007 f851 	bl	8008608 <HAL_GPIO_Init>
}
 8001566:	bf00      	nop
 8001568:	3720      	adds	r7, #32
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <_ZN8CEncoder22AsignaManejadorEventosEP24CManejadorEventosEncoder>:

void CEncoder::AsignaManejadorEventos(CManejadorEventosEncoder *manejador)
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	6039      	str	r1, [r7, #0]
	Manejador = manejador;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	621a      	str	r2, [r3, #32]
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <_ZN8CEncoder17OnBotonClickEventEi>:
void CEncoder::OnBotonClickEvent(int idBoton)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	6039      	str	r1, [r7, #0]

	switch (idBoton)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	2b03      	cmp	r3, #3
 8001598:	d10b      	bne.n	80015b2 <_ZN8CEncoder17OnBotonClickEventEi+0x28>
	{
	case ID_BOTON:
		Manejador->OnBotonEncoderClickEvent(ID_Encoder);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a18      	ldr	r0, [r3, #32]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a1b      	ldr	r3, [r3, #32]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	3310      	adds	r3, #16
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80015ac:	4611      	mov	r1, r2
 80015ae:	4798      	blx	r3
		break;
 80015b0:	bf00      	nop
	}
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <_ZN8CEncoder7ProcesaEi>:

void CEncoder::Procesa(int gpio_pin)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	6039      	str	r1, [r7, #0]
	Boton->Procesa(gpio_pin);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69db      	ldr	r3, [r3, #28]
 80015c8:	6839      	ldr	r1, [r7, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fd04 	bl	8000fd8 <_ZN15CManejadorBoton7ProcesaEi>
	leeEncoder(gpio_pin);
 80015d0:	6839      	ldr	r1, [r7, #0]
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 f804 	bl	80015e0 <_ZN8CEncoder10leeEncoderEi>
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <_ZN8CEncoder10leeEncoderEi>:

void CEncoder::leeEncoder(int gpio_pin)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
	if(PinClk!=gpio_pin)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	891b      	ldrh	r3, [r3, #8]
 80015ee:	461a      	mov	r2, r3
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d128      	bne.n	8001648 <_ZN8CEncoder10leeEncoderEi+0x68>
		return;
	CLK_status = LeeClk();
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff ff59 	bl	80014ae <_ZN8CEncoder6LeeClkEv>
 80015fc:	4602      	mov	r2, r0
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	629a      	str	r2, [r3, #40]	@ 0x28
	if (CLK_status != CLK_statusAnterior && CLK_status == 1)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160a:	429a      	cmp	r2, r3
 800160c:	d017      	beq.n	800163e <_ZN8CEncoder10leeEncoderEi+0x5e>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001612:	2b01      	cmp	r3, #1
 8001614:	d113      	bne.n	800163e <_ZN8CEncoder10leeEncoderEi+0x5e>
	{
		if (LeeDt() != CLK_status)
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff ff5a 	bl	80014d0 <_ZN8CEncoder5LeeDtEv>
 800161c:	4602      	mov	r2, r0
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001622:	429a      	cmp	r2, r3
 8001624:	bf14      	ite	ne
 8001626:	2301      	movne	r3, #1
 8001628:	2300      	moveq	r3, #0
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	d003      	beq.n	8001638 <_ZN8CEncoder10leeEncoderEi+0x58>
		{
			incrementa();
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f000 f80d 	bl	8001650 <_ZN8CEncoder10incrementaEv>
 8001636:	e002      	b.n	800163e <_ZN8CEncoder10leeEncoderEi+0x5e>
		}
		else
		{
			decrementa();
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 f81c 	bl	8001676 <_ZN8CEncoder10decrementaEv>
		}
	}
	CLK_statusAnterior = CLK_status;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	641a      	str	r2, [r3, #64]	@ 0x40
 8001646:	e000      	b.n	800164a <_ZN8CEncoder10leeEncoderEi+0x6a>
		return;
 8001648:	bf00      	nop
}
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <_ZN8CEncoder10incrementaEv>:

void CEncoder::incrementa()
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	Manejador->OnIncrementoEncoder(ID_Encoder);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a18      	ldr	r0, [r3, #32]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	3308      	adds	r3, #8
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800166a:	4611      	mov	r1, r2
 800166c:	4798      	blx	r3
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <_ZN8CEncoder10decrementaEv>:

void CEncoder::decrementa()
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
	Manejador->OnDecrementoEncoder(ID_Encoder);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a18      	ldr	r0, [r3, #32]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a1b      	ldr	r3, [r3, #32]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	330c      	adds	r3, #12
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001690:	4611      	mov	r1, r2
 8001692:	4798      	blx	r3
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <_ZN24CManejadorEventosEncoderC1Ev>:
 *      Author: W10
 */

#include <Encoder/CManejadorEventosEncoder.hpp>

CManejadorEventosEncoder::CManejadorEventosEncoder()
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	4a04      	ldr	r2, [pc, #16]	@ (80016b8 <_ZN24CManejadorEventosEncoderC1Ev+0x1c>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4618      	mov	r0, r3
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	0800ee80 	.word	0x0800ee80

080016bc <_ZN24CManejadorEventosEncoderD1Ev>:

CManejadorEventosEncoder::~CManejadorEventosEncoder()
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	4a04      	ldr	r2, [pc, #16]	@ (80016d8 <_ZN24CManejadorEventosEncoderD1Ev+0x1c>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4618      	mov	r0, r3
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	0800ee80 	.word	0x0800ee80

080016dc <_ZN24CManejadorEventosEncoderD0Ev>:
CManejadorEventosEncoder::~CManejadorEventosEncoder()
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
}
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ffe9 	bl	80016bc <_ZN24CManejadorEventosEncoderD1Ev>
 80016ea:	2104      	movs	r1, #4
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f00a fc43 	bl	800bf78 <_ZdlPvj>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <_ZN24CManejadorEventosEncoder19OnIncrementoEncoderEi>:

void CManejadorEventosEncoder::OnIncrementoEncoder(int id_Encoder)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]

}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <_ZN24CManejadorEventosEncoder19OnDecrementoEncoderEi>:
void CManejadorEventosEncoder::OnDecrementoEncoder(int id_Encoder)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	6039      	str	r1, [r7, #0]

}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <_ZN24CManejadorEventosEncoder24OnBotonEncoderClickEventEi>:
void CManejadorEventosEncoder::OnBotonEncoderClickEvent(int id_Encoder)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]

}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <_ZN13CEstacionBaseC1Ev>:
 *      Author: W10
 */

#include <Estaciones/CEstacionBase.hpp>

CEstacionBase::CEstacionBase()
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	4a06      	ldr	r2, [pc, #24]	@ (8001764 <_ZN13CEstacionBaseC1Ev+0x24>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	605a      	str	r2, [r3, #4]
{
	// TODO Auto-generated constructor stub

}
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4618      	mov	r0, r3
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	0800ee9c 	.word	0x0800ee9c

08001768 <_ZN13CEstacionBaseD1Ev>:

CEstacionBase::~CEstacionBase()
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	4a04      	ldr	r2, [pc, #16]	@ (8001784 <_ZN13CEstacionBaseD1Ev+0x1c>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4618      	mov	r0, r3
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	0800ee9c 	.word	0x0800ee9c

08001788 <_ZN13CEstacionBaseD0Ev>:
CEstacionBase::~CEstacionBase()
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
}
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff ffe9 	bl	8001768 <_ZN13CEstacionBaseD1Ev>
 8001796:	2108      	movs	r1, #8
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f00a fbed 	bl	800bf78 <_ZdlPvj>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4618      	mov	r0, r3
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <_ZN13CEstacionBase19GetTemperaturaRealxEv>:

float CEstacionBase::GetTemperaturaRealx() //regresa la tenperatura actual de la estacion
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	return 0;
 80017b0:	f04f 0300 	mov.w	r3, #0
 80017b4:	ee07 3a90 	vmov	s15, r3
}
 80017b8:	eeb0 0a67 	vmov.f32	s0, s15
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <_ZN13CEstacionBase14SetTemperaturaEi>:
void CEstacionBase::SetTemperatura(int temperatura) //establece la temperatura que se quiere alcanzar
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	6039      	str	r1, [r7, #0]

}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <_ZN13CEstacionBase14GetTemperaturaEv>:
int CEstacionBase::GetTemperatura() // regresa la temperatura seteada
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	return 0;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <_ZN13CEstacionBase12SetNivelAireEi>:
void CEstacionBase::SetNivelAire(int nivel) //establece el nivel de aire
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	6039      	str	r1, [r7, #0]

}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <_ZN13CEstacionBase12GetNivelAireEv>:
int CEstacionBase::GetNivelAire() //regresa el nivel de aire setado
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	return 0;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <_ZN13CEstacionBase9GetEstadoEv>:
int CEstacionBase::GetEstado() //regresa 1 si esta activo y 0 si esta en reposo
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
	return 0;
 8001826:	2300      	movs	r3, #0

}
 8001828:	4618      	mov	r0, r3
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <_ZN13CEstacionBase21IncrementaTemperaturaEv>:
//para que la misma estacion incremente la temperatura
void CEstacionBase::IncrementaTemperatura()
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <_ZN13CEstacionBase21DecrementaTemperaturaEv>:
//para que la misma estacion decremente la temeperatura
void CEstacionBase::DecrementaTemperatura()
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]

}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <_ZN13CEstacionBase21SetManejadorControlesEP26CManejadorEventosControles>:
// asigna el evento que sellamara cuando cambie la temperatura que el usuario especifica
void CEstacionBase::SetManejadorControles(CManejadorEventosControles *obj)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
	ManejadorControles = obj;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	605a      	str	r2, [r3, #4]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <_ZN13CEstacionBase7ProcesaEv>:
//funcion que se debera llamar para controlar la estacion de calor
void CEstacionBase::Procesa()
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]

}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <_ZN13CEstacionBase14NivelAireEventEi>:
void CEstacionBase::NivelAireEvent(int aire)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00a      	beq.n	80018b4 <_ZN13CEstacionBase14NivelAireEventEi+0x28>
		return;
	ManejadorControles->OnNivelAireEvent(aire);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	330c      	adds	r3, #12
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6839      	ldr	r1, [r7, #0]
 80018ae:	4610      	mov	r0, r2
 80018b0:	4798      	blx	r3
 80018b2:	e000      	b.n	80018b6 <_ZN13CEstacionBase14NivelAireEventEi+0x2a>
		return;
 80018b4:	bf00      	nop
}
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <_ZN13CEstacionBase20TemperaturaRealEventEi>:
void CEstacionBase::TemperaturaRealEvent(int temperatura)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00a      	beq.n	80018e4 <_ZN13CEstacionBase20TemperaturaRealEventEi+0x28>
		return;
	ManejadorControles->OnTemperaturaRealEvent(temperatura);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	3308      	adds	r3, #8
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6839      	ldr	r1, [r7, #0]
 80018de:	4610      	mov	r0, r2
 80018e0:	4798      	blx	r3
 80018e2:	e000      	b.n	80018e6 <_ZN13CEstacionBase20TemperaturaRealEventEi+0x2a>
		return;
 80018e4:	bf00      	nop

}
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <_ZN13CEstacionBase17ActivarCalefactorEv>:
void CEstacionBase::ActivarCalefactor()
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]

}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <_ZN13CEstacionBase20DesactivarCalefactorEv>:
void CEstacionBase::DesactivarCalefactor()
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]

}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <_ZN13CEstacionBase10CruceXCeroEi>:
void CEstacionBase::CruceXCero(int gpio_pin)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]

}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <_ZN13CEstacionBase9TimerTickEv>:
void CEstacionBase::TimerTick()
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]

}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <_ZN13CEstacionBase6GetPIDEv>:
int CEstacionBase::GetPID()
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
	return 0;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <_ZN13CEstacionBase6SetPIDEi>:
void CEstacionBase::SetPID(int valor)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]

}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <_ZN13CEstacionBase17GPIO_INTERRUPCIONEi>:
void CEstacionBase::GPIO_INTERRUPCION(int GPIO_Pin)
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
 8001972:	6039      	str	r1, [r7, #0]

}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <_ZN13CEstacionBase23QuitaManejadorControlesEv>:
void CEstacionBase::QuitaManejadorControles()
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	ManejadorControles = NULL;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	605a      	str	r2, [r3, #4]
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
	...

0800199c <_ZN16CestacionBaku601D1Ev>:
		SerialPrintf("\r\nTemperatura: %d intento = %d",temperatura,n);
		HAL_Delay(1000);
	}
}
*/
CestacionBaku601::~CestacionBaku601()
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	4a11      	ldr	r2, [pc, #68]	@ (80019ec <_ZN16CestacionBaku601D1Ev+0x50>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	4a11      	ldr	r2, [pc, #68]	@ (80019f0 <_ZN16CestacionBaku601D1Ev+0x54>)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	609a      	str	r2, [r3, #8]
{
	// TODO Auto-generated destructor stub
}
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	33e0      	adds	r3, #224	@ 0xe0
 80019b4:	4618      	mov	r0, r3
 80019b6:	f004 fda3 	bl	8006500 <_ZN15SensorMagneticoD1Ev>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	33d0      	adds	r3, #208	@ 0xd0
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff fb9a 	bl	80010f8 <_ZN10CalefactorD1Ev>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3384      	adds	r3, #132	@ 0x84
 80019c8:	4618      	mov	r0, r3
 80019ca:	f004 fc55 	bl	8006278 <_ZN3PwmD1Ev>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3308      	adds	r3, #8
 80019d2:	4618      	mov	r0, r3
 80019d4:	f004 fd4c 	bl	8006470 <_ZN31CManejadorEventoSensorMagneticoD1Ev>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fec4 	bl	8001768 <_ZN13CEstacionBaseD1Ev>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	0800eefc 	.word	0x0800eefc
 80019f0:	0800ef60 	.word	0x0800ef60

080019f4 <_ZThn8_N16CestacionBaku601D1Ev>:
	int NivelAire=0;
	float TemperaturaRealActual;
	int conteolecturatemperatura=0;
public:
	CestacionBaku601();
	virtual ~CestacionBaku601();
 80019f4:	f1a0 0008 	sub.w	r0, r0, #8
 80019f8:	f7ff bfd0 	b.w	800199c <_ZN16CestacionBaku601D1Ev>

080019fc <_ZN16CestacionBaku601D0Ev>:
CestacionBaku601::~CestacionBaku601()
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
}
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff ffc9 	bl	800199c <_ZN16CestacionBaku601D1Ev>
 8001a0a:	f44f 7184 	mov.w	r1, #264	@ 0x108
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f00a fab2 	bl	800bf78 <_ZdlPvj>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <_ZThn8_N16CestacionBaku601D0Ev>:
 8001a1e:	f1a0 0008 	sub.w	r0, r0, #8
 8001a22:	f7ff bfeb 	b.w	80019fc <_ZN16CestacionBaku601D0Ev>
	...

08001a28 <_ZN16CestacionBaku601C1Ev>:

CestacionBaku601::CestacionBaku601() :
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
		CEstacionBase()
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff fe84 	bl	8001740 <_ZN13CEstacionBaseC1Ev>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3308      	adds	r3, #8
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f004 fd07 	bl	8006450 <_ZN31CManejadorEventoSensorMagneticoC1Ev>
 8001a42:	4a59      	ldr	r2, [pc, #356]	@ (8001ba8 <_ZN16CestacionBaku601C1Ev+0x180>)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	4a58      	ldr	r2, [pc, #352]	@ (8001bac <_ZN16CestacionBaku601C1Ev+0x184>)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	609a      	str	r2, [r3, #8]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2264      	movs	r2, #100	@ 0x64
 8001a5a:	611a      	str	r2, [r3, #16]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	615a      	str	r2, [r3, #20]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	61da      	str	r2, [r3, #28]
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2205      	movs	r2, #5
 8001a80:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001a8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	641a      	str	r2, [r3, #64]	@ 0x40
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	645a      	str	r2, [r3, #68]	@ 0x44
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a40      	ldr	r2, [pc, #256]	@ (8001bb0 <_ZN16CestacionBaku601C1Ev+0x188>)
 8001ab0:	649a      	str	r2, [r3, #72]	@ 0x48
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a3f      	ldr	r2, [pc, #252]	@ (8001bb4 <_ZN16CestacionBaku601C1Ev+0x18c>)
 8001ab6:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	651a      	str	r2, [r3, #80]	@ 0x50
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	655a      	str	r2, [r3, #84]	@ 0x54
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2208      	movs	r2, #8
 8001ac8:	659a      	str	r2, [r3, #88]	@ 0x58
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	220b      	movs	r2, #11
 8001ace:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	220c      	movs	r2, #12
 8001ad4:	661a      	str	r2, [r3, #96]	@ 0x60
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	665a      	str	r2, [r3, #100]	@ 0x64
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3368      	adds	r3, #104	@ 0x68
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f004 fa63 	bl	8005fac <_ZN7MAX6675C1Ev>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3384      	adds	r3, #132	@ 0x84
 8001aea:	4618      	mov	r0, r3
 8001aec:	f004 fbb4 	bl	8006258 <_ZN3PwmC1Ev>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	33d0      	adds	r3, #208	@ 0xd0
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff faeb 	bl	80010d0 <_ZN10CalefactorC1Ev>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	33e0      	adds	r3, #224	@ 0xe0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f004 fce2 	bl	80064c8 <_ZN15SensorMagneticoC1Ev>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
{
	pwm.Init(TIM2, TIM_CHANNEL_1, 65535);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f103 0084 	add.w	r0, r3, #132	@ 0x84
 8001b1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001b24:	f004 fbc8 	bl	80062b8 <_ZN3Pwm4InitEP11TIM_TypeDefii>

	//inicializa la termocupla
	thermocouple.SetConfigCkPin(GPIOA, GPIO_PIN_1);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3368      	adds	r3, #104	@ 0x68
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	4922      	ldr	r1, [pc, #136]	@ (8001bb8 <_ZN16CestacionBaku601C1Ev+0x190>)
 8001b30:	4618      	mov	r0, r3
 8001b32:	f004 fa59 	bl	8005fe8 <_ZN7MAX667514SetConfigCkPinEP12GPIO_TypeDeft>
	thermocouple.SetConfigCsPin(GPIOA, GPIO_PIN_2);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3368      	adds	r3, #104	@ 0x68
 8001b3a:	2204      	movs	r2, #4
 8001b3c:	491e      	ldr	r1, [pc, #120]	@ (8001bb8 <_ZN16CestacionBaku601C1Ev+0x190>)
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f004 fa65 	bl	800600e <_ZN7MAX667514SetConfigCsPinEP12GPIO_TypeDeft>
	thermocouple.SetConfigDatPin(GPIOA, GPIO_PIN_0);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3368      	adds	r3, #104	@ 0x68
 8001b48:	2201      	movs	r2, #1
 8001b4a:	491b      	ldr	r1, [pc, #108]	@ (8001bb8 <_ZN16CestacionBaku601C1Ev+0x190>)
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f004 fa38 	bl	8005fc2 <_ZN7MAX667515SetConfigDatPinEP12GPIO_TypeDeft>
	thermocouple.Init();
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3368      	adds	r3, #104	@ 0x68
 8001b56:	4618      	mov	r0, r3
 8001b58:	f004 fb26 	bl	80061a8 <_ZN7MAX66754InitEv>


	calefactor.Configurar(GPIOB, GPIO_PIN_3);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	33d0      	adds	r3, #208	@ 0xd0
 8001b60:	2208      	movs	r2, #8
 8001b62:	4916      	ldr	r1, [pc, #88]	@ (8001bbc <_ZN16CestacionBaku601C1Ev+0x194>)
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fae7 	bl	8001138 <_ZN10Calefactor10ConfigurarEP12GPIO_TypeDeft>
	calefactor.Init();
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	33d0      	adds	r3, #208	@ 0xd0
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff faf5 	bl	800115e <_ZN10Calefactor4InitEv>
//	PruebaTempratura(0);
	sensorMagnetico.Configurar(GPIOB, GPIO_PIN_5);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	33e0      	adds	r3, #224	@ 0xe0
 8001b78:	2220      	movs	r2, #32
 8001b7a:	4910      	ldr	r1, [pc, #64]	@ (8001bbc <_ZN16CestacionBaku601C1Ev+0x194>)
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f004 fcdf 	bl	8006540 <_ZN15SensorMagnetico10ConfigurarEP12GPIO_TypeDeft>
	sensorMagnetico.Init();
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	33e0      	adds	r3, #224	@ 0xe0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f004 fced 	bl	8006566 <_ZN15SensorMagnetico4InitEv>
	sensorMagnetico.AsignaManejadorEventos(this);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f103 02e0 	add.w	r2, r3, #224	@ 0xe0
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3308      	adds	r3, #8
 8001b96:	4619      	mov	r1, r3
 8001b98:	4610      	mov	r0, r2
 8001b9a:	f004 fd03 	bl	80065a4 <_ZN15SensorMagnetico22AsignaManejadorEventosEP31CManejadorEventoSensorMagnetico>

}
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	0800eefc 	.word	0x0800eefc
 8001bac:	0800ef60 	.word	0x0800ef60
 8001bb0:	40a00000 	.word	0x40a00000
 8001bb4:	44160000 	.word	0x44160000
 8001bb8:	40020000 	.word	0x40020000
 8001bbc:	40020400 	.word	0x40020400

08001bc0 <_ZN16CestacionBaku60119GetTemperaturaRealxEv>:

//regresa la tenperatura actual de la estacion
float CestacionBaku601::GetTemperaturaRealx()
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
	//return //TemperaturaRealActual;//
	return thermocouple.MAX6675_leex(); //* .59;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3368      	adds	r3, #104	@ 0x68
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f004 fa31 	bl	8006034 <_ZN7MAX667512MAX6675_leexEv>
 8001bd2:	ee07 0a90 	vmov	s15, r0
 8001bd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001bda:	eeb0 0a67 	vmov.f32	s0, s15
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <_ZN16CestacionBaku60114SetTemperaturaEi>:

//establece la temperatura que se quiere alcanzar
void CestacionBaku601::SetTemperatura(int temperatura)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
	TemperaturaEspecificada = temperatura;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	611a      	str	r2, [r3, #16]
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <_ZN16CestacionBaku60114GetTemperaturaEv>:

// regresa la temperatura seteada
int CestacionBaku601::GetTemperatura()
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	return TemperaturaEspecificada;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	691b      	ldr	r3, [r3, #16]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <_ZN16CestacionBaku60112SetNivelAireEi>:

//establece el nivel de aire
void CestacionBaku601::SetNivelAire(int nivel)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
	NivelAire=nivel;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
	//pwm.SicloTrabajo(nivel);
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <_ZN16CestacionBaku60112GetNivelAireEv>:
int CestacionBaku601::GetNivelAire()
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
	return NivelAire;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <_ZN16CestacionBaku6019GetEstadoEv>:


//regresa 1 si esta activo y 0 si esta en reposo
int CestacionBaku601::GetEstado()
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
	return sensorMagnetico.Leer();
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	33e0      	adds	r3, #224	@ 0xe0
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f004 fcaf 	bl	80065c0 <_ZN15SensorMagnetico4LeerEv>
 8001c62:	4603      	mov	r3, r0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <_ZN16CestacionBaku60121IncrementaTemperaturaEv>:




void CestacionBaku601::IncrementaTemperatura()
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
	if (TemperaturaEspecificada < TemperaturaMaxima)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691a      	ldr	r2, [r3, #16]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	da04      	bge.n	8001c8a <_ZN16CestacionBaku60121IncrementaTemperaturaEv+0x1e>
	{
		TemperaturaEspecificada++;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	1c5a      	adds	r2, r3, #1
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	611a      	str	r2, [r3, #16]
	}
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <_ZN16CestacionBaku60121DecrementaTemperaturaEv>:

void CestacionBaku601::DecrementaTemperatura()
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
	if (TemperaturaEspecificada > 0)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	dd04      	ble.n	8001cb0 <_ZN16CestacionBaku60121DecrementaTemperaturaEv+0x1a>
	{
		TemperaturaEspecificada--;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	1e5a      	subs	r2, r3, #1
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	611a      	str	r2, [r3, #16]
	}
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <_ZN16CestacionBaku60117ActivarCalefactorEv>:


void CestacionBaku601::ActivarCalefactor()
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
	EstadoCalefator = ENCENDIDO;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	665a      	str	r2, [r3, #100]	@ 0x64
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <_ZN16CestacionBaku60120DesactivarCalefactorEv>:

void CestacionBaku601::DesactivarCalefactor()
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
	EstadoCalefator = APAGADO;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	665a      	str	r2, [r3, #100]	@ 0x64
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <_ZN16CestacionBaku60123OnSensorMagneticoChangeEi>:


void CestacionBaku601::OnSensorMagneticoChange(int estado)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]

}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <_ZThn8_N16CestacionBaku60123OnSensorMagneticoChangeEi>:
	void ProcesaTemperaturaReal();
	//eventros del encoder
	virtual void IncrementaTemperatura();
	virtual void DecrementaTemperatura();
	void ProcesaCalefactor();
	virtual void OnSensorMagneticoChange(int estado);
 8001d06:	f1a0 0008 	sub.w	r0, r0, #8
 8001d0a:	f7ff bff1 	b.w	8001cf0 <_ZN16CestacionBaku60123OnSensorMagneticoChangeEi>

08001d0e <_ZN16CestacionBaku6017ProcesaEv>:

void CestacionBaku601::Procesa()
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
	ProcesaTemperatura();
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f80a 	bl	8001d30 <_ZN16CestacionBaku60118ProcesaTemperaturaEv>
//	ProcesaTemperaturaReal();
	procesaAire();
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 f81e 	bl	8001d5e <_ZN16CestacionBaku60111procesaAireEv>
	ProcesaCalefactor();
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f83b 	bl	8001d9e <_ZN16CestacionBaku60117ProcesaCalefactorEv>
}
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <_ZN16CestacionBaku60118ProcesaTemperaturaEv>:

//verifica el nivel de temperatura seleccinada por el usuario
void CestacionBaku601::ProcesaTemperatura()
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
	//leo la temperatura
	int temp = GetTemperatura();
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	3310      	adds	r3, #16
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	4798      	blx	r3
 8001d44:	60f8      	str	r0, [r7, #12]
	//veo si cambio
	if (temperaturaAnterior != temp)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d002      	beq.n	8001d56 <_ZN16CestacionBaku60118ProcesaTemperaturaEv+0x26>
	{
		temperaturaAnterior = temp;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	615a      	str	r2, [r3, #20]
	}
}
 8001d56:	bf00      	nop
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <_ZN16CestacionBaku60111procesaAireEv>:
	*/
}

//verifica elnivel de aire
void CestacionBaku601::procesaAire()
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b084      	sub	sp, #16
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
	int aire = GetNivelAire();
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	3318      	adds	r3, #24
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	4798      	blx	r3
 8001d72:	60f8      	str	r0, [r7, #12]
	if (AireAnterior != aire)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	69db      	ldr	r3, [r3, #28]
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d00b      	beq.n	8001d96 <_ZN16CestacionBaku60111procesaAireEv+0x38>
	{
		AireAnterior = aire;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	61da      	str	r2, [r3, #28]
		NivelAireEvent(AireAnterior);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	334c      	adds	r3, #76	@ 0x4c
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	69d2      	ldr	r2, [r2, #28]
 8001d92:	4611      	mov	r1, r2
 8001d94:	4798      	blx	r3
	}
}
 8001d96:	bf00      	nop
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <_ZN16CestacionBaku60117ProcesaCalefactorEv>:


void CestacionBaku601::ProcesaCalefactor()
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b086      	sub	sp, #24
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
	if (EstadoCalefator == APAGADO)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d108      	bne.n	8001dc0 <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x22>
	{
		//esta apagado el calefactor
		PotenciaCalefactor=0;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	629a      	str	r2, [r3, #40]	@ 0x28
		calefactor.Apagar();
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	33d0      	adds	r3, #208	@ 0xd0
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff fa07 	bl	80011cc <_ZN10Calefactor6ApagarEv>
		return;
 8001dbe:	e090      	b.n	8001ee2 <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x144>
	}
	int sensor = sensorMagnetico.Leer();
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	33e0      	adds	r3, #224	@ 0xe0
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f004 fbfb 	bl	80065c0 <_ZN15SensorMagnetico4LeerEv>
 8001dca:	6178      	str	r0, [r7, #20]
	if (sensor == BOTON_PRESIONADO)
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d103      	bne.n	8001dda <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x3c>
	{
		//el usuario coloco la pistola en su base por lo que hay que enfriarla
		EnfriaYApagaPistola();
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f888 	bl	8001ee8 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv>
		return;
 8001dd8:	e083      	b.n	8001ee2 <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x144>
	}
	TiempoEnfriando=0;
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	f04f 0200 	mov.w	r2, #0
 8001de0:	f04f 0300 	mov.w	r3, #0
 8001de4:	e9c1 2308 	strd	r2, r3, [r1, #32]
	//enciendo el aire
	int aire = GetNivelAire();
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	3318      	adds	r3, #24
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	4798      	blx	r3
 8001df4:	6138      	str	r0, [r7, #16]
	pwm.SicloTrabajo(aire);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	3384      	adds	r3, #132	@ 0x84
 8001dfa:	6939      	ldr	r1, [r7, #16]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f004 fb01 	bl	8006404 <_ZN3Pwm12SicloTrabajoEi>
	//aqui se hace al calculo del PID
	//veo si ya paso el tiempo para hacer el muestreo
	TiempoActual=HAL_GetTick(); //me trae el tiempo en milisegundos
 8001e02:	f005 ff8b 	bl	8007d1c <HAL_GetTick>
 8001e06:	4603      	mov	r3, r0
 8001e08:	461a      	mov	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	635a      	str	r2, [r3, #52]	@ 0x34
	if(TiempoActual<TiempoProximoMuestreo )
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e16:	429a      	cmp	r2, r3
 8001e18:	db62      	blt.n	8001ee0 <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x142>
	{
		//a un no ha paso el tiempo para
		return;
	}
	//calculo el siguiente tiempo de muestreo
	TiempoProximoMuestreo=TiempoActual+TiempoMuestreoTemperatura;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	441a      	add	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	639a      	str	r2, [r3, #56]	@ 0x38
	TemperaturaRealActual=GetTemperaturaRealx();//thermocouple.MAX6675_lee();
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	3308      	adds	r3, #8
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	4798      	blx	r3
 8001e34:	eef0 7a40 	vmov.f32	s15, s0
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	edc3 7a40 	vstr	s15, [r3, #256]	@ 0x100
	int temperatura = TemperaturaRealActual;//GetTemperaturaReal();
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	edd3 7a40 	vldr	s15, [r3, #256]	@ 0x100
 8001e44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e48:	ee17 3a90 	vmov	r3, s15
 8001e4c:	60fb      	str	r3, [r7, #12]
	 PID_error = TemperaturaEspecificada - temperatura;                       //Calculo del error
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	691a      	ldr	r2, [r3, #16]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	ee07 3a90 	vmov	s15, r3
 8001e5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	 Error_INT = Error_INT + PID_error * (1000 / TiempoMuestreoTemperatura);  //Calculo de la integral del error
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e74:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e78:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e7c:	ee07 3a90 	vmov	s15, r3
 8001e80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	 PID_value = Kc * (PID_error + (1 / Tao_I) * Error_INT)/10;   //Calculo de la salida del controlador PI
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001ea4:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8001ea8:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001eb2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001eba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ebe:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001ec2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	 //asigno la potencia del calefactor
	 PotenciaCalefactor=PID_value;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001ed2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ed6:	ee17 2a90 	vmov	r2, s15
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ede:	e000      	b.n	8001ee2 <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x144>
		return;
 8001ee0:	bf00      	nop
}
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv>:

void CestacionBaku601::EnfriaYApagaPistola()
{
 8001ee8:	b590      	push	{r4, r7, lr}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
	//calefactor.Apagar();
	PotenciaCalefactor=0; //bajo toda la potencia
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	629a      	str	r2, [r3, #40]	@ 0x28
	float temperatura = GetTemperaturaRealx();
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	3308      	adds	r3, #8
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	4798      	blx	r3
 8001f02:	ed87 0a03 	vstr	s0, [r7, #12]
	if (temperatura <= TEMPERATURA_APAGADO)
 8001f06:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f0a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001f0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f16:	d83c      	bhi.n	8001f92 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xaa>
	{
		if(TiempoEnfriando==0)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	f04f 0300 	mov.w	r3, #0
 8001f26:	f7fe fdd7 	bl	8000ad8 <__aeabi_dcmpeq>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00b      	beq.n	8001f48 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0x60>
		{
			TiempoEnfriando=HAL_GetTick();
 8001f30:	f005 fef4 	bl	8007d1c <HAL_GetTick>
 8001f34:	4603      	mov	r3, r0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe faec 	bl	8000514 <__aeabi_ui2d>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	e9c1 2308 	strd	r2, r3, [r1, #32]
			return;
 8001f46:	e035      	b.n	8001fb4 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xcc>
		}
		if(HAL_GetTick()-TiempoEnfriando<=10000)
 8001f48:	f005 fee8 	bl	8007d1c <HAL_GetTick>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe fae0 	bl	8000514 <__aeabi_ui2d>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001f5a:	f7fe f99d 	bl	8000298 <__aeabi_dsub>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	4610      	mov	r0, r2
 8001f64:	4619      	mov	r1, r3
 8001f66:	2301      	movs	r3, #1
 8001f68:	461c      	mov	r4, r3
 8001f6a:	a315      	add	r3, pc, #84	@ (adr r3, 8001fc0 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xd8>)
 8001f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f70:	f7fe fdc6 	bl	8000b00 <__aeabi_dcmple>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0x96>
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	461c      	mov	r4, r3
 8001f7e:	b2e3      	uxtb	r3, r4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d116      	bne.n	8001fb2 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xca>
		{
			return;
		}
		pwm.SicloTrabajo(0);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3384      	adds	r3, #132	@ 0x84
 8001f88:	2100      	movs	r1, #0
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f004 fa3a 	bl	8006404 <_ZN3Pwm12SicloTrabajoEi>
		return;
 8001f90:	e010      	b.n	8001fb4 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xcc>
	}
	//pongo al maximo el aire para enfriar la pistola
	if(temperatura>10)
 8001f92:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f96:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001f9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa2:	dd07      	ble.n	8001fb4 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xcc>
	{
		pwm.SicloTrabajo(100);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3384      	adds	r3, #132	@ 0x84
 8001fa8:	2164      	movs	r1, #100	@ 0x64
 8001faa:	4618      	mov	r0, r3
 8001fac:	f004 fa2a 	bl	8006404 <_ZN3Pwm12SicloTrabajoEi>
 8001fb0:	e000      	b.n	8001fb4 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xcc>
			return;
 8001fb2:	bf00      	nop
	}
}
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd90      	pop	{r4, r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	f3af 8000 	nop.w
 8001fc0:	00000000 	.word	0x00000000
 8001fc4:	40c38800 	.word	0x40c38800

08001fc8 <_ZN16CestacionBaku60110CruceXCeroEi>:
void CestacionBaku601::CruceXCero(int gpio_pin)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
	if(gpio_pin!=CruceCero_Pin)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	2b10      	cmp	r3, #16
 8001fd6:	d134      	bne.n	8002042 <_ZN16CestacionBaku60110CruceXCeroEi+0x7a>
		return;
	if(TiempoAntiReboresCruceXCero>0)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	dc32      	bgt.n	8002046 <_ZN16CestacionBaku60110CruceXCeroEi+0x7e>
	{
		return;
	}
	TiempoAntiReboresCruceXCero=9;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2209      	movs	r2, #9
 8001fe4:	651a      	str	r2, [r3, #80]	@ 0x50
	if(conteolecturatemperatura>10)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001fec:	2b0a      	cmp	r3, #10
 8001fee:	dd03      	ble.n	8001ff8 <_ZN16CestacionBaku60110CruceXCeroEi+0x30>
	{
		conteolecturatemperatura=0;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
//		TemperaturaRealActual=thermocouple.MAX6675_lee();
	}
	conteolecturatemperatura++;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
//	ProcesaTemperaturaReal();
	if(ciclos>=100)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800200a:	2b63      	cmp	r3, #99	@ 0x63
 800200c:	dd02      	ble.n	8002014 <_ZN16CestacionBaku60110CruceXCeroEi+0x4c>
	{
		ciclos=0;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	if(ciclos<PotenciaCalefactor)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201c:	429a      	cmp	r2, r3
 800201e:	da05      	bge.n	800202c <_ZN16CestacionBaku60110CruceXCeroEi+0x64>
	{
		calefactor.Encender();
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	33d0      	adds	r3, #208	@ 0xd0
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff f8be 	bl	80011a6 <_ZN10Calefactor8EncenderEv>
 800202a:	e004      	b.n	8002036 <_ZN16CestacionBaku60110CruceXCeroEi+0x6e>
	}
	else
	{
		calefactor.Apagar();
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	33d0      	adds	r3, #208	@ 0xd0
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff f8cb 	bl	80011cc <_ZN10Calefactor6ApagarEv>
	}
	ciclos=ciclos+1;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800203a:	1c5a      	adds	r2, r3, #1
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002040:	e002      	b.n	8002048 <_ZN16CestacionBaku60110CruceXCeroEi+0x80>
		return;
 8002042:	bf00      	nop
 8002044:	e000      	b.n	8002048 <_ZN16CestacionBaku60110CruceXCeroEi+0x80>
		return;
 8002046:	bf00      	nop
}
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <_ZN16CestacionBaku6019TimerTickEv>:
void CestacionBaku601::TimerTick()
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
		if(TiempoAntiReboresCruceXCero>0)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800205a:	2b00      	cmp	r3, #0
 800205c:	dd04      	ble.n	8002068 <_ZN16CestacionBaku6019TimerTickEv+0x1a>
		{
			TiempoAntiReboresCruceXCero--;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002062:	1e5a      	subs	r2, r3, #1
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	651a      	str	r2, [r3, #80]	@ 0x50
		}
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <_ZN16CestacionBaku6016GetPIDEv>:
int CestacionBaku601::GetPID()
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
	return PotenciaCalefactor;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8002080:	4618      	mov	r0, r3
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <_ZN16CestacionBaku6016SetPIDEi>:
void CestacionBaku601::SetPID(int valor)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
	PotenciaCalefactor=valor;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <_ZN16CestacionBaku60117GPIO_INTERRUPCIONEi>:
void CestacionBaku601::GPIO_INTERRUPCION(int GPIO_Pin)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
	CruceXCero(GPIO_Pin);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	333c      	adds	r3, #60	@ 0x3c
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6839      	ldr	r1, [r7, #0]
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	4798      	blx	r3
}
 80020c0:	bf00      	nop
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <_ZN18CComponenteBaseTftC1Ev>:
#include <GUI/CComponenteBaseTft.hpp>
#include "stdio.h"
#include <stdarg.h>
#include "string.h"
#include "ILI9341/ILI9341_GFX.hpp"
CComponenteBaseTft::CComponenteBaseTft()
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	4a09      	ldr	r2, [pc, #36]	@ (80020f8 <_ZN18CComponenteBaseTftC1Ev+0x30>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	605a      	str	r2, [r3, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	609a      	str	r2, [r3, #8]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	615a      	str	r2, [r3, #20]
{
	// TODO Auto-generated constructor stub

}
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4618      	mov	r0, r3
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	0800ef74 	.word	0x0800ef74

080020fc <_ZN18CComponenteBaseTftD1Ev>:

CComponenteBaseTft::~CComponenteBaseTft()
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	4a04      	ldr	r2, [pc, #16]	@ (8002118 <_ZN18CComponenteBaseTftD1Ev+0x1c>)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4618      	mov	r0, r3
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	0800ef74 	.word	0x0800ef74

0800211c <_ZN18CComponenteBaseTftD0Ev>:
CComponenteBaseTft::~CComponenteBaseTft()
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
}
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff ffe9 	bl	80020fc <_ZN18CComponenteBaseTftD1Ev>
 800212a:	2118      	movs	r1, #24
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f009 ff23 	bl	800bf78 <_ZdlPvj>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4618      	mov	r0, r3
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <_ZN18CComponenteBaseTft9drawPixelEsst>:

//creo una capa que envuelve todas las funciones de la pantalla tft para mejorar el codigo
void CComponenteBaseTft::CComponenteBaseTft::drawPixel(int16_t x, int16_t y,
		uint16_t color)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	4608      	mov	r0, r1
 8002146:	4611      	mov	r1, r2
 8002148:	461a      	mov	r2, r3
 800214a:	4603      	mov	r3, r0
 800214c:	817b      	strh	r3, [r7, #10]
 800214e:	460b      	mov	r3, r1
 8002150:	813b      	strh	r3, [r7, #8]
 8002152:	4613      	mov	r3, r2
 8002154:	80fb      	strh	r3, [r7, #6]
}
 8002156:	bf00      	nop
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <_ZN18CComponenteBaseTft10startWriteEv>:

void CComponenteBaseTft::startWrite(void)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <_ZN18CComponenteBaseTft10writePixelEsst>:
void CComponenteBaseTft::writePixel(int16_t x, int16_t y, uint16_t color)
{
 8002176:	b480      	push	{r7}
 8002178:	b085      	sub	sp, #20
 800217a:	af00      	add	r7, sp, #0
 800217c:	60f8      	str	r0, [r7, #12]
 800217e:	4608      	mov	r0, r1
 8002180:	4611      	mov	r1, r2
 8002182:	461a      	mov	r2, r3
 8002184:	4603      	mov	r3, r0
 8002186:	817b      	strh	r3, [r7, #10]
 8002188:	460b      	mov	r3, r1
 800218a:	813b      	strh	r3, [r7, #8]
 800218c:	4613      	mov	r3, r2
 800218e:	80fb      	strh	r3, [r7, #6]
}
 8002190:	bf00      	nop
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <_ZN18CComponenteBaseTft13writeFillRectEsssst>:
void CComponenteBaseTft::writeFillRect(int16_t x, int16_t y, int16_t w,
		int16_t h, uint16_t color)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	4608      	mov	r0, r1
 80021a6:	4611      	mov	r1, r2
 80021a8:	461a      	mov	r2, r3
 80021aa:	4603      	mov	r3, r0
 80021ac:	817b      	strh	r3, [r7, #10]
 80021ae:	460b      	mov	r3, r1
 80021b0:	813b      	strh	r3, [r7, #8]
 80021b2:	4613      	mov	r3, r2
 80021b4:	80fb      	strh	r3, [r7, #6]
}
 80021b6:	bf00      	nop
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <_ZN18CComponenteBaseTft14writeFastVLineEssst>:
void CComponenteBaseTft::writeFastVLine(int16_t x, int16_t y, int16_t h,
		uint16_t color)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b085      	sub	sp, #20
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	4608      	mov	r0, r1
 80021cc:	4611      	mov	r1, r2
 80021ce:	461a      	mov	r2, r3
 80021d0:	4603      	mov	r3, r0
 80021d2:	817b      	strh	r3, [r7, #10]
 80021d4:	460b      	mov	r3, r1
 80021d6:	813b      	strh	r3, [r7, #8]
 80021d8:	4613      	mov	r3, r2
 80021da:	80fb      	strh	r3, [r7, #6]
}
 80021dc:	bf00      	nop
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <_ZN18CComponenteBaseTft14writeFastHLineEssst>:
void CComponenteBaseTft::writeFastHLine(int16_t x, int16_t y, int16_t w,
		uint16_t color)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	4608      	mov	r0, r1
 80021f2:	4611      	mov	r1, r2
 80021f4:	461a      	mov	r2, r3
 80021f6:	4603      	mov	r3, r0
 80021f8:	817b      	strh	r3, [r7, #10]
 80021fa:	460b      	mov	r3, r1
 80021fc:	813b      	strh	r3, [r7, #8]
 80021fe:	4613      	mov	r3, r2
 8002200:	80fb      	strh	r3, [r7, #6]
}
 8002202:	bf00      	nop
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <_ZN18CComponenteBaseTft9writeLineEsssst>:
void CComponenteBaseTft::writeLine(int16_t x0, int16_t y0, int16_t x1,
		int16_t y1, uint16_t color)
{
 800220e:	b480      	push	{r7}
 8002210:	b085      	sub	sp, #20
 8002212:	af00      	add	r7, sp, #0
 8002214:	60f8      	str	r0, [r7, #12]
 8002216:	4608      	mov	r0, r1
 8002218:	4611      	mov	r1, r2
 800221a:	461a      	mov	r2, r3
 800221c:	4603      	mov	r3, r0
 800221e:	817b      	strh	r3, [r7, #10]
 8002220:	460b      	mov	r3, r1
 8002222:	813b      	strh	r3, [r7, #8]
 8002224:	4613      	mov	r3, r2
 8002226:	80fb      	strh	r3, [r7, #6]
}
 8002228:	bf00      	nop
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <_ZN18CComponenteBaseTft8endWriteEv>:
void CComponenteBaseTft::endWrite(void)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <_ZN18CComponenteBaseTft11setRotationEh>:
void CComponenteBaseTft::setRotation(uint8_t r)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	70fb      	strb	r3, [r7, #3]
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <_ZN18CComponenteBaseTft13invertDisplayEb>:
void CComponenteBaseTft::invertDisplay(bool i)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	70fb      	strb	r3, [r7, #3]
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <_ZN18CComponenteBaseTft13drawFastVLineEssst>:
void CComponenteBaseTft::drawFastVLine(int16_t x, int16_t y, int16_t h,
		uint16_t color)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	4608      	mov	r0, r1
 8002282:	4611      	mov	r1, r2
 8002284:	461a      	mov	r2, r3
 8002286:	4603      	mov	r3, r0
 8002288:	817b      	strh	r3, [r7, #10]
 800228a:	460b      	mov	r3, r1
 800228c:	813b      	strh	r3, [r7, #8]
 800228e:	4613      	mov	r3, r2
 8002290:	80fb      	strh	r3, [r7, #6]
}
 8002292:	bf00      	nop
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <_ZN18CComponenteBaseTft13drawFastHLineEssst>:
void CComponenteBaseTft::drawFastHLine(int16_t x, int16_t y, int16_t w,
		uint16_t color)
{
 800229e:	b480      	push	{r7}
 80022a0:	b085      	sub	sp, #20
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	60f8      	str	r0, [r7, #12]
 80022a6:	4608      	mov	r0, r1
 80022a8:	4611      	mov	r1, r2
 80022aa:	461a      	mov	r2, r3
 80022ac:	4603      	mov	r3, r0
 80022ae:	817b      	strh	r3, [r7, #10]
 80022b0:	460b      	mov	r3, r1
 80022b2:	813b      	strh	r3, [r7, #8]
 80022b4:	4613      	mov	r3, r2
 80022b6:	80fb      	strh	r3, [r7, #6]
}
 80022b8:	bf00      	nop
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <_ZN18CComponenteBaseTft10fillScreenEt>:
void CComponenteBaseTft::fillScreen(uint16_t color)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	807b      	strh	r3, [r7, #2]
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <_ZN18CComponenteBaseTft8drawLineEsssst>:
void CComponenteBaseTft::drawLine(int16_t x0, int16_t y0, int16_t x1,
		int16_t y1, uint16_t color)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	4608      	mov	r0, r1
 80022e6:	4611      	mov	r1, r2
 80022e8:	461a      	mov	r2, r3
 80022ea:	4603      	mov	r3, r0
 80022ec:	817b      	strh	r3, [r7, #10]
 80022ee:	460b      	mov	r3, r1
 80022f0:	813b      	strh	r3, [r7, #8]
 80022f2:	4613      	mov	r3, r2
 80022f4:	80fb      	strh	r3, [r7, #6]
}
 80022f6:	bf00      	nop
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <_ZN18CComponenteBaseTft5widthEv>:
}
void CComponenteBaseTft::cp437(bool x)
{
}
int16_t CComponenteBaseTft::width(void)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
	return 319;
 800230a:	f240 133f 	movw	r3, #319	@ 0x13f
}
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <_ZN18CComponenteBaseTft6heightEv>:
int16_t CComponenteBaseTft::height(void)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
	return 239;
 8002322:	23ef      	movs	r3, #239	@ 0xef
}
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <_ZN18CComponenteBaseTft8fillRectEsssst>:
	va_end(pa);
	buffer[posbuffer] = '\0';
	print(buffer);
}
void CComponenteBaseTft::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,uint16_t color)
{
 8002330:	b590      	push	{r4, r7, lr}
 8002332:	b087      	sub	sp, #28
 8002334:	af02      	add	r7, sp, #8
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	4608      	mov	r0, r1
 800233a:	4611      	mov	r1, r2
 800233c:	461a      	mov	r2, r3
 800233e:	4603      	mov	r3, r0
 8002340:	817b      	strh	r3, [r7, #10]
 8002342:	460b      	mov	r3, r1
 8002344:	813b      	strh	r3, [r7, #8]
 8002346:	4613      	mov	r3, r2
 8002348:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Filled_Rectangle_Coord(x, y, x+w, y+h, color);
 800234a:	8978      	ldrh	r0, [r7, #10]
 800234c:	8939      	ldrh	r1, [r7, #8]
 800234e:	897a      	ldrh	r2, [r7, #10]
 8002350:	88fb      	ldrh	r3, [r7, #6]
 8002352:	4413      	add	r3, r2
 8002354:	b29c      	uxth	r4, r3
 8002356:	893a      	ldrh	r2, [r7, #8]
 8002358:	8c3b      	ldrh	r3, [r7, #32]
 800235a:	4413      	add	r3, r2
 800235c:	b29a      	uxth	r2, r3
 800235e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	4613      	mov	r3, r2
 8002364:	4622      	mov	r2, r4
 8002366:	f002 fd3c 	bl	8004de2 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt>
}
 800236a:	bf00      	nop
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	bd90      	pop	{r4, r7, pc}

08002372 <_ZN18CComponenteBaseTft8drawRectEsssst>:
void CComponenteBaseTft::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,uint16_t color)
{
 8002372:	b590      	push	{r4, r7, lr}
 8002374:	b087      	sub	sp, #28
 8002376:	af02      	add	r7, sp, #8
 8002378:	60f8      	str	r0, [r7, #12]
 800237a:	4608      	mov	r0, r1
 800237c:	4611      	mov	r1, r2
 800237e:	461a      	mov	r2, r3
 8002380:	4603      	mov	r3, r0
 8002382:	817b      	strh	r3, [r7, #10]
 8002384:	460b      	mov	r3, r1
 8002386:	813b      	strh	r3, [r7, #8]
 8002388:	4613      	mov	r3, r2
 800238a:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Hollow_Rectangle_Coord(x, y,x+w,y+h,color);
 800238c:	8978      	ldrh	r0, [r7, #10]
 800238e:	8939      	ldrh	r1, [r7, #8]
 8002390:	897a      	ldrh	r2, [r7, #10]
 8002392:	88fb      	ldrh	r3, [r7, #6]
 8002394:	4413      	add	r3, r2
 8002396:	b29c      	uxth	r4, r3
 8002398:	893a      	ldrh	r2, [r7, #8]
 800239a:	8c3b      	ldrh	r3, [r7, #32]
 800239c:	4413      	add	r3, r2
 800239e:	b29a      	uxth	r2, r3
 80023a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	4613      	mov	r3, r2
 80023a6:	4622      	mov	r2, r4
 80023a8:	f002 fc9a 	bl	8004ce0 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt>
}
 80023ac:	bf00      	nop
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd90      	pop	{r4, r7, pc}

080023b4 <_ZN18CComponenteBaseTft9setCursorEss>:
void CComponenteBaseTft::setCursor(int16_t x, int16_t y)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	807b      	strh	r3, [r7, #2]
 80023c0:	4613      	mov	r3, r2
 80023c2:	803b      	strh	r3, [r7, #0]
    CursorX=x;
 80023c4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	605a      	str	r2, [r3, #4]
    CursorY=y;
 80023cc:	f9b7 2000 	ldrsh.w	r2, [r7]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	609a      	str	r2, [r3, #8]
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <_ZN18CComponenteBaseTft11setTextSizeEh>:
void CComponenteBaseTft::setTextSize(uint8_t s)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	70fb      	strb	r3, [r7, #3]
	TextSize=s;
 80023ec:	78fa      	ldrb	r2, [r7, #3]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	60da      	str	r2, [r3, #12]
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <_ZN18CComponenteBaseTft12setTextColorEt>:
void CComponenteBaseTft::setTextSize(uint8_t sx, uint8_t sy)
{
}
void CComponenteBaseTft::setTextColor(uint16_t c)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	460b      	mov	r3, r1
 8002408:	807b      	strh	r3, [r7, #2]
	ColorTexto=c;
 800240a:	887a      	ldrh	r2, [r7, #2]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	611a      	str	r2, [r3, #16]
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <_ZN18CComponenteBaseTft5printEPc>:
void CComponenteBaseTft::print(char *texto)
{
 800241c:	b590      	push	{r4, r7, lr}
 800241e:	b085      	sub	sp, #20
 8002420:	af02      	add	r7, sp, #8
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
	ILI9341_Draw_Text(texto, CursorX,CursorY, ColorTexto, TextSize, BackColor);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6859      	ldr	r1, [r3, #4]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6898      	ldr	r0, [r3, #8]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	b29c      	uxth	r4, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	b29b      	uxth	r3, r3
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6952      	ldr	r2, [r2, #20]
 800243e:	b292      	uxth	r2, r2
 8002440:	9201      	str	r2, [sp, #4]
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	4623      	mov	r3, r4
 8002446:	4602      	mov	r2, r0
 8002448:	6838      	ldr	r0, [r7, #0]
 800244a:	f002 fdbf 	bl	8004fcc <_Z17ILI9341_Draw_TextPKciittt>
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	bd90      	pop	{r4, r7, pc}
	...

08002458 <_ZN12CEtiquetaTftD1Ev>:
 */

#include <GUI/CEtiquetaTft.hpp>


CEtiquetaTft::~CEtiquetaTft()
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	4a05      	ldr	r2, [pc, #20]	@ (8002478 <_ZN12CEtiquetaTftD1Ev+0x20>)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4618      	mov	r0, r3
 800246a:	f000 fb3b 	bl	8002ae4 <_ZN14CRectanguloTftD1Ev>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4618      	mov	r0, r3
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	0800efc4 	.word	0x0800efc4

0800247c <_ZN12CEtiquetaTftD0Ev>:
CEtiquetaTft::~CEtiquetaTft()
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
}
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f7ff ffe7 	bl	8002458 <_ZN12CEtiquetaTftD1Ev>
 800248a:	21a4      	movs	r1, #164	@ 0xa4
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f009 fd73 	bl	800bf78 <_ZdlPvj>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <_ZN12CEtiquetaTftC1EiiiiiPciiii>:

CEtiquetaTft::CEtiquetaTft(int xi, int yi, int ancho, int alto,	int backColor, char *texto, int colorTexto, int textSize, int contorno,	int colorContorno) :
 800249c:	b580      	push	{r7, lr}
 800249e:	b088      	sub	sp, #32
 80024a0:	af04      	add	r7, sp, #16
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
 80024a8:	603b      	str	r3, [r7, #0]
		CRectanguloTft(xi, yi, ancho, alto, backColor, contorno, colorContorno)
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ae:	9303      	str	r3, [sp, #12]
 80024b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024b2:	9302      	str	r3, [sp, #8]
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	9301      	str	r3, [sp, #4]
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	68b9      	ldr	r1, [r7, #8]
 80024c2:	f000 fb31 	bl	8002b28 <_ZN14CRectanguloTftC1Eiiiiiii>
 80024c6:	4a11      	ldr	r2, [pc, #68]	@ (800250c <_ZN12CEtiquetaTftC1EiiiiiPciiii+0x70>)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2203      	movs	r2, #3
 80024d0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2201      	movs	r2, #1
 80024e0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
{
	strcpy(Texto, texto);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	3330      	adds	r3, #48	@ 0x30
 80024e8:	6a39      	ldr	r1, [r7, #32]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f00a fc79 	bl	800cde2 <strcpy>
	ColorTexto = colorTexto;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024f4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	TextSize = textSize;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024fc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
}
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	0800efc4 	.word	0x0800efc4

08002510 <_ZN12CEtiquetaTft8SetTextoEPcz>:

void CEtiquetaTft::SetTexto(char *formato, ...)
{
 8002510:	b40e      	push	{r1, r2, r3}
 8002512:	b580      	push	{r7, lr}
 8002514:	b0bb      	sub	sp, #236	@ 0xec
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
	char *p;
	char buffer[100];
	char tmp[100];
	int postmp = 0;
 800251a:	2300      	movs	r3, #0
 800251c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	int posbuffer = 0;
 8002520:	2300      	movs	r3, #0
 8002522:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	va_list pa;
	int encontrado = 0;
 8002526:	2300      	movs	r3, #0
 8002528:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

	va_start(pa, formato);
 800252c:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8002530:	60fb      	str	r3, [r7, #12]

	for (p = formato; *p; p++)
 8002532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002536:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800253a:	e0f5      	b.n	8002728 <_ZN12CEtiquetaTft8SetTextoEPcz+0x218>
	{

		if (*p != '%')
 800253c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2b25      	cmp	r3, #37	@ 0x25
 8002544:	d00f      	beq.n	8002566 <_ZN12CEtiquetaTft8SetTextoEPcz+0x56>
		{
			buffer[posbuffer] = *p;
 8002546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800254a:	7819      	ldrb	r1, [r3, #0]
 800254c:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8002550:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002554:	4413      	add	r3, r2
 8002556:	460a      	mov	r2, r1
 8002558:	701a      	strb	r2, [r3, #0]
			posbuffer++;
 800255a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800255e:	3301      	adds	r3, #1
 8002560:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
			continue;
 8002564:	e0db      	b.n	800271e <_ZN12CEtiquetaTft8SetTextoEPcz+0x20e>
		}
		encontrado = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		switch (*++p)
 800256c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002570:	3301      	adds	r3, #1
 8002572:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	3b63      	subs	r3, #99	@ 0x63
 800257e:	2b15      	cmp	r3, #21
 8002580:	f200 8096 	bhi.w	80026b0 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1a0>
 8002584:	a201      	add	r2, pc, #4	@ (adr r2, 800258c <_ZN12CEtiquetaTft8SetTextoEPcz+0x7c>)
 8002586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800258a:	bf00      	nop
 800258c:	08002655 	.word	0x08002655
 8002590:	080025e5 	.word	0x080025e5
 8002594:	080026b1 	.word	0x080026b1
 8002598:	08002671 	.word	0x08002671
 800259c:	080026b1 	.word	0x080026b1
 80025a0:	080026b1 	.word	0x080026b1
 80025a4:	08002601 	.word	0x08002601
 80025a8:	080026b1 	.word	0x080026b1
 80025ac:	080026b1 	.word	0x080026b1
 80025b0:	080026b1 	.word	0x080026b1
 80025b4:	080026b1 	.word	0x080026b1
 80025b8:	080026b1 	.word	0x080026b1
 80025bc:	080026b1 	.word	0x080026b1
 80025c0:	08002639 	.word	0x08002639
 80025c4:	080026b1 	.word	0x080026b1
 80025c8:	080026b1 	.word	0x080026b1
 80025cc:	08002695 	.word	0x08002695
 80025d0:	080026b1 	.word	0x080026b1
 80025d4:	080026b1 	.word	0x080026b1
 80025d8:	080026b1 	.word	0x080026b1
 80025dc:	080026b1 	.word	0x080026b1
 80025e0:	0800261d 	.word	0x0800261d
		{
		case 'd':
			sprintf(tmp, "%d", va_arg(pa, int));
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	1d1a      	adds	r2, r3, #4
 80025e8:	60fa      	str	r2, [r7, #12]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	f107 0310 	add.w	r3, r7, #16
 80025f0:	495b      	ldr	r1, [pc, #364]	@ (8002760 <_ZN12CEtiquetaTft8SetTextoEPcz+0x250>)
 80025f2:	4618      	mov	r0, r3
 80025f4:	f00a fabe 	bl	800cb74 <siprintf>
			encontrado = 1;
 80025f8:	2301      	movs	r3, #1
 80025fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 80025fe:	e067      	b.n	80026d0 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1c0>
		case 'i':
			sprintf(tmp, "%i", va_arg(pa, int));
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	1d1a      	adds	r2, r3, #4
 8002604:	60fa      	str	r2, [r7, #12]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	f107 0310 	add.w	r3, r7, #16
 800260c:	4955      	ldr	r1, [pc, #340]	@ (8002764 <_ZN12CEtiquetaTft8SetTextoEPcz+0x254>)
 800260e:	4618      	mov	r0, r3
 8002610:	f00a fab0 	bl	800cb74 <siprintf>
			encontrado = 1;
 8002614:	2301      	movs	r3, #1
 8002616:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 800261a:	e059      	b.n	80026d0 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1c0>
		case 'x':
			sprintf(tmp, "%x", va_arg(pa, int));
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	1d1a      	adds	r2, r3, #4
 8002620:	60fa      	str	r2, [r7, #12]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	f107 0310 	add.w	r3, r7, #16
 8002628:	494f      	ldr	r1, [pc, #316]	@ (8002768 <_ZN12CEtiquetaTft8SetTextoEPcz+0x258>)
 800262a:	4618      	mov	r0, r3
 800262c:	f00a faa2 	bl	800cb74 <siprintf>
			encontrado = 1;
 8002630:	2301      	movs	r3, #1
 8002632:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 8002636:	e04b      	b.n	80026d0 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1c0>
		case 'p':
			sprintf(tmp, "%p", va_arg(pa, void*));
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	1d1a      	adds	r2, r3, #4
 800263c:	60fa      	str	r2, [r7, #12]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	f107 0310 	add.w	r3, r7, #16
 8002644:	4949      	ldr	r1, [pc, #292]	@ (800276c <_ZN12CEtiquetaTft8SetTextoEPcz+0x25c>)
 8002646:	4618      	mov	r0, r3
 8002648:	f00a fa94 	bl	800cb74 <siprintf>
			encontrado = 1;
 800264c:	2301      	movs	r3, #1
 800264e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 8002652:	e03d      	b.n	80026d0 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1c0>
		case 'c':
			sprintf(tmp, "%c", va_arg(pa, int));
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	1d1a      	adds	r2, r3, #4
 8002658:	60fa      	str	r2, [r7, #12]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	f107 0310 	add.w	r3, r7, #16
 8002660:	4943      	ldr	r1, [pc, #268]	@ (8002770 <_ZN12CEtiquetaTft8SetTextoEPcz+0x260>)
 8002662:	4618      	mov	r0, r3
 8002664:	f00a fa86 	bl	800cb74 <siprintf>
			encontrado = 1;
 8002668:	2301      	movs	r3, #1
 800266a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 800266e:	e02f      	b.n	80026d0 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1c0>
		case 'f':
			sprintf(tmp, "%f", va_arg(pa, double));
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	3307      	adds	r3, #7
 8002674:	f023 0307 	bic.w	r3, r3, #7
 8002678:	f103 0208 	add.w	r2, r3, #8
 800267c:	60fa      	str	r2, [r7, #12]
 800267e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002682:	f107 0010 	add.w	r0, r7, #16
 8002686:	493b      	ldr	r1, [pc, #236]	@ (8002774 <_ZN12CEtiquetaTft8SetTextoEPcz+0x264>)
 8002688:	f00a fa74 	bl	800cb74 <siprintf>
			encontrado = 1;
 800268c:	2301      	movs	r3, #1
 800268e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 8002692:	e01d      	b.n	80026d0 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1c0>
		case 's':
			sprintf(tmp, "%s", va_arg(pa, char *));
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	1d1a      	adds	r2, r3, #4
 8002698:	60fa      	str	r2, [r7, #12]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	f107 0310 	add.w	r3, r7, #16
 80026a0:	4935      	ldr	r1, [pc, #212]	@ (8002778 <_ZN12CEtiquetaTft8SetTextoEPcz+0x268>)
 80026a2:	4618      	mov	r0, r3
 80026a4:	f00a fa66 	bl	800cb74 <siprintf>
			encontrado = 1;
 80026a8:	2301      	movs	r3, #1
 80026aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 80026ae:	e00f      	b.n	80026d0 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1c0>
		default:
			buffer[posbuffer] = *p;
 80026b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026b4:	7819      	ldrb	r1, [r3, #0]
 80026b6:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 80026ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80026be:	4413      	add	r3, r2
 80026c0:	460a      	mov	r2, r1
 80026c2:	701a      	strb	r2, [r3, #0]
			posbuffer++;
 80026c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80026c8:	3301      	adds	r3, #1
 80026ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
			break;
 80026ce:	bf00      	nop
		}
		if (encontrado == 1)
 80026d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d122      	bne.n	800271e <_ZN12CEtiquetaTft8SetTextoEPcz+0x20e>
		{
			postmp = 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
			while (tmp[postmp] != '\0')
 80026de:	e016      	b.n	800270e <_ZN12CEtiquetaTft8SetTextoEPcz+0x1fe>
			{
				buffer[posbuffer] = tmp[postmp];
 80026e0:	f107 0210 	add.w	r2, r7, #16
 80026e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026e8:	4413      	add	r3, r2
 80026ea:	7819      	ldrb	r1, [r3, #0]
 80026ec:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 80026f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80026f4:	4413      	add	r3, r2
 80026f6:	460a      	mov	r2, r1
 80026f8:	701a      	strb	r2, [r3, #0]
				posbuffer++;
 80026fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80026fe:	3301      	adds	r3, #1
 8002700:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
				postmp++;
 8002704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002708:	3301      	adds	r3, #1
 800270a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
			while (tmp[postmp] != '\0')
 800270e:	f107 0210 	add.w	r2, r7, #16
 8002712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002716:	4413      	add	r3, r2
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1e0      	bne.n	80026e0 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1d0>
	for (p = formato; *p; p++)
 800271e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002722:	3301      	adds	r3, #1
 8002724:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	f47f af04 	bne.w	800253c <_ZN12CEtiquetaTft8SetTextoEPcz+0x2c>
			}
		}
	}
	va_end(pa);
	buffer[posbuffer] = '\0';
 8002734:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8002738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800273c:	4413      	add	r3, r2
 800273e:	2200      	movs	r2, #0
 8002740:	701a      	strb	r2, [r3, #0]
	strcpy(Texto, buffer);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3330      	adds	r3, #48	@ 0x30
 8002746:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 800274a:	4611      	mov	r1, r2
 800274c:	4618      	mov	r0, r3
 800274e:	f00a fb48 	bl	800cde2 <strcpy>
}
 8002752:	bf00      	nop
 8002754:	37ec      	adds	r7, #236	@ 0xec
 8002756:	46bd      	mov	sp, r7
 8002758:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800275c:	b003      	add	sp, #12
 800275e:	4770      	bx	lr
 8002760:	0800ec80 	.word	0x0800ec80
 8002764:	0800ec84 	.word	0x0800ec84
 8002768:	0800ec88 	.word	0x0800ec88
 800276c:	0800ec8c 	.word	0x0800ec8c
 8002770:	0800ec90 	.word	0x0800ec90
 8002774:	0800ec94 	.word	0x0800ec94
 8002778:	0800ec98 	.word	0x0800ec98

0800277c <_ZN12CEtiquetaTft13SetSeparacionEii>:
{
	return Texto;
}

void CEtiquetaTft::SetSeparacion(int izquieda, int arriba)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
	SeparacionIzquierda = izquieda;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	SeparacionArriba = arriba;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <_ZN12CEtiquetaTft13SetColorTextoEi>:
{
	return SeparacionIzquierda;
}

void CEtiquetaTft::SetColorTexto(int color)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
	ColorTexto = color;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <_ZN12CEtiquetaTft4ShowEv>:
{
	return ColorTexto;
}

void CEtiquetaTft::Show()
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
	//mandamos a dibujar el rectangulo
	CRectanguloTft::Show();
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f000 f9dd 	bl	8002b8c <_ZN14CRectanguloTft4ShowEv>
	//me posiciono el la pocicion del texto
	setCursor(Xi + SeparacionIzquierda, Yi + SeparacionArriba);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	b29a      	uxth	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	4413      	add	r3, r2
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	b219      	sxth	r1, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69db      	ldr	r3, [r3, #28]
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	4413      	add	r3, r2
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	b21b      	sxth	r3, r3
 80027fc:	461a      	mov	r2, r3
 80027fe:	f7ff fdd9 	bl	80023b4 <_ZN18CComponenteBaseTft9setCursorEss>
	//asigno tamaño de la letra
	setTextSize (TextSize);
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800280a:	b2db      	uxtb	r3, r3
 800280c:	4619      	mov	r1, r3
 800280e:	4610      	mov	r0, r2
 8002810:	f7ff fde6 	bl	80023e0 <_ZN18CComponenteBaseTft11setTextSizeEh>
	//asigno el color de texto
	setTextColor (ColorTexto);
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800281c:	b29b      	uxth	r3, r3
 800281e:	4619      	mov	r1, r3
 8002820:	4610      	mov	r0, r2
 8002822:	f7ff fdec 	bl	80023fe <_ZN18CComponenteBaseTft12setTextColorEt>
	//muestro el texto;
	print (Texto);
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3330      	adds	r3, #48	@ 0x30
 800282c:	4619      	mov	r1, r3
 800282e:	4610      	mov	r0, r2
 8002830:	f7ff fdf4 	bl	800241c <_ZN18CComponenteBaseTft5printEPc>
}
 8002834:	bf00      	nop
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <_ZN12CEtiquetaTft12SetBackColorEi>:
int CEtiquetaTft::DameTextSize()
{
	return TextSize;
}
void CEtiquetaTft::SetBackColor(int color)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
	BackColor=color;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	615a      	str	r2, [r3, #20]
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <_ZN13CPantallaBaseD1Ev>:
 *      Author: W10
 */

#include <GUI/CPantallaBase.hpp>

CPantallaBase::~CPantallaBase()
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	4a09      	ldr	r2, [pc, #36]	@ (8002888 <_ZN13CPantallaBaseD1Ev+0x30>)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	4a09      	ldr	r2, [pc, #36]	@ (800288c <_ZN13CPantallaBaseD1Ev+0x34>)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3330      	adds	r3, #48	@ 0x30
 8002870:	4618      	mov	r0, r3
 8002872:	f003 fb1f 	bl	8005eb4 <_ZN26CManejadorEventosControlesD1Ev>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4618      	mov	r0, r3
 800287a:	f000 f933 	bl	8002ae4 <_ZN14CRectanguloTftD1Ev>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	0800f020 	.word	0x0800f020
 800288c:	0800f094 	.word	0x0800f094

08002890 <_ZThn48_N13CPantallaBaseD1Ev>:
	char Titulo[100];
	CEstacionBase *Estacion;
	CManejadorControles *ManejadorControles;

public:
	virtual ~CPantallaBase();
 8002890:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8002894:	f7ff bfe0 	b.w	8002858 <_ZN13CPantallaBaseD1Ev>

08002898 <_ZN13CPantallaBaseD0Ev>:
CPantallaBase::~CPantallaBase()
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
}
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f7ff ffd9 	bl	8002858 <_ZN13CPantallaBaseD1Ev>
 80028a6:	21ac      	movs	r1, #172	@ 0xac
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f009 fb65 	bl	800bf78 <_ZdlPvj>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <_ZThn48_N13CPantallaBaseD0Ev>:
 80028b8:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80028bc:	f7ff bfec 	b.w	8002898 <_ZN13CPantallaBaseD0Ev>

080028c0 <_ZN13CPantallaBaseC1EiPc>:

//constructor
CPantallaBase::CPantallaBase(int verTitulo, char *titulo) :
 80028c0:	b590      	push	{r4, r7, lr}
 80028c2:	b08f      	sub	sp, #60	@ 0x3c
 80028c4:	af08      	add	r7, sp, #32
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
		CRectanguloTft(0, 0, 0, 0, COLOR::BLACK, 1, COLOR::BLUE)
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	231f      	movs	r3, #31
 80028d0:	9303      	str	r3, [sp, #12]
 80028d2:	2301      	movs	r3, #1
 80028d4:	9302      	str	r3, [sp, #8]
 80028d6:	2300      	movs	r3, #0
 80028d8:	9301      	str	r3, [sp, #4]
 80028da:	2300      	movs	r3, #0
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	2300      	movs	r3, #0
 80028e0:	2200      	movs	r2, #0
 80028e2:	2100      	movs	r1, #0
 80028e4:	f000 f920 	bl	8002b28 <_ZN14CRectanguloTftC1Eiiiiiii>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	3330      	adds	r3, #48	@ 0x30
 80028ec:	4618      	mov	r0, r3
 80028ee:	f003 fad1 	bl	8005e94 <_ZN26CManejadorEventosControlesC1Ev>
 80028f2:	4a2a      	ldr	r2, [pc, #168]	@ (800299c <_ZN13CPantallaBaseC1EiPc+0xdc>)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	4a29      	ldr	r2, [pc, #164]	@ (80029a0 <_ZN13CPantallaBaseC1EiPc+0xe0>)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2201      	movs	r2, #1
 800290a:	63da      	str	r2, [r3, #60]	@ 0x3c
{
	Visible=false;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	VerTitulo = verTitulo;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	63da      	str	r2, [r3, #60]	@ 0x3c
	strcpy(Titulo, titulo);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	3340      	adds	r3, #64	@ 0x40
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4618      	mov	r0, r3
 8002922:	f00a fa5e 	bl	800cde2 <strcpy>
	setRotation(3);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2103      	movs	r1, #3
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff fc8c 	bl	8002248 <_ZN18CComponenteBaseTft11setRotationEh>
	int ancho = width();
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff fce5 	bl	8002302 <_ZN18CComponenteBaseTft5widthEv>
 8002938:	4603      	mov	r3, r0
 800293a:	617b      	str	r3, [r7, #20]
	int alto = height();
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff fceb 	bl	800231a <_ZN18CComponenteBaseTft6heightEv>
 8002944:	4603      	mov	r3, r0
 8002946:	613b      	str	r3, [r7, #16]
	Redimenciona(ancho, alto);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	6979      	ldr	r1, [r7, #20]
 800294e:	4618      	mov	r0, r3
 8002950:	f000 f96c 	bl	8002c2c <_ZN14CRectanguloTft12RedimencionaEii>
	LabelTitulo = new CEtiquetaTft( Xi, Yi, ancho, 30, COLOR::BLUE, Titulo,	COLOR::WHITE, 3, 0, COLOR::BLUE);
 8002954:	20a4      	movs	r0, #164	@ 0xa4
 8002956:	f009 fb11 	bl	800bf7c <_Znwj>
 800295a:	4603      	mov	r3, r0
 800295c:	461c      	mov	r4, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6999      	ldr	r1, [r3, #24]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	69da      	ldr	r2, [r3, #28]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	3340      	adds	r3, #64	@ 0x40
 800296a:	201f      	movs	r0, #31
 800296c:	9006      	str	r0, [sp, #24]
 800296e:	2000      	movs	r0, #0
 8002970:	9005      	str	r0, [sp, #20]
 8002972:	2003      	movs	r0, #3
 8002974:	9004      	str	r0, [sp, #16]
 8002976:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800297a:	9003      	str	r0, [sp, #12]
 800297c:	9302      	str	r3, [sp, #8]
 800297e:	231f      	movs	r3, #31
 8002980:	9301      	str	r3, [sp, #4]
 8002982:	231e      	movs	r3, #30
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	4620      	mov	r0, r4
 800298a:	f7ff fd87 	bl	800249c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	639c      	str	r4, [r3, #56]	@ 0x38
}
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	4618      	mov	r0, r3
 8002996:	371c      	adds	r7, #28
 8002998:	46bd      	mov	sp, r7
 800299a:	bd90      	pop	{r4, r7, pc}
 800299c:	0800f020 	.word	0x0800f020
 80029a0:	0800f094 	.word	0x0800f094

080029a4 <_ZN13CPantallaBase4ShowEv>:
//funcion que se tiene que reemplazar para verse
void CPantallaBase::Show()
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
	//dibujo el fondo
//	CRectanguloTft::Show();
	//dibujo el titulo
	LabelTitulo->Show();
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	3348      	adds	r3, #72	@ 0x48
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4610      	mov	r0, r2
 80029bc:	4798      	blx	r3
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <_ZN13CPantallaBase8RefrescaEv>:
void CPantallaBase::Refresca()
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <_ZN13CPantallaBase11SetEstacionEP13CEstacionBase>:
void CPantallaBase::SetEstacion(CEstacionBase *estacion)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
 80029e2:	6039      	str	r1, [r7, #0]
	Estacion = estacion;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	//asigno los evetos de la estacion
	Estacion->SetManejadorControles(this);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	3328      	adds	r3, #40	@ 0x28
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	3230      	adds	r2, #48	@ 0x30
 8002a02:	4611      	mov	r1, r2
 8002a04:	4798      	blx	r3
	Estacion->ActivarCalefactor();
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	3334      	adds	r3, #52	@ 0x34
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4610      	mov	r0, r2
 8002a1a:	4798      	blx	r3
}
 8002a1c:	bf00      	nop
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <_ZN13CPantallaBase7OcultarEv>:
void CPantallaBase::Ocultar()
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
	CRectanguloTft::Show();
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 f8ac 	bl	8002b8c <_ZN14CRectanguloTft4ShowEv>
	Estacion->QuitaManejadorControles();
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	332c      	adds	r3, #44	@ 0x2c
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4610      	mov	r0, r2
 8002a48:	4798      	blx	r3
	Visible=false;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <_ZN13CPantallaBase9EsVisibleEv>:
bool CPantallaBase::EsVisible()
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
	return Visible;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <_ZN13CPantallaBase10SetVisibleEb>:
void CPantallaBase::SetVisible(bool visible)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	70fb      	strb	r3, [r7, #3]
	if(Visible==visible)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002a86:	78fa      	ldrb	r2, [r7, #3]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d004      	beq.n	8002a96 <_ZN13CPantallaBase10SetVisibleEb+0x22>
		return;
	Visible=visible;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	78fa      	ldrb	r2, [r7, #3]
 8002a90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8002a94:	e000      	b.n	8002a98 <_ZN13CPantallaBase10SetVisibleEb+0x24>
		return;
 8002a96:	bf00      	nop
}
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <_ZN13CPantallaBase21SetManejadorControlesEP19CManejadorControles>:

void CPantallaBase::SetManejadorControles(CManejadorControles *manejador)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b082      	sub	sp, #8
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	6039      	str	r1, [r7, #0]
	ManejadorControles=manejador;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	if(ManejadorControles==NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00d      	beq.n	8002ada <_ZN13CPantallaBase21SetManejadorControlesEP19CManejadorControles+0x38>
		return;
	ManejadorControles->SetManejadorControles(this);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f8d3 00a8 	ldr.w	r0, [r3, #168]	@ 0xa8
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	333c      	adds	r3, #60	@ 0x3c
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	3230      	adds	r2, #48	@ 0x30
 8002ad4:	4611      	mov	r1, r2
 8002ad6:	4798      	blx	r3
 8002ad8:	e000      	b.n	8002adc <_ZN13CPantallaBase21SetManejadorControlesEP19CManejadorControles+0x3a>
		return;
 8002ada:	bf00      	nop
}
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <_ZN14CRectanguloTftD1Ev>:
 *      Author: W10
 */

#include <GUI/CRectanguloTft.hpp>

CRectanguloTft::~CRectanguloTft()
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	4a05      	ldr	r2, [pc, #20]	@ (8002b04 <_ZN14CRectanguloTftD1Ev+0x20>)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff fb01 	bl	80020fc <_ZN18CComponenteBaseTftD1Ev>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4618      	mov	r0, r3
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	0800f0c8 	.word	0x0800f0c8

08002b08 <_ZN14CRectanguloTftD0Ev>:
CRectanguloTft::~CRectanguloTft()
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
}
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7ff ffe7 	bl	8002ae4 <_ZN14CRectanguloTftD1Ev>
 8002b16:	2130      	movs	r1, #48	@ 0x30
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f009 fa2d 	bl	800bf78 <_ZdlPvj>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4618      	mov	r0, r3
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <_ZN14CRectanguloTftC1Eiiiiiii>:

CRectanguloTft::CRectanguloTft(int xi, int yi, int ancho , int alto , int backColor , int contorno , int colorContorno )
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
 8002b34:	603b      	str	r3, [r7, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff fac5 	bl	80020c8 <_ZN18CComponenteBaseTftC1Ev>
 8002b3e:	4a12      	ldr	r2, [pc, #72]	@ (8002b88 <_ZN14CRectanguloTftC1Eiiiiiii+0x60>)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b50:	62da      	str	r2, [r3, #44]	@ 0x2c
{
  Xi = xi;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	619a      	str	r2, [r3, #24]
  Ancho = ancho;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	621a      	str	r2, [r3, #32]
  Yi = yi;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	61da      	str	r2, [r3, #28]
  Alto = alto;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	625a      	str	r2, [r3, #36]	@ 0x24
  BackColor = backColor;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	69fa      	ldr	r2, [r7, #28]
 8002b6e:	615a      	str	r2, [r3, #20]
  ColorControrno = colorContorno;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b74:	62da      	str	r2, [r3, #44]	@ 0x2c
  Contorno = contorno;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6a3a      	ldr	r2, [r7, #32]
 8002b7a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	0800f0c8 	.word	0x0800f0c8

08002b8c <_ZN14CRectanguloTft4ShowEv>:
//muestra el rectangulo en pantalla

void CRectanguloTft::Show()
{
 8002b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af02      	add	r7, sp, #8
 8002b92:	6078      	str	r0, [r7, #4]
  //dibujo el rectangulo
  fillRect(Xi, Yi, Ancho, Alto, BackColor);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	3338      	adds	r3, #56	@ 0x38
 8002b9c:	681c      	ldr	r4, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	b219      	sxth	r1, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	b21d      	sxth	r5, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	b21e      	sxth	r6, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb4:	b21b      	sxth	r3, r3
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6952      	ldr	r2, [r2, #20]
 8002bba:	b292      	uxth	r2, r2
 8002bbc:	9201      	str	r2, [sp, #4]
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	4633      	mov	r3, r6
 8002bc2:	462a      	mov	r2, r5
 8002bc4:	47a0      	blx	r4
  //hay que mostrar contorno?
  if (Contorno == 1) {
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d118      	bne.n	8002c00 <_ZN14CRectanguloTft4ShowEv+0x74>
    drawRect(Xi, Yi, Ancho, Alto, ColorControrno);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	3344      	adds	r3, #68	@ 0x44
 8002bd6:	681c      	ldr	r4, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	b219      	sxth	r1, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	b21d      	sxth	r5, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	b21e      	sxth	r6, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bee:	b21b      	sxth	r3, r3
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002bf4:	b292      	uxth	r2, r2
 8002bf6:	9201      	str	r2, [sp, #4]
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	4633      	mov	r3, r6
 8002bfc:	462a      	mov	r2, r5
 8002bfe:	47a0      	blx	r4
  }
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c08 <_ZN14CRectanguloTft14CambiaPosicionEii>:

void CRectanguloTft::CambiaPosicion(int x, int y)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  Xi=x;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	619a      	str	r2, [r3, #24]
  Yi=y;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	61da      	str	r2, [r3, #28]
}
 8002c20:	bf00      	nop
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <_ZN14CRectanguloTft12RedimencionaEii>:

void CRectanguloTft::Redimenciona(int ancho, int alto)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  Ancho=ancho;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	621a      	str	r2, [r3, #32]
  Alto=alto;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002c44:	bf00      	nop
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <_ZN14CRectanguloTft13SetColorFondoEi>:

void CRectanguloTft::SetColorFondo(int color)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  BackColor=color;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	615a      	str	r2, [r3, #20]
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <_ZN14CRectanguloTft13DamePosicionXEv>:
{
  return ColorControrno;
}

int CRectanguloTft::DamePosicionX()
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  return Xi;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	699b      	ldr	r3, [r3, #24]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <_ZN14CRectanguloTft13DamePosicionYEv>:

int CRectanguloTft::DamePosicionY()
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  return Yi;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	69db      	ldr	r3, [r3, #28]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <_ZN14CRectanguloTft8DameAltoEv>:
{
  return Ancho;
}

int CRectanguloTft::DameAlto()
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  return Alto;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <_ZN14CRectanguloTft11DameCentroXEv>:

//regresa el punto central del rectangulo
int CRectanguloTft::DameCentroX()
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  return Xi+(Ancho/2);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	699a      	ldr	r2, [r3, #24]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	0fd9      	lsrs	r1, r3, #31
 8002cc6:	440b      	add	r3, r1
 8002cc8:	105b      	asrs	r3, r3, #1
 8002cca:	4413      	add	r3, r2
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <_ZN26CConfigurarPantallaMemoriaC1Ev>:
#include <GUI/ConfigurarPantallaMemoria/CConfigurarPantallaMemoria.hpp>
#include <GUI/ManejadorPantallas/CManejadorPantallas.hpp>

extern I2C_HandleTypeDef hi2c1;

CConfigurarPantallaMemoria::CConfigurarPantallaMemoria():
 8002cd8:	b590      	push	{r4, r7, lr}
 8002cda:	b08d      	sub	sp, #52	@ 0x34
 8002cdc:	af08      	add	r7, sp, #32
 8002cde:	6078      	str	r0, [r7, #4]
CPantallaBase(1, (char*)"CONF MEMORIA")
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a6b      	ldr	r2, [pc, #428]	@ (8002e90 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1b8>)
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff fdea 	bl	80028c0 <_ZN13CPantallaBaseC1EiPc>
 8002cec:	4a69      	ldr	r2, [pc, #420]	@ (8002e94 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1bc>)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	4a69      	ldr	r2, [pc, #420]	@ (8002e98 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1c0>)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

{
	// TODO Auto-generated constructor stub
	LabelMemoria=new CEtiquetaTft( 5, 35, 50, 20, COLOR::BLACK,(char*)"Memoria: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8002d00:	20a4      	movs	r0, #164	@ 0xa4
 8002d02:	f009 f93b 	bl	800bf7c <_Znwj>
 8002d06:	4603      	mov	r3, r0
 8002d08:	461c      	mov	r4, r3
 8002d0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d0e:	9306      	str	r3, [sp, #24]
 8002d10:	2300      	movs	r3, #0
 8002d12:	9305      	str	r3, [sp, #20]
 8002d14:	2303      	movs	r3, #3
 8002d16:	9304      	str	r3, [sp, #16]
 8002d18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d1c:	9303      	str	r3, [sp, #12]
 8002d1e:	4b5f      	ldr	r3, [pc, #380]	@ (8002e9c <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1c4>)
 8002d20:	9302      	str	r3, [sp, #8]
 8002d22:	2300      	movs	r3, #0
 8002d24:	9301      	str	r3, [sp, #4]
 8002d26:	2314      	movs	r3, #20
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	2332      	movs	r3, #50	@ 0x32
 8002d2c:	2223      	movs	r2, #35	@ 0x23
 8002d2e:	2105      	movs	r1, #5
 8002d30:	4620      	mov	r0, r4
 8002d32:	f7ff fbb3 	bl	800249c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f8c3 40b4 	str.w	r4, [r3, #180]	@ 0xb4
	LabelTemperatura = new CEtiquetaTft( 5, 65, 50, 20, COLOR::BLACK,(char*)"Temperatura", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8002d3c:	20a4      	movs	r0, #164	@ 0xa4
 8002d3e:	f009 f91d 	bl	800bf7c <_Znwj>
 8002d42:	4603      	mov	r3, r0
 8002d44:	461c      	mov	r4, r3
 8002d46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d4a:	9306      	str	r3, [sp, #24]
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	9305      	str	r3, [sp, #20]
 8002d50:	2303      	movs	r3, #3
 8002d52:	9304      	str	r3, [sp, #16]
 8002d54:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d58:	9303      	str	r3, [sp, #12]
 8002d5a:	4b51      	ldr	r3, [pc, #324]	@ (8002ea0 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1c8>)
 8002d5c:	9302      	str	r3, [sp, #8]
 8002d5e:	2300      	movs	r3, #0
 8002d60:	9301      	str	r3, [sp, #4]
 8002d62:	2314      	movs	r3, #20
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	2332      	movs	r3, #50	@ 0x32
 8002d68:	2241      	movs	r2, #65	@ 0x41
 8002d6a:	2105      	movs	r1, #5
 8002d6c:	4620      	mov	r0, r4
 8002d6e:	f7ff fb95 	bl	800249c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f8c3 40b8 	str.w	r4, [r3, #184]	@ 0xb8
	int centroX = DameCentroX();
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff ff9a 	bl	8002cb4 <_ZN14CRectanguloTft11DameCentroXEv>
 8002d80:	60f8      	str	r0, [r7, #12]
	LabelTemperaturas = new CEtiquetaTft( centroX - 150 / 2, 105, 150, 30,COLOR::WHITE, (char*)"000/000", COLOR::BLACK, 3, 1, COLOR::RED);
 8002d82:	20a4      	movs	r0, #164	@ 0xa4
 8002d84:	f009 f8fa 	bl	800bf7c <_Znwj>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	461c      	mov	r4, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f1a3 014b 	sub.w	r1, r3, #75	@ 0x4b
 8002d92:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002d96:	9306      	str	r3, [sp, #24]
 8002d98:	2301      	movs	r3, #1
 8002d9a:	9305      	str	r3, [sp, #20]
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	9304      	str	r3, [sp, #16]
 8002da0:	2300      	movs	r3, #0
 8002da2:	9303      	str	r3, [sp, #12]
 8002da4:	4b3f      	ldr	r3, [pc, #252]	@ (8002ea4 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1cc>)
 8002da6:	9302      	str	r3, [sp, #8]
 8002da8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002dac:	9301      	str	r3, [sp, #4]
 8002dae:	231e      	movs	r3, #30
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	2396      	movs	r3, #150	@ 0x96
 8002db4:	2269      	movs	r2, #105	@ 0x69
 8002db6:	4620      	mov	r0, r4
 8002db8:	f7ff fb70 	bl	800249c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f8c3 40bc 	str.w	r4, [r3, #188]	@ 0xbc
	LabelTemperaturas->SetSeparacion(5, 5);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002dc8:	2205      	movs	r2, #5
 8002dca:	2105      	movs	r1, #5
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff fcd5 	bl	800277c <_ZN12CEtiquetaTft13SetSeparacionEii>
	LabelAire = new CEtiquetaTft( 5, 135, 200, 30, COLOR::BLACK,(char*) "Aire: 00",COLOR::WHITE, 3, 0, COLOR::RED);
 8002dd2:	20a4      	movs	r0, #164	@ 0xa4
 8002dd4:	f009 f8d2 	bl	800bf7c <_Znwj>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	461c      	mov	r4, r3
 8002ddc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002de0:	9306      	str	r3, [sp, #24]
 8002de2:	2300      	movs	r3, #0
 8002de4:	9305      	str	r3, [sp, #20]
 8002de6:	2303      	movs	r3, #3
 8002de8:	9304      	str	r3, [sp, #16]
 8002dea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002dee:	9303      	str	r3, [sp, #12]
 8002df0:	4b2d      	ldr	r3, [pc, #180]	@ (8002ea8 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1d0>)
 8002df2:	9302      	str	r3, [sp, #8]
 8002df4:	2300      	movs	r3, #0
 8002df6:	9301      	str	r3, [sp, #4]
 8002df8:	231e      	movs	r3, #30
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	23c8      	movs	r3, #200	@ 0xc8
 8002dfe:	2287      	movs	r2, #135	@ 0x87
 8002e00:	2105      	movs	r1, #5
 8002e02:	4620      	mov	r0, r4
 8002e04:	f7ff fb4a 	bl	800249c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f8c3 40c0 	str.w	r4, [r3, #192]	@ 0xc0

	LabelGuardar=new CEtiquetaTft( 10, 200, 130, 30, COLOR::GREEN,(char*)"GUARDAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 8002e0e:	20a4      	movs	r0, #164	@ 0xa4
 8002e10:	f009 f8b4 	bl	800bf7c <_Znwj>
 8002e14:	4603      	mov	r3, r0
 8002e16:	461c      	mov	r4, r3
 8002e18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e1c:	9306      	str	r3, [sp, #24]
 8002e1e:	2301      	movs	r3, #1
 8002e20:	9305      	str	r3, [sp, #20]
 8002e22:	2303      	movs	r3, #3
 8002e24:	9304      	str	r3, [sp, #16]
 8002e26:	2300      	movs	r3, #0
 8002e28:	9303      	str	r3, [sp, #12]
 8002e2a:	4b20      	ldr	r3, [pc, #128]	@ (8002eac <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1d4>)
 8002e2c:	9302      	str	r3, [sp, #8]
 8002e2e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002e32:	9301      	str	r3, [sp, #4]
 8002e34:	231e      	movs	r3, #30
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	2382      	movs	r3, #130	@ 0x82
 8002e3a:	22c8      	movs	r2, #200	@ 0xc8
 8002e3c:	210a      	movs	r1, #10
 8002e3e:	4620      	mov	r0, r4
 8002e40:	f7ff fb2c 	bl	800249c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f8c3 40ac 	str.w	r4, [r3, #172]	@ 0xac
	LabelCancelar=new CEtiquetaTft( 160, 200, 145, 30, COLOR::RED,(char*)"CANCELAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 8002e4a:	20a4      	movs	r0, #164	@ 0xa4
 8002e4c:	f009 f896 	bl	800bf7c <_Znwj>
 8002e50:	4603      	mov	r3, r0
 8002e52:	461c      	mov	r4, r3
 8002e54:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e58:	9306      	str	r3, [sp, #24]
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	9305      	str	r3, [sp, #20]
 8002e5e:	2303      	movs	r3, #3
 8002e60:	9304      	str	r3, [sp, #16]
 8002e62:	2300      	movs	r3, #0
 8002e64:	9303      	str	r3, [sp, #12]
 8002e66:	4b12      	ldr	r3, [pc, #72]	@ (8002eb0 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1d8>)
 8002e68:	9302      	str	r3, [sp, #8]
 8002e6a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002e6e:	9301      	str	r3, [sp, #4]
 8002e70:	231e      	movs	r3, #30
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	2391      	movs	r3, #145	@ 0x91
 8002e76:	22c8      	movs	r2, #200	@ 0xc8
 8002e78:	21a0      	movs	r1, #160	@ 0xa0
 8002e7a:	4620      	mov	r0, r4
 8002e7c:	f7ff fb0e 	bl	800249c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f8c3 40b0 	str.w	r4, [r3, #176]	@ 0xb0

}
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd90      	pop	{r4, r7, pc}
 8002e90:	0800ec9c 	.word	0x0800ec9c
 8002e94:	0800f124 	.word	0x0800f124
 8002e98:	0800f1ac 	.word	0x0800f1ac
 8002e9c:	0800ecac 	.word	0x0800ecac
 8002ea0:	0800ecb8 	.word	0x0800ecb8
 8002ea4:	0800ecc4 	.word	0x0800ecc4
 8002ea8:	0800eccc 	.word	0x0800eccc
 8002eac:	0800ecd8 	.word	0x0800ecd8
 8002eb0:	0800ece0 	.word	0x0800ece0

08002eb4 <_ZN26CConfigurarPantallaMemoriaD1Ev>:

CConfigurarPantallaMemoria::~CConfigurarPantallaMemoria()
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	4a07      	ldr	r2, [pc, #28]	@ (8002edc <_ZN26CConfigurarPantallaMemoriaD1Ev+0x28>)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	4a07      	ldr	r2, [pc, #28]	@ (8002ee0 <_ZN26CConfigurarPantallaMemoriaD1Ev+0x2c>)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff fcc4 	bl	8002858 <_ZN13CPantallaBaseD1Ev>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	0800f124 	.word	0x0800f124
 8002ee0:	0800f1ac 	.word	0x0800f1ac

08002ee4 <_ZThn48_N26CConfigurarPantallaMemoriaD1Ev>:
	void LeeDatosMemoria();
	int DameDireccionMemoria();
	void MuestraInformacion();
public:
	CConfigurarPantallaMemoria();
	virtual ~CConfigurarPantallaMemoria();
 8002ee4:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8002ee8:	f7ff bfe4 	b.w	8002eb4 <_ZN26CConfigurarPantallaMemoriaD1Ev>

08002eec <_ZN26CConfigurarPantallaMemoriaD0Ev>:
CConfigurarPantallaMemoria::~CConfigurarPantallaMemoria()
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
}
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7ff ffdd 	bl	8002eb4 <_ZN26CConfigurarPantallaMemoriaD1Ev>
 8002efa:	21e0      	movs	r1, #224	@ 0xe0
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f009 f83b 	bl	800bf78 <_ZdlPvj>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4618      	mov	r0, r3
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <_ZThn48_N26CConfigurarPantallaMemoriaD0Ev>:
 8002f0c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8002f10:	f7ff bfec 	b.w	8002eec <_ZN26CConfigurarPantallaMemoriaD0Ev>

08002f14 <_ZN26CConfigurarPantallaMemoria4ShowEv>:

void CConfigurarPantallaMemoria::Show()
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
	VelocidadAireInicialPotenciometro=ManejadorControles->GetNivelAire();
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002f22:	4618      	mov	r0, r3
 8002f24:	f002 fe91 	bl	8005c4a <_ZN19CManejadorControles12GetNivelAireEv>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	CPantallaBase::Show();
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff fd36 	bl	80029a4 <_ZN13CPantallaBase4ShowEv>
	LeeDatosMemoria();
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 f881 	bl	8003040 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv>
	LabelTemperatura->Show();
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	3348      	adds	r3, #72	@ 0x48
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4610      	mov	r0, r2
 8002f52:	4798      	blx	r3
	MuestraInformacion();
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 f8df 	bl	8003118 <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv>
	LabelMemoria->SetTexto((char*)"Memoria: %d", NumeroMemoria);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f8d3 00b4 	ldr.w	r0, [r3, #180]	@ 0xb4
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002f66:	461a      	mov	r2, r3
 8002f68:	4913      	ldr	r1, [pc, #76]	@ (8002fb8 <_ZN26CConfigurarPantallaMemoria4ShowEv+0xa4>)
 8002f6a:	f7ff fad1 	bl	8002510 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelMemoria->Show();
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	3348      	adds	r3, #72	@ 0x48
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4610      	mov	r0, r2
 8002f82:	4798      	blx	r3
	LabelGuardar->Show();
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	3348      	adds	r3, #72	@ 0x48
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4610      	mov	r0, r2
 8002f98:	4798      	blx	r3
	LabelCancelar->Show();
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	3348      	adds	r3, #72	@ 0x48
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4610      	mov	r0, r2
 8002fae:	4798      	blx	r3
}
 8002fb0:	bf00      	nop
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	0800ecec 	.word	0x0800ecec

08002fbc <_ZN26CConfigurarPantallaMemoria8RefrescaEv>:

void CConfigurarPantallaMemoria::Refresca()
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
	int velocidad=ManejadorControles->GetNivelAire();
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f002 fe3d 	bl	8005c4a <_ZN19CManejadorControles12GetNivelAireEv>
 8002fd0:	60f8      	str	r0, [r7, #12]
	if(VelocidadAireInicialPotenciometro>velocidad+1 ||VelocidadAireInicialPotenciometro<velocidad-1)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	dc06      	bgt.n	8002fee <_ZN26CConfigurarPantallaMemoria8RefrescaEv+0x32>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	429a      	cmp	r2, r3
 8002fec:	da03      	bge.n	8002ff6 <_ZN26CConfigurarPantallaMemoria8RefrescaEv+0x3a>
	{
		VelocidadAire =velocidad;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	}
	MuestraInformacion();
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f88e 	bl	8003118 <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv>
}
 8002ffc:	bf00      	nop
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <_ZN26CConfigurarPantallaMemoria10SetMemoriaEi>:
void CConfigurarPantallaMemoria::SetMemoria(int numeroMemoria)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
	TemperaturaAnterior=-1;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f04f 32ff 	mov.w	r2, #4294967295
 8003014:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	VelocidadAireAnterior=-1;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f04f 32ff 	mov.w	r2, #4294967295
 800301e:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	NumeroMemoria=numeroMemoria;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
	DireccionMemoria=DameDireccionMemoria();
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f852 	bl	80030d4 <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv>
 8003030:	4602      	mov	r2, r0
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8003038:	bf00      	nop
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv>:

void CConfigurarPantallaMemoria::LeeDatosMemoria()
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b088      	sub	sp, #32
 8003044:	af04      	add	r7, sp, #16
 8003046:	6078      	str	r0, [r7, #4]
	uint16_t datos_r[2];
	  if( HAL_I2C_Mem_Read(&hi2c1,ADDRESS_EEPROM,DireccionMemoria,I2C_MEMADD_SIZE_8BIT,(uint8_t*)datos_r,4,HAL_MAX_DELAY)==HAL_OK)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800304e:	b29a      	uxth	r2, r3
 8003050:	f04f 33ff 	mov.w	r3, #4294967295
 8003054:	9302      	str	r3, [sp, #8]
 8003056:	2304      	movs	r3, #4
 8003058:	9301      	str	r3, [sp, #4]
 800305a:	f107 030c 	add.w	r3, r7, #12
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	2301      	movs	r3, #1
 8003062:	21a0      	movs	r1, #160	@ 0xa0
 8003064:	481a      	ldr	r0, [pc, #104]	@ (80030d0 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x90>)
 8003066:	f005 fedb 	bl	8008e20 <HAL_I2C_Mem_Read>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	bf0c      	ite	eq
 8003070:	2301      	moveq	r3, #1
 8003072:	2300      	movne	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d026      	beq.n	80030c8 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x88>
	  {
			Temperatura=datos_r[0];
 800307a:	89bb      	ldrh	r3, [r7, #12]
 800307c:	461a      	mov	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
			VelocidadAire=datos_r[1];
 8003084:	89fb      	ldrh	r3, [r7, #14]
 8003086:	461a      	mov	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

		 	if(Temperatura<0 || Temperatura>500)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003094:	2b00      	cmp	r3, #0
 8003096:	db05      	blt.n	80030a4 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x64>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800309e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80030a2:	dd03      	ble.n	80030ac <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x6c>
		 	{
		 		Temperatura=100;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2264      	movs	r2, #100	@ 0x64
 80030a8:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
		 	}
		 	if(VelocidadAire<0 || VelocidadAire>100)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	db04      	blt.n	80030c0 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x80>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80030bc:	2b64      	cmp	r3, #100	@ 0x64
 80030be:	dd03      	ble.n	80030c8 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x88>
		 	{
		 		VelocidadAire=50;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2232      	movs	r2, #50	@ 0x32
 80030c4:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
		 	}
	  }

}
 80030c8:	bf00      	nop
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	200002b8 	.word	0x200002b8

080030d4 <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv>:
int CConfigurarPantallaMemoria::DameDireccionMemoria()
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
	int direccion=1;
 80030dc:	2301      	movs	r3, #1
 80030de:	60fb      	str	r3, [r7, #12]
	switch(NumeroMemoria)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80030e6:	2b03      	cmp	r3, #3
 80030e8:	d00c      	beq.n	8003104 <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv+0x30>
 80030ea:	2b03      	cmp	r3, #3
 80030ec:	dc0d      	bgt.n	800310a <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv+0x36>
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d002      	beq.n	80030f8 <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv+0x24>
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d003      	beq.n	80030fe <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv+0x2a>
 80030f6:	e008      	b.n	800310a <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv+0x36>
	{
	case 1:
		direccion=1;
 80030f8:	2301      	movs	r3, #1
 80030fa:	60fb      	str	r3, [r7, #12]
		break;
 80030fc:	e005      	b.n	800310a <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv+0x36>
	case 2:
		direccion=5;
 80030fe:	2305      	movs	r3, #5
 8003100:	60fb      	str	r3, [r7, #12]
		break;
 8003102:	e002      	b.n	800310a <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv+0x36>
	case 3:
		direccion=9;
 8003104:	2309      	movs	r3, #9
 8003106:	60fb      	str	r3, [r7, #12]
		break;
 8003108:	bf00      	nop
	}
	return direccion;
 800310a:	68fb      	ldr	r3, [r7, #12]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv>:
void CConfigurarPantallaMemoria::MuestraInformacion()
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]

	if(TemperaturaAnterior!=Temperatura)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800312c:	429a      	cmp	r2, r3
 800312e:	d01a      	beq.n	8003166 <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv+0x4e>
	{
		LabelTemperaturas->SetTexto((char*)"%d", Temperatura);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800313c:	461a      	mov	r2, r3
 800313e:	491d      	ldr	r1, [pc, #116]	@ (80031b4 <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv+0x9c>)
 8003140:	f7ff f9e6 	bl	8002510 <_ZN12CEtiquetaTft8SetTextoEPcz>
		LabelTemperaturas->Show();
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	3348      	adds	r3, #72	@ 0x48
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4610      	mov	r0, r2
 8003158:	4798      	blx	r3
		TemperaturaAnterior=Temperatura;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	}

	if( VelocidadAireAnterior!=VelocidadAire)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8003172:	429a      	cmp	r2, r3
 8003174:	d01a      	beq.n	80031ac <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv+0x94>
	{
		LabelAire->SetTexto((char*)"Aire: %d", VelocidadAire);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8003182:	461a      	mov	r2, r3
 8003184:	490c      	ldr	r1, [pc, #48]	@ (80031b8 <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv+0xa0>)
 8003186:	f7ff f9c3 	bl	8002510 <_ZN12CEtiquetaTft8SetTextoEPcz>
		LabelAire->Show();
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	3348      	adds	r3, #72	@ 0x48
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4610      	mov	r0, r2
 800319e:	4798      	blx	r3
		VelocidadAireAnterior=VelocidadAire;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	}
}
 80031ac:	bf00      	nop
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	0800ecf8 	.word	0x0800ecf8
 80031b8:	0800ecfc 	.word	0x0800ecfc

080031bc <_ZN26CConfigurarPantallaMemoria19OnPerillaIncrementoEv>:
void CConfigurarPantallaMemoria::OnPerillaIncremento()
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
	if(Temperatura<500)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80031ca:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80031ce:	da06      	bge.n	80031de <_ZN26CConfigurarPantallaMemoria19OnPerillaIncrementoEv+0x22>
		Temperatura++;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80031d6:	1c5a      	adds	r2, r3, #1
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <_ZThn48_N26CConfigurarPantallaMemoria19OnPerillaIncrementoEv>:
	virtual void Show();
	virtual void Refresca();
	virtual void SetMemoria(int numeroMemoria);
	virtual void OnPerillaIncremento();
 80031ea:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80031ee:	f7ff bfe5 	b.w	80031bc <_ZN26CConfigurarPantallaMemoria19OnPerillaIncrementoEv>

080031f2 <_ZN26CConfigurarPantallaMemoria19OnPerillaDecrementoEv>:
void CConfigurarPantallaMemoria::OnPerillaDecremento()
{
 80031f2:	b480      	push	{r7}
 80031f4:	b083      	sub	sp, #12
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
	if(Temperatura>0)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003200:	2b00      	cmp	r3, #0
 8003202:	dd06      	ble.n	8003212 <_ZN26CConfigurarPantallaMemoria19OnPerillaDecrementoEv+0x20>
		Temperatura--;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800320a:	1e5a      	subs	r2, r3, #1
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <_ZThn48_N26CConfigurarPantallaMemoria19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 800321e:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8003222:	f7ff bfe6 	b.w	80031f2 <_ZN26CConfigurarPantallaMemoria19OnPerillaDecrementoEv>
	...

08003228 <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv>:
void CConfigurarPantallaMemoria::OnBotonUnoClickEvent()
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b088      	sub	sp, #32
 800322c:	af04      	add	r7, sp, #16
 800322e:	6078      	str	r0, [r7, #4]
	//hay que guarar la informacion
 	uint16_t datos_w[2];

 	datos_w[0]=Temperatura;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003236:	b29b      	uxth	r3, r3
 8003238:	81bb      	strh	r3, [r7, #12]
 	datos_w[1]=VelocidadAire;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8003240:	b29b      	uxth	r3, r3
 8003242:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Mem_Write(&hi2c1,ADDRESS_EEPROM,DireccionMemoria,I2C_MEMADD_SIZE_8BIT,(uint8_t*)datos_w,4,HAL_MAX_DELAY);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800324a:	b29a      	uxth	r2, r3
 800324c:	f04f 33ff 	mov.w	r3, #4294967295
 8003250:	9302      	str	r3, [sp, #8]
 8003252:	2304      	movs	r3, #4
 8003254:	9301      	str	r3, [sp, #4]
 8003256:	f107 030c 	add.w	r3, r7, #12
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	2301      	movs	r3, #1
 800325e:	21a0      	movs	r1, #160	@ 0xa0
 8003260:	4804      	ldr	r0, [pc, #16]	@ (8003274 <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x4c>)
 8003262:	f005 fce3 	bl	8008c2c <HAL_I2C_Mem_Write>
	 ManejadorPantallas.MuestraMenuPrincipal();
 8003266:	4804      	ldr	r0, [pc, #16]	@ (8003278 <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x50>)
 8003268:	f000 f88e 	bl	8003388 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>
}
 800326c:	bf00      	nop
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	200002b8 	.word	0x200002b8
 8003278:	20000240 	.word	0x20000240

0800327c <_ZThn48_N26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv>:
	virtual void OnBotonUnoClickEvent();
 800327c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8003280:	f7ff bfd2 	b.w	8003228 <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv>

08003284 <_ZN26CConfigurarPantallaMemoria20OnBotonDosClickEventEv>:
void CConfigurarPantallaMemoria::OnBotonDosClickEvent()
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
	 ManejadorPantallas.MuestraMenuPrincipal();
 800328c:	4803      	ldr	r0, [pc, #12]	@ (800329c <_ZN26CConfigurarPantallaMemoria20OnBotonDosClickEventEv+0x18>)
 800328e:	f000 f87b 	bl	8003388 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>

}
 8003292:	bf00      	nop
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	20000240 	.word	0x20000240

080032a0 <_ZThn48_N26CConfigurarPantallaMemoria20OnBotonDosClickEventEv>:
	virtual void OnBotonDosClickEvent();
 80032a0:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80032a4:	f7ff bfee 	b.w	8003284 <_ZN26CConfigurarPantallaMemoria20OnBotonDosClickEventEv>

080032a8 <_ZN19CManejadorPantallasC1Ev>:
#include "GUI/PantallaManual/CPantallaManual.hpp"
#include <GUI/PantallaMenuPrincipal/CMenuPrincipal.h>
#include <stdio.h>
#include <GUI/ConfigurarPantallaMemoria/CConfigurarPantallaMemoria.hpp>

CManejadorPantallas::CManejadorPantallas()
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	4a0f      	ldr	r2, [pc, #60]	@ (80032f0 <_ZN19CManejadorPantallasC1Ev+0x48>)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	605a      	str	r2, [r3, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	609a      	str	r2, [r3, #8]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	60da      	str	r2, [r3, #12]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	611a      	str	r2, [r3, #16]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	615a      	str	r2, [r3, #20]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	619a      	str	r2, [r3, #24]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
{
	// TODO Auto-generated constructor stub
}
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4618      	mov	r0, r3
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	0800f1e0 	.word	0x0800f1e0

080032f4 <_ZN19CManejadorPantallasD1Ev>:

CManejadorPantallas::~CManejadorPantallas()
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	4a04      	ldr	r2, [pc, #16]	@ (8003310 <_ZN19CManejadorPantallasD1Ev+0x1c>)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4618      	mov	r0, r3
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	0800f1e0 	.word	0x0800f1e0

08003314 <_ZN19CManejadorPantallasD0Ev>:
CManejadorPantallas::~CManejadorPantallas()
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
}
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7ff ffe9 	bl	80032f4 <_ZN19CManejadorPantallasD1Ev>
 8003322:	212c      	movs	r1, #44	@ 0x2c
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f008 fe27 	bl	800bf78 <_ZdlPvj>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4618      	mov	r0, r3
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <_ZN19CManejadorPantallas11SetEstacionEP13CEstacionBase>:
void CManejadorPantallas::SetEstacion(CEstacionBase* estacion)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
	Estacion=estacion;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	605a      	str	r2, [r3, #4]
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>:
void CManejadorPantallas::MuestraPantallaManual()
{
 8003350:	b590      	push	{r4, r7, lr}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
	if(pantallaManual==NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d109      	bne.n	8003374 <_ZN19CManejadorPantallas21MuestraPantallaManualEv+0x24>
		pantallaManual=new CPantallaManual();
 8003360:	20e8      	movs	r0, #232	@ 0xe8
 8003362:	f008 fe0b 	bl	800bf7c <_Znwj>
 8003366:	4603      	mov	r3, r0
 8003368:	461c      	mov	r4, r3
 800336a:	4620      	mov	r0, r4
 800336c:	f000 fd38 	bl	8003de0 <_ZN15CPantallaManualC1Ev>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	615c      	str	r4, [r3, #20]
	AsignaPantallaActual(pantallaManual);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	4619      	mov	r1, r3
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f834 	bl	80033e8 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	bd90      	pop	{r4, r7, pc}

08003388 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>:
void CManejadorPantallas::MuestraMenuPrincipal()
{
 8003388:	b590      	push	{r4, r7, lr}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
	if(menuPrincipal==NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d109      	bne.n	80033ac <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv+0x24>
		menuPrincipal=new CMenuPrincipal();
 8003398:	20c0      	movs	r0, #192	@ 0xc0
 800339a:	f008 fdef 	bl	800bf7c <_Znwj>
 800339e:	4603      	mov	r3, r0
 80033a0:	461c      	mov	r4, r3
 80033a2:	4620      	mov	r0, r4
 80033a4:	f001 faf6 	bl	8004994 <_ZN14CMenuPrincipalC1Ev>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	619c      	str	r4, [r3, #24]
	AsignaPantallaActual(menuPrincipal);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	4619      	mov	r1, r3
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f818 	bl	80033e8 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd90      	pop	{r4, r7, pc}

080033c0 <_ZN19CManejadorPantallas16RefrescaPantallaEv>:

void CManejadorPantallas::RefrescaPantalla()
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
	CambiaPantalla();
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f81f 	bl	800340c <_ZN19CManejadorPantallas14CambiaPantallaEv>
	PantallaActual->Refresca();
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68da      	ldr	r2, [r3, #12]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	3354      	adds	r3, #84	@ 0x54
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4610      	mov	r0, r2
 80033de:	4798      	blx	r3
}
 80033e0:	bf00      	nop
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>:
void CManejadorPantallas::AsignaPantallaActual(CPantallaBase* pantalla)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
	PantallaPendinteCambiar=pantalla;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	609a      	str	r2, [r3, #8]
	CambioPantalla=true;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <_ZN19CManejadorPantallas14CambiaPantallaEv>:
void CManejadorPantallas::CambiaPantalla()
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
	if(	CambioPantalla==false)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800341a:	2b00      	cmp	r3, #0
 800341c:	d038      	beq.n	8003490 <_ZN19CManejadorPantallas14CambiaPantallaEv+0x84>
		return;
	if(PantallaActual!=NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d008      	beq.n	8003438 <_ZN19CManejadorPantallas14CambiaPantallaEv+0x2c>
		PantallaActual->Ocultar();
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	3360      	adds	r3, #96	@ 0x60
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4610      	mov	r0, r2
 8003436:	4798      	blx	r3
	PantallaAnterior=PantallaActual;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68da      	ldr	r2, [r3, #12]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	611a      	str	r2, [r3, #16]
	PantallaActual=PantallaPendinteCambiar;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	60da      	str	r2, [r3, #12]
	PantallaActual->SetEstacion(Estacion);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68d8      	ldr	r0, [r3, #12]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	3358      	adds	r3, #88	@ 0x58
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6852      	ldr	r2, [r2, #4]
 800345a:	4611      	mov	r1, r2
 800345c:	4798      	blx	r3
	PantallaActual->SetManejadorControles(ManejadorControles);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68d8      	ldr	r0, [r3, #12]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	335c      	adds	r3, #92	@ 0x5c
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	69d2      	ldr	r2, [r2, #28]
 8003470:	4611      	mov	r1, r2
 8003472:	4798      	blx	r3
	PantallaActual->Show();
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68da      	ldr	r2, [r3, #12]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	3348      	adds	r3, #72	@ 0x48
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4610      	mov	r0, r2
 8003484:	4798      	blx	r3
	CambioPantalla=false;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800348e:	e000      	b.n	8003492 <_ZN19CManejadorPantallas14CambiaPantallaEv+0x86>
		return;
 8003490:	bf00      	nop
}
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <_ZN19CManejadorPantallas21SetManejadorControlesEP19CManejadorControles>:

void CManejadorPantallas::SetManejadorControles(CManejadorControles* manejador)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
	ManejadorControles=manejador;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	61da      	str	r2, [r3, #28]
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <_ZN19CManejadorPantallas35MuestraPantallaConfiguracionMemoriaEi>:

void CManejadorPantallas::MuestraPantallaConfiguracionMemoria(int meoria)
{
 80034b4:	b590      	push	{r4, r7, lr}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
	if(ConfigurarPantallaMemoria==NULL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d109      	bne.n	80034da <_ZN19CManejadorPantallas35MuestraPantallaConfiguracionMemoriaEi+0x26>
		ConfigurarPantallaMemoria=new CConfigurarPantallaMemoria();
 80034c6:	20e0      	movs	r0, #224	@ 0xe0
 80034c8:	f008 fd58 	bl	800bf7c <_Znwj>
 80034cc:	4603      	mov	r3, r0
 80034ce:	461c      	mov	r4, r3
 80034d0:	4620      	mov	r0, r4
 80034d2:	f7ff fc01 	bl	8002cd8 <_ZN26CConfigurarPantallaMemoriaC1Ev>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	621c      	str	r4, [r3, #32]
	ConfigurarPantallaMemoria->SetMemoria(meoria);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1a      	ldr	r2, [r3, #32]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	336c      	adds	r3, #108	@ 0x6c
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6839      	ldr	r1, [r7, #0]
 80034ea:	4610      	mov	r0, r2
 80034ec:	4798      	blx	r3
	AsignaPantallaActual(ConfigurarPantallaMemoria);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	4619      	mov	r1, r3
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f7ff ff77 	bl	80033e8 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd90      	pop	{r4, r7, pc}

08003502 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>:
void CManejadorPantallas::MuestraPantallaMemoria(int memoria)
{
 8003502:	b590      	push	{r4, r7, lr}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
 800350a:	6039      	str	r1, [r7, #0]
	if(PantallaMemoria==NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10a      	bne.n	800352a <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi+0x28>
		PantallaMemoria=new CPantallaMemoria();
 8003514:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003518:	f008 fd30 	bl	800bf7c <_Znwj>
 800351c:	4603      	mov	r3, r0
 800351e:	461c      	mov	r4, r3
 8003520:	4620      	mov	r0, r4
 8003522:	f001 f83d 	bl	80045a0 <_ZN16CPantallaMemoriaC1Ev>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	625c      	str	r4, [r3, #36]	@ 0x24
	PantallaMemoria->SetMemoria(memoria);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352e:	6839      	ldr	r1, [r7, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f001 f8ff 	bl	8004734 <_ZN16CPantallaMemoria10SetMemoriaEi>
	AsignaPantallaActual(PantallaMemoria);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353a:	4619      	mov	r1, r3
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7ff ff53 	bl	80033e8 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>

}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	bd90      	pop	{r4, r7, pc}
	...

0800354c <_ZN20CManejadorEventoMenuC1Ev>:
 *      Author: W10
 */

#include <GUI/Menu/CManejadorEventoMenu.hpp>

CManejadorEventoMenu::CManejadorEventoMenu()
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	4a04      	ldr	r2, [pc, #16]	@ (8003568 <_ZN20CManejadorEventoMenuC1Ev+0x1c>)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4618      	mov	r0, r3
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	0800f1f0 	.word	0x0800f1f0

0800356c <_ZN20CManejadorEventoMenuD1Ev>:

CManejadorEventoMenu::~CManejadorEventoMenu()
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	4a04      	ldr	r2, [pc, #16]	@ (8003588 <_ZN20CManejadorEventoMenuD1Ev+0x1c>)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4618      	mov	r0, r3
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	0800f1f0 	.word	0x0800f1f0

0800358c <_ZN20CManejadorEventoMenuD0Ev>:
CManejadorEventoMenu::~CManejadorEventoMenu()
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
}
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7ff ffe9 	bl	800356c <_ZN20CManejadorEventoMenuD1Ev>
 800359a:	2104      	movs	r1, #4
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f008 fceb 	bl	800bf78 <_ZdlPvj>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4618      	mov	r0, r3
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <_ZN20CManejadorEventoMenu11OnMenuEventEi>:

void CManejadorEventoMenu::OnMenuEvent(int identificador)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]

}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
	...

080035c4 <_ZN5CMenuC1Eiiiiiii>:
 */

#include <GUI/Menu/CMenu.hpp>
#include "GUI/CRectanguloTft.hpp"

CMenu::CMenu(int xi, int yi, int ancho, int alto,int backColor, int contorno, int colorContorno):
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b088      	sub	sp, #32
 80035c8:	af04      	add	r7, sp, #16
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
 80035d0:	603b      	str	r3, [r7, #0]
	CRectanguloTft(xi,yi,ancho,alto,backColor,contorno,colorContorno)
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d6:	9303      	str	r3, [sp, #12]
 80035d8:	6a3b      	ldr	r3, [r7, #32]
 80035da:	9302      	str	r3, [sp, #8]
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	9301      	str	r3, [sp, #4]
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	68b9      	ldr	r1, [r7, #8]
 80035ea:	f7ff fa9d 	bl	8002b28 <_ZN14CRectanguloTftC1Eiiiiiii>
 80035ee:	4a0c      	ldr	r2, [pc, #48]	@ (8003620 <_ZN5CMenuC1Eiiiiiii+0x5c>)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2219      	movs	r2, #25
 80035f8:	651a      	str	r2, [r3, #80]	@ 0x50
{
	// TODO Auto-generated constructor stub
	Opciones=NULL;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	631a      	str	r2, [r3, #48]	@ 0x30
	ItemInicial=NULL;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	635a      	str	r2, [r3, #52]	@ 0x34
	ItemsXPagina=alto/(AnchoItem+5);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800360a:	3305      	adds	r3, #5
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	fb92 f2f3 	sdiv	r2, r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	0800f204 	.word	0x0800f204

08003624 <_ZN5CMenuD1Ev>:

CMenu::~CMenu()
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	4a05      	ldr	r2, [pc, #20]	@ (8003644 <_ZN5CMenuD1Ev+0x20>)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff fa55 	bl	8002ae4 <_ZN14CRectanguloTftD1Ev>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4618      	mov	r0, r3
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	0800f204 	.word	0x0800f204

08003648 <_ZN5CMenuD0Ev>:
CMenu::~CMenu()
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
}
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7ff ffe7 	bl	8003624 <_ZN5CMenuD1Ev>
 8003656:	2180      	movs	r1, #128	@ 0x80
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f008 fc8d 	bl	800bf78 <_ZdlPvj>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4618      	mov	r0, r3
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <_ZN5CMenu4ShowEv>:

void CMenu::Show()
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
//	int y;
	CRectanguloTft::Show();
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4618      	mov	r0, r3
 8003674:	f7ff fa8a 	bl	8002b8c <_ZN14CRectanguloTft4ShowEv>
	CMenuItem* tmp=ItemInicial;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800367c:	60fb      	str	r3, [r7, #12]
	while(tmp!=NULL)
 800367e:	e012      	b.n	80036a6 <_ZN5CMenu4ShowEv+0x3e>
	{
//		y=tmp->DamePosicionY()+tmp->DameAltura();
		//Si cabe en altura, lo muestro
		if(SePuedeMostrar(tmp)==false)
 8003680:	68f9      	ldr	r1, [r7, #12]
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f8c4 	bl	8003810 <_ZN5CMenu14SePuedeMostrarEP9CMenuItem>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	bf0c      	ite	eq
 800368e:	2301      	moveq	r3, #1
 8003690:	2300      	movne	r3, #0
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10a      	bne.n	80036ae <_ZN5CMenu4ShowEv+0x46>
		{
			return;
		}
		tmp->Show();
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 fa94 	bl	8003bc6 <_ZN9CMenuItem4ShowEv>
		tmp=tmp->DameSiguiente();
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 fb20 	bl	8003ce4 <_ZN9CMenuItem13DameSiguienteEv>
 80036a4:	60f8      	str	r0, [r7, #12]
	while(tmp!=NULL)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1e9      	bne.n	8003680 <_ZN5CMenu4ShowEv+0x18>
 80036ac:	e000      	b.n	80036b0 <_ZN5CMenu4ShowEv+0x48>
			return;
 80036ae:	bf00      	nop
	}
}
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <_ZN5CMenu18AsignaColoresItemsEiiii>:

void CMenu::AsignaColoresItems(int colorTexto, int colorFondo, int colorTextoResaltado, int solorFondoResaltado)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b085      	sub	sp, #20
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	60f8      	str	r0, [r7, #12]
 80036be:	60b9      	str	r1, [r7, #8]
 80036c0:	607a      	str	r2, [r7, #4]
 80036c2:	603b      	str	r3, [r7, #0]
	ColorTexto=colorTexto;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	63da      	str	r2, [r3, #60]	@ 0x3c
	ColorFondo=colorFondo;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	641a      	str	r2, [r3, #64]	@ 0x40
	ColoTextoSeleccionado=colorTextoResaltado;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	645a      	str	r2, [r3, #68]	@ 0x44
	ColorFondoSeleccionado=solorFondoResaltado;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80036dc:	bf00      	nop
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <_ZN5CMenu8CreaItemEPcib>:

CMenuItem* CMenu::CreaItem(char* texto, int identificador,bool seleccionado)
{
 80036e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ea:	b091      	sub	sp, #68	@ 0x44
 80036ec:	af08      	add	r7, sp, #32
 80036ee:	6178      	str	r0, [r7, #20]
 80036f0:	6139      	str	r1, [r7, #16]
 80036f2:	60fa      	str	r2, [r7, #12]
 80036f4:	72fb      	strb	r3, [r7, #11]
	CEtiquetaTft* etiquetaTmp=new CEtiquetaTft(Xi, Yi, Ancho, AnchoItem, ColorFondo,texto, ColorTexto, 3, 0, ColorFondo);
 80036f6:	20a4      	movs	r0, #164	@ 0xa4
 80036f8:	f008 fc40 	bl	800bf7c <_Znwj>
 80036fc:	4603      	mov	r3, r0
 80036fe:	461c      	mov	r4, r3
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	699d      	ldr	r5, [r3, #24]
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	69de      	ldr	r6, [r3, #28]
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	607b      	str	r3, [r7, #4]
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003716:	6979      	ldr	r1, [r7, #20]
 8003718:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 800371a:	6978      	ldr	r0, [r7, #20]
 800371c:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 800371e:	9006      	str	r0, [sp, #24]
 8003720:	2000      	movs	r0, #0
 8003722:	9005      	str	r0, [sp, #20]
 8003724:	2003      	movs	r0, #3
 8003726:	9004      	str	r0, [sp, #16]
 8003728:	9103      	str	r1, [sp, #12]
 800372a:	6939      	ldr	r1, [r7, #16]
 800372c:	9102      	str	r1, [sp, #8]
 800372e:	9201      	str	r2, [sp, #4]
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4632      	mov	r2, r6
 8003736:	4629      	mov	r1, r5
 8003738:	4620      	mov	r0, r4
 800373a:	f7fe feaf 	bl	800249c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 800373e:	61fc      	str	r4, [r7, #28]
	CMenuItem* tmp=new CMenuItem(etiquetaTmp,identificador,seleccionado);
 8003740:	2028      	movs	r0, #40	@ 0x28
 8003742:	f008 fc1b 	bl	800bf7c <_Znwj>
 8003746:	4603      	mov	r3, r0
 8003748:	461c      	mov	r4, r3
 800374a:	7afb      	ldrb	r3, [r7, #11]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	69f9      	ldr	r1, [r7, #28]
 8003750:	4620      	mov	r0, r4
 8003752:	f000 f9db 	bl	8003b0c <_ZN9CMenuItemC1EP12CEtiquetaTftib>
 8003756:	61bc      	str	r4, [r7, #24]
	tmp->AsignaColores(ColorTexto, ColorFondo, ColoTextoSeleccionado, ColorFondoSeleccionado);
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	4603      	mov	r3, r0
 800376c:	69b8      	ldr	r0, [r7, #24]
 800376e:	f000 fa61 	bl	8003c34 <_ZN9CMenuItem13AsignaColoresEiiii>
	return tmp;
 8003772:	69bb      	ldr	r3, [r7, #24]
}
 8003774:	4618      	mov	r0, r3
 8003776:	3724      	adds	r7, #36	@ 0x24
 8003778:	46bd      	mov	sp, r7
 800377a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800377c <_ZN5CMenu10AgregaItemEPcib>:

void CMenu::AgregaItem(char* texto, int identificador,bool seleccionado)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
 8003788:	70fb      	strb	r3, [r7, #3]
	CMenuItem* tmp=CreaItem(texto,identificador,seleccionado);
 800378a:	78fb      	ldrb	r3, [r7, #3]
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	68b9      	ldr	r1, [r7, #8]
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f7ff ffa9 	bl	80036e8 <_ZN5CMenu8CreaItemEPcib>
 8003796:	6178      	str	r0, [r7, #20]
	if(Opciones==NULL)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379c:	2b00      	cmp	r3, #0
 800379e:	d111      	bne.n	80037c4 <_ZN5CMenu10AgregaItemEPcib+0x48>
	{
		Opciones=tmp;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	631a      	str	r2, [r3, #48]	@ 0x30
		Opciones->Selecciona(true);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037aa:	2101      	movs	r1, #1
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 fa5a 	bl	8003c66 <_ZN9CMenuItem10SeleccionaEb>
		Seleccionado=Opciones;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	639a      	str	r2, [r3, #56]	@ 0x38
		ItemInicial=Opciones;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	635a      	str	r2, [r3, #52]	@ 0x34
		return;
 80037c2:	e00e      	b.n	80037e2 <_ZN5CMenu10AgregaItemEPcib+0x66>
	}
	Opciones->AgregaAlFinal(tmp);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c8:	6979      	ldr	r1, [r7, #20]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 f9e2 	bl	8003b94 <_ZN9CMenuItem13AgregaAlFinalEPS_>
	CalaculaPosicionItems(Opciones);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d4:	4619      	mov	r1, r3
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 f806 	bl	80037e8 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem>
	CalculaPaginas();
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 f911 	bl	8003a04 <_ZN5CMenu14CalculaPaginasEv>
}
 80037e2:	3718      	adds	r7, #24
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem>:

void CMenu::CalaculaPosicionItems(CMenuItem* raiz)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
	if(raiz==NULL)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d007      	beq.n	8003808 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem+0x20>
		return;
	raiz->CalculaPosicionY(Yi+5);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	3305      	adds	r3, #5
 80037fe:	4619      	mov	r1, r3
 8003800:	6838      	ldr	r0, [r7, #0]
 8003802:	f000 fa40 	bl	8003c86 <_ZN9CMenuItem16CalculaPosicionYEi>
 8003806:	e000      	b.n	800380a <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem+0x22>
		return;
 8003808:	bf00      	nop
}
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <_ZN5CMenu14SePuedeMostrarEP9CMenuItem>:
bool CMenu::SePuedeMostrar(CMenuItem *item)
{
 8003810:	b590      	push	{r4, r7, lr}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
	int y=item->DamePosicionY()+item->DameAltura();
 800381a:	6838      	ldr	r0, [r7, #0]
 800381c:	f000 fa6e 	bl	8003cfc <_ZN9CMenuItem13DamePosicionYEv>
 8003820:	4604      	mov	r4, r0
 8003822:	6838      	ldr	r0, [r7, #0]
 8003824:	f000 fa78 	bl	8003d18 <_ZN9CMenuItem10DameAlturaEv>
 8003828:	4603      	mov	r3, r0
 800382a:	4423      	add	r3, r4
 800382c:	60fb      	str	r3, [r7, #12]
	//Si cabe en altura, lo muestro
	if(y> Yi+Alto)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69da      	ldr	r2, [r3, #28]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003836:	4413      	add	r3, r2
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	429a      	cmp	r2, r3
 800383c:	dd01      	ble.n	8003842 <_ZN5CMenu14SePuedeMostrarEP9CMenuItem+0x32>
		return false;
 800383e:	2300      	movs	r3, #0
 8003840:	e000      	b.n	8003844 <_ZN5CMenu14SePuedeMostrarEP9CMenuItem+0x34>
	return true;
 8003842:	2301      	movs	r3, #1
}
 8003844:	4618      	mov	r0, r3
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	bd90      	pop	{r4, r7, pc}

0800384c <_ZN5CMenu21OnSeleccionaSiguienteEv>:
void CMenu::OnSeleccionaSiguiente()
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
	if(Opciones==NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003858:	2b00      	cmp	r3, #0
 800385a:	d03f      	beq.n	80038dc <_ZN5CMenu21OnSeleccionaSiguienteEv+0x90>
		return;
	CMenuItem* tmp=Seleccionado;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003860:	60fb      	str	r3, [r7, #12]
	CMenuItem* siguiente;
	//me muevo hasta encontrar el que esta seleccionado
	while(tmp!=NULL)
 8003862:	e037      	b.n	80038d4 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x88>
	{
		if(tmp->EstaSeleccionado())
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 fa65 	bl	8003d34 <_ZN9CMenuItem16EstaSeleccionadoEv>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d02d      	beq.n	80038cc <_ZN5CMenu21OnSeleccionaSiguienteEv+0x80>
		{
			siguiente=tmp->DameSiguiente();
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f000 fa37 	bl	8003ce4 <_ZN9CMenuItem13DameSiguienteEv>
 8003876:	60b8      	str	r0, [r7, #8]
			if(siguiente==NULL)
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d030      	beq.n	80038e0 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x94>
				return;
			tmp->Selecciona(false);
 800387e:	2100      	movs	r1, #0
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 f9f0 	bl	8003c66 <_ZN9CMenuItem10SeleccionaEb>
			siguiente->Selecciona(true);
 8003886:	2101      	movs	r1, #1
 8003888:	68b8      	ldr	r0, [r7, #8]
 800388a:	f000 f9ec 	bl	8003c66 <_ZN9CMenuItem10SeleccionaEb>
			Seleccionado=siguiente;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	639a      	str	r2, [r3, #56]	@ 0x38
			if(SePuedeMostrar(siguiente))
 8003894:	68b9      	ldr	r1, [r7, #8]
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7ff ffba 	bl	8003810 <_ZN5CMenu14SePuedeMostrarEP9CMenuItem>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d006      	beq.n	80038b0 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x64>
			{
				tmp->Show();
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 f98f 	bl	8003bc6 <_ZN9CMenuItem4ShowEv>
				siguiente->Show();
 80038a8:	68b8      	ldr	r0, [r7, #8]
 80038aa:	f000 f98c 	bl	8003bc6 <_ZN9CMenuItem4ShowEv>
				return;
 80038ae:	e018      	b.n	80038e2 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x96>
			}
			else
			{
				//hago una paginacion hacia abajo
				CalaculaPosicionItems(siguiente);
 80038b0:	68b9      	ldr	r1, [r7, #8]
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7ff ff98 	bl	80037e8 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem>
				ItemInicial=siguiente;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	635a      	str	r2, [r3, #52]	@ 0x34
				Show();
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	3348      	adds	r3, #72	@ 0x48
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	4798      	blx	r3
				return;
 80038ca:	e00a      	b.n	80038e2 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x96>
			}
		}
		tmp=tmp->DameSiguiente();
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 fa09 	bl	8003ce4 <_ZN9CMenuItem13DameSiguienteEv>
 80038d2:	60f8      	str	r0, [r7, #12]
	while(tmp!=NULL)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1c4      	bne.n	8003864 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x18>
 80038da:	e002      	b.n	80038e2 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x96>
		return;
 80038dc:	bf00      	nop
 80038de:	e000      	b.n	80038e2 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x96>
				return;
 80038e0:	bf00      	nop
	}

}
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <_ZN5CMenu20OnSeleccionaAnteriorEv>:
void CMenu::OnSeleccionaAnterior()
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
	if(Opciones==NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d05c      	beq.n	80039b2 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xca>
		return;
	CMenuItem* tmp=Seleccionado;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038fc:	617b      	str	r3, [r7, #20]
	CMenuItem* anterior;
	while(tmp!=NULL)
 80038fe:	e054      	b.n	80039aa <_ZN5CMenu20OnSeleccionaAnteriorEv+0xc2>
	{
		if(tmp->EstaSeleccionado())
 8003900:	6978      	ldr	r0, [r7, #20]
 8003902:	f000 fa17 	bl	8003d34 <_ZN9CMenuItem16EstaSeleccionadoEv>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d04a      	beq.n	80039a2 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xba>
		{
			anterior=tmp->DameAnterior();
 800390c:	6978      	ldr	r0, [r7, #20]
 800390e:	f000 fa1e 	bl	8003d4e <_ZN9CMenuItem12DameAnteriorEv>
 8003912:	60f8      	str	r0, [r7, #12]
			if(anterior==NULL)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d04d      	beq.n	80039b6 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xce>
				return;
			tmp->Selecciona(false);
 800391a:	2100      	movs	r1, #0
 800391c:	6978      	ldr	r0, [r7, #20]
 800391e:	f000 f9a2 	bl	8003c66 <_ZN9CMenuItem10SeleccionaEb>
			anterior->Selecciona(true);
 8003922:	2101      	movs	r1, #1
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f000 f99e 	bl	8003c66 <_ZN9CMenuItem10SeleccionaEb>
			Seleccionado=anterior;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	639a      	str	r2, [r3, #56]	@ 0x38
			if(EstaInicioPagina(tmp)==false)
 8003930:	6979      	ldr	r1, [r7, #20]
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f8bb 	bl	8003aae <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	bf0c      	ite	eq
 800393e:	2301      	moveq	r3, #1
 8003940:	2300      	movne	r3, #0
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	d006      	beq.n	8003956 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x6e>
			{
				tmp->Show();
 8003948:	6978      	ldr	r0, [r7, #20]
 800394a:	f000 f93c 	bl	8003bc6 <_ZN9CMenuItem4ShowEv>
				anterior->Show();
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 f939 	bl	8003bc6 <_ZN9CMenuItem4ShowEv>
				return;
 8003954:	e030      	b.n	80039b8 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xd0>
			}
			else
			{
				//hago una paginacion hacia arriba
				//regreso ItemsXPagina para calcular la pagina
				int itemsContados=ItemsXPagina;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800395a:	613b      	str	r3, [r7, #16]
				while(tmp!=NULL && itemsContados>0)
 800395c:	e00b      	b.n	8003976 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x8e>
				{
					anterior=tmp->DameAnterior();
 800395e:	6978      	ldr	r0, [r7, #20]
 8003960:	f000 f9f5 	bl	8003d4e <_ZN9CMenuItem12DameAnteriorEv>
 8003964:	60f8      	str	r0, [r7, #12]
					itemsContados--;
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	3b01      	subs	r3, #1
 800396a:	613b      	str	r3, [r7, #16]
					if(anterior==NULL)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d008      	beq.n	8003984 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x9c>
						break;
					tmp=anterior;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	617b      	str	r3, [r7, #20]
				while(tmp!=NULL && itemsContados>0)
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d004      	beq.n	8003986 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x9e>
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	2b00      	cmp	r3, #0
 8003980:	dced      	bgt.n	800395e <_ZN5CMenu20OnSeleccionaAnteriorEv+0x76>
 8003982:	e000      	b.n	8003986 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x9e>
						break;
 8003984:	bf00      	nop
				}
				CalaculaPosicionItems(tmp);
 8003986:	6979      	ldr	r1, [r7, #20]
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7ff ff2d 	bl	80037e8 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem>
				ItemInicial=tmp;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	635a      	str	r2, [r3, #52]	@ 0x34
				Show();
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	3348      	adds	r3, #72	@ 0x48
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	4798      	blx	r3
				return;
 80039a0:	e00a      	b.n	80039b8 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xd0>
			}
		}
		tmp=tmp->DameAnterior();
 80039a2:	6978      	ldr	r0, [r7, #20]
 80039a4:	f000 f9d3 	bl	8003d4e <_ZN9CMenuItem12DameAnteriorEv>
 80039a8:	6178      	str	r0, [r7, #20]
	while(tmp!=NULL)
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1a7      	bne.n	8003900 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x18>
 80039b0:	e002      	b.n	80039b8 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xd0>
		return;
 80039b2:	bf00      	nop
 80039b4:	e000      	b.n	80039b8 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xd0>
				return;
 80039b6:	bf00      	nop
	}

}
 80039b8:	3718      	adds	r7, #24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <_ZN5CMenu19OnClickSeleccionadoEv>:
void CMenu::OnClickSeleccionado()
{
 80039be:	b5b0      	push	{r4, r5, r7, lr}
 80039c0:	b082      	sub	sp, #8
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
	if(Manejador==NULL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d014      	beq.n	80039f8 <_ZN5CMenu19OnClickSeleccionadoEv+0x3a>
		return;
	if(Seleccionado==NULL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d012      	beq.n	80039fc <_ZN5CMenu19OnClickSeleccionadoEv+0x3e>
		return;
	Manejador->OnMenuEvent(Seleccionado->DameIdentificador());
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6fdd      	ldr	r5, [r3, #124]	@ 0x7c
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	3308      	adds	r3, #8
 80039e2:	681c      	ldr	r4, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 f9bc 	bl	8003d66 <_ZN9CMenuItem17DameIdentificadorEv>
 80039ee:	4603      	mov	r3, r0
 80039f0:	4619      	mov	r1, r3
 80039f2:	4628      	mov	r0, r5
 80039f4:	47a0      	blx	r4
 80039f6:	e002      	b.n	80039fe <_ZN5CMenu19OnClickSeleccionadoEv+0x40>
		return;
 80039f8:	bf00      	nop
 80039fa:	e000      	b.n	80039fe <_ZN5CMenu19OnClickSeleccionadoEv+0x40>
		return;
 80039fc:	bf00      	nop
}
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bdb0      	pop	{r4, r5, r7, pc}

08003a04 <_ZN5CMenu14CalculaPaginasEv>:
void CMenu::CalculaPaginas()
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
	LimpiaPaginas();
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f833 	bl	8003a78 <_ZN5CMenu13LimpiaPaginasEv>
	int conteoItems=0;
 8003a12:	2300      	movs	r3, #0
 8003a14:	617b      	str	r3, [r7, #20]
	int numeroPagina=0;
 8003a16:	2300      	movs	r3, #0
 8003a18:	613b      	str	r3, [r7, #16]
	Paginas[numeroPagina]=Opciones;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	3314      	adds	r3, #20
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	440b      	add	r3, r1
 8003a28:	605a      	str	r2, [r3, #4]
	CMenuItem* tmp=Opciones;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2e:	60fb      	str	r3, [r7, #12]
	while(tmp!=NULL)
 8003a30:	e01a      	b.n	8003a68 <_ZN5CMenu14CalculaPaginasEv+0x64>
	{
		if(conteoItems%ItemsXPagina==0)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	fb93 f1f2 	sdiv	r1, r3, r2
 8003a3c:	fb01 f202 	mul.w	r2, r1, r2
 8003a40:	1a9b      	subs	r3, r3, r2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d109      	bne.n	8003a5a <_ZN5CMenu14CalculaPaginasEv+0x56>
		{
			Paginas[numeroPagina]=tmp;
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	3314      	adds	r3, #20
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4413      	add	r3, r2
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	605a      	str	r2, [r3, #4]
			numeroPagina++;
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	3301      	adds	r3, #1
 8003a58:	613b      	str	r3, [r7, #16]
		}
		conteoItems++;
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	617b      	str	r3, [r7, #20]
		tmp=tmp->DameSiguiente();
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 f93f 	bl	8003ce4 <_ZN9CMenuItem13DameSiguienteEv>
 8003a66:	60f8      	str	r0, [r7, #12]
	while(tmp!=NULL)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1e1      	bne.n	8003a32 <_ZN5CMenu14CalculaPaginasEv+0x2e>
	}
}
 8003a6e:	bf00      	nop
 8003a70:	bf00      	nop
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <_ZN5CMenu13LimpiaPaginasEv>:

void CMenu::LimpiaPaginas()
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
	for(int i=0;i<MaximoPaginas;i++)
 8003a80:	2300      	movs	r3, #0
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	e009      	b.n	8003a9a <_ZN5CMenu13LimpiaPaginasEv+0x22>
	{
		Paginas[i]=NULL;
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	3314      	adds	r3, #20
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4413      	add	r3, r2
 8003a90:	2200      	movs	r2, #0
 8003a92:	605a      	str	r2, [r3, #4]
	for(int i=0;i<MaximoPaginas;i++)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	3301      	adds	r3, #1
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2b09      	cmp	r3, #9
 8003a9e:	ddf2      	ble.n	8003a86 <_ZN5CMenu13LimpiaPaginasEv+0xe>
	}
}
 8003aa0:	bf00      	nop
 8003aa2:	bf00      	nop
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem>:

bool CMenu::EstaInicioPagina(CMenuItem* item)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b085      	sub	sp, #20
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
 8003ab6:	6039      	str	r1, [r7, #0]
	for(int i=0;i<MaximoPaginas;i++)
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	e00d      	b.n	8003ada <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem+0x2c>
	{
		if(Paginas[i]==item)
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	3314      	adds	r3, #20
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4413      	add	r3, r2
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d101      	bne.n	8003ad4 <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem+0x26>
			return true;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e006      	b.n	8003ae2 <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem+0x34>
	for(int i=0;i<MaximoPaginas;i++)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	60fb      	str	r3, [r7, #12]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2b09      	cmp	r3, #9
 8003ade:	ddee      	ble.n	8003abe <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem+0x10>
	}
	return false;
 8003ae0:	2300      	movs	r3, #0

}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <_ZN5CMenu26AsignaManejadorEventosMenuEP20CManejadorEventoMenu>:
void CMenu::AsignaManejadorEventosMenu(CManejadorEventoMenu *manejador)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
 8003af6:	6039      	str	r1, [r7, #0]
	Manejador=manejador;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
	...

08003b0c <_ZN9CMenuItemC1EP12CEtiquetaTftib>:
 *      Author: W10
 */

#include <GUI/Menu/CMenuItem.hpp>

CMenuItem::CMenuItem(CEtiquetaTft* etiqueta,int identificador,bool seleccionado)
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
 8003b18:	70fb      	strb	r3, [r7, #3]
 8003b1a:	4a0d      	ldr	r2, [pc, #52]	@ (8003b50 <_ZN9CMenuItemC1EP12CEtiquetaTftib+0x44>)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub
	Etiqueta=etiqueta;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	605a      	str	r2, [r3, #4]
	Siguiente=NULL;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	609a      	str	r2, [r3, #8]
	Anterior=NULL;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	60da      	str	r2, [r3, #12]
	Identificador=identificador;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	611a      	str	r2, [r3, #16]
	Seleccionado=seleccionado;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	78fa      	ldrb	r2, [r7, #3]
 8003b3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4618      	mov	r0, r3
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	0800f260 	.word	0x0800f260

08003b54 <_ZN9CMenuItemD1Ev>:

CMenuItem::~CMenuItem()
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	4a04      	ldr	r2, [pc, #16]	@ (8003b70 <_ZN9CMenuItemD1Ev+0x1c>)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4618      	mov	r0, r3
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	0800f260 	.word	0x0800f260

08003b74 <_ZN9CMenuItemD0Ev>:
CMenuItem::~CMenuItem()
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
}
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f7ff ffe9 	bl	8003b54 <_ZN9CMenuItemD1Ev>
 8003b82:	2128      	movs	r1, #40	@ 0x28
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f008 f9f7 	bl	800bf78 <_ZdlPvj>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <_ZN9CMenuItem13AgregaAlFinalEPS_>:

void CMenuItem::AgregaAlFinal(CMenuItem* siguiente)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
	if(Siguiente==NULL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d106      	bne.n	8003bb4 <_ZN9CMenuItem13AgregaAlFinalEPS_+0x20>
	{
		Siguiente=siguiente;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	609a      	str	r2, [r3, #8]
		siguiente->Anterior=this;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	60da      	str	r2, [r3, #12]
		return;
 8003bb2:	e005      	b.n	8003bc0 <_ZN9CMenuItem13AgregaAlFinalEPS_+0x2c>
	}
	Siguiente->AgregaAlFinal(siguiente);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	6839      	ldr	r1, [r7, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7ff ffea 	bl	8003b94 <_ZN9CMenuItem13AgregaAlFinalEPS_>
}
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <_ZN9CMenuItem4ShowEv>:

void CMenuItem::Show()
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b082      	sub	sp, #8
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
	if(Seleccionado)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d010      	beq.n	8003bfa <_ZN9CMenuItem4ShowEv+0x34>
	{
		Etiqueta->SetColorTexto(ColoTextoSeleccionado);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	69db      	ldr	r3, [r3, #28]
 8003be0:	4619      	mov	r1, r3
 8003be2:	4610      	mov	r0, r2
 8003be4:	f7fe fdde 	bl	80027a4 <_ZN12CEtiquetaTft13SetColorTextoEi>
		Etiqueta->SetBackColor(ColorFondoSeleccionado);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4610      	mov	r0, r2
 8003bf4:	f7fe fe22 	bl	800283c <_ZN12CEtiquetaTft12SetBackColorEi>
 8003bf8:	e00f      	b.n	8003c1a <_ZN9CMenuItem4ShowEv+0x54>
	}
	else
	{
		Etiqueta->SetColorTexto(ColorTexto);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	4619      	mov	r1, r3
 8003c04:	4610      	mov	r0, r2
 8003c06:	f7fe fdcd 	bl	80027a4 <_ZN12CEtiquetaTft13SetColorTextoEi>
		Etiqueta->SetBackColor(ColorFondo);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	4619      	mov	r1, r3
 8003c14:	4610      	mov	r0, r2
 8003c16:	f7fe fe11 	bl	800283c <_ZN12CEtiquetaTft12SetBackColorEi>
	}
	Etiqueta->Show();
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3348      	adds	r3, #72	@ 0x48
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4610      	mov	r0, r2
 8003c2a:	4798      	blx	r3
}
 8003c2c:	bf00      	nop
 8003c2e:	3708      	adds	r7, #8
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <_ZN9CMenuItem13AsignaColoresEiiii>:
void CMenuItem::AsignaColores(int colorTexto, int colorFondo, int colorTextoResaltado, int solorFondoResaltado)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
 8003c40:	603b      	str	r3, [r7, #0]
	ColorTexto=colorTexto;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	615a      	str	r2, [r3, #20]
	ColorFondo=colorFondo;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	619a      	str	r2, [r3, #24]
	ColoTextoSeleccionado=colorTextoResaltado;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	61da      	str	r2, [r3, #28]
	ColorFondoSeleccionado=solorFondoResaltado;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	621a      	str	r2, [r3, #32]
}
 8003c5a:	bf00      	nop
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <_ZN9CMenuItem10SeleccionaEb>:
void CMenuItem::Selecciona(bool valor)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
 8003c6e:	460b      	mov	r3, r1
 8003c70:	70fb      	strb	r3, [r7, #3]
	Seleccionado=valor;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	78fa      	ldrb	r2, [r7, #3]
 8003c76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <_ZN9CMenuItem16CalculaPosicionYEi>:

void CMenuItem::CalculaPosicionY(int posicion)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b084      	sub	sp, #16
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
 8003c8e:	6039      	str	r1, [r7, #0]
	int x=Etiqueta->DamePosicionX();
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7fe ffe9 	bl	8002c6c <_ZN14CRectanguloTft13DamePosicionXEv>
 8003c9a:	60f8      	str	r0, [r7, #12]
	Etiqueta->CambiaPosicion(x, posicion);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	334c      	adds	r3, #76	@ 0x4c
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	68f9      	ldr	r1, [r7, #12]
 8003cb0:	4798      	blx	r3
	if(Siguiente==NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d010      	beq.n	8003cdc <_ZN9CMenuItem16CalculaPosicionYEi+0x56>
		return;
	int y=Etiqueta->DameAlto()+posicion+5;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fe ffec 	bl	8002c9c <_ZN14CRectanguloTft8DameAltoEv>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	4413      	add	r3, r2
 8003cca:	3305      	adds	r3, #5
 8003ccc:	60bb      	str	r3, [r7, #8]
	Siguiente->CalculaPosicionY(y);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	68b9      	ldr	r1, [r7, #8]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff ffd6 	bl	8003c86 <_ZN9CMenuItem16CalculaPosicionYEi>
 8003cda:	e000      	b.n	8003cde <_ZN9CMenuItem16CalculaPosicionYEi+0x58>
		return;
 8003cdc:	bf00      	nop
}
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <_ZN9CMenuItem13DameSiguienteEv>:
CMenuItem* CMenuItem::DameSiguiente()
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
	return Siguiente;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <_ZN9CMenuItem13DamePosicionYEv>:
int CMenuItem::DamePosicionY()
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
	return Etiqueta->DamePosicionY();
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7fe ffbb 	bl	8002c84 <_ZN14CRectanguloTft13DamePosicionYEv>
 8003d0e:	4603      	mov	r3, r0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3708      	adds	r7, #8
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <_ZN9CMenuItem10DameAlturaEv>:
int CMenuItem::DameAltura()
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
	return Etiqueta->DameAlto();
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7fe ffb9 	bl	8002c9c <_ZN14CRectanguloTft8DameAltoEv>
 8003d2a:	4603      	mov	r3, r0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <_ZN9CMenuItem16EstaSeleccionadoEv>:
bool CMenuItem::EstaSeleccionado()
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
	return Seleccionado;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <_ZN9CMenuItem12DameAnteriorEv>:
CMenuItem* CMenuItem::DameAnterior()
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
	return Anterior;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68db      	ldr	r3, [r3, #12]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <_ZN9CMenuItem17DameIdentificadorEv>:
void CMenuItem::AsignaAnterior(CMenuItem* anterior)
{
	Anterior=anterior;
}
int CMenuItem::DameIdentificador()
{
 8003d66:	b480      	push	{r7}
 8003d68:	b083      	sub	sp, #12
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
	return Identificador;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
	...

08003d80 <_ZN15CPantallaManualD1Ev>:
#include <Uart/Uart.hpp>
#include "Constantes.hpp"
extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart1;

CPantallaManual::~CPantallaManual()
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	4a07      	ldr	r2, [pc, #28]	@ (8003da8 <_ZN15CPantallaManualD1Ev+0x28>)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	4a07      	ldr	r2, [pc, #28]	@ (8003dac <_ZN15CPantallaManualD1Ev+0x2c>)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fe fd5e 	bl	8002858 <_ZN13CPantallaBaseD1Ev>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	0800f270 	.word	0x0800f270
 8003dac:	0800f314 	.word	0x0800f314

08003db0 <_ZThn48_N15CPantallaManualD1Ev>:
	CEtiquetaTft *LabelEstado;
	int NivelAire = 0;

public:
	CPantallaManual(CEstacionBase *estacion);
	virtual ~CPantallaManual();
 8003db0:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8003db4:	f7ff bfe4 	b.w	8003d80 <_ZN15CPantallaManualD1Ev>

08003db8 <_ZN15CPantallaManualD0Ev>:
CPantallaManual::~CPantallaManual()
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
}
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f7ff ffdd 	bl	8003d80 <_ZN15CPantallaManualD1Ev>
 8003dc6:	21e8      	movs	r1, #232	@ 0xe8
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f008 f8d5 	bl	800bf78 <_ZdlPvj>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3708      	adds	r7, #8
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <_ZThn48_N15CPantallaManualD0Ev>:
 8003dd8:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8003ddc:	f7ff bfec 	b.w	8003db8 <_ZN15CPantallaManualD0Ev>

08003de0 <_ZN15CPantallaManualC1Ev>:

CPantallaManual::CPantallaManual() :
 8003de0:	b590      	push	{r4, r7, lr}
 8003de2:	b08d      	sub	sp, #52	@ 0x34
 8003de4:	af08      	add	r7, sp, #32
 8003de6:	6078      	str	r0, [r7, #4]
		CPantallaBase(1, (char*)"   Modo: Manual")
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a68      	ldr	r2, [pc, #416]	@ (8003f8c <_ZN15CPantallaManualC1Ev+0x1ac>)
 8003dec:	2101      	movs	r1, #1
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fe fd66 	bl	80028c0 <_ZN13CPantallaBaseC1EiPc>
 8003df4:	4a66      	ldr	r2, [pc, #408]	@ (8003f90 <_ZN15CPantallaManualC1Ev+0x1b0>)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	4a66      	ldr	r2, [pc, #408]	@ (8003f94 <_ZN15CPantallaManualC1Ev+0x1b4>)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e0e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f04f 32ff 	mov.w	r2, #4294967295
 8003e18:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e22:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f04f 32ff 	mov.w	r2, #4294967295
 8003e34:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
{
	LabelTemperatura = new CEtiquetaTft( 5, 35, 50, 20, COLOR::BLACK,(char*)"Temperatura", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8003e60:	20a4      	movs	r0, #164	@ 0xa4
 8003e62:	f008 f88b 	bl	800bf7c <_Znwj>
 8003e66:	4603      	mov	r3, r0
 8003e68:	461c      	mov	r4, r3
 8003e6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e6e:	9306      	str	r3, [sp, #24]
 8003e70:	2300      	movs	r3, #0
 8003e72:	9305      	str	r3, [sp, #20]
 8003e74:	2303      	movs	r3, #3
 8003e76:	9304      	str	r3, [sp, #16]
 8003e78:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e7c:	9303      	str	r3, [sp, #12]
 8003e7e:	4b46      	ldr	r3, [pc, #280]	@ (8003f98 <_ZN15CPantallaManualC1Ev+0x1b8>)
 8003e80:	9302      	str	r3, [sp, #8]
 8003e82:	2300      	movs	r3, #0
 8003e84:	9301      	str	r3, [sp, #4]
 8003e86:	2314      	movs	r3, #20
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	2332      	movs	r3, #50	@ 0x32
 8003e8c:	2223      	movs	r2, #35	@ 0x23
 8003e8e:	2105      	movs	r1, #5
 8003e90:	4620      	mov	r0, r4
 8003e92:	f7fe fb03 	bl	800249c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f8c3 40d4 	str.w	r4, [r3, #212]	@ 0xd4
	int centroX = DameCentroX();
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fe ff08 	bl	8002cb4 <_ZN14CRectanguloTft11DameCentroXEv>
 8003ea4:	60f8      	str	r0, [r7, #12]
	LabelTemperaturas = new CEtiquetaTft( centroX - 150 / 2, 65, 150, 30,COLOR::WHITE,(char*) "000/000", COLOR::BLACK, 3, 1, COLOR::RED);
 8003ea6:	20a4      	movs	r0, #164	@ 0xa4
 8003ea8:	f008 f868 	bl	800bf7c <_Znwj>
 8003eac:	4603      	mov	r3, r0
 8003eae:	461c      	mov	r4, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f1a3 014b 	sub.w	r1, r3, #75	@ 0x4b
 8003eb6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003eba:	9306      	str	r3, [sp, #24]
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	9305      	str	r3, [sp, #20]
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	9304      	str	r3, [sp, #16]
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	9303      	str	r3, [sp, #12]
 8003ec8:	4b34      	ldr	r3, [pc, #208]	@ (8003f9c <_ZN15CPantallaManualC1Ev+0x1bc>)
 8003eca:	9302      	str	r3, [sp, #8]
 8003ecc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ed0:	9301      	str	r3, [sp, #4]
 8003ed2:	231e      	movs	r3, #30
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	2396      	movs	r3, #150	@ 0x96
 8003ed8:	2241      	movs	r2, #65	@ 0x41
 8003eda:	4620      	mov	r0, r4
 8003edc:	f7fe fade 	bl	800249c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f8c3 40d8 	str.w	r4, [r3, #216]	@ 0xd8
	LabelTemperaturas->SetSeparacion(5, 5);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003eec:	2205      	movs	r2, #5
 8003eee:	2105      	movs	r1, #5
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7fe fc43 	bl	800277c <_ZN12CEtiquetaTft13SetSeparacionEii>
	LabelAire = new CEtiquetaTft( 5, 105, 200, 30, COLOR::BLACK, (char*)"Aire: 00",COLOR::WHITE, 3, 0, COLOR::RED);
 8003ef6:	20a4      	movs	r0, #164	@ 0xa4
 8003ef8:	f008 f840 	bl	800bf7c <_Znwj>
 8003efc:	4603      	mov	r3, r0
 8003efe:	461c      	mov	r4, r3
 8003f00:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003f04:	9306      	str	r3, [sp, #24]
 8003f06:	2300      	movs	r3, #0
 8003f08:	9305      	str	r3, [sp, #20]
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	9304      	str	r3, [sp, #16]
 8003f0e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f12:	9303      	str	r3, [sp, #12]
 8003f14:	4b22      	ldr	r3, [pc, #136]	@ (8003fa0 <_ZN15CPantallaManualC1Ev+0x1c0>)
 8003f16:	9302      	str	r3, [sp, #8]
 8003f18:	2300      	movs	r3, #0
 8003f1a:	9301      	str	r3, [sp, #4]
 8003f1c:	231e      	movs	r3, #30
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	23c8      	movs	r3, #200	@ 0xc8
 8003f22:	2269      	movs	r2, #105	@ 0x69
 8003f24:	2105      	movs	r1, #5
 8003f26:	4620      	mov	r0, r4
 8003f28:	f7fe fab8 	bl	800249c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f8c3 40dc 	str.w	r4, [r3, #220]	@ 0xdc
	LabelEstado = new CEtiquetaTft( 5, 145, 300, 35, COLOR::BLACK,(char*)"Estado: REPOSO", COLOR::WHITE, 3, 0, COLOR::RED);
 8003f32:	20a4      	movs	r0, #164	@ 0xa4
 8003f34:	f008 f822 	bl	800bf7c <_Znwj>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	461c      	mov	r4, r3
 8003f3c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003f40:	9306      	str	r3, [sp, #24]
 8003f42:	2300      	movs	r3, #0
 8003f44:	9305      	str	r3, [sp, #20]
 8003f46:	2303      	movs	r3, #3
 8003f48:	9304      	str	r3, [sp, #16]
 8003f4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f4e:	9303      	str	r3, [sp, #12]
 8003f50:	4b14      	ldr	r3, [pc, #80]	@ (8003fa4 <_ZN15CPantallaManualC1Ev+0x1c4>)
 8003f52:	9302      	str	r3, [sp, #8]
 8003f54:	2300      	movs	r3, #0
 8003f56:	9301      	str	r3, [sp, #4]
 8003f58:	2323      	movs	r3, #35	@ 0x23
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8003f60:	2291      	movs	r2, #145	@ 0x91
 8003f62:	2105      	movs	r1, #5
 8003f64:	4620      	mov	r0, r4
 8003f66:	f7fe fa99 	bl	800249c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f8c3 40e0 	str.w	r4, [r3, #224]	@ 0xe0
	LabelEstado->SetSeparacion(15, 5);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f76:	2205      	movs	r2, #5
 8003f78:	210f      	movs	r1, #15
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fe fbfe 	bl	800277c <_ZN12CEtiquetaTft13SetSeparacionEii>
}
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4618      	mov	r0, r3
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd90      	pop	{r4, r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	0800ed08 	.word	0x0800ed08
 8003f90:	0800f270 	.word	0x0800f270
 8003f94:	0800f314 	.word	0x0800f314
 8003f98:	0800ed18 	.word	0x0800ed18
 8003f9c:	0800ed24 	.word	0x0800ed24
 8003fa0:	0800ed2c 	.word	0x0800ed2c
 8003fa4:	0800ed38 	.word	0x0800ed38

08003fa8 <_ZN15CPantallaManual13MuestraEstadoEb>:


void CPantallaManual::MuestraEstado(bool forzar)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	70fb      	strb	r3, [r7, #3]
	if(forzar==false)
 8003fb4:	78fb      	ldrb	r3, [r7, #3]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d116      	bne.n	8003fe8 <_ZN15CPantallaManual13MuestraEstadoEb+0x40>
	{
		if(EstadoBoquillaAnterior==EstadoBoquilla )
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d10e      	bne.n	8003fe8 <_ZN15CPantallaManual13MuestraEstadoEb+0x40>
		{
			if(EsVisible()==true)
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	3364      	adds	r3, #100	@ 0x64
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4610      	mov	r0, r2
 8003fd6:	4798      	blx	r3
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	bf0c      	ite	eq
 8003fde:	2301      	moveq	r3, #1
 8003fe0:	2300      	movne	r3, #0
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d143      	bne.n	8004070 <_ZN15CPantallaManual13MuestraEstadoEb+0xc8>
			{
				return;
			}
		}
	}
	EstadoBoquillaAnterior=EstadoBoquilla;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	if (EstadoBoquilla == 1)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d115      	bne.n	800402a <_ZN15CPantallaManual13MuestraEstadoEb+0x82>
	{
		LabelEstado->SetColorFondo(COLOR::BLUE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004004:	211f      	movs	r1, #31
 8004006:	4618      	mov	r0, r3
 8004008:	f7fe fe22 	bl	8002c50 <_ZN14CRectanguloTft13SetColorFondoEi>
		LabelEstado->SetColorTexto(COLOR::BLACK);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004012:	2100      	movs	r1, #0
 8004014:	4618      	mov	r0, r3
 8004016:	f7fe fbc5 	bl	80027a4 <_ZN12CEtiquetaTft13SetColorTextoEi>
		LabelEstado->SetTexto((char*)"Estado: ACTIVO");
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004020:	4915      	ldr	r1, [pc, #84]	@ (8004078 <_ZN15CPantallaManual13MuestraEstadoEb+0xd0>)
 8004022:	4618      	mov	r0, r3
 8004024:	f7fe fa74 	bl	8002510 <_ZN12CEtiquetaTft8SetTextoEPcz>
 8004028:	e016      	b.n	8004058 <_ZN15CPantallaManual13MuestraEstadoEb+0xb0>
	}
	else
	{
		LabelEstado->SetColorFondo(COLOR::RED);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004030:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8004034:	4618      	mov	r0, r3
 8004036:	f7fe fe0b 	bl	8002c50 <_ZN14CRectanguloTft13SetColorFondoEi>
		LabelEstado->SetColorTexto(COLOR::WHITE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004040:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004044:	4618      	mov	r0, r3
 8004046:	f7fe fbad 	bl	80027a4 <_ZN12CEtiquetaTft13SetColorTextoEi>
		LabelEstado->SetTexto((char*)"Estado: REPOSO");
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004050:	490a      	ldr	r1, [pc, #40]	@ (800407c <_ZN15CPantallaManual13MuestraEstadoEb+0xd4>)
 8004052:	4618      	mov	r0, r3
 8004054:	f7fe fa5c 	bl	8002510 <_ZN12CEtiquetaTft8SetTextoEPcz>
	}
	LabelEstado->Show();
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	3348      	adds	r3, #72	@ 0x48
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4610      	mov	r0, r2
 800406c:	4798      	blx	r3
 800406e:	e000      	b.n	8004072 <_ZN15CPantallaManual13MuestraEstadoEb+0xca>
				return;
 8004070:	bf00      	nop
}
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	0800ed48 	.word	0x0800ed48
 800407c:	0800ed38 	.word	0x0800ed38

08004080 <_ZN15CPantallaManual16LeeDatosEstacionEv>:

void CPantallaManual::LeeDatosEstacion()
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
	SetTemperatura = Estacion->GetTemperatura();
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	3310      	adds	r3, #16
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4610      	mov	r0, r2
 800409c:	4798      	blx	r3
 800409e:	4602      	mov	r2, r0
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	Temperatura = Estacion->GetTemperaturaRealx();
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	3308      	adds	r3, #8
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4610      	mov	r0, r2
 80040ba:	4798      	blx	r3
 80040bc:	eef0 7a40 	vmov.f32	s15, s0
 80040c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040c4:	ee17 2a90 	vmov	r2, s15
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	NivelAire = ManejadorControles->GetNivelAire();
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80040d4:	4618      	mov	r0, r3
 80040d6:	f001 fdb8 	bl	8005c4a <_ZN19CManejadorControles12GetNivelAireEv>
 80040da:	4602      	mov	r2, r0
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
	Estacion->SetNivelAire(NivelAire);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3314      	adds	r3, #20
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	f8d2 20e4 	ldr.w	r2, [r2, #228]	@ 0xe4
 80040fa:	4611      	mov	r1, r2
 80040fc:	4798      	blx	r3
	EstadoBoquilla=Estacion->GetEstado();
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	331c      	adds	r3, #28
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4610      	mov	r0, r2
 8004112:	4798      	blx	r3
 8004114:	4602      	mov	r2, r0
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
}
 800411c:	bf00      	nop
 800411e:	3708      	adds	r7, #8
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <_ZN15CPantallaManual19MuestraTemperaturasEb>:


void CPantallaManual::MuestraTemperaturas(bool forzar)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	460b      	mov	r3, r1
 800412e:	70fb      	strb	r3, [r7, #3]
	if(forzar==false)
 8004130:	78fb      	ldrb	r3, [r7, #3]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10f      	bne.n	8004156 <_ZN15CPantallaManual19MuestraTemperaturasEb+0x32>
	{
		if(TemperaturaAnterior==Temperatura &&SetTemperaturaAnterior==SetTemperatura)//&& EsVisible()==true )
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004142:	429a      	cmp	r2, r3
 8004144:	d107      	bne.n	8004156 <_ZN15CPantallaManual19MuestraTemperaturasEb+0x32>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004152:	429a      	cmp	r2, r3
 8004154:	d023      	beq.n	800419e <_ZN15CPantallaManual19MuestraTemperaturasEb+0x7a>
			return;
	}

	TemperaturaAnterior=Temperatura;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	SetTemperaturaAnterior=SetTemperatura;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	LabelTemperaturas->SetTexto((char*)"%d/%d", Temperatura, SetTemperatura);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f8d3 00d8 	ldr.w	r0, [r3, #216]	@ 0xd8
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004180:	4909      	ldr	r1, [pc, #36]	@ (80041a8 <_ZN15CPantallaManual19MuestraTemperaturasEb+0x84>)
 8004182:	f7fe f9c5 	bl	8002510 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelTemperaturas->Show();
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3348      	adds	r3, #72	@ 0x48
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4610      	mov	r0, r2
 800419a:	4798      	blx	r3
 800419c:	e000      	b.n	80041a0 <_ZN15CPantallaManual19MuestraTemperaturasEb+0x7c>
			return;
 800419e:	bf00      	nop
}
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	0800ed58 	.word	0x0800ed58

080041ac <_ZN15CPantallaManual16OnNivelAireEventEi>:

void CPantallaManual::OnNivelAireEvent(int aire)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
	NivelAire = aire;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
	Estacion->SetNivelAire(NivelAire);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	3314      	adds	r3, #20
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	f8d2 20e4 	ldr.w	r2, [r2, #228]	@ 0xe4
 80041d6:	4611      	mov	r1, r2
 80041d8:	4798      	blx	r3
}
 80041da:	bf00      	nop
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <_ZThn48_N15CPantallaManual16OnNivelAireEventEi>:
	CPantallaManual();
	virtual void Show();
	virtual void Refresca();

private:
	void OnNivelAireEvent(int aire);
 80041e2:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80041e6:	f7ff bfe1 	b.w	80041ac <_ZN15CPantallaManual16OnNivelAireEventEi>
	...

080041ec <_ZN15CPantallaManual16MuestraNivelAireEb>:

void CPantallaManual::MuestraNivelAire(bool forzar)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	460b      	mov	r3, r1
 80041f6:	70fb      	strb	r3, [r7, #3]
	if(forzar==false)
 80041f8:	78fb      	ldrb	r3, [r7, #3]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d116      	bne.n	800422c <_ZN15CPantallaManual16MuestraNivelAireEb+0x40>
	{
		if(NivelAireAnterior==NivelAire && EsVisible()==true )
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800420a:	429a      	cmp	r2, r3
 800420c:	d10b      	bne.n	8004226 <_ZN15CPantallaManual16MuestraNivelAireEb+0x3a>
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	3364      	adds	r3, #100	@ 0x64
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4610      	mov	r0, r2
 800421a:	4798      	blx	r3
 800421c:	4603      	mov	r3, r0
 800421e:	2b01      	cmp	r3, #1
 8004220:	d101      	bne.n	8004226 <_ZN15CPantallaManual16MuestraNivelAireEb+0x3a>
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <_ZN15CPantallaManual16MuestraNivelAireEb+0x3c>
 8004226:	2300      	movs	r3, #0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d129      	bne.n	8004280 <_ZN15CPantallaManual16MuestraNivelAireEb+0x94>
			return;
	}
	NivelAireAnterior=NivelAire;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	Estacion->SetNivelAire(NivelAire);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	3314      	adds	r3, #20
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	f8d2 20e4 	ldr.w	r2, [r2, #228]	@ 0xe4
 8004250:	4611      	mov	r1, r2
 8004252:	4798      	blx	r3
	LabelAire->SetTexto((char*)"Aire: %d", NivelAire);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004260:	461a      	mov	r2, r3
 8004262:	4909      	ldr	r1, [pc, #36]	@ (8004288 <_ZN15CPantallaManual16MuestraNivelAireEb+0x9c>)
 8004264:	f7fe f954 	bl	8002510 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelAire->Show();
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	3348      	adds	r3, #72	@ 0x48
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4610      	mov	r0, r2
 800427c:	4798      	blx	r3
 800427e:	e000      	b.n	8004282 <_ZN15CPantallaManual16MuestraNivelAireEb+0x96>
			return;
 8004280:	bf00      	nop

}
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	0800ed60 	.word	0x0800ed60

0800428c <_ZN15CPantallaManual22OnTemperaturaRealEventEi>:

void CPantallaManual::OnTemperaturaRealEvent(int temperatura)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
//	Temperatura = temperatura;
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <_ZThn48_N15CPantallaManual22OnTemperaturaRealEventEi>:
	virtual void OnTemperaturaRealEvent(int temperatura);
 80042a2:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80042a6:	f7ff bff1 	b.w	800428c <_ZN15CPantallaManual22OnTemperaturaRealEventEi>

080042aa <_ZN15CPantallaManual19OnPerillaIncrementoEv>:

//eventos del Encoder
void CPantallaManual::OnPerillaIncremento()
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b082      	sub	sp, #8
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
	Estacion->IncrementaTemperatura();
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	3320      	adds	r3, #32
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4610      	mov	r0, r2
 80042c6:	4798      	blx	r3
	TemperaturaGuardada=false;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
}
 80042d0:	bf00      	nop
 80042d2:	3708      	adds	r7, #8
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <_ZThn48_N15CPantallaManual19OnPerillaIncrementoEv>:

	virtual void OnBotonUnoClickEvent();
	virtual void OnBotonDosClickEvent();
	virtual void OnBotonTresClickEvent();
protected:
	virtual void OnPerillaIncremento();
 80042d8:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80042dc:	f7ff bfe5 	b.w	80042aa <_ZN15CPantallaManual19OnPerillaIncrementoEv>

080042e0 <_ZN15CPantallaManual19OnPerillaDecrementoEv>:

void CPantallaManual::OnPerillaDecremento()
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
	Estacion->DecrementaTemperatura();
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	3324      	adds	r3, #36	@ 0x24
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4610      	mov	r0, r2
 80042fc:	4798      	blx	r3
	TemperaturaGuardada=false;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
}
 8004306:	bf00      	nop
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <_ZThn48_N15CPantallaManual19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 800430e:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004312:	f7ff bfe5 	b.w	80042e0 <_ZN15CPantallaManual19OnPerillaDecrementoEv>

08004316 <_ZN15CPantallaManual8RefrescaEv>:

void CPantallaManual::Refresca()
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b082      	sub	sp, #8
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
	if(TemperaturaGuardada==false)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 8004324:	2b00      	cmp	r3, #0
 8004326:	d105      	bne.n	8004334 <_ZN15CPantallaManual8RefrescaEv+0x1e>
		GuardaTemperatura();
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	338c      	adds	r3, #140	@ 0x8c
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	4798      	blx	r3
	MuestraInformacion(false);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3398      	adds	r3, #152	@ 0x98
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2100      	movs	r1, #0
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	4798      	blx	r3
}
 8004342:	bf00      	nop
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
	...

0800434c <_ZN15CPantallaManual24OnBotonPerillaClickEventEv>:
 void CPantallaManual::OnBotonPerillaClickEvent()
 {
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
	 ManejadorPantallas.MuestraMenuPrincipal();
 8004354:	4803      	ldr	r0, [pc, #12]	@ (8004364 <_ZN15CPantallaManual24OnBotonPerillaClickEventEv+0x18>)
 8004356:	f7ff f817 	bl	8003388 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>
 }
 800435a:	bf00      	nop
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	20000240 	.word	0x20000240

08004368 <_ZThn48_N15CPantallaManual24OnBotonPerillaClickEventEv>:
	virtual void OnBotonPerillaClickEvent();
 8004368:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800436c:	f7ff bfee 	b.w	800434c <_ZN15CPantallaManual24OnBotonPerillaClickEventEv>

08004370 <_ZN15CPantallaManual18MuestraInformacionEb>:
 void CPantallaManual::MuestraInformacion(bool forzar)
 {
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	460b      	mov	r3, r1
 800437a:	70fb      	strb	r3, [r7, #3]
		LeeDatosEstacion();
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3390      	adds	r3, #144	@ 0x90
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	4798      	blx	r3
		MuestraTemperaturas(forzar);
 8004388:	78fb      	ldrb	r3, [r7, #3]
 800438a:	4619      	mov	r1, r3
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7ff fec9 	bl	8004124 <_ZN15CPantallaManual19MuestraTemperaturasEb>
		MuestraEstado(forzar);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3394      	adds	r3, #148	@ 0x94
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	78fa      	ldrb	r2, [r7, #3]
 800439c:	4611      	mov	r1, r2
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	4798      	blx	r3
		MuestraNivelAire(forzar);
 80043a2:	78fb      	ldrb	r3, [r7, #3]
 80043a4:	4619      	mov	r1, r3
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7ff ff20 	bl	80041ec <_ZN15CPantallaManual16MuestraNivelAireEb>
		//marco como visible
		SetVisible(true);
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	3368      	adds	r3, #104	@ 0x68
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2101      	movs	r1, #1
 80043b8:	4610      	mov	r0, r2
 80043ba:	4798      	blx	r3

 }
 80043bc:	bf00      	nop
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <_ZN15CPantallaManual17GuardaTemperaturaEv>:
 void CPantallaManual::GuardaTemperatura()
 {
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b088      	sub	sp, #32
 80043c8:	af04      	add	r7, sp, #16
 80043ca:	6078      	str	r0, [r7, #4]
 	uint8_t temperatura=Estacion->GetTemperatura();
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	3310      	adds	r3, #16
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4610      	mov	r0, r2
 80043e0:	4798      	blx	r3
 80043e2:	4603      	mov	r3, r0
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	72fb      	strb	r3, [r7, #11]
// 	uint8_t datos_w[10];
 	int t= HAL_GetTick();
 80043e8:	f003 fc98 	bl	8007d1c <HAL_GetTick>
 80043ec:	4603      	mov	r3, r0
 80043ee:	60fb      	str	r3, [r7, #12]
 	if(t>tiempoescritura)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	dd17      	ble.n	800442c <_ZN15CPantallaManual17GuardaTemperaturaEv+0x68>
 	{

 		HAL_I2C_Mem_Write(&hi2c1,ADDRESS_EEPROM,0,I2C_MEMADD_SIZE_8BIT,&temperatura,1,HAL_MAX_DELAY);
 80043fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004400:	9302      	str	r3, [sp, #8]
 8004402:	2301      	movs	r3, #1
 8004404:	9301      	str	r3, [sp, #4]
 8004406:	f107 030b 	add.w	r3, r7, #11
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	2301      	movs	r3, #1
 800440e:	2200      	movs	r2, #0
 8004410:	21a0      	movs	r1, #160	@ 0xa0
 8004412:	4808      	ldr	r0, [pc, #32]	@ (8004434 <_ZN15CPantallaManual17GuardaTemperaturaEv+0x70>)
 8004414:	f004 fc0a 	bl	8008c2c <HAL_I2C_Mem_Write>
 		TemperaturaGuardada=true;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 		tiempoescritura=t+1000;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 	}

 }
 800442c:	bf00      	nop
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	200002b8 	.word	0x200002b8

08004438 <_ZN15CPantallaManual4ShowEv>:
 void CPantallaManual::Show()
 {
 8004438:	b580      	push	{r7, lr}
 800443a:	b088      	sub	sp, #32
 800443c:	af04      	add	r7, sp, #16
 800443e:	6078      	str	r0, [r7, #4]
 	CPantallaBase::Show();
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4618      	mov	r0, r3
 8004444:	f7fe faae 	bl	80029a4 <_ZN13CPantallaBase4ShowEv>
 	LabelTemperatura->Show();
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	3348      	adds	r3, #72	@ 0x48
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4610      	mov	r0, r2
 800445c:	4798      	blx	r3

 	uint8_t temperatura;
// 	uint8_t datos_w[10];
// 	uint8_t datos_r[10];
// 	char buf_tx[30];
 	  if( HAL_I2C_Mem_Read(&hi2c1,ADDRESS_EEPROM,0,I2C_MEMADD_SIZE_8BIT,&temperatura,1,HAL_MAX_DELAY)==HAL_OK)
 800445e:	f04f 33ff 	mov.w	r3, #4294967295
 8004462:	9302      	str	r3, [sp, #8]
 8004464:	2301      	movs	r3, #1
 8004466:	9301      	str	r3, [sp, #4]
 8004468:	f107 030f 	add.w	r3, r7, #15
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	2301      	movs	r3, #1
 8004470:	2200      	movs	r2, #0
 8004472:	21a0      	movs	r1, #160	@ 0xa0
 8004474:	4815      	ldr	r0, [pc, #84]	@ (80044cc <_ZN15CPantallaManual4ShowEv+0x94>)
 8004476:	f004 fcd3 	bl	8008e20 <HAL_I2C_Mem_Read>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	bf0c      	ite	eq
 8004480:	2301      	moveq	r3, #1
 8004482:	2300      	movne	r3, #0
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00f      	beq.n	80044aa <_ZN15CPantallaManual4ShowEv+0x72>
 	  {
 		 	if(temperatura>=0 && temperatura<=500)
 		 	{
 		 		Estacion->SetTemperatura(temperatura);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	330c      	adds	r3, #12
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	7bf9      	ldrb	r1, [r7, #15]
 800449e:	4610      	mov	r0, r2
 80044a0:	4798      	blx	r3
 		 	}
 		 	TemperaturaGuardada=true;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 	  }
 	LeeDatosEstacion();
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	3390      	adds	r3, #144	@ 0x90
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	4798      	blx	r3
 	MuestraInformacion(true);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	3398      	adds	r3, #152	@ 0x98
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2101      	movs	r1, #1
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	4798      	blx	r3
 }
 80044c4:	bf00      	nop
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	200002b8 	.word	0x200002b8

080044d0 <_ZN15CPantallaManual21OnBotonTresClickEventEv>:
void CPantallaManual::OnBotonTresClickEvent()
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(3);
 80044d8:	2103      	movs	r1, #3
 80044da:	4803      	ldr	r0, [pc, #12]	@ (80044e8 <_ZN15CPantallaManual21OnBotonTresClickEventEv+0x18>)
 80044dc:	f7ff f811 	bl	8003502 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 80044e0:	bf00      	nop
 80044e2:	3708      	adds	r7, #8
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	20000240 	.word	0x20000240

080044ec <_ZThn48_N15CPantallaManual21OnBotonTresClickEventEv>:
	virtual void OnBotonTresClickEvent();
 80044ec:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80044f0:	f7ff bfee 	b.w	80044d0 <_ZN15CPantallaManual21OnBotonTresClickEventEv>

080044f4 <_ZN15CPantallaManual20OnBotonUnoClickEventEv>:
void CPantallaManual::OnBotonUnoClickEvent()
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(1);
 80044fc:	2101      	movs	r1, #1
 80044fe:	4803      	ldr	r0, [pc, #12]	@ (800450c <_ZN15CPantallaManual20OnBotonUnoClickEventEv+0x18>)
 8004500:	f7fe ffff 	bl	8003502 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 8004504:	bf00      	nop
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	20000240 	.word	0x20000240

08004510 <_ZThn48_N15CPantallaManual20OnBotonUnoClickEventEv>:
	virtual void OnBotonUnoClickEvent();
 8004510:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004514:	f7ff bfee 	b.w	80044f4 <_ZN15CPantallaManual20OnBotonUnoClickEventEv>

08004518 <_ZN15CPantallaManual20OnBotonDosClickEventEv>:
void CPantallaManual::OnBotonDosClickEvent()
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(2);
 8004520:	2102      	movs	r1, #2
 8004522:	4803      	ldr	r0, [pc, #12]	@ (8004530 <_ZN15CPantallaManual20OnBotonDosClickEventEv+0x18>)
 8004524:	f7fe ffed 	bl	8003502 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 8004528:	bf00      	nop
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	20000240 	.word	0x20000240

08004534 <_ZThn48_N15CPantallaManual20OnBotonDosClickEventEv>:
	virtual void OnBotonDosClickEvent();
 8004534:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004538:	f7ff bfee 	b.w	8004518 <_ZN15CPantallaManual20OnBotonDosClickEventEv>

0800453c <_ZN16CPantallaMemoriaD1Ev>:
#include "Uart/Uart.hpp"
#include "Constantes.hpp"
extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart1;

CPantallaMemoria::~CPantallaMemoria()
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	4a07      	ldr	r2, [pc, #28]	@ (8004564 <_ZN16CPantallaMemoriaD1Ev+0x28>)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	601a      	str	r2, [r3, #0]
 800454a:	4a07      	ldr	r2, [pc, #28]	@ (8004568 <_ZN16CPantallaMemoriaD1Ev+0x2c>)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4618      	mov	r0, r3
 8004554:	f7ff fc14 	bl	8003d80 <_ZN15CPantallaManualD1Ev>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4618      	mov	r0, r3
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	0800f348 	.word	0x0800f348
 8004568:	0800f3f0 	.word	0x0800f3f0

0800456c <_ZThn48_N16CPantallaMemoriaD1Ev>:
public:
	virtual void OnPerillaIncremento();
	virtual void OnPerillaDecremento();
	CPantallaMemoria(CEstacionBase *estacion);
	CPantallaMemoria();
	virtual ~CPantallaMemoria();
 800456c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004570:	f7ff bfe4 	b.w	800453c <_ZN16CPantallaMemoriaD1Ev>

08004574 <_ZN16CPantallaMemoriaD0Ev>:
CPantallaMemoria::~CPantallaMemoria()
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
}
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7ff ffdd 	bl	800453c <_ZN16CPantallaMemoriaD1Ev>
 8004582:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f007 fcf6 	bl	800bf78 <_ZdlPvj>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4618      	mov	r0, r3
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <_ZThn48_N16CPantallaMemoriaD0Ev>:
 8004596:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800459a:	f7ff bfeb 	b.w	8004574 <_ZN16CPantallaMemoriaD0Ev>
	...

080045a0 <_ZN16CPantallaMemoriaC1Ev>:


CPantallaMemoria::CPantallaMemoria() :
 80045a0:	b590      	push	{r4, r7, lr}
 80045a2:	b08d      	sub	sp, #52	@ 0x34
 80045a4:	af08      	add	r7, sp, #32
 80045a6:	6078      	str	r0, [r7, #4]
		CPantallaManual()
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff fc18 	bl	8003de0 <_ZN15CPantallaManualC1Ev>
 80045b0:	4a38      	ldr	r2, [pc, #224]	@ (8004694 <_ZN16CPantallaMemoriaC1Ev+0xf4>)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	4a38      	ldr	r2, [pc, #224]	@ (8004698 <_ZN16CPantallaMemoriaC1Ev+0xf8>)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 20fc 	strb.w	r2, [r3, #252]	@ 0xfc
{
	LabelTitulo->SetTexto((char*)"MODO: MEMORIA");
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d0:	4932      	ldr	r1, [pc, #200]	@ (800469c <_ZN16CPantallaMemoriaC1Ev+0xfc>)
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7fd ff9c 	bl	8002510 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelMemoria=new CEtiquetaTft( 5, 35, 50, 20, COLOR::BLACK,(char*)"Memoria: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 80045d8:	20a4      	movs	r0, #164	@ 0xa4
 80045da:	f007 fccf 	bl	800bf7c <_Znwj>
 80045de:	4603      	mov	r3, r0
 80045e0:	461c      	mov	r4, r3
 80045e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80045e6:	9306      	str	r3, [sp, #24]
 80045e8:	2300      	movs	r3, #0
 80045ea:	9305      	str	r3, [sp, #20]
 80045ec:	2303      	movs	r3, #3
 80045ee:	9304      	str	r3, [sp, #16]
 80045f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80045f4:	9303      	str	r3, [sp, #12]
 80045f6:	4b2a      	ldr	r3, [pc, #168]	@ (80046a0 <_ZN16CPantallaMemoriaC1Ev+0x100>)
 80045f8:	9302      	str	r3, [sp, #8]
 80045fa:	2300      	movs	r3, #0
 80045fc:	9301      	str	r3, [sp, #4]
 80045fe:	2314      	movs	r3, #20
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	2332      	movs	r3, #50	@ 0x32
 8004604:	2223      	movs	r2, #35	@ 0x23
 8004606:	2105      	movs	r1, #5
 8004608:	4620      	mov	r0, r4
 800460a:	f7fd ff47 	bl	800249c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f8c3 40f4 	str.w	r4, [r3, #244]	@ 0xf4
	LabelTemperatura->CambiaPosicion(5,65);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800461a:	4618      	mov	r0, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	334c      	adds	r3, #76	@ 0x4c
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2241      	movs	r2, #65	@ 0x41
 800462a:	2105      	movs	r1, #5
 800462c:	4798      	blx	r3
	int centroX = DameCentroX();
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4618      	mov	r0, r3
 8004632:	f7fe fb3f 	bl	8002cb4 <_ZN14CRectanguloTft11DameCentroXEv>
 8004636:	60f8      	str	r0, [r7, #12]
	LabelTemperaturas->CambiaPosicion(centroX - 150 / 2, 95);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800463e:	4618      	mov	r0, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	334c      	adds	r3, #76	@ 0x4c
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	f1a2 014b 	sub.w	r1, r2, #75	@ 0x4b
 8004652:	225f      	movs	r2, #95	@ 0x5f
 8004654:	4798      	blx	r3
	LabelAire->CambiaPosicion(5, 135);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800465c:	4618      	mov	r0, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	334c      	adds	r3, #76	@ 0x4c
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2287      	movs	r2, #135	@ 0x87
 800466c:	2105      	movs	r1, #5
 800466e:	4798      	blx	r3
	LabelEstado->CambiaPosicion(5, 175);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004676:	4618      	mov	r0, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	334c      	adds	r3, #76	@ 0x4c
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	22af      	movs	r2, #175	@ 0xaf
 8004686:	2105      	movs	r1, #5
 8004688:	4798      	blx	r3

}
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4618      	mov	r0, r3
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	bd90      	pop	{r4, r7, pc}
 8004694:	0800f348 	.word	0x0800f348
 8004698:	0800f3f0 	.word	0x0800f3f0
 800469c:	0800ed6c 	.word	0x0800ed6c
 80046a0:	0800ed7c 	.word	0x0800ed7c

080046a4 <_ZN16CPantallaMemoria17GuardaTemperaturaEv>:


 void CPantallaMemoria::GuardaTemperatura()
 {
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 }
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <_ZN16CPantallaMemoria4ShowEv>:


 void CPantallaMemoria::Show()
 {
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
	 CPantallaManual::Show();
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7ff feb8 	bl	8004438 <_ZN15CPantallaManual4ShowEv>
 	//leo la temperatura desde la memoria
	LabelMemoria->SetTexto((char*)"Memoria: %d", NumeroMemoria);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8d3 00f4 	ldr.w	r0, [r3, #244]	@ 0xf4
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80046d4:	461a      	mov	r2, r3
 80046d6:	4916      	ldr	r1, [pc, #88]	@ (8004730 <_ZN16CPantallaMemoria4ShowEv+0x78>)
 80046d8:	f7fd ff1a 	bl	8002510 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelMemoria->Show();
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	3348      	adds	r3, #72	@ 0x48
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4610      	mov	r0, r2
 80046f0:	4798      	blx	r3
	LeeDatosMemoria();
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f844 	bl	8004780 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv>
	Estacion->SetTemperatura(Temperatura);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	330c      	adds	r3, #12
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	f8d2 20d0 	ldr.w	r2, [r2, #208]	@ 0xd0
 8004710:	4611      	mov	r1, r2
 8004712:	4798      	blx	r3
	VelocidadAireInicialPotenciometro=ManejadorControles->GetNivelAire();
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800471a:	4618      	mov	r0, r3
 800471c:	f001 fa95 	bl	8005c4a <_ZN19CManejadorControles12GetNivelAireEv>
 8004720:	4602      	mov	r2, r0
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
 }
 8004728:	bf00      	nop
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	0800ed88 	.word	0x0800ed88

08004734 <_ZN16CPantallaMemoria10SetMemoriaEi>:


void CPantallaMemoria::SetMemoria(int numeroMemoria)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
	NumeroMemoria=numeroMemoria;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
	DireccionMemoria=DameDireccionMemoria();
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f872 	bl	8004830 <_ZN16CPantallaMemoria20DameDireccionMemoriaEv>
 800474c:	4602      	mov	r2, r0
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
}
 8004754:	bf00      	nop
 8004756:	3708      	adds	r7, #8
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <_ZN16CPantallaMemoria23OnBotonCuatroClickEventEv>:


void CPantallaMemoria::OnBotonCuatroClickEvent()
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaManual();
 8004764:	4803      	ldr	r0, [pc, #12]	@ (8004774 <_ZN16CPantallaMemoria23OnBotonCuatroClickEventEv+0x18>)
 8004766:	f7fe fdf3 	bl	8003350 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
}
 800476a:	bf00      	nop
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20000240 	.word	0x20000240

08004778 <_ZThn48_N16CPantallaMemoria23OnBotonCuatroClickEventEv>:
	virtual void OnBotonCuatroClickEvent();
 8004778:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800477c:	f7ff bfee 	b.w	800475c <_ZN16CPantallaMemoria23OnBotonCuatroClickEventEv>

08004780 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv>:

void CPantallaMemoria::LeeDatosMemoria()
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b088      	sub	sp, #32
 8004784:	af04      	add	r7, sp, #16
 8004786:	6078      	str	r0, [r7, #4]
	uint16_t datos_r[2];
	  if( HAL_I2C_Mem_Read(&hi2c1,ADDRESS_EEPROM,DireccionMemoria,I2C_MEMADD_SIZE_8BIT,(uint8_t*)datos_r,4,HAL_MAX_DELAY)==HAL_OK)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800478e:	b29a      	uxth	r2, r3
 8004790:	f04f 33ff 	mov.w	r3, #4294967295
 8004794:	9302      	str	r3, [sp, #8]
 8004796:	2304      	movs	r3, #4
 8004798:	9301      	str	r3, [sp, #4]
 800479a:	f107 030c 	add.w	r3, r7, #12
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	2301      	movs	r3, #1
 80047a2:	21a0      	movs	r1, #160	@ 0xa0
 80047a4:	4821      	ldr	r0, [pc, #132]	@ (800482c <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0xac>)
 80047a6:	f004 fb3b 	bl	8008e20 <HAL_I2C_Mem_Read>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	bf0c      	ite	eq
 80047b0:	2301      	moveq	r3, #1
 80047b2:	2300      	movne	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d034      	beq.n	8004824 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0xa4>
	  {
			Temperatura=datos_r[0];
 80047ba:	89bb      	ldrh	r3, [r7, #12]
 80047bc:	461a      	mov	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
			VelocidadAire=datos_r[1];
 80047c4:	89fb      	ldrh	r3, [r7, #14]
 80047c6:	461a      	mov	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

		 	if(Temperatura<0 || Temperatura>500)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	db05      	blt.n	80047e4 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x64>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80047de:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80047e2:	dd03      	ble.n	80047ec <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x6c>
		 	{
		 		Temperatura=100;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2264      	movs	r2, #100	@ 0x64
 80047e8:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
		 	}
		 	if(VelocidadAire<0 || VelocidadAire>100)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	db04      	blt.n	8004800 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x80>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047fc:	2b64      	cmp	r3, #100	@ 0x64
 80047fe:	dd03      	ble.n	8004808 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x88>
		 	{
		 		VelocidadAire=50;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2232      	movs	r2, #50	@ 0x32
 8004804:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
		 	}
		 	Estacion->SetNivelAire(VelocidadAire);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3314      	adds	r3, #20
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
 8004820:	4611      	mov	r1, r2
 8004822:	4798      	blx	r3
	  }

}
 8004824:	bf00      	nop
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	200002b8 	.word	0x200002b8

08004830 <_ZN16CPantallaMemoria20DameDireccionMemoriaEv>:
int CPantallaMemoria::DameDireccionMemoria()
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
	int direccion=1;
 8004838:	2301      	movs	r3, #1
 800483a:	60fb      	str	r3, [r7, #12]
	switch(NumeroMemoria)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004842:	2b03      	cmp	r3, #3
 8004844:	d00c      	beq.n	8004860 <_ZN16CPantallaMemoria20DameDireccionMemoriaEv+0x30>
 8004846:	2b03      	cmp	r3, #3
 8004848:	dc0d      	bgt.n	8004866 <_ZN16CPantallaMemoria20DameDireccionMemoriaEv+0x36>
 800484a:	2b01      	cmp	r3, #1
 800484c:	d002      	beq.n	8004854 <_ZN16CPantallaMemoria20DameDireccionMemoriaEv+0x24>
 800484e:	2b02      	cmp	r3, #2
 8004850:	d003      	beq.n	800485a <_ZN16CPantallaMemoria20DameDireccionMemoriaEv+0x2a>
 8004852:	e008      	b.n	8004866 <_ZN16CPantallaMemoria20DameDireccionMemoriaEv+0x36>
	{
	case 1:
		direccion=1;
 8004854:	2301      	movs	r3, #1
 8004856:	60fb      	str	r3, [r7, #12]
		break;
 8004858:	e005      	b.n	8004866 <_ZN16CPantallaMemoria20DameDireccionMemoriaEv+0x36>
	case 2:
		direccion=5;
 800485a:	2305      	movs	r3, #5
 800485c:	60fb      	str	r3, [r7, #12]
		break;
 800485e:	e002      	b.n	8004866 <_ZN16CPantallaMemoria20DameDireccionMemoriaEv+0x36>
	case 3:
		direccion=9;
 8004860:	2309      	movs	r3, #9
 8004862:	60fb      	str	r3, [r7, #12]
		break;
 8004864:	bf00      	nop
	}
	return direccion;
 8004866:	68fb      	ldr	r3, [r7, #12]
}
 8004868:	4618      	mov	r0, r3
 800486a:	3714      	adds	r7, #20
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <_ZN16CPantallaMemoria16LeeDatosEstacionEv>:
void CPantallaMemoria::LeeDatosEstacion()
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
	CPantallaManual::LeeDatosEstacion();
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4618      	mov	r0, r3
 8004880:	f7ff fbfe 	bl	8004080 <_ZN15CPantallaManual16LeeDatosEstacionEv>
	int velocidad=ManejadorControles->GetNivelAire();
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800488a:	4618      	mov	r0, r3
 800488c:	f001 f9dd 	bl	8005c4a <_ZN19CManejadorControles12GetNivelAireEv>
 8004890:	60f8      	str	r0, [r7, #12]
	if(VelocidadAireInicialPotenciometro>velocidad+1 ||VelocidadAireInicialPotenciometro<velocidad-1)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	3301      	adds	r3, #1
 800489c:	429a      	cmp	r2, r3
 800489e:	dc06      	bgt.n	80048ae <_ZN16CPantallaMemoria16LeeDatosEstacionEv+0x3a>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	3b01      	subs	r3, #1
 80048aa:	429a      	cmp	r2, r3
 80048ac:	da08      	bge.n	80048c0 <_ZN16CPantallaMemoria16LeeDatosEstacionEv+0x4c>
	{
		NivelAire =velocidad;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
		CambioNIvelAire=true;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 20fc 	strb.w	r2, [r3, #252]	@ 0xfc
 80048be:	e00a      	b.n	80048d6 <_ZN16CPantallaMemoria16LeeDatosEstacionEv+0x62>
	}
	else
	{
		NivelAire =VelocidadAire;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
		CambioNIvelAire=false;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 20fc 	strb.w	r2, [r3, #252]	@ 0xfc
	}
}
 80048d4:	bf00      	nop
 80048d6:	bf00      	nop
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
	...

080048e0 <_ZN16CPantallaMemoria19OnPerillaIncrementoEv>:
void CPantallaMemoria::OnPerillaIncremento()
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaManual();
 80048e8:	4803      	ldr	r0, [pc, #12]	@ (80048f8 <_ZN16CPantallaMemoria19OnPerillaIncrementoEv+0x18>)
 80048ea:	f7fe fd31 	bl	8003350 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
}
 80048ee:	bf00      	nop
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	20000240 	.word	0x20000240

080048fc <_ZThn48_N16CPantallaMemoria19OnPerillaIncrementoEv>:
	virtual void OnPerillaIncremento();
 80048fc:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004900:	f7ff bfee 	b.w	80048e0 <_ZN16CPantallaMemoria19OnPerillaIncrementoEv>

08004904 <_ZN16CPantallaMemoria19OnPerillaDecrementoEv>:
void CPantallaMemoria::OnPerillaDecremento()
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaManual();
 800490c:	4803      	ldr	r0, [pc, #12]	@ (800491c <_ZN16CPantallaMemoria19OnPerillaDecrementoEv+0x18>)
 800490e:	f7fe fd1f 	bl	8003350 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
}
 8004912:	bf00      	nop
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	20000240 	.word	0x20000240

08004920 <_ZThn48_N16CPantallaMemoria19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 8004920:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004924:	f7ff bfee 	b.w	8004904 <_ZN16CPantallaMemoria19OnPerillaDecrementoEv>

08004928 <_ZN16CPantallaMemoria18MuestraInformacionEb>:
void CPantallaMemoria::MuestraInformacion(bool forzar)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	460b      	mov	r3, r1
 8004932:	70fb      	strb	r3, [r7, #3]
		LeeDatosEstacion();
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	3390      	adds	r3, #144	@ 0x90
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	4798      	blx	r3
		if(CambioNIvelAire==true)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 8004946:	2b01      	cmp	r3, #1
 8004948:	d103      	bne.n	8004952 <_ZN16CPantallaMemoria18MuestraInformacionEb+0x2a>
		{
			ManejadorPantallas.MuestraPantallaManual();
 800494a:	4811      	ldr	r0, [pc, #68]	@ (8004990 <_ZN16CPantallaMemoria18MuestraInformacionEb+0x68>)
 800494c:	f7fe fd00 	bl	8003350 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
			return;
 8004950:	e01b      	b.n	800498a <_ZN16CPantallaMemoria18MuestraInformacionEb+0x62>
		}
		MuestraTemperaturas(forzar);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	78fa      	ldrb	r2, [r7, #3]
 8004956:	4611      	mov	r1, r2
 8004958:	4618      	mov	r0, r3
 800495a:	f7ff fbe3 	bl	8004124 <_ZN15CPantallaManual19MuestraTemperaturasEb>
		MuestraEstado(forzar);
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3394      	adds	r3, #148	@ 0x94
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	78f9      	ldrb	r1, [r7, #3]
 800496a:	4610      	mov	r0, r2
 800496c:	4798      	blx	r3
		MuestraNivelAire(forzar);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	78fa      	ldrb	r2, [r7, #3]
 8004972:	4611      	mov	r1, r2
 8004974:	4618      	mov	r0, r3
 8004976:	f7ff fc39 	bl	80041ec <_ZN15CPantallaManual16MuestraNivelAireEb>
		//marco como visible
		SetVisible(true);
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	3368      	adds	r3, #104	@ 0x68
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2101      	movs	r1, #1
 8004986:	4610      	mov	r0, r2
 8004988:	4798      	blx	r3
}
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	20000240 	.word	0x20000240

08004994 <_ZN14CMenuPrincipalC1Ev>:
#include "GUI/Menu/CMenuItem.hpp"
#include "GUI/CEtiquetaTft.hpp"
#include "GUI/Menu/CMenu.hpp"
#include "string.h"

CMenuPrincipal::CMenuPrincipal():
 8004994:	b590      	push	{r4, r7, lr}
 8004996:	b087      	sub	sp, #28
 8004998:	af04      	add	r7, sp, #16
 800499a:	6078      	str	r0, [r7, #4]
	CPantallaBase(1,(char*) " Menu Principal")
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a37      	ldr	r2, [pc, #220]	@ (8004a7c <_ZN14CMenuPrincipalC1Ev+0xe8>)
 80049a0:	2101      	movs	r1, #1
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fd ff8c 	bl	80028c0 <_ZN13CPantallaBaseC1EiPc>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	33ac      	adds	r3, #172	@ 0xac
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7fe fdcd 	bl	800354c <_ZN20CManejadorEventoMenuC1Ev>
 80049b2:	4a33      	ldr	r2, [pc, #204]	@ (8004a80 <_ZN14CMenuPrincipalC1Ev+0xec>)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	4a32      	ldr	r2, [pc, #200]	@ (8004a84 <_ZN14CMenuPrincipalC1Ev+0xf0>)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80049be:	4a32      	ldr	r2, [pc, #200]	@ (8004a88 <_ZN14CMenuPrincipalC1Ev+0xf4>)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	Menu=new CMenu(4,30,310, 210,COLOR::WHITE,1, COLOR::RED);
 80049c6:	2080      	movs	r0, #128	@ 0x80
 80049c8:	f007 fad8 	bl	800bf7c <_Znwj>
 80049cc:	4603      	mov	r3, r0
 80049ce:	461c      	mov	r4, r3
 80049d0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80049d4:	9303      	str	r3, [sp, #12]
 80049d6:	2301      	movs	r3, #1
 80049d8:	9302      	str	r3, [sp, #8]
 80049da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80049de:	9301      	str	r3, [sp, #4]
 80049e0:	23d2      	movs	r3, #210	@ 0xd2
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	f44f 739b 	mov.w	r3, #310	@ 0x136
 80049e8:	221e      	movs	r2, #30
 80049ea:	2104      	movs	r1, #4
 80049ec:	4620      	mov	r0, r4
 80049ee:	f7fe fde9 	bl	80035c4 <_ZN5CMenuC1Eiiiiiii>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f8c3 40b0 	str.w	r4, [r3, #176]	@ 0xb0
	Menu->AsignaManejadorEventosMenu(this);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	33ac      	adds	r3, #172	@ 0xac
 8004a02:	4619      	mov	r1, r3
 8004a04:	4610      	mov	r0, r2
 8004a06:	f7ff f872 	bl	8003aee <_ZN5CMenu26AsignaManejadorEventosMenuEP20CManejadorEventoMenu>
	Menu->AsignaColoresItems(COLOR::BLACK, 0X776F, COLOR::WHITE, COLOR::BLACK);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8004a10:	2300      	movs	r3, #0
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004a18:	f247 726f 	movw	r2, #30575	@ 0x776f
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	f7fe fe4a 	bl	80036b6 <_ZN5CMenu18AsignaColoresItemsEiiii>

	Menu->AgregaItem((char*)"Conf Memoria 1", MENU_PRINCIPAL::MENU_MEMORIA_1);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8004a28:	2300      	movs	r3, #0
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	4917      	ldr	r1, [pc, #92]	@ (8004a8c <_ZN14CMenuPrincipalC1Ev+0xf8>)
 8004a2e:	f7fe fea5 	bl	800377c <_ZN5CMenu10AgregaItemEPcib>
	Menu->AgregaItem((char*)"Conf Memoria 2",(int)MENU_PRINCIPAL::MENU_MEMORIA_2);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8004a38:	2300      	movs	r3, #0
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	4914      	ldr	r1, [pc, #80]	@ (8004a90 <_ZN14CMenuPrincipalC1Ev+0xfc>)
 8004a3e:	f7fe fe9d 	bl	800377c <_ZN5CMenu10AgregaItemEPcib>
	Menu->AgregaItem((char*)"Conf Memoria 3", (int)MENU_PRINCIPAL::MENU_MEMORIA_3);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8004a48:	2300      	movs	r3, #0
 8004a4a:	2203      	movs	r2, #3
 8004a4c:	4911      	ldr	r1, [pc, #68]	@ (8004a94 <_ZN14CMenuPrincipalC1Ev+0x100>)
 8004a4e:	f7fe fe95 	bl	800377c <_ZN5CMenu10AgregaItemEPcib>
	Menu->AgregaItem((char*)"Rampa Temperatura", (int)MENU_PRINCIPAL::MENU_RAMPA);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8004a58:	2300      	movs	r3, #0
 8004a5a:	2204      	movs	r2, #4
 8004a5c:	490e      	ldr	r1, [pc, #56]	@ (8004a98 <_ZN14CMenuPrincipalC1Ev+0x104>)
 8004a5e:	f7fe fe8d 	bl	800377c <_ZN5CMenu10AgregaItemEPcib>
	Menu->AgregaItem((char*)"Salir", MENU_SALIR);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8004a68:	2300      	movs	r3, #0
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	490b      	ldr	r1, [pc, #44]	@ (8004a9c <_ZN14CMenuPrincipalC1Ev+0x108>)
 8004a6e:	f7fe fe85 	bl	800377c <_ZN5CMenu10AgregaItemEPcib>
}
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4618      	mov	r0, r3
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd90      	pop	{r4, r7, pc}
 8004a7c:	0800ed94 	.word	0x0800ed94
 8004a80:	0800f424 	.word	0x0800f424
 8004a84:	0800f4b8 	.word	0x0800f4b8
 8004a88:	0800f4ec 	.word	0x0800f4ec
 8004a8c:	0800eda4 	.word	0x0800eda4
 8004a90:	0800edb4 	.word	0x0800edb4
 8004a94:	0800edc4 	.word	0x0800edc4
 8004a98:	0800edd4 	.word	0x0800edd4
 8004a9c:	0800ede8 	.word	0x0800ede8

08004aa0 <_ZN14CMenuPrincipalD1Ev>:

CMenuPrincipal::~CMenuPrincipal()
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	4a0b      	ldr	r2, [pc, #44]	@ (8004ad8 <_ZN14CMenuPrincipalD1Ev+0x38>)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	601a      	str	r2, [r3, #0]
 8004aae:	4a0b      	ldr	r2, [pc, #44]	@ (8004adc <_ZN14CMenuPrincipalD1Ev+0x3c>)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ab4:	4a0a      	ldr	r2, [pc, #40]	@ (8004ae0 <_ZN14CMenuPrincipalD1Ev+0x40>)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	// TODO Auto-generated destructor stub
}
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	33ac      	adds	r3, #172	@ 0xac
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7fe fd53 	bl	800356c <_ZN20CManejadorEventoMenuD1Ev>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7fd fec5 	bl	8002858 <_ZN13CPantallaBaseD1Ev>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	0800f424 	.word	0x0800f424
 8004adc:	0800f4b8 	.word	0x0800f4b8
 8004ae0:	0800f4ec 	.word	0x0800f4ec

08004ae4 <_ZThn48_N14CMenuPrincipalD1Ev>:
	CEstacionBase *Estacion;
	CMenuItem* item1,*item2;

public:
	CMenuPrincipal();
	virtual ~CMenuPrincipal();
 8004ae4:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004ae8:	f7ff bfda 	b.w	8004aa0 <_ZN14CMenuPrincipalD1Ev>

08004aec <_ZThn172_N14CMenuPrincipalD1Ev>:
 8004aec:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8004af0:	f7ff bfd6 	b.w	8004aa0 <_ZN14CMenuPrincipalD1Ev>

08004af4 <_ZN14CMenuPrincipalD0Ev>:
CMenuPrincipal::~CMenuPrincipal()
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
}
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f7ff ffcf 	bl	8004aa0 <_ZN14CMenuPrincipalD1Ev>
 8004b02:	21c0      	movs	r1, #192	@ 0xc0
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f007 fa37 	bl	800bf78 <_ZdlPvj>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <_ZThn172_N14CMenuPrincipalD0Ev>:
 8004b14:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8004b18:	f7ff bfec 	b.w	8004af4 <_ZN14CMenuPrincipalD0Ev>

08004b1c <_ZThn48_N14CMenuPrincipalD0Ev>:
 8004b1c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004b20:	f7ff bfe8 	b.w	8004af4 <_ZN14CMenuPrincipalD0Ev>

08004b24 <_ZN14CMenuPrincipal4ShowEv>:

void CMenuPrincipal::Show()
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
	CPantallaBase::Show();
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fd ff38 	bl	80029a4 <_ZN13CPantallaBase4ShowEv>
	Menu->Show();
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	3348      	adds	r3, #72	@ 0x48
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4610      	mov	r0, r2
 8004b48:	4798      	blx	r3
	SetVisible(true);
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	3368      	adds	r3, #104	@ 0x68
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2101      	movs	r1, #1
 8004b56:	4610      	mov	r0, r2
 8004b58:	4798      	blx	r3
}
 8004b5a:	bf00      	nop
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <_ZN14CMenuPrincipal8RefrescaEv>:
void CMenuPrincipal::Refresca()
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b082      	sub	sp, #8
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
	if(EsVisible()==false)
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	3364      	adds	r3, #100	@ 0x64
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4610      	mov	r0, r2
 8004b76:	4798      	blx	r3
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	bf0c      	ite	eq
 8004b7e:	2301      	moveq	r3, #1
 8004b80:	2300      	movne	r3, #0
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d005      	beq.n	8004b94 <_ZN14CMenuPrincipal8RefrescaEv+0x32>
		Show();
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	3348      	adds	r3, #72	@ 0x48
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	4798      	blx	r3
}
 8004b94:	bf00      	nop
 8004b96:	3708      	adds	r7, #8
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <_ZN14CMenuPrincipal23OnBotonCuatroClickEventEv>:
void CMenuPrincipal::OnBotonCuatroClickEvent()
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaManual();
 8004ba4:	4803      	ldr	r0, [pc, #12]	@ (8004bb4 <_ZN14CMenuPrincipal23OnBotonCuatroClickEventEv+0x18>)
 8004ba6:	f7fe fbd3 	bl	8003350 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
}
 8004baa:	bf00      	nop
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	20000240 	.word	0x20000240

08004bb8 <_ZThn48_N14CMenuPrincipal23OnBotonCuatroClickEventEv>:
	virtual void Show();
	virtual void Refresca();
	virtual void OnBotonCuatroClickEvent();
 8004bb8:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004bbc:	f7ff bfee 	b.w	8004b9c <_ZN14CMenuPrincipal23OnBotonCuatroClickEventEv>

08004bc0 <_ZN14CMenuPrincipal19OnPerillaIncrementoEv>:
void CMenuPrincipal::OnPerillaIncremento()
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
	Menu->OnSeleccionaSiguiente();
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fe fe3c 	bl	800384c <_ZN5CMenu21OnSeleccionaSiguienteEv>
}
 8004bd4:	bf00      	nop
 8004bd6:	3708      	adds	r7, #8
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <_ZThn48_N14CMenuPrincipal19OnPerillaIncrementoEv>:
	virtual void OnPerillaIncremento();
 8004bdc:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004be0:	f7ff bfee 	b.w	8004bc0 <_ZN14CMenuPrincipal19OnPerillaIncrementoEv>

08004be4 <_ZN14CMenuPrincipal19OnPerillaDecrementoEv>:
void CMenuPrincipal::OnPerillaDecremento()
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
	Menu->OnSeleccionaAnterior();
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7fe fe78 	bl	80038e8 <_ZN5CMenu20OnSeleccionaAnteriorEv>
}
 8004bf8:	bf00      	nop
 8004bfa:	3708      	adds	r7, #8
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <_ZThn48_N14CMenuPrincipal19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 8004c00:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004c04:	f7ff bfee 	b.w	8004be4 <_ZN14CMenuPrincipal19OnPerillaDecrementoEv>

08004c08 <_ZN14CMenuPrincipal24OnBotonPerillaClickEventEv>:
void CMenuPrincipal::OnBotonPerillaClickEvent()
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
	Menu->OnClickSeleccionado();
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7fe fed1 	bl	80039be <_ZN5CMenu19OnClickSeleccionadoEv>
}
 8004c1c:	bf00      	nop
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <_ZThn48_N14CMenuPrincipal24OnBotonPerillaClickEventEv>:
	virtual void OnBotonPerillaClickEvent();
 8004c24:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004c28:	f7ff bfee 	b.w	8004c08 <_ZN14CMenuPrincipal24OnBotonPerillaClickEventEv>

08004c2c <_ZN14CMenuPrincipal11OnMenuEventEi>:
void CMenuPrincipal::OnMenuEvent(int identificador)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
	switch(identificador)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d007      	beq.n	8004c4c <_ZN14CMenuPrincipal11OnMenuEventEi+0x20>
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	db0d      	blt.n	8004c5e <_ZN14CMenuPrincipal11OnMenuEventEi+0x32>
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	3b01      	subs	r3, #1
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d809      	bhi.n	8004c5e <_ZN14CMenuPrincipal11OnMenuEventEi+0x32>
 8004c4a:	e003      	b.n	8004c54 <_ZN14CMenuPrincipal11OnMenuEventEi+0x28>
	{
	case MENU_PRINCIPAL::MENU_SALIR:
		ManejadorPantallas.MuestraPantallaManual();//.MuestraPantallaAnterior();
 8004c4c:	4806      	ldr	r0, [pc, #24]	@ (8004c68 <_ZN14CMenuPrincipal11OnMenuEventEi+0x3c>)
 8004c4e:	f7fe fb7f 	bl	8003350 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
		break;
 8004c52:	e004      	b.n	8004c5e <_ZN14CMenuPrincipal11OnMenuEventEi+0x32>
	case MENU_PRINCIPAL::MENU_MEMORIA_1:
	case MENU_PRINCIPAL::MENU_MEMORIA_2:
	case MENU_PRINCIPAL::MENU_MEMORIA_3:
		ManejadorPantallas.MuestraPantallaConfiguracionMemoria(identificador);
 8004c54:	6839      	ldr	r1, [r7, #0]
 8004c56:	4804      	ldr	r0, [pc, #16]	@ (8004c68 <_ZN14CMenuPrincipal11OnMenuEventEi+0x3c>)
 8004c58:	f7fe fc2c 	bl	80034b4 <_ZN19CManejadorPantallas35MuestraPantallaConfiguracionMemoriaEi>
		break;
 8004c5c:	bf00      	nop
	}

}
 8004c5e:	bf00      	nop
 8004c60:	3708      	adds	r7, #8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	20000240 	.word	0x20000240

08004c6c <_ZThn172_N14CMenuPrincipal11OnMenuEventEi>:
	virtual void OnMenuEvent(int identificador);
 8004c6c:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8004c70:	f7ff bfdc 	b.w	8004c2c <_ZN14CMenuPrincipal11OnMenuEventEi>

08004c74 <_ZN14CMenuPrincipal21OnBotonTresClickEventEv>:

void CMenuPrincipal::OnBotonTresClickEvent()
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(3);
 8004c7c:	2103      	movs	r1, #3
 8004c7e:	4803      	ldr	r0, [pc, #12]	@ (8004c8c <_ZN14CMenuPrincipal21OnBotonTresClickEventEv+0x18>)
 8004c80:	f7fe fc3f 	bl	8003502 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 8004c84:	bf00      	nop
 8004c86:	3708      	adds	r7, #8
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	20000240 	.word	0x20000240

08004c90 <_ZThn48_N14CMenuPrincipal21OnBotonTresClickEventEv>:

	virtual void OnBotonUnoClickEvent();
	virtual void OnBotonDosClickEvent();
	virtual void OnBotonTresClickEvent();
 8004c90:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004c94:	f7ff bfee 	b.w	8004c74 <_ZN14CMenuPrincipal21OnBotonTresClickEventEv>

08004c98 <_ZN14CMenuPrincipal20OnBotonUnoClickEventEv>:
void CMenuPrincipal::OnBotonUnoClickEvent()
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(1);
 8004ca0:	2101      	movs	r1, #1
 8004ca2:	4803      	ldr	r0, [pc, #12]	@ (8004cb0 <_ZN14CMenuPrincipal20OnBotonUnoClickEventEv+0x18>)
 8004ca4:	f7fe fc2d 	bl	8003502 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 8004ca8:	bf00      	nop
 8004caa:	3708      	adds	r7, #8
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	20000240 	.word	0x20000240

08004cb4 <_ZThn48_N14CMenuPrincipal20OnBotonUnoClickEventEv>:
	virtual void OnBotonUnoClickEvent();
 8004cb4:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004cb8:	f7ff bfee 	b.w	8004c98 <_ZN14CMenuPrincipal20OnBotonUnoClickEventEv>

08004cbc <_ZN14CMenuPrincipal20OnBotonDosClickEventEv>:
void CMenuPrincipal::OnBotonDosClickEvent()
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(2);
 8004cc4:	2102      	movs	r1, #2
 8004cc6:	4803      	ldr	r0, [pc, #12]	@ (8004cd4 <_ZN14CMenuPrincipal20OnBotonDosClickEventEv+0x18>)
 8004cc8:	f7fe fc1b 	bl	8003502 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 8004ccc:	bf00      	nop
 8004cce:	3708      	adds	r7, #8
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	20000240 	.word	0x20000240

08004cd8 <_ZThn48_N14CMenuPrincipal20OnBotonDosClickEventEv>:
	virtual void OnBotonDosClickEvent();
 8004cd8:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004cdc:	f7ff bfee 	b.w	8004cbc <_ZN14CMenuPrincipal20OnBotonDosClickEventEv>

08004ce0 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt>:
}

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1,
		uint16_t Y1, uint16_t Colour)
{
 8004ce0:	b590      	push	{r4, r7, lr}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	4604      	mov	r4, r0
 8004ce8:	4608      	mov	r0, r1
 8004cea:	4611      	mov	r1, r2
 8004cec:	461a      	mov	r2, r3
 8004cee:	4623      	mov	r3, r4
 8004cf0:	80fb      	strh	r3, [r7, #6]
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	80bb      	strh	r3, [r7, #4]
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	807b      	strh	r3, [r7, #2]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	803b      	strh	r3, [r7, #0]
	uint16_t X_length = 0;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	82fb      	strh	r3, [r7, #22]
	uint16_t Y_length = 0;
 8004d02:	2300      	movs	r3, #0
 8004d04:	82bb      	strh	r3, [r7, #20]
	uint8_t Negative_X = 0;
 8004d06:	2300      	movs	r3, #0
 8004d08:	74fb      	strb	r3, [r7, #19]
	uint8_t Negative_Y = 0;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	74bb      	strb	r3, [r7, #18]
	float Calc_Negative = 0;
 8004d0e:	f04f 0300 	mov.w	r3, #0
 8004d12:	60fb      	str	r3, [r7, #12]

	Calc_Negative = X1 - X0;
 8004d14:	887a      	ldrh	r2, [r7, #2]
 8004d16:	88fb      	ldrh	r3, [r7, #6]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	ee07 3a90 	vmov	s15, r3
 8004d1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d22:	edc7 7a03 	vstr	s15, [r7, #12]
	if (Calc_Negative < 0)
 8004d26:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d32:	d501      	bpl.n	8004d38 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x58>
		Negative_X = 1;
 8004d34:	2301      	movs	r3, #1
 8004d36:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8004d38:	f04f 0300 	mov.w	r3, #0
 8004d3c:	60fb      	str	r3, [r7, #12]

	Calc_Negative = Y1 - Y0;
 8004d3e:	883a      	ldrh	r2, [r7, #0]
 8004d40:	88bb      	ldrh	r3, [r7, #4]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	ee07 3a90 	vmov	s15, r3
 8004d48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d4c:	edc7 7a03 	vstr	s15, [r7, #12]
	if (Calc_Negative < 0)
 8004d50:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d5c:	d501      	bpl.n	8004d62 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x82>
		Negative_Y = 1;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if (!Negative_X)
 8004d62:	7cfb      	ldrb	r3, [r7, #19]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d104      	bne.n	8004d72 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x92>
	{
		X_length = X1 - X0;
 8004d68:	887a      	ldrh	r2, [r7, #2]
 8004d6a:	88fb      	ldrh	r3, [r7, #6]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	82fb      	strh	r3, [r7, #22]
 8004d70:	e003      	b.n	8004d7a <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x9a>
	}
	else
	{
		X_length = X0 - X1;
 8004d72:	88fa      	ldrh	r2, [r7, #6]
 8004d74:	887b      	ldrh	r3, [r7, #2]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 8004d7a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004d7c:	8afa      	ldrh	r2, [r7, #22]
 8004d7e:	88b9      	ldrh	r1, [r7, #4]
 8004d80:	88f8      	ldrh	r0, [r7, #6]
 8004d82:	f000 fd73 	bl	800586c <_Z28ILI9341_Draw_Horizontal_Linetttt>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 8004d86:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004d88:	8afa      	ldrh	r2, [r7, #22]
 8004d8a:	8839      	ldrh	r1, [r7, #0]
 8004d8c:	88f8      	ldrh	r0, [r7, #6]
 8004d8e:	f000 fd6d 	bl	800586c <_Z28ILI9341_Draw_Horizontal_Linetttt>

	//DRAW VERTICAL!
	if (!Negative_Y)
 8004d92:	7cbb      	ldrb	r3, [r7, #18]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d104      	bne.n	8004da2 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xc2>
	{
		Y_length = Y1 - Y0;
 8004d98:	883a      	ldrh	r2, [r7, #0]
 8004d9a:	88bb      	ldrh	r3, [r7, #4]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	82bb      	strh	r3, [r7, #20]
 8004da0:	e003      	b.n	8004daa <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xca>
	}
	else
	{
		Y_length = Y0 - Y1;
 8004da2:	88ba      	ldrh	r2, [r7, #4]
 8004da4:	883b      	ldrh	r3, [r7, #0]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	82bb      	strh	r3, [r7, #20]
	}
	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 8004daa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004dac:	8aba      	ldrh	r2, [r7, #20]
 8004dae:	88b9      	ldrh	r1, [r7, #4]
 8004db0:	88f8      	ldrh	r0, [r7, #6]
 8004db2:	f000 fda9 	bl	8005908 <_Z26ILI9341_Draw_Vertical_Linetttt>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 8004db6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004db8:	8aba      	ldrh	r2, [r7, #20]
 8004dba:	88b9      	ldrh	r1, [r7, #4]
 8004dbc:	8878      	ldrh	r0, [r7, #2]
 8004dbe:	f000 fda3 	bl	8005908 <_Z26ILI9341_Draw_Vertical_Linetttt>

	if ((X_length > 0) || (Y_length > 0))
 8004dc2:	8afb      	ldrh	r3, [r7, #22]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d102      	bne.n	8004dce <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xee>
 8004dc8:	8abb      	ldrh	r3, [r7, #20]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d005      	beq.n	8004dda <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xfa>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 8004dce:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004dd0:	8839      	ldrh	r1, [r7, #0]
 8004dd2:	887b      	ldrh	r3, [r7, #2]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 fc13 	bl	8005600 <_Z18ILI9341_Draw_Pixelttt>
	}

}
 8004dda:	bf00      	nop
 8004ddc:	371c      	adds	r7, #28
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd90      	pop	{r4, r7, pc}

08004de2 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt>:

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1,
		uint16_t Y1, uint16_t Colour)
{
 8004de2:	b590      	push	{r4, r7, lr}
 8004de4:	b089      	sub	sp, #36	@ 0x24
 8004de6:	af02      	add	r7, sp, #8
 8004de8:	4604      	mov	r4, r0
 8004dea:	4608      	mov	r0, r1
 8004dec:	4611      	mov	r1, r2
 8004dee:	461a      	mov	r2, r3
 8004df0:	4623      	mov	r3, r4
 8004df2:	80fb      	strh	r3, [r7, #6]
 8004df4:	4603      	mov	r3, r0
 8004df6:	80bb      	strh	r3, [r7, #4]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	807b      	strh	r3, [r7, #2]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	803b      	strh	r3, [r7, #0]
	uint16_t X_length = 0;
 8004e00:	2300      	movs	r3, #0
 8004e02:	82fb      	strh	r3, [r7, #22]
	uint16_t Y_length = 0;
 8004e04:	2300      	movs	r3, #0
 8004e06:	82bb      	strh	r3, [r7, #20]
	uint8_t Negative_X = 0;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	74fb      	strb	r3, [r7, #19]
	uint8_t Negative_Y = 0;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	74bb      	strb	r3, [r7, #18]
	int32_t Calc_Negative = 0;
 8004e10:	2300      	movs	r3, #0
 8004e12:	60bb      	str	r3, [r7, #8]

	uint16_t X0_true = 0;
 8004e14:	2300      	movs	r3, #0
 8004e16:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	81fb      	strh	r3, [r7, #14]

	Calc_Negative = X1 - X0;
 8004e1c:	887a      	ldrh	r2, [r7, #2]
 8004e1e:	88fb      	ldrh	r3, [r7, #6]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	60bb      	str	r3, [r7, #8]
	if (Calc_Negative < 0)
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	da01      	bge.n	8004e2e <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x4c>
		Negative_X = 1;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	60bb      	str	r3, [r7, #8]

	Calc_Negative = Y1 - Y0;
 8004e32:	883a      	ldrh	r2, [r7, #0]
 8004e34:	88bb      	ldrh	r3, [r7, #4]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	60bb      	str	r3, [r7, #8]
	if (Calc_Negative < 0)
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	da01      	bge.n	8004e44 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x62>
		Negative_Y = 1;
 8004e40:	2301      	movs	r3, #1
 8004e42:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if (!Negative_X)
 8004e44:	7cfb      	ldrb	r3, [r7, #19]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d106      	bne.n	8004e58 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x76>
	{
		X_length = X1 - X0;
 8004e4a:	887a      	ldrh	r2, [r7, #2]
 8004e4c:	88fb      	ldrh	r3, [r7, #6]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8004e52:	88fb      	ldrh	r3, [r7, #6]
 8004e54:	823b      	strh	r3, [r7, #16]
 8004e56:	e005      	b.n	8004e64 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8004e58:	88fa      	ldrh	r2, [r7, #6]
 8004e5a:	887b      	ldrh	r3, [r7, #2]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8004e60:	887b      	ldrh	r3, [r7, #2]
 8004e62:	823b      	strh	r3, [r7, #16]
	}

	//DRAW VERTICAL!
	if (!Negative_Y)
 8004e64:	7cbb      	ldrb	r3, [r7, #18]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d106      	bne.n	8004e78 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x96>
	{
		Y_length = Y1 - Y0;
 8004e6a:	883a      	ldrh	r2, [r7, #0]
 8004e6c:	88bb      	ldrh	r3, [r7, #4]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;
 8004e72:	88bb      	ldrh	r3, [r7, #4]
 8004e74:	81fb      	strh	r3, [r7, #14]
 8004e76:	e005      	b.n	8004e84 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 8004e78:	88ba      	ldrh	r2, [r7, #4]
 8004e7a:	883b      	ldrh	r3, [r7, #0]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;
 8004e80:	883b      	ldrh	r3, [r7, #0]
 8004e82:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);
 8004e84:	8abc      	ldrh	r4, [r7, #20]
 8004e86:	8afa      	ldrh	r2, [r7, #22]
 8004e88:	89f9      	ldrh	r1, [r7, #14]
 8004e8a:	8a38      	ldrh	r0, [r7, #16]
 8004e8c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	4623      	mov	r3, r4
 8004e92:	f000 fc81 	bl	8005798 <_Z22ILI9341_Draw_Rectanglettttt>
}
 8004e96:	bf00      	nop
 8004e98:	371c      	adds	r7, #28
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd90      	pop	{r4, r7, pc}
	...

08004ea0 <_Z17ILI9341_Draw_Charciittt>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, int X, int Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour)
{
 8004ea0:	b590      	push	{r4, r7, lr}
 8004ea2:	b08b      	sub	sp, #44	@ 0x2c
 8004ea4:	af02      	add	r7, sp, #8
 8004ea6:	60b9      	str	r1, [r7, #8]
 8004ea8:	607a      	str	r2, [r7, #4]
 8004eaa:	461a      	mov	r2, r3
 8004eac:	4603      	mov	r3, r0
 8004eae:	73fb      	strb	r3, [r7, #15]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	81bb      	strh	r3, [r7, #12]
	uint8_t function_char;
	uint8_t i, j;

	function_char = Character;
 8004eb4:	7bfb      	ldrb	r3, [r7, #15]
 8004eb6:	77fb      	strb	r3, [r7, #31]

	if (function_char < ' ')
 8004eb8:	7ffb      	ldrb	r3, [r7, #31]
 8004eba:	2b1f      	cmp	r3, #31
 8004ebc:	d802      	bhi.n	8004ec4 <_Z17ILI9341_Draw_Charciittt+0x24>
	{
		Character = 0;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	73fb      	strb	r3, [r7, #15]
 8004ec2:	e002      	b.n	8004eca <_Z17ILI9341_Draw_Charciittt+0x2a>
	}
	else
	{
		function_char -= 32;
 8004ec4:	7ffb      	ldrb	r3, [r7, #31]
 8004ec6:	3b20      	subs	r3, #32
 8004ec8:	77fb      	strb	r3, [r7, #31]
	}

	char temp[CHAR_WIDTH];
	for (uint8_t k = 0; k < CHAR_WIDTH; k++)
 8004eca:	2300      	movs	r3, #0
 8004ecc:	773b      	strb	r3, [r7, #28]
 8004ece:	e012      	b.n	8004ef6 <_Z17ILI9341_Draw_Charciittt+0x56>
	{
		temp[k] = font[function_char][k];
 8004ed0:	7ffa      	ldrb	r2, [r7, #31]
 8004ed2:	7f38      	ldrb	r0, [r7, #28]
 8004ed4:	7f39      	ldrb	r1, [r7, #28]
 8004ed6:	4c3c      	ldr	r4, [pc, #240]	@ (8004fc8 <_Z17ILI9341_Draw_Charciittt+0x128>)
 8004ed8:	4613      	mov	r3, r2
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	4413      	add	r3, r2
 8004ede:	005b      	lsls	r3, r3, #1
 8004ee0:	4423      	add	r3, r4
 8004ee2:	4403      	add	r3, r0
 8004ee4:	781a      	ldrb	r2, [r3, #0]
 8004ee6:	f101 0320 	add.w	r3, r1, #32
 8004eea:	443b      	add	r3, r7
 8004eec:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t k = 0; k < CHAR_WIDTH; k++)
 8004ef0:	7f3b      	ldrb	r3, [r7, #28]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	773b      	strb	r3, [r7, #28]
 8004ef6:	7f3b      	ldrb	r3, [r7, #28]
 8004ef8:	2b05      	cmp	r3, #5
 8004efa:	d9e9      	bls.n	8004ed0 <_Z17ILI9341_Draw_Charciittt+0x30>
	}

	// Draw pixels
	ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH * Size, CHAR_HEIGHT * Size,
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	b298      	uxth	r0, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	b299      	uxth	r1, r3
 8004f04:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004f06:	461a      	mov	r2, r3
 8004f08:	0052      	lsls	r2, r2, #1
 8004f0a:	4413      	add	r3, r2
 8004f0c:	005b      	lsls	r3, r3, #1
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	b29c      	uxth	r4, r3
 8004f16:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	4623      	mov	r3, r4
 8004f1c:	f000 fc3c 	bl	8005798 <_Z22ILI9341_Draw_Rectanglettttt>
			Background_Colour);
	for (j = 0; j < CHAR_WIDTH; j++)
 8004f20:	2300      	movs	r3, #0
 8004f22:	777b      	strb	r3, [r7, #29]
 8004f24:	e047      	b.n	8004fb6 <_Z17ILI9341_Draw_Charciittt+0x116>
	{
		for (i = 0; i < CHAR_HEIGHT; i++)
 8004f26:	2300      	movs	r3, #0
 8004f28:	77bb      	strb	r3, [r7, #30]
 8004f2a:	e03e      	b.n	8004faa <_Z17ILI9341_Draw_Charciittt+0x10a>
		{
			if (temp[j] & (1 << i))
 8004f2c:	7f7b      	ldrb	r3, [r7, #29]
 8004f2e:	3320      	adds	r3, #32
 8004f30:	443b      	add	r3, r7
 8004f32:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004f36:	461a      	mov	r2, r3
 8004f38:	7fbb      	ldrb	r3, [r7, #30]
 8004f3a:	fa42 f303 	asr.w	r3, r2, r3
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d02e      	beq.n	8004fa4 <_Z17ILI9341_Draw_Charciittt+0x104>
			{
				if (Size == 1)
 8004f46:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d110      	bne.n	8004f6e <_Z17ILI9341_Draw_Charciittt+0xce>
				{
					ILI9341_Draw_Pixel(X + j, Y + i, Colour);
 8004f4c:	7f7b      	ldrb	r3, [r7, #29]
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	4413      	add	r3, r2
 8004f56:	b298      	uxth	r0, r3
 8004f58:	7fbb      	ldrb	r3, [r7, #30]
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	4413      	add	r3, r2
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	89ba      	ldrh	r2, [r7, #12]
 8004f66:	4619      	mov	r1, r3
 8004f68:	f000 fb4a 	bl	8005600 <_Z18ILI9341_Draw_Pixelttt>
 8004f6c:	e01a      	b.n	8004fa4 <_Z17ILI9341_Draw_Charciittt+0x104>
				}
				else
				{
					ILI9341_Draw_Rectangle(X + (j * Size), Y + (i * Size), Size,
 8004f6e:	7f7b      	ldrb	r3, [r7, #29]
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8004f74:	fb12 f303 	smulbb	r3, r2, r3
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	4413      	add	r3, r2
 8004f80:	b298      	uxth	r0, r3
 8004f82:	7fbb      	ldrb	r3, [r7, #30]
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8004f88:	fb12 f303 	smulbb	r3, r2, r3
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	4413      	add	r3, r2
 8004f94:	b299      	uxth	r1, r3
 8004f96:	8e3c      	ldrh	r4, [r7, #48]	@ 0x30
 8004f98:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8004f9a:	89bb      	ldrh	r3, [r7, #12]
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	4623      	mov	r3, r4
 8004fa0:	f000 fbfa 	bl	8005798 <_Z22ILI9341_Draw_Rectanglettttt>
		for (i = 0; i < CHAR_HEIGHT; i++)
 8004fa4:	7fbb      	ldrb	r3, [r7, #30]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	77bb      	strb	r3, [r7, #30]
 8004faa:	7fbb      	ldrb	r3, [r7, #30]
 8004fac:	2b07      	cmp	r3, #7
 8004fae:	d9bd      	bls.n	8004f2c <_Z17ILI9341_Draw_Charciittt+0x8c>
	for (j = 0; j < CHAR_WIDTH; j++)
 8004fb0:	7f7b      	ldrb	r3, [r7, #29]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	777b      	strb	r3, [r7, #29]
 8004fb6:	7f7b      	ldrb	r3, [r7, #29]
 8004fb8:	2b05      	cmp	r3, #5
 8004fba:	d9b4      	bls.n	8004f26 <_Z17ILI9341_Draw_Charciittt+0x86>
							Size, Colour);
				}
			}
		}
	}
}
 8004fbc:	bf00      	nop
 8004fbe:	bf00      	nop
 8004fc0:	3724      	adds	r7, #36	@ 0x24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd90      	pop	{r4, r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	0800f4f8 	.word	0x0800f4f8

08004fcc <_Z17ILI9341_Draw_TextPKciittt>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char *Text, int X, int Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af02      	add	r7, sp, #8
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
 8004fd8:	807b      	strh	r3, [r7, #2]
	while (*Text)
 8004fda:	e016      	b.n	800500a <_Z17ILI9341_Draw_TextPKciittt+0x3e>
	{
		ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	1c5a      	adds	r2, r3, #1
 8004fe0:	60fa      	str	r2, [r7, #12]
 8004fe2:	7818      	ldrb	r0, [r3, #0]
 8004fe4:	887a      	ldrh	r2, [r7, #2]
 8004fe6:	8bbb      	ldrh	r3, [r7, #28]
 8004fe8:	9301      	str	r3, [sp, #4]
 8004fea:	8b3b      	ldrh	r3, [r7, #24]
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	68b9      	ldr	r1, [r7, #8]
 8004ff4:	f7ff ff54 	bl	8004ea0 <_Z17ILI9341_Draw_Charciittt>
		X += CHAR_WIDTH * Size;
 8004ff8:	8b3a      	ldrh	r2, [r7, #24]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	4413      	add	r3, r2
 8005000:	005b      	lsls	r3, r3, #1
 8005002:	461a      	mov	r2, r3
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	4413      	add	r3, r2
 8005008:	60bb      	str	r3, [r7, #8]
	while (*Text)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1e4      	bne.n	8004fdc <_Z17ILI9341_Draw_TextPKciittt+0x10>
	}
}
 8005012:	bf00      	nop
 8005014:	bf00      	nop
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <_Z16ILI9341_SPI_Initv>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0
	SPI1_Init();													//SPI INIT
 8005020:	f002 faa4 	bl	800756c <SPI1_Init>
	MX_GPIO_Init();													//GPIO INIT
 8005024:	f001 fe3c 	bl	8006ca0 <MX_GPIO_Init>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8005028:	2200      	movs	r2, #0
 800502a:	2101      	movs	r1, #1
 800502c:	4802      	ldr	r0, [pc, #8]	@ (8005038 <_Z16ILI9341_SPI_Initv+0x1c>)
 800502e:	f003 fc87 	bl	8008940 <HAL_GPIO_WritePin>
}
 8005032:	bf00      	nop
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	40020400 	.word	0x40020400

0800503c <_Z16ILI9341_SPI_Sendh>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	4603      	mov	r3, r0
 8005044:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8005046:	1df9      	adds	r1, r7, #7
 8005048:	2301      	movs	r3, #1
 800504a:	2201      	movs	r2, #1
 800504c:	4803      	ldr	r0, [pc, #12]	@ (800505c <_Z16ILI9341_SPI_Sendh+0x20>)
 800504e:	f005 f9ae 	bl	800a3ae <HAL_SPI_Transmit>
}
 8005052:	bf00      	nop
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	2000043c 	.word	0x2000043c

08005060 <_Z21ILI9341_Write_Commandh>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	4603      	mov	r3, r0
 8005068:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800506a:	2200      	movs	r2, #0
 800506c:	2101      	movs	r1, #1
 800506e:	480a      	ldr	r0, [pc, #40]	@ (8005098 <_Z21ILI9341_Write_Commandh+0x38>)
 8005070:	f003 fc66 	bl	8008940 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8005074:	2200      	movs	r2, #0
 8005076:	2102      	movs	r1, #2
 8005078:	4807      	ldr	r0, [pc, #28]	@ (8005098 <_Z21ILI9341_Write_Commandh+0x38>)
 800507a:	f003 fc61 	bl	8008940 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Command);
 800507e:	79fb      	ldrb	r3, [r7, #7]
 8005080:	4618      	mov	r0, r3
 8005082:	f7ff ffdb 	bl	800503c <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005086:	2201      	movs	r2, #1
 8005088:	2101      	movs	r1, #1
 800508a:	4803      	ldr	r0, [pc, #12]	@ (8005098 <_Z21ILI9341_Write_Commandh+0x38>)
 800508c:	f003 fc58 	bl	8008940 <HAL_GPIO_WritePin>
}
 8005090:	bf00      	nop
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	40020400 	.word	0x40020400

0800509c <_Z18ILI9341_Write_Datah>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	4603      	mov	r3, r0
 80050a4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80050a6:	2201      	movs	r2, #1
 80050a8:	2102      	movs	r1, #2
 80050aa:	480a      	ldr	r0, [pc, #40]	@ (80050d4 <_Z18ILI9341_Write_Datah+0x38>)
 80050ac:	f003 fc48 	bl	8008940 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80050b0:	2200      	movs	r2, #0
 80050b2:	2101      	movs	r1, #1
 80050b4:	4807      	ldr	r0, [pc, #28]	@ (80050d4 <_Z18ILI9341_Write_Datah+0x38>)
 80050b6:	f003 fc43 	bl	8008940 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Data);
 80050ba:	79fb      	ldrb	r3, [r7, #7]
 80050bc:	4618      	mov	r0, r3
 80050be:	f7ff ffbd 	bl	800503c <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80050c2:	2201      	movs	r2, #1
 80050c4:	2101      	movs	r1, #1
 80050c6:	4803      	ldr	r0, [pc, #12]	@ (80050d4 <_Z18ILI9341_Write_Datah+0x38>)
 80050c8:	f003 fc3a 	bl	8008940 <HAL_GPIO_WritePin>
}
 80050cc:	bf00      	nop
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	40020400 	.word	0x40020400

080050d8 <_Z19ILI9341_Set_Addresstttt>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80050d8:	b590      	push	{r4, r7, lr}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	4604      	mov	r4, r0
 80050e0:	4608      	mov	r0, r1
 80050e2:	4611      	mov	r1, r2
 80050e4:	461a      	mov	r2, r3
 80050e6:	4623      	mov	r3, r4
 80050e8:	80fb      	strh	r3, [r7, #6]
 80050ea:	4603      	mov	r3, r0
 80050ec:	80bb      	strh	r3, [r7, #4]
 80050ee:	460b      	mov	r3, r1
 80050f0:	807b      	strh	r3, [r7, #2]
 80050f2:	4613      	mov	r3, r2
 80050f4:	803b      	strh	r3, [r7, #0]
	ILI9341_Write_Command(0x2A);
 80050f6:	202a      	movs	r0, #42	@ 0x2a
 80050f8:	f7ff ffb2 	bl	8005060 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(X1 >> 8);
 80050fc:	88fb      	ldrh	r3, [r7, #6]
 80050fe:	0a1b      	lsrs	r3, r3, #8
 8005100:	b29b      	uxth	r3, r3
 8005102:	b2db      	uxtb	r3, r3
 8005104:	4618      	mov	r0, r3
 8005106:	f7ff ffc9 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(X1);
 800510a:	88fb      	ldrh	r3, [r7, #6]
 800510c:	b2db      	uxtb	r3, r3
 800510e:	4618      	mov	r0, r3
 8005110:	f7ff ffc4 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(X2 >> 8);
 8005114:	887b      	ldrh	r3, [r7, #2]
 8005116:	0a1b      	lsrs	r3, r3, #8
 8005118:	b29b      	uxth	r3, r3
 800511a:	b2db      	uxtb	r3, r3
 800511c:	4618      	mov	r0, r3
 800511e:	f7ff ffbd 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(X2);
 8005122:	887b      	ldrh	r3, [r7, #2]
 8005124:	b2db      	uxtb	r3, r3
 8005126:	4618      	mov	r0, r3
 8005128:	f7ff ffb8 	bl	800509c <_Z18ILI9341_Write_Datah>

	ILI9341_Write_Command(0x2B);
 800512c:	202b      	movs	r0, #43	@ 0x2b
 800512e:	f7ff ff97 	bl	8005060 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(Y1 >> 8);
 8005132:	88bb      	ldrh	r3, [r7, #4]
 8005134:	0a1b      	lsrs	r3, r3, #8
 8005136:	b29b      	uxth	r3, r3
 8005138:	b2db      	uxtb	r3, r3
 800513a:	4618      	mov	r0, r3
 800513c:	f7ff ffae 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(Y1);
 8005140:	88bb      	ldrh	r3, [r7, #4]
 8005142:	b2db      	uxtb	r3, r3
 8005144:	4618      	mov	r0, r3
 8005146:	f7ff ffa9 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(Y2 >> 8);
 800514a:	883b      	ldrh	r3, [r7, #0]
 800514c:	0a1b      	lsrs	r3, r3, #8
 800514e:	b29b      	uxth	r3, r3
 8005150:	b2db      	uxtb	r3, r3
 8005152:	4618      	mov	r0, r3
 8005154:	f7ff ffa2 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(Y2);
 8005158:	883b      	ldrh	r3, [r7, #0]
 800515a:	b2db      	uxtb	r3, r3
 800515c:	4618      	mov	r0, r3
 800515e:	f7ff ff9d 	bl	800509c <_Z18ILI9341_Write_Datah>

	ILI9341_Write_Command(0x2C);
 8005162:	202c      	movs	r0, #44	@ 0x2c
 8005164:	f7ff ff7c 	bl	8005060 <_Z21ILI9341_Write_Commandh>
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	bd90      	pop	{r4, r7, pc}

08005170 <_Z13ILI9341_Resetv>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8005174:	2201      	movs	r2, #1
 8005176:	2120      	movs	r1, #32
 8005178:	480a      	ldr	r0, [pc, #40]	@ (80051a4 <_Z13ILI9341_Resetv+0x34>)
 800517a:	f003 fbe1 	bl	8008940 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800517e:	20c8      	movs	r0, #200	@ 0xc8
 8005180:	f002 fdd8 	bl	8007d34 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005184:	2200      	movs	r2, #0
 8005186:	2101      	movs	r1, #1
 8005188:	4806      	ldr	r0, [pc, #24]	@ (80051a4 <_Z13ILI9341_Resetv+0x34>)
 800518a:	f003 fbd9 	bl	8008940 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800518e:	20c8      	movs	r0, #200	@ 0xc8
 8005190:	f002 fdd0 	bl	8007d34 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8005194:	2201      	movs	r2, #1
 8005196:	2120      	movs	r1, #32
 8005198:	4802      	ldr	r0, [pc, #8]	@ (80051a4 <_Z13ILI9341_Resetv+0x34>)
 800519a:	f003 fbd1 	bl	8008940 <HAL_GPIO_WritePin>
}
 800519e:	bf00      	nop
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	40020400 	.word	0x40020400

080051a8 <_Z20ILI9341_Set_Rotationh>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	4603      	mov	r3, r0
 80051b0:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = Rotation;
 80051b2:	79fb      	ldrb	r3, [r7, #7]
 80051b4:	73fb      	strb	r3, [r7, #15]

	ILI9341_Write_Command(0x36);
 80051b6:	2036      	movs	r0, #54	@ 0x36
 80051b8:	f7ff ff52 	bl	8005060 <_Z21ILI9341_Write_Commandh>
	HAL_Delay(1);
 80051bc:	2001      	movs	r0, #1
 80051be:	f002 fdb9 	bl	8007d34 <HAL_Delay>

	switch (screen_rotation)
 80051c2:	7bfb      	ldrb	r3, [r7, #15]
 80051c4:	2b03      	cmp	r3, #3
 80051c6:	d837      	bhi.n	8005238 <_Z20ILI9341_Set_Rotationh+0x90>
 80051c8:	a201      	add	r2, pc, #4	@ (adr r2, 80051d0 <_Z20ILI9341_Set_Rotationh+0x28>)
 80051ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ce:	bf00      	nop
 80051d0:	080051e1 	.word	0x080051e1
 80051d4:	080051f7 	.word	0x080051f7
 80051d8:	0800520d 	.word	0x0800520d
 80051dc:	08005223 	.word	0x08005223
	{
	case SCREEN_VERTICAL_1:
		ILI9341_Write_Data(0x40 | 0x08);
 80051e0:	2048      	movs	r0, #72	@ 0x48
 80051e2:	f7ff ff5b 	bl	800509c <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 240;
 80051e6:	4b17      	ldr	r3, [pc, #92]	@ (8005244 <_Z20ILI9341_Set_Rotationh+0x9c>)
 80051e8:	22f0      	movs	r2, #240	@ 0xf0
 80051ea:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80051ec:	4b16      	ldr	r3, [pc, #88]	@ (8005248 <_Z20ILI9341_Set_Rotationh+0xa0>)
 80051ee:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80051f2:	801a      	strh	r2, [r3, #0]
		break;
 80051f4:	e021      	b.n	800523a <_Z20ILI9341_Set_Rotationh+0x92>
	case SCREEN_HORIZONTAL_1:
		ILI9341_Write_Data(0x20 | 0x08);
 80051f6:	2028      	movs	r0, #40	@ 0x28
 80051f8:	f7ff ff50 	bl	800509c <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 320;
 80051fc:	4b11      	ldr	r3, [pc, #68]	@ (8005244 <_Z20ILI9341_Set_Rotationh+0x9c>)
 80051fe:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8005202:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8005204:	4b10      	ldr	r3, [pc, #64]	@ (8005248 <_Z20ILI9341_Set_Rotationh+0xa0>)
 8005206:	22f0      	movs	r2, #240	@ 0xf0
 8005208:	801a      	strh	r2, [r3, #0]
		break;
 800520a:	e016      	b.n	800523a <_Z20ILI9341_Set_Rotationh+0x92>
	case SCREEN_VERTICAL_2:
		ILI9341_Write_Data(0x80 | 0x08);
 800520c:	2088      	movs	r0, #136	@ 0x88
 800520e:	f7ff ff45 	bl	800509c <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 240;
 8005212:	4b0c      	ldr	r3, [pc, #48]	@ (8005244 <_Z20ILI9341_Set_Rotationh+0x9c>)
 8005214:	22f0      	movs	r2, #240	@ 0xf0
 8005216:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8005218:	4b0b      	ldr	r3, [pc, #44]	@ (8005248 <_Z20ILI9341_Set_Rotationh+0xa0>)
 800521a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800521e:	801a      	strh	r2, [r3, #0]
		break;
 8005220:	e00b      	b.n	800523a <_Z20ILI9341_Set_Rotationh+0x92>
	case SCREEN_HORIZONTAL_2:
		ILI9341_Write_Data(0x40 | 0x80 | 0x20 | 0x08);
 8005222:	20e8      	movs	r0, #232	@ 0xe8
 8005224:	f7ff ff3a 	bl	800509c <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 320;
 8005228:	4b06      	ldr	r3, [pc, #24]	@ (8005244 <_Z20ILI9341_Set_Rotationh+0x9c>)
 800522a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800522e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8005230:	4b05      	ldr	r3, [pc, #20]	@ (8005248 <_Z20ILI9341_Set_Rotationh+0xa0>)
 8005232:	22f0      	movs	r2, #240	@ 0xf0
 8005234:	801a      	strh	r2, [r3, #0]
		break;
 8005236:	e000      	b.n	800523a <_Z20ILI9341_Set_Rotationh+0x92>
	default:
		//EXIT IF SCREEN ROTATION NOT VALID!
		break;
 8005238:	bf00      	nop
	}
}
 800523a:	bf00      	nop
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	20000002 	.word	0x20000002
 8005248:	20000000 	.word	0x20000000

0800524c <_Z14ILI9341_Enablev>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8005250:	2201      	movs	r2, #1
 8005252:	2120      	movs	r1, #32
 8005254:	4802      	ldr	r0, [pc, #8]	@ (8005260 <_Z14ILI9341_Enablev+0x14>)
 8005256:	f003 fb73 	bl	8008940 <HAL_GPIO_WritePin>
}
 800525a:	bf00      	nop
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	40020400 	.word	0x40020400

08005264 <_Z12ILI9341_Initv>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	af00      	add	r7, sp, #0

	ILI9341_Enable();
 8005268:	f7ff fff0 	bl	800524c <_Z14ILI9341_Enablev>
	ILI9341_SPI_Init();
 800526c:	f7ff fed6 	bl	800501c <_Z16ILI9341_SPI_Initv>
	ILI9341_Reset();
 8005270:	f7ff ff7e 	bl	8005170 <_Z13ILI9341_Resetv>

//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 8005274:	2001      	movs	r0, #1
 8005276:	f7ff fef3 	bl	8005060 <_Z21ILI9341_Write_Commandh>
	HAL_Delay(1000);
 800527a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800527e:	f002 fd59 	bl	8007d34 <HAL_Delay>

//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 8005282:	20cb      	movs	r0, #203	@ 0xcb
 8005284:	f7ff feec 	bl	8005060 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x39);
 8005288:	2039      	movs	r0, #57	@ 0x39
 800528a:	f7ff ff07 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x2C);
 800528e:	202c      	movs	r0, #44	@ 0x2c
 8005290:	f7ff ff04 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 8005294:	2000      	movs	r0, #0
 8005296:	f7ff ff01 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x34);
 800529a:	2034      	movs	r0, #52	@ 0x34
 800529c:	f7ff fefe 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x02);
 80052a0:	2002      	movs	r0, #2
 80052a2:	f7ff fefb 	bl	800509c <_Z18ILI9341_Write_Datah>

//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 80052a6:	20cf      	movs	r0, #207	@ 0xcf
 80052a8:	f7ff feda 	bl	8005060 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 80052ac:	2000      	movs	r0, #0
 80052ae:	f7ff fef5 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0xC1);
 80052b2:	20c1      	movs	r0, #193	@ 0xc1
 80052b4:	f7ff fef2 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x30);
 80052b8:	2030      	movs	r0, #48	@ 0x30
 80052ba:	f7ff feef 	bl	800509c <_Z18ILI9341_Write_Datah>

//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 80052be:	20e8      	movs	r0, #232	@ 0xe8
 80052c0:	f7ff fece 	bl	8005060 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x85);
 80052c4:	2085      	movs	r0, #133	@ 0x85
 80052c6:	f7ff fee9 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 80052ca:	2000      	movs	r0, #0
 80052cc:	f7ff fee6 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x78);
 80052d0:	2078      	movs	r0, #120	@ 0x78
 80052d2:	f7ff fee3 	bl	800509c <_Z18ILI9341_Write_Datah>

//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 80052d6:	20ea      	movs	r0, #234	@ 0xea
 80052d8:	f7ff fec2 	bl	8005060 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 80052dc:	2000      	movs	r0, #0
 80052de:	f7ff fedd 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 80052e2:	2000      	movs	r0, #0
 80052e4:	f7ff feda 	bl	800509c <_Z18ILI9341_Write_Datah>

//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 80052e8:	20ed      	movs	r0, #237	@ 0xed
 80052ea:	f7ff feb9 	bl	8005060 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x64);
 80052ee:	2064      	movs	r0, #100	@ 0x64
 80052f0:	f7ff fed4 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x03);
 80052f4:	2003      	movs	r0, #3
 80052f6:	f7ff fed1 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x12);
 80052fa:	2012      	movs	r0, #18
 80052fc:	f7ff fece 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x81);
 8005300:	2081      	movs	r0, #129	@ 0x81
 8005302:	f7ff fecb 	bl	800509c <_Z18ILI9341_Write_Datah>

//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 8005306:	20f7      	movs	r0, #247	@ 0xf7
 8005308:	f7ff feaa 	bl	8005060 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x20);
 800530c:	2020      	movs	r0, #32
 800530e:	f7ff fec5 	bl	800509c <_Z18ILI9341_Write_Datah>

//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 8005312:	20c0      	movs	r0, #192	@ 0xc0
 8005314:	f7ff fea4 	bl	8005060 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x23);
 8005318:	2023      	movs	r0, #35	@ 0x23
 800531a:	f7ff febf 	bl	800509c <_Z18ILI9341_Write_Datah>

//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 800531e:	20c1      	movs	r0, #193	@ 0xc1
 8005320:	f7ff fe9e 	bl	8005060 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x10);
 8005324:	2010      	movs	r0, #16
 8005326:	f7ff feb9 	bl	800509c <_Z18ILI9341_Write_Datah>

//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 800532a:	20c5      	movs	r0, #197	@ 0xc5
 800532c:	f7ff fe98 	bl	8005060 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x3E);
 8005330:	203e      	movs	r0, #62	@ 0x3e
 8005332:	f7ff feb3 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x28);
 8005336:	2028      	movs	r0, #40	@ 0x28
 8005338:	f7ff feb0 	bl	800509c <_Z18ILI9341_Write_Datah>

//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 800533c:	20c7      	movs	r0, #199	@ 0xc7
 800533e:	f7ff fe8f 	bl	8005060 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x86);
 8005342:	2086      	movs	r0, #134	@ 0x86
 8005344:	f7ff feaa 	bl	800509c <_Z18ILI9341_Write_Datah>

//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 8005348:	2036      	movs	r0, #54	@ 0x36
 800534a:	f7ff fe89 	bl	8005060 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x48);
 800534e:	2048      	movs	r0, #72	@ 0x48
 8005350:	f7ff fea4 	bl	800509c <_Z18ILI9341_Write_Datah>

//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 8005354:	203a      	movs	r0, #58	@ 0x3a
 8005356:	f7ff fe83 	bl	8005060 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x55);
 800535a:	2055      	movs	r0, #85	@ 0x55
 800535c:	f7ff fe9e 	bl	800509c <_Z18ILI9341_Write_Datah>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 8005360:	20b1      	movs	r0, #177	@ 0xb1
 8005362:	f7ff fe7d 	bl	8005060 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8005366:	2000      	movs	r0, #0
 8005368:	f7ff fe98 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x18);
 800536c:	2018      	movs	r0, #24
 800536e:	f7ff fe95 	bl	800509c <_Z18ILI9341_Write_Datah>

//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 8005372:	20b6      	movs	r0, #182	@ 0xb6
 8005374:	f7ff fe74 	bl	8005060 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x08);
 8005378:	2008      	movs	r0, #8
 800537a:	f7ff fe8f 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x82);
 800537e:	2082      	movs	r0, #130	@ 0x82
 8005380:	f7ff fe8c 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x27);
 8005384:	2027      	movs	r0, #39	@ 0x27
 8005386:	f7ff fe89 	bl	800509c <_Z18ILI9341_Write_Datah>

//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 800538a:	20f2      	movs	r0, #242	@ 0xf2
 800538c:	f7ff fe68 	bl	8005060 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8005390:	2000      	movs	r0, #0
 8005392:	f7ff fe83 	bl	800509c <_Z18ILI9341_Write_Datah>

//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 8005396:	2026      	movs	r0, #38	@ 0x26
 8005398:	f7ff fe62 	bl	8005060 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x01);
 800539c:	2001      	movs	r0, #1
 800539e:	f7ff fe7d 	bl	800509c <_Z18ILI9341_Write_Datah>

//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 80053a2:	20e0      	movs	r0, #224	@ 0xe0
 80053a4:	f7ff fe5c 	bl	8005060 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x0F);
 80053a8:	200f      	movs	r0, #15
 80053aa:	f7ff fe77 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x31);
 80053ae:	2031      	movs	r0, #49	@ 0x31
 80053b0:	f7ff fe74 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x2B);
 80053b4:	202b      	movs	r0, #43	@ 0x2b
 80053b6:	f7ff fe71 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0C);
 80053ba:	200c      	movs	r0, #12
 80053bc:	f7ff fe6e 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0E);
 80053c0:	200e      	movs	r0, #14
 80053c2:	f7ff fe6b 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x08);
 80053c6:	2008      	movs	r0, #8
 80053c8:	f7ff fe68 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x4E);
 80053cc:	204e      	movs	r0, #78	@ 0x4e
 80053ce:	f7ff fe65 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0xF1);
 80053d2:	20f1      	movs	r0, #241	@ 0xf1
 80053d4:	f7ff fe62 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x37);
 80053d8:	2037      	movs	r0, #55	@ 0x37
 80053da:	f7ff fe5f 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x07);
 80053de:	2007      	movs	r0, #7
 80053e0:	f7ff fe5c 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x10);
 80053e4:	2010      	movs	r0, #16
 80053e6:	f7ff fe59 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x03);
 80053ea:	2003      	movs	r0, #3
 80053ec:	f7ff fe56 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0E);
 80053f0:	200e      	movs	r0, #14
 80053f2:	f7ff fe53 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x09);
 80053f6:	2009      	movs	r0, #9
 80053f8:	f7ff fe50 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 80053fc:	2000      	movs	r0, #0
 80053fe:	f7ff fe4d 	bl	800509c <_Z18ILI9341_Write_Datah>

//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 8005402:	20e1      	movs	r0, #225	@ 0xe1
 8005404:	f7ff fe2c 	bl	8005060 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8005408:	2000      	movs	r0, #0
 800540a:	f7ff fe47 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0E);
 800540e:	200e      	movs	r0, #14
 8005410:	f7ff fe44 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x14);
 8005414:	2014      	movs	r0, #20
 8005416:	f7ff fe41 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x03);
 800541a:	2003      	movs	r0, #3
 800541c:	f7ff fe3e 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x11);
 8005420:	2011      	movs	r0, #17
 8005422:	f7ff fe3b 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x07);
 8005426:	2007      	movs	r0, #7
 8005428:	f7ff fe38 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x31);
 800542c:	2031      	movs	r0, #49	@ 0x31
 800542e:	f7ff fe35 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0xC1);
 8005432:	20c1      	movs	r0, #193	@ 0xc1
 8005434:	f7ff fe32 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x48);
 8005438:	2048      	movs	r0, #72	@ 0x48
 800543a:	f7ff fe2f 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x08);
 800543e:	2008      	movs	r0, #8
 8005440:	f7ff fe2c 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0F);
 8005444:	200f      	movs	r0, #15
 8005446:	f7ff fe29 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0C);
 800544a:	200c      	movs	r0, #12
 800544c:	f7ff fe26 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x31);
 8005450:	2031      	movs	r0, #49	@ 0x31
 8005452:	f7ff fe23 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x36);
 8005456:	2036      	movs	r0, #54	@ 0x36
 8005458:	f7ff fe20 	bl	800509c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0F);
 800545c:	200f      	movs	r0, #15
 800545e:	f7ff fe1d 	bl	800509c <_Z18ILI9341_Write_Datah>

//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 8005462:	2011      	movs	r0, #17
 8005464:	f7ff fdfc 	bl	8005060 <_Z21ILI9341_Write_Commandh>
	HAL_Delay(120);
 8005468:	2078      	movs	r0, #120	@ 0x78
 800546a:	f002 fc63 	bl	8007d34 <HAL_Delay>

//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 800546e:	2029      	movs	r0, #41	@ 0x29
 8005470:	f7ff fdf6 	bl	8005060 <_Z21ILI9341_Write_Commandh>

//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8005474:	2000      	movs	r0, #0
 8005476:	f7ff fe97 	bl	80051a8 <_Z20ILI9341_Set_Rotationh>
}
 800547a:	bf00      	nop
 800547c:	bd80      	pop	{r7, pc}
	...

08005480 <_Z25ILI9341_Draw_Colour_Bursttm>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8005480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005484:	b08d      	sub	sp, #52	@ 0x34
 8005486:	af00      	add	r7, sp, #0
 8005488:	4603      	mov	r3, r0
 800548a:	6039      	str	r1, [r7, #0]
 800548c:	80fb      	strh	r3, [r7, #6]
//REMAINDER!
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
			Remainder_from_block, 10);

	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
}
 800548e:	466b      	mov	r3, sp
 8005490:	461e      	mov	r6, r3
	uint32_t Buffer_Size = 0;
 8005492:	2300      	movs	r3, #0
 8005494:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if ((Size * 2) < BURST_MAX_SIZE)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800549e:	d202      	bcs.n	80054a6 <_Z25ILI9341_Draw_Colour_Bursttm+0x26>
		Buffer_Size = Size;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054a4:	e002      	b.n	80054ac <_Z25ILI9341_Draw_Colour_Bursttm+0x2c>
		Buffer_Size = BURST_MAX_SIZE;
 80054a6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80054aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80054ac:	2201      	movs	r2, #1
 80054ae:	2102      	movs	r1, #2
 80054b0:	483e      	ldr	r0, [pc, #248]	@ (80055ac <_Z25ILI9341_Draw_Colour_Bursttm+0x12c>)
 80054b2:	f003 fa45 	bl	8008940 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80054b6:	2200      	movs	r2, #0
 80054b8:	2101      	movs	r1, #1
 80054ba:	483c      	ldr	r0, [pc, #240]	@ (80055ac <_Z25ILI9341_Draw_Colour_Bursttm+0x12c>)
 80054bc:	f003 fa40 	bl	8008940 <HAL_GPIO_WritePin>
	unsigned char chifted = Colour >> 8;
 80054c0:	88fb      	ldrh	r3, [r7, #6]
 80054c2:	0a1b      	lsrs	r3, r3, #8
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	unsigned char burst_buffer[Buffer_Size];
 80054ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054cc:	460b      	mov	r3, r1
 80054ce:	3b01      	subs	r3, #1
 80054d0:	61fb      	str	r3, [r7, #28]
 80054d2:	2300      	movs	r3, #0
 80054d4:	4688      	mov	r8, r1
 80054d6:	4699      	mov	r9, r3
 80054d8:	f04f 0200 	mov.w	r2, #0
 80054dc:	f04f 0300 	mov.w	r3, #0
 80054e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054ec:	2300      	movs	r3, #0
 80054ee:	460c      	mov	r4, r1
 80054f0:	461d      	mov	r5, r3
 80054f2:	f04f 0200 	mov.w	r2, #0
 80054f6:	f04f 0300 	mov.w	r3, #0
 80054fa:	00eb      	lsls	r3, r5, #3
 80054fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005500:	00e2      	lsls	r2, r4, #3
 8005502:	1dcb      	adds	r3, r1, #7
 8005504:	08db      	lsrs	r3, r3, #3
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	ebad 0d03 	sub.w	sp, sp, r3
 800550c:	466b      	mov	r3, sp
 800550e:	3300      	adds	r3, #0
 8005510:	61bb      	str	r3, [r7, #24]
	for (uint32_t j = 0; j < Buffer_Size; j += 2)
 8005512:	2300      	movs	r3, #0
 8005514:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005516:	e00e      	b.n	8005536 <_Z25ILI9341_Draw_Colour_Bursttm+0xb6>
		burst_buffer[j] = chifted;
 8005518:	69ba      	ldr	r2, [r7, #24]
 800551a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800551c:	4413      	add	r3, r2
 800551e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8005522:	701a      	strb	r2, [r3, #0]
		burst_buffer[j + 1] = Colour;
 8005524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005526:	3301      	adds	r3, #1
 8005528:	88fa      	ldrh	r2, [r7, #6]
 800552a:	b2d1      	uxtb	r1, r2
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	54d1      	strb	r1, [r2, r3]
	for (uint32_t j = 0; j < Buffer_Size; j += 2)
 8005530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005532:	3302      	adds	r3, #2
 8005534:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005536:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800553a:	429a      	cmp	r2, r3
 800553c:	d3ec      	bcc.n	8005518 <_Z25ILI9341_Draw_Colour_Bursttm+0x98>
	uint32_t Sending_Size = Size * 2;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	005b      	lsls	r3, r3, #1
 8005542:	617b      	str	r3, [r7, #20]
	uint32_t Sending_in_Block = Sending_Size / Buffer_Size;
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005548:	fbb2 f3f3 	udiv	r3, r2, r3
 800554c:	613b      	str	r3, [r7, #16]
	uint32_t Remainder_from_block = Sending_Size % Buffer_Size;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005552:	fbb3 f2f2 	udiv	r2, r3, r2
 8005556:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005558:	fb01 f202 	mul.w	r2, r1, r2
 800555c:	1a9b      	subs	r3, r3, r2
 800555e:	60fb      	str	r3, [r7, #12]
	if (Sending_in_Block != 0)
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d010      	beq.n	8005588 <_Z25ILI9341_Draw_Colour_Bursttm+0x108>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 8005566:	2300      	movs	r3, #0
 8005568:	627b      	str	r3, [r7, #36]	@ 0x24
 800556a:	e009      	b.n	8005580 <_Z25ILI9341_Draw_Colour_Bursttm+0x100>
			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
 800556c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800556e:	b29a      	uxth	r2, r3
 8005570:	230a      	movs	r3, #10
 8005572:	69b9      	ldr	r1, [r7, #24]
 8005574:	480e      	ldr	r0, [pc, #56]	@ (80055b0 <_Z25ILI9341_Draw_Colour_Bursttm+0x130>)
 8005576:	f004 ff1a 	bl	800a3ae <HAL_SPI_Transmit>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 800557a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557c:	3301      	adds	r3, #1
 800557e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005580:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	429a      	cmp	r2, r3
 8005586:	d3f1      	bcc.n	800556c <_Z25ILI9341_Draw_Colour_Bursttm+0xec>
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	b29a      	uxth	r2, r3
 800558c:	230a      	movs	r3, #10
 800558e:	69b9      	ldr	r1, [r7, #24]
 8005590:	4807      	ldr	r0, [pc, #28]	@ (80055b0 <_Z25ILI9341_Draw_Colour_Bursttm+0x130>)
 8005592:	f004 ff0c 	bl	800a3ae <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005596:	2201      	movs	r2, #1
 8005598:	2101      	movs	r1, #1
 800559a:	4804      	ldr	r0, [pc, #16]	@ (80055ac <_Z25ILI9341_Draw_Colour_Bursttm+0x12c>)
 800559c:	f003 f9d0 	bl	8008940 <HAL_GPIO_WritePin>
 80055a0:	46b5      	mov	sp, r6
}
 80055a2:	bf00      	nop
 80055a4:	3734      	adds	r7, #52	@ 0x34
 80055a6:	46bd      	mov	sp, r7
 80055a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80055ac:	40020400 	.word	0x40020400
 80055b0:	2000043c 	.word	0x2000043c

080055b4 <_Z19ILI9341_Fill_Screent>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	4603      	mov	r3, r0
 80055bc:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80055be:	4b0e      	ldr	r3, [pc, #56]	@ (80055f8 <_Z19ILI9341_Fill_Screent+0x44>)
 80055c0:	881b      	ldrh	r3, [r3, #0]
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	4b0d      	ldr	r3, [pc, #52]	@ (80055fc <_Z19ILI9341_Fill_Screent+0x48>)
 80055c6:	881b      	ldrh	r3, [r3, #0]
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	2100      	movs	r1, #0
 80055cc:	2000      	movs	r0, #0
 80055ce:	f7ff fd83 	bl	80050d8 <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH * LCD_HEIGHT);
 80055d2:	4b09      	ldr	r3, [pc, #36]	@ (80055f8 <_Z19ILI9341_Fill_Screent+0x44>)
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	461a      	mov	r2, r3
 80055da:	4b08      	ldr	r3, [pc, #32]	@ (80055fc <_Z19ILI9341_Fill_Screent+0x48>)
 80055dc:	881b      	ldrh	r3, [r3, #0]
 80055de:	b29b      	uxth	r3, r3
 80055e0:	fb02 f303 	mul.w	r3, r2, r3
 80055e4:	461a      	mov	r2, r3
 80055e6:	88fb      	ldrh	r3, [r7, #6]
 80055e8:	4611      	mov	r1, r2
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7ff ff48 	bl	8005480 <_Z25ILI9341_Draw_Colour_Bursttm>
}
 80055f0:	bf00      	nop
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	20000002 	.word	0x20000002
 80055fc:	20000000 	.word	0x20000000

08005600 <_Z18ILI9341_Draw_Pixelttt>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X, uint16_t Y, uint16_t Colour)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
 8005606:	4603      	mov	r3, r0
 8005608:	80fb      	strh	r3, [r7, #6]
 800560a:	460b      	mov	r3, r1
 800560c:	80bb      	strh	r3, [r7, #4]
 800560e:	4613      	mov	r3, r2
 8005610:	807b      	strh	r3, [r7, #2]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 8005612:	4b5d      	ldr	r3, [pc, #372]	@ (8005788 <_Z18ILI9341_Draw_Pixelttt+0x188>)
 8005614:	881b      	ldrh	r3, [r3, #0]
 8005616:	b29b      	uxth	r3, r3
 8005618:	88fa      	ldrh	r2, [r7, #6]
 800561a:	429a      	cmp	r2, r3
 800561c:	d205      	bcs.n	800562a <_Z18ILI9341_Draw_Pixelttt+0x2a>
 800561e:	4b5b      	ldr	r3, [pc, #364]	@ (800578c <_Z18ILI9341_Draw_Pixelttt+0x18c>)
 8005620:	881b      	ldrh	r3, [r3, #0]
 8005622:	b29b      	uxth	r3, r3
 8005624:	88ba      	ldrh	r2, [r7, #4]
 8005626:	429a      	cmp	r2, r3
 8005628:	d301      	bcc.n	800562e <_Z18ILI9341_Draw_Pixelttt+0x2e>
 800562a:	2301      	movs	r3, #1
 800562c:	e000      	b.n	8005630 <_Z18ILI9341_Draw_Pixelttt+0x30>
 800562e:	2300      	movs	r3, #0
 8005630:	2b00      	cmp	r3, #0
 8005632:	f040 80a5 	bne.w	8005780 <_Z18ILI9341_Draw_Pixelttt+0x180>
		return;	//OUT OF BOUNDS!

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8005636:	2200      	movs	r2, #0
 8005638:	2102      	movs	r1, #2
 800563a:	4855      	ldr	r0, [pc, #340]	@ (8005790 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800563c:	f003 f980 	bl	8008940 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005640:	2200      	movs	r2, #0
 8005642:	2101      	movs	r1, #1
 8005644:	4852      	ldr	r0, [pc, #328]	@ (8005790 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005646:	f003 f97b 	bl	8008940 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2A);
 800564a:	202a      	movs	r0, #42	@ 0x2a
 800564c:	f7ff fcf6 	bl	800503c <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8005650:	2201      	movs	r2, #1
 8005652:	2102      	movs	r1, #2
 8005654:	484e      	ldr	r0, [pc, #312]	@ (8005790 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005656:	f003 f973 	bl	8008940 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800565a:	2201      	movs	r2, #1
 800565c:	2101      	movs	r1, #1
 800565e:	484c      	ldr	r0, [pc, #304]	@ (8005790 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005660:	f003 f96e 	bl	8008940 <HAL_GPIO_WritePin>

//XDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005664:	2200      	movs	r2, #0
 8005666:	2101      	movs	r1, #1
 8005668:	4849      	ldr	r0, [pc, #292]	@ (8005790 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800566a:	f003 f969 	bl	8008940 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer[4] =	{(unsigned char) (X >> 8),(unsigned char) X, (unsigned char)((X + 1) >> 8),(unsigned char) (X + 1) };
 800566e:	88fb      	ldrh	r3, [r7, #6]
 8005670:	0a1b      	lsrs	r3, r3, #8
 8005672:	b29b      	uxth	r3, r3
 8005674:	b2db      	uxtb	r3, r3
 8005676:	753b      	strb	r3, [r7, #20]
 8005678:	88fb      	ldrh	r3, [r7, #6]
 800567a:	b2db      	uxtb	r3, r3
 800567c:	757b      	strb	r3, [r7, #21]
 800567e:	88fb      	ldrh	r3, [r7, #6]
 8005680:	3301      	adds	r3, #1
 8005682:	121b      	asrs	r3, r3, #8
 8005684:	b2db      	uxtb	r3, r3
 8005686:	75bb      	strb	r3, [r7, #22]
 8005688:	88fb      	ldrh	r3, [r7, #6]
 800568a:	b2db      	uxtb	r3, r3
 800568c:	3301      	adds	r3, #1
 800568e:	b2db      	uxtb	r3, r3
 8005690:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8005692:	f107 0114 	add.w	r1, r7, #20
 8005696:	2301      	movs	r3, #1
 8005698:	2204      	movs	r2, #4
 800569a:	483e      	ldr	r0, [pc, #248]	@ (8005794 <_Z18ILI9341_Draw_Pixelttt+0x194>)
 800569c:	f004 fe87 	bl	800a3ae <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80056a0:	2201      	movs	r2, #1
 80056a2:	2101      	movs	r1, #1
 80056a4:	483a      	ldr	r0, [pc, #232]	@ (8005790 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80056a6:	f003 f94b 	bl	8008940 <HAL_GPIO_WritePin>

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 80056aa:	2200      	movs	r2, #0
 80056ac:	2102      	movs	r1, #2
 80056ae:	4838      	ldr	r0, [pc, #224]	@ (8005790 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80056b0:	f003 f946 	bl	8008940 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80056b4:	2200      	movs	r2, #0
 80056b6:	2101      	movs	r1, #1
 80056b8:	4835      	ldr	r0, [pc, #212]	@ (8005790 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80056ba:	f003 f941 	bl	8008940 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2B);
 80056be:	202b      	movs	r0, #43	@ 0x2b
 80056c0:	f7ff fcbc 	bl	800503c <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80056c4:	2201      	movs	r2, #1
 80056c6:	2102      	movs	r1, #2
 80056c8:	4831      	ldr	r0, [pc, #196]	@ (8005790 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80056ca:	f003 f939 	bl	8008940 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80056ce:	2201      	movs	r2, #1
 80056d0:	2101      	movs	r1, #1
 80056d2:	482f      	ldr	r0, [pc, #188]	@ (8005790 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80056d4:	f003 f934 	bl	8008940 <HAL_GPIO_WritePin>

//YDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80056d8:	2200      	movs	r2, #0
 80056da:	2101      	movs	r1, #1
 80056dc:	482c      	ldr	r0, [pc, #176]	@ (8005790 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80056de:	f003 f92f 	bl	8008940 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer1[4] =	{(unsigned char)( Y >> 8),(unsigned char) Y,(unsigned char)( (Y + 1) >> 8),(unsigned char) (Y + 1) };
 80056e2:	88bb      	ldrh	r3, [r7, #4]
 80056e4:	0a1b      	lsrs	r3, r3, #8
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	743b      	strb	r3, [r7, #16]
 80056ec:	88bb      	ldrh	r3, [r7, #4]
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	747b      	strb	r3, [r7, #17]
 80056f2:	88bb      	ldrh	r3, [r7, #4]
 80056f4:	3301      	adds	r3, #1
 80056f6:	121b      	asrs	r3, r3, #8
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	74bb      	strb	r3, [r7, #18]
 80056fc:	88bb      	ldrh	r3, [r7, #4]
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	3301      	adds	r3, #1
 8005702:	b2db      	uxtb	r3, r3
 8005704:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8005706:	f107 0110 	add.w	r1, r7, #16
 800570a:	2301      	movs	r3, #1
 800570c:	2204      	movs	r2, #4
 800570e:	4821      	ldr	r0, [pc, #132]	@ (8005794 <_Z18ILI9341_Draw_Pixelttt+0x194>)
 8005710:	f004 fe4d 	bl	800a3ae <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005714:	2201      	movs	r2, #1
 8005716:	2101      	movs	r1, #1
 8005718:	481d      	ldr	r0, [pc, #116]	@ (8005790 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800571a:	f003 f911 	bl	8008940 <HAL_GPIO_WritePin>

//ADDRESS	
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 800571e:	2200      	movs	r2, #0
 8005720:	2102      	movs	r1, #2
 8005722:	481b      	ldr	r0, [pc, #108]	@ (8005790 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005724:	f003 f90c 	bl	8008940 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005728:	2200      	movs	r2, #0
 800572a:	2101      	movs	r1, #1
 800572c:	4818      	ldr	r0, [pc, #96]	@ (8005790 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800572e:	f003 f907 	bl	8008940 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8005732:	202c      	movs	r0, #44	@ 0x2c
 8005734:	f7ff fc82 	bl	800503c <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8005738:	2201      	movs	r2, #1
 800573a:	2102      	movs	r1, #2
 800573c:	4814      	ldr	r0, [pc, #80]	@ (8005790 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800573e:	f003 f8ff 	bl	8008940 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005742:	2201      	movs	r2, #1
 8005744:	2101      	movs	r1, #1
 8005746:	4812      	ldr	r0, [pc, #72]	@ (8005790 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005748:	f003 f8fa 	bl	8008940 <HAL_GPIO_WritePin>

//COLOUR	
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800574c:	2200      	movs	r2, #0
 800574e:	2101      	movs	r1, #1
 8005750:	480f      	ldr	r0, [pc, #60]	@ (8005790 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8005752:	f003 f8f5 	bl	8008940 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer2[2] =	{(unsigned char)( Colour >> 8),(unsigned char) Colour };
 8005756:	887b      	ldrh	r3, [r7, #2]
 8005758:	0a1b      	lsrs	r3, r3, #8
 800575a:	b29b      	uxth	r3, r3
 800575c:	b2db      	uxtb	r3, r3
 800575e:	733b      	strb	r3, [r7, #12]
 8005760:	887b      	ldrh	r3, [r7, #2]
 8005762:	b2db      	uxtb	r3, r3
 8005764:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8005766:	f107 010c 	add.w	r1, r7, #12
 800576a:	2301      	movs	r3, #1
 800576c:	2202      	movs	r2, #2
 800576e:	4809      	ldr	r0, [pc, #36]	@ (8005794 <_Z18ILI9341_Draw_Pixelttt+0x194>)
 8005770:	f004 fe1d 	bl	800a3ae <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005774:	2201      	movs	r2, #1
 8005776:	2101      	movs	r1, #1
 8005778:	4805      	ldr	r0, [pc, #20]	@ (8005790 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800577a:	f003 f8e1 	bl	8008940 <HAL_GPIO_WritePin>
 800577e:	e000      	b.n	8005782 <_Z18ILI9341_Draw_Pixelttt+0x182>
		return;	//OUT OF BOUNDS!
 8005780:	bf00      	nop

}
 8005782:	3718      	adds	r7, #24
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	20000002 	.word	0x20000002
 800578c:	20000000 	.word	0x20000000
 8005790:	40020400 	.word	0x40020400
 8005794:	2000043c 	.word	0x2000043c

08005798 <_Z22ILI9341_Draw_Rectanglettttt>:
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width,
		uint16_t Height, uint16_t Colour)
{
 8005798:	b590      	push	{r4, r7, lr}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	4604      	mov	r4, r0
 80057a0:	4608      	mov	r0, r1
 80057a2:	4611      	mov	r1, r2
 80057a4:	461a      	mov	r2, r3
 80057a6:	4623      	mov	r3, r4
 80057a8:	80fb      	strh	r3, [r7, #6]
 80057aa:	4603      	mov	r3, r0
 80057ac:	80bb      	strh	r3, [r7, #4]
 80057ae:	460b      	mov	r3, r1
 80057b0:	807b      	strh	r3, [r7, #2]
 80057b2:	4613      	mov	r3, r2
 80057b4:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 80057b6:	4b2b      	ldr	r3, [pc, #172]	@ (8005864 <_Z22ILI9341_Draw_Rectanglettttt+0xcc>)
 80057b8:	881b      	ldrh	r3, [r3, #0]
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	88fa      	ldrh	r2, [r7, #6]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d205      	bcs.n	80057ce <_Z22ILI9341_Draw_Rectanglettttt+0x36>
 80057c2:	4b29      	ldr	r3, [pc, #164]	@ (8005868 <_Z22ILI9341_Draw_Rectanglettttt+0xd0>)
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	88ba      	ldrh	r2, [r7, #4]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d301      	bcc.n	80057d2 <_Z22ILI9341_Draw_Rectanglettttt+0x3a>
 80057ce:	2301      	movs	r3, #1
 80057d0:	e000      	b.n	80057d4 <_Z22ILI9341_Draw_Rectanglettttt+0x3c>
 80057d2:	2300      	movs	r3, #0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d141      	bne.n	800585c <_Z22ILI9341_Draw_Rectanglettttt+0xc4>
		return;
	if ((X + Width - 1) >= LCD_WIDTH)
 80057d8:	88fa      	ldrh	r2, [r7, #6]
 80057da:	887b      	ldrh	r3, [r7, #2]
 80057dc:	4413      	add	r3, r2
 80057de:	4a21      	ldr	r2, [pc, #132]	@ (8005864 <_Z22ILI9341_Draw_Rectanglettttt+0xcc>)
 80057e0:	8812      	ldrh	r2, [r2, #0]
 80057e2:	b292      	uxth	r2, r2
 80057e4:	4293      	cmp	r3, r2
 80057e6:	bfcc      	ite	gt
 80057e8:	2301      	movgt	r3, #1
 80057ea:	2300      	movle	r3, #0
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d005      	beq.n	80057fe <_Z22ILI9341_Draw_Rectanglettttt+0x66>
	{
		Width = LCD_WIDTH - X;
 80057f2:	4b1c      	ldr	r3, [pc, #112]	@ (8005864 <_Z22ILI9341_Draw_Rectanglettttt+0xcc>)
 80057f4:	881b      	ldrh	r3, [r3, #0]
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	88fb      	ldrh	r3, [r7, #6]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	807b      	strh	r3, [r7, #2]
	}
	if ((Y + Height - 1) >= LCD_HEIGHT)
 80057fe:	88ba      	ldrh	r2, [r7, #4]
 8005800:	883b      	ldrh	r3, [r7, #0]
 8005802:	4413      	add	r3, r2
 8005804:	4a18      	ldr	r2, [pc, #96]	@ (8005868 <_Z22ILI9341_Draw_Rectanglettttt+0xd0>)
 8005806:	8812      	ldrh	r2, [r2, #0]
 8005808:	b292      	uxth	r2, r2
 800580a:	4293      	cmp	r3, r2
 800580c:	bfcc      	ite	gt
 800580e:	2301      	movgt	r3, #1
 8005810:	2300      	movle	r3, #0
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b00      	cmp	r3, #0
 8005816:	d005      	beq.n	8005824 <_Z22ILI9341_Draw_Rectanglettttt+0x8c>
	{
		Height = LCD_HEIGHT - Y;
 8005818:	4b13      	ldr	r3, [pc, #76]	@ (8005868 <_Z22ILI9341_Draw_Rectanglettttt+0xd0>)
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	b29a      	uxth	r2, r3
 800581e:	88bb      	ldrh	r3, [r7, #4]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	803b      	strh	r3, [r7, #0]
	}
	ILI9341_Set_Address(X, Y, X + Width - 1, Y + Height - 1);
 8005824:	88fa      	ldrh	r2, [r7, #6]
 8005826:	887b      	ldrh	r3, [r7, #2]
 8005828:	4413      	add	r3, r2
 800582a:	b29b      	uxth	r3, r3
 800582c:	3b01      	subs	r3, #1
 800582e:	b29c      	uxth	r4, r3
 8005830:	88ba      	ldrh	r2, [r7, #4]
 8005832:	883b      	ldrh	r3, [r7, #0]
 8005834:	4413      	add	r3, r2
 8005836:	b29b      	uxth	r3, r3
 8005838:	3b01      	subs	r3, #1
 800583a:	b29b      	uxth	r3, r3
 800583c:	88b9      	ldrh	r1, [r7, #4]
 800583e:	88f8      	ldrh	r0, [r7, #6]
 8005840:	4622      	mov	r2, r4
 8005842:	f7ff fc49 	bl	80050d8 <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, Height * Width);
 8005846:	883b      	ldrh	r3, [r7, #0]
 8005848:	887a      	ldrh	r2, [r7, #2]
 800584a:	fb02 f303 	mul.w	r3, r2, r3
 800584e:	461a      	mov	r2, r3
 8005850:	8b3b      	ldrh	r3, [r7, #24]
 8005852:	4611      	mov	r1, r2
 8005854:	4618      	mov	r0, r3
 8005856:	f7ff fe13 	bl	8005480 <_Z25ILI9341_Draw_Colour_Bursttm>
 800585a:	e000      	b.n	800585e <_Z22ILI9341_Draw_Rectanglettttt+0xc6>
		return;
 800585c:	bf00      	nop
}
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	bd90      	pop	{r4, r7, pc}
 8005864:	20000002 	.word	0x20000002
 8005868:	20000000 	.word	0x20000000

0800586c <_Z28ILI9341_Draw_Horizontal_Linetttt>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width,
		uint16_t Colour)
{
 800586c:	b590      	push	{r4, r7, lr}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	4604      	mov	r4, r0
 8005874:	4608      	mov	r0, r1
 8005876:	4611      	mov	r1, r2
 8005878:	461a      	mov	r2, r3
 800587a:	4623      	mov	r3, r4
 800587c:	80fb      	strh	r3, [r7, #6]
 800587e:	4603      	mov	r3, r0
 8005880:	80bb      	strh	r3, [r7, #4]
 8005882:	460b      	mov	r3, r1
 8005884:	807b      	strh	r3, [r7, #2]
 8005886:	4613      	mov	r3, r2
 8005888:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 800588a:	4b1d      	ldr	r3, [pc, #116]	@ (8005900 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x94>)
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	b29b      	uxth	r3, r3
 8005890:	88fa      	ldrh	r2, [r7, #6]
 8005892:	429a      	cmp	r2, r3
 8005894:	d205      	bcs.n	80058a2 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x36>
 8005896:	4b1b      	ldr	r3, [pc, #108]	@ (8005904 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x98>)
 8005898:	881b      	ldrh	r3, [r3, #0]
 800589a:	b29b      	uxth	r3, r3
 800589c:	88ba      	ldrh	r2, [r7, #4]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d301      	bcc.n	80058a6 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x3a>
 80058a2:	2301      	movs	r3, #1
 80058a4:	e000      	b.n	80058a8 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x3c>
 80058a6:	2300      	movs	r3, #0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d124      	bne.n	80058f6 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x8a>
		return;
	if ((X + Width - 1) >= LCD_WIDTH)
 80058ac:	88fa      	ldrh	r2, [r7, #6]
 80058ae:	887b      	ldrh	r3, [r7, #2]
 80058b0:	4413      	add	r3, r2
 80058b2:	4a13      	ldr	r2, [pc, #76]	@ (8005900 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x94>)
 80058b4:	8812      	ldrh	r2, [r2, #0]
 80058b6:	b292      	uxth	r2, r2
 80058b8:	4293      	cmp	r3, r2
 80058ba:	bfcc      	ite	gt
 80058bc:	2301      	movgt	r3, #1
 80058be:	2300      	movle	r3, #0
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d005      	beq.n	80058d2 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x66>
	{
		Width = LCD_WIDTH - X;
 80058c6:	4b0e      	ldr	r3, [pc, #56]	@ (8005900 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x94>)
 80058c8:	881b      	ldrh	r3, [r3, #0]
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	88fb      	ldrh	r3, [r7, #6]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	807b      	strh	r3, [r7, #2]
	}
	ILI9341_Set_Address(X, Y, X + Width - 1, Y);
 80058d2:	88fa      	ldrh	r2, [r7, #6]
 80058d4:	887b      	ldrh	r3, [r7, #2]
 80058d6:	4413      	add	r3, r2
 80058d8:	b29b      	uxth	r3, r3
 80058da:	3b01      	subs	r3, #1
 80058dc:	b29a      	uxth	r2, r3
 80058de:	88bb      	ldrh	r3, [r7, #4]
 80058e0:	88b9      	ldrh	r1, [r7, #4]
 80058e2:	88f8      	ldrh	r0, [r7, #6]
 80058e4:	f7ff fbf8 	bl	80050d8 <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, Width);
 80058e8:	887a      	ldrh	r2, [r7, #2]
 80058ea:	883b      	ldrh	r3, [r7, #0]
 80058ec:	4611      	mov	r1, r2
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7ff fdc6 	bl	8005480 <_Z25ILI9341_Draw_Colour_Bursttm>
 80058f4:	e000      	b.n	80058f8 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x8c>
		return;
 80058f6:	bf00      	nop
}
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd90      	pop	{r4, r7, pc}
 80058fe:	bf00      	nop
 8005900:	20000002 	.word	0x20000002
 8005904:	20000000 	.word	0x20000000

08005908 <_Z26ILI9341_Draw_Vertical_Linetttt>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height,
		uint16_t Colour)
{
 8005908:	b590      	push	{r4, r7, lr}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	4604      	mov	r4, r0
 8005910:	4608      	mov	r0, r1
 8005912:	4611      	mov	r1, r2
 8005914:	461a      	mov	r2, r3
 8005916:	4623      	mov	r3, r4
 8005918:	80fb      	strh	r3, [r7, #6]
 800591a:	4603      	mov	r3, r0
 800591c:	80bb      	strh	r3, [r7, #4]
 800591e:	460b      	mov	r3, r1
 8005920:	807b      	strh	r3, [r7, #2]
 8005922:	4613      	mov	r3, r2
 8005924:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 8005926:	4b1d      	ldr	r3, [pc, #116]	@ (800599c <_Z26ILI9341_Draw_Vertical_Linetttt+0x94>)
 8005928:	881b      	ldrh	r3, [r3, #0]
 800592a:	b29b      	uxth	r3, r3
 800592c:	88fa      	ldrh	r2, [r7, #6]
 800592e:	429a      	cmp	r2, r3
 8005930:	d205      	bcs.n	800593e <_Z26ILI9341_Draw_Vertical_Linetttt+0x36>
 8005932:	4b1b      	ldr	r3, [pc, #108]	@ (80059a0 <_Z26ILI9341_Draw_Vertical_Linetttt+0x98>)
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	b29b      	uxth	r3, r3
 8005938:	88ba      	ldrh	r2, [r7, #4]
 800593a:	429a      	cmp	r2, r3
 800593c:	d301      	bcc.n	8005942 <_Z26ILI9341_Draw_Vertical_Linetttt+0x3a>
 800593e:	2301      	movs	r3, #1
 8005940:	e000      	b.n	8005944 <_Z26ILI9341_Draw_Vertical_Linetttt+0x3c>
 8005942:	2300      	movs	r3, #0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d124      	bne.n	8005992 <_Z26ILI9341_Draw_Vertical_Linetttt+0x8a>
		return;
	if ((Y + Height - 1) >= LCD_HEIGHT)
 8005948:	88ba      	ldrh	r2, [r7, #4]
 800594a:	887b      	ldrh	r3, [r7, #2]
 800594c:	4413      	add	r3, r2
 800594e:	4a14      	ldr	r2, [pc, #80]	@ (80059a0 <_Z26ILI9341_Draw_Vertical_Linetttt+0x98>)
 8005950:	8812      	ldrh	r2, [r2, #0]
 8005952:	b292      	uxth	r2, r2
 8005954:	4293      	cmp	r3, r2
 8005956:	bfcc      	ite	gt
 8005958:	2301      	movgt	r3, #1
 800595a:	2300      	movle	r3, #0
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d005      	beq.n	800596e <_Z26ILI9341_Draw_Vertical_Linetttt+0x66>
	{
		Height = LCD_HEIGHT - Y;
 8005962:	4b0f      	ldr	r3, [pc, #60]	@ (80059a0 <_Z26ILI9341_Draw_Vertical_Linetttt+0x98>)
 8005964:	881b      	ldrh	r3, [r3, #0]
 8005966:	b29a      	uxth	r2, r3
 8005968:	88bb      	ldrh	r3, [r7, #4]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	807b      	strh	r3, [r7, #2]
	}
	ILI9341_Set_Address(X, Y, X, Y + Height - 1);
 800596e:	88ba      	ldrh	r2, [r7, #4]
 8005970:	887b      	ldrh	r3, [r7, #2]
 8005972:	4413      	add	r3, r2
 8005974:	b29b      	uxth	r3, r3
 8005976:	3b01      	subs	r3, #1
 8005978:	b29b      	uxth	r3, r3
 800597a:	88fa      	ldrh	r2, [r7, #6]
 800597c:	88b9      	ldrh	r1, [r7, #4]
 800597e:	88f8      	ldrh	r0, [r7, #6]
 8005980:	f7ff fbaa 	bl	80050d8 <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, Height);
 8005984:	887a      	ldrh	r2, [r7, #2]
 8005986:	883b      	ldrh	r3, [r7, #0]
 8005988:	4611      	mov	r1, r2
 800598a:	4618      	mov	r0, r3
 800598c:	f7ff fd78 	bl	8005480 <_Z25ILI9341_Draw_Colour_Bursttm>
 8005990:	e000      	b.n	8005994 <_Z26ILI9341_Draw_Vertical_Linetttt+0x8c>
		return;
 8005992:	bf00      	nop
}
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	bd90      	pop	{r4, r7, pc}
 800599a:	bf00      	nop
 800599c:	20000002 	.word	0x20000002
 80059a0:	20000000 	.word	0x20000000

080059a4 <_ZN19CManejadorControlesC1Ev>:

#include <ManejadorControles/CManejadorControles.hpp>
#include "Constantes.hpp"
#include "Uart/Uart.hpp"

CManejadorControles::CManejadorControles()
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af04      	add	r7, sp, #16
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7fb fb52 	bl	8001058 <_ZN22CManejadorEventosBotonC1Ev>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	3304      	adds	r3, #4
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7fb fe6f 	bl	800169c <_ZN24CManejadorEventosEncoderC1Ev>
 80059be:	4a52      	ldr	r2, [pc, #328]	@ (8005b08 <_ZN19CManejadorControlesC1Ev+0x164>)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	4a51      	ldr	r2, [pc, #324]	@ (8005b0c <_ZN19CManejadorControlesC1Ev+0x168>)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	605a      	str	r2, [r3, #4]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	609a      	str	r2, [r3, #8]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	330c      	adds	r3, #12
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7fb fa67 	bl	8000ea8 <_ZN15CManejadorBotonC1Ev>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	332c      	adds	r3, #44	@ 0x2c
 80059de:	4618      	mov	r0, r3
 80059e0:	f7fb fa62 	bl	8000ea8 <_ZN15CManejadorBotonC1Ev>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	334c      	adds	r3, #76	@ 0x4c
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7fb fa5d 	bl	8000ea8 <_ZN15CManejadorBotonC1Ev>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	336c      	adds	r3, #108	@ 0x6c
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7fb fa58 	bl	8000ea8 <_ZN15CManejadorBotonC1Ev>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	338c      	adds	r3, #140	@ 0x8c
 80059fc:	4618      	mov	r0, r3
 80059fe:	f7fb fccf 	bl	80013a0 <_ZN8CEncoderC1Ev>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	33d8      	adds	r3, #216	@ 0xd8
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fb fbf4 	bl	80011f4 <_ZN20ControlVelocidadAireC1Ev>
{
	// TODO Auto-generated constructor stub
	//configuracion de los botones
	BotonMemoria1.Configurar(GPIOC, GPIO_PIN_14, 1);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f103 000c 	add.w	r0, r3, #12
 8005a12:	2301      	movs	r3, #1
 8005a14:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005a18:	493d      	ldr	r1, [pc, #244]	@ (8005b10 <_ZN19CManejadorControlesC1Ev+0x16c>)
 8005a1a:	f7fb fa85 	bl	8000f28 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonMemoria1.AsignaManejadorEventos(this);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	330c      	adds	r3, #12
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	4611      	mov	r1, r2
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7fb fac8 	bl	8000fbc <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonMemoria1.Init();
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	330c      	adds	r3, #12
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7fb fa93 	bl	8000f5c <_ZN15CManejadorBoton4InitEv>

	BotonMemoria2.Configurar(GPIOA, GPIO_PIN_6, 2);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f103 002c 	add.w	r0, r3, #44	@ 0x2c
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	2240      	movs	r2, #64	@ 0x40
 8005a40:	4934      	ldr	r1, [pc, #208]	@ (8005b14 <_ZN19CManejadorControlesC1Ev+0x170>)
 8005a42:	f7fb fa71 	bl	8000f28 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonMemoria2.AsignaManejadorEventos(this);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	332c      	adds	r3, #44	@ 0x2c
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	4611      	mov	r1, r2
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7fb fab4 	bl	8000fbc <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonMemoria2.Init();
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	332c      	adds	r3, #44	@ 0x2c
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7fb fa7f 	bl	8000f5c <_ZN15CManejadorBoton4InitEv>

	BotonMemoria3.Configurar(GPIOB, GPIO_PIN_10, 3);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 8005a64:	2303      	movs	r3, #3
 8005a66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005a6a:	492b      	ldr	r1, [pc, #172]	@ (8005b18 <_ZN19CManejadorControlesC1Ev+0x174>)
 8005a6c:	f7fb fa5c 	bl	8000f28 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonMemoria3.AsignaManejadorEventos(this);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	334c      	adds	r3, #76	@ 0x4c
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	4611      	mov	r1, r2
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7fb fa9f 	bl	8000fbc <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonMemoria3.Init();
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	334c      	adds	r3, #76	@ 0x4c
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7fb fa6a 	bl	8000f5c <_ZN15CManejadorBoton4InitEv>

	BotonManual.Configurar(GPIOB, GPIO_PIN_15, 4);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8005a8e:	2304      	movs	r3, #4
 8005a90:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005a94:	4920      	ldr	r1, [pc, #128]	@ (8005b18 <_ZN19CManejadorControlesC1Ev+0x174>)
 8005a96:	f7fb fa47 	bl	8000f28 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonManual.AsignaManejadorEventos(this);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	336c      	adds	r3, #108	@ 0x6c
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	4611      	mov	r1, r2
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7fb fa8a 	bl	8000fbc <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonManual.Init();
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	336c      	adds	r3, #108	@ 0x6c
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7fb fa55 	bl	8000f5c <_ZN15CManejadorBoton4InitEv>

	Encoder.Configurar(GPIOB, GPIO_PIN_2, GPIOB, GPIO_PIN_12, GPIOB,
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f103 008c 	add.w	r0, r3, #140	@ 0x8c
 8005ab8:	2301      	movs	r3, #1
 8005aba:	9303      	str	r3, [sp, #12]
 8005abc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005ac0:	9302      	str	r3, [sp, #8]
 8005ac2:	4b15      	ldr	r3, [pc, #84]	@ (8005b18 <_ZN19CManejadorControlesC1Ev+0x174>)
 8005ac4:	9301      	str	r3, [sp, #4]
 8005ac6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	4b12      	ldr	r3, [pc, #72]	@ (8005b18 <_ZN19CManejadorControlesC1Ev+0x174>)
 8005ace:	2204      	movs	r2, #4
 8005ad0:	4911      	ldr	r1, [pc, #68]	@ (8005b18 <_ZN19CManejadorControlesC1Ev+0x174>)
 8005ad2:	f7fb fcab 	bl	800142c <_ZN8CEncoder10ConfigurarEP12GPIO_TypeDeftS1_tS1_ti>
			GPIO_PIN_8, 1);
	Encoder.AsignaManejadorEventos(this);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f103 028c 	add.w	r2, r3, #140	@ 0x8c
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	3304      	adds	r3, #4
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	4610      	mov	r0, r2
 8005ae4:	f7fb fd43 	bl	800156e <_ZN8CEncoder22AsignaManejadorEventosEP24CManejadorEventosEncoder>
	Encoder.Init();
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	338c      	adds	r3, #140	@ 0x8c
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7fb fd00 	bl	80014f2 <_ZN8CEncoder4InitEv>

	controlVelocidadAire.Inicializa();
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	33d8      	adds	r3, #216	@ 0xd8
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7fb fbac 	bl	8001254 <_ZN20ControlVelocidadAire10InicializaEv>

}
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4618      	mov	r0, r3
 8005b00:	3708      	adds	r7, #8
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	0800f740 	.word	0x0800f740
 8005b0c:	0800f788 	.word	0x0800f788
 8005b10:	40020800 	.word	0x40020800
 8005b14:	40020000 	.word	0x40020000
 8005b18:	40020400 	.word	0x40020400

08005b1c <_ZN19CManejadorControlesD1Ev>:

CManejadorControles::~CManejadorControles()
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	4a18      	ldr	r2, [pc, #96]	@ (8005b88 <_ZN19CManejadorControlesD1Ev+0x6c>)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	4a18      	ldr	r2, [pc, #96]	@ (8005b8c <_ZN19CManejadorControlesD1Ev+0x70>)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	605a      	str	r2, [r3, #4]
{
	// TODO Auto-generated destructor stub
}
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	33d8      	adds	r3, #216	@ 0xd8
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7fb fb6d 	bl	8001214 <_ZN20ControlVelocidadAireD1Ev>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	338c      	adds	r3, #140	@ 0x8c
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7fb fc52 	bl	80013e8 <_ZN8CEncoderD1Ev>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	336c      	adds	r3, #108	@ 0x6c
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7fb f9cd 	bl	8000ee8 <_ZN15CManejadorBotonD1Ev>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	334c      	adds	r3, #76	@ 0x4c
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7fb f9c8 	bl	8000ee8 <_ZN15CManejadorBotonD1Ev>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	332c      	adds	r3, #44	@ 0x2c
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7fb f9c3 	bl	8000ee8 <_ZN15CManejadorBotonD1Ev>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	330c      	adds	r3, #12
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7fb f9be 	bl	8000ee8 <_ZN15CManejadorBotonD1Ev>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	3304      	adds	r3, #4
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7fb fda3 	bl	80016bc <_ZN24CManejadorEventosEncoderD1Ev>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7fb fa7d 	bl	8001078 <_ZN22CManejadorEventosBotonD1Ev>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4618      	mov	r0, r3
 8005b82:	3708      	adds	r7, #8
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	0800f740 	.word	0x0800f740
 8005b8c:	0800f788 	.word	0x0800f788

08005b90 <_ZThn4_N19CManejadorControlesD1Ev>:
	virtual void EncoderDecremento();


public:
	CManejadorControles();
	virtual ~CManejadorControles();
 8005b90:	f1a0 0004 	sub.w	r0, r0, #4
 8005b94:	f7ff bfc2 	b.w	8005b1c <_ZN19CManejadorControlesD1Ev>

08005b98 <_ZN19CManejadorControlesD0Ev>:
CManejadorControles::~CManejadorControles()
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
}
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f7ff ffbb 	bl	8005b1c <_ZN19CManejadorControlesD1Ev>
 8005ba6:	f44f 7192 	mov.w	r1, #292	@ 0x124
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f006 f9e4 	bl	800bf78 <_ZdlPvj>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <_ZThn4_N19CManejadorControlesD0Ev>:
 8005bba:	f1a0 0004 	sub.w	r0, r0, #4
 8005bbe:	f7ff bfeb 	b.w	8005b98 <_ZN19CManejadorControlesD0Ev>

08005bc2 <_ZN19CManejadorControles17GPIO_INTERRUPCIONEi>:

void CManejadorControles::GPIO_INTERRUPCION(int GPIO_Pin)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b082      	sub	sp, #8
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
 8005bca:	6039      	str	r1, [r7, #0]
	ProcesaBotones(GPIO_Pin);
 8005bcc:	6839      	ldr	r1, [r7, #0]
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f80b 	bl	8005bea <_ZN19CManejadorControles14ProcesaBotonesEi>
	InterrupcionEncoder(GPIO_Pin);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	3338      	adds	r3, #56	@ 0x38
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6839      	ldr	r1, [r7, #0]
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	4798      	blx	r3
}
 8005be2:	bf00      	nop
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <_ZN19CManejadorControles14ProcesaBotonesEi>:

void CManejadorControles::ProcesaBotones(int gpio_pin)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b082      	sub	sp, #8
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
 8005bf2:	6039      	str	r1, [r7, #0]
	BotonMemoria1.Procesa(gpio_pin);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	330c      	adds	r3, #12
 8005bf8:	6839      	ldr	r1, [r7, #0]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7fb f9ec 	bl	8000fd8 <_ZN15CManejadorBoton7ProcesaEi>
	BotonMemoria2.Procesa(gpio_pin);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	332c      	adds	r3, #44	@ 0x2c
 8005c04:	6839      	ldr	r1, [r7, #0]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fb f9e6 	bl	8000fd8 <_ZN15CManejadorBoton7ProcesaEi>
	BotonMemoria3.Procesa(gpio_pin);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	334c      	adds	r3, #76	@ 0x4c
 8005c10:	6839      	ldr	r1, [r7, #0]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7fb f9e0 	bl	8000fd8 <_ZN15CManejadorBoton7ProcesaEi>
///	SerialPrintf("\r\n ProcesaBotones");

	BotonManual.Procesa(gpio_pin);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	336c      	adds	r3, #108	@ 0x6c
 8005c1c:	6839      	ldr	r1, [r7, #0]
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fb f9da 	bl	8000fd8 <_ZN15CManejadorBoton7ProcesaEi>
}
 8005c24:	bf00      	nop
 8005c26:	3708      	adds	r7, #8
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <_ZN19CManejadorControles19InterrupcionEncoderEi>:
void CManejadorControles::InterrupcionEncoder(int GPIO_Pin)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
	Encoder.Procesa(GPIO_Pin);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	338c      	adds	r3, #140	@ 0x8c
 8005c3a:	6839      	ldr	r1, [r7, #0]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7fb fcbc 	bl	80015ba <_ZN8CEncoder7ProcesaEi>
}
 8005c42:	bf00      	nop
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <_ZN19CManejadorControles12GetNivelAireEv>:

//regresa el nivel de aire setado
int CManejadorControles::GetNivelAire()
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b082      	sub	sp, #8
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
	return controlVelocidadAire.LeeVelocidad();
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	33d8      	adds	r3, #216	@ 0xd8
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7fb fb76 	bl	8001348 <_ZN20ControlVelocidadAire12LeeVelocidadEv>
 8005c5c:	4603      	mov	r3, r0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3708      	adds	r7, #8
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <_ZN19CManejadorControles18BotonUnoClickEventEv>:

//eventros del boton uno
void CManejadorControles::BotonUnoClickEvent()
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b082      	sub	sp, #8
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d009      	beq.n	8005c8a <_ZN19CManejadorControles18BotonUnoClickEventEv+0x24>
		return;
	ManejadorControles->OnBotonUnoClickEvent();
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	689a      	ldr	r2, [r3, #8]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	3310      	adds	r3, #16
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4610      	mov	r0, r2
 8005c86:	4798      	blx	r3
 8005c88:	e000      	b.n	8005c8c <_ZN19CManejadorControles18BotonUnoClickEventEv+0x26>
		return;
 8005c8a:	bf00      	nop

}
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <_ZN19CManejadorControles18BotonDosClickEventEv>:
//eventros del boton dos
void CManejadorControles::BotonDosClickEvent()
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b082      	sub	sp, #8
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d009      	beq.n	8005cb6 <_ZN19CManejadorControles18BotonDosClickEventEv+0x24>
		return;
	ManejadorControles->OnBotonDosClickEvent();
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	689a      	ldr	r2, [r3, #8]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	3314      	adds	r3, #20
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	4798      	blx	r3
 8005cb4:	e000      	b.n	8005cb8 <_ZN19CManejadorControles18BotonDosClickEventEv+0x26>
		return;
 8005cb6:	bf00      	nop

}
 8005cb8:	3708      	adds	r7, #8
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <_ZN19CManejadorControles19BotonTresClickEventEv>:
//eventros del boton tres
void CManejadorControles::BotonTresClickEvent()
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b082      	sub	sp, #8
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d009      	beq.n	8005ce2 <_ZN19CManejadorControles19BotonTresClickEventEv+0x24>
		return;
	ManejadorControles->OnBotonTresClickEvent();
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	689a      	ldr	r2, [r3, #8]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	3318      	adds	r3, #24
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4610      	mov	r0, r2
 8005cde:	4798      	blx	r3
 8005ce0:	e000      	b.n	8005ce4 <_ZN19CManejadorControles19BotonTresClickEventEv+0x26>
		return;
 8005ce2:	bf00      	nop

}
 8005ce4:	3708      	adds	r7, #8
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <_ZN19CManejadorControles21BotonCuatroClickEventEv>:
//eventros del boton Cuatro
void CManejadorControles::BotonCuatroClickEvent()
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b082      	sub	sp, #8
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d009      	beq.n	8005d0e <_ZN19CManejadorControles21BotonCuatroClickEventEv+0x24>
		return;
	ManejadorControles->OnBotonCuatroClickEvent();
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	689a      	ldr	r2, [r3, #8]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	331c      	adds	r3, #28
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4610      	mov	r0, r2
 8005d0a:	4798      	blx	r3
 8005d0c:	e000      	b.n	8005d10 <_ZN19CManejadorControles21BotonCuatroClickEventEv+0x26>
		return;
 8005d0e:	bf00      	nop

}
 8005d10:	3708      	adds	r7, #8
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <_ZN19CManejadorControles22BotonPerillaClickEventEv>:
//eventros del boton Perilla
void CManejadorControles::BotonPerillaClickEvent()
{
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b082      	sub	sp, #8
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d009      	beq.n	8005d3a <_ZN19CManejadorControles22BotonPerillaClickEventEv+0x24>
		return;
	ManejadorControles->OnBotonPerillaClickEvent();
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	689a      	ldr	r2, [r3, #8]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3320      	adds	r3, #32
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4610      	mov	r0, r2
 8005d36:	4798      	blx	r3
 8005d38:	e000      	b.n	8005d3c <_ZN19CManejadorControles22BotonPerillaClickEventEv+0x26>
		return;
 8005d3a:	bf00      	nop

}
 8005d3c:	3708      	adds	r7, #8
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <_ZN19CManejadorControles17EncoderIncrementoEv>:
//eventos del encoder
void CManejadorControles::EncoderIncremento()
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b082      	sub	sp, #8
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d009      	beq.n	8005d66 <_ZN19CManejadorControles17EncoderIncrementoEv+0x24>
		return;
	ManejadorControles->OnPerillaIncremento();
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	689a      	ldr	r2, [r3, #8]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	3324      	adds	r3, #36	@ 0x24
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4610      	mov	r0, r2
 8005d62:	4798      	blx	r3
 8005d64:	e000      	b.n	8005d68 <_ZN19CManejadorControles17EncoderIncrementoEv+0x26>
		return;
 8005d66:	bf00      	nop

}
 8005d68:	3708      	adds	r7, #8
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <_ZN19CManejadorControles17EncoderDecrementoEv>:
void CManejadorControles::EncoderDecremento()
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b082      	sub	sp, #8
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d009      	beq.n	8005d92 <_ZN19CManejadorControles17EncoderDecrementoEv+0x24>
		return;
	ManejadorControles->OnPerillaDecremento();
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	689a      	ldr	r2, [r3, #8]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3328      	adds	r3, #40	@ 0x28
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4610      	mov	r0, r2
 8005d8e:	4798      	blx	r3
 8005d90:	e000      	b.n	8005d94 <_ZN19CManejadorControles17EncoderDecrementoEv+0x26>
		return;
 8005d92:	bf00      	nop

}
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
	...

08005d9c <_ZN19CManejadorControles17OnBotonClickEventEi>:

void CManejadorControles::OnBotonClickEvent(int idBoton)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
	switch (idBoton)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	3b01      	subs	r3, #1
 8005daa:	2b03      	cmp	r3, #3
 8005dac:	d826      	bhi.n	8005dfc <_ZN19CManejadorControles17OnBotonClickEventEi+0x60>
 8005dae:	a201      	add	r2, pc, #4	@ (adr r2, 8005db4 <_ZN19CManejadorControles17OnBotonClickEventEi+0x18>)
 8005db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db4:	08005dc5 	.word	0x08005dc5
 8005db8:	08005dd3 	.word	0x08005dd3
 8005dbc:	08005de1 	.word	0x08005de1
 8005dc0:	08005def 	.word	0x08005def
	{
	case BOTON_MEMORIA1:
		BotonUnoClickEvent();
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3318      	adds	r3, #24
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	4798      	blx	r3
		break;
 8005dd0:	e014      	b.n	8005dfc <_ZN19CManejadorControles17OnBotonClickEventEi+0x60>
	case BOTON_MEMORIA2:
		BotonDosClickEvent();
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	331c      	adds	r3, #28
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	4798      	blx	r3
		break;
 8005dde:	e00d      	b.n	8005dfc <_ZN19CManejadorControles17OnBotonClickEventEi+0x60>
	case BOTON_MEMORIA3:
		BotonTresClickEvent();
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	3320      	adds	r3, #32
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	4798      	blx	r3
		break;
 8005dec:	e006      	b.n	8005dfc <_ZN19CManejadorControles17OnBotonClickEventEi+0x60>
	case BOTON_MANUAL:
		BotonCuatroClickEvent();
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	3324      	adds	r3, #36	@ 0x24
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	4798      	blx	r3
		break;
 8005dfa:	bf00      	nop
	}
}
 8005dfc:	bf00      	nop
 8005dfe:	3708      	adds	r7, #8
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <_ZN19CManejadorControles19OnIncrementoEncoderEi>:


//eventros del encoder
void CManejadorControles::OnIncrementoEncoder(int id_Encoder)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
	EncoderIncremento();
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	332c      	adds	r3, #44	@ 0x2c
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	4798      	blx	r3
}
 8005e1a:	bf00      	nop
 8005e1c:	3708      	adds	r7, #8
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <_ZThn4_N19CManejadorControles19OnIncrementoEncoderEi>:
	virtual void OnIncrementoEncoder(int id_Encoder);
 8005e22:	f1a0 0004 	sub.w	r0, r0, #4
 8005e26:	f7ff bfed 	b.w	8005e04 <_ZN19CManejadorControles19OnIncrementoEncoderEi>

08005e2a <_ZN19CManejadorControles19OnDecrementoEncoderEi>:

void CManejadorControles::OnDecrementoEncoder(int id_Encoder)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b082      	sub	sp, #8
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
 8005e32:	6039      	str	r1, [r7, #0]
	EncoderDecremento();
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	3330      	adds	r3, #48	@ 0x30
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	4798      	blx	r3
}
 8005e40:	bf00      	nop
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <_ZThn4_N19CManejadorControles19OnDecrementoEncoderEi>:
	virtual void OnDecrementoEncoder(int id_Encoder);
 8005e48:	f1a0 0004 	sub.w	r0, r0, #4
 8005e4c:	f7ff bfed 	b.w	8005e2a <_ZN19CManejadorControles19OnDecrementoEncoderEi>

08005e50 <_ZN19CManejadorControles24OnBotonEncoderClickEventEi>:

void CManejadorControles::OnBotonEncoderClickEvent(int id_Encoder )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
	BotonPerillaClickEvent();
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	3328      	adds	r3, #40	@ 0x28
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	4798      	blx	r3
}
 8005e66:	bf00      	nop
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <_ZThn4_N19CManejadorControles24OnBotonEncoderClickEventEi>:
	virtual void OnBotonEncoderClickEvent(int id_Encoder);
 8005e6e:	f1a0 0004 	sub.w	r0, r0, #4
 8005e72:	f7ff bfed 	b.w	8005e50 <_ZN19CManejadorControles24OnBotonEncoderClickEventEi>

08005e76 <_ZN19CManejadorControles21SetManejadorControlesEP26CManejadorEventosControles>:




void CManejadorControles::SetManejadorControles(CManejadorEventosControles *obj)
{
 8005e76:	b480      	push	{r7}
 8005e78:	b083      	sub	sp, #12
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
 8005e7e:	6039      	str	r1, [r7, #0]
	ManejadorControles = obj;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	683a      	ldr	r2, [r7, #0]
 8005e84:	609a      	str	r2, [r3, #8]
}
 8005e86:	bf00      	nop
 8005e88:	370c      	adds	r7, #12
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
	...

08005e94 <_ZN26CManejadorEventosControlesC1Ev>:
 *      Author: W10
 */

#include <ManejadorControles/CManejadorEventosControles.hpp>

CManejadorEventosControles::CManejadorEventosControles()
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	4a04      	ldr	r2, [pc, #16]	@ (8005eb0 <_ZN26CManejadorEventosControlesC1Ev+0x1c>)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr
 8005eb0:	0800f7a4 	.word	0x0800f7a4

08005eb4 <_ZN26CManejadorEventosControlesD1Ev>:

CManejadorEventosControles::~CManejadorEventosControles()
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	4a04      	ldr	r2, [pc, #16]	@ (8005ed0 <_ZN26CManejadorEventosControlesD1Ev+0x1c>)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr
 8005ed0:	0800f7a4 	.word	0x0800f7a4

08005ed4 <_ZN26CManejadorEventosControlesD0Ev>:
CManejadorEventosControles::~CManejadorEventosControles()
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
}
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f7ff ffe9 	bl	8005eb4 <_ZN26CManejadorEventosControlesD1Ev>
 8005ee2:	2104      	movs	r1, #4
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f006 f847 	bl	800bf78 <_ZdlPvj>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4618      	mov	r0, r3
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <_ZN26CManejadorEventosControles22OnTemperaturaRealEventEi>:

void CManejadorEventosControles::OnTemperaturaRealEvent(int temperatura)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]

}
 8005efe:	bf00      	nop
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <_ZN26CManejadorEventosControles16OnNivelAireEventEi>:
void CManejadorEventosControles::OnNivelAireEvent(int aire)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	b083      	sub	sp, #12
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
 8005f12:	6039      	str	r1, [r7, #0]

}
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <_ZN26CManejadorEventosControles20OnBotonUnoClickEventEv>:
//eventros del boton uno
void CManejadorEventosControles::OnBotonUnoClickEvent()
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]

}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <_ZN26CManejadorEventosControles20OnBotonDosClickEventEv>:
//eventros del boton dos
void CManejadorEventosControles::OnBotonDosClickEvent()
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]

}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <_ZN26CManejadorEventosControles21OnBotonTresClickEventEv>:
//eventros del boton tres
void CManejadorEventosControles::OnBotonTresClickEvent()
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]

}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <_ZN26CManejadorEventosControles23OnBotonCuatroClickEventEv>:
//eventros del boton Cuatro
void CManejadorEventosControles::OnBotonCuatroClickEvent()
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]

}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <_ZN26CManejadorEventosControles24OnBotonPerillaClickEventEv>:
//eventros del boton Perilla
void CManejadorEventosControles::OnBotonPerillaClickEvent()
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]

}
 8005f78:	bf00      	nop
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <_ZN26CManejadorEventosControles19OnPerillaIncrementoEv>:
//eventos del Encoder
void CManejadorEventosControles::OnPerillaIncremento()
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]

}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <_ZN26CManejadorEventosControles19OnPerillaDecrementoEv>:
void CManejadorEventosControles::OnPerillaDecremento()
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]

}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <_ZN7MAX6675C1Ev>:
 *      Author: Alcides Ramos
 */

#include "Max6675/Max6675.hpp"
#include "Uart/Uart.hpp"
MAX6675::MAX6675()
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
{

}
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <_ZN7MAX667515SetConfigDatPinEP12GPIO_TypeDeft>:
void MAX6675::SetConfigDatPin(GPIO_TypeDef *portDat, uint16_t pinDat)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b085      	sub	sp, #20
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	60f8      	str	r0, [r7, #12]
 8005fca:	60b9      	str	r1, [r7, #8]
 8005fcc:	4613      	mov	r3, r2
 8005fce:	80fb      	strh	r3, [r7, #6]
	DAT_MAX_GPIO_Port = portDat;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	601a      	str	r2, [r3, #0]
	DAT_MAX_Pin = pinDat;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	88fa      	ldrh	r2, [r7, #6]
 8005fda:	819a      	strh	r2, [r3, #12]

}
 8005fdc:	bf00      	nop
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <_ZN7MAX667514SetConfigCkPinEP12GPIO_TypeDeft>:
void MAX6675::SetConfigCkPin(GPIO_TypeDef *portCk, uint16_t pinCk)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	80fb      	strh	r3, [r7, #6]
	CK_MAX_GPIO_Port = portCk;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	605a      	str	r2, [r3, #4]
	CK_MAX_Pin = pinCk;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	88fa      	ldrh	r2, [r7, #6]
 8006000:	81da      	strh	r2, [r3, #14]

}
 8006002:	bf00      	nop
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <_ZN7MAX667514SetConfigCsPinEP12GPIO_TypeDeft>:
void MAX6675::SetConfigCsPin(GPIO_TypeDef *portCs, uint16_t pinCs)
{
 800600e:	b480      	push	{r7}
 8006010:	b085      	sub	sp, #20
 8006012:	af00      	add	r7, sp, #0
 8006014:	60f8      	str	r0, [r7, #12]
 8006016:	60b9      	str	r1, [r7, #8]
 8006018:	4613      	mov	r3, r2
 800601a:	80fb      	strh	r3, [r7, #6]
	CS_MAX_GPIO_Port = portCs;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	609a      	str	r2, [r3, #8]
	CS_MAX_Pin = pinCs;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	88fa      	ldrh	r2, [r7, #6]
 8006026:	821a      	strh	r2, [r3, #16]

}
 8006028:	bf00      	nop
 800602a:	3714      	adds	r7, #20
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <_ZN7MAX667512MAX6675_leexEv>:
int MAX6675::MAX6675_leex()
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
	//Init();
	uint16_t sensor_dato;
	uint16_t max6675_dato=0 ;
 800603c:	2300      	movs	r3, #0
 800603e:	82fb      	strh	r3, [r7, #22]
	int8_t cont;
	int tiempoactual=HAL_GetTick();
 8006040:	f001 fe6c 	bl	8007d1c <HAL_GetTick>
 8006044:	4603      	mov	r3, r0
 8006046:	613b      	str	r3, [r7, #16]
	if(tiempoactual<TiempoTranscurrido)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	695b      	ldr	r3, [r3, #20]
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	429a      	cmp	r2, r3
 8006050:	da02      	bge.n	8006058 <_ZN7MAX667512MAX6675_leexEv+0x24>
	{
		return UltimaTemperatura;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	e051      	b.n	80060fc <_ZN7MAX667512MAX6675_leexEv+0xc8>
	}
	TiempoTranscurrido=tiempoactual+500;
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	f503 72fa 	add.w	r2, r3, #500	@ 0x1f4
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	615a      	str	r2, [r3, #20]

	HAL_GPIO_WritePin(CS_MAX_GPIO_Port, CS_MAX_Pin,	GPIO_PinState::GPIO_PIN_RESET); //Habilita el modulo
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6898      	ldr	r0, [r3, #8]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	8a1b      	ldrh	r3, [r3, #16]
 800606a:	2200      	movs	r2, #0
 800606c:	4619      	mov	r1, r3
 800606e:	f002 fc67 	bl	8008940 <HAL_GPIO_WritePin>
	Retardo();
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f872 	bl	800615c <_ZN7MAX66757RetardoEv>
	for (cont = 15; cont >= 0; cont--)
 8006078:	230f      	movs	r3, #15
 800607a:	757b      	strb	r3, [r7, #21]
 800607c:	e01b      	b.n	80060b6 <_ZN7MAX667512MAX6675_leexEv+0x82>
	{
		if (MAX6675_pulso() == 1)
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f842 	bl	8006108 <_ZN7MAX667513MAX6675_pulsoEv>
 8006084:	4603      	mov	r3, r0
 8006086:	2b01      	cmp	r3, #1
 8006088:	bf0c      	ite	eq
 800608a:	2301      	moveq	r3, #1
 800608c:	2300      	movne	r3, #0
 800608e:	b2db      	uxtb	r3, r3
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00a      	beq.n	80060aa <_ZN7MAX667512MAX6675_leexEv+0x76>
			max6675_dato = max6675_dato | 1 << cont;
 8006094:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8006098:	2201      	movs	r2, #1
 800609a:	fa02 f303 	lsl.w	r3, r2, r3
 800609e:	b21a      	sxth	r2, r3
 80060a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	b21b      	sxth	r3, r3
 80060a8:	82fb      	strh	r3, [r7, #22]
	for (cont = 15; cont >= 0; cont--)
 80060aa:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	3b01      	subs	r3, #1
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	757b      	strb	r3, [r7, #21]
 80060b6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	dadf      	bge.n	800607e <_ZN7MAX667512MAX6675_leexEv+0x4a>

	}

	HAL_GPIO_WritePin(CS_MAX_GPIO_Port, CS_MAX_Pin,	GPIO_PinState::GPIO_PIN_SET); //APAGA el modulo
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6898      	ldr	r0, [r3, #8]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	8a1b      	ldrh	r3, [r3, #16]
 80060c6:	2201      	movs	r2, #1
 80060c8:	4619      	mov	r1, r3
 80060ca:	f002 fc39 	bl	8008940 <HAL_GPIO_WritePin>
	sensor_dato = (max6675_dato >> 3); //desplaz 3 veces
 80060ce:	8afb      	ldrh	r3, [r7, #22]
 80060d0:	08db      	lsrs	r3, r3, #3
 80060d2:	81fb      	strh	r3, [r7, #14]
	UltimaTemperatura= (sensor_dato * 0.25);//-90; //0.25
 80060d4:	89fb      	ldrh	r3, [r7, #14]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7fa fa2c 	bl	8000534 <__aeabi_i2d>
 80060dc:	f04f 0200 	mov.w	r2, #0
 80060e0:	4b08      	ldr	r3, [pc, #32]	@ (8006104 <_ZN7MAX667512MAX6675_leexEv+0xd0>)
 80060e2:	f7fa fa91 	bl	8000608 <__aeabi_dmul>
 80060e6:	4602      	mov	r2, r0
 80060e8:	460b      	mov	r3, r1
 80060ea:	4610      	mov	r0, r2
 80060ec:	4619      	mov	r1, r3
 80060ee:	f7fa fd3b 	bl	8000b68 <__aeabi_d2iz>
 80060f2:	4602      	mov	r2, r0
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	619a      	str	r2, [r3, #24]

	return UltimaTemperatura;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	699b      	ldr	r3, [r3, #24]

}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3718      	adds	r7, #24
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	3fd00000 	.word	0x3fd00000

08006108 <_ZN7MAX667513MAX6675_pulsoEv>:
uint8_t MAX6675::MAX6675_pulso()
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
	uint8_t lei;
	HAL_GPIO_WritePin(CK_MAX_GPIO_Port, CK_MAX_Pin,	GPIO_PinState::GPIO_PIN_SET); //SACA UN 1 reloj
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6858      	ldr	r0, [r3, #4]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	89db      	ldrh	r3, [r3, #14]
 8006118:	2201      	movs	r2, #1
 800611a:	4619      	mov	r1, r3
 800611c:	f002 fc10 	bl	8008940 <HAL_GPIO_WritePin>
	Retardo();
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f81b 	bl	800615c <_ZN7MAX66757RetardoEv>
	lei = HAL_GPIO_ReadPin(DAT_MAX_GPIO_Port, DAT_MAX_Pin); // lee el pin
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	899b      	ldrh	r3, [r3, #12]
 800612e:	4619      	mov	r1, r3
 8006130:	4610      	mov	r0, r2
 8006132:	f002 fbed 	bl	8008910 <HAL_GPIO_ReadPin>
 8006136:	4603      	mov	r3, r0
 8006138:	73fb      	strb	r3, [r7, #15]
//	Retardo();
	HAL_GPIO_WritePin(CK_MAX_GPIO_Port, CK_MAX_Pin,	GPIO_PinState::GPIO_PIN_RESET); //SACA UN 0 reloj
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6858      	ldr	r0, [r3, #4]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	89db      	ldrh	r3, [r3, #14]
 8006142:	2200      	movs	r2, #0
 8006144:	4619      	mov	r1, r3
 8006146:	f002 fbfb 	bl	8008940 <HAL_GPIO_WritePin>
	Retardo();
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f806 	bl	800615c <_ZN7MAX66757RetardoEv>
	return lei;
 8006150:	7bfb      	ldrb	r3, [r7, #15]
}
 8006152:	4618      	mov	r0, r3
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
	...

0800615c <_ZN7MAX66757RetardoEv>:
void MAX6675::Retardo()
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b086      	sub	sp, #24
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
	uint16_t time=10;
 8006164:	230a      	movs	r3, #10
 8006166:	827b      	strh	r3, [r7, #18]
	uint32_t frecuencia=HAL_RCC_GetHCLKFreq();
 8006168:	f004 f864 	bl	800a234 <HAL_RCC_GetHCLKFreq>
 800616c:	60f8      	str	r0, [r7, #12]
	uint16_t delay= time*(frecuencia/1000000);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	4a0c      	ldr	r2, [pc, #48]	@ (80061a4 <_ZN7MAX66757RetardoEv+0x48>)
 8006172:	fba2 2303 	umull	r2, r3, r2, r3
 8006176:	0c9b      	lsrs	r3, r3, #18
 8006178:	b29b      	uxth	r3, r3
 800617a:	8a7a      	ldrh	r2, [r7, #18]
 800617c:	fb12 f303 	smulbb	r3, r2, r3
 8006180:	817b      	strh	r3, [r7, #10]
	for(int i=0;i<delay;i+=5)
 8006182:	2300      	movs	r3, #0
 8006184:	617b      	str	r3, [r7, #20]
 8006186:	e003      	b.n	8006190 <_ZN7MAX66757RetardoEv+0x34>
	{
		__ASM("NOP");
 8006188:	bf00      	nop
	for(int i=0;i<delay;i+=5)
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	3305      	adds	r3, #5
 800618e:	617b      	str	r3, [r7, #20]
 8006190:	897b      	ldrh	r3, [r7, #10]
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	429a      	cmp	r2, r3
 8006196:	dbf7      	blt.n	8006188 <_ZN7MAX66757RetardoEv+0x2c>
	}

}
 8006198:	bf00      	nop
 800619a:	bf00      	nop
 800619c:	3718      	adds	r7, #24
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	431bde83 	.word	0x431bde83

080061a8 <_ZN7MAX66754InitEv>:
void MAX6675::Init()
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b088      	sub	sp, #32
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct =	{ 0 };
 80061b0:	f107 030c 	add.w	r3, r7, #12
 80061b4:	2200      	movs	r2, #0
 80061b6:	601a      	str	r2, [r3, #0]
 80061b8:	605a      	str	r2, [r3, #4]
 80061ba:	609a      	str	r2, [r3, #8]
 80061bc:	60da      	str	r2, [r3, #12]
 80061be:	611a      	str	r2, [r3, #16]

	HAL_GPIO_WritePin(GPIOA, CK_MAX_Pin | CS_MAX_Pin, GPIO_PIN_RESET);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	89da      	ldrh	r2, [r3, #14]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	8a1b      	ldrh	r3, [r3, #16]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	2200      	movs	r2, #0
 80061ce:	4619      	mov	r1, r3
 80061d0:	4820      	ldr	r0, [pc, #128]	@ (8006254 <_ZN7MAX66754InitEv+0xac>)
 80061d2:	f002 fbb5 	bl	8008940 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = DAT_MAX_Pin;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	899b      	ldrh	r3, [r3, #12]
 80061da:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80061dc:	2300      	movs	r3, #0
 80061de:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull =GPIO_PULLUP;//  GPIO_NOPULL;
 80061e0:	2301      	movs	r3, #1
 80061e2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(DAT_MAX_GPIO_Port, &GPIO_InitStruct);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f107 020c 	add.w	r2, r7, #12
 80061ec:	4611      	mov	r1, r2
 80061ee:	4618      	mov	r0, r3
 80061f0:	f002 fa0a 	bl	8008608 <HAL_GPIO_Init>

	/*Configure GPIO pins : CK_MAX_Pin CS_MAX_Pin */
	GPIO_InitStruct.Pin = CK_MAX_Pin | CS_MAX_Pin;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	89da      	ldrh	r2, [r3, #14]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	8a1b      	ldrh	r3, [r3, #16]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	b29b      	uxth	r3, r3
 8006200:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006202:	2301      	movs	r3, #1
 8006204:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006206:	2300      	movs	r3, #0
 8006208:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800620a:	2300      	movs	r3, #0
 800620c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800620e:	f107 030c 	add.w	r3, r7, #12
 8006212:	4619      	mov	r1, r3
 8006214:	480f      	ldr	r0, [pc, #60]	@ (8006254 <_ZN7MAX66754InitEv+0xac>)
 8006216:	f002 f9f7 	bl	8008608 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(CK_MAX_GPIO_Port, CK_MAX_Pin, GPIO_PinState::GPIO_PIN_RESET); //SACA UN 0 reloj
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6858      	ldr	r0, [r3, #4]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	89db      	ldrh	r3, [r3, #14]
 8006222:	2200      	movs	r2, #0
 8006224:	4619      	mov	r1, r3
 8006226:	f002 fb8b 	bl	8008940 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_MAX_GPIO_Port, CS_MAX_Pin, GPIO_PinState::GPIO_PIN_SET); //APAGA el modulo
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6898      	ldr	r0, [r3, #8]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	8a1b      	ldrh	r3, [r3, #16]
 8006232:	2201      	movs	r2, #1
 8006234:	4619      	mov	r1, r3
 8006236:	f002 fb83 	bl	8008940 <HAL_GPIO_WritePin>

	HAL_Delay(100);
 800623a:	2064      	movs	r0, #100	@ 0x64
 800623c:	f001 fd7a 	bl	8007d34 <HAL_Delay>
	TiempoTranscurrido = HAL_GetTick();
 8006240:	f001 fd6c 	bl	8007d1c <HAL_GetTick>
 8006244:	4603      	mov	r3, r0
 8006246:	461a      	mov	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	615a      	str	r2, [r3, #20]
}
 800624c:	bf00      	nop
 800624e:	3720      	adds	r7, #32
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	40020000 	.word	0x40020000

08006258 <_ZN3PwmC1Ev>:

#include <PWM/Pwm.hpp>
#include "stm32f4xx_hal.h"
#include "stdlib.h"

Pwm::Pwm()
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	4a04      	ldr	r2, [pc, #16]	@ (8006274 <_ZN3PwmC1Ev+0x1c>)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4618      	mov	r0, r3
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr
 8006274:	0800f7d8 	.word	0x0800f7d8

08006278 <_ZN3PwmD1Ev>:

Pwm::~Pwm()
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	4a04      	ldr	r2, [pc, #16]	@ (8006294 <_ZN3PwmD1Ev+0x1c>)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4618      	mov	r0, r3
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr
 8006294:	0800f7d8 	.word	0x0800f7d8

08006298 <_ZN3PwmD0Ev>:
Pwm::~Pwm()
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
}
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f7ff ffe9 	bl	8006278 <_ZN3PwmD1Ev>
 80062a6:	214c      	movs	r1, #76	@ 0x4c
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f005 fe65 	bl	800bf78 <_ZdlPvj>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4618      	mov	r0, r3
 80062b2:	3708      	adds	r7, #8
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <_ZN3Pwm4InitEP11TIM_TypeDefii>:
void Pwm::Init(TIM_TypeDef * timer, int chanel,int periodo)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b092      	sub	sp, #72	@ 0x48
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
 80062c4:	603b      	str	r3, [r7, #0]
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80062c6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80062ca:	2200      	movs	r2, #0
 80062cc:	601a      	str	r2, [r3, #0]
 80062ce:	605a      	str	r2, [r3, #4]
 80062d0:	609a      	str	r2, [r3, #8]
 80062d2:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80062d4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80062d8:	2200      	movs	r2, #0
 80062da:	601a      	str	r2, [r3, #0]
 80062dc:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 80062de:	f107 0314 	add.w	r3, r7, #20
 80062e2:	2200      	movs	r2, #0
 80062e4:	601a      	str	r2, [r3, #0]
 80062e6:	605a      	str	r2, [r3, #4]
 80062e8:	609a      	str	r2, [r3, #8]
 80062ea:	60da      	str	r2, [r3, #12]
 80062ec:	611a      	str	r2, [r3, #16]
 80062ee:	615a      	str	r2, [r3, #20]
 80062f0:	619a      	str	r2, [r3, #24]

	  Htim.Instance = timer;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	605a      	str	r2, [r3, #4]
	  Htim.Init.Prescaler = 0;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	609a      	str	r2, [r3, #8]
	  Htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	60da      	str	r2, [r3, #12]
	  Htim.Init.Period = periodo;
 8006304:	683a      	ldr	r2, [r7, #0]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	611a      	str	r2, [r3, #16]
	  Htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	615a      	str	r2, [r3, #20]
	  Htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2280      	movs	r2, #128	@ 0x80
 8006314:	61da      	str	r2, [r3, #28]
	  if (HAL_TIM_Base_Init(&Htim) != HAL_OK)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	3304      	adds	r3, #4
 800631a:	4618      	mov	r0, r3
 800631c:	f004 fa68 	bl	800a7f0 <HAL_TIM_Base_Init>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	bf14      	ite	ne
 8006326:	2301      	movne	r3, #1
 8006328:	2300      	moveq	r3, #0
 800632a:	b2db      	uxtb	r3, r3
 800632c:	2b00      	cmp	r3, #0
 800632e:	d002      	beq.n	8006336 <_ZN3Pwm4InitEP11TIM_TypeDefii+0x7e>
	  {
	    Error_Handler();
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f000 f883 	bl	800643c <_ZN3Pwm13Error_HandlerEv>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006336:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800633a:	63bb      	str	r3, [r7, #56]	@ 0x38
	  if (HAL_TIM_ConfigClockSource(&Htim, &sClockSourceConfig) != HAL_OK)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	3304      	adds	r3, #4
 8006340:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8006344:	4611      	mov	r1, r2
 8006346:	4618      	mov	r0, r3
 8006348:	f004 fdc0 	bl	800aecc <HAL_TIM_ConfigClockSource>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	bf14      	ite	ne
 8006352:	2301      	movne	r3, #1
 8006354:	2300      	moveq	r3, #0
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2b00      	cmp	r3, #0
 800635a:	d002      	beq.n	8006362 <_ZN3Pwm4InitEP11TIM_TypeDefii+0xaa>
	  {
	    Error_Handler();
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f000 f86d 	bl	800643c <_ZN3Pwm13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_Init(&Htim) != HAL_OK)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	3304      	adds	r3, #4
 8006366:	4618      	mov	r0, r3
 8006368:	f004 faf4 	bl	800a954 <HAL_TIM_PWM_Init>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	bf14      	ite	ne
 8006372:	2301      	movne	r3, #1
 8006374:	2300      	moveq	r3, #0
 8006376:	b2db      	uxtb	r3, r3
 8006378:	2b00      	cmp	r3, #0
 800637a:	d002      	beq.n	8006382 <_ZN3Pwm4InitEP11TIM_TypeDefii+0xca>
	  {
	    Error_Handler();
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f000 f85d 	bl	800643c <_ZN3Pwm13Error_HandlerEv>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006382:	2300      	movs	r3, #0
 8006384:	633b      	str	r3, [r7, #48]	@ 0x30
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006386:	2300      	movs	r3, #0
 8006388:	637b      	str	r3, [r7, #52]	@ 0x34
	  if (HAL_TIMEx_MasterConfigSynchronization(&Htim, &sMasterConfig) != HAL_OK)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	3304      	adds	r3, #4
 800638e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8006392:	4611      	mov	r1, r2
 8006394:	4618      	mov	r0, r3
 8006396:	f005 f961 	bl	800b65c <HAL_TIMEx_MasterConfigSynchronization>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	bf14      	ite	ne
 80063a0:	2301      	movne	r3, #1
 80063a2:	2300      	moveq	r3, #0
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d002      	beq.n	80063b0 <_ZN3Pwm4InitEP11TIM_TypeDefii+0xf8>
	  {
	    Error_Handler();
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f000 f846 	bl	800643c <_ZN3Pwm13Error_HandlerEv>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80063b0:	2360      	movs	r3, #96	@ 0x60
 80063b2:	617b      	str	r3, [r7, #20]
	  sConfigOC.Pulse = 0;
 80063b4:	2300      	movs	r3, #0
 80063b6:	61bb      	str	r3, [r7, #24]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80063b8:	2300      	movs	r3, #0
 80063ba:	61fb      	str	r3, [r7, #28]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80063bc:	2300      	movs	r3, #0
 80063be:	627b      	str	r3, [r7, #36]	@ 0x24
	  if (HAL_TIM_PWM_ConfigChannel(&Htim, &sConfigOC, chanel) != HAL_OK)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	3304      	adds	r3, #4
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	f107 0114 	add.w	r1, r7, #20
 80063ca:	4618      	mov	r0, r3
 80063cc:	f004 fcbc 	bl	800ad48 <HAL_TIM_PWM_ConfigChannel>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	bf14      	ite	ne
 80063d6:	2301      	movne	r3, #1
 80063d8:	2300      	moveq	r3, #0
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d002      	beq.n	80063e6 <_ZN3Pwm4InitEP11TIM_TypeDefii+0x12e>
	  {
	    Error_Handler();
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f000 f82b 	bl	800643c <_ZN3Pwm13Error_HandlerEv>
	  }
//	  HAL_TIM_MspPostInit(&Htim);
	HAL_TIM_PWM_Start(&Htim,chanel);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	3304      	adds	r3, #4
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	4611      	mov	r1, r2
 80063ee:	4618      	mov	r0, r3
 80063f0:	f004 fb0a 	bl	800aa08 <HAL_TIM_PWM_Start>
	SicloTrabajo(0);
 80063f4:	2100      	movs	r1, #0
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f000 f804 	bl	8006404 <_ZN3Pwm12SicloTrabajoEi>


//	__HAL_TIM_SET_COMPARE(&Htim, chanel, 500);
}
 80063fc:	bf00      	nop
 80063fe:	3748      	adds	r7, #72	@ 0x48
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <_ZN3Pwm12SicloTrabajoEi>:
void Pwm::SicloTrabajo(int siclo)
{
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
	// si 65535->100
	// x->siclo
	int valor=siclo*Htim.Init.Period/100;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	683a      	ldr	r2, [r7, #0]
 8006414:	fb02 f303 	mul.w	r3, r2, r3
 8006418:	4a07      	ldr	r2, [pc, #28]	@ (8006438 <_ZN3Pwm12SicloTrabajoEi+0x34>)
 800641a:	fba2 2303 	umull	r2, r3, r2, r3
 800641e:	095b      	lsrs	r3, r3, #5
 8006420:	60fb      	str	r3, [r7, #12]
	Htim.Instance->CCR1=valor;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800642a:	bf00      	nop
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	51eb851f 	.word	0x51eb851f

0800643c <_ZN3Pwm13Error_HandlerEv>:

void Pwm::Error_Handler(void)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]

}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <_ZN31CManejadorEventoSensorMagneticoC1Ev>:
 *      Author: W10
 */

#include <SensorMagnetico/CManejadorEventoSensorMagnetico.hpp>

CManejadorEventoSensorMagnetico::CManejadorEventoSensorMagnetico()
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	4a04      	ldr	r2, [pc, #16]	@ (800646c <_ZN31CManejadorEventoSensorMagneticoC1Ev+0x1c>)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4618      	mov	r0, r3
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	0800f7e8 	.word	0x0800f7e8

08006470 <_ZN31CManejadorEventoSensorMagneticoD1Ev>:

CManejadorEventoSensorMagnetico::~CManejadorEventoSensorMagnetico()
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	4a04      	ldr	r2, [pc, #16]	@ (800648c <_ZN31CManejadorEventoSensorMagneticoD1Ev+0x1c>)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4618      	mov	r0, r3
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr
 800648c:	0800f7e8 	.word	0x0800f7e8

08006490 <_ZN31CManejadorEventoSensorMagneticoD0Ev>:
CManejadorEventoSensorMagnetico::~CManejadorEventoSensorMagnetico()
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
}
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f7ff ffe9 	bl	8006470 <_ZN31CManejadorEventoSensorMagneticoD1Ev>
 800649e:	2104      	movs	r1, #4
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f005 fd69 	bl	800bf78 <_ZdlPvj>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4618      	mov	r0, r3
 80064aa:	3708      	adds	r7, #8
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <_ZN31CManejadorEventoSensorMagnetico23OnSensorMagneticoChangeEi>:
void CManejadorEventoSensorMagnetico::OnSensorMagneticoChange(int Estado)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
	//evento que se llama cuando cambia el estado del sensor
}
 80064ba:	bf00      	nop
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
	...

080064c8 <_ZN15SensorMagneticoC1Ev>:
		SerialPrintf("\r\nTemperatura: %d intento = %d",temperatura,n);
		HAL_Delay(1000);
	}
}
*/
SensorMagnetico::SensorMagnetico()
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	4a0a      	ldr	r2, [pc, #40]	@ (80064fc <_ZN15SensorMagneticoC1Ev+0x34>)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	601a      	str	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	60da      	str	r2, [r3, #12]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	611a      	str	r2, [r3, #16]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	615a      	str	r2, [r3, #20]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	619a      	str	r2, [r3, #24]
{
	// TODO Auto-generated constructor stub

}
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4618      	mov	r0, r3
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	0800f7fc 	.word	0x0800f7fc

08006500 <_ZN15SensorMagneticoD1Ev>:

SensorMagnetico::~SensorMagnetico()
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	4a04      	ldr	r2, [pc, #16]	@ (800651c <_ZN15SensorMagneticoD1Ev+0x1c>)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4618      	mov	r0, r3
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr
 800651c:	0800f7fc 	.word	0x0800f7fc

08006520 <_ZN15SensorMagneticoD0Ev>:
SensorMagnetico::~SensorMagnetico()
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
}
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f7ff ffe9 	bl	8006500 <_ZN15SensorMagneticoD1Ev>
 800652e:	211c      	movs	r1, #28
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f005 fd21 	bl	800bf78 <_ZdlPvj>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4618      	mov	r0, r3
 800653a:	3708      	adds	r7, #8
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <_ZN15SensorMagnetico10ConfigurarEP12GPIO_TypeDeft>:

void SensorMagnetico::Configurar(GPIO_TypeDef *puerto, uint16_t pin)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	4613      	mov	r3, r2
 800654c:	80fb      	strh	r3, [r7, #6]
	GPIO_Port = puerto;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	605a      	str	r2, [r3, #4]
	Gpio_Pin = pin;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	88fa      	ldrh	r2, [r7, #6]
 8006558:	811a      	strh	r2, [r3, #8]

}
 800655a:	bf00      	nop
 800655c:	3714      	adds	r7, #20
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr

08006566 <_ZN15SensorMagnetico4InitEv>:
void SensorMagnetico::Init()
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b088      	sub	sp, #32
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 800656e:	f107 030c 	add.w	r3, r7, #12
 8006572:	2200      	movs	r2, #0
 8006574:	601a      	str	r2, [r3, #0]
 8006576:	605a      	str	r2, [r3, #4]
 8006578:	609a      	str	r2, [r3, #8]
 800657a:	60da      	str	r2, [r3, #12]
 800657c:	611a      	str	r2, [r3, #16]
	{ 0 };
	GPIO_InitStruct.Pin = Gpio_Pin;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	891b      	ldrh	r3, [r3, #8]
 8006582:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006584:	2300      	movs	r3, #0
 8006586:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006588:	2301      	movs	r3, #1
 800658a:	617b      	str	r3, [r7, #20]
	//PruebaTempratura(0);
	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f107 020c 	add.w	r2, r7, #12
 8006594:	4611      	mov	r1, r2
 8006596:	4618      	mov	r0, r3
 8006598:	f002 f836 	bl	8008608 <HAL_GPIO_Init>
}
 800659c:	bf00      	nop
 800659e:	3720      	adds	r7, #32
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <_ZN15SensorMagnetico22AsignaManejadorEventosEP31CManejadorEventoSensorMagnetico>:
void SensorMagnetico::AsignaManejadorEventos(
		CManejadorEventoSensorMagnetico *manejador)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
	Manejador = manejador;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	683a      	ldr	r2, [r7, #0]
 80065b2:	60da      	str	r2, [r3, #12]

}
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <_ZN15SensorMagnetico4LeerEv>:
int SensorMagnetico::Leer()
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(GPIO_Port, Gpio_Pin); // lee el pin
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	891b      	ldrh	r3, [r3, #8]
 80065d0:	4619      	mov	r1, r3
 80065d2:	4610      	mov	r0, r2
 80065d4:	f002 f99c 	bl	8008910 <HAL_GPIO_ReadPin>
 80065d8:	4603      	mov	r3, r0

}
 80065da:	4618      	mov	r0, r3
 80065dc:	3708      	adds	r7, #8
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
	...

080065e4 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type>:

#include "Timer.hpp"
#include<stdbool.h>

bool CTimer::Init(TIM_TypeDef* TimInstance, uint32_t periodo, 	IRQn_Type Tim_Irq)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b08c      	sub	sp, #48	@ 0x30
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
 80065f0:	70fb      	strb	r3, [r7, #3]
	Periodo = periodo;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	64da      	str	r2, [r3, #76]	@ 0x4c
	__HAL_RCC_TIM3_CLK_ENABLE();
 80065f8:	2300      	movs	r3, #0
 80065fa:	617b      	str	r3, [r7, #20]
 80065fc:	4b3b      	ldr	r3, [pc, #236]	@ (80066ec <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x108>)
 80065fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006600:	4a3a      	ldr	r2, [pc, #232]	@ (80066ec <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x108>)
 8006602:	f043 0302 	orr.w	r3, r3, #2
 8006606:	6413      	str	r3, [r2, #64]	@ 0x40
 8006608:	4b38      	ldr	r3, [pc, #224]	@ (80066ec <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x108>)
 800660a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800660c:	f003 0302 	and.w	r3, r3, #2
 8006610:	617b      	str	r3, [r7, #20]
 8006612:	697b      	ldr	r3, [r7, #20]
	HTim.Instance = TimInstance;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	68ba      	ldr	r2, [r7, #8]
 8006618:	601a      	str	r2, [r3, #0]
	HTim.Init.CounterMode = TIM_COUNTERMODE_UP;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	609a      	str	r2, [r3, #8]
	HTim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	611a      	str	r2, [r3, #16]
	//la siguiente configuracion es para que me de un tiempo de 83.3 micro segundos para generar la interrupcion
	
	HTim.Init.Period = 3350-1;//3000 - 1; //8399
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f640 5215 	movw	r2, #3349	@ 0xd15
 800662c:	60da      	str	r2, [r3, #12]
	HTim.Init.Prescaler = (Periodo * 1) - 1;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006632:	1e5a      	subs	r2, r3, #1
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	605a      	str	r2, [r3, #4]
	HTim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	619a      	str	r2, [r3, #24]
	HTim.Init.RepetitionCounter = 0;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&HTim) != HAL_OK)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	4618      	mov	r0, r3
 8006648:	f004 f8d2 	bl	800a7f0 <HAL_TIM_Base_Init>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	bf14      	ite	ne
 8006652:	2301      	movne	r3, #1
 8006654:	2300      	moveq	r3, #0
 8006656:	b2db      	uxtb	r3, r3
 8006658:	2b00      	cmp	r3, #0
 800665a:	d001      	beq.n	8006660 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x7c>
	{
		return false;
 800665c:	2300      	movs	r3, #0
 800665e:	e041      	b.n	80066e4 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x100>
	}

	TIM_ClockConfigTypeDef TimClock =
 8006660:	f107 0320 	add.w	r3, r7, #32
 8006664:	2200      	movs	r2, #0
 8006666:	601a      	str	r2, [r3, #0]
 8006668:	605a      	str	r2, [r3, #4]
 800666a:	609a      	str	r2, [r3, #8]
 800666c:	60da      	str	r2, [r3, #12]
	{ 0 };
	TimClock.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800666e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006672:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_ConfigClockSource(&HTim, &TimClock) != HAL_OK)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f107 0220 	add.w	r2, r7, #32
 800667a:	4611      	mov	r1, r2
 800667c:	4618      	mov	r0, r3
 800667e:	f004 fc25 	bl	800aecc <HAL_TIM_ConfigClockSource>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	bf14      	ite	ne
 8006688:	2301      	movne	r3, #1
 800668a:	2300      	moveq	r3, #0
 800668c:	b2db      	uxtb	r3, r3
 800668e:	2b00      	cmp	r3, #0
 8006690:	d001      	beq.n	8006696 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0xb2>
	{
		return false;
 8006692:	2300      	movs	r3, #0
 8006694:	e026      	b.n	80066e4 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x100>
	}

	TIM_MasterConfigTypeDef TimMaster =
 8006696:	f107 0318 	add.w	r3, r7, #24
 800669a:	2200      	movs	r2, #0
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	605a      	str	r2, [r3, #4]
	{ 0 };
	TimMaster.MasterSlaveMode = TIM_SLAVEMODE_DISABLE;
 80066a0:	2300      	movs	r3, #0
 80066a2:	61fb      	str	r3, [r7, #28]
	TimMaster.MasterOutputTrigger = TIM_TRGO_RESET;
 80066a4:	2300      	movs	r3, #0
 80066a6:	61bb      	str	r3, [r7, #24]
	if (HAL_TIMEx_MasterConfigSynchronization(&HTim, &TimMaster) != HAL_OK)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f107 0218 	add.w	r2, r7, #24
 80066ae:	4611      	mov	r1, r2
 80066b0:	4618      	mov	r0, r3
 80066b2:	f004 ffd3 	bl	800b65c <HAL_TIMEx_MasterConfigSynchronization>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	bf14      	ite	ne
 80066bc:	2301      	movne	r3, #1
 80066be:	2300      	moveq	r3, #0
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0xe6>
	{
		return false;
 80066c6:	2300      	movs	r3, #0
 80066c8:	e00c      	b.n	80066e4 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x100>
	}

	HAL_NVIC_SetPriority(Tim_Irq, 5, 0);
 80066ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066ce:	2200      	movs	r2, #0
 80066d0:	2105      	movs	r1, #5
 80066d2:	4618      	mov	r0, r3
 80066d4:	f001 ff61 	bl	800859a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(Tim_Irq);
 80066d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066dc:	4618      	mov	r0, r3
 80066de:	f001 ff78 	bl	80085d2 <HAL_NVIC_EnableIRQ>
	return true;
 80066e2:	2301      	movs	r3, #1
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3730      	adds	r7, #48	@ 0x30
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	40023800 	.word	0x40023800

080066f0 <_Z11uartx_writec>:
#include "string.h"
#include "stm32f4xx_hal.h"
UART_HandleTypeDef Huart1;

void uartx_write(char ch)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	4603      	mov	r3, r0
 80066f8:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&Huart1,(uint8_t*) &ch, 1, 0xffff);
 80066fa:	1df9      	adds	r1, r7, #7
 80066fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006700:	2201      	movs	r2, #1
 8006702:	4803      	ldr	r0, [pc, #12]	@ (8006710 <_Z11uartx_writec+0x20>)
 8006704:	f005 f87c 	bl	800b800 <HAL_UART_Transmit>

}
 8006708:	bf00      	nop
 800670a:	3708      	adds	r7, #8
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	200001f4 	.word	0x200001f4

08006714 <_Z16uartx_write_textPc>:

void uartx_write_text(char *info)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]

	while(*info)  uartx_write(*info++);
 800671c:	e006      	b.n	800672c <_Z16uartx_write_textPc+0x18>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	1c5a      	adds	r2, r3, #1
 8006722:	607a      	str	r2, [r7, #4]
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	4618      	mov	r0, r3
 8006728:	f7ff ffe2 	bl	80066f0 <_Z11uartx_writec>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1f4      	bne.n	800671e <_Z16uartx_write_textPc+0xa>

}
 8006734:	bf00      	nop
 8006736:	bf00      	nop
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
	...

08006740 <_Z16USART1_UART_Initv>:
	}
}

//static
void USART1_UART_Init(void)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	Huart1.Instance = USART1;
 8006744:	4b13      	ldr	r3, [pc, #76]	@ (8006794 <_Z16USART1_UART_Initv+0x54>)
 8006746:	4a14      	ldr	r2, [pc, #80]	@ (8006798 <_Z16USART1_UART_Initv+0x58>)
 8006748:	601a      	str	r2, [r3, #0]
	Huart1.Init.BaudRate = 115200;
 800674a:	4b12      	ldr	r3, [pc, #72]	@ (8006794 <_Z16USART1_UART_Initv+0x54>)
 800674c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006750:	605a      	str	r2, [r3, #4]
	Huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006752:	4b10      	ldr	r3, [pc, #64]	@ (8006794 <_Z16USART1_UART_Initv+0x54>)
 8006754:	2200      	movs	r2, #0
 8006756:	609a      	str	r2, [r3, #8]
	Huart1.Init.StopBits = UART_STOPBITS_1;
 8006758:	4b0e      	ldr	r3, [pc, #56]	@ (8006794 <_Z16USART1_UART_Initv+0x54>)
 800675a:	2200      	movs	r2, #0
 800675c:	60da      	str	r2, [r3, #12]
	Huart1.Init.Parity = UART_PARITY_NONE;
 800675e:	4b0d      	ldr	r3, [pc, #52]	@ (8006794 <_Z16USART1_UART_Initv+0x54>)
 8006760:	2200      	movs	r2, #0
 8006762:	611a      	str	r2, [r3, #16]
	Huart1.Init.Mode = UART_MODE_TX_RX;
 8006764:	4b0b      	ldr	r3, [pc, #44]	@ (8006794 <_Z16USART1_UART_Initv+0x54>)
 8006766:	220c      	movs	r2, #12
 8006768:	615a      	str	r2, [r3, #20]
	Huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800676a:	4b0a      	ldr	r3, [pc, #40]	@ (8006794 <_Z16USART1_UART_Initv+0x54>)
 800676c:	2200      	movs	r2, #0
 800676e:	619a      	str	r2, [r3, #24]
	Huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006770:	4b08      	ldr	r3, [pc, #32]	@ (8006794 <_Z16USART1_UART_Initv+0x54>)
 8006772:	2200      	movs	r2, #0
 8006774:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&Huart1) != HAL_OK)
 8006776:	4807      	ldr	r0, [pc, #28]	@ (8006794 <_Z16USART1_UART_Initv+0x54>)
 8006778:	f004 fff2 	bl	800b760 <HAL_UART_Init>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	bf14      	ite	ne
 8006782:	2301      	movne	r3, #1
 8006784:	2300      	moveq	r3, #0
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b00      	cmp	r3, #0
 800678a:	d001      	beq.n	8006790 <_Z16USART1_UART_Initv+0x50>
	{
		ErrorHandler();
 800678c:	f000 f806 	bl	800679c <_Z12ErrorHandlerv>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8006790:	bf00      	nop
 8006792:	bd80      	pop	{r7, pc}
 8006794:	200001f4 	.word	0x200001f4
 8006798:	40011000 	.word	0x40011000

0800679c <_Z12ErrorHandlerv>:
void ErrorHandler(void)
{
 800679c:	b480      	push	{r7}
 800679e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80067a0:	b672      	cpsid	i
}
 80067a2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80067a4:	bf00      	nop
 80067a6:	e7fd      	b.n	80067a4 <_Z12ErrorHandlerv+0x8>

080067a8 <_Z12SerialPrintfPcz>:
	{
	}
	/* USER CODE END Error_Handler_Debug */
}
void SerialPrintf(char * formato, ...)
{
 80067a8:	b40f      	push	{r0, r1, r2, r3}
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b0be      	sub	sp, #248	@ 0xf8
 80067ae:	af00      	add	r7, sp, #0

    char *p;
    char buffer[100];

    char formatoFlotante[20];
    int posisionFormato=0;
 80067b0:	2300      	movs	r3, #0
 80067b2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    char tmp[100];
    int postmp=0;
 80067b6:	2300      	movs	r3, #0
 80067b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    int posbuffer = 0;
 80067bc:	2300      	movs	r3, #0
 80067be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    va_list pa;
    int encontrado=0;
 80067c2:	2300      	movs	r3, #0
 80067c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    //float a;
    va_start(pa, formato);
 80067c8:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80067cc:	607b      	str	r3, [r7, #4]
    for (p = formato; *p; p++)
 80067ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80067d2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80067d6:	e143      	b.n	8006a60 <_Z12SerialPrintfPcz+0x2b8>
    {

      if (*p != '%')
 80067d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	2b25      	cmp	r3, #37	@ 0x25
 80067e0:	d00f      	beq.n	8006802 <_Z12SerialPrintfPcz+0x5a>
      {
        buffer[posbuffer] = *p;
 80067e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067e6:	7819      	ldrb	r1, [r3, #0]
 80067e8:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 80067ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80067f0:	4413      	add	r3, r2
 80067f2:	460a      	mov	r2, r1
 80067f4:	701a      	strb	r2, [r3, #0]
        posbuffer++;
 80067f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80067fa:	3301      	adds	r3, #1
 80067fc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
        continue;
 8006800:	e129      	b.n	8006a56 <_Z12SerialPrintfPcz+0x2ae>
      }
      encontrado=0;
 8006802:	2300      	movs	r3, #0
 8006804:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      switch (*++p)
 8006808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800680c:	3301      	adds	r3, #1
 800680e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	2b2e      	cmp	r3, #46	@ 0x2e
 800681a:	f000 80a3 	beq.w	8006964 <_Z12SerialPrintfPcz+0x1bc>
 800681e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006820:	f2c0 80e2 	blt.w	80069e8 <_Z12SerialPrintfPcz+0x240>
 8006824:	2b78      	cmp	r3, #120	@ 0x78
 8006826:	f300 80df 	bgt.w	80069e8 <_Z12SerialPrintfPcz+0x240>
 800682a:	2b63      	cmp	r3, #99	@ 0x63
 800682c:	f2c0 80dc 	blt.w	80069e8 <_Z12SerialPrintfPcz+0x240>
 8006830:	3b63      	subs	r3, #99	@ 0x63
 8006832:	2b15      	cmp	r3, #21
 8006834:	f200 80d8 	bhi.w	80069e8 <_Z12SerialPrintfPcz+0x240>
 8006838:	a201      	add	r2, pc, #4	@ (adr r2, 8006840 <_Z12SerialPrintfPcz+0x98>)
 800683a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800683e:	bf00      	nop
 8006840:	08006909 	.word	0x08006909
 8006844:	08006899 	.word	0x08006899
 8006848:	080069e9 	.word	0x080069e9
 800684c:	08006925 	.word	0x08006925
 8006850:	080069e9 	.word	0x080069e9
 8006854:	080069e9 	.word	0x080069e9
 8006858:	080068b5 	.word	0x080068b5
 800685c:	080069e9 	.word	0x080069e9
 8006860:	080069e9 	.word	0x080069e9
 8006864:	080069e9 	.word	0x080069e9
 8006868:	080069e9 	.word	0x080069e9
 800686c:	080069e9 	.word	0x080069e9
 8006870:	080069e9 	.word	0x080069e9
 8006874:	080068ed 	.word	0x080068ed
 8006878:	080069e9 	.word	0x080069e9
 800687c:	080069e9 	.word	0x080069e9
 8006880:	08006949 	.word	0x08006949
 8006884:	080069e9 	.word	0x080069e9
 8006888:	080069e9 	.word	0x080069e9
 800688c:	080069e9 	.word	0x080069e9
 8006890:	080069e9 	.word	0x080069e9
 8006894:	080068d1 	.word	0x080068d1
      {
        case 'd':
          sprintf(tmp, "%d", va_arg(pa, int));
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	1d1a      	adds	r2, r3, #4
 800689c:	607a      	str	r2, [r7, #4]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	f107 0308 	add.w	r3, r7, #8
 80068a4:	497b      	ldr	r1, [pc, #492]	@ (8006a94 <_Z12SerialPrintfPcz+0x2ec>)
 80068a6:	4618      	mov	r0, r3
 80068a8:	f006 f964 	bl	800cb74 <siprintf>
          encontrado=1;
 80068ac:	2301      	movs	r3, #1
 80068ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 80068b2:	e0a9      	b.n	8006a08 <_Z12SerialPrintfPcz+0x260>
        case 'i':
          sprintf(tmp, "%i", va_arg(pa, int));
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	1d1a      	adds	r2, r3, #4
 80068b8:	607a      	str	r2, [r7, #4]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	f107 0308 	add.w	r3, r7, #8
 80068c0:	4975      	ldr	r1, [pc, #468]	@ (8006a98 <_Z12SerialPrintfPcz+0x2f0>)
 80068c2:	4618      	mov	r0, r3
 80068c4:	f006 f956 	bl	800cb74 <siprintf>
          encontrado=1;
 80068c8:	2301      	movs	r3, #1
 80068ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 80068ce:	e09b      	b.n	8006a08 <_Z12SerialPrintfPcz+0x260>
        case 'x':
          sprintf(tmp, "%x", va_arg(pa, int));
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	1d1a      	adds	r2, r3, #4
 80068d4:	607a      	str	r2, [r7, #4]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	f107 0308 	add.w	r3, r7, #8
 80068dc:	496f      	ldr	r1, [pc, #444]	@ (8006a9c <_Z12SerialPrintfPcz+0x2f4>)
 80068de:	4618      	mov	r0, r3
 80068e0:	f006 f948 	bl	800cb74 <siprintf>
          encontrado=1;
 80068e4:	2301      	movs	r3, #1
 80068e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 80068ea:	e08d      	b.n	8006a08 <_Z12SerialPrintfPcz+0x260>
        case 'p':
          sprintf(tmp, "%p", va_arg(pa, void*));
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	1d1a      	adds	r2, r3, #4
 80068f0:	607a      	str	r2, [r7, #4]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	f107 0308 	add.w	r3, r7, #8
 80068f8:	4969      	ldr	r1, [pc, #420]	@ (8006aa0 <_Z12SerialPrintfPcz+0x2f8>)
 80068fa:	4618      	mov	r0, r3
 80068fc:	f006 f93a 	bl	800cb74 <siprintf>
          encontrado=1;
 8006900:	2301      	movs	r3, #1
 8006902:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 8006906:	e07f      	b.n	8006a08 <_Z12SerialPrintfPcz+0x260>
        case 'c':
          sprintf(tmp, "%c", va_arg(pa, int));
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	1d1a      	adds	r2, r3, #4
 800690c:	607a      	str	r2, [r7, #4]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	f107 0308 	add.w	r3, r7, #8
 8006914:	4963      	ldr	r1, [pc, #396]	@ (8006aa4 <_Z12SerialPrintfPcz+0x2fc>)
 8006916:	4618      	mov	r0, r3
 8006918:	f006 f92c 	bl	800cb74 <siprintf>
          encontrado=1;
 800691c:	2301      	movs	r3, #1
 800691e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 8006922:	e071      	b.n	8006a08 <_Z12SerialPrintfPcz+0x260>
        case 'f':
          sprintf(tmp, "%f", va_arg(pa, double));
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	3307      	adds	r3, #7
 8006928:	f023 0307 	bic.w	r3, r3, #7
 800692c:	f103 0208 	add.w	r2, r3, #8
 8006930:	607a      	str	r2, [r7, #4]
 8006932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006936:	f107 0008 	add.w	r0, r7, #8
 800693a:	495b      	ldr	r1, [pc, #364]	@ (8006aa8 <_Z12SerialPrintfPcz+0x300>)
 800693c:	f006 f91a 	bl	800cb74 <siprintf>
          encontrado=1;
 8006940:	2301      	movs	r3, #1
 8006942:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 8006946:	e05f      	b.n	8006a08 <_Z12SerialPrintfPcz+0x260>
        case 's':
          sprintf(tmp, "%s", va_arg(pa, char *));
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	1d1a      	adds	r2, r3, #4
 800694c:	607a      	str	r2, [r7, #4]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	f107 0308 	add.w	r3, r7, #8
 8006954:	4955      	ldr	r1, [pc, #340]	@ (8006aac <_Z12SerialPrintfPcz+0x304>)
 8006956:	4618      	mov	r0, r3
 8006958:	f006 f90c 	bl	800cb74 <siprintf>
          encontrado=1;
 800695c:	2301      	movs	r3, #1
 800695e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 8006962:	e051      	b.n	8006a08 <_Z12SerialPrintfPcz+0x260>
        case '.':
        	//asume que es flotante con decimales definidos
        	formatoFlotante[0]='%';
 8006964:	2325      	movs	r3, #37	@ 0x25
 8006966:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
        	posisionFormato=1;
 800696a:	2301      	movs	r3, #1
 800696c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
        	while(*p!='f')
 8006970:	e013      	b.n	800699a <_Z12SerialPrintfPcz+0x1f2>
        	{
        		formatoFlotante[posisionFormato]=*p;
 8006972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006976:	7819      	ldrb	r1, [r3, #0]
 8006978:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800697c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006980:	4413      	add	r3, r2
 8006982:	460a      	mov	r2, r1
 8006984:	701a      	strb	r2, [r3, #0]
        		p++;
 8006986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800698a:	3301      	adds	r3, #1
 800698c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
        		posisionFormato++;
 8006990:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006994:	3301      	adds	r3, #1
 8006996:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
        	while(*p!='f')
 800699a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	2b66      	cmp	r3, #102	@ 0x66
 80069a2:	d1e6      	bne.n	8006972 <_Z12SerialPrintfPcz+0x1ca>
        	}
        	formatoFlotante[posisionFormato]='f';
 80069a4:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80069a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80069ac:	4413      	add	r3, r2
 80069ae:	2266      	movs	r2, #102	@ 0x66
 80069b0:	701a      	strb	r2, [r3, #0]
        	formatoFlotante[posisionFormato+1]='\0';
 80069b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80069b6:	3301      	adds	r3, #1
 80069b8:	33f8      	adds	r3, #248	@ 0xf8
 80069ba:	443b      	add	r3, r7
 80069bc:	2200      	movs	r2, #0
 80069be:	f803 2c8c 	strb.w	r2, [r3, #-140]
            sprintf(tmp, formatoFlotante, va_arg(pa, double));
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	3307      	adds	r3, #7
 80069c6:	f023 0307 	bic.w	r3, r3, #7
 80069ca:	f103 0208 	add.w	r2, r3, #8
 80069ce:	607a      	str	r2, [r7, #4]
 80069d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d4:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80069d8:	f107 0008 	add.w	r0, r7, #8
 80069dc:	f006 f8ca 	bl	800cb74 <siprintf>
            encontrado=1;
 80069e0:	2301      	movs	r3, #1
 80069e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
            break;
 80069e6:	e00f      	b.n	8006a08 <_Z12SerialPrintfPcz+0x260>
        default:
          buffer[posbuffer] = *p;
 80069e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069ec:	7819      	ldrb	r1, [r3, #0]
 80069ee:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 80069f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80069f6:	4413      	add	r3, r2
 80069f8:	460a      	mov	r2, r1
 80069fa:	701a      	strb	r2, [r3, #0]
          posbuffer++;
 80069fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006a00:	3301      	adds	r3, #1
 8006a02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
          break;
 8006a06:	bf00      	nop
      }
      if(encontrado==1)
 8006a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d122      	bne.n	8006a56 <_Z12SerialPrintfPcz+0x2ae>
      {
          postmp=0;
 8006a10:	2300      	movs	r3, #0
 8006a12:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
          while(tmp[postmp]!='\0')
 8006a16:	e016      	b.n	8006a46 <_Z12SerialPrintfPcz+0x29e>
          {
          buffer[posbuffer] = tmp[postmp];
 8006a18:	f107 0208 	add.w	r2, r7, #8
 8006a1c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006a20:	4413      	add	r3, r2
 8006a22:	7819      	ldrb	r1, [r3, #0]
 8006a24:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8006a28:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006a2c:	4413      	add	r3, r2
 8006a2e:	460a      	mov	r2, r1
 8006a30:	701a      	strb	r2, [r3, #0]
          posbuffer++;
 8006a32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006a36:	3301      	adds	r3, #1
 8006a38:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
          postmp++;
 8006a3c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006a40:	3301      	adds	r3, #1
 8006a42:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
          while(tmp[postmp]!='\0')
 8006a46:	f107 0208 	add.w	r2, r7, #8
 8006a4a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006a4e:	4413      	add	r3, r2
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1e0      	bne.n	8006a18 <_Z12SerialPrintfPcz+0x270>
    for (p = formato; *p; p++)
 8006a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f47f aeb6 	bne.w	80067d8 <_Z12SerialPrintfPcz+0x30>
          }
      }
    }
    va_end(pa);
    buffer[posbuffer] = '\0';
 8006a6c:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8006a70:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006a74:	4413      	add	r3, r2
 8006a76:	2200      	movs	r2, #0
 8006a78:	701a      	strb	r2, [r3, #0]
    uartx_write_text(buffer);
 8006a7a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7ff fe48 	bl	8006714 <_Z16uartx_write_textPc>
}
 8006a84:	bf00      	nop
 8006a86:	37f8      	adds	r7, #248	@ 0xf8
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a8e:	b004      	add	sp, #16
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	0800edf0 	.word	0x0800edf0
 8006a98:	0800edf4 	.word	0x0800edf4
 8006a9c:	0800edf8 	.word	0x0800edf8
 8006aa0:	0800edfc 	.word	0x0800edfc
 8006aa4:	0800ee00 	.word	0x0800ee00
 8006aa8:	0800ee04 	.word	0x0800ee04
 8006aac:	0800ee08 	.word	0x0800ee08

08006ab0 <_ZN6CTimerC1Ev>:
#define INC_TIMER_HPP_

#include "main.h"
#include <stdio.h>
#include<stdbool.h>
class CTimer
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <_Z16IncializaSistemav>:
CestacionBaku601 *estacion;
//TIM_HandleTypeDef htim2;
CManejadorPantallas ManejadorPantallas;
CManejadorControles *ManejadorControles;
void IncializaSistema()
{
 8006acc:	b590      	push	{r4, r7, lr}
 8006ace:	b095      	sub	sp, #84	@ 0x54
 8006ad0:	af00      	add	r7, sp, #0
	USART1_UART_Init();
 8006ad2:	f7ff fe35 	bl	8006740 <_Z16USART1_UART_Initv>
	CTimer timer;
 8006ad6:	463b      	mov	r3, r7
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7ff ffe9 	bl	8006ab0 <_ZN6CTimerC1Ev>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006ade:	2200      	movs	r2, #0
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	2028      	movs	r0, #40	@ 0x28
 8006ae4:	f001 fd59 	bl	800859a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006ae8:	2028      	movs	r0, #40	@ 0x28
 8006aea:	f001 fd72 	bl	80085d2 <HAL_NVIC_EnableIRQ>

	//PruebaTempratura(0);
	estacion = new CestacionBaku601();
 8006aee:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8006af2:	f005 fa43 	bl	800bf7c <_Znwj>
 8006af6:	4603      	mov	r3, r0
 8006af8:	461c      	mov	r4, r3
 8006afa:	4620      	mov	r0, r4
 8006afc:	f7fa ff94 	bl	8001a28 <_ZN16CestacionBaku601C1Ev>
 8006b00:	4b0f      	ldr	r3, [pc, #60]	@ (8006b40 <_Z16IncializaSistemav+0x74>)
 8006b02:	601c      	str	r4, [r3, #0]
	ManejadorControles=new CManejadorControles();
 8006b04:	f44f 7092 	mov.w	r0, #292	@ 0x124
 8006b08:	f005 fa38 	bl	800bf7c <_Znwj>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	461c      	mov	r4, r3
 8006b10:	4620      	mov	r0, r4
 8006b12:	f7fe ff47 	bl	80059a4 <_ZN19CManejadorControlesC1Ev>
 8006b16:	4b0b      	ldr	r3, [pc, #44]	@ (8006b44 <_Z16IncializaSistemav+0x78>)
 8006b18:	601c      	str	r4, [r3, #0]
	ILI9341_Init(); //initial driver setup to drive ili9341
 8006b1a:	f7fe fba3 	bl	8005264 <_Z12ILI9341_Initv>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8006b1e:	2003      	movs	r0, #3
 8006b20:	f7fe fb42 	bl	80051a8 <_Z20ILI9341_Set_Rotationh>
	ILI9341_Fill_Screen(BLACK);
 8006b24:	2000      	movs	r0, #0
 8006b26:	f7fe fd45 	bl	80055b4 <_Z19ILI9341_Fill_Screent>
	//nicio eltimer
	timer.Init(TIM3, 1,  TIM3_IRQn);
 8006b2a:	4638      	mov	r0, r7
 8006b2c:	231d      	movs	r3, #29
 8006b2e:	2201      	movs	r2, #1
 8006b30:	4905      	ldr	r1, [pc, #20]	@ (8006b48 <_Z16IncializaSistemav+0x7c>)
 8006b32:	f7ff fd57 	bl	80065e4 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type>

}
 8006b36:	bf00      	nop
 8006b38:	3754      	adds	r7, #84	@ 0x54
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd90      	pop	{r4, r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	2000023c 	.word	0x2000023c
 8006b44:	2000026c 	.word	0x2000026c
 8006b48:	40000400 	.word	0x40000400

08006b4c <_Z14EjecutaSistemav>:

void EjecutaSistema()
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
	int n=0;
 8006b52:	2300      	movs	r3, #0
 8006b54:	607b      	str	r3, [r7, #4]
//	PruebaTempratura(0);
	ManejadorPantallas.SetEstacion(estacion);
 8006b56:	4b11      	ldr	r3, [pc, #68]	@ (8006b9c <_Z14EjecutaSistemav+0x50>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	4810      	ldr	r0, [pc, #64]	@ (8006ba0 <_Z14EjecutaSistemav+0x54>)
 8006b5e:	f7fc fbe9 	bl	8003334 <_ZN19CManejadorPantallas11SetEstacionEP13CEstacionBase>
	ManejadorPantallas.SetManejadorControles(ManejadorControles);
 8006b62:	4b10      	ldr	r3, [pc, #64]	@ (8006ba4 <_Z14EjecutaSistemav+0x58>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4619      	mov	r1, r3
 8006b68:	480d      	ldr	r0, [pc, #52]	@ (8006ba0 <_Z14EjecutaSistemav+0x54>)
 8006b6a:	f7fc fc95 	bl	8003498 <_ZN19CManejadorPantallas21SetManejadorControlesEP19CManejadorControles>
	ManejadorPantallas.MuestraPantallaManual();
 8006b6e:	480c      	ldr	r0, [pc, #48]	@ (8006ba0 <_Z14EjecutaSistemav+0x54>)
 8006b70:	f7fc fbee 	bl	8003350 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
	while (true)
	{
		n++;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	3301      	adds	r3, #1
 8006b78:	607b      	str	r3, [r7, #4]
		estacion->Procesa();
 8006b7a:	4b08      	ldr	r3, [pc, #32]	@ (8006b9c <_Z14EjecutaSistemav+0x50>)
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	4b07      	ldr	r3, [pc, #28]	@ (8006b9c <_Z14EjecutaSistemav+0x50>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	3330      	adds	r3, #48	@ 0x30
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4610      	mov	r0, r2
 8006b8a:	4798      	blx	r3
		ManejadorPantallas.RefrescaPantalla();
 8006b8c:	4804      	ldr	r0, [pc, #16]	@ (8006ba0 <_Z14EjecutaSistemav+0x54>)
 8006b8e:	f7fc fc17 	bl	80033c0 <_ZN19CManejadorPantallas16RefrescaPantallaEv>
		HAL_Delay(1);
 8006b92:	2001      	movs	r0, #1
 8006b94:	f001 f8ce 	bl	8007d34 <HAL_Delay>
		n++;
 8006b98:	bf00      	nop
 8006b9a:	e7eb      	b.n	8006b74 <_Z14EjecutaSistemav+0x28>
 8006b9c:	2000023c 	.word	0x2000023c
 8006ba0:	20000240 	.word	0x20000240
 8006ba4:	2000026c 	.word	0x2000026c

08006ba8 <HAL_GPIO_EXTI_Callback>:
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	4603      	mov	r3, r0
 8006bb0:	80fb      	strh	r3, [r7, #6]
	if(estacion!=NULL)
 8006bb2:	4b10      	ldr	r3, [pc, #64]	@ (8006bf4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d009      	beq.n	8006bce <HAL_GPIO_EXTI_Callback+0x26>
	{
		estacion->GPIO_INTERRUPCION(GPIO_Pin);
 8006bba:	4b0e      	ldr	r3, [pc, #56]	@ (8006bf4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8006bf4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	3354      	adds	r3, #84	@ 0x54
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	88f9      	ldrh	r1, [r7, #6]
 8006bca:	4610      	mov	r0, r2
 8006bcc:	4798      	blx	r3
	}
	if(ManejadorControles!=NULL)
 8006bce:	4b0a      	ldr	r3, [pc, #40]	@ (8006bf8 <HAL_GPIO_EXTI_Callback+0x50>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d009      	beq.n	8006bea <HAL_GPIO_EXTI_Callback+0x42>
	{
		ManejadorControles->GPIO_INTERRUPCION(GPIO_Pin);
 8006bd6:	4b08      	ldr	r3, [pc, #32]	@ (8006bf8 <HAL_GPIO_EXTI_Callback+0x50>)
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	4b07      	ldr	r3, [pc, #28]	@ (8006bf8 <HAL_GPIO_EXTI_Callback+0x50>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	3334      	adds	r3, #52	@ 0x34
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	88f9      	ldrh	r1, [r7, #6]
 8006be6:	4610      	mov	r0, r2
 8006be8:	4798      	blx	r3
	}
}
 8006bea:	bf00      	nop
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	2000023c 	.word	0x2000023c
 8006bf8:	2000026c 	.word	0x2000026c

08006bfc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM3)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a0a      	ldr	r2, [pc, #40]	@ (8006c34 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d10e      	bne.n	8006c2c <HAL_TIM_PeriodElapsedCallback+0x30>
	{
//		SerialPrintf("\r\n Timer");
		if(estacion==NULL)
 8006c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8006c38 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d009      	beq.n	8006c2a <HAL_TIM_PeriodElapsedCallback+0x2e>
			return;
		estacion->TimerTick();
 8006c16:	4b08      	ldr	r3, [pc, #32]	@ (8006c38 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	4b07      	ldr	r3, [pc, #28]	@ (8006c38 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	3340      	adds	r3, #64	@ 0x40
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4610      	mov	r0, r2
 8006c26:	4798      	blx	r3
 8006c28:	e000      	b.n	8006c2c <HAL_TIM_PeriodElapsedCallback+0x30>
			return;
 8006c2a:	bf00      	nop
	}
}
 8006c2c:	3708      	adds	r7, #8
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	40000400 	.word	0x40000400
 8006c38:	2000023c 	.word	0x2000023c

08006c3c <_Z41__static_initialization_and_destruction_0ii>:
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d107      	bne.n	8006c5c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d102      	bne.n	8006c5c <_Z41__static_initialization_and_destruction_0ii+0x20>
CManejadorPantallas ManejadorPantallas;
 8006c56:	4809      	ldr	r0, [pc, #36]	@ (8006c7c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8006c58:	f7fc fb26 	bl	80032a8 <_ZN19CManejadorPantallasC1Ev>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d107      	bne.n	8006c72 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d102      	bne.n	8006c72 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8006c6c:	4803      	ldr	r0, [pc, #12]	@ (8006c7c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8006c6e:	f7fc fb41 	bl	80032f4 <_ZN19CManejadorPantallasD1Ev>
}
 8006c72:	bf00      	nop
 8006c74:	3708      	adds	r7, #8
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	20000240 	.word	0x20000240

08006c80 <_GLOBAL__sub_I_estacion>:
 8006c80:	b580      	push	{r7, lr}
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8006c88:	2001      	movs	r0, #1
 8006c8a:	f7ff ffd7 	bl	8006c3c <_Z41__static_initialization_and_destruction_0ii>
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <_GLOBAL__sub_D_estacion>:
 8006c90:	b580      	push	{r7, lr}
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8006c98:	2000      	movs	r0, #0
 8006c9a:	f7ff ffcf 	bl	8006c3c <_Z41__static_initialization_and_destruction_0ii>
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b08a      	sub	sp, #40	@ 0x28
 8006ca4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	613b      	str	r3, [r7, #16]
 8006caa:	4b6e      	ldr	r3, [pc, #440]	@ (8006e64 <MX_GPIO_Init+0x1c4>)
 8006cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cae:	4a6d      	ldr	r2, [pc, #436]	@ (8006e64 <MX_GPIO_Init+0x1c4>)
 8006cb0:	f043 0310 	orr.w	r3, r3, #16
 8006cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8006cb6:	4b6b      	ldr	r3, [pc, #428]	@ (8006e64 <MX_GPIO_Init+0x1c4>)
 8006cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cba:	f003 0310 	and.w	r3, r3, #16
 8006cbe:	613b      	str	r3, [r7, #16]
 8006cc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	60fb      	str	r3, [r7, #12]
 8006cc6:	4b67      	ldr	r3, [pc, #412]	@ (8006e64 <MX_GPIO_Init+0x1c4>)
 8006cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cca:	4a66      	ldr	r2, [pc, #408]	@ (8006e64 <MX_GPIO_Init+0x1c4>)
 8006ccc:	f043 0304 	orr.w	r3, r3, #4
 8006cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8006cd2:	4b64      	ldr	r3, [pc, #400]	@ (8006e64 <MX_GPIO_Init+0x1c4>)
 8006cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cd6:	f003 0304 	and.w	r3, r3, #4
 8006cda:	60fb      	str	r3, [r7, #12]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
//  __HAL_RCC_GPIOF_CLK_ENABLE();
//  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cde:	2300      	movs	r3, #0
 8006ce0:	60bb      	str	r3, [r7, #8]
 8006ce2:	4b60      	ldr	r3, [pc, #384]	@ (8006e64 <MX_GPIO_Init+0x1c4>)
 8006ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ce6:	4a5f      	ldr	r2, [pc, #380]	@ (8006e64 <MX_GPIO_Init+0x1c4>)
 8006ce8:	f043 0301 	orr.w	r3, r3, #1
 8006cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8006cee:	4b5d      	ldr	r3, [pc, #372]	@ (8006e64 <MX_GPIO_Init+0x1c4>)
 8006cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cf2:	f003 0301 	and.w	r3, r3, #1
 8006cf6:	60bb      	str	r3, [r7, #8]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	607b      	str	r3, [r7, #4]
 8006cfe:	4b59      	ldr	r3, [pc, #356]	@ (8006e64 <MX_GPIO_Init+0x1c4>)
 8006d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d02:	4a58      	ldr	r2, [pc, #352]	@ (8006e64 <MX_GPIO_Init+0x1c4>)
 8006d04:	f043 0302 	orr.w	r3, r3, #2
 8006d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8006d0a:	4b56      	ldr	r3, [pc, #344]	@ (8006e64 <MX_GPIO_Init+0x1c4>)
 8006d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d0e:	f003 0302 	and.w	r3, r3, #2
 8006d12:	607b      	str	r3, [r7, #4]
 8006d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d16:	2300      	movs	r3, #0
 8006d18:	603b      	str	r3, [r7, #0]
 8006d1a:	4b52      	ldr	r3, [pc, #328]	@ (8006e64 <MX_GPIO_Init+0x1c4>)
 8006d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d1e:	4a51      	ldr	r2, [pc, #324]	@ (8006e64 <MX_GPIO_Init+0x1c4>)
 8006d20:	f043 0308 	orr.w	r3, r3, #8
 8006d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8006d26:	4b4f      	ldr	r3, [pc, #316]	@ (8006e64 <MX_GPIO_Init+0x1c4>)
 8006d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d2a:	f003 0308 	and.w	r3, r3, #8
 8006d2e:	603b      	str	r3, [r7, #0]
 8006d30:	683b      	ldr	r3, [r7, #0]
//  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8006d32:	2304      	movs	r3, #4
 8006d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d36:	2300      	movs	r3, #0
 8006d38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8006d3e:	f107 0314 	add.w	r3, r7, #20
 8006d42:	4619      	mov	r1, r3
 8006d44:	4848      	ldr	r0, [pc, #288]	@ (8006e68 <MX_GPIO_Init+0x1c8>)
 8006d46:	f001 fc5f 	bl	8008608 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 8006d4a:	2368      	movs	r3, #104	@ 0x68
 8006d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d52:	2300      	movs	r3, #0
 8006d54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d56:	2303      	movs	r3, #3
 8006d58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006d5a:	f107 0314 	add.w	r3, r7, #20
 8006d5e:	4619      	mov	r1, r3
 8006d60:	4841      	ldr	r0, [pc, #260]	@ (8006e68 <MX_GPIO_Init+0x1c8>)
 8006d62:	f001 fc51 	bl	8008608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8006d66:	2310      	movs	r3, #16
 8006d68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8006d72:	f107 0314 	add.w	r3, r7, #20
 8006d76:	4619      	mov	r1, r3
 8006d78:	483b      	ldr	r0, [pc, #236]	@ (8006e68 <MX_GPIO_Init+0x1c8>)
 8006d7a:	f001 fc45 	bl	8008608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 8006d7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d84:	2300      	movs	r3, #0
 8006d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8006d8c:	f107 0314 	add.w	r3, r7, #20
 8006d90:	4619      	mov	r1, r3
 8006d92:	4836      	ldr	r0, [pc, #216]	@ (8006e6c <MX_GPIO_Init+0x1cc>)
 8006d94:	f001 fc38 	bl	8008608 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006d98:	2332      	movs	r3, #50	@ 0x32
 8006d9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006da0:	2300      	movs	r3, #0
 8006da2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006da4:	2303      	movs	r3, #3
 8006da6:	623b      	str	r3, [r7, #32]
  //GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006da8:	f107 0314 	add.w	r3, r7, #20
 8006dac:	4619      	mov	r1, r3
 8006dae:	482f      	ldr	r0, [pc, #188]	@ (8006e6c <MX_GPIO_Init+0x1cc>)
 8006db0:	f001 fc2a 	bl	8008608 <HAL_GPIO_Init>
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
////  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
//  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006db4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dba:	2302      	movs	r3, #2
 8006dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	623b      	str	r3, [r7, #32]
  //GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8006dc6:	f107 0314 	add.w	r3, r7, #20
 8006dca:	4619      	mov	r1, r3
 8006dcc:	4828      	ldr	r0, [pc, #160]	@ (8006e70 <MX_GPIO_Init+0x1d0>)
 8006dce:	f001 fc1b 	bl	8008608 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8006dd2:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8006dd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006de0:	2300      	movs	r3, #0
 8006de2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006de4:	f107 0314 	add.w	r3, r7, #20
 8006de8:	4619      	mov	r1, r3
 8006dea:	4821      	ldr	r0, [pc, #132]	@ (8006e70 <MX_GPIO_Init+0x1d0>)
 8006dec:	f001 fc0c 	bl	8008608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8006df0:	2340      	movs	r3, #64	@ 0x40
 8006df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006df4:	2301      	movs	r3, #1
 8006df6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	623b      	str	r3, [r7, #32]
  //HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8006e00:	2380      	movs	r3, #128	@ 0x80
 8006e02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e04:	2300      	movs	r3, #0
 8006e06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	61fb      	str	r3, [r7, #28]
  //HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8006e0c:	2323      	movs	r3, #35	@ 0x23
 8006e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e10:	2301      	movs	r3, #1
 8006e12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e14:	2300      	movs	r3, #0
 8006e16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e1c:	f107 0314 	add.w	r3, r7, #20
 8006e20:	4619      	mov	r1, r3
 8006e22:	4812      	ldr	r0, [pc, #72]	@ (8006e6c <MX_GPIO_Init+0x1cc>)
 8006e24:	f001 fbf0 	bl	8008608 <HAL_GPIO_Init>
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  //GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
//  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006e28:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8006e2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e2e:	2302      	movs	r3, #2
 8006e30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e32:	2300      	movs	r3, #0
 8006e34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e36:	2303      	movs	r3, #3
 8006e38:	623b      	str	r3, [r7, #32]
//  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
//  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	2168      	movs	r1, #104	@ 0x68
 8006e3e:	480a      	ldr	r0, [pc, #40]	@ (8006e68 <MX_GPIO_Init+0x1c8>)
 8006e40:	f001 fd7e 	bl	8008940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8006e44:	2200      	movs	r2, #0
 8006e46:	f44f 4184 	mov.w	r1, #16896	@ 0x4200
 8006e4a:	4809      	ldr	r0, [pc, #36]	@ (8006e70 <MX_GPIO_Init+0x1d0>)
 8006e4c:	f001 fd78 	bl	8008940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
//  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 8006e50:	2200      	movs	r2, #0
 8006e52:	2123      	movs	r1, #35	@ 0x23
 8006e54:	4805      	ldr	r0, [pc, #20]	@ (8006e6c <MX_GPIO_Init+0x1cc>)
 8006e56:	f001 fd73 	bl	8008940 <HAL_GPIO_WritePin>

}
 8006e5a:	bf00      	nop
 8006e5c:	3728      	adds	r7, #40	@ 0x28
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	40023800 	.word	0x40023800
 8006e68:	40021000 	.word	0x40021000
 8006e6c:	40020800 	.word	0x40020800
 8006e70:	40020400 	.word	0x40020400

08006e74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006e7a:	f000 fee9 	bl	8007c50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006e7e:	f000 f82f 	bl	8006ee0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006e82:	f000 fa83 	bl	800738c <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 8006e86:	f000 f89d 	bl	8006fc4 <_ZL12MX_ADC1_Initv>
  MX_I2C1_Init();
 8006e8a:	f000 f8f7 	bl	800707c <_ZL12MX_I2C1_Initv>
  MX_SPI1_Init();
 8006e8e:	f000 f929 	bl	80070e4 <_ZL12MX_SPI1_Initv>
  MX_TIM2_Init();
 8006e92:	f000 f963 	bl	800715c <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8006e96:	f000 f9ef 	bl	8007278 <_ZL12MX_TIM3_Initv>
  MX_USART1_UART_Init();
 8006e9a:	f000 fa49 	bl	8007330 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8006e9e:	480d      	ldr	r0, [pc, #52]	@ (8006ed4 <main+0x60>)
 8006ea0:	f003 fcf6 	bl	800a890 <HAL_TIM_Base_Start_IT>
	IncializaSistema();
 8006ea4:	f7ff fe12 	bl	8006acc <_Z16IncializaSistemav>
	EjecutaSistema();
 8006ea8:	f7ff fe50 	bl	8006b4c <_Z14EjecutaSistemav>
  USART1_UART_Init();
 8006eac:	f7ff fc48 	bl	8006740 <_Z16USART1_UART_Initv>
	  HAL_ADC_Start(&hadc1);
 8006eb0:	4809      	ldr	r0, [pc, #36]	@ (8006ed8 <main+0x64>)
 8006eb2:	f000 ffa7 	bl	8007e04 <HAL_ADC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		int valor=HAL_ADC_GetValue(&hadc1);
 8006eb6:	4808      	ldr	r0, [pc, #32]	@ (8006ed8 <main+0x64>)
 8006eb8:	f001 f858 	bl	8007f6c <HAL_ADC_GetValue>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	607b      	str	r3, [r7, #4]
		SerialPrintf("\r\n analogo: %d",valor);
 8006ec0:	6879      	ldr	r1, [r7, #4]
 8006ec2:	4806      	ldr	r0, [pc, #24]	@ (8006edc <main+0x68>)
 8006ec4:	f7ff fc70 	bl	80067a8 <_Z12SerialPrintfPcz>
		HAL_Delay(500);
 8006ec8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8006ecc:	f000 ff32 	bl	8007d34 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8006ed0:	bf00      	nop
 8006ed2:	e7f0      	b.n	8006eb6 <main+0x42>
 8006ed4:	200003ac 	.word	0x200003ac
 8006ed8:	20000270 	.word	0x20000270
 8006edc:	0800ee0c 	.word	0x0800ee0c

08006ee0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b094      	sub	sp, #80	@ 0x50
 8006ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006ee6:	f107 0320 	add.w	r3, r7, #32
 8006eea:	2230      	movs	r2, #48	@ 0x30
 8006eec:	2100      	movs	r1, #0
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f005 fea3 	bl	800cc3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006ef4:	f107 030c 	add.w	r3, r7, #12
 8006ef8:	2200      	movs	r2, #0
 8006efa:	601a      	str	r2, [r3, #0]
 8006efc:	605a      	str	r2, [r3, #4]
 8006efe:	609a      	str	r2, [r3, #8]
 8006f00:	60da      	str	r2, [r3, #12]
 8006f02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006f04:	2300      	movs	r3, #0
 8006f06:	60bb      	str	r3, [r7, #8]
 8006f08:	4b2c      	ldr	r3, [pc, #176]	@ (8006fbc <_Z18SystemClock_Configv+0xdc>)
 8006f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f0c:	4a2b      	ldr	r2, [pc, #172]	@ (8006fbc <_Z18SystemClock_Configv+0xdc>)
 8006f0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f12:	6413      	str	r3, [r2, #64]	@ 0x40
 8006f14:	4b29      	ldr	r3, [pc, #164]	@ (8006fbc <_Z18SystemClock_Configv+0xdc>)
 8006f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f1c:	60bb      	str	r3, [r7, #8]
 8006f1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006f20:	2300      	movs	r3, #0
 8006f22:	607b      	str	r3, [r7, #4]
 8006f24:	4b26      	ldr	r3, [pc, #152]	@ (8006fc0 <_Z18SystemClock_Configv+0xe0>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a25      	ldr	r2, [pc, #148]	@ (8006fc0 <_Z18SystemClock_Configv+0xe0>)
 8006f2a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f2e:	6013      	str	r3, [r2, #0]
 8006f30:	4b23      	ldr	r3, [pc, #140]	@ (8006fc0 <_Z18SystemClock_Configv+0xe0>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006f38:	607b      	str	r3, [r7, #4]
 8006f3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006f40:	2301      	movs	r3, #1
 8006f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006f44:	2310      	movs	r3, #16
 8006f46:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006f48:	2302      	movs	r3, #2
 8006f4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006f50:	2308      	movs	r3, #8
 8006f52:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8006f54:	2348      	movs	r3, #72	@ 0x48
 8006f56:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006f58:	2302      	movs	r3, #2
 8006f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006f5c:	2304      	movs	r3, #4
 8006f5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006f60:	f107 0320 	add.w	r3, r7, #32
 8006f64:	4618      	mov	r0, r3
 8006f66:	f002 fd41 	bl	80099ec <HAL_RCC_OscConfig>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	bf14      	ite	ne
 8006f70:	2301      	movne	r3, #1
 8006f72:	2300      	moveq	r3, #0
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d001      	beq.n	8006f7e <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8006f7a:	f000 faf1 	bl	8007560 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006f7e:	230f      	movs	r3, #15
 8006f80:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006f82:	2302      	movs	r3, #2
 8006f84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006f86:	2300      	movs	r3, #0
 8006f88:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006f8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006f8e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006f90:	2300      	movs	r3, #0
 8006f92:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006f94:	f107 030c 	add.w	r3, r7, #12
 8006f98:	2102      	movs	r1, #2
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f002 ff9e 	bl	8009edc <HAL_RCC_ClockConfig>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	bf14      	ite	ne
 8006fa6:	2301      	movne	r3, #1
 8006fa8:	2300      	moveq	r3, #0
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d001      	beq.n	8006fb4 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8006fb0:	f000 fad6 	bl	8007560 <Error_Handler>
  }
}
 8006fb4:	bf00      	nop
 8006fb6:	3750      	adds	r7, #80	@ 0x50
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	40023800 	.word	0x40023800
 8006fc0:	40007000 	.word	0x40007000

08006fc4 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006fca:	463b      	mov	r3, r7
 8006fcc:	2200      	movs	r2, #0
 8006fce:	601a      	str	r2, [r3, #0]
 8006fd0:	605a      	str	r2, [r3, #4]
 8006fd2:	609a      	str	r2, [r3, #8]
 8006fd4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8006fd6:	4b26      	ldr	r3, [pc, #152]	@ (8007070 <_ZL12MX_ADC1_Initv+0xac>)
 8006fd8:	4a26      	ldr	r2, [pc, #152]	@ (8007074 <_ZL12MX_ADC1_Initv+0xb0>)
 8006fda:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006fdc:	4b24      	ldr	r3, [pc, #144]	@ (8007070 <_ZL12MX_ADC1_Initv+0xac>)
 8006fde:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8006fe2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006fe4:	4b22      	ldr	r3, [pc, #136]	@ (8007070 <_ZL12MX_ADC1_Initv+0xac>)
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8006fea:	4b21      	ldr	r3, [pc, #132]	@ (8007070 <_ZL12MX_ADC1_Initv+0xac>)
 8006fec:	2200      	movs	r2, #0
 8006fee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8006ff0:	4b1f      	ldr	r3, [pc, #124]	@ (8007070 <_ZL12MX_ADC1_Initv+0xac>)
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006ff6:	4b1e      	ldr	r3, [pc, #120]	@ (8007070 <_ZL12MX_ADC1_Initv+0xac>)
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8007070 <_ZL12MX_ADC1_Initv+0xac>)
 8007000:	2200      	movs	r2, #0
 8007002:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007004:	4b1a      	ldr	r3, [pc, #104]	@ (8007070 <_ZL12MX_ADC1_Initv+0xac>)
 8007006:	4a1c      	ldr	r2, [pc, #112]	@ (8007078 <_ZL12MX_ADC1_Initv+0xb4>)
 8007008:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800700a:	4b19      	ldr	r3, [pc, #100]	@ (8007070 <_ZL12MX_ADC1_Initv+0xac>)
 800700c:	2200      	movs	r2, #0
 800700e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8007010:	4b17      	ldr	r3, [pc, #92]	@ (8007070 <_ZL12MX_ADC1_Initv+0xac>)
 8007012:	2201      	movs	r2, #1
 8007014:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8007016:	4b16      	ldr	r3, [pc, #88]	@ (8007070 <_ZL12MX_ADC1_Initv+0xac>)
 8007018:	2200      	movs	r2, #0
 800701a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800701e:	4b14      	ldr	r3, [pc, #80]	@ (8007070 <_ZL12MX_ADC1_Initv+0xac>)
 8007020:	2201      	movs	r2, #1
 8007022:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007024:	4812      	ldr	r0, [pc, #72]	@ (8007070 <_ZL12MX_ADC1_Initv+0xac>)
 8007026:	f000 fea9 	bl	8007d7c <HAL_ADC_Init>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	bf14      	ite	ne
 8007030:	2301      	movne	r3, #1
 8007032:	2300      	moveq	r3, #0
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	d001      	beq.n	800703e <_ZL12MX_ADC1_Initv+0x7a>
  {
    Error_Handler();
 800703a:	f000 fa91 	bl	8007560 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800703e:	2303      	movs	r3, #3
 8007040:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8007042:	2301      	movs	r3, #1
 8007044:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8007046:	2300      	movs	r3, #0
 8007048:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800704a:	463b      	mov	r3, r7
 800704c:	4619      	mov	r1, r3
 800704e:	4808      	ldr	r0, [pc, #32]	@ (8007070 <_ZL12MX_ADC1_Initv+0xac>)
 8007050:	f000 ff9a 	bl	8007f88 <HAL_ADC_ConfigChannel>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	bf14      	ite	ne
 800705a:	2301      	movne	r3, #1
 800705c:	2300      	moveq	r3, #0
 800705e:	b2db      	uxtb	r3, r3
 8007060:	2b00      	cmp	r3, #0
 8007062:	d001      	beq.n	8007068 <_ZL12MX_ADC1_Initv+0xa4>
  {
    Error_Handler();
 8007064:	f000 fa7c 	bl	8007560 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8007068:	bf00      	nop
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	20000270 	.word	0x20000270
 8007074:	40012000 	.word	0x40012000
 8007078:	0f000001 	.word	0x0f000001

0800707c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007080:	4b15      	ldr	r3, [pc, #84]	@ (80070d8 <_ZL12MX_I2C1_Initv+0x5c>)
 8007082:	4a16      	ldr	r2, [pc, #88]	@ (80070dc <_ZL12MX_I2C1_Initv+0x60>)
 8007084:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8007086:	4b14      	ldr	r3, [pc, #80]	@ (80070d8 <_ZL12MX_I2C1_Initv+0x5c>)
 8007088:	4a15      	ldr	r2, [pc, #84]	@ (80070e0 <_ZL12MX_I2C1_Initv+0x64>)
 800708a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800708c:	4b12      	ldr	r3, [pc, #72]	@ (80070d8 <_ZL12MX_I2C1_Initv+0x5c>)
 800708e:	2200      	movs	r2, #0
 8007090:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007092:	4b11      	ldr	r3, [pc, #68]	@ (80070d8 <_ZL12MX_I2C1_Initv+0x5c>)
 8007094:	2200      	movs	r2, #0
 8007096:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007098:	4b0f      	ldr	r3, [pc, #60]	@ (80070d8 <_ZL12MX_I2C1_Initv+0x5c>)
 800709a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800709e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80070a0:	4b0d      	ldr	r3, [pc, #52]	@ (80070d8 <_ZL12MX_I2C1_Initv+0x5c>)
 80070a2:	2200      	movs	r2, #0
 80070a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80070a6:	4b0c      	ldr	r3, [pc, #48]	@ (80070d8 <_ZL12MX_I2C1_Initv+0x5c>)
 80070a8:	2200      	movs	r2, #0
 80070aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80070ac:	4b0a      	ldr	r3, [pc, #40]	@ (80070d8 <_ZL12MX_I2C1_Initv+0x5c>)
 80070ae:	2200      	movs	r2, #0
 80070b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80070b2:	4b09      	ldr	r3, [pc, #36]	@ (80070d8 <_ZL12MX_I2C1_Initv+0x5c>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80070b8:	4807      	ldr	r0, [pc, #28]	@ (80070d8 <_ZL12MX_I2C1_Initv+0x5c>)
 80070ba:	f001 fc73 	bl	80089a4 <HAL_I2C_Init>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	bf14      	ite	ne
 80070c4:	2301      	movne	r3, #1
 80070c6:	2300      	moveq	r3, #0
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d001      	beq.n	80070d2 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80070ce:	f000 fa47 	bl	8007560 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80070d2:	bf00      	nop
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	200002b8 	.word	0x200002b8
 80070dc:	40005400 	.word	0x40005400
 80070e0:	000186a0 	.word	0x000186a0

080070e4 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80070e8:	4b1a      	ldr	r3, [pc, #104]	@ (8007154 <_ZL12MX_SPI1_Initv+0x70>)
 80070ea:	4a1b      	ldr	r2, [pc, #108]	@ (8007158 <_ZL12MX_SPI1_Initv+0x74>)
 80070ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80070ee:	4b19      	ldr	r3, [pc, #100]	@ (8007154 <_ZL12MX_SPI1_Initv+0x70>)
 80070f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80070f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80070f6:	4b17      	ldr	r3, [pc, #92]	@ (8007154 <_ZL12MX_SPI1_Initv+0x70>)
 80070f8:	2200      	movs	r2, #0
 80070fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80070fc:	4b15      	ldr	r3, [pc, #84]	@ (8007154 <_ZL12MX_SPI1_Initv+0x70>)
 80070fe:	2200      	movs	r2, #0
 8007100:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007102:	4b14      	ldr	r3, [pc, #80]	@ (8007154 <_ZL12MX_SPI1_Initv+0x70>)
 8007104:	2200      	movs	r2, #0
 8007106:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007108:	4b12      	ldr	r3, [pc, #72]	@ (8007154 <_ZL12MX_SPI1_Initv+0x70>)
 800710a:	2200      	movs	r2, #0
 800710c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800710e:	4b11      	ldr	r3, [pc, #68]	@ (8007154 <_ZL12MX_SPI1_Initv+0x70>)
 8007110:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007114:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007116:	4b0f      	ldr	r3, [pc, #60]	@ (8007154 <_ZL12MX_SPI1_Initv+0x70>)
 8007118:	2200      	movs	r2, #0
 800711a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800711c:	4b0d      	ldr	r3, [pc, #52]	@ (8007154 <_ZL12MX_SPI1_Initv+0x70>)
 800711e:	2200      	movs	r2, #0
 8007120:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007122:	4b0c      	ldr	r3, [pc, #48]	@ (8007154 <_ZL12MX_SPI1_Initv+0x70>)
 8007124:	2200      	movs	r2, #0
 8007126:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007128:	4b0a      	ldr	r3, [pc, #40]	@ (8007154 <_ZL12MX_SPI1_Initv+0x70>)
 800712a:	2200      	movs	r2, #0
 800712c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800712e:	4b09      	ldr	r3, [pc, #36]	@ (8007154 <_ZL12MX_SPI1_Initv+0x70>)
 8007130:	220a      	movs	r2, #10
 8007132:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007134:	4807      	ldr	r0, [pc, #28]	@ (8007154 <_ZL12MX_SPI1_Initv+0x70>)
 8007136:	f003 f8b1 	bl	800a29c <HAL_SPI_Init>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	bf14      	ite	ne
 8007140:	2301      	movne	r3, #1
 8007142:	2300      	moveq	r3, #0
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	d001      	beq.n	800714e <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800714a:	f000 fa09 	bl	8007560 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800714e:	bf00      	nop
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	2000030c 	.word	0x2000030c
 8007158:	40013000 	.word	0x40013000

0800715c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b08e      	sub	sp, #56	@ 0x38
 8007160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007162:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007166:	2200      	movs	r2, #0
 8007168:	601a      	str	r2, [r3, #0]
 800716a:	605a      	str	r2, [r3, #4]
 800716c:	609a      	str	r2, [r3, #8]
 800716e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007170:	f107 0320 	add.w	r3, r7, #32
 8007174:	2200      	movs	r2, #0
 8007176:	601a      	str	r2, [r3, #0]
 8007178:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800717a:	1d3b      	adds	r3, r7, #4
 800717c:	2200      	movs	r2, #0
 800717e:	601a      	str	r2, [r3, #0]
 8007180:	605a      	str	r2, [r3, #4]
 8007182:	609a      	str	r2, [r3, #8]
 8007184:	60da      	str	r2, [r3, #12]
 8007186:	611a      	str	r2, [r3, #16]
 8007188:	615a      	str	r2, [r3, #20]
 800718a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800718c:	4b39      	ldr	r3, [pc, #228]	@ (8007274 <_ZL12MX_TIM2_Initv+0x118>)
 800718e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007192:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8007194:	4b37      	ldr	r3, [pc, #220]	@ (8007274 <_ZL12MX_TIM2_Initv+0x118>)
 8007196:	2200      	movs	r2, #0
 8007198:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800719a:	4b36      	ldr	r3, [pc, #216]	@ (8007274 <_ZL12MX_TIM2_Initv+0x118>)
 800719c:	2200      	movs	r2, #0
 800719e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80071a0:	4b34      	ldr	r3, [pc, #208]	@ (8007274 <_ZL12MX_TIM2_Initv+0x118>)
 80071a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80071a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80071a8:	4b32      	ldr	r3, [pc, #200]	@ (8007274 <_ZL12MX_TIM2_Initv+0x118>)
 80071aa:	2200      	movs	r2, #0
 80071ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80071ae:	4b31      	ldr	r3, [pc, #196]	@ (8007274 <_ZL12MX_TIM2_Initv+0x118>)
 80071b0:	2280      	movs	r2, #128	@ 0x80
 80071b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80071b4:	482f      	ldr	r0, [pc, #188]	@ (8007274 <_ZL12MX_TIM2_Initv+0x118>)
 80071b6:	f003 fb1b 	bl	800a7f0 <HAL_TIM_Base_Init>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	bf14      	ite	ne
 80071c0:	2301      	movne	r3, #1
 80071c2:	2300      	moveq	r3, #0
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d001      	beq.n	80071ce <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 80071ca:	f000 f9c9 	bl	8007560 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80071ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80071d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80071d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80071d8:	4619      	mov	r1, r3
 80071da:	4826      	ldr	r0, [pc, #152]	@ (8007274 <_ZL12MX_TIM2_Initv+0x118>)
 80071dc:	f003 fe76 	bl	800aecc <HAL_TIM_ConfigClockSource>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	bf14      	ite	ne
 80071e6:	2301      	movne	r3, #1
 80071e8:	2300      	moveq	r3, #0
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d001      	beq.n	80071f4 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 80071f0:	f000 f9b6 	bl	8007560 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80071f4:	481f      	ldr	r0, [pc, #124]	@ (8007274 <_ZL12MX_TIM2_Initv+0x118>)
 80071f6:	f003 fbad 	bl	800a954 <HAL_TIM_PWM_Init>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	bf14      	ite	ne
 8007200:	2301      	movne	r3, #1
 8007202:	2300      	moveq	r3, #0
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b00      	cmp	r3, #0
 8007208:	d001      	beq.n	800720e <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 800720a:	f000 f9a9 	bl	8007560 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800720e:	2300      	movs	r3, #0
 8007210:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007212:	2300      	movs	r3, #0
 8007214:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007216:	f107 0320 	add.w	r3, r7, #32
 800721a:	4619      	mov	r1, r3
 800721c:	4815      	ldr	r0, [pc, #84]	@ (8007274 <_ZL12MX_TIM2_Initv+0x118>)
 800721e:	f004 fa1d 	bl	800b65c <HAL_TIMEx_MasterConfigSynchronization>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	bf14      	ite	ne
 8007228:	2301      	movne	r3, #1
 800722a:	2300      	moveq	r3, #0
 800722c:	b2db      	uxtb	r3, r3
 800722e:	2b00      	cmp	r3, #0
 8007230:	d001      	beq.n	8007236 <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 8007232:	f000 f995 	bl	8007560 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007236:	2360      	movs	r3, #96	@ 0x60
 8007238:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800723a:	2300      	movs	r3, #0
 800723c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800723e:	2300      	movs	r3, #0
 8007240:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007242:	2300      	movs	r3, #0
 8007244:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007246:	1d3b      	adds	r3, r7, #4
 8007248:	2200      	movs	r2, #0
 800724a:	4619      	mov	r1, r3
 800724c:	4809      	ldr	r0, [pc, #36]	@ (8007274 <_ZL12MX_TIM2_Initv+0x118>)
 800724e:	f003 fd7b 	bl	800ad48 <HAL_TIM_PWM_ConfigChannel>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	bf14      	ite	ne
 8007258:	2301      	movne	r3, #1
 800725a:	2300      	moveq	r3, #0
 800725c:	b2db      	uxtb	r3, r3
 800725e:	2b00      	cmp	r3, #0
 8007260:	d001      	beq.n	8007266 <_ZL12MX_TIM2_Initv+0x10a>
  {
    Error_Handler();
 8007262:	f000 f97d 	bl	8007560 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8007266:	4803      	ldr	r0, [pc, #12]	@ (8007274 <_ZL12MX_TIM2_Initv+0x118>)
 8007268:	f000 fafc 	bl	8007864 <HAL_TIM_MspPostInit>

}
 800726c:	bf00      	nop
 800726e:	3738      	adds	r7, #56	@ 0x38
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	20000364 	.word	0x20000364

08007278 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b086      	sub	sp, #24
 800727c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800727e:	f107 0308 	add.w	r3, r7, #8
 8007282:	2200      	movs	r2, #0
 8007284:	601a      	str	r2, [r3, #0]
 8007286:	605a      	str	r2, [r3, #4]
 8007288:	609a      	str	r2, [r3, #8]
 800728a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800728c:	463b      	mov	r3, r7
 800728e:	2200      	movs	r2, #0
 8007290:	601a      	str	r2, [r3, #0]
 8007292:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007294:	4b24      	ldr	r3, [pc, #144]	@ (8007328 <_ZL12MX_TIM3_Initv+0xb0>)
 8007296:	4a25      	ldr	r2, [pc, #148]	@ (800732c <_ZL12MX_TIM3_Initv+0xb4>)
 8007298:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800729a:	4b23      	ldr	r3, [pc, #140]	@ (8007328 <_ZL12MX_TIM3_Initv+0xb0>)
 800729c:	2200      	movs	r2, #0
 800729e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80072a0:	4b21      	ldr	r3, [pc, #132]	@ (8007328 <_ZL12MX_TIM3_Initv+0xb0>)
 80072a2:	2200      	movs	r2, #0
 80072a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80072a6:	4b20      	ldr	r3, [pc, #128]	@ (8007328 <_ZL12MX_TIM3_Initv+0xb0>)
 80072a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80072ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80072ae:	4b1e      	ldr	r3, [pc, #120]	@ (8007328 <_ZL12MX_TIM3_Initv+0xb0>)
 80072b0:	2200      	movs	r2, #0
 80072b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80072b4:	4b1c      	ldr	r3, [pc, #112]	@ (8007328 <_ZL12MX_TIM3_Initv+0xb0>)
 80072b6:	2200      	movs	r2, #0
 80072b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80072ba:	481b      	ldr	r0, [pc, #108]	@ (8007328 <_ZL12MX_TIM3_Initv+0xb0>)
 80072bc:	f003 fa98 	bl	800a7f0 <HAL_TIM_Base_Init>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	bf14      	ite	ne
 80072c6:	2301      	movne	r3, #1
 80072c8:	2300      	moveq	r3, #0
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d001      	beq.n	80072d4 <_ZL12MX_TIM3_Initv+0x5c>
  {
    Error_Handler();
 80072d0:	f000 f946 	bl	8007560 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80072d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80072d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80072da:	f107 0308 	add.w	r3, r7, #8
 80072de:	4619      	mov	r1, r3
 80072e0:	4811      	ldr	r0, [pc, #68]	@ (8007328 <_ZL12MX_TIM3_Initv+0xb0>)
 80072e2:	f003 fdf3 	bl	800aecc <HAL_TIM_ConfigClockSource>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	bf14      	ite	ne
 80072ec:	2301      	movne	r3, #1
 80072ee:	2300      	moveq	r3, #0
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d001      	beq.n	80072fa <_ZL12MX_TIM3_Initv+0x82>
  {
    Error_Handler();
 80072f6:	f000 f933 	bl	8007560 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80072fa:	2300      	movs	r3, #0
 80072fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80072fe:	2300      	movs	r3, #0
 8007300:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007302:	463b      	mov	r3, r7
 8007304:	4619      	mov	r1, r3
 8007306:	4808      	ldr	r0, [pc, #32]	@ (8007328 <_ZL12MX_TIM3_Initv+0xb0>)
 8007308:	f004 f9a8 	bl	800b65c <HAL_TIMEx_MasterConfigSynchronization>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	bf14      	ite	ne
 8007312:	2301      	movne	r3, #1
 8007314:	2300      	moveq	r3, #0
 8007316:	b2db      	uxtb	r3, r3
 8007318:	2b00      	cmp	r3, #0
 800731a:	d001      	beq.n	8007320 <_ZL12MX_TIM3_Initv+0xa8>
  {
    Error_Handler();
 800731c:	f000 f920 	bl	8007560 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8007320:	bf00      	nop
 8007322:	3718      	adds	r7, #24
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	200003ac 	.word	0x200003ac
 800732c:	40000400 	.word	0x40000400

08007330 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007334:	4b13      	ldr	r3, [pc, #76]	@ (8007384 <_ZL19MX_USART1_UART_Initv+0x54>)
 8007336:	4a14      	ldr	r2, [pc, #80]	@ (8007388 <_ZL19MX_USART1_UART_Initv+0x58>)
 8007338:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800733a:	4b12      	ldr	r3, [pc, #72]	@ (8007384 <_ZL19MX_USART1_UART_Initv+0x54>)
 800733c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007340:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007342:	4b10      	ldr	r3, [pc, #64]	@ (8007384 <_ZL19MX_USART1_UART_Initv+0x54>)
 8007344:	2200      	movs	r2, #0
 8007346:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007348:	4b0e      	ldr	r3, [pc, #56]	@ (8007384 <_ZL19MX_USART1_UART_Initv+0x54>)
 800734a:	2200      	movs	r2, #0
 800734c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800734e:	4b0d      	ldr	r3, [pc, #52]	@ (8007384 <_ZL19MX_USART1_UART_Initv+0x54>)
 8007350:	2200      	movs	r2, #0
 8007352:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007354:	4b0b      	ldr	r3, [pc, #44]	@ (8007384 <_ZL19MX_USART1_UART_Initv+0x54>)
 8007356:	220c      	movs	r2, #12
 8007358:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800735a:	4b0a      	ldr	r3, [pc, #40]	@ (8007384 <_ZL19MX_USART1_UART_Initv+0x54>)
 800735c:	2200      	movs	r2, #0
 800735e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007360:	4b08      	ldr	r3, [pc, #32]	@ (8007384 <_ZL19MX_USART1_UART_Initv+0x54>)
 8007362:	2200      	movs	r2, #0
 8007364:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007366:	4807      	ldr	r0, [pc, #28]	@ (8007384 <_ZL19MX_USART1_UART_Initv+0x54>)
 8007368:	f004 f9fa 	bl	800b760 <HAL_UART_Init>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	bf14      	ite	ne
 8007372:	2301      	movne	r3, #1
 8007374:	2300      	moveq	r3, #0
 8007376:	b2db      	uxtb	r3, r3
 8007378:	2b00      	cmp	r3, #0
 800737a:	d001      	beq.n	8007380 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 800737c:	f000 f8f0 	bl	8007560 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007380:	bf00      	nop
 8007382:	bd80      	pop	{r7, pc}
 8007384:	200003f4 	.word	0x200003f4
 8007388:	40011000 	.word	0x40011000

0800738c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b088      	sub	sp, #32
 8007390:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007392:	f107 030c 	add.w	r3, r7, #12
 8007396:	2200      	movs	r2, #0
 8007398:	601a      	str	r2, [r3, #0]
 800739a:	605a      	str	r2, [r3, #4]
 800739c:	609a      	str	r2, [r3, #8]
 800739e:	60da      	str	r2, [r3, #12]
 80073a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80073a2:	2300      	movs	r3, #0
 80073a4:	60bb      	str	r3, [r7, #8]
 80073a6:	4b6a      	ldr	r3, [pc, #424]	@ (8007550 <_ZL12MX_GPIO_Initv+0x1c4>)
 80073a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073aa:	4a69      	ldr	r2, [pc, #420]	@ (8007550 <_ZL12MX_GPIO_Initv+0x1c4>)
 80073ac:	f043 0304 	orr.w	r3, r3, #4
 80073b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80073b2:	4b67      	ldr	r3, [pc, #412]	@ (8007550 <_ZL12MX_GPIO_Initv+0x1c4>)
 80073b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073b6:	f003 0304 	and.w	r3, r3, #4
 80073ba:	60bb      	str	r3, [r7, #8]
 80073bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80073be:	2300      	movs	r3, #0
 80073c0:	607b      	str	r3, [r7, #4]
 80073c2:	4b63      	ldr	r3, [pc, #396]	@ (8007550 <_ZL12MX_GPIO_Initv+0x1c4>)
 80073c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073c6:	4a62      	ldr	r2, [pc, #392]	@ (8007550 <_ZL12MX_GPIO_Initv+0x1c4>)
 80073c8:	f043 0301 	orr.w	r3, r3, #1
 80073cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80073ce:	4b60      	ldr	r3, [pc, #384]	@ (8007550 <_ZL12MX_GPIO_Initv+0x1c4>)
 80073d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073d2:	f003 0301 	and.w	r3, r3, #1
 80073d6:	607b      	str	r3, [r7, #4]
 80073d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80073da:	2300      	movs	r3, #0
 80073dc:	603b      	str	r3, [r7, #0]
 80073de:	4b5c      	ldr	r3, [pc, #368]	@ (8007550 <_ZL12MX_GPIO_Initv+0x1c4>)
 80073e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073e2:	4a5b      	ldr	r2, [pc, #364]	@ (8007550 <_ZL12MX_GPIO_Initv+0x1c4>)
 80073e4:	f043 0302 	orr.w	r3, r3, #2
 80073e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80073ea:	4b59      	ldr	r3, [pc, #356]	@ (8007550 <_ZL12MX_GPIO_Initv+0x1c4>)
 80073ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ee:	f003 0302 	and.w	r3, r3, #2
 80073f2:	603b      	str	r3, [r7, #0]
 80073f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80073f6:	2200      	movs	r2, #0
 80073f8:	2106      	movs	r1, #6
 80073fa:	4856      	ldr	r0, [pc, #344]	@ (8007554 <_ZL12MX_GPIO_Initv+0x1c8>)
 80073fc:	f001 faa0 	bl	8008940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|Display_DC_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 8007400:	2200      	movs	r2, #0
 8007402:	2123      	movs	r1, #35	@ 0x23
 8007404:	4854      	ldr	r0, [pc, #336]	@ (8007558 <_ZL12MX_GPIO_Initv+0x1cc>)
 8007406:	f001 fa9b 	bl	8008940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 800740a:	2201      	movs	r2, #1
 800740c:	2108      	movs	r1, #8
 800740e:	4852      	ldr	r0, [pc, #328]	@ (8007558 <_ZL12MX_GPIO_Initv+0x1cc>)
 8007410:	f001 fa96 	bl	8008940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8007414:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007418:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800741a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800741e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007420:	2301      	movs	r3, #1
 8007422:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007424:	f107 030c 	add.w	r3, r7, #12
 8007428:	4619      	mov	r1, r3
 800742a:	484c      	ldr	r0, [pc, #304]	@ (800755c <_ZL12MX_GPIO_Initv+0x1d0>)
 800742c:	f001 f8ec 	bl	8008608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007430:	2301      	movs	r3, #1
 8007432:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007434:	2300      	movs	r3, #0
 8007436:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007438:	2301      	movs	r3, #1
 800743a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800743c:	f107 030c 	add.w	r3, r7, #12
 8007440:	4619      	mov	r1, r3
 8007442:	4844      	ldr	r0, [pc, #272]	@ (8007554 <_ZL12MX_GPIO_Initv+0x1c8>)
 8007444:	f001 f8e0 	bl	8008608 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8007448:	2306      	movs	r3, #6
 800744a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800744c:	2301      	movs	r3, #1
 800744e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007450:	2300      	movs	r3, #0
 8007452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007454:	2300      	movs	r3, #0
 8007456:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007458:	f107 030c 	add.w	r3, r7, #12
 800745c:	4619      	mov	r1, r3
 800745e:	483d      	ldr	r0, [pc, #244]	@ (8007554 <_ZL12MX_GPIO_Initv+0x1c8>)
 8007460:	f001 f8d2 	bl	8008608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007464:	2340      	movs	r3, #64	@ 0x40
 8007466:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8007468:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800746c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800746e:	2300      	movs	r3, #0
 8007470:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007472:	f107 030c 	add.w	r3, r7, #12
 8007476:	4619      	mov	r1, r3
 8007478:	4836      	ldr	r0, [pc, #216]	@ (8007554 <_ZL12MX_GPIO_Initv+0x1c8>)
 800747a:	f001 f8c5 	bl	8008608 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 Display_DC_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|Display_DC_Pin;
 800747e:	2303      	movs	r3, #3
 8007480:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007482:	2301      	movs	r3, #1
 8007484:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007486:	2301      	movs	r3, #1
 8007488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800748a:	2300      	movs	r3, #0
 800748c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800748e:	f107 030c 	add.w	r3, r7, #12
 8007492:	4619      	mov	r1, r3
 8007494:	4830      	ldr	r0, [pc, #192]	@ (8007558 <_ZL12MX_GPIO_Initv+0x1cc>)
 8007496:	f001 f8b7 	bl	8008608 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 800749a:	f240 4304 	movw	r3, #1028	@ 0x404
 800749e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80074a0:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80074a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074a6:	2300      	movs	r3, #0
 80074a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074aa:	f107 030c 	add.w	r3, r7, #12
 80074ae:	4619      	mov	r1, r3
 80074b0:	4829      	ldr	r0, [pc, #164]	@ (8007558 <_ZL12MX_GPIO_Initv+0x1cc>)
 80074b2:	f001 f8a9 	bl	8008608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80074b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80074ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80074bc:	2300      	movs	r3, #0
 80074be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074c0:	2300      	movs	r3, #0
 80074c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074c4:	f107 030c 	add.w	r3, r7, #12
 80074c8:	4619      	mov	r1, r3
 80074ca:	4823      	ldr	r0, [pc, #140]	@ (8007558 <_ZL12MX_GPIO_Initv+0x1cc>)
 80074cc:	f001 f89c 	bl	8008608 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB4 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_8;
 80074d0:	f248 1310 	movw	r3, #33040	@ 0x8110
 80074d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80074d6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80074da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074dc:	2300      	movs	r3, #0
 80074de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074e0:	f107 030c 	add.w	r3, r7, #12
 80074e4:	4619      	mov	r1, r3
 80074e6:	481c      	ldr	r0, [pc, #112]	@ (8007558 <_ZL12MX_GPIO_Initv+0x1cc>)
 80074e8:	f001 f88e 	bl	8008608 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80074ec:	2328      	movs	r3, #40	@ 0x28
 80074ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074f0:	2301      	movs	r3, #1
 80074f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074f4:	2300      	movs	r3, #0
 80074f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074f8:	2300      	movs	r3, #0
 80074fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074fc:	f107 030c 	add.w	r3, r7, #12
 8007500:	4619      	mov	r1, r3
 8007502:	4815      	ldr	r0, [pc, #84]	@ (8007558 <_ZL12MX_GPIO_Initv+0x1cc>)
 8007504:	f001 f880 	bl	8008608 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8007508:	2200      	movs	r2, #0
 800750a:	2100      	movs	r1, #0
 800750c:	2008      	movs	r0, #8
 800750e:	f001 f844 	bl	800859a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8007512:	2008      	movs	r0, #8
 8007514:	f001 f85d 	bl	80085d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8007518:	2200      	movs	r2, #0
 800751a:	2100      	movs	r1, #0
 800751c:	200a      	movs	r0, #10
 800751e:	f001 f83c 	bl	800859a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8007522:	200a      	movs	r0, #10
 8007524:	f001 f855 	bl	80085d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8007528:	2200      	movs	r2, #0
 800752a:	2100      	movs	r1, #0
 800752c:	2017      	movs	r0, #23
 800752e:	f001 f834 	bl	800859a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8007532:	2017      	movs	r0, #23
 8007534:	f001 f84d 	bl	80085d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8007538:	2200      	movs	r2, #0
 800753a:	2100      	movs	r1, #0
 800753c:	2028      	movs	r0, #40	@ 0x28
 800753e:	f001 f82c 	bl	800859a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007542:	2028      	movs	r0, #40	@ 0x28
 8007544:	f001 f845 	bl	80085d2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8007548:	bf00      	nop
 800754a:	3720      	adds	r7, #32
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	40023800 	.word	0x40023800
 8007554:	40020000 	.word	0x40020000
 8007558:	40020400 	.word	0x40020400
 800755c:	40020800 	.word	0x40020800

08007560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007560:	b480      	push	{r7}
 8007562:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007564:	b672      	cpsid	i
}
 8007566:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007568:	bf00      	nop
 800756a:	e7fd      	b.n	8007568 <Error_Handler+0x8>

0800756c <SPI1_Init>:

SPI_HandleTypeDef Hspi;

/* SPI5 init function */
void SPI1_Init(void)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	af00      	add	r7, sp, #0
	Hspi.Instance = SPI1;
 8007570:	4b17      	ldr	r3, [pc, #92]	@ (80075d0 <SPI1_Init+0x64>)
 8007572:	4a18      	ldr	r2, [pc, #96]	@ (80075d4 <SPI1_Init+0x68>)
 8007574:	601a      	str	r2, [r3, #0]
	Hspi.Init.Mode = SPI_MODE_MASTER;
 8007576:	4b16      	ldr	r3, [pc, #88]	@ (80075d0 <SPI1_Init+0x64>)
 8007578:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800757c:	605a      	str	r2, [r3, #4]
	Hspi.Init.Direction = SPI_DIRECTION_2LINES;
 800757e:	4b14      	ldr	r3, [pc, #80]	@ (80075d0 <SPI1_Init+0x64>)
 8007580:	2200      	movs	r2, #0
 8007582:	609a      	str	r2, [r3, #8]
	Hspi.Init.DataSize = SPI_DATASIZE_8BIT;
 8007584:	4b12      	ldr	r3, [pc, #72]	@ (80075d0 <SPI1_Init+0x64>)
 8007586:	2200      	movs	r2, #0
 8007588:	60da      	str	r2, [r3, #12]
	Hspi.Init.CLKPolarity = SPI_POLARITY_LOW;
 800758a:	4b11      	ldr	r3, [pc, #68]	@ (80075d0 <SPI1_Init+0x64>)
 800758c:	2200      	movs	r2, #0
 800758e:	611a      	str	r2, [r3, #16]
	Hspi.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007590:	4b0f      	ldr	r3, [pc, #60]	@ (80075d0 <SPI1_Init+0x64>)
 8007592:	2200      	movs	r2, #0
 8007594:	615a      	str	r2, [r3, #20]
	Hspi.Init.NSS = SPI_NSS_SOFT;
 8007596:	4b0e      	ldr	r3, [pc, #56]	@ (80075d0 <SPI1_Init+0x64>)
 8007598:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800759c:	619a      	str	r2, [r3, #24]
	Hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800759e:	4b0c      	ldr	r3, [pc, #48]	@ (80075d0 <SPI1_Init+0x64>)
 80075a0:	2200      	movs	r2, #0
 80075a2:	61da      	str	r2, [r3, #28]
	Hspi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80075a4:	4b0a      	ldr	r3, [pc, #40]	@ (80075d0 <SPI1_Init+0x64>)
 80075a6:	2200      	movs	r2, #0
 80075a8:	621a      	str	r2, [r3, #32]
	Hspi.Init.TIMode = SPI_TIMODE_DISABLE;
 80075aa:	4b09      	ldr	r3, [pc, #36]	@ (80075d0 <SPI1_Init+0x64>)
 80075ac:	2200      	movs	r2, #0
 80075ae:	625a      	str	r2, [r3, #36]	@ 0x24
	Hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075b0:	4b07      	ldr	r3, [pc, #28]	@ (80075d0 <SPI1_Init+0x64>)
 80075b2:	2200      	movs	r2, #0
 80075b4:	629a      	str	r2, [r3, #40]	@ 0x28
	Hspi.Init.CRCPolynomial = 7;
 80075b6:	4b06      	ldr	r3, [pc, #24]	@ (80075d0 <SPI1_Init+0x64>)
 80075b8:	2207      	movs	r2, #7
 80075ba:	62da      	str	r2, [r3, #44]	@ 0x2c
//  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
//  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  if (HAL_SPI_Init(&Hspi) != HAL_OK)
 80075bc:	4804      	ldr	r0, [pc, #16]	@ (80075d0 <SPI1_Init+0x64>)
 80075be:	f002 fe6d 	bl	800a29c <HAL_SPI_Init>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d001      	beq.n	80075cc <SPI1_Init+0x60>
  {
    Error_Handler();
 80075c8:	f7ff ffca 	bl	8007560 <Error_Handler>
  }

}
 80075cc:	bf00      	nop
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	2000043c 	.word	0x2000043c
 80075d4:	40013000 	.word	0x40013000

080075d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80075de:	2300      	movs	r3, #0
 80075e0:	607b      	str	r3, [r7, #4]
 80075e2:	4b13      	ldr	r3, [pc, #76]	@ (8007630 <HAL_MspInit+0x58>)
 80075e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075e6:	4a12      	ldr	r2, [pc, #72]	@ (8007630 <HAL_MspInit+0x58>)
 80075e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80075ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80075ee:	4b10      	ldr	r3, [pc, #64]	@ (8007630 <HAL_MspInit+0x58>)
 80075f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075f6:	607b      	str	r3, [r7, #4]
 80075f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80075fa:	2300      	movs	r3, #0
 80075fc:	603b      	str	r3, [r7, #0]
 80075fe:	4b0c      	ldr	r3, [pc, #48]	@ (8007630 <HAL_MspInit+0x58>)
 8007600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007602:	4a0b      	ldr	r2, [pc, #44]	@ (8007630 <HAL_MspInit+0x58>)
 8007604:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007608:	6413      	str	r3, [r2, #64]	@ 0x40
 800760a:	4b09      	ldr	r3, [pc, #36]	@ (8007630 <HAL_MspInit+0x58>)
 800760c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800760e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007612:	603b      	str	r3, [r7, #0]
 8007614:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8007616:	2200      	movs	r2, #0
 8007618:	2100      	movs	r1, #0
 800761a:	2005      	movs	r0, #5
 800761c:	f000 ffbd 	bl	800859a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8007620:	2005      	movs	r0, #5
 8007622:	f000 ffd6 	bl	80085d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007626:	bf00      	nop
 8007628:	3708      	adds	r7, #8
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	40023800 	.word	0x40023800

08007634 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b08a      	sub	sp, #40	@ 0x28
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800763c:	f107 0314 	add.w	r3, r7, #20
 8007640:	2200      	movs	r2, #0
 8007642:	601a      	str	r2, [r3, #0]
 8007644:	605a      	str	r2, [r3, #4]
 8007646:	609a      	str	r2, [r3, #8]
 8007648:	60da      	str	r2, [r3, #12]
 800764a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a17      	ldr	r2, [pc, #92]	@ (80076b0 <HAL_ADC_MspInit+0x7c>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d127      	bne.n	80076a6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007656:	2300      	movs	r3, #0
 8007658:	613b      	str	r3, [r7, #16]
 800765a:	4b16      	ldr	r3, [pc, #88]	@ (80076b4 <HAL_ADC_MspInit+0x80>)
 800765c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800765e:	4a15      	ldr	r2, [pc, #84]	@ (80076b4 <HAL_ADC_MspInit+0x80>)
 8007660:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007664:	6453      	str	r3, [r2, #68]	@ 0x44
 8007666:	4b13      	ldr	r3, [pc, #76]	@ (80076b4 <HAL_ADC_MspInit+0x80>)
 8007668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800766a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800766e:	613b      	str	r3, [r7, #16]
 8007670:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007672:	2300      	movs	r3, #0
 8007674:	60fb      	str	r3, [r7, #12]
 8007676:	4b0f      	ldr	r3, [pc, #60]	@ (80076b4 <HAL_ADC_MspInit+0x80>)
 8007678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800767a:	4a0e      	ldr	r2, [pc, #56]	@ (80076b4 <HAL_ADC_MspInit+0x80>)
 800767c:	f043 0301 	orr.w	r3, r3, #1
 8007680:	6313      	str	r3, [r2, #48]	@ 0x30
 8007682:	4b0c      	ldr	r3, [pc, #48]	@ (80076b4 <HAL_ADC_MspInit+0x80>)
 8007684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007686:	f003 0301 	and.w	r3, r3, #1
 800768a:	60fb      	str	r3, [r7, #12]
 800768c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800768e:	2308      	movs	r3, #8
 8007690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007692:	2303      	movs	r3, #3
 8007694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007696:	2300      	movs	r3, #0
 8007698:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800769a:	f107 0314 	add.w	r3, r7, #20
 800769e:	4619      	mov	r1, r3
 80076a0:	4805      	ldr	r0, [pc, #20]	@ (80076b8 <HAL_ADC_MspInit+0x84>)
 80076a2:	f000 ffb1 	bl	8008608 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80076a6:	bf00      	nop
 80076a8:	3728      	adds	r7, #40	@ 0x28
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	40012000 	.word	0x40012000
 80076b4:	40023800 	.word	0x40023800
 80076b8:	40020000 	.word	0x40020000

080076bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b08a      	sub	sp, #40	@ 0x28
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076c4:	f107 0314 	add.w	r3, r7, #20
 80076c8:	2200      	movs	r2, #0
 80076ca:	601a      	str	r2, [r3, #0]
 80076cc:	605a      	str	r2, [r3, #4]
 80076ce:	609a      	str	r2, [r3, #8]
 80076d0:	60da      	str	r2, [r3, #12]
 80076d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a19      	ldr	r2, [pc, #100]	@ (8007740 <HAL_I2C_MspInit+0x84>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d12b      	bne.n	8007736 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80076de:	2300      	movs	r3, #0
 80076e0:	613b      	str	r3, [r7, #16]
 80076e2:	4b18      	ldr	r3, [pc, #96]	@ (8007744 <HAL_I2C_MspInit+0x88>)
 80076e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076e6:	4a17      	ldr	r2, [pc, #92]	@ (8007744 <HAL_I2C_MspInit+0x88>)
 80076e8:	f043 0302 	orr.w	r3, r3, #2
 80076ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80076ee:	4b15      	ldr	r3, [pc, #84]	@ (8007744 <HAL_I2C_MspInit+0x88>)
 80076f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076f2:	f003 0302 	and.w	r3, r3, #2
 80076f6:	613b      	str	r3, [r7, #16]
 80076f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80076fa:	23c0      	movs	r3, #192	@ 0xc0
 80076fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80076fe:	2312      	movs	r3, #18
 8007700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007702:	2300      	movs	r3, #0
 8007704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007706:	2303      	movs	r3, #3
 8007708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800770a:	2304      	movs	r3, #4
 800770c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800770e:	f107 0314 	add.w	r3, r7, #20
 8007712:	4619      	mov	r1, r3
 8007714:	480c      	ldr	r0, [pc, #48]	@ (8007748 <HAL_I2C_MspInit+0x8c>)
 8007716:	f000 ff77 	bl	8008608 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800771a:	2300      	movs	r3, #0
 800771c:	60fb      	str	r3, [r7, #12]
 800771e:	4b09      	ldr	r3, [pc, #36]	@ (8007744 <HAL_I2C_MspInit+0x88>)
 8007720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007722:	4a08      	ldr	r2, [pc, #32]	@ (8007744 <HAL_I2C_MspInit+0x88>)
 8007724:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007728:	6413      	str	r3, [r2, #64]	@ 0x40
 800772a:	4b06      	ldr	r3, [pc, #24]	@ (8007744 <HAL_I2C_MspInit+0x88>)
 800772c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800772e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007732:	60fb      	str	r3, [r7, #12]
 8007734:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8007736:	bf00      	nop
 8007738:	3728      	adds	r7, #40	@ 0x28
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	40005400 	.word	0x40005400
 8007744:	40023800 	.word	0x40023800
 8007748:	40020400 	.word	0x40020400

0800774c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b08a      	sub	sp, #40	@ 0x28
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007754:	f107 0314 	add.w	r3, r7, #20
 8007758:	2200      	movs	r2, #0
 800775a:	601a      	str	r2, [r3, #0]
 800775c:	605a      	str	r2, [r3, #4]
 800775e:	609a      	str	r2, [r3, #8]
 8007760:	60da      	str	r2, [r3, #12]
 8007762:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a19      	ldr	r2, [pc, #100]	@ (80077d0 <HAL_SPI_MspInit+0x84>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d12b      	bne.n	80077c6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800776e:	2300      	movs	r3, #0
 8007770:	613b      	str	r3, [r7, #16]
 8007772:	4b18      	ldr	r3, [pc, #96]	@ (80077d4 <HAL_SPI_MspInit+0x88>)
 8007774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007776:	4a17      	ldr	r2, [pc, #92]	@ (80077d4 <HAL_SPI_MspInit+0x88>)
 8007778:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800777c:	6453      	str	r3, [r2, #68]	@ 0x44
 800777e:	4b15      	ldr	r3, [pc, #84]	@ (80077d4 <HAL_SPI_MspInit+0x88>)
 8007780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007782:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007786:	613b      	str	r3, [r7, #16]
 8007788:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800778a:	2300      	movs	r3, #0
 800778c:	60fb      	str	r3, [r7, #12]
 800778e:	4b11      	ldr	r3, [pc, #68]	@ (80077d4 <HAL_SPI_MspInit+0x88>)
 8007790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007792:	4a10      	ldr	r2, [pc, #64]	@ (80077d4 <HAL_SPI_MspInit+0x88>)
 8007794:	f043 0301 	orr.w	r3, r3, #1
 8007798:	6313      	str	r3, [r2, #48]	@ 0x30
 800779a:	4b0e      	ldr	r3, [pc, #56]	@ (80077d4 <HAL_SPI_MspInit+0x88>)
 800779c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800779e:	f003 0301 	and.w	r3, r3, #1
 80077a2:	60fb      	str	r3, [r7, #12]
 80077a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80077a6:	23a0      	movs	r3, #160	@ 0xa0
 80077a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077aa:	2302      	movs	r3, #2
 80077ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077ae:	2300      	movs	r3, #0
 80077b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077b2:	2303      	movs	r3, #3
 80077b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80077b6:	2305      	movs	r3, #5
 80077b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077ba:	f107 0314 	add.w	r3, r7, #20
 80077be:	4619      	mov	r1, r3
 80077c0:	4805      	ldr	r0, [pc, #20]	@ (80077d8 <HAL_SPI_MspInit+0x8c>)
 80077c2:	f000 ff21 	bl	8008608 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80077c6:	bf00      	nop
 80077c8:	3728      	adds	r7, #40	@ 0x28
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	40013000 	.word	0x40013000
 80077d4:	40023800 	.word	0x40023800
 80077d8:	40020000 	.word	0x40020000

080077dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077ec:	d116      	bne.n	800781c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80077ee:	2300      	movs	r3, #0
 80077f0:	60fb      	str	r3, [r7, #12]
 80077f2:	4b1a      	ldr	r3, [pc, #104]	@ (800785c <HAL_TIM_Base_MspInit+0x80>)
 80077f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077f6:	4a19      	ldr	r2, [pc, #100]	@ (800785c <HAL_TIM_Base_MspInit+0x80>)
 80077f8:	f043 0301 	orr.w	r3, r3, #1
 80077fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80077fe:	4b17      	ldr	r3, [pc, #92]	@ (800785c <HAL_TIM_Base_MspInit+0x80>)
 8007800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007802:	f003 0301 	and.w	r3, r3, #1
 8007806:	60fb      	str	r3, [r7, #12]
 8007808:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800780a:	2200      	movs	r2, #0
 800780c:	2100      	movs	r1, #0
 800780e:	201c      	movs	r0, #28
 8007810:	f000 fec3 	bl	800859a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007814:	201c      	movs	r0, #28
 8007816:	f000 fedc 	bl	80085d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800781a:	e01a      	b.n	8007852 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a0f      	ldr	r2, [pc, #60]	@ (8007860 <HAL_TIM_Base_MspInit+0x84>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d115      	bne.n	8007852 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007826:	2300      	movs	r3, #0
 8007828:	60bb      	str	r3, [r7, #8]
 800782a:	4b0c      	ldr	r3, [pc, #48]	@ (800785c <HAL_TIM_Base_MspInit+0x80>)
 800782c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800782e:	4a0b      	ldr	r2, [pc, #44]	@ (800785c <HAL_TIM_Base_MspInit+0x80>)
 8007830:	f043 0302 	orr.w	r3, r3, #2
 8007834:	6413      	str	r3, [r2, #64]	@ 0x40
 8007836:	4b09      	ldr	r3, [pc, #36]	@ (800785c <HAL_TIM_Base_MspInit+0x80>)
 8007838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800783a:	f003 0302 	and.w	r3, r3, #2
 800783e:	60bb      	str	r3, [r7, #8]
 8007840:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007842:	2200      	movs	r2, #0
 8007844:	2100      	movs	r1, #0
 8007846:	201d      	movs	r0, #29
 8007848:	f000 fea7 	bl	800859a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800784c:	201d      	movs	r0, #29
 800784e:	f000 fec0 	bl	80085d2 <HAL_NVIC_EnableIRQ>
}
 8007852:	bf00      	nop
 8007854:	3710      	adds	r7, #16
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	40023800 	.word	0x40023800
 8007860:	40000400 	.word	0x40000400

08007864 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b088      	sub	sp, #32
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800786c:	f107 030c 	add.w	r3, r7, #12
 8007870:	2200      	movs	r2, #0
 8007872:	601a      	str	r2, [r3, #0]
 8007874:	605a      	str	r2, [r3, #4]
 8007876:	609a      	str	r2, [r3, #8]
 8007878:	60da      	str	r2, [r3, #12]
 800787a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007884:	d11e      	bne.n	80078c4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007886:	2300      	movs	r3, #0
 8007888:	60bb      	str	r3, [r7, #8]
 800788a:	4b10      	ldr	r3, [pc, #64]	@ (80078cc <HAL_TIM_MspPostInit+0x68>)
 800788c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800788e:	4a0f      	ldr	r2, [pc, #60]	@ (80078cc <HAL_TIM_MspPostInit+0x68>)
 8007890:	f043 0301 	orr.w	r3, r3, #1
 8007894:	6313      	str	r3, [r2, #48]	@ 0x30
 8007896:	4b0d      	ldr	r3, [pc, #52]	@ (80078cc <HAL_TIM_MspPostInit+0x68>)
 8007898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800789a:	f003 0301 	and.w	r3, r3, #1
 800789e:	60bb      	str	r3, [r7, #8]
 80078a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80078a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078a8:	2302      	movs	r3, #2
 80078aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80078ac:	2301      	movs	r3, #1
 80078ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078b0:	2300      	movs	r3, #0
 80078b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80078b4:	2301      	movs	r3, #1
 80078b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078b8:	f107 030c 	add.w	r3, r7, #12
 80078bc:	4619      	mov	r1, r3
 80078be:	4804      	ldr	r0, [pc, #16]	@ (80078d0 <HAL_TIM_MspPostInit+0x6c>)
 80078c0:	f000 fea2 	bl	8008608 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80078c4:	bf00      	nop
 80078c6:	3720      	adds	r7, #32
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	40023800 	.word	0x40023800
 80078d0:	40020000 	.word	0x40020000

080078d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b08a      	sub	sp, #40	@ 0x28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078dc:	f107 0314 	add.w	r3, r7, #20
 80078e0:	2200      	movs	r2, #0
 80078e2:	601a      	str	r2, [r3, #0]
 80078e4:	605a      	str	r2, [r3, #4]
 80078e6:	609a      	str	r2, [r3, #8]
 80078e8:	60da      	str	r2, [r3, #12]
 80078ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a19      	ldr	r2, [pc, #100]	@ (8007958 <HAL_UART_MspInit+0x84>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d12c      	bne.n	8007950 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80078f6:	2300      	movs	r3, #0
 80078f8:	613b      	str	r3, [r7, #16]
 80078fa:	4b18      	ldr	r3, [pc, #96]	@ (800795c <HAL_UART_MspInit+0x88>)
 80078fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078fe:	4a17      	ldr	r2, [pc, #92]	@ (800795c <HAL_UART_MspInit+0x88>)
 8007900:	f043 0310 	orr.w	r3, r3, #16
 8007904:	6453      	str	r3, [r2, #68]	@ 0x44
 8007906:	4b15      	ldr	r3, [pc, #84]	@ (800795c <HAL_UART_MspInit+0x88>)
 8007908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800790a:	f003 0310 	and.w	r3, r3, #16
 800790e:	613b      	str	r3, [r7, #16]
 8007910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007912:	2300      	movs	r3, #0
 8007914:	60fb      	str	r3, [r7, #12]
 8007916:	4b11      	ldr	r3, [pc, #68]	@ (800795c <HAL_UART_MspInit+0x88>)
 8007918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800791a:	4a10      	ldr	r2, [pc, #64]	@ (800795c <HAL_UART_MspInit+0x88>)
 800791c:	f043 0301 	orr.w	r3, r3, #1
 8007920:	6313      	str	r3, [r2, #48]	@ 0x30
 8007922:	4b0e      	ldr	r3, [pc, #56]	@ (800795c <HAL_UART_MspInit+0x88>)
 8007924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007926:	f003 0301 	and.w	r3, r3, #1
 800792a:	60fb      	str	r3, [r7, #12]
 800792c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800792e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8007932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007934:	2302      	movs	r3, #2
 8007936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007938:	2300      	movs	r3, #0
 800793a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800793c:	2303      	movs	r3, #3
 800793e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007940:	2307      	movs	r3, #7
 8007942:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007944:	f107 0314 	add.w	r3, r7, #20
 8007948:	4619      	mov	r1, r3
 800794a:	4805      	ldr	r0, [pc, #20]	@ (8007960 <HAL_UART_MspInit+0x8c>)
 800794c:	f000 fe5c 	bl	8008608 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8007950:	bf00      	nop
 8007952:	3728      	adds	r7, #40	@ 0x28
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	40011000 	.word	0x40011000
 800795c:	40023800 	.word	0x40023800
 8007960:	40020000 	.word	0x40020000

08007964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007964:	b480      	push	{r7}
 8007966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007968:	bf00      	nop
 800796a:	e7fd      	b.n	8007968 <NMI_Handler+0x4>

0800796c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800796c:	b480      	push	{r7}
 800796e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007970:	bf00      	nop
 8007972:	e7fd      	b.n	8007970 <HardFault_Handler+0x4>

08007974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007974:	b480      	push	{r7}
 8007976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007978:	bf00      	nop
 800797a:	e7fd      	b.n	8007978 <MemManage_Handler+0x4>

0800797c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800797c:	b480      	push	{r7}
 800797e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007980:	bf00      	nop
 8007982:	e7fd      	b.n	8007980 <BusFault_Handler+0x4>

08007984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007984:	b480      	push	{r7}
 8007986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007988:	bf00      	nop
 800798a:	e7fd      	b.n	8007988 <UsageFault_Handler+0x4>

0800798c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800798c:	b480      	push	{r7}
 800798e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007990:	bf00      	nop
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr

0800799a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800799a:	b480      	push	{r7}
 800799c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800799e:	bf00      	nop
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80079a8:	b480      	push	{r7}
 80079aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80079ac:	bf00      	nop
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr

080079b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80079ba:	f000 f99b 	bl	8007cf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80079be:	bf00      	nop
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80079c2:	b480      	push	{r7}
 80079c4:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80079c6:	bf00      	nop
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80079d4:	2004      	movs	r0, #4
 80079d6:	f000 ffcd 	bl	8008974 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80079da:	bf00      	nop
 80079dc:	bd80      	pop	{r7, pc}

080079de <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80079e2:	2010      	movs	r0, #16
 80079e4:	f000 ffc6 	bl	8008974 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80079e8:	bf00      	nop
 80079ea:	bd80      	pop	{r7, pc}

080079ec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80079f0:	2040      	movs	r0, #64	@ 0x40
 80079f2:	f000 ffbf 	bl	8008974 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80079f6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80079fa:	f000 ffbb 	bl	8008974 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80079fe:	bf00      	nop
 8007a00:	bd80      	pop	{r7, pc}
	...

08007a04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007a08:	4802      	ldr	r0, [pc, #8]	@ (8007a14 <TIM2_IRQHandler+0x10>)
 8007a0a:	f003 f8ad 	bl	800ab68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007a0e:	bf00      	nop
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	20000364 	.word	0x20000364

08007a18 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007a1c:	4802      	ldr	r0, [pc, #8]	@ (8007a28 <TIM3_IRQHandler+0x10>)
 8007a1e:	f003 f8a3 	bl	800ab68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007a22:	bf00      	nop
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	200003ac 	.word	0x200003ac

08007a2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8007a30:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8007a34:	f000 ff9e 	bl	8008974 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8007a38:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8007a3c:	f000 ff9a 	bl	8008974 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8007a40:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007a44:	f000 ff96 	bl	8008974 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007a48:	bf00      	nop
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	af00      	add	r7, sp, #0
  return 1;
 8007a50:	2301      	movs	r3, #1
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <_kill>:

int _kill(int pid, int sig)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007a66:	f005 f98f 	bl	800cd88 <__errno>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2216      	movs	r2, #22
 8007a6e:	601a      	str	r2, [r3, #0]
  return -1;
 8007a70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3708      	adds	r7, #8
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <_exit>:

void _exit (int status)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007a84:	f04f 31ff 	mov.w	r1, #4294967295
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f7ff ffe7 	bl	8007a5c <_kill>
  while (1) {}    /* Make sure we hang here */
 8007a8e:	bf00      	nop
 8007a90:	e7fd      	b.n	8007a8e <_exit+0x12>

08007a92 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b086      	sub	sp, #24
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	60f8      	str	r0, [r7, #12]
 8007a9a:	60b9      	str	r1, [r7, #8]
 8007a9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	617b      	str	r3, [r7, #20]
 8007aa2:	e00a      	b.n	8007aba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007aa4:	f3af 8000 	nop.w
 8007aa8:	4601      	mov	r1, r0
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	1c5a      	adds	r2, r3, #1
 8007aae:	60ba      	str	r2, [r7, #8]
 8007ab0:	b2ca      	uxtb	r2, r1
 8007ab2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	617b      	str	r3, [r7, #20]
 8007aba:	697a      	ldr	r2, [r7, #20]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	dbf0      	blt.n	8007aa4 <_read+0x12>
  }

  return len;
 8007ac2:	687b      	ldr	r3, [r7, #4]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3718      	adds	r7, #24
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b086      	sub	sp, #24
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007ad8:	2300      	movs	r3, #0
 8007ada:	617b      	str	r3, [r7, #20]
 8007adc:	e009      	b.n	8007af2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	1c5a      	adds	r2, r3, #1
 8007ae2:	60ba      	str	r2, [r7, #8]
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	3301      	adds	r3, #1
 8007af0:	617b      	str	r3, [r7, #20]
 8007af2:	697a      	ldr	r2, [r7, #20]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	dbf1      	blt.n	8007ade <_write+0x12>
  }
  return len;
 8007afa:	687b      	ldr	r3, [r7, #4]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3718      	adds	r7, #24
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <_close>:

int _close(int file)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007b0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007b2c:	605a      	str	r2, [r3, #4]
  return 0;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <_isatty>:

int _isatty(int file)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007b44:	2301      	movs	r3, #1
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	370c      	adds	r7, #12
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr

08007b52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007b52:	b480      	push	{r7}
 8007b54:	b085      	sub	sp, #20
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	60f8      	str	r0, [r7, #12]
 8007b5a:	60b9      	str	r1, [r7, #8]
 8007b5c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b086      	sub	sp, #24
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007b74:	4a14      	ldr	r2, [pc, #80]	@ (8007bc8 <_sbrk+0x5c>)
 8007b76:	4b15      	ldr	r3, [pc, #84]	@ (8007bcc <_sbrk+0x60>)
 8007b78:	1ad3      	subs	r3, r2, r3
 8007b7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007b80:	4b13      	ldr	r3, [pc, #76]	@ (8007bd0 <_sbrk+0x64>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d102      	bne.n	8007b8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007b88:	4b11      	ldr	r3, [pc, #68]	@ (8007bd0 <_sbrk+0x64>)
 8007b8a:	4a12      	ldr	r2, [pc, #72]	@ (8007bd4 <_sbrk+0x68>)
 8007b8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007b8e:	4b10      	ldr	r3, [pc, #64]	@ (8007bd0 <_sbrk+0x64>)
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4413      	add	r3, r2
 8007b96:	693a      	ldr	r2, [r7, #16]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d207      	bcs.n	8007bac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007b9c:	f005 f8f4 	bl	800cd88 <__errno>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	220c      	movs	r2, #12
 8007ba4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8007baa:	e009      	b.n	8007bc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007bac:	4b08      	ldr	r3, [pc, #32]	@ (8007bd0 <_sbrk+0x64>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007bb2:	4b07      	ldr	r3, [pc, #28]	@ (8007bd0 <_sbrk+0x64>)
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4413      	add	r3, r2
 8007bba:	4a05      	ldr	r2, [pc, #20]	@ (8007bd0 <_sbrk+0x64>)
 8007bbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3718      	adds	r7, #24
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	20020000 	.word	0x20020000
 8007bcc:	00000400 	.word	0x00000400
 8007bd0:	20000494 	.word	0x20000494
 8007bd4:	200005f0 	.word	0x200005f0

08007bd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007bdc:	4b06      	ldr	r3, [pc, #24]	@ (8007bf8 <SystemInit+0x20>)
 8007bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007be2:	4a05      	ldr	r2, [pc, #20]	@ (8007bf8 <SystemInit+0x20>)
 8007be4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007be8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007bec:	bf00      	nop
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr
 8007bf6:	bf00      	nop
 8007bf8:	e000ed00 	.word	0xe000ed00

08007bfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8007bfc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007c34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007c00:	f7ff ffea 	bl	8007bd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007c04:	480c      	ldr	r0, [pc, #48]	@ (8007c38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007c06:	490d      	ldr	r1, [pc, #52]	@ (8007c3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007c08:	4a0d      	ldr	r2, [pc, #52]	@ (8007c40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007c0c:	e002      	b.n	8007c14 <LoopCopyDataInit>

08007c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007c12:	3304      	adds	r3, #4

08007c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007c18:	d3f9      	bcc.n	8007c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8007c44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007c1c:	4c0a      	ldr	r4, [pc, #40]	@ (8007c48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007c20:	e001      	b.n	8007c26 <LoopFillZerobss>

08007c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007c24:	3204      	adds	r2, #4

08007c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007c28:	d3fb      	bcc.n	8007c22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007c2a:	f005 f8b3 	bl	800cd94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007c2e:	f7ff f921 	bl	8006e74 <main>
  bx  lr    
 8007c32:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8007c34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007c3c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8007c40:	0800fba8 	.word	0x0800fba8
  ldr r2, =_sbss
 8007c44:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8007c48:	200005ec 	.word	0x200005ec

08007c4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007c4c:	e7fe      	b.n	8007c4c <ADC_IRQHandler>
	...

08007c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007c54:	4b0e      	ldr	r3, [pc, #56]	@ (8007c90 <HAL_Init+0x40>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a0d      	ldr	r2, [pc, #52]	@ (8007c90 <HAL_Init+0x40>)
 8007c5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007c5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007c60:	4b0b      	ldr	r3, [pc, #44]	@ (8007c90 <HAL_Init+0x40>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a0a      	ldr	r2, [pc, #40]	@ (8007c90 <HAL_Init+0x40>)
 8007c66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007c6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007c6c:	4b08      	ldr	r3, [pc, #32]	@ (8007c90 <HAL_Init+0x40>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a07      	ldr	r2, [pc, #28]	@ (8007c90 <HAL_Init+0x40>)
 8007c72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007c78:	2003      	movs	r0, #3
 8007c7a:	f000 fc83 	bl	8008584 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007c7e:	200f      	movs	r0, #15
 8007c80:	f000 f808 	bl	8007c94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007c84:	f7ff fca8 	bl	80075d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	40023c00 	.word	0x40023c00

08007c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007c9c:	4b12      	ldr	r3, [pc, #72]	@ (8007ce8 <HAL_InitTick+0x54>)
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	4b12      	ldr	r3, [pc, #72]	@ (8007cec <HAL_InitTick+0x58>)
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8007cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f000 fc9b 	bl	80085ee <HAL_SYSTICK_Config>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d001      	beq.n	8007cc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e00e      	b.n	8007ce0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2b0f      	cmp	r3, #15
 8007cc6:	d80a      	bhi.n	8007cde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007cc8:	2200      	movs	r2, #0
 8007cca:	6879      	ldr	r1, [r7, #4]
 8007ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd0:	f000 fc63 	bl	800859a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007cd4:	4a06      	ldr	r2, [pc, #24]	@ (8007cf0 <HAL_InitTick+0x5c>)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	e000      	b.n	8007ce0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	20000004 	.word	0x20000004
 8007cec:	2000000c 	.word	0x2000000c
 8007cf0:	20000008 	.word	0x20000008

08007cf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007cf8:	4b06      	ldr	r3, [pc, #24]	@ (8007d14 <HAL_IncTick+0x20>)
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	4b06      	ldr	r3, [pc, #24]	@ (8007d18 <HAL_IncTick+0x24>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4413      	add	r3, r2
 8007d04:	4a04      	ldr	r2, [pc, #16]	@ (8007d18 <HAL_IncTick+0x24>)
 8007d06:	6013      	str	r3, [r2, #0]
}
 8007d08:	bf00      	nop
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop
 8007d14:	2000000c 	.word	0x2000000c
 8007d18:	20000498 	.word	0x20000498

08007d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8007d20:	4b03      	ldr	r3, [pc, #12]	@ (8007d30 <HAL_GetTick+0x14>)
 8007d22:	681b      	ldr	r3, [r3, #0]
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop
 8007d30:	20000498 	.word	0x20000498

08007d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007d3c:	f7ff ffee 	bl	8007d1c <HAL_GetTick>
 8007d40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d4c:	d005      	beq.n	8007d5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8007d78 <HAL_Delay+0x44>)
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	461a      	mov	r2, r3
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	4413      	add	r3, r2
 8007d58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007d5a:	bf00      	nop
 8007d5c:	f7ff ffde 	bl	8007d1c <HAL_GetTick>
 8007d60:	4602      	mov	r2, r0
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	1ad3      	subs	r3, r2, r3
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d8f7      	bhi.n	8007d5c <HAL_Delay+0x28>
  {
  }
}
 8007d6c:	bf00      	nop
 8007d6e:	bf00      	nop
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	2000000c 	.word	0x2000000c

08007d7c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007d84:	2300      	movs	r3, #0
 8007d86:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d101      	bne.n	8007d92 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e033      	b.n	8007dfa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d109      	bne.n	8007dae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f7ff fc4a 	bl	8007634 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007db2:	f003 0310 	and.w	r3, r3, #16
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d118      	bne.n	8007dec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dbe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007dc2:	f023 0302 	bic.w	r3, r3, #2
 8007dc6:	f043 0202 	orr.w	r2, r3, #2
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fa0c 	bl	80081ec <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dde:	f023 0303 	bic.w	r3, r3, #3
 8007de2:	f043 0201 	orr.w	r2, r3, #1
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	641a      	str	r2, [r3, #64]	@ 0x40
 8007dea:	e001      	b.n	8007df0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3710      	adds	r7, #16
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
	...

08007e04 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b085      	sub	sp, #20
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d101      	bne.n	8007e1e <HAL_ADC_Start+0x1a>
 8007e1a:	2302      	movs	r3, #2
 8007e1c:	e097      	b.n	8007f4e <HAL_ADC_Start+0x14a>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	f003 0301 	and.w	r3, r3, #1
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d018      	beq.n	8007e66 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	689a      	ldr	r2, [r3, #8]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f042 0201 	orr.w	r2, r2, #1
 8007e42:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007e44:	4b45      	ldr	r3, [pc, #276]	@ (8007f5c <HAL_ADC_Start+0x158>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a45      	ldr	r2, [pc, #276]	@ (8007f60 <HAL_ADC_Start+0x15c>)
 8007e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e4e:	0c9a      	lsrs	r2, r3, #18
 8007e50:	4613      	mov	r3, r2
 8007e52:	005b      	lsls	r3, r3, #1
 8007e54:	4413      	add	r3, r2
 8007e56:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8007e58:	e002      	b.n	8007e60 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d1f9      	bne.n	8007e5a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f003 0301 	and.w	r3, r3, #1
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d15f      	bne.n	8007f34 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e78:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8007e7c:	f023 0301 	bic.w	r3, r3, #1
 8007e80:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d007      	beq.n	8007ea6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e9a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8007e9e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eaa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007eae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007eb2:	d106      	bne.n	8007ec2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eb8:	f023 0206 	bic.w	r2, r3, #6
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	645a      	str	r2, [r3, #68]	@ 0x44
 8007ec0:	e002      	b.n	8007ec8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007ed0:	4b24      	ldr	r3, [pc, #144]	@ (8007f64 <HAL_ADC_Start+0x160>)
 8007ed2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8007edc:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	f003 031f 	and.w	r3, r3, #31
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d10f      	bne.n	8007f0a <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d129      	bne.n	8007f4c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	689a      	ldr	r2, [r3, #8]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8007f06:	609a      	str	r2, [r3, #8]
 8007f08:	e020      	b.n	8007f4c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a16      	ldr	r2, [pc, #88]	@ (8007f68 <HAL_ADC_Start+0x164>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d11b      	bne.n	8007f4c <HAL_ADC_Start+0x148>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d114      	bne.n	8007f4c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	689a      	ldr	r2, [r3, #8]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8007f30:	609a      	str	r2, [r3, #8]
 8007f32:	e00b      	b.n	8007f4c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f38:	f043 0210 	orr.w	r2, r3, #16
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f44:	f043 0201 	orr.w	r2, r3, #1
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007f4c:	2300      	movs	r3, #0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3714      	adds	r7, #20
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	20000004 	.word	0x20000004
 8007f60:	431bde83 	.word	0x431bde83
 8007f64:	40012300 	.word	0x40012300
 8007f68:	40012000 	.word	0x40012000

08007f6c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	370c      	adds	r7, #12
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr
	...

08007f88 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007f92:	2300      	movs	r3, #0
 8007f94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d101      	bne.n	8007fa4 <HAL_ADC_ConfigChannel+0x1c>
 8007fa0:	2302      	movs	r3, #2
 8007fa2:	e113      	b.n	80081cc <HAL_ADC_ConfigChannel+0x244>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2b09      	cmp	r3, #9
 8007fb2:	d925      	bls.n	8008000 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68d9      	ldr	r1, [r3, #12]
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	005b      	lsls	r3, r3, #1
 8007fc6:	4413      	add	r3, r2
 8007fc8:	3b1e      	subs	r3, #30
 8007fca:	2207      	movs	r2, #7
 8007fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd0:	43da      	mvns	r2, r3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	400a      	ands	r2, r1
 8007fd8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	68d9      	ldr	r1, [r3, #12]
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	689a      	ldr	r2, [r3, #8]
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	4618      	mov	r0, r3
 8007fec:	4603      	mov	r3, r0
 8007fee:	005b      	lsls	r3, r3, #1
 8007ff0:	4403      	add	r3, r0
 8007ff2:	3b1e      	subs	r3, #30
 8007ff4:	409a      	lsls	r2, r3
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	430a      	orrs	r2, r1
 8007ffc:	60da      	str	r2, [r3, #12]
 8007ffe:	e022      	b.n	8008046 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	6919      	ldr	r1, [r3, #16]
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	b29b      	uxth	r3, r3
 800800c:	461a      	mov	r2, r3
 800800e:	4613      	mov	r3, r2
 8008010:	005b      	lsls	r3, r3, #1
 8008012:	4413      	add	r3, r2
 8008014:	2207      	movs	r2, #7
 8008016:	fa02 f303 	lsl.w	r3, r2, r3
 800801a:	43da      	mvns	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	400a      	ands	r2, r1
 8008022:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	6919      	ldr	r1, [r3, #16]
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	689a      	ldr	r2, [r3, #8]
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	b29b      	uxth	r3, r3
 8008034:	4618      	mov	r0, r3
 8008036:	4603      	mov	r3, r0
 8008038:	005b      	lsls	r3, r3, #1
 800803a:	4403      	add	r3, r0
 800803c:	409a      	lsls	r2, r3
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	430a      	orrs	r2, r1
 8008044:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	2b06      	cmp	r3, #6
 800804c:	d824      	bhi.n	8008098 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	685a      	ldr	r2, [r3, #4]
 8008058:	4613      	mov	r3, r2
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	4413      	add	r3, r2
 800805e:	3b05      	subs	r3, #5
 8008060:	221f      	movs	r2, #31
 8008062:	fa02 f303 	lsl.w	r3, r2, r3
 8008066:	43da      	mvns	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	400a      	ands	r2, r1
 800806e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	b29b      	uxth	r3, r3
 800807c:	4618      	mov	r0, r3
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	685a      	ldr	r2, [r3, #4]
 8008082:	4613      	mov	r3, r2
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	4413      	add	r3, r2
 8008088:	3b05      	subs	r3, #5
 800808a:	fa00 f203 	lsl.w	r2, r0, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	430a      	orrs	r2, r1
 8008094:	635a      	str	r2, [r3, #52]	@ 0x34
 8008096:	e04c      	b.n	8008132 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	2b0c      	cmp	r3, #12
 800809e:	d824      	bhi.n	80080ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	685a      	ldr	r2, [r3, #4]
 80080aa:	4613      	mov	r3, r2
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	4413      	add	r3, r2
 80080b0:	3b23      	subs	r3, #35	@ 0x23
 80080b2:	221f      	movs	r2, #31
 80080b4:	fa02 f303 	lsl.w	r3, r2, r3
 80080b8:	43da      	mvns	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	400a      	ands	r2, r1
 80080c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	4618      	mov	r0, r3
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	685a      	ldr	r2, [r3, #4]
 80080d4:	4613      	mov	r3, r2
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	4413      	add	r3, r2
 80080da:	3b23      	subs	r3, #35	@ 0x23
 80080dc:	fa00 f203 	lsl.w	r2, r0, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	430a      	orrs	r2, r1
 80080e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80080e8:	e023      	b.n	8008132 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	685a      	ldr	r2, [r3, #4]
 80080f4:	4613      	mov	r3, r2
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	4413      	add	r3, r2
 80080fa:	3b41      	subs	r3, #65	@ 0x41
 80080fc:	221f      	movs	r2, #31
 80080fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008102:	43da      	mvns	r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	400a      	ands	r2, r1
 800810a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	b29b      	uxth	r3, r3
 8008118:	4618      	mov	r0, r3
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	685a      	ldr	r2, [r3, #4]
 800811e:	4613      	mov	r3, r2
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	4413      	add	r3, r2
 8008124:	3b41      	subs	r3, #65	@ 0x41
 8008126:	fa00 f203 	lsl.w	r2, r0, r3
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	430a      	orrs	r2, r1
 8008130:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008132:	4b29      	ldr	r3, [pc, #164]	@ (80081d8 <HAL_ADC_ConfigChannel+0x250>)
 8008134:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a28      	ldr	r2, [pc, #160]	@ (80081dc <HAL_ADC_ConfigChannel+0x254>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d10f      	bne.n	8008160 <HAL_ADC_ConfigChannel+0x1d8>
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2b12      	cmp	r3, #18
 8008146:	d10b      	bne.n	8008160 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a1d      	ldr	r2, [pc, #116]	@ (80081dc <HAL_ADC_ConfigChannel+0x254>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d12b      	bne.n	80081c2 <HAL_ADC_ConfigChannel+0x23a>
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a1c      	ldr	r2, [pc, #112]	@ (80081e0 <HAL_ADC_ConfigChannel+0x258>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d003      	beq.n	800817c <HAL_ADC_ConfigChannel+0x1f4>
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2b11      	cmp	r3, #17
 800817a:	d122      	bne.n	80081c2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a11      	ldr	r2, [pc, #68]	@ (80081e0 <HAL_ADC_ConfigChannel+0x258>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d111      	bne.n	80081c2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800819e:	4b11      	ldr	r3, [pc, #68]	@ (80081e4 <HAL_ADC_ConfigChannel+0x25c>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a11      	ldr	r2, [pc, #68]	@ (80081e8 <HAL_ADC_ConfigChannel+0x260>)
 80081a4:	fba2 2303 	umull	r2, r3, r2, r3
 80081a8:	0c9a      	lsrs	r2, r3, #18
 80081aa:	4613      	mov	r3, r2
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	4413      	add	r3, r2
 80081b0:	005b      	lsls	r3, r3, #1
 80081b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80081b4:	e002      	b.n	80081bc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	3b01      	subs	r3, #1
 80081ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1f9      	bne.n	80081b6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3714      	adds	r7, #20
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr
 80081d8:	40012300 	.word	0x40012300
 80081dc:	40012000 	.word	0x40012000
 80081e0:	10000012 	.word	0x10000012
 80081e4:	20000004 	.word	0x20000004
 80081e8:	431bde83 	.word	0x431bde83

080081ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80081f4:	4b79      	ldr	r3, [pc, #484]	@ (80083dc <ADC_Init+0x1f0>)
 80081f6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	685a      	ldr	r2, [r3, #4]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	431a      	orrs	r2, r3
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	685a      	ldr	r2, [r3, #4]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008220:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	6859      	ldr	r1, [r3, #4]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	021a      	lsls	r2, r3, #8
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	430a      	orrs	r2, r1
 8008234:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	685a      	ldr	r2, [r3, #4]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8008244:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	6859      	ldr	r1, [r3, #4]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	689a      	ldr	r2, [r3, #8]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	430a      	orrs	r2, r1
 8008256:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	689a      	ldr	r2, [r3, #8]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008266:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	6899      	ldr	r1, [r3, #8]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	68da      	ldr	r2, [r3, #12]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	430a      	orrs	r2, r1
 8008278:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800827e:	4a58      	ldr	r2, [pc, #352]	@ (80083e0 <ADC_Init+0x1f4>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d022      	beq.n	80082ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	689a      	ldr	r2, [r3, #8]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008292:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	6899      	ldr	r1, [r3, #8]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	430a      	orrs	r2, r1
 80082a4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	689a      	ldr	r2, [r3, #8]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80082b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	6899      	ldr	r1, [r3, #8]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	430a      	orrs	r2, r1
 80082c6:	609a      	str	r2, [r3, #8]
 80082c8:	e00f      	b.n	80082ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	689a      	ldr	r2, [r3, #8]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80082d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	689a      	ldr	r2, [r3, #8]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80082e8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	689a      	ldr	r2, [r3, #8]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f022 0202 	bic.w	r2, r2, #2
 80082f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	6899      	ldr	r1, [r3, #8]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	7e1b      	ldrb	r3, [r3, #24]
 8008304:	005a      	lsls	r2, r3, #1
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	430a      	orrs	r2, r1
 800830c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d01b      	beq.n	8008350 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	685a      	ldr	r2, [r3, #4]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008326:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	685a      	ldr	r2, [r3, #4]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8008336:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	6859      	ldr	r1, [r3, #4]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008342:	3b01      	subs	r3, #1
 8008344:	035a      	lsls	r2, r3, #13
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	430a      	orrs	r2, r1
 800834c:	605a      	str	r2, [r3, #4]
 800834e:	e007      	b.n	8008360 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	685a      	ldr	r2, [r3, #4]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800835e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800836e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	69db      	ldr	r3, [r3, #28]
 800837a:	3b01      	subs	r3, #1
 800837c:	051a      	lsls	r2, r3, #20
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	430a      	orrs	r2, r1
 8008384:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	689a      	ldr	r2, [r3, #8]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008394:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	6899      	ldr	r1, [r3, #8]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80083a2:	025a      	lsls	r2, r3, #9
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	430a      	orrs	r2, r1
 80083aa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	689a      	ldr	r2, [r3, #8]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	6899      	ldr	r1, [r3, #8]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	695b      	ldr	r3, [r3, #20]
 80083c6:	029a      	lsls	r2, r3, #10
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	430a      	orrs	r2, r1
 80083ce:	609a      	str	r2, [r3, #8]
}
 80083d0:	bf00      	nop
 80083d2:	3714      	adds	r7, #20
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr
 80083dc:	40012300 	.word	0x40012300
 80083e0:	0f000001 	.word	0x0f000001

080083e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f003 0307 	and.w	r3, r3, #7
 80083f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80083f4:	4b0c      	ldr	r3, [pc, #48]	@ (8008428 <__NVIC_SetPriorityGrouping+0x44>)
 80083f6:	68db      	ldr	r3, [r3, #12]
 80083f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80083fa:	68ba      	ldr	r2, [r7, #8]
 80083fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008400:	4013      	ands	r3, r2
 8008402:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800840c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008410:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008416:	4a04      	ldr	r2, [pc, #16]	@ (8008428 <__NVIC_SetPriorityGrouping+0x44>)
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	60d3      	str	r3, [r2, #12]
}
 800841c:	bf00      	nop
 800841e:	3714      	adds	r7, #20
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr
 8008428:	e000ed00 	.word	0xe000ed00

0800842c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800842c:	b480      	push	{r7}
 800842e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008430:	4b04      	ldr	r3, [pc, #16]	@ (8008444 <__NVIC_GetPriorityGrouping+0x18>)
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	0a1b      	lsrs	r3, r3, #8
 8008436:	f003 0307 	and.w	r3, r3, #7
}
 800843a:	4618      	mov	r0, r3
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr
 8008444:	e000ed00 	.word	0xe000ed00

08008448 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	4603      	mov	r3, r0
 8008450:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008456:	2b00      	cmp	r3, #0
 8008458:	db0b      	blt.n	8008472 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800845a:	79fb      	ldrb	r3, [r7, #7]
 800845c:	f003 021f 	and.w	r2, r3, #31
 8008460:	4907      	ldr	r1, [pc, #28]	@ (8008480 <__NVIC_EnableIRQ+0x38>)
 8008462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008466:	095b      	lsrs	r3, r3, #5
 8008468:	2001      	movs	r0, #1
 800846a:	fa00 f202 	lsl.w	r2, r0, r2
 800846e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008472:	bf00      	nop
 8008474:	370c      	adds	r7, #12
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop
 8008480:	e000e100 	.word	0xe000e100

08008484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	4603      	mov	r3, r0
 800848c:	6039      	str	r1, [r7, #0]
 800848e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008494:	2b00      	cmp	r3, #0
 8008496:	db0a      	blt.n	80084ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	b2da      	uxtb	r2, r3
 800849c:	490c      	ldr	r1, [pc, #48]	@ (80084d0 <__NVIC_SetPriority+0x4c>)
 800849e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084a2:	0112      	lsls	r2, r2, #4
 80084a4:	b2d2      	uxtb	r2, r2
 80084a6:	440b      	add	r3, r1
 80084a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80084ac:	e00a      	b.n	80084c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	b2da      	uxtb	r2, r3
 80084b2:	4908      	ldr	r1, [pc, #32]	@ (80084d4 <__NVIC_SetPriority+0x50>)
 80084b4:	79fb      	ldrb	r3, [r7, #7]
 80084b6:	f003 030f 	and.w	r3, r3, #15
 80084ba:	3b04      	subs	r3, #4
 80084bc:	0112      	lsls	r2, r2, #4
 80084be:	b2d2      	uxtb	r2, r2
 80084c0:	440b      	add	r3, r1
 80084c2:	761a      	strb	r2, [r3, #24]
}
 80084c4:	bf00      	nop
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr
 80084d0:	e000e100 	.word	0xe000e100
 80084d4:	e000ed00 	.word	0xe000ed00

080084d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80084d8:	b480      	push	{r7}
 80084da:	b089      	sub	sp, #36	@ 0x24
 80084dc:	af00      	add	r7, sp, #0
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f003 0307 	and.w	r3, r3, #7
 80084ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	f1c3 0307 	rsb	r3, r3, #7
 80084f2:	2b04      	cmp	r3, #4
 80084f4:	bf28      	it	cs
 80084f6:	2304      	movcs	r3, #4
 80084f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	3304      	adds	r3, #4
 80084fe:	2b06      	cmp	r3, #6
 8008500:	d902      	bls.n	8008508 <NVIC_EncodePriority+0x30>
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	3b03      	subs	r3, #3
 8008506:	e000      	b.n	800850a <NVIC_EncodePriority+0x32>
 8008508:	2300      	movs	r3, #0
 800850a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800850c:	f04f 32ff 	mov.w	r2, #4294967295
 8008510:	69bb      	ldr	r3, [r7, #24]
 8008512:	fa02 f303 	lsl.w	r3, r2, r3
 8008516:	43da      	mvns	r2, r3
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	401a      	ands	r2, r3
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008520:	f04f 31ff 	mov.w	r1, #4294967295
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	fa01 f303 	lsl.w	r3, r1, r3
 800852a:	43d9      	mvns	r1, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008530:	4313      	orrs	r3, r2
         );
}
 8008532:	4618      	mov	r0, r3
 8008534:	3724      	adds	r7, #36	@ 0x24
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr
	...

08008540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	3b01      	subs	r3, #1
 800854c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008550:	d301      	bcc.n	8008556 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008552:	2301      	movs	r3, #1
 8008554:	e00f      	b.n	8008576 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008556:	4a0a      	ldr	r2, [pc, #40]	@ (8008580 <SysTick_Config+0x40>)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	3b01      	subs	r3, #1
 800855c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800855e:	210f      	movs	r1, #15
 8008560:	f04f 30ff 	mov.w	r0, #4294967295
 8008564:	f7ff ff8e 	bl	8008484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008568:	4b05      	ldr	r3, [pc, #20]	@ (8008580 <SysTick_Config+0x40>)
 800856a:	2200      	movs	r2, #0
 800856c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800856e:	4b04      	ldr	r3, [pc, #16]	@ (8008580 <SysTick_Config+0x40>)
 8008570:	2207      	movs	r2, #7
 8008572:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	3708      	adds	r7, #8
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	e000e010 	.word	0xe000e010

08008584 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f7ff ff29 	bl	80083e4 <__NVIC_SetPriorityGrouping>
}
 8008592:	bf00      	nop
 8008594:	3708      	adds	r7, #8
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800859a:	b580      	push	{r7, lr}
 800859c:	b086      	sub	sp, #24
 800859e:	af00      	add	r7, sp, #0
 80085a0:	4603      	mov	r3, r0
 80085a2:	60b9      	str	r1, [r7, #8]
 80085a4:	607a      	str	r2, [r7, #4]
 80085a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80085a8:	2300      	movs	r3, #0
 80085aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80085ac:	f7ff ff3e 	bl	800842c <__NVIC_GetPriorityGrouping>
 80085b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	68b9      	ldr	r1, [r7, #8]
 80085b6:	6978      	ldr	r0, [r7, #20]
 80085b8:	f7ff ff8e 	bl	80084d8 <NVIC_EncodePriority>
 80085bc:	4602      	mov	r2, r0
 80085be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085c2:	4611      	mov	r1, r2
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7ff ff5d 	bl	8008484 <__NVIC_SetPriority>
}
 80085ca:	bf00      	nop
 80085cc:	3718      	adds	r7, #24
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b082      	sub	sp, #8
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	4603      	mov	r3, r0
 80085da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80085dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7ff ff31 	bl	8008448 <__NVIC_EnableIRQ>
}
 80085e6:	bf00      	nop
 80085e8:	3708      	adds	r7, #8
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b082      	sub	sp, #8
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f7ff ffa2 	bl	8008540 <SysTick_Config>
 80085fc:	4603      	mov	r3, r0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
	...

08008608 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008608:	b480      	push	{r7}
 800860a:	b089      	sub	sp, #36	@ 0x24
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008612:	2300      	movs	r3, #0
 8008614:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008616:	2300      	movs	r3, #0
 8008618:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800861a:	2300      	movs	r3, #0
 800861c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800861e:	2300      	movs	r3, #0
 8008620:	61fb      	str	r3, [r7, #28]
 8008622:	e159      	b.n	80088d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008624:	2201      	movs	r2, #1
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	fa02 f303 	lsl.w	r3, r2, r3
 800862c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	697a      	ldr	r2, [r7, #20]
 8008634:	4013      	ands	r3, r2
 8008636:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008638:	693a      	ldr	r2, [r7, #16]
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	429a      	cmp	r2, r3
 800863e:	f040 8148 	bne.w	80088d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	f003 0303 	and.w	r3, r3, #3
 800864a:	2b01      	cmp	r3, #1
 800864c:	d005      	beq.n	800865a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008656:	2b02      	cmp	r3, #2
 8008658:	d130      	bne.n	80086bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	005b      	lsls	r3, r3, #1
 8008664:	2203      	movs	r2, #3
 8008666:	fa02 f303 	lsl.w	r3, r2, r3
 800866a:	43db      	mvns	r3, r3
 800866c:	69ba      	ldr	r2, [r7, #24]
 800866e:	4013      	ands	r3, r2
 8008670:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	68da      	ldr	r2, [r3, #12]
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	005b      	lsls	r3, r3, #1
 800867a:	fa02 f303 	lsl.w	r3, r2, r3
 800867e:	69ba      	ldr	r2, [r7, #24]
 8008680:	4313      	orrs	r3, r2
 8008682:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	69ba      	ldr	r2, [r7, #24]
 8008688:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008690:	2201      	movs	r2, #1
 8008692:	69fb      	ldr	r3, [r7, #28]
 8008694:	fa02 f303 	lsl.w	r3, r2, r3
 8008698:	43db      	mvns	r3, r3
 800869a:	69ba      	ldr	r2, [r7, #24]
 800869c:	4013      	ands	r3, r2
 800869e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	091b      	lsrs	r3, r3, #4
 80086a6:	f003 0201 	and.w	r2, r3, #1
 80086aa:	69fb      	ldr	r3, [r7, #28]
 80086ac:	fa02 f303 	lsl.w	r3, r2, r3
 80086b0:	69ba      	ldr	r2, [r7, #24]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	69ba      	ldr	r2, [r7, #24]
 80086ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	f003 0303 	and.w	r3, r3, #3
 80086c4:	2b03      	cmp	r3, #3
 80086c6:	d017      	beq.n	80086f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80086ce:	69fb      	ldr	r3, [r7, #28]
 80086d0:	005b      	lsls	r3, r3, #1
 80086d2:	2203      	movs	r2, #3
 80086d4:	fa02 f303 	lsl.w	r3, r2, r3
 80086d8:	43db      	mvns	r3, r3
 80086da:	69ba      	ldr	r2, [r7, #24]
 80086dc:	4013      	ands	r3, r2
 80086de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	689a      	ldr	r2, [r3, #8]
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	005b      	lsls	r3, r3, #1
 80086e8:	fa02 f303 	lsl.w	r3, r2, r3
 80086ec:	69ba      	ldr	r2, [r7, #24]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	69ba      	ldr	r2, [r7, #24]
 80086f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	f003 0303 	and.w	r3, r3, #3
 8008700:	2b02      	cmp	r3, #2
 8008702:	d123      	bne.n	800874c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	08da      	lsrs	r2, r3, #3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	3208      	adds	r2, #8
 800870c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008710:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008712:	69fb      	ldr	r3, [r7, #28]
 8008714:	f003 0307 	and.w	r3, r3, #7
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	220f      	movs	r2, #15
 800871c:	fa02 f303 	lsl.w	r3, r2, r3
 8008720:	43db      	mvns	r3, r3
 8008722:	69ba      	ldr	r2, [r7, #24]
 8008724:	4013      	ands	r3, r2
 8008726:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	691a      	ldr	r2, [r3, #16]
 800872c:	69fb      	ldr	r3, [r7, #28]
 800872e:	f003 0307 	and.w	r3, r3, #7
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	fa02 f303 	lsl.w	r3, r2, r3
 8008738:	69ba      	ldr	r2, [r7, #24]
 800873a:	4313      	orrs	r3, r2
 800873c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800873e:	69fb      	ldr	r3, [r7, #28]
 8008740:	08da      	lsrs	r2, r3, #3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	3208      	adds	r2, #8
 8008746:	69b9      	ldr	r1, [r7, #24]
 8008748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	005b      	lsls	r3, r3, #1
 8008756:	2203      	movs	r2, #3
 8008758:	fa02 f303 	lsl.w	r3, r2, r3
 800875c:	43db      	mvns	r3, r3
 800875e:	69ba      	ldr	r2, [r7, #24]
 8008760:	4013      	ands	r3, r2
 8008762:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	f003 0203 	and.w	r2, r3, #3
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	005b      	lsls	r3, r3, #1
 8008770:	fa02 f303 	lsl.w	r3, r2, r3
 8008774:	69ba      	ldr	r2, [r7, #24]
 8008776:	4313      	orrs	r3, r2
 8008778:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	69ba      	ldr	r2, [r7, #24]
 800877e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008788:	2b00      	cmp	r3, #0
 800878a:	f000 80a2 	beq.w	80088d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800878e:	2300      	movs	r3, #0
 8008790:	60fb      	str	r3, [r7, #12]
 8008792:	4b57      	ldr	r3, [pc, #348]	@ (80088f0 <HAL_GPIO_Init+0x2e8>)
 8008794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008796:	4a56      	ldr	r2, [pc, #344]	@ (80088f0 <HAL_GPIO_Init+0x2e8>)
 8008798:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800879c:	6453      	str	r3, [r2, #68]	@ 0x44
 800879e:	4b54      	ldr	r3, [pc, #336]	@ (80088f0 <HAL_GPIO_Init+0x2e8>)
 80087a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80087a6:	60fb      	str	r3, [r7, #12]
 80087a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80087aa:	4a52      	ldr	r2, [pc, #328]	@ (80088f4 <HAL_GPIO_Init+0x2ec>)
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	089b      	lsrs	r3, r3, #2
 80087b0:	3302      	adds	r3, #2
 80087b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	f003 0303 	and.w	r3, r3, #3
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	220f      	movs	r2, #15
 80087c2:	fa02 f303 	lsl.w	r3, r2, r3
 80087c6:	43db      	mvns	r3, r3
 80087c8:	69ba      	ldr	r2, [r7, #24]
 80087ca:	4013      	ands	r3, r2
 80087cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4a49      	ldr	r2, [pc, #292]	@ (80088f8 <HAL_GPIO_Init+0x2f0>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d019      	beq.n	800880a <HAL_GPIO_Init+0x202>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4a48      	ldr	r2, [pc, #288]	@ (80088fc <HAL_GPIO_Init+0x2f4>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d013      	beq.n	8008806 <HAL_GPIO_Init+0x1fe>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a47      	ldr	r2, [pc, #284]	@ (8008900 <HAL_GPIO_Init+0x2f8>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d00d      	beq.n	8008802 <HAL_GPIO_Init+0x1fa>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a46      	ldr	r2, [pc, #280]	@ (8008904 <HAL_GPIO_Init+0x2fc>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d007      	beq.n	80087fe <HAL_GPIO_Init+0x1f6>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a45      	ldr	r2, [pc, #276]	@ (8008908 <HAL_GPIO_Init+0x300>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d101      	bne.n	80087fa <HAL_GPIO_Init+0x1f2>
 80087f6:	2304      	movs	r3, #4
 80087f8:	e008      	b.n	800880c <HAL_GPIO_Init+0x204>
 80087fa:	2307      	movs	r3, #7
 80087fc:	e006      	b.n	800880c <HAL_GPIO_Init+0x204>
 80087fe:	2303      	movs	r3, #3
 8008800:	e004      	b.n	800880c <HAL_GPIO_Init+0x204>
 8008802:	2302      	movs	r3, #2
 8008804:	e002      	b.n	800880c <HAL_GPIO_Init+0x204>
 8008806:	2301      	movs	r3, #1
 8008808:	e000      	b.n	800880c <HAL_GPIO_Init+0x204>
 800880a:	2300      	movs	r3, #0
 800880c:	69fa      	ldr	r2, [r7, #28]
 800880e:	f002 0203 	and.w	r2, r2, #3
 8008812:	0092      	lsls	r2, r2, #2
 8008814:	4093      	lsls	r3, r2
 8008816:	69ba      	ldr	r2, [r7, #24]
 8008818:	4313      	orrs	r3, r2
 800881a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800881c:	4935      	ldr	r1, [pc, #212]	@ (80088f4 <HAL_GPIO_Init+0x2ec>)
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	089b      	lsrs	r3, r3, #2
 8008822:	3302      	adds	r3, #2
 8008824:	69ba      	ldr	r2, [r7, #24]
 8008826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800882a:	4b38      	ldr	r3, [pc, #224]	@ (800890c <HAL_GPIO_Init+0x304>)
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	43db      	mvns	r3, r3
 8008834:	69ba      	ldr	r2, [r7, #24]
 8008836:	4013      	ands	r3, r2
 8008838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008842:	2b00      	cmp	r3, #0
 8008844:	d003      	beq.n	800884e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8008846:	69ba      	ldr	r2, [r7, #24]
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	4313      	orrs	r3, r2
 800884c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800884e:	4a2f      	ldr	r2, [pc, #188]	@ (800890c <HAL_GPIO_Init+0x304>)
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008854:	4b2d      	ldr	r3, [pc, #180]	@ (800890c <HAL_GPIO_Init+0x304>)
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	43db      	mvns	r3, r3
 800885e:	69ba      	ldr	r2, [r7, #24]
 8008860:	4013      	ands	r3, r2
 8008862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800886c:	2b00      	cmp	r3, #0
 800886e:	d003      	beq.n	8008878 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8008870:	69ba      	ldr	r2, [r7, #24]
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	4313      	orrs	r3, r2
 8008876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008878:	4a24      	ldr	r2, [pc, #144]	@ (800890c <HAL_GPIO_Init+0x304>)
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800887e:	4b23      	ldr	r3, [pc, #140]	@ (800890c <HAL_GPIO_Init+0x304>)
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	43db      	mvns	r3, r3
 8008888:	69ba      	ldr	r2, [r7, #24]
 800888a:	4013      	ands	r3, r2
 800888c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008896:	2b00      	cmp	r3, #0
 8008898:	d003      	beq.n	80088a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800889a:	69ba      	ldr	r2, [r7, #24]
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	4313      	orrs	r3, r2
 80088a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80088a2:	4a1a      	ldr	r2, [pc, #104]	@ (800890c <HAL_GPIO_Init+0x304>)
 80088a4:	69bb      	ldr	r3, [r7, #24]
 80088a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80088a8:	4b18      	ldr	r3, [pc, #96]	@ (800890c <HAL_GPIO_Init+0x304>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	43db      	mvns	r3, r3
 80088b2:	69ba      	ldr	r2, [r7, #24]
 80088b4:	4013      	ands	r3, r2
 80088b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d003      	beq.n	80088cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80088c4:	69ba      	ldr	r2, [r7, #24]
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	4313      	orrs	r3, r2
 80088ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80088cc:	4a0f      	ldr	r2, [pc, #60]	@ (800890c <HAL_GPIO_Init+0x304>)
 80088ce:	69bb      	ldr	r3, [r7, #24]
 80088d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	3301      	adds	r3, #1
 80088d6:	61fb      	str	r3, [r7, #28]
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	2b0f      	cmp	r3, #15
 80088dc:	f67f aea2 	bls.w	8008624 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80088e0:	bf00      	nop
 80088e2:	bf00      	nop
 80088e4:	3724      	adds	r7, #36	@ 0x24
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	40023800 	.word	0x40023800
 80088f4:	40013800 	.word	0x40013800
 80088f8:	40020000 	.word	0x40020000
 80088fc:	40020400 	.word	0x40020400
 8008900:	40020800 	.word	0x40020800
 8008904:	40020c00 	.word	0x40020c00
 8008908:	40021000 	.word	0x40021000
 800890c:	40013c00 	.word	0x40013c00

08008910 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008910:	b480      	push	{r7}
 8008912:	b085      	sub	sp, #20
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	460b      	mov	r3, r1
 800891a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	691a      	ldr	r2, [r3, #16]
 8008920:	887b      	ldrh	r3, [r7, #2]
 8008922:	4013      	ands	r3, r2
 8008924:	2b00      	cmp	r3, #0
 8008926:	d002      	beq.n	800892e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008928:	2301      	movs	r3, #1
 800892a:	73fb      	strb	r3, [r7, #15]
 800892c:	e001      	b.n	8008932 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800892e:	2300      	movs	r3, #0
 8008930:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008932:	7bfb      	ldrb	r3, [r7, #15]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3714      	adds	r7, #20
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	460b      	mov	r3, r1
 800894a:	807b      	strh	r3, [r7, #2]
 800894c:	4613      	mov	r3, r2
 800894e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008950:	787b      	ldrb	r3, [r7, #1]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d003      	beq.n	800895e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008956:	887a      	ldrh	r2, [r7, #2]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800895c:	e003      	b.n	8008966 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800895e:	887b      	ldrh	r3, [r7, #2]
 8008960:	041a      	lsls	r2, r3, #16
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	619a      	str	r2, [r3, #24]
}
 8008966:	bf00      	nop
 8008968:	370c      	adds	r7, #12
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr
	...

08008974 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	4603      	mov	r3, r0
 800897c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800897e:	4b08      	ldr	r3, [pc, #32]	@ (80089a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008980:	695a      	ldr	r2, [r3, #20]
 8008982:	88fb      	ldrh	r3, [r7, #6]
 8008984:	4013      	ands	r3, r2
 8008986:	2b00      	cmp	r3, #0
 8008988:	d006      	beq.n	8008998 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800898a:	4a05      	ldr	r2, [pc, #20]	@ (80089a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800898c:	88fb      	ldrh	r3, [r7, #6]
 800898e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008990:	88fb      	ldrh	r3, [r7, #6]
 8008992:	4618      	mov	r0, r3
 8008994:	f7fe f908 	bl	8006ba8 <HAL_GPIO_EXTI_Callback>
  }
}
 8008998:	bf00      	nop
 800899a:	3708      	adds	r7, #8
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	40013c00 	.word	0x40013c00

080089a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d101      	bne.n	80089b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e12b      	b.n	8008c0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d106      	bne.n	80089d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f7fe fe76 	bl	80076bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2224      	movs	r2, #36	@ 0x24
 80089d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f022 0201 	bic.w	r2, r2, #1
 80089e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80089f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008a06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008a08:	f001 fc20 	bl	800a24c <HAL_RCC_GetPCLK1Freq>
 8008a0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	4a81      	ldr	r2, [pc, #516]	@ (8008c18 <HAL_I2C_Init+0x274>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d807      	bhi.n	8008a28 <HAL_I2C_Init+0x84>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	4a80      	ldr	r2, [pc, #512]	@ (8008c1c <HAL_I2C_Init+0x278>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	bf94      	ite	ls
 8008a20:	2301      	movls	r3, #1
 8008a22:	2300      	movhi	r3, #0
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	e006      	b.n	8008a36 <HAL_I2C_Init+0x92>
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	4a7d      	ldr	r2, [pc, #500]	@ (8008c20 <HAL_I2C_Init+0x27c>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	bf94      	ite	ls
 8008a30:	2301      	movls	r3, #1
 8008a32:	2300      	movhi	r3, #0
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d001      	beq.n	8008a3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e0e7      	b.n	8008c0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	4a78      	ldr	r2, [pc, #480]	@ (8008c24 <HAL_I2C_Init+0x280>)
 8008a42:	fba2 2303 	umull	r2, r3, r2, r3
 8008a46:	0c9b      	lsrs	r3, r3, #18
 8008a48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	68ba      	ldr	r2, [r7, #8]
 8008a5a:	430a      	orrs	r2, r1
 8008a5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	6a1b      	ldr	r3, [r3, #32]
 8008a64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	4a6a      	ldr	r2, [pc, #424]	@ (8008c18 <HAL_I2C_Init+0x274>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d802      	bhi.n	8008a78 <HAL_I2C_Init+0xd4>
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	3301      	adds	r3, #1
 8008a76:	e009      	b.n	8008a8c <HAL_I2C_Init+0xe8>
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008a7e:	fb02 f303 	mul.w	r3, r2, r3
 8008a82:	4a69      	ldr	r2, [pc, #420]	@ (8008c28 <HAL_I2C_Init+0x284>)
 8008a84:	fba2 2303 	umull	r2, r3, r2, r3
 8008a88:	099b      	lsrs	r3, r3, #6
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	6812      	ldr	r2, [r2, #0]
 8008a90:	430b      	orrs	r3, r1
 8008a92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	69db      	ldr	r3, [r3, #28]
 8008a9a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8008a9e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	495c      	ldr	r1, [pc, #368]	@ (8008c18 <HAL_I2C_Init+0x274>)
 8008aa8:	428b      	cmp	r3, r1
 8008aaa:	d819      	bhi.n	8008ae0 <HAL_I2C_Init+0x13c>
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	1e59      	subs	r1, r3, #1
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	005b      	lsls	r3, r3, #1
 8008ab6:	fbb1 f3f3 	udiv	r3, r1, r3
 8008aba:	1c59      	adds	r1, r3, #1
 8008abc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008ac0:	400b      	ands	r3, r1
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d00a      	beq.n	8008adc <HAL_I2C_Init+0x138>
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	1e59      	subs	r1, r3, #1
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	005b      	lsls	r3, r3, #1
 8008ad0:	fbb1 f3f3 	udiv	r3, r1, r3
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ada:	e051      	b.n	8008b80 <HAL_I2C_Init+0x1dc>
 8008adc:	2304      	movs	r3, #4
 8008ade:	e04f      	b.n	8008b80 <HAL_I2C_Init+0x1dc>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d111      	bne.n	8008b0c <HAL_I2C_Init+0x168>
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	1e58      	subs	r0, r3, #1
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6859      	ldr	r1, [r3, #4]
 8008af0:	460b      	mov	r3, r1
 8008af2:	005b      	lsls	r3, r3, #1
 8008af4:	440b      	add	r3, r1
 8008af6:	fbb0 f3f3 	udiv	r3, r0, r3
 8008afa:	3301      	adds	r3, #1
 8008afc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	bf0c      	ite	eq
 8008b04:	2301      	moveq	r3, #1
 8008b06:	2300      	movne	r3, #0
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	e012      	b.n	8008b32 <HAL_I2C_Init+0x18e>
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	1e58      	subs	r0, r3, #1
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6859      	ldr	r1, [r3, #4]
 8008b14:	460b      	mov	r3, r1
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	440b      	add	r3, r1
 8008b1a:	0099      	lsls	r1, r3, #2
 8008b1c:	440b      	add	r3, r1
 8008b1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008b22:	3301      	adds	r3, #1
 8008b24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	bf0c      	ite	eq
 8008b2c:	2301      	moveq	r3, #1
 8008b2e:	2300      	movne	r3, #0
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d001      	beq.n	8008b3a <HAL_I2C_Init+0x196>
 8008b36:	2301      	movs	r3, #1
 8008b38:	e022      	b.n	8008b80 <HAL_I2C_Init+0x1dc>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d10e      	bne.n	8008b60 <HAL_I2C_Init+0x1bc>
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	1e58      	subs	r0, r3, #1
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6859      	ldr	r1, [r3, #4]
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	005b      	lsls	r3, r3, #1
 8008b4e:	440b      	add	r3, r1
 8008b50:	fbb0 f3f3 	udiv	r3, r0, r3
 8008b54:	3301      	adds	r3, #1
 8008b56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b5e:	e00f      	b.n	8008b80 <HAL_I2C_Init+0x1dc>
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	1e58      	subs	r0, r3, #1
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6859      	ldr	r1, [r3, #4]
 8008b68:	460b      	mov	r3, r1
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	440b      	add	r3, r1
 8008b6e:	0099      	lsls	r1, r3, #2
 8008b70:	440b      	add	r3, r1
 8008b72:	fbb0 f3f3 	udiv	r3, r0, r3
 8008b76:	3301      	adds	r3, #1
 8008b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008b80:	6879      	ldr	r1, [r7, #4]
 8008b82:	6809      	ldr	r1, [r1, #0]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	69da      	ldr	r2, [r3, #28]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6a1b      	ldr	r3, [r3, #32]
 8008b9a:	431a      	orrs	r2, r3
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	430a      	orrs	r2, r1
 8008ba2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008bae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	6911      	ldr	r1, [r2, #16]
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	68d2      	ldr	r2, [r2, #12]
 8008bba:	4311      	orrs	r1, r2
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	6812      	ldr	r2, [r2, #0]
 8008bc0:	430b      	orrs	r3, r1
 8008bc2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	695a      	ldr	r2, [r3, #20]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	699b      	ldr	r3, [r3, #24]
 8008bd6:	431a      	orrs	r2, r3
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	430a      	orrs	r2, r1
 8008bde:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f042 0201 	orr.w	r2, r2, #1
 8008bee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2220      	movs	r2, #32
 8008bfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008c0c:	2300      	movs	r3, #0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3710      	adds	r7, #16
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	000186a0 	.word	0x000186a0
 8008c1c:	001e847f 	.word	0x001e847f
 8008c20:	003d08ff 	.word	0x003d08ff
 8008c24:	431bde83 	.word	0x431bde83
 8008c28:	10624dd3 	.word	0x10624dd3

08008c2c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b088      	sub	sp, #32
 8008c30:	af02      	add	r7, sp, #8
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	4608      	mov	r0, r1
 8008c36:	4611      	mov	r1, r2
 8008c38:	461a      	mov	r2, r3
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	817b      	strh	r3, [r7, #10]
 8008c3e:	460b      	mov	r3, r1
 8008c40:	813b      	strh	r3, [r7, #8]
 8008c42:	4613      	mov	r3, r2
 8008c44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008c46:	f7ff f869 	bl	8007d1c <HAL_GetTick>
 8008c4a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	2b20      	cmp	r3, #32
 8008c56:	f040 80d9 	bne.w	8008e0c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	9300      	str	r3, [sp, #0]
 8008c5e:	2319      	movs	r3, #25
 8008c60:	2201      	movs	r2, #1
 8008c62:	496d      	ldr	r1, [pc, #436]	@ (8008e18 <HAL_I2C_Mem_Write+0x1ec>)
 8008c64:	68f8      	ldr	r0, [r7, #12]
 8008c66:	f000 fc8b 	bl	8009580 <I2C_WaitOnFlagUntilTimeout>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d001      	beq.n	8008c74 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008c70:	2302      	movs	r3, #2
 8008c72:	e0cc      	b.n	8008e0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d101      	bne.n	8008c82 <HAL_I2C_Mem_Write+0x56>
 8008c7e:	2302      	movs	r3, #2
 8008c80:	e0c5      	b.n	8008e0e <HAL_I2C_Mem_Write+0x1e2>
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2201      	movs	r2, #1
 8008c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 0301 	and.w	r3, r3, #1
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d007      	beq.n	8008ca8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f042 0201 	orr.w	r2, r2, #1
 8008ca6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008cb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2221      	movs	r2, #33	@ 0x21
 8008cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2240      	movs	r2, #64	@ 0x40
 8008cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	6a3a      	ldr	r2, [r7, #32]
 8008cd2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008cd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008cde:	b29a      	uxth	r2, r3
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	4a4d      	ldr	r2, [pc, #308]	@ (8008e1c <HAL_I2C_Mem_Write+0x1f0>)
 8008ce8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008cea:	88f8      	ldrh	r0, [r7, #6]
 8008cec:	893a      	ldrh	r2, [r7, #8]
 8008cee:	8979      	ldrh	r1, [r7, #10]
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	9301      	str	r3, [sp, #4]
 8008cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cf6:	9300      	str	r3, [sp, #0]
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	68f8      	ldr	r0, [r7, #12]
 8008cfc:	f000 fac2 	bl	8009284 <I2C_RequestMemoryWrite>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d052      	beq.n	8008dac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008d06:	2301      	movs	r3, #1
 8008d08:	e081      	b.n	8008e0e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d0a:	697a      	ldr	r2, [r7, #20]
 8008d0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d0e:	68f8      	ldr	r0, [r7, #12]
 8008d10:	f000 fd50 	bl	80097b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008d14:	4603      	mov	r3, r0
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d00d      	beq.n	8008d36 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d1e:	2b04      	cmp	r3, #4
 8008d20:	d107      	bne.n	8008d32 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008d32:	2301      	movs	r3, #1
 8008d34:	e06b      	b.n	8008e0e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d3a:	781a      	ldrb	r2, [r3, #0]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d46:	1c5a      	adds	r2, r3, #1
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d50:	3b01      	subs	r3, #1
 8008d52:	b29a      	uxth	r2, r3
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	3b01      	subs	r3, #1
 8008d60:	b29a      	uxth	r2, r3
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	695b      	ldr	r3, [r3, #20]
 8008d6c:	f003 0304 	and.w	r3, r3, #4
 8008d70:	2b04      	cmp	r3, #4
 8008d72:	d11b      	bne.n	8008dac <HAL_I2C_Mem_Write+0x180>
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d017      	beq.n	8008dac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d80:	781a      	ldrb	r2, [r3, #0]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d8c:	1c5a      	adds	r2, r3, #1
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d96:	3b01      	subs	r3, #1
 8008d98:	b29a      	uxth	r2, r3
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	3b01      	subs	r3, #1
 8008da6:	b29a      	uxth	r2, r3
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d1aa      	bne.n	8008d0a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008db4:	697a      	ldr	r2, [r7, #20]
 8008db6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008db8:	68f8      	ldr	r0, [r7, #12]
 8008dba:	f000 fd43 	bl	8009844 <I2C_WaitOnBTFFlagUntilTimeout>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d00d      	beq.n	8008de0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dc8:	2b04      	cmp	r3, #4
 8008dca:	d107      	bne.n	8008ddc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008dda:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e016      	b.n	8008e0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008dee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2220      	movs	r2, #32
 8008df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2200      	movs	r2, #0
 8008e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	e000      	b.n	8008e0e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008e0c:	2302      	movs	r3, #2
  }
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3718      	adds	r7, #24
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop
 8008e18:	00100002 	.word	0x00100002
 8008e1c:	ffff0000 	.word	0xffff0000

08008e20 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b08c      	sub	sp, #48	@ 0x30
 8008e24:	af02      	add	r7, sp, #8
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	4608      	mov	r0, r1
 8008e2a:	4611      	mov	r1, r2
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	4603      	mov	r3, r0
 8008e30:	817b      	strh	r3, [r7, #10]
 8008e32:	460b      	mov	r3, r1
 8008e34:	813b      	strh	r3, [r7, #8]
 8008e36:	4613      	mov	r3, r2
 8008e38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008e3a:	f7fe ff6f 	bl	8007d1c <HAL_GetTick>
 8008e3e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	2b20      	cmp	r3, #32
 8008e4a:	f040 8214 	bne.w	8009276 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e50:	9300      	str	r3, [sp, #0]
 8008e52:	2319      	movs	r3, #25
 8008e54:	2201      	movs	r2, #1
 8008e56:	497b      	ldr	r1, [pc, #492]	@ (8009044 <HAL_I2C_Mem_Read+0x224>)
 8008e58:	68f8      	ldr	r0, [r7, #12]
 8008e5a:	f000 fb91 	bl	8009580 <I2C_WaitOnFlagUntilTimeout>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d001      	beq.n	8008e68 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008e64:	2302      	movs	r3, #2
 8008e66:	e207      	b.n	8009278 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d101      	bne.n	8008e76 <HAL_I2C_Mem_Read+0x56>
 8008e72:	2302      	movs	r3, #2
 8008e74:	e200      	b.n	8009278 <HAL_I2C_Mem_Read+0x458>
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f003 0301 	and.w	r3, r3, #1
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d007      	beq.n	8008e9c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f042 0201 	orr.w	r2, r2, #1
 8008e9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	681a      	ldr	r2, [r3, #0]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008eaa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2222      	movs	r2, #34	@ 0x22
 8008eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2240      	movs	r2, #64	@ 0x40
 8008eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ec6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008ecc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ed2:	b29a      	uxth	r2, r3
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	4a5b      	ldr	r2, [pc, #364]	@ (8009048 <HAL_I2C_Mem_Read+0x228>)
 8008edc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008ede:	88f8      	ldrh	r0, [r7, #6]
 8008ee0:	893a      	ldrh	r2, [r7, #8]
 8008ee2:	8979      	ldrh	r1, [r7, #10]
 8008ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee6:	9301      	str	r3, [sp, #4]
 8008ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eea:	9300      	str	r3, [sp, #0]
 8008eec:	4603      	mov	r3, r0
 8008eee:	68f8      	ldr	r0, [r7, #12]
 8008ef0:	f000 fa5e 	bl	80093b0 <I2C_RequestMemoryRead>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d001      	beq.n	8008efe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	e1bc      	b.n	8009278 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d113      	bne.n	8008f2e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f06:	2300      	movs	r3, #0
 8008f08:	623b      	str	r3, [r7, #32]
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	695b      	ldr	r3, [r3, #20]
 8008f10:	623b      	str	r3, [r7, #32]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	699b      	ldr	r3, [r3, #24]
 8008f18:	623b      	str	r3, [r7, #32]
 8008f1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f2a:	601a      	str	r2, [r3, #0]
 8008f2c:	e190      	b.n	8009250 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	d11b      	bne.n	8008f6e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f46:	2300      	movs	r3, #0
 8008f48:	61fb      	str	r3, [r7, #28]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	695b      	ldr	r3, [r3, #20]
 8008f50:	61fb      	str	r3, [r7, #28]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	699b      	ldr	r3, [r3, #24]
 8008f58:	61fb      	str	r3, [r7, #28]
 8008f5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f6a:	601a      	str	r2, [r3, #0]
 8008f6c:	e170      	b.n	8009250 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	d11b      	bne.n	8008fae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f96:	2300      	movs	r3, #0
 8008f98:	61bb      	str	r3, [r7, #24]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	695b      	ldr	r3, [r3, #20]
 8008fa0:	61bb      	str	r3, [r7, #24]
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	699b      	ldr	r3, [r3, #24]
 8008fa8:	61bb      	str	r3, [r7, #24]
 8008faa:	69bb      	ldr	r3, [r7, #24]
 8008fac:	e150      	b.n	8009250 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008fae:	2300      	movs	r3, #0
 8008fb0:	617b      	str	r3, [r7, #20]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	695b      	ldr	r3, [r3, #20]
 8008fb8:	617b      	str	r3, [r7, #20]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	699b      	ldr	r3, [r3, #24]
 8008fc0:	617b      	str	r3, [r7, #20]
 8008fc2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008fc4:	e144      	b.n	8009250 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fca:	2b03      	cmp	r3, #3
 8008fcc:	f200 80f1 	bhi.w	80091b2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d123      	bne.n	8009020 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008fd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fda:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008fdc:	68f8      	ldr	r0, [r7, #12]
 8008fde:	f000 fc79 	bl	80098d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d001      	beq.n	8008fec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e145      	b.n	8009278 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	691a      	ldr	r2, [r3, #16]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ff6:	b2d2      	uxtb	r2, r2
 8008ff8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ffe:	1c5a      	adds	r2, r3, #1
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009008:	3b01      	subs	r3, #1
 800900a:	b29a      	uxth	r2, r3
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009014:	b29b      	uxth	r3, r3
 8009016:	3b01      	subs	r3, #1
 8009018:	b29a      	uxth	r2, r3
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800901e:	e117      	b.n	8009250 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009024:	2b02      	cmp	r3, #2
 8009026:	d14e      	bne.n	80090c6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800902a:	9300      	str	r3, [sp, #0]
 800902c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800902e:	2200      	movs	r2, #0
 8009030:	4906      	ldr	r1, [pc, #24]	@ (800904c <HAL_I2C_Mem_Read+0x22c>)
 8009032:	68f8      	ldr	r0, [r7, #12]
 8009034:	f000 faa4 	bl	8009580 <I2C_WaitOnFlagUntilTimeout>
 8009038:	4603      	mov	r3, r0
 800903a:	2b00      	cmp	r3, #0
 800903c:	d008      	beq.n	8009050 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800903e:	2301      	movs	r3, #1
 8009040:	e11a      	b.n	8009278 <HAL_I2C_Mem_Read+0x458>
 8009042:	bf00      	nop
 8009044:	00100002 	.word	0x00100002
 8009048:	ffff0000 	.word	0xffff0000
 800904c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800905e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	691a      	ldr	r2, [r3, #16]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800906a:	b2d2      	uxtb	r2, r2
 800906c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009072:	1c5a      	adds	r2, r3, #1
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800907c:	3b01      	subs	r3, #1
 800907e:	b29a      	uxth	r2, r3
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009088:	b29b      	uxth	r3, r3
 800908a:	3b01      	subs	r3, #1
 800908c:	b29a      	uxth	r2, r3
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	691a      	ldr	r2, [r3, #16]
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800909c:	b2d2      	uxtb	r2, r2
 800909e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090a4:	1c5a      	adds	r2, r3, #1
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090ae:	3b01      	subs	r3, #1
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	3b01      	subs	r3, #1
 80090be:	b29a      	uxth	r2, r3
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80090c4:	e0c4      	b.n	8009250 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80090c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c8:	9300      	str	r3, [sp, #0]
 80090ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090cc:	2200      	movs	r2, #0
 80090ce:	496c      	ldr	r1, [pc, #432]	@ (8009280 <HAL_I2C_Mem_Read+0x460>)
 80090d0:	68f8      	ldr	r0, [r7, #12]
 80090d2:	f000 fa55 	bl	8009580 <I2C_WaitOnFlagUntilTimeout>
 80090d6:	4603      	mov	r3, r0
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d001      	beq.n	80090e0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80090dc:	2301      	movs	r3, #1
 80090de:	e0cb      	b.n	8009278 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80090ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	691a      	ldr	r2, [r3, #16]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090fa:	b2d2      	uxtb	r2, r2
 80090fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009102:	1c5a      	adds	r2, r3, #1
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800910c:	3b01      	subs	r3, #1
 800910e:	b29a      	uxth	r2, r3
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009118:	b29b      	uxth	r3, r3
 800911a:	3b01      	subs	r3, #1
 800911c:	b29a      	uxth	r2, r3
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009124:	9300      	str	r3, [sp, #0]
 8009126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009128:	2200      	movs	r2, #0
 800912a:	4955      	ldr	r1, [pc, #340]	@ (8009280 <HAL_I2C_Mem_Read+0x460>)
 800912c:	68f8      	ldr	r0, [r7, #12]
 800912e:	f000 fa27 	bl	8009580 <I2C_WaitOnFlagUntilTimeout>
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d001      	beq.n	800913c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	e09d      	b.n	8009278 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800914a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	691a      	ldr	r2, [r3, #16]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009156:	b2d2      	uxtb	r2, r2
 8009158:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800915e:	1c5a      	adds	r2, r3, #1
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009168:	3b01      	subs	r3, #1
 800916a:	b29a      	uxth	r2, r3
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009174:	b29b      	uxth	r3, r3
 8009176:	3b01      	subs	r3, #1
 8009178:	b29a      	uxth	r2, r3
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	691a      	ldr	r2, [r3, #16]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009188:	b2d2      	uxtb	r2, r2
 800918a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009190:	1c5a      	adds	r2, r3, #1
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800919a:	3b01      	subs	r3, #1
 800919c:	b29a      	uxth	r2, r3
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	3b01      	subs	r3, #1
 80091aa:	b29a      	uxth	r2, r3
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80091b0:	e04e      	b.n	8009250 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091b4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80091b6:	68f8      	ldr	r0, [r7, #12]
 80091b8:	f000 fb8c 	bl	80098d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80091bc:	4603      	mov	r3, r0
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d001      	beq.n	80091c6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	e058      	b.n	8009278 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	691a      	ldr	r2, [r3, #16]
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091d0:	b2d2      	uxtb	r2, r2
 80091d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091d8:	1c5a      	adds	r2, r3, #1
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091e2:	3b01      	subs	r3, #1
 80091e4:	b29a      	uxth	r2, r3
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	3b01      	subs	r3, #1
 80091f2:	b29a      	uxth	r2, r3
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	695b      	ldr	r3, [r3, #20]
 80091fe:	f003 0304 	and.w	r3, r3, #4
 8009202:	2b04      	cmp	r3, #4
 8009204:	d124      	bne.n	8009250 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800920a:	2b03      	cmp	r3, #3
 800920c:	d107      	bne.n	800921e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800921c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	691a      	ldr	r2, [r3, #16]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009228:	b2d2      	uxtb	r2, r2
 800922a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009230:	1c5a      	adds	r2, r3, #1
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800923a:	3b01      	subs	r3, #1
 800923c:	b29a      	uxth	r2, r3
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009246:	b29b      	uxth	r3, r3
 8009248:	3b01      	subs	r3, #1
 800924a:	b29a      	uxth	r2, r3
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009254:	2b00      	cmp	r3, #0
 8009256:	f47f aeb6 	bne.w	8008fc6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2220      	movs	r2, #32
 800925e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2200      	movs	r2, #0
 8009266:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2200      	movs	r2, #0
 800926e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009272:	2300      	movs	r3, #0
 8009274:	e000      	b.n	8009278 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8009276:	2302      	movs	r3, #2
  }
}
 8009278:	4618      	mov	r0, r3
 800927a:	3728      	adds	r7, #40	@ 0x28
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}
 8009280:	00010004 	.word	0x00010004

08009284 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b088      	sub	sp, #32
 8009288:	af02      	add	r7, sp, #8
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	4608      	mov	r0, r1
 800928e:	4611      	mov	r1, r2
 8009290:	461a      	mov	r2, r3
 8009292:	4603      	mov	r3, r0
 8009294:	817b      	strh	r3, [r7, #10]
 8009296:	460b      	mov	r3, r1
 8009298:	813b      	strh	r3, [r7, #8]
 800929a:	4613      	mov	r3, r2
 800929c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80092ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80092ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b0:	9300      	str	r3, [sp, #0]
 80092b2:	6a3b      	ldr	r3, [r7, #32]
 80092b4:	2200      	movs	r2, #0
 80092b6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80092ba:	68f8      	ldr	r0, [r7, #12]
 80092bc:	f000 f960 	bl	8009580 <I2C_WaitOnFlagUntilTimeout>
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00d      	beq.n	80092e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092d4:	d103      	bne.n	80092de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80092dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80092de:	2303      	movs	r3, #3
 80092e0:	e05f      	b.n	80093a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80092e2:	897b      	ldrh	r3, [r7, #10]
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	461a      	mov	r2, r3
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80092f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80092f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f4:	6a3a      	ldr	r2, [r7, #32]
 80092f6:	492d      	ldr	r1, [pc, #180]	@ (80093ac <I2C_RequestMemoryWrite+0x128>)
 80092f8:	68f8      	ldr	r0, [r7, #12]
 80092fa:	f000 f9bb 	bl	8009674 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80092fe:	4603      	mov	r3, r0
 8009300:	2b00      	cmp	r3, #0
 8009302:	d001      	beq.n	8009308 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009304:	2301      	movs	r3, #1
 8009306:	e04c      	b.n	80093a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009308:	2300      	movs	r3, #0
 800930a:	617b      	str	r3, [r7, #20]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	695b      	ldr	r3, [r3, #20]
 8009312:	617b      	str	r3, [r7, #20]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	699b      	ldr	r3, [r3, #24]
 800931a:	617b      	str	r3, [r7, #20]
 800931c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800931e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009320:	6a39      	ldr	r1, [r7, #32]
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	f000 fa46 	bl	80097b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00d      	beq.n	800934a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009332:	2b04      	cmp	r3, #4
 8009334:	d107      	bne.n	8009346 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009344:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009346:	2301      	movs	r3, #1
 8009348:	e02b      	b.n	80093a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800934a:	88fb      	ldrh	r3, [r7, #6]
 800934c:	2b01      	cmp	r3, #1
 800934e:	d105      	bne.n	800935c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009350:	893b      	ldrh	r3, [r7, #8]
 8009352:	b2da      	uxtb	r2, r3
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	611a      	str	r2, [r3, #16]
 800935a:	e021      	b.n	80093a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800935c:	893b      	ldrh	r3, [r7, #8]
 800935e:	0a1b      	lsrs	r3, r3, #8
 8009360:	b29b      	uxth	r3, r3
 8009362:	b2da      	uxtb	r2, r3
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800936a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800936c:	6a39      	ldr	r1, [r7, #32]
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f000 fa20 	bl	80097b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009374:	4603      	mov	r3, r0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d00d      	beq.n	8009396 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800937e:	2b04      	cmp	r3, #4
 8009380:	d107      	bne.n	8009392 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009390:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009392:	2301      	movs	r3, #1
 8009394:	e005      	b.n	80093a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009396:	893b      	ldrh	r3, [r7, #8]
 8009398:	b2da      	uxtb	r2, r3
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80093a0:	2300      	movs	r3, #0
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3718      	adds	r7, #24
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	00010002 	.word	0x00010002

080093b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b088      	sub	sp, #32
 80093b4:	af02      	add	r7, sp, #8
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	4608      	mov	r0, r1
 80093ba:	4611      	mov	r1, r2
 80093bc:	461a      	mov	r2, r3
 80093be:	4603      	mov	r3, r0
 80093c0:	817b      	strh	r3, [r7, #10]
 80093c2:	460b      	mov	r3, r1
 80093c4:	813b      	strh	r3, [r7, #8]
 80093c6:	4613      	mov	r3, r2
 80093c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80093d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80093e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80093ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ec:	9300      	str	r3, [sp, #0]
 80093ee:	6a3b      	ldr	r3, [r7, #32]
 80093f0:	2200      	movs	r2, #0
 80093f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80093f6:	68f8      	ldr	r0, [r7, #12]
 80093f8:	f000 f8c2 	bl	8009580 <I2C_WaitOnFlagUntilTimeout>
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00d      	beq.n	800941e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800940c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009410:	d103      	bne.n	800941a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009418:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800941a:	2303      	movs	r3, #3
 800941c:	e0aa      	b.n	8009574 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800941e:	897b      	ldrh	r3, [r7, #10]
 8009420:	b2db      	uxtb	r3, r3
 8009422:	461a      	mov	r2, r3
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800942c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800942e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009430:	6a3a      	ldr	r2, [r7, #32]
 8009432:	4952      	ldr	r1, [pc, #328]	@ (800957c <I2C_RequestMemoryRead+0x1cc>)
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f000 f91d 	bl	8009674 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d001      	beq.n	8009444 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	e097      	b.n	8009574 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009444:	2300      	movs	r3, #0
 8009446:	617b      	str	r3, [r7, #20]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	695b      	ldr	r3, [r3, #20]
 800944e:	617b      	str	r3, [r7, #20]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	699b      	ldr	r3, [r3, #24]
 8009456:	617b      	str	r3, [r7, #20]
 8009458:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800945a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800945c:	6a39      	ldr	r1, [r7, #32]
 800945e:	68f8      	ldr	r0, [r7, #12]
 8009460:	f000 f9a8 	bl	80097b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009464:	4603      	mov	r3, r0
 8009466:	2b00      	cmp	r3, #0
 8009468:	d00d      	beq.n	8009486 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800946e:	2b04      	cmp	r3, #4
 8009470:	d107      	bne.n	8009482 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009480:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	e076      	b.n	8009574 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009486:	88fb      	ldrh	r3, [r7, #6]
 8009488:	2b01      	cmp	r3, #1
 800948a:	d105      	bne.n	8009498 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800948c:	893b      	ldrh	r3, [r7, #8]
 800948e:	b2da      	uxtb	r2, r3
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	611a      	str	r2, [r3, #16]
 8009496:	e021      	b.n	80094dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009498:	893b      	ldrh	r3, [r7, #8]
 800949a:	0a1b      	lsrs	r3, r3, #8
 800949c:	b29b      	uxth	r3, r3
 800949e:	b2da      	uxtb	r2, r3
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094a8:	6a39      	ldr	r1, [r7, #32]
 80094aa:	68f8      	ldr	r0, [r7, #12]
 80094ac:	f000 f982 	bl	80097b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00d      	beq.n	80094d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094ba:	2b04      	cmp	r3, #4
 80094bc:	d107      	bne.n	80094ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80094cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80094ce:	2301      	movs	r3, #1
 80094d0:	e050      	b.n	8009574 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80094d2:	893b      	ldrh	r3, [r7, #8]
 80094d4:	b2da      	uxtb	r2, r3
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094de:	6a39      	ldr	r1, [r7, #32]
 80094e0:	68f8      	ldr	r0, [r7, #12]
 80094e2:	f000 f967 	bl	80097b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80094e6:	4603      	mov	r3, r0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d00d      	beq.n	8009508 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094f0:	2b04      	cmp	r3, #4
 80094f2:	d107      	bne.n	8009504 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009502:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009504:	2301      	movs	r3, #1
 8009506:	e035      	b.n	8009574 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009516:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800951a:	9300      	str	r3, [sp, #0]
 800951c:	6a3b      	ldr	r3, [r7, #32]
 800951e:	2200      	movs	r2, #0
 8009520:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009524:	68f8      	ldr	r0, [r7, #12]
 8009526:	f000 f82b 	bl	8009580 <I2C_WaitOnFlagUntilTimeout>
 800952a:	4603      	mov	r3, r0
 800952c:	2b00      	cmp	r3, #0
 800952e:	d00d      	beq.n	800954c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800953a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800953e:	d103      	bne.n	8009548 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009546:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009548:	2303      	movs	r3, #3
 800954a:	e013      	b.n	8009574 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800954c:	897b      	ldrh	r3, [r7, #10]
 800954e:	b2db      	uxtb	r3, r3
 8009550:	f043 0301 	orr.w	r3, r3, #1
 8009554:	b2da      	uxtb	r2, r3
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800955c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800955e:	6a3a      	ldr	r2, [r7, #32]
 8009560:	4906      	ldr	r1, [pc, #24]	@ (800957c <I2C_RequestMemoryRead+0x1cc>)
 8009562:	68f8      	ldr	r0, [r7, #12]
 8009564:	f000 f886 	bl	8009674 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d001      	beq.n	8009572 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800956e:	2301      	movs	r3, #1
 8009570:	e000      	b.n	8009574 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009572:	2300      	movs	r3, #0
}
 8009574:	4618      	mov	r0, r3
 8009576:	3718      	adds	r7, #24
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	00010002 	.word	0x00010002

08009580 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	60b9      	str	r1, [r7, #8]
 800958a:	603b      	str	r3, [r7, #0]
 800958c:	4613      	mov	r3, r2
 800958e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009590:	e048      	b.n	8009624 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009598:	d044      	beq.n	8009624 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800959a:	f7fe fbbf 	bl	8007d1c <HAL_GetTick>
 800959e:	4602      	mov	r2, r0
 80095a0:	69bb      	ldr	r3, [r7, #24]
 80095a2:	1ad3      	subs	r3, r2, r3
 80095a4:	683a      	ldr	r2, [r7, #0]
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d302      	bcc.n	80095b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d139      	bne.n	8009624 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	0c1b      	lsrs	r3, r3, #16
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d10d      	bne.n	80095d6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	695b      	ldr	r3, [r3, #20]
 80095c0:	43da      	mvns	r2, r3
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	4013      	ands	r3, r2
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	bf0c      	ite	eq
 80095cc:	2301      	moveq	r3, #1
 80095ce:	2300      	movne	r3, #0
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	461a      	mov	r2, r3
 80095d4:	e00c      	b.n	80095f0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	699b      	ldr	r3, [r3, #24]
 80095dc:	43da      	mvns	r2, r3
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	4013      	ands	r3, r2
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	bf0c      	ite	eq
 80095e8:	2301      	moveq	r3, #1
 80095ea:	2300      	movne	r3, #0
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	461a      	mov	r2, r3
 80095f0:	79fb      	ldrb	r3, [r7, #7]
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d116      	bne.n	8009624 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2200      	movs	r2, #0
 80095fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2220      	movs	r2, #32
 8009600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2200      	movs	r2, #0
 8009608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009610:	f043 0220 	orr.w	r2, r3, #32
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2200      	movs	r2, #0
 800961c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009620:	2301      	movs	r3, #1
 8009622:	e023      	b.n	800966c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	0c1b      	lsrs	r3, r3, #16
 8009628:	b2db      	uxtb	r3, r3
 800962a:	2b01      	cmp	r3, #1
 800962c:	d10d      	bne.n	800964a <I2C_WaitOnFlagUntilTimeout+0xca>
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	695b      	ldr	r3, [r3, #20]
 8009634:	43da      	mvns	r2, r3
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	4013      	ands	r3, r2
 800963a:	b29b      	uxth	r3, r3
 800963c:	2b00      	cmp	r3, #0
 800963e:	bf0c      	ite	eq
 8009640:	2301      	moveq	r3, #1
 8009642:	2300      	movne	r3, #0
 8009644:	b2db      	uxtb	r3, r3
 8009646:	461a      	mov	r2, r3
 8009648:	e00c      	b.n	8009664 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	699b      	ldr	r3, [r3, #24]
 8009650:	43da      	mvns	r2, r3
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	4013      	ands	r3, r2
 8009656:	b29b      	uxth	r3, r3
 8009658:	2b00      	cmp	r3, #0
 800965a:	bf0c      	ite	eq
 800965c:	2301      	moveq	r3, #1
 800965e:	2300      	movne	r3, #0
 8009660:	b2db      	uxtb	r3, r3
 8009662:	461a      	mov	r2, r3
 8009664:	79fb      	ldrb	r3, [r7, #7]
 8009666:	429a      	cmp	r2, r3
 8009668:	d093      	beq.n	8009592 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800966a:	2300      	movs	r3, #0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3710      	adds	r7, #16
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	607a      	str	r2, [r7, #4]
 8009680:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009682:	e071      	b.n	8009768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	695b      	ldr	r3, [r3, #20]
 800968a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800968e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009692:	d123      	bne.n	80096dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80096a2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80096ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2200      	movs	r2, #0
 80096b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2220      	movs	r2, #32
 80096b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2200      	movs	r2, #0
 80096c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096c8:	f043 0204 	orr.w	r2, r3, #4
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80096d8:	2301      	movs	r3, #1
 80096da:	e067      	b.n	80097ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096e2:	d041      	beq.n	8009768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096e4:	f7fe fb1a 	bl	8007d1c <HAL_GetTick>
 80096e8:	4602      	mov	r2, r0
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	1ad3      	subs	r3, r2, r3
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d302      	bcc.n	80096fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d136      	bne.n	8009768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	0c1b      	lsrs	r3, r3, #16
 80096fe:	b2db      	uxtb	r3, r3
 8009700:	2b01      	cmp	r3, #1
 8009702:	d10c      	bne.n	800971e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	695b      	ldr	r3, [r3, #20]
 800970a:	43da      	mvns	r2, r3
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	4013      	ands	r3, r2
 8009710:	b29b      	uxth	r3, r3
 8009712:	2b00      	cmp	r3, #0
 8009714:	bf14      	ite	ne
 8009716:	2301      	movne	r3, #1
 8009718:	2300      	moveq	r3, #0
 800971a:	b2db      	uxtb	r3, r3
 800971c:	e00b      	b.n	8009736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	699b      	ldr	r3, [r3, #24]
 8009724:	43da      	mvns	r2, r3
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	4013      	ands	r3, r2
 800972a:	b29b      	uxth	r3, r3
 800972c:	2b00      	cmp	r3, #0
 800972e:	bf14      	ite	ne
 8009730:	2301      	movne	r3, #1
 8009732:	2300      	moveq	r3, #0
 8009734:	b2db      	uxtb	r3, r3
 8009736:	2b00      	cmp	r3, #0
 8009738:	d016      	beq.n	8009768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2200      	movs	r2, #0
 800973e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2220      	movs	r2, #32
 8009744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2200      	movs	r2, #0
 800974c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009754:	f043 0220 	orr.w	r2, r3, #32
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2200      	movs	r2, #0
 8009760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009764:	2301      	movs	r3, #1
 8009766:	e021      	b.n	80097ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	0c1b      	lsrs	r3, r3, #16
 800976c:	b2db      	uxtb	r3, r3
 800976e:	2b01      	cmp	r3, #1
 8009770:	d10c      	bne.n	800978c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	695b      	ldr	r3, [r3, #20]
 8009778:	43da      	mvns	r2, r3
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	4013      	ands	r3, r2
 800977e:	b29b      	uxth	r3, r3
 8009780:	2b00      	cmp	r3, #0
 8009782:	bf14      	ite	ne
 8009784:	2301      	movne	r3, #1
 8009786:	2300      	moveq	r3, #0
 8009788:	b2db      	uxtb	r3, r3
 800978a:	e00b      	b.n	80097a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	699b      	ldr	r3, [r3, #24]
 8009792:	43da      	mvns	r2, r3
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	4013      	ands	r3, r2
 8009798:	b29b      	uxth	r3, r3
 800979a:	2b00      	cmp	r3, #0
 800979c:	bf14      	ite	ne
 800979e:	2301      	movne	r3, #1
 80097a0:	2300      	moveq	r3, #0
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	f47f af6d 	bne.w	8009684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3710      	adds	r7, #16
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80097c0:	e034      	b.n	800982c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	f000 f8e3 	bl	800998e <I2C_IsAcknowledgeFailed>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d001      	beq.n	80097d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	e034      	b.n	800983c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097d8:	d028      	beq.n	800982c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097da:	f7fe fa9f 	bl	8007d1c <HAL_GetTick>
 80097de:	4602      	mov	r2, r0
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	1ad3      	subs	r3, r2, r3
 80097e4:	68ba      	ldr	r2, [r7, #8]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d302      	bcc.n	80097f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d11d      	bne.n	800982c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	695b      	ldr	r3, [r3, #20]
 80097f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097fa:	2b80      	cmp	r3, #128	@ 0x80
 80097fc:	d016      	beq.n	800982c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2200      	movs	r2, #0
 8009802:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2220      	movs	r2, #32
 8009808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2200      	movs	r2, #0
 8009810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009818:	f043 0220 	orr.w	r2, r3, #32
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2200      	movs	r2, #0
 8009824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009828:	2301      	movs	r3, #1
 800982a:	e007      	b.n	800983c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	695b      	ldr	r3, [r3, #20]
 8009832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009836:	2b80      	cmp	r3, #128	@ 0x80
 8009838:	d1c3      	bne.n	80097c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800983a:	2300      	movs	r3, #0
}
 800983c:	4618      	mov	r0, r3
 800983e:	3710      	adds	r7, #16
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009850:	e034      	b.n	80098bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009852:	68f8      	ldr	r0, [r7, #12]
 8009854:	f000 f89b 	bl	800998e <I2C_IsAcknowledgeFailed>
 8009858:	4603      	mov	r3, r0
 800985a:	2b00      	cmp	r3, #0
 800985c:	d001      	beq.n	8009862 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	e034      	b.n	80098cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009868:	d028      	beq.n	80098bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800986a:	f7fe fa57 	bl	8007d1c <HAL_GetTick>
 800986e:	4602      	mov	r2, r0
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	1ad3      	subs	r3, r2, r3
 8009874:	68ba      	ldr	r2, [r7, #8]
 8009876:	429a      	cmp	r2, r3
 8009878:	d302      	bcc.n	8009880 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d11d      	bne.n	80098bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	695b      	ldr	r3, [r3, #20]
 8009886:	f003 0304 	and.w	r3, r3, #4
 800988a:	2b04      	cmp	r3, #4
 800988c:	d016      	beq.n	80098bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2200      	movs	r2, #0
 8009892:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2220      	movs	r2, #32
 8009898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2200      	movs	r2, #0
 80098a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098a8:	f043 0220 	orr.w	r2, r3, #32
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2200      	movs	r2, #0
 80098b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	e007      	b.n	80098cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	695b      	ldr	r3, [r3, #20]
 80098c2:	f003 0304 	and.w	r3, r3, #4
 80098c6:	2b04      	cmp	r3, #4
 80098c8:	d1c3      	bne.n	8009852 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80098ca:	2300      	movs	r3, #0
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3710      	adds	r7, #16
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80098e0:	e049      	b.n	8009976 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	695b      	ldr	r3, [r3, #20]
 80098e8:	f003 0310 	and.w	r3, r3, #16
 80098ec:	2b10      	cmp	r3, #16
 80098ee:	d119      	bne.n	8009924 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f06f 0210 	mvn.w	r2, #16
 80098f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2200      	movs	r2, #0
 80098fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2220      	movs	r2, #32
 8009904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2200      	movs	r2, #0
 800990c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2200      	movs	r2, #0
 800991c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009920:	2301      	movs	r3, #1
 8009922:	e030      	b.n	8009986 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009924:	f7fe f9fa 	bl	8007d1c <HAL_GetTick>
 8009928:	4602      	mov	r2, r0
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	1ad3      	subs	r3, r2, r3
 800992e:	68ba      	ldr	r2, [r7, #8]
 8009930:	429a      	cmp	r2, r3
 8009932:	d302      	bcc.n	800993a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d11d      	bne.n	8009976 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	695b      	ldr	r3, [r3, #20]
 8009940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009944:	2b40      	cmp	r3, #64	@ 0x40
 8009946:	d016      	beq.n	8009976 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2200      	movs	r2, #0
 800994c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2220      	movs	r2, #32
 8009952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2200      	movs	r2, #0
 800995a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009962:	f043 0220 	orr.w	r2, r3, #32
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2200      	movs	r2, #0
 800996e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009972:	2301      	movs	r3, #1
 8009974:	e007      	b.n	8009986 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	695b      	ldr	r3, [r3, #20]
 800997c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009980:	2b40      	cmp	r3, #64	@ 0x40
 8009982:	d1ae      	bne.n	80098e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009984:	2300      	movs	r3, #0
}
 8009986:	4618      	mov	r0, r3
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800998e:	b480      	push	{r7}
 8009990:	b083      	sub	sp, #12
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	695b      	ldr	r3, [r3, #20]
 800999c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80099a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099a4:	d11b      	bne.n	80099de <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80099ae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2200      	movs	r2, #0
 80099b4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2220      	movs	r2, #32
 80099ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099ca:	f043 0204 	orr.w	r2, r3, #4
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2200      	movs	r2, #0
 80099d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80099da:	2301      	movs	r3, #1
 80099dc:	e000      	b.n	80099e0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80099de:	2300      	movs	r3, #0
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	370c      	adds	r7, #12
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b086      	sub	sp, #24
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d101      	bne.n	80099fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80099fa:	2301      	movs	r3, #1
 80099fc:	e267      	b.n	8009ece <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f003 0301 	and.w	r3, r3, #1
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d075      	beq.n	8009af6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8009a0a:	4b88      	ldr	r3, [pc, #544]	@ (8009c2c <HAL_RCC_OscConfig+0x240>)
 8009a0c:	689b      	ldr	r3, [r3, #8]
 8009a0e:	f003 030c 	and.w	r3, r3, #12
 8009a12:	2b04      	cmp	r3, #4
 8009a14:	d00c      	beq.n	8009a30 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009a16:	4b85      	ldr	r3, [pc, #532]	@ (8009c2c <HAL_RCC_OscConfig+0x240>)
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8009a1e:	2b08      	cmp	r3, #8
 8009a20:	d112      	bne.n	8009a48 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009a22:	4b82      	ldr	r3, [pc, #520]	@ (8009c2c <HAL_RCC_OscConfig+0x240>)
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009a2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009a2e:	d10b      	bne.n	8009a48 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a30:	4b7e      	ldr	r3, [pc, #504]	@ (8009c2c <HAL_RCC_OscConfig+0x240>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d05b      	beq.n	8009af4 <HAL_RCC_OscConfig+0x108>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d157      	bne.n	8009af4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009a44:	2301      	movs	r3, #1
 8009a46:	e242      	b.n	8009ece <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a50:	d106      	bne.n	8009a60 <HAL_RCC_OscConfig+0x74>
 8009a52:	4b76      	ldr	r3, [pc, #472]	@ (8009c2c <HAL_RCC_OscConfig+0x240>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a75      	ldr	r2, [pc, #468]	@ (8009c2c <HAL_RCC_OscConfig+0x240>)
 8009a58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a5c:	6013      	str	r3, [r2, #0]
 8009a5e:	e01d      	b.n	8009a9c <HAL_RCC_OscConfig+0xb0>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009a68:	d10c      	bne.n	8009a84 <HAL_RCC_OscConfig+0x98>
 8009a6a:	4b70      	ldr	r3, [pc, #448]	@ (8009c2c <HAL_RCC_OscConfig+0x240>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a6f      	ldr	r2, [pc, #444]	@ (8009c2c <HAL_RCC_OscConfig+0x240>)
 8009a70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009a74:	6013      	str	r3, [r2, #0]
 8009a76:	4b6d      	ldr	r3, [pc, #436]	@ (8009c2c <HAL_RCC_OscConfig+0x240>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a6c      	ldr	r2, [pc, #432]	@ (8009c2c <HAL_RCC_OscConfig+0x240>)
 8009a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a80:	6013      	str	r3, [r2, #0]
 8009a82:	e00b      	b.n	8009a9c <HAL_RCC_OscConfig+0xb0>
 8009a84:	4b69      	ldr	r3, [pc, #420]	@ (8009c2c <HAL_RCC_OscConfig+0x240>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a68      	ldr	r2, [pc, #416]	@ (8009c2c <HAL_RCC_OscConfig+0x240>)
 8009a8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a8e:	6013      	str	r3, [r2, #0]
 8009a90:	4b66      	ldr	r3, [pc, #408]	@ (8009c2c <HAL_RCC_OscConfig+0x240>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a65      	ldr	r2, [pc, #404]	@ (8009c2c <HAL_RCC_OscConfig+0x240>)
 8009a96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009a9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d013      	beq.n	8009acc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009aa4:	f7fe f93a 	bl	8007d1c <HAL_GetTick>
 8009aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009aaa:	e008      	b.n	8009abe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009aac:	f7fe f936 	bl	8007d1c <HAL_GetTick>
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	1ad3      	subs	r3, r2, r3
 8009ab6:	2b64      	cmp	r3, #100	@ 0x64
 8009ab8:	d901      	bls.n	8009abe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009aba:	2303      	movs	r3, #3
 8009abc:	e207      	b.n	8009ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009abe:	4b5b      	ldr	r3, [pc, #364]	@ (8009c2c <HAL_RCC_OscConfig+0x240>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d0f0      	beq.n	8009aac <HAL_RCC_OscConfig+0xc0>
 8009aca:	e014      	b.n	8009af6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009acc:	f7fe f926 	bl	8007d1c <HAL_GetTick>
 8009ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009ad2:	e008      	b.n	8009ae6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ad4:	f7fe f922 	bl	8007d1c <HAL_GetTick>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	1ad3      	subs	r3, r2, r3
 8009ade:	2b64      	cmp	r3, #100	@ 0x64
 8009ae0:	d901      	bls.n	8009ae6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009ae2:	2303      	movs	r3, #3
 8009ae4:	e1f3      	b.n	8009ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009ae6:	4b51      	ldr	r3, [pc, #324]	@ (8009c2c <HAL_RCC_OscConfig+0x240>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d1f0      	bne.n	8009ad4 <HAL_RCC_OscConfig+0xe8>
 8009af2:	e000      	b.n	8009af6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f003 0302 	and.w	r3, r3, #2
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d063      	beq.n	8009bca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009b02:	4b4a      	ldr	r3, [pc, #296]	@ (8009c2c <HAL_RCC_OscConfig+0x240>)
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	f003 030c 	and.w	r3, r3, #12
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d00b      	beq.n	8009b26 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009b0e:	4b47      	ldr	r3, [pc, #284]	@ (8009c2c <HAL_RCC_OscConfig+0x240>)
 8009b10:	689b      	ldr	r3, [r3, #8]
 8009b12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009b16:	2b08      	cmp	r3, #8
 8009b18:	d11c      	bne.n	8009b54 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009b1a:	4b44      	ldr	r3, [pc, #272]	@ (8009c2c <HAL_RCC_OscConfig+0x240>)
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d116      	bne.n	8009b54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009b26:	4b41      	ldr	r3, [pc, #260]	@ (8009c2c <HAL_RCC_OscConfig+0x240>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f003 0302 	and.w	r3, r3, #2
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d005      	beq.n	8009b3e <HAL_RCC_OscConfig+0x152>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	68db      	ldr	r3, [r3, #12]
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	d001      	beq.n	8009b3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e1c7      	b.n	8009ece <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b3e:	4b3b      	ldr	r3, [pc, #236]	@ (8009c2c <HAL_RCC_OscConfig+0x240>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	691b      	ldr	r3, [r3, #16]
 8009b4a:	00db      	lsls	r3, r3, #3
 8009b4c:	4937      	ldr	r1, [pc, #220]	@ (8009c2c <HAL_RCC_OscConfig+0x240>)
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009b52:	e03a      	b.n	8009bca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	68db      	ldr	r3, [r3, #12]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d020      	beq.n	8009b9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009b5c:	4b34      	ldr	r3, [pc, #208]	@ (8009c30 <HAL_RCC_OscConfig+0x244>)
 8009b5e:	2201      	movs	r2, #1
 8009b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b62:	f7fe f8db 	bl	8007d1c <HAL_GetTick>
 8009b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b68:	e008      	b.n	8009b7c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b6a:	f7fe f8d7 	bl	8007d1c <HAL_GetTick>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	1ad3      	subs	r3, r2, r3
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	d901      	bls.n	8009b7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009b78:	2303      	movs	r3, #3
 8009b7a:	e1a8      	b.n	8009ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8009c2c <HAL_RCC_OscConfig+0x240>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f003 0302 	and.w	r3, r3, #2
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d0f0      	beq.n	8009b6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b88:	4b28      	ldr	r3, [pc, #160]	@ (8009c2c <HAL_RCC_OscConfig+0x240>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	691b      	ldr	r3, [r3, #16]
 8009b94:	00db      	lsls	r3, r3, #3
 8009b96:	4925      	ldr	r1, [pc, #148]	@ (8009c2c <HAL_RCC_OscConfig+0x240>)
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	600b      	str	r3, [r1, #0]
 8009b9c:	e015      	b.n	8009bca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009b9e:	4b24      	ldr	r3, [pc, #144]	@ (8009c30 <HAL_RCC_OscConfig+0x244>)
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ba4:	f7fe f8ba 	bl	8007d1c <HAL_GetTick>
 8009ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009baa:	e008      	b.n	8009bbe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009bac:	f7fe f8b6 	bl	8007d1c <HAL_GetTick>
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	1ad3      	subs	r3, r2, r3
 8009bb6:	2b02      	cmp	r3, #2
 8009bb8:	d901      	bls.n	8009bbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009bba:	2303      	movs	r3, #3
 8009bbc:	e187      	b.n	8009ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8009c2c <HAL_RCC_OscConfig+0x240>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f003 0302 	and.w	r3, r3, #2
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d1f0      	bne.n	8009bac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f003 0308 	and.w	r3, r3, #8
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d036      	beq.n	8009c44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	695b      	ldr	r3, [r3, #20]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d016      	beq.n	8009c0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009bde:	4b15      	ldr	r3, [pc, #84]	@ (8009c34 <HAL_RCC_OscConfig+0x248>)
 8009be0:	2201      	movs	r2, #1
 8009be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009be4:	f7fe f89a 	bl	8007d1c <HAL_GetTick>
 8009be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009bea:	e008      	b.n	8009bfe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009bec:	f7fe f896 	bl	8007d1c <HAL_GetTick>
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	1ad3      	subs	r3, r2, r3
 8009bf6:	2b02      	cmp	r3, #2
 8009bf8:	d901      	bls.n	8009bfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009bfa:	2303      	movs	r3, #3
 8009bfc:	e167      	b.n	8009ece <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8009c2c <HAL_RCC_OscConfig+0x240>)
 8009c00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c02:	f003 0302 	and.w	r3, r3, #2
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d0f0      	beq.n	8009bec <HAL_RCC_OscConfig+0x200>
 8009c0a:	e01b      	b.n	8009c44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009c0c:	4b09      	ldr	r3, [pc, #36]	@ (8009c34 <HAL_RCC_OscConfig+0x248>)
 8009c0e:	2200      	movs	r2, #0
 8009c10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009c12:	f7fe f883 	bl	8007d1c <HAL_GetTick>
 8009c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c18:	e00e      	b.n	8009c38 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c1a:	f7fe f87f 	bl	8007d1c <HAL_GetTick>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	1ad3      	subs	r3, r2, r3
 8009c24:	2b02      	cmp	r3, #2
 8009c26:	d907      	bls.n	8009c38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009c28:	2303      	movs	r3, #3
 8009c2a:	e150      	b.n	8009ece <HAL_RCC_OscConfig+0x4e2>
 8009c2c:	40023800 	.word	0x40023800
 8009c30:	42470000 	.word	0x42470000
 8009c34:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c38:	4b88      	ldr	r3, [pc, #544]	@ (8009e5c <HAL_RCC_OscConfig+0x470>)
 8009c3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c3c:	f003 0302 	and.w	r3, r3, #2
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d1ea      	bne.n	8009c1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f003 0304 	and.w	r3, r3, #4
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	f000 8097 	beq.w	8009d80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009c52:	2300      	movs	r3, #0
 8009c54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009c56:	4b81      	ldr	r3, [pc, #516]	@ (8009e5c <HAL_RCC_OscConfig+0x470>)
 8009c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d10f      	bne.n	8009c82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009c62:	2300      	movs	r3, #0
 8009c64:	60bb      	str	r3, [r7, #8]
 8009c66:	4b7d      	ldr	r3, [pc, #500]	@ (8009e5c <HAL_RCC_OscConfig+0x470>)
 8009c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c6a:	4a7c      	ldr	r2, [pc, #496]	@ (8009e5c <HAL_RCC_OscConfig+0x470>)
 8009c6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c70:	6413      	str	r3, [r2, #64]	@ 0x40
 8009c72:	4b7a      	ldr	r3, [pc, #488]	@ (8009e5c <HAL_RCC_OscConfig+0x470>)
 8009c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c7a:	60bb      	str	r3, [r7, #8]
 8009c7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c82:	4b77      	ldr	r3, [pc, #476]	@ (8009e60 <HAL_RCC_OscConfig+0x474>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d118      	bne.n	8009cc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009c8e:	4b74      	ldr	r3, [pc, #464]	@ (8009e60 <HAL_RCC_OscConfig+0x474>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4a73      	ldr	r2, [pc, #460]	@ (8009e60 <HAL_RCC_OscConfig+0x474>)
 8009c94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009c98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009c9a:	f7fe f83f 	bl	8007d1c <HAL_GetTick>
 8009c9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ca0:	e008      	b.n	8009cb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ca2:	f7fe f83b 	bl	8007d1c <HAL_GetTick>
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	1ad3      	subs	r3, r2, r3
 8009cac:	2b02      	cmp	r3, #2
 8009cae:	d901      	bls.n	8009cb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009cb0:	2303      	movs	r3, #3
 8009cb2:	e10c      	b.n	8009ece <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009cb4:	4b6a      	ldr	r3, [pc, #424]	@ (8009e60 <HAL_RCC_OscConfig+0x474>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d0f0      	beq.n	8009ca2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	689b      	ldr	r3, [r3, #8]
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d106      	bne.n	8009cd6 <HAL_RCC_OscConfig+0x2ea>
 8009cc8:	4b64      	ldr	r3, [pc, #400]	@ (8009e5c <HAL_RCC_OscConfig+0x470>)
 8009cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ccc:	4a63      	ldr	r2, [pc, #396]	@ (8009e5c <HAL_RCC_OscConfig+0x470>)
 8009cce:	f043 0301 	orr.w	r3, r3, #1
 8009cd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8009cd4:	e01c      	b.n	8009d10 <HAL_RCC_OscConfig+0x324>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	689b      	ldr	r3, [r3, #8]
 8009cda:	2b05      	cmp	r3, #5
 8009cdc:	d10c      	bne.n	8009cf8 <HAL_RCC_OscConfig+0x30c>
 8009cde:	4b5f      	ldr	r3, [pc, #380]	@ (8009e5c <HAL_RCC_OscConfig+0x470>)
 8009ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ce2:	4a5e      	ldr	r2, [pc, #376]	@ (8009e5c <HAL_RCC_OscConfig+0x470>)
 8009ce4:	f043 0304 	orr.w	r3, r3, #4
 8009ce8:	6713      	str	r3, [r2, #112]	@ 0x70
 8009cea:	4b5c      	ldr	r3, [pc, #368]	@ (8009e5c <HAL_RCC_OscConfig+0x470>)
 8009cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cee:	4a5b      	ldr	r2, [pc, #364]	@ (8009e5c <HAL_RCC_OscConfig+0x470>)
 8009cf0:	f043 0301 	orr.w	r3, r3, #1
 8009cf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8009cf6:	e00b      	b.n	8009d10 <HAL_RCC_OscConfig+0x324>
 8009cf8:	4b58      	ldr	r3, [pc, #352]	@ (8009e5c <HAL_RCC_OscConfig+0x470>)
 8009cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cfc:	4a57      	ldr	r2, [pc, #348]	@ (8009e5c <HAL_RCC_OscConfig+0x470>)
 8009cfe:	f023 0301 	bic.w	r3, r3, #1
 8009d02:	6713      	str	r3, [r2, #112]	@ 0x70
 8009d04:	4b55      	ldr	r3, [pc, #340]	@ (8009e5c <HAL_RCC_OscConfig+0x470>)
 8009d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d08:	4a54      	ldr	r2, [pc, #336]	@ (8009e5c <HAL_RCC_OscConfig+0x470>)
 8009d0a:	f023 0304 	bic.w	r3, r3, #4
 8009d0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	689b      	ldr	r3, [r3, #8]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d015      	beq.n	8009d44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d18:	f7fe f800 	bl	8007d1c <HAL_GetTick>
 8009d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d1e:	e00a      	b.n	8009d36 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d20:	f7fd fffc 	bl	8007d1c <HAL_GetTick>
 8009d24:	4602      	mov	r2, r0
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	1ad3      	subs	r3, r2, r3
 8009d2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d901      	bls.n	8009d36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009d32:	2303      	movs	r3, #3
 8009d34:	e0cb      	b.n	8009ece <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d36:	4b49      	ldr	r3, [pc, #292]	@ (8009e5c <HAL_RCC_OscConfig+0x470>)
 8009d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d3a:	f003 0302 	and.w	r3, r3, #2
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d0ee      	beq.n	8009d20 <HAL_RCC_OscConfig+0x334>
 8009d42:	e014      	b.n	8009d6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009d44:	f7fd ffea 	bl	8007d1c <HAL_GetTick>
 8009d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009d4a:	e00a      	b.n	8009d62 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d4c:	f7fd ffe6 	bl	8007d1c <HAL_GetTick>
 8009d50:	4602      	mov	r2, r0
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	1ad3      	subs	r3, r2, r3
 8009d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d901      	bls.n	8009d62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009d5e:	2303      	movs	r3, #3
 8009d60:	e0b5      	b.n	8009ece <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009d62:	4b3e      	ldr	r3, [pc, #248]	@ (8009e5c <HAL_RCC_OscConfig+0x470>)
 8009d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d66:	f003 0302 	and.w	r3, r3, #2
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d1ee      	bne.n	8009d4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009d6e:	7dfb      	ldrb	r3, [r7, #23]
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d105      	bne.n	8009d80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009d74:	4b39      	ldr	r3, [pc, #228]	@ (8009e5c <HAL_RCC_OscConfig+0x470>)
 8009d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d78:	4a38      	ldr	r2, [pc, #224]	@ (8009e5c <HAL_RCC_OscConfig+0x470>)
 8009d7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009d7e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	699b      	ldr	r3, [r3, #24]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	f000 80a1 	beq.w	8009ecc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009d8a:	4b34      	ldr	r3, [pc, #208]	@ (8009e5c <HAL_RCC_OscConfig+0x470>)
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	f003 030c 	and.w	r3, r3, #12
 8009d92:	2b08      	cmp	r3, #8
 8009d94:	d05c      	beq.n	8009e50 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	699b      	ldr	r3, [r3, #24]
 8009d9a:	2b02      	cmp	r3, #2
 8009d9c:	d141      	bne.n	8009e22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d9e:	4b31      	ldr	r3, [pc, #196]	@ (8009e64 <HAL_RCC_OscConfig+0x478>)
 8009da0:	2200      	movs	r2, #0
 8009da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009da4:	f7fd ffba 	bl	8007d1c <HAL_GetTick>
 8009da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009daa:	e008      	b.n	8009dbe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009dac:	f7fd ffb6 	bl	8007d1c <HAL_GetTick>
 8009db0:	4602      	mov	r2, r0
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	1ad3      	subs	r3, r2, r3
 8009db6:	2b02      	cmp	r3, #2
 8009db8:	d901      	bls.n	8009dbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009dba:	2303      	movs	r3, #3
 8009dbc:	e087      	b.n	8009ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009dbe:	4b27      	ldr	r3, [pc, #156]	@ (8009e5c <HAL_RCC_OscConfig+0x470>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d1f0      	bne.n	8009dac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	69da      	ldr	r2, [r3, #28]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6a1b      	ldr	r3, [r3, #32]
 8009dd2:	431a      	orrs	r2, r3
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dd8:	019b      	lsls	r3, r3, #6
 8009dda:	431a      	orrs	r2, r3
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009de0:	085b      	lsrs	r3, r3, #1
 8009de2:	3b01      	subs	r3, #1
 8009de4:	041b      	lsls	r3, r3, #16
 8009de6:	431a      	orrs	r2, r3
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dec:	061b      	lsls	r3, r3, #24
 8009dee:	491b      	ldr	r1, [pc, #108]	@ (8009e5c <HAL_RCC_OscConfig+0x470>)
 8009df0:	4313      	orrs	r3, r2
 8009df2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009df4:	4b1b      	ldr	r3, [pc, #108]	@ (8009e64 <HAL_RCC_OscConfig+0x478>)
 8009df6:	2201      	movs	r2, #1
 8009df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009dfa:	f7fd ff8f 	bl	8007d1c <HAL_GetTick>
 8009dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e00:	e008      	b.n	8009e14 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e02:	f7fd ff8b 	bl	8007d1c <HAL_GetTick>
 8009e06:	4602      	mov	r2, r0
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	1ad3      	subs	r3, r2, r3
 8009e0c:	2b02      	cmp	r3, #2
 8009e0e:	d901      	bls.n	8009e14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009e10:	2303      	movs	r3, #3
 8009e12:	e05c      	b.n	8009ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e14:	4b11      	ldr	r3, [pc, #68]	@ (8009e5c <HAL_RCC_OscConfig+0x470>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d0f0      	beq.n	8009e02 <HAL_RCC_OscConfig+0x416>
 8009e20:	e054      	b.n	8009ecc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e22:	4b10      	ldr	r3, [pc, #64]	@ (8009e64 <HAL_RCC_OscConfig+0x478>)
 8009e24:	2200      	movs	r2, #0
 8009e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e28:	f7fd ff78 	bl	8007d1c <HAL_GetTick>
 8009e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e2e:	e008      	b.n	8009e42 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e30:	f7fd ff74 	bl	8007d1c <HAL_GetTick>
 8009e34:	4602      	mov	r2, r0
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	1ad3      	subs	r3, r2, r3
 8009e3a:	2b02      	cmp	r3, #2
 8009e3c:	d901      	bls.n	8009e42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009e3e:	2303      	movs	r3, #3
 8009e40:	e045      	b.n	8009ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e42:	4b06      	ldr	r3, [pc, #24]	@ (8009e5c <HAL_RCC_OscConfig+0x470>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d1f0      	bne.n	8009e30 <HAL_RCC_OscConfig+0x444>
 8009e4e:	e03d      	b.n	8009ecc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	699b      	ldr	r3, [r3, #24]
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d107      	bne.n	8009e68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e038      	b.n	8009ece <HAL_RCC_OscConfig+0x4e2>
 8009e5c:	40023800 	.word	0x40023800
 8009e60:	40007000 	.word	0x40007000
 8009e64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009e68:	4b1b      	ldr	r3, [pc, #108]	@ (8009ed8 <HAL_RCC_OscConfig+0x4ec>)
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	699b      	ldr	r3, [r3, #24]
 8009e72:	2b01      	cmp	r3, #1
 8009e74:	d028      	beq.n	8009ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d121      	bne.n	8009ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d11a      	bne.n	8009ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009e92:	68fa      	ldr	r2, [r7, #12]
 8009e94:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009e98:	4013      	ands	r3, r2
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009e9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d111      	bne.n	8009ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eae:	085b      	lsrs	r3, r3, #1
 8009eb0:	3b01      	subs	r3, #1
 8009eb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d107      	bne.n	8009ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ec2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d001      	beq.n	8009ecc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	e000      	b.n	8009ece <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009ecc:	2300      	movs	r3, #0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3718      	adds	r7, #24
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	bf00      	nop
 8009ed8:	40023800 	.word	0x40023800

08009edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d101      	bne.n	8009ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009eec:	2301      	movs	r3, #1
 8009eee:	e0cc      	b.n	800a08a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009ef0:	4b68      	ldr	r3, [pc, #416]	@ (800a094 <HAL_RCC_ClockConfig+0x1b8>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f003 0307 	and.w	r3, r3, #7
 8009ef8:	683a      	ldr	r2, [r7, #0]
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d90c      	bls.n	8009f18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009efe:	4b65      	ldr	r3, [pc, #404]	@ (800a094 <HAL_RCC_ClockConfig+0x1b8>)
 8009f00:	683a      	ldr	r2, [r7, #0]
 8009f02:	b2d2      	uxtb	r2, r2
 8009f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f06:	4b63      	ldr	r3, [pc, #396]	@ (800a094 <HAL_RCC_ClockConfig+0x1b8>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f003 0307 	and.w	r3, r3, #7
 8009f0e:	683a      	ldr	r2, [r7, #0]
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d001      	beq.n	8009f18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009f14:	2301      	movs	r3, #1
 8009f16:	e0b8      	b.n	800a08a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f003 0302 	and.w	r3, r3, #2
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d020      	beq.n	8009f66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f003 0304 	and.w	r3, r3, #4
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d005      	beq.n	8009f3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009f30:	4b59      	ldr	r3, [pc, #356]	@ (800a098 <HAL_RCC_ClockConfig+0x1bc>)
 8009f32:	689b      	ldr	r3, [r3, #8]
 8009f34:	4a58      	ldr	r2, [pc, #352]	@ (800a098 <HAL_RCC_ClockConfig+0x1bc>)
 8009f36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009f3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f003 0308 	and.w	r3, r3, #8
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d005      	beq.n	8009f54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009f48:	4b53      	ldr	r3, [pc, #332]	@ (800a098 <HAL_RCC_ClockConfig+0x1bc>)
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	4a52      	ldr	r2, [pc, #328]	@ (800a098 <HAL_RCC_ClockConfig+0x1bc>)
 8009f4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009f52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009f54:	4b50      	ldr	r3, [pc, #320]	@ (800a098 <HAL_RCC_ClockConfig+0x1bc>)
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	689b      	ldr	r3, [r3, #8]
 8009f60:	494d      	ldr	r1, [pc, #308]	@ (800a098 <HAL_RCC_ClockConfig+0x1bc>)
 8009f62:	4313      	orrs	r3, r2
 8009f64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f003 0301 	and.w	r3, r3, #1
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d044      	beq.n	8009ffc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d107      	bne.n	8009f8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f7a:	4b47      	ldr	r3, [pc, #284]	@ (800a098 <HAL_RCC_ClockConfig+0x1bc>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d119      	bne.n	8009fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009f86:	2301      	movs	r3, #1
 8009f88:	e07f      	b.n	800a08a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	2b02      	cmp	r3, #2
 8009f90:	d003      	beq.n	8009f9a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009f96:	2b03      	cmp	r3, #3
 8009f98:	d107      	bne.n	8009faa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009f9a:	4b3f      	ldr	r3, [pc, #252]	@ (800a098 <HAL_RCC_ClockConfig+0x1bc>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d109      	bne.n	8009fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	e06f      	b.n	800a08a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009faa:	4b3b      	ldr	r3, [pc, #236]	@ (800a098 <HAL_RCC_ClockConfig+0x1bc>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f003 0302 	and.w	r3, r3, #2
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d101      	bne.n	8009fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	e067      	b.n	800a08a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009fba:	4b37      	ldr	r3, [pc, #220]	@ (800a098 <HAL_RCC_ClockConfig+0x1bc>)
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	f023 0203 	bic.w	r2, r3, #3
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	4934      	ldr	r1, [pc, #208]	@ (800a098 <HAL_RCC_ClockConfig+0x1bc>)
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009fcc:	f7fd fea6 	bl	8007d1c <HAL_GetTick>
 8009fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009fd2:	e00a      	b.n	8009fea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009fd4:	f7fd fea2 	bl	8007d1c <HAL_GetTick>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	1ad3      	subs	r3, r2, r3
 8009fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d901      	bls.n	8009fea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009fe6:	2303      	movs	r3, #3
 8009fe8:	e04f      	b.n	800a08a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009fea:	4b2b      	ldr	r3, [pc, #172]	@ (800a098 <HAL_RCC_ClockConfig+0x1bc>)
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	f003 020c 	and.w	r2, r3, #12
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	009b      	lsls	r3, r3, #2
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	d1eb      	bne.n	8009fd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009ffc:	4b25      	ldr	r3, [pc, #148]	@ (800a094 <HAL_RCC_ClockConfig+0x1b8>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f003 0307 	and.w	r3, r3, #7
 800a004:	683a      	ldr	r2, [r7, #0]
 800a006:	429a      	cmp	r2, r3
 800a008:	d20c      	bcs.n	800a024 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a00a:	4b22      	ldr	r3, [pc, #136]	@ (800a094 <HAL_RCC_ClockConfig+0x1b8>)
 800a00c:	683a      	ldr	r2, [r7, #0]
 800a00e:	b2d2      	uxtb	r2, r2
 800a010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a012:	4b20      	ldr	r3, [pc, #128]	@ (800a094 <HAL_RCC_ClockConfig+0x1b8>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f003 0307 	and.w	r3, r3, #7
 800a01a:	683a      	ldr	r2, [r7, #0]
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d001      	beq.n	800a024 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a020:	2301      	movs	r3, #1
 800a022:	e032      	b.n	800a08a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f003 0304 	and.w	r3, r3, #4
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d008      	beq.n	800a042 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a030:	4b19      	ldr	r3, [pc, #100]	@ (800a098 <HAL_RCC_ClockConfig+0x1bc>)
 800a032:	689b      	ldr	r3, [r3, #8]
 800a034:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	68db      	ldr	r3, [r3, #12]
 800a03c:	4916      	ldr	r1, [pc, #88]	@ (800a098 <HAL_RCC_ClockConfig+0x1bc>)
 800a03e:	4313      	orrs	r3, r2
 800a040:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f003 0308 	and.w	r3, r3, #8
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d009      	beq.n	800a062 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a04e:	4b12      	ldr	r3, [pc, #72]	@ (800a098 <HAL_RCC_ClockConfig+0x1bc>)
 800a050:	689b      	ldr	r3, [r3, #8]
 800a052:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	691b      	ldr	r3, [r3, #16]
 800a05a:	00db      	lsls	r3, r3, #3
 800a05c:	490e      	ldr	r1, [pc, #56]	@ (800a098 <HAL_RCC_ClockConfig+0x1bc>)
 800a05e:	4313      	orrs	r3, r2
 800a060:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a062:	f000 f821 	bl	800a0a8 <HAL_RCC_GetSysClockFreq>
 800a066:	4602      	mov	r2, r0
 800a068:	4b0b      	ldr	r3, [pc, #44]	@ (800a098 <HAL_RCC_ClockConfig+0x1bc>)
 800a06a:	689b      	ldr	r3, [r3, #8]
 800a06c:	091b      	lsrs	r3, r3, #4
 800a06e:	f003 030f 	and.w	r3, r3, #15
 800a072:	490a      	ldr	r1, [pc, #40]	@ (800a09c <HAL_RCC_ClockConfig+0x1c0>)
 800a074:	5ccb      	ldrb	r3, [r1, r3]
 800a076:	fa22 f303 	lsr.w	r3, r2, r3
 800a07a:	4a09      	ldr	r2, [pc, #36]	@ (800a0a0 <HAL_RCC_ClockConfig+0x1c4>)
 800a07c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800a07e:	4b09      	ldr	r3, [pc, #36]	@ (800a0a4 <HAL_RCC_ClockConfig+0x1c8>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4618      	mov	r0, r3
 800a084:	f7fd fe06 	bl	8007c94 <HAL_InitTick>

  return HAL_OK;
 800a088:	2300      	movs	r3, #0
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3710      	adds	r7, #16
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
 800a092:	bf00      	nop
 800a094:	40023c00 	.word	0x40023c00
 800a098:	40023800 	.word	0x40023800
 800a09c:	0800f804 	.word	0x0800f804
 800a0a0:	20000004 	.word	0x20000004
 800a0a4:	20000008 	.word	0x20000008

0800a0a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a0a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a0ac:	b090      	sub	sp, #64	@ 0x40
 800a0ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a0c0:	4b59      	ldr	r3, [pc, #356]	@ (800a228 <HAL_RCC_GetSysClockFreq+0x180>)
 800a0c2:	689b      	ldr	r3, [r3, #8]
 800a0c4:	f003 030c 	and.w	r3, r3, #12
 800a0c8:	2b08      	cmp	r3, #8
 800a0ca:	d00d      	beq.n	800a0e8 <HAL_RCC_GetSysClockFreq+0x40>
 800a0cc:	2b08      	cmp	r3, #8
 800a0ce:	f200 80a1 	bhi.w	800a214 <HAL_RCC_GetSysClockFreq+0x16c>
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d002      	beq.n	800a0dc <HAL_RCC_GetSysClockFreq+0x34>
 800a0d6:	2b04      	cmp	r3, #4
 800a0d8:	d003      	beq.n	800a0e2 <HAL_RCC_GetSysClockFreq+0x3a>
 800a0da:	e09b      	b.n	800a214 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a0dc:	4b53      	ldr	r3, [pc, #332]	@ (800a22c <HAL_RCC_GetSysClockFreq+0x184>)
 800a0de:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a0e0:	e09b      	b.n	800a21a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a0e2:	4b53      	ldr	r3, [pc, #332]	@ (800a230 <HAL_RCC_GetSysClockFreq+0x188>)
 800a0e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a0e6:	e098      	b.n	800a21a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a0e8:	4b4f      	ldr	r3, [pc, #316]	@ (800a228 <HAL_RCC_GetSysClockFreq+0x180>)
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a0f0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a0f2:	4b4d      	ldr	r3, [pc, #308]	@ (800a228 <HAL_RCC_GetSysClockFreq+0x180>)
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d028      	beq.n	800a150 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a0fe:	4b4a      	ldr	r3, [pc, #296]	@ (800a228 <HAL_RCC_GetSysClockFreq+0x180>)
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	099b      	lsrs	r3, r3, #6
 800a104:	2200      	movs	r2, #0
 800a106:	623b      	str	r3, [r7, #32]
 800a108:	627a      	str	r2, [r7, #36]	@ 0x24
 800a10a:	6a3b      	ldr	r3, [r7, #32]
 800a10c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a110:	2100      	movs	r1, #0
 800a112:	4b47      	ldr	r3, [pc, #284]	@ (800a230 <HAL_RCC_GetSysClockFreq+0x188>)
 800a114:	fb03 f201 	mul.w	r2, r3, r1
 800a118:	2300      	movs	r3, #0
 800a11a:	fb00 f303 	mul.w	r3, r0, r3
 800a11e:	4413      	add	r3, r2
 800a120:	4a43      	ldr	r2, [pc, #268]	@ (800a230 <HAL_RCC_GetSysClockFreq+0x188>)
 800a122:	fba0 1202 	umull	r1, r2, r0, r2
 800a126:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a128:	460a      	mov	r2, r1
 800a12a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a12c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a12e:	4413      	add	r3, r2
 800a130:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a134:	2200      	movs	r2, #0
 800a136:	61bb      	str	r3, [r7, #24]
 800a138:	61fa      	str	r2, [r7, #28]
 800a13a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a13e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a142:	f7f6 fd39 	bl	8000bb8 <__aeabi_uldivmod>
 800a146:	4602      	mov	r2, r0
 800a148:	460b      	mov	r3, r1
 800a14a:	4613      	mov	r3, r2
 800a14c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a14e:	e053      	b.n	800a1f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a150:	4b35      	ldr	r3, [pc, #212]	@ (800a228 <HAL_RCC_GetSysClockFreq+0x180>)
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	099b      	lsrs	r3, r3, #6
 800a156:	2200      	movs	r2, #0
 800a158:	613b      	str	r3, [r7, #16]
 800a15a:	617a      	str	r2, [r7, #20]
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a162:	f04f 0b00 	mov.w	fp, #0
 800a166:	4652      	mov	r2, sl
 800a168:	465b      	mov	r3, fp
 800a16a:	f04f 0000 	mov.w	r0, #0
 800a16e:	f04f 0100 	mov.w	r1, #0
 800a172:	0159      	lsls	r1, r3, #5
 800a174:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a178:	0150      	lsls	r0, r2, #5
 800a17a:	4602      	mov	r2, r0
 800a17c:	460b      	mov	r3, r1
 800a17e:	ebb2 080a 	subs.w	r8, r2, sl
 800a182:	eb63 090b 	sbc.w	r9, r3, fp
 800a186:	f04f 0200 	mov.w	r2, #0
 800a18a:	f04f 0300 	mov.w	r3, #0
 800a18e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a192:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a196:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a19a:	ebb2 0408 	subs.w	r4, r2, r8
 800a19e:	eb63 0509 	sbc.w	r5, r3, r9
 800a1a2:	f04f 0200 	mov.w	r2, #0
 800a1a6:	f04f 0300 	mov.w	r3, #0
 800a1aa:	00eb      	lsls	r3, r5, #3
 800a1ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a1b0:	00e2      	lsls	r2, r4, #3
 800a1b2:	4614      	mov	r4, r2
 800a1b4:	461d      	mov	r5, r3
 800a1b6:	eb14 030a 	adds.w	r3, r4, sl
 800a1ba:	603b      	str	r3, [r7, #0]
 800a1bc:	eb45 030b 	adc.w	r3, r5, fp
 800a1c0:	607b      	str	r3, [r7, #4]
 800a1c2:	f04f 0200 	mov.w	r2, #0
 800a1c6:	f04f 0300 	mov.w	r3, #0
 800a1ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a1ce:	4629      	mov	r1, r5
 800a1d0:	028b      	lsls	r3, r1, #10
 800a1d2:	4621      	mov	r1, r4
 800a1d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a1d8:	4621      	mov	r1, r4
 800a1da:	028a      	lsls	r2, r1, #10
 800a1dc:	4610      	mov	r0, r2
 800a1de:	4619      	mov	r1, r3
 800a1e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	60bb      	str	r3, [r7, #8]
 800a1e6:	60fa      	str	r2, [r7, #12]
 800a1e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a1ec:	f7f6 fce4 	bl	8000bb8 <__aeabi_uldivmod>
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	460b      	mov	r3, r1
 800a1f4:	4613      	mov	r3, r2
 800a1f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800a1f8:	4b0b      	ldr	r3, [pc, #44]	@ (800a228 <HAL_RCC_GetSysClockFreq+0x180>)
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	0c1b      	lsrs	r3, r3, #16
 800a1fe:	f003 0303 	and.w	r3, r3, #3
 800a202:	3301      	adds	r3, #1
 800a204:	005b      	lsls	r3, r3, #1
 800a206:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800a208:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a20a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a20c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a210:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a212:	e002      	b.n	800a21a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a214:	4b05      	ldr	r3, [pc, #20]	@ (800a22c <HAL_RCC_GetSysClockFreq+0x184>)
 800a216:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a218:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a21a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3740      	adds	r7, #64	@ 0x40
 800a220:	46bd      	mov	sp, r7
 800a222:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a226:	bf00      	nop
 800a228:	40023800 	.word	0x40023800
 800a22c:	00f42400 	.word	0x00f42400
 800a230:	017d7840 	.word	0x017d7840

0800a234 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a234:	b480      	push	{r7}
 800a236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a238:	4b03      	ldr	r3, [pc, #12]	@ (800a248 <HAL_RCC_GetHCLKFreq+0x14>)
 800a23a:	681b      	ldr	r3, [r3, #0]
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr
 800a246:	bf00      	nop
 800a248:	20000004 	.word	0x20000004

0800a24c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a250:	f7ff fff0 	bl	800a234 <HAL_RCC_GetHCLKFreq>
 800a254:	4602      	mov	r2, r0
 800a256:	4b05      	ldr	r3, [pc, #20]	@ (800a26c <HAL_RCC_GetPCLK1Freq+0x20>)
 800a258:	689b      	ldr	r3, [r3, #8]
 800a25a:	0a9b      	lsrs	r3, r3, #10
 800a25c:	f003 0307 	and.w	r3, r3, #7
 800a260:	4903      	ldr	r1, [pc, #12]	@ (800a270 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a262:	5ccb      	ldrb	r3, [r1, r3]
 800a264:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a268:	4618      	mov	r0, r3
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	40023800 	.word	0x40023800
 800a270:	0800f814 	.word	0x0800f814

0800a274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a278:	f7ff ffdc 	bl	800a234 <HAL_RCC_GetHCLKFreq>
 800a27c:	4602      	mov	r2, r0
 800a27e:	4b05      	ldr	r3, [pc, #20]	@ (800a294 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	0b5b      	lsrs	r3, r3, #13
 800a284:	f003 0307 	and.w	r3, r3, #7
 800a288:	4903      	ldr	r1, [pc, #12]	@ (800a298 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a28a:	5ccb      	ldrb	r3, [r1, r3]
 800a28c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a290:	4618      	mov	r0, r3
 800a292:	bd80      	pop	{r7, pc}
 800a294:	40023800 	.word	0x40023800
 800a298:	0800f814 	.word	0x0800f814

0800a29c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b082      	sub	sp, #8
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d101      	bne.n	800a2ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	e07b      	b.n	800a3a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d108      	bne.n	800a2c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	685b      	ldr	r3, [r3, #4]
 800a2ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a2be:	d009      	beq.n	800a2d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	61da      	str	r2, [r3, #28]
 800a2c6:	e005      	b.n	800a2d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d106      	bne.n	800a2f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f7fd fa2c 	bl	800774c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2202      	movs	r2, #2
 800a2f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a30a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	689b      	ldr	r3, [r3, #8]
 800a318:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a31c:	431a      	orrs	r2, r3
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	68db      	ldr	r3, [r3, #12]
 800a322:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a326:	431a      	orrs	r2, r3
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	691b      	ldr	r3, [r3, #16]
 800a32c:	f003 0302 	and.w	r3, r3, #2
 800a330:	431a      	orrs	r2, r3
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	695b      	ldr	r3, [r3, #20]
 800a336:	f003 0301 	and.w	r3, r3, #1
 800a33a:	431a      	orrs	r2, r3
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	699b      	ldr	r3, [r3, #24]
 800a340:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a344:	431a      	orrs	r2, r3
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	69db      	ldr	r3, [r3, #28]
 800a34a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a34e:	431a      	orrs	r2, r3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6a1b      	ldr	r3, [r3, #32]
 800a354:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a358:	ea42 0103 	orr.w	r1, r2, r3
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a360:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	430a      	orrs	r2, r1
 800a36a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	699b      	ldr	r3, [r3, #24]
 800a370:	0c1b      	lsrs	r3, r3, #16
 800a372:	f003 0104 	and.w	r1, r3, #4
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a37a:	f003 0210 	and.w	r2, r3, #16
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	430a      	orrs	r2, r1
 800a384:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	69da      	ldr	r2, [r3, #28]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a394:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2200      	movs	r2, #0
 800a39a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2201      	movs	r2, #1
 800a3a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800a3a4:	2300      	movs	r3, #0
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3708      	adds	r7, #8
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}

0800a3ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a3ae:	b580      	push	{r7, lr}
 800a3b0:	b088      	sub	sp, #32
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	60f8      	str	r0, [r7, #12]
 800a3b6:	60b9      	str	r1, [r7, #8]
 800a3b8:	603b      	str	r3, [r7, #0]
 800a3ba:	4613      	mov	r3, r2
 800a3bc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a3be:	f7fd fcad 	bl	8007d1c <HAL_GetTick>
 800a3c2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800a3c4:	88fb      	ldrh	r3, [r7, #6]
 800a3c6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	d001      	beq.n	800a3d8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800a3d4:	2302      	movs	r3, #2
 800a3d6:	e12a      	b.n	800a62e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d002      	beq.n	800a3e4 <HAL_SPI_Transmit+0x36>
 800a3de:	88fb      	ldrh	r3, [r7, #6]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d101      	bne.n	800a3e8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	e122      	b.n	800a62e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	d101      	bne.n	800a3f6 <HAL_SPI_Transmit+0x48>
 800a3f2:	2302      	movs	r3, #2
 800a3f4:	e11b      	b.n	800a62e <HAL_SPI_Transmit+0x280>
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2203      	movs	r2, #3
 800a402:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2200      	movs	r2, #0
 800a40a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	68ba      	ldr	r2, [r7, #8]
 800a410:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	88fa      	ldrh	r2, [r7, #6]
 800a416:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	88fa      	ldrh	r2, [r7, #6]
 800a41c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2200      	movs	r2, #0
 800a422:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2200      	movs	r2, #0
 800a428:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2200      	movs	r2, #0
 800a42e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2200      	movs	r2, #0
 800a434:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2200      	movs	r2, #0
 800a43a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	689b      	ldr	r3, [r3, #8]
 800a440:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a444:	d10f      	bne.n	800a466 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	681a      	ldr	r2, [r3, #0]
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a454:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	681a      	ldr	r2, [r3, #0]
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a464:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a470:	2b40      	cmp	r3, #64	@ 0x40
 800a472:	d007      	beq.n	800a484 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a482:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	68db      	ldr	r3, [r3, #12]
 800a488:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a48c:	d152      	bne.n	800a534 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d002      	beq.n	800a49c <HAL_SPI_Transmit+0xee>
 800a496:	8b7b      	ldrh	r3, [r7, #26]
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d145      	bne.n	800a528 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4a0:	881a      	ldrh	r2, [r3, #0]
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4ac:	1c9a      	adds	r2, r3, #2
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	3b01      	subs	r3, #1
 800a4ba:	b29a      	uxth	r2, r3
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a4c0:	e032      	b.n	800a528 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	f003 0302 	and.w	r3, r3, #2
 800a4cc:	2b02      	cmp	r3, #2
 800a4ce:	d112      	bne.n	800a4f6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4d4:	881a      	ldrh	r2, [r3, #0]
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4e0:	1c9a      	adds	r2, r3, #2
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a4ea:	b29b      	uxth	r3, r3
 800a4ec:	3b01      	subs	r3, #1
 800a4ee:	b29a      	uxth	r2, r3
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	86da      	strh	r2, [r3, #54]	@ 0x36
 800a4f4:	e018      	b.n	800a528 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a4f6:	f7fd fc11 	bl	8007d1c <HAL_GetTick>
 800a4fa:	4602      	mov	r2, r0
 800a4fc:	69fb      	ldr	r3, [r7, #28]
 800a4fe:	1ad3      	subs	r3, r2, r3
 800a500:	683a      	ldr	r2, [r7, #0]
 800a502:	429a      	cmp	r2, r3
 800a504:	d803      	bhi.n	800a50e <HAL_SPI_Transmit+0x160>
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a50c:	d102      	bne.n	800a514 <HAL_SPI_Transmit+0x166>
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d109      	bne.n	800a528 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2201      	movs	r2, #1
 800a518:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2200      	movs	r2, #0
 800a520:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800a524:	2303      	movs	r3, #3
 800a526:	e082      	b.n	800a62e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d1c7      	bne.n	800a4c2 <HAL_SPI_Transmit+0x114>
 800a532:	e053      	b.n	800a5dc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d002      	beq.n	800a542 <HAL_SPI_Transmit+0x194>
 800a53c:	8b7b      	ldrh	r3, [r7, #26]
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d147      	bne.n	800a5d2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	330c      	adds	r3, #12
 800a54c:	7812      	ldrb	r2, [r2, #0]
 800a54e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a554:	1c5a      	adds	r2, r3, #1
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a55e:	b29b      	uxth	r3, r3
 800a560:	3b01      	subs	r3, #1
 800a562:	b29a      	uxth	r2, r3
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a568:	e033      	b.n	800a5d2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	689b      	ldr	r3, [r3, #8]
 800a570:	f003 0302 	and.w	r3, r3, #2
 800a574:	2b02      	cmp	r3, #2
 800a576:	d113      	bne.n	800a5a0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	330c      	adds	r3, #12
 800a582:	7812      	ldrb	r2, [r2, #0]
 800a584:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a58a:	1c5a      	adds	r2, r3, #1
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a594:	b29b      	uxth	r3, r3
 800a596:	3b01      	subs	r3, #1
 800a598:	b29a      	uxth	r2, r3
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800a59e:	e018      	b.n	800a5d2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a5a0:	f7fd fbbc 	bl	8007d1c <HAL_GetTick>
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	69fb      	ldr	r3, [r7, #28]
 800a5a8:	1ad3      	subs	r3, r2, r3
 800a5aa:	683a      	ldr	r2, [r7, #0]
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d803      	bhi.n	800a5b8 <HAL_SPI_Transmit+0x20a>
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5b6:	d102      	bne.n	800a5be <HAL_SPI_Transmit+0x210>
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d109      	bne.n	800a5d2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800a5ce:	2303      	movs	r3, #3
 800a5d0:	e02d      	b.n	800a62e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d1c6      	bne.n	800a56a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a5dc:	69fa      	ldr	r2, [r7, #28]
 800a5de:	6839      	ldr	r1, [r7, #0]
 800a5e0:	68f8      	ldr	r0, [r7, #12]
 800a5e2:	f000 f8b1 	bl	800a748 <SPI_EndRxTxTransaction>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d002      	beq.n	800a5f2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	2220      	movs	r2, #32
 800a5f0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	689b      	ldr	r3, [r3, #8]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d10a      	bne.n	800a610 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	617b      	str	r3, [r7, #20]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	68db      	ldr	r3, [r3, #12]
 800a604:	617b      	str	r3, [r7, #20]
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	689b      	ldr	r3, [r3, #8]
 800a60c:	617b      	str	r3, [r7, #20]
 800a60e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2201      	movs	r2, #1
 800a614:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a624:	2b00      	cmp	r3, #0
 800a626:	d001      	beq.n	800a62c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800a628:	2301      	movs	r3, #1
 800a62a:	e000      	b.n	800a62e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800a62c:	2300      	movs	r3, #0
  }
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3720      	adds	r7, #32
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
	...

0800a638 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b088      	sub	sp, #32
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	60f8      	str	r0, [r7, #12]
 800a640:	60b9      	str	r1, [r7, #8]
 800a642:	603b      	str	r3, [r7, #0]
 800a644:	4613      	mov	r3, r2
 800a646:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a648:	f7fd fb68 	bl	8007d1c <HAL_GetTick>
 800a64c:	4602      	mov	r2, r0
 800a64e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a650:	1a9b      	subs	r3, r3, r2
 800a652:	683a      	ldr	r2, [r7, #0]
 800a654:	4413      	add	r3, r2
 800a656:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a658:	f7fd fb60 	bl	8007d1c <HAL_GetTick>
 800a65c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a65e:	4b39      	ldr	r3, [pc, #228]	@ (800a744 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	015b      	lsls	r3, r3, #5
 800a664:	0d1b      	lsrs	r3, r3, #20
 800a666:	69fa      	ldr	r2, [r7, #28]
 800a668:	fb02 f303 	mul.w	r3, r2, r3
 800a66c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a66e:	e054      	b.n	800a71a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a676:	d050      	beq.n	800a71a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a678:	f7fd fb50 	bl	8007d1c <HAL_GetTick>
 800a67c:	4602      	mov	r2, r0
 800a67e:	69bb      	ldr	r3, [r7, #24]
 800a680:	1ad3      	subs	r3, r2, r3
 800a682:	69fa      	ldr	r2, [r7, #28]
 800a684:	429a      	cmp	r2, r3
 800a686:	d902      	bls.n	800a68e <SPI_WaitFlagStateUntilTimeout+0x56>
 800a688:	69fb      	ldr	r3, [r7, #28]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d13d      	bne.n	800a70a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	685a      	ldr	r2, [r3, #4]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a69c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a6a6:	d111      	bne.n	800a6cc <SPI_WaitFlagStateUntilTimeout+0x94>
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	689b      	ldr	r3, [r3, #8]
 800a6ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a6b0:	d004      	beq.n	800a6bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	689b      	ldr	r3, [r3, #8]
 800a6b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a6ba:	d107      	bne.n	800a6cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	681a      	ldr	r2, [r3, #0]
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a6ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a6d4:	d10f      	bne.n	800a6f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a6e4:	601a      	str	r2, [r3, #0]
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a6f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2200      	movs	r2, #0
 800a702:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800a706:	2303      	movs	r3, #3
 800a708:	e017      	b.n	800a73a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d101      	bne.n	800a714 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a710:	2300      	movs	r3, #0
 800a712:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	3b01      	subs	r3, #1
 800a718:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	689a      	ldr	r2, [r3, #8]
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	4013      	ands	r3, r2
 800a724:	68ba      	ldr	r2, [r7, #8]
 800a726:	429a      	cmp	r2, r3
 800a728:	bf0c      	ite	eq
 800a72a:	2301      	moveq	r3, #1
 800a72c:	2300      	movne	r3, #0
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	461a      	mov	r2, r3
 800a732:	79fb      	ldrb	r3, [r7, #7]
 800a734:	429a      	cmp	r2, r3
 800a736:	d19b      	bne.n	800a670 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a738:	2300      	movs	r3, #0
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3720      	adds	r7, #32
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	20000004 	.word	0x20000004

0800a748 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b088      	sub	sp, #32
 800a74c:	af02      	add	r7, sp, #8
 800a74e:	60f8      	str	r0, [r7, #12]
 800a750:	60b9      	str	r1, [r7, #8]
 800a752:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	9300      	str	r3, [sp, #0]
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	2201      	movs	r2, #1
 800a75c:	2102      	movs	r1, #2
 800a75e:	68f8      	ldr	r0, [r7, #12]
 800a760:	f7ff ff6a 	bl	800a638 <SPI_WaitFlagStateUntilTimeout>
 800a764:	4603      	mov	r3, r0
 800a766:	2b00      	cmp	r3, #0
 800a768:	d007      	beq.n	800a77a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a76e:	f043 0220 	orr.w	r2, r3, #32
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800a776:	2303      	movs	r3, #3
 800a778:	e032      	b.n	800a7e0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a77a:	4b1b      	ldr	r3, [pc, #108]	@ (800a7e8 <SPI_EndRxTxTransaction+0xa0>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4a1b      	ldr	r2, [pc, #108]	@ (800a7ec <SPI_EndRxTxTransaction+0xa4>)
 800a780:	fba2 2303 	umull	r2, r3, r2, r3
 800a784:	0d5b      	lsrs	r3, r3, #21
 800a786:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a78a:	fb02 f303 	mul.w	r3, r2, r3
 800a78e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a798:	d112      	bne.n	800a7c0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	9300      	str	r3, [sp, #0]
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	2180      	movs	r1, #128	@ 0x80
 800a7a4:	68f8      	ldr	r0, [r7, #12]
 800a7a6:	f7ff ff47 	bl	800a638 <SPI_WaitFlagStateUntilTimeout>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d016      	beq.n	800a7de <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7b4:	f043 0220 	orr.w	r2, r3, #32
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800a7bc:	2303      	movs	r3, #3
 800a7be:	e00f      	b.n	800a7e0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d00a      	beq.n	800a7dc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	3b01      	subs	r3, #1
 800a7ca:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7d6:	2b80      	cmp	r3, #128	@ 0x80
 800a7d8:	d0f2      	beq.n	800a7c0 <SPI_EndRxTxTransaction+0x78>
 800a7da:	e000      	b.n	800a7de <SPI_EndRxTxTransaction+0x96>
        break;
 800a7dc:	bf00      	nop
  }

  return HAL_OK;
 800a7de:	2300      	movs	r3, #0
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3718      	adds	r7, #24
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}
 800a7e8:	20000004 	.word	0x20000004
 800a7ec:	165e9f81 	.word	0x165e9f81

0800a7f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d101      	bne.n	800a802 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a7fe:	2301      	movs	r3, #1
 800a800:	e041      	b.n	800a886 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a808:	b2db      	uxtb	r3, r3
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d106      	bne.n	800a81c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2200      	movs	r2, #0
 800a812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f7fc ffe0 	bl	80077dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2202      	movs	r2, #2
 800a820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681a      	ldr	r2, [r3, #0]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	3304      	adds	r3, #4
 800a82c:	4619      	mov	r1, r3
 800a82e:	4610      	mov	r0, r2
 800a830:	f000 fc3c 	bl	800b0ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2201      	movs	r2, #1
 800a838:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2201      	movs	r2, #1
 800a840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2201      	movs	r2, #1
 800a848:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2201      	movs	r2, #1
 800a850:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2201      	movs	r2, #1
 800a858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2201      	movs	r2, #1
 800a860:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2201      	movs	r2, #1
 800a868:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2201      	movs	r2, #1
 800a870:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2201      	movs	r2, #1
 800a878:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2201      	movs	r2, #1
 800a880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a884:	2300      	movs	r3, #0
}
 800a886:	4618      	mov	r0, r3
 800a888:	3708      	adds	r7, #8
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
	...

0800a890 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a890:	b480      	push	{r7}
 800a892:	b085      	sub	sp, #20
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a89e:	b2db      	uxtb	r3, r3
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d001      	beq.n	800a8a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	e044      	b.n	800a932 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2202      	movs	r2, #2
 800a8ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	68da      	ldr	r2, [r3, #12]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f042 0201 	orr.w	r2, r2, #1
 800a8be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	4a1e      	ldr	r2, [pc, #120]	@ (800a940 <HAL_TIM_Base_Start_IT+0xb0>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d018      	beq.n	800a8fc <HAL_TIM_Base_Start_IT+0x6c>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8d2:	d013      	beq.n	800a8fc <HAL_TIM_Base_Start_IT+0x6c>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a1a      	ldr	r2, [pc, #104]	@ (800a944 <HAL_TIM_Base_Start_IT+0xb4>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d00e      	beq.n	800a8fc <HAL_TIM_Base_Start_IT+0x6c>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	4a19      	ldr	r2, [pc, #100]	@ (800a948 <HAL_TIM_Base_Start_IT+0xb8>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d009      	beq.n	800a8fc <HAL_TIM_Base_Start_IT+0x6c>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	4a17      	ldr	r2, [pc, #92]	@ (800a94c <HAL_TIM_Base_Start_IT+0xbc>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d004      	beq.n	800a8fc <HAL_TIM_Base_Start_IT+0x6c>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4a16      	ldr	r2, [pc, #88]	@ (800a950 <HAL_TIM_Base_Start_IT+0xc0>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d111      	bne.n	800a920 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	689b      	ldr	r3, [r3, #8]
 800a902:	f003 0307 	and.w	r3, r3, #7
 800a906:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2b06      	cmp	r3, #6
 800a90c:	d010      	beq.n	800a930 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f042 0201 	orr.w	r2, r2, #1
 800a91c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a91e:	e007      	b.n	800a930 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	681a      	ldr	r2, [r3, #0]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f042 0201 	orr.w	r2, r2, #1
 800a92e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a930:	2300      	movs	r3, #0
}
 800a932:	4618      	mov	r0, r3
 800a934:	3714      	adds	r7, #20
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr
 800a93e:	bf00      	nop
 800a940:	40010000 	.word	0x40010000
 800a944:	40000400 	.word	0x40000400
 800a948:	40000800 	.word	0x40000800
 800a94c:	40000c00 	.word	0x40000c00
 800a950:	40014000 	.word	0x40014000

0800a954 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b082      	sub	sp, #8
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d101      	bne.n	800a966 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a962:	2301      	movs	r3, #1
 800a964:	e041      	b.n	800a9ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a96c:	b2db      	uxtb	r3, r3
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d106      	bne.n	800a980 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2200      	movs	r2, #0
 800a976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 f839 	bl	800a9f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2202      	movs	r2, #2
 800a984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	3304      	adds	r3, #4
 800a990:	4619      	mov	r1, r3
 800a992:	4610      	mov	r0, r2
 800a994:	f000 fb8a 	bl	800b0ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2201      	movs	r2, #1
 800a99c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2201      	movs	r2, #1
 800a9bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2201      	movs	r2, #1
 800a9dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a9e8:	2300      	movs	r3, #0
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3708      	adds	r7, #8
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}

0800a9f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a9f2:	b480      	push	{r7}
 800a9f4:	b083      	sub	sp, #12
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a9fa:	bf00      	nop
 800a9fc:	370c      	adds	r7, #12
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr
	...

0800aa08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d109      	bne.n	800aa2c <HAL_TIM_PWM_Start+0x24>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	bf14      	ite	ne
 800aa24:	2301      	movne	r3, #1
 800aa26:	2300      	moveq	r3, #0
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	e022      	b.n	800aa72 <HAL_TIM_PWM_Start+0x6a>
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	2b04      	cmp	r3, #4
 800aa30:	d109      	bne.n	800aa46 <HAL_TIM_PWM_Start+0x3e>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800aa38:	b2db      	uxtb	r3, r3
 800aa3a:	2b01      	cmp	r3, #1
 800aa3c:	bf14      	ite	ne
 800aa3e:	2301      	movne	r3, #1
 800aa40:	2300      	moveq	r3, #0
 800aa42:	b2db      	uxtb	r3, r3
 800aa44:	e015      	b.n	800aa72 <HAL_TIM_PWM_Start+0x6a>
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	2b08      	cmp	r3, #8
 800aa4a:	d109      	bne.n	800aa60 <HAL_TIM_PWM_Start+0x58>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	2b01      	cmp	r3, #1
 800aa56:	bf14      	ite	ne
 800aa58:	2301      	movne	r3, #1
 800aa5a:	2300      	moveq	r3, #0
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	e008      	b.n	800aa72 <HAL_TIM_PWM_Start+0x6a>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aa66:	b2db      	uxtb	r3, r3
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	bf14      	ite	ne
 800aa6c:	2301      	movne	r3, #1
 800aa6e:	2300      	moveq	r3, #0
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d001      	beq.n	800aa7a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800aa76:	2301      	movs	r3, #1
 800aa78:	e068      	b.n	800ab4c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d104      	bne.n	800aa8a <HAL_TIM_PWM_Start+0x82>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2202      	movs	r2, #2
 800aa84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aa88:	e013      	b.n	800aab2 <HAL_TIM_PWM_Start+0xaa>
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	2b04      	cmp	r3, #4
 800aa8e:	d104      	bne.n	800aa9a <HAL_TIM_PWM_Start+0x92>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2202      	movs	r2, #2
 800aa94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aa98:	e00b      	b.n	800aab2 <HAL_TIM_PWM_Start+0xaa>
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	2b08      	cmp	r3, #8
 800aa9e:	d104      	bne.n	800aaaa <HAL_TIM_PWM_Start+0xa2>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2202      	movs	r2, #2
 800aaa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aaa8:	e003      	b.n	800aab2 <HAL_TIM_PWM_Start+0xaa>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2202      	movs	r2, #2
 800aaae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	2201      	movs	r2, #1
 800aab8:	6839      	ldr	r1, [r7, #0]
 800aaba:	4618      	mov	r0, r3
 800aabc:	f000 fda8 	bl	800b610 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4a23      	ldr	r2, [pc, #140]	@ (800ab54 <HAL_TIM_PWM_Start+0x14c>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d107      	bne.n	800aada <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800aad8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	4a1d      	ldr	r2, [pc, #116]	@ (800ab54 <HAL_TIM_PWM_Start+0x14c>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d018      	beq.n	800ab16 <HAL_TIM_PWM_Start+0x10e>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aaec:	d013      	beq.n	800ab16 <HAL_TIM_PWM_Start+0x10e>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4a19      	ldr	r2, [pc, #100]	@ (800ab58 <HAL_TIM_PWM_Start+0x150>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d00e      	beq.n	800ab16 <HAL_TIM_PWM_Start+0x10e>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	4a17      	ldr	r2, [pc, #92]	@ (800ab5c <HAL_TIM_PWM_Start+0x154>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d009      	beq.n	800ab16 <HAL_TIM_PWM_Start+0x10e>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4a16      	ldr	r2, [pc, #88]	@ (800ab60 <HAL_TIM_PWM_Start+0x158>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d004      	beq.n	800ab16 <HAL_TIM_PWM_Start+0x10e>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4a14      	ldr	r2, [pc, #80]	@ (800ab64 <HAL_TIM_PWM_Start+0x15c>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d111      	bne.n	800ab3a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	689b      	ldr	r3, [r3, #8]
 800ab1c:	f003 0307 	and.w	r3, r3, #7
 800ab20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2b06      	cmp	r3, #6
 800ab26:	d010      	beq.n	800ab4a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f042 0201 	orr.w	r2, r2, #1
 800ab36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab38:	e007      	b.n	800ab4a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	681a      	ldr	r2, [r3, #0]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f042 0201 	orr.w	r2, r2, #1
 800ab48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ab4a:	2300      	movs	r3, #0
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3710      	adds	r7, #16
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}
 800ab54:	40010000 	.word	0x40010000
 800ab58:	40000400 	.word	0x40000400
 800ab5c:	40000800 	.word	0x40000800
 800ab60:	40000c00 	.word	0x40000c00
 800ab64:	40014000 	.word	0x40014000

0800ab68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b084      	sub	sp, #16
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	68db      	ldr	r3, [r3, #12]
 800ab76:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	691b      	ldr	r3, [r3, #16]
 800ab7e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	f003 0302 	and.w	r3, r3, #2
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d020      	beq.n	800abcc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	f003 0302 	and.w	r3, r3, #2
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d01b      	beq.n	800abcc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f06f 0202 	mvn.w	r2, #2
 800ab9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2201      	movs	r2, #1
 800aba2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	699b      	ldr	r3, [r3, #24]
 800abaa:	f003 0303 	and.w	r3, r3, #3
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d003      	beq.n	800abba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 fa5b 	bl	800b06e <HAL_TIM_IC_CaptureCallback>
 800abb8:	e005      	b.n	800abc6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 fa4d 	bl	800b05a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f000 fa5e 	bl	800b082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2200      	movs	r2, #0
 800abca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	f003 0304 	and.w	r3, r3, #4
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d020      	beq.n	800ac18 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f003 0304 	and.w	r3, r3, #4
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d01b      	beq.n	800ac18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f06f 0204 	mvn.w	r2, #4
 800abe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2202      	movs	r2, #2
 800abee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	699b      	ldr	r3, [r3, #24]
 800abf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d003      	beq.n	800ac06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 fa35 	bl	800b06e <HAL_TIM_IC_CaptureCallback>
 800ac04:	e005      	b.n	800ac12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 fa27 	bl	800b05a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f000 fa38 	bl	800b082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2200      	movs	r2, #0
 800ac16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	f003 0308 	and.w	r3, r3, #8
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d020      	beq.n	800ac64 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	f003 0308 	and.w	r3, r3, #8
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d01b      	beq.n	800ac64 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f06f 0208 	mvn.w	r2, #8
 800ac34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2204      	movs	r2, #4
 800ac3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	69db      	ldr	r3, [r3, #28]
 800ac42:	f003 0303 	and.w	r3, r3, #3
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d003      	beq.n	800ac52 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 fa0f 	bl	800b06e <HAL_TIM_IC_CaptureCallback>
 800ac50:	e005      	b.n	800ac5e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 fa01 	bl	800b05a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f000 fa12 	bl	800b082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2200      	movs	r2, #0
 800ac62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	f003 0310 	and.w	r3, r3, #16
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d020      	beq.n	800acb0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	f003 0310 	and.w	r3, r3, #16
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d01b      	beq.n	800acb0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f06f 0210 	mvn.w	r2, #16
 800ac80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2208      	movs	r2, #8
 800ac86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	69db      	ldr	r3, [r3, #28]
 800ac8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d003      	beq.n	800ac9e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 f9e9 	bl	800b06e <HAL_TIM_IC_CaptureCallback>
 800ac9c:	e005      	b.n	800acaa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 f9db 	bl	800b05a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f000 f9ec 	bl	800b082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2200      	movs	r2, #0
 800acae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	f003 0301 	and.w	r3, r3, #1
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d00c      	beq.n	800acd4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f003 0301 	and.w	r3, r3, #1
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d007      	beq.n	800acd4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f06f 0201 	mvn.w	r2, #1
 800accc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f7fb ff94 	bl	8006bfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d00c      	beq.n	800acf8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d007      	beq.n	800acf8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800acf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 fd2a 	bl	800b74c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d00c      	beq.n	800ad1c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d007      	beq.n	800ad1c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ad14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 f9bd 	bl	800b096 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	f003 0320 	and.w	r3, r3, #32
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d00c      	beq.n	800ad40 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f003 0320 	and.w	r3, r3, #32
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d007      	beq.n	800ad40 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f06f 0220 	mvn.w	r2, #32
 800ad38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 fcfc 	bl	800b738 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ad40:	bf00      	nop
 800ad42:	3710      	adds	r7, #16
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b086      	sub	sp, #24
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	60f8      	str	r0, [r7, #12]
 800ad50:	60b9      	str	r1, [r7, #8]
 800ad52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ad54:	2300      	movs	r3, #0
 800ad56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad5e:	2b01      	cmp	r3, #1
 800ad60:	d101      	bne.n	800ad66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ad62:	2302      	movs	r3, #2
 800ad64:	e0ae      	b.n	800aec4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2201      	movs	r2, #1
 800ad6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2b0c      	cmp	r3, #12
 800ad72:	f200 809f 	bhi.w	800aeb4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800ad76:	a201      	add	r2, pc, #4	@ (adr r2, 800ad7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ad78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad7c:	0800adb1 	.word	0x0800adb1
 800ad80:	0800aeb5 	.word	0x0800aeb5
 800ad84:	0800aeb5 	.word	0x0800aeb5
 800ad88:	0800aeb5 	.word	0x0800aeb5
 800ad8c:	0800adf1 	.word	0x0800adf1
 800ad90:	0800aeb5 	.word	0x0800aeb5
 800ad94:	0800aeb5 	.word	0x0800aeb5
 800ad98:	0800aeb5 	.word	0x0800aeb5
 800ad9c:	0800ae33 	.word	0x0800ae33
 800ada0:	0800aeb5 	.word	0x0800aeb5
 800ada4:	0800aeb5 	.word	0x0800aeb5
 800ada8:	0800aeb5 	.word	0x0800aeb5
 800adac:	0800ae73 	.word	0x0800ae73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	68b9      	ldr	r1, [r7, #8]
 800adb6:	4618      	mov	r0, r3
 800adb8:	f000 fa04 	bl	800b1c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	699a      	ldr	r2, [r3, #24]
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f042 0208 	orr.w	r2, r2, #8
 800adca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	699a      	ldr	r2, [r3, #24]
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f022 0204 	bic.w	r2, r2, #4
 800adda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	6999      	ldr	r1, [r3, #24]
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	691a      	ldr	r2, [r3, #16]
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	430a      	orrs	r2, r1
 800adec:	619a      	str	r2, [r3, #24]
      break;
 800adee:	e064      	b.n	800aeba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	68b9      	ldr	r1, [r7, #8]
 800adf6:	4618      	mov	r0, r3
 800adf8:	f000 fa4a 	bl	800b290 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	699a      	ldr	r2, [r3, #24]
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ae0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	699a      	ldr	r2, [r3, #24]
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ae1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	6999      	ldr	r1, [r3, #24]
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	691b      	ldr	r3, [r3, #16]
 800ae26:	021a      	lsls	r2, r3, #8
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	430a      	orrs	r2, r1
 800ae2e:	619a      	str	r2, [r3, #24]
      break;
 800ae30:	e043      	b.n	800aeba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	68b9      	ldr	r1, [r7, #8]
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f000 fa95 	bl	800b368 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	69da      	ldr	r2, [r3, #28]
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f042 0208 	orr.w	r2, r2, #8
 800ae4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	69da      	ldr	r2, [r3, #28]
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f022 0204 	bic.w	r2, r2, #4
 800ae5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	69d9      	ldr	r1, [r3, #28]
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	691a      	ldr	r2, [r3, #16]
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	430a      	orrs	r2, r1
 800ae6e:	61da      	str	r2, [r3, #28]
      break;
 800ae70:	e023      	b.n	800aeba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	68b9      	ldr	r1, [r7, #8]
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f000 fadf 	bl	800b43c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	69da      	ldr	r2, [r3, #28]
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ae8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	69da      	ldr	r2, [r3, #28]
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ae9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	69d9      	ldr	r1, [r3, #28]
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	691b      	ldr	r3, [r3, #16]
 800aea8:	021a      	lsls	r2, r3, #8
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	430a      	orrs	r2, r1
 800aeb0:	61da      	str	r2, [r3, #28]
      break;
 800aeb2:	e002      	b.n	800aeba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	75fb      	strb	r3, [r7, #23]
      break;
 800aeb8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	2200      	movs	r2, #0
 800aebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aec2:	7dfb      	ldrb	r3, [r7, #23]
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3718      	adds	r7, #24
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b084      	sub	sp, #16
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aed6:	2300      	movs	r3, #0
 800aed8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d101      	bne.n	800aee8 <HAL_TIM_ConfigClockSource+0x1c>
 800aee4:	2302      	movs	r3, #2
 800aee6:	e0b4      	b.n	800b052 <HAL_TIM_ConfigClockSource+0x186>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2201      	movs	r2, #1
 800aeec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2202      	movs	r2, #2
 800aef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	689b      	ldr	r3, [r3, #8]
 800aefe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800af06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800af0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	68ba      	ldr	r2, [r7, #8]
 800af16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af20:	d03e      	beq.n	800afa0 <HAL_TIM_ConfigClockSource+0xd4>
 800af22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af26:	f200 8087 	bhi.w	800b038 <HAL_TIM_ConfigClockSource+0x16c>
 800af2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af2e:	f000 8086 	beq.w	800b03e <HAL_TIM_ConfigClockSource+0x172>
 800af32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af36:	d87f      	bhi.n	800b038 <HAL_TIM_ConfigClockSource+0x16c>
 800af38:	2b70      	cmp	r3, #112	@ 0x70
 800af3a:	d01a      	beq.n	800af72 <HAL_TIM_ConfigClockSource+0xa6>
 800af3c:	2b70      	cmp	r3, #112	@ 0x70
 800af3e:	d87b      	bhi.n	800b038 <HAL_TIM_ConfigClockSource+0x16c>
 800af40:	2b60      	cmp	r3, #96	@ 0x60
 800af42:	d050      	beq.n	800afe6 <HAL_TIM_ConfigClockSource+0x11a>
 800af44:	2b60      	cmp	r3, #96	@ 0x60
 800af46:	d877      	bhi.n	800b038 <HAL_TIM_ConfigClockSource+0x16c>
 800af48:	2b50      	cmp	r3, #80	@ 0x50
 800af4a:	d03c      	beq.n	800afc6 <HAL_TIM_ConfigClockSource+0xfa>
 800af4c:	2b50      	cmp	r3, #80	@ 0x50
 800af4e:	d873      	bhi.n	800b038 <HAL_TIM_ConfigClockSource+0x16c>
 800af50:	2b40      	cmp	r3, #64	@ 0x40
 800af52:	d058      	beq.n	800b006 <HAL_TIM_ConfigClockSource+0x13a>
 800af54:	2b40      	cmp	r3, #64	@ 0x40
 800af56:	d86f      	bhi.n	800b038 <HAL_TIM_ConfigClockSource+0x16c>
 800af58:	2b30      	cmp	r3, #48	@ 0x30
 800af5a:	d064      	beq.n	800b026 <HAL_TIM_ConfigClockSource+0x15a>
 800af5c:	2b30      	cmp	r3, #48	@ 0x30
 800af5e:	d86b      	bhi.n	800b038 <HAL_TIM_ConfigClockSource+0x16c>
 800af60:	2b20      	cmp	r3, #32
 800af62:	d060      	beq.n	800b026 <HAL_TIM_ConfigClockSource+0x15a>
 800af64:	2b20      	cmp	r3, #32
 800af66:	d867      	bhi.n	800b038 <HAL_TIM_ConfigClockSource+0x16c>
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d05c      	beq.n	800b026 <HAL_TIM_ConfigClockSource+0x15a>
 800af6c:	2b10      	cmp	r3, #16
 800af6e:	d05a      	beq.n	800b026 <HAL_TIM_ConfigClockSource+0x15a>
 800af70:	e062      	b.n	800b038 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800af82:	f000 fb25 	bl	800b5d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	689b      	ldr	r3, [r3, #8]
 800af8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800af94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	68ba      	ldr	r2, [r7, #8]
 800af9c:	609a      	str	r2, [r3, #8]
      break;
 800af9e:	e04f      	b.n	800b040 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800afb0:	f000 fb0e 	bl	800b5d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	689a      	ldr	r2, [r3, #8]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800afc2:	609a      	str	r2, [r3, #8]
      break;
 800afc4:	e03c      	b.n	800b040 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800afd2:	461a      	mov	r2, r3
 800afd4:	f000 fa82 	bl	800b4dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	2150      	movs	r1, #80	@ 0x50
 800afde:	4618      	mov	r0, r3
 800afe0:	f000 fadb 	bl	800b59a <TIM_ITRx_SetConfig>
      break;
 800afe4:	e02c      	b.n	800b040 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aff2:	461a      	mov	r2, r3
 800aff4:	f000 faa1 	bl	800b53a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	2160      	movs	r1, #96	@ 0x60
 800affe:	4618      	mov	r0, r3
 800b000:	f000 facb 	bl	800b59a <TIM_ITRx_SetConfig>
      break;
 800b004:	e01c      	b.n	800b040 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b012:	461a      	mov	r2, r3
 800b014:	f000 fa62 	bl	800b4dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	2140      	movs	r1, #64	@ 0x40
 800b01e:	4618      	mov	r0, r3
 800b020:	f000 fabb 	bl	800b59a <TIM_ITRx_SetConfig>
      break;
 800b024:	e00c      	b.n	800b040 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681a      	ldr	r2, [r3, #0]
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	4619      	mov	r1, r3
 800b030:	4610      	mov	r0, r2
 800b032:	f000 fab2 	bl	800b59a <TIM_ITRx_SetConfig>
      break;
 800b036:	e003      	b.n	800b040 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b038:	2301      	movs	r3, #1
 800b03a:	73fb      	strb	r3, [r7, #15]
      break;
 800b03c:	e000      	b.n	800b040 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b03e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2201      	movs	r2, #1
 800b044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2200      	movs	r2, #0
 800b04c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b050:	7bfb      	ldrb	r3, [r7, #15]
}
 800b052:	4618      	mov	r0, r3
 800b054:	3710      	adds	r7, #16
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}

0800b05a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b05a:	b480      	push	{r7}
 800b05c:	b083      	sub	sp, #12
 800b05e:	af00      	add	r7, sp, #0
 800b060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b062:	bf00      	nop
 800b064:	370c      	adds	r7, #12
 800b066:	46bd      	mov	sp, r7
 800b068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06c:	4770      	bx	lr

0800b06e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b06e:	b480      	push	{r7}
 800b070:	b083      	sub	sp, #12
 800b072:	af00      	add	r7, sp, #0
 800b074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b076:	bf00      	nop
 800b078:	370c      	adds	r7, #12
 800b07a:	46bd      	mov	sp, r7
 800b07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b080:	4770      	bx	lr

0800b082 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b082:	b480      	push	{r7}
 800b084:	b083      	sub	sp, #12
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b08a:	bf00      	nop
 800b08c:	370c      	adds	r7, #12
 800b08e:	46bd      	mov	sp, r7
 800b090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b094:	4770      	bx	lr

0800b096 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b096:	b480      	push	{r7}
 800b098:	b083      	sub	sp, #12
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b09e:	bf00      	nop
 800b0a0:	370c      	adds	r7, #12
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr
	...

0800b0ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b085      	sub	sp, #20
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	4a3a      	ldr	r2, [pc, #232]	@ (800b1a8 <TIM_Base_SetConfig+0xfc>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d00f      	beq.n	800b0e4 <TIM_Base_SetConfig+0x38>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0ca:	d00b      	beq.n	800b0e4 <TIM_Base_SetConfig+0x38>
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	4a37      	ldr	r2, [pc, #220]	@ (800b1ac <TIM_Base_SetConfig+0x100>)
 800b0d0:	4293      	cmp	r3, r2
 800b0d2:	d007      	beq.n	800b0e4 <TIM_Base_SetConfig+0x38>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	4a36      	ldr	r2, [pc, #216]	@ (800b1b0 <TIM_Base_SetConfig+0x104>)
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d003      	beq.n	800b0e4 <TIM_Base_SetConfig+0x38>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	4a35      	ldr	r2, [pc, #212]	@ (800b1b4 <TIM_Base_SetConfig+0x108>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d108      	bne.n	800b0f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	68fa      	ldr	r2, [r7, #12]
 800b0f2:	4313      	orrs	r3, r2
 800b0f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	4a2b      	ldr	r2, [pc, #172]	@ (800b1a8 <TIM_Base_SetConfig+0xfc>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d01b      	beq.n	800b136 <TIM_Base_SetConfig+0x8a>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b104:	d017      	beq.n	800b136 <TIM_Base_SetConfig+0x8a>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	4a28      	ldr	r2, [pc, #160]	@ (800b1ac <TIM_Base_SetConfig+0x100>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d013      	beq.n	800b136 <TIM_Base_SetConfig+0x8a>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	4a27      	ldr	r2, [pc, #156]	@ (800b1b0 <TIM_Base_SetConfig+0x104>)
 800b112:	4293      	cmp	r3, r2
 800b114:	d00f      	beq.n	800b136 <TIM_Base_SetConfig+0x8a>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	4a26      	ldr	r2, [pc, #152]	@ (800b1b4 <TIM_Base_SetConfig+0x108>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d00b      	beq.n	800b136 <TIM_Base_SetConfig+0x8a>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	4a25      	ldr	r2, [pc, #148]	@ (800b1b8 <TIM_Base_SetConfig+0x10c>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d007      	beq.n	800b136 <TIM_Base_SetConfig+0x8a>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	4a24      	ldr	r2, [pc, #144]	@ (800b1bc <TIM_Base_SetConfig+0x110>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d003      	beq.n	800b136 <TIM_Base_SetConfig+0x8a>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	4a23      	ldr	r2, [pc, #140]	@ (800b1c0 <TIM_Base_SetConfig+0x114>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d108      	bne.n	800b148 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b13c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	68fa      	ldr	r2, [r7, #12]
 800b144:	4313      	orrs	r3, r2
 800b146:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	695b      	ldr	r3, [r3, #20]
 800b152:	4313      	orrs	r3, r2
 800b154:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	68fa      	ldr	r2, [r7, #12]
 800b15a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	689a      	ldr	r2, [r3, #8]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	681a      	ldr	r2, [r3, #0]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	4a0e      	ldr	r2, [pc, #56]	@ (800b1a8 <TIM_Base_SetConfig+0xfc>)
 800b170:	4293      	cmp	r3, r2
 800b172:	d103      	bne.n	800b17c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	691a      	ldr	r2, [r3, #16]
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2201      	movs	r2, #1
 800b180:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	691b      	ldr	r3, [r3, #16]
 800b186:	f003 0301 	and.w	r3, r3, #1
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	d105      	bne.n	800b19a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	691b      	ldr	r3, [r3, #16]
 800b192:	f023 0201 	bic.w	r2, r3, #1
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	611a      	str	r2, [r3, #16]
  }
}
 800b19a:	bf00      	nop
 800b19c:	3714      	adds	r7, #20
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a4:	4770      	bx	lr
 800b1a6:	bf00      	nop
 800b1a8:	40010000 	.word	0x40010000
 800b1ac:	40000400 	.word	0x40000400
 800b1b0:	40000800 	.word	0x40000800
 800b1b4:	40000c00 	.word	0x40000c00
 800b1b8:	40014000 	.word	0x40014000
 800b1bc:	40014400 	.word	0x40014400
 800b1c0:	40014800 	.word	0x40014800

0800b1c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b087      	sub	sp, #28
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6a1b      	ldr	r3, [r3, #32]
 800b1d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6a1b      	ldr	r3, [r3, #32]
 800b1d8:	f023 0201 	bic.w	r2, r3, #1
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	685b      	ldr	r3, [r3, #4]
 800b1e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	699b      	ldr	r3, [r3, #24]
 800b1ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	f023 0303 	bic.w	r3, r3, #3
 800b1fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	68fa      	ldr	r2, [r7, #12]
 800b202:	4313      	orrs	r3, r2
 800b204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	f023 0302 	bic.w	r3, r3, #2
 800b20c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	689b      	ldr	r3, [r3, #8]
 800b212:	697a      	ldr	r2, [r7, #20]
 800b214:	4313      	orrs	r3, r2
 800b216:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	4a1c      	ldr	r2, [pc, #112]	@ (800b28c <TIM_OC1_SetConfig+0xc8>)
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d10c      	bne.n	800b23a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	f023 0308 	bic.w	r3, r3, #8
 800b226:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	68db      	ldr	r3, [r3, #12]
 800b22c:	697a      	ldr	r2, [r7, #20]
 800b22e:	4313      	orrs	r3, r2
 800b230:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	f023 0304 	bic.w	r3, r3, #4
 800b238:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	4a13      	ldr	r2, [pc, #76]	@ (800b28c <TIM_OC1_SetConfig+0xc8>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	d111      	bne.n	800b266 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b248:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b250:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	695b      	ldr	r3, [r3, #20]
 800b256:	693a      	ldr	r2, [r7, #16]
 800b258:	4313      	orrs	r3, r2
 800b25a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	699b      	ldr	r3, [r3, #24]
 800b260:	693a      	ldr	r2, [r7, #16]
 800b262:	4313      	orrs	r3, r2
 800b264:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	693a      	ldr	r2, [r7, #16]
 800b26a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	68fa      	ldr	r2, [r7, #12]
 800b270:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	685a      	ldr	r2, [r3, #4]
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	697a      	ldr	r2, [r7, #20]
 800b27e:	621a      	str	r2, [r3, #32]
}
 800b280:	bf00      	nop
 800b282:	371c      	adds	r7, #28
 800b284:	46bd      	mov	sp, r7
 800b286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28a:	4770      	bx	lr
 800b28c:	40010000 	.word	0x40010000

0800b290 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b290:	b480      	push	{r7}
 800b292:	b087      	sub	sp, #28
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6a1b      	ldr	r3, [r3, #32]
 800b29e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6a1b      	ldr	r3, [r3, #32]
 800b2a4:	f023 0210 	bic.w	r2, r3, #16
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	685b      	ldr	r3, [r3, #4]
 800b2b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	699b      	ldr	r3, [r3, #24]
 800b2b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b2be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b2c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	021b      	lsls	r3, r3, #8
 800b2ce:	68fa      	ldr	r2, [r7, #12]
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	f023 0320 	bic.w	r3, r3, #32
 800b2da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	689b      	ldr	r3, [r3, #8]
 800b2e0:	011b      	lsls	r3, r3, #4
 800b2e2:	697a      	ldr	r2, [r7, #20]
 800b2e4:	4313      	orrs	r3, r2
 800b2e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	4a1e      	ldr	r2, [pc, #120]	@ (800b364 <TIM_OC2_SetConfig+0xd4>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d10d      	bne.n	800b30c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b2f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	68db      	ldr	r3, [r3, #12]
 800b2fc:	011b      	lsls	r3, r3, #4
 800b2fe:	697a      	ldr	r2, [r7, #20]
 800b300:	4313      	orrs	r3, r2
 800b302:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b30a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	4a15      	ldr	r2, [pc, #84]	@ (800b364 <TIM_OC2_SetConfig+0xd4>)
 800b310:	4293      	cmp	r3, r2
 800b312:	d113      	bne.n	800b33c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b31a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b322:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	695b      	ldr	r3, [r3, #20]
 800b328:	009b      	lsls	r3, r3, #2
 800b32a:	693a      	ldr	r2, [r7, #16]
 800b32c:	4313      	orrs	r3, r2
 800b32e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	699b      	ldr	r3, [r3, #24]
 800b334:	009b      	lsls	r3, r3, #2
 800b336:	693a      	ldr	r2, [r7, #16]
 800b338:	4313      	orrs	r3, r2
 800b33a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	693a      	ldr	r2, [r7, #16]
 800b340:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	68fa      	ldr	r2, [r7, #12]
 800b346:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	685a      	ldr	r2, [r3, #4]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	697a      	ldr	r2, [r7, #20]
 800b354:	621a      	str	r2, [r3, #32]
}
 800b356:	bf00      	nop
 800b358:	371c      	adds	r7, #28
 800b35a:	46bd      	mov	sp, r7
 800b35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b360:	4770      	bx	lr
 800b362:	bf00      	nop
 800b364:	40010000 	.word	0x40010000

0800b368 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b368:	b480      	push	{r7}
 800b36a:	b087      	sub	sp, #28
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6a1b      	ldr	r3, [r3, #32]
 800b376:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6a1b      	ldr	r3, [r3, #32]
 800b37c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	685b      	ldr	r3, [r3, #4]
 800b388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	69db      	ldr	r3, [r3, #28]
 800b38e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f023 0303 	bic.w	r3, r3, #3
 800b39e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	68fa      	ldr	r2, [r7, #12]
 800b3a6:	4313      	orrs	r3, r2
 800b3a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b3b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	689b      	ldr	r3, [r3, #8]
 800b3b6:	021b      	lsls	r3, r3, #8
 800b3b8:	697a      	ldr	r2, [r7, #20]
 800b3ba:	4313      	orrs	r3, r2
 800b3bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	4a1d      	ldr	r2, [pc, #116]	@ (800b438 <TIM_OC3_SetConfig+0xd0>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d10d      	bne.n	800b3e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b3cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	68db      	ldr	r3, [r3, #12]
 800b3d2:	021b      	lsls	r3, r3, #8
 800b3d4:	697a      	ldr	r2, [r7, #20]
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b3e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	4a14      	ldr	r2, [pc, #80]	@ (800b438 <TIM_OC3_SetConfig+0xd0>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d113      	bne.n	800b412 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b3f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b3f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	695b      	ldr	r3, [r3, #20]
 800b3fe:	011b      	lsls	r3, r3, #4
 800b400:	693a      	ldr	r2, [r7, #16]
 800b402:	4313      	orrs	r3, r2
 800b404:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	699b      	ldr	r3, [r3, #24]
 800b40a:	011b      	lsls	r3, r3, #4
 800b40c:	693a      	ldr	r2, [r7, #16]
 800b40e:	4313      	orrs	r3, r2
 800b410:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	693a      	ldr	r2, [r7, #16]
 800b416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	68fa      	ldr	r2, [r7, #12]
 800b41c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	685a      	ldr	r2, [r3, #4]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	697a      	ldr	r2, [r7, #20]
 800b42a:	621a      	str	r2, [r3, #32]
}
 800b42c:	bf00      	nop
 800b42e:	371c      	adds	r7, #28
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr
 800b438:	40010000 	.word	0x40010000

0800b43c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b087      	sub	sp, #28
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6a1b      	ldr	r3, [r3, #32]
 800b44a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6a1b      	ldr	r3, [r3, #32]
 800b450:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	69db      	ldr	r3, [r3, #28]
 800b462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b46a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b472:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	021b      	lsls	r3, r3, #8
 800b47a:	68fa      	ldr	r2, [r7, #12]
 800b47c:	4313      	orrs	r3, r2
 800b47e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b486:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	689b      	ldr	r3, [r3, #8]
 800b48c:	031b      	lsls	r3, r3, #12
 800b48e:	693a      	ldr	r2, [r7, #16]
 800b490:	4313      	orrs	r3, r2
 800b492:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	4a10      	ldr	r2, [pc, #64]	@ (800b4d8 <TIM_OC4_SetConfig+0x9c>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d109      	bne.n	800b4b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b4a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	695b      	ldr	r3, [r3, #20]
 800b4a8:	019b      	lsls	r3, r3, #6
 800b4aa:	697a      	ldr	r2, [r7, #20]
 800b4ac:	4313      	orrs	r3, r2
 800b4ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	697a      	ldr	r2, [r7, #20]
 800b4b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	68fa      	ldr	r2, [r7, #12]
 800b4ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	685a      	ldr	r2, [r3, #4]
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	693a      	ldr	r2, [r7, #16]
 800b4c8:	621a      	str	r2, [r3, #32]
}
 800b4ca:	bf00      	nop
 800b4cc:	371c      	adds	r7, #28
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d4:	4770      	bx	lr
 800b4d6:	bf00      	nop
 800b4d8:	40010000 	.word	0x40010000

0800b4dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b087      	sub	sp, #28
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	60f8      	str	r0, [r7, #12]
 800b4e4:	60b9      	str	r1, [r7, #8]
 800b4e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	6a1b      	ldr	r3, [r3, #32]
 800b4ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	6a1b      	ldr	r3, [r3, #32]
 800b4f2:	f023 0201 	bic.w	r2, r3, #1
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	699b      	ldr	r3, [r3, #24]
 800b4fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b506:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	011b      	lsls	r3, r3, #4
 800b50c:	693a      	ldr	r2, [r7, #16]
 800b50e:	4313      	orrs	r3, r2
 800b510:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	f023 030a 	bic.w	r3, r3, #10
 800b518:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b51a:	697a      	ldr	r2, [r7, #20]
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	4313      	orrs	r3, r2
 800b520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	693a      	ldr	r2, [r7, #16]
 800b526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	697a      	ldr	r2, [r7, #20]
 800b52c:	621a      	str	r2, [r3, #32]
}
 800b52e:	bf00      	nop
 800b530:	371c      	adds	r7, #28
 800b532:	46bd      	mov	sp, r7
 800b534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b538:	4770      	bx	lr

0800b53a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b53a:	b480      	push	{r7}
 800b53c:	b087      	sub	sp, #28
 800b53e:	af00      	add	r7, sp, #0
 800b540:	60f8      	str	r0, [r7, #12]
 800b542:	60b9      	str	r1, [r7, #8]
 800b544:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	6a1b      	ldr	r3, [r3, #32]
 800b54a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	6a1b      	ldr	r3, [r3, #32]
 800b550:	f023 0210 	bic.w	r2, r3, #16
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	699b      	ldr	r3, [r3, #24]
 800b55c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b564:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	031b      	lsls	r3, r3, #12
 800b56a:	693a      	ldr	r2, [r7, #16]
 800b56c:	4313      	orrs	r3, r2
 800b56e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b576:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	011b      	lsls	r3, r3, #4
 800b57c:	697a      	ldr	r2, [r7, #20]
 800b57e:	4313      	orrs	r3, r2
 800b580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	693a      	ldr	r2, [r7, #16]
 800b586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	697a      	ldr	r2, [r7, #20]
 800b58c:	621a      	str	r2, [r3, #32]
}
 800b58e:	bf00      	nop
 800b590:	371c      	adds	r7, #28
 800b592:	46bd      	mov	sp, r7
 800b594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b598:	4770      	bx	lr

0800b59a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b59a:	b480      	push	{r7}
 800b59c:	b085      	sub	sp, #20
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
 800b5a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	689b      	ldr	r3, [r3, #8]
 800b5a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b5b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b5b2:	683a      	ldr	r2, [r7, #0]
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	f043 0307 	orr.w	r3, r3, #7
 800b5bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	68fa      	ldr	r2, [r7, #12]
 800b5c2:	609a      	str	r2, [r3, #8]
}
 800b5c4:	bf00      	nop
 800b5c6:	3714      	adds	r7, #20
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr

0800b5d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b087      	sub	sp, #28
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	60f8      	str	r0, [r7, #12]
 800b5d8:	60b9      	str	r1, [r7, #8]
 800b5da:	607a      	str	r2, [r7, #4]
 800b5dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	689b      	ldr	r3, [r3, #8]
 800b5e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b5ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	021a      	lsls	r2, r3, #8
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	431a      	orrs	r2, r3
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	4313      	orrs	r3, r2
 800b5f8:	697a      	ldr	r2, [r7, #20]
 800b5fa:	4313      	orrs	r3, r2
 800b5fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	697a      	ldr	r2, [r7, #20]
 800b602:	609a      	str	r2, [r3, #8]
}
 800b604:	bf00      	nop
 800b606:	371c      	adds	r7, #28
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b610:	b480      	push	{r7}
 800b612:	b087      	sub	sp, #28
 800b614:	af00      	add	r7, sp, #0
 800b616:	60f8      	str	r0, [r7, #12]
 800b618:	60b9      	str	r1, [r7, #8]
 800b61a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	f003 031f 	and.w	r3, r3, #31
 800b622:	2201      	movs	r2, #1
 800b624:	fa02 f303 	lsl.w	r3, r2, r3
 800b628:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	6a1a      	ldr	r2, [r3, #32]
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	43db      	mvns	r3, r3
 800b632:	401a      	ands	r2, r3
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	6a1a      	ldr	r2, [r3, #32]
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	f003 031f 	and.w	r3, r3, #31
 800b642:	6879      	ldr	r1, [r7, #4]
 800b644:	fa01 f303 	lsl.w	r3, r1, r3
 800b648:	431a      	orrs	r2, r3
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	621a      	str	r2, [r3, #32]
}
 800b64e:	bf00      	nop
 800b650:	371c      	adds	r7, #28
 800b652:	46bd      	mov	sp, r7
 800b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b658:	4770      	bx	lr
	...

0800b65c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b085      	sub	sp, #20
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
 800b664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d101      	bne.n	800b674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b670:	2302      	movs	r3, #2
 800b672:	e050      	b.n	800b716 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2201      	movs	r2, #1
 800b678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2202      	movs	r2, #2
 800b680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	685b      	ldr	r3, [r3, #4]
 800b68a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	689b      	ldr	r3, [r3, #8]
 800b692:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b69a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	68fa      	ldr	r2, [r7, #12]
 800b6a2:	4313      	orrs	r3, r2
 800b6a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	68fa      	ldr	r2, [r7, #12]
 800b6ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	4a1c      	ldr	r2, [pc, #112]	@ (800b724 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d018      	beq.n	800b6ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6c0:	d013      	beq.n	800b6ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4a18      	ldr	r2, [pc, #96]	@ (800b728 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d00e      	beq.n	800b6ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4a16      	ldr	r2, [pc, #88]	@ (800b72c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d009      	beq.n	800b6ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4a15      	ldr	r2, [pc, #84]	@ (800b730 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d004      	beq.n	800b6ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	4a13      	ldr	r2, [pc, #76]	@ (800b734 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d10c      	bne.n	800b704 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b6f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	68ba      	ldr	r2, [r7, #8]
 800b6f8:	4313      	orrs	r3, r2
 800b6fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	68ba      	ldr	r2, [r7, #8]
 800b702:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2201      	movs	r2, #1
 800b708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2200      	movs	r2, #0
 800b710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b714:	2300      	movs	r3, #0
}
 800b716:	4618      	mov	r0, r3
 800b718:	3714      	adds	r7, #20
 800b71a:	46bd      	mov	sp, r7
 800b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b720:	4770      	bx	lr
 800b722:	bf00      	nop
 800b724:	40010000 	.word	0x40010000
 800b728:	40000400 	.word	0x40000400
 800b72c:	40000800 	.word	0x40000800
 800b730:	40000c00 	.word	0x40000c00
 800b734:	40014000 	.word	0x40014000

0800b738 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b738:	b480      	push	{r7}
 800b73a:	b083      	sub	sp, #12
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b740:	bf00      	nop
 800b742:	370c      	adds	r7, #12
 800b744:	46bd      	mov	sp, r7
 800b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74a:	4770      	bx	lr

0800b74c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b083      	sub	sp, #12
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b754:	bf00      	nop
 800b756:	370c      	adds	r7, #12
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr

0800b760 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b082      	sub	sp, #8
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d101      	bne.n	800b772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b76e:	2301      	movs	r3, #1
 800b770:	e042      	b.n	800b7f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b778:	b2db      	uxtb	r3, r3
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d106      	bne.n	800b78c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2200      	movs	r2, #0
 800b782:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f7fc f8a4 	bl	80078d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2224      	movs	r2, #36	@ 0x24
 800b790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	68da      	ldr	r2, [r3, #12]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b7a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f000 f973 	bl	800ba90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	691a      	ldr	r2, [r3, #16]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b7b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	695a      	ldr	r2, [r3, #20]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b7c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	68da      	ldr	r2, [r3, #12]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b7d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2220      	movs	r2, #32
 800b7e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2220      	movs	r2, #32
 800b7ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b7f6:	2300      	movs	r3, #0
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3708      	adds	r7, #8
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}

0800b800 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b08a      	sub	sp, #40	@ 0x28
 800b804:	af02      	add	r7, sp, #8
 800b806:	60f8      	str	r0, [r7, #12]
 800b808:	60b9      	str	r1, [r7, #8]
 800b80a:	603b      	str	r3, [r7, #0]
 800b80c:	4613      	mov	r3, r2
 800b80e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b810:	2300      	movs	r3, #0
 800b812:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b81a:	b2db      	uxtb	r3, r3
 800b81c:	2b20      	cmp	r3, #32
 800b81e:	d175      	bne.n	800b90c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d002      	beq.n	800b82c <HAL_UART_Transmit+0x2c>
 800b826:	88fb      	ldrh	r3, [r7, #6]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d101      	bne.n	800b830 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b82c:	2301      	movs	r3, #1
 800b82e:	e06e      	b.n	800b90e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2200      	movs	r2, #0
 800b834:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	2221      	movs	r2, #33	@ 0x21
 800b83a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b83e:	f7fc fa6d 	bl	8007d1c <HAL_GetTick>
 800b842:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	88fa      	ldrh	r2, [r7, #6]
 800b848:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	88fa      	ldrh	r2, [r7, #6]
 800b84e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	689b      	ldr	r3, [r3, #8]
 800b854:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b858:	d108      	bne.n	800b86c <HAL_UART_Transmit+0x6c>
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	691b      	ldr	r3, [r3, #16]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d104      	bne.n	800b86c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b862:	2300      	movs	r3, #0
 800b864:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	61bb      	str	r3, [r7, #24]
 800b86a:	e003      	b.n	800b874 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b870:	2300      	movs	r3, #0
 800b872:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b874:	e02e      	b.n	800b8d4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	9300      	str	r3, [sp, #0]
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	2200      	movs	r2, #0
 800b87e:	2180      	movs	r1, #128	@ 0x80
 800b880:	68f8      	ldr	r0, [r7, #12]
 800b882:	f000 f848 	bl	800b916 <UART_WaitOnFlagUntilTimeout>
 800b886:	4603      	mov	r3, r0
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d005      	beq.n	800b898 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2220      	movs	r2, #32
 800b890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800b894:	2303      	movs	r3, #3
 800b896:	e03a      	b.n	800b90e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800b898:	69fb      	ldr	r3, [r7, #28]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d10b      	bne.n	800b8b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b89e:	69bb      	ldr	r3, [r7, #24]
 800b8a0:	881b      	ldrh	r3, [r3, #0]
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b8ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b8ae:	69bb      	ldr	r3, [r7, #24]
 800b8b0:	3302      	adds	r3, #2
 800b8b2:	61bb      	str	r3, [r7, #24]
 800b8b4:	e007      	b.n	800b8c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b8b6:	69fb      	ldr	r3, [r7, #28]
 800b8b8:	781a      	ldrb	r2, [r3, #0]
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b8c0:	69fb      	ldr	r3, [r7, #28]
 800b8c2:	3301      	adds	r3, #1
 800b8c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b8ca:	b29b      	uxth	r3, r3
 800b8cc:	3b01      	subs	r3, #1
 800b8ce:	b29a      	uxth	r2, r3
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b8d8:	b29b      	uxth	r3, r3
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d1cb      	bne.n	800b876 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	9300      	str	r3, [sp, #0]
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	2140      	movs	r1, #64	@ 0x40
 800b8e8:	68f8      	ldr	r0, [r7, #12]
 800b8ea:	f000 f814 	bl	800b916 <UART_WaitOnFlagUntilTimeout>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d005      	beq.n	800b900 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2220      	movs	r2, #32
 800b8f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800b8fc:	2303      	movs	r3, #3
 800b8fe:	e006      	b.n	800b90e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	2220      	movs	r2, #32
 800b904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800b908:	2300      	movs	r3, #0
 800b90a:	e000      	b.n	800b90e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800b90c:	2302      	movs	r3, #2
  }
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3720      	adds	r7, #32
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}

0800b916 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b916:	b580      	push	{r7, lr}
 800b918:	b086      	sub	sp, #24
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	60f8      	str	r0, [r7, #12]
 800b91e:	60b9      	str	r1, [r7, #8]
 800b920:	603b      	str	r3, [r7, #0]
 800b922:	4613      	mov	r3, r2
 800b924:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b926:	e03b      	b.n	800b9a0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b928:	6a3b      	ldr	r3, [r7, #32]
 800b92a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b92e:	d037      	beq.n	800b9a0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b930:	f7fc f9f4 	bl	8007d1c <HAL_GetTick>
 800b934:	4602      	mov	r2, r0
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	1ad3      	subs	r3, r2, r3
 800b93a:	6a3a      	ldr	r2, [r7, #32]
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d302      	bcc.n	800b946 <UART_WaitOnFlagUntilTimeout+0x30>
 800b940:	6a3b      	ldr	r3, [r7, #32]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d101      	bne.n	800b94a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b946:	2303      	movs	r3, #3
 800b948:	e03a      	b.n	800b9c0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	68db      	ldr	r3, [r3, #12]
 800b950:	f003 0304 	and.w	r3, r3, #4
 800b954:	2b00      	cmp	r3, #0
 800b956:	d023      	beq.n	800b9a0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	2b80      	cmp	r3, #128	@ 0x80
 800b95c:	d020      	beq.n	800b9a0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	2b40      	cmp	r3, #64	@ 0x40
 800b962:	d01d      	beq.n	800b9a0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f003 0308 	and.w	r3, r3, #8
 800b96e:	2b08      	cmp	r3, #8
 800b970:	d116      	bne.n	800b9a0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800b972:	2300      	movs	r3, #0
 800b974:	617b      	str	r3, [r7, #20]
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	617b      	str	r3, [r7, #20]
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	617b      	str	r3, [r7, #20]
 800b986:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b988:	68f8      	ldr	r0, [r7, #12]
 800b98a:	f000 f81d 	bl	800b9c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	2208      	movs	r2, #8
 800b992:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2200      	movs	r2, #0
 800b998:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800b99c:	2301      	movs	r3, #1
 800b99e:	e00f      	b.n	800b9c0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	681a      	ldr	r2, [r3, #0]
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	4013      	ands	r3, r2
 800b9aa:	68ba      	ldr	r2, [r7, #8]
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	bf0c      	ite	eq
 800b9b0:	2301      	moveq	r3, #1
 800b9b2:	2300      	movne	r3, #0
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	79fb      	ldrb	r3, [r7, #7]
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d0b4      	beq.n	800b928 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b9be:	2300      	movs	r3, #0
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3718      	adds	r7, #24
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b095      	sub	sp, #84	@ 0x54
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	330c      	adds	r3, #12
 800b9d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9da:	e853 3f00 	ldrex	r3, [r3]
 800b9de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b9e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b9e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	330c      	adds	r3, #12
 800b9ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b9f0:	643a      	str	r2, [r7, #64]	@ 0x40
 800b9f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b9f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b9f8:	e841 2300 	strex	r3, r2, [r1]
 800b9fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b9fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d1e5      	bne.n	800b9d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	3314      	adds	r3, #20
 800ba0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba0c:	6a3b      	ldr	r3, [r7, #32]
 800ba0e:	e853 3f00 	ldrex	r3, [r3]
 800ba12:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba14:	69fb      	ldr	r3, [r7, #28]
 800ba16:	f023 0301 	bic.w	r3, r3, #1
 800ba1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	3314      	adds	r3, #20
 800ba22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ba26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba2c:	e841 2300 	strex	r3, r2, [r1]
 800ba30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ba32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d1e5      	bne.n	800ba04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d119      	bne.n	800ba74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	330c      	adds	r3, #12
 800ba46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	e853 3f00 	ldrex	r3, [r3]
 800ba4e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	f023 0310 	bic.w	r3, r3, #16
 800ba56:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	330c      	adds	r3, #12
 800ba5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ba60:	61ba      	str	r2, [r7, #24]
 800ba62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba64:	6979      	ldr	r1, [r7, #20]
 800ba66:	69ba      	ldr	r2, [r7, #24]
 800ba68:	e841 2300 	strex	r3, r2, [r1]
 800ba6c:	613b      	str	r3, [r7, #16]
   return(result);
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d1e5      	bne.n	800ba40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2220      	movs	r2, #32
 800ba78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800ba82:	bf00      	nop
 800ba84:	3754      	adds	r7, #84	@ 0x54
 800ba86:	46bd      	mov	sp, r7
 800ba88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8c:	4770      	bx	lr
	...

0800ba90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ba90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ba94:	b0c0      	sub	sp, #256	@ 0x100
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ba9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	691b      	ldr	r3, [r3, #16]
 800baa4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800baa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800baac:	68d9      	ldr	r1, [r3, #12]
 800baae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bab2:	681a      	ldr	r2, [r3, #0]
 800bab4:	ea40 0301 	orr.w	r3, r0, r1
 800bab8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800baba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800babe:	689a      	ldr	r2, [r3, #8]
 800bac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bac4:	691b      	ldr	r3, [r3, #16]
 800bac6:	431a      	orrs	r2, r3
 800bac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bacc:	695b      	ldr	r3, [r3, #20]
 800bace:	431a      	orrs	r2, r3
 800bad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bad4:	69db      	ldr	r3, [r3, #28]
 800bad6:	4313      	orrs	r3, r2
 800bad8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800badc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	68db      	ldr	r3, [r3, #12]
 800bae4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800bae8:	f021 010c 	bic.w	r1, r1, #12
 800baec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800baf0:	681a      	ldr	r2, [r3, #0]
 800baf2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800baf6:	430b      	orrs	r3, r1
 800baf8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bafa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	695b      	ldr	r3, [r3, #20]
 800bb02:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800bb06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb0a:	6999      	ldr	r1, [r3, #24]
 800bb0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb10:	681a      	ldr	r2, [r3, #0]
 800bb12:	ea40 0301 	orr.w	r3, r0, r1
 800bb16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bb18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb1c:	681a      	ldr	r2, [r3, #0]
 800bb1e:	4b8f      	ldr	r3, [pc, #572]	@ (800bd5c <UART_SetConfig+0x2cc>)
 800bb20:	429a      	cmp	r2, r3
 800bb22:	d005      	beq.n	800bb30 <UART_SetConfig+0xa0>
 800bb24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb28:	681a      	ldr	r2, [r3, #0]
 800bb2a:	4b8d      	ldr	r3, [pc, #564]	@ (800bd60 <UART_SetConfig+0x2d0>)
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d104      	bne.n	800bb3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bb30:	f7fe fba0 	bl	800a274 <HAL_RCC_GetPCLK2Freq>
 800bb34:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800bb38:	e003      	b.n	800bb42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bb3a:	f7fe fb87 	bl	800a24c <HAL_RCC_GetPCLK1Freq>
 800bb3e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bb42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb46:	69db      	ldr	r3, [r3, #28]
 800bb48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bb4c:	f040 810c 	bne.w	800bd68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bb50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bb54:	2200      	movs	r2, #0
 800bb56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bb5a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800bb5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800bb62:	4622      	mov	r2, r4
 800bb64:	462b      	mov	r3, r5
 800bb66:	1891      	adds	r1, r2, r2
 800bb68:	65b9      	str	r1, [r7, #88]	@ 0x58
 800bb6a:	415b      	adcs	r3, r3
 800bb6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bb6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800bb72:	4621      	mov	r1, r4
 800bb74:	eb12 0801 	adds.w	r8, r2, r1
 800bb78:	4629      	mov	r1, r5
 800bb7a:	eb43 0901 	adc.w	r9, r3, r1
 800bb7e:	f04f 0200 	mov.w	r2, #0
 800bb82:	f04f 0300 	mov.w	r3, #0
 800bb86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bb8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bb8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bb92:	4690      	mov	r8, r2
 800bb94:	4699      	mov	r9, r3
 800bb96:	4623      	mov	r3, r4
 800bb98:	eb18 0303 	adds.w	r3, r8, r3
 800bb9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bba0:	462b      	mov	r3, r5
 800bba2:	eb49 0303 	adc.w	r3, r9, r3
 800bba6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bbaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bbb6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800bbba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800bbbe:	460b      	mov	r3, r1
 800bbc0:	18db      	adds	r3, r3, r3
 800bbc2:	653b      	str	r3, [r7, #80]	@ 0x50
 800bbc4:	4613      	mov	r3, r2
 800bbc6:	eb42 0303 	adc.w	r3, r2, r3
 800bbca:	657b      	str	r3, [r7, #84]	@ 0x54
 800bbcc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800bbd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800bbd4:	f7f4 fff0 	bl	8000bb8 <__aeabi_uldivmod>
 800bbd8:	4602      	mov	r2, r0
 800bbda:	460b      	mov	r3, r1
 800bbdc:	4b61      	ldr	r3, [pc, #388]	@ (800bd64 <UART_SetConfig+0x2d4>)
 800bbde:	fba3 2302 	umull	r2, r3, r3, r2
 800bbe2:	095b      	lsrs	r3, r3, #5
 800bbe4:	011c      	lsls	r4, r3, #4
 800bbe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bbea:	2200      	movs	r2, #0
 800bbec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bbf0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800bbf4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800bbf8:	4642      	mov	r2, r8
 800bbfa:	464b      	mov	r3, r9
 800bbfc:	1891      	adds	r1, r2, r2
 800bbfe:	64b9      	str	r1, [r7, #72]	@ 0x48
 800bc00:	415b      	adcs	r3, r3
 800bc02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800bc08:	4641      	mov	r1, r8
 800bc0a:	eb12 0a01 	adds.w	sl, r2, r1
 800bc0e:	4649      	mov	r1, r9
 800bc10:	eb43 0b01 	adc.w	fp, r3, r1
 800bc14:	f04f 0200 	mov.w	r2, #0
 800bc18:	f04f 0300 	mov.w	r3, #0
 800bc1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bc20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bc24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bc28:	4692      	mov	sl, r2
 800bc2a:	469b      	mov	fp, r3
 800bc2c:	4643      	mov	r3, r8
 800bc2e:	eb1a 0303 	adds.w	r3, sl, r3
 800bc32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bc36:	464b      	mov	r3, r9
 800bc38:	eb4b 0303 	adc.w	r3, fp, r3
 800bc3c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bc40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc44:	685b      	ldr	r3, [r3, #4]
 800bc46:	2200      	movs	r2, #0
 800bc48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bc4c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800bc50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800bc54:	460b      	mov	r3, r1
 800bc56:	18db      	adds	r3, r3, r3
 800bc58:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc5a:	4613      	mov	r3, r2
 800bc5c:	eb42 0303 	adc.w	r3, r2, r3
 800bc60:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800bc66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800bc6a:	f7f4 ffa5 	bl	8000bb8 <__aeabi_uldivmod>
 800bc6e:	4602      	mov	r2, r0
 800bc70:	460b      	mov	r3, r1
 800bc72:	4611      	mov	r1, r2
 800bc74:	4b3b      	ldr	r3, [pc, #236]	@ (800bd64 <UART_SetConfig+0x2d4>)
 800bc76:	fba3 2301 	umull	r2, r3, r3, r1
 800bc7a:	095b      	lsrs	r3, r3, #5
 800bc7c:	2264      	movs	r2, #100	@ 0x64
 800bc7e:	fb02 f303 	mul.w	r3, r2, r3
 800bc82:	1acb      	subs	r3, r1, r3
 800bc84:	00db      	lsls	r3, r3, #3
 800bc86:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800bc8a:	4b36      	ldr	r3, [pc, #216]	@ (800bd64 <UART_SetConfig+0x2d4>)
 800bc8c:	fba3 2302 	umull	r2, r3, r3, r2
 800bc90:	095b      	lsrs	r3, r3, #5
 800bc92:	005b      	lsls	r3, r3, #1
 800bc94:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800bc98:	441c      	add	r4, r3
 800bc9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bca4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800bca8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800bcac:	4642      	mov	r2, r8
 800bcae:	464b      	mov	r3, r9
 800bcb0:	1891      	adds	r1, r2, r2
 800bcb2:	63b9      	str	r1, [r7, #56]	@ 0x38
 800bcb4:	415b      	adcs	r3, r3
 800bcb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bcb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800bcbc:	4641      	mov	r1, r8
 800bcbe:	1851      	adds	r1, r2, r1
 800bcc0:	6339      	str	r1, [r7, #48]	@ 0x30
 800bcc2:	4649      	mov	r1, r9
 800bcc4:	414b      	adcs	r3, r1
 800bcc6:	637b      	str	r3, [r7, #52]	@ 0x34
 800bcc8:	f04f 0200 	mov.w	r2, #0
 800bccc:	f04f 0300 	mov.w	r3, #0
 800bcd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800bcd4:	4659      	mov	r1, fp
 800bcd6:	00cb      	lsls	r3, r1, #3
 800bcd8:	4651      	mov	r1, sl
 800bcda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bcde:	4651      	mov	r1, sl
 800bce0:	00ca      	lsls	r2, r1, #3
 800bce2:	4610      	mov	r0, r2
 800bce4:	4619      	mov	r1, r3
 800bce6:	4603      	mov	r3, r0
 800bce8:	4642      	mov	r2, r8
 800bcea:	189b      	adds	r3, r3, r2
 800bcec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bcf0:	464b      	mov	r3, r9
 800bcf2:	460a      	mov	r2, r1
 800bcf4:	eb42 0303 	adc.w	r3, r2, r3
 800bcf8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bcfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd00:	685b      	ldr	r3, [r3, #4]
 800bd02:	2200      	movs	r2, #0
 800bd04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bd08:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800bd0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800bd10:	460b      	mov	r3, r1
 800bd12:	18db      	adds	r3, r3, r3
 800bd14:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bd16:	4613      	mov	r3, r2
 800bd18:	eb42 0303 	adc.w	r3, r2, r3
 800bd1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bd1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800bd22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800bd26:	f7f4 ff47 	bl	8000bb8 <__aeabi_uldivmod>
 800bd2a:	4602      	mov	r2, r0
 800bd2c:	460b      	mov	r3, r1
 800bd2e:	4b0d      	ldr	r3, [pc, #52]	@ (800bd64 <UART_SetConfig+0x2d4>)
 800bd30:	fba3 1302 	umull	r1, r3, r3, r2
 800bd34:	095b      	lsrs	r3, r3, #5
 800bd36:	2164      	movs	r1, #100	@ 0x64
 800bd38:	fb01 f303 	mul.w	r3, r1, r3
 800bd3c:	1ad3      	subs	r3, r2, r3
 800bd3e:	00db      	lsls	r3, r3, #3
 800bd40:	3332      	adds	r3, #50	@ 0x32
 800bd42:	4a08      	ldr	r2, [pc, #32]	@ (800bd64 <UART_SetConfig+0x2d4>)
 800bd44:	fba2 2303 	umull	r2, r3, r2, r3
 800bd48:	095b      	lsrs	r3, r3, #5
 800bd4a:	f003 0207 	and.w	r2, r3, #7
 800bd4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	4422      	add	r2, r4
 800bd56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bd58:	e106      	b.n	800bf68 <UART_SetConfig+0x4d8>
 800bd5a:	bf00      	nop
 800bd5c:	40011000 	.word	0x40011000
 800bd60:	40011400 	.word	0x40011400
 800bd64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bd68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bd72:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800bd76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800bd7a:	4642      	mov	r2, r8
 800bd7c:	464b      	mov	r3, r9
 800bd7e:	1891      	adds	r1, r2, r2
 800bd80:	6239      	str	r1, [r7, #32]
 800bd82:	415b      	adcs	r3, r3
 800bd84:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bd8a:	4641      	mov	r1, r8
 800bd8c:	1854      	adds	r4, r2, r1
 800bd8e:	4649      	mov	r1, r9
 800bd90:	eb43 0501 	adc.w	r5, r3, r1
 800bd94:	f04f 0200 	mov.w	r2, #0
 800bd98:	f04f 0300 	mov.w	r3, #0
 800bd9c:	00eb      	lsls	r3, r5, #3
 800bd9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bda2:	00e2      	lsls	r2, r4, #3
 800bda4:	4614      	mov	r4, r2
 800bda6:	461d      	mov	r5, r3
 800bda8:	4643      	mov	r3, r8
 800bdaa:	18e3      	adds	r3, r4, r3
 800bdac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bdb0:	464b      	mov	r3, r9
 800bdb2:	eb45 0303 	adc.w	r3, r5, r3
 800bdb6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bdba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bdbe:	685b      	ldr	r3, [r3, #4]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bdc6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800bdca:	f04f 0200 	mov.w	r2, #0
 800bdce:	f04f 0300 	mov.w	r3, #0
 800bdd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800bdd6:	4629      	mov	r1, r5
 800bdd8:	008b      	lsls	r3, r1, #2
 800bdda:	4621      	mov	r1, r4
 800bddc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bde0:	4621      	mov	r1, r4
 800bde2:	008a      	lsls	r2, r1, #2
 800bde4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800bde8:	f7f4 fee6 	bl	8000bb8 <__aeabi_uldivmod>
 800bdec:	4602      	mov	r2, r0
 800bdee:	460b      	mov	r3, r1
 800bdf0:	4b60      	ldr	r3, [pc, #384]	@ (800bf74 <UART_SetConfig+0x4e4>)
 800bdf2:	fba3 2302 	umull	r2, r3, r3, r2
 800bdf6:	095b      	lsrs	r3, r3, #5
 800bdf8:	011c      	lsls	r4, r3, #4
 800bdfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bdfe:	2200      	movs	r2, #0
 800be00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800be04:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800be08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800be0c:	4642      	mov	r2, r8
 800be0e:	464b      	mov	r3, r9
 800be10:	1891      	adds	r1, r2, r2
 800be12:	61b9      	str	r1, [r7, #24]
 800be14:	415b      	adcs	r3, r3
 800be16:	61fb      	str	r3, [r7, #28]
 800be18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800be1c:	4641      	mov	r1, r8
 800be1e:	1851      	adds	r1, r2, r1
 800be20:	6139      	str	r1, [r7, #16]
 800be22:	4649      	mov	r1, r9
 800be24:	414b      	adcs	r3, r1
 800be26:	617b      	str	r3, [r7, #20]
 800be28:	f04f 0200 	mov.w	r2, #0
 800be2c:	f04f 0300 	mov.w	r3, #0
 800be30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800be34:	4659      	mov	r1, fp
 800be36:	00cb      	lsls	r3, r1, #3
 800be38:	4651      	mov	r1, sl
 800be3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800be3e:	4651      	mov	r1, sl
 800be40:	00ca      	lsls	r2, r1, #3
 800be42:	4610      	mov	r0, r2
 800be44:	4619      	mov	r1, r3
 800be46:	4603      	mov	r3, r0
 800be48:	4642      	mov	r2, r8
 800be4a:	189b      	adds	r3, r3, r2
 800be4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800be50:	464b      	mov	r3, r9
 800be52:	460a      	mov	r2, r1
 800be54:	eb42 0303 	adc.w	r3, r2, r3
 800be58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800be5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800be60:	685b      	ldr	r3, [r3, #4]
 800be62:	2200      	movs	r2, #0
 800be64:	67bb      	str	r3, [r7, #120]	@ 0x78
 800be66:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800be68:	f04f 0200 	mov.w	r2, #0
 800be6c:	f04f 0300 	mov.w	r3, #0
 800be70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800be74:	4649      	mov	r1, r9
 800be76:	008b      	lsls	r3, r1, #2
 800be78:	4641      	mov	r1, r8
 800be7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800be7e:	4641      	mov	r1, r8
 800be80:	008a      	lsls	r2, r1, #2
 800be82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800be86:	f7f4 fe97 	bl	8000bb8 <__aeabi_uldivmod>
 800be8a:	4602      	mov	r2, r0
 800be8c:	460b      	mov	r3, r1
 800be8e:	4611      	mov	r1, r2
 800be90:	4b38      	ldr	r3, [pc, #224]	@ (800bf74 <UART_SetConfig+0x4e4>)
 800be92:	fba3 2301 	umull	r2, r3, r3, r1
 800be96:	095b      	lsrs	r3, r3, #5
 800be98:	2264      	movs	r2, #100	@ 0x64
 800be9a:	fb02 f303 	mul.w	r3, r2, r3
 800be9e:	1acb      	subs	r3, r1, r3
 800bea0:	011b      	lsls	r3, r3, #4
 800bea2:	3332      	adds	r3, #50	@ 0x32
 800bea4:	4a33      	ldr	r2, [pc, #204]	@ (800bf74 <UART_SetConfig+0x4e4>)
 800bea6:	fba2 2303 	umull	r2, r3, r2, r3
 800beaa:	095b      	lsrs	r3, r3, #5
 800beac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800beb0:	441c      	add	r4, r3
 800beb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800beb6:	2200      	movs	r2, #0
 800beb8:	673b      	str	r3, [r7, #112]	@ 0x70
 800beba:	677a      	str	r2, [r7, #116]	@ 0x74
 800bebc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800bec0:	4642      	mov	r2, r8
 800bec2:	464b      	mov	r3, r9
 800bec4:	1891      	adds	r1, r2, r2
 800bec6:	60b9      	str	r1, [r7, #8]
 800bec8:	415b      	adcs	r3, r3
 800beca:	60fb      	str	r3, [r7, #12]
 800becc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bed0:	4641      	mov	r1, r8
 800bed2:	1851      	adds	r1, r2, r1
 800bed4:	6039      	str	r1, [r7, #0]
 800bed6:	4649      	mov	r1, r9
 800bed8:	414b      	adcs	r3, r1
 800beda:	607b      	str	r3, [r7, #4]
 800bedc:	f04f 0200 	mov.w	r2, #0
 800bee0:	f04f 0300 	mov.w	r3, #0
 800bee4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bee8:	4659      	mov	r1, fp
 800beea:	00cb      	lsls	r3, r1, #3
 800beec:	4651      	mov	r1, sl
 800beee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bef2:	4651      	mov	r1, sl
 800bef4:	00ca      	lsls	r2, r1, #3
 800bef6:	4610      	mov	r0, r2
 800bef8:	4619      	mov	r1, r3
 800befa:	4603      	mov	r3, r0
 800befc:	4642      	mov	r2, r8
 800befe:	189b      	adds	r3, r3, r2
 800bf00:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bf02:	464b      	mov	r3, r9
 800bf04:	460a      	mov	r2, r1
 800bf06:	eb42 0303 	adc.w	r3, r2, r3
 800bf0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bf0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	2200      	movs	r2, #0
 800bf14:	663b      	str	r3, [r7, #96]	@ 0x60
 800bf16:	667a      	str	r2, [r7, #100]	@ 0x64
 800bf18:	f04f 0200 	mov.w	r2, #0
 800bf1c:	f04f 0300 	mov.w	r3, #0
 800bf20:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800bf24:	4649      	mov	r1, r9
 800bf26:	008b      	lsls	r3, r1, #2
 800bf28:	4641      	mov	r1, r8
 800bf2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bf2e:	4641      	mov	r1, r8
 800bf30:	008a      	lsls	r2, r1, #2
 800bf32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800bf36:	f7f4 fe3f 	bl	8000bb8 <__aeabi_uldivmod>
 800bf3a:	4602      	mov	r2, r0
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	4b0d      	ldr	r3, [pc, #52]	@ (800bf74 <UART_SetConfig+0x4e4>)
 800bf40:	fba3 1302 	umull	r1, r3, r3, r2
 800bf44:	095b      	lsrs	r3, r3, #5
 800bf46:	2164      	movs	r1, #100	@ 0x64
 800bf48:	fb01 f303 	mul.w	r3, r1, r3
 800bf4c:	1ad3      	subs	r3, r2, r3
 800bf4e:	011b      	lsls	r3, r3, #4
 800bf50:	3332      	adds	r3, #50	@ 0x32
 800bf52:	4a08      	ldr	r2, [pc, #32]	@ (800bf74 <UART_SetConfig+0x4e4>)
 800bf54:	fba2 2303 	umull	r2, r3, r2, r3
 800bf58:	095b      	lsrs	r3, r3, #5
 800bf5a:	f003 020f 	and.w	r2, r3, #15
 800bf5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	4422      	add	r2, r4
 800bf66:	609a      	str	r2, [r3, #8]
}
 800bf68:	bf00      	nop
 800bf6a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bf74:	51eb851f 	.word	0x51eb851f

0800bf78 <_ZdlPvj>:
 800bf78:	f000 b811 	b.w	800bf9e <_ZdlPv>

0800bf7c <_Znwj>:
 800bf7c:	2801      	cmp	r0, #1
 800bf7e:	bf38      	it	cc
 800bf80:	2001      	movcc	r0, #1
 800bf82:	b510      	push	{r4, lr}
 800bf84:	4604      	mov	r4, r0
 800bf86:	4620      	mov	r0, r4
 800bf88:	f000 f81c 	bl	800bfc4 <malloc>
 800bf8c:	b100      	cbz	r0, 800bf90 <_Znwj+0x14>
 800bf8e:	bd10      	pop	{r4, pc}
 800bf90:	f000 f808 	bl	800bfa4 <_ZSt15get_new_handlerv>
 800bf94:	b908      	cbnz	r0, 800bf9a <_Znwj+0x1e>
 800bf96:	f000 f80d 	bl	800bfb4 <abort>
 800bf9a:	4780      	blx	r0
 800bf9c:	e7f3      	b.n	800bf86 <_Znwj+0xa>

0800bf9e <_ZdlPv>:
 800bf9e:	f000 b819 	b.w	800bfd4 <free>
	...

0800bfa4 <_ZSt15get_new_handlerv>:
 800bfa4:	4b02      	ldr	r3, [pc, #8]	@ (800bfb0 <_ZSt15get_new_handlerv+0xc>)
 800bfa6:	6818      	ldr	r0, [r3, #0]
 800bfa8:	f3bf 8f5b 	dmb	ish
 800bfac:	4770      	bx	lr
 800bfae:	bf00      	nop
 800bfb0:	2000049c 	.word	0x2000049c

0800bfb4 <abort>:
 800bfb4:	b508      	push	{r3, lr}
 800bfb6:	2006      	movs	r0, #6
 800bfb8:	f000 fe70 	bl	800cc9c <raise>
 800bfbc:	2001      	movs	r0, #1
 800bfbe:	f7fb fd5d 	bl	8007a7c <_exit>
	...

0800bfc4 <malloc>:
 800bfc4:	4b02      	ldr	r3, [pc, #8]	@ (800bfd0 <malloc+0xc>)
 800bfc6:	4601      	mov	r1, r0
 800bfc8:	6818      	ldr	r0, [r3, #0]
 800bfca:	f000 b82d 	b.w	800c028 <_malloc_r>
 800bfce:	bf00      	nop
 800bfd0:	2000001c 	.word	0x2000001c

0800bfd4 <free>:
 800bfd4:	4b02      	ldr	r3, [pc, #8]	@ (800bfe0 <free+0xc>)
 800bfd6:	4601      	mov	r1, r0
 800bfd8:	6818      	ldr	r0, [r3, #0]
 800bfda:	f001 bd59 	b.w	800da90 <_free_r>
 800bfde:	bf00      	nop
 800bfe0:	2000001c 	.word	0x2000001c

0800bfe4 <sbrk_aligned>:
 800bfe4:	b570      	push	{r4, r5, r6, lr}
 800bfe6:	4e0f      	ldr	r6, [pc, #60]	@ (800c024 <sbrk_aligned+0x40>)
 800bfe8:	460c      	mov	r4, r1
 800bfea:	6831      	ldr	r1, [r6, #0]
 800bfec:	4605      	mov	r5, r0
 800bfee:	b911      	cbnz	r1, 800bff6 <sbrk_aligned+0x12>
 800bff0:	f000 fea8 	bl	800cd44 <_sbrk_r>
 800bff4:	6030      	str	r0, [r6, #0]
 800bff6:	4621      	mov	r1, r4
 800bff8:	4628      	mov	r0, r5
 800bffa:	f000 fea3 	bl	800cd44 <_sbrk_r>
 800bffe:	1c43      	adds	r3, r0, #1
 800c000:	d103      	bne.n	800c00a <sbrk_aligned+0x26>
 800c002:	f04f 34ff 	mov.w	r4, #4294967295
 800c006:	4620      	mov	r0, r4
 800c008:	bd70      	pop	{r4, r5, r6, pc}
 800c00a:	1cc4      	adds	r4, r0, #3
 800c00c:	f024 0403 	bic.w	r4, r4, #3
 800c010:	42a0      	cmp	r0, r4
 800c012:	d0f8      	beq.n	800c006 <sbrk_aligned+0x22>
 800c014:	1a21      	subs	r1, r4, r0
 800c016:	4628      	mov	r0, r5
 800c018:	f000 fe94 	bl	800cd44 <_sbrk_r>
 800c01c:	3001      	adds	r0, #1
 800c01e:	d1f2      	bne.n	800c006 <sbrk_aligned+0x22>
 800c020:	e7ef      	b.n	800c002 <sbrk_aligned+0x1e>
 800c022:	bf00      	nop
 800c024:	200004a0 	.word	0x200004a0

0800c028 <_malloc_r>:
 800c028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c02c:	1ccd      	adds	r5, r1, #3
 800c02e:	f025 0503 	bic.w	r5, r5, #3
 800c032:	3508      	adds	r5, #8
 800c034:	2d0c      	cmp	r5, #12
 800c036:	bf38      	it	cc
 800c038:	250c      	movcc	r5, #12
 800c03a:	2d00      	cmp	r5, #0
 800c03c:	4606      	mov	r6, r0
 800c03e:	db01      	blt.n	800c044 <_malloc_r+0x1c>
 800c040:	42a9      	cmp	r1, r5
 800c042:	d904      	bls.n	800c04e <_malloc_r+0x26>
 800c044:	230c      	movs	r3, #12
 800c046:	6033      	str	r3, [r6, #0]
 800c048:	2000      	movs	r0, #0
 800c04a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c04e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c124 <_malloc_r+0xfc>
 800c052:	f000 f869 	bl	800c128 <__malloc_lock>
 800c056:	f8d8 3000 	ldr.w	r3, [r8]
 800c05a:	461c      	mov	r4, r3
 800c05c:	bb44      	cbnz	r4, 800c0b0 <_malloc_r+0x88>
 800c05e:	4629      	mov	r1, r5
 800c060:	4630      	mov	r0, r6
 800c062:	f7ff ffbf 	bl	800bfe4 <sbrk_aligned>
 800c066:	1c43      	adds	r3, r0, #1
 800c068:	4604      	mov	r4, r0
 800c06a:	d158      	bne.n	800c11e <_malloc_r+0xf6>
 800c06c:	f8d8 4000 	ldr.w	r4, [r8]
 800c070:	4627      	mov	r7, r4
 800c072:	2f00      	cmp	r7, #0
 800c074:	d143      	bne.n	800c0fe <_malloc_r+0xd6>
 800c076:	2c00      	cmp	r4, #0
 800c078:	d04b      	beq.n	800c112 <_malloc_r+0xea>
 800c07a:	6823      	ldr	r3, [r4, #0]
 800c07c:	4639      	mov	r1, r7
 800c07e:	4630      	mov	r0, r6
 800c080:	eb04 0903 	add.w	r9, r4, r3
 800c084:	f000 fe5e 	bl	800cd44 <_sbrk_r>
 800c088:	4581      	cmp	r9, r0
 800c08a:	d142      	bne.n	800c112 <_malloc_r+0xea>
 800c08c:	6821      	ldr	r1, [r4, #0]
 800c08e:	1a6d      	subs	r5, r5, r1
 800c090:	4629      	mov	r1, r5
 800c092:	4630      	mov	r0, r6
 800c094:	f7ff ffa6 	bl	800bfe4 <sbrk_aligned>
 800c098:	3001      	adds	r0, #1
 800c09a:	d03a      	beq.n	800c112 <_malloc_r+0xea>
 800c09c:	6823      	ldr	r3, [r4, #0]
 800c09e:	442b      	add	r3, r5
 800c0a0:	6023      	str	r3, [r4, #0]
 800c0a2:	f8d8 3000 	ldr.w	r3, [r8]
 800c0a6:	685a      	ldr	r2, [r3, #4]
 800c0a8:	bb62      	cbnz	r2, 800c104 <_malloc_r+0xdc>
 800c0aa:	f8c8 7000 	str.w	r7, [r8]
 800c0ae:	e00f      	b.n	800c0d0 <_malloc_r+0xa8>
 800c0b0:	6822      	ldr	r2, [r4, #0]
 800c0b2:	1b52      	subs	r2, r2, r5
 800c0b4:	d420      	bmi.n	800c0f8 <_malloc_r+0xd0>
 800c0b6:	2a0b      	cmp	r2, #11
 800c0b8:	d917      	bls.n	800c0ea <_malloc_r+0xc2>
 800c0ba:	1961      	adds	r1, r4, r5
 800c0bc:	42a3      	cmp	r3, r4
 800c0be:	6025      	str	r5, [r4, #0]
 800c0c0:	bf18      	it	ne
 800c0c2:	6059      	strne	r1, [r3, #4]
 800c0c4:	6863      	ldr	r3, [r4, #4]
 800c0c6:	bf08      	it	eq
 800c0c8:	f8c8 1000 	streq.w	r1, [r8]
 800c0cc:	5162      	str	r2, [r4, r5]
 800c0ce:	604b      	str	r3, [r1, #4]
 800c0d0:	4630      	mov	r0, r6
 800c0d2:	f000 f82f 	bl	800c134 <__malloc_unlock>
 800c0d6:	f104 000b 	add.w	r0, r4, #11
 800c0da:	1d23      	adds	r3, r4, #4
 800c0dc:	f020 0007 	bic.w	r0, r0, #7
 800c0e0:	1ac2      	subs	r2, r0, r3
 800c0e2:	bf1c      	itt	ne
 800c0e4:	1a1b      	subne	r3, r3, r0
 800c0e6:	50a3      	strne	r3, [r4, r2]
 800c0e8:	e7af      	b.n	800c04a <_malloc_r+0x22>
 800c0ea:	6862      	ldr	r2, [r4, #4]
 800c0ec:	42a3      	cmp	r3, r4
 800c0ee:	bf0c      	ite	eq
 800c0f0:	f8c8 2000 	streq.w	r2, [r8]
 800c0f4:	605a      	strne	r2, [r3, #4]
 800c0f6:	e7eb      	b.n	800c0d0 <_malloc_r+0xa8>
 800c0f8:	4623      	mov	r3, r4
 800c0fa:	6864      	ldr	r4, [r4, #4]
 800c0fc:	e7ae      	b.n	800c05c <_malloc_r+0x34>
 800c0fe:	463c      	mov	r4, r7
 800c100:	687f      	ldr	r7, [r7, #4]
 800c102:	e7b6      	b.n	800c072 <_malloc_r+0x4a>
 800c104:	461a      	mov	r2, r3
 800c106:	685b      	ldr	r3, [r3, #4]
 800c108:	42a3      	cmp	r3, r4
 800c10a:	d1fb      	bne.n	800c104 <_malloc_r+0xdc>
 800c10c:	2300      	movs	r3, #0
 800c10e:	6053      	str	r3, [r2, #4]
 800c110:	e7de      	b.n	800c0d0 <_malloc_r+0xa8>
 800c112:	230c      	movs	r3, #12
 800c114:	6033      	str	r3, [r6, #0]
 800c116:	4630      	mov	r0, r6
 800c118:	f000 f80c 	bl	800c134 <__malloc_unlock>
 800c11c:	e794      	b.n	800c048 <_malloc_r+0x20>
 800c11e:	6005      	str	r5, [r0, #0]
 800c120:	e7d6      	b.n	800c0d0 <_malloc_r+0xa8>
 800c122:	bf00      	nop
 800c124:	200004a4 	.word	0x200004a4

0800c128 <__malloc_lock>:
 800c128:	4801      	ldr	r0, [pc, #4]	@ (800c130 <__malloc_lock+0x8>)
 800c12a:	f000 be58 	b.w	800cdde <__retarget_lock_acquire_recursive>
 800c12e:	bf00      	nop
 800c130:	200005e8 	.word	0x200005e8

0800c134 <__malloc_unlock>:
 800c134:	4801      	ldr	r0, [pc, #4]	@ (800c13c <__malloc_unlock+0x8>)
 800c136:	f000 be53 	b.w	800cde0 <__retarget_lock_release_recursive>
 800c13a:	bf00      	nop
 800c13c:	200005e8 	.word	0x200005e8

0800c140 <__cvt>:
 800c140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c144:	ec57 6b10 	vmov	r6, r7, d0
 800c148:	2f00      	cmp	r7, #0
 800c14a:	460c      	mov	r4, r1
 800c14c:	4619      	mov	r1, r3
 800c14e:	463b      	mov	r3, r7
 800c150:	bfbb      	ittet	lt
 800c152:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c156:	461f      	movlt	r7, r3
 800c158:	2300      	movge	r3, #0
 800c15a:	232d      	movlt	r3, #45	@ 0x2d
 800c15c:	700b      	strb	r3, [r1, #0]
 800c15e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c160:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c164:	4691      	mov	r9, r2
 800c166:	f023 0820 	bic.w	r8, r3, #32
 800c16a:	bfbc      	itt	lt
 800c16c:	4632      	movlt	r2, r6
 800c16e:	4616      	movlt	r6, r2
 800c170:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c174:	d005      	beq.n	800c182 <__cvt+0x42>
 800c176:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c17a:	d100      	bne.n	800c17e <__cvt+0x3e>
 800c17c:	3401      	adds	r4, #1
 800c17e:	2102      	movs	r1, #2
 800c180:	e000      	b.n	800c184 <__cvt+0x44>
 800c182:	2103      	movs	r1, #3
 800c184:	ab03      	add	r3, sp, #12
 800c186:	9301      	str	r3, [sp, #4]
 800c188:	ab02      	add	r3, sp, #8
 800c18a:	9300      	str	r3, [sp, #0]
 800c18c:	ec47 6b10 	vmov	d0, r6, r7
 800c190:	4653      	mov	r3, sl
 800c192:	4622      	mov	r2, r4
 800c194:	f000 feb8 	bl	800cf08 <_dtoa_r>
 800c198:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c19c:	4605      	mov	r5, r0
 800c19e:	d119      	bne.n	800c1d4 <__cvt+0x94>
 800c1a0:	f019 0f01 	tst.w	r9, #1
 800c1a4:	d00e      	beq.n	800c1c4 <__cvt+0x84>
 800c1a6:	eb00 0904 	add.w	r9, r0, r4
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	4630      	mov	r0, r6
 800c1b0:	4639      	mov	r1, r7
 800c1b2:	f7f4 fc91 	bl	8000ad8 <__aeabi_dcmpeq>
 800c1b6:	b108      	cbz	r0, 800c1bc <__cvt+0x7c>
 800c1b8:	f8cd 900c 	str.w	r9, [sp, #12]
 800c1bc:	2230      	movs	r2, #48	@ 0x30
 800c1be:	9b03      	ldr	r3, [sp, #12]
 800c1c0:	454b      	cmp	r3, r9
 800c1c2:	d31e      	bcc.n	800c202 <__cvt+0xc2>
 800c1c4:	9b03      	ldr	r3, [sp, #12]
 800c1c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c1c8:	1b5b      	subs	r3, r3, r5
 800c1ca:	4628      	mov	r0, r5
 800c1cc:	6013      	str	r3, [r2, #0]
 800c1ce:	b004      	add	sp, #16
 800c1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c1d8:	eb00 0904 	add.w	r9, r0, r4
 800c1dc:	d1e5      	bne.n	800c1aa <__cvt+0x6a>
 800c1de:	7803      	ldrb	r3, [r0, #0]
 800c1e0:	2b30      	cmp	r3, #48	@ 0x30
 800c1e2:	d10a      	bne.n	800c1fa <__cvt+0xba>
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	4630      	mov	r0, r6
 800c1ea:	4639      	mov	r1, r7
 800c1ec:	f7f4 fc74 	bl	8000ad8 <__aeabi_dcmpeq>
 800c1f0:	b918      	cbnz	r0, 800c1fa <__cvt+0xba>
 800c1f2:	f1c4 0401 	rsb	r4, r4, #1
 800c1f6:	f8ca 4000 	str.w	r4, [sl]
 800c1fa:	f8da 3000 	ldr.w	r3, [sl]
 800c1fe:	4499      	add	r9, r3
 800c200:	e7d3      	b.n	800c1aa <__cvt+0x6a>
 800c202:	1c59      	adds	r1, r3, #1
 800c204:	9103      	str	r1, [sp, #12]
 800c206:	701a      	strb	r2, [r3, #0]
 800c208:	e7d9      	b.n	800c1be <__cvt+0x7e>

0800c20a <__exponent>:
 800c20a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c20c:	2900      	cmp	r1, #0
 800c20e:	bfba      	itte	lt
 800c210:	4249      	neglt	r1, r1
 800c212:	232d      	movlt	r3, #45	@ 0x2d
 800c214:	232b      	movge	r3, #43	@ 0x2b
 800c216:	2909      	cmp	r1, #9
 800c218:	7002      	strb	r2, [r0, #0]
 800c21a:	7043      	strb	r3, [r0, #1]
 800c21c:	dd29      	ble.n	800c272 <__exponent+0x68>
 800c21e:	f10d 0307 	add.w	r3, sp, #7
 800c222:	461d      	mov	r5, r3
 800c224:	270a      	movs	r7, #10
 800c226:	461a      	mov	r2, r3
 800c228:	fbb1 f6f7 	udiv	r6, r1, r7
 800c22c:	fb07 1416 	mls	r4, r7, r6, r1
 800c230:	3430      	adds	r4, #48	@ 0x30
 800c232:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c236:	460c      	mov	r4, r1
 800c238:	2c63      	cmp	r4, #99	@ 0x63
 800c23a:	f103 33ff 	add.w	r3, r3, #4294967295
 800c23e:	4631      	mov	r1, r6
 800c240:	dcf1      	bgt.n	800c226 <__exponent+0x1c>
 800c242:	3130      	adds	r1, #48	@ 0x30
 800c244:	1e94      	subs	r4, r2, #2
 800c246:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c24a:	1c41      	adds	r1, r0, #1
 800c24c:	4623      	mov	r3, r4
 800c24e:	42ab      	cmp	r3, r5
 800c250:	d30a      	bcc.n	800c268 <__exponent+0x5e>
 800c252:	f10d 0309 	add.w	r3, sp, #9
 800c256:	1a9b      	subs	r3, r3, r2
 800c258:	42ac      	cmp	r4, r5
 800c25a:	bf88      	it	hi
 800c25c:	2300      	movhi	r3, #0
 800c25e:	3302      	adds	r3, #2
 800c260:	4403      	add	r3, r0
 800c262:	1a18      	subs	r0, r3, r0
 800c264:	b003      	add	sp, #12
 800c266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c268:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c26c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c270:	e7ed      	b.n	800c24e <__exponent+0x44>
 800c272:	2330      	movs	r3, #48	@ 0x30
 800c274:	3130      	adds	r1, #48	@ 0x30
 800c276:	7083      	strb	r3, [r0, #2]
 800c278:	70c1      	strb	r1, [r0, #3]
 800c27a:	1d03      	adds	r3, r0, #4
 800c27c:	e7f1      	b.n	800c262 <__exponent+0x58>
	...

0800c280 <_printf_float>:
 800c280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c284:	b08d      	sub	sp, #52	@ 0x34
 800c286:	460c      	mov	r4, r1
 800c288:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c28c:	4616      	mov	r6, r2
 800c28e:	461f      	mov	r7, r3
 800c290:	4605      	mov	r5, r0
 800c292:	f000 fd0b 	bl	800ccac <_localeconv_r>
 800c296:	6803      	ldr	r3, [r0, #0]
 800c298:	9304      	str	r3, [sp, #16]
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7f3 fff0 	bl	8000280 <strlen>
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2a4:	f8d8 3000 	ldr.w	r3, [r8]
 800c2a8:	9005      	str	r0, [sp, #20]
 800c2aa:	3307      	adds	r3, #7
 800c2ac:	f023 0307 	bic.w	r3, r3, #7
 800c2b0:	f103 0208 	add.w	r2, r3, #8
 800c2b4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c2b8:	f8d4 b000 	ldr.w	fp, [r4]
 800c2bc:	f8c8 2000 	str.w	r2, [r8]
 800c2c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c2c4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c2c8:	9307      	str	r3, [sp, #28]
 800c2ca:	f8cd 8018 	str.w	r8, [sp, #24]
 800c2ce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c2d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c2d6:	4b9c      	ldr	r3, [pc, #624]	@ (800c548 <_printf_float+0x2c8>)
 800c2d8:	f04f 32ff 	mov.w	r2, #4294967295
 800c2dc:	f7f4 fc2e 	bl	8000b3c <__aeabi_dcmpun>
 800c2e0:	bb70      	cbnz	r0, 800c340 <_printf_float+0xc0>
 800c2e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c2e6:	4b98      	ldr	r3, [pc, #608]	@ (800c548 <_printf_float+0x2c8>)
 800c2e8:	f04f 32ff 	mov.w	r2, #4294967295
 800c2ec:	f7f4 fc08 	bl	8000b00 <__aeabi_dcmple>
 800c2f0:	bb30      	cbnz	r0, 800c340 <_printf_float+0xc0>
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	4640      	mov	r0, r8
 800c2f8:	4649      	mov	r1, r9
 800c2fa:	f7f4 fbf7 	bl	8000aec <__aeabi_dcmplt>
 800c2fe:	b110      	cbz	r0, 800c306 <_printf_float+0x86>
 800c300:	232d      	movs	r3, #45	@ 0x2d
 800c302:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c306:	4a91      	ldr	r2, [pc, #580]	@ (800c54c <_printf_float+0x2cc>)
 800c308:	4b91      	ldr	r3, [pc, #580]	@ (800c550 <_printf_float+0x2d0>)
 800c30a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c30e:	bf94      	ite	ls
 800c310:	4690      	movls	r8, r2
 800c312:	4698      	movhi	r8, r3
 800c314:	2303      	movs	r3, #3
 800c316:	6123      	str	r3, [r4, #16]
 800c318:	f02b 0304 	bic.w	r3, fp, #4
 800c31c:	6023      	str	r3, [r4, #0]
 800c31e:	f04f 0900 	mov.w	r9, #0
 800c322:	9700      	str	r7, [sp, #0]
 800c324:	4633      	mov	r3, r6
 800c326:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c328:	4621      	mov	r1, r4
 800c32a:	4628      	mov	r0, r5
 800c32c:	f000 f9d2 	bl	800c6d4 <_printf_common>
 800c330:	3001      	adds	r0, #1
 800c332:	f040 808d 	bne.w	800c450 <_printf_float+0x1d0>
 800c336:	f04f 30ff 	mov.w	r0, #4294967295
 800c33a:	b00d      	add	sp, #52	@ 0x34
 800c33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c340:	4642      	mov	r2, r8
 800c342:	464b      	mov	r3, r9
 800c344:	4640      	mov	r0, r8
 800c346:	4649      	mov	r1, r9
 800c348:	f7f4 fbf8 	bl	8000b3c <__aeabi_dcmpun>
 800c34c:	b140      	cbz	r0, 800c360 <_printf_float+0xe0>
 800c34e:	464b      	mov	r3, r9
 800c350:	2b00      	cmp	r3, #0
 800c352:	bfbc      	itt	lt
 800c354:	232d      	movlt	r3, #45	@ 0x2d
 800c356:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c35a:	4a7e      	ldr	r2, [pc, #504]	@ (800c554 <_printf_float+0x2d4>)
 800c35c:	4b7e      	ldr	r3, [pc, #504]	@ (800c558 <_printf_float+0x2d8>)
 800c35e:	e7d4      	b.n	800c30a <_printf_float+0x8a>
 800c360:	6863      	ldr	r3, [r4, #4]
 800c362:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c366:	9206      	str	r2, [sp, #24]
 800c368:	1c5a      	adds	r2, r3, #1
 800c36a:	d13b      	bne.n	800c3e4 <_printf_float+0x164>
 800c36c:	2306      	movs	r3, #6
 800c36e:	6063      	str	r3, [r4, #4]
 800c370:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c374:	2300      	movs	r3, #0
 800c376:	6022      	str	r2, [r4, #0]
 800c378:	9303      	str	r3, [sp, #12]
 800c37a:	ab0a      	add	r3, sp, #40	@ 0x28
 800c37c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c380:	ab09      	add	r3, sp, #36	@ 0x24
 800c382:	9300      	str	r3, [sp, #0]
 800c384:	6861      	ldr	r1, [r4, #4]
 800c386:	ec49 8b10 	vmov	d0, r8, r9
 800c38a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c38e:	4628      	mov	r0, r5
 800c390:	f7ff fed6 	bl	800c140 <__cvt>
 800c394:	9b06      	ldr	r3, [sp, #24]
 800c396:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c398:	2b47      	cmp	r3, #71	@ 0x47
 800c39a:	4680      	mov	r8, r0
 800c39c:	d129      	bne.n	800c3f2 <_printf_float+0x172>
 800c39e:	1cc8      	adds	r0, r1, #3
 800c3a0:	db02      	blt.n	800c3a8 <_printf_float+0x128>
 800c3a2:	6863      	ldr	r3, [r4, #4]
 800c3a4:	4299      	cmp	r1, r3
 800c3a6:	dd41      	ble.n	800c42c <_printf_float+0x1ac>
 800c3a8:	f1aa 0a02 	sub.w	sl, sl, #2
 800c3ac:	fa5f fa8a 	uxtb.w	sl, sl
 800c3b0:	3901      	subs	r1, #1
 800c3b2:	4652      	mov	r2, sl
 800c3b4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c3b8:	9109      	str	r1, [sp, #36]	@ 0x24
 800c3ba:	f7ff ff26 	bl	800c20a <__exponent>
 800c3be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c3c0:	1813      	adds	r3, r2, r0
 800c3c2:	2a01      	cmp	r2, #1
 800c3c4:	4681      	mov	r9, r0
 800c3c6:	6123      	str	r3, [r4, #16]
 800c3c8:	dc02      	bgt.n	800c3d0 <_printf_float+0x150>
 800c3ca:	6822      	ldr	r2, [r4, #0]
 800c3cc:	07d2      	lsls	r2, r2, #31
 800c3ce:	d501      	bpl.n	800c3d4 <_printf_float+0x154>
 800c3d0:	3301      	adds	r3, #1
 800c3d2:	6123      	str	r3, [r4, #16]
 800c3d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d0a2      	beq.n	800c322 <_printf_float+0xa2>
 800c3dc:	232d      	movs	r3, #45	@ 0x2d
 800c3de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c3e2:	e79e      	b.n	800c322 <_printf_float+0xa2>
 800c3e4:	9a06      	ldr	r2, [sp, #24]
 800c3e6:	2a47      	cmp	r2, #71	@ 0x47
 800c3e8:	d1c2      	bne.n	800c370 <_printf_float+0xf0>
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d1c0      	bne.n	800c370 <_printf_float+0xf0>
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	e7bd      	b.n	800c36e <_printf_float+0xee>
 800c3f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c3f6:	d9db      	bls.n	800c3b0 <_printf_float+0x130>
 800c3f8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c3fc:	d118      	bne.n	800c430 <_printf_float+0x1b0>
 800c3fe:	2900      	cmp	r1, #0
 800c400:	6863      	ldr	r3, [r4, #4]
 800c402:	dd0b      	ble.n	800c41c <_printf_float+0x19c>
 800c404:	6121      	str	r1, [r4, #16]
 800c406:	b913      	cbnz	r3, 800c40e <_printf_float+0x18e>
 800c408:	6822      	ldr	r2, [r4, #0]
 800c40a:	07d0      	lsls	r0, r2, #31
 800c40c:	d502      	bpl.n	800c414 <_printf_float+0x194>
 800c40e:	3301      	adds	r3, #1
 800c410:	440b      	add	r3, r1
 800c412:	6123      	str	r3, [r4, #16]
 800c414:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c416:	f04f 0900 	mov.w	r9, #0
 800c41a:	e7db      	b.n	800c3d4 <_printf_float+0x154>
 800c41c:	b913      	cbnz	r3, 800c424 <_printf_float+0x1a4>
 800c41e:	6822      	ldr	r2, [r4, #0]
 800c420:	07d2      	lsls	r2, r2, #31
 800c422:	d501      	bpl.n	800c428 <_printf_float+0x1a8>
 800c424:	3302      	adds	r3, #2
 800c426:	e7f4      	b.n	800c412 <_printf_float+0x192>
 800c428:	2301      	movs	r3, #1
 800c42a:	e7f2      	b.n	800c412 <_printf_float+0x192>
 800c42c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c430:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c432:	4299      	cmp	r1, r3
 800c434:	db05      	blt.n	800c442 <_printf_float+0x1c2>
 800c436:	6823      	ldr	r3, [r4, #0]
 800c438:	6121      	str	r1, [r4, #16]
 800c43a:	07d8      	lsls	r0, r3, #31
 800c43c:	d5ea      	bpl.n	800c414 <_printf_float+0x194>
 800c43e:	1c4b      	adds	r3, r1, #1
 800c440:	e7e7      	b.n	800c412 <_printf_float+0x192>
 800c442:	2900      	cmp	r1, #0
 800c444:	bfd4      	ite	le
 800c446:	f1c1 0202 	rsble	r2, r1, #2
 800c44a:	2201      	movgt	r2, #1
 800c44c:	4413      	add	r3, r2
 800c44e:	e7e0      	b.n	800c412 <_printf_float+0x192>
 800c450:	6823      	ldr	r3, [r4, #0]
 800c452:	055a      	lsls	r2, r3, #21
 800c454:	d407      	bmi.n	800c466 <_printf_float+0x1e6>
 800c456:	6923      	ldr	r3, [r4, #16]
 800c458:	4642      	mov	r2, r8
 800c45a:	4631      	mov	r1, r6
 800c45c:	4628      	mov	r0, r5
 800c45e:	47b8      	blx	r7
 800c460:	3001      	adds	r0, #1
 800c462:	d12b      	bne.n	800c4bc <_printf_float+0x23c>
 800c464:	e767      	b.n	800c336 <_printf_float+0xb6>
 800c466:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c46a:	f240 80dd 	bls.w	800c628 <_printf_float+0x3a8>
 800c46e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c472:	2200      	movs	r2, #0
 800c474:	2300      	movs	r3, #0
 800c476:	f7f4 fb2f 	bl	8000ad8 <__aeabi_dcmpeq>
 800c47a:	2800      	cmp	r0, #0
 800c47c:	d033      	beq.n	800c4e6 <_printf_float+0x266>
 800c47e:	4a37      	ldr	r2, [pc, #220]	@ (800c55c <_printf_float+0x2dc>)
 800c480:	2301      	movs	r3, #1
 800c482:	4631      	mov	r1, r6
 800c484:	4628      	mov	r0, r5
 800c486:	47b8      	blx	r7
 800c488:	3001      	adds	r0, #1
 800c48a:	f43f af54 	beq.w	800c336 <_printf_float+0xb6>
 800c48e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c492:	4543      	cmp	r3, r8
 800c494:	db02      	blt.n	800c49c <_printf_float+0x21c>
 800c496:	6823      	ldr	r3, [r4, #0]
 800c498:	07d8      	lsls	r0, r3, #31
 800c49a:	d50f      	bpl.n	800c4bc <_printf_float+0x23c>
 800c49c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4a0:	4631      	mov	r1, r6
 800c4a2:	4628      	mov	r0, r5
 800c4a4:	47b8      	blx	r7
 800c4a6:	3001      	adds	r0, #1
 800c4a8:	f43f af45 	beq.w	800c336 <_printf_float+0xb6>
 800c4ac:	f04f 0900 	mov.w	r9, #0
 800c4b0:	f108 38ff 	add.w	r8, r8, #4294967295
 800c4b4:	f104 0a1a 	add.w	sl, r4, #26
 800c4b8:	45c8      	cmp	r8, r9
 800c4ba:	dc09      	bgt.n	800c4d0 <_printf_float+0x250>
 800c4bc:	6823      	ldr	r3, [r4, #0]
 800c4be:	079b      	lsls	r3, r3, #30
 800c4c0:	f100 8103 	bmi.w	800c6ca <_printf_float+0x44a>
 800c4c4:	68e0      	ldr	r0, [r4, #12]
 800c4c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c4c8:	4298      	cmp	r0, r3
 800c4ca:	bfb8      	it	lt
 800c4cc:	4618      	movlt	r0, r3
 800c4ce:	e734      	b.n	800c33a <_printf_float+0xba>
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	4652      	mov	r2, sl
 800c4d4:	4631      	mov	r1, r6
 800c4d6:	4628      	mov	r0, r5
 800c4d8:	47b8      	blx	r7
 800c4da:	3001      	adds	r0, #1
 800c4dc:	f43f af2b 	beq.w	800c336 <_printf_float+0xb6>
 800c4e0:	f109 0901 	add.w	r9, r9, #1
 800c4e4:	e7e8      	b.n	800c4b8 <_printf_float+0x238>
 800c4e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	dc39      	bgt.n	800c560 <_printf_float+0x2e0>
 800c4ec:	4a1b      	ldr	r2, [pc, #108]	@ (800c55c <_printf_float+0x2dc>)
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	4631      	mov	r1, r6
 800c4f2:	4628      	mov	r0, r5
 800c4f4:	47b8      	blx	r7
 800c4f6:	3001      	adds	r0, #1
 800c4f8:	f43f af1d 	beq.w	800c336 <_printf_float+0xb6>
 800c4fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c500:	ea59 0303 	orrs.w	r3, r9, r3
 800c504:	d102      	bne.n	800c50c <_printf_float+0x28c>
 800c506:	6823      	ldr	r3, [r4, #0]
 800c508:	07d9      	lsls	r1, r3, #31
 800c50a:	d5d7      	bpl.n	800c4bc <_printf_float+0x23c>
 800c50c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c510:	4631      	mov	r1, r6
 800c512:	4628      	mov	r0, r5
 800c514:	47b8      	blx	r7
 800c516:	3001      	adds	r0, #1
 800c518:	f43f af0d 	beq.w	800c336 <_printf_float+0xb6>
 800c51c:	f04f 0a00 	mov.w	sl, #0
 800c520:	f104 0b1a 	add.w	fp, r4, #26
 800c524:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c526:	425b      	negs	r3, r3
 800c528:	4553      	cmp	r3, sl
 800c52a:	dc01      	bgt.n	800c530 <_printf_float+0x2b0>
 800c52c:	464b      	mov	r3, r9
 800c52e:	e793      	b.n	800c458 <_printf_float+0x1d8>
 800c530:	2301      	movs	r3, #1
 800c532:	465a      	mov	r2, fp
 800c534:	4631      	mov	r1, r6
 800c536:	4628      	mov	r0, r5
 800c538:	47b8      	blx	r7
 800c53a:	3001      	adds	r0, #1
 800c53c:	f43f aefb 	beq.w	800c336 <_printf_float+0xb6>
 800c540:	f10a 0a01 	add.w	sl, sl, #1
 800c544:	e7ee      	b.n	800c524 <_printf_float+0x2a4>
 800c546:	bf00      	nop
 800c548:	7fefffff 	.word	0x7fefffff
 800c54c:	0800f81c 	.word	0x0800f81c
 800c550:	0800f820 	.word	0x0800f820
 800c554:	0800f824 	.word	0x0800f824
 800c558:	0800f828 	.word	0x0800f828
 800c55c:	0800f82c 	.word	0x0800f82c
 800c560:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c562:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c566:	4553      	cmp	r3, sl
 800c568:	bfa8      	it	ge
 800c56a:	4653      	movge	r3, sl
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	4699      	mov	r9, r3
 800c570:	dc36      	bgt.n	800c5e0 <_printf_float+0x360>
 800c572:	f04f 0b00 	mov.w	fp, #0
 800c576:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c57a:	f104 021a 	add.w	r2, r4, #26
 800c57e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c580:	9306      	str	r3, [sp, #24]
 800c582:	eba3 0309 	sub.w	r3, r3, r9
 800c586:	455b      	cmp	r3, fp
 800c588:	dc31      	bgt.n	800c5ee <_printf_float+0x36e>
 800c58a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c58c:	459a      	cmp	sl, r3
 800c58e:	dc3a      	bgt.n	800c606 <_printf_float+0x386>
 800c590:	6823      	ldr	r3, [r4, #0]
 800c592:	07da      	lsls	r2, r3, #31
 800c594:	d437      	bmi.n	800c606 <_printf_float+0x386>
 800c596:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c598:	ebaa 0903 	sub.w	r9, sl, r3
 800c59c:	9b06      	ldr	r3, [sp, #24]
 800c59e:	ebaa 0303 	sub.w	r3, sl, r3
 800c5a2:	4599      	cmp	r9, r3
 800c5a4:	bfa8      	it	ge
 800c5a6:	4699      	movge	r9, r3
 800c5a8:	f1b9 0f00 	cmp.w	r9, #0
 800c5ac:	dc33      	bgt.n	800c616 <_printf_float+0x396>
 800c5ae:	f04f 0800 	mov.w	r8, #0
 800c5b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c5b6:	f104 0b1a 	add.w	fp, r4, #26
 800c5ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5bc:	ebaa 0303 	sub.w	r3, sl, r3
 800c5c0:	eba3 0309 	sub.w	r3, r3, r9
 800c5c4:	4543      	cmp	r3, r8
 800c5c6:	f77f af79 	ble.w	800c4bc <_printf_float+0x23c>
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	465a      	mov	r2, fp
 800c5ce:	4631      	mov	r1, r6
 800c5d0:	4628      	mov	r0, r5
 800c5d2:	47b8      	blx	r7
 800c5d4:	3001      	adds	r0, #1
 800c5d6:	f43f aeae 	beq.w	800c336 <_printf_float+0xb6>
 800c5da:	f108 0801 	add.w	r8, r8, #1
 800c5de:	e7ec      	b.n	800c5ba <_printf_float+0x33a>
 800c5e0:	4642      	mov	r2, r8
 800c5e2:	4631      	mov	r1, r6
 800c5e4:	4628      	mov	r0, r5
 800c5e6:	47b8      	blx	r7
 800c5e8:	3001      	adds	r0, #1
 800c5ea:	d1c2      	bne.n	800c572 <_printf_float+0x2f2>
 800c5ec:	e6a3      	b.n	800c336 <_printf_float+0xb6>
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	4631      	mov	r1, r6
 800c5f2:	4628      	mov	r0, r5
 800c5f4:	9206      	str	r2, [sp, #24]
 800c5f6:	47b8      	blx	r7
 800c5f8:	3001      	adds	r0, #1
 800c5fa:	f43f ae9c 	beq.w	800c336 <_printf_float+0xb6>
 800c5fe:	9a06      	ldr	r2, [sp, #24]
 800c600:	f10b 0b01 	add.w	fp, fp, #1
 800c604:	e7bb      	b.n	800c57e <_printf_float+0x2fe>
 800c606:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c60a:	4631      	mov	r1, r6
 800c60c:	4628      	mov	r0, r5
 800c60e:	47b8      	blx	r7
 800c610:	3001      	adds	r0, #1
 800c612:	d1c0      	bne.n	800c596 <_printf_float+0x316>
 800c614:	e68f      	b.n	800c336 <_printf_float+0xb6>
 800c616:	9a06      	ldr	r2, [sp, #24]
 800c618:	464b      	mov	r3, r9
 800c61a:	4442      	add	r2, r8
 800c61c:	4631      	mov	r1, r6
 800c61e:	4628      	mov	r0, r5
 800c620:	47b8      	blx	r7
 800c622:	3001      	adds	r0, #1
 800c624:	d1c3      	bne.n	800c5ae <_printf_float+0x32e>
 800c626:	e686      	b.n	800c336 <_printf_float+0xb6>
 800c628:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c62c:	f1ba 0f01 	cmp.w	sl, #1
 800c630:	dc01      	bgt.n	800c636 <_printf_float+0x3b6>
 800c632:	07db      	lsls	r3, r3, #31
 800c634:	d536      	bpl.n	800c6a4 <_printf_float+0x424>
 800c636:	2301      	movs	r3, #1
 800c638:	4642      	mov	r2, r8
 800c63a:	4631      	mov	r1, r6
 800c63c:	4628      	mov	r0, r5
 800c63e:	47b8      	blx	r7
 800c640:	3001      	adds	r0, #1
 800c642:	f43f ae78 	beq.w	800c336 <_printf_float+0xb6>
 800c646:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c64a:	4631      	mov	r1, r6
 800c64c:	4628      	mov	r0, r5
 800c64e:	47b8      	blx	r7
 800c650:	3001      	adds	r0, #1
 800c652:	f43f ae70 	beq.w	800c336 <_printf_float+0xb6>
 800c656:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c65a:	2200      	movs	r2, #0
 800c65c:	2300      	movs	r3, #0
 800c65e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c662:	f7f4 fa39 	bl	8000ad8 <__aeabi_dcmpeq>
 800c666:	b9c0      	cbnz	r0, 800c69a <_printf_float+0x41a>
 800c668:	4653      	mov	r3, sl
 800c66a:	f108 0201 	add.w	r2, r8, #1
 800c66e:	4631      	mov	r1, r6
 800c670:	4628      	mov	r0, r5
 800c672:	47b8      	blx	r7
 800c674:	3001      	adds	r0, #1
 800c676:	d10c      	bne.n	800c692 <_printf_float+0x412>
 800c678:	e65d      	b.n	800c336 <_printf_float+0xb6>
 800c67a:	2301      	movs	r3, #1
 800c67c:	465a      	mov	r2, fp
 800c67e:	4631      	mov	r1, r6
 800c680:	4628      	mov	r0, r5
 800c682:	47b8      	blx	r7
 800c684:	3001      	adds	r0, #1
 800c686:	f43f ae56 	beq.w	800c336 <_printf_float+0xb6>
 800c68a:	f108 0801 	add.w	r8, r8, #1
 800c68e:	45d0      	cmp	r8, sl
 800c690:	dbf3      	blt.n	800c67a <_printf_float+0x3fa>
 800c692:	464b      	mov	r3, r9
 800c694:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c698:	e6df      	b.n	800c45a <_printf_float+0x1da>
 800c69a:	f04f 0800 	mov.w	r8, #0
 800c69e:	f104 0b1a 	add.w	fp, r4, #26
 800c6a2:	e7f4      	b.n	800c68e <_printf_float+0x40e>
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	4642      	mov	r2, r8
 800c6a8:	e7e1      	b.n	800c66e <_printf_float+0x3ee>
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	464a      	mov	r2, r9
 800c6ae:	4631      	mov	r1, r6
 800c6b0:	4628      	mov	r0, r5
 800c6b2:	47b8      	blx	r7
 800c6b4:	3001      	adds	r0, #1
 800c6b6:	f43f ae3e 	beq.w	800c336 <_printf_float+0xb6>
 800c6ba:	f108 0801 	add.w	r8, r8, #1
 800c6be:	68e3      	ldr	r3, [r4, #12]
 800c6c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c6c2:	1a5b      	subs	r3, r3, r1
 800c6c4:	4543      	cmp	r3, r8
 800c6c6:	dcf0      	bgt.n	800c6aa <_printf_float+0x42a>
 800c6c8:	e6fc      	b.n	800c4c4 <_printf_float+0x244>
 800c6ca:	f04f 0800 	mov.w	r8, #0
 800c6ce:	f104 0919 	add.w	r9, r4, #25
 800c6d2:	e7f4      	b.n	800c6be <_printf_float+0x43e>

0800c6d4 <_printf_common>:
 800c6d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6d8:	4616      	mov	r6, r2
 800c6da:	4698      	mov	r8, r3
 800c6dc:	688a      	ldr	r2, [r1, #8]
 800c6de:	690b      	ldr	r3, [r1, #16]
 800c6e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	bfb8      	it	lt
 800c6e8:	4613      	movlt	r3, r2
 800c6ea:	6033      	str	r3, [r6, #0]
 800c6ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c6f0:	4607      	mov	r7, r0
 800c6f2:	460c      	mov	r4, r1
 800c6f4:	b10a      	cbz	r2, 800c6fa <_printf_common+0x26>
 800c6f6:	3301      	adds	r3, #1
 800c6f8:	6033      	str	r3, [r6, #0]
 800c6fa:	6823      	ldr	r3, [r4, #0]
 800c6fc:	0699      	lsls	r1, r3, #26
 800c6fe:	bf42      	ittt	mi
 800c700:	6833      	ldrmi	r3, [r6, #0]
 800c702:	3302      	addmi	r3, #2
 800c704:	6033      	strmi	r3, [r6, #0]
 800c706:	6825      	ldr	r5, [r4, #0]
 800c708:	f015 0506 	ands.w	r5, r5, #6
 800c70c:	d106      	bne.n	800c71c <_printf_common+0x48>
 800c70e:	f104 0a19 	add.w	sl, r4, #25
 800c712:	68e3      	ldr	r3, [r4, #12]
 800c714:	6832      	ldr	r2, [r6, #0]
 800c716:	1a9b      	subs	r3, r3, r2
 800c718:	42ab      	cmp	r3, r5
 800c71a:	dc26      	bgt.n	800c76a <_printf_common+0x96>
 800c71c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c720:	6822      	ldr	r2, [r4, #0]
 800c722:	3b00      	subs	r3, #0
 800c724:	bf18      	it	ne
 800c726:	2301      	movne	r3, #1
 800c728:	0692      	lsls	r2, r2, #26
 800c72a:	d42b      	bmi.n	800c784 <_printf_common+0xb0>
 800c72c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c730:	4641      	mov	r1, r8
 800c732:	4638      	mov	r0, r7
 800c734:	47c8      	blx	r9
 800c736:	3001      	adds	r0, #1
 800c738:	d01e      	beq.n	800c778 <_printf_common+0xa4>
 800c73a:	6823      	ldr	r3, [r4, #0]
 800c73c:	6922      	ldr	r2, [r4, #16]
 800c73e:	f003 0306 	and.w	r3, r3, #6
 800c742:	2b04      	cmp	r3, #4
 800c744:	bf02      	ittt	eq
 800c746:	68e5      	ldreq	r5, [r4, #12]
 800c748:	6833      	ldreq	r3, [r6, #0]
 800c74a:	1aed      	subeq	r5, r5, r3
 800c74c:	68a3      	ldr	r3, [r4, #8]
 800c74e:	bf0c      	ite	eq
 800c750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c754:	2500      	movne	r5, #0
 800c756:	4293      	cmp	r3, r2
 800c758:	bfc4      	itt	gt
 800c75a:	1a9b      	subgt	r3, r3, r2
 800c75c:	18ed      	addgt	r5, r5, r3
 800c75e:	2600      	movs	r6, #0
 800c760:	341a      	adds	r4, #26
 800c762:	42b5      	cmp	r5, r6
 800c764:	d11a      	bne.n	800c79c <_printf_common+0xc8>
 800c766:	2000      	movs	r0, #0
 800c768:	e008      	b.n	800c77c <_printf_common+0xa8>
 800c76a:	2301      	movs	r3, #1
 800c76c:	4652      	mov	r2, sl
 800c76e:	4641      	mov	r1, r8
 800c770:	4638      	mov	r0, r7
 800c772:	47c8      	blx	r9
 800c774:	3001      	adds	r0, #1
 800c776:	d103      	bne.n	800c780 <_printf_common+0xac>
 800c778:	f04f 30ff 	mov.w	r0, #4294967295
 800c77c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c780:	3501      	adds	r5, #1
 800c782:	e7c6      	b.n	800c712 <_printf_common+0x3e>
 800c784:	18e1      	adds	r1, r4, r3
 800c786:	1c5a      	adds	r2, r3, #1
 800c788:	2030      	movs	r0, #48	@ 0x30
 800c78a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c78e:	4422      	add	r2, r4
 800c790:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c794:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c798:	3302      	adds	r3, #2
 800c79a:	e7c7      	b.n	800c72c <_printf_common+0x58>
 800c79c:	2301      	movs	r3, #1
 800c79e:	4622      	mov	r2, r4
 800c7a0:	4641      	mov	r1, r8
 800c7a2:	4638      	mov	r0, r7
 800c7a4:	47c8      	blx	r9
 800c7a6:	3001      	adds	r0, #1
 800c7a8:	d0e6      	beq.n	800c778 <_printf_common+0xa4>
 800c7aa:	3601      	adds	r6, #1
 800c7ac:	e7d9      	b.n	800c762 <_printf_common+0x8e>
	...

0800c7b0 <_printf_i>:
 800c7b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c7b4:	7e0f      	ldrb	r7, [r1, #24]
 800c7b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c7b8:	2f78      	cmp	r7, #120	@ 0x78
 800c7ba:	4691      	mov	r9, r2
 800c7bc:	4680      	mov	r8, r0
 800c7be:	460c      	mov	r4, r1
 800c7c0:	469a      	mov	sl, r3
 800c7c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c7c6:	d807      	bhi.n	800c7d8 <_printf_i+0x28>
 800c7c8:	2f62      	cmp	r7, #98	@ 0x62
 800c7ca:	d80a      	bhi.n	800c7e2 <_printf_i+0x32>
 800c7cc:	2f00      	cmp	r7, #0
 800c7ce:	f000 80d2 	beq.w	800c976 <_printf_i+0x1c6>
 800c7d2:	2f58      	cmp	r7, #88	@ 0x58
 800c7d4:	f000 80b9 	beq.w	800c94a <_printf_i+0x19a>
 800c7d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c7dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c7e0:	e03a      	b.n	800c858 <_printf_i+0xa8>
 800c7e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c7e6:	2b15      	cmp	r3, #21
 800c7e8:	d8f6      	bhi.n	800c7d8 <_printf_i+0x28>
 800c7ea:	a101      	add	r1, pc, #4	@ (adr r1, 800c7f0 <_printf_i+0x40>)
 800c7ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c7f0:	0800c849 	.word	0x0800c849
 800c7f4:	0800c85d 	.word	0x0800c85d
 800c7f8:	0800c7d9 	.word	0x0800c7d9
 800c7fc:	0800c7d9 	.word	0x0800c7d9
 800c800:	0800c7d9 	.word	0x0800c7d9
 800c804:	0800c7d9 	.word	0x0800c7d9
 800c808:	0800c85d 	.word	0x0800c85d
 800c80c:	0800c7d9 	.word	0x0800c7d9
 800c810:	0800c7d9 	.word	0x0800c7d9
 800c814:	0800c7d9 	.word	0x0800c7d9
 800c818:	0800c7d9 	.word	0x0800c7d9
 800c81c:	0800c95d 	.word	0x0800c95d
 800c820:	0800c887 	.word	0x0800c887
 800c824:	0800c917 	.word	0x0800c917
 800c828:	0800c7d9 	.word	0x0800c7d9
 800c82c:	0800c7d9 	.word	0x0800c7d9
 800c830:	0800c97f 	.word	0x0800c97f
 800c834:	0800c7d9 	.word	0x0800c7d9
 800c838:	0800c887 	.word	0x0800c887
 800c83c:	0800c7d9 	.word	0x0800c7d9
 800c840:	0800c7d9 	.word	0x0800c7d9
 800c844:	0800c91f 	.word	0x0800c91f
 800c848:	6833      	ldr	r3, [r6, #0]
 800c84a:	1d1a      	adds	r2, r3, #4
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	6032      	str	r2, [r6, #0]
 800c850:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c854:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c858:	2301      	movs	r3, #1
 800c85a:	e09d      	b.n	800c998 <_printf_i+0x1e8>
 800c85c:	6833      	ldr	r3, [r6, #0]
 800c85e:	6820      	ldr	r0, [r4, #0]
 800c860:	1d19      	adds	r1, r3, #4
 800c862:	6031      	str	r1, [r6, #0]
 800c864:	0606      	lsls	r6, r0, #24
 800c866:	d501      	bpl.n	800c86c <_printf_i+0xbc>
 800c868:	681d      	ldr	r5, [r3, #0]
 800c86a:	e003      	b.n	800c874 <_printf_i+0xc4>
 800c86c:	0645      	lsls	r5, r0, #25
 800c86e:	d5fb      	bpl.n	800c868 <_printf_i+0xb8>
 800c870:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c874:	2d00      	cmp	r5, #0
 800c876:	da03      	bge.n	800c880 <_printf_i+0xd0>
 800c878:	232d      	movs	r3, #45	@ 0x2d
 800c87a:	426d      	negs	r5, r5
 800c87c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c880:	4859      	ldr	r0, [pc, #356]	@ (800c9e8 <_printf_i+0x238>)
 800c882:	230a      	movs	r3, #10
 800c884:	e011      	b.n	800c8aa <_printf_i+0xfa>
 800c886:	6821      	ldr	r1, [r4, #0]
 800c888:	6833      	ldr	r3, [r6, #0]
 800c88a:	0608      	lsls	r0, r1, #24
 800c88c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c890:	d402      	bmi.n	800c898 <_printf_i+0xe8>
 800c892:	0649      	lsls	r1, r1, #25
 800c894:	bf48      	it	mi
 800c896:	b2ad      	uxthmi	r5, r5
 800c898:	2f6f      	cmp	r7, #111	@ 0x6f
 800c89a:	4853      	ldr	r0, [pc, #332]	@ (800c9e8 <_printf_i+0x238>)
 800c89c:	6033      	str	r3, [r6, #0]
 800c89e:	bf14      	ite	ne
 800c8a0:	230a      	movne	r3, #10
 800c8a2:	2308      	moveq	r3, #8
 800c8a4:	2100      	movs	r1, #0
 800c8a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c8aa:	6866      	ldr	r6, [r4, #4]
 800c8ac:	60a6      	str	r6, [r4, #8]
 800c8ae:	2e00      	cmp	r6, #0
 800c8b0:	bfa2      	ittt	ge
 800c8b2:	6821      	ldrge	r1, [r4, #0]
 800c8b4:	f021 0104 	bicge.w	r1, r1, #4
 800c8b8:	6021      	strge	r1, [r4, #0]
 800c8ba:	b90d      	cbnz	r5, 800c8c0 <_printf_i+0x110>
 800c8bc:	2e00      	cmp	r6, #0
 800c8be:	d04b      	beq.n	800c958 <_printf_i+0x1a8>
 800c8c0:	4616      	mov	r6, r2
 800c8c2:	fbb5 f1f3 	udiv	r1, r5, r3
 800c8c6:	fb03 5711 	mls	r7, r3, r1, r5
 800c8ca:	5dc7      	ldrb	r7, [r0, r7]
 800c8cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c8d0:	462f      	mov	r7, r5
 800c8d2:	42bb      	cmp	r3, r7
 800c8d4:	460d      	mov	r5, r1
 800c8d6:	d9f4      	bls.n	800c8c2 <_printf_i+0x112>
 800c8d8:	2b08      	cmp	r3, #8
 800c8da:	d10b      	bne.n	800c8f4 <_printf_i+0x144>
 800c8dc:	6823      	ldr	r3, [r4, #0]
 800c8de:	07df      	lsls	r7, r3, #31
 800c8e0:	d508      	bpl.n	800c8f4 <_printf_i+0x144>
 800c8e2:	6923      	ldr	r3, [r4, #16]
 800c8e4:	6861      	ldr	r1, [r4, #4]
 800c8e6:	4299      	cmp	r1, r3
 800c8e8:	bfde      	ittt	le
 800c8ea:	2330      	movle	r3, #48	@ 0x30
 800c8ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c8f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c8f4:	1b92      	subs	r2, r2, r6
 800c8f6:	6122      	str	r2, [r4, #16]
 800c8f8:	f8cd a000 	str.w	sl, [sp]
 800c8fc:	464b      	mov	r3, r9
 800c8fe:	aa03      	add	r2, sp, #12
 800c900:	4621      	mov	r1, r4
 800c902:	4640      	mov	r0, r8
 800c904:	f7ff fee6 	bl	800c6d4 <_printf_common>
 800c908:	3001      	adds	r0, #1
 800c90a:	d14a      	bne.n	800c9a2 <_printf_i+0x1f2>
 800c90c:	f04f 30ff 	mov.w	r0, #4294967295
 800c910:	b004      	add	sp, #16
 800c912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c916:	6823      	ldr	r3, [r4, #0]
 800c918:	f043 0320 	orr.w	r3, r3, #32
 800c91c:	6023      	str	r3, [r4, #0]
 800c91e:	4833      	ldr	r0, [pc, #204]	@ (800c9ec <_printf_i+0x23c>)
 800c920:	2778      	movs	r7, #120	@ 0x78
 800c922:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c926:	6823      	ldr	r3, [r4, #0]
 800c928:	6831      	ldr	r1, [r6, #0]
 800c92a:	061f      	lsls	r7, r3, #24
 800c92c:	f851 5b04 	ldr.w	r5, [r1], #4
 800c930:	d402      	bmi.n	800c938 <_printf_i+0x188>
 800c932:	065f      	lsls	r7, r3, #25
 800c934:	bf48      	it	mi
 800c936:	b2ad      	uxthmi	r5, r5
 800c938:	6031      	str	r1, [r6, #0]
 800c93a:	07d9      	lsls	r1, r3, #31
 800c93c:	bf44      	itt	mi
 800c93e:	f043 0320 	orrmi.w	r3, r3, #32
 800c942:	6023      	strmi	r3, [r4, #0]
 800c944:	b11d      	cbz	r5, 800c94e <_printf_i+0x19e>
 800c946:	2310      	movs	r3, #16
 800c948:	e7ac      	b.n	800c8a4 <_printf_i+0xf4>
 800c94a:	4827      	ldr	r0, [pc, #156]	@ (800c9e8 <_printf_i+0x238>)
 800c94c:	e7e9      	b.n	800c922 <_printf_i+0x172>
 800c94e:	6823      	ldr	r3, [r4, #0]
 800c950:	f023 0320 	bic.w	r3, r3, #32
 800c954:	6023      	str	r3, [r4, #0]
 800c956:	e7f6      	b.n	800c946 <_printf_i+0x196>
 800c958:	4616      	mov	r6, r2
 800c95a:	e7bd      	b.n	800c8d8 <_printf_i+0x128>
 800c95c:	6833      	ldr	r3, [r6, #0]
 800c95e:	6825      	ldr	r5, [r4, #0]
 800c960:	6961      	ldr	r1, [r4, #20]
 800c962:	1d18      	adds	r0, r3, #4
 800c964:	6030      	str	r0, [r6, #0]
 800c966:	062e      	lsls	r6, r5, #24
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	d501      	bpl.n	800c970 <_printf_i+0x1c0>
 800c96c:	6019      	str	r1, [r3, #0]
 800c96e:	e002      	b.n	800c976 <_printf_i+0x1c6>
 800c970:	0668      	lsls	r0, r5, #25
 800c972:	d5fb      	bpl.n	800c96c <_printf_i+0x1bc>
 800c974:	8019      	strh	r1, [r3, #0]
 800c976:	2300      	movs	r3, #0
 800c978:	6123      	str	r3, [r4, #16]
 800c97a:	4616      	mov	r6, r2
 800c97c:	e7bc      	b.n	800c8f8 <_printf_i+0x148>
 800c97e:	6833      	ldr	r3, [r6, #0]
 800c980:	1d1a      	adds	r2, r3, #4
 800c982:	6032      	str	r2, [r6, #0]
 800c984:	681e      	ldr	r6, [r3, #0]
 800c986:	6862      	ldr	r2, [r4, #4]
 800c988:	2100      	movs	r1, #0
 800c98a:	4630      	mov	r0, r6
 800c98c:	f7f3 fc28 	bl	80001e0 <memchr>
 800c990:	b108      	cbz	r0, 800c996 <_printf_i+0x1e6>
 800c992:	1b80      	subs	r0, r0, r6
 800c994:	6060      	str	r0, [r4, #4]
 800c996:	6863      	ldr	r3, [r4, #4]
 800c998:	6123      	str	r3, [r4, #16]
 800c99a:	2300      	movs	r3, #0
 800c99c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c9a0:	e7aa      	b.n	800c8f8 <_printf_i+0x148>
 800c9a2:	6923      	ldr	r3, [r4, #16]
 800c9a4:	4632      	mov	r2, r6
 800c9a6:	4649      	mov	r1, r9
 800c9a8:	4640      	mov	r0, r8
 800c9aa:	47d0      	blx	sl
 800c9ac:	3001      	adds	r0, #1
 800c9ae:	d0ad      	beq.n	800c90c <_printf_i+0x15c>
 800c9b0:	6823      	ldr	r3, [r4, #0]
 800c9b2:	079b      	lsls	r3, r3, #30
 800c9b4:	d413      	bmi.n	800c9de <_printf_i+0x22e>
 800c9b6:	68e0      	ldr	r0, [r4, #12]
 800c9b8:	9b03      	ldr	r3, [sp, #12]
 800c9ba:	4298      	cmp	r0, r3
 800c9bc:	bfb8      	it	lt
 800c9be:	4618      	movlt	r0, r3
 800c9c0:	e7a6      	b.n	800c910 <_printf_i+0x160>
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	4632      	mov	r2, r6
 800c9c6:	4649      	mov	r1, r9
 800c9c8:	4640      	mov	r0, r8
 800c9ca:	47d0      	blx	sl
 800c9cc:	3001      	adds	r0, #1
 800c9ce:	d09d      	beq.n	800c90c <_printf_i+0x15c>
 800c9d0:	3501      	adds	r5, #1
 800c9d2:	68e3      	ldr	r3, [r4, #12]
 800c9d4:	9903      	ldr	r1, [sp, #12]
 800c9d6:	1a5b      	subs	r3, r3, r1
 800c9d8:	42ab      	cmp	r3, r5
 800c9da:	dcf2      	bgt.n	800c9c2 <_printf_i+0x212>
 800c9dc:	e7eb      	b.n	800c9b6 <_printf_i+0x206>
 800c9de:	2500      	movs	r5, #0
 800c9e0:	f104 0619 	add.w	r6, r4, #25
 800c9e4:	e7f5      	b.n	800c9d2 <_printf_i+0x222>
 800c9e6:	bf00      	nop
 800c9e8:	0800f82e 	.word	0x0800f82e
 800c9ec:	0800f83f 	.word	0x0800f83f

0800c9f0 <std>:
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	b510      	push	{r4, lr}
 800c9f4:	4604      	mov	r4, r0
 800c9f6:	e9c0 3300 	strd	r3, r3, [r0]
 800c9fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c9fe:	6083      	str	r3, [r0, #8]
 800ca00:	8181      	strh	r1, [r0, #12]
 800ca02:	6643      	str	r3, [r0, #100]	@ 0x64
 800ca04:	81c2      	strh	r2, [r0, #14]
 800ca06:	6183      	str	r3, [r0, #24]
 800ca08:	4619      	mov	r1, r3
 800ca0a:	2208      	movs	r2, #8
 800ca0c:	305c      	adds	r0, #92	@ 0x5c
 800ca0e:	f000 f914 	bl	800cc3a <memset>
 800ca12:	4b0d      	ldr	r3, [pc, #52]	@ (800ca48 <std+0x58>)
 800ca14:	6263      	str	r3, [r4, #36]	@ 0x24
 800ca16:	4b0d      	ldr	r3, [pc, #52]	@ (800ca4c <std+0x5c>)
 800ca18:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ca1a:	4b0d      	ldr	r3, [pc, #52]	@ (800ca50 <std+0x60>)
 800ca1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ca1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ca54 <std+0x64>)
 800ca20:	6323      	str	r3, [r4, #48]	@ 0x30
 800ca22:	4b0d      	ldr	r3, [pc, #52]	@ (800ca58 <std+0x68>)
 800ca24:	6224      	str	r4, [r4, #32]
 800ca26:	429c      	cmp	r4, r3
 800ca28:	d006      	beq.n	800ca38 <std+0x48>
 800ca2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ca2e:	4294      	cmp	r4, r2
 800ca30:	d002      	beq.n	800ca38 <std+0x48>
 800ca32:	33d0      	adds	r3, #208	@ 0xd0
 800ca34:	429c      	cmp	r4, r3
 800ca36:	d105      	bne.n	800ca44 <std+0x54>
 800ca38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ca3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca40:	f000 b9cc 	b.w	800cddc <__retarget_lock_init_recursive>
 800ca44:	bd10      	pop	{r4, pc}
 800ca46:	bf00      	nop
 800ca48:	0800cbb5 	.word	0x0800cbb5
 800ca4c:	0800cbd7 	.word	0x0800cbd7
 800ca50:	0800cc0f 	.word	0x0800cc0f
 800ca54:	0800cc33 	.word	0x0800cc33
 800ca58:	200004a8 	.word	0x200004a8

0800ca5c <stdio_exit_handler>:
 800ca5c:	4a02      	ldr	r2, [pc, #8]	@ (800ca68 <stdio_exit_handler+0xc>)
 800ca5e:	4903      	ldr	r1, [pc, #12]	@ (800ca6c <stdio_exit_handler+0x10>)
 800ca60:	4803      	ldr	r0, [pc, #12]	@ (800ca70 <stdio_exit_handler+0x14>)
 800ca62:	f000 b869 	b.w	800cb38 <_fwalk_sglue>
 800ca66:	bf00      	nop
 800ca68:	20000010 	.word	0x20000010
 800ca6c:	0800e5e1 	.word	0x0800e5e1
 800ca70:	20000020 	.word	0x20000020

0800ca74 <cleanup_stdio>:
 800ca74:	6841      	ldr	r1, [r0, #4]
 800ca76:	4b0c      	ldr	r3, [pc, #48]	@ (800caa8 <cleanup_stdio+0x34>)
 800ca78:	4299      	cmp	r1, r3
 800ca7a:	b510      	push	{r4, lr}
 800ca7c:	4604      	mov	r4, r0
 800ca7e:	d001      	beq.n	800ca84 <cleanup_stdio+0x10>
 800ca80:	f001 fdae 	bl	800e5e0 <_fflush_r>
 800ca84:	68a1      	ldr	r1, [r4, #8]
 800ca86:	4b09      	ldr	r3, [pc, #36]	@ (800caac <cleanup_stdio+0x38>)
 800ca88:	4299      	cmp	r1, r3
 800ca8a:	d002      	beq.n	800ca92 <cleanup_stdio+0x1e>
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	f001 fda7 	bl	800e5e0 <_fflush_r>
 800ca92:	68e1      	ldr	r1, [r4, #12]
 800ca94:	4b06      	ldr	r3, [pc, #24]	@ (800cab0 <cleanup_stdio+0x3c>)
 800ca96:	4299      	cmp	r1, r3
 800ca98:	d004      	beq.n	800caa4 <cleanup_stdio+0x30>
 800ca9a:	4620      	mov	r0, r4
 800ca9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800caa0:	f001 bd9e 	b.w	800e5e0 <_fflush_r>
 800caa4:	bd10      	pop	{r4, pc}
 800caa6:	bf00      	nop
 800caa8:	200004a8 	.word	0x200004a8
 800caac:	20000510 	.word	0x20000510
 800cab0:	20000578 	.word	0x20000578

0800cab4 <global_stdio_init.part.0>:
 800cab4:	b510      	push	{r4, lr}
 800cab6:	4b0b      	ldr	r3, [pc, #44]	@ (800cae4 <global_stdio_init.part.0+0x30>)
 800cab8:	4c0b      	ldr	r4, [pc, #44]	@ (800cae8 <global_stdio_init.part.0+0x34>)
 800caba:	4a0c      	ldr	r2, [pc, #48]	@ (800caec <global_stdio_init.part.0+0x38>)
 800cabc:	601a      	str	r2, [r3, #0]
 800cabe:	4620      	mov	r0, r4
 800cac0:	2200      	movs	r2, #0
 800cac2:	2104      	movs	r1, #4
 800cac4:	f7ff ff94 	bl	800c9f0 <std>
 800cac8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cacc:	2201      	movs	r2, #1
 800cace:	2109      	movs	r1, #9
 800cad0:	f7ff ff8e 	bl	800c9f0 <std>
 800cad4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cad8:	2202      	movs	r2, #2
 800cada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cade:	2112      	movs	r1, #18
 800cae0:	f7ff bf86 	b.w	800c9f0 <std>
 800cae4:	200005e0 	.word	0x200005e0
 800cae8:	200004a8 	.word	0x200004a8
 800caec:	0800ca5d 	.word	0x0800ca5d

0800caf0 <__sfp_lock_acquire>:
 800caf0:	4801      	ldr	r0, [pc, #4]	@ (800caf8 <__sfp_lock_acquire+0x8>)
 800caf2:	f000 b974 	b.w	800cdde <__retarget_lock_acquire_recursive>
 800caf6:	bf00      	nop
 800caf8:	200005e9 	.word	0x200005e9

0800cafc <__sfp_lock_release>:
 800cafc:	4801      	ldr	r0, [pc, #4]	@ (800cb04 <__sfp_lock_release+0x8>)
 800cafe:	f000 b96f 	b.w	800cde0 <__retarget_lock_release_recursive>
 800cb02:	bf00      	nop
 800cb04:	200005e9 	.word	0x200005e9

0800cb08 <__sinit>:
 800cb08:	b510      	push	{r4, lr}
 800cb0a:	4604      	mov	r4, r0
 800cb0c:	f7ff fff0 	bl	800caf0 <__sfp_lock_acquire>
 800cb10:	6a23      	ldr	r3, [r4, #32]
 800cb12:	b11b      	cbz	r3, 800cb1c <__sinit+0x14>
 800cb14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb18:	f7ff bff0 	b.w	800cafc <__sfp_lock_release>
 800cb1c:	4b04      	ldr	r3, [pc, #16]	@ (800cb30 <__sinit+0x28>)
 800cb1e:	6223      	str	r3, [r4, #32]
 800cb20:	4b04      	ldr	r3, [pc, #16]	@ (800cb34 <__sinit+0x2c>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d1f5      	bne.n	800cb14 <__sinit+0xc>
 800cb28:	f7ff ffc4 	bl	800cab4 <global_stdio_init.part.0>
 800cb2c:	e7f2      	b.n	800cb14 <__sinit+0xc>
 800cb2e:	bf00      	nop
 800cb30:	0800ca75 	.word	0x0800ca75
 800cb34:	200005e0 	.word	0x200005e0

0800cb38 <_fwalk_sglue>:
 800cb38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb3c:	4607      	mov	r7, r0
 800cb3e:	4688      	mov	r8, r1
 800cb40:	4614      	mov	r4, r2
 800cb42:	2600      	movs	r6, #0
 800cb44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cb48:	f1b9 0901 	subs.w	r9, r9, #1
 800cb4c:	d505      	bpl.n	800cb5a <_fwalk_sglue+0x22>
 800cb4e:	6824      	ldr	r4, [r4, #0]
 800cb50:	2c00      	cmp	r4, #0
 800cb52:	d1f7      	bne.n	800cb44 <_fwalk_sglue+0xc>
 800cb54:	4630      	mov	r0, r6
 800cb56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb5a:	89ab      	ldrh	r3, [r5, #12]
 800cb5c:	2b01      	cmp	r3, #1
 800cb5e:	d907      	bls.n	800cb70 <_fwalk_sglue+0x38>
 800cb60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cb64:	3301      	adds	r3, #1
 800cb66:	d003      	beq.n	800cb70 <_fwalk_sglue+0x38>
 800cb68:	4629      	mov	r1, r5
 800cb6a:	4638      	mov	r0, r7
 800cb6c:	47c0      	blx	r8
 800cb6e:	4306      	orrs	r6, r0
 800cb70:	3568      	adds	r5, #104	@ 0x68
 800cb72:	e7e9      	b.n	800cb48 <_fwalk_sglue+0x10>

0800cb74 <siprintf>:
 800cb74:	b40e      	push	{r1, r2, r3}
 800cb76:	b500      	push	{lr}
 800cb78:	b09c      	sub	sp, #112	@ 0x70
 800cb7a:	ab1d      	add	r3, sp, #116	@ 0x74
 800cb7c:	9002      	str	r0, [sp, #8]
 800cb7e:	9006      	str	r0, [sp, #24]
 800cb80:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cb84:	4809      	ldr	r0, [pc, #36]	@ (800cbac <siprintf+0x38>)
 800cb86:	9107      	str	r1, [sp, #28]
 800cb88:	9104      	str	r1, [sp, #16]
 800cb8a:	4909      	ldr	r1, [pc, #36]	@ (800cbb0 <siprintf+0x3c>)
 800cb8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb90:	9105      	str	r1, [sp, #20]
 800cb92:	6800      	ldr	r0, [r0, #0]
 800cb94:	9301      	str	r3, [sp, #4]
 800cb96:	a902      	add	r1, sp, #8
 800cb98:	f001 fba2 	bl	800e2e0 <_svfiprintf_r>
 800cb9c:	9b02      	ldr	r3, [sp, #8]
 800cb9e:	2200      	movs	r2, #0
 800cba0:	701a      	strb	r2, [r3, #0]
 800cba2:	b01c      	add	sp, #112	@ 0x70
 800cba4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cba8:	b003      	add	sp, #12
 800cbaa:	4770      	bx	lr
 800cbac:	2000001c 	.word	0x2000001c
 800cbb0:	ffff0208 	.word	0xffff0208

0800cbb4 <__sread>:
 800cbb4:	b510      	push	{r4, lr}
 800cbb6:	460c      	mov	r4, r1
 800cbb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbbc:	f000 f89c 	bl	800ccf8 <_read_r>
 800cbc0:	2800      	cmp	r0, #0
 800cbc2:	bfab      	itete	ge
 800cbc4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cbc6:	89a3      	ldrhlt	r3, [r4, #12]
 800cbc8:	181b      	addge	r3, r3, r0
 800cbca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cbce:	bfac      	ite	ge
 800cbd0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cbd2:	81a3      	strhlt	r3, [r4, #12]
 800cbd4:	bd10      	pop	{r4, pc}

0800cbd6 <__swrite>:
 800cbd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbda:	461f      	mov	r7, r3
 800cbdc:	898b      	ldrh	r3, [r1, #12]
 800cbde:	05db      	lsls	r3, r3, #23
 800cbe0:	4605      	mov	r5, r0
 800cbe2:	460c      	mov	r4, r1
 800cbe4:	4616      	mov	r6, r2
 800cbe6:	d505      	bpl.n	800cbf4 <__swrite+0x1e>
 800cbe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbec:	2302      	movs	r3, #2
 800cbee:	2200      	movs	r2, #0
 800cbf0:	f000 f870 	bl	800ccd4 <_lseek_r>
 800cbf4:	89a3      	ldrh	r3, [r4, #12]
 800cbf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbfa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cbfe:	81a3      	strh	r3, [r4, #12]
 800cc00:	4632      	mov	r2, r6
 800cc02:	463b      	mov	r3, r7
 800cc04:	4628      	mov	r0, r5
 800cc06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc0a:	f000 b8ab 	b.w	800cd64 <_write_r>

0800cc0e <__sseek>:
 800cc0e:	b510      	push	{r4, lr}
 800cc10:	460c      	mov	r4, r1
 800cc12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc16:	f000 f85d 	bl	800ccd4 <_lseek_r>
 800cc1a:	1c43      	adds	r3, r0, #1
 800cc1c:	89a3      	ldrh	r3, [r4, #12]
 800cc1e:	bf15      	itete	ne
 800cc20:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cc22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cc26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cc2a:	81a3      	strheq	r3, [r4, #12]
 800cc2c:	bf18      	it	ne
 800cc2e:	81a3      	strhne	r3, [r4, #12]
 800cc30:	bd10      	pop	{r4, pc}

0800cc32 <__sclose>:
 800cc32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc36:	f000 b83d 	b.w	800ccb4 <_close_r>

0800cc3a <memset>:
 800cc3a:	4402      	add	r2, r0
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	4293      	cmp	r3, r2
 800cc40:	d100      	bne.n	800cc44 <memset+0xa>
 800cc42:	4770      	bx	lr
 800cc44:	f803 1b01 	strb.w	r1, [r3], #1
 800cc48:	e7f9      	b.n	800cc3e <memset+0x4>

0800cc4a <_raise_r>:
 800cc4a:	291f      	cmp	r1, #31
 800cc4c:	b538      	push	{r3, r4, r5, lr}
 800cc4e:	4605      	mov	r5, r0
 800cc50:	460c      	mov	r4, r1
 800cc52:	d904      	bls.n	800cc5e <_raise_r+0x14>
 800cc54:	2316      	movs	r3, #22
 800cc56:	6003      	str	r3, [r0, #0]
 800cc58:	f04f 30ff 	mov.w	r0, #4294967295
 800cc5c:	bd38      	pop	{r3, r4, r5, pc}
 800cc5e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cc60:	b112      	cbz	r2, 800cc68 <_raise_r+0x1e>
 800cc62:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cc66:	b94b      	cbnz	r3, 800cc7c <_raise_r+0x32>
 800cc68:	4628      	mov	r0, r5
 800cc6a:	f000 f869 	bl	800cd40 <_getpid_r>
 800cc6e:	4622      	mov	r2, r4
 800cc70:	4601      	mov	r1, r0
 800cc72:	4628      	mov	r0, r5
 800cc74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc78:	f000 b850 	b.w	800cd1c <_kill_r>
 800cc7c:	2b01      	cmp	r3, #1
 800cc7e:	d00a      	beq.n	800cc96 <_raise_r+0x4c>
 800cc80:	1c59      	adds	r1, r3, #1
 800cc82:	d103      	bne.n	800cc8c <_raise_r+0x42>
 800cc84:	2316      	movs	r3, #22
 800cc86:	6003      	str	r3, [r0, #0]
 800cc88:	2001      	movs	r0, #1
 800cc8a:	e7e7      	b.n	800cc5c <_raise_r+0x12>
 800cc8c:	2100      	movs	r1, #0
 800cc8e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cc92:	4620      	mov	r0, r4
 800cc94:	4798      	blx	r3
 800cc96:	2000      	movs	r0, #0
 800cc98:	e7e0      	b.n	800cc5c <_raise_r+0x12>
	...

0800cc9c <raise>:
 800cc9c:	4b02      	ldr	r3, [pc, #8]	@ (800cca8 <raise+0xc>)
 800cc9e:	4601      	mov	r1, r0
 800cca0:	6818      	ldr	r0, [r3, #0]
 800cca2:	f7ff bfd2 	b.w	800cc4a <_raise_r>
 800cca6:	bf00      	nop
 800cca8:	2000001c 	.word	0x2000001c

0800ccac <_localeconv_r>:
 800ccac:	4800      	ldr	r0, [pc, #0]	@ (800ccb0 <_localeconv_r+0x4>)
 800ccae:	4770      	bx	lr
 800ccb0:	2000015c 	.word	0x2000015c

0800ccb4 <_close_r>:
 800ccb4:	b538      	push	{r3, r4, r5, lr}
 800ccb6:	4d06      	ldr	r5, [pc, #24]	@ (800ccd0 <_close_r+0x1c>)
 800ccb8:	2300      	movs	r3, #0
 800ccba:	4604      	mov	r4, r0
 800ccbc:	4608      	mov	r0, r1
 800ccbe:	602b      	str	r3, [r5, #0]
 800ccc0:	f7fa ff20 	bl	8007b04 <_close>
 800ccc4:	1c43      	adds	r3, r0, #1
 800ccc6:	d102      	bne.n	800ccce <_close_r+0x1a>
 800ccc8:	682b      	ldr	r3, [r5, #0]
 800ccca:	b103      	cbz	r3, 800ccce <_close_r+0x1a>
 800cccc:	6023      	str	r3, [r4, #0]
 800ccce:	bd38      	pop	{r3, r4, r5, pc}
 800ccd0:	200005e4 	.word	0x200005e4

0800ccd4 <_lseek_r>:
 800ccd4:	b538      	push	{r3, r4, r5, lr}
 800ccd6:	4d07      	ldr	r5, [pc, #28]	@ (800ccf4 <_lseek_r+0x20>)
 800ccd8:	4604      	mov	r4, r0
 800ccda:	4608      	mov	r0, r1
 800ccdc:	4611      	mov	r1, r2
 800ccde:	2200      	movs	r2, #0
 800cce0:	602a      	str	r2, [r5, #0]
 800cce2:	461a      	mov	r2, r3
 800cce4:	f7fa ff35 	bl	8007b52 <_lseek>
 800cce8:	1c43      	adds	r3, r0, #1
 800ccea:	d102      	bne.n	800ccf2 <_lseek_r+0x1e>
 800ccec:	682b      	ldr	r3, [r5, #0]
 800ccee:	b103      	cbz	r3, 800ccf2 <_lseek_r+0x1e>
 800ccf0:	6023      	str	r3, [r4, #0]
 800ccf2:	bd38      	pop	{r3, r4, r5, pc}
 800ccf4:	200005e4 	.word	0x200005e4

0800ccf8 <_read_r>:
 800ccf8:	b538      	push	{r3, r4, r5, lr}
 800ccfa:	4d07      	ldr	r5, [pc, #28]	@ (800cd18 <_read_r+0x20>)
 800ccfc:	4604      	mov	r4, r0
 800ccfe:	4608      	mov	r0, r1
 800cd00:	4611      	mov	r1, r2
 800cd02:	2200      	movs	r2, #0
 800cd04:	602a      	str	r2, [r5, #0]
 800cd06:	461a      	mov	r2, r3
 800cd08:	f7fa fec3 	bl	8007a92 <_read>
 800cd0c:	1c43      	adds	r3, r0, #1
 800cd0e:	d102      	bne.n	800cd16 <_read_r+0x1e>
 800cd10:	682b      	ldr	r3, [r5, #0]
 800cd12:	b103      	cbz	r3, 800cd16 <_read_r+0x1e>
 800cd14:	6023      	str	r3, [r4, #0]
 800cd16:	bd38      	pop	{r3, r4, r5, pc}
 800cd18:	200005e4 	.word	0x200005e4

0800cd1c <_kill_r>:
 800cd1c:	b538      	push	{r3, r4, r5, lr}
 800cd1e:	4d07      	ldr	r5, [pc, #28]	@ (800cd3c <_kill_r+0x20>)
 800cd20:	2300      	movs	r3, #0
 800cd22:	4604      	mov	r4, r0
 800cd24:	4608      	mov	r0, r1
 800cd26:	4611      	mov	r1, r2
 800cd28:	602b      	str	r3, [r5, #0]
 800cd2a:	f7fa fe97 	bl	8007a5c <_kill>
 800cd2e:	1c43      	adds	r3, r0, #1
 800cd30:	d102      	bne.n	800cd38 <_kill_r+0x1c>
 800cd32:	682b      	ldr	r3, [r5, #0]
 800cd34:	b103      	cbz	r3, 800cd38 <_kill_r+0x1c>
 800cd36:	6023      	str	r3, [r4, #0]
 800cd38:	bd38      	pop	{r3, r4, r5, pc}
 800cd3a:	bf00      	nop
 800cd3c:	200005e4 	.word	0x200005e4

0800cd40 <_getpid_r>:
 800cd40:	f7fa be84 	b.w	8007a4c <_getpid>

0800cd44 <_sbrk_r>:
 800cd44:	b538      	push	{r3, r4, r5, lr}
 800cd46:	4d06      	ldr	r5, [pc, #24]	@ (800cd60 <_sbrk_r+0x1c>)
 800cd48:	2300      	movs	r3, #0
 800cd4a:	4604      	mov	r4, r0
 800cd4c:	4608      	mov	r0, r1
 800cd4e:	602b      	str	r3, [r5, #0]
 800cd50:	f7fa ff0c 	bl	8007b6c <_sbrk>
 800cd54:	1c43      	adds	r3, r0, #1
 800cd56:	d102      	bne.n	800cd5e <_sbrk_r+0x1a>
 800cd58:	682b      	ldr	r3, [r5, #0]
 800cd5a:	b103      	cbz	r3, 800cd5e <_sbrk_r+0x1a>
 800cd5c:	6023      	str	r3, [r4, #0]
 800cd5e:	bd38      	pop	{r3, r4, r5, pc}
 800cd60:	200005e4 	.word	0x200005e4

0800cd64 <_write_r>:
 800cd64:	b538      	push	{r3, r4, r5, lr}
 800cd66:	4d07      	ldr	r5, [pc, #28]	@ (800cd84 <_write_r+0x20>)
 800cd68:	4604      	mov	r4, r0
 800cd6a:	4608      	mov	r0, r1
 800cd6c:	4611      	mov	r1, r2
 800cd6e:	2200      	movs	r2, #0
 800cd70:	602a      	str	r2, [r5, #0]
 800cd72:	461a      	mov	r2, r3
 800cd74:	f7fa feaa 	bl	8007acc <_write>
 800cd78:	1c43      	adds	r3, r0, #1
 800cd7a:	d102      	bne.n	800cd82 <_write_r+0x1e>
 800cd7c:	682b      	ldr	r3, [r5, #0]
 800cd7e:	b103      	cbz	r3, 800cd82 <_write_r+0x1e>
 800cd80:	6023      	str	r3, [r4, #0]
 800cd82:	bd38      	pop	{r3, r4, r5, pc}
 800cd84:	200005e4 	.word	0x200005e4

0800cd88 <__errno>:
 800cd88:	4b01      	ldr	r3, [pc, #4]	@ (800cd90 <__errno+0x8>)
 800cd8a:	6818      	ldr	r0, [r3, #0]
 800cd8c:	4770      	bx	lr
 800cd8e:	bf00      	nop
 800cd90:	2000001c 	.word	0x2000001c

0800cd94 <__libc_init_array>:
 800cd94:	b570      	push	{r4, r5, r6, lr}
 800cd96:	4d0d      	ldr	r5, [pc, #52]	@ (800cdcc <__libc_init_array+0x38>)
 800cd98:	4c0d      	ldr	r4, [pc, #52]	@ (800cdd0 <__libc_init_array+0x3c>)
 800cd9a:	1b64      	subs	r4, r4, r5
 800cd9c:	10a4      	asrs	r4, r4, #2
 800cd9e:	2600      	movs	r6, #0
 800cda0:	42a6      	cmp	r6, r4
 800cda2:	d109      	bne.n	800cdb8 <__libc_init_array+0x24>
 800cda4:	4d0b      	ldr	r5, [pc, #44]	@ (800cdd4 <__libc_init_array+0x40>)
 800cda6:	4c0c      	ldr	r4, [pc, #48]	@ (800cdd8 <__libc_init_array+0x44>)
 800cda8:	f001 ff5e 	bl	800ec68 <_init>
 800cdac:	1b64      	subs	r4, r4, r5
 800cdae:	10a4      	asrs	r4, r4, #2
 800cdb0:	2600      	movs	r6, #0
 800cdb2:	42a6      	cmp	r6, r4
 800cdb4:	d105      	bne.n	800cdc2 <__libc_init_array+0x2e>
 800cdb6:	bd70      	pop	{r4, r5, r6, pc}
 800cdb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdbc:	4798      	blx	r3
 800cdbe:	3601      	adds	r6, #1
 800cdc0:	e7ee      	b.n	800cda0 <__libc_init_array+0xc>
 800cdc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdc6:	4798      	blx	r3
 800cdc8:	3601      	adds	r6, #1
 800cdca:	e7f2      	b.n	800cdb2 <__libc_init_array+0x1e>
 800cdcc:	0800fb98 	.word	0x0800fb98
 800cdd0:	0800fb98 	.word	0x0800fb98
 800cdd4:	0800fb98 	.word	0x0800fb98
 800cdd8:	0800fba0 	.word	0x0800fba0

0800cddc <__retarget_lock_init_recursive>:
 800cddc:	4770      	bx	lr

0800cdde <__retarget_lock_acquire_recursive>:
 800cdde:	4770      	bx	lr

0800cde0 <__retarget_lock_release_recursive>:
 800cde0:	4770      	bx	lr

0800cde2 <strcpy>:
 800cde2:	4603      	mov	r3, r0
 800cde4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cde8:	f803 2b01 	strb.w	r2, [r3], #1
 800cdec:	2a00      	cmp	r2, #0
 800cdee:	d1f9      	bne.n	800cde4 <strcpy+0x2>
 800cdf0:	4770      	bx	lr

0800cdf2 <quorem>:
 800cdf2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdf6:	6903      	ldr	r3, [r0, #16]
 800cdf8:	690c      	ldr	r4, [r1, #16]
 800cdfa:	42a3      	cmp	r3, r4
 800cdfc:	4607      	mov	r7, r0
 800cdfe:	db7e      	blt.n	800cefe <quorem+0x10c>
 800ce00:	3c01      	subs	r4, #1
 800ce02:	f101 0814 	add.w	r8, r1, #20
 800ce06:	00a3      	lsls	r3, r4, #2
 800ce08:	f100 0514 	add.w	r5, r0, #20
 800ce0c:	9300      	str	r3, [sp, #0]
 800ce0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ce12:	9301      	str	r3, [sp, #4]
 800ce14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ce18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ce1c:	3301      	adds	r3, #1
 800ce1e:	429a      	cmp	r2, r3
 800ce20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ce24:	fbb2 f6f3 	udiv	r6, r2, r3
 800ce28:	d32e      	bcc.n	800ce88 <quorem+0x96>
 800ce2a:	f04f 0a00 	mov.w	sl, #0
 800ce2e:	46c4      	mov	ip, r8
 800ce30:	46ae      	mov	lr, r5
 800ce32:	46d3      	mov	fp, sl
 800ce34:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ce38:	b298      	uxth	r0, r3
 800ce3a:	fb06 a000 	mla	r0, r6, r0, sl
 800ce3e:	0c02      	lsrs	r2, r0, #16
 800ce40:	0c1b      	lsrs	r3, r3, #16
 800ce42:	fb06 2303 	mla	r3, r6, r3, r2
 800ce46:	f8de 2000 	ldr.w	r2, [lr]
 800ce4a:	b280      	uxth	r0, r0
 800ce4c:	b292      	uxth	r2, r2
 800ce4e:	1a12      	subs	r2, r2, r0
 800ce50:	445a      	add	r2, fp
 800ce52:	f8de 0000 	ldr.w	r0, [lr]
 800ce56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ce5a:	b29b      	uxth	r3, r3
 800ce5c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ce60:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ce64:	b292      	uxth	r2, r2
 800ce66:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ce6a:	45e1      	cmp	r9, ip
 800ce6c:	f84e 2b04 	str.w	r2, [lr], #4
 800ce70:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ce74:	d2de      	bcs.n	800ce34 <quorem+0x42>
 800ce76:	9b00      	ldr	r3, [sp, #0]
 800ce78:	58eb      	ldr	r3, [r5, r3]
 800ce7a:	b92b      	cbnz	r3, 800ce88 <quorem+0x96>
 800ce7c:	9b01      	ldr	r3, [sp, #4]
 800ce7e:	3b04      	subs	r3, #4
 800ce80:	429d      	cmp	r5, r3
 800ce82:	461a      	mov	r2, r3
 800ce84:	d32f      	bcc.n	800cee6 <quorem+0xf4>
 800ce86:	613c      	str	r4, [r7, #16]
 800ce88:	4638      	mov	r0, r7
 800ce8a:	f001 f8c5 	bl	800e018 <__mcmp>
 800ce8e:	2800      	cmp	r0, #0
 800ce90:	db25      	blt.n	800cede <quorem+0xec>
 800ce92:	4629      	mov	r1, r5
 800ce94:	2000      	movs	r0, #0
 800ce96:	f858 2b04 	ldr.w	r2, [r8], #4
 800ce9a:	f8d1 c000 	ldr.w	ip, [r1]
 800ce9e:	fa1f fe82 	uxth.w	lr, r2
 800cea2:	fa1f f38c 	uxth.w	r3, ip
 800cea6:	eba3 030e 	sub.w	r3, r3, lr
 800ceaa:	4403      	add	r3, r0
 800ceac:	0c12      	lsrs	r2, r2, #16
 800ceae:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ceb2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ceb6:	b29b      	uxth	r3, r3
 800ceb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cebc:	45c1      	cmp	r9, r8
 800cebe:	f841 3b04 	str.w	r3, [r1], #4
 800cec2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cec6:	d2e6      	bcs.n	800ce96 <quorem+0xa4>
 800cec8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cecc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ced0:	b922      	cbnz	r2, 800cedc <quorem+0xea>
 800ced2:	3b04      	subs	r3, #4
 800ced4:	429d      	cmp	r5, r3
 800ced6:	461a      	mov	r2, r3
 800ced8:	d30b      	bcc.n	800cef2 <quorem+0x100>
 800ceda:	613c      	str	r4, [r7, #16]
 800cedc:	3601      	adds	r6, #1
 800cede:	4630      	mov	r0, r6
 800cee0:	b003      	add	sp, #12
 800cee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cee6:	6812      	ldr	r2, [r2, #0]
 800cee8:	3b04      	subs	r3, #4
 800ceea:	2a00      	cmp	r2, #0
 800ceec:	d1cb      	bne.n	800ce86 <quorem+0x94>
 800ceee:	3c01      	subs	r4, #1
 800cef0:	e7c6      	b.n	800ce80 <quorem+0x8e>
 800cef2:	6812      	ldr	r2, [r2, #0]
 800cef4:	3b04      	subs	r3, #4
 800cef6:	2a00      	cmp	r2, #0
 800cef8:	d1ef      	bne.n	800ceda <quorem+0xe8>
 800cefa:	3c01      	subs	r4, #1
 800cefc:	e7ea      	b.n	800ced4 <quorem+0xe2>
 800cefe:	2000      	movs	r0, #0
 800cf00:	e7ee      	b.n	800cee0 <quorem+0xee>
 800cf02:	0000      	movs	r0, r0
 800cf04:	0000      	movs	r0, r0
	...

0800cf08 <_dtoa_r>:
 800cf08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf0c:	69c7      	ldr	r7, [r0, #28]
 800cf0e:	b099      	sub	sp, #100	@ 0x64
 800cf10:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cf14:	ec55 4b10 	vmov	r4, r5, d0
 800cf18:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800cf1a:	9109      	str	r1, [sp, #36]	@ 0x24
 800cf1c:	4683      	mov	fp, r0
 800cf1e:	920e      	str	r2, [sp, #56]	@ 0x38
 800cf20:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cf22:	b97f      	cbnz	r7, 800cf44 <_dtoa_r+0x3c>
 800cf24:	2010      	movs	r0, #16
 800cf26:	f7ff f84d 	bl	800bfc4 <malloc>
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	f8cb 001c 	str.w	r0, [fp, #28]
 800cf30:	b920      	cbnz	r0, 800cf3c <_dtoa_r+0x34>
 800cf32:	4ba7      	ldr	r3, [pc, #668]	@ (800d1d0 <_dtoa_r+0x2c8>)
 800cf34:	21ef      	movs	r1, #239	@ 0xef
 800cf36:	48a7      	ldr	r0, [pc, #668]	@ (800d1d4 <_dtoa_r+0x2cc>)
 800cf38:	f001 fba2 	bl	800e680 <__assert_func>
 800cf3c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cf40:	6007      	str	r7, [r0, #0]
 800cf42:	60c7      	str	r7, [r0, #12]
 800cf44:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cf48:	6819      	ldr	r1, [r3, #0]
 800cf4a:	b159      	cbz	r1, 800cf64 <_dtoa_r+0x5c>
 800cf4c:	685a      	ldr	r2, [r3, #4]
 800cf4e:	604a      	str	r2, [r1, #4]
 800cf50:	2301      	movs	r3, #1
 800cf52:	4093      	lsls	r3, r2
 800cf54:	608b      	str	r3, [r1, #8]
 800cf56:	4658      	mov	r0, fp
 800cf58:	f000 fe24 	bl	800dba4 <_Bfree>
 800cf5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cf60:	2200      	movs	r2, #0
 800cf62:	601a      	str	r2, [r3, #0]
 800cf64:	1e2b      	subs	r3, r5, #0
 800cf66:	bfb9      	ittee	lt
 800cf68:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cf6c:	9303      	strlt	r3, [sp, #12]
 800cf6e:	2300      	movge	r3, #0
 800cf70:	6033      	strge	r3, [r6, #0]
 800cf72:	9f03      	ldr	r7, [sp, #12]
 800cf74:	4b98      	ldr	r3, [pc, #608]	@ (800d1d8 <_dtoa_r+0x2d0>)
 800cf76:	bfbc      	itt	lt
 800cf78:	2201      	movlt	r2, #1
 800cf7a:	6032      	strlt	r2, [r6, #0]
 800cf7c:	43bb      	bics	r3, r7
 800cf7e:	d112      	bne.n	800cfa6 <_dtoa_r+0x9e>
 800cf80:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cf82:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cf86:	6013      	str	r3, [r2, #0]
 800cf88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cf8c:	4323      	orrs	r3, r4
 800cf8e:	f000 854d 	beq.w	800da2c <_dtoa_r+0xb24>
 800cf92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cf94:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d1ec <_dtoa_r+0x2e4>
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	f000 854f 	beq.w	800da3c <_dtoa_r+0xb34>
 800cf9e:	f10a 0303 	add.w	r3, sl, #3
 800cfa2:	f000 bd49 	b.w	800da38 <_dtoa_r+0xb30>
 800cfa6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	ec51 0b17 	vmov	r0, r1, d7
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800cfb6:	f7f3 fd8f 	bl	8000ad8 <__aeabi_dcmpeq>
 800cfba:	4680      	mov	r8, r0
 800cfbc:	b158      	cbz	r0, 800cfd6 <_dtoa_r+0xce>
 800cfbe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	6013      	str	r3, [r2, #0]
 800cfc4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cfc6:	b113      	cbz	r3, 800cfce <_dtoa_r+0xc6>
 800cfc8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cfca:	4b84      	ldr	r3, [pc, #528]	@ (800d1dc <_dtoa_r+0x2d4>)
 800cfcc:	6013      	str	r3, [r2, #0]
 800cfce:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d1f0 <_dtoa_r+0x2e8>
 800cfd2:	f000 bd33 	b.w	800da3c <_dtoa_r+0xb34>
 800cfd6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cfda:	aa16      	add	r2, sp, #88	@ 0x58
 800cfdc:	a917      	add	r1, sp, #92	@ 0x5c
 800cfde:	4658      	mov	r0, fp
 800cfe0:	f001 f8ca 	bl	800e178 <__d2b>
 800cfe4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800cfe8:	4681      	mov	r9, r0
 800cfea:	2e00      	cmp	r6, #0
 800cfec:	d077      	beq.n	800d0de <_dtoa_r+0x1d6>
 800cfee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cff0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800cff4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cff8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cffc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d000:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d004:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d008:	4619      	mov	r1, r3
 800d00a:	2200      	movs	r2, #0
 800d00c:	4b74      	ldr	r3, [pc, #464]	@ (800d1e0 <_dtoa_r+0x2d8>)
 800d00e:	f7f3 f943 	bl	8000298 <__aeabi_dsub>
 800d012:	a369      	add	r3, pc, #420	@ (adr r3, 800d1b8 <_dtoa_r+0x2b0>)
 800d014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d018:	f7f3 faf6 	bl	8000608 <__aeabi_dmul>
 800d01c:	a368      	add	r3, pc, #416	@ (adr r3, 800d1c0 <_dtoa_r+0x2b8>)
 800d01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d022:	f7f3 f93b 	bl	800029c <__adddf3>
 800d026:	4604      	mov	r4, r0
 800d028:	4630      	mov	r0, r6
 800d02a:	460d      	mov	r5, r1
 800d02c:	f7f3 fa82 	bl	8000534 <__aeabi_i2d>
 800d030:	a365      	add	r3, pc, #404	@ (adr r3, 800d1c8 <_dtoa_r+0x2c0>)
 800d032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d036:	f7f3 fae7 	bl	8000608 <__aeabi_dmul>
 800d03a:	4602      	mov	r2, r0
 800d03c:	460b      	mov	r3, r1
 800d03e:	4620      	mov	r0, r4
 800d040:	4629      	mov	r1, r5
 800d042:	f7f3 f92b 	bl	800029c <__adddf3>
 800d046:	4604      	mov	r4, r0
 800d048:	460d      	mov	r5, r1
 800d04a:	f7f3 fd8d 	bl	8000b68 <__aeabi_d2iz>
 800d04e:	2200      	movs	r2, #0
 800d050:	4607      	mov	r7, r0
 800d052:	2300      	movs	r3, #0
 800d054:	4620      	mov	r0, r4
 800d056:	4629      	mov	r1, r5
 800d058:	f7f3 fd48 	bl	8000aec <__aeabi_dcmplt>
 800d05c:	b140      	cbz	r0, 800d070 <_dtoa_r+0x168>
 800d05e:	4638      	mov	r0, r7
 800d060:	f7f3 fa68 	bl	8000534 <__aeabi_i2d>
 800d064:	4622      	mov	r2, r4
 800d066:	462b      	mov	r3, r5
 800d068:	f7f3 fd36 	bl	8000ad8 <__aeabi_dcmpeq>
 800d06c:	b900      	cbnz	r0, 800d070 <_dtoa_r+0x168>
 800d06e:	3f01      	subs	r7, #1
 800d070:	2f16      	cmp	r7, #22
 800d072:	d851      	bhi.n	800d118 <_dtoa_r+0x210>
 800d074:	4b5b      	ldr	r3, [pc, #364]	@ (800d1e4 <_dtoa_r+0x2dc>)
 800d076:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d07e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d082:	f7f3 fd33 	bl	8000aec <__aeabi_dcmplt>
 800d086:	2800      	cmp	r0, #0
 800d088:	d048      	beq.n	800d11c <_dtoa_r+0x214>
 800d08a:	3f01      	subs	r7, #1
 800d08c:	2300      	movs	r3, #0
 800d08e:	9312      	str	r3, [sp, #72]	@ 0x48
 800d090:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d092:	1b9b      	subs	r3, r3, r6
 800d094:	1e5a      	subs	r2, r3, #1
 800d096:	bf44      	itt	mi
 800d098:	f1c3 0801 	rsbmi	r8, r3, #1
 800d09c:	2300      	movmi	r3, #0
 800d09e:	9208      	str	r2, [sp, #32]
 800d0a0:	bf54      	ite	pl
 800d0a2:	f04f 0800 	movpl.w	r8, #0
 800d0a6:	9308      	strmi	r3, [sp, #32]
 800d0a8:	2f00      	cmp	r7, #0
 800d0aa:	db39      	blt.n	800d120 <_dtoa_r+0x218>
 800d0ac:	9b08      	ldr	r3, [sp, #32]
 800d0ae:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d0b0:	443b      	add	r3, r7
 800d0b2:	9308      	str	r3, [sp, #32]
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d0b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0ba:	2b09      	cmp	r3, #9
 800d0bc:	d864      	bhi.n	800d188 <_dtoa_r+0x280>
 800d0be:	2b05      	cmp	r3, #5
 800d0c0:	bfc4      	itt	gt
 800d0c2:	3b04      	subgt	r3, #4
 800d0c4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d0c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0c8:	f1a3 0302 	sub.w	r3, r3, #2
 800d0cc:	bfcc      	ite	gt
 800d0ce:	2400      	movgt	r4, #0
 800d0d0:	2401      	movle	r4, #1
 800d0d2:	2b03      	cmp	r3, #3
 800d0d4:	d863      	bhi.n	800d19e <_dtoa_r+0x296>
 800d0d6:	e8df f003 	tbb	[pc, r3]
 800d0da:	372a      	.short	0x372a
 800d0dc:	5535      	.short	0x5535
 800d0de:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d0e2:	441e      	add	r6, r3
 800d0e4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d0e8:	2b20      	cmp	r3, #32
 800d0ea:	bfc1      	itttt	gt
 800d0ec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d0f0:	409f      	lslgt	r7, r3
 800d0f2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d0f6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d0fa:	bfd6      	itet	le
 800d0fc:	f1c3 0320 	rsble	r3, r3, #32
 800d100:	ea47 0003 	orrgt.w	r0, r7, r3
 800d104:	fa04 f003 	lslle.w	r0, r4, r3
 800d108:	f7f3 fa04 	bl	8000514 <__aeabi_ui2d>
 800d10c:	2201      	movs	r2, #1
 800d10e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d112:	3e01      	subs	r6, #1
 800d114:	9214      	str	r2, [sp, #80]	@ 0x50
 800d116:	e777      	b.n	800d008 <_dtoa_r+0x100>
 800d118:	2301      	movs	r3, #1
 800d11a:	e7b8      	b.n	800d08e <_dtoa_r+0x186>
 800d11c:	9012      	str	r0, [sp, #72]	@ 0x48
 800d11e:	e7b7      	b.n	800d090 <_dtoa_r+0x188>
 800d120:	427b      	negs	r3, r7
 800d122:	930a      	str	r3, [sp, #40]	@ 0x28
 800d124:	2300      	movs	r3, #0
 800d126:	eba8 0807 	sub.w	r8, r8, r7
 800d12a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d12c:	e7c4      	b.n	800d0b8 <_dtoa_r+0x1b0>
 800d12e:	2300      	movs	r3, #0
 800d130:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d132:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d134:	2b00      	cmp	r3, #0
 800d136:	dc35      	bgt.n	800d1a4 <_dtoa_r+0x29c>
 800d138:	2301      	movs	r3, #1
 800d13a:	9300      	str	r3, [sp, #0]
 800d13c:	9307      	str	r3, [sp, #28]
 800d13e:	461a      	mov	r2, r3
 800d140:	920e      	str	r2, [sp, #56]	@ 0x38
 800d142:	e00b      	b.n	800d15c <_dtoa_r+0x254>
 800d144:	2301      	movs	r3, #1
 800d146:	e7f3      	b.n	800d130 <_dtoa_r+0x228>
 800d148:	2300      	movs	r3, #0
 800d14a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d14c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d14e:	18fb      	adds	r3, r7, r3
 800d150:	9300      	str	r3, [sp, #0]
 800d152:	3301      	adds	r3, #1
 800d154:	2b01      	cmp	r3, #1
 800d156:	9307      	str	r3, [sp, #28]
 800d158:	bfb8      	it	lt
 800d15a:	2301      	movlt	r3, #1
 800d15c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d160:	2100      	movs	r1, #0
 800d162:	2204      	movs	r2, #4
 800d164:	f102 0514 	add.w	r5, r2, #20
 800d168:	429d      	cmp	r5, r3
 800d16a:	d91f      	bls.n	800d1ac <_dtoa_r+0x2a4>
 800d16c:	6041      	str	r1, [r0, #4]
 800d16e:	4658      	mov	r0, fp
 800d170:	f000 fcd8 	bl	800db24 <_Balloc>
 800d174:	4682      	mov	sl, r0
 800d176:	2800      	cmp	r0, #0
 800d178:	d13c      	bne.n	800d1f4 <_dtoa_r+0x2ec>
 800d17a:	4b1b      	ldr	r3, [pc, #108]	@ (800d1e8 <_dtoa_r+0x2e0>)
 800d17c:	4602      	mov	r2, r0
 800d17e:	f240 11af 	movw	r1, #431	@ 0x1af
 800d182:	e6d8      	b.n	800cf36 <_dtoa_r+0x2e>
 800d184:	2301      	movs	r3, #1
 800d186:	e7e0      	b.n	800d14a <_dtoa_r+0x242>
 800d188:	2401      	movs	r4, #1
 800d18a:	2300      	movs	r3, #0
 800d18c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d18e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d190:	f04f 33ff 	mov.w	r3, #4294967295
 800d194:	9300      	str	r3, [sp, #0]
 800d196:	9307      	str	r3, [sp, #28]
 800d198:	2200      	movs	r2, #0
 800d19a:	2312      	movs	r3, #18
 800d19c:	e7d0      	b.n	800d140 <_dtoa_r+0x238>
 800d19e:	2301      	movs	r3, #1
 800d1a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d1a2:	e7f5      	b.n	800d190 <_dtoa_r+0x288>
 800d1a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1a6:	9300      	str	r3, [sp, #0]
 800d1a8:	9307      	str	r3, [sp, #28]
 800d1aa:	e7d7      	b.n	800d15c <_dtoa_r+0x254>
 800d1ac:	3101      	adds	r1, #1
 800d1ae:	0052      	lsls	r2, r2, #1
 800d1b0:	e7d8      	b.n	800d164 <_dtoa_r+0x25c>
 800d1b2:	bf00      	nop
 800d1b4:	f3af 8000 	nop.w
 800d1b8:	636f4361 	.word	0x636f4361
 800d1bc:	3fd287a7 	.word	0x3fd287a7
 800d1c0:	8b60c8b3 	.word	0x8b60c8b3
 800d1c4:	3fc68a28 	.word	0x3fc68a28
 800d1c8:	509f79fb 	.word	0x509f79fb
 800d1cc:	3fd34413 	.word	0x3fd34413
 800d1d0:	0800f85d 	.word	0x0800f85d
 800d1d4:	0800f874 	.word	0x0800f874
 800d1d8:	7ff00000 	.word	0x7ff00000
 800d1dc:	0800f82d 	.word	0x0800f82d
 800d1e0:	3ff80000 	.word	0x3ff80000
 800d1e4:	0800f970 	.word	0x0800f970
 800d1e8:	0800f8cc 	.word	0x0800f8cc
 800d1ec:	0800f859 	.word	0x0800f859
 800d1f0:	0800f82c 	.word	0x0800f82c
 800d1f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d1f8:	6018      	str	r0, [r3, #0]
 800d1fa:	9b07      	ldr	r3, [sp, #28]
 800d1fc:	2b0e      	cmp	r3, #14
 800d1fe:	f200 80a4 	bhi.w	800d34a <_dtoa_r+0x442>
 800d202:	2c00      	cmp	r4, #0
 800d204:	f000 80a1 	beq.w	800d34a <_dtoa_r+0x442>
 800d208:	2f00      	cmp	r7, #0
 800d20a:	dd33      	ble.n	800d274 <_dtoa_r+0x36c>
 800d20c:	4bad      	ldr	r3, [pc, #692]	@ (800d4c4 <_dtoa_r+0x5bc>)
 800d20e:	f007 020f 	and.w	r2, r7, #15
 800d212:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d216:	ed93 7b00 	vldr	d7, [r3]
 800d21a:	05f8      	lsls	r0, r7, #23
 800d21c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d220:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d224:	d516      	bpl.n	800d254 <_dtoa_r+0x34c>
 800d226:	4ba8      	ldr	r3, [pc, #672]	@ (800d4c8 <_dtoa_r+0x5c0>)
 800d228:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d22c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d230:	f7f3 fb14 	bl	800085c <__aeabi_ddiv>
 800d234:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d238:	f004 040f 	and.w	r4, r4, #15
 800d23c:	2603      	movs	r6, #3
 800d23e:	4da2      	ldr	r5, [pc, #648]	@ (800d4c8 <_dtoa_r+0x5c0>)
 800d240:	b954      	cbnz	r4, 800d258 <_dtoa_r+0x350>
 800d242:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d246:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d24a:	f7f3 fb07 	bl	800085c <__aeabi_ddiv>
 800d24e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d252:	e028      	b.n	800d2a6 <_dtoa_r+0x39e>
 800d254:	2602      	movs	r6, #2
 800d256:	e7f2      	b.n	800d23e <_dtoa_r+0x336>
 800d258:	07e1      	lsls	r1, r4, #31
 800d25a:	d508      	bpl.n	800d26e <_dtoa_r+0x366>
 800d25c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d260:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d264:	f7f3 f9d0 	bl	8000608 <__aeabi_dmul>
 800d268:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d26c:	3601      	adds	r6, #1
 800d26e:	1064      	asrs	r4, r4, #1
 800d270:	3508      	adds	r5, #8
 800d272:	e7e5      	b.n	800d240 <_dtoa_r+0x338>
 800d274:	f000 80d2 	beq.w	800d41c <_dtoa_r+0x514>
 800d278:	427c      	negs	r4, r7
 800d27a:	4b92      	ldr	r3, [pc, #584]	@ (800d4c4 <_dtoa_r+0x5bc>)
 800d27c:	4d92      	ldr	r5, [pc, #584]	@ (800d4c8 <_dtoa_r+0x5c0>)
 800d27e:	f004 020f 	and.w	r2, r4, #15
 800d282:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d28a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d28e:	f7f3 f9bb 	bl	8000608 <__aeabi_dmul>
 800d292:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d296:	1124      	asrs	r4, r4, #4
 800d298:	2300      	movs	r3, #0
 800d29a:	2602      	movs	r6, #2
 800d29c:	2c00      	cmp	r4, #0
 800d29e:	f040 80b2 	bne.w	800d406 <_dtoa_r+0x4fe>
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d1d3      	bne.n	800d24e <_dtoa_r+0x346>
 800d2a6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d2a8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	f000 80b7 	beq.w	800d420 <_dtoa_r+0x518>
 800d2b2:	4b86      	ldr	r3, [pc, #536]	@ (800d4cc <_dtoa_r+0x5c4>)
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	4620      	mov	r0, r4
 800d2b8:	4629      	mov	r1, r5
 800d2ba:	f7f3 fc17 	bl	8000aec <__aeabi_dcmplt>
 800d2be:	2800      	cmp	r0, #0
 800d2c0:	f000 80ae 	beq.w	800d420 <_dtoa_r+0x518>
 800d2c4:	9b07      	ldr	r3, [sp, #28]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	f000 80aa 	beq.w	800d420 <_dtoa_r+0x518>
 800d2cc:	9b00      	ldr	r3, [sp, #0]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	dd37      	ble.n	800d342 <_dtoa_r+0x43a>
 800d2d2:	1e7b      	subs	r3, r7, #1
 800d2d4:	9304      	str	r3, [sp, #16]
 800d2d6:	4620      	mov	r0, r4
 800d2d8:	4b7d      	ldr	r3, [pc, #500]	@ (800d4d0 <_dtoa_r+0x5c8>)
 800d2da:	2200      	movs	r2, #0
 800d2dc:	4629      	mov	r1, r5
 800d2de:	f7f3 f993 	bl	8000608 <__aeabi_dmul>
 800d2e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d2e6:	9c00      	ldr	r4, [sp, #0]
 800d2e8:	3601      	adds	r6, #1
 800d2ea:	4630      	mov	r0, r6
 800d2ec:	f7f3 f922 	bl	8000534 <__aeabi_i2d>
 800d2f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d2f4:	f7f3 f988 	bl	8000608 <__aeabi_dmul>
 800d2f8:	4b76      	ldr	r3, [pc, #472]	@ (800d4d4 <_dtoa_r+0x5cc>)
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	f7f2 ffce 	bl	800029c <__adddf3>
 800d300:	4605      	mov	r5, r0
 800d302:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d306:	2c00      	cmp	r4, #0
 800d308:	f040 808d 	bne.w	800d426 <_dtoa_r+0x51e>
 800d30c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d310:	4b71      	ldr	r3, [pc, #452]	@ (800d4d8 <_dtoa_r+0x5d0>)
 800d312:	2200      	movs	r2, #0
 800d314:	f7f2 ffc0 	bl	8000298 <__aeabi_dsub>
 800d318:	4602      	mov	r2, r0
 800d31a:	460b      	mov	r3, r1
 800d31c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d320:	462a      	mov	r2, r5
 800d322:	4633      	mov	r3, r6
 800d324:	f7f3 fc00 	bl	8000b28 <__aeabi_dcmpgt>
 800d328:	2800      	cmp	r0, #0
 800d32a:	f040 828b 	bne.w	800d844 <_dtoa_r+0x93c>
 800d32e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d332:	462a      	mov	r2, r5
 800d334:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d338:	f7f3 fbd8 	bl	8000aec <__aeabi_dcmplt>
 800d33c:	2800      	cmp	r0, #0
 800d33e:	f040 8128 	bne.w	800d592 <_dtoa_r+0x68a>
 800d342:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d346:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d34a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	f2c0 815a 	blt.w	800d606 <_dtoa_r+0x6fe>
 800d352:	2f0e      	cmp	r7, #14
 800d354:	f300 8157 	bgt.w	800d606 <_dtoa_r+0x6fe>
 800d358:	4b5a      	ldr	r3, [pc, #360]	@ (800d4c4 <_dtoa_r+0x5bc>)
 800d35a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d35e:	ed93 7b00 	vldr	d7, [r3]
 800d362:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d364:	2b00      	cmp	r3, #0
 800d366:	ed8d 7b00 	vstr	d7, [sp]
 800d36a:	da03      	bge.n	800d374 <_dtoa_r+0x46c>
 800d36c:	9b07      	ldr	r3, [sp, #28]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	f340 8101 	ble.w	800d576 <_dtoa_r+0x66e>
 800d374:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d378:	4656      	mov	r6, sl
 800d37a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d37e:	4620      	mov	r0, r4
 800d380:	4629      	mov	r1, r5
 800d382:	f7f3 fa6b 	bl	800085c <__aeabi_ddiv>
 800d386:	f7f3 fbef 	bl	8000b68 <__aeabi_d2iz>
 800d38a:	4680      	mov	r8, r0
 800d38c:	f7f3 f8d2 	bl	8000534 <__aeabi_i2d>
 800d390:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d394:	f7f3 f938 	bl	8000608 <__aeabi_dmul>
 800d398:	4602      	mov	r2, r0
 800d39a:	460b      	mov	r3, r1
 800d39c:	4620      	mov	r0, r4
 800d39e:	4629      	mov	r1, r5
 800d3a0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d3a4:	f7f2 ff78 	bl	8000298 <__aeabi_dsub>
 800d3a8:	f806 4b01 	strb.w	r4, [r6], #1
 800d3ac:	9d07      	ldr	r5, [sp, #28]
 800d3ae:	eba6 040a 	sub.w	r4, r6, sl
 800d3b2:	42a5      	cmp	r5, r4
 800d3b4:	4602      	mov	r2, r0
 800d3b6:	460b      	mov	r3, r1
 800d3b8:	f040 8117 	bne.w	800d5ea <_dtoa_r+0x6e2>
 800d3bc:	f7f2 ff6e 	bl	800029c <__adddf3>
 800d3c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d3c4:	4604      	mov	r4, r0
 800d3c6:	460d      	mov	r5, r1
 800d3c8:	f7f3 fbae 	bl	8000b28 <__aeabi_dcmpgt>
 800d3cc:	2800      	cmp	r0, #0
 800d3ce:	f040 80f9 	bne.w	800d5c4 <_dtoa_r+0x6bc>
 800d3d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d3d6:	4620      	mov	r0, r4
 800d3d8:	4629      	mov	r1, r5
 800d3da:	f7f3 fb7d 	bl	8000ad8 <__aeabi_dcmpeq>
 800d3de:	b118      	cbz	r0, 800d3e8 <_dtoa_r+0x4e0>
 800d3e0:	f018 0f01 	tst.w	r8, #1
 800d3e4:	f040 80ee 	bne.w	800d5c4 <_dtoa_r+0x6bc>
 800d3e8:	4649      	mov	r1, r9
 800d3ea:	4658      	mov	r0, fp
 800d3ec:	f000 fbda 	bl	800dba4 <_Bfree>
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	7033      	strb	r3, [r6, #0]
 800d3f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d3f6:	3701      	adds	r7, #1
 800d3f8:	601f      	str	r7, [r3, #0]
 800d3fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	f000 831d 	beq.w	800da3c <_dtoa_r+0xb34>
 800d402:	601e      	str	r6, [r3, #0]
 800d404:	e31a      	b.n	800da3c <_dtoa_r+0xb34>
 800d406:	07e2      	lsls	r2, r4, #31
 800d408:	d505      	bpl.n	800d416 <_dtoa_r+0x50e>
 800d40a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d40e:	f7f3 f8fb 	bl	8000608 <__aeabi_dmul>
 800d412:	3601      	adds	r6, #1
 800d414:	2301      	movs	r3, #1
 800d416:	1064      	asrs	r4, r4, #1
 800d418:	3508      	adds	r5, #8
 800d41a:	e73f      	b.n	800d29c <_dtoa_r+0x394>
 800d41c:	2602      	movs	r6, #2
 800d41e:	e742      	b.n	800d2a6 <_dtoa_r+0x39e>
 800d420:	9c07      	ldr	r4, [sp, #28]
 800d422:	9704      	str	r7, [sp, #16]
 800d424:	e761      	b.n	800d2ea <_dtoa_r+0x3e2>
 800d426:	4b27      	ldr	r3, [pc, #156]	@ (800d4c4 <_dtoa_r+0x5bc>)
 800d428:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d42a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d42e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d432:	4454      	add	r4, sl
 800d434:	2900      	cmp	r1, #0
 800d436:	d053      	beq.n	800d4e0 <_dtoa_r+0x5d8>
 800d438:	4928      	ldr	r1, [pc, #160]	@ (800d4dc <_dtoa_r+0x5d4>)
 800d43a:	2000      	movs	r0, #0
 800d43c:	f7f3 fa0e 	bl	800085c <__aeabi_ddiv>
 800d440:	4633      	mov	r3, r6
 800d442:	462a      	mov	r2, r5
 800d444:	f7f2 ff28 	bl	8000298 <__aeabi_dsub>
 800d448:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d44c:	4656      	mov	r6, sl
 800d44e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d452:	f7f3 fb89 	bl	8000b68 <__aeabi_d2iz>
 800d456:	4605      	mov	r5, r0
 800d458:	f7f3 f86c 	bl	8000534 <__aeabi_i2d>
 800d45c:	4602      	mov	r2, r0
 800d45e:	460b      	mov	r3, r1
 800d460:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d464:	f7f2 ff18 	bl	8000298 <__aeabi_dsub>
 800d468:	3530      	adds	r5, #48	@ 0x30
 800d46a:	4602      	mov	r2, r0
 800d46c:	460b      	mov	r3, r1
 800d46e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d472:	f806 5b01 	strb.w	r5, [r6], #1
 800d476:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d47a:	f7f3 fb37 	bl	8000aec <__aeabi_dcmplt>
 800d47e:	2800      	cmp	r0, #0
 800d480:	d171      	bne.n	800d566 <_dtoa_r+0x65e>
 800d482:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d486:	4911      	ldr	r1, [pc, #68]	@ (800d4cc <_dtoa_r+0x5c4>)
 800d488:	2000      	movs	r0, #0
 800d48a:	f7f2 ff05 	bl	8000298 <__aeabi_dsub>
 800d48e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d492:	f7f3 fb2b 	bl	8000aec <__aeabi_dcmplt>
 800d496:	2800      	cmp	r0, #0
 800d498:	f040 8095 	bne.w	800d5c6 <_dtoa_r+0x6be>
 800d49c:	42a6      	cmp	r6, r4
 800d49e:	f43f af50 	beq.w	800d342 <_dtoa_r+0x43a>
 800d4a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d4a6:	4b0a      	ldr	r3, [pc, #40]	@ (800d4d0 <_dtoa_r+0x5c8>)
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	f7f3 f8ad 	bl	8000608 <__aeabi_dmul>
 800d4ae:	4b08      	ldr	r3, [pc, #32]	@ (800d4d0 <_dtoa_r+0x5c8>)
 800d4b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4ba:	f7f3 f8a5 	bl	8000608 <__aeabi_dmul>
 800d4be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d4c2:	e7c4      	b.n	800d44e <_dtoa_r+0x546>
 800d4c4:	0800f970 	.word	0x0800f970
 800d4c8:	0800f948 	.word	0x0800f948
 800d4cc:	3ff00000 	.word	0x3ff00000
 800d4d0:	40240000 	.word	0x40240000
 800d4d4:	401c0000 	.word	0x401c0000
 800d4d8:	40140000 	.word	0x40140000
 800d4dc:	3fe00000 	.word	0x3fe00000
 800d4e0:	4631      	mov	r1, r6
 800d4e2:	4628      	mov	r0, r5
 800d4e4:	f7f3 f890 	bl	8000608 <__aeabi_dmul>
 800d4e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d4ec:	9415      	str	r4, [sp, #84]	@ 0x54
 800d4ee:	4656      	mov	r6, sl
 800d4f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4f4:	f7f3 fb38 	bl	8000b68 <__aeabi_d2iz>
 800d4f8:	4605      	mov	r5, r0
 800d4fa:	f7f3 f81b 	bl	8000534 <__aeabi_i2d>
 800d4fe:	4602      	mov	r2, r0
 800d500:	460b      	mov	r3, r1
 800d502:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d506:	f7f2 fec7 	bl	8000298 <__aeabi_dsub>
 800d50a:	3530      	adds	r5, #48	@ 0x30
 800d50c:	f806 5b01 	strb.w	r5, [r6], #1
 800d510:	4602      	mov	r2, r0
 800d512:	460b      	mov	r3, r1
 800d514:	42a6      	cmp	r6, r4
 800d516:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d51a:	f04f 0200 	mov.w	r2, #0
 800d51e:	d124      	bne.n	800d56a <_dtoa_r+0x662>
 800d520:	4bac      	ldr	r3, [pc, #688]	@ (800d7d4 <_dtoa_r+0x8cc>)
 800d522:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d526:	f7f2 feb9 	bl	800029c <__adddf3>
 800d52a:	4602      	mov	r2, r0
 800d52c:	460b      	mov	r3, r1
 800d52e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d532:	f7f3 faf9 	bl	8000b28 <__aeabi_dcmpgt>
 800d536:	2800      	cmp	r0, #0
 800d538:	d145      	bne.n	800d5c6 <_dtoa_r+0x6be>
 800d53a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d53e:	49a5      	ldr	r1, [pc, #660]	@ (800d7d4 <_dtoa_r+0x8cc>)
 800d540:	2000      	movs	r0, #0
 800d542:	f7f2 fea9 	bl	8000298 <__aeabi_dsub>
 800d546:	4602      	mov	r2, r0
 800d548:	460b      	mov	r3, r1
 800d54a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d54e:	f7f3 facd 	bl	8000aec <__aeabi_dcmplt>
 800d552:	2800      	cmp	r0, #0
 800d554:	f43f aef5 	beq.w	800d342 <_dtoa_r+0x43a>
 800d558:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d55a:	1e73      	subs	r3, r6, #1
 800d55c:	9315      	str	r3, [sp, #84]	@ 0x54
 800d55e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d562:	2b30      	cmp	r3, #48	@ 0x30
 800d564:	d0f8      	beq.n	800d558 <_dtoa_r+0x650>
 800d566:	9f04      	ldr	r7, [sp, #16]
 800d568:	e73e      	b.n	800d3e8 <_dtoa_r+0x4e0>
 800d56a:	4b9b      	ldr	r3, [pc, #620]	@ (800d7d8 <_dtoa_r+0x8d0>)
 800d56c:	f7f3 f84c 	bl	8000608 <__aeabi_dmul>
 800d570:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d574:	e7bc      	b.n	800d4f0 <_dtoa_r+0x5e8>
 800d576:	d10c      	bne.n	800d592 <_dtoa_r+0x68a>
 800d578:	4b98      	ldr	r3, [pc, #608]	@ (800d7dc <_dtoa_r+0x8d4>)
 800d57a:	2200      	movs	r2, #0
 800d57c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d580:	f7f3 f842 	bl	8000608 <__aeabi_dmul>
 800d584:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d588:	f7f3 fac4 	bl	8000b14 <__aeabi_dcmpge>
 800d58c:	2800      	cmp	r0, #0
 800d58e:	f000 8157 	beq.w	800d840 <_dtoa_r+0x938>
 800d592:	2400      	movs	r4, #0
 800d594:	4625      	mov	r5, r4
 800d596:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d598:	43db      	mvns	r3, r3
 800d59a:	9304      	str	r3, [sp, #16]
 800d59c:	4656      	mov	r6, sl
 800d59e:	2700      	movs	r7, #0
 800d5a0:	4621      	mov	r1, r4
 800d5a2:	4658      	mov	r0, fp
 800d5a4:	f000 fafe 	bl	800dba4 <_Bfree>
 800d5a8:	2d00      	cmp	r5, #0
 800d5aa:	d0dc      	beq.n	800d566 <_dtoa_r+0x65e>
 800d5ac:	b12f      	cbz	r7, 800d5ba <_dtoa_r+0x6b2>
 800d5ae:	42af      	cmp	r7, r5
 800d5b0:	d003      	beq.n	800d5ba <_dtoa_r+0x6b2>
 800d5b2:	4639      	mov	r1, r7
 800d5b4:	4658      	mov	r0, fp
 800d5b6:	f000 faf5 	bl	800dba4 <_Bfree>
 800d5ba:	4629      	mov	r1, r5
 800d5bc:	4658      	mov	r0, fp
 800d5be:	f000 faf1 	bl	800dba4 <_Bfree>
 800d5c2:	e7d0      	b.n	800d566 <_dtoa_r+0x65e>
 800d5c4:	9704      	str	r7, [sp, #16]
 800d5c6:	4633      	mov	r3, r6
 800d5c8:	461e      	mov	r6, r3
 800d5ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d5ce:	2a39      	cmp	r2, #57	@ 0x39
 800d5d0:	d107      	bne.n	800d5e2 <_dtoa_r+0x6da>
 800d5d2:	459a      	cmp	sl, r3
 800d5d4:	d1f8      	bne.n	800d5c8 <_dtoa_r+0x6c0>
 800d5d6:	9a04      	ldr	r2, [sp, #16]
 800d5d8:	3201      	adds	r2, #1
 800d5da:	9204      	str	r2, [sp, #16]
 800d5dc:	2230      	movs	r2, #48	@ 0x30
 800d5de:	f88a 2000 	strb.w	r2, [sl]
 800d5e2:	781a      	ldrb	r2, [r3, #0]
 800d5e4:	3201      	adds	r2, #1
 800d5e6:	701a      	strb	r2, [r3, #0]
 800d5e8:	e7bd      	b.n	800d566 <_dtoa_r+0x65e>
 800d5ea:	4b7b      	ldr	r3, [pc, #492]	@ (800d7d8 <_dtoa_r+0x8d0>)
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	f7f3 f80b 	bl	8000608 <__aeabi_dmul>
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	4604      	mov	r4, r0
 800d5f8:	460d      	mov	r5, r1
 800d5fa:	f7f3 fa6d 	bl	8000ad8 <__aeabi_dcmpeq>
 800d5fe:	2800      	cmp	r0, #0
 800d600:	f43f aebb 	beq.w	800d37a <_dtoa_r+0x472>
 800d604:	e6f0      	b.n	800d3e8 <_dtoa_r+0x4e0>
 800d606:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d608:	2a00      	cmp	r2, #0
 800d60a:	f000 80db 	beq.w	800d7c4 <_dtoa_r+0x8bc>
 800d60e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d610:	2a01      	cmp	r2, #1
 800d612:	f300 80bf 	bgt.w	800d794 <_dtoa_r+0x88c>
 800d616:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d618:	2a00      	cmp	r2, #0
 800d61a:	f000 80b7 	beq.w	800d78c <_dtoa_r+0x884>
 800d61e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d622:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d624:	4646      	mov	r6, r8
 800d626:	9a08      	ldr	r2, [sp, #32]
 800d628:	2101      	movs	r1, #1
 800d62a:	441a      	add	r2, r3
 800d62c:	4658      	mov	r0, fp
 800d62e:	4498      	add	r8, r3
 800d630:	9208      	str	r2, [sp, #32]
 800d632:	f000 fb6b 	bl	800dd0c <__i2b>
 800d636:	4605      	mov	r5, r0
 800d638:	b15e      	cbz	r6, 800d652 <_dtoa_r+0x74a>
 800d63a:	9b08      	ldr	r3, [sp, #32]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	dd08      	ble.n	800d652 <_dtoa_r+0x74a>
 800d640:	42b3      	cmp	r3, r6
 800d642:	9a08      	ldr	r2, [sp, #32]
 800d644:	bfa8      	it	ge
 800d646:	4633      	movge	r3, r6
 800d648:	eba8 0803 	sub.w	r8, r8, r3
 800d64c:	1af6      	subs	r6, r6, r3
 800d64e:	1ad3      	subs	r3, r2, r3
 800d650:	9308      	str	r3, [sp, #32]
 800d652:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d654:	b1f3      	cbz	r3, 800d694 <_dtoa_r+0x78c>
 800d656:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d658:	2b00      	cmp	r3, #0
 800d65a:	f000 80b7 	beq.w	800d7cc <_dtoa_r+0x8c4>
 800d65e:	b18c      	cbz	r4, 800d684 <_dtoa_r+0x77c>
 800d660:	4629      	mov	r1, r5
 800d662:	4622      	mov	r2, r4
 800d664:	4658      	mov	r0, fp
 800d666:	f000 fc11 	bl	800de8c <__pow5mult>
 800d66a:	464a      	mov	r2, r9
 800d66c:	4601      	mov	r1, r0
 800d66e:	4605      	mov	r5, r0
 800d670:	4658      	mov	r0, fp
 800d672:	f000 fb61 	bl	800dd38 <__multiply>
 800d676:	4649      	mov	r1, r9
 800d678:	9004      	str	r0, [sp, #16]
 800d67a:	4658      	mov	r0, fp
 800d67c:	f000 fa92 	bl	800dba4 <_Bfree>
 800d680:	9b04      	ldr	r3, [sp, #16]
 800d682:	4699      	mov	r9, r3
 800d684:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d686:	1b1a      	subs	r2, r3, r4
 800d688:	d004      	beq.n	800d694 <_dtoa_r+0x78c>
 800d68a:	4649      	mov	r1, r9
 800d68c:	4658      	mov	r0, fp
 800d68e:	f000 fbfd 	bl	800de8c <__pow5mult>
 800d692:	4681      	mov	r9, r0
 800d694:	2101      	movs	r1, #1
 800d696:	4658      	mov	r0, fp
 800d698:	f000 fb38 	bl	800dd0c <__i2b>
 800d69c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d69e:	4604      	mov	r4, r0
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	f000 81cf 	beq.w	800da44 <_dtoa_r+0xb3c>
 800d6a6:	461a      	mov	r2, r3
 800d6a8:	4601      	mov	r1, r0
 800d6aa:	4658      	mov	r0, fp
 800d6ac:	f000 fbee 	bl	800de8c <__pow5mult>
 800d6b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6b2:	2b01      	cmp	r3, #1
 800d6b4:	4604      	mov	r4, r0
 800d6b6:	f300 8095 	bgt.w	800d7e4 <_dtoa_r+0x8dc>
 800d6ba:	9b02      	ldr	r3, [sp, #8]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	f040 8087 	bne.w	800d7d0 <_dtoa_r+0x8c8>
 800d6c2:	9b03      	ldr	r3, [sp, #12]
 800d6c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	f040 8089 	bne.w	800d7e0 <_dtoa_r+0x8d8>
 800d6ce:	9b03      	ldr	r3, [sp, #12]
 800d6d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d6d4:	0d1b      	lsrs	r3, r3, #20
 800d6d6:	051b      	lsls	r3, r3, #20
 800d6d8:	b12b      	cbz	r3, 800d6e6 <_dtoa_r+0x7de>
 800d6da:	9b08      	ldr	r3, [sp, #32]
 800d6dc:	3301      	adds	r3, #1
 800d6de:	9308      	str	r3, [sp, #32]
 800d6e0:	f108 0801 	add.w	r8, r8, #1
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d6e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	f000 81b0 	beq.w	800da50 <_dtoa_r+0xb48>
 800d6f0:	6923      	ldr	r3, [r4, #16]
 800d6f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d6f6:	6918      	ldr	r0, [r3, #16]
 800d6f8:	f000 fabc 	bl	800dc74 <__hi0bits>
 800d6fc:	f1c0 0020 	rsb	r0, r0, #32
 800d700:	9b08      	ldr	r3, [sp, #32]
 800d702:	4418      	add	r0, r3
 800d704:	f010 001f 	ands.w	r0, r0, #31
 800d708:	d077      	beq.n	800d7fa <_dtoa_r+0x8f2>
 800d70a:	f1c0 0320 	rsb	r3, r0, #32
 800d70e:	2b04      	cmp	r3, #4
 800d710:	dd6b      	ble.n	800d7ea <_dtoa_r+0x8e2>
 800d712:	9b08      	ldr	r3, [sp, #32]
 800d714:	f1c0 001c 	rsb	r0, r0, #28
 800d718:	4403      	add	r3, r0
 800d71a:	4480      	add	r8, r0
 800d71c:	4406      	add	r6, r0
 800d71e:	9308      	str	r3, [sp, #32]
 800d720:	f1b8 0f00 	cmp.w	r8, #0
 800d724:	dd05      	ble.n	800d732 <_dtoa_r+0x82a>
 800d726:	4649      	mov	r1, r9
 800d728:	4642      	mov	r2, r8
 800d72a:	4658      	mov	r0, fp
 800d72c:	f000 fc08 	bl	800df40 <__lshift>
 800d730:	4681      	mov	r9, r0
 800d732:	9b08      	ldr	r3, [sp, #32]
 800d734:	2b00      	cmp	r3, #0
 800d736:	dd05      	ble.n	800d744 <_dtoa_r+0x83c>
 800d738:	4621      	mov	r1, r4
 800d73a:	461a      	mov	r2, r3
 800d73c:	4658      	mov	r0, fp
 800d73e:	f000 fbff 	bl	800df40 <__lshift>
 800d742:	4604      	mov	r4, r0
 800d744:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d746:	2b00      	cmp	r3, #0
 800d748:	d059      	beq.n	800d7fe <_dtoa_r+0x8f6>
 800d74a:	4621      	mov	r1, r4
 800d74c:	4648      	mov	r0, r9
 800d74e:	f000 fc63 	bl	800e018 <__mcmp>
 800d752:	2800      	cmp	r0, #0
 800d754:	da53      	bge.n	800d7fe <_dtoa_r+0x8f6>
 800d756:	1e7b      	subs	r3, r7, #1
 800d758:	9304      	str	r3, [sp, #16]
 800d75a:	4649      	mov	r1, r9
 800d75c:	2300      	movs	r3, #0
 800d75e:	220a      	movs	r2, #10
 800d760:	4658      	mov	r0, fp
 800d762:	f000 fa41 	bl	800dbe8 <__multadd>
 800d766:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d768:	4681      	mov	r9, r0
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	f000 8172 	beq.w	800da54 <_dtoa_r+0xb4c>
 800d770:	2300      	movs	r3, #0
 800d772:	4629      	mov	r1, r5
 800d774:	220a      	movs	r2, #10
 800d776:	4658      	mov	r0, fp
 800d778:	f000 fa36 	bl	800dbe8 <__multadd>
 800d77c:	9b00      	ldr	r3, [sp, #0]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	4605      	mov	r5, r0
 800d782:	dc67      	bgt.n	800d854 <_dtoa_r+0x94c>
 800d784:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d786:	2b02      	cmp	r3, #2
 800d788:	dc41      	bgt.n	800d80e <_dtoa_r+0x906>
 800d78a:	e063      	b.n	800d854 <_dtoa_r+0x94c>
 800d78c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d78e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d792:	e746      	b.n	800d622 <_dtoa_r+0x71a>
 800d794:	9b07      	ldr	r3, [sp, #28]
 800d796:	1e5c      	subs	r4, r3, #1
 800d798:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d79a:	42a3      	cmp	r3, r4
 800d79c:	bfbf      	itttt	lt
 800d79e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d7a0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d7a2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d7a4:	1ae3      	sublt	r3, r4, r3
 800d7a6:	bfb4      	ite	lt
 800d7a8:	18d2      	addlt	r2, r2, r3
 800d7aa:	1b1c      	subge	r4, r3, r4
 800d7ac:	9b07      	ldr	r3, [sp, #28]
 800d7ae:	bfbc      	itt	lt
 800d7b0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d7b2:	2400      	movlt	r4, #0
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	bfb5      	itete	lt
 800d7b8:	eba8 0603 	sublt.w	r6, r8, r3
 800d7bc:	9b07      	ldrge	r3, [sp, #28]
 800d7be:	2300      	movlt	r3, #0
 800d7c0:	4646      	movge	r6, r8
 800d7c2:	e730      	b.n	800d626 <_dtoa_r+0x71e>
 800d7c4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d7c6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d7c8:	4646      	mov	r6, r8
 800d7ca:	e735      	b.n	800d638 <_dtoa_r+0x730>
 800d7cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d7ce:	e75c      	b.n	800d68a <_dtoa_r+0x782>
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	e788      	b.n	800d6e6 <_dtoa_r+0x7de>
 800d7d4:	3fe00000 	.word	0x3fe00000
 800d7d8:	40240000 	.word	0x40240000
 800d7dc:	40140000 	.word	0x40140000
 800d7e0:	9b02      	ldr	r3, [sp, #8]
 800d7e2:	e780      	b.n	800d6e6 <_dtoa_r+0x7de>
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d7e8:	e782      	b.n	800d6f0 <_dtoa_r+0x7e8>
 800d7ea:	d099      	beq.n	800d720 <_dtoa_r+0x818>
 800d7ec:	9a08      	ldr	r2, [sp, #32]
 800d7ee:	331c      	adds	r3, #28
 800d7f0:	441a      	add	r2, r3
 800d7f2:	4498      	add	r8, r3
 800d7f4:	441e      	add	r6, r3
 800d7f6:	9208      	str	r2, [sp, #32]
 800d7f8:	e792      	b.n	800d720 <_dtoa_r+0x818>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	e7f6      	b.n	800d7ec <_dtoa_r+0x8e4>
 800d7fe:	9b07      	ldr	r3, [sp, #28]
 800d800:	9704      	str	r7, [sp, #16]
 800d802:	2b00      	cmp	r3, #0
 800d804:	dc20      	bgt.n	800d848 <_dtoa_r+0x940>
 800d806:	9300      	str	r3, [sp, #0]
 800d808:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d80a:	2b02      	cmp	r3, #2
 800d80c:	dd1e      	ble.n	800d84c <_dtoa_r+0x944>
 800d80e:	9b00      	ldr	r3, [sp, #0]
 800d810:	2b00      	cmp	r3, #0
 800d812:	f47f aec0 	bne.w	800d596 <_dtoa_r+0x68e>
 800d816:	4621      	mov	r1, r4
 800d818:	2205      	movs	r2, #5
 800d81a:	4658      	mov	r0, fp
 800d81c:	f000 f9e4 	bl	800dbe8 <__multadd>
 800d820:	4601      	mov	r1, r0
 800d822:	4604      	mov	r4, r0
 800d824:	4648      	mov	r0, r9
 800d826:	f000 fbf7 	bl	800e018 <__mcmp>
 800d82a:	2800      	cmp	r0, #0
 800d82c:	f77f aeb3 	ble.w	800d596 <_dtoa_r+0x68e>
 800d830:	4656      	mov	r6, sl
 800d832:	2331      	movs	r3, #49	@ 0x31
 800d834:	f806 3b01 	strb.w	r3, [r6], #1
 800d838:	9b04      	ldr	r3, [sp, #16]
 800d83a:	3301      	adds	r3, #1
 800d83c:	9304      	str	r3, [sp, #16]
 800d83e:	e6ae      	b.n	800d59e <_dtoa_r+0x696>
 800d840:	9c07      	ldr	r4, [sp, #28]
 800d842:	9704      	str	r7, [sp, #16]
 800d844:	4625      	mov	r5, r4
 800d846:	e7f3      	b.n	800d830 <_dtoa_r+0x928>
 800d848:	9b07      	ldr	r3, [sp, #28]
 800d84a:	9300      	str	r3, [sp, #0]
 800d84c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d84e:	2b00      	cmp	r3, #0
 800d850:	f000 8104 	beq.w	800da5c <_dtoa_r+0xb54>
 800d854:	2e00      	cmp	r6, #0
 800d856:	dd05      	ble.n	800d864 <_dtoa_r+0x95c>
 800d858:	4629      	mov	r1, r5
 800d85a:	4632      	mov	r2, r6
 800d85c:	4658      	mov	r0, fp
 800d85e:	f000 fb6f 	bl	800df40 <__lshift>
 800d862:	4605      	mov	r5, r0
 800d864:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d866:	2b00      	cmp	r3, #0
 800d868:	d05a      	beq.n	800d920 <_dtoa_r+0xa18>
 800d86a:	6869      	ldr	r1, [r5, #4]
 800d86c:	4658      	mov	r0, fp
 800d86e:	f000 f959 	bl	800db24 <_Balloc>
 800d872:	4606      	mov	r6, r0
 800d874:	b928      	cbnz	r0, 800d882 <_dtoa_r+0x97a>
 800d876:	4b84      	ldr	r3, [pc, #528]	@ (800da88 <_dtoa_r+0xb80>)
 800d878:	4602      	mov	r2, r0
 800d87a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d87e:	f7ff bb5a 	b.w	800cf36 <_dtoa_r+0x2e>
 800d882:	692a      	ldr	r2, [r5, #16]
 800d884:	3202      	adds	r2, #2
 800d886:	0092      	lsls	r2, r2, #2
 800d888:	f105 010c 	add.w	r1, r5, #12
 800d88c:	300c      	adds	r0, #12
 800d88e:	f000 fee9 	bl	800e664 <memcpy>
 800d892:	2201      	movs	r2, #1
 800d894:	4631      	mov	r1, r6
 800d896:	4658      	mov	r0, fp
 800d898:	f000 fb52 	bl	800df40 <__lshift>
 800d89c:	f10a 0301 	add.w	r3, sl, #1
 800d8a0:	9307      	str	r3, [sp, #28]
 800d8a2:	9b00      	ldr	r3, [sp, #0]
 800d8a4:	4453      	add	r3, sl
 800d8a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d8a8:	9b02      	ldr	r3, [sp, #8]
 800d8aa:	f003 0301 	and.w	r3, r3, #1
 800d8ae:	462f      	mov	r7, r5
 800d8b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800d8b2:	4605      	mov	r5, r0
 800d8b4:	9b07      	ldr	r3, [sp, #28]
 800d8b6:	4621      	mov	r1, r4
 800d8b8:	3b01      	subs	r3, #1
 800d8ba:	4648      	mov	r0, r9
 800d8bc:	9300      	str	r3, [sp, #0]
 800d8be:	f7ff fa98 	bl	800cdf2 <quorem>
 800d8c2:	4639      	mov	r1, r7
 800d8c4:	9002      	str	r0, [sp, #8]
 800d8c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d8ca:	4648      	mov	r0, r9
 800d8cc:	f000 fba4 	bl	800e018 <__mcmp>
 800d8d0:	462a      	mov	r2, r5
 800d8d2:	9008      	str	r0, [sp, #32]
 800d8d4:	4621      	mov	r1, r4
 800d8d6:	4658      	mov	r0, fp
 800d8d8:	f000 fbba 	bl	800e050 <__mdiff>
 800d8dc:	68c2      	ldr	r2, [r0, #12]
 800d8de:	4606      	mov	r6, r0
 800d8e0:	bb02      	cbnz	r2, 800d924 <_dtoa_r+0xa1c>
 800d8e2:	4601      	mov	r1, r0
 800d8e4:	4648      	mov	r0, r9
 800d8e6:	f000 fb97 	bl	800e018 <__mcmp>
 800d8ea:	4602      	mov	r2, r0
 800d8ec:	4631      	mov	r1, r6
 800d8ee:	4658      	mov	r0, fp
 800d8f0:	920e      	str	r2, [sp, #56]	@ 0x38
 800d8f2:	f000 f957 	bl	800dba4 <_Bfree>
 800d8f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d8fa:	9e07      	ldr	r6, [sp, #28]
 800d8fc:	ea43 0102 	orr.w	r1, r3, r2
 800d900:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d902:	4319      	orrs	r1, r3
 800d904:	d110      	bne.n	800d928 <_dtoa_r+0xa20>
 800d906:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d90a:	d029      	beq.n	800d960 <_dtoa_r+0xa58>
 800d90c:	9b08      	ldr	r3, [sp, #32]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	dd02      	ble.n	800d918 <_dtoa_r+0xa10>
 800d912:	9b02      	ldr	r3, [sp, #8]
 800d914:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d918:	9b00      	ldr	r3, [sp, #0]
 800d91a:	f883 8000 	strb.w	r8, [r3]
 800d91e:	e63f      	b.n	800d5a0 <_dtoa_r+0x698>
 800d920:	4628      	mov	r0, r5
 800d922:	e7bb      	b.n	800d89c <_dtoa_r+0x994>
 800d924:	2201      	movs	r2, #1
 800d926:	e7e1      	b.n	800d8ec <_dtoa_r+0x9e4>
 800d928:	9b08      	ldr	r3, [sp, #32]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	db04      	blt.n	800d938 <_dtoa_r+0xa30>
 800d92e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d930:	430b      	orrs	r3, r1
 800d932:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d934:	430b      	orrs	r3, r1
 800d936:	d120      	bne.n	800d97a <_dtoa_r+0xa72>
 800d938:	2a00      	cmp	r2, #0
 800d93a:	dded      	ble.n	800d918 <_dtoa_r+0xa10>
 800d93c:	4649      	mov	r1, r9
 800d93e:	2201      	movs	r2, #1
 800d940:	4658      	mov	r0, fp
 800d942:	f000 fafd 	bl	800df40 <__lshift>
 800d946:	4621      	mov	r1, r4
 800d948:	4681      	mov	r9, r0
 800d94a:	f000 fb65 	bl	800e018 <__mcmp>
 800d94e:	2800      	cmp	r0, #0
 800d950:	dc03      	bgt.n	800d95a <_dtoa_r+0xa52>
 800d952:	d1e1      	bne.n	800d918 <_dtoa_r+0xa10>
 800d954:	f018 0f01 	tst.w	r8, #1
 800d958:	d0de      	beq.n	800d918 <_dtoa_r+0xa10>
 800d95a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d95e:	d1d8      	bne.n	800d912 <_dtoa_r+0xa0a>
 800d960:	9a00      	ldr	r2, [sp, #0]
 800d962:	2339      	movs	r3, #57	@ 0x39
 800d964:	7013      	strb	r3, [r2, #0]
 800d966:	4633      	mov	r3, r6
 800d968:	461e      	mov	r6, r3
 800d96a:	3b01      	subs	r3, #1
 800d96c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d970:	2a39      	cmp	r2, #57	@ 0x39
 800d972:	d052      	beq.n	800da1a <_dtoa_r+0xb12>
 800d974:	3201      	adds	r2, #1
 800d976:	701a      	strb	r2, [r3, #0]
 800d978:	e612      	b.n	800d5a0 <_dtoa_r+0x698>
 800d97a:	2a00      	cmp	r2, #0
 800d97c:	dd07      	ble.n	800d98e <_dtoa_r+0xa86>
 800d97e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d982:	d0ed      	beq.n	800d960 <_dtoa_r+0xa58>
 800d984:	9a00      	ldr	r2, [sp, #0]
 800d986:	f108 0301 	add.w	r3, r8, #1
 800d98a:	7013      	strb	r3, [r2, #0]
 800d98c:	e608      	b.n	800d5a0 <_dtoa_r+0x698>
 800d98e:	9b07      	ldr	r3, [sp, #28]
 800d990:	9a07      	ldr	r2, [sp, #28]
 800d992:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d996:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d998:	4293      	cmp	r3, r2
 800d99a:	d028      	beq.n	800d9ee <_dtoa_r+0xae6>
 800d99c:	4649      	mov	r1, r9
 800d99e:	2300      	movs	r3, #0
 800d9a0:	220a      	movs	r2, #10
 800d9a2:	4658      	mov	r0, fp
 800d9a4:	f000 f920 	bl	800dbe8 <__multadd>
 800d9a8:	42af      	cmp	r7, r5
 800d9aa:	4681      	mov	r9, r0
 800d9ac:	f04f 0300 	mov.w	r3, #0
 800d9b0:	f04f 020a 	mov.w	r2, #10
 800d9b4:	4639      	mov	r1, r7
 800d9b6:	4658      	mov	r0, fp
 800d9b8:	d107      	bne.n	800d9ca <_dtoa_r+0xac2>
 800d9ba:	f000 f915 	bl	800dbe8 <__multadd>
 800d9be:	4607      	mov	r7, r0
 800d9c0:	4605      	mov	r5, r0
 800d9c2:	9b07      	ldr	r3, [sp, #28]
 800d9c4:	3301      	adds	r3, #1
 800d9c6:	9307      	str	r3, [sp, #28]
 800d9c8:	e774      	b.n	800d8b4 <_dtoa_r+0x9ac>
 800d9ca:	f000 f90d 	bl	800dbe8 <__multadd>
 800d9ce:	4629      	mov	r1, r5
 800d9d0:	4607      	mov	r7, r0
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	220a      	movs	r2, #10
 800d9d6:	4658      	mov	r0, fp
 800d9d8:	f000 f906 	bl	800dbe8 <__multadd>
 800d9dc:	4605      	mov	r5, r0
 800d9de:	e7f0      	b.n	800d9c2 <_dtoa_r+0xaba>
 800d9e0:	9b00      	ldr	r3, [sp, #0]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	bfcc      	ite	gt
 800d9e6:	461e      	movgt	r6, r3
 800d9e8:	2601      	movle	r6, #1
 800d9ea:	4456      	add	r6, sl
 800d9ec:	2700      	movs	r7, #0
 800d9ee:	4649      	mov	r1, r9
 800d9f0:	2201      	movs	r2, #1
 800d9f2:	4658      	mov	r0, fp
 800d9f4:	f000 faa4 	bl	800df40 <__lshift>
 800d9f8:	4621      	mov	r1, r4
 800d9fa:	4681      	mov	r9, r0
 800d9fc:	f000 fb0c 	bl	800e018 <__mcmp>
 800da00:	2800      	cmp	r0, #0
 800da02:	dcb0      	bgt.n	800d966 <_dtoa_r+0xa5e>
 800da04:	d102      	bne.n	800da0c <_dtoa_r+0xb04>
 800da06:	f018 0f01 	tst.w	r8, #1
 800da0a:	d1ac      	bne.n	800d966 <_dtoa_r+0xa5e>
 800da0c:	4633      	mov	r3, r6
 800da0e:	461e      	mov	r6, r3
 800da10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800da14:	2a30      	cmp	r2, #48	@ 0x30
 800da16:	d0fa      	beq.n	800da0e <_dtoa_r+0xb06>
 800da18:	e5c2      	b.n	800d5a0 <_dtoa_r+0x698>
 800da1a:	459a      	cmp	sl, r3
 800da1c:	d1a4      	bne.n	800d968 <_dtoa_r+0xa60>
 800da1e:	9b04      	ldr	r3, [sp, #16]
 800da20:	3301      	adds	r3, #1
 800da22:	9304      	str	r3, [sp, #16]
 800da24:	2331      	movs	r3, #49	@ 0x31
 800da26:	f88a 3000 	strb.w	r3, [sl]
 800da2a:	e5b9      	b.n	800d5a0 <_dtoa_r+0x698>
 800da2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800da2e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800da8c <_dtoa_r+0xb84>
 800da32:	b11b      	cbz	r3, 800da3c <_dtoa_r+0xb34>
 800da34:	f10a 0308 	add.w	r3, sl, #8
 800da38:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800da3a:	6013      	str	r3, [r2, #0]
 800da3c:	4650      	mov	r0, sl
 800da3e:	b019      	add	sp, #100	@ 0x64
 800da40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da46:	2b01      	cmp	r3, #1
 800da48:	f77f ae37 	ble.w	800d6ba <_dtoa_r+0x7b2>
 800da4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800da50:	2001      	movs	r0, #1
 800da52:	e655      	b.n	800d700 <_dtoa_r+0x7f8>
 800da54:	9b00      	ldr	r3, [sp, #0]
 800da56:	2b00      	cmp	r3, #0
 800da58:	f77f aed6 	ble.w	800d808 <_dtoa_r+0x900>
 800da5c:	4656      	mov	r6, sl
 800da5e:	4621      	mov	r1, r4
 800da60:	4648      	mov	r0, r9
 800da62:	f7ff f9c6 	bl	800cdf2 <quorem>
 800da66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800da6a:	f806 8b01 	strb.w	r8, [r6], #1
 800da6e:	9b00      	ldr	r3, [sp, #0]
 800da70:	eba6 020a 	sub.w	r2, r6, sl
 800da74:	4293      	cmp	r3, r2
 800da76:	ddb3      	ble.n	800d9e0 <_dtoa_r+0xad8>
 800da78:	4649      	mov	r1, r9
 800da7a:	2300      	movs	r3, #0
 800da7c:	220a      	movs	r2, #10
 800da7e:	4658      	mov	r0, fp
 800da80:	f000 f8b2 	bl	800dbe8 <__multadd>
 800da84:	4681      	mov	r9, r0
 800da86:	e7ea      	b.n	800da5e <_dtoa_r+0xb56>
 800da88:	0800f8cc 	.word	0x0800f8cc
 800da8c:	0800f850 	.word	0x0800f850

0800da90 <_free_r>:
 800da90:	b538      	push	{r3, r4, r5, lr}
 800da92:	4605      	mov	r5, r0
 800da94:	2900      	cmp	r1, #0
 800da96:	d041      	beq.n	800db1c <_free_r+0x8c>
 800da98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da9c:	1f0c      	subs	r4, r1, #4
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	bfb8      	it	lt
 800daa2:	18e4      	addlt	r4, r4, r3
 800daa4:	f7fe fb40 	bl	800c128 <__malloc_lock>
 800daa8:	4a1d      	ldr	r2, [pc, #116]	@ (800db20 <_free_r+0x90>)
 800daaa:	6813      	ldr	r3, [r2, #0]
 800daac:	b933      	cbnz	r3, 800dabc <_free_r+0x2c>
 800daae:	6063      	str	r3, [r4, #4]
 800dab0:	6014      	str	r4, [r2, #0]
 800dab2:	4628      	mov	r0, r5
 800dab4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dab8:	f7fe bb3c 	b.w	800c134 <__malloc_unlock>
 800dabc:	42a3      	cmp	r3, r4
 800dabe:	d908      	bls.n	800dad2 <_free_r+0x42>
 800dac0:	6820      	ldr	r0, [r4, #0]
 800dac2:	1821      	adds	r1, r4, r0
 800dac4:	428b      	cmp	r3, r1
 800dac6:	bf01      	itttt	eq
 800dac8:	6819      	ldreq	r1, [r3, #0]
 800daca:	685b      	ldreq	r3, [r3, #4]
 800dacc:	1809      	addeq	r1, r1, r0
 800dace:	6021      	streq	r1, [r4, #0]
 800dad0:	e7ed      	b.n	800daae <_free_r+0x1e>
 800dad2:	461a      	mov	r2, r3
 800dad4:	685b      	ldr	r3, [r3, #4]
 800dad6:	b10b      	cbz	r3, 800dadc <_free_r+0x4c>
 800dad8:	42a3      	cmp	r3, r4
 800dada:	d9fa      	bls.n	800dad2 <_free_r+0x42>
 800dadc:	6811      	ldr	r1, [r2, #0]
 800dade:	1850      	adds	r0, r2, r1
 800dae0:	42a0      	cmp	r0, r4
 800dae2:	d10b      	bne.n	800dafc <_free_r+0x6c>
 800dae4:	6820      	ldr	r0, [r4, #0]
 800dae6:	4401      	add	r1, r0
 800dae8:	1850      	adds	r0, r2, r1
 800daea:	4283      	cmp	r3, r0
 800daec:	6011      	str	r1, [r2, #0]
 800daee:	d1e0      	bne.n	800dab2 <_free_r+0x22>
 800daf0:	6818      	ldr	r0, [r3, #0]
 800daf2:	685b      	ldr	r3, [r3, #4]
 800daf4:	6053      	str	r3, [r2, #4]
 800daf6:	4408      	add	r0, r1
 800daf8:	6010      	str	r0, [r2, #0]
 800dafa:	e7da      	b.n	800dab2 <_free_r+0x22>
 800dafc:	d902      	bls.n	800db04 <_free_r+0x74>
 800dafe:	230c      	movs	r3, #12
 800db00:	602b      	str	r3, [r5, #0]
 800db02:	e7d6      	b.n	800dab2 <_free_r+0x22>
 800db04:	6820      	ldr	r0, [r4, #0]
 800db06:	1821      	adds	r1, r4, r0
 800db08:	428b      	cmp	r3, r1
 800db0a:	bf04      	itt	eq
 800db0c:	6819      	ldreq	r1, [r3, #0]
 800db0e:	685b      	ldreq	r3, [r3, #4]
 800db10:	6063      	str	r3, [r4, #4]
 800db12:	bf04      	itt	eq
 800db14:	1809      	addeq	r1, r1, r0
 800db16:	6021      	streq	r1, [r4, #0]
 800db18:	6054      	str	r4, [r2, #4]
 800db1a:	e7ca      	b.n	800dab2 <_free_r+0x22>
 800db1c:	bd38      	pop	{r3, r4, r5, pc}
 800db1e:	bf00      	nop
 800db20:	200004a4 	.word	0x200004a4

0800db24 <_Balloc>:
 800db24:	b570      	push	{r4, r5, r6, lr}
 800db26:	69c6      	ldr	r6, [r0, #28]
 800db28:	4604      	mov	r4, r0
 800db2a:	460d      	mov	r5, r1
 800db2c:	b976      	cbnz	r6, 800db4c <_Balloc+0x28>
 800db2e:	2010      	movs	r0, #16
 800db30:	f7fe fa48 	bl	800bfc4 <malloc>
 800db34:	4602      	mov	r2, r0
 800db36:	61e0      	str	r0, [r4, #28]
 800db38:	b920      	cbnz	r0, 800db44 <_Balloc+0x20>
 800db3a:	4b18      	ldr	r3, [pc, #96]	@ (800db9c <_Balloc+0x78>)
 800db3c:	4818      	ldr	r0, [pc, #96]	@ (800dba0 <_Balloc+0x7c>)
 800db3e:	216b      	movs	r1, #107	@ 0x6b
 800db40:	f000 fd9e 	bl	800e680 <__assert_func>
 800db44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800db48:	6006      	str	r6, [r0, #0]
 800db4a:	60c6      	str	r6, [r0, #12]
 800db4c:	69e6      	ldr	r6, [r4, #28]
 800db4e:	68f3      	ldr	r3, [r6, #12]
 800db50:	b183      	cbz	r3, 800db74 <_Balloc+0x50>
 800db52:	69e3      	ldr	r3, [r4, #28]
 800db54:	68db      	ldr	r3, [r3, #12]
 800db56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800db5a:	b9b8      	cbnz	r0, 800db8c <_Balloc+0x68>
 800db5c:	2101      	movs	r1, #1
 800db5e:	fa01 f605 	lsl.w	r6, r1, r5
 800db62:	1d72      	adds	r2, r6, #5
 800db64:	0092      	lsls	r2, r2, #2
 800db66:	4620      	mov	r0, r4
 800db68:	f000 fda8 	bl	800e6bc <_calloc_r>
 800db6c:	b160      	cbz	r0, 800db88 <_Balloc+0x64>
 800db6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800db72:	e00e      	b.n	800db92 <_Balloc+0x6e>
 800db74:	2221      	movs	r2, #33	@ 0x21
 800db76:	2104      	movs	r1, #4
 800db78:	4620      	mov	r0, r4
 800db7a:	f000 fd9f 	bl	800e6bc <_calloc_r>
 800db7e:	69e3      	ldr	r3, [r4, #28]
 800db80:	60f0      	str	r0, [r6, #12]
 800db82:	68db      	ldr	r3, [r3, #12]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d1e4      	bne.n	800db52 <_Balloc+0x2e>
 800db88:	2000      	movs	r0, #0
 800db8a:	bd70      	pop	{r4, r5, r6, pc}
 800db8c:	6802      	ldr	r2, [r0, #0]
 800db8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800db92:	2300      	movs	r3, #0
 800db94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800db98:	e7f7      	b.n	800db8a <_Balloc+0x66>
 800db9a:	bf00      	nop
 800db9c:	0800f85d 	.word	0x0800f85d
 800dba0:	0800f8dd 	.word	0x0800f8dd

0800dba4 <_Bfree>:
 800dba4:	b570      	push	{r4, r5, r6, lr}
 800dba6:	69c6      	ldr	r6, [r0, #28]
 800dba8:	4605      	mov	r5, r0
 800dbaa:	460c      	mov	r4, r1
 800dbac:	b976      	cbnz	r6, 800dbcc <_Bfree+0x28>
 800dbae:	2010      	movs	r0, #16
 800dbb0:	f7fe fa08 	bl	800bfc4 <malloc>
 800dbb4:	4602      	mov	r2, r0
 800dbb6:	61e8      	str	r0, [r5, #28]
 800dbb8:	b920      	cbnz	r0, 800dbc4 <_Bfree+0x20>
 800dbba:	4b09      	ldr	r3, [pc, #36]	@ (800dbe0 <_Bfree+0x3c>)
 800dbbc:	4809      	ldr	r0, [pc, #36]	@ (800dbe4 <_Bfree+0x40>)
 800dbbe:	218f      	movs	r1, #143	@ 0x8f
 800dbc0:	f000 fd5e 	bl	800e680 <__assert_func>
 800dbc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dbc8:	6006      	str	r6, [r0, #0]
 800dbca:	60c6      	str	r6, [r0, #12]
 800dbcc:	b13c      	cbz	r4, 800dbde <_Bfree+0x3a>
 800dbce:	69eb      	ldr	r3, [r5, #28]
 800dbd0:	6862      	ldr	r2, [r4, #4]
 800dbd2:	68db      	ldr	r3, [r3, #12]
 800dbd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dbd8:	6021      	str	r1, [r4, #0]
 800dbda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dbde:	bd70      	pop	{r4, r5, r6, pc}
 800dbe0:	0800f85d 	.word	0x0800f85d
 800dbe4:	0800f8dd 	.word	0x0800f8dd

0800dbe8 <__multadd>:
 800dbe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbec:	690d      	ldr	r5, [r1, #16]
 800dbee:	4607      	mov	r7, r0
 800dbf0:	460c      	mov	r4, r1
 800dbf2:	461e      	mov	r6, r3
 800dbf4:	f101 0c14 	add.w	ip, r1, #20
 800dbf8:	2000      	movs	r0, #0
 800dbfa:	f8dc 3000 	ldr.w	r3, [ip]
 800dbfe:	b299      	uxth	r1, r3
 800dc00:	fb02 6101 	mla	r1, r2, r1, r6
 800dc04:	0c1e      	lsrs	r6, r3, #16
 800dc06:	0c0b      	lsrs	r3, r1, #16
 800dc08:	fb02 3306 	mla	r3, r2, r6, r3
 800dc0c:	b289      	uxth	r1, r1
 800dc0e:	3001      	adds	r0, #1
 800dc10:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dc14:	4285      	cmp	r5, r0
 800dc16:	f84c 1b04 	str.w	r1, [ip], #4
 800dc1a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dc1e:	dcec      	bgt.n	800dbfa <__multadd+0x12>
 800dc20:	b30e      	cbz	r6, 800dc66 <__multadd+0x7e>
 800dc22:	68a3      	ldr	r3, [r4, #8]
 800dc24:	42ab      	cmp	r3, r5
 800dc26:	dc19      	bgt.n	800dc5c <__multadd+0x74>
 800dc28:	6861      	ldr	r1, [r4, #4]
 800dc2a:	4638      	mov	r0, r7
 800dc2c:	3101      	adds	r1, #1
 800dc2e:	f7ff ff79 	bl	800db24 <_Balloc>
 800dc32:	4680      	mov	r8, r0
 800dc34:	b928      	cbnz	r0, 800dc42 <__multadd+0x5a>
 800dc36:	4602      	mov	r2, r0
 800dc38:	4b0c      	ldr	r3, [pc, #48]	@ (800dc6c <__multadd+0x84>)
 800dc3a:	480d      	ldr	r0, [pc, #52]	@ (800dc70 <__multadd+0x88>)
 800dc3c:	21ba      	movs	r1, #186	@ 0xba
 800dc3e:	f000 fd1f 	bl	800e680 <__assert_func>
 800dc42:	6922      	ldr	r2, [r4, #16]
 800dc44:	3202      	adds	r2, #2
 800dc46:	f104 010c 	add.w	r1, r4, #12
 800dc4a:	0092      	lsls	r2, r2, #2
 800dc4c:	300c      	adds	r0, #12
 800dc4e:	f000 fd09 	bl	800e664 <memcpy>
 800dc52:	4621      	mov	r1, r4
 800dc54:	4638      	mov	r0, r7
 800dc56:	f7ff ffa5 	bl	800dba4 <_Bfree>
 800dc5a:	4644      	mov	r4, r8
 800dc5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dc60:	3501      	adds	r5, #1
 800dc62:	615e      	str	r6, [r3, #20]
 800dc64:	6125      	str	r5, [r4, #16]
 800dc66:	4620      	mov	r0, r4
 800dc68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc6c:	0800f8cc 	.word	0x0800f8cc
 800dc70:	0800f8dd 	.word	0x0800f8dd

0800dc74 <__hi0bits>:
 800dc74:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800dc78:	4603      	mov	r3, r0
 800dc7a:	bf36      	itet	cc
 800dc7c:	0403      	lslcc	r3, r0, #16
 800dc7e:	2000      	movcs	r0, #0
 800dc80:	2010      	movcc	r0, #16
 800dc82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dc86:	bf3c      	itt	cc
 800dc88:	021b      	lslcc	r3, r3, #8
 800dc8a:	3008      	addcc	r0, #8
 800dc8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dc90:	bf3c      	itt	cc
 800dc92:	011b      	lslcc	r3, r3, #4
 800dc94:	3004      	addcc	r0, #4
 800dc96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc9a:	bf3c      	itt	cc
 800dc9c:	009b      	lslcc	r3, r3, #2
 800dc9e:	3002      	addcc	r0, #2
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	db05      	blt.n	800dcb0 <__hi0bits+0x3c>
 800dca4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dca8:	f100 0001 	add.w	r0, r0, #1
 800dcac:	bf08      	it	eq
 800dcae:	2020      	moveq	r0, #32
 800dcb0:	4770      	bx	lr

0800dcb2 <__lo0bits>:
 800dcb2:	6803      	ldr	r3, [r0, #0]
 800dcb4:	4602      	mov	r2, r0
 800dcb6:	f013 0007 	ands.w	r0, r3, #7
 800dcba:	d00b      	beq.n	800dcd4 <__lo0bits+0x22>
 800dcbc:	07d9      	lsls	r1, r3, #31
 800dcbe:	d421      	bmi.n	800dd04 <__lo0bits+0x52>
 800dcc0:	0798      	lsls	r0, r3, #30
 800dcc2:	bf49      	itett	mi
 800dcc4:	085b      	lsrmi	r3, r3, #1
 800dcc6:	089b      	lsrpl	r3, r3, #2
 800dcc8:	2001      	movmi	r0, #1
 800dcca:	6013      	strmi	r3, [r2, #0]
 800dccc:	bf5c      	itt	pl
 800dcce:	6013      	strpl	r3, [r2, #0]
 800dcd0:	2002      	movpl	r0, #2
 800dcd2:	4770      	bx	lr
 800dcd4:	b299      	uxth	r1, r3
 800dcd6:	b909      	cbnz	r1, 800dcdc <__lo0bits+0x2a>
 800dcd8:	0c1b      	lsrs	r3, r3, #16
 800dcda:	2010      	movs	r0, #16
 800dcdc:	b2d9      	uxtb	r1, r3
 800dcde:	b909      	cbnz	r1, 800dce4 <__lo0bits+0x32>
 800dce0:	3008      	adds	r0, #8
 800dce2:	0a1b      	lsrs	r3, r3, #8
 800dce4:	0719      	lsls	r1, r3, #28
 800dce6:	bf04      	itt	eq
 800dce8:	091b      	lsreq	r3, r3, #4
 800dcea:	3004      	addeq	r0, #4
 800dcec:	0799      	lsls	r1, r3, #30
 800dcee:	bf04      	itt	eq
 800dcf0:	089b      	lsreq	r3, r3, #2
 800dcf2:	3002      	addeq	r0, #2
 800dcf4:	07d9      	lsls	r1, r3, #31
 800dcf6:	d403      	bmi.n	800dd00 <__lo0bits+0x4e>
 800dcf8:	085b      	lsrs	r3, r3, #1
 800dcfa:	f100 0001 	add.w	r0, r0, #1
 800dcfe:	d003      	beq.n	800dd08 <__lo0bits+0x56>
 800dd00:	6013      	str	r3, [r2, #0]
 800dd02:	4770      	bx	lr
 800dd04:	2000      	movs	r0, #0
 800dd06:	4770      	bx	lr
 800dd08:	2020      	movs	r0, #32
 800dd0a:	4770      	bx	lr

0800dd0c <__i2b>:
 800dd0c:	b510      	push	{r4, lr}
 800dd0e:	460c      	mov	r4, r1
 800dd10:	2101      	movs	r1, #1
 800dd12:	f7ff ff07 	bl	800db24 <_Balloc>
 800dd16:	4602      	mov	r2, r0
 800dd18:	b928      	cbnz	r0, 800dd26 <__i2b+0x1a>
 800dd1a:	4b05      	ldr	r3, [pc, #20]	@ (800dd30 <__i2b+0x24>)
 800dd1c:	4805      	ldr	r0, [pc, #20]	@ (800dd34 <__i2b+0x28>)
 800dd1e:	f240 1145 	movw	r1, #325	@ 0x145
 800dd22:	f000 fcad 	bl	800e680 <__assert_func>
 800dd26:	2301      	movs	r3, #1
 800dd28:	6144      	str	r4, [r0, #20]
 800dd2a:	6103      	str	r3, [r0, #16]
 800dd2c:	bd10      	pop	{r4, pc}
 800dd2e:	bf00      	nop
 800dd30:	0800f8cc 	.word	0x0800f8cc
 800dd34:	0800f8dd 	.word	0x0800f8dd

0800dd38 <__multiply>:
 800dd38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd3c:	4614      	mov	r4, r2
 800dd3e:	690a      	ldr	r2, [r1, #16]
 800dd40:	6923      	ldr	r3, [r4, #16]
 800dd42:	429a      	cmp	r2, r3
 800dd44:	bfa8      	it	ge
 800dd46:	4623      	movge	r3, r4
 800dd48:	460f      	mov	r7, r1
 800dd4a:	bfa4      	itt	ge
 800dd4c:	460c      	movge	r4, r1
 800dd4e:	461f      	movge	r7, r3
 800dd50:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800dd54:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800dd58:	68a3      	ldr	r3, [r4, #8]
 800dd5a:	6861      	ldr	r1, [r4, #4]
 800dd5c:	eb0a 0609 	add.w	r6, sl, r9
 800dd60:	42b3      	cmp	r3, r6
 800dd62:	b085      	sub	sp, #20
 800dd64:	bfb8      	it	lt
 800dd66:	3101      	addlt	r1, #1
 800dd68:	f7ff fedc 	bl	800db24 <_Balloc>
 800dd6c:	b930      	cbnz	r0, 800dd7c <__multiply+0x44>
 800dd6e:	4602      	mov	r2, r0
 800dd70:	4b44      	ldr	r3, [pc, #272]	@ (800de84 <__multiply+0x14c>)
 800dd72:	4845      	ldr	r0, [pc, #276]	@ (800de88 <__multiply+0x150>)
 800dd74:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800dd78:	f000 fc82 	bl	800e680 <__assert_func>
 800dd7c:	f100 0514 	add.w	r5, r0, #20
 800dd80:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dd84:	462b      	mov	r3, r5
 800dd86:	2200      	movs	r2, #0
 800dd88:	4543      	cmp	r3, r8
 800dd8a:	d321      	bcc.n	800ddd0 <__multiply+0x98>
 800dd8c:	f107 0114 	add.w	r1, r7, #20
 800dd90:	f104 0214 	add.w	r2, r4, #20
 800dd94:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800dd98:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800dd9c:	9302      	str	r3, [sp, #8]
 800dd9e:	1b13      	subs	r3, r2, r4
 800dda0:	3b15      	subs	r3, #21
 800dda2:	f023 0303 	bic.w	r3, r3, #3
 800dda6:	3304      	adds	r3, #4
 800dda8:	f104 0715 	add.w	r7, r4, #21
 800ddac:	42ba      	cmp	r2, r7
 800ddae:	bf38      	it	cc
 800ddb0:	2304      	movcc	r3, #4
 800ddb2:	9301      	str	r3, [sp, #4]
 800ddb4:	9b02      	ldr	r3, [sp, #8]
 800ddb6:	9103      	str	r1, [sp, #12]
 800ddb8:	428b      	cmp	r3, r1
 800ddba:	d80c      	bhi.n	800ddd6 <__multiply+0x9e>
 800ddbc:	2e00      	cmp	r6, #0
 800ddbe:	dd03      	ble.n	800ddc8 <__multiply+0x90>
 800ddc0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d05b      	beq.n	800de80 <__multiply+0x148>
 800ddc8:	6106      	str	r6, [r0, #16]
 800ddca:	b005      	add	sp, #20
 800ddcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddd0:	f843 2b04 	str.w	r2, [r3], #4
 800ddd4:	e7d8      	b.n	800dd88 <__multiply+0x50>
 800ddd6:	f8b1 a000 	ldrh.w	sl, [r1]
 800ddda:	f1ba 0f00 	cmp.w	sl, #0
 800ddde:	d024      	beq.n	800de2a <__multiply+0xf2>
 800dde0:	f104 0e14 	add.w	lr, r4, #20
 800dde4:	46a9      	mov	r9, r5
 800dde6:	f04f 0c00 	mov.w	ip, #0
 800ddea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ddee:	f8d9 3000 	ldr.w	r3, [r9]
 800ddf2:	fa1f fb87 	uxth.w	fp, r7
 800ddf6:	b29b      	uxth	r3, r3
 800ddf8:	fb0a 330b 	mla	r3, sl, fp, r3
 800ddfc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800de00:	f8d9 7000 	ldr.w	r7, [r9]
 800de04:	4463      	add	r3, ip
 800de06:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800de0a:	fb0a c70b 	mla	r7, sl, fp, ip
 800de0e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800de12:	b29b      	uxth	r3, r3
 800de14:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800de18:	4572      	cmp	r2, lr
 800de1a:	f849 3b04 	str.w	r3, [r9], #4
 800de1e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800de22:	d8e2      	bhi.n	800ddea <__multiply+0xb2>
 800de24:	9b01      	ldr	r3, [sp, #4]
 800de26:	f845 c003 	str.w	ip, [r5, r3]
 800de2a:	9b03      	ldr	r3, [sp, #12]
 800de2c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800de30:	3104      	adds	r1, #4
 800de32:	f1b9 0f00 	cmp.w	r9, #0
 800de36:	d021      	beq.n	800de7c <__multiply+0x144>
 800de38:	682b      	ldr	r3, [r5, #0]
 800de3a:	f104 0c14 	add.w	ip, r4, #20
 800de3e:	46ae      	mov	lr, r5
 800de40:	f04f 0a00 	mov.w	sl, #0
 800de44:	f8bc b000 	ldrh.w	fp, [ip]
 800de48:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800de4c:	fb09 770b 	mla	r7, r9, fp, r7
 800de50:	4457      	add	r7, sl
 800de52:	b29b      	uxth	r3, r3
 800de54:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800de58:	f84e 3b04 	str.w	r3, [lr], #4
 800de5c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800de60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800de64:	f8be 3000 	ldrh.w	r3, [lr]
 800de68:	fb09 330a 	mla	r3, r9, sl, r3
 800de6c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800de70:	4562      	cmp	r2, ip
 800de72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800de76:	d8e5      	bhi.n	800de44 <__multiply+0x10c>
 800de78:	9f01      	ldr	r7, [sp, #4]
 800de7a:	51eb      	str	r3, [r5, r7]
 800de7c:	3504      	adds	r5, #4
 800de7e:	e799      	b.n	800ddb4 <__multiply+0x7c>
 800de80:	3e01      	subs	r6, #1
 800de82:	e79b      	b.n	800ddbc <__multiply+0x84>
 800de84:	0800f8cc 	.word	0x0800f8cc
 800de88:	0800f8dd 	.word	0x0800f8dd

0800de8c <__pow5mult>:
 800de8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de90:	4615      	mov	r5, r2
 800de92:	f012 0203 	ands.w	r2, r2, #3
 800de96:	4607      	mov	r7, r0
 800de98:	460e      	mov	r6, r1
 800de9a:	d007      	beq.n	800deac <__pow5mult+0x20>
 800de9c:	4c25      	ldr	r4, [pc, #148]	@ (800df34 <__pow5mult+0xa8>)
 800de9e:	3a01      	subs	r2, #1
 800dea0:	2300      	movs	r3, #0
 800dea2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dea6:	f7ff fe9f 	bl	800dbe8 <__multadd>
 800deaa:	4606      	mov	r6, r0
 800deac:	10ad      	asrs	r5, r5, #2
 800deae:	d03d      	beq.n	800df2c <__pow5mult+0xa0>
 800deb0:	69fc      	ldr	r4, [r7, #28]
 800deb2:	b97c      	cbnz	r4, 800ded4 <__pow5mult+0x48>
 800deb4:	2010      	movs	r0, #16
 800deb6:	f7fe f885 	bl	800bfc4 <malloc>
 800deba:	4602      	mov	r2, r0
 800debc:	61f8      	str	r0, [r7, #28]
 800debe:	b928      	cbnz	r0, 800decc <__pow5mult+0x40>
 800dec0:	4b1d      	ldr	r3, [pc, #116]	@ (800df38 <__pow5mult+0xac>)
 800dec2:	481e      	ldr	r0, [pc, #120]	@ (800df3c <__pow5mult+0xb0>)
 800dec4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800dec8:	f000 fbda 	bl	800e680 <__assert_func>
 800decc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ded0:	6004      	str	r4, [r0, #0]
 800ded2:	60c4      	str	r4, [r0, #12]
 800ded4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ded8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dedc:	b94c      	cbnz	r4, 800def2 <__pow5mult+0x66>
 800dede:	f240 2171 	movw	r1, #625	@ 0x271
 800dee2:	4638      	mov	r0, r7
 800dee4:	f7ff ff12 	bl	800dd0c <__i2b>
 800dee8:	2300      	movs	r3, #0
 800deea:	f8c8 0008 	str.w	r0, [r8, #8]
 800deee:	4604      	mov	r4, r0
 800def0:	6003      	str	r3, [r0, #0]
 800def2:	f04f 0900 	mov.w	r9, #0
 800def6:	07eb      	lsls	r3, r5, #31
 800def8:	d50a      	bpl.n	800df10 <__pow5mult+0x84>
 800defa:	4631      	mov	r1, r6
 800defc:	4622      	mov	r2, r4
 800defe:	4638      	mov	r0, r7
 800df00:	f7ff ff1a 	bl	800dd38 <__multiply>
 800df04:	4631      	mov	r1, r6
 800df06:	4680      	mov	r8, r0
 800df08:	4638      	mov	r0, r7
 800df0a:	f7ff fe4b 	bl	800dba4 <_Bfree>
 800df0e:	4646      	mov	r6, r8
 800df10:	106d      	asrs	r5, r5, #1
 800df12:	d00b      	beq.n	800df2c <__pow5mult+0xa0>
 800df14:	6820      	ldr	r0, [r4, #0]
 800df16:	b938      	cbnz	r0, 800df28 <__pow5mult+0x9c>
 800df18:	4622      	mov	r2, r4
 800df1a:	4621      	mov	r1, r4
 800df1c:	4638      	mov	r0, r7
 800df1e:	f7ff ff0b 	bl	800dd38 <__multiply>
 800df22:	6020      	str	r0, [r4, #0]
 800df24:	f8c0 9000 	str.w	r9, [r0]
 800df28:	4604      	mov	r4, r0
 800df2a:	e7e4      	b.n	800def6 <__pow5mult+0x6a>
 800df2c:	4630      	mov	r0, r6
 800df2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df32:	bf00      	nop
 800df34:	0800f938 	.word	0x0800f938
 800df38:	0800f85d 	.word	0x0800f85d
 800df3c:	0800f8dd 	.word	0x0800f8dd

0800df40 <__lshift>:
 800df40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df44:	460c      	mov	r4, r1
 800df46:	6849      	ldr	r1, [r1, #4]
 800df48:	6923      	ldr	r3, [r4, #16]
 800df4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800df4e:	68a3      	ldr	r3, [r4, #8]
 800df50:	4607      	mov	r7, r0
 800df52:	4691      	mov	r9, r2
 800df54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800df58:	f108 0601 	add.w	r6, r8, #1
 800df5c:	42b3      	cmp	r3, r6
 800df5e:	db0b      	blt.n	800df78 <__lshift+0x38>
 800df60:	4638      	mov	r0, r7
 800df62:	f7ff fddf 	bl	800db24 <_Balloc>
 800df66:	4605      	mov	r5, r0
 800df68:	b948      	cbnz	r0, 800df7e <__lshift+0x3e>
 800df6a:	4602      	mov	r2, r0
 800df6c:	4b28      	ldr	r3, [pc, #160]	@ (800e010 <__lshift+0xd0>)
 800df6e:	4829      	ldr	r0, [pc, #164]	@ (800e014 <__lshift+0xd4>)
 800df70:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800df74:	f000 fb84 	bl	800e680 <__assert_func>
 800df78:	3101      	adds	r1, #1
 800df7a:	005b      	lsls	r3, r3, #1
 800df7c:	e7ee      	b.n	800df5c <__lshift+0x1c>
 800df7e:	2300      	movs	r3, #0
 800df80:	f100 0114 	add.w	r1, r0, #20
 800df84:	f100 0210 	add.w	r2, r0, #16
 800df88:	4618      	mov	r0, r3
 800df8a:	4553      	cmp	r3, sl
 800df8c:	db33      	blt.n	800dff6 <__lshift+0xb6>
 800df8e:	6920      	ldr	r0, [r4, #16]
 800df90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800df94:	f104 0314 	add.w	r3, r4, #20
 800df98:	f019 091f 	ands.w	r9, r9, #31
 800df9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dfa0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dfa4:	d02b      	beq.n	800dffe <__lshift+0xbe>
 800dfa6:	f1c9 0e20 	rsb	lr, r9, #32
 800dfaa:	468a      	mov	sl, r1
 800dfac:	2200      	movs	r2, #0
 800dfae:	6818      	ldr	r0, [r3, #0]
 800dfb0:	fa00 f009 	lsl.w	r0, r0, r9
 800dfb4:	4310      	orrs	r0, r2
 800dfb6:	f84a 0b04 	str.w	r0, [sl], #4
 800dfba:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfbe:	459c      	cmp	ip, r3
 800dfc0:	fa22 f20e 	lsr.w	r2, r2, lr
 800dfc4:	d8f3      	bhi.n	800dfae <__lshift+0x6e>
 800dfc6:	ebac 0304 	sub.w	r3, ip, r4
 800dfca:	3b15      	subs	r3, #21
 800dfcc:	f023 0303 	bic.w	r3, r3, #3
 800dfd0:	3304      	adds	r3, #4
 800dfd2:	f104 0015 	add.w	r0, r4, #21
 800dfd6:	4584      	cmp	ip, r0
 800dfd8:	bf38      	it	cc
 800dfda:	2304      	movcc	r3, #4
 800dfdc:	50ca      	str	r2, [r1, r3]
 800dfde:	b10a      	cbz	r2, 800dfe4 <__lshift+0xa4>
 800dfe0:	f108 0602 	add.w	r6, r8, #2
 800dfe4:	3e01      	subs	r6, #1
 800dfe6:	4638      	mov	r0, r7
 800dfe8:	612e      	str	r6, [r5, #16]
 800dfea:	4621      	mov	r1, r4
 800dfec:	f7ff fdda 	bl	800dba4 <_Bfree>
 800dff0:	4628      	mov	r0, r5
 800dff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dff6:	f842 0f04 	str.w	r0, [r2, #4]!
 800dffa:	3301      	adds	r3, #1
 800dffc:	e7c5      	b.n	800df8a <__lshift+0x4a>
 800dffe:	3904      	subs	r1, #4
 800e000:	f853 2b04 	ldr.w	r2, [r3], #4
 800e004:	f841 2f04 	str.w	r2, [r1, #4]!
 800e008:	459c      	cmp	ip, r3
 800e00a:	d8f9      	bhi.n	800e000 <__lshift+0xc0>
 800e00c:	e7ea      	b.n	800dfe4 <__lshift+0xa4>
 800e00e:	bf00      	nop
 800e010:	0800f8cc 	.word	0x0800f8cc
 800e014:	0800f8dd 	.word	0x0800f8dd

0800e018 <__mcmp>:
 800e018:	690a      	ldr	r2, [r1, #16]
 800e01a:	4603      	mov	r3, r0
 800e01c:	6900      	ldr	r0, [r0, #16]
 800e01e:	1a80      	subs	r0, r0, r2
 800e020:	b530      	push	{r4, r5, lr}
 800e022:	d10e      	bne.n	800e042 <__mcmp+0x2a>
 800e024:	3314      	adds	r3, #20
 800e026:	3114      	adds	r1, #20
 800e028:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e02c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e030:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e034:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e038:	4295      	cmp	r5, r2
 800e03a:	d003      	beq.n	800e044 <__mcmp+0x2c>
 800e03c:	d205      	bcs.n	800e04a <__mcmp+0x32>
 800e03e:	f04f 30ff 	mov.w	r0, #4294967295
 800e042:	bd30      	pop	{r4, r5, pc}
 800e044:	42a3      	cmp	r3, r4
 800e046:	d3f3      	bcc.n	800e030 <__mcmp+0x18>
 800e048:	e7fb      	b.n	800e042 <__mcmp+0x2a>
 800e04a:	2001      	movs	r0, #1
 800e04c:	e7f9      	b.n	800e042 <__mcmp+0x2a>
	...

0800e050 <__mdiff>:
 800e050:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e054:	4689      	mov	r9, r1
 800e056:	4606      	mov	r6, r0
 800e058:	4611      	mov	r1, r2
 800e05a:	4648      	mov	r0, r9
 800e05c:	4614      	mov	r4, r2
 800e05e:	f7ff ffdb 	bl	800e018 <__mcmp>
 800e062:	1e05      	subs	r5, r0, #0
 800e064:	d112      	bne.n	800e08c <__mdiff+0x3c>
 800e066:	4629      	mov	r1, r5
 800e068:	4630      	mov	r0, r6
 800e06a:	f7ff fd5b 	bl	800db24 <_Balloc>
 800e06e:	4602      	mov	r2, r0
 800e070:	b928      	cbnz	r0, 800e07e <__mdiff+0x2e>
 800e072:	4b3f      	ldr	r3, [pc, #252]	@ (800e170 <__mdiff+0x120>)
 800e074:	f240 2137 	movw	r1, #567	@ 0x237
 800e078:	483e      	ldr	r0, [pc, #248]	@ (800e174 <__mdiff+0x124>)
 800e07a:	f000 fb01 	bl	800e680 <__assert_func>
 800e07e:	2301      	movs	r3, #1
 800e080:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e084:	4610      	mov	r0, r2
 800e086:	b003      	add	sp, #12
 800e088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e08c:	bfbc      	itt	lt
 800e08e:	464b      	movlt	r3, r9
 800e090:	46a1      	movlt	r9, r4
 800e092:	4630      	mov	r0, r6
 800e094:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e098:	bfba      	itte	lt
 800e09a:	461c      	movlt	r4, r3
 800e09c:	2501      	movlt	r5, #1
 800e09e:	2500      	movge	r5, #0
 800e0a0:	f7ff fd40 	bl	800db24 <_Balloc>
 800e0a4:	4602      	mov	r2, r0
 800e0a6:	b918      	cbnz	r0, 800e0b0 <__mdiff+0x60>
 800e0a8:	4b31      	ldr	r3, [pc, #196]	@ (800e170 <__mdiff+0x120>)
 800e0aa:	f240 2145 	movw	r1, #581	@ 0x245
 800e0ae:	e7e3      	b.n	800e078 <__mdiff+0x28>
 800e0b0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e0b4:	6926      	ldr	r6, [r4, #16]
 800e0b6:	60c5      	str	r5, [r0, #12]
 800e0b8:	f109 0310 	add.w	r3, r9, #16
 800e0bc:	f109 0514 	add.w	r5, r9, #20
 800e0c0:	f104 0e14 	add.w	lr, r4, #20
 800e0c4:	f100 0b14 	add.w	fp, r0, #20
 800e0c8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e0cc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e0d0:	9301      	str	r3, [sp, #4]
 800e0d2:	46d9      	mov	r9, fp
 800e0d4:	f04f 0c00 	mov.w	ip, #0
 800e0d8:	9b01      	ldr	r3, [sp, #4]
 800e0da:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e0de:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e0e2:	9301      	str	r3, [sp, #4]
 800e0e4:	fa1f f38a 	uxth.w	r3, sl
 800e0e8:	4619      	mov	r1, r3
 800e0ea:	b283      	uxth	r3, r0
 800e0ec:	1acb      	subs	r3, r1, r3
 800e0ee:	0c00      	lsrs	r0, r0, #16
 800e0f0:	4463      	add	r3, ip
 800e0f2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e0f6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e0fa:	b29b      	uxth	r3, r3
 800e0fc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e100:	4576      	cmp	r6, lr
 800e102:	f849 3b04 	str.w	r3, [r9], #4
 800e106:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e10a:	d8e5      	bhi.n	800e0d8 <__mdiff+0x88>
 800e10c:	1b33      	subs	r3, r6, r4
 800e10e:	3b15      	subs	r3, #21
 800e110:	f023 0303 	bic.w	r3, r3, #3
 800e114:	3415      	adds	r4, #21
 800e116:	3304      	adds	r3, #4
 800e118:	42a6      	cmp	r6, r4
 800e11a:	bf38      	it	cc
 800e11c:	2304      	movcc	r3, #4
 800e11e:	441d      	add	r5, r3
 800e120:	445b      	add	r3, fp
 800e122:	461e      	mov	r6, r3
 800e124:	462c      	mov	r4, r5
 800e126:	4544      	cmp	r4, r8
 800e128:	d30e      	bcc.n	800e148 <__mdiff+0xf8>
 800e12a:	f108 0103 	add.w	r1, r8, #3
 800e12e:	1b49      	subs	r1, r1, r5
 800e130:	f021 0103 	bic.w	r1, r1, #3
 800e134:	3d03      	subs	r5, #3
 800e136:	45a8      	cmp	r8, r5
 800e138:	bf38      	it	cc
 800e13a:	2100      	movcc	r1, #0
 800e13c:	440b      	add	r3, r1
 800e13e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e142:	b191      	cbz	r1, 800e16a <__mdiff+0x11a>
 800e144:	6117      	str	r7, [r2, #16]
 800e146:	e79d      	b.n	800e084 <__mdiff+0x34>
 800e148:	f854 1b04 	ldr.w	r1, [r4], #4
 800e14c:	46e6      	mov	lr, ip
 800e14e:	0c08      	lsrs	r0, r1, #16
 800e150:	fa1c fc81 	uxtah	ip, ip, r1
 800e154:	4471      	add	r1, lr
 800e156:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e15a:	b289      	uxth	r1, r1
 800e15c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e160:	f846 1b04 	str.w	r1, [r6], #4
 800e164:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e168:	e7dd      	b.n	800e126 <__mdiff+0xd6>
 800e16a:	3f01      	subs	r7, #1
 800e16c:	e7e7      	b.n	800e13e <__mdiff+0xee>
 800e16e:	bf00      	nop
 800e170:	0800f8cc 	.word	0x0800f8cc
 800e174:	0800f8dd 	.word	0x0800f8dd

0800e178 <__d2b>:
 800e178:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e17c:	460f      	mov	r7, r1
 800e17e:	2101      	movs	r1, #1
 800e180:	ec59 8b10 	vmov	r8, r9, d0
 800e184:	4616      	mov	r6, r2
 800e186:	f7ff fccd 	bl	800db24 <_Balloc>
 800e18a:	4604      	mov	r4, r0
 800e18c:	b930      	cbnz	r0, 800e19c <__d2b+0x24>
 800e18e:	4602      	mov	r2, r0
 800e190:	4b23      	ldr	r3, [pc, #140]	@ (800e220 <__d2b+0xa8>)
 800e192:	4824      	ldr	r0, [pc, #144]	@ (800e224 <__d2b+0xac>)
 800e194:	f240 310f 	movw	r1, #783	@ 0x30f
 800e198:	f000 fa72 	bl	800e680 <__assert_func>
 800e19c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e1a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e1a4:	b10d      	cbz	r5, 800e1aa <__d2b+0x32>
 800e1a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e1aa:	9301      	str	r3, [sp, #4]
 800e1ac:	f1b8 0300 	subs.w	r3, r8, #0
 800e1b0:	d023      	beq.n	800e1fa <__d2b+0x82>
 800e1b2:	4668      	mov	r0, sp
 800e1b4:	9300      	str	r3, [sp, #0]
 800e1b6:	f7ff fd7c 	bl	800dcb2 <__lo0bits>
 800e1ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e1be:	b1d0      	cbz	r0, 800e1f6 <__d2b+0x7e>
 800e1c0:	f1c0 0320 	rsb	r3, r0, #32
 800e1c4:	fa02 f303 	lsl.w	r3, r2, r3
 800e1c8:	430b      	orrs	r3, r1
 800e1ca:	40c2      	lsrs	r2, r0
 800e1cc:	6163      	str	r3, [r4, #20]
 800e1ce:	9201      	str	r2, [sp, #4]
 800e1d0:	9b01      	ldr	r3, [sp, #4]
 800e1d2:	61a3      	str	r3, [r4, #24]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	bf0c      	ite	eq
 800e1d8:	2201      	moveq	r2, #1
 800e1da:	2202      	movne	r2, #2
 800e1dc:	6122      	str	r2, [r4, #16]
 800e1de:	b1a5      	cbz	r5, 800e20a <__d2b+0x92>
 800e1e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e1e4:	4405      	add	r5, r0
 800e1e6:	603d      	str	r5, [r7, #0]
 800e1e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e1ec:	6030      	str	r0, [r6, #0]
 800e1ee:	4620      	mov	r0, r4
 800e1f0:	b003      	add	sp, #12
 800e1f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1f6:	6161      	str	r1, [r4, #20]
 800e1f8:	e7ea      	b.n	800e1d0 <__d2b+0x58>
 800e1fa:	a801      	add	r0, sp, #4
 800e1fc:	f7ff fd59 	bl	800dcb2 <__lo0bits>
 800e200:	9b01      	ldr	r3, [sp, #4]
 800e202:	6163      	str	r3, [r4, #20]
 800e204:	3020      	adds	r0, #32
 800e206:	2201      	movs	r2, #1
 800e208:	e7e8      	b.n	800e1dc <__d2b+0x64>
 800e20a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e20e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e212:	6038      	str	r0, [r7, #0]
 800e214:	6918      	ldr	r0, [r3, #16]
 800e216:	f7ff fd2d 	bl	800dc74 <__hi0bits>
 800e21a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e21e:	e7e5      	b.n	800e1ec <__d2b+0x74>
 800e220:	0800f8cc 	.word	0x0800f8cc
 800e224:	0800f8dd 	.word	0x0800f8dd

0800e228 <__ssputs_r>:
 800e228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e22c:	688e      	ldr	r6, [r1, #8]
 800e22e:	461f      	mov	r7, r3
 800e230:	42be      	cmp	r6, r7
 800e232:	680b      	ldr	r3, [r1, #0]
 800e234:	4682      	mov	sl, r0
 800e236:	460c      	mov	r4, r1
 800e238:	4690      	mov	r8, r2
 800e23a:	d82d      	bhi.n	800e298 <__ssputs_r+0x70>
 800e23c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e240:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e244:	d026      	beq.n	800e294 <__ssputs_r+0x6c>
 800e246:	6965      	ldr	r5, [r4, #20]
 800e248:	6909      	ldr	r1, [r1, #16]
 800e24a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e24e:	eba3 0901 	sub.w	r9, r3, r1
 800e252:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e256:	1c7b      	adds	r3, r7, #1
 800e258:	444b      	add	r3, r9
 800e25a:	106d      	asrs	r5, r5, #1
 800e25c:	429d      	cmp	r5, r3
 800e25e:	bf38      	it	cc
 800e260:	461d      	movcc	r5, r3
 800e262:	0553      	lsls	r3, r2, #21
 800e264:	d527      	bpl.n	800e2b6 <__ssputs_r+0x8e>
 800e266:	4629      	mov	r1, r5
 800e268:	f7fd fede 	bl	800c028 <_malloc_r>
 800e26c:	4606      	mov	r6, r0
 800e26e:	b360      	cbz	r0, 800e2ca <__ssputs_r+0xa2>
 800e270:	6921      	ldr	r1, [r4, #16]
 800e272:	464a      	mov	r2, r9
 800e274:	f000 f9f6 	bl	800e664 <memcpy>
 800e278:	89a3      	ldrh	r3, [r4, #12]
 800e27a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e27e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e282:	81a3      	strh	r3, [r4, #12]
 800e284:	6126      	str	r6, [r4, #16]
 800e286:	6165      	str	r5, [r4, #20]
 800e288:	444e      	add	r6, r9
 800e28a:	eba5 0509 	sub.w	r5, r5, r9
 800e28e:	6026      	str	r6, [r4, #0]
 800e290:	60a5      	str	r5, [r4, #8]
 800e292:	463e      	mov	r6, r7
 800e294:	42be      	cmp	r6, r7
 800e296:	d900      	bls.n	800e29a <__ssputs_r+0x72>
 800e298:	463e      	mov	r6, r7
 800e29a:	6820      	ldr	r0, [r4, #0]
 800e29c:	4632      	mov	r2, r6
 800e29e:	4641      	mov	r1, r8
 800e2a0:	f000 f9c6 	bl	800e630 <memmove>
 800e2a4:	68a3      	ldr	r3, [r4, #8]
 800e2a6:	1b9b      	subs	r3, r3, r6
 800e2a8:	60a3      	str	r3, [r4, #8]
 800e2aa:	6823      	ldr	r3, [r4, #0]
 800e2ac:	4433      	add	r3, r6
 800e2ae:	6023      	str	r3, [r4, #0]
 800e2b0:	2000      	movs	r0, #0
 800e2b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2b6:	462a      	mov	r2, r5
 800e2b8:	f000 fa26 	bl	800e708 <_realloc_r>
 800e2bc:	4606      	mov	r6, r0
 800e2be:	2800      	cmp	r0, #0
 800e2c0:	d1e0      	bne.n	800e284 <__ssputs_r+0x5c>
 800e2c2:	6921      	ldr	r1, [r4, #16]
 800e2c4:	4650      	mov	r0, sl
 800e2c6:	f7ff fbe3 	bl	800da90 <_free_r>
 800e2ca:	230c      	movs	r3, #12
 800e2cc:	f8ca 3000 	str.w	r3, [sl]
 800e2d0:	89a3      	ldrh	r3, [r4, #12]
 800e2d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e2d6:	81a3      	strh	r3, [r4, #12]
 800e2d8:	f04f 30ff 	mov.w	r0, #4294967295
 800e2dc:	e7e9      	b.n	800e2b2 <__ssputs_r+0x8a>
	...

0800e2e0 <_svfiprintf_r>:
 800e2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2e4:	4698      	mov	r8, r3
 800e2e6:	898b      	ldrh	r3, [r1, #12]
 800e2e8:	061b      	lsls	r3, r3, #24
 800e2ea:	b09d      	sub	sp, #116	@ 0x74
 800e2ec:	4607      	mov	r7, r0
 800e2ee:	460d      	mov	r5, r1
 800e2f0:	4614      	mov	r4, r2
 800e2f2:	d510      	bpl.n	800e316 <_svfiprintf_r+0x36>
 800e2f4:	690b      	ldr	r3, [r1, #16]
 800e2f6:	b973      	cbnz	r3, 800e316 <_svfiprintf_r+0x36>
 800e2f8:	2140      	movs	r1, #64	@ 0x40
 800e2fa:	f7fd fe95 	bl	800c028 <_malloc_r>
 800e2fe:	6028      	str	r0, [r5, #0]
 800e300:	6128      	str	r0, [r5, #16]
 800e302:	b930      	cbnz	r0, 800e312 <_svfiprintf_r+0x32>
 800e304:	230c      	movs	r3, #12
 800e306:	603b      	str	r3, [r7, #0]
 800e308:	f04f 30ff 	mov.w	r0, #4294967295
 800e30c:	b01d      	add	sp, #116	@ 0x74
 800e30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e312:	2340      	movs	r3, #64	@ 0x40
 800e314:	616b      	str	r3, [r5, #20]
 800e316:	2300      	movs	r3, #0
 800e318:	9309      	str	r3, [sp, #36]	@ 0x24
 800e31a:	2320      	movs	r3, #32
 800e31c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e320:	f8cd 800c 	str.w	r8, [sp, #12]
 800e324:	2330      	movs	r3, #48	@ 0x30
 800e326:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e4c4 <_svfiprintf_r+0x1e4>
 800e32a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e32e:	f04f 0901 	mov.w	r9, #1
 800e332:	4623      	mov	r3, r4
 800e334:	469a      	mov	sl, r3
 800e336:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e33a:	b10a      	cbz	r2, 800e340 <_svfiprintf_r+0x60>
 800e33c:	2a25      	cmp	r2, #37	@ 0x25
 800e33e:	d1f9      	bne.n	800e334 <_svfiprintf_r+0x54>
 800e340:	ebba 0b04 	subs.w	fp, sl, r4
 800e344:	d00b      	beq.n	800e35e <_svfiprintf_r+0x7e>
 800e346:	465b      	mov	r3, fp
 800e348:	4622      	mov	r2, r4
 800e34a:	4629      	mov	r1, r5
 800e34c:	4638      	mov	r0, r7
 800e34e:	f7ff ff6b 	bl	800e228 <__ssputs_r>
 800e352:	3001      	adds	r0, #1
 800e354:	f000 80a7 	beq.w	800e4a6 <_svfiprintf_r+0x1c6>
 800e358:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e35a:	445a      	add	r2, fp
 800e35c:	9209      	str	r2, [sp, #36]	@ 0x24
 800e35e:	f89a 3000 	ldrb.w	r3, [sl]
 800e362:	2b00      	cmp	r3, #0
 800e364:	f000 809f 	beq.w	800e4a6 <_svfiprintf_r+0x1c6>
 800e368:	2300      	movs	r3, #0
 800e36a:	f04f 32ff 	mov.w	r2, #4294967295
 800e36e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e372:	f10a 0a01 	add.w	sl, sl, #1
 800e376:	9304      	str	r3, [sp, #16]
 800e378:	9307      	str	r3, [sp, #28]
 800e37a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e37e:	931a      	str	r3, [sp, #104]	@ 0x68
 800e380:	4654      	mov	r4, sl
 800e382:	2205      	movs	r2, #5
 800e384:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e388:	484e      	ldr	r0, [pc, #312]	@ (800e4c4 <_svfiprintf_r+0x1e4>)
 800e38a:	f7f1 ff29 	bl	80001e0 <memchr>
 800e38e:	9a04      	ldr	r2, [sp, #16]
 800e390:	b9d8      	cbnz	r0, 800e3ca <_svfiprintf_r+0xea>
 800e392:	06d0      	lsls	r0, r2, #27
 800e394:	bf44      	itt	mi
 800e396:	2320      	movmi	r3, #32
 800e398:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e39c:	0711      	lsls	r1, r2, #28
 800e39e:	bf44      	itt	mi
 800e3a0:	232b      	movmi	r3, #43	@ 0x2b
 800e3a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e3a6:	f89a 3000 	ldrb.w	r3, [sl]
 800e3aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800e3ac:	d015      	beq.n	800e3da <_svfiprintf_r+0xfa>
 800e3ae:	9a07      	ldr	r2, [sp, #28]
 800e3b0:	4654      	mov	r4, sl
 800e3b2:	2000      	movs	r0, #0
 800e3b4:	f04f 0c0a 	mov.w	ip, #10
 800e3b8:	4621      	mov	r1, r4
 800e3ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e3be:	3b30      	subs	r3, #48	@ 0x30
 800e3c0:	2b09      	cmp	r3, #9
 800e3c2:	d94b      	bls.n	800e45c <_svfiprintf_r+0x17c>
 800e3c4:	b1b0      	cbz	r0, 800e3f4 <_svfiprintf_r+0x114>
 800e3c6:	9207      	str	r2, [sp, #28]
 800e3c8:	e014      	b.n	800e3f4 <_svfiprintf_r+0x114>
 800e3ca:	eba0 0308 	sub.w	r3, r0, r8
 800e3ce:	fa09 f303 	lsl.w	r3, r9, r3
 800e3d2:	4313      	orrs	r3, r2
 800e3d4:	9304      	str	r3, [sp, #16]
 800e3d6:	46a2      	mov	sl, r4
 800e3d8:	e7d2      	b.n	800e380 <_svfiprintf_r+0xa0>
 800e3da:	9b03      	ldr	r3, [sp, #12]
 800e3dc:	1d19      	adds	r1, r3, #4
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	9103      	str	r1, [sp, #12]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	bfbb      	ittet	lt
 800e3e6:	425b      	neglt	r3, r3
 800e3e8:	f042 0202 	orrlt.w	r2, r2, #2
 800e3ec:	9307      	strge	r3, [sp, #28]
 800e3ee:	9307      	strlt	r3, [sp, #28]
 800e3f0:	bfb8      	it	lt
 800e3f2:	9204      	strlt	r2, [sp, #16]
 800e3f4:	7823      	ldrb	r3, [r4, #0]
 800e3f6:	2b2e      	cmp	r3, #46	@ 0x2e
 800e3f8:	d10a      	bne.n	800e410 <_svfiprintf_r+0x130>
 800e3fa:	7863      	ldrb	r3, [r4, #1]
 800e3fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800e3fe:	d132      	bne.n	800e466 <_svfiprintf_r+0x186>
 800e400:	9b03      	ldr	r3, [sp, #12]
 800e402:	1d1a      	adds	r2, r3, #4
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	9203      	str	r2, [sp, #12]
 800e408:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e40c:	3402      	adds	r4, #2
 800e40e:	9305      	str	r3, [sp, #20]
 800e410:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e4d4 <_svfiprintf_r+0x1f4>
 800e414:	7821      	ldrb	r1, [r4, #0]
 800e416:	2203      	movs	r2, #3
 800e418:	4650      	mov	r0, sl
 800e41a:	f7f1 fee1 	bl	80001e0 <memchr>
 800e41e:	b138      	cbz	r0, 800e430 <_svfiprintf_r+0x150>
 800e420:	9b04      	ldr	r3, [sp, #16]
 800e422:	eba0 000a 	sub.w	r0, r0, sl
 800e426:	2240      	movs	r2, #64	@ 0x40
 800e428:	4082      	lsls	r2, r0
 800e42a:	4313      	orrs	r3, r2
 800e42c:	3401      	adds	r4, #1
 800e42e:	9304      	str	r3, [sp, #16]
 800e430:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e434:	4824      	ldr	r0, [pc, #144]	@ (800e4c8 <_svfiprintf_r+0x1e8>)
 800e436:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e43a:	2206      	movs	r2, #6
 800e43c:	f7f1 fed0 	bl	80001e0 <memchr>
 800e440:	2800      	cmp	r0, #0
 800e442:	d036      	beq.n	800e4b2 <_svfiprintf_r+0x1d2>
 800e444:	4b21      	ldr	r3, [pc, #132]	@ (800e4cc <_svfiprintf_r+0x1ec>)
 800e446:	bb1b      	cbnz	r3, 800e490 <_svfiprintf_r+0x1b0>
 800e448:	9b03      	ldr	r3, [sp, #12]
 800e44a:	3307      	adds	r3, #7
 800e44c:	f023 0307 	bic.w	r3, r3, #7
 800e450:	3308      	adds	r3, #8
 800e452:	9303      	str	r3, [sp, #12]
 800e454:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e456:	4433      	add	r3, r6
 800e458:	9309      	str	r3, [sp, #36]	@ 0x24
 800e45a:	e76a      	b.n	800e332 <_svfiprintf_r+0x52>
 800e45c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e460:	460c      	mov	r4, r1
 800e462:	2001      	movs	r0, #1
 800e464:	e7a8      	b.n	800e3b8 <_svfiprintf_r+0xd8>
 800e466:	2300      	movs	r3, #0
 800e468:	3401      	adds	r4, #1
 800e46a:	9305      	str	r3, [sp, #20]
 800e46c:	4619      	mov	r1, r3
 800e46e:	f04f 0c0a 	mov.w	ip, #10
 800e472:	4620      	mov	r0, r4
 800e474:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e478:	3a30      	subs	r2, #48	@ 0x30
 800e47a:	2a09      	cmp	r2, #9
 800e47c:	d903      	bls.n	800e486 <_svfiprintf_r+0x1a6>
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d0c6      	beq.n	800e410 <_svfiprintf_r+0x130>
 800e482:	9105      	str	r1, [sp, #20]
 800e484:	e7c4      	b.n	800e410 <_svfiprintf_r+0x130>
 800e486:	fb0c 2101 	mla	r1, ip, r1, r2
 800e48a:	4604      	mov	r4, r0
 800e48c:	2301      	movs	r3, #1
 800e48e:	e7f0      	b.n	800e472 <_svfiprintf_r+0x192>
 800e490:	ab03      	add	r3, sp, #12
 800e492:	9300      	str	r3, [sp, #0]
 800e494:	462a      	mov	r2, r5
 800e496:	4b0e      	ldr	r3, [pc, #56]	@ (800e4d0 <_svfiprintf_r+0x1f0>)
 800e498:	a904      	add	r1, sp, #16
 800e49a:	4638      	mov	r0, r7
 800e49c:	f7fd fef0 	bl	800c280 <_printf_float>
 800e4a0:	1c42      	adds	r2, r0, #1
 800e4a2:	4606      	mov	r6, r0
 800e4a4:	d1d6      	bne.n	800e454 <_svfiprintf_r+0x174>
 800e4a6:	89ab      	ldrh	r3, [r5, #12]
 800e4a8:	065b      	lsls	r3, r3, #25
 800e4aa:	f53f af2d 	bmi.w	800e308 <_svfiprintf_r+0x28>
 800e4ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e4b0:	e72c      	b.n	800e30c <_svfiprintf_r+0x2c>
 800e4b2:	ab03      	add	r3, sp, #12
 800e4b4:	9300      	str	r3, [sp, #0]
 800e4b6:	462a      	mov	r2, r5
 800e4b8:	4b05      	ldr	r3, [pc, #20]	@ (800e4d0 <_svfiprintf_r+0x1f0>)
 800e4ba:	a904      	add	r1, sp, #16
 800e4bc:	4638      	mov	r0, r7
 800e4be:	f7fe f977 	bl	800c7b0 <_printf_i>
 800e4c2:	e7ed      	b.n	800e4a0 <_svfiprintf_r+0x1c0>
 800e4c4:	0800fa38 	.word	0x0800fa38
 800e4c8:	0800fa42 	.word	0x0800fa42
 800e4cc:	0800c281 	.word	0x0800c281
 800e4d0:	0800e229 	.word	0x0800e229
 800e4d4:	0800fa3e 	.word	0x0800fa3e

0800e4d8 <__sflush_r>:
 800e4d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e4dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4e0:	0716      	lsls	r6, r2, #28
 800e4e2:	4605      	mov	r5, r0
 800e4e4:	460c      	mov	r4, r1
 800e4e6:	d454      	bmi.n	800e592 <__sflush_r+0xba>
 800e4e8:	684b      	ldr	r3, [r1, #4]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	dc02      	bgt.n	800e4f4 <__sflush_r+0x1c>
 800e4ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	dd48      	ble.n	800e586 <__sflush_r+0xae>
 800e4f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e4f6:	2e00      	cmp	r6, #0
 800e4f8:	d045      	beq.n	800e586 <__sflush_r+0xae>
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e500:	682f      	ldr	r7, [r5, #0]
 800e502:	6a21      	ldr	r1, [r4, #32]
 800e504:	602b      	str	r3, [r5, #0]
 800e506:	d030      	beq.n	800e56a <__sflush_r+0x92>
 800e508:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e50a:	89a3      	ldrh	r3, [r4, #12]
 800e50c:	0759      	lsls	r1, r3, #29
 800e50e:	d505      	bpl.n	800e51c <__sflush_r+0x44>
 800e510:	6863      	ldr	r3, [r4, #4]
 800e512:	1ad2      	subs	r2, r2, r3
 800e514:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e516:	b10b      	cbz	r3, 800e51c <__sflush_r+0x44>
 800e518:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e51a:	1ad2      	subs	r2, r2, r3
 800e51c:	2300      	movs	r3, #0
 800e51e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e520:	6a21      	ldr	r1, [r4, #32]
 800e522:	4628      	mov	r0, r5
 800e524:	47b0      	blx	r6
 800e526:	1c43      	adds	r3, r0, #1
 800e528:	89a3      	ldrh	r3, [r4, #12]
 800e52a:	d106      	bne.n	800e53a <__sflush_r+0x62>
 800e52c:	6829      	ldr	r1, [r5, #0]
 800e52e:	291d      	cmp	r1, #29
 800e530:	d82b      	bhi.n	800e58a <__sflush_r+0xb2>
 800e532:	4a2a      	ldr	r2, [pc, #168]	@ (800e5dc <__sflush_r+0x104>)
 800e534:	410a      	asrs	r2, r1
 800e536:	07d6      	lsls	r6, r2, #31
 800e538:	d427      	bmi.n	800e58a <__sflush_r+0xb2>
 800e53a:	2200      	movs	r2, #0
 800e53c:	6062      	str	r2, [r4, #4]
 800e53e:	04d9      	lsls	r1, r3, #19
 800e540:	6922      	ldr	r2, [r4, #16]
 800e542:	6022      	str	r2, [r4, #0]
 800e544:	d504      	bpl.n	800e550 <__sflush_r+0x78>
 800e546:	1c42      	adds	r2, r0, #1
 800e548:	d101      	bne.n	800e54e <__sflush_r+0x76>
 800e54a:	682b      	ldr	r3, [r5, #0]
 800e54c:	b903      	cbnz	r3, 800e550 <__sflush_r+0x78>
 800e54e:	6560      	str	r0, [r4, #84]	@ 0x54
 800e550:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e552:	602f      	str	r7, [r5, #0]
 800e554:	b1b9      	cbz	r1, 800e586 <__sflush_r+0xae>
 800e556:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e55a:	4299      	cmp	r1, r3
 800e55c:	d002      	beq.n	800e564 <__sflush_r+0x8c>
 800e55e:	4628      	mov	r0, r5
 800e560:	f7ff fa96 	bl	800da90 <_free_r>
 800e564:	2300      	movs	r3, #0
 800e566:	6363      	str	r3, [r4, #52]	@ 0x34
 800e568:	e00d      	b.n	800e586 <__sflush_r+0xae>
 800e56a:	2301      	movs	r3, #1
 800e56c:	4628      	mov	r0, r5
 800e56e:	47b0      	blx	r6
 800e570:	4602      	mov	r2, r0
 800e572:	1c50      	adds	r0, r2, #1
 800e574:	d1c9      	bne.n	800e50a <__sflush_r+0x32>
 800e576:	682b      	ldr	r3, [r5, #0]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d0c6      	beq.n	800e50a <__sflush_r+0x32>
 800e57c:	2b1d      	cmp	r3, #29
 800e57e:	d001      	beq.n	800e584 <__sflush_r+0xac>
 800e580:	2b16      	cmp	r3, #22
 800e582:	d11e      	bne.n	800e5c2 <__sflush_r+0xea>
 800e584:	602f      	str	r7, [r5, #0]
 800e586:	2000      	movs	r0, #0
 800e588:	e022      	b.n	800e5d0 <__sflush_r+0xf8>
 800e58a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e58e:	b21b      	sxth	r3, r3
 800e590:	e01b      	b.n	800e5ca <__sflush_r+0xf2>
 800e592:	690f      	ldr	r7, [r1, #16]
 800e594:	2f00      	cmp	r7, #0
 800e596:	d0f6      	beq.n	800e586 <__sflush_r+0xae>
 800e598:	0793      	lsls	r3, r2, #30
 800e59a:	680e      	ldr	r6, [r1, #0]
 800e59c:	bf08      	it	eq
 800e59e:	694b      	ldreq	r3, [r1, #20]
 800e5a0:	600f      	str	r7, [r1, #0]
 800e5a2:	bf18      	it	ne
 800e5a4:	2300      	movne	r3, #0
 800e5a6:	eba6 0807 	sub.w	r8, r6, r7
 800e5aa:	608b      	str	r3, [r1, #8]
 800e5ac:	f1b8 0f00 	cmp.w	r8, #0
 800e5b0:	dde9      	ble.n	800e586 <__sflush_r+0xae>
 800e5b2:	6a21      	ldr	r1, [r4, #32]
 800e5b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e5b6:	4643      	mov	r3, r8
 800e5b8:	463a      	mov	r2, r7
 800e5ba:	4628      	mov	r0, r5
 800e5bc:	47b0      	blx	r6
 800e5be:	2800      	cmp	r0, #0
 800e5c0:	dc08      	bgt.n	800e5d4 <__sflush_r+0xfc>
 800e5c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e5ca:	81a3      	strh	r3, [r4, #12]
 800e5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e5d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5d4:	4407      	add	r7, r0
 800e5d6:	eba8 0800 	sub.w	r8, r8, r0
 800e5da:	e7e7      	b.n	800e5ac <__sflush_r+0xd4>
 800e5dc:	dfbffffe 	.word	0xdfbffffe

0800e5e0 <_fflush_r>:
 800e5e0:	b538      	push	{r3, r4, r5, lr}
 800e5e2:	690b      	ldr	r3, [r1, #16]
 800e5e4:	4605      	mov	r5, r0
 800e5e6:	460c      	mov	r4, r1
 800e5e8:	b913      	cbnz	r3, 800e5f0 <_fflush_r+0x10>
 800e5ea:	2500      	movs	r5, #0
 800e5ec:	4628      	mov	r0, r5
 800e5ee:	bd38      	pop	{r3, r4, r5, pc}
 800e5f0:	b118      	cbz	r0, 800e5fa <_fflush_r+0x1a>
 800e5f2:	6a03      	ldr	r3, [r0, #32]
 800e5f4:	b90b      	cbnz	r3, 800e5fa <_fflush_r+0x1a>
 800e5f6:	f7fe fa87 	bl	800cb08 <__sinit>
 800e5fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d0f3      	beq.n	800e5ea <_fflush_r+0xa>
 800e602:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e604:	07d0      	lsls	r0, r2, #31
 800e606:	d404      	bmi.n	800e612 <_fflush_r+0x32>
 800e608:	0599      	lsls	r1, r3, #22
 800e60a:	d402      	bmi.n	800e612 <_fflush_r+0x32>
 800e60c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e60e:	f7fe fbe6 	bl	800cdde <__retarget_lock_acquire_recursive>
 800e612:	4628      	mov	r0, r5
 800e614:	4621      	mov	r1, r4
 800e616:	f7ff ff5f 	bl	800e4d8 <__sflush_r>
 800e61a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e61c:	07da      	lsls	r2, r3, #31
 800e61e:	4605      	mov	r5, r0
 800e620:	d4e4      	bmi.n	800e5ec <_fflush_r+0xc>
 800e622:	89a3      	ldrh	r3, [r4, #12]
 800e624:	059b      	lsls	r3, r3, #22
 800e626:	d4e1      	bmi.n	800e5ec <_fflush_r+0xc>
 800e628:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e62a:	f7fe fbd9 	bl	800cde0 <__retarget_lock_release_recursive>
 800e62e:	e7dd      	b.n	800e5ec <_fflush_r+0xc>

0800e630 <memmove>:
 800e630:	4288      	cmp	r0, r1
 800e632:	b510      	push	{r4, lr}
 800e634:	eb01 0402 	add.w	r4, r1, r2
 800e638:	d902      	bls.n	800e640 <memmove+0x10>
 800e63a:	4284      	cmp	r4, r0
 800e63c:	4623      	mov	r3, r4
 800e63e:	d807      	bhi.n	800e650 <memmove+0x20>
 800e640:	1e43      	subs	r3, r0, #1
 800e642:	42a1      	cmp	r1, r4
 800e644:	d008      	beq.n	800e658 <memmove+0x28>
 800e646:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e64a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e64e:	e7f8      	b.n	800e642 <memmove+0x12>
 800e650:	4402      	add	r2, r0
 800e652:	4601      	mov	r1, r0
 800e654:	428a      	cmp	r2, r1
 800e656:	d100      	bne.n	800e65a <memmove+0x2a>
 800e658:	bd10      	pop	{r4, pc}
 800e65a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e65e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e662:	e7f7      	b.n	800e654 <memmove+0x24>

0800e664 <memcpy>:
 800e664:	440a      	add	r2, r1
 800e666:	4291      	cmp	r1, r2
 800e668:	f100 33ff 	add.w	r3, r0, #4294967295
 800e66c:	d100      	bne.n	800e670 <memcpy+0xc>
 800e66e:	4770      	bx	lr
 800e670:	b510      	push	{r4, lr}
 800e672:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e676:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e67a:	4291      	cmp	r1, r2
 800e67c:	d1f9      	bne.n	800e672 <memcpy+0xe>
 800e67e:	bd10      	pop	{r4, pc}

0800e680 <__assert_func>:
 800e680:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e682:	4614      	mov	r4, r2
 800e684:	461a      	mov	r2, r3
 800e686:	4b09      	ldr	r3, [pc, #36]	@ (800e6ac <__assert_func+0x2c>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	4605      	mov	r5, r0
 800e68c:	68d8      	ldr	r0, [r3, #12]
 800e68e:	b954      	cbnz	r4, 800e6a6 <__assert_func+0x26>
 800e690:	4b07      	ldr	r3, [pc, #28]	@ (800e6b0 <__assert_func+0x30>)
 800e692:	461c      	mov	r4, r3
 800e694:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e698:	9100      	str	r1, [sp, #0]
 800e69a:	462b      	mov	r3, r5
 800e69c:	4905      	ldr	r1, [pc, #20]	@ (800e6b4 <__assert_func+0x34>)
 800e69e:	f000 f86f 	bl	800e780 <fiprintf>
 800e6a2:	f7fd fc87 	bl	800bfb4 <abort>
 800e6a6:	4b04      	ldr	r3, [pc, #16]	@ (800e6b8 <__assert_func+0x38>)
 800e6a8:	e7f4      	b.n	800e694 <__assert_func+0x14>
 800e6aa:	bf00      	nop
 800e6ac:	2000001c 	.word	0x2000001c
 800e6b0:	0800fa8e 	.word	0x0800fa8e
 800e6b4:	0800fa60 	.word	0x0800fa60
 800e6b8:	0800fa53 	.word	0x0800fa53

0800e6bc <_calloc_r>:
 800e6bc:	b570      	push	{r4, r5, r6, lr}
 800e6be:	fba1 5402 	umull	r5, r4, r1, r2
 800e6c2:	b93c      	cbnz	r4, 800e6d4 <_calloc_r+0x18>
 800e6c4:	4629      	mov	r1, r5
 800e6c6:	f7fd fcaf 	bl	800c028 <_malloc_r>
 800e6ca:	4606      	mov	r6, r0
 800e6cc:	b928      	cbnz	r0, 800e6da <_calloc_r+0x1e>
 800e6ce:	2600      	movs	r6, #0
 800e6d0:	4630      	mov	r0, r6
 800e6d2:	bd70      	pop	{r4, r5, r6, pc}
 800e6d4:	220c      	movs	r2, #12
 800e6d6:	6002      	str	r2, [r0, #0]
 800e6d8:	e7f9      	b.n	800e6ce <_calloc_r+0x12>
 800e6da:	462a      	mov	r2, r5
 800e6dc:	4621      	mov	r1, r4
 800e6de:	f7fe faac 	bl	800cc3a <memset>
 800e6e2:	e7f5      	b.n	800e6d0 <_calloc_r+0x14>

0800e6e4 <__ascii_mbtowc>:
 800e6e4:	b082      	sub	sp, #8
 800e6e6:	b901      	cbnz	r1, 800e6ea <__ascii_mbtowc+0x6>
 800e6e8:	a901      	add	r1, sp, #4
 800e6ea:	b142      	cbz	r2, 800e6fe <__ascii_mbtowc+0x1a>
 800e6ec:	b14b      	cbz	r3, 800e702 <__ascii_mbtowc+0x1e>
 800e6ee:	7813      	ldrb	r3, [r2, #0]
 800e6f0:	600b      	str	r3, [r1, #0]
 800e6f2:	7812      	ldrb	r2, [r2, #0]
 800e6f4:	1e10      	subs	r0, r2, #0
 800e6f6:	bf18      	it	ne
 800e6f8:	2001      	movne	r0, #1
 800e6fa:	b002      	add	sp, #8
 800e6fc:	4770      	bx	lr
 800e6fe:	4610      	mov	r0, r2
 800e700:	e7fb      	b.n	800e6fa <__ascii_mbtowc+0x16>
 800e702:	f06f 0001 	mvn.w	r0, #1
 800e706:	e7f8      	b.n	800e6fa <__ascii_mbtowc+0x16>

0800e708 <_realloc_r>:
 800e708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e70c:	4680      	mov	r8, r0
 800e70e:	4615      	mov	r5, r2
 800e710:	460c      	mov	r4, r1
 800e712:	b921      	cbnz	r1, 800e71e <_realloc_r+0x16>
 800e714:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e718:	4611      	mov	r1, r2
 800e71a:	f7fd bc85 	b.w	800c028 <_malloc_r>
 800e71e:	b92a      	cbnz	r2, 800e72c <_realloc_r+0x24>
 800e720:	f7ff f9b6 	bl	800da90 <_free_r>
 800e724:	2400      	movs	r4, #0
 800e726:	4620      	mov	r0, r4
 800e728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e72c:	f000 f83a 	bl	800e7a4 <_malloc_usable_size_r>
 800e730:	4285      	cmp	r5, r0
 800e732:	4606      	mov	r6, r0
 800e734:	d802      	bhi.n	800e73c <_realloc_r+0x34>
 800e736:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e73a:	d8f4      	bhi.n	800e726 <_realloc_r+0x1e>
 800e73c:	4629      	mov	r1, r5
 800e73e:	4640      	mov	r0, r8
 800e740:	f7fd fc72 	bl	800c028 <_malloc_r>
 800e744:	4607      	mov	r7, r0
 800e746:	2800      	cmp	r0, #0
 800e748:	d0ec      	beq.n	800e724 <_realloc_r+0x1c>
 800e74a:	42b5      	cmp	r5, r6
 800e74c:	462a      	mov	r2, r5
 800e74e:	4621      	mov	r1, r4
 800e750:	bf28      	it	cs
 800e752:	4632      	movcs	r2, r6
 800e754:	f7ff ff86 	bl	800e664 <memcpy>
 800e758:	4621      	mov	r1, r4
 800e75a:	4640      	mov	r0, r8
 800e75c:	f7ff f998 	bl	800da90 <_free_r>
 800e760:	463c      	mov	r4, r7
 800e762:	e7e0      	b.n	800e726 <_realloc_r+0x1e>

0800e764 <__ascii_wctomb>:
 800e764:	4603      	mov	r3, r0
 800e766:	4608      	mov	r0, r1
 800e768:	b141      	cbz	r1, 800e77c <__ascii_wctomb+0x18>
 800e76a:	2aff      	cmp	r2, #255	@ 0xff
 800e76c:	d904      	bls.n	800e778 <__ascii_wctomb+0x14>
 800e76e:	228a      	movs	r2, #138	@ 0x8a
 800e770:	601a      	str	r2, [r3, #0]
 800e772:	f04f 30ff 	mov.w	r0, #4294967295
 800e776:	4770      	bx	lr
 800e778:	700a      	strb	r2, [r1, #0]
 800e77a:	2001      	movs	r0, #1
 800e77c:	4770      	bx	lr
	...

0800e780 <fiprintf>:
 800e780:	b40e      	push	{r1, r2, r3}
 800e782:	b503      	push	{r0, r1, lr}
 800e784:	4601      	mov	r1, r0
 800e786:	ab03      	add	r3, sp, #12
 800e788:	4805      	ldr	r0, [pc, #20]	@ (800e7a0 <fiprintf+0x20>)
 800e78a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e78e:	6800      	ldr	r0, [r0, #0]
 800e790:	9301      	str	r3, [sp, #4]
 800e792:	f000 f839 	bl	800e808 <_vfiprintf_r>
 800e796:	b002      	add	sp, #8
 800e798:	f85d eb04 	ldr.w	lr, [sp], #4
 800e79c:	b003      	add	sp, #12
 800e79e:	4770      	bx	lr
 800e7a0:	2000001c 	.word	0x2000001c

0800e7a4 <_malloc_usable_size_r>:
 800e7a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7a8:	1f18      	subs	r0, r3, #4
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	bfbc      	itt	lt
 800e7ae:	580b      	ldrlt	r3, [r1, r0]
 800e7b0:	18c0      	addlt	r0, r0, r3
 800e7b2:	4770      	bx	lr

0800e7b4 <__sfputc_r>:
 800e7b4:	6893      	ldr	r3, [r2, #8]
 800e7b6:	3b01      	subs	r3, #1
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	b410      	push	{r4}
 800e7bc:	6093      	str	r3, [r2, #8]
 800e7be:	da08      	bge.n	800e7d2 <__sfputc_r+0x1e>
 800e7c0:	6994      	ldr	r4, [r2, #24]
 800e7c2:	42a3      	cmp	r3, r4
 800e7c4:	db01      	blt.n	800e7ca <__sfputc_r+0x16>
 800e7c6:	290a      	cmp	r1, #10
 800e7c8:	d103      	bne.n	800e7d2 <__sfputc_r+0x1e>
 800e7ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7ce:	f000 b933 	b.w	800ea38 <__swbuf_r>
 800e7d2:	6813      	ldr	r3, [r2, #0]
 800e7d4:	1c58      	adds	r0, r3, #1
 800e7d6:	6010      	str	r0, [r2, #0]
 800e7d8:	7019      	strb	r1, [r3, #0]
 800e7da:	4608      	mov	r0, r1
 800e7dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7e0:	4770      	bx	lr

0800e7e2 <__sfputs_r>:
 800e7e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7e4:	4606      	mov	r6, r0
 800e7e6:	460f      	mov	r7, r1
 800e7e8:	4614      	mov	r4, r2
 800e7ea:	18d5      	adds	r5, r2, r3
 800e7ec:	42ac      	cmp	r4, r5
 800e7ee:	d101      	bne.n	800e7f4 <__sfputs_r+0x12>
 800e7f0:	2000      	movs	r0, #0
 800e7f2:	e007      	b.n	800e804 <__sfputs_r+0x22>
 800e7f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7f8:	463a      	mov	r2, r7
 800e7fa:	4630      	mov	r0, r6
 800e7fc:	f7ff ffda 	bl	800e7b4 <__sfputc_r>
 800e800:	1c43      	adds	r3, r0, #1
 800e802:	d1f3      	bne.n	800e7ec <__sfputs_r+0xa>
 800e804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e808 <_vfiprintf_r>:
 800e808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e80c:	460d      	mov	r5, r1
 800e80e:	b09d      	sub	sp, #116	@ 0x74
 800e810:	4614      	mov	r4, r2
 800e812:	4698      	mov	r8, r3
 800e814:	4606      	mov	r6, r0
 800e816:	b118      	cbz	r0, 800e820 <_vfiprintf_r+0x18>
 800e818:	6a03      	ldr	r3, [r0, #32]
 800e81a:	b90b      	cbnz	r3, 800e820 <_vfiprintf_r+0x18>
 800e81c:	f7fe f974 	bl	800cb08 <__sinit>
 800e820:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e822:	07d9      	lsls	r1, r3, #31
 800e824:	d405      	bmi.n	800e832 <_vfiprintf_r+0x2a>
 800e826:	89ab      	ldrh	r3, [r5, #12]
 800e828:	059a      	lsls	r2, r3, #22
 800e82a:	d402      	bmi.n	800e832 <_vfiprintf_r+0x2a>
 800e82c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e82e:	f7fe fad6 	bl	800cdde <__retarget_lock_acquire_recursive>
 800e832:	89ab      	ldrh	r3, [r5, #12]
 800e834:	071b      	lsls	r3, r3, #28
 800e836:	d501      	bpl.n	800e83c <_vfiprintf_r+0x34>
 800e838:	692b      	ldr	r3, [r5, #16]
 800e83a:	b99b      	cbnz	r3, 800e864 <_vfiprintf_r+0x5c>
 800e83c:	4629      	mov	r1, r5
 800e83e:	4630      	mov	r0, r6
 800e840:	f000 f938 	bl	800eab4 <__swsetup_r>
 800e844:	b170      	cbz	r0, 800e864 <_vfiprintf_r+0x5c>
 800e846:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e848:	07dc      	lsls	r4, r3, #31
 800e84a:	d504      	bpl.n	800e856 <_vfiprintf_r+0x4e>
 800e84c:	f04f 30ff 	mov.w	r0, #4294967295
 800e850:	b01d      	add	sp, #116	@ 0x74
 800e852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e856:	89ab      	ldrh	r3, [r5, #12]
 800e858:	0598      	lsls	r0, r3, #22
 800e85a:	d4f7      	bmi.n	800e84c <_vfiprintf_r+0x44>
 800e85c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e85e:	f7fe fabf 	bl	800cde0 <__retarget_lock_release_recursive>
 800e862:	e7f3      	b.n	800e84c <_vfiprintf_r+0x44>
 800e864:	2300      	movs	r3, #0
 800e866:	9309      	str	r3, [sp, #36]	@ 0x24
 800e868:	2320      	movs	r3, #32
 800e86a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e86e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e872:	2330      	movs	r3, #48	@ 0x30
 800e874:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ea24 <_vfiprintf_r+0x21c>
 800e878:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e87c:	f04f 0901 	mov.w	r9, #1
 800e880:	4623      	mov	r3, r4
 800e882:	469a      	mov	sl, r3
 800e884:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e888:	b10a      	cbz	r2, 800e88e <_vfiprintf_r+0x86>
 800e88a:	2a25      	cmp	r2, #37	@ 0x25
 800e88c:	d1f9      	bne.n	800e882 <_vfiprintf_r+0x7a>
 800e88e:	ebba 0b04 	subs.w	fp, sl, r4
 800e892:	d00b      	beq.n	800e8ac <_vfiprintf_r+0xa4>
 800e894:	465b      	mov	r3, fp
 800e896:	4622      	mov	r2, r4
 800e898:	4629      	mov	r1, r5
 800e89a:	4630      	mov	r0, r6
 800e89c:	f7ff ffa1 	bl	800e7e2 <__sfputs_r>
 800e8a0:	3001      	adds	r0, #1
 800e8a2:	f000 80a7 	beq.w	800e9f4 <_vfiprintf_r+0x1ec>
 800e8a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e8a8:	445a      	add	r2, fp
 800e8aa:	9209      	str	r2, [sp, #36]	@ 0x24
 800e8ac:	f89a 3000 	ldrb.w	r3, [sl]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	f000 809f 	beq.w	800e9f4 <_vfiprintf_r+0x1ec>
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	f04f 32ff 	mov.w	r2, #4294967295
 800e8bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e8c0:	f10a 0a01 	add.w	sl, sl, #1
 800e8c4:	9304      	str	r3, [sp, #16]
 800e8c6:	9307      	str	r3, [sp, #28]
 800e8c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e8cc:	931a      	str	r3, [sp, #104]	@ 0x68
 800e8ce:	4654      	mov	r4, sl
 800e8d0:	2205      	movs	r2, #5
 800e8d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8d6:	4853      	ldr	r0, [pc, #332]	@ (800ea24 <_vfiprintf_r+0x21c>)
 800e8d8:	f7f1 fc82 	bl	80001e0 <memchr>
 800e8dc:	9a04      	ldr	r2, [sp, #16]
 800e8de:	b9d8      	cbnz	r0, 800e918 <_vfiprintf_r+0x110>
 800e8e0:	06d1      	lsls	r1, r2, #27
 800e8e2:	bf44      	itt	mi
 800e8e4:	2320      	movmi	r3, #32
 800e8e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e8ea:	0713      	lsls	r3, r2, #28
 800e8ec:	bf44      	itt	mi
 800e8ee:	232b      	movmi	r3, #43	@ 0x2b
 800e8f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e8f4:	f89a 3000 	ldrb.w	r3, [sl]
 800e8f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8fa:	d015      	beq.n	800e928 <_vfiprintf_r+0x120>
 800e8fc:	9a07      	ldr	r2, [sp, #28]
 800e8fe:	4654      	mov	r4, sl
 800e900:	2000      	movs	r0, #0
 800e902:	f04f 0c0a 	mov.w	ip, #10
 800e906:	4621      	mov	r1, r4
 800e908:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e90c:	3b30      	subs	r3, #48	@ 0x30
 800e90e:	2b09      	cmp	r3, #9
 800e910:	d94b      	bls.n	800e9aa <_vfiprintf_r+0x1a2>
 800e912:	b1b0      	cbz	r0, 800e942 <_vfiprintf_r+0x13a>
 800e914:	9207      	str	r2, [sp, #28]
 800e916:	e014      	b.n	800e942 <_vfiprintf_r+0x13a>
 800e918:	eba0 0308 	sub.w	r3, r0, r8
 800e91c:	fa09 f303 	lsl.w	r3, r9, r3
 800e920:	4313      	orrs	r3, r2
 800e922:	9304      	str	r3, [sp, #16]
 800e924:	46a2      	mov	sl, r4
 800e926:	e7d2      	b.n	800e8ce <_vfiprintf_r+0xc6>
 800e928:	9b03      	ldr	r3, [sp, #12]
 800e92a:	1d19      	adds	r1, r3, #4
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	9103      	str	r1, [sp, #12]
 800e930:	2b00      	cmp	r3, #0
 800e932:	bfbb      	ittet	lt
 800e934:	425b      	neglt	r3, r3
 800e936:	f042 0202 	orrlt.w	r2, r2, #2
 800e93a:	9307      	strge	r3, [sp, #28]
 800e93c:	9307      	strlt	r3, [sp, #28]
 800e93e:	bfb8      	it	lt
 800e940:	9204      	strlt	r2, [sp, #16]
 800e942:	7823      	ldrb	r3, [r4, #0]
 800e944:	2b2e      	cmp	r3, #46	@ 0x2e
 800e946:	d10a      	bne.n	800e95e <_vfiprintf_r+0x156>
 800e948:	7863      	ldrb	r3, [r4, #1]
 800e94a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e94c:	d132      	bne.n	800e9b4 <_vfiprintf_r+0x1ac>
 800e94e:	9b03      	ldr	r3, [sp, #12]
 800e950:	1d1a      	adds	r2, r3, #4
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	9203      	str	r2, [sp, #12]
 800e956:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e95a:	3402      	adds	r4, #2
 800e95c:	9305      	str	r3, [sp, #20]
 800e95e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ea34 <_vfiprintf_r+0x22c>
 800e962:	7821      	ldrb	r1, [r4, #0]
 800e964:	2203      	movs	r2, #3
 800e966:	4650      	mov	r0, sl
 800e968:	f7f1 fc3a 	bl	80001e0 <memchr>
 800e96c:	b138      	cbz	r0, 800e97e <_vfiprintf_r+0x176>
 800e96e:	9b04      	ldr	r3, [sp, #16]
 800e970:	eba0 000a 	sub.w	r0, r0, sl
 800e974:	2240      	movs	r2, #64	@ 0x40
 800e976:	4082      	lsls	r2, r0
 800e978:	4313      	orrs	r3, r2
 800e97a:	3401      	adds	r4, #1
 800e97c:	9304      	str	r3, [sp, #16]
 800e97e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e982:	4829      	ldr	r0, [pc, #164]	@ (800ea28 <_vfiprintf_r+0x220>)
 800e984:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e988:	2206      	movs	r2, #6
 800e98a:	f7f1 fc29 	bl	80001e0 <memchr>
 800e98e:	2800      	cmp	r0, #0
 800e990:	d03f      	beq.n	800ea12 <_vfiprintf_r+0x20a>
 800e992:	4b26      	ldr	r3, [pc, #152]	@ (800ea2c <_vfiprintf_r+0x224>)
 800e994:	bb1b      	cbnz	r3, 800e9de <_vfiprintf_r+0x1d6>
 800e996:	9b03      	ldr	r3, [sp, #12]
 800e998:	3307      	adds	r3, #7
 800e99a:	f023 0307 	bic.w	r3, r3, #7
 800e99e:	3308      	adds	r3, #8
 800e9a0:	9303      	str	r3, [sp, #12]
 800e9a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9a4:	443b      	add	r3, r7
 800e9a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800e9a8:	e76a      	b.n	800e880 <_vfiprintf_r+0x78>
 800e9aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800e9ae:	460c      	mov	r4, r1
 800e9b0:	2001      	movs	r0, #1
 800e9b2:	e7a8      	b.n	800e906 <_vfiprintf_r+0xfe>
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	3401      	adds	r4, #1
 800e9b8:	9305      	str	r3, [sp, #20]
 800e9ba:	4619      	mov	r1, r3
 800e9bc:	f04f 0c0a 	mov.w	ip, #10
 800e9c0:	4620      	mov	r0, r4
 800e9c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9c6:	3a30      	subs	r2, #48	@ 0x30
 800e9c8:	2a09      	cmp	r2, #9
 800e9ca:	d903      	bls.n	800e9d4 <_vfiprintf_r+0x1cc>
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d0c6      	beq.n	800e95e <_vfiprintf_r+0x156>
 800e9d0:	9105      	str	r1, [sp, #20]
 800e9d2:	e7c4      	b.n	800e95e <_vfiprintf_r+0x156>
 800e9d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800e9d8:	4604      	mov	r4, r0
 800e9da:	2301      	movs	r3, #1
 800e9dc:	e7f0      	b.n	800e9c0 <_vfiprintf_r+0x1b8>
 800e9de:	ab03      	add	r3, sp, #12
 800e9e0:	9300      	str	r3, [sp, #0]
 800e9e2:	462a      	mov	r2, r5
 800e9e4:	4b12      	ldr	r3, [pc, #72]	@ (800ea30 <_vfiprintf_r+0x228>)
 800e9e6:	a904      	add	r1, sp, #16
 800e9e8:	4630      	mov	r0, r6
 800e9ea:	f7fd fc49 	bl	800c280 <_printf_float>
 800e9ee:	4607      	mov	r7, r0
 800e9f0:	1c78      	adds	r0, r7, #1
 800e9f2:	d1d6      	bne.n	800e9a2 <_vfiprintf_r+0x19a>
 800e9f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e9f6:	07d9      	lsls	r1, r3, #31
 800e9f8:	d405      	bmi.n	800ea06 <_vfiprintf_r+0x1fe>
 800e9fa:	89ab      	ldrh	r3, [r5, #12]
 800e9fc:	059a      	lsls	r2, r3, #22
 800e9fe:	d402      	bmi.n	800ea06 <_vfiprintf_r+0x1fe>
 800ea00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ea02:	f7fe f9ed 	bl	800cde0 <__retarget_lock_release_recursive>
 800ea06:	89ab      	ldrh	r3, [r5, #12]
 800ea08:	065b      	lsls	r3, r3, #25
 800ea0a:	f53f af1f 	bmi.w	800e84c <_vfiprintf_r+0x44>
 800ea0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ea10:	e71e      	b.n	800e850 <_vfiprintf_r+0x48>
 800ea12:	ab03      	add	r3, sp, #12
 800ea14:	9300      	str	r3, [sp, #0]
 800ea16:	462a      	mov	r2, r5
 800ea18:	4b05      	ldr	r3, [pc, #20]	@ (800ea30 <_vfiprintf_r+0x228>)
 800ea1a:	a904      	add	r1, sp, #16
 800ea1c:	4630      	mov	r0, r6
 800ea1e:	f7fd fec7 	bl	800c7b0 <_printf_i>
 800ea22:	e7e4      	b.n	800e9ee <_vfiprintf_r+0x1e6>
 800ea24:	0800fa38 	.word	0x0800fa38
 800ea28:	0800fa42 	.word	0x0800fa42
 800ea2c:	0800c281 	.word	0x0800c281
 800ea30:	0800e7e3 	.word	0x0800e7e3
 800ea34:	0800fa3e 	.word	0x0800fa3e

0800ea38 <__swbuf_r>:
 800ea38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea3a:	460e      	mov	r6, r1
 800ea3c:	4614      	mov	r4, r2
 800ea3e:	4605      	mov	r5, r0
 800ea40:	b118      	cbz	r0, 800ea4a <__swbuf_r+0x12>
 800ea42:	6a03      	ldr	r3, [r0, #32]
 800ea44:	b90b      	cbnz	r3, 800ea4a <__swbuf_r+0x12>
 800ea46:	f7fe f85f 	bl	800cb08 <__sinit>
 800ea4a:	69a3      	ldr	r3, [r4, #24]
 800ea4c:	60a3      	str	r3, [r4, #8]
 800ea4e:	89a3      	ldrh	r3, [r4, #12]
 800ea50:	071a      	lsls	r2, r3, #28
 800ea52:	d501      	bpl.n	800ea58 <__swbuf_r+0x20>
 800ea54:	6923      	ldr	r3, [r4, #16]
 800ea56:	b943      	cbnz	r3, 800ea6a <__swbuf_r+0x32>
 800ea58:	4621      	mov	r1, r4
 800ea5a:	4628      	mov	r0, r5
 800ea5c:	f000 f82a 	bl	800eab4 <__swsetup_r>
 800ea60:	b118      	cbz	r0, 800ea6a <__swbuf_r+0x32>
 800ea62:	f04f 37ff 	mov.w	r7, #4294967295
 800ea66:	4638      	mov	r0, r7
 800ea68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea6a:	6823      	ldr	r3, [r4, #0]
 800ea6c:	6922      	ldr	r2, [r4, #16]
 800ea6e:	1a98      	subs	r0, r3, r2
 800ea70:	6963      	ldr	r3, [r4, #20]
 800ea72:	b2f6      	uxtb	r6, r6
 800ea74:	4283      	cmp	r3, r0
 800ea76:	4637      	mov	r7, r6
 800ea78:	dc05      	bgt.n	800ea86 <__swbuf_r+0x4e>
 800ea7a:	4621      	mov	r1, r4
 800ea7c:	4628      	mov	r0, r5
 800ea7e:	f7ff fdaf 	bl	800e5e0 <_fflush_r>
 800ea82:	2800      	cmp	r0, #0
 800ea84:	d1ed      	bne.n	800ea62 <__swbuf_r+0x2a>
 800ea86:	68a3      	ldr	r3, [r4, #8]
 800ea88:	3b01      	subs	r3, #1
 800ea8a:	60a3      	str	r3, [r4, #8]
 800ea8c:	6823      	ldr	r3, [r4, #0]
 800ea8e:	1c5a      	adds	r2, r3, #1
 800ea90:	6022      	str	r2, [r4, #0]
 800ea92:	701e      	strb	r6, [r3, #0]
 800ea94:	6962      	ldr	r2, [r4, #20]
 800ea96:	1c43      	adds	r3, r0, #1
 800ea98:	429a      	cmp	r2, r3
 800ea9a:	d004      	beq.n	800eaa6 <__swbuf_r+0x6e>
 800ea9c:	89a3      	ldrh	r3, [r4, #12]
 800ea9e:	07db      	lsls	r3, r3, #31
 800eaa0:	d5e1      	bpl.n	800ea66 <__swbuf_r+0x2e>
 800eaa2:	2e0a      	cmp	r6, #10
 800eaa4:	d1df      	bne.n	800ea66 <__swbuf_r+0x2e>
 800eaa6:	4621      	mov	r1, r4
 800eaa8:	4628      	mov	r0, r5
 800eaaa:	f7ff fd99 	bl	800e5e0 <_fflush_r>
 800eaae:	2800      	cmp	r0, #0
 800eab0:	d0d9      	beq.n	800ea66 <__swbuf_r+0x2e>
 800eab2:	e7d6      	b.n	800ea62 <__swbuf_r+0x2a>

0800eab4 <__swsetup_r>:
 800eab4:	b538      	push	{r3, r4, r5, lr}
 800eab6:	4b29      	ldr	r3, [pc, #164]	@ (800eb5c <__swsetup_r+0xa8>)
 800eab8:	4605      	mov	r5, r0
 800eaba:	6818      	ldr	r0, [r3, #0]
 800eabc:	460c      	mov	r4, r1
 800eabe:	b118      	cbz	r0, 800eac8 <__swsetup_r+0x14>
 800eac0:	6a03      	ldr	r3, [r0, #32]
 800eac2:	b90b      	cbnz	r3, 800eac8 <__swsetup_r+0x14>
 800eac4:	f7fe f820 	bl	800cb08 <__sinit>
 800eac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eacc:	0719      	lsls	r1, r3, #28
 800eace:	d422      	bmi.n	800eb16 <__swsetup_r+0x62>
 800ead0:	06da      	lsls	r2, r3, #27
 800ead2:	d407      	bmi.n	800eae4 <__swsetup_r+0x30>
 800ead4:	2209      	movs	r2, #9
 800ead6:	602a      	str	r2, [r5, #0]
 800ead8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eadc:	81a3      	strh	r3, [r4, #12]
 800eade:	f04f 30ff 	mov.w	r0, #4294967295
 800eae2:	e033      	b.n	800eb4c <__swsetup_r+0x98>
 800eae4:	0758      	lsls	r0, r3, #29
 800eae6:	d512      	bpl.n	800eb0e <__swsetup_r+0x5a>
 800eae8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eaea:	b141      	cbz	r1, 800eafe <__swsetup_r+0x4a>
 800eaec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eaf0:	4299      	cmp	r1, r3
 800eaf2:	d002      	beq.n	800eafa <__swsetup_r+0x46>
 800eaf4:	4628      	mov	r0, r5
 800eaf6:	f7fe ffcb 	bl	800da90 <_free_r>
 800eafa:	2300      	movs	r3, #0
 800eafc:	6363      	str	r3, [r4, #52]	@ 0x34
 800eafe:	89a3      	ldrh	r3, [r4, #12]
 800eb00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800eb04:	81a3      	strh	r3, [r4, #12]
 800eb06:	2300      	movs	r3, #0
 800eb08:	6063      	str	r3, [r4, #4]
 800eb0a:	6923      	ldr	r3, [r4, #16]
 800eb0c:	6023      	str	r3, [r4, #0]
 800eb0e:	89a3      	ldrh	r3, [r4, #12]
 800eb10:	f043 0308 	orr.w	r3, r3, #8
 800eb14:	81a3      	strh	r3, [r4, #12]
 800eb16:	6923      	ldr	r3, [r4, #16]
 800eb18:	b94b      	cbnz	r3, 800eb2e <__swsetup_r+0x7a>
 800eb1a:	89a3      	ldrh	r3, [r4, #12]
 800eb1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800eb20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eb24:	d003      	beq.n	800eb2e <__swsetup_r+0x7a>
 800eb26:	4621      	mov	r1, r4
 800eb28:	4628      	mov	r0, r5
 800eb2a:	f000 f83f 	bl	800ebac <__smakebuf_r>
 800eb2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb32:	f013 0201 	ands.w	r2, r3, #1
 800eb36:	d00a      	beq.n	800eb4e <__swsetup_r+0x9a>
 800eb38:	2200      	movs	r2, #0
 800eb3a:	60a2      	str	r2, [r4, #8]
 800eb3c:	6962      	ldr	r2, [r4, #20]
 800eb3e:	4252      	negs	r2, r2
 800eb40:	61a2      	str	r2, [r4, #24]
 800eb42:	6922      	ldr	r2, [r4, #16]
 800eb44:	b942      	cbnz	r2, 800eb58 <__swsetup_r+0xa4>
 800eb46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800eb4a:	d1c5      	bne.n	800ead8 <__swsetup_r+0x24>
 800eb4c:	bd38      	pop	{r3, r4, r5, pc}
 800eb4e:	0799      	lsls	r1, r3, #30
 800eb50:	bf58      	it	pl
 800eb52:	6962      	ldrpl	r2, [r4, #20]
 800eb54:	60a2      	str	r2, [r4, #8]
 800eb56:	e7f4      	b.n	800eb42 <__swsetup_r+0x8e>
 800eb58:	2000      	movs	r0, #0
 800eb5a:	e7f7      	b.n	800eb4c <__swsetup_r+0x98>
 800eb5c:	2000001c 	.word	0x2000001c

0800eb60 <__swhatbuf_r>:
 800eb60:	b570      	push	{r4, r5, r6, lr}
 800eb62:	460c      	mov	r4, r1
 800eb64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb68:	2900      	cmp	r1, #0
 800eb6a:	b096      	sub	sp, #88	@ 0x58
 800eb6c:	4615      	mov	r5, r2
 800eb6e:	461e      	mov	r6, r3
 800eb70:	da0d      	bge.n	800eb8e <__swhatbuf_r+0x2e>
 800eb72:	89a3      	ldrh	r3, [r4, #12]
 800eb74:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800eb78:	f04f 0100 	mov.w	r1, #0
 800eb7c:	bf14      	ite	ne
 800eb7e:	2340      	movne	r3, #64	@ 0x40
 800eb80:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800eb84:	2000      	movs	r0, #0
 800eb86:	6031      	str	r1, [r6, #0]
 800eb88:	602b      	str	r3, [r5, #0]
 800eb8a:	b016      	add	sp, #88	@ 0x58
 800eb8c:	bd70      	pop	{r4, r5, r6, pc}
 800eb8e:	466a      	mov	r2, sp
 800eb90:	f000 f848 	bl	800ec24 <_fstat_r>
 800eb94:	2800      	cmp	r0, #0
 800eb96:	dbec      	blt.n	800eb72 <__swhatbuf_r+0x12>
 800eb98:	9901      	ldr	r1, [sp, #4]
 800eb9a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800eb9e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800eba2:	4259      	negs	r1, r3
 800eba4:	4159      	adcs	r1, r3
 800eba6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ebaa:	e7eb      	b.n	800eb84 <__swhatbuf_r+0x24>

0800ebac <__smakebuf_r>:
 800ebac:	898b      	ldrh	r3, [r1, #12]
 800ebae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ebb0:	079d      	lsls	r5, r3, #30
 800ebb2:	4606      	mov	r6, r0
 800ebb4:	460c      	mov	r4, r1
 800ebb6:	d507      	bpl.n	800ebc8 <__smakebuf_r+0x1c>
 800ebb8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ebbc:	6023      	str	r3, [r4, #0]
 800ebbe:	6123      	str	r3, [r4, #16]
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	6163      	str	r3, [r4, #20]
 800ebc4:	b003      	add	sp, #12
 800ebc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebc8:	ab01      	add	r3, sp, #4
 800ebca:	466a      	mov	r2, sp
 800ebcc:	f7ff ffc8 	bl	800eb60 <__swhatbuf_r>
 800ebd0:	9f00      	ldr	r7, [sp, #0]
 800ebd2:	4605      	mov	r5, r0
 800ebd4:	4639      	mov	r1, r7
 800ebd6:	4630      	mov	r0, r6
 800ebd8:	f7fd fa26 	bl	800c028 <_malloc_r>
 800ebdc:	b948      	cbnz	r0, 800ebf2 <__smakebuf_r+0x46>
 800ebde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebe2:	059a      	lsls	r2, r3, #22
 800ebe4:	d4ee      	bmi.n	800ebc4 <__smakebuf_r+0x18>
 800ebe6:	f023 0303 	bic.w	r3, r3, #3
 800ebea:	f043 0302 	orr.w	r3, r3, #2
 800ebee:	81a3      	strh	r3, [r4, #12]
 800ebf0:	e7e2      	b.n	800ebb8 <__smakebuf_r+0xc>
 800ebf2:	89a3      	ldrh	r3, [r4, #12]
 800ebf4:	6020      	str	r0, [r4, #0]
 800ebf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ebfa:	81a3      	strh	r3, [r4, #12]
 800ebfc:	9b01      	ldr	r3, [sp, #4]
 800ebfe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ec02:	b15b      	cbz	r3, 800ec1c <__smakebuf_r+0x70>
 800ec04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec08:	4630      	mov	r0, r6
 800ec0a:	f000 f81d 	bl	800ec48 <_isatty_r>
 800ec0e:	b128      	cbz	r0, 800ec1c <__smakebuf_r+0x70>
 800ec10:	89a3      	ldrh	r3, [r4, #12]
 800ec12:	f023 0303 	bic.w	r3, r3, #3
 800ec16:	f043 0301 	orr.w	r3, r3, #1
 800ec1a:	81a3      	strh	r3, [r4, #12]
 800ec1c:	89a3      	ldrh	r3, [r4, #12]
 800ec1e:	431d      	orrs	r5, r3
 800ec20:	81a5      	strh	r5, [r4, #12]
 800ec22:	e7cf      	b.n	800ebc4 <__smakebuf_r+0x18>

0800ec24 <_fstat_r>:
 800ec24:	b538      	push	{r3, r4, r5, lr}
 800ec26:	4d07      	ldr	r5, [pc, #28]	@ (800ec44 <_fstat_r+0x20>)
 800ec28:	2300      	movs	r3, #0
 800ec2a:	4604      	mov	r4, r0
 800ec2c:	4608      	mov	r0, r1
 800ec2e:	4611      	mov	r1, r2
 800ec30:	602b      	str	r3, [r5, #0]
 800ec32:	f7f8 ff73 	bl	8007b1c <_fstat>
 800ec36:	1c43      	adds	r3, r0, #1
 800ec38:	d102      	bne.n	800ec40 <_fstat_r+0x1c>
 800ec3a:	682b      	ldr	r3, [r5, #0]
 800ec3c:	b103      	cbz	r3, 800ec40 <_fstat_r+0x1c>
 800ec3e:	6023      	str	r3, [r4, #0]
 800ec40:	bd38      	pop	{r3, r4, r5, pc}
 800ec42:	bf00      	nop
 800ec44:	200005e4 	.word	0x200005e4

0800ec48 <_isatty_r>:
 800ec48:	b538      	push	{r3, r4, r5, lr}
 800ec4a:	4d06      	ldr	r5, [pc, #24]	@ (800ec64 <_isatty_r+0x1c>)
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	4604      	mov	r4, r0
 800ec50:	4608      	mov	r0, r1
 800ec52:	602b      	str	r3, [r5, #0]
 800ec54:	f7f8 ff72 	bl	8007b3c <_isatty>
 800ec58:	1c43      	adds	r3, r0, #1
 800ec5a:	d102      	bne.n	800ec62 <_isatty_r+0x1a>
 800ec5c:	682b      	ldr	r3, [r5, #0]
 800ec5e:	b103      	cbz	r3, 800ec62 <_isatty_r+0x1a>
 800ec60:	6023      	str	r3, [r4, #0]
 800ec62:	bd38      	pop	{r3, r4, r5, pc}
 800ec64:	200005e4 	.word	0x200005e4

0800ec68 <_init>:
 800ec68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec6a:	bf00      	nop
 800ec6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec6e:	bc08      	pop	{r3}
 800ec70:	469e      	mov	lr, r3
 800ec72:	4770      	bx	lr

0800ec74 <_fini>:
 800ec74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec76:	bf00      	nop
 800ec78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec7a:	bc08      	pop	{r3}
 800ec7c:	469e      	mov	lr, r3
 800ec7e:	4770      	bx	lr

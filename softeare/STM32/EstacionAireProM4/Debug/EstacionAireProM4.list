
EstacionAireProM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013f80  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001da8  08014120  08014120  00015120  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015ec8  08015ec8  000171d8  2**0
                  CONTENTS
  4 .ARM          00000008  08015ec8  08015ec8  00016ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015ed0  08015ed0  000171d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08015ed0  08015ed0  00016ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   0000000c  08015edc  08015edc  00016edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08015ee8  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000534  200001d8  080160c0  000171d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000070c  080160c0  0001770c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000171d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000366c3  00000000  00000000  00017208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000bfec  00000000  00000000  0004d8cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002de0  00000000  00000000  000598b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002288  00000000  00000000  0005c698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000264a6  00000000  00000000  0005e920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00040cf6  00000000  00000000  00084dc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad90e  00000000  00000000  000c5abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  001733ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c610  00000000  00000000  00173450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0017fa60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08014108 	.word	0x08014108

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08014108 	.word	0x08014108

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <_ZN15CManejadorBotonC1Ev>:

#include "Boton/CManejadorBoton.hpp"
#include "Constantes.hpp"
#include "Uart/Uart.hpp"

CManejadorBoton::CManejadorBoton()
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	4a0c      	ldr	r2, [pc, #48]	@ (8000ee4 <_ZN15CManejadorBotonC1Ev+0x3c>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2201      	movs	r2, #1
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	611a      	str	r2, [r3, #16]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	615a      	str	r2, [r3, #20]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	619a      	str	r2, [r3, #24]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	61da      	str	r2, [r3, #28]
{
	// TODO Auto-generated constructor stub

}
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	080145ec 	.word	0x080145ec

08000ee8 <_ZN15CManejadorBotonD1Ev>:

CManejadorBoton::~CManejadorBoton()
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	4a04      	ldr	r2, [pc, #16]	@ (8000f04 <_ZN15CManejadorBotonD1Ev+0x1c>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	080145ec 	.word	0x080145ec

08000f08 <_ZN15CManejadorBotonD0Ev>:
CManejadorBoton::~CManejadorBoton()
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
}
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff ffe9 	bl	8000ee8 <_ZN15CManejadorBotonD1Ev>
 8000f16:	2120      	movs	r1, #32
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f010 fa7d 	bl	8011418 <_ZdlPvj>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>:

void CManejadorBoton::Configurar(GPIO_TypeDef *puerto, uint16_t pin,uint8_t identificador)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	4611      	mov	r1, r2
 8000f34:	461a      	mov	r2, r3
 8000f36:	460b      	mov	r3, r1
 8000f38:	80fb      	strh	r3, [r7, #6]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	717b      	strb	r3, [r7, #5]
	GPIO_Port = puerto;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	68ba      	ldr	r2, [r7, #8]
 8000f42:	605a      	str	r2, [r3, #4]
	Gpio_Pin = pin;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	88fa      	ldrh	r2, [r7, #6]
 8000f48:	811a      	strh	r2, [r3, #8]
	Identificador = identificador;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	797a      	ldrb	r2, [r7, #5]
 8000f4e:	729a      	strb	r2, [r3, #10]
}
 8000f50:	bf00      	nop
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <_ZN15CManejadorBoton4InitEv>:
void CManejadorBoton::Init()
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
	{ 0 };
	GPIO_InitStruct.Pin = Gpio_Pin;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	891b      	ldrh	r3, [r3, #8]
 8000f78:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f107 020c 	add.w	r2, r7, #12
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f00c fd8b 	bl	800daa8 <HAL_GPIO_Init>
}
 8000f92:	bf00      	nop
 8000f94:	3720      	adds	r7, #32
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <_ZN15CManejadorBoton4LeerEv>:
int CManejadorBoton::Leer()
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(GPIO_Port, Gpio_Pin); // lee el pin
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685a      	ldr	r2, [r3, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	891b      	ldrh	r3, [r3, #8]
 8000faa:	4619      	mov	r1, r3
 8000fac:	4610      	mov	r0, r2
 8000fae:	f00c feff 	bl	800ddb0 <HAL_GPIO_ReadPin>
 8000fb2:	4603      	mov	r3, r0

}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>:
void CManejadorBoton::AsignaManejadorEventos(CManejadorEventosBoton *manejador)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
	Manejador = manejador;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	683a      	ldr	r2, [r7, #0]
 8000fca:	61da      	str	r2, [r3, #28]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <_ZN15CManejadorBoton7ProcesaEi>:
void CManejadorBoton::Procesa(int gpio_pin)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
	if (Manejador == NULL)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d02e      	beq.n	8001048 <_ZN15CManejadorBoton7ProcesaEi+0x70>
		return;
	if(gpio_pin!=Gpio_Pin)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	891b      	ldrh	r3, [r3, #8]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d12a      	bne.n	800104c <_ZN15CManejadorBoton7ProcesaEi+0x74>
		return;
	int estado = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
	estado = Leer();
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff ffcd 	bl	8000f9a <_ZN15CManejadorBoton4LeerEv>
 8001000:	60f8      	str	r0, [r7, #12]
	//leo el tiempo actual
	int tiempo = HAL_GetTick();
 8001002:	f00c f8db 	bl	800d1bc <HAL_GetTick>
 8001006:	4603      	mov	r3, r0
 8001008:	60bb      	str	r3, [r7, #8]
	if ((tiempo - ReboteMilis) < TIEMPO_REBOTE)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2bc7      	cmp	r3, #199	@ 0xc7
 8001014:	dd1c      	ble.n	8001050 <_ZN15CManejadorBoton7ProcesaEi+0x78>
	{
		//como todavia no pasa el tiempo de espera para evitar rebotes no hago nada
		return;
	}
	ReboteMilis = HAL_GetTick();  //leo el tiempo actual
 8001016:	f00c f8d1 	bl	800d1bc <HAL_GetTick>
 800101a:	4603      	mov	r3, r0
 800101c:	461a      	mov	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	615a      	str	r2, [r3, #20]

	//ya filtre los rebotes, por lo que ahora si informo del cambio de estado del boton
	Estado = estado;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	60da      	str	r2, [r3, #12]
	if (Estado == BOTON_SUELTO)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d110      	bne.n	8001052 <_ZN15CManejadorBoton7ProcesaEi+0x7a>
	{
		Manejador->OnBotonClickEvent(Identificador);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	69d8      	ldr	r0, [r3, #28]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	69db      	ldr	r3, [r3, #28]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	3308      	adds	r3, #8
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	7a92      	ldrb	r2, [r2, #10]
 8001042:	4611      	mov	r1, r2
 8001044:	4798      	blx	r3
 8001046:	e004      	b.n	8001052 <_ZN15CManejadorBoton7ProcesaEi+0x7a>
		return;
 8001048:	bf00      	nop
 800104a:	e002      	b.n	8001052 <_ZN15CManejadorBoton7ProcesaEi+0x7a>
		return;
 800104c:	bf00      	nop
 800104e:	e000      	b.n	8001052 <_ZN15CManejadorBoton7ProcesaEi+0x7a>
		return;
 8001050:	bf00      	nop
	}
}
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <_ZN22CManejadorEventosBotonC1Ev>:
 *      Author: W10
 */

#include "Boton/CManejadorEventosBoton.hpp"

CManejadorEventosBoton::CManejadorEventosBoton()
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	4a04      	ldr	r2, [pc, #16]	@ (8001074 <_ZN22CManejadorEventosBotonC1Ev+0x1c>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4618      	mov	r0, r3
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	080145fc 	.word	0x080145fc

08001078 <_ZN22CManejadorEventosBotonD1Ev>:

CManejadorEventosBoton::~CManejadorEventosBoton()
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	4a04      	ldr	r2, [pc, #16]	@ (8001094 <_ZN22CManejadorEventosBotonD1Ev+0x1c>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4618      	mov	r0, r3
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	080145fc 	.word	0x080145fc

08001098 <_ZN22CManejadorEventosBotonD0Ev>:
CManejadorEventosBoton::~CManejadorEventosBoton()
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
}
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ffe9 	bl	8001078 <_ZN22CManejadorEventosBotonD1Ev>
 80010a6:	2104      	movs	r1, #4
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f010 f9b5 	bl	8011418 <_ZdlPvj>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <_ZN22CManejadorEventosBoton17OnBotonClickEventEi>:

void CManejadorEventosBoton::OnBotonClickEvent(int idBoton)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]

}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <_ZN10CalefactorC1Ev>:
 *      Author: W10
 */

#include <Calefactor/Calefactor.hpp>
#include "Uart/Uart.hpp"
Calefactor::Calefactor()
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	4a06      	ldr	r2, [pc, #24]	@ (80010f4 <_ZN10CalefactorC1Ev+0x24>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	60da      	str	r2, [r3, #12]
{
	// TODO Auto-generated constructor stub

}
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	08014610 	.word	0x08014610

080010f8 <_ZN10CalefactorD1Ev>:

Calefactor::~Calefactor()
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	4a04      	ldr	r2, [pc, #16]	@ (8001114 <_ZN10CalefactorD1Ev+0x1c>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	08014610 	.word	0x08014610

08001118 <_ZN10CalefactorD0Ev>:
Calefactor::~Calefactor()
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
}
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ffe9 	bl	80010f8 <_ZN10CalefactorD1Ev>
 8001126:	2110      	movs	r1, #16
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f010 f975 	bl	8011418 <_ZdlPvj>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <_ZN10Calefactor10ConfigurarEP12GPIO_TypeDeft>:

void Calefactor::Configurar(GPIO_TypeDef *puerto, uint16_t pin)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	4613      	mov	r3, r2
 8001144:	80fb      	strh	r3, [r7, #6]
	GPIO_Port = puerto;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	68ba      	ldr	r2, [r7, #8]
 800114a:	605a      	str	r2, [r3, #4]
	Gpio_Pin = pin;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	88fa      	ldrh	r2, [r7, #6]
 8001150:	811a      	strh	r2, [r3, #8]

}
 8001152:	bf00      	nop
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <_ZN10Calefactor4InitEv>:
void Calefactor::Init()
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b088      	sub	sp, #32
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =	{ 0 };
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
 8001174:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = Gpio_Pin;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	891b      	ldrh	r3, [r3, #8]
 800117a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117c:	2301      	movs	r3, #1
 800117e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f107 020c 	add.w	r2, r7, #12
 8001190:	4611      	mov	r1, r2
 8001192:	4618      	mov	r0, r3
 8001194:	f00c fc88 	bl	800daa8 <HAL_GPIO_Init>
	Apagar();
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f000 f817 	bl	80011cc <_ZN10Calefactor6ApagarEv>
}
 800119e:	bf00      	nop
 80011a0:	3720      	adds	r7, #32
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <_ZN10Calefactor8EncenderEv>:
void Calefactor::Encender()
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO_Port, Gpio_Pin,	GPIO_PinState::GPIO_PIN_SET);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6858      	ldr	r0, [r3, #4]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	891b      	ldrh	r3, [r3, #8]
 80011b6:	2201      	movs	r2, #1
 80011b8:	4619      	mov	r1, r3
 80011ba:	f00c fe11 	bl	800dde0 <HAL_GPIO_WritePin>
	Estado=ENCENDIDO;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2201      	movs	r2, #1
 80011c2:	60da      	str	r2, [r3, #12]
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <_ZN10Calefactor6ApagarEv>:
void Calefactor::Apagar()
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO_Port, Gpio_Pin,	GPIO_PinState::GPIO_PIN_RESET);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6858      	ldr	r0, [r3, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	891b      	ldrh	r3, [r3, #8]
 80011dc:	2200      	movs	r2, #0
 80011de:	4619      	mov	r1, r3
 80011e0:	f00c fdfe 	bl	800dde0 <HAL_GPIO_WritePin>
	Estado=APAGADO;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <_ZN20ControlVelocidadAireC1Ev>:

#include "ControlVelocidadAire.hpp"
#include "stm32f4xx.h"
//#include "stm32f1xx_hal_adc.h"

ControlVelocidadAire::ControlVelocidadAire()
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	4a04      	ldr	r2, [pc, #16]	@ (8001210 <_ZN20ControlVelocidadAireC1Ev+0x1c>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4618      	mov	r0, r3
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	08014620 	.word	0x08014620

08001214 <_ZN20ControlVelocidadAireD1Ev>:

ControlVelocidadAire::~ControlVelocidadAire()
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	4a04      	ldr	r2, [pc, #16]	@ (8001230 <_ZN20ControlVelocidadAireD1Ev+0x1c>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4618      	mov	r0, r3
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	08014620 	.word	0x08014620

08001234 <_ZN20ControlVelocidadAireD0Ev>:
ControlVelocidadAire::~ControlVelocidadAire()
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
}
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ffe9 	bl	8001214 <_ZN20ControlVelocidadAireD1Ev>
 8001242:	214c      	movs	r1, #76	@ 0x4c
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f010 f8e7 	bl	8011418 <_ZdlPvj>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <_ZN20ControlVelocidadAire10InicializaEv>:

void ControlVelocidadAire::Inicializa()
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	4b36      	ldr	r3, [pc, #216]	@ (800133c <_ZN20ControlVelocidadAire10InicializaEv+0xe8>)
 8001262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001264:	4a35      	ldr	r2, [pc, #212]	@ (800133c <_ZN20ControlVelocidadAire10InicializaEv+0xe8>)
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	6313      	str	r3, [r2, #48]	@ 0x30
 800126c:	4b33      	ldr	r3, [pc, #204]	@ (800133c <_ZN20ControlVelocidadAire10InicializaEv+0xe8>)
 800126e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	68fb      	ldr	r3, [r7, #12]
	 ADC_ChannelConfTypeDef sConfig = {0};
 8001278:	f107 0310 	add.w	r3, r7, #16
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
	 hadc1.Instance = ADC1;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a2d      	ldr	r2, [pc, #180]	@ (8001340 <_ZN20ControlVelocidadAire10InicializaEv+0xec>)
 800128a:	605a      	str	r2, [r3, #4]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2; //NUEVO
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B; //nuevo
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	60da      	str	r2, [r3, #12]

	 hadc1.Init.ScanConvMode =  DISABLE;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	615a      	str	r2, [r3, #20]
	 hadc1.Init.ContinuousConvMode = ENABLE;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2201      	movs	r2, #1
 80012a2:	771a      	strb	r2, [r3, #28]
	 hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	 hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;//nuevo
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	631a      	str	r2, [r3, #48]	@ 0x30
	 hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a23      	ldr	r2, [pc, #140]	@ (8001344 <_ZN20ControlVelocidadAire10InicializaEv+0xf0>)
 80012b6:	62da      	str	r2, [r3, #44]	@ 0x2c
	 hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
	 hadc1.State=	 HAL_ADC_STATE_RESET;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	645a      	str	r2, [r3, #68]	@ 0x44
	 hadc1.Init.NbrOfConversion = 1;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2201      	movs	r2, #1
 80012c8:	621a      	str	r2, [r3, #32]
	  hadc1.Init.DMAContinuousRequests = DISABLE; //nuevo
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2201      	movs	r2, #1
 80012d6:	619a      	str	r2, [r3, #24]

	 if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3304      	adds	r3, #4
 80012dc:	4618      	mov	r0, r3
 80012de:	f00b ff9d 	bl	800d21c <HAL_ADC_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	bf14      	ite	ne
 80012e8:	2301      	movne	r3, #1
 80012ea:	2300      	moveq	r3, #0
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d002      	beq.n	80012f8 <_ZN20ControlVelocidadAire10InicializaEv+0xa4>
	 {
	 Error_Handler();
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f000 f84e 	bl	8001394 <_ZN20ControlVelocidadAire13Error_HandlerEv>
	 }

	 sConfig.Channel = ADC_CHANNEL_3;
 80012f8:	2303      	movs	r3, #3
 80012fa:	613b      	str	r3, [r7, #16]
	 sConfig.Rank =1; // ADC_REGULAR_RANK_1;
 80012fc:	2301      	movs	r3, #1
 80012fe:	617b      	str	r3, [r7, #20]
	 sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES; //ADC_SAMPLETIME_239CYCLES_5;
 8001300:	2300      	movs	r3, #0
 8001302:	61bb      	str	r3, [r7, #24]
	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3304      	adds	r3, #4
 8001308:	f107 0210 	add.w	r2, r7, #16
 800130c:	4611      	mov	r1, r2
 800130e:	4618      	mov	r0, r3
 8001310:	f00c f88a 	bl	800d428 <HAL_ADC_ConfigChannel>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	bf14      	ite	ne
 800131a:	2301      	movne	r3, #1
 800131c:	2300      	moveq	r3, #0
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b00      	cmp	r3, #0
 8001322:	d002      	beq.n	800132a <_ZN20ControlVelocidadAire10InicializaEv+0xd6>
	 {
	 Error_Handler();
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f000 f835 	bl	8001394 <_ZN20ControlVelocidadAire13Error_HandlerEv>
	 }
	 HAL_ADC_Start(&hadc1);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3304      	adds	r3, #4
 800132e:	4618      	mov	r0, r3
 8001330:	f00b ffb8 	bl	800d2a4 <HAL_ADC_Start>
}
 8001334:	bf00      	nop
 8001336:	3720      	adds	r7, #32
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40023800 	.word	0x40023800
 8001340:	40012000 	.word	0x40012000
 8001344:	0f000001 	.word	0x0f000001

08001348 <_ZN20ControlVelocidadAire12LeeVelocidadEv>:
int ControlVelocidadAire::LeeVelocidad()
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	Inicializa();
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ff7f 	bl	8001254 <_ZN20ControlVelocidadAire10InicializaEv>
	HAL_ADC_Start(&hadc1);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3304      	adds	r3, #4
 800135a:	4618      	mov	r0, r3
 800135c:	f00b ffa2 	bl	800d2a4 <HAL_ADC_Start>
	int valor=HAL_ADC_GetValue(&hadc1);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3304      	adds	r3, #4
 8001364:	4618      	mov	r0, r3
 8001366:	f00c f851 	bl	800d40c <HAL_ADC_GetValue>
 800136a:	4603      	mov	r3, r0
 800136c:	60fb      	str	r3, [r7, #12]
	//4095->100
	//valor->X
	//x=valor*100/4095
	return 	100-(int)(valor*100/4095);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2264      	movs	r2, #100	@ 0x64
 8001372:	fb02 f303 	mul.w	r3, r2, r3
 8001376:	4a06      	ldr	r2, [pc, #24]	@ (8001390 <_ZN20ControlVelocidadAire12LeeVelocidadEv+0x48>)
 8001378:	fb82 1203 	smull	r1, r2, r2, r3
 800137c:	441a      	add	r2, r3
 800137e:	12d2      	asrs	r2, r2, #11
 8001380:	17db      	asrs	r3, r3, #31
 8001382:	1a9b      	subs	r3, r3, r2
 8001384:	3364      	adds	r3, #100	@ 0x64
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	80080081 	.word	0x80080081

08001394 <_ZN20ControlVelocidadAire13Error_HandlerEv>:
void ControlVelocidadAire::Error_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]

}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <_ZN6CEpromC1Ev>:
#include <EPROM/CEprom.hpp>
#include "stm32f4xx.h"
#include "stm32f4xx_hal_conf.h"
extern I2C_HandleTypeDef hi2c1;

CEprom::CEprom()
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	4a23      	ldr	r2, [pc, #140]	@ (8001440 <_ZN6CEpromC1Ev+0x98>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2202      	movs	r2, #2
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2204      	movs	r2, #4
 80013ce:	611a      	str	r2, [r3, #16]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2208      	movs	r2, #8
 80013d4:	615a      	str	r2, [r3, #20]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	220c      	movs	r2, #12
 80013da:	619a      	str	r2, [r3, #24]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2210      	movs	r2, #16
 80013e0:	61da      	str	r2, [r3, #28]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2212      	movs	r2, #18
 80013e6:	621a      	str	r2, [r3, #32]
{
	// TODO Auto-generated constructor stub
	Diferencia = -1;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f04f 32ff 	mov.w	r2, #4294967295
 80013ee:	625a      	str	r2, [r3, #36]	@ 0x24
	TemperaturaManual = -1;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f04f 32ff 	mov.w	r2, #4294967295
 80013f6:	629a      	str	r2, [r3, #40]	@ 0x28
	Memoria1_Temperatura = -1;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f04f 32ff 	mov.w	r2, #4294967295
 80013fe:	62da      	str	r2, [r3, #44]	@ 0x2c
	Memoria1_VelocidadAire = -1;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f04f 32ff 	mov.w	r2, #4294967295
 8001406:	631a      	str	r2, [r3, #48]	@ 0x30
	Memoria2_Temperatura = -1;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f04f 32ff 	mov.w	r2, #4294967295
 800140e:	635a      	str	r2, [r3, #52]	@ 0x34
	Memoria2_VelocidadAire = -1;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f04f 32ff 	mov.w	r2, #4294967295
 8001416:	639a      	str	r2, [r3, #56]	@ 0x38
	Memoria3_Temperatura = -1;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f04f 32ff 	mov.w	r2, #4294967295
 800141e:	63da      	str	r2, [r3, #60]	@ 0x3c
	Memoria3_VelocidadAire = -1;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f04f 32ff 	mov.w	r2, #4294967295
 8001426:	641a      	str	r2, [r3, #64]	@ 0x40
	NRampas=-1;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f04f 32ff 	mov.w	r2, #4294967295
 800142e:	645a      	str	r2, [r3, #68]	@ 0x44

}
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4618      	mov	r0, r3
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	08014630 	.word	0x08014630

08001444 <_ZN6CEpromD1Ev>:

CEprom::~CEprom()
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	4a04      	ldr	r2, [pc, #16]	@ (8001460 <_ZN6CEpromD1Ev+0x1c>)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4618      	mov	r0, r3
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	08014630 	.word	0x08014630

08001464 <_ZN6CEpromD0Ev>:
CEprom::~CEprom()
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
}
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff ffe9 	bl	8001444 <_ZN6CEpromD1Ev>
 8001472:	2148      	movs	r1, #72	@ 0x48
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f00f ffcf 	bl	8011418 <_ZdlPvj>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <_ZN6CEprom21DameTemperaturaManualEv>:

int CEprom::DameTemperaturaManual()
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af04      	add	r7, sp, #16
 800148a:	6078      	str	r0, [r7, #4]
	if (TemperaturaManual != -1)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001494:	d002      	beq.n	800149c <_ZN6CEprom21DameTemperaturaManualEv+0x18>
		return TemperaturaManual;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800149a:	e029      	b.n	80014f0 <_ZN6CEprom21DameTemperaturaManualEv+0x6c>
	uint16_t temperatura;
	if (HAL_I2C_Mem_Read(&hi2c1, DameDireccionAlta(TEMPERATURAMANUAL), TEMPERATURAMANUAL, I2C_MEMADD_SIZE_8BIT, (uint8_t*) &temperatura, 2, HAL_MAX_DELAY) == HAL_OK)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	4619      	mov	r1, r3
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f000 fb2b 	bl	8001b00 <_ZN6CEprom17DameDireccionAltaEt>
 80014aa:	4603      	mov	r3, r0
 80014ac:	4619      	mov	r1, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	f04f 33ff 	mov.w	r3, #4294967295
 80014b8:	9302      	str	r3, [sp, #8]
 80014ba:	2302      	movs	r3, #2
 80014bc:	9301      	str	r3, [sp, #4]
 80014be:	f107 030e 	add.w	r3, r7, #14
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	2301      	movs	r3, #1
 80014c6:	480c      	ldr	r0, [pc, #48]	@ (80014f8 <_ZN6CEprom21DameTemperaturaManualEv+0x74>)
 80014c8:	f00c fefa 	bl	800e2c0 <HAL_I2C_Mem_Read>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	bf0c      	ite	eq
 80014d2:	2301      	moveq	r3, #1
 80014d4:	2300      	movne	r3, #0
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d007      	beq.n	80014ec <_ZN6CEprom21DameTemperaturaManualEv+0x68>
	{
		if (temperatura >= 0 && temperatura <= 500)
 80014dc:	89fb      	ldrh	r3, [r7, #14]
 80014de:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80014e2:	d803      	bhi.n	80014ec <_ZN6CEprom21DameTemperaturaManualEv+0x68>
		{
			TemperaturaManual = temperatura;
 80014e4:	89fb      	ldrh	r3, [r7, #14]
 80014e6:	461a      	mov	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	629a      	str	r2, [r3, #40]	@ 0x28
		}
	}
	return TemperaturaManual;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	200003d8 	.word	0x200003d8

080014fc <_ZN6CEprom23GuardaTemepraturaManualEi>:

void CEprom::GuardaTemepraturaManual(int temperatura)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af04      	add	r7, sp, #16
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
	TemperaturaManual = temperatura;
 8001506:	683a      	ldr	r2, [r7, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_I2C_Mem_Write(&hi2c1, DameDireccionAlta(TEMPERATURAMANUAL), TEMPERATURAMANUAL, I2C_MEMADD_SIZE_8BIT, (uint8_t*) &temperatura, 2, HAL_MAX_DELAY);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	b29b      	uxth	r3, r3
 8001512:	4619      	mov	r1, r3
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 faf3 	bl	8001b00 <_ZN6CEprom17DameDireccionAltaEt>
 800151a:	4603      	mov	r3, r0
 800151c:	4619      	mov	r1, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	b29a      	uxth	r2, r3
 8001524:	f04f 33ff 	mov.w	r3, #4294967295
 8001528:	9302      	str	r3, [sp, #8]
 800152a:	2302      	movs	r3, #2
 800152c:	9301      	str	r3, [sp, #4]
 800152e:	463b      	mov	r3, r7
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	2301      	movs	r3, #1
 8001534:	4803      	ldr	r0, [pc, #12]	@ (8001544 <_ZN6CEprom23GuardaTemepraturaManualEi+0x48>)
 8001536:	f00c fdc9 	bl	800e0cc <HAL_I2C_Mem_Write>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	200003d8 	.word	0x200003d8

08001548 <_ZN6CEprom21DameAjusteTemperaturaEv>:

int CEprom::DameAjusteTemperatura()
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af04      	add	r7, sp, #16
 800154e:	6078      	str	r0, [r7, #4]
	if (Diferencia != -1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001558:	d002      	beq.n	8001560 <_ZN6CEprom21DameAjusteTemperaturaEv+0x18>
		return Diferencia;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155e:	e032      	b.n	80015c6 <_ZN6CEprom21DameAjusteTemperaturaEv+0x7e>
	if (HAL_I2C_Mem_Read(&hi2c1, DameDireccionAlta(AJUSTETEMPERATURA), AJUSTETEMPERATURA, I2C_MEMADD_SIZE_8BIT, (uint8_t*) &Diferencia, 2, HAL_MAX_DELAY) == HAL_OK)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	b29b      	uxth	r3, r3
 8001566:	4619      	mov	r1, r3
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f000 fac9 	bl	8001b00 <_ZN6CEprom17DameDireccionAltaEt>
 800156e:	4603      	mov	r3, r0
 8001570:	4618      	mov	r0, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	b29a      	uxth	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3324      	adds	r3, #36	@ 0x24
 800157c:	f04f 31ff 	mov.w	r1, #4294967295
 8001580:	9102      	str	r1, [sp, #8]
 8001582:	2102      	movs	r1, #2
 8001584:	9101      	str	r1, [sp, #4]
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	2301      	movs	r3, #1
 800158a:	4601      	mov	r1, r0
 800158c:	4810      	ldr	r0, [pc, #64]	@ (80015d0 <_ZN6CEprom21DameAjusteTemperaturaEv+0x88>)
 800158e:	f00c fe97 	bl	800e2c0 <HAL_I2C_Mem_Read>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	bf0c      	ite	eq
 8001598:	2301      	moveq	r3, #1
 800159a:	2300      	movne	r3, #0
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00c      	beq.n	80015bc <_ZN6CEprom21DameAjusteTemperaturaEv+0x74>
	{
		if (Diferencia >= -500 && Diferencia <= 500)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a6:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 80015aa:	db07      	blt.n	80015bc <_ZN6CEprom21DameAjusteTemperaturaEv+0x74>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80015b4:	dc02      	bgt.n	80015bc <_ZN6CEprom21DameAjusteTemperaturaEv+0x74>
		{
			return Diferencia;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ba:	e004      	b.n	80015c6 <_ZN6CEprom21DameAjusteTemperaturaEv+0x7e>
		}
	}
	Diferencia = 0;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	625a      	str	r2, [r3, #36]	@ 0x24
	return Diferencia;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200003d8 	.word	0x200003d8

080015d4 <_ZN6CEprom23GuardaAjusteTemperaturaEi>:

void CEprom::GuardaAjusteTemperatura(int diferencia)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af04      	add	r7, sp, #16
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
	Diferencia=diferencia;
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_I2C_Mem_Write(&hi2c1,DameDireccionAlta(AJUSTETEMPERATURA),AJUSTETEMPERATURA,I2C_MEMADD_SIZE_8BIT,(uint8_t*)&diferencia,2,HAL_MAX_DELAY);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	4619      	mov	r1, r3
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 fa87 	bl	8001b00 <_ZN6CEprom17DameDireccionAltaEt>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4619      	mov	r1, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001600:	9302      	str	r3, [sp, #8]
 8001602:	2302      	movs	r3, #2
 8001604:	9301      	str	r3, [sp, #4]
 8001606:	463b      	mov	r3, r7
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	2301      	movs	r3, #1
 800160c:	4803      	ldr	r0, [pc, #12]	@ (800161c <_ZN6CEprom23GuardaAjusteTemperaturaEi+0x48>)
 800160e:	f00c fd5d 	bl	800e0cc <HAL_I2C_Mem_Write>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	200003d8 	.word	0x200003d8

08001620 <_ZN6CEprom23DameTemperatuarMemoria1Ev>:

int CEprom::DameTemperatuarMemoria1()
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	if (Memoria1_Temperatura == -1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800162c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001630:	d102      	bne.n	8001638 <_ZN6CEprom23DameTemperatuarMemoria1Ev+0x18>
		LeeMemoria1();
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f8f0 	bl	8001818 <_ZN6CEprom11LeeMemoria1Ev>
	return Memoria1_Temperatura;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c

}
 800163c:	4618      	mov	r0, r3
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <_ZN6CEprom21DameVelocidadMemoria1Ev>:

int CEprom::DameVelocidadMemoria1()
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	if (Memoria1_VelocidadAire == -1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001654:	d102      	bne.n	800165c <_ZN6CEprom21DameVelocidadMemoria1Ev+0x18>
		LeeMemoria1();
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f000 f8de 	bl	8001818 <_ZN6CEprom11LeeMemoria1Ev>
	return Memoria1_VelocidadAire;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <_ZN6CEprom14GuardaMemoria1Eii>:

void CEprom::GuardaMemoria1(int temperatura, int velocidad)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	@ 0x28
 800166c:	af04      	add	r7, sp, #16
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
	Memoria1_Temperatura = temperatura;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	62da      	str	r2, [r3, #44]	@ 0x2c
	Memoria1_VelocidadAire = velocidad;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	631a      	str	r2, [r3, #48]	@ 0x30
	uint16_t datos_w[2];
	datos_w[0] = temperatura;
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	b29b      	uxth	r3, r3
 8001684:	82bb      	strh	r3, [r7, #20]
	datos_w[1] = velocidad;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	b29b      	uxth	r3, r3
 800168a:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Write(&hi2c1, DameDireccionAlta(MEMORIA1), MEMORIA1, I2C_MEMADD_SIZE_8BIT, (uint8_t*) datos_w, 4, HAL_MAX_DELAY);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	b29b      	uxth	r3, r3
 8001692:	4619      	mov	r1, r3
 8001694:	68f8      	ldr	r0, [r7, #12]
 8001696:	f000 fa33 	bl	8001b00 <_ZN6CEprom17DameDireccionAltaEt>
 800169a:	4603      	mov	r3, r0
 800169c:	4619      	mov	r1, r3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	f04f 33ff 	mov.w	r3, #4294967295
 80016a8:	9302      	str	r3, [sp, #8]
 80016aa:	2304      	movs	r3, #4
 80016ac:	9301      	str	r3, [sp, #4]
 80016ae:	f107 0314 	add.w	r3, r7, #20
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	2301      	movs	r3, #1
 80016b6:	4803      	ldr	r0, [pc, #12]	@ (80016c4 <_ZN6CEprom14GuardaMemoria1Eii+0x5c>)
 80016b8:	f00c fd08 	bl	800e0cc <HAL_I2C_Mem_Write>

}
 80016bc:	bf00      	nop
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	200003d8 	.word	0x200003d8

080016c8 <_ZN6CEprom23DameTemperatuarMemoria2Ev>:

int CEprom::DameTemperatuarMemoria2()
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	if (Memoria2_Temperatura == -1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d8:	d102      	bne.n	80016e0 <_ZN6CEprom23DameTemperatuarMemoria2Ev+0x18>
		LeeMemoria2();
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 f8e6 	bl	80018ac <_ZN6CEprom11LeeMemoria2Ev>
	return Memoria2_Temperatura;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34

}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <_ZN6CEprom21DameVelocidadMemoria2Ev>:

int CEprom::DameVelocidadMemoria2()
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	if (Memoria2_VelocidadAire == -1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016fc:	d102      	bne.n	8001704 <_ZN6CEprom21DameVelocidadMemoria2Ev+0x18>
		LeeMemoria2();
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 f8d4 	bl	80018ac <_ZN6CEprom11LeeMemoria2Ev>
	return Memoria2_VelocidadAire;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8001708:	4618      	mov	r0, r3
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <_ZN6CEprom14GuardaMemoria2Eii>:

void CEprom::GuardaMemoria2(int temperatura, int velocidad)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08a      	sub	sp, #40	@ 0x28
 8001714:	af04      	add	r7, sp, #16
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
	Memoria2_Temperatura = temperatura;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	635a      	str	r2, [r3, #52]	@ 0x34
	Memoria2_VelocidadAire = velocidad;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	639a      	str	r2, [r3, #56]	@ 0x38
	uint16_t datos_w[2];
	datos_w[0] = temperatura;
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	b29b      	uxth	r3, r3
 800172c:	82bb      	strh	r3, [r7, #20]
	datos_w[1] = velocidad;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	b29b      	uxth	r3, r3
 8001732:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Write(&hi2c1, DameDireccionAlta(MEMORIA2), MEMORIA2, I2C_MEMADD_SIZE_8BIT, (uint8_t*) datos_w, 4, HAL_MAX_DELAY);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	b29b      	uxth	r3, r3
 800173a:	4619      	mov	r1, r3
 800173c:	68f8      	ldr	r0, [r7, #12]
 800173e:	f000 f9df 	bl	8001b00 <_ZN6CEprom17DameDireccionAltaEt>
 8001742:	4603      	mov	r3, r0
 8001744:	4619      	mov	r1, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	b29a      	uxth	r2, r3
 800174c:	f04f 33ff 	mov.w	r3, #4294967295
 8001750:	9302      	str	r3, [sp, #8]
 8001752:	2304      	movs	r3, #4
 8001754:	9301      	str	r3, [sp, #4]
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	2301      	movs	r3, #1
 800175e:	4803      	ldr	r0, [pc, #12]	@ (800176c <_ZN6CEprom14GuardaMemoria2Eii+0x5c>)
 8001760:	f00c fcb4 	bl	800e0cc <HAL_I2C_Mem_Write>

}
 8001764:	bf00      	nop
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	200003d8 	.word	0x200003d8

08001770 <_ZN6CEprom23DameTemperatuarMemoria3Ev>:

int CEprom::DameTemperatuarMemoria3()
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
	if (Memoria3_Temperatura == -1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800177c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001780:	d102      	bne.n	8001788 <_ZN6CEprom23DameTemperatuarMemoria3Ev+0x18>
		LeeMemoria3();
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 f8dc 	bl	8001940 <_ZN6CEprom11LeeMemoria3Ev>
	return Memoria3_Temperatura;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c

}
 800178c:	4618      	mov	r0, r3
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <_ZN6CEprom21DameVelocidadMemoria3Ev>:
int CEprom::DameVelocidadMemoria3()
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	if (Memoria3_VelocidadAire == -1)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a4:	d102      	bne.n	80017ac <_ZN6CEprom21DameVelocidadMemoria3Ev+0x18>
		LeeMemoria3();
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f000 f8ca 	bl	8001940 <_ZN6CEprom11LeeMemoria3Ev>
	return Memoria3_VelocidadAire;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <_ZN6CEprom14GuardaMemoria3Eii>:
void CEprom::GuardaMemoria3(int temperatura, int velocidad)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	@ 0x28
 80017bc:	af04      	add	r7, sp, #16
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
	Memoria3_Temperatura = temperatura;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	63da      	str	r2, [r3, #60]	@ 0x3c
	Memoria3_VelocidadAire = velocidad;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	641a      	str	r2, [r3, #64]	@ 0x40
	uint16_t datos_w[2];
	datos_w[0] = temperatura;
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	82bb      	strh	r3, [r7, #20]
	datos_w[1] = velocidad;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Write(&hi2c1, DameDireccionAlta(MEMORIA3), MEMORIA3, I2C_MEMADD_SIZE_8BIT, (uint8_t*) datos_w, 4, HAL_MAX_DELAY);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	4619      	mov	r1, r3
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	f000 f98b 	bl	8001b00 <_ZN6CEprom17DameDireccionAltaEt>
 80017ea:	4603      	mov	r3, r0
 80017ec:	4619      	mov	r1, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	f04f 33ff 	mov.w	r3, #4294967295
 80017f8:	9302      	str	r3, [sp, #8]
 80017fa:	2304      	movs	r3, #4
 80017fc:	9301      	str	r3, [sp, #4]
 80017fe:	f107 0314 	add.w	r3, r7, #20
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	2301      	movs	r3, #1
 8001806:	4803      	ldr	r0, [pc, #12]	@ (8001814 <_ZN6CEprom14GuardaMemoria3Eii+0x5c>)
 8001808:	f00c fc60 	bl	800e0cc <HAL_I2C_Mem_Write>
}
 800180c:	bf00      	nop
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	200003d8 	.word	0x200003d8

08001818 <_ZN6CEprom11LeeMemoria1Ev>:
void CEprom::LeeMemoria1()
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b088      	sub	sp, #32
 800181c:	af04      	add	r7, sp, #16
 800181e:	6078      	str	r0, [r7, #4]
	uint16_t datos_r[2];
	if (HAL_I2C_Mem_Read(&hi2c1, DameDireccionAlta(MEMORIA1), MEMORIA1, I2C_MEMADD_SIZE_8BIT, (uint8_t*) datos_r, 4, HAL_MAX_DELAY) == HAL_OK)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	b29b      	uxth	r3, r3
 8001826:	4619      	mov	r1, r3
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f000 f969 	bl	8001b00 <_ZN6CEprom17DameDireccionAltaEt>
 800182e:	4603      	mov	r3, r0
 8001830:	4619      	mov	r1, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	b29a      	uxth	r2, r3
 8001838:	f04f 33ff 	mov.w	r3, #4294967295
 800183c:	9302      	str	r3, [sp, #8]
 800183e:	2304      	movs	r3, #4
 8001840:	9301      	str	r3, [sp, #4]
 8001842:	f107 030c 	add.w	r3, r7, #12
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	2301      	movs	r3, #1
 800184a:	4817      	ldr	r0, [pc, #92]	@ (80018a8 <_ZN6CEprom11LeeMemoria1Ev+0x90>)
 800184c:	f00c fd38 	bl	800e2c0 <HAL_I2C_Mem_Read>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	bf0c      	ite	eq
 8001856:	2301      	moveq	r3, #1
 8001858:	2300      	movne	r3, #0
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b00      	cmp	r3, #0
 800185e:	d01e      	beq.n	800189e <_ZN6CEprom11LeeMemoria1Ev+0x86>
	{
		Memoria1_Temperatura = datos_r[0];
 8001860:	89bb      	ldrh	r3, [r7, #12]
 8001862:	461a      	mov	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	62da      	str	r2, [r3, #44]	@ 0x2c
		Memoria1_VelocidadAire = datos_r[1];
 8001868:	89fb      	ldrh	r3, [r7, #14]
 800186a:	461a      	mov	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	631a      	str	r2, [r3, #48]	@ 0x30
		if (Memoria1_Temperatura < 0 || Memoria1_Temperatura > 500)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001874:	2b00      	cmp	r3, #0
 8001876:	db04      	blt.n	8001882 <_ZN6CEprom11LeeMemoria1Ev+0x6a>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800187c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001880:	dd02      	ble.n	8001888 <_ZN6CEprom11LeeMemoria1Ev+0x70>
		{
			Memoria1_Temperatura = 100;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2264      	movs	r2, #100	@ 0x64
 8001886:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
		if (Memoria1_VelocidadAire < 0 || Memoria1_VelocidadAire > 100)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188c:	2b00      	cmp	r3, #0
 800188e:	db03      	blt.n	8001898 <_ZN6CEprom11LeeMemoria1Ev+0x80>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001894:	2b64      	cmp	r3, #100	@ 0x64
 8001896:	dd02      	ble.n	800189e <_ZN6CEprom11LeeMemoria1Ev+0x86>
		{
			Memoria1_VelocidadAire = 50;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2232      	movs	r2, #50	@ 0x32
 800189c:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
}
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200003d8 	.word	0x200003d8

080018ac <_ZN6CEprom11LeeMemoria2Ev>:
void CEprom::LeeMemoria2()
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b088      	sub	sp, #32
 80018b0:	af04      	add	r7, sp, #16
 80018b2:	6078      	str	r0, [r7, #4]
	uint16_t datos_r[2];
	if (HAL_I2C_Mem_Read(&hi2c1, DameDireccionAlta(MEMORIA2), MEMORIA2, I2C_MEMADD_SIZE_8BIT, (uint8_t*) datos_r, 4, HAL_MAX_DELAY) == HAL_OK)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	4619      	mov	r1, r3
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 f91f 	bl	8001b00 <_ZN6CEprom17DameDireccionAltaEt>
 80018c2:	4603      	mov	r3, r0
 80018c4:	4619      	mov	r1, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	f04f 33ff 	mov.w	r3, #4294967295
 80018d0:	9302      	str	r3, [sp, #8]
 80018d2:	2304      	movs	r3, #4
 80018d4:	9301      	str	r3, [sp, #4]
 80018d6:	f107 030c 	add.w	r3, r7, #12
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	2301      	movs	r3, #1
 80018de:	4817      	ldr	r0, [pc, #92]	@ (800193c <_ZN6CEprom11LeeMemoria2Ev+0x90>)
 80018e0:	f00c fcee 	bl	800e2c0 <HAL_I2C_Mem_Read>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	bf0c      	ite	eq
 80018ea:	2301      	moveq	r3, #1
 80018ec:	2300      	movne	r3, #0
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d01e      	beq.n	8001932 <_ZN6CEprom11LeeMemoria2Ev+0x86>
	{
		Memoria2_Temperatura = datos_r[0];
 80018f4:	89bb      	ldrh	r3, [r7, #12]
 80018f6:	461a      	mov	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	635a      	str	r2, [r3, #52]	@ 0x34
		Memoria2_VelocidadAire = datos_r[1];
 80018fc:	89fb      	ldrh	r3, [r7, #14]
 80018fe:	461a      	mov	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	639a      	str	r2, [r3, #56]	@ 0x38
		if (Memoria2_Temperatura < 0 || Memoria2_Temperatura > 500)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001908:	2b00      	cmp	r3, #0
 800190a:	db04      	blt.n	8001916 <_ZN6CEprom11LeeMemoria2Ev+0x6a>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001910:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001914:	dd02      	ble.n	800191c <_ZN6CEprom11LeeMemoria2Ev+0x70>
		{
			Memoria2_Temperatura = 100;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2264      	movs	r2, #100	@ 0x64
 800191a:	635a      	str	r2, [r3, #52]	@ 0x34
		}
		if (Memoria2_VelocidadAire < 0 || Memoria2_VelocidadAire > 100)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001920:	2b00      	cmp	r3, #0
 8001922:	db03      	blt.n	800192c <_ZN6CEprom11LeeMemoria2Ev+0x80>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001928:	2b64      	cmp	r3, #100	@ 0x64
 800192a:	dd02      	ble.n	8001932 <_ZN6CEprom11LeeMemoria2Ev+0x86>
		{
			Memoria2_VelocidadAire = 50;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2232      	movs	r2, #50	@ 0x32
 8001930:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
}
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	200003d8 	.word	0x200003d8

08001940 <_ZN6CEprom11LeeMemoria3Ev>:
void CEprom::LeeMemoria3()
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b088      	sub	sp, #32
 8001944:	af04      	add	r7, sp, #16
 8001946:	6078      	str	r0, [r7, #4]
	uint16_t datos_r[2];
	if (HAL_I2C_Mem_Read(&hi2c1, DameDireccionAlta(MEMORIA3), MEMORIA3, I2C_MEMADD_SIZE_8BIT, (uint8_t*) datos_r, 4, HAL_MAX_DELAY) == HAL_OK)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	b29b      	uxth	r3, r3
 800194e:	4619      	mov	r1, r3
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 f8d5 	bl	8001b00 <_ZN6CEprom17DameDireccionAltaEt>
 8001956:	4603      	mov	r3, r0
 8001958:	4619      	mov	r1, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	b29a      	uxth	r2, r3
 8001960:	f04f 33ff 	mov.w	r3, #4294967295
 8001964:	9302      	str	r3, [sp, #8]
 8001966:	2304      	movs	r3, #4
 8001968:	9301      	str	r3, [sp, #4]
 800196a:	f107 030c 	add.w	r3, r7, #12
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	2301      	movs	r3, #1
 8001972:	4817      	ldr	r0, [pc, #92]	@ (80019d0 <_ZN6CEprom11LeeMemoria3Ev+0x90>)
 8001974:	f00c fca4 	bl	800e2c0 <HAL_I2C_Mem_Read>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	bf0c      	ite	eq
 800197e:	2301      	moveq	r3, #1
 8001980:	2300      	movne	r3, #0
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b00      	cmp	r3, #0
 8001986:	d01e      	beq.n	80019c6 <_ZN6CEprom11LeeMemoria3Ev+0x86>
	{
		Memoria3_Temperatura = datos_r[0];
 8001988:	89bb      	ldrh	r3, [r7, #12]
 800198a:	461a      	mov	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	63da      	str	r2, [r3, #60]	@ 0x3c
		Memoria3_VelocidadAire = datos_r[1];
 8001990:	89fb      	ldrh	r3, [r7, #14]
 8001992:	461a      	mov	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	641a      	str	r2, [r3, #64]	@ 0x40
		if (Memoria3_Temperatura < 0 || Memoria3_Temperatura > 500)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800199c:	2b00      	cmp	r3, #0
 800199e:	db04      	blt.n	80019aa <_ZN6CEprom11LeeMemoria3Ev+0x6a>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019a4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80019a8:	dd02      	ble.n	80019b0 <_ZN6CEprom11LeeMemoria3Ev+0x70>
		{
			Memoria3_Temperatura = 100;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2264      	movs	r2, #100	@ 0x64
 80019ae:	63da      	str	r2, [r3, #60]	@ 0x3c
		}
		if (Memoria3_VelocidadAire < 0 || Memoria3_VelocidadAire > 100)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	db03      	blt.n	80019c0 <_ZN6CEprom11LeeMemoria3Ev+0x80>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019bc:	2b64      	cmp	r3, #100	@ 0x64
 80019be:	dd02      	ble.n	80019c6 <_ZN6CEprom11LeeMemoria3Ev+0x86>
		{
			Memoria3_VelocidadAire = 50;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2232      	movs	r2, #50	@ 0x32
 80019c4:	641a      	str	r2, [r3, #64]	@ 0x40
		}
	}
}
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200003d8 	.word	0x200003d8

080019d4 <_ZN6CEprom25DameDireccionInicioRampasEv>:
	NRampas=nrampas;
	HAL_I2C_Mem_Write(&hi2c1,DameDireccionAlta(DIRNRAMPAS),DIRNRAMPAS,I2C_MEMADD_SIZE_8BIT,(uint8_t*)&NRampas,2,HAL_MAX_DELAY);

}
int CEprom::DameDireccionInicioRampas()
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	return DIRECCION_INICIO_RAMPAS;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a1b      	ldr	r3, [r3, #32]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <_ZN6CEprom11GuardaBytesEttPh>:
bool CEprom::GuardaBytes(uint16_t direccion, uint16_t numBytes,uint8_t* bloque)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08c      	sub	sp, #48	@ 0x30
 80019f0:	af04      	add	r7, sp, #16
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	607b      	str	r3, [r7, #4]
 80019f6:	460b      	mov	r3, r1
 80019f8:	817b      	strh	r3, [r7, #10]
 80019fa:	4613      	mov	r3, r2
 80019fc:	813b      	strh	r3, [r7, #8]
	int dirtmp=direccion;
 80019fe:	897b      	ldrh	r3, [r7, #10]
 8001a00:	61fb      	str	r3, [r7, #28]
	for(int x=0;x<numBytes;x++)
 8001a02:	2300      	movs	r3, #0
 8001a04:	61bb      	str	r3, [r7, #24]
 8001a06:	e031      	b.n	8001a6c <_ZN6CEprom11GuardaBytesEttPh+0x80>
	{
		if(HAL_I2C_Mem_Write(&hi2c1,DameDireccionAlta(dirtmp),dirtmp,I2C_MEMADD_SIZE_8BIT,bloque,1,HAL_MAX_DELAY)!= HAL_OK)
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	f000 f876 	bl	8001b00 <_ZN6CEprom17DameDireccionAltaEt>
 8001a14:	4603      	mov	r3, r0
 8001a16:	4619      	mov	r1, r3
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a20:	9302      	str	r3, [sp, #8]
 8001a22:	2301      	movs	r3, #1
 8001a24:	9301      	str	r3, [sp, #4]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	4814      	ldr	r0, [pc, #80]	@ (8001a80 <_ZN6CEprom11GuardaBytesEttPh+0x94>)
 8001a2e:	f00c fb4d 	bl	800e0cc <HAL_I2C_Mem_Write>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	bf14      	ite	ne
 8001a38:	2301      	movne	r3, #1
 8001a3a:	2300      	moveq	r3, #0
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <_ZN6CEprom11GuardaBytesEttPh+0x5a>
		{
			return false;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e017      	b.n	8001a76 <_ZN6CEprom11GuardaBytesEttPh+0x8a>
		}
		for(int i=0;i<100000;i++);
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	e002      	b.n	8001a52 <_ZN6CEprom11GuardaBytesEttPh+0x66>
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	4a0b      	ldr	r2, [pc, #44]	@ (8001a84 <_ZN6CEprom11GuardaBytesEttPh+0x98>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	ddf8      	ble.n	8001a4c <_ZN6CEprom11GuardaBytesEttPh+0x60>
		bloque++;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	607b      	str	r3, [r7, #4]
		dirtmp++;
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	3301      	adds	r3, #1
 8001a64:	61fb      	str	r3, [r7, #28]
	for(int x=0;x<numBytes;x++)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	61bb      	str	r3, [r7, #24]
 8001a6c:	893b      	ldrh	r3, [r7, #8]
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	dbc9      	blt.n	8001a08 <_ZN6CEprom11GuardaBytesEttPh+0x1c>
	}
	return true;
 8001a74:	2301      	movs	r3, #1
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3720      	adds	r7, #32
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200003d8 	.word	0x200003d8
 8001a84:	0001869f 	.word	0x0001869f

08001a88 <_ZN6CEprom8LeeBytesEiiPh>:
bool CEprom::LeeBytes(int direccion, int numBytes,uint8_t* bloque)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af04      	add	r7, sp, #16
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
 8001a94:	603b      	str	r3, [r7, #0]
	if(HAL_I2C_Mem_Read(&hi2c1, DameDireccionAlta(direccion), direccion, I2C_MEMADD_SIZE_8BIT,  bloque, numBytes, HAL_MAX_DELAY) == HAL_OK)
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f000 f82f 	bl	8001b00 <_ZN6CEprom17DameDireccionAltaEt>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab2:	9102      	str	r1, [sp, #8]
 8001ab4:	9301      	str	r3, [sp, #4]
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	2301      	movs	r3, #1
 8001abc:	4601      	mov	r1, r0
 8001abe:	4809      	ldr	r0, [pc, #36]	@ (8001ae4 <_ZN6CEprom8LeeBytesEiiPh+0x5c>)
 8001ac0:	f00c fbfe 	bl	800e2c0 <HAL_I2C_Mem_Read>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	bf0c      	ite	eq
 8001aca:	2301      	moveq	r3, #1
 8001acc:	2300      	movne	r3, #0
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <_ZN6CEprom8LeeBytesEiiPh+0x50>
	{
			return true;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e000      	b.n	8001ada <_ZN6CEprom8LeeBytesEiiPh+0x52>
	}
	return false;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200003d8 	.word	0x200003d8

08001ae8 <_ZN6CEprom26DameCapacidadMaximaMemoriaEv>:
{
	return (direccion+nbytes)<TAM_MAXIMO_MEMORIA;
}

int CEprom::DameCapacidadMaximaMemoria()
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
	return TAM_MAXIMO_MEMORIA;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <_ZN6CEprom17DameDireccionAltaEt>:
uint8_t CEprom::DameDireccionAlta(uint16_t direccion)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	807b      	strh	r3, [r7, #2]
	uint8_t tmp=direccion>>7;
 8001b0c:	887b      	ldrh	r3, [r7, #2]
 8001b0e:	09db      	lsrs	r3, r3, #7
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	73fb      	strb	r3, [r7, #15]
	tmp=tmp|0xF0;
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	f063 030f 	orn	r3, r3, #15
 8001b1a:	73fb      	strb	r3, [r7, #15]
	tmp=tmp&0xAF;
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 8001b22:	73fb      	strb	r3, [r7, #15]
	return tmp;
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <_ZN8CEncoderC1Ev>:
 *      Author: W10
 */

#include "Encoder/CEncoder.hpp"

CEncoder::CEncoder()
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff fa8a 	bl	8001058 <_ZN22CManejadorEventosBotonC1Ev>
 8001b44:	4a0e      	ldr	r2, [pc, #56]	@ (8001b80 <_ZN8CEncoderC1Ev+0x4c>)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2214      	movs	r2, #20
 8001b72:	651a      	str	r2, [r3, #80]	@ 0x50
{
	// TODO Auto-generated constructor stub

}
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	08014640 	.word	0x08014640

08001b84 <_ZN8CEncoderD1Ev>:

CEncoder::~CEncoder()
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	4a05      	ldr	r2, [pc, #20]	@ (8001ba4 <_ZN8CEncoderD1Ev+0x20>)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fa6f 	bl	8001078 <_ZN22CManejadorEventosBotonD1Ev>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	08014640 	.word	0x08014640

08001ba8 <_ZN8CEncoderD0Ev>:
CEncoder::~CEncoder()
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
}
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff ffe7 	bl	8001b84 <_ZN8CEncoderD1Ev>
 8001bb6:	2154      	movs	r1, #84	@ 0x54
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f00f fc2d 	bl	8011418 <_ZdlPvj>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <_ZN8CEncoder10ConfigurarEP12GPIO_TypeDeftS1_tS1_ti>:

void CEncoder::Configurar(GPIO_TypeDef *clk_Port, uint16_t pinClk,GPIO_TypeDef *dt_Port, uint16_t pinDt, GPIO_TypeDef *boton_Port,uint16_t pinBoton, int id_Encoder)
{
 8001bc8:	b590      	push	{r4, r7, lr}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	603b      	str	r3, [r7, #0]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	80fb      	strh	r3, [r7, #6]
	Clk_Port = clk_Port;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	605a      	str	r2, [r3, #4]
	PinClk = pinClk;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	88fa      	ldrh	r2, [r7, #6]
 8001be2:	811a      	strh	r2, [r3, #8]

	Dt_Port = dt_Port;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	60da      	str	r2, [r3, #12]
	PinDt = pinDt;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	8c3a      	ldrh	r2, [r7, #32]
 8001bee:	821a      	strh	r2, [r3, #16]

	Boton_Port = boton_Port;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bf4:	615a      	str	r2, [r3, #20]
	PinBoton = pinBoton;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001bfa:	831a      	strh	r2, [r3, #24]

	ID_Encoder = id_Encoder;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c00:	625a      	str	r2, [r3, #36]	@ 0x24
	Boton = new CManejadorBoton();
 8001c02:	2020      	movs	r0, #32
 8001c04:	f00f fc0a 	bl	801141c <_Znwj>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	461c      	mov	r4, r3
 8001c0c:	4620      	mov	r0, r4
 8001c0e:	f7ff f94b 	bl	8000ea8 <_ZN15CManejadorBotonC1Ev>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	61dc      	str	r4, [r3, #28]
	Boton->AsignaManejadorEventos(this);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	4611      	mov	r1, r2
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff f9cc 	bl	8000fbc <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	Boton->Configurar(Boton_Port, PinBoton, ID_BOTON);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	69d8      	ldr	r0, [r3, #28]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6959      	ldr	r1, [r3, #20]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	8b1a      	ldrh	r2, [r3, #24]
 8001c30:	2303      	movs	r3, #3
 8001c32:	f7ff f979 	bl	8000f28 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	CLK_statusAnterior = LeeClk();
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f000 f807 	bl	8001c4a <_ZN8CEncoder6LeeClkEv>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	641a      	str	r2, [r3, #64]	@ 0x40

}
 8001c42:	bf00      	nop
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd90      	pop	{r4, r7, pc}

08001c4a <_ZN8CEncoder6LeeClkEv>:

int CEncoder::LeeClk()
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(Clk_Port, PinClk);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	891b      	ldrh	r3, [r3, #8]
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4610      	mov	r0, r2
 8001c5e:	f00c f8a7 	bl	800ddb0 <HAL_GPIO_ReadPin>
 8001c62:	4603      	mov	r3, r0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <_ZN8CEncoder5LeeDtEv>:
int CEncoder::LeeDt()
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(Dt_Port, PinDt);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68da      	ldr	r2, [r3, #12]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	8a1b      	ldrh	r3, [r3, #16]
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4610      	mov	r0, r2
 8001c80:	f00c f896 	bl	800ddb0 <HAL_GPIO_ReadPin>
 8001c84:	4603      	mov	r3, r0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <_ZN8CEncoder4InitEv>:

void CEncoder::Init()
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b088      	sub	sp, #32
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 8001c96:	f107 030c 	add.w	r3, r7, #12
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
 8001ca2:	60da      	str	r2, [r3, #12]
 8001ca4:	611a      	str	r2, [r3, #16]
	{ 0 };
	// CKL
	GPIO_InitStruct.Pin = PinClk;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	891b      	ldrh	r3, [r3, #8]
 8001caa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode =GPIO_MODE_IT_RISING_FALLING;
 8001cac:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001cb0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(Clk_Port, &GPIO_InitStruct);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f107 020c 	add.w	r2, r7, #12
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f00b fef1 	bl	800daa8 <HAL_GPIO_Init>
	//DT
	GPIO_InitStruct.Pin = PinDt;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	8a1b      	ldrh	r3, [r3, #16]
 8001cca:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(Dt_Port, &GPIO_InitStruct);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	f107 020c 	add.w	r2, r7, #12
 8001cdc:	4611      	mov	r1, r2
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f00b fee2 	bl	800daa8 <HAL_GPIO_Init>
	//Boton
	GPIO_InitStruct.Pin = PinBoton;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	8b1b      	ldrh	r3, [r3, #24]
 8001ce8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cea:	2300      	movs	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(Boton_Port, &GPIO_InitStruct);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	f107 020c 	add.w	r2, r7, #12
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f00b fed3 	bl	800daa8 <HAL_GPIO_Init>
}
 8001d02:	bf00      	nop
 8001d04:	3720      	adds	r7, #32
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <_ZN8CEncoder22AsignaManejadorEventosEP24CManejadorEventosEncoder>:

void CEncoder::AsignaManejadorEventos(CManejadorEventosEncoder *manejador)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	6039      	str	r1, [r7, #0]
	Manejador = manejador;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	621a      	str	r2, [r3, #32]
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <_ZN8CEncoder17OnBotonClickEventEi>:
void CEncoder::OnBotonClickEvent(int idBoton)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	6039      	str	r1, [r7, #0]

	switch (idBoton)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	d10b      	bne.n	8001d4e <_ZN8CEncoder17OnBotonClickEventEi+0x28>
	{
	case ID_BOTON:
		Manejador->OnBotonEncoderClickEvent(ID_Encoder);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a18      	ldr	r0, [r3, #32]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	3310      	adds	r3, #16
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d48:	4611      	mov	r1, r2
 8001d4a:	4798      	blx	r3
		break;
 8001d4c:	bf00      	nop
	}
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <_ZN8CEncoder7ProcesaEi>:

void CEncoder::Procesa(int gpio_pin)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b082      	sub	sp, #8
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
 8001d5e:	6039      	str	r1, [r7, #0]
	Boton->Procesa(gpio_pin);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69db      	ldr	r3, [r3, #28]
 8001d64:	6839      	ldr	r1, [r7, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff f936 	bl	8000fd8 <_ZN15CManejadorBoton7ProcesaEi>
	leeEncoder(gpio_pin);
 8001d6c:	6839      	ldr	r1, [r7, #0]
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f804 	bl	8001d7c <_ZN8CEncoder10leeEncoderEi>
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <_ZN8CEncoder10leeEncoderEi>:

void CEncoder::leeEncoder(int gpio_pin)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
	if(PinClk!=gpio_pin)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	891b      	ldrh	r3, [r3, #8]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d132      	bne.n	8001df8 <_ZN8CEncoder10leeEncoderEi+0x7c>
	{
		ReboteMilis = HAL_GetTick();  //leo el tiempo actual
	}
	while((tiempo - ReboteMilis) < TiempoReboteEncoder);
	*/
	for(int i=8000;i>0;i--);
 8001d92:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	e002      	b.n	8001da0 <_ZN8CEncoder10leeEncoderEi+0x24>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	dcf9      	bgt.n	8001d9a <_ZN8CEncoder10leeEncoderEi+0x1e>
	CLK_status = LeeClk();
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff ff4f 	bl	8001c4a <_ZN8CEncoder6LeeClkEv>
 8001dac:	4602      	mov	r2, r0
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	629a      	str	r2, [r3, #40]	@ 0x28
	if (CLK_status != CLK_statusAnterior && CLK_status == 1)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d017      	beq.n	8001dee <_ZN8CEncoder10leeEncoderEi+0x72>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d113      	bne.n	8001dee <_ZN8CEncoder10leeEncoderEi+0x72>
	{
		if (LeeDt() != CLK_status)
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff ff50 	bl	8001c6c <_ZN8CEncoder5LeeDtEv>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	bf14      	ite	ne
 8001dd6:	2301      	movne	r3, #1
 8001dd8:	2300      	moveq	r3, #0
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d003      	beq.n	8001de8 <_ZN8CEncoder10leeEncoderEi+0x6c>
		{
			incrementa();
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 f80d 	bl	8001e00 <_ZN8CEncoder10incrementaEv>
 8001de6:	e002      	b.n	8001dee <_ZN8CEncoder10leeEncoderEi+0x72>
		}
		else
		{
			decrementa();
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 f81c 	bl	8001e26 <_ZN8CEncoder10decrementaEv>
		}
	}
	CLK_statusAnterior = CLK_status;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	641a      	str	r2, [r3, #64]	@ 0x40
 8001df6:	e000      	b.n	8001dfa <_ZN8CEncoder10leeEncoderEi+0x7e>
		return;
 8001df8:	bf00      	nop
}
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <_ZN8CEncoder10incrementaEv>:

void CEncoder::incrementa()
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
	Manejador->OnIncrementoEncoder(ID_Encoder);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a18      	ldr	r0, [r3, #32]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	3308      	adds	r3, #8
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4798      	blx	r3
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <_ZN8CEncoder10decrementaEv>:

void CEncoder::decrementa()
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
	Manejador->OnDecrementoEncoder(ID_Encoder);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a18      	ldr	r0, [r3, #32]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	330c      	adds	r3, #12
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e40:	4611      	mov	r1, r2
 8001e42:	4798      	blx	r3
}
 8001e44:	bf00      	nop
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <_ZN24CManejadorEventosEncoderC1Ev>:
 *      Author: W10
 */

#include <Encoder/CManejadorEventosEncoder.hpp>

CManejadorEventosEncoder::CManejadorEventosEncoder()
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	4a04      	ldr	r2, [pc, #16]	@ (8001e68 <_ZN24CManejadorEventosEncoderC1Ev+0x1c>)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	08014658 	.word	0x08014658

08001e6c <_ZN24CManejadorEventosEncoderD1Ev>:

CManejadorEventosEncoder::~CManejadorEventosEncoder()
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	4a04      	ldr	r2, [pc, #16]	@ (8001e88 <_ZN24CManejadorEventosEncoderD1Ev+0x1c>)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	08014658 	.word	0x08014658

08001e8c <_ZN24CManejadorEventosEncoderD0Ev>:
CManejadorEventosEncoder::~CManejadorEventosEncoder()
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
}
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f7ff ffe9 	bl	8001e6c <_ZN24CManejadorEventosEncoderD1Ev>
 8001e9a:	2104      	movs	r1, #4
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f00f fabb 	bl	8011418 <_ZdlPvj>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <_ZN24CManejadorEventosEncoder19OnIncrementoEncoderEi>:

void CManejadorEventosEncoder::OnIncrementoEncoder(int id_Encoder)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]

}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <_ZN24CManejadorEventosEncoder19OnDecrementoEncoderEi>:
void CManejadorEventosEncoder::OnDecrementoEncoder(int id_Encoder)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	6039      	str	r1, [r7, #0]

}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <_ZN24CManejadorEventosEncoder24OnBotonEncoderClickEventEi>:
void CManejadorEventosEncoder::OnBotonEncoderClickEvent(int id_Encoder)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]

}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
	...

08001ef0 <_ZN13CEstacionBaseC1Ev>:
 *      Author: W10
 */

#include <Estaciones/CEstacionBase.hpp>

CEstacionBase::CEstacionBase()
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	4a06      	ldr	r2, [pc, #24]	@ (8001f14 <_ZN13CEstacionBaseC1Ev+0x24>)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	605a      	str	r2, [r3, #4]
{
	// TODO Auto-generated constructor stub

}
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4618      	mov	r0, r3
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	08014674 	.word	0x08014674

08001f18 <_ZN13CEstacionBaseD1Ev>:

CEstacionBase::~CEstacionBase()
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	4a04      	ldr	r2, [pc, #16]	@ (8001f34 <_ZN13CEstacionBaseD1Ev+0x1c>)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	08014674 	.word	0x08014674

08001f38 <_ZN13CEstacionBaseD0Ev>:
CEstacionBase::~CEstacionBase()
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
}
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff ffe9 	bl	8001f18 <_ZN13CEstacionBaseD1Ev>
 8001f46:	2108      	movs	r1, #8
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f00f fa65 	bl	8011418 <_ZdlPvj>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <_ZN13CEstacionBase19GetTemperaturaRealxEv>:

float CEstacionBase::GetTemperaturaRealx() //regresa la tenperatura actual de la estacion
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
	return 0;
 8001f60:	f04f 0300 	mov.w	r3, #0
 8001f64:	ee07 3a90 	vmov	s15, r3
}
 8001f68:	eeb0 0a67 	vmov.f32	s0, s15
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <_ZN13CEstacionBase14SetTemperaturaEi>:
void CEstacionBase::SetTemperatura(int temperatura) //establece la temperatura que se quiere alcanzar
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	6039      	str	r1, [r7, #0]

}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <_ZN13CEstacionBase14GetTemperaturaEv>:
int CEstacionBase::GetTemperatura() // regresa la temperatura seteada
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
	return 0;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <_ZN13CEstacionBase12SetNivelAireEi>:
void CEstacionBase::SetNivelAire(int nivel) //establece el nivel de aire
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
 8001faa:	6039      	str	r1, [r7, #0]

}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <_ZN13CEstacionBase12GetNivelAireEv>:
int CEstacionBase::GetNivelAire() //regresa el nivel de aire setado
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
	return 0;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <_ZN13CEstacionBase9GetEstadoEv>:
int CEstacionBase::GetEstado() //regresa 1 si esta activo y 0 si esta en reposo
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
	return 0;
 8001fd6:	2300      	movs	r3, #0

}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <_ZN13CEstacionBase21IncrementaTemperaturaEv>:
//para que la misma estacion incremente la temperatura
void CEstacionBase::IncrementaTemperatura()
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]

}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <_ZN13CEstacionBase21DecrementaTemperaturaEv>:
//para que la misma estacion decremente la temeperatura
void CEstacionBase::DecrementaTemperatura()
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]

}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <_ZN13CEstacionBase21SetManejadorControlesEP26CManejadorEventosControles>:
// asigna el evento que sellamara cuando cambie la temperatura que el usuario especifica
void CEstacionBase::SetManejadorControles(CManejadorEventosControles *obj)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
	ManejadorControles = obj;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	605a      	str	r2, [r3, #4]
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <_ZN13CEstacionBase7ProcesaEv>:
//funcion que se debera llamar para controlar la estacion de calor
void CEstacionBase::Procesa()
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]

}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <_ZN13CEstacionBase14NivelAireEventEi>:
void CEstacionBase::NivelAireEvent(int aire)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00a      	beq.n	8002064 <_ZN13CEstacionBase14NivelAireEventEi+0x28>
		return;
	ManejadorControles->OnNivelAireEvent(aire);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	330c      	adds	r3, #12
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6839      	ldr	r1, [r7, #0]
 800205e:	4610      	mov	r0, r2
 8002060:	4798      	blx	r3
 8002062:	e000      	b.n	8002066 <_ZN13CEstacionBase14NivelAireEventEi+0x2a>
		return;
 8002064:	bf00      	nop
}
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <_ZN13CEstacionBase20TemperaturaRealEventEi>:
void CEstacionBase::TemperaturaRealEvent(int temperatura)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00a      	beq.n	8002094 <_ZN13CEstacionBase20TemperaturaRealEventEi+0x28>
		return;
	ManejadorControles->OnTemperaturaRealEvent(temperatura);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	3308      	adds	r3, #8
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6839      	ldr	r1, [r7, #0]
 800208e:	4610      	mov	r0, r2
 8002090:	4798      	blx	r3
 8002092:	e000      	b.n	8002096 <_ZN13CEstacionBase20TemperaturaRealEventEi+0x2a>
		return;
 8002094:	bf00      	nop

}
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <_ZN13CEstacionBase17ActivarCalefactorEv>:
void CEstacionBase::ActivarCalefactor()
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]

}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <_ZN13CEstacionBase20DesactivarCalefactorEv>:
void CEstacionBase::DesactivarCalefactor()
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]

}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <_ZN13CEstacionBase10CruceXCeroEi>:
void CEstacionBase::CruceXCero(int gpio_pin)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]

}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <_ZN13CEstacionBase9TimerTickEv>:
void CEstacionBase::TimerTick()
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]

}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <_ZN13CEstacionBase6GetPIDEv>:
int CEstacionBase::GetPID()
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
	return 0;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <_ZN13CEstacionBase6SetPIDEi>:
void CEstacionBase::SetPID(int valor)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]

}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <_ZN13CEstacionBase17GPIO_INTERRUPCIONEi>:
void CEstacionBase::GPIO_INTERRUPCION(int GPIO_Pin)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	6039      	str	r1, [r7, #0]

}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <_ZN13CEstacionBase23QuitaManejadorControlesEv>:
void CEstacionBase::QuitaManejadorControles()
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
	ManejadorControles = NULL;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	605a      	str	r2, [r3, #4]
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <_ZN16CestacionBaku601D1Ev>:
#include "Constantes.hpp"
#include "Uart/Uart.hpp"
#include "SensorTemperatura/Max6675/MAX6675.hpp"
#include <SensorTemperatura/SensorAnalogico.hpp>

CestacionBaku601::~CestacionBaku601()
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	4a11      	ldr	r2, [pc, #68]	@ (800219c <_ZN16CestacionBaku601D1Ev+0x50>)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	4a11      	ldr	r2, [pc, #68]	@ (80021a0 <_ZN16CestacionBaku601D1Ev+0x54>)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	609a      	str	r2, [r3, #8]
{
	// TODO Auto-generated destructor stub
}
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	33cc      	adds	r3, #204	@ 0xcc
 8002164:	4618      	mov	r0, r3
 8002166:	f009 fa8b 	bl	800b680 <_ZN15SensorMagneticoD1Ev>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	33bc      	adds	r3, #188	@ 0xbc
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe ffc2 	bl	80010f8 <_ZN10CalefactorD1Ev>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3370      	adds	r3, #112	@ 0x70
 8002178:	4618      	mov	r0, r3
 800217a:	f007 fff1 	bl	800a160 <_ZN3PwmD1Ev>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3308      	adds	r3, #8
 8002182:	4618      	mov	r0, r3
 8002184:	f009 fa34 	bl	800b5f0 <_ZN31CManejadorEventoSensorMagneticoD1Ev>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff fec4 	bl	8001f18 <_ZN13CEstacionBaseD1Ev>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	080146d4 	.word	0x080146d4
 80021a0:	08014738 	.word	0x08014738

080021a4 <_ZThn8_N16CestacionBaku601D1Ev>:
	int NivelAire=0;
	float TemperaturaRealActual;
	int conteolecturatemperatura=0;
public:
	CestacionBaku601();
	virtual ~CestacionBaku601();
 80021a4:	f1a0 0008 	sub.w	r0, r0, #8
 80021a8:	f7ff bfd0 	b.w	800214c <_ZN16CestacionBaku601D1Ev>

080021ac <_ZN16CestacionBaku601D0Ev>:
CestacionBaku601::~CestacionBaku601()
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
}
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff ffc9 	bl	800214c <_ZN16CestacionBaku601D1Ev>
 80021ba:	21f8      	movs	r1, #248	@ 0xf8
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f00f f92b 	bl	8011418 <_ZdlPvj>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4618      	mov	r0, r3
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <_ZThn8_N16CestacionBaku601D0Ev>:
 80021cc:	f1a0 0008 	sub.w	r0, r0, #8
 80021d0:	f7ff bfec 	b.w	80021ac <_ZN16CestacionBaku601D0Ev>

080021d4 <_ZN16CestacionBaku60132IniciaSensorTemperaturaAnalogicoEv>:
	max6675->SetConfigCsPin(GPIOA, GPIO_PIN_2);
	max6675->SetConfigDatPin(GPIOA, GPIO_PIN_0);
	thermocouple = max6675;
}
void CestacionBaku601::IniciaSensorTemperaturaAnalogico()
{
 80021d4:	b590      	push	{r4, r7, lr}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
	SensorAnalogico *sensorTemeratura = new SensorAnalogico();
 80021dc:	2054      	movs	r0, #84	@ 0x54
 80021de:	f00f f91d 	bl	801141c <_Znwj>
 80021e2:	4603      	mov	r3, r0
 80021e4:	461c      	mov	r4, r3
 80021e6:	4620      	mov	r0, r4
 80021e8:	f009 fb02 	bl	800b7f0 <_ZN15SensorAnalogicoC1Ev>
 80021ec:	60fc      	str	r4, [r7, #12]
	thermocouple = sensorTemeratura;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 80021f4:	bf00      	nop
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd90      	pop	{r4, r7, pc}

080021fc <_ZN16CestacionBaku601C1Ev>:
CestacionBaku601::CestacionBaku601() :
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
		CEstacionBase()
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff fe72 	bl	8001ef0 <_ZN13CEstacionBaseC1Ev>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3308      	adds	r3, #8
 8002210:	4618      	mov	r0, r3
 8002212:	f009 f9dd 	bl	800b5d0 <_ZN31CManejadorEventoSensorMagneticoC1Ev>
 8002216:	4a50      	ldr	r2, [pc, #320]	@ (8002358 <_ZN16CestacionBaku601C1Ev+0x15c>)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	4a4f      	ldr	r2, [pc, #316]	@ (800235c <_ZN16CestacionBaku601C1Ev+0x160>)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	609a      	str	r2, [r3, #8]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002228:	60da      	str	r2, [r3, #12]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2264      	movs	r2, #100	@ 0x64
 800222e:	611a      	str	r2, [r3, #16]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	615a      	str	r2, [r3, #20]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	619a      	str	r2, [r3, #24]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	61da      	str	r2, [r3, #28]
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	f04f 0200 	mov.w	r2, #0
 8002248:	f04f 0300 	mov.w	r3, #0
 800224c:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2205      	movs	r2, #5
 8002254:	629a      	str	r2, [r3, #40]	@ 0x28
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002262:	631a      	str	r2, [r3, #48]	@ 0x30
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	635a      	str	r2, [r3, #52]	@ 0x34
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	641a      	str	r2, [r3, #64]	@ 0x40
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f04f 0200 	mov.w	r2, #0
 800227e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a37      	ldr	r2, [pc, #220]	@ (8002360 <_ZN16CestacionBaku601C1Ev+0x164>)
 8002284:	649a      	str	r2, [r3, #72]	@ 0x48
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a36      	ldr	r2, [pc, #216]	@ (8002364 <_ZN16CestacionBaku601C1Ev+0x168>)
 800228a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	651a      	str	r2, [r3, #80]	@ 0x50
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	655a      	str	r2, [r3, #84]	@ 0x54
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2208      	movs	r2, #8
 800229c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	220b      	movs	r2, #11
 80022a2:	661a      	str	r2, [r3, #96]	@ 0x60
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	220c      	movs	r2, #12
 80022a8:	665a      	str	r2, [r3, #100]	@ 0x64
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	669a      	str	r2, [r3, #104]	@ 0x68
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3370      	adds	r3, #112	@ 0x70
 80022b4:	4618      	mov	r0, r3
 80022b6:	f007 ff43 	bl	800a140 <_ZN3PwmC1Ev>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	33bc      	adds	r3, #188	@ 0xbc
 80022be:	4618      	mov	r0, r3
 80022c0:	f7fe ff06 	bl	80010d0 <_ZN10CalefactorC1Ev>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	33cc      	adds	r3, #204	@ 0xcc
 80022c8:	4618      	mov	r0, r3
 80022ca:	f009 f9bd 	bl	800b648 <_ZN15SensorMagneticoC1Ev>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
{
	pwm.Init(TIM2, TIM_CHANNEL_1, 65535);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80022e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80022e8:	2200      	movs	r2, #0
 80022ea:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80022ee:	f007 ff57 	bl	800a1a0 <_ZN3Pwm4InitEP11TIM_TypeDefii>

	//inicializa la termocupla
	//IniciaMax6675();
	IniciaSensorTemperaturaAnalogico();
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7ff ff6e 	bl	80021d4 <_ZN16CestacionBaku60132IniciaSensorTemperaturaAnalogicoEv>
	thermocouple->Init();
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	3308      	adds	r3, #8
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4610      	mov	r0, r2
 8002308:	4798      	blx	r3

	calefactor.Configurar(GPIOB, GPIO_PIN_3);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	33bc      	adds	r3, #188	@ 0xbc
 800230e:	2208      	movs	r2, #8
 8002310:	4915      	ldr	r1, [pc, #84]	@ (8002368 <_ZN16CestacionBaku601C1Ev+0x16c>)
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe ff10 	bl	8001138 <_ZN10Calefactor10ConfigurarEP12GPIO_TypeDeft>
	calefactor.Init();
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	33bc      	adds	r3, #188	@ 0xbc
 800231c:	4618      	mov	r0, r3
 800231e:	f7fe ff1e 	bl	800115e <_ZN10Calefactor4InitEv>
	sensorMagnetico.Configurar(GPIOB, GPIO_PIN_5);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	33cc      	adds	r3, #204	@ 0xcc
 8002326:	2220      	movs	r2, #32
 8002328:	490f      	ldr	r1, [pc, #60]	@ (8002368 <_ZN16CestacionBaku601C1Ev+0x16c>)
 800232a:	4618      	mov	r0, r3
 800232c:	f009 f9c8 	bl	800b6c0 <_ZN15SensorMagnetico10ConfigurarEP12GPIO_TypeDeft>
	sensorMagnetico.Init();
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	33cc      	adds	r3, #204	@ 0xcc
 8002334:	4618      	mov	r0, r3
 8002336:	f009 f9d6 	bl	800b6e6 <_ZN15SensorMagnetico4InitEv>
	sensorMagnetico.AsignaManejadorEventos(this);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3308      	adds	r3, #8
 8002344:	4619      	mov	r1, r3
 8002346:	4610      	mov	r0, r2
 8002348:	f009 f9ec 	bl	800b724 <_ZN15SensorMagnetico22AsignaManejadorEventosEP31CManejadorEventoSensorMagnetico>

}
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	080146d4 	.word	0x080146d4
 800235c:	08014738 	.word	0x08014738
 8002360:	40a00000 	.word	0x40a00000
 8002364:	44160000 	.word	0x44160000
 8002368:	40020400 	.word	0x40020400

0800236c <_ZN16CestacionBaku60119GetTemperaturaRealxEv>:

//regresa la tenperatura actual de la estacion
float CestacionBaku601::GetTemperaturaRealx()
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
	//return //TemperaturaRealActual;//
	return thermocouple->LeeTemepatura(); //* .59;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	330c      	adds	r3, #12
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4610      	mov	r0, r2
 8002384:	4798      	blx	r3
 8002386:	ee07 0a90 	vmov	s15, r0
 800238a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800238e:	eeb0 0a67 	vmov.f32	s0, s15
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <_ZN16CestacionBaku60114SetTemperaturaEi>:

//establece la temperatura que se quiere alcanzar
void CestacionBaku601::SetTemperatura(int temperatura)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
	TemperaturaEspecificada = temperatura;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	611a      	str	r2, [r3, #16]
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <_ZN16CestacionBaku60114GetTemperaturaEv>:

// regresa la temperatura seteada
int CestacionBaku601::GetTemperatura()
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
	return TemperaturaEspecificada;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691b      	ldr	r3, [r3, #16]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <_ZN16CestacionBaku60112SetNivelAireEi>:

//establece el nivel de aire
void CestacionBaku601::SetNivelAire(int nivel)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
	NivelAire = nivel;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
	//pwm.SicloTrabajo(nivel);
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <_ZN16CestacionBaku60112GetNivelAireEv>:
int CestacionBaku601::GetNivelAire()
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
	return NivelAire;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <_ZN16CestacionBaku6019GetEstadoEv>:

//regresa 1 si esta activo y 0 si esta en reposo
int CestacionBaku601::GetEstado()
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
	return sensorMagnetico.Leer();
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	33cc      	adds	r3, #204	@ 0xcc
 8002410:	4618      	mov	r0, r3
 8002412:	f009 f995 	bl	800b740 <_ZN15SensorMagnetico4LeerEv>
 8002416:	4603      	mov	r3, r0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <_ZN16CestacionBaku60121IncrementaTemperaturaEv>:

void CestacionBaku601::IncrementaTemperatura()
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
	if (TemperaturaEspecificada < TemperaturaMaxima)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691a      	ldr	r2, [r3, #16]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	429a      	cmp	r2, r3
 8002432:	da04      	bge.n	800243e <_ZN16CestacionBaku60121IncrementaTemperaturaEv+0x1e>
	{
		TemperaturaEspecificada++;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	611a      	str	r2, [r3, #16]
	}
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <_ZN16CestacionBaku60121DecrementaTemperaturaEv>:

void CestacionBaku601::DecrementaTemperatura()
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
	if (TemperaturaEspecificada > 0)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	2b00      	cmp	r3, #0
 8002458:	dd04      	ble.n	8002464 <_ZN16CestacionBaku60121DecrementaTemperaturaEv+0x1a>
	{
		TemperaturaEspecificada--;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	1e5a      	subs	r2, r3, #1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	611a      	str	r2, [r3, #16]
	}
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <_ZN16CestacionBaku60117ActivarCalefactorEv>:

void CestacionBaku601::ActivarCalefactor()
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
	EstadoCalefator = ENCENDIDO;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <_ZN16CestacionBaku60120DesactivarCalefactorEv>:

void CestacionBaku601::DesactivarCalefactor()
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
	EstadoCalefator = APAGADO;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <_ZN16CestacionBaku60123OnSensorMagneticoChangeEi>:

void CestacionBaku601::OnSensorMagneticoChange(int estado)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]

}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <_ZThn8_N16CestacionBaku60123OnSensorMagneticoChangeEi>:
	void ProcesaTemperaturaReal();
	//eventros del encoder
	virtual void IncrementaTemperatura();
	virtual void DecrementaTemperatura();
	void ProcesaCalefactor();
	virtual void OnSensorMagneticoChange(int estado);
 80024ba:	f1a0 0008 	sub.w	r0, r0, #8
 80024be:	f7ff bff1 	b.w	80024a4 <_ZN16CestacionBaku60123OnSensorMagneticoChangeEi>

080024c2 <_ZN16CestacionBaku6017ProcesaEv>:

void CestacionBaku601::Procesa()
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
	ProcesaTemperatura();
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f80a 	bl	80024e4 <_ZN16CestacionBaku60118ProcesaTemperaturaEv>
//	ProcesaTemperaturaReal();
	procesaAire();
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 f81e 	bl	8002512 <_ZN16CestacionBaku60111procesaAireEv>
	ProcesaCalefactor();
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f83b 	bl	8002552 <_ZN16CestacionBaku60117ProcesaCalefactorEv>
}
 80024dc:	bf00      	nop
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <_ZN16CestacionBaku60118ProcesaTemperaturaEv>:

//verifica el nivel de temperatura seleccinada por el usuario
void CestacionBaku601::ProcesaTemperatura()
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
	//leo la temperatura
	int temp = GetTemperatura();
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	3310      	adds	r3, #16
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	4798      	blx	r3
 80024f8:	60f8      	str	r0, [r7, #12]
	//veo si cambio
	if (temperaturaAnterior != temp)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	429a      	cmp	r2, r3
 8002502:	d002      	beq.n	800250a <_ZN16CestacionBaku60118ProcesaTemperaturaEv+0x26>
	{
		temperaturaAnterior = temp;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	615a      	str	r2, [r3, #20]
	}
}
 800250a:	bf00      	nop
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <_ZN16CestacionBaku60111procesaAireEv>:
	 */
}

//verifica elnivel de aire
void CestacionBaku601::procesaAire()
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b084      	sub	sp, #16
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
	int aire = GetNivelAire();
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	3318      	adds	r3, #24
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	4798      	blx	r3
 8002526:	60f8      	str	r0, [r7, #12]
	if (AireAnterior != aire)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	429a      	cmp	r2, r3
 8002530:	d00b      	beq.n	800254a <_ZN16CestacionBaku60111procesaAireEv+0x38>
	{
		AireAnterior = aire;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	61da      	str	r2, [r3, #28]
		NivelAireEvent(AireAnterior);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	334c      	adds	r3, #76	@ 0x4c
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	69d2      	ldr	r2, [r2, #28]
 8002546:	4611      	mov	r1, r2
 8002548:	4798      	blx	r3
	}
}
 800254a:	bf00      	nop
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <_ZN16CestacionBaku60117ProcesaCalefactorEv>:

void CestacionBaku601::ProcesaCalefactor()
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b084      	sub	sp, #16
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
	if (EstadoCalefator == APAGADO)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800255e:	2b00      	cmp	r3, #0
 8002560:	d108      	bne.n	8002574 <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x22>
	{
		//esta apagado el calefactor
		PotenciaCalefactor = 0;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	629a      	str	r2, [r3, #40]	@ 0x28
		calefactor.Apagar();
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	33bc      	adds	r3, #188	@ 0xbc
 800256c:	4618      	mov	r0, r3
 800256e:	f7fe fe2d 	bl	80011cc <_ZN10Calefactor6ApagarEv>
		return;
 8002572:	e093      	b.n	800269c <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x14a>
	}
	EstadoSensorMagnetico = sensorMagnetico.Leer();
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	33cc      	adds	r3, #204	@ 0xcc
 8002578:	4618      	mov	r0, r3
 800257a:	f009 f8e1 	bl	800b740 <_ZN15SensorMagnetico4LeerEv>
 800257e:	4602      	mov	r2, r0
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	659a      	str	r2, [r3, #88]	@ 0x58
	if (EstadoSensorMagnetico == BOTON_PRESIONADO)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002588:	2b00      	cmp	r3, #0
 800258a:	d103      	bne.n	8002594 <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x42>
	{
		//el usuario coloco la pistola en su base por lo que hay que enfriarla
		EnfriaYApagaPistola();
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 f88b 	bl	80026a8 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv>
		return;
 8002592:	e083      	b.n	800269c <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x14a>
	}
	TiempoEnfriando = 0;
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	f04f 0300 	mov.w	r3, #0
 800259e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	//enciendo el aire
	int aire = GetNivelAire();
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	3318      	adds	r3, #24
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	4798      	blx	r3
 80025ae:	60f8      	str	r0, [r7, #12]
	pwm.SicloTrabajo(aire);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3370      	adds	r3, #112	@ 0x70
 80025b4:	68f9      	ldr	r1, [r7, #12]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f007 fe98 	bl	800a2ec <_ZN3Pwm12SicloTrabajoEi>
	//aqui se hace al calculo del PID
	//veo si ya paso el tiempo para hacer el muestreo
	TiempoActual = HAL_GetTick(); //me trae el tiempo en milisegundos
 80025bc:	f00a fdfe 	bl	800d1bc <HAL_GetTick>
 80025c0:	4603      	mov	r3, r0
 80025c2:	461a      	mov	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	635a      	str	r2, [r3, #52]	@ 0x34
	if (TiempoActual < TiempoProximoMuestreo)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d0:	429a      	cmp	r2, r3
 80025d2:	db62      	blt.n	800269a <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x148>
	{
		//a un no ha paso el tiempo para
		return;
	}
	//calculo el siguiente tiempo de muestreo
	TiempoProximoMuestreo = TiempoActual + TiempoMuestreoTemperatura;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025dc:	441a      	add	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	639a      	str	r2, [r3, #56]	@ 0x38
	TemperaturaRealActual = GetTemperaturaRealx(); //thermocouple.MAX6675_lee();
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	3308      	adds	r3, #8
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	4798      	blx	r3
 80025ee:	eef0 7a40 	vmov.f32	s15, s0
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	edc3 7a3b 	vstr	s15, [r3, #236]	@ 0xec
	int temperatura = TemperaturaRealActual; //GetTemperaturaReal();
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	edd3 7a3b 	vldr	s15, [r3, #236]	@ 0xec
 80025fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002602:	ee17 3a90 	vmov	r3, s15
 8002606:	60bb      	str	r3, [r7, #8]
	PID_error = TemperaturaEspecificada - temperatura;                       //Calculo del error
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691a      	ldr	r2, [r3, #16]
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	ee07 3a90 	vmov	s15, r3
 8002614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	Error_INT = Error_INT + PID_error * (1000 / TiempoMuestreoTemperatura);  //Calculo de la integral del error
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002632:	fb92 f3f3 	sdiv	r3, r2, r3
 8002636:	ee07 3a90 	vmov	s15, r3
 800263a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800263e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002642:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	PID_value = Kc * (PID_error + (1 / Tao_I) * Error_INT) / 10;   //Calculo de la salida del controlador PI
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800265e:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8002662:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800266c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002670:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002674:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002678:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800267c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	//asigno la potencia del calefactor
	PotenciaCalefactor = PID_value;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800268c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002690:	ee17 2a90 	vmov	r2, s15
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	629a      	str	r2, [r3, #40]	@ 0x28
 8002698:	e000      	b.n	800269c <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x14a>
		return;
 800269a:	bf00      	nop
}
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	0000      	movs	r0, r0
 80026a4:	0000      	movs	r0, r0
	...

080026a8 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv>:

void CestacionBaku601::EnfriaYApagaPistola()
{
 80026a8:	b590      	push	{r4, r7, lr}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
	//calefactor.Apagar();
	PotenciaCalefactor = 0; //bajo toda la potencia
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	629a      	str	r2, [r3, #40]	@ 0x28
	float temperatura = GetTemperaturaRealx();
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	3308      	adds	r3, #8
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	4798      	blx	r3
 80026c2:	ed87 0a03 	vstr	s0, [r7, #12]
	if (temperatura <= TEMPERATURA_APAGADO)
 80026c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80026ca:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80026ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d6:	d83c      	bhi.n	8002752 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xaa>
	{
		if (TiempoEnfriando == 0)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	f7fe f9f7 	bl	8000ad8 <__aeabi_dcmpeq>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00b      	beq.n	8002708 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0x60>
		{
			TiempoEnfriando = HAL_GetTick();
 80026f0:	f00a fd64 	bl	800d1bc <HAL_GetTick>
 80026f4:	4603      	mov	r3, r0
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fd ff0c 	bl	8000514 <__aeabi_ui2d>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	e9c1 2308 	strd	r2, r3, [r1, #32]
			return;
 8002706:	e035      	b.n	8002774 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xcc>
		}
		if (HAL_GetTick() - TiempoEnfriando <= 10000)
 8002708:	f00a fd58 	bl	800d1bc <HAL_GetTick>
 800270c:	4603      	mov	r3, r0
 800270e:	4618      	mov	r0, r3
 8002710:	f7fd ff00 	bl	8000514 <__aeabi_ui2d>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800271a:	f7fd fdbd 	bl	8000298 <__aeabi_dsub>
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	4610      	mov	r0, r2
 8002724:	4619      	mov	r1, r3
 8002726:	2301      	movs	r3, #1
 8002728:	461c      	mov	r4, r3
 800272a:	a315      	add	r3, pc, #84	@ (adr r3, 8002780 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xd8>)
 800272c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002730:	f7fe f9e6 	bl	8000b00 <__aeabi_dcmple>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0x96>
 800273a:	2300      	movs	r3, #0
 800273c:	461c      	mov	r4, r3
 800273e:	b2e3      	uxtb	r3, r4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d116      	bne.n	8002772 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xca>
		{
			return;
		}
		pwm.SicloTrabajo(0);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3370      	adds	r3, #112	@ 0x70
 8002748:	2100      	movs	r1, #0
 800274a:	4618      	mov	r0, r3
 800274c:	f007 fdce 	bl	800a2ec <_ZN3Pwm12SicloTrabajoEi>
		return;
 8002750:	e010      	b.n	8002774 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xcc>
	}
	//pongo al maximo el aire para enfriar la pistola
	if (temperatura > 10)
 8002752:	edd7 7a03 	vldr	s15, [r7, #12]
 8002756:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800275a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800275e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002762:	dd07      	ble.n	8002774 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xcc>
	{
		pwm.SicloTrabajo(100);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3370      	adds	r3, #112	@ 0x70
 8002768:	2164      	movs	r1, #100	@ 0x64
 800276a:	4618      	mov	r0, r3
 800276c:	f007 fdbe 	bl	800a2ec <_ZN3Pwm12SicloTrabajoEi>
 8002770:	e000      	b.n	8002774 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xcc>
			return;
 8002772:	bf00      	nop
	}
}
 8002774:	3714      	adds	r7, #20
 8002776:	46bd      	mov	sp, r7
 8002778:	bd90      	pop	{r4, r7, pc}
 800277a:	bf00      	nop
 800277c:	f3af 8000 	nop.w
 8002780:	00000000 	.word	0x00000000
 8002784:	40c38800 	.word	0x40c38800

08002788 <_ZN16CestacionBaku60110CruceXCeroEi>:
void CestacionBaku601::CruceXCero(int gpio_pin)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
	if (EstadoSensorMagnetico == BOTON_PRESIONADO)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002796:	2b00      	cmp	r3, #0
 8002798:	d105      	bne.n	80027a6 <_ZN16CestacionBaku60110CruceXCeroEi+0x1e>
	{
		calefactor.Apagar();
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	33bc      	adds	r3, #188	@ 0xbc
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fe fd14 	bl	80011cc <_ZN10Calefactor6ApagarEv>
		return;
 80027a4:	e031      	b.n	800280a <_ZN16CestacionBaku60110CruceXCeroEi+0x82>
	}
	if (gpio_pin != CruceCero_Pin)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	2b10      	cmp	r3, #16
 80027aa:	d12d      	bne.n	8002808 <_ZN16CestacionBaku60110CruceXCeroEi+0x80>
//	if(TiempoAntiReboresCruceXCero>0)
//	{
	//return;
//	}
//	TiempoAntiReboresCruceXCero = 9;
	if (conteolecturatemperatura > 10)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027b2:	2b0a      	cmp	r3, #10
 80027b4:	dd03      	ble.n	80027be <_ZN16CestacionBaku60110CruceXCeroEi+0x36>
	{
		conteolecturatemperatura = 0;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
	}
	conteolecturatemperatura++;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
	if (ciclos >= 100)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d0:	2b63      	cmp	r3, #99	@ 0x63
 80027d2:	dd02      	ble.n	80027da <_ZN16CestacionBaku60110CruceXCeroEi+0x52>
	{
		ciclos = 0;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	if (ciclos < PotenciaCalefactor)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e2:	429a      	cmp	r2, r3
 80027e4:	da05      	bge.n	80027f2 <_ZN16CestacionBaku60110CruceXCeroEi+0x6a>
	{
		calefactor.Encender();
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	33bc      	adds	r3, #188	@ 0xbc
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fe fcdb 	bl	80011a6 <_ZN10Calefactor8EncenderEv>
 80027f0:	e004      	b.n	80027fc <_ZN16CestacionBaku60110CruceXCeroEi+0x74>
	}
	else
	{
		calefactor.Apagar();
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	33bc      	adds	r3, #188	@ 0xbc
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fe fce8 	bl	80011cc <_ZN10Calefactor6ApagarEv>
	}
	ciclos = ciclos + 1;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	655a      	str	r2, [r3, #84]	@ 0x54
 8002806:	e000      	b.n	800280a <_ZN16CestacionBaku60110CruceXCeroEi+0x82>
		return;
 8002808:	bf00      	nop
}
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <_ZN16CestacionBaku6019TimerTickEv>:
void CestacionBaku601::TimerTick()
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
	if (TiempoAntiReboresCruceXCero > 0)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800281c:	2b00      	cmp	r3, #0
 800281e:	dd05      	ble.n	800282c <_ZN16CestacionBaku6019TimerTickEv+0x1c>
	{
		TiempoAntiReboresCruceXCero--;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002824:	1e5a      	subs	r2, r3, #1
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	651a      	str	r2, [r3, #80]	@ 0x50
	else
	{
		CruceXCero(CruceCero_Pin);
		TiempoAntiReboresCruceXCero = 200000;
	}
}
 800282a:	e009      	b.n	8002840 <_ZN16CestacionBaku6019TimerTickEv+0x30>
		CruceXCero(CruceCero_Pin);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	333c      	adds	r3, #60	@ 0x3c
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2110      	movs	r1, #16
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	4798      	blx	r3
		TiempoAntiReboresCruceXCero = 200000;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a02      	ldr	r2, [pc, #8]	@ (8002848 <_ZN16CestacionBaku6019TimerTickEv+0x38>)
 800283e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002840:	bf00      	nop
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	00030d40 	.word	0x00030d40

0800284c <_ZN16CestacionBaku6016GetPIDEv>:
int CestacionBaku601::GetPID()
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
	return PotenciaCalefactor;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8002858:	4618      	mov	r0, r3
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <_ZN16CestacionBaku6016SetPIDEi>:
void CestacionBaku601::SetPID(int valor)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
	PotenciaCalefactor = valor;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <_ZN16CestacionBaku60117GPIO_INTERRUPCIONEi>:
void CestacionBaku601::GPIO_INTERRUPCION(int GPIO_Pin)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
//	CruceXCero(GPIO_Pin);
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
	...

08002898 <_ZN14CBarraProgresoC1Eiiiiiiii>:
 */

#include <GUI/CBarraProgreso.hpp>
#include <GUI/CRectanguloTft.hpp>

CBarraProgreso::CBarraProgreso(int xi, int yi, int ancho, int alto,	int backColor,int colorBarra, int contorno, int colorContorno):
 8002898:	b580      	push	{r7, lr}
 800289a:	b088      	sub	sp, #32
 800289c:	af04      	add	r7, sp, #16
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	603b      	str	r3, [r7, #0]
CRectanguloTft(xi,yi,ancho,alto,backColor,contorno,colorContorno)
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028aa:	9303      	str	r3, [sp, #12]
 80028ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ae:	9302      	str	r3, [sp, #8]
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	9301      	str	r3, [sp, #4]
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68b9      	ldr	r1, [r7, #8]
 80028be:	f000 fe29 	bl	8003514 <_ZN14CRectanguloTftC1Eiiiiiii>
 80028c2:	4a05      	ldr	r2, [pc, #20]	@ (80028d8 <_ZN14CBarraProgresoC1Eiiiiiiii+0x40>)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub
	ColorBarra=colorBarra;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a3a      	ldr	r2, [r7, #32]
 80028cc:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	4618      	mov	r0, r3
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	0801474c 	.word	0x0801474c

080028dc <_ZN14CBarraProgresoD1Ev>:

CBarraProgreso::~CBarraProgreso()
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	4a05      	ldr	r2, [pc, #20]	@ (80028fc <_ZN14CBarraProgresoD1Ev+0x20>)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 fdef 	bl	80034d0 <_ZN14CRectanguloTftD1Ev>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4618      	mov	r0, r3
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	0801474c 	.word	0x0801474c

08002900 <_ZN14CBarraProgresoD0Ev>:
CBarraProgreso::~CBarraProgreso()
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
}
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff ffe7 	bl	80028dc <_ZN14CBarraProgresoD1Ev>
 800290e:	213c      	movs	r1, #60	@ 0x3c
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f00e fd81 	bl	8011418 <_ZdlPvj>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4618      	mov	r0, r3
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <_ZN14CBarraProgreso9SetMaximoEi>:

void CBarraProgreso::SetMaximo(int maximo)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
	Maximo=maximo;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <_ZN14CBarraProgreso8SetValorEi>:
void CBarraProgreso::SetValor(int valor)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
	Valor=valor;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <_ZN14CBarraProgreso4ShowEv>:
void CBarraProgreso::Show()
{
 8002958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800295a:	b087      	sub	sp, #28
 800295c:	af02      	add	r7, sp, #8
 800295e:	6078      	str	r0, [r7, #4]
  //dibujo el rectangulo
  fillRect(Xi, Yi, Ancho, Alto, BackColor);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	3338      	adds	r3, #56	@ 0x38
 8002968:	681c      	ldr	r4, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	b219      	sxth	r1, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	b21d      	sxth	r5, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	b21e      	sxth	r6, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002980:	b21b      	sxth	r3, r3
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6952      	ldr	r2, [r2, #20]
 8002986:	b292      	uxth	r2, r2
 8002988:	9201      	str	r2, [sp, #4]
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	4633      	mov	r3, r6
 800298e:	462a      	mov	r2, r5
 8002990:	47a0      	blx	r4

  int ancho2=Valor*Ancho/Maximo;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6a12      	ldr	r2, [r2, #32]
 800299a:	fb03 f202 	mul.w	r2, r3, r2
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80029a6:	60fb      	str	r3, [r7, #12]
  if(ancho2==0)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <_ZN14CBarraProgreso4ShowEv+0x5a>
	  ancho2=1;
 80029ae:	2301      	movs	r3, #1
 80029b0:	60fb      	str	r3, [r7, #12]
  fillRect(Xi, Yi, ancho2, Alto, ColorBarra);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	3338      	adds	r3, #56	@ 0x38
 80029ba:	681c      	ldr	r4, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	b219      	sxth	r1, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	b21d      	sxth	r5, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	b21e      	sxth	r6, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d0:	b21b      	sxth	r3, r3
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80029d6:	b292      	uxth	r2, r2
 80029d8:	9201      	str	r2, [sp, #4]
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	4633      	mov	r3, r6
 80029de:	462a      	mov	r2, r5
 80029e0:	47a0      	blx	r4
  //hay que mostrar contorno?
  if (Contorno == 1) {
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d118      	bne.n	8002a1c <_ZN14CBarraProgreso4ShowEv+0xc4>
    drawRect(Xi, Yi, Ancho, Alto, ColorControrno);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	3344      	adds	r3, #68	@ 0x44
 80029f2:	681c      	ldr	r4, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	b219      	sxth	r1, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	b21d      	sxth	r5, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	b21e      	sxth	r6, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0a:	b21b      	sxth	r3, r3
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002a10:	b292      	uxth	r2, r2
 8002a12:	9201      	str	r2, [sp, #4]
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	4633      	mov	r3, r6
 8002a18:	462a      	mov	r2, r5
 8002a1a:	47a0      	blx	r4
  }
}
 8002a1c:	bf00      	nop
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a24 <_ZN18CComponenteBaseTftC1Ev>:
#include <GUI/CComponenteBaseTft.hpp>
#include "stdio.h"
#include <stdarg.h>
#include "string.h"
#include "ILI9341/ILI9341_GFX.hpp"
CComponenteBaseTft::CComponenteBaseTft()
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	4a09      	ldr	r2, [pc, #36]	@ (8002a54 <_ZN18CComponenteBaseTftC1Ev+0x30>)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	605a      	str	r2, [r3, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	609a      	str	r2, [r3, #8]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	615a      	str	r2, [r3, #20]
{
	// TODO Auto-generated constructor stub

}
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4618      	mov	r0, r3
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	080147ac 	.word	0x080147ac

08002a58 <_ZN18CComponenteBaseTftD1Ev>:

CComponenteBaseTft::~CComponenteBaseTft()
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	4a04      	ldr	r2, [pc, #16]	@ (8002a74 <_ZN18CComponenteBaseTftD1Ev+0x1c>)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	080147ac 	.word	0x080147ac

08002a78 <_ZN18CComponenteBaseTftD0Ev>:
CComponenteBaseTft::~CComponenteBaseTft()
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
}
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f7ff ffe9 	bl	8002a58 <_ZN18CComponenteBaseTftD1Ev>
 8002a86:	2118      	movs	r1, #24
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f00e fcc5 	bl	8011418 <_ZdlPvj>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4618      	mov	r0, r3
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <_ZN18CComponenteBaseTft9drawPixelEsst>:

//creo una capa que envuelve todas las funciones de la pantalla tft para mejorar el codigo
void CComponenteBaseTft::CComponenteBaseTft::drawPixel(int16_t x, int16_t y,
		uint16_t color)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	4608      	mov	r0, r1
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	817b      	strh	r3, [r7, #10]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	813b      	strh	r3, [r7, #8]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	80fb      	strh	r3, [r7, #6]
}
 8002ab2:	bf00      	nop
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <_ZN18CComponenteBaseTft10startWriteEv>:

void CComponenteBaseTft::startWrite(void)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <_ZN18CComponenteBaseTft10writePixelEsst>:
void CComponenteBaseTft::writePixel(int16_t x, int16_t y, uint16_t color)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	60f8      	str	r0, [r7, #12]
 8002ada:	4608      	mov	r0, r1
 8002adc:	4611      	mov	r1, r2
 8002ade:	461a      	mov	r2, r3
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	817b      	strh	r3, [r7, #10]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	813b      	strh	r3, [r7, #8]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	80fb      	strh	r3, [r7, #6]
}
 8002aec:	bf00      	nop
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <_ZN18CComponenteBaseTft13writeFillRectEsssst>:
void CComponenteBaseTft::writeFillRect(int16_t x, int16_t y, int16_t w,
		int16_t h, uint16_t color)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	4608      	mov	r0, r1
 8002b02:	4611      	mov	r1, r2
 8002b04:	461a      	mov	r2, r3
 8002b06:	4603      	mov	r3, r0
 8002b08:	817b      	strh	r3, [r7, #10]
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	813b      	strh	r3, [r7, #8]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	80fb      	strh	r3, [r7, #6]
}
 8002b12:	bf00      	nop
 8002b14:	3714      	adds	r7, #20
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <_ZN18CComponenteBaseTft14writeFastVLineEssst>:
void CComponenteBaseTft::writeFastVLine(int16_t x, int16_t y, int16_t h,
		uint16_t color)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b085      	sub	sp, #20
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	4608      	mov	r0, r1
 8002b28:	4611      	mov	r1, r2
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	817b      	strh	r3, [r7, #10]
 8002b30:	460b      	mov	r3, r1
 8002b32:	813b      	strh	r3, [r7, #8]
 8002b34:	4613      	mov	r3, r2
 8002b36:	80fb      	strh	r3, [r7, #6]
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <_ZN18CComponenteBaseTft14writeFastHLineEssst>:
void CComponenteBaseTft::writeFastHLine(int16_t x, int16_t y, int16_t w,
		uint16_t color)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	4608      	mov	r0, r1
 8002b4e:	4611      	mov	r1, r2
 8002b50:	461a      	mov	r2, r3
 8002b52:	4603      	mov	r3, r0
 8002b54:	817b      	strh	r3, [r7, #10]
 8002b56:	460b      	mov	r3, r1
 8002b58:	813b      	strh	r3, [r7, #8]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	80fb      	strh	r3, [r7, #6]
}
 8002b5e:	bf00      	nop
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <_ZN18CComponenteBaseTft9writeLineEsssst>:
void CComponenteBaseTft::writeLine(int16_t x0, int16_t y0, int16_t x1,
		int16_t y1, uint16_t color)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b085      	sub	sp, #20
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	60f8      	str	r0, [r7, #12]
 8002b72:	4608      	mov	r0, r1
 8002b74:	4611      	mov	r1, r2
 8002b76:	461a      	mov	r2, r3
 8002b78:	4603      	mov	r3, r0
 8002b7a:	817b      	strh	r3, [r7, #10]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	813b      	strh	r3, [r7, #8]
 8002b80:	4613      	mov	r3, r2
 8002b82:	80fb      	strh	r3, [r7, #6]
}
 8002b84:	bf00      	nop
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <_ZN18CComponenteBaseTft8endWriteEv>:
void CComponenteBaseTft::endWrite(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <_ZN18CComponenteBaseTft11setRotationEh>:
void CComponenteBaseTft::setRotation(uint8_t r)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	460b      	mov	r3, r1
 8002bae:	70fb      	strb	r3, [r7, #3]
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <_ZN18CComponenteBaseTft13invertDisplayEb>:
void CComponenteBaseTft::invertDisplay(bool i)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	70fb      	strb	r3, [r7, #3]
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <_ZN18CComponenteBaseTft13drawFastVLineEssst>:
void CComponenteBaseTft::drawFastVLine(int16_t x, int16_t y, int16_t h,
		uint16_t color)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	4608      	mov	r0, r1
 8002bde:	4611      	mov	r1, r2
 8002be0:	461a      	mov	r2, r3
 8002be2:	4603      	mov	r3, r0
 8002be4:	817b      	strh	r3, [r7, #10]
 8002be6:	460b      	mov	r3, r1
 8002be8:	813b      	strh	r3, [r7, #8]
 8002bea:	4613      	mov	r3, r2
 8002bec:	80fb      	strh	r3, [r7, #6]
}
 8002bee:	bf00      	nop
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <_ZN18CComponenteBaseTft13drawFastHLineEssst>:
void CComponenteBaseTft::drawFastHLine(int16_t x, int16_t y, int16_t w,
		uint16_t color)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b085      	sub	sp, #20
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	60f8      	str	r0, [r7, #12]
 8002c02:	4608      	mov	r0, r1
 8002c04:	4611      	mov	r1, r2
 8002c06:	461a      	mov	r2, r3
 8002c08:	4603      	mov	r3, r0
 8002c0a:	817b      	strh	r3, [r7, #10]
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	813b      	strh	r3, [r7, #8]
 8002c10:	4613      	mov	r3, r2
 8002c12:	80fb      	strh	r3, [r7, #6]
}
 8002c14:	bf00      	nop
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <_ZN18CComponenteBaseTft10fillScreenEt>:
void CComponenteBaseTft::fillScreen(uint16_t color)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	807b      	strh	r3, [r7, #2]
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <_ZN18CComponenteBaseTft8drawLineEsssst>:
void CComponenteBaseTft::drawLine(int16_t x0, int16_t y0, int16_t x1,
		int16_t y1, uint16_t color)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	4608      	mov	r0, r1
 8002c42:	4611      	mov	r1, r2
 8002c44:	461a      	mov	r2, r3
 8002c46:	4603      	mov	r3, r0
 8002c48:	817b      	strh	r3, [r7, #10]
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	813b      	strh	r3, [r7, #8]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	80fb      	strh	r3, [r7, #6]
}
 8002c52:	bf00      	nop
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <_ZN18CComponenteBaseTft5widthEv>:
}
void CComponenteBaseTft::cp437(bool x)
{
}
int16_t CComponenteBaseTft::width(void)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
	return 319;
 8002c66:	f240 133f 	movw	r3, #319	@ 0x13f
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <_ZN18CComponenteBaseTft6heightEv>:
int16_t CComponenteBaseTft::height(void)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
	return 239;
 8002c7e:	23ef      	movs	r3, #239	@ 0xef
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <_ZN18CComponenteBaseTft8fillRectEsssst>:
	va_end(pa);
	buffer[posbuffer] = '\0';
	print(buffer);
}
void CComponenteBaseTft::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,uint16_t color)
{
 8002c8c:	b590      	push	{r4, r7, lr}
 8002c8e:	b087      	sub	sp, #28
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	4608      	mov	r0, r1
 8002c96:	4611      	mov	r1, r2
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	817b      	strh	r3, [r7, #10]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	813b      	strh	r3, [r7, #8]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Filled_Rectangle_Coord(x, y, x+w, y+h, color);
 8002ca6:	8978      	ldrh	r0, [r7, #10]
 8002ca8:	8939      	ldrh	r1, [r7, #8]
 8002caa:	897a      	ldrh	r2, [r7, #10]
 8002cac:	88fb      	ldrh	r3, [r7, #6]
 8002cae:	4413      	add	r3, r2
 8002cb0:	b29c      	uxth	r4, r3
 8002cb2:	893a      	ldrh	r2, [r7, #8]
 8002cb4:	8c3b      	ldrh	r3, [r7, #32]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	4622      	mov	r2, r4
 8002cc2:	f006 f958 	bl	8008f76 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt>
}
 8002cc6:	bf00      	nop
 8002cc8:	3714      	adds	r7, #20
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd90      	pop	{r4, r7, pc}

08002cce <_ZN18CComponenteBaseTft8drawRectEsssst>:
void CComponenteBaseTft::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,uint16_t color)
{
 8002cce:	b590      	push	{r4, r7, lr}
 8002cd0:	b087      	sub	sp, #28
 8002cd2:	af02      	add	r7, sp, #8
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	4608      	mov	r0, r1
 8002cd8:	4611      	mov	r1, r2
 8002cda:	461a      	mov	r2, r3
 8002cdc:	4603      	mov	r3, r0
 8002cde:	817b      	strh	r3, [r7, #10]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	813b      	strh	r3, [r7, #8]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Hollow_Rectangle_Coord(x, y,x+w,y+h,color);
 8002ce8:	8978      	ldrh	r0, [r7, #10]
 8002cea:	8939      	ldrh	r1, [r7, #8]
 8002cec:	897a      	ldrh	r2, [r7, #10]
 8002cee:	88fb      	ldrh	r3, [r7, #6]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	b29c      	uxth	r4, r3
 8002cf4:	893a      	ldrh	r2, [r7, #8]
 8002cf6:	8c3b      	ldrh	r3, [r7, #32]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	4613      	mov	r3, r2
 8002d02:	4622      	mov	r2, r4
 8002d04:	f006 f8b6 	bl	8008e74 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt>
}
 8002d08:	bf00      	nop
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd90      	pop	{r4, r7, pc}

08002d10 <_ZN18CComponenteBaseTft9setCursorEss>:
void CComponenteBaseTft::setCursor(int16_t x, int16_t y)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	807b      	strh	r3, [r7, #2]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	803b      	strh	r3, [r7, #0]
    CursorX=x;
 8002d20:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	605a      	str	r2, [r3, #4]
    CursorY=y;
 8002d28:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	609a      	str	r2, [r3, #8]
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <_ZN18CComponenteBaseTft11setTextSizeEh>:
void CComponenteBaseTft::setTextSize(uint8_t s)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	70fb      	strb	r3, [r7, #3]
	TextSize=s;
 8002d48:	78fa      	ldrb	r2, [r7, #3]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	60da      	str	r2, [r3, #12]
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <_ZN18CComponenteBaseTft12setTextColorEt>:
void CComponenteBaseTft::setTextSize(uint8_t sx, uint8_t sy)
{
}
void CComponenteBaseTft::setTextColor(uint16_t c)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	460b      	mov	r3, r1
 8002d64:	807b      	strh	r3, [r7, #2]
	ColorTexto=c;
 8002d66:	887a      	ldrh	r2, [r7, #2]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	611a      	str	r2, [r3, #16]
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <_ZN18CComponenteBaseTft5printEPc>:
void CComponenteBaseTft::print(char *texto)
{
 8002d78:	b590      	push	{r4, r7, lr}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af02      	add	r7, sp, #8
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
	ILI9341_Draw_Text(texto, CursorX,CursorY, ColorTexto, TextSize, BackColor);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6859      	ldr	r1, [r3, #4]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6898      	ldr	r0, [r3, #8]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	b29c      	uxth	r4, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6952      	ldr	r2, [r2, #20]
 8002d9a:	b292      	uxth	r2, r2
 8002d9c:	9201      	str	r2, [sp, #4]
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	4623      	mov	r3, r4
 8002da2:	4602      	mov	r2, r0
 8002da4:	6838      	ldr	r0, [r7, #0]
 8002da6:	f006 f9db 	bl	8009160 <_Z17ILI9341_Draw_TextPKciittt>
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd90      	pop	{r4, r7, pc}

08002db2 <_ZN18CComponenteBaseTft11LimpiaTextoEv>:
void CComponenteBaseTft::LimpiaTexto()
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]

}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
	...

08002dc8 <_ZN12CEtiquetaTftD1Ev>:
 */

#include <GUI/CEtiquetaTft.hpp>


CEtiquetaTft::~CEtiquetaTft()
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	4a05      	ldr	r2, [pc, #20]	@ (8002de8 <_ZN12CEtiquetaTftD1Ev+0x20>)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 fb79 	bl	80034d0 <_ZN14CRectanguloTftD1Ev>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4618      	mov	r0, r3
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	08014800 	.word	0x08014800

08002dec <_ZN12CEtiquetaTftD0Ev>:
CEtiquetaTft::~CEtiquetaTft()
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
}
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7ff ffe7 	bl	8002dc8 <_ZN12CEtiquetaTftD1Ev>
 8002dfa:	21a4      	movs	r1, #164	@ 0xa4
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f00e fb0b 	bl	8011418 <_ZdlPvj>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4618      	mov	r0, r3
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>:

CEtiquetaTft::CEtiquetaTft(int xi, int yi, int ancho, int alto,	int backColor, char *texto, int colorTexto, int textSize, int contorno,	int colorContorno) :
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b088      	sub	sp, #32
 8002e10:	af04      	add	r7, sp, #16
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
 8002e18:	603b      	str	r3, [r7, #0]
		CRectanguloTft(xi, yi, ancho, alto, backColor, contorno, colorContorno)
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e1e:	9303      	str	r3, [sp, #12]
 8002e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e22:	9302      	str	r3, [sp, #8]
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	9301      	str	r3, [sp, #4]
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	68b9      	ldr	r1, [r7, #8]
 8002e32:	f000 fb6f 	bl	8003514 <_ZN14CRectanguloTftC1Eiiiiiii>
 8002e36:	4a11      	ldr	r2, [pc, #68]	@ (8002e7c <_ZN12CEtiquetaTftC1EiiiiiPciiii+0x70>)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2203      	movs	r2, #3
 8002e40:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
{
	strcpy(Texto, texto);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	3330      	adds	r3, #48	@ 0x30
 8002e58:	6a39      	ldr	r1, [r7, #32]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f00f fa11 	bl	8012282 <strcpy>
	ColorTexto = colorTexto;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e64:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	TextSize = textSize;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e6c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
}
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	08014800 	.word	0x08014800

08002e80 <_ZN12CEtiquetaTft8SetTextoEPcz>:

void CEtiquetaTft::SetTexto(char *formato, ...)
{
 8002e80:	b40e      	push	{r1, r2, r3}
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b0bb      	sub	sp, #236	@ 0xec
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
//	LimpiaTexto();
	char *p;
	char buffer[100];
	char tmp[100];
	int postmp = 0;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	int posbuffer = 0;
 8002e90:	2300      	movs	r3, #0
 8002e92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	va_list pa;
	int encontrado = 0;
 8002e96:	2300      	movs	r3, #0
 8002e98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

	va_start(pa, formato);
 8002e9c:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8002ea0:	60fb      	str	r3, [r7, #12]

	for (p = formato; *p; p++)
 8002ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002eaa:	e0f5      	b.n	8003098 <_ZN12CEtiquetaTft8SetTextoEPcz+0x218>
	{

		if (*p != '%')
 8002eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	2b25      	cmp	r3, #37	@ 0x25
 8002eb4:	d00f      	beq.n	8002ed6 <_ZN12CEtiquetaTft8SetTextoEPcz+0x56>
		{
			buffer[posbuffer] = *p;
 8002eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eba:	7819      	ldrb	r1, [r3, #0]
 8002ebc:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8002ec0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ec4:	4413      	add	r3, r2
 8002ec6:	460a      	mov	r2, r1
 8002ec8:	701a      	strb	r2, [r3, #0]
			posbuffer++;
 8002eca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ece:	3301      	adds	r3, #1
 8002ed0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
			continue;
 8002ed4:	e0db      	b.n	800308e <_ZN12CEtiquetaTft8SetTextoEPcz+0x20e>
		}
		encontrado = 0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		switch (*++p)
 8002edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	3b63      	subs	r3, #99	@ 0x63
 8002eee:	2b15      	cmp	r3, #21
 8002ef0:	f200 8096 	bhi.w	8003020 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1a0>
 8002ef4:	a201      	add	r2, pc, #4	@ (adr r2, 8002efc <_ZN12CEtiquetaTft8SetTextoEPcz+0x7c>)
 8002ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efa:	bf00      	nop
 8002efc:	08002fc5 	.word	0x08002fc5
 8002f00:	08002f55 	.word	0x08002f55
 8002f04:	08003021 	.word	0x08003021
 8002f08:	08002fe1 	.word	0x08002fe1
 8002f0c:	08003021 	.word	0x08003021
 8002f10:	08003021 	.word	0x08003021
 8002f14:	08002f71 	.word	0x08002f71
 8002f18:	08003021 	.word	0x08003021
 8002f1c:	08003021 	.word	0x08003021
 8002f20:	08003021 	.word	0x08003021
 8002f24:	08003021 	.word	0x08003021
 8002f28:	08003021 	.word	0x08003021
 8002f2c:	08003021 	.word	0x08003021
 8002f30:	08002fa9 	.word	0x08002fa9
 8002f34:	08003021 	.word	0x08003021
 8002f38:	08003021 	.word	0x08003021
 8002f3c:	08003005 	.word	0x08003005
 8002f40:	08003021 	.word	0x08003021
 8002f44:	08003021 	.word	0x08003021
 8002f48:	08003021 	.word	0x08003021
 8002f4c:	08003021 	.word	0x08003021
 8002f50:	08002f8d 	.word	0x08002f8d
		{
		case 'd':
			sprintf(tmp, "%d", va_arg(pa, int));
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	1d1a      	adds	r2, r3, #4
 8002f58:	60fa      	str	r2, [r7, #12]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	f107 0310 	add.w	r3, r7, #16
 8002f60:	495b      	ldr	r1, [pc, #364]	@ (80030d0 <_ZN12CEtiquetaTft8SetTextoEPcz+0x250>)
 8002f62:	4618      	mov	r0, r3
 8002f64:	f00f f856 	bl	8012014 <siprintf>
			encontrado = 1;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 8002f6e:	e067      	b.n	8003040 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1c0>
		case 'i':
			sprintf(tmp, "%i", va_arg(pa, int));
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	1d1a      	adds	r2, r3, #4
 8002f74:	60fa      	str	r2, [r7, #12]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	f107 0310 	add.w	r3, r7, #16
 8002f7c:	4955      	ldr	r1, [pc, #340]	@ (80030d4 <_ZN12CEtiquetaTft8SetTextoEPcz+0x254>)
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f00f f848 	bl	8012014 <siprintf>
			encontrado = 1;
 8002f84:	2301      	movs	r3, #1
 8002f86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 8002f8a:	e059      	b.n	8003040 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1c0>
		case 'x':
			sprintf(tmp, "%x", va_arg(pa, int));
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	1d1a      	adds	r2, r3, #4
 8002f90:	60fa      	str	r2, [r7, #12]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	f107 0310 	add.w	r3, r7, #16
 8002f98:	494f      	ldr	r1, [pc, #316]	@ (80030d8 <_ZN12CEtiquetaTft8SetTextoEPcz+0x258>)
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f00f f83a 	bl	8012014 <siprintf>
			encontrado = 1;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 8002fa6:	e04b      	b.n	8003040 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1c0>
		case 'p':
			sprintf(tmp, "%p", va_arg(pa, void*));
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1d1a      	adds	r2, r3, #4
 8002fac:	60fa      	str	r2, [r7, #12]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	f107 0310 	add.w	r3, r7, #16
 8002fb4:	4949      	ldr	r1, [pc, #292]	@ (80030dc <_ZN12CEtiquetaTft8SetTextoEPcz+0x25c>)
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f00f f82c 	bl	8012014 <siprintf>
			encontrado = 1;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 8002fc2:	e03d      	b.n	8003040 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1c0>
		case 'c':
			sprintf(tmp, "%c", va_arg(pa, int));
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	1d1a      	adds	r2, r3, #4
 8002fc8:	60fa      	str	r2, [r7, #12]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	f107 0310 	add.w	r3, r7, #16
 8002fd0:	4943      	ldr	r1, [pc, #268]	@ (80030e0 <_ZN12CEtiquetaTft8SetTextoEPcz+0x260>)
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f00f f81e 	bl	8012014 <siprintf>
			encontrado = 1;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 8002fde:	e02f      	b.n	8003040 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1c0>
		case 'f':
			sprintf(tmp, "%f", va_arg(pa, double));
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	3307      	adds	r3, #7
 8002fe4:	f023 0307 	bic.w	r3, r3, #7
 8002fe8:	f103 0208 	add.w	r2, r3, #8
 8002fec:	60fa      	str	r2, [r7, #12]
 8002fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff2:	f107 0010 	add.w	r0, r7, #16
 8002ff6:	493b      	ldr	r1, [pc, #236]	@ (80030e4 <_ZN12CEtiquetaTft8SetTextoEPcz+0x264>)
 8002ff8:	f00f f80c 	bl	8012014 <siprintf>
			encontrado = 1;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 8003002:	e01d      	b.n	8003040 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1c0>
		case 's':
			sprintf(tmp, "%s", va_arg(pa, char *));
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	1d1a      	adds	r2, r3, #4
 8003008:	60fa      	str	r2, [r7, #12]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	f107 0310 	add.w	r3, r7, #16
 8003010:	4935      	ldr	r1, [pc, #212]	@ (80030e8 <_ZN12CEtiquetaTft8SetTextoEPcz+0x268>)
 8003012:	4618      	mov	r0, r3
 8003014:	f00e fffe 	bl	8012014 <siprintf>
			encontrado = 1;
 8003018:	2301      	movs	r3, #1
 800301a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 800301e:	e00f      	b.n	8003040 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1c0>
		default:
			buffer[posbuffer] = *p;
 8003020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003024:	7819      	ldrb	r1, [r3, #0]
 8003026:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 800302a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800302e:	4413      	add	r3, r2
 8003030:	460a      	mov	r2, r1
 8003032:	701a      	strb	r2, [r3, #0]
			posbuffer++;
 8003034:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003038:	3301      	adds	r3, #1
 800303a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
			break;
 800303e:	bf00      	nop
		}
		if (encontrado == 1)
 8003040:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003044:	2b01      	cmp	r3, #1
 8003046:	d122      	bne.n	800308e <_ZN12CEtiquetaTft8SetTextoEPcz+0x20e>
		{
			postmp = 0;
 8003048:	2300      	movs	r3, #0
 800304a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
			while (tmp[postmp] != '\0')
 800304e:	e016      	b.n	800307e <_ZN12CEtiquetaTft8SetTextoEPcz+0x1fe>
			{
				buffer[posbuffer] = tmp[postmp];
 8003050:	f107 0210 	add.w	r2, r7, #16
 8003054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003058:	4413      	add	r3, r2
 800305a:	7819      	ldrb	r1, [r3, #0]
 800305c:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8003060:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003064:	4413      	add	r3, r2
 8003066:	460a      	mov	r2, r1
 8003068:	701a      	strb	r2, [r3, #0]
				posbuffer++;
 800306a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800306e:	3301      	adds	r3, #1
 8003070:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
				postmp++;
 8003074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003078:	3301      	adds	r3, #1
 800307a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
			while (tmp[postmp] != '\0')
 800307e:	f107 0210 	add.w	r2, r7, #16
 8003082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003086:	4413      	add	r3, r2
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1e0      	bne.n	8003050 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1d0>
	for (p = formato; *p; p++)
 800308e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003092:	3301      	adds	r3, #1
 8003094:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f47f af04 	bne.w	8002eac <_ZN12CEtiquetaTft8SetTextoEPcz+0x2c>
			}
		}
	}
	va_end(pa);
	buffer[posbuffer] = '\0';
 80030a4:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 80030a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030ac:	4413      	add	r3, r2
 80030ae:	2200      	movs	r2, #0
 80030b0:	701a      	strb	r2, [r3, #0]
	strcpy(Texto, buffer);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3330      	adds	r3, #48	@ 0x30
 80030b6:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 80030ba:	4611      	mov	r1, r2
 80030bc:	4618      	mov	r0, r3
 80030be:	f00f f8e0 	bl	8012282 <strcpy>
}
 80030c2:	bf00      	nop
 80030c4:	37ec      	adds	r7, #236	@ 0xec
 80030c6:	46bd      	mov	sp, r7
 80030c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80030cc:	b003      	add	sp, #12
 80030ce:	4770      	bx	lr
 80030d0:	08014120 	.word	0x08014120
 80030d4:	08014124 	.word	0x08014124
 80030d8:	08014128 	.word	0x08014128
 80030dc:	0801412c 	.word	0x0801412c
 80030e0:	08014130 	.word	0x08014130
 80030e4:	08014134 	.word	0x08014134
 80030e8:	08014138 	.word	0x08014138

080030ec <_ZN12CEtiquetaTft13SetSeparacionEii>:
{
	return Texto;
}

void CEtiquetaTft::SetSeparacion(int izquieda, int arriba)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
	SeparacionIzquierda = izquieda;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	SeparacionArriba = arriba;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
}
 8003108:	bf00      	nop
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <_ZN12CEtiquetaTft13SetColorTextoEi>:
{
	return SeparacionIzquierda;
}

void CEtiquetaTft::SetColorTexto(int color)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
	ColorTexto = color;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <_ZN12CEtiquetaTft4ShowEv>:
{
	return ColorTexto;
}

void CEtiquetaTft::Show()
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b082      	sub	sp, #8
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
	//mandamos a dibujar el rectangulo
	CRectanguloTft::Show();
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4618      	mov	r0, r3
 800313e:	f000 fa1b 	bl	8003578 <_ZN14CRectanguloTft4ShowEv>
	//me posiciono el la pocicion del texto
	setCursor(Xi + SeparacionIzquierda, Yi + SeparacionArriba);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	b29a      	uxth	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003150:	b29b      	uxth	r3, r3
 8003152:	4413      	add	r3, r2
 8003154:	b29b      	uxth	r3, r3
 8003156:	b219      	sxth	r1, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	69db      	ldr	r3, [r3, #28]
 800315c:	b29a      	uxth	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003164:	b29b      	uxth	r3, r3
 8003166:	4413      	add	r3, r2
 8003168:	b29b      	uxth	r3, r3
 800316a:	b21b      	sxth	r3, r3
 800316c:	461a      	mov	r2, r3
 800316e:	f7ff fdcf 	bl	8002d10 <_ZN18CComponenteBaseTft9setCursorEss>
	//asigno tamaño de la letra
	setTextSize (TextSize);
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800317a:	b2db      	uxtb	r3, r3
 800317c:	4619      	mov	r1, r3
 800317e:	4610      	mov	r0, r2
 8003180:	f7ff fddc 	bl	8002d3c <_ZN18CComponenteBaseTft11setTextSizeEh>
	//asigno el color de texto
	setTextColor (ColorTexto);
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800318c:	b29b      	uxth	r3, r3
 800318e:	4619      	mov	r1, r3
 8003190:	4610      	mov	r0, r2
 8003192:	f7ff fde2 	bl	8002d5a <_ZN18CComponenteBaseTft12setTextColorEt>
	//muestro el texto;
	print (Texto);
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3330      	adds	r3, #48	@ 0x30
 800319c:	4619      	mov	r1, r3
 800319e:	4610      	mov	r0, r2
 80031a0:	f7ff fdea 	bl	8002d78 <_ZN18CComponenteBaseTft5printEPc>
}
 80031a4:	bf00      	nop
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <_ZN12CEtiquetaTft12SetBackColorEi>:
int CEtiquetaTft::DameTextSize()
{
	return TextSize;
}
void CEtiquetaTft::SetBackColor(int color)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
	BackColor=color;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	615a      	str	r2, [r3, #20]
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <_ZN12CEtiquetaTft11LimpiaTextoEv>:
void CEtiquetaTft::LimpiaTexto()
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
	setTextColor (BackColor);
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	4619      	mov	r1, r3
 80031da:	4610      	mov	r0, r2
 80031dc:	f7ff fdbd 	bl	8002d5a <_ZN18CComponenteBaseTft12setTextColorEt>
	//muestro el texto;
	print (Texto);
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	3330      	adds	r3, #48	@ 0x30
 80031e6:	4619      	mov	r1, r3
 80031e8:	4610      	mov	r0, r2
 80031ea:	f7ff fdc5 	bl	8002d78 <_ZN18CComponenteBaseTft5printEPc>
	setTextColor (ColorTexto);
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	4619      	mov	r1, r3
 80031fa:	4610      	mov	r0, r2
 80031fc:	f7ff fdad 	bl	8002d5a <_ZN18CComponenteBaseTft12setTextColorEt>
	//muestro el texto;
//	print (Texto);

}
 8003200:	bf00      	nop
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <_ZN13CPantallaBaseD1Ev>:
 *      Author: W10
 */

#include <GUI/CPantallaBase.hpp>

CPantallaBase::~CPantallaBase()
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	4a09      	ldr	r2, [pc, #36]	@ (8003238 <_ZN13CPantallaBaseD1Ev+0x30>)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	4a09      	ldr	r2, [pc, #36]	@ (800323c <_ZN13CPantallaBaseD1Ev+0x34>)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3330      	adds	r3, #48	@ 0x30
 8003220:	4618      	mov	r0, r3
 8003222:	f006 ff11 	bl	800a048 <_ZN26CManejadorEventosControlesD1Ev>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4618      	mov	r0, r3
 800322a:	f000 f951 	bl	80034d0 <_ZN14CRectanguloTftD1Ev>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4618      	mov	r0, r3
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	08014860 	.word	0x08014860
 800323c:	080148e0 	.word	0x080148e0

08003240 <_ZThn48_N13CPantallaBaseD1Ev>:
	char Titulo[100];
	CEstacionBase *Estacion;
	CManejadorControles *ManejadorControles;

public:
	virtual ~CPantallaBase();
 8003240:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8003244:	f7ff bfe0 	b.w	8003208 <_ZN13CPantallaBaseD1Ev>

08003248 <_ZN13CPantallaBaseD0Ev>:
CPantallaBase::~CPantallaBase()
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
}
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7ff ffd9 	bl	8003208 <_ZN13CPantallaBaseD1Ev>
 8003256:	21ac      	movs	r1, #172	@ 0xac
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f00e f8dd 	bl	8011418 <_ZdlPvj>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4618      	mov	r0, r3
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <_ZThn48_N13CPantallaBaseD0Ev>:
 8003268:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800326c:	f7ff bfec 	b.w	8003248 <_ZN13CPantallaBaseD0Ev>

08003270 <_ZN13CPantallaBaseC1EiPc>:

//constructor
CPantallaBase::CPantallaBase(int verTitulo, char *titulo) :
 8003270:	b590      	push	{r4, r7, lr}
 8003272:	b08f      	sub	sp, #60	@ 0x3c
 8003274:	af08      	add	r7, sp, #32
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
		CRectanguloTft(0, 0, 0, 0, COLOR::BLACK, 1, COLOR::BLUE)
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	231f      	movs	r3, #31
 8003280:	9303      	str	r3, [sp, #12]
 8003282:	2301      	movs	r3, #1
 8003284:	9302      	str	r3, [sp, #8]
 8003286:	2300      	movs	r3, #0
 8003288:	9301      	str	r3, [sp, #4]
 800328a:	2300      	movs	r3, #0
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	2300      	movs	r3, #0
 8003290:	2200      	movs	r2, #0
 8003292:	2100      	movs	r1, #0
 8003294:	f000 f93e 	bl	8003514 <_ZN14CRectanguloTftC1Eiiiiiii>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	3330      	adds	r3, #48	@ 0x30
 800329c:	4618      	mov	r0, r3
 800329e:	f006 fec3 	bl	800a028 <_ZN26CManejadorEventosControlesC1Ev>
 80032a2:	4a2a      	ldr	r2, [pc, #168]	@ (800334c <_ZN13CPantallaBaseC1EiPc+0xdc>)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	4a29      	ldr	r2, [pc, #164]	@ (8003350 <_ZN13CPantallaBaseC1EiPc+0xe0>)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2201      	movs	r2, #1
 80032ba:	63da      	str	r2, [r3, #60]	@ 0x3c
{
	Visible=false;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	VerTitulo = verTitulo;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	63da      	str	r2, [r3, #60]	@ 0x3c
	strcpy(Titulo, titulo);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	3340      	adds	r3, #64	@ 0x40
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f00e ffd6 	bl	8012282 <strcpy>
	setRotation(3);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2103      	movs	r1, #3
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff fc62 	bl	8002ba4 <_ZN18CComponenteBaseTft11setRotationEh>
	int ancho = width();
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff fcbb 	bl	8002c5e <_ZN18CComponenteBaseTft5widthEv>
 80032e8:	4603      	mov	r3, r0
 80032ea:	617b      	str	r3, [r7, #20]
	int alto = height();
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff fcc1 	bl	8002c76 <_ZN18CComponenteBaseTft6heightEv>
 80032f4:	4603      	mov	r3, r0
 80032f6:	613b      	str	r3, [r7, #16]
	Redimenciona(ancho, alto);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	6979      	ldr	r1, [r7, #20]
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 f98a 	bl	8003618 <_ZN14CRectanguloTft12RedimencionaEii>
	LabelTitulo = new CEtiquetaTft( Xi, Yi, ancho, 30, COLOR::BLUE, Titulo,	COLOR::WHITE, 3, 0, COLOR::BLUE);
 8003304:	20a4      	movs	r0, #164	@ 0xa4
 8003306:	f00e f889 	bl	801141c <_Znwj>
 800330a:	4603      	mov	r3, r0
 800330c:	461c      	mov	r4, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6999      	ldr	r1, [r3, #24]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	69da      	ldr	r2, [r3, #28]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	3340      	adds	r3, #64	@ 0x40
 800331a:	201f      	movs	r0, #31
 800331c:	9006      	str	r0, [sp, #24]
 800331e:	2000      	movs	r0, #0
 8003320:	9005      	str	r0, [sp, #20]
 8003322:	2003      	movs	r0, #3
 8003324:	9004      	str	r0, [sp, #16]
 8003326:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800332a:	9003      	str	r0, [sp, #12]
 800332c:	9302      	str	r3, [sp, #8]
 800332e:	231f      	movs	r3, #31
 8003330:	9301      	str	r3, [sp, #4]
 8003332:	231e      	movs	r3, #30
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	4620      	mov	r0, r4
 800333a:	f7ff fd67 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	639c      	str	r4, [r3, #56]	@ 0x38
}
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4618      	mov	r0, r3
 8003346:	371c      	adds	r7, #28
 8003348:	46bd      	mov	sp, r7
 800334a:	bd90      	pop	{r4, r7, pc}
 800334c:	08014860 	.word	0x08014860
 8003350:	080148e0 	.word	0x080148e0

08003354 <_ZN13CPantallaBase4ShowEv>:
//funcion que se tiene que reemplazar para verse
void CPantallaBase::Show()
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
	//dibujo el fondo
//	CRectanguloTft::Show();
	//dibujo el titulo
	LabelTitulo->Show();
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	334c      	adds	r3, #76	@ 0x4c
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4610      	mov	r0, r2
 800336c:	4798      	blx	r3
}
 800336e:	bf00      	nop
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <_ZN13CPantallaBase8RefrescaEv>:
void CPantallaBase::Refresca()
{
 8003376:	b480      	push	{r7}
 8003378:	b083      	sub	sp, #12
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <_ZN13CPantallaBase11SetEstacionEP13CEstacionBase>:
void CPantallaBase::SetEstacion(CEstacionBase *estacion)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b082      	sub	sp, #8
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
 8003392:	6039      	str	r1, [r7, #0]
	Estacion = estacion;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	//asigno los evetos de la estacion
	Estacion->SetManejadorControles(this);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	3328      	adds	r3, #40	@ 0x28
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	3230      	adds	r2, #48	@ 0x30
 80033b2:	4611      	mov	r1, r2
 80033b4:	4798      	blx	r3
	Estacion->ActivarCalefactor();
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	3334      	adds	r3, #52	@ 0x34
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4610      	mov	r0, r2
 80033ca:	4798      	blx	r3
}
 80033cc:	bf00      	nop
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <_ZN13CPantallaBase7OcultarEv>:
void CPantallaBase::Ocultar()
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
	CRectanguloTft::Show();
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 f8ca 	bl	8003578 <_ZN14CRectanguloTft4ShowEv>
	Estacion->QuitaManejadorControles();
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	332c      	adds	r3, #44	@ 0x2c
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4610      	mov	r0, r2
 80033f8:	4798      	blx	r3
	Visible=false;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
}
 8003402:	bf00      	nop
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <_ZN13CPantallaBase9EsVisibleEv>:
bool CPantallaBase::EsVisible()
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
	return Visible;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
}
 8003418:	4618      	mov	r0, r3
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <_ZN13CPantallaBase10SetVisibleEb>:
void CPantallaBase::SetVisible(bool visible)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	460b      	mov	r3, r1
 800342e:	70fb      	strb	r3, [r7, #3]
	if(Visible==visible)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003436:	78fa      	ldrb	r2, [r7, #3]
 8003438:	429a      	cmp	r2, r3
 800343a:	d004      	beq.n	8003446 <_ZN13CPantallaBase10SetVisibleEb+0x22>
		return;
	Visible=visible;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	78fa      	ldrb	r2, [r7, #3]
 8003440:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8003444:	e000      	b.n	8003448 <_ZN13CPantallaBase10SetVisibleEb+0x24>
		return;
 8003446:	bf00      	nop
}
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <_ZN13CPantallaBase21SetManejadorControlesEP19CManejadorControles>:

void CPantallaBase::SetManejadorControles(CManejadorControles *manejador)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b082      	sub	sp, #8
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	6039      	str	r1, [r7, #0]
	ManejadorControles=manejador;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	if(ManejadorControles==NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00d      	beq.n	800348a <_ZN13CPantallaBase21SetManejadorControlesEP19CManejadorControles+0x38>
		return;
	ManejadorControles->SetManejadorControles(this);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f8d3 00a8 	ldr.w	r0, [r3, #168]	@ 0xa8
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	333c      	adds	r3, #60	@ 0x3c
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	3230      	adds	r2, #48	@ 0x30
 8003484:	4611      	mov	r1, r2
 8003486:	4798      	blx	r3
 8003488:	e000      	b.n	800348c <_ZN13CPantallaBase21SetManejadorControlesEP19CManejadorControles+0x3a>
		return;
 800348a:	bf00      	nop
}
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <_ZN13CPantallaBase17SetTituloPantallaEPc>:
void CPantallaBase::SetTituloPantalla(char *texto)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b082      	sub	sp, #8
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
 800349a:	6039      	str	r1, [r7, #0]
	strcpy(Titulo, texto);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3340      	adds	r3, #64	@ 0x40
 80034a0:	6839      	ldr	r1, [r7, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f00e feed 	bl	8012282 <strcpy>
	LabelTitulo->SetTexto(texto);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ac:	6839      	ldr	r1, [r7, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff fce6 	bl	8002e80 <_ZN12CEtiquetaTft8SetTextoEPcz>

}
 80034b4:	bf00      	nop
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <_ZN13CPantallaBase12SeleccionadaEv>:
void CPantallaBase::Seleccionada()
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]

}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <_ZN14CRectanguloTftD1Ev>:
 *      Author: W10
 */

#include <GUI/CRectanguloTft.hpp>

CRectanguloTft::~CRectanguloTft()
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	4a05      	ldr	r2, [pc, #20]	@ (80034f0 <_ZN14CRectanguloTftD1Ev+0x20>)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff fab9 	bl	8002a58 <_ZN18CComponenteBaseTftD1Ev>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4618      	mov	r0, r3
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	08014914 	.word	0x08014914

080034f4 <_ZN14CRectanguloTftD0Ev>:
CRectanguloTft::~CRectanguloTft()
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
}
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f7ff ffe7 	bl	80034d0 <_ZN14CRectanguloTftD1Ev>
 8003502:	2130      	movs	r1, #48	@ 0x30
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f00d ff87 	bl	8011418 <_ZdlPvj>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4618      	mov	r0, r3
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <_ZN14CRectanguloTftC1Eiiiiiii>:

CRectanguloTft::CRectanguloTft(int xi, int yi, int ancho , int alto , int backColor , int contorno , int colorContorno )
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
 8003520:	603b      	str	r3, [r7, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff fa7d 	bl	8002a24 <_ZN18CComponenteBaseTftC1Ev>
 800352a:	4a12      	ldr	r2, [pc, #72]	@ (8003574 <_ZN14CRectanguloTftC1Eiiiiiii+0x60>)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	629a      	str	r2, [r3, #40]	@ 0x28
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800353c:	62da      	str	r2, [r3, #44]	@ 0x2c
{
  Xi = xi;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	619a      	str	r2, [r3, #24]
  Ancho = ancho;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	621a      	str	r2, [r3, #32]
  Yi = yi;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	61da      	str	r2, [r3, #28]
  Alto = alto;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	625a      	str	r2, [r3, #36]	@ 0x24
  BackColor = backColor;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	69fa      	ldr	r2, [r7, #28]
 800355a:	615a      	str	r2, [r3, #20]
  ColorControrno = colorContorno;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003560:	62da      	str	r2, [r3, #44]	@ 0x2c
  Contorno = contorno;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a3a      	ldr	r2, [r7, #32]
 8003566:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	08014914 	.word	0x08014914

08003578 <_ZN14CRectanguloTft4ShowEv>:
//muestra el rectangulo en pantalla

void CRectanguloTft::Show()
{
 8003578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800357a:	b085      	sub	sp, #20
 800357c:	af02      	add	r7, sp, #8
 800357e:	6078      	str	r0, [r7, #4]
  //dibujo el rectangulo
  fillRect(Xi, Yi, Ancho, Alto, BackColor);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	3338      	adds	r3, #56	@ 0x38
 8003588:	681c      	ldr	r4, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	b219      	sxth	r1, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	b21d      	sxth	r5, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	b21e      	sxth	r6, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a0:	b21b      	sxth	r3, r3
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6952      	ldr	r2, [r2, #20]
 80035a6:	b292      	uxth	r2, r2
 80035a8:	9201      	str	r2, [sp, #4]
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	4633      	mov	r3, r6
 80035ae:	462a      	mov	r2, r5
 80035b0:	47a0      	blx	r4
  //hay que mostrar contorno?
  if (Contorno == 1) {
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d118      	bne.n	80035ec <_ZN14CRectanguloTft4ShowEv+0x74>
    drawRect(Xi, Yi, Ancho, Alto, ColorControrno);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	3344      	adds	r3, #68	@ 0x44
 80035c2:	681c      	ldr	r4, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	b219      	sxth	r1, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	b21d      	sxth	r5, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	b21e      	sxth	r6, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035da:	b21b      	sxth	r3, r3
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80035e0:	b292      	uxth	r2, r2
 80035e2:	9201      	str	r2, [sp, #4]
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	4633      	mov	r3, r6
 80035e8:	462a      	mov	r2, r5
 80035ea:	47a0      	blx	r4
  }
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035f4 <_ZN14CRectanguloTft14CambiaPosicionEii>:

void CRectanguloTft::CambiaPosicion(int x, int y)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  Xi=x;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	619a      	str	r2, [r3, #24]
  Yi=y;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	61da      	str	r2, [r3, #28]
}
 800360c:	bf00      	nop
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <_ZN14CRectanguloTft12RedimencionaEii>:

void CRectanguloTft::Redimenciona(int ancho, int alto)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
  Ancho=ancho;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	621a      	str	r2, [r3, #32]
  Alto=alto;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003630:	bf00      	nop
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <_ZN14CRectanguloTft13SetColorFondoEi>:

void CRectanguloTft::SetColorFondo(int color)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  BackColor=color;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	615a      	str	r2, [r3, #20]
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <_ZN14CRectanguloTft13DamePosicionXEv>:
{
  return ColorControrno;
}

int CRectanguloTft::DamePosicionX()
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  return Xi;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	699b      	ldr	r3, [r3, #24]
}
 8003664:	4618      	mov	r0, r3
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <_ZN14CRectanguloTft13DamePosicionYEv>:

int CRectanguloTft::DamePosicionY()
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  return Yi;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69db      	ldr	r3, [r3, #28]
}
 800367c:	4618      	mov	r0, r3
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <_ZN14CRectanguloTft8DameAltoEv>:
{
  return Ancho;
}

int CRectanguloTft::DameAlto()
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  return Alto;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8003694:	4618      	mov	r0, r3
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <_ZN14CRectanguloTft11DameCentroXEv>:

//regresa el punto central del rectangulo
int CRectanguloTft::DameCentroX()
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  return Xi+(Ancho/2);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	699a      	ldr	r2, [r3, #24]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	0fd9      	lsrs	r1, r3, #31
 80036b2:	440b      	add	r3, r1
 80036b4:	105b      	asrs	r3, r3, #1
 80036b6:	4413      	add	r3, r2
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <_ZN26CConfigurarPantallaMemoriaC1Ev>:
#include <GUI/ManejadorPantallas/CManejadorPantallas.hpp>
#include <EPROM/CEprom.hpp>

extern I2C_HandleTypeDef hi2c1;

CConfigurarPantallaMemoria::CConfigurarPantallaMemoria():
 80036c4:	b590      	push	{r4, r7, lr}
 80036c6:	b08d      	sub	sp, #52	@ 0x34
 80036c8:	af08      	add	r7, sp, #32
 80036ca:	6078      	str	r0, [r7, #4]
CPantallaBase(1, (char*)"CONF MEMORIA")
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a6b      	ldr	r2, [pc, #428]	@ (800387c <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1b8>)
 80036d0:	2101      	movs	r1, #1
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7ff fdcc 	bl	8003270 <_ZN13CPantallaBaseC1EiPc>
 80036d8:	4a69      	ldr	r2, [pc, #420]	@ (8003880 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1bc>)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	4a69      	ldr	r2, [pc, #420]	@ (8003884 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1c0>)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

{
	// TODO Auto-generated constructor stub
	LabelMemoria=new CEtiquetaTft( 5, 35, 50, 20, COLOR::BLACK,(char*)"Memoria: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 80036ec:	20a4      	movs	r0, #164	@ 0xa4
 80036ee:	f00d fe95 	bl	801141c <_Znwj>
 80036f2:	4603      	mov	r3, r0
 80036f4:	461c      	mov	r4, r3
 80036f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80036fa:	9306      	str	r3, [sp, #24]
 80036fc:	2300      	movs	r3, #0
 80036fe:	9305      	str	r3, [sp, #20]
 8003700:	2303      	movs	r3, #3
 8003702:	9304      	str	r3, [sp, #16]
 8003704:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003708:	9303      	str	r3, [sp, #12]
 800370a:	4b5f      	ldr	r3, [pc, #380]	@ (8003888 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1c4>)
 800370c:	9302      	str	r3, [sp, #8]
 800370e:	2300      	movs	r3, #0
 8003710:	9301      	str	r3, [sp, #4]
 8003712:	2314      	movs	r3, #20
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	2332      	movs	r3, #50	@ 0x32
 8003718:	2223      	movs	r2, #35	@ 0x23
 800371a:	2105      	movs	r1, #5
 800371c:	4620      	mov	r0, r4
 800371e:	f7ff fb75 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f8c3 40b4 	str.w	r4, [r3, #180]	@ 0xb4
	LabelTemperatura = new CEtiquetaTft( 5, 65, 50, 20, COLOR::BLACK,(char*)"Temperatura", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8003728:	20a4      	movs	r0, #164	@ 0xa4
 800372a:	f00d fe77 	bl	801141c <_Znwj>
 800372e:	4603      	mov	r3, r0
 8003730:	461c      	mov	r4, r3
 8003732:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003736:	9306      	str	r3, [sp, #24]
 8003738:	2300      	movs	r3, #0
 800373a:	9305      	str	r3, [sp, #20]
 800373c:	2303      	movs	r3, #3
 800373e:	9304      	str	r3, [sp, #16]
 8003740:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003744:	9303      	str	r3, [sp, #12]
 8003746:	4b51      	ldr	r3, [pc, #324]	@ (800388c <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1c8>)
 8003748:	9302      	str	r3, [sp, #8]
 800374a:	2300      	movs	r3, #0
 800374c:	9301      	str	r3, [sp, #4]
 800374e:	2314      	movs	r3, #20
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	2332      	movs	r3, #50	@ 0x32
 8003754:	2241      	movs	r2, #65	@ 0x41
 8003756:	2105      	movs	r1, #5
 8003758:	4620      	mov	r0, r4
 800375a:	f7ff fb57 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f8c3 40b8 	str.w	r4, [r3, #184]	@ 0xb8
	int centroX = DameCentroX();
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff ff9a 	bl	80036a0 <_ZN14CRectanguloTft11DameCentroXEv>
 800376c:	60f8      	str	r0, [r7, #12]
	LabelTemperaturas = new CEtiquetaTft( centroX - 150 / 2, 105, 150, 30,COLOR::WHITE, (char*)"000/000", COLOR::BLACK, 3, 1, COLOR::RED);
 800376e:	20a4      	movs	r0, #164	@ 0xa4
 8003770:	f00d fe54 	bl	801141c <_Znwj>
 8003774:	4603      	mov	r3, r0
 8003776:	461c      	mov	r4, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f1a3 014b 	sub.w	r1, r3, #75	@ 0x4b
 800377e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003782:	9306      	str	r3, [sp, #24]
 8003784:	2301      	movs	r3, #1
 8003786:	9305      	str	r3, [sp, #20]
 8003788:	2303      	movs	r3, #3
 800378a:	9304      	str	r3, [sp, #16]
 800378c:	2300      	movs	r3, #0
 800378e:	9303      	str	r3, [sp, #12]
 8003790:	4b3f      	ldr	r3, [pc, #252]	@ (8003890 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1cc>)
 8003792:	9302      	str	r3, [sp, #8]
 8003794:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003798:	9301      	str	r3, [sp, #4]
 800379a:	231e      	movs	r3, #30
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	2396      	movs	r3, #150	@ 0x96
 80037a0:	2269      	movs	r2, #105	@ 0x69
 80037a2:	4620      	mov	r0, r4
 80037a4:	f7ff fb32 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f8c3 40bc 	str.w	r4, [r3, #188]	@ 0xbc
	LabelTemperaturas->SetSeparacion(5, 5);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80037b4:	2205      	movs	r2, #5
 80037b6:	2105      	movs	r1, #5
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7ff fc97 	bl	80030ec <_ZN12CEtiquetaTft13SetSeparacionEii>
	LabelAire = new CEtiquetaTft( 5, 135, 200, 30, COLOR::BLACK,(char*) "Aire: 00",COLOR::WHITE, 3, 0, COLOR::RED);
 80037be:	20a4      	movs	r0, #164	@ 0xa4
 80037c0:	f00d fe2c 	bl	801141c <_Znwj>
 80037c4:	4603      	mov	r3, r0
 80037c6:	461c      	mov	r4, r3
 80037c8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80037cc:	9306      	str	r3, [sp, #24]
 80037ce:	2300      	movs	r3, #0
 80037d0:	9305      	str	r3, [sp, #20]
 80037d2:	2303      	movs	r3, #3
 80037d4:	9304      	str	r3, [sp, #16]
 80037d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037da:	9303      	str	r3, [sp, #12]
 80037dc:	4b2d      	ldr	r3, [pc, #180]	@ (8003894 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1d0>)
 80037de:	9302      	str	r3, [sp, #8]
 80037e0:	2300      	movs	r3, #0
 80037e2:	9301      	str	r3, [sp, #4]
 80037e4:	231e      	movs	r3, #30
 80037e6:	9300      	str	r3, [sp, #0]
 80037e8:	23c8      	movs	r3, #200	@ 0xc8
 80037ea:	2287      	movs	r2, #135	@ 0x87
 80037ec:	2105      	movs	r1, #5
 80037ee:	4620      	mov	r0, r4
 80037f0:	f7ff fb0c 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f8c3 40c0 	str.w	r4, [r3, #192]	@ 0xc0

	LabelGuardar=new CEtiquetaTft( 10, 200, 130, 30, COLOR::GREEN,(char*)"GUARDAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 80037fa:	20a4      	movs	r0, #164	@ 0xa4
 80037fc:	f00d fe0e 	bl	801141c <_Znwj>
 8003800:	4603      	mov	r3, r0
 8003802:	461c      	mov	r4, r3
 8003804:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003808:	9306      	str	r3, [sp, #24]
 800380a:	2301      	movs	r3, #1
 800380c:	9305      	str	r3, [sp, #20]
 800380e:	2303      	movs	r3, #3
 8003810:	9304      	str	r3, [sp, #16]
 8003812:	2300      	movs	r3, #0
 8003814:	9303      	str	r3, [sp, #12]
 8003816:	4b20      	ldr	r3, [pc, #128]	@ (8003898 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1d4>)
 8003818:	9302      	str	r3, [sp, #8]
 800381a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800381e:	9301      	str	r3, [sp, #4]
 8003820:	231e      	movs	r3, #30
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	2382      	movs	r3, #130	@ 0x82
 8003826:	22c8      	movs	r2, #200	@ 0xc8
 8003828:	210a      	movs	r1, #10
 800382a:	4620      	mov	r0, r4
 800382c:	f7ff faee 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f8c3 40ac 	str.w	r4, [r3, #172]	@ 0xac
	LabelCancelar=new CEtiquetaTft( 160, 200, 145, 30, COLOR::RED,(char*)"CANCELAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 8003836:	20a4      	movs	r0, #164	@ 0xa4
 8003838:	f00d fdf0 	bl	801141c <_Znwj>
 800383c:	4603      	mov	r3, r0
 800383e:	461c      	mov	r4, r3
 8003840:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003844:	9306      	str	r3, [sp, #24]
 8003846:	2301      	movs	r3, #1
 8003848:	9305      	str	r3, [sp, #20]
 800384a:	2303      	movs	r3, #3
 800384c:	9304      	str	r3, [sp, #16]
 800384e:	2300      	movs	r3, #0
 8003850:	9303      	str	r3, [sp, #12]
 8003852:	4b12      	ldr	r3, [pc, #72]	@ (800389c <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1d8>)
 8003854:	9302      	str	r3, [sp, #8]
 8003856:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800385a:	9301      	str	r3, [sp, #4]
 800385c:	231e      	movs	r3, #30
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	2391      	movs	r3, #145	@ 0x91
 8003862:	22c8      	movs	r2, #200	@ 0xc8
 8003864:	21a0      	movs	r1, #160	@ 0xa0
 8003866:	4620      	mov	r0, r4
 8003868:	f7ff fad0 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f8c3 40b0 	str.w	r4, [r3, #176]	@ 0xb0

}
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4618      	mov	r0, r3
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	bd90      	pop	{r4, r7, pc}
 800387c:	0801413c 	.word	0x0801413c
 8003880:	08014974 	.word	0x08014974
 8003884:	08014a08 	.word	0x08014a08
 8003888:	0801414c 	.word	0x0801414c
 800388c:	08014158 	.word	0x08014158
 8003890:	08014164 	.word	0x08014164
 8003894:	0801416c 	.word	0x0801416c
 8003898:	08014178 	.word	0x08014178
 800389c:	08014180 	.word	0x08014180

080038a0 <_ZN26CConfigurarPantallaMemoriaD1Ev>:

CConfigurarPantallaMemoria::~CConfigurarPantallaMemoria()
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	4a07      	ldr	r2, [pc, #28]	@ (80038c8 <_ZN26CConfigurarPantallaMemoriaD1Ev+0x28>)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	4a07      	ldr	r2, [pc, #28]	@ (80038cc <_ZN26CConfigurarPantallaMemoriaD1Ev+0x2c>)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff fca6 	bl	8003208 <_ZN13CPantallaBaseD1Ev>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4618      	mov	r0, r3
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	08014974 	.word	0x08014974
 80038cc:	08014a08 	.word	0x08014a08

080038d0 <_ZThn48_N26CConfigurarPantallaMemoriaD1Ev>:

	void LeeDatosMemoria();
	void MuestraInformacion();
public:
	CConfigurarPantallaMemoria();
	virtual ~CConfigurarPantallaMemoria();
 80038d0:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80038d4:	f7ff bfe4 	b.w	80038a0 <_ZN26CConfigurarPantallaMemoriaD1Ev>

080038d8 <_ZN26CConfigurarPantallaMemoriaD0Ev>:
CConfigurarPantallaMemoria::~CConfigurarPantallaMemoria()
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
}
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7ff ffdd 	bl	80038a0 <_ZN26CConfigurarPantallaMemoriaD1Ev>
 80038e6:	21dc      	movs	r1, #220	@ 0xdc
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f00d fd95 	bl	8011418 <_ZdlPvj>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4618      	mov	r0, r3
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <_ZThn48_N26CConfigurarPantallaMemoriaD0Ev>:
 80038f8:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80038fc:	f7ff bfec 	b.w	80038d8 <_ZN26CConfigurarPantallaMemoriaD0Ev>

08003900 <_ZN26CConfigurarPantallaMemoria4ShowEv>:

void CConfigurarPantallaMemoria::Show()
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
	VelocidadAireInicialPotenciometro=ManejadorControles->GetNivelAire();
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800390e:	4618      	mov	r0, r3
 8003910:	f006 fa65 	bl	8009dde <_ZN19CManejadorControles12GetNivelAireEv>
 8003914:	4602      	mov	r2, r0
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	CPantallaBase::Show();
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff fd18 	bl	8003354 <_ZN13CPantallaBase4ShowEv>
	LeeDatosMemoria();
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f87d 	bl	8003a24 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv>
	LabelTemperatura->Show();
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	334c      	adds	r3, #76	@ 0x4c
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4610      	mov	r0, r2
 800393e:	4798      	blx	r3
	MuestraInformacion();
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 f8b3 	bl	8003aac <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv>
	LabelMemoria->SetTexto((char*)"Memoria: %d", NumeroMemoria);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f8d3 00b4 	ldr.w	r0, [r3, #180]	@ 0xb4
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003952:	461a      	mov	r2, r3
 8003954:	4913      	ldr	r1, [pc, #76]	@ (80039a4 <_ZN26CConfigurarPantallaMemoria4ShowEv+0xa4>)
 8003956:	f7ff fa93 	bl	8002e80 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelMemoria->Show();
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	334c      	adds	r3, #76	@ 0x4c
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4610      	mov	r0, r2
 800396e:	4798      	blx	r3
	LabelGuardar->Show();
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	334c      	adds	r3, #76	@ 0x4c
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4610      	mov	r0, r2
 8003984:	4798      	blx	r3
	LabelCancelar->Show();
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	334c      	adds	r3, #76	@ 0x4c
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4610      	mov	r0, r2
 800399a:	4798      	blx	r3
}
 800399c:	bf00      	nop
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	0801418c 	.word	0x0801418c

080039a8 <_ZN26CConfigurarPantallaMemoria8RefrescaEv>:

void CConfigurarPantallaMemoria::Refresca()
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
	int velocidad=ManejadorControles->GetNivelAire();
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80039b6:	4618      	mov	r0, r3
 80039b8:	f006 fa11 	bl	8009dde <_ZN19CManejadorControles12GetNivelAireEv>
 80039bc:	60f8      	str	r0, [r7, #12]
	if(VelocidadAireInicialPotenciometro>velocidad+1 ||VelocidadAireInicialPotenciometro<velocidad-1)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	3301      	adds	r3, #1
 80039c8:	429a      	cmp	r2, r3
 80039ca:	dc06      	bgt.n	80039da <_ZN26CConfigurarPantallaMemoria8RefrescaEv+0x32>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	3b01      	subs	r3, #1
 80039d6:	429a      	cmp	r2, r3
 80039d8:	da03      	bge.n	80039e2 <_ZN26CConfigurarPantallaMemoria8RefrescaEv+0x3a>
	{
		VelocidadAire =velocidad;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
	}
	MuestraInformacion();
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f862 	bl	8003aac <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv>
}
 80039e8:	bf00      	nop
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <_ZN26CConfigurarPantallaMemoria10SetMemoriaEi>:
void CConfigurarPantallaMemoria::SetMemoria(int numeroMemoria)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
	TemperaturaAnterior=-1;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003a00:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	VelocidadAireAnterior=-1;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f04f 32ff 	mov.w	r2, #4294967295
 8003a0a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	NumeroMemoria=numeroMemoria;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
//	DireccionMemoria=DameDireccionMemoria();
}
 8003a16:	bf00      	nop
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
	...

08003a24 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv>:

void CConfigurarPantallaMemoria::LeeDatosMemoria()
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
	switch(NumeroMemoria)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003a32:	2b03      	cmp	r3, #3
 8003a34:	d024      	beq.n	8003a80 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x5c>
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	dc31      	bgt.n	8003a9e <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x7a>
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d002      	beq.n	8003a44 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x20>
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d00f      	beq.n	8003a62 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x3e>
	case 3:
		Temperatura=Eprom.DameTemperatuarMemoria3();
		VelocidadAire=Eprom.DameVelocidadMemoria3();
		break;
	}
}
 8003a42:	e02c      	b.n	8003a9e <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x7a>
		Temperatura=Eprom.DameTemperatuarMemoria1();
 8003a44:	4818      	ldr	r0, [pc, #96]	@ (8003aa8 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x84>)
 8003a46:	f7fd fdeb 	bl	8001620 <_ZN6CEprom23DameTemperatuarMemoria1Ev>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
		VelocidadAire=Eprom.DameVelocidadMemoria1();
 8003a52:	4815      	ldr	r0, [pc, #84]	@ (8003aa8 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x84>)
 8003a54:	f7fd fdf6 	bl	8001644 <_ZN6CEprom21DameVelocidadMemoria1Ev>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
		break;
 8003a60:	e01d      	b.n	8003a9e <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x7a>
		Temperatura=Eprom.DameTemperatuarMemoria2();
 8003a62:	4811      	ldr	r0, [pc, #68]	@ (8003aa8 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x84>)
 8003a64:	f7fd fe30 	bl	80016c8 <_ZN6CEprom23DameTemperatuarMemoria2Ev>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
		VelocidadAire=Eprom.DameVelocidadMemoria2();
 8003a70:	480d      	ldr	r0, [pc, #52]	@ (8003aa8 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x84>)
 8003a72:	f7fd fe3b 	bl	80016ec <_ZN6CEprom21DameVelocidadMemoria2Ev>
 8003a76:	4602      	mov	r2, r0
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
		break;
 8003a7e:	e00e      	b.n	8003a9e <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x7a>
		Temperatura=Eprom.DameTemperatuarMemoria3();
 8003a80:	4809      	ldr	r0, [pc, #36]	@ (8003aa8 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x84>)
 8003a82:	f7fd fe75 	bl	8001770 <_ZN6CEprom23DameTemperatuarMemoria3Ev>
 8003a86:	4602      	mov	r2, r0
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
		VelocidadAire=Eprom.DameVelocidadMemoria3();
 8003a8e:	4806      	ldr	r0, [pc, #24]	@ (8003aa8 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x84>)
 8003a90:	f7fd fe80 	bl	8001794 <_ZN6CEprom21DameVelocidadMemoria3Ev>
 8003a94:	4602      	mov	r2, r0
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
		break;
 8003a9c:	bf00      	nop
}
 8003a9e:	bf00      	nop
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	20000318 	.word	0x20000318

08003aac <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv>:
void CConfigurarPantallaMemoria::MuestraInformacion()
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]

	if(TemperaturaAnterior!=Temperatura)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d01a      	beq.n	8003afa <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv+0x4e>
	{
		LabelTemperaturas->SetTexto((char*)"%d", Temperatura);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	491d      	ldr	r1, [pc, #116]	@ (8003b48 <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv+0x9c>)
 8003ad4:	f7ff f9d4 	bl	8002e80 <_ZN12CEtiquetaTft8SetTextoEPcz>
		LabelTemperaturas->Show();
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	334c      	adds	r3, #76	@ 0x4c
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4610      	mov	r0, r2
 8003aec:	4798      	blx	r3
		TemperaturaAnterior=Temperatura;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	}

	if( VelocidadAireAnterior!=VelocidadAire)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d01a      	beq.n	8003b40 <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv+0x94>
	{
		LabelAire->SetTexto((char*)"Aire: %d", VelocidadAire);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003b16:	461a      	mov	r2, r3
 8003b18:	490c      	ldr	r1, [pc, #48]	@ (8003b4c <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv+0xa0>)
 8003b1a:	f7ff f9b1 	bl	8002e80 <_ZN12CEtiquetaTft8SetTextoEPcz>
		LabelAire->Show();
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	334c      	adds	r3, #76	@ 0x4c
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4610      	mov	r0, r2
 8003b32:	4798      	blx	r3
		VelocidadAireAnterior=VelocidadAire;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	}
}
 8003b40:	bf00      	nop
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	08014198 	.word	0x08014198
 8003b4c:	0801419c 	.word	0x0801419c

08003b50 <_ZN26CConfigurarPantallaMemoria19OnPerillaIncrementoEv>:
void CConfigurarPantallaMemoria::OnPerillaIncremento()
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
	if(Temperatura<500)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003b5e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003b62:	da06      	bge.n	8003b72 <_ZN26CConfigurarPantallaMemoria19OnPerillaIncrementoEv+0x22>
		Temperatura++;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003b6a:	1c5a      	adds	r2, r3, #1
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8003b72:	bf00      	nop
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <_ZThn48_N26CConfigurarPantallaMemoria19OnPerillaIncrementoEv>:
	virtual void Show();
	virtual void Refresca();
	virtual void SetMemoria(int numeroMemoria);
	virtual void OnPerillaIncremento();
 8003b7e:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8003b82:	f7ff bfe5 	b.w	8003b50 <_ZN26CConfigurarPantallaMemoria19OnPerillaIncrementoEv>

08003b86 <_ZN26CConfigurarPantallaMemoria19OnPerillaDecrementoEv>:
void CConfigurarPantallaMemoria::OnPerillaDecremento()
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
	if(Temperatura>0)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	dd06      	ble.n	8003ba6 <_ZN26CConfigurarPantallaMemoria19OnPerillaDecrementoEv+0x20>
		Temperatura--;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003b9e:	1e5a      	subs	r2, r3, #1
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <_ZThn48_N26CConfigurarPantallaMemoria19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 8003bb2:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8003bb6:	f7ff bfe6 	b.w	8003b86 <_ZN26CConfigurarPantallaMemoria19OnPerillaDecrementoEv>
	...

08003bbc <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv>:
void CConfigurarPantallaMemoria::OnBotonUnoClickEvent()
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
	switch(NumeroMemoria)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003bca:	2b03      	cmp	r3, #3
 8003bcc:	d01c      	beq.n	8003c08 <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x4c>
 8003bce:	2b03      	cmp	r3, #3
 8003bd0:	dc25      	bgt.n	8003c1e <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x62>
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d002      	beq.n	8003bdc <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x20>
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d00b      	beq.n	8003bf2 <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x36>
 8003bda:	e020      	b.n	8003c1e <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x62>
	{
	case 1:
		Eprom.GuardaMemoria1(Temperatura, VelocidadAire);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003be8:	461a      	mov	r2, r3
 8003bea:	4810      	ldr	r0, [pc, #64]	@ (8003c2c <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x70>)
 8003bec:	f7fd fd3c 	bl	8001668 <_ZN6CEprom14GuardaMemoria1Eii>
		break;
 8003bf0:	e015      	b.n	8003c1e <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x62>
	case 2:
		Eprom.GuardaMemoria2(Temperatura, VelocidadAire);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003bfe:	461a      	mov	r2, r3
 8003c00:	480a      	ldr	r0, [pc, #40]	@ (8003c2c <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x70>)
 8003c02:	f7fd fd85 	bl	8001710 <_ZN6CEprom14GuardaMemoria2Eii>
		break;
 8003c06:	e00a      	b.n	8003c1e <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x62>
	case 3:
		Eprom.GuardaMemoria3(Temperatura, VelocidadAire);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003c14:	461a      	mov	r2, r3
 8003c16:	4805      	ldr	r0, [pc, #20]	@ (8003c2c <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x70>)
 8003c18:	f7fd fdce 	bl	80017b8 <_ZN6CEprom14GuardaMemoria3Eii>
		break;
 8003c1c:	bf00      	nop
	}
	 ManejadorPantallas.MuestraMenuPrincipal();
 8003c1e:	4804      	ldr	r0, [pc, #16]	@ (8003c30 <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x74>)
 8003c20:	f000 f892 	bl	8003d48 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>
}
 8003c24:	bf00      	nop
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	20000318 	.word	0x20000318
 8003c30:	20000258 	.word	0x20000258

08003c34 <_ZThn48_N26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv>:
	virtual void OnBotonUnoClickEvent();
 8003c34:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8003c38:	f7ff bfc0 	b.w	8003bbc <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv>

08003c3c <_ZN26CConfigurarPantallaMemoria21OnBotonTresClickEventEv>:
void CConfigurarPantallaMemoria::OnBotonTresClickEvent()
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
	 ManejadorPantallas.MuestraMenuPrincipal();
 8003c44:	4803      	ldr	r0, [pc, #12]	@ (8003c54 <_ZN26CConfigurarPantallaMemoria21OnBotonTresClickEventEv+0x18>)
 8003c46:	f000 f87f 	bl	8003d48 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>

}
 8003c4a:	bf00      	nop
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	20000258 	.word	0x20000258

08003c58 <_ZThn48_N26CConfigurarPantallaMemoria21OnBotonTresClickEventEv>:
	virtual void OnBotonTresClickEvent();
 8003c58:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8003c5c:	f7ff bfee 	b.w	8003c3c <_ZN26CConfigurarPantallaMemoria21OnBotonTresClickEventEv>

08003c60 <_ZN19CManejadorPantallasC1Ev>:
#include<string.h>
#include <GUI/ConfigurarPantallaMemoria/CConfigurarPantallaMemoria.hpp>
#include <GUI/Rampa/PantallaEditorNombre/CPantallaEditorNombre.hpp>
#include <GUI/Rampa/PantallaEliminarRampa/CPantallaEliminarRampa.hpp>

CManejadorPantallas::CManejadorPantallas()
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	4a11      	ldr	r2, [pc, #68]	@ (8003cb0 <_ZN19CManejadorPantallasC1Ev+0x50>)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	605a      	str	r2, [r3, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	609a      	str	r2, [r3, #8]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	60da      	str	r2, [r3, #12]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	611a      	str	r2, [r3, #16]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	615a      	str	r2, [r3, #20]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	619a      	str	r2, [r3, #24]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	61da      	str	r2, [r3, #28]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
{
	// TODO Auto-generated constructor stub
}
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	08014a3c 	.word	0x08014a3c

08003cb4 <_ZN19CManejadorPantallasD1Ev>:

CManejadorPantallas::~CManejadorPantallas()
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	4a04      	ldr	r2, [pc, #16]	@ (8003cd0 <_ZN19CManejadorPantallasD1Ev+0x1c>)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr
 8003cd0:	08014a3c 	.word	0x08014a3c

08003cd4 <_ZN19CManejadorPantallasD0Ev>:
CManejadorPantallas::~CManejadorPantallas()
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
}
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7ff ffe9 	bl	8003cb4 <_ZN19CManejadorPantallasD1Ev>
 8003ce2:	21bc      	movs	r1, #188	@ 0xbc
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f00d fb97 	bl	8011418 <_ZdlPvj>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4618      	mov	r0, r3
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <_ZN19CManejadorPantallas11SetEstacionEP13CEstacionBase>:
void CManejadorPantallas::SetEstacion(CEstacionBase* estacion)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
	Estacion=estacion;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	605a      	str	r2, [r3, #4]
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>:
void CManejadorPantallas::MuestraPantallaManual()
{
 8003d10:	b590      	push	{r4, r7, lr}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
	if(pantallaManual==NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d109      	bne.n	8003d34 <_ZN19CManejadorPantallas21MuestraPantallaManualEv+0x24>
		pantallaManual=new CPantallaManual();
 8003d20:	20ec      	movs	r0, #236	@ 0xec
 8003d22:	f00d fb7b 	bl	801141c <_Znwj>
 8003d26:	4603      	mov	r3, r0
 8003d28:	461c      	mov	r4, r3
 8003d2a:	4620      	mov	r0, r4
 8003d2c:	f001 fd36 	bl	800579c <_ZN15CPantallaManualC1Ev>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	615c      	str	r4, [r3, #20]
	AsignaPantallaActual(pantallaManual);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	4619      	mov	r1, r3
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f850 	bl	8003de0 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd90      	pop	{r4, r7, pc}

08003d48 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>:
void CManejadorPantallas::MuestraMenuPrincipal()
{
 8003d48:	b590      	push	{r4, r7, lr}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
	if(menuPrincipal==NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d109      	bne.n	8003d6c <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv+0x24>
		menuPrincipal=new CMenuPrincipal();
 8003d58:	20c0      	movs	r0, #192	@ 0xc0
 8003d5a:	f00d fb5f 	bl	801141c <_Znwj>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	461c      	mov	r4, r3
 8003d62:	4620      	mov	r0, r4
 8003d64:	f002 fc50 	bl	8006608 <_ZN14CMenuPrincipalC1Ev>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	619c      	str	r4, [r3, #24]
	AsignaPantallaActual(menuPrincipal);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	4619      	mov	r1, r3
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f834 	bl	8003de0 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd90      	pop	{r4, r7, pc}

08003d80 <_ZN19CManejadorPantallas16MuestraMenuRampaEv>:

void CManejadorPantallas::MuestraMenuRampa()
{
 8003d80:	b590      	push	{r4, r7, lr}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
	if(menuRampa==NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d109      	bne.n	8003da4 <_ZN19CManejadorPantallas16MuestraMenuRampaEv+0x24>
		menuRampa=new CPantallaMenuRampa();
 8003d90:	20c0      	movs	r0, #192	@ 0xc0
 8003d92:	f00d fb43 	bl	801141c <_Znwj>
 8003d96:	4603      	mov	r3, r0
 8003d98:	461c      	mov	r4, r3
 8003d9a:	4620      	mov	r0, r4
 8003d9c:	f004 fc4c 	bl	8008638 <_ZN18CPantallaMenuRampaC1Ev>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	61dc      	str	r4, [r3, #28]
	AsignaPantallaActual(menuRampa);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	4619      	mov	r1, r3
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f818 	bl	8003de0 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd90      	pop	{r4, r7, pc}

08003db8 <_ZN19CManejadorPantallas16RefrescaPantallaEv>:
void CManejadorPantallas::RefrescaPantalla()
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
	CambiaPantalla();
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 f826 	bl	8003e12 <_ZN19CManejadorPantallas14CambiaPantallaEv>
	PantallaActual->Refresca();
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68da      	ldr	r2, [r3, #12]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	3358      	adds	r3, #88	@ 0x58
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4610      	mov	r0, r2
 8003dd6:	4798      	blx	r3
}
 8003dd8:	bf00      	nop
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>:
void CManejadorPantallas::AsignaPantallaActual(CPantallaBase* pantalla)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
	PantallaPendinteCambiar=pantalla;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	609a      	str	r2, [r3, #8]
	CambioPantalla=true;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
	PantallaPendinteCambiar->Seleccionada();
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	3374      	adds	r3, #116	@ 0x74
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4610      	mov	r0, r2
 8003e08:	4798      	blx	r3
}
 8003e0a:	bf00      	nop
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <_ZN19CManejadorPantallas14CambiaPantallaEv>:
void CManejadorPantallas::CambiaPantalla()
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b082      	sub	sp, #8
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
	if(	CambioPantalla==false)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d038      	beq.n	8003e96 <_ZN19CManejadorPantallas14CambiaPantallaEv+0x84>
		return;
	if(PantallaActual!=NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00c      	beq.n	8003e46 <_ZN19CManejadorPantallas14CambiaPantallaEv+0x34>
	{
		PantallaActual->Ocultar();
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3364      	adds	r3, #100	@ 0x64
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4610      	mov	r0, r2
 8003e3c:	4798      	blx	r3
		PantallaAnterior=PantallaActual;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	611a      	str	r2, [r3, #16]
	}
	PantallaActual=PantallaPendinteCambiar;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	689a      	ldr	r2, [r3, #8]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	60da      	str	r2, [r3, #12]
	PantallaActual->SetEstacion(Estacion);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68d8      	ldr	r0, [r3, #12]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	335c      	adds	r3, #92	@ 0x5c
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	6852      	ldr	r2, [r2, #4]
 8003e60:	4611      	mov	r1, r2
 8003e62:	4798      	blx	r3
	PantallaActual->SetManejadorControles(ManejadorControles);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68d8      	ldr	r0, [r3, #12]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3360      	adds	r3, #96	@ 0x60
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6a12      	ldr	r2, [r2, #32]
 8003e76:	4611      	mov	r1, r2
 8003e78:	4798      	blx	r3
	PantallaActual->Show();
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68da      	ldr	r2, [r3, #12]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	334c      	adds	r3, #76	@ 0x4c
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4610      	mov	r0, r2
 8003e8a:	4798      	blx	r3
	CambioPantalla=false;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8003e94:	e000      	b.n	8003e98 <_ZN19CManejadorPantallas14CambiaPantallaEv+0x86>
		return;
 8003e96:	bf00      	nop
}
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <_ZN19CManejadorPantallas21SetManejadorControlesEP19CManejadorControles>:

void CManejadorPantallas::SetManejadorControles(CManejadorControles* manejador)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b083      	sub	sp, #12
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
 8003ea6:	6039      	str	r1, [r7, #0]
	ManejadorControles=manejador;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	621a      	str	r2, [r3, #32]
}
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <_ZN19CManejadorPantallas35MuestraPantallaConfiguracionMemoriaEi>:

void CManejadorPantallas::MuestraPantallaConfiguracionMemoria(int meoria)
{
 8003eba:	b590      	push	{r4, r7, lr}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
 8003ec2:	6039      	str	r1, [r7, #0]
	if(ConfigurarPantallaMemoria==NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d109      	bne.n	8003ee0 <_ZN19CManejadorPantallas35MuestraPantallaConfiguracionMemoriaEi+0x26>
		ConfigurarPantallaMemoria=new CConfigurarPantallaMemoria();
 8003ecc:	20dc      	movs	r0, #220	@ 0xdc
 8003ece:	f00d faa5 	bl	801141c <_Znwj>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	461c      	mov	r4, r3
 8003ed6:	4620      	mov	r0, r4
 8003ed8:	f7ff fbf4 	bl	80036c4 <_ZN26CConfigurarPantallaMemoriaC1Ev>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	625c      	str	r4, [r3, #36]	@ 0x24
	ConfigurarPantallaMemoria->SetMemoria(meoria);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3378      	adds	r3, #120	@ 0x78
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6839      	ldr	r1, [r7, #0]
 8003ef0:	4610      	mov	r0, r2
 8003ef2:	4798      	blx	r3
	AsignaPantallaActual(ConfigurarPantallaMemoria);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef8:	4619      	mov	r1, r3
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7ff ff70 	bl	8003de0 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd90      	pop	{r4, r7, pc}

08003f08 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>:
void CManejadorPantallas::MuestraPantallaMemoria(int memoria)
{
 8003f08:	b590      	push	{r4, r7, lr}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
	if(PantallaMemoria==NULL)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10a      	bne.n	8003f30 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi+0x28>
		PantallaMemoria=new CPantallaMemoria();
 8003f1a:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8003f1e:	f00d fa7d 	bl	801141c <_Znwj>
 8003f22:	4603      	mov	r3, r0
 8003f24:	461c      	mov	r4, r3
 8003f26:	4620      	mov	r0, r4
 8003f28:	f002 f834 	bl	8005f94 <_ZN16CPantallaMemoriaC1Ev>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	629c      	str	r4, [r3, #40]	@ 0x28
	PantallaMemoria->SetMemoria(memoria);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f34:	6839      	ldr	r1, [r7, #0]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f002 f908 	bl	800614c <_ZN16CPantallaMemoria10SetMemoriaEi>
	AsignaPantallaActual(PantallaMemoria);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f40:	4619      	mov	r1, r3
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7ff ff4c 	bl	8003de0 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>

}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd90      	pop	{r4, r7, pc}

08003f50 <_ZN19CManejadorPantallas27MuestraCPantallaCalibracionEv>:
	if(PantallaAnterior==NULL)
		return;
	AsignaPantallaActual(PantallaAnterior);
}
void CManejadorPantallas::MuestraCPantallaCalibracion()
{
 8003f50:	b590      	push	{r4, r7, lr}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
	if(PantallaCalibracion==NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d109      	bne.n	8003f74 <_ZN19CManejadorPantallas27MuestraCPantallaCalibracionEv+0x24>
		PantallaCalibracion=new CPantallaCalibracion();
 8003f60:	20ec      	movs	r0, #236	@ 0xec
 8003f62:	f00d fa5b 	bl	801141c <_Znwj>
 8003f66:	4603      	mov	r3, r0
 8003f68:	461c      	mov	r4, r3
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	f000 feac 	bl	8004cc8 <_ZN20CPantallaCalibracionC1Ev>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	62dc      	str	r4, [r3, #44]	@ 0x2c
	AsignaPantallaActual(PantallaCalibracion);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f78:	4619      	mov	r1, r3
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7ff ff30 	bl	8003de0 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd90      	pop	{r4, r7, pc}

08003f88 <_ZN19CManejadorPantallas20MuestraPantallaRampaEi>:
void CManejadorPantallas::MuestraPantallaRampa(int nrampa)
{
 8003f88:	b590      	push	{r4, r7, lr}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
	if(PantallaRampa==NULL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d109      	bne.n	8003fae <_ZN19CManejadorPantallas20MuestraPantallaRampaEi+0x26>
		PantallaRampa=new CPantallaRampa();
 8003f9a:	20b8      	movs	r0, #184	@ 0xb8
 8003f9c:	f00d fa3e 	bl	801141c <_Znwj>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	461c      	mov	r4, r3
 8003fa4:	4620      	mov	r0, r4
 8003fa6:	f004 fe75 	bl	8008c94 <_ZN14CPantallaRampaC1Ev>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	631c      	str	r4, [r3, #48]	@ 0x30
	PantallaRampa->SetNumeroRampa(nrampa);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb2:	6839      	ldr	r1, [r7, #0]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f004 fef3 	bl	8008da0 <_ZN14CPantallaRampa14SetNumeroRampaEi>
	AsignaPantallaActual(PantallaRampa);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7ff ff0d 	bl	8003de0 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>

}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd90      	pop	{r4, r7, pc}

08003fce <_ZN19CManejadorPantallas32MuestraPantallaInicializaMemoriaEv>:
void CManejadorPantallas::MuestraPantallaInicializaMemoria()
{
 8003fce:	b590      	push	{r4, r7, lr}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
	if(PantallaInicializaMemoria==NULL)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d109      	bne.n	8003ff2 <_ZN19CManejadorPantallas32MuestraPantallaInicializaMemoriaEv+0x24>
		PantallaInicializaMemoria=new CPantallaInicializaMemoria();
 8003fde:	20b4      	movs	r0, #180	@ 0xb4
 8003fe0:	f00d fa1c 	bl	801141c <_Znwj>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	461c      	mov	r4, r3
 8003fe8:	4620      	mov	r0, r4
 8003fea:	f001 faaf 	bl	800554c <_ZN26CPantallaInicializaMemoriaC1Ev>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	635c      	str	r4, [r3, #52]	@ 0x34
	AsignaPantallaActual(PantallaInicializaMemoria);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7ff fef1 	bl	8003de0 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	bd90      	pop	{r4, r7, pc}

08004006 <_ZN19CManejadorPantallas27MuestraPantallaEditorNombreEi>:
void CManejadorPantallas::MuestraPantallaEditorNombre(int id_Rampa)
{
 8004006:	b590      	push	{r4, r7, lr}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	6039      	str	r1, [r7, #0]
	if(PantallaEditorNombre==NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10a      	bne.n	800402e <_ZN19CManejadorPantallas27MuestraPantallaEditorNombreEi+0x28>
		PantallaEditorNombre=new CPantallaEditorNombre(id_Rampa);
 8004018:	20dc      	movs	r0, #220	@ 0xdc
 800401a:	f00d f9ff 	bl	801141c <_Znwj>
 800401e:	4603      	mov	r3, r0
 8004020:	461c      	mov	r4, r3
 8004022:	6839      	ldr	r1, [r7, #0]
 8004024:	4620      	mov	r0, r4
 8004026:	f003 f8f5 	bl	8007214 <_ZN21CPantallaEditorNombreC1Ei>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	639c      	str	r4, [r3, #56]	@ 0x38
	PantallaEditorNombre->AsignaID(id_Rampa);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004032:	6839      	ldr	r1, [r7, #0]
 8004034:	4618      	mov	r0, r3
 8004036:	f003 fd7b 	bl	8007b30 <_ZN21CPantallaEditorNombre8AsignaIDEi>
	AsignaPantallaActual(PantallaEditorNombre);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800403e:	4619      	mov	r1, r3
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7ff fecd 	bl	8003de0 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 8004046:	bf00      	nop
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	bd90      	pop	{r4, r7, pc}

0800404e <_ZN19CManejadorPantallas24AsignaPantallaPasosRampaEi>:
void CManejadorPantallas::AsignaPantallaPasosRampa(int id_rampa)
{
 800404e:	b590      	push	{r4, r7, lr}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
 8004056:	6039      	str	r1, [r7, #0]
	if(PantallaPasosRampa==NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10a      	bne.n	8004076 <_ZN19CManejadorPantallas24AsignaPantallaPasosRampaEi+0x28>
		PantallaPasosRampa=new CPantallaPasosRampa(id_rampa);
 8004060:	20c4      	movs	r0, #196	@ 0xc4
 8004062:	f00d f9db 	bl	801141c <_Znwj>
 8004066:	4603      	mov	r3, r0
 8004068:	461c      	mov	r4, r3
 800406a:	6839      	ldr	r1, [r7, #0]
 800406c:	4620      	mov	r0, r4
 800406e:	f004 fcc5 	bl	80089fc <_ZN19CPantallaPasosRampaC1Ei>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	63dc      	str	r4, [r3, #60]	@ 0x3c
	PantallaPasosRampa->SetIDRampa(id_rampa);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	3394      	adds	r3, #148	@ 0x94
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6839      	ldr	r1, [r7, #0]
 8004086:	4610      	mov	r0, r2
 8004088:	4798      	blx	r3
	AsignaPantallaActual(PantallaPasosRampa);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800408e:	4619      	mov	r1, r3
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7ff fea5 	bl	8003de0 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>

}
 8004096:	bf00      	nop
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	bd90      	pop	{r4, r7, pc}

0800409e <_ZN19CManejadorPantallas28MuestraPantallaEliminarRampaEi>:
void CManejadorPantallas::MuestraPantallaEliminarRampa(int id_rampa)
{
 800409e:	b590      	push	{r4, r7, lr}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
 80040a6:	6039      	str	r1, [r7, #0]
	if(PantallaEliminarRampa==NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d109      	bne.n	80040c4 <_ZN19CManejadorPantallas28MuestraPantallaEliminarRampaEi+0x26>
		PantallaEliminarRampa=new CPantallaEliminarRampa();
 80040b0:	20dc      	movs	r0, #220	@ 0xdc
 80040b2:	f00d f9b3 	bl	801141c <_Znwj>
 80040b6:	4603      	mov	r3, r0
 80040b8:	461c      	mov	r4, r3
 80040ba:	4620      	mov	r0, r4
 80040bc:	f004 f978 	bl	80083b0 <_ZN22CPantallaEliminarRampaC1Ev>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	641c      	str	r4, [r3, #64]	@ 0x40
	PantallaEliminarRampa->SetIdRampa(id_rampa);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	3380      	adds	r3, #128	@ 0x80
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6839      	ldr	r1, [r7, #0]
 80040d4:	4610      	mov	r0, r2
 80040d6:	4798      	blx	r3
	AsignaPantallaActual(PantallaEliminarRampa);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040dc:	4619      	mov	r1, r3
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7ff fe7e 	bl	8003de0 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>

}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd90      	pop	{r4, r7, pc}

080040ec <_ZN19CManejadorPantallas26MuestraPantallaEdicionPasoEii>:
void CManejadorPantallas::MuestraPantallaEdicionPaso(int id_rampa,int id_paso)
{
 80040ec:	b590      	push	{r4, r7, lr}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
	if(PantallaEdicionPaso==NULL)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d109      	bne.n	8004114 <_ZN19CManejadorPantallas26MuestraPantallaEdicionPasoEii+0x28>
		PantallaEdicionPaso=new CPantallaEdicionPaso();
 8004100:	20f8      	movs	r0, #248	@ 0xf8
 8004102:	f00d f98b 	bl	801141c <_Znwj>
 8004106:	4603      	mov	r3, r0
 8004108:	461c      	mov	r4, r3
 800410a:	4620      	mov	r0, r4
 800410c:	f002 fb86 	bl	800681c <_ZN20CPantallaEdicionPasoC1Ev>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	645c      	str	r4, [r3, #68]	@ 0x44
	PantallaEdicionPaso->SetIdPaso(id_rampa,id_paso);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	68b9      	ldr	r1, [r7, #8]
 800411c:	4618      	mov	r0, r3
 800411e:	f002 fd01 	bl	8006b24 <_ZN20CPantallaEdicionPaso9SetIdPasoEii>
	AsignaPantallaActual(PantallaEdicionPaso);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004126:	4619      	mov	r1, r3
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f7ff fe59 	bl	8003de0 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 800412e:	bf00      	nop
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	bd90      	pop	{r4, r7, pc}

08004136 <_ZN19CManejadorPantallas19MuestraPantallaPasoEii>:
void CManejadorPantallas::MuestraPantallaPaso(int id_rampa,int id_paso)
{
 8004136:	b590      	push	{r4, r7, lr}
 8004138:	b085      	sub	sp, #20
 800413a:	af00      	add	r7, sp, #0
 800413c:	60f8      	str	r0, [r7, #12]
 800413e:	60b9      	str	r1, [r7, #8]
 8004140:	607a      	str	r2, [r7, #4]
	if(PantallaPaso==NULL)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004146:	2b00      	cmp	r3, #0
 8004148:	d109      	bne.n	800415e <_ZN19CManejadorPantallas19MuestraPantallaPasoEii+0x28>
		PantallaPaso=new CPantallaPaso();
 800414a:	20bc      	movs	r0, #188	@ 0xbc
 800414c:	f00d f966 	bl	801141c <_Znwj>
 8004150:	4603      	mov	r3, r0
 8004152:	461c      	mov	r4, r3
 8004154:	4620      	mov	r0, r4
 8004156:	f004 fb8d 	bl	8008874 <_ZN13CPantallaPasoC1Ev>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	649c      	str	r4, [r3, #72]	@ 0x48
	PantallaPaso->SetIdPaso(id_rampa,id_paso);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	68b9      	ldr	r1, [r7, #8]
 8004166:	4618      	mov	r0, r3
 8004168:	f004 fbfa 	bl	8008960 <_ZN13CPantallaPaso9SetIdPasoEii>
	AsignaPantallaActual(PantallaPaso);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004170:	4619      	mov	r1, r3
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f7ff fe34 	bl	8003de0 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 8004178:	bf00      	nop
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	bd90      	pop	{r4, r7, pc}

08004180 <_ZN19CManejadorPantallas27MuestraPantallaEliminarPasoEii>:
void CManejadorPantallas::MuestraPantallaEliminarPaso(int id_rampa,int id_paso)
{
 8004180:	b590      	push	{r4, r7, lr}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
	if(PantallaEliminarPaso==NULL)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004190:	2b00      	cmp	r3, #0
 8004192:	d109      	bne.n	80041a8 <_ZN19CManejadorPantallas27MuestraPantallaEliminarPasoEii+0x28>
		PantallaEliminarPaso=new CPantallaEliminarPaso();
 8004194:	20e0      	movs	r0, #224	@ 0xe0
 8004196:	f00d f941 	bl	801141c <_Znwj>
 800419a:	4603      	mov	r3, r0
 800419c:	461c      	mov	r4, r3
 800419e:	4620      	mov	r0, r4
 80041a0:	f003 ffd4 	bl	800814c <_ZN21CPantallaEliminarPasoC1Ev>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	64dc      	str	r4, [r3, #76]	@ 0x4c
	PantallaEliminarPaso->SetIdPaso(id_rampa,id_paso);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	3380      	adds	r3, #128	@ 0x80
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	68b9      	ldr	r1, [r7, #8]
 80041ba:	4798      	blx	r3
	AsignaPantallaActual(PantallaEliminarPaso);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041c0:	4619      	mov	r1, r3
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f7ff fe0c 	bl	8003de0 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 80041c8:	bf00      	nop
 80041ca:	3714      	adds	r7, #20
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd90      	pop	{r4, r7, pc}

080041d0 <_ZN19CManejadorPantallas29MuestraPantallaEjecucionRampaEi>:
void CManejadorPantallas::MuestraPantallaEjecucionRampa(int id_rampa)
{
 80041d0:	b590      	push	{r4, r7, lr}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
	if(PantallaEjecucionRampa==NULL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10a      	bne.n	80041f8 <_ZN19CManejadorPantallas29MuestraPantallaEjecucionRampaEi+0x28>
		PantallaEjecucionRampa=new CPantallaEjecucionRampa();
 80041e2:	f44f 701a 	mov.w	r0, #616	@ 0x268
 80041e6:	f00d f919 	bl	801141c <_Znwj>
 80041ea:	4603      	mov	r3, r0
 80041ec:	461c      	mov	r4, r3
 80041ee:	4620      	mov	r0, r4
 80041f0:	f003 fd8c 	bl	8007d0c <_ZN23CPantallaEjecucionRampaC1Ev>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	651c      	str	r4, [r3, #80]	@ 0x50
	PantallaEjecucionRampa->SetIDRampa(id_rampa);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041fc:	6839      	ldr	r1, [r7, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f003 fe9e 	bl	8007f40 <_ZN23CPantallaEjecucionRampa10SetIDRampaEi>
	AsignaPantallaActual(PantallaEjecucionRampa);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004208:	4619      	mov	r1, r3
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7ff fde8 	bl	8003de0 <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	bd90      	pop	{r4, r7, pc}

08004218 <_ZN20CManejadorEventoMenuC1Ev>:
 *      Author: W10
 */

#include <GUI/Menu/CManejadorEventoMenu.hpp>

CManejadorEventoMenu::CManejadorEventoMenu()
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	4a04      	ldr	r2, [pc, #16]	@ (8004234 <_ZN20CManejadorEventoMenuC1Ev+0x1c>)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4618      	mov	r0, r3
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	08014a4c 	.word	0x08014a4c

08004238 <_ZN20CManejadorEventoMenuD1Ev>:

CManejadorEventoMenu::~CManejadorEventoMenu()
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	4a04      	ldr	r2, [pc, #16]	@ (8004254 <_ZN20CManejadorEventoMenuD1Ev+0x1c>)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4618      	mov	r0, r3
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	08014a4c 	.word	0x08014a4c

08004258 <_ZN20CManejadorEventoMenuD0Ev>:
CManejadorEventoMenu::~CManejadorEventoMenu()
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
}
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f7ff ffe9 	bl	8004238 <_ZN20CManejadorEventoMenuD1Ev>
 8004266:	2104      	movs	r1, #4
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f00d f8d5 	bl	8011418 <_ZdlPvj>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4618      	mov	r0, r3
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <_ZN20CManejadorEventoMenu11OnMenuEventEi>:

void CManejadorEventoMenu::OnMenuEvent(int identificador)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]

}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
	...

08004290 <_ZN5CMenuC1Eiiiiiii>:
 */

#include <GUI/Menu/CMenu.hpp>
#include "GUI/CRectanguloTft.hpp"

CMenu::CMenu(int xi, int yi, int ancho, int alto,int backColor, int contorno, int colorContorno):
 8004290:	b580      	push	{r7, lr}
 8004292:	b088      	sub	sp, #32
 8004294:	af04      	add	r7, sp, #16
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
 800429c:	603b      	str	r3, [r7, #0]
	CRectanguloTft(xi,yi,ancho,alto,backColor,contorno,colorContorno)
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a2:	9303      	str	r3, [sp, #12]
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	9302      	str	r3, [sp, #8]
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	9301      	str	r3, [sp, #4]
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	68b9      	ldr	r1, [r7, #8]
 80042b6:	f7ff f92d 	bl	8003514 <_ZN14CRectanguloTftC1Eiiiiiii>
 80042ba:	4a0c      	ldr	r2, [pc, #48]	@ (80042ec <_ZN5CMenuC1Eiiiiiii+0x5c>)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2219      	movs	r2, #25
 80042c4:	651a      	str	r2, [r3, #80]	@ 0x50
{
	// TODO Auto-generated constructor stub
	Opciones=NULL;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	631a      	str	r2, [r3, #48]	@ 0x30
	ItemInicial=NULL;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	635a      	str	r2, [r3, #52]	@ 0x34
	ItemsXPagina=alto/(AnchoItem+5);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042d6:	3305      	adds	r3, #5
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	fb92 f2f3 	sdiv	r2, r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	08014a60 	.word	0x08014a60

080042f0 <_ZN5CMenuD1Ev>:

CMenu::~CMenu()
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	4a05      	ldr	r2, [pc, #20]	@ (8004310 <_ZN5CMenuD1Ev+0x20>)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4618      	mov	r0, r3
 8004302:	f7ff f8e5 	bl	80034d0 <_ZN14CRectanguloTftD1Ev>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4618      	mov	r0, r3
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	08014a60 	.word	0x08014a60

08004314 <_ZN5CMenuD0Ev>:
CMenu::~CMenu()
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
}
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f7ff ffe7 	bl	80042f0 <_ZN5CMenuD1Ev>
 8004322:	2180      	movs	r1, #128	@ 0x80
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f00d f877 	bl	8011418 <_ZdlPvj>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4618      	mov	r0, r3
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <_ZN5CMenu4ShowEv>:

void CMenu::Show()
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
//	int y;
	CRectanguloTft::Show();
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff f91a 	bl	8003578 <_ZN14CRectanguloTft4ShowEv>
	CMenuItem* tmp=ItemInicial;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004348:	60fb      	str	r3, [r7, #12]
	while(tmp!=NULL)
 800434a:	e012      	b.n	8004372 <_ZN5CMenu4ShowEv+0x3e>
	{
//		y=tmp->DamePosicionY()+tmp->DameAltura();
		//Si cabe en altura, lo muestro
		if(SePuedeMostrar(tmp)==false)
 800434c:	68f9      	ldr	r1, [r7, #12]
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f8c4 	bl	80044dc <_ZN5CMenu14SePuedeMostrarEP9CMenuItem>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	bf0c      	ite	eq
 800435a:	2301      	moveq	r3, #1
 800435c:	2300      	movne	r3, #0
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10a      	bne.n	800437a <_ZN5CMenu4ShowEv+0x46>
		{
			return;
		}
		tmp->Show();
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f000 fbd2 	bl	8004b0e <_ZN9CMenuItem4ShowEv>
		tmp=tmp->DameSiguiente();
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f000 fc5e 	bl	8004c2c <_ZN9CMenuItem13DameSiguienteEv>
 8004370:	60f8      	str	r0, [r7, #12]
	while(tmp!=NULL)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1e9      	bne.n	800434c <_ZN5CMenu4ShowEv+0x18>
 8004378:	e000      	b.n	800437c <_ZN5CMenu4ShowEv+0x48>
			return;
 800437a:	bf00      	nop
	}
}
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <_ZN5CMenu18AsignaColoresItemsEiiii>:

void CMenu::AsignaColoresItems(int colorTexto, int colorFondo, int colorTextoResaltado, int solorFondoResaltado)
{
 8004382:	b480      	push	{r7}
 8004384:	b085      	sub	sp, #20
 8004386:	af00      	add	r7, sp, #0
 8004388:	60f8      	str	r0, [r7, #12]
 800438a:	60b9      	str	r1, [r7, #8]
 800438c:	607a      	str	r2, [r7, #4]
 800438e:	603b      	str	r3, [r7, #0]
	ColorTexto=colorTexto;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	63da      	str	r2, [r3, #60]	@ 0x3c
	ColorFondo=colorFondo;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	641a      	str	r2, [r3, #64]	@ 0x40
	ColoTextoSeleccionado=colorTextoResaltado;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	645a      	str	r2, [r3, #68]	@ 0x44
	ColorFondoSeleccionado=solorFondoResaltado;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80043a8:	bf00      	nop
 80043aa:	3714      	adds	r7, #20
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <_ZN5CMenu8CreaItemEPcib>:

CMenuItem* CMenu::CreaItem(char* texto, int identificador,bool seleccionado)
{
 80043b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043b6:	b091      	sub	sp, #68	@ 0x44
 80043b8:	af08      	add	r7, sp, #32
 80043ba:	6178      	str	r0, [r7, #20]
 80043bc:	6139      	str	r1, [r7, #16]
 80043be:	60fa      	str	r2, [r7, #12]
 80043c0:	72fb      	strb	r3, [r7, #11]
	CEtiquetaTft* etiquetaTmp=new CEtiquetaTft(Xi, Yi, Ancho, AnchoItem, ColorFondo,texto, ColorTexto, 3, 0, ColorFondo);
 80043c2:	20a4      	movs	r0, #164	@ 0xa4
 80043c4:	f00d f82a 	bl	801141c <_Znwj>
 80043c8:	4603      	mov	r3, r0
 80043ca:	461c      	mov	r4, r3
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	699d      	ldr	r5, [r3, #24]
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	69de      	ldr	r6, [r3, #28]
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	607b      	str	r3, [r7, #4]
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80043e2:	6979      	ldr	r1, [r7, #20]
 80043e4:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 80043e6:	6978      	ldr	r0, [r7, #20]
 80043e8:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 80043ea:	9006      	str	r0, [sp, #24]
 80043ec:	2000      	movs	r0, #0
 80043ee:	9005      	str	r0, [sp, #20]
 80043f0:	2003      	movs	r0, #3
 80043f2:	9004      	str	r0, [sp, #16]
 80043f4:	9103      	str	r1, [sp, #12]
 80043f6:	6939      	ldr	r1, [r7, #16]
 80043f8:	9102      	str	r1, [sp, #8]
 80043fa:	9201      	str	r2, [sp, #4]
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4632      	mov	r2, r6
 8004402:	4629      	mov	r1, r5
 8004404:	4620      	mov	r0, r4
 8004406:	f7fe fd01 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 800440a:	61fc      	str	r4, [r7, #28]
	CMenuItem* tmp=new CMenuItem(etiquetaTmp,identificador,seleccionado);
 800440c:	2028      	movs	r0, #40	@ 0x28
 800440e:	f00d f805 	bl	801141c <_Znwj>
 8004412:	4603      	mov	r3, r0
 8004414:	461c      	mov	r4, r3
 8004416:	7afb      	ldrb	r3, [r7, #11]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	69f9      	ldr	r1, [r7, #28]
 800441c:	4620      	mov	r0, r4
 800441e:	f000 fb0d 	bl	8004a3c <_ZN9CMenuItemC1EP12CEtiquetaTftib>
 8004422:	61bc      	str	r4, [r7, #24]
	tmp->AsignaColores(ColorTexto, ColorFondo, ColoTextoSeleccionado, ColorFondoSeleccionado);
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	4603      	mov	r3, r0
 8004438:	69b8      	ldr	r0, [r7, #24]
 800443a:	f000 fb9f 	bl	8004b7c <_ZN9CMenuItem13AsignaColoresEiiii>
	return tmp;
 800443e:	69bb      	ldr	r3, [r7, #24]
}
 8004440:	4618      	mov	r0, r3
 8004442:	3724      	adds	r7, #36	@ 0x24
 8004444:	46bd      	mov	sp, r7
 8004446:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004448 <_ZN5CMenu10AgregaItemEPcib>:

void CMenu::AgregaItem(char* texto, int identificador,bool seleccionado)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
 8004454:	70fb      	strb	r3, [r7, #3]
	CMenuItem* tmp=CreaItem(texto,identificador,seleccionado);
 8004456:	78fb      	ldrb	r3, [r7, #3]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	68b9      	ldr	r1, [r7, #8]
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f7ff ffa9 	bl	80043b4 <_ZN5CMenu8CreaItemEPcib>
 8004462:	6178      	str	r0, [r7, #20]
	if(Opciones==NULL)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004468:	2b00      	cmp	r3, #0
 800446a:	d111      	bne.n	8004490 <_ZN5CMenu10AgregaItemEPcib+0x48>
	{
		Opciones=tmp;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	631a      	str	r2, [r3, #48]	@ 0x30
		Opciones->Selecciona(true);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004476:	2101      	movs	r1, #1
 8004478:	4618      	mov	r0, r3
 800447a:	f000 fb98 	bl	8004bae <_ZN9CMenuItem10SeleccionaEb>
		Seleccionado=Opciones;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	639a      	str	r2, [r3, #56]	@ 0x38
		ItemInicial=Opciones;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	635a      	str	r2, [r3, #52]	@ 0x34
		return;
 800448e:	e00e      	b.n	80044ae <_ZN5CMenu10AgregaItemEPcib+0x66>
	}
	Opciones->AgregaAlFinal(tmp);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004494:	6979      	ldr	r1, [r7, #20]
 8004496:	4618      	mov	r0, r3
 8004498:	f000 fb20 	bl	8004adc <_ZN9CMenuItem13AgregaAlFinalEPS_>
	CalaculaPosicionItems(Opciones);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a0:	4619      	mov	r1, r3
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 f806 	bl	80044b4 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem>
	CalculaPaginas();
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 f911 	bl	80046d0 <_ZN5CMenu14CalculaPaginasEv>
}
 80044ae:	3718      	adds	r7, #24
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem>:
void CMenu::CalaculaPosicionItems(CMenuItem* raiz)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
	if(raiz==NULL)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d007      	beq.n	80044d4 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem+0x20>
		return;
	raiz->CalculaPosicionY(Yi+5);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	69db      	ldr	r3, [r3, #28]
 80044c8:	3305      	adds	r3, #5
 80044ca:	4619      	mov	r1, r3
 80044cc:	6838      	ldr	r0, [r7, #0]
 80044ce:	f000 fb7e 	bl	8004bce <_ZN9CMenuItem16CalculaPosicionYEi>
 80044d2:	e000      	b.n	80044d6 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem+0x22>
		return;
 80044d4:	bf00      	nop
}
 80044d6:	3708      	adds	r7, #8
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <_ZN5CMenu14SePuedeMostrarEP9CMenuItem>:
bool CMenu::SePuedeMostrar(CMenuItem *item)
{
 80044dc:	b590      	push	{r4, r7, lr}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
	int y=item->DamePosicionY()+item->DameAltura();
 80044e6:	6838      	ldr	r0, [r7, #0]
 80044e8:	f000 fbac 	bl	8004c44 <_ZN9CMenuItem13DamePosicionYEv>
 80044ec:	4604      	mov	r4, r0
 80044ee:	6838      	ldr	r0, [r7, #0]
 80044f0:	f000 fbb6 	bl	8004c60 <_ZN9CMenuItem10DameAlturaEv>
 80044f4:	4603      	mov	r3, r0
 80044f6:	4423      	add	r3, r4
 80044f8:	60fb      	str	r3, [r7, #12]
	//Si cabe en altura, lo muestro
	if(y> Yi+Alto)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	69da      	ldr	r2, [r3, #28]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004502:	4413      	add	r3, r2
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	429a      	cmp	r2, r3
 8004508:	dd01      	ble.n	800450e <_ZN5CMenu14SePuedeMostrarEP9CMenuItem+0x32>
		return false;
 800450a:	2300      	movs	r3, #0
 800450c:	e000      	b.n	8004510 <_ZN5CMenu14SePuedeMostrarEP9CMenuItem+0x34>
	return true;
 800450e:	2301      	movs	r3, #1
}
 8004510:	4618      	mov	r0, r3
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	bd90      	pop	{r4, r7, pc}

08004518 <_ZN5CMenu21OnSeleccionaSiguienteEv>:
void CMenu::OnSeleccionaSiguiente()
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
	if(Opciones==NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004524:	2b00      	cmp	r3, #0
 8004526:	d03f      	beq.n	80045a8 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x90>
		return;
	CMenuItem* tmp=Seleccionado;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800452c:	60fb      	str	r3, [r7, #12]
	CMenuItem* siguiente;
	//me muevo hasta encontrar el que esta seleccionado
	while(tmp!=NULL)
 800452e:	e037      	b.n	80045a0 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x88>
	{
		if(tmp->EstaSeleccionado())
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 fba3 	bl	8004c7c <_ZN9CMenuItem16EstaSeleccionadoEv>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d02d      	beq.n	8004598 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x80>
		{
			siguiente=tmp->DameSiguiente();
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f000 fb75 	bl	8004c2c <_ZN9CMenuItem13DameSiguienteEv>
 8004542:	60b8      	str	r0, [r7, #8]
			if(siguiente==NULL)
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d030      	beq.n	80045ac <_ZN5CMenu21OnSeleccionaSiguienteEv+0x94>
				return;
			tmp->Selecciona(false);
 800454a:	2100      	movs	r1, #0
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 fb2e 	bl	8004bae <_ZN9CMenuItem10SeleccionaEb>
			siguiente->Selecciona(true);
 8004552:	2101      	movs	r1, #1
 8004554:	68b8      	ldr	r0, [r7, #8]
 8004556:	f000 fb2a 	bl	8004bae <_ZN9CMenuItem10SeleccionaEb>
			Seleccionado=siguiente;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	639a      	str	r2, [r3, #56]	@ 0x38
			if(SePuedeMostrar(siguiente))
 8004560:	68b9      	ldr	r1, [r7, #8]
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7ff ffba 	bl	80044dc <_ZN5CMenu14SePuedeMostrarEP9CMenuItem>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d006      	beq.n	800457c <_ZN5CMenu21OnSeleccionaSiguienteEv+0x64>
			{
				tmp->Show();
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f000 facd 	bl	8004b0e <_ZN9CMenuItem4ShowEv>
				siguiente->Show();
 8004574:	68b8      	ldr	r0, [r7, #8]
 8004576:	f000 faca 	bl	8004b0e <_ZN9CMenuItem4ShowEv>
				return;
 800457a:	e018      	b.n	80045ae <_ZN5CMenu21OnSeleccionaSiguienteEv+0x96>
			}
			else
			{
				//hago una paginacion hacia abajo
				CalaculaPosicionItems(siguiente);
 800457c:	68b9      	ldr	r1, [r7, #8]
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7ff ff98 	bl	80044b4 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem>
				ItemInicial=siguiente;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	635a      	str	r2, [r3, #52]	@ 0x34
				Show();
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	334c      	adds	r3, #76	@ 0x4c
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	4798      	blx	r3
				return;
 8004596:	e00a      	b.n	80045ae <_ZN5CMenu21OnSeleccionaSiguienteEv+0x96>
			}
		}
		tmp=tmp->DameSiguiente();
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 fb47 	bl	8004c2c <_ZN9CMenuItem13DameSiguienteEv>
 800459e:	60f8      	str	r0, [r7, #12]
	while(tmp!=NULL)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1c4      	bne.n	8004530 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x18>
 80045a6:	e002      	b.n	80045ae <_ZN5CMenu21OnSeleccionaSiguienteEv+0x96>
		return;
 80045a8:	bf00      	nop
 80045aa:	e000      	b.n	80045ae <_ZN5CMenu21OnSeleccionaSiguienteEv+0x96>
				return;
 80045ac:	bf00      	nop
	}

}
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <_ZN5CMenu20OnSeleccionaAnteriorEv>:
void CMenu::OnSeleccionaAnterior()
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
	if(Opciones==NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d05c      	beq.n	800467e <_ZN5CMenu20OnSeleccionaAnteriorEv+0xca>
		return;
	CMenuItem* tmp=Seleccionado;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c8:	617b      	str	r3, [r7, #20]
	CMenuItem* anterior;
	while(tmp!=NULL)
 80045ca:	e054      	b.n	8004676 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xc2>
	{
		if(tmp->EstaSeleccionado())
 80045cc:	6978      	ldr	r0, [r7, #20]
 80045ce:	f000 fb55 	bl	8004c7c <_ZN9CMenuItem16EstaSeleccionadoEv>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d04a      	beq.n	800466e <_ZN5CMenu20OnSeleccionaAnteriorEv+0xba>
		{
			anterior=tmp->DameAnterior();
 80045d8:	6978      	ldr	r0, [r7, #20]
 80045da:	f000 fb5c 	bl	8004c96 <_ZN9CMenuItem12DameAnteriorEv>
 80045de:	60f8      	str	r0, [r7, #12]
			if(anterior==NULL)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d04d      	beq.n	8004682 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xce>
				return;
			tmp->Selecciona(false);
 80045e6:	2100      	movs	r1, #0
 80045e8:	6978      	ldr	r0, [r7, #20]
 80045ea:	f000 fae0 	bl	8004bae <_ZN9CMenuItem10SeleccionaEb>
			anterior->Selecciona(true);
 80045ee:	2101      	movs	r1, #1
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 fadc 	bl	8004bae <_ZN9CMenuItem10SeleccionaEb>
			Seleccionado=anterior;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	639a      	str	r2, [r3, #56]	@ 0x38
			if(EstaInicioPagina(tmp)==false)
 80045fc:	6979      	ldr	r1, [r7, #20]
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f8bb 	bl	800477a <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	bf0c      	ite	eq
 800460a:	2301      	moveq	r3, #1
 800460c:	2300      	movne	r3, #0
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2b00      	cmp	r3, #0
 8004612:	d006      	beq.n	8004622 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x6e>
			{
				tmp->Show();
 8004614:	6978      	ldr	r0, [r7, #20]
 8004616:	f000 fa7a 	bl	8004b0e <_ZN9CMenuItem4ShowEv>
				anterior->Show();
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f000 fa77 	bl	8004b0e <_ZN9CMenuItem4ShowEv>
				return;
 8004620:	e030      	b.n	8004684 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xd0>
			}
			else
			{
				//hago una paginacion hacia arriba
				//regreso ItemsXPagina para calcular la pagina
				int itemsContados=ItemsXPagina;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004626:	613b      	str	r3, [r7, #16]
				while(tmp!=NULL && itemsContados>0)
 8004628:	e00b      	b.n	8004642 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x8e>
				{
					anterior=tmp->DameAnterior();
 800462a:	6978      	ldr	r0, [r7, #20]
 800462c:	f000 fb33 	bl	8004c96 <_ZN9CMenuItem12DameAnteriorEv>
 8004630:	60f8      	str	r0, [r7, #12]
					itemsContados--;
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	3b01      	subs	r3, #1
 8004636:	613b      	str	r3, [r7, #16]
					if(anterior==NULL)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d008      	beq.n	8004650 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x9c>
						break;
					tmp=anterior;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	617b      	str	r3, [r7, #20]
				while(tmp!=NULL && itemsContados>0)
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d004      	beq.n	8004652 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x9e>
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	2b00      	cmp	r3, #0
 800464c:	dced      	bgt.n	800462a <_ZN5CMenu20OnSeleccionaAnteriorEv+0x76>
 800464e:	e000      	b.n	8004652 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x9e>
						break;
 8004650:	bf00      	nop
				}
				CalaculaPosicionItems(tmp);
 8004652:	6979      	ldr	r1, [r7, #20]
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f7ff ff2d 	bl	80044b4 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem>
				ItemInicial=tmp;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	635a      	str	r2, [r3, #52]	@ 0x34
				Show();
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	334c      	adds	r3, #76	@ 0x4c
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	4798      	blx	r3
				return;
 800466c:	e00a      	b.n	8004684 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xd0>
			}
		}
		tmp=tmp->DameAnterior();
 800466e:	6978      	ldr	r0, [r7, #20]
 8004670:	f000 fb11 	bl	8004c96 <_ZN9CMenuItem12DameAnteriorEv>
 8004674:	6178      	str	r0, [r7, #20]
	while(tmp!=NULL)
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1a7      	bne.n	80045cc <_ZN5CMenu20OnSeleccionaAnteriorEv+0x18>
 800467c:	e002      	b.n	8004684 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xd0>
		return;
 800467e:	bf00      	nop
 8004680:	e000      	b.n	8004684 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xd0>
				return;
 8004682:	bf00      	nop
	}

}
 8004684:	3718      	adds	r7, #24
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <_ZN5CMenu19OnClickSeleccionadoEv>:
void CMenu::OnClickSeleccionado()
{
 800468a:	b5b0      	push	{r4, r5, r7, lr}
 800468c:	b082      	sub	sp, #8
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
	if(Manejador==NULL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004696:	2b00      	cmp	r3, #0
 8004698:	d014      	beq.n	80046c4 <_ZN5CMenu19OnClickSeleccionadoEv+0x3a>
		return;
	if(Seleccionado==NULL)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d012      	beq.n	80046c8 <_ZN5CMenu19OnClickSeleccionadoEv+0x3e>
		return;
	Manejador->OnMenuEvent(Seleccionado->DameIdentificador());
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6fdd      	ldr	r5, [r3, #124]	@ 0x7c
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	3308      	adds	r3, #8
 80046ae:	681c      	ldr	r4, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 fafa 	bl	8004cae <_ZN9CMenuItem17DameIdentificadorEv>
 80046ba:	4603      	mov	r3, r0
 80046bc:	4619      	mov	r1, r3
 80046be:	4628      	mov	r0, r5
 80046c0:	47a0      	blx	r4
 80046c2:	e002      	b.n	80046ca <_ZN5CMenu19OnClickSeleccionadoEv+0x40>
		return;
 80046c4:	bf00      	nop
 80046c6:	e000      	b.n	80046ca <_ZN5CMenu19OnClickSeleccionadoEv+0x40>
		return;
 80046c8:	bf00      	nop
}
 80046ca:	3708      	adds	r7, #8
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bdb0      	pop	{r4, r5, r7, pc}

080046d0 <_ZN5CMenu14CalculaPaginasEv>:
void CMenu::CalculaPaginas()
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
	LimpiaPaginas();
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f833 	bl	8004744 <_ZN5CMenu13LimpiaPaginasEv>
	int conteoItems=0;
 80046de:	2300      	movs	r3, #0
 80046e0:	617b      	str	r3, [r7, #20]
	int numeroPagina=0;
 80046e2:	2300      	movs	r3, #0
 80046e4:	613b      	str	r3, [r7, #16]
	Paginas[numeroPagina]=Opciones;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046ea:	6879      	ldr	r1, [r7, #4]
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	3314      	adds	r3, #20
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	440b      	add	r3, r1
 80046f4:	605a      	str	r2, [r3, #4]
	CMenuItem* tmp=Opciones;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046fa:	60fb      	str	r3, [r7, #12]
	while(tmp!=NULL)
 80046fc:	e01a      	b.n	8004734 <_ZN5CMenu14CalculaPaginasEv+0x64>
	{
		if(conteoItems%ItemsXPagina==0)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	fb93 f1f2 	sdiv	r1, r3, r2
 8004708:	fb01 f202 	mul.w	r2, r1, r2
 800470c:	1a9b      	subs	r3, r3, r2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d109      	bne.n	8004726 <_ZN5CMenu14CalculaPaginasEv+0x56>
		{
			Paginas[numeroPagina]=tmp;
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	3314      	adds	r3, #20
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4413      	add	r3, r2
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	605a      	str	r2, [r3, #4]
			numeroPagina++;
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	3301      	adds	r3, #1
 8004724:	613b      	str	r3, [r7, #16]
		}
		conteoItems++;
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	3301      	adds	r3, #1
 800472a:	617b      	str	r3, [r7, #20]
		tmp=tmp->DameSiguiente();
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 fa7d 	bl	8004c2c <_ZN9CMenuItem13DameSiguienteEv>
 8004732:	60f8      	str	r0, [r7, #12]
	while(tmp!=NULL)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1e1      	bne.n	80046fe <_ZN5CMenu14CalculaPaginasEv+0x2e>
	}
}
 800473a:	bf00      	nop
 800473c:	bf00      	nop
 800473e:	3718      	adds	r7, #24
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <_ZN5CMenu13LimpiaPaginasEv>:

void CMenu::LimpiaPaginas()
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
	for(int i=0;i<MaximoPaginas;i++)
 800474c:	2300      	movs	r3, #0
 800474e:	60fb      	str	r3, [r7, #12]
 8004750:	e009      	b.n	8004766 <_ZN5CMenu13LimpiaPaginasEv+0x22>
	{
		Paginas[i]=NULL;
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	3314      	adds	r3, #20
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	4413      	add	r3, r2
 800475c:	2200      	movs	r2, #0
 800475e:	605a      	str	r2, [r3, #4]
	for(int i=0;i<MaximoPaginas;i++)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	3301      	adds	r3, #1
 8004764:	60fb      	str	r3, [r7, #12]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2b09      	cmp	r3, #9
 800476a:	ddf2      	ble.n	8004752 <_ZN5CMenu13LimpiaPaginasEv+0xe>
	}
}
 800476c:	bf00      	nop
 800476e:	bf00      	nop
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem>:

bool CMenu::EstaInicioPagina(CMenuItem* item)
{
 800477a:	b480      	push	{r7}
 800477c:	b085      	sub	sp, #20
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
 8004782:	6039      	str	r1, [r7, #0]
	for(int i=0;i<MaximoPaginas;i++)
 8004784:	2300      	movs	r3, #0
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	e00d      	b.n	80047a6 <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem+0x2c>
	{
		if(Paginas[i]==item)
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	3314      	adds	r3, #20
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4413      	add	r3, r2
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	429a      	cmp	r2, r3
 800479a:	d101      	bne.n	80047a0 <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem+0x26>
			return true;
 800479c:	2301      	movs	r3, #1
 800479e:	e006      	b.n	80047ae <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem+0x34>
	for(int i=0;i<MaximoPaginas;i++)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	3301      	adds	r3, #1
 80047a4:	60fb      	str	r3, [r7, #12]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2b09      	cmp	r3, #9
 80047aa:	ddee      	ble.n	800478a <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem+0x10>
	}
	return false;
 80047ac:	2300      	movs	r3, #0

}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <_ZN5CMenu26AsignaManejadorEventosMenuEP20CManejadorEventoMenu>:
void CMenu::AsignaManejadorEventosMenu(CManejadorEventoMenu *manejador)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
 80047c2:	6039      	str	r1, [r7, #0]
	Manejador=manejador;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <_ZN5CMenu10AgregaItemEPciiiiib>:

void CMenu::AgregaItem(char* texto, int identificador,int x, int y,int ancho, int alto,bool seleccionado)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b08a      	sub	sp, #40	@ 0x28
 80047da:	af04      	add	r7, sp, #16
 80047dc:	60f8      	str	r0, [r7, #12]
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	607a      	str	r2, [r7, #4]
 80047e2:	603b      	str	r3, [r7, #0]
	CMenuItem* tmp=CreaItem(texto,identificador,Xi+x,Yi+y,ancho, alto,seleccionado);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	699a      	ldr	r2, [r3, #24]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	18d1      	adds	r1, r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	69da      	ldr	r2, [r3, #28]
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	4413      	add	r3, r2
 80047f4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80047f8:	9203      	str	r2, [sp, #12]
 80047fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047fc:	9202      	str	r2, [sp, #8]
 80047fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004800:	9201      	str	r2, [sp, #4]
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	460b      	mov	r3, r1
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	68b9      	ldr	r1, [r7, #8]
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f000 f820 	bl	8004850 <_ZN5CMenu8CreaItemEPciiiiib>
 8004810:	6178      	str	r0, [r7, #20]
	if(Opciones==NULL)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004816:	2b00      	cmp	r3, #0
 8004818:	d111      	bne.n	800483e <_ZN5CMenu10AgregaItemEPciiiiib+0x68>
	{
		Opciones=tmp;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	631a      	str	r2, [r3, #48]	@ 0x30
		Opciones->Selecciona(true);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004824:	2101      	movs	r1, #1
 8004826:	4618      	mov	r0, r3
 8004828:	f000 f9c1 	bl	8004bae <_ZN9CMenuItem10SeleccionaEb>
		Seleccionado=Opciones;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	639a      	str	r2, [r3, #56]	@ 0x38
		ItemInicial=Opciones;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	635a      	str	r2, [r3, #52]	@ 0x34
		return;
 800483c:	e005      	b.n	800484a <_ZN5CMenu10AgregaItemEPciiiiib+0x74>
	}
	Opciones->AgregaAlFinal(tmp);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004842:	6979      	ldr	r1, [r7, #20]
 8004844:	4618      	mov	r0, r3
 8004846:	f000 f949 	bl	8004adc <_ZN9CMenuItem13AgregaAlFinalEPS_>
}
 800484a:	3718      	adds	r7, #24
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <_ZN5CMenu8CreaItemEPciiiiib>:
CMenuItem* CMenu::CreaItem(char* texto, int identificador,int x, int y,int ancho, int alto,bool seleccionado)
{
 8004850:	b590      	push	{r4, r7, lr}
 8004852:	b08f      	sub	sp, #60	@ 0x3c
 8004854:	af08      	add	r7, sp, #32
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
 800485c:	603b      	str	r3, [r7, #0]
	CEtiquetaTft* etiquetaTmp=new CEtiquetaTft(x, y, ancho, alto, ColorFondo,texto, ColorTexto, 3, 0, ColorFondo);
 800485e:	20a4      	movs	r0, #164	@ 0xa4
 8004860:	f00c fddc 	bl	801141c <_Znwj>
 8004864:	4603      	mov	r3, r0
 8004866:	461c      	mov	r4, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004870:	68f9      	ldr	r1, [r7, #12]
 8004872:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004874:	9106      	str	r1, [sp, #24]
 8004876:	2100      	movs	r1, #0
 8004878:	9105      	str	r1, [sp, #20]
 800487a:	2103      	movs	r1, #3
 800487c:	9104      	str	r1, [sp, #16]
 800487e:	9203      	str	r2, [sp, #12]
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	9202      	str	r2, [sp, #8]
 8004884:	9301      	str	r3, [sp, #4]
 8004886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800488c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800488e:	6839      	ldr	r1, [r7, #0]
 8004890:	4620      	mov	r0, r4
 8004892:	f7fe fabb 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004896:	617c      	str	r4, [r7, #20]
	CMenuItem* tmp=new CMenuItem(etiquetaTmp,identificador,seleccionado);
 8004898:	2028      	movs	r0, #40	@ 0x28
 800489a:	f00c fdbf 	bl	801141c <_Znwj>
 800489e:	4603      	mov	r3, r0
 80048a0:	461c      	mov	r4, r3
 80048a2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	6979      	ldr	r1, [r7, #20]
 80048aa:	4620      	mov	r0, r4
 80048ac:	f000 f8c6 	bl	8004a3c <_ZN9CMenuItemC1EP12CEtiquetaTftib>
 80048b0:	613c      	str	r4, [r7, #16]
	tmp->AsignaColores(ColorTexto, ColorFondo, ColoTextoSeleccionado, ColorFondoSeleccionado);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	4603      	mov	r3, r0
 80048c6:	6938      	ldr	r0, [r7, #16]
 80048c8:	f000 f958 	bl	8004b7c <_ZN9CMenuItem13AsignaColoresEiiii>
	return tmp;
 80048cc:	693b      	ldr	r3, [r7, #16]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	371c      	adds	r7, #28
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd90      	pop	{r4, r7, pc}

080048d6 <_ZN5CMenu11SetPosicionEii>:
void CMenu::SetPosicion(int x, int y)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b085      	sub	sp, #20
 80048da:	af00      	add	r7, sp, #0
 80048dc:	60f8      	str	r0, [r7, #12]
 80048de:	60b9      	str	r1, [r7, #8]
 80048e0:	607a      	str	r2, [r7, #4]
	Xi=x;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	619a      	str	r2, [r3, #24]
	Yi=y;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	61da      	str	r2, [r3, #28]
}
 80048ee:	bf00      	nop
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <_ZN5CMenu10AgregaItemEPciiiiiiib>:
void CMenu::AgregaItem(char* texto, int identificador,int x, int y,int ancho, int alto,int colorFondo,int colorTexto,bool seleccionado)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b08c      	sub	sp, #48	@ 0x30
 80048fe:	af06      	add	r7, sp, #24
 8004900:	60f8      	str	r0, [r7, #12]
 8004902:	60b9      	str	r1, [r7, #8]
 8004904:	607a      	str	r2, [r7, #4]
 8004906:	603b      	str	r3, [r7, #0]
	CMenuItem* tmp=CreaItem(texto,identificador,Xi+x,Yi+y,ancho, alto,colorFondo,colorTexto,seleccionado);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	699a      	ldr	r2, [r3, #24]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	18d1      	adds	r1, r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	69da      	ldr	r2, [r3, #28]
 8004914:	6a3b      	ldr	r3, [r7, #32]
 8004916:	4413      	add	r3, r2
 8004918:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800491c:	9205      	str	r2, [sp, #20]
 800491e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004920:	9204      	str	r2, [sp, #16]
 8004922:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004924:	9203      	str	r2, [sp, #12]
 8004926:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004928:	9202      	str	r2, [sp, #8]
 800492a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800492c:	9201      	str	r2, [sp, #4]
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	460b      	mov	r3, r1
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	68b9      	ldr	r1, [r7, #8]
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f000 f820 	bl	800497c <_ZN5CMenu8CreaItemEPciiiiiiib>
 800493c:	6178      	str	r0, [r7, #20]
	if(Opciones==NULL)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004942:	2b00      	cmp	r3, #0
 8004944:	d111      	bne.n	800496a <_ZN5CMenu10AgregaItemEPciiiiiiib+0x70>
	{
		Opciones=tmp;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	631a      	str	r2, [r3, #48]	@ 0x30
		Opciones->Selecciona(true);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004950:	2101      	movs	r1, #1
 8004952:	4618      	mov	r0, r3
 8004954:	f000 f92b 	bl	8004bae <_ZN9CMenuItem10SeleccionaEb>
		Seleccionado=Opciones;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	639a      	str	r2, [r3, #56]	@ 0x38
		ItemInicial=Opciones;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	635a      	str	r2, [r3, #52]	@ 0x34
		return;
 8004968:	e005      	b.n	8004976 <_ZN5CMenu10AgregaItemEPciiiiiiib+0x7c>
	}
	Opciones->AgregaAlFinal(tmp);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800496e:	6979      	ldr	r1, [r7, #20]
 8004970:	4618      	mov	r0, r3
 8004972:	f000 f8b3 	bl	8004adc <_ZN9CMenuItem13AgregaAlFinalEPS_>

}
 8004976:	3718      	adds	r7, #24
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <_ZN5CMenu8CreaItemEPciiiiiiib>:
CMenuItem* CMenu::CreaItem(char* texto, int identificador,int x, int y,int ancho, int alto,int colorFondo,int colorTexto,bool seleccionado)
{
 800497c:	b590      	push	{r4, r7, lr}
 800497e:	b08f      	sub	sp, #60	@ 0x3c
 8004980:	af08      	add	r7, sp, #32
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
 8004988:	603b      	str	r3, [r7, #0]
	CEtiquetaTft* etiquetaTmp=new CEtiquetaTft(x, y, ancho, alto, colorFondo,texto, colorTexto, 3, 0, ColorFondo);
 800498a:	20a4      	movs	r0, #164	@ 0xa4
 800498c:	f00c fd46 	bl	801141c <_Znwj>
 8004990:	4603      	mov	r3, r0
 8004992:	461c      	mov	r4, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004998:	9306      	str	r3, [sp, #24]
 800499a:	2300      	movs	r3, #0
 800499c:	9305      	str	r3, [sp, #20]
 800499e:	2303      	movs	r3, #3
 80049a0:	9304      	str	r3, [sp, #16]
 80049a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049a4:	9303      	str	r3, [sp, #12]
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	9302      	str	r3, [sp, #8]
 80049aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049ac:	9301      	str	r3, [sp, #4]
 80049ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049b6:	6839      	ldr	r1, [r7, #0]
 80049b8:	4620      	mov	r0, r4
 80049ba:	f7fe fa27 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 80049be:	617c      	str	r4, [r7, #20]
	CMenuItem* tmp=new CMenuItem(etiquetaTmp,identificador,seleccionado);
 80049c0:	2028      	movs	r0, #40	@ 0x28
 80049c2:	f00c fd2b 	bl	801141c <_Znwj>
 80049c6:	4603      	mov	r3, r0
 80049c8:	461c      	mov	r4, r3
 80049ca:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	6979      	ldr	r1, [r7, #20]
 80049d2:	4620      	mov	r0, r4
 80049d4:	f000 f832 	bl	8004a3c <_ZN9CMenuItemC1EP12CEtiquetaTftib>
 80049d8:	613c      	str	r4, [r7, #16]
	tmp->AsignaColores(colorTexto, colorFondo, ColoTextoSeleccionado, ColorFondoSeleccionado);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	4613      	mov	r3, r2
 80049e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80049e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80049ea:	6938      	ldr	r0, [r7, #16]
 80049ec:	f000 f8c6 	bl	8004b7c <_ZN9CMenuItem13AsignaColoresEiiii>
	return tmp;
 80049f0:	693b      	ldr	r3, [r7, #16]

}
 80049f2:	4618      	mov	r0, r3
 80049f4:	371c      	adds	r7, #28
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd90      	pop	{r4, r7, pc}

080049fa <_ZN5CMenu12BorrarItemnsEv>:

void CMenu::BorrarItemns()
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b084      	sub	sp, #16
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]

	CMenuItem *tmp=Opciones;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a06:	60fb      	str	r3, [r7, #12]
	CMenuItem *tmp2;
	while(tmp!=NULL)
 8004a08:	e00d      	b.n	8004a26 <_ZN5CMenu12BorrarItemnsEv+0x2c>
	{
		tmp2=tmp->DameSiguiente();
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 f90e 	bl	8004c2c <_ZN9CMenuItem13DameSiguienteEv>
 8004a10:	60b8      	str	r0, [r7, #8]
		delete tmp;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d004      	beq.n	8004a22 <_ZN5CMenu12BorrarItemnsEv+0x28>
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	3204      	adds	r2, #4
 8004a1c:	6812      	ldr	r2, [r2, #0]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	4790      	blx	r2
		tmp=tmp2;
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	60fb      	str	r3, [r7, #12]
	while(tmp!=NULL)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1ee      	bne.n	8004a0a <_ZN5CMenu12BorrarItemnsEv+0x10>
	}
	Opciones=NULL;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004a32:	bf00      	nop
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
	...

08004a3c <_ZN9CMenuItemC1EP12CEtiquetaTftib>:
 *      Author: W10
 */

#include <GUI/Menu/CMenuItem.hpp>

CMenuItem::CMenuItem(CEtiquetaTft* etiqueta,int identificador,bool seleccionado)
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
 8004a48:	70fb      	strb	r3, [r7, #3]
 8004a4a:	4a0d      	ldr	r2, [pc, #52]	@ (8004a80 <_ZN9CMenuItemC1EP12CEtiquetaTftib+0x44>)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub
	Etiqueta=etiqueta;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	605a      	str	r2, [r3, #4]
	Siguiente=NULL;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	609a      	str	r2, [r3, #8]
	Anterior=NULL;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	60da      	str	r2, [r3, #12]
	Identificador=identificador;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	611a      	str	r2, [r3, #16]
	Seleccionado=seleccionado;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	78fa      	ldrb	r2, [r7, #3]
 8004a6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4618      	mov	r0, r3
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	08014ac0 	.word	0x08014ac0

08004a84 <_ZN9CMenuItemD1Ev>:

CMenuItem::~CMenuItem()
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8004ab8 <_ZN9CMenuItemD1Ev+0x34>)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	601a      	str	r2, [r3, #0]
{
	if(Etiqueta!=NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d008      	beq.n	8004aac <_ZN9CMenuItemD1Ev+0x28>
		delete Etiqueta;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d004      	beq.n	8004aac <_ZN9CMenuItemD1Ev+0x28>
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	3204      	adds	r2, #4
 8004aa6:	6812      	ldr	r2, [r2, #0]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	4790      	blx	r2
	// TODO Auto-generated destructor stub
}
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	08014ac0 	.word	0x08014ac0

08004abc <_ZN9CMenuItemD0Ev>:
CMenuItem::~CMenuItem()
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
}
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f7ff ffdd 	bl	8004a84 <_ZN9CMenuItemD1Ev>
 8004aca:	2128      	movs	r1, #40	@ 0x28
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f00c fca3 	bl	8011418 <_ZdlPvj>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3708      	adds	r7, #8
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <_ZN9CMenuItem13AgregaAlFinalEPS_>:

void CMenuItem::AgregaAlFinal(CMenuItem* siguiente)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
	if(Siguiente==NULL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d106      	bne.n	8004afc <_ZN9CMenuItem13AgregaAlFinalEPS_+0x20>
	{
		Siguiente=siguiente;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	609a      	str	r2, [r3, #8]
		siguiente->Anterior=this;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	60da      	str	r2, [r3, #12]
		return;
 8004afa:	e005      	b.n	8004b08 <_ZN9CMenuItem13AgregaAlFinalEPS_+0x2c>
	}
	Siguiente->AgregaAlFinal(siguiente);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	6839      	ldr	r1, [r7, #0]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7ff ffea 	bl	8004adc <_ZN9CMenuItem13AgregaAlFinalEPS_>
}
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <_ZN9CMenuItem4ShowEv>:

void CMenuItem::Show()
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b082      	sub	sp, #8
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
	if(Seleccionado)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d010      	beq.n	8004b42 <_ZN9CMenuItem4ShowEv+0x34>
	{
		Etiqueta->SetColorTexto(ColoTextoSeleccionado);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	69db      	ldr	r3, [r3, #28]
 8004b28:	4619      	mov	r1, r3
 8004b2a:	4610      	mov	r0, r2
 8004b2c:	f7fe faf2 	bl	8003114 <_ZN12CEtiquetaTft13SetColorTextoEi>
		Etiqueta->SetBackColor(ColorFondoSeleccionado);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a1b      	ldr	r3, [r3, #32]
 8004b38:	4619      	mov	r1, r3
 8004b3a:	4610      	mov	r0, r2
 8004b3c:	f7fe fb36 	bl	80031ac <_ZN12CEtiquetaTft12SetBackColorEi>
 8004b40:	e00f      	b.n	8004b62 <_ZN9CMenuItem4ShowEv+0x54>
	}
	else
	{
		Etiqueta->SetColorTexto(ColorTexto);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	4610      	mov	r0, r2
 8004b4e:	f7fe fae1 	bl	8003114 <_ZN12CEtiquetaTft13SetColorTextoEi>
		Etiqueta->SetBackColor(ColorFondo);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685a      	ldr	r2, [r3, #4]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	4610      	mov	r0, r2
 8004b5e:	f7fe fb25 	bl	80031ac <_ZN12CEtiquetaTft12SetBackColorEi>
	}
	Etiqueta->Show();
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685a      	ldr	r2, [r3, #4]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	334c      	adds	r3, #76	@ 0x4c
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4610      	mov	r0, r2
 8004b72:	4798      	blx	r3
}
 8004b74:	bf00      	nop
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <_ZN9CMenuItem13AsignaColoresEiiii>:
void CMenuItem::AsignaColores(int colorTexto, int colorFondo, int colorTextoResaltado, int solorFondoResaltado)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
 8004b88:	603b      	str	r3, [r7, #0]
	ColorTexto=colorTexto;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	615a      	str	r2, [r3, #20]
	ColorFondo=colorFondo;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	619a      	str	r2, [r3, #24]
	ColoTextoSeleccionado=colorTextoResaltado;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	61da      	str	r2, [r3, #28]
	ColorFondoSeleccionado=solorFondoResaltado;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	621a      	str	r2, [r3, #32]
}
 8004ba2:	bf00      	nop
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <_ZN9CMenuItem10SeleccionaEb>:
void CMenuItem::Selecciona(bool valor)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b083      	sub	sp, #12
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	70fb      	strb	r3, [r7, #3]
	Seleccionado=valor;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	78fa      	ldrb	r2, [r7, #3]
 8004bbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8004bc2:	bf00      	nop
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <_ZN9CMenuItem16CalculaPosicionYEi>:

void CMenuItem::CalculaPosicionY(int posicion)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b084      	sub	sp, #16
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
 8004bd6:	6039      	str	r1, [r7, #0]
	int x=Etiqueta->DamePosicionX();
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7fe fd3b 	bl	8003658 <_ZN14CRectanguloTft13DamePosicionXEv>
 8004be2:	60f8      	str	r0, [r7, #12]
	Etiqueta->CambiaPosicion(x, posicion);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	4618      	mov	r0, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3350      	adds	r3, #80	@ 0x50
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	683a      	ldr	r2, [r7, #0]
 8004bf6:	68f9      	ldr	r1, [r7, #12]
 8004bf8:	4798      	blx	r3
	if(Siguiente==NULL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d010      	beq.n	8004c24 <_ZN9CMenuItem16CalculaPosicionYEi+0x56>
		return;
	int y=Etiqueta->DameAlto()+posicion+5;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7fe fd3e 	bl	8003688 <_ZN14CRectanguloTft8DameAltoEv>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	4413      	add	r3, r2
 8004c12:	3305      	adds	r3, #5
 8004c14:	60bb      	str	r3, [r7, #8]
	Siguiente->CalculaPosicionY(y);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	68b9      	ldr	r1, [r7, #8]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7ff ffd6 	bl	8004bce <_ZN9CMenuItem16CalculaPosicionYEi>
 8004c22:	e000      	b.n	8004c26 <_ZN9CMenuItem16CalculaPosicionYEi+0x58>
		return;
 8004c24:	bf00      	nop
}
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <_ZN9CMenuItem13DameSiguienteEv>:
CMenuItem* CMenuItem::DameSiguiente()
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
	return Siguiente;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <_ZN9CMenuItem13DamePosicionYEv>:
int CMenuItem::DamePosicionY()
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
	return Etiqueta->DamePosicionY();
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7fe fd0d 	bl	8003670 <_ZN14CRectanguloTft13DamePosicionYEv>
 8004c56:	4603      	mov	r3, r0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3708      	adds	r7, #8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <_ZN9CMenuItem10DameAlturaEv>:
int CMenuItem::DameAltura()
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
	return Etiqueta->DameAlto();
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7fe fd0b 	bl	8003688 <_ZN14CRectanguloTft8DameAltoEv>
 8004c72:	4603      	mov	r3, r0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3708      	adds	r7, #8
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <_ZN9CMenuItem16EstaSeleccionadoEv>:
bool CMenuItem::EstaSeleccionado()
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
	return Seleccionado;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <_ZN9CMenuItem12DameAnteriorEv>:
CMenuItem* CMenuItem::DameAnterior()
{
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
	return Anterior;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68db      	ldr	r3, [r3, #12]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <_ZN9CMenuItem17DameIdentificadorEv>:
void CMenuItem::AsignaAnterior(CMenuItem* anterior)
{
	Anterior=anterior;
}
int CMenuItem::DameIdentificador()
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b083      	sub	sp, #12
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
	return Identificador;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
	...

08004cc8 <_ZN20CPantallaCalibracionC1Ev>:
#include "stm32f4xx_hal_conf.h"
#include <EPROM/CEprom.hpp>

extern I2C_HandleTypeDef hi2c1;

CPantallaCalibracion::CPantallaCalibracion():
 8004cc8:	b590      	push	{r4, r7, lr}
 8004cca:	b08b      	sub	sp, #44	@ 0x2c
 8004ccc:	af08      	add	r7, sp, #32
 8004cce:	6078      	str	r0, [r7, #4]
CPantallaBase(1, (char*)"   Modo: Calibrar")
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a9d      	ldr	r2, [pc, #628]	@ (8004f48 <_ZN20CPantallaCalibracionC1Ev+0x280>)
 8004cd4:	2101      	movs	r1, #1
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fe faca 	bl	8003270 <_ZN13CPantallaBaseC1EiPc>
 8004cdc:	4a9b      	ldr	r2, [pc, #620]	@ (8004f4c <_ZN20CPantallaCalibracionC1Ev+0x284>)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	601a      	str	r2, [r3, #0]
 8004ce2:	4a9b      	ldr	r2, [pc, #620]	@ (8004f50 <_ZN20CPantallaCalibracionC1Ev+0x288>)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
{
	TemperaturaODiferencia=true;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
	Diferencia=0;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	Temperatura=0;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	DiferenciaAnterior=0;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	// TODO Auto-generated constructor stub
	LabelTemperatura=new CEtiquetaTft( 5, 40, 50, 20, COLOR::BLACK,(char*)"temp: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8004d10:	20a4      	movs	r0, #164	@ 0xa4
 8004d12:	f00c fb83 	bl	801141c <_Znwj>
 8004d16:	4603      	mov	r3, r0
 8004d18:	461c      	mov	r4, r3
 8004d1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004d1e:	9306      	str	r3, [sp, #24]
 8004d20:	2300      	movs	r3, #0
 8004d22:	9305      	str	r3, [sp, #20]
 8004d24:	2303      	movs	r3, #3
 8004d26:	9304      	str	r3, [sp, #16]
 8004d28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004d2c:	9303      	str	r3, [sp, #12]
 8004d2e:	4b89      	ldr	r3, [pc, #548]	@ (8004f54 <_ZN20CPantallaCalibracionC1Ev+0x28c>)
 8004d30:	9302      	str	r3, [sp, #8]
 8004d32:	2300      	movs	r3, #0
 8004d34:	9301      	str	r3, [sp, #4]
 8004d36:	2314      	movs	r3, #20
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	2332      	movs	r3, #50	@ 0x32
 8004d3c:	2228      	movs	r2, #40	@ 0x28
 8004d3e:	2105      	movs	r1, #5
 8004d40:	4620      	mov	r0, r4
 8004d42:	f7fe f863 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f8c3 40b4 	str.w	r4, [r3, #180]	@ 0xb4
	TextTemperatura = new CEtiquetaTft( 95, 40, 150, 30,COLOR::WHITE, (char*)"000", COLOR::BLACK, 3, 1, COLOR::RED);
 8004d4c:	20a4      	movs	r0, #164	@ 0xa4
 8004d4e:	f00c fb65 	bl	801141c <_Znwj>
 8004d52:	4603      	mov	r3, r0
 8004d54:	461c      	mov	r4, r3
 8004d56:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004d5a:	9306      	str	r3, [sp, #24]
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	9305      	str	r3, [sp, #20]
 8004d60:	2303      	movs	r3, #3
 8004d62:	9304      	str	r3, [sp, #16]
 8004d64:	2300      	movs	r3, #0
 8004d66:	9303      	str	r3, [sp, #12]
 8004d68:	4b7b      	ldr	r3, [pc, #492]	@ (8004f58 <_ZN20CPantallaCalibracionC1Ev+0x290>)
 8004d6a:	9302      	str	r3, [sp, #8]
 8004d6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004d70:	9301      	str	r3, [sp, #4]
 8004d72:	231e      	movs	r3, #30
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	2396      	movs	r3, #150	@ 0x96
 8004d78:	2228      	movs	r2, #40	@ 0x28
 8004d7a:	215f      	movs	r1, #95	@ 0x5f
 8004d7c:	4620      	mov	r0, r4
 8004d7e:	f7fe f845 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f8c3 40b8 	str.w	r4, [r3, #184]	@ 0xb8

	LabelDiferencia=new CEtiquetaTft( 5, 80, 50, 20, COLOR::BLACK,(char*)"Dif: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8004d88:	20a4      	movs	r0, #164	@ 0xa4
 8004d8a:	f00c fb47 	bl	801141c <_Znwj>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	461c      	mov	r4, r3
 8004d92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004d96:	9306      	str	r3, [sp, #24]
 8004d98:	2300      	movs	r3, #0
 8004d9a:	9305      	str	r3, [sp, #20]
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	9304      	str	r3, [sp, #16]
 8004da0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004da4:	9303      	str	r3, [sp, #12]
 8004da6:	4b6d      	ldr	r3, [pc, #436]	@ (8004f5c <_ZN20CPantallaCalibracionC1Ev+0x294>)
 8004da8:	9302      	str	r3, [sp, #8]
 8004daa:	2300      	movs	r3, #0
 8004dac:	9301      	str	r3, [sp, #4]
 8004dae:	2314      	movs	r3, #20
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	2332      	movs	r3, #50	@ 0x32
 8004db4:	2250      	movs	r2, #80	@ 0x50
 8004db6:	2105      	movs	r1, #5
 8004db8:	4620      	mov	r0, r4
 8004dba:	f7fe f827 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f8c3 40c0 	str.w	r4, [r3, #192]	@ 0xc0
	TextDiferencia = new CEtiquetaTft( 95, 80, 150, 30,COLOR::GREY, (char*)"000", COLOR::BLACK, 3, 1, COLOR::RED);
 8004dc4:	20a4      	movs	r0, #164	@ 0xa4
 8004dc6:	f00c fb29 	bl	801141c <_Znwj>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	461c      	mov	r4, r3
 8004dce:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004dd2:	9306      	str	r3, [sp, #24]
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	9305      	str	r3, [sp, #20]
 8004dd8:	2303      	movs	r3, #3
 8004dda:	9304      	str	r3, [sp, #16]
 8004ddc:	2300      	movs	r3, #0
 8004dde:	9303      	str	r3, [sp, #12]
 8004de0:	4b5d      	ldr	r3, [pc, #372]	@ (8004f58 <_ZN20CPantallaCalibracionC1Ev+0x290>)
 8004de2:	9302      	str	r3, [sp, #8]
 8004de4:	f64d 63de 	movw	r3, #57054	@ 0xdede
 8004de8:	9301      	str	r3, [sp, #4]
 8004dea:	231e      	movs	r3, #30
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	2396      	movs	r3, #150	@ 0x96
 8004df0:	2250      	movs	r2, #80	@ 0x50
 8004df2:	215f      	movs	r1, #95	@ 0x5f
 8004df4:	4620      	mov	r0, r4
 8004df6:	f7fe f809 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8c3 40c4 	str.w	r4, [r3, #196]	@ 0xc4
	TextDiferencia->SetSeparacion(5, 5);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004e06:	2205      	movs	r2, #5
 8004e08:	2105      	movs	r1, #5
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fe f96e 	bl	80030ec <_ZN12CEtiquetaTft13SetSeparacionEii>

	LabelTemperatura2=new CEtiquetaTft( 5, 120, 50, 20, COLOR::BLACK,(char*)"temp: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8004e10:	20a4      	movs	r0, #164	@ 0xa4
 8004e12:	f00c fb03 	bl	801141c <_Znwj>
 8004e16:	4603      	mov	r3, r0
 8004e18:	461c      	mov	r4, r3
 8004e1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004e1e:	9306      	str	r3, [sp, #24]
 8004e20:	2300      	movs	r3, #0
 8004e22:	9305      	str	r3, [sp, #20]
 8004e24:	2303      	movs	r3, #3
 8004e26:	9304      	str	r3, [sp, #16]
 8004e28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004e2c:	9303      	str	r3, [sp, #12]
 8004e2e:	4b49      	ldr	r3, [pc, #292]	@ (8004f54 <_ZN20CPantallaCalibracionC1Ev+0x28c>)
 8004e30:	9302      	str	r3, [sp, #8]
 8004e32:	2300      	movs	r3, #0
 8004e34:	9301      	str	r3, [sp, #4]
 8004e36:	2314      	movs	r3, #20
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	2332      	movs	r3, #50	@ 0x32
 8004e3c:	2278      	movs	r2, #120	@ 0x78
 8004e3e:	2105      	movs	r1, #5
 8004e40:	4620      	mov	r0, r4
 8004e42:	f7fd ffe3 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8c3 40c8 	str.w	r4, [r3, #200]	@ 0xc8
	TextTemperatura2 = new CEtiquetaTft( 95, 120, 150, 30,COLOR::GREY, (char*)"000", COLOR::BLACK, 3, 1, COLOR::RED);
 8004e4c:	20a4      	movs	r0, #164	@ 0xa4
 8004e4e:	f00c fae5 	bl	801141c <_Znwj>
 8004e52:	4603      	mov	r3, r0
 8004e54:	461c      	mov	r4, r3
 8004e56:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004e5a:	9306      	str	r3, [sp, #24]
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	9305      	str	r3, [sp, #20]
 8004e60:	2303      	movs	r3, #3
 8004e62:	9304      	str	r3, [sp, #16]
 8004e64:	2300      	movs	r3, #0
 8004e66:	9303      	str	r3, [sp, #12]
 8004e68:	4b3b      	ldr	r3, [pc, #236]	@ (8004f58 <_ZN20CPantallaCalibracionC1Ev+0x290>)
 8004e6a:	9302      	str	r3, [sp, #8]
 8004e6c:	f64d 63de 	movw	r3, #57054	@ 0xdede
 8004e70:	9301      	str	r3, [sp, #4]
 8004e72:	231e      	movs	r3, #30
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	2396      	movs	r3, #150	@ 0x96
 8004e78:	2278      	movs	r2, #120	@ 0x78
 8004e7a:	215f      	movs	r1, #95	@ 0x5f
 8004e7c:	4620      	mov	r0, r4
 8004e7e:	f7fd ffc5 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8c3 40cc 	str.w	r4, [r3, #204]	@ 0xcc

	LabelAire = new CEtiquetaTft( 5, 160, 200, 30, COLOR::BLACK,(char*) "Aire: 00",COLOR::WHITE, 3, 0, COLOR::RED);
 8004e88:	20a4      	movs	r0, #164	@ 0xa4
 8004e8a:	f00c fac7 	bl	801141c <_Znwj>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	461c      	mov	r4, r3
 8004e92:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004e96:	9306      	str	r3, [sp, #24]
 8004e98:	2300      	movs	r3, #0
 8004e9a:	9305      	str	r3, [sp, #20]
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	9304      	str	r3, [sp, #16]
 8004ea0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004ea4:	9303      	str	r3, [sp, #12]
 8004ea6:	4b2e      	ldr	r3, [pc, #184]	@ (8004f60 <_ZN20CPantallaCalibracionC1Ev+0x298>)
 8004ea8:	9302      	str	r3, [sp, #8]
 8004eaa:	2300      	movs	r3, #0
 8004eac:	9301      	str	r3, [sp, #4]
 8004eae:	231e      	movs	r3, #30
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	23c8      	movs	r3, #200	@ 0xc8
 8004eb4:	22a0      	movs	r2, #160	@ 0xa0
 8004eb6:	2105      	movs	r1, #5
 8004eb8:	4620      	mov	r0, r4
 8004eba:	f7fd ffa7 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8c3 40bc 	str.w	r4, [r3, #188]	@ 0xbc

	LabelGuardar=new CEtiquetaTft( 10, 200, 130, 30, COLOR::GREEN,(char*)"GUARDAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 8004ec4:	20a4      	movs	r0, #164	@ 0xa4
 8004ec6:	f00c faa9 	bl	801141c <_Znwj>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	461c      	mov	r4, r3
 8004ece:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004ed2:	9306      	str	r3, [sp, #24]
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	9305      	str	r3, [sp, #20]
 8004ed8:	2303      	movs	r3, #3
 8004eda:	9304      	str	r3, [sp, #16]
 8004edc:	2300      	movs	r3, #0
 8004ede:	9303      	str	r3, [sp, #12]
 8004ee0:	4b20      	ldr	r3, [pc, #128]	@ (8004f64 <_ZN20CPantallaCalibracionC1Ev+0x29c>)
 8004ee2:	9302      	str	r3, [sp, #8]
 8004ee4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004ee8:	9301      	str	r3, [sp, #4]
 8004eea:	231e      	movs	r3, #30
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	2382      	movs	r3, #130	@ 0x82
 8004ef0:	22c8      	movs	r2, #200	@ 0xc8
 8004ef2:	210a      	movs	r1, #10
 8004ef4:	4620      	mov	r0, r4
 8004ef6:	f7fd ff89 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f8c3 40ac 	str.w	r4, [r3, #172]	@ 0xac
	LabelCancelar=new CEtiquetaTft( 160, 200, 145, 30, COLOR::RED,(char*)"CANCELAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 8004f00:	20a4      	movs	r0, #164	@ 0xa4
 8004f02:	f00c fa8b 	bl	801141c <_Znwj>
 8004f06:	4603      	mov	r3, r0
 8004f08:	461c      	mov	r4, r3
 8004f0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004f0e:	9306      	str	r3, [sp, #24]
 8004f10:	2301      	movs	r3, #1
 8004f12:	9305      	str	r3, [sp, #20]
 8004f14:	2303      	movs	r3, #3
 8004f16:	9304      	str	r3, [sp, #16]
 8004f18:	2300      	movs	r3, #0
 8004f1a:	9303      	str	r3, [sp, #12]
 8004f1c:	4b12      	ldr	r3, [pc, #72]	@ (8004f68 <_ZN20CPantallaCalibracionC1Ev+0x2a0>)
 8004f1e:	9302      	str	r3, [sp, #8]
 8004f20:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004f24:	9301      	str	r3, [sp, #4]
 8004f26:	231e      	movs	r3, #30
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	2391      	movs	r3, #145	@ 0x91
 8004f2c:	22c8      	movs	r2, #200	@ 0xc8
 8004f2e:	21a0      	movs	r1, #160	@ 0xa0
 8004f30:	4620      	mov	r0, r4
 8004f32:	f7fd ff6b 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f8c3 40b0 	str.w	r4, [r3, #176]	@ 0xb0
}
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd90      	pop	{r4, r7, pc}
 8004f46:	bf00      	nop
 8004f48:	080141a8 	.word	0x080141a8
 8004f4c:	08014ad0 	.word	0x08014ad0
 8004f50:	08014b68 	.word	0x08014b68
 8004f54:	080141bc 	.word	0x080141bc
 8004f58:	080141c4 	.word	0x080141c4
 8004f5c:	080141c8 	.word	0x080141c8
 8004f60:	080141d0 	.word	0x080141d0
 8004f64:	080141dc 	.word	0x080141dc
 8004f68:	080141e4 	.word	0x080141e4

08004f6c <_ZN20CPantallaCalibracionD1Ev>:

CPantallaCalibracion::~CPantallaCalibracion()
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	4a07      	ldr	r2, [pc, #28]	@ (8004f94 <_ZN20CPantallaCalibracionD1Ev+0x28>)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	4a07      	ldr	r2, [pc, #28]	@ (8004f98 <_ZN20CPantallaCalibracionD1Ev+0x2c>)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7fe f940 	bl	8003208 <_ZN13CPantallaBaseD1Ev>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	08014ad0 	.word	0x08014ad0
 8004f98:	08014b68 	.word	0x08014b68

08004f9c <_ZThn48_N20CPantallaCalibracionD1Ev>:

	void MuestraInformacion();
	void LeeMemoria();
public:
	CPantallaCalibracion();
	virtual ~CPantallaCalibracion();
 8004f9c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004fa0:	f7ff bfe4 	b.w	8004f6c <_ZN20CPantallaCalibracionD1Ev>

08004fa4 <_ZN20CPantallaCalibracionD0Ev>:
CPantallaCalibracion::~CPantallaCalibracion()
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
}
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f7ff ffdd 	bl	8004f6c <_ZN20CPantallaCalibracionD1Ev>
 8004fb2:	21ec      	movs	r1, #236	@ 0xec
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f00c fa2f 	bl	8011418 <_ZdlPvj>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3708      	adds	r7, #8
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <_ZThn48_N20CPantallaCalibracionD0Ev>:
 8004fc4:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004fc8:	f7ff bfec 	b.w	8004fa4 <_ZN20CPantallaCalibracionD0Ev>

08004fcc <_ZN20CPantallaCalibracion4ShowEv>:

 void CPantallaCalibracion::Show()
 {
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
		LeeMemoria();
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 fa59 	bl	800548c <_ZN20CPantallaCalibracion10LeeMemoriaEv>
	 	CPantallaBase::Show();
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7fe f9b9 	bl	8003354 <_ZN13CPantallaBase4ShowEv>
	 	LabelTemperatura->Show();
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	334c      	adds	r3, #76	@ 0x4c
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4610      	mov	r0, r2
 8004ff6:	4798      	blx	r3
		LabelGuardar->Show();
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	334c      	adds	r3, #76	@ 0x4c
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4610      	mov	r0, r2
 800500c:	4798      	blx	r3
		LabelCancelar->Show();
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	334c      	adds	r3, #76	@ 0x4c
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4610      	mov	r0, r2
 8005022:	4798      	blx	r3
		LabelAire->Show();
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	334c      	adds	r3, #76	@ 0x4c
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4610      	mov	r0, r2
 8005038:	4798      	blx	r3
		TextTemperatura->Show();
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	334c      	adds	r3, #76	@ 0x4c
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4610      	mov	r0, r2
 800504e:	4798      	blx	r3
		LabelDiferencia->Show();
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	334c      	adds	r3, #76	@ 0x4c
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4610      	mov	r0, r2
 8005064:	4798      	blx	r3
		TextDiferencia->Show();
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	334c      	adds	r3, #76	@ 0x4c
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4610      	mov	r0, r2
 800507a:	4798      	blx	r3
	 	LabelTemperatura2->Show();
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	334c      	adds	r3, #76	@ 0x4c
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4610      	mov	r0, r2
 8005090:	4798      	blx	r3
		TextTemperatura2->Show();
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	334c      	adds	r3, #76	@ 0x4c
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4610      	mov	r0, r2
 80050a6:	4798      	blx	r3
		MuestraInformacion();
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 f821 	bl	80050f0 <_ZN20CPantallaCalibracion18MuestraInformacionEv>
 }
 80050ae:	bf00      	nop
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <_ZN20CPantallaCalibracion8RefrescaEv>:
void CPantallaCalibracion::Refresca()
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b082      	sub	sp, #8
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
	MuestraInformacion();
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f816 	bl	80050f0 <_ZN20CPantallaCalibracion18MuestraInformacionEv>
}
 80050c4:	bf00      	nop
 80050c6:	3708      	adds	r7, #8
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <_ZN20CPantallaCalibracion21OnBotonTresClickEventEv>:
void CPantallaCalibracion::OnBotonTresClickEvent()
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
	 ManejadorPantallas.MuestraMenuPrincipal();
 80050d4:	4803      	ldr	r0, [pc, #12]	@ (80050e4 <_ZN20CPantallaCalibracion21OnBotonTresClickEventEv+0x18>)
 80050d6:	f7fe fe37 	bl	8003d48 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>

}
 80050da:	bf00      	nop
 80050dc:	3708      	adds	r7, #8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	20000258 	.word	0x20000258

080050e8 <_ZThn48_N20CPantallaCalibracion21OnBotonTresClickEventEv>:
	virtual void Show();
	virtual void Refresca();
	virtual void OnBotonTresClickEvent();
 80050e8:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80050ec:	f7ff bfee 	b.w	80050cc <_ZN20CPantallaCalibracion21OnBotonTresClickEventEv>

080050f0 <_ZN20CPantallaCalibracion18MuestraInformacionEv>:
void CPantallaCalibracion::MuestraInformacion()
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
	LeeDatosEstacion();
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	3388      	adds	r3, #136	@ 0x88
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	4798      	blx	r3

	if(TemperaturaAnterior!=Temperatura)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8005110:	429a      	cmp	r2, r3
 8005112:	d01a      	beq.n	800514a <_ZN20CPantallaCalibracion18MuestraInformacionEv+0x5a>
	{
		TextTemperatura->SetTexto((char*)"%d", Temperatura);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8005120:	461a      	mov	r2, r3
 8005122:	492f      	ldr	r1, [pc, #188]	@ (80051e0 <_ZN20CPantallaCalibracion18MuestraInformacionEv+0xf0>)
 8005124:	f7fd feac 	bl	8002e80 <_ZN12CEtiquetaTft8SetTextoEPcz>
		TextTemperatura->Show();
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	334c      	adds	r3, #76	@ 0x4c
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4610      	mov	r0, r2
 800513c:	4798      	blx	r3
		TemperaturaAnterior=Temperatura;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
	}

	if(DiferenciaAnterior!=Diferencia)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005156:	429a      	cmp	r2, r3
 8005158:	d01a      	beq.n	8005190 <_ZN20CPantallaCalibracion18MuestraInformacionEv+0xa0>
	{
		DiferenciaAnterior=Diferencia;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
		TextDiferencia->SetTexto((char*)"%d",Diferencia);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005172:	461a      	mov	r2, r3
 8005174:	491a      	ldr	r1, [pc, #104]	@ (80051e0 <_ZN20CPantallaCalibracion18MuestraInformacionEv+0xf0>)
 8005176:	f7fd fe83 	bl	8002e80 <_ZN12CEtiquetaTft8SetTextoEPcz>
		TextDiferencia->Show();
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	334c      	adds	r3, #76	@ 0x4c
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4610      	mov	r0, r2
 800518e:	4798      	blx	r3
	}

	if( VelocidadAireAnterior!=VelocidadAire)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800519c:	429a      	cmp	r2, r3
 800519e:	d01a      	beq.n	80051d6 <_ZN20CPantallaCalibracion18MuestraInformacionEv+0xe6>
	{
		LabelAire->SetTexto((char*)"Aire: %d", VelocidadAire);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80051ac:	461a      	mov	r2, r3
 80051ae:	490d      	ldr	r1, [pc, #52]	@ (80051e4 <_ZN20CPantallaCalibracion18MuestraInformacionEv+0xf4>)
 80051b0:	f7fd fe66 	bl	8002e80 <_ZN12CEtiquetaTft8SetTextoEPcz>
		LabelAire->Show();
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	334c      	adds	r3, #76	@ 0x4c
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4610      	mov	r0, r2
 80051c8:	4798      	blx	r3
		VelocidadAireAnterior=VelocidadAire;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
	}
}
 80051d6:	bf00      	nop
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	080141f0 	.word	0x080141f0
 80051e4:	080141f4 	.word	0x080141f4

080051e8 <_ZN20CPantallaCalibracion24OnBotonPerillaClickEventEv>:
void CPantallaCalibracion::OnBotonPerillaClickEvent()
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
	TemperaturaODiferencia=!TemperaturaODiferencia;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 80051f6:	f083 0301 	eor.w	r3, r3, #1
 80051fa:	b2da      	uxtb	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
	if(TemperaturaODiferencia==true)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8005208:	2b01      	cmp	r3, #1
 800520a:	d110      	bne.n	800522e <_ZN20CPantallaCalibracion24OnBotonPerillaClickEventEv+0x46>
	{
		TextTemperatura->SetBackColor(COLOR::WHITE);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005212:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005216:	4618      	mov	r0, r3
 8005218:	f7fd ffc8 	bl	80031ac <_ZN12CEtiquetaTft12SetBackColorEi>
		TextDiferencia->SetBackColor(COLOR::GREY);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005222:	f64d 61de 	movw	r1, #57054	@ 0xdede
 8005226:	4618      	mov	r0, r3
 8005228:	f7fd ffc0 	bl	80031ac <_ZN12CEtiquetaTft12SetBackColorEi>
 800522c:	e00f      	b.n	800524e <_ZN20CPantallaCalibracion24OnBotonPerillaClickEventEv+0x66>
	}
	else
	{
		TextTemperatura->SetBackColor(COLOR::GREY);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005234:	f64d 61de 	movw	r1, #57054	@ 0xdede
 8005238:	4618      	mov	r0, r3
 800523a:	f7fd ffb7 	bl	80031ac <_ZN12CEtiquetaTft12SetBackColorEi>
		TextDiferencia->SetBackColor(COLOR::WHITE);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005244:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005248:	4618      	mov	r0, r3
 800524a:	f7fd ffaf 	bl	80031ac <_ZN12CEtiquetaTft12SetBackColorEi>
	}
	TextTemperatura->Show();
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	334c      	adds	r3, #76	@ 0x4c
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4610      	mov	r0, r2
 8005262:	4798      	blx	r3
	TextDiferencia->Show();
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	334c      	adds	r3, #76	@ 0x4c
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4610      	mov	r0, r2
 8005278:	4798      	blx	r3
}
 800527a:	bf00      	nop
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <_ZThn48_N20CPantallaCalibracion24OnBotonPerillaClickEventEv>:
	virtual void OnPerillaIncremento();
	virtual void OnPerillaDecremento();
	virtual void OnBotonPerillaClickEvent();
 8005282:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005286:	f7ff bfaf 	b.w	80051e8 <_ZN20CPantallaCalibracion24OnBotonPerillaClickEventEv>
	...

0800528c <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv>:

void CPantallaCalibracion::OnPerillaIncremento()
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
	if(TemperaturaODiferencia==true)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 800529a:	2b01      	cmp	r3, #1
 800529c:	d122      	bne.n	80052e4 <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv+0x58>
	{
		if(Temperatura<=500)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80052a4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80052a8:	dc06      	bgt.n	80052b8 <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv+0x2c>
			Temperatura++;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80052b0:	1c5a      	adds	r2, r3, #1
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
		TextTemperatura->SetTexto((char*)"%d",Temperatura);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80052c4:	461a      	mov	r2, r3
 80052c6:	492e      	ldr	r1, [pc, #184]	@ (8005380 <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv+0xf4>)
 80052c8:	f7fd fdda 	bl	8002e80 <_ZN12CEtiquetaTft8SetTextoEPcz>
		TextTemperatura->Show();
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	334c      	adds	r3, #76	@ 0x4c
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4610      	mov	r0, r2
 80052e0:	4798      	blx	r3
 80052e2:	e02f      	b.n	8005344 <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv+0xb8>
	}
	else
	{
		if(Diferencia>=500)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80052ea:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80052ee:	da43      	bge.n	8005378 <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv+0xec>
			return;
		Diferencia++;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80052f6:	1c5a      	adds	r2, r3, #1
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
		Estacion->SetTemperatura(Temperatura);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	330c      	adds	r3, #12
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	f8d2 20d0 	ldr.w	r2, [r2, #208]	@ 0xd0
 8005316:	4611      	mov	r1, r2
 8005318:	4798      	blx	r3
		TextDiferencia->SetTexto((char*)"%d",Diferencia);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005326:	461a      	mov	r2, r3
 8005328:	4915      	ldr	r1, [pc, #84]	@ (8005380 <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv+0xf4>)
 800532a:	f7fd fda9 	bl	8002e80 <_ZN12CEtiquetaTft8SetTextoEPcz>
		TextDiferencia->Show();
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	334c      	adds	r3, #76	@ 0x4c
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4610      	mov	r0, r2
 8005342:	4798      	blx	r3
	}
	TextTemperatura2->SetTexto((char*)"%d",Temperatura+Diferencia);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005356:	4413      	add	r3, r2
 8005358:	461a      	mov	r2, r3
 800535a:	4909      	ldr	r1, [pc, #36]	@ (8005380 <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv+0xf4>)
 800535c:	f7fd fd90 	bl	8002e80 <_ZN12CEtiquetaTft8SetTextoEPcz>
	TextTemperatura2->Show();
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	334c      	adds	r3, #76	@ 0x4c
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4610      	mov	r0, r2
 8005374:	4798      	blx	r3
 8005376:	e000      	b.n	800537a <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv+0xee>
			return;
 8005378:	bf00      	nop
}
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	080141f0 	.word	0x080141f0

08005384 <_ZThn48_N20CPantallaCalibracion19OnPerillaIncrementoEv>:
	virtual void OnPerillaIncremento();
 8005384:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005388:	f7ff bf80 	b.w	800528c <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv>

0800538c <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv>:
void CPantallaCalibracion::OnPerillaDecremento()
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
	if(TemperaturaODiferencia==true)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 800539a:	2b01      	cmp	r3, #1
 800539c:	d12f      	bne.n	80053fe <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv+0x72>
	{
		if(Temperatura<=0)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	dd66      	ble.n	8005476 <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv+0xea>
			return;
		Temperatura--;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80053ae:	1e5a      	subs	r2, r3, #1
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
		Estacion->SetTemperatura(Temperatura);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	330c      	adds	r3, #12
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	f8d2 20d0 	ldr.w	r2, [r2, #208]	@ 0xd0
 80053ce:	4611      	mov	r1, r2
 80053d0:	4798      	blx	r3
		TextTemperatura->SetTexto((char*)"%d",Temperatura);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80053de:	461a      	mov	r2, r3
 80053e0:	4927      	ldr	r1, [pc, #156]	@ (8005480 <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv+0xf4>)
 80053e2:	f7fd fd4d 	bl	8002e80 <_ZN12CEtiquetaTft8SetTextoEPcz>
		TextTemperatura->Show();
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	334c      	adds	r3, #76	@ 0x4c
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4610      	mov	r0, r2
 80053fa:	4798      	blx	r3
 80053fc:	e021      	b.n	8005442 <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv+0xb6>
	}
	else
	{
		if(Diferencia>-500)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005404:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 8005408:	dd06      	ble.n	8005418 <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv+0x8c>
			Diferencia--;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005410:	1e5a      	subs	r2, r3, #1
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
		TextDiferencia->SetTexto((char*)"%d",Diferencia);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005424:	461a      	mov	r2, r3
 8005426:	4916      	ldr	r1, [pc, #88]	@ (8005480 <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv+0xf4>)
 8005428:	f7fd fd2a 	bl	8002e80 <_ZN12CEtiquetaTft8SetTextoEPcz>
		TextDiferencia->Show();
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	334c      	adds	r3, #76	@ 0x4c
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4610      	mov	r0, r2
 8005440:	4798      	blx	r3
	}
	TextTemperatura2->SetTexto((char*)"%d",Temperatura+Diferencia);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005454:	4413      	add	r3, r2
 8005456:	461a      	mov	r2, r3
 8005458:	4909      	ldr	r1, [pc, #36]	@ (8005480 <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv+0xf4>)
 800545a:	f7fd fd11 	bl	8002e80 <_ZN12CEtiquetaTft8SetTextoEPcz>
	TextTemperatura2->Show();
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	334c      	adds	r3, #76	@ 0x4c
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4610      	mov	r0, r2
 8005472:	4798      	blx	r3
 8005474:	e000      	b.n	8005478 <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv+0xec>
			return;
 8005476:	bf00      	nop
}
 8005478:	3708      	adds	r7, #8
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	080141f0 	.word	0x080141f0

08005484 <_ZThn48_N20CPantallaCalibracion19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 8005484:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005488:	f7ff bf80 	b.w	800538c <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv>

0800548c <_ZN20CPantallaCalibracion10LeeMemoriaEv>:

void CPantallaCalibracion::LeeMemoria()
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
// 	uint16_t diferencia;
 //	uint16_t temperatura;

	Temperatura=Eprom.DameTemperaturaManual();
 8005494:	480f      	ldr	r0, [pc, #60]	@ (80054d4 <_ZN20CPantallaCalibracion10LeeMemoriaEv+0x48>)
 8005496:	f7fb fff5 	bl	8001484 <_ZN6CEprom21DameTemperaturaManualEv>
 800549a:	4602      	mov	r2, r0
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	Diferencia=Eprom.DameAjusteTemperatura();
 80054a2:	480c      	ldr	r0, [pc, #48]	@ (80054d4 <_ZN20CPantallaCalibracion10LeeMemoriaEv+0x48>)
 80054a4:	f7fc f850 	bl	8001548 <_ZN6CEprom21DameAjusteTemperaturaEv>
 80054a8:	4602      	mov	r2, r0
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	Estacion->SetTemperatura(Temperatura);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	330c      	adds	r3, #12
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	f8d2 20d0 	ldr.w	r2, [r2, #208]	@ 0xd0
 80054c8:	4611      	mov	r1, r2
 80054ca:	4798      	blx	r3
 	 	{
 	 		Diferencia=diferencia;
 	 	}
	}
	*/
}
 80054cc:	bf00      	nop
 80054ce:	3708      	adds	r7, #8
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	20000318 	.word	0x20000318

080054d8 <_ZN20CPantallaCalibracion16LeeDatosEstacionEv>:
void CPantallaCalibracion::LeeDatosEstacion()
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
//	SetTemperatura = Estacion->GetTemperatura();
//	Temperatura = Estacion->GetTemperaturaRealx();
	VelocidadAire = ManejadorControles->GetNivelAire();
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80054e6:	4618      	mov	r0, r3
 80054e8:	f004 fc79 	bl	8009dde <_ZN19CManejadorControles12GetNivelAireEv>
 80054ec:	4602      	mov	r2, r0
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	Estacion->SetNivelAire(VelocidadAire);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	3314      	adds	r3, #20
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	f8d2 20dc 	ldr.w	r2, [r2, #220]	@ 0xdc
 800550c:	4611      	mov	r1, r2
 800550e:	4798      	blx	r3
//	EstadoBoquilla=Estacion->GetEstado();
}
 8005510:	bf00      	nop
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <_ZN20CPantallaCalibracion20OnBotonUnoClickEventEv>:
void CPantallaCalibracion::OnBotonUnoClickEvent()
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
	Eprom.GuardaAjusteTemperatura(Diferencia);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005526:	4619      	mov	r1, r3
 8005528:	4804      	ldr	r0, [pc, #16]	@ (800553c <_ZN20CPantallaCalibracion20OnBotonUnoClickEventEv+0x24>)
 800552a:	f7fc f853 	bl	80015d4 <_ZN6CEprom23GuardaAjusteTemperaturaEi>
	/*
 	uint16_t diferencia=Diferencia;
	HAL_I2C_Mem_Write(&hi2c1,ADDRESS_EEPROM,DIRMEMORIARPROM::AJUSTETEMPERATURA,I2C_MEMADD_SIZE_8BIT,(uint8_t*)&diferencia,2,HAL_MAX_DELAY);
	*/
	 ManejadorPantallas.MuestraMenuPrincipal();
 800552e:	4804      	ldr	r0, [pc, #16]	@ (8005540 <_ZN20CPantallaCalibracion20OnBotonUnoClickEventEv+0x28>)
 8005530:	f7fe fc0a 	bl	8003d48 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>
}
 8005534:	bf00      	nop
 8005536:	3708      	adds	r7, #8
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	20000318 	.word	0x20000318
 8005540:	20000258 	.word	0x20000258

08005544 <_ZThn48_N20CPantallaCalibracion20OnBotonUnoClickEventEv>:
	virtual void LeeDatosEstacion();
	virtual void OnBotonUnoClickEvent();
 8005544:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005548:	f7ff bfe6 	b.w	8005518 <_ZN20CPantallaCalibracion20OnBotonUnoClickEventEv>

0800554c <_ZN26CPantallaInicializaMemoriaC1Ev>:
#include <GUI/PantallaManual/CPantallaManual.hpp>
#include <GUI/ManejadorPantallas/CManejadorPantallas.hpp>
#include <RapaTemperatura/CControladorRampas.hpp>
#include <GUI/ManejadorPantallas/CManejadorPantallas.hpp>

CPantallaInicializaMemoria::CPantallaInicializaMemoria():
 800554c:	b590      	push	{r4, r7, lr}
 800554e:	b089      	sub	sp, #36	@ 0x24
 8005550:	af06      	add	r7, sp, #24
 8005552:	6078      	str	r0, [r7, #4]
	CPantallaBase(1, (char*)"Iniciando memoria")
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a24      	ldr	r2, [pc, #144]	@ (80055e8 <_ZN26CPantallaInicializaMemoriaC1Ev+0x9c>)
 8005558:	2101      	movs	r1, #1
 800555a:	4618      	mov	r0, r3
 800555c:	f7fd fe88 	bl	8003270 <_ZN13CPantallaBaseC1EiPc>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	33ac      	adds	r3, #172	@ 0xac
 8005564:	4618      	mov	r0, r3
 8005566:	f004 fee7 	bl	800a338 <_ZN16CControlProgresoC1Ev>
 800556a:	4a20      	ldr	r2, [pc, #128]	@ (80055ec <_ZN26CPantallaInicializaMemoriaC1Ev+0xa0>)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	4a1f      	ldr	r2, [pc, #124]	@ (80055f0 <_ZN26CPantallaInicializaMemoriaC1Ev+0xa4>)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	631a      	str	r2, [r3, #48]	@ 0x30
 8005576:	4a1f      	ldr	r2, [pc, #124]	@ (80055f4 <_ZN26CPantallaInicializaMemoriaC1Ev+0xa8>)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

{
	// TODO Auto-generated constructor stub
	BarraProgreso=new CBarraProgreso(10, 100, 300,20);
 800557e:	203c      	movs	r0, #60	@ 0x3c
 8005580:	f00b ff4c 	bl	801141c <_Znwj>
 8005584:	4603      	mov	r3, r0
 8005586:	461c      	mov	r4, r3
 8005588:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800558c:	9304      	str	r3, [sp, #16]
 800558e:	2300      	movs	r3, #0
 8005590:	9303      	str	r3, [sp, #12]
 8005592:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8005596:	9302      	str	r3, [sp, #8]
 8005598:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800559c:	9301      	str	r3, [sp, #4]
 800559e:	2314      	movs	r3, #20
 80055a0:	9300      	str	r3, [sp, #0]
 80055a2:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80055a6:	2264      	movs	r2, #100	@ 0x64
 80055a8:	210a      	movs	r1, #10
 80055aa:	4620      	mov	r0, r4
 80055ac:	f7fd f974 	bl	8002898 <_ZN14CBarraProgresoC1Eiiiiiiii>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f8c3 40b0 	str.w	r4, [r3, #176]	@ 0xb0
	BarraProgreso->SetMaximo(100);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80055bc:	2164      	movs	r1, #100	@ 0x64
 80055be:	4618      	mov	r0, r3
 80055c0:	f7fd f9ae 	bl	8002920 <_ZN14CBarraProgreso9SetMaximoEi>
	BarraProgreso->SetValor(0);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80055ca:	2100      	movs	r1, #0
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7fd f9b5 	bl	800293c <_ZN14CBarraProgreso8SetValorEi>
	ControladorRampas.SetControlProgreso(this);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	33ac      	adds	r3, #172	@ 0xac
 80055d6:	4619      	mov	r1, r3
 80055d8:	4807      	ldr	r0, [pc, #28]	@ (80055f8 <_ZN26CPantallaInicializaMemoriaC1Ev+0xac>)
 80055da:	f005 fc33 	bl	800ae44 <_ZN18CControladorRampas18SetControlProgresoEP16CControlProgreso>
}
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4618      	mov	r0, r3
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd90      	pop	{r4, r7, pc}
 80055e8:	08014200 	.word	0x08014200
 80055ec:	08014b9c 	.word	0x08014b9c
 80055f0:	08014c24 	.word	0x08014c24
 80055f4:	08014c58 	.word	0x08014c58
 80055f8:	20000360 	.word	0x20000360

080055fc <_ZN26CPantallaInicializaMemoriaD1Ev>:

CPantallaInicializaMemoria::~CPantallaInicializaMemoria()
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	4a0b      	ldr	r2, [pc, #44]	@ (8005634 <_ZN26CPantallaInicializaMemoriaD1Ev+0x38>)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	601a      	str	r2, [r3, #0]
 800560a:	4a0b      	ldr	r2, [pc, #44]	@ (8005638 <_ZN26CPantallaInicializaMemoriaD1Ev+0x3c>)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005610:	4a0a      	ldr	r2, [pc, #40]	@ (800563c <_ZN26CPantallaInicializaMemoriaD1Ev+0x40>)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	// TODO Auto-generated destructor stub
}
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	33ac      	adds	r3, #172	@ 0xac
 800561c:	4618      	mov	r0, r3
 800561e:	f004 fe9b 	bl	800a358 <_ZN16CControlProgresoD1Ev>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4618      	mov	r0, r3
 8005626:	f7fd fdef 	bl	8003208 <_ZN13CPantallaBaseD1Ev>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4618      	mov	r0, r3
 800562e:	3708      	adds	r7, #8
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	08014b9c 	.word	0x08014b9c
 8005638:	08014c24 	.word	0x08014c24
 800563c:	08014c58 	.word	0x08014c58

08005640 <_ZThn48_N26CPantallaInicializaMemoriaD1Ev>:
{
private:
	CBarraProgreso *BarraProgreso;
public:
	CPantallaInicializaMemoria();
	virtual ~CPantallaInicializaMemoria();
 8005640:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005644:	f7ff bfda 	b.w	80055fc <_ZN26CPantallaInicializaMemoriaD1Ev>

08005648 <_ZThn172_N26CPantallaInicializaMemoriaD1Ev>:
 8005648:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 800564c:	f7ff bfd6 	b.w	80055fc <_ZN26CPantallaInicializaMemoriaD1Ev>

08005650 <_ZN26CPantallaInicializaMemoriaD0Ev>:
CPantallaInicializaMemoria::~CPantallaInicializaMemoria()
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
}
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f7ff ffcf 	bl	80055fc <_ZN26CPantallaInicializaMemoriaD1Ev>
 800565e:	21b4      	movs	r1, #180	@ 0xb4
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f00b fed9 	bl	8011418 <_ZdlPvj>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4618      	mov	r0, r3
 800566a:	3708      	adds	r7, #8
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <_ZThn172_N26CPantallaInicializaMemoriaD0Ev>:
 8005670:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8005674:	f7ff bfec 	b.w	8005650 <_ZN26CPantallaInicializaMemoriaD0Ev>

08005678 <_ZThn48_N26CPantallaInicializaMemoriaD0Ev>:
 8005678:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800567c:	f7ff bfe8 	b.w	8005650 <_ZN26CPantallaInicializaMemoriaD0Ev>

08005680 <_ZN26CPantallaInicializaMemoria4ShowEv>:

void CPantallaInicializaMemoria::Show()
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
	CPantallaBase::Show();
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4618      	mov	r0, r3
 800568c:	f7fd fe62 	bl	8003354 <_ZN13CPantallaBase4ShowEv>
	BarraProgreso->Show();
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	334c      	adds	r3, #76	@ 0x4c
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4610      	mov	r0, r2
 80056a4:	4798      	blx	r3
}
 80056a6:	bf00      	nop
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <_ZN26CPantallaInicializaMemoria10OnProgresoEii>:
void CPantallaInicializaMemoria::OnProgreso(int valor, int maximo)
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b084      	sub	sp, #16
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	60f8      	str	r0, [r7, #12]
 80056b6:	60b9      	str	r1, [r7, #8]
 80056b8:	607a      	str	r2, [r7, #4]
	BarraProgreso->SetMaximo(maximo);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80056c0:	6879      	ldr	r1, [r7, #4]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7fd f92c 	bl	8002920 <_ZN14CBarraProgreso9SetMaximoEi>
	BarraProgreso->SetValor(valor);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80056ce:	68b9      	ldr	r1, [r7, #8]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f7fd f933 	bl	800293c <_ZN14CBarraProgreso8SetValorEi>
	BarraProgreso->Show();
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	334c      	adds	r3, #76	@ 0x4c
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4610      	mov	r0, r2
 80056ea:	4798      	blx	r3
}
 80056ec:	bf00      	nop
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <_ZThn172_N26CPantallaInicializaMemoria10OnProgresoEii>:
	virtual void Show();
	virtual void OnProgreso(int valor, int maximo);
 80056f4:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 80056f8:	f7ff bfd9 	b.w	80056ae <_ZN26CPantallaInicializaMemoria10OnProgresoEii>

080056fc <_ZN26CPantallaInicializaMemoria13OnFinProgresoEv>:
void CPantallaInicializaMemoria::OnFinProgreso()
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaManual();
 8005704:	4803      	ldr	r0, [pc, #12]	@ (8005714 <_ZN26CPantallaInicializaMemoria13OnFinProgresoEv+0x18>)
 8005706:	f7fe fb03 	bl	8003d10 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
}
 800570a:	bf00      	nop
 800570c:	3708      	adds	r7, #8
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	20000258 	.word	0x20000258

08005718 <_ZThn172_N26CPantallaInicializaMemoria13OnFinProgresoEv>:
//	virtual void OnMensaje(char *texto);
	virtual void OnFinProgreso();
 8005718:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 800571c:	f7ff bfee 	b.w	80056fc <_ZN26CPantallaInicializaMemoria13OnFinProgresoEv>

08005720 <_ZN26CPantallaInicializaMemoria8RefrescaEv>:
void CPantallaInicializaMemoria::Refresca()
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
	ControladorRampas.InicializaMemoria();
 8005728:	4803      	ldr	r0, [pc, #12]	@ (8005738 <_ZN26CPantallaInicializaMemoria8RefrescaEv+0x18>)
 800572a:	f005 facb 	bl	800acc4 <_ZN18CControladorRampas17InicializaMemoriaEv>
}
 800572e:	bf00      	nop
 8005730:	3708      	adds	r7, #8
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	20000360 	.word	0x20000360

0800573c <_ZN15CPantallaManualD1Ev>:
#include <EPROM/CEprom.hpp>

extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart1;

CPantallaManual::~CPantallaManual()
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	4a07      	ldr	r2, [pc, #28]	@ (8005764 <_ZN15CPantallaManualD1Ev+0x28>)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	601a      	str	r2, [r3, #0]
 800574a:	4a07      	ldr	r2, [pc, #28]	@ (8005768 <_ZN15CPantallaManualD1Ev+0x2c>)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4618      	mov	r0, r3
 8005754:	f7fd fd58 	bl	8003208 <_ZN13CPantallaBaseD1Ev>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4618      	mov	r0, r3
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	08014c74 	.word	0x08014c74
 8005768:	08014d24 	.word	0x08014d24

0800576c <_ZThn48_N15CPantallaManualD1Ev>:
	CEtiquetaTft *LabelEstado;
	int NivelAire = 0;

public:
	CPantallaManual(CEstacionBase *estacion);
	virtual ~CPantallaManual();
 800576c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005770:	f7ff bfe4 	b.w	800573c <_ZN15CPantallaManualD1Ev>

08005774 <_ZN15CPantallaManualD0Ev>:
CPantallaManual::~CPantallaManual()
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
}
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f7ff ffdd 	bl	800573c <_ZN15CPantallaManualD1Ev>
 8005782:	21ec      	movs	r1, #236	@ 0xec
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f00b fe47 	bl	8011418 <_ZdlPvj>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4618      	mov	r0, r3
 800578e:	3708      	adds	r7, #8
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <_ZThn48_N15CPantallaManualD0Ev>:
 8005794:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005798:	f7ff bfec 	b.w	8005774 <_ZN15CPantallaManualD0Ev>

0800579c <_ZN15CPantallaManualC1Ev>:

CPantallaManual::CPantallaManual() :
 800579c:	b590      	push	{r4, r7, lr}
 800579e:	b08d      	sub	sp, #52	@ 0x34
 80057a0:	af08      	add	r7, sp, #32
 80057a2:	6078      	str	r0, [r7, #4]
		CPantallaBase(1, (char*)"   Modo: Manual")
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a77      	ldr	r2, [pc, #476]	@ (8005984 <_ZN15CPantallaManualC1Ev+0x1e8>)
 80057a8:	2101      	movs	r1, #1
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7fd fd60 	bl	8003270 <_ZN13CPantallaBaseC1EiPc>
 80057b0:	4a75      	ldr	r2, [pc, #468]	@ (8005988 <_ZN15CPantallaManualC1Ev+0x1ec>)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	4a75      	ldr	r2, [pc, #468]	@ (800598c <_ZN15CPantallaManualC1Ev+0x1f0>)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f04f 32ff 	mov.w	r2, #4294967295
 80057ca:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f04f 32ff 	mov.w	r2, #4294967295
 80057d4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f04f 32ff 	mov.w	r2, #4294967295
 80057de:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f04f 32ff 	mov.w	r2, #4294967295
 80057f0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
{
	LabelTemperatura = new CEtiquetaTft( 5, 35, 50, 20, COLOR::BLACK,(char*)"Temperatura", COLOR::WHITE, 3, 0, COLOR::WHITE);
 800581c:	20a4      	movs	r0, #164	@ 0xa4
 800581e:	f00b fdfd 	bl	801141c <_Znwj>
 8005822:	4603      	mov	r3, r0
 8005824:	461c      	mov	r4, r3
 8005826:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800582a:	9306      	str	r3, [sp, #24]
 800582c:	2300      	movs	r3, #0
 800582e:	9305      	str	r3, [sp, #20]
 8005830:	2303      	movs	r3, #3
 8005832:	9304      	str	r3, [sp, #16]
 8005834:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005838:	9303      	str	r3, [sp, #12]
 800583a:	4b55      	ldr	r3, [pc, #340]	@ (8005990 <_ZN15CPantallaManualC1Ev+0x1f4>)
 800583c:	9302      	str	r3, [sp, #8]
 800583e:	2300      	movs	r3, #0
 8005840:	9301      	str	r3, [sp, #4]
 8005842:	2314      	movs	r3, #20
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	2332      	movs	r3, #50	@ 0x32
 8005848:	2223      	movs	r2, #35	@ 0x23
 800584a:	2105      	movs	r1, #5
 800584c:	4620      	mov	r0, r4
 800584e:	f7fd fadd 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8c3 40d4 	str.w	r4, [r3, #212]	@ 0xd4
	int centroX = DameCentroX();
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4618      	mov	r0, r3
 800585c:	f7fd ff20 	bl	80036a0 <_ZN14CRectanguloTft11DameCentroXEv>
 8005860:	60f8      	str	r0, [r7, #12]
	LabelTemperaturas = new CEtiquetaTft( centroX - 150 / 2, 65, 150, 30,COLOR::WHITE,(char*) "000/000", COLOR::BLACK, 3, 1, COLOR::RED);
 8005862:	20a4      	movs	r0, #164	@ 0xa4
 8005864:	f00b fdda 	bl	801141c <_Znwj>
 8005868:	4603      	mov	r3, r0
 800586a:	461c      	mov	r4, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f1a3 014b 	sub.w	r1, r3, #75	@ 0x4b
 8005872:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005876:	9306      	str	r3, [sp, #24]
 8005878:	2301      	movs	r3, #1
 800587a:	9305      	str	r3, [sp, #20]
 800587c:	2303      	movs	r3, #3
 800587e:	9304      	str	r3, [sp, #16]
 8005880:	2300      	movs	r3, #0
 8005882:	9303      	str	r3, [sp, #12]
 8005884:	4b43      	ldr	r3, [pc, #268]	@ (8005994 <_ZN15CPantallaManualC1Ev+0x1f8>)
 8005886:	9302      	str	r3, [sp, #8]
 8005888:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800588c:	9301      	str	r3, [sp, #4]
 800588e:	231e      	movs	r3, #30
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	2396      	movs	r3, #150	@ 0x96
 8005894:	2241      	movs	r2, #65	@ 0x41
 8005896:	4620      	mov	r0, r4
 8005898:	f7fd fab8 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8c3 40d8 	str.w	r4, [r3, #216]	@ 0xd8
	LabelTemperaturas->SetSeparacion(5, 5);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80058a8:	2205      	movs	r2, #5
 80058aa:	2105      	movs	r1, #5
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7fd fc1d 	bl	80030ec <_ZN12CEtiquetaTft13SetSeparacionEii>
	LabelAire1 = new CEtiquetaTft( 5, 105, 200, 30, COLOR::BLACK, (char*)"Aire:",COLOR::WHITE, 3, 0, COLOR::RED);
 80058b2:	20a4      	movs	r0, #164	@ 0xa4
 80058b4:	f00b fdb2 	bl	801141c <_Znwj>
 80058b8:	4603      	mov	r3, r0
 80058ba:	461c      	mov	r4, r3
 80058bc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80058c0:	9306      	str	r3, [sp, #24]
 80058c2:	2300      	movs	r3, #0
 80058c4:	9305      	str	r3, [sp, #20]
 80058c6:	2303      	movs	r3, #3
 80058c8:	9304      	str	r3, [sp, #16]
 80058ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80058ce:	9303      	str	r3, [sp, #12]
 80058d0:	4b31      	ldr	r3, [pc, #196]	@ (8005998 <_ZN15CPantallaManualC1Ev+0x1fc>)
 80058d2:	9302      	str	r3, [sp, #8]
 80058d4:	2300      	movs	r3, #0
 80058d6:	9301      	str	r3, [sp, #4]
 80058d8:	231e      	movs	r3, #30
 80058da:	9300      	str	r3, [sp, #0]
 80058dc:	23c8      	movs	r3, #200	@ 0xc8
 80058de:	2269      	movs	r2, #105	@ 0x69
 80058e0:	2105      	movs	r1, #5
 80058e2:	4620      	mov	r0, r4
 80058e4:	f7fd fa92 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8c3 40dc 	str.w	r4, [r3, #220]	@ 0xdc
	LabelAire2 = new CEtiquetaTft( 110, 105, 100, 30, COLOR::WHITE, (char*)"00",COLOR::BLACK, 3, 0, COLOR::RED);
 80058ee:	20a4      	movs	r0, #164	@ 0xa4
 80058f0:	f00b fd94 	bl	801141c <_Znwj>
 80058f4:	4603      	mov	r3, r0
 80058f6:	461c      	mov	r4, r3
 80058f8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80058fc:	9306      	str	r3, [sp, #24]
 80058fe:	2300      	movs	r3, #0
 8005900:	9305      	str	r3, [sp, #20]
 8005902:	2303      	movs	r3, #3
 8005904:	9304      	str	r3, [sp, #16]
 8005906:	2300      	movs	r3, #0
 8005908:	9303      	str	r3, [sp, #12]
 800590a:	4b24      	ldr	r3, [pc, #144]	@ (800599c <_ZN15CPantallaManualC1Ev+0x200>)
 800590c:	9302      	str	r3, [sp, #8]
 800590e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005912:	9301      	str	r3, [sp, #4]
 8005914:	231e      	movs	r3, #30
 8005916:	9300      	str	r3, [sp, #0]
 8005918:	2364      	movs	r3, #100	@ 0x64
 800591a:	2269      	movs	r2, #105	@ 0x69
 800591c:	216e      	movs	r1, #110	@ 0x6e
 800591e:	4620      	mov	r0, r4
 8005920:	f7fd fa74 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8c3 40e0 	str.w	r4, [r3, #224]	@ 0xe0
	LabelEstado = new CEtiquetaTft( 5, 145, 300, 35, COLOR::BLACK,(char*)"Estado: REPOSO", COLOR::WHITE, 3, 0, COLOR::RED);
 800592a:	20a4      	movs	r0, #164	@ 0xa4
 800592c:	f00b fd76 	bl	801141c <_Znwj>
 8005930:	4603      	mov	r3, r0
 8005932:	461c      	mov	r4, r3
 8005934:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005938:	9306      	str	r3, [sp, #24]
 800593a:	2300      	movs	r3, #0
 800593c:	9305      	str	r3, [sp, #20]
 800593e:	2303      	movs	r3, #3
 8005940:	9304      	str	r3, [sp, #16]
 8005942:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005946:	9303      	str	r3, [sp, #12]
 8005948:	4b15      	ldr	r3, [pc, #84]	@ (80059a0 <_ZN15CPantallaManualC1Ev+0x204>)
 800594a:	9302      	str	r3, [sp, #8]
 800594c:	2300      	movs	r3, #0
 800594e:	9301      	str	r3, [sp, #4]
 8005950:	2323      	movs	r3, #35	@ 0x23
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8005958:	2291      	movs	r2, #145	@ 0x91
 800595a:	2105      	movs	r1, #5
 800595c:	4620      	mov	r0, r4
 800595e:	f7fd fa55 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8c3 40e4 	str.w	r4, [r3, #228]	@ 0xe4
	LabelEstado->SetSeparacion(15, 5);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800596e:	2205      	movs	r2, #5
 8005970:	210f      	movs	r1, #15
 8005972:	4618      	mov	r0, r3
 8005974:	f7fd fbba 	bl	80030ec <_ZN12CEtiquetaTft13SetSeparacionEii>
}
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4618      	mov	r0, r3
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	bd90      	pop	{r4, r7, pc}
 8005982:	bf00      	nop
 8005984:	08014214 	.word	0x08014214
 8005988:	08014c74 	.word	0x08014c74
 800598c:	08014d24 	.word	0x08014d24
 8005990:	08014224 	.word	0x08014224
 8005994:	08014230 	.word	0x08014230
 8005998:	08014238 	.word	0x08014238
 800599c:	08014240 	.word	0x08014240
 80059a0:	08014244 	.word	0x08014244

080059a4 <_ZN15CPantallaManual13MuestraEstadoEb>:


void CPantallaManual::MuestraEstado(bool forzar)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	460b      	mov	r3, r1
 80059ae:	70fb      	strb	r3, [r7, #3]
	if(forzar==false)
 80059b0:	78fb      	ldrb	r3, [r7, #3]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d116      	bne.n	80059e4 <_ZN15CPantallaManual13MuestraEstadoEb+0x40>
	{
		if(EstadoBoquillaAnterior==EstadoBoquilla )
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d10e      	bne.n	80059e4 <_ZN15CPantallaManual13MuestraEstadoEb+0x40>
		{
			if(EsVisible()==true)
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	3368      	adds	r3, #104	@ 0x68
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4610      	mov	r0, r2
 80059d2:	4798      	blx	r3
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	bf0c      	ite	eq
 80059da:	2301      	moveq	r3, #1
 80059dc:	2300      	movne	r3, #0
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d143      	bne.n	8005a6c <_ZN15CPantallaManual13MuestraEstadoEb+0xc8>
			{
				return;
			}
		}
	}
	EstadoBoquillaAnterior=EstadoBoquilla;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	if (EstadoBoquilla == 1)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d115      	bne.n	8005a26 <_ZN15CPantallaManual13MuestraEstadoEb+0x82>
	{
		LabelEstado->SetColorFondo(COLOR::BLUE);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a00:	211f      	movs	r1, #31
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7fd fe1a 	bl	800363c <_ZN14CRectanguloTft13SetColorFondoEi>
		LabelEstado->SetColorTexto(COLOR::BLACK);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a0e:	2100      	movs	r1, #0
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7fd fb7f 	bl	8003114 <_ZN12CEtiquetaTft13SetColorTextoEi>
		LabelEstado->SetTexto((char*)"Estado: ACTIVO");
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a1c:	4915      	ldr	r1, [pc, #84]	@ (8005a74 <_ZN15CPantallaManual13MuestraEstadoEb+0xd0>)
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7fd fa2e 	bl	8002e80 <_ZN12CEtiquetaTft8SetTextoEPcz>
 8005a24:	e016      	b.n	8005a54 <_ZN15CPantallaManual13MuestraEstadoEb+0xb0>
	}
	else
	{
		LabelEstado->SetColorFondo(COLOR::RED);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a2c:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7fd fe03 	bl	800363c <_ZN14CRectanguloTft13SetColorFondoEi>
		LabelEstado->SetColorTexto(COLOR::WHITE);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a3c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7fd fb67 	bl	8003114 <_ZN12CEtiquetaTft13SetColorTextoEi>
		LabelEstado->SetTexto((char*)"Estado: REPOSO");
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a4c:	490a      	ldr	r1, [pc, #40]	@ (8005a78 <_ZN15CPantallaManual13MuestraEstadoEb+0xd4>)
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7fd fa16 	bl	8002e80 <_ZN12CEtiquetaTft8SetTextoEPcz>
	}
	LabelEstado->Show();
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	334c      	adds	r3, #76	@ 0x4c
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4610      	mov	r0, r2
 8005a68:	4798      	blx	r3
 8005a6a:	e000      	b.n	8005a6e <_ZN15CPantallaManual13MuestraEstadoEb+0xca>
				return;
 8005a6c:	bf00      	nop
}
 8005a6e:	3708      	adds	r7, #8
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	08014254 	.word	0x08014254
 8005a78:	08014244 	.word	0x08014244

08005a7c <_ZN15CPantallaManual16LeeDatosEstacionEv>:

void CPantallaManual::LeeDatosEstacion()
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
	SetTemperatura = Estacion->GetTemperatura();
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	3310      	adds	r3, #16
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4610      	mov	r0, r2
 8005a98:	4798      	blx	r3
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	Temperatura = Estacion->GetTemperaturaRealx();
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	3308      	adds	r3, #8
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	4798      	blx	r3
 8005ab8:	eef0 7a40 	vmov.f32	s15, s0
 8005abc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ac0:	ee17 2a90 	vmov	r2, s15
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	NivelAire = ManejadorControles->GetNivelAire();
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f004 f984 	bl	8009dde <_ZN19CManejadorControles12GetNivelAireEv>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
	Estacion->SetNivelAire(NivelAire);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	3314      	adds	r3, #20
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	f8d2 20e8 	ldr.w	r2, [r2, #232]	@ 0xe8
 8005af6:	4611      	mov	r1, r2
 8005af8:	4798      	blx	r3
	EstadoBoquilla=Estacion->GetEstado();
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	331c      	adds	r3, #28
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4610      	mov	r0, r2
 8005b0e:	4798      	blx	r3
 8005b10:	4602      	mov	r2, r0
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
}
 8005b18:	bf00      	nop
 8005b1a:	3708      	adds	r7, #8
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <_ZN15CPantallaManual19MuestraTemperaturasEb>:


void CPantallaManual::MuestraTemperaturas(bool forzar)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	460b      	mov	r3, r1
 8005b2a:	70fb      	strb	r3, [r7, #3]
	if(forzar==false)
 8005b2c:	78fb      	ldrb	r3, [r7, #3]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10f      	bne.n	8005b52 <_ZN15CPantallaManual19MuestraTemperaturasEb+0x32>
	{
		if(TemperaturaAnterior==Temperatura &&SetTemperaturaAnterior==SetTemperatura)//&& EsVisible()==true )
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d107      	bne.n	8005b52 <_ZN15CPantallaManual19MuestraTemperaturasEb+0x32>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d023      	beq.n	8005b9a <_ZN15CPantallaManual19MuestraTemperaturasEb+0x7a>
			return;
	}

	TemperaturaAnterior=Temperatura;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	SetTemperaturaAnterior=SetTemperatura;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	LabelTemperaturas->SetTexto((char*)"%d/%d", Temperatura, SetTemperatura);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8d3 00d8 	ldr.w	r0, [r3, #216]	@ 0xd8
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005b7c:	4909      	ldr	r1, [pc, #36]	@ (8005ba4 <_ZN15CPantallaManual19MuestraTemperaturasEb+0x84>)
 8005b7e:	f7fd f97f 	bl	8002e80 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelTemperaturas->Show();
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	334c      	adds	r3, #76	@ 0x4c
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4610      	mov	r0, r2
 8005b96:	4798      	blx	r3
 8005b98:	e000      	b.n	8005b9c <_ZN15CPantallaManual19MuestraTemperaturasEb+0x7c>
			return;
 8005b9a:	bf00      	nop
}
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	08014264 	.word	0x08014264

08005ba8 <_ZN15CPantallaManual16OnNivelAireEventEi>:

void CPantallaManual::OnNivelAireEvent(int aire)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
	NivelAire = aire;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	683a      	ldr	r2, [r7, #0]
 8005bb6:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
	Estacion->SetNivelAire(NivelAire);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	3314      	adds	r3, #20
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	f8d2 20e8 	ldr.w	r2, [r2, #232]	@ 0xe8
 8005bd2:	4611      	mov	r1, r2
 8005bd4:	4798      	blx	r3
}
 8005bd6:	bf00      	nop
 8005bd8:	3708      	adds	r7, #8
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <_ZThn48_N15CPantallaManual16OnNivelAireEventEi>:
	CPantallaManual();
	virtual void Show();
	virtual void Refresca();

private:
	void OnNivelAireEvent(int aire);
 8005bde:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005be2:	f7ff bfe1 	b.w	8005ba8 <_ZN15CPantallaManual16OnNivelAireEventEi>
	...

08005be8 <_ZN15CPantallaManual16MuestraNivelAireEb>:

void CPantallaManual::MuestraNivelAire(bool forzar)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	70fb      	strb	r3, [r7, #3]
	if(forzar==false)
 8005bf4:	78fb      	ldrb	r3, [r7, #3]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d116      	bne.n	8005c28 <_ZN15CPantallaManual16MuestraNivelAireEb+0x40>
	{
		if(NivelAireAnterior==NivelAire && EsVisible()==true )
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d10b      	bne.n	8005c22 <_ZN15CPantallaManual16MuestraNivelAireEb+0x3a>
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	3368      	adds	r3, #104	@ 0x68
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4610      	mov	r0, r2
 8005c16:	4798      	blx	r3
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d101      	bne.n	8005c22 <_ZN15CPantallaManual16MuestraNivelAireEb+0x3a>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e000      	b.n	8005c24 <_ZN15CPantallaManual16MuestraNivelAireEb+0x3c>
 8005c22:	2300      	movs	r3, #0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d129      	bne.n	8005c7c <_ZN15CPantallaManual16MuestraNivelAireEb+0x94>
			return;
	}
	NivelAireAnterior=NivelAire;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	Estacion->SetNivelAire(NivelAire);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	3314      	adds	r3, #20
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	f8d2 20e8 	ldr.w	r2, [r2, #232]	@ 0xe8
 8005c4c:	4611      	mov	r1, r2
 8005c4e:	4798      	blx	r3
	LabelAire2->SetTexto((char*)"%d", NivelAire);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	4909      	ldr	r1, [pc, #36]	@ (8005c84 <_ZN15CPantallaManual16MuestraNivelAireEb+0x9c>)
 8005c60:	f7fd f90e 	bl	8002e80 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelAire2->Show();
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	334c      	adds	r3, #76	@ 0x4c
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4610      	mov	r0, r2
 8005c78:	4798      	blx	r3
 8005c7a:	e000      	b.n	8005c7e <_ZN15CPantallaManual16MuestraNivelAireEb+0x96>
			return;
 8005c7c:	bf00      	nop

}
 8005c7e:	3708      	adds	r7, #8
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	0801426c 	.word	0x0801426c

08005c88 <_ZN15CPantallaManual22OnTemperaturaRealEventEi>:

void CPantallaManual::OnTemperaturaRealEvent(int temperatura)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
//	Temperatura = temperatura;
}
 8005c92:	bf00      	nop
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr

08005c9e <_ZThn48_N15CPantallaManual22OnTemperaturaRealEventEi>:
	virtual void OnTemperaturaRealEvent(int temperatura);
 8005c9e:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005ca2:	f7ff bff1 	b.w	8005c88 <_ZN15CPantallaManual22OnTemperaturaRealEventEi>

08005ca6 <_ZN15CPantallaManual19OnPerillaIncrementoEv>:

//eventos del Encoder
void CPantallaManual::OnPerillaIncremento()
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b082      	sub	sp, #8
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
	Estacion->IncrementaTemperatura();
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	3320      	adds	r3, #32
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4610      	mov	r0, r2
 8005cc2:	4798      	blx	r3
	TemperaturaGuardada=false;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
}
 8005ccc:	bf00      	nop
 8005cce:	3708      	adds	r7, #8
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <_ZThn48_N15CPantallaManual19OnPerillaIncrementoEv>:

	virtual void OnBotonUnoClickEvent();
	virtual void OnBotonDosClickEvent();
	virtual void OnBotonTresClickEvent();
protected:
	virtual void OnPerillaIncremento();
 8005cd4:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005cd8:	f7ff bfe5 	b.w	8005ca6 <_ZN15CPantallaManual19OnPerillaIncrementoEv>

08005cdc <_ZN15CPantallaManual19OnPerillaDecrementoEv>:

void CPantallaManual::OnPerillaDecremento()
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
	Estacion->DecrementaTemperatura();
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	3324      	adds	r3, #36	@ 0x24
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4610      	mov	r0, r2
 8005cf8:	4798      	blx	r3
	TemperaturaGuardada=false;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
}
 8005d02:	bf00      	nop
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <_ZThn48_N15CPantallaManual19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 8005d0a:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005d0e:	f7ff bfe5 	b.w	8005cdc <_ZN15CPantallaManual19OnPerillaDecrementoEv>

08005d12 <_ZN15CPantallaManual8RefrescaEv>:

void CPantallaManual::Refresca()
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b082      	sub	sp, #8
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
	if(TemperaturaGuardada==false)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d105      	bne.n	8005d30 <_ZN15CPantallaManual8RefrescaEv+0x1e>
		GuardaTemperatura();
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	3398      	adds	r3, #152	@ 0x98
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	4798      	blx	r3
	MuestraInformacion(false);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	33a4      	adds	r3, #164	@ 0xa4
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2100      	movs	r1, #0
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	4798      	blx	r3
}
 8005d3e:	bf00      	nop
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
	...

08005d48 <_ZN15CPantallaManual24OnBotonPerillaClickEventEv>:
 void CPantallaManual::OnBotonPerillaClickEvent()
 {
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
	 ManejadorPantallas.MuestraMenuPrincipal();
 8005d50:	4803      	ldr	r0, [pc, #12]	@ (8005d60 <_ZN15CPantallaManual24OnBotonPerillaClickEventEv+0x18>)
 8005d52:	f7fd fff9 	bl	8003d48 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>
 }
 8005d56:	bf00      	nop
 8005d58:	3708      	adds	r7, #8
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	20000258 	.word	0x20000258

08005d64 <_ZThn48_N15CPantallaManual24OnBotonPerillaClickEventEv>:
	virtual void OnBotonPerillaClickEvent();
 8005d64:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005d68:	f7ff bfee 	b.w	8005d48 <_ZN15CPantallaManual24OnBotonPerillaClickEventEv>

08005d6c <_ZN15CPantallaManual18MuestraInformacionEb>:
 void CPantallaManual::MuestraInformacion(bool forzar)
 {
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	460b      	mov	r3, r1
 8005d76:	70fb      	strb	r3, [r7, #3]
		LeeDatosEstacion();
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	339c      	adds	r3, #156	@ 0x9c
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	4798      	blx	r3
		MuestraTemperaturas(forzar);
 8005d84:	78fb      	ldrb	r3, [r7, #3]
 8005d86:	4619      	mov	r1, r3
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f7ff fec9 	bl	8005b20 <_ZN15CPantallaManual19MuestraTemperaturasEb>
		MuestraEstado(forzar);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	33a0      	adds	r3, #160	@ 0xa0
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	78fa      	ldrb	r2, [r7, #3]
 8005d98:	4611      	mov	r1, r2
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	4798      	blx	r3
		MuestraNivelAire(forzar);
 8005d9e:	78fb      	ldrb	r3, [r7, #3]
 8005da0:	4619      	mov	r1, r3
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f7ff ff20 	bl	8005be8 <_ZN15CPantallaManual16MuestraNivelAireEb>
		//marco como visible
		SetVisible(true);
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	336c      	adds	r3, #108	@ 0x6c
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2101      	movs	r1, #1
 8005db4:	4610      	mov	r0, r2
 8005db6:	4798      	blx	r3

 }
 8005db8:	bf00      	nop
 8005dba:	3708      	adds	r7, #8
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <_ZN15CPantallaManual17GuardaTemperaturaEv>:
 void CPantallaManual::GuardaTemperatura()
 {
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 	uint16_t temperatura=Estacion->GetTemperatura();
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	3310      	adds	r3, #16
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4610      	mov	r0, r2
 8005ddc:	4798      	blx	r3
 8005dde:	4603      	mov	r3, r0
 8005de0:	81fb      	strh	r3, [r7, #14]
// 	uint8_t datos_w[10];
 	int t= HAL_GetTick();
 8005de2:	f007 f9eb 	bl	800d1bc <HAL_GetTick>
 8005de6:	4603      	mov	r3, r0
 8005de8:	60bb      	str	r3, [r7, #8]
 	if(t>tiempoescritura)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	dd0e      	ble.n	8005e14 <_ZN15CPantallaManual17GuardaTemperaturaEv+0x54>
 	{
 		Eprom.GuardaTemepraturaManual(temperatura);
 8005df6:	89fb      	ldrh	r3, [r7, #14]
 8005df8:	4619      	mov	r1, r3
 8005dfa:	4808      	ldr	r0, [pc, #32]	@ (8005e1c <_ZN15CPantallaManual17GuardaTemperaturaEv+0x5c>)
 8005dfc:	f7fb fb7e 	bl	80014fc <_ZN6CEprom23GuardaTemepraturaManualEi>
// 		HAL_I2C_Mem_Write(&hi2c1,ADDRESS_EEPROM,DIRMEMORIARPROM::TEMPERATURAMANUAL,I2C_MEMADD_SIZE_8BIT,(uint8_t*)&temperatura,2,HAL_MAX_DELAY);
 		TemperaturaGuardada=true;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 		tiempoescritura=t+1000;
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 	}

 }
 8005e14:	bf00      	nop
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	20000318 	.word	0x20000318

08005e20 <_ZN15CPantallaManual10LeeMemoriaEv>:
void CPantallaManual::LeeMemoria()
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]

 	uint16_t temperatura=Eprom.DameTemperaturaManual();
 8005e28:	480c      	ldr	r0, [pc, #48]	@ (8005e5c <_ZN15CPantallaManual10LeeMemoriaEv+0x3c>)
 8005e2a:	f7fb fb2b 	bl	8001484 <_ZN6CEprom21DameTemperaturaManualEv>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	81fb      	strh	r3, [r7, #14]
	Estacion->SetTemperatura(temperatura);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	330c      	adds	r3, #12
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	89f9      	ldrh	r1, [r7, #14]
 8005e46:	4610      	mov	r0, r2
 8005e48:	4798      	blx	r3
	TemperaturaGuardada=true;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 		 		Estacion->SetTemperatura(temperatura);
 		 	}
 		 	TemperaturaGuardada=true;
 	  }
 	  */
}
 8005e52:	bf00      	nop
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	20000318 	.word	0x20000318

08005e60 <_ZN15CPantallaManual4ShowEv>:

 void CPantallaManual::Show()
 {
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 	CPantallaBase::Show();
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7fd fa72 	bl	8003354 <_ZN13CPantallaBase4ShowEv>
 	LabelTemperatura->Show();
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	334c      	adds	r3, #76	@ 0x4c
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4610      	mov	r0, r2
 8005e84:	4798      	blx	r3
 	LabelAire1->Show();
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	334c      	adds	r3, #76	@ 0x4c
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4610      	mov	r0, r2
 8005e9a:	4798      	blx	r3
 	//leo la temperatura desde la memoria
 	LeeMemoria();
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f7ff ffbf 	bl	8005e20 <_ZN15CPantallaManual10LeeMemoriaEv>
 	LeeDatosEstacion();
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	339c      	adds	r3, #156	@ 0x9c
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	4798      	blx	r3
 	MuestraInformacion(true);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	33a4      	adds	r3, #164	@ 0xa4
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2101      	movs	r1, #1
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	4798      	blx	r3
 }
 8005ebc:	bf00      	nop
 8005ebe:	3708      	adds	r7, #8
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <_ZN15CPantallaManual21OnBotonTresClickEventEv>:
void CPantallaManual::OnBotonTresClickEvent()
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(3);
 8005ecc:	2103      	movs	r1, #3
 8005ece:	4803      	ldr	r0, [pc, #12]	@ (8005edc <_ZN15CPantallaManual21OnBotonTresClickEventEv+0x18>)
 8005ed0:	f7fe f81a 	bl	8003f08 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 8005ed4:	bf00      	nop
 8005ed6:	3708      	adds	r7, #8
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	20000258 	.word	0x20000258

08005ee0 <_ZThn48_N15CPantallaManual21OnBotonTresClickEventEv>:
	virtual void OnBotonTresClickEvent();
 8005ee0:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005ee4:	f7ff bfee 	b.w	8005ec4 <_ZN15CPantallaManual21OnBotonTresClickEventEv>

08005ee8 <_ZN15CPantallaManual20OnBotonUnoClickEventEv>:
void CPantallaManual::OnBotonUnoClickEvent()
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(1);
 8005ef0:	2101      	movs	r1, #1
 8005ef2:	4803      	ldr	r0, [pc, #12]	@ (8005f00 <_ZN15CPantallaManual20OnBotonUnoClickEventEv+0x18>)
 8005ef4:	f7fe f808 	bl	8003f08 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 8005ef8:	bf00      	nop
 8005efa:	3708      	adds	r7, #8
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	20000258 	.word	0x20000258

08005f04 <_ZThn48_N15CPantallaManual20OnBotonUnoClickEventEv>:
	virtual void OnBotonUnoClickEvent();
 8005f04:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005f08:	f7ff bfee 	b.w	8005ee8 <_ZN15CPantallaManual20OnBotonUnoClickEventEv>

08005f0c <_ZN15CPantallaManual20OnBotonDosClickEventEv>:
void CPantallaManual::OnBotonDosClickEvent()
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(2);
 8005f14:	2102      	movs	r1, #2
 8005f16:	4803      	ldr	r0, [pc, #12]	@ (8005f24 <_ZN15CPantallaManual20OnBotonDosClickEventEv+0x18>)
 8005f18:	f7fd fff6 	bl	8003f08 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 8005f1c:	bf00      	nop
 8005f1e:	3708      	adds	r7, #8
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	20000258 	.word	0x20000258

08005f28 <_ZThn48_N15CPantallaManual20OnBotonDosClickEventEv>:
	virtual void OnBotonDosClickEvent();
 8005f28:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005f2c:	f7ff bfee 	b.w	8005f0c <_ZN15CPantallaManual20OnBotonDosClickEventEv>

08005f30 <_ZN16CPantallaMemoriaD1Ev>:
#include <EPROM/CEprom.hpp>

extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart1;

CPantallaMemoria::~CPantallaMemoria()
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	4a07      	ldr	r2, [pc, #28]	@ (8005f58 <_ZN16CPantallaMemoriaD1Ev+0x28>)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	601a      	str	r2, [r3, #0]
 8005f3e:	4a07      	ldr	r2, [pc, #28]	@ (8005f5c <_ZN16CPantallaMemoriaD1Ev+0x2c>)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7ff fbf8 	bl	800573c <_ZN15CPantallaManualD1Ev>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3708      	adds	r7, #8
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	08014d58 	.word	0x08014d58
 8005f5c:	08014e0c 	.word	0x08014e0c

08005f60 <_ZThn48_N16CPantallaMemoriaD1Ev>:
public:
	virtual void OnPerillaIncremento();
	virtual void OnPerillaDecremento();
	CPantallaMemoria(CEstacionBase *estacion);
	CPantallaMemoria();
	virtual ~CPantallaMemoria();
 8005f60:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005f64:	f7ff bfe4 	b.w	8005f30 <_ZN16CPantallaMemoriaD1Ev>

08005f68 <_ZN16CPantallaMemoriaD0Ev>:
CPantallaMemoria::~CPantallaMemoria()
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
}
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f7ff ffdd 	bl	8005f30 <_ZN16CPantallaMemoriaD1Ev>
 8005f76:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f00b fa4c 	bl	8011418 <_ZdlPvj>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4618      	mov	r0, r3
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <_ZThn48_N16CPantallaMemoriaD0Ev>:
 8005f8a:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005f8e:	f7ff bfeb 	b.w	8005f68 <_ZN16CPantallaMemoriaD0Ev>
	...

08005f94 <_ZN16CPantallaMemoriaC1Ev>:


CPantallaMemoria::CPantallaMemoria() :
 8005f94:	b590      	push	{r4, r7, lr}
 8005f96:	b08d      	sub	sp, #52	@ 0x34
 8005f98:	af08      	add	r7, sp, #32
 8005f9a:	6078      	str	r0, [r7, #4]
		CPantallaManual()
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7ff fbfc 	bl	800579c <_ZN15CPantallaManualC1Ev>
 8005fa4:	4a41      	ldr	r2, [pc, #260]	@ (80060ac <_ZN16CPantallaMemoriaC1Ev+0x118>)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	601a      	str	r2, [r3, #0]
 8005faa:	4a41      	ldr	r2, [pc, #260]	@ (80060b0 <_ZN16CPantallaMemoriaC1Ev+0x11c>)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	631a      	str	r2, [r3, #48]	@ 0x30
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2205      	movs	r2, #5
 8005fbc:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
{
	LabelTitulo->SetTexto((char*)"MODO: MEMORIA");
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fcc:	4939      	ldr	r1, [pc, #228]	@ (80060b4 <_ZN16CPantallaMemoriaC1Ev+0x120>)
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7fc ff56 	bl	8002e80 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelMemoria=new CEtiquetaTft( 5, 35, 50, 20, COLOR::BLACK,(char*)"Memoria: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8005fd4:	20a4      	movs	r0, #164	@ 0xa4
 8005fd6:	f00b fa21 	bl	801141c <_Znwj>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	461c      	mov	r4, r3
 8005fde:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005fe2:	9306      	str	r3, [sp, #24]
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	9305      	str	r3, [sp, #20]
 8005fe8:	2303      	movs	r3, #3
 8005fea:	9304      	str	r3, [sp, #16]
 8005fec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005ff0:	9303      	str	r3, [sp, #12]
 8005ff2:	4b31      	ldr	r3, [pc, #196]	@ (80060b8 <_ZN16CPantallaMemoriaC1Ev+0x124>)
 8005ff4:	9302      	str	r3, [sp, #8]
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	9301      	str	r3, [sp, #4]
 8005ffa:	2314      	movs	r3, #20
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	2332      	movs	r3, #50	@ 0x32
 8006000:	2223      	movs	r2, #35	@ 0x23
 8006002:	2105      	movs	r1, #5
 8006004:	4620      	mov	r0, r4
 8006006:	f7fc ff01 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8c3 40f4 	str.w	r4, [r3, #244]	@ 0xf4
	LabelTemperatura->CambiaPosicion(5,65);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006016:	4618      	mov	r0, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	3350      	adds	r3, #80	@ 0x50
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2241      	movs	r2, #65	@ 0x41
 8006026:	2105      	movs	r1, #5
 8006028:	4798      	blx	r3
	int centroX = DameCentroX();
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4618      	mov	r0, r3
 800602e:	f7fd fb37 	bl	80036a0 <_ZN14CRectanguloTft11DameCentroXEv>
 8006032:	60f8      	str	r0, [r7, #12]
	LabelTemperaturas->CambiaPosicion(centroX - 150 / 2, 95);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800603a:	4618      	mov	r0, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3350      	adds	r3, #80	@ 0x50
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	f1a2 014b 	sub.w	r1, r2, #75	@ 0x4b
 800604e:	225f      	movs	r2, #95	@ 0x5f
 8006050:	4798      	blx	r3
	LabelAire1->CambiaPosicion(5, 135);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006058:	4618      	mov	r0, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	3350      	adds	r3, #80	@ 0x50
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2287      	movs	r2, #135	@ 0x87
 8006068:	2105      	movs	r1, #5
 800606a:	4798      	blx	r3
	LabelAire2->CambiaPosicion(110, 135);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006072:	4618      	mov	r0, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	3350      	adds	r3, #80	@ 0x50
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2287      	movs	r2, #135	@ 0x87
 8006082:	216e      	movs	r1, #110	@ 0x6e
 8006084:	4798      	blx	r3
	LabelEstado->CambiaPosicion(5, 175);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800608c:	4618      	mov	r0, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	3350      	adds	r3, #80	@ 0x50
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	22af      	movs	r2, #175	@ 0xaf
 800609c:	2105      	movs	r1, #5
 800609e:	4798      	blx	r3

}
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4618      	mov	r0, r3
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd90      	pop	{r4, r7, pc}
 80060aa:	bf00      	nop
 80060ac:	08014d58 	.word	0x08014d58
 80060b0:	08014e0c 	.word	0x08014e0c
 80060b4:	08014270 	.word	0x08014270
 80060b8:	08014280 	.word	0x08014280

080060bc <_ZN16CPantallaMemoria17GuardaTemperaturaEv>:


 void CPantallaMemoria::GuardaTemperatura()
 {
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 }
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <_ZN16CPantallaMemoria4ShowEv>:


 void CPantallaMemoria::Show()
 {
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
	 CPantallaManual::Show();
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4618      	mov	r0, r3
 80060dc:	f7ff fec0 	bl	8005e60 <_ZN15CPantallaManual4ShowEv>
 	//leo la temperatura desde la memoria
	LabelMemoria->SetTexto((char*)"Memoria: %d", NumeroMemoria);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8d3 00f4 	ldr.w	r0, [r3, #244]	@ 0xf4
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80060ec:	461a      	mov	r2, r3
 80060ee:	4916      	ldr	r1, [pc, #88]	@ (8006148 <_ZN16CPantallaMemoria4ShowEv+0x78>)
 80060f0:	f7fc fec6 	bl	8002e80 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelMemoria->Show();
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	334c      	adds	r3, #76	@ 0x4c
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4610      	mov	r0, r2
 8006108:	4798      	blx	r3
	LeeDatosMemoria();
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f840 	bl	8006190 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv>
	Estacion->SetTemperatura(Temperatura);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	330c      	adds	r3, #12
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	f8d2 20d0 	ldr.w	r2, [r2, #208]	@ 0xd0
 8006128:	4611      	mov	r1, r2
 800612a:	4798      	blx	r3
	VelocidadAireInicialPotenciometro=ManejadorControles->GetNivelAire();
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006132:	4618      	mov	r0, r3
 8006134:	f003 fe53 	bl	8009dde <_ZN19CManejadorControles12GetNivelAireEv>
 8006138:	4602      	mov	r2, r0
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
 }
 8006140:	bf00      	nop
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	0801428c 	.word	0x0801428c

0800614c <_ZN16CPantallaMemoria10SetMemoriaEi>:


void CPantallaMemoria::SetMemoria(int numeroMemoria)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
	NumeroMemoria=numeroMemoria;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	683a      	ldr	r2, [r7, #0]
 800615a:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
//	DireccionMemoria=DameDireccionMemoria();
}
 800615e:	bf00      	nop
 8006160:	370c      	adds	r7, #12
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
	...

0800616c <_ZN16CPantallaMemoria23OnBotonCuatroClickEventEv>:


void CPantallaMemoria::OnBotonCuatroClickEvent()
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaManual();
 8006174:	4803      	ldr	r0, [pc, #12]	@ (8006184 <_ZN16CPantallaMemoria23OnBotonCuatroClickEventEv+0x18>)
 8006176:	f7fd fdcb 	bl	8003d10 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
}
 800617a:	bf00      	nop
 800617c:	3708      	adds	r7, #8
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	20000258 	.word	0x20000258

08006188 <_ZThn48_N16CPantallaMemoria23OnBotonCuatroClickEventEv>:
	virtual void OnBotonCuatroClickEvent();
 8006188:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800618c:	f7ff bfee 	b.w	800616c <_ZN16CPantallaMemoria23OnBotonCuatroClickEventEv>

08006190 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv>:

void CPantallaMemoria::LeeDatosMemoria()
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]

	switch(NumeroMemoria)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800619e:	2b03      	cmp	r3, #3
 80061a0:	d024      	beq.n	80061ec <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x5c>
 80061a2:	2b03      	cmp	r3, #3
 80061a4:	dc31      	bgt.n	800620a <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x7a>
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d002      	beq.n	80061b0 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x20>
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d00f      	beq.n	80061ce <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x3e>
		Temperatura=Eprom.DameTemperatuarMemoria3();
		VelocidadAire=Eprom.DameVelocidadMemoria3();
		break;
	}

}
 80061ae:	e02c      	b.n	800620a <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x7a>
		Temperatura=Eprom.DameTemperatuarMemoria1();
 80061b0:	4818      	ldr	r0, [pc, #96]	@ (8006214 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x84>)
 80061b2:	f7fb fa35 	bl	8001620 <_ZN6CEprom23DameTemperatuarMemoria1Ev>
 80061b6:	4602      	mov	r2, r0
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
		VelocidadAire=Eprom.DameVelocidadMemoria1();
 80061be:	4815      	ldr	r0, [pc, #84]	@ (8006214 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x84>)
 80061c0:	f7fb fa40 	bl	8001644 <_ZN6CEprom21DameVelocidadMemoria1Ev>
 80061c4:	4602      	mov	r2, r0
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
		break;
 80061cc:	e01d      	b.n	800620a <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x7a>
		Temperatura=Eprom.DameTemperatuarMemoria2();
 80061ce:	4811      	ldr	r0, [pc, #68]	@ (8006214 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x84>)
 80061d0:	f7fb fa7a 	bl	80016c8 <_ZN6CEprom23DameTemperatuarMemoria2Ev>
 80061d4:	4602      	mov	r2, r0
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
		VelocidadAire=Eprom.DameVelocidadMemoria2();
 80061dc:	480d      	ldr	r0, [pc, #52]	@ (8006214 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x84>)
 80061de:	f7fb fa85 	bl	80016ec <_ZN6CEprom21DameVelocidadMemoria2Ev>
 80061e2:	4602      	mov	r2, r0
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
		break;
 80061ea:	e00e      	b.n	800620a <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x7a>
		Temperatura=Eprom.DameTemperatuarMemoria3();
 80061ec:	4809      	ldr	r0, [pc, #36]	@ (8006214 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x84>)
 80061ee:	f7fb fabf 	bl	8001770 <_ZN6CEprom23DameTemperatuarMemoria3Ev>
 80061f2:	4602      	mov	r2, r0
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
		VelocidadAire=Eprom.DameVelocidadMemoria3();
 80061fa:	4806      	ldr	r0, [pc, #24]	@ (8006214 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x84>)
 80061fc:	f7fb faca 	bl	8001794 <_ZN6CEprom21DameVelocidadMemoria3Ev>
 8006200:	4602      	mov	r2, r0
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
		break;
 8006208:	bf00      	nop
}
 800620a:	bf00      	nop
 800620c:	3708      	adds	r7, #8
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	20000318 	.word	0x20000318

08006218 <_ZN16CPantallaMemoria16LeeDatosEstacionEv>:
void CPantallaMemoria::LeeDatosEstacion()
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
	CPantallaManual::LeeDatosEstacion();
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4618      	mov	r0, r3
 8006224:	f7ff fc2a 	bl	8005a7c <_ZN15CPantallaManual16LeeDatosEstacionEv>
	int velocidad=ManejadorControles->GetNivelAire();
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800622e:	4618      	mov	r0, r3
 8006230:	f003 fdd5 	bl	8009dde <_ZN19CManejadorControles12GetNivelAireEv>
 8006234:	60f8      	str	r0, [r7, #12]
	if(VelocidadAireInicialPotenciometro>velocidad+DiferenciaAire ||VelocidadAireInicialPotenciometro<velocidad-DiferenciaAire)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 10fc 	ldr.w	r1, [r3, #252]	@ 0xfc
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	440b      	add	r3, r1
 8006246:	429a      	cmp	r2, r3
 8006248:	dc09      	bgt.n	800625e <_ZN16CPantallaMemoria16LeeDatosEstacionEv+0x46>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8006256:	68f9      	ldr	r1, [r7, #12]
 8006258:	1acb      	subs	r3, r1, r3
 800625a:	429a      	cmp	r2, r3
 800625c:	da08      	bge.n	8006270 <_ZN16CPantallaMemoria16LeeDatosEstacionEv+0x58>
	{
		NivelAire =velocidad;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
		CambioNIvelAire=true;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2201      	movs	r2, #1
 800626a:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
 800626e:	e00a      	b.n	8006286 <_ZN16CPantallaMemoria16LeeDatosEstacionEv+0x6e>
	}
	else
	{
		NivelAire =VelocidadAire;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
		CambioNIvelAire=false;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
	}
}
 8006284:	bf00      	nop
 8006286:	bf00      	nop
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
	...

08006290 <_ZN16CPantallaMemoria19OnPerillaIncrementoEv>:
void CPantallaMemoria::OnPerillaIncremento()
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaManual();
 8006298:	4803      	ldr	r0, [pc, #12]	@ (80062a8 <_ZN16CPantallaMemoria19OnPerillaIncrementoEv+0x18>)
 800629a:	f7fd fd39 	bl	8003d10 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
}
 800629e:	bf00      	nop
 80062a0:	3708      	adds	r7, #8
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	20000258 	.word	0x20000258

080062ac <_ZThn48_N16CPantallaMemoria19OnPerillaIncrementoEv>:
	virtual void OnPerillaIncremento();
 80062ac:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80062b0:	f7ff bfee 	b.w	8006290 <_ZN16CPantallaMemoria19OnPerillaIncrementoEv>

080062b4 <_ZN16CPantallaMemoria19OnPerillaDecrementoEv>:
void CPantallaMemoria::OnPerillaDecremento()
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaManual();
 80062bc:	4803      	ldr	r0, [pc, #12]	@ (80062cc <_ZN16CPantallaMemoria19OnPerillaDecrementoEv+0x18>)
 80062be:	f7fd fd27 	bl	8003d10 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
}
 80062c2:	bf00      	nop
 80062c4:	3708      	adds	r7, #8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	20000258 	.word	0x20000258

080062d0 <_ZThn48_N16CPantallaMemoria19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 80062d0:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80062d4:	f7ff bfee 	b.w	80062b4 <_ZN16CPantallaMemoria19OnPerillaDecrementoEv>

080062d8 <_ZN16CPantallaMemoria18MuestraInformacionEb>:
void CPantallaMemoria::MuestraInformacion(bool forzar)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	460b      	mov	r3, r1
 80062e2:	70fb      	strb	r3, [r7, #3]
		LeeDatosEstacion();
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	339c      	adds	r3, #156	@ 0x9c
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	4798      	blx	r3
		if(CambioNIvelAire==true)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d103      	bne.n	8006302 <_ZN16CPantallaMemoria18MuestraInformacionEb+0x2a>
		{
			ManejadorPantallas.MuestraPantallaManual();
 80062fa:	4811      	ldr	r0, [pc, #68]	@ (8006340 <_ZN16CPantallaMemoria18MuestraInformacionEb+0x68>)
 80062fc:	f7fd fd08 	bl	8003d10 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
			return;
 8006300:	e01b      	b.n	800633a <_ZN16CPantallaMemoria18MuestraInformacionEb+0x62>
		}
		MuestraTemperaturas(forzar);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	78fa      	ldrb	r2, [r7, #3]
 8006306:	4611      	mov	r1, r2
 8006308:	4618      	mov	r0, r3
 800630a:	f7ff fc09 	bl	8005b20 <_ZN15CPantallaManual19MuestraTemperaturasEb>
		MuestraEstado(forzar);
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	33a0      	adds	r3, #160	@ 0xa0
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	78f9      	ldrb	r1, [r7, #3]
 800631a:	4610      	mov	r0, r2
 800631c:	4798      	blx	r3
		MuestraNivelAire(forzar);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	78fa      	ldrb	r2, [r7, #3]
 8006322:	4611      	mov	r1, r2
 8006324:	4618      	mov	r0, r3
 8006326:	f7ff fc5f 	bl	8005be8 <_ZN15CPantallaManual16MuestraNivelAireEb>
		//marco como visible
		SetVisible(true);
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	336c      	adds	r3, #108	@ 0x6c
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2101      	movs	r1, #1
 8006336:	4610      	mov	r0, r2
 8006338:	4798      	blx	r3
}
 800633a:	3708      	adds	r7, #8
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	20000258 	.word	0x20000258

08006344 <_ZN17CPantallaMenuBaseC1EPc>:
 *      Author: W10
 */

#include <GUI/PantallaMenuBase/CPantallaMenuBase.hpp>

CPantallaMenuBase::CPantallaMenuBase(char *titulo):
 8006344:	b590      	push	{r4, r7, lr}
 8006346:	b087      	sub	sp, #28
 8006348:	af04      	add	r7, sp, #16
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
	CPantallaBase(1,titulo)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	683a      	ldr	r2, [r7, #0]
 8006352:	2101      	movs	r1, #1
 8006354:	4618      	mov	r0, r3
 8006356:	f7fc ff8b 	bl	8003270 <_ZN13CPantallaBaseC1EiPc>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	33ac      	adds	r3, #172	@ 0xac
 800635e:	4618      	mov	r0, r3
 8006360:	f7fd ff5a 	bl	8004218 <_ZN20CManejadorEventoMenuC1Ev>
 8006364:	4a1e      	ldr	r2, [pc, #120]	@ (80063e0 <_ZN17CPantallaMenuBaseC1EPc+0x9c>)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	601a      	str	r2, [r3, #0]
 800636a:	4a1e      	ldr	r2, [pc, #120]	@ (80063e4 <_ZN17CPantallaMenuBaseC1EPc+0xa0>)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006370:	4a1d      	ldr	r2, [pc, #116]	@ (80063e8 <_ZN17CPantallaMenuBaseC1EPc+0xa4>)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

{
	// TODO Auto-generated constructor stub
	Menu=new CMenu(4,30,310, 210,COLOR::WHITE,1, COLOR::RED);
 8006378:	2080      	movs	r0, #128	@ 0x80
 800637a:	f00b f84f 	bl	801141c <_Znwj>
 800637e:	4603      	mov	r3, r0
 8006380:	461c      	mov	r4, r3
 8006382:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8006386:	9303      	str	r3, [sp, #12]
 8006388:	2301      	movs	r3, #1
 800638a:	9302      	str	r3, [sp, #8]
 800638c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006390:	9301      	str	r3, [sp, #4]
 8006392:	23d2      	movs	r3, #210	@ 0xd2
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	f44f 739b 	mov.w	r3, #310	@ 0x136
 800639a:	221e      	movs	r2, #30
 800639c:	2104      	movs	r1, #4
 800639e:	4620      	mov	r0, r4
 80063a0:	f7fd ff76 	bl	8004290 <_ZN5CMenuC1Eiiiiiii>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8c3 40b0 	str.w	r4, [r3, #176]	@ 0xb0
	Menu->AsignaManejadorEventosMenu(this);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	33ac      	adds	r3, #172	@ 0xac
 80063b4:	4619      	mov	r1, r3
 80063b6:	4610      	mov	r0, r2
 80063b8:	f7fe f9ff 	bl	80047ba <_ZN5CMenu26AsignaManejadorEventosMenuEP20CManejadorEventoMenu>
	Menu->AsignaColoresItems(COLOR::BLACK, 0X776F, COLOR::WHITE, COLOR::BLACK);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 80063c2:	2300      	movs	r3, #0
 80063c4:	9300      	str	r3, [sp, #0]
 80063c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80063ca:	f247 726f 	movw	r2, #30575	@ 0x776f
 80063ce:	2100      	movs	r1, #0
 80063d0:	f7fd ffd7 	bl	8004382 <_ZN5CMenu18AsignaColoresItemsEiiii>

}
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4618      	mov	r0, r3
 80063d8:	370c      	adds	r7, #12
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd90      	pop	{r4, r7, pc}
 80063de:	bf00      	nop
 80063e0:	08014e40 	.word	0x08014e40
 80063e4:	08014ed8 	.word	0x08014ed8
 80063e8:	08014f0c 	.word	0x08014f0c

080063ec <_ZN17CPantallaMenuBaseD1Ev>:

CPantallaMenuBase::~CPantallaMenuBase()
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	4a0b      	ldr	r2, [pc, #44]	@ (8006424 <_ZN17CPantallaMenuBaseD1Ev+0x38>)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	601a      	str	r2, [r3, #0]
 80063fa:	4a0b      	ldr	r2, [pc, #44]	@ (8006428 <_ZN17CPantallaMenuBaseD1Ev+0x3c>)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8006400:	4a0a      	ldr	r2, [pc, #40]	@ (800642c <_ZN17CPantallaMenuBaseD1Ev+0x40>)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	// TODO Auto-generated destructor stub
}
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	33ac      	adds	r3, #172	@ 0xac
 800640c:	4618      	mov	r0, r3
 800640e:	f7fd ff13 	bl	8004238 <_ZN20CManejadorEventoMenuD1Ev>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4618      	mov	r0, r3
 8006416:	f7fc fef7 	bl	8003208 <_ZN13CPantallaBaseD1Ev>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4618      	mov	r0, r3
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	08014e40 	.word	0x08014e40
 8006428:	08014ed8 	.word	0x08014ed8
 800642c:	08014f0c 	.word	0x08014f0c

08006430 <_ZThn48_N17CPantallaMenuBaseD1Ev>:
protected:
	CMenu* Menu;

public:
	CPantallaMenuBase(char *titulo);
	virtual ~CPantallaMenuBase();
 8006430:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8006434:	f7ff bfda 	b.w	80063ec <_ZN17CPantallaMenuBaseD1Ev>

08006438 <_ZThn172_N17CPantallaMenuBaseD1Ev>:
 8006438:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 800643c:	f7ff bfd6 	b.w	80063ec <_ZN17CPantallaMenuBaseD1Ev>

08006440 <_ZN17CPantallaMenuBaseD0Ev>:
CPantallaMenuBase::~CPantallaMenuBase()
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
}
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f7ff ffcf 	bl	80063ec <_ZN17CPantallaMenuBaseD1Ev>
 800644e:	21b4      	movs	r1, #180	@ 0xb4
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f00a ffe1 	bl	8011418 <_ZdlPvj>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4618      	mov	r0, r3
 800645a:	3708      	adds	r7, #8
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <_ZThn172_N17CPantallaMenuBaseD0Ev>:
 8006460:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8006464:	f7ff bfec 	b.w	8006440 <_ZN17CPantallaMenuBaseD0Ev>

08006468 <_ZThn48_N17CPantallaMenuBaseD0Ev>:
 8006468:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800646c:	f7ff bfe8 	b.w	8006440 <_ZN17CPantallaMenuBaseD0Ev>

08006470 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>:

void CPantallaMenuBase::AgregaMenuItem(char *texto, int Opcion)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	607a      	str	r2, [r7, #4]
	Menu->AgregaItem(texto, Opcion);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8006482:	2300      	movs	r3, #0
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	68b9      	ldr	r1, [r7, #8]
 8006488:	f7fd ffde 	bl	8004448 <_ZN5CMenu10AgregaItemEPcib>
}
 800648c:	bf00      	nop
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <_ZN17CPantallaMenuBase19OnPerillaIncrementoEv>:
void CPantallaMenuBase::OnPerillaIncremento()
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
	Menu->OnSeleccionaSiguiente();
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fe f838 	bl	8004518 <_ZN5CMenu21OnSeleccionaSiguienteEv>
}
 80064a8:	bf00      	nop
 80064aa:	3708      	adds	r7, #8
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <_ZThn48_N17CPantallaMenuBase19OnPerillaIncrementoEv>:
	void AgregaMenuItem(char *texto, int Opcion);
	virtual void AgregaMenuItem(char *texto, int Opcion, int x, int y, int ancho,int alto);
	virtual void AgregaMenuItem(char *texto, int Opcion, int x, int y, int ancho,int alto,int colorFondo, int colorTexto);
	virtual void OnPerillaIncremento();
 80064b0:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80064b4:	f7ff bfee 	b.w	8006494 <_ZN17CPantallaMenuBase19OnPerillaIncrementoEv>

080064b8 <_ZN17CPantallaMenuBase19OnPerillaDecrementoEv>:
void CPantallaMenuBase::OnPerillaDecremento()
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
	Menu->OnSeleccionaAnterior();
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fe f874 	bl	80045b4 <_ZN5CMenu20OnSeleccionaAnteriorEv>
}
 80064cc:	bf00      	nop
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <_ZThn48_N17CPantallaMenuBase19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 80064d4:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80064d8:	f7ff bfee 	b.w	80064b8 <_ZN17CPantallaMenuBase19OnPerillaDecrementoEv>

080064dc <_ZN17CPantallaMenuBase24OnBotonPerillaClickEventEv>:
void CPantallaMenuBase::OnBotonPerillaClickEvent()
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
	Menu->OnClickSeleccionado();
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7fe f8cd 	bl	800468a <_ZN5CMenu19OnClickSeleccionadoEv>
}
 80064f0:	bf00      	nop
 80064f2:	3708      	adds	r7, #8
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <_ZThn48_N17CPantallaMenuBase24OnBotonPerillaClickEventEv>:
	virtual void OnBotonPerillaClickEvent();
 80064f8:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80064fc:	f7ff bfee 	b.w	80064dc <_ZN17CPantallaMenuBase24OnBotonPerillaClickEventEv>

08006500 <_ZN17CPantallaMenuBase4ShowEv>:
void CPantallaMenuBase::Show()
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
	CPantallaBase::Show();
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4618      	mov	r0, r3
 800650c:	f7fc ff22 	bl	8003354 <_ZN13CPantallaBase4ShowEv>
	Menu->Show();
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	334c      	adds	r3, #76	@ 0x4c
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4610      	mov	r0, r2
 8006524:	4798      	blx	r3
	SetVisible(true);
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	336c      	adds	r3, #108	@ 0x6c
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2101      	movs	r1, #1
 8006532:	4610      	mov	r0, r2
 8006534:	4798      	blx	r3
}
 8006536:	bf00      	nop
 8006538:	3708      	adds	r7, #8
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <_ZN17CPantallaMenuBase8RefrescaEv>:
void CPantallaMenuBase::Refresca()
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b082      	sub	sp, #8
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
	if(EsVisible()==false)
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	3368      	adds	r3, #104	@ 0x68
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4610      	mov	r0, r2
 8006552:	4798      	blx	r3
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	bf0c      	ite	eq
 800655a:	2301      	moveq	r3, #1
 800655c:	2300      	movne	r3, #0
 800655e:	b2db      	uxtb	r3, r3
 8006560:	2b00      	cmp	r3, #0
 8006562:	d005      	beq.n	8006570 <_ZN17CPantallaMenuBase8RefrescaEv+0x32>
		Show();
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	334c      	adds	r3, #76	@ 0x4c
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	4798      	blx	r3
}
 8006570:	bf00      	nop
 8006572:	3708      	adds	r7, #8
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>:
void CPantallaMenuBase::AgregaMenuItem(char *texto, int Opcion, int x, int y,int ancho,int alto)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b088      	sub	sp, #32
 800657c:	af04      	add	r7, sp, #16
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
 8006584:	603b      	str	r3, [r7, #0]
	Menu->AgregaItem(texto, Opcion,x,y,ancho,alto);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 800658c:	2300      	movs	r3, #0
 800658e:	9303      	str	r3, [sp, #12]
 8006590:	6a3b      	ldr	r3, [r7, #32]
 8006592:	9302      	str	r3, [sp, #8]
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	9301      	str	r3, [sp, #4]
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	68b9      	ldr	r1, [r7, #8]
 80065a2:	f7fe f918 	bl	80047d6 <_ZN5CMenu10AgregaItemEPciiiiib>

}
 80065a6:	bf00      	nop
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiiiii>:
void CPantallaMenuBase::AgregaMenuItem(char *texto, int Opcion, int x, int y, int ancho,int alto,int colorFondo, int colorTexto)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b08a      	sub	sp, #40	@ 0x28
 80065b2:	af06      	add	r7, sp, #24
 80065b4:	60f8      	str	r0, [r7, #12]
 80065b6:	60b9      	str	r1, [r7, #8]
 80065b8:	607a      	str	r2, [r7, #4]
 80065ba:	603b      	str	r3, [r7, #0]
	Menu->AgregaItem(texto, Opcion,x,y,ancho,alto,colorFondo,colorTexto);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 80065c2:	2300      	movs	r3, #0
 80065c4:	9305      	str	r3, [sp, #20]
 80065c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c8:	9304      	str	r3, [sp, #16]
 80065ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065cc:	9303      	str	r3, [sp, #12]
 80065ce:	6a3b      	ldr	r3, [r7, #32]
 80065d0:	9302      	str	r3, [sp, #8]
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	9301      	str	r3, [sp, #4]
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	9300      	str	r3, [sp, #0]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	68b9      	ldr	r1, [r7, #8]
 80065e0:	f7fe f98b 	bl	80048fa <_ZN5CMenu10AgregaItemEPciiiiiiib>

}
 80065e4:	bf00      	nop
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <_ZN17CPantallaMenuBase9BorraMenuEv>:
void CPantallaMenuBase::BorraMenu()
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
	Menu->BorrarItemns();
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7fe f9fd 	bl	80049fa <_ZN5CMenu12BorrarItemnsEv>
}
 8006600:	bf00      	nop
 8006602:	3708      	adds	r7, #8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <_ZN14CMenuPrincipalC1Ev>:
#include "GUI/Menu/CMenuItem.hpp"
#include "GUI/CEtiquetaTft.hpp"
#include "GUI/Menu/CMenu.hpp"
#include "string.h"

CMenuPrincipal::CMenuPrincipal():
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
	CPantallaMenuBase((char*) " Menu Principal")
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	491b      	ldr	r1, [pc, #108]	@ (8006680 <_ZN14CMenuPrincipalC1Ev+0x78>)
 8006614:	4618      	mov	r0, r3
 8006616:	f7ff fe95 	bl	8006344 <_ZN17CPantallaMenuBaseC1EPc>
 800661a:	4a1a      	ldr	r2, [pc, #104]	@ (8006684 <_ZN14CMenuPrincipalC1Ev+0x7c>)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	601a      	str	r2, [r3, #0]
 8006620:	4a19      	ldr	r2, [pc, #100]	@ (8006688 <_ZN14CMenuPrincipalC1Ev+0x80>)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	631a      	str	r2, [r3, #48]	@ 0x30
 8006626:	4a19      	ldr	r2, [pc, #100]	@ (800668c <_ZN14CMenuPrincipalC1Ev+0x84>)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	AgregaMenuItem((char*)"Conf Memoria 1", MENU_PRINCIPAL::MENU_MEMORIA_1);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	4917      	ldr	r1, [pc, #92]	@ (8006690 <_ZN14CMenuPrincipalC1Ev+0x88>)
 8006634:	4618      	mov	r0, r3
 8006636:	f7ff ff1b 	bl	8006470 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"Conf Memoria 2",(int)MENU_PRINCIPAL::MENU_MEMORIA_2);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2202      	movs	r2, #2
 800663e:	4915      	ldr	r1, [pc, #84]	@ (8006694 <_ZN14CMenuPrincipalC1Ev+0x8c>)
 8006640:	4618      	mov	r0, r3
 8006642:	f7ff ff15 	bl	8006470 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"Conf Memoria 3", (int)MENU_PRINCIPAL::MENU_MEMORIA_3);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2203      	movs	r2, #3
 800664a:	4913      	ldr	r1, [pc, #76]	@ (8006698 <_ZN14CMenuPrincipalC1Ev+0x90>)
 800664c:	4618      	mov	r0, r3
 800664e:	f7ff ff0f 	bl	8006470 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"Calibrar", (int)MENU_PRINCIPAL::MENU_CALIBRAR);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2205      	movs	r2, #5
 8006656:	4911      	ldr	r1, [pc, #68]	@ (800669c <_ZN14CMenuPrincipalC1Ev+0x94>)
 8006658:	4618      	mov	r0, r3
 800665a:	f7ff ff09 	bl	8006470 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"Rampa", (int)MENU_PRINCIPAL::MENU_RAMPA);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2204      	movs	r2, #4
 8006662:	490f      	ldr	r1, [pc, #60]	@ (80066a0 <_ZN14CMenuPrincipalC1Ev+0x98>)
 8006664:	4618      	mov	r0, r3
 8006666:	f7ff ff03 	bl	8006470 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"Salir", MENU_SALIR);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	490d      	ldr	r1, [pc, #52]	@ (80066a4 <_ZN14CMenuPrincipalC1Ev+0x9c>)
 8006670:	4618      	mov	r0, r3
 8006672:	f7ff fefd 	bl	8006470 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
}
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4618      	mov	r0, r3
 800667a:	3708      	adds	r7, #8
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	08014298 	.word	0x08014298
 8006684:	08014f20 	.word	0x08014f20
 8006688:	08014fcc 	.word	0x08014fcc
 800668c:	08015000 	.word	0x08015000
 8006690:	080142a8 	.word	0x080142a8
 8006694:	080142b8 	.word	0x080142b8
 8006698:	080142c8 	.word	0x080142c8
 800669c:	080142d8 	.word	0x080142d8
 80066a0:	080142e4 	.word	0x080142e4
 80066a4:	080142ec 	.word	0x080142ec

080066a8 <_ZN14CMenuPrincipalD1Ev>:

CMenuPrincipal::~CMenuPrincipal()
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	4a09      	ldr	r2, [pc, #36]	@ (80066d8 <_ZN14CMenuPrincipalD1Ev+0x30>)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	601a      	str	r2, [r3, #0]
 80066b6:	4a09      	ldr	r2, [pc, #36]	@ (80066dc <_ZN14CMenuPrincipalD1Ev+0x34>)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80066bc:	4a08      	ldr	r2, [pc, #32]	@ (80066e0 <_ZN14CMenuPrincipalD1Ev+0x38>)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	// TODO Auto-generated destructor stub
}
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7ff fe90 	bl	80063ec <_ZN17CPantallaMenuBaseD1Ev>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4618      	mov	r0, r3
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	08014f20 	.word	0x08014f20
 80066dc:	08014fcc 	.word	0x08014fcc
 80066e0:	08015000 	.word	0x08015000

080066e4 <_ZThn48_N14CMenuPrincipalD1Ev>:
	CEstacionBase *Estacion;
	CMenuItem* item1,*item2;

public:
	CMenuPrincipal();
	virtual ~CMenuPrincipal();
 80066e4:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80066e8:	f7ff bfde 	b.w	80066a8 <_ZN14CMenuPrincipalD1Ev>

080066ec <_ZThn172_N14CMenuPrincipalD1Ev>:
 80066ec:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 80066f0:	f7ff bfda 	b.w	80066a8 <_ZN14CMenuPrincipalD1Ev>

080066f4 <_ZN14CMenuPrincipalD0Ev>:
CMenuPrincipal::~CMenuPrincipal()
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
}
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f7ff ffd3 	bl	80066a8 <_ZN14CMenuPrincipalD1Ev>
 8006702:	21c0      	movs	r1, #192	@ 0xc0
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f00a fe87 	bl	8011418 <_ZdlPvj>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4618      	mov	r0, r3
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <_ZThn172_N14CMenuPrincipalD0Ev>:
 8006714:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8006718:	f7ff bfec 	b.w	80066f4 <_ZN14CMenuPrincipalD0Ev>

0800671c <_ZThn48_N14CMenuPrincipalD0Ev>:
 800671c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8006720:	f7ff bfe8 	b.w	80066f4 <_ZN14CMenuPrincipalD0Ev>

08006724 <_ZN14CMenuPrincipal11OnMenuEventEi>:
void CMenuPrincipal::OnMenuEvent(int identificador)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
	switch(identificador)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b05      	cmp	r3, #5
 8006732:	d820      	bhi.n	8006776 <_ZN14CMenuPrincipal11OnMenuEventEi+0x52>
 8006734:	a201      	add	r2, pc, #4	@ (adr r2, 800673c <_ZN14CMenuPrincipal11OnMenuEventEi+0x18>)
 8006736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800673a:	bf00      	nop
 800673c:	08006755 	.word	0x08006755
 8006740:	0800675d 	.word	0x0800675d
 8006744:	0800675d 	.word	0x0800675d
 8006748:	0800675d 	.word	0x0800675d
 800674c:	0800676f 	.word	0x0800676f
 8006750:	08006767 	.word	0x08006767
	{
	case MENU_PRINCIPAL::MENU_SALIR:
		ManejadorPantallas.MuestraPantallaManual();
 8006754:	480a      	ldr	r0, [pc, #40]	@ (8006780 <_ZN14CMenuPrincipal11OnMenuEventEi+0x5c>)
 8006756:	f7fd fadb 	bl	8003d10 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
		break;
 800675a:	e00c      	b.n	8006776 <_ZN14CMenuPrincipal11OnMenuEventEi+0x52>
	case MENU_PRINCIPAL::MENU_MEMORIA_1:
	case MENU_PRINCIPAL::MENU_MEMORIA_2:
	case MENU_PRINCIPAL::MENU_MEMORIA_3:
		ManejadorPantallas.MuestraPantallaConfiguracionMemoria(identificador);
 800675c:	6839      	ldr	r1, [r7, #0]
 800675e:	4808      	ldr	r0, [pc, #32]	@ (8006780 <_ZN14CMenuPrincipal11OnMenuEventEi+0x5c>)
 8006760:	f7fd fbab 	bl	8003eba <_ZN19CManejadorPantallas35MuestraPantallaConfiguracionMemoriaEi>
		break;
 8006764:	e007      	b.n	8006776 <_ZN14CMenuPrincipal11OnMenuEventEi+0x52>
	case MENU_PRINCIPAL::MENU_CALIBRAR:
		ManejadorPantallas.MuestraCPantallaCalibracion();
 8006766:	4806      	ldr	r0, [pc, #24]	@ (8006780 <_ZN14CMenuPrincipal11OnMenuEventEi+0x5c>)
 8006768:	f7fd fbf2 	bl	8003f50 <_ZN19CManejadorPantallas27MuestraCPantallaCalibracionEv>
		break;
 800676c:	e003      	b.n	8006776 <_ZN14CMenuPrincipal11OnMenuEventEi+0x52>
	case MENU_PRINCIPAL::MENU_RAMPA:
		ManejadorPantallas.MuestraMenuRampa();
 800676e:	4804      	ldr	r0, [pc, #16]	@ (8006780 <_ZN14CMenuPrincipal11OnMenuEventEi+0x5c>)
 8006770:	f7fd fb06 	bl	8003d80 <_ZN19CManejadorPantallas16MuestraMenuRampaEv>
		break;
 8006774:	bf00      	nop
	}

}
 8006776:	bf00      	nop
 8006778:	3708      	adds	r7, #8
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	20000258 	.word	0x20000258

08006784 <_ZThn172_N14CMenuPrincipal11OnMenuEventEi>:
	virtual void OnBotonCuatroClickEvent();
	virtual void OnMenuEvent(int identificador);
 8006784:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8006788:	f7ff bfcc 	b.w	8006724 <_ZN14CMenuPrincipal11OnMenuEventEi>

0800678c <_ZN14CMenuPrincipal21OnBotonTresClickEventEv>:

void CMenuPrincipal::OnBotonTresClickEvent()
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(3);
 8006794:	2103      	movs	r1, #3
 8006796:	4803      	ldr	r0, [pc, #12]	@ (80067a4 <_ZN14CMenuPrincipal21OnBotonTresClickEventEv+0x18>)
 8006798:	f7fd fbb6 	bl	8003f08 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 800679c:	bf00      	nop
 800679e:	3708      	adds	r7, #8
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	20000258 	.word	0x20000258

080067a8 <_ZThn48_N14CMenuPrincipal21OnBotonTresClickEventEv>:

	virtual void OnBotonUnoClickEvent();
	virtual void OnBotonDosClickEvent();
	virtual void OnBotonTresClickEvent();
 80067a8:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80067ac:	f7ff bfee 	b.w	800678c <_ZN14CMenuPrincipal21OnBotonTresClickEventEv>

080067b0 <_ZN14CMenuPrincipal20OnBotonUnoClickEventEv>:
void CMenuPrincipal::OnBotonUnoClickEvent()
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(1);
 80067b8:	2101      	movs	r1, #1
 80067ba:	4803      	ldr	r0, [pc, #12]	@ (80067c8 <_ZN14CMenuPrincipal20OnBotonUnoClickEventEv+0x18>)
 80067bc:	f7fd fba4 	bl	8003f08 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 80067c0:	bf00      	nop
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	20000258 	.word	0x20000258

080067cc <_ZThn48_N14CMenuPrincipal20OnBotonUnoClickEventEv>:
	virtual void OnBotonUnoClickEvent();
 80067cc:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80067d0:	f7ff bfee 	b.w	80067b0 <_ZN14CMenuPrincipal20OnBotonUnoClickEventEv>

080067d4 <_ZN14CMenuPrincipal20OnBotonDosClickEventEv>:
void CMenuPrincipal::OnBotonDosClickEvent()
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(2);
 80067dc:	2102      	movs	r1, #2
 80067de:	4803      	ldr	r0, [pc, #12]	@ (80067ec <_ZN14CMenuPrincipal20OnBotonDosClickEventEv+0x18>)
 80067e0:	f7fd fb92 	bl	8003f08 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 80067e4:	bf00      	nop
 80067e6:	3708      	adds	r7, #8
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	20000258 	.word	0x20000258

080067f0 <_ZThn48_N14CMenuPrincipal20OnBotonDosClickEventEv>:
	virtual void OnBotonDosClickEvent();
 80067f0:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80067f4:	f7ff bfee 	b.w	80067d4 <_ZN14CMenuPrincipal20OnBotonDosClickEventEv>

080067f8 <_ZN14CMenuPrincipal23OnBotonCuatroClickEventEv>:
void CMenuPrincipal::OnBotonCuatroClickEvent()
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaManual();
 8006800:	4803      	ldr	r0, [pc, #12]	@ (8006810 <_ZN14CMenuPrincipal23OnBotonCuatroClickEventEv+0x18>)
 8006802:	f7fd fa85 	bl	8003d10 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
}
 8006806:	bf00      	nop
 8006808:	3708      	adds	r7, #8
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	20000258 	.word	0x20000258

08006814 <_ZThn48_N14CMenuPrincipal23OnBotonCuatroClickEventEv>:
	virtual void OnBotonCuatroClickEvent();
 8006814:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8006818:	f7ff bfee 	b.w	80067f8 <_ZN14CMenuPrincipal23OnBotonCuatroClickEventEv>

0800681c <_ZN20CPantallaEdicionPasoC1Ev>:
#include <GUI/Rampa/PantallaEdicionPaso/CPantallaEdicionPaso.hpp>
#include <RapaTemperatura/CControladorRampas.hpp>
#include <GUI/ManejadorPantallas/CManejadorPantallas.hpp>
#include <RapaTemperatura/CControladorPasosRampa.hpp>

CPantallaEdicionPaso::CPantallaEdicionPaso():
 800681c:	b590      	push	{r4, r7, lr}
 800681e:	b08b      	sub	sp, #44	@ 0x2c
 8006820:	af08      	add	r7, sp, #32
 8006822:	6078      	str	r0, [r7, #4]
CPantallaBase(1, (char*)"EDITOR PASO")
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a9c      	ldr	r2, [pc, #624]	@ (8006a98 <_ZN20CPantallaEdicionPasoC1Ev+0x27c>)
 8006828:	2101      	movs	r1, #1
 800682a:	4618      	mov	r0, r3
 800682c:	f7fc fd20 	bl	8003270 <_ZN13CPantallaBaseC1EiPc>
 8006830:	4a9a      	ldr	r2, [pc, #616]	@ (8006a9c <_ZN20CPantallaEdicionPasoC1Ev+0x280>)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	601a      	str	r2, [r3, #0]
 8006836:	4a9a      	ldr	r2, [pc, #616]	@ (8006aa0 <_ZN20CPantallaEdicionPasoC1Ev+0x284>)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated constructor stub
	// TODO Auto-generated constructor stub
	LabelRampa=new CEtiquetaTft( 5, 35, 50, 20, COLOR::BLACK,(char*)"Memoria: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 800683c:	20a4      	movs	r0, #164	@ 0xa4
 800683e:	f00a fded 	bl	801141c <_Znwj>
 8006842:	4603      	mov	r3, r0
 8006844:	461c      	mov	r4, r3
 8006846:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800684a:	9306      	str	r3, [sp, #24]
 800684c:	2300      	movs	r3, #0
 800684e:	9305      	str	r3, [sp, #20]
 8006850:	2303      	movs	r3, #3
 8006852:	9304      	str	r3, [sp, #16]
 8006854:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006858:	9303      	str	r3, [sp, #12]
 800685a:	4b92      	ldr	r3, [pc, #584]	@ (8006aa4 <_ZN20CPantallaEdicionPasoC1Ev+0x288>)
 800685c:	9302      	str	r3, [sp, #8]
 800685e:	2300      	movs	r3, #0
 8006860:	9301      	str	r3, [sp, #4]
 8006862:	2314      	movs	r3, #20
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	2332      	movs	r3, #50	@ 0x32
 8006868:	2223      	movs	r2, #35	@ 0x23
 800686a:	2105      	movs	r1, #5
 800686c:	4620      	mov	r0, r4
 800686e:	f7fc facd 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8c3 40c8 	str.w	r4, [r3, #200]	@ 0xc8
	// temperatra
	LabelTemperatura = new CEtiquetaTft( 5, 65, 50, 20, COLOR::BLACK,(char*)"Temp", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8006878:	20a4      	movs	r0, #164	@ 0xa4
 800687a:	f00a fdcf 	bl	801141c <_Znwj>
 800687e:	4603      	mov	r3, r0
 8006880:	461c      	mov	r4, r3
 8006882:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006886:	9306      	str	r3, [sp, #24]
 8006888:	2300      	movs	r3, #0
 800688a:	9305      	str	r3, [sp, #20]
 800688c:	2303      	movs	r3, #3
 800688e:	9304      	str	r3, [sp, #16]
 8006890:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006894:	9303      	str	r3, [sp, #12]
 8006896:	4b84      	ldr	r3, [pc, #528]	@ (8006aa8 <_ZN20CPantallaEdicionPasoC1Ev+0x28c>)
 8006898:	9302      	str	r3, [sp, #8]
 800689a:	2300      	movs	r3, #0
 800689c:	9301      	str	r3, [sp, #4]
 800689e:	2314      	movs	r3, #20
 80068a0:	9300      	str	r3, [sp, #0]
 80068a2:	2332      	movs	r3, #50	@ 0x32
 80068a4:	2241      	movs	r2, #65	@ 0x41
 80068a6:	2105      	movs	r1, #5
 80068a8:	4620      	mov	r0, r4
 80068aa:	f7fc faaf 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8c3 40cc 	str.w	r4, [r3, #204]	@ 0xcc
	TextTemperatura = new CEtiquetaTft( 100, 65, 150, 30,COLOR::GREEN, (char*)"000/000", COLOR::BLACK, 3, 1, COLOR::RED);
 80068b4:	20a4      	movs	r0, #164	@ 0xa4
 80068b6:	f00a fdb1 	bl	801141c <_Znwj>
 80068ba:	4603      	mov	r3, r0
 80068bc:	461c      	mov	r4, r3
 80068be:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80068c2:	9306      	str	r3, [sp, #24]
 80068c4:	2301      	movs	r3, #1
 80068c6:	9305      	str	r3, [sp, #20]
 80068c8:	2303      	movs	r3, #3
 80068ca:	9304      	str	r3, [sp, #16]
 80068cc:	2300      	movs	r3, #0
 80068ce:	9303      	str	r3, [sp, #12]
 80068d0:	4b76      	ldr	r3, [pc, #472]	@ (8006aac <_ZN20CPantallaEdicionPasoC1Ev+0x290>)
 80068d2:	9302      	str	r3, [sp, #8]
 80068d4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80068d8:	9301      	str	r3, [sp, #4]
 80068da:	231e      	movs	r3, #30
 80068dc:	9300      	str	r3, [sp, #0]
 80068de:	2396      	movs	r3, #150	@ 0x96
 80068e0:	2241      	movs	r2, #65	@ 0x41
 80068e2:	2164      	movs	r1, #100	@ 0x64
 80068e4:	4620      	mov	r0, r4
 80068e6:	f7fc fa91 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8c3 40d0 	str.w	r4, [r3, #208]	@ 0xd0
//	TextTemperatura->SetSeparacion(5, 5);
	//nivel de ire
	LabelAire = new CEtiquetaTft( 5, 100, 200, 30, COLOR::BLACK,(char*) "Aire",COLOR::WHITE, 3, 0, COLOR::RED);
 80068f0:	20a4      	movs	r0, #164	@ 0xa4
 80068f2:	f00a fd93 	bl	801141c <_Znwj>
 80068f6:	4603      	mov	r3, r0
 80068f8:	461c      	mov	r4, r3
 80068fa:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80068fe:	9306      	str	r3, [sp, #24]
 8006900:	2300      	movs	r3, #0
 8006902:	9305      	str	r3, [sp, #20]
 8006904:	2303      	movs	r3, #3
 8006906:	9304      	str	r3, [sp, #16]
 8006908:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800690c:	9303      	str	r3, [sp, #12]
 800690e:	4b68      	ldr	r3, [pc, #416]	@ (8006ab0 <_ZN20CPantallaEdicionPasoC1Ev+0x294>)
 8006910:	9302      	str	r3, [sp, #8]
 8006912:	2300      	movs	r3, #0
 8006914:	9301      	str	r3, [sp, #4]
 8006916:	231e      	movs	r3, #30
 8006918:	9300      	str	r3, [sp, #0]
 800691a:	23c8      	movs	r3, #200	@ 0xc8
 800691c:	2264      	movs	r2, #100	@ 0x64
 800691e:	2105      	movs	r1, #5
 8006920:	4620      	mov	r0, r4
 8006922:	f7fc fa73 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8c3 40d4 	str.w	r4, [r3, #212]	@ 0xd4
	TextAire = new CEtiquetaTft( 100, 100, 150, 30, COLOR::GREY,(char*) "00",COLOR::BLACK, 3, 0, COLOR::RED);
 800692c:	20a4      	movs	r0, #164	@ 0xa4
 800692e:	f00a fd75 	bl	801141c <_Znwj>
 8006932:	4603      	mov	r3, r0
 8006934:	461c      	mov	r4, r3
 8006936:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800693a:	9306      	str	r3, [sp, #24]
 800693c:	2300      	movs	r3, #0
 800693e:	9305      	str	r3, [sp, #20]
 8006940:	2303      	movs	r3, #3
 8006942:	9304      	str	r3, [sp, #16]
 8006944:	2300      	movs	r3, #0
 8006946:	9303      	str	r3, [sp, #12]
 8006948:	4b5a      	ldr	r3, [pc, #360]	@ (8006ab4 <_ZN20CPantallaEdicionPasoC1Ev+0x298>)
 800694a:	9302      	str	r3, [sp, #8]
 800694c:	f64d 63de 	movw	r3, #57054	@ 0xdede
 8006950:	9301      	str	r3, [sp, #4]
 8006952:	231e      	movs	r3, #30
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	2396      	movs	r3, #150	@ 0x96
 8006958:	2264      	movs	r2, #100	@ 0x64
 800695a:	2164      	movs	r1, #100	@ 0x64
 800695c:	4620      	mov	r0, r4
 800695e:	f7fc fa55 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8c3 40d8 	str.w	r4, [r3, #216]	@ 0xd8
	// Tiempo
	LabelTiempo = new CEtiquetaTft( 5, 135, 200, 30, COLOR::BLACK,(char*) "Segs",COLOR::WHITE, 3, 0, COLOR::RED);
 8006968:	20a4      	movs	r0, #164	@ 0xa4
 800696a:	f00a fd57 	bl	801141c <_Znwj>
 800696e:	4603      	mov	r3, r0
 8006970:	461c      	mov	r4, r3
 8006972:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8006976:	9306      	str	r3, [sp, #24]
 8006978:	2300      	movs	r3, #0
 800697a:	9305      	str	r3, [sp, #20]
 800697c:	2303      	movs	r3, #3
 800697e:	9304      	str	r3, [sp, #16]
 8006980:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006984:	9303      	str	r3, [sp, #12]
 8006986:	4b4c      	ldr	r3, [pc, #304]	@ (8006ab8 <_ZN20CPantallaEdicionPasoC1Ev+0x29c>)
 8006988:	9302      	str	r3, [sp, #8]
 800698a:	2300      	movs	r3, #0
 800698c:	9301      	str	r3, [sp, #4]
 800698e:	231e      	movs	r3, #30
 8006990:	9300      	str	r3, [sp, #0]
 8006992:	23c8      	movs	r3, #200	@ 0xc8
 8006994:	2287      	movs	r2, #135	@ 0x87
 8006996:	2105      	movs	r1, #5
 8006998:	4620      	mov	r0, r4
 800699a:	f7fc fa37 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8c3 40dc 	str.w	r4, [r3, #220]	@ 0xdc
	TextTiempo = new CEtiquetaTft( 100, 135, 150, 30, COLOR::GREY,(char*) "00",COLOR::BLACK, 3, 0, COLOR::RED);
 80069a4:	20a4      	movs	r0, #164	@ 0xa4
 80069a6:	f00a fd39 	bl	801141c <_Znwj>
 80069aa:	4603      	mov	r3, r0
 80069ac:	461c      	mov	r4, r3
 80069ae:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80069b2:	9306      	str	r3, [sp, #24]
 80069b4:	2300      	movs	r3, #0
 80069b6:	9305      	str	r3, [sp, #20]
 80069b8:	2303      	movs	r3, #3
 80069ba:	9304      	str	r3, [sp, #16]
 80069bc:	2300      	movs	r3, #0
 80069be:	9303      	str	r3, [sp, #12]
 80069c0:	4b3c      	ldr	r3, [pc, #240]	@ (8006ab4 <_ZN20CPantallaEdicionPasoC1Ev+0x298>)
 80069c2:	9302      	str	r3, [sp, #8]
 80069c4:	f64d 63de 	movw	r3, #57054	@ 0xdede
 80069c8:	9301      	str	r3, [sp, #4]
 80069ca:	231e      	movs	r3, #30
 80069cc:	9300      	str	r3, [sp, #0]
 80069ce:	2396      	movs	r3, #150	@ 0x96
 80069d0:	2287      	movs	r2, #135	@ 0x87
 80069d2:	2164      	movs	r1, #100	@ 0x64
 80069d4:	4620      	mov	r0, r4
 80069d6:	f7fc fa19 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8c3 40e0 	str.w	r4, [r3, #224]	@ 0xe0

	LabelGuardar=new CEtiquetaTft( 10, 200, 130, 30, COLOR::GREEN,(char*)"GUARDAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 80069e0:	20a4      	movs	r0, #164	@ 0xa4
 80069e2:	f00a fd1b 	bl	801141c <_Znwj>
 80069e6:	4603      	mov	r3, r0
 80069e8:	461c      	mov	r4, r3
 80069ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80069ee:	9306      	str	r3, [sp, #24]
 80069f0:	2301      	movs	r3, #1
 80069f2:	9305      	str	r3, [sp, #20]
 80069f4:	2303      	movs	r3, #3
 80069f6:	9304      	str	r3, [sp, #16]
 80069f8:	2300      	movs	r3, #0
 80069fa:	9303      	str	r3, [sp, #12]
 80069fc:	4b2f      	ldr	r3, [pc, #188]	@ (8006abc <_ZN20CPantallaEdicionPasoC1Ev+0x2a0>)
 80069fe:	9302      	str	r3, [sp, #8]
 8006a00:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8006a04:	9301      	str	r3, [sp, #4]
 8006a06:	231e      	movs	r3, #30
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	2382      	movs	r3, #130	@ 0x82
 8006a0c:	22c8      	movs	r2, #200	@ 0xc8
 8006a0e:	210a      	movs	r1, #10
 8006a10:	4620      	mov	r0, r4
 8006a12:	f7fc f9fb 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8c3 40c0 	str.w	r4, [r3, #192]	@ 0xc0
	LabelCancelar=new CEtiquetaTft( 160, 200, 145, 30, COLOR::RED,(char*)"CANCELAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 8006a1c:	20a4      	movs	r0, #164	@ 0xa4
 8006a1e:	f00a fcfd 	bl	801141c <_Znwj>
 8006a22:	4603      	mov	r3, r0
 8006a24:	461c      	mov	r4, r3
 8006a26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006a2a:	9306      	str	r3, [sp, #24]
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	9305      	str	r3, [sp, #20]
 8006a30:	2303      	movs	r3, #3
 8006a32:	9304      	str	r3, [sp, #16]
 8006a34:	2300      	movs	r3, #0
 8006a36:	9303      	str	r3, [sp, #12]
 8006a38:	4b21      	ldr	r3, [pc, #132]	@ (8006ac0 <_ZN20CPantallaEdicionPasoC1Ev+0x2a4>)
 8006a3a:	9302      	str	r3, [sp, #8]
 8006a3c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8006a40:	9301      	str	r3, [sp, #4]
 8006a42:	231e      	movs	r3, #30
 8006a44:	9300      	str	r3, [sp, #0]
 8006a46:	2391      	movs	r3, #145	@ 0x91
 8006a48:	22c8      	movs	r2, #200	@ 0xc8
 8006a4a:	21a0      	movs	r1, #160	@ 0xa0
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	f7fc f9dd 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8c3 40c4 	str.w	r4, [r3, #196]	@ 0xc4

	Textos[0]=TextTemperatura;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
	Textos[1]=TextAire;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
	Textos[2]=TextTiempo;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
	Seleccionado=0;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
	Estado=ESTADO_EDICION_PASO::SELECIONANDO;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 20f4 	strb.w	r2, [r3, #244]	@ 0xf4
}
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4618      	mov	r0, r3
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd90      	pop	{r4, r7, pc}
 8006a96:	bf00      	nop
 8006a98:	080142f4 	.word	0x080142f4
 8006a9c:	08015014 	.word	0x08015014
 8006aa0:	080150a8 	.word	0x080150a8
 8006aa4:	08014300 	.word	0x08014300
 8006aa8:	0801430c 	.word	0x0801430c
 8006aac:	08014314 	.word	0x08014314
 8006ab0:	0801431c 	.word	0x0801431c
 8006ab4:	08014324 	.word	0x08014324
 8006ab8:	08014328 	.word	0x08014328
 8006abc:	08014330 	.word	0x08014330
 8006ac0:	08014338 	.word	0x08014338

08006ac4 <_ZN20CPantallaEdicionPasoD1Ev>:

CPantallaEdicionPaso::~CPantallaEdicionPaso()
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	4a07      	ldr	r2, [pc, #28]	@ (8006aec <_ZN20CPantallaEdicionPasoD1Ev+0x28>)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	601a      	str	r2, [r3, #0]
 8006ad2:	4a07      	ldr	r2, [pc, #28]	@ (8006af0 <_ZN20CPantallaEdicionPasoD1Ev+0x2c>)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7fc fb94 	bl	8003208 <_ZN13CPantallaBaseD1Ev>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3708      	adds	r7, #8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	08015014 	.word	0x08015014
 8006af0:	080150a8 	.word	0x080150a8

08006af4 <_ZThn48_N20CPantallaEdicionPasoD1Ev>:
	CEtiquetaTft *Textos[3];
	int Seleccionado;
	ESTADO_EDICION_PASO Estado;
public:
	CPantallaEdicionPaso();
	virtual ~CPantallaEdicionPaso();
 8006af4:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8006af8:	f7ff bfe4 	b.w	8006ac4 <_ZN20CPantallaEdicionPasoD1Ev>

08006afc <_ZN20CPantallaEdicionPasoD0Ev>:
CPantallaEdicionPaso::~CPantallaEdicionPaso()
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
}
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f7ff ffdd 	bl	8006ac4 <_ZN20CPantallaEdicionPasoD1Ev>
 8006b0a:	21f8      	movs	r1, #248	@ 0xf8
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f00a fc83 	bl	8011418 <_ZdlPvj>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4618      	mov	r0, r3
 8006b16:	3708      	adds	r7, #8
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <_ZThn48_N20CPantallaEdicionPasoD0Ev>:
 8006b1c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8006b20:	f7ff bfec 	b.w	8006afc <_ZN20CPantallaEdicionPasoD0Ev>

08006b24 <_ZN20CPantallaEdicionPaso9SetIdPasoEii>:
void CPantallaEdicionPaso::SetIdPaso(int id_rampa, int id_paso)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b08e      	sub	sp, #56	@ 0x38
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]
	ID_Paso=id_paso;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	ID_Rampa=id_rampa;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	Temperatura=100;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2264      	movs	r2, #100	@ 0x64
 8006b44:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	NivelAire=50;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2232      	movs	r2, #50	@ 0x32
 8006b4c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	Segundos=10;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	220a      	movs	r2, #10
 8006b54:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	CRampa rampa=	ControladorRampas.DameRampa(ID_Rampa);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006b5e:	f107 0320 	add.w	r3, r7, #32
 8006b62:	491b      	ldr	r1, [pc, #108]	@ (8006bd0 <_ZN20CPantallaEdicionPaso9SetIdPasoEii+0xac>)
 8006b64:	4618      	mov	r0, r3
 8006b66:	f004 f9b8 	bl	800aeda <_ZN18CControladorRampas9DameRampaEi>
	LabelRampa->SetTexto((char*)"Rampa:%s",rampa.Nombre);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006b70:	f107 0320 	add.w	r3, r7, #32
 8006b74:	3308      	adds	r3, #8
 8006b76:	461a      	mov	r2, r3
 8006b78:	4916      	ldr	r1, [pc, #88]	@ (8006bd4 <_ZN20CPantallaEdicionPaso9SetIdPasoEii+0xb0>)
 8006b7a:	f7fc f981 	bl	8002e80 <_ZN12CEtiquetaTft8SetTextoEPcz>
	if(id_paso!=-1)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b84:	d01c      	beq.n	8006bc0 <_ZN20CPantallaEdicionPaso9SetIdPasoEii+0x9c>
	{
		CPaso paso=ControladorPasosRampa.DamePasoRampa(ID_Paso);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8006b8c:	f107 0314 	add.w	r3, r7, #20
 8006b90:	4911      	ldr	r1, [pc, #68]	@ (8006bd8 <_ZN20CPantallaEdicionPaso9SetIdPasoEii+0xb4>)
 8006b92:	4618      	mov	r0, r3
 8006b94:	f003 ff41 	bl	800aa1a <_ZN22CControladorPasosRampa13DamePasoRampaEi>
		Temperatura=paso.Temperatura;
 8006b98:	8bbb      	ldrh	r3, [r7, #28]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		NivelAire=paso.NivelAire;
 8006ba2:	7fbb      	ldrb	r3, [r7, #30]
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
		Segundos=paso.Segundos;
 8006bac:	7ffb      	ldrb	r3, [r7, #31]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	}
 8006bb6:	f107 0314 	add.w	r3, r7, #20
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f004 fc54 	bl	800b468 <_ZN5CPasoD1Ev>
}
 8006bc0:	f107 0320 	add.w	r3, r7, #32
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f004 fc95 	bl	800b4f4 <_ZN6CRampaD1Ev>
 8006bca:	3738      	adds	r7, #56	@ 0x38
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	20000360 	.word	0x20000360
 8006bd4:	08014344 	.word	0x08014344
 8006bd8:	200001f4 	.word	0x200001f4

08006bdc <_ZN20CPantallaEdicionPaso19OnPerillaIncrementoEv>:
void CPantallaEdicionPaso::OnPerillaIncremento()
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
	if(Estado==ESTADO_EDICION_PASO::SELECIONANDO)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f893 30f4 	ldrb.w	r3, [r3, #244]	@ 0xf4
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d103      	bne.n	8006bf6 <_ZN20CPantallaEdicionPaso19OnPerillaIncrementoEv+0x1a>
		NavegarIncremento();
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f8f5 	bl	8006dde <_ZN20CPantallaEdicionPaso17NavegarIncrementoEv>
	else
		ValorIncremento();

}
 8006bf4:	e002      	b.n	8006bfc <_ZN20CPantallaEdicionPaso19OnPerillaIncrementoEv+0x20>
		ValorIncremento();
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 fa07 	bl	800700a <_ZN20CPantallaEdicionPaso15ValorIncrementoEv>
}
 8006bfc:	bf00      	nop
 8006bfe:	3708      	adds	r7, #8
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <_ZThn48_N20CPantallaEdicionPaso19OnPerillaIncrementoEv>:
	void SetIdPaso(int id_Rampa,int id_paso);
	virtual void OnPerillaIncremento();
 8006c04:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8006c08:	f7ff bfe8 	b.w	8006bdc <_ZN20CPantallaEdicionPaso19OnPerillaIncrementoEv>

08006c0c <_ZN20CPantallaEdicionPaso19OnPerillaDecrementoEv>:
void CPantallaEdicionPaso::OnPerillaDecremento()
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
	if(Estado==ESTADO_EDICION_PASO::SELECIONANDO)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 30f4 	ldrb.w	r3, [r3, #244]	@ 0xf4
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d103      	bne.n	8006c26 <_ZN20CPantallaEdicionPaso19OnPerillaDecrementoEv+0x1a>
		NavegarDecremento();
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f939 	bl	8006e96 <_ZN20CPantallaEdicionPaso17NavegarDecrementoEv>
	else
		ValorDecremento();
}
 8006c24:	e002      	b.n	8006c2c <_ZN20CPantallaEdicionPaso19OnPerillaDecrementoEv+0x20>
		ValorDecremento();
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 fa43 	bl	80070b2 <_ZN20CPantallaEdicionPaso15ValorDecrementoEv>
}
 8006c2c:	bf00      	nop
 8006c2e:	3708      	adds	r7, #8
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <_ZThn48_N20CPantallaEdicionPaso19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 8006c34:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8006c38:	f7ff bfe8 	b.w	8006c0c <_ZN20CPantallaEdicionPaso19OnPerillaDecrementoEv>

08006c3c <_ZN20CPantallaEdicionPaso20OnBotonUnoClickEventEv>:
void CPantallaEdicionPaso::OnBotonUnoClickEvent()
{
 8006c3c:	b590      	push	{r4, r7, lr}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af02      	add	r7, sp, #8
 8006c42:	6078      	str	r0, [r7, #4]
	if(ID_Paso<=0)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	dc1b      	bgt.n	8006c86 <_ZN20CPantallaEdicionPaso20OnBotonUnoClickEventEv+0x4a>
	{
		ControladorPasosRampa.AgregarPasoRampa(ID_Rampa, Temperatura, NivelAire, Segundos);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006c62:	b2d8      	uxtb	r0, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	9300      	str	r3, [sp, #0]
 8006c6e:	4603      	mov	r3, r0
 8006c70:	4818      	ldr	r0, [pc, #96]	@ (8006cd4 <_ZN20CPantallaEdicionPaso20OnBotonUnoClickEventEv+0x98>)
 8006c72:	f003 ff1c 	bl	800aaae <_ZN22CControladorPasosRampa16AgregarPasoRampaEithh>
		ManejadorPantallas.AsignaPantallaPasosRampa(ID_Rampa);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	4816      	ldr	r0, [pc, #88]	@ (8006cd8 <_ZN20CPantallaEdicionPaso20OnBotonUnoClickEventEv+0x9c>)
 8006c80:	f7fd f9e5 	bl	800404e <_ZN19CManejadorPantallas24AsignaPantallaPasosRampaEi>
	{
		ControladorPasosRampa.ActualizaPasoRampa(ID_Paso, ID_Rampa, Temperatura, NivelAire, Segundos);
		ManejadorPantallas.MuestraPantallaPaso(ID_Rampa, ID_Paso);
	}

}
 8006c84:	e022      	b.n	8006ccc <_ZN20CPantallaEdicionPaso20OnBotonUnoClickEventEv+0x90>
		ControladorPasosRampa.ActualizaPasoRampa(ID_Paso, ID_Rampa, Temperatura, NivelAire, Segundos);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8d3 10ac 	ldr.w	r1, [r3, #172]	@ 0xac
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006c98:	b29c      	uxth	r4, r3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	f8d2 20bc 	ldr.w	r2, [r2, #188]	@ 0xbc
 8006ca8:	b2d2      	uxtb	r2, r2
 8006caa:	9201      	str	r2, [sp, #4]
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	4623      	mov	r3, r4
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	4808      	ldr	r0, [pc, #32]	@ (8006cd4 <_ZN20CPantallaEdicionPaso20OnBotonUnoClickEventEv+0x98>)
 8006cb4:	f003 fd2c 	bl	800a710 <_ZN22CControladorPasosRampa18ActualizaPasoRampaEiithh>
		ManejadorPantallas.MuestraPantallaPaso(ID_Rampa, ID_Paso);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	4804      	ldr	r0, [pc, #16]	@ (8006cd8 <_ZN20CPantallaEdicionPaso20OnBotonUnoClickEventEv+0x9c>)
 8006cc8:	f7fd fa35 	bl	8004136 <_ZN19CManejadorPantallas19MuestraPantallaPasoEii>
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd90      	pop	{r4, r7, pc}
 8006cd4:	200001f4 	.word	0x200001f4
 8006cd8:	20000258 	.word	0x20000258

08006cdc <_ZThn48_N20CPantallaEdicionPaso20OnBotonUnoClickEventEv>:
	virtual void OnBotonUnoClickEvent();
 8006cdc:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8006ce0:	f7ff bfac 	b.w	8006c3c <_ZN20CPantallaEdicionPaso20OnBotonUnoClickEventEv>

08006ce4 <_ZN20CPantallaEdicionPaso21OnBotonTresClickEventEv>:

void CPantallaEdicionPaso::OnBotonTresClickEvent()
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
	if(ID_Paso<=0)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	dc07      	bgt.n	8006d06 <_ZN20CPantallaEdicionPaso21OnBotonTresClickEventEv+0x22>
		ManejadorPantallas.AsignaPantallaPasosRampa(ID_Rampa);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	4809      	ldr	r0, [pc, #36]	@ (8006d24 <_ZN20CPantallaEdicionPaso21OnBotonTresClickEventEv+0x40>)
 8006d00:	f7fd f9a5 	bl	800404e <_ZN19CManejadorPantallas24AsignaPantallaPasosRampaEi>
	else
		ManejadorPantallas.MuestraPantallaPaso(ID_Rampa, ID_Paso);
}
 8006d04:	e009      	b.n	8006d1a <_ZN20CPantallaEdicionPaso21OnBotonTresClickEventEv+0x36>
		ManejadorPantallas.MuestraPantallaPaso(ID_Rampa, ID_Paso);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006d12:	461a      	mov	r2, r3
 8006d14:	4803      	ldr	r0, [pc, #12]	@ (8006d24 <_ZN20CPantallaEdicionPaso21OnBotonTresClickEventEv+0x40>)
 8006d16:	f7fd fa0e 	bl	8004136 <_ZN19CManejadorPantallas19MuestraPantallaPasoEii>
}
 8006d1a:	bf00      	nop
 8006d1c:	3708      	adds	r7, #8
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	20000258 	.word	0x20000258

08006d28 <_ZThn48_N20CPantallaEdicionPaso21OnBotonTresClickEventEv>:
	virtual void OnBotonTresClickEvent();
 8006d28:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8006d2c:	f7ff bfda 	b.w	8006ce4 <_ZN20CPantallaEdicionPaso21OnBotonTresClickEventEv>

08006d30 <_ZN20CPantallaEdicionPaso4ShowEv>:
void CPantallaEdicionPaso::Show()
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
	//VelocidadAireInicialPotenciometro=ManejadorControles->GetNivelAire();
	CPantallaBase::Show();
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f7fc fb0a 	bl	8003354 <_ZN13CPantallaBase4ShowEv>

	LabelTemperatura->Show();
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	334c      	adds	r3, #76	@ 0x4c
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4610      	mov	r0, r2
 8006d54:	4798      	blx	r3
	MuestraTemperatura();
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 f9fc 	bl	8007154 <_ZN20CPantallaEdicionPaso18MuestraTemperaturaEv>

	LabelAire->Show();
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	334c      	adds	r3, #76	@ 0x4c
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4610      	mov	r0, r2
 8006d70:	4798      	blx	r3
	MuestraAire();
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 fa0e 	bl	8007194 <_ZN20CPantallaEdicionPaso11MuestraAireEv>

	LabelTiempo->Show();
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	334c      	adds	r3, #76	@ 0x4c
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4610      	mov	r0, r2
 8006d8c:	4798      	blx	r3
	MuestraTiempo();
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fa20 	bl	80071d4 <_ZN20CPantallaEdicionPaso13MuestraTiempoEv>

	LabelRampa->Show();
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	334c      	adds	r3, #76	@ 0x4c
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4610      	mov	r0, r2
 8006da8:	4798      	blx	r3
	LabelGuardar->Show();
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	334c      	adds	r3, #76	@ 0x4c
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4610      	mov	r0, r2
 8006dbe:	4798      	blx	r3
	LabelCancelar->Show();
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	334c      	adds	r3, #76	@ 0x4c
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4610      	mov	r0, r2
 8006dd4:	4798      	blx	r3
}
 8006dd6:	bf00      	nop
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <_ZN20CPantallaEdicionPaso17NavegarIncrementoEv>:
void CPantallaEdicionPaso::NavegarIncremento()
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b082      	sub	sp, #8
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]

	Textos[Seleccionado]->SetBackColor(COLOR::GREY);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	3338      	adds	r3, #56	@ 0x38
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	4413      	add	r3, r2
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	f64d 61de 	movw	r1, #57054	@ 0xdede
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7fc f9d6 	bl	80031ac <_ZN12CEtiquetaTft12SetBackColorEi>
	Textos[Seleccionado]->Show();
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	3338      	adds	r3, #56	@ 0x38
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4413      	add	r3, r2
 8006e0e:	6859      	ldr	r1, [r3, #4]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	3338      	adds	r3, #56	@ 0x38
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4413      	add	r3, r2
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	334c      	adds	r3, #76	@ 0x4c
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4608      	mov	r0, r1
 8006e28:	4798      	blx	r3
	Seleccionado++;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e30:	1c5a      	adds	r2, r3, #1
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
	if(Seleccionado>2)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	dd03      	ble.n	8006e4a <_ZN20CPantallaEdicionPaso17NavegarIncrementoEv+0x6c>
		Seleccionado=0;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
	Textos[Seleccionado]->SetBackColor(COLOR::GREEN);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	3338      	adds	r3, #56	@ 0x38
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4413      	add	r3, r2
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7fc f9a4 	bl	80031ac <_ZN12CEtiquetaTft12SetBackColorEi>
	Textos[Seleccionado]->Show();
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	3338      	adds	r3, #56	@ 0x38
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4413      	add	r3, r2
 8006e72:	6859      	ldr	r1, [r3, #4]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	3338      	adds	r3, #56	@ 0x38
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4413      	add	r3, r2
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	334c      	adds	r3, #76	@ 0x4c
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4608      	mov	r0, r1
 8006e8c:	4798      	blx	r3
}
 8006e8e:	bf00      	nop
 8006e90:	3708      	adds	r7, #8
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <_ZN20CPantallaEdicionPaso17NavegarDecrementoEv>:
void CPantallaEdicionPaso::NavegarDecremento()
{
 8006e96:	b580      	push	{r7, lr}
 8006e98:	b082      	sub	sp, #8
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
	Textos[Seleccionado]->SetBackColor(COLOR::GREY);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	3338      	adds	r3, #56	@ 0x38
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	4413      	add	r3, r2
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	f64d 61de 	movw	r1, #57054	@ 0xdede
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7fc f97a 	bl	80031ac <_ZN12CEtiquetaTft12SetBackColorEi>
	Textos[Seleccionado]->Show();
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	3338      	adds	r3, #56	@ 0x38
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4413      	add	r3, r2
 8006ec6:	6859      	ldr	r1, [r3, #4]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	3338      	adds	r3, #56	@ 0x38
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	4413      	add	r3, r2
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	334c      	adds	r3, #76	@ 0x4c
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4608      	mov	r0, r1
 8006ee0:	4798      	blx	r3
	Seleccionado--;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ee8:	1e5a      	subs	r2, r3, #1
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
	if(Seleccionado<0)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	da03      	bge.n	8006f02 <_ZN20CPantallaEdicionPaso17NavegarDecrementoEv+0x6c>
		Seleccionado=2;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2202      	movs	r2, #2
 8006efe:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
	Textos[Seleccionado]->SetBackColor(COLOR::GREEN);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	3338      	adds	r3, #56	@ 0x38
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4413      	add	r3, r2
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7fc f948 	bl	80031ac <_ZN12CEtiquetaTft12SetBackColorEi>
	Textos[Seleccionado]->Show();
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	3338      	adds	r3, #56	@ 0x38
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4413      	add	r3, r2
 8006f2a:	6859      	ldr	r1, [r3, #4]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	3338      	adds	r3, #56	@ 0x38
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	4413      	add	r3, r2
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	334c      	adds	r3, #76	@ 0x4c
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4608      	mov	r0, r1
 8006f44:	4798      	blx	r3

}
 8006f46:	bf00      	nop
 8006f48:	3708      	adds	r7, #8
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <_ZN20CPantallaEdicionPaso24OnBotonPerillaClickEventEv>:
void CPantallaEdicionPaso::OnBotonPerillaClickEvent()
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b082      	sub	sp, #8
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
	if(Estado==ESTADO_EDICION_PASO::SELECIONANDO)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 30f4 	ldrb.w	r3, [r3, #244]	@ 0xf4
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d126      	bne.n	8006fae <_ZN20CPantallaEdicionPaso24OnBotonPerillaClickEventEv+0x60>
	{
		Estado=ESTADO_EDICION_PASO::EDITANDO;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 20f4 	strb.w	r2, [r3, #244]	@ 0xf4
		Textos[Seleccionado]->SetBackColor(COLOR::WHITE);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	3338      	adds	r3, #56	@ 0x38
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4413      	add	r3, r2
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7fc f915 	bl	80031ac <_ZN12CEtiquetaTft12SetBackColorEi>
		Textos[Seleccionado]->Show();
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	3338      	adds	r3, #56	@ 0x38
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	6859      	ldr	r1, [r3, #4]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	3338      	adds	r3, #56	@ 0x38
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4413      	add	r3, r2
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	334c      	adds	r3, #76	@ 0x4c
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4608      	mov	r0, r1
 8006faa:	4798      	blx	r3
	{
		Estado=ESTADO_EDICION_PASO::SELECIONANDO;
		Textos[Seleccionado]->SetBackColor(COLOR::GREEN);
		Textos[Seleccionado]->Show();
	}
}
 8006fac:	e025      	b.n	8006ffa <_ZN20CPantallaEdicionPaso24OnBotonPerillaClickEventEv+0xac>
		Estado=ESTADO_EDICION_PASO::SELECIONANDO;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 20f4 	strb.w	r2, [r3, #244]	@ 0xf4
		Textos[Seleccionado]->SetBackColor(COLOR::GREEN);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	3338      	adds	r3, #56	@ 0x38
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7fc f8ee 	bl	80031ac <_ZN12CEtiquetaTft12SetBackColorEi>
		Textos[Seleccionado]->Show();
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	3338      	adds	r3, #56	@ 0x38
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	4413      	add	r3, r2
 8006fde:	6859      	ldr	r1, [r3, #4]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	3338      	adds	r3, #56	@ 0x38
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	4413      	add	r3, r2
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	334c      	adds	r3, #76	@ 0x4c
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4608      	mov	r0, r1
 8006ff8:	4798      	blx	r3
}
 8006ffa:	bf00      	nop
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <_ZThn48_N20CPantallaEdicionPaso24OnBotonPerillaClickEventEv>:
	virtual void Show();
	void NavegarIncremento();
	void NavegarDecremento();
	virtual void OnBotonPerillaClickEvent();
 8007002:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8007006:	f7ff bfa2 	b.w	8006f4e <_ZN20CPantallaEdicionPaso24OnBotonPerillaClickEventEv>

0800700a <_ZN20CPantallaEdicionPaso15ValorIncrementoEv>:
void CPantallaEdicionPaso::ValorIncremento()
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b082      	sub	sp, #8
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
	switch(Seleccionado)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007018:	2b02      	cmp	r3, #2
 800701a:	d030      	beq.n	800707e <_ZN20CPantallaEdicionPaso15ValorIncrementoEv+0x74>
 800701c:	2b02      	cmp	r3, #2
 800701e:	dc44      	bgt.n	80070aa <_ZN20CPantallaEdicionPaso15ValorIncrementoEv+0xa0>
 8007020:	2b00      	cmp	r3, #0
 8007022:	d002      	beq.n	800702a <_ZN20CPantallaEdicionPaso15ValorIncrementoEv+0x20>
 8007024:	2b01      	cmp	r3, #1
 8007026:	d016      	beq.n	8007056 <_ZN20CPantallaEdicionPaso15ValorIncrementoEv+0x4c>
		if(Segundos>600)
			Segundos=600;
		MuestraTiempo();
		break;
	}
}
 8007028:	e03f      	b.n	80070aa <_ZN20CPantallaEdicionPaso15ValorIncrementoEv+0xa0>
		Temperatura++;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007030:	1c5a      	adds	r2, r3, #1
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		if(Temperatura>500)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800703e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007042:	dd04      	ble.n	800704e <_ZN20CPantallaEdicionPaso15ValorIncrementoEv+0x44>
			Temperatura=500;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800704a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		MuestraTemperatura();
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f880 	bl	8007154 <_ZN20CPantallaEdicionPaso18MuestraTemperaturaEv>
		break;
 8007054:	e029      	b.n	80070aa <_ZN20CPantallaEdicionPaso15ValorIncrementoEv+0xa0>
		NivelAire++;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800705c:	1c5a      	adds	r2, r3, #1
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
		if(NivelAire>100)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800706a:	2b64      	cmp	r3, #100	@ 0x64
 800706c:	dd03      	ble.n	8007076 <_ZN20CPantallaEdicionPaso15ValorIncrementoEv+0x6c>
			NivelAire=100;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2264      	movs	r2, #100	@ 0x64
 8007072:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
		MuestraAire();
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f88c 	bl	8007194 <_ZN20CPantallaEdicionPaso11MuestraAireEv>
		break;
 800707c:	e015      	b.n	80070aa <_ZN20CPantallaEdicionPaso15ValorIncrementoEv+0xa0>
		Segundos++;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007084:	1c5a      	adds	r2, r3, #1
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
		if(Segundos>600)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007092:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8007096:	dd04      	ble.n	80070a2 <_ZN20CPantallaEdicionPaso15ValorIncrementoEv+0x98>
			Segundos=600;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800709e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
		MuestraTiempo();
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f896 	bl	80071d4 <_ZN20CPantallaEdicionPaso13MuestraTiempoEv>
		break;
 80070a8:	bf00      	nop
}
 80070aa:	bf00      	nop
 80070ac:	3708      	adds	r7, #8
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <_ZN20CPantallaEdicionPaso15ValorDecrementoEv>:
void CPantallaEdicionPaso::ValorDecremento()
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b082      	sub	sp, #8
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
	switch(Seleccionado)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d02e      	beq.n	8007122 <_ZN20CPantallaEdicionPaso15ValorDecrementoEv+0x70>
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	dc40      	bgt.n	800714a <_ZN20CPantallaEdicionPaso15ValorDecrementoEv+0x98>
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d002      	beq.n	80070d2 <_ZN20CPantallaEdicionPaso15ValorDecrementoEv+0x20>
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d014      	beq.n	80070fa <_ZN20CPantallaEdicionPaso15ValorDecrementoEv+0x48>
			Segundos=0;
		MuestraTiempo();
		break;
	}

}
 80070d0:	e03b      	b.n	800714a <_ZN20CPantallaEdicionPaso15ValorDecrementoEv+0x98>
		Temperatura--;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80070d8:	1e5a      	subs	r2, r3, #1
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		if(Temperatura<0)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	da03      	bge.n	80070f2 <_ZN20CPantallaEdicionPaso15ValorDecrementoEv+0x40>
			Temperatura=0;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		MuestraTemperatura();
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 f82e 	bl	8007154 <_ZN20CPantallaEdicionPaso18MuestraTemperaturaEv>
		break;
 80070f8:	e027      	b.n	800714a <_ZN20CPantallaEdicionPaso15ValorDecrementoEv+0x98>
		NivelAire--;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007100:	1e5a      	subs	r2, r3, #1
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
		if(NivelAire<0)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800710e:	2b00      	cmp	r3, #0
 8007110:	da03      	bge.n	800711a <_ZN20CPantallaEdicionPaso15ValorDecrementoEv+0x68>
			NivelAire=0;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
		MuestraAire();
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 f83a 	bl	8007194 <_ZN20CPantallaEdicionPaso11MuestraAireEv>
		break;
 8007120:	e013      	b.n	800714a <_ZN20CPantallaEdicionPaso15ValorDecrementoEv+0x98>
		Segundos--;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007128:	1e5a      	subs	r2, r3, #1
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
		if(Segundos<0)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007136:	2b00      	cmp	r3, #0
 8007138:	da03      	bge.n	8007142 <_ZN20CPantallaEdicionPaso15ValorDecrementoEv+0x90>
			Segundos=0;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
		MuestraTiempo();
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f846 	bl	80071d4 <_ZN20CPantallaEdicionPaso13MuestraTiempoEv>
		break;
 8007148:	bf00      	nop
}
 800714a:	bf00      	nop
 800714c:	3708      	adds	r7, #8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
	...

08007154 <_ZN20CPantallaEdicionPaso18MuestraTemperaturaEv>:

void CPantallaEdicionPaso::MuestraTemperatura()
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
	TextTemperatura->SetTexto((char*)"%d", Temperatura);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007168:	461a      	mov	r2, r3
 800716a:	4909      	ldr	r1, [pc, #36]	@ (8007190 <_ZN20CPantallaEdicionPaso18MuestraTemperaturaEv+0x3c>)
 800716c:	f7fb fe88 	bl	8002e80 <_ZN12CEtiquetaTft8SetTextoEPcz>
	TextTemperatura->Show();
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	334c      	adds	r3, #76	@ 0x4c
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4610      	mov	r0, r2
 8007184:	4798      	blx	r3
}
 8007186:	bf00      	nop
 8007188:	3708      	adds	r7, #8
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	08014350 	.word	0x08014350

08007194 <_ZN20CPantallaEdicionPaso11MuestraAireEv>:
void CPantallaEdicionPaso::MuestraAire()
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
	TextAire->SetTexto((char*)"%d", NivelAire);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 00d8 	ldr.w	r0, [r3, #216]	@ 0xd8
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80071a8:	461a      	mov	r2, r3
 80071aa:	4909      	ldr	r1, [pc, #36]	@ (80071d0 <_ZN20CPantallaEdicionPaso11MuestraAireEv+0x3c>)
 80071ac:	f7fb fe68 	bl	8002e80 <_ZN12CEtiquetaTft8SetTextoEPcz>
	TextAire->Show();
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	334c      	adds	r3, #76	@ 0x4c
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4610      	mov	r0, r2
 80071c4:	4798      	blx	r3
}
 80071c6:	bf00      	nop
 80071c8:	3708      	adds	r7, #8
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	08014350 	.word	0x08014350

080071d4 <_ZN20CPantallaEdicionPaso13MuestraTiempoEv>:
void CPantallaEdicionPaso::MuestraTiempo()
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
	TextTiempo->SetTexto((char*)"%d", Segundos);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80071e8:	461a      	mov	r2, r3
 80071ea:	4909      	ldr	r1, [pc, #36]	@ (8007210 <_ZN20CPantallaEdicionPaso13MuestraTiempoEv+0x3c>)
 80071ec:	f7fb fe48 	bl	8002e80 <_ZN12CEtiquetaTft8SetTextoEPcz>
	TextTiempo->Show();
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	334c      	adds	r3, #76	@ 0x4c
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4610      	mov	r0, r2
 8007204:	4798      	blx	r3
}
 8007206:	bf00      	nop
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	08014350 	.word	0x08014350

08007214 <_ZN21CPantallaEditorNombreC1Ei>:
 */

#include <GUI/Rampa/PantallaEditorNombre/CPantallaEditorNombre.hpp>
#include <GUI/ManejadorPantallas/CManejadorPantallas.hpp>

CPantallaEditorNombre::CPantallaEditorNombre(int id_Rampa) :
 8007214:	b590      	push	{r4, r7, lr}
 8007216:	b09b      	sub	sp, #108	@ 0x6c
 8007218:	af08      	add	r7, sp, #32
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
		CPantallaMenuBase((char*) "   Editor")
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	49a7      	ldr	r1, [pc, #668]	@ (80074c0 <_ZN21CPantallaEditorNombreC1Ei+0x2ac>)
 8007222:	4618      	mov	r0, r3
 8007224:	f7ff f88e 	bl	8006344 <_ZN17CPantallaMenuBaseC1EPc>
 8007228:	4aa6      	ldr	r2, [pc, #664]	@ (80074c4 <_ZN21CPantallaEditorNombreC1Ei+0x2b0>)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	601a      	str	r2, [r3, #0]
 800722e:	4aa6      	ldr	r2, [pc, #664]	@ (80074c8 <_ZN21CPantallaEditorNombreC1Ei+0x2b4>)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	631a      	str	r2, [r3, #48]	@ 0x30
 8007234:	4aa5      	ldr	r2, [pc, #660]	@ (80074cc <_ZN21CPantallaEditorNombreC1Ei+0x2b8>)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	220f      	movs	r2, #15
 8007240:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
{
	ID_Rampa=id_Rampa;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	683a      	ldr	r2, [r7, #0]
 8007250:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	// TODO Auto-generated constructor stub
	LabelNombre = new CEtiquetaTft(5, 35, 50, 20, COLOR::BLACK, (char*) "Nombre:", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8007254:	20a4      	movs	r0, #164	@ 0xa4
 8007256:	f00a f8e1 	bl	801141c <_Znwj>
 800725a:	4603      	mov	r3, r0
 800725c:	461c      	mov	r4, r3
 800725e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007262:	9306      	str	r3, [sp, #24]
 8007264:	2300      	movs	r3, #0
 8007266:	9305      	str	r3, [sp, #20]
 8007268:	2303      	movs	r3, #3
 800726a:	9304      	str	r3, [sp, #16]
 800726c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007270:	9303      	str	r3, [sp, #12]
 8007272:	4b97      	ldr	r3, [pc, #604]	@ (80074d0 <_ZN21CPantallaEditorNombreC1Ei+0x2bc>)
 8007274:	9302      	str	r3, [sp, #8]
 8007276:	2300      	movs	r3, #0
 8007278:	9301      	str	r3, [sp, #4]
 800727a:	2314      	movs	r3, #20
 800727c:	9300      	str	r3, [sp, #0]
 800727e:	2332      	movs	r3, #50	@ 0x32
 8007280:	2223      	movs	r2, #35	@ 0x23
 8007282:	2105      	movs	r1, #5
 8007284:	4620      	mov	r0, r4
 8007286:	f7fb fdc1 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8c3 40b4 	str.w	r4, [r3, #180]	@ 0xb4
	TextNombre = new CEtiquetaTft(10, 65, 300, 30, COLOR::WHITE, (char*) "", COLOR::BLACK, 3, 0, COLOR::WHITE);
 8007290:	20a4      	movs	r0, #164	@ 0xa4
 8007292:	f00a f8c3 	bl	801141c <_Znwj>
 8007296:	4603      	mov	r3, r0
 8007298:	461c      	mov	r4, r3
 800729a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800729e:	9306      	str	r3, [sp, #24]
 80072a0:	2300      	movs	r3, #0
 80072a2:	9305      	str	r3, [sp, #20]
 80072a4:	2303      	movs	r3, #3
 80072a6:	9304      	str	r3, [sp, #16]
 80072a8:	2300      	movs	r3, #0
 80072aa:	9303      	str	r3, [sp, #12]
 80072ac:	4b89      	ldr	r3, [pc, #548]	@ (80074d4 <_ZN21CPantallaEditorNombreC1Ei+0x2c0>)
 80072ae:	9302      	str	r3, [sp, #8]
 80072b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80072b4:	9301      	str	r3, [sp, #4]
 80072b6:	231e      	movs	r3, #30
 80072b8:	9300      	str	r3, [sp, #0]
 80072ba:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80072be:	2241      	movs	r2, #65	@ 0x41
 80072c0:	210a      	movs	r1, #10
 80072c2:	4620      	mov	r0, r4
 80072c4:	f7fb fda2 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8c3 40b8 	str.w	r4, [r3, #184]	@ 0xb8
	Opciones=NULL;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	Menu->SetPosicion(10, 100);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80072dc:	2264      	movs	r2, #100	@ 0x64
 80072de:	210a      	movs	r1, #10
 80072e0:	4618      	mov	r0, r3
 80072e2:	f7fd faf8 	bl	80048d6 <_ZN5CMenu11SetPosicionEii>
	//inico el teclado
	int x1=10;
 80072e6:	230a      	movs	r3, #10
 80072e8:	643b      	str	r3, [r7, #64]	@ 0x40
	int x2=x1+20;
 80072ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072ec:	3314      	adds	r3, #20
 80072ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int x3=x2+20;
 80072f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072f2:	3314      	adds	r3, #20
 80072f4:	63bb      	str	r3, [r7, #56]	@ 0x38
	int x4=x3+20;
 80072f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072f8:	3314      	adds	r3, #20
 80072fa:	637b      	str	r3, [r7, #52]	@ 0x34
	int x5=x4+20;
 80072fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072fe:	3314      	adds	r3, #20
 8007300:	633b      	str	r3, [r7, #48]	@ 0x30
	int x6=x5+20;
 8007302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007304:	3314      	adds	r3, #20
 8007306:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int x7=x6+20;
 8007308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800730a:	3314      	adds	r3, #20
 800730c:	62bb      	str	r3, [r7, #40]	@ 0x28
	int x8=x7+20;
 800730e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007310:	3314      	adds	r3, #20
 8007312:	627b      	str	r3, [r7, #36]	@ 0x24
	int x9=x8+20;
 8007314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007316:	3314      	adds	r3, #20
 8007318:	623b      	str	r3, [r7, #32]
	int x10=x9+20;
 800731a:	6a3b      	ldr	r3, [r7, #32]
 800731c:	3314      	adds	r3, #20
 800731e:	61fb      	str	r3, [r7, #28]

	int y1=5;
 8007320:	2305      	movs	r3, #5
 8007322:	61bb      	str	r3, [r7, #24]
	int y2=y1+25;
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	3319      	adds	r3, #25
 8007328:	617b      	str	r3, [r7, #20]
	int y3=y2+25;
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	3319      	adds	r3, #25
 800732e:	613b      	str	r3, [r7, #16]
	int y4=y3+25;
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	3319      	adds	r3, #25
 8007334:	60fb      	str	r3, [r7, #12]
	int y5=y4+30;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	331e      	adds	r3, #30
 800733a:	60bb      	str	r3, [r7, #8]
	AgregaMenuItem((char*) "0", EDITOR_TECLAS::TECLA_0,x1,y1,10,10);
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	230a      	movs	r3, #10
 8007340:	9302      	str	r3, [sp, #8]
 8007342:	230a      	movs	r3, #10
 8007344:	9301      	str	r3, [sp, #4]
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	9300      	str	r3, [sp, #0]
 800734a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800734c:	2200      	movs	r2, #0
 800734e:	4962      	ldr	r1, [pc, #392]	@ (80074d8 <_ZN21CPantallaEditorNombreC1Ei+0x2c4>)
 8007350:	f7ff f912 	bl	8006578 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "1", EDITOR_TECLAS::TECLA_1,x2,y1,10,10);
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	230a      	movs	r3, #10
 8007358:	9302      	str	r3, [sp, #8]
 800735a:	230a      	movs	r3, #10
 800735c:	9301      	str	r3, [sp, #4]
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	9300      	str	r3, [sp, #0]
 8007362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007364:	2201      	movs	r2, #1
 8007366:	495d      	ldr	r1, [pc, #372]	@ (80074dc <_ZN21CPantallaEditorNombreC1Ei+0x2c8>)
 8007368:	f7ff f906 	bl	8006578 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "2", EDITOR_TECLAS::TECLA_2,x3,y1,10,10);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	230a      	movs	r3, #10
 8007370:	9302      	str	r3, [sp, #8]
 8007372:	230a      	movs	r3, #10
 8007374:	9301      	str	r3, [sp, #4]
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	9300      	str	r3, [sp, #0]
 800737a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800737c:	2202      	movs	r2, #2
 800737e:	4958      	ldr	r1, [pc, #352]	@ (80074e0 <_ZN21CPantallaEditorNombreC1Ei+0x2cc>)
 8007380:	f7ff f8fa 	bl	8006578 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "3", EDITOR_TECLAS::TECLA_3,x4,y1,10,10);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	230a      	movs	r3, #10
 8007388:	9302      	str	r3, [sp, #8]
 800738a:	230a      	movs	r3, #10
 800738c:	9301      	str	r3, [sp, #4]
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	9300      	str	r3, [sp, #0]
 8007392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007394:	2203      	movs	r2, #3
 8007396:	4953      	ldr	r1, [pc, #332]	@ (80074e4 <_ZN21CPantallaEditorNombreC1Ei+0x2d0>)
 8007398:	f7ff f8ee 	bl	8006578 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "4", EDITOR_TECLAS::TECLA_4,x5,y1,10,10);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	230a      	movs	r3, #10
 80073a0:	9302      	str	r3, [sp, #8]
 80073a2:	230a      	movs	r3, #10
 80073a4:	9301      	str	r3, [sp, #4]
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	9300      	str	r3, [sp, #0]
 80073aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ac:	2204      	movs	r2, #4
 80073ae:	494e      	ldr	r1, [pc, #312]	@ (80074e8 <_ZN21CPantallaEditorNombreC1Ei+0x2d4>)
 80073b0:	f7ff f8e2 	bl	8006578 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "5", EDITOR_TECLAS::TECLA_5,x6,y1,10,10);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	230a      	movs	r3, #10
 80073b8:	9302      	str	r3, [sp, #8]
 80073ba:	230a      	movs	r3, #10
 80073bc:	9301      	str	r3, [sp, #4]
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	9300      	str	r3, [sp, #0]
 80073c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073c4:	2205      	movs	r2, #5
 80073c6:	4949      	ldr	r1, [pc, #292]	@ (80074ec <_ZN21CPantallaEditorNombreC1Ei+0x2d8>)
 80073c8:	f7ff f8d6 	bl	8006578 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "6", EDITOR_TECLAS::TECLA_6,x7,y1,10,10);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	230a      	movs	r3, #10
 80073d0:	9302      	str	r3, [sp, #8]
 80073d2:	230a      	movs	r3, #10
 80073d4:	9301      	str	r3, [sp, #4]
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	9300      	str	r3, [sp, #0]
 80073da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073dc:	2206      	movs	r2, #6
 80073de:	4944      	ldr	r1, [pc, #272]	@ (80074f0 <_ZN21CPantallaEditorNombreC1Ei+0x2dc>)
 80073e0:	f7ff f8ca 	bl	8006578 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "7", EDITOR_TECLAS::TECLA_7,x8,y1,10,10);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	230a      	movs	r3, #10
 80073e8:	9302      	str	r3, [sp, #8]
 80073ea:	230a      	movs	r3, #10
 80073ec:	9301      	str	r3, [sp, #4]
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f4:	2207      	movs	r2, #7
 80073f6:	493f      	ldr	r1, [pc, #252]	@ (80074f4 <_ZN21CPantallaEditorNombreC1Ei+0x2e0>)
 80073f8:	f7ff f8be 	bl	8006578 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "8", EDITOR_TECLAS::TECLA_8,x9,y1,10,10);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	230a      	movs	r3, #10
 8007400:	9302      	str	r3, [sp, #8]
 8007402:	230a      	movs	r3, #10
 8007404:	9301      	str	r3, [sp, #4]
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	9300      	str	r3, [sp, #0]
 800740a:	6a3b      	ldr	r3, [r7, #32]
 800740c:	2208      	movs	r2, #8
 800740e:	493a      	ldr	r1, [pc, #232]	@ (80074f8 <_ZN21CPantallaEditorNombreC1Ei+0x2e4>)
 8007410:	f7ff f8b2 	bl	8006578 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "9", EDITOR_TECLAS::TECLA_9,x10,y1,10,10);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	230a      	movs	r3, #10
 8007418:	9302      	str	r3, [sp, #8]
 800741a:	230a      	movs	r3, #10
 800741c:	9301      	str	r3, [sp, #4]
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	9300      	str	r3, [sp, #0]
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	2209      	movs	r2, #9
 8007426:	4935      	ldr	r1, [pc, #212]	@ (80074fc <_ZN21CPantallaEditorNombreC1Ei+0x2e8>)
 8007428:	f7ff f8a6 	bl	8006578 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>

	AgregaMenuItem((char*) "Q", EDITOR_TECLAS::TECLA_Q,x1,y2,10,10);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	230a      	movs	r3, #10
 8007430:	9302      	str	r3, [sp, #8]
 8007432:	230a      	movs	r3, #10
 8007434:	9301      	str	r3, [sp, #4]
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	9300      	str	r3, [sp, #0]
 800743a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800743c:	221b      	movs	r2, #27
 800743e:	4930      	ldr	r1, [pc, #192]	@ (8007500 <_ZN21CPantallaEditorNombreC1Ei+0x2ec>)
 8007440:	f7ff f89a 	bl	8006578 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "W", EDITOR_TECLAS::TECLA_W,x2,y2,10,10);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	230a      	movs	r3, #10
 8007448:	9302      	str	r3, [sp, #8]
 800744a:	230a      	movs	r3, #10
 800744c:	9301      	str	r3, [sp, #4]
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	9300      	str	r3, [sp, #0]
 8007452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007454:	2220      	movs	r2, #32
 8007456:	492b      	ldr	r1, [pc, #172]	@ (8007504 <_ZN21CPantallaEditorNombreC1Ei+0x2f0>)
 8007458:	f7ff f88e 	bl	8006578 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "E", EDITOR_TECLAS::TECLA_E,x3,y2,10,10);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	230a      	movs	r3, #10
 8007460:	9302      	str	r3, [sp, #8]
 8007462:	230a      	movs	r3, #10
 8007464:	9301      	str	r3, [sp, #4]
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	9300      	str	r3, [sp, #0]
 800746a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800746c:	220b      	movs	r2, #11
 800746e:	4926      	ldr	r1, [pc, #152]	@ (8007508 <_ZN21CPantallaEditorNombreC1Ei+0x2f4>)
 8007470:	f7ff f882 	bl	8006578 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "R", EDITOR_TECLAS::TECLA_R,x4,y2,10,10);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	230a      	movs	r3, #10
 8007478:	9302      	str	r3, [sp, #8]
 800747a:	230a      	movs	r3, #10
 800747c:	9301      	str	r3, [sp, #4]
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	9300      	str	r3, [sp, #0]
 8007482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007484:	221c      	movs	r2, #28
 8007486:	4921      	ldr	r1, [pc, #132]	@ (800750c <_ZN21CPantallaEditorNombreC1Ei+0x2f8>)
 8007488:	f7ff f876 	bl	8006578 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "T", EDITOR_TECLAS::TECLA_T,x5,y2,10,10);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	230a      	movs	r3, #10
 8007490:	9302      	str	r3, [sp, #8]
 8007492:	230a      	movs	r3, #10
 8007494:	9301      	str	r3, [sp, #4]
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	9300      	str	r3, [sp, #0]
 800749a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749c:	221e      	movs	r2, #30
 800749e:	491c      	ldr	r1, [pc, #112]	@ (8007510 <_ZN21CPantallaEditorNombreC1Ei+0x2fc>)
 80074a0:	f7ff f86a 	bl	8006578 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "Y", EDITOR_TECLAS::TECLA_Y,x6,y2,10,10);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	230a      	movs	r3, #10
 80074a8:	9302      	str	r3, [sp, #8]
 80074aa:	230a      	movs	r3, #10
 80074ac:	9301      	str	r3, [sp, #4]
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	9300      	str	r3, [sp, #0]
 80074b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074b4:	2222      	movs	r2, #34	@ 0x22
 80074b6:	4917      	ldr	r1, [pc, #92]	@ (8007514 <_ZN21CPantallaEditorNombreC1Ei+0x300>)
 80074b8:	f7ff f85e 	bl	8006578 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
 80074bc:	e02c      	b.n	8007518 <_ZN21CPantallaEditorNombreC1Ei+0x304>
 80074be:	bf00      	nop
 80074c0:	08014354 	.word	0x08014354
 80074c4:	080150dc 	.word	0x080150dc
 80074c8:	08015184 	.word	0x08015184
 80074cc:	080151b8 	.word	0x080151b8
 80074d0:	08014360 	.word	0x08014360
 80074d4:	08014368 	.word	0x08014368
 80074d8:	0801436c 	.word	0x0801436c
 80074dc:	08014370 	.word	0x08014370
 80074e0:	08014374 	.word	0x08014374
 80074e4:	08014378 	.word	0x08014378
 80074e8:	0801437c 	.word	0x0801437c
 80074ec:	08014380 	.word	0x08014380
 80074f0:	08014384 	.word	0x08014384
 80074f4:	08014388 	.word	0x08014388
 80074f8:	0801438c 	.word	0x0801438c
 80074fc:	08014390 	.word	0x08014390
 8007500:	08014394 	.word	0x08014394
 8007504:	08014398 	.word	0x08014398
 8007508:	0801439c 	.word	0x0801439c
 800750c:	080143a0 	.word	0x080143a0
 8007510:	080143a4 	.word	0x080143a4
 8007514:	080143a8 	.word	0x080143a8
	AgregaMenuItem((char*) "U", EDITOR_TECLAS::TECLA_U,x7,y2,10,10);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	230a      	movs	r3, #10
 800751c:	9302      	str	r3, [sp, #8]
 800751e:	230a      	movs	r3, #10
 8007520:	9301      	str	r3, [sp, #4]
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	9300      	str	r3, [sp, #0]
 8007526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007528:	220e      	movs	r2, #14
 800752a:	499f      	ldr	r1, [pc, #636]	@ (80077a8 <_ZN21CPantallaEditorNombreC1Ei+0x594>)
 800752c:	f7ff f824 	bl	8006578 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "I", EDITOR_TECLAS::TECLA_I,x8,y2,10,10);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	230a      	movs	r3, #10
 8007534:	9302      	str	r3, [sp, #8]
 8007536:	230a      	movs	r3, #10
 8007538:	9301      	str	r3, [sp, #4]
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	9300      	str	r3, [sp, #0]
 800753e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007540:	220c      	movs	r2, #12
 8007542:	499a      	ldr	r1, [pc, #616]	@ (80077ac <_ZN21CPantallaEditorNombreC1Ei+0x598>)
 8007544:	f7ff f818 	bl	8006578 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "O", EDITOR_TECLAS::TECLA_O,x9,y2,10,10);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	230a      	movs	r3, #10
 800754c:	9302      	str	r3, [sp, #8]
 800754e:	230a      	movs	r3, #10
 8007550:	9301      	str	r3, [sp, #4]
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	6a3b      	ldr	r3, [r7, #32]
 8007558:	220d      	movs	r2, #13
 800755a:	4995      	ldr	r1, [pc, #596]	@ (80077b0 <_ZN21CPantallaEditorNombreC1Ei+0x59c>)
 800755c:	f7ff f80c 	bl	8006578 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "P", EDITOR_TECLAS::TECLA_P,x10,y2,10,10);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	230a      	movs	r3, #10
 8007564:	9302      	str	r3, [sp, #8]
 8007566:	230a      	movs	r3, #10
 8007568:	9301      	str	r3, [sp, #4]
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	9300      	str	r3, [sp, #0]
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	221a      	movs	r2, #26
 8007572:	4990      	ldr	r1, [pc, #576]	@ (80077b4 <_ZN21CPantallaEditorNombreC1Ei+0x5a0>)
 8007574:	f7ff f800 	bl	8006578 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>

	AgregaMenuItem((char*) "A", EDITOR_TECLAS::TECLA_A,x1,y3,10,10);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	230a      	movs	r3, #10
 800757c:	9302      	str	r3, [sp, #8]
 800757e:	230a      	movs	r3, #10
 8007580:	9301      	str	r3, [sp, #4]
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	9300      	str	r3, [sp, #0]
 8007586:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007588:	220a      	movs	r2, #10
 800758a:	498b      	ldr	r1, [pc, #556]	@ (80077b8 <_ZN21CPantallaEditorNombreC1Ei+0x5a4>)
 800758c:	f7fe fff4 	bl	8006578 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "S", EDITOR_TECLAS::TECLA_S,x2,y3,10,10);
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	230a      	movs	r3, #10
 8007594:	9302      	str	r3, [sp, #8]
 8007596:	230a      	movs	r3, #10
 8007598:	9301      	str	r3, [sp, #4]
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	9300      	str	r3, [sp, #0]
 800759e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075a0:	221d      	movs	r2, #29
 80075a2:	4986      	ldr	r1, [pc, #536]	@ (80077bc <_ZN21CPantallaEditorNombreC1Ei+0x5a8>)
 80075a4:	f7fe ffe8 	bl	8006578 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "D", EDITOR_TECLAS::TECLA_D,x3,y3,10,10);
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	230a      	movs	r3, #10
 80075ac:	9302      	str	r3, [sp, #8]
 80075ae:	230a      	movs	r3, #10
 80075b0:	9301      	str	r3, [sp, #4]
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	9300      	str	r3, [sp, #0]
 80075b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075b8:	2211      	movs	r2, #17
 80075ba:	4981      	ldr	r1, [pc, #516]	@ (80077c0 <_ZN21CPantallaEditorNombreC1Ei+0x5ac>)
 80075bc:	f7fe ffdc 	bl	8006578 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "F", EDITOR_TECLAS::TECLA_F,x4,y3,10,10);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	230a      	movs	r3, #10
 80075c4:	9302      	str	r3, [sp, #8]
 80075c6:	230a      	movs	r3, #10
 80075c8:	9301      	str	r3, [sp, #4]
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	9300      	str	r3, [sp, #0]
 80075ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075d0:	2212      	movs	r2, #18
 80075d2:	497c      	ldr	r1, [pc, #496]	@ (80077c4 <_ZN21CPantallaEditorNombreC1Ei+0x5b0>)
 80075d4:	f7fe ffd0 	bl	8006578 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "G", EDITOR_TECLAS::TECLA_G,x5,y3,10,10);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	230a      	movs	r3, #10
 80075dc:	9302      	str	r3, [sp, #8]
 80075de:	230a      	movs	r3, #10
 80075e0:	9301      	str	r3, [sp, #4]
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	9300      	str	r3, [sp, #0]
 80075e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e8:	2213      	movs	r2, #19
 80075ea:	4977      	ldr	r1, [pc, #476]	@ (80077c8 <_ZN21CPantallaEditorNombreC1Ei+0x5b4>)
 80075ec:	f7fe ffc4 	bl	8006578 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "H", EDITOR_TECLAS::TECLA_H,x6,y3,10,10);
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	230a      	movs	r3, #10
 80075f4:	9302      	str	r3, [sp, #8]
 80075f6:	230a      	movs	r3, #10
 80075f8:	9301      	str	r3, [sp, #4]
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	9300      	str	r3, [sp, #0]
 80075fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007600:	2214      	movs	r2, #20
 8007602:	4972      	ldr	r1, [pc, #456]	@ (80077cc <_ZN21CPantallaEditorNombreC1Ei+0x5b8>)
 8007604:	f7fe ffb8 	bl	8006578 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "J", EDITOR_TECLAS::TECLA_J,x7,y3,10,10);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	230a      	movs	r3, #10
 800760c:	9302      	str	r3, [sp, #8]
 800760e:	230a      	movs	r3, #10
 8007610:	9301      	str	r3, [sp, #4]
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007618:	2215      	movs	r2, #21
 800761a:	496d      	ldr	r1, [pc, #436]	@ (80077d0 <_ZN21CPantallaEditorNombreC1Ei+0x5bc>)
 800761c:	f7fe ffac 	bl	8006578 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "K", EDITOR_TECLAS::TECLA_K,x8,y3,10,10);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	230a      	movs	r3, #10
 8007624:	9302      	str	r3, [sp, #8]
 8007626:	230a      	movs	r3, #10
 8007628:	9301      	str	r3, [sp, #4]
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	9300      	str	r3, [sp, #0]
 800762e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007630:	2216      	movs	r2, #22
 8007632:	4968      	ldr	r1, [pc, #416]	@ (80077d4 <_ZN21CPantallaEditorNombreC1Ei+0x5c0>)
 8007634:	f7fe ffa0 	bl	8006578 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "L", EDITOR_TECLAS::TECLA_L,x9,y3,10,10);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	230a      	movs	r3, #10
 800763c:	9302      	str	r3, [sp, #8]
 800763e:	230a      	movs	r3, #10
 8007640:	9301      	str	r3, [sp, #4]
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	6a3b      	ldr	r3, [r7, #32]
 8007648:	2217      	movs	r2, #23
 800764a:	4963      	ldr	r1, [pc, #396]	@ (80077d8 <_ZN21CPantallaEditorNombreC1Ei+0x5c4>)
 800764c:	f7fe ff94 	bl	8006578 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "Z", EDITOR_TECLAS::TECLA_Z,x10,y3,10,10);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	230a      	movs	r3, #10
 8007654:	9302      	str	r3, [sp, #8]
 8007656:	230a      	movs	r3, #10
 8007658:	9301      	str	r3, [sp, #4]
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	9300      	str	r3, [sp, #0]
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	2223      	movs	r2, #35	@ 0x23
 8007662:	495e      	ldr	r1, [pc, #376]	@ (80077dc <_ZN21CPantallaEditorNombreC1Ei+0x5c8>)
 8007664:	f7fe ff88 	bl	8006578 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>

	AgregaMenuItem((char*) "X", EDITOR_TECLAS::TECLA_X,x2,y4,10,10);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	230a      	movs	r3, #10
 800766c:	9302      	str	r3, [sp, #8]
 800766e:	230a      	movs	r3, #10
 8007670:	9301      	str	r3, [sp, #4]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	9300      	str	r3, [sp, #0]
 8007676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007678:	2221      	movs	r2, #33	@ 0x21
 800767a:	4959      	ldr	r1, [pc, #356]	@ (80077e0 <_ZN21CPantallaEditorNombreC1Ei+0x5cc>)
 800767c:	f7fe ff7c 	bl	8006578 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "C", EDITOR_TECLAS::TECLA_C,x3,y4,10,10);
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	230a      	movs	r3, #10
 8007684:	9302      	str	r3, [sp, #8]
 8007686:	230a      	movs	r3, #10
 8007688:	9301      	str	r3, [sp, #4]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	9300      	str	r3, [sp, #0]
 800768e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007690:	2210      	movs	r2, #16
 8007692:	4954      	ldr	r1, [pc, #336]	@ (80077e4 <_ZN21CPantallaEditorNombreC1Ei+0x5d0>)
 8007694:	f7fe ff70 	bl	8006578 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "V", EDITOR_TECLAS::TECLA_V,x4,y4,10,10);
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	230a      	movs	r3, #10
 800769c:	9302      	str	r3, [sp, #8]
 800769e:	230a      	movs	r3, #10
 80076a0:	9301      	str	r3, [sp, #4]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	9300      	str	r3, [sp, #0]
 80076a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076a8:	221f      	movs	r2, #31
 80076aa:	494f      	ldr	r1, [pc, #316]	@ (80077e8 <_ZN21CPantallaEditorNombreC1Ei+0x5d4>)
 80076ac:	f7fe ff64 	bl	8006578 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "__", EDITOR_TECLAS::TECLA_TABULADOR,x5,y4,10,10);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	230a      	movs	r3, #10
 80076b4:	9302      	str	r3, [sp, #8]
 80076b6:	230a      	movs	r3, #10
 80076b8:	9301      	str	r3, [sp, #4]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	9300      	str	r3, [sp, #0]
 80076be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c0:	2227      	movs	r2, #39	@ 0x27
 80076c2:	494a      	ldr	r1, [pc, #296]	@ (80077ec <_ZN21CPantallaEditorNombreC1Ei+0x5d8>)
 80076c4:	f7fe ff58 	bl	8006578 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "B", EDITOR_TECLAS::TECLA_B,x7,y4,10,10);
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	230a      	movs	r3, #10
 80076cc:	9302      	str	r3, [sp, #8]
 80076ce:	230a      	movs	r3, #10
 80076d0:	9301      	str	r3, [sp, #4]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	9300      	str	r3, [sp, #0]
 80076d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d8:	220f      	movs	r2, #15
 80076da:	4945      	ldr	r1, [pc, #276]	@ (80077f0 <_ZN21CPantallaEditorNombreC1Ei+0x5dc>)
 80076dc:	f7fe ff4c 	bl	8006578 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "N", EDITOR_TECLAS::TECLA_N,x8,y4,10,10);
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	230a      	movs	r3, #10
 80076e4:	9302      	str	r3, [sp, #8]
 80076e6:	230a      	movs	r3, #10
 80076e8:	9301      	str	r3, [sp, #4]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	9300      	str	r3, [sp, #0]
 80076ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f0:	2219      	movs	r2, #25
 80076f2:	4940      	ldr	r1, [pc, #256]	@ (80077f4 <_ZN21CPantallaEditorNombreC1Ei+0x5e0>)
 80076f4:	f7fe ff40 	bl	8006578 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>
	AgregaMenuItem((char*) "M", EDITOR_TECLAS::TECLA_M,x9,y4,10,10);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	230a      	movs	r3, #10
 80076fc:	9302      	str	r3, [sp, #8]
 80076fe:	230a      	movs	r3, #10
 8007700:	9301      	str	r3, [sp, #4]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	9300      	str	r3, [sp, #0]
 8007706:	6a3b      	ldr	r3, [r7, #32]
 8007708:	2218      	movs	r2, #24
 800770a:	493b      	ldr	r1, [pc, #236]	@ (80077f8 <_ZN21CPantallaEditorNombreC1Ei+0x5e4>)
 800770c:	f7fe ff34 	bl	8006578 <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiii>

	AgregaMenuItem((char*) "<-", EDITOR_TECLAS::TECLA_DELETE,x10+30,y1,20,10,COLOR::RED,COLOR::BLACK);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	f103 021e 	add.w	r2, r3, #30
 8007718:	2300      	movs	r3, #0
 800771a:	9304      	str	r3, [sp, #16]
 800771c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8007720:	9303      	str	r3, [sp, #12]
 8007722:	230a      	movs	r3, #10
 8007724:	9302      	str	r3, [sp, #8]
 8007726:	2314      	movs	r3, #20
 8007728:	9301      	str	r3, [sp, #4]
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	9300      	str	r3, [sp, #0]
 800772e:	4613      	mov	r3, r2
 8007730:	2224      	movs	r2, #36	@ 0x24
 8007732:	4932      	ldr	r1, [pc, #200]	@ (80077fc <_ZN21CPantallaEditorNombreC1Ei+0x5e8>)
 8007734:	f7fe ff3b 	bl	80065ae <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiiiii>


	AgregaMenuItem((char*) "Aceptar", EDITOR_TECLAS::TECLA_ACEPTAR,x1,y5,10,10,COLOR::BLUE,COLOR::BLACK);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	2300      	movs	r3, #0
 800773c:	9304      	str	r3, [sp, #16]
 800773e:	231f      	movs	r3, #31
 8007740:	9303      	str	r3, [sp, #12]
 8007742:	230a      	movs	r3, #10
 8007744:	9302      	str	r3, [sp, #8]
 8007746:	230a      	movs	r3, #10
 8007748:	9301      	str	r3, [sp, #4]
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	9300      	str	r3, [sp, #0]
 800774e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007750:	2225      	movs	r2, #37	@ 0x25
 8007752:	492b      	ldr	r1, [pc, #172]	@ (8007800 <_ZN21CPantallaEditorNombreC1Ei+0x5ec>)
 8007754:	f7fe ff2b 	bl	80065ae <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiiiii>
	AgregaMenuItem((char*) "Cancelar", EDITOR_TECLAS::TECLA_CANCELAR,x8,y5,10,10,COLOR::RED,COLOR::BLACK);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	2300      	movs	r3, #0
 800775c:	9304      	str	r3, [sp, #16]
 800775e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8007762:	9303      	str	r3, [sp, #12]
 8007764:	230a      	movs	r3, #10
 8007766:	9302      	str	r3, [sp, #8]
 8007768:	230a      	movs	r3, #10
 800776a:	9301      	str	r3, [sp, #4]
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	9300      	str	r3, [sp, #0]
 8007770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007772:	2226      	movs	r2, #38	@ 0x26
 8007774:	4923      	ldr	r1, [pc, #140]	@ (8007804 <_ZN21CPantallaEditorNombreC1Ei+0x5f0>)
 8007776:	f7fe ff1a 	bl	80065ae <_ZN17CPantallaMenuBase14AgregaMenuItemEPciiiiiii>

	for(int i=0;i<=MAXTEXT;i++)
 800777a:	2300      	movs	r3, #0
 800777c:	647b      	str	r3, [r7, #68]	@ 0x44
 800777e:	e008      	b.n	8007792 <_ZN21CPantallaEditorNombreC1Ei+0x57e>
		Texto[i]='\0';
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007784:	4413      	add	r3, r2
 8007786:	33c4      	adds	r3, #196	@ 0xc4
 8007788:	2200      	movs	r2, #0
 800778a:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<=MAXTEXT;i++)
 800778c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800778e:	3301      	adds	r3, #1
 8007790:	647b      	str	r3, [r7, #68]	@ 0x44
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007798:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800779a:	429a      	cmp	r2, r3
 800779c:	ddf0      	ble.n	8007780 <_ZN21CPantallaEditorNombreC1Ei+0x56c>

}
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4618      	mov	r0, r3
 80077a2:	374c      	adds	r7, #76	@ 0x4c
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd90      	pop	{r4, r7, pc}
 80077a8:	080143ac 	.word	0x080143ac
 80077ac:	080143b0 	.word	0x080143b0
 80077b0:	080143b4 	.word	0x080143b4
 80077b4:	080143b8 	.word	0x080143b8
 80077b8:	080143bc 	.word	0x080143bc
 80077bc:	080143c0 	.word	0x080143c0
 80077c0:	080143c4 	.word	0x080143c4
 80077c4:	080143c8 	.word	0x080143c8
 80077c8:	080143cc 	.word	0x080143cc
 80077cc:	080143d0 	.word	0x080143d0
 80077d0:	080143d4 	.word	0x080143d4
 80077d4:	080143d8 	.word	0x080143d8
 80077d8:	080143dc 	.word	0x080143dc
 80077dc:	080143e0 	.word	0x080143e0
 80077e0:	080143e4 	.word	0x080143e4
 80077e4:	080143e8 	.word	0x080143e8
 80077e8:	080143ec 	.word	0x080143ec
 80077ec:	080143f0 	.word	0x080143f0
 80077f0:	080143f4 	.word	0x080143f4
 80077f4:	080143f8 	.word	0x080143f8
 80077f8:	080143fc 	.word	0x080143fc
 80077fc:	08014400 	.word	0x08014400
 8007800:	08014404 	.word	0x08014404
 8007804:	0801440c 	.word	0x0801440c

08007808 <_ZN21CPantallaEditorNombreD1Ev>:

CPantallaEditorNombre::~CPantallaEditorNombre()
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	4a09      	ldr	r2, [pc, #36]	@ (8007838 <_ZN21CPantallaEditorNombreD1Ev+0x30>)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	601a      	str	r2, [r3, #0]
 8007816:	4a09      	ldr	r2, [pc, #36]	@ (800783c <_ZN21CPantallaEditorNombreD1Ev+0x34>)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	631a      	str	r2, [r3, #48]	@ 0x30
 800781c:	4a08      	ldr	r2, [pc, #32]	@ (8007840 <_ZN21CPantallaEditorNombreD1Ev+0x38>)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	// TODO Auto-generated destructor stub
}
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4618      	mov	r0, r3
 8007828:	f7fe fde0 	bl	80063ec <_ZN17CPantallaMenuBaseD1Ev>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4618      	mov	r0, r3
 8007830:	3708      	adds	r7, #8
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	080150dc 	.word	0x080150dc
 800783c:	08015184 	.word	0x08015184
 8007840:	080151b8 	.word	0x080151b8

08007844 <_ZThn48_N21CPantallaEditorNombreD1Ev>:
	int PosicionTexto=0;
	int ID_Rampa;
	void GuardaNombreRampa();
public:
	CPantallaEditorNombre(int id_Rampa);
	virtual ~CPantallaEditorNombre();
 8007844:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8007848:	f7ff bfde 	b.w	8007808 <_ZN21CPantallaEditorNombreD1Ev>

0800784c <_ZThn172_N21CPantallaEditorNombreD1Ev>:
 800784c:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8007850:	f7ff bfda 	b.w	8007808 <_ZN21CPantallaEditorNombreD1Ev>

08007854 <_ZN21CPantallaEditorNombreD0Ev>:
CPantallaEditorNombre::~CPantallaEditorNombre()
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
}
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f7ff ffd3 	bl	8007808 <_ZN21CPantallaEditorNombreD1Ev>
 8007862:	21dc      	movs	r1, #220	@ 0xdc
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f009 fdd7 	bl	8011418 <_ZdlPvj>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4618      	mov	r0, r3
 800786e:	3708      	adds	r7, #8
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <_ZThn172_N21CPantallaEditorNombreD0Ev>:
 8007874:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8007878:	f7ff bfec 	b.w	8007854 <_ZN21CPantallaEditorNombreD0Ev>

0800787c <_ZThn48_N21CPantallaEditorNombreD0Ev>:
 800787c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8007880:	f7ff bfe8 	b.w	8007854 <_ZN21CPantallaEditorNombreD0Ev>

08007884 <_ZN21CPantallaEditorNombre4ShowEv>:

void CPantallaEditorNombre::Show()
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
	CPantallaMenuBase::Show();
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4618      	mov	r0, r3
 8007890:	f7fe fe36 	bl	8006500 <_ZN17CPantallaMenuBase4ShowEv>
	LabelNombre->Show();
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	334c      	adds	r3, #76	@ 0x4c
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4610      	mov	r0, r2
 80078a8:	4798      	blx	r3
	TextNombre->Show();
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	334c      	adds	r3, #76	@ 0x4c
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4610      	mov	r0, r2
 80078be:	4798      	blx	r3
}
 80078c0:	bf00      	nop
 80078c2:	3708      	adds	r7, #8
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <_ZN21CPantallaEditorNombre8RefrescaEv>:
void CPantallaEditorNombre::Refresca()
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
}
 80078d0:	bf00      	nop
 80078d2:	370c      	adds	r7, #12
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <_ZN21CPantallaEditorNombre11OnMenuEventEi>:
void CPantallaEditorNombre::OnMenuEvent(int identificador)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
	char tecla='\0';
 80078e6:	2300      	movs	r3, #0
 80078e8:	73fb      	strb	r3, [r7, #15]
	switch(identificador)
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2b27      	cmp	r3, #39	@ 0x27
 80078ee:	f200 80cd 	bhi.w	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
 80078f2:	a201      	add	r2, pc, #4	@ (adr r2, 80078f8 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1c>)
 80078f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f8:	08007999 	.word	0x08007999
 80078fc:	0800799f 	.word	0x0800799f
 8007900:	080079a5 	.word	0x080079a5
 8007904:	080079ab 	.word	0x080079ab
 8007908:	080079b1 	.word	0x080079b1
 800790c:	080079b7 	.word	0x080079b7
 8007910:	080079bd 	.word	0x080079bd
 8007914:	080079c3 	.word	0x080079c3
 8007918:	080079c9 	.word	0x080079c9
 800791c:	080079cf 	.word	0x080079cf
 8007920:	080079d5 	.word	0x080079d5
 8007924:	080079db 	.word	0x080079db
 8007928:	080079e1 	.word	0x080079e1
 800792c:	080079e7 	.word	0x080079e7
 8007930:	080079ed 	.word	0x080079ed
 8007934:	080079f3 	.word	0x080079f3
 8007938:	080079f9 	.word	0x080079f9
 800793c:	080079ff 	.word	0x080079ff
 8007940:	08007a05 	.word	0x08007a05
 8007944:	08007a0b 	.word	0x08007a0b
 8007948:	08007a11 	.word	0x08007a11
 800794c:	08007a17 	.word	0x08007a17
 8007950:	08007a1d 	.word	0x08007a1d
 8007954:	08007a23 	.word	0x08007a23
 8007958:	08007a29 	.word	0x08007a29
 800795c:	08007a2f 	.word	0x08007a2f
 8007960:	08007a35 	.word	0x08007a35
 8007964:	08007a3b 	.word	0x08007a3b
 8007968:	08007a41 	.word	0x08007a41
 800796c:	08007a47 	.word	0x08007a47
 8007970:	08007a4d 	.word	0x08007a4d
 8007974:	08007a53 	.word	0x08007a53
 8007978:	08007a5f 	.word	0x08007a5f
 800797c:	08007a65 	.word	0x08007a65
 8007980:	08007a6b 	.word	0x08007a6b
 8007984:	08007a71 	.word	0x08007a71
 8007988:	08007a77 	.word	0x08007a77
 800798c:	08007a7d 	.word	0x08007a7d
 8007990:	08007a85 	.word	0x08007a85
 8007994:	08007a59 	.word	0x08007a59
	{
	case EDITOR_TECLAS::TECLA_0:
		tecla='0';
 8007998:	2330      	movs	r3, #48	@ 0x30
 800799a:	73fb      	strb	r3, [r7, #15]
		break;
 800799c:	e076      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_1:
		tecla='1';
 800799e:	2331      	movs	r3, #49	@ 0x31
 80079a0:	73fb      	strb	r3, [r7, #15]
		break;
 80079a2:	e073      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_2:
		tecla='2';
 80079a4:	2332      	movs	r3, #50	@ 0x32
 80079a6:	73fb      	strb	r3, [r7, #15]
		break;
 80079a8:	e070      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_3:
		tecla='3';
 80079aa:	2333      	movs	r3, #51	@ 0x33
 80079ac:	73fb      	strb	r3, [r7, #15]
		break;
 80079ae:	e06d      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_4:
		tecla='4';
 80079b0:	2334      	movs	r3, #52	@ 0x34
 80079b2:	73fb      	strb	r3, [r7, #15]
		break;
 80079b4:	e06a      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_5:
		tecla='5';
 80079b6:	2335      	movs	r3, #53	@ 0x35
 80079b8:	73fb      	strb	r3, [r7, #15]
		break;
 80079ba:	e067      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_6:
		tecla='6';
 80079bc:	2336      	movs	r3, #54	@ 0x36
 80079be:	73fb      	strb	r3, [r7, #15]
		break;
 80079c0:	e064      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_7:
		tecla='7';
 80079c2:	2337      	movs	r3, #55	@ 0x37
 80079c4:	73fb      	strb	r3, [r7, #15]
		break;
 80079c6:	e061      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_8:
		tecla='8';
 80079c8:	2338      	movs	r3, #56	@ 0x38
 80079ca:	73fb      	strb	r3, [r7, #15]
		break;
 80079cc:	e05e      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_9:
		tecla='9';
 80079ce:	2339      	movs	r3, #57	@ 0x39
 80079d0:	73fb      	strb	r3, [r7, #15]
		break;
 80079d2:	e05b      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_A:
		tecla='A';
 80079d4:	2341      	movs	r3, #65	@ 0x41
 80079d6:	73fb      	strb	r3, [r7, #15]
		break;
 80079d8:	e058      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_E:
		tecla='E';
 80079da:	2345      	movs	r3, #69	@ 0x45
 80079dc:	73fb      	strb	r3, [r7, #15]
		break;
 80079de:	e055      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_I:
		tecla='I';
 80079e0:	2349      	movs	r3, #73	@ 0x49
 80079e2:	73fb      	strb	r3, [r7, #15]
		break;
 80079e4:	e052      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_O:
		tecla='O';
 80079e6:	234f      	movs	r3, #79	@ 0x4f
 80079e8:	73fb      	strb	r3, [r7, #15]
		break;
 80079ea:	e04f      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_U:
		tecla='U';
 80079ec:	2355      	movs	r3, #85	@ 0x55
 80079ee:	73fb      	strb	r3, [r7, #15]
		break;
 80079f0:	e04c      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_B:
		tecla='B';
 80079f2:	2342      	movs	r3, #66	@ 0x42
 80079f4:	73fb      	strb	r3, [r7, #15]
		break;
 80079f6:	e049      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_C:
		tecla='C';
 80079f8:	2343      	movs	r3, #67	@ 0x43
 80079fa:	73fb      	strb	r3, [r7, #15]
		break;
 80079fc:	e046      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_D:
		tecla='D';
 80079fe:	2344      	movs	r3, #68	@ 0x44
 8007a00:	73fb      	strb	r3, [r7, #15]
		break;
 8007a02:	e043      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_F:
		tecla='F';
 8007a04:	2346      	movs	r3, #70	@ 0x46
 8007a06:	73fb      	strb	r3, [r7, #15]
		break;
 8007a08:	e040      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_G:
		tecla='G';
 8007a0a:	2347      	movs	r3, #71	@ 0x47
 8007a0c:	73fb      	strb	r3, [r7, #15]
		break;
 8007a0e:	e03d      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_H:
		tecla='H';
 8007a10:	2348      	movs	r3, #72	@ 0x48
 8007a12:	73fb      	strb	r3, [r7, #15]
		break;
 8007a14:	e03a      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_J:
		tecla='J';
 8007a16:	234a      	movs	r3, #74	@ 0x4a
 8007a18:	73fb      	strb	r3, [r7, #15]
		break;
 8007a1a:	e037      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_K:
		tecla='K';
 8007a1c:	234b      	movs	r3, #75	@ 0x4b
 8007a1e:	73fb      	strb	r3, [r7, #15]
		break;
 8007a20:	e034      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_L:
		tecla='L';
 8007a22:	234c      	movs	r3, #76	@ 0x4c
 8007a24:	73fb      	strb	r3, [r7, #15]
		break;
 8007a26:	e031      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_M:
		tecla='M';
 8007a28:	234d      	movs	r3, #77	@ 0x4d
 8007a2a:	73fb      	strb	r3, [r7, #15]
		break;
 8007a2c:	e02e      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_N:
		tecla='N';
 8007a2e:	234e      	movs	r3, #78	@ 0x4e
 8007a30:	73fb      	strb	r3, [r7, #15]
		break;
 8007a32:	e02b      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_P:
		tecla='P';
 8007a34:	2350      	movs	r3, #80	@ 0x50
 8007a36:	73fb      	strb	r3, [r7, #15]
		break;
 8007a38:	e028      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_Q:
		tecla='Q';
 8007a3a:	2351      	movs	r3, #81	@ 0x51
 8007a3c:	73fb      	strb	r3, [r7, #15]
		break;
 8007a3e:	e025      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_R:
		tecla='R';
 8007a40:	2352      	movs	r3, #82	@ 0x52
 8007a42:	73fb      	strb	r3, [r7, #15]
		break;
 8007a44:	e022      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_S:
		tecla='S';
 8007a46:	2353      	movs	r3, #83	@ 0x53
 8007a48:	73fb      	strb	r3, [r7, #15]
		break;
 8007a4a:	e01f      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_T:
		tecla='T';
 8007a4c:	2354      	movs	r3, #84	@ 0x54
 8007a4e:	73fb      	strb	r3, [r7, #15]
		break;
 8007a50:	e01c      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_V:
		tecla='V';
 8007a52:	2356      	movs	r3, #86	@ 0x56
 8007a54:	73fb      	strb	r3, [r7, #15]
		break;
 8007a56:	e019      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_TABULADOR:
		tecla=' ';
 8007a58:	2320      	movs	r3, #32
 8007a5a:	73fb      	strb	r3, [r7, #15]
		break;
 8007a5c:	e016      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_W:
		tecla='W';
 8007a5e:	2357      	movs	r3, #87	@ 0x57
 8007a60:	73fb      	strb	r3, [r7, #15]
		break;
 8007a62:	e013      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_X:
		tecla='X';
 8007a64:	2358      	movs	r3, #88	@ 0x58
 8007a66:	73fb      	strb	r3, [r7, #15]
		break;
 8007a68:	e010      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_Y:
		tecla='Y';
 8007a6a:	2359      	movs	r3, #89	@ 0x59
 8007a6c:	73fb      	strb	r3, [r7, #15]
		break;
 8007a6e:	e00d      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_Z:
		tecla='Z';
 8007a70:	235a      	movs	r3, #90	@ 0x5a
 8007a72:	73fb      	strb	r3, [r7, #15]
		break;
 8007a74:	e00a      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_DELETE:
		tecla='<';
 8007a76:	233c      	movs	r3, #60	@ 0x3c
 8007a78:	73fb      	strb	r3, [r7, #15]
		break;
 8007a7a:	e007      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_ACEPTAR:
		GuardaNombreRampa();
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f8cb 	bl	8007c18 <_ZN21CPantallaEditorNombre17GuardaNombreRampaEv>
		break;
 8007a82:	e003      	b.n	8007a8c <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1b0>
	case EDITOR_TECLAS::TECLA_CANCELAR:
		ManejadorPantallas.MuestraMenuRampa();
 8007a84:	4827      	ldr	r0, [pc, #156]	@ (8007b24 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x248>)
 8007a86:	f7fc f97b 	bl	8003d80 <_ZN19CManejadorPantallas16MuestraMenuRampaEv>
		break;
 8007a8a:	bf00      	nop

	}
	if(tecla!='\0')
 8007a8c:	7bfb      	ldrb	r3, [r7, #15]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d043      	beq.n	8007b1a <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x23e>
	{
		if(tecla=='<')
 8007a92:	7bfb      	ldrb	r3, [r7, #15]
 8007a94:	2b3c      	cmp	r3, #60	@ 0x3c
 8007a96:	d114      	bne.n	8007ac2 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x1e6>
		{
			Texto[PosicionTexto]='\0';
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
			if(PosicionTexto>0)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	dd1f      	ble.n	8007af2 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x216>
				PosicionTexto--;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007ab8:	1e5a      	subs	r2, r3, #1
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8007ac0:	e017      	b.n	8007af2 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x216>
		}
		else
		{
			Texto[PosicionTexto]=tecla;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	4413      	add	r3, r2
 8007acc:	7bfa      	ldrb	r2, [r7, #15]
 8007ace:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
			if(PosicionTexto<MAXTEXT-1)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	da06      	bge.n	8007af2 <_ZN21CPantallaEditorNombre11OnMenuEventEi+0x216>
				PosicionTexto++;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007aea:	1c5a      	adds	r2, r3, #1
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
		}
		TextNombre->SetTexto(Texto);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	33c4      	adds	r3, #196	@ 0xc4
 8007afc:	4619      	mov	r1, r3
 8007afe:	4610      	mov	r0, r2
 8007b00:	f7fb f9be 	bl	8002e80 <_ZN12CEtiquetaTft8SetTextoEPcz>
		TextNombre->Show();
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	334c      	adds	r3, #76	@ 0x4c
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4610      	mov	r0, r2
 8007b18:	4798      	blx	r3
	}
}
 8007b1a:	bf00      	nop
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	20000258 	.word	0x20000258

08007b28 <_ZThn172_N21CPantallaEditorNombre11OnMenuEventEi>:
	virtual void Show();
	virtual void Refresca();
	virtual void OnMenuEvent(int identificador);
 8007b28:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8007b2c:	f7ff bed6 	b.w	80078dc <_ZN21CPantallaEditorNombre11OnMenuEventEi>

08007b30 <_ZN21CPantallaEditorNombre8AsignaIDEi>:
void CPantallaEditorNombre::AsignaID(int id_Rampa)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b08a      	sub	sp, #40	@ 0x28
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
	if(id_Rampa==-1)
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b40:	d12a      	bne.n	8007b98 <_ZN21CPantallaEditorNombre8AsignaIDEi+0x68>
	{
		for(int i=0;i<MAXTEXT;i++)
 8007b42:	2300      	movs	r3, #0
 8007b44:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b46:	e008      	b.n	8007b5a <_ZN21CPantallaEditorNombre8AsignaIDEi+0x2a>
			Texto[i]='\0';
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b4c:	4413      	add	r3, r2
 8007b4e:	33c4      	adds	r3, #196	@ 0xc4
 8007b50:	2200      	movs	r2, #0
 8007b52:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<MAXTEXT;i++)
 8007b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b56:	3301      	adds	r3, #1
 8007b58:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007b60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b62:	429a      	cmp	r2, r3
 8007b64:	dbf0      	blt.n	8007b48 <_ZN21CPantallaEditorNombre8AsignaIDEi+0x18>
		PosicionTexto=0;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
		TextNombre->SetTexto(Texto);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	33c4      	adds	r3, #196	@ 0xc4
 8007b78:	4619      	mov	r1, r3
 8007b7a:	4610      	mov	r0, r2
 8007b7c:	f7fb f980 	bl	8002e80 <_ZN12CEtiquetaTft8SetTextoEPcz>
		TextNombre->Show();
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	334c      	adds	r3, #76	@ 0x4c
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4610      	mov	r0, r2
 8007b94:	4798      	blx	r3
 8007b96:	e034      	b.n	8007c02 <_ZN21CPantallaEditorNombre8AsignaIDEi+0xd2>
	}
	else
	{
			CRampa rampa=ControladorRampas.DameRampa(id_Rampa);
 8007b98:	f107 030c 	add.w	r3, r7, #12
 8007b9c:	683a      	ldr	r2, [r7, #0]
 8007b9e:	491d      	ldr	r1, [pc, #116]	@ (8007c14 <_ZN21CPantallaEditorNombre8AsignaIDEi+0xe4>)
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f003 f99a 	bl	800aeda <_ZN18CControladorRampas9DameRampaEi>
			strcpy(Texto,rampa.Nombre);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f103 02c4 	add.w	r2, r3, #196	@ 0xc4
 8007bac:	f107 030c 	add.w	r3, r7, #12
 8007bb0:	3308      	adds	r3, #8
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	4610      	mov	r0, r2
 8007bb6:	f00a fb64 	bl	8012282 <strcpy>
			PosicionTexto=strlen(Texto)-1;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	33c4      	adds	r3, #196	@ 0xc4
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7f8 fb5e 	bl	8000280 <strlen>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	3b01      	subs	r3, #1
 8007bc8:	461a      	mov	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
			TextNombre->SetTexto(Texto);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	33c4      	adds	r3, #196	@ 0xc4
 8007bda:	4619      	mov	r1, r3
 8007bdc:	4610      	mov	r0, r2
 8007bde:	f7fb f94f 	bl	8002e80 <_ZN12CEtiquetaTft8SetTextoEPcz>
			TextNombre->Show();
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	334c      	adds	r3, #76	@ 0x4c
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4610      	mov	r0, r2
 8007bf6:	4798      	blx	r3
	}
 8007bf8:	f107 030c 	add.w	r3, r7, #12
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f003 fc79 	bl	800b4f4 <_ZN6CRampaD1Ev>
	ID_Rampa=id_Rampa;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	683a      	ldr	r2, [r7, #0]
 8007c06:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
}
 8007c0a:	bf00      	nop
 8007c0c:	3728      	adds	r7, #40	@ 0x28
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	20000360 	.word	0x20000360

08007c18 <_ZN21CPantallaEditorNombre17GuardaNombreRampaEv>:
void CPantallaEditorNombre::GuardaNombreRampa()
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b088      	sub	sp, #32
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
	if(ID_Rampa==-1)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c2a:	d113      	bne.n	8007c54 <_ZN21CPantallaEditorNombre17GuardaNombreRampaEv+0x3c>
	{
		//hay que crear la rampa
		CRampa rampa=ControladorRampas.AgregaRampa(Texto);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f103 02c4 	add.w	r2, r3, #196	@ 0xc4
 8007c32:	f107 0308 	add.w	r3, r7, #8
 8007c36:	4911      	ldr	r1, [pc, #68]	@ (8007c7c <_ZN21CPantallaEditorNombre17GuardaNombreRampaEv+0x64>)
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f003 fab1 	bl	800b1a0 <_ZN18CControladorRampas11AgregaRampaEPc>
		ID_Rampa=rampa.ID_RAMPA;
 8007c3e:	89fb      	ldrh	r3, [r7, #14]
 8007c40:	461a      	mov	r2, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	}
 8007c48:	f107 0308 	add.w	r3, r7, #8
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f003 fc51 	bl	800b4f4 <_ZN6CRampaD1Ev>
 8007c52:	e008      	b.n	8007c66 <_ZN21CPantallaEditorNombre17GuardaNombreRampaEv+0x4e>
	else
	{
		//hay que actualizar
		ControladorRampas.ActualizaRampa(ID_Rampa, Texto);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 10d8 	ldr.w	r1, [r3, #216]	@ 0xd8
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	33c4      	adds	r3, #196	@ 0xc4
 8007c5e:	461a      	mov	r2, r3
 8007c60:	4806      	ldr	r0, [pc, #24]	@ (8007c7c <_ZN21CPantallaEditorNombre17GuardaNombreRampaEv+0x64>)
 8007c62:	f003 fb0d 	bl	800b280 <_ZN18CControladorRampas14ActualizaRampaEiPc>
	}
	ManejadorPantallas.AsignaPantallaPasosRampa(ID_Rampa);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	4804      	ldr	r0, [pc, #16]	@ (8007c80 <_ZN21CPantallaEditorNombre17GuardaNombreRampaEv+0x68>)
 8007c70:	f7fc f9ed 	bl	800404e <_ZN19CManejadorPantallas24AsignaPantallaPasosRampaEi>

}
 8007c74:	bf00      	nop
 8007c76:	3720      	adds	r7, #32
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	20000360 	.word	0x20000360
 8007c80:	20000258 	.word	0x20000258

08007c84 <_ZN21CPantallaEditorNombre12SeleccionadaEv>:
void CPantallaEditorNombre::Seleccionada()
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]

}
 8007c8c:	bf00      	nop
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <_ZN21CPantallaEditorNombre20OnBotonUnoClickEventEv>:
void CPantallaEditorNombre::OnBotonUnoClickEvent()
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
	OnMenuEvent(EDITOR_TECLAS::TECLA_ACEPTAR);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	3390      	adds	r3, #144	@ 0x90
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2125      	movs	r1, #37	@ 0x25
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	4798      	blx	r3
}
 8007cae:	bf00      	nop
 8007cb0:	3708      	adds	r7, #8
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <_ZThn48_N21CPantallaEditorNombre20OnBotonUnoClickEventEv>:
	void AsignaID(int id_Rampa);
	virtual void Seleccionada();
	virtual void OnBotonUnoClickEvent();
 8007cb6:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8007cba:	f7ff bfed 	b.w	8007c98 <_ZN21CPantallaEditorNombre20OnBotonUnoClickEventEv>

08007cbe <_ZN21CPantallaEditorNombre21OnBotonTresClickEventEv>:
void CPantallaEditorNombre::OnBotonTresClickEvent()
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b082      	sub	sp, #8
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
	OnMenuEvent(EDITOR_TECLAS::TECLA_CANCELAR);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	3390      	adds	r3, #144	@ 0x90
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2126      	movs	r1, #38	@ 0x26
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	4798      	blx	r3

}
 8007cd4:	bf00      	nop
 8007cd6:	3708      	adds	r7, #8
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <_ZThn48_N21CPantallaEditorNombre21OnBotonTresClickEventEv>:
	virtual void OnBotonTresClickEvent();
 8007cdc:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8007ce0:	f7ff bfed 	b.w	8007cbe <_ZN21CPantallaEditorNombre21OnBotonTresClickEventEv>

08007ce4 <_ZN21CPantallaEditorNombre23OnBotonCuatroClickEventEv>:
void CPantallaEditorNombre::OnBotonCuatroClickEvent()
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
	OnMenuEvent(EDITOR_TECLAS::TECLA_DELETE);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	3390      	adds	r3, #144	@ 0x90
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2124      	movs	r1, #36	@ 0x24
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	4798      	blx	r3

}
 8007cfa:	bf00      	nop
 8007cfc:	3708      	adds	r7, #8
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <_ZThn48_N21CPantallaEditorNombre23OnBotonCuatroClickEventEv>:
	virtual void OnBotonCuatroClickEvent();
 8007d02:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8007d06:	f7ff bfed 	b.w	8007ce4 <_ZN21CPantallaEditorNombre23OnBotonCuatroClickEventEv>
	...

08007d0c <_ZN23CPantallaEjecucionRampaC1Ev>:
#include <RapaTemperatura/CControladorRampas.hpp>
#include <RapaTemperatura/CRampa.hpp>
#include <RapaTemperatura/CPaso.hpp>
#include <GUI/ManejadorPantallas/CManejadorPantallas.hpp>

CPantallaEjecucionRampa::CPantallaEjecucionRampa():
 8007d0c:	b590      	push	{r4, r7, lr}
 8007d0e:	b08b      	sub	sp, #44	@ 0x2c
 8007d10:	af08      	add	r7, sp, #32
 8007d12:	6078      	str	r0, [r7, #4]
CPantallaBase(1, (char*)"RAMPA")
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4a65      	ldr	r2, [pc, #404]	@ (8007eac <_ZN23CPantallaEjecucionRampaC1Ev+0x1a0>)
 8007d18:	2101      	movs	r1, #1
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7fb faa8 	bl	8003270 <_ZN13CPantallaBaseC1EiPc>
 8007d20:	4a63      	ldr	r2, [pc, #396]	@ (8007eb0 <_ZN23CPantallaEjecucionRampaC1Ev+0x1a4>)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	601a      	str	r2, [r3, #0]
 8007d26:	4a63      	ldr	r2, [pc, #396]	@ (8007eb4 <_ZN23CPantallaEjecucionRampaC1Ev+0x1a8>)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8007d32:	4618      	mov	r0, r3
 8007d34:	f003 fb76 	bl	800b424 <_ZN5CPasoC1Ev>
{
	// TODO Auto-generated constructor stub
	LabelPaso=new CEtiquetaTft( 5, 35, 50, 20, COLOR::BLACK,(char*)"PASO: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8007d38:	20a4      	movs	r0, #164	@ 0xa4
 8007d3a:	f009 fb6f 	bl	801141c <_Znwj>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	461c      	mov	r4, r3
 8007d42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007d46:	9306      	str	r3, [sp, #24]
 8007d48:	2300      	movs	r3, #0
 8007d4a:	9305      	str	r3, [sp, #20]
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	9304      	str	r3, [sp, #16]
 8007d50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007d54:	9303      	str	r3, [sp, #12]
 8007d56:	4b58      	ldr	r3, [pc, #352]	@ (8007eb8 <_ZN23CPantallaEjecucionRampaC1Ev+0x1ac>)
 8007d58:	9302      	str	r3, [sp, #8]
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	9301      	str	r3, [sp, #4]
 8007d5e:	2314      	movs	r3, #20
 8007d60:	9300      	str	r3, [sp, #0]
 8007d62:	2332      	movs	r3, #50	@ 0x32
 8007d64:	2223      	movs	r2, #35	@ 0x23
 8007d66:	2105      	movs	r1, #5
 8007d68:	4620      	mov	r0, r4
 8007d6a:	f7fb f84f 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8c3 4258 	str.w	r4, [r3, #600]	@ 0x258
	LabelTemperatura=new CEtiquetaTft( 5, 70, 50, 20, COLOR::BLACK,(char*)"TEMP: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8007d74:	20a4      	movs	r0, #164	@ 0xa4
 8007d76:	f009 fb51 	bl	801141c <_Znwj>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	461c      	mov	r4, r3
 8007d7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007d82:	9306      	str	r3, [sp, #24]
 8007d84:	2300      	movs	r3, #0
 8007d86:	9305      	str	r3, [sp, #20]
 8007d88:	2303      	movs	r3, #3
 8007d8a:	9304      	str	r3, [sp, #16]
 8007d8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007d90:	9303      	str	r3, [sp, #12]
 8007d92:	4b4a      	ldr	r3, [pc, #296]	@ (8007ebc <_ZN23CPantallaEjecucionRampaC1Ev+0x1b0>)
 8007d94:	9302      	str	r3, [sp, #8]
 8007d96:	2300      	movs	r3, #0
 8007d98:	9301      	str	r3, [sp, #4]
 8007d9a:	2314      	movs	r3, #20
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	2332      	movs	r3, #50	@ 0x32
 8007da0:	2246      	movs	r2, #70	@ 0x46
 8007da2:	2105      	movs	r1, #5
 8007da4:	4620      	mov	r0, r4
 8007da6:	f7fb f831 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8c3 425c 	str.w	r4, [r3, #604]	@ 0x25c
	LabelAire=new CEtiquetaTft( 5, 105, 105, 20, COLOR::BLACK,(char*)"AIRE: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8007db0:	20a4      	movs	r0, #164	@ 0xa4
 8007db2:	f009 fb33 	bl	801141c <_Znwj>
 8007db6:	4603      	mov	r3, r0
 8007db8:	461c      	mov	r4, r3
 8007dba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007dbe:	9306      	str	r3, [sp, #24]
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	9305      	str	r3, [sp, #20]
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	9304      	str	r3, [sp, #16]
 8007dc8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007dcc:	9303      	str	r3, [sp, #12]
 8007dce:	4b3c      	ldr	r3, [pc, #240]	@ (8007ec0 <_ZN23CPantallaEjecucionRampaC1Ev+0x1b4>)
 8007dd0:	9302      	str	r3, [sp, #8]
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	9301      	str	r3, [sp, #4]
 8007dd6:	2314      	movs	r3, #20
 8007dd8:	9300      	str	r3, [sp, #0]
 8007dda:	2369      	movs	r3, #105	@ 0x69
 8007ddc:	2269      	movs	r2, #105	@ 0x69
 8007dde:	2105      	movs	r1, #5
 8007de0:	4620      	mov	r0, r4
 8007de2:	f7fb f813 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8c3 4260 	str.w	r4, [r3, #608]	@ 0x260
	LabelTiempo=new CEtiquetaTft( 5, 140, 50, 20, COLOR::BLACK,(char*)"SEG: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8007dec:	20a4      	movs	r0, #164	@ 0xa4
 8007dee:	f009 fb15 	bl	801141c <_Znwj>
 8007df2:	4603      	mov	r3, r0
 8007df4:	461c      	mov	r4, r3
 8007df6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007dfa:	9306      	str	r3, [sp, #24]
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	9305      	str	r3, [sp, #20]
 8007e00:	2303      	movs	r3, #3
 8007e02:	9304      	str	r3, [sp, #16]
 8007e04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007e08:	9303      	str	r3, [sp, #12]
 8007e0a:	4b2e      	ldr	r3, [pc, #184]	@ (8007ec4 <_ZN23CPantallaEjecucionRampaC1Ev+0x1b8>)
 8007e0c:	9302      	str	r3, [sp, #8]
 8007e0e:	2300      	movs	r3, #0
 8007e10:	9301      	str	r3, [sp, #4]
 8007e12:	2314      	movs	r3, #20
 8007e14:	9300      	str	r3, [sp, #0]
 8007e16:	2332      	movs	r3, #50	@ 0x32
 8007e18:	228c      	movs	r2, #140	@ 0x8c
 8007e1a:	2105      	movs	r1, #5
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	f7fa fff5 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8c3 4264 	str.w	r4, [r3, #612]	@ 0x264

	LabelGuardar=new CEtiquetaTft( 10, 200, 130, 30, COLOR::GREEN,(char*)"INICIAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 8007e28:	20a4      	movs	r0, #164	@ 0xa4
 8007e2a:	f009 faf7 	bl	801141c <_Znwj>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	461c      	mov	r4, r3
 8007e32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007e36:	9306      	str	r3, [sp, #24]
 8007e38:	2301      	movs	r3, #1
 8007e3a:	9305      	str	r3, [sp, #20]
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	9304      	str	r3, [sp, #16]
 8007e40:	2300      	movs	r3, #0
 8007e42:	9303      	str	r3, [sp, #12]
 8007e44:	4b20      	ldr	r3, [pc, #128]	@ (8007ec8 <_ZN23CPantallaEjecucionRampaC1Ev+0x1bc>)
 8007e46:	9302      	str	r3, [sp, #8]
 8007e48:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8007e4c:	9301      	str	r3, [sp, #4]
 8007e4e:	231e      	movs	r3, #30
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	2382      	movs	r3, #130	@ 0x82
 8007e54:	22c8      	movs	r2, #200	@ 0xc8
 8007e56:	210a      	movs	r1, #10
 8007e58:	4620      	mov	r0, r4
 8007e5a:	f7fa ffd7 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8c3 4250 	str.w	r4, [r3, #592]	@ 0x250
	LabelCancelar=new CEtiquetaTft( 160, 200, 145, 30, COLOR::RED,(char*)"REGRESAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 8007e64:	20a4      	movs	r0, #164	@ 0xa4
 8007e66:	f009 fad9 	bl	801141c <_Znwj>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	461c      	mov	r4, r3
 8007e6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007e72:	9306      	str	r3, [sp, #24]
 8007e74:	2301      	movs	r3, #1
 8007e76:	9305      	str	r3, [sp, #20]
 8007e78:	2303      	movs	r3, #3
 8007e7a:	9304      	str	r3, [sp, #16]
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	9303      	str	r3, [sp, #12]
 8007e80:	4b12      	ldr	r3, [pc, #72]	@ (8007ecc <_ZN23CPantallaEjecucionRampaC1Ev+0x1c0>)
 8007e82:	9302      	str	r3, [sp, #8]
 8007e84:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8007e88:	9301      	str	r3, [sp, #4]
 8007e8a:	231e      	movs	r3, #30
 8007e8c:	9300      	str	r3, [sp, #0]
 8007e8e:	2391      	movs	r3, #145	@ 0x91
 8007e90:	22c8      	movs	r2, #200	@ 0xc8
 8007e92:	21a0      	movs	r1, #160	@ 0xa0
 8007e94:	4620      	mov	r0, r4
 8007e96:	f7fa ffb9 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8c3 4254 	str.w	r4, [r3, #596]	@ 0x254

}
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	370c      	adds	r7, #12
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd90      	pop	{r4, r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	08014418 	.word	0x08014418
 8007eb0:	080151cc 	.word	0x080151cc
 8007eb4:	08015254 	.word	0x08015254
 8007eb8:	08014420 	.word	0x08014420
 8007ebc:	08014428 	.word	0x08014428
 8007ec0:	08014430 	.word	0x08014430
 8007ec4:	08014438 	.word	0x08014438
 8007ec8:	08014440 	.word	0x08014440
 8007ecc:	08014448 	.word	0x08014448

08007ed0 <_ZN23CPantallaEjecucionRampaD1Ev>:

CPantallaEjecucionRampa::~CPantallaEjecucionRampa()
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	4a0a      	ldr	r2, [pc, #40]	@ (8007f04 <_ZN23CPantallaEjecucionRampaD1Ev+0x34>)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	4a0a      	ldr	r2, [pc, #40]	@ (8007f08 <_ZN23CPantallaEjecucionRampaD1Ev+0x38>)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8007eea:	4618      	mov	r0, r3
 8007eec:	f003 fabc 	bl	800b468 <_ZN5CPasoD1Ev>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7fb f988 	bl	8003208 <_ZN13CPantallaBaseD1Ev>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4618      	mov	r0, r3
 8007efc:	3708      	adds	r7, #8
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	080151cc 	.word	0x080151cc
 8007f08:	08015254 	.word	0x08015254

08007f0c <_ZThn48_N23CPantallaEjecucionRampaD1Ev>:
	CEtiquetaTft *LabelTemperatura;
	CEtiquetaTft *LabelAire;
	CEtiquetaTft *LabelTiempo;
public:
	CPantallaEjecucionRampa();
	virtual ~CPantallaEjecucionRampa();
 8007f0c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8007f10:	f7ff bfde 	b.w	8007ed0 <_ZN23CPantallaEjecucionRampaD1Ev>

08007f14 <_ZN23CPantallaEjecucionRampaD0Ev>:
CPantallaEjecucionRampa::~CPantallaEjecucionRampa()
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
}
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f7ff ffd7 	bl	8007ed0 <_ZN23CPantallaEjecucionRampaD1Ev>
 8007f22:	f44f 711a 	mov.w	r1, #616	@ 0x268
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f009 fa76 	bl	8011418 <_ZdlPvj>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3708      	adds	r7, #8
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <_ZThn48_N23CPantallaEjecucionRampaD0Ev>:
 8007f36:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8007f3a:	f7ff bfeb 	b.w	8007f14 <_ZN23CPantallaEjecucionRampaD0Ev>
	...

08007f40 <_ZN23CPantallaEjecucionRampa10SetIDRampaEi>:
void CPantallaEjecucionRampa::SetIDRampa(int id_rampa)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b088      	sub	sp, #32
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
	ID_Rampa=id_rampa;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	683a      	ldr	r2, [r7, #0]
 8007f4e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	CRampa rampa=	ControladorRampas.DameRampa(ID_Rampa);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8007f58:	f107 0308 	add.w	r3, r7, #8
 8007f5c:	490a      	ldr	r1, [pc, #40]	@ (8007f88 <_ZN23CPantallaEjecucionRampa10SetIDRampaEi+0x48>)
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f002 ffbb 	bl	800aeda <_ZN18CControladorRampas9DameRampaEi>
	this->SetTituloPantalla(rampa.Nombre);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	3370      	adds	r3, #112	@ 0x70
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f107 0208 	add.w	r2, r7, #8
 8007f72:	3208      	adds	r2, #8
 8007f74:	4611      	mov	r1, r2
 8007f76:	4798      	blx	r3
}
 8007f78:	f107 0308 	add.w	r3, r7, #8
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f003 fab9 	bl	800b4f4 <_ZN6CRampaD1Ev>
 8007f82:	3720      	adds	r7, #32
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	20000360 	.word	0x20000360

08007f8c <_ZN23CPantallaEjecucionRampa20OnBotonUnoClickEventEv>:

void CPantallaEjecucionRampa::OnBotonUnoClickEvent()
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b088      	sub	sp, #32
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
	//ControladorRampas.EliminaRampa(ID_Rampa);
	NPasos=	ControladorPasosRampa.DameNumeroPasosRampa(ID_Rampa);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	481e      	ldr	r0, [pc, #120]	@ (8008018 <_ZN23CPantallaEjecucionRampa20OnBotonUnoClickEventEv+0x8c>)
 8007f9e:	f002 fca9 	bl	800a8f4 <_ZN22CControladorPasosRampa20DameNumeroPasosRampaEi>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	int id_pasActual=0;
 8007faa:	2300      	movs	r3, #0
 8007fac:	61fb      	str	r3, [r7, #28]
	for(int i=0;i<100;i++)
 8007fae:	2300      	movs	r3, #0
 8007fb0:	61bb      	str	r3, [r7, #24]
 8007fb2:	e028      	b.n	8008006 <_ZN23CPantallaEjecucionRampa20OnBotonUnoClickEventEv+0x7a>
	{
		if(i<NPasos)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007fba:	69ba      	ldr	r2, [r7, #24]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	da18      	bge.n	8007ff2 <_ZN23CPantallaEjecucionRampa20OnBotonUnoClickEventEv+0x66>
		{
			CPaso paso=ControladorPasosRampa.DameSiguientePaso(ID_Rampa, id_pasActual);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8007fc6:	f107 000c 	add.w	r0, r7, #12
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	4912      	ldr	r1, [pc, #72]	@ (8008018 <_ZN23CPantallaEjecucionRampa20OnBotonUnoClickEventEv+0x8c>)
 8007fce:	f002 fccc 	bl	800a96a <_ZN22CControladorPasosRampa17DameSiguientePasoEii>
			Pasos[i]=paso.ID_Paso;
 8007fd2:	7cbb      	ldrb	r3, [r7, #18]
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	332c      	adds	r3, #44	@ 0x2c
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	4413      	add	r3, r2
 8007fe0:	6059      	str	r1, [r3, #4]
			id_pasActual=paso.ID_Paso;
 8007fe2:	7cbb      	ldrb	r3, [r7, #18]
 8007fe4:	61fb      	str	r3, [r7, #28]
		}
 8007fe6:	f107 030c 	add.w	r3, r7, #12
 8007fea:	4618      	mov	r0, r3
 8007fec:	f003 fa3c 	bl	800b468 <_ZN5CPasoD1Ev>
 8007ff0:	e006      	b.n	8008000 <_ZN23CPantallaEjecucionRampa20OnBotonUnoClickEventEv+0x74>
		else
		{
			Pasos[i]=0;
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	332c      	adds	r3, #44	@ 0x2c
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	4413      	add	r3, r2
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	605a      	str	r2, [r3, #4]
	for(int i=0;i<100;i++)
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	3301      	adds	r3, #1
 8008004:	61bb      	str	r3, [r7, #24]
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	2b63      	cmp	r3, #99	@ 0x63
 800800a:	ddd3      	ble.n	8007fb4 <_ZN23CPantallaEjecucionRampa20OnBotonUnoClickEventEv+0x28>
		}
	}
//	ManejadorPantallas.AsignaPantallaPasosRampa(ID_Rampa);
}
 800800c:	bf00      	nop
 800800e:	bf00      	nop
 8008010:	3720      	adds	r7, #32
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	200001f4 	.word	0x200001f4

0800801c <_ZThn48_N23CPantallaEjecucionRampa20OnBotonUnoClickEventEv>:
	void SetIDRampa(int id_rampa);
	virtual void OnBotonUnoClickEvent();
 800801c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008020:	f7ff bfb4 	b.w	8007f8c <_ZN23CPantallaEjecucionRampa20OnBotonUnoClickEventEv>

08008024 <_ZN23CPantallaEjecucionRampa21OnBotonTresClickEventEv>:
void CPantallaEjecucionRampa::OnBotonTresClickEvent()
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]

	 ManejadorPantallas.MuestraPantallaRampa(ID_Rampa);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008032:	4619      	mov	r1, r3
 8008034:	4803      	ldr	r0, [pc, #12]	@ (8008044 <_ZN23CPantallaEjecucionRampa21OnBotonTresClickEventEv+0x20>)
 8008036:	f7fb ffa7 	bl	8003f88 <_ZN19CManejadorPantallas20MuestraPantallaRampaEi>

}
 800803a:	bf00      	nop
 800803c:	3708      	adds	r7, #8
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	20000258 	.word	0x20000258

08008048 <_ZThn48_N23CPantallaEjecucionRampa21OnBotonTresClickEventEv>:
	virtual void OnBotonTresClickEvent();
 8008048:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800804c:	f7ff bfea 	b.w	8008024 <_ZN23CPantallaEjecucionRampa21OnBotonTresClickEventEv>

08008050 <_ZN23CPantallaEjecucionRampa4ShowEv>:
void CPantallaEjecucionRampa::Show()
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
	CPantallaBase::Show();
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4618      	mov	r0, r3
 800805c:	f7fb f97a 	bl	8003354 <_ZN13CPantallaBase4ShowEv>
	LabelPaso->SetTexto((char*)"Paso:%d",Paso.ID_Paso);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 0258 	ldr.w	r0, [r3, #600]	@ 0x258
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 324a 	ldrb.w	r3, [r3, #586]	@ 0x24a
 800806c:	461a      	mov	r2, r3
 800806e:	4933      	ldr	r1, [pc, #204]	@ (800813c <_ZN23CPantallaEjecucionRampa4ShowEv+0xec>)
 8008070:	f7fa ff06 	bl	8002e80 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelPaso->Show();
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 2258 	ldr.w	r2, [r3, #600]	@ 0x258
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	334c      	adds	r3, #76	@ 0x4c
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4610      	mov	r0, r2
 8008088:	4798      	blx	r3

	LabelTemperatura->SetTexto((char*)"TEMP:%d",Paso.Temperatura);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8d3 025c 	ldr.w	r0, [r3, #604]	@ 0x25c
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8b3 324c 	ldrh.w	r3, [r3, #588]	@ 0x24c
 8008096:	461a      	mov	r2, r3
 8008098:	4929      	ldr	r1, [pc, #164]	@ (8008140 <_ZN23CPantallaEjecucionRampa4ShowEv+0xf0>)
 800809a:	f7fa fef1 	bl	8002e80 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelTemperatura->Show();
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 225c 	ldr.w	r2, [r3, #604]	@ 0x25c
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	334c      	adds	r3, #76	@ 0x4c
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4610      	mov	r0, r2
 80080b2:	4798      	blx	r3

	LabelAire->SetTexto((char*)"AIRE:%d",Paso.NivelAire);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 0260 	ldr.w	r0, [r3, #608]	@ 0x260
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 324e 	ldrb.w	r3, [r3, #590]	@ 0x24e
 80080c0:	461a      	mov	r2, r3
 80080c2:	4920      	ldr	r1, [pc, #128]	@ (8008144 <_ZN23CPantallaEjecucionRampa4ShowEv+0xf4>)
 80080c4:	f7fa fedc 	bl	8002e80 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelAire->Show();
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	334c      	adds	r3, #76	@ 0x4c
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4610      	mov	r0, r2
 80080dc:	4798      	blx	r3

	LabelTiempo->SetTexto((char*)"SEG:%d",Paso.Segundos);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8d3 0264 	ldr.w	r0, [r3, #612]	@ 0x264
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f893 324f 	ldrb.w	r3, [r3, #591]	@ 0x24f
 80080ea:	461a      	mov	r2, r3
 80080ec:	4916      	ldr	r1, [pc, #88]	@ (8008148 <_ZN23CPantallaEjecucionRampa4ShowEv+0xf8>)
 80080ee:	f7fa fec7 	bl	8002e80 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelTiempo->Show();
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	334c      	adds	r3, #76	@ 0x4c
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4610      	mov	r0, r2
 8008106:	4798      	blx	r3

	LabelGuardar->Show();
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 2250 	ldr.w	r2, [r3, #592]	@ 0x250
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 3250 	ldr.w	r3, [r3, #592]	@ 0x250
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	334c      	adds	r3, #76	@ 0x4c
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4610      	mov	r0, r2
 800811c:	4798      	blx	r3
	LabelCancelar->Show();
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8d3 2254 	ldr.w	r2, [r3, #596]	@ 0x254
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 3254 	ldr.w	r3, [r3, #596]	@ 0x254
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	334c      	adds	r3, #76	@ 0x4c
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4610      	mov	r0, r2
 8008132:	4798      	blx	r3

}
 8008134:	bf00      	nop
 8008136:	3708      	adds	r7, #8
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	08014454 	.word	0x08014454
 8008140:	0801445c 	.word	0x0801445c
 8008144:	08014464 	.word	0x08014464
 8008148:	0801446c 	.word	0x0801446c

0800814c <_ZN21CPantallaEliminarPasoC1Ev>:

#include <GUI/Rampa/PantallaEliminarPaso/CPantallaEliminarPaso.hpp>
#include <RapaTemperatura/CControladorPasosRampa.hpp>
#include <GUI/ManejadorPantallas/CManejadorPantallas.hpp>

CPantallaEliminarPaso::CPantallaEliminarPaso():
 800814c:	b590      	push	{r4, r7, lr}
 800814e:	b08b      	sub	sp, #44	@ 0x2c
 8008150:	af08      	add	r7, sp, #32
 8008152:	6078      	str	r0, [r7, #4]
CPantallaBase(1, (char*)" ELIMINAR PASO")
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4a35      	ldr	r2, [pc, #212]	@ (800822c <_ZN21CPantallaEliminarPasoC1Ev+0xe0>)
 8008158:	2101      	movs	r1, #1
 800815a:	4618      	mov	r0, r3
 800815c:	f7fb f888 	bl	8003270 <_ZN13CPantallaBaseC1EiPc>
 8008160:	4a33      	ldr	r2, [pc, #204]	@ (8008230 <_ZN21CPantallaEliminarPasoC1Ev+0xe4>)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	601a      	str	r2, [r3, #0]
 8008166:	4a33      	ldr	r2, [pc, #204]	@ (8008234 <_ZN21CPantallaEliminarPasoC1Ev+0xe8>)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated constructor stub
	LabelMemoria=new CEtiquetaTft( 5, 35, 50, 20, COLOR::BLACK,(char*)"Eliminar: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 800816c:	20a4      	movs	r0, #164	@ 0xa4
 800816e:	f009 f955 	bl	801141c <_Znwj>
 8008172:	4603      	mov	r3, r0
 8008174:	461c      	mov	r4, r3
 8008176:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800817a:	9306      	str	r3, [sp, #24]
 800817c:	2300      	movs	r3, #0
 800817e:	9305      	str	r3, [sp, #20]
 8008180:	2303      	movs	r3, #3
 8008182:	9304      	str	r3, [sp, #16]
 8008184:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008188:	9303      	str	r3, [sp, #12]
 800818a:	4b2b      	ldr	r3, [pc, #172]	@ (8008238 <_ZN21CPantallaEliminarPasoC1Ev+0xec>)
 800818c:	9302      	str	r3, [sp, #8]
 800818e:	2300      	movs	r3, #0
 8008190:	9301      	str	r3, [sp, #4]
 8008192:	2314      	movs	r3, #20
 8008194:	9300      	str	r3, [sp, #0]
 8008196:	2332      	movs	r3, #50	@ 0x32
 8008198:	2223      	movs	r2, #35	@ 0x23
 800819a:	2105      	movs	r1, #5
 800819c:	4620      	mov	r0, r4
 800819e:	f7fa fe35 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8c3 40dc 	str.w	r4, [r3, #220]	@ 0xdc
	LabelGuardar=new CEtiquetaTft( 10, 200, 130, 30, COLOR::GREEN,(char*)"ACEPTAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 80081a8:	20a4      	movs	r0, #164	@ 0xa4
 80081aa:	f009 f937 	bl	801141c <_Znwj>
 80081ae:	4603      	mov	r3, r0
 80081b0:	461c      	mov	r4, r3
 80081b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80081b6:	9306      	str	r3, [sp, #24]
 80081b8:	2301      	movs	r3, #1
 80081ba:	9305      	str	r3, [sp, #20]
 80081bc:	2303      	movs	r3, #3
 80081be:	9304      	str	r3, [sp, #16]
 80081c0:	2300      	movs	r3, #0
 80081c2:	9303      	str	r3, [sp, #12]
 80081c4:	4b1d      	ldr	r3, [pc, #116]	@ (800823c <_ZN21CPantallaEliminarPasoC1Ev+0xf0>)
 80081c6:	9302      	str	r3, [sp, #8]
 80081c8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80081cc:	9301      	str	r3, [sp, #4]
 80081ce:	231e      	movs	r3, #30
 80081d0:	9300      	str	r3, [sp, #0]
 80081d2:	2382      	movs	r3, #130	@ 0x82
 80081d4:	22c8      	movs	r2, #200	@ 0xc8
 80081d6:	210a      	movs	r1, #10
 80081d8:	4620      	mov	r0, r4
 80081da:	f7fa fe17 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8c3 40d4 	str.w	r4, [r3, #212]	@ 0xd4
	LabelCancelar=new CEtiquetaTft( 160, 200, 145, 30, COLOR::RED,(char*)"CANCELAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 80081e4:	20a4      	movs	r0, #164	@ 0xa4
 80081e6:	f009 f919 	bl	801141c <_Znwj>
 80081ea:	4603      	mov	r3, r0
 80081ec:	461c      	mov	r4, r3
 80081ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80081f2:	9306      	str	r3, [sp, #24]
 80081f4:	2301      	movs	r3, #1
 80081f6:	9305      	str	r3, [sp, #20]
 80081f8:	2303      	movs	r3, #3
 80081fa:	9304      	str	r3, [sp, #16]
 80081fc:	2300      	movs	r3, #0
 80081fe:	9303      	str	r3, [sp, #12]
 8008200:	4b0f      	ldr	r3, [pc, #60]	@ (8008240 <_ZN21CPantallaEliminarPasoC1Ev+0xf4>)
 8008202:	9302      	str	r3, [sp, #8]
 8008204:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8008208:	9301      	str	r3, [sp, #4]
 800820a:	231e      	movs	r3, #30
 800820c:	9300      	str	r3, [sp, #0]
 800820e:	2391      	movs	r3, #145	@ 0x91
 8008210:	22c8      	movs	r2, #200	@ 0xc8
 8008212:	21a0      	movs	r1, #160	@ 0xa0
 8008214:	4620      	mov	r0, r4
 8008216:	f7fa fdf9 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8c3 40d8 	str.w	r4, [r3, #216]	@ 0xd8

}
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4618      	mov	r0, r3
 8008224:	370c      	adds	r7, #12
 8008226:	46bd      	mov	sp, r7
 8008228:	bd90      	pop	{r4, r7, pc}
 800822a:	bf00      	nop
 800822c:	08014474 	.word	0x08014474
 8008230:	08015288 	.word	0x08015288
 8008234:	08015314 	.word	0x08015314
 8008238:	08014484 	.word	0x08014484
 800823c:	08014490 	.word	0x08014490
 8008240:	08014498 	.word	0x08014498

08008244 <_ZN21CPantallaEliminarPasoD1Ev>:

CPantallaEliminarPaso::~CPantallaEliminarPaso()
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	4a07      	ldr	r2, [pc, #28]	@ (800826c <_ZN21CPantallaEliminarPasoD1Ev+0x28>)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	601a      	str	r2, [r3, #0]
 8008252:	4a07      	ldr	r2, [pc, #28]	@ (8008270 <_ZN21CPantallaEliminarPasoD1Ev+0x2c>)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4618      	mov	r0, r3
 800825c:	f7fa ffd4 	bl	8003208 <_ZN13CPantallaBaseD1Ev>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4618      	mov	r0, r3
 8008264:	3708      	adds	r7, #8
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	08015288 	.word	0x08015288
 8008270:	08015314 	.word	0x08015314

08008274 <_ZThn48_N21CPantallaEliminarPasoD1Ev>:
	CEtiquetaTft *LabelGuardar;
	CEtiquetaTft *LabelCancelar;
	CEtiquetaTft *LabelMemoria;
public:
	CPantallaEliminarPaso();
	virtual ~CPantallaEliminarPaso();
 8008274:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008278:	f7ff bfe4 	b.w	8008244 <_ZN21CPantallaEliminarPasoD1Ev>

0800827c <_ZN21CPantallaEliminarPasoD0Ev>:
CPantallaEliminarPaso::~CPantallaEliminarPaso()
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
}
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f7ff ffdd 	bl	8008244 <_ZN21CPantallaEliminarPasoD1Ev>
 800828a:	21e0      	movs	r1, #224	@ 0xe0
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f009 f8c3 	bl	8011418 <_ZdlPvj>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4618      	mov	r0, r3
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <_ZThn48_N21CPantallaEliminarPasoD0Ev>:
 800829c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80082a0:	f7ff bfec 	b.w	800827c <_ZN21CPantallaEliminarPasoD0Ev>

080082a4 <_ZN21CPantallaEliminarPaso20OnBotonUnoClickEventEv>:

void CPantallaEliminarPaso::OnBotonUnoClickEvent()
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
	//ControladorRampas.EliminaRampa(ID_Rampa);
	ControladorPasosRampa.EliminaPasoRampa(ID_Paso);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80082b2:	4619      	mov	r1, r3
 80082b4:	4806      	ldr	r0, [pc, #24]	@ (80082d0 <_ZN21CPantallaEliminarPaso20OnBotonUnoClickEventEv+0x2c>)
 80082b6:	f002 fa78 	bl	800a7aa <_ZN22CControladorPasosRampa16EliminaPasoRampaEi>
	ManejadorPantallas.AsignaPantallaPasosRampa(ID_Rampa);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80082c0:	4619      	mov	r1, r3
 80082c2:	4804      	ldr	r0, [pc, #16]	@ (80082d4 <_ZN21CPantallaEliminarPaso20OnBotonUnoClickEventEv+0x30>)
 80082c4:	f7fb fec3 	bl	800404e <_ZN19CManejadorPantallas24AsignaPantallaPasosRampaEi>
}
 80082c8:	bf00      	nop
 80082ca:	3708      	adds	r7, #8
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	200001f4 	.word	0x200001f4
 80082d4:	20000258 	.word	0x20000258

080082d8 <_ZThn48_N21CPantallaEliminarPaso20OnBotonUnoClickEventEv>:
	virtual void OnBotonUnoClickEvent();
 80082d8:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80082dc:	f7ff bfe2 	b.w	80082a4 <_ZN21CPantallaEliminarPaso20OnBotonUnoClickEventEv>

080082e0 <_ZN21CPantallaEliminarPaso21OnBotonTresClickEventEv>:
void CPantallaEliminarPaso::OnBotonTresClickEvent()
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]

	 ManejadorPantallas.MuestraPantallaPaso(ID_Rampa, ID_Paso);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80082f4:	461a      	mov	r2, r3
 80082f6:	4803      	ldr	r0, [pc, #12]	@ (8008304 <_ZN21CPantallaEliminarPaso21OnBotonTresClickEventEv+0x24>)
 80082f8:	f7fb ff1d 	bl	8004136 <_ZN19CManejadorPantallas19MuestraPantallaPasoEii>

}
 80082fc:	bf00      	nop
 80082fe:	3708      	adds	r7, #8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}
 8008304:	20000258 	.word	0x20000258

08008308 <_ZThn48_N21CPantallaEliminarPaso21OnBotonTresClickEventEv>:
	virtual void OnBotonTresClickEvent();
 8008308:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800830c:	f7ff bfe8 	b.w	80082e0 <_ZN21CPantallaEliminarPaso21OnBotonTresClickEventEv>

08008310 <_ZN21CPantallaEliminarPaso9SetIdPasoEii>:

void CPantallaEliminarPaso::SetIdPaso(int id_rampa,int id_paso)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	607a      	str	r2, [r7, #4]
	ID_Paso=id_paso;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	ID_Rampa=id_rampa;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	68ba      	ldr	r2, [r7, #8]
 8008328:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	//CRampa rampa=	ControladorRampas.DameRampa(ID_Rampa);
	sprintf(TextoEliminar,"Eliminar ?");
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	33b4      	adds	r3, #180	@ 0xb4
 8008330:	4903      	ldr	r1, [pc, #12]	@ (8008340 <_ZN21CPantallaEliminarPaso9SetIdPasoEii+0x30>)
 8008332:	4618      	mov	r0, r3
 8008334:	f009 fe6e 	bl	8012014 <siprintf>
}
 8008338:	bf00      	nop
 800833a:	3710      	adds	r7, #16
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}
 8008340:	080144a4 	.word	0x080144a4

08008344 <_ZN21CPantallaEliminarPaso4ShowEv>:

void CPantallaEliminarPaso::Show()
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
	CPantallaBase::Show();
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4618      	mov	r0, r3
 8008350:	f7fb f800 	bl	8003354 <_ZN13CPantallaBase4ShowEv>
	LabelMemoria->SetTexto(TextoEliminar);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	33b4      	adds	r3, #180	@ 0xb4
 800835e:	4619      	mov	r1, r3
 8008360:	4610      	mov	r0, r2
 8008362:	f7fa fd8d 	bl	8002e80 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelMemoria->Show();
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	334c      	adds	r3, #76	@ 0x4c
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4610      	mov	r0, r2
 800837a:	4798      	blx	r3
	LabelGuardar->Show();
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	334c      	adds	r3, #76	@ 0x4c
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4610      	mov	r0, r2
 8008390:	4798      	blx	r3
	LabelCancelar->Show();
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	334c      	adds	r3, #76	@ 0x4c
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4610      	mov	r0, r2
 80083a6:	4798      	blx	r3

}
 80083a8:	bf00      	nop
 80083aa:	3708      	adds	r7, #8
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <_ZN22CPantallaEliminarRampaC1Ev>:
#include <GUI/ManejadorPantallas/CManejadorPantallas.hpp>
#include <EPROM/CEprom.hpp>
#include<string.h>
#include <RapaTemperatura/CControladorPasosRampa.hpp>

CPantallaEliminarRampa::CPantallaEliminarRampa():
 80083b0:	b590      	push	{r4, r7, lr}
 80083b2:	b08b      	sub	sp, #44	@ 0x2c
 80083b4:	af08      	add	r7, sp, #32
 80083b6:	6078      	str	r0, [r7, #4]
CPantallaBase(1, (char*)" ELIMINAR RAMPA")
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a35      	ldr	r2, [pc, #212]	@ (8008490 <_ZN22CPantallaEliminarRampaC1Ev+0xe0>)
 80083bc:	2101      	movs	r1, #1
 80083be:	4618      	mov	r0, r3
 80083c0:	f7fa ff56 	bl	8003270 <_ZN13CPantallaBaseC1EiPc>
 80083c4:	4a33      	ldr	r2, [pc, #204]	@ (8008494 <_ZN22CPantallaEliminarRampaC1Ev+0xe4>)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	601a      	str	r2, [r3, #0]
 80083ca:	4a33      	ldr	r2, [pc, #204]	@ (8008498 <_ZN22CPantallaEliminarRampaC1Ev+0xe8>)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated constructor stub
	LabelMemoria=new CEtiquetaTft( 5, 35, 50, 20, COLOR::BLACK,(char*)"Eliminar: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 80083d0:	20a4      	movs	r0, #164	@ 0xa4
 80083d2:	f009 f823 	bl	801141c <_Znwj>
 80083d6:	4603      	mov	r3, r0
 80083d8:	461c      	mov	r4, r3
 80083da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80083de:	9306      	str	r3, [sp, #24]
 80083e0:	2300      	movs	r3, #0
 80083e2:	9305      	str	r3, [sp, #20]
 80083e4:	2303      	movs	r3, #3
 80083e6:	9304      	str	r3, [sp, #16]
 80083e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80083ec:	9303      	str	r3, [sp, #12]
 80083ee:	4b2b      	ldr	r3, [pc, #172]	@ (800849c <_ZN22CPantallaEliminarRampaC1Ev+0xec>)
 80083f0:	9302      	str	r3, [sp, #8]
 80083f2:	2300      	movs	r3, #0
 80083f4:	9301      	str	r3, [sp, #4]
 80083f6:	2314      	movs	r3, #20
 80083f8:	9300      	str	r3, [sp, #0]
 80083fa:	2332      	movs	r3, #50	@ 0x32
 80083fc:	2223      	movs	r2, #35	@ 0x23
 80083fe:	2105      	movs	r1, #5
 8008400:	4620      	mov	r0, r4
 8008402:	f7fa fd03 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8c3 40d8 	str.w	r4, [r3, #216]	@ 0xd8
	LabelGuardar=new CEtiquetaTft( 10, 200, 130, 30, COLOR::GREEN,(char*)"ACEPTAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 800840c:	20a4      	movs	r0, #164	@ 0xa4
 800840e:	f009 f805 	bl	801141c <_Znwj>
 8008412:	4603      	mov	r3, r0
 8008414:	461c      	mov	r4, r3
 8008416:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800841a:	9306      	str	r3, [sp, #24]
 800841c:	2301      	movs	r3, #1
 800841e:	9305      	str	r3, [sp, #20]
 8008420:	2303      	movs	r3, #3
 8008422:	9304      	str	r3, [sp, #16]
 8008424:	2300      	movs	r3, #0
 8008426:	9303      	str	r3, [sp, #12]
 8008428:	4b1d      	ldr	r3, [pc, #116]	@ (80084a0 <_ZN22CPantallaEliminarRampaC1Ev+0xf0>)
 800842a:	9302      	str	r3, [sp, #8]
 800842c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8008430:	9301      	str	r3, [sp, #4]
 8008432:	231e      	movs	r3, #30
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	2382      	movs	r3, #130	@ 0x82
 8008438:	22c8      	movs	r2, #200	@ 0xc8
 800843a:	210a      	movs	r1, #10
 800843c:	4620      	mov	r0, r4
 800843e:	f7fa fce5 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8c3 40d0 	str.w	r4, [r3, #208]	@ 0xd0
	LabelCancelar=new CEtiquetaTft( 160, 200, 145, 30, COLOR::RED,(char*)"CANCELAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 8008448:	20a4      	movs	r0, #164	@ 0xa4
 800844a:	f008 ffe7 	bl	801141c <_Znwj>
 800844e:	4603      	mov	r3, r0
 8008450:	461c      	mov	r4, r3
 8008452:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008456:	9306      	str	r3, [sp, #24]
 8008458:	2301      	movs	r3, #1
 800845a:	9305      	str	r3, [sp, #20]
 800845c:	2303      	movs	r3, #3
 800845e:	9304      	str	r3, [sp, #16]
 8008460:	2300      	movs	r3, #0
 8008462:	9303      	str	r3, [sp, #12]
 8008464:	4b0f      	ldr	r3, [pc, #60]	@ (80084a4 <_ZN22CPantallaEliminarRampaC1Ev+0xf4>)
 8008466:	9302      	str	r3, [sp, #8]
 8008468:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800846c:	9301      	str	r3, [sp, #4]
 800846e:	231e      	movs	r3, #30
 8008470:	9300      	str	r3, [sp, #0]
 8008472:	2391      	movs	r3, #145	@ 0x91
 8008474:	22c8      	movs	r2, #200	@ 0xc8
 8008476:	21a0      	movs	r1, #160	@ 0xa0
 8008478:	4620      	mov	r0, r4
 800847a:	f7fa fcc7 	bl	8002e0c <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8c3 40d4 	str.w	r4, [r3, #212]	@ 0xd4

}
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4618      	mov	r0, r3
 8008488:	370c      	adds	r7, #12
 800848a:	46bd      	mov	sp, r7
 800848c:	bd90      	pop	{r4, r7, pc}
 800848e:	bf00      	nop
 8008490:	080144b0 	.word	0x080144b0
 8008494:	08015348 	.word	0x08015348
 8008498:	080153d4 	.word	0x080153d4
 800849c:	080144c0 	.word	0x080144c0
 80084a0:	080144cc 	.word	0x080144cc
 80084a4:	080144d4 	.word	0x080144d4

080084a8 <_ZN22CPantallaEliminarRampaD1Ev>:

CPantallaEliminarRampa::~CPantallaEliminarRampa()
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	4a07      	ldr	r2, [pc, #28]	@ (80084d0 <_ZN22CPantallaEliminarRampaD1Ev+0x28>)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	601a      	str	r2, [r3, #0]
 80084b6:	4a07      	ldr	r2, [pc, #28]	@ (80084d4 <_ZN22CPantallaEliminarRampaD1Ev+0x2c>)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4618      	mov	r0, r3
 80084c0:	f7fa fea2 	bl	8003208 <_ZN13CPantallaBaseD1Ev>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4618      	mov	r0, r3
 80084c8:	3708      	adds	r7, #8
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	08015348 	.word	0x08015348
 80084d4:	080153d4 	.word	0x080153d4

080084d8 <_ZThn48_N22CPantallaEliminarRampaD1Ev>:
	CEtiquetaTft *LabelGuardar;
	CEtiquetaTft *LabelCancelar;
	CEtiquetaTft *LabelMemoria;
public:
	CPantallaEliminarRampa();
	virtual ~CPantallaEliminarRampa();
 80084d8:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80084dc:	f7ff bfe4 	b.w	80084a8 <_ZN22CPantallaEliminarRampaD1Ev>

080084e0 <_ZN22CPantallaEliminarRampaD0Ev>:
CPantallaEliminarRampa::~CPantallaEliminarRampa()
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
}
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f7ff ffdd 	bl	80084a8 <_ZN22CPantallaEliminarRampaD1Ev>
 80084ee:	21dc      	movs	r1, #220	@ 0xdc
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f008 ff91 	bl	8011418 <_ZdlPvj>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4618      	mov	r0, r3
 80084fa:	3708      	adds	r7, #8
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <_ZThn48_N22CPantallaEliminarRampaD0Ev>:
 8008500:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008504:	f7ff bfec 	b.w	80084e0 <_ZN22CPantallaEliminarRampaD0Ev>

08008508 <_ZN22CPantallaEliminarRampa20OnBotonUnoClickEventEv>:

void CPantallaEliminarRampa::OnBotonUnoClickEvent()
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
	ControladorRampas.EliminaRampa(ID_Rampa);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008516:	4619      	mov	r1, r3
 8008518:	4808      	ldr	r0, [pc, #32]	@ (800853c <_ZN22CPantallaEliminarRampa20OnBotonUnoClickEventEv+0x34>)
 800851a:	f002 fef9 	bl	800b310 <_ZN18CControladorRampas12EliminaRampaEi>
	ControladorPasosRampa.EliminaPasosRampa(ID_Rampa);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008524:	4619      	mov	r1, r3
 8008526:	4806      	ldr	r0, [pc, #24]	@ (8008540 <_ZN22CPantallaEliminarRampa20OnBotonUnoClickEventEv+0x38>)
 8008528:	f001 ffba 	bl	800a4a0 <_ZN22CControladorPasosRampa17EliminaPasosRampaEi>
	ManejadorPantallas.MuestraMenuRampa();
 800852c:	4805      	ldr	r0, [pc, #20]	@ (8008544 <_ZN22CPantallaEliminarRampa20OnBotonUnoClickEventEv+0x3c>)
 800852e:	f7fb fc27 	bl	8003d80 <_ZN19CManejadorPantallas16MuestraMenuRampaEv>
}
 8008532:	bf00      	nop
 8008534:	3708      	adds	r7, #8
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	20000360 	.word	0x20000360
 8008540:	200001f4 	.word	0x200001f4
 8008544:	20000258 	.word	0x20000258

08008548 <_ZThn48_N22CPantallaEliminarRampa20OnBotonUnoClickEventEv>:
	virtual void OnBotonUnoClickEvent();
 8008548:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800854c:	f7ff bfdc 	b.w	8008508 <_ZN22CPantallaEliminarRampa20OnBotonUnoClickEventEv>

08008550 <_ZN22CPantallaEliminarRampa21OnBotonTresClickEventEv>:
void CPantallaEliminarRampa::OnBotonTresClickEvent()
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]

	 ManejadorPantallas.MuestraPantallaRampa(ID_Rampa);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800855e:	4619      	mov	r1, r3
 8008560:	4803      	ldr	r0, [pc, #12]	@ (8008570 <_ZN22CPantallaEliminarRampa21OnBotonTresClickEventEv+0x20>)
 8008562:	f7fb fd11 	bl	8003f88 <_ZN19CManejadorPantallas20MuestraPantallaRampaEi>

}
 8008566:	bf00      	nop
 8008568:	3708      	adds	r7, #8
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	20000258 	.word	0x20000258

08008574 <_ZThn48_N22CPantallaEliminarRampa21OnBotonTresClickEventEv>:
	virtual void OnBotonTresClickEvent();
 8008574:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008578:	f7ff bfea 	b.w	8008550 <_ZN22CPantallaEliminarRampa21OnBotonTresClickEventEv>

0800857c <_ZN22CPantallaEliminarRampa10SetIdRampaEi>:

void CPantallaEliminarRampa::SetIdRampa(int id_rampa)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b088      	sub	sp, #32
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
	ID_Rampa=id_rampa;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	683a      	ldr	r2, [r7, #0]
 800858a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	CRampa rampa=	ControladorRampas.DameRampa(ID_Rampa);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8008594:	f107 0308 	add.w	r3, r7, #8
 8008598:	490a      	ldr	r1, [pc, #40]	@ (80085c4 <_ZN22CPantallaEliminarRampa10SetIdRampaEi+0x48>)
 800859a:	4618      	mov	r0, r3
 800859c:	f002 fc9d 	bl	800aeda <_ZN18CControladorRampas9DameRampaEi>
	sprintf(TextoEliminar,"Eliminar %s?",rampa.Nombre);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f103 00b0 	add.w	r0, r3, #176	@ 0xb0
 80085a6:	f107 0308 	add.w	r3, r7, #8
 80085aa:	3308      	adds	r3, #8
 80085ac:	461a      	mov	r2, r3
 80085ae:	4906      	ldr	r1, [pc, #24]	@ (80085c8 <_ZN22CPantallaEliminarRampa10SetIdRampaEi+0x4c>)
 80085b0:	f009 fd30 	bl	8012014 <siprintf>
}
 80085b4:	f107 0308 	add.w	r3, r7, #8
 80085b8:	4618      	mov	r0, r3
 80085ba:	f002 ff9b 	bl	800b4f4 <_ZN6CRampaD1Ev>
 80085be:	3720      	adds	r7, #32
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	20000360 	.word	0x20000360
 80085c8:	080144e0 	.word	0x080144e0

080085cc <_ZN22CPantallaEliminarRampa4ShowEv>:

void CPantallaEliminarRampa::Show()
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
	CPantallaBase::Show();
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7fa febc 	bl	8003354 <_ZN13CPantallaBase4ShowEv>

	LabelMemoria->SetTexto(TextoEliminar);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	33b0      	adds	r3, #176	@ 0xb0
 80085e6:	4619      	mov	r1, r3
 80085e8:	4610      	mov	r0, r2
 80085ea:	f7fa fc49 	bl	8002e80 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelMemoria->Show();
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	334c      	adds	r3, #76	@ 0x4c
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4610      	mov	r0, r2
 8008602:	4798      	blx	r3
	LabelGuardar->Show();
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	334c      	adds	r3, #76	@ 0x4c
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4610      	mov	r0, r2
 8008618:	4798      	blx	r3
	LabelCancelar->Show();
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	334c      	adds	r3, #76	@ 0x4c
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4610      	mov	r0, r2
 800862e:	4798      	blx	r3

}
 8008630:	bf00      	nop
 8008632:	3708      	adds	r7, #8
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <_ZN18CPantallaMenuRampaC1Ev>:
#include "GUI/Menu/CMenu.hpp"
#include "string.h"
#include <RapaTemperatura/CControladorRampas.hpp>
#include <GUI/PantallaMenuBase/CPantallaMenuBase.hpp>

CPantallaMenuRampa::CPantallaMenuRampa():
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
CPantallaMenuBase((char*) " Menu Rampa")
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4909      	ldr	r1, [pc, #36]	@ (8008668 <_ZN18CPantallaMenuRampaC1Ev+0x30>)
 8008644:	4618      	mov	r0, r3
 8008646:	f7fd fe7d 	bl	8006344 <_ZN17CPantallaMenuBaseC1EPc>
 800864a:	4a08      	ldr	r2, [pc, #32]	@ (800866c <_ZN18CPantallaMenuRampaC1Ev+0x34>)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	601a      	str	r2, [r3, #0]
 8008650:	4a07      	ldr	r2, [pc, #28]	@ (8008670 <_ZN18CPantallaMenuRampaC1Ev+0x38>)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	631a      	str	r2, [r3, #48]	@ 0x30
 8008656:	4a07      	ldr	r2, [pc, #28]	@ (8008674 <_ZN18CPantallaMenuRampaC1Ev+0x3c>)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{

}
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4618      	mov	r0, r3
 8008662:	3708      	adds	r7, #8
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}
 8008668:	080144f0 	.word	0x080144f0
 800866c:	08015408 	.word	0x08015408
 8008670:	080154b4 	.word	0x080154b4
 8008674:	080154e8 	.word	0x080154e8

08008678 <_ZN18CPantallaMenuRampaD1Ev>:

CPantallaMenuRampa::~CPantallaMenuRampa()
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	4a09      	ldr	r2, [pc, #36]	@ (80086a8 <_ZN18CPantallaMenuRampaD1Ev+0x30>)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	601a      	str	r2, [r3, #0]
 8008686:	4a09      	ldr	r2, [pc, #36]	@ (80086ac <_ZN18CPantallaMenuRampaD1Ev+0x34>)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	631a      	str	r2, [r3, #48]	@ 0x30
 800868c:	4a08      	ldr	r2, [pc, #32]	@ (80086b0 <_ZN18CPantallaMenuRampaD1Ev+0x38>)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	// TODO Auto-generated destructor stub
}
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	4618      	mov	r0, r3
 8008698:	f7fd fea8 	bl	80063ec <_ZN17CPantallaMenuBaseD1Ev>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	4618      	mov	r0, r3
 80086a0:	3708      	adds	r7, #8
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	08015408 	.word	0x08015408
 80086ac:	080154b4 	.word	0x080154b4
 80086b0:	080154e8 	.word	0x080154e8

080086b4 <_ZThn48_N18CPantallaMenuRampaD1Ev>:
private:
	CEstacionBase *Estacion;
	CMenuItem* item1,*item2;
public:
	CPantallaMenuRampa();
	virtual ~CPantallaMenuRampa();
 80086b4:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80086b8:	f7ff bfde 	b.w	8008678 <_ZN18CPantallaMenuRampaD1Ev>

080086bc <_ZThn172_N18CPantallaMenuRampaD1Ev>:
 80086bc:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 80086c0:	f7ff bfda 	b.w	8008678 <_ZN18CPantallaMenuRampaD1Ev>

080086c4 <_ZN18CPantallaMenuRampaD0Ev>:
CPantallaMenuRampa::~CPantallaMenuRampa()
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
}
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f7ff ffd3 	bl	8008678 <_ZN18CPantallaMenuRampaD1Ev>
 80086d2:	21c0      	movs	r1, #192	@ 0xc0
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f008 fe9f 	bl	8011418 <_ZdlPvj>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4618      	mov	r0, r3
 80086de:	3708      	adds	r7, #8
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <_ZThn172_N18CPantallaMenuRampaD0Ev>:
 80086e4:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 80086e8:	f7ff bfec 	b.w	80086c4 <_ZN18CPantallaMenuRampaD0Ev>

080086ec <_ZThn48_N18CPantallaMenuRampaD0Ev>:
 80086ec:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80086f0:	f7ff bfe8 	b.w	80086c4 <_ZN18CPantallaMenuRampaD0Ev>

080086f4 <_ZN18CPantallaMenuRampa23OnBotonCuatroClickEventEv>:
void CPantallaMenuRampa::OnBotonCuatroClickEvent()
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaManual();
 80086fc:	4803      	ldr	r0, [pc, #12]	@ (800870c <_ZN18CPantallaMenuRampa23OnBotonCuatroClickEventEv+0x18>)
 80086fe:	f7fb fb07 	bl	8003d10 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
}
 8008702:	bf00      	nop
 8008704:	3708      	adds	r7, #8
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	20000258 	.word	0x20000258

08008710 <_ZThn48_N18CPantallaMenuRampa23OnBotonCuatroClickEventEv>:
	virtual void OnBotonCuatroClickEvent();
 8008710:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008714:	f7ff bfee 	b.w	80086f4 <_ZN18CPantallaMenuRampa23OnBotonCuatroClickEventEv>

08008718 <_ZN18CPantallaMenuRampa11OnMenuEventEi>:
void CPantallaMenuRampa::OnMenuEvent(int identificador)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
	switch(identificador)
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	f113 0f02 	cmn.w	r3, #2
 8008728:	d004      	beq.n	8008734 <_ZN18CPantallaMenuRampa11OnMenuEventEi+0x1c>
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008730:	d004      	beq.n	800873c <_ZN18CPantallaMenuRampa11OnMenuEventEi+0x24>
 8008732:	e009      	b.n	8008748 <_ZN18CPantallaMenuRampa11OnMenuEventEi+0x30>
	{
	case MENU_RAMPA::MENU_RAMPA_SALIR:
		ManejadorPantallas.MuestraMenuPrincipal();
 8008734:	4809      	ldr	r0, [pc, #36]	@ (800875c <_ZN18CPantallaMenuRampa11OnMenuEventEi+0x44>)
 8008736:	f7fb fb07 	bl	8003d48 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>
		break;
 800873a:	e00a      	b.n	8008752 <_ZN18CPantallaMenuRampa11OnMenuEventEi+0x3a>
//	case MENU_PRINCIPAL::MENU_MEMORIA_2:
//	case MENU_PRINCIPAL::MENU_MEMORIA_3:
//		ManejadorPantallas.MuestraPantallaConfiguracionMemoria(identificador);
//		break;
	case MENU_RAMPA::MENU_AGREGAR:
		ManejadorPantallas.MuestraPantallaEditorNombre(-1);
 800873c:	f04f 31ff 	mov.w	r1, #4294967295
 8008740:	4806      	ldr	r0, [pc, #24]	@ (800875c <_ZN18CPantallaMenuRampa11OnMenuEventEi+0x44>)
 8008742:	f7fb fc60 	bl	8004006 <_ZN19CManejadorPantallas27MuestraPantallaEditorNombreEi>
//		ManejadorPantallas.MuestraPantallaEliminarRampa(0);
		break;
 8008746:	e004      	b.n	8008752 <_ZN18CPantallaMenuRampa11OnMenuEventEi+0x3a>
	default:
		ManejadorPantallas.MuestraPantallaRampa(identificador);
 8008748:	6839      	ldr	r1, [r7, #0]
 800874a:	4804      	ldr	r0, [pc, #16]	@ (800875c <_ZN18CPantallaMenuRampa11OnMenuEventEi+0x44>)
 800874c:	f7fb fc1c 	bl	8003f88 <_ZN19CManejadorPantallas20MuestraPantallaRampaEi>
	}

}
 8008750:	bf00      	nop
 8008752:	bf00      	nop
 8008754:	3708      	adds	r7, #8
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	20000258 	.word	0x20000258

08008760 <_ZThn172_N18CPantallaMenuRampa11OnMenuEventEi>:
	virtual void OnMenuEvent(int identificador);
 8008760:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8008764:	f7ff bfd8 	b.w	8008718 <_ZN18CPantallaMenuRampa11OnMenuEventEi>

08008768 <_ZN18CPantallaMenuRampa21OnBotonTresClickEventEv>:

void CPantallaMenuRampa::OnBotonTresClickEvent()
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(3);
 8008770:	2103      	movs	r1, #3
 8008772:	4803      	ldr	r0, [pc, #12]	@ (8008780 <_ZN18CPantallaMenuRampa21OnBotonTresClickEventEv+0x18>)
 8008774:	f7fb fbc8 	bl	8003f08 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 8008778:	bf00      	nop
 800877a:	3708      	adds	r7, #8
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}
 8008780:	20000258 	.word	0x20000258

08008784 <_ZThn48_N18CPantallaMenuRampa21OnBotonTresClickEventEv>:

	virtual void OnBotonUnoClickEvent();
	virtual void OnBotonDosClickEvent();
	virtual void OnBotonTresClickEvent();
 8008784:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008788:	f7ff bfee 	b.w	8008768 <_ZN18CPantallaMenuRampa21OnBotonTresClickEventEv>

0800878c <_ZN18CPantallaMenuRampa20OnBotonUnoClickEventEv>:
void CPantallaMenuRampa::OnBotonUnoClickEvent()
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(1);
 8008794:	2101      	movs	r1, #1
 8008796:	4803      	ldr	r0, [pc, #12]	@ (80087a4 <_ZN18CPantallaMenuRampa20OnBotonUnoClickEventEv+0x18>)
 8008798:	f7fb fbb6 	bl	8003f08 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 800879c:	bf00      	nop
 800879e:	3708      	adds	r7, #8
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	20000258 	.word	0x20000258

080087a8 <_ZThn48_N18CPantallaMenuRampa20OnBotonUnoClickEventEv>:
	virtual void OnBotonUnoClickEvent();
 80087a8:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80087ac:	f7ff bfee 	b.w	800878c <_ZN18CPantallaMenuRampa20OnBotonUnoClickEventEv>

080087b0 <_ZN18CPantallaMenuRampa20OnBotonDosClickEventEv>:
void CPantallaMenuRampa::OnBotonDosClickEvent()
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(2);
 80087b8:	2102      	movs	r1, #2
 80087ba:	4803      	ldr	r0, [pc, #12]	@ (80087c8 <_ZN18CPantallaMenuRampa20OnBotonDosClickEventEv+0x18>)
 80087bc:	f7fb fba4 	bl	8003f08 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 80087c0:	bf00      	nop
 80087c2:	3708      	adds	r7, #8
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	20000258 	.word	0x20000258

080087cc <_ZThn48_N18CPantallaMenuRampa20OnBotonDosClickEventEv>:
	virtual void OnBotonDosClickEvent();
 80087cc:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80087d0:	f7ff bfee 	b.w	80087b0 <_ZN18CPantallaMenuRampa20OnBotonDosClickEventEv>

080087d4 <_ZN18CPantallaMenuRampa12SeleccionadaEv>:
void CPantallaMenuRampa::Seleccionada()
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b090      	sub	sp, #64	@ 0x40
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
	this->BorraMenu();
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	338c      	adds	r3, #140	@ 0x8c
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4610      	mov	r0, r2
 80087e8:	4798      	blx	r3
	char texto[20];
	// TODO Auto-generated constructor stub
	int nrampas=ControladorRampas.DameNumeroRampas();
 80087ea:	481e      	ldr	r0, [pc, #120]	@ (8008864 <_ZN18CPantallaMenuRampa12SeleccionadaEv+0x90>)
 80087ec:	f002 fb38 	bl	800ae60 <_ZN18CControladorRampas16DameNumeroRampasEv>
 80087f0:	63b8      	str	r0, [r7, #56]	@ 0x38
	for(int i=0;i<nrampas;i++)
 80087f2:	2300      	movs	r3, #0
 80087f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087f6:	e01f      	b.n	8008838 <_ZN18CPantallaMenuRampa12SeleccionadaEv+0x64>
	{
		CRampa rampa=ControladorRampas.DameRampaNumero(i);
 80087f8:	f107 030c 	add.w	r3, r7, #12
 80087fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80087fe:	4919      	ldr	r1, [pc, #100]	@ (8008864 <_ZN18CPantallaMenuRampa12SeleccionadaEv+0x90>)
 8008800:	4618      	mov	r0, r3
 8008802:	f002 fbbe 	bl	800af82 <_ZN18CControladorRampas15DameRampaNumeroEi>
		sprintf(texto,"%s",rampa.Nombre);
 8008806:	f107 030c 	add.w	r3, r7, #12
 800880a:	f103 0208 	add.w	r2, r3, #8
 800880e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008812:	4915      	ldr	r1, [pc, #84]	@ (8008868 <_ZN18CPantallaMenuRampa12SeleccionadaEv+0x94>)
 8008814:	4618      	mov	r0, r3
 8008816:	f009 fbfd 	bl	8012014 <siprintf>
		AgregaMenuItem(texto, rampa.ID_RAMPA);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	8a7a      	ldrh	r2, [r7, #18]
 800881e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8008822:	4618      	mov	r0, r3
 8008824:	f7fd fe24 	bl	8006470 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	}
 8008828:	f107 030c 	add.w	r3, r7, #12
 800882c:	4618      	mov	r0, r3
 800882e:	f002 fe61 	bl	800b4f4 <_ZN6CRampaD1Ev>
	for(int i=0;i<nrampas;i++)
 8008832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008834:	3301      	adds	r3, #1
 8008836:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008838:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800883a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800883c:	429a      	cmp	r2, r3
 800883e:	dbdb      	blt.n	80087f8 <_ZN18CPantallaMenuRampa12SeleccionadaEv+0x24>
	AgregaMenuItem((char*)"Agregar", MENU_RAMPA::MENU_AGREGAR);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f04f 32ff 	mov.w	r2, #4294967295
 8008846:	4909      	ldr	r1, [pc, #36]	@ (800886c <_ZN18CPantallaMenuRampa12SeleccionadaEv+0x98>)
 8008848:	4618      	mov	r0, r3
 800884a:	f7fd fe11 	bl	8006470 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"Salir", MENU_RAMPA::MENU_RAMPA_SALIR);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f06f 0201 	mvn.w	r2, #1
 8008854:	4906      	ldr	r1, [pc, #24]	@ (8008870 <_ZN18CPantallaMenuRampa12SeleccionadaEv+0x9c>)
 8008856:	4618      	mov	r0, r3
 8008858:	f7fd fe0a 	bl	8006470 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
}
 800885c:	bf00      	nop
 800885e:	3740      	adds	r7, #64	@ 0x40
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	20000360 	.word	0x20000360
 8008868:	080144fc 	.word	0x080144fc
 800886c:	08014500 	.word	0x08014500
 8008870:	08014508 	.word	0x08014508

08008874 <_ZN13CPantallaPasoC1Ev>:

#include <GUI/Rampa/PantallaPaso/CPantallaPaso.hpp>
#include <GUI/PantallaMenuBase/CPantallaMenuBase.hpp>
#include <GUI/ManejadorPantallas/CManejadorPantallas.hpp>

CPantallaPaso::CPantallaPaso():
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
CPantallaMenuBase((char*) " PASO")
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4912      	ldr	r1, [pc, #72]	@ (80088c8 <_ZN13CPantallaPasoC1Ev+0x54>)
 8008880:	4618      	mov	r0, r3
 8008882:	f7fd fd5f 	bl	8006344 <_ZN17CPantallaMenuBaseC1EPc>
 8008886:	4a11      	ldr	r2, [pc, #68]	@ (80088cc <_ZN13CPantallaPasoC1Ev+0x58>)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	601a      	str	r2, [r3, #0]
 800888c:	4a10      	ldr	r2, [pc, #64]	@ (80088d0 <_ZN13CPantallaPasoC1Ev+0x5c>)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	631a      	str	r2, [r3, #48]	@ 0x30
 8008892:	4a10      	ldr	r2, [pc, #64]	@ (80088d4 <_ZN13CPantallaPasoC1Ev+0x60>)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	// TODO Auto-generated constructor stub
	AgregaMenuItem((char*)"Modificar",MENU_PANTALLA_PASO::PANTALLA_PASO_MODIFICAR);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2200      	movs	r2, #0
 800889e:	490e      	ldr	r1, [pc, #56]	@ (80088d8 <_ZN13CPantallaPasoC1Ev+0x64>)
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7fd fde5 	bl	8006470 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"Eliminar", MENU_PANTALLA_PASO::PANTALLA_PASO_ELIMINAR);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2201      	movs	r2, #1
 80088aa:	490c      	ldr	r1, [pc, #48]	@ (80088dc <_ZN13CPantallaPasoC1Ev+0x68>)
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7fd fddf 	bl	8006470 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"Salir", MENU_PANTALLA_PASO::PANTALLA_PASO_SALIR);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2202      	movs	r2, #2
 80088b6:	490a      	ldr	r1, [pc, #40]	@ (80088e0 <_ZN13CPantallaPasoC1Ev+0x6c>)
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7fd fdd9 	bl	8006470 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>

}
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	4618      	mov	r0, r3
 80088c2:	3708      	adds	r7, #8
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	08014510 	.word	0x08014510
 80088cc:	080154fc 	.word	0x080154fc
 80088d0:	08015598 	.word	0x08015598
 80088d4:	080155cc 	.word	0x080155cc
 80088d8:	08014518 	.word	0x08014518
 80088dc:	08014524 	.word	0x08014524
 80088e0:	08014530 	.word	0x08014530

080088e4 <_ZN13CPantallaPasoD1Ev>:

CPantallaPaso::~CPantallaPaso()
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	4a09      	ldr	r2, [pc, #36]	@ (8008914 <_ZN13CPantallaPasoD1Ev+0x30>)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	601a      	str	r2, [r3, #0]
 80088f2:	4a09      	ldr	r2, [pc, #36]	@ (8008918 <_ZN13CPantallaPasoD1Ev+0x34>)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80088f8:	4a08      	ldr	r2, [pc, #32]	@ (800891c <_ZN13CPantallaPasoD1Ev+0x38>)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	// TODO Auto-generated destructor stub
}
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4618      	mov	r0, r3
 8008904:	f7fd fd72 	bl	80063ec <_ZN17CPantallaMenuBaseD1Ev>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4618      	mov	r0, r3
 800890c:	3708      	adds	r7, #8
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	080154fc 	.word	0x080154fc
 8008918:	08015598 	.word	0x08015598
 800891c:	080155cc 	.word	0x080155cc

08008920 <_ZThn48_N13CPantallaPasoD1Ev>:
private:
	int ID_Paso;
	int ID_Rampa;
public:
	CPantallaPaso();
	virtual ~CPantallaPaso();
 8008920:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008924:	f7ff bfde 	b.w	80088e4 <_ZN13CPantallaPasoD1Ev>

08008928 <_ZThn172_N13CPantallaPasoD1Ev>:
 8008928:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 800892c:	f7ff bfda 	b.w	80088e4 <_ZN13CPantallaPasoD1Ev>

08008930 <_ZN13CPantallaPasoD0Ev>:
CPantallaPaso::~CPantallaPaso()
 8008930:	b580      	push	{r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
}
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f7ff ffd3 	bl	80088e4 <_ZN13CPantallaPasoD1Ev>
 800893e:	21bc      	movs	r1, #188	@ 0xbc
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f008 fd69 	bl	8011418 <_ZdlPvj>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4618      	mov	r0, r3
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <_ZThn172_N13CPantallaPasoD0Ev>:
 8008950:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8008954:	f7ff bfec 	b.w	8008930 <_ZN13CPantallaPasoD0Ev>

08008958 <_ZThn48_N13CPantallaPasoD0Ev>:
 8008958:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800895c:	f7ff bfe8 	b.w	8008930 <_ZN13CPantallaPasoD0Ev>

08008960 <_ZN13CPantallaPaso9SetIdPasoEii>:

void CPantallaPaso::SetIdPaso(int id_rampa,int id_Paso)
{
 8008960:	b480      	push	{r7}
 8008962:	b085      	sub	sp, #20
 8008964:	af00      	add	r7, sp, #0
 8008966:	60f8      	str	r0, [r7, #12]
 8008968:	60b9      	str	r1, [r7, #8]
 800896a:	607a      	str	r2, [r7, #4]
	ID_Paso=id_Paso;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	ID_Rampa=id_rampa;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	68ba      	ldr	r2, [r7, #8]
 8008978:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
//	CRampa rampa=ControladorRampas.DameRampa(ID_Rampa);
//	this->SetTituloPantalla(rampa.Nombre);
}
 800897c:	bf00      	nop
 800897e:	3714      	adds	r7, #20
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <_ZN13CPantallaPaso11OnMenuEventEi>:
void CPantallaPaso::OnMenuEvent(int identificador)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]

	switch(identificador)
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	2b02      	cmp	r3, #2
 8008996:	d009      	beq.n	80089ac <_ZN13CPantallaPaso11OnMenuEventEi+0x24>
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	2b02      	cmp	r3, #2
 800899c:	dc24      	bgt.n	80089e8 <_ZN13CPantallaPaso11OnMenuEventEi+0x60>
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00b      	beq.n	80089bc <_ZN13CPantallaPaso11OnMenuEventEi+0x34>
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d013      	beq.n	80089d2 <_ZN13CPantallaPaso11OnMenuEventEi+0x4a>
	case MENU_PANTALLA_PASO::PANTALLA_PASO_ELIMINAR:
		ManejadorPantallas.MuestraPantallaEliminarPaso(ID_Rampa,ID_Paso);
		break;
	}

}
 80089aa:	e01d      	b.n	80089e8 <_ZN13CPantallaPaso11OnMenuEventEi+0x60>
		ManejadorPantallas.AsignaPantallaPasosRampa(ID_Rampa);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80089b2:	4619      	mov	r1, r3
 80089b4:	480e      	ldr	r0, [pc, #56]	@ (80089f0 <_ZN13CPantallaPaso11OnMenuEventEi+0x68>)
 80089b6:	f7fb fb4a 	bl	800404e <_ZN19CManejadorPantallas24AsignaPantallaPasosRampaEi>
		break;
 80089ba:	e015      	b.n	80089e8 <_ZN13CPantallaPaso11OnMenuEventEi+0x60>
		ManejadorPantallas.MuestraPantallaEdicionPaso(ID_Rampa, ID_Paso);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 10b8 	ldr.w	r1, [r3, #184]	@ 0xb8
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80089c8:	461a      	mov	r2, r3
 80089ca:	4809      	ldr	r0, [pc, #36]	@ (80089f0 <_ZN13CPantallaPaso11OnMenuEventEi+0x68>)
 80089cc:	f7fb fb8e 	bl	80040ec <_ZN19CManejadorPantallas26MuestraPantallaEdicionPasoEii>
		break;
 80089d0:	e00a      	b.n	80089e8 <_ZN13CPantallaPaso11OnMenuEventEi+0x60>
		ManejadorPantallas.MuestraPantallaEliminarPaso(ID_Rampa,ID_Paso);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8d3 10b8 	ldr.w	r1, [r3, #184]	@ 0xb8
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80089de:	461a      	mov	r2, r3
 80089e0:	4803      	ldr	r0, [pc, #12]	@ (80089f0 <_ZN13CPantallaPaso11OnMenuEventEi+0x68>)
 80089e2:	f7fb fbcd 	bl	8004180 <_ZN19CManejadorPantallas27MuestraPantallaEliminarPasoEii>
		break;
 80089e6:	bf00      	nop
}
 80089e8:	bf00      	nop
 80089ea:	3708      	adds	r7, #8
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}
 80089f0:	20000258 	.word	0x20000258

080089f4 <_ZThn172_N13CPantallaPaso11OnMenuEventEi>:
	void SetIdPaso(int id_rampa,int id_Paso);
	virtual void OnMenuEvent(int identificador);
 80089f4:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 80089f8:	f7ff bfc6 	b.w	8008988 <_ZN13CPantallaPaso11OnMenuEventEi>

080089fc <_ZN19CPantallaPasosRampaC1Ei>:
#include "string.h"
#include <RapaTemperatura/CControladorRampas.hpp>
#include <GUI/PantallaMenuBase/CPantallaMenuBase.hpp>
CControladorPasosRampa ControladorPasosRampa;

CPantallaPasosRampa::CPantallaPasosRampa(int id_Rampa):
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
CPantallaMenuBase((char*) " Menu PASOS")
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	490b      	ldr	r1, [pc, #44]	@ (8008a38 <_ZN19CPantallaPasosRampaC1Ei+0x3c>)
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fd fc9a 	bl	8006344 <_ZN17CPantallaMenuBaseC1EPc>
 8008a10:	4a0a      	ldr	r2, [pc, #40]	@ (8008a3c <_ZN19CPantallaPasosRampaC1Ei+0x40>)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	601a      	str	r2, [r3, #0]
 8008a16:	4a0a      	ldr	r2, [pc, #40]	@ (8008a40 <_ZN19CPantallaPasosRampaC1Ei+0x44>)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8008a1c:	4a09      	ldr	r2, [pc, #36]	@ (8008a44 <_ZN19CPantallaPasosRampaC1Ei+0x48>)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	// TODO Auto-generated constructor stub
	ID_Rampa=id_Rampa;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	683a      	ldr	r2, [r7, #0]
 8008a28:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3708      	adds	r7, #8
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	08014538 	.word	0x08014538
 8008a3c:	080155e0 	.word	0x080155e0
 8008a40:	08015680 	.word	0x08015680
 8008a44:	080156b4 	.word	0x080156b4

08008a48 <_ZN19CPantallaPasosRampa10SetIDRampaEi>:
void CPantallaPasosRampa::SetIDRampa(int idRampa)
{
 8008a48:	b590      	push	{r4, r7, lr}
 8008a4a:	b095      	sub	sp, #84	@ 0x54
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
	ID_Rampa=idRampa;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	683a      	ldr	r2, [r7, #0]
 8008a56:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	int numeroPaso=1;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int id_paso=0;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	64bb      	str	r3, [r7, #72]	@ 0x48
	char texto[20];
	this->BorraMenu();
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	338c      	adds	r3, #140	@ 0x8c
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4610      	mov	r0, r2
 8008a6e:	4798      	blx	r3
	CRampa rampa=ControladorRampas.DameRampa(ID_Rampa);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8008a76:	f107 0314 	add.w	r3, r7, #20
 8008a7a:	492f      	ldr	r1, [pc, #188]	@ (8008b38 <_ZN19CPantallaPasosRampa10SetIDRampaEi+0xf0>)
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f002 fa2c 	bl	800aeda <_ZN18CControladorRampas9DameRampaEi>
	this->SetTituloPantalla(rampa.Nombre);
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	3370      	adds	r3, #112	@ 0x70
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f107 0214 	add.w	r2, r7, #20
 8008a90:	3208      	adds	r2, #8
 8008a92:	4611      	mov	r1, r2
 8008a94:	4798      	blx	r3

	int npasos=ControladorPasosRampa.DameNumeroPasosRampa(ID_Rampa);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	4827      	ldr	r0, [pc, #156]	@ (8008b3c <_ZN19CPantallaPasosRampa10SetIDRampaEi+0xf4>)
 8008aa0:	f001 ff28 	bl	800a8f4 <_ZN22CControladorPasosRampa20DameNumeroPasosRampaEi>
 8008aa4:	6438      	str	r0, [r7, #64]	@ 0x40
	for(int i=0;i<npasos;i++)
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	647b      	str	r3, [r7, #68]	@ 0x44
 8008aaa:	e02a      	b.n	8008b02 <_ZN19CPantallaPasosRampa10SetIDRampaEi+0xba>
	{
		CPaso paso=		ControladorPasosRampa.DameSiguientePaso(ID_Rampa,id_paso);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8008ab2:	f107 0008 	add.w	r0, r7, #8
 8008ab6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ab8:	4920      	ldr	r1, [pc, #128]	@ (8008b3c <_ZN19CPantallaPasosRampa10SetIDRampaEi+0xf4>)
 8008aba:	f001 ff56 	bl	800a96a <_ZN22CControladorPasosRampa17DameSiguientePasoEii>
		if(paso.Ocupado==0)
 8008abe:	7b3b      	ldrb	r3, [r7, #12]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d101      	bne.n	8008ac8 <_ZN19CPantallaPasosRampa10SetIDRampaEi+0x80>
			continue;
 8008ac4:	2400      	movs	r4, #0
 8008ac6:	e013      	b.n	8008af0 <_ZN19CPantallaPasosRampa10SetIDRampaEi+0xa8>
		id_paso=paso.ID_Paso;
 8008ac8:	7bbb      	ldrb	r3, [r7, #14]
 8008aca:	64bb      	str	r3, [r7, #72]	@ 0x48
		sprintf(texto,"Paso %d",numeroPaso);
 8008acc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008ad0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008ad2:	491b      	ldr	r1, [pc, #108]	@ (8008b40 <_ZN19CPantallaPasosRampa10SetIDRampaEi+0xf8>)
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f009 fa9d 	bl	8012014 <siprintf>
		numeroPaso++;
 8008ada:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008adc:	3301      	adds	r3, #1
 8008ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
		AgregaMenuItem(texto,paso.ID_Paso);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	7bba      	ldrb	r2, [r7, #14]
 8008ae4:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7fd fcc1 	bl	8006470 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	}
 8008aee:	2401      	movs	r4, #1
 8008af0:	f107 0308 	add.w	r3, r7, #8
 8008af4:	4618      	mov	r0, r3
 8008af6:	f002 fcb7 	bl	800b468 <_ZN5CPasoD1Ev>
 8008afa:	2c01      	cmp	r4, #1
	for(int i=0;i<npasos;i++)
 8008afc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008afe:	3301      	adds	r3, #1
 8008b00:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b06:	429a      	cmp	r2, r3
 8008b08:	dbd0      	blt.n	8008aac <_ZN19CPantallaPasosRampa10SetIDRampaEi+0x64>
	AgregaMenuItem((char*)"Agregar", MENU_PASO::MENU_PASO_AGREGAR);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b10:	490c      	ldr	r1, [pc, #48]	@ (8008b44 <_ZN19CPantallaPasosRampa10SetIDRampaEi+0xfc>)
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7fd fcac 	bl	8006470 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"Salir", MENU_PASO::MENU_PASO_SALIR);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f06f 0201 	mvn.w	r2, #1
 8008b1e:	490a      	ldr	r1, [pc, #40]	@ (8008b48 <_ZN19CPantallaPasosRampa10SetIDRampaEi+0x100>)
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7fd fca5 	bl	8006470 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>

}
 8008b26:	f107 0314 	add.w	r3, r7, #20
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f002 fce2 	bl	800b4f4 <_ZN6CRampaD1Ev>
 8008b30:	3754      	adds	r7, #84	@ 0x54
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd90      	pop	{r4, r7, pc}
 8008b36:	bf00      	nop
 8008b38:	20000360 	.word	0x20000360
 8008b3c:	200001f4 	.word	0x200001f4
 8008b40:	08014544 	.word	0x08014544
 8008b44:	0801454c 	.word	0x0801454c
 8008b48:	08014554 	.word	0x08014554

08008b4c <_ZN19CPantallaPasosRampaD1Ev>:
CPantallaPasosRampa::~CPantallaPasosRampa()
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	4a09      	ldr	r2, [pc, #36]	@ (8008b7c <_ZN19CPantallaPasosRampaD1Ev+0x30>)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	601a      	str	r2, [r3, #0]
 8008b5a:	4a09      	ldr	r2, [pc, #36]	@ (8008b80 <_ZN19CPantallaPasosRampaD1Ev+0x34>)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008b60:	4a08      	ldr	r2, [pc, #32]	@ (8008b84 <_ZN19CPantallaPasosRampaD1Ev+0x38>)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	// TODO Auto-generated destructor stub
}
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7fd fc3e 	bl	80063ec <_ZN17CPantallaMenuBaseD1Ev>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4618      	mov	r0, r3
 8008b74:	3708      	adds	r7, #8
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	080155e0 	.word	0x080155e0
 8008b80:	08015680 	.word	0x08015680
 8008b84:	080156b4 	.word	0x080156b4

08008b88 <_ZThn48_N19CPantallaPasosRampaD1Ev>:
	CEstacionBase *Estacion;
	CMenuItem* item1,*item2;
	int ID_Rampa;
public:
	CPantallaPasosRampa(int id_Rampa);
	virtual ~CPantallaPasosRampa();
 8008b88:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008b8c:	f7ff bfde 	b.w	8008b4c <_ZN19CPantallaPasosRampaD1Ev>

08008b90 <_ZThn172_N19CPantallaPasosRampaD1Ev>:
 8008b90:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8008b94:	f7ff bfda 	b.w	8008b4c <_ZN19CPantallaPasosRampaD1Ev>

08008b98 <_ZN19CPantallaPasosRampaD0Ev>:
CPantallaPasosRampa::~CPantallaPasosRampa()
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
}
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f7ff ffd3 	bl	8008b4c <_ZN19CPantallaPasosRampaD1Ev>
 8008ba6:	21c4      	movs	r1, #196	@ 0xc4
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f008 fc35 	bl	8011418 <_ZdlPvj>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3708      	adds	r7, #8
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <_ZThn172_N19CPantallaPasosRampaD0Ev>:
 8008bb8:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8008bbc:	f7ff bfec 	b.w	8008b98 <_ZN19CPantallaPasosRampaD0Ev>

08008bc0 <_ZThn48_N19CPantallaPasosRampaD0Ev>:
 8008bc0:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008bc4:	f7ff bfe8 	b.w	8008b98 <_ZN19CPantallaPasosRampaD0Ev>

08008bc8 <_ZN19CPantallaPasosRampa11OnMenuEventEi>:

void CPantallaPasosRampa::OnMenuEvent(int identificador)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
	switch(identificador)
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	f113 0f02 	cmn.w	r3, #2
 8008bd8:	d004      	beq.n	8008be4 <_ZN19CPantallaPasosRampa11OnMenuEventEi+0x1c>
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008be0:	d008      	beq.n	8008bf4 <_ZN19CPantallaPasosRampa11OnMenuEventEi+0x2c>
 8008be2:	e011      	b.n	8008c08 <_ZN19CPantallaPasosRampa11OnMenuEventEi+0x40>
	{
	case MENU_PASO::MENU_PASO_SALIR:
		ManejadorPantallas.MuestraPantallaRampa(ID_Rampa);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008bea:	4619      	mov	r1, r3
 8008bec:	480d      	ldr	r0, [pc, #52]	@ (8008c24 <_ZN19CPantallaPasosRampa11OnMenuEventEi+0x5c>)
 8008bee:	f7fb f9cb 	bl	8003f88 <_ZN19CManejadorPantallas20MuestraPantallaRampaEi>
		break;
 8008bf2:	e012      	b.n	8008c1a <_ZN19CPantallaPasosRampa11OnMenuEventEi+0x52>
	case MENU_PASO::MENU_PASO_AGREGAR:
		ManejadorPantallas.MuestraPantallaEdicionPaso(ID_Rampa,-1);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8008bfe:	4619      	mov	r1, r3
 8008c00:	4808      	ldr	r0, [pc, #32]	@ (8008c24 <_ZN19CPantallaPasosRampa11OnMenuEventEi+0x5c>)
 8008c02:	f7fb fa73 	bl	80040ec <_ZN19CManejadorPantallas26MuestraPantallaEdicionPasoEii>
		break;
 8008c06:	e008      	b.n	8008c1a <_ZN19CPantallaPasosRampa11OnMenuEventEi+0x52>
	default:
		ManejadorPantallas.MuestraPantallaPaso(ID_Rampa,identificador);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008c0e:	683a      	ldr	r2, [r7, #0]
 8008c10:	4619      	mov	r1, r3
 8008c12:	4804      	ldr	r0, [pc, #16]	@ (8008c24 <_ZN19CPantallaPasosRampa11OnMenuEventEi+0x5c>)
 8008c14:	f7fb fa8f 	bl	8004136 <_ZN19CManejadorPantallas19MuestraPantallaPasoEii>
		//ManejadorPantallas.MuestraPantallaRampa(identificador);

	}

}
 8008c18:	bf00      	nop
 8008c1a:	bf00      	nop
 8008c1c:	3708      	adds	r7, #8
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	20000258 	.word	0x20000258

08008c28 <_ZThn172_N19CPantallaPasosRampa11OnMenuEventEi>:
	virtual void OnMenuEvent(int identificador);
 8008c28:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8008c2c:	f7ff bfcc 	b.w	8008bc8 <_ZN19CPantallaPasosRampa11OnMenuEventEi>

08008c30 <_Z41__static_initialization_and_destruction_0ii>:
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d107      	bne.n	8008c50 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d102      	bne.n	8008c50 <_Z41__static_initialization_and_destruction_0ii+0x20>
CControladorPasosRampa ControladorPasosRampa;
 8008c4a:	4809      	ldr	r0, [pc, #36]	@ (8008c70 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8008c4c:	f001 fbc6 	bl	800a3dc <_ZN22CControladorPasosRampaC1Ev>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d107      	bne.n	8008c66 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d102      	bne.n	8008c66 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8008c60:	4803      	ldr	r0, [pc, #12]	@ (8008c70 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8008c62:	f001 fbd3 	bl	800a40c <_ZN22CControladorPasosRampaD1Ev>
}
 8008c66:	bf00      	nop
 8008c68:	3708      	adds	r7, #8
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
 8008c6e:	bf00      	nop
 8008c70:	200001f4 	.word	0x200001f4

08008c74 <_GLOBAL__sub_I_ControladorPasosRampa>:
 8008c74:	b580      	push	{r7, lr}
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8008c7c:	2001      	movs	r0, #1
 8008c7e:	f7ff ffd7 	bl	8008c30 <_Z41__static_initialization_and_destruction_0ii>
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <_GLOBAL__sub_D_ControladorPasosRampa>:
 8008c84:	b580      	push	{r7, lr}
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	f7ff ffcf 	bl	8008c30 <_Z41__static_initialization_and_destruction_0ii>
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <_ZN14CPantallaRampaC1Ev>:
#include <RapaTemperatura/CControladorRampas.hpp>
#include "GUI/Menu/CMenuItem.hpp"
#include <GUI/PantallaMenuBase/CPantallaMenuBase.hpp>
#include <GUI/ManejadorPantallas/CManejadorPantallas.hpp>

CPantallaRampa::CPantallaRampa():
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
	CPantallaMenuBase((char*) " Rampa")
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	4918      	ldr	r1, [pc, #96]	@ (8008d00 <_ZN14CPantallaRampaC1Ev+0x6c>)
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f7fd fb4f 	bl	8006344 <_ZN17CPantallaMenuBaseC1EPc>
 8008ca6:	4a17      	ldr	r2, [pc, #92]	@ (8008d04 <_ZN14CPantallaRampaC1Ev+0x70>)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	601a      	str	r2, [r3, #0]
 8008cac:	4a16      	ldr	r2, [pc, #88]	@ (8008d08 <_ZN14CPantallaRampaC1Ev+0x74>)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	631a      	str	r2, [r3, #48]	@ 0x30
 8008cb2:	4a16      	ldr	r2, [pc, #88]	@ (8008d0c <_ZN14CPantallaRampaC1Ev+0x78>)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	// TODO Auto-generated constructor stub
	AgregaMenuItem((char*)"Ejecutar", MENU_PANTALLA_RAMPA::PANTALLA_RAMPA_EJECUTAR);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	4914      	ldr	r1, [pc, #80]	@ (8008d10 <_ZN14CPantallaRampaC1Ev+0x7c>)
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7fd fbd5 	bl	8006470 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"Modificar",MENU_PANTALLA_RAMPA::PANTALLA_RAMPA_MODIFICAR);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2201      	movs	r2, #1
 8008cca:	4912      	ldr	r1, [pc, #72]	@ (8008d14 <_ZN14CPantallaRampaC1Ev+0x80>)
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7fd fbcf 	bl	8006470 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"EDITAR PASOS",MENU_PANTALLA_RAMPA::PANTALLA_RAMPA_PASOS);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2204      	movs	r2, #4
 8008cd6:	4910      	ldr	r1, [pc, #64]	@ (8008d18 <_ZN14CPantallaRampaC1Ev+0x84>)
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7fd fbc9 	bl	8006470 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"Eliminar", MENU_PANTALLA_RAMPA::PANTALLA_RAMPA_ELIMINAR);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2202      	movs	r2, #2
 8008ce2:	490e      	ldr	r1, [pc, #56]	@ (8008d1c <_ZN14CPantallaRampaC1Ev+0x88>)
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f7fd fbc3 	bl	8006470 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>
	AgregaMenuItem((char*)"Salir", MENU_PANTALLA_RAMPA::PANTALLA_RAMPA_SALIR);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2203      	movs	r2, #3
 8008cee:	490c      	ldr	r1, [pc, #48]	@ (8008d20 <_ZN14CPantallaRampaC1Ev+0x8c>)
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f7fd fbbd 	bl	8006470 <_ZN17CPantallaMenuBase14AgregaMenuItemEPci>

}
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3708      	adds	r7, #8
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	0801455c 	.word	0x0801455c
 8008d04:	080156c8 	.word	0x080156c8
 8008d08:	08015764 	.word	0x08015764
 8008d0c:	08015798 	.word	0x08015798
 8008d10:	08014564 	.word	0x08014564
 8008d14:	08014570 	.word	0x08014570
 8008d18:	0801457c 	.word	0x0801457c
 8008d1c:	0801458c 	.word	0x0801458c
 8008d20:	08014598 	.word	0x08014598

08008d24 <_ZN14CPantallaRampaD1Ev>:

CPantallaRampa::~CPantallaRampa()
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	4a09      	ldr	r2, [pc, #36]	@ (8008d54 <_ZN14CPantallaRampaD1Ev+0x30>)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	601a      	str	r2, [r3, #0]
 8008d32:	4a09      	ldr	r2, [pc, #36]	@ (8008d58 <_ZN14CPantallaRampaD1Ev+0x34>)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	631a      	str	r2, [r3, #48]	@ 0x30
 8008d38:	4a08      	ldr	r2, [pc, #32]	@ (8008d5c <_ZN14CPantallaRampaD1Ev+0x38>)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	// TODO Auto-generated destructor stub
}
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4618      	mov	r0, r3
 8008d44:	f7fd fb52 	bl	80063ec <_ZN17CPantallaMenuBaseD1Ev>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3708      	adds	r7, #8
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	080156c8 	.word	0x080156c8
 8008d58:	08015764 	.word	0x08015764
 8008d5c:	08015798 	.word	0x08015798

08008d60 <_ZThn48_N14CPantallaRampaD1Ev>:
{
private:
	int ID_Rampa;
public:
	CPantallaRampa();
	virtual ~CPantallaRampa();
 8008d60:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008d64:	f7ff bfde 	b.w	8008d24 <_ZN14CPantallaRampaD1Ev>

08008d68 <_ZThn172_N14CPantallaRampaD1Ev>:
 8008d68:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8008d6c:	f7ff bfda 	b.w	8008d24 <_ZN14CPantallaRampaD1Ev>

08008d70 <_ZN14CPantallaRampaD0Ev>:
CPantallaRampa::~CPantallaRampa()
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
}
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f7ff ffd3 	bl	8008d24 <_ZN14CPantallaRampaD1Ev>
 8008d7e:	21b8      	movs	r1, #184	@ 0xb8
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f008 fb49 	bl	8011418 <_ZdlPvj>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3708      	adds	r7, #8
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <_ZThn172_N14CPantallaRampaD0Ev>:
 8008d90:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8008d94:	f7ff bfec 	b.w	8008d70 <_ZN14CPantallaRampaD0Ev>

08008d98 <_ZThn48_N14CPantallaRampaD0Ev>:
 8008d98:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8008d9c:	f7ff bfe8 	b.w	8008d70 <_ZN14CPantallaRampaD0Ev>

08008da0 <_ZN14CPantallaRampa14SetNumeroRampaEi>:

void CPantallaRampa::SetNumeroRampa(int id_Rampa)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b088      	sub	sp, #32
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
	ID_Rampa=id_Rampa;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	683a      	ldr	r2, [r7, #0]
 8008dae:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	CRampa rampa=ControladorRampas.DameRampa(ID_Rampa);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8008db8:	f107 0308 	add.w	r3, r7, #8
 8008dbc:	490a      	ldr	r1, [pc, #40]	@ (8008de8 <_ZN14CPantallaRampa14SetNumeroRampaEi+0x48>)
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f002 f88b 	bl	800aeda <_ZN18CControladorRampas9DameRampaEi>
	this->SetTituloPantalla(rampa.Nombre);
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	3370      	adds	r3, #112	@ 0x70
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f107 0208 	add.w	r2, r7, #8
 8008dd2:	3208      	adds	r2, #8
 8008dd4:	4611      	mov	r1, r2
 8008dd6:	4798      	blx	r3
}
 8008dd8:	f107 0308 	add.w	r3, r7, #8
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f002 fb89 	bl	800b4f4 <_ZN6CRampaD1Ev>
 8008de2:	3720      	adds	r7, #32
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	20000360 	.word	0x20000360

08008dec <_ZN14CPantallaRampa11OnMenuEventEi>:
void CPantallaRampa::OnMenuEvent(int identificador)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]

	switch(identificador)
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	2b04      	cmp	r3, #4
 8008dfa:	d831      	bhi.n	8008e60 <_ZN14CPantallaRampa11OnMenuEventEi+0x74>
 8008dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8008e04 <_ZN14CPantallaRampa11OnMenuEventEi+0x18>)
 8008dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e02:	bf00      	nop
 8008e04:	08008e51 	.word	0x08008e51
 8008e08:	08008e21 	.word	0x08008e21
 8008e0c:	08008e31 	.word	0x08008e31
 8008e10:	08008e19 	.word	0x08008e19
 8008e14:	08008e41 	.word	0x08008e41
	{
	case MENU_PANTALLA_RAMPA::PANTALLA_RAMPA_SALIR:
		ManejadorPantallas.MuestraMenuRampa();
 8008e18:	4813      	ldr	r0, [pc, #76]	@ (8008e68 <_ZN14CPantallaRampa11OnMenuEventEi+0x7c>)
 8008e1a:	f7fa ffb1 	bl	8003d80 <_ZN19CManejadorPantallas16MuestraMenuRampaEv>
		break;
 8008e1e:	e01f      	b.n	8008e60 <_ZN14CPantallaRampa11OnMenuEventEi+0x74>
	case MENU_PANTALLA_RAMPA::PANTALLA_RAMPA_MODIFICAR:
		ManejadorPantallas.MuestraPantallaEditorNombre(ID_Rampa);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008e26:	4619      	mov	r1, r3
 8008e28:	480f      	ldr	r0, [pc, #60]	@ (8008e68 <_ZN14CPantallaRampa11OnMenuEventEi+0x7c>)
 8008e2a:	f7fb f8ec 	bl	8004006 <_ZN19CManejadorPantallas27MuestraPantallaEditorNombreEi>
		break;
 8008e2e:	e017      	b.n	8008e60 <_ZN14CPantallaRampa11OnMenuEventEi+0x74>
	case MENU_PANTALLA_RAMPA::PANTALLA_RAMPA_ELIMINAR:
		ManejadorPantallas.MuestraPantallaEliminarRampa(ID_Rampa);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008e36:	4619      	mov	r1, r3
 8008e38:	480b      	ldr	r0, [pc, #44]	@ (8008e68 <_ZN14CPantallaRampa11OnMenuEventEi+0x7c>)
 8008e3a:	f7fb f930 	bl	800409e <_ZN19CManejadorPantallas28MuestraPantallaEliminarRampaEi>
		break;
 8008e3e:	e00f      	b.n	8008e60 <_ZN14CPantallaRampa11OnMenuEventEi+0x74>
	case MENU_PANTALLA_RAMPA::PANTALLA_RAMPA_PASOS:
		ManejadorPantallas.AsignaPantallaPasosRampa(ID_Rampa);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008e46:	4619      	mov	r1, r3
 8008e48:	4807      	ldr	r0, [pc, #28]	@ (8008e68 <_ZN14CPantallaRampa11OnMenuEventEi+0x7c>)
 8008e4a:	f7fb f900 	bl	800404e <_ZN19CManejadorPantallas24AsignaPantallaPasosRampaEi>
		break;
 8008e4e:	e007      	b.n	8008e60 <_ZN14CPantallaRampa11OnMenuEventEi+0x74>
	case MENU_PANTALLA_RAMPA::PANTALLA_RAMPA_EJECUTAR:
		ManejadorPantallas.MuestraPantallaEjecucionRampa(ID_Rampa);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008e56:	4619      	mov	r1, r3
 8008e58:	4803      	ldr	r0, [pc, #12]	@ (8008e68 <_ZN14CPantallaRampa11OnMenuEventEi+0x7c>)
 8008e5a:	f7fb f9b9 	bl	80041d0 <_ZN19CManejadorPantallas29MuestraPantallaEjecucionRampaEi>
		break;
 8008e5e:	bf00      	nop
	}

}
 8008e60:	bf00      	nop
 8008e62:	3708      	adds	r7, #8
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	20000258 	.word	0x20000258

08008e6c <_ZThn172_N14CPantallaRampa11OnMenuEventEi>:
	void SetNumeroRampa(int id_Rampa);
	virtual void OnMenuEvent(int identificador);
 8008e6c:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8008e70:	f7ff bfbc 	b.w	8008dec <_ZN14CPantallaRampa11OnMenuEventEi>

08008e74 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt>:
}

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1,
		uint16_t Y1, uint16_t Colour)
{
 8008e74:	b590      	push	{r4, r7, lr}
 8008e76:	b087      	sub	sp, #28
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	4604      	mov	r4, r0
 8008e7c:	4608      	mov	r0, r1
 8008e7e:	4611      	mov	r1, r2
 8008e80:	461a      	mov	r2, r3
 8008e82:	4623      	mov	r3, r4
 8008e84:	80fb      	strh	r3, [r7, #6]
 8008e86:	4603      	mov	r3, r0
 8008e88:	80bb      	strh	r3, [r7, #4]
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	807b      	strh	r3, [r7, #2]
 8008e8e:	4613      	mov	r3, r2
 8008e90:	803b      	strh	r3, [r7, #0]
	uint16_t X_length = 0;
 8008e92:	2300      	movs	r3, #0
 8008e94:	82fb      	strh	r3, [r7, #22]
	uint16_t Y_length = 0;
 8008e96:	2300      	movs	r3, #0
 8008e98:	82bb      	strh	r3, [r7, #20]
	uint8_t Negative_X = 0;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	74fb      	strb	r3, [r7, #19]
	uint8_t Negative_Y = 0;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	74bb      	strb	r3, [r7, #18]
	float Calc_Negative = 0;
 8008ea2:	f04f 0300 	mov.w	r3, #0
 8008ea6:	60fb      	str	r3, [r7, #12]

	Calc_Negative = X1 - X0;
 8008ea8:	887a      	ldrh	r2, [r7, #2]
 8008eaa:	88fb      	ldrh	r3, [r7, #6]
 8008eac:	1ad3      	subs	r3, r2, r3
 8008eae:	ee07 3a90 	vmov	s15, r3
 8008eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008eb6:	edc7 7a03 	vstr	s15, [r7, #12]
	if (Calc_Negative < 0)
 8008eba:	edd7 7a03 	vldr	s15, [r7, #12]
 8008ebe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ec6:	d501      	bpl.n	8008ecc <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x58>
		Negative_X = 1;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8008ecc:	f04f 0300 	mov.w	r3, #0
 8008ed0:	60fb      	str	r3, [r7, #12]

	Calc_Negative = Y1 - Y0;
 8008ed2:	883a      	ldrh	r2, [r7, #0]
 8008ed4:	88bb      	ldrh	r3, [r7, #4]
 8008ed6:	1ad3      	subs	r3, r2, r3
 8008ed8:	ee07 3a90 	vmov	s15, r3
 8008edc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ee0:	edc7 7a03 	vstr	s15, [r7, #12]
	if (Calc_Negative < 0)
 8008ee4:	edd7 7a03 	vldr	s15, [r7, #12]
 8008ee8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ef0:	d501      	bpl.n	8008ef6 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x82>
		Negative_Y = 1;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if (!Negative_X)
 8008ef6:	7cfb      	ldrb	r3, [r7, #19]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d104      	bne.n	8008f06 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x92>
	{
		X_length = X1 - X0;
 8008efc:	887a      	ldrh	r2, [r7, #2]
 8008efe:	88fb      	ldrh	r3, [r7, #6]
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	82fb      	strh	r3, [r7, #22]
 8008f04:	e003      	b.n	8008f0e <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x9a>
	}
	else
	{
		X_length = X0 - X1;
 8008f06:	88fa      	ldrh	r2, [r7, #6]
 8008f08:	887b      	ldrh	r3, [r7, #2]
 8008f0a:	1ad3      	subs	r3, r2, r3
 8008f0c:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 8008f0e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008f10:	8afa      	ldrh	r2, [r7, #22]
 8008f12:	88b9      	ldrh	r1, [r7, #4]
 8008f14:	88f8      	ldrh	r0, [r7, #6]
 8008f16:	f000 fd73 	bl	8009a00 <_Z28ILI9341_Draw_Horizontal_Linetttt>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 8008f1a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008f1c:	8afa      	ldrh	r2, [r7, #22]
 8008f1e:	8839      	ldrh	r1, [r7, #0]
 8008f20:	88f8      	ldrh	r0, [r7, #6]
 8008f22:	f000 fd6d 	bl	8009a00 <_Z28ILI9341_Draw_Horizontal_Linetttt>

	//DRAW VERTICAL!
	if (!Negative_Y)
 8008f26:	7cbb      	ldrb	r3, [r7, #18]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d104      	bne.n	8008f36 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xc2>
	{
		Y_length = Y1 - Y0;
 8008f2c:	883a      	ldrh	r2, [r7, #0]
 8008f2e:	88bb      	ldrh	r3, [r7, #4]
 8008f30:	1ad3      	subs	r3, r2, r3
 8008f32:	82bb      	strh	r3, [r7, #20]
 8008f34:	e003      	b.n	8008f3e <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xca>
	}
	else
	{
		Y_length = Y0 - Y1;
 8008f36:	88ba      	ldrh	r2, [r7, #4]
 8008f38:	883b      	ldrh	r3, [r7, #0]
 8008f3a:	1ad3      	subs	r3, r2, r3
 8008f3c:	82bb      	strh	r3, [r7, #20]
	}
	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 8008f3e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008f40:	8aba      	ldrh	r2, [r7, #20]
 8008f42:	88b9      	ldrh	r1, [r7, #4]
 8008f44:	88f8      	ldrh	r0, [r7, #6]
 8008f46:	f000 fda9 	bl	8009a9c <_Z26ILI9341_Draw_Vertical_Linetttt>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 8008f4a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008f4c:	8aba      	ldrh	r2, [r7, #20]
 8008f4e:	88b9      	ldrh	r1, [r7, #4]
 8008f50:	8878      	ldrh	r0, [r7, #2]
 8008f52:	f000 fda3 	bl	8009a9c <_Z26ILI9341_Draw_Vertical_Linetttt>

	if ((X_length > 0) || (Y_length > 0))
 8008f56:	8afb      	ldrh	r3, [r7, #22]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d102      	bne.n	8008f62 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xee>
 8008f5c:	8abb      	ldrh	r3, [r7, #20]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d005      	beq.n	8008f6e <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xfa>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 8008f62:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8008f64:	8839      	ldrh	r1, [r7, #0]
 8008f66:	887b      	ldrh	r3, [r7, #2]
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f000 fc13 	bl	8009794 <_Z18ILI9341_Draw_Pixelttt>
	}

}
 8008f6e:	bf00      	nop
 8008f70:	371c      	adds	r7, #28
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd90      	pop	{r4, r7, pc}

08008f76 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt>:

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1,
		uint16_t Y1, uint16_t Colour)
{
 8008f76:	b590      	push	{r4, r7, lr}
 8008f78:	b089      	sub	sp, #36	@ 0x24
 8008f7a:	af02      	add	r7, sp, #8
 8008f7c:	4604      	mov	r4, r0
 8008f7e:	4608      	mov	r0, r1
 8008f80:	4611      	mov	r1, r2
 8008f82:	461a      	mov	r2, r3
 8008f84:	4623      	mov	r3, r4
 8008f86:	80fb      	strh	r3, [r7, #6]
 8008f88:	4603      	mov	r3, r0
 8008f8a:	80bb      	strh	r3, [r7, #4]
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	807b      	strh	r3, [r7, #2]
 8008f90:	4613      	mov	r3, r2
 8008f92:	803b      	strh	r3, [r7, #0]
	uint16_t X_length = 0;
 8008f94:	2300      	movs	r3, #0
 8008f96:	82fb      	strh	r3, [r7, #22]
	uint16_t Y_length = 0;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	82bb      	strh	r3, [r7, #20]
	uint8_t Negative_X = 0;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	74fb      	strb	r3, [r7, #19]
	uint8_t Negative_Y = 0;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	74bb      	strb	r3, [r7, #18]
	int32_t Calc_Negative = 0;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	60bb      	str	r3, [r7, #8]

	uint16_t X0_true = 0;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 8008fac:	2300      	movs	r3, #0
 8008fae:	81fb      	strh	r3, [r7, #14]

	Calc_Negative = X1 - X0;
 8008fb0:	887a      	ldrh	r2, [r7, #2]
 8008fb2:	88fb      	ldrh	r3, [r7, #6]
 8008fb4:	1ad3      	subs	r3, r2, r3
 8008fb6:	60bb      	str	r3, [r7, #8]
	if (Calc_Negative < 0)
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	da01      	bge.n	8008fc2 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x4c>
		Negative_X = 1;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	60bb      	str	r3, [r7, #8]

	Calc_Negative = Y1 - Y0;
 8008fc6:	883a      	ldrh	r2, [r7, #0]
 8008fc8:	88bb      	ldrh	r3, [r7, #4]
 8008fca:	1ad3      	subs	r3, r2, r3
 8008fcc:	60bb      	str	r3, [r7, #8]
	if (Calc_Negative < 0)
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	da01      	bge.n	8008fd8 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x62>
		Negative_Y = 1;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if (!Negative_X)
 8008fd8:	7cfb      	ldrb	r3, [r7, #19]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d106      	bne.n	8008fec <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x76>
	{
		X_length = X1 - X0;
 8008fde:	887a      	ldrh	r2, [r7, #2]
 8008fe0:	88fb      	ldrh	r3, [r7, #6]
 8008fe2:	1ad3      	subs	r3, r2, r3
 8008fe4:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8008fe6:	88fb      	ldrh	r3, [r7, #6]
 8008fe8:	823b      	strh	r3, [r7, #16]
 8008fea:	e005      	b.n	8008ff8 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8008fec:	88fa      	ldrh	r2, [r7, #6]
 8008fee:	887b      	ldrh	r3, [r7, #2]
 8008ff0:	1ad3      	subs	r3, r2, r3
 8008ff2:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8008ff4:	887b      	ldrh	r3, [r7, #2]
 8008ff6:	823b      	strh	r3, [r7, #16]
	}

	//DRAW VERTICAL!
	if (!Negative_Y)
 8008ff8:	7cbb      	ldrb	r3, [r7, #18]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d106      	bne.n	800900c <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x96>
	{
		Y_length = Y1 - Y0;
 8008ffe:	883a      	ldrh	r2, [r7, #0]
 8009000:	88bb      	ldrh	r3, [r7, #4]
 8009002:	1ad3      	subs	r3, r2, r3
 8009004:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;
 8009006:	88bb      	ldrh	r3, [r7, #4]
 8009008:	81fb      	strh	r3, [r7, #14]
 800900a:	e005      	b.n	8009018 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 800900c:	88ba      	ldrh	r2, [r7, #4]
 800900e:	883b      	ldrh	r3, [r7, #0]
 8009010:	1ad3      	subs	r3, r2, r3
 8009012:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;
 8009014:	883b      	ldrh	r3, [r7, #0]
 8009016:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);
 8009018:	8abc      	ldrh	r4, [r7, #20]
 800901a:	8afa      	ldrh	r2, [r7, #22]
 800901c:	89f9      	ldrh	r1, [r7, #14]
 800901e:	8a38      	ldrh	r0, [r7, #16]
 8009020:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009022:	9300      	str	r3, [sp, #0]
 8009024:	4623      	mov	r3, r4
 8009026:	f000 fc81 	bl	800992c <_Z22ILI9341_Draw_Rectanglettttt>
}
 800902a:	bf00      	nop
 800902c:	371c      	adds	r7, #28
 800902e:	46bd      	mov	sp, r7
 8009030:	bd90      	pop	{r4, r7, pc}
	...

08009034 <_Z17ILI9341_Draw_Charciittt>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, int X, int Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour)
{
 8009034:	b590      	push	{r4, r7, lr}
 8009036:	b08b      	sub	sp, #44	@ 0x2c
 8009038:	af02      	add	r7, sp, #8
 800903a:	60b9      	str	r1, [r7, #8]
 800903c:	607a      	str	r2, [r7, #4]
 800903e:	461a      	mov	r2, r3
 8009040:	4603      	mov	r3, r0
 8009042:	73fb      	strb	r3, [r7, #15]
 8009044:	4613      	mov	r3, r2
 8009046:	81bb      	strh	r3, [r7, #12]
	uint8_t function_char;
	uint8_t i, j;

	function_char = Character;
 8009048:	7bfb      	ldrb	r3, [r7, #15]
 800904a:	77fb      	strb	r3, [r7, #31]

	if (function_char < ' ')
 800904c:	7ffb      	ldrb	r3, [r7, #31]
 800904e:	2b1f      	cmp	r3, #31
 8009050:	d802      	bhi.n	8009058 <_Z17ILI9341_Draw_Charciittt+0x24>
	{
		Character = 0;
 8009052:	2300      	movs	r3, #0
 8009054:	73fb      	strb	r3, [r7, #15]
 8009056:	e002      	b.n	800905e <_Z17ILI9341_Draw_Charciittt+0x2a>
	}
	else
	{
		function_char -= 32;
 8009058:	7ffb      	ldrb	r3, [r7, #31]
 800905a:	3b20      	subs	r3, #32
 800905c:	77fb      	strb	r3, [r7, #31]
	}

	char temp[CHAR_WIDTH];
	for (uint8_t k = 0; k < CHAR_WIDTH; k++)
 800905e:	2300      	movs	r3, #0
 8009060:	773b      	strb	r3, [r7, #28]
 8009062:	e012      	b.n	800908a <_Z17ILI9341_Draw_Charciittt+0x56>
	{
		temp[k] = font[function_char][k];
 8009064:	7ffa      	ldrb	r2, [r7, #31]
 8009066:	7f38      	ldrb	r0, [r7, #28]
 8009068:	7f39      	ldrb	r1, [r7, #28]
 800906a:	4c3c      	ldr	r4, [pc, #240]	@ (800915c <_Z17ILI9341_Draw_Charciittt+0x128>)
 800906c:	4613      	mov	r3, r2
 800906e:	005b      	lsls	r3, r3, #1
 8009070:	4413      	add	r3, r2
 8009072:	005b      	lsls	r3, r3, #1
 8009074:	4423      	add	r3, r4
 8009076:	4403      	add	r3, r0
 8009078:	781a      	ldrb	r2, [r3, #0]
 800907a:	f101 0320 	add.w	r3, r1, #32
 800907e:	443b      	add	r3, r7
 8009080:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t k = 0; k < CHAR_WIDTH; k++)
 8009084:	7f3b      	ldrb	r3, [r7, #28]
 8009086:	3301      	adds	r3, #1
 8009088:	773b      	strb	r3, [r7, #28]
 800908a:	7f3b      	ldrb	r3, [r7, #28]
 800908c:	2b05      	cmp	r3, #5
 800908e:	d9e9      	bls.n	8009064 <_Z17ILI9341_Draw_Charciittt+0x30>
	}

	// Draw pixels
	ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH * Size, CHAR_HEIGHT * Size,
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	b298      	uxth	r0, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	b299      	uxth	r1, r3
 8009098:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800909a:	461a      	mov	r2, r3
 800909c:	0052      	lsls	r2, r2, #1
 800909e:	4413      	add	r3, r2
 80090a0:	005b      	lsls	r3, r3, #1
 80090a2:	b29a      	uxth	r2, r3
 80090a4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80090a6:	00db      	lsls	r3, r3, #3
 80090a8:	b29c      	uxth	r4, r3
 80090aa:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80090ac:	9300      	str	r3, [sp, #0]
 80090ae:	4623      	mov	r3, r4
 80090b0:	f000 fc3c 	bl	800992c <_Z22ILI9341_Draw_Rectanglettttt>
			Background_Colour);
	for (j = 0; j < CHAR_WIDTH; j++)
 80090b4:	2300      	movs	r3, #0
 80090b6:	777b      	strb	r3, [r7, #29]
 80090b8:	e047      	b.n	800914a <_Z17ILI9341_Draw_Charciittt+0x116>
	{
		for (i = 0; i < CHAR_HEIGHT; i++)
 80090ba:	2300      	movs	r3, #0
 80090bc:	77bb      	strb	r3, [r7, #30]
 80090be:	e03e      	b.n	800913e <_Z17ILI9341_Draw_Charciittt+0x10a>
		{
			if (temp[j] & (1 << i))
 80090c0:	7f7b      	ldrb	r3, [r7, #29]
 80090c2:	3320      	adds	r3, #32
 80090c4:	443b      	add	r3, r7
 80090c6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80090ca:	461a      	mov	r2, r3
 80090cc:	7fbb      	ldrb	r3, [r7, #30]
 80090ce:	fa42 f303 	asr.w	r3, r2, r3
 80090d2:	f003 0301 	and.w	r3, r3, #1
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d02e      	beq.n	8009138 <_Z17ILI9341_Draw_Charciittt+0x104>
			{
				if (Size == 1)
 80090da:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d110      	bne.n	8009102 <_Z17ILI9341_Draw_Charciittt+0xce>
				{
					ILI9341_Draw_Pixel(X + j, Y + i, Colour);
 80090e0:	7f7b      	ldrb	r3, [r7, #29]
 80090e2:	b29a      	uxth	r2, r3
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	4413      	add	r3, r2
 80090ea:	b298      	uxth	r0, r3
 80090ec:	7fbb      	ldrb	r3, [r7, #30]
 80090ee:	b29a      	uxth	r2, r3
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	4413      	add	r3, r2
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	89ba      	ldrh	r2, [r7, #12]
 80090fa:	4619      	mov	r1, r3
 80090fc:	f000 fb4a 	bl	8009794 <_Z18ILI9341_Draw_Pixelttt>
 8009100:	e01a      	b.n	8009138 <_Z17ILI9341_Draw_Charciittt+0x104>
				}
				else
				{
					ILI9341_Draw_Rectangle(X + (j * Size), Y + (i * Size), Size,
 8009102:	7f7b      	ldrb	r3, [r7, #29]
 8009104:	b29b      	uxth	r3, r3
 8009106:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8009108:	fb12 f303 	smulbb	r3, r2, r3
 800910c:	b29a      	uxth	r2, r3
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	b29b      	uxth	r3, r3
 8009112:	4413      	add	r3, r2
 8009114:	b298      	uxth	r0, r3
 8009116:	7fbb      	ldrb	r3, [r7, #30]
 8009118:	b29b      	uxth	r3, r3
 800911a:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800911c:	fb12 f303 	smulbb	r3, r2, r3
 8009120:	b29a      	uxth	r2, r3
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	b29b      	uxth	r3, r3
 8009126:	4413      	add	r3, r2
 8009128:	b299      	uxth	r1, r3
 800912a:	8e3c      	ldrh	r4, [r7, #48]	@ 0x30
 800912c:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800912e:	89bb      	ldrh	r3, [r7, #12]
 8009130:	9300      	str	r3, [sp, #0]
 8009132:	4623      	mov	r3, r4
 8009134:	f000 fbfa 	bl	800992c <_Z22ILI9341_Draw_Rectanglettttt>
		for (i = 0; i < CHAR_HEIGHT; i++)
 8009138:	7fbb      	ldrb	r3, [r7, #30]
 800913a:	3301      	adds	r3, #1
 800913c:	77bb      	strb	r3, [r7, #30]
 800913e:	7fbb      	ldrb	r3, [r7, #30]
 8009140:	2b07      	cmp	r3, #7
 8009142:	d9bd      	bls.n	80090c0 <_Z17ILI9341_Draw_Charciittt+0x8c>
	for (j = 0; j < CHAR_WIDTH; j++)
 8009144:	7f7b      	ldrb	r3, [r7, #29]
 8009146:	3301      	adds	r3, #1
 8009148:	777b      	strb	r3, [r7, #29]
 800914a:	7f7b      	ldrb	r3, [r7, #29]
 800914c:	2b05      	cmp	r3, #5
 800914e:	d9b4      	bls.n	80090ba <_Z17ILI9341_Draw_Charciittt+0x86>
							Size, Colour);
				}
			}
		}
	}
}
 8009150:	bf00      	nop
 8009152:	bf00      	nop
 8009154:	3724      	adds	r7, #36	@ 0x24
 8009156:	46bd      	mov	sp, r7
 8009158:	bd90      	pop	{r4, r7, pc}
 800915a:	bf00      	nop
 800915c:	080157a4 	.word	0x080157a4

08009160 <_Z17ILI9341_Draw_TextPKciittt>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char *Text, int X, int Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b086      	sub	sp, #24
 8009164:	af02      	add	r7, sp, #8
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	60b9      	str	r1, [r7, #8]
 800916a:	607a      	str	r2, [r7, #4]
 800916c:	807b      	strh	r3, [r7, #2]
	while (*Text)
 800916e:	e016      	b.n	800919e <_Z17ILI9341_Draw_TextPKciittt+0x3e>
	{
		ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	1c5a      	adds	r2, r3, #1
 8009174:	60fa      	str	r2, [r7, #12]
 8009176:	7818      	ldrb	r0, [r3, #0]
 8009178:	887a      	ldrh	r2, [r7, #2]
 800917a:	8bbb      	ldrh	r3, [r7, #28]
 800917c:	9301      	str	r3, [sp, #4]
 800917e:	8b3b      	ldrh	r3, [r7, #24]
 8009180:	9300      	str	r3, [sp, #0]
 8009182:	4613      	mov	r3, r2
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	68b9      	ldr	r1, [r7, #8]
 8009188:	f7ff ff54 	bl	8009034 <_Z17ILI9341_Draw_Charciittt>
		X += CHAR_WIDTH * Size;
 800918c:	8b3a      	ldrh	r2, [r7, #24]
 800918e:	4613      	mov	r3, r2
 8009190:	005b      	lsls	r3, r3, #1
 8009192:	4413      	add	r3, r2
 8009194:	005b      	lsls	r3, r3, #1
 8009196:	461a      	mov	r2, r3
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	4413      	add	r3, r2
 800919c:	60bb      	str	r3, [r7, #8]
	while (*Text)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d1e4      	bne.n	8009170 <_Z17ILI9341_Draw_TextPKciittt+0x10>
	}
}
 80091a6:	bf00      	nop
 80091a8:	bf00      	nop
 80091aa:	3710      	adds	r7, #16
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <_Z16ILI9341_SPI_Initv>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	af00      	add	r7, sp, #0
	SPI1_Init();													//SPI INIT
 80091b4:	f003 fc2a 	bl	800ca0c <SPI1_Init>
	MX_GPIO_Init();													//GPIO INIT
 80091b8:	f002 ffa6 	bl	800c108 <MX_GPIO_Init>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 80091bc:	2200      	movs	r2, #0
 80091be:	2101      	movs	r1, #1
 80091c0:	4802      	ldr	r0, [pc, #8]	@ (80091cc <_Z16ILI9341_SPI_Initv+0x1c>)
 80091c2:	f004 fe0d 	bl	800dde0 <HAL_GPIO_WritePin>
}
 80091c6:	bf00      	nop
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	40020400 	.word	0x40020400

080091d0 <_Z16ILI9341_SPI_Sendh>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	4603      	mov	r3, r0
 80091d8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80091da:	1df9      	adds	r1, r7, #7
 80091dc:	2301      	movs	r3, #1
 80091de:	2201      	movs	r2, #1
 80091e0:	4803      	ldr	r0, [pc, #12]	@ (80091f0 <_Z16ILI9341_SPI_Sendh+0x20>)
 80091e2:	f006 fb34 	bl	800f84e <HAL_SPI_Transmit>
}
 80091e6:	bf00      	nop
 80091e8:	3708      	adds	r7, #8
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop
 80091f0:	2000055c 	.word	0x2000055c

080091f4 <_Z21ILI9341_Write_Commandh>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	4603      	mov	r3, r0
 80091fc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80091fe:	2200      	movs	r2, #0
 8009200:	2101      	movs	r1, #1
 8009202:	480a      	ldr	r0, [pc, #40]	@ (800922c <_Z21ILI9341_Write_Commandh+0x38>)
 8009204:	f004 fdec 	bl	800dde0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8009208:	2200      	movs	r2, #0
 800920a:	2102      	movs	r1, #2
 800920c:	4807      	ldr	r0, [pc, #28]	@ (800922c <_Z21ILI9341_Write_Commandh+0x38>)
 800920e:	f004 fde7 	bl	800dde0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Command);
 8009212:	79fb      	ldrb	r3, [r7, #7]
 8009214:	4618      	mov	r0, r3
 8009216:	f7ff ffdb 	bl	80091d0 <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800921a:	2201      	movs	r2, #1
 800921c:	2101      	movs	r1, #1
 800921e:	4803      	ldr	r0, [pc, #12]	@ (800922c <_Z21ILI9341_Write_Commandh+0x38>)
 8009220:	f004 fdde 	bl	800dde0 <HAL_GPIO_WritePin>
}
 8009224:	bf00      	nop
 8009226:	3708      	adds	r7, #8
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}
 800922c:	40020400 	.word	0x40020400

08009230 <_Z18ILI9341_Write_Datah>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	4603      	mov	r3, r0
 8009238:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800923a:	2201      	movs	r2, #1
 800923c:	2102      	movs	r1, #2
 800923e:	480a      	ldr	r0, [pc, #40]	@ (8009268 <_Z18ILI9341_Write_Datah+0x38>)
 8009240:	f004 fdce 	bl	800dde0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8009244:	2200      	movs	r2, #0
 8009246:	2101      	movs	r1, #1
 8009248:	4807      	ldr	r0, [pc, #28]	@ (8009268 <_Z18ILI9341_Write_Datah+0x38>)
 800924a:	f004 fdc9 	bl	800dde0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Data);
 800924e:	79fb      	ldrb	r3, [r7, #7]
 8009250:	4618      	mov	r0, r3
 8009252:	f7ff ffbd 	bl	80091d0 <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8009256:	2201      	movs	r2, #1
 8009258:	2101      	movs	r1, #1
 800925a:	4803      	ldr	r0, [pc, #12]	@ (8009268 <_Z18ILI9341_Write_Datah+0x38>)
 800925c:	f004 fdc0 	bl	800dde0 <HAL_GPIO_WritePin>
}
 8009260:	bf00      	nop
 8009262:	3708      	adds	r7, #8
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	40020400 	.word	0x40020400

0800926c <_Z19ILI9341_Set_Addresstttt>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 800926c:	b590      	push	{r4, r7, lr}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	4604      	mov	r4, r0
 8009274:	4608      	mov	r0, r1
 8009276:	4611      	mov	r1, r2
 8009278:	461a      	mov	r2, r3
 800927a:	4623      	mov	r3, r4
 800927c:	80fb      	strh	r3, [r7, #6]
 800927e:	4603      	mov	r3, r0
 8009280:	80bb      	strh	r3, [r7, #4]
 8009282:	460b      	mov	r3, r1
 8009284:	807b      	strh	r3, [r7, #2]
 8009286:	4613      	mov	r3, r2
 8009288:	803b      	strh	r3, [r7, #0]
	ILI9341_Write_Command(0x2A);
 800928a:	202a      	movs	r0, #42	@ 0x2a
 800928c:	f7ff ffb2 	bl	80091f4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(X1 >> 8);
 8009290:	88fb      	ldrh	r3, [r7, #6]
 8009292:	0a1b      	lsrs	r3, r3, #8
 8009294:	b29b      	uxth	r3, r3
 8009296:	b2db      	uxtb	r3, r3
 8009298:	4618      	mov	r0, r3
 800929a:	f7ff ffc9 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(X1);
 800929e:	88fb      	ldrh	r3, [r7, #6]
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7ff ffc4 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(X2 >> 8);
 80092a8:	887b      	ldrh	r3, [r7, #2]
 80092aa:	0a1b      	lsrs	r3, r3, #8
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	4618      	mov	r0, r3
 80092b2:	f7ff ffbd 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(X2);
 80092b6:	887b      	ldrh	r3, [r7, #2]
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7ff ffb8 	bl	8009230 <_Z18ILI9341_Write_Datah>

	ILI9341_Write_Command(0x2B);
 80092c0:	202b      	movs	r0, #43	@ 0x2b
 80092c2:	f7ff ff97 	bl	80091f4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(Y1 >> 8);
 80092c6:	88bb      	ldrh	r3, [r7, #4]
 80092c8:	0a1b      	lsrs	r3, r3, #8
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	4618      	mov	r0, r3
 80092d0:	f7ff ffae 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(Y1);
 80092d4:	88bb      	ldrh	r3, [r7, #4]
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	4618      	mov	r0, r3
 80092da:	f7ff ffa9 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(Y2 >> 8);
 80092de:	883b      	ldrh	r3, [r7, #0]
 80092e0:	0a1b      	lsrs	r3, r3, #8
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7ff ffa2 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(Y2);
 80092ec:	883b      	ldrh	r3, [r7, #0]
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	4618      	mov	r0, r3
 80092f2:	f7ff ff9d 	bl	8009230 <_Z18ILI9341_Write_Datah>

	ILI9341_Write_Command(0x2C);
 80092f6:	202c      	movs	r0, #44	@ 0x2c
 80092f8:	f7ff ff7c 	bl	80091f4 <_Z21ILI9341_Write_Commandh>
}
 80092fc:	bf00      	nop
 80092fe:	370c      	adds	r7, #12
 8009300:	46bd      	mov	sp, r7
 8009302:	bd90      	pop	{r4, r7, pc}

08009304 <_Z13ILI9341_Resetv>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8009308:	2201      	movs	r2, #1
 800930a:	2120      	movs	r1, #32
 800930c:	480a      	ldr	r0, [pc, #40]	@ (8009338 <_Z13ILI9341_Resetv+0x34>)
 800930e:	f004 fd67 	bl	800dde0 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8009312:	20c8      	movs	r0, #200	@ 0xc8
 8009314:	f003 ff5e 	bl	800d1d4 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8009318:	2200      	movs	r2, #0
 800931a:	2101      	movs	r1, #1
 800931c:	4806      	ldr	r0, [pc, #24]	@ (8009338 <_Z13ILI9341_Resetv+0x34>)
 800931e:	f004 fd5f 	bl	800dde0 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8009322:	20c8      	movs	r0, #200	@ 0xc8
 8009324:	f003 ff56 	bl	800d1d4 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8009328:	2201      	movs	r2, #1
 800932a:	2120      	movs	r1, #32
 800932c:	4802      	ldr	r0, [pc, #8]	@ (8009338 <_Z13ILI9341_Resetv+0x34>)
 800932e:	f004 fd57 	bl	800dde0 <HAL_GPIO_WritePin>
}
 8009332:	bf00      	nop
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	40020400 	.word	0x40020400

0800933c <_Z20ILI9341_Set_Rotationh>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	4603      	mov	r3, r0
 8009344:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = Rotation;
 8009346:	79fb      	ldrb	r3, [r7, #7]
 8009348:	73fb      	strb	r3, [r7, #15]

	ILI9341_Write_Command(0x36);
 800934a:	2036      	movs	r0, #54	@ 0x36
 800934c:	f7ff ff52 	bl	80091f4 <_Z21ILI9341_Write_Commandh>
	HAL_Delay(1);
 8009350:	2001      	movs	r0, #1
 8009352:	f003 ff3f 	bl	800d1d4 <HAL_Delay>

	switch (screen_rotation)
 8009356:	7bfb      	ldrb	r3, [r7, #15]
 8009358:	2b03      	cmp	r3, #3
 800935a:	d837      	bhi.n	80093cc <_Z20ILI9341_Set_Rotationh+0x90>
 800935c:	a201      	add	r2, pc, #4	@ (adr r2, 8009364 <_Z20ILI9341_Set_Rotationh+0x28>)
 800935e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009362:	bf00      	nop
 8009364:	08009375 	.word	0x08009375
 8009368:	0800938b 	.word	0x0800938b
 800936c:	080093a1 	.word	0x080093a1
 8009370:	080093b7 	.word	0x080093b7
	{
	case SCREEN_VERTICAL_1:
		ILI9341_Write_Data(0x40 | 0x08);
 8009374:	2048      	movs	r0, #72	@ 0x48
 8009376:	f7ff ff5b 	bl	8009230 <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 240;
 800937a:	4b17      	ldr	r3, [pc, #92]	@ (80093d8 <_Z20ILI9341_Set_Rotationh+0x9c>)
 800937c:	22f0      	movs	r2, #240	@ 0xf0
 800937e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8009380:	4b16      	ldr	r3, [pc, #88]	@ (80093dc <_Z20ILI9341_Set_Rotationh+0xa0>)
 8009382:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8009386:	801a      	strh	r2, [r3, #0]
		break;
 8009388:	e021      	b.n	80093ce <_Z20ILI9341_Set_Rotationh+0x92>
	case SCREEN_HORIZONTAL_1:
		ILI9341_Write_Data(0x20 | 0x08);
 800938a:	2028      	movs	r0, #40	@ 0x28
 800938c:	f7ff ff50 	bl	8009230 <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 320;
 8009390:	4b11      	ldr	r3, [pc, #68]	@ (80093d8 <_Z20ILI9341_Set_Rotationh+0x9c>)
 8009392:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8009396:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8009398:	4b10      	ldr	r3, [pc, #64]	@ (80093dc <_Z20ILI9341_Set_Rotationh+0xa0>)
 800939a:	22f0      	movs	r2, #240	@ 0xf0
 800939c:	801a      	strh	r2, [r3, #0]
		break;
 800939e:	e016      	b.n	80093ce <_Z20ILI9341_Set_Rotationh+0x92>
	case SCREEN_VERTICAL_2:
		ILI9341_Write_Data(0x80 | 0x08);
 80093a0:	2088      	movs	r0, #136	@ 0x88
 80093a2:	f7ff ff45 	bl	8009230 <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 240;
 80093a6:	4b0c      	ldr	r3, [pc, #48]	@ (80093d8 <_Z20ILI9341_Set_Rotationh+0x9c>)
 80093a8:	22f0      	movs	r2, #240	@ 0xf0
 80093aa:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80093ac:	4b0b      	ldr	r3, [pc, #44]	@ (80093dc <_Z20ILI9341_Set_Rotationh+0xa0>)
 80093ae:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80093b2:	801a      	strh	r2, [r3, #0]
		break;
 80093b4:	e00b      	b.n	80093ce <_Z20ILI9341_Set_Rotationh+0x92>
	case SCREEN_HORIZONTAL_2:
		ILI9341_Write_Data(0x40 | 0x80 | 0x20 | 0x08);
 80093b6:	20e8      	movs	r0, #232	@ 0xe8
 80093b8:	f7ff ff3a 	bl	8009230 <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 320;
 80093bc:	4b06      	ldr	r3, [pc, #24]	@ (80093d8 <_Z20ILI9341_Set_Rotationh+0x9c>)
 80093be:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80093c2:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 80093c4:	4b05      	ldr	r3, [pc, #20]	@ (80093dc <_Z20ILI9341_Set_Rotationh+0xa0>)
 80093c6:	22f0      	movs	r2, #240	@ 0xf0
 80093c8:	801a      	strh	r2, [r3, #0]
		break;
 80093ca:	e000      	b.n	80093ce <_Z20ILI9341_Set_Rotationh+0x92>
	default:
		//EXIT IF SCREEN ROTATION NOT VALID!
		break;
 80093cc:	bf00      	nop
	}
}
 80093ce:	bf00      	nop
 80093d0:	3710      	adds	r7, #16
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	20000002 	.word	0x20000002
 80093dc:	20000000 	.word	0x20000000

080093e0 <_Z14ILI9341_Enablev>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80093e4:	2201      	movs	r2, #1
 80093e6:	2120      	movs	r1, #32
 80093e8:	4802      	ldr	r0, [pc, #8]	@ (80093f4 <_Z14ILI9341_Enablev+0x14>)
 80093ea:	f004 fcf9 	bl	800dde0 <HAL_GPIO_WritePin>
}
 80093ee:	bf00      	nop
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	40020400 	.word	0x40020400

080093f8 <_Z12ILI9341_Initv>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	af00      	add	r7, sp, #0

	ILI9341_Enable();
 80093fc:	f7ff fff0 	bl	80093e0 <_Z14ILI9341_Enablev>
	ILI9341_SPI_Init();
 8009400:	f7ff fed6 	bl	80091b0 <_Z16ILI9341_SPI_Initv>
	ILI9341_Reset();
 8009404:	f7ff ff7e 	bl	8009304 <_Z13ILI9341_Resetv>

//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 8009408:	2001      	movs	r0, #1
 800940a:	f7ff fef3 	bl	80091f4 <_Z21ILI9341_Write_Commandh>
	HAL_Delay(1000);
 800940e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009412:	f003 fedf 	bl	800d1d4 <HAL_Delay>

//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 8009416:	20cb      	movs	r0, #203	@ 0xcb
 8009418:	f7ff feec 	bl	80091f4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x39);
 800941c:	2039      	movs	r0, #57	@ 0x39
 800941e:	f7ff ff07 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x2C);
 8009422:	202c      	movs	r0, #44	@ 0x2c
 8009424:	f7ff ff04 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 8009428:	2000      	movs	r0, #0
 800942a:	f7ff ff01 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x34);
 800942e:	2034      	movs	r0, #52	@ 0x34
 8009430:	f7ff fefe 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x02);
 8009434:	2002      	movs	r0, #2
 8009436:	f7ff fefb 	bl	8009230 <_Z18ILI9341_Write_Datah>

//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 800943a:	20cf      	movs	r0, #207	@ 0xcf
 800943c:	f7ff feda 	bl	80091f4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8009440:	2000      	movs	r0, #0
 8009442:	f7ff fef5 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0xC1);
 8009446:	20c1      	movs	r0, #193	@ 0xc1
 8009448:	f7ff fef2 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x30);
 800944c:	2030      	movs	r0, #48	@ 0x30
 800944e:	f7ff feef 	bl	8009230 <_Z18ILI9341_Write_Datah>

//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 8009452:	20e8      	movs	r0, #232	@ 0xe8
 8009454:	f7ff fece 	bl	80091f4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x85);
 8009458:	2085      	movs	r0, #133	@ 0x85
 800945a:	f7ff fee9 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 800945e:	2000      	movs	r0, #0
 8009460:	f7ff fee6 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x78);
 8009464:	2078      	movs	r0, #120	@ 0x78
 8009466:	f7ff fee3 	bl	8009230 <_Z18ILI9341_Write_Datah>

//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 800946a:	20ea      	movs	r0, #234	@ 0xea
 800946c:	f7ff fec2 	bl	80091f4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8009470:	2000      	movs	r0, #0
 8009472:	f7ff fedd 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 8009476:	2000      	movs	r0, #0
 8009478:	f7ff feda 	bl	8009230 <_Z18ILI9341_Write_Datah>

//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 800947c:	20ed      	movs	r0, #237	@ 0xed
 800947e:	f7ff feb9 	bl	80091f4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x64);
 8009482:	2064      	movs	r0, #100	@ 0x64
 8009484:	f7ff fed4 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x03);
 8009488:	2003      	movs	r0, #3
 800948a:	f7ff fed1 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x12);
 800948e:	2012      	movs	r0, #18
 8009490:	f7ff fece 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x81);
 8009494:	2081      	movs	r0, #129	@ 0x81
 8009496:	f7ff fecb 	bl	8009230 <_Z18ILI9341_Write_Datah>

//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 800949a:	20f7      	movs	r0, #247	@ 0xf7
 800949c:	f7ff feaa 	bl	80091f4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x20);
 80094a0:	2020      	movs	r0, #32
 80094a2:	f7ff fec5 	bl	8009230 <_Z18ILI9341_Write_Datah>

//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 80094a6:	20c0      	movs	r0, #192	@ 0xc0
 80094a8:	f7ff fea4 	bl	80091f4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x23);
 80094ac:	2023      	movs	r0, #35	@ 0x23
 80094ae:	f7ff febf 	bl	8009230 <_Z18ILI9341_Write_Datah>

//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 80094b2:	20c1      	movs	r0, #193	@ 0xc1
 80094b4:	f7ff fe9e 	bl	80091f4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x10);
 80094b8:	2010      	movs	r0, #16
 80094ba:	f7ff feb9 	bl	8009230 <_Z18ILI9341_Write_Datah>

//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 80094be:	20c5      	movs	r0, #197	@ 0xc5
 80094c0:	f7ff fe98 	bl	80091f4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x3E);
 80094c4:	203e      	movs	r0, #62	@ 0x3e
 80094c6:	f7ff feb3 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x28);
 80094ca:	2028      	movs	r0, #40	@ 0x28
 80094cc:	f7ff feb0 	bl	8009230 <_Z18ILI9341_Write_Datah>

//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 80094d0:	20c7      	movs	r0, #199	@ 0xc7
 80094d2:	f7ff fe8f 	bl	80091f4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x86);
 80094d6:	2086      	movs	r0, #134	@ 0x86
 80094d8:	f7ff feaa 	bl	8009230 <_Z18ILI9341_Write_Datah>

//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 80094dc:	2036      	movs	r0, #54	@ 0x36
 80094de:	f7ff fe89 	bl	80091f4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x48);
 80094e2:	2048      	movs	r0, #72	@ 0x48
 80094e4:	f7ff fea4 	bl	8009230 <_Z18ILI9341_Write_Datah>

//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 80094e8:	203a      	movs	r0, #58	@ 0x3a
 80094ea:	f7ff fe83 	bl	80091f4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x55);
 80094ee:	2055      	movs	r0, #85	@ 0x55
 80094f0:	f7ff fe9e 	bl	8009230 <_Z18ILI9341_Write_Datah>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 80094f4:	20b1      	movs	r0, #177	@ 0xb1
 80094f6:	f7ff fe7d 	bl	80091f4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 80094fa:	2000      	movs	r0, #0
 80094fc:	f7ff fe98 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x18);
 8009500:	2018      	movs	r0, #24
 8009502:	f7ff fe95 	bl	8009230 <_Z18ILI9341_Write_Datah>

//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 8009506:	20b6      	movs	r0, #182	@ 0xb6
 8009508:	f7ff fe74 	bl	80091f4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x08);
 800950c:	2008      	movs	r0, #8
 800950e:	f7ff fe8f 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x82);
 8009512:	2082      	movs	r0, #130	@ 0x82
 8009514:	f7ff fe8c 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x27);
 8009518:	2027      	movs	r0, #39	@ 0x27
 800951a:	f7ff fe89 	bl	8009230 <_Z18ILI9341_Write_Datah>

//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 800951e:	20f2      	movs	r0, #242	@ 0xf2
 8009520:	f7ff fe68 	bl	80091f4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8009524:	2000      	movs	r0, #0
 8009526:	f7ff fe83 	bl	8009230 <_Z18ILI9341_Write_Datah>

//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 800952a:	2026      	movs	r0, #38	@ 0x26
 800952c:	f7ff fe62 	bl	80091f4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x01);
 8009530:	2001      	movs	r0, #1
 8009532:	f7ff fe7d 	bl	8009230 <_Z18ILI9341_Write_Datah>

//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 8009536:	20e0      	movs	r0, #224	@ 0xe0
 8009538:	f7ff fe5c 	bl	80091f4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x0F);
 800953c:	200f      	movs	r0, #15
 800953e:	f7ff fe77 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x31);
 8009542:	2031      	movs	r0, #49	@ 0x31
 8009544:	f7ff fe74 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x2B);
 8009548:	202b      	movs	r0, #43	@ 0x2b
 800954a:	f7ff fe71 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0C);
 800954e:	200c      	movs	r0, #12
 8009550:	f7ff fe6e 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0E);
 8009554:	200e      	movs	r0, #14
 8009556:	f7ff fe6b 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x08);
 800955a:	2008      	movs	r0, #8
 800955c:	f7ff fe68 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x4E);
 8009560:	204e      	movs	r0, #78	@ 0x4e
 8009562:	f7ff fe65 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0xF1);
 8009566:	20f1      	movs	r0, #241	@ 0xf1
 8009568:	f7ff fe62 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x37);
 800956c:	2037      	movs	r0, #55	@ 0x37
 800956e:	f7ff fe5f 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x07);
 8009572:	2007      	movs	r0, #7
 8009574:	f7ff fe5c 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x10);
 8009578:	2010      	movs	r0, #16
 800957a:	f7ff fe59 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x03);
 800957e:	2003      	movs	r0, #3
 8009580:	f7ff fe56 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0E);
 8009584:	200e      	movs	r0, #14
 8009586:	f7ff fe53 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x09);
 800958a:	2009      	movs	r0, #9
 800958c:	f7ff fe50 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 8009590:	2000      	movs	r0, #0
 8009592:	f7ff fe4d 	bl	8009230 <_Z18ILI9341_Write_Datah>

//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 8009596:	20e1      	movs	r0, #225	@ 0xe1
 8009598:	f7ff fe2c 	bl	80091f4 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 800959c:	2000      	movs	r0, #0
 800959e:	f7ff fe47 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0E);
 80095a2:	200e      	movs	r0, #14
 80095a4:	f7ff fe44 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x14);
 80095a8:	2014      	movs	r0, #20
 80095aa:	f7ff fe41 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x03);
 80095ae:	2003      	movs	r0, #3
 80095b0:	f7ff fe3e 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x11);
 80095b4:	2011      	movs	r0, #17
 80095b6:	f7ff fe3b 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x07);
 80095ba:	2007      	movs	r0, #7
 80095bc:	f7ff fe38 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x31);
 80095c0:	2031      	movs	r0, #49	@ 0x31
 80095c2:	f7ff fe35 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0xC1);
 80095c6:	20c1      	movs	r0, #193	@ 0xc1
 80095c8:	f7ff fe32 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x48);
 80095cc:	2048      	movs	r0, #72	@ 0x48
 80095ce:	f7ff fe2f 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x08);
 80095d2:	2008      	movs	r0, #8
 80095d4:	f7ff fe2c 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0F);
 80095d8:	200f      	movs	r0, #15
 80095da:	f7ff fe29 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0C);
 80095de:	200c      	movs	r0, #12
 80095e0:	f7ff fe26 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x31);
 80095e4:	2031      	movs	r0, #49	@ 0x31
 80095e6:	f7ff fe23 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x36);
 80095ea:	2036      	movs	r0, #54	@ 0x36
 80095ec:	f7ff fe20 	bl	8009230 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0F);
 80095f0:	200f      	movs	r0, #15
 80095f2:	f7ff fe1d 	bl	8009230 <_Z18ILI9341_Write_Datah>

//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 80095f6:	2011      	movs	r0, #17
 80095f8:	f7ff fdfc 	bl	80091f4 <_Z21ILI9341_Write_Commandh>
	HAL_Delay(120);
 80095fc:	2078      	movs	r0, #120	@ 0x78
 80095fe:	f003 fde9 	bl	800d1d4 <HAL_Delay>

//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 8009602:	2029      	movs	r0, #41	@ 0x29
 8009604:	f7ff fdf6 	bl	80091f4 <_Z21ILI9341_Write_Commandh>

//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8009608:	2000      	movs	r0, #0
 800960a:	f7ff fe97 	bl	800933c <_Z20ILI9341_Set_Rotationh>
}
 800960e:	bf00      	nop
 8009610:	bd80      	pop	{r7, pc}
	...

08009614 <_Z25ILI9341_Draw_Colour_Bursttm>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8009614:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009618:	b08d      	sub	sp, #52	@ 0x34
 800961a:	af00      	add	r7, sp, #0
 800961c:	4603      	mov	r3, r0
 800961e:	6039      	str	r1, [r7, #0]
 8009620:	80fb      	strh	r3, [r7, #6]
//REMAINDER!
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
			Remainder_from_block, 10);

	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
}
 8009622:	466b      	mov	r3, sp
 8009624:	461e      	mov	r6, r3
	uint32_t Buffer_Size = 0;
 8009626:	2300      	movs	r3, #0
 8009628:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if ((Size * 2) < BURST_MAX_SIZE)
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	005b      	lsls	r3, r3, #1
 800962e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8009632:	d202      	bcs.n	800963a <_Z25ILI9341_Draw_Colour_Bursttm+0x26>
		Buffer_Size = Size;
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009638:	e002      	b.n	8009640 <_Z25ILI9341_Draw_Colour_Bursttm+0x2c>
		Buffer_Size = BURST_MAX_SIZE;
 800963a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800963e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8009640:	2201      	movs	r2, #1
 8009642:	2102      	movs	r1, #2
 8009644:	483e      	ldr	r0, [pc, #248]	@ (8009740 <_Z25ILI9341_Draw_Colour_Bursttm+0x12c>)
 8009646:	f004 fbcb 	bl	800dde0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800964a:	2200      	movs	r2, #0
 800964c:	2101      	movs	r1, #1
 800964e:	483c      	ldr	r0, [pc, #240]	@ (8009740 <_Z25ILI9341_Draw_Colour_Bursttm+0x12c>)
 8009650:	f004 fbc6 	bl	800dde0 <HAL_GPIO_WritePin>
	unsigned char chifted = Colour >> 8;
 8009654:	88fb      	ldrh	r3, [r7, #6]
 8009656:	0a1b      	lsrs	r3, r3, #8
 8009658:	b29b      	uxth	r3, r3
 800965a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	unsigned char burst_buffer[Buffer_Size];
 800965e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009660:	460b      	mov	r3, r1
 8009662:	3b01      	subs	r3, #1
 8009664:	61fb      	str	r3, [r7, #28]
 8009666:	2300      	movs	r3, #0
 8009668:	4688      	mov	r8, r1
 800966a:	4699      	mov	r9, r3
 800966c:	f04f 0200 	mov.w	r2, #0
 8009670:	f04f 0300 	mov.w	r3, #0
 8009674:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009678:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800967c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009680:	2300      	movs	r3, #0
 8009682:	460c      	mov	r4, r1
 8009684:	461d      	mov	r5, r3
 8009686:	f04f 0200 	mov.w	r2, #0
 800968a:	f04f 0300 	mov.w	r3, #0
 800968e:	00eb      	lsls	r3, r5, #3
 8009690:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009694:	00e2      	lsls	r2, r4, #3
 8009696:	1dcb      	adds	r3, r1, #7
 8009698:	08db      	lsrs	r3, r3, #3
 800969a:	00db      	lsls	r3, r3, #3
 800969c:	ebad 0d03 	sub.w	sp, sp, r3
 80096a0:	466b      	mov	r3, sp
 80096a2:	3300      	adds	r3, #0
 80096a4:	61bb      	str	r3, [r7, #24]
	for (uint32_t j = 0; j < Buffer_Size; j += 2)
 80096a6:	2300      	movs	r3, #0
 80096a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80096aa:	e00e      	b.n	80096ca <_Z25ILI9341_Draw_Colour_Bursttm+0xb6>
		burst_buffer[j] = chifted;
 80096ac:	69ba      	ldr	r2, [r7, #24]
 80096ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096b0:	4413      	add	r3, r2
 80096b2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80096b6:	701a      	strb	r2, [r3, #0]
		burst_buffer[j + 1] = Colour;
 80096b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ba:	3301      	adds	r3, #1
 80096bc:	88fa      	ldrh	r2, [r7, #6]
 80096be:	b2d1      	uxtb	r1, r2
 80096c0:	69ba      	ldr	r2, [r7, #24]
 80096c2:	54d1      	strb	r1, [r2, r3]
	for (uint32_t j = 0; j < Buffer_Size; j += 2)
 80096c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096c6:	3302      	adds	r3, #2
 80096c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80096ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80096cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d3ec      	bcc.n	80096ac <_Z25ILI9341_Draw_Colour_Bursttm+0x98>
	uint32_t Sending_Size = Size * 2;
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	005b      	lsls	r3, r3, #1
 80096d6:	617b      	str	r3, [r7, #20]
	uint32_t Sending_in_Block = Sending_Size / Buffer_Size;
 80096d8:	697a      	ldr	r2, [r7, #20]
 80096da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80096e0:	613b      	str	r3, [r7, #16]
	uint32_t Remainder_from_block = Sending_Size % Buffer_Size;
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80096ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80096ec:	fb01 f202 	mul.w	r2, r1, r2
 80096f0:	1a9b      	subs	r3, r3, r2
 80096f2:	60fb      	str	r3, [r7, #12]
	if (Sending_in_Block != 0)
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d010      	beq.n	800971c <_Z25ILI9341_Draw_Colour_Bursttm+0x108>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 80096fa:	2300      	movs	r3, #0
 80096fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80096fe:	e009      	b.n	8009714 <_Z25ILI9341_Draw_Colour_Bursttm+0x100>
			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
 8009700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009702:	b29a      	uxth	r2, r3
 8009704:	230a      	movs	r3, #10
 8009706:	69b9      	ldr	r1, [r7, #24]
 8009708:	480e      	ldr	r0, [pc, #56]	@ (8009744 <_Z25ILI9341_Draw_Colour_Bursttm+0x130>)
 800970a:	f006 f8a0 	bl	800f84e <HAL_SPI_Transmit>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 800970e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009710:	3301      	adds	r3, #1
 8009712:	627b      	str	r3, [r7, #36]	@ 0x24
 8009714:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	429a      	cmp	r2, r3
 800971a:	d3f1      	bcc.n	8009700 <_Z25ILI9341_Draw_Colour_Bursttm+0xec>
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	b29a      	uxth	r2, r3
 8009720:	230a      	movs	r3, #10
 8009722:	69b9      	ldr	r1, [r7, #24]
 8009724:	4807      	ldr	r0, [pc, #28]	@ (8009744 <_Z25ILI9341_Draw_Colour_Bursttm+0x130>)
 8009726:	f006 f892 	bl	800f84e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800972a:	2201      	movs	r2, #1
 800972c:	2101      	movs	r1, #1
 800972e:	4804      	ldr	r0, [pc, #16]	@ (8009740 <_Z25ILI9341_Draw_Colour_Bursttm+0x12c>)
 8009730:	f004 fb56 	bl	800dde0 <HAL_GPIO_WritePin>
 8009734:	46b5      	mov	sp, r6
}
 8009736:	bf00      	nop
 8009738:	3734      	adds	r7, #52	@ 0x34
 800973a:	46bd      	mov	sp, r7
 800973c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009740:	40020400 	.word	0x40020400
 8009744:	2000055c 	.word	0x2000055c

08009748 <_Z19ILI9341_Fill_Screent>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	4603      	mov	r3, r0
 8009750:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8009752:	4b0e      	ldr	r3, [pc, #56]	@ (800978c <_Z19ILI9341_Fill_Screent+0x44>)
 8009754:	881b      	ldrh	r3, [r3, #0]
 8009756:	b29a      	uxth	r2, r3
 8009758:	4b0d      	ldr	r3, [pc, #52]	@ (8009790 <_Z19ILI9341_Fill_Screent+0x48>)
 800975a:	881b      	ldrh	r3, [r3, #0]
 800975c:	b29b      	uxth	r3, r3
 800975e:	2100      	movs	r1, #0
 8009760:	2000      	movs	r0, #0
 8009762:	f7ff fd83 	bl	800926c <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH * LCD_HEIGHT);
 8009766:	4b09      	ldr	r3, [pc, #36]	@ (800978c <_Z19ILI9341_Fill_Screent+0x44>)
 8009768:	881b      	ldrh	r3, [r3, #0]
 800976a:	b29b      	uxth	r3, r3
 800976c:	461a      	mov	r2, r3
 800976e:	4b08      	ldr	r3, [pc, #32]	@ (8009790 <_Z19ILI9341_Fill_Screent+0x48>)
 8009770:	881b      	ldrh	r3, [r3, #0]
 8009772:	b29b      	uxth	r3, r3
 8009774:	fb02 f303 	mul.w	r3, r2, r3
 8009778:	461a      	mov	r2, r3
 800977a:	88fb      	ldrh	r3, [r7, #6]
 800977c:	4611      	mov	r1, r2
 800977e:	4618      	mov	r0, r3
 8009780:	f7ff ff48 	bl	8009614 <_Z25ILI9341_Draw_Colour_Bursttm>
}
 8009784:	bf00      	nop
 8009786:	3708      	adds	r7, #8
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}
 800978c:	20000002 	.word	0x20000002
 8009790:	20000000 	.word	0x20000000

08009794 <_Z18ILI9341_Draw_Pixelttt>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X, uint16_t Y, uint16_t Colour)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b086      	sub	sp, #24
 8009798:	af00      	add	r7, sp, #0
 800979a:	4603      	mov	r3, r0
 800979c:	80fb      	strh	r3, [r7, #6]
 800979e:	460b      	mov	r3, r1
 80097a0:	80bb      	strh	r3, [r7, #4]
 80097a2:	4613      	mov	r3, r2
 80097a4:	807b      	strh	r3, [r7, #2]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 80097a6:	4b5d      	ldr	r3, [pc, #372]	@ (800991c <_Z18ILI9341_Draw_Pixelttt+0x188>)
 80097a8:	881b      	ldrh	r3, [r3, #0]
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	88fa      	ldrh	r2, [r7, #6]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d205      	bcs.n	80097be <_Z18ILI9341_Draw_Pixelttt+0x2a>
 80097b2:	4b5b      	ldr	r3, [pc, #364]	@ (8009920 <_Z18ILI9341_Draw_Pixelttt+0x18c>)
 80097b4:	881b      	ldrh	r3, [r3, #0]
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	88ba      	ldrh	r2, [r7, #4]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d301      	bcc.n	80097c2 <_Z18ILI9341_Draw_Pixelttt+0x2e>
 80097be:	2301      	movs	r3, #1
 80097c0:	e000      	b.n	80097c4 <_Z18ILI9341_Draw_Pixelttt+0x30>
 80097c2:	2300      	movs	r3, #0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	f040 80a5 	bne.w	8009914 <_Z18ILI9341_Draw_Pixelttt+0x180>
		return;	//OUT OF BOUNDS!

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 80097ca:	2200      	movs	r2, #0
 80097cc:	2102      	movs	r1, #2
 80097ce:	4855      	ldr	r0, [pc, #340]	@ (8009924 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80097d0:	f004 fb06 	bl	800dde0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80097d4:	2200      	movs	r2, #0
 80097d6:	2101      	movs	r1, #1
 80097d8:	4852      	ldr	r0, [pc, #328]	@ (8009924 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80097da:	f004 fb01 	bl	800dde0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2A);
 80097de:	202a      	movs	r0, #42	@ 0x2a
 80097e0:	f7ff fcf6 	bl	80091d0 <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80097e4:	2201      	movs	r2, #1
 80097e6:	2102      	movs	r1, #2
 80097e8:	484e      	ldr	r0, [pc, #312]	@ (8009924 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80097ea:	f004 faf9 	bl	800dde0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80097ee:	2201      	movs	r2, #1
 80097f0:	2101      	movs	r1, #1
 80097f2:	484c      	ldr	r0, [pc, #304]	@ (8009924 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80097f4:	f004 faf4 	bl	800dde0 <HAL_GPIO_WritePin>

//XDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80097f8:	2200      	movs	r2, #0
 80097fa:	2101      	movs	r1, #1
 80097fc:	4849      	ldr	r0, [pc, #292]	@ (8009924 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80097fe:	f004 faef 	bl	800dde0 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer[4] =	{(unsigned char) (X >> 8),(unsigned char) X, (unsigned char)((X + 1) >> 8),(unsigned char) (X + 1) };
 8009802:	88fb      	ldrh	r3, [r7, #6]
 8009804:	0a1b      	lsrs	r3, r3, #8
 8009806:	b29b      	uxth	r3, r3
 8009808:	b2db      	uxtb	r3, r3
 800980a:	753b      	strb	r3, [r7, #20]
 800980c:	88fb      	ldrh	r3, [r7, #6]
 800980e:	b2db      	uxtb	r3, r3
 8009810:	757b      	strb	r3, [r7, #21]
 8009812:	88fb      	ldrh	r3, [r7, #6]
 8009814:	3301      	adds	r3, #1
 8009816:	121b      	asrs	r3, r3, #8
 8009818:	b2db      	uxtb	r3, r3
 800981a:	75bb      	strb	r3, [r7, #22]
 800981c:	88fb      	ldrh	r3, [r7, #6]
 800981e:	b2db      	uxtb	r3, r3
 8009820:	3301      	adds	r3, #1
 8009822:	b2db      	uxtb	r3, r3
 8009824:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8009826:	f107 0114 	add.w	r1, r7, #20
 800982a:	2301      	movs	r3, #1
 800982c:	2204      	movs	r2, #4
 800982e:	483e      	ldr	r0, [pc, #248]	@ (8009928 <_Z18ILI9341_Draw_Pixelttt+0x194>)
 8009830:	f006 f80d 	bl	800f84e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8009834:	2201      	movs	r2, #1
 8009836:	2101      	movs	r1, #1
 8009838:	483a      	ldr	r0, [pc, #232]	@ (8009924 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800983a:	f004 fad1 	bl	800dde0 <HAL_GPIO_WritePin>

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 800983e:	2200      	movs	r2, #0
 8009840:	2102      	movs	r1, #2
 8009842:	4838      	ldr	r0, [pc, #224]	@ (8009924 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009844:	f004 facc 	bl	800dde0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8009848:	2200      	movs	r2, #0
 800984a:	2101      	movs	r1, #1
 800984c:	4835      	ldr	r0, [pc, #212]	@ (8009924 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800984e:	f004 fac7 	bl	800dde0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2B);
 8009852:	202b      	movs	r0, #43	@ 0x2b
 8009854:	f7ff fcbc 	bl	80091d0 <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8009858:	2201      	movs	r2, #1
 800985a:	2102      	movs	r1, #2
 800985c:	4831      	ldr	r0, [pc, #196]	@ (8009924 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800985e:	f004 fabf 	bl	800dde0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8009862:	2201      	movs	r2, #1
 8009864:	2101      	movs	r1, #1
 8009866:	482f      	ldr	r0, [pc, #188]	@ (8009924 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009868:	f004 faba 	bl	800dde0 <HAL_GPIO_WritePin>

//YDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800986c:	2200      	movs	r2, #0
 800986e:	2101      	movs	r1, #1
 8009870:	482c      	ldr	r0, [pc, #176]	@ (8009924 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8009872:	f004 fab5 	bl	800dde0 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer1[4] =	{(unsigned char)( Y >> 8),(unsigned char) Y,(unsigned char)( (Y + 1) >> 8),(unsigned char) (Y + 1) };
 8009876:	88bb      	ldrh	r3, [r7, #4]
 8009878:	0a1b      	lsrs	r3, r3, #8
 800987a:	b29b      	uxth	r3, r3
 800987c:	b2db      	uxtb	r3, r3
 800987e:	743b      	strb	r3, [r7, #16]
 8009880:	88bb      	ldrh	r3, [r7, #4]
 8009882:	b2db      	uxtb	r3, r3
 8009884:	747b      	strb	r3, [r7, #17]
 8009886:	88bb      	ldrh	r3, [r7, #4]
 8009888:	3301      	adds	r3, #1
 800988a:	121b      	asrs	r3, r3, #8
 800988c:	b2db      	uxtb	r3, r3
 800988e:	74bb      	strb	r3, [r7, #18]
 8009890:	88bb      	ldrh	r3, [r7, #4]
 8009892:	b2db      	uxtb	r3, r3
 8009894:	3301      	adds	r3, #1
 8009896:	b2db      	uxtb	r3, r3
 8009898:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 800989a:	f107 0110 	add.w	r1, r7, #16
 800989e:	2301      	movs	r3, #1
 80098a0:	2204      	movs	r2, #4
 80098a2:	4821      	ldr	r0, [pc, #132]	@ (8009928 <_Z18ILI9341_Draw_Pixelttt+0x194>)
 80098a4:	f005 ffd3 	bl	800f84e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80098a8:	2201      	movs	r2, #1
 80098aa:	2101      	movs	r1, #1
 80098ac:	481d      	ldr	r0, [pc, #116]	@ (8009924 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80098ae:	f004 fa97 	bl	800dde0 <HAL_GPIO_WritePin>

//ADDRESS	
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 80098b2:	2200      	movs	r2, #0
 80098b4:	2102      	movs	r1, #2
 80098b6:	481b      	ldr	r0, [pc, #108]	@ (8009924 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80098b8:	f004 fa92 	bl	800dde0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80098bc:	2200      	movs	r2, #0
 80098be:	2101      	movs	r1, #1
 80098c0:	4818      	ldr	r0, [pc, #96]	@ (8009924 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80098c2:	f004 fa8d 	bl	800dde0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 80098c6:	202c      	movs	r0, #44	@ 0x2c
 80098c8:	f7ff fc82 	bl	80091d0 <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80098cc:	2201      	movs	r2, #1
 80098ce:	2102      	movs	r1, #2
 80098d0:	4814      	ldr	r0, [pc, #80]	@ (8009924 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80098d2:	f004 fa85 	bl	800dde0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80098d6:	2201      	movs	r2, #1
 80098d8:	2101      	movs	r1, #1
 80098da:	4812      	ldr	r0, [pc, #72]	@ (8009924 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80098dc:	f004 fa80 	bl	800dde0 <HAL_GPIO_WritePin>

//COLOUR	
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80098e0:	2200      	movs	r2, #0
 80098e2:	2101      	movs	r1, #1
 80098e4:	480f      	ldr	r0, [pc, #60]	@ (8009924 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80098e6:	f004 fa7b 	bl	800dde0 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer2[2] =	{(unsigned char)( Colour >> 8),(unsigned char) Colour };
 80098ea:	887b      	ldrh	r3, [r7, #2]
 80098ec:	0a1b      	lsrs	r3, r3, #8
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	733b      	strb	r3, [r7, #12]
 80098f4:	887b      	ldrh	r3, [r7, #2]
 80098f6:	b2db      	uxtb	r3, r3
 80098f8:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 80098fa:	f107 010c 	add.w	r1, r7, #12
 80098fe:	2301      	movs	r3, #1
 8009900:	2202      	movs	r2, #2
 8009902:	4809      	ldr	r0, [pc, #36]	@ (8009928 <_Z18ILI9341_Draw_Pixelttt+0x194>)
 8009904:	f005 ffa3 	bl	800f84e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8009908:	2201      	movs	r2, #1
 800990a:	2101      	movs	r1, #1
 800990c:	4805      	ldr	r0, [pc, #20]	@ (8009924 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800990e:	f004 fa67 	bl	800dde0 <HAL_GPIO_WritePin>
 8009912:	e000      	b.n	8009916 <_Z18ILI9341_Draw_Pixelttt+0x182>
		return;	//OUT OF BOUNDS!
 8009914:	bf00      	nop

}
 8009916:	3718      	adds	r7, #24
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}
 800991c:	20000002 	.word	0x20000002
 8009920:	20000000 	.word	0x20000000
 8009924:	40020400 	.word	0x40020400
 8009928:	2000055c 	.word	0x2000055c

0800992c <_Z22ILI9341_Draw_Rectanglettttt>:
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width,
		uint16_t Height, uint16_t Colour)
{
 800992c:	b590      	push	{r4, r7, lr}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	4604      	mov	r4, r0
 8009934:	4608      	mov	r0, r1
 8009936:	4611      	mov	r1, r2
 8009938:	461a      	mov	r2, r3
 800993a:	4623      	mov	r3, r4
 800993c:	80fb      	strh	r3, [r7, #6]
 800993e:	4603      	mov	r3, r0
 8009940:	80bb      	strh	r3, [r7, #4]
 8009942:	460b      	mov	r3, r1
 8009944:	807b      	strh	r3, [r7, #2]
 8009946:	4613      	mov	r3, r2
 8009948:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 800994a:	4b2b      	ldr	r3, [pc, #172]	@ (80099f8 <_Z22ILI9341_Draw_Rectanglettttt+0xcc>)
 800994c:	881b      	ldrh	r3, [r3, #0]
 800994e:	b29b      	uxth	r3, r3
 8009950:	88fa      	ldrh	r2, [r7, #6]
 8009952:	429a      	cmp	r2, r3
 8009954:	d205      	bcs.n	8009962 <_Z22ILI9341_Draw_Rectanglettttt+0x36>
 8009956:	4b29      	ldr	r3, [pc, #164]	@ (80099fc <_Z22ILI9341_Draw_Rectanglettttt+0xd0>)
 8009958:	881b      	ldrh	r3, [r3, #0]
 800995a:	b29b      	uxth	r3, r3
 800995c:	88ba      	ldrh	r2, [r7, #4]
 800995e:	429a      	cmp	r2, r3
 8009960:	d301      	bcc.n	8009966 <_Z22ILI9341_Draw_Rectanglettttt+0x3a>
 8009962:	2301      	movs	r3, #1
 8009964:	e000      	b.n	8009968 <_Z22ILI9341_Draw_Rectanglettttt+0x3c>
 8009966:	2300      	movs	r3, #0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d141      	bne.n	80099f0 <_Z22ILI9341_Draw_Rectanglettttt+0xc4>
		return;
	if ((X + Width - 1) >= LCD_WIDTH)
 800996c:	88fa      	ldrh	r2, [r7, #6]
 800996e:	887b      	ldrh	r3, [r7, #2]
 8009970:	4413      	add	r3, r2
 8009972:	4a21      	ldr	r2, [pc, #132]	@ (80099f8 <_Z22ILI9341_Draw_Rectanglettttt+0xcc>)
 8009974:	8812      	ldrh	r2, [r2, #0]
 8009976:	b292      	uxth	r2, r2
 8009978:	4293      	cmp	r3, r2
 800997a:	bfcc      	ite	gt
 800997c:	2301      	movgt	r3, #1
 800997e:	2300      	movle	r3, #0
 8009980:	b2db      	uxtb	r3, r3
 8009982:	2b00      	cmp	r3, #0
 8009984:	d005      	beq.n	8009992 <_Z22ILI9341_Draw_Rectanglettttt+0x66>
	{
		Width = LCD_WIDTH - X;
 8009986:	4b1c      	ldr	r3, [pc, #112]	@ (80099f8 <_Z22ILI9341_Draw_Rectanglettttt+0xcc>)
 8009988:	881b      	ldrh	r3, [r3, #0]
 800998a:	b29a      	uxth	r2, r3
 800998c:	88fb      	ldrh	r3, [r7, #6]
 800998e:	1ad3      	subs	r3, r2, r3
 8009990:	807b      	strh	r3, [r7, #2]
	}
	if ((Y + Height - 1) >= LCD_HEIGHT)
 8009992:	88ba      	ldrh	r2, [r7, #4]
 8009994:	883b      	ldrh	r3, [r7, #0]
 8009996:	4413      	add	r3, r2
 8009998:	4a18      	ldr	r2, [pc, #96]	@ (80099fc <_Z22ILI9341_Draw_Rectanglettttt+0xd0>)
 800999a:	8812      	ldrh	r2, [r2, #0]
 800999c:	b292      	uxth	r2, r2
 800999e:	4293      	cmp	r3, r2
 80099a0:	bfcc      	ite	gt
 80099a2:	2301      	movgt	r3, #1
 80099a4:	2300      	movle	r3, #0
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d005      	beq.n	80099b8 <_Z22ILI9341_Draw_Rectanglettttt+0x8c>
	{
		Height = LCD_HEIGHT - Y;
 80099ac:	4b13      	ldr	r3, [pc, #76]	@ (80099fc <_Z22ILI9341_Draw_Rectanglettttt+0xd0>)
 80099ae:	881b      	ldrh	r3, [r3, #0]
 80099b0:	b29a      	uxth	r2, r3
 80099b2:	88bb      	ldrh	r3, [r7, #4]
 80099b4:	1ad3      	subs	r3, r2, r3
 80099b6:	803b      	strh	r3, [r7, #0]
	}
	ILI9341_Set_Address(X, Y, X + Width - 1, Y + Height - 1);
 80099b8:	88fa      	ldrh	r2, [r7, #6]
 80099ba:	887b      	ldrh	r3, [r7, #2]
 80099bc:	4413      	add	r3, r2
 80099be:	b29b      	uxth	r3, r3
 80099c0:	3b01      	subs	r3, #1
 80099c2:	b29c      	uxth	r4, r3
 80099c4:	88ba      	ldrh	r2, [r7, #4]
 80099c6:	883b      	ldrh	r3, [r7, #0]
 80099c8:	4413      	add	r3, r2
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	3b01      	subs	r3, #1
 80099ce:	b29b      	uxth	r3, r3
 80099d0:	88b9      	ldrh	r1, [r7, #4]
 80099d2:	88f8      	ldrh	r0, [r7, #6]
 80099d4:	4622      	mov	r2, r4
 80099d6:	f7ff fc49 	bl	800926c <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, Height * Width);
 80099da:	883b      	ldrh	r3, [r7, #0]
 80099dc:	887a      	ldrh	r2, [r7, #2]
 80099de:	fb02 f303 	mul.w	r3, r2, r3
 80099e2:	461a      	mov	r2, r3
 80099e4:	8b3b      	ldrh	r3, [r7, #24]
 80099e6:	4611      	mov	r1, r2
 80099e8:	4618      	mov	r0, r3
 80099ea:	f7ff fe13 	bl	8009614 <_Z25ILI9341_Draw_Colour_Bursttm>
 80099ee:	e000      	b.n	80099f2 <_Z22ILI9341_Draw_Rectanglettttt+0xc6>
		return;
 80099f0:	bf00      	nop
}
 80099f2:	370c      	adds	r7, #12
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd90      	pop	{r4, r7, pc}
 80099f8:	20000002 	.word	0x20000002
 80099fc:	20000000 	.word	0x20000000

08009a00 <_Z28ILI9341_Draw_Horizontal_Linetttt>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width,
		uint16_t Colour)
{
 8009a00:	b590      	push	{r4, r7, lr}
 8009a02:	b083      	sub	sp, #12
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	4604      	mov	r4, r0
 8009a08:	4608      	mov	r0, r1
 8009a0a:	4611      	mov	r1, r2
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	4623      	mov	r3, r4
 8009a10:	80fb      	strh	r3, [r7, #6]
 8009a12:	4603      	mov	r3, r0
 8009a14:	80bb      	strh	r3, [r7, #4]
 8009a16:	460b      	mov	r3, r1
 8009a18:	807b      	strh	r3, [r7, #2]
 8009a1a:	4613      	mov	r3, r2
 8009a1c:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 8009a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8009a94 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x94>)
 8009a20:	881b      	ldrh	r3, [r3, #0]
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	88fa      	ldrh	r2, [r7, #6]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d205      	bcs.n	8009a36 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x36>
 8009a2a:	4b1b      	ldr	r3, [pc, #108]	@ (8009a98 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x98>)
 8009a2c:	881b      	ldrh	r3, [r3, #0]
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	88ba      	ldrh	r2, [r7, #4]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d301      	bcc.n	8009a3a <_Z28ILI9341_Draw_Horizontal_Linetttt+0x3a>
 8009a36:	2301      	movs	r3, #1
 8009a38:	e000      	b.n	8009a3c <_Z28ILI9341_Draw_Horizontal_Linetttt+0x3c>
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d124      	bne.n	8009a8a <_Z28ILI9341_Draw_Horizontal_Linetttt+0x8a>
		return;
	if ((X + Width - 1) >= LCD_WIDTH)
 8009a40:	88fa      	ldrh	r2, [r7, #6]
 8009a42:	887b      	ldrh	r3, [r7, #2]
 8009a44:	4413      	add	r3, r2
 8009a46:	4a13      	ldr	r2, [pc, #76]	@ (8009a94 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x94>)
 8009a48:	8812      	ldrh	r2, [r2, #0]
 8009a4a:	b292      	uxth	r2, r2
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	bfcc      	ite	gt
 8009a50:	2301      	movgt	r3, #1
 8009a52:	2300      	movle	r3, #0
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d005      	beq.n	8009a66 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x66>
	{
		Width = LCD_WIDTH - X;
 8009a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8009a94 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x94>)
 8009a5c:	881b      	ldrh	r3, [r3, #0]
 8009a5e:	b29a      	uxth	r2, r3
 8009a60:	88fb      	ldrh	r3, [r7, #6]
 8009a62:	1ad3      	subs	r3, r2, r3
 8009a64:	807b      	strh	r3, [r7, #2]
	}
	ILI9341_Set_Address(X, Y, X + Width - 1, Y);
 8009a66:	88fa      	ldrh	r2, [r7, #6]
 8009a68:	887b      	ldrh	r3, [r7, #2]
 8009a6a:	4413      	add	r3, r2
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	b29a      	uxth	r2, r3
 8009a72:	88bb      	ldrh	r3, [r7, #4]
 8009a74:	88b9      	ldrh	r1, [r7, #4]
 8009a76:	88f8      	ldrh	r0, [r7, #6]
 8009a78:	f7ff fbf8 	bl	800926c <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, Width);
 8009a7c:	887a      	ldrh	r2, [r7, #2]
 8009a7e:	883b      	ldrh	r3, [r7, #0]
 8009a80:	4611      	mov	r1, r2
 8009a82:	4618      	mov	r0, r3
 8009a84:	f7ff fdc6 	bl	8009614 <_Z25ILI9341_Draw_Colour_Bursttm>
 8009a88:	e000      	b.n	8009a8c <_Z28ILI9341_Draw_Horizontal_Linetttt+0x8c>
		return;
 8009a8a:	bf00      	nop
}
 8009a8c:	370c      	adds	r7, #12
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd90      	pop	{r4, r7, pc}
 8009a92:	bf00      	nop
 8009a94:	20000002 	.word	0x20000002
 8009a98:	20000000 	.word	0x20000000

08009a9c <_Z26ILI9341_Draw_Vertical_Linetttt>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height,
		uint16_t Colour)
{
 8009a9c:	b590      	push	{r4, r7, lr}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	4604      	mov	r4, r0
 8009aa4:	4608      	mov	r0, r1
 8009aa6:	4611      	mov	r1, r2
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	4623      	mov	r3, r4
 8009aac:	80fb      	strh	r3, [r7, #6]
 8009aae:	4603      	mov	r3, r0
 8009ab0:	80bb      	strh	r3, [r7, #4]
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	807b      	strh	r3, [r7, #2]
 8009ab6:	4613      	mov	r3, r2
 8009ab8:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 8009aba:	4b1d      	ldr	r3, [pc, #116]	@ (8009b30 <_Z26ILI9341_Draw_Vertical_Linetttt+0x94>)
 8009abc:	881b      	ldrh	r3, [r3, #0]
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	88fa      	ldrh	r2, [r7, #6]
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d205      	bcs.n	8009ad2 <_Z26ILI9341_Draw_Vertical_Linetttt+0x36>
 8009ac6:	4b1b      	ldr	r3, [pc, #108]	@ (8009b34 <_Z26ILI9341_Draw_Vertical_Linetttt+0x98>)
 8009ac8:	881b      	ldrh	r3, [r3, #0]
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	88ba      	ldrh	r2, [r7, #4]
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d301      	bcc.n	8009ad6 <_Z26ILI9341_Draw_Vertical_Linetttt+0x3a>
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e000      	b.n	8009ad8 <_Z26ILI9341_Draw_Vertical_Linetttt+0x3c>
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d124      	bne.n	8009b26 <_Z26ILI9341_Draw_Vertical_Linetttt+0x8a>
		return;
	if ((Y + Height - 1) >= LCD_HEIGHT)
 8009adc:	88ba      	ldrh	r2, [r7, #4]
 8009ade:	887b      	ldrh	r3, [r7, #2]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	4a14      	ldr	r2, [pc, #80]	@ (8009b34 <_Z26ILI9341_Draw_Vertical_Linetttt+0x98>)
 8009ae4:	8812      	ldrh	r2, [r2, #0]
 8009ae6:	b292      	uxth	r2, r2
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	bfcc      	ite	gt
 8009aec:	2301      	movgt	r3, #1
 8009aee:	2300      	movle	r3, #0
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d005      	beq.n	8009b02 <_Z26ILI9341_Draw_Vertical_Linetttt+0x66>
	{
		Height = LCD_HEIGHT - Y;
 8009af6:	4b0f      	ldr	r3, [pc, #60]	@ (8009b34 <_Z26ILI9341_Draw_Vertical_Linetttt+0x98>)
 8009af8:	881b      	ldrh	r3, [r3, #0]
 8009afa:	b29a      	uxth	r2, r3
 8009afc:	88bb      	ldrh	r3, [r7, #4]
 8009afe:	1ad3      	subs	r3, r2, r3
 8009b00:	807b      	strh	r3, [r7, #2]
	}
	ILI9341_Set_Address(X, Y, X, Y + Height - 1);
 8009b02:	88ba      	ldrh	r2, [r7, #4]
 8009b04:	887b      	ldrh	r3, [r7, #2]
 8009b06:	4413      	add	r3, r2
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	3b01      	subs	r3, #1
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	88fa      	ldrh	r2, [r7, #6]
 8009b10:	88b9      	ldrh	r1, [r7, #4]
 8009b12:	88f8      	ldrh	r0, [r7, #6]
 8009b14:	f7ff fbaa 	bl	800926c <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, Height);
 8009b18:	887a      	ldrh	r2, [r7, #2]
 8009b1a:	883b      	ldrh	r3, [r7, #0]
 8009b1c:	4611      	mov	r1, r2
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7ff fd78 	bl	8009614 <_Z25ILI9341_Draw_Colour_Bursttm>
 8009b24:	e000      	b.n	8009b28 <_Z26ILI9341_Draw_Vertical_Linetttt+0x8c>
		return;
 8009b26:	bf00      	nop
}
 8009b28:	370c      	adds	r7, #12
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd90      	pop	{r4, r7, pc}
 8009b2e:	bf00      	nop
 8009b30:	20000002 	.word	0x20000002
 8009b34:	20000000 	.word	0x20000000

08009b38 <_ZN19CManejadorControlesC1Ev>:

#include <ManejadorControles/CManejadorControles.hpp>
#include "Constantes.hpp"
#include "Uart/Uart.hpp"

CManejadorControles::CManejadorControles()
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b086      	sub	sp, #24
 8009b3c:	af04      	add	r7, sp, #16
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	4618      	mov	r0, r3
 8009b44:	f7f7 fa88 	bl	8001058 <_ZN22CManejadorEventosBotonC1Ev>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	3304      	adds	r3, #4
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f7f8 f97d 	bl	8001e4c <_ZN24CManejadorEventosEncoderC1Ev>
 8009b52:	4a52      	ldr	r2, [pc, #328]	@ (8009c9c <_ZN19CManejadorControlesC1Ev+0x164>)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	601a      	str	r2, [r3, #0]
 8009b58:	4a51      	ldr	r2, [pc, #324]	@ (8009ca0 <_ZN19CManejadorControlesC1Ev+0x168>)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	605a      	str	r2, [r3, #4]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	609a      	str	r2, [r3, #8]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	330c      	adds	r3, #12
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f7f7 f99d 	bl	8000ea8 <_ZN15CManejadorBotonC1Ev>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	332c      	adds	r3, #44	@ 0x2c
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7f7 f998 	bl	8000ea8 <_ZN15CManejadorBotonC1Ev>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	334c      	adds	r3, #76	@ 0x4c
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7f7 f993 	bl	8000ea8 <_ZN15CManejadorBotonC1Ev>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	336c      	adds	r3, #108	@ 0x6c
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7f7 f98e 	bl	8000ea8 <_ZN15CManejadorBotonC1Ev>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	338c      	adds	r3, #140	@ 0x8c
 8009b90:	4618      	mov	r0, r3
 8009b92:	f7f7 ffcf 	bl	8001b34 <_ZN8CEncoderC1Ev>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	33e0      	adds	r3, #224	@ 0xe0
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7f7 fb2a 	bl	80011f4 <_ZN20ControlVelocidadAireC1Ev>
{
	// TODO Auto-generated constructor stub
	//configuracion de los botones
	BotonMemoria1.Configurar(GPIOC, GPIO_PIN_13, 1);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f103 000c 	add.w	r0, r3, #12
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009bac:	493d      	ldr	r1, [pc, #244]	@ (8009ca4 <_ZN19CManejadorControlesC1Ev+0x16c>)
 8009bae:	f7f7 f9bb 	bl	8000f28 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonMemoria1.AsignaManejadorEventos(this);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	330c      	adds	r3, #12
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	4611      	mov	r1, r2
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7f7 f9fe 	bl	8000fbc <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonMemoria1.Init();
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	330c      	adds	r3, #12
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f7f7 f9c9 	bl	8000f5c <_ZN15CManejadorBoton4InitEv>

	BotonMemoria2.Configurar(GPIOA, GPIO_PIN_6, 2);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f103 002c 	add.w	r0, r3, #44	@ 0x2c
 8009bd0:	2302      	movs	r3, #2
 8009bd2:	2240      	movs	r2, #64	@ 0x40
 8009bd4:	4934      	ldr	r1, [pc, #208]	@ (8009ca8 <_ZN19CManejadorControlesC1Ev+0x170>)
 8009bd6:	f7f7 f9a7 	bl	8000f28 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonMemoria2.AsignaManejadorEventos(this);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	332c      	adds	r3, #44	@ 0x2c
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	4611      	mov	r1, r2
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7f7 f9ea 	bl	8000fbc <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonMemoria2.Init();
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	332c      	adds	r3, #44	@ 0x2c
 8009bec:	4618      	mov	r0, r3
 8009bee:	f7f7 f9b5 	bl	8000f5c <_ZN15CManejadorBoton4InitEv>

	BotonMemoria3.Configurar(GPIOB, GPIO_PIN_10, 3);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 8009bf8:	2303      	movs	r3, #3
 8009bfa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009bfe:	492b      	ldr	r1, [pc, #172]	@ (8009cac <_ZN19CManejadorControlesC1Ev+0x174>)
 8009c00:	f7f7 f992 	bl	8000f28 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonMemoria3.AsignaManejadorEventos(this);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	334c      	adds	r3, #76	@ 0x4c
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	4611      	mov	r1, r2
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f7f7 f9d5 	bl	8000fbc <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonMemoria3.Init();
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	334c      	adds	r3, #76	@ 0x4c
 8009c16:	4618      	mov	r0, r3
 8009c18:	f7f7 f9a0 	bl	8000f5c <_ZN15CManejadorBoton4InitEv>

	BotonManual.Configurar(GPIOB, GPIO_PIN_15, 4);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8009c22:	2304      	movs	r3, #4
 8009c24:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8009c28:	4920      	ldr	r1, [pc, #128]	@ (8009cac <_ZN19CManejadorControlesC1Ev+0x174>)
 8009c2a:	f7f7 f97d 	bl	8000f28 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonManual.AsignaManejadorEventos(this);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	336c      	adds	r3, #108	@ 0x6c
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	4611      	mov	r1, r2
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7f7 f9c0 	bl	8000fbc <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonManual.Init();
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	336c      	adds	r3, #108	@ 0x6c
 8009c40:	4618      	mov	r0, r3
 8009c42:	f7f7 f98b 	bl	8000f5c <_ZN15CManejadorBoton4InitEv>

	Encoder.Configurar(GPIOB, GPIO_PIN_2, GPIOB, GPIO_PIN_12, GPIOB,
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f103 008c 	add.w	r0, r3, #140	@ 0x8c
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	9303      	str	r3, [sp, #12]
 8009c50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009c54:	9302      	str	r3, [sp, #8]
 8009c56:	4b15      	ldr	r3, [pc, #84]	@ (8009cac <_ZN19CManejadorControlesC1Ev+0x174>)
 8009c58:	9301      	str	r3, [sp, #4]
 8009c5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009c5e:	9300      	str	r3, [sp, #0]
 8009c60:	4b12      	ldr	r3, [pc, #72]	@ (8009cac <_ZN19CManejadorControlesC1Ev+0x174>)
 8009c62:	2204      	movs	r2, #4
 8009c64:	4911      	ldr	r1, [pc, #68]	@ (8009cac <_ZN19CManejadorControlesC1Ev+0x174>)
 8009c66:	f7f7 ffaf 	bl	8001bc8 <_ZN8CEncoder10ConfigurarEP12GPIO_TypeDeftS1_tS1_ti>
			GPIO_PIN_8, 1);
	Encoder.AsignaManejadorEventos(this);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f103 028c 	add.w	r2, r3, #140	@ 0x8c
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	3304      	adds	r3, #4
 8009c74:	4619      	mov	r1, r3
 8009c76:	4610      	mov	r0, r2
 8009c78:	f7f8 f847 	bl	8001d0a <_ZN8CEncoder22AsignaManejadorEventosEP24CManejadorEventosEncoder>
	Encoder.Init();
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	338c      	adds	r3, #140	@ 0x8c
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7f8 f804 	bl	8001c8e <_ZN8CEncoder4InitEv>

	controlVelocidadAire.Inicializa();
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	33e0      	adds	r3, #224	@ 0xe0
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f7f7 fae2 	bl	8001254 <_ZN20ControlVelocidadAire10InicializaEv>

}
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	4618      	mov	r0, r3
 8009c94:	3708      	adds	r7, #8
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	080159ec 	.word	0x080159ec
 8009ca0:	08015a34 	.word	0x08015a34
 8009ca4:	40020800 	.word	0x40020800
 8009ca8:	40020000 	.word	0x40020000
 8009cac:	40020400 	.word	0x40020400

08009cb0 <_ZN19CManejadorControlesD1Ev>:

CManejadorControles::~CManejadorControles()
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b082      	sub	sp, #8
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	4a18      	ldr	r2, [pc, #96]	@ (8009d1c <_ZN19CManejadorControlesD1Ev+0x6c>)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	601a      	str	r2, [r3, #0]
 8009cbe:	4a18      	ldr	r2, [pc, #96]	@ (8009d20 <_ZN19CManejadorControlesD1Ev+0x70>)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	605a      	str	r2, [r3, #4]
{
	// TODO Auto-generated destructor stub
}
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	33e0      	adds	r3, #224	@ 0xe0
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7f7 faa3 	bl	8001214 <_ZN20ControlVelocidadAireD1Ev>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	338c      	adds	r3, #140	@ 0x8c
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f7f7 ff56 	bl	8001b84 <_ZN8CEncoderD1Ev>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	336c      	adds	r3, #108	@ 0x6c
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f7f7 f903 	bl	8000ee8 <_ZN15CManejadorBotonD1Ev>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	334c      	adds	r3, #76	@ 0x4c
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f7f7 f8fe 	bl	8000ee8 <_ZN15CManejadorBotonD1Ev>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	332c      	adds	r3, #44	@ 0x2c
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7f7 f8f9 	bl	8000ee8 <_ZN15CManejadorBotonD1Ev>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	330c      	adds	r3, #12
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7f7 f8f4 	bl	8000ee8 <_ZN15CManejadorBotonD1Ev>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	3304      	adds	r3, #4
 8009d04:	4618      	mov	r0, r3
 8009d06:	f7f8 f8b1 	bl	8001e6c <_ZN24CManejadorEventosEncoderD1Ev>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f7f7 f9b3 	bl	8001078 <_ZN22CManejadorEventosBotonD1Ev>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	4618      	mov	r0, r3
 8009d16:	3708      	adds	r7, #8
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}
 8009d1c:	080159ec 	.word	0x080159ec
 8009d20:	08015a34 	.word	0x08015a34

08009d24 <_ZThn4_N19CManejadorControlesD1Ev>:
	virtual void EncoderDecremento();


public:
	CManejadorControles();
	virtual ~CManejadorControles();
 8009d24:	f1a0 0004 	sub.w	r0, r0, #4
 8009d28:	f7ff bfc2 	b.w	8009cb0 <_ZN19CManejadorControlesD1Ev>

08009d2c <_ZN19CManejadorControlesD0Ev>:
CManejadorControles::~CManejadorControles()
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
}
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f7ff ffbb 	bl	8009cb0 <_ZN19CManejadorControlesD1Ev>
 8009d3a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f007 fb6a 	bl	8011418 <_ZdlPvj>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	4618      	mov	r0, r3
 8009d48:	3708      	adds	r7, #8
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <_ZThn4_N19CManejadorControlesD0Ev>:
 8009d4e:	f1a0 0004 	sub.w	r0, r0, #4
 8009d52:	f7ff bfeb 	b.w	8009d2c <_ZN19CManejadorControlesD0Ev>

08009d56 <_ZN19CManejadorControles17GPIO_INTERRUPCIONEi>:

void CManejadorControles::GPIO_INTERRUPCION(int GPIO_Pin)
{
 8009d56:	b580      	push	{r7, lr}
 8009d58:	b082      	sub	sp, #8
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
 8009d5e:	6039      	str	r1, [r7, #0]
	ProcesaBotones(GPIO_Pin);
 8009d60:	6839      	ldr	r1, [r7, #0]
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 f80b 	bl	8009d7e <_ZN19CManejadorControles14ProcesaBotonesEi>
	InterrupcionEncoder(GPIO_Pin);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	3338      	adds	r3, #56	@ 0x38
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	6839      	ldr	r1, [r7, #0]
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	4798      	blx	r3
}
 8009d76:	bf00      	nop
 8009d78:	3708      	adds	r7, #8
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}

08009d7e <_ZN19CManejadorControles14ProcesaBotonesEi>:

void CManejadorControles::ProcesaBotones(int gpio_pin)
{
 8009d7e:	b580      	push	{r7, lr}
 8009d80:	b082      	sub	sp, #8
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	6078      	str	r0, [r7, #4]
 8009d86:	6039      	str	r1, [r7, #0]
	BotonMemoria1.Procesa(gpio_pin);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	330c      	adds	r3, #12
 8009d8c:	6839      	ldr	r1, [r7, #0]
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f7f7 f922 	bl	8000fd8 <_ZN15CManejadorBoton7ProcesaEi>
	BotonMemoria2.Procesa(gpio_pin);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	332c      	adds	r3, #44	@ 0x2c
 8009d98:	6839      	ldr	r1, [r7, #0]
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7f7 f91c 	bl	8000fd8 <_ZN15CManejadorBoton7ProcesaEi>
	BotonMemoria3.Procesa(gpio_pin);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	334c      	adds	r3, #76	@ 0x4c
 8009da4:	6839      	ldr	r1, [r7, #0]
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7f7 f916 	bl	8000fd8 <_ZN15CManejadorBoton7ProcesaEi>
///	SerialPrintf("\r\n ProcesaBotones");

	BotonManual.Procesa(gpio_pin);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	336c      	adds	r3, #108	@ 0x6c
 8009db0:	6839      	ldr	r1, [r7, #0]
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7f7 f910 	bl	8000fd8 <_ZN15CManejadorBoton7ProcesaEi>
}
 8009db8:	bf00      	nop
 8009dba:	3708      	adds	r7, #8
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <_ZN19CManejadorControles19InterrupcionEncoderEi>:
void CManejadorControles::InterrupcionEncoder(int GPIO_Pin)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
	Encoder.Procesa(GPIO_Pin);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	338c      	adds	r3, #140	@ 0x8c
 8009dce:	6839      	ldr	r1, [r7, #0]
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f7f7 ffc0 	bl	8001d56 <_ZN8CEncoder7ProcesaEi>
}
 8009dd6:	bf00      	nop
 8009dd8:	3708      	adds	r7, #8
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <_ZN19CManejadorControles12GetNivelAireEv>:

//regresa el nivel de aire setado
int CManejadorControles::GetNivelAire()
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b082      	sub	sp, #8
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
	return controlVelocidadAire.LeeVelocidad();
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	33e0      	adds	r3, #224	@ 0xe0
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7f7 faac 	bl	8001348 <_ZN20ControlVelocidadAire12LeeVelocidadEv>
 8009df0:	4603      	mov	r3, r0
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3708      	adds	r7, #8
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}

08009dfa <_ZN19CManejadorControles18BotonUnoClickEventEv>:

//eventros del boton uno
void CManejadorControles::BotonUnoClickEvent()
{
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b082      	sub	sp, #8
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	689b      	ldr	r3, [r3, #8]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d009      	beq.n	8009e1e <_ZN19CManejadorControles18BotonUnoClickEventEv+0x24>
		return;
	ManejadorControles->OnBotonUnoClickEvent();
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	689a      	ldr	r2, [r3, #8]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	689b      	ldr	r3, [r3, #8]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	3310      	adds	r3, #16
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4610      	mov	r0, r2
 8009e1a:	4798      	blx	r3
 8009e1c:	e000      	b.n	8009e20 <_ZN19CManejadorControles18BotonUnoClickEventEv+0x26>
		return;
 8009e1e:	bf00      	nop

}
 8009e20:	3708      	adds	r7, #8
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}

08009e26 <_ZN19CManejadorControles18BotonDosClickEventEv>:
//eventros del boton dos
void CManejadorControles::BotonDosClickEvent()
{
 8009e26:	b580      	push	{r7, lr}
 8009e28:	b082      	sub	sp, #8
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	689b      	ldr	r3, [r3, #8]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d009      	beq.n	8009e4a <_ZN19CManejadorControles18BotonDosClickEventEv+0x24>
		return;
	ManejadorControles->OnBotonDosClickEvent();
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	689a      	ldr	r2, [r3, #8]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	3314      	adds	r3, #20
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4610      	mov	r0, r2
 8009e46:	4798      	blx	r3
 8009e48:	e000      	b.n	8009e4c <_ZN19CManejadorControles18BotonDosClickEventEv+0x26>
		return;
 8009e4a:	bf00      	nop

}
 8009e4c:	3708      	adds	r7, #8
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}

08009e52 <_ZN19CManejadorControles19BotonTresClickEventEv>:
//eventros del boton tres
void CManejadorControles::BotonTresClickEvent()
{
 8009e52:	b580      	push	{r7, lr}
 8009e54:	b082      	sub	sp, #8
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	689b      	ldr	r3, [r3, #8]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d009      	beq.n	8009e76 <_ZN19CManejadorControles19BotonTresClickEventEv+0x24>
		return;
	ManejadorControles->OnBotonTresClickEvent();
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	689a      	ldr	r2, [r3, #8]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	689b      	ldr	r3, [r3, #8]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	3318      	adds	r3, #24
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4610      	mov	r0, r2
 8009e72:	4798      	blx	r3
 8009e74:	e000      	b.n	8009e78 <_ZN19CManejadorControles19BotonTresClickEventEv+0x26>
		return;
 8009e76:	bf00      	nop

}
 8009e78:	3708      	adds	r7, #8
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}

08009e7e <_ZN19CManejadorControles21BotonCuatroClickEventEv>:
//eventros del boton Cuatro
void CManejadorControles::BotonCuatroClickEvent()
{
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	b082      	sub	sp, #8
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	689b      	ldr	r3, [r3, #8]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d009      	beq.n	8009ea2 <_ZN19CManejadorControles21BotonCuatroClickEventEv+0x24>
		return;
	ManejadorControles->OnBotonCuatroClickEvent();
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	689a      	ldr	r2, [r3, #8]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	331c      	adds	r3, #28
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4610      	mov	r0, r2
 8009e9e:	4798      	blx	r3
 8009ea0:	e000      	b.n	8009ea4 <_ZN19CManejadorControles21BotonCuatroClickEventEv+0x26>
		return;
 8009ea2:	bf00      	nop

}
 8009ea4:	3708      	adds	r7, #8
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}

08009eaa <_ZN19CManejadorControles22BotonPerillaClickEventEv>:
//eventros del boton Perilla
void CManejadorControles::BotonPerillaClickEvent()
{
 8009eaa:	b580      	push	{r7, lr}
 8009eac:	b082      	sub	sp, #8
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	689b      	ldr	r3, [r3, #8]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d009      	beq.n	8009ece <_ZN19CManejadorControles22BotonPerillaClickEventEv+0x24>
		return;
	ManejadorControles->OnBotonPerillaClickEvent();
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	689a      	ldr	r2, [r3, #8]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	3320      	adds	r3, #32
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4610      	mov	r0, r2
 8009eca:	4798      	blx	r3
 8009ecc:	e000      	b.n	8009ed0 <_ZN19CManejadorControles22BotonPerillaClickEventEv+0x26>
		return;
 8009ece:	bf00      	nop

}
 8009ed0:	3708      	adds	r7, #8
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <_ZN19CManejadorControles17EncoderIncrementoEv>:
//eventos del encoder
void CManejadorControles::EncoderIncremento()
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b082      	sub	sp, #8
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	689b      	ldr	r3, [r3, #8]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d009      	beq.n	8009efa <_ZN19CManejadorControles17EncoderIncrementoEv+0x24>
		return;
	ManejadorControles->OnPerillaIncremento();
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	689a      	ldr	r2, [r3, #8]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	3324      	adds	r3, #36	@ 0x24
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4610      	mov	r0, r2
 8009ef6:	4798      	blx	r3
 8009ef8:	e000      	b.n	8009efc <_ZN19CManejadorControles17EncoderIncrementoEv+0x26>
		return;
 8009efa:	bf00      	nop

}
 8009efc:	3708      	adds	r7, #8
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <_ZN19CManejadorControles17EncoderDecrementoEv>:
void CManejadorControles::EncoderDecremento()
{
 8009f02:	b580      	push	{r7, lr}
 8009f04:	b082      	sub	sp, #8
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	689b      	ldr	r3, [r3, #8]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d009      	beq.n	8009f26 <_ZN19CManejadorControles17EncoderDecrementoEv+0x24>
		return;
	ManejadorControles->OnPerillaDecremento();
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	689a      	ldr	r2, [r3, #8]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	689b      	ldr	r3, [r3, #8]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	3328      	adds	r3, #40	@ 0x28
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4610      	mov	r0, r2
 8009f22:	4798      	blx	r3
 8009f24:	e000      	b.n	8009f28 <_ZN19CManejadorControles17EncoderDecrementoEv+0x26>
		return;
 8009f26:	bf00      	nop

}
 8009f28:	3708      	adds	r7, #8
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
	...

08009f30 <_ZN19CManejadorControles17OnBotonClickEventEi>:

void CManejadorControles::OnBotonClickEvent(int idBoton)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
	switch (idBoton)
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	3b01      	subs	r3, #1
 8009f3e:	2b03      	cmp	r3, #3
 8009f40:	d826      	bhi.n	8009f90 <_ZN19CManejadorControles17OnBotonClickEventEi+0x60>
 8009f42:	a201      	add	r2, pc, #4	@ (adr r2, 8009f48 <_ZN19CManejadorControles17OnBotonClickEventEi+0x18>)
 8009f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f48:	08009f59 	.word	0x08009f59
 8009f4c:	08009f67 	.word	0x08009f67
 8009f50:	08009f75 	.word	0x08009f75
 8009f54:	08009f83 	.word	0x08009f83
	{
	case BOTON_MEMORIA1:
		BotonUnoClickEvent();
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	3318      	adds	r3, #24
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	4798      	blx	r3
		break;
 8009f64:	e014      	b.n	8009f90 <_ZN19CManejadorControles17OnBotonClickEventEi+0x60>
	case BOTON_MEMORIA2:
		BotonDosClickEvent();
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	331c      	adds	r3, #28
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	4798      	blx	r3
		break;
 8009f72:	e00d      	b.n	8009f90 <_ZN19CManejadorControles17OnBotonClickEventEi+0x60>
	case BOTON_MEMORIA3:
		BotonTresClickEvent();
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	3320      	adds	r3, #32
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	4798      	blx	r3
		break;
 8009f80:	e006      	b.n	8009f90 <_ZN19CManejadorControles17OnBotonClickEventEi+0x60>
	case BOTON_MANUAL:
		BotonCuatroClickEvent();
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	3324      	adds	r3, #36	@ 0x24
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	4798      	blx	r3
		break;
 8009f8e:	bf00      	nop
	}
}
 8009f90:	bf00      	nop
 8009f92:	3708      	adds	r7, #8
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <_ZN19CManejadorControles19OnIncrementoEncoderEi>:


//eventros del encoder
void CManejadorControles::OnIncrementoEncoder(int id_Encoder)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
	EncoderIncremento();
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	332c      	adds	r3, #44	@ 0x2c
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	4798      	blx	r3
}
 8009fae:	bf00      	nop
 8009fb0:	3708      	adds	r7, #8
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}

08009fb6 <_ZThn4_N19CManejadorControles19OnIncrementoEncoderEi>:
	virtual void OnIncrementoEncoder(int id_Encoder);
 8009fb6:	f1a0 0004 	sub.w	r0, r0, #4
 8009fba:	f7ff bfed 	b.w	8009f98 <_ZN19CManejadorControles19OnIncrementoEncoderEi>

08009fbe <_ZN19CManejadorControles19OnDecrementoEncoderEi>:

void CManejadorControles::OnDecrementoEncoder(int id_Encoder)
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b082      	sub	sp, #8
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
 8009fc6:	6039      	str	r1, [r7, #0]
	EncoderDecremento();
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	3330      	adds	r3, #48	@ 0x30
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	4798      	blx	r3
}
 8009fd4:	bf00      	nop
 8009fd6:	3708      	adds	r7, #8
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <_ZThn4_N19CManejadorControles19OnDecrementoEncoderEi>:
	virtual void OnDecrementoEncoder(int id_Encoder);
 8009fdc:	f1a0 0004 	sub.w	r0, r0, #4
 8009fe0:	f7ff bfed 	b.w	8009fbe <_ZN19CManejadorControles19OnDecrementoEncoderEi>

08009fe4 <_ZN19CManejadorControles24OnBotonEncoderClickEventEi>:

void CManejadorControles::OnBotonEncoderClickEvent(int id_Encoder )
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b082      	sub	sp, #8
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	6039      	str	r1, [r7, #0]
	BotonPerillaClickEvent();
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	3328      	adds	r3, #40	@ 0x28
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	4798      	blx	r3
}
 8009ffa:	bf00      	nop
 8009ffc:	3708      	adds	r7, #8
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <_ZThn4_N19CManejadorControles24OnBotonEncoderClickEventEi>:
	virtual void OnBotonEncoderClickEvent(int id_Encoder);
 800a002:	f1a0 0004 	sub.w	r0, r0, #4
 800a006:	f7ff bfed 	b.w	8009fe4 <_ZN19CManejadorControles24OnBotonEncoderClickEventEi>

0800a00a <_ZN19CManejadorControles21SetManejadorControlesEP26CManejadorEventosControles>:




void CManejadorControles::SetManejadorControles(CManejadorEventosControles *obj)
{
 800a00a:	b480      	push	{r7}
 800a00c:	b083      	sub	sp, #12
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
 800a012:	6039      	str	r1, [r7, #0]
	ManejadorControles = obj;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	683a      	ldr	r2, [r7, #0]
 800a018:	609a      	str	r2, [r3, #8]
}
 800a01a:	bf00      	nop
 800a01c:	370c      	adds	r7, #12
 800a01e:	46bd      	mov	sp, r7
 800a020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a024:	4770      	bx	lr
	...

0800a028 <_ZN26CManejadorEventosControlesC1Ev>:
 *      Author: W10
 */

#include <ManejadorControles/CManejadorEventosControles.hpp>

CManejadorEventosControles::CManejadorEventosControles()
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	4a04      	ldr	r2, [pc, #16]	@ (800a044 <_ZN26CManejadorEventosControlesC1Ev+0x1c>)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	4618      	mov	r0, r3
 800a03a:	370c      	adds	r7, #12
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr
 800a044:	08015a50 	.word	0x08015a50

0800a048 <_ZN26CManejadorEventosControlesD1Ev>:

CManejadorEventosControles::~CManejadorEventosControles()
 800a048:	b480      	push	{r7}
 800a04a:	b083      	sub	sp, #12
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	4a04      	ldr	r2, [pc, #16]	@ (800a064 <_ZN26CManejadorEventosControlesD1Ev+0x1c>)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	4618      	mov	r0, r3
 800a05a:	370c      	adds	r7, #12
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr
 800a064:	08015a50 	.word	0x08015a50

0800a068 <_ZN26CManejadorEventosControlesD0Ev>:
CManejadorEventosControles::~CManejadorEventosControles()
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
}
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f7ff ffe9 	bl	800a048 <_ZN26CManejadorEventosControlesD1Ev>
 800a076:	2104      	movs	r1, #4
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f007 f9cd 	bl	8011418 <_ZdlPvj>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	4618      	mov	r0, r3
 800a082:	3708      	adds	r7, #8
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <_ZN26CManejadorEventosControles22OnTemperaturaRealEventEi>:

void CManejadorEventosControles::OnTemperaturaRealEvent(int temperatura)
{
 800a088:	b480      	push	{r7}
 800a08a:	b083      	sub	sp, #12
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	6039      	str	r1, [r7, #0]

}
 800a092:	bf00      	nop
 800a094:	370c      	adds	r7, #12
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr

0800a09e <_ZN26CManejadorEventosControles16OnNivelAireEventEi>:
void CManejadorEventosControles::OnNivelAireEvent(int aire)
{
 800a09e:	b480      	push	{r7}
 800a0a0:	b083      	sub	sp, #12
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
 800a0a6:	6039      	str	r1, [r7, #0]

}
 800a0a8:	bf00      	nop
 800a0aa:	370c      	adds	r7, #12
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr

0800a0b4 <_ZN26CManejadorEventosControles20OnBotonUnoClickEventEv>:
//eventros del boton uno
void CManejadorEventosControles::OnBotonUnoClickEvent()
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]

}
 800a0bc:	bf00      	nop
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <_ZN26CManejadorEventosControles20OnBotonDosClickEventEv>:
//eventros del boton dos
void CManejadorEventosControles::OnBotonDosClickEvent()
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]

}
 800a0d0:	bf00      	nop
 800a0d2:	370c      	adds	r7, #12
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr

0800a0dc <_ZN26CManejadorEventosControles21OnBotonTresClickEventEv>:
//eventros del boton tres
void CManejadorEventosControles::OnBotonTresClickEvent()
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]

}
 800a0e4:	bf00      	nop
 800a0e6:	370c      	adds	r7, #12
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <_ZN26CManejadorEventosControles23OnBotonCuatroClickEventEv>:
//eventros del boton Cuatro
void CManejadorEventosControles::OnBotonCuatroClickEvent()
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b083      	sub	sp, #12
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]

}
 800a0f8:	bf00      	nop
 800a0fa:	370c      	adds	r7, #12
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <_ZN26CManejadorEventosControles24OnBotonPerillaClickEventEv>:
//eventros del boton Perilla
void CManejadorEventosControles::OnBotonPerillaClickEvent()
{
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]

}
 800a10c:	bf00      	nop
 800a10e:	370c      	adds	r7, #12
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <_ZN26CManejadorEventosControles19OnPerillaIncrementoEv>:
//eventos del Encoder
void CManejadorEventosControles::OnPerillaIncremento()
{
 800a118:	b480      	push	{r7}
 800a11a:	b083      	sub	sp, #12
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]

}
 800a120:	bf00      	nop
 800a122:	370c      	adds	r7, #12
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr

0800a12c <_ZN26CManejadorEventosControles19OnPerillaDecrementoEv>:
void CManejadorEventosControles::OnPerillaDecremento()
{
 800a12c:	b480      	push	{r7}
 800a12e:	b083      	sub	sp, #12
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]

}
 800a134:	bf00      	nop
 800a136:	370c      	adds	r7, #12
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr

0800a140 <_ZN3PwmC1Ev>:

#include <PWM/Pwm.hpp>
#include "stm32f4xx_hal.h"
#include "stdlib.h"

Pwm::Pwm()
 800a140:	b480      	push	{r7}
 800a142:	b083      	sub	sp, #12
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	4a04      	ldr	r2, [pc, #16]	@ (800a15c <_ZN3PwmC1Ev+0x1c>)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	4618      	mov	r0, r3
 800a152:	370c      	adds	r7, #12
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr
 800a15c:	08015a84 	.word	0x08015a84

0800a160 <_ZN3PwmD1Ev>:

Pwm::~Pwm()
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	4a04      	ldr	r2, [pc, #16]	@ (800a17c <_ZN3PwmD1Ev+0x1c>)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	4618      	mov	r0, r3
 800a172:	370c      	adds	r7, #12
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr
 800a17c:	08015a84 	.word	0x08015a84

0800a180 <_ZN3PwmD0Ev>:
Pwm::~Pwm()
 800a180:	b580      	push	{r7, lr}
 800a182:	b082      	sub	sp, #8
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
}
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f7ff ffe9 	bl	800a160 <_ZN3PwmD1Ev>
 800a18e:	214c      	movs	r1, #76	@ 0x4c
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f007 f941 	bl	8011418 <_ZdlPvj>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	4618      	mov	r0, r3
 800a19a:	3708      	adds	r7, #8
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <_ZN3Pwm4InitEP11TIM_TypeDefii>:
void Pwm::Init(TIM_TypeDef * timer, int chanel,int periodo)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b092      	sub	sp, #72	@ 0x48
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	607a      	str	r2, [r7, #4]
 800a1ac:	603b      	str	r3, [r7, #0]

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a1ae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	601a      	str	r2, [r3, #0]
 800a1b6:	605a      	str	r2, [r3, #4]
 800a1b8:	609a      	str	r2, [r3, #8]
 800a1ba:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a1bc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	601a      	str	r2, [r3, #0]
 800a1c4:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 800a1c6:	f107 0314 	add.w	r3, r7, #20
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	601a      	str	r2, [r3, #0]
 800a1ce:	605a      	str	r2, [r3, #4]
 800a1d0:	609a      	str	r2, [r3, #8]
 800a1d2:	60da      	str	r2, [r3, #12]
 800a1d4:	611a      	str	r2, [r3, #16]
 800a1d6:	615a      	str	r2, [r3, #20]
 800a1d8:	619a      	str	r2, [r3, #24]
	  //periodo=99;
	  Htim.Instance = timer;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	68ba      	ldr	r2, [r7, #8]
 800a1de:	605a      	str	r2, [r3, #4]
	  Htim.Init.Prescaler = 64;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2240      	movs	r2, #64	@ 0x40
 800a1e4:	609a      	str	r2, [r3, #8]
	  Htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	60da      	str	r2, [r3, #12]
	  Htim.Init.Period = periodo;
 800a1ec:	683a      	ldr	r2, [r7, #0]
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	611a      	str	r2, [r3, #16]
	  Htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	615a      	str	r2, [r3, #20]
	  Htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2280      	movs	r2, #128	@ 0x80
 800a1fc:	61da      	str	r2, [r3, #28]
	  if (HAL_TIM_Base_Init(&Htim) != HAL_OK)
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	3304      	adds	r3, #4
 800a202:	4618      	mov	r0, r3
 800a204:	f005 fd44 	bl	800fc90 <HAL_TIM_Base_Init>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	bf14      	ite	ne
 800a20e:	2301      	movne	r3, #1
 800a210:	2300      	moveq	r3, #0
 800a212:	b2db      	uxtb	r3, r3
 800a214:	2b00      	cmp	r3, #0
 800a216:	d002      	beq.n	800a21e <_ZN3Pwm4InitEP11TIM_TypeDefii+0x7e>
	  {
	    Error_Handler();
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f000 f883 	bl	800a324 <_ZN3Pwm13Error_HandlerEv>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a21e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a222:	63bb      	str	r3, [r7, #56]	@ 0x38
	  if (HAL_TIM_ConfigClockSource(&Htim, &sClockSourceConfig) != HAL_OK)
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	3304      	adds	r3, #4
 800a228:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800a22c:	4611      	mov	r1, r2
 800a22e:	4618      	mov	r0, r3
 800a230:	f006 f89c 	bl	801036c <HAL_TIM_ConfigClockSource>
 800a234:	4603      	mov	r3, r0
 800a236:	2b00      	cmp	r3, #0
 800a238:	bf14      	ite	ne
 800a23a:	2301      	movne	r3, #1
 800a23c:	2300      	moveq	r3, #0
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	2b00      	cmp	r3, #0
 800a242:	d002      	beq.n	800a24a <_ZN3Pwm4InitEP11TIM_TypeDefii+0xaa>
	  {
	    Error_Handler();
 800a244:	68f8      	ldr	r0, [r7, #12]
 800a246:	f000 f86d 	bl	800a324 <_ZN3Pwm13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_Init(&Htim) != HAL_OK)
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	3304      	adds	r3, #4
 800a24e:	4618      	mov	r0, r3
 800a250:	f005 fdd0 	bl	800fdf4 <HAL_TIM_PWM_Init>
 800a254:	4603      	mov	r3, r0
 800a256:	2b00      	cmp	r3, #0
 800a258:	bf14      	ite	ne
 800a25a:	2301      	movne	r3, #1
 800a25c:	2300      	moveq	r3, #0
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	2b00      	cmp	r3, #0
 800a262:	d002      	beq.n	800a26a <_ZN3Pwm4InitEP11TIM_TypeDefii+0xca>
	  {
	    Error_Handler();
 800a264:	68f8      	ldr	r0, [r7, #12]
 800a266:	f000 f85d 	bl	800a324 <_ZN3Pwm13Error_HandlerEv>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a26a:	2300      	movs	r3, #0
 800a26c:	633b      	str	r3, [r7, #48]	@ 0x30
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a26e:	2300      	movs	r3, #0
 800a270:	637b      	str	r3, [r7, #52]	@ 0x34
	  if (HAL_TIMEx_MasterConfigSynchronization(&Htim, &sMasterConfig) != HAL_OK)
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	3304      	adds	r3, #4
 800a276:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800a27a:	4611      	mov	r1, r2
 800a27c:	4618      	mov	r0, r3
 800a27e:	f006 fc3d 	bl	8010afc <HAL_TIMEx_MasterConfigSynchronization>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	bf14      	ite	ne
 800a288:	2301      	movne	r3, #1
 800a28a:	2300      	moveq	r3, #0
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d002      	beq.n	800a298 <_ZN3Pwm4InitEP11TIM_TypeDefii+0xf8>
	  {
	    Error_Handler();
 800a292:	68f8      	ldr	r0, [r7, #12]
 800a294:	f000 f846 	bl	800a324 <_ZN3Pwm13Error_HandlerEv>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a298:	2360      	movs	r3, #96	@ 0x60
 800a29a:	617b      	str	r3, [r7, #20]
	  sConfigOC.Pulse = 0;
 800a29c:	2300      	movs	r3, #0
 800a29e:	61bb      	str	r3, [r7, #24]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	61fb      	str	r3, [r7, #28]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	627b      	str	r3, [r7, #36]	@ 0x24
	  if (HAL_TIM_PWM_ConfigChannel(&Htim, &sConfigOC, chanel) != HAL_OK)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	3304      	adds	r3, #4
 800a2ac:	687a      	ldr	r2, [r7, #4]
 800a2ae:	f107 0114 	add.w	r1, r7, #20
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f005 ff98 	bl	80101e8 <HAL_TIM_PWM_ConfigChannel>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	bf14      	ite	ne
 800a2be:	2301      	movne	r3, #1
 800a2c0:	2300      	moveq	r3, #0
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d002      	beq.n	800a2ce <_ZN3Pwm4InitEP11TIM_TypeDefii+0x12e>
	  {
	    Error_Handler();
 800a2c8:	68f8      	ldr	r0, [r7, #12]
 800a2ca:	f000 f82b 	bl	800a324 <_ZN3Pwm13Error_HandlerEv>
	  }
//	  HAL_TIM_MspPostInit(&Htim);

	HAL_TIM_PWM_Start(&Htim,chanel);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	3304      	adds	r3, #4
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	4611      	mov	r1, r2
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f005 fde6 	bl	800fea8 <HAL_TIM_PWM_Start>
	SicloTrabajo(0);
 800a2dc:	2100      	movs	r1, #0
 800a2de:	68f8      	ldr	r0, [r7, #12]
 800a2e0:	f000 f804 	bl	800a2ec <_ZN3Pwm12SicloTrabajoEi>


//	__HAL_TIM_SET_COMPARE(&Htim, chanel, 500);
}
 800a2e4:	bf00      	nop
 800a2e6:	3748      	adds	r7, #72	@ 0x48
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <_ZN3Pwm12SicloTrabajoEi>:
void Pwm::SicloTrabajo(int siclo)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b085      	sub	sp, #20
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
	// si 65535->100
	// x->siclo
	int valor=siclo*Htim.Init.Period/100;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	691b      	ldr	r3, [r3, #16]
 800a2fa:	683a      	ldr	r2, [r7, #0]
 800a2fc:	fb02 f303 	mul.w	r3, r2, r3
 800a300:	4a07      	ldr	r2, [pc, #28]	@ (800a320 <_ZN3Pwm12SicloTrabajoEi+0x34>)
 800a302:	fba2 2303 	umull	r2, r3, r2, r3
 800a306:	095b      	lsrs	r3, r3, #5
 800a308:	60fb      	str	r3, [r7, #12]
	Htim.Instance->CCR1=valor;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	68fa      	ldr	r2, [r7, #12]
 800a310:	635a      	str	r2, [r3, #52]	@ 0x34

}
 800a312:	bf00      	nop
 800a314:	3714      	adds	r7, #20
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr
 800a31e:	bf00      	nop
 800a320:	51eb851f 	.word	0x51eb851f

0800a324 <_ZN3Pwm13Error_HandlerEv>:

void Pwm::Error_Handler(void)
{
 800a324:	b480      	push	{r7}
 800a326:	b083      	sub	sp, #12
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]

}
 800a32c:	bf00      	nop
 800a32e:	370c      	adds	r7, #12
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <_ZN16CControlProgresoC1Ev>:
 *      Author: W10
 */

#include <RapaTemperatura/CControlProgreso.hpp>

CControlProgreso::CControlProgreso()
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	4a04      	ldr	r2, [pc, #16]	@ (800a354 <_ZN16CControlProgresoC1Ev+0x1c>)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	4618      	mov	r0, r3
 800a34a:	370c      	adds	r7, #12
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr
 800a354:	08015a94 	.word	0x08015a94

0800a358 <_ZN16CControlProgresoD1Ev>:

CControlProgreso::~CControlProgreso()
 800a358:	b480      	push	{r7}
 800a35a:	b083      	sub	sp, #12
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	4a04      	ldr	r2, [pc, #16]	@ (800a374 <_ZN16CControlProgresoD1Ev+0x1c>)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	4618      	mov	r0, r3
 800a36a:	370c      	adds	r7, #12
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr
 800a374:	08015a94 	.word	0x08015a94

0800a378 <_ZN16CControlProgresoD0Ev>:
CControlProgreso::~CControlProgreso()
 800a378:	b580      	push	{r7, lr}
 800a37a:	b082      	sub	sp, #8
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
}
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f7ff ffe9 	bl	800a358 <_ZN16CControlProgresoD1Ev>
 800a386:	2104      	movs	r1, #4
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f007 f845 	bl	8011418 <_ZdlPvj>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	4618      	mov	r0, r3
 800a392:	3708      	adds	r7, #8
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <_ZN16CControlProgreso10OnProgresoEii>:

void CControlProgreso::OnProgreso(int valor, int maximo)
{
 800a398:	b480      	push	{r7}
 800a39a:	b085      	sub	sp, #20
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	60f8      	str	r0, [r7, #12]
 800a3a0:	60b9      	str	r1, [r7, #8]
 800a3a2:	607a      	str	r2, [r7, #4]

}
 800a3a4:	bf00      	nop
 800a3a6:	3714      	adds	r7, #20
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <_ZN16CControlProgreso9OnMensajeEPc>:
void CControlProgreso::OnMensaje(char *texto)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b083      	sub	sp, #12
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	6039      	str	r1, [r7, #0]

}
 800a3ba:	bf00      	nop
 800a3bc:	370c      	adds	r7, #12
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr

0800a3c6 <_ZN16CControlProgreso13OnFinProgresoEv>:
void CControlProgreso::OnFinProgreso()
{
 800a3c6:	b480      	push	{r7}
 800a3c8:	b083      	sub	sp, #12
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]

}
 800a3ce:	bf00      	nop
 800a3d0:	370c      	adds	r7, #12
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr
	...

0800a3dc <_ZN22CControladorPasosRampaC1Ev>:
#include <EPROM/CEprom.hpp>
#include <RapaTemperatura/CRampa.hpp>
#include <RapaTemperatura/CPaso.hpp>
#include<string.h>

CControladorPasosRampa::CControladorPasosRampa()
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	4a08      	ldr	r2, [pc, #32]	@ (800a408 <_ZN22CControladorPasosRampaC1Ev+0x2c>)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	601a      	str	r2, [r3, #0]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800a3f0:	605a      	str	r2, [r3, #4]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2207      	movs	r2, #7
 800a3f6:	609a      	str	r2, [r3, #8]
{
	// TODO Auto-generated constructor stub

}
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	370c      	adds	r7, #12
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr
 800a406:	bf00      	nop
 800a408:	08015ab0 	.word	0x08015ab0

0800a40c <_ZN22CControladorPasosRampaD1Ev>:

CControladorPasosRampa::~CControladorPasosRampa()
 800a40c:	b480      	push	{r7}
 800a40e:	b083      	sub	sp, #12
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	4a04      	ldr	r2, [pc, #16]	@ (800a428 <_ZN22CControladorPasosRampaD1Ev+0x1c>)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	4618      	mov	r0, r3
 800a41e:	370c      	adds	r7, #12
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr
 800a428:	08015ab0 	.word	0x08015ab0

0800a42c <_ZN22CControladorPasosRampaD0Ev>:
CControladorPasosRampa::~CControladorPasosRampa()
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
}
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f7ff ffe9 	bl	800a40c <_ZN22CControladorPasosRampaD1Ev>
 800a43a:	2118      	movs	r1, #24
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f006 ffeb 	bl	8011418 <_ZdlPvj>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	4618      	mov	r0, r3
 800a446:	3708      	adds	r7, #8
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <_ZN5CPasoC1ERKS_>:
#ifndef INC_RAPATEMPERATURA_CPASO_HPP_
#define INC_RAPATEMPERATURA_CPASO_HPP_
#include "stm32f4xx.h"
#include "stm32f4xx_hal_conf.h"

class CPaso
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
 800a456:	4a11      	ldr	r2, [pc, #68]	@ (800a49c <_ZN5CPasoC1ERKS_+0x50>)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	601a      	str	r2, [r3, #0]
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	791a      	ldrb	r2, [r3, #4]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	711a      	strb	r2, [r3, #4]
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	795a      	ldrb	r2, [r3, #5]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	715a      	strb	r2, [r3, #5]
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	799a      	ldrb	r2, [r3, #6]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	719a      	strb	r2, [r3, #6]
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	891a      	ldrh	r2, [r3, #8]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	811a      	strh	r2, [r3, #8]
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	7a9a      	ldrb	r2, [r3, #10]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	729a      	strb	r2, [r3, #10]
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	7ada      	ldrb	r2, [r3, #11]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	72da      	strb	r2, [r3, #11]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	4618      	mov	r0, r3
 800a490:	370c      	adds	r7, #12
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr
 800a49a:	bf00      	nop
 800a49c:	08015ad0 	.word	0x08015ad0

0800a4a0 <_ZN22CControladorPasosRampa17EliminaPasosRampaEi>:

bool CControladorPasosRampa::EliminaPasosRampa(int ID_Rampa)
{
 800a4a0:	b590      	push	{r4, r7, lr}
 800a4a2:	b089      	sub	sp, #36	@ 0x24
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
//	CPaso paso;
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	61fb      	str	r3, [r7, #28]
 800a4ae:	e02e      	b.n	800a50e <_ZN22CControladorPasosRampa17EliminaPasosRampaEi+0x6e>
	{
		int direccionPaso = DireccionTablaPasos + (BytesPaso * i);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	695a      	ldr	r2, [r3, #20]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	69f9      	ldr	r1, [r7, #28]
 800a4ba:	fb01 f303 	mul.w	r3, r1, r3
 800a4be:	4413      	add	r3, r2
 800a4c0:	61bb      	str	r3, [r7, #24]
		CPaso paso=LeePasoMemoria(direccionPaso);
 800a4c2:	f107 030c 	add.w	r3, r7, #12
 800a4c6:	69ba      	ldr	r2, [r7, #24]
 800a4c8:	6879      	ldr	r1, [r7, #4]
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f000 f8c4 	bl	800a658 <_ZN22CControladorPasosRampa14LeePasoMemoriaEi>
		//if (Eprom.LeeBytes(direccionPaso, BytesPaso, (uint8_t*)&paso) == false)
		//	return false;
		if (paso.Ocupado == 0)
 800a4d0:	7c3b      	ldrb	r3, [r7, #16]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d101      	bne.n	800a4da <_ZN22CControladorPasosRampa17EliminaPasosRampaEi+0x3a>
			continue;
 800a4d6:	2400      	movs	r4, #0
 800a4d8:	e010      	b.n	800a4fc <_ZN22CControladorPasosRampa17EliminaPasosRampaEi+0x5c>
		if (paso.ID_Rampa != ID_Rampa)
 800a4da:	7c7b      	ldrb	r3, [r7, #17]
 800a4dc:	461a      	mov	r2, r3
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d001      	beq.n	800a4e8 <_ZN22CControladorPasosRampa17EliminaPasosRampaEi+0x48>
			continue;
 800a4e4:	2400      	movs	r4, #0
 800a4e6:	e009      	b.n	800a4fc <_ZN22CControladorPasosRampa17EliminaPasosRampaEi+0x5c>
		paso.Ocupado = 0;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	743b      	strb	r3, [r7, #16]
		GuardaPasoMemoria(direccionPaso, &paso);
 800a4ec:	f107 030c 	add.w	r3, r7, #12
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	69b9      	ldr	r1, [r7, #24]
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 f851 	bl	800a59c <_ZN22CControladorPasosRampa17GuardaPasoMemoriaEiP5CPaso>
//		if (Eprom.GuardaBytes(direccionPaso, BytesPaso, (uint8_t*)&paso) == false)
	//		return false;
	}
 800a4fa:	2401      	movs	r4, #1
 800a4fc:	f107 030c 	add.w	r3, r7, #12
 800a500:	4618      	mov	r0, r3
 800a502:	f000 ffb1 	bl	800b468 <_ZN5CPasoD1Ev>
 800a506:	2c01      	cmp	r4, #1
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800a508:	69fb      	ldr	r3, [r7, #28]
 800a50a:	3301      	adds	r3, #1
 800a50c:	61fb      	str	r3, [r7, #28]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	69fa      	ldr	r2, [r7, #28]
 800a514:	429a      	cmp	r2, r3
 800a516:	dbcb      	blt.n	800a4b0 <_ZN22CControladorPasosRampa17EliminaPasosRampaEi+0x10>
	return true;
 800a518:	2301      	movs	r3, #1
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3724      	adds	r7, #36	@ 0x24
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd90      	pop	{r4, r7, pc}

0800a522 <_ZN22CControladorPasosRampa20DameSiguienteID_PasoEv>:

int CControladorPasosRampa::DameSiguienteID_Paso()
{
 800a522:	b590      	push	{r4, r7, lr}
 800a524:	b089      	sub	sp, #36	@ 0x24
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
	int id_paso=0;
 800a52a:	2300      	movs	r3, #0
 800a52c:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800a52e:	2300      	movs	r3, #0
 800a530:	61bb      	str	r3, [r7, #24]
 800a532:	e025      	b.n	800a580 <_ZN22CControladorPasosRampa20DameSiguienteID_PasoEv+0x5e>
	{
		int direccionPaso = DireccionTablaPasos + (BytesPaso * i);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	695a      	ldr	r2, [r3, #20]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	689b      	ldr	r3, [r3, #8]
 800a53c:	69b9      	ldr	r1, [r7, #24]
 800a53e:	fb01 f303 	mul.w	r3, r1, r3
 800a542:	4413      	add	r3, r2
 800a544:	617b      	str	r3, [r7, #20]
		CPaso paso=LeePasoMemoria(direccionPaso);
 800a546:	f107 0308 	add.w	r3, r7, #8
 800a54a:	697a      	ldr	r2, [r7, #20]
 800a54c:	6879      	ldr	r1, [r7, #4]
 800a54e:	4618      	mov	r0, r3
 800a550:	f000 f882 	bl	800a658 <_ZN22CControladorPasosRampa14LeePasoMemoriaEi>
		if (paso.Ocupado == false)
 800a554:	7b3b      	ldrb	r3, [r7, #12]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d101      	bne.n	800a55e <_ZN22CControladorPasosRampa20DameSiguienteID_PasoEv+0x3c>
		{
			continue;
 800a55a:	2400      	movs	r4, #0
 800a55c:	e007      	b.n	800a56e <_ZN22CControladorPasosRampa20DameSiguienteID_PasoEv+0x4c>
		}
		if(paso.ID_Paso>=id_paso)
 800a55e:	7bbb      	ldrb	r3, [r7, #14]
 800a560:	461a      	mov	r2, r3
 800a562:	69fb      	ldr	r3, [r7, #28]
 800a564:	4293      	cmp	r3, r2
 800a566:	dc01      	bgt.n	800a56c <_ZN22CControladorPasosRampa20DameSiguienteID_PasoEv+0x4a>
			id_paso=paso.ID_Paso;
 800a568:	7bbb      	ldrb	r3, [r7, #14]
 800a56a:	61fb      	str	r3, [r7, #28]
	}
 800a56c:	2401      	movs	r4, #1
 800a56e:	f107 0308 	add.w	r3, r7, #8
 800a572:	4618      	mov	r0, r3
 800a574:	f000 ff78 	bl	800b468 <_ZN5CPasoD1Ev>
 800a578:	2c01      	cmp	r4, #1
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800a57a:	69bb      	ldr	r3, [r7, #24]
 800a57c:	3301      	adds	r3, #1
 800a57e:	61bb      	str	r3, [r7, #24]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	69ba      	ldr	r2, [r7, #24]
 800a586:	429a      	cmp	r2, r3
 800a588:	dbd4      	blt.n	800a534 <_ZN22CControladorPasosRampa20DameSiguienteID_PasoEv+0x12>
	id_paso++;
 800a58a:	69fb      	ldr	r3, [r7, #28]
 800a58c:	3301      	adds	r3, #1
 800a58e:	61fb      	str	r3, [r7, #28]
	return id_paso;
 800a590:	69fb      	ldr	r3, [r7, #28]
}
 800a592:	4618      	mov	r0, r3
 800a594:	3724      	adds	r7, #36	@ 0x24
 800a596:	46bd      	mov	sp, r7
 800a598:	bd90      	pop	{r4, r7, pc}
	...

0800a59c <_ZN22CControladorPasosRampa17GuardaPasoMemoriaEiP5CPaso>:
//			}
//		}
//	}
//}
void CControladorPasosRampa::GuardaPasoMemoria(int direccion, CPaso *paso)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b086      	sub	sp, #24
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	607a      	str	r2, [r7, #4]
	uint8_t Ocupado=paso->Ocupado;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	791b      	ldrb	r3, [r3, #4]
 800a5ac:	75fb      	strb	r3, [r7, #23]
	uint8_t ID_Rampa=paso->ID_Rampa;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	795b      	ldrb	r3, [r3, #5]
 800a5b2:	75bb      	strb	r3, [r7, #22]
	uint8_t ID_Paso=paso->ID_Paso;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	799b      	ldrb	r3, [r3, #6]
 800a5b8:	757b      	strb	r3, [r7, #21]
	uint8_t NivelAire=paso->NivelAire;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	7a9b      	ldrb	r3, [r3, #10]
 800a5be:	753b      	strb	r3, [r7, #20]
	uint8_t Segundos=paso->Segundos;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	7adb      	ldrb	r3, [r3, #11]
 800a5c4:	74fb      	strb	r3, [r7, #19]
	uint16_t Temperatura=paso->Temperatura;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	891b      	ldrh	r3, [r3, #8]
 800a5ca:	823b      	strh	r3, [r7, #16]

	Eprom.GuardaBytes(direccion, 1,&Ocupado);
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	b299      	uxth	r1, r3
 800a5d0:	f107 0317 	add.w	r3, r7, #23
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	481f      	ldr	r0, [pc, #124]	@ (800a654 <_ZN22CControladorPasosRampa17GuardaPasoMemoriaEiP5CPaso+0xb8>)
 800a5d8:	f7f7 fa08 	bl	80019ec <_ZN6CEprom11GuardaBytesEttPh>
	direccion++;
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	3301      	adds	r3, #1
 800a5e0:	60bb      	str	r3, [r7, #8]
	Eprom.GuardaBytes(direccion, 1,&ID_Rampa);
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	b299      	uxth	r1, r3
 800a5e6:	f107 0316 	add.w	r3, r7, #22
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	4819      	ldr	r0, [pc, #100]	@ (800a654 <_ZN22CControladorPasosRampa17GuardaPasoMemoriaEiP5CPaso+0xb8>)
 800a5ee:	f7f7 f9fd 	bl	80019ec <_ZN6CEprom11GuardaBytesEttPh>
	direccion++;
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	60bb      	str	r3, [r7, #8]
	Eprom.GuardaBytes(direccion,1 ,&ID_Paso);
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	b299      	uxth	r1, r3
 800a5fc:	f107 0315 	add.w	r3, r7, #21
 800a600:	2201      	movs	r2, #1
 800a602:	4814      	ldr	r0, [pc, #80]	@ (800a654 <_ZN22CControladorPasosRampa17GuardaPasoMemoriaEiP5CPaso+0xb8>)
 800a604:	f7f7 f9f2 	bl	80019ec <_ZN6CEprom11GuardaBytesEttPh>
	direccion++;
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	3301      	adds	r3, #1
 800a60c:	60bb      	str	r3, [r7, #8]
	Eprom.GuardaBytes(direccion, 1,&NivelAire);
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	b299      	uxth	r1, r3
 800a612:	f107 0314 	add.w	r3, r7, #20
 800a616:	2201      	movs	r2, #1
 800a618:	480e      	ldr	r0, [pc, #56]	@ (800a654 <_ZN22CControladorPasosRampa17GuardaPasoMemoriaEiP5CPaso+0xb8>)
 800a61a:	f7f7 f9e7 	bl	80019ec <_ZN6CEprom11GuardaBytesEttPh>
	direccion++;
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	3301      	adds	r3, #1
 800a622:	60bb      	str	r3, [r7, #8]
	Eprom.GuardaBytes(direccion, 1,&Segundos);
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	b299      	uxth	r1, r3
 800a628:	f107 0313 	add.w	r3, r7, #19
 800a62c:	2201      	movs	r2, #1
 800a62e:	4809      	ldr	r0, [pc, #36]	@ (800a654 <_ZN22CControladorPasosRampa17GuardaPasoMemoriaEiP5CPaso+0xb8>)
 800a630:	f7f7 f9dc 	bl	80019ec <_ZN6CEprom11GuardaBytesEttPh>
	direccion++;
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	3301      	adds	r3, #1
 800a638:	60bb      	str	r3, [r7, #8]
	Eprom.GuardaBytes(direccion, 2,(uint8_t*) &Temperatura);
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	b299      	uxth	r1, r3
 800a63e:	f107 0310 	add.w	r3, r7, #16
 800a642:	2202      	movs	r2, #2
 800a644:	4803      	ldr	r0, [pc, #12]	@ (800a654 <_ZN22CControladorPasosRampa17GuardaPasoMemoriaEiP5CPaso+0xb8>)
 800a646:	f7f7 f9d1 	bl	80019ec <_ZN6CEprom11GuardaBytesEttPh>
}
 800a64a:	bf00      	nop
 800a64c:	3718      	adds	r7, #24
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop
 800a654:	20000318 	.word	0x20000318

0800a658 <_ZN22CControladorPasosRampa14LeePasoMemoriaEi>:
CPaso CControladorPasosRampa::LeePasoMemoria(int direccion)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b086      	sub	sp, #24
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	60f8      	str	r0, [r7, #12]
 800a660:	60b9      	str	r1, [r7, #8]
 800a662:	607a      	str	r2, [r7, #4]
	uint8_t ID_Paso;
	uint8_t NivelAire;
	uint8_t Segundos;
	uint16_t Temperatura;

	Eprom.LeeBytes(direccion, 1,&Ocupado);
 800a664:	f107 0317 	add.w	r3, r7, #23
 800a668:	2201      	movs	r2, #1
 800a66a:	6879      	ldr	r1, [r7, #4]
 800a66c:	4827      	ldr	r0, [pc, #156]	@ (800a70c <_ZN22CControladorPasosRampa14LeePasoMemoriaEi+0xb4>)
 800a66e:	f7f7 fa0b 	bl	8001a88 <_ZN6CEprom8LeeBytesEiiPh>
	direccion++;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	3301      	adds	r3, #1
 800a676:	607b      	str	r3, [r7, #4]
	Eprom.LeeBytes(direccion, 1,&ID_Rampa);
 800a678:	f107 0316 	add.w	r3, r7, #22
 800a67c:	2201      	movs	r2, #1
 800a67e:	6879      	ldr	r1, [r7, #4]
 800a680:	4822      	ldr	r0, [pc, #136]	@ (800a70c <_ZN22CControladorPasosRampa14LeePasoMemoriaEi+0xb4>)
 800a682:	f7f7 fa01 	bl	8001a88 <_ZN6CEprom8LeeBytesEiiPh>
	direccion++;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	3301      	adds	r3, #1
 800a68a:	607b      	str	r3, [r7, #4]
	Eprom.LeeBytes(direccion,1 ,&ID_Paso);
 800a68c:	f107 0315 	add.w	r3, r7, #21
 800a690:	2201      	movs	r2, #1
 800a692:	6879      	ldr	r1, [r7, #4]
 800a694:	481d      	ldr	r0, [pc, #116]	@ (800a70c <_ZN22CControladorPasosRampa14LeePasoMemoriaEi+0xb4>)
 800a696:	f7f7 f9f7 	bl	8001a88 <_ZN6CEprom8LeeBytesEiiPh>
	direccion++;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	3301      	adds	r3, #1
 800a69e:	607b      	str	r3, [r7, #4]
	Eprom.LeeBytes(direccion, 1,&NivelAire);
 800a6a0:	f107 0314 	add.w	r3, r7, #20
 800a6a4:	2201      	movs	r2, #1
 800a6a6:	6879      	ldr	r1, [r7, #4]
 800a6a8:	4818      	ldr	r0, [pc, #96]	@ (800a70c <_ZN22CControladorPasosRampa14LeePasoMemoriaEi+0xb4>)
 800a6aa:	f7f7 f9ed 	bl	8001a88 <_ZN6CEprom8LeeBytesEiiPh>
	direccion++;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	3301      	adds	r3, #1
 800a6b2:	607b      	str	r3, [r7, #4]
	Eprom.LeeBytes(direccion, 1,&Segundos);
 800a6b4:	f107 0313 	add.w	r3, r7, #19
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	6879      	ldr	r1, [r7, #4]
 800a6bc:	4813      	ldr	r0, [pc, #76]	@ (800a70c <_ZN22CControladorPasosRampa14LeePasoMemoriaEi+0xb4>)
 800a6be:	f7f7 f9e3 	bl	8001a88 <_ZN6CEprom8LeeBytesEiiPh>
	direccion++;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	3301      	adds	r3, #1
 800a6c6:	607b      	str	r3, [r7, #4]
	Eprom.LeeBytes(direccion, 2,(uint8_t*) &Temperatura);
 800a6c8:	f107 0310 	add.w	r3, r7, #16
 800a6cc:	2202      	movs	r2, #2
 800a6ce:	6879      	ldr	r1, [r7, #4]
 800a6d0:	480e      	ldr	r0, [pc, #56]	@ (800a70c <_ZN22CControladorPasosRampa14LeePasoMemoriaEi+0xb4>)
 800a6d2:	f7f7 f9d9 	bl	8001a88 <_ZN6CEprom8LeeBytesEiiPh>

	CPaso paso;
 800a6d6:	68f8      	ldr	r0, [r7, #12]
 800a6d8:	f000 fea4 	bl	800b424 <_ZN5CPasoC1Ev>
	paso.Ocupado=Ocupado;
 800a6dc:	7dfa      	ldrb	r2, [r7, #23]
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	711a      	strb	r2, [r3, #4]
	paso.ID_Rampa=ID_Rampa;
 800a6e2:	7dba      	ldrb	r2, [r7, #22]
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	715a      	strb	r2, [r3, #5]
	paso.ID_Paso=ID_Paso;
 800a6e8:	7d7a      	ldrb	r2, [r7, #21]
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	719a      	strb	r2, [r3, #6]
	paso.NivelAire=NivelAire;
 800a6ee:	7d3a      	ldrb	r2, [r7, #20]
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	729a      	strb	r2, [r3, #10]
	paso.Segundos=Segundos;
 800a6f4:	7cfa      	ldrb	r2, [r7, #19]
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	72da      	strb	r2, [r3, #11]
	paso.Temperatura=Temperatura;
 800a6fa:	8a3a      	ldrh	r2, [r7, #16]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	811a      	strh	r2, [r3, #8]
	return paso;
 800a700:	bf00      	nop
}
 800a702:	68f8      	ldr	r0, [r7, #12]
 800a704:	3718      	adds	r7, #24
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop
 800a70c:	20000318 	.word	0x20000318

0800a710 <_ZN22CControladorPasosRampa18ActualizaPasoRampaEiithh>:
bool CControladorPasosRampa::ActualizaPasoRampa(int ID_Paso,int ID_Rampa,uint16_t Temperatura,uint8_t NivelAire,uint8_t Segundos)
{
 800a710:	b5b0      	push	{r4, r5, r7, lr}
 800a712:	b08a      	sub	sp, #40	@ 0x28
 800a714:	af00      	add	r7, sp, #0
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	60b9      	str	r1, [r7, #8]
 800a71a:	607a      	str	r2, [r7, #4]
 800a71c:	807b      	strh	r3, [r7, #2]
 800a71e:	2400      	movs	r4, #0
	//CPaso pasoTmp;
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800a720:	2300      	movs	r3, #0
 800a722:	627b      	str	r3, [r7, #36]	@ 0x24
 800a724:	e036      	b.n	800a794 <_ZN22CControladorPasosRampa18ActualizaPasoRampaEiithh+0x84>
	{
		int direccionPaso = DireccionTablaPasos + (BytesPaso * i);
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	695a      	ldr	r2, [r3, #20]
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	689b      	ldr	r3, [r3, #8]
 800a72e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a730:	fb01 f303 	mul.w	r3, r1, r3
 800a734:	4413      	add	r3, r2
 800a736:	623b      	str	r3, [r7, #32]
		CPaso pasoTmp=LeePasoMemoria(direccionPaso);
 800a738:	f107 0314 	add.w	r3, r7, #20
 800a73c:	6a3a      	ldr	r2, [r7, #32]
 800a73e:	68f9      	ldr	r1, [r7, #12]
 800a740:	4618      	mov	r0, r3
 800a742:	f7ff ff89 	bl	800a658 <_ZN22CControladorPasosRampa14LeePasoMemoriaEi>
//		if (Eprom.LeeBytes(direccionPaso, BytesPaso,(uint8_t*) &pasoTmp) == false)
	//		return false;
		if (pasoTmp.ID_Paso != ID_Paso)
 800a746:	7ebb      	ldrb	r3, [r7, #26]
 800a748:	461a      	mov	r2, r3
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d001      	beq.n	800a754 <_ZN22CControladorPasosRampa18ActualizaPasoRampaEiithh+0x44>
			continue;
 800a750:	2500      	movs	r5, #0
 800a752:	e015      	b.n	800a780 <_ZN22CControladorPasosRampa18ActualizaPasoRampaEiithh+0x70>
		pasoTmp.ID_Rampa = ID_Rampa;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	b2db      	uxtb	r3, r3
 800a758:	767b      	strb	r3, [r7, #25]
		pasoTmp.Ocupado = 1;
 800a75a:	2301      	movs	r3, #1
 800a75c:	763b      	strb	r3, [r7, #24]
		pasoTmp.NivelAire = NivelAire;
 800a75e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800a762:	77bb      	strb	r3, [r7, #30]
		pasoTmp.Segundos = Segundos;
 800a764:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800a768:	77fb      	strb	r3, [r7, #31]
		pasoTmp.Temperatura = Temperatura;
 800a76a:	887b      	ldrh	r3, [r7, #2]
 800a76c:	83bb      	strh	r3, [r7, #28]
		GuardaPasoMemoria(direccionPaso,&pasoTmp);
 800a76e:	f107 0314 	add.w	r3, r7, #20
 800a772:	461a      	mov	r2, r3
 800a774:	6a39      	ldr	r1, [r7, #32]
 800a776:	68f8      	ldr	r0, [r7, #12]
 800a778:	f7ff ff10 	bl	800a59c <_ZN22CControladorPasosRampa17GuardaPasoMemoriaEiP5CPaso>
		//return Eprom.GuardaBytes(direccionPaso, BytesPaso,(uint8_t*) &pasoTmp);
		return true;
 800a77c:	2401      	movs	r4, #1
 800a77e:	2501      	movs	r5, #1
	}
 800a780:	f107 0314 	add.w	r3, r7, #20
 800a784:	4618      	mov	r0, r3
 800a786:	f000 fe6f 	bl	800b468 <_ZN5CPasoD1Ev>
 800a78a:	2d00      	cmp	r5, #0
 800a78c:	d108      	bne.n	800a7a0 <_ZN22CControladorPasosRampa18ActualizaPasoRampaEiithh+0x90>
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800a78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a790:	3301      	adds	r3, #1
 800a792:	627b      	str	r3, [r7, #36]	@ 0x24
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a79a:	429a      	cmp	r2, r3
 800a79c:	dbc3      	blt.n	800a726 <_ZN22CControladorPasosRampa18ActualizaPasoRampaEiithh+0x16>
	return false;
 800a79e:	2400      	movs	r4, #0

}
 800a7a0:	4623      	mov	r3, r4
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3728      	adds	r7, #40	@ 0x28
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bdb0      	pop	{r4, r5, r7, pc}

0800a7aa <_ZN22CControladorPasosRampa16EliminaPasoRampaEi>:
bool CControladorPasosRampa::EliminaPasoRampa(int ID_Paso)
{
 800a7aa:	b590      	push	{r4, r7, lr}
 800a7ac:	b089      	sub	sp, #36	@ 0x24
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
 800a7b2:	6039      	str	r1, [r7, #0]
//	CPaso pasoTmp;
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	61fb      	str	r3, [r7, #28]
 800a7b8:	e029      	b.n	800a80e <_ZN22CControladorPasosRampa16EliminaPasoRampaEi+0x64>
	{
		int direccionPaso = DireccionTablaPasos + (BytesPaso * i);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	695a      	ldr	r2, [r3, #20]
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	689b      	ldr	r3, [r3, #8]
 800a7c2:	69f9      	ldr	r1, [r7, #28]
 800a7c4:	fb01 f303 	mul.w	r3, r1, r3
 800a7c8:	4413      	add	r3, r2
 800a7ca:	61bb      	str	r3, [r7, #24]
		CPaso pasoTmp=LeePasoMemoria(direccionPaso);
 800a7cc:	f107 030c 	add.w	r3, r7, #12
 800a7d0:	69ba      	ldr	r2, [r7, #24]
 800a7d2:	6879      	ldr	r1, [r7, #4]
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f7ff ff3f 	bl	800a658 <_ZN22CControladorPasosRampa14LeePasoMemoriaEi>
	//	if (Eprom.LeeBytes(direccionPaso, BytesPaso,(uint8_t*) &pasoTmp) == false)
		//	return false;
		if (pasoTmp.ID_Paso != ID_Paso)
 800a7da:	7cbb      	ldrb	r3, [r7, #18]
 800a7dc:	461a      	mov	r2, r3
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d001      	beq.n	800a7e8 <_ZN22CControladorPasosRampa16EliminaPasoRampaEi+0x3e>
			continue;
 800a7e4:	2400      	movs	r4, #0
 800a7e6:	e009      	b.n	800a7fc <_ZN22CControladorPasosRampa16EliminaPasoRampaEi+0x52>
		pasoTmp.Ocupado = 0;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	743b      	strb	r3, [r7, #16]
		GuardaPasoMemoria(direccionPaso,&pasoTmp);
 800a7ec:	f107 030c 	add.w	r3, r7, #12
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	69b9      	ldr	r1, [r7, #24]
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f7ff fed1 	bl	800a59c <_ZN22CControladorPasosRampa17GuardaPasoMemoriaEiP5CPaso>
		//return Eprom.GuardaBytes(direccionPaso, BytesPaso,(uint8_t*) &pasoTmp);
	}
 800a7fa:	2401      	movs	r4, #1
 800a7fc:	f107 030c 	add.w	r3, r7, #12
 800a800:	4618      	mov	r0, r3
 800a802:	f000 fe31 	bl	800b468 <_ZN5CPasoD1Ev>
 800a806:	2c01      	cmp	r4, #1
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800a808:	69fb      	ldr	r3, [r7, #28]
 800a80a:	3301      	adds	r3, #1
 800a80c:	61fb      	str	r3, [r7, #28]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	69fa      	ldr	r2, [r7, #28]
 800a814:	429a      	cmp	r2, r3
 800a816:	dbd0      	blt.n	800a7ba <_ZN22CControladorPasosRampa16EliminaPasoRampaEi+0x10>
	return false;
 800a818:	2300      	movs	r3, #0

}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3724      	adds	r7, #36	@ 0x24
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd90      	pop	{r4, r7, pc}

0800a822 <_ZN22CControladorPasosRampa25SetDireccionUltimoID_PasoEi>:
void CControladorPasosRampa::SetDireccionUltimoID_Paso(int ultimoID)
{
 800a822:	b480      	push	{r7}
 800a824:	b083      	sub	sp, #12
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
 800a82a:	6039      	str	r1, [r7, #0]
	DireccionUltimoID_Paso=	ultimoID;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	683a      	ldr	r2, [r7, #0]
 800a830:	60da      	str	r2, [r3, #12]
}
 800a832:	bf00      	nop
 800a834:	370c      	adds	r7, #12
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr

0800a83e <_ZN22CControladorPasosRampa22SetDireccionTablaPasosEi>:

void CControladorPasosRampa::SetDireccionTablaPasos(int direccion)
{
 800a83e:	b480      	push	{r7}
 800a840:	b083      	sub	sp, #12
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
 800a846:	6039      	str	r1, [r7, #0]
	DireccionTablaPasos=direccion;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	683a      	ldr	r2, [r7, #0]
 800a84c:	615a      	str	r2, [r3, #20]
}
 800a84e:	bf00      	nop
 800a850:	370c      	adds	r7, #12
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr

0800a85a <_ZN22CControladorPasosRampa20SetNumeroMaximoPasosEi>:
void CControladorPasosRampa::SetNumeroMaximoPasos(int valor)
{
 800a85a:	b480      	push	{r7}
 800a85c:	b083      	sub	sp, #12
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
 800a862:	6039      	str	r1, [r7, #0]
	NUMERO_MAXIMO_PASOS=valor;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	683a      	ldr	r2, [r7, #0]
 800a868:	605a      	str	r2, [r3, #4]
}
 800a86a:	bf00      	nop
 800a86c:	370c      	adds	r7, #12
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr

0800a876 <_ZN22CControladorPasosRampa13GetBytesXPasoEv>:
int CControladorPasosRampa::GetBytesXPaso()
{
 800a876:	b480      	push	{r7}
 800a878:	b083      	sub	sp, #12
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	6078      	str	r0, [r7, #4]
	return BytesPaso;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	689b      	ldr	r3, [r3, #8]
}
 800a882:	4618      	mov	r0, r3
 800a884:	370c      	adds	r7, #12
 800a886:	46bd      	mov	sp, r7
 800a888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88c:	4770      	bx	lr

0800a88e <_ZN22CControladorPasosRampa20GetNumeroMaximoPasosEv>:
int CControladorPasosRampa::GetNumeroMaximoPasos()
{
 800a88e:	b480      	push	{r7}
 800a890:	b083      	sub	sp, #12
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
	return NUMERO_MAXIMO_PASOS;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	685b      	ldr	r3, [r3, #4]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	370c      	adds	r7, #12
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a4:	4770      	bx	lr

0800a8a6 <_ZN22CControladorPasosRampa22GetDireccionTablaPasosEv>:
int CControladorPasosRampa::GetDireccionTablaPasos()
{
 800a8a6:	b480      	push	{r7}
 800a8a8:	b083      	sub	sp, #12
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
	return DireccionTablaPasos;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	695b      	ldr	r3, [r3, #20]
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	370c      	adds	r7, #12
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr
	...

0800a8c0 <_ZN22CControladorPasosRampa15SetUltimoIDPadoEh>:
void CControladorPasosRampa::SetUltimoIDPado(uint8_t id)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b082      	sub	sp, #8
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	460b      	mov	r3, r1
 800a8ca:	70fb      	strb	r3, [r7, #3]
	UltimoID_Paso=id;
 800a8cc:	78fb      	ldrb	r3, [r7, #3]
 800a8ce:	b29a      	uxth	r2, r3
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	821a      	strh	r2, [r3, #16]
	Eprom.GuardaBytes(DireccionUltimoID_Paso, 2, (uint8_t*)&UltimoID_Paso);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	68db      	ldr	r3, [r3, #12]
 800a8d8:	b299      	uxth	r1, r3
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	3310      	adds	r3, #16
 800a8de:	2202      	movs	r2, #2
 800a8e0:	4803      	ldr	r0, [pc, #12]	@ (800a8f0 <_ZN22CControladorPasosRampa15SetUltimoIDPadoEh+0x30>)
 800a8e2:	f7f7 f883 	bl	80019ec <_ZN6CEprom11GuardaBytesEttPh>
}
 800a8e6:	bf00      	nop
 800a8e8:	3708      	adds	r7, #8
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	20000318 	.word	0x20000318

0800a8f4 <_ZN22CControladorPasosRampa20DameNumeroPasosRampaEi>:
//-------------------------------------------------------------------------------------------------------------------------------
int CControladorPasosRampa::DameNumeroPasosRampa(int ID_Rampa)
{
 800a8f4:	b590      	push	{r4, r7, lr}
 800a8f6:	b089      	sub	sp, #36	@ 0x24
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
	int npasos=0;
 800a8fe:	2300      	movs	r3, #0
 800a900:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800a902:	2300      	movs	r3, #0
 800a904:	61bb      	str	r3, [r7, #24]
 800a906:	e026      	b.n	800a956 <_ZN22CControladorPasosRampa20DameNumeroPasosRampaEi+0x62>
	{
		int direccionPaso = DireccionTablaPasos + (BytesPaso * i);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	695a      	ldr	r2, [r3, #20]
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	689b      	ldr	r3, [r3, #8]
 800a910:	69b9      	ldr	r1, [r7, #24]
 800a912:	fb01 f303 	mul.w	r3, r1, r3
 800a916:	4413      	add	r3, r2
 800a918:	617b      	str	r3, [r7, #20]
		CPaso pasoTmp=LeePasoMemoria(direccionPaso);
 800a91a:	f107 0308 	add.w	r3, r7, #8
 800a91e:	697a      	ldr	r2, [r7, #20]
 800a920:	6879      	ldr	r1, [r7, #4]
 800a922:	4618      	mov	r0, r3
 800a924:	f7ff fe98 	bl	800a658 <_ZN22CControladorPasosRampa14LeePasoMemoriaEi>
		if (pasoTmp.Ocupado != true)
 800a928:	7b3b      	ldrb	r3, [r7, #12]
 800a92a:	2b01      	cmp	r3, #1
 800a92c:	d001      	beq.n	800a932 <_ZN22CControladorPasosRampa20DameNumeroPasosRampaEi+0x3e>
			continue;
 800a92e:	2400      	movs	r4, #0
 800a930:	e008      	b.n	800a944 <_ZN22CControladorPasosRampa20DameNumeroPasosRampaEi+0x50>
		if (pasoTmp.ID_Rampa == ID_Rampa)
 800a932:	7b7b      	ldrb	r3, [r7, #13]
 800a934:	461a      	mov	r2, r3
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	4293      	cmp	r3, r2
 800a93a:	d102      	bne.n	800a942 <_ZN22CControladorPasosRampa20DameNumeroPasosRampaEi+0x4e>
		{
			npasos++;
 800a93c:	69fb      	ldr	r3, [r7, #28]
 800a93e:	3301      	adds	r3, #1
 800a940:	61fb      	str	r3, [r7, #28]
		}
	}
 800a942:	2401      	movs	r4, #1
 800a944:	f107 0308 	add.w	r3, r7, #8
 800a948:	4618      	mov	r0, r3
 800a94a:	f000 fd8d 	bl	800b468 <_ZN5CPasoD1Ev>
 800a94e:	2c01      	cmp	r4, #1
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800a950:	69bb      	ldr	r3, [r7, #24]
 800a952:	3301      	adds	r3, #1
 800a954:	61bb      	str	r3, [r7, #24]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	69ba      	ldr	r2, [r7, #24]
 800a95c:	429a      	cmp	r2, r3
 800a95e:	dbd3      	blt.n	800a908 <_ZN22CControladorPasosRampa20DameNumeroPasosRampaEi+0x14>
	return npasos;
 800a960:	69fb      	ldr	r3, [r7, #28]
}
 800a962:	4618      	mov	r0, r3
 800a964:	3724      	adds	r7, #36	@ 0x24
 800a966:	46bd      	mov	sp, r7
 800a968:	bd90      	pop	{r4, r7, pc}

0800a96a <_ZN22CControladorPasosRampa17DameSiguientePasoEii>:
CPaso CControladorPasosRampa::DameSiguientePaso(int id_rampa, int id_pasActual)
{
 800a96a:	b590      	push	{r4, r7, lr}
 800a96c:	b08b      	sub	sp, #44	@ 0x2c
 800a96e:	af00      	add	r7, sp, #0
 800a970:	60f8      	str	r0, [r7, #12]
 800a972:	60b9      	str	r1, [r7, #8]
 800a974:	607a      	str	r2, [r7, #4]
 800a976:	603b      	str	r3, [r7, #0]
	int id_paso=0;
 800a978:	2300      	movs	r3, #0
 800a97a:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800a97c:	2300      	movs	r3, #0
 800a97e:	623b      	str	r3, [r7, #32]
 800a980:	e03c      	b.n	800a9fc <_ZN22CControladorPasosRampa17DameSiguientePasoEii+0x92>
	{
		int direccionPaso = DireccionTablaPasos + (BytesPaso * i);
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	695a      	ldr	r2, [r3, #20]
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	689b      	ldr	r3, [r3, #8]
 800a98a:	6a39      	ldr	r1, [r7, #32]
 800a98c:	fb01 f303 	mul.w	r3, r1, r3
 800a990:	4413      	add	r3, r2
 800a992:	61fb      	str	r3, [r7, #28]
		CPaso pasoTmp=LeePasoMemoria(direccionPaso);
 800a994:	f107 0310 	add.w	r3, r7, #16
 800a998:	69fa      	ldr	r2, [r7, #28]
 800a99a:	68b9      	ldr	r1, [r7, #8]
 800a99c:	4618      	mov	r0, r3
 800a99e:	f7ff fe5b 	bl	800a658 <_ZN22CControladorPasosRampa14LeePasoMemoriaEi>
		if (pasoTmp.Ocupado != true)
 800a9a2:	7d3b      	ldrb	r3, [r7, #20]
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	d001      	beq.n	800a9ac <_ZN22CControladorPasosRampa17DameSiguientePasoEii+0x42>
			continue;
 800a9a8:	2400      	movs	r4, #0
 800a9aa:	e01e      	b.n	800a9ea <_ZN22CControladorPasosRampa17DameSiguientePasoEii+0x80>
		if (pasoTmp.ID_Rampa != id_rampa)
 800a9ac:	7d7b      	ldrb	r3, [r7, #21]
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d001      	beq.n	800a9ba <_ZN22CControladorPasosRampa17DameSiguientePasoEii+0x50>
			continue;
 800a9b6:	2400      	movs	r4, #0
 800a9b8:	e017      	b.n	800a9ea <_ZN22CControladorPasosRampa17DameSiguientePasoEii+0x80>
		if(pasoTmp.ID_Paso<=id_pasActual)
 800a9ba:	7dbb      	ldrb	r3, [r7, #22]
 800a9bc:	461a      	mov	r2, r3
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	db01      	blt.n	800a9c8 <_ZN22CControladorPasosRampa17DameSiguientePasoEii+0x5e>
			continue;
 800a9c4:	2400      	movs	r4, #0
 800a9c6:	e010      	b.n	800a9ea <_ZN22CControladorPasosRampa17DameSiguientePasoEii+0x80>
		if(id_paso==0)
 800a9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d103      	bne.n	800a9d6 <_ZN22CControladorPasosRampa17DameSiguientePasoEii+0x6c>
		{
			id_paso=pasoTmp.ID_Paso;
 800a9ce:	7dbb      	ldrb	r3, [r7, #22]
 800a9d0:	627b      	str	r3, [r7, #36]	@ 0x24
			continue;
 800a9d2:	2400      	movs	r4, #0
 800a9d4:	e009      	b.n	800a9ea <_ZN22CControladorPasosRampa17DameSiguientePasoEii+0x80>
		}
		if(id_paso<=pasoTmp.ID_Paso)
 800a9d6:	7dbb      	ldrb	r3, [r7, #22]
 800a9d8:	461a      	mov	r2, r3
 800a9da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	dc01      	bgt.n	800a9e4 <_ZN22CControladorPasosRampa17DameSiguientePasoEii+0x7a>
			continue;
 800a9e0:	2400      	movs	r4, #0
 800a9e2:	e002      	b.n	800a9ea <_ZN22CControladorPasosRampa17DameSiguientePasoEii+0x80>
		id_paso=pasoTmp.ID_Paso;
 800a9e4:	7dbb      	ldrb	r3, [r7, #22]
 800a9e6:	627b      	str	r3, [r7, #36]	@ 0x24
	}
 800a9e8:	2401      	movs	r4, #1
 800a9ea:	f107 0310 	add.w	r3, r7, #16
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f000 fd3a 	bl	800b468 <_ZN5CPasoD1Ev>
 800a9f4:	2c01      	cmp	r4, #1
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800a9f6:	6a3b      	ldr	r3, [r7, #32]
 800a9f8:	3301      	adds	r3, #1
 800a9fa:	623b      	str	r3, [r7, #32]
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	6a3a      	ldr	r2, [r7, #32]
 800aa02:	429a      	cmp	r2, r3
 800aa04:	dbbd      	blt.n	800a982 <_ZN22CControladorPasosRampa17DameSiguientePasoEii+0x18>
	return DamePasoRampa(id_paso);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa0a:	68b9      	ldr	r1, [r7, #8]
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f000 f804 	bl	800aa1a <_ZN22CControladorPasosRampa13DamePasoRampaEi>
}
 800aa12:	68f8      	ldr	r0, [r7, #12]
 800aa14:	372c      	adds	r7, #44	@ 0x2c
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd90      	pop	{r4, r7, pc}

0800aa1a <_ZN22CControladorPasosRampa13DamePasoRampaEi>:
CPaso CControladorPasosRampa::DamePasoRampa(int ID_Paso)
{
 800aa1a:	b590      	push	{r4, r7, lr}
 800aa1c:	b08d      	sub	sp, #52	@ 0x34
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	60f8      	str	r0, [r7, #12]
 800aa22:	60b9      	str	r1, [r7, #8]
 800aa24:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800aa26:	2300      	movs	r3, #0
 800aa28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa2a:	e027      	b.n	800aa7c <_ZN22CControladorPasosRampa13DamePasoRampaEi+0x62>
	{
		int direccionPaso = DireccionTablaPasos + (BytesPaso * i);
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	695a      	ldr	r2, [r3, #20]
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	689b      	ldr	r3, [r3, #8]
 800aa34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa36:	fb01 f303 	mul.w	r3, r1, r3
 800aa3a:	4413      	add	r3, r2
 800aa3c:	62bb      	str	r3, [r7, #40]	@ 0x28
		CPaso pasoTmp=LeePasoMemoria(direccionPaso);
 800aa3e:	f107 0310 	add.w	r3, r7, #16
 800aa42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa44:	68b9      	ldr	r1, [r7, #8]
 800aa46:	4618      	mov	r0, r3
 800aa48:	f7ff fe06 	bl	800a658 <_ZN22CControladorPasosRampa14LeePasoMemoriaEi>
		if (pasoTmp.ID_Paso != ID_Paso)
 800aa4c:	7dbb      	ldrb	r3, [r7, #22]
 800aa4e:	461a      	mov	r2, r3
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d001      	beq.n	800aa5a <_ZN22CControladorPasosRampa13DamePasoRampaEi+0x40>
			continue;
 800aa56:	2400      	movs	r4, #0
 800aa58:	e006      	b.n	800aa68 <_ZN22CControladorPasosRampa13DamePasoRampaEi+0x4e>
		return pasoTmp;
 800aa5a:	f107 0310 	add.w	r3, r7, #16
 800aa5e:	4619      	mov	r1, r3
 800aa60:	68f8      	ldr	r0, [r7, #12]
 800aa62:	f7ff fcf3 	bl	800a44c <_ZN5CPasoC1ERKS_>
 800aa66:	2401      	movs	r4, #1
	}
 800aa68:	f107 0310 	add.w	r3, r7, #16
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f000 fcfb 	bl	800b468 <_ZN5CPasoD1Ev>
 800aa72:	2c00      	cmp	r4, #0
 800aa74:	d117      	bne.n	800aaa6 <_ZN22CControladorPasosRampa13DamePasoRampaEi+0x8c>
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800aa76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa78:	3301      	adds	r3, #1
 800aa7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa82:	429a      	cmp	r2, r3
 800aa84:	dbd2      	blt.n	800aa2c <_ZN22CControladorPasosRampa13DamePasoRampaEi+0x12>
	CPaso pasoTmp2;
 800aa86:	f107 031c 	add.w	r3, r7, #28
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f000 fcca 	bl	800b424 <_ZN5CPasoC1Ev>
	return pasoTmp2;
 800aa90:	f107 031c 	add.w	r3, r7, #28
 800aa94:	4619      	mov	r1, r3
 800aa96:	68f8      	ldr	r0, [r7, #12]
 800aa98:	f7ff fcd8 	bl	800a44c <_ZN5CPasoC1ERKS_>
}
 800aa9c:	f107 031c 	add.w	r3, r7, #28
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f000 fce1 	bl	800b468 <_ZN5CPasoD1Ev>
 800aaa6:	68f8      	ldr	r0, [r7, #12]
 800aaa8:	3734      	adds	r7, #52	@ 0x34
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd90      	pop	{r4, r7, pc}

0800aaae <_ZN22CControladorPasosRampa16AgregarPasoRampaEithh>:
bool CControladorPasosRampa::AgregarPasoRampa(int ID_Rampa, uint16_t Temperatura, uint8_t NivelAire, uint8_t Segundos)
{
 800aaae:	b5b0      	push	{r4, r5, r7, lr}
 800aab0:	b08a      	sub	sp, #40	@ 0x28
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	60f8      	str	r0, [r7, #12]
 800aab6:	60b9      	str	r1, [r7, #8]
 800aab8:	4611      	mov	r1, r2
 800aaba:	461a      	mov	r2, r3
 800aabc:	460b      	mov	r3, r1
 800aabe:	80fb      	strh	r3, [r7, #6]
 800aac0:	4613      	mov	r3, r2
 800aac2:	717b      	strb	r3, [r7, #5]
 800aac4:	2400      	movs	r4, #0
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800aac6:	2300      	movs	r3, #0
 800aac8:	627b      	str	r3, [r7, #36]	@ 0x24
 800aaca:	e03a      	b.n	800ab42 <_ZN22CControladorPasosRampa16AgregarPasoRampaEithh+0x94>
	{
		int direccionPaso = DireccionTablaPasos + (BytesPaso * i);
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	695a      	ldr	r2, [r3, #20]
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	689b      	ldr	r3, [r3, #8]
 800aad4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aad6:	fb01 f303 	mul.w	r3, r1, r3
 800aada:	4413      	add	r3, r2
 800aadc:	623b      	str	r3, [r7, #32]
		CPaso pasoTmp=LeePasoMemoria(direccionPaso);
 800aade:	f107 0310 	add.w	r3, r7, #16
 800aae2:	6a3a      	ldr	r2, [r7, #32]
 800aae4:	68f9      	ldr	r1, [r7, #12]
 800aae6:	4618      	mov	r0, r3
 800aae8:	f7ff fdb6 	bl	800a658 <_ZN22CControladorPasosRampa14LeePasoMemoriaEi>
		if (pasoTmp.Ocupado == 1)
 800aaec:	7d3b      	ldrb	r3, [r7, #20]
 800aaee:	2b01      	cmp	r3, #1
 800aaf0:	d101      	bne.n	800aaf6 <_ZN22CControladorPasosRampa16AgregarPasoRampaEithh+0x48>
		{
			continue;
 800aaf2:	2500      	movs	r5, #0
 800aaf4:	e01b      	b.n	800ab2e <_ZN22CControladorPasosRampa16AgregarPasoRampaEithh+0x80>
		}
		pasoTmp.ID_Rampa = ID_Rampa;
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	b2db      	uxtb	r3, r3
 800aafa:	757b      	strb	r3, [r7, #21]
		int id_paso=DameSiguienteID_Paso();
 800aafc:	68f8      	ldr	r0, [r7, #12]
 800aafe:	f7ff fd10 	bl	800a522 <_ZN22CControladorPasosRampa20DameSiguienteID_PasoEv>
 800ab02:	61f8      	str	r0, [r7, #28]
		pasoTmp.ID_Paso =id_paso;
 800ab04:	69fb      	ldr	r3, [r7, #28]
 800ab06:	b2db      	uxtb	r3, r3
 800ab08:	75bb      	strb	r3, [r7, #22]
		pasoTmp.Ocupado = 1;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	753b      	strb	r3, [r7, #20]
		pasoTmp.NivelAire = NivelAire;
 800ab0e:	797b      	ldrb	r3, [r7, #5]
 800ab10:	76bb      	strb	r3, [r7, #26]
		pasoTmp.Segundos = Segundos;
 800ab12:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800ab16:	76fb      	strb	r3, [r7, #27]
		pasoTmp.Temperatura = Temperatura;
 800ab18:	88fb      	ldrh	r3, [r7, #6]
 800ab1a:	833b      	strh	r3, [r7, #24]
		GuardaPasoMemoria(direccionPaso, &pasoTmp);
 800ab1c:	f107 0310 	add.w	r3, r7, #16
 800ab20:	461a      	mov	r2, r3
 800ab22:	6a39      	ldr	r1, [r7, #32]
 800ab24:	68f8      	ldr	r0, [r7, #12]
 800ab26:	f7ff fd39 	bl	800a59c <_ZN22CControladorPasosRampa17GuardaPasoMemoriaEiP5CPaso>
		return true;
 800ab2a:	2401      	movs	r4, #1
 800ab2c:	2501      	movs	r5, #1
	}
 800ab2e:	f107 0310 	add.w	r3, r7, #16
 800ab32:	4618      	mov	r0, r3
 800ab34:	f000 fc98 	bl	800b468 <_ZN5CPasoD1Ev>
 800ab38:	2d00      	cmp	r5, #0
 800ab3a:	d108      	bne.n	800ab4e <_ZN22CControladorPasosRampa16AgregarPasoRampaEithh+0xa0>
	for (int i = 0; i < NUMERO_MAXIMO_PASOS; i++)
 800ab3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab3e:	3301      	adds	r3, #1
 800ab40:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	dbbf      	blt.n	800aacc <_ZN22CControladorPasosRampa16AgregarPasoRampaEithh+0x1e>
	return false;
 800ab4c:	2400      	movs	r4, #0
}
 800ab4e:	4623      	mov	r3, r4
 800ab50:	4618      	mov	r0, r3
 800ab52:	3728      	adds	r7, #40	@ 0x28
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bdb0      	pop	{r4, r5, r7, pc}

0800ab58 <_ZN18CControladorRampasC1Ev>:
#include <RapaTemperatura/CRampa.hpp>
#include <RapaTemperatura/CPaso.hpp>
#include<string.h>
#include <RapaTemperatura/CControladorPasosRampa.hpp>

CControladorRampas::CControladorRampas()
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b086      	sub	sp, #24
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	4a2f      	ldr	r2, [pc, #188]	@ (800ac20 <_ZN18CControladorRampasC1Ev+0xc8>)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	601a      	str	r2, [r3, #0]
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	4a2e      	ldr	r2, [pc, #184]	@ (800ac24 <_ZN18CControladorRampasC1Ev+0xcc>)
 800ab6a:	605a      	str	r2, [r3, #4]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	221e      	movs	r2, #30
 800ab70:	609a      	str	r2, [r3, #8]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f04f 32ff 	mov.w	r2, #4294967295
 800ab78:	60da      	str	r2, [r3, #12]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ab80:	611a      	str	r2, [r3, #16]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f04f 32ff 	mov.w	r2, #4294967295
 800ab88:	615a      	str	r2, [r3, #20]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	62da      	str	r2, [r3, #44]	@ 0x2c
{
	// TODO Auto-generated constructor stub
	int capacidadMemoriaInstalada = Eprom.DameCapacidadMaximaMemoria();
 800ab90:	4825      	ldr	r0, [pc, #148]	@ (800ac28 <_ZN18CControladorRampasC1Ev+0xd0>)
 800ab92:	f7f6 ffa9 	bl	8001ae8 <_ZN6CEprom26DameCapacidadMaximaMemoriaEv>
 800ab96:	6178      	str	r0, [r7, #20]
	DireccionInicial = Eprom.DameDireccionInicioRampas();
 800ab98:	4823      	ldr	r0, [pc, #140]	@ (800ac28 <_ZN18CControladorRampasC1Ev+0xd0>)
 800ab9a:	f7f6 ff1b 	bl	80019d4 <_ZN6CEprom25DameDireccionInicioRampasEv>
 800ab9e:	4602      	mov	r2, r0
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	611a      	str	r2, [r3, #16]
	DireccionKey = DireccionInicial;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	691a      	ldr	r2, [r3, #16]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	61da      	str	r2, [r3, #28]
	DireccionUltimoID_Rampa = DireccionKey + 3;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	69db      	ldr	r3, [r3, #28]
 800abb0:	1cda      	adds	r2, r3, #3
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	621a      	str	r2, [r3, #32]
	int direccionUltimoID_Paso=DireccionUltimoID_Rampa + 2;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6a1b      	ldr	r3, [r3, #32]
 800abba:	3302      	adds	r3, #2
 800abbc:	613b      	str	r3, [r7, #16]
	ControladorPasosRampa.SetDireccionUltimoID_Paso(direccionUltimoID_Paso);
 800abbe:	6939      	ldr	r1, [r7, #16]
 800abc0:	481a      	ldr	r0, [pc, #104]	@ (800ac2c <_ZN18CControladorRampasC1Ev+0xd4>)
 800abc2:	f7ff fe2e 	bl	800a822 <_ZN22CControladorPasosRampa25SetDireccionUltimoID_PasoEi>
	DireccionTablaRampas = direccionUltimoID_Paso + 2;
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	1c9a      	adds	r2, r3, #2
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	629a      	str	r2, [r3, #40]	@ 0x28
	BytesRampa = sizeof(CRampa);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2218      	movs	r2, #24
 800abd2:	615a      	str	r2, [r3, #20]
	int direccionTablaPasos= DireccionTablaRampas + (BytesRampa * NUMERO_MAXIMO_RAMPAS);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	695b      	ldr	r3, [r3, #20]
 800abdc:	6879      	ldr	r1, [r7, #4]
 800abde:	6889      	ldr	r1, [r1, #8]
 800abe0:	fb01 f303 	mul.w	r3, r1, r3
 800abe4:	4413      	add	r3, r2
 800abe6:	60fb      	str	r3, [r7, #12]
	ControladorPasosRampa.SetDireccionTablaPasos(direccionTablaPasos);
 800abe8:	68f9      	ldr	r1, [r7, #12]
 800abea:	4810      	ldr	r0, [pc, #64]	@ (800ac2c <_ZN18CControladorRampasC1Ev+0xd4>)
 800abec:	f7ff fe27 	bl	800a83e <_ZN22CControladorPasosRampa22SetDireccionTablaPasosEi>
	int bytesPaso = ControladorPasosRampa.GetBytesXPaso();
 800abf0:	480e      	ldr	r0, [pc, #56]	@ (800ac2c <_ZN18CControladorRampasC1Ev+0xd4>)
 800abf2:	f7ff fe40 	bl	800a876 <_ZN22CControladorPasosRampa13GetBytesXPasoEv>
 800abf6:	60b8      	str	r0, [r7, #8]
	ControladorPasosRampa.SetNumeroMaximoPasos( (capacidadMemoriaInstalada - direccionTablaPasos) / bytesPaso);
 800abf8:	697a      	ldr	r2, [r7, #20]
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	1ad2      	subs	r2, r2, r3
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	fb92 f3f3 	sdiv	r3, r2, r3
 800ac04:	4619      	mov	r1, r3
 800ac06:	4809      	ldr	r0, [pc, #36]	@ (800ac2c <_ZN18CControladorRampasC1Ev+0xd4>)
 800ac08:	f7ff fe27 	bl	800a85a <_ZN22CControladorPasosRampa20SetNumeroMaximoPasosEi>
	UltimoID_Rampa = -1;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ac12:	849a      	strh	r2, [r3, #36]	@ 0x24
}
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	4618      	mov	r0, r3
 800ac18:	3718      	adds	r7, #24
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
 800ac1e:	bf00      	nop
 800ac20:	08015ac0 	.word	0x08015ac0
 800ac24:	080145a0 	.word	0x080145a0
 800ac28:	20000318 	.word	0x20000318
 800ac2c:	200001f4 	.word	0x200001f4

0800ac30 <_ZN18CControladorRampasD1Ev>:

CControladorRampas::~CControladorRampas()
 800ac30:	b480      	push	{r7}
 800ac32:	b083      	sub	sp, #12
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	4a04      	ldr	r2, [pc, #16]	@ (800ac4c <_ZN18CControladorRampasD1Ev+0x1c>)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	4618      	mov	r0, r3
 800ac42:	370c      	adds	r7, #12
 800ac44:	46bd      	mov	sp, r7
 800ac46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4a:	4770      	bx	lr
 800ac4c:	08015ac0 	.word	0x08015ac0

0800ac50 <_ZN18CControladorRampasD0Ev>:
CControladorRampas::~CControladorRampas()
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b082      	sub	sp, #8
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
}
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f7ff ffe9 	bl	800ac30 <_ZN18CControladorRampasD1Ev>
 800ac5e:	2130      	movs	r1, #48	@ 0x30
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f006 fbd9 	bl	8011418 <_ZdlPvj>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3708      	adds	r7, #8
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}

0800ac70 <_ZN18CControladorRampas19MemoriaInicialidadaEv>:


bool CControladorRampas::MemoriaInicialidada()
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b084      	sub	sp, #16
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
	Eprom.LeeBytes(DireccionKey, 3, (uint8_t*)&Key);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	69d9      	ldr	r1, [r3, #28]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	3318      	adds	r3, #24
 800ac80:	2203      	movs	r2, #3
 800ac82:	480f      	ldr	r0, [pc, #60]	@ (800acc0 <_ZN18CControladorRampas19MemoriaInicialidadaEv+0x50>)
 800ac84:	f7f6 ff00 	bl	8001a88 <_ZN6CEprom8LeeBytesEiiPh>
	//char key[] = "OSC";
	for (int i = 0; i < 3; i++)
 800ac88:	2300      	movs	r3, #0
 800ac8a:	60fb      	str	r3, [r7, #12]
 800ac8c:	e010      	b.n	800acb0 <_ZN18CControladorRampas19MemoriaInicialidadaEv+0x40>
	{
		if (Key[i] != KEY[i])
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	4413      	add	r3, r2
 800ac94:	3318      	adds	r3, #24
 800ac96:	781a      	ldrb	r2, [r3, #0]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6859      	ldr	r1, [r3, #4]
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	440b      	add	r3, r1
 800aca0:	781b      	ldrb	r3, [r3, #0]
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d001      	beq.n	800acaa <_ZN18CControladorRampas19MemoriaInicialidadaEv+0x3a>
		{
			return false;
 800aca6:	2300      	movs	r3, #0
 800aca8:	e006      	b.n	800acb8 <_ZN18CControladorRampas19MemoriaInicialidadaEv+0x48>
	for (int i = 0; i < 3; i++)
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	3301      	adds	r3, #1
 800acae:	60fb      	str	r3, [r7, #12]
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	2b02      	cmp	r3, #2
 800acb4:	ddeb      	ble.n	800ac8e <_ZN18CControladorRampas19MemoriaInicialidadaEv+0x1e>
		}
	}
	return true;
 800acb6:	2301      	movs	r3, #1
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3710      	adds	r7, #16
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}
 800acc0:	20000318 	.word	0x20000318

0800acc4 <_ZN18CControladorRampas17InicializaMemoriaEv>:

void CControladorRampas::InicializaMemoria()
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b094      	sub	sp, #80	@ 0x50
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
	CRampa rampa;
 800accc:	f107 0314 	add.w	r3, r7, #20
 800acd0:	4618      	mov	r0, r3
 800acd2:	f000 fbe9 	bl	800b4a8 <_ZN6CRampaC1Ev>
	CPaso paso;
 800acd6:	f107 0308 	add.w	r3, r7, #8
 800acda:	4618      	mov	r0, r3
 800acdc:	f000 fba2 	bl	800b424 <_ZN5CPasoC1Ev>
	int direccionRampa;
	int direccionPaso;
	int progreso = 0;
 800ace0:	2300      	movs	r3, #0
 800ace2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int numeroMaximoPasos=ControladorPasosRampa.GetNumeroMaximoPasos();
 800ace4:	4854      	ldr	r0, [pc, #336]	@ (800ae38 <_ZN18CControladorRampas17InicializaMemoriaEv+0x174>)
 800ace6:	f7ff fdd2 	bl	800a88e <_ZN22CControladorPasosRampa20GetNumeroMaximoPasosEv>
 800acea:	6438      	str	r0, [r7, #64]	@ 0x40
	int direccionTablaPasos=ControladorPasosRampa.GetDireccionTablaPasos();
 800acec:	4852      	ldr	r0, [pc, #328]	@ (800ae38 <_ZN18CControladorRampas17InicializaMemoriaEv+0x174>)
 800acee:	f7ff fdda 	bl	800a8a6 <_ZN22CControladorPasosRampa22GetDireccionTablaPasosEv>
 800acf2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	int bytesPaso=ControladorPasosRampa.GetBytesXPaso();
 800acf4:	4850      	ldr	r0, [pc, #320]	@ (800ae38 <_ZN18CControladorRampas17InicializaMemoriaEv+0x174>)
 800acf6:	f7ff fdbe 	bl	800a876 <_ZN22CControladorPasosRampa13GetBytesXPasoEv>
 800acfa:	63b8      	str	r0, [r7, #56]	@ 0x38
	int maximo = NUMERO_MAXIMO_RAMPAS + numeroMaximoPasos;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	689b      	ldr	r3, [r3, #8]
 800ad00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ad02:	4413      	add	r3, r2
 800ad04:	637b      	str	r3, [r7, #52]	@ 0x34

	if (ControlProgreso != NULL)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d009      	beq.n	800ad22 <_ZN18CControladorRampas17InicializaMemoriaEv+0x5e>
		ControlProgreso->OnMensaje((char*) "Iniciando memoria");
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	330c      	adds	r3, #12
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	4947      	ldr	r1, [pc, #284]	@ (800ae3c <_ZN18CControladorRampas17InicializaMemoriaEv+0x178>)
 800ad1e:	4610      	mov	r0, r2
 800ad20:	4798      	blx	r3

	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800ad22:	2300      	movs	r3, #0
 800ad24:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad26:	e023      	b.n	800ad70 <_ZN18CControladorRampas17InicializaMemoriaEv+0xac>
	{
		if (ControlProgreso != NULL)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d00c      	beq.n	800ad4a <_ZN18CControladorRampas17InicializaMemoriaEv+0x86>
		{
			ControlProgreso->OnProgreso(progreso, maximo);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	3308      	adds	r3, #8
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ad40:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800ad42:	4798      	blx	r3
			progreso++;
 800ad44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad46:	3301      	adds	r3, #1
 800ad48:	64fb      	str	r3, [r7, #76]	@ 0x4c
		}
		direccionRampa = DireccionTablaRampas + (BytesRampa * i);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	695b      	ldr	r3, [r3, #20]
 800ad52:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800ad54:	fb01 f303 	mul.w	r3, r1, r3
 800ad58:	4413      	add	r3, r2
 800ad5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		GuardaRampaMemoria(direccionRampa, &rampa);
 800ad5c:	f107 0314 	add.w	r3, r7, #20
 800ad60:	461a      	mov	r2, r3
 800ad62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f000 f9ad 	bl	800b0c4 <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa>
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800ad6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad6c:	3301      	adds	r3, #1
 800ad6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	689b      	ldr	r3, [r3, #8]
 800ad74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad76:	429a      	cmp	r2, r3
 800ad78:	dbd6      	blt.n	800ad28 <_ZN18CControladorRampas17InicializaMemoriaEv+0x64>
	}

	for (int i = 0; i < numeroMaximoPasos; i++)
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad7e:	e021      	b.n	800adc4 <_ZN18CControladorRampas17InicializaMemoriaEv+0x100>
	{
		if (ControlProgreso != NULL)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d00c      	beq.n	800ada2 <_ZN18CControladorRampas17InicializaMemoriaEv+0xde>
		{
			ControlProgreso->OnProgreso(progreso, maximo);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	3308      	adds	r3, #8
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ad98:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800ad9a:	4798      	blx	r3
			progreso++;
 800ad9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad9e:	3301      	adds	r3, #1
 800ada0:	64fb      	str	r3, [r7, #76]	@ 0x4c
		}
		direccionPaso = direccionTablaPasos + (bytesPaso * i);
 800ada2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ada4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ada6:	fb02 f303 	mul.w	r3, r2, r3
 800adaa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800adac:	4413      	add	r3, r2
 800adae:	633b      	str	r3, [r7, #48]	@ 0x30
		ControladorPasosRampa.GuardaPasoMemoria(direccionPaso,&paso);
 800adb0:	f107 0308 	add.w	r3, r7, #8
 800adb4:	461a      	mov	r2, r3
 800adb6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800adb8:	481f      	ldr	r0, [pc, #124]	@ (800ae38 <_ZN18CControladorRampas17InicializaMemoriaEv+0x174>)
 800adba:	f7ff fbef 	bl	800a59c <_ZN22CControladorPasosRampa17GuardaPasoMemoriaEiP5CPaso>
	for (int i = 0; i < numeroMaximoPasos; i++)
 800adbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800adc0:	3301      	adds	r3, #1
 800adc2:	647b      	str	r3, [r7, #68]	@ 0x44
 800adc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800adc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800adc8:	429a      	cmp	r2, r3
 800adca:	dbd9      	blt.n	800ad80 <_ZN18CControladorRampas17InicializaMemoriaEv+0xbc>
	}
	UltimoID_Rampa = 0;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2200      	movs	r2, #0
 800add0:	849a      	strh	r2, [r3, #36]	@ 0x24
	Eprom.GuardaBytes(DireccionUltimoID_Rampa, 2, (uint8_t*)&UltimoID_Rampa);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6a1b      	ldr	r3, [r3, #32]
 800add6:	b299      	uxth	r1, r3
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	3324      	adds	r3, #36	@ 0x24
 800addc:	2202      	movs	r2, #2
 800adde:	4818      	ldr	r0, [pc, #96]	@ (800ae40 <_ZN18CControladorRampas17InicializaMemoriaEv+0x17c>)
 800ade0:	f7f6 fe04 	bl	80019ec <_ZN6CEprom11GuardaBytesEttPh>
	ControladorPasosRampa.SetUltimoIDPado(0);
 800ade4:	2100      	movs	r1, #0
 800ade6:	4814      	ldr	r0, [pc, #80]	@ (800ae38 <_ZN18CControladorRampas17InicializaMemoriaEv+0x174>)
 800ade8:	f7ff fd6a 	bl	800a8c0 <_ZN22CControladorPasosRampa15SetUltimoIDPadoEh>
	Eprom.GuardaBytes(DireccionKey, 3,(uint8_t*) KEY);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	69db      	ldr	r3, [r3, #28]
 800adf0:	b299      	uxth	r1, r3
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	2203      	movs	r2, #3
 800adf8:	4811      	ldr	r0, [pc, #68]	@ (800ae40 <_ZN18CControladorRampas17InicializaMemoriaEv+0x17c>)
 800adfa:	f7f6 fdf7 	bl	80019ec <_ZN6CEprom11GuardaBytesEttPh>

	if (ControlProgreso != NULL)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d00b      	beq.n	800ae1e <_ZN18CControladorRampas17InicializaMemoriaEv+0x15a>
	{
		ControlProgreso->OnFinProgreso();
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	3310      	adds	r3, #16
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	4610      	mov	r0, r2
 800ae16:	4798      	blx	r3
		progreso++;
 800ae18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	}

}
 800ae1e:	f107 0308 	add.w	r3, r7, #8
 800ae22:	4618      	mov	r0, r3
 800ae24:	f000 fb20 	bl	800b468 <_ZN5CPasoD1Ev>
 800ae28:	f107 0314 	add.w	r3, r7, #20
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f000 fb61 	bl	800b4f4 <_ZN6CRampaD1Ev>
 800ae32:	3750      	adds	r7, #80	@ 0x50
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	200001f4 	.word	0x200001f4
 800ae3c:	080145a4 	.word	0x080145a4
 800ae40:	20000318 	.word	0x20000318

0800ae44 <_ZN18CControladorRampas18SetControlProgresoEP16CControlProgreso>:

void CControladorRampas::SetControlProgreso(CControlProgreso *controlProgreso)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b083      	sub	sp, #12
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
	ControlProgreso = controlProgreso;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	683a      	ldr	r2, [r7, #0]
 800ae52:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800ae54:	bf00      	nop
 800ae56:	370c      	adds	r7, #12
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr

0800ae60 <_ZN18CControladorRampas16DameNumeroRampasEv>:

int CControladorRampas::DameNumeroRampas()
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b08a      	sub	sp, #40	@ 0x28
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
	if (TotalRampas != -1)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	68db      	ldr	r3, [r3, #12]
 800ae6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae70:	d002      	beq.n	800ae78 <_ZN18CControladorRampas16DameNumeroRampasEv+0x18>
		return TotalRampas;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	68db      	ldr	r3, [r3, #12]
 800ae76:	e02c      	b.n	800aed2 <_ZN18CControladorRampas16DameNumeroRampasEv+0x72>
	TotalRampas = 0;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	60da      	str	r2, [r3, #12]
	//recorro toda la tabla de rampas y cuento las que estan activas
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800ae7e:	2300      	movs	r3, #0
 800ae80:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae82:	e01f      	b.n	800aec4 <_ZN18CControladorRampas16DameNumeroRampasEv+0x64>
	{
		int direccionRampa = DireccionTablaRampas + (BytesRampa * i);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	695b      	ldr	r3, [r3, #20]
 800ae8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ae8e:	fb01 f303 	mul.w	r3, r1, r3
 800ae92:	4413      	add	r3, r2
 800ae94:	623b      	str	r3, [r7, #32]
		//me traigo los datos de la rampa de la memoria
		CRampa rampa=LeeRampaMemoria(direccionRampa);
 800ae96:	f107 0308 	add.w	r3, r7, #8
 800ae9a:	6a3a      	ldr	r2, [r7, #32]
 800ae9c:	6879      	ldr	r1, [r7, #4]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f000 f8c4 	bl	800b02c <_ZN18CControladorRampas15LeeRampaMemoriaEi>
		if (rampa.Ocupado == true)
 800aea4:	7b3b      	ldrb	r3, [r7, #12]
 800aea6:	2b01      	cmp	r3, #1
 800aea8:	d104      	bne.n	800aeb4 <_ZN18CControladorRampas16DameNumeroRampasEv+0x54>
			TotalRampas++;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	68db      	ldr	r3, [r3, #12]
 800aeae:	1c5a      	adds	r2, r3, #1
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	60da      	str	r2, [r3, #12]
	}
 800aeb4:	f107 0308 	add.w	r3, r7, #8
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f000 fb1b 	bl	800b4f4 <_ZN6CRampaD1Ev>
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800aebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aec0:	3301      	adds	r3, #1
 800aec2:	627b      	str	r3, [r7, #36]	@ 0x24
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	689b      	ldr	r3, [r3, #8]
 800aec8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aeca:	429a      	cmp	r2, r3
 800aecc:	dbda      	blt.n	800ae84 <_ZN18CControladorRampas16DameNumeroRampasEv+0x24>
	return TotalRampas;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	68db      	ldr	r3, [r3, #12]
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3728      	adds	r7, #40	@ 0x28
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}

0800aeda <_ZN18CControladorRampas9DameRampaEi>:

CRampa CControladorRampas::DameRampa(int id_Rampa)
{
 800aeda:	b590      	push	{r4, r7, lr}
 800aedc:	b095      	sub	sp, #84	@ 0x54
 800aede:	af00      	add	r7, sp, #0
 800aee0:	60f8      	str	r0, [r7, #12]
 800aee2:	60b9      	str	r1, [r7, #8]
 800aee4:	607a      	str	r2, [r7, #4]

	int numeroRampa = 0;
 800aee6:	2300      	movs	r3, #0
 800aee8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	//recorro toda la tabla de rampas y cuento las que estan activas
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800aeea:	2300      	movs	r3, #0
 800aeec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aeee:	e02f      	b.n	800af50 <_ZN18CControladorRampas9DameRampaEi+0x76>
	{
		int direccionRampa = DireccionTablaRampas + (BytesRampa * i);
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	695b      	ldr	r3, [r3, #20]
 800aef8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800aefa:	fb01 f303 	mul.w	r3, r1, r3
 800aefe:	4413      	add	r3, r2
 800af00:	647b      	str	r3, [r7, #68]	@ 0x44
		//me traigo los datos de la rampa de la memoria
		CRampa tmpRampa=LeeRampaMemoria(direccionRampa);
 800af02:	f107 0314 	add.w	r3, r7, #20
 800af06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af08:	68b9      	ldr	r1, [r7, #8]
 800af0a:	4618      	mov	r0, r3
 800af0c:	f000 f88e 	bl	800b02c <_ZN18CControladorRampas15LeeRampaMemoriaEi>
		if (tmpRampa.Ocupado == false)
 800af10:	7e3b      	ldrb	r3, [r7, #24]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d101      	bne.n	800af1a <_ZN18CControladorRampas9DameRampaEi+0x40>
			continue;
 800af16:	2400      	movs	r4, #0
 800af18:	e010      	b.n	800af3c <_ZN18CControladorRampas9DameRampaEi+0x62>
		numeroRampa++;
 800af1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af1c:	3301      	adds	r3, #1
 800af1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (tmpRampa.ID_RAMPA != id_Rampa)
 800af20:	8b7b      	ldrh	r3, [r7, #26]
 800af22:	461a      	mov	r2, r3
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	4293      	cmp	r3, r2
 800af28:	d001      	beq.n	800af2e <_ZN18CControladorRampas9DameRampaEi+0x54>
			continue;
 800af2a:	2400      	movs	r4, #0
 800af2c:	e006      	b.n	800af3c <_ZN18CControladorRampas9DameRampaEi+0x62>
		return tmpRampa;
 800af2e:	f107 0314 	add.w	r3, r7, #20
 800af32:	4619      	mov	r1, r3
 800af34:	68f8      	ldr	r0, [r7, #12]
 800af36:	f000 fb1d 	bl	800b574 <_ZN6CRampaC1EOS_>
 800af3a:	2401      	movs	r4, #1
	}
 800af3c:	f107 0314 	add.w	r3, r7, #20
 800af40:	4618      	mov	r0, r3
 800af42:	f000 fad7 	bl	800b4f4 <_ZN6CRampaD1Ev>
 800af46:	2c00      	cmp	r4, #0
 800af48:	d117      	bne.n	800af7a <_ZN18CControladorRampas9DameRampaEi+0xa0>
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800af4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af4c:	3301      	adds	r3, #1
 800af4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	689b      	ldr	r3, [r3, #8]
 800af54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af56:	429a      	cmp	r2, r3
 800af58:	dbca      	blt.n	800aef0 <_ZN18CControladorRampas9DameRampaEi+0x16>
	CRampa tmpRampa2;
 800af5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800af5e:	4618      	mov	r0, r3
 800af60:	f000 faa2 	bl	800b4a8 <_ZN6CRampaC1Ev>
	return tmpRampa2;
 800af64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800af68:	4619      	mov	r1, r3
 800af6a:	68f8      	ldr	r0, [r7, #12]
 800af6c:	f000 fb02 	bl	800b574 <_ZN6CRampaC1EOS_>
}
 800af70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800af74:	4618      	mov	r0, r3
 800af76:	f000 fabd 	bl	800b4f4 <_ZN6CRampaD1Ev>
 800af7a:	68f8      	ldr	r0, [r7, #12]
 800af7c:	3754      	adds	r7, #84	@ 0x54
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd90      	pop	{r4, r7, pc}

0800af82 <_ZN18CControladorRampas15DameRampaNumeroEi>:
CRampa CControladorRampas::DameRampaNumero(int posicion)
{
 800af82:	b590      	push	{r4, r7, lr}
 800af84:	b095      	sub	sp, #84	@ 0x54
 800af86:	af00      	add	r7, sp, #0
 800af88:	60f8      	str	r0, [r7, #12]
 800af8a:	60b9      	str	r1, [r7, #8]
 800af8c:	607a      	str	r2, [r7, #4]

	int numeroRampa = 0;
 800af8e:	2300      	movs	r3, #0
 800af90:	64fb      	str	r3, [r7, #76]	@ 0x4c
	//recorro toda la tabla de rampas y cuento las que estan activas
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800af92:	2300      	movs	r3, #0
 800af94:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af96:	e02f      	b.n	800aff8 <_ZN18CControladorRampas15DameRampaNumeroEi+0x76>
	{
		int direccionRampa = DireccionTablaRampas + (BytesRampa * i);
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	695b      	ldr	r3, [r3, #20]
 800afa0:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800afa2:	fb01 f303 	mul.w	r3, r1, r3
 800afa6:	4413      	add	r3, r2
 800afa8:	647b      	str	r3, [r7, #68]	@ 0x44
		//me traigo los datos de la rampa de la memoria
		CRampa tmpRampa=LeeRampaMemoria(direccionRampa);
 800afaa:	f107 0314 	add.w	r3, r7, #20
 800afae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800afb0:	68b9      	ldr	r1, [r7, #8]
 800afb2:	4618      	mov	r0, r3
 800afb4:	f000 f83a 	bl	800b02c <_ZN18CControladorRampas15LeeRampaMemoriaEi>
		if (tmpRampa.Ocupado != true)
 800afb8:	7e3b      	ldrb	r3, [r7, #24]
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d001      	beq.n	800afc2 <_ZN18CControladorRampas15DameRampaNumeroEi+0x40>
			continue;
 800afbe:	2400      	movs	r4, #0
 800afc0:	e010      	b.n	800afe4 <_ZN18CControladorRampas15DameRampaNumeroEi+0x62>
		numeroRampa++;
 800afc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afc4:	3301      	adds	r3, #1
 800afc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (numeroRampa-1 != posicion)
 800afc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afca:	3b01      	subs	r3, #1
 800afcc:	687a      	ldr	r2, [r7, #4]
 800afce:	429a      	cmp	r2, r3
 800afd0:	d001      	beq.n	800afd6 <_ZN18CControladorRampas15DameRampaNumeroEi+0x54>
			continue;
 800afd2:	2400      	movs	r4, #0
 800afd4:	e006      	b.n	800afe4 <_ZN18CControladorRampas15DameRampaNumeroEi+0x62>
		return tmpRampa;
 800afd6:	f107 0314 	add.w	r3, r7, #20
 800afda:	4619      	mov	r1, r3
 800afdc:	68f8      	ldr	r0, [r7, #12]
 800afde:	f000 fac9 	bl	800b574 <_ZN6CRampaC1EOS_>
 800afe2:	2401      	movs	r4, #1
	}
 800afe4:	f107 0314 	add.w	r3, r7, #20
 800afe8:	4618      	mov	r0, r3
 800afea:	f000 fa83 	bl	800b4f4 <_ZN6CRampaD1Ev>
 800afee:	2c00      	cmp	r4, #0
 800aff0:	d117      	bne.n	800b022 <_ZN18CControladorRampas15DameRampaNumeroEi+0xa0>
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800aff2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aff4:	3301      	adds	r3, #1
 800aff6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	689b      	ldr	r3, [r3, #8]
 800affc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800affe:	429a      	cmp	r2, r3
 800b000:	dbca      	blt.n	800af98 <_ZN18CControladorRampas15DameRampaNumeroEi+0x16>
	CRampa tmpRampa2;
 800b002:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b006:	4618      	mov	r0, r3
 800b008:	f000 fa4e 	bl	800b4a8 <_ZN6CRampaC1Ev>
	return tmpRampa2;
 800b00c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b010:	4619      	mov	r1, r3
 800b012:	68f8      	ldr	r0, [r7, #12]
 800b014:	f000 faae 	bl	800b574 <_ZN6CRampaC1EOS_>
}
 800b018:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b01c:	4618      	mov	r0, r3
 800b01e:	f000 fa69 	bl	800b4f4 <_ZN6CRampaD1Ev>
 800b022:	68f8      	ldr	r0, [r7, #12]
 800b024:	3754      	adds	r7, #84	@ 0x54
 800b026:	46bd      	mov	sp, r7
 800b028:	bd90      	pop	{r4, r7, pc}
	...

0800b02c <_ZN18CControladorRampas15LeeRampaMemoriaEi>:
CRampa CControladorRampas::LeeRampaMemoria(int direccion)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b08a      	sub	sp, #40	@ 0x28
 800b030:	af00      	add	r7, sp, #0
 800b032:	60f8      	str	r0, [r7, #12]
 800b034:	60b9      	str	r1, [r7, #8]
 800b036:	607a      	str	r2, [r7, #4]
	 * -----------------------------------------
	 */
	uint8_t ocupado;
	uint16_t id_rampa;
	char nombre[20];
	CRampa rampa;
 800b038:	68f8      	ldr	r0, [r7, #12]
 800b03a:	f000 fa35 	bl	800b4a8 <_ZN6CRampaC1Ev>
	//leo la bandera de ocupado
	Eprom.LeeBytes(direccion, 1, &ocupado);
 800b03e:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 800b042:	2201      	movs	r2, #1
 800b044:	6879      	ldr	r1, [r7, #4]
 800b046:	481e      	ldr	r0, [pc, #120]	@ (800b0c0 <_ZN18CControladorRampas15LeeRampaMemoriaEi+0x94>)
 800b048:	f7f6 fd1e 	bl	8001a88 <_ZN6CEprom8LeeBytesEiiPh>
	Eprom.LeeBytes(direccion, 1, &ocupado);
 800b04c:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 800b050:	2201      	movs	r2, #1
 800b052:	6879      	ldr	r1, [r7, #4]
 800b054:	481a      	ldr	r0, [pc, #104]	@ (800b0c0 <_ZN18CControladorRampas15LeeRampaMemoriaEi+0x94>)
 800b056:	f7f6 fd17 	bl	8001a88 <_ZN6CEprom8LeeBytesEiiPh>
	rampa.Ocupado=ocupado;
 800b05a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	711a      	strb	r2, [r3, #4]
	//leo el ID_RAMPA
	Eprom.LeeBytes(direccion+1, 2, (uint8_t*)&id_rampa);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	1c59      	adds	r1, r3, #1
 800b066:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b06a:	2202      	movs	r2, #2
 800b06c:	4814      	ldr	r0, [pc, #80]	@ (800b0c0 <_ZN18CControladorRampas15LeeRampaMemoriaEi+0x94>)
 800b06e:	f7f6 fd0b 	bl	8001a88 <_ZN6CEprom8LeeBytesEiiPh>
	Eprom.LeeBytes(direccion+1, 2, (uint8_t*)&id_rampa);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	1c59      	adds	r1, r3, #1
 800b076:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b07a:	2202      	movs	r2, #2
 800b07c:	4810      	ldr	r0, [pc, #64]	@ (800b0c0 <_ZN18CControladorRampas15LeeRampaMemoriaEi+0x94>)
 800b07e:	f7f6 fd03 	bl	8001a88 <_ZN6CEprom8LeeBytesEiiPh>
	rampa.ID_RAMPA=id_rampa;
 800b082:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	80da      	strh	r2, [r3, #6]
	//leo el nombre
	Eprom.LeeBytes(direccion+3, 15, (uint8_t*)nombre);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	1cd9      	adds	r1, r3, #3
 800b08c:	f107 0310 	add.w	r3, r7, #16
 800b090:	220f      	movs	r2, #15
 800b092:	480b      	ldr	r0, [pc, #44]	@ (800b0c0 <_ZN18CControladorRampas15LeeRampaMemoriaEi+0x94>)
 800b094:	f7f6 fcf8 	bl	8001a88 <_ZN6CEprom8LeeBytesEiiPh>
	Eprom.LeeBytes(direccion+3, 15, (uint8_t*)nombre);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	1cd9      	adds	r1, r3, #3
 800b09c:	f107 0310 	add.w	r3, r7, #16
 800b0a0:	220f      	movs	r2, #15
 800b0a2:	4807      	ldr	r0, [pc, #28]	@ (800b0c0 <_ZN18CControladorRampas15LeeRampaMemoriaEi+0x94>)
 800b0a4:	f7f6 fcf0 	bl	8001a88 <_ZN6CEprom8LeeBytesEiiPh>
	rampa.SetNombre(nombre);
 800b0a8:	f107 0310 	add.w	r3, r7, #16
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	68f8      	ldr	r0, [r7, #12]
 800b0b0:	f000 fa40 	bl	800b534 <_ZN6CRampa9SetNombreEPc>
	return rampa;
 800b0b4:	bf00      	nop

}
 800b0b6:	68f8      	ldr	r0, [r7, #12]
 800b0b8:	3728      	adds	r7, #40	@ 0x28
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	20000318 	.word	0x20000318

0800b0c4 <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa>:
void CControladorRampas::GuardaRampaMemoria(int direccion, CRampa *rampa)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b094      	sub	sp, #80	@ 0x50
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	60f8      	str	r0, [r7, #12]
 800b0cc:	60b9      	str	r1, [r7, #8]
 800b0ce:	607a      	str	r2, [r7, #4]
	//guardo la bandera de ocupado
	uint8_t ocupado;
	uint16_t id_rampa;
	char nombre[20];
	uint8_t tmp[30];
	ocupado=rampa->Ocupado;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	791b      	ldrb	r3, [r3, #4]
 800b0d4:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	id_rampa=rampa->ID_RAMPA;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	88db      	ldrh	r3, [r3, #6]
 800b0dc:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
	strcpy(nombre,rampa->Nombre);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f103 0208 	add.w	r2, r3, #8
 800b0e6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800b0ea:	4611      	mov	r1, r2
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f007 f8c8 	bl	8012282 <strcpy>
	Eprom.GuardaBytes(direccion, 1, &ocupado);
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	b299      	uxth	r1, r3
 800b0f6:	f107 034b 	add.w	r3, r7, #75	@ 0x4b
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	4827      	ldr	r0, [pc, #156]	@ (800b19c <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa+0xd8>)
 800b0fe:	f7f6 fc75 	bl	80019ec <_ZN6CEprom11GuardaBytesEttPh>
	//guardo el ID_RAMPA
	Eprom.GuardaBytes(direccion+1, 2, (uint8_t*)&id_rampa);
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	b29b      	uxth	r3, r3
 800b106:	3301      	adds	r3, #1
 800b108:	b299      	uxth	r1, r3
 800b10a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800b10e:	2202      	movs	r2, #2
 800b110:	4822      	ldr	r0, [pc, #136]	@ (800b19c <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa+0xd8>)
 800b112:	f7f6 fc6b 	bl	80019ec <_ZN6CEprom11GuardaBytesEttPh>
	//guardo el nombre
	Eprom.GuardaBytes(direccion+3, 15, (uint8_t*)nombre);
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	b29b      	uxth	r3, r3
 800b11a:	3303      	adds	r3, #3
 800b11c:	b299      	uxth	r1, r3
 800b11e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800b122:	220f      	movs	r2, #15
 800b124:	481d      	ldr	r0, [pc, #116]	@ (800b19c <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa+0xd8>)
 800b126:	f7f6 fc61 	bl	80019ec <_ZN6CEprom11GuardaBytesEttPh>

	id_rampa=-1;
 800b12a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b12e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
	ocupado=-1;
 800b132:	23ff      	movs	r3, #255	@ 0xff
 800b134:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	for(int i=0;i<15;i++)
 800b138:	2300      	movs	r3, #0
 800b13a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b13c:	e008      	b.n	800b150 <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa+0x8c>
		nombre[i]='\0';
 800b13e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800b142:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b144:	4413      	add	r3, r2
 800b146:	2200      	movs	r2, #0
 800b148:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<15;i++)
 800b14a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b14c:	3301      	adds	r3, #1
 800b14e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b150:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b152:	2b0e      	cmp	r3, #14
 800b154:	ddf3      	ble.n	800b13e <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa+0x7a>

	Eprom.LeeBytes(direccion+3, 15, (uint8_t*)nombre);
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	1cd9      	adds	r1, r3, #3
 800b15a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800b15e:	220f      	movs	r2, #15
 800b160:	480e      	ldr	r0, [pc, #56]	@ (800b19c <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa+0xd8>)
 800b162:	f7f6 fc91 	bl	8001a88 <_ZN6CEprom8LeeBytesEiiPh>
	Eprom.LeeBytes(direccion+1, 2, (uint8_t*)&id_rampa);
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	1c59      	adds	r1, r3, #1
 800b16a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800b16e:	2202      	movs	r2, #2
 800b170:	480a      	ldr	r0, [pc, #40]	@ (800b19c <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa+0xd8>)
 800b172:	f7f6 fc89 	bl	8001a88 <_ZN6CEprom8LeeBytesEiiPh>
	Eprom.LeeBytes(direccion, 1, &ocupado);
 800b176:	f107 034b 	add.w	r3, r7, #75	@ 0x4b
 800b17a:	2201      	movs	r2, #1
 800b17c:	68b9      	ldr	r1, [r7, #8]
 800b17e:	4807      	ldr	r0, [pc, #28]	@ (800b19c <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa+0xd8>)
 800b180:	f7f6 fc82 	bl	8001a88 <_ZN6CEprom8LeeBytesEiiPh>
	Eprom.LeeBytes(direccion, 18, tmp);
 800b184:	f107 0314 	add.w	r3, r7, #20
 800b188:	2212      	movs	r2, #18
 800b18a:	68b9      	ldr	r1, [r7, #8]
 800b18c:	4803      	ldr	r0, [pc, #12]	@ (800b19c <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa+0xd8>)
 800b18e:	f7f6 fc7b 	bl	8001a88 <_ZN6CEprom8LeeBytesEiiPh>
}
 800b192:	bf00      	nop
 800b194:	3750      	adds	r7, #80	@ 0x50
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
 800b19a:	bf00      	nop
 800b19c:	20000318 	.word	0x20000318

0800b1a0 <_ZN18CControladorRampas11AgregaRampaEPc>:
CRampa CControladorRampas::AgregaRampa(char *nombre)
{
 800b1a0:	b590      	push	{r4, r7, lr}
 800b1a2:	b099      	sub	sp, #100	@ 0x64
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	60b9      	str	r1, [r7, #8]
 800b1aa:	607a      	str	r2, [r7, #4]
	//busco la primer ubicacion vacia para almacear la rampa
	//recorro toda la tabla de rampas y cuento las que estan activas
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b1b0:	e04d      	b.n	800b24e <_ZN18CControladorRampas11AgregaRampaEPc+0xae>
	{
		int direccionRampa = DireccionTablaRampas + (BytesRampa * i);
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	695b      	ldr	r3, [r3, #20]
 800b1ba:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800b1bc:	fb01 f303 	mul.w	r3, r1, r3
 800b1c0:	4413      	add	r3, r2
 800b1c2:	65bb      	str	r3, [r7, #88]	@ 0x58
		//me traigo los datos de la rampa de la memoria
		CRampa tmpRampa=LeeRampaMemoria(direccionRampa);
 800b1c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b1c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b1ca:	68b9      	ldr	r1, [r7, #8]
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f7ff ff2d 	bl	800b02c <_ZN18CControladorRampas15LeeRampaMemoriaEi>
		if (tmpRampa.Ocupado == 0)
 800b1d2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d12e      	bne.n	800b238 <_ZN18CControladorRampas11AgregaRampaEPc+0x98>
		{
			tmpRampa.Ocupado = 1;
 800b1da:	2301      	movs	r3, #1
 800b1dc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
			tmpRampa.ID_RAMPA = DameSiguienteID_Rampa();
 800b1e0:	68b8      	ldr	r0, [r7, #8]
 800b1e2:	f000 f8e1 	bl	800b3a8 <_ZN18CControladorRampas21DameSiguienteID_RampaEv>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	b29b      	uxth	r3, r3
 800b1ea:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			tmpRampa.SetNombre(nombre);
 800b1ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b1f0:	6879      	ldr	r1, [r7, #4]
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f000 f99e 	bl	800b534 <_ZN6CRampa9SetNombreEPc>
			TotalRampas++;
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	68db      	ldr	r3, [r3, #12]
 800b1fc:	1c5a      	adds	r2, r3, #1
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	60da      	str	r2, [r3, #12]
			GuardaRampaMemoria(direccionRampa,&tmpRampa);
 800b202:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b206:	461a      	mov	r2, r3
 800b208:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b20a:	68b8      	ldr	r0, [r7, #8]
 800b20c:	f7ff ff5a 	bl	800b0c4 <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa>
			CRampa rampa2=LeeRampaMemoria(direccionRampa);
 800b210:	f107 0310 	add.w	r3, r7, #16
 800b214:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b216:	68b9      	ldr	r1, [r7, #8]
 800b218:	4618      	mov	r0, r3
 800b21a:	f7ff ff07 	bl	800b02c <_ZN18CControladorRampas15LeeRampaMemoriaEi>
			return tmpRampa;
 800b21e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b222:	4619      	mov	r1, r3
 800b224:	68f8      	ldr	r0, [r7, #12]
 800b226:	f000 f9a5 	bl	800b574 <_ZN6CRampaC1EOS_>
		}
 800b22a:	f107 0310 	add.w	r3, r7, #16
 800b22e:	4618      	mov	r0, r3
 800b230:	f000 f960 	bl	800b4f4 <_ZN6CRampaD1Ev>
 800b234:	2400      	movs	r4, #0
 800b236:	e000      	b.n	800b23a <_ZN18CControladorRampas11AgregaRampaEPc+0x9a>
	}
 800b238:	2401      	movs	r4, #1
 800b23a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b23e:	4618      	mov	r0, r3
 800b240:	f000 f958 	bl	800b4f4 <_ZN6CRampaD1Ev>
 800b244:	2c01      	cmp	r4, #1
 800b246:	d117      	bne.n	800b278 <_ZN18CControladorRampas11AgregaRampaEPc+0xd8>
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800b248:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b24a:	3301      	adds	r3, #1
 800b24c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	689b      	ldr	r3, [r3, #8]
 800b252:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b254:	429a      	cmp	r2, r3
 800b256:	dbac      	blt.n	800b1b2 <_ZN18CControladorRampas11AgregaRampaEPc+0x12>
	CRampa tmpRampa2;
 800b258:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800b25c:	4618      	mov	r0, r3
 800b25e:	f000 f923 	bl	800b4a8 <_ZN6CRampaC1Ev>
	return tmpRampa2;
 800b262:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800b266:	4619      	mov	r1, r3
 800b268:	68f8      	ldr	r0, [r7, #12]
 800b26a:	f000 f983 	bl	800b574 <_ZN6CRampaC1EOS_>
}
 800b26e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800b272:	4618      	mov	r0, r3
 800b274:	f000 f93e 	bl	800b4f4 <_ZN6CRampaD1Ev>
 800b278:	68f8      	ldr	r0, [r7, #12]
 800b27a:	3764      	adds	r7, #100	@ 0x64
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd90      	pop	{r4, r7, pc}

0800b280 <_ZN18CControladorRampas14ActualizaRampaEiPc>:

bool CControladorRampas::ActualizaRampa(int ID_Rampa, char *nombre)
{
 800b280:	b5b0      	push	{r4, r5, r7, lr}
 800b282:	b08c      	sub	sp, #48	@ 0x30
 800b284:	af00      	add	r7, sp, #0
 800b286:	60f8      	str	r0, [r7, #12]
 800b288:	60b9      	str	r1, [r7, #8]
 800b28a:	607a      	str	r2, [r7, #4]
 800b28c:	2400      	movs	r4, #0
	//recorro toda la tabla de rampas y cuento las que estan activas
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800b28e:	2300      	movs	r3, #0
 800b290:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b292:	e031      	b.n	800b2f8 <_ZN18CControladorRampas14ActualizaRampaEiPc+0x78>
	{
		int direccionRampa = DireccionTablaRampas + (BytesRampa * i);
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	695b      	ldr	r3, [r3, #20]
 800b29c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b29e:	fb01 f303 	mul.w	r3, r1, r3
 800b2a2:	4413      	add	r3, r2
 800b2a4:	62bb      	str	r3, [r7, #40]	@ 0x28
		//me traigo los datos de la rampa de la memoria
		CRampa tmpRampa=LeeRampaMemoria(direccionRampa);
 800b2a6:	f107 0310 	add.w	r3, r7, #16
 800b2aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b2ac:	68f9      	ldr	r1, [r7, #12]
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7ff febc 	bl	800b02c <_ZN18CControladorRampas15LeeRampaMemoriaEi>
		if (tmpRampa.ID_RAMPA == ID_Rampa)
 800b2b4:	8afb      	ldrh	r3, [r7, #22]
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d111      	bne.n	800b2e2 <_ZN18CControladorRampas14ActualizaRampaEiPc+0x62>
		{
			tmpRampa.Ocupado = 1;
 800b2be:	2301      	movs	r3, #1
 800b2c0:	753b      	strb	r3, [r7, #20]
			tmpRampa.SetNombre(nombre);
 800b2c2:	f107 0310 	add.w	r3, r7, #16
 800b2c6:	6879      	ldr	r1, [r7, #4]
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f000 f933 	bl	800b534 <_ZN6CRampa9SetNombreEPc>
			GuardaRampaMemoria(direccionRampa,&tmpRampa);
 800b2ce:	f107 0310 	add.w	r3, r7, #16
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b2d6:	68f8      	ldr	r0, [r7, #12]
 800b2d8:	f7ff fef4 	bl	800b0c4 <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa>
			return true;
 800b2dc:	2401      	movs	r4, #1
 800b2de:	2500      	movs	r5, #0
 800b2e0:	e000      	b.n	800b2e4 <_ZN18CControladorRampas14ActualizaRampaEiPc+0x64>
		}
	}
 800b2e2:	2501      	movs	r5, #1
 800b2e4:	f107 0310 	add.w	r3, r7, #16
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f000 f903 	bl	800b4f4 <_ZN6CRampaD1Ev>
 800b2ee:	2d01      	cmp	r5, #1
 800b2f0:	d108      	bne.n	800b304 <_ZN18CControladorRampas14ActualizaRampaEiPc+0x84>
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800b2f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	689b      	ldr	r3, [r3, #8]
 800b2fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b2fe:	429a      	cmp	r2, r3
 800b300:	dbc8      	blt.n	800b294 <_ZN18CControladorRampas14ActualizaRampaEiPc+0x14>
	return false;
 800b302:	2400      	movs	r4, #0
}
 800b304:	4623      	mov	r3, r4
 800b306:	4618      	mov	r0, r3
 800b308:	3730      	adds	r7, #48	@ 0x30
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b310 <_ZN18CControladorRampas12EliminaRampaEi>:

bool CControladorRampas::EliminaRampa(int ID_Rampa)
{
 800b310:	b5b0      	push	{r4, r5, r7, lr}
 800b312:	b08a      	sub	sp, #40	@ 0x28
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
 800b31a:	2500      	movs	r5, #0
	//recorro toda la tabla de rampas y cuento las que estan activas
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800b31c:	2300      	movs	r3, #0
 800b31e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b320:	e035      	b.n	800b38e <_ZN18CControladorRampas12EliminaRampaEi+0x7e>
	{
		int direccionRampa = DireccionTablaRampas + (BytesRampa * i);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	695b      	ldr	r3, [r3, #20]
 800b32a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b32c:	fb01 f303 	mul.w	r3, r1, r3
 800b330:	4413      	add	r3, r2
 800b332:	623b      	str	r3, [r7, #32]
		//me traigo los datos de la rampa de la memoria
		CRampa tmpRampa=LeeRampaMemoria(direccionRampa);
 800b334:	f107 0308 	add.w	r3, r7, #8
 800b338:	6a3a      	ldr	r2, [r7, #32]
 800b33a:	6879      	ldr	r1, [r7, #4]
 800b33c:	4618      	mov	r0, r3
 800b33e:	f7ff fe75 	bl	800b02c <_ZN18CControladorRampas15LeeRampaMemoriaEi>
		if (tmpRampa.ID_RAMPA == ID_Rampa)
 800b342:	89fb      	ldrh	r3, [r7, #14]
 800b344:	461a      	mov	r2, r3
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	4293      	cmp	r3, r2
 800b34a:	d115      	bne.n	800b378 <_ZN18CControladorRampas12EliminaRampaEi+0x68>
		{
			tmpRampa.Ocupado = 0;
 800b34c:	2300      	movs	r3, #0
 800b34e:	733b      	strb	r3, [r7, #12]
			GuardaRampaMemoria(direccionRampa,&tmpRampa);
 800b350:	f107 0308 	add.w	r3, r7, #8
 800b354:	461a      	mov	r2, r3
 800b356:	6a39      	ldr	r1, [r7, #32]
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f7ff feb3 	bl	800b0c4 <_ZN18CControladorRampas18GuardaRampaMemoriaEiP6CRampa>
			//Eprom.GuardaBytes(direccionRampa, BytesRampa,(uint8_t*) &tmpRampa);
			TotalRampas--;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	68db      	ldr	r3, [r3, #12]
 800b362:	1e5a      	subs	r2, r3, #1
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	60da      	str	r2, [r3, #12]
			return ControladorPasosRampa.EliminaPasosRampa(ID_Rampa);
 800b368:	6839      	ldr	r1, [r7, #0]
 800b36a:	480e      	ldr	r0, [pc, #56]	@ (800b3a4 <_ZN18CControladorRampas12EliminaRampaEi+0x94>)
 800b36c:	f7ff f898 	bl	800a4a0 <_ZN22CControladorPasosRampa17EliminaPasosRampaEi>
 800b370:	4603      	mov	r3, r0
 800b372:	461d      	mov	r5, r3
 800b374:	2400      	movs	r4, #0
 800b376:	e000      	b.n	800b37a <_ZN18CControladorRampas12EliminaRampaEi+0x6a>
		}
	}
 800b378:	2401      	movs	r4, #1
 800b37a:	f107 0308 	add.w	r3, r7, #8
 800b37e:	4618      	mov	r0, r3
 800b380:	f000 f8b8 	bl	800b4f4 <_ZN6CRampaD1Ev>
 800b384:	2c01      	cmp	r4, #1
 800b386:	d108      	bne.n	800b39a <_ZN18CControladorRampas12EliminaRampaEi+0x8a>
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800b388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b38a:	3301      	adds	r3, #1
 800b38c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	689b      	ldr	r3, [r3, #8]
 800b392:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b394:	429a      	cmp	r2, r3
 800b396:	dbc4      	blt.n	800b322 <_ZN18CControladorRampas12EliminaRampaEi+0x12>
	return false;
 800b398:	2500      	movs	r5, #0
}
 800b39a:	462b      	mov	r3, r5
 800b39c:	4618      	mov	r0, r3
 800b39e:	3728      	adds	r7, #40	@ 0x28
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bdb0      	pop	{r4, r5, r7, pc}
 800b3a4:	200001f4 	.word	0x200001f4

0800b3a8 <_ZN18CControladorRampas21DameSiguienteID_RampaEv>:
			return;
		}
	}
}
int CControladorRampas::DameSiguienteID_Rampa()
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b08a      	sub	sp, #40	@ 0x28
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
	UltimoID_Rampa=0;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	849a      	strh	r2, [r3, #36]	@ 0x24
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b3ba:	e022      	b.n	800b402 <_ZN18CControladorRampas21DameSiguienteID_RampaEv+0x5a>
	{
		int direccionRampa = DireccionTablaRampas + (BytesRampa * i);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	695b      	ldr	r3, [r3, #20]
 800b3c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b3c6:	fb01 f303 	mul.w	r3, r1, r3
 800b3ca:	4413      	add	r3, r2
 800b3cc:	623b      	str	r3, [r7, #32]
		//me traigo los datos de la rampa de la memoria
		CRampa tmpRampa=LeeRampaMemoria(direccionRampa);
 800b3ce:	f107 0308 	add.w	r3, r7, #8
 800b3d2:	6a3a      	ldr	r2, [r7, #32]
 800b3d4:	6879      	ldr	r1, [r7, #4]
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f7ff fe28 	bl	800b02c <_ZN18CControladorRampas15LeeRampaMemoriaEi>

		if (tmpRampa.Ocupado == 1)
 800b3dc:	7b3b      	ldrb	r3, [r7, #12]
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	d107      	bne.n	800b3f2 <_ZN18CControladorRampas21DameSiguienteID_RampaEv+0x4a>
		{
			if(tmpRampa.ID_RAMPA>=UltimoID_Rampa)
 800b3e2:	89fa      	ldrh	r2, [r7, #14]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d302      	bcc.n	800b3f2 <_ZN18CControladorRampas21DameSiguienteID_RampaEv+0x4a>
			{
				UltimoID_Rampa=tmpRampa.ID_RAMPA;
 800b3ec:	89fa      	ldrh	r2, [r7, #14]
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	849a      	strh	r2, [r3, #36]	@ 0x24
			}
		}
	}
 800b3f2:	f107 0308 	add.w	r3, r7, #8
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f000 f87c 	bl	800b4f4 <_ZN6CRampaD1Ev>
	for (int i = 0; i < NUMERO_MAXIMO_RAMPAS; i++)
 800b3fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3fe:	3301      	adds	r3, #1
 800b400:	627b      	str	r3, [r7, #36]	@ 0x24
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	689b      	ldr	r3, [r3, #8]
 800b406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b408:	429a      	cmp	r2, r3
 800b40a:	dbd7      	blt.n	800b3bc <_ZN18CControladorRampas21DameSiguienteID_RampaEv+0x14>
	UltimoID_Rampa++;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800b410:	3301      	adds	r3, #1
 800b412:	b29a      	uxth	r2, r3
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	849a      	strh	r2, [r3, #36]	@ 0x24
	return UltimoID_Rampa;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3728      	adds	r7, #40	@ 0x28
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <_ZN5CPasoC1Ev>:

#include <RapaTemperatura/CPaso.hpp>
#include "stm32f4xx.h"
#include "stm32f4xx_hal_conf.h"

CPaso::CPaso()
 800b424:	b480      	push	{r7}
 800b426:	b083      	sub	sp, #12
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	4a0d      	ldr	r2, [pc, #52]	@ (800b464 <_ZN5CPasoC1Ev+0x40>)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub
	Ocupado=0;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2200      	movs	r2, #0
 800b436:	711a      	strb	r2, [r3, #4]
	ID_Rampa=0;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2200      	movs	r2, #0
 800b43c:	715a      	strb	r2, [r3, #5]
	ID_Paso=0;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2200      	movs	r2, #0
 800b442:	719a      	strb	r2, [r3, #6]
	Temperatura=0;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2200      	movs	r2, #0
 800b448:	811a      	strh	r2, [r3, #8]
	NivelAire=0;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2200      	movs	r2, #0
 800b44e:	729a      	strb	r2, [r3, #10]
	Segundos=0;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2200      	movs	r2, #0
 800b454:	72da      	strb	r2, [r3, #11]

}
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	4618      	mov	r0, r3
 800b45a:	370c      	adds	r7, #12
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr
 800b464:	08015ad0 	.word	0x08015ad0

0800b468 <_ZN5CPasoD1Ev>:

CPaso::~CPaso()
 800b468:	b480      	push	{r7}
 800b46a:	b083      	sub	sp, #12
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	4a04      	ldr	r2, [pc, #16]	@ (800b484 <_ZN5CPasoD1Ev+0x1c>)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	4618      	mov	r0, r3
 800b47a:	370c      	adds	r7, #12
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr
 800b484:	08015ad0 	.word	0x08015ad0

0800b488 <_ZN5CPasoD0Ev>:
CPaso::~CPaso()
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
}
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f7ff ffe9 	bl	800b468 <_ZN5CPasoD1Ev>
 800b496:	210c      	movs	r1, #12
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f005 ffbd 	bl	8011418 <_ZdlPvj>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3708      	adds	r7, #8
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <_ZN6CRampaC1Ev>:

#include <RapaTemperatura/CRampa.hpp>
#include "stm32f4xx.h"
#include "stm32f4xx_hal_conf.h"

CRampa::CRampa()
 800b4a8:	b480      	push	{r7}
 800b4aa:	b085      	sub	sp, #20
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	4a0f      	ldr	r2, [pc, #60]	@ (800b4f0 <_ZN6CRampaC1Ev+0x48>)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub
	ID_RAMPA=0;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	80da      	strh	r2, [r3, #6]
	Ocupado=0;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	711a      	strb	r2, [r3, #4]
	for(int i=0;i<TAM_NOMBRE;i++)
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	60fb      	str	r3, [r7, #12]
 800b4c6:	e008      	b.n	800b4da <_ZN6CRampaC1Ev+0x32>
	{
		Nombre[i]=' ';
 800b4c8:	687a      	ldr	r2, [r7, #4]
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	4413      	add	r3, r2
 800b4ce:	3308      	adds	r3, #8
 800b4d0:	2220      	movs	r2, #32
 800b4d2:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<TAM_NOMBRE;i++)
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	60fb      	str	r3, [r7, #12]
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	2b0e      	cmp	r3, #14
 800b4de:	ddf3      	ble.n	800b4c8 <_ZN6CRampaC1Ev+0x20>
	}

}
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3714      	adds	r7, #20
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ec:	4770      	bx	lr
 800b4ee:	bf00      	nop
 800b4f0:	08015ae0 	.word	0x08015ae0

0800b4f4 <_ZN6CRampaD1Ev>:

CRampa::~CRampa()
 800b4f4:	b480      	push	{r7}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	4a04      	ldr	r2, [pc, #16]	@ (800b510 <_ZN6CRampaD1Ev+0x1c>)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	4618      	mov	r0, r3
 800b506:	370c      	adds	r7, #12
 800b508:	46bd      	mov	sp, r7
 800b50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50e:	4770      	bx	lr
 800b510:	08015ae0 	.word	0x08015ae0

0800b514 <_ZN6CRampaD0Ev>:
CRampa::~CRampa()
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
}
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f7ff ffe9 	bl	800b4f4 <_ZN6CRampaD1Ev>
 800b522:	2118      	movs	r1, #24
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f005 ff77 	bl	8011418 <_ZdlPvj>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	4618      	mov	r0, r3
 800b52e:	3708      	adds	r7, #8
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}

0800b534 <_ZN6CRampa9SetNombreEPc>:
	}
	return tmp;

}
void CRampa::SetNombre(char* nombre)
{
 800b534:	b480      	push	{r7}
 800b536:	b085      	sub	sp, #20
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	6039      	str	r1, [r7, #0]
	for(int i=0;i<TAM_NOMBRE;i++)
 800b53e:	2300      	movs	r3, #0
 800b540:	60fb      	str	r3, [r7, #12]
 800b542:	e00c      	b.n	800b55e <_ZN6CRampa9SetNombreEPc+0x2a>
	{
		Nombre[i]=nombre[i];
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	683a      	ldr	r2, [r7, #0]
 800b548:	4413      	add	r3, r2
 800b54a:	7819      	ldrb	r1, [r3, #0]
 800b54c:	687a      	ldr	r2, [r7, #4]
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	4413      	add	r3, r2
 800b552:	3308      	adds	r3, #8
 800b554:	460a      	mov	r2, r1
 800b556:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<TAM_NOMBRE;i++)
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	3301      	adds	r3, #1
 800b55c:	60fb      	str	r3, [r7, #12]
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2b0e      	cmp	r3, #14
 800b562:	ddef      	ble.n	800b544 <_ZN6CRampa9SetNombreEPc+0x10>
	}
}
 800b564:	bf00      	nop
 800b566:	bf00      	nop
 800b568:	3714      	adds	r7, #20
 800b56a:	46bd      	mov	sp, r7
 800b56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b570:	4770      	bx	lr
	...

0800b574 <_ZN6CRampaC1EOS_>:
CRampa::CRampa(CRampa &&rampa)
 800b574:	b480      	push	{r7}
 800b576:	b085      	sub	sp, #20
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
 800b57e:	4a13      	ldr	r2, [pc, #76]	@ (800b5cc <_ZN6CRampaC1EOS_+0x58>)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	601a      	str	r2, [r3, #0]
{
	ID_RAMPA=rampa.ID_RAMPA;
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	88da      	ldrh	r2, [r3, #6]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	80da      	strh	r2, [r3, #6]
	Ocupado=rampa.Ocupado;
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	791a      	ldrb	r2, [r3, #4]
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	711a      	strb	r2, [r3, #4]
	for(int i=0;i<TAM_NOMBRE;i++)
 800b594:	2300      	movs	r3, #0
 800b596:	60fb      	str	r3, [r7, #12]
 800b598:	e00d      	b.n	800b5b6 <_ZN6CRampaC1EOS_+0x42>
	{
		Nombre[i]=rampa.Nombre[i];
 800b59a:	683a      	ldr	r2, [r7, #0]
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	4413      	add	r3, r2
 800b5a0:	3308      	adds	r3, #8
 800b5a2:	7819      	ldrb	r1, [r3, #0]
 800b5a4:	687a      	ldr	r2, [r7, #4]
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	4413      	add	r3, r2
 800b5aa:	3308      	adds	r3, #8
 800b5ac:	460a      	mov	r2, r1
 800b5ae:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<TAM_NOMBRE;i++)
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	60fb      	str	r3, [r7, #12]
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	2b0e      	cmp	r3, #14
 800b5ba:	ddee      	ble.n	800b59a <_ZN6CRampaC1EOS_+0x26>
	}

}
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3714      	adds	r7, #20
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c8:	4770      	bx	lr
 800b5ca:	bf00      	nop
 800b5cc:	08015ae0 	.word	0x08015ae0

0800b5d0 <_ZN31CManejadorEventoSensorMagneticoC1Ev>:
 *      Author: W10
 */

#include <SensorMagnetico/CManejadorEventoSensorMagnetico.hpp>

CManejadorEventoSensorMagnetico::CManejadorEventoSensorMagnetico()
 800b5d0:	b480      	push	{r7}
 800b5d2:	b083      	sub	sp, #12
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	4a04      	ldr	r2, [pc, #16]	@ (800b5ec <_ZN31CManejadorEventoSensorMagneticoC1Ev+0x1c>)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	370c      	adds	r7, #12
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr
 800b5ec:	08015af0 	.word	0x08015af0

0800b5f0 <_ZN31CManejadorEventoSensorMagneticoD1Ev>:

CManejadorEventoSensorMagnetico::~CManejadorEventoSensorMagnetico()
 800b5f0:	b480      	push	{r7}
 800b5f2:	b083      	sub	sp, #12
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
 800b5f8:	4a04      	ldr	r2, [pc, #16]	@ (800b60c <_ZN31CManejadorEventoSensorMagneticoD1Ev+0x1c>)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	4618      	mov	r0, r3
 800b602:	370c      	adds	r7, #12
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr
 800b60c:	08015af0 	.word	0x08015af0

0800b610 <_ZN31CManejadorEventoSensorMagneticoD0Ev>:
CManejadorEventoSensorMagnetico::~CManejadorEventoSensorMagnetico()
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
}
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f7ff ffe9 	bl	800b5f0 <_ZN31CManejadorEventoSensorMagneticoD1Ev>
 800b61e:	2104      	movs	r1, #4
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f005 fef9 	bl	8011418 <_ZdlPvj>
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	4618      	mov	r0, r3
 800b62a:	3708      	adds	r7, #8
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}

0800b630 <_ZN31CManejadorEventoSensorMagnetico23OnSensorMagneticoChangeEi>:
void CManejadorEventoSensorMagnetico::OnSensorMagneticoChange(int Estado)
{
 800b630:	b480      	push	{r7}
 800b632:	b083      	sub	sp, #12
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
	//evento que se llama cuando cambia el estado del sensor
}
 800b63a:	bf00      	nop
 800b63c:	370c      	adds	r7, #12
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr
	...

0800b648 <_ZN15SensorMagneticoC1Ev>:
#include <SensorMagnetico/SensorMagnetico.hpp>
#include "stm32f4xx.h"
#include "Constantes.hpp"
#include "Uart/Uart.hpp"

SensorMagnetico::SensorMagnetico()
 800b648:	b480      	push	{r7}
 800b64a:	b083      	sub	sp, #12
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	4a0a      	ldr	r2, [pc, #40]	@ (800b67c <_ZN15SensorMagneticoC1Ev+0x34>)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	601a      	str	r2, [r3, #0]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2200      	movs	r2, #0
 800b65a:	60da      	str	r2, [r3, #12]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2201      	movs	r2, #1
 800b660:	611a      	str	r2, [r3, #16]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2201      	movs	r2, #1
 800b666:	615a      	str	r2, [r3, #20]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2200      	movs	r2, #0
 800b66c:	619a      	str	r2, [r3, #24]
{
	// TODO Auto-generated constructor stub

}
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	4618      	mov	r0, r3
 800b672:	370c      	adds	r7, #12
 800b674:	46bd      	mov	sp, r7
 800b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67a:	4770      	bx	lr
 800b67c:	08015b04 	.word	0x08015b04

0800b680 <_ZN15SensorMagneticoD1Ev>:

SensorMagnetico::~SensorMagnetico()
 800b680:	b480      	push	{r7}
 800b682:	b083      	sub	sp, #12
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	4a04      	ldr	r2, [pc, #16]	@ (800b69c <_ZN15SensorMagneticoD1Ev+0x1c>)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	4618      	mov	r0, r3
 800b692:	370c      	adds	r7, #12
 800b694:	46bd      	mov	sp, r7
 800b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69a:	4770      	bx	lr
 800b69c:	08015b04 	.word	0x08015b04

0800b6a0 <_ZN15SensorMagneticoD0Ev>:
SensorMagnetico::~SensorMagnetico()
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b082      	sub	sp, #8
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
}
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f7ff ffe9 	bl	800b680 <_ZN15SensorMagneticoD1Ev>
 800b6ae:	211c      	movs	r1, #28
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f005 feb1 	bl	8011418 <_ZdlPvj>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3708      	adds	r7, #8
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}

0800b6c0 <_ZN15SensorMagnetico10ConfigurarEP12GPIO_TypeDeft>:

void SensorMagnetico::Configurar(GPIO_TypeDef *puerto, uint16_t pin)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b085      	sub	sp, #20
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	60f8      	str	r0, [r7, #12]
 800b6c8:	60b9      	str	r1, [r7, #8]
 800b6ca:	4613      	mov	r3, r2
 800b6cc:	80fb      	strh	r3, [r7, #6]
	GPIO_Port = puerto;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	68ba      	ldr	r2, [r7, #8]
 800b6d2:	605a      	str	r2, [r3, #4]
	Gpio_Pin = pin;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	88fa      	ldrh	r2, [r7, #6]
 800b6d8:	811a      	strh	r2, [r3, #8]

}
 800b6da:	bf00      	nop
 800b6dc:	3714      	adds	r7, #20
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr

0800b6e6 <_ZN15SensorMagnetico4InitEv>:
void SensorMagnetico::Init()
{
 800b6e6:	b580      	push	{r7, lr}
 800b6e8:	b088      	sub	sp, #32
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 800b6ee:	f107 030c 	add.w	r3, r7, #12
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	601a      	str	r2, [r3, #0]
 800b6f6:	605a      	str	r2, [r3, #4]
 800b6f8:	609a      	str	r2, [r3, #8]
 800b6fa:	60da      	str	r2, [r3, #12]
 800b6fc:	611a      	str	r2, [r3, #16]
	{ 0 };
	GPIO_InitStruct.Pin = Gpio_Pin;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	891b      	ldrh	r3, [r3, #8]
 800b702:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b704:	2300      	movs	r3, #0
 800b706:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b708:	2301      	movs	r3, #1
 800b70a:	617b      	str	r3, [r7, #20]
	//PruebaTempratura(0);
	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	f107 020c 	add.w	r2, r7, #12
 800b714:	4611      	mov	r1, r2
 800b716:	4618      	mov	r0, r3
 800b718:	f002 f9c6 	bl	800daa8 <HAL_GPIO_Init>
}
 800b71c:	bf00      	nop
 800b71e:	3720      	adds	r7, #32
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <_ZN15SensorMagnetico22AsignaManejadorEventosEP31CManejadorEventoSensorMagnetico>:
void SensorMagnetico::AsignaManejadorEventos(
		CManejadorEventoSensorMagnetico *manejador)
{
 800b724:	b480      	push	{r7}
 800b726:	b083      	sub	sp, #12
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	6039      	str	r1, [r7, #0]
	Manejador = manejador;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	683a      	ldr	r2, [r7, #0]
 800b732:	60da      	str	r2, [r3, #12]

}
 800b734:	bf00      	nop
 800b736:	370c      	adds	r7, #12
 800b738:	46bd      	mov	sp, r7
 800b73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73e:	4770      	bx	lr

0800b740 <_ZN15SensorMagnetico4LeerEv>:
int SensorMagnetico::Leer()
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b082      	sub	sp, #8
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(GPIO_Port, Gpio_Pin); // lee el pin
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	685a      	ldr	r2, [r3, #4]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	891b      	ldrh	r3, [r3, #8]
 800b750:	4619      	mov	r1, r3
 800b752:	4610      	mov	r0, r2
 800b754:	f002 fb2c 	bl	800ddb0 <HAL_GPIO_ReadPin>
 800b758:	4603      	mov	r3, r0

}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3708      	adds	r7, #8
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}
	...

0800b764 <_ZN26InterfaceSensorTemperaturaC1Ev>:
 *      Author: W10
 */

#include <SensorTemperatura/InterfaceSensorTemperatura/InterfaceSensorTemperatura.hpp>

InterfaceSensorTemperatura::InterfaceSensorTemperatura()
 800b764:	b480      	push	{r7}
 800b766:	b083      	sub	sp, #12
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	4a04      	ldr	r2, [pc, #16]	@ (800b780 <_ZN26InterfaceSensorTemperaturaC1Ev+0x1c>)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	4618      	mov	r0, r3
 800b776:	370c      	adds	r7, #12
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr
 800b780:	08015b14 	.word	0x08015b14

0800b784 <_ZN26InterfaceSensorTemperaturaD1Ev>:

InterfaceSensorTemperatura::~InterfaceSensorTemperatura()
 800b784:	b480      	push	{r7}
 800b786:	b083      	sub	sp, #12
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	4a04      	ldr	r2, [pc, #16]	@ (800b7a0 <_ZN26InterfaceSensorTemperaturaD1Ev+0x1c>)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	4618      	mov	r0, r3
 800b796:	370c      	adds	r7, #12
 800b798:	46bd      	mov	sp, r7
 800b79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79e:	4770      	bx	lr
 800b7a0:	08015b14 	.word	0x08015b14

0800b7a4 <_ZN26InterfaceSensorTemperaturaD0Ev>:
InterfaceSensorTemperatura::~InterfaceSensorTemperatura()
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b082      	sub	sp, #8
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
}
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f7ff ffe9 	bl	800b784 <_ZN26InterfaceSensorTemperaturaD1Ev>
 800b7b2:	2104      	movs	r1, #4
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f005 fe2f 	bl	8011418 <_ZdlPvj>
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3708      	adds	r7, #8
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}

0800b7c4 <_ZN26InterfaceSensorTemperatura4InitEv>:

void InterfaceSensorTemperatura::Init()
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b083      	sub	sp, #12
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]

}
 800b7cc:	bf00      	nop
 800b7ce:	370c      	adds	r7, #12
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr

0800b7d8 <_ZN26InterfaceSensorTemperatura13LeeTemepaturaEv>:
int InterfaceSensorTemperatura::LeeTemepatura()
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b083      	sub	sp, #12
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
	return 0;
 800b7e0:	2300      	movs	r3, #0
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	370c      	adds	r7, #12
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ec:	4770      	bx	lr
	...

0800b7f0 <_ZN15SensorAnalogicoC1Ev>:
#include "Constantes.hpp"
#include <EPROM/CEprom.hpp>

extern I2C_HandleTypeDef hi2c1;

SensorAnalogico::SensorAnalogico()
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b082      	sub	sp, #8
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f7ff ffb2 	bl	800b764 <_ZN26InterfaceSensorTemperaturaC1Ev>
 800b800:	4a06      	ldr	r2, [pc, #24]	@ (800b81c <_ZN15SensorAnalogicoC1Ev+0x2c>)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	601a      	str	r2, [r3, #0]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2200      	movs	r2, #0
 800b80a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2200      	movs	r2, #0
 800b810:	651a      	str	r2, [r3, #80]	@ 0x50
{
	// TODO Auto-generated constructor stub

}
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	4618      	mov	r0, r3
 800b816:	3708      	adds	r7, #8
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}
 800b81c:	08015b2c 	.word	0x08015b2c

0800b820 <_ZN15SensorAnalogicoD1Ev>:

SensorAnalogico::~SensorAnalogico()
 800b820:	b580      	push	{r7, lr}
 800b822:	b082      	sub	sp, #8
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
 800b828:	4a05      	ldr	r2, [pc, #20]	@ (800b840 <_ZN15SensorAnalogicoD1Ev+0x20>)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	4618      	mov	r0, r3
 800b832:	f7ff ffa7 	bl	800b784 <_ZN26InterfaceSensorTemperaturaD1Ev>
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	4618      	mov	r0, r3
 800b83a:	3708      	adds	r7, #8
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}
 800b840:	08015b2c 	.word	0x08015b2c

0800b844 <_ZN15SensorAnalogicoD0Ev>:
SensorAnalogico::~SensorAnalogico()
 800b844:	b580      	push	{r7, lr}
 800b846:	b082      	sub	sp, #8
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
}
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f7ff ffe7 	bl	800b820 <_ZN15SensorAnalogicoD1Ev>
 800b852:	2154      	movs	r1, #84	@ 0x54
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f005 fddf 	bl	8011418 <_ZdlPvj>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	4618      	mov	r0, r3
 800b85e:	3708      	adds	r7, #8
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}

0800b864 <_ZN15SensorAnalogico4InitEv>:

void SensorAnalogico::Init()
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b088      	sub	sp, #32
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800b86c:	2300      	movs	r3, #0
 800b86e:	60fb      	str	r3, [r7, #12]
 800b870:	4b36      	ldr	r3, [pc, #216]	@ (800b94c <_ZN15SensorAnalogico4InitEv+0xe8>)
 800b872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b874:	4a35      	ldr	r2, [pc, #212]	@ (800b94c <_ZN15SensorAnalogico4InitEv+0xe8>)
 800b876:	f043 0301 	orr.w	r3, r3, #1
 800b87a:	6313      	str	r3, [r2, #48]	@ 0x30
 800b87c:	4b33      	ldr	r3, [pc, #204]	@ (800b94c <_ZN15SensorAnalogico4InitEv+0xe8>)
 800b87e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b880:	f003 0301 	and.w	r3, r3, #1
 800b884:	60fb      	str	r3, [r7, #12]
 800b886:	68fb      	ldr	r3, [r7, #12]
	 ADC_ChannelConfTypeDef sConfig = {0};
 800b888:	f107 0310 	add.w	r3, r7, #16
 800b88c:	2200      	movs	r2, #0
 800b88e:	601a      	str	r2, [r3, #0]
 800b890:	605a      	str	r2, [r3, #4]
 800b892:	609a      	str	r2, [r3, #8]
 800b894:	60da      	str	r2, [r3, #12]
	 hadc1.Instance = ADC1;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	4a2d      	ldr	r2, [pc, #180]	@ (800b950 <_ZN15SensorAnalogico4InitEv+0xec>)
 800b89a:	605a      	str	r2, [r3, #4]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2; //NUEVO
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	609a      	str	r2, [r3, #8]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B; //nuevo
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	60da      	str	r2, [r3, #12]

	 hadc1.Init.ScanConvMode =  DISABLE;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	615a      	str	r2, [r3, #20]
	 hadc1.Init.ContinuousConvMode = ENABLE;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2201      	movs	r2, #1
 800b8b2:	771a      	strb	r2, [r3, #28]
	 hadc1.Init.DiscontinuousConvMode = DISABLE;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	 hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;//nuevo
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	631a      	str	r2, [r3, #48]	@ 0x30
	 hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	4a23      	ldr	r2, [pc, #140]	@ (800b954 <_ZN15SensorAnalogico4InitEv+0xf0>)
 800b8c6:	62da      	str	r2, [r3, #44]	@ 0x2c
	 hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	611a      	str	r2, [r3, #16]
	 hadc1.State=	 HAL_ADC_STATE_RESET;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	645a      	str	r2, [r3, #68]	@ 0x44
	 hadc1.Init.NbrOfConversion = 1;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2201      	movs	r2, #1
 800b8d8:	621a      	str	r2, [r3, #32]
	  hadc1.Init.DMAContinuousRequests = DISABLE; //nuevo
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2201      	movs	r2, #1
 800b8e6:	619a      	str	r2, [r3, #24]

	 if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	3304      	adds	r3, #4
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f001 fc95 	bl	800d21c <HAL_ADC_Init>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	bf14      	ite	ne
 800b8f8:	2301      	movne	r3, #1
 800b8fa:	2300      	moveq	r3, #0
 800b8fc:	b2db      	uxtb	r3, r3
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d002      	beq.n	800b908 <_ZN15SensorAnalogico4InitEv+0xa4>
	 {
	 Error_Handler();
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f000 f86a 	bl	800b9dc <_ZN15SensorAnalogico13Error_HandlerEv>
	 }

	 sConfig.Channel = ADC_CHANNEL_4;//ADC_CHANNEL_3;
 800b908:	2304      	movs	r3, #4
 800b90a:	613b      	str	r3, [r7, #16]
	 sConfig.Rank =1; // ADC_REGULAR_RANK_1;
 800b90c:	2301      	movs	r3, #1
 800b90e:	617b      	str	r3, [r7, #20]
	 sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES; //ADC_SAMPLETIME_239CYCLES_5;
 800b910:	2300      	movs	r3, #0
 800b912:	61bb      	str	r3, [r7, #24]
	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	3304      	adds	r3, #4
 800b918:	f107 0210 	add.w	r2, r7, #16
 800b91c:	4611      	mov	r1, r2
 800b91e:	4618      	mov	r0, r3
 800b920:	f001 fd82 	bl	800d428 <HAL_ADC_ConfigChannel>
 800b924:	4603      	mov	r3, r0
 800b926:	2b00      	cmp	r3, #0
 800b928:	bf14      	ite	ne
 800b92a:	2301      	movne	r3, #1
 800b92c:	2300      	moveq	r3, #0
 800b92e:	b2db      	uxtb	r3, r3
 800b930:	2b00      	cmp	r3, #0
 800b932:	d002      	beq.n	800b93a <_ZN15SensorAnalogico4InitEv+0xd6>
	 {
	 Error_Handler();
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f000 f851 	bl	800b9dc <_ZN15SensorAnalogico13Error_HandlerEv>
	 }
	 HAL_ADC_Start(&hadc1);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	3304      	adds	r3, #4
 800b93e:	4618      	mov	r0, r3
 800b940:	f001 fcb0 	bl	800d2a4 <HAL_ADC_Start>

}
 800b944:	bf00      	nop
 800b946:	3720      	adds	r7, #32
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}
 800b94c:	40023800 	.word	0x40023800
 800b950:	40012000 	.word	0x40012000
 800b954:	0f000001 	.word	0x0f000001

0800b958 <_ZN15SensorAnalogico13LeeTemepaturaEv>:
int SensorAnalogico::LeeTemepatura()
{
 800b958:	b590      	push	{r4, r7, lr}
 800b95a:	b085      	sub	sp, #20
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
	int tiempoactual=HAL_GetTick();
 800b960:	f001 fc2c 	bl	800d1bc <HAL_GetTick>
 800b964:	4603      	mov	r3, r0
 800b966:	60fb      	str	r3, [r7, #12]
	if(tiempoactual<TiempoTranscurrido)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b96c:	68fa      	ldr	r2, [r7, #12]
 800b96e:	429a      	cmp	r2, r3
 800b970:	da02      	bge.n	800b978 <_ZN15SensorAnalogico13LeeTemepaturaEv+0x20>
	{
		return UltimaTemperatura;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b976:	e02b      	b.n	800b9d0 <_ZN15SensorAnalogico13LeeTemepaturaEv+0x78>
	}
	TiempoTranscurrido=tiempoactual+500;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	f503 72fa 	add.w	r2, r3, #500	@ 0x1f4
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	64da      	str	r2, [r3, #76]	@ 0x4c

	Init();
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	3308      	adds	r3, #8
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	4798      	blx	r3
	HAL_ADC_Start(&hadc1);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	3304      	adds	r3, #4
 800b992:	4618      	mov	r0, r3
 800b994:	f001 fc86 	bl	800d2a4 <HAL_ADC_Start>
	int valor=HAL_ADC_GetValue(&hadc1);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	3304      	adds	r3, #4
 800b99c:	4618      	mov	r0, r3
 800b99e:	f001 fd35 	bl	800d40c <HAL_ADC_GetValue>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	60bb      	str	r3, [r7, #8]
	//4095->500
	//valor->X
	//x=valor*500/4095
	UltimaTemperatura=(int)(valor*400/4095)+LeeMemoria();
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800b9ac:	fb02 f303 	mul.w	r3, r2, r3
 800b9b0:	4a09      	ldr	r2, [pc, #36]	@ (800b9d8 <_ZN15SensorAnalogico13LeeTemepaturaEv+0x80>)
 800b9b2:	fb82 1203 	smull	r1, r2, r2, r3
 800b9b6:	441a      	add	r2, r3
 800b9b8:	12d2      	asrs	r2, r2, #11
 800b9ba:	17db      	asrs	r3, r3, #31
 800b9bc:	1ad4      	subs	r4, r2, r3
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f000 f816 	bl	800b9f0 <_ZN15SensorAnalogico10LeeMemoriaEv>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	18e2      	adds	r2, r4, r3
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	651a      	str	r2, [r3, #80]	@ 0x50
	return 	UltimaTemperatura;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50

}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3714      	adds	r7, #20
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd90      	pop	{r4, r7, pc}
 800b9d8:	80080081 	.word	0x80080081

0800b9dc <_ZN15SensorAnalogico13Error_HandlerEv>:
void SensorAnalogico::Error_Handler(void)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b083      	sub	sp, #12
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]

}
 800b9e4:	bf00      	nop
 800b9e6:	370c      	adds	r7, #12
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr

0800b9f0 <_ZN15SensorAnalogico10LeeMemoriaEv>:
int SensorAnalogico::LeeMemoria()
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b082      	sub	sp, #8
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
	return Eprom.DameAjusteTemperatura();
 800b9f8:	4803      	ldr	r0, [pc, #12]	@ (800ba08 <_ZN15SensorAnalogico10LeeMemoriaEv+0x18>)
 800b9fa:	f7f5 fda5 	bl	8001548 <_ZN6CEprom21DameAjusteTemperaturaEv>
 800b9fe:	4603      	mov	r3, r0
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3708      	adds	r7, #8
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}
 800ba08:	20000318 	.word	0x20000318

0800ba0c <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type>:

#include "Timer.hpp"
#include<stdbool.h>

bool CTimer::Init(TIM_TypeDef* TimInstance, uint32_t periodo, 	IRQn_Type Tim_Irq)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b08c      	sub	sp, #48	@ 0x30
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	60f8      	str	r0, [r7, #12]
 800ba14:	60b9      	str	r1, [r7, #8]
 800ba16:	607a      	str	r2, [r7, #4]
 800ba18:	70fb      	strb	r3, [r7, #3]
	Periodo = periodo;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	687a      	ldr	r2, [r7, #4]
 800ba1e:	64da      	str	r2, [r3, #76]	@ 0x4c
	__HAL_RCC_TIM3_CLK_ENABLE();
 800ba20:	2300      	movs	r3, #0
 800ba22:	617b      	str	r3, [r7, #20]
 800ba24:	4b3b      	ldr	r3, [pc, #236]	@ (800bb14 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x108>)
 800ba26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba28:	4a3a      	ldr	r2, [pc, #232]	@ (800bb14 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x108>)
 800ba2a:	f043 0302 	orr.w	r3, r3, #2
 800ba2e:	6413      	str	r3, [r2, #64]	@ 0x40
 800ba30:	4b38      	ldr	r3, [pc, #224]	@ (800bb14 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x108>)
 800ba32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba34:	f003 0302 	and.w	r3, r3, #2
 800ba38:	617b      	str	r3, [r7, #20]
 800ba3a:	697b      	ldr	r3, [r7, #20]
	HTim.Instance = TimInstance;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	68ba      	ldr	r2, [r7, #8]
 800ba40:	601a      	str	r2, [r3, #0]
	HTim.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	2200      	movs	r2, #0
 800ba46:	609a      	str	r2, [r3, #8]
	HTim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	611a      	str	r2, [r3, #16]
	//la siguiente configuracion es para que me de un tiempo de 83.3 micro segundos para generar la interrupcion
	
	HTim.Init.Period = 3350-1;//3000 - 1; //8399
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	f640 5215 	movw	r2, #3349	@ 0xd15
 800ba54:	60da      	str	r2, [r3, #12]
	HTim.Init.Prescaler = (Periodo * 1) - 1;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba5a:	1e5a      	subs	r2, r3, #1
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	605a      	str	r2, [r3, #4]
	HTim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	2200      	movs	r2, #0
 800ba64:	619a      	str	r2, [r3, #24]
	HTim.Init.RepetitionCounter = 0;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	2200      	movs	r2, #0
 800ba6a:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&HTim) != HAL_OK)
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f004 f90e 	bl	800fc90 <HAL_TIM_Base_Init>
 800ba74:	4603      	mov	r3, r0
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	bf14      	ite	ne
 800ba7a:	2301      	movne	r3, #1
 800ba7c:	2300      	moveq	r3, #0
 800ba7e:	b2db      	uxtb	r3, r3
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d001      	beq.n	800ba88 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x7c>
	{
		return false;
 800ba84:	2300      	movs	r3, #0
 800ba86:	e041      	b.n	800bb0c <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x100>
	}

	TIM_ClockConfigTypeDef TimClock =
 800ba88:	f107 0320 	add.w	r3, r7, #32
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	601a      	str	r2, [r3, #0]
 800ba90:	605a      	str	r2, [r3, #4]
 800ba92:	609a      	str	r2, [r3, #8]
 800ba94:	60da      	str	r2, [r3, #12]
	{ 0 };
	TimClock.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ba96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ba9a:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_ConfigClockSource(&HTim, &TimClock) != HAL_OK)
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	f107 0220 	add.w	r2, r7, #32
 800baa2:	4611      	mov	r1, r2
 800baa4:	4618      	mov	r0, r3
 800baa6:	f004 fc61 	bl	801036c <HAL_TIM_ConfigClockSource>
 800baaa:	4603      	mov	r3, r0
 800baac:	2b00      	cmp	r3, #0
 800baae:	bf14      	ite	ne
 800bab0:	2301      	movne	r3, #1
 800bab2:	2300      	moveq	r3, #0
 800bab4:	b2db      	uxtb	r3, r3
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d001      	beq.n	800babe <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0xb2>
	{
		return false;
 800baba:	2300      	movs	r3, #0
 800babc:	e026      	b.n	800bb0c <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x100>
	}

	TIM_MasterConfigTypeDef TimMaster =
 800babe:	f107 0318 	add.w	r3, r7, #24
 800bac2:	2200      	movs	r2, #0
 800bac4:	601a      	str	r2, [r3, #0]
 800bac6:	605a      	str	r2, [r3, #4]
	{ 0 };
	TimMaster.MasterSlaveMode = TIM_SLAVEMODE_DISABLE;
 800bac8:	2300      	movs	r3, #0
 800baca:	61fb      	str	r3, [r7, #28]
	TimMaster.MasterOutputTrigger = TIM_TRGO_RESET;
 800bacc:	2300      	movs	r3, #0
 800bace:	61bb      	str	r3, [r7, #24]
	if (HAL_TIMEx_MasterConfigSynchronization(&HTim, &TimMaster) != HAL_OK)
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f107 0218 	add.w	r2, r7, #24
 800bad6:	4611      	mov	r1, r2
 800bad8:	4618      	mov	r0, r3
 800bada:	f005 f80f 	bl	8010afc <HAL_TIMEx_MasterConfigSynchronization>
 800bade:	4603      	mov	r3, r0
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	bf14      	ite	ne
 800bae4:	2301      	movne	r3, #1
 800bae6:	2300      	moveq	r3, #0
 800bae8:	b2db      	uxtb	r3, r3
 800baea:	2b00      	cmp	r3, #0
 800baec:	d001      	beq.n	800baf2 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0xe6>
	{
		return false;
 800baee:	2300      	movs	r3, #0
 800baf0:	e00c      	b.n	800bb0c <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x100>
	}

	HAL_NVIC_SetPriority(Tim_Irq, 5, 0);
 800baf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800baf6:	2200      	movs	r2, #0
 800baf8:	2105      	movs	r1, #5
 800bafa:	4618      	mov	r0, r3
 800bafc:	f001 ff9d 	bl	800da3a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(Tim_Irq);
 800bb00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb04:	4618      	mov	r0, r3
 800bb06:	f001 ffb4 	bl	800da72 <HAL_NVIC_EnableIRQ>
	return true;
 800bb0a:	2301      	movs	r3, #1
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3730      	adds	r7, #48	@ 0x30
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}
 800bb14:	40023800 	.word	0x40023800

0800bb18 <_Z11uartx_writec>:
#include "string.h"
#include "stm32f4xx_hal.h"
UART_HandleTypeDef Huart1;

void uartx_write(char ch)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b082      	sub	sp, #8
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	4603      	mov	r3, r0
 800bb20:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&Huart1,(uint8_t*) &ch, 1, 0xffff);
 800bb22:	1df9      	adds	r1, r7, #7
 800bb24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bb28:	2201      	movs	r2, #1
 800bb2a:	4803      	ldr	r0, [pc, #12]	@ (800bb38 <_Z11uartx_writec+0x20>)
 800bb2c:	f005 f8b8 	bl	8010ca0 <HAL_UART_Transmit>

}
 800bb30:	bf00      	nop
 800bb32:	3708      	adds	r7, #8
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}
 800bb38:	2000020c 	.word	0x2000020c

0800bb3c <_Z16uartx_write_textPc>:

void uartx_write_text(char *info)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b082      	sub	sp, #8
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]

	while(*info)  uartx_write(*info++);
 800bb44:	e006      	b.n	800bb54 <_Z16uartx_write_textPc+0x18>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	1c5a      	adds	r2, r3, #1
 800bb4a:	607a      	str	r2, [r7, #4]
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f7ff ffe2 	bl	800bb18 <_Z11uartx_writec>
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d1f4      	bne.n	800bb46 <_Z16uartx_write_textPc+0xa>

}
 800bb5c:	bf00      	nop
 800bb5e:	bf00      	nop
 800bb60:	3708      	adds	r7, #8
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
	...

0800bb68 <_Z16USART1_UART_Initv>:
	}
}

//static
void USART1_UART_Init(void)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	Huart1.Instance = USART1;
 800bb6c:	4b13      	ldr	r3, [pc, #76]	@ (800bbbc <_Z16USART1_UART_Initv+0x54>)
 800bb6e:	4a14      	ldr	r2, [pc, #80]	@ (800bbc0 <_Z16USART1_UART_Initv+0x58>)
 800bb70:	601a      	str	r2, [r3, #0]
	Huart1.Init.BaudRate = 115200;
 800bb72:	4b12      	ldr	r3, [pc, #72]	@ (800bbbc <_Z16USART1_UART_Initv+0x54>)
 800bb74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800bb78:	605a      	str	r2, [r3, #4]
	Huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800bb7a:	4b10      	ldr	r3, [pc, #64]	@ (800bbbc <_Z16USART1_UART_Initv+0x54>)
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	609a      	str	r2, [r3, #8]
	Huart1.Init.StopBits = UART_STOPBITS_1;
 800bb80:	4b0e      	ldr	r3, [pc, #56]	@ (800bbbc <_Z16USART1_UART_Initv+0x54>)
 800bb82:	2200      	movs	r2, #0
 800bb84:	60da      	str	r2, [r3, #12]
	Huart1.Init.Parity = UART_PARITY_NONE;
 800bb86:	4b0d      	ldr	r3, [pc, #52]	@ (800bbbc <_Z16USART1_UART_Initv+0x54>)
 800bb88:	2200      	movs	r2, #0
 800bb8a:	611a      	str	r2, [r3, #16]
	Huart1.Init.Mode = UART_MODE_TX_RX;
 800bb8c:	4b0b      	ldr	r3, [pc, #44]	@ (800bbbc <_Z16USART1_UART_Initv+0x54>)
 800bb8e:	220c      	movs	r2, #12
 800bb90:	615a      	str	r2, [r3, #20]
	Huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800bb92:	4b0a      	ldr	r3, [pc, #40]	@ (800bbbc <_Z16USART1_UART_Initv+0x54>)
 800bb94:	2200      	movs	r2, #0
 800bb96:	619a      	str	r2, [r3, #24]
	Huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800bb98:	4b08      	ldr	r3, [pc, #32]	@ (800bbbc <_Z16USART1_UART_Initv+0x54>)
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&Huart1) != HAL_OK)
 800bb9e:	4807      	ldr	r0, [pc, #28]	@ (800bbbc <_Z16USART1_UART_Initv+0x54>)
 800bba0:	f005 f82e 	bl	8010c00 <HAL_UART_Init>
 800bba4:	4603      	mov	r3, r0
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	bf14      	ite	ne
 800bbaa:	2301      	movne	r3, #1
 800bbac:	2300      	moveq	r3, #0
 800bbae:	b2db      	uxtb	r3, r3
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d001      	beq.n	800bbb8 <_Z16USART1_UART_Initv+0x50>
	{
		ErrorHandler();
 800bbb4:	f000 f806 	bl	800bbc4 <_Z12ErrorHandlerv>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800bbb8:	bf00      	nop
 800bbba:	bd80      	pop	{r7, pc}
 800bbbc:	2000020c 	.word	0x2000020c
 800bbc0:	40011000 	.word	0x40011000

0800bbc4 <_Z12ErrorHandlerv>:
void ErrorHandler(void)
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800bbc8:	b672      	cpsid	i
}
 800bbca:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800bbcc:	bf00      	nop
 800bbce:	e7fd      	b.n	800bbcc <_Z12ErrorHandlerv+0x8>

0800bbd0 <_Z12SerialPrintfPcz>:
	{
	}
	/* USER CODE END Error_Handler_Debug */
}
void SerialPrintf(char * formato, ...)
{
 800bbd0:	b40f      	push	{r0, r1, r2, r3}
 800bbd2:	b580      	push	{r7, lr}
 800bbd4:	b0be      	sub	sp, #248	@ 0xf8
 800bbd6:	af00      	add	r7, sp, #0

    char *p;
    char buffer[100];

    char formatoFlotante[20];
    int posisionFormato=0;
 800bbd8:	2300      	movs	r3, #0
 800bbda:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    char tmp[100];
    int postmp=0;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    int posbuffer = 0;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    va_list pa;
    int encontrado=0;
 800bbea:	2300      	movs	r3, #0
 800bbec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    //float a;
    va_start(pa, formato);
 800bbf0:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800bbf4:	607b      	str	r3, [r7, #4]
    for (p = formato; *p; p++)
 800bbf6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800bbfa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bbfe:	e143      	b.n	800be88 <_Z12SerialPrintfPcz+0x2b8>
    {

      if (*p != '%')
 800bc00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc04:	781b      	ldrb	r3, [r3, #0]
 800bc06:	2b25      	cmp	r3, #37	@ 0x25
 800bc08:	d00f      	beq.n	800bc2a <_Z12SerialPrintfPcz+0x5a>
      {
        buffer[posbuffer] = *p;
 800bc0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc0e:	7819      	ldrb	r1, [r3, #0]
 800bc10:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 800bc14:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800bc18:	4413      	add	r3, r2
 800bc1a:	460a      	mov	r2, r1
 800bc1c:	701a      	strb	r2, [r3, #0]
        posbuffer++;
 800bc1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800bc22:	3301      	adds	r3, #1
 800bc24:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
        continue;
 800bc28:	e129      	b.n	800be7e <_Z12SerialPrintfPcz+0x2ae>
      }
      encontrado=0;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      switch (*++p)
 800bc30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc34:	3301      	adds	r3, #1
 800bc36:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bc3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc3e:	781b      	ldrb	r3, [r3, #0]
 800bc40:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc42:	f000 80a3 	beq.w	800bd8c <_Z12SerialPrintfPcz+0x1bc>
 800bc46:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc48:	f2c0 80e2 	blt.w	800be10 <_Z12SerialPrintfPcz+0x240>
 800bc4c:	2b78      	cmp	r3, #120	@ 0x78
 800bc4e:	f300 80df 	bgt.w	800be10 <_Z12SerialPrintfPcz+0x240>
 800bc52:	2b63      	cmp	r3, #99	@ 0x63
 800bc54:	f2c0 80dc 	blt.w	800be10 <_Z12SerialPrintfPcz+0x240>
 800bc58:	3b63      	subs	r3, #99	@ 0x63
 800bc5a:	2b15      	cmp	r3, #21
 800bc5c:	f200 80d8 	bhi.w	800be10 <_Z12SerialPrintfPcz+0x240>
 800bc60:	a201      	add	r2, pc, #4	@ (adr r2, 800bc68 <_Z12SerialPrintfPcz+0x98>)
 800bc62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc66:	bf00      	nop
 800bc68:	0800bd31 	.word	0x0800bd31
 800bc6c:	0800bcc1 	.word	0x0800bcc1
 800bc70:	0800be11 	.word	0x0800be11
 800bc74:	0800bd4d 	.word	0x0800bd4d
 800bc78:	0800be11 	.word	0x0800be11
 800bc7c:	0800be11 	.word	0x0800be11
 800bc80:	0800bcdd 	.word	0x0800bcdd
 800bc84:	0800be11 	.word	0x0800be11
 800bc88:	0800be11 	.word	0x0800be11
 800bc8c:	0800be11 	.word	0x0800be11
 800bc90:	0800be11 	.word	0x0800be11
 800bc94:	0800be11 	.word	0x0800be11
 800bc98:	0800be11 	.word	0x0800be11
 800bc9c:	0800bd15 	.word	0x0800bd15
 800bca0:	0800be11 	.word	0x0800be11
 800bca4:	0800be11 	.word	0x0800be11
 800bca8:	0800bd71 	.word	0x0800bd71
 800bcac:	0800be11 	.word	0x0800be11
 800bcb0:	0800be11 	.word	0x0800be11
 800bcb4:	0800be11 	.word	0x0800be11
 800bcb8:	0800be11 	.word	0x0800be11
 800bcbc:	0800bcf9 	.word	0x0800bcf9
      {
        case 'd':
          sprintf(tmp, "%d", va_arg(pa, int));
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	1d1a      	adds	r2, r3, #4
 800bcc4:	607a      	str	r2, [r7, #4]
 800bcc6:	681a      	ldr	r2, [r3, #0]
 800bcc8:	f107 0308 	add.w	r3, r7, #8
 800bccc:	497b      	ldr	r1, [pc, #492]	@ (800bebc <_Z12SerialPrintfPcz+0x2ec>)
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f006 f9a0 	bl	8012014 <siprintf>
          encontrado=1;
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 800bcda:	e0a9      	b.n	800be30 <_Z12SerialPrintfPcz+0x260>
        case 'i':
          sprintf(tmp, "%i", va_arg(pa, int));
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	1d1a      	adds	r2, r3, #4
 800bce0:	607a      	str	r2, [r7, #4]
 800bce2:	681a      	ldr	r2, [r3, #0]
 800bce4:	f107 0308 	add.w	r3, r7, #8
 800bce8:	4975      	ldr	r1, [pc, #468]	@ (800bec0 <_Z12SerialPrintfPcz+0x2f0>)
 800bcea:	4618      	mov	r0, r3
 800bcec:	f006 f992 	bl	8012014 <siprintf>
          encontrado=1;
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 800bcf6:	e09b      	b.n	800be30 <_Z12SerialPrintfPcz+0x260>
        case 'x':
          sprintf(tmp, "%x", va_arg(pa, int));
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	1d1a      	adds	r2, r3, #4
 800bcfc:	607a      	str	r2, [r7, #4]
 800bcfe:	681a      	ldr	r2, [r3, #0]
 800bd00:	f107 0308 	add.w	r3, r7, #8
 800bd04:	496f      	ldr	r1, [pc, #444]	@ (800bec4 <_Z12SerialPrintfPcz+0x2f4>)
 800bd06:	4618      	mov	r0, r3
 800bd08:	f006 f984 	bl	8012014 <siprintf>
          encontrado=1;
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 800bd12:	e08d      	b.n	800be30 <_Z12SerialPrintfPcz+0x260>
        case 'p':
          sprintf(tmp, "%p", va_arg(pa, void*));
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	1d1a      	adds	r2, r3, #4
 800bd18:	607a      	str	r2, [r7, #4]
 800bd1a:	681a      	ldr	r2, [r3, #0]
 800bd1c:	f107 0308 	add.w	r3, r7, #8
 800bd20:	4969      	ldr	r1, [pc, #420]	@ (800bec8 <_Z12SerialPrintfPcz+0x2f8>)
 800bd22:	4618      	mov	r0, r3
 800bd24:	f006 f976 	bl	8012014 <siprintf>
          encontrado=1;
 800bd28:	2301      	movs	r3, #1
 800bd2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 800bd2e:	e07f      	b.n	800be30 <_Z12SerialPrintfPcz+0x260>
        case 'c':
          sprintf(tmp, "%c", va_arg(pa, int));
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	1d1a      	adds	r2, r3, #4
 800bd34:	607a      	str	r2, [r7, #4]
 800bd36:	681a      	ldr	r2, [r3, #0]
 800bd38:	f107 0308 	add.w	r3, r7, #8
 800bd3c:	4963      	ldr	r1, [pc, #396]	@ (800becc <_Z12SerialPrintfPcz+0x2fc>)
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f006 f968 	bl	8012014 <siprintf>
          encontrado=1;
 800bd44:	2301      	movs	r3, #1
 800bd46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 800bd4a:	e071      	b.n	800be30 <_Z12SerialPrintfPcz+0x260>
        case 'f':
          sprintf(tmp, "%f", va_arg(pa, double));
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	3307      	adds	r3, #7
 800bd50:	f023 0307 	bic.w	r3, r3, #7
 800bd54:	f103 0208 	add.w	r2, r3, #8
 800bd58:	607a      	str	r2, [r7, #4]
 800bd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd5e:	f107 0008 	add.w	r0, r7, #8
 800bd62:	495b      	ldr	r1, [pc, #364]	@ (800bed0 <_Z12SerialPrintfPcz+0x300>)
 800bd64:	f006 f956 	bl	8012014 <siprintf>
          encontrado=1;
 800bd68:	2301      	movs	r3, #1
 800bd6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 800bd6e:	e05f      	b.n	800be30 <_Z12SerialPrintfPcz+0x260>
        case 's':
          sprintf(tmp, "%s", va_arg(pa, char *));
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	1d1a      	adds	r2, r3, #4
 800bd74:	607a      	str	r2, [r7, #4]
 800bd76:	681a      	ldr	r2, [r3, #0]
 800bd78:	f107 0308 	add.w	r3, r7, #8
 800bd7c:	4955      	ldr	r1, [pc, #340]	@ (800bed4 <_Z12SerialPrintfPcz+0x304>)
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f006 f948 	bl	8012014 <siprintf>
          encontrado=1;
 800bd84:	2301      	movs	r3, #1
 800bd86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 800bd8a:	e051      	b.n	800be30 <_Z12SerialPrintfPcz+0x260>
        case '.':
        	//asume que es flotante con decimales definidos
        	formatoFlotante[0]='%';
 800bd8c:	2325      	movs	r3, #37	@ 0x25
 800bd8e:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
        	posisionFormato=1;
 800bd92:	2301      	movs	r3, #1
 800bd94:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
        	while(*p!='f')
 800bd98:	e013      	b.n	800bdc2 <_Z12SerialPrintfPcz+0x1f2>
        	{
        		formatoFlotante[posisionFormato]=*p;
 800bd9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd9e:	7819      	ldrb	r1, [r3, #0]
 800bda0:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800bda4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800bda8:	4413      	add	r3, r2
 800bdaa:	460a      	mov	r2, r1
 800bdac:	701a      	strb	r2, [r3, #0]
        		p++;
 800bdae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
        		posisionFormato++;
 800bdb8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
        	while(*p!='f')
 800bdc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bdc6:	781b      	ldrb	r3, [r3, #0]
 800bdc8:	2b66      	cmp	r3, #102	@ 0x66
 800bdca:	d1e6      	bne.n	800bd9a <_Z12SerialPrintfPcz+0x1ca>
        	}
        	formatoFlotante[posisionFormato]='f';
 800bdcc:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800bdd0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800bdd4:	4413      	add	r3, r2
 800bdd6:	2266      	movs	r2, #102	@ 0x66
 800bdd8:	701a      	strb	r2, [r3, #0]
        	formatoFlotante[posisionFormato+1]='\0';
 800bdda:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800bdde:	3301      	adds	r3, #1
 800bde0:	33f8      	adds	r3, #248	@ 0xf8
 800bde2:	443b      	add	r3, r7
 800bde4:	2200      	movs	r2, #0
 800bde6:	f803 2c8c 	strb.w	r2, [r3, #-140]
            sprintf(tmp, formatoFlotante, va_arg(pa, double));
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	3307      	adds	r3, #7
 800bdee:	f023 0307 	bic.w	r3, r3, #7
 800bdf2:	f103 0208 	add.w	r2, r3, #8
 800bdf6:	607a      	str	r2, [r7, #4]
 800bdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdfc:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 800be00:	f107 0008 	add.w	r0, r7, #8
 800be04:	f006 f906 	bl	8012014 <siprintf>
            encontrado=1;
 800be08:	2301      	movs	r3, #1
 800be0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
            break;
 800be0e:	e00f      	b.n	800be30 <_Z12SerialPrintfPcz+0x260>
        default:
          buffer[posbuffer] = *p;
 800be10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800be14:	7819      	ldrb	r1, [r3, #0]
 800be16:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 800be1a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800be1e:	4413      	add	r3, r2
 800be20:	460a      	mov	r2, r1
 800be22:	701a      	strb	r2, [r3, #0]
          posbuffer++;
 800be24:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800be28:	3301      	adds	r3, #1
 800be2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
          break;
 800be2e:	bf00      	nop
      }
      if(encontrado==1)
 800be30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be34:	2b01      	cmp	r3, #1
 800be36:	d122      	bne.n	800be7e <_Z12SerialPrintfPcz+0x2ae>
      {
          postmp=0;
 800be38:	2300      	movs	r3, #0
 800be3a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
          while(tmp[postmp]!='\0')
 800be3e:	e016      	b.n	800be6e <_Z12SerialPrintfPcz+0x29e>
          {
          buffer[posbuffer] = tmp[postmp];
 800be40:	f107 0208 	add.w	r2, r7, #8
 800be44:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800be48:	4413      	add	r3, r2
 800be4a:	7819      	ldrb	r1, [r3, #0]
 800be4c:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 800be50:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800be54:	4413      	add	r3, r2
 800be56:	460a      	mov	r2, r1
 800be58:	701a      	strb	r2, [r3, #0]
          posbuffer++;
 800be5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800be5e:	3301      	adds	r3, #1
 800be60:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
          postmp++;
 800be64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800be68:	3301      	adds	r3, #1
 800be6a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
          while(tmp[postmp]!='\0')
 800be6e:	f107 0208 	add.w	r2, r7, #8
 800be72:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800be76:	4413      	add	r3, r2
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d1e0      	bne.n	800be40 <_Z12SerialPrintfPcz+0x270>
    for (p = formato; *p; p++)
 800be7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800be82:	3301      	adds	r3, #1
 800be84:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800be88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	f47f aeb6 	bne.w	800bc00 <_Z12SerialPrintfPcz+0x30>
          }
      }
    }
    va_end(pa);
    buffer[posbuffer] = '\0';
 800be94:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 800be98:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800be9c:	4413      	add	r3, r2
 800be9e:	2200      	movs	r2, #0
 800bea0:	701a      	strb	r2, [r3, #0]
    uartx_write_text(buffer);
 800bea2:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800bea6:	4618      	mov	r0, r3
 800bea8:	f7ff fe48 	bl	800bb3c <_Z16uartx_write_textPc>
}
 800beac:	bf00      	nop
 800beae:	37f8      	adds	r7, #248	@ 0xf8
 800beb0:	46bd      	mov	sp, r7
 800beb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800beb6:	b004      	add	sp, #16
 800beb8:	4770      	bx	lr
 800beba:	bf00      	nop
 800bebc:	080145b8 	.word	0x080145b8
 800bec0:	080145bc 	.word	0x080145bc
 800bec4:	080145c0 	.word	0x080145c0
 800bec8:	080145c4 	.word	0x080145c4
 800becc:	080145c8 	.word	0x080145c8
 800bed0:	080145cc 	.word	0x080145cc
 800bed4:	080145d0 	.word	0x080145d0

0800bed8 <_ZN6CTimerC1Ev>:
#define INC_TIMER_HPP_

#include "main.h"
#include <stdio.h>
#include<stdbool.h>
class CTimer
 800bed8:	b480      	push	{r7}
 800beda:	b083      	sub	sp, #12
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2201      	movs	r2, #1
 800bee4:	64da      	str	r2, [r3, #76]	@ 0x4c
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	4618      	mov	r0, r3
 800beea:	370c      	adds	r7, #12
 800beec:	46bd      	mov	sp, r7
 800beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef2:	4770      	bx	lr

0800bef4 <_Z16IncializaSistemav>:
CManejadorPantallas ManejadorPantallas;
CManejadorControles *ManejadorControles;
CEprom Eprom;
CControladorRampas ControladorRampas;
void IncializaSistema()
{
 800bef4:	b590      	push	{r4, r7, lr}
 800bef6:	b095      	sub	sp, #84	@ 0x54
 800bef8:	af00      	add	r7, sp, #0
	USART1_UART_Init();
 800befa:	f7ff fe35 	bl	800bb68 <_Z16USART1_UART_Initv>
	CTimer timer;
 800befe:	463b      	mov	r3, r7
 800bf00:	4618      	mov	r0, r3
 800bf02:	f7ff ffe9 	bl	800bed8 <_ZN6CTimerC1Ev>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800bf06:	2200      	movs	r2, #0
 800bf08:	2100      	movs	r1, #0
 800bf0a:	2028      	movs	r0, #40	@ 0x28
 800bf0c:	f001 fd95 	bl	800da3a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800bf10:	2028      	movs	r0, #40	@ 0x28
 800bf12:	f001 fdae 	bl	800da72 <HAL_NVIC_EnableIRQ>

	estacion = new CestacionBaku601();
 800bf16:	20f8      	movs	r0, #248	@ 0xf8
 800bf18:	f005 fa80 	bl	801141c <_Znwj>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	461c      	mov	r4, r3
 800bf20:	4620      	mov	r0, r4
 800bf22:	f7f6 f96b 	bl	80021fc <_ZN16CestacionBaku601C1Ev>
 800bf26:	4b0f      	ldr	r3, [pc, #60]	@ (800bf64 <_Z16IncializaSistemav+0x70>)
 800bf28:	601c      	str	r4, [r3, #0]
	ManejadorControles=new CManejadorControles();
 800bf2a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800bf2e:	f005 fa75 	bl	801141c <_Znwj>
 800bf32:	4603      	mov	r3, r0
 800bf34:	461c      	mov	r4, r3
 800bf36:	4620      	mov	r0, r4
 800bf38:	f7fd fdfe 	bl	8009b38 <_ZN19CManejadorControlesC1Ev>
 800bf3c:	4b0a      	ldr	r3, [pc, #40]	@ (800bf68 <_Z16IncializaSistemav+0x74>)
 800bf3e:	601c      	str	r4, [r3, #0]
	ILI9341_Init(); //initial driver setup to drive ili9341
 800bf40:	f7fd fa5a 	bl	80093f8 <_Z12ILI9341_Initv>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 800bf44:	2003      	movs	r0, #3
 800bf46:	f7fd f9f9 	bl	800933c <_Z20ILI9341_Set_Rotationh>
	ILI9341_Fill_Screen(BLACK);
 800bf4a:	2000      	movs	r0, #0
 800bf4c:	f7fd fbfc 	bl	8009748 <_Z19ILI9341_Fill_Screent>
	//nicio eltimer
	timer.Init(TIM3, 1,  TIM3_IRQn);
 800bf50:	4638      	mov	r0, r7
 800bf52:	231d      	movs	r3, #29
 800bf54:	2201      	movs	r2, #1
 800bf56:	4905      	ldr	r1, [pc, #20]	@ (800bf6c <_Z16IncializaSistemav+0x78>)
 800bf58:	f7ff fd58 	bl	800ba0c <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type>

}
 800bf5c:	bf00      	nop
 800bf5e:	3754      	adds	r7, #84	@ 0x54
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd90      	pop	{r4, r7, pc}
 800bf64:	20000254 	.word	0x20000254
 800bf68:	20000314 	.word	0x20000314
 800bf6c:	40000400 	.word	0x40000400

0800bf70 <_Z14EjecutaSistemav>:

void EjecutaSistema()
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b082      	sub	sp, #8
 800bf74:	af00      	add	r7, sp, #0
	int n=0;
 800bf76:	2300      	movs	r3, #0
 800bf78:	607b      	str	r3, [r7, #4]
	ManejadorPantallas.SetEstacion(estacion);
 800bf7a:	4b19      	ldr	r3, [pc, #100]	@ (800bfe0 <_Z14EjecutaSistemav+0x70>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	4619      	mov	r1, r3
 800bf80:	4818      	ldr	r0, [pc, #96]	@ (800bfe4 <_Z14EjecutaSistemav+0x74>)
 800bf82:	f7f7 feb7 	bl	8003cf4 <_ZN19CManejadorPantallas11SetEstacionEP13CEstacionBase>
	ManejadorPantallas.SetManejadorControles(ManejadorControles);
 800bf86:	4b18      	ldr	r3, [pc, #96]	@ (800bfe8 <_Z14EjecutaSistemav+0x78>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	4619      	mov	r1, r3
 800bf8c:	4815      	ldr	r0, [pc, #84]	@ (800bfe4 <_Z14EjecutaSistemav+0x74>)
 800bf8e:	f7f7 ff86 	bl	8003e9e <_ZN19CManejadorPantallas21SetManejadorControlesEP19CManejadorControles>
	if(ControladorRampas.MemoriaInicialidada()==false)
 800bf92:	4816      	ldr	r0, [pc, #88]	@ (800bfec <_Z14EjecutaSistemav+0x7c>)
 800bf94:	f7fe fe6c 	bl	800ac70 <_ZN18CControladorRampas19MemoriaInicialidadaEv>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	bf0c      	ite	eq
 800bf9e:	2301      	moveq	r3, #1
 800bfa0:	2300      	movne	r3, #0
 800bfa2:	b2db      	uxtb	r3, r3
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d003      	beq.n	800bfb0 <_Z14EjecutaSistemav+0x40>
		ManejadorPantallas.MuestraPantallaInicializaMemoria();
 800bfa8:	480e      	ldr	r0, [pc, #56]	@ (800bfe4 <_Z14EjecutaSistemav+0x74>)
 800bfaa:	f7f8 f810 	bl	8003fce <_ZN19CManejadorPantallas32MuestraPantallaInicializaMemoriaEv>
 800bfae:	e002      	b.n	800bfb6 <_Z14EjecutaSistemav+0x46>
	else
		ManejadorPantallas.MuestraPantallaManual();
 800bfb0:	480c      	ldr	r0, [pc, #48]	@ (800bfe4 <_Z14EjecutaSistemav+0x74>)
 800bfb2:	f7f7 fead 	bl	8003d10 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
	while (true)
	{
		n++;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	3301      	adds	r3, #1
 800bfba:	607b      	str	r3, [r7, #4]
		estacion->Procesa();
 800bfbc:	4b08      	ldr	r3, [pc, #32]	@ (800bfe0 <_Z14EjecutaSistemav+0x70>)
 800bfbe:	681a      	ldr	r2, [r3, #0]
 800bfc0:	4b07      	ldr	r3, [pc, #28]	@ (800bfe0 <_Z14EjecutaSistemav+0x70>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	3330      	adds	r3, #48	@ 0x30
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	4610      	mov	r0, r2
 800bfcc:	4798      	blx	r3
		ManejadorPantallas.RefrescaPantalla();
 800bfce:	4805      	ldr	r0, [pc, #20]	@ (800bfe4 <_Z14EjecutaSistemav+0x74>)
 800bfd0:	f7f7 fef2 	bl	8003db8 <_ZN19CManejadorPantallas16RefrescaPantallaEv>
		HAL_Delay(1);
 800bfd4:	2001      	movs	r0, #1
 800bfd6:	f001 f8fd 	bl	800d1d4 <HAL_Delay>
		n++;
 800bfda:	bf00      	nop
 800bfdc:	e7eb      	b.n	800bfb6 <_Z14EjecutaSistemav+0x46>
 800bfde:	bf00      	nop
 800bfe0:	20000254 	.word	0x20000254
 800bfe4:	20000258 	.word	0x20000258
 800bfe8:	20000314 	.word	0x20000314
 800bfec:	20000360 	.word	0x20000360

0800bff0 <HAL_GPIO_EXTI_Callback>:
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b082      	sub	sp, #8
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	4603      	mov	r3, r0
 800bff8:	80fb      	strh	r3, [r7, #6]
	if(estacion!=NULL)
 800bffa:	4b10      	ldr	r3, [pc, #64]	@ (800c03c <HAL_GPIO_EXTI_Callback+0x4c>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d009      	beq.n	800c016 <HAL_GPIO_EXTI_Callback+0x26>
	{
		estacion->GPIO_INTERRUPCION(GPIO_Pin);
 800c002:	4b0e      	ldr	r3, [pc, #56]	@ (800c03c <HAL_GPIO_EXTI_Callback+0x4c>)
 800c004:	681a      	ldr	r2, [r3, #0]
 800c006:	4b0d      	ldr	r3, [pc, #52]	@ (800c03c <HAL_GPIO_EXTI_Callback+0x4c>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	3354      	adds	r3, #84	@ 0x54
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	88f9      	ldrh	r1, [r7, #6]
 800c012:	4610      	mov	r0, r2
 800c014:	4798      	blx	r3
	}
	if(ManejadorControles!=NULL)
 800c016:	4b0a      	ldr	r3, [pc, #40]	@ (800c040 <HAL_GPIO_EXTI_Callback+0x50>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d009      	beq.n	800c032 <HAL_GPIO_EXTI_Callback+0x42>
	{
		ManejadorControles->GPIO_INTERRUPCION(GPIO_Pin);
 800c01e:	4b08      	ldr	r3, [pc, #32]	@ (800c040 <HAL_GPIO_EXTI_Callback+0x50>)
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	4b07      	ldr	r3, [pc, #28]	@ (800c040 <HAL_GPIO_EXTI_Callback+0x50>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	3334      	adds	r3, #52	@ 0x34
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	88f9      	ldrh	r1, [r7, #6]
 800c02e:	4610      	mov	r0, r2
 800c030:	4798      	blx	r3
	}
}
 800c032:	bf00      	nop
 800c034:	3708      	adds	r7, #8
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}
 800c03a:	bf00      	nop
 800c03c:	20000254 	.word	0x20000254
 800c040:	20000314 	.word	0x20000314

0800c044 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b082      	sub	sp, #8
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM3)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	4a0a      	ldr	r2, [pc, #40]	@ (800c07c <HAL_TIM_PeriodElapsedCallback+0x38>)
 800c052:	4293      	cmp	r3, r2
 800c054:	d10e      	bne.n	800c074 <HAL_TIM_PeriodElapsedCallback+0x30>
	{
		if(estacion==NULL)
 800c056:	4b0a      	ldr	r3, [pc, #40]	@ (800c080 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d009      	beq.n	800c072 <HAL_TIM_PeriodElapsedCallback+0x2e>
			return;
		estacion->TimerTick();
 800c05e:	4b08      	ldr	r3, [pc, #32]	@ (800c080 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800c060:	681a      	ldr	r2, [r3, #0]
 800c062:	4b07      	ldr	r3, [pc, #28]	@ (800c080 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	3340      	adds	r3, #64	@ 0x40
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	4610      	mov	r0, r2
 800c06e:	4798      	blx	r3
 800c070:	e000      	b.n	800c074 <HAL_TIM_PeriodElapsedCallback+0x30>
			return;
 800c072:	bf00      	nop
	}
}
 800c074:	3708      	adds	r7, #8
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}
 800c07a:	bf00      	nop
 800c07c:	40000400 	.word	0x40000400
 800c080:	20000254 	.word	0x20000254

0800c084 <_Z41__static_initialization_and_destruction_0ii>:
 800c084:	b580      	push	{r7, lr}
 800c086:	b082      	sub	sp, #8
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2b01      	cmp	r3, #1
 800c092:	d10d      	bne.n	800c0b0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d108      	bne.n	800c0b0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
CManejadorPantallas ManejadorPantallas;
 800c09e:	480f      	ldr	r0, [pc, #60]	@ (800c0dc <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800c0a0:	f7f7 fdde 	bl	8003c60 <_ZN19CManejadorPantallasC1Ev>
CEprom Eprom;
 800c0a4:	480e      	ldr	r0, [pc, #56]	@ (800c0e0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800c0a6:	f7f5 f97f 	bl	80013a8 <_ZN6CEpromC1Ev>
CControladorRampas ControladorRampas;
 800c0aa:	480e      	ldr	r0, [pc, #56]	@ (800c0e4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800c0ac:	f7fe fd54 	bl	800ab58 <_ZN18CControladorRampasC1Ev>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d10d      	bne.n	800c0d2 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	d108      	bne.n	800c0d2 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 800c0c0:	4808      	ldr	r0, [pc, #32]	@ (800c0e4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800c0c2:	f7fe fdb5 	bl	800ac30 <_ZN18CControladorRampasD1Ev>
CEprom Eprom;
 800c0c6:	4806      	ldr	r0, [pc, #24]	@ (800c0e0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800c0c8:	f7f5 f9bc 	bl	8001444 <_ZN6CEpromD1Ev>
CManejadorPantallas ManejadorPantallas;
 800c0cc:	4803      	ldr	r0, [pc, #12]	@ (800c0dc <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800c0ce:	f7f7 fdf1 	bl	8003cb4 <_ZN19CManejadorPantallasD1Ev>
}
 800c0d2:	bf00      	nop
 800c0d4:	3708      	adds	r7, #8
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	bf00      	nop
 800c0dc:	20000258 	.word	0x20000258
 800c0e0:	20000318 	.word	0x20000318
 800c0e4:	20000360 	.word	0x20000360

0800c0e8 <_GLOBAL__sub_I_estacion>:
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800c0f0:	2001      	movs	r0, #1
 800c0f2:	f7ff ffc7 	bl	800c084 <_Z41__static_initialization_and_destruction_0ii>
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <_GLOBAL__sub_D_estacion>:
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800c100:	2000      	movs	r0, #0
 800c102:	f7ff ffbf 	bl	800c084 <_Z41__static_initialization_and_destruction_0ii>
 800c106:	bd80      	pop	{r7, pc}

0800c108 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b08a      	sub	sp, #40	@ 0x28
 800c10c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800c10e:	2300      	movs	r3, #0
 800c110:	613b      	str	r3, [r7, #16]
 800c112:	4b6e      	ldr	r3, [pc, #440]	@ (800c2cc <MX_GPIO_Init+0x1c4>)
 800c114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c116:	4a6d      	ldr	r2, [pc, #436]	@ (800c2cc <MX_GPIO_Init+0x1c4>)
 800c118:	f043 0310 	orr.w	r3, r3, #16
 800c11c:	6313      	str	r3, [r2, #48]	@ 0x30
 800c11e:	4b6b      	ldr	r3, [pc, #428]	@ (800c2cc <MX_GPIO_Init+0x1c4>)
 800c120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c122:	f003 0310 	and.w	r3, r3, #16
 800c126:	613b      	str	r3, [r7, #16]
 800c128:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c12a:	2300      	movs	r3, #0
 800c12c:	60fb      	str	r3, [r7, #12]
 800c12e:	4b67      	ldr	r3, [pc, #412]	@ (800c2cc <MX_GPIO_Init+0x1c4>)
 800c130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c132:	4a66      	ldr	r2, [pc, #408]	@ (800c2cc <MX_GPIO_Init+0x1c4>)
 800c134:	f043 0304 	orr.w	r3, r3, #4
 800c138:	6313      	str	r3, [r2, #48]	@ 0x30
 800c13a:	4b64      	ldr	r3, [pc, #400]	@ (800c2cc <MX_GPIO_Init+0x1c4>)
 800c13c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c13e:	f003 0304 	and.w	r3, r3, #4
 800c142:	60fb      	str	r3, [r7, #12]
 800c144:	68fb      	ldr	r3, [r7, #12]
//  __HAL_RCC_GPIOF_CLK_ENABLE();
//  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c146:	2300      	movs	r3, #0
 800c148:	60bb      	str	r3, [r7, #8]
 800c14a:	4b60      	ldr	r3, [pc, #384]	@ (800c2cc <MX_GPIO_Init+0x1c4>)
 800c14c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c14e:	4a5f      	ldr	r2, [pc, #380]	@ (800c2cc <MX_GPIO_Init+0x1c4>)
 800c150:	f043 0301 	orr.w	r3, r3, #1
 800c154:	6313      	str	r3, [r2, #48]	@ 0x30
 800c156:	4b5d      	ldr	r3, [pc, #372]	@ (800c2cc <MX_GPIO_Init+0x1c4>)
 800c158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c15a:	f003 0301 	and.w	r3, r3, #1
 800c15e:	60bb      	str	r3, [r7, #8]
 800c160:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c162:	2300      	movs	r3, #0
 800c164:	607b      	str	r3, [r7, #4]
 800c166:	4b59      	ldr	r3, [pc, #356]	@ (800c2cc <MX_GPIO_Init+0x1c4>)
 800c168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c16a:	4a58      	ldr	r2, [pc, #352]	@ (800c2cc <MX_GPIO_Init+0x1c4>)
 800c16c:	f043 0302 	orr.w	r3, r3, #2
 800c170:	6313      	str	r3, [r2, #48]	@ 0x30
 800c172:	4b56      	ldr	r3, [pc, #344]	@ (800c2cc <MX_GPIO_Init+0x1c4>)
 800c174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c176:	f003 0302 	and.w	r3, r3, #2
 800c17a:	607b      	str	r3, [r7, #4]
 800c17c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c17e:	2300      	movs	r3, #0
 800c180:	603b      	str	r3, [r7, #0]
 800c182:	4b52      	ldr	r3, [pc, #328]	@ (800c2cc <MX_GPIO_Init+0x1c4>)
 800c184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c186:	4a51      	ldr	r2, [pc, #324]	@ (800c2cc <MX_GPIO_Init+0x1c4>)
 800c188:	f043 0308 	orr.w	r3, r3, #8
 800c18c:	6313      	str	r3, [r2, #48]	@ 0x30
 800c18e:	4b4f      	ldr	r3, [pc, #316]	@ (800c2cc <MX_GPIO_Init+0x1c4>)
 800c190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c192:	f003 0308 	and.w	r3, r3, #8
 800c196:	603b      	str	r3, [r7, #0]
 800c198:	683b      	ldr	r3, [r7, #0]
//  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 800c19a:	2304      	movs	r3, #4
 800c19c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 800c1a6:	f107 0314 	add.w	r3, r7, #20
 800c1aa:	4619      	mov	r1, r3
 800c1ac:	4848      	ldr	r0, [pc, #288]	@ (800c2d0 <MX_GPIO_Init+0x1c8>)
 800c1ae:	f001 fc7b 	bl	800daa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 800c1b2:	2368      	movs	r3, #104	@ 0x68
 800c1b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c1b6:	2301      	movs	r3, #1
 800c1b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c1be:	2303      	movs	r3, #3
 800c1c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800c1c2:	f107 0314 	add.w	r3, r7, #20
 800c1c6:	4619      	mov	r1, r3
 800c1c8:	4841      	ldr	r0, [pc, #260]	@ (800c2d0 <MX_GPIO_Init+0x1c8>)
 800c1ca:	f001 fc6d 	bl	800daa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 800c1ce:	2310      	movs	r3, #16
 800c1d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 800c1da:	f107 0314 	add.w	r3, r7, #20
 800c1de:	4619      	mov	r1, r3
 800c1e0:	483b      	ldr	r0, [pc, #236]	@ (800c2d0 <MX_GPIO_Init+0x1c8>)
 800c1e2:	f001 fc61 	bl	800daa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 800c1e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c1ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 800c1f4:	f107 0314 	add.w	r3, r7, #20
 800c1f8:	4619      	mov	r1, r3
 800c1fa:	4836      	ldr	r0, [pc, #216]	@ (800c2d4 <MX_GPIO_Init+0x1cc>)
 800c1fc:	f001 fc54 	bl	800daa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800c200:	2332      	movs	r3, #50	@ 0x32
 800c202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c204:	2302      	movs	r3, #2
 800c206:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c208:	2300      	movs	r3, #0
 800c20a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c20c:	2303      	movs	r3, #3
 800c20e:	623b      	str	r3, [r7, #32]
  //GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c210:	f107 0314 	add.w	r3, r7, #20
 800c214:	4619      	mov	r1, r3
 800c216:	482f      	ldr	r0, [pc, #188]	@ (800c2d4 <MX_GPIO_Init+0x1cc>)
 800c218:	f001 fc46 	bl	800daa8 <HAL_GPIO_Init>
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
////  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
//  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800c21c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c222:	2302      	movs	r3, #2
 800c224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c226:	2300      	movs	r3, #0
 800c228:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c22a:	2303      	movs	r3, #3
 800c22c:	623b      	str	r3, [r7, #32]
  //GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800c22e:	f107 0314 	add.w	r3, r7, #20
 800c232:	4619      	mov	r1, r3
 800c234:	4828      	ldr	r0, [pc, #160]	@ (800c2d8 <MX_GPIO_Init+0x1d0>)
 800c236:	f001 fc37 	bl	800daa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800c23a:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 800c23e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c240:	2301      	movs	r3, #1
 800c242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c244:	2300      	movs	r3, #0
 800c246:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c248:	2300      	movs	r3, #0
 800c24a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c24c:	f107 0314 	add.w	r3, r7, #20
 800c250:	4619      	mov	r1, r3
 800c252:	4821      	ldr	r0, [pc, #132]	@ (800c2d8 <MX_GPIO_Init+0x1d0>)
 800c254:	f001 fc28 	bl	800daa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800c258:	2340      	movs	r3, #64	@ 0x40
 800c25a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c25c:	2301      	movs	r3, #1
 800c25e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c260:	2300      	movs	r3, #0
 800c262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c264:	2300      	movs	r3, #0
 800c266:	623b      	str	r3, [r7, #32]
  //HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800c268:	2380      	movs	r3, #128	@ 0x80
 800c26a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c26c:	2300      	movs	r3, #0
 800c26e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c270:	2300      	movs	r3, #0
 800c272:	61fb      	str	r3, [r7, #28]
  //HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 800c274:	2323      	movs	r3, #35	@ 0x23
 800c276:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c278:	2301      	movs	r3, #1
 800c27a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c27c:	2300      	movs	r3, #0
 800c27e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c280:	2303      	movs	r3, #3
 800c282:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c284:	f107 0314 	add.w	r3, r7, #20
 800c288:	4619      	mov	r1, r3
 800c28a:	4812      	ldr	r0, [pc, #72]	@ (800c2d4 <MX_GPIO_Init+0x1cc>)
 800c28c:	f001 fc0c 	bl	800daa8 <HAL_GPIO_Init>
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  //GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
//  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800c290:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800c294:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c296:	2302      	movs	r3, #2
 800c298:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c29a:	2300      	movs	r3, #0
 800c29c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c29e:	2303      	movs	r3, #3
 800c2a0:	623b      	str	r3, [r7, #32]
//  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
//  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	2168      	movs	r1, #104	@ 0x68
 800c2a6:	480a      	ldr	r0, [pc, #40]	@ (800c2d0 <MX_GPIO_Init+0x1c8>)
 800c2a8:	f001 fd9a 	bl	800dde0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	f44f 4184 	mov.w	r1, #16896	@ 0x4200
 800c2b2:	4809      	ldr	r0, [pc, #36]	@ (800c2d8 <MX_GPIO_Init+0x1d0>)
 800c2b4:	f001 fd94 	bl	800dde0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
//  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	2123      	movs	r1, #35	@ 0x23
 800c2bc:	4805      	ldr	r0, [pc, #20]	@ (800c2d4 <MX_GPIO_Init+0x1cc>)
 800c2be:	f001 fd8f 	bl	800dde0 <HAL_GPIO_WritePin>

}
 800c2c2:	bf00      	nop
 800c2c4:	3728      	adds	r7, #40	@ 0x28
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
 800c2ca:	bf00      	nop
 800c2cc:	40023800 	.word	0x40023800
 800c2d0:	40021000 	.word	0x40021000
 800c2d4:	40020800 	.word	0x40020800
 800c2d8:	40020400 	.word	0x40020400

0800c2dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b082      	sub	sp, #8
 800c2e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800c2e2:	f000 ff05 	bl	800d0f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800c2e6:	f000 f82f 	bl	800c348 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800c2ea:	f000 fa83 	bl	800c7f4 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 800c2ee:	f000 f89d 	bl	800c42c <_ZL12MX_ADC1_Initv>
  MX_I2C1_Init();
 800c2f2:	f000 f8f7 	bl	800c4e4 <_ZL12MX_I2C1_Initv>
  MX_SPI1_Init();
 800c2f6:	f000 f929 	bl	800c54c <_ZL12MX_SPI1_Initv>
  MX_TIM2_Init();
 800c2fa:	f000 f963 	bl	800c5c4 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 800c2fe:	f000 f9ef 	bl	800c6e0 <_ZL12MX_TIM3_Initv>
  MX_USART1_UART_Init();
 800c302:	f000 fa49 	bl	800c798 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 800c306:	480d      	ldr	r0, [pc, #52]	@ (800c33c <main+0x60>)
 800c308:	f003 fd12 	bl	800fd30 <HAL_TIM_Base_Start_IT>
	IncializaSistema();
 800c30c:	f7ff fdf2 	bl	800bef4 <_Z16IncializaSistemav>
	EjecutaSistema();
 800c310:	f7ff fe2e 	bl	800bf70 <_Z14EjecutaSistemav>
  USART1_UART_Init();
 800c314:	f7ff fc28 	bl	800bb68 <_Z16USART1_UART_Initv>
	  HAL_ADC_Start(&hadc1);
 800c318:	4809      	ldr	r0, [pc, #36]	@ (800c340 <main+0x64>)
 800c31a:	f000 ffc3 	bl	800d2a4 <HAL_ADC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		int valor=HAL_ADC_GetValue(&hadc1);
 800c31e:	4808      	ldr	r0, [pc, #32]	@ (800c340 <main+0x64>)
 800c320:	f001 f874 	bl	800d40c <HAL_ADC_GetValue>
 800c324:	4603      	mov	r3, r0
 800c326:	607b      	str	r3, [r7, #4]
		SerialPrintf((char*)"\r\n analogo: %d",valor);
 800c328:	6879      	ldr	r1, [r7, #4]
 800c32a:	4806      	ldr	r0, [pc, #24]	@ (800c344 <main+0x68>)
 800c32c:	f7ff fc50 	bl	800bbd0 <_Z12SerialPrintfPcz>
		HAL_Delay(500);
 800c330:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800c334:	f000 ff4e 	bl	800d1d4 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800c338:	bf00      	nop
 800c33a:	e7f0      	b.n	800c31e <main+0x42>
 800c33c:	200004cc 	.word	0x200004cc
 800c340:	20000390 	.word	0x20000390
 800c344:	080145d4 	.word	0x080145d4

0800c348 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b094      	sub	sp, #80	@ 0x50
 800c34c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c34e:	f107 0320 	add.w	r3, r7, #32
 800c352:	2230      	movs	r2, #48	@ 0x30
 800c354:	2100      	movs	r1, #0
 800c356:	4618      	mov	r0, r3
 800c358:	f005 febf 	bl	80120da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c35c:	f107 030c 	add.w	r3, r7, #12
 800c360:	2200      	movs	r2, #0
 800c362:	601a      	str	r2, [r3, #0]
 800c364:	605a      	str	r2, [r3, #4]
 800c366:	609a      	str	r2, [r3, #8]
 800c368:	60da      	str	r2, [r3, #12]
 800c36a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800c36c:	2300      	movs	r3, #0
 800c36e:	60bb      	str	r3, [r7, #8]
 800c370:	4b2c      	ldr	r3, [pc, #176]	@ (800c424 <_Z18SystemClock_Configv+0xdc>)
 800c372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c374:	4a2b      	ldr	r2, [pc, #172]	@ (800c424 <_Z18SystemClock_Configv+0xdc>)
 800c376:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c37a:	6413      	str	r3, [r2, #64]	@ 0x40
 800c37c:	4b29      	ldr	r3, [pc, #164]	@ (800c424 <_Z18SystemClock_Configv+0xdc>)
 800c37e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c380:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c384:	60bb      	str	r3, [r7, #8]
 800c386:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c388:	2300      	movs	r3, #0
 800c38a:	607b      	str	r3, [r7, #4]
 800c38c:	4b26      	ldr	r3, [pc, #152]	@ (800c428 <_Z18SystemClock_Configv+0xe0>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	4a25      	ldr	r2, [pc, #148]	@ (800c428 <_Z18SystemClock_Configv+0xe0>)
 800c392:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c396:	6013      	str	r3, [r2, #0]
 800c398:	4b23      	ldr	r3, [pc, #140]	@ (800c428 <_Z18SystemClock_Configv+0xe0>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c3a0:	607b      	str	r3, [r7, #4]
 800c3a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800c3a4:	2302      	movs	r3, #2
 800c3a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800c3ac:	2310      	movs	r3, #16
 800c3ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c3b0:	2302      	movs	r3, #2
 800c3b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800c3b8:	2308      	movs	r3, #8
 800c3ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800c3bc:	2348      	movs	r3, #72	@ 0x48
 800c3be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c3c0:	2302      	movs	r3, #2
 800c3c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800c3c4:	2304      	movs	r3, #4
 800c3c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c3c8:	f107 0320 	add.w	r3, r7, #32
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f002 fd5d 	bl	800ee8c <HAL_RCC_OscConfig>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	bf14      	ite	ne
 800c3d8:	2301      	movne	r3, #1
 800c3da:	2300      	moveq	r3, #0
 800c3dc:	b2db      	uxtb	r3, r3
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d001      	beq.n	800c3e6 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800c3e2:	f000 fb0d 	bl	800ca00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c3e6:	230f      	movs	r3, #15
 800c3e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c3ea:	2302      	movs	r3, #2
 800c3ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800c3f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c3f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800c3fc:	f107 030c 	add.w	r3, r7, #12
 800c400:	2102      	movs	r1, #2
 800c402:	4618      	mov	r0, r3
 800c404:	f002 ffba 	bl	800f37c <HAL_RCC_ClockConfig>
 800c408:	4603      	mov	r3, r0
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	bf14      	ite	ne
 800c40e:	2301      	movne	r3, #1
 800c410:	2300      	moveq	r3, #0
 800c412:	b2db      	uxtb	r3, r3
 800c414:	2b00      	cmp	r3, #0
 800c416:	d001      	beq.n	800c41c <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 800c418:	f000 faf2 	bl	800ca00 <Error_Handler>
  }
}
 800c41c:	bf00      	nop
 800c41e:	3750      	adds	r7, #80	@ 0x50
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}
 800c424:	40023800 	.word	0x40023800
 800c428:	40007000 	.word	0x40007000

0800c42c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b084      	sub	sp, #16
 800c430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800c432:	463b      	mov	r3, r7
 800c434:	2200      	movs	r2, #0
 800c436:	601a      	str	r2, [r3, #0]
 800c438:	605a      	str	r2, [r3, #4]
 800c43a:	609a      	str	r2, [r3, #8]
 800c43c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800c43e:	4b26      	ldr	r3, [pc, #152]	@ (800c4d8 <_ZL12MX_ADC1_Initv+0xac>)
 800c440:	4a26      	ldr	r2, [pc, #152]	@ (800c4dc <_ZL12MX_ADC1_Initv+0xb0>)
 800c442:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800c444:	4b24      	ldr	r3, [pc, #144]	@ (800c4d8 <_ZL12MX_ADC1_Initv+0xac>)
 800c446:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800c44a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800c44c:	4b22      	ldr	r3, [pc, #136]	@ (800c4d8 <_ZL12MX_ADC1_Initv+0xac>)
 800c44e:	2200      	movs	r2, #0
 800c450:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800c452:	4b21      	ldr	r3, [pc, #132]	@ (800c4d8 <_ZL12MX_ADC1_Initv+0xac>)
 800c454:	2200      	movs	r2, #0
 800c456:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800c458:	4b1f      	ldr	r3, [pc, #124]	@ (800c4d8 <_ZL12MX_ADC1_Initv+0xac>)
 800c45a:	2201      	movs	r2, #1
 800c45c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800c45e:	4b1e      	ldr	r3, [pc, #120]	@ (800c4d8 <_ZL12MX_ADC1_Initv+0xac>)
 800c460:	2200      	movs	r2, #0
 800c462:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c466:	4b1c      	ldr	r3, [pc, #112]	@ (800c4d8 <_ZL12MX_ADC1_Initv+0xac>)
 800c468:	2200      	movs	r2, #0
 800c46a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c46c:	4b1a      	ldr	r3, [pc, #104]	@ (800c4d8 <_ZL12MX_ADC1_Initv+0xac>)
 800c46e:	4a1c      	ldr	r2, [pc, #112]	@ (800c4e0 <_ZL12MX_ADC1_Initv+0xb4>)
 800c470:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c472:	4b19      	ldr	r3, [pc, #100]	@ (800c4d8 <_ZL12MX_ADC1_Initv+0xac>)
 800c474:	2200      	movs	r2, #0
 800c476:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800c478:	4b17      	ldr	r3, [pc, #92]	@ (800c4d8 <_ZL12MX_ADC1_Initv+0xac>)
 800c47a:	2201      	movs	r2, #1
 800c47c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800c47e:	4b16      	ldr	r3, [pc, #88]	@ (800c4d8 <_ZL12MX_ADC1_Initv+0xac>)
 800c480:	2200      	movs	r2, #0
 800c482:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c486:	4b14      	ldr	r3, [pc, #80]	@ (800c4d8 <_ZL12MX_ADC1_Initv+0xac>)
 800c488:	2201      	movs	r2, #1
 800c48a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800c48c:	4812      	ldr	r0, [pc, #72]	@ (800c4d8 <_ZL12MX_ADC1_Initv+0xac>)
 800c48e:	f000 fec5 	bl	800d21c <HAL_ADC_Init>
 800c492:	4603      	mov	r3, r0
 800c494:	2b00      	cmp	r3, #0
 800c496:	bf14      	ite	ne
 800c498:	2301      	movne	r3, #1
 800c49a:	2300      	moveq	r3, #0
 800c49c:	b2db      	uxtb	r3, r3
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d001      	beq.n	800c4a6 <_ZL12MX_ADC1_Initv+0x7a>
  {
    Error_Handler();
 800c4a2:	f000 faad 	bl	800ca00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800c4a6:	2303      	movs	r3, #3
 800c4a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c4b2:	463b      	mov	r3, r7
 800c4b4:	4619      	mov	r1, r3
 800c4b6:	4808      	ldr	r0, [pc, #32]	@ (800c4d8 <_ZL12MX_ADC1_Initv+0xac>)
 800c4b8:	f000 ffb6 	bl	800d428 <HAL_ADC_ConfigChannel>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	bf14      	ite	ne
 800c4c2:	2301      	movne	r3, #1
 800c4c4:	2300      	moveq	r3, #0
 800c4c6:	b2db      	uxtb	r3, r3
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d001      	beq.n	800c4d0 <_ZL12MX_ADC1_Initv+0xa4>
  {
    Error_Handler();
 800c4cc:	f000 fa98 	bl	800ca00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800c4d0:	bf00      	nop
 800c4d2:	3710      	adds	r7, #16
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}
 800c4d8:	20000390 	.word	0x20000390
 800c4dc:	40012000 	.word	0x40012000
 800c4e0:	0f000001 	.word	0x0f000001

0800c4e4 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800c4e8:	4b15      	ldr	r3, [pc, #84]	@ (800c540 <_ZL12MX_I2C1_Initv+0x5c>)
 800c4ea:	4a16      	ldr	r2, [pc, #88]	@ (800c544 <_ZL12MX_I2C1_Initv+0x60>)
 800c4ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800c4ee:	4b14      	ldr	r3, [pc, #80]	@ (800c540 <_ZL12MX_I2C1_Initv+0x5c>)
 800c4f0:	4a15      	ldr	r2, [pc, #84]	@ (800c548 <_ZL12MX_I2C1_Initv+0x64>)
 800c4f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800c4f4:	4b12      	ldr	r3, [pc, #72]	@ (800c540 <_ZL12MX_I2C1_Initv+0x5c>)
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800c4fa:	4b11      	ldr	r3, [pc, #68]	@ (800c540 <_ZL12MX_I2C1_Initv+0x5c>)
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c500:	4b0f      	ldr	r3, [pc, #60]	@ (800c540 <_ZL12MX_I2C1_Initv+0x5c>)
 800c502:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800c506:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c508:	4b0d      	ldr	r3, [pc, #52]	@ (800c540 <_ZL12MX_I2C1_Initv+0x5c>)
 800c50a:	2200      	movs	r2, #0
 800c50c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800c50e:	4b0c      	ldr	r3, [pc, #48]	@ (800c540 <_ZL12MX_I2C1_Initv+0x5c>)
 800c510:	2200      	movs	r2, #0
 800c512:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c514:	4b0a      	ldr	r3, [pc, #40]	@ (800c540 <_ZL12MX_I2C1_Initv+0x5c>)
 800c516:	2200      	movs	r2, #0
 800c518:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c51a:	4b09      	ldr	r3, [pc, #36]	@ (800c540 <_ZL12MX_I2C1_Initv+0x5c>)
 800c51c:	2200      	movs	r2, #0
 800c51e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800c520:	4807      	ldr	r0, [pc, #28]	@ (800c540 <_ZL12MX_I2C1_Initv+0x5c>)
 800c522:	f001 fc8f 	bl	800de44 <HAL_I2C_Init>
 800c526:	4603      	mov	r3, r0
 800c528:	2b00      	cmp	r3, #0
 800c52a:	bf14      	ite	ne
 800c52c:	2301      	movne	r3, #1
 800c52e:	2300      	moveq	r3, #0
 800c530:	b2db      	uxtb	r3, r3
 800c532:	2b00      	cmp	r3, #0
 800c534:	d001      	beq.n	800c53a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800c536:	f000 fa63 	bl	800ca00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800c53a:	bf00      	nop
 800c53c:	bd80      	pop	{r7, pc}
 800c53e:	bf00      	nop
 800c540:	200003d8 	.word	0x200003d8
 800c544:	40005400 	.word	0x40005400
 800c548:	000186a0 	.word	0x000186a0

0800c54c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800c550:	4b1a      	ldr	r3, [pc, #104]	@ (800c5bc <_ZL12MX_SPI1_Initv+0x70>)
 800c552:	4a1b      	ldr	r2, [pc, #108]	@ (800c5c0 <_ZL12MX_SPI1_Initv+0x74>)
 800c554:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800c556:	4b19      	ldr	r3, [pc, #100]	@ (800c5bc <_ZL12MX_SPI1_Initv+0x70>)
 800c558:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800c55c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800c55e:	4b17      	ldr	r3, [pc, #92]	@ (800c5bc <_ZL12MX_SPI1_Initv+0x70>)
 800c560:	2200      	movs	r2, #0
 800c562:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800c564:	4b15      	ldr	r3, [pc, #84]	@ (800c5bc <_ZL12MX_SPI1_Initv+0x70>)
 800c566:	2200      	movs	r2, #0
 800c568:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c56a:	4b14      	ldr	r3, [pc, #80]	@ (800c5bc <_ZL12MX_SPI1_Initv+0x70>)
 800c56c:	2200      	movs	r2, #0
 800c56e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c570:	4b12      	ldr	r3, [pc, #72]	@ (800c5bc <_ZL12MX_SPI1_Initv+0x70>)
 800c572:	2200      	movs	r2, #0
 800c574:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800c576:	4b11      	ldr	r3, [pc, #68]	@ (800c5bc <_ZL12MX_SPI1_Initv+0x70>)
 800c578:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c57c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c57e:	4b0f      	ldr	r3, [pc, #60]	@ (800c5bc <_ZL12MX_SPI1_Initv+0x70>)
 800c580:	2200      	movs	r2, #0
 800c582:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c584:	4b0d      	ldr	r3, [pc, #52]	@ (800c5bc <_ZL12MX_SPI1_Initv+0x70>)
 800c586:	2200      	movs	r2, #0
 800c588:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800c58a:	4b0c      	ldr	r3, [pc, #48]	@ (800c5bc <_ZL12MX_SPI1_Initv+0x70>)
 800c58c:	2200      	movs	r2, #0
 800c58e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c590:	4b0a      	ldr	r3, [pc, #40]	@ (800c5bc <_ZL12MX_SPI1_Initv+0x70>)
 800c592:	2200      	movs	r2, #0
 800c594:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800c596:	4b09      	ldr	r3, [pc, #36]	@ (800c5bc <_ZL12MX_SPI1_Initv+0x70>)
 800c598:	220a      	movs	r2, #10
 800c59a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800c59c:	4807      	ldr	r0, [pc, #28]	@ (800c5bc <_ZL12MX_SPI1_Initv+0x70>)
 800c59e:	f003 f8cd 	bl	800f73c <HAL_SPI_Init>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	bf14      	ite	ne
 800c5a8:	2301      	movne	r3, #1
 800c5aa:	2300      	moveq	r3, #0
 800c5ac:	b2db      	uxtb	r3, r3
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d001      	beq.n	800c5b6 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800c5b2:	f000 fa25 	bl	800ca00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800c5b6:	bf00      	nop
 800c5b8:	bd80      	pop	{r7, pc}
 800c5ba:	bf00      	nop
 800c5bc:	2000042c 	.word	0x2000042c
 800c5c0:	40013000 	.word	0x40013000

0800c5c4 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b08e      	sub	sp, #56	@ 0x38
 800c5c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c5ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	601a      	str	r2, [r3, #0]
 800c5d2:	605a      	str	r2, [r3, #4]
 800c5d4:	609a      	str	r2, [r3, #8]
 800c5d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c5d8:	f107 0320 	add.w	r3, r7, #32
 800c5dc:	2200      	movs	r2, #0
 800c5de:	601a      	str	r2, [r3, #0]
 800c5e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c5e2:	1d3b      	adds	r3, r7, #4
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	601a      	str	r2, [r3, #0]
 800c5e8:	605a      	str	r2, [r3, #4]
 800c5ea:	609a      	str	r2, [r3, #8]
 800c5ec:	60da      	str	r2, [r3, #12]
 800c5ee:	611a      	str	r2, [r3, #16]
 800c5f0:	615a      	str	r2, [r3, #20]
 800c5f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800c5f4:	4b39      	ldr	r3, [pc, #228]	@ (800c6dc <_ZL12MX_TIM2_Initv+0x118>)
 800c5f6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800c5fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800c5fc:	4b37      	ldr	r3, [pc, #220]	@ (800c6dc <_ZL12MX_TIM2_Initv+0x118>)
 800c5fe:	2247      	movs	r2, #71	@ 0x47
 800c600:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c602:	4b36      	ldr	r3, [pc, #216]	@ (800c6dc <_ZL12MX_TIM2_Initv+0x118>)
 800c604:	2200      	movs	r2, #0
 800c606:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800c608:	4b34      	ldr	r3, [pc, #208]	@ (800c6dc <_ZL12MX_TIM2_Initv+0x118>)
 800c60a:	2263      	movs	r2, #99	@ 0x63
 800c60c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c60e:	4b33      	ldr	r3, [pc, #204]	@ (800c6dc <_ZL12MX_TIM2_Initv+0x118>)
 800c610:	2200      	movs	r2, #0
 800c612:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800c614:	4b31      	ldr	r3, [pc, #196]	@ (800c6dc <_ZL12MX_TIM2_Initv+0x118>)
 800c616:	2280      	movs	r2, #128	@ 0x80
 800c618:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800c61a:	4830      	ldr	r0, [pc, #192]	@ (800c6dc <_ZL12MX_TIM2_Initv+0x118>)
 800c61c:	f003 fb38 	bl	800fc90 <HAL_TIM_Base_Init>
 800c620:	4603      	mov	r3, r0
 800c622:	2b00      	cmp	r3, #0
 800c624:	bf14      	ite	ne
 800c626:	2301      	movne	r3, #1
 800c628:	2300      	moveq	r3, #0
 800c62a:	b2db      	uxtb	r3, r3
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d001      	beq.n	800c634 <_ZL12MX_TIM2_Initv+0x70>
  {
    Error_Handler();
 800c630:	f000 f9e6 	bl	800ca00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c634:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c638:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800c63a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c63e:	4619      	mov	r1, r3
 800c640:	4826      	ldr	r0, [pc, #152]	@ (800c6dc <_ZL12MX_TIM2_Initv+0x118>)
 800c642:	f003 fe93 	bl	801036c <HAL_TIM_ConfigClockSource>
 800c646:	4603      	mov	r3, r0
 800c648:	2b00      	cmp	r3, #0
 800c64a:	bf14      	ite	ne
 800c64c:	2301      	movne	r3, #1
 800c64e:	2300      	moveq	r3, #0
 800c650:	b2db      	uxtb	r3, r3
 800c652:	2b00      	cmp	r3, #0
 800c654:	d001      	beq.n	800c65a <_ZL12MX_TIM2_Initv+0x96>
  {
    Error_Handler();
 800c656:	f000 f9d3 	bl	800ca00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800c65a:	4820      	ldr	r0, [pc, #128]	@ (800c6dc <_ZL12MX_TIM2_Initv+0x118>)
 800c65c:	f003 fbca 	bl	800fdf4 <HAL_TIM_PWM_Init>
 800c660:	4603      	mov	r3, r0
 800c662:	2b00      	cmp	r3, #0
 800c664:	bf14      	ite	ne
 800c666:	2301      	movne	r3, #1
 800c668:	2300      	moveq	r3, #0
 800c66a:	b2db      	uxtb	r3, r3
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d001      	beq.n	800c674 <_ZL12MX_TIM2_Initv+0xb0>
  {
    Error_Handler();
 800c670:	f000 f9c6 	bl	800ca00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c674:	2300      	movs	r3, #0
 800c676:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c678:	2300      	movs	r3, #0
 800c67a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800c67c:	f107 0320 	add.w	r3, r7, #32
 800c680:	4619      	mov	r1, r3
 800c682:	4816      	ldr	r0, [pc, #88]	@ (800c6dc <_ZL12MX_TIM2_Initv+0x118>)
 800c684:	f004 fa3a 	bl	8010afc <HAL_TIMEx_MasterConfigSynchronization>
 800c688:	4603      	mov	r3, r0
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	bf14      	ite	ne
 800c68e:	2301      	movne	r3, #1
 800c690:	2300      	moveq	r3, #0
 800c692:	b2db      	uxtb	r3, r3
 800c694:	2b00      	cmp	r3, #0
 800c696:	d001      	beq.n	800c69c <_ZL12MX_TIM2_Initv+0xd8>
  {
    Error_Handler();
 800c698:	f000 f9b2 	bl	800ca00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c69c:	2360      	movs	r3, #96	@ 0x60
 800c69e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c6ac:	1d3b      	adds	r3, r7, #4
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	4619      	mov	r1, r3
 800c6b2:	480a      	ldr	r0, [pc, #40]	@ (800c6dc <_ZL12MX_TIM2_Initv+0x118>)
 800c6b4:	f003 fd98 	bl	80101e8 <HAL_TIM_PWM_ConfigChannel>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	bf14      	ite	ne
 800c6be:	2301      	movne	r3, #1
 800c6c0:	2300      	moveq	r3, #0
 800c6c2:	b2db      	uxtb	r3, r3
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d001      	beq.n	800c6cc <_ZL12MX_TIM2_Initv+0x108>
  {
    Error_Handler();
 800c6c8:	f000 f99a 	bl	800ca00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800c6cc:	4803      	ldr	r0, [pc, #12]	@ (800c6dc <_ZL12MX_TIM2_Initv+0x118>)
 800c6ce:	f000 fb19 	bl	800cd04 <HAL_TIM_MspPostInit>

}
 800c6d2:	bf00      	nop
 800c6d4:	3738      	adds	r7, #56	@ 0x38
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}
 800c6da:	bf00      	nop
 800c6dc:	20000484 	.word	0x20000484

0800c6e0 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b086      	sub	sp, #24
 800c6e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c6e6:	f107 0308 	add.w	r3, r7, #8
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	601a      	str	r2, [r3, #0]
 800c6ee:	605a      	str	r2, [r3, #4]
 800c6f0:	609a      	str	r2, [r3, #8]
 800c6f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c6f4:	463b      	mov	r3, r7
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	601a      	str	r2, [r3, #0]
 800c6fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800c6fc:	4b24      	ldr	r3, [pc, #144]	@ (800c790 <_ZL12MX_TIM3_Initv+0xb0>)
 800c6fe:	4a25      	ldr	r2, [pc, #148]	@ (800c794 <_ZL12MX_TIM3_Initv+0xb4>)
 800c700:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800c702:	4b23      	ldr	r3, [pc, #140]	@ (800c790 <_ZL12MX_TIM3_Initv+0xb0>)
 800c704:	2200      	movs	r2, #0
 800c706:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c708:	4b21      	ldr	r3, [pc, #132]	@ (800c790 <_ZL12MX_TIM3_Initv+0xb0>)
 800c70a:	2200      	movs	r2, #0
 800c70c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800c70e:	4b20      	ldr	r3, [pc, #128]	@ (800c790 <_ZL12MX_TIM3_Initv+0xb0>)
 800c710:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c714:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c716:	4b1e      	ldr	r3, [pc, #120]	@ (800c790 <_ZL12MX_TIM3_Initv+0xb0>)
 800c718:	2200      	movs	r2, #0
 800c71a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c71c:	4b1c      	ldr	r3, [pc, #112]	@ (800c790 <_ZL12MX_TIM3_Initv+0xb0>)
 800c71e:	2200      	movs	r2, #0
 800c720:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800c722:	481b      	ldr	r0, [pc, #108]	@ (800c790 <_ZL12MX_TIM3_Initv+0xb0>)
 800c724:	f003 fab4 	bl	800fc90 <HAL_TIM_Base_Init>
 800c728:	4603      	mov	r3, r0
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	bf14      	ite	ne
 800c72e:	2301      	movne	r3, #1
 800c730:	2300      	moveq	r3, #0
 800c732:	b2db      	uxtb	r3, r3
 800c734:	2b00      	cmp	r3, #0
 800c736:	d001      	beq.n	800c73c <_ZL12MX_TIM3_Initv+0x5c>
  {
    Error_Handler();
 800c738:	f000 f962 	bl	800ca00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c73c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c740:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800c742:	f107 0308 	add.w	r3, r7, #8
 800c746:	4619      	mov	r1, r3
 800c748:	4811      	ldr	r0, [pc, #68]	@ (800c790 <_ZL12MX_TIM3_Initv+0xb0>)
 800c74a:	f003 fe0f 	bl	801036c <HAL_TIM_ConfigClockSource>
 800c74e:	4603      	mov	r3, r0
 800c750:	2b00      	cmp	r3, #0
 800c752:	bf14      	ite	ne
 800c754:	2301      	movne	r3, #1
 800c756:	2300      	moveq	r3, #0
 800c758:	b2db      	uxtb	r3, r3
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d001      	beq.n	800c762 <_ZL12MX_TIM3_Initv+0x82>
  {
    Error_Handler();
 800c75e:	f000 f94f 	bl	800ca00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c762:	2300      	movs	r3, #0
 800c764:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c766:	2300      	movs	r3, #0
 800c768:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800c76a:	463b      	mov	r3, r7
 800c76c:	4619      	mov	r1, r3
 800c76e:	4808      	ldr	r0, [pc, #32]	@ (800c790 <_ZL12MX_TIM3_Initv+0xb0>)
 800c770:	f004 f9c4 	bl	8010afc <HAL_TIMEx_MasterConfigSynchronization>
 800c774:	4603      	mov	r3, r0
 800c776:	2b00      	cmp	r3, #0
 800c778:	bf14      	ite	ne
 800c77a:	2301      	movne	r3, #1
 800c77c:	2300      	moveq	r3, #0
 800c77e:	b2db      	uxtb	r3, r3
 800c780:	2b00      	cmp	r3, #0
 800c782:	d001      	beq.n	800c788 <_ZL12MX_TIM3_Initv+0xa8>
  {
    Error_Handler();
 800c784:	f000 f93c 	bl	800ca00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800c788:	bf00      	nop
 800c78a:	3718      	adds	r7, #24
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}
 800c790:	200004cc 	.word	0x200004cc
 800c794:	40000400 	.word	0x40000400

0800c798 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800c79c:	4b13      	ldr	r3, [pc, #76]	@ (800c7ec <_ZL19MX_USART1_UART_Initv+0x54>)
 800c79e:	4a14      	ldr	r2, [pc, #80]	@ (800c7f0 <_ZL19MX_USART1_UART_Initv+0x58>)
 800c7a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800c7a2:	4b12      	ldr	r3, [pc, #72]	@ (800c7ec <_ZL19MX_USART1_UART_Initv+0x54>)
 800c7a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800c7a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c7aa:	4b10      	ldr	r3, [pc, #64]	@ (800c7ec <_ZL19MX_USART1_UART_Initv+0x54>)
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c7b0:	4b0e      	ldr	r3, [pc, #56]	@ (800c7ec <_ZL19MX_USART1_UART_Initv+0x54>)
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c7b6:	4b0d      	ldr	r3, [pc, #52]	@ (800c7ec <_ZL19MX_USART1_UART_Initv+0x54>)
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c7bc:	4b0b      	ldr	r3, [pc, #44]	@ (800c7ec <_ZL19MX_USART1_UART_Initv+0x54>)
 800c7be:	220c      	movs	r2, #12
 800c7c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c7c2:	4b0a      	ldr	r3, [pc, #40]	@ (800c7ec <_ZL19MX_USART1_UART_Initv+0x54>)
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c7c8:	4b08      	ldr	r3, [pc, #32]	@ (800c7ec <_ZL19MX_USART1_UART_Initv+0x54>)
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c7ce:	4807      	ldr	r0, [pc, #28]	@ (800c7ec <_ZL19MX_USART1_UART_Initv+0x54>)
 800c7d0:	f004 fa16 	bl	8010c00 <HAL_UART_Init>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	bf14      	ite	ne
 800c7da:	2301      	movne	r3, #1
 800c7dc:	2300      	moveq	r3, #0
 800c7de:	b2db      	uxtb	r3, r3
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d001      	beq.n	800c7e8 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 800c7e4:	f000 f90c 	bl	800ca00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800c7e8:	bf00      	nop
 800c7ea:	bd80      	pop	{r7, pc}
 800c7ec:	20000514 	.word	0x20000514
 800c7f0:	40011000 	.word	0x40011000

0800c7f4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b08a      	sub	sp, #40	@ 0x28
 800c7f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c7fa:	f107 0314 	add.w	r3, r7, #20
 800c7fe:	2200      	movs	r2, #0
 800c800:	601a      	str	r2, [r3, #0]
 800c802:	605a      	str	r2, [r3, #4]
 800c804:	609a      	str	r2, [r3, #8]
 800c806:	60da      	str	r2, [r3, #12]
 800c808:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c80a:	2300      	movs	r3, #0
 800c80c:	613b      	str	r3, [r7, #16]
 800c80e:	4b78      	ldr	r3, [pc, #480]	@ (800c9f0 <_ZL12MX_GPIO_Initv+0x1fc>)
 800c810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c812:	4a77      	ldr	r2, [pc, #476]	@ (800c9f0 <_ZL12MX_GPIO_Initv+0x1fc>)
 800c814:	f043 0304 	orr.w	r3, r3, #4
 800c818:	6313      	str	r3, [r2, #48]	@ 0x30
 800c81a:	4b75      	ldr	r3, [pc, #468]	@ (800c9f0 <_ZL12MX_GPIO_Initv+0x1fc>)
 800c81c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c81e:	f003 0304 	and.w	r3, r3, #4
 800c822:	613b      	str	r3, [r7, #16]
 800c824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c826:	2300      	movs	r3, #0
 800c828:	60fb      	str	r3, [r7, #12]
 800c82a:	4b71      	ldr	r3, [pc, #452]	@ (800c9f0 <_ZL12MX_GPIO_Initv+0x1fc>)
 800c82c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c82e:	4a70      	ldr	r2, [pc, #448]	@ (800c9f0 <_ZL12MX_GPIO_Initv+0x1fc>)
 800c830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c834:	6313      	str	r3, [r2, #48]	@ 0x30
 800c836:	4b6e      	ldr	r3, [pc, #440]	@ (800c9f0 <_ZL12MX_GPIO_Initv+0x1fc>)
 800c838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c83a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c83e:	60fb      	str	r3, [r7, #12]
 800c840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c842:	2300      	movs	r3, #0
 800c844:	60bb      	str	r3, [r7, #8]
 800c846:	4b6a      	ldr	r3, [pc, #424]	@ (800c9f0 <_ZL12MX_GPIO_Initv+0x1fc>)
 800c848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c84a:	4a69      	ldr	r2, [pc, #420]	@ (800c9f0 <_ZL12MX_GPIO_Initv+0x1fc>)
 800c84c:	f043 0301 	orr.w	r3, r3, #1
 800c850:	6313      	str	r3, [r2, #48]	@ 0x30
 800c852:	4b67      	ldr	r3, [pc, #412]	@ (800c9f0 <_ZL12MX_GPIO_Initv+0x1fc>)
 800c854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c856:	f003 0301 	and.w	r3, r3, #1
 800c85a:	60bb      	str	r3, [r7, #8]
 800c85c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c85e:	2300      	movs	r3, #0
 800c860:	607b      	str	r3, [r7, #4]
 800c862:	4b63      	ldr	r3, [pc, #396]	@ (800c9f0 <_ZL12MX_GPIO_Initv+0x1fc>)
 800c864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c866:	4a62      	ldr	r2, [pc, #392]	@ (800c9f0 <_ZL12MX_GPIO_Initv+0x1fc>)
 800c868:	f043 0302 	orr.w	r3, r3, #2
 800c86c:	6313      	str	r3, [r2, #48]	@ 0x30
 800c86e:	4b60      	ldr	r3, [pc, #384]	@ (800c9f0 <_ZL12MX_GPIO_Initv+0x1fc>)
 800c870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c872:	f003 0302 	and.w	r3, r3, #2
 800c876:	607b      	str	r3, [r7, #4]
 800c878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800c87a:	2200      	movs	r2, #0
 800c87c:	2106      	movs	r1, #6
 800c87e:	485d      	ldr	r0, [pc, #372]	@ (800c9f4 <_ZL12MX_GPIO_Initv+0x200>)
 800c880:	f001 faae 	bl	800dde0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|Display_DC_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 800c884:	2200      	movs	r2, #0
 800c886:	2123      	movs	r1, #35	@ 0x23
 800c888:	485b      	ldr	r0, [pc, #364]	@ (800c9f8 <_ZL12MX_GPIO_Initv+0x204>)
 800c88a:	f001 faa9 	bl	800dde0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 800c88e:	2201      	movs	r2, #1
 800c890:	2108      	movs	r1, #8
 800c892:	4859      	ldr	r0, [pc, #356]	@ (800c9f8 <_ZL12MX_GPIO_Initv+0x204>)
 800c894:	f001 faa4 	bl	800dde0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800c898:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c89c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800c89e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800c8a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c8a8:	f107 0314 	add.w	r3, r7, #20
 800c8ac:	4619      	mov	r1, r3
 800c8ae:	4853      	ldr	r0, [pc, #332]	@ (800c9fc <_ZL12MX_GPIO_Initv+0x208>)
 800c8b0:	f001 f8fa 	bl	800daa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c8bc:	2301      	movs	r3, #1
 800c8be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c8c0:	f107 0314 	add.w	r3, r7, #20
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	484b      	ldr	r0, [pc, #300]	@ (800c9f4 <_ZL12MX_GPIO_Initv+0x200>)
 800c8c8:	f001 f8ee 	bl	800daa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800c8cc:	2306      	movs	r3, #6
 800c8ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c8dc:	f107 0314 	add.w	r3, r7, #20
 800c8e0:	4619      	mov	r1, r3
 800c8e2:	4844      	ldr	r0, [pc, #272]	@ (800c9f4 <_ZL12MX_GPIO_Initv+0x200>)
 800c8e4:	f001 f8e0 	bl	800daa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800c8e8:	2340      	movs	r3, #64	@ 0x40
 800c8ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800c8ec:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800c8f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c8f6:	f107 0314 	add.w	r3, r7, #20
 800c8fa:	4619      	mov	r1, r3
 800c8fc:	483d      	ldr	r0, [pc, #244]	@ (800c9f4 <_ZL12MX_GPIO_Initv+0x200>)
 800c8fe:	f001 f8d3 	bl	800daa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 Display_DC_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|Display_DC_Pin;
 800c902:	2303      	movs	r3, #3
 800c904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c906:	2301      	movs	r3, #1
 800c908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c90a:	2301      	movs	r3, #1
 800c90c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c90e:	2300      	movs	r3, #0
 800c910:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c912:	f107 0314 	add.w	r3, r7, #20
 800c916:	4619      	mov	r1, r3
 800c918:	4837      	ldr	r0, [pc, #220]	@ (800c9f8 <_ZL12MX_GPIO_Initv+0x204>)
 800c91a:	f001 f8c5 	bl	800daa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 800c91e:	f240 4304 	movw	r3, #1028	@ 0x404
 800c922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800c924:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800c928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c92a:	2301      	movs	r3, #1
 800c92c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c92e:	f107 0314 	add.w	r3, r7, #20
 800c932:	4619      	mov	r1, r3
 800c934:	4830      	ldr	r0, [pc, #192]	@ (800c9f8 <_ZL12MX_GPIO_Initv+0x204>)
 800c936:	f001 f8b7 	bl	800daa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800c93a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c93e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c940:	2300      	movs	r3, #0
 800c942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c944:	2301      	movs	r3, #1
 800c946:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c948:	f107 0314 	add.w	r3, r7, #20
 800c94c:	4619      	mov	r1, r3
 800c94e:	482a      	ldr	r0, [pc, #168]	@ (800c9f8 <_ZL12MX_GPIO_Initv+0x204>)
 800c950:	f001 f8aa 	bl	800daa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8;
 800c954:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 800c958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c95a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800c95e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c960:	2301      	movs	r3, #1
 800c962:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c964:	f107 0314 	add.w	r3, r7, #20
 800c968:	4619      	mov	r1, r3
 800c96a:	4823      	ldr	r0, [pc, #140]	@ (800c9f8 <_ZL12MX_GPIO_Initv+0x204>)
 800c96c:	f001 f89c 	bl	800daa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800c970:	2328      	movs	r3, #40	@ 0x28
 800c972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c974:	2301      	movs	r3, #1
 800c976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c978:	2300      	movs	r3, #0
 800c97a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c97c:	2300      	movs	r3, #0
 800c97e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c980:	f107 0314 	add.w	r3, r7, #20
 800c984:	4619      	mov	r1, r3
 800c986:	481c      	ldr	r0, [pc, #112]	@ (800c9f8 <_ZL12MX_GPIO_Initv+0x204>)
 800c988:	f001 f88e 	bl	800daa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800c98c:	2310      	movs	r3, #16
 800c98e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c990:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800c994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c996:	2300      	movs	r3, #0
 800c998:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c99a:	f107 0314 	add.w	r3, r7, #20
 800c99e:	4619      	mov	r1, r3
 800c9a0:	4815      	ldr	r0, [pc, #84]	@ (800c9f8 <_ZL12MX_GPIO_Initv+0x204>)
 800c9a2:	f001 f881 	bl	800daa8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	2100      	movs	r1, #0
 800c9aa:	2008      	movs	r0, #8
 800c9ac:	f001 f845 	bl	800da3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800c9b0:	2008      	movs	r0, #8
 800c9b2:	f001 f85e 	bl	800da72 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	2100      	movs	r1, #0
 800c9ba:	200a      	movs	r0, #10
 800c9bc:	f001 f83d 	bl	800da3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800c9c0:	200a      	movs	r0, #10
 800c9c2:	f001 f856 	bl	800da72 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	2100      	movs	r1, #0
 800c9ca:	2017      	movs	r0, #23
 800c9cc:	f001 f835 	bl	800da3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800c9d0:	2017      	movs	r0, #23
 800c9d2:	f001 f84e 	bl	800da72 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	2100      	movs	r1, #0
 800c9da:	2028      	movs	r0, #40	@ 0x28
 800c9dc:	f001 f82d 	bl	800da3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800c9e0:	2028      	movs	r0, #40	@ 0x28
 800c9e2:	f001 f846 	bl	800da72 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800c9e6:	bf00      	nop
 800c9e8:	3728      	adds	r7, #40	@ 0x28
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}
 800c9ee:	bf00      	nop
 800c9f0:	40023800 	.word	0x40023800
 800c9f4:	40020000 	.word	0x40020000
 800c9f8:	40020400 	.word	0x40020400
 800c9fc:	40020800 	.word	0x40020800

0800ca00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ca00:	b480      	push	{r7}
 800ca02:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800ca04:	b672      	cpsid	i
}
 800ca06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800ca08:	bf00      	nop
 800ca0a:	e7fd      	b.n	800ca08 <Error_Handler+0x8>

0800ca0c <SPI1_Init>:

SPI_HandleTypeDef Hspi;

/* SPI5 init function */
void SPI1_Init(void)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	af00      	add	r7, sp, #0
	Hspi.Instance = SPI1;
 800ca10:	4b17      	ldr	r3, [pc, #92]	@ (800ca70 <SPI1_Init+0x64>)
 800ca12:	4a18      	ldr	r2, [pc, #96]	@ (800ca74 <SPI1_Init+0x68>)
 800ca14:	601a      	str	r2, [r3, #0]
	Hspi.Init.Mode = SPI_MODE_MASTER;
 800ca16:	4b16      	ldr	r3, [pc, #88]	@ (800ca70 <SPI1_Init+0x64>)
 800ca18:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800ca1c:	605a      	str	r2, [r3, #4]
	Hspi.Init.Direction = SPI_DIRECTION_2LINES;
 800ca1e:	4b14      	ldr	r3, [pc, #80]	@ (800ca70 <SPI1_Init+0x64>)
 800ca20:	2200      	movs	r2, #0
 800ca22:	609a      	str	r2, [r3, #8]
	Hspi.Init.DataSize = SPI_DATASIZE_8BIT;
 800ca24:	4b12      	ldr	r3, [pc, #72]	@ (800ca70 <SPI1_Init+0x64>)
 800ca26:	2200      	movs	r2, #0
 800ca28:	60da      	str	r2, [r3, #12]
	Hspi.Init.CLKPolarity = SPI_POLARITY_LOW;
 800ca2a:	4b11      	ldr	r3, [pc, #68]	@ (800ca70 <SPI1_Init+0x64>)
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	611a      	str	r2, [r3, #16]
	Hspi.Init.CLKPhase = SPI_PHASE_1EDGE;
 800ca30:	4b0f      	ldr	r3, [pc, #60]	@ (800ca70 <SPI1_Init+0x64>)
 800ca32:	2200      	movs	r2, #0
 800ca34:	615a      	str	r2, [r3, #20]
	Hspi.Init.NSS = SPI_NSS_SOFT;
 800ca36:	4b0e      	ldr	r3, [pc, #56]	@ (800ca70 <SPI1_Init+0x64>)
 800ca38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ca3c:	619a      	str	r2, [r3, #24]
	Hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ca3e:	4b0c      	ldr	r3, [pc, #48]	@ (800ca70 <SPI1_Init+0x64>)
 800ca40:	2200      	movs	r2, #0
 800ca42:	61da      	str	r2, [r3, #28]
	Hspi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ca44:	4b0a      	ldr	r3, [pc, #40]	@ (800ca70 <SPI1_Init+0x64>)
 800ca46:	2200      	movs	r2, #0
 800ca48:	621a      	str	r2, [r3, #32]
	Hspi.Init.TIMode = SPI_TIMODE_DISABLE;
 800ca4a:	4b09      	ldr	r3, [pc, #36]	@ (800ca70 <SPI1_Init+0x64>)
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	625a      	str	r2, [r3, #36]	@ 0x24
	Hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ca50:	4b07      	ldr	r3, [pc, #28]	@ (800ca70 <SPI1_Init+0x64>)
 800ca52:	2200      	movs	r2, #0
 800ca54:	629a      	str	r2, [r3, #40]	@ 0x28
	Hspi.Init.CRCPolynomial = 7;
 800ca56:	4b06      	ldr	r3, [pc, #24]	@ (800ca70 <SPI1_Init+0x64>)
 800ca58:	2207      	movs	r2, #7
 800ca5a:	62da      	str	r2, [r3, #44]	@ 0x2c
//  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
//  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  if (HAL_SPI_Init(&Hspi) != HAL_OK)
 800ca5c:	4804      	ldr	r0, [pc, #16]	@ (800ca70 <SPI1_Init+0x64>)
 800ca5e:	f002 fe6d 	bl	800f73c <HAL_SPI_Init>
 800ca62:	4603      	mov	r3, r0
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d001      	beq.n	800ca6c <SPI1_Init+0x60>
  {
    Error_Handler();
 800ca68:	f7ff ffca 	bl	800ca00 <Error_Handler>
  }

}
 800ca6c:	bf00      	nop
 800ca6e:	bd80      	pop	{r7, pc}
 800ca70:	2000055c 	.word	0x2000055c
 800ca74:	40013000 	.word	0x40013000

0800ca78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b082      	sub	sp, #8
 800ca7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ca7e:	2300      	movs	r3, #0
 800ca80:	607b      	str	r3, [r7, #4]
 800ca82:	4b13      	ldr	r3, [pc, #76]	@ (800cad0 <HAL_MspInit+0x58>)
 800ca84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca86:	4a12      	ldr	r2, [pc, #72]	@ (800cad0 <HAL_MspInit+0x58>)
 800ca88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ca8c:	6453      	str	r3, [r2, #68]	@ 0x44
 800ca8e:	4b10      	ldr	r3, [pc, #64]	@ (800cad0 <HAL_MspInit+0x58>)
 800ca90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ca96:	607b      	str	r3, [r7, #4]
 800ca98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	603b      	str	r3, [r7, #0]
 800ca9e:	4b0c      	ldr	r3, [pc, #48]	@ (800cad0 <HAL_MspInit+0x58>)
 800caa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800caa2:	4a0b      	ldr	r2, [pc, #44]	@ (800cad0 <HAL_MspInit+0x58>)
 800caa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800caa8:	6413      	str	r3, [r2, #64]	@ 0x40
 800caaa:	4b09      	ldr	r3, [pc, #36]	@ (800cad0 <HAL_MspInit+0x58>)
 800caac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800caae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cab2:	603b      	str	r3, [r7, #0]
 800cab4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800cab6:	2200      	movs	r2, #0
 800cab8:	2100      	movs	r1, #0
 800caba:	2005      	movs	r0, #5
 800cabc:	f000 ffbd 	bl	800da3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800cac0:	2005      	movs	r0, #5
 800cac2:	f000 ffd6 	bl	800da72 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800cac6:	bf00      	nop
 800cac8:	3708      	adds	r7, #8
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}
 800cace:	bf00      	nop
 800cad0:	40023800 	.word	0x40023800

0800cad4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b08a      	sub	sp, #40	@ 0x28
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cadc:	f107 0314 	add.w	r3, r7, #20
 800cae0:	2200      	movs	r2, #0
 800cae2:	601a      	str	r2, [r3, #0]
 800cae4:	605a      	str	r2, [r3, #4]
 800cae6:	609a      	str	r2, [r3, #8]
 800cae8:	60da      	str	r2, [r3, #12]
 800caea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	4a17      	ldr	r2, [pc, #92]	@ (800cb50 <HAL_ADC_MspInit+0x7c>)
 800caf2:	4293      	cmp	r3, r2
 800caf4:	d127      	bne.n	800cb46 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800caf6:	2300      	movs	r3, #0
 800caf8:	613b      	str	r3, [r7, #16]
 800cafa:	4b16      	ldr	r3, [pc, #88]	@ (800cb54 <HAL_ADC_MspInit+0x80>)
 800cafc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cafe:	4a15      	ldr	r2, [pc, #84]	@ (800cb54 <HAL_ADC_MspInit+0x80>)
 800cb00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cb04:	6453      	str	r3, [r2, #68]	@ 0x44
 800cb06:	4b13      	ldr	r3, [pc, #76]	@ (800cb54 <HAL_ADC_MspInit+0x80>)
 800cb08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb0e:	613b      	str	r3, [r7, #16]
 800cb10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cb12:	2300      	movs	r3, #0
 800cb14:	60fb      	str	r3, [r7, #12]
 800cb16:	4b0f      	ldr	r3, [pc, #60]	@ (800cb54 <HAL_ADC_MspInit+0x80>)
 800cb18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb1a:	4a0e      	ldr	r2, [pc, #56]	@ (800cb54 <HAL_ADC_MspInit+0x80>)
 800cb1c:	f043 0301 	orr.w	r3, r3, #1
 800cb20:	6313      	str	r3, [r2, #48]	@ 0x30
 800cb22:	4b0c      	ldr	r3, [pc, #48]	@ (800cb54 <HAL_ADC_MspInit+0x80>)
 800cb24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb26:	f003 0301 	and.w	r3, r3, #1
 800cb2a:	60fb      	str	r3, [r7, #12]
 800cb2c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800cb2e:	2318      	movs	r3, #24
 800cb30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800cb32:	2303      	movs	r3, #3
 800cb34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb36:	2300      	movs	r3, #0
 800cb38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cb3a:	f107 0314 	add.w	r3, r7, #20
 800cb3e:	4619      	mov	r1, r3
 800cb40:	4805      	ldr	r0, [pc, #20]	@ (800cb58 <HAL_ADC_MspInit+0x84>)
 800cb42:	f000 ffb1 	bl	800daa8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800cb46:	bf00      	nop
 800cb48:	3728      	adds	r7, #40	@ 0x28
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}
 800cb4e:	bf00      	nop
 800cb50:	40012000 	.word	0x40012000
 800cb54:	40023800 	.word	0x40023800
 800cb58:	40020000 	.word	0x40020000

0800cb5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b08a      	sub	sp, #40	@ 0x28
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb64:	f107 0314 	add.w	r3, r7, #20
 800cb68:	2200      	movs	r2, #0
 800cb6a:	601a      	str	r2, [r3, #0]
 800cb6c:	605a      	str	r2, [r3, #4]
 800cb6e:	609a      	str	r2, [r3, #8]
 800cb70:	60da      	str	r2, [r3, #12]
 800cb72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	4a19      	ldr	r2, [pc, #100]	@ (800cbe0 <HAL_I2C_MspInit+0x84>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d12b      	bne.n	800cbd6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cb7e:	2300      	movs	r3, #0
 800cb80:	613b      	str	r3, [r7, #16]
 800cb82:	4b18      	ldr	r3, [pc, #96]	@ (800cbe4 <HAL_I2C_MspInit+0x88>)
 800cb84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb86:	4a17      	ldr	r2, [pc, #92]	@ (800cbe4 <HAL_I2C_MspInit+0x88>)
 800cb88:	f043 0302 	orr.w	r3, r3, #2
 800cb8c:	6313      	str	r3, [r2, #48]	@ 0x30
 800cb8e:	4b15      	ldr	r3, [pc, #84]	@ (800cbe4 <HAL_I2C_MspInit+0x88>)
 800cb90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb92:	f003 0302 	and.w	r3, r3, #2
 800cb96:	613b      	str	r3, [r7, #16]
 800cb98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800cb9a:	23c0      	movs	r3, #192	@ 0xc0
 800cb9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800cb9e:	2312      	movs	r3, #18
 800cba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cba2:	2300      	movs	r3, #0
 800cba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cba6:	2303      	movs	r3, #3
 800cba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800cbaa:	2304      	movs	r3, #4
 800cbac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cbae:	f107 0314 	add.w	r3, r7, #20
 800cbb2:	4619      	mov	r1, r3
 800cbb4:	480c      	ldr	r0, [pc, #48]	@ (800cbe8 <HAL_I2C_MspInit+0x8c>)
 800cbb6:	f000 ff77 	bl	800daa8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800cbba:	2300      	movs	r3, #0
 800cbbc:	60fb      	str	r3, [r7, #12]
 800cbbe:	4b09      	ldr	r3, [pc, #36]	@ (800cbe4 <HAL_I2C_MspInit+0x88>)
 800cbc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbc2:	4a08      	ldr	r2, [pc, #32]	@ (800cbe4 <HAL_I2C_MspInit+0x88>)
 800cbc4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800cbc8:	6413      	str	r3, [r2, #64]	@ 0x40
 800cbca:	4b06      	ldr	r3, [pc, #24]	@ (800cbe4 <HAL_I2C_MspInit+0x88>)
 800cbcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cbd2:	60fb      	str	r3, [r7, #12]
 800cbd4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800cbd6:	bf00      	nop
 800cbd8:	3728      	adds	r7, #40	@ 0x28
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
 800cbde:	bf00      	nop
 800cbe0:	40005400 	.word	0x40005400
 800cbe4:	40023800 	.word	0x40023800
 800cbe8:	40020400 	.word	0x40020400

0800cbec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b08a      	sub	sp, #40	@ 0x28
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cbf4:	f107 0314 	add.w	r3, r7, #20
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	601a      	str	r2, [r3, #0]
 800cbfc:	605a      	str	r2, [r3, #4]
 800cbfe:	609a      	str	r2, [r3, #8]
 800cc00:	60da      	str	r2, [r3, #12]
 800cc02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	4a19      	ldr	r2, [pc, #100]	@ (800cc70 <HAL_SPI_MspInit+0x84>)
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d12b      	bne.n	800cc66 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800cc0e:	2300      	movs	r3, #0
 800cc10:	613b      	str	r3, [r7, #16]
 800cc12:	4b18      	ldr	r3, [pc, #96]	@ (800cc74 <HAL_SPI_MspInit+0x88>)
 800cc14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc16:	4a17      	ldr	r2, [pc, #92]	@ (800cc74 <HAL_SPI_MspInit+0x88>)
 800cc18:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800cc1c:	6453      	str	r3, [r2, #68]	@ 0x44
 800cc1e:	4b15      	ldr	r3, [pc, #84]	@ (800cc74 <HAL_SPI_MspInit+0x88>)
 800cc20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800cc26:	613b      	str	r3, [r7, #16]
 800cc28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	60fb      	str	r3, [r7, #12]
 800cc2e:	4b11      	ldr	r3, [pc, #68]	@ (800cc74 <HAL_SPI_MspInit+0x88>)
 800cc30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc32:	4a10      	ldr	r2, [pc, #64]	@ (800cc74 <HAL_SPI_MspInit+0x88>)
 800cc34:	f043 0301 	orr.w	r3, r3, #1
 800cc38:	6313      	str	r3, [r2, #48]	@ 0x30
 800cc3a:	4b0e      	ldr	r3, [pc, #56]	@ (800cc74 <HAL_SPI_MspInit+0x88>)
 800cc3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc3e:	f003 0301 	and.w	r3, r3, #1
 800cc42:	60fb      	str	r3, [r7, #12]
 800cc44:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800cc46:	23a0      	movs	r3, #160	@ 0xa0
 800cc48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc4a:	2302      	movs	r3, #2
 800cc4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cc52:	2303      	movs	r3, #3
 800cc54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800cc56:	2305      	movs	r3, #5
 800cc58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cc5a:	f107 0314 	add.w	r3, r7, #20
 800cc5e:	4619      	mov	r1, r3
 800cc60:	4805      	ldr	r0, [pc, #20]	@ (800cc78 <HAL_SPI_MspInit+0x8c>)
 800cc62:	f000 ff21 	bl	800daa8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800cc66:	bf00      	nop
 800cc68:	3728      	adds	r7, #40	@ 0x28
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
 800cc6e:	bf00      	nop
 800cc70:	40013000 	.word	0x40013000
 800cc74:	40023800 	.word	0x40023800
 800cc78:	40020000 	.word	0x40020000

0800cc7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b084      	sub	sp, #16
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc8c:	d116      	bne.n	800ccbc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800cc8e:	2300      	movs	r3, #0
 800cc90:	60fb      	str	r3, [r7, #12]
 800cc92:	4b1a      	ldr	r3, [pc, #104]	@ (800ccfc <HAL_TIM_Base_MspInit+0x80>)
 800cc94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc96:	4a19      	ldr	r2, [pc, #100]	@ (800ccfc <HAL_TIM_Base_MspInit+0x80>)
 800cc98:	f043 0301 	orr.w	r3, r3, #1
 800cc9c:	6413      	str	r3, [r2, #64]	@ 0x40
 800cc9e:	4b17      	ldr	r3, [pc, #92]	@ (800ccfc <HAL_TIM_Base_MspInit+0x80>)
 800cca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cca2:	f003 0301 	and.w	r3, r3, #1
 800cca6:	60fb      	str	r3, [r7, #12]
 800cca8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800ccaa:	2200      	movs	r2, #0
 800ccac:	2100      	movs	r1, #0
 800ccae:	201c      	movs	r0, #28
 800ccb0:	f000 fec3 	bl	800da3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800ccb4:	201c      	movs	r0, #28
 800ccb6:	f000 fedc 	bl	800da72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800ccba:	e01a      	b.n	800ccf2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	4a0f      	ldr	r2, [pc, #60]	@ (800cd00 <HAL_TIM_Base_MspInit+0x84>)
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	d115      	bne.n	800ccf2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	60bb      	str	r3, [r7, #8]
 800ccca:	4b0c      	ldr	r3, [pc, #48]	@ (800ccfc <HAL_TIM_Base_MspInit+0x80>)
 800cccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccce:	4a0b      	ldr	r2, [pc, #44]	@ (800ccfc <HAL_TIM_Base_MspInit+0x80>)
 800ccd0:	f043 0302 	orr.w	r3, r3, #2
 800ccd4:	6413      	str	r3, [r2, #64]	@ 0x40
 800ccd6:	4b09      	ldr	r3, [pc, #36]	@ (800ccfc <HAL_TIM_Base_MspInit+0x80>)
 800ccd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccda:	f003 0302 	and.w	r3, r3, #2
 800ccde:	60bb      	str	r3, [r7, #8]
 800cce0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800cce2:	2200      	movs	r2, #0
 800cce4:	2100      	movs	r1, #0
 800cce6:	201d      	movs	r0, #29
 800cce8:	f000 fea7 	bl	800da3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800ccec:	201d      	movs	r0, #29
 800ccee:	f000 fec0 	bl	800da72 <HAL_NVIC_EnableIRQ>
}
 800ccf2:	bf00      	nop
 800ccf4:	3710      	adds	r7, #16
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd80      	pop	{r7, pc}
 800ccfa:	bf00      	nop
 800ccfc:	40023800 	.word	0x40023800
 800cd00:	40000400 	.word	0x40000400

0800cd04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b088      	sub	sp, #32
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cd0c:	f107 030c 	add.w	r3, r7, #12
 800cd10:	2200      	movs	r2, #0
 800cd12:	601a      	str	r2, [r3, #0]
 800cd14:	605a      	str	r2, [r3, #4]
 800cd16:	609a      	str	r2, [r3, #8]
 800cd18:	60da      	str	r2, [r3, #12]
 800cd1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd24:	d11e      	bne.n	800cd64 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cd26:	2300      	movs	r3, #0
 800cd28:	60bb      	str	r3, [r7, #8]
 800cd2a:	4b10      	ldr	r3, [pc, #64]	@ (800cd6c <HAL_TIM_MspPostInit+0x68>)
 800cd2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd2e:	4a0f      	ldr	r2, [pc, #60]	@ (800cd6c <HAL_TIM_MspPostInit+0x68>)
 800cd30:	f043 0301 	orr.w	r3, r3, #1
 800cd34:	6313      	str	r3, [r2, #48]	@ 0x30
 800cd36:	4b0d      	ldr	r3, [pc, #52]	@ (800cd6c <HAL_TIM_MspPostInit+0x68>)
 800cd38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd3a:	f003 0301 	and.w	r3, r3, #1
 800cd3e:	60bb      	str	r3, [r7, #8]
 800cd40:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800cd42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cd46:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd48:	2302      	movs	r3, #2
 800cd4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cd50:	2300      	movs	r3, #0
 800cd52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800cd54:	2301      	movs	r3, #1
 800cd56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cd58:	f107 030c 	add.w	r3, r7, #12
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	4804      	ldr	r0, [pc, #16]	@ (800cd70 <HAL_TIM_MspPostInit+0x6c>)
 800cd60:	f000 fea2 	bl	800daa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800cd64:	bf00      	nop
 800cd66:	3720      	adds	r7, #32
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}
 800cd6c:	40023800 	.word	0x40023800
 800cd70:	40020000 	.word	0x40020000

0800cd74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b08a      	sub	sp, #40	@ 0x28
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cd7c:	f107 0314 	add.w	r3, r7, #20
 800cd80:	2200      	movs	r2, #0
 800cd82:	601a      	str	r2, [r3, #0]
 800cd84:	605a      	str	r2, [r3, #4]
 800cd86:	609a      	str	r2, [r3, #8]
 800cd88:	60da      	str	r2, [r3, #12]
 800cd8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	4a19      	ldr	r2, [pc, #100]	@ (800cdf8 <HAL_UART_MspInit+0x84>)
 800cd92:	4293      	cmp	r3, r2
 800cd94:	d12c      	bne.n	800cdf0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800cd96:	2300      	movs	r3, #0
 800cd98:	613b      	str	r3, [r7, #16]
 800cd9a:	4b18      	ldr	r3, [pc, #96]	@ (800cdfc <HAL_UART_MspInit+0x88>)
 800cd9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd9e:	4a17      	ldr	r2, [pc, #92]	@ (800cdfc <HAL_UART_MspInit+0x88>)
 800cda0:	f043 0310 	orr.w	r3, r3, #16
 800cda4:	6453      	str	r3, [r2, #68]	@ 0x44
 800cda6:	4b15      	ldr	r3, [pc, #84]	@ (800cdfc <HAL_UART_MspInit+0x88>)
 800cda8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cdaa:	f003 0310 	and.w	r3, r3, #16
 800cdae:	613b      	str	r3, [r7, #16]
 800cdb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	60fb      	str	r3, [r7, #12]
 800cdb6:	4b11      	ldr	r3, [pc, #68]	@ (800cdfc <HAL_UART_MspInit+0x88>)
 800cdb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdba:	4a10      	ldr	r2, [pc, #64]	@ (800cdfc <HAL_UART_MspInit+0x88>)
 800cdbc:	f043 0301 	orr.w	r3, r3, #1
 800cdc0:	6313      	str	r3, [r2, #48]	@ 0x30
 800cdc2:	4b0e      	ldr	r3, [pc, #56]	@ (800cdfc <HAL_UART_MspInit+0x88>)
 800cdc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdc6:	f003 0301 	and.w	r3, r3, #1
 800cdca:	60fb      	str	r3, [r7, #12]
 800cdcc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800cdce:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800cdd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cdd4:	2302      	movs	r3, #2
 800cdd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cddc:	2303      	movs	r3, #3
 800cdde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800cde0:	2307      	movs	r3, #7
 800cde2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cde4:	f107 0314 	add.w	r3, r7, #20
 800cde8:	4619      	mov	r1, r3
 800cdea:	4805      	ldr	r0, [pc, #20]	@ (800ce00 <HAL_UART_MspInit+0x8c>)
 800cdec:	f000 fe5c 	bl	800daa8 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800cdf0:	bf00      	nop
 800cdf2:	3728      	adds	r7, #40	@ 0x28
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}
 800cdf8:	40011000 	.word	0x40011000
 800cdfc:	40023800 	.word	0x40023800
 800ce00:	40020000 	.word	0x40020000

0800ce04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ce04:	b480      	push	{r7}
 800ce06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800ce08:	bf00      	nop
 800ce0a:	e7fd      	b.n	800ce08 <NMI_Handler+0x4>

0800ce0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ce10:	bf00      	nop
 800ce12:	e7fd      	b.n	800ce10 <HardFault_Handler+0x4>

0800ce14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ce14:	b480      	push	{r7}
 800ce16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ce18:	bf00      	nop
 800ce1a:	e7fd      	b.n	800ce18 <MemManage_Handler+0x4>

0800ce1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ce20:	bf00      	nop
 800ce22:	e7fd      	b.n	800ce20 <BusFault_Handler+0x4>

0800ce24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ce24:	b480      	push	{r7}
 800ce26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ce28:	bf00      	nop
 800ce2a:	e7fd      	b.n	800ce28 <UsageFault_Handler+0x4>

0800ce2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ce30:	bf00      	nop
 800ce32:	46bd      	mov	sp, r7
 800ce34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce38:	4770      	bx	lr

0800ce3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ce3a:	b480      	push	{r7}
 800ce3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ce3e:	bf00      	nop
 800ce40:	46bd      	mov	sp, r7
 800ce42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce46:	4770      	bx	lr

0800ce48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ce48:	b480      	push	{r7}
 800ce4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ce4c:	bf00      	nop
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce54:	4770      	bx	lr

0800ce56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ce56:	b580      	push	{r7, lr}
 800ce58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ce5a:	f000 f99b 	bl	800d194 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ce5e:	bf00      	nop
 800ce60:	bd80      	pop	{r7, pc}

0800ce62 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800ce62:	b480      	push	{r7}
 800ce64:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800ce66:	bf00      	nop
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6e:	4770      	bx	lr

0800ce70 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800ce74:	2004      	movs	r0, #4
 800ce76:	f000 ffcd 	bl	800de14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800ce7a:	bf00      	nop
 800ce7c:	bd80      	pop	{r7, pc}

0800ce7e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800ce7e:	b580      	push	{r7, lr}
 800ce80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800ce82:	2010      	movs	r0, #16
 800ce84:	f000 ffc6 	bl	800de14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800ce88:	bf00      	nop
 800ce8a:	bd80      	pop	{r7, pc}

0800ce8c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800ce90:	2040      	movs	r0, #64	@ 0x40
 800ce92:	f000 ffbf 	bl	800de14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800ce96:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800ce9a:	f000 ffbb 	bl	800de14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800ce9e:	bf00      	nop
 800cea0:	bd80      	pop	{r7, pc}
	...

0800cea4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800cea8:	4802      	ldr	r0, [pc, #8]	@ (800ceb4 <TIM2_IRQHandler+0x10>)
 800ceaa:	f003 f8ad 	bl	8010008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800ceae:	bf00      	nop
 800ceb0:	bd80      	pop	{r7, pc}
 800ceb2:	bf00      	nop
 800ceb4:	20000484 	.word	0x20000484

0800ceb8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800cebc:	4802      	ldr	r0, [pc, #8]	@ (800cec8 <TIM3_IRQHandler+0x10>)
 800cebe:	f003 f8a3 	bl	8010008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800cec2:	bf00      	nop
 800cec4:	bd80      	pop	{r7, pc}
 800cec6:	bf00      	nop
 800cec8:	200004cc 	.word	0x200004cc

0800cecc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800ced0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800ced4:	f000 ff9e 	bl	800de14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800ced8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800cedc:	f000 ff9a 	bl	800de14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800cee0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800cee4:	f000 ff96 	bl	800de14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800cee8:	bf00      	nop
 800ceea:	bd80      	pop	{r7, pc}

0800ceec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800ceec:	b480      	push	{r7}
 800ceee:	af00      	add	r7, sp, #0
  return 1;
 800cef0:	2301      	movs	r3, #1
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	46bd      	mov	sp, r7
 800cef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefa:	4770      	bx	lr

0800cefc <_kill>:

int _kill(int pid, int sig)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b082      	sub	sp, #8
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
 800cf04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800cf06:	f005 f98f 	bl	8012228 <__errno>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	2216      	movs	r2, #22
 800cf0e:	601a      	str	r2, [r3, #0]
  return -1;
 800cf10:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	3708      	adds	r7, #8
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}

0800cf1c <_exit>:

void _exit (int status)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b082      	sub	sp, #8
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800cf24:	f04f 31ff 	mov.w	r1, #4294967295
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f7ff ffe7 	bl	800cefc <_kill>
  while (1) {}    /* Make sure we hang here */
 800cf2e:	bf00      	nop
 800cf30:	e7fd      	b.n	800cf2e <_exit+0x12>

0800cf32 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800cf32:	b580      	push	{r7, lr}
 800cf34:	b086      	sub	sp, #24
 800cf36:	af00      	add	r7, sp, #0
 800cf38:	60f8      	str	r0, [r7, #12]
 800cf3a:	60b9      	str	r1, [r7, #8]
 800cf3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cf3e:	2300      	movs	r3, #0
 800cf40:	617b      	str	r3, [r7, #20]
 800cf42:	e00a      	b.n	800cf5a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800cf44:	f3af 8000 	nop.w
 800cf48:	4601      	mov	r1, r0
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	1c5a      	adds	r2, r3, #1
 800cf4e:	60ba      	str	r2, [r7, #8]
 800cf50:	b2ca      	uxtb	r2, r1
 800cf52:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	3301      	adds	r3, #1
 800cf58:	617b      	str	r3, [r7, #20]
 800cf5a:	697a      	ldr	r2, [r7, #20]
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	dbf0      	blt.n	800cf44 <_read+0x12>
  }

  return len;
 800cf62:	687b      	ldr	r3, [r7, #4]
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3718      	adds	r7, #24
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}

0800cf6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b086      	sub	sp, #24
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	60f8      	str	r0, [r7, #12]
 800cf74:	60b9      	str	r1, [r7, #8]
 800cf76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cf78:	2300      	movs	r3, #0
 800cf7a:	617b      	str	r3, [r7, #20]
 800cf7c:	e009      	b.n	800cf92 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	1c5a      	adds	r2, r3, #1
 800cf82:	60ba      	str	r2, [r7, #8]
 800cf84:	781b      	ldrb	r3, [r3, #0]
 800cf86:	4618      	mov	r0, r3
 800cf88:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	3301      	adds	r3, #1
 800cf90:	617b      	str	r3, [r7, #20]
 800cf92:	697a      	ldr	r2, [r7, #20]
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	429a      	cmp	r2, r3
 800cf98:	dbf1      	blt.n	800cf7e <_write+0x12>
  }
  return len;
 800cf9a:	687b      	ldr	r3, [r7, #4]
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	3718      	adds	r7, #24
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}

0800cfa4 <_close>:

int _close(int file)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b083      	sub	sp, #12
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800cfac:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	370c      	adds	r7, #12
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfba:	4770      	bx	lr

0800cfbc <_fstat>:


int _fstat(int file, struct stat *st)
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b083      	sub	sp, #12
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
 800cfc4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800cfcc:	605a      	str	r2, [r3, #4]
  return 0;
 800cfce:	2300      	movs	r3, #0
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	370c      	adds	r7, #12
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfda:	4770      	bx	lr

0800cfdc <_isatty>:

int _isatty(int file)
{
 800cfdc:	b480      	push	{r7}
 800cfde:	b083      	sub	sp, #12
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800cfe4:	2301      	movs	r3, #1
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	370c      	adds	r7, #12
 800cfea:	46bd      	mov	sp, r7
 800cfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff0:	4770      	bx	lr

0800cff2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800cff2:	b480      	push	{r7}
 800cff4:	b085      	sub	sp, #20
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	60f8      	str	r0, [r7, #12]
 800cffa:	60b9      	str	r1, [r7, #8]
 800cffc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800cffe:	2300      	movs	r3, #0
}
 800d000:	4618      	mov	r0, r3
 800d002:	3714      	adds	r7, #20
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr

0800d00c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b086      	sub	sp, #24
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d014:	4a14      	ldr	r2, [pc, #80]	@ (800d068 <_sbrk+0x5c>)
 800d016:	4b15      	ldr	r3, [pc, #84]	@ (800d06c <_sbrk+0x60>)
 800d018:	1ad3      	subs	r3, r2, r3
 800d01a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d020:	4b13      	ldr	r3, [pc, #76]	@ (800d070 <_sbrk+0x64>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d102      	bne.n	800d02e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800d028:	4b11      	ldr	r3, [pc, #68]	@ (800d070 <_sbrk+0x64>)
 800d02a:	4a12      	ldr	r2, [pc, #72]	@ (800d074 <_sbrk+0x68>)
 800d02c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d02e:	4b10      	ldr	r3, [pc, #64]	@ (800d070 <_sbrk+0x64>)
 800d030:	681a      	ldr	r2, [r3, #0]
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	4413      	add	r3, r2
 800d036:	693a      	ldr	r2, [r7, #16]
 800d038:	429a      	cmp	r2, r3
 800d03a:	d207      	bcs.n	800d04c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800d03c:	f005 f8f4 	bl	8012228 <__errno>
 800d040:	4603      	mov	r3, r0
 800d042:	220c      	movs	r2, #12
 800d044:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800d046:	f04f 33ff 	mov.w	r3, #4294967295
 800d04a:	e009      	b.n	800d060 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800d04c:	4b08      	ldr	r3, [pc, #32]	@ (800d070 <_sbrk+0x64>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800d052:	4b07      	ldr	r3, [pc, #28]	@ (800d070 <_sbrk+0x64>)
 800d054:	681a      	ldr	r2, [r3, #0]
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	4413      	add	r3, r2
 800d05a:	4a05      	ldr	r2, [pc, #20]	@ (800d070 <_sbrk+0x64>)
 800d05c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800d05e:	68fb      	ldr	r3, [r7, #12]
}
 800d060:	4618      	mov	r0, r3
 800d062:	3718      	adds	r7, #24
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}
 800d068:	20020000 	.word	0x20020000
 800d06c:	00000400 	.word	0x00000400
 800d070:	200005b4 	.word	0x200005b4
 800d074:	20000710 	.word	0x20000710

0800d078 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d078:	b480      	push	{r7}
 800d07a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d07c:	4b06      	ldr	r3, [pc, #24]	@ (800d098 <SystemInit+0x20>)
 800d07e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d082:	4a05      	ldr	r2, [pc, #20]	@ (800d098 <SystemInit+0x20>)
 800d084:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d088:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800d08c:	bf00      	nop
 800d08e:	46bd      	mov	sp, r7
 800d090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d094:	4770      	bx	lr
 800d096:	bf00      	nop
 800d098:	e000ed00 	.word	0xe000ed00

0800d09c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800d09c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800d0d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800d0a0:	f7ff ffea 	bl	800d078 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800d0a4:	480c      	ldr	r0, [pc, #48]	@ (800d0d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800d0a6:	490d      	ldr	r1, [pc, #52]	@ (800d0dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800d0a8:	4a0d      	ldr	r2, [pc, #52]	@ (800d0e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800d0aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800d0ac:	e002      	b.n	800d0b4 <LoopCopyDataInit>

0800d0ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800d0ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800d0b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800d0b2:	3304      	adds	r3, #4

0800d0b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800d0b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800d0b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800d0b8:	d3f9      	bcc.n	800d0ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800d0ba:	4a0a      	ldr	r2, [pc, #40]	@ (800d0e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800d0bc:	4c0a      	ldr	r4, [pc, #40]	@ (800d0e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800d0be:	2300      	movs	r3, #0
  b LoopFillZerobss
 800d0c0:	e001      	b.n	800d0c6 <LoopFillZerobss>

0800d0c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800d0c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d0c4:	3204      	adds	r2, #4

0800d0c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800d0c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800d0c8:	d3fb      	bcc.n	800d0c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800d0ca:	f005 f8b3 	bl	8012234 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d0ce:	f7ff f905 	bl	800c2dc <main>
  bx  lr    
 800d0d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800d0d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800d0d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800d0dc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800d0e0:	08015ee8 	.word	0x08015ee8
  ldr r2, =_sbss
 800d0e4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800d0e8:	2000070c 	.word	0x2000070c

0800d0ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d0ec:	e7fe      	b.n	800d0ec <ADC_IRQHandler>
	...

0800d0f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800d0f4:	4b0e      	ldr	r3, [pc, #56]	@ (800d130 <HAL_Init+0x40>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	4a0d      	ldr	r2, [pc, #52]	@ (800d130 <HAL_Init+0x40>)
 800d0fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d0fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800d100:	4b0b      	ldr	r3, [pc, #44]	@ (800d130 <HAL_Init+0x40>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	4a0a      	ldr	r2, [pc, #40]	@ (800d130 <HAL_Init+0x40>)
 800d106:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d10a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800d10c:	4b08      	ldr	r3, [pc, #32]	@ (800d130 <HAL_Init+0x40>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	4a07      	ldr	r2, [pc, #28]	@ (800d130 <HAL_Init+0x40>)
 800d112:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d116:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d118:	2003      	movs	r0, #3
 800d11a:	f000 fc83 	bl	800da24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800d11e:	200f      	movs	r0, #15
 800d120:	f000 f808 	bl	800d134 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800d124:	f7ff fca8 	bl	800ca78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800d128:	2300      	movs	r3, #0
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	bd80      	pop	{r7, pc}
 800d12e:	bf00      	nop
 800d130:	40023c00 	.word	0x40023c00

0800d134 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b082      	sub	sp, #8
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800d13c:	4b12      	ldr	r3, [pc, #72]	@ (800d188 <HAL_InitTick+0x54>)
 800d13e:	681a      	ldr	r2, [r3, #0]
 800d140:	4b12      	ldr	r3, [pc, #72]	@ (800d18c <HAL_InitTick+0x58>)
 800d142:	781b      	ldrb	r3, [r3, #0]
 800d144:	4619      	mov	r1, r3
 800d146:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d14a:	fbb3 f3f1 	udiv	r3, r3, r1
 800d14e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d152:	4618      	mov	r0, r3
 800d154:	f000 fc9b 	bl	800da8e <HAL_SYSTICK_Config>
 800d158:	4603      	mov	r3, r0
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d001      	beq.n	800d162 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800d15e:	2301      	movs	r3, #1
 800d160:	e00e      	b.n	800d180 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	2b0f      	cmp	r3, #15
 800d166:	d80a      	bhi.n	800d17e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800d168:	2200      	movs	r2, #0
 800d16a:	6879      	ldr	r1, [r7, #4]
 800d16c:	f04f 30ff 	mov.w	r0, #4294967295
 800d170:	f000 fc63 	bl	800da3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800d174:	4a06      	ldr	r2, [pc, #24]	@ (800d190 <HAL_InitTick+0x5c>)
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800d17a:	2300      	movs	r3, #0
 800d17c:	e000      	b.n	800d180 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800d17e:	2301      	movs	r3, #1
}
 800d180:	4618      	mov	r0, r3
 800d182:	3708      	adds	r7, #8
 800d184:	46bd      	mov	sp, r7
 800d186:	bd80      	pop	{r7, pc}
 800d188:	20000004 	.word	0x20000004
 800d18c:	2000000c 	.word	0x2000000c
 800d190:	20000008 	.word	0x20000008

0800d194 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800d194:	b480      	push	{r7}
 800d196:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800d198:	4b06      	ldr	r3, [pc, #24]	@ (800d1b4 <HAL_IncTick+0x20>)
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	461a      	mov	r2, r3
 800d19e:	4b06      	ldr	r3, [pc, #24]	@ (800d1b8 <HAL_IncTick+0x24>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	4413      	add	r3, r2
 800d1a4:	4a04      	ldr	r2, [pc, #16]	@ (800d1b8 <HAL_IncTick+0x24>)
 800d1a6:	6013      	str	r3, [r2, #0]
}
 800d1a8:	bf00      	nop
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b0:	4770      	bx	lr
 800d1b2:	bf00      	nop
 800d1b4:	2000000c 	.word	0x2000000c
 800d1b8:	200005b8 	.word	0x200005b8

0800d1bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800d1bc:	b480      	push	{r7}
 800d1be:	af00      	add	r7, sp, #0
  return uwTick;
 800d1c0:	4b03      	ldr	r3, [pc, #12]	@ (800d1d0 <HAL_GetTick+0x14>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1cc:	4770      	bx	lr
 800d1ce:	bf00      	nop
 800d1d0:	200005b8 	.word	0x200005b8

0800d1d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b084      	sub	sp, #16
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800d1dc:	f7ff ffee 	bl	800d1bc <HAL_GetTick>
 800d1e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1ec:	d005      	beq.n	800d1fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800d1ee:	4b0a      	ldr	r3, [pc, #40]	@ (800d218 <HAL_Delay+0x44>)
 800d1f0:	781b      	ldrb	r3, [r3, #0]
 800d1f2:	461a      	mov	r2, r3
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	4413      	add	r3, r2
 800d1f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800d1fa:	bf00      	nop
 800d1fc:	f7ff ffde 	bl	800d1bc <HAL_GetTick>
 800d200:	4602      	mov	r2, r0
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	1ad3      	subs	r3, r2, r3
 800d206:	68fa      	ldr	r2, [r7, #12]
 800d208:	429a      	cmp	r2, r3
 800d20a:	d8f7      	bhi.n	800d1fc <HAL_Delay+0x28>
  {
  }
}
 800d20c:	bf00      	nop
 800d20e:	bf00      	nop
 800d210:	3710      	adds	r7, #16
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}
 800d216:	bf00      	nop
 800d218:	2000000c 	.word	0x2000000c

0800d21c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b084      	sub	sp, #16
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800d224:	2300      	movs	r3, #0
 800d226:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d101      	bne.n	800d232 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800d22e:	2301      	movs	r3, #1
 800d230:	e033      	b.n	800d29a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d236:	2b00      	cmp	r3, #0
 800d238:	d109      	bne.n	800d24e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	f7ff fc4a 	bl	800cad4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2200      	movs	r2, #0
 800d244:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2200      	movs	r2, #0
 800d24a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d252:	f003 0310 	and.w	r3, r3, #16
 800d256:	2b00      	cmp	r3, #0
 800d258:	d118      	bne.n	800d28c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d25e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800d262:	f023 0302 	bic.w	r3, r3, #2
 800d266:	f043 0202 	orr.w	r2, r3, #2
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f000 fa0c 	bl	800d68c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2200      	movs	r2, #0
 800d278:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d27e:	f023 0303 	bic.w	r3, r3, #3
 800d282:	f043 0201 	orr.w	r2, r3, #1
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	641a      	str	r2, [r3, #64]	@ 0x40
 800d28a:	e001      	b.n	800d290 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800d28c:	2301      	movs	r3, #1
 800d28e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2200      	movs	r2, #0
 800d294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800d298:	7bfb      	ldrb	r3, [r7, #15]
}
 800d29a:	4618      	mov	r0, r3
 800d29c:	3710      	adds	r7, #16
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}
	...

0800d2a4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800d2a4:	b480      	push	{r7}
 800d2a6:	b085      	sub	sp, #20
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d2b6:	2b01      	cmp	r3, #1
 800d2b8:	d101      	bne.n	800d2be <HAL_ADC_Start+0x1a>
 800d2ba:	2302      	movs	r3, #2
 800d2bc:	e097      	b.n	800d3ee <HAL_ADC_Start+0x14a>
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2201      	movs	r2, #1
 800d2c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	689b      	ldr	r3, [r3, #8]
 800d2cc:	f003 0301 	and.w	r3, r3, #1
 800d2d0:	2b01      	cmp	r3, #1
 800d2d2:	d018      	beq.n	800d306 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	689a      	ldr	r2, [r3, #8]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	f042 0201 	orr.w	r2, r2, #1
 800d2e2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800d2e4:	4b45      	ldr	r3, [pc, #276]	@ (800d3fc <HAL_ADC_Start+0x158>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	4a45      	ldr	r2, [pc, #276]	@ (800d400 <HAL_ADC_Start+0x15c>)
 800d2ea:	fba2 2303 	umull	r2, r3, r2, r3
 800d2ee:	0c9a      	lsrs	r2, r3, #18
 800d2f0:	4613      	mov	r3, r2
 800d2f2:	005b      	lsls	r3, r3, #1
 800d2f4:	4413      	add	r3, r2
 800d2f6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800d2f8:	e002      	b.n	800d300 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	3b01      	subs	r3, #1
 800d2fe:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d1f9      	bne.n	800d2fa <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	689b      	ldr	r3, [r3, #8]
 800d30c:	f003 0301 	and.w	r3, r3, #1
 800d310:	2b01      	cmp	r3, #1
 800d312:	d15f      	bne.n	800d3d4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d318:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800d31c:	f023 0301 	bic.w	r3, r3, #1
 800d320:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	685b      	ldr	r3, [r3, #4]
 800d32e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d332:	2b00      	cmp	r3, #0
 800d334:	d007      	beq.n	800d346 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d33a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800d33e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d34a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d34e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d352:	d106      	bne.n	800d362 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d358:	f023 0206 	bic.w	r2, r3, #6
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	645a      	str	r2, [r3, #68]	@ 0x44
 800d360:	e002      	b.n	800d368 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2200      	movs	r2, #0
 800d366:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2200      	movs	r2, #0
 800d36c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800d370:	4b24      	ldr	r3, [pc, #144]	@ (800d404 <HAL_ADC_Start+0x160>)
 800d372:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800d37c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	685b      	ldr	r3, [r3, #4]
 800d382:	f003 031f 	and.w	r3, r3, #31
 800d386:	2b00      	cmp	r3, #0
 800d388:	d10f      	bne.n	800d3aa <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	689b      	ldr	r3, [r3, #8]
 800d390:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d394:	2b00      	cmp	r3, #0
 800d396:	d129      	bne.n	800d3ec <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	689a      	ldr	r2, [r3, #8]
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800d3a6:	609a      	str	r2, [r3, #8]
 800d3a8:	e020      	b.n	800d3ec <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	4a16      	ldr	r2, [pc, #88]	@ (800d408 <HAL_ADC_Start+0x164>)
 800d3b0:	4293      	cmp	r3, r2
 800d3b2:	d11b      	bne.n	800d3ec <HAL_ADC_Start+0x148>
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	689b      	ldr	r3, [r3, #8]
 800d3ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d114      	bne.n	800d3ec <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	689a      	ldr	r2, [r3, #8]
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800d3d0:	609a      	str	r2, [r3, #8]
 800d3d2:	e00b      	b.n	800d3ec <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3d8:	f043 0210 	orr.w	r2, r3, #16
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3e4:	f043 0201 	orr.w	r2, r3, #1
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800d3ec:	2300      	movs	r3, #0
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	3714      	adds	r7, #20
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f8:	4770      	bx	lr
 800d3fa:	bf00      	nop
 800d3fc:	20000004 	.word	0x20000004
 800d400:	431bde83 	.word	0x431bde83
 800d404:	40012300 	.word	0x40012300
 800d408:	40012000 	.word	0x40012000

0800d40c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800d40c:	b480      	push	{r7}
 800d40e:	b083      	sub	sp, #12
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	370c      	adds	r7, #12
 800d41e:	46bd      	mov	sp, r7
 800d420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d424:	4770      	bx	lr
	...

0800d428 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800d428:	b480      	push	{r7}
 800d42a:	b085      	sub	sp, #20
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
 800d430:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800d432:	2300      	movs	r3, #0
 800d434:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d43c:	2b01      	cmp	r3, #1
 800d43e:	d101      	bne.n	800d444 <HAL_ADC_ConfigChannel+0x1c>
 800d440:	2302      	movs	r3, #2
 800d442:	e113      	b.n	800d66c <HAL_ADC_ConfigChannel+0x244>
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2201      	movs	r2, #1
 800d448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	2b09      	cmp	r3, #9
 800d452:	d925      	bls.n	800d4a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	68d9      	ldr	r1, [r3, #12]
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	b29b      	uxth	r3, r3
 800d460:	461a      	mov	r2, r3
 800d462:	4613      	mov	r3, r2
 800d464:	005b      	lsls	r3, r3, #1
 800d466:	4413      	add	r3, r2
 800d468:	3b1e      	subs	r3, #30
 800d46a:	2207      	movs	r2, #7
 800d46c:	fa02 f303 	lsl.w	r3, r2, r3
 800d470:	43da      	mvns	r2, r3
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	400a      	ands	r2, r1
 800d478:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	68d9      	ldr	r1, [r3, #12]
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	689a      	ldr	r2, [r3, #8]
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	b29b      	uxth	r3, r3
 800d48a:	4618      	mov	r0, r3
 800d48c:	4603      	mov	r3, r0
 800d48e:	005b      	lsls	r3, r3, #1
 800d490:	4403      	add	r3, r0
 800d492:	3b1e      	subs	r3, #30
 800d494:	409a      	lsls	r2, r3
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	430a      	orrs	r2, r1
 800d49c:	60da      	str	r2, [r3, #12]
 800d49e:	e022      	b.n	800d4e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	6919      	ldr	r1, [r3, #16]
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	b29b      	uxth	r3, r3
 800d4ac:	461a      	mov	r2, r3
 800d4ae:	4613      	mov	r3, r2
 800d4b0:	005b      	lsls	r3, r3, #1
 800d4b2:	4413      	add	r3, r2
 800d4b4:	2207      	movs	r2, #7
 800d4b6:	fa02 f303 	lsl.w	r3, r2, r3
 800d4ba:	43da      	mvns	r2, r3
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	400a      	ands	r2, r1
 800d4c2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	6919      	ldr	r1, [r3, #16]
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	689a      	ldr	r2, [r3, #8]
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	b29b      	uxth	r3, r3
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	005b      	lsls	r3, r3, #1
 800d4da:	4403      	add	r3, r0
 800d4dc:	409a      	lsls	r2, r3
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	430a      	orrs	r2, r1
 800d4e4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	685b      	ldr	r3, [r3, #4]
 800d4ea:	2b06      	cmp	r3, #6
 800d4ec:	d824      	bhi.n	800d538 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	685a      	ldr	r2, [r3, #4]
 800d4f8:	4613      	mov	r3, r2
 800d4fa:	009b      	lsls	r3, r3, #2
 800d4fc:	4413      	add	r3, r2
 800d4fe:	3b05      	subs	r3, #5
 800d500:	221f      	movs	r2, #31
 800d502:	fa02 f303 	lsl.w	r3, r2, r3
 800d506:	43da      	mvns	r2, r3
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	400a      	ands	r2, r1
 800d50e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	b29b      	uxth	r3, r3
 800d51c:	4618      	mov	r0, r3
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	685a      	ldr	r2, [r3, #4]
 800d522:	4613      	mov	r3, r2
 800d524:	009b      	lsls	r3, r3, #2
 800d526:	4413      	add	r3, r2
 800d528:	3b05      	subs	r3, #5
 800d52a:	fa00 f203 	lsl.w	r2, r0, r3
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	430a      	orrs	r2, r1
 800d534:	635a      	str	r2, [r3, #52]	@ 0x34
 800d536:	e04c      	b.n	800d5d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	685b      	ldr	r3, [r3, #4]
 800d53c:	2b0c      	cmp	r3, #12
 800d53e:	d824      	bhi.n	800d58a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	685a      	ldr	r2, [r3, #4]
 800d54a:	4613      	mov	r3, r2
 800d54c:	009b      	lsls	r3, r3, #2
 800d54e:	4413      	add	r3, r2
 800d550:	3b23      	subs	r3, #35	@ 0x23
 800d552:	221f      	movs	r2, #31
 800d554:	fa02 f303 	lsl.w	r3, r2, r3
 800d558:	43da      	mvns	r2, r3
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	400a      	ands	r2, r1
 800d560:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	b29b      	uxth	r3, r3
 800d56e:	4618      	mov	r0, r3
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	685a      	ldr	r2, [r3, #4]
 800d574:	4613      	mov	r3, r2
 800d576:	009b      	lsls	r3, r3, #2
 800d578:	4413      	add	r3, r2
 800d57a:	3b23      	subs	r3, #35	@ 0x23
 800d57c:	fa00 f203 	lsl.w	r2, r0, r3
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	430a      	orrs	r2, r1
 800d586:	631a      	str	r2, [r3, #48]	@ 0x30
 800d588:	e023      	b.n	800d5d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	685a      	ldr	r2, [r3, #4]
 800d594:	4613      	mov	r3, r2
 800d596:	009b      	lsls	r3, r3, #2
 800d598:	4413      	add	r3, r2
 800d59a:	3b41      	subs	r3, #65	@ 0x41
 800d59c:	221f      	movs	r2, #31
 800d59e:	fa02 f303 	lsl.w	r3, r2, r3
 800d5a2:	43da      	mvns	r2, r3
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	400a      	ands	r2, r1
 800d5aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	b29b      	uxth	r3, r3
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	683b      	ldr	r3, [r7, #0]
 800d5bc:	685a      	ldr	r2, [r3, #4]
 800d5be:	4613      	mov	r3, r2
 800d5c0:	009b      	lsls	r3, r3, #2
 800d5c2:	4413      	add	r3, r2
 800d5c4:	3b41      	subs	r3, #65	@ 0x41
 800d5c6:	fa00 f203 	lsl.w	r2, r0, r3
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	430a      	orrs	r2, r1
 800d5d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800d5d2:	4b29      	ldr	r3, [pc, #164]	@ (800d678 <HAL_ADC_ConfigChannel+0x250>)
 800d5d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	4a28      	ldr	r2, [pc, #160]	@ (800d67c <HAL_ADC_ConfigChannel+0x254>)
 800d5dc:	4293      	cmp	r3, r2
 800d5de:	d10f      	bne.n	800d600 <HAL_ADC_ConfigChannel+0x1d8>
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	2b12      	cmp	r3, #18
 800d5e6:	d10b      	bne.n	800d600 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	685b      	ldr	r3, [r3, #4]
 800d5ec:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	685b      	ldr	r3, [r3, #4]
 800d5f8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	4a1d      	ldr	r2, [pc, #116]	@ (800d67c <HAL_ADC_ConfigChannel+0x254>)
 800d606:	4293      	cmp	r3, r2
 800d608:	d12b      	bne.n	800d662 <HAL_ADC_ConfigChannel+0x23a>
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	4a1c      	ldr	r2, [pc, #112]	@ (800d680 <HAL_ADC_ConfigChannel+0x258>)
 800d610:	4293      	cmp	r3, r2
 800d612:	d003      	beq.n	800d61c <HAL_ADC_ConfigChannel+0x1f4>
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	2b11      	cmp	r3, #17
 800d61a:	d122      	bne.n	800d662 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	685b      	ldr	r3, [r3, #4]
 800d620:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	685b      	ldr	r3, [r3, #4]
 800d62c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	4a11      	ldr	r2, [pc, #68]	@ (800d680 <HAL_ADC_ConfigChannel+0x258>)
 800d63a:	4293      	cmp	r3, r2
 800d63c:	d111      	bne.n	800d662 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800d63e:	4b11      	ldr	r3, [pc, #68]	@ (800d684 <HAL_ADC_ConfigChannel+0x25c>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	4a11      	ldr	r2, [pc, #68]	@ (800d688 <HAL_ADC_ConfigChannel+0x260>)
 800d644:	fba2 2303 	umull	r2, r3, r2, r3
 800d648:	0c9a      	lsrs	r2, r3, #18
 800d64a:	4613      	mov	r3, r2
 800d64c:	009b      	lsls	r3, r3, #2
 800d64e:	4413      	add	r3, r2
 800d650:	005b      	lsls	r3, r3, #1
 800d652:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800d654:	e002      	b.n	800d65c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	3b01      	subs	r3, #1
 800d65a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d1f9      	bne.n	800d656 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2200      	movs	r2, #0
 800d666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800d66a:	2300      	movs	r3, #0
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	3714      	adds	r7, #20
 800d670:	46bd      	mov	sp, r7
 800d672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d676:	4770      	bx	lr
 800d678:	40012300 	.word	0x40012300
 800d67c:	40012000 	.word	0x40012000
 800d680:	10000012 	.word	0x10000012
 800d684:	20000004 	.word	0x20000004
 800d688:	431bde83 	.word	0x431bde83

0800d68c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800d68c:	b480      	push	{r7}
 800d68e:	b085      	sub	sp, #20
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800d694:	4b79      	ldr	r3, [pc, #484]	@ (800d87c <ADC_Init+0x1f0>)
 800d696:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	685b      	ldr	r3, [r3, #4]
 800d69c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	685a      	ldr	r2, [r3, #4]
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	685b      	ldr	r3, [r3, #4]
 800d6ac:	431a      	orrs	r2, r3
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	685a      	ldr	r2, [r3, #4]
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d6c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	6859      	ldr	r1, [r3, #4]
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	691b      	ldr	r3, [r3, #16]
 800d6cc:	021a      	lsls	r2, r3, #8
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	430a      	orrs	r2, r1
 800d6d4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	685a      	ldr	r2, [r3, #4]
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800d6e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	6859      	ldr	r1, [r3, #4]
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	689a      	ldr	r2, [r3, #8]
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	430a      	orrs	r2, r1
 800d6f6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	689a      	ldr	r2, [r3, #8]
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d706:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	6899      	ldr	r1, [r3, #8]
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	68da      	ldr	r2, [r3, #12]
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	430a      	orrs	r2, r1
 800d718:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d71e:	4a58      	ldr	r2, [pc, #352]	@ (800d880 <ADC_Init+0x1f4>)
 800d720:	4293      	cmp	r3, r2
 800d722:	d022      	beq.n	800d76a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	689a      	ldr	r2, [r3, #8]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800d732:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	6899      	ldr	r1, [r3, #8]
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	430a      	orrs	r2, r1
 800d744:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	689a      	ldr	r2, [r3, #8]
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800d754:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	6899      	ldr	r1, [r3, #8]
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	430a      	orrs	r2, r1
 800d766:	609a      	str	r2, [r3, #8]
 800d768:	e00f      	b.n	800d78a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	689a      	ldr	r2, [r3, #8]
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800d778:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	689a      	ldr	r2, [r3, #8]
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800d788:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	689a      	ldr	r2, [r3, #8]
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	f022 0202 	bic.w	r2, r2, #2
 800d798:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	6899      	ldr	r1, [r3, #8]
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	7e1b      	ldrb	r3, [r3, #24]
 800d7a4:	005a      	lsls	r2, r3, #1
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	430a      	orrs	r2, r1
 800d7ac:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d01b      	beq.n	800d7f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	685a      	ldr	r2, [r3, #4]
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d7c6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	685a      	ldr	r2, [r3, #4]
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800d7d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	6859      	ldr	r1, [r3, #4]
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7e2:	3b01      	subs	r3, #1
 800d7e4:	035a      	lsls	r2, r3, #13
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	430a      	orrs	r2, r1
 800d7ec:	605a      	str	r2, [r3, #4]
 800d7ee:	e007      	b.n	800d800 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	685a      	ldr	r2, [r3, #4]
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d7fe:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800d80e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	69db      	ldr	r3, [r3, #28]
 800d81a:	3b01      	subs	r3, #1
 800d81c:	051a      	lsls	r2, r3, #20
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	430a      	orrs	r2, r1
 800d824:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	689a      	ldr	r2, [r3, #8]
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800d834:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	6899      	ldr	r1, [r3, #8]
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d842:	025a      	lsls	r2, r3, #9
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	430a      	orrs	r2, r1
 800d84a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	689a      	ldr	r2, [r3, #8]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d85a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	6899      	ldr	r1, [r3, #8]
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	695b      	ldr	r3, [r3, #20]
 800d866:	029a      	lsls	r2, r3, #10
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	430a      	orrs	r2, r1
 800d86e:	609a      	str	r2, [r3, #8]
}
 800d870:	bf00      	nop
 800d872:	3714      	adds	r7, #20
 800d874:	46bd      	mov	sp, r7
 800d876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87a:	4770      	bx	lr
 800d87c:	40012300 	.word	0x40012300
 800d880:	0f000001 	.word	0x0f000001

0800d884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d884:	b480      	push	{r7}
 800d886:	b085      	sub	sp, #20
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f003 0307 	and.w	r3, r3, #7
 800d892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d894:	4b0c      	ldr	r3, [pc, #48]	@ (800d8c8 <__NVIC_SetPriorityGrouping+0x44>)
 800d896:	68db      	ldr	r3, [r3, #12]
 800d898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d89a:	68ba      	ldr	r2, [r7, #8]
 800d89c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800d8a0:	4013      	ands	r3, r2
 800d8a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800d8ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800d8b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d8b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800d8b6:	4a04      	ldr	r2, [pc, #16]	@ (800d8c8 <__NVIC_SetPriorityGrouping+0x44>)
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	60d3      	str	r3, [r2, #12]
}
 800d8bc:	bf00      	nop
 800d8be:	3714      	adds	r7, #20
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c6:	4770      	bx	lr
 800d8c8:	e000ed00 	.word	0xe000ed00

0800d8cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800d8cc:	b480      	push	{r7}
 800d8ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d8d0:	4b04      	ldr	r3, [pc, #16]	@ (800d8e4 <__NVIC_GetPriorityGrouping+0x18>)
 800d8d2:	68db      	ldr	r3, [r3, #12]
 800d8d4:	0a1b      	lsrs	r3, r3, #8
 800d8d6:	f003 0307 	and.w	r3, r3, #7
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e2:	4770      	bx	lr
 800d8e4:	e000ed00 	.word	0xe000ed00

0800d8e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d8e8:	b480      	push	{r7}
 800d8ea:	b083      	sub	sp, #12
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d8f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	db0b      	blt.n	800d912 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d8fa:	79fb      	ldrb	r3, [r7, #7]
 800d8fc:	f003 021f 	and.w	r2, r3, #31
 800d900:	4907      	ldr	r1, [pc, #28]	@ (800d920 <__NVIC_EnableIRQ+0x38>)
 800d902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d906:	095b      	lsrs	r3, r3, #5
 800d908:	2001      	movs	r0, #1
 800d90a:	fa00 f202 	lsl.w	r2, r0, r2
 800d90e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800d912:	bf00      	nop
 800d914:	370c      	adds	r7, #12
 800d916:	46bd      	mov	sp, r7
 800d918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91c:	4770      	bx	lr
 800d91e:	bf00      	nop
 800d920:	e000e100 	.word	0xe000e100

0800d924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800d924:	b480      	push	{r7}
 800d926:	b083      	sub	sp, #12
 800d928:	af00      	add	r7, sp, #0
 800d92a:	4603      	mov	r3, r0
 800d92c:	6039      	str	r1, [r7, #0]
 800d92e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d934:	2b00      	cmp	r3, #0
 800d936:	db0a      	blt.n	800d94e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	b2da      	uxtb	r2, r3
 800d93c:	490c      	ldr	r1, [pc, #48]	@ (800d970 <__NVIC_SetPriority+0x4c>)
 800d93e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d942:	0112      	lsls	r2, r2, #4
 800d944:	b2d2      	uxtb	r2, r2
 800d946:	440b      	add	r3, r1
 800d948:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800d94c:	e00a      	b.n	800d964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	b2da      	uxtb	r2, r3
 800d952:	4908      	ldr	r1, [pc, #32]	@ (800d974 <__NVIC_SetPriority+0x50>)
 800d954:	79fb      	ldrb	r3, [r7, #7]
 800d956:	f003 030f 	and.w	r3, r3, #15
 800d95a:	3b04      	subs	r3, #4
 800d95c:	0112      	lsls	r2, r2, #4
 800d95e:	b2d2      	uxtb	r2, r2
 800d960:	440b      	add	r3, r1
 800d962:	761a      	strb	r2, [r3, #24]
}
 800d964:	bf00      	nop
 800d966:	370c      	adds	r7, #12
 800d968:	46bd      	mov	sp, r7
 800d96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96e:	4770      	bx	lr
 800d970:	e000e100 	.word	0xe000e100
 800d974:	e000ed00 	.word	0xe000ed00

0800d978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d978:	b480      	push	{r7}
 800d97a:	b089      	sub	sp, #36	@ 0x24
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	60f8      	str	r0, [r7, #12]
 800d980:	60b9      	str	r1, [r7, #8]
 800d982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	f003 0307 	and.w	r3, r3, #7
 800d98a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d98c:	69fb      	ldr	r3, [r7, #28]
 800d98e:	f1c3 0307 	rsb	r3, r3, #7
 800d992:	2b04      	cmp	r3, #4
 800d994:	bf28      	it	cs
 800d996:	2304      	movcs	r3, #4
 800d998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d99a:	69fb      	ldr	r3, [r7, #28]
 800d99c:	3304      	adds	r3, #4
 800d99e:	2b06      	cmp	r3, #6
 800d9a0:	d902      	bls.n	800d9a8 <NVIC_EncodePriority+0x30>
 800d9a2:	69fb      	ldr	r3, [r7, #28]
 800d9a4:	3b03      	subs	r3, #3
 800d9a6:	e000      	b.n	800d9aa <NVIC_EncodePriority+0x32>
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d9ac:	f04f 32ff 	mov.w	r2, #4294967295
 800d9b0:	69bb      	ldr	r3, [r7, #24]
 800d9b2:	fa02 f303 	lsl.w	r3, r2, r3
 800d9b6:	43da      	mvns	r2, r3
 800d9b8:	68bb      	ldr	r3, [r7, #8]
 800d9ba:	401a      	ands	r2, r3
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d9c0:	f04f 31ff 	mov.w	r1, #4294967295
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	fa01 f303 	lsl.w	r3, r1, r3
 800d9ca:	43d9      	mvns	r1, r3
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d9d0:	4313      	orrs	r3, r2
         );
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3724      	adds	r7, #36	@ 0x24
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9dc:	4770      	bx	lr
	...

0800d9e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b082      	sub	sp, #8
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	3b01      	subs	r3, #1
 800d9ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d9f0:	d301      	bcc.n	800d9f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	e00f      	b.n	800da16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800d9f6:	4a0a      	ldr	r2, [pc, #40]	@ (800da20 <SysTick_Config+0x40>)
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	3b01      	subs	r3, #1
 800d9fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800d9fe:	210f      	movs	r1, #15
 800da00:	f04f 30ff 	mov.w	r0, #4294967295
 800da04:	f7ff ff8e 	bl	800d924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800da08:	4b05      	ldr	r3, [pc, #20]	@ (800da20 <SysTick_Config+0x40>)
 800da0a:	2200      	movs	r2, #0
 800da0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800da0e:	4b04      	ldr	r3, [pc, #16]	@ (800da20 <SysTick_Config+0x40>)
 800da10:	2207      	movs	r2, #7
 800da12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800da14:	2300      	movs	r3, #0
}
 800da16:	4618      	mov	r0, r3
 800da18:	3708      	adds	r7, #8
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}
 800da1e:	bf00      	nop
 800da20:	e000e010 	.word	0xe000e010

0800da24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b082      	sub	sp, #8
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800da2c:	6878      	ldr	r0, [r7, #4]
 800da2e:	f7ff ff29 	bl	800d884 <__NVIC_SetPriorityGrouping>
}
 800da32:	bf00      	nop
 800da34:	3708      	adds	r7, #8
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}

0800da3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800da3a:	b580      	push	{r7, lr}
 800da3c:	b086      	sub	sp, #24
 800da3e:	af00      	add	r7, sp, #0
 800da40:	4603      	mov	r3, r0
 800da42:	60b9      	str	r1, [r7, #8]
 800da44:	607a      	str	r2, [r7, #4]
 800da46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800da48:	2300      	movs	r3, #0
 800da4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800da4c:	f7ff ff3e 	bl	800d8cc <__NVIC_GetPriorityGrouping>
 800da50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800da52:	687a      	ldr	r2, [r7, #4]
 800da54:	68b9      	ldr	r1, [r7, #8]
 800da56:	6978      	ldr	r0, [r7, #20]
 800da58:	f7ff ff8e 	bl	800d978 <NVIC_EncodePriority>
 800da5c:	4602      	mov	r2, r0
 800da5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da62:	4611      	mov	r1, r2
 800da64:	4618      	mov	r0, r3
 800da66:	f7ff ff5d 	bl	800d924 <__NVIC_SetPriority>
}
 800da6a:	bf00      	nop
 800da6c:	3718      	adds	r7, #24
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd80      	pop	{r7, pc}

0800da72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800da72:	b580      	push	{r7, lr}
 800da74:	b082      	sub	sp, #8
 800da76:	af00      	add	r7, sp, #0
 800da78:	4603      	mov	r3, r0
 800da7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800da7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800da80:	4618      	mov	r0, r3
 800da82:	f7ff ff31 	bl	800d8e8 <__NVIC_EnableIRQ>
}
 800da86:	bf00      	nop
 800da88:	3708      	adds	r7, #8
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}

0800da8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800da8e:	b580      	push	{r7, lr}
 800da90:	b082      	sub	sp, #8
 800da92:	af00      	add	r7, sp, #0
 800da94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f7ff ffa2 	bl	800d9e0 <SysTick_Config>
 800da9c:	4603      	mov	r3, r0
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3708      	adds	r7, #8
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}
	...

0800daa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800daa8:	b480      	push	{r7}
 800daaa:	b089      	sub	sp, #36	@ 0x24
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800dab2:	2300      	movs	r3, #0
 800dab4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800dab6:	2300      	movs	r3, #0
 800dab8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800daba:	2300      	movs	r3, #0
 800dabc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800dabe:	2300      	movs	r3, #0
 800dac0:	61fb      	str	r3, [r7, #28]
 800dac2:	e159      	b.n	800dd78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800dac4:	2201      	movs	r2, #1
 800dac6:	69fb      	ldr	r3, [r7, #28]
 800dac8:	fa02 f303 	lsl.w	r3, r2, r3
 800dacc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	697a      	ldr	r2, [r7, #20]
 800dad4:	4013      	ands	r3, r2
 800dad6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800dad8:	693a      	ldr	r2, [r7, #16]
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	429a      	cmp	r2, r3
 800dade:	f040 8148 	bne.w	800dd72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	685b      	ldr	r3, [r3, #4]
 800dae6:	f003 0303 	and.w	r3, r3, #3
 800daea:	2b01      	cmp	r3, #1
 800daec:	d005      	beq.n	800dafa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800daee:	683b      	ldr	r3, [r7, #0]
 800daf0:	685b      	ldr	r3, [r3, #4]
 800daf2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800daf6:	2b02      	cmp	r3, #2
 800daf8:	d130      	bne.n	800db5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	689b      	ldr	r3, [r3, #8]
 800dafe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800db00:	69fb      	ldr	r3, [r7, #28]
 800db02:	005b      	lsls	r3, r3, #1
 800db04:	2203      	movs	r2, #3
 800db06:	fa02 f303 	lsl.w	r3, r2, r3
 800db0a:	43db      	mvns	r3, r3
 800db0c:	69ba      	ldr	r2, [r7, #24]
 800db0e:	4013      	ands	r3, r2
 800db10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	68da      	ldr	r2, [r3, #12]
 800db16:	69fb      	ldr	r3, [r7, #28]
 800db18:	005b      	lsls	r3, r3, #1
 800db1a:	fa02 f303 	lsl.w	r3, r2, r3
 800db1e:	69ba      	ldr	r2, [r7, #24]
 800db20:	4313      	orrs	r3, r2
 800db22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	69ba      	ldr	r2, [r7, #24]
 800db28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	685b      	ldr	r3, [r3, #4]
 800db2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800db30:	2201      	movs	r2, #1
 800db32:	69fb      	ldr	r3, [r7, #28]
 800db34:	fa02 f303 	lsl.w	r3, r2, r3
 800db38:	43db      	mvns	r3, r3
 800db3a:	69ba      	ldr	r2, [r7, #24]
 800db3c:	4013      	ands	r3, r2
 800db3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	685b      	ldr	r3, [r3, #4]
 800db44:	091b      	lsrs	r3, r3, #4
 800db46:	f003 0201 	and.w	r2, r3, #1
 800db4a:	69fb      	ldr	r3, [r7, #28]
 800db4c:	fa02 f303 	lsl.w	r3, r2, r3
 800db50:	69ba      	ldr	r2, [r7, #24]
 800db52:	4313      	orrs	r3, r2
 800db54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	69ba      	ldr	r2, [r7, #24]
 800db5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	685b      	ldr	r3, [r3, #4]
 800db60:	f003 0303 	and.w	r3, r3, #3
 800db64:	2b03      	cmp	r3, #3
 800db66:	d017      	beq.n	800db98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	68db      	ldr	r3, [r3, #12]
 800db6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800db6e:	69fb      	ldr	r3, [r7, #28]
 800db70:	005b      	lsls	r3, r3, #1
 800db72:	2203      	movs	r2, #3
 800db74:	fa02 f303 	lsl.w	r3, r2, r3
 800db78:	43db      	mvns	r3, r3
 800db7a:	69ba      	ldr	r2, [r7, #24]
 800db7c:	4013      	ands	r3, r2
 800db7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	689a      	ldr	r2, [r3, #8]
 800db84:	69fb      	ldr	r3, [r7, #28]
 800db86:	005b      	lsls	r3, r3, #1
 800db88:	fa02 f303 	lsl.w	r3, r2, r3
 800db8c:	69ba      	ldr	r2, [r7, #24]
 800db8e:	4313      	orrs	r3, r2
 800db90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	69ba      	ldr	r2, [r7, #24]
 800db96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	685b      	ldr	r3, [r3, #4]
 800db9c:	f003 0303 	and.w	r3, r3, #3
 800dba0:	2b02      	cmp	r3, #2
 800dba2:	d123      	bne.n	800dbec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800dba4:	69fb      	ldr	r3, [r7, #28]
 800dba6:	08da      	lsrs	r2, r3, #3
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	3208      	adds	r2, #8
 800dbac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800dbb2:	69fb      	ldr	r3, [r7, #28]
 800dbb4:	f003 0307 	and.w	r3, r3, #7
 800dbb8:	009b      	lsls	r3, r3, #2
 800dbba:	220f      	movs	r2, #15
 800dbbc:	fa02 f303 	lsl.w	r3, r2, r3
 800dbc0:	43db      	mvns	r3, r3
 800dbc2:	69ba      	ldr	r2, [r7, #24]
 800dbc4:	4013      	ands	r3, r2
 800dbc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	691a      	ldr	r2, [r3, #16]
 800dbcc:	69fb      	ldr	r3, [r7, #28]
 800dbce:	f003 0307 	and.w	r3, r3, #7
 800dbd2:	009b      	lsls	r3, r3, #2
 800dbd4:	fa02 f303 	lsl.w	r3, r2, r3
 800dbd8:	69ba      	ldr	r2, [r7, #24]
 800dbda:	4313      	orrs	r3, r2
 800dbdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800dbde:	69fb      	ldr	r3, [r7, #28]
 800dbe0:	08da      	lsrs	r2, r3, #3
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	3208      	adds	r2, #8
 800dbe6:	69b9      	ldr	r1, [r7, #24]
 800dbe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800dbf2:	69fb      	ldr	r3, [r7, #28]
 800dbf4:	005b      	lsls	r3, r3, #1
 800dbf6:	2203      	movs	r2, #3
 800dbf8:	fa02 f303 	lsl.w	r3, r2, r3
 800dbfc:	43db      	mvns	r3, r3
 800dbfe:	69ba      	ldr	r2, [r7, #24]
 800dc00:	4013      	ands	r3, r2
 800dc02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	685b      	ldr	r3, [r3, #4]
 800dc08:	f003 0203 	and.w	r2, r3, #3
 800dc0c:	69fb      	ldr	r3, [r7, #28]
 800dc0e:	005b      	lsls	r3, r3, #1
 800dc10:	fa02 f303 	lsl.w	r3, r2, r3
 800dc14:	69ba      	ldr	r2, [r7, #24]
 800dc16:	4313      	orrs	r3, r2
 800dc18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	69ba      	ldr	r2, [r7, #24]
 800dc1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	685b      	ldr	r3, [r3, #4]
 800dc24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	f000 80a2 	beq.w	800dd72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dc2e:	2300      	movs	r3, #0
 800dc30:	60fb      	str	r3, [r7, #12]
 800dc32:	4b57      	ldr	r3, [pc, #348]	@ (800dd90 <HAL_GPIO_Init+0x2e8>)
 800dc34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc36:	4a56      	ldr	r2, [pc, #344]	@ (800dd90 <HAL_GPIO_Init+0x2e8>)
 800dc38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800dc3c:	6453      	str	r3, [r2, #68]	@ 0x44
 800dc3e:	4b54      	ldr	r3, [pc, #336]	@ (800dd90 <HAL_GPIO_Init+0x2e8>)
 800dc40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dc46:	60fb      	str	r3, [r7, #12]
 800dc48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800dc4a:	4a52      	ldr	r2, [pc, #328]	@ (800dd94 <HAL_GPIO_Init+0x2ec>)
 800dc4c:	69fb      	ldr	r3, [r7, #28]
 800dc4e:	089b      	lsrs	r3, r3, #2
 800dc50:	3302      	adds	r3, #2
 800dc52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800dc58:	69fb      	ldr	r3, [r7, #28]
 800dc5a:	f003 0303 	and.w	r3, r3, #3
 800dc5e:	009b      	lsls	r3, r3, #2
 800dc60:	220f      	movs	r2, #15
 800dc62:	fa02 f303 	lsl.w	r3, r2, r3
 800dc66:	43db      	mvns	r3, r3
 800dc68:	69ba      	ldr	r2, [r7, #24]
 800dc6a:	4013      	ands	r3, r2
 800dc6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	4a49      	ldr	r2, [pc, #292]	@ (800dd98 <HAL_GPIO_Init+0x2f0>)
 800dc72:	4293      	cmp	r3, r2
 800dc74:	d019      	beq.n	800dcaa <HAL_GPIO_Init+0x202>
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	4a48      	ldr	r2, [pc, #288]	@ (800dd9c <HAL_GPIO_Init+0x2f4>)
 800dc7a:	4293      	cmp	r3, r2
 800dc7c:	d013      	beq.n	800dca6 <HAL_GPIO_Init+0x1fe>
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	4a47      	ldr	r2, [pc, #284]	@ (800dda0 <HAL_GPIO_Init+0x2f8>)
 800dc82:	4293      	cmp	r3, r2
 800dc84:	d00d      	beq.n	800dca2 <HAL_GPIO_Init+0x1fa>
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	4a46      	ldr	r2, [pc, #280]	@ (800dda4 <HAL_GPIO_Init+0x2fc>)
 800dc8a:	4293      	cmp	r3, r2
 800dc8c:	d007      	beq.n	800dc9e <HAL_GPIO_Init+0x1f6>
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	4a45      	ldr	r2, [pc, #276]	@ (800dda8 <HAL_GPIO_Init+0x300>)
 800dc92:	4293      	cmp	r3, r2
 800dc94:	d101      	bne.n	800dc9a <HAL_GPIO_Init+0x1f2>
 800dc96:	2304      	movs	r3, #4
 800dc98:	e008      	b.n	800dcac <HAL_GPIO_Init+0x204>
 800dc9a:	2307      	movs	r3, #7
 800dc9c:	e006      	b.n	800dcac <HAL_GPIO_Init+0x204>
 800dc9e:	2303      	movs	r3, #3
 800dca0:	e004      	b.n	800dcac <HAL_GPIO_Init+0x204>
 800dca2:	2302      	movs	r3, #2
 800dca4:	e002      	b.n	800dcac <HAL_GPIO_Init+0x204>
 800dca6:	2301      	movs	r3, #1
 800dca8:	e000      	b.n	800dcac <HAL_GPIO_Init+0x204>
 800dcaa:	2300      	movs	r3, #0
 800dcac:	69fa      	ldr	r2, [r7, #28]
 800dcae:	f002 0203 	and.w	r2, r2, #3
 800dcb2:	0092      	lsls	r2, r2, #2
 800dcb4:	4093      	lsls	r3, r2
 800dcb6:	69ba      	ldr	r2, [r7, #24]
 800dcb8:	4313      	orrs	r3, r2
 800dcba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800dcbc:	4935      	ldr	r1, [pc, #212]	@ (800dd94 <HAL_GPIO_Init+0x2ec>)
 800dcbe:	69fb      	ldr	r3, [r7, #28]
 800dcc0:	089b      	lsrs	r3, r3, #2
 800dcc2:	3302      	adds	r3, #2
 800dcc4:	69ba      	ldr	r2, [r7, #24]
 800dcc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800dcca:	4b38      	ldr	r3, [pc, #224]	@ (800ddac <HAL_GPIO_Init+0x304>)
 800dccc:	689b      	ldr	r3, [r3, #8]
 800dcce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	43db      	mvns	r3, r3
 800dcd4:	69ba      	ldr	r2, [r7, #24]
 800dcd6:	4013      	ands	r3, r2
 800dcd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	685b      	ldr	r3, [r3, #4]
 800dcde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d003      	beq.n	800dcee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800dce6:	69ba      	ldr	r2, [r7, #24]
 800dce8:	693b      	ldr	r3, [r7, #16]
 800dcea:	4313      	orrs	r3, r2
 800dcec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800dcee:	4a2f      	ldr	r2, [pc, #188]	@ (800ddac <HAL_GPIO_Init+0x304>)
 800dcf0:	69bb      	ldr	r3, [r7, #24]
 800dcf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800dcf4:	4b2d      	ldr	r3, [pc, #180]	@ (800ddac <HAL_GPIO_Init+0x304>)
 800dcf6:	68db      	ldr	r3, [r3, #12]
 800dcf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800dcfa:	693b      	ldr	r3, [r7, #16]
 800dcfc:	43db      	mvns	r3, r3
 800dcfe:	69ba      	ldr	r2, [r7, #24]
 800dd00:	4013      	ands	r3, r2
 800dd02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d003      	beq.n	800dd18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800dd10:	69ba      	ldr	r2, [r7, #24]
 800dd12:	693b      	ldr	r3, [r7, #16]
 800dd14:	4313      	orrs	r3, r2
 800dd16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800dd18:	4a24      	ldr	r2, [pc, #144]	@ (800ddac <HAL_GPIO_Init+0x304>)
 800dd1a:	69bb      	ldr	r3, [r7, #24]
 800dd1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800dd1e:	4b23      	ldr	r3, [pc, #140]	@ (800ddac <HAL_GPIO_Init+0x304>)
 800dd20:	685b      	ldr	r3, [r3, #4]
 800dd22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	43db      	mvns	r3, r3
 800dd28:	69ba      	ldr	r2, [r7, #24]
 800dd2a:	4013      	ands	r3, r2
 800dd2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	685b      	ldr	r3, [r3, #4]
 800dd32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d003      	beq.n	800dd42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800dd3a:	69ba      	ldr	r2, [r7, #24]
 800dd3c:	693b      	ldr	r3, [r7, #16]
 800dd3e:	4313      	orrs	r3, r2
 800dd40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800dd42:	4a1a      	ldr	r2, [pc, #104]	@ (800ddac <HAL_GPIO_Init+0x304>)
 800dd44:	69bb      	ldr	r3, [r7, #24]
 800dd46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800dd48:	4b18      	ldr	r3, [pc, #96]	@ (800ddac <HAL_GPIO_Init+0x304>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800dd4e:	693b      	ldr	r3, [r7, #16]
 800dd50:	43db      	mvns	r3, r3
 800dd52:	69ba      	ldr	r2, [r7, #24]
 800dd54:	4013      	ands	r3, r2
 800dd56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	685b      	ldr	r3, [r3, #4]
 800dd5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d003      	beq.n	800dd6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800dd64:	69ba      	ldr	r2, [r7, #24]
 800dd66:	693b      	ldr	r3, [r7, #16]
 800dd68:	4313      	orrs	r3, r2
 800dd6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800dd6c:	4a0f      	ldr	r2, [pc, #60]	@ (800ddac <HAL_GPIO_Init+0x304>)
 800dd6e:	69bb      	ldr	r3, [r7, #24]
 800dd70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800dd72:	69fb      	ldr	r3, [r7, #28]
 800dd74:	3301      	adds	r3, #1
 800dd76:	61fb      	str	r3, [r7, #28]
 800dd78:	69fb      	ldr	r3, [r7, #28]
 800dd7a:	2b0f      	cmp	r3, #15
 800dd7c:	f67f aea2 	bls.w	800dac4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800dd80:	bf00      	nop
 800dd82:	bf00      	nop
 800dd84:	3724      	adds	r7, #36	@ 0x24
 800dd86:	46bd      	mov	sp, r7
 800dd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8c:	4770      	bx	lr
 800dd8e:	bf00      	nop
 800dd90:	40023800 	.word	0x40023800
 800dd94:	40013800 	.word	0x40013800
 800dd98:	40020000 	.word	0x40020000
 800dd9c:	40020400 	.word	0x40020400
 800dda0:	40020800 	.word	0x40020800
 800dda4:	40020c00 	.word	0x40020c00
 800dda8:	40021000 	.word	0x40021000
 800ddac:	40013c00 	.word	0x40013c00

0800ddb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ddb0:	b480      	push	{r7}
 800ddb2:	b085      	sub	sp, #20
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	460b      	mov	r3, r1
 800ddba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	691a      	ldr	r2, [r3, #16]
 800ddc0:	887b      	ldrh	r3, [r7, #2]
 800ddc2:	4013      	ands	r3, r2
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d002      	beq.n	800ddce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ddc8:	2301      	movs	r3, #1
 800ddca:	73fb      	strb	r3, [r7, #15]
 800ddcc:	e001      	b.n	800ddd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ddce:	2300      	movs	r3, #0
 800ddd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ddd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	3714      	adds	r7, #20
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddde:	4770      	bx	lr

0800dde0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800dde0:	b480      	push	{r7}
 800dde2:	b083      	sub	sp, #12
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
 800dde8:	460b      	mov	r3, r1
 800ddea:	807b      	strh	r3, [r7, #2]
 800ddec:	4613      	mov	r3, r2
 800ddee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ddf0:	787b      	ldrb	r3, [r7, #1]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d003      	beq.n	800ddfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ddf6:	887a      	ldrh	r2, [r7, #2]
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ddfc:	e003      	b.n	800de06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ddfe:	887b      	ldrh	r3, [r7, #2]
 800de00:	041a      	lsls	r2, r3, #16
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	619a      	str	r2, [r3, #24]
}
 800de06:	bf00      	nop
 800de08:	370c      	adds	r7, #12
 800de0a:	46bd      	mov	sp, r7
 800de0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de10:	4770      	bx	lr
	...

0800de14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b082      	sub	sp, #8
 800de18:	af00      	add	r7, sp, #0
 800de1a:	4603      	mov	r3, r0
 800de1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800de1e:	4b08      	ldr	r3, [pc, #32]	@ (800de40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800de20:	695a      	ldr	r2, [r3, #20]
 800de22:	88fb      	ldrh	r3, [r7, #6]
 800de24:	4013      	ands	r3, r2
 800de26:	2b00      	cmp	r3, #0
 800de28:	d006      	beq.n	800de38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800de2a:	4a05      	ldr	r2, [pc, #20]	@ (800de40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800de2c:	88fb      	ldrh	r3, [r7, #6]
 800de2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800de30:	88fb      	ldrh	r3, [r7, #6]
 800de32:	4618      	mov	r0, r3
 800de34:	f7fe f8dc 	bl	800bff0 <HAL_GPIO_EXTI_Callback>
  }
}
 800de38:	bf00      	nop
 800de3a:	3708      	adds	r7, #8
 800de3c:	46bd      	mov	sp, r7
 800de3e:	bd80      	pop	{r7, pc}
 800de40:	40013c00 	.word	0x40013c00

0800de44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b084      	sub	sp, #16
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d101      	bne.n	800de56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800de52:	2301      	movs	r3, #1
 800de54:	e12b      	b.n	800e0ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800de5c:	b2db      	uxtb	r3, r3
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d106      	bne.n	800de70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	2200      	movs	r2, #0
 800de66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800de6a:	6878      	ldr	r0, [r7, #4]
 800de6c:	f7fe fe76 	bl	800cb5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2224      	movs	r2, #36	@ 0x24
 800de74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	681a      	ldr	r2, [r3, #0]
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	f022 0201 	bic.w	r2, r2, #1
 800de86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	681a      	ldr	r2, [r3, #0]
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800de96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	681a      	ldr	r2, [r3, #0]
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800dea6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800dea8:	f001 fc20 	bl	800f6ec <HAL_RCC_GetPCLK1Freq>
 800deac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	685b      	ldr	r3, [r3, #4]
 800deb2:	4a81      	ldr	r2, [pc, #516]	@ (800e0b8 <HAL_I2C_Init+0x274>)
 800deb4:	4293      	cmp	r3, r2
 800deb6:	d807      	bhi.n	800dec8 <HAL_I2C_Init+0x84>
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	4a80      	ldr	r2, [pc, #512]	@ (800e0bc <HAL_I2C_Init+0x278>)
 800debc:	4293      	cmp	r3, r2
 800debe:	bf94      	ite	ls
 800dec0:	2301      	movls	r3, #1
 800dec2:	2300      	movhi	r3, #0
 800dec4:	b2db      	uxtb	r3, r3
 800dec6:	e006      	b.n	800ded6 <HAL_I2C_Init+0x92>
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	4a7d      	ldr	r2, [pc, #500]	@ (800e0c0 <HAL_I2C_Init+0x27c>)
 800decc:	4293      	cmp	r3, r2
 800dece:	bf94      	ite	ls
 800ded0:	2301      	movls	r3, #1
 800ded2:	2300      	movhi	r3, #0
 800ded4:	b2db      	uxtb	r3, r3
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d001      	beq.n	800dede <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800deda:	2301      	movs	r3, #1
 800dedc:	e0e7      	b.n	800e0ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	4a78      	ldr	r2, [pc, #480]	@ (800e0c4 <HAL_I2C_Init+0x280>)
 800dee2:	fba2 2303 	umull	r2, r3, r2, r3
 800dee6:	0c9b      	lsrs	r3, r3, #18
 800dee8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	685b      	ldr	r3, [r3, #4]
 800def0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	68ba      	ldr	r2, [r7, #8]
 800defa:	430a      	orrs	r2, r1
 800defc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	6a1b      	ldr	r3, [r3, #32]
 800df04:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	685b      	ldr	r3, [r3, #4]
 800df0c:	4a6a      	ldr	r2, [pc, #424]	@ (800e0b8 <HAL_I2C_Init+0x274>)
 800df0e:	4293      	cmp	r3, r2
 800df10:	d802      	bhi.n	800df18 <HAL_I2C_Init+0xd4>
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	3301      	adds	r3, #1
 800df16:	e009      	b.n	800df2c <HAL_I2C_Init+0xe8>
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800df1e:	fb02 f303 	mul.w	r3, r2, r3
 800df22:	4a69      	ldr	r2, [pc, #420]	@ (800e0c8 <HAL_I2C_Init+0x284>)
 800df24:	fba2 2303 	umull	r2, r3, r2, r3
 800df28:	099b      	lsrs	r3, r3, #6
 800df2a:	3301      	adds	r3, #1
 800df2c:	687a      	ldr	r2, [r7, #4]
 800df2e:	6812      	ldr	r2, [r2, #0]
 800df30:	430b      	orrs	r3, r1
 800df32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	69db      	ldr	r3, [r3, #28]
 800df3a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800df3e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	685b      	ldr	r3, [r3, #4]
 800df46:	495c      	ldr	r1, [pc, #368]	@ (800e0b8 <HAL_I2C_Init+0x274>)
 800df48:	428b      	cmp	r3, r1
 800df4a:	d819      	bhi.n	800df80 <HAL_I2C_Init+0x13c>
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	1e59      	subs	r1, r3, #1
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	005b      	lsls	r3, r3, #1
 800df56:	fbb1 f3f3 	udiv	r3, r1, r3
 800df5a:	1c59      	adds	r1, r3, #1
 800df5c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800df60:	400b      	ands	r3, r1
 800df62:	2b00      	cmp	r3, #0
 800df64:	d00a      	beq.n	800df7c <HAL_I2C_Init+0x138>
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	1e59      	subs	r1, r3, #1
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	685b      	ldr	r3, [r3, #4]
 800df6e:	005b      	lsls	r3, r3, #1
 800df70:	fbb1 f3f3 	udiv	r3, r1, r3
 800df74:	3301      	adds	r3, #1
 800df76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800df7a:	e051      	b.n	800e020 <HAL_I2C_Init+0x1dc>
 800df7c:	2304      	movs	r3, #4
 800df7e:	e04f      	b.n	800e020 <HAL_I2C_Init+0x1dc>
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	689b      	ldr	r3, [r3, #8]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d111      	bne.n	800dfac <HAL_I2C_Init+0x168>
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	1e58      	subs	r0, r3, #1
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6859      	ldr	r1, [r3, #4]
 800df90:	460b      	mov	r3, r1
 800df92:	005b      	lsls	r3, r3, #1
 800df94:	440b      	add	r3, r1
 800df96:	fbb0 f3f3 	udiv	r3, r0, r3
 800df9a:	3301      	adds	r3, #1
 800df9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	bf0c      	ite	eq
 800dfa4:	2301      	moveq	r3, #1
 800dfa6:	2300      	movne	r3, #0
 800dfa8:	b2db      	uxtb	r3, r3
 800dfaa:	e012      	b.n	800dfd2 <HAL_I2C_Init+0x18e>
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	1e58      	subs	r0, r3, #1
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6859      	ldr	r1, [r3, #4]
 800dfb4:	460b      	mov	r3, r1
 800dfb6:	009b      	lsls	r3, r3, #2
 800dfb8:	440b      	add	r3, r1
 800dfba:	0099      	lsls	r1, r3, #2
 800dfbc:	440b      	add	r3, r1
 800dfbe:	fbb0 f3f3 	udiv	r3, r0, r3
 800dfc2:	3301      	adds	r3, #1
 800dfc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	bf0c      	ite	eq
 800dfcc:	2301      	moveq	r3, #1
 800dfce:	2300      	movne	r3, #0
 800dfd0:	b2db      	uxtb	r3, r3
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d001      	beq.n	800dfda <HAL_I2C_Init+0x196>
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	e022      	b.n	800e020 <HAL_I2C_Init+0x1dc>
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	689b      	ldr	r3, [r3, #8]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d10e      	bne.n	800e000 <HAL_I2C_Init+0x1bc>
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	1e58      	subs	r0, r3, #1
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	6859      	ldr	r1, [r3, #4]
 800dfea:	460b      	mov	r3, r1
 800dfec:	005b      	lsls	r3, r3, #1
 800dfee:	440b      	add	r3, r1
 800dff0:	fbb0 f3f3 	udiv	r3, r0, r3
 800dff4:	3301      	adds	r3, #1
 800dff6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dffa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dffe:	e00f      	b.n	800e020 <HAL_I2C_Init+0x1dc>
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	1e58      	subs	r0, r3, #1
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	6859      	ldr	r1, [r3, #4]
 800e008:	460b      	mov	r3, r1
 800e00a:	009b      	lsls	r3, r3, #2
 800e00c:	440b      	add	r3, r1
 800e00e:	0099      	lsls	r1, r3, #2
 800e010:	440b      	add	r3, r1
 800e012:	fbb0 f3f3 	udiv	r3, r0, r3
 800e016:	3301      	adds	r3, #1
 800e018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e01c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e020:	6879      	ldr	r1, [r7, #4]
 800e022:	6809      	ldr	r1, [r1, #0]
 800e024:	4313      	orrs	r3, r2
 800e026:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	69da      	ldr	r2, [r3, #28]
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6a1b      	ldr	r3, [r3, #32]
 800e03a:	431a      	orrs	r2, r3
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	430a      	orrs	r2, r1
 800e042:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	689b      	ldr	r3, [r3, #8]
 800e04a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800e04e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e052:	687a      	ldr	r2, [r7, #4]
 800e054:	6911      	ldr	r1, [r2, #16]
 800e056:	687a      	ldr	r2, [r7, #4]
 800e058:	68d2      	ldr	r2, [r2, #12]
 800e05a:	4311      	orrs	r1, r2
 800e05c:	687a      	ldr	r2, [r7, #4]
 800e05e:	6812      	ldr	r2, [r2, #0]
 800e060:	430b      	orrs	r3, r1
 800e062:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	68db      	ldr	r3, [r3, #12]
 800e06a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	695a      	ldr	r2, [r3, #20]
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	699b      	ldr	r3, [r3, #24]
 800e076:	431a      	orrs	r2, r3
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	430a      	orrs	r2, r1
 800e07e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	681a      	ldr	r2, [r3, #0]
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	f042 0201 	orr.w	r2, r2, #1
 800e08e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2200      	movs	r2, #0
 800e094:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	2220      	movs	r2, #32
 800e09a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800e0ac:	2300      	movs	r3, #0
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	3710      	adds	r7, #16
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}
 800e0b6:	bf00      	nop
 800e0b8:	000186a0 	.word	0x000186a0
 800e0bc:	001e847f 	.word	0x001e847f
 800e0c0:	003d08ff 	.word	0x003d08ff
 800e0c4:	431bde83 	.word	0x431bde83
 800e0c8:	10624dd3 	.word	0x10624dd3

0800e0cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b088      	sub	sp, #32
 800e0d0:	af02      	add	r7, sp, #8
 800e0d2:	60f8      	str	r0, [r7, #12]
 800e0d4:	4608      	mov	r0, r1
 800e0d6:	4611      	mov	r1, r2
 800e0d8:	461a      	mov	r2, r3
 800e0da:	4603      	mov	r3, r0
 800e0dc:	817b      	strh	r3, [r7, #10]
 800e0de:	460b      	mov	r3, r1
 800e0e0:	813b      	strh	r3, [r7, #8]
 800e0e2:	4613      	mov	r3, r2
 800e0e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800e0e6:	f7ff f869 	bl	800d1bc <HAL_GetTick>
 800e0ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e0f2:	b2db      	uxtb	r3, r3
 800e0f4:	2b20      	cmp	r3, #32
 800e0f6:	f040 80d9 	bne.w	800e2ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800e0fa:	697b      	ldr	r3, [r7, #20]
 800e0fc:	9300      	str	r3, [sp, #0]
 800e0fe:	2319      	movs	r3, #25
 800e100:	2201      	movs	r2, #1
 800e102:	496d      	ldr	r1, [pc, #436]	@ (800e2b8 <HAL_I2C_Mem_Write+0x1ec>)
 800e104:	68f8      	ldr	r0, [r7, #12]
 800e106:	f000 fc8b 	bl	800ea20 <I2C_WaitOnFlagUntilTimeout>
 800e10a:	4603      	mov	r3, r0
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d001      	beq.n	800e114 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800e110:	2302      	movs	r3, #2
 800e112:	e0cc      	b.n	800e2ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e11a:	2b01      	cmp	r3, #1
 800e11c:	d101      	bne.n	800e122 <HAL_I2C_Mem_Write+0x56>
 800e11e:	2302      	movs	r3, #2
 800e120:	e0c5      	b.n	800e2ae <HAL_I2C_Mem_Write+0x1e2>
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	2201      	movs	r2, #1
 800e126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	f003 0301 	and.w	r3, r3, #1
 800e134:	2b01      	cmp	r3, #1
 800e136:	d007      	beq.n	800e148 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	681a      	ldr	r2, [r3, #0]
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	f042 0201 	orr.w	r2, r2, #1
 800e146:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	681a      	ldr	r2, [r3, #0]
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e156:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	2221      	movs	r2, #33	@ 0x21
 800e15c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	2240      	movs	r2, #64	@ 0x40
 800e164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	2200      	movs	r2, #0
 800e16c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	6a3a      	ldr	r2, [r7, #32]
 800e172:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e178:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e17e:	b29a      	uxth	r2, r3
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	4a4d      	ldr	r2, [pc, #308]	@ (800e2bc <HAL_I2C_Mem_Write+0x1f0>)
 800e188:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e18a:	88f8      	ldrh	r0, [r7, #6]
 800e18c:	893a      	ldrh	r2, [r7, #8]
 800e18e:	8979      	ldrh	r1, [r7, #10]
 800e190:	697b      	ldr	r3, [r7, #20]
 800e192:	9301      	str	r3, [sp, #4]
 800e194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e196:	9300      	str	r3, [sp, #0]
 800e198:	4603      	mov	r3, r0
 800e19a:	68f8      	ldr	r0, [r7, #12]
 800e19c:	f000 fac2 	bl	800e724 <I2C_RequestMemoryWrite>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d052      	beq.n	800e24c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800e1a6:	2301      	movs	r3, #1
 800e1a8:	e081      	b.n	800e2ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e1aa:	697a      	ldr	r2, [r7, #20]
 800e1ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e1ae:	68f8      	ldr	r0, [r7, #12]
 800e1b0:	f000 fd50 	bl	800ec54 <I2C_WaitOnTXEFlagUntilTimeout>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d00d      	beq.n	800e1d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1be:	2b04      	cmp	r3, #4
 800e1c0:	d107      	bne.n	800e1d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	681a      	ldr	r2, [r3, #0]
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e1d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	e06b      	b.n	800e2ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1da:	781a      	ldrb	r2, [r3, #0]
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1e6:	1c5a      	adds	r2, r3, #1
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e1f0:	3b01      	subs	r3, #1
 800e1f2:	b29a      	uxth	r2, r3
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e1fc:	b29b      	uxth	r3, r3
 800e1fe:	3b01      	subs	r3, #1
 800e200:	b29a      	uxth	r2, r3
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	695b      	ldr	r3, [r3, #20]
 800e20c:	f003 0304 	and.w	r3, r3, #4
 800e210:	2b04      	cmp	r3, #4
 800e212:	d11b      	bne.n	800e24c <HAL_I2C_Mem_Write+0x180>
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d017      	beq.n	800e24c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e220:	781a      	ldrb	r2, [r3, #0]
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e22c:	1c5a      	adds	r2, r3, #1
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e236:	3b01      	subs	r3, #1
 800e238:	b29a      	uxth	r2, r3
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e242:	b29b      	uxth	r3, r3
 800e244:	3b01      	subs	r3, #1
 800e246:	b29a      	uxth	r2, r3
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e250:	2b00      	cmp	r3, #0
 800e252:	d1aa      	bne.n	800e1aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e254:	697a      	ldr	r2, [r7, #20]
 800e256:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e258:	68f8      	ldr	r0, [r7, #12]
 800e25a:	f000 fd43 	bl	800ece4 <I2C_WaitOnBTFFlagUntilTimeout>
 800e25e:	4603      	mov	r3, r0
 800e260:	2b00      	cmp	r3, #0
 800e262:	d00d      	beq.n	800e280 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e268:	2b04      	cmp	r3, #4
 800e26a:	d107      	bne.n	800e27c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	681a      	ldr	r2, [r3, #0]
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e27a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e27c:	2301      	movs	r3, #1
 800e27e:	e016      	b.n	800e2ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	681a      	ldr	r2, [r3, #0]
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e28e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	2220      	movs	r2, #32
 800e294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	2200      	movs	r2, #0
 800e29c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	e000      	b.n	800e2ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800e2ac:	2302      	movs	r3, #2
  }
}
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	3718      	adds	r7, #24
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	bd80      	pop	{r7, pc}
 800e2b6:	bf00      	nop
 800e2b8:	00100002 	.word	0x00100002
 800e2bc:	ffff0000 	.word	0xffff0000

0800e2c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b08c      	sub	sp, #48	@ 0x30
 800e2c4:	af02      	add	r7, sp, #8
 800e2c6:	60f8      	str	r0, [r7, #12]
 800e2c8:	4608      	mov	r0, r1
 800e2ca:	4611      	mov	r1, r2
 800e2cc:	461a      	mov	r2, r3
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	817b      	strh	r3, [r7, #10]
 800e2d2:	460b      	mov	r3, r1
 800e2d4:	813b      	strh	r3, [r7, #8]
 800e2d6:	4613      	mov	r3, r2
 800e2d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800e2da:	f7fe ff6f 	bl	800d1bc <HAL_GetTick>
 800e2de:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e2e6:	b2db      	uxtb	r3, r3
 800e2e8:	2b20      	cmp	r3, #32
 800e2ea:	f040 8214 	bne.w	800e716 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800e2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2f0:	9300      	str	r3, [sp, #0]
 800e2f2:	2319      	movs	r3, #25
 800e2f4:	2201      	movs	r2, #1
 800e2f6:	497b      	ldr	r1, [pc, #492]	@ (800e4e4 <HAL_I2C_Mem_Read+0x224>)
 800e2f8:	68f8      	ldr	r0, [r7, #12]
 800e2fa:	f000 fb91 	bl	800ea20 <I2C_WaitOnFlagUntilTimeout>
 800e2fe:	4603      	mov	r3, r0
 800e300:	2b00      	cmp	r3, #0
 800e302:	d001      	beq.n	800e308 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800e304:	2302      	movs	r3, #2
 800e306:	e207      	b.n	800e718 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e30e:	2b01      	cmp	r3, #1
 800e310:	d101      	bne.n	800e316 <HAL_I2C_Mem_Read+0x56>
 800e312:	2302      	movs	r3, #2
 800e314:	e200      	b.n	800e718 <HAL_I2C_Mem_Read+0x458>
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	2201      	movs	r2, #1
 800e31a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	f003 0301 	and.w	r3, r3, #1
 800e328:	2b01      	cmp	r3, #1
 800e32a:	d007      	beq.n	800e33c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	681a      	ldr	r2, [r3, #0]
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	f042 0201 	orr.w	r2, r2, #1
 800e33a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	681a      	ldr	r2, [r3, #0]
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e34a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	2222      	movs	r2, #34	@ 0x22
 800e350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	2240      	movs	r2, #64	@ 0x40
 800e358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	2200      	movs	r2, #0
 800e360:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e366:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800e36c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e372:	b29a      	uxth	r2, r3
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	4a5b      	ldr	r2, [pc, #364]	@ (800e4e8 <HAL_I2C_Mem_Read+0x228>)
 800e37c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e37e:	88f8      	ldrh	r0, [r7, #6]
 800e380:	893a      	ldrh	r2, [r7, #8]
 800e382:	8979      	ldrh	r1, [r7, #10]
 800e384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e386:	9301      	str	r3, [sp, #4]
 800e388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e38a:	9300      	str	r3, [sp, #0]
 800e38c:	4603      	mov	r3, r0
 800e38e:	68f8      	ldr	r0, [r7, #12]
 800e390:	f000 fa5e 	bl	800e850 <I2C_RequestMemoryRead>
 800e394:	4603      	mov	r3, r0
 800e396:	2b00      	cmp	r3, #0
 800e398:	d001      	beq.n	800e39e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800e39a:	2301      	movs	r3, #1
 800e39c:	e1bc      	b.n	800e718 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d113      	bne.n	800e3ce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	623b      	str	r3, [r7, #32]
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	695b      	ldr	r3, [r3, #20]
 800e3b0:	623b      	str	r3, [r7, #32]
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	699b      	ldr	r3, [r3, #24]
 800e3b8:	623b      	str	r3, [r7, #32]
 800e3ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	681a      	ldr	r2, [r3, #0]
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e3ca:	601a      	str	r2, [r3, #0]
 800e3cc:	e190      	b.n	800e6f0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e3d2:	2b01      	cmp	r3, #1
 800e3d4:	d11b      	bne.n	800e40e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	681a      	ldr	r2, [r3, #0]
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e3e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	61fb      	str	r3, [r7, #28]
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	695b      	ldr	r3, [r3, #20]
 800e3f0:	61fb      	str	r3, [r7, #28]
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	699b      	ldr	r3, [r3, #24]
 800e3f8:	61fb      	str	r3, [r7, #28]
 800e3fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	681a      	ldr	r2, [r3, #0]
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e40a:	601a      	str	r2, [r3, #0]
 800e40c:	e170      	b.n	800e6f0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e412:	2b02      	cmp	r3, #2
 800e414:	d11b      	bne.n	800e44e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	681a      	ldr	r2, [r3, #0]
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e424:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	681a      	ldr	r2, [r3, #0]
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e434:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e436:	2300      	movs	r3, #0
 800e438:	61bb      	str	r3, [r7, #24]
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	695b      	ldr	r3, [r3, #20]
 800e440:	61bb      	str	r3, [r7, #24]
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	699b      	ldr	r3, [r3, #24]
 800e448:	61bb      	str	r3, [r7, #24]
 800e44a:	69bb      	ldr	r3, [r7, #24]
 800e44c:	e150      	b.n	800e6f0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e44e:	2300      	movs	r3, #0
 800e450:	617b      	str	r3, [r7, #20]
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	695b      	ldr	r3, [r3, #20]
 800e458:	617b      	str	r3, [r7, #20]
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	699b      	ldr	r3, [r3, #24]
 800e460:	617b      	str	r3, [r7, #20]
 800e462:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800e464:	e144      	b.n	800e6f0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e46a:	2b03      	cmp	r3, #3
 800e46c:	f200 80f1 	bhi.w	800e652 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e474:	2b01      	cmp	r3, #1
 800e476:	d123      	bne.n	800e4c0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e478:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e47a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e47c:	68f8      	ldr	r0, [r7, #12]
 800e47e:	f000 fc79 	bl	800ed74 <I2C_WaitOnRXNEFlagUntilTimeout>
 800e482:	4603      	mov	r3, r0
 800e484:	2b00      	cmp	r3, #0
 800e486:	d001      	beq.n	800e48c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800e488:	2301      	movs	r3, #1
 800e48a:	e145      	b.n	800e718 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	691a      	ldr	r2, [r3, #16]
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e496:	b2d2      	uxtb	r2, r2
 800e498:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e49e:	1c5a      	adds	r2, r3, #1
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e4a8:	3b01      	subs	r3, #1
 800e4aa:	b29a      	uxth	r2, r3
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e4b4:	b29b      	uxth	r3, r3
 800e4b6:	3b01      	subs	r3, #1
 800e4b8:	b29a      	uxth	r2, r3
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e4be:	e117      	b.n	800e6f0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e4c4:	2b02      	cmp	r3, #2
 800e4c6:	d14e      	bne.n	800e566 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800e4c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4ca:	9300      	str	r3, [sp, #0]
 800e4cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	4906      	ldr	r1, [pc, #24]	@ (800e4ec <HAL_I2C_Mem_Read+0x22c>)
 800e4d2:	68f8      	ldr	r0, [r7, #12]
 800e4d4:	f000 faa4 	bl	800ea20 <I2C_WaitOnFlagUntilTimeout>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d008      	beq.n	800e4f0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800e4de:	2301      	movs	r3, #1
 800e4e0:	e11a      	b.n	800e718 <HAL_I2C_Mem_Read+0x458>
 800e4e2:	bf00      	nop
 800e4e4:	00100002 	.word	0x00100002
 800e4e8:	ffff0000 	.word	0xffff0000
 800e4ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	681a      	ldr	r2, [r3, #0]
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e4fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	691a      	ldr	r2, [r3, #16]
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e50a:	b2d2      	uxtb	r2, r2
 800e50c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e512:	1c5a      	adds	r2, r3, #1
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e51c:	3b01      	subs	r3, #1
 800e51e:	b29a      	uxth	r2, r3
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e528:	b29b      	uxth	r3, r3
 800e52a:	3b01      	subs	r3, #1
 800e52c:	b29a      	uxth	r2, r3
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	691a      	ldr	r2, [r3, #16]
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e53c:	b2d2      	uxtb	r2, r2
 800e53e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e544:	1c5a      	adds	r2, r3, #1
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e54e:	3b01      	subs	r3, #1
 800e550:	b29a      	uxth	r2, r3
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e55a:	b29b      	uxth	r3, r3
 800e55c:	3b01      	subs	r3, #1
 800e55e:	b29a      	uxth	r2, r3
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e564:	e0c4      	b.n	800e6f0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800e566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e568:	9300      	str	r3, [sp, #0]
 800e56a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e56c:	2200      	movs	r2, #0
 800e56e:	496c      	ldr	r1, [pc, #432]	@ (800e720 <HAL_I2C_Mem_Read+0x460>)
 800e570:	68f8      	ldr	r0, [r7, #12]
 800e572:	f000 fa55 	bl	800ea20 <I2C_WaitOnFlagUntilTimeout>
 800e576:	4603      	mov	r3, r0
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d001      	beq.n	800e580 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800e57c:	2301      	movs	r3, #1
 800e57e:	e0cb      	b.n	800e718 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	681a      	ldr	r2, [r3, #0]
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e58e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	691a      	ldr	r2, [r3, #16]
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e59a:	b2d2      	uxtb	r2, r2
 800e59c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5a2:	1c5a      	adds	r2, r3, #1
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e5ac:	3b01      	subs	r3, #1
 800e5ae:	b29a      	uxth	r2, r3
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e5b8:	b29b      	uxth	r3, r3
 800e5ba:	3b01      	subs	r3, #1
 800e5bc:	b29a      	uxth	r2, r3
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800e5c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5c4:	9300      	str	r3, [sp, #0]
 800e5c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	4955      	ldr	r1, [pc, #340]	@ (800e720 <HAL_I2C_Mem_Read+0x460>)
 800e5cc:	68f8      	ldr	r0, [r7, #12]
 800e5ce:	f000 fa27 	bl	800ea20 <I2C_WaitOnFlagUntilTimeout>
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d001      	beq.n	800e5dc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800e5d8:	2301      	movs	r3, #1
 800e5da:	e09d      	b.n	800e718 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	681a      	ldr	r2, [r3, #0]
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e5ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	691a      	ldr	r2, [r3, #16]
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5f6:	b2d2      	uxtb	r2, r2
 800e5f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5fe:	1c5a      	adds	r2, r3, #1
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e608:	3b01      	subs	r3, #1
 800e60a:	b29a      	uxth	r2, r3
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e614:	b29b      	uxth	r3, r3
 800e616:	3b01      	subs	r3, #1
 800e618:	b29a      	uxth	r2, r3
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	691a      	ldr	r2, [r3, #16]
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e628:	b2d2      	uxtb	r2, r2
 800e62a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e630:	1c5a      	adds	r2, r3, #1
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e63a:	3b01      	subs	r3, #1
 800e63c:	b29a      	uxth	r2, r3
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e646:	b29b      	uxth	r3, r3
 800e648:	3b01      	subs	r3, #1
 800e64a:	b29a      	uxth	r2, r3
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e650:	e04e      	b.n	800e6f0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e654:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e656:	68f8      	ldr	r0, [r7, #12]
 800e658:	f000 fb8c 	bl	800ed74 <I2C_WaitOnRXNEFlagUntilTimeout>
 800e65c:	4603      	mov	r3, r0
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d001      	beq.n	800e666 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800e662:	2301      	movs	r3, #1
 800e664:	e058      	b.n	800e718 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	691a      	ldr	r2, [r3, #16]
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e670:	b2d2      	uxtb	r2, r2
 800e672:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e678:	1c5a      	adds	r2, r3, #1
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e682:	3b01      	subs	r3, #1
 800e684:	b29a      	uxth	r2, r3
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e68e:	b29b      	uxth	r3, r3
 800e690:	3b01      	subs	r3, #1
 800e692:	b29a      	uxth	r2, r3
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	695b      	ldr	r3, [r3, #20]
 800e69e:	f003 0304 	and.w	r3, r3, #4
 800e6a2:	2b04      	cmp	r3, #4
 800e6a4:	d124      	bne.n	800e6f0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e6aa:	2b03      	cmp	r3, #3
 800e6ac:	d107      	bne.n	800e6be <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	681a      	ldr	r2, [r3, #0]
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e6bc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	691a      	ldr	r2, [r3, #16]
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6c8:	b2d2      	uxtb	r2, r2
 800e6ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6d0:	1c5a      	adds	r2, r3, #1
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e6da:	3b01      	subs	r3, #1
 800e6dc:	b29a      	uxth	r2, r3
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e6e6:	b29b      	uxth	r3, r3
 800e6e8:	3b01      	subs	r3, #1
 800e6ea:	b29a      	uxth	r2, r3
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	f47f aeb6 	bne.w	800e466 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	2220      	movs	r2, #32
 800e6fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	2200      	movs	r2, #0
 800e706:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	2200      	movs	r2, #0
 800e70e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800e712:	2300      	movs	r3, #0
 800e714:	e000      	b.n	800e718 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800e716:	2302      	movs	r3, #2
  }
}
 800e718:	4618      	mov	r0, r3
 800e71a:	3728      	adds	r7, #40	@ 0x28
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}
 800e720:	00010004 	.word	0x00010004

0800e724 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b088      	sub	sp, #32
 800e728:	af02      	add	r7, sp, #8
 800e72a:	60f8      	str	r0, [r7, #12]
 800e72c:	4608      	mov	r0, r1
 800e72e:	4611      	mov	r1, r2
 800e730:	461a      	mov	r2, r3
 800e732:	4603      	mov	r3, r0
 800e734:	817b      	strh	r3, [r7, #10]
 800e736:	460b      	mov	r3, r1
 800e738:	813b      	strh	r3, [r7, #8]
 800e73a:	4613      	mov	r3, r2
 800e73c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	681a      	ldr	r2, [r3, #0]
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e74c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e74e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e750:	9300      	str	r3, [sp, #0]
 800e752:	6a3b      	ldr	r3, [r7, #32]
 800e754:	2200      	movs	r2, #0
 800e756:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e75a:	68f8      	ldr	r0, [r7, #12]
 800e75c:	f000 f960 	bl	800ea20 <I2C_WaitOnFlagUntilTimeout>
 800e760:	4603      	mov	r3, r0
 800e762:	2b00      	cmp	r3, #0
 800e764:	d00d      	beq.n	800e782 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e770:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e774:	d103      	bne.n	800e77e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e77c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800e77e:	2303      	movs	r3, #3
 800e780:	e05f      	b.n	800e842 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e782:	897b      	ldrh	r3, [r7, #10]
 800e784:	b2db      	uxtb	r3, r3
 800e786:	461a      	mov	r2, r3
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800e790:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e794:	6a3a      	ldr	r2, [r7, #32]
 800e796:	492d      	ldr	r1, [pc, #180]	@ (800e84c <I2C_RequestMemoryWrite+0x128>)
 800e798:	68f8      	ldr	r0, [r7, #12]
 800e79a:	f000 f9bb 	bl	800eb14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d001      	beq.n	800e7a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800e7a4:	2301      	movs	r3, #1
 800e7a6:	e04c      	b.n	800e842 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	617b      	str	r3, [r7, #20]
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	695b      	ldr	r3, [r3, #20]
 800e7b2:	617b      	str	r3, [r7, #20]
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	699b      	ldr	r3, [r3, #24]
 800e7ba:	617b      	str	r3, [r7, #20]
 800e7bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e7be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e7c0:	6a39      	ldr	r1, [r7, #32]
 800e7c2:	68f8      	ldr	r0, [r7, #12]
 800e7c4:	f000 fa46 	bl	800ec54 <I2C_WaitOnTXEFlagUntilTimeout>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d00d      	beq.n	800e7ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7d2:	2b04      	cmp	r3, #4
 800e7d4:	d107      	bne.n	800e7e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	681a      	ldr	r2, [r3, #0]
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e7e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	e02b      	b.n	800e842 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e7ea:	88fb      	ldrh	r3, [r7, #6]
 800e7ec:	2b01      	cmp	r3, #1
 800e7ee:	d105      	bne.n	800e7fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e7f0:	893b      	ldrh	r3, [r7, #8]
 800e7f2:	b2da      	uxtb	r2, r3
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	611a      	str	r2, [r3, #16]
 800e7fa:	e021      	b.n	800e840 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800e7fc:	893b      	ldrh	r3, [r7, #8]
 800e7fe:	0a1b      	lsrs	r3, r3, #8
 800e800:	b29b      	uxth	r3, r3
 800e802:	b2da      	uxtb	r2, r3
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e80a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e80c:	6a39      	ldr	r1, [r7, #32]
 800e80e:	68f8      	ldr	r0, [r7, #12]
 800e810:	f000 fa20 	bl	800ec54 <I2C_WaitOnTXEFlagUntilTimeout>
 800e814:	4603      	mov	r3, r0
 800e816:	2b00      	cmp	r3, #0
 800e818:	d00d      	beq.n	800e836 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e81e:	2b04      	cmp	r3, #4
 800e820:	d107      	bne.n	800e832 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	681a      	ldr	r2, [r3, #0]
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e830:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e832:	2301      	movs	r3, #1
 800e834:	e005      	b.n	800e842 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e836:	893b      	ldrh	r3, [r7, #8]
 800e838:	b2da      	uxtb	r2, r3
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800e840:	2300      	movs	r3, #0
}
 800e842:	4618      	mov	r0, r3
 800e844:	3718      	adds	r7, #24
 800e846:	46bd      	mov	sp, r7
 800e848:	bd80      	pop	{r7, pc}
 800e84a:	bf00      	nop
 800e84c:	00010002 	.word	0x00010002

0800e850 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b088      	sub	sp, #32
 800e854:	af02      	add	r7, sp, #8
 800e856:	60f8      	str	r0, [r7, #12]
 800e858:	4608      	mov	r0, r1
 800e85a:	4611      	mov	r1, r2
 800e85c:	461a      	mov	r2, r3
 800e85e:	4603      	mov	r3, r0
 800e860:	817b      	strh	r3, [r7, #10]
 800e862:	460b      	mov	r3, r1
 800e864:	813b      	strh	r3, [r7, #8]
 800e866:	4613      	mov	r3, r2
 800e868:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	681a      	ldr	r2, [r3, #0]
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e878:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	681a      	ldr	r2, [r3, #0]
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e888:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e88c:	9300      	str	r3, [sp, #0]
 800e88e:	6a3b      	ldr	r3, [r7, #32]
 800e890:	2200      	movs	r2, #0
 800e892:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e896:	68f8      	ldr	r0, [r7, #12]
 800e898:	f000 f8c2 	bl	800ea20 <I2C_WaitOnFlagUntilTimeout>
 800e89c:	4603      	mov	r3, r0
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d00d      	beq.n	800e8be <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e8ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e8b0:	d103      	bne.n	800e8ba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e8b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800e8ba:	2303      	movs	r3, #3
 800e8bc:	e0aa      	b.n	800ea14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e8be:	897b      	ldrh	r3, [r7, #10]
 800e8c0:	b2db      	uxtb	r3, r3
 800e8c2:	461a      	mov	r2, r3
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800e8cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e8ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8d0:	6a3a      	ldr	r2, [r7, #32]
 800e8d2:	4952      	ldr	r1, [pc, #328]	@ (800ea1c <I2C_RequestMemoryRead+0x1cc>)
 800e8d4:	68f8      	ldr	r0, [r7, #12]
 800e8d6:	f000 f91d 	bl	800eb14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d001      	beq.n	800e8e4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800e8e0:	2301      	movs	r3, #1
 800e8e2:	e097      	b.n	800ea14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	617b      	str	r3, [r7, #20]
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	695b      	ldr	r3, [r3, #20]
 800e8ee:	617b      	str	r3, [r7, #20]
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	699b      	ldr	r3, [r3, #24]
 800e8f6:	617b      	str	r3, [r7, #20]
 800e8f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e8fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e8fc:	6a39      	ldr	r1, [r7, #32]
 800e8fe:	68f8      	ldr	r0, [r7, #12]
 800e900:	f000 f9a8 	bl	800ec54 <I2C_WaitOnTXEFlagUntilTimeout>
 800e904:	4603      	mov	r3, r0
 800e906:	2b00      	cmp	r3, #0
 800e908:	d00d      	beq.n	800e926 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e90e:	2b04      	cmp	r3, #4
 800e910:	d107      	bne.n	800e922 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	681a      	ldr	r2, [r3, #0]
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e920:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e922:	2301      	movs	r3, #1
 800e924:	e076      	b.n	800ea14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e926:	88fb      	ldrh	r3, [r7, #6]
 800e928:	2b01      	cmp	r3, #1
 800e92a:	d105      	bne.n	800e938 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e92c:	893b      	ldrh	r3, [r7, #8]
 800e92e:	b2da      	uxtb	r2, r3
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	611a      	str	r2, [r3, #16]
 800e936:	e021      	b.n	800e97c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800e938:	893b      	ldrh	r3, [r7, #8]
 800e93a:	0a1b      	lsrs	r3, r3, #8
 800e93c:	b29b      	uxth	r3, r3
 800e93e:	b2da      	uxtb	r2, r3
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e948:	6a39      	ldr	r1, [r7, #32]
 800e94a:	68f8      	ldr	r0, [r7, #12]
 800e94c:	f000 f982 	bl	800ec54 <I2C_WaitOnTXEFlagUntilTimeout>
 800e950:	4603      	mov	r3, r0
 800e952:	2b00      	cmp	r3, #0
 800e954:	d00d      	beq.n	800e972 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e95a:	2b04      	cmp	r3, #4
 800e95c:	d107      	bne.n	800e96e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	681a      	ldr	r2, [r3, #0]
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e96c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e96e:	2301      	movs	r3, #1
 800e970:	e050      	b.n	800ea14 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e972:	893b      	ldrh	r3, [r7, #8]
 800e974:	b2da      	uxtb	r2, r3
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e97c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e97e:	6a39      	ldr	r1, [r7, #32]
 800e980:	68f8      	ldr	r0, [r7, #12]
 800e982:	f000 f967 	bl	800ec54 <I2C_WaitOnTXEFlagUntilTimeout>
 800e986:	4603      	mov	r3, r0
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d00d      	beq.n	800e9a8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e990:	2b04      	cmp	r3, #4
 800e992:	d107      	bne.n	800e9a4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	681a      	ldr	r2, [r3, #0]
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e9a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e9a4:	2301      	movs	r3, #1
 800e9a6:	e035      	b.n	800ea14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	681a      	ldr	r2, [r3, #0]
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e9b6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9ba:	9300      	str	r3, [sp, #0]
 800e9bc:	6a3b      	ldr	r3, [r7, #32]
 800e9be:	2200      	movs	r2, #0
 800e9c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e9c4:	68f8      	ldr	r0, [r7, #12]
 800e9c6:	f000 f82b 	bl	800ea20 <I2C_WaitOnFlagUntilTimeout>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d00d      	beq.n	800e9ec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e9da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e9de:	d103      	bne.n	800e9e8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e9e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800e9e8:	2303      	movs	r3, #3
 800e9ea:	e013      	b.n	800ea14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e9ec:	897b      	ldrh	r3, [r7, #10]
 800e9ee:	b2db      	uxtb	r3, r3
 800e9f0:	f043 0301 	orr.w	r3, r3, #1
 800e9f4:	b2da      	uxtb	r2, r3
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9fe:	6a3a      	ldr	r2, [r7, #32]
 800ea00:	4906      	ldr	r1, [pc, #24]	@ (800ea1c <I2C_RequestMemoryRead+0x1cc>)
 800ea02:	68f8      	ldr	r0, [r7, #12]
 800ea04:	f000 f886 	bl	800eb14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ea08:	4603      	mov	r3, r0
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d001      	beq.n	800ea12 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800ea0e:	2301      	movs	r3, #1
 800ea10:	e000      	b.n	800ea14 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800ea12:	2300      	movs	r3, #0
}
 800ea14:	4618      	mov	r0, r3
 800ea16:	3718      	adds	r7, #24
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}
 800ea1c:	00010002 	.word	0x00010002

0800ea20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b084      	sub	sp, #16
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	60f8      	str	r0, [r7, #12]
 800ea28:	60b9      	str	r1, [r7, #8]
 800ea2a:	603b      	str	r3, [r7, #0]
 800ea2c:	4613      	mov	r3, r2
 800ea2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ea30:	e048      	b.n	800eac4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea38:	d044      	beq.n	800eac4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ea3a:	f7fe fbbf 	bl	800d1bc <HAL_GetTick>
 800ea3e:	4602      	mov	r2, r0
 800ea40:	69bb      	ldr	r3, [r7, #24]
 800ea42:	1ad3      	subs	r3, r2, r3
 800ea44:	683a      	ldr	r2, [r7, #0]
 800ea46:	429a      	cmp	r2, r3
 800ea48:	d302      	bcc.n	800ea50 <I2C_WaitOnFlagUntilTimeout+0x30>
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d139      	bne.n	800eac4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ea50:	68bb      	ldr	r3, [r7, #8]
 800ea52:	0c1b      	lsrs	r3, r3, #16
 800ea54:	b2db      	uxtb	r3, r3
 800ea56:	2b01      	cmp	r3, #1
 800ea58:	d10d      	bne.n	800ea76 <I2C_WaitOnFlagUntilTimeout+0x56>
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	695b      	ldr	r3, [r3, #20]
 800ea60:	43da      	mvns	r2, r3
 800ea62:	68bb      	ldr	r3, [r7, #8]
 800ea64:	4013      	ands	r3, r2
 800ea66:	b29b      	uxth	r3, r3
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	bf0c      	ite	eq
 800ea6c:	2301      	moveq	r3, #1
 800ea6e:	2300      	movne	r3, #0
 800ea70:	b2db      	uxtb	r3, r3
 800ea72:	461a      	mov	r2, r3
 800ea74:	e00c      	b.n	800ea90 <I2C_WaitOnFlagUntilTimeout+0x70>
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	699b      	ldr	r3, [r3, #24]
 800ea7c:	43da      	mvns	r2, r3
 800ea7e:	68bb      	ldr	r3, [r7, #8]
 800ea80:	4013      	ands	r3, r2
 800ea82:	b29b      	uxth	r3, r3
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	bf0c      	ite	eq
 800ea88:	2301      	moveq	r3, #1
 800ea8a:	2300      	movne	r3, #0
 800ea8c:	b2db      	uxtb	r3, r3
 800ea8e:	461a      	mov	r2, r3
 800ea90:	79fb      	ldrb	r3, [r7, #7]
 800ea92:	429a      	cmp	r2, r3
 800ea94:	d116      	bne.n	800eac4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	2200      	movs	r2, #0
 800ea9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	2220      	movs	r2, #32
 800eaa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eab0:	f043 0220 	orr.w	r2, r3, #32
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	2200      	movs	r2, #0
 800eabc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800eac0:	2301      	movs	r3, #1
 800eac2:	e023      	b.n	800eb0c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800eac4:	68bb      	ldr	r3, [r7, #8]
 800eac6:	0c1b      	lsrs	r3, r3, #16
 800eac8:	b2db      	uxtb	r3, r3
 800eaca:	2b01      	cmp	r3, #1
 800eacc:	d10d      	bne.n	800eaea <I2C_WaitOnFlagUntilTimeout+0xca>
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	695b      	ldr	r3, [r3, #20]
 800ead4:	43da      	mvns	r2, r3
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	4013      	ands	r3, r2
 800eada:	b29b      	uxth	r3, r3
 800eadc:	2b00      	cmp	r3, #0
 800eade:	bf0c      	ite	eq
 800eae0:	2301      	moveq	r3, #1
 800eae2:	2300      	movne	r3, #0
 800eae4:	b2db      	uxtb	r3, r3
 800eae6:	461a      	mov	r2, r3
 800eae8:	e00c      	b.n	800eb04 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	699b      	ldr	r3, [r3, #24]
 800eaf0:	43da      	mvns	r2, r3
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	4013      	ands	r3, r2
 800eaf6:	b29b      	uxth	r3, r3
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	bf0c      	ite	eq
 800eafc:	2301      	moveq	r3, #1
 800eafe:	2300      	movne	r3, #0
 800eb00:	b2db      	uxtb	r3, r3
 800eb02:	461a      	mov	r2, r3
 800eb04:	79fb      	ldrb	r3, [r7, #7]
 800eb06:	429a      	cmp	r2, r3
 800eb08:	d093      	beq.n	800ea32 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800eb0a:	2300      	movs	r3, #0
}
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	3710      	adds	r7, #16
 800eb10:	46bd      	mov	sp, r7
 800eb12:	bd80      	pop	{r7, pc}

0800eb14 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b084      	sub	sp, #16
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	60f8      	str	r0, [r7, #12]
 800eb1c:	60b9      	str	r1, [r7, #8]
 800eb1e:	607a      	str	r2, [r7, #4]
 800eb20:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800eb22:	e071      	b.n	800ec08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	695b      	ldr	r3, [r3, #20]
 800eb2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800eb2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800eb32:	d123      	bne.n	800eb7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	681a      	ldr	r2, [r3, #0]
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800eb42:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800eb4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	2200      	movs	r2, #0
 800eb52:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	2220      	movs	r2, #32
 800eb58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	2200      	movs	r2, #0
 800eb60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb68:	f043 0204 	orr.w	r2, r3, #4
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	2200      	movs	r2, #0
 800eb74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800eb78:	2301      	movs	r3, #1
 800eb7a:	e067      	b.n	800ec4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb82:	d041      	beq.n	800ec08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eb84:	f7fe fb1a 	bl	800d1bc <HAL_GetTick>
 800eb88:	4602      	mov	r2, r0
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	1ad3      	subs	r3, r2, r3
 800eb8e:	687a      	ldr	r2, [r7, #4]
 800eb90:	429a      	cmp	r2, r3
 800eb92:	d302      	bcc.n	800eb9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d136      	bne.n	800ec08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800eb9a:	68bb      	ldr	r3, [r7, #8]
 800eb9c:	0c1b      	lsrs	r3, r3, #16
 800eb9e:	b2db      	uxtb	r3, r3
 800eba0:	2b01      	cmp	r3, #1
 800eba2:	d10c      	bne.n	800ebbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	695b      	ldr	r3, [r3, #20]
 800ebaa:	43da      	mvns	r2, r3
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	4013      	ands	r3, r2
 800ebb0:	b29b      	uxth	r3, r3
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	bf14      	ite	ne
 800ebb6:	2301      	movne	r3, #1
 800ebb8:	2300      	moveq	r3, #0
 800ebba:	b2db      	uxtb	r3, r3
 800ebbc:	e00b      	b.n	800ebd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	699b      	ldr	r3, [r3, #24]
 800ebc4:	43da      	mvns	r2, r3
 800ebc6:	68bb      	ldr	r3, [r7, #8]
 800ebc8:	4013      	ands	r3, r2
 800ebca:	b29b      	uxth	r3, r3
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	bf14      	ite	ne
 800ebd0:	2301      	movne	r3, #1
 800ebd2:	2300      	moveq	r3, #0
 800ebd4:	b2db      	uxtb	r3, r3
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d016      	beq.n	800ec08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	2200      	movs	r2, #0
 800ebde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	2220      	movs	r2, #32
 800ebe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	2200      	movs	r2, #0
 800ebec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ebf4:	f043 0220 	orr.w	r2, r3, #32
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	2200      	movs	r2, #0
 800ec00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800ec04:	2301      	movs	r3, #1
 800ec06:	e021      	b.n	800ec4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	0c1b      	lsrs	r3, r3, #16
 800ec0c:	b2db      	uxtb	r3, r3
 800ec0e:	2b01      	cmp	r3, #1
 800ec10:	d10c      	bne.n	800ec2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	695b      	ldr	r3, [r3, #20]
 800ec18:	43da      	mvns	r2, r3
 800ec1a:	68bb      	ldr	r3, [r7, #8]
 800ec1c:	4013      	ands	r3, r2
 800ec1e:	b29b      	uxth	r3, r3
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	bf14      	ite	ne
 800ec24:	2301      	movne	r3, #1
 800ec26:	2300      	moveq	r3, #0
 800ec28:	b2db      	uxtb	r3, r3
 800ec2a:	e00b      	b.n	800ec44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	699b      	ldr	r3, [r3, #24]
 800ec32:	43da      	mvns	r2, r3
 800ec34:	68bb      	ldr	r3, [r7, #8]
 800ec36:	4013      	ands	r3, r2
 800ec38:	b29b      	uxth	r3, r3
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	bf14      	ite	ne
 800ec3e:	2301      	movne	r3, #1
 800ec40:	2300      	moveq	r3, #0
 800ec42:	b2db      	uxtb	r3, r3
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	f47f af6d 	bne.w	800eb24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800ec4a:	2300      	movs	r3, #0
}
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	3710      	adds	r7, #16
 800ec50:	46bd      	mov	sp, r7
 800ec52:	bd80      	pop	{r7, pc}

0800ec54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b084      	sub	sp, #16
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	60f8      	str	r0, [r7, #12]
 800ec5c:	60b9      	str	r1, [r7, #8]
 800ec5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ec60:	e034      	b.n	800eccc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ec62:	68f8      	ldr	r0, [r7, #12]
 800ec64:	f000 f8e3 	bl	800ee2e <I2C_IsAcknowledgeFailed>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d001      	beq.n	800ec72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ec6e:	2301      	movs	r3, #1
 800ec70:	e034      	b.n	800ecdc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ec72:	68bb      	ldr	r3, [r7, #8]
 800ec74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec78:	d028      	beq.n	800eccc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ec7a:	f7fe fa9f 	bl	800d1bc <HAL_GetTick>
 800ec7e:	4602      	mov	r2, r0
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	1ad3      	subs	r3, r2, r3
 800ec84:	68ba      	ldr	r2, [r7, #8]
 800ec86:	429a      	cmp	r2, r3
 800ec88:	d302      	bcc.n	800ec90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800ec8a:	68bb      	ldr	r3, [r7, #8]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d11d      	bne.n	800eccc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	695b      	ldr	r3, [r3, #20]
 800ec96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ec9a:	2b80      	cmp	r3, #128	@ 0x80
 800ec9c:	d016      	beq.n	800eccc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	2200      	movs	r2, #0
 800eca2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	2220      	movs	r2, #32
 800eca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	2200      	movs	r2, #0
 800ecb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ecb8:	f043 0220 	orr.w	r2, r3, #32
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800ecc8:	2301      	movs	r3, #1
 800ecca:	e007      	b.n	800ecdc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	695b      	ldr	r3, [r3, #20]
 800ecd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ecd6:	2b80      	cmp	r3, #128	@ 0x80
 800ecd8:	d1c3      	bne.n	800ec62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ecda:	2300      	movs	r3, #0
}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	3710      	adds	r7, #16
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd80      	pop	{r7, pc}

0800ece4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b084      	sub	sp, #16
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	60f8      	str	r0, [r7, #12]
 800ecec:	60b9      	str	r1, [r7, #8]
 800ecee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ecf0:	e034      	b.n	800ed5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ecf2:	68f8      	ldr	r0, [r7, #12]
 800ecf4:	f000 f89b 	bl	800ee2e <I2C_IsAcknowledgeFailed>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d001      	beq.n	800ed02 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ecfe:	2301      	movs	r3, #1
 800ed00:	e034      	b.n	800ed6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ed02:	68bb      	ldr	r3, [r7, #8]
 800ed04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed08:	d028      	beq.n	800ed5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ed0a:	f7fe fa57 	bl	800d1bc <HAL_GetTick>
 800ed0e:	4602      	mov	r2, r0
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	1ad3      	subs	r3, r2, r3
 800ed14:	68ba      	ldr	r2, [r7, #8]
 800ed16:	429a      	cmp	r2, r3
 800ed18:	d302      	bcc.n	800ed20 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ed1a:	68bb      	ldr	r3, [r7, #8]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d11d      	bne.n	800ed5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	695b      	ldr	r3, [r3, #20]
 800ed26:	f003 0304 	and.w	r3, r3, #4
 800ed2a:	2b04      	cmp	r3, #4
 800ed2c:	d016      	beq.n	800ed5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	2200      	movs	r2, #0
 800ed32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	2220      	movs	r2, #32
 800ed38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	2200      	movs	r2, #0
 800ed40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed48:	f043 0220 	orr.w	r2, r3, #32
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	2200      	movs	r2, #0
 800ed54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800ed58:	2301      	movs	r3, #1
 800ed5a:	e007      	b.n	800ed6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	695b      	ldr	r3, [r3, #20]
 800ed62:	f003 0304 	and.w	r3, r3, #4
 800ed66:	2b04      	cmp	r3, #4
 800ed68:	d1c3      	bne.n	800ecf2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ed6a:	2300      	movs	r3, #0
}
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	3710      	adds	r7, #16
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bd80      	pop	{r7, pc}

0800ed74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b084      	sub	sp, #16
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	60f8      	str	r0, [r7, #12]
 800ed7c:	60b9      	str	r1, [r7, #8]
 800ed7e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ed80:	e049      	b.n	800ee16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	695b      	ldr	r3, [r3, #20]
 800ed88:	f003 0310 	and.w	r3, r3, #16
 800ed8c:	2b10      	cmp	r3, #16
 800ed8e:	d119      	bne.n	800edc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	f06f 0210 	mvn.w	r2, #16
 800ed98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	2220      	movs	r2, #32
 800eda4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	2200      	movs	r2, #0
 800edac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	2200      	movs	r2, #0
 800edbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800edc0:	2301      	movs	r3, #1
 800edc2:	e030      	b.n	800ee26 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800edc4:	f7fe f9fa 	bl	800d1bc <HAL_GetTick>
 800edc8:	4602      	mov	r2, r0
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	1ad3      	subs	r3, r2, r3
 800edce:	68ba      	ldr	r2, [r7, #8]
 800edd0:	429a      	cmp	r2, r3
 800edd2:	d302      	bcc.n	800edda <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800edd4:	68bb      	ldr	r3, [r7, #8]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d11d      	bne.n	800ee16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	695b      	ldr	r3, [r3, #20]
 800ede0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ede4:	2b40      	cmp	r3, #64	@ 0x40
 800ede6:	d016      	beq.n	800ee16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	2200      	movs	r2, #0
 800edec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	2220      	movs	r2, #32
 800edf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	2200      	movs	r2, #0
 800edfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee02:	f043 0220 	orr.w	r2, r3, #32
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800ee12:	2301      	movs	r3, #1
 800ee14:	e007      	b.n	800ee26 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	695b      	ldr	r3, [r3, #20]
 800ee1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee20:	2b40      	cmp	r3, #64	@ 0x40
 800ee22:	d1ae      	bne.n	800ed82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ee24:	2300      	movs	r3, #0
}
 800ee26:	4618      	mov	r0, r3
 800ee28:	3710      	adds	r7, #16
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bd80      	pop	{r7, pc}

0800ee2e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ee2e:	b480      	push	{r7}
 800ee30:	b083      	sub	sp, #12
 800ee32:	af00      	add	r7, sp, #0
 800ee34:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	695b      	ldr	r3, [r3, #20]
 800ee3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ee40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ee44:	d11b      	bne.n	800ee7e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ee4e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2200      	movs	r2, #0
 800ee54:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	2220      	movs	r2, #32
 800ee5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	2200      	movs	r2, #0
 800ee62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee6a:	f043 0204 	orr.w	r2, r3, #4
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	2200      	movs	r2, #0
 800ee76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800ee7a:	2301      	movs	r3, #1
 800ee7c:	e000      	b.n	800ee80 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ee7e:	2300      	movs	r3, #0
}
 800ee80:	4618      	mov	r0, r3
 800ee82:	370c      	adds	r7, #12
 800ee84:	46bd      	mov	sp, r7
 800ee86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8a:	4770      	bx	lr

0800ee8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b086      	sub	sp, #24
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d101      	bne.n	800ee9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ee9a:	2301      	movs	r3, #1
 800ee9c:	e267      	b.n	800f36e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	f003 0301 	and.w	r3, r3, #1
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d075      	beq.n	800ef96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800eeaa:	4b88      	ldr	r3, [pc, #544]	@ (800f0cc <HAL_RCC_OscConfig+0x240>)
 800eeac:	689b      	ldr	r3, [r3, #8]
 800eeae:	f003 030c 	and.w	r3, r3, #12
 800eeb2:	2b04      	cmp	r3, #4
 800eeb4:	d00c      	beq.n	800eed0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800eeb6:	4b85      	ldr	r3, [pc, #532]	@ (800f0cc <HAL_RCC_OscConfig+0x240>)
 800eeb8:	689b      	ldr	r3, [r3, #8]
 800eeba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800eebe:	2b08      	cmp	r3, #8
 800eec0:	d112      	bne.n	800eee8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800eec2:	4b82      	ldr	r3, [pc, #520]	@ (800f0cc <HAL_RCC_OscConfig+0x240>)
 800eec4:	685b      	ldr	r3, [r3, #4]
 800eec6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800eeca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800eece:	d10b      	bne.n	800eee8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800eed0:	4b7e      	ldr	r3, [pc, #504]	@ (800f0cc <HAL_RCC_OscConfig+0x240>)
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d05b      	beq.n	800ef94 <HAL_RCC_OscConfig+0x108>
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	685b      	ldr	r3, [r3, #4]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d157      	bne.n	800ef94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800eee4:	2301      	movs	r3, #1
 800eee6:	e242      	b.n	800f36e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	685b      	ldr	r3, [r3, #4]
 800eeec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eef0:	d106      	bne.n	800ef00 <HAL_RCC_OscConfig+0x74>
 800eef2:	4b76      	ldr	r3, [pc, #472]	@ (800f0cc <HAL_RCC_OscConfig+0x240>)
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	4a75      	ldr	r2, [pc, #468]	@ (800f0cc <HAL_RCC_OscConfig+0x240>)
 800eef8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800eefc:	6013      	str	r3, [r2, #0]
 800eefe:	e01d      	b.n	800ef3c <HAL_RCC_OscConfig+0xb0>
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	685b      	ldr	r3, [r3, #4]
 800ef04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ef08:	d10c      	bne.n	800ef24 <HAL_RCC_OscConfig+0x98>
 800ef0a:	4b70      	ldr	r3, [pc, #448]	@ (800f0cc <HAL_RCC_OscConfig+0x240>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	4a6f      	ldr	r2, [pc, #444]	@ (800f0cc <HAL_RCC_OscConfig+0x240>)
 800ef10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ef14:	6013      	str	r3, [r2, #0]
 800ef16:	4b6d      	ldr	r3, [pc, #436]	@ (800f0cc <HAL_RCC_OscConfig+0x240>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	4a6c      	ldr	r2, [pc, #432]	@ (800f0cc <HAL_RCC_OscConfig+0x240>)
 800ef1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ef20:	6013      	str	r3, [r2, #0]
 800ef22:	e00b      	b.n	800ef3c <HAL_RCC_OscConfig+0xb0>
 800ef24:	4b69      	ldr	r3, [pc, #420]	@ (800f0cc <HAL_RCC_OscConfig+0x240>)
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	4a68      	ldr	r2, [pc, #416]	@ (800f0cc <HAL_RCC_OscConfig+0x240>)
 800ef2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ef2e:	6013      	str	r3, [r2, #0]
 800ef30:	4b66      	ldr	r3, [pc, #408]	@ (800f0cc <HAL_RCC_OscConfig+0x240>)
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	4a65      	ldr	r2, [pc, #404]	@ (800f0cc <HAL_RCC_OscConfig+0x240>)
 800ef36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ef3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	685b      	ldr	r3, [r3, #4]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d013      	beq.n	800ef6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ef44:	f7fe f93a 	bl	800d1bc <HAL_GetTick>
 800ef48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ef4a:	e008      	b.n	800ef5e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ef4c:	f7fe f936 	bl	800d1bc <HAL_GetTick>
 800ef50:	4602      	mov	r2, r0
 800ef52:	693b      	ldr	r3, [r7, #16]
 800ef54:	1ad3      	subs	r3, r2, r3
 800ef56:	2b64      	cmp	r3, #100	@ 0x64
 800ef58:	d901      	bls.n	800ef5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ef5a:	2303      	movs	r3, #3
 800ef5c:	e207      	b.n	800f36e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ef5e:	4b5b      	ldr	r3, [pc, #364]	@ (800f0cc <HAL_RCC_OscConfig+0x240>)
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d0f0      	beq.n	800ef4c <HAL_RCC_OscConfig+0xc0>
 800ef6a:	e014      	b.n	800ef96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ef6c:	f7fe f926 	bl	800d1bc <HAL_GetTick>
 800ef70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ef72:	e008      	b.n	800ef86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ef74:	f7fe f922 	bl	800d1bc <HAL_GetTick>
 800ef78:	4602      	mov	r2, r0
 800ef7a:	693b      	ldr	r3, [r7, #16]
 800ef7c:	1ad3      	subs	r3, r2, r3
 800ef7e:	2b64      	cmp	r3, #100	@ 0x64
 800ef80:	d901      	bls.n	800ef86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ef82:	2303      	movs	r3, #3
 800ef84:	e1f3      	b.n	800f36e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ef86:	4b51      	ldr	r3, [pc, #324]	@ (800f0cc <HAL_RCC_OscConfig+0x240>)
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d1f0      	bne.n	800ef74 <HAL_RCC_OscConfig+0xe8>
 800ef92:	e000      	b.n	800ef96 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ef94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	f003 0302 	and.w	r3, r3, #2
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d063      	beq.n	800f06a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800efa2:	4b4a      	ldr	r3, [pc, #296]	@ (800f0cc <HAL_RCC_OscConfig+0x240>)
 800efa4:	689b      	ldr	r3, [r3, #8]
 800efa6:	f003 030c 	and.w	r3, r3, #12
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d00b      	beq.n	800efc6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800efae:	4b47      	ldr	r3, [pc, #284]	@ (800f0cc <HAL_RCC_OscConfig+0x240>)
 800efb0:	689b      	ldr	r3, [r3, #8]
 800efb2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800efb6:	2b08      	cmp	r3, #8
 800efb8:	d11c      	bne.n	800eff4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800efba:	4b44      	ldr	r3, [pc, #272]	@ (800f0cc <HAL_RCC_OscConfig+0x240>)
 800efbc:	685b      	ldr	r3, [r3, #4]
 800efbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d116      	bne.n	800eff4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800efc6:	4b41      	ldr	r3, [pc, #260]	@ (800f0cc <HAL_RCC_OscConfig+0x240>)
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	f003 0302 	and.w	r3, r3, #2
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d005      	beq.n	800efde <HAL_RCC_OscConfig+0x152>
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	68db      	ldr	r3, [r3, #12]
 800efd6:	2b01      	cmp	r3, #1
 800efd8:	d001      	beq.n	800efde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800efda:	2301      	movs	r3, #1
 800efdc:	e1c7      	b.n	800f36e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800efde:	4b3b      	ldr	r3, [pc, #236]	@ (800f0cc <HAL_RCC_OscConfig+0x240>)
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	691b      	ldr	r3, [r3, #16]
 800efea:	00db      	lsls	r3, r3, #3
 800efec:	4937      	ldr	r1, [pc, #220]	@ (800f0cc <HAL_RCC_OscConfig+0x240>)
 800efee:	4313      	orrs	r3, r2
 800eff0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800eff2:	e03a      	b.n	800f06a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	68db      	ldr	r3, [r3, #12]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d020      	beq.n	800f03e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800effc:	4b34      	ldr	r3, [pc, #208]	@ (800f0d0 <HAL_RCC_OscConfig+0x244>)
 800effe:	2201      	movs	r2, #1
 800f000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f002:	f7fe f8db 	bl	800d1bc <HAL_GetTick>
 800f006:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f008:	e008      	b.n	800f01c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f00a:	f7fe f8d7 	bl	800d1bc <HAL_GetTick>
 800f00e:	4602      	mov	r2, r0
 800f010:	693b      	ldr	r3, [r7, #16]
 800f012:	1ad3      	subs	r3, r2, r3
 800f014:	2b02      	cmp	r3, #2
 800f016:	d901      	bls.n	800f01c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800f018:	2303      	movs	r3, #3
 800f01a:	e1a8      	b.n	800f36e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f01c:	4b2b      	ldr	r3, [pc, #172]	@ (800f0cc <HAL_RCC_OscConfig+0x240>)
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	f003 0302 	and.w	r3, r3, #2
 800f024:	2b00      	cmp	r3, #0
 800f026:	d0f0      	beq.n	800f00a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f028:	4b28      	ldr	r3, [pc, #160]	@ (800f0cc <HAL_RCC_OscConfig+0x240>)
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	691b      	ldr	r3, [r3, #16]
 800f034:	00db      	lsls	r3, r3, #3
 800f036:	4925      	ldr	r1, [pc, #148]	@ (800f0cc <HAL_RCC_OscConfig+0x240>)
 800f038:	4313      	orrs	r3, r2
 800f03a:	600b      	str	r3, [r1, #0]
 800f03c:	e015      	b.n	800f06a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f03e:	4b24      	ldr	r3, [pc, #144]	@ (800f0d0 <HAL_RCC_OscConfig+0x244>)
 800f040:	2200      	movs	r2, #0
 800f042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f044:	f7fe f8ba 	bl	800d1bc <HAL_GetTick>
 800f048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f04a:	e008      	b.n	800f05e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f04c:	f7fe f8b6 	bl	800d1bc <HAL_GetTick>
 800f050:	4602      	mov	r2, r0
 800f052:	693b      	ldr	r3, [r7, #16]
 800f054:	1ad3      	subs	r3, r2, r3
 800f056:	2b02      	cmp	r3, #2
 800f058:	d901      	bls.n	800f05e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800f05a:	2303      	movs	r3, #3
 800f05c:	e187      	b.n	800f36e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f05e:	4b1b      	ldr	r3, [pc, #108]	@ (800f0cc <HAL_RCC_OscConfig+0x240>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	f003 0302 	and.w	r3, r3, #2
 800f066:	2b00      	cmp	r3, #0
 800f068:	d1f0      	bne.n	800f04c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	f003 0308 	and.w	r3, r3, #8
 800f072:	2b00      	cmp	r3, #0
 800f074:	d036      	beq.n	800f0e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	695b      	ldr	r3, [r3, #20]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d016      	beq.n	800f0ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f07e:	4b15      	ldr	r3, [pc, #84]	@ (800f0d4 <HAL_RCC_OscConfig+0x248>)
 800f080:	2201      	movs	r2, #1
 800f082:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f084:	f7fe f89a 	bl	800d1bc <HAL_GetTick>
 800f088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f08a:	e008      	b.n	800f09e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f08c:	f7fe f896 	bl	800d1bc <HAL_GetTick>
 800f090:	4602      	mov	r2, r0
 800f092:	693b      	ldr	r3, [r7, #16]
 800f094:	1ad3      	subs	r3, r2, r3
 800f096:	2b02      	cmp	r3, #2
 800f098:	d901      	bls.n	800f09e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800f09a:	2303      	movs	r3, #3
 800f09c:	e167      	b.n	800f36e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f09e:	4b0b      	ldr	r3, [pc, #44]	@ (800f0cc <HAL_RCC_OscConfig+0x240>)
 800f0a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f0a2:	f003 0302 	and.w	r3, r3, #2
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d0f0      	beq.n	800f08c <HAL_RCC_OscConfig+0x200>
 800f0aa:	e01b      	b.n	800f0e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f0ac:	4b09      	ldr	r3, [pc, #36]	@ (800f0d4 <HAL_RCC_OscConfig+0x248>)
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f0b2:	f7fe f883 	bl	800d1bc <HAL_GetTick>
 800f0b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f0b8:	e00e      	b.n	800f0d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f0ba:	f7fe f87f 	bl	800d1bc <HAL_GetTick>
 800f0be:	4602      	mov	r2, r0
 800f0c0:	693b      	ldr	r3, [r7, #16]
 800f0c2:	1ad3      	subs	r3, r2, r3
 800f0c4:	2b02      	cmp	r3, #2
 800f0c6:	d907      	bls.n	800f0d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800f0c8:	2303      	movs	r3, #3
 800f0ca:	e150      	b.n	800f36e <HAL_RCC_OscConfig+0x4e2>
 800f0cc:	40023800 	.word	0x40023800
 800f0d0:	42470000 	.word	0x42470000
 800f0d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f0d8:	4b88      	ldr	r3, [pc, #544]	@ (800f2fc <HAL_RCC_OscConfig+0x470>)
 800f0da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f0dc:	f003 0302 	and.w	r3, r3, #2
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d1ea      	bne.n	800f0ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	f003 0304 	and.w	r3, r3, #4
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	f000 8097 	beq.w	800f220 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f0f6:	4b81      	ldr	r3, [pc, #516]	@ (800f2fc <HAL_RCC_OscConfig+0x470>)
 800f0f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f0fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d10f      	bne.n	800f122 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f102:	2300      	movs	r3, #0
 800f104:	60bb      	str	r3, [r7, #8]
 800f106:	4b7d      	ldr	r3, [pc, #500]	@ (800f2fc <HAL_RCC_OscConfig+0x470>)
 800f108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f10a:	4a7c      	ldr	r2, [pc, #496]	@ (800f2fc <HAL_RCC_OscConfig+0x470>)
 800f10c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f110:	6413      	str	r3, [r2, #64]	@ 0x40
 800f112:	4b7a      	ldr	r3, [pc, #488]	@ (800f2fc <HAL_RCC_OscConfig+0x470>)
 800f114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f116:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f11a:	60bb      	str	r3, [r7, #8]
 800f11c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f11e:	2301      	movs	r3, #1
 800f120:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f122:	4b77      	ldr	r3, [pc, #476]	@ (800f300 <HAL_RCC_OscConfig+0x474>)
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d118      	bne.n	800f160 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f12e:	4b74      	ldr	r3, [pc, #464]	@ (800f300 <HAL_RCC_OscConfig+0x474>)
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	4a73      	ldr	r2, [pc, #460]	@ (800f300 <HAL_RCC_OscConfig+0x474>)
 800f134:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f138:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f13a:	f7fe f83f 	bl	800d1bc <HAL_GetTick>
 800f13e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f140:	e008      	b.n	800f154 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f142:	f7fe f83b 	bl	800d1bc <HAL_GetTick>
 800f146:	4602      	mov	r2, r0
 800f148:	693b      	ldr	r3, [r7, #16]
 800f14a:	1ad3      	subs	r3, r2, r3
 800f14c:	2b02      	cmp	r3, #2
 800f14e:	d901      	bls.n	800f154 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800f150:	2303      	movs	r3, #3
 800f152:	e10c      	b.n	800f36e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f154:	4b6a      	ldr	r3, [pc, #424]	@ (800f300 <HAL_RCC_OscConfig+0x474>)
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d0f0      	beq.n	800f142 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	689b      	ldr	r3, [r3, #8]
 800f164:	2b01      	cmp	r3, #1
 800f166:	d106      	bne.n	800f176 <HAL_RCC_OscConfig+0x2ea>
 800f168:	4b64      	ldr	r3, [pc, #400]	@ (800f2fc <HAL_RCC_OscConfig+0x470>)
 800f16a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f16c:	4a63      	ldr	r2, [pc, #396]	@ (800f2fc <HAL_RCC_OscConfig+0x470>)
 800f16e:	f043 0301 	orr.w	r3, r3, #1
 800f172:	6713      	str	r3, [r2, #112]	@ 0x70
 800f174:	e01c      	b.n	800f1b0 <HAL_RCC_OscConfig+0x324>
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	689b      	ldr	r3, [r3, #8]
 800f17a:	2b05      	cmp	r3, #5
 800f17c:	d10c      	bne.n	800f198 <HAL_RCC_OscConfig+0x30c>
 800f17e:	4b5f      	ldr	r3, [pc, #380]	@ (800f2fc <HAL_RCC_OscConfig+0x470>)
 800f180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f182:	4a5e      	ldr	r2, [pc, #376]	@ (800f2fc <HAL_RCC_OscConfig+0x470>)
 800f184:	f043 0304 	orr.w	r3, r3, #4
 800f188:	6713      	str	r3, [r2, #112]	@ 0x70
 800f18a:	4b5c      	ldr	r3, [pc, #368]	@ (800f2fc <HAL_RCC_OscConfig+0x470>)
 800f18c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f18e:	4a5b      	ldr	r2, [pc, #364]	@ (800f2fc <HAL_RCC_OscConfig+0x470>)
 800f190:	f043 0301 	orr.w	r3, r3, #1
 800f194:	6713      	str	r3, [r2, #112]	@ 0x70
 800f196:	e00b      	b.n	800f1b0 <HAL_RCC_OscConfig+0x324>
 800f198:	4b58      	ldr	r3, [pc, #352]	@ (800f2fc <HAL_RCC_OscConfig+0x470>)
 800f19a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f19c:	4a57      	ldr	r2, [pc, #348]	@ (800f2fc <HAL_RCC_OscConfig+0x470>)
 800f19e:	f023 0301 	bic.w	r3, r3, #1
 800f1a2:	6713      	str	r3, [r2, #112]	@ 0x70
 800f1a4:	4b55      	ldr	r3, [pc, #340]	@ (800f2fc <HAL_RCC_OscConfig+0x470>)
 800f1a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f1a8:	4a54      	ldr	r2, [pc, #336]	@ (800f2fc <HAL_RCC_OscConfig+0x470>)
 800f1aa:	f023 0304 	bic.w	r3, r3, #4
 800f1ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	689b      	ldr	r3, [r3, #8]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d015      	beq.n	800f1e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f1b8:	f7fe f800 	bl	800d1bc <HAL_GetTick>
 800f1bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f1be:	e00a      	b.n	800f1d6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f1c0:	f7fd fffc 	bl	800d1bc <HAL_GetTick>
 800f1c4:	4602      	mov	r2, r0
 800f1c6:	693b      	ldr	r3, [r7, #16]
 800f1c8:	1ad3      	subs	r3, r2, r3
 800f1ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f1ce:	4293      	cmp	r3, r2
 800f1d0:	d901      	bls.n	800f1d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800f1d2:	2303      	movs	r3, #3
 800f1d4:	e0cb      	b.n	800f36e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f1d6:	4b49      	ldr	r3, [pc, #292]	@ (800f2fc <HAL_RCC_OscConfig+0x470>)
 800f1d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f1da:	f003 0302 	and.w	r3, r3, #2
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d0ee      	beq.n	800f1c0 <HAL_RCC_OscConfig+0x334>
 800f1e2:	e014      	b.n	800f20e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f1e4:	f7fd ffea 	bl	800d1bc <HAL_GetTick>
 800f1e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f1ea:	e00a      	b.n	800f202 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f1ec:	f7fd ffe6 	bl	800d1bc <HAL_GetTick>
 800f1f0:	4602      	mov	r2, r0
 800f1f2:	693b      	ldr	r3, [r7, #16]
 800f1f4:	1ad3      	subs	r3, r2, r3
 800f1f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f1fa:	4293      	cmp	r3, r2
 800f1fc:	d901      	bls.n	800f202 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800f1fe:	2303      	movs	r3, #3
 800f200:	e0b5      	b.n	800f36e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f202:	4b3e      	ldr	r3, [pc, #248]	@ (800f2fc <HAL_RCC_OscConfig+0x470>)
 800f204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f206:	f003 0302 	and.w	r3, r3, #2
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d1ee      	bne.n	800f1ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800f20e:	7dfb      	ldrb	r3, [r7, #23]
 800f210:	2b01      	cmp	r3, #1
 800f212:	d105      	bne.n	800f220 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f214:	4b39      	ldr	r3, [pc, #228]	@ (800f2fc <HAL_RCC_OscConfig+0x470>)
 800f216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f218:	4a38      	ldr	r2, [pc, #224]	@ (800f2fc <HAL_RCC_OscConfig+0x470>)
 800f21a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f21e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	699b      	ldr	r3, [r3, #24]
 800f224:	2b00      	cmp	r3, #0
 800f226:	f000 80a1 	beq.w	800f36c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800f22a:	4b34      	ldr	r3, [pc, #208]	@ (800f2fc <HAL_RCC_OscConfig+0x470>)
 800f22c:	689b      	ldr	r3, [r3, #8]
 800f22e:	f003 030c 	and.w	r3, r3, #12
 800f232:	2b08      	cmp	r3, #8
 800f234:	d05c      	beq.n	800f2f0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	699b      	ldr	r3, [r3, #24]
 800f23a:	2b02      	cmp	r3, #2
 800f23c:	d141      	bne.n	800f2c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f23e:	4b31      	ldr	r3, [pc, #196]	@ (800f304 <HAL_RCC_OscConfig+0x478>)
 800f240:	2200      	movs	r2, #0
 800f242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f244:	f7fd ffba 	bl	800d1bc <HAL_GetTick>
 800f248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f24a:	e008      	b.n	800f25e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f24c:	f7fd ffb6 	bl	800d1bc <HAL_GetTick>
 800f250:	4602      	mov	r2, r0
 800f252:	693b      	ldr	r3, [r7, #16]
 800f254:	1ad3      	subs	r3, r2, r3
 800f256:	2b02      	cmp	r3, #2
 800f258:	d901      	bls.n	800f25e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800f25a:	2303      	movs	r3, #3
 800f25c:	e087      	b.n	800f36e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f25e:	4b27      	ldr	r3, [pc, #156]	@ (800f2fc <HAL_RCC_OscConfig+0x470>)
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f266:	2b00      	cmp	r3, #0
 800f268:	d1f0      	bne.n	800f24c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	69da      	ldr	r2, [r3, #28]
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	6a1b      	ldr	r3, [r3, #32]
 800f272:	431a      	orrs	r2, r3
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f278:	019b      	lsls	r3, r3, #6
 800f27a:	431a      	orrs	r2, r3
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f280:	085b      	lsrs	r3, r3, #1
 800f282:	3b01      	subs	r3, #1
 800f284:	041b      	lsls	r3, r3, #16
 800f286:	431a      	orrs	r2, r3
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f28c:	061b      	lsls	r3, r3, #24
 800f28e:	491b      	ldr	r1, [pc, #108]	@ (800f2fc <HAL_RCC_OscConfig+0x470>)
 800f290:	4313      	orrs	r3, r2
 800f292:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f294:	4b1b      	ldr	r3, [pc, #108]	@ (800f304 <HAL_RCC_OscConfig+0x478>)
 800f296:	2201      	movs	r2, #1
 800f298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f29a:	f7fd ff8f 	bl	800d1bc <HAL_GetTick>
 800f29e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f2a0:	e008      	b.n	800f2b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f2a2:	f7fd ff8b 	bl	800d1bc <HAL_GetTick>
 800f2a6:	4602      	mov	r2, r0
 800f2a8:	693b      	ldr	r3, [r7, #16]
 800f2aa:	1ad3      	subs	r3, r2, r3
 800f2ac:	2b02      	cmp	r3, #2
 800f2ae:	d901      	bls.n	800f2b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800f2b0:	2303      	movs	r3, #3
 800f2b2:	e05c      	b.n	800f36e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f2b4:	4b11      	ldr	r3, [pc, #68]	@ (800f2fc <HAL_RCC_OscConfig+0x470>)
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d0f0      	beq.n	800f2a2 <HAL_RCC_OscConfig+0x416>
 800f2c0:	e054      	b.n	800f36c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f2c2:	4b10      	ldr	r3, [pc, #64]	@ (800f304 <HAL_RCC_OscConfig+0x478>)
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f2c8:	f7fd ff78 	bl	800d1bc <HAL_GetTick>
 800f2cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f2ce:	e008      	b.n	800f2e2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f2d0:	f7fd ff74 	bl	800d1bc <HAL_GetTick>
 800f2d4:	4602      	mov	r2, r0
 800f2d6:	693b      	ldr	r3, [r7, #16]
 800f2d8:	1ad3      	subs	r3, r2, r3
 800f2da:	2b02      	cmp	r3, #2
 800f2dc:	d901      	bls.n	800f2e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800f2de:	2303      	movs	r3, #3
 800f2e0:	e045      	b.n	800f36e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f2e2:	4b06      	ldr	r3, [pc, #24]	@ (800f2fc <HAL_RCC_OscConfig+0x470>)
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d1f0      	bne.n	800f2d0 <HAL_RCC_OscConfig+0x444>
 800f2ee:	e03d      	b.n	800f36c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	699b      	ldr	r3, [r3, #24]
 800f2f4:	2b01      	cmp	r3, #1
 800f2f6:	d107      	bne.n	800f308 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800f2f8:	2301      	movs	r3, #1
 800f2fa:	e038      	b.n	800f36e <HAL_RCC_OscConfig+0x4e2>
 800f2fc:	40023800 	.word	0x40023800
 800f300:	40007000 	.word	0x40007000
 800f304:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800f308:	4b1b      	ldr	r3, [pc, #108]	@ (800f378 <HAL_RCC_OscConfig+0x4ec>)
 800f30a:	685b      	ldr	r3, [r3, #4]
 800f30c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	699b      	ldr	r3, [r3, #24]
 800f312:	2b01      	cmp	r3, #1
 800f314:	d028      	beq.n	800f368 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f320:	429a      	cmp	r2, r3
 800f322:	d121      	bne.n	800f368 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f32e:	429a      	cmp	r2, r3
 800f330:	d11a      	bne.n	800f368 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f332:	68fa      	ldr	r2, [r7, #12]
 800f334:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800f338:	4013      	ands	r3, r2
 800f33a:	687a      	ldr	r2, [r7, #4]
 800f33c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800f33e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f340:	4293      	cmp	r3, r2
 800f342:	d111      	bne.n	800f368 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f34e:	085b      	lsrs	r3, r3, #1
 800f350:	3b01      	subs	r3, #1
 800f352:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f354:	429a      	cmp	r2, r3
 800f356:	d107      	bne.n	800f368 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f362:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f364:	429a      	cmp	r2, r3
 800f366:	d001      	beq.n	800f36c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800f368:	2301      	movs	r3, #1
 800f36a:	e000      	b.n	800f36e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800f36c:	2300      	movs	r3, #0
}
 800f36e:	4618      	mov	r0, r3
 800f370:	3718      	adds	r7, #24
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}
 800f376:	bf00      	nop
 800f378:	40023800 	.word	0x40023800

0800f37c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b084      	sub	sp, #16
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
 800f384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d101      	bne.n	800f390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f38c:	2301      	movs	r3, #1
 800f38e:	e0cc      	b.n	800f52a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800f390:	4b68      	ldr	r3, [pc, #416]	@ (800f534 <HAL_RCC_ClockConfig+0x1b8>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	f003 0307 	and.w	r3, r3, #7
 800f398:	683a      	ldr	r2, [r7, #0]
 800f39a:	429a      	cmp	r2, r3
 800f39c:	d90c      	bls.n	800f3b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f39e:	4b65      	ldr	r3, [pc, #404]	@ (800f534 <HAL_RCC_ClockConfig+0x1b8>)
 800f3a0:	683a      	ldr	r2, [r7, #0]
 800f3a2:	b2d2      	uxtb	r2, r2
 800f3a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f3a6:	4b63      	ldr	r3, [pc, #396]	@ (800f534 <HAL_RCC_ClockConfig+0x1b8>)
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	f003 0307 	and.w	r3, r3, #7
 800f3ae:	683a      	ldr	r2, [r7, #0]
 800f3b0:	429a      	cmp	r2, r3
 800f3b2:	d001      	beq.n	800f3b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800f3b4:	2301      	movs	r3, #1
 800f3b6:	e0b8      	b.n	800f52a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	f003 0302 	and.w	r3, r3, #2
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d020      	beq.n	800f406 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	f003 0304 	and.w	r3, r3, #4
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d005      	beq.n	800f3dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800f3d0:	4b59      	ldr	r3, [pc, #356]	@ (800f538 <HAL_RCC_ClockConfig+0x1bc>)
 800f3d2:	689b      	ldr	r3, [r3, #8]
 800f3d4:	4a58      	ldr	r2, [pc, #352]	@ (800f538 <HAL_RCC_ClockConfig+0x1bc>)
 800f3d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800f3da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	f003 0308 	and.w	r3, r3, #8
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d005      	beq.n	800f3f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800f3e8:	4b53      	ldr	r3, [pc, #332]	@ (800f538 <HAL_RCC_ClockConfig+0x1bc>)
 800f3ea:	689b      	ldr	r3, [r3, #8]
 800f3ec:	4a52      	ldr	r2, [pc, #328]	@ (800f538 <HAL_RCC_ClockConfig+0x1bc>)
 800f3ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800f3f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f3f4:	4b50      	ldr	r3, [pc, #320]	@ (800f538 <HAL_RCC_ClockConfig+0x1bc>)
 800f3f6:	689b      	ldr	r3, [r3, #8]
 800f3f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	689b      	ldr	r3, [r3, #8]
 800f400:	494d      	ldr	r1, [pc, #308]	@ (800f538 <HAL_RCC_ClockConfig+0x1bc>)
 800f402:	4313      	orrs	r3, r2
 800f404:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	f003 0301 	and.w	r3, r3, #1
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d044      	beq.n	800f49c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	685b      	ldr	r3, [r3, #4]
 800f416:	2b01      	cmp	r3, #1
 800f418:	d107      	bne.n	800f42a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f41a:	4b47      	ldr	r3, [pc, #284]	@ (800f538 <HAL_RCC_ClockConfig+0x1bc>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f422:	2b00      	cmp	r3, #0
 800f424:	d119      	bne.n	800f45a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f426:	2301      	movs	r3, #1
 800f428:	e07f      	b.n	800f52a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	685b      	ldr	r3, [r3, #4]
 800f42e:	2b02      	cmp	r3, #2
 800f430:	d003      	beq.n	800f43a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f436:	2b03      	cmp	r3, #3
 800f438:	d107      	bne.n	800f44a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f43a:	4b3f      	ldr	r3, [pc, #252]	@ (800f538 <HAL_RCC_ClockConfig+0x1bc>)
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f442:	2b00      	cmp	r3, #0
 800f444:	d109      	bne.n	800f45a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f446:	2301      	movs	r3, #1
 800f448:	e06f      	b.n	800f52a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f44a:	4b3b      	ldr	r3, [pc, #236]	@ (800f538 <HAL_RCC_ClockConfig+0x1bc>)
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	f003 0302 	and.w	r3, r3, #2
 800f452:	2b00      	cmp	r3, #0
 800f454:	d101      	bne.n	800f45a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f456:	2301      	movs	r3, #1
 800f458:	e067      	b.n	800f52a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f45a:	4b37      	ldr	r3, [pc, #220]	@ (800f538 <HAL_RCC_ClockConfig+0x1bc>)
 800f45c:	689b      	ldr	r3, [r3, #8]
 800f45e:	f023 0203 	bic.w	r2, r3, #3
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	685b      	ldr	r3, [r3, #4]
 800f466:	4934      	ldr	r1, [pc, #208]	@ (800f538 <HAL_RCC_ClockConfig+0x1bc>)
 800f468:	4313      	orrs	r3, r2
 800f46a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f46c:	f7fd fea6 	bl	800d1bc <HAL_GetTick>
 800f470:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f472:	e00a      	b.n	800f48a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f474:	f7fd fea2 	bl	800d1bc <HAL_GetTick>
 800f478:	4602      	mov	r2, r0
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	1ad3      	subs	r3, r2, r3
 800f47e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f482:	4293      	cmp	r3, r2
 800f484:	d901      	bls.n	800f48a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800f486:	2303      	movs	r3, #3
 800f488:	e04f      	b.n	800f52a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f48a:	4b2b      	ldr	r3, [pc, #172]	@ (800f538 <HAL_RCC_ClockConfig+0x1bc>)
 800f48c:	689b      	ldr	r3, [r3, #8]
 800f48e:	f003 020c 	and.w	r2, r3, #12
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	685b      	ldr	r3, [r3, #4]
 800f496:	009b      	lsls	r3, r3, #2
 800f498:	429a      	cmp	r2, r3
 800f49a:	d1eb      	bne.n	800f474 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800f49c:	4b25      	ldr	r3, [pc, #148]	@ (800f534 <HAL_RCC_ClockConfig+0x1b8>)
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	f003 0307 	and.w	r3, r3, #7
 800f4a4:	683a      	ldr	r2, [r7, #0]
 800f4a6:	429a      	cmp	r2, r3
 800f4a8:	d20c      	bcs.n	800f4c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f4aa:	4b22      	ldr	r3, [pc, #136]	@ (800f534 <HAL_RCC_ClockConfig+0x1b8>)
 800f4ac:	683a      	ldr	r2, [r7, #0]
 800f4ae:	b2d2      	uxtb	r2, r2
 800f4b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f4b2:	4b20      	ldr	r3, [pc, #128]	@ (800f534 <HAL_RCC_ClockConfig+0x1b8>)
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	f003 0307 	and.w	r3, r3, #7
 800f4ba:	683a      	ldr	r2, [r7, #0]
 800f4bc:	429a      	cmp	r2, r3
 800f4be:	d001      	beq.n	800f4c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800f4c0:	2301      	movs	r3, #1
 800f4c2:	e032      	b.n	800f52a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	f003 0304 	and.w	r3, r3, #4
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d008      	beq.n	800f4e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f4d0:	4b19      	ldr	r3, [pc, #100]	@ (800f538 <HAL_RCC_ClockConfig+0x1bc>)
 800f4d2:	689b      	ldr	r3, [r3, #8]
 800f4d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	68db      	ldr	r3, [r3, #12]
 800f4dc:	4916      	ldr	r1, [pc, #88]	@ (800f538 <HAL_RCC_ClockConfig+0x1bc>)
 800f4de:	4313      	orrs	r3, r2
 800f4e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	f003 0308 	and.w	r3, r3, #8
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d009      	beq.n	800f502 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800f4ee:	4b12      	ldr	r3, [pc, #72]	@ (800f538 <HAL_RCC_ClockConfig+0x1bc>)
 800f4f0:	689b      	ldr	r3, [r3, #8]
 800f4f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	691b      	ldr	r3, [r3, #16]
 800f4fa:	00db      	lsls	r3, r3, #3
 800f4fc:	490e      	ldr	r1, [pc, #56]	@ (800f538 <HAL_RCC_ClockConfig+0x1bc>)
 800f4fe:	4313      	orrs	r3, r2
 800f500:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800f502:	f000 f821 	bl	800f548 <HAL_RCC_GetSysClockFreq>
 800f506:	4602      	mov	r2, r0
 800f508:	4b0b      	ldr	r3, [pc, #44]	@ (800f538 <HAL_RCC_ClockConfig+0x1bc>)
 800f50a:	689b      	ldr	r3, [r3, #8]
 800f50c:	091b      	lsrs	r3, r3, #4
 800f50e:	f003 030f 	and.w	r3, r3, #15
 800f512:	490a      	ldr	r1, [pc, #40]	@ (800f53c <HAL_RCC_ClockConfig+0x1c0>)
 800f514:	5ccb      	ldrb	r3, [r1, r3]
 800f516:	fa22 f303 	lsr.w	r3, r2, r3
 800f51a:	4a09      	ldr	r2, [pc, #36]	@ (800f540 <HAL_RCC_ClockConfig+0x1c4>)
 800f51c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800f51e:	4b09      	ldr	r3, [pc, #36]	@ (800f544 <HAL_RCC_ClockConfig+0x1c8>)
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	4618      	mov	r0, r3
 800f524:	f7fd fe06 	bl	800d134 <HAL_InitTick>

  return HAL_OK;
 800f528:	2300      	movs	r3, #0
}
 800f52a:	4618      	mov	r0, r3
 800f52c:	3710      	adds	r7, #16
 800f52e:	46bd      	mov	sp, r7
 800f530:	bd80      	pop	{r7, pc}
 800f532:	bf00      	nop
 800f534:	40023c00 	.word	0x40023c00
 800f538:	40023800 	.word	0x40023800
 800f53c:	08015b3c 	.word	0x08015b3c
 800f540:	20000004 	.word	0x20000004
 800f544:	20000008 	.word	0x20000008

0800f548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f54c:	b090      	sub	sp, #64	@ 0x40
 800f54e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800f550:	2300      	movs	r3, #0
 800f552:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800f554:	2300      	movs	r3, #0
 800f556:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800f558:	2300      	movs	r3, #0
 800f55a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800f55c:	2300      	movs	r3, #0
 800f55e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f560:	4b59      	ldr	r3, [pc, #356]	@ (800f6c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800f562:	689b      	ldr	r3, [r3, #8]
 800f564:	f003 030c 	and.w	r3, r3, #12
 800f568:	2b08      	cmp	r3, #8
 800f56a:	d00d      	beq.n	800f588 <HAL_RCC_GetSysClockFreq+0x40>
 800f56c:	2b08      	cmp	r3, #8
 800f56e:	f200 80a1 	bhi.w	800f6b4 <HAL_RCC_GetSysClockFreq+0x16c>
 800f572:	2b00      	cmp	r3, #0
 800f574:	d002      	beq.n	800f57c <HAL_RCC_GetSysClockFreq+0x34>
 800f576:	2b04      	cmp	r3, #4
 800f578:	d003      	beq.n	800f582 <HAL_RCC_GetSysClockFreq+0x3a>
 800f57a:	e09b      	b.n	800f6b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800f57c:	4b53      	ldr	r3, [pc, #332]	@ (800f6cc <HAL_RCC_GetSysClockFreq+0x184>)
 800f57e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800f580:	e09b      	b.n	800f6ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800f582:	4b53      	ldr	r3, [pc, #332]	@ (800f6d0 <HAL_RCC_GetSysClockFreq+0x188>)
 800f584:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800f586:	e098      	b.n	800f6ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f588:	4b4f      	ldr	r3, [pc, #316]	@ (800f6c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800f58a:	685b      	ldr	r3, [r3, #4]
 800f58c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f590:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f592:	4b4d      	ldr	r3, [pc, #308]	@ (800f6c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800f594:	685b      	ldr	r3, [r3, #4]
 800f596:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d028      	beq.n	800f5f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f59e:	4b4a      	ldr	r3, [pc, #296]	@ (800f6c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800f5a0:	685b      	ldr	r3, [r3, #4]
 800f5a2:	099b      	lsrs	r3, r3, #6
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	623b      	str	r3, [r7, #32]
 800f5a8:	627a      	str	r2, [r7, #36]	@ 0x24
 800f5aa:	6a3b      	ldr	r3, [r7, #32]
 800f5ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800f5b0:	2100      	movs	r1, #0
 800f5b2:	4b47      	ldr	r3, [pc, #284]	@ (800f6d0 <HAL_RCC_GetSysClockFreq+0x188>)
 800f5b4:	fb03 f201 	mul.w	r2, r3, r1
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	fb00 f303 	mul.w	r3, r0, r3
 800f5be:	4413      	add	r3, r2
 800f5c0:	4a43      	ldr	r2, [pc, #268]	@ (800f6d0 <HAL_RCC_GetSysClockFreq+0x188>)
 800f5c2:	fba0 1202 	umull	r1, r2, r0, r2
 800f5c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f5c8:	460a      	mov	r2, r1
 800f5ca:	62ba      	str	r2, [r7, #40]	@ 0x28
 800f5cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f5ce:	4413      	add	r3, r2
 800f5d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f5d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	61bb      	str	r3, [r7, #24]
 800f5d8:	61fa      	str	r2, [r7, #28]
 800f5da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f5de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800f5e2:	f7f1 fae9 	bl	8000bb8 <__aeabi_uldivmod>
 800f5e6:	4602      	mov	r2, r0
 800f5e8:	460b      	mov	r3, r1
 800f5ea:	4613      	mov	r3, r2
 800f5ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f5ee:	e053      	b.n	800f698 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f5f0:	4b35      	ldr	r3, [pc, #212]	@ (800f6c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800f5f2:	685b      	ldr	r3, [r3, #4]
 800f5f4:	099b      	lsrs	r3, r3, #6
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	613b      	str	r3, [r7, #16]
 800f5fa:	617a      	str	r2, [r7, #20]
 800f5fc:	693b      	ldr	r3, [r7, #16]
 800f5fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800f602:	f04f 0b00 	mov.w	fp, #0
 800f606:	4652      	mov	r2, sl
 800f608:	465b      	mov	r3, fp
 800f60a:	f04f 0000 	mov.w	r0, #0
 800f60e:	f04f 0100 	mov.w	r1, #0
 800f612:	0159      	lsls	r1, r3, #5
 800f614:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f618:	0150      	lsls	r0, r2, #5
 800f61a:	4602      	mov	r2, r0
 800f61c:	460b      	mov	r3, r1
 800f61e:	ebb2 080a 	subs.w	r8, r2, sl
 800f622:	eb63 090b 	sbc.w	r9, r3, fp
 800f626:	f04f 0200 	mov.w	r2, #0
 800f62a:	f04f 0300 	mov.w	r3, #0
 800f62e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800f632:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800f636:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800f63a:	ebb2 0408 	subs.w	r4, r2, r8
 800f63e:	eb63 0509 	sbc.w	r5, r3, r9
 800f642:	f04f 0200 	mov.w	r2, #0
 800f646:	f04f 0300 	mov.w	r3, #0
 800f64a:	00eb      	lsls	r3, r5, #3
 800f64c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f650:	00e2      	lsls	r2, r4, #3
 800f652:	4614      	mov	r4, r2
 800f654:	461d      	mov	r5, r3
 800f656:	eb14 030a 	adds.w	r3, r4, sl
 800f65a:	603b      	str	r3, [r7, #0]
 800f65c:	eb45 030b 	adc.w	r3, r5, fp
 800f660:	607b      	str	r3, [r7, #4]
 800f662:	f04f 0200 	mov.w	r2, #0
 800f666:	f04f 0300 	mov.w	r3, #0
 800f66a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800f66e:	4629      	mov	r1, r5
 800f670:	028b      	lsls	r3, r1, #10
 800f672:	4621      	mov	r1, r4
 800f674:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800f678:	4621      	mov	r1, r4
 800f67a:	028a      	lsls	r2, r1, #10
 800f67c:	4610      	mov	r0, r2
 800f67e:	4619      	mov	r1, r3
 800f680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f682:	2200      	movs	r2, #0
 800f684:	60bb      	str	r3, [r7, #8]
 800f686:	60fa      	str	r2, [r7, #12]
 800f688:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f68c:	f7f1 fa94 	bl	8000bb8 <__aeabi_uldivmod>
 800f690:	4602      	mov	r2, r0
 800f692:	460b      	mov	r3, r1
 800f694:	4613      	mov	r3, r2
 800f696:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800f698:	4b0b      	ldr	r3, [pc, #44]	@ (800f6c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800f69a:	685b      	ldr	r3, [r3, #4]
 800f69c:	0c1b      	lsrs	r3, r3, #16
 800f69e:	f003 0303 	and.w	r3, r3, #3
 800f6a2:	3301      	adds	r3, #1
 800f6a4:	005b      	lsls	r3, r3, #1
 800f6a6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800f6a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800f6b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800f6b2:	e002      	b.n	800f6ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800f6b4:	4b05      	ldr	r3, [pc, #20]	@ (800f6cc <HAL_RCC_GetSysClockFreq+0x184>)
 800f6b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800f6b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f6ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800f6bc:	4618      	mov	r0, r3
 800f6be:	3740      	adds	r7, #64	@ 0x40
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f6c6:	bf00      	nop
 800f6c8:	40023800 	.word	0x40023800
 800f6cc:	00f42400 	.word	0x00f42400
 800f6d0:	017d7840 	.word	0x017d7840

0800f6d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f6d4:	b480      	push	{r7}
 800f6d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f6d8:	4b03      	ldr	r3, [pc, #12]	@ (800f6e8 <HAL_RCC_GetHCLKFreq+0x14>)
 800f6da:	681b      	ldr	r3, [r3, #0]
}
 800f6dc:	4618      	mov	r0, r3
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e4:	4770      	bx	lr
 800f6e6:	bf00      	nop
 800f6e8:	20000004 	.word	0x20000004

0800f6ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800f6f0:	f7ff fff0 	bl	800f6d4 <HAL_RCC_GetHCLKFreq>
 800f6f4:	4602      	mov	r2, r0
 800f6f6:	4b05      	ldr	r3, [pc, #20]	@ (800f70c <HAL_RCC_GetPCLK1Freq+0x20>)
 800f6f8:	689b      	ldr	r3, [r3, #8]
 800f6fa:	0a9b      	lsrs	r3, r3, #10
 800f6fc:	f003 0307 	and.w	r3, r3, #7
 800f700:	4903      	ldr	r1, [pc, #12]	@ (800f710 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f702:	5ccb      	ldrb	r3, [r1, r3]
 800f704:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f708:	4618      	mov	r0, r3
 800f70a:	bd80      	pop	{r7, pc}
 800f70c:	40023800 	.word	0x40023800
 800f710:	08015b4c 	.word	0x08015b4c

0800f714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f714:	b580      	push	{r7, lr}
 800f716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800f718:	f7ff ffdc 	bl	800f6d4 <HAL_RCC_GetHCLKFreq>
 800f71c:	4602      	mov	r2, r0
 800f71e:	4b05      	ldr	r3, [pc, #20]	@ (800f734 <HAL_RCC_GetPCLK2Freq+0x20>)
 800f720:	689b      	ldr	r3, [r3, #8]
 800f722:	0b5b      	lsrs	r3, r3, #13
 800f724:	f003 0307 	and.w	r3, r3, #7
 800f728:	4903      	ldr	r1, [pc, #12]	@ (800f738 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f72a:	5ccb      	ldrb	r3, [r1, r3]
 800f72c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f730:	4618      	mov	r0, r3
 800f732:	bd80      	pop	{r7, pc}
 800f734:	40023800 	.word	0x40023800
 800f738:	08015b4c 	.word	0x08015b4c

0800f73c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b082      	sub	sp, #8
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d101      	bne.n	800f74e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f74a:	2301      	movs	r3, #1
 800f74c:	e07b      	b.n	800f846 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f752:	2b00      	cmp	r3, #0
 800f754:	d108      	bne.n	800f768 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	685b      	ldr	r3, [r3, #4]
 800f75a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f75e:	d009      	beq.n	800f774 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	2200      	movs	r2, #0
 800f764:	61da      	str	r2, [r3, #28]
 800f766:	e005      	b.n	800f774 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	2200      	movs	r2, #0
 800f76c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	2200      	movs	r2, #0
 800f772:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	2200      	movs	r2, #0
 800f778:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f780:	b2db      	uxtb	r3, r3
 800f782:	2b00      	cmp	r3, #0
 800f784:	d106      	bne.n	800f794 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	2200      	movs	r2, #0
 800f78a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f78e:	6878      	ldr	r0, [r7, #4]
 800f790:	f7fd fa2c 	bl	800cbec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	2202      	movs	r2, #2
 800f798:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	681a      	ldr	r2, [r3, #0]
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f7aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	685b      	ldr	r3, [r3, #4]
 800f7b0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	689b      	ldr	r3, [r3, #8]
 800f7b8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800f7bc:	431a      	orrs	r2, r3
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	68db      	ldr	r3, [r3, #12]
 800f7c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f7c6:	431a      	orrs	r2, r3
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	691b      	ldr	r3, [r3, #16]
 800f7cc:	f003 0302 	and.w	r3, r3, #2
 800f7d0:	431a      	orrs	r2, r3
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	695b      	ldr	r3, [r3, #20]
 800f7d6:	f003 0301 	and.w	r3, r3, #1
 800f7da:	431a      	orrs	r2, r3
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	699b      	ldr	r3, [r3, #24]
 800f7e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f7e4:	431a      	orrs	r2, r3
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	69db      	ldr	r3, [r3, #28]
 800f7ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f7ee:	431a      	orrs	r2, r3
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	6a1b      	ldr	r3, [r3, #32]
 800f7f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f7f8:	ea42 0103 	orr.w	r1, r2, r3
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f800:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	430a      	orrs	r2, r1
 800f80a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	699b      	ldr	r3, [r3, #24]
 800f810:	0c1b      	lsrs	r3, r3, #16
 800f812:	f003 0104 	and.w	r1, r3, #4
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f81a:	f003 0210 	and.w	r2, r3, #16
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	430a      	orrs	r2, r1
 800f824:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	69da      	ldr	r2, [r3, #28]
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800f834:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	2200      	movs	r2, #0
 800f83a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	2201      	movs	r2, #1
 800f840:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800f844:	2300      	movs	r3, #0
}
 800f846:	4618      	mov	r0, r3
 800f848:	3708      	adds	r7, #8
 800f84a:	46bd      	mov	sp, r7
 800f84c:	bd80      	pop	{r7, pc}

0800f84e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f84e:	b580      	push	{r7, lr}
 800f850:	b088      	sub	sp, #32
 800f852:	af00      	add	r7, sp, #0
 800f854:	60f8      	str	r0, [r7, #12]
 800f856:	60b9      	str	r1, [r7, #8]
 800f858:	603b      	str	r3, [r7, #0]
 800f85a:	4613      	mov	r3, r2
 800f85c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f85e:	f7fd fcad 	bl	800d1bc <HAL_GetTick>
 800f862:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800f864:	88fb      	ldrh	r3, [r7, #6]
 800f866:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f86e:	b2db      	uxtb	r3, r3
 800f870:	2b01      	cmp	r3, #1
 800f872:	d001      	beq.n	800f878 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800f874:	2302      	movs	r3, #2
 800f876:	e12a      	b.n	800face <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800f878:	68bb      	ldr	r3, [r7, #8]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d002      	beq.n	800f884 <HAL_SPI_Transmit+0x36>
 800f87e:	88fb      	ldrh	r3, [r7, #6]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d101      	bne.n	800f888 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800f884:	2301      	movs	r3, #1
 800f886:	e122      	b.n	800face <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f88e:	2b01      	cmp	r3, #1
 800f890:	d101      	bne.n	800f896 <HAL_SPI_Transmit+0x48>
 800f892:	2302      	movs	r3, #2
 800f894:	e11b      	b.n	800face <HAL_SPI_Transmit+0x280>
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	2201      	movs	r2, #1
 800f89a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	2203      	movs	r2, #3
 800f8a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	68ba      	ldr	r2, [r7, #8]
 800f8b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	88fa      	ldrh	r2, [r7, #6]
 800f8b6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	88fa      	ldrh	r2, [r7, #6]
 800f8bc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	2200      	movs	r2, #0
 800f8ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	2200      	movs	r2, #0
 800f8da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	689b      	ldr	r3, [r3, #8]
 800f8e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f8e4:	d10f      	bne.n	800f906 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	681a      	ldr	r2, [r3, #0]
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f8f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	681a      	ldr	r2, [r3, #0]
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f904:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f910:	2b40      	cmp	r3, #64	@ 0x40
 800f912:	d007      	beq.n	800f924 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	681a      	ldr	r2, [r3, #0]
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f922:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	68db      	ldr	r3, [r3, #12]
 800f928:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f92c:	d152      	bne.n	800f9d4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	685b      	ldr	r3, [r3, #4]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d002      	beq.n	800f93c <HAL_SPI_Transmit+0xee>
 800f936:	8b7b      	ldrh	r3, [r7, #26]
 800f938:	2b01      	cmp	r3, #1
 800f93a:	d145      	bne.n	800f9c8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f940:	881a      	ldrh	r2, [r3, #0]
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f94c:	1c9a      	adds	r2, r3, #2
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f956:	b29b      	uxth	r3, r3
 800f958:	3b01      	subs	r3, #1
 800f95a:	b29a      	uxth	r2, r3
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800f960:	e032      	b.n	800f9c8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	689b      	ldr	r3, [r3, #8]
 800f968:	f003 0302 	and.w	r3, r3, #2
 800f96c:	2b02      	cmp	r3, #2
 800f96e:	d112      	bne.n	800f996 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f974:	881a      	ldrh	r2, [r3, #0]
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f980:	1c9a      	adds	r2, r3, #2
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f98a:	b29b      	uxth	r3, r3
 800f98c:	3b01      	subs	r3, #1
 800f98e:	b29a      	uxth	r2, r3
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f994:	e018      	b.n	800f9c8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f996:	f7fd fc11 	bl	800d1bc <HAL_GetTick>
 800f99a:	4602      	mov	r2, r0
 800f99c:	69fb      	ldr	r3, [r7, #28]
 800f99e:	1ad3      	subs	r3, r2, r3
 800f9a0:	683a      	ldr	r2, [r7, #0]
 800f9a2:	429a      	cmp	r2, r3
 800f9a4:	d803      	bhi.n	800f9ae <HAL_SPI_Transmit+0x160>
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9ac:	d102      	bne.n	800f9b4 <HAL_SPI_Transmit+0x166>
 800f9ae:	683b      	ldr	r3, [r7, #0]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d109      	bne.n	800f9c8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	2201      	movs	r2, #1
 800f9b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	2200      	movs	r2, #0
 800f9c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800f9c4:	2303      	movs	r3, #3
 800f9c6:	e082      	b.n	800face <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f9cc:	b29b      	uxth	r3, r3
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d1c7      	bne.n	800f962 <HAL_SPI_Transmit+0x114>
 800f9d2:	e053      	b.n	800fa7c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	685b      	ldr	r3, [r3, #4]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d002      	beq.n	800f9e2 <HAL_SPI_Transmit+0x194>
 800f9dc:	8b7b      	ldrh	r3, [r7, #26]
 800f9de:	2b01      	cmp	r3, #1
 800f9e0:	d147      	bne.n	800fa72 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	330c      	adds	r3, #12
 800f9ec:	7812      	ldrb	r2, [r2, #0]
 800f9ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f9f4:	1c5a      	adds	r2, r3, #1
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f9fe:	b29b      	uxth	r3, r3
 800fa00:	3b01      	subs	r3, #1
 800fa02:	b29a      	uxth	r2, r3
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800fa08:	e033      	b.n	800fa72 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	689b      	ldr	r3, [r3, #8]
 800fa10:	f003 0302 	and.w	r3, r3, #2
 800fa14:	2b02      	cmp	r3, #2
 800fa16:	d113      	bne.n	800fa40 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	330c      	adds	r3, #12
 800fa22:	7812      	ldrb	r2, [r2, #0]
 800fa24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa2a:	1c5a      	adds	r2, r3, #1
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fa34:	b29b      	uxth	r3, r3
 800fa36:	3b01      	subs	r3, #1
 800fa38:	b29a      	uxth	r2, r3
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800fa3e:	e018      	b.n	800fa72 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fa40:	f7fd fbbc 	bl	800d1bc <HAL_GetTick>
 800fa44:	4602      	mov	r2, r0
 800fa46:	69fb      	ldr	r3, [r7, #28]
 800fa48:	1ad3      	subs	r3, r2, r3
 800fa4a:	683a      	ldr	r2, [r7, #0]
 800fa4c:	429a      	cmp	r2, r3
 800fa4e:	d803      	bhi.n	800fa58 <HAL_SPI_Transmit+0x20a>
 800fa50:	683b      	ldr	r3, [r7, #0]
 800fa52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa56:	d102      	bne.n	800fa5e <HAL_SPI_Transmit+0x210>
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d109      	bne.n	800fa72 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	2201      	movs	r2, #1
 800fa62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	2200      	movs	r2, #0
 800fa6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800fa6e:	2303      	movs	r3, #3
 800fa70:	e02d      	b.n	800face <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fa76:	b29b      	uxth	r3, r3
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d1c6      	bne.n	800fa0a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800fa7c:	69fa      	ldr	r2, [r7, #28]
 800fa7e:	6839      	ldr	r1, [r7, #0]
 800fa80:	68f8      	ldr	r0, [r7, #12]
 800fa82:	f000 f8b1 	bl	800fbe8 <SPI_EndRxTxTransaction>
 800fa86:	4603      	mov	r3, r0
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d002      	beq.n	800fa92 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	2220      	movs	r2, #32
 800fa90:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	689b      	ldr	r3, [r3, #8]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d10a      	bne.n	800fab0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	617b      	str	r3, [r7, #20]
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	68db      	ldr	r3, [r3, #12]
 800faa4:	617b      	str	r3, [r7, #20]
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	689b      	ldr	r3, [r3, #8]
 800faac:	617b      	str	r3, [r7, #20]
 800faae:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	2201      	movs	r2, #1
 800fab4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	2200      	movs	r2, #0
 800fabc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d001      	beq.n	800facc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800fac8:	2301      	movs	r3, #1
 800faca:	e000      	b.n	800face <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800facc:	2300      	movs	r3, #0
  }
}
 800face:	4618      	mov	r0, r3
 800fad0:	3720      	adds	r7, #32
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}
	...

0800fad8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b088      	sub	sp, #32
 800fadc:	af00      	add	r7, sp, #0
 800fade:	60f8      	str	r0, [r7, #12]
 800fae0:	60b9      	str	r1, [r7, #8]
 800fae2:	603b      	str	r3, [r7, #0]
 800fae4:	4613      	mov	r3, r2
 800fae6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800fae8:	f7fd fb68 	bl	800d1bc <HAL_GetTick>
 800faec:	4602      	mov	r2, r0
 800faee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800faf0:	1a9b      	subs	r3, r3, r2
 800faf2:	683a      	ldr	r2, [r7, #0]
 800faf4:	4413      	add	r3, r2
 800faf6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800faf8:	f7fd fb60 	bl	800d1bc <HAL_GetTick>
 800fafc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800fafe:	4b39      	ldr	r3, [pc, #228]	@ (800fbe4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	015b      	lsls	r3, r3, #5
 800fb04:	0d1b      	lsrs	r3, r3, #20
 800fb06:	69fa      	ldr	r2, [r7, #28]
 800fb08:	fb02 f303 	mul.w	r3, r2, r3
 800fb0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800fb0e:	e054      	b.n	800fbba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb16:	d050      	beq.n	800fbba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800fb18:	f7fd fb50 	bl	800d1bc <HAL_GetTick>
 800fb1c:	4602      	mov	r2, r0
 800fb1e:	69bb      	ldr	r3, [r7, #24]
 800fb20:	1ad3      	subs	r3, r2, r3
 800fb22:	69fa      	ldr	r2, [r7, #28]
 800fb24:	429a      	cmp	r2, r3
 800fb26:	d902      	bls.n	800fb2e <SPI_WaitFlagStateUntilTimeout+0x56>
 800fb28:	69fb      	ldr	r3, [r7, #28]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d13d      	bne.n	800fbaa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	685a      	ldr	r2, [r3, #4]
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800fb3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	685b      	ldr	r3, [r3, #4]
 800fb42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fb46:	d111      	bne.n	800fb6c <SPI_WaitFlagStateUntilTimeout+0x94>
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	689b      	ldr	r3, [r3, #8]
 800fb4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fb50:	d004      	beq.n	800fb5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	689b      	ldr	r3, [r3, #8]
 800fb56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fb5a:	d107      	bne.n	800fb6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	681a      	ldr	r2, [r3, #0]
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fb6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fb74:	d10f      	bne.n	800fb96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	681a      	ldr	r2, [r3, #0]
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800fb84:	601a      	str	r2, [r3, #0]
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	681a      	ldr	r2, [r3, #0]
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800fb94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	2201      	movs	r2, #1
 800fb9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	2200      	movs	r2, #0
 800fba2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800fba6:	2303      	movs	r3, #3
 800fba8:	e017      	b.n	800fbda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800fbaa:	697b      	ldr	r3, [r7, #20]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d101      	bne.n	800fbb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800fbb4:	697b      	ldr	r3, [r7, #20]
 800fbb6:	3b01      	subs	r3, #1
 800fbb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	689a      	ldr	r2, [r3, #8]
 800fbc0:	68bb      	ldr	r3, [r7, #8]
 800fbc2:	4013      	ands	r3, r2
 800fbc4:	68ba      	ldr	r2, [r7, #8]
 800fbc6:	429a      	cmp	r2, r3
 800fbc8:	bf0c      	ite	eq
 800fbca:	2301      	moveq	r3, #1
 800fbcc:	2300      	movne	r3, #0
 800fbce:	b2db      	uxtb	r3, r3
 800fbd0:	461a      	mov	r2, r3
 800fbd2:	79fb      	ldrb	r3, [r7, #7]
 800fbd4:	429a      	cmp	r2, r3
 800fbd6:	d19b      	bne.n	800fb10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800fbd8:	2300      	movs	r3, #0
}
 800fbda:	4618      	mov	r0, r3
 800fbdc:	3720      	adds	r7, #32
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}
 800fbe2:	bf00      	nop
 800fbe4:	20000004 	.word	0x20000004

0800fbe8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b088      	sub	sp, #32
 800fbec:	af02      	add	r7, sp, #8
 800fbee:	60f8      	str	r0, [r7, #12]
 800fbf0:	60b9      	str	r1, [r7, #8]
 800fbf2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	9300      	str	r3, [sp, #0]
 800fbf8:	68bb      	ldr	r3, [r7, #8]
 800fbfa:	2201      	movs	r2, #1
 800fbfc:	2102      	movs	r1, #2
 800fbfe:	68f8      	ldr	r0, [r7, #12]
 800fc00:	f7ff ff6a 	bl	800fad8 <SPI_WaitFlagStateUntilTimeout>
 800fc04:	4603      	mov	r3, r0
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d007      	beq.n	800fc1a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fc0e:	f043 0220 	orr.w	r2, r3, #32
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800fc16:	2303      	movs	r3, #3
 800fc18:	e032      	b.n	800fc80 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800fc1a:	4b1b      	ldr	r3, [pc, #108]	@ (800fc88 <SPI_EndRxTxTransaction+0xa0>)
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	4a1b      	ldr	r2, [pc, #108]	@ (800fc8c <SPI_EndRxTxTransaction+0xa4>)
 800fc20:	fba2 2303 	umull	r2, r3, r2, r3
 800fc24:	0d5b      	lsrs	r3, r3, #21
 800fc26:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800fc2a:	fb02 f303 	mul.w	r3, r2, r3
 800fc2e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	685b      	ldr	r3, [r3, #4]
 800fc34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fc38:	d112      	bne.n	800fc60 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	9300      	str	r3, [sp, #0]
 800fc3e:	68bb      	ldr	r3, [r7, #8]
 800fc40:	2200      	movs	r2, #0
 800fc42:	2180      	movs	r1, #128	@ 0x80
 800fc44:	68f8      	ldr	r0, [r7, #12]
 800fc46:	f7ff ff47 	bl	800fad8 <SPI_WaitFlagStateUntilTimeout>
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d016      	beq.n	800fc7e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fc54:	f043 0220 	orr.w	r2, r3, #32
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800fc5c:	2303      	movs	r3, #3
 800fc5e:	e00f      	b.n	800fc80 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800fc60:	697b      	ldr	r3, [r7, #20]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d00a      	beq.n	800fc7c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	3b01      	subs	r3, #1
 800fc6a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	689b      	ldr	r3, [r3, #8]
 800fc72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fc76:	2b80      	cmp	r3, #128	@ 0x80
 800fc78:	d0f2      	beq.n	800fc60 <SPI_EndRxTxTransaction+0x78>
 800fc7a:	e000      	b.n	800fc7e <SPI_EndRxTxTransaction+0x96>
        break;
 800fc7c:	bf00      	nop
  }

  return HAL_OK;
 800fc7e:	2300      	movs	r3, #0
}
 800fc80:	4618      	mov	r0, r3
 800fc82:	3718      	adds	r7, #24
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bd80      	pop	{r7, pc}
 800fc88:	20000004 	.word	0x20000004
 800fc8c:	165e9f81 	.word	0x165e9f81

0800fc90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b082      	sub	sp, #8
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d101      	bne.n	800fca2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fc9e:	2301      	movs	r3, #1
 800fca0:	e041      	b.n	800fd26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fca8:	b2db      	uxtb	r3, r3
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d106      	bne.n	800fcbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fcb6:	6878      	ldr	r0, [r7, #4]
 800fcb8:	f7fc ffe0 	bl	800cc7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	2202      	movs	r2, #2
 800fcc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	681a      	ldr	r2, [r3, #0]
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	3304      	adds	r3, #4
 800fccc:	4619      	mov	r1, r3
 800fcce:	4610      	mov	r0, r2
 800fcd0:	f000 fc3c 	bl	801054c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2201      	movs	r2, #1
 800fcd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	2201      	movs	r2, #1
 800fce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	2201      	movs	r2, #1
 800fce8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	2201      	movs	r2, #1
 800fcf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2201      	movs	r2, #1
 800fcf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2201      	movs	r2, #1
 800fd00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	2201      	movs	r2, #1
 800fd08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	2201      	movs	r2, #1
 800fd10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	2201      	movs	r2, #1
 800fd18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	2201      	movs	r2, #1
 800fd20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800fd24:	2300      	movs	r3, #0
}
 800fd26:	4618      	mov	r0, r3
 800fd28:	3708      	adds	r7, #8
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}
	...

0800fd30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800fd30:	b480      	push	{r7}
 800fd32:	b085      	sub	sp, #20
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fd3e:	b2db      	uxtb	r3, r3
 800fd40:	2b01      	cmp	r3, #1
 800fd42:	d001      	beq.n	800fd48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800fd44:	2301      	movs	r3, #1
 800fd46:	e044      	b.n	800fdd2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	2202      	movs	r2, #2
 800fd4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	68da      	ldr	r2, [r3, #12]
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	f042 0201 	orr.w	r2, r2, #1
 800fd5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	4a1e      	ldr	r2, [pc, #120]	@ (800fde0 <HAL_TIM_Base_Start_IT+0xb0>)
 800fd66:	4293      	cmp	r3, r2
 800fd68:	d018      	beq.n	800fd9c <HAL_TIM_Base_Start_IT+0x6c>
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fd72:	d013      	beq.n	800fd9c <HAL_TIM_Base_Start_IT+0x6c>
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	4a1a      	ldr	r2, [pc, #104]	@ (800fde4 <HAL_TIM_Base_Start_IT+0xb4>)
 800fd7a:	4293      	cmp	r3, r2
 800fd7c:	d00e      	beq.n	800fd9c <HAL_TIM_Base_Start_IT+0x6c>
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	4a19      	ldr	r2, [pc, #100]	@ (800fde8 <HAL_TIM_Base_Start_IT+0xb8>)
 800fd84:	4293      	cmp	r3, r2
 800fd86:	d009      	beq.n	800fd9c <HAL_TIM_Base_Start_IT+0x6c>
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	4a17      	ldr	r2, [pc, #92]	@ (800fdec <HAL_TIM_Base_Start_IT+0xbc>)
 800fd8e:	4293      	cmp	r3, r2
 800fd90:	d004      	beq.n	800fd9c <HAL_TIM_Base_Start_IT+0x6c>
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	4a16      	ldr	r2, [pc, #88]	@ (800fdf0 <HAL_TIM_Base_Start_IT+0xc0>)
 800fd98:	4293      	cmp	r3, r2
 800fd9a:	d111      	bne.n	800fdc0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	689b      	ldr	r3, [r3, #8]
 800fda2:	f003 0307 	and.w	r3, r3, #7
 800fda6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	2b06      	cmp	r3, #6
 800fdac:	d010      	beq.n	800fdd0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	681a      	ldr	r2, [r3, #0]
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	f042 0201 	orr.w	r2, r2, #1
 800fdbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fdbe:	e007      	b.n	800fdd0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	681a      	ldr	r2, [r3, #0]
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	f042 0201 	orr.w	r2, r2, #1
 800fdce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800fdd0:	2300      	movs	r3, #0
}
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	3714      	adds	r7, #20
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fddc:	4770      	bx	lr
 800fdde:	bf00      	nop
 800fde0:	40010000 	.word	0x40010000
 800fde4:	40000400 	.word	0x40000400
 800fde8:	40000800 	.word	0x40000800
 800fdec:	40000c00 	.word	0x40000c00
 800fdf0:	40014000 	.word	0x40014000

0800fdf4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b082      	sub	sp, #8
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d101      	bne.n	800fe06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800fe02:	2301      	movs	r3, #1
 800fe04:	e041      	b.n	800fe8a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fe0c:	b2db      	uxtb	r3, r3
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d106      	bne.n	800fe20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	2200      	movs	r2, #0
 800fe16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800fe1a:	6878      	ldr	r0, [r7, #4]
 800fe1c:	f000 f839 	bl	800fe92 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	2202      	movs	r2, #2
 800fe24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681a      	ldr	r2, [r3, #0]
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	3304      	adds	r3, #4
 800fe30:	4619      	mov	r1, r3
 800fe32:	4610      	mov	r0, r2
 800fe34:	f000 fb8a 	bl	801054c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	2201      	movs	r2, #1
 800fe3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2201      	movs	r2, #1
 800fe44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	2201      	movs	r2, #1
 800fe4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	2201      	movs	r2, #1
 800fe54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	2201      	movs	r2, #1
 800fe5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	2201      	movs	r2, #1
 800fe64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	2201      	movs	r2, #1
 800fe6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	2201      	movs	r2, #1
 800fe74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	2201      	movs	r2, #1
 800fe7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2201      	movs	r2, #1
 800fe84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800fe88:	2300      	movs	r3, #0
}
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	3708      	adds	r7, #8
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	bd80      	pop	{r7, pc}

0800fe92 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800fe92:	b480      	push	{r7}
 800fe94:	b083      	sub	sp, #12
 800fe96:	af00      	add	r7, sp, #0
 800fe98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800fe9a:	bf00      	nop
 800fe9c:	370c      	adds	r7, #12
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea4:	4770      	bx	lr
	...

0800fea8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b084      	sub	sp, #16
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
 800feb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800feb2:	683b      	ldr	r3, [r7, #0]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d109      	bne.n	800fecc <HAL_TIM_PWM_Start+0x24>
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800febe:	b2db      	uxtb	r3, r3
 800fec0:	2b01      	cmp	r3, #1
 800fec2:	bf14      	ite	ne
 800fec4:	2301      	movne	r3, #1
 800fec6:	2300      	moveq	r3, #0
 800fec8:	b2db      	uxtb	r3, r3
 800feca:	e022      	b.n	800ff12 <HAL_TIM_PWM_Start+0x6a>
 800fecc:	683b      	ldr	r3, [r7, #0]
 800fece:	2b04      	cmp	r3, #4
 800fed0:	d109      	bne.n	800fee6 <HAL_TIM_PWM_Start+0x3e>
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800fed8:	b2db      	uxtb	r3, r3
 800feda:	2b01      	cmp	r3, #1
 800fedc:	bf14      	ite	ne
 800fede:	2301      	movne	r3, #1
 800fee0:	2300      	moveq	r3, #0
 800fee2:	b2db      	uxtb	r3, r3
 800fee4:	e015      	b.n	800ff12 <HAL_TIM_PWM_Start+0x6a>
 800fee6:	683b      	ldr	r3, [r7, #0]
 800fee8:	2b08      	cmp	r3, #8
 800feea:	d109      	bne.n	800ff00 <HAL_TIM_PWM_Start+0x58>
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fef2:	b2db      	uxtb	r3, r3
 800fef4:	2b01      	cmp	r3, #1
 800fef6:	bf14      	ite	ne
 800fef8:	2301      	movne	r3, #1
 800fefa:	2300      	moveq	r3, #0
 800fefc:	b2db      	uxtb	r3, r3
 800fefe:	e008      	b.n	800ff12 <HAL_TIM_PWM_Start+0x6a>
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ff06:	b2db      	uxtb	r3, r3
 800ff08:	2b01      	cmp	r3, #1
 800ff0a:	bf14      	ite	ne
 800ff0c:	2301      	movne	r3, #1
 800ff0e:	2300      	moveq	r3, #0
 800ff10:	b2db      	uxtb	r3, r3
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d001      	beq.n	800ff1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800ff16:	2301      	movs	r3, #1
 800ff18:	e068      	b.n	800ffec <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ff1a:	683b      	ldr	r3, [r7, #0]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d104      	bne.n	800ff2a <HAL_TIM_PWM_Start+0x82>
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	2202      	movs	r2, #2
 800ff24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ff28:	e013      	b.n	800ff52 <HAL_TIM_PWM_Start+0xaa>
 800ff2a:	683b      	ldr	r3, [r7, #0]
 800ff2c:	2b04      	cmp	r3, #4
 800ff2e:	d104      	bne.n	800ff3a <HAL_TIM_PWM_Start+0x92>
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	2202      	movs	r2, #2
 800ff34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ff38:	e00b      	b.n	800ff52 <HAL_TIM_PWM_Start+0xaa>
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	2b08      	cmp	r3, #8
 800ff3e:	d104      	bne.n	800ff4a <HAL_TIM_PWM_Start+0xa2>
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	2202      	movs	r2, #2
 800ff44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ff48:	e003      	b.n	800ff52 <HAL_TIM_PWM_Start+0xaa>
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	2202      	movs	r2, #2
 800ff4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	2201      	movs	r2, #1
 800ff58:	6839      	ldr	r1, [r7, #0]
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f000 fda8 	bl	8010ab0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	4a23      	ldr	r2, [pc, #140]	@ (800fff4 <HAL_TIM_PWM_Start+0x14c>)
 800ff66:	4293      	cmp	r3, r2
 800ff68:	d107      	bne.n	800ff7a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ff78:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	4a1d      	ldr	r2, [pc, #116]	@ (800fff4 <HAL_TIM_PWM_Start+0x14c>)
 800ff80:	4293      	cmp	r3, r2
 800ff82:	d018      	beq.n	800ffb6 <HAL_TIM_PWM_Start+0x10e>
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ff8c:	d013      	beq.n	800ffb6 <HAL_TIM_PWM_Start+0x10e>
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	4a19      	ldr	r2, [pc, #100]	@ (800fff8 <HAL_TIM_PWM_Start+0x150>)
 800ff94:	4293      	cmp	r3, r2
 800ff96:	d00e      	beq.n	800ffb6 <HAL_TIM_PWM_Start+0x10e>
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	4a17      	ldr	r2, [pc, #92]	@ (800fffc <HAL_TIM_PWM_Start+0x154>)
 800ff9e:	4293      	cmp	r3, r2
 800ffa0:	d009      	beq.n	800ffb6 <HAL_TIM_PWM_Start+0x10e>
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	4a16      	ldr	r2, [pc, #88]	@ (8010000 <HAL_TIM_PWM_Start+0x158>)
 800ffa8:	4293      	cmp	r3, r2
 800ffaa:	d004      	beq.n	800ffb6 <HAL_TIM_PWM_Start+0x10e>
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	4a14      	ldr	r2, [pc, #80]	@ (8010004 <HAL_TIM_PWM_Start+0x15c>)
 800ffb2:	4293      	cmp	r3, r2
 800ffb4:	d111      	bne.n	800ffda <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	689b      	ldr	r3, [r3, #8]
 800ffbc:	f003 0307 	and.w	r3, r3, #7
 800ffc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	2b06      	cmp	r3, #6
 800ffc6:	d010      	beq.n	800ffea <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	681a      	ldr	r2, [r3, #0]
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	f042 0201 	orr.w	r2, r2, #1
 800ffd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ffd8:	e007      	b.n	800ffea <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	681a      	ldr	r2, [r3, #0]
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	f042 0201 	orr.w	r2, r2, #1
 800ffe8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ffea:	2300      	movs	r3, #0
}
 800ffec:	4618      	mov	r0, r3
 800ffee:	3710      	adds	r7, #16
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd80      	pop	{r7, pc}
 800fff4:	40010000 	.word	0x40010000
 800fff8:	40000400 	.word	0x40000400
 800fffc:	40000800 	.word	0x40000800
 8010000:	40000c00 	.word	0x40000c00
 8010004:	40014000 	.word	0x40014000

08010008 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b084      	sub	sp, #16
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	68db      	ldr	r3, [r3, #12]
 8010016:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	691b      	ldr	r3, [r3, #16]
 801001e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8010020:	68bb      	ldr	r3, [r7, #8]
 8010022:	f003 0302 	and.w	r3, r3, #2
 8010026:	2b00      	cmp	r3, #0
 8010028:	d020      	beq.n	801006c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	f003 0302 	and.w	r3, r3, #2
 8010030:	2b00      	cmp	r3, #0
 8010032:	d01b      	beq.n	801006c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	f06f 0202 	mvn.w	r2, #2
 801003c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	2201      	movs	r2, #1
 8010042:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	699b      	ldr	r3, [r3, #24]
 801004a:	f003 0303 	and.w	r3, r3, #3
 801004e:	2b00      	cmp	r3, #0
 8010050:	d003      	beq.n	801005a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010052:	6878      	ldr	r0, [r7, #4]
 8010054:	f000 fa5b 	bl	801050e <HAL_TIM_IC_CaptureCallback>
 8010058:	e005      	b.n	8010066 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801005a:	6878      	ldr	r0, [r7, #4]
 801005c:	f000 fa4d 	bl	80104fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010060:	6878      	ldr	r0, [r7, #4]
 8010062:	f000 fa5e 	bl	8010522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	2200      	movs	r2, #0
 801006a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801006c:	68bb      	ldr	r3, [r7, #8]
 801006e:	f003 0304 	and.w	r3, r3, #4
 8010072:	2b00      	cmp	r3, #0
 8010074:	d020      	beq.n	80100b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	f003 0304 	and.w	r3, r3, #4
 801007c:	2b00      	cmp	r3, #0
 801007e:	d01b      	beq.n	80100b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	f06f 0204 	mvn.w	r2, #4
 8010088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	2202      	movs	r2, #2
 801008e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	699b      	ldr	r3, [r3, #24]
 8010096:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801009a:	2b00      	cmp	r3, #0
 801009c:	d003      	beq.n	80100a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801009e:	6878      	ldr	r0, [r7, #4]
 80100a0:	f000 fa35 	bl	801050e <HAL_TIM_IC_CaptureCallback>
 80100a4:	e005      	b.n	80100b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80100a6:	6878      	ldr	r0, [r7, #4]
 80100a8:	f000 fa27 	bl	80104fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80100ac:	6878      	ldr	r0, [r7, #4]
 80100ae:	f000 fa38 	bl	8010522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	2200      	movs	r2, #0
 80100b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80100b8:	68bb      	ldr	r3, [r7, #8]
 80100ba:	f003 0308 	and.w	r3, r3, #8
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d020      	beq.n	8010104 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	f003 0308 	and.w	r3, r3, #8
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d01b      	beq.n	8010104 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	f06f 0208 	mvn.w	r2, #8
 80100d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	2204      	movs	r2, #4
 80100da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	69db      	ldr	r3, [r3, #28]
 80100e2:	f003 0303 	and.w	r3, r3, #3
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d003      	beq.n	80100f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80100ea:	6878      	ldr	r0, [r7, #4]
 80100ec:	f000 fa0f 	bl	801050e <HAL_TIM_IC_CaptureCallback>
 80100f0:	e005      	b.n	80100fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80100f2:	6878      	ldr	r0, [r7, #4]
 80100f4:	f000 fa01 	bl	80104fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80100f8:	6878      	ldr	r0, [r7, #4]
 80100fa:	f000 fa12 	bl	8010522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	2200      	movs	r2, #0
 8010102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8010104:	68bb      	ldr	r3, [r7, #8]
 8010106:	f003 0310 	and.w	r3, r3, #16
 801010a:	2b00      	cmp	r3, #0
 801010c:	d020      	beq.n	8010150 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	f003 0310 	and.w	r3, r3, #16
 8010114:	2b00      	cmp	r3, #0
 8010116:	d01b      	beq.n	8010150 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	f06f 0210 	mvn.w	r2, #16
 8010120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	2208      	movs	r2, #8
 8010126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	69db      	ldr	r3, [r3, #28]
 801012e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010132:	2b00      	cmp	r3, #0
 8010134:	d003      	beq.n	801013e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010136:	6878      	ldr	r0, [r7, #4]
 8010138:	f000 f9e9 	bl	801050e <HAL_TIM_IC_CaptureCallback>
 801013c:	e005      	b.n	801014a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801013e:	6878      	ldr	r0, [r7, #4]
 8010140:	f000 f9db 	bl	80104fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010144:	6878      	ldr	r0, [r7, #4]
 8010146:	f000 f9ec 	bl	8010522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	2200      	movs	r2, #0
 801014e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8010150:	68bb      	ldr	r3, [r7, #8]
 8010152:	f003 0301 	and.w	r3, r3, #1
 8010156:	2b00      	cmp	r3, #0
 8010158:	d00c      	beq.n	8010174 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	f003 0301 	and.w	r3, r3, #1
 8010160:	2b00      	cmp	r3, #0
 8010162:	d007      	beq.n	8010174 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	f06f 0201 	mvn.w	r2, #1
 801016c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801016e:	6878      	ldr	r0, [r7, #4]
 8010170:	f7fb ff68 	bl	800c044 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8010174:	68bb      	ldr	r3, [r7, #8]
 8010176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801017a:	2b00      	cmp	r3, #0
 801017c:	d00c      	beq.n	8010198 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010184:	2b00      	cmp	r3, #0
 8010186:	d007      	beq.n	8010198 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8010190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010192:	6878      	ldr	r0, [r7, #4]
 8010194:	f000 fd2a 	bl	8010bec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8010198:	68bb      	ldr	r3, [r7, #8]
 801019a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d00c      	beq.n	80101bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d007      	beq.n	80101bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80101b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80101b6:	6878      	ldr	r0, [r7, #4]
 80101b8:	f000 f9bd 	bl	8010536 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80101bc:	68bb      	ldr	r3, [r7, #8]
 80101be:	f003 0320 	and.w	r3, r3, #32
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d00c      	beq.n	80101e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	f003 0320 	and.w	r3, r3, #32
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d007      	beq.n	80101e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	f06f 0220 	mvn.w	r2, #32
 80101d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80101da:	6878      	ldr	r0, [r7, #4]
 80101dc:	f000 fcfc 	bl	8010bd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80101e0:	bf00      	nop
 80101e2:	3710      	adds	r7, #16
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bd80      	pop	{r7, pc}

080101e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b086      	sub	sp, #24
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	60f8      	str	r0, [r7, #12]
 80101f0:	60b9      	str	r1, [r7, #8]
 80101f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80101f4:	2300      	movs	r3, #0
 80101f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80101fe:	2b01      	cmp	r3, #1
 8010200:	d101      	bne.n	8010206 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8010202:	2302      	movs	r3, #2
 8010204:	e0ae      	b.n	8010364 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	2201      	movs	r2, #1
 801020a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	2b0c      	cmp	r3, #12
 8010212:	f200 809f 	bhi.w	8010354 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8010216:	a201      	add	r2, pc, #4	@ (adr r2, 801021c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801021c:	08010251 	.word	0x08010251
 8010220:	08010355 	.word	0x08010355
 8010224:	08010355 	.word	0x08010355
 8010228:	08010355 	.word	0x08010355
 801022c:	08010291 	.word	0x08010291
 8010230:	08010355 	.word	0x08010355
 8010234:	08010355 	.word	0x08010355
 8010238:	08010355 	.word	0x08010355
 801023c:	080102d3 	.word	0x080102d3
 8010240:	08010355 	.word	0x08010355
 8010244:	08010355 	.word	0x08010355
 8010248:	08010355 	.word	0x08010355
 801024c:	08010313 	.word	0x08010313
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	68b9      	ldr	r1, [r7, #8]
 8010256:	4618      	mov	r0, r3
 8010258:	f000 fa04 	bl	8010664 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	699a      	ldr	r2, [r3, #24]
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	f042 0208 	orr.w	r2, r2, #8
 801026a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	699a      	ldr	r2, [r3, #24]
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	f022 0204 	bic.w	r2, r2, #4
 801027a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	6999      	ldr	r1, [r3, #24]
 8010282:	68bb      	ldr	r3, [r7, #8]
 8010284:	691a      	ldr	r2, [r3, #16]
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	430a      	orrs	r2, r1
 801028c:	619a      	str	r2, [r3, #24]
      break;
 801028e:	e064      	b.n	801035a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	68b9      	ldr	r1, [r7, #8]
 8010296:	4618      	mov	r0, r3
 8010298:	f000 fa4a 	bl	8010730 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	699a      	ldr	r2, [r3, #24]
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80102aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	699a      	ldr	r2, [r3, #24]
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80102ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	6999      	ldr	r1, [r3, #24]
 80102c2:	68bb      	ldr	r3, [r7, #8]
 80102c4:	691b      	ldr	r3, [r3, #16]
 80102c6:	021a      	lsls	r2, r3, #8
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	430a      	orrs	r2, r1
 80102ce:	619a      	str	r2, [r3, #24]
      break;
 80102d0:	e043      	b.n	801035a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	68b9      	ldr	r1, [r7, #8]
 80102d8:	4618      	mov	r0, r3
 80102da:	f000 fa95 	bl	8010808 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	69da      	ldr	r2, [r3, #28]
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	f042 0208 	orr.w	r2, r2, #8
 80102ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	69da      	ldr	r2, [r3, #28]
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	f022 0204 	bic.w	r2, r2, #4
 80102fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	69d9      	ldr	r1, [r3, #28]
 8010304:	68bb      	ldr	r3, [r7, #8]
 8010306:	691a      	ldr	r2, [r3, #16]
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	430a      	orrs	r2, r1
 801030e:	61da      	str	r2, [r3, #28]
      break;
 8010310:	e023      	b.n	801035a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	68b9      	ldr	r1, [r7, #8]
 8010318:	4618      	mov	r0, r3
 801031a:	f000 fadf 	bl	80108dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	69da      	ldr	r2, [r3, #28]
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801032c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	69da      	ldr	r2, [r3, #28]
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801033c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	69d9      	ldr	r1, [r3, #28]
 8010344:	68bb      	ldr	r3, [r7, #8]
 8010346:	691b      	ldr	r3, [r3, #16]
 8010348:	021a      	lsls	r2, r3, #8
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	430a      	orrs	r2, r1
 8010350:	61da      	str	r2, [r3, #28]
      break;
 8010352:	e002      	b.n	801035a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8010354:	2301      	movs	r3, #1
 8010356:	75fb      	strb	r3, [r7, #23]
      break;
 8010358:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	2200      	movs	r2, #0
 801035e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010362:	7dfb      	ldrb	r3, [r7, #23]
}
 8010364:	4618      	mov	r0, r3
 8010366:	3718      	adds	r7, #24
 8010368:	46bd      	mov	sp, r7
 801036a:	bd80      	pop	{r7, pc}

0801036c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b084      	sub	sp, #16
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
 8010374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010376:	2300      	movs	r3, #0
 8010378:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010380:	2b01      	cmp	r3, #1
 8010382:	d101      	bne.n	8010388 <HAL_TIM_ConfigClockSource+0x1c>
 8010384:	2302      	movs	r3, #2
 8010386:	e0b4      	b.n	80104f2 <HAL_TIM_ConfigClockSource+0x186>
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	2201      	movs	r2, #1
 801038c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2202      	movs	r2, #2
 8010394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	689b      	ldr	r3, [r3, #8]
 801039e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80103a0:	68bb      	ldr	r3, [r7, #8]
 80103a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80103a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80103a8:	68bb      	ldr	r3, [r7, #8]
 80103aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80103ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	68ba      	ldr	r2, [r7, #8]
 80103b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80103b8:	683b      	ldr	r3, [r7, #0]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80103c0:	d03e      	beq.n	8010440 <HAL_TIM_ConfigClockSource+0xd4>
 80103c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80103c6:	f200 8087 	bhi.w	80104d8 <HAL_TIM_ConfigClockSource+0x16c>
 80103ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80103ce:	f000 8086 	beq.w	80104de <HAL_TIM_ConfigClockSource+0x172>
 80103d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80103d6:	d87f      	bhi.n	80104d8 <HAL_TIM_ConfigClockSource+0x16c>
 80103d8:	2b70      	cmp	r3, #112	@ 0x70
 80103da:	d01a      	beq.n	8010412 <HAL_TIM_ConfigClockSource+0xa6>
 80103dc:	2b70      	cmp	r3, #112	@ 0x70
 80103de:	d87b      	bhi.n	80104d8 <HAL_TIM_ConfigClockSource+0x16c>
 80103e0:	2b60      	cmp	r3, #96	@ 0x60
 80103e2:	d050      	beq.n	8010486 <HAL_TIM_ConfigClockSource+0x11a>
 80103e4:	2b60      	cmp	r3, #96	@ 0x60
 80103e6:	d877      	bhi.n	80104d8 <HAL_TIM_ConfigClockSource+0x16c>
 80103e8:	2b50      	cmp	r3, #80	@ 0x50
 80103ea:	d03c      	beq.n	8010466 <HAL_TIM_ConfigClockSource+0xfa>
 80103ec:	2b50      	cmp	r3, #80	@ 0x50
 80103ee:	d873      	bhi.n	80104d8 <HAL_TIM_ConfigClockSource+0x16c>
 80103f0:	2b40      	cmp	r3, #64	@ 0x40
 80103f2:	d058      	beq.n	80104a6 <HAL_TIM_ConfigClockSource+0x13a>
 80103f4:	2b40      	cmp	r3, #64	@ 0x40
 80103f6:	d86f      	bhi.n	80104d8 <HAL_TIM_ConfigClockSource+0x16c>
 80103f8:	2b30      	cmp	r3, #48	@ 0x30
 80103fa:	d064      	beq.n	80104c6 <HAL_TIM_ConfigClockSource+0x15a>
 80103fc:	2b30      	cmp	r3, #48	@ 0x30
 80103fe:	d86b      	bhi.n	80104d8 <HAL_TIM_ConfigClockSource+0x16c>
 8010400:	2b20      	cmp	r3, #32
 8010402:	d060      	beq.n	80104c6 <HAL_TIM_ConfigClockSource+0x15a>
 8010404:	2b20      	cmp	r3, #32
 8010406:	d867      	bhi.n	80104d8 <HAL_TIM_ConfigClockSource+0x16c>
 8010408:	2b00      	cmp	r3, #0
 801040a:	d05c      	beq.n	80104c6 <HAL_TIM_ConfigClockSource+0x15a>
 801040c:	2b10      	cmp	r3, #16
 801040e:	d05a      	beq.n	80104c6 <HAL_TIM_ConfigClockSource+0x15a>
 8010410:	e062      	b.n	80104d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010416:	683b      	ldr	r3, [r7, #0]
 8010418:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801041a:	683b      	ldr	r3, [r7, #0]
 801041c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801041e:	683b      	ldr	r3, [r7, #0]
 8010420:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010422:	f000 fb25 	bl	8010a70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	689b      	ldr	r3, [r3, #8]
 801042c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801042e:	68bb      	ldr	r3, [r7, #8]
 8010430:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8010434:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	68ba      	ldr	r2, [r7, #8]
 801043c:	609a      	str	r2, [r3, #8]
      break;
 801043e:	e04f      	b.n	80104e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010444:	683b      	ldr	r3, [r7, #0]
 8010446:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8010448:	683b      	ldr	r3, [r7, #0]
 801044a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801044c:	683b      	ldr	r3, [r7, #0]
 801044e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010450:	f000 fb0e 	bl	8010a70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	689a      	ldr	r2, [r3, #8]
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010462:	609a      	str	r2, [r3, #8]
      break;
 8010464:	e03c      	b.n	80104e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801046a:	683b      	ldr	r3, [r7, #0]
 801046c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801046e:	683b      	ldr	r3, [r7, #0]
 8010470:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010472:	461a      	mov	r2, r3
 8010474:	f000 fa82 	bl	801097c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	2150      	movs	r1, #80	@ 0x50
 801047e:	4618      	mov	r0, r3
 8010480:	f000 fadb 	bl	8010a3a <TIM_ITRx_SetConfig>
      break;
 8010484:	e02c      	b.n	80104e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801048a:	683b      	ldr	r3, [r7, #0]
 801048c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801048e:	683b      	ldr	r3, [r7, #0]
 8010490:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010492:	461a      	mov	r2, r3
 8010494:	f000 faa1 	bl	80109da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	2160      	movs	r1, #96	@ 0x60
 801049e:	4618      	mov	r0, r3
 80104a0:	f000 facb 	bl	8010a3a <TIM_ITRx_SetConfig>
      break;
 80104a4:	e01c      	b.n	80104e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80104aa:	683b      	ldr	r3, [r7, #0]
 80104ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80104ae:	683b      	ldr	r3, [r7, #0]
 80104b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80104b2:	461a      	mov	r2, r3
 80104b4:	f000 fa62 	bl	801097c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	2140      	movs	r1, #64	@ 0x40
 80104be:	4618      	mov	r0, r3
 80104c0:	f000 fabb 	bl	8010a3a <TIM_ITRx_SetConfig>
      break;
 80104c4:	e00c      	b.n	80104e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	681a      	ldr	r2, [r3, #0]
 80104ca:	683b      	ldr	r3, [r7, #0]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	4619      	mov	r1, r3
 80104d0:	4610      	mov	r0, r2
 80104d2:	f000 fab2 	bl	8010a3a <TIM_ITRx_SetConfig>
      break;
 80104d6:	e003      	b.n	80104e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80104d8:	2301      	movs	r3, #1
 80104da:	73fb      	strb	r3, [r7, #15]
      break;
 80104dc:	e000      	b.n	80104e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80104de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	2201      	movs	r2, #1
 80104e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2200      	movs	r2, #0
 80104ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80104f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80104f2:	4618      	mov	r0, r3
 80104f4:	3710      	adds	r7, #16
 80104f6:	46bd      	mov	sp, r7
 80104f8:	bd80      	pop	{r7, pc}

080104fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80104fa:	b480      	push	{r7}
 80104fc:	b083      	sub	sp, #12
 80104fe:	af00      	add	r7, sp, #0
 8010500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010502:	bf00      	nop
 8010504:	370c      	adds	r7, #12
 8010506:	46bd      	mov	sp, r7
 8010508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050c:	4770      	bx	lr

0801050e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801050e:	b480      	push	{r7}
 8010510:	b083      	sub	sp, #12
 8010512:	af00      	add	r7, sp, #0
 8010514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010516:	bf00      	nop
 8010518:	370c      	adds	r7, #12
 801051a:	46bd      	mov	sp, r7
 801051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010520:	4770      	bx	lr

08010522 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010522:	b480      	push	{r7}
 8010524:	b083      	sub	sp, #12
 8010526:	af00      	add	r7, sp, #0
 8010528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801052a:	bf00      	nop
 801052c:	370c      	adds	r7, #12
 801052e:	46bd      	mov	sp, r7
 8010530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010534:	4770      	bx	lr

08010536 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010536:	b480      	push	{r7}
 8010538:	b083      	sub	sp, #12
 801053a:	af00      	add	r7, sp, #0
 801053c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801053e:	bf00      	nop
 8010540:	370c      	adds	r7, #12
 8010542:	46bd      	mov	sp, r7
 8010544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010548:	4770      	bx	lr
	...

0801054c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801054c:	b480      	push	{r7}
 801054e:	b085      	sub	sp, #20
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
 8010554:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	4a3a      	ldr	r2, [pc, #232]	@ (8010648 <TIM_Base_SetConfig+0xfc>)
 8010560:	4293      	cmp	r3, r2
 8010562:	d00f      	beq.n	8010584 <TIM_Base_SetConfig+0x38>
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801056a:	d00b      	beq.n	8010584 <TIM_Base_SetConfig+0x38>
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	4a37      	ldr	r2, [pc, #220]	@ (801064c <TIM_Base_SetConfig+0x100>)
 8010570:	4293      	cmp	r3, r2
 8010572:	d007      	beq.n	8010584 <TIM_Base_SetConfig+0x38>
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	4a36      	ldr	r2, [pc, #216]	@ (8010650 <TIM_Base_SetConfig+0x104>)
 8010578:	4293      	cmp	r3, r2
 801057a:	d003      	beq.n	8010584 <TIM_Base_SetConfig+0x38>
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	4a35      	ldr	r2, [pc, #212]	@ (8010654 <TIM_Base_SetConfig+0x108>)
 8010580:	4293      	cmp	r3, r2
 8010582:	d108      	bne.n	8010596 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801058a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801058c:	683b      	ldr	r3, [r7, #0]
 801058e:	685b      	ldr	r3, [r3, #4]
 8010590:	68fa      	ldr	r2, [r7, #12]
 8010592:	4313      	orrs	r3, r2
 8010594:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	4a2b      	ldr	r2, [pc, #172]	@ (8010648 <TIM_Base_SetConfig+0xfc>)
 801059a:	4293      	cmp	r3, r2
 801059c:	d01b      	beq.n	80105d6 <TIM_Base_SetConfig+0x8a>
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80105a4:	d017      	beq.n	80105d6 <TIM_Base_SetConfig+0x8a>
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	4a28      	ldr	r2, [pc, #160]	@ (801064c <TIM_Base_SetConfig+0x100>)
 80105aa:	4293      	cmp	r3, r2
 80105ac:	d013      	beq.n	80105d6 <TIM_Base_SetConfig+0x8a>
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	4a27      	ldr	r2, [pc, #156]	@ (8010650 <TIM_Base_SetConfig+0x104>)
 80105b2:	4293      	cmp	r3, r2
 80105b4:	d00f      	beq.n	80105d6 <TIM_Base_SetConfig+0x8a>
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	4a26      	ldr	r2, [pc, #152]	@ (8010654 <TIM_Base_SetConfig+0x108>)
 80105ba:	4293      	cmp	r3, r2
 80105bc:	d00b      	beq.n	80105d6 <TIM_Base_SetConfig+0x8a>
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	4a25      	ldr	r2, [pc, #148]	@ (8010658 <TIM_Base_SetConfig+0x10c>)
 80105c2:	4293      	cmp	r3, r2
 80105c4:	d007      	beq.n	80105d6 <TIM_Base_SetConfig+0x8a>
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	4a24      	ldr	r2, [pc, #144]	@ (801065c <TIM_Base_SetConfig+0x110>)
 80105ca:	4293      	cmp	r3, r2
 80105cc:	d003      	beq.n	80105d6 <TIM_Base_SetConfig+0x8a>
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	4a23      	ldr	r2, [pc, #140]	@ (8010660 <TIM_Base_SetConfig+0x114>)
 80105d2:	4293      	cmp	r3, r2
 80105d4:	d108      	bne.n	80105e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80105dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80105de:	683b      	ldr	r3, [r7, #0]
 80105e0:	68db      	ldr	r3, [r3, #12]
 80105e2:	68fa      	ldr	r2, [r7, #12]
 80105e4:	4313      	orrs	r3, r2
 80105e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80105ee:	683b      	ldr	r3, [r7, #0]
 80105f0:	695b      	ldr	r3, [r3, #20]
 80105f2:	4313      	orrs	r3, r2
 80105f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	68fa      	ldr	r2, [r7, #12]
 80105fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	689a      	ldr	r2, [r3, #8]
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	681a      	ldr	r2, [r3, #0]
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	4a0e      	ldr	r2, [pc, #56]	@ (8010648 <TIM_Base_SetConfig+0xfc>)
 8010610:	4293      	cmp	r3, r2
 8010612:	d103      	bne.n	801061c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010614:	683b      	ldr	r3, [r7, #0]
 8010616:	691a      	ldr	r2, [r3, #16]
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2201      	movs	r2, #1
 8010620:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	691b      	ldr	r3, [r3, #16]
 8010626:	f003 0301 	and.w	r3, r3, #1
 801062a:	2b01      	cmp	r3, #1
 801062c:	d105      	bne.n	801063a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	691b      	ldr	r3, [r3, #16]
 8010632:	f023 0201 	bic.w	r2, r3, #1
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	611a      	str	r2, [r3, #16]
  }
}
 801063a:	bf00      	nop
 801063c:	3714      	adds	r7, #20
 801063e:	46bd      	mov	sp, r7
 8010640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010644:	4770      	bx	lr
 8010646:	bf00      	nop
 8010648:	40010000 	.word	0x40010000
 801064c:	40000400 	.word	0x40000400
 8010650:	40000800 	.word	0x40000800
 8010654:	40000c00 	.word	0x40000c00
 8010658:	40014000 	.word	0x40014000
 801065c:	40014400 	.word	0x40014400
 8010660:	40014800 	.word	0x40014800

08010664 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010664:	b480      	push	{r7}
 8010666:	b087      	sub	sp, #28
 8010668:	af00      	add	r7, sp, #0
 801066a:	6078      	str	r0, [r7, #4]
 801066c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	6a1b      	ldr	r3, [r3, #32]
 8010672:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	6a1b      	ldr	r3, [r3, #32]
 8010678:	f023 0201 	bic.w	r2, r3, #1
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	685b      	ldr	r3, [r3, #4]
 8010684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	699b      	ldr	r3, [r3, #24]
 801068a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	f023 0303 	bic.w	r3, r3, #3
 801069a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	68fa      	ldr	r2, [r7, #12]
 80106a2:	4313      	orrs	r3, r2
 80106a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80106a6:	697b      	ldr	r3, [r7, #20]
 80106a8:	f023 0302 	bic.w	r3, r3, #2
 80106ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80106ae:	683b      	ldr	r3, [r7, #0]
 80106b0:	689b      	ldr	r3, [r3, #8]
 80106b2:	697a      	ldr	r2, [r7, #20]
 80106b4:	4313      	orrs	r3, r2
 80106b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	4a1c      	ldr	r2, [pc, #112]	@ (801072c <TIM_OC1_SetConfig+0xc8>)
 80106bc:	4293      	cmp	r3, r2
 80106be:	d10c      	bne.n	80106da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80106c0:	697b      	ldr	r3, [r7, #20]
 80106c2:	f023 0308 	bic.w	r3, r3, #8
 80106c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80106c8:	683b      	ldr	r3, [r7, #0]
 80106ca:	68db      	ldr	r3, [r3, #12]
 80106cc:	697a      	ldr	r2, [r7, #20]
 80106ce:	4313      	orrs	r3, r2
 80106d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80106d2:	697b      	ldr	r3, [r7, #20]
 80106d4:	f023 0304 	bic.w	r3, r3, #4
 80106d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	4a13      	ldr	r2, [pc, #76]	@ (801072c <TIM_OC1_SetConfig+0xc8>)
 80106de:	4293      	cmp	r3, r2
 80106e0:	d111      	bne.n	8010706 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80106e2:	693b      	ldr	r3, [r7, #16]
 80106e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80106e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80106ea:	693b      	ldr	r3, [r7, #16]
 80106ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80106f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80106f2:	683b      	ldr	r3, [r7, #0]
 80106f4:	695b      	ldr	r3, [r3, #20]
 80106f6:	693a      	ldr	r2, [r7, #16]
 80106f8:	4313      	orrs	r3, r2
 80106fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80106fc:	683b      	ldr	r3, [r7, #0]
 80106fe:	699b      	ldr	r3, [r3, #24]
 8010700:	693a      	ldr	r2, [r7, #16]
 8010702:	4313      	orrs	r3, r2
 8010704:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	693a      	ldr	r2, [r7, #16]
 801070a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	68fa      	ldr	r2, [r7, #12]
 8010710:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010712:	683b      	ldr	r3, [r7, #0]
 8010714:	685a      	ldr	r2, [r3, #4]
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	697a      	ldr	r2, [r7, #20]
 801071e:	621a      	str	r2, [r3, #32]
}
 8010720:	bf00      	nop
 8010722:	371c      	adds	r7, #28
 8010724:	46bd      	mov	sp, r7
 8010726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072a:	4770      	bx	lr
 801072c:	40010000 	.word	0x40010000

08010730 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010730:	b480      	push	{r7}
 8010732:	b087      	sub	sp, #28
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
 8010738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	6a1b      	ldr	r3, [r3, #32]
 801073e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	6a1b      	ldr	r3, [r3, #32]
 8010744:	f023 0210 	bic.w	r2, r3, #16
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	685b      	ldr	r3, [r3, #4]
 8010750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	699b      	ldr	r3, [r3, #24]
 8010756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801075e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010766:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010768:	683b      	ldr	r3, [r7, #0]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	021b      	lsls	r3, r3, #8
 801076e:	68fa      	ldr	r2, [r7, #12]
 8010770:	4313      	orrs	r3, r2
 8010772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010774:	697b      	ldr	r3, [r7, #20]
 8010776:	f023 0320 	bic.w	r3, r3, #32
 801077a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801077c:	683b      	ldr	r3, [r7, #0]
 801077e:	689b      	ldr	r3, [r3, #8]
 8010780:	011b      	lsls	r3, r3, #4
 8010782:	697a      	ldr	r2, [r7, #20]
 8010784:	4313      	orrs	r3, r2
 8010786:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	4a1e      	ldr	r2, [pc, #120]	@ (8010804 <TIM_OC2_SetConfig+0xd4>)
 801078c:	4293      	cmp	r3, r2
 801078e:	d10d      	bne.n	80107ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010790:	697b      	ldr	r3, [r7, #20]
 8010792:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010796:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010798:	683b      	ldr	r3, [r7, #0]
 801079a:	68db      	ldr	r3, [r3, #12]
 801079c:	011b      	lsls	r3, r3, #4
 801079e:	697a      	ldr	r2, [r7, #20]
 80107a0:	4313      	orrs	r3, r2
 80107a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80107a4:	697b      	ldr	r3, [r7, #20]
 80107a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80107aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	4a15      	ldr	r2, [pc, #84]	@ (8010804 <TIM_OC2_SetConfig+0xd4>)
 80107b0:	4293      	cmp	r3, r2
 80107b2:	d113      	bne.n	80107dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80107b4:	693b      	ldr	r3, [r7, #16]
 80107b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80107ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80107bc:	693b      	ldr	r3, [r7, #16]
 80107be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80107c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80107c4:	683b      	ldr	r3, [r7, #0]
 80107c6:	695b      	ldr	r3, [r3, #20]
 80107c8:	009b      	lsls	r3, r3, #2
 80107ca:	693a      	ldr	r2, [r7, #16]
 80107cc:	4313      	orrs	r3, r2
 80107ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80107d0:	683b      	ldr	r3, [r7, #0]
 80107d2:	699b      	ldr	r3, [r3, #24]
 80107d4:	009b      	lsls	r3, r3, #2
 80107d6:	693a      	ldr	r2, [r7, #16]
 80107d8:	4313      	orrs	r3, r2
 80107da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	693a      	ldr	r2, [r7, #16]
 80107e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	68fa      	ldr	r2, [r7, #12]
 80107e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80107e8:	683b      	ldr	r3, [r7, #0]
 80107ea:	685a      	ldr	r2, [r3, #4]
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	697a      	ldr	r2, [r7, #20]
 80107f4:	621a      	str	r2, [r3, #32]
}
 80107f6:	bf00      	nop
 80107f8:	371c      	adds	r7, #28
 80107fa:	46bd      	mov	sp, r7
 80107fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010800:	4770      	bx	lr
 8010802:	bf00      	nop
 8010804:	40010000 	.word	0x40010000

08010808 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010808:	b480      	push	{r7}
 801080a:	b087      	sub	sp, #28
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
 8010810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	6a1b      	ldr	r3, [r3, #32]
 8010816:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	6a1b      	ldr	r3, [r3, #32]
 801081c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	685b      	ldr	r3, [r3, #4]
 8010828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	69db      	ldr	r3, [r3, #28]
 801082e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	f023 0303 	bic.w	r3, r3, #3
 801083e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010840:	683b      	ldr	r3, [r7, #0]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	68fa      	ldr	r2, [r7, #12]
 8010846:	4313      	orrs	r3, r2
 8010848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801084a:	697b      	ldr	r3, [r7, #20]
 801084c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010850:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010852:	683b      	ldr	r3, [r7, #0]
 8010854:	689b      	ldr	r3, [r3, #8]
 8010856:	021b      	lsls	r3, r3, #8
 8010858:	697a      	ldr	r2, [r7, #20]
 801085a:	4313      	orrs	r3, r2
 801085c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	4a1d      	ldr	r2, [pc, #116]	@ (80108d8 <TIM_OC3_SetConfig+0xd0>)
 8010862:	4293      	cmp	r3, r2
 8010864:	d10d      	bne.n	8010882 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010866:	697b      	ldr	r3, [r7, #20]
 8010868:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801086c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801086e:	683b      	ldr	r3, [r7, #0]
 8010870:	68db      	ldr	r3, [r3, #12]
 8010872:	021b      	lsls	r3, r3, #8
 8010874:	697a      	ldr	r2, [r7, #20]
 8010876:	4313      	orrs	r3, r2
 8010878:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801087a:	697b      	ldr	r3, [r7, #20]
 801087c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010880:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	4a14      	ldr	r2, [pc, #80]	@ (80108d8 <TIM_OC3_SetConfig+0xd0>)
 8010886:	4293      	cmp	r3, r2
 8010888:	d113      	bne.n	80108b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801088a:	693b      	ldr	r3, [r7, #16]
 801088c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010890:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010892:	693b      	ldr	r3, [r7, #16]
 8010894:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010898:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	695b      	ldr	r3, [r3, #20]
 801089e:	011b      	lsls	r3, r3, #4
 80108a0:	693a      	ldr	r2, [r7, #16]
 80108a2:	4313      	orrs	r3, r2
 80108a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80108a6:	683b      	ldr	r3, [r7, #0]
 80108a8:	699b      	ldr	r3, [r3, #24]
 80108aa:	011b      	lsls	r3, r3, #4
 80108ac:	693a      	ldr	r2, [r7, #16]
 80108ae:	4313      	orrs	r3, r2
 80108b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	693a      	ldr	r2, [r7, #16]
 80108b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	68fa      	ldr	r2, [r7, #12]
 80108bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80108be:	683b      	ldr	r3, [r7, #0]
 80108c0:	685a      	ldr	r2, [r3, #4]
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	697a      	ldr	r2, [r7, #20]
 80108ca:	621a      	str	r2, [r3, #32]
}
 80108cc:	bf00      	nop
 80108ce:	371c      	adds	r7, #28
 80108d0:	46bd      	mov	sp, r7
 80108d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d6:	4770      	bx	lr
 80108d8:	40010000 	.word	0x40010000

080108dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80108dc:	b480      	push	{r7}
 80108de:	b087      	sub	sp, #28
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
 80108e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	6a1b      	ldr	r3, [r3, #32]
 80108ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	6a1b      	ldr	r3, [r3, #32]
 80108f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	685b      	ldr	r3, [r3, #4]
 80108fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	69db      	ldr	r3, [r3, #28]
 8010902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801090a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010912:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010914:	683b      	ldr	r3, [r7, #0]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	021b      	lsls	r3, r3, #8
 801091a:	68fa      	ldr	r2, [r7, #12]
 801091c:	4313      	orrs	r3, r2
 801091e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010920:	693b      	ldr	r3, [r7, #16]
 8010922:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010926:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010928:	683b      	ldr	r3, [r7, #0]
 801092a:	689b      	ldr	r3, [r3, #8]
 801092c:	031b      	lsls	r3, r3, #12
 801092e:	693a      	ldr	r2, [r7, #16]
 8010930:	4313      	orrs	r3, r2
 8010932:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	4a10      	ldr	r2, [pc, #64]	@ (8010978 <TIM_OC4_SetConfig+0x9c>)
 8010938:	4293      	cmp	r3, r2
 801093a:	d109      	bne.n	8010950 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801093c:	697b      	ldr	r3, [r7, #20]
 801093e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010942:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010944:	683b      	ldr	r3, [r7, #0]
 8010946:	695b      	ldr	r3, [r3, #20]
 8010948:	019b      	lsls	r3, r3, #6
 801094a:	697a      	ldr	r2, [r7, #20]
 801094c:	4313      	orrs	r3, r2
 801094e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	697a      	ldr	r2, [r7, #20]
 8010954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	68fa      	ldr	r2, [r7, #12]
 801095a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801095c:	683b      	ldr	r3, [r7, #0]
 801095e:	685a      	ldr	r2, [r3, #4]
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	693a      	ldr	r2, [r7, #16]
 8010968:	621a      	str	r2, [r3, #32]
}
 801096a:	bf00      	nop
 801096c:	371c      	adds	r7, #28
 801096e:	46bd      	mov	sp, r7
 8010970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010974:	4770      	bx	lr
 8010976:	bf00      	nop
 8010978:	40010000 	.word	0x40010000

0801097c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801097c:	b480      	push	{r7}
 801097e:	b087      	sub	sp, #28
 8010980:	af00      	add	r7, sp, #0
 8010982:	60f8      	str	r0, [r7, #12]
 8010984:	60b9      	str	r1, [r7, #8]
 8010986:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	6a1b      	ldr	r3, [r3, #32]
 801098c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	6a1b      	ldr	r3, [r3, #32]
 8010992:	f023 0201 	bic.w	r2, r3, #1
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	699b      	ldr	r3, [r3, #24]
 801099e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80109a0:	693b      	ldr	r3, [r7, #16]
 80109a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80109a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	011b      	lsls	r3, r3, #4
 80109ac:	693a      	ldr	r2, [r7, #16]
 80109ae:	4313      	orrs	r3, r2
 80109b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80109b2:	697b      	ldr	r3, [r7, #20]
 80109b4:	f023 030a 	bic.w	r3, r3, #10
 80109b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80109ba:	697a      	ldr	r2, [r7, #20]
 80109bc:	68bb      	ldr	r3, [r7, #8]
 80109be:	4313      	orrs	r3, r2
 80109c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	693a      	ldr	r2, [r7, #16]
 80109c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	697a      	ldr	r2, [r7, #20]
 80109cc:	621a      	str	r2, [r3, #32]
}
 80109ce:	bf00      	nop
 80109d0:	371c      	adds	r7, #28
 80109d2:	46bd      	mov	sp, r7
 80109d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d8:	4770      	bx	lr

080109da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80109da:	b480      	push	{r7}
 80109dc:	b087      	sub	sp, #28
 80109de:	af00      	add	r7, sp, #0
 80109e0:	60f8      	str	r0, [r7, #12]
 80109e2:	60b9      	str	r1, [r7, #8]
 80109e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	6a1b      	ldr	r3, [r3, #32]
 80109ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	6a1b      	ldr	r3, [r3, #32]
 80109f0:	f023 0210 	bic.w	r2, r3, #16
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	699b      	ldr	r3, [r3, #24]
 80109fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80109fe:	693b      	ldr	r3, [r7, #16]
 8010a00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8010a04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	031b      	lsls	r3, r3, #12
 8010a0a:	693a      	ldr	r2, [r7, #16]
 8010a0c:	4313      	orrs	r3, r2
 8010a0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010a10:	697b      	ldr	r3, [r7, #20]
 8010a12:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8010a16:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010a18:	68bb      	ldr	r3, [r7, #8]
 8010a1a:	011b      	lsls	r3, r3, #4
 8010a1c:	697a      	ldr	r2, [r7, #20]
 8010a1e:	4313      	orrs	r3, r2
 8010a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	693a      	ldr	r2, [r7, #16]
 8010a26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	697a      	ldr	r2, [r7, #20]
 8010a2c:	621a      	str	r2, [r3, #32]
}
 8010a2e:	bf00      	nop
 8010a30:	371c      	adds	r7, #28
 8010a32:	46bd      	mov	sp, r7
 8010a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a38:	4770      	bx	lr

08010a3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010a3a:	b480      	push	{r7}
 8010a3c:	b085      	sub	sp, #20
 8010a3e:	af00      	add	r7, sp, #0
 8010a40:	6078      	str	r0, [r7, #4]
 8010a42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	689b      	ldr	r3, [r3, #8]
 8010a48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010a50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010a52:	683a      	ldr	r2, [r7, #0]
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	4313      	orrs	r3, r2
 8010a58:	f043 0307 	orr.w	r3, r3, #7
 8010a5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	68fa      	ldr	r2, [r7, #12]
 8010a62:	609a      	str	r2, [r3, #8]
}
 8010a64:	bf00      	nop
 8010a66:	3714      	adds	r7, #20
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6e:	4770      	bx	lr

08010a70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010a70:	b480      	push	{r7}
 8010a72:	b087      	sub	sp, #28
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	60f8      	str	r0, [r7, #12]
 8010a78:	60b9      	str	r1, [r7, #8]
 8010a7a:	607a      	str	r2, [r7, #4]
 8010a7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	689b      	ldr	r3, [r3, #8]
 8010a82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010a84:	697b      	ldr	r3, [r7, #20]
 8010a86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010a8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010a8c:	683b      	ldr	r3, [r7, #0]
 8010a8e:	021a      	lsls	r2, r3, #8
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	431a      	orrs	r2, r3
 8010a94:	68bb      	ldr	r3, [r7, #8]
 8010a96:	4313      	orrs	r3, r2
 8010a98:	697a      	ldr	r2, [r7, #20]
 8010a9a:	4313      	orrs	r3, r2
 8010a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	697a      	ldr	r2, [r7, #20]
 8010aa2:	609a      	str	r2, [r3, #8]
}
 8010aa4:	bf00      	nop
 8010aa6:	371c      	adds	r7, #28
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aae:	4770      	bx	lr

08010ab0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010ab0:	b480      	push	{r7}
 8010ab2:	b087      	sub	sp, #28
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	60f8      	str	r0, [r7, #12]
 8010ab8:	60b9      	str	r1, [r7, #8]
 8010aba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010abc:	68bb      	ldr	r3, [r7, #8]
 8010abe:	f003 031f 	and.w	r3, r3, #31
 8010ac2:	2201      	movs	r2, #1
 8010ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8010ac8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	6a1a      	ldr	r2, [r3, #32]
 8010ace:	697b      	ldr	r3, [r7, #20]
 8010ad0:	43db      	mvns	r3, r3
 8010ad2:	401a      	ands	r2, r3
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	6a1a      	ldr	r2, [r3, #32]
 8010adc:	68bb      	ldr	r3, [r7, #8]
 8010ade:	f003 031f 	and.w	r3, r3, #31
 8010ae2:	6879      	ldr	r1, [r7, #4]
 8010ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8010ae8:	431a      	orrs	r2, r3
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	621a      	str	r2, [r3, #32]
}
 8010aee:	bf00      	nop
 8010af0:	371c      	adds	r7, #28
 8010af2:	46bd      	mov	sp, r7
 8010af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af8:	4770      	bx	lr
	...

08010afc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010afc:	b480      	push	{r7}
 8010afe:	b085      	sub	sp, #20
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	6078      	str	r0, [r7, #4]
 8010b04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010b0c:	2b01      	cmp	r3, #1
 8010b0e:	d101      	bne.n	8010b14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010b10:	2302      	movs	r3, #2
 8010b12:	e050      	b.n	8010bb6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	2201      	movs	r2, #1
 8010b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	2202      	movs	r2, #2
 8010b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	685b      	ldr	r3, [r3, #4]
 8010b2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	689b      	ldr	r3, [r3, #8]
 8010b32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010b3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010b3c:	683b      	ldr	r3, [r7, #0]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	68fa      	ldr	r2, [r7, #12]
 8010b42:	4313      	orrs	r3, r2
 8010b44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	68fa      	ldr	r2, [r7, #12]
 8010b4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	4a1c      	ldr	r2, [pc, #112]	@ (8010bc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8010b54:	4293      	cmp	r3, r2
 8010b56:	d018      	beq.n	8010b8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010b60:	d013      	beq.n	8010b8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	4a18      	ldr	r2, [pc, #96]	@ (8010bc8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8010b68:	4293      	cmp	r3, r2
 8010b6a:	d00e      	beq.n	8010b8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	4a16      	ldr	r2, [pc, #88]	@ (8010bcc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8010b72:	4293      	cmp	r3, r2
 8010b74:	d009      	beq.n	8010b8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	4a15      	ldr	r2, [pc, #84]	@ (8010bd0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8010b7c:	4293      	cmp	r3, r2
 8010b7e:	d004      	beq.n	8010b8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	4a13      	ldr	r2, [pc, #76]	@ (8010bd4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8010b86:	4293      	cmp	r3, r2
 8010b88:	d10c      	bne.n	8010ba4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010b8a:	68bb      	ldr	r3, [r7, #8]
 8010b8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010b90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010b92:	683b      	ldr	r3, [r7, #0]
 8010b94:	685b      	ldr	r3, [r3, #4]
 8010b96:	68ba      	ldr	r2, [r7, #8]
 8010b98:	4313      	orrs	r3, r2
 8010b9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	68ba      	ldr	r2, [r7, #8]
 8010ba2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	2201      	movs	r2, #1
 8010ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	2200      	movs	r2, #0
 8010bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010bb4:	2300      	movs	r3, #0
}
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	3714      	adds	r7, #20
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc0:	4770      	bx	lr
 8010bc2:	bf00      	nop
 8010bc4:	40010000 	.word	0x40010000
 8010bc8:	40000400 	.word	0x40000400
 8010bcc:	40000800 	.word	0x40000800
 8010bd0:	40000c00 	.word	0x40000c00
 8010bd4:	40014000 	.word	0x40014000

08010bd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010bd8:	b480      	push	{r7}
 8010bda:	b083      	sub	sp, #12
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010be0:	bf00      	nop
 8010be2:	370c      	adds	r7, #12
 8010be4:	46bd      	mov	sp, r7
 8010be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bea:	4770      	bx	lr

08010bec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010bec:	b480      	push	{r7}
 8010bee:	b083      	sub	sp, #12
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010bf4:	bf00      	nop
 8010bf6:	370c      	adds	r7, #12
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bfe:	4770      	bx	lr

08010c00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b082      	sub	sp, #8
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d101      	bne.n	8010c12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010c0e:	2301      	movs	r3, #1
 8010c10:	e042      	b.n	8010c98 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010c18:	b2db      	uxtb	r3, r3
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d106      	bne.n	8010c2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	2200      	movs	r2, #0
 8010c22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010c26:	6878      	ldr	r0, [r7, #4]
 8010c28:	f7fc f8a4 	bl	800cd74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	2224      	movs	r2, #36	@ 0x24
 8010c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	68da      	ldr	r2, [r3, #12]
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8010c42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010c44:	6878      	ldr	r0, [r7, #4]
 8010c46:	f000 f973 	bl	8010f30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	691a      	ldr	r2, [r3, #16]
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8010c58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	695a      	ldr	r2, [r3, #20]
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010c68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	68da      	ldr	r2, [r3, #12]
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8010c78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	2220      	movs	r2, #32
 8010c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	2220      	movs	r2, #32
 8010c8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	2200      	movs	r2, #0
 8010c94:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8010c96:	2300      	movs	r3, #0
}
 8010c98:	4618      	mov	r0, r3
 8010c9a:	3708      	adds	r7, #8
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	bd80      	pop	{r7, pc}

08010ca0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b08a      	sub	sp, #40	@ 0x28
 8010ca4:	af02      	add	r7, sp, #8
 8010ca6:	60f8      	str	r0, [r7, #12]
 8010ca8:	60b9      	str	r1, [r7, #8]
 8010caa:	603b      	str	r3, [r7, #0]
 8010cac:	4613      	mov	r3, r2
 8010cae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010cba:	b2db      	uxtb	r3, r3
 8010cbc:	2b20      	cmp	r3, #32
 8010cbe:	d175      	bne.n	8010dac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8010cc0:	68bb      	ldr	r3, [r7, #8]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d002      	beq.n	8010ccc <HAL_UART_Transmit+0x2c>
 8010cc6:	88fb      	ldrh	r3, [r7, #6]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d101      	bne.n	8010cd0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8010ccc:	2301      	movs	r3, #1
 8010cce:	e06e      	b.n	8010dae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	2221      	movs	r2, #33	@ 0x21
 8010cda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010cde:	f7fc fa6d 	bl	800d1bc <HAL_GetTick>
 8010ce2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	88fa      	ldrh	r2, [r7, #6]
 8010ce8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	88fa      	ldrh	r2, [r7, #6]
 8010cee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	689b      	ldr	r3, [r3, #8]
 8010cf4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010cf8:	d108      	bne.n	8010d0c <HAL_UART_Transmit+0x6c>
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	691b      	ldr	r3, [r3, #16]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d104      	bne.n	8010d0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8010d02:	2300      	movs	r3, #0
 8010d04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010d06:	68bb      	ldr	r3, [r7, #8]
 8010d08:	61bb      	str	r3, [r7, #24]
 8010d0a:	e003      	b.n	8010d14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8010d0c:	68bb      	ldr	r3, [r7, #8]
 8010d0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010d10:	2300      	movs	r3, #0
 8010d12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010d14:	e02e      	b.n	8010d74 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010d16:	683b      	ldr	r3, [r7, #0]
 8010d18:	9300      	str	r3, [sp, #0]
 8010d1a:	697b      	ldr	r3, [r7, #20]
 8010d1c:	2200      	movs	r2, #0
 8010d1e:	2180      	movs	r1, #128	@ 0x80
 8010d20:	68f8      	ldr	r0, [r7, #12]
 8010d22:	f000 f848 	bl	8010db6 <UART_WaitOnFlagUntilTimeout>
 8010d26:	4603      	mov	r3, r0
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d005      	beq.n	8010d38 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	2220      	movs	r2, #32
 8010d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8010d34:	2303      	movs	r3, #3
 8010d36:	e03a      	b.n	8010dae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8010d38:	69fb      	ldr	r3, [r7, #28]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d10b      	bne.n	8010d56 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010d3e:	69bb      	ldr	r3, [r7, #24]
 8010d40:	881b      	ldrh	r3, [r3, #0]
 8010d42:	461a      	mov	r2, r3
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010d4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8010d4e:	69bb      	ldr	r3, [r7, #24]
 8010d50:	3302      	adds	r3, #2
 8010d52:	61bb      	str	r3, [r7, #24]
 8010d54:	e007      	b.n	8010d66 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8010d56:	69fb      	ldr	r3, [r7, #28]
 8010d58:	781a      	ldrb	r2, [r3, #0]
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8010d60:	69fb      	ldr	r3, [r7, #28]
 8010d62:	3301      	adds	r3, #1
 8010d64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8010d6a:	b29b      	uxth	r3, r3
 8010d6c:	3b01      	subs	r3, #1
 8010d6e:	b29a      	uxth	r2, r3
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8010d78:	b29b      	uxth	r3, r3
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d1cb      	bne.n	8010d16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010d7e:	683b      	ldr	r3, [r7, #0]
 8010d80:	9300      	str	r3, [sp, #0]
 8010d82:	697b      	ldr	r3, [r7, #20]
 8010d84:	2200      	movs	r2, #0
 8010d86:	2140      	movs	r1, #64	@ 0x40
 8010d88:	68f8      	ldr	r0, [r7, #12]
 8010d8a:	f000 f814 	bl	8010db6 <UART_WaitOnFlagUntilTimeout>
 8010d8e:	4603      	mov	r3, r0
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d005      	beq.n	8010da0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	2220      	movs	r2, #32
 8010d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8010d9c:	2303      	movs	r3, #3
 8010d9e:	e006      	b.n	8010dae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	2220      	movs	r2, #32
 8010da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8010da8:	2300      	movs	r3, #0
 8010daa:	e000      	b.n	8010dae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8010dac:	2302      	movs	r3, #2
  }
}
 8010dae:	4618      	mov	r0, r3
 8010db0:	3720      	adds	r7, #32
 8010db2:	46bd      	mov	sp, r7
 8010db4:	bd80      	pop	{r7, pc}

08010db6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8010db6:	b580      	push	{r7, lr}
 8010db8:	b086      	sub	sp, #24
 8010dba:	af00      	add	r7, sp, #0
 8010dbc:	60f8      	str	r0, [r7, #12]
 8010dbe:	60b9      	str	r1, [r7, #8]
 8010dc0:	603b      	str	r3, [r7, #0]
 8010dc2:	4613      	mov	r3, r2
 8010dc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010dc6:	e03b      	b.n	8010e40 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010dc8:	6a3b      	ldr	r3, [r7, #32]
 8010dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dce:	d037      	beq.n	8010e40 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010dd0:	f7fc f9f4 	bl	800d1bc <HAL_GetTick>
 8010dd4:	4602      	mov	r2, r0
 8010dd6:	683b      	ldr	r3, [r7, #0]
 8010dd8:	1ad3      	subs	r3, r2, r3
 8010dda:	6a3a      	ldr	r2, [r7, #32]
 8010ddc:	429a      	cmp	r2, r3
 8010dde:	d302      	bcc.n	8010de6 <UART_WaitOnFlagUntilTimeout+0x30>
 8010de0:	6a3b      	ldr	r3, [r7, #32]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d101      	bne.n	8010dea <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010de6:	2303      	movs	r3, #3
 8010de8:	e03a      	b.n	8010e60 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	68db      	ldr	r3, [r3, #12]
 8010df0:	f003 0304 	and.w	r3, r3, #4
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d023      	beq.n	8010e40 <UART_WaitOnFlagUntilTimeout+0x8a>
 8010df8:	68bb      	ldr	r3, [r7, #8]
 8010dfa:	2b80      	cmp	r3, #128	@ 0x80
 8010dfc:	d020      	beq.n	8010e40 <UART_WaitOnFlagUntilTimeout+0x8a>
 8010dfe:	68bb      	ldr	r3, [r7, #8]
 8010e00:	2b40      	cmp	r3, #64	@ 0x40
 8010e02:	d01d      	beq.n	8010e40 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	f003 0308 	and.w	r3, r3, #8
 8010e0e:	2b08      	cmp	r3, #8
 8010e10:	d116      	bne.n	8010e40 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8010e12:	2300      	movs	r3, #0
 8010e14:	617b      	str	r3, [r7, #20]
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	617b      	str	r3, [r7, #20]
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	685b      	ldr	r3, [r3, #4]
 8010e24:	617b      	str	r3, [r7, #20]
 8010e26:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010e28:	68f8      	ldr	r0, [r7, #12]
 8010e2a:	f000 f81d 	bl	8010e68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	2208      	movs	r2, #8
 8010e32:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	2200      	movs	r2, #0
 8010e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8010e3c:	2301      	movs	r3, #1
 8010e3e:	e00f      	b.n	8010e60 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	681a      	ldr	r2, [r3, #0]
 8010e46:	68bb      	ldr	r3, [r7, #8]
 8010e48:	4013      	ands	r3, r2
 8010e4a:	68ba      	ldr	r2, [r7, #8]
 8010e4c:	429a      	cmp	r2, r3
 8010e4e:	bf0c      	ite	eq
 8010e50:	2301      	moveq	r3, #1
 8010e52:	2300      	movne	r3, #0
 8010e54:	b2db      	uxtb	r3, r3
 8010e56:	461a      	mov	r2, r3
 8010e58:	79fb      	ldrb	r3, [r7, #7]
 8010e5a:	429a      	cmp	r2, r3
 8010e5c:	d0b4      	beq.n	8010dc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010e5e:	2300      	movs	r3, #0
}
 8010e60:	4618      	mov	r0, r3
 8010e62:	3718      	adds	r7, #24
 8010e64:	46bd      	mov	sp, r7
 8010e66:	bd80      	pop	{r7, pc}

08010e68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010e68:	b480      	push	{r7}
 8010e6a:	b095      	sub	sp, #84	@ 0x54
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	330c      	adds	r3, #12
 8010e76:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e7a:	e853 3f00 	ldrex	r3, [r3]
 8010e7e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	330c      	adds	r3, #12
 8010e8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010e90:	643a      	str	r2, [r7, #64]	@ 0x40
 8010e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010e96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010e98:	e841 2300 	strex	r3, r2, [r1]
 8010e9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d1e5      	bne.n	8010e70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	3314      	adds	r3, #20
 8010eaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010eac:	6a3b      	ldr	r3, [r7, #32]
 8010eae:	e853 3f00 	ldrex	r3, [r3]
 8010eb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8010eb4:	69fb      	ldr	r3, [r7, #28]
 8010eb6:	f023 0301 	bic.w	r3, r3, #1
 8010eba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	3314      	adds	r3, #20
 8010ec2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010ec4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ec8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010eca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010ecc:	e841 2300 	strex	r3, r2, [r1]
 8010ed0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d1e5      	bne.n	8010ea4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010edc:	2b01      	cmp	r3, #1
 8010ede:	d119      	bne.n	8010f14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	330c      	adds	r3, #12
 8010ee6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	e853 3f00 	ldrex	r3, [r3]
 8010eee:	60bb      	str	r3, [r7, #8]
   return(result);
 8010ef0:	68bb      	ldr	r3, [r7, #8]
 8010ef2:	f023 0310 	bic.w	r3, r3, #16
 8010ef6:	647b      	str	r3, [r7, #68]	@ 0x44
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	330c      	adds	r3, #12
 8010efe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010f00:	61ba      	str	r2, [r7, #24]
 8010f02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f04:	6979      	ldr	r1, [r7, #20]
 8010f06:	69ba      	ldr	r2, [r7, #24]
 8010f08:	e841 2300 	strex	r3, r2, [r1]
 8010f0c:	613b      	str	r3, [r7, #16]
   return(result);
 8010f0e:	693b      	ldr	r3, [r7, #16]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d1e5      	bne.n	8010ee0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	2220      	movs	r2, #32
 8010f18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	2200      	movs	r2, #0
 8010f20:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8010f22:	bf00      	nop
 8010f24:	3754      	adds	r7, #84	@ 0x54
 8010f26:	46bd      	mov	sp, r7
 8010f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2c:	4770      	bx	lr
	...

08010f30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010f34:	b0c0      	sub	sp, #256	@ 0x100
 8010f36:	af00      	add	r7, sp, #0
 8010f38:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	691b      	ldr	r3, [r3, #16]
 8010f44:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8010f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010f4c:	68d9      	ldr	r1, [r3, #12]
 8010f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010f52:	681a      	ldr	r2, [r3, #0]
 8010f54:	ea40 0301 	orr.w	r3, r0, r1
 8010f58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010f5e:	689a      	ldr	r2, [r3, #8]
 8010f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010f64:	691b      	ldr	r3, [r3, #16]
 8010f66:	431a      	orrs	r2, r3
 8010f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010f6c:	695b      	ldr	r3, [r3, #20]
 8010f6e:	431a      	orrs	r2, r3
 8010f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010f74:	69db      	ldr	r3, [r3, #28]
 8010f76:	4313      	orrs	r3, r2
 8010f78:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8010f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	68db      	ldr	r3, [r3, #12]
 8010f84:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8010f88:	f021 010c 	bic.w	r1, r1, #12
 8010f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010f90:	681a      	ldr	r2, [r3, #0]
 8010f92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8010f96:	430b      	orrs	r3, r1
 8010f98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	695b      	ldr	r3, [r3, #20]
 8010fa2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8010fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010faa:	6999      	ldr	r1, [r3, #24]
 8010fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010fb0:	681a      	ldr	r2, [r3, #0]
 8010fb2:	ea40 0301 	orr.w	r3, r0, r1
 8010fb6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010fbc:	681a      	ldr	r2, [r3, #0]
 8010fbe:	4b8f      	ldr	r3, [pc, #572]	@ (80111fc <UART_SetConfig+0x2cc>)
 8010fc0:	429a      	cmp	r2, r3
 8010fc2:	d005      	beq.n	8010fd0 <UART_SetConfig+0xa0>
 8010fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010fc8:	681a      	ldr	r2, [r3, #0]
 8010fca:	4b8d      	ldr	r3, [pc, #564]	@ (8011200 <UART_SetConfig+0x2d0>)
 8010fcc:	429a      	cmp	r2, r3
 8010fce:	d104      	bne.n	8010fda <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010fd0:	f7fe fba0 	bl	800f714 <HAL_RCC_GetPCLK2Freq>
 8010fd4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8010fd8:	e003      	b.n	8010fe2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8010fda:	f7fe fb87 	bl	800f6ec <HAL_RCC_GetPCLK1Freq>
 8010fde:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010fe6:	69db      	ldr	r3, [r3, #28]
 8010fe8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010fec:	f040 810c 	bne.w	8011208 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010ff0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010ff4:	2200      	movs	r2, #0
 8010ff6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8010ffa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8010ffe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8011002:	4622      	mov	r2, r4
 8011004:	462b      	mov	r3, r5
 8011006:	1891      	adds	r1, r2, r2
 8011008:	65b9      	str	r1, [r7, #88]	@ 0x58
 801100a:	415b      	adcs	r3, r3
 801100c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801100e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8011012:	4621      	mov	r1, r4
 8011014:	eb12 0801 	adds.w	r8, r2, r1
 8011018:	4629      	mov	r1, r5
 801101a:	eb43 0901 	adc.w	r9, r3, r1
 801101e:	f04f 0200 	mov.w	r2, #0
 8011022:	f04f 0300 	mov.w	r3, #0
 8011026:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801102a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801102e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8011032:	4690      	mov	r8, r2
 8011034:	4699      	mov	r9, r3
 8011036:	4623      	mov	r3, r4
 8011038:	eb18 0303 	adds.w	r3, r8, r3
 801103c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8011040:	462b      	mov	r3, r5
 8011042:	eb49 0303 	adc.w	r3, r9, r3
 8011046:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801104a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801104e:	685b      	ldr	r3, [r3, #4]
 8011050:	2200      	movs	r2, #0
 8011052:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8011056:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 801105a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801105e:	460b      	mov	r3, r1
 8011060:	18db      	adds	r3, r3, r3
 8011062:	653b      	str	r3, [r7, #80]	@ 0x50
 8011064:	4613      	mov	r3, r2
 8011066:	eb42 0303 	adc.w	r3, r2, r3
 801106a:	657b      	str	r3, [r7, #84]	@ 0x54
 801106c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8011070:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8011074:	f7ef fda0 	bl	8000bb8 <__aeabi_uldivmod>
 8011078:	4602      	mov	r2, r0
 801107a:	460b      	mov	r3, r1
 801107c:	4b61      	ldr	r3, [pc, #388]	@ (8011204 <UART_SetConfig+0x2d4>)
 801107e:	fba3 2302 	umull	r2, r3, r3, r2
 8011082:	095b      	lsrs	r3, r3, #5
 8011084:	011c      	lsls	r4, r3, #4
 8011086:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801108a:	2200      	movs	r2, #0
 801108c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8011090:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8011094:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8011098:	4642      	mov	r2, r8
 801109a:	464b      	mov	r3, r9
 801109c:	1891      	adds	r1, r2, r2
 801109e:	64b9      	str	r1, [r7, #72]	@ 0x48
 80110a0:	415b      	adcs	r3, r3
 80110a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80110a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80110a8:	4641      	mov	r1, r8
 80110aa:	eb12 0a01 	adds.w	sl, r2, r1
 80110ae:	4649      	mov	r1, r9
 80110b0:	eb43 0b01 	adc.w	fp, r3, r1
 80110b4:	f04f 0200 	mov.w	r2, #0
 80110b8:	f04f 0300 	mov.w	r3, #0
 80110bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80110c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80110c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80110c8:	4692      	mov	sl, r2
 80110ca:	469b      	mov	fp, r3
 80110cc:	4643      	mov	r3, r8
 80110ce:	eb1a 0303 	adds.w	r3, sl, r3
 80110d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80110d6:	464b      	mov	r3, r9
 80110d8:	eb4b 0303 	adc.w	r3, fp, r3
 80110dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80110e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80110e4:	685b      	ldr	r3, [r3, #4]
 80110e6:	2200      	movs	r2, #0
 80110e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80110ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80110f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80110f4:	460b      	mov	r3, r1
 80110f6:	18db      	adds	r3, r3, r3
 80110f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80110fa:	4613      	mov	r3, r2
 80110fc:	eb42 0303 	adc.w	r3, r2, r3
 8011100:	647b      	str	r3, [r7, #68]	@ 0x44
 8011102:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8011106:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 801110a:	f7ef fd55 	bl	8000bb8 <__aeabi_uldivmod>
 801110e:	4602      	mov	r2, r0
 8011110:	460b      	mov	r3, r1
 8011112:	4611      	mov	r1, r2
 8011114:	4b3b      	ldr	r3, [pc, #236]	@ (8011204 <UART_SetConfig+0x2d4>)
 8011116:	fba3 2301 	umull	r2, r3, r3, r1
 801111a:	095b      	lsrs	r3, r3, #5
 801111c:	2264      	movs	r2, #100	@ 0x64
 801111e:	fb02 f303 	mul.w	r3, r2, r3
 8011122:	1acb      	subs	r3, r1, r3
 8011124:	00db      	lsls	r3, r3, #3
 8011126:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 801112a:	4b36      	ldr	r3, [pc, #216]	@ (8011204 <UART_SetConfig+0x2d4>)
 801112c:	fba3 2302 	umull	r2, r3, r3, r2
 8011130:	095b      	lsrs	r3, r3, #5
 8011132:	005b      	lsls	r3, r3, #1
 8011134:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8011138:	441c      	add	r4, r3
 801113a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801113e:	2200      	movs	r2, #0
 8011140:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8011144:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8011148:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 801114c:	4642      	mov	r2, r8
 801114e:	464b      	mov	r3, r9
 8011150:	1891      	adds	r1, r2, r2
 8011152:	63b9      	str	r1, [r7, #56]	@ 0x38
 8011154:	415b      	adcs	r3, r3
 8011156:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011158:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801115c:	4641      	mov	r1, r8
 801115e:	1851      	adds	r1, r2, r1
 8011160:	6339      	str	r1, [r7, #48]	@ 0x30
 8011162:	4649      	mov	r1, r9
 8011164:	414b      	adcs	r3, r1
 8011166:	637b      	str	r3, [r7, #52]	@ 0x34
 8011168:	f04f 0200 	mov.w	r2, #0
 801116c:	f04f 0300 	mov.w	r3, #0
 8011170:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8011174:	4659      	mov	r1, fp
 8011176:	00cb      	lsls	r3, r1, #3
 8011178:	4651      	mov	r1, sl
 801117a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801117e:	4651      	mov	r1, sl
 8011180:	00ca      	lsls	r2, r1, #3
 8011182:	4610      	mov	r0, r2
 8011184:	4619      	mov	r1, r3
 8011186:	4603      	mov	r3, r0
 8011188:	4642      	mov	r2, r8
 801118a:	189b      	adds	r3, r3, r2
 801118c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011190:	464b      	mov	r3, r9
 8011192:	460a      	mov	r2, r1
 8011194:	eb42 0303 	adc.w	r3, r2, r3
 8011198:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801119c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80111a0:	685b      	ldr	r3, [r3, #4]
 80111a2:	2200      	movs	r2, #0
 80111a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80111a8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80111ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80111b0:	460b      	mov	r3, r1
 80111b2:	18db      	adds	r3, r3, r3
 80111b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80111b6:	4613      	mov	r3, r2
 80111b8:	eb42 0303 	adc.w	r3, r2, r3
 80111bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80111be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80111c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80111c6:	f7ef fcf7 	bl	8000bb8 <__aeabi_uldivmod>
 80111ca:	4602      	mov	r2, r0
 80111cc:	460b      	mov	r3, r1
 80111ce:	4b0d      	ldr	r3, [pc, #52]	@ (8011204 <UART_SetConfig+0x2d4>)
 80111d0:	fba3 1302 	umull	r1, r3, r3, r2
 80111d4:	095b      	lsrs	r3, r3, #5
 80111d6:	2164      	movs	r1, #100	@ 0x64
 80111d8:	fb01 f303 	mul.w	r3, r1, r3
 80111dc:	1ad3      	subs	r3, r2, r3
 80111de:	00db      	lsls	r3, r3, #3
 80111e0:	3332      	adds	r3, #50	@ 0x32
 80111e2:	4a08      	ldr	r2, [pc, #32]	@ (8011204 <UART_SetConfig+0x2d4>)
 80111e4:	fba2 2303 	umull	r2, r3, r2, r3
 80111e8:	095b      	lsrs	r3, r3, #5
 80111ea:	f003 0207 	and.w	r2, r3, #7
 80111ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	4422      	add	r2, r4
 80111f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80111f8:	e106      	b.n	8011408 <UART_SetConfig+0x4d8>
 80111fa:	bf00      	nop
 80111fc:	40011000 	.word	0x40011000
 8011200:	40011400 	.word	0x40011400
 8011204:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011208:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801120c:	2200      	movs	r2, #0
 801120e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011212:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011216:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 801121a:	4642      	mov	r2, r8
 801121c:	464b      	mov	r3, r9
 801121e:	1891      	adds	r1, r2, r2
 8011220:	6239      	str	r1, [r7, #32]
 8011222:	415b      	adcs	r3, r3
 8011224:	627b      	str	r3, [r7, #36]	@ 0x24
 8011226:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801122a:	4641      	mov	r1, r8
 801122c:	1854      	adds	r4, r2, r1
 801122e:	4649      	mov	r1, r9
 8011230:	eb43 0501 	adc.w	r5, r3, r1
 8011234:	f04f 0200 	mov.w	r2, #0
 8011238:	f04f 0300 	mov.w	r3, #0
 801123c:	00eb      	lsls	r3, r5, #3
 801123e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8011242:	00e2      	lsls	r2, r4, #3
 8011244:	4614      	mov	r4, r2
 8011246:	461d      	mov	r5, r3
 8011248:	4643      	mov	r3, r8
 801124a:	18e3      	adds	r3, r4, r3
 801124c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011250:	464b      	mov	r3, r9
 8011252:	eb45 0303 	adc.w	r3, r5, r3
 8011256:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801125a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801125e:	685b      	ldr	r3, [r3, #4]
 8011260:	2200      	movs	r2, #0
 8011262:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011266:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 801126a:	f04f 0200 	mov.w	r2, #0
 801126e:	f04f 0300 	mov.w	r3, #0
 8011272:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8011276:	4629      	mov	r1, r5
 8011278:	008b      	lsls	r3, r1, #2
 801127a:	4621      	mov	r1, r4
 801127c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011280:	4621      	mov	r1, r4
 8011282:	008a      	lsls	r2, r1, #2
 8011284:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8011288:	f7ef fc96 	bl	8000bb8 <__aeabi_uldivmod>
 801128c:	4602      	mov	r2, r0
 801128e:	460b      	mov	r3, r1
 8011290:	4b60      	ldr	r3, [pc, #384]	@ (8011414 <UART_SetConfig+0x4e4>)
 8011292:	fba3 2302 	umull	r2, r3, r3, r2
 8011296:	095b      	lsrs	r3, r3, #5
 8011298:	011c      	lsls	r4, r3, #4
 801129a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801129e:	2200      	movs	r2, #0
 80112a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80112a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80112a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80112ac:	4642      	mov	r2, r8
 80112ae:	464b      	mov	r3, r9
 80112b0:	1891      	adds	r1, r2, r2
 80112b2:	61b9      	str	r1, [r7, #24]
 80112b4:	415b      	adcs	r3, r3
 80112b6:	61fb      	str	r3, [r7, #28]
 80112b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80112bc:	4641      	mov	r1, r8
 80112be:	1851      	adds	r1, r2, r1
 80112c0:	6139      	str	r1, [r7, #16]
 80112c2:	4649      	mov	r1, r9
 80112c4:	414b      	adcs	r3, r1
 80112c6:	617b      	str	r3, [r7, #20]
 80112c8:	f04f 0200 	mov.w	r2, #0
 80112cc:	f04f 0300 	mov.w	r3, #0
 80112d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80112d4:	4659      	mov	r1, fp
 80112d6:	00cb      	lsls	r3, r1, #3
 80112d8:	4651      	mov	r1, sl
 80112da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80112de:	4651      	mov	r1, sl
 80112e0:	00ca      	lsls	r2, r1, #3
 80112e2:	4610      	mov	r0, r2
 80112e4:	4619      	mov	r1, r3
 80112e6:	4603      	mov	r3, r0
 80112e8:	4642      	mov	r2, r8
 80112ea:	189b      	adds	r3, r3, r2
 80112ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80112f0:	464b      	mov	r3, r9
 80112f2:	460a      	mov	r2, r1
 80112f4:	eb42 0303 	adc.w	r3, r2, r3
 80112f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80112fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011300:	685b      	ldr	r3, [r3, #4]
 8011302:	2200      	movs	r2, #0
 8011304:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011306:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8011308:	f04f 0200 	mov.w	r2, #0
 801130c:	f04f 0300 	mov.w	r3, #0
 8011310:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8011314:	4649      	mov	r1, r9
 8011316:	008b      	lsls	r3, r1, #2
 8011318:	4641      	mov	r1, r8
 801131a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801131e:	4641      	mov	r1, r8
 8011320:	008a      	lsls	r2, r1, #2
 8011322:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8011326:	f7ef fc47 	bl	8000bb8 <__aeabi_uldivmod>
 801132a:	4602      	mov	r2, r0
 801132c:	460b      	mov	r3, r1
 801132e:	4611      	mov	r1, r2
 8011330:	4b38      	ldr	r3, [pc, #224]	@ (8011414 <UART_SetConfig+0x4e4>)
 8011332:	fba3 2301 	umull	r2, r3, r3, r1
 8011336:	095b      	lsrs	r3, r3, #5
 8011338:	2264      	movs	r2, #100	@ 0x64
 801133a:	fb02 f303 	mul.w	r3, r2, r3
 801133e:	1acb      	subs	r3, r1, r3
 8011340:	011b      	lsls	r3, r3, #4
 8011342:	3332      	adds	r3, #50	@ 0x32
 8011344:	4a33      	ldr	r2, [pc, #204]	@ (8011414 <UART_SetConfig+0x4e4>)
 8011346:	fba2 2303 	umull	r2, r3, r2, r3
 801134a:	095b      	lsrs	r3, r3, #5
 801134c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011350:	441c      	add	r4, r3
 8011352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011356:	2200      	movs	r2, #0
 8011358:	673b      	str	r3, [r7, #112]	@ 0x70
 801135a:	677a      	str	r2, [r7, #116]	@ 0x74
 801135c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8011360:	4642      	mov	r2, r8
 8011362:	464b      	mov	r3, r9
 8011364:	1891      	adds	r1, r2, r2
 8011366:	60b9      	str	r1, [r7, #8]
 8011368:	415b      	adcs	r3, r3
 801136a:	60fb      	str	r3, [r7, #12]
 801136c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011370:	4641      	mov	r1, r8
 8011372:	1851      	adds	r1, r2, r1
 8011374:	6039      	str	r1, [r7, #0]
 8011376:	4649      	mov	r1, r9
 8011378:	414b      	adcs	r3, r1
 801137a:	607b      	str	r3, [r7, #4]
 801137c:	f04f 0200 	mov.w	r2, #0
 8011380:	f04f 0300 	mov.w	r3, #0
 8011384:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8011388:	4659      	mov	r1, fp
 801138a:	00cb      	lsls	r3, r1, #3
 801138c:	4651      	mov	r1, sl
 801138e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011392:	4651      	mov	r1, sl
 8011394:	00ca      	lsls	r2, r1, #3
 8011396:	4610      	mov	r0, r2
 8011398:	4619      	mov	r1, r3
 801139a:	4603      	mov	r3, r0
 801139c:	4642      	mov	r2, r8
 801139e:	189b      	adds	r3, r3, r2
 80113a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80113a2:	464b      	mov	r3, r9
 80113a4:	460a      	mov	r2, r1
 80113a6:	eb42 0303 	adc.w	r3, r2, r3
 80113aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80113ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80113b0:	685b      	ldr	r3, [r3, #4]
 80113b2:	2200      	movs	r2, #0
 80113b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80113b6:	667a      	str	r2, [r7, #100]	@ 0x64
 80113b8:	f04f 0200 	mov.w	r2, #0
 80113bc:	f04f 0300 	mov.w	r3, #0
 80113c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80113c4:	4649      	mov	r1, r9
 80113c6:	008b      	lsls	r3, r1, #2
 80113c8:	4641      	mov	r1, r8
 80113ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80113ce:	4641      	mov	r1, r8
 80113d0:	008a      	lsls	r2, r1, #2
 80113d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80113d6:	f7ef fbef 	bl	8000bb8 <__aeabi_uldivmod>
 80113da:	4602      	mov	r2, r0
 80113dc:	460b      	mov	r3, r1
 80113de:	4b0d      	ldr	r3, [pc, #52]	@ (8011414 <UART_SetConfig+0x4e4>)
 80113e0:	fba3 1302 	umull	r1, r3, r3, r2
 80113e4:	095b      	lsrs	r3, r3, #5
 80113e6:	2164      	movs	r1, #100	@ 0x64
 80113e8:	fb01 f303 	mul.w	r3, r1, r3
 80113ec:	1ad3      	subs	r3, r2, r3
 80113ee:	011b      	lsls	r3, r3, #4
 80113f0:	3332      	adds	r3, #50	@ 0x32
 80113f2:	4a08      	ldr	r2, [pc, #32]	@ (8011414 <UART_SetConfig+0x4e4>)
 80113f4:	fba2 2303 	umull	r2, r3, r2, r3
 80113f8:	095b      	lsrs	r3, r3, #5
 80113fa:	f003 020f 	and.w	r2, r3, #15
 80113fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	4422      	add	r2, r4
 8011406:	609a      	str	r2, [r3, #8]
}
 8011408:	bf00      	nop
 801140a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 801140e:	46bd      	mov	sp, r7
 8011410:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011414:	51eb851f 	.word	0x51eb851f

08011418 <_ZdlPvj>:
 8011418:	f000 b811 	b.w	801143e <_ZdlPv>

0801141c <_Znwj>:
 801141c:	2801      	cmp	r0, #1
 801141e:	bf38      	it	cc
 8011420:	2001      	movcc	r0, #1
 8011422:	b510      	push	{r4, lr}
 8011424:	4604      	mov	r4, r0
 8011426:	4620      	mov	r0, r4
 8011428:	f000 f81c 	bl	8011464 <malloc>
 801142c:	b100      	cbz	r0, 8011430 <_Znwj+0x14>
 801142e:	bd10      	pop	{r4, pc}
 8011430:	f000 f808 	bl	8011444 <_ZSt15get_new_handlerv>
 8011434:	b908      	cbnz	r0, 801143a <_Znwj+0x1e>
 8011436:	f000 f80d 	bl	8011454 <abort>
 801143a:	4780      	blx	r0
 801143c:	e7f3      	b.n	8011426 <_Znwj+0xa>

0801143e <_ZdlPv>:
 801143e:	f000 b819 	b.w	8011474 <free>
	...

08011444 <_ZSt15get_new_handlerv>:
 8011444:	4b02      	ldr	r3, [pc, #8]	@ (8011450 <_ZSt15get_new_handlerv+0xc>)
 8011446:	6818      	ldr	r0, [r3, #0]
 8011448:	f3bf 8f5b 	dmb	ish
 801144c:	4770      	bx	lr
 801144e:	bf00      	nop
 8011450:	200005bc 	.word	0x200005bc

08011454 <abort>:
 8011454:	b508      	push	{r3, lr}
 8011456:	2006      	movs	r0, #6
 8011458:	f000 fe70 	bl	801213c <raise>
 801145c:	2001      	movs	r0, #1
 801145e:	f7fb fd5d 	bl	800cf1c <_exit>
	...

08011464 <malloc>:
 8011464:	4b02      	ldr	r3, [pc, #8]	@ (8011470 <malloc+0xc>)
 8011466:	4601      	mov	r1, r0
 8011468:	6818      	ldr	r0, [r3, #0]
 801146a:	f000 b82d 	b.w	80114c8 <_malloc_r>
 801146e:	bf00      	nop
 8011470:	2000001c 	.word	0x2000001c

08011474 <free>:
 8011474:	4b02      	ldr	r3, [pc, #8]	@ (8011480 <free+0xc>)
 8011476:	4601      	mov	r1, r0
 8011478:	6818      	ldr	r0, [r3, #0]
 801147a:	f001 bd59 	b.w	8012f30 <_free_r>
 801147e:	bf00      	nop
 8011480:	2000001c 	.word	0x2000001c

08011484 <sbrk_aligned>:
 8011484:	b570      	push	{r4, r5, r6, lr}
 8011486:	4e0f      	ldr	r6, [pc, #60]	@ (80114c4 <sbrk_aligned+0x40>)
 8011488:	460c      	mov	r4, r1
 801148a:	6831      	ldr	r1, [r6, #0]
 801148c:	4605      	mov	r5, r0
 801148e:	b911      	cbnz	r1, 8011496 <sbrk_aligned+0x12>
 8011490:	f000 fea8 	bl	80121e4 <_sbrk_r>
 8011494:	6030      	str	r0, [r6, #0]
 8011496:	4621      	mov	r1, r4
 8011498:	4628      	mov	r0, r5
 801149a:	f000 fea3 	bl	80121e4 <_sbrk_r>
 801149e:	1c43      	adds	r3, r0, #1
 80114a0:	d103      	bne.n	80114aa <sbrk_aligned+0x26>
 80114a2:	f04f 34ff 	mov.w	r4, #4294967295
 80114a6:	4620      	mov	r0, r4
 80114a8:	bd70      	pop	{r4, r5, r6, pc}
 80114aa:	1cc4      	adds	r4, r0, #3
 80114ac:	f024 0403 	bic.w	r4, r4, #3
 80114b0:	42a0      	cmp	r0, r4
 80114b2:	d0f8      	beq.n	80114a6 <sbrk_aligned+0x22>
 80114b4:	1a21      	subs	r1, r4, r0
 80114b6:	4628      	mov	r0, r5
 80114b8:	f000 fe94 	bl	80121e4 <_sbrk_r>
 80114bc:	3001      	adds	r0, #1
 80114be:	d1f2      	bne.n	80114a6 <sbrk_aligned+0x22>
 80114c0:	e7ef      	b.n	80114a2 <sbrk_aligned+0x1e>
 80114c2:	bf00      	nop
 80114c4:	200005c0 	.word	0x200005c0

080114c8 <_malloc_r>:
 80114c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114cc:	1ccd      	adds	r5, r1, #3
 80114ce:	f025 0503 	bic.w	r5, r5, #3
 80114d2:	3508      	adds	r5, #8
 80114d4:	2d0c      	cmp	r5, #12
 80114d6:	bf38      	it	cc
 80114d8:	250c      	movcc	r5, #12
 80114da:	2d00      	cmp	r5, #0
 80114dc:	4606      	mov	r6, r0
 80114de:	db01      	blt.n	80114e4 <_malloc_r+0x1c>
 80114e0:	42a9      	cmp	r1, r5
 80114e2:	d904      	bls.n	80114ee <_malloc_r+0x26>
 80114e4:	230c      	movs	r3, #12
 80114e6:	6033      	str	r3, [r6, #0]
 80114e8:	2000      	movs	r0, #0
 80114ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80114ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80115c4 <_malloc_r+0xfc>
 80114f2:	f000 f869 	bl	80115c8 <__malloc_lock>
 80114f6:	f8d8 3000 	ldr.w	r3, [r8]
 80114fa:	461c      	mov	r4, r3
 80114fc:	bb44      	cbnz	r4, 8011550 <_malloc_r+0x88>
 80114fe:	4629      	mov	r1, r5
 8011500:	4630      	mov	r0, r6
 8011502:	f7ff ffbf 	bl	8011484 <sbrk_aligned>
 8011506:	1c43      	adds	r3, r0, #1
 8011508:	4604      	mov	r4, r0
 801150a:	d158      	bne.n	80115be <_malloc_r+0xf6>
 801150c:	f8d8 4000 	ldr.w	r4, [r8]
 8011510:	4627      	mov	r7, r4
 8011512:	2f00      	cmp	r7, #0
 8011514:	d143      	bne.n	801159e <_malloc_r+0xd6>
 8011516:	2c00      	cmp	r4, #0
 8011518:	d04b      	beq.n	80115b2 <_malloc_r+0xea>
 801151a:	6823      	ldr	r3, [r4, #0]
 801151c:	4639      	mov	r1, r7
 801151e:	4630      	mov	r0, r6
 8011520:	eb04 0903 	add.w	r9, r4, r3
 8011524:	f000 fe5e 	bl	80121e4 <_sbrk_r>
 8011528:	4581      	cmp	r9, r0
 801152a:	d142      	bne.n	80115b2 <_malloc_r+0xea>
 801152c:	6821      	ldr	r1, [r4, #0]
 801152e:	1a6d      	subs	r5, r5, r1
 8011530:	4629      	mov	r1, r5
 8011532:	4630      	mov	r0, r6
 8011534:	f7ff ffa6 	bl	8011484 <sbrk_aligned>
 8011538:	3001      	adds	r0, #1
 801153a:	d03a      	beq.n	80115b2 <_malloc_r+0xea>
 801153c:	6823      	ldr	r3, [r4, #0]
 801153e:	442b      	add	r3, r5
 8011540:	6023      	str	r3, [r4, #0]
 8011542:	f8d8 3000 	ldr.w	r3, [r8]
 8011546:	685a      	ldr	r2, [r3, #4]
 8011548:	bb62      	cbnz	r2, 80115a4 <_malloc_r+0xdc>
 801154a:	f8c8 7000 	str.w	r7, [r8]
 801154e:	e00f      	b.n	8011570 <_malloc_r+0xa8>
 8011550:	6822      	ldr	r2, [r4, #0]
 8011552:	1b52      	subs	r2, r2, r5
 8011554:	d420      	bmi.n	8011598 <_malloc_r+0xd0>
 8011556:	2a0b      	cmp	r2, #11
 8011558:	d917      	bls.n	801158a <_malloc_r+0xc2>
 801155a:	1961      	adds	r1, r4, r5
 801155c:	42a3      	cmp	r3, r4
 801155e:	6025      	str	r5, [r4, #0]
 8011560:	bf18      	it	ne
 8011562:	6059      	strne	r1, [r3, #4]
 8011564:	6863      	ldr	r3, [r4, #4]
 8011566:	bf08      	it	eq
 8011568:	f8c8 1000 	streq.w	r1, [r8]
 801156c:	5162      	str	r2, [r4, r5]
 801156e:	604b      	str	r3, [r1, #4]
 8011570:	4630      	mov	r0, r6
 8011572:	f000 f82f 	bl	80115d4 <__malloc_unlock>
 8011576:	f104 000b 	add.w	r0, r4, #11
 801157a:	1d23      	adds	r3, r4, #4
 801157c:	f020 0007 	bic.w	r0, r0, #7
 8011580:	1ac2      	subs	r2, r0, r3
 8011582:	bf1c      	itt	ne
 8011584:	1a1b      	subne	r3, r3, r0
 8011586:	50a3      	strne	r3, [r4, r2]
 8011588:	e7af      	b.n	80114ea <_malloc_r+0x22>
 801158a:	6862      	ldr	r2, [r4, #4]
 801158c:	42a3      	cmp	r3, r4
 801158e:	bf0c      	ite	eq
 8011590:	f8c8 2000 	streq.w	r2, [r8]
 8011594:	605a      	strne	r2, [r3, #4]
 8011596:	e7eb      	b.n	8011570 <_malloc_r+0xa8>
 8011598:	4623      	mov	r3, r4
 801159a:	6864      	ldr	r4, [r4, #4]
 801159c:	e7ae      	b.n	80114fc <_malloc_r+0x34>
 801159e:	463c      	mov	r4, r7
 80115a0:	687f      	ldr	r7, [r7, #4]
 80115a2:	e7b6      	b.n	8011512 <_malloc_r+0x4a>
 80115a4:	461a      	mov	r2, r3
 80115a6:	685b      	ldr	r3, [r3, #4]
 80115a8:	42a3      	cmp	r3, r4
 80115aa:	d1fb      	bne.n	80115a4 <_malloc_r+0xdc>
 80115ac:	2300      	movs	r3, #0
 80115ae:	6053      	str	r3, [r2, #4]
 80115b0:	e7de      	b.n	8011570 <_malloc_r+0xa8>
 80115b2:	230c      	movs	r3, #12
 80115b4:	6033      	str	r3, [r6, #0]
 80115b6:	4630      	mov	r0, r6
 80115b8:	f000 f80c 	bl	80115d4 <__malloc_unlock>
 80115bc:	e794      	b.n	80114e8 <_malloc_r+0x20>
 80115be:	6005      	str	r5, [r0, #0]
 80115c0:	e7d6      	b.n	8011570 <_malloc_r+0xa8>
 80115c2:	bf00      	nop
 80115c4:	200005c4 	.word	0x200005c4

080115c8 <__malloc_lock>:
 80115c8:	4801      	ldr	r0, [pc, #4]	@ (80115d0 <__malloc_lock+0x8>)
 80115ca:	f000 be58 	b.w	801227e <__retarget_lock_acquire_recursive>
 80115ce:	bf00      	nop
 80115d0:	20000708 	.word	0x20000708

080115d4 <__malloc_unlock>:
 80115d4:	4801      	ldr	r0, [pc, #4]	@ (80115dc <__malloc_unlock+0x8>)
 80115d6:	f000 be53 	b.w	8012280 <__retarget_lock_release_recursive>
 80115da:	bf00      	nop
 80115dc:	20000708 	.word	0x20000708

080115e0 <__cvt>:
 80115e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80115e4:	ec57 6b10 	vmov	r6, r7, d0
 80115e8:	2f00      	cmp	r7, #0
 80115ea:	460c      	mov	r4, r1
 80115ec:	4619      	mov	r1, r3
 80115ee:	463b      	mov	r3, r7
 80115f0:	bfbb      	ittet	lt
 80115f2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80115f6:	461f      	movlt	r7, r3
 80115f8:	2300      	movge	r3, #0
 80115fa:	232d      	movlt	r3, #45	@ 0x2d
 80115fc:	700b      	strb	r3, [r1, #0]
 80115fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011600:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8011604:	4691      	mov	r9, r2
 8011606:	f023 0820 	bic.w	r8, r3, #32
 801160a:	bfbc      	itt	lt
 801160c:	4632      	movlt	r2, r6
 801160e:	4616      	movlt	r6, r2
 8011610:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011614:	d005      	beq.n	8011622 <__cvt+0x42>
 8011616:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801161a:	d100      	bne.n	801161e <__cvt+0x3e>
 801161c:	3401      	adds	r4, #1
 801161e:	2102      	movs	r1, #2
 8011620:	e000      	b.n	8011624 <__cvt+0x44>
 8011622:	2103      	movs	r1, #3
 8011624:	ab03      	add	r3, sp, #12
 8011626:	9301      	str	r3, [sp, #4]
 8011628:	ab02      	add	r3, sp, #8
 801162a:	9300      	str	r3, [sp, #0]
 801162c:	ec47 6b10 	vmov	d0, r6, r7
 8011630:	4653      	mov	r3, sl
 8011632:	4622      	mov	r2, r4
 8011634:	f000 feb8 	bl	80123a8 <_dtoa_r>
 8011638:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801163c:	4605      	mov	r5, r0
 801163e:	d119      	bne.n	8011674 <__cvt+0x94>
 8011640:	f019 0f01 	tst.w	r9, #1
 8011644:	d00e      	beq.n	8011664 <__cvt+0x84>
 8011646:	eb00 0904 	add.w	r9, r0, r4
 801164a:	2200      	movs	r2, #0
 801164c:	2300      	movs	r3, #0
 801164e:	4630      	mov	r0, r6
 8011650:	4639      	mov	r1, r7
 8011652:	f7ef fa41 	bl	8000ad8 <__aeabi_dcmpeq>
 8011656:	b108      	cbz	r0, 801165c <__cvt+0x7c>
 8011658:	f8cd 900c 	str.w	r9, [sp, #12]
 801165c:	2230      	movs	r2, #48	@ 0x30
 801165e:	9b03      	ldr	r3, [sp, #12]
 8011660:	454b      	cmp	r3, r9
 8011662:	d31e      	bcc.n	80116a2 <__cvt+0xc2>
 8011664:	9b03      	ldr	r3, [sp, #12]
 8011666:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011668:	1b5b      	subs	r3, r3, r5
 801166a:	4628      	mov	r0, r5
 801166c:	6013      	str	r3, [r2, #0]
 801166e:	b004      	add	sp, #16
 8011670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011674:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011678:	eb00 0904 	add.w	r9, r0, r4
 801167c:	d1e5      	bne.n	801164a <__cvt+0x6a>
 801167e:	7803      	ldrb	r3, [r0, #0]
 8011680:	2b30      	cmp	r3, #48	@ 0x30
 8011682:	d10a      	bne.n	801169a <__cvt+0xba>
 8011684:	2200      	movs	r2, #0
 8011686:	2300      	movs	r3, #0
 8011688:	4630      	mov	r0, r6
 801168a:	4639      	mov	r1, r7
 801168c:	f7ef fa24 	bl	8000ad8 <__aeabi_dcmpeq>
 8011690:	b918      	cbnz	r0, 801169a <__cvt+0xba>
 8011692:	f1c4 0401 	rsb	r4, r4, #1
 8011696:	f8ca 4000 	str.w	r4, [sl]
 801169a:	f8da 3000 	ldr.w	r3, [sl]
 801169e:	4499      	add	r9, r3
 80116a0:	e7d3      	b.n	801164a <__cvt+0x6a>
 80116a2:	1c59      	adds	r1, r3, #1
 80116a4:	9103      	str	r1, [sp, #12]
 80116a6:	701a      	strb	r2, [r3, #0]
 80116a8:	e7d9      	b.n	801165e <__cvt+0x7e>

080116aa <__exponent>:
 80116aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80116ac:	2900      	cmp	r1, #0
 80116ae:	bfba      	itte	lt
 80116b0:	4249      	neglt	r1, r1
 80116b2:	232d      	movlt	r3, #45	@ 0x2d
 80116b4:	232b      	movge	r3, #43	@ 0x2b
 80116b6:	2909      	cmp	r1, #9
 80116b8:	7002      	strb	r2, [r0, #0]
 80116ba:	7043      	strb	r3, [r0, #1]
 80116bc:	dd29      	ble.n	8011712 <__exponent+0x68>
 80116be:	f10d 0307 	add.w	r3, sp, #7
 80116c2:	461d      	mov	r5, r3
 80116c4:	270a      	movs	r7, #10
 80116c6:	461a      	mov	r2, r3
 80116c8:	fbb1 f6f7 	udiv	r6, r1, r7
 80116cc:	fb07 1416 	mls	r4, r7, r6, r1
 80116d0:	3430      	adds	r4, #48	@ 0x30
 80116d2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80116d6:	460c      	mov	r4, r1
 80116d8:	2c63      	cmp	r4, #99	@ 0x63
 80116da:	f103 33ff 	add.w	r3, r3, #4294967295
 80116de:	4631      	mov	r1, r6
 80116e0:	dcf1      	bgt.n	80116c6 <__exponent+0x1c>
 80116e2:	3130      	adds	r1, #48	@ 0x30
 80116e4:	1e94      	subs	r4, r2, #2
 80116e6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80116ea:	1c41      	adds	r1, r0, #1
 80116ec:	4623      	mov	r3, r4
 80116ee:	42ab      	cmp	r3, r5
 80116f0:	d30a      	bcc.n	8011708 <__exponent+0x5e>
 80116f2:	f10d 0309 	add.w	r3, sp, #9
 80116f6:	1a9b      	subs	r3, r3, r2
 80116f8:	42ac      	cmp	r4, r5
 80116fa:	bf88      	it	hi
 80116fc:	2300      	movhi	r3, #0
 80116fe:	3302      	adds	r3, #2
 8011700:	4403      	add	r3, r0
 8011702:	1a18      	subs	r0, r3, r0
 8011704:	b003      	add	sp, #12
 8011706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011708:	f813 6b01 	ldrb.w	r6, [r3], #1
 801170c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011710:	e7ed      	b.n	80116ee <__exponent+0x44>
 8011712:	2330      	movs	r3, #48	@ 0x30
 8011714:	3130      	adds	r1, #48	@ 0x30
 8011716:	7083      	strb	r3, [r0, #2]
 8011718:	70c1      	strb	r1, [r0, #3]
 801171a:	1d03      	adds	r3, r0, #4
 801171c:	e7f1      	b.n	8011702 <__exponent+0x58>
	...

08011720 <_printf_float>:
 8011720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011724:	b08d      	sub	sp, #52	@ 0x34
 8011726:	460c      	mov	r4, r1
 8011728:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801172c:	4616      	mov	r6, r2
 801172e:	461f      	mov	r7, r3
 8011730:	4605      	mov	r5, r0
 8011732:	f000 fd0b 	bl	801214c <_localeconv_r>
 8011736:	6803      	ldr	r3, [r0, #0]
 8011738:	9304      	str	r3, [sp, #16]
 801173a:	4618      	mov	r0, r3
 801173c:	f7ee fda0 	bl	8000280 <strlen>
 8011740:	2300      	movs	r3, #0
 8011742:	930a      	str	r3, [sp, #40]	@ 0x28
 8011744:	f8d8 3000 	ldr.w	r3, [r8]
 8011748:	9005      	str	r0, [sp, #20]
 801174a:	3307      	adds	r3, #7
 801174c:	f023 0307 	bic.w	r3, r3, #7
 8011750:	f103 0208 	add.w	r2, r3, #8
 8011754:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011758:	f8d4 b000 	ldr.w	fp, [r4]
 801175c:	f8c8 2000 	str.w	r2, [r8]
 8011760:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011764:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8011768:	9307      	str	r3, [sp, #28]
 801176a:	f8cd 8018 	str.w	r8, [sp, #24]
 801176e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8011772:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011776:	4b9c      	ldr	r3, [pc, #624]	@ (80119e8 <_printf_float+0x2c8>)
 8011778:	f04f 32ff 	mov.w	r2, #4294967295
 801177c:	f7ef f9de 	bl	8000b3c <__aeabi_dcmpun>
 8011780:	bb70      	cbnz	r0, 80117e0 <_printf_float+0xc0>
 8011782:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011786:	4b98      	ldr	r3, [pc, #608]	@ (80119e8 <_printf_float+0x2c8>)
 8011788:	f04f 32ff 	mov.w	r2, #4294967295
 801178c:	f7ef f9b8 	bl	8000b00 <__aeabi_dcmple>
 8011790:	bb30      	cbnz	r0, 80117e0 <_printf_float+0xc0>
 8011792:	2200      	movs	r2, #0
 8011794:	2300      	movs	r3, #0
 8011796:	4640      	mov	r0, r8
 8011798:	4649      	mov	r1, r9
 801179a:	f7ef f9a7 	bl	8000aec <__aeabi_dcmplt>
 801179e:	b110      	cbz	r0, 80117a6 <_printf_float+0x86>
 80117a0:	232d      	movs	r3, #45	@ 0x2d
 80117a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80117a6:	4a91      	ldr	r2, [pc, #580]	@ (80119ec <_printf_float+0x2cc>)
 80117a8:	4b91      	ldr	r3, [pc, #580]	@ (80119f0 <_printf_float+0x2d0>)
 80117aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80117ae:	bf94      	ite	ls
 80117b0:	4690      	movls	r8, r2
 80117b2:	4698      	movhi	r8, r3
 80117b4:	2303      	movs	r3, #3
 80117b6:	6123      	str	r3, [r4, #16]
 80117b8:	f02b 0304 	bic.w	r3, fp, #4
 80117bc:	6023      	str	r3, [r4, #0]
 80117be:	f04f 0900 	mov.w	r9, #0
 80117c2:	9700      	str	r7, [sp, #0]
 80117c4:	4633      	mov	r3, r6
 80117c6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80117c8:	4621      	mov	r1, r4
 80117ca:	4628      	mov	r0, r5
 80117cc:	f000 f9d2 	bl	8011b74 <_printf_common>
 80117d0:	3001      	adds	r0, #1
 80117d2:	f040 808d 	bne.w	80118f0 <_printf_float+0x1d0>
 80117d6:	f04f 30ff 	mov.w	r0, #4294967295
 80117da:	b00d      	add	sp, #52	@ 0x34
 80117dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117e0:	4642      	mov	r2, r8
 80117e2:	464b      	mov	r3, r9
 80117e4:	4640      	mov	r0, r8
 80117e6:	4649      	mov	r1, r9
 80117e8:	f7ef f9a8 	bl	8000b3c <__aeabi_dcmpun>
 80117ec:	b140      	cbz	r0, 8011800 <_printf_float+0xe0>
 80117ee:	464b      	mov	r3, r9
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	bfbc      	itt	lt
 80117f4:	232d      	movlt	r3, #45	@ 0x2d
 80117f6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80117fa:	4a7e      	ldr	r2, [pc, #504]	@ (80119f4 <_printf_float+0x2d4>)
 80117fc:	4b7e      	ldr	r3, [pc, #504]	@ (80119f8 <_printf_float+0x2d8>)
 80117fe:	e7d4      	b.n	80117aa <_printf_float+0x8a>
 8011800:	6863      	ldr	r3, [r4, #4]
 8011802:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8011806:	9206      	str	r2, [sp, #24]
 8011808:	1c5a      	adds	r2, r3, #1
 801180a:	d13b      	bne.n	8011884 <_printf_float+0x164>
 801180c:	2306      	movs	r3, #6
 801180e:	6063      	str	r3, [r4, #4]
 8011810:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8011814:	2300      	movs	r3, #0
 8011816:	6022      	str	r2, [r4, #0]
 8011818:	9303      	str	r3, [sp, #12]
 801181a:	ab0a      	add	r3, sp, #40	@ 0x28
 801181c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8011820:	ab09      	add	r3, sp, #36	@ 0x24
 8011822:	9300      	str	r3, [sp, #0]
 8011824:	6861      	ldr	r1, [r4, #4]
 8011826:	ec49 8b10 	vmov	d0, r8, r9
 801182a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801182e:	4628      	mov	r0, r5
 8011830:	f7ff fed6 	bl	80115e0 <__cvt>
 8011834:	9b06      	ldr	r3, [sp, #24]
 8011836:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011838:	2b47      	cmp	r3, #71	@ 0x47
 801183a:	4680      	mov	r8, r0
 801183c:	d129      	bne.n	8011892 <_printf_float+0x172>
 801183e:	1cc8      	adds	r0, r1, #3
 8011840:	db02      	blt.n	8011848 <_printf_float+0x128>
 8011842:	6863      	ldr	r3, [r4, #4]
 8011844:	4299      	cmp	r1, r3
 8011846:	dd41      	ble.n	80118cc <_printf_float+0x1ac>
 8011848:	f1aa 0a02 	sub.w	sl, sl, #2
 801184c:	fa5f fa8a 	uxtb.w	sl, sl
 8011850:	3901      	subs	r1, #1
 8011852:	4652      	mov	r2, sl
 8011854:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011858:	9109      	str	r1, [sp, #36]	@ 0x24
 801185a:	f7ff ff26 	bl	80116aa <__exponent>
 801185e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011860:	1813      	adds	r3, r2, r0
 8011862:	2a01      	cmp	r2, #1
 8011864:	4681      	mov	r9, r0
 8011866:	6123      	str	r3, [r4, #16]
 8011868:	dc02      	bgt.n	8011870 <_printf_float+0x150>
 801186a:	6822      	ldr	r2, [r4, #0]
 801186c:	07d2      	lsls	r2, r2, #31
 801186e:	d501      	bpl.n	8011874 <_printf_float+0x154>
 8011870:	3301      	adds	r3, #1
 8011872:	6123      	str	r3, [r4, #16]
 8011874:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011878:	2b00      	cmp	r3, #0
 801187a:	d0a2      	beq.n	80117c2 <_printf_float+0xa2>
 801187c:	232d      	movs	r3, #45	@ 0x2d
 801187e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011882:	e79e      	b.n	80117c2 <_printf_float+0xa2>
 8011884:	9a06      	ldr	r2, [sp, #24]
 8011886:	2a47      	cmp	r2, #71	@ 0x47
 8011888:	d1c2      	bne.n	8011810 <_printf_float+0xf0>
 801188a:	2b00      	cmp	r3, #0
 801188c:	d1c0      	bne.n	8011810 <_printf_float+0xf0>
 801188e:	2301      	movs	r3, #1
 8011890:	e7bd      	b.n	801180e <_printf_float+0xee>
 8011892:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011896:	d9db      	bls.n	8011850 <_printf_float+0x130>
 8011898:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801189c:	d118      	bne.n	80118d0 <_printf_float+0x1b0>
 801189e:	2900      	cmp	r1, #0
 80118a0:	6863      	ldr	r3, [r4, #4]
 80118a2:	dd0b      	ble.n	80118bc <_printf_float+0x19c>
 80118a4:	6121      	str	r1, [r4, #16]
 80118a6:	b913      	cbnz	r3, 80118ae <_printf_float+0x18e>
 80118a8:	6822      	ldr	r2, [r4, #0]
 80118aa:	07d0      	lsls	r0, r2, #31
 80118ac:	d502      	bpl.n	80118b4 <_printf_float+0x194>
 80118ae:	3301      	adds	r3, #1
 80118b0:	440b      	add	r3, r1
 80118b2:	6123      	str	r3, [r4, #16]
 80118b4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80118b6:	f04f 0900 	mov.w	r9, #0
 80118ba:	e7db      	b.n	8011874 <_printf_float+0x154>
 80118bc:	b913      	cbnz	r3, 80118c4 <_printf_float+0x1a4>
 80118be:	6822      	ldr	r2, [r4, #0]
 80118c0:	07d2      	lsls	r2, r2, #31
 80118c2:	d501      	bpl.n	80118c8 <_printf_float+0x1a8>
 80118c4:	3302      	adds	r3, #2
 80118c6:	e7f4      	b.n	80118b2 <_printf_float+0x192>
 80118c8:	2301      	movs	r3, #1
 80118ca:	e7f2      	b.n	80118b2 <_printf_float+0x192>
 80118cc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80118d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80118d2:	4299      	cmp	r1, r3
 80118d4:	db05      	blt.n	80118e2 <_printf_float+0x1c2>
 80118d6:	6823      	ldr	r3, [r4, #0]
 80118d8:	6121      	str	r1, [r4, #16]
 80118da:	07d8      	lsls	r0, r3, #31
 80118dc:	d5ea      	bpl.n	80118b4 <_printf_float+0x194>
 80118de:	1c4b      	adds	r3, r1, #1
 80118e0:	e7e7      	b.n	80118b2 <_printf_float+0x192>
 80118e2:	2900      	cmp	r1, #0
 80118e4:	bfd4      	ite	le
 80118e6:	f1c1 0202 	rsble	r2, r1, #2
 80118ea:	2201      	movgt	r2, #1
 80118ec:	4413      	add	r3, r2
 80118ee:	e7e0      	b.n	80118b2 <_printf_float+0x192>
 80118f0:	6823      	ldr	r3, [r4, #0]
 80118f2:	055a      	lsls	r2, r3, #21
 80118f4:	d407      	bmi.n	8011906 <_printf_float+0x1e6>
 80118f6:	6923      	ldr	r3, [r4, #16]
 80118f8:	4642      	mov	r2, r8
 80118fa:	4631      	mov	r1, r6
 80118fc:	4628      	mov	r0, r5
 80118fe:	47b8      	blx	r7
 8011900:	3001      	adds	r0, #1
 8011902:	d12b      	bne.n	801195c <_printf_float+0x23c>
 8011904:	e767      	b.n	80117d6 <_printf_float+0xb6>
 8011906:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801190a:	f240 80dd 	bls.w	8011ac8 <_printf_float+0x3a8>
 801190e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011912:	2200      	movs	r2, #0
 8011914:	2300      	movs	r3, #0
 8011916:	f7ef f8df 	bl	8000ad8 <__aeabi_dcmpeq>
 801191a:	2800      	cmp	r0, #0
 801191c:	d033      	beq.n	8011986 <_printf_float+0x266>
 801191e:	4a37      	ldr	r2, [pc, #220]	@ (80119fc <_printf_float+0x2dc>)
 8011920:	2301      	movs	r3, #1
 8011922:	4631      	mov	r1, r6
 8011924:	4628      	mov	r0, r5
 8011926:	47b8      	blx	r7
 8011928:	3001      	adds	r0, #1
 801192a:	f43f af54 	beq.w	80117d6 <_printf_float+0xb6>
 801192e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8011932:	4543      	cmp	r3, r8
 8011934:	db02      	blt.n	801193c <_printf_float+0x21c>
 8011936:	6823      	ldr	r3, [r4, #0]
 8011938:	07d8      	lsls	r0, r3, #31
 801193a:	d50f      	bpl.n	801195c <_printf_float+0x23c>
 801193c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011940:	4631      	mov	r1, r6
 8011942:	4628      	mov	r0, r5
 8011944:	47b8      	blx	r7
 8011946:	3001      	adds	r0, #1
 8011948:	f43f af45 	beq.w	80117d6 <_printf_float+0xb6>
 801194c:	f04f 0900 	mov.w	r9, #0
 8011950:	f108 38ff 	add.w	r8, r8, #4294967295
 8011954:	f104 0a1a 	add.w	sl, r4, #26
 8011958:	45c8      	cmp	r8, r9
 801195a:	dc09      	bgt.n	8011970 <_printf_float+0x250>
 801195c:	6823      	ldr	r3, [r4, #0]
 801195e:	079b      	lsls	r3, r3, #30
 8011960:	f100 8103 	bmi.w	8011b6a <_printf_float+0x44a>
 8011964:	68e0      	ldr	r0, [r4, #12]
 8011966:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011968:	4298      	cmp	r0, r3
 801196a:	bfb8      	it	lt
 801196c:	4618      	movlt	r0, r3
 801196e:	e734      	b.n	80117da <_printf_float+0xba>
 8011970:	2301      	movs	r3, #1
 8011972:	4652      	mov	r2, sl
 8011974:	4631      	mov	r1, r6
 8011976:	4628      	mov	r0, r5
 8011978:	47b8      	blx	r7
 801197a:	3001      	adds	r0, #1
 801197c:	f43f af2b 	beq.w	80117d6 <_printf_float+0xb6>
 8011980:	f109 0901 	add.w	r9, r9, #1
 8011984:	e7e8      	b.n	8011958 <_printf_float+0x238>
 8011986:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011988:	2b00      	cmp	r3, #0
 801198a:	dc39      	bgt.n	8011a00 <_printf_float+0x2e0>
 801198c:	4a1b      	ldr	r2, [pc, #108]	@ (80119fc <_printf_float+0x2dc>)
 801198e:	2301      	movs	r3, #1
 8011990:	4631      	mov	r1, r6
 8011992:	4628      	mov	r0, r5
 8011994:	47b8      	blx	r7
 8011996:	3001      	adds	r0, #1
 8011998:	f43f af1d 	beq.w	80117d6 <_printf_float+0xb6>
 801199c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80119a0:	ea59 0303 	orrs.w	r3, r9, r3
 80119a4:	d102      	bne.n	80119ac <_printf_float+0x28c>
 80119a6:	6823      	ldr	r3, [r4, #0]
 80119a8:	07d9      	lsls	r1, r3, #31
 80119aa:	d5d7      	bpl.n	801195c <_printf_float+0x23c>
 80119ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80119b0:	4631      	mov	r1, r6
 80119b2:	4628      	mov	r0, r5
 80119b4:	47b8      	blx	r7
 80119b6:	3001      	adds	r0, #1
 80119b8:	f43f af0d 	beq.w	80117d6 <_printf_float+0xb6>
 80119bc:	f04f 0a00 	mov.w	sl, #0
 80119c0:	f104 0b1a 	add.w	fp, r4, #26
 80119c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80119c6:	425b      	negs	r3, r3
 80119c8:	4553      	cmp	r3, sl
 80119ca:	dc01      	bgt.n	80119d0 <_printf_float+0x2b0>
 80119cc:	464b      	mov	r3, r9
 80119ce:	e793      	b.n	80118f8 <_printf_float+0x1d8>
 80119d0:	2301      	movs	r3, #1
 80119d2:	465a      	mov	r2, fp
 80119d4:	4631      	mov	r1, r6
 80119d6:	4628      	mov	r0, r5
 80119d8:	47b8      	blx	r7
 80119da:	3001      	adds	r0, #1
 80119dc:	f43f aefb 	beq.w	80117d6 <_printf_float+0xb6>
 80119e0:	f10a 0a01 	add.w	sl, sl, #1
 80119e4:	e7ee      	b.n	80119c4 <_printf_float+0x2a4>
 80119e6:	bf00      	nop
 80119e8:	7fefffff 	.word	0x7fefffff
 80119ec:	08015b54 	.word	0x08015b54
 80119f0:	08015b58 	.word	0x08015b58
 80119f4:	08015b5c 	.word	0x08015b5c
 80119f8:	08015b60 	.word	0x08015b60
 80119fc:	08015b64 	.word	0x08015b64
 8011a00:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011a02:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011a06:	4553      	cmp	r3, sl
 8011a08:	bfa8      	it	ge
 8011a0a:	4653      	movge	r3, sl
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	4699      	mov	r9, r3
 8011a10:	dc36      	bgt.n	8011a80 <_printf_float+0x360>
 8011a12:	f04f 0b00 	mov.w	fp, #0
 8011a16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011a1a:	f104 021a 	add.w	r2, r4, #26
 8011a1e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011a20:	9306      	str	r3, [sp, #24]
 8011a22:	eba3 0309 	sub.w	r3, r3, r9
 8011a26:	455b      	cmp	r3, fp
 8011a28:	dc31      	bgt.n	8011a8e <_printf_float+0x36e>
 8011a2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a2c:	459a      	cmp	sl, r3
 8011a2e:	dc3a      	bgt.n	8011aa6 <_printf_float+0x386>
 8011a30:	6823      	ldr	r3, [r4, #0]
 8011a32:	07da      	lsls	r2, r3, #31
 8011a34:	d437      	bmi.n	8011aa6 <_printf_float+0x386>
 8011a36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a38:	ebaa 0903 	sub.w	r9, sl, r3
 8011a3c:	9b06      	ldr	r3, [sp, #24]
 8011a3e:	ebaa 0303 	sub.w	r3, sl, r3
 8011a42:	4599      	cmp	r9, r3
 8011a44:	bfa8      	it	ge
 8011a46:	4699      	movge	r9, r3
 8011a48:	f1b9 0f00 	cmp.w	r9, #0
 8011a4c:	dc33      	bgt.n	8011ab6 <_printf_float+0x396>
 8011a4e:	f04f 0800 	mov.w	r8, #0
 8011a52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011a56:	f104 0b1a 	add.w	fp, r4, #26
 8011a5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a5c:	ebaa 0303 	sub.w	r3, sl, r3
 8011a60:	eba3 0309 	sub.w	r3, r3, r9
 8011a64:	4543      	cmp	r3, r8
 8011a66:	f77f af79 	ble.w	801195c <_printf_float+0x23c>
 8011a6a:	2301      	movs	r3, #1
 8011a6c:	465a      	mov	r2, fp
 8011a6e:	4631      	mov	r1, r6
 8011a70:	4628      	mov	r0, r5
 8011a72:	47b8      	blx	r7
 8011a74:	3001      	adds	r0, #1
 8011a76:	f43f aeae 	beq.w	80117d6 <_printf_float+0xb6>
 8011a7a:	f108 0801 	add.w	r8, r8, #1
 8011a7e:	e7ec      	b.n	8011a5a <_printf_float+0x33a>
 8011a80:	4642      	mov	r2, r8
 8011a82:	4631      	mov	r1, r6
 8011a84:	4628      	mov	r0, r5
 8011a86:	47b8      	blx	r7
 8011a88:	3001      	adds	r0, #1
 8011a8a:	d1c2      	bne.n	8011a12 <_printf_float+0x2f2>
 8011a8c:	e6a3      	b.n	80117d6 <_printf_float+0xb6>
 8011a8e:	2301      	movs	r3, #1
 8011a90:	4631      	mov	r1, r6
 8011a92:	4628      	mov	r0, r5
 8011a94:	9206      	str	r2, [sp, #24]
 8011a96:	47b8      	blx	r7
 8011a98:	3001      	adds	r0, #1
 8011a9a:	f43f ae9c 	beq.w	80117d6 <_printf_float+0xb6>
 8011a9e:	9a06      	ldr	r2, [sp, #24]
 8011aa0:	f10b 0b01 	add.w	fp, fp, #1
 8011aa4:	e7bb      	b.n	8011a1e <_printf_float+0x2fe>
 8011aa6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011aaa:	4631      	mov	r1, r6
 8011aac:	4628      	mov	r0, r5
 8011aae:	47b8      	blx	r7
 8011ab0:	3001      	adds	r0, #1
 8011ab2:	d1c0      	bne.n	8011a36 <_printf_float+0x316>
 8011ab4:	e68f      	b.n	80117d6 <_printf_float+0xb6>
 8011ab6:	9a06      	ldr	r2, [sp, #24]
 8011ab8:	464b      	mov	r3, r9
 8011aba:	4442      	add	r2, r8
 8011abc:	4631      	mov	r1, r6
 8011abe:	4628      	mov	r0, r5
 8011ac0:	47b8      	blx	r7
 8011ac2:	3001      	adds	r0, #1
 8011ac4:	d1c3      	bne.n	8011a4e <_printf_float+0x32e>
 8011ac6:	e686      	b.n	80117d6 <_printf_float+0xb6>
 8011ac8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011acc:	f1ba 0f01 	cmp.w	sl, #1
 8011ad0:	dc01      	bgt.n	8011ad6 <_printf_float+0x3b6>
 8011ad2:	07db      	lsls	r3, r3, #31
 8011ad4:	d536      	bpl.n	8011b44 <_printf_float+0x424>
 8011ad6:	2301      	movs	r3, #1
 8011ad8:	4642      	mov	r2, r8
 8011ada:	4631      	mov	r1, r6
 8011adc:	4628      	mov	r0, r5
 8011ade:	47b8      	blx	r7
 8011ae0:	3001      	adds	r0, #1
 8011ae2:	f43f ae78 	beq.w	80117d6 <_printf_float+0xb6>
 8011ae6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011aea:	4631      	mov	r1, r6
 8011aec:	4628      	mov	r0, r5
 8011aee:	47b8      	blx	r7
 8011af0:	3001      	adds	r0, #1
 8011af2:	f43f ae70 	beq.w	80117d6 <_printf_float+0xb6>
 8011af6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011afa:	2200      	movs	r2, #0
 8011afc:	2300      	movs	r3, #0
 8011afe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011b02:	f7ee ffe9 	bl	8000ad8 <__aeabi_dcmpeq>
 8011b06:	b9c0      	cbnz	r0, 8011b3a <_printf_float+0x41a>
 8011b08:	4653      	mov	r3, sl
 8011b0a:	f108 0201 	add.w	r2, r8, #1
 8011b0e:	4631      	mov	r1, r6
 8011b10:	4628      	mov	r0, r5
 8011b12:	47b8      	blx	r7
 8011b14:	3001      	adds	r0, #1
 8011b16:	d10c      	bne.n	8011b32 <_printf_float+0x412>
 8011b18:	e65d      	b.n	80117d6 <_printf_float+0xb6>
 8011b1a:	2301      	movs	r3, #1
 8011b1c:	465a      	mov	r2, fp
 8011b1e:	4631      	mov	r1, r6
 8011b20:	4628      	mov	r0, r5
 8011b22:	47b8      	blx	r7
 8011b24:	3001      	adds	r0, #1
 8011b26:	f43f ae56 	beq.w	80117d6 <_printf_float+0xb6>
 8011b2a:	f108 0801 	add.w	r8, r8, #1
 8011b2e:	45d0      	cmp	r8, sl
 8011b30:	dbf3      	blt.n	8011b1a <_printf_float+0x3fa>
 8011b32:	464b      	mov	r3, r9
 8011b34:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011b38:	e6df      	b.n	80118fa <_printf_float+0x1da>
 8011b3a:	f04f 0800 	mov.w	r8, #0
 8011b3e:	f104 0b1a 	add.w	fp, r4, #26
 8011b42:	e7f4      	b.n	8011b2e <_printf_float+0x40e>
 8011b44:	2301      	movs	r3, #1
 8011b46:	4642      	mov	r2, r8
 8011b48:	e7e1      	b.n	8011b0e <_printf_float+0x3ee>
 8011b4a:	2301      	movs	r3, #1
 8011b4c:	464a      	mov	r2, r9
 8011b4e:	4631      	mov	r1, r6
 8011b50:	4628      	mov	r0, r5
 8011b52:	47b8      	blx	r7
 8011b54:	3001      	adds	r0, #1
 8011b56:	f43f ae3e 	beq.w	80117d6 <_printf_float+0xb6>
 8011b5a:	f108 0801 	add.w	r8, r8, #1
 8011b5e:	68e3      	ldr	r3, [r4, #12]
 8011b60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011b62:	1a5b      	subs	r3, r3, r1
 8011b64:	4543      	cmp	r3, r8
 8011b66:	dcf0      	bgt.n	8011b4a <_printf_float+0x42a>
 8011b68:	e6fc      	b.n	8011964 <_printf_float+0x244>
 8011b6a:	f04f 0800 	mov.w	r8, #0
 8011b6e:	f104 0919 	add.w	r9, r4, #25
 8011b72:	e7f4      	b.n	8011b5e <_printf_float+0x43e>

08011b74 <_printf_common>:
 8011b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b78:	4616      	mov	r6, r2
 8011b7a:	4698      	mov	r8, r3
 8011b7c:	688a      	ldr	r2, [r1, #8]
 8011b7e:	690b      	ldr	r3, [r1, #16]
 8011b80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011b84:	4293      	cmp	r3, r2
 8011b86:	bfb8      	it	lt
 8011b88:	4613      	movlt	r3, r2
 8011b8a:	6033      	str	r3, [r6, #0]
 8011b8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011b90:	4607      	mov	r7, r0
 8011b92:	460c      	mov	r4, r1
 8011b94:	b10a      	cbz	r2, 8011b9a <_printf_common+0x26>
 8011b96:	3301      	adds	r3, #1
 8011b98:	6033      	str	r3, [r6, #0]
 8011b9a:	6823      	ldr	r3, [r4, #0]
 8011b9c:	0699      	lsls	r1, r3, #26
 8011b9e:	bf42      	ittt	mi
 8011ba0:	6833      	ldrmi	r3, [r6, #0]
 8011ba2:	3302      	addmi	r3, #2
 8011ba4:	6033      	strmi	r3, [r6, #0]
 8011ba6:	6825      	ldr	r5, [r4, #0]
 8011ba8:	f015 0506 	ands.w	r5, r5, #6
 8011bac:	d106      	bne.n	8011bbc <_printf_common+0x48>
 8011bae:	f104 0a19 	add.w	sl, r4, #25
 8011bb2:	68e3      	ldr	r3, [r4, #12]
 8011bb4:	6832      	ldr	r2, [r6, #0]
 8011bb6:	1a9b      	subs	r3, r3, r2
 8011bb8:	42ab      	cmp	r3, r5
 8011bba:	dc26      	bgt.n	8011c0a <_printf_common+0x96>
 8011bbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011bc0:	6822      	ldr	r2, [r4, #0]
 8011bc2:	3b00      	subs	r3, #0
 8011bc4:	bf18      	it	ne
 8011bc6:	2301      	movne	r3, #1
 8011bc8:	0692      	lsls	r2, r2, #26
 8011bca:	d42b      	bmi.n	8011c24 <_printf_common+0xb0>
 8011bcc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011bd0:	4641      	mov	r1, r8
 8011bd2:	4638      	mov	r0, r7
 8011bd4:	47c8      	blx	r9
 8011bd6:	3001      	adds	r0, #1
 8011bd8:	d01e      	beq.n	8011c18 <_printf_common+0xa4>
 8011bda:	6823      	ldr	r3, [r4, #0]
 8011bdc:	6922      	ldr	r2, [r4, #16]
 8011bde:	f003 0306 	and.w	r3, r3, #6
 8011be2:	2b04      	cmp	r3, #4
 8011be4:	bf02      	ittt	eq
 8011be6:	68e5      	ldreq	r5, [r4, #12]
 8011be8:	6833      	ldreq	r3, [r6, #0]
 8011bea:	1aed      	subeq	r5, r5, r3
 8011bec:	68a3      	ldr	r3, [r4, #8]
 8011bee:	bf0c      	ite	eq
 8011bf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011bf4:	2500      	movne	r5, #0
 8011bf6:	4293      	cmp	r3, r2
 8011bf8:	bfc4      	itt	gt
 8011bfa:	1a9b      	subgt	r3, r3, r2
 8011bfc:	18ed      	addgt	r5, r5, r3
 8011bfe:	2600      	movs	r6, #0
 8011c00:	341a      	adds	r4, #26
 8011c02:	42b5      	cmp	r5, r6
 8011c04:	d11a      	bne.n	8011c3c <_printf_common+0xc8>
 8011c06:	2000      	movs	r0, #0
 8011c08:	e008      	b.n	8011c1c <_printf_common+0xa8>
 8011c0a:	2301      	movs	r3, #1
 8011c0c:	4652      	mov	r2, sl
 8011c0e:	4641      	mov	r1, r8
 8011c10:	4638      	mov	r0, r7
 8011c12:	47c8      	blx	r9
 8011c14:	3001      	adds	r0, #1
 8011c16:	d103      	bne.n	8011c20 <_printf_common+0xac>
 8011c18:	f04f 30ff 	mov.w	r0, #4294967295
 8011c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c20:	3501      	adds	r5, #1
 8011c22:	e7c6      	b.n	8011bb2 <_printf_common+0x3e>
 8011c24:	18e1      	adds	r1, r4, r3
 8011c26:	1c5a      	adds	r2, r3, #1
 8011c28:	2030      	movs	r0, #48	@ 0x30
 8011c2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011c2e:	4422      	add	r2, r4
 8011c30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011c34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011c38:	3302      	adds	r3, #2
 8011c3a:	e7c7      	b.n	8011bcc <_printf_common+0x58>
 8011c3c:	2301      	movs	r3, #1
 8011c3e:	4622      	mov	r2, r4
 8011c40:	4641      	mov	r1, r8
 8011c42:	4638      	mov	r0, r7
 8011c44:	47c8      	blx	r9
 8011c46:	3001      	adds	r0, #1
 8011c48:	d0e6      	beq.n	8011c18 <_printf_common+0xa4>
 8011c4a:	3601      	adds	r6, #1
 8011c4c:	e7d9      	b.n	8011c02 <_printf_common+0x8e>
	...

08011c50 <_printf_i>:
 8011c50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011c54:	7e0f      	ldrb	r7, [r1, #24]
 8011c56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011c58:	2f78      	cmp	r7, #120	@ 0x78
 8011c5a:	4691      	mov	r9, r2
 8011c5c:	4680      	mov	r8, r0
 8011c5e:	460c      	mov	r4, r1
 8011c60:	469a      	mov	sl, r3
 8011c62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011c66:	d807      	bhi.n	8011c78 <_printf_i+0x28>
 8011c68:	2f62      	cmp	r7, #98	@ 0x62
 8011c6a:	d80a      	bhi.n	8011c82 <_printf_i+0x32>
 8011c6c:	2f00      	cmp	r7, #0
 8011c6e:	f000 80d2 	beq.w	8011e16 <_printf_i+0x1c6>
 8011c72:	2f58      	cmp	r7, #88	@ 0x58
 8011c74:	f000 80b9 	beq.w	8011dea <_printf_i+0x19a>
 8011c78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011c7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011c80:	e03a      	b.n	8011cf8 <_printf_i+0xa8>
 8011c82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011c86:	2b15      	cmp	r3, #21
 8011c88:	d8f6      	bhi.n	8011c78 <_printf_i+0x28>
 8011c8a:	a101      	add	r1, pc, #4	@ (adr r1, 8011c90 <_printf_i+0x40>)
 8011c8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011c90:	08011ce9 	.word	0x08011ce9
 8011c94:	08011cfd 	.word	0x08011cfd
 8011c98:	08011c79 	.word	0x08011c79
 8011c9c:	08011c79 	.word	0x08011c79
 8011ca0:	08011c79 	.word	0x08011c79
 8011ca4:	08011c79 	.word	0x08011c79
 8011ca8:	08011cfd 	.word	0x08011cfd
 8011cac:	08011c79 	.word	0x08011c79
 8011cb0:	08011c79 	.word	0x08011c79
 8011cb4:	08011c79 	.word	0x08011c79
 8011cb8:	08011c79 	.word	0x08011c79
 8011cbc:	08011dfd 	.word	0x08011dfd
 8011cc0:	08011d27 	.word	0x08011d27
 8011cc4:	08011db7 	.word	0x08011db7
 8011cc8:	08011c79 	.word	0x08011c79
 8011ccc:	08011c79 	.word	0x08011c79
 8011cd0:	08011e1f 	.word	0x08011e1f
 8011cd4:	08011c79 	.word	0x08011c79
 8011cd8:	08011d27 	.word	0x08011d27
 8011cdc:	08011c79 	.word	0x08011c79
 8011ce0:	08011c79 	.word	0x08011c79
 8011ce4:	08011dbf 	.word	0x08011dbf
 8011ce8:	6833      	ldr	r3, [r6, #0]
 8011cea:	1d1a      	adds	r2, r3, #4
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	6032      	str	r2, [r6, #0]
 8011cf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011cf4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011cf8:	2301      	movs	r3, #1
 8011cfa:	e09d      	b.n	8011e38 <_printf_i+0x1e8>
 8011cfc:	6833      	ldr	r3, [r6, #0]
 8011cfe:	6820      	ldr	r0, [r4, #0]
 8011d00:	1d19      	adds	r1, r3, #4
 8011d02:	6031      	str	r1, [r6, #0]
 8011d04:	0606      	lsls	r6, r0, #24
 8011d06:	d501      	bpl.n	8011d0c <_printf_i+0xbc>
 8011d08:	681d      	ldr	r5, [r3, #0]
 8011d0a:	e003      	b.n	8011d14 <_printf_i+0xc4>
 8011d0c:	0645      	lsls	r5, r0, #25
 8011d0e:	d5fb      	bpl.n	8011d08 <_printf_i+0xb8>
 8011d10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011d14:	2d00      	cmp	r5, #0
 8011d16:	da03      	bge.n	8011d20 <_printf_i+0xd0>
 8011d18:	232d      	movs	r3, #45	@ 0x2d
 8011d1a:	426d      	negs	r5, r5
 8011d1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011d20:	4859      	ldr	r0, [pc, #356]	@ (8011e88 <_printf_i+0x238>)
 8011d22:	230a      	movs	r3, #10
 8011d24:	e011      	b.n	8011d4a <_printf_i+0xfa>
 8011d26:	6821      	ldr	r1, [r4, #0]
 8011d28:	6833      	ldr	r3, [r6, #0]
 8011d2a:	0608      	lsls	r0, r1, #24
 8011d2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8011d30:	d402      	bmi.n	8011d38 <_printf_i+0xe8>
 8011d32:	0649      	lsls	r1, r1, #25
 8011d34:	bf48      	it	mi
 8011d36:	b2ad      	uxthmi	r5, r5
 8011d38:	2f6f      	cmp	r7, #111	@ 0x6f
 8011d3a:	4853      	ldr	r0, [pc, #332]	@ (8011e88 <_printf_i+0x238>)
 8011d3c:	6033      	str	r3, [r6, #0]
 8011d3e:	bf14      	ite	ne
 8011d40:	230a      	movne	r3, #10
 8011d42:	2308      	moveq	r3, #8
 8011d44:	2100      	movs	r1, #0
 8011d46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011d4a:	6866      	ldr	r6, [r4, #4]
 8011d4c:	60a6      	str	r6, [r4, #8]
 8011d4e:	2e00      	cmp	r6, #0
 8011d50:	bfa2      	ittt	ge
 8011d52:	6821      	ldrge	r1, [r4, #0]
 8011d54:	f021 0104 	bicge.w	r1, r1, #4
 8011d58:	6021      	strge	r1, [r4, #0]
 8011d5a:	b90d      	cbnz	r5, 8011d60 <_printf_i+0x110>
 8011d5c:	2e00      	cmp	r6, #0
 8011d5e:	d04b      	beq.n	8011df8 <_printf_i+0x1a8>
 8011d60:	4616      	mov	r6, r2
 8011d62:	fbb5 f1f3 	udiv	r1, r5, r3
 8011d66:	fb03 5711 	mls	r7, r3, r1, r5
 8011d6a:	5dc7      	ldrb	r7, [r0, r7]
 8011d6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011d70:	462f      	mov	r7, r5
 8011d72:	42bb      	cmp	r3, r7
 8011d74:	460d      	mov	r5, r1
 8011d76:	d9f4      	bls.n	8011d62 <_printf_i+0x112>
 8011d78:	2b08      	cmp	r3, #8
 8011d7a:	d10b      	bne.n	8011d94 <_printf_i+0x144>
 8011d7c:	6823      	ldr	r3, [r4, #0]
 8011d7e:	07df      	lsls	r7, r3, #31
 8011d80:	d508      	bpl.n	8011d94 <_printf_i+0x144>
 8011d82:	6923      	ldr	r3, [r4, #16]
 8011d84:	6861      	ldr	r1, [r4, #4]
 8011d86:	4299      	cmp	r1, r3
 8011d88:	bfde      	ittt	le
 8011d8a:	2330      	movle	r3, #48	@ 0x30
 8011d8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011d90:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011d94:	1b92      	subs	r2, r2, r6
 8011d96:	6122      	str	r2, [r4, #16]
 8011d98:	f8cd a000 	str.w	sl, [sp]
 8011d9c:	464b      	mov	r3, r9
 8011d9e:	aa03      	add	r2, sp, #12
 8011da0:	4621      	mov	r1, r4
 8011da2:	4640      	mov	r0, r8
 8011da4:	f7ff fee6 	bl	8011b74 <_printf_common>
 8011da8:	3001      	adds	r0, #1
 8011daa:	d14a      	bne.n	8011e42 <_printf_i+0x1f2>
 8011dac:	f04f 30ff 	mov.w	r0, #4294967295
 8011db0:	b004      	add	sp, #16
 8011db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011db6:	6823      	ldr	r3, [r4, #0]
 8011db8:	f043 0320 	orr.w	r3, r3, #32
 8011dbc:	6023      	str	r3, [r4, #0]
 8011dbe:	4833      	ldr	r0, [pc, #204]	@ (8011e8c <_printf_i+0x23c>)
 8011dc0:	2778      	movs	r7, #120	@ 0x78
 8011dc2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011dc6:	6823      	ldr	r3, [r4, #0]
 8011dc8:	6831      	ldr	r1, [r6, #0]
 8011dca:	061f      	lsls	r7, r3, #24
 8011dcc:	f851 5b04 	ldr.w	r5, [r1], #4
 8011dd0:	d402      	bmi.n	8011dd8 <_printf_i+0x188>
 8011dd2:	065f      	lsls	r7, r3, #25
 8011dd4:	bf48      	it	mi
 8011dd6:	b2ad      	uxthmi	r5, r5
 8011dd8:	6031      	str	r1, [r6, #0]
 8011dda:	07d9      	lsls	r1, r3, #31
 8011ddc:	bf44      	itt	mi
 8011dde:	f043 0320 	orrmi.w	r3, r3, #32
 8011de2:	6023      	strmi	r3, [r4, #0]
 8011de4:	b11d      	cbz	r5, 8011dee <_printf_i+0x19e>
 8011de6:	2310      	movs	r3, #16
 8011de8:	e7ac      	b.n	8011d44 <_printf_i+0xf4>
 8011dea:	4827      	ldr	r0, [pc, #156]	@ (8011e88 <_printf_i+0x238>)
 8011dec:	e7e9      	b.n	8011dc2 <_printf_i+0x172>
 8011dee:	6823      	ldr	r3, [r4, #0]
 8011df0:	f023 0320 	bic.w	r3, r3, #32
 8011df4:	6023      	str	r3, [r4, #0]
 8011df6:	e7f6      	b.n	8011de6 <_printf_i+0x196>
 8011df8:	4616      	mov	r6, r2
 8011dfa:	e7bd      	b.n	8011d78 <_printf_i+0x128>
 8011dfc:	6833      	ldr	r3, [r6, #0]
 8011dfe:	6825      	ldr	r5, [r4, #0]
 8011e00:	6961      	ldr	r1, [r4, #20]
 8011e02:	1d18      	adds	r0, r3, #4
 8011e04:	6030      	str	r0, [r6, #0]
 8011e06:	062e      	lsls	r6, r5, #24
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	d501      	bpl.n	8011e10 <_printf_i+0x1c0>
 8011e0c:	6019      	str	r1, [r3, #0]
 8011e0e:	e002      	b.n	8011e16 <_printf_i+0x1c6>
 8011e10:	0668      	lsls	r0, r5, #25
 8011e12:	d5fb      	bpl.n	8011e0c <_printf_i+0x1bc>
 8011e14:	8019      	strh	r1, [r3, #0]
 8011e16:	2300      	movs	r3, #0
 8011e18:	6123      	str	r3, [r4, #16]
 8011e1a:	4616      	mov	r6, r2
 8011e1c:	e7bc      	b.n	8011d98 <_printf_i+0x148>
 8011e1e:	6833      	ldr	r3, [r6, #0]
 8011e20:	1d1a      	adds	r2, r3, #4
 8011e22:	6032      	str	r2, [r6, #0]
 8011e24:	681e      	ldr	r6, [r3, #0]
 8011e26:	6862      	ldr	r2, [r4, #4]
 8011e28:	2100      	movs	r1, #0
 8011e2a:	4630      	mov	r0, r6
 8011e2c:	f7ee f9d8 	bl	80001e0 <memchr>
 8011e30:	b108      	cbz	r0, 8011e36 <_printf_i+0x1e6>
 8011e32:	1b80      	subs	r0, r0, r6
 8011e34:	6060      	str	r0, [r4, #4]
 8011e36:	6863      	ldr	r3, [r4, #4]
 8011e38:	6123      	str	r3, [r4, #16]
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011e40:	e7aa      	b.n	8011d98 <_printf_i+0x148>
 8011e42:	6923      	ldr	r3, [r4, #16]
 8011e44:	4632      	mov	r2, r6
 8011e46:	4649      	mov	r1, r9
 8011e48:	4640      	mov	r0, r8
 8011e4a:	47d0      	blx	sl
 8011e4c:	3001      	adds	r0, #1
 8011e4e:	d0ad      	beq.n	8011dac <_printf_i+0x15c>
 8011e50:	6823      	ldr	r3, [r4, #0]
 8011e52:	079b      	lsls	r3, r3, #30
 8011e54:	d413      	bmi.n	8011e7e <_printf_i+0x22e>
 8011e56:	68e0      	ldr	r0, [r4, #12]
 8011e58:	9b03      	ldr	r3, [sp, #12]
 8011e5a:	4298      	cmp	r0, r3
 8011e5c:	bfb8      	it	lt
 8011e5e:	4618      	movlt	r0, r3
 8011e60:	e7a6      	b.n	8011db0 <_printf_i+0x160>
 8011e62:	2301      	movs	r3, #1
 8011e64:	4632      	mov	r2, r6
 8011e66:	4649      	mov	r1, r9
 8011e68:	4640      	mov	r0, r8
 8011e6a:	47d0      	blx	sl
 8011e6c:	3001      	adds	r0, #1
 8011e6e:	d09d      	beq.n	8011dac <_printf_i+0x15c>
 8011e70:	3501      	adds	r5, #1
 8011e72:	68e3      	ldr	r3, [r4, #12]
 8011e74:	9903      	ldr	r1, [sp, #12]
 8011e76:	1a5b      	subs	r3, r3, r1
 8011e78:	42ab      	cmp	r3, r5
 8011e7a:	dcf2      	bgt.n	8011e62 <_printf_i+0x212>
 8011e7c:	e7eb      	b.n	8011e56 <_printf_i+0x206>
 8011e7e:	2500      	movs	r5, #0
 8011e80:	f104 0619 	add.w	r6, r4, #25
 8011e84:	e7f5      	b.n	8011e72 <_printf_i+0x222>
 8011e86:	bf00      	nop
 8011e88:	08015b66 	.word	0x08015b66
 8011e8c:	08015b77 	.word	0x08015b77

08011e90 <std>:
 8011e90:	2300      	movs	r3, #0
 8011e92:	b510      	push	{r4, lr}
 8011e94:	4604      	mov	r4, r0
 8011e96:	e9c0 3300 	strd	r3, r3, [r0]
 8011e9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011e9e:	6083      	str	r3, [r0, #8]
 8011ea0:	8181      	strh	r1, [r0, #12]
 8011ea2:	6643      	str	r3, [r0, #100]	@ 0x64
 8011ea4:	81c2      	strh	r2, [r0, #14]
 8011ea6:	6183      	str	r3, [r0, #24]
 8011ea8:	4619      	mov	r1, r3
 8011eaa:	2208      	movs	r2, #8
 8011eac:	305c      	adds	r0, #92	@ 0x5c
 8011eae:	f000 f914 	bl	80120da <memset>
 8011eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8011ee8 <std+0x58>)
 8011eb4:	6263      	str	r3, [r4, #36]	@ 0x24
 8011eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8011eec <std+0x5c>)
 8011eb8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011eba:	4b0d      	ldr	r3, [pc, #52]	@ (8011ef0 <std+0x60>)
 8011ebc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8011ef4 <std+0x64>)
 8011ec0:	6323      	str	r3, [r4, #48]	@ 0x30
 8011ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8011ef8 <std+0x68>)
 8011ec4:	6224      	str	r4, [r4, #32]
 8011ec6:	429c      	cmp	r4, r3
 8011ec8:	d006      	beq.n	8011ed8 <std+0x48>
 8011eca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011ece:	4294      	cmp	r4, r2
 8011ed0:	d002      	beq.n	8011ed8 <std+0x48>
 8011ed2:	33d0      	adds	r3, #208	@ 0xd0
 8011ed4:	429c      	cmp	r4, r3
 8011ed6:	d105      	bne.n	8011ee4 <std+0x54>
 8011ed8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ee0:	f000 b9cc 	b.w	801227c <__retarget_lock_init_recursive>
 8011ee4:	bd10      	pop	{r4, pc}
 8011ee6:	bf00      	nop
 8011ee8:	08012055 	.word	0x08012055
 8011eec:	08012077 	.word	0x08012077
 8011ef0:	080120af 	.word	0x080120af
 8011ef4:	080120d3 	.word	0x080120d3
 8011ef8:	200005c8 	.word	0x200005c8

08011efc <stdio_exit_handler>:
 8011efc:	4a02      	ldr	r2, [pc, #8]	@ (8011f08 <stdio_exit_handler+0xc>)
 8011efe:	4903      	ldr	r1, [pc, #12]	@ (8011f0c <stdio_exit_handler+0x10>)
 8011f00:	4803      	ldr	r0, [pc, #12]	@ (8011f10 <stdio_exit_handler+0x14>)
 8011f02:	f000 b869 	b.w	8011fd8 <_fwalk_sglue>
 8011f06:	bf00      	nop
 8011f08:	20000010 	.word	0x20000010
 8011f0c:	08013a81 	.word	0x08013a81
 8011f10:	20000020 	.word	0x20000020

08011f14 <cleanup_stdio>:
 8011f14:	6841      	ldr	r1, [r0, #4]
 8011f16:	4b0c      	ldr	r3, [pc, #48]	@ (8011f48 <cleanup_stdio+0x34>)
 8011f18:	4299      	cmp	r1, r3
 8011f1a:	b510      	push	{r4, lr}
 8011f1c:	4604      	mov	r4, r0
 8011f1e:	d001      	beq.n	8011f24 <cleanup_stdio+0x10>
 8011f20:	f001 fdae 	bl	8013a80 <_fflush_r>
 8011f24:	68a1      	ldr	r1, [r4, #8]
 8011f26:	4b09      	ldr	r3, [pc, #36]	@ (8011f4c <cleanup_stdio+0x38>)
 8011f28:	4299      	cmp	r1, r3
 8011f2a:	d002      	beq.n	8011f32 <cleanup_stdio+0x1e>
 8011f2c:	4620      	mov	r0, r4
 8011f2e:	f001 fda7 	bl	8013a80 <_fflush_r>
 8011f32:	68e1      	ldr	r1, [r4, #12]
 8011f34:	4b06      	ldr	r3, [pc, #24]	@ (8011f50 <cleanup_stdio+0x3c>)
 8011f36:	4299      	cmp	r1, r3
 8011f38:	d004      	beq.n	8011f44 <cleanup_stdio+0x30>
 8011f3a:	4620      	mov	r0, r4
 8011f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f40:	f001 bd9e 	b.w	8013a80 <_fflush_r>
 8011f44:	bd10      	pop	{r4, pc}
 8011f46:	bf00      	nop
 8011f48:	200005c8 	.word	0x200005c8
 8011f4c:	20000630 	.word	0x20000630
 8011f50:	20000698 	.word	0x20000698

08011f54 <global_stdio_init.part.0>:
 8011f54:	b510      	push	{r4, lr}
 8011f56:	4b0b      	ldr	r3, [pc, #44]	@ (8011f84 <global_stdio_init.part.0+0x30>)
 8011f58:	4c0b      	ldr	r4, [pc, #44]	@ (8011f88 <global_stdio_init.part.0+0x34>)
 8011f5a:	4a0c      	ldr	r2, [pc, #48]	@ (8011f8c <global_stdio_init.part.0+0x38>)
 8011f5c:	601a      	str	r2, [r3, #0]
 8011f5e:	4620      	mov	r0, r4
 8011f60:	2200      	movs	r2, #0
 8011f62:	2104      	movs	r1, #4
 8011f64:	f7ff ff94 	bl	8011e90 <std>
 8011f68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011f6c:	2201      	movs	r2, #1
 8011f6e:	2109      	movs	r1, #9
 8011f70:	f7ff ff8e 	bl	8011e90 <std>
 8011f74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011f78:	2202      	movs	r2, #2
 8011f7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f7e:	2112      	movs	r1, #18
 8011f80:	f7ff bf86 	b.w	8011e90 <std>
 8011f84:	20000700 	.word	0x20000700
 8011f88:	200005c8 	.word	0x200005c8
 8011f8c:	08011efd 	.word	0x08011efd

08011f90 <__sfp_lock_acquire>:
 8011f90:	4801      	ldr	r0, [pc, #4]	@ (8011f98 <__sfp_lock_acquire+0x8>)
 8011f92:	f000 b974 	b.w	801227e <__retarget_lock_acquire_recursive>
 8011f96:	bf00      	nop
 8011f98:	20000709 	.word	0x20000709

08011f9c <__sfp_lock_release>:
 8011f9c:	4801      	ldr	r0, [pc, #4]	@ (8011fa4 <__sfp_lock_release+0x8>)
 8011f9e:	f000 b96f 	b.w	8012280 <__retarget_lock_release_recursive>
 8011fa2:	bf00      	nop
 8011fa4:	20000709 	.word	0x20000709

08011fa8 <__sinit>:
 8011fa8:	b510      	push	{r4, lr}
 8011faa:	4604      	mov	r4, r0
 8011fac:	f7ff fff0 	bl	8011f90 <__sfp_lock_acquire>
 8011fb0:	6a23      	ldr	r3, [r4, #32]
 8011fb2:	b11b      	cbz	r3, 8011fbc <__sinit+0x14>
 8011fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011fb8:	f7ff bff0 	b.w	8011f9c <__sfp_lock_release>
 8011fbc:	4b04      	ldr	r3, [pc, #16]	@ (8011fd0 <__sinit+0x28>)
 8011fbe:	6223      	str	r3, [r4, #32]
 8011fc0:	4b04      	ldr	r3, [pc, #16]	@ (8011fd4 <__sinit+0x2c>)
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d1f5      	bne.n	8011fb4 <__sinit+0xc>
 8011fc8:	f7ff ffc4 	bl	8011f54 <global_stdio_init.part.0>
 8011fcc:	e7f2      	b.n	8011fb4 <__sinit+0xc>
 8011fce:	bf00      	nop
 8011fd0:	08011f15 	.word	0x08011f15
 8011fd4:	20000700 	.word	0x20000700

08011fd8 <_fwalk_sglue>:
 8011fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011fdc:	4607      	mov	r7, r0
 8011fde:	4688      	mov	r8, r1
 8011fe0:	4614      	mov	r4, r2
 8011fe2:	2600      	movs	r6, #0
 8011fe4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011fe8:	f1b9 0901 	subs.w	r9, r9, #1
 8011fec:	d505      	bpl.n	8011ffa <_fwalk_sglue+0x22>
 8011fee:	6824      	ldr	r4, [r4, #0]
 8011ff0:	2c00      	cmp	r4, #0
 8011ff2:	d1f7      	bne.n	8011fe4 <_fwalk_sglue+0xc>
 8011ff4:	4630      	mov	r0, r6
 8011ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ffa:	89ab      	ldrh	r3, [r5, #12]
 8011ffc:	2b01      	cmp	r3, #1
 8011ffe:	d907      	bls.n	8012010 <_fwalk_sglue+0x38>
 8012000:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012004:	3301      	adds	r3, #1
 8012006:	d003      	beq.n	8012010 <_fwalk_sglue+0x38>
 8012008:	4629      	mov	r1, r5
 801200a:	4638      	mov	r0, r7
 801200c:	47c0      	blx	r8
 801200e:	4306      	orrs	r6, r0
 8012010:	3568      	adds	r5, #104	@ 0x68
 8012012:	e7e9      	b.n	8011fe8 <_fwalk_sglue+0x10>

08012014 <siprintf>:
 8012014:	b40e      	push	{r1, r2, r3}
 8012016:	b500      	push	{lr}
 8012018:	b09c      	sub	sp, #112	@ 0x70
 801201a:	ab1d      	add	r3, sp, #116	@ 0x74
 801201c:	9002      	str	r0, [sp, #8]
 801201e:	9006      	str	r0, [sp, #24]
 8012020:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012024:	4809      	ldr	r0, [pc, #36]	@ (801204c <siprintf+0x38>)
 8012026:	9107      	str	r1, [sp, #28]
 8012028:	9104      	str	r1, [sp, #16]
 801202a:	4909      	ldr	r1, [pc, #36]	@ (8012050 <siprintf+0x3c>)
 801202c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012030:	9105      	str	r1, [sp, #20]
 8012032:	6800      	ldr	r0, [r0, #0]
 8012034:	9301      	str	r3, [sp, #4]
 8012036:	a902      	add	r1, sp, #8
 8012038:	f001 fba2 	bl	8013780 <_svfiprintf_r>
 801203c:	9b02      	ldr	r3, [sp, #8]
 801203e:	2200      	movs	r2, #0
 8012040:	701a      	strb	r2, [r3, #0]
 8012042:	b01c      	add	sp, #112	@ 0x70
 8012044:	f85d eb04 	ldr.w	lr, [sp], #4
 8012048:	b003      	add	sp, #12
 801204a:	4770      	bx	lr
 801204c:	2000001c 	.word	0x2000001c
 8012050:	ffff0208 	.word	0xffff0208

08012054 <__sread>:
 8012054:	b510      	push	{r4, lr}
 8012056:	460c      	mov	r4, r1
 8012058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801205c:	f000 f89c 	bl	8012198 <_read_r>
 8012060:	2800      	cmp	r0, #0
 8012062:	bfab      	itete	ge
 8012064:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012066:	89a3      	ldrhlt	r3, [r4, #12]
 8012068:	181b      	addge	r3, r3, r0
 801206a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801206e:	bfac      	ite	ge
 8012070:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012072:	81a3      	strhlt	r3, [r4, #12]
 8012074:	bd10      	pop	{r4, pc}

08012076 <__swrite>:
 8012076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801207a:	461f      	mov	r7, r3
 801207c:	898b      	ldrh	r3, [r1, #12]
 801207e:	05db      	lsls	r3, r3, #23
 8012080:	4605      	mov	r5, r0
 8012082:	460c      	mov	r4, r1
 8012084:	4616      	mov	r6, r2
 8012086:	d505      	bpl.n	8012094 <__swrite+0x1e>
 8012088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801208c:	2302      	movs	r3, #2
 801208e:	2200      	movs	r2, #0
 8012090:	f000 f870 	bl	8012174 <_lseek_r>
 8012094:	89a3      	ldrh	r3, [r4, #12]
 8012096:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801209a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801209e:	81a3      	strh	r3, [r4, #12]
 80120a0:	4632      	mov	r2, r6
 80120a2:	463b      	mov	r3, r7
 80120a4:	4628      	mov	r0, r5
 80120a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80120aa:	f000 b8ab 	b.w	8012204 <_write_r>

080120ae <__sseek>:
 80120ae:	b510      	push	{r4, lr}
 80120b0:	460c      	mov	r4, r1
 80120b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120b6:	f000 f85d 	bl	8012174 <_lseek_r>
 80120ba:	1c43      	adds	r3, r0, #1
 80120bc:	89a3      	ldrh	r3, [r4, #12]
 80120be:	bf15      	itete	ne
 80120c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80120c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80120c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80120ca:	81a3      	strheq	r3, [r4, #12]
 80120cc:	bf18      	it	ne
 80120ce:	81a3      	strhne	r3, [r4, #12]
 80120d0:	bd10      	pop	{r4, pc}

080120d2 <__sclose>:
 80120d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120d6:	f000 b83d 	b.w	8012154 <_close_r>

080120da <memset>:
 80120da:	4402      	add	r2, r0
 80120dc:	4603      	mov	r3, r0
 80120de:	4293      	cmp	r3, r2
 80120e0:	d100      	bne.n	80120e4 <memset+0xa>
 80120e2:	4770      	bx	lr
 80120e4:	f803 1b01 	strb.w	r1, [r3], #1
 80120e8:	e7f9      	b.n	80120de <memset+0x4>

080120ea <_raise_r>:
 80120ea:	291f      	cmp	r1, #31
 80120ec:	b538      	push	{r3, r4, r5, lr}
 80120ee:	4605      	mov	r5, r0
 80120f0:	460c      	mov	r4, r1
 80120f2:	d904      	bls.n	80120fe <_raise_r+0x14>
 80120f4:	2316      	movs	r3, #22
 80120f6:	6003      	str	r3, [r0, #0]
 80120f8:	f04f 30ff 	mov.w	r0, #4294967295
 80120fc:	bd38      	pop	{r3, r4, r5, pc}
 80120fe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012100:	b112      	cbz	r2, 8012108 <_raise_r+0x1e>
 8012102:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012106:	b94b      	cbnz	r3, 801211c <_raise_r+0x32>
 8012108:	4628      	mov	r0, r5
 801210a:	f000 f869 	bl	80121e0 <_getpid_r>
 801210e:	4622      	mov	r2, r4
 8012110:	4601      	mov	r1, r0
 8012112:	4628      	mov	r0, r5
 8012114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012118:	f000 b850 	b.w	80121bc <_kill_r>
 801211c:	2b01      	cmp	r3, #1
 801211e:	d00a      	beq.n	8012136 <_raise_r+0x4c>
 8012120:	1c59      	adds	r1, r3, #1
 8012122:	d103      	bne.n	801212c <_raise_r+0x42>
 8012124:	2316      	movs	r3, #22
 8012126:	6003      	str	r3, [r0, #0]
 8012128:	2001      	movs	r0, #1
 801212a:	e7e7      	b.n	80120fc <_raise_r+0x12>
 801212c:	2100      	movs	r1, #0
 801212e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012132:	4620      	mov	r0, r4
 8012134:	4798      	blx	r3
 8012136:	2000      	movs	r0, #0
 8012138:	e7e0      	b.n	80120fc <_raise_r+0x12>
	...

0801213c <raise>:
 801213c:	4b02      	ldr	r3, [pc, #8]	@ (8012148 <raise+0xc>)
 801213e:	4601      	mov	r1, r0
 8012140:	6818      	ldr	r0, [r3, #0]
 8012142:	f7ff bfd2 	b.w	80120ea <_raise_r>
 8012146:	bf00      	nop
 8012148:	2000001c 	.word	0x2000001c

0801214c <_localeconv_r>:
 801214c:	4800      	ldr	r0, [pc, #0]	@ (8012150 <_localeconv_r+0x4>)
 801214e:	4770      	bx	lr
 8012150:	2000015c 	.word	0x2000015c

08012154 <_close_r>:
 8012154:	b538      	push	{r3, r4, r5, lr}
 8012156:	4d06      	ldr	r5, [pc, #24]	@ (8012170 <_close_r+0x1c>)
 8012158:	2300      	movs	r3, #0
 801215a:	4604      	mov	r4, r0
 801215c:	4608      	mov	r0, r1
 801215e:	602b      	str	r3, [r5, #0]
 8012160:	f7fa ff20 	bl	800cfa4 <_close>
 8012164:	1c43      	adds	r3, r0, #1
 8012166:	d102      	bne.n	801216e <_close_r+0x1a>
 8012168:	682b      	ldr	r3, [r5, #0]
 801216a:	b103      	cbz	r3, 801216e <_close_r+0x1a>
 801216c:	6023      	str	r3, [r4, #0]
 801216e:	bd38      	pop	{r3, r4, r5, pc}
 8012170:	20000704 	.word	0x20000704

08012174 <_lseek_r>:
 8012174:	b538      	push	{r3, r4, r5, lr}
 8012176:	4d07      	ldr	r5, [pc, #28]	@ (8012194 <_lseek_r+0x20>)
 8012178:	4604      	mov	r4, r0
 801217a:	4608      	mov	r0, r1
 801217c:	4611      	mov	r1, r2
 801217e:	2200      	movs	r2, #0
 8012180:	602a      	str	r2, [r5, #0]
 8012182:	461a      	mov	r2, r3
 8012184:	f7fa ff35 	bl	800cff2 <_lseek>
 8012188:	1c43      	adds	r3, r0, #1
 801218a:	d102      	bne.n	8012192 <_lseek_r+0x1e>
 801218c:	682b      	ldr	r3, [r5, #0]
 801218e:	b103      	cbz	r3, 8012192 <_lseek_r+0x1e>
 8012190:	6023      	str	r3, [r4, #0]
 8012192:	bd38      	pop	{r3, r4, r5, pc}
 8012194:	20000704 	.word	0x20000704

08012198 <_read_r>:
 8012198:	b538      	push	{r3, r4, r5, lr}
 801219a:	4d07      	ldr	r5, [pc, #28]	@ (80121b8 <_read_r+0x20>)
 801219c:	4604      	mov	r4, r0
 801219e:	4608      	mov	r0, r1
 80121a0:	4611      	mov	r1, r2
 80121a2:	2200      	movs	r2, #0
 80121a4:	602a      	str	r2, [r5, #0]
 80121a6:	461a      	mov	r2, r3
 80121a8:	f7fa fec3 	bl	800cf32 <_read>
 80121ac:	1c43      	adds	r3, r0, #1
 80121ae:	d102      	bne.n	80121b6 <_read_r+0x1e>
 80121b0:	682b      	ldr	r3, [r5, #0]
 80121b2:	b103      	cbz	r3, 80121b6 <_read_r+0x1e>
 80121b4:	6023      	str	r3, [r4, #0]
 80121b6:	bd38      	pop	{r3, r4, r5, pc}
 80121b8:	20000704 	.word	0x20000704

080121bc <_kill_r>:
 80121bc:	b538      	push	{r3, r4, r5, lr}
 80121be:	4d07      	ldr	r5, [pc, #28]	@ (80121dc <_kill_r+0x20>)
 80121c0:	2300      	movs	r3, #0
 80121c2:	4604      	mov	r4, r0
 80121c4:	4608      	mov	r0, r1
 80121c6:	4611      	mov	r1, r2
 80121c8:	602b      	str	r3, [r5, #0]
 80121ca:	f7fa fe97 	bl	800cefc <_kill>
 80121ce:	1c43      	adds	r3, r0, #1
 80121d0:	d102      	bne.n	80121d8 <_kill_r+0x1c>
 80121d2:	682b      	ldr	r3, [r5, #0]
 80121d4:	b103      	cbz	r3, 80121d8 <_kill_r+0x1c>
 80121d6:	6023      	str	r3, [r4, #0]
 80121d8:	bd38      	pop	{r3, r4, r5, pc}
 80121da:	bf00      	nop
 80121dc:	20000704 	.word	0x20000704

080121e0 <_getpid_r>:
 80121e0:	f7fa be84 	b.w	800ceec <_getpid>

080121e4 <_sbrk_r>:
 80121e4:	b538      	push	{r3, r4, r5, lr}
 80121e6:	4d06      	ldr	r5, [pc, #24]	@ (8012200 <_sbrk_r+0x1c>)
 80121e8:	2300      	movs	r3, #0
 80121ea:	4604      	mov	r4, r0
 80121ec:	4608      	mov	r0, r1
 80121ee:	602b      	str	r3, [r5, #0]
 80121f0:	f7fa ff0c 	bl	800d00c <_sbrk>
 80121f4:	1c43      	adds	r3, r0, #1
 80121f6:	d102      	bne.n	80121fe <_sbrk_r+0x1a>
 80121f8:	682b      	ldr	r3, [r5, #0]
 80121fa:	b103      	cbz	r3, 80121fe <_sbrk_r+0x1a>
 80121fc:	6023      	str	r3, [r4, #0]
 80121fe:	bd38      	pop	{r3, r4, r5, pc}
 8012200:	20000704 	.word	0x20000704

08012204 <_write_r>:
 8012204:	b538      	push	{r3, r4, r5, lr}
 8012206:	4d07      	ldr	r5, [pc, #28]	@ (8012224 <_write_r+0x20>)
 8012208:	4604      	mov	r4, r0
 801220a:	4608      	mov	r0, r1
 801220c:	4611      	mov	r1, r2
 801220e:	2200      	movs	r2, #0
 8012210:	602a      	str	r2, [r5, #0]
 8012212:	461a      	mov	r2, r3
 8012214:	f7fa feaa 	bl	800cf6c <_write>
 8012218:	1c43      	adds	r3, r0, #1
 801221a:	d102      	bne.n	8012222 <_write_r+0x1e>
 801221c:	682b      	ldr	r3, [r5, #0]
 801221e:	b103      	cbz	r3, 8012222 <_write_r+0x1e>
 8012220:	6023      	str	r3, [r4, #0]
 8012222:	bd38      	pop	{r3, r4, r5, pc}
 8012224:	20000704 	.word	0x20000704

08012228 <__errno>:
 8012228:	4b01      	ldr	r3, [pc, #4]	@ (8012230 <__errno+0x8>)
 801222a:	6818      	ldr	r0, [r3, #0]
 801222c:	4770      	bx	lr
 801222e:	bf00      	nop
 8012230:	2000001c 	.word	0x2000001c

08012234 <__libc_init_array>:
 8012234:	b570      	push	{r4, r5, r6, lr}
 8012236:	4d0d      	ldr	r5, [pc, #52]	@ (801226c <__libc_init_array+0x38>)
 8012238:	4c0d      	ldr	r4, [pc, #52]	@ (8012270 <__libc_init_array+0x3c>)
 801223a:	1b64      	subs	r4, r4, r5
 801223c:	10a4      	asrs	r4, r4, #2
 801223e:	2600      	movs	r6, #0
 8012240:	42a6      	cmp	r6, r4
 8012242:	d109      	bne.n	8012258 <__libc_init_array+0x24>
 8012244:	4d0b      	ldr	r5, [pc, #44]	@ (8012274 <__libc_init_array+0x40>)
 8012246:	4c0c      	ldr	r4, [pc, #48]	@ (8012278 <__libc_init_array+0x44>)
 8012248:	f001 ff5e 	bl	8014108 <_init>
 801224c:	1b64      	subs	r4, r4, r5
 801224e:	10a4      	asrs	r4, r4, #2
 8012250:	2600      	movs	r6, #0
 8012252:	42a6      	cmp	r6, r4
 8012254:	d105      	bne.n	8012262 <__libc_init_array+0x2e>
 8012256:	bd70      	pop	{r4, r5, r6, pc}
 8012258:	f855 3b04 	ldr.w	r3, [r5], #4
 801225c:	4798      	blx	r3
 801225e:	3601      	adds	r6, #1
 8012260:	e7ee      	b.n	8012240 <__libc_init_array+0xc>
 8012262:	f855 3b04 	ldr.w	r3, [r5], #4
 8012266:	4798      	blx	r3
 8012268:	3601      	adds	r6, #1
 801226a:	e7f2      	b.n	8012252 <__libc_init_array+0x1e>
 801226c:	08015ed0 	.word	0x08015ed0
 8012270:	08015ed0 	.word	0x08015ed0
 8012274:	08015ed0 	.word	0x08015ed0
 8012278:	08015edc 	.word	0x08015edc

0801227c <__retarget_lock_init_recursive>:
 801227c:	4770      	bx	lr

0801227e <__retarget_lock_acquire_recursive>:
 801227e:	4770      	bx	lr

08012280 <__retarget_lock_release_recursive>:
 8012280:	4770      	bx	lr

08012282 <strcpy>:
 8012282:	4603      	mov	r3, r0
 8012284:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012288:	f803 2b01 	strb.w	r2, [r3], #1
 801228c:	2a00      	cmp	r2, #0
 801228e:	d1f9      	bne.n	8012284 <strcpy+0x2>
 8012290:	4770      	bx	lr

08012292 <quorem>:
 8012292:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012296:	6903      	ldr	r3, [r0, #16]
 8012298:	690c      	ldr	r4, [r1, #16]
 801229a:	42a3      	cmp	r3, r4
 801229c:	4607      	mov	r7, r0
 801229e:	db7e      	blt.n	801239e <quorem+0x10c>
 80122a0:	3c01      	subs	r4, #1
 80122a2:	f101 0814 	add.w	r8, r1, #20
 80122a6:	00a3      	lsls	r3, r4, #2
 80122a8:	f100 0514 	add.w	r5, r0, #20
 80122ac:	9300      	str	r3, [sp, #0]
 80122ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80122b2:	9301      	str	r3, [sp, #4]
 80122b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80122b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80122bc:	3301      	adds	r3, #1
 80122be:	429a      	cmp	r2, r3
 80122c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80122c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80122c8:	d32e      	bcc.n	8012328 <quorem+0x96>
 80122ca:	f04f 0a00 	mov.w	sl, #0
 80122ce:	46c4      	mov	ip, r8
 80122d0:	46ae      	mov	lr, r5
 80122d2:	46d3      	mov	fp, sl
 80122d4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80122d8:	b298      	uxth	r0, r3
 80122da:	fb06 a000 	mla	r0, r6, r0, sl
 80122de:	0c02      	lsrs	r2, r0, #16
 80122e0:	0c1b      	lsrs	r3, r3, #16
 80122e2:	fb06 2303 	mla	r3, r6, r3, r2
 80122e6:	f8de 2000 	ldr.w	r2, [lr]
 80122ea:	b280      	uxth	r0, r0
 80122ec:	b292      	uxth	r2, r2
 80122ee:	1a12      	subs	r2, r2, r0
 80122f0:	445a      	add	r2, fp
 80122f2:	f8de 0000 	ldr.w	r0, [lr]
 80122f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80122fa:	b29b      	uxth	r3, r3
 80122fc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012300:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012304:	b292      	uxth	r2, r2
 8012306:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801230a:	45e1      	cmp	r9, ip
 801230c:	f84e 2b04 	str.w	r2, [lr], #4
 8012310:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012314:	d2de      	bcs.n	80122d4 <quorem+0x42>
 8012316:	9b00      	ldr	r3, [sp, #0]
 8012318:	58eb      	ldr	r3, [r5, r3]
 801231a:	b92b      	cbnz	r3, 8012328 <quorem+0x96>
 801231c:	9b01      	ldr	r3, [sp, #4]
 801231e:	3b04      	subs	r3, #4
 8012320:	429d      	cmp	r5, r3
 8012322:	461a      	mov	r2, r3
 8012324:	d32f      	bcc.n	8012386 <quorem+0xf4>
 8012326:	613c      	str	r4, [r7, #16]
 8012328:	4638      	mov	r0, r7
 801232a:	f001 f8c5 	bl	80134b8 <__mcmp>
 801232e:	2800      	cmp	r0, #0
 8012330:	db25      	blt.n	801237e <quorem+0xec>
 8012332:	4629      	mov	r1, r5
 8012334:	2000      	movs	r0, #0
 8012336:	f858 2b04 	ldr.w	r2, [r8], #4
 801233a:	f8d1 c000 	ldr.w	ip, [r1]
 801233e:	fa1f fe82 	uxth.w	lr, r2
 8012342:	fa1f f38c 	uxth.w	r3, ip
 8012346:	eba3 030e 	sub.w	r3, r3, lr
 801234a:	4403      	add	r3, r0
 801234c:	0c12      	lsrs	r2, r2, #16
 801234e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8012352:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012356:	b29b      	uxth	r3, r3
 8012358:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801235c:	45c1      	cmp	r9, r8
 801235e:	f841 3b04 	str.w	r3, [r1], #4
 8012362:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012366:	d2e6      	bcs.n	8012336 <quorem+0xa4>
 8012368:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801236c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012370:	b922      	cbnz	r2, 801237c <quorem+0xea>
 8012372:	3b04      	subs	r3, #4
 8012374:	429d      	cmp	r5, r3
 8012376:	461a      	mov	r2, r3
 8012378:	d30b      	bcc.n	8012392 <quorem+0x100>
 801237a:	613c      	str	r4, [r7, #16]
 801237c:	3601      	adds	r6, #1
 801237e:	4630      	mov	r0, r6
 8012380:	b003      	add	sp, #12
 8012382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012386:	6812      	ldr	r2, [r2, #0]
 8012388:	3b04      	subs	r3, #4
 801238a:	2a00      	cmp	r2, #0
 801238c:	d1cb      	bne.n	8012326 <quorem+0x94>
 801238e:	3c01      	subs	r4, #1
 8012390:	e7c6      	b.n	8012320 <quorem+0x8e>
 8012392:	6812      	ldr	r2, [r2, #0]
 8012394:	3b04      	subs	r3, #4
 8012396:	2a00      	cmp	r2, #0
 8012398:	d1ef      	bne.n	801237a <quorem+0xe8>
 801239a:	3c01      	subs	r4, #1
 801239c:	e7ea      	b.n	8012374 <quorem+0xe2>
 801239e:	2000      	movs	r0, #0
 80123a0:	e7ee      	b.n	8012380 <quorem+0xee>
 80123a2:	0000      	movs	r0, r0
 80123a4:	0000      	movs	r0, r0
	...

080123a8 <_dtoa_r>:
 80123a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123ac:	69c7      	ldr	r7, [r0, #28]
 80123ae:	b099      	sub	sp, #100	@ 0x64
 80123b0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80123b4:	ec55 4b10 	vmov	r4, r5, d0
 80123b8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80123ba:	9109      	str	r1, [sp, #36]	@ 0x24
 80123bc:	4683      	mov	fp, r0
 80123be:	920e      	str	r2, [sp, #56]	@ 0x38
 80123c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80123c2:	b97f      	cbnz	r7, 80123e4 <_dtoa_r+0x3c>
 80123c4:	2010      	movs	r0, #16
 80123c6:	f7ff f84d 	bl	8011464 <malloc>
 80123ca:	4602      	mov	r2, r0
 80123cc:	f8cb 001c 	str.w	r0, [fp, #28]
 80123d0:	b920      	cbnz	r0, 80123dc <_dtoa_r+0x34>
 80123d2:	4ba7      	ldr	r3, [pc, #668]	@ (8012670 <_dtoa_r+0x2c8>)
 80123d4:	21ef      	movs	r1, #239	@ 0xef
 80123d6:	48a7      	ldr	r0, [pc, #668]	@ (8012674 <_dtoa_r+0x2cc>)
 80123d8:	f001 fba2 	bl	8013b20 <__assert_func>
 80123dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80123e0:	6007      	str	r7, [r0, #0]
 80123e2:	60c7      	str	r7, [r0, #12]
 80123e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80123e8:	6819      	ldr	r1, [r3, #0]
 80123ea:	b159      	cbz	r1, 8012404 <_dtoa_r+0x5c>
 80123ec:	685a      	ldr	r2, [r3, #4]
 80123ee:	604a      	str	r2, [r1, #4]
 80123f0:	2301      	movs	r3, #1
 80123f2:	4093      	lsls	r3, r2
 80123f4:	608b      	str	r3, [r1, #8]
 80123f6:	4658      	mov	r0, fp
 80123f8:	f000 fe24 	bl	8013044 <_Bfree>
 80123fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012400:	2200      	movs	r2, #0
 8012402:	601a      	str	r2, [r3, #0]
 8012404:	1e2b      	subs	r3, r5, #0
 8012406:	bfb9      	ittee	lt
 8012408:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801240c:	9303      	strlt	r3, [sp, #12]
 801240e:	2300      	movge	r3, #0
 8012410:	6033      	strge	r3, [r6, #0]
 8012412:	9f03      	ldr	r7, [sp, #12]
 8012414:	4b98      	ldr	r3, [pc, #608]	@ (8012678 <_dtoa_r+0x2d0>)
 8012416:	bfbc      	itt	lt
 8012418:	2201      	movlt	r2, #1
 801241a:	6032      	strlt	r2, [r6, #0]
 801241c:	43bb      	bics	r3, r7
 801241e:	d112      	bne.n	8012446 <_dtoa_r+0x9e>
 8012420:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012422:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012426:	6013      	str	r3, [r2, #0]
 8012428:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801242c:	4323      	orrs	r3, r4
 801242e:	f000 854d 	beq.w	8012ecc <_dtoa_r+0xb24>
 8012432:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012434:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801268c <_dtoa_r+0x2e4>
 8012438:	2b00      	cmp	r3, #0
 801243a:	f000 854f 	beq.w	8012edc <_dtoa_r+0xb34>
 801243e:	f10a 0303 	add.w	r3, sl, #3
 8012442:	f000 bd49 	b.w	8012ed8 <_dtoa_r+0xb30>
 8012446:	ed9d 7b02 	vldr	d7, [sp, #8]
 801244a:	2200      	movs	r2, #0
 801244c:	ec51 0b17 	vmov	r0, r1, d7
 8012450:	2300      	movs	r3, #0
 8012452:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8012456:	f7ee fb3f 	bl	8000ad8 <__aeabi_dcmpeq>
 801245a:	4680      	mov	r8, r0
 801245c:	b158      	cbz	r0, 8012476 <_dtoa_r+0xce>
 801245e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012460:	2301      	movs	r3, #1
 8012462:	6013      	str	r3, [r2, #0]
 8012464:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012466:	b113      	cbz	r3, 801246e <_dtoa_r+0xc6>
 8012468:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801246a:	4b84      	ldr	r3, [pc, #528]	@ (801267c <_dtoa_r+0x2d4>)
 801246c:	6013      	str	r3, [r2, #0]
 801246e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8012690 <_dtoa_r+0x2e8>
 8012472:	f000 bd33 	b.w	8012edc <_dtoa_r+0xb34>
 8012476:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801247a:	aa16      	add	r2, sp, #88	@ 0x58
 801247c:	a917      	add	r1, sp, #92	@ 0x5c
 801247e:	4658      	mov	r0, fp
 8012480:	f001 f8ca 	bl	8013618 <__d2b>
 8012484:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012488:	4681      	mov	r9, r0
 801248a:	2e00      	cmp	r6, #0
 801248c:	d077      	beq.n	801257e <_dtoa_r+0x1d6>
 801248e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012490:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8012494:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012498:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801249c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80124a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80124a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80124a8:	4619      	mov	r1, r3
 80124aa:	2200      	movs	r2, #0
 80124ac:	4b74      	ldr	r3, [pc, #464]	@ (8012680 <_dtoa_r+0x2d8>)
 80124ae:	f7ed fef3 	bl	8000298 <__aeabi_dsub>
 80124b2:	a369      	add	r3, pc, #420	@ (adr r3, 8012658 <_dtoa_r+0x2b0>)
 80124b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124b8:	f7ee f8a6 	bl	8000608 <__aeabi_dmul>
 80124bc:	a368      	add	r3, pc, #416	@ (adr r3, 8012660 <_dtoa_r+0x2b8>)
 80124be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124c2:	f7ed feeb 	bl	800029c <__adddf3>
 80124c6:	4604      	mov	r4, r0
 80124c8:	4630      	mov	r0, r6
 80124ca:	460d      	mov	r5, r1
 80124cc:	f7ee f832 	bl	8000534 <__aeabi_i2d>
 80124d0:	a365      	add	r3, pc, #404	@ (adr r3, 8012668 <_dtoa_r+0x2c0>)
 80124d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124d6:	f7ee f897 	bl	8000608 <__aeabi_dmul>
 80124da:	4602      	mov	r2, r0
 80124dc:	460b      	mov	r3, r1
 80124de:	4620      	mov	r0, r4
 80124e0:	4629      	mov	r1, r5
 80124e2:	f7ed fedb 	bl	800029c <__adddf3>
 80124e6:	4604      	mov	r4, r0
 80124e8:	460d      	mov	r5, r1
 80124ea:	f7ee fb3d 	bl	8000b68 <__aeabi_d2iz>
 80124ee:	2200      	movs	r2, #0
 80124f0:	4607      	mov	r7, r0
 80124f2:	2300      	movs	r3, #0
 80124f4:	4620      	mov	r0, r4
 80124f6:	4629      	mov	r1, r5
 80124f8:	f7ee faf8 	bl	8000aec <__aeabi_dcmplt>
 80124fc:	b140      	cbz	r0, 8012510 <_dtoa_r+0x168>
 80124fe:	4638      	mov	r0, r7
 8012500:	f7ee f818 	bl	8000534 <__aeabi_i2d>
 8012504:	4622      	mov	r2, r4
 8012506:	462b      	mov	r3, r5
 8012508:	f7ee fae6 	bl	8000ad8 <__aeabi_dcmpeq>
 801250c:	b900      	cbnz	r0, 8012510 <_dtoa_r+0x168>
 801250e:	3f01      	subs	r7, #1
 8012510:	2f16      	cmp	r7, #22
 8012512:	d851      	bhi.n	80125b8 <_dtoa_r+0x210>
 8012514:	4b5b      	ldr	r3, [pc, #364]	@ (8012684 <_dtoa_r+0x2dc>)
 8012516:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801251a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801251e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012522:	f7ee fae3 	bl	8000aec <__aeabi_dcmplt>
 8012526:	2800      	cmp	r0, #0
 8012528:	d048      	beq.n	80125bc <_dtoa_r+0x214>
 801252a:	3f01      	subs	r7, #1
 801252c:	2300      	movs	r3, #0
 801252e:	9312      	str	r3, [sp, #72]	@ 0x48
 8012530:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012532:	1b9b      	subs	r3, r3, r6
 8012534:	1e5a      	subs	r2, r3, #1
 8012536:	bf44      	itt	mi
 8012538:	f1c3 0801 	rsbmi	r8, r3, #1
 801253c:	2300      	movmi	r3, #0
 801253e:	9208      	str	r2, [sp, #32]
 8012540:	bf54      	ite	pl
 8012542:	f04f 0800 	movpl.w	r8, #0
 8012546:	9308      	strmi	r3, [sp, #32]
 8012548:	2f00      	cmp	r7, #0
 801254a:	db39      	blt.n	80125c0 <_dtoa_r+0x218>
 801254c:	9b08      	ldr	r3, [sp, #32]
 801254e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8012550:	443b      	add	r3, r7
 8012552:	9308      	str	r3, [sp, #32]
 8012554:	2300      	movs	r3, #0
 8012556:	930a      	str	r3, [sp, #40]	@ 0x28
 8012558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801255a:	2b09      	cmp	r3, #9
 801255c:	d864      	bhi.n	8012628 <_dtoa_r+0x280>
 801255e:	2b05      	cmp	r3, #5
 8012560:	bfc4      	itt	gt
 8012562:	3b04      	subgt	r3, #4
 8012564:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8012566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012568:	f1a3 0302 	sub.w	r3, r3, #2
 801256c:	bfcc      	ite	gt
 801256e:	2400      	movgt	r4, #0
 8012570:	2401      	movle	r4, #1
 8012572:	2b03      	cmp	r3, #3
 8012574:	d863      	bhi.n	801263e <_dtoa_r+0x296>
 8012576:	e8df f003 	tbb	[pc, r3]
 801257a:	372a      	.short	0x372a
 801257c:	5535      	.short	0x5535
 801257e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8012582:	441e      	add	r6, r3
 8012584:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012588:	2b20      	cmp	r3, #32
 801258a:	bfc1      	itttt	gt
 801258c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012590:	409f      	lslgt	r7, r3
 8012592:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8012596:	fa24 f303 	lsrgt.w	r3, r4, r3
 801259a:	bfd6      	itet	le
 801259c:	f1c3 0320 	rsble	r3, r3, #32
 80125a0:	ea47 0003 	orrgt.w	r0, r7, r3
 80125a4:	fa04 f003 	lslle.w	r0, r4, r3
 80125a8:	f7ed ffb4 	bl	8000514 <__aeabi_ui2d>
 80125ac:	2201      	movs	r2, #1
 80125ae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80125b2:	3e01      	subs	r6, #1
 80125b4:	9214      	str	r2, [sp, #80]	@ 0x50
 80125b6:	e777      	b.n	80124a8 <_dtoa_r+0x100>
 80125b8:	2301      	movs	r3, #1
 80125ba:	e7b8      	b.n	801252e <_dtoa_r+0x186>
 80125bc:	9012      	str	r0, [sp, #72]	@ 0x48
 80125be:	e7b7      	b.n	8012530 <_dtoa_r+0x188>
 80125c0:	427b      	negs	r3, r7
 80125c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80125c4:	2300      	movs	r3, #0
 80125c6:	eba8 0807 	sub.w	r8, r8, r7
 80125ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 80125cc:	e7c4      	b.n	8012558 <_dtoa_r+0x1b0>
 80125ce:	2300      	movs	r3, #0
 80125d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80125d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	dc35      	bgt.n	8012644 <_dtoa_r+0x29c>
 80125d8:	2301      	movs	r3, #1
 80125da:	9300      	str	r3, [sp, #0]
 80125dc:	9307      	str	r3, [sp, #28]
 80125de:	461a      	mov	r2, r3
 80125e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80125e2:	e00b      	b.n	80125fc <_dtoa_r+0x254>
 80125e4:	2301      	movs	r3, #1
 80125e6:	e7f3      	b.n	80125d0 <_dtoa_r+0x228>
 80125e8:	2300      	movs	r3, #0
 80125ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80125ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80125ee:	18fb      	adds	r3, r7, r3
 80125f0:	9300      	str	r3, [sp, #0]
 80125f2:	3301      	adds	r3, #1
 80125f4:	2b01      	cmp	r3, #1
 80125f6:	9307      	str	r3, [sp, #28]
 80125f8:	bfb8      	it	lt
 80125fa:	2301      	movlt	r3, #1
 80125fc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8012600:	2100      	movs	r1, #0
 8012602:	2204      	movs	r2, #4
 8012604:	f102 0514 	add.w	r5, r2, #20
 8012608:	429d      	cmp	r5, r3
 801260a:	d91f      	bls.n	801264c <_dtoa_r+0x2a4>
 801260c:	6041      	str	r1, [r0, #4]
 801260e:	4658      	mov	r0, fp
 8012610:	f000 fcd8 	bl	8012fc4 <_Balloc>
 8012614:	4682      	mov	sl, r0
 8012616:	2800      	cmp	r0, #0
 8012618:	d13c      	bne.n	8012694 <_dtoa_r+0x2ec>
 801261a:	4b1b      	ldr	r3, [pc, #108]	@ (8012688 <_dtoa_r+0x2e0>)
 801261c:	4602      	mov	r2, r0
 801261e:	f240 11af 	movw	r1, #431	@ 0x1af
 8012622:	e6d8      	b.n	80123d6 <_dtoa_r+0x2e>
 8012624:	2301      	movs	r3, #1
 8012626:	e7e0      	b.n	80125ea <_dtoa_r+0x242>
 8012628:	2401      	movs	r4, #1
 801262a:	2300      	movs	r3, #0
 801262c:	9309      	str	r3, [sp, #36]	@ 0x24
 801262e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012630:	f04f 33ff 	mov.w	r3, #4294967295
 8012634:	9300      	str	r3, [sp, #0]
 8012636:	9307      	str	r3, [sp, #28]
 8012638:	2200      	movs	r2, #0
 801263a:	2312      	movs	r3, #18
 801263c:	e7d0      	b.n	80125e0 <_dtoa_r+0x238>
 801263e:	2301      	movs	r3, #1
 8012640:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012642:	e7f5      	b.n	8012630 <_dtoa_r+0x288>
 8012644:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012646:	9300      	str	r3, [sp, #0]
 8012648:	9307      	str	r3, [sp, #28]
 801264a:	e7d7      	b.n	80125fc <_dtoa_r+0x254>
 801264c:	3101      	adds	r1, #1
 801264e:	0052      	lsls	r2, r2, #1
 8012650:	e7d8      	b.n	8012604 <_dtoa_r+0x25c>
 8012652:	bf00      	nop
 8012654:	f3af 8000 	nop.w
 8012658:	636f4361 	.word	0x636f4361
 801265c:	3fd287a7 	.word	0x3fd287a7
 8012660:	8b60c8b3 	.word	0x8b60c8b3
 8012664:	3fc68a28 	.word	0x3fc68a28
 8012668:	509f79fb 	.word	0x509f79fb
 801266c:	3fd34413 	.word	0x3fd34413
 8012670:	08015b95 	.word	0x08015b95
 8012674:	08015bac 	.word	0x08015bac
 8012678:	7ff00000 	.word	0x7ff00000
 801267c:	08015b65 	.word	0x08015b65
 8012680:	3ff80000 	.word	0x3ff80000
 8012684:	08015ca8 	.word	0x08015ca8
 8012688:	08015c04 	.word	0x08015c04
 801268c:	08015b91 	.word	0x08015b91
 8012690:	08015b64 	.word	0x08015b64
 8012694:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012698:	6018      	str	r0, [r3, #0]
 801269a:	9b07      	ldr	r3, [sp, #28]
 801269c:	2b0e      	cmp	r3, #14
 801269e:	f200 80a4 	bhi.w	80127ea <_dtoa_r+0x442>
 80126a2:	2c00      	cmp	r4, #0
 80126a4:	f000 80a1 	beq.w	80127ea <_dtoa_r+0x442>
 80126a8:	2f00      	cmp	r7, #0
 80126aa:	dd33      	ble.n	8012714 <_dtoa_r+0x36c>
 80126ac:	4bad      	ldr	r3, [pc, #692]	@ (8012964 <_dtoa_r+0x5bc>)
 80126ae:	f007 020f 	and.w	r2, r7, #15
 80126b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80126b6:	ed93 7b00 	vldr	d7, [r3]
 80126ba:	05f8      	lsls	r0, r7, #23
 80126bc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80126c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80126c4:	d516      	bpl.n	80126f4 <_dtoa_r+0x34c>
 80126c6:	4ba8      	ldr	r3, [pc, #672]	@ (8012968 <_dtoa_r+0x5c0>)
 80126c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80126cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80126d0:	f7ee f8c4 	bl	800085c <__aeabi_ddiv>
 80126d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80126d8:	f004 040f 	and.w	r4, r4, #15
 80126dc:	2603      	movs	r6, #3
 80126de:	4da2      	ldr	r5, [pc, #648]	@ (8012968 <_dtoa_r+0x5c0>)
 80126e0:	b954      	cbnz	r4, 80126f8 <_dtoa_r+0x350>
 80126e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80126e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80126ea:	f7ee f8b7 	bl	800085c <__aeabi_ddiv>
 80126ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80126f2:	e028      	b.n	8012746 <_dtoa_r+0x39e>
 80126f4:	2602      	movs	r6, #2
 80126f6:	e7f2      	b.n	80126de <_dtoa_r+0x336>
 80126f8:	07e1      	lsls	r1, r4, #31
 80126fa:	d508      	bpl.n	801270e <_dtoa_r+0x366>
 80126fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012700:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012704:	f7ed ff80 	bl	8000608 <__aeabi_dmul>
 8012708:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801270c:	3601      	adds	r6, #1
 801270e:	1064      	asrs	r4, r4, #1
 8012710:	3508      	adds	r5, #8
 8012712:	e7e5      	b.n	80126e0 <_dtoa_r+0x338>
 8012714:	f000 80d2 	beq.w	80128bc <_dtoa_r+0x514>
 8012718:	427c      	negs	r4, r7
 801271a:	4b92      	ldr	r3, [pc, #584]	@ (8012964 <_dtoa_r+0x5bc>)
 801271c:	4d92      	ldr	r5, [pc, #584]	@ (8012968 <_dtoa_r+0x5c0>)
 801271e:	f004 020f 	and.w	r2, r4, #15
 8012722:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012726:	e9d3 2300 	ldrd	r2, r3, [r3]
 801272a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801272e:	f7ed ff6b 	bl	8000608 <__aeabi_dmul>
 8012732:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012736:	1124      	asrs	r4, r4, #4
 8012738:	2300      	movs	r3, #0
 801273a:	2602      	movs	r6, #2
 801273c:	2c00      	cmp	r4, #0
 801273e:	f040 80b2 	bne.w	80128a6 <_dtoa_r+0x4fe>
 8012742:	2b00      	cmp	r3, #0
 8012744:	d1d3      	bne.n	80126ee <_dtoa_r+0x346>
 8012746:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012748:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801274c:	2b00      	cmp	r3, #0
 801274e:	f000 80b7 	beq.w	80128c0 <_dtoa_r+0x518>
 8012752:	4b86      	ldr	r3, [pc, #536]	@ (801296c <_dtoa_r+0x5c4>)
 8012754:	2200      	movs	r2, #0
 8012756:	4620      	mov	r0, r4
 8012758:	4629      	mov	r1, r5
 801275a:	f7ee f9c7 	bl	8000aec <__aeabi_dcmplt>
 801275e:	2800      	cmp	r0, #0
 8012760:	f000 80ae 	beq.w	80128c0 <_dtoa_r+0x518>
 8012764:	9b07      	ldr	r3, [sp, #28]
 8012766:	2b00      	cmp	r3, #0
 8012768:	f000 80aa 	beq.w	80128c0 <_dtoa_r+0x518>
 801276c:	9b00      	ldr	r3, [sp, #0]
 801276e:	2b00      	cmp	r3, #0
 8012770:	dd37      	ble.n	80127e2 <_dtoa_r+0x43a>
 8012772:	1e7b      	subs	r3, r7, #1
 8012774:	9304      	str	r3, [sp, #16]
 8012776:	4620      	mov	r0, r4
 8012778:	4b7d      	ldr	r3, [pc, #500]	@ (8012970 <_dtoa_r+0x5c8>)
 801277a:	2200      	movs	r2, #0
 801277c:	4629      	mov	r1, r5
 801277e:	f7ed ff43 	bl	8000608 <__aeabi_dmul>
 8012782:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012786:	9c00      	ldr	r4, [sp, #0]
 8012788:	3601      	adds	r6, #1
 801278a:	4630      	mov	r0, r6
 801278c:	f7ed fed2 	bl	8000534 <__aeabi_i2d>
 8012790:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012794:	f7ed ff38 	bl	8000608 <__aeabi_dmul>
 8012798:	4b76      	ldr	r3, [pc, #472]	@ (8012974 <_dtoa_r+0x5cc>)
 801279a:	2200      	movs	r2, #0
 801279c:	f7ed fd7e 	bl	800029c <__adddf3>
 80127a0:	4605      	mov	r5, r0
 80127a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80127a6:	2c00      	cmp	r4, #0
 80127a8:	f040 808d 	bne.w	80128c6 <_dtoa_r+0x51e>
 80127ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80127b0:	4b71      	ldr	r3, [pc, #452]	@ (8012978 <_dtoa_r+0x5d0>)
 80127b2:	2200      	movs	r2, #0
 80127b4:	f7ed fd70 	bl	8000298 <__aeabi_dsub>
 80127b8:	4602      	mov	r2, r0
 80127ba:	460b      	mov	r3, r1
 80127bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80127c0:	462a      	mov	r2, r5
 80127c2:	4633      	mov	r3, r6
 80127c4:	f7ee f9b0 	bl	8000b28 <__aeabi_dcmpgt>
 80127c8:	2800      	cmp	r0, #0
 80127ca:	f040 828b 	bne.w	8012ce4 <_dtoa_r+0x93c>
 80127ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80127d2:	462a      	mov	r2, r5
 80127d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80127d8:	f7ee f988 	bl	8000aec <__aeabi_dcmplt>
 80127dc:	2800      	cmp	r0, #0
 80127de:	f040 8128 	bne.w	8012a32 <_dtoa_r+0x68a>
 80127e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80127e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80127ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	f2c0 815a 	blt.w	8012aa6 <_dtoa_r+0x6fe>
 80127f2:	2f0e      	cmp	r7, #14
 80127f4:	f300 8157 	bgt.w	8012aa6 <_dtoa_r+0x6fe>
 80127f8:	4b5a      	ldr	r3, [pc, #360]	@ (8012964 <_dtoa_r+0x5bc>)
 80127fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80127fe:	ed93 7b00 	vldr	d7, [r3]
 8012802:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012804:	2b00      	cmp	r3, #0
 8012806:	ed8d 7b00 	vstr	d7, [sp]
 801280a:	da03      	bge.n	8012814 <_dtoa_r+0x46c>
 801280c:	9b07      	ldr	r3, [sp, #28]
 801280e:	2b00      	cmp	r3, #0
 8012810:	f340 8101 	ble.w	8012a16 <_dtoa_r+0x66e>
 8012814:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012818:	4656      	mov	r6, sl
 801281a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801281e:	4620      	mov	r0, r4
 8012820:	4629      	mov	r1, r5
 8012822:	f7ee f81b 	bl	800085c <__aeabi_ddiv>
 8012826:	f7ee f99f 	bl	8000b68 <__aeabi_d2iz>
 801282a:	4680      	mov	r8, r0
 801282c:	f7ed fe82 	bl	8000534 <__aeabi_i2d>
 8012830:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012834:	f7ed fee8 	bl	8000608 <__aeabi_dmul>
 8012838:	4602      	mov	r2, r0
 801283a:	460b      	mov	r3, r1
 801283c:	4620      	mov	r0, r4
 801283e:	4629      	mov	r1, r5
 8012840:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8012844:	f7ed fd28 	bl	8000298 <__aeabi_dsub>
 8012848:	f806 4b01 	strb.w	r4, [r6], #1
 801284c:	9d07      	ldr	r5, [sp, #28]
 801284e:	eba6 040a 	sub.w	r4, r6, sl
 8012852:	42a5      	cmp	r5, r4
 8012854:	4602      	mov	r2, r0
 8012856:	460b      	mov	r3, r1
 8012858:	f040 8117 	bne.w	8012a8a <_dtoa_r+0x6e2>
 801285c:	f7ed fd1e 	bl	800029c <__adddf3>
 8012860:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012864:	4604      	mov	r4, r0
 8012866:	460d      	mov	r5, r1
 8012868:	f7ee f95e 	bl	8000b28 <__aeabi_dcmpgt>
 801286c:	2800      	cmp	r0, #0
 801286e:	f040 80f9 	bne.w	8012a64 <_dtoa_r+0x6bc>
 8012872:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012876:	4620      	mov	r0, r4
 8012878:	4629      	mov	r1, r5
 801287a:	f7ee f92d 	bl	8000ad8 <__aeabi_dcmpeq>
 801287e:	b118      	cbz	r0, 8012888 <_dtoa_r+0x4e0>
 8012880:	f018 0f01 	tst.w	r8, #1
 8012884:	f040 80ee 	bne.w	8012a64 <_dtoa_r+0x6bc>
 8012888:	4649      	mov	r1, r9
 801288a:	4658      	mov	r0, fp
 801288c:	f000 fbda 	bl	8013044 <_Bfree>
 8012890:	2300      	movs	r3, #0
 8012892:	7033      	strb	r3, [r6, #0]
 8012894:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012896:	3701      	adds	r7, #1
 8012898:	601f      	str	r7, [r3, #0]
 801289a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801289c:	2b00      	cmp	r3, #0
 801289e:	f000 831d 	beq.w	8012edc <_dtoa_r+0xb34>
 80128a2:	601e      	str	r6, [r3, #0]
 80128a4:	e31a      	b.n	8012edc <_dtoa_r+0xb34>
 80128a6:	07e2      	lsls	r2, r4, #31
 80128a8:	d505      	bpl.n	80128b6 <_dtoa_r+0x50e>
 80128aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80128ae:	f7ed feab 	bl	8000608 <__aeabi_dmul>
 80128b2:	3601      	adds	r6, #1
 80128b4:	2301      	movs	r3, #1
 80128b6:	1064      	asrs	r4, r4, #1
 80128b8:	3508      	adds	r5, #8
 80128ba:	e73f      	b.n	801273c <_dtoa_r+0x394>
 80128bc:	2602      	movs	r6, #2
 80128be:	e742      	b.n	8012746 <_dtoa_r+0x39e>
 80128c0:	9c07      	ldr	r4, [sp, #28]
 80128c2:	9704      	str	r7, [sp, #16]
 80128c4:	e761      	b.n	801278a <_dtoa_r+0x3e2>
 80128c6:	4b27      	ldr	r3, [pc, #156]	@ (8012964 <_dtoa_r+0x5bc>)
 80128c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80128ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80128ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80128d2:	4454      	add	r4, sl
 80128d4:	2900      	cmp	r1, #0
 80128d6:	d053      	beq.n	8012980 <_dtoa_r+0x5d8>
 80128d8:	4928      	ldr	r1, [pc, #160]	@ (801297c <_dtoa_r+0x5d4>)
 80128da:	2000      	movs	r0, #0
 80128dc:	f7ed ffbe 	bl	800085c <__aeabi_ddiv>
 80128e0:	4633      	mov	r3, r6
 80128e2:	462a      	mov	r2, r5
 80128e4:	f7ed fcd8 	bl	8000298 <__aeabi_dsub>
 80128e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80128ec:	4656      	mov	r6, sl
 80128ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80128f2:	f7ee f939 	bl	8000b68 <__aeabi_d2iz>
 80128f6:	4605      	mov	r5, r0
 80128f8:	f7ed fe1c 	bl	8000534 <__aeabi_i2d>
 80128fc:	4602      	mov	r2, r0
 80128fe:	460b      	mov	r3, r1
 8012900:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012904:	f7ed fcc8 	bl	8000298 <__aeabi_dsub>
 8012908:	3530      	adds	r5, #48	@ 0x30
 801290a:	4602      	mov	r2, r0
 801290c:	460b      	mov	r3, r1
 801290e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012912:	f806 5b01 	strb.w	r5, [r6], #1
 8012916:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801291a:	f7ee f8e7 	bl	8000aec <__aeabi_dcmplt>
 801291e:	2800      	cmp	r0, #0
 8012920:	d171      	bne.n	8012a06 <_dtoa_r+0x65e>
 8012922:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012926:	4911      	ldr	r1, [pc, #68]	@ (801296c <_dtoa_r+0x5c4>)
 8012928:	2000      	movs	r0, #0
 801292a:	f7ed fcb5 	bl	8000298 <__aeabi_dsub>
 801292e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012932:	f7ee f8db 	bl	8000aec <__aeabi_dcmplt>
 8012936:	2800      	cmp	r0, #0
 8012938:	f040 8095 	bne.w	8012a66 <_dtoa_r+0x6be>
 801293c:	42a6      	cmp	r6, r4
 801293e:	f43f af50 	beq.w	80127e2 <_dtoa_r+0x43a>
 8012942:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012946:	4b0a      	ldr	r3, [pc, #40]	@ (8012970 <_dtoa_r+0x5c8>)
 8012948:	2200      	movs	r2, #0
 801294a:	f7ed fe5d 	bl	8000608 <__aeabi_dmul>
 801294e:	4b08      	ldr	r3, [pc, #32]	@ (8012970 <_dtoa_r+0x5c8>)
 8012950:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012954:	2200      	movs	r2, #0
 8012956:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801295a:	f7ed fe55 	bl	8000608 <__aeabi_dmul>
 801295e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012962:	e7c4      	b.n	80128ee <_dtoa_r+0x546>
 8012964:	08015ca8 	.word	0x08015ca8
 8012968:	08015c80 	.word	0x08015c80
 801296c:	3ff00000 	.word	0x3ff00000
 8012970:	40240000 	.word	0x40240000
 8012974:	401c0000 	.word	0x401c0000
 8012978:	40140000 	.word	0x40140000
 801297c:	3fe00000 	.word	0x3fe00000
 8012980:	4631      	mov	r1, r6
 8012982:	4628      	mov	r0, r5
 8012984:	f7ed fe40 	bl	8000608 <__aeabi_dmul>
 8012988:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801298c:	9415      	str	r4, [sp, #84]	@ 0x54
 801298e:	4656      	mov	r6, sl
 8012990:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012994:	f7ee f8e8 	bl	8000b68 <__aeabi_d2iz>
 8012998:	4605      	mov	r5, r0
 801299a:	f7ed fdcb 	bl	8000534 <__aeabi_i2d>
 801299e:	4602      	mov	r2, r0
 80129a0:	460b      	mov	r3, r1
 80129a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80129a6:	f7ed fc77 	bl	8000298 <__aeabi_dsub>
 80129aa:	3530      	adds	r5, #48	@ 0x30
 80129ac:	f806 5b01 	strb.w	r5, [r6], #1
 80129b0:	4602      	mov	r2, r0
 80129b2:	460b      	mov	r3, r1
 80129b4:	42a6      	cmp	r6, r4
 80129b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80129ba:	f04f 0200 	mov.w	r2, #0
 80129be:	d124      	bne.n	8012a0a <_dtoa_r+0x662>
 80129c0:	4bac      	ldr	r3, [pc, #688]	@ (8012c74 <_dtoa_r+0x8cc>)
 80129c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80129c6:	f7ed fc69 	bl	800029c <__adddf3>
 80129ca:	4602      	mov	r2, r0
 80129cc:	460b      	mov	r3, r1
 80129ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80129d2:	f7ee f8a9 	bl	8000b28 <__aeabi_dcmpgt>
 80129d6:	2800      	cmp	r0, #0
 80129d8:	d145      	bne.n	8012a66 <_dtoa_r+0x6be>
 80129da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80129de:	49a5      	ldr	r1, [pc, #660]	@ (8012c74 <_dtoa_r+0x8cc>)
 80129e0:	2000      	movs	r0, #0
 80129e2:	f7ed fc59 	bl	8000298 <__aeabi_dsub>
 80129e6:	4602      	mov	r2, r0
 80129e8:	460b      	mov	r3, r1
 80129ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80129ee:	f7ee f87d 	bl	8000aec <__aeabi_dcmplt>
 80129f2:	2800      	cmp	r0, #0
 80129f4:	f43f aef5 	beq.w	80127e2 <_dtoa_r+0x43a>
 80129f8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80129fa:	1e73      	subs	r3, r6, #1
 80129fc:	9315      	str	r3, [sp, #84]	@ 0x54
 80129fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012a02:	2b30      	cmp	r3, #48	@ 0x30
 8012a04:	d0f8      	beq.n	80129f8 <_dtoa_r+0x650>
 8012a06:	9f04      	ldr	r7, [sp, #16]
 8012a08:	e73e      	b.n	8012888 <_dtoa_r+0x4e0>
 8012a0a:	4b9b      	ldr	r3, [pc, #620]	@ (8012c78 <_dtoa_r+0x8d0>)
 8012a0c:	f7ed fdfc 	bl	8000608 <__aeabi_dmul>
 8012a10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012a14:	e7bc      	b.n	8012990 <_dtoa_r+0x5e8>
 8012a16:	d10c      	bne.n	8012a32 <_dtoa_r+0x68a>
 8012a18:	4b98      	ldr	r3, [pc, #608]	@ (8012c7c <_dtoa_r+0x8d4>)
 8012a1a:	2200      	movs	r2, #0
 8012a1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a20:	f7ed fdf2 	bl	8000608 <__aeabi_dmul>
 8012a24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012a28:	f7ee f874 	bl	8000b14 <__aeabi_dcmpge>
 8012a2c:	2800      	cmp	r0, #0
 8012a2e:	f000 8157 	beq.w	8012ce0 <_dtoa_r+0x938>
 8012a32:	2400      	movs	r4, #0
 8012a34:	4625      	mov	r5, r4
 8012a36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012a38:	43db      	mvns	r3, r3
 8012a3a:	9304      	str	r3, [sp, #16]
 8012a3c:	4656      	mov	r6, sl
 8012a3e:	2700      	movs	r7, #0
 8012a40:	4621      	mov	r1, r4
 8012a42:	4658      	mov	r0, fp
 8012a44:	f000 fafe 	bl	8013044 <_Bfree>
 8012a48:	2d00      	cmp	r5, #0
 8012a4a:	d0dc      	beq.n	8012a06 <_dtoa_r+0x65e>
 8012a4c:	b12f      	cbz	r7, 8012a5a <_dtoa_r+0x6b2>
 8012a4e:	42af      	cmp	r7, r5
 8012a50:	d003      	beq.n	8012a5a <_dtoa_r+0x6b2>
 8012a52:	4639      	mov	r1, r7
 8012a54:	4658      	mov	r0, fp
 8012a56:	f000 faf5 	bl	8013044 <_Bfree>
 8012a5a:	4629      	mov	r1, r5
 8012a5c:	4658      	mov	r0, fp
 8012a5e:	f000 faf1 	bl	8013044 <_Bfree>
 8012a62:	e7d0      	b.n	8012a06 <_dtoa_r+0x65e>
 8012a64:	9704      	str	r7, [sp, #16]
 8012a66:	4633      	mov	r3, r6
 8012a68:	461e      	mov	r6, r3
 8012a6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012a6e:	2a39      	cmp	r2, #57	@ 0x39
 8012a70:	d107      	bne.n	8012a82 <_dtoa_r+0x6da>
 8012a72:	459a      	cmp	sl, r3
 8012a74:	d1f8      	bne.n	8012a68 <_dtoa_r+0x6c0>
 8012a76:	9a04      	ldr	r2, [sp, #16]
 8012a78:	3201      	adds	r2, #1
 8012a7a:	9204      	str	r2, [sp, #16]
 8012a7c:	2230      	movs	r2, #48	@ 0x30
 8012a7e:	f88a 2000 	strb.w	r2, [sl]
 8012a82:	781a      	ldrb	r2, [r3, #0]
 8012a84:	3201      	adds	r2, #1
 8012a86:	701a      	strb	r2, [r3, #0]
 8012a88:	e7bd      	b.n	8012a06 <_dtoa_r+0x65e>
 8012a8a:	4b7b      	ldr	r3, [pc, #492]	@ (8012c78 <_dtoa_r+0x8d0>)
 8012a8c:	2200      	movs	r2, #0
 8012a8e:	f7ed fdbb 	bl	8000608 <__aeabi_dmul>
 8012a92:	2200      	movs	r2, #0
 8012a94:	2300      	movs	r3, #0
 8012a96:	4604      	mov	r4, r0
 8012a98:	460d      	mov	r5, r1
 8012a9a:	f7ee f81d 	bl	8000ad8 <__aeabi_dcmpeq>
 8012a9e:	2800      	cmp	r0, #0
 8012aa0:	f43f aebb 	beq.w	801281a <_dtoa_r+0x472>
 8012aa4:	e6f0      	b.n	8012888 <_dtoa_r+0x4e0>
 8012aa6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012aa8:	2a00      	cmp	r2, #0
 8012aaa:	f000 80db 	beq.w	8012c64 <_dtoa_r+0x8bc>
 8012aae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012ab0:	2a01      	cmp	r2, #1
 8012ab2:	f300 80bf 	bgt.w	8012c34 <_dtoa_r+0x88c>
 8012ab6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8012ab8:	2a00      	cmp	r2, #0
 8012aba:	f000 80b7 	beq.w	8012c2c <_dtoa_r+0x884>
 8012abe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8012ac2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012ac4:	4646      	mov	r6, r8
 8012ac6:	9a08      	ldr	r2, [sp, #32]
 8012ac8:	2101      	movs	r1, #1
 8012aca:	441a      	add	r2, r3
 8012acc:	4658      	mov	r0, fp
 8012ace:	4498      	add	r8, r3
 8012ad0:	9208      	str	r2, [sp, #32]
 8012ad2:	f000 fb6b 	bl	80131ac <__i2b>
 8012ad6:	4605      	mov	r5, r0
 8012ad8:	b15e      	cbz	r6, 8012af2 <_dtoa_r+0x74a>
 8012ada:	9b08      	ldr	r3, [sp, #32]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	dd08      	ble.n	8012af2 <_dtoa_r+0x74a>
 8012ae0:	42b3      	cmp	r3, r6
 8012ae2:	9a08      	ldr	r2, [sp, #32]
 8012ae4:	bfa8      	it	ge
 8012ae6:	4633      	movge	r3, r6
 8012ae8:	eba8 0803 	sub.w	r8, r8, r3
 8012aec:	1af6      	subs	r6, r6, r3
 8012aee:	1ad3      	subs	r3, r2, r3
 8012af0:	9308      	str	r3, [sp, #32]
 8012af2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012af4:	b1f3      	cbz	r3, 8012b34 <_dtoa_r+0x78c>
 8012af6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	f000 80b7 	beq.w	8012c6c <_dtoa_r+0x8c4>
 8012afe:	b18c      	cbz	r4, 8012b24 <_dtoa_r+0x77c>
 8012b00:	4629      	mov	r1, r5
 8012b02:	4622      	mov	r2, r4
 8012b04:	4658      	mov	r0, fp
 8012b06:	f000 fc11 	bl	801332c <__pow5mult>
 8012b0a:	464a      	mov	r2, r9
 8012b0c:	4601      	mov	r1, r0
 8012b0e:	4605      	mov	r5, r0
 8012b10:	4658      	mov	r0, fp
 8012b12:	f000 fb61 	bl	80131d8 <__multiply>
 8012b16:	4649      	mov	r1, r9
 8012b18:	9004      	str	r0, [sp, #16]
 8012b1a:	4658      	mov	r0, fp
 8012b1c:	f000 fa92 	bl	8013044 <_Bfree>
 8012b20:	9b04      	ldr	r3, [sp, #16]
 8012b22:	4699      	mov	r9, r3
 8012b24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012b26:	1b1a      	subs	r2, r3, r4
 8012b28:	d004      	beq.n	8012b34 <_dtoa_r+0x78c>
 8012b2a:	4649      	mov	r1, r9
 8012b2c:	4658      	mov	r0, fp
 8012b2e:	f000 fbfd 	bl	801332c <__pow5mult>
 8012b32:	4681      	mov	r9, r0
 8012b34:	2101      	movs	r1, #1
 8012b36:	4658      	mov	r0, fp
 8012b38:	f000 fb38 	bl	80131ac <__i2b>
 8012b3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012b3e:	4604      	mov	r4, r0
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	f000 81cf 	beq.w	8012ee4 <_dtoa_r+0xb3c>
 8012b46:	461a      	mov	r2, r3
 8012b48:	4601      	mov	r1, r0
 8012b4a:	4658      	mov	r0, fp
 8012b4c:	f000 fbee 	bl	801332c <__pow5mult>
 8012b50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b52:	2b01      	cmp	r3, #1
 8012b54:	4604      	mov	r4, r0
 8012b56:	f300 8095 	bgt.w	8012c84 <_dtoa_r+0x8dc>
 8012b5a:	9b02      	ldr	r3, [sp, #8]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	f040 8087 	bne.w	8012c70 <_dtoa_r+0x8c8>
 8012b62:	9b03      	ldr	r3, [sp, #12]
 8012b64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	f040 8089 	bne.w	8012c80 <_dtoa_r+0x8d8>
 8012b6e:	9b03      	ldr	r3, [sp, #12]
 8012b70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012b74:	0d1b      	lsrs	r3, r3, #20
 8012b76:	051b      	lsls	r3, r3, #20
 8012b78:	b12b      	cbz	r3, 8012b86 <_dtoa_r+0x7de>
 8012b7a:	9b08      	ldr	r3, [sp, #32]
 8012b7c:	3301      	adds	r3, #1
 8012b7e:	9308      	str	r3, [sp, #32]
 8012b80:	f108 0801 	add.w	r8, r8, #1
 8012b84:	2301      	movs	r3, #1
 8012b86:	930a      	str	r3, [sp, #40]	@ 0x28
 8012b88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	f000 81b0 	beq.w	8012ef0 <_dtoa_r+0xb48>
 8012b90:	6923      	ldr	r3, [r4, #16]
 8012b92:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012b96:	6918      	ldr	r0, [r3, #16]
 8012b98:	f000 fabc 	bl	8013114 <__hi0bits>
 8012b9c:	f1c0 0020 	rsb	r0, r0, #32
 8012ba0:	9b08      	ldr	r3, [sp, #32]
 8012ba2:	4418      	add	r0, r3
 8012ba4:	f010 001f 	ands.w	r0, r0, #31
 8012ba8:	d077      	beq.n	8012c9a <_dtoa_r+0x8f2>
 8012baa:	f1c0 0320 	rsb	r3, r0, #32
 8012bae:	2b04      	cmp	r3, #4
 8012bb0:	dd6b      	ble.n	8012c8a <_dtoa_r+0x8e2>
 8012bb2:	9b08      	ldr	r3, [sp, #32]
 8012bb4:	f1c0 001c 	rsb	r0, r0, #28
 8012bb8:	4403      	add	r3, r0
 8012bba:	4480      	add	r8, r0
 8012bbc:	4406      	add	r6, r0
 8012bbe:	9308      	str	r3, [sp, #32]
 8012bc0:	f1b8 0f00 	cmp.w	r8, #0
 8012bc4:	dd05      	ble.n	8012bd2 <_dtoa_r+0x82a>
 8012bc6:	4649      	mov	r1, r9
 8012bc8:	4642      	mov	r2, r8
 8012bca:	4658      	mov	r0, fp
 8012bcc:	f000 fc08 	bl	80133e0 <__lshift>
 8012bd0:	4681      	mov	r9, r0
 8012bd2:	9b08      	ldr	r3, [sp, #32]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	dd05      	ble.n	8012be4 <_dtoa_r+0x83c>
 8012bd8:	4621      	mov	r1, r4
 8012bda:	461a      	mov	r2, r3
 8012bdc:	4658      	mov	r0, fp
 8012bde:	f000 fbff 	bl	80133e0 <__lshift>
 8012be2:	4604      	mov	r4, r0
 8012be4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d059      	beq.n	8012c9e <_dtoa_r+0x8f6>
 8012bea:	4621      	mov	r1, r4
 8012bec:	4648      	mov	r0, r9
 8012bee:	f000 fc63 	bl	80134b8 <__mcmp>
 8012bf2:	2800      	cmp	r0, #0
 8012bf4:	da53      	bge.n	8012c9e <_dtoa_r+0x8f6>
 8012bf6:	1e7b      	subs	r3, r7, #1
 8012bf8:	9304      	str	r3, [sp, #16]
 8012bfa:	4649      	mov	r1, r9
 8012bfc:	2300      	movs	r3, #0
 8012bfe:	220a      	movs	r2, #10
 8012c00:	4658      	mov	r0, fp
 8012c02:	f000 fa41 	bl	8013088 <__multadd>
 8012c06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012c08:	4681      	mov	r9, r0
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	f000 8172 	beq.w	8012ef4 <_dtoa_r+0xb4c>
 8012c10:	2300      	movs	r3, #0
 8012c12:	4629      	mov	r1, r5
 8012c14:	220a      	movs	r2, #10
 8012c16:	4658      	mov	r0, fp
 8012c18:	f000 fa36 	bl	8013088 <__multadd>
 8012c1c:	9b00      	ldr	r3, [sp, #0]
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	4605      	mov	r5, r0
 8012c22:	dc67      	bgt.n	8012cf4 <_dtoa_r+0x94c>
 8012c24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c26:	2b02      	cmp	r3, #2
 8012c28:	dc41      	bgt.n	8012cae <_dtoa_r+0x906>
 8012c2a:	e063      	b.n	8012cf4 <_dtoa_r+0x94c>
 8012c2c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012c2e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8012c32:	e746      	b.n	8012ac2 <_dtoa_r+0x71a>
 8012c34:	9b07      	ldr	r3, [sp, #28]
 8012c36:	1e5c      	subs	r4, r3, #1
 8012c38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012c3a:	42a3      	cmp	r3, r4
 8012c3c:	bfbf      	itttt	lt
 8012c3e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8012c40:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8012c42:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8012c44:	1ae3      	sublt	r3, r4, r3
 8012c46:	bfb4      	ite	lt
 8012c48:	18d2      	addlt	r2, r2, r3
 8012c4a:	1b1c      	subge	r4, r3, r4
 8012c4c:	9b07      	ldr	r3, [sp, #28]
 8012c4e:	bfbc      	itt	lt
 8012c50:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8012c52:	2400      	movlt	r4, #0
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	bfb5      	itete	lt
 8012c58:	eba8 0603 	sublt.w	r6, r8, r3
 8012c5c:	9b07      	ldrge	r3, [sp, #28]
 8012c5e:	2300      	movlt	r3, #0
 8012c60:	4646      	movge	r6, r8
 8012c62:	e730      	b.n	8012ac6 <_dtoa_r+0x71e>
 8012c64:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012c66:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8012c68:	4646      	mov	r6, r8
 8012c6a:	e735      	b.n	8012ad8 <_dtoa_r+0x730>
 8012c6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012c6e:	e75c      	b.n	8012b2a <_dtoa_r+0x782>
 8012c70:	2300      	movs	r3, #0
 8012c72:	e788      	b.n	8012b86 <_dtoa_r+0x7de>
 8012c74:	3fe00000 	.word	0x3fe00000
 8012c78:	40240000 	.word	0x40240000
 8012c7c:	40140000 	.word	0x40140000
 8012c80:	9b02      	ldr	r3, [sp, #8]
 8012c82:	e780      	b.n	8012b86 <_dtoa_r+0x7de>
 8012c84:	2300      	movs	r3, #0
 8012c86:	930a      	str	r3, [sp, #40]	@ 0x28
 8012c88:	e782      	b.n	8012b90 <_dtoa_r+0x7e8>
 8012c8a:	d099      	beq.n	8012bc0 <_dtoa_r+0x818>
 8012c8c:	9a08      	ldr	r2, [sp, #32]
 8012c8e:	331c      	adds	r3, #28
 8012c90:	441a      	add	r2, r3
 8012c92:	4498      	add	r8, r3
 8012c94:	441e      	add	r6, r3
 8012c96:	9208      	str	r2, [sp, #32]
 8012c98:	e792      	b.n	8012bc0 <_dtoa_r+0x818>
 8012c9a:	4603      	mov	r3, r0
 8012c9c:	e7f6      	b.n	8012c8c <_dtoa_r+0x8e4>
 8012c9e:	9b07      	ldr	r3, [sp, #28]
 8012ca0:	9704      	str	r7, [sp, #16]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	dc20      	bgt.n	8012ce8 <_dtoa_r+0x940>
 8012ca6:	9300      	str	r3, [sp, #0]
 8012ca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012caa:	2b02      	cmp	r3, #2
 8012cac:	dd1e      	ble.n	8012cec <_dtoa_r+0x944>
 8012cae:	9b00      	ldr	r3, [sp, #0]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	f47f aec0 	bne.w	8012a36 <_dtoa_r+0x68e>
 8012cb6:	4621      	mov	r1, r4
 8012cb8:	2205      	movs	r2, #5
 8012cba:	4658      	mov	r0, fp
 8012cbc:	f000 f9e4 	bl	8013088 <__multadd>
 8012cc0:	4601      	mov	r1, r0
 8012cc2:	4604      	mov	r4, r0
 8012cc4:	4648      	mov	r0, r9
 8012cc6:	f000 fbf7 	bl	80134b8 <__mcmp>
 8012cca:	2800      	cmp	r0, #0
 8012ccc:	f77f aeb3 	ble.w	8012a36 <_dtoa_r+0x68e>
 8012cd0:	4656      	mov	r6, sl
 8012cd2:	2331      	movs	r3, #49	@ 0x31
 8012cd4:	f806 3b01 	strb.w	r3, [r6], #1
 8012cd8:	9b04      	ldr	r3, [sp, #16]
 8012cda:	3301      	adds	r3, #1
 8012cdc:	9304      	str	r3, [sp, #16]
 8012cde:	e6ae      	b.n	8012a3e <_dtoa_r+0x696>
 8012ce0:	9c07      	ldr	r4, [sp, #28]
 8012ce2:	9704      	str	r7, [sp, #16]
 8012ce4:	4625      	mov	r5, r4
 8012ce6:	e7f3      	b.n	8012cd0 <_dtoa_r+0x928>
 8012ce8:	9b07      	ldr	r3, [sp, #28]
 8012cea:	9300      	str	r3, [sp, #0]
 8012cec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	f000 8104 	beq.w	8012efc <_dtoa_r+0xb54>
 8012cf4:	2e00      	cmp	r6, #0
 8012cf6:	dd05      	ble.n	8012d04 <_dtoa_r+0x95c>
 8012cf8:	4629      	mov	r1, r5
 8012cfa:	4632      	mov	r2, r6
 8012cfc:	4658      	mov	r0, fp
 8012cfe:	f000 fb6f 	bl	80133e0 <__lshift>
 8012d02:	4605      	mov	r5, r0
 8012d04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d05a      	beq.n	8012dc0 <_dtoa_r+0xa18>
 8012d0a:	6869      	ldr	r1, [r5, #4]
 8012d0c:	4658      	mov	r0, fp
 8012d0e:	f000 f959 	bl	8012fc4 <_Balloc>
 8012d12:	4606      	mov	r6, r0
 8012d14:	b928      	cbnz	r0, 8012d22 <_dtoa_r+0x97a>
 8012d16:	4b84      	ldr	r3, [pc, #528]	@ (8012f28 <_dtoa_r+0xb80>)
 8012d18:	4602      	mov	r2, r0
 8012d1a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012d1e:	f7ff bb5a 	b.w	80123d6 <_dtoa_r+0x2e>
 8012d22:	692a      	ldr	r2, [r5, #16]
 8012d24:	3202      	adds	r2, #2
 8012d26:	0092      	lsls	r2, r2, #2
 8012d28:	f105 010c 	add.w	r1, r5, #12
 8012d2c:	300c      	adds	r0, #12
 8012d2e:	f000 fee9 	bl	8013b04 <memcpy>
 8012d32:	2201      	movs	r2, #1
 8012d34:	4631      	mov	r1, r6
 8012d36:	4658      	mov	r0, fp
 8012d38:	f000 fb52 	bl	80133e0 <__lshift>
 8012d3c:	f10a 0301 	add.w	r3, sl, #1
 8012d40:	9307      	str	r3, [sp, #28]
 8012d42:	9b00      	ldr	r3, [sp, #0]
 8012d44:	4453      	add	r3, sl
 8012d46:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012d48:	9b02      	ldr	r3, [sp, #8]
 8012d4a:	f003 0301 	and.w	r3, r3, #1
 8012d4e:	462f      	mov	r7, r5
 8012d50:	930a      	str	r3, [sp, #40]	@ 0x28
 8012d52:	4605      	mov	r5, r0
 8012d54:	9b07      	ldr	r3, [sp, #28]
 8012d56:	4621      	mov	r1, r4
 8012d58:	3b01      	subs	r3, #1
 8012d5a:	4648      	mov	r0, r9
 8012d5c:	9300      	str	r3, [sp, #0]
 8012d5e:	f7ff fa98 	bl	8012292 <quorem>
 8012d62:	4639      	mov	r1, r7
 8012d64:	9002      	str	r0, [sp, #8]
 8012d66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012d6a:	4648      	mov	r0, r9
 8012d6c:	f000 fba4 	bl	80134b8 <__mcmp>
 8012d70:	462a      	mov	r2, r5
 8012d72:	9008      	str	r0, [sp, #32]
 8012d74:	4621      	mov	r1, r4
 8012d76:	4658      	mov	r0, fp
 8012d78:	f000 fbba 	bl	80134f0 <__mdiff>
 8012d7c:	68c2      	ldr	r2, [r0, #12]
 8012d7e:	4606      	mov	r6, r0
 8012d80:	bb02      	cbnz	r2, 8012dc4 <_dtoa_r+0xa1c>
 8012d82:	4601      	mov	r1, r0
 8012d84:	4648      	mov	r0, r9
 8012d86:	f000 fb97 	bl	80134b8 <__mcmp>
 8012d8a:	4602      	mov	r2, r0
 8012d8c:	4631      	mov	r1, r6
 8012d8e:	4658      	mov	r0, fp
 8012d90:	920e      	str	r2, [sp, #56]	@ 0x38
 8012d92:	f000 f957 	bl	8013044 <_Bfree>
 8012d96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012d9a:	9e07      	ldr	r6, [sp, #28]
 8012d9c:	ea43 0102 	orr.w	r1, r3, r2
 8012da0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012da2:	4319      	orrs	r1, r3
 8012da4:	d110      	bne.n	8012dc8 <_dtoa_r+0xa20>
 8012da6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012daa:	d029      	beq.n	8012e00 <_dtoa_r+0xa58>
 8012dac:	9b08      	ldr	r3, [sp, #32]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	dd02      	ble.n	8012db8 <_dtoa_r+0xa10>
 8012db2:	9b02      	ldr	r3, [sp, #8]
 8012db4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8012db8:	9b00      	ldr	r3, [sp, #0]
 8012dba:	f883 8000 	strb.w	r8, [r3]
 8012dbe:	e63f      	b.n	8012a40 <_dtoa_r+0x698>
 8012dc0:	4628      	mov	r0, r5
 8012dc2:	e7bb      	b.n	8012d3c <_dtoa_r+0x994>
 8012dc4:	2201      	movs	r2, #1
 8012dc6:	e7e1      	b.n	8012d8c <_dtoa_r+0x9e4>
 8012dc8:	9b08      	ldr	r3, [sp, #32]
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	db04      	blt.n	8012dd8 <_dtoa_r+0xa30>
 8012dce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012dd0:	430b      	orrs	r3, r1
 8012dd2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012dd4:	430b      	orrs	r3, r1
 8012dd6:	d120      	bne.n	8012e1a <_dtoa_r+0xa72>
 8012dd8:	2a00      	cmp	r2, #0
 8012dda:	dded      	ble.n	8012db8 <_dtoa_r+0xa10>
 8012ddc:	4649      	mov	r1, r9
 8012dde:	2201      	movs	r2, #1
 8012de0:	4658      	mov	r0, fp
 8012de2:	f000 fafd 	bl	80133e0 <__lshift>
 8012de6:	4621      	mov	r1, r4
 8012de8:	4681      	mov	r9, r0
 8012dea:	f000 fb65 	bl	80134b8 <__mcmp>
 8012dee:	2800      	cmp	r0, #0
 8012df0:	dc03      	bgt.n	8012dfa <_dtoa_r+0xa52>
 8012df2:	d1e1      	bne.n	8012db8 <_dtoa_r+0xa10>
 8012df4:	f018 0f01 	tst.w	r8, #1
 8012df8:	d0de      	beq.n	8012db8 <_dtoa_r+0xa10>
 8012dfa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012dfe:	d1d8      	bne.n	8012db2 <_dtoa_r+0xa0a>
 8012e00:	9a00      	ldr	r2, [sp, #0]
 8012e02:	2339      	movs	r3, #57	@ 0x39
 8012e04:	7013      	strb	r3, [r2, #0]
 8012e06:	4633      	mov	r3, r6
 8012e08:	461e      	mov	r6, r3
 8012e0a:	3b01      	subs	r3, #1
 8012e0c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012e10:	2a39      	cmp	r2, #57	@ 0x39
 8012e12:	d052      	beq.n	8012eba <_dtoa_r+0xb12>
 8012e14:	3201      	adds	r2, #1
 8012e16:	701a      	strb	r2, [r3, #0]
 8012e18:	e612      	b.n	8012a40 <_dtoa_r+0x698>
 8012e1a:	2a00      	cmp	r2, #0
 8012e1c:	dd07      	ble.n	8012e2e <_dtoa_r+0xa86>
 8012e1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012e22:	d0ed      	beq.n	8012e00 <_dtoa_r+0xa58>
 8012e24:	9a00      	ldr	r2, [sp, #0]
 8012e26:	f108 0301 	add.w	r3, r8, #1
 8012e2a:	7013      	strb	r3, [r2, #0]
 8012e2c:	e608      	b.n	8012a40 <_dtoa_r+0x698>
 8012e2e:	9b07      	ldr	r3, [sp, #28]
 8012e30:	9a07      	ldr	r2, [sp, #28]
 8012e32:	f803 8c01 	strb.w	r8, [r3, #-1]
 8012e36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012e38:	4293      	cmp	r3, r2
 8012e3a:	d028      	beq.n	8012e8e <_dtoa_r+0xae6>
 8012e3c:	4649      	mov	r1, r9
 8012e3e:	2300      	movs	r3, #0
 8012e40:	220a      	movs	r2, #10
 8012e42:	4658      	mov	r0, fp
 8012e44:	f000 f920 	bl	8013088 <__multadd>
 8012e48:	42af      	cmp	r7, r5
 8012e4a:	4681      	mov	r9, r0
 8012e4c:	f04f 0300 	mov.w	r3, #0
 8012e50:	f04f 020a 	mov.w	r2, #10
 8012e54:	4639      	mov	r1, r7
 8012e56:	4658      	mov	r0, fp
 8012e58:	d107      	bne.n	8012e6a <_dtoa_r+0xac2>
 8012e5a:	f000 f915 	bl	8013088 <__multadd>
 8012e5e:	4607      	mov	r7, r0
 8012e60:	4605      	mov	r5, r0
 8012e62:	9b07      	ldr	r3, [sp, #28]
 8012e64:	3301      	adds	r3, #1
 8012e66:	9307      	str	r3, [sp, #28]
 8012e68:	e774      	b.n	8012d54 <_dtoa_r+0x9ac>
 8012e6a:	f000 f90d 	bl	8013088 <__multadd>
 8012e6e:	4629      	mov	r1, r5
 8012e70:	4607      	mov	r7, r0
 8012e72:	2300      	movs	r3, #0
 8012e74:	220a      	movs	r2, #10
 8012e76:	4658      	mov	r0, fp
 8012e78:	f000 f906 	bl	8013088 <__multadd>
 8012e7c:	4605      	mov	r5, r0
 8012e7e:	e7f0      	b.n	8012e62 <_dtoa_r+0xaba>
 8012e80:	9b00      	ldr	r3, [sp, #0]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	bfcc      	ite	gt
 8012e86:	461e      	movgt	r6, r3
 8012e88:	2601      	movle	r6, #1
 8012e8a:	4456      	add	r6, sl
 8012e8c:	2700      	movs	r7, #0
 8012e8e:	4649      	mov	r1, r9
 8012e90:	2201      	movs	r2, #1
 8012e92:	4658      	mov	r0, fp
 8012e94:	f000 faa4 	bl	80133e0 <__lshift>
 8012e98:	4621      	mov	r1, r4
 8012e9a:	4681      	mov	r9, r0
 8012e9c:	f000 fb0c 	bl	80134b8 <__mcmp>
 8012ea0:	2800      	cmp	r0, #0
 8012ea2:	dcb0      	bgt.n	8012e06 <_dtoa_r+0xa5e>
 8012ea4:	d102      	bne.n	8012eac <_dtoa_r+0xb04>
 8012ea6:	f018 0f01 	tst.w	r8, #1
 8012eaa:	d1ac      	bne.n	8012e06 <_dtoa_r+0xa5e>
 8012eac:	4633      	mov	r3, r6
 8012eae:	461e      	mov	r6, r3
 8012eb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012eb4:	2a30      	cmp	r2, #48	@ 0x30
 8012eb6:	d0fa      	beq.n	8012eae <_dtoa_r+0xb06>
 8012eb8:	e5c2      	b.n	8012a40 <_dtoa_r+0x698>
 8012eba:	459a      	cmp	sl, r3
 8012ebc:	d1a4      	bne.n	8012e08 <_dtoa_r+0xa60>
 8012ebe:	9b04      	ldr	r3, [sp, #16]
 8012ec0:	3301      	adds	r3, #1
 8012ec2:	9304      	str	r3, [sp, #16]
 8012ec4:	2331      	movs	r3, #49	@ 0x31
 8012ec6:	f88a 3000 	strb.w	r3, [sl]
 8012eca:	e5b9      	b.n	8012a40 <_dtoa_r+0x698>
 8012ecc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012ece:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8012f2c <_dtoa_r+0xb84>
 8012ed2:	b11b      	cbz	r3, 8012edc <_dtoa_r+0xb34>
 8012ed4:	f10a 0308 	add.w	r3, sl, #8
 8012ed8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012eda:	6013      	str	r3, [r2, #0]
 8012edc:	4650      	mov	r0, sl
 8012ede:	b019      	add	sp, #100	@ 0x64
 8012ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ee6:	2b01      	cmp	r3, #1
 8012ee8:	f77f ae37 	ble.w	8012b5a <_dtoa_r+0x7b2>
 8012eec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012eee:	930a      	str	r3, [sp, #40]	@ 0x28
 8012ef0:	2001      	movs	r0, #1
 8012ef2:	e655      	b.n	8012ba0 <_dtoa_r+0x7f8>
 8012ef4:	9b00      	ldr	r3, [sp, #0]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	f77f aed6 	ble.w	8012ca8 <_dtoa_r+0x900>
 8012efc:	4656      	mov	r6, sl
 8012efe:	4621      	mov	r1, r4
 8012f00:	4648      	mov	r0, r9
 8012f02:	f7ff f9c6 	bl	8012292 <quorem>
 8012f06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012f0a:	f806 8b01 	strb.w	r8, [r6], #1
 8012f0e:	9b00      	ldr	r3, [sp, #0]
 8012f10:	eba6 020a 	sub.w	r2, r6, sl
 8012f14:	4293      	cmp	r3, r2
 8012f16:	ddb3      	ble.n	8012e80 <_dtoa_r+0xad8>
 8012f18:	4649      	mov	r1, r9
 8012f1a:	2300      	movs	r3, #0
 8012f1c:	220a      	movs	r2, #10
 8012f1e:	4658      	mov	r0, fp
 8012f20:	f000 f8b2 	bl	8013088 <__multadd>
 8012f24:	4681      	mov	r9, r0
 8012f26:	e7ea      	b.n	8012efe <_dtoa_r+0xb56>
 8012f28:	08015c04 	.word	0x08015c04
 8012f2c:	08015b88 	.word	0x08015b88

08012f30 <_free_r>:
 8012f30:	b538      	push	{r3, r4, r5, lr}
 8012f32:	4605      	mov	r5, r0
 8012f34:	2900      	cmp	r1, #0
 8012f36:	d041      	beq.n	8012fbc <_free_r+0x8c>
 8012f38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012f3c:	1f0c      	subs	r4, r1, #4
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	bfb8      	it	lt
 8012f42:	18e4      	addlt	r4, r4, r3
 8012f44:	f7fe fb40 	bl	80115c8 <__malloc_lock>
 8012f48:	4a1d      	ldr	r2, [pc, #116]	@ (8012fc0 <_free_r+0x90>)
 8012f4a:	6813      	ldr	r3, [r2, #0]
 8012f4c:	b933      	cbnz	r3, 8012f5c <_free_r+0x2c>
 8012f4e:	6063      	str	r3, [r4, #4]
 8012f50:	6014      	str	r4, [r2, #0]
 8012f52:	4628      	mov	r0, r5
 8012f54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f58:	f7fe bb3c 	b.w	80115d4 <__malloc_unlock>
 8012f5c:	42a3      	cmp	r3, r4
 8012f5e:	d908      	bls.n	8012f72 <_free_r+0x42>
 8012f60:	6820      	ldr	r0, [r4, #0]
 8012f62:	1821      	adds	r1, r4, r0
 8012f64:	428b      	cmp	r3, r1
 8012f66:	bf01      	itttt	eq
 8012f68:	6819      	ldreq	r1, [r3, #0]
 8012f6a:	685b      	ldreq	r3, [r3, #4]
 8012f6c:	1809      	addeq	r1, r1, r0
 8012f6e:	6021      	streq	r1, [r4, #0]
 8012f70:	e7ed      	b.n	8012f4e <_free_r+0x1e>
 8012f72:	461a      	mov	r2, r3
 8012f74:	685b      	ldr	r3, [r3, #4]
 8012f76:	b10b      	cbz	r3, 8012f7c <_free_r+0x4c>
 8012f78:	42a3      	cmp	r3, r4
 8012f7a:	d9fa      	bls.n	8012f72 <_free_r+0x42>
 8012f7c:	6811      	ldr	r1, [r2, #0]
 8012f7e:	1850      	adds	r0, r2, r1
 8012f80:	42a0      	cmp	r0, r4
 8012f82:	d10b      	bne.n	8012f9c <_free_r+0x6c>
 8012f84:	6820      	ldr	r0, [r4, #0]
 8012f86:	4401      	add	r1, r0
 8012f88:	1850      	adds	r0, r2, r1
 8012f8a:	4283      	cmp	r3, r0
 8012f8c:	6011      	str	r1, [r2, #0]
 8012f8e:	d1e0      	bne.n	8012f52 <_free_r+0x22>
 8012f90:	6818      	ldr	r0, [r3, #0]
 8012f92:	685b      	ldr	r3, [r3, #4]
 8012f94:	6053      	str	r3, [r2, #4]
 8012f96:	4408      	add	r0, r1
 8012f98:	6010      	str	r0, [r2, #0]
 8012f9a:	e7da      	b.n	8012f52 <_free_r+0x22>
 8012f9c:	d902      	bls.n	8012fa4 <_free_r+0x74>
 8012f9e:	230c      	movs	r3, #12
 8012fa0:	602b      	str	r3, [r5, #0]
 8012fa2:	e7d6      	b.n	8012f52 <_free_r+0x22>
 8012fa4:	6820      	ldr	r0, [r4, #0]
 8012fa6:	1821      	adds	r1, r4, r0
 8012fa8:	428b      	cmp	r3, r1
 8012faa:	bf04      	itt	eq
 8012fac:	6819      	ldreq	r1, [r3, #0]
 8012fae:	685b      	ldreq	r3, [r3, #4]
 8012fb0:	6063      	str	r3, [r4, #4]
 8012fb2:	bf04      	itt	eq
 8012fb4:	1809      	addeq	r1, r1, r0
 8012fb6:	6021      	streq	r1, [r4, #0]
 8012fb8:	6054      	str	r4, [r2, #4]
 8012fba:	e7ca      	b.n	8012f52 <_free_r+0x22>
 8012fbc:	bd38      	pop	{r3, r4, r5, pc}
 8012fbe:	bf00      	nop
 8012fc0:	200005c4 	.word	0x200005c4

08012fc4 <_Balloc>:
 8012fc4:	b570      	push	{r4, r5, r6, lr}
 8012fc6:	69c6      	ldr	r6, [r0, #28]
 8012fc8:	4604      	mov	r4, r0
 8012fca:	460d      	mov	r5, r1
 8012fcc:	b976      	cbnz	r6, 8012fec <_Balloc+0x28>
 8012fce:	2010      	movs	r0, #16
 8012fd0:	f7fe fa48 	bl	8011464 <malloc>
 8012fd4:	4602      	mov	r2, r0
 8012fd6:	61e0      	str	r0, [r4, #28]
 8012fd8:	b920      	cbnz	r0, 8012fe4 <_Balloc+0x20>
 8012fda:	4b18      	ldr	r3, [pc, #96]	@ (801303c <_Balloc+0x78>)
 8012fdc:	4818      	ldr	r0, [pc, #96]	@ (8013040 <_Balloc+0x7c>)
 8012fde:	216b      	movs	r1, #107	@ 0x6b
 8012fe0:	f000 fd9e 	bl	8013b20 <__assert_func>
 8012fe4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012fe8:	6006      	str	r6, [r0, #0]
 8012fea:	60c6      	str	r6, [r0, #12]
 8012fec:	69e6      	ldr	r6, [r4, #28]
 8012fee:	68f3      	ldr	r3, [r6, #12]
 8012ff0:	b183      	cbz	r3, 8013014 <_Balloc+0x50>
 8012ff2:	69e3      	ldr	r3, [r4, #28]
 8012ff4:	68db      	ldr	r3, [r3, #12]
 8012ff6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012ffa:	b9b8      	cbnz	r0, 801302c <_Balloc+0x68>
 8012ffc:	2101      	movs	r1, #1
 8012ffe:	fa01 f605 	lsl.w	r6, r1, r5
 8013002:	1d72      	adds	r2, r6, #5
 8013004:	0092      	lsls	r2, r2, #2
 8013006:	4620      	mov	r0, r4
 8013008:	f000 fda8 	bl	8013b5c <_calloc_r>
 801300c:	b160      	cbz	r0, 8013028 <_Balloc+0x64>
 801300e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013012:	e00e      	b.n	8013032 <_Balloc+0x6e>
 8013014:	2221      	movs	r2, #33	@ 0x21
 8013016:	2104      	movs	r1, #4
 8013018:	4620      	mov	r0, r4
 801301a:	f000 fd9f 	bl	8013b5c <_calloc_r>
 801301e:	69e3      	ldr	r3, [r4, #28]
 8013020:	60f0      	str	r0, [r6, #12]
 8013022:	68db      	ldr	r3, [r3, #12]
 8013024:	2b00      	cmp	r3, #0
 8013026:	d1e4      	bne.n	8012ff2 <_Balloc+0x2e>
 8013028:	2000      	movs	r0, #0
 801302a:	bd70      	pop	{r4, r5, r6, pc}
 801302c:	6802      	ldr	r2, [r0, #0]
 801302e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013032:	2300      	movs	r3, #0
 8013034:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013038:	e7f7      	b.n	801302a <_Balloc+0x66>
 801303a:	bf00      	nop
 801303c:	08015b95 	.word	0x08015b95
 8013040:	08015c15 	.word	0x08015c15

08013044 <_Bfree>:
 8013044:	b570      	push	{r4, r5, r6, lr}
 8013046:	69c6      	ldr	r6, [r0, #28]
 8013048:	4605      	mov	r5, r0
 801304a:	460c      	mov	r4, r1
 801304c:	b976      	cbnz	r6, 801306c <_Bfree+0x28>
 801304e:	2010      	movs	r0, #16
 8013050:	f7fe fa08 	bl	8011464 <malloc>
 8013054:	4602      	mov	r2, r0
 8013056:	61e8      	str	r0, [r5, #28]
 8013058:	b920      	cbnz	r0, 8013064 <_Bfree+0x20>
 801305a:	4b09      	ldr	r3, [pc, #36]	@ (8013080 <_Bfree+0x3c>)
 801305c:	4809      	ldr	r0, [pc, #36]	@ (8013084 <_Bfree+0x40>)
 801305e:	218f      	movs	r1, #143	@ 0x8f
 8013060:	f000 fd5e 	bl	8013b20 <__assert_func>
 8013064:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013068:	6006      	str	r6, [r0, #0]
 801306a:	60c6      	str	r6, [r0, #12]
 801306c:	b13c      	cbz	r4, 801307e <_Bfree+0x3a>
 801306e:	69eb      	ldr	r3, [r5, #28]
 8013070:	6862      	ldr	r2, [r4, #4]
 8013072:	68db      	ldr	r3, [r3, #12]
 8013074:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013078:	6021      	str	r1, [r4, #0]
 801307a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801307e:	bd70      	pop	{r4, r5, r6, pc}
 8013080:	08015b95 	.word	0x08015b95
 8013084:	08015c15 	.word	0x08015c15

08013088 <__multadd>:
 8013088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801308c:	690d      	ldr	r5, [r1, #16]
 801308e:	4607      	mov	r7, r0
 8013090:	460c      	mov	r4, r1
 8013092:	461e      	mov	r6, r3
 8013094:	f101 0c14 	add.w	ip, r1, #20
 8013098:	2000      	movs	r0, #0
 801309a:	f8dc 3000 	ldr.w	r3, [ip]
 801309e:	b299      	uxth	r1, r3
 80130a0:	fb02 6101 	mla	r1, r2, r1, r6
 80130a4:	0c1e      	lsrs	r6, r3, #16
 80130a6:	0c0b      	lsrs	r3, r1, #16
 80130a8:	fb02 3306 	mla	r3, r2, r6, r3
 80130ac:	b289      	uxth	r1, r1
 80130ae:	3001      	adds	r0, #1
 80130b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80130b4:	4285      	cmp	r5, r0
 80130b6:	f84c 1b04 	str.w	r1, [ip], #4
 80130ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80130be:	dcec      	bgt.n	801309a <__multadd+0x12>
 80130c0:	b30e      	cbz	r6, 8013106 <__multadd+0x7e>
 80130c2:	68a3      	ldr	r3, [r4, #8]
 80130c4:	42ab      	cmp	r3, r5
 80130c6:	dc19      	bgt.n	80130fc <__multadd+0x74>
 80130c8:	6861      	ldr	r1, [r4, #4]
 80130ca:	4638      	mov	r0, r7
 80130cc:	3101      	adds	r1, #1
 80130ce:	f7ff ff79 	bl	8012fc4 <_Balloc>
 80130d2:	4680      	mov	r8, r0
 80130d4:	b928      	cbnz	r0, 80130e2 <__multadd+0x5a>
 80130d6:	4602      	mov	r2, r0
 80130d8:	4b0c      	ldr	r3, [pc, #48]	@ (801310c <__multadd+0x84>)
 80130da:	480d      	ldr	r0, [pc, #52]	@ (8013110 <__multadd+0x88>)
 80130dc:	21ba      	movs	r1, #186	@ 0xba
 80130de:	f000 fd1f 	bl	8013b20 <__assert_func>
 80130e2:	6922      	ldr	r2, [r4, #16]
 80130e4:	3202      	adds	r2, #2
 80130e6:	f104 010c 	add.w	r1, r4, #12
 80130ea:	0092      	lsls	r2, r2, #2
 80130ec:	300c      	adds	r0, #12
 80130ee:	f000 fd09 	bl	8013b04 <memcpy>
 80130f2:	4621      	mov	r1, r4
 80130f4:	4638      	mov	r0, r7
 80130f6:	f7ff ffa5 	bl	8013044 <_Bfree>
 80130fa:	4644      	mov	r4, r8
 80130fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013100:	3501      	adds	r5, #1
 8013102:	615e      	str	r6, [r3, #20]
 8013104:	6125      	str	r5, [r4, #16]
 8013106:	4620      	mov	r0, r4
 8013108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801310c:	08015c04 	.word	0x08015c04
 8013110:	08015c15 	.word	0x08015c15

08013114 <__hi0bits>:
 8013114:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013118:	4603      	mov	r3, r0
 801311a:	bf36      	itet	cc
 801311c:	0403      	lslcc	r3, r0, #16
 801311e:	2000      	movcs	r0, #0
 8013120:	2010      	movcc	r0, #16
 8013122:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013126:	bf3c      	itt	cc
 8013128:	021b      	lslcc	r3, r3, #8
 801312a:	3008      	addcc	r0, #8
 801312c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013130:	bf3c      	itt	cc
 8013132:	011b      	lslcc	r3, r3, #4
 8013134:	3004      	addcc	r0, #4
 8013136:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801313a:	bf3c      	itt	cc
 801313c:	009b      	lslcc	r3, r3, #2
 801313e:	3002      	addcc	r0, #2
 8013140:	2b00      	cmp	r3, #0
 8013142:	db05      	blt.n	8013150 <__hi0bits+0x3c>
 8013144:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013148:	f100 0001 	add.w	r0, r0, #1
 801314c:	bf08      	it	eq
 801314e:	2020      	moveq	r0, #32
 8013150:	4770      	bx	lr

08013152 <__lo0bits>:
 8013152:	6803      	ldr	r3, [r0, #0]
 8013154:	4602      	mov	r2, r0
 8013156:	f013 0007 	ands.w	r0, r3, #7
 801315a:	d00b      	beq.n	8013174 <__lo0bits+0x22>
 801315c:	07d9      	lsls	r1, r3, #31
 801315e:	d421      	bmi.n	80131a4 <__lo0bits+0x52>
 8013160:	0798      	lsls	r0, r3, #30
 8013162:	bf49      	itett	mi
 8013164:	085b      	lsrmi	r3, r3, #1
 8013166:	089b      	lsrpl	r3, r3, #2
 8013168:	2001      	movmi	r0, #1
 801316a:	6013      	strmi	r3, [r2, #0]
 801316c:	bf5c      	itt	pl
 801316e:	6013      	strpl	r3, [r2, #0]
 8013170:	2002      	movpl	r0, #2
 8013172:	4770      	bx	lr
 8013174:	b299      	uxth	r1, r3
 8013176:	b909      	cbnz	r1, 801317c <__lo0bits+0x2a>
 8013178:	0c1b      	lsrs	r3, r3, #16
 801317a:	2010      	movs	r0, #16
 801317c:	b2d9      	uxtb	r1, r3
 801317e:	b909      	cbnz	r1, 8013184 <__lo0bits+0x32>
 8013180:	3008      	adds	r0, #8
 8013182:	0a1b      	lsrs	r3, r3, #8
 8013184:	0719      	lsls	r1, r3, #28
 8013186:	bf04      	itt	eq
 8013188:	091b      	lsreq	r3, r3, #4
 801318a:	3004      	addeq	r0, #4
 801318c:	0799      	lsls	r1, r3, #30
 801318e:	bf04      	itt	eq
 8013190:	089b      	lsreq	r3, r3, #2
 8013192:	3002      	addeq	r0, #2
 8013194:	07d9      	lsls	r1, r3, #31
 8013196:	d403      	bmi.n	80131a0 <__lo0bits+0x4e>
 8013198:	085b      	lsrs	r3, r3, #1
 801319a:	f100 0001 	add.w	r0, r0, #1
 801319e:	d003      	beq.n	80131a8 <__lo0bits+0x56>
 80131a0:	6013      	str	r3, [r2, #0]
 80131a2:	4770      	bx	lr
 80131a4:	2000      	movs	r0, #0
 80131a6:	4770      	bx	lr
 80131a8:	2020      	movs	r0, #32
 80131aa:	4770      	bx	lr

080131ac <__i2b>:
 80131ac:	b510      	push	{r4, lr}
 80131ae:	460c      	mov	r4, r1
 80131b0:	2101      	movs	r1, #1
 80131b2:	f7ff ff07 	bl	8012fc4 <_Balloc>
 80131b6:	4602      	mov	r2, r0
 80131b8:	b928      	cbnz	r0, 80131c6 <__i2b+0x1a>
 80131ba:	4b05      	ldr	r3, [pc, #20]	@ (80131d0 <__i2b+0x24>)
 80131bc:	4805      	ldr	r0, [pc, #20]	@ (80131d4 <__i2b+0x28>)
 80131be:	f240 1145 	movw	r1, #325	@ 0x145
 80131c2:	f000 fcad 	bl	8013b20 <__assert_func>
 80131c6:	2301      	movs	r3, #1
 80131c8:	6144      	str	r4, [r0, #20]
 80131ca:	6103      	str	r3, [r0, #16]
 80131cc:	bd10      	pop	{r4, pc}
 80131ce:	bf00      	nop
 80131d0:	08015c04 	.word	0x08015c04
 80131d4:	08015c15 	.word	0x08015c15

080131d8 <__multiply>:
 80131d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131dc:	4614      	mov	r4, r2
 80131de:	690a      	ldr	r2, [r1, #16]
 80131e0:	6923      	ldr	r3, [r4, #16]
 80131e2:	429a      	cmp	r2, r3
 80131e4:	bfa8      	it	ge
 80131e6:	4623      	movge	r3, r4
 80131e8:	460f      	mov	r7, r1
 80131ea:	bfa4      	itt	ge
 80131ec:	460c      	movge	r4, r1
 80131ee:	461f      	movge	r7, r3
 80131f0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80131f4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80131f8:	68a3      	ldr	r3, [r4, #8]
 80131fa:	6861      	ldr	r1, [r4, #4]
 80131fc:	eb0a 0609 	add.w	r6, sl, r9
 8013200:	42b3      	cmp	r3, r6
 8013202:	b085      	sub	sp, #20
 8013204:	bfb8      	it	lt
 8013206:	3101      	addlt	r1, #1
 8013208:	f7ff fedc 	bl	8012fc4 <_Balloc>
 801320c:	b930      	cbnz	r0, 801321c <__multiply+0x44>
 801320e:	4602      	mov	r2, r0
 8013210:	4b44      	ldr	r3, [pc, #272]	@ (8013324 <__multiply+0x14c>)
 8013212:	4845      	ldr	r0, [pc, #276]	@ (8013328 <__multiply+0x150>)
 8013214:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013218:	f000 fc82 	bl	8013b20 <__assert_func>
 801321c:	f100 0514 	add.w	r5, r0, #20
 8013220:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013224:	462b      	mov	r3, r5
 8013226:	2200      	movs	r2, #0
 8013228:	4543      	cmp	r3, r8
 801322a:	d321      	bcc.n	8013270 <__multiply+0x98>
 801322c:	f107 0114 	add.w	r1, r7, #20
 8013230:	f104 0214 	add.w	r2, r4, #20
 8013234:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013238:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801323c:	9302      	str	r3, [sp, #8]
 801323e:	1b13      	subs	r3, r2, r4
 8013240:	3b15      	subs	r3, #21
 8013242:	f023 0303 	bic.w	r3, r3, #3
 8013246:	3304      	adds	r3, #4
 8013248:	f104 0715 	add.w	r7, r4, #21
 801324c:	42ba      	cmp	r2, r7
 801324e:	bf38      	it	cc
 8013250:	2304      	movcc	r3, #4
 8013252:	9301      	str	r3, [sp, #4]
 8013254:	9b02      	ldr	r3, [sp, #8]
 8013256:	9103      	str	r1, [sp, #12]
 8013258:	428b      	cmp	r3, r1
 801325a:	d80c      	bhi.n	8013276 <__multiply+0x9e>
 801325c:	2e00      	cmp	r6, #0
 801325e:	dd03      	ble.n	8013268 <__multiply+0x90>
 8013260:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013264:	2b00      	cmp	r3, #0
 8013266:	d05b      	beq.n	8013320 <__multiply+0x148>
 8013268:	6106      	str	r6, [r0, #16]
 801326a:	b005      	add	sp, #20
 801326c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013270:	f843 2b04 	str.w	r2, [r3], #4
 8013274:	e7d8      	b.n	8013228 <__multiply+0x50>
 8013276:	f8b1 a000 	ldrh.w	sl, [r1]
 801327a:	f1ba 0f00 	cmp.w	sl, #0
 801327e:	d024      	beq.n	80132ca <__multiply+0xf2>
 8013280:	f104 0e14 	add.w	lr, r4, #20
 8013284:	46a9      	mov	r9, r5
 8013286:	f04f 0c00 	mov.w	ip, #0
 801328a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801328e:	f8d9 3000 	ldr.w	r3, [r9]
 8013292:	fa1f fb87 	uxth.w	fp, r7
 8013296:	b29b      	uxth	r3, r3
 8013298:	fb0a 330b 	mla	r3, sl, fp, r3
 801329c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80132a0:	f8d9 7000 	ldr.w	r7, [r9]
 80132a4:	4463      	add	r3, ip
 80132a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80132aa:	fb0a c70b 	mla	r7, sl, fp, ip
 80132ae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80132b2:	b29b      	uxth	r3, r3
 80132b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80132b8:	4572      	cmp	r2, lr
 80132ba:	f849 3b04 	str.w	r3, [r9], #4
 80132be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80132c2:	d8e2      	bhi.n	801328a <__multiply+0xb2>
 80132c4:	9b01      	ldr	r3, [sp, #4]
 80132c6:	f845 c003 	str.w	ip, [r5, r3]
 80132ca:	9b03      	ldr	r3, [sp, #12]
 80132cc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80132d0:	3104      	adds	r1, #4
 80132d2:	f1b9 0f00 	cmp.w	r9, #0
 80132d6:	d021      	beq.n	801331c <__multiply+0x144>
 80132d8:	682b      	ldr	r3, [r5, #0]
 80132da:	f104 0c14 	add.w	ip, r4, #20
 80132de:	46ae      	mov	lr, r5
 80132e0:	f04f 0a00 	mov.w	sl, #0
 80132e4:	f8bc b000 	ldrh.w	fp, [ip]
 80132e8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80132ec:	fb09 770b 	mla	r7, r9, fp, r7
 80132f0:	4457      	add	r7, sl
 80132f2:	b29b      	uxth	r3, r3
 80132f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80132f8:	f84e 3b04 	str.w	r3, [lr], #4
 80132fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013300:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013304:	f8be 3000 	ldrh.w	r3, [lr]
 8013308:	fb09 330a 	mla	r3, r9, sl, r3
 801330c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013310:	4562      	cmp	r2, ip
 8013312:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013316:	d8e5      	bhi.n	80132e4 <__multiply+0x10c>
 8013318:	9f01      	ldr	r7, [sp, #4]
 801331a:	51eb      	str	r3, [r5, r7]
 801331c:	3504      	adds	r5, #4
 801331e:	e799      	b.n	8013254 <__multiply+0x7c>
 8013320:	3e01      	subs	r6, #1
 8013322:	e79b      	b.n	801325c <__multiply+0x84>
 8013324:	08015c04 	.word	0x08015c04
 8013328:	08015c15 	.word	0x08015c15

0801332c <__pow5mult>:
 801332c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013330:	4615      	mov	r5, r2
 8013332:	f012 0203 	ands.w	r2, r2, #3
 8013336:	4607      	mov	r7, r0
 8013338:	460e      	mov	r6, r1
 801333a:	d007      	beq.n	801334c <__pow5mult+0x20>
 801333c:	4c25      	ldr	r4, [pc, #148]	@ (80133d4 <__pow5mult+0xa8>)
 801333e:	3a01      	subs	r2, #1
 8013340:	2300      	movs	r3, #0
 8013342:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013346:	f7ff fe9f 	bl	8013088 <__multadd>
 801334a:	4606      	mov	r6, r0
 801334c:	10ad      	asrs	r5, r5, #2
 801334e:	d03d      	beq.n	80133cc <__pow5mult+0xa0>
 8013350:	69fc      	ldr	r4, [r7, #28]
 8013352:	b97c      	cbnz	r4, 8013374 <__pow5mult+0x48>
 8013354:	2010      	movs	r0, #16
 8013356:	f7fe f885 	bl	8011464 <malloc>
 801335a:	4602      	mov	r2, r0
 801335c:	61f8      	str	r0, [r7, #28]
 801335e:	b928      	cbnz	r0, 801336c <__pow5mult+0x40>
 8013360:	4b1d      	ldr	r3, [pc, #116]	@ (80133d8 <__pow5mult+0xac>)
 8013362:	481e      	ldr	r0, [pc, #120]	@ (80133dc <__pow5mult+0xb0>)
 8013364:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013368:	f000 fbda 	bl	8013b20 <__assert_func>
 801336c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013370:	6004      	str	r4, [r0, #0]
 8013372:	60c4      	str	r4, [r0, #12]
 8013374:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013378:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801337c:	b94c      	cbnz	r4, 8013392 <__pow5mult+0x66>
 801337e:	f240 2171 	movw	r1, #625	@ 0x271
 8013382:	4638      	mov	r0, r7
 8013384:	f7ff ff12 	bl	80131ac <__i2b>
 8013388:	2300      	movs	r3, #0
 801338a:	f8c8 0008 	str.w	r0, [r8, #8]
 801338e:	4604      	mov	r4, r0
 8013390:	6003      	str	r3, [r0, #0]
 8013392:	f04f 0900 	mov.w	r9, #0
 8013396:	07eb      	lsls	r3, r5, #31
 8013398:	d50a      	bpl.n	80133b0 <__pow5mult+0x84>
 801339a:	4631      	mov	r1, r6
 801339c:	4622      	mov	r2, r4
 801339e:	4638      	mov	r0, r7
 80133a0:	f7ff ff1a 	bl	80131d8 <__multiply>
 80133a4:	4631      	mov	r1, r6
 80133a6:	4680      	mov	r8, r0
 80133a8:	4638      	mov	r0, r7
 80133aa:	f7ff fe4b 	bl	8013044 <_Bfree>
 80133ae:	4646      	mov	r6, r8
 80133b0:	106d      	asrs	r5, r5, #1
 80133b2:	d00b      	beq.n	80133cc <__pow5mult+0xa0>
 80133b4:	6820      	ldr	r0, [r4, #0]
 80133b6:	b938      	cbnz	r0, 80133c8 <__pow5mult+0x9c>
 80133b8:	4622      	mov	r2, r4
 80133ba:	4621      	mov	r1, r4
 80133bc:	4638      	mov	r0, r7
 80133be:	f7ff ff0b 	bl	80131d8 <__multiply>
 80133c2:	6020      	str	r0, [r4, #0]
 80133c4:	f8c0 9000 	str.w	r9, [r0]
 80133c8:	4604      	mov	r4, r0
 80133ca:	e7e4      	b.n	8013396 <__pow5mult+0x6a>
 80133cc:	4630      	mov	r0, r6
 80133ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133d2:	bf00      	nop
 80133d4:	08015c70 	.word	0x08015c70
 80133d8:	08015b95 	.word	0x08015b95
 80133dc:	08015c15 	.word	0x08015c15

080133e0 <__lshift>:
 80133e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133e4:	460c      	mov	r4, r1
 80133e6:	6849      	ldr	r1, [r1, #4]
 80133e8:	6923      	ldr	r3, [r4, #16]
 80133ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80133ee:	68a3      	ldr	r3, [r4, #8]
 80133f0:	4607      	mov	r7, r0
 80133f2:	4691      	mov	r9, r2
 80133f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80133f8:	f108 0601 	add.w	r6, r8, #1
 80133fc:	42b3      	cmp	r3, r6
 80133fe:	db0b      	blt.n	8013418 <__lshift+0x38>
 8013400:	4638      	mov	r0, r7
 8013402:	f7ff fddf 	bl	8012fc4 <_Balloc>
 8013406:	4605      	mov	r5, r0
 8013408:	b948      	cbnz	r0, 801341e <__lshift+0x3e>
 801340a:	4602      	mov	r2, r0
 801340c:	4b28      	ldr	r3, [pc, #160]	@ (80134b0 <__lshift+0xd0>)
 801340e:	4829      	ldr	r0, [pc, #164]	@ (80134b4 <__lshift+0xd4>)
 8013410:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013414:	f000 fb84 	bl	8013b20 <__assert_func>
 8013418:	3101      	adds	r1, #1
 801341a:	005b      	lsls	r3, r3, #1
 801341c:	e7ee      	b.n	80133fc <__lshift+0x1c>
 801341e:	2300      	movs	r3, #0
 8013420:	f100 0114 	add.w	r1, r0, #20
 8013424:	f100 0210 	add.w	r2, r0, #16
 8013428:	4618      	mov	r0, r3
 801342a:	4553      	cmp	r3, sl
 801342c:	db33      	blt.n	8013496 <__lshift+0xb6>
 801342e:	6920      	ldr	r0, [r4, #16]
 8013430:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013434:	f104 0314 	add.w	r3, r4, #20
 8013438:	f019 091f 	ands.w	r9, r9, #31
 801343c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013440:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013444:	d02b      	beq.n	801349e <__lshift+0xbe>
 8013446:	f1c9 0e20 	rsb	lr, r9, #32
 801344a:	468a      	mov	sl, r1
 801344c:	2200      	movs	r2, #0
 801344e:	6818      	ldr	r0, [r3, #0]
 8013450:	fa00 f009 	lsl.w	r0, r0, r9
 8013454:	4310      	orrs	r0, r2
 8013456:	f84a 0b04 	str.w	r0, [sl], #4
 801345a:	f853 2b04 	ldr.w	r2, [r3], #4
 801345e:	459c      	cmp	ip, r3
 8013460:	fa22 f20e 	lsr.w	r2, r2, lr
 8013464:	d8f3      	bhi.n	801344e <__lshift+0x6e>
 8013466:	ebac 0304 	sub.w	r3, ip, r4
 801346a:	3b15      	subs	r3, #21
 801346c:	f023 0303 	bic.w	r3, r3, #3
 8013470:	3304      	adds	r3, #4
 8013472:	f104 0015 	add.w	r0, r4, #21
 8013476:	4584      	cmp	ip, r0
 8013478:	bf38      	it	cc
 801347a:	2304      	movcc	r3, #4
 801347c:	50ca      	str	r2, [r1, r3]
 801347e:	b10a      	cbz	r2, 8013484 <__lshift+0xa4>
 8013480:	f108 0602 	add.w	r6, r8, #2
 8013484:	3e01      	subs	r6, #1
 8013486:	4638      	mov	r0, r7
 8013488:	612e      	str	r6, [r5, #16]
 801348a:	4621      	mov	r1, r4
 801348c:	f7ff fdda 	bl	8013044 <_Bfree>
 8013490:	4628      	mov	r0, r5
 8013492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013496:	f842 0f04 	str.w	r0, [r2, #4]!
 801349a:	3301      	adds	r3, #1
 801349c:	e7c5      	b.n	801342a <__lshift+0x4a>
 801349e:	3904      	subs	r1, #4
 80134a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80134a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80134a8:	459c      	cmp	ip, r3
 80134aa:	d8f9      	bhi.n	80134a0 <__lshift+0xc0>
 80134ac:	e7ea      	b.n	8013484 <__lshift+0xa4>
 80134ae:	bf00      	nop
 80134b0:	08015c04 	.word	0x08015c04
 80134b4:	08015c15 	.word	0x08015c15

080134b8 <__mcmp>:
 80134b8:	690a      	ldr	r2, [r1, #16]
 80134ba:	4603      	mov	r3, r0
 80134bc:	6900      	ldr	r0, [r0, #16]
 80134be:	1a80      	subs	r0, r0, r2
 80134c0:	b530      	push	{r4, r5, lr}
 80134c2:	d10e      	bne.n	80134e2 <__mcmp+0x2a>
 80134c4:	3314      	adds	r3, #20
 80134c6:	3114      	adds	r1, #20
 80134c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80134cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80134d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80134d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80134d8:	4295      	cmp	r5, r2
 80134da:	d003      	beq.n	80134e4 <__mcmp+0x2c>
 80134dc:	d205      	bcs.n	80134ea <__mcmp+0x32>
 80134de:	f04f 30ff 	mov.w	r0, #4294967295
 80134e2:	bd30      	pop	{r4, r5, pc}
 80134e4:	42a3      	cmp	r3, r4
 80134e6:	d3f3      	bcc.n	80134d0 <__mcmp+0x18>
 80134e8:	e7fb      	b.n	80134e2 <__mcmp+0x2a>
 80134ea:	2001      	movs	r0, #1
 80134ec:	e7f9      	b.n	80134e2 <__mcmp+0x2a>
	...

080134f0 <__mdiff>:
 80134f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134f4:	4689      	mov	r9, r1
 80134f6:	4606      	mov	r6, r0
 80134f8:	4611      	mov	r1, r2
 80134fa:	4648      	mov	r0, r9
 80134fc:	4614      	mov	r4, r2
 80134fe:	f7ff ffdb 	bl	80134b8 <__mcmp>
 8013502:	1e05      	subs	r5, r0, #0
 8013504:	d112      	bne.n	801352c <__mdiff+0x3c>
 8013506:	4629      	mov	r1, r5
 8013508:	4630      	mov	r0, r6
 801350a:	f7ff fd5b 	bl	8012fc4 <_Balloc>
 801350e:	4602      	mov	r2, r0
 8013510:	b928      	cbnz	r0, 801351e <__mdiff+0x2e>
 8013512:	4b3f      	ldr	r3, [pc, #252]	@ (8013610 <__mdiff+0x120>)
 8013514:	f240 2137 	movw	r1, #567	@ 0x237
 8013518:	483e      	ldr	r0, [pc, #248]	@ (8013614 <__mdiff+0x124>)
 801351a:	f000 fb01 	bl	8013b20 <__assert_func>
 801351e:	2301      	movs	r3, #1
 8013520:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013524:	4610      	mov	r0, r2
 8013526:	b003      	add	sp, #12
 8013528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801352c:	bfbc      	itt	lt
 801352e:	464b      	movlt	r3, r9
 8013530:	46a1      	movlt	r9, r4
 8013532:	4630      	mov	r0, r6
 8013534:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013538:	bfba      	itte	lt
 801353a:	461c      	movlt	r4, r3
 801353c:	2501      	movlt	r5, #1
 801353e:	2500      	movge	r5, #0
 8013540:	f7ff fd40 	bl	8012fc4 <_Balloc>
 8013544:	4602      	mov	r2, r0
 8013546:	b918      	cbnz	r0, 8013550 <__mdiff+0x60>
 8013548:	4b31      	ldr	r3, [pc, #196]	@ (8013610 <__mdiff+0x120>)
 801354a:	f240 2145 	movw	r1, #581	@ 0x245
 801354e:	e7e3      	b.n	8013518 <__mdiff+0x28>
 8013550:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013554:	6926      	ldr	r6, [r4, #16]
 8013556:	60c5      	str	r5, [r0, #12]
 8013558:	f109 0310 	add.w	r3, r9, #16
 801355c:	f109 0514 	add.w	r5, r9, #20
 8013560:	f104 0e14 	add.w	lr, r4, #20
 8013564:	f100 0b14 	add.w	fp, r0, #20
 8013568:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801356c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013570:	9301      	str	r3, [sp, #4]
 8013572:	46d9      	mov	r9, fp
 8013574:	f04f 0c00 	mov.w	ip, #0
 8013578:	9b01      	ldr	r3, [sp, #4]
 801357a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801357e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013582:	9301      	str	r3, [sp, #4]
 8013584:	fa1f f38a 	uxth.w	r3, sl
 8013588:	4619      	mov	r1, r3
 801358a:	b283      	uxth	r3, r0
 801358c:	1acb      	subs	r3, r1, r3
 801358e:	0c00      	lsrs	r0, r0, #16
 8013590:	4463      	add	r3, ip
 8013592:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013596:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801359a:	b29b      	uxth	r3, r3
 801359c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80135a0:	4576      	cmp	r6, lr
 80135a2:	f849 3b04 	str.w	r3, [r9], #4
 80135a6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80135aa:	d8e5      	bhi.n	8013578 <__mdiff+0x88>
 80135ac:	1b33      	subs	r3, r6, r4
 80135ae:	3b15      	subs	r3, #21
 80135b0:	f023 0303 	bic.w	r3, r3, #3
 80135b4:	3415      	adds	r4, #21
 80135b6:	3304      	adds	r3, #4
 80135b8:	42a6      	cmp	r6, r4
 80135ba:	bf38      	it	cc
 80135bc:	2304      	movcc	r3, #4
 80135be:	441d      	add	r5, r3
 80135c0:	445b      	add	r3, fp
 80135c2:	461e      	mov	r6, r3
 80135c4:	462c      	mov	r4, r5
 80135c6:	4544      	cmp	r4, r8
 80135c8:	d30e      	bcc.n	80135e8 <__mdiff+0xf8>
 80135ca:	f108 0103 	add.w	r1, r8, #3
 80135ce:	1b49      	subs	r1, r1, r5
 80135d0:	f021 0103 	bic.w	r1, r1, #3
 80135d4:	3d03      	subs	r5, #3
 80135d6:	45a8      	cmp	r8, r5
 80135d8:	bf38      	it	cc
 80135da:	2100      	movcc	r1, #0
 80135dc:	440b      	add	r3, r1
 80135de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80135e2:	b191      	cbz	r1, 801360a <__mdiff+0x11a>
 80135e4:	6117      	str	r7, [r2, #16]
 80135e6:	e79d      	b.n	8013524 <__mdiff+0x34>
 80135e8:	f854 1b04 	ldr.w	r1, [r4], #4
 80135ec:	46e6      	mov	lr, ip
 80135ee:	0c08      	lsrs	r0, r1, #16
 80135f0:	fa1c fc81 	uxtah	ip, ip, r1
 80135f4:	4471      	add	r1, lr
 80135f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80135fa:	b289      	uxth	r1, r1
 80135fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013600:	f846 1b04 	str.w	r1, [r6], #4
 8013604:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013608:	e7dd      	b.n	80135c6 <__mdiff+0xd6>
 801360a:	3f01      	subs	r7, #1
 801360c:	e7e7      	b.n	80135de <__mdiff+0xee>
 801360e:	bf00      	nop
 8013610:	08015c04 	.word	0x08015c04
 8013614:	08015c15 	.word	0x08015c15

08013618 <__d2b>:
 8013618:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801361c:	460f      	mov	r7, r1
 801361e:	2101      	movs	r1, #1
 8013620:	ec59 8b10 	vmov	r8, r9, d0
 8013624:	4616      	mov	r6, r2
 8013626:	f7ff fccd 	bl	8012fc4 <_Balloc>
 801362a:	4604      	mov	r4, r0
 801362c:	b930      	cbnz	r0, 801363c <__d2b+0x24>
 801362e:	4602      	mov	r2, r0
 8013630:	4b23      	ldr	r3, [pc, #140]	@ (80136c0 <__d2b+0xa8>)
 8013632:	4824      	ldr	r0, [pc, #144]	@ (80136c4 <__d2b+0xac>)
 8013634:	f240 310f 	movw	r1, #783	@ 0x30f
 8013638:	f000 fa72 	bl	8013b20 <__assert_func>
 801363c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013640:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013644:	b10d      	cbz	r5, 801364a <__d2b+0x32>
 8013646:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801364a:	9301      	str	r3, [sp, #4]
 801364c:	f1b8 0300 	subs.w	r3, r8, #0
 8013650:	d023      	beq.n	801369a <__d2b+0x82>
 8013652:	4668      	mov	r0, sp
 8013654:	9300      	str	r3, [sp, #0]
 8013656:	f7ff fd7c 	bl	8013152 <__lo0bits>
 801365a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801365e:	b1d0      	cbz	r0, 8013696 <__d2b+0x7e>
 8013660:	f1c0 0320 	rsb	r3, r0, #32
 8013664:	fa02 f303 	lsl.w	r3, r2, r3
 8013668:	430b      	orrs	r3, r1
 801366a:	40c2      	lsrs	r2, r0
 801366c:	6163      	str	r3, [r4, #20]
 801366e:	9201      	str	r2, [sp, #4]
 8013670:	9b01      	ldr	r3, [sp, #4]
 8013672:	61a3      	str	r3, [r4, #24]
 8013674:	2b00      	cmp	r3, #0
 8013676:	bf0c      	ite	eq
 8013678:	2201      	moveq	r2, #1
 801367a:	2202      	movne	r2, #2
 801367c:	6122      	str	r2, [r4, #16]
 801367e:	b1a5      	cbz	r5, 80136aa <__d2b+0x92>
 8013680:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013684:	4405      	add	r5, r0
 8013686:	603d      	str	r5, [r7, #0]
 8013688:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801368c:	6030      	str	r0, [r6, #0]
 801368e:	4620      	mov	r0, r4
 8013690:	b003      	add	sp, #12
 8013692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013696:	6161      	str	r1, [r4, #20]
 8013698:	e7ea      	b.n	8013670 <__d2b+0x58>
 801369a:	a801      	add	r0, sp, #4
 801369c:	f7ff fd59 	bl	8013152 <__lo0bits>
 80136a0:	9b01      	ldr	r3, [sp, #4]
 80136a2:	6163      	str	r3, [r4, #20]
 80136a4:	3020      	adds	r0, #32
 80136a6:	2201      	movs	r2, #1
 80136a8:	e7e8      	b.n	801367c <__d2b+0x64>
 80136aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80136ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80136b2:	6038      	str	r0, [r7, #0]
 80136b4:	6918      	ldr	r0, [r3, #16]
 80136b6:	f7ff fd2d 	bl	8013114 <__hi0bits>
 80136ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80136be:	e7e5      	b.n	801368c <__d2b+0x74>
 80136c0:	08015c04 	.word	0x08015c04
 80136c4:	08015c15 	.word	0x08015c15

080136c8 <__ssputs_r>:
 80136c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136cc:	688e      	ldr	r6, [r1, #8]
 80136ce:	461f      	mov	r7, r3
 80136d0:	42be      	cmp	r6, r7
 80136d2:	680b      	ldr	r3, [r1, #0]
 80136d4:	4682      	mov	sl, r0
 80136d6:	460c      	mov	r4, r1
 80136d8:	4690      	mov	r8, r2
 80136da:	d82d      	bhi.n	8013738 <__ssputs_r+0x70>
 80136dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80136e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80136e4:	d026      	beq.n	8013734 <__ssputs_r+0x6c>
 80136e6:	6965      	ldr	r5, [r4, #20]
 80136e8:	6909      	ldr	r1, [r1, #16]
 80136ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80136ee:	eba3 0901 	sub.w	r9, r3, r1
 80136f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80136f6:	1c7b      	adds	r3, r7, #1
 80136f8:	444b      	add	r3, r9
 80136fa:	106d      	asrs	r5, r5, #1
 80136fc:	429d      	cmp	r5, r3
 80136fe:	bf38      	it	cc
 8013700:	461d      	movcc	r5, r3
 8013702:	0553      	lsls	r3, r2, #21
 8013704:	d527      	bpl.n	8013756 <__ssputs_r+0x8e>
 8013706:	4629      	mov	r1, r5
 8013708:	f7fd fede 	bl	80114c8 <_malloc_r>
 801370c:	4606      	mov	r6, r0
 801370e:	b360      	cbz	r0, 801376a <__ssputs_r+0xa2>
 8013710:	6921      	ldr	r1, [r4, #16]
 8013712:	464a      	mov	r2, r9
 8013714:	f000 f9f6 	bl	8013b04 <memcpy>
 8013718:	89a3      	ldrh	r3, [r4, #12]
 801371a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801371e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013722:	81a3      	strh	r3, [r4, #12]
 8013724:	6126      	str	r6, [r4, #16]
 8013726:	6165      	str	r5, [r4, #20]
 8013728:	444e      	add	r6, r9
 801372a:	eba5 0509 	sub.w	r5, r5, r9
 801372e:	6026      	str	r6, [r4, #0]
 8013730:	60a5      	str	r5, [r4, #8]
 8013732:	463e      	mov	r6, r7
 8013734:	42be      	cmp	r6, r7
 8013736:	d900      	bls.n	801373a <__ssputs_r+0x72>
 8013738:	463e      	mov	r6, r7
 801373a:	6820      	ldr	r0, [r4, #0]
 801373c:	4632      	mov	r2, r6
 801373e:	4641      	mov	r1, r8
 8013740:	f000 f9c6 	bl	8013ad0 <memmove>
 8013744:	68a3      	ldr	r3, [r4, #8]
 8013746:	1b9b      	subs	r3, r3, r6
 8013748:	60a3      	str	r3, [r4, #8]
 801374a:	6823      	ldr	r3, [r4, #0]
 801374c:	4433      	add	r3, r6
 801374e:	6023      	str	r3, [r4, #0]
 8013750:	2000      	movs	r0, #0
 8013752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013756:	462a      	mov	r2, r5
 8013758:	f000 fa26 	bl	8013ba8 <_realloc_r>
 801375c:	4606      	mov	r6, r0
 801375e:	2800      	cmp	r0, #0
 8013760:	d1e0      	bne.n	8013724 <__ssputs_r+0x5c>
 8013762:	6921      	ldr	r1, [r4, #16]
 8013764:	4650      	mov	r0, sl
 8013766:	f7ff fbe3 	bl	8012f30 <_free_r>
 801376a:	230c      	movs	r3, #12
 801376c:	f8ca 3000 	str.w	r3, [sl]
 8013770:	89a3      	ldrh	r3, [r4, #12]
 8013772:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013776:	81a3      	strh	r3, [r4, #12]
 8013778:	f04f 30ff 	mov.w	r0, #4294967295
 801377c:	e7e9      	b.n	8013752 <__ssputs_r+0x8a>
	...

08013780 <_svfiprintf_r>:
 8013780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013784:	4698      	mov	r8, r3
 8013786:	898b      	ldrh	r3, [r1, #12]
 8013788:	061b      	lsls	r3, r3, #24
 801378a:	b09d      	sub	sp, #116	@ 0x74
 801378c:	4607      	mov	r7, r0
 801378e:	460d      	mov	r5, r1
 8013790:	4614      	mov	r4, r2
 8013792:	d510      	bpl.n	80137b6 <_svfiprintf_r+0x36>
 8013794:	690b      	ldr	r3, [r1, #16]
 8013796:	b973      	cbnz	r3, 80137b6 <_svfiprintf_r+0x36>
 8013798:	2140      	movs	r1, #64	@ 0x40
 801379a:	f7fd fe95 	bl	80114c8 <_malloc_r>
 801379e:	6028      	str	r0, [r5, #0]
 80137a0:	6128      	str	r0, [r5, #16]
 80137a2:	b930      	cbnz	r0, 80137b2 <_svfiprintf_r+0x32>
 80137a4:	230c      	movs	r3, #12
 80137a6:	603b      	str	r3, [r7, #0]
 80137a8:	f04f 30ff 	mov.w	r0, #4294967295
 80137ac:	b01d      	add	sp, #116	@ 0x74
 80137ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137b2:	2340      	movs	r3, #64	@ 0x40
 80137b4:	616b      	str	r3, [r5, #20]
 80137b6:	2300      	movs	r3, #0
 80137b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80137ba:	2320      	movs	r3, #32
 80137bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80137c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80137c4:	2330      	movs	r3, #48	@ 0x30
 80137c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013964 <_svfiprintf_r+0x1e4>
 80137ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80137ce:	f04f 0901 	mov.w	r9, #1
 80137d2:	4623      	mov	r3, r4
 80137d4:	469a      	mov	sl, r3
 80137d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80137da:	b10a      	cbz	r2, 80137e0 <_svfiprintf_r+0x60>
 80137dc:	2a25      	cmp	r2, #37	@ 0x25
 80137de:	d1f9      	bne.n	80137d4 <_svfiprintf_r+0x54>
 80137e0:	ebba 0b04 	subs.w	fp, sl, r4
 80137e4:	d00b      	beq.n	80137fe <_svfiprintf_r+0x7e>
 80137e6:	465b      	mov	r3, fp
 80137e8:	4622      	mov	r2, r4
 80137ea:	4629      	mov	r1, r5
 80137ec:	4638      	mov	r0, r7
 80137ee:	f7ff ff6b 	bl	80136c8 <__ssputs_r>
 80137f2:	3001      	adds	r0, #1
 80137f4:	f000 80a7 	beq.w	8013946 <_svfiprintf_r+0x1c6>
 80137f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80137fa:	445a      	add	r2, fp
 80137fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80137fe:	f89a 3000 	ldrb.w	r3, [sl]
 8013802:	2b00      	cmp	r3, #0
 8013804:	f000 809f 	beq.w	8013946 <_svfiprintf_r+0x1c6>
 8013808:	2300      	movs	r3, #0
 801380a:	f04f 32ff 	mov.w	r2, #4294967295
 801380e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013812:	f10a 0a01 	add.w	sl, sl, #1
 8013816:	9304      	str	r3, [sp, #16]
 8013818:	9307      	str	r3, [sp, #28]
 801381a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801381e:	931a      	str	r3, [sp, #104]	@ 0x68
 8013820:	4654      	mov	r4, sl
 8013822:	2205      	movs	r2, #5
 8013824:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013828:	484e      	ldr	r0, [pc, #312]	@ (8013964 <_svfiprintf_r+0x1e4>)
 801382a:	f7ec fcd9 	bl	80001e0 <memchr>
 801382e:	9a04      	ldr	r2, [sp, #16]
 8013830:	b9d8      	cbnz	r0, 801386a <_svfiprintf_r+0xea>
 8013832:	06d0      	lsls	r0, r2, #27
 8013834:	bf44      	itt	mi
 8013836:	2320      	movmi	r3, #32
 8013838:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801383c:	0711      	lsls	r1, r2, #28
 801383e:	bf44      	itt	mi
 8013840:	232b      	movmi	r3, #43	@ 0x2b
 8013842:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013846:	f89a 3000 	ldrb.w	r3, [sl]
 801384a:	2b2a      	cmp	r3, #42	@ 0x2a
 801384c:	d015      	beq.n	801387a <_svfiprintf_r+0xfa>
 801384e:	9a07      	ldr	r2, [sp, #28]
 8013850:	4654      	mov	r4, sl
 8013852:	2000      	movs	r0, #0
 8013854:	f04f 0c0a 	mov.w	ip, #10
 8013858:	4621      	mov	r1, r4
 801385a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801385e:	3b30      	subs	r3, #48	@ 0x30
 8013860:	2b09      	cmp	r3, #9
 8013862:	d94b      	bls.n	80138fc <_svfiprintf_r+0x17c>
 8013864:	b1b0      	cbz	r0, 8013894 <_svfiprintf_r+0x114>
 8013866:	9207      	str	r2, [sp, #28]
 8013868:	e014      	b.n	8013894 <_svfiprintf_r+0x114>
 801386a:	eba0 0308 	sub.w	r3, r0, r8
 801386e:	fa09 f303 	lsl.w	r3, r9, r3
 8013872:	4313      	orrs	r3, r2
 8013874:	9304      	str	r3, [sp, #16]
 8013876:	46a2      	mov	sl, r4
 8013878:	e7d2      	b.n	8013820 <_svfiprintf_r+0xa0>
 801387a:	9b03      	ldr	r3, [sp, #12]
 801387c:	1d19      	adds	r1, r3, #4
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	9103      	str	r1, [sp, #12]
 8013882:	2b00      	cmp	r3, #0
 8013884:	bfbb      	ittet	lt
 8013886:	425b      	neglt	r3, r3
 8013888:	f042 0202 	orrlt.w	r2, r2, #2
 801388c:	9307      	strge	r3, [sp, #28]
 801388e:	9307      	strlt	r3, [sp, #28]
 8013890:	bfb8      	it	lt
 8013892:	9204      	strlt	r2, [sp, #16]
 8013894:	7823      	ldrb	r3, [r4, #0]
 8013896:	2b2e      	cmp	r3, #46	@ 0x2e
 8013898:	d10a      	bne.n	80138b0 <_svfiprintf_r+0x130>
 801389a:	7863      	ldrb	r3, [r4, #1]
 801389c:	2b2a      	cmp	r3, #42	@ 0x2a
 801389e:	d132      	bne.n	8013906 <_svfiprintf_r+0x186>
 80138a0:	9b03      	ldr	r3, [sp, #12]
 80138a2:	1d1a      	adds	r2, r3, #4
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	9203      	str	r2, [sp, #12]
 80138a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80138ac:	3402      	adds	r4, #2
 80138ae:	9305      	str	r3, [sp, #20]
 80138b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013974 <_svfiprintf_r+0x1f4>
 80138b4:	7821      	ldrb	r1, [r4, #0]
 80138b6:	2203      	movs	r2, #3
 80138b8:	4650      	mov	r0, sl
 80138ba:	f7ec fc91 	bl	80001e0 <memchr>
 80138be:	b138      	cbz	r0, 80138d0 <_svfiprintf_r+0x150>
 80138c0:	9b04      	ldr	r3, [sp, #16]
 80138c2:	eba0 000a 	sub.w	r0, r0, sl
 80138c6:	2240      	movs	r2, #64	@ 0x40
 80138c8:	4082      	lsls	r2, r0
 80138ca:	4313      	orrs	r3, r2
 80138cc:	3401      	adds	r4, #1
 80138ce:	9304      	str	r3, [sp, #16]
 80138d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138d4:	4824      	ldr	r0, [pc, #144]	@ (8013968 <_svfiprintf_r+0x1e8>)
 80138d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80138da:	2206      	movs	r2, #6
 80138dc:	f7ec fc80 	bl	80001e0 <memchr>
 80138e0:	2800      	cmp	r0, #0
 80138e2:	d036      	beq.n	8013952 <_svfiprintf_r+0x1d2>
 80138e4:	4b21      	ldr	r3, [pc, #132]	@ (801396c <_svfiprintf_r+0x1ec>)
 80138e6:	bb1b      	cbnz	r3, 8013930 <_svfiprintf_r+0x1b0>
 80138e8:	9b03      	ldr	r3, [sp, #12]
 80138ea:	3307      	adds	r3, #7
 80138ec:	f023 0307 	bic.w	r3, r3, #7
 80138f0:	3308      	adds	r3, #8
 80138f2:	9303      	str	r3, [sp, #12]
 80138f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80138f6:	4433      	add	r3, r6
 80138f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80138fa:	e76a      	b.n	80137d2 <_svfiprintf_r+0x52>
 80138fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8013900:	460c      	mov	r4, r1
 8013902:	2001      	movs	r0, #1
 8013904:	e7a8      	b.n	8013858 <_svfiprintf_r+0xd8>
 8013906:	2300      	movs	r3, #0
 8013908:	3401      	adds	r4, #1
 801390a:	9305      	str	r3, [sp, #20]
 801390c:	4619      	mov	r1, r3
 801390e:	f04f 0c0a 	mov.w	ip, #10
 8013912:	4620      	mov	r0, r4
 8013914:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013918:	3a30      	subs	r2, #48	@ 0x30
 801391a:	2a09      	cmp	r2, #9
 801391c:	d903      	bls.n	8013926 <_svfiprintf_r+0x1a6>
 801391e:	2b00      	cmp	r3, #0
 8013920:	d0c6      	beq.n	80138b0 <_svfiprintf_r+0x130>
 8013922:	9105      	str	r1, [sp, #20]
 8013924:	e7c4      	b.n	80138b0 <_svfiprintf_r+0x130>
 8013926:	fb0c 2101 	mla	r1, ip, r1, r2
 801392a:	4604      	mov	r4, r0
 801392c:	2301      	movs	r3, #1
 801392e:	e7f0      	b.n	8013912 <_svfiprintf_r+0x192>
 8013930:	ab03      	add	r3, sp, #12
 8013932:	9300      	str	r3, [sp, #0]
 8013934:	462a      	mov	r2, r5
 8013936:	4b0e      	ldr	r3, [pc, #56]	@ (8013970 <_svfiprintf_r+0x1f0>)
 8013938:	a904      	add	r1, sp, #16
 801393a:	4638      	mov	r0, r7
 801393c:	f7fd fef0 	bl	8011720 <_printf_float>
 8013940:	1c42      	adds	r2, r0, #1
 8013942:	4606      	mov	r6, r0
 8013944:	d1d6      	bne.n	80138f4 <_svfiprintf_r+0x174>
 8013946:	89ab      	ldrh	r3, [r5, #12]
 8013948:	065b      	lsls	r3, r3, #25
 801394a:	f53f af2d 	bmi.w	80137a8 <_svfiprintf_r+0x28>
 801394e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013950:	e72c      	b.n	80137ac <_svfiprintf_r+0x2c>
 8013952:	ab03      	add	r3, sp, #12
 8013954:	9300      	str	r3, [sp, #0]
 8013956:	462a      	mov	r2, r5
 8013958:	4b05      	ldr	r3, [pc, #20]	@ (8013970 <_svfiprintf_r+0x1f0>)
 801395a:	a904      	add	r1, sp, #16
 801395c:	4638      	mov	r0, r7
 801395e:	f7fe f977 	bl	8011c50 <_printf_i>
 8013962:	e7ed      	b.n	8013940 <_svfiprintf_r+0x1c0>
 8013964:	08015d70 	.word	0x08015d70
 8013968:	08015d7a 	.word	0x08015d7a
 801396c:	08011721 	.word	0x08011721
 8013970:	080136c9 	.word	0x080136c9
 8013974:	08015d76 	.word	0x08015d76

08013978 <__sflush_r>:
 8013978:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801397c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013980:	0716      	lsls	r6, r2, #28
 8013982:	4605      	mov	r5, r0
 8013984:	460c      	mov	r4, r1
 8013986:	d454      	bmi.n	8013a32 <__sflush_r+0xba>
 8013988:	684b      	ldr	r3, [r1, #4]
 801398a:	2b00      	cmp	r3, #0
 801398c:	dc02      	bgt.n	8013994 <__sflush_r+0x1c>
 801398e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013990:	2b00      	cmp	r3, #0
 8013992:	dd48      	ble.n	8013a26 <__sflush_r+0xae>
 8013994:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013996:	2e00      	cmp	r6, #0
 8013998:	d045      	beq.n	8013a26 <__sflush_r+0xae>
 801399a:	2300      	movs	r3, #0
 801399c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80139a0:	682f      	ldr	r7, [r5, #0]
 80139a2:	6a21      	ldr	r1, [r4, #32]
 80139a4:	602b      	str	r3, [r5, #0]
 80139a6:	d030      	beq.n	8013a0a <__sflush_r+0x92>
 80139a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80139aa:	89a3      	ldrh	r3, [r4, #12]
 80139ac:	0759      	lsls	r1, r3, #29
 80139ae:	d505      	bpl.n	80139bc <__sflush_r+0x44>
 80139b0:	6863      	ldr	r3, [r4, #4]
 80139b2:	1ad2      	subs	r2, r2, r3
 80139b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80139b6:	b10b      	cbz	r3, 80139bc <__sflush_r+0x44>
 80139b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80139ba:	1ad2      	subs	r2, r2, r3
 80139bc:	2300      	movs	r3, #0
 80139be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80139c0:	6a21      	ldr	r1, [r4, #32]
 80139c2:	4628      	mov	r0, r5
 80139c4:	47b0      	blx	r6
 80139c6:	1c43      	adds	r3, r0, #1
 80139c8:	89a3      	ldrh	r3, [r4, #12]
 80139ca:	d106      	bne.n	80139da <__sflush_r+0x62>
 80139cc:	6829      	ldr	r1, [r5, #0]
 80139ce:	291d      	cmp	r1, #29
 80139d0:	d82b      	bhi.n	8013a2a <__sflush_r+0xb2>
 80139d2:	4a2a      	ldr	r2, [pc, #168]	@ (8013a7c <__sflush_r+0x104>)
 80139d4:	410a      	asrs	r2, r1
 80139d6:	07d6      	lsls	r6, r2, #31
 80139d8:	d427      	bmi.n	8013a2a <__sflush_r+0xb2>
 80139da:	2200      	movs	r2, #0
 80139dc:	6062      	str	r2, [r4, #4]
 80139de:	04d9      	lsls	r1, r3, #19
 80139e0:	6922      	ldr	r2, [r4, #16]
 80139e2:	6022      	str	r2, [r4, #0]
 80139e4:	d504      	bpl.n	80139f0 <__sflush_r+0x78>
 80139e6:	1c42      	adds	r2, r0, #1
 80139e8:	d101      	bne.n	80139ee <__sflush_r+0x76>
 80139ea:	682b      	ldr	r3, [r5, #0]
 80139ec:	b903      	cbnz	r3, 80139f0 <__sflush_r+0x78>
 80139ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80139f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80139f2:	602f      	str	r7, [r5, #0]
 80139f4:	b1b9      	cbz	r1, 8013a26 <__sflush_r+0xae>
 80139f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80139fa:	4299      	cmp	r1, r3
 80139fc:	d002      	beq.n	8013a04 <__sflush_r+0x8c>
 80139fe:	4628      	mov	r0, r5
 8013a00:	f7ff fa96 	bl	8012f30 <_free_r>
 8013a04:	2300      	movs	r3, #0
 8013a06:	6363      	str	r3, [r4, #52]	@ 0x34
 8013a08:	e00d      	b.n	8013a26 <__sflush_r+0xae>
 8013a0a:	2301      	movs	r3, #1
 8013a0c:	4628      	mov	r0, r5
 8013a0e:	47b0      	blx	r6
 8013a10:	4602      	mov	r2, r0
 8013a12:	1c50      	adds	r0, r2, #1
 8013a14:	d1c9      	bne.n	80139aa <__sflush_r+0x32>
 8013a16:	682b      	ldr	r3, [r5, #0]
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d0c6      	beq.n	80139aa <__sflush_r+0x32>
 8013a1c:	2b1d      	cmp	r3, #29
 8013a1e:	d001      	beq.n	8013a24 <__sflush_r+0xac>
 8013a20:	2b16      	cmp	r3, #22
 8013a22:	d11e      	bne.n	8013a62 <__sflush_r+0xea>
 8013a24:	602f      	str	r7, [r5, #0]
 8013a26:	2000      	movs	r0, #0
 8013a28:	e022      	b.n	8013a70 <__sflush_r+0xf8>
 8013a2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013a2e:	b21b      	sxth	r3, r3
 8013a30:	e01b      	b.n	8013a6a <__sflush_r+0xf2>
 8013a32:	690f      	ldr	r7, [r1, #16]
 8013a34:	2f00      	cmp	r7, #0
 8013a36:	d0f6      	beq.n	8013a26 <__sflush_r+0xae>
 8013a38:	0793      	lsls	r3, r2, #30
 8013a3a:	680e      	ldr	r6, [r1, #0]
 8013a3c:	bf08      	it	eq
 8013a3e:	694b      	ldreq	r3, [r1, #20]
 8013a40:	600f      	str	r7, [r1, #0]
 8013a42:	bf18      	it	ne
 8013a44:	2300      	movne	r3, #0
 8013a46:	eba6 0807 	sub.w	r8, r6, r7
 8013a4a:	608b      	str	r3, [r1, #8]
 8013a4c:	f1b8 0f00 	cmp.w	r8, #0
 8013a50:	dde9      	ble.n	8013a26 <__sflush_r+0xae>
 8013a52:	6a21      	ldr	r1, [r4, #32]
 8013a54:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013a56:	4643      	mov	r3, r8
 8013a58:	463a      	mov	r2, r7
 8013a5a:	4628      	mov	r0, r5
 8013a5c:	47b0      	blx	r6
 8013a5e:	2800      	cmp	r0, #0
 8013a60:	dc08      	bgt.n	8013a74 <__sflush_r+0xfc>
 8013a62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013a6a:	81a3      	strh	r3, [r4, #12]
 8013a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8013a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a74:	4407      	add	r7, r0
 8013a76:	eba8 0800 	sub.w	r8, r8, r0
 8013a7a:	e7e7      	b.n	8013a4c <__sflush_r+0xd4>
 8013a7c:	dfbffffe 	.word	0xdfbffffe

08013a80 <_fflush_r>:
 8013a80:	b538      	push	{r3, r4, r5, lr}
 8013a82:	690b      	ldr	r3, [r1, #16]
 8013a84:	4605      	mov	r5, r0
 8013a86:	460c      	mov	r4, r1
 8013a88:	b913      	cbnz	r3, 8013a90 <_fflush_r+0x10>
 8013a8a:	2500      	movs	r5, #0
 8013a8c:	4628      	mov	r0, r5
 8013a8e:	bd38      	pop	{r3, r4, r5, pc}
 8013a90:	b118      	cbz	r0, 8013a9a <_fflush_r+0x1a>
 8013a92:	6a03      	ldr	r3, [r0, #32]
 8013a94:	b90b      	cbnz	r3, 8013a9a <_fflush_r+0x1a>
 8013a96:	f7fe fa87 	bl	8011fa8 <__sinit>
 8013a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d0f3      	beq.n	8013a8a <_fflush_r+0xa>
 8013aa2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013aa4:	07d0      	lsls	r0, r2, #31
 8013aa6:	d404      	bmi.n	8013ab2 <_fflush_r+0x32>
 8013aa8:	0599      	lsls	r1, r3, #22
 8013aaa:	d402      	bmi.n	8013ab2 <_fflush_r+0x32>
 8013aac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013aae:	f7fe fbe6 	bl	801227e <__retarget_lock_acquire_recursive>
 8013ab2:	4628      	mov	r0, r5
 8013ab4:	4621      	mov	r1, r4
 8013ab6:	f7ff ff5f 	bl	8013978 <__sflush_r>
 8013aba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013abc:	07da      	lsls	r2, r3, #31
 8013abe:	4605      	mov	r5, r0
 8013ac0:	d4e4      	bmi.n	8013a8c <_fflush_r+0xc>
 8013ac2:	89a3      	ldrh	r3, [r4, #12]
 8013ac4:	059b      	lsls	r3, r3, #22
 8013ac6:	d4e1      	bmi.n	8013a8c <_fflush_r+0xc>
 8013ac8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013aca:	f7fe fbd9 	bl	8012280 <__retarget_lock_release_recursive>
 8013ace:	e7dd      	b.n	8013a8c <_fflush_r+0xc>

08013ad0 <memmove>:
 8013ad0:	4288      	cmp	r0, r1
 8013ad2:	b510      	push	{r4, lr}
 8013ad4:	eb01 0402 	add.w	r4, r1, r2
 8013ad8:	d902      	bls.n	8013ae0 <memmove+0x10>
 8013ada:	4284      	cmp	r4, r0
 8013adc:	4623      	mov	r3, r4
 8013ade:	d807      	bhi.n	8013af0 <memmove+0x20>
 8013ae0:	1e43      	subs	r3, r0, #1
 8013ae2:	42a1      	cmp	r1, r4
 8013ae4:	d008      	beq.n	8013af8 <memmove+0x28>
 8013ae6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013aea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013aee:	e7f8      	b.n	8013ae2 <memmove+0x12>
 8013af0:	4402      	add	r2, r0
 8013af2:	4601      	mov	r1, r0
 8013af4:	428a      	cmp	r2, r1
 8013af6:	d100      	bne.n	8013afa <memmove+0x2a>
 8013af8:	bd10      	pop	{r4, pc}
 8013afa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013afe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013b02:	e7f7      	b.n	8013af4 <memmove+0x24>

08013b04 <memcpy>:
 8013b04:	440a      	add	r2, r1
 8013b06:	4291      	cmp	r1, r2
 8013b08:	f100 33ff 	add.w	r3, r0, #4294967295
 8013b0c:	d100      	bne.n	8013b10 <memcpy+0xc>
 8013b0e:	4770      	bx	lr
 8013b10:	b510      	push	{r4, lr}
 8013b12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013b16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013b1a:	4291      	cmp	r1, r2
 8013b1c:	d1f9      	bne.n	8013b12 <memcpy+0xe>
 8013b1e:	bd10      	pop	{r4, pc}

08013b20 <__assert_func>:
 8013b20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013b22:	4614      	mov	r4, r2
 8013b24:	461a      	mov	r2, r3
 8013b26:	4b09      	ldr	r3, [pc, #36]	@ (8013b4c <__assert_func+0x2c>)
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	4605      	mov	r5, r0
 8013b2c:	68d8      	ldr	r0, [r3, #12]
 8013b2e:	b954      	cbnz	r4, 8013b46 <__assert_func+0x26>
 8013b30:	4b07      	ldr	r3, [pc, #28]	@ (8013b50 <__assert_func+0x30>)
 8013b32:	461c      	mov	r4, r3
 8013b34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013b38:	9100      	str	r1, [sp, #0]
 8013b3a:	462b      	mov	r3, r5
 8013b3c:	4905      	ldr	r1, [pc, #20]	@ (8013b54 <__assert_func+0x34>)
 8013b3e:	f000 f86f 	bl	8013c20 <fiprintf>
 8013b42:	f7fd fc87 	bl	8011454 <abort>
 8013b46:	4b04      	ldr	r3, [pc, #16]	@ (8013b58 <__assert_func+0x38>)
 8013b48:	e7f4      	b.n	8013b34 <__assert_func+0x14>
 8013b4a:	bf00      	nop
 8013b4c:	2000001c 	.word	0x2000001c
 8013b50:	08015dc6 	.word	0x08015dc6
 8013b54:	08015d98 	.word	0x08015d98
 8013b58:	08015d8b 	.word	0x08015d8b

08013b5c <_calloc_r>:
 8013b5c:	b570      	push	{r4, r5, r6, lr}
 8013b5e:	fba1 5402 	umull	r5, r4, r1, r2
 8013b62:	b93c      	cbnz	r4, 8013b74 <_calloc_r+0x18>
 8013b64:	4629      	mov	r1, r5
 8013b66:	f7fd fcaf 	bl	80114c8 <_malloc_r>
 8013b6a:	4606      	mov	r6, r0
 8013b6c:	b928      	cbnz	r0, 8013b7a <_calloc_r+0x1e>
 8013b6e:	2600      	movs	r6, #0
 8013b70:	4630      	mov	r0, r6
 8013b72:	bd70      	pop	{r4, r5, r6, pc}
 8013b74:	220c      	movs	r2, #12
 8013b76:	6002      	str	r2, [r0, #0]
 8013b78:	e7f9      	b.n	8013b6e <_calloc_r+0x12>
 8013b7a:	462a      	mov	r2, r5
 8013b7c:	4621      	mov	r1, r4
 8013b7e:	f7fe faac 	bl	80120da <memset>
 8013b82:	e7f5      	b.n	8013b70 <_calloc_r+0x14>

08013b84 <__ascii_mbtowc>:
 8013b84:	b082      	sub	sp, #8
 8013b86:	b901      	cbnz	r1, 8013b8a <__ascii_mbtowc+0x6>
 8013b88:	a901      	add	r1, sp, #4
 8013b8a:	b142      	cbz	r2, 8013b9e <__ascii_mbtowc+0x1a>
 8013b8c:	b14b      	cbz	r3, 8013ba2 <__ascii_mbtowc+0x1e>
 8013b8e:	7813      	ldrb	r3, [r2, #0]
 8013b90:	600b      	str	r3, [r1, #0]
 8013b92:	7812      	ldrb	r2, [r2, #0]
 8013b94:	1e10      	subs	r0, r2, #0
 8013b96:	bf18      	it	ne
 8013b98:	2001      	movne	r0, #1
 8013b9a:	b002      	add	sp, #8
 8013b9c:	4770      	bx	lr
 8013b9e:	4610      	mov	r0, r2
 8013ba0:	e7fb      	b.n	8013b9a <__ascii_mbtowc+0x16>
 8013ba2:	f06f 0001 	mvn.w	r0, #1
 8013ba6:	e7f8      	b.n	8013b9a <__ascii_mbtowc+0x16>

08013ba8 <_realloc_r>:
 8013ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bac:	4680      	mov	r8, r0
 8013bae:	4615      	mov	r5, r2
 8013bb0:	460c      	mov	r4, r1
 8013bb2:	b921      	cbnz	r1, 8013bbe <_realloc_r+0x16>
 8013bb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013bb8:	4611      	mov	r1, r2
 8013bba:	f7fd bc85 	b.w	80114c8 <_malloc_r>
 8013bbe:	b92a      	cbnz	r2, 8013bcc <_realloc_r+0x24>
 8013bc0:	f7ff f9b6 	bl	8012f30 <_free_r>
 8013bc4:	2400      	movs	r4, #0
 8013bc6:	4620      	mov	r0, r4
 8013bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bcc:	f000 f83a 	bl	8013c44 <_malloc_usable_size_r>
 8013bd0:	4285      	cmp	r5, r0
 8013bd2:	4606      	mov	r6, r0
 8013bd4:	d802      	bhi.n	8013bdc <_realloc_r+0x34>
 8013bd6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8013bda:	d8f4      	bhi.n	8013bc6 <_realloc_r+0x1e>
 8013bdc:	4629      	mov	r1, r5
 8013bde:	4640      	mov	r0, r8
 8013be0:	f7fd fc72 	bl	80114c8 <_malloc_r>
 8013be4:	4607      	mov	r7, r0
 8013be6:	2800      	cmp	r0, #0
 8013be8:	d0ec      	beq.n	8013bc4 <_realloc_r+0x1c>
 8013bea:	42b5      	cmp	r5, r6
 8013bec:	462a      	mov	r2, r5
 8013bee:	4621      	mov	r1, r4
 8013bf0:	bf28      	it	cs
 8013bf2:	4632      	movcs	r2, r6
 8013bf4:	f7ff ff86 	bl	8013b04 <memcpy>
 8013bf8:	4621      	mov	r1, r4
 8013bfa:	4640      	mov	r0, r8
 8013bfc:	f7ff f998 	bl	8012f30 <_free_r>
 8013c00:	463c      	mov	r4, r7
 8013c02:	e7e0      	b.n	8013bc6 <_realloc_r+0x1e>

08013c04 <__ascii_wctomb>:
 8013c04:	4603      	mov	r3, r0
 8013c06:	4608      	mov	r0, r1
 8013c08:	b141      	cbz	r1, 8013c1c <__ascii_wctomb+0x18>
 8013c0a:	2aff      	cmp	r2, #255	@ 0xff
 8013c0c:	d904      	bls.n	8013c18 <__ascii_wctomb+0x14>
 8013c0e:	228a      	movs	r2, #138	@ 0x8a
 8013c10:	601a      	str	r2, [r3, #0]
 8013c12:	f04f 30ff 	mov.w	r0, #4294967295
 8013c16:	4770      	bx	lr
 8013c18:	700a      	strb	r2, [r1, #0]
 8013c1a:	2001      	movs	r0, #1
 8013c1c:	4770      	bx	lr
	...

08013c20 <fiprintf>:
 8013c20:	b40e      	push	{r1, r2, r3}
 8013c22:	b503      	push	{r0, r1, lr}
 8013c24:	4601      	mov	r1, r0
 8013c26:	ab03      	add	r3, sp, #12
 8013c28:	4805      	ldr	r0, [pc, #20]	@ (8013c40 <fiprintf+0x20>)
 8013c2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013c2e:	6800      	ldr	r0, [r0, #0]
 8013c30:	9301      	str	r3, [sp, #4]
 8013c32:	f000 f839 	bl	8013ca8 <_vfiprintf_r>
 8013c36:	b002      	add	sp, #8
 8013c38:	f85d eb04 	ldr.w	lr, [sp], #4
 8013c3c:	b003      	add	sp, #12
 8013c3e:	4770      	bx	lr
 8013c40:	2000001c 	.word	0x2000001c

08013c44 <_malloc_usable_size_r>:
 8013c44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013c48:	1f18      	subs	r0, r3, #4
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	bfbc      	itt	lt
 8013c4e:	580b      	ldrlt	r3, [r1, r0]
 8013c50:	18c0      	addlt	r0, r0, r3
 8013c52:	4770      	bx	lr

08013c54 <__sfputc_r>:
 8013c54:	6893      	ldr	r3, [r2, #8]
 8013c56:	3b01      	subs	r3, #1
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	b410      	push	{r4}
 8013c5c:	6093      	str	r3, [r2, #8]
 8013c5e:	da08      	bge.n	8013c72 <__sfputc_r+0x1e>
 8013c60:	6994      	ldr	r4, [r2, #24]
 8013c62:	42a3      	cmp	r3, r4
 8013c64:	db01      	blt.n	8013c6a <__sfputc_r+0x16>
 8013c66:	290a      	cmp	r1, #10
 8013c68:	d103      	bne.n	8013c72 <__sfputc_r+0x1e>
 8013c6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013c6e:	f000 b933 	b.w	8013ed8 <__swbuf_r>
 8013c72:	6813      	ldr	r3, [r2, #0]
 8013c74:	1c58      	adds	r0, r3, #1
 8013c76:	6010      	str	r0, [r2, #0]
 8013c78:	7019      	strb	r1, [r3, #0]
 8013c7a:	4608      	mov	r0, r1
 8013c7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013c80:	4770      	bx	lr

08013c82 <__sfputs_r>:
 8013c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c84:	4606      	mov	r6, r0
 8013c86:	460f      	mov	r7, r1
 8013c88:	4614      	mov	r4, r2
 8013c8a:	18d5      	adds	r5, r2, r3
 8013c8c:	42ac      	cmp	r4, r5
 8013c8e:	d101      	bne.n	8013c94 <__sfputs_r+0x12>
 8013c90:	2000      	movs	r0, #0
 8013c92:	e007      	b.n	8013ca4 <__sfputs_r+0x22>
 8013c94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c98:	463a      	mov	r2, r7
 8013c9a:	4630      	mov	r0, r6
 8013c9c:	f7ff ffda 	bl	8013c54 <__sfputc_r>
 8013ca0:	1c43      	adds	r3, r0, #1
 8013ca2:	d1f3      	bne.n	8013c8c <__sfputs_r+0xa>
 8013ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013ca8 <_vfiprintf_r>:
 8013ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cac:	460d      	mov	r5, r1
 8013cae:	b09d      	sub	sp, #116	@ 0x74
 8013cb0:	4614      	mov	r4, r2
 8013cb2:	4698      	mov	r8, r3
 8013cb4:	4606      	mov	r6, r0
 8013cb6:	b118      	cbz	r0, 8013cc0 <_vfiprintf_r+0x18>
 8013cb8:	6a03      	ldr	r3, [r0, #32]
 8013cba:	b90b      	cbnz	r3, 8013cc0 <_vfiprintf_r+0x18>
 8013cbc:	f7fe f974 	bl	8011fa8 <__sinit>
 8013cc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013cc2:	07d9      	lsls	r1, r3, #31
 8013cc4:	d405      	bmi.n	8013cd2 <_vfiprintf_r+0x2a>
 8013cc6:	89ab      	ldrh	r3, [r5, #12]
 8013cc8:	059a      	lsls	r2, r3, #22
 8013cca:	d402      	bmi.n	8013cd2 <_vfiprintf_r+0x2a>
 8013ccc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013cce:	f7fe fad6 	bl	801227e <__retarget_lock_acquire_recursive>
 8013cd2:	89ab      	ldrh	r3, [r5, #12]
 8013cd4:	071b      	lsls	r3, r3, #28
 8013cd6:	d501      	bpl.n	8013cdc <_vfiprintf_r+0x34>
 8013cd8:	692b      	ldr	r3, [r5, #16]
 8013cda:	b99b      	cbnz	r3, 8013d04 <_vfiprintf_r+0x5c>
 8013cdc:	4629      	mov	r1, r5
 8013cde:	4630      	mov	r0, r6
 8013ce0:	f000 f938 	bl	8013f54 <__swsetup_r>
 8013ce4:	b170      	cbz	r0, 8013d04 <_vfiprintf_r+0x5c>
 8013ce6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013ce8:	07dc      	lsls	r4, r3, #31
 8013cea:	d504      	bpl.n	8013cf6 <_vfiprintf_r+0x4e>
 8013cec:	f04f 30ff 	mov.w	r0, #4294967295
 8013cf0:	b01d      	add	sp, #116	@ 0x74
 8013cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cf6:	89ab      	ldrh	r3, [r5, #12]
 8013cf8:	0598      	lsls	r0, r3, #22
 8013cfa:	d4f7      	bmi.n	8013cec <_vfiprintf_r+0x44>
 8013cfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013cfe:	f7fe fabf 	bl	8012280 <__retarget_lock_release_recursive>
 8013d02:	e7f3      	b.n	8013cec <_vfiprintf_r+0x44>
 8013d04:	2300      	movs	r3, #0
 8013d06:	9309      	str	r3, [sp, #36]	@ 0x24
 8013d08:	2320      	movs	r3, #32
 8013d0a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013d0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013d12:	2330      	movs	r3, #48	@ 0x30
 8013d14:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013ec4 <_vfiprintf_r+0x21c>
 8013d18:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013d1c:	f04f 0901 	mov.w	r9, #1
 8013d20:	4623      	mov	r3, r4
 8013d22:	469a      	mov	sl, r3
 8013d24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013d28:	b10a      	cbz	r2, 8013d2e <_vfiprintf_r+0x86>
 8013d2a:	2a25      	cmp	r2, #37	@ 0x25
 8013d2c:	d1f9      	bne.n	8013d22 <_vfiprintf_r+0x7a>
 8013d2e:	ebba 0b04 	subs.w	fp, sl, r4
 8013d32:	d00b      	beq.n	8013d4c <_vfiprintf_r+0xa4>
 8013d34:	465b      	mov	r3, fp
 8013d36:	4622      	mov	r2, r4
 8013d38:	4629      	mov	r1, r5
 8013d3a:	4630      	mov	r0, r6
 8013d3c:	f7ff ffa1 	bl	8013c82 <__sfputs_r>
 8013d40:	3001      	adds	r0, #1
 8013d42:	f000 80a7 	beq.w	8013e94 <_vfiprintf_r+0x1ec>
 8013d46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013d48:	445a      	add	r2, fp
 8013d4a:	9209      	str	r2, [sp, #36]	@ 0x24
 8013d4c:	f89a 3000 	ldrb.w	r3, [sl]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	f000 809f 	beq.w	8013e94 <_vfiprintf_r+0x1ec>
 8013d56:	2300      	movs	r3, #0
 8013d58:	f04f 32ff 	mov.w	r2, #4294967295
 8013d5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013d60:	f10a 0a01 	add.w	sl, sl, #1
 8013d64:	9304      	str	r3, [sp, #16]
 8013d66:	9307      	str	r3, [sp, #28]
 8013d68:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013d6c:	931a      	str	r3, [sp, #104]	@ 0x68
 8013d6e:	4654      	mov	r4, sl
 8013d70:	2205      	movs	r2, #5
 8013d72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d76:	4853      	ldr	r0, [pc, #332]	@ (8013ec4 <_vfiprintf_r+0x21c>)
 8013d78:	f7ec fa32 	bl	80001e0 <memchr>
 8013d7c:	9a04      	ldr	r2, [sp, #16]
 8013d7e:	b9d8      	cbnz	r0, 8013db8 <_vfiprintf_r+0x110>
 8013d80:	06d1      	lsls	r1, r2, #27
 8013d82:	bf44      	itt	mi
 8013d84:	2320      	movmi	r3, #32
 8013d86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013d8a:	0713      	lsls	r3, r2, #28
 8013d8c:	bf44      	itt	mi
 8013d8e:	232b      	movmi	r3, #43	@ 0x2b
 8013d90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013d94:	f89a 3000 	ldrb.w	r3, [sl]
 8013d98:	2b2a      	cmp	r3, #42	@ 0x2a
 8013d9a:	d015      	beq.n	8013dc8 <_vfiprintf_r+0x120>
 8013d9c:	9a07      	ldr	r2, [sp, #28]
 8013d9e:	4654      	mov	r4, sl
 8013da0:	2000      	movs	r0, #0
 8013da2:	f04f 0c0a 	mov.w	ip, #10
 8013da6:	4621      	mov	r1, r4
 8013da8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013dac:	3b30      	subs	r3, #48	@ 0x30
 8013dae:	2b09      	cmp	r3, #9
 8013db0:	d94b      	bls.n	8013e4a <_vfiprintf_r+0x1a2>
 8013db2:	b1b0      	cbz	r0, 8013de2 <_vfiprintf_r+0x13a>
 8013db4:	9207      	str	r2, [sp, #28]
 8013db6:	e014      	b.n	8013de2 <_vfiprintf_r+0x13a>
 8013db8:	eba0 0308 	sub.w	r3, r0, r8
 8013dbc:	fa09 f303 	lsl.w	r3, r9, r3
 8013dc0:	4313      	orrs	r3, r2
 8013dc2:	9304      	str	r3, [sp, #16]
 8013dc4:	46a2      	mov	sl, r4
 8013dc6:	e7d2      	b.n	8013d6e <_vfiprintf_r+0xc6>
 8013dc8:	9b03      	ldr	r3, [sp, #12]
 8013dca:	1d19      	adds	r1, r3, #4
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	9103      	str	r1, [sp, #12]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	bfbb      	ittet	lt
 8013dd4:	425b      	neglt	r3, r3
 8013dd6:	f042 0202 	orrlt.w	r2, r2, #2
 8013dda:	9307      	strge	r3, [sp, #28]
 8013ddc:	9307      	strlt	r3, [sp, #28]
 8013dde:	bfb8      	it	lt
 8013de0:	9204      	strlt	r2, [sp, #16]
 8013de2:	7823      	ldrb	r3, [r4, #0]
 8013de4:	2b2e      	cmp	r3, #46	@ 0x2e
 8013de6:	d10a      	bne.n	8013dfe <_vfiprintf_r+0x156>
 8013de8:	7863      	ldrb	r3, [r4, #1]
 8013dea:	2b2a      	cmp	r3, #42	@ 0x2a
 8013dec:	d132      	bne.n	8013e54 <_vfiprintf_r+0x1ac>
 8013dee:	9b03      	ldr	r3, [sp, #12]
 8013df0:	1d1a      	adds	r2, r3, #4
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	9203      	str	r2, [sp, #12]
 8013df6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013dfa:	3402      	adds	r4, #2
 8013dfc:	9305      	str	r3, [sp, #20]
 8013dfe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013ed4 <_vfiprintf_r+0x22c>
 8013e02:	7821      	ldrb	r1, [r4, #0]
 8013e04:	2203      	movs	r2, #3
 8013e06:	4650      	mov	r0, sl
 8013e08:	f7ec f9ea 	bl	80001e0 <memchr>
 8013e0c:	b138      	cbz	r0, 8013e1e <_vfiprintf_r+0x176>
 8013e0e:	9b04      	ldr	r3, [sp, #16]
 8013e10:	eba0 000a 	sub.w	r0, r0, sl
 8013e14:	2240      	movs	r2, #64	@ 0x40
 8013e16:	4082      	lsls	r2, r0
 8013e18:	4313      	orrs	r3, r2
 8013e1a:	3401      	adds	r4, #1
 8013e1c:	9304      	str	r3, [sp, #16]
 8013e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e22:	4829      	ldr	r0, [pc, #164]	@ (8013ec8 <_vfiprintf_r+0x220>)
 8013e24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013e28:	2206      	movs	r2, #6
 8013e2a:	f7ec f9d9 	bl	80001e0 <memchr>
 8013e2e:	2800      	cmp	r0, #0
 8013e30:	d03f      	beq.n	8013eb2 <_vfiprintf_r+0x20a>
 8013e32:	4b26      	ldr	r3, [pc, #152]	@ (8013ecc <_vfiprintf_r+0x224>)
 8013e34:	bb1b      	cbnz	r3, 8013e7e <_vfiprintf_r+0x1d6>
 8013e36:	9b03      	ldr	r3, [sp, #12]
 8013e38:	3307      	adds	r3, #7
 8013e3a:	f023 0307 	bic.w	r3, r3, #7
 8013e3e:	3308      	adds	r3, #8
 8013e40:	9303      	str	r3, [sp, #12]
 8013e42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e44:	443b      	add	r3, r7
 8013e46:	9309      	str	r3, [sp, #36]	@ 0x24
 8013e48:	e76a      	b.n	8013d20 <_vfiprintf_r+0x78>
 8013e4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8013e4e:	460c      	mov	r4, r1
 8013e50:	2001      	movs	r0, #1
 8013e52:	e7a8      	b.n	8013da6 <_vfiprintf_r+0xfe>
 8013e54:	2300      	movs	r3, #0
 8013e56:	3401      	adds	r4, #1
 8013e58:	9305      	str	r3, [sp, #20]
 8013e5a:	4619      	mov	r1, r3
 8013e5c:	f04f 0c0a 	mov.w	ip, #10
 8013e60:	4620      	mov	r0, r4
 8013e62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013e66:	3a30      	subs	r2, #48	@ 0x30
 8013e68:	2a09      	cmp	r2, #9
 8013e6a:	d903      	bls.n	8013e74 <_vfiprintf_r+0x1cc>
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d0c6      	beq.n	8013dfe <_vfiprintf_r+0x156>
 8013e70:	9105      	str	r1, [sp, #20]
 8013e72:	e7c4      	b.n	8013dfe <_vfiprintf_r+0x156>
 8013e74:	fb0c 2101 	mla	r1, ip, r1, r2
 8013e78:	4604      	mov	r4, r0
 8013e7a:	2301      	movs	r3, #1
 8013e7c:	e7f0      	b.n	8013e60 <_vfiprintf_r+0x1b8>
 8013e7e:	ab03      	add	r3, sp, #12
 8013e80:	9300      	str	r3, [sp, #0]
 8013e82:	462a      	mov	r2, r5
 8013e84:	4b12      	ldr	r3, [pc, #72]	@ (8013ed0 <_vfiprintf_r+0x228>)
 8013e86:	a904      	add	r1, sp, #16
 8013e88:	4630      	mov	r0, r6
 8013e8a:	f7fd fc49 	bl	8011720 <_printf_float>
 8013e8e:	4607      	mov	r7, r0
 8013e90:	1c78      	adds	r0, r7, #1
 8013e92:	d1d6      	bne.n	8013e42 <_vfiprintf_r+0x19a>
 8013e94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013e96:	07d9      	lsls	r1, r3, #31
 8013e98:	d405      	bmi.n	8013ea6 <_vfiprintf_r+0x1fe>
 8013e9a:	89ab      	ldrh	r3, [r5, #12]
 8013e9c:	059a      	lsls	r2, r3, #22
 8013e9e:	d402      	bmi.n	8013ea6 <_vfiprintf_r+0x1fe>
 8013ea0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013ea2:	f7fe f9ed 	bl	8012280 <__retarget_lock_release_recursive>
 8013ea6:	89ab      	ldrh	r3, [r5, #12]
 8013ea8:	065b      	lsls	r3, r3, #25
 8013eaa:	f53f af1f 	bmi.w	8013cec <_vfiprintf_r+0x44>
 8013eae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013eb0:	e71e      	b.n	8013cf0 <_vfiprintf_r+0x48>
 8013eb2:	ab03      	add	r3, sp, #12
 8013eb4:	9300      	str	r3, [sp, #0]
 8013eb6:	462a      	mov	r2, r5
 8013eb8:	4b05      	ldr	r3, [pc, #20]	@ (8013ed0 <_vfiprintf_r+0x228>)
 8013eba:	a904      	add	r1, sp, #16
 8013ebc:	4630      	mov	r0, r6
 8013ebe:	f7fd fec7 	bl	8011c50 <_printf_i>
 8013ec2:	e7e4      	b.n	8013e8e <_vfiprintf_r+0x1e6>
 8013ec4:	08015d70 	.word	0x08015d70
 8013ec8:	08015d7a 	.word	0x08015d7a
 8013ecc:	08011721 	.word	0x08011721
 8013ed0:	08013c83 	.word	0x08013c83
 8013ed4:	08015d76 	.word	0x08015d76

08013ed8 <__swbuf_r>:
 8013ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013eda:	460e      	mov	r6, r1
 8013edc:	4614      	mov	r4, r2
 8013ede:	4605      	mov	r5, r0
 8013ee0:	b118      	cbz	r0, 8013eea <__swbuf_r+0x12>
 8013ee2:	6a03      	ldr	r3, [r0, #32]
 8013ee4:	b90b      	cbnz	r3, 8013eea <__swbuf_r+0x12>
 8013ee6:	f7fe f85f 	bl	8011fa8 <__sinit>
 8013eea:	69a3      	ldr	r3, [r4, #24]
 8013eec:	60a3      	str	r3, [r4, #8]
 8013eee:	89a3      	ldrh	r3, [r4, #12]
 8013ef0:	071a      	lsls	r2, r3, #28
 8013ef2:	d501      	bpl.n	8013ef8 <__swbuf_r+0x20>
 8013ef4:	6923      	ldr	r3, [r4, #16]
 8013ef6:	b943      	cbnz	r3, 8013f0a <__swbuf_r+0x32>
 8013ef8:	4621      	mov	r1, r4
 8013efa:	4628      	mov	r0, r5
 8013efc:	f000 f82a 	bl	8013f54 <__swsetup_r>
 8013f00:	b118      	cbz	r0, 8013f0a <__swbuf_r+0x32>
 8013f02:	f04f 37ff 	mov.w	r7, #4294967295
 8013f06:	4638      	mov	r0, r7
 8013f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f0a:	6823      	ldr	r3, [r4, #0]
 8013f0c:	6922      	ldr	r2, [r4, #16]
 8013f0e:	1a98      	subs	r0, r3, r2
 8013f10:	6963      	ldr	r3, [r4, #20]
 8013f12:	b2f6      	uxtb	r6, r6
 8013f14:	4283      	cmp	r3, r0
 8013f16:	4637      	mov	r7, r6
 8013f18:	dc05      	bgt.n	8013f26 <__swbuf_r+0x4e>
 8013f1a:	4621      	mov	r1, r4
 8013f1c:	4628      	mov	r0, r5
 8013f1e:	f7ff fdaf 	bl	8013a80 <_fflush_r>
 8013f22:	2800      	cmp	r0, #0
 8013f24:	d1ed      	bne.n	8013f02 <__swbuf_r+0x2a>
 8013f26:	68a3      	ldr	r3, [r4, #8]
 8013f28:	3b01      	subs	r3, #1
 8013f2a:	60a3      	str	r3, [r4, #8]
 8013f2c:	6823      	ldr	r3, [r4, #0]
 8013f2e:	1c5a      	adds	r2, r3, #1
 8013f30:	6022      	str	r2, [r4, #0]
 8013f32:	701e      	strb	r6, [r3, #0]
 8013f34:	6962      	ldr	r2, [r4, #20]
 8013f36:	1c43      	adds	r3, r0, #1
 8013f38:	429a      	cmp	r2, r3
 8013f3a:	d004      	beq.n	8013f46 <__swbuf_r+0x6e>
 8013f3c:	89a3      	ldrh	r3, [r4, #12]
 8013f3e:	07db      	lsls	r3, r3, #31
 8013f40:	d5e1      	bpl.n	8013f06 <__swbuf_r+0x2e>
 8013f42:	2e0a      	cmp	r6, #10
 8013f44:	d1df      	bne.n	8013f06 <__swbuf_r+0x2e>
 8013f46:	4621      	mov	r1, r4
 8013f48:	4628      	mov	r0, r5
 8013f4a:	f7ff fd99 	bl	8013a80 <_fflush_r>
 8013f4e:	2800      	cmp	r0, #0
 8013f50:	d0d9      	beq.n	8013f06 <__swbuf_r+0x2e>
 8013f52:	e7d6      	b.n	8013f02 <__swbuf_r+0x2a>

08013f54 <__swsetup_r>:
 8013f54:	b538      	push	{r3, r4, r5, lr}
 8013f56:	4b29      	ldr	r3, [pc, #164]	@ (8013ffc <__swsetup_r+0xa8>)
 8013f58:	4605      	mov	r5, r0
 8013f5a:	6818      	ldr	r0, [r3, #0]
 8013f5c:	460c      	mov	r4, r1
 8013f5e:	b118      	cbz	r0, 8013f68 <__swsetup_r+0x14>
 8013f60:	6a03      	ldr	r3, [r0, #32]
 8013f62:	b90b      	cbnz	r3, 8013f68 <__swsetup_r+0x14>
 8013f64:	f7fe f820 	bl	8011fa8 <__sinit>
 8013f68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f6c:	0719      	lsls	r1, r3, #28
 8013f6e:	d422      	bmi.n	8013fb6 <__swsetup_r+0x62>
 8013f70:	06da      	lsls	r2, r3, #27
 8013f72:	d407      	bmi.n	8013f84 <__swsetup_r+0x30>
 8013f74:	2209      	movs	r2, #9
 8013f76:	602a      	str	r2, [r5, #0]
 8013f78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013f7c:	81a3      	strh	r3, [r4, #12]
 8013f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8013f82:	e033      	b.n	8013fec <__swsetup_r+0x98>
 8013f84:	0758      	lsls	r0, r3, #29
 8013f86:	d512      	bpl.n	8013fae <__swsetup_r+0x5a>
 8013f88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013f8a:	b141      	cbz	r1, 8013f9e <__swsetup_r+0x4a>
 8013f8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013f90:	4299      	cmp	r1, r3
 8013f92:	d002      	beq.n	8013f9a <__swsetup_r+0x46>
 8013f94:	4628      	mov	r0, r5
 8013f96:	f7fe ffcb 	bl	8012f30 <_free_r>
 8013f9a:	2300      	movs	r3, #0
 8013f9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8013f9e:	89a3      	ldrh	r3, [r4, #12]
 8013fa0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013fa4:	81a3      	strh	r3, [r4, #12]
 8013fa6:	2300      	movs	r3, #0
 8013fa8:	6063      	str	r3, [r4, #4]
 8013faa:	6923      	ldr	r3, [r4, #16]
 8013fac:	6023      	str	r3, [r4, #0]
 8013fae:	89a3      	ldrh	r3, [r4, #12]
 8013fb0:	f043 0308 	orr.w	r3, r3, #8
 8013fb4:	81a3      	strh	r3, [r4, #12]
 8013fb6:	6923      	ldr	r3, [r4, #16]
 8013fb8:	b94b      	cbnz	r3, 8013fce <__swsetup_r+0x7a>
 8013fba:	89a3      	ldrh	r3, [r4, #12]
 8013fbc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013fc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013fc4:	d003      	beq.n	8013fce <__swsetup_r+0x7a>
 8013fc6:	4621      	mov	r1, r4
 8013fc8:	4628      	mov	r0, r5
 8013fca:	f000 f83f 	bl	801404c <__smakebuf_r>
 8013fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013fd2:	f013 0201 	ands.w	r2, r3, #1
 8013fd6:	d00a      	beq.n	8013fee <__swsetup_r+0x9a>
 8013fd8:	2200      	movs	r2, #0
 8013fda:	60a2      	str	r2, [r4, #8]
 8013fdc:	6962      	ldr	r2, [r4, #20]
 8013fde:	4252      	negs	r2, r2
 8013fe0:	61a2      	str	r2, [r4, #24]
 8013fe2:	6922      	ldr	r2, [r4, #16]
 8013fe4:	b942      	cbnz	r2, 8013ff8 <__swsetup_r+0xa4>
 8013fe6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013fea:	d1c5      	bne.n	8013f78 <__swsetup_r+0x24>
 8013fec:	bd38      	pop	{r3, r4, r5, pc}
 8013fee:	0799      	lsls	r1, r3, #30
 8013ff0:	bf58      	it	pl
 8013ff2:	6962      	ldrpl	r2, [r4, #20]
 8013ff4:	60a2      	str	r2, [r4, #8]
 8013ff6:	e7f4      	b.n	8013fe2 <__swsetup_r+0x8e>
 8013ff8:	2000      	movs	r0, #0
 8013ffa:	e7f7      	b.n	8013fec <__swsetup_r+0x98>
 8013ffc:	2000001c 	.word	0x2000001c

08014000 <__swhatbuf_r>:
 8014000:	b570      	push	{r4, r5, r6, lr}
 8014002:	460c      	mov	r4, r1
 8014004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014008:	2900      	cmp	r1, #0
 801400a:	b096      	sub	sp, #88	@ 0x58
 801400c:	4615      	mov	r5, r2
 801400e:	461e      	mov	r6, r3
 8014010:	da0d      	bge.n	801402e <__swhatbuf_r+0x2e>
 8014012:	89a3      	ldrh	r3, [r4, #12]
 8014014:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014018:	f04f 0100 	mov.w	r1, #0
 801401c:	bf14      	ite	ne
 801401e:	2340      	movne	r3, #64	@ 0x40
 8014020:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014024:	2000      	movs	r0, #0
 8014026:	6031      	str	r1, [r6, #0]
 8014028:	602b      	str	r3, [r5, #0]
 801402a:	b016      	add	sp, #88	@ 0x58
 801402c:	bd70      	pop	{r4, r5, r6, pc}
 801402e:	466a      	mov	r2, sp
 8014030:	f000 f848 	bl	80140c4 <_fstat_r>
 8014034:	2800      	cmp	r0, #0
 8014036:	dbec      	blt.n	8014012 <__swhatbuf_r+0x12>
 8014038:	9901      	ldr	r1, [sp, #4]
 801403a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801403e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014042:	4259      	negs	r1, r3
 8014044:	4159      	adcs	r1, r3
 8014046:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801404a:	e7eb      	b.n	8014024 <__swhatbuf_r+0x24>

0801404c <__smakebuf_r>:
 801404c:	898b      	ldrh	r3, [r1, #12]
 801404e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014050:	079d      	lsls	r5, r3, #30
 8014052:	4606      	mov	r6, r0
 8014054:	460c      	mov	r4, r1
 8014056:	d507      	bpl.n	8014068 <__smakebuf_r+0x1c>
 8014058:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801405c:	6023      	str	r3, [r4, #0]
 801405e:	6123      	str	r3, [r4, #16]
 8014060:	2301      	movs	r3, #1
 8014062:	6163      	str	r3, [r4, #20]
 8014064:	b003      	add	sp, #12
 8014066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014068:	ab01      	add	r3, sp, #4
 801406a:	466a      	mov	r2, sp
 801406c:	f7ff ffc8 	bl	8014000 <__swhatbuf_r>
 8014070:	9f00      	ldr	r7, [sp, #0]
 8014072:	4605      	mov	r5, r0
 8014074:	4639      	mov	r1, r7
 8014076:	4630      	mov	r0, r6
 8014078:	f7fd fa26 	bl	80114c8 <_malloc_r>
 801407c:	b948      	cbnz	r0, 8014092 <__smakebuf_r+0x46>
 801407e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014082:	059a      	lsls	r2, r3, #22
 8014084:	d4ee      	bmi.n	8014064 <__smakebuf_r+0x18>
 8014086:	f023 0303 	bic.w	r3, r3, #3
 801408a:	f043 0302 	orr.w	r3, r3, #2
 801408e:	81a3      	strh	r3, [r4, #12]
 8014090:	e7e2      	b.n	8014058 <__smakebuf_r+0xc>
 8014092:	89a3      	ldrh	r3, [r4, #12]
 8014094:	6020      	str	r0, [r4, #0]
 8014096:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801409a:	81a3      	strh	r3, [r4, #12]
 801409c:	9b01      	ldr	r3, [sp, #4]
 801409e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80140a2:	b15b      	cbz	r3, 80140bc <__smakebuf_r+0x70>
 80140a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80140a8:	4630      	mov	r0, r6
 80140aa:	f000 f81d 	bl	80140e8 <_isatty_r>
 80140ae:	b128      	cbz	r0, 80140bc <__smakebuf_r+0x70>
 80140b0:	89a3      	ldrh	r3, [r4, #12]
 80140b2:	f023 0303 	bic.w	r3, r3, #3
 80140b6:	f043 0301 	orr.w	r3, r3, #1
 80140ba:	81a3      	strh	r3, [r4, #12]
 80140bc:	89a3      	ldrh	r3, [r4, #12]
 80140be:	431d      	orrs	r5, r3
 80140c0:	81a5      	strh	r5, [r4, #12]
 80140c2:	e7cf      	b.n	8014064 <__smakebuf_r+0x18>

080140c4 <_fstat_r>:
 80140c4:	b538      	push	{r3, r4, r5, lr}
 80140c6:	4d07      	ldr	r5, [pc, #28]	@ (80140e4 <_fstat_r+0x20>)
 80140c8:	2300      	movs	r3, #0
 80140ca:	4604      	mov	r4, r0
 80140cc:	4608      	mov	r0, r1
 80140ce:	4611      	mov	r1, r2
 80140d0:	602b      	str	r3, [r5, #0]
 80140d2:	f7f8 ff73 	bl	800cfbc <_fstat>
 80140d6:	1c43      	adds	r3, r0, #1
 80140d8:	d102      	bne.n	80140e0 <_fstat_r+0x1c>
 80140da:	682b      	ldr	r3, [r5, #0]
 80140dc:	b103      	cbz	r3, 80140e0 <_fstat_r+0x1c>
 80140de:	6023      	str	r3, [r4, #0]
 80140e0:	bd38      	pop	{r3, r4, r5, pc}
 80140e2:	bf00      	nop
 80140e4:	20000704 	.word	0x20000704

080140e8 <_isatty_r>:
 80140e8:	b538      	push	{r3, r4, r5, lr}
 80140ea:	4d06      	ldr	r5, [pc, #24]	@ (8014104 <_isatty_r+0x1c>)
 80140ec:	2300      	movs	r3, #0
 80140ee:	4604      	mov	r4, r0
 80140f0:	4608      	mov	r0, r1
 80140f2:	602b      	str	r3, [r5, #0]
 80140f4:	f7f8 ff72 	bl	800cfdc <_isatty>
 80140f8:	1c43      	adds	r3, r0, #1
 80140fa:	d102      	bne.n	8014102 <_isatty_r+0x1a>
 80140fc:	682b      	ldr	r3, [r5, #0]
 80140fe:	b103      	cbz	r3, 8014102 <_isatty_r+0x1a>
 8014100:	6023      	str	r3, [r4, #0]
 8014102:	bd38      	pop	{r3, r4, r5, pc}
 8014104:	20000704 	.word	0x20000704

08014108 <_init>:
 8014108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801410a:	bf00      	nop
 801410c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801410e:	bc08      	pop	{r3}
 8014110:	469e      	mov	lr, r3
 8014112:	4770      	bx	lr

08014114 <_fini>:
 8014114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014116:	bf00      	nop
 8014118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801411a:	bc08      	pop	{r3}
 801411c:	469e      	mov	lr, r3
 801411e:	4770      	bx	lr

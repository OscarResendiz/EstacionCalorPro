
EstacionAireProM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f4d0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001078  0800f670  0800f670  00010670  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080106e8  080106e8  000121d8  2**0
                  CONTENTS
  4 .ARM          00000008  080106e8  080106e8  000116e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080106f0  080106f0  000121d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080106f0  080106f0  000116f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  080106f8  080106f8  000116f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08010700  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000418  200001d8  080108d8  000121d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f0  080108d8  000125f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000121d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ac05  00000000  00000000  00012208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000886d  00000000  00000000  0003ce0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002448  00000000  00000000  00045680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b7e  00000000  00000000  00047ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002191d  00000000  00000000  00049646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002cf5e  00000000  00000000  0006af63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9e7e  00000000  00000000  00097ec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00141d3f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a514  00000000  00000000  00141d84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0014c298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f658 	.word	0x0800f658

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800f658 	.word	0x0800f658

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <_ZN15CManejadorBotonC1Ev>:

#include "Boton/CManejadorBoton.hpp"
#include "Constantes.hpp"
#include "Uart/Uart.hpp"

CManejadorBoton::CManejadorBoton()
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	4a0c      	ldr	r2, [pc, #48]	@ (8000ee4 <_ZN15CManejadorBotonC1Ev+0x3c>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2201      	movs	r2, #1
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	611a      	str	r2, [r3, #16]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	615a      	str	r2, [r3, #20]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	619a      	str	r2, [r3, #24]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	61da      	str	r2, [r3, #28]
{
	// TODO Auto-generated constructor stub

}
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	0800f864 	.word	0x0800f864

08000ee8 <_ZN15CManejadorBotonD1Ev>:

CManejadorBoton::~CManejadorBoton()
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	4a04      	ldr	r2, [pc, #16]	@ (8000f04 <_ZN15CManejadorBotonD1Ev+0x1c>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	0800f864 	.word	0x0800f864

08000f08 <_ZN15CManejadorBotonD0Ev>:
CManejadorBoton::~CManejadorBoton()
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
}
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff ffe9 	bl	8000ee8 <_ZN15CManejadorBotonD1Ev>
 8000f16:	2120      	movs	r1, #32
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f00b fd27 	bl	800c96c <_ZdlPvj>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>:

void CManejadorBoton::Configurar(GPIO_TypeDef *puerto, uint16_t pin,uint8_t identificador)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	4611      	mov	r1, r2
 8000f34:	461a      	mov	r2, r3
 8000f36:	460b      	mov	r3, r1
 8000f38:	80fb      	strh	r3, [r7, #6]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	717b      	strb	r3, [r7, #5]
	GPIO_Port = puerto;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	68ba      	ldr	r2, [r7, #8]
 8000f42:	605a      	str	r2, [r3, #4]
	Gpio_Pin = pin;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	88fa      	ldrh	r2, [r7, #6]
 8000f48:	811a      	strh	r2, [r3, #8]
	Identificador = identificador;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	797a      	ldrb	r2, [r7, #5]
 8000f4e:	729a      	strb	r2, [r3, #10]
}
 8000f50:	bf00      	nop
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <_ZN15CManejadorBoton4InitEv>:
void CManejadorBoton::Init()
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
	{ 0 };
	GPIO_InitStruct.Pin = Gpio_Pin;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	891b      	ldrh	r3, [r3, #8]
 8000f78:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f107 020c 	add.w	r2, r7, #12
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f008 f835 	bl	8008ffc <HAL_GPIO_Init>
}
 8000f92:	bf00      	nop
 8000f94:	3720      	adds	r7, #32
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <_ZN15CManejadorBoton4LeerEv>:
int CManejadorBoton::Leer()
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(GPIO_Port, Gpio_Pin); // lee el pin
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685a      	ldr	r2, [r3, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	891b      	ldrh	r3, [r3, #8]
 8000faa:	4619      	mov	r1, r3
 8000fac:	4610      	mov	r0, r2
 8000fae:	f008 f9a9 	bl	8009304 <HAL_GPIO_ReadPin>
 8000fb2:	4603      	mov	r3, r0

}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>:
void CManejadorBoton::AsignaManejadorEventos(CManejadorEventosBoton *manejador)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
	Manejador = manejador;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	683a      	ldr	r2, [r7, #0]
 8000fca:	61da      	str	r2, [r3, #28]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <_ZN15CManejadorBoton7ProcesaEi>:
void CManejadorBoton::Procesa(int gpio_pin)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
	if (Manejador == NULL)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d02e      	beq.n	8001048 <_ZN15CManejadorBoton7ProcesaEi+0x70>
		return;
	if(gpio_pin!=Gpio_Pin)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	891b      	ldrh	r3, [r3, #8]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d12a      	bne.n	800104c <_ZN15CManejadorBoton7ProcesaEi+0x74>
		return;
	int estado = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
	estado = Leer();
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff ffcd 	bl	8000f9a <_ZN15CManejadorBoton4LeerEv>
 8001000:	60f8      	str	r0, [r7, #12]
	//leo el tiempo actual
	int tiempo = HAL_GetTick();
 8001002:	f007 fb85 	bl	8008710 <HAL_GetTick>
 8001006:	4603      	mov	r3, r0
 8001008:	60bb      	str	r3, [r7, #8]
	if ((tiempo - ReboteMilis) < TIEMPO_REBOTE)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b63      	cmp	r3, #99	@ 0x63
 8001014:	dd1c      	ble.n	8001050 <_ZN15CManejadorBoton7ProcesaEi+0x78>
	{
		//como todavia no pasa el tiempo de espera para evitar rebotes no hago nada
		return;
	}
	ReboteMilis = HAL_GetTick();  //leo el tiempo actual
 8001016:	f007 fb7b 	bl	8008710 <HAL_GetTick>
 800101a:	4603      	mov	r3, r0
 800101c:	461a      	mov	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	615a      	str	r2, [r3, #20]

	//ya filtre los rebotes, por lo que ahora si informo del cambio de estado del boton
	Estado = estado;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	60da      	str	r2, [r3, #12]
	if (Estado == BOTON_SUELTO)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d110      	bne.n	8001052 <_ZN15CManejadorBoton7ProcesaEi+0x7a>
	{
		Manejador->OnBotonClickEvent(Identificador);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	69d8      	ldr	r0, [r3, #28]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	69db      	ldr	r3, [r3, #28]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	3308      	adds	r3, #8
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	7a92      	ldrb	r2, [r2, #10]
 8001042:	4611      	mov	r1, r2
 8001044:	4798      	blx	r3
 8001046:	e004      	b.n	8001052 <_ZN15CManejadorBoton7ProcesaEi+0x7a>
		return;
 8001048:	bf00      	nop
 800104a:	e002      	b.n	8001052 <_ZN15CManejadorBoton7ProcesaEi+0x7a>
		return;
 800104c:	bf00      	nop
 800104e:	e000      	b.n	8001052 <_ZN15CManejadorBoton7ProcesaEi+0x7a>
		return;
 8001050:	bf00      	nop
	}
}
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <_ZN22CManejadorEventosBotonC1Ev>:
 *      Author: W10
 */

#include "Boton/CManejadorEventosBoton.hpp"

CManejadorEventosBoton::CManejadorEventosBoton()
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	4a04      	ldr	r2, [pc, #16]	@ (8001074 <_ZN22CManejadorEventosBotonC1Ev+0x1c>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4618      	mov	r0, r3
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	0800f874 	.word	0x0800f874

08001078 <_ZN22CManejadorEventosBotonD1Ev>:

CManejadorEventosBoton::~CManejadorEventosBoton()
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	4a04      	ldr	r2, [pc, #16]	@ (8001094 <_ZN22CManejadorEventosBotonD1Ev+0x1c>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4618      	mov	r0, r3
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	0800f874 	.word	0x0800f874

08001098 <_ZN22CManejadorEventosBotonD0Ev>:
CManejadorEventosBoton::~CManejadorEventosBoton()
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
}
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ffe9 	bl	8001078 <_ZN22CManejadorEventosBotonD1Ev>
 80010a6:	2104      	movs	r1, #4
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f00b fc5f 	bl	800c96c <_ZdlPvj>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <_ZN22CManejadorEventosBoton17OnBotonClickEventEi>:

void CManejadorEventosBoton::OnBotonClickEvent(int idBoton)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]

}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <_ZN10CalefactorC1Ev>:
 *      Author: W10
 */

#include <Calefactor/Calefactor.hpp>
#include "Uart/Uart.hpp"
Calefactor::Calefactor()
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	4a06      	ldr	r2, [pc, #24]	@ (80010f4 <_ZN10CalefactorC1Ev+0x24>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	60da      	str	r2, [r3, #12]
{
	// TODO Auto-generated constructor stub

}
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	0800f888 	.word	0x0800f888

080010f8 <_ZN10CalefactorD1Ev>:

Calefactor::~Calefactor()
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	4a04      	ldr	r2, [pc, #16]	@ (8001114 <_ZN10CalefactorD1Ev+0x1c>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	0800f888 	.word	0x0800f888

08001118 <_ZN10CalefactorD0Ev>:
Calefactor::~Calefactor()
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
}
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ffe9 	bl	80010f8 <_ZN10CalefactorD1Ev>
 8001126:	2110      	movs	r1, #16
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f00b fc1f 	bl	800c96c <_ZdlPvj>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <_ZN10Calefactor10ConfigurarEP12GPIO_TypeDeft>:

void Calefactor::Configurar(GPIO_TypeDef *puerto, uint16_t pin)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	4613      	mov	r3, r2
 8001144:	80fb      	strh	r3, [r7, #6]
	GPIO_Port = puerto;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	68ba      	ldr	r2, [r7, #8]
 800114a:	605a      	str	r2, [r3, #4]
	Gpio_Pin = pin;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	88fa      	ldrh	r2, [r7, #6]
 8001150:	811a      	strh	r2, [r3, #8]

}
 8001152:	bf00      	nop
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <_ZN10Calefactor4InitEv>:
void Calefactor::Init()
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b088      	sub	sp, #32
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =	{ 0 };
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
 8001174:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = Gpio_Pin;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	891b      	ldrh	r3, [r3, #8]
 800117a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117c:	2301      	movs	r3, #1
 800117e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f107 020c 	add.w	r2, r7, #12
 8001190:	4611      	mov	r1, r2
 8001192:	4618      	mov	r0, r3
 8001194:	f007 ff32 	bl	8008ffc <HAL_GPIO_Init>
	Apagar();
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f000 f817 	bl	80011cc <_ZN10Calefactor6ApagarEv>
}
 800119e:	bf00      	nop
 80011a0:	3720      	adds	r7, #32
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <_ZN10Calefactor8EncenderEv>:
void Calefactor::Encender()
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO_Port, Gpio_Pin,	GPIO_PinState::GPIO_PIN_SET);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6858      	ldr	r0, [r3, #4]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	891b      	ldrh	r3, [r3, #8]
 80011b6:	2201      	movs	r2, #1
 80011b8:	4619      	mov	r1, r3
 80011ba:	f008 f8bb 	bl	8009334 <HAL_GPIO_WritePin>
	Estado=ENCENDIDO;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2201      	movs	r2, #1
 80011c2:	60da      	str	r2, [r3, #12]
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <_ZN10Calefactor6ApagarEv>:
void Calefactor::Apagar()
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO_Port, Gpio_Pin,	GPIO_PinState::GPIO_PIN_RESET);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6858      	ldr	r0, [r3, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	891b      	ldrh	r3, [r3, #8]
 80011dc:	2200      	movs	r2, #0
 80011de:	4619      	mov	r1, r3
 80011e0:	f008 f8a8 	bl	8009334 <HAL_GPIO_WritePin>
	Estado=APAGADO;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <_ZN20ControlVelocidadAireC1Ev>:

#include "ControlVelocidadAire.hpp"
#include "stm32f4xx.h"
//#include "stm32f1xx_hal_adc.h"

ControlVelocidadAire::ControlVelocidadAire()
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	4a04      	ldr	r2, [pc, #16]	@ (8001210 <_ZN20ControlVelocidadAireC1Ev+0x1c>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4618      	mov	r0, r3
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	0800f898 	.word	0x0800f898

08001214 <_ZN20ControlVelocidadAireD1Ev>:

ControlVelocidadAire::~ControlVelocidadAire()
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	4a04      	ldr	r2, [pc, #16]	@ (8001230 <_ZN20ControlVelocidadAireD1Ev+0x1c>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4618      	mov	r0, r3
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	0800f898 	.word	0x0800f898

08001234 <_ZN20ControlVelocidadAireD0Ev>:
ControlVelocidadAire::~ControlVelocidadAire()
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
}
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ffe9 	bl	8001214 <_ZN20ControlVelocidadAireD1Ev>
 8001242:	214c      	movs	r1, #76	@ 0x4c
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f00b fb91 	bl	800c96c <_ZdlPvj>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <_ZN20ControlVelocidadAire10InicializaEv>:

void ControlVelocidadAire::Inicializa()
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	4b36      	ldr	r3, [pc, #216]	@ (800133c <_ZN20ControlVelocidadAire10InicializaEv+0xe8>)
 8001262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001264:	4a35      	ldr	r2, [pc, #212]	@ (800133c <_ZN20ControlVelocidadAire10InicializaEv+0xe8>)
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	6313      	str	r3, [r2, #48]	@ 0x30
 800126c:	4b33      	ldr	r3, [pc, #204]	@ (800133c <_ZN20ControlVelocidadAire10InicializaEv+0xe8>)
 800126e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	68fb      	ldr	r3, [r7, #12]
	 ADC_ChannelConfTypeDef sConfig = {0};
 8001278:	f107 0310 	add.w	r3, r7, #16
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
	 hadc1.Instance = ADC1;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a2d      	ldr	r2, [pc, #180]	@ (8001340 <_ZN20ControlVelocidadAire10InicializaEv+0xec>)
 800128a:	605a      	str	r2, [r3, #4]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2; //NUEVO
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B; //nuevo
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	60da      	str	r2, [r3, #12]

	 hadc1.Init.ScanConvMode =  DISABLE;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	615a      	str	r2, [r3, #20]
	 hadc1.Init.ContinuousConvMode = ENABLE;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2201      	movs	r2, #1
 80012a2:	771a      	strb	r2, [r3, #28]
	 hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	 hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;//nuevo
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	631a      	str	r2, [r3, #48]	@ 0x30
	 hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a23      	ldr	r2, [pc, #140]	@ (8001344 <_ZN20ControlVelocidadAire10InicializaEv+0xf0>)
 80012b6:	62da      	str	r2, [r3, #44]	@ 0x2c
	 hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
	 hadc1.State=	 HAL_ADC_STATE_RESET;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	645a      	str	r2, [r3, #68]	@ 0x44
	 hadc1.Init.NbrOfConversion = 1;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2201      	movs	r2, #1
 80012c8:	621a      	str	r2, [r3, #32]
	  hadc1.Init.DMAContinuousRequests = DISABLE; //nuevo
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2201      	movs	r2, #1
 80012d6:	619a      	str	r2, [r3, #24]

	 if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3304      	adds	r3, #4
 80012dc:	4618      	mov	r0, r3
 80012de:	f007 fa47 	bl	8008770 <HAL_ADC_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	bf14      	ite	ne
 80012e8:	2301      	movne	r3, #1
 80012ea:	2300      	moveq	r3, #0
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d002      	beq.n	80012f8 <_ZN20ControlVelocidadAire10InicializaEv+0xa4>
	 {
	 Error_Handler();
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f000 f84e 	bl	8001394 <_ZN20ControlVelocidadAire13Error_HandlerEv>
	 }

	 sConfig.Channel = ADC_CHANNEL_3;
 80012f8:	2303      	movs	r3, #3
 80012fa:	613b      	str	r3, [r7, #16]
	 sConfig.Rank =1; // ADC_REGULAR_RANK_1;
 80012fc:	2301      	movs	r3, #1
 80012fe:	617b      	str	r3, [r7, #20]
	 sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES; //ADC_SAMPLETIME_239CYCLES_5;
 8001300:	2300      	movs	r3, #0
 8001302:	61bb      	str	r3, [r7, #24]
	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3304      	adds	r3, #4
 8001308:	f107 0210 	add.w	r2, r7, #16
 800130c:	4611      	mov	r1, r2
 800130e:	4618      	mov	r0, r3
 8001310:	f007 fb34 	bl	800897c <HAL_ADC_ConfigChannel>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	bf14      	ite	ne
 800131a:	2301      	movne	r3, #1
 800131c:	2300      	moveq	r3, #0
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b00      	cmp	r3, #0
 8001322:	d002      	beq.n	800132a <_ZN20ControlVelocidadAire10InicializaEv+0xd6>
	 {
	 Error_Handler();
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f000 f835 	bl	8001394 <_ZN20ControlVelocidadAire13Error_HandlerEv>
	 }
	 HAL_ADC_Start(&hadc1);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3304      	adds	r3, #4
 800132e:	4618      	mov	r0, r3
 8001330:	f007 fa62 	bl	80087f8 <HAL_ADC_Start>
}
 8001334:	bf00      	nop
 8001336:	3720      	adds	r7, #32
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40023800 	.word	0x40023800
 8001340:	40012000 	.word	0x40012000
 8001344:	0f000001 	.word	0x0f000001

08001348 <_ZN20ControlVelocidadAire12LeeVelocidadEv>:
int ControlVelocidadAire::LeeVelocidad()
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	Inicializa();
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ff7f 	bl	8001254 <_ZN20ControlVelocidadAire10InicializaEv>
	HAL_ADC_Start(&hadc1);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3304      	adds	r3, #4
 800135a:	4618      	mov	r0, r3
 800135c:	f007 fa4c 	bl	80087f8 <HAL_ADC_Start>
	int valor=HAL_ADC_GetValue(&hadc1);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3304      	adds	r3, #4
 8001364:	4618      	mov	r0, r3
 8001366:	f007 fafb 	bl	8008960 <HAL_ADC_GetValue>
 800136a:	4603      	mov	r3, r0
 800136c:	60fb      	str	r3, [r7, #12]
	//4095->100
	//valor->X
	//x=valor*100/4095
	return 	100-(int)(valor*100/4095);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2264      	movs	r2, #100	@ 0x64
 8001372:	fb02 f303 	mul.w	r3, r2, r3
 8001376:	4a06      	ldr	r2, [pc, #24]	@ (8001390 <_ZN20ControlVelocidadAire12LeeVelocidadEv+0x48>)
 8001378:	fb82 1203 	smull	r1, r2, r2, r3
 800137c:	441a      	add	r2, r3
 800137e:	12d2      	asrs	r2, r2, #11
 8001380:	17db      	asrs	r3, r3, #31
 8001382:	1a9b      	subs	r3, r3, r2
 8001384:	3364      	adds	r3, #100	@ 0x64
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	80080081 	.word	0x80080081

08001394 <_ZN20ControlVelocidadAire13Error_HandlerEv>:
void ControlVelocidadAire::Error_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]

}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <_ZN8CEncoderC1Ev>:
 *      Author: W10
 */

#include "Encoder/CEncoder.hpp"

CEncoder::CEncoder()
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fe50 	bl	8001058 <_ZN22CManejadorEventosBotonC1Ev>
 80013b8:	4a0c      	ldr	r2, [pc, #48]	@ (80013ec <_ZN8CEncoderC1Ev+0x44>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	629a      	str	r2, [r3, #40]	@ 0x28
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	639a      	str	r2, [r3, #56]	@ 0x38
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	63da      	str	r2, [r3, #60]	@ 0x3c
{
	// TODO Auto-generated constructor stub

}
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	0800f8a8 	.word	0x0800f8a8

080013f0 <_ZN8CEncoderD1Ev>:

CEncoder::~CEncoder()
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	4a05      	ldr	r2, [pc, #20]	@ (8001410 <_ZN8CEncoderD1Ev+0x20>)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff fe39 	bl	8001078 <_ZN22CManejadorEventosBotonD1Ev>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4618      	mov	r0, r3
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	0800f8a8 	.word	0x0800f8a8

08001414 <_ZN8CEncoderD0Ev>:
CEncoder::~CEncoder()
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
}
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff ffe7 	bl	80013f0 <_ZN8CEncoderD1Ev>
 8001422:	214c      	movs	r1, #76	@ 0x4c
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f00b faa1 	bl	800c96c <_ZdlPvj>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <_ZN8CEncoder10ConfigurarEP12GPIO_TypeDeftS1_tS1_ti>:

void CEncoder::Configurar(GPIO_TypeDef *clk_Port, uint16_t pinClk,GPIO_TypeDef *dt_Port, uint16_t pinDt, GPIO_TypeDef *boton_Port,uint16_t pinBoton, int id_Encoder)
{
 8001434:	b590      	push	{r4, r7, lr}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	603b      	str	r3, [r7, #0]
 8001440:	4613      	mov	r3, r2
 8001442:	80fb      	strh	r3, [r7, #6]
	Clk_Port = clk_Port;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	68ba      	ldr	r2, [r7, #8]
 8001448:	605a      	str	r2, [r3, #4]
	PinClk = pinClk;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	88fa      	ldrh	r2, [r7, #6]
 800144e:	811a      	strh	r2, [r3, #8]

	Dt_Port = dt_Port;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	60da      	str	r2, [r3, #12]
	PinDt = pinDt;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	8c3a      	ldrh	r2, [r7, #32]
 800145a:	821a      	strh	r2, [r3, #16]

	Boton_Port = boton_Port;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001460:	615a      	str	r2, [r3, #20]
	PinBoton = pinBoton;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001466:	831a      	strh	r2, [r3, #24]

	ID_Encoder = id_Encoder;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800146c:	625a      	str	r2, [r3, #36]	@ 0x24
	Boton = new CManejadorBoton();
 800146e:	2020      	movs	r0, #32
 8001470:	f00b fa7e 	bl	800c970 <_Znwj>
 8001474:	4603      	mov	r3, r0
 8001476:	461c      	mov	r4, r3
 8001478:	4620      	mov	r0, r4
 800147a:	f7ff fd15 	bl	8000ea8 <_ZN15CManejadorBotonC1Ev>
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	61dc      	str	r4, [r3, #28]
	Boton->AsignaManejadorEventos(this);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	4611      	mov	r1, r2
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fd96 	bl	8000fbc <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	Boton->Configurar(Boton_Port, PinBoton, ID_BOTON);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	69d8      	ldr	r0, [r3, #28]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6959      	ldr	r1, [r3, #20]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	8b1a      	ldrh	r2, [r3, #24]
 800149c:	2303      	movs	r3, #3
 800149e:	f7ff fd43 	bl	8000f28 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	CLK_statusAnterior = LeeClk();
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f000 f807 	bl	80014b6 <_ZN8CEncoder6LeeClkEv>
 80014a8:	4602      	mov	r2, r0
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	641a      	str	r2, [r3, #64]	@ 0x40

}
 80014ae:	bf00      	nop
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd90      	pop	{r4, r7, pc}

080014b6 <_ZN8CEncoder6LeeClkEv>:

int CEncoder::LeeClk()
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(Clk_Port, PinClk);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	891b      	ldrh	r3, [r3, #8]
 80014c6:	4619      	mov	r1, r3
 80014c8:	4610      	mov	r0, r2
 80014ca:	f007 ff1b 	bl	8009304 <HAL_GPIO_ReadPin>
 80014ce:	4603      	mov	r3, r0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <_ZN8CEncoder5LeeDtEv>:
int CEncoder::LeeDt()
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(Dt_Port, PinDt);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	68da      	ldr	r2, [r3, #12]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	8a1b      	ldrh	r3, [r3, #16]
 80014e8:	4619      	mov	r1, r3
 80014ea:	4610      	mov	r0, r2
 80014ec:	f007 ff0a 	bl	8009304 <HAL_GPIO_ReadPin>
 80014f0:	4603      	mov	r3, r0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <_ZN8CEncoder4InitEv>:

void CEncoder::Init()
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b088      	sub	sp, #32
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 8001502:	f107 030c 	add.w	r3, r7, #12
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
 8001510:	611a      	str	r2, [r3, #16]
	{ 0 };
	// CKL
	GPIO_InitStruct.Pin = PinClk;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	891b      	ldrh	r3, [r3, #8]
 8001516:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode =GPIO_MODE_IT_RISING_FALLING;
 8001518:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800151c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(Clk_Port, &GPIO_InitStruct);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f107 020c 	add.w	r2, r7, #12
 800152a:	4611      	mov	r1, r2
 800152c:	4618      	mov	r0, r3
 800152e:	f007 fd65 	bl	8008ffc <HAL_GPIO_Init>
	//DT
	GPIO_InitStruct.Pin = PinDt;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	8a1b      	ldrh	r3, [r3, #16]
 8001536:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001538:	2300      	movs	r3, #0
 800153a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(Dt_Port, &GPIO_InitStruct);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	f107 020c 	add.w	r2, r7, #12
 8001548:	4611      	mov	r1, r2
 800154a:	4618      	mov	r0, r3
 800154c:	f007 fd56 	bl	8008ffc <HAL_GPIO_Init>
	//Boton
	GPIO_InitStruct.Pin = PinBoton;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	8b1b      	ldrh	r3, [r3, #24]
 8001554:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(Boton_Port, &GPIO_InitStruct);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	f107 020c 	add.w	r2, r7, #12
 8001566:	4611      	mov	r1, r2
 8001568:	4618      	mov	r0, r3
 800156a:	f007 fd47 	bl	8008ffc <HAL_GPIO_Init>
}
 800156e:	bf00      	nop
 8001570:	3720      	adds	r7, #32
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <_ZN8CEncoder22AsignaManejadorEventosEP24CManejadorEventosEncoder>:

void CEncoder::AsignaManejadorEventos(CManejadorEventosEncoder *manejador)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	6039      	str	r1, [r7, #0]
	Manejador = manejador;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	683a      	ldr	r2, [r7, #0]
 8001584:	621a      	str	r2, [r3, #32]
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <_ZN8CEncoder17OnBotonClickEventEi>:
void CEncoder::OnBotonClickEvent(int idBoton)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
 800159a:	6039      	str	r1, [r7, #0]

	switch (idBoton)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	2b03      	cmp	r3, #3
 80015a0:	d10b      	bne.n	80015ba <_ZN8CEncoder17OnBotonClickEventEi+0x28>
	{
	case ID_BOTON:
		Manejador->OnBotonEncoderClickEvent(ID_Encoder);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a18      	ldr	r0, [r3, #32]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a1b      	ldr	r3, [r3, #32]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	3310      	adds	r3, #16
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80015b4:	4611      	mov	r1, r2
 80015b6:	4798      	blx	r3
		break;
 80015b8:	bf00      	nop
	}
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <_ZN8CEncoder7ProcesaEi>:

void CEncoder::Procesa(int gpio_pin)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	6039      	str	r1, [r7, #0]
	Boton->Procesa(gpio_pin);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	69db      	ldr	r3, [r3, #28]
 80015d0:	6839      	ldr	r1, [r7, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fd00 	bl	8000fd8 <_ZN15CManejadorBoton7ProcesaEi>
	leeEncoder(gpio_pin);
 80015d8:	6839      	ldr	r1, [r7, #0]
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 f804 	bl	80015e8 <_ZN8CEncoder10leeEncoderEi>
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <_ZN8CEncoder10leeEncoderEi>:

void CEncoder::leeEncoder(int gpio_pin)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
	if(PinClk!=gpio_pin)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	891b      	ldrh	r3, [r3, #8]
 80015f6:	461a      	mov	r2, r3
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d128      	bne.n	8001650 <_ZN8CEncoder10leeEncoderEi+0x68>
		return;
	CLK_status = LeeClk();
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ff59 	bl	80014b6 <_ZN8CEncoder6LeeClkEv>
 8001604:	4602      	mov	r2, r0
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	629a      	str	r2, [r3, #40]	@ 0x28
	if (CLK_status != CLK_statusAnterior && CLK_status == 1)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001612:	429a      	cmp	r2, r3
 8001614:	d017      	beq.n	8001646 <_ZN8CEncoder10leeEncoderEi+0x5e>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800161a:	2b01      	cmp	r3, #1
 800161c:	d113      	bne.n	8001646 <_ZN8CEncoder10leeEncoderEi+0x5e>
	{
		if (LeeDt() != CLK_status)
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff ff5a 	bl	80014d8 <_ZN8CEncoder5LeeDtEv>
 8001624:	4602      	mov	r2, r0
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800162a:	429a      	cmp	r2, r3
 800162c:	bf14      	ite	ne
 800162e:	2301      	movne	r3, #1
 8001630:	2300      	moveq	r3, #0
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	d003      	beq.n	8001640 <_ZN8CEncoder10leeEncoderEi+0x58>
		{
			incrementa();
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 f80d 	bl	8001658 <_ZN8CEncoder10incrementaEv>
 800163e:	e002      	b.n	8001646 <_ZN8CEncoder10leeEncoderEi+0x5e>
		}
		else
		{
			decrementa();
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f000 f81c 	bl	800167e <_ZN8CEncoder10decrementaEv>
		}
	}
	CLK_statusAnterior = CLK_status;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	641a      	str	r2, [r3, #64]	@ 0x40
 800164e:	e000      	b.n	8001652 <_ZN8CEncoder10leeEncoderEi+0x6a>
		return;
 8001650:	bf00      	nop
}
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <_ZN8CEncoder10incrementaEv>:

void CEncoder::incrementa()
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	Manejador->OnIncrementoEncoder(ID_Encoder);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a18      	ldr	r0, [r3, #32]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	3308      	adds	r3, #8
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001672:	4611      	mov	r1, r2
 8001674:	4798      	blx	r3
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <_ZN8CEncoder10decrementaEv>:

void CEncoder::decrementa()
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
	Manejador->OnDecrementoEncoder(ID_Encoder);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a18      	ldr	r0, [r3, #32]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	330c      	adds	r3, #12
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001698:	4611      	mov	r1, r2
 800169a:	4798      	blx	r3
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <_ZN24CManejadorEventosEncoderC1Ev>:
 *      Author: W10
 */

#include <Encoder/CManejadorEventosEncoder.hpp>

CManejadorEventosEncoder::CManejadorEventosEncoder()
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	4a04      	ldr	r2, [pc, #16]	@ (80016c0 <_ZN24CManejadorEventosEncoderC1Ev+0x1c>)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4618      	mov	r0, r3
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	0800f8c0 	.word	0x0800f8c0

080016c4 <_ZN24CManejadorEventosEncoderD1Ev>:

CManejadorEventosEncoder::~CManejadorEventosEncoder()
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	4a04      	ldr	r2, [pc, #16]	@ (80016e0 <_ZN24CManejadorEventosEncoderD1Ev+0x1c>)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4618      	mov	r0, r3
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	0800f8c0 	.word	0x0800f8c0

080016e4 <_ZN24CManejadorEventosEncoderD0Ev>:
CManejadorEventosEncoder::~CManejadorEventosEncoder()
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
}
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ffe9 	bl	80016c4 <_ZN24CManejadorEventosEncoderD1Ev>
 80016f2:	2104      	movs	r1, #4
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f00b f939 	bl	800c96c <_ZdlPvj>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <_ZN24CManejadorEventosEncoder19OnIncrementoEncoderEi>:

void CManejadorEventosEncoder::OnIncrementoEncoder(int id_Encoder)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]

}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <_ZN24CManejadorEventosEncoder19OnDecrementoEncoderEi>:
void CManejadorEventosEncoder::OnDecrementoEncoder(int id_Encoder)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	6039      	str	r1, [r7, #0]

}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <_ZN24CManejadorEventosEncoder24OnBotonEncoderClickEventEi>:
void CManejadorEventosEncoder::OnBotonEncoderClickEvent(int id_Encoder)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]

}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
	...

08001748 <_ZN13CEstacionBaseC1Ev>:
 *      Author: W10
 */

#include <Estaciones/CEstacionBase.hpp>

CEstacionBase::CEstacionBase()
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	4a06      	ldr	r2, [pc, #24]	@ (800176c <_ZN13CEstacionBaseC1Ev+0x24>)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	605a      	str	r2, [r3, #4]
{
	// TODO Auto-generated constructor stub

}
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	0800f8dc 	.word	0x0800f8dc

08001770 <_ZN13CEstacionBaseD1Ev>:

CEstacionBase::~CEstacionBase()
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	4a04      	ldr	r2, [pc, #16]	@ (800178c <_ZN13CEstacionBaseD1Ev+0x1c>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4618      	mov	r0, r3
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	0800f8dc 	.word	0x0800f8dc

08001790 <_ZN13CEstacionBaseD0Ev>:
CEstacionBase::~CEstacionBase()
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
}
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff ffe9 	bl	8001770 <_ZN13CEstacionBaseD1Ev>
 800179e:	2108      	movs	r1, #8
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f00b f8e3 	bl	800c96c <_ZdlPvj>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <_ZN13CEstacionBase19GetTemperaturaRealxEv>:

float CEstacionBase::GetTemperaturaRealx() //regresa la tenperatura actual de la estacion
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	return 0;
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	ee07 3a90 	vmov	s15, r3
}
 80017c0:	eeb0 0a67 	vmov.f32	s0, s15
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <_ZN13CEstacionBase14SetTemperaturaEi>:
void CEstacionBase::SetTemperatura(int temperatura) //establece la temperatura que se quiere alcanzar
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	6039      	str	r1, [r7, #0]

}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <_ZN13CEstacionBase14GetTemperaturaEv>:
int CEstacionBase::GetTemperatura() // regresa la temperatura seteada
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
	return 0;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <_ZN13CEstacionBase12SetNivelAireEi>:
void CEstacionBase::SetNivelAire(int nivel) //establece el nivel de aire
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
 8001802:	6039      	str	r1, [r7, #0]

}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <_ZN13CEstacionBase12GetNivelAireEv>:
int CEstacionBase::GetNivelAire() //regresa el nivel de aire setado
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	return 0;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <_ZN13CEstacionBase9GetEstadoEv>:
int CEstacionBase::GetEstado() //regresa 1 si esta activo y 0 si esta en reposo
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
	return 0;
 800182e:	2300      	movs	r3, #0

}
 8001830:	4618      	mov	r0, r3
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <_ZN13CEstacionBase21IncrementaTemperaturaEv>:
//para que la misma estacion incremente la temperatura
void CEstacionBase::IncrementaTemperatura()
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]

}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <_ZN13CEstacionBase21DecrementaTemperaturaEv>:
//para que la misma estacion decremente la temeperatura
void CEstacionBase::DecrementaTemperatura()
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]

}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <_ZN13CEstacionBase21SetManejadorControlesEP26CManejadorEventosControles>:
// asigna el evento que sellamara cuando cambie la temperatura que el usuario especifica
void CEstacionBase::SetManejadorControles(CManejadorEventosControles *obj)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
	ManejadorControles = obj;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	605a      	str	r2, [r3, #4]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <_ZN13CEstacionBase7ProcesaEv>:
//funcion que se debera llamar para controlar la estacion de calor
void CEstacionBase::Procesa()
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]

}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <_ZN13CEstacionBase14NivelAireEventEi>:
void CEstacionBase::NivelAireEvent(int aire)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00a      	beq.n	80018bc <_ZN13CEstacionBase14NivelAireEventEi+0x28>
		return;
	ManejadorControles->OnNivelAireEvent(aire);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	330c      	adds	r3, #12
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6839      	ldr	r1, [r7, #0]
 80018b6:	4610      	mov	r0, r2
 80018b8:	4798      	blx	r3
 80018ba:	e000      	b.n	80018be <_ZN13CEstacionBase14NivelAireEventEi+0x2a>
		return;
 80018bc:	bf00      	nop
}
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <_ZN13CEstacionBase20TemperaturaRealEventEi>:
void CEstacionBase::TemperaturaRealEvent(int temperatura)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00a      	beq.n	80018ec <_ZN13CEstacionBase20TemperaturaRealEventEi+0x28>
		return;
	ManejadorControles->OnTemperaturaRealEvent(temperatura);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	3308      	adds	r3, #8
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6839      	ldr	r1, [r7, #0]
 80018e6:	4610      	mov	r0, r2
 80018e8:	4798      	blx	r3
 80018ea:	e000      	b.n	80018ee <_ZN13CEstacionBase20TemperaturaRealEventEi+0x2a>
		return;
 80018ec:	bf00      	nop

}
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <_ZN13CEstacionBase17ActivarCalefactorEv>:
void CEstacionBase::ActivarCalefactor()
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]

}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <_ZN13CEstacionBase20DesactivarCalefactorEv>:
void CEstacionBase::DesactivarCalefactor()
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]

}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <_ZN13CEstacionBase10CruceXCeroEi>:
void CEstacionBase::CruceXCero(int gpio_pin)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]

}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <_ZN13CEstacionBase9TimerTickEv>:
void CEstacionBase::TimerTick()
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]

}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <_ZN13CEstacionBase6GetPIDEv>:
int CEstacionBase::GetPID()
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
	return 0;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <_ZN13CEstacionBase6SetPIDEi>:
void CEstacionBase::SetPID(int valor)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]

}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <_ZN13CEstacionBase17GPIO_INTERRUPCIONEi>:
void CEstacionBase::GPIO_INTERRUPCION(int GPIO_Pin)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
 800197a:	6039      	str	r1, [r7, #0]

}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <_ZN13CEstacionBase23QuitaManejadorControlesEv>:
void CEstacionBase::QuitaManejadorControles()
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
	ManejadorControles = NULL;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	605a      	str	r2, [r3, #4]
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <_ZN16CestacionBaku601D1Ev>:
#include "Constantes.hpp"
#include "Uart/Uart.hpp"
#include "SensorTemperatura/Max6675/MAX6675.hpp"
#include <SensorTemperatura/SensorAnalogico.hpp>

CestacionBaku601::~CestacionBaku601()
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	4a11      	ldr	r2, [pc, #68]	@ (80019f4 <_ZN16CestacionBaku601D1Ev+0x50>)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	4a11      	ldr	r2, [pc, #68]	@ (80019f8 <_ZN16CestacionBaku601D1Ev+0x54>)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	609a      	str	r2, [r3, #8]
{
	// TODO Auto-generated destructor stub
}
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	33c8      	adds	r3, #200	@ 0xc8
 80019bc:	4618      	mov	r0, r3
 80019be:	f005 f92d 	bl	8006c1c <_ZN15SensorMagneticoD1Ev>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	33b8      	adds	r3, #184	@ 0xb8
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff fb96 	bl	80010f8 <_ZN10CalefactorD1Ev>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	336c      	adds	r3, #108	@ 0x6c
 80019d0:	4618      	mov	r0, r3
 80019d2:	f004 ffdf 	bl	8006994 <_ZN3PwmD1Ev>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	3308      	adds	r3, #8
 80019da:	4618      	mov	r0, r3
 80019dc:	f005 f8d6 	bl	8006b8c <_ZN31CManejadorEventoSensorMagneticoD1Ev>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fec4 	bl	8001770 <_ZN13CEstacionBaseD1Ev>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	0800f93c 	.word	0x0800f93c
 80019f8:	0800f9a0 	.word	0x0800f9a0

080019fc <_ZThn8_N16CestacionBaku601D1Ev>:
	int NivelAire=0;
	float TemperaturaRealActual;
	int conteolecturatemperatura=0;
public:
	CestacionBaku601();
	virtual ~CestacionBaku601();
 80019fc:	f1a0 0008 	sub.w	r0, r0, #8
 8001a00:	f7ff bfd0 	b.w	80019a4 <_ZN16CestacionBaku601D1Ev>

08001a04 <_ZN16CestacionBaku601D0Ev>:
CestacionBaku601::~CestacionBaku601()
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
}
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff ffc9 	bl	80019a4 <_ZN16CestacionBaku601D1Ev>
 8001a12:	21f0      	movs	r1, #240	@ 0xf0
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f00a ffa9 	bl	800c96c <_ZdlPvj>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <_ZThn8_N16CestacionBaku601D0Ev>:
 8001a24:	f1a0 0008 	sub.w	r0, r0, #8
 8001a28:	f7ff bfec 	b.w	8001a04 <_ZN16CestacionBaku601D0Ev>

08001a2c <_ZN16CestacionBaku60132IniciaSensorTemperaturaAnalogicoEv>:
	max6675->SetConfigCsPin(GPIOA, GPIO_PIN_2);
	max6675->SetConfigDatPin(GPIOA, GPIO_PIN_0);
	thermocouple=max6675;
}
void CestacionBaku601::IniciaSensorTemperaturaAnalogico()
{
 8001a2c:	b590      	push	{r4, r7, lr}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	SensorAnalogico *sensorTemeratura=new SensorAnalogico();
 8001a34:	2054      	movs	r0, #84	@ 0x54
 8001a36:	f00a ff9b 	bl	800c970 <_Znwj>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	461c      	mov	r4, r3
 8001a3e:	4620      	mov	r0, r4
 8001a40:	f005 f9a4 	bl	8006d8c <_ZN15SensorAnalogicoC1Ev>
 8001a44:	60fc      	str	r4, [r7, #12]
	thermocouple=sensorTemeratura;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8001a4c:	bf00      	nop
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd90      	pop	{r4, r7, pc}

08001a54 <_ZN16CestacionBaku601C1Ev>:
CestacionBaku601::CestacionBaku601() :
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
		CEstacionBase()
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff fe72 	bl	8001748 <_ZN13CEstacionBaseC1Ev>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3308      	adds	r3, #8
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f005 f87f 	bl	8006b6c <_ZN31CManejadorEventoSensorMagneticoC1Ev>
 8001a6e:	4a50      	ldr	r2, [pc, #320]	@ (8001bb0 <_ZN16CestacionBaku601C1Ev+0x15c>)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	4a4f      	ldr	r2, [pc, #316]	@ (8001bb4 <_ZN16CestacionBaku601C1Ev+0x160>)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2264      	movs	r2, #100	@ 0x64
 8001a86:	611a      	str	r2, [r3, #16]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	615a      	str	r2, [r3, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	619a      	str	r2, [r3, #24]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	61da      	str	r2, [r3, #28]
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2205      	movs	r2, #5
 8001aac:	629a      	str	r2, [r3, #40]	@ 0x28
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001aba:	631a      	str	r2, [r3, #48]	@ 0x30
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	645a      	str	r2, [r3, #68]	@ 0x44
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a37      	ldr	r2, [pc, #220]	@ (8001bb8 <_ZN16CestacionBaku601C1Ev+0x164>)
 8001adc:	649a      	str	r2, [r3, #72]	@ 0x48
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a36      	ldr	r2, [pc, #216]	@ (8001bbc <_ZN16CestacionBaku601C1Ev+0x168>)
 8001ae2:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	651a      	str	r2, [r3, #80]	@ 0x50
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	655a      	str	r2, [r3, #84]	@ 0x54
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2208      	movs	r2, #8
 8001af4:	659a      	str	r2, [r3, #88]	@ 0x58
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	220b      	movs	r2, #11
 8001afa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	220c      	movs	r2, #12
 8001b00:	661a      	str	r2, [r3, #96]	@ 0x60
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	665a      	str	r2, [r3, #100]	@ 0x64
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	336c      	adds	r3, #108	@ 0x6c
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f004 ff31 	bl	8006974 <_ZN3PwmC1Ev>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	33b8      	adds	r3, #184	@ 0xb8
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff fada 	bl	80010d0 <_ZN10CalefactorC1Ev>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	33c8      	adds	r3, #200	@ 0xc8
 8001b20:	4618      	mov	r0, r3
 8001b22:	f005 f85f 	bl	8006be4 <_ZN15SensorMagneticoC1Ev>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
{
	pwm.Init(TIM2, TIM_CHANNEL_1, 65535);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8001b3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b40:	2200      	movs	r2, #0
 8001b42:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001b46:	f004 ff45 	bl	80069d4 <_ZN3Pwm4InitEP11TIM_TypeDefii>

	//inicializa la termocupla
	//IniciaMax6675();
	IniciaSensorTemperaturaAnalogico();
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff ff6e 	bl	8001a2c <_ZN16CestacionBaku60132IniciaSensorTemperaturaAnalogicoEv>
	thermocouple->Init();
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	3308      	adds	r3, #8
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4610      	mov	r0, r2
 8001b60:	4798      	blx	r3


	calefactor.Configurar(GPIOB, GPIO_PIN_3);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	33b8      	adds	r3, #184	@ 0xb8
 8001b66:	2208      	movs	r2, #8
 8001b68:	4915      	ldr	r1, [pc, #84]	@ (8001bc0 <_ZN16CestacionBaku601C1Ev+0x16c>)
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff fae4 	bl	8001138 <_ZN10Calefactor10ConfigurarEP12GPIO_TypeDeft>
	calefactor.Init();
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	33b8      	adds	r3, #184	@ 0xb8
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff faf2 	bl	800115e <_ZN10Calefactor4InitEv>
	sensorMagnetico.Configurar(GPIOB, GPIO_PIN_5);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	33c8      	adds	r3, #200	@ 0xc8
 8001b7e:	2220      	movs	r2, #32
 8001b80:	490f      	ldr	r1, [pc, #60]	@ (8001bc0 <_ZN16CestacionBaku601C1Ev+0x16c>)
 8001b82:	4618      	mov	r0, r3
 8001b84:	f005 f86a 	bl	8006c5c <_ZN15SensorMagnetico10ConfigurarEP12GPIO_TypeDeft>
	sensorMagnetico.Init();
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	33c8      	adds	r3, #200	@ 0xc8
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f005 f878 	bl	8006c82 <_ZN15SensorMagnetico4InitEv>
	sensorMagnetico.AsignaManejadorEventos(this);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f103 02c8 	add.w	r2, r3, #200	@ 0xc8
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3308      	adds	r3, #8
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	f005 f88e 	bl	8006cc0 <_ZN15SensorMagnetico22AsignaManejadorEventosEP31CManejadorEventoSensorMagnetico>

}
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	0800f93c 	.word	0x0800f93c
 8001bb4:	0800f9a0 	.word	0x0800f9a0
 8001bb8:	40a00000 	.word	0x40a00000
 8001bbc:	44160000 	.word	0x44160000
 8001bc0:	40020400 	.word	0x40020400

08001bc4 <_ZN16CestacionBaku60119GetTemperaturaRealxEv>:

//regresa la tenperatura actual de la estacion
float CestacionBaku601::GetTemperaturaRealx()
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
	//return //TemperaturaRealActual;//
	return thermocouple->LeeTemepatura(); //* .59;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	330c      	adds	r3, #12
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4610      	mov	r0, r2
 8001bdc:	4798      	blx	r3
 8001bde:	ee07 0a90 	vmov	s15, r0
 8001be2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001be6:	eeb0 0a67 	vmov.f32	s0, s15
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <_ZN16CestacionBaku60114SetTemperaturaEi>:

//establece la temperatura que se quiere alcanzar
void CestacionBaku601::SetTemperatura(int temperatura)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
	TemperaturaEspecificada = temperatura;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	611a      	str	r2, [r3, #16]
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <_ZN16CestacionBaku60114GetTemperaturaEv>:

// regresa la temperatura seteada
int CestacionBaku601::GetTemperatura()
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	return TemperaturaEspecificada;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691b      	ldr	r3, [r3, #16]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <_ZN16CestacionBaku60112SetNivelAireEi>:

//establece el nivel de aire
void CestacionBaku601::SetNivelAire(int nivel)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
	NivelAire=nivel;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
	//pwm.SicloTrabajo(nivel);
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <_ZN16CestacionBaku60112GetNivelAireEv>:
int CestacionBaku601::GetNivelAire()
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
	return NivelAire;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <_ZN16CestacionBaku6019GetEstadoEv>:


//regresa 1 si esta activo y 0 si esta en reposo
int CestacionBaku601::GetEstado()
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
	return sensorMagnetico.Leer();
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	33c8      	adds	r3, #200	@ 0xc8
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f005 f837 	bl	8006cdc <_ZN15SensorMagnetico4LeerEv>
 8001c6e:	4603      	mov	r3, r0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <_ZN16CestacionBaku60121IncrementaTemperaturaEv>:




void CestacionBaku601::IncrementaTemperatura()
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
	if (TemperaturaEspecificada < TemperaturaMaxima)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	691a      	ldr	r2, [r3, #16]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	da04      	bge.n	8001c96 <_ZN16CestacionBaku60121IncrementaTemperaturaEv+0x1e>
	{
		TemperaturaEspecificada++;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	611a      	str	r2, [r3, #16]
	}
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <_ZN16CestacionBaku60121DecrementaTemperaturaEv>:

void CestacionBaku601::DecrementaTemperatura()
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
	if (TemperaturaEspecificada > 0)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	dd04      	ble.n	8001cbc <_ZN16CestacionBaku60121DecrementaTemperaturaEv+0x1a>
	{
		TemperaturaEspecificada--;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	1e5a      	subs	r2, r3, #1
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	611a      	str	r2, [r3, #16]
	}
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <_ZN16CestacionBaku60117ActivarCalefactorEv>:


void CestacionBaku601::ActivarCalefactor()
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
	EstadoCalefator = ENCENDIDO;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	665a      	str	r2, [r3, #100]	@ 0x64
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <_ZN16CestacionBaku60120DesactivarCalefactorEv>:

void CestacionBaku601::DesactivarCalefactor()
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
	EstadoCalefator = APAGADO;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	665a      	str	r2, [r3, #100]	@ 0x64
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <_ZN16CestacionBaku60123OnSensorMagneticoChangeEi>:


void CestacionBaku601::OnSensorMagneticoChange(int estado)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]

}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <_ZThn8_N16CestacionBaku60123OnSensorMagneticoChangeEi>:
	void ProcesaTemperaturaReal();
	//eventros del encoder
	virtual void IncrementaTemperatura();
	virtual void DecrementaTemperatura();
	void ProcesaCalefactor();
	virtual void OnSensorMagneticoChange(int estado);
 8001d12:	f1a0 0008 	sub.w	r0, r0, #8
 8001d16:	f7ff bff1 	b.w	8001cfc <_ZN16CestacionBaku60123OnSensorMagneticoChangeEi>

08001d1a <_ZN16CestacionBaku6017ProcesaEv>:

void CestacionBaku601::Procesa()
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
	ProcesaTemperatura();
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f80a 	bl	8001d3c <_ZN16CestacionBaku60118ProcesaTemperaturaEv>
//	ProcesaTemperaturaReal();
	procesaAire();
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f81e 	bl	8001d6a <_ZN16CestacionBaku60111procesaAireEv>
	ProcesaCalefactor();
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f83b 	bl	8001daa <_ZN16CestacionBaku60117ProcesaCalefactorEv>
}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <_ZN16CestacionBaku60118ProcesaTemperaturaEv>:

//verifica el nivel de temperatura seleccinada por el usuario
void CestacionBaku601::ProcesaTemperatura()
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
	//leo la temperatura
	int temp = GetTemperatura();
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	3310      	adds	r3, #16
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	4798      	blx	r3
 8001d50:	60f8      	str	r0, [r7, #12]
	//veo si cambio
	if (temperaturaAnterior != temp)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d002      	beq.n	8001d62 <_ZN16CestacionBaku60118ProcesaTemperaturaEv+0x26>
	{
		temperaturaAnterior = temp;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	615a      	str	r2, [r3, #20]
	}
}
 8001d62:	bf00      	nop
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <_ZN16CestacionBaku60111procesaAireEv>:
	*/
}

//verifica elnivel de aire
void CestacionBaku601::procesaAire()
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b084      	sub	sp, #16
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
	int aire = GetNivelAire();
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	3318      	adds	r3, #24
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	4798      	blx	r3
 8001d7e:	60f8      	str	r0, [r7, #12]
	if (AireAnterior != aire)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	69db      	ldr	r3, [r3, #28]
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d00b      	beq.n	8001da2 <_ZN16CestacionBaku60111procesaAireEv+0x38>
	{
		AireAnterior = aire;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	61da      	str	r2, [r3, #28]
		NivelAireEvent(AireAnterior);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	334c      	adds	r3, #76	@ 0x4c
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	69d2      	ldr	r2, [r2, #28]
 8001d9e:	4611      	mov	r1, r2
 8001da0:	4798      	blx	r3
	}
}
 8001da2:	bf00      	nop
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <_ZN16CestacionBaku60117ProcesaCalefactorEv>:


void CestacionBaku601::ProcesaCalefactor()
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b086      	sub	sp, #24
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
	if (EstadoCalefator == APAGADO)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d108      	bne.n	8001dcc <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x22>
	{
		//esta apagado el calefactor
		PotenciaCalefactor=0;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	629a      	str	r2, [r3, #40]	@ 0x28
		calefactor.Apagar();
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	33b8      	adds	r3, #184	@ 0xb8
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fa01 	bl	80011cc <_ZN10Calefactor6ApagarEv>
		return;
 8001dca:	e090      	b.n	8001eee <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x144>
	}
	int sensor = sensorMagnetico.Leer();
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	33c8      	adds	r3, #200	@ 0xc8
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f004 ff83 	bl	8006cdc <_ZN15SensorMagnetico4LeerEv>
 8001dd6:	6178      	str	r0, [r7, #20]
	if (sensor == BOTON_PRESIONADO)
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d103      	bne.n	8001de6 <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x3c>
	{
		//el usuario coloco la pistola en su base por lo que hay que enfriarla
		EnfriaYApagaPistola();
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f88a 	bl	8001ef8 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv>
		return;
 8001de4:	e083      	b.n	8001eee <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x144>
	}
	TiempoEnfriando=0;
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	f04f 0300 	mov.w	r3, #0
 8001df0:	e9c1 2308 	strd	r2, r3, [r1, #32]
	//enciendo el aire
	int aire = GetNivelAire();
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	3318      	adds	r3, #24
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	4798      	blx	r3
 8001e00:	6138      	str	r0, [r7, #16]
	pwm.SicloTrabajo(aire);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	336c      	adds	r3, #108	@ 0x6c
 8001e06:	6939      	ldr	r1, [r7, #16]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f004 fe89 	bl	8006b20 <_ZN3Pwm12SicloTrabajoEi>
	//aqui se hace al calculo del PID
	//veo si ya paso el tiempo para hacer el muestreo
	TiempoActual=HAL_GetTick(); //me trae el tiempo en milisegundos
 8001e0e:	f006 fc7f 	bl	8008710 <HAL_GetTick>
 8001e12:	4603      	mov	r3, r0
 8001e14:	461a      	mov	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	635a      	str	r2, [r3, #52]	@ 0x34
	if(TiempoActual<TiempoProximoMuestreo )
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e22:	429a      	cmp	r2, r3
 8001e24:	db62      	blt.n	8001eec <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x142>
	{
		//a un no ha paso el tiempo para
		return;
	}
	//calculo el siguiente tiempo de muestreo
	TiempoProximoMuestreo=TiempoActual+TiempoMuestreoTemperatura;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2e:	441a      	add	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	639a      	str	r2, [r3, #56]	@ 0x38
	TemperaturaRealActual=GetTemperaturaRealx();//thermocouple.MAX6675_lee();
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	3308      	adds	r3, #8
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	4798      	blx	r3
 8001e40:	eef0 7a40 	vmov.f32	s15, s0
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	edc3 7a3a 	vstr	s15, [r3, #232]	@ 0xe8
	int temperatura = TemperaturaRealActual;//GetTemperaturaReal();
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	edd3 7a3a 	vldr	s15, [r3, #232]	@ 0xe8
 8001e50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e54:	ee17 3a90 	vmov	r3, s15
 8001e58:	60fb      	str	r3, [r7, #12]
	 PID_error = TemperaturaEspecificada - temperatura;                       //Calculo del error
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691a      	ldr	r2, [r3, #16]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	ee07 3a90 	vmov	s15, r3
 8001e66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	 Error_INT = Error_INT + PID_error * (1000 / TiempoMuestreoTemperatura);  //Calculo de la integral del error
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e80:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e84:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e88:	ee07 3a90 	vmov	s15, r3
 8001e8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	 PID_value = Kc * (PID_error + (1 / Tao_I) * Error_INT)/10;   //Calculo de la salida del controlador PI
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001eb0:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8001eb4:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001ebe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ec6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eca:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001ece:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	 //asigno la potencia del calefactor
	 PotenciaCalefactor=PID_value;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001ede:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ee2:	ee17 2a90 	vmov	r2, s15
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	629a      	str	r2, [r3, #40]	@ 0x28
 8001eea:	e000      	b.n	8001eee <_ZN16CestacionBaku60117ProcesaCalefactorEv+0x144>
		return;
 8001eec:	bf00      	nop
}
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	0000      	movs	r0, r0
	...

08001ef8 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv>:

void CestacionBaku601::EnfriaYApagaPistola()
{
 8001ef8:	b590      	push	{r4, r7, lr}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	//calefactor.Apagar();
	PotenciaCalefactor=0; //bajo toda la potencia
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	629a      	str	r2, [r3, #40]	@ 0x28
	float temperatura = GetTemperaturaRealx();
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	3308      	adds	r3, #8
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	4798      	blx	r3
 8001f12:	ed87 0a03 	vstr	s0, [r7, #12]
	if (temperatura <= TEMPERATURA_APAGADO)
 8001f16:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f1a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001f1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f26:	d83c      	bhi.n	8001fa2 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xaa>
	{
		if(TiempoEnfriando==0)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	f04f 0300 	mov.w	r3, #0
 8001f36:	f7fe fdcf 	bl	8000ad8 <__aeabi_dcmpeq>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00b      	beq.n	8001f58 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0x60>
		{
			TiempoEnfriando=HAL_GetTick();
 8001f40:	f006 fbe6 	bl	8008710 <HAL_GetTick>
 8001f44:	4603      	mov	r3, r0
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe fae4 	bl	8000514 <__aeabi_ui2d>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	e9c1 2308 	strd	r2, r3, [r1, #32]
			return;
 8001f56:	e035      	b.n	8001fc4 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xcc>
		}
		if(HAL_GetTick()-TiempoEnfriando<=10000)
 8001f58:	f006 fbda 	bl	8008710 <HAL_GetTick>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe fad8 	bl	8000514 <__aeabi_ui2d>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001f6a:	f7fe f995 	bl	8000298 <__aeabi_dsub>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	4610      	mov	r0, r2
 8001f74:	4619      	mov	r1, r3
 8001f76:	2301      	movs	r3, #1
 8001f78:	461c      	mov	r4, r3
 8001f7a:	a315      	add	r3, pc, #84	@ (adr r3, 8001fd0 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xd8>)
 8001f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f80:	f7fe fdbe 	bl	8000b00 <__aeabi_dcmple>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0x96>
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	461c      	mov	r4, r3
 8001f8e:	b2e3      	uxtb	r3, r4
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d116      	bne.n	8001fc2 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xca>
		{
			return;
		}
		pwm.SicloTrabajo(0);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	336c      	adds	r3, #108	@ 0x6c
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f004 fdc0 	bl	8006b20 <_ZN3Pwm12SicloTrabajoEi>
		return;
 8001fa0:	e010      	b.n	8001fc4 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xcc>
	}
	//pongo al maximo el aire para enfriar la pistola
	if(temperatura>10)
 8001fa2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fa6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001faa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb2:	dd07      	ble.n	8001fc4 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xcc>
	{
		pwm.SicloTrabajo(100);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	336c      	adds	r3, #108	@ 0x6c
 8001fb8:	2164      	movs	r1, #100	@ 0x64
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f004 fdb0 	bl	8006b20 <_ZN3Pwm12SicloTrabajoEi>
 8001fc0:	e000      	b.n	8001fc4 <_ZN16CestacionBaku60119EnfriaYApagaPistolaEv+0xcc>
			return;
 8001fc2:	bf00      	nop
	}
}
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd90      	pop	{r4, r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	f3af 8000 	nop.w
 8001fd0:	00000000 	.word	0x00000000
 8001fd4:	40c38800 	.word	0x40c38800

08001fd8 <_ZN16CestacionBaku60110CruceXCeroEi>:
void CestacionBaku601::CruceXCero(int gpio_pin)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
	if(gpio_pin!=CruceCero_Pin)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	2b10      	cmp	r3, #16
 8001fe6:	d134      	bne.n	8002052 <_ZN16CestacionBaku60110CruceXCeroEi+0x7a>
		return;
	if(TiempoAntiReboresCruceXCero>0)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	dc32      	bgt.n	8002056 <_ZN16CestacionBaku60110CruceXCeroEi+0x7e>
	{
		return;
	}
	TiempoAntiReboresCruceXCero=9;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2209      	movs	r2, #9
 8001ff4:	651a      	str	r2, [r3, #80]	@ 0x50
	if(conteolecturatemperatura>10)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001ffc:	2b0a      	cmp	r3, #10
 8001ffe:	dd03      	ble.n	8002008 <_ZN16CestacionBaku60110CruceXCeroEi+0x30>
	{
		conteolecturatemperatura=0;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
//		TemperaturaRealActual=thermocouple.MAX6675_lee();
	}
	conteolecturatemperatura++;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800200e:	1c5a      	adds	r2, r3, #1
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
//	ProcesaTemperaturaReal();
	if(ciclos>=100)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800201a:	2b63      	cmp	r3, #99	@ 0x63
 800201c:	dd02      	ble.n	8002024 <_ZN16CestacionBaku60110CruceXCeroEi+0x4c>
	{
		ciclos=0;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	if(ciclos<PotenciaCalefactor)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800202c:	429a      	cmp	r2, r3
 800202e:	da05      	bge.n	800203c <_ZN16CestacionBaku60110CruceXCeroEi+0x64>
	{
		calefactor.Encender();
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	33b8      	adds	r3, #184	@ 0xb8
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff f8b6 	bl	80011a6 <_ZN10Calefactor8EncenderEv>
 800203a:	e004      	b.n	8002046 <_ZN16CestacionBaku60110CruceXCeroEi+0x6e>
	}
	else
	{
		calefactor.Apagar();
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	33b8      	adds	r3, #184	@ 0xb8
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff f8c3 	bl	80011cc <_ZN10Calefactor6ApagarEv>
	}
	ciclos=ciclos+1;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800204a:	1c5a      	adds	r2, r3, #1
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002050:	e002      	b.n	8002058 <_ZN16CestacionBaku60110CruceXCeroEi+0x80>
		return;
 8002052:	bf00      	nop
 8002054:	e000      	b.n	8002058 <_ZN16CestacionBaku60110CruceXCeroEi+0x80>
		return;
 8002056:	bf00      	nop
}
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <_ZN16CestacionBaku6019TimerTickEv>:
void CestacionBaku601::TimerTick()
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
		if(TiempoAntiReboresCruceXCero>0)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800206a:	2b00      	cmp	r3, #0
 800206c:	dd04      	ble.n	8002078 <_ZN16CestacionBaku6019TimerTickEv+0x1a>
		{
			TiempoAntiReboresCruceXCero--;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002072:	1e5a      	subs	r2, r3, #1
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	651a      	str	r2, [r3, #80]	@ 0x50
		}
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <_ZN16CestacionBaku6016GetPIDEv>:
int CestacionBaku601::GetPID()
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
	return PotenciaCalefactor;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8002090:	4618      	mov	r0, r3
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <_ZN16CestacionBaku6016SetPIDEi>:
void CestacionBaku601::SetPID(int valor)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
	PotenciaCalefactor=valor;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <_ZN16CestacionBaku60117GPIO_INTERRUPCIONEi>:
void CestacionBaku601::GPIO_INTERRUPCION(int GPIO_Pin)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
	CruceXCero(GPIO_Pin);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	333c      	adds	r3, #60	@ 0x3c
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6839      	ldr	r1, [r7, #0]
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	4798      	blx	r3
}
 80020d0:	bf00      	nop
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <_ZN18CComponenteBaseTftC1Ev>:
#include <GUI/CComponenteBaseTft.hpp>
#include "stdio.h"
#include <stdarg.h>
#include "string.h"
#include "ILI9341/ILI9341_GFX.hpp"
CComponenteBaseTft::CComponenteBaseTft()
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	4a09      	ldr	r2, [pc, #36]	@ (8002108 <_ZN18CComponenteBaseTftC1Ev+0x30>)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	605a      	str	r2, [r3, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	609a      	str	r2, [r3, #8]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	615a      	str	r2, [r3, #20]
{
	// TODO Auto-generated constructor stub

}
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	0800f9b4 	.word	0x0800f9b4

0800210c <_ZN18CComponenteBaseTftD1Ev>:

CComponenteBaseTft::~CComponenteBaseTft()
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	4a04      	ldr	r2, [pc, #16]	@ (8002128 <_ZN18CComponenteBaseTftD1Ev+0x1c>)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	0800f9b4 	.word	0x0800f9b4

0800212c <_ZN18CComponenteBaseTftD0Ev>:
CComponenteBaseTft::~CComponenteBaseTft()
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
}
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff ffe9 	bl	800210c <_ZN18CComponenteBaseTftD1Ev>
 800213a:	2118      	movs	r1, #24
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f00a fc15 	bl	800c96c <_ZdlPvj>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <_ZN18CComponenteBaseTft9drawPixelEsst>:

//creo una capa que envuelve todas las funciones de la pantalla tft para mejorar el codigo
void CComponenteBaseTft::CComponenteBaseTft::drawPixel(int16_t x, int16_t y,
		uint16_t color)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	4608      	mov	r0, r1
 8002156:	4611      	mov	r1, r2
 8002158:	461a      	mov	r2, r3
 800215a:	4603      	mov	r3, r0
 800215c:	817b      	strh	r3, [r7, #10]
 800215e:	460b      	mov	r3, r1
 8002160:	813b      	strh	r3, [r7, #8]
 8002162:	4613      	mov	r3, r2
 8002164:	80fb      	strh	r3, [r7, #6]
}
 8002166:	bf00      	nop
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <_ZN18CComponenteBaseTft10startWriteEv>:

void CComponenteBaseTft::startWrite(void)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <_ZN18CComponenteBaseTft10writePixelEsst>:
void CComponenteBaseTft::writePixel(int16_t x, int16_t y, uint16_t color)
{
 8002186:	b480      	push	{r7}
 8002188:	b085      	sub	sp, #20
 800218a:	af00      	add	r7, sp, #0
 800218c:	60f8      	str	r0, [r7, #12]
 800218e:	4608      	mov	r0, r1
 8002190:	4611      	mov	r1, r2
 8002192:	461a      	mov	r2, r3
 8002194:	4603      	mov	r3, r0
 8002196:	817b      	strh	r3, [r7, #10]
 8002198:	460b      	mov	r3, r1
 800219a:	813b      	strh	r3, [r7, #8]
 800219c:	4613      	mov	r3, r2
 800219e:	80fb      	strh	r3, [r7, #6]
}
 80021a0:	bf00      	nop
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <_ZN18CComponenteBaseTft13writeFillRectEsssst>:
void CComponenteBaseTft::writeFillRect(int16_t x, int16_t y, int16_t w,
		int16_t h, uint16_t color)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	4608      	mov	r0, r1
 80021b6:	4611      	mov	r1, r2
 80021b8:	461a      	mov	r2, r3
 80021ba:	4603      	mov	r3, r0
 80021bc:	817b      	strh	r3, [r7, #10]
 80021be:	460b      	mov	r3, r1
 80021c0:	813b      	strh	r3, [r7, #8]
 80021c2:	4613      	mov	r3, r2
 80021c4:	80fb      	strh	r3, [r7, #6]
}
 80021c6:	bf00      	nop
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <_ZN18CComponenteBaseTft14writeFastVLineEssst>:
void CComponenteBaseTft::writeFastVLine(int16_t x, int16_t y, int16_t h,
		uint16_t color)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b085      	sub	sp, #20
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	60f8      	str	r0, [r7, #12]
 80021da:	4608      	mov	r0, r1
 80021dc:	4611      	mov	r1, r2
 80021de:	461a      	mov	r2, r3
 80021e0:	4603      	mov	r3, r0
 80021e2:	817b      	strh	r3, [r7, #10]
 80021e4:	460b      	mov	r3, r1
 80021e6:	813b      	strh	r3, [r7, #8]
 80021e8:	4613      	mov	r3, r2
 80021ea:	80fb      	strh	r3, [r7, #6]
}
 80021ec:	bf00      	nop
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <_ZN18CComponenteBaseTft14writeFastHLineEssst>:
void CComponenteBaseTft::writeFastHLine(int16_t x, int16_t y, int16_t w,
		uint16_t color)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	4608      	mov	r0, r1
 8002202:	4611      	mov	r1, r2
 8002204:	461a      	mov	r2, r3
 8002206:	4603      	mov	r3, r0
 8002208:	817b      	strh	r3, [r7, #10]
 800220a:	460b      	mov	r3, r1
 800220c:	813b      	strh	r3, [r7, #8]
 800220e:	4613      	mov	r3, r2
 8002210:	80fb      	strh	r3, [r7, #6]
}
 8002212:	bf00      	nop
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <_ZN18CComponenteBaseTft9writeLineEsssst>:
void CComponenteBaseTft::writeLine(int16_t x0, int16_t y0, int16_t x1,
		int16_t y1, uint16_t color)
{
 800221e:	b480      	push	{r7}
 8002220:	b085      	sub	sp, #20
 8002222:	af00      	add	r7, sp, #0
 8002224:	60f8      	str	r0, [r7, #12]
 8002226:	4608      	mov	r0, r1
 8002228:	4611      	mov	r1, r2
 800222a:	461a      	mov	r2, r3
 800222c:	4603      	mov	r3, r0
 800222e:	817b      	strh	r3, [r7, #10]
 8002230:	460b      	mov	r3, r1
 8002232:	813b      	strh	r3, [r7, #8]
 8002234:	4613      	mov	r3, r2
 8002236:	80fb      	strh	r3, [r7, #6]
}
 8002238:	bf00      	nop
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <_ZN18CComponenteBaseTft8endWriteEv>:
void CComponenteBaseTft::endWrite(void)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <_ZN18CComponenteBaseTft11setRotationEh>:
void CComponenteBaseTft::setRotation(uint8_t r)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	70fb      	strb	r3, [r7, #3]
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <_ZN18CComponenteBaseTft13invertDisplayEb>:
void CComponenteBaseTft::invertDisplay(bool i)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	70fb      	strb	r3, [r7, #3]
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <_ZN18CComponenteBaseTft13drawFastVLineEssst>:
void CComponenteBaseTft::drawFastVLine(int16_t x, int16_t y, int16_t h,
		uint16_t color)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	4608      	mov	r0, r1
 8002292:	4611      	mov	r1, r2
 8002294:	461a      	mov	r2, r3
 8002296:	4603      	mov	r3, r0
 8002298:	817b      	strh	r3, [r7, #10]
 800229a:	460b      	mov	r3, r1
 800229c:	813b      	strh	r3, [r7, #8]
 800229e:	4613      	mov	r3, r2
 80022a0:	80fb      	strh	r3, [r7, #6]
}
 80022a2:	bf00      	nop
 80022a4:	3714      	adds	r7, #20
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <_ZN18CComponenteBaseTft13drawFastHLineEssst>:
void CComponenteBaseTft::drawFastHLine(int16_t x, int16_t y, int16_t w,
		uint16_t color)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b085      	sub	sp, #20
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	60f8      	str	r0, [r7, #12]
 80022b6:	4608      	mov	r0, r1
 80022b8:	4611      	mov	r1, r2
 80022ba:	461a      	mov	r2, r3
 80022bc:	4603      	mov	r3, r0
 80022be:	817b      	strh	r3, [r7, #10]
 80022c0:	460b      	mov	r3, r1
 80022c2:	813b      	strh	r3, [r7, #8]
 80022c4:	4613      	mov	r3, r2
 80022c6:	80fb      	strh	r3, [r7, #6]
}
 80022c8:	bf00      	nop
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <_ZN18CComponenteBaseTft10fillScreenEt>:
void CComponenteBaseTft::fillScreen(uint16_t color)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <_ZN18CComponenteBaseTft8drawLineEsssst>:
void CComponenteBaseTft::drawLine(int16_t x0, int16_t y0, int16_t x1,
		int16_t y1, uint16_t color)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	4608      	mov	r0, r1
 80022f6:	4611      	mov	r1, r2
 80022f8:	461a      	mov	r2, r3
 80022fa:	4603      	mov	r3, r0
 80022fc:	817b      	strh	r3, [r7, #10]
 80022fe:	460b      	mov	r3, r1
 8002300:	813b      	strh	r3, [r7, #8]
 8002302:	4613      	mov	r3, r2
 8002304:	80fb      	strh	r3, [r7, #6]
}
 8002306:	bf00      	nop
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <_ZN18CComponenteBaseTft5widthEv>:
}
void CComponenteBaseTft::cp437(bool x)
{
}
int16_t CComponenteBaseTft::width(void)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
	return 319;
 800231a:	f240 133f 	movw	r3, #319	@ 0x13f
}
 800231e:	4618      	mov	r0, r3
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <_ZN18CComponenteBaseTft6heightEv>:
int16_t CComponenteBaseTft::height(void)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
	return 239;
 8002332:	23ef      	movs	r3, #239	@ 0xef
}
 8002334:	4618      	mov	r0, r3
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <_ZN18CComponenteBaseTft8fillRectEsssst>:
	va_end(pa);
	buffer[posbuffer] = '\0';
	print(buffer);
}
void CComponenteBaseTft::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,uint16_t color)
{
 8002340:	b590      	push	{r4, r7, lr}
 8002342:	b087      	sub	sp, #28
 8002344:	af02      	add	r7, sp, #8
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	4608      	mov	r0, r1
 800234a:	4611      	mov	r1, r2
 800234c:	461a      	mov	r2, r3
 800234e:	4603      	mov	r3, r0
 8002350:	817b      	strh	r3, [r7, #10]
 8002352:	460b      	mov	r3, r1
 8002354:	813b      	strh	r3, [r7, #8]
 8002356:	4613      	mov	r3, r2
 8002358:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Filled_Rectangle_Coord(x, y, x+w, y+h, color);
 800235a:	8978      	ldrh	r0, [r7, #10]
 800235c:	8939      	ldrh	r1, [r7, #8]
 800235e:	897a      	ldrh	r2, [r7, #10]
 8002360:	88fb      	ldrh	r3, [r7, #6]
 8002362:	4413      	add	r3, r2
 8002364:	b29c      	uxth	r4, r3
 8002366:	893a      	ldrh	r2, [r7, #8]
 8002368:	8c3b      	ldrh	r3, [r7, #32]
 800236a:	4413      	add	r3, r2
 800236c:	b29a      	uxth	r2, r3
 800236e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	4613      	mov	r3, r2
 8002374:	4622      	mov	r2, r4
 8002376:	f003 fa18 	bl	80057aa <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt>
}
 800237a:	bf00      	nop
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	bd90      	pop	{r4, r7, pc}

08002382 <_ZN18CComponenteBaseTft8drawRectEsssst>:
void CComponenteBaseTft::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,uint16_t color)
{
 8002382:	b590      	push	{r4, r7, lr}
 8002384:	b087      	sub	sp, #28
 8002386:	af02      	add	r7, sp, #8
 8002388:	60f8      	str	r0, [r7, #12]
 800238a:	4608      	mov	r0, r1
 800238c:	4611      	mov	r1, r2
 800238e:	461a      	mov	r2, r3
 8002390:	4603      	mov	r3, r0
 8002392:	817b      	strh	r3, [r7, #10]
 8002394:	460b      	mov	r3, r1
 8002396:	813b      	strh	r3, [r7, #8]
 8002398:	4613      	mov	r3, r2
 800239a:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Hollow_Rectangle_Coord(x, y,x+w,y+h,color);
 800239c:	8978      	ldrh	r0, [r7, #10]
 800239e:	8939      	ldrh	r1, [r7, #8]
 80023a0:	897a      	ldrh	r2, [r7, #10]
 80023a2:	88fb      	ldrh	r3, [r7, #6]
 80023a4:	4413      	add	r3, r2
 80023a6:	b29c      	uxth	r4, r3
 80023a8:	893a      	ldrh	r2, [r7, #8]
 80023aa:	8c3b      	ldrh	r3, [r7, #32]
 80023ac:	4413      	add	r3, r2
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	4613      	mov	r3, r2
 80023b6:	4622      	mov	r2, r4
 80023b8:	f003 f976 	bl	80056a8 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt>
}
 80023bc:	bf00      	nop
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd90      	pop	{r4, r7, pc}

080023c4 <_ZN18CComponenteBaseTft9setCursorEss>:
void CComponenteBaseTft::setCursor(int16_t x, int16_t y)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	807b      	strh	r3, [r7, #2]
 80023d0:	4613      	mov	r3, r2
 80023d2:	803b      	strh	r3, [r7, #0]
    CursorX=x;
 80023d4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	605a      	str	r2, [r3, #4]
    CursorY=y;
 80023dc:	f9b7 2000 	ldrsh.w	r2, [r7]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	609a      	str	r2, [r3, #8]
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <_ZN18CComponenteBaseTft11setTextSizeEh>:
void CComponenteBaseTft::setTextSize(uint8_t s)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	70fb      	strb	r3, [r7, #3]
	TextSize=s;
 80023fc:	78fa      	ldrb	r2, [r7, #3]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	60da      	str	r2, [r3, #12]
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <_ZN18CComponenteBaseTft12setTextColorEt>:
void CComponenteBaseTft::setTextSize(uint8_t sx, uint8_t sy)
{
}
void CComponenteBaseTft::setTextColor(uint16_t c)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
 8002416:	460b      	mov	r3, r1
 8002418:	807b      	strh	r3, [r7, #2]
	ColorTexto=c;
 800241a:	887a      	ldrh	r2, [r7, #2]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	611a      	str	r2, [r3, #16]
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <_ZN18CComponenteBaseTft5printEPc>:
void CComponenteBaseTft::print(char *texto)
{
 800242c:	b590      	push	{r4, r7, lr}
 800242e:	b085      	sub	sp, #20
 8002430:	af02      	add	r7, sp, #8
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
	ILI9341_Draw_Text(texto, CursorX,CursorY, ColorTexto, TextSize, BackColor);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6859      	ldr	r1, [r3, #4]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6898      	ldr	r0, [r3, #8]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	b29c      	uxth	r4, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	b29b      	uxth	r3, r3
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6952      	ldr	r2, [r2, #20]
 800244e:	b292      	uxth	r2, r2
 8002450:	9201      	str	r2, [sp, #4]
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	4623      	mov	r3, r4
 8002456:	4602      	mov	r2, r0
 8002458:	6838      	ldr	r0, [r7, #0]
 800245a:	f003 fa9b 	bl	8005994 <_Z17ILI9341_Draw_TextPKciittt>
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	bd90      	pop	{r4, r7, pc}

08002466 <_ZN18CComponenteBaseTft11LimpiaTextoEv>:
void CComponenteBaseTft::LimpiaTexto()
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]

}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
	...

0800247c <_ZN12CEtiquetaTftD1Ev>:
 */

#include <GUI/CEtiquetaTft.hpp>


CEtiquetaTft::~CEtiquetaTft()
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	4a05      	ldr	r2, [pc, #20]	@ (800249c <_ZN12CEtiquetaTftD1Ev+0x20>)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4618      	mov	r0, r3
 800248e:	f000 fb5b 	bl	8002b48 <_ZN14CRectanguloTftD1Ev>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	0800fa08 	.word	0x0800fa08

080024a0 <_ZN12CEtiquetaTftD0Ev>:
CEtiquetaTft::~CEtiquetaTft()
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
}
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f7ff ffe7 	bl	800247c <_ZN12CEtiquetaTftD1Ev>
 80024ae:	21a4      	movs	r1, #164	@ 0xa4
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f00a fa5b 	bl	800c96c <_ZdlPvj>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4618      	mov	r0, r3
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>:

CEtiquetaTft::CEtiquetaTft(int xi, int yi, int ancho, int alto,	int backColor, char *texto, int colorTexto, int textSize, int contorno,	int colorContorno) :
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b088      	sub	sp, #32
 80024c4:	af04      	add	r7, sp, #16
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
 80024cc:	603b      	str	r3, [r7, #0]
		CRectanguloTft(xi, yi, ancho, alto, backColor, contorno, colorContorno)
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d2:	9303      	str	r3, [sp, #12]
 80024d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024d6:	9302      	str	r3, [sp, #8]
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	9301      	str	r3, [sp, #4]
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	68b9      	ldr	r1, [r7, #8]
 80024e6:	f000 fb51 	bl	8002b8c <_ZN14CRectanguloTftC1Eiiiiiii>
 80024ea:	4a11      	ldr	r2, [pc, #68]	@ (8002530 <_ZN12CEtiquetaTftC1EiiiiiPciiii+0x70>)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2203      	movs	r2, #3
 80024f4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2201      	movs	r2, #1
 8002504:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
{
	strcpy(Texto, texto);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	3330      	adds	r3, #48	@ 0x30
 800250c:	6a39      	ldr	r1, [r7, #32]
 800250e:	4618      	mov	r0, r3
 8002510:	f00b f961 	bl	800d7d6 <strcpy>
	ColorTexto = colorTexto;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002518:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	TextSize = textSize;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002520:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
}
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	0800fa08 	.word	0x0800fa08

08002534 <_ZN12CEtiquetaTft8SetTextoEPcz>:

void CEtiquetaTft::SetTexto(char *formato, ...)
{
 8002534:	b40e      	push	{r1, r2, r3}
 8002536:	b580      	push	{r7, lr}
 8002538:	b0bb      	sub	sp, #236	@ 0xec
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
//	LimpiaTexto();
	char *p;
	char buffer[100];
	char tmp[100];
	int postmp = 0;
 800253e:	2300      	movs	r3, #0
 8002540:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	int posbuffer = 0;
 8002544:	2300      	movs	r3, #0
 8002546:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	va_list pa;
	int encontrado = 0;
 800254a:	2300      	movs	r3, #0
 800254c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

	va_start(pa, formato);
 8002550:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8002554:	60fb      	str	r3, [r7, #12]

	for (p = formato; *p; p++)
 8002556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800255a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800255e:	e0f5      	b.n	800274c <_ZN12CEtiquetaTft8SetTextoEPcz+0x218>
	{

		if (*p != '%')
 8002560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2b25      	cmp	r3, #37	@ 0x25
 8002568:	d00f      	beq.n	800258a <_ZN12CEtiquetaTft8SetTextoEPcz+0x56>
		{
			buffer[posbuffer] = *p;
 800256a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800256e:	7819      	ldrb	r1, [r3, #0]
 8002570:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8002574:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002578:	4413      	add	r3, r2
 800257a:	460a      	mov	r2, r1
 800257c:	701a      	strb	r2, [r3, #0]
			posbuffer++;
 800257e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002582:	3301      	adds	r3, #1
 8002584:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
			continue;
 8002588:	e0db      	b.n	8002742 <_ZN12CEtiquetaTft8SetTextoEPcz+0x20e>
		}
		encontrado = 0;
 800258a:	2300      	movs	r3, #0
 800258c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		switch (*++p)
 8002590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002594:	3301      	adds	r3, #1
 8002596:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800259a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	3b63      	subs	r3, #99	@ 0x63
 80025a2:	2b15      	cmp	r3, #21
 80025a4:	f200 8096 	bhi.w	80026d4 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1a0>
 80025a8:	a201      	add	r2, pc, #4	@ (adr r2, 80025b0 <_ZN12CEtiquetaTft8SetTextoEPcz+0x7c>)
 80025aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ae:	bf00      	nop
 80025b0:	08002679 	.word	0x08002679
 80025b4:	08002609 	.word	0x08002609
 80025b8:	080026d5 	.word	0x080026d5
 80025bc:	08002695 	.word	0x08002695
 80025c0:	080026d5 	.word	0x080026d5
 80025c4:	080026d5 	.word	0x080026d5
 80025c8:	08002625 	.word	0x08002625
 80025cc:	080026d5 	.word	0x080026d5
 80025d0:	080026d5 	.word	0x080026d5
 80025d4:	080026d5 	.word	0x080026d5
 80025d8:	080026d5 	.word	0x080026d5
 80025dc:	080026d5 	.word	0x080026d5
 80025e0:	080026d5 	.word	0x080026d5
 80025e4:	0800265d 	.word	0x0800265d
 80025e8:	080026d5 	.word	0x080026d5
 80025ec:	080026d5 	.word	0x080026d5
 80025f0:	080026b9 	.word	0x080026b9
 80025f4:	080026d5 	.word	0x080026d5
 80025f8:	080026d5 	.word	0x080026d5
 80025fc:	080026d5 	.word	0x080026d5
 8002600:	080026d5 	.word	0x080026d5
 8002604:	08002641 	.word	0x08002641
		{
		case 'd':
			sprintf(tmp, "%d", va_arg(pa, int));
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	1d1a      	adds	r2, r3, #4
 800260c:	60fa      	str	r2, [r7, #12]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	f107 0310 	add.w	r3, r7, #16
 8002614:	495b      	ldr	r1, [pc, #364]	@ (8002784 <_ZN12CEtiquetaTft8SetTextoEPcz+0x250>)
 8002616:	4618      	mov	r0, r3
 8002618:	f00a ffa6 	bl	800d568 <siprintf>
			encontrado = 1;
 800261c:	2301      	movs	r3, #1
 800261e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 8002622:	e067      	b.n	80026f4 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1c0>
		case 'i':
			sprintf(tmp, "%i", va_arg(pa, int));
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	1d1a      	adds	r2, r3, #4
 8002628:	60fa      	str	r2, [r7, #12]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	f107 0310 	add.w	r3, r7, #16
 8002630:	4955      	ldr	r1, [pc, #340]	@ (8002788 <_ZN12CEtiquetaTft8SetTextoEPcz+0x254>)
 8002632:	4618      	mov	r0, r3
 8002634:	f00a ff98 	bl	800d568 <siprintf>
			encontrado = 1;
 8002638:	2301      	movs	r3, #1
 800263a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 800263e:	e059      	b.n	80026f4 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1c0>
		case 'x':
			sprintf(tmp, "%x", va_arg(pa, int));
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	1d1a      	adds	r2, r3, #4
 8002644:	60fa      	str	r2, [r7, #12]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	f107 0310 	add.w	r3, r7, #16
 800264c:	494f      	ldr	r1, [pc, #316]	@ (800278c <_ZN12CEtiquetaTft8SetTextoEPcz+0x258>)
 800264e:	4618      	mov	r0, r3
 8002650:	f00a ff8a 	bl	800d568 <siprintf>
			encontrado = 1;
 8002654:	2301      	movs	r3, #1
 8002656:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 800265a:	e04b      	b.n	80026f4 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1c0>
		case 'p':
			sprintf(tmp, "%p", va_arg(pa, void*));
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	1d1a      	adds	r2, r3, #4
 8002660:	60fa      	str	r2, [r7, #12]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	f107 0310 	add.w	r3, r7, #16
 8002668:	4949      	ldr	r1, [pc, #292]	@ (8002790 <_ZN12CEtiquetaTft8SetTextoEPcz+0x25c>)
 800266a:	4618      	mov	r0, r3
 800266c:	f00a ff7c 	bl	800d568 <siprintf>
			encontrado = 1;
 8002670:	2301      	movs	r3, #1
 8002672:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 8002676:	e03d      	b.n	80026f4 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1c0>
		case 'c':
			sprintf(tmp, "%c", va_arg(pa, int));
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	1d1a      	adds	r2, r3, #4
 800267c:	60fa      	str	r2, [r7, #12]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	f107 0310 	add.w	r3, r7, #16
 8002684:	4943      	ldr	r1, [pc, #268]	@ (8002794 <_ZN12CEtiquetaTft8SetTextoEPcz+0x260>)
 8002686:	4618      	mov	r0, r3
 8002688:	f00a ff6e 	bl	800d568 <siprintf>
			encontrado = 1;
 800268c:	2301      	movs	r3, #1
 800268e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 8002692:	e02f      	b.n	80026f4 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1c0>
		case 'f':
			sprintf(tmp, "%f", va_arg(pa, double));
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	3307      	adds	r3, #7
 8002698:	f023 0307 	bic.w	r3, r3, #7
 800269c:	f103 0208 	add.w	r2, r3, #8
 80026a0:	60fa      	str	r2, [r7, #12]
 80026a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a6:	f107 0010 	add.w	r0, r7, #16
 80026aa:	493b      	ldr	r1, [pc, #236]	@ (8002798 <_ZN12CEtiquetaTft8SetTextoEPcz+0x264>)
 80026ac:	f00a ff5c 	bl	800d568 <siprintf>
			encontrado = 1;
 80026b0:	2301      	movs	r3, #1
 80026b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 80026b6:	e01d      	b.n	80026f4 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1c0>
		case 's':
			sprintf(tmp, "%s", va_arg(pa, char *));
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	1d1a      	adds	r2, r3, #4
 80026bc:	60fa      	str	r2, [r7, #12]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	f107 0310 	add.w	r3, r7, #16
 80026c4:	4935      	ldr	r1, [pc, #212]	@ (800279c <_ZN12CEtiquetaTft8SetTextoEPcz+0x268>)
 80026c6:	4618      	mov	r0, r3
 80026c8:	f00a ff4e 	bl	800d568 <siprintf>
			encontrado = 1;
 80026cc:	2301      	movs	r3, #1
 80026ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 80026d2:	e00f      	b.n	80026f4 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1c0>
		default:
			buffer[posbuffer] = *p;
 80026d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026d8:	7819      	ldrb	r1, [r3, #0]
 80026da:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 80026de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80026e2:	4413      	add	r3, r2
 80026e4:	460a      	mov	r2, r1
 80026e6:	701a      	strb	r2, [r3, #0]
			posbuffer++;
 80026e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80026ec:	3301      	adds	r3, #1
 80026ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
			break;
 80026f2:	bf00      	nop
		}
		if (encontrado == 1)
 80026f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d122      	bne.n	8002742 <_ZN12CEtiquetaTft8SetTextoEPcz+0x20e>
		{
			postmp = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
			while (tmp[postmp] != '\0')
 8002702:	e016      	b.n	8002732 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1fe>
			{
				buffer[posbuffer] = tmp[postmp];
 8002704:	f107 0210 	add.w	r2, r7, #16
 8002708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800270c:	4413      	add	r3, r2
 800270e:	7819      	ldrb	r1, [r3, #0]
 8002710:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8002714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002718:	4413      	add	r3, r2
 800271a:	460a      	mov	r2, r1
 800271c:	701a      	strb	r2, [r3, #0]
				posbuffer++;
 800271e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002722:	3301      	adds	r3, #1
 8002724:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
				postmp++;
 8002728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800272c:	3301      	adds	r3, #1
 800272e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
			while (tmp[postmp] != '\0')
 8002732:	f107 0210 	add.w	r2, r7, #16
 8002736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800273a:	4413      	add	r3, r2
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1e0      	bne.n	8002704 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1d0>
	for (p = formato; *p; p++)
 8002742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002746:	3301      	adds	r3, #1
 8002748:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800274c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	f47f af04 	bne.w	8002560 <_ZN12CEtiquetaTft8SetTextoEPcz+0x2c>
			}
		}
	}
	va_end(pa);
	buffer[posbuffer] = '\0';
 8002758:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 800275c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002760:	4413      	add	r3, r2
 8002762:	2200      	movs	r2, #0
 8002764:	701a      	strb	r2, [r3, #0]
	strcpy(Texto, buffer);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3330      	adds	r3, #48	@ 0x30
 800276a:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 800276e:	4611      	mov	r1, r2
 8002770:	4618      	mov	r0, r3
 8002772:	f00b f830 	bl	800d7d6 <strcpy>
}
 8002776:	bf00      	nop
 8002778:	37ec      	adds	r7, #236	@ 0xec
 800277a:	46bd      	mov	sp, r7
 800277c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002780:	b003      	add	sp, #12
 8002782:	4770      	bx	lr
 8002784:	0800f670 	.word	0x0800f670
 8002788:	0800f674 	.word	0x0800f674
 800278c:	0800f678 	.word	0x0800f678
 8002790:	0800f67c 	.word	0x0800f67c
 8002794:	0800f680 	.word	0x0800f680
 8002798:	0800f684 	.word	0x0800f684
 800279c:	0800f688 	.word	0x0800f688

080027a0 <_ZN12CEtiquetaTft13SetSeparacionEii>:
{
	return Texto;
}

void CEtiquetaTft::SetSeparacion(int izquieda, int arriba)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
	SeparacionIzquierda = izquieda;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	SeparacionArriba = arriba;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
}
 80027bc:	bf00      	nop
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <_ZN12CEtiquetaTft13SetColorTextoEi>:
{
	return SeparacionIzquierda;
}

void CEtiquetaTft::SetColorTexto(int color)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
	ColorTexto = color;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <_ZN12CEtiquetaTft4ShowEv>:
{
	return ColorTexto;
}

void CEtiquetaTft::Show()
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
	//mandamos a dibujar el rectangulo
	CRectanguloTft::Show();
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f000 f9fd 	bl	8002bf0 <_ZN14CRectanguloTft4ShowEv>
	//me posiciono el la pocicion del texto
	setCursor(Xi + SeparacionIzquierda, Yi + SeparacionArriba);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002804:	b29b      	uxth	r3, r3
 8002806:	4413      	add	r3, r2
 8002808:	b29b      	uxth	r3, r3
 800280a:	b219      	sxth	r1, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	b29a      	uxth	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002818:	b29b      	uxth	r3, r3
 800281a:	4413      	add	r3, r2
 800281c:	b29b      	uxth	r3, r3
 800281e:	b21b      	sxth	r3, r3
 8002820:	461a      	mov	r2, r3
 8002822:	f7ff fdcf 	bl	80023c4 <_ZN18CComponenteBaseTft9setCursorEss>
	//asigno tamaño de la letra
	setTextSize (TextSize);
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800282e:	b2db      	uxtb	r3, r3
 8002830:	4619      	mov	r1, r3
 8002832:	4610      	mov	r0, r2
 8002834:	f7ff fddc 	bl	80023f0 <_ZN18CComponenteBaseTft11setTextSizeEh>
	//asigno el color de texto
	setTextColor (ColorTexto);
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002840:	b29b      	uxth	r3, r3
 8002842:	4619      	mov	r1, r3
 8002844:	4610      	mov	r0, r2
 8002846:	f7ff fde2 	bl	800240e <_ZN18CComponenteBaseTft12setTextColorEt>
	//muestro el texto;
	print (Texto);
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3330      	adds	r3, #48	@ 0x30
 8002850:	4619      	mov	r1, r3
 8002852:	4610      	mov	r0, r2
 8002854:	f7ff fdea 	bl	800242c <_ZN18CComponenteBaseTft5printEPc>
}
 8002858:	bf00      	nop
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <_ZN12CEtiquetaTft12SetBackColorEi>:
int CEtiquetaTft::DameTextSize()
{
	return TextSize;
}
void CEtiquetaTft::SetBackColor(int color)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
	BackColor=color;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	615a      	str	r2, [r3, #20]
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <_ZN12CEtiquetaTft11LimpiaTextoEv>:
void CEtiquetaTft::LimpiaTexto()
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
	setTextColor (BackColor);
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	b29b      	uxth	r3, r3
 800288c:	4619      	mov	r1, r3
 800288e:	4610      	mov	r0, r2
 8002890:	f7ff fdbd 	bl	800240e <_ZN18CComponenteBaseTft12setTextColorEt>
	//muestro el texto;
	print (Texto);
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	3330      	adds	r3, #48	@ 0x30
 800289a:	4619      	mov	r1, r3
 800289c:	4610      	mov	r0, r2
 800289e:	f7ff fdc5 	bl	800242c <_ZN18CComponenteBaseTft5printEPc>
	setTextColor (ColorTexto);
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	4619      	mov	r1, r3
 80028ae:	4610      	mov	r0, r2
 80028b0:	f7ff fdad 	bl	800240e <_ZN18CComponenteBaseTft12setTextColorEt>
	//muestro el texto;
//	print (Texto);

}
 80028b4:	bf00      	nop
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <_ZN13CPantallaBaseD1Ev>:
 *      Author: W10
 */

#include <GUI/CPantallaBase.hpp>

CPantallaBase::~CPantallaBase()
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	4a09      	ldr	r2, [pc, #36]	@ (80028ec <_ZN13CPantallaBaseD1Ev+0x30>)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	4a09      	ldr	r2, [pc, #36]	@ (80028f0 <_ZN13CPantallaBaseD1Ev+0x34>)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3330      	adds	r3, #48	@ 0x30
 80028d4:	4618      	mov	r0, r3
 80028d6:	f003 ffd1 	bl	800687c <_ZN26CManejadorEventosControlesD1Ev>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4618      	mov	r0, r3
 80028de:	f000 f933 	bl	8002b48 <_ZN14CRectanguloTftD1Ev>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	0800fa68 	.word	0x0800fa68
 80028f0:	0800fae0 	.word	0x0800fae0

080028f4 <_ZThn48_N13CPantallaBaseD1Ev>:
	char Titulo[100];
	CEstacionBase *Estacion;
	CManejadorControles *ManejadorControles;

public:
	virtual ~CPantallaBase();
 80028f4:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80028f8:	f7ff bfe0 	b.w	80028bc <_ZN13CPantallaBaseD1Ev>

080028fc <_ZN13CPantallaBaseD0Ev>:
CPantallaBase::~CPantallaBase()
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
}
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff ffd9 	bl	80028bc <_ZN13CPantallaBaseD1Ev>
 800290a:	21ac      	movs	r1, #172	@ 0xac
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f00a f82d 	bl	800c96c <_ZdlPvj>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4618      	mov	r0, r3
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <_ZThn48_N13CPantallaBaseD0Ev>:
 800291c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8002920:	f7ff bfec 	b.w	80028fc <_ZN13CPantallaBaseD0Ev>

08002924 <_ZN13CPantallaBaseC1EiPc>:

//constructor
CPantallaBase::CPantallaBase(int verTitulo, char *titulo) :
 8002924:	b590      	push	{r4, r7, lr}
 8002926:	b08f      	sub	sp, #60	@ 0x3c
 8002928:	af08      	add	r7, sp, #32
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
		CRectanguloTft(0, 0, 0, 0, COLOR::BLACK, 1, COLOR::BLUE)
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	231f      	movs	r3, #31
 8002934:	9303      	str	r3, [sp, #12]
 8002936:	2301      	movs	r3, #1
 8002938:	9302      	str	r3, [sp, #8]
 800293a:	2300      	movs	r3, #0
 800293c:	9301      	str	r3, [sp, #4]
 800293e:	2300      	movs	r3, #0
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	2300      	movs	r3, #0
 8002944:	2200      	movs	r2, #0
 8002946:	2100      	movs	r1, #0
 8002948:	f000 f920 	bl	8002b8c <_ZN14CRectanguloTftC1Eiiiiiii>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	3330      	adds	r3, #48	@ 0x30
 8002950:	4618      	mov	r0, r3
 8002952:	f003 ff83 	bl	800685c <_ZN26CManejadorEventosControlesC1Ev>
 8002956:	4a2a      	ldr	r2, [pc, #168]	@ (8002a00 <_ZN13CPantallaBaseC1EiPc+0xdc>)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	4a29      	ldr	r2, [pc, #164]	@ (8002a04 <_ZN13CPantallaBaseC1EiPc+0xe0>)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	631a      	str	r2, [r3, #48]	@ 0x30
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2201      	movs	r2, #1
 800296e:	63da      	str	r2, [r3, #60]	@ 0x3c
{
	Visible=false;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	VerTitulo = verTitulo;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	63da      	str	r2, [r3, #60]	@ 0x3c
	strcpy(Titulo, titulo);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	3340      	adds	r3, #64	@ 0x40
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	4618      	mov	r0, r3
 8002986:	f00a ff26 	bl	800d7d6 <strcpy>
	setRotation(3);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2103      	movs	r1, #3
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff fc62 	bl	8002258 <_ZN18CComponenteBaseTft11setRotationEh>
	int ancho = width();
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff fcbb 	bl	8002312 <_ZN18CComponenteBaseTft5widthEv>
 800299c:	4603      	mov	r3, r0
 800299e:	617b      	str	r3, [r7, #20]
	int alto = height();
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff fcc1 	bl	800232a <_ZN18CComponenteBaseTft6heightEv>
 80029a8:	4603      	mov	r3, r0
 80029aa:	613b      	str	r3, [r7, #16]
	Redimenciona(ancho, alto);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	6979      	ldr	r1, [r7, #20]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 f96c 	bl	8002c90 <_ZN14CRectanguloTft12RedimencionaEii>
	LabelTitulo = new CEtiquetaTft( Xi, Yi, ancho, 30, COLOR::BLUE, Titulo,	COLOR::WHITE, 3, 0, COLOR::BLUE);
 80029b8:	20a4      	movs	r0, #164	@ 0xa4
 80029ba:	f009 ffd9 	bl	800c970 <_Znwj>
 80029be:	4603      	mov	r3, r0
 80029c0:	461c      	mov	r4, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6999      	ldr	r1, [r3, #24]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	69da      	ldr	r2, [r3, #28]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	3340      	adds	r3, #64	@ 0x40
 80029ce:	201f      	movs	r0, #31
 80029d0:	9006      	str	r0, [sp, #24]
 80029d2:	2000      	movs	r0, #0
 80029d4:	9005      	str	r0, [sp, #20]
 80029d6:	2003      	movs	r0, #3
 80029d8:	9004      	str	r0, [sp, #16]
 80029da:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80029de:	9003      	str	r0, [sp, #12]
 80029e0:	9302      	str	r3, [sp, #8]
 80029e2:	231f      	movs	r3, #31
 80029e4:	9301      	str	r3, [sp, #4]
 80029e6:	231e      	movs	r3, #30
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	4620      	mov	r0, r4
 80029ee:	f7ff fd67 	bl	80024c0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	639c      	str	r4, [r3, #56]	@ 0x38
}
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	4618      	mov	r0, r3
 80029fa:	371c      	adds	r7, #28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd90      	pop	{r4, r7, pc}
 8002a00:	0800fa68 	.word	0x0800fa68
 8002a04:	0800fae0 	.word	0x0800fae0

08002a08 <_ZN13CPantallaBase4ShowEv>:
//funcion que se tiene que reemplazar para verse
void CPantallaBase::Show()
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
	//dibujo el fondo
//	CRectanguloTft::Show();
	//dibujo el titulo
	LabelTitulo->Show();
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	334c      	adds	r3, #76	@ 0x4c
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4610      	mov	r0, r2
 8002a20:	4798      	blx	r3
}
 8002a22:	bf00      	nop
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <_ZN13CPantallaBase8RefrescaEv>:
void CPantallaBase::Refresca()
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <_ZN13CPantallaBase11SetEstacionEP13CEstacionBase>:
void CPantallaBase::SetEstacion(CEstacionBase *estacion)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b082      	sub	sp, #8
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	6039      	str	r1, [r7, #0]
	Estacion = estacion;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	//asigno los evetos de la estacion
	Estacion->SetManejadorControles(this);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	3328      	adds	r3, #40	@ 0x28
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	3230      	adds	r2, #48	@ 0x30
 8002a66:	4611      	mov	r1, r2
 8002a68:	4798      	blx	r3
	Estacion->ActivarCalefactor();
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	3334      	adds	r3, #52	@ 0x34
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	4798      	blx	r3
}
 8002a80:	bf00      	nop
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <_ZN13CPantallaBase7OcultarEv>:
void CPantallaBase::Ocultar()
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
	CRectanguloTft::Show();
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 f8ac 	bl	8002bf0 <_ZN14CRectanguloTft4ShowEv>
	Estacion->QuitaManejadorControles();
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	332c      	adds	r3, #44	@ 0x2c
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4610      	mov	r0, r2
 8002aac:	4798      	blx	r3
	Visible=false;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
}
 8002ab6:	bf00      	nop
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <_ZN13CPantallaBase9EsVisibleEv>:
bool CPantallaBase::EsVisible()
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
	return Visible;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <_ZN13CPantallaBase10SetVisibleEb>:
void CPantallaBase::SetVisible(bool visible)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	70fb      	strb	r3, [r7, #3]
	if(Visible==visible)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002aea:	78fa      	ldrb	r2, [r7, #3]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d004      	beq.n	8002afa <_ZN13CPantallaBase10SetVisibleEb+0x22>
		return;
	Visible=visible;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	78fa      	ldrb	r2, [r7, #3]
 8002af4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8002af8:	e000      	b.n	8002afc <_ZN13CPantallaBase10SetVisibleEb+0x24>
		return;
 8002afa:	bf00      	nop
}
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <_ZN13CPantallaBase21SetManejadorControlesEP19CManejadorControles>:

void CPantallaBase::SetManejadorControles(CManejadorControles *manejador)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b082      	sub	sp, #8
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
 8002b0e:	6039      	str	r1, [r7, #0]
	ManejadorControles=manejador;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	if(ManejadorControles==NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00d      	beq.n	8002b3e <_ZN13CPantallaBase21SetManejadorControlesEP19CManejadorControles+0x38>
		return;
	ManejadorControles->SetManejadorControles(this);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f8d3 00a8 	ldr.w	r0, [r3, #168]	@ 0xa8
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	333c      	adds	r3, #60	@ 0x3c
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	3230      	adds	r2, #48	@ 0x30
 8002b38:	4611      	mov	r1, r2
 8002b3a:	4798      	blx	r3
 8002b3c:	e000      	b.n	8002b40 <_ZN13CPantallaBase21SetManejadorControlesEP19CManejadorControles+0x3a>
		return;
 8002b3e:	bf00      	nop
}
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
	...

08002b48 <_ZN14CRectanguloTftD1Ev>:
 *      Author: W10
 */

#include <GUI/CRectanguloTft.hpp>

CRectanguloTft::~CRectanguloTft()
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	4a05      	ldr	r2, [pc, #20]	@ (8002b68 <_ZN14CRectanguloTftD1Ev+0x20>)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff fad7 	bl	800210c <_ZN18CComponenteBaseTftD1Ev>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4618      	mov	r0, r3
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	0800fb14 	.word	0x0800fb14

08002b6c <_ZN14CRectanguloTftD0Ev>:
CRectanguloTft::~CRectanguloTft()
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
}
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f7ff ffe7 	bl	8002b48 <_ZN14CRectanguloTftD1Ev>
 8002b7a:	2130      	movs	r1, #48	@ 0x30
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f009 fef5 	bl	800c96c <_ZdlPvj>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4618      	mov	r0, r3
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <_ZN14CRectanguloTftC1Eiiiiiii>:

CRectanguloTft::CRectanguloTft(int xi, int yi, int ancho , int alto , int backColor , int contorno , int colorContorno )
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
 8002b98:	603b      	str	r3, [r7, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff fa9b 	bl	80020d8 <_ZN18CComponenteBaseTftC1Ev>
 8002ba2:	4a12      	ldr	r2, [pc, #72]	@ (8002bec <_ZN14CRectanguloTftC1Eiiiiiii+0x60>)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	629a      	str	r2, [r3, #40]	@ 0x28
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002bb4:	62da      	str	r2, [r3, #44]	@ 0x2c
{
  Xi = xi;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	619a      	str	r2, [r3, #24]
  Ancho = ancho;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	621a      	str	r2, [r3, #32]
  Yi = yi;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	61da      	str	r2, [r3, #28]
  Alto = alto;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	625a      	str	r2, [r3, #36]	@ 0x24
  BackColor = backColor;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	69fa      	ldr	r2, [r7, #28]
 8002bd2:	615a      	str	r2, [r3, #20]
  ColorControrno = colorContorno;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bd8:	62da      	str	r2, [r3, #44]	@ 0x2c
  Contorno = contorno;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6a3a      	ldr	r2, [r7, #32]
 8002bde:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	0800fb14 	.word	0x0800fb14

08002bf0 <_ZN14CRectanguloTft4ShowEv>:
//muestra el rectangulo en pantalla

void CRectanguloTft::Show()
{
 8002bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af02      	add	r7, sp, #8
 8002bf6:	6078      	str	r0, [r7, #4]
  //dibujo el rectangulo
  fillRect(Xi, Yi, Ancho, Alto, BackColor);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	3338      	adds	r3, #56	@ 0x38
 8002c00:	681c      	ldr	r4, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	b219      	sxth	r1, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	b21d      	sxth	r5, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	b21e      	sxth	r6, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c18:	b21b      	sxth	r3, r3
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6952      	ldr	r2, [r2, #20]
 8002c1e:	b292      	uxth	r2, r2
 8002c20:	9201      	str	r2, [sp, #4]
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	4633      	mov	r3, r6
 8002c26:	462a      	mov	r2, r5
 8002c28:	47a0      	blx	r4
  //hay que mostrar contorno?
  if (Contorno == 1) {
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d118      	bne.n	8002c64 <_ZN14CRectanguloTft4ShowEv+0x74>
    drawRect(Xi, Yi, Ancho, Alto, ColorControrno);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	3344      	adds	r3, #68	@ 0x44
 8002c3a:	681c      	ldr	r4, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	b219      	sxth	r1, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	b21d      	sxth	r5, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	b21e      	sxth	r6, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c52:	b21b      	sxth	r3, r3
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002c58:	b292      	uxth	r2, r2
 8002c5a:	9201      	str	r2, [sp, #4]
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	4633      	mov	r3, r6
 8002c60:	462a      	mov	r2, r5
 8002c62:	47a0      	blx	r4
  }
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c6c <_ZN14CRectanguloTft14CambiaPosicionEii>:

void CRectanguloTft::CambiaPosicion(int x, int y)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
  Xi=x;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	619a      	str	r2, [r3, #24]
  Yi=y;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	61da      	str	r2, [r3, #28]
}
 8002c84:	bf00      	nop
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <_ZN14CRectanguloTft12RedimencionaEii>:

void CRectanguloTft::Redimenciona(int ancho, int alto)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  Ancho=ancho;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	621a      	str	r2, [r3, #32]
  Alto=alto;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002ca8:	bf00      	nop
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <_ZN14CRectanguloTft13SetColorFondoEi>:

void CRectanguloTft::SetColorFondo(int color)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  BackColor=color;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	615a      	str	r2, [r3, #20]
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <_ZN14CRectanguloTft13DamePosicionXEv>:
{
  return ColorControrno;
}

int CRectanguloTft::DamePosicionX()
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  return Xi;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	699b      	ldr	r3, [r3, #24]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <_ZN14CRectanguloTft13DamePosicionYEv>:

int CRectanguloTft::DamePosicionY()
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  return Yi;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	69db      	ldr	r3, [r3, #28]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <_ZN14CRectanguloTft8DameAltoEv>:
{
  return Ancho;
}

int CRectanguloTft::DameAlto()
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  return Alto;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <_ZN14CRectanguloTft11DameCentroXEv>:

//regresa el punto central del rectangulo
int CRectanguloTft::DameCentroX()
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  return Xi+(Ancho/2);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	699a      	ldr	r2, [r3, #24]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	0fd9      	lsrs	r1, r3, #31
 8002d2a:	440b      	add	r3, r1
 8002d2c:	105b      	asrs	r3, r3, #1
 8002d2e:	4413      	add	r3, r2
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <_ZN26CConfigurarPantallaMemoriaC1Ev>:
#include <GUI/ConfigurarPantallaMemoria/CConfigurarPantallaMemoria.hpp>
#include <GUI/ManejadorPantallas/CManejadorPantallas.hpp>

extern I2C_HandleTypeDef hi2c1;

CConfigurarPantallaMemoria::CConfigurarPantallaMemoria():
 8002d3c:	b590      	push	{r4, r7, lr}
 8002d3e:	b08d      	sub	sp, #52	@ 0x34
 8002d40:	af08      	add	r7, sp, #32
 8002d42:	6078      	str	r0, [r7, #4]
CPantallaBase(1, (char*)"CONF MEMORIA")
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a6b      	ldr	r2, [pc, #428]	@ (8002ef4 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1b8>)
 8002d48:	2101      	movs	r1, #1
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff fdea 	bl	8002924 <_ZN13CPantallaBaseC1EiPc>
 8002d50:	4a69      	ldr	r2, [pc, #420]	@ (8002ef8 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1bc>)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	4a69      	ldr	r2, [pc, #420]	@ (8002efc <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1c0>)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

{
	// TODO Auto-generated constructor stub
	LabelMemoria=new CEtiquetaTft( 5, 35, 50, 20, COLOR::BLACK,(char*)"Memoria: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8002d64:	20a4      	movs	r0, #164	@ 0xa4
 8002d66:	f009 fe03 	bl	800c970 <_Znwj>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	461c      	mov	r4, r3
 8002d6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d72:	9306      	str	r3, [sp, #24]
 8002d74:	2300      	movs	r3, #0
 8002d76:	9305      	str	r3, [sp, #20]
 8002d78:	2303      	movs	r3, #3
 8002d7a:	9304      	str	r3, [sp, #16]
 8002d7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d80:	9303      	str	r3, [sp, #12]
 8002d82:	4b5f      	ldr	r3, [pc, #380]	@ (8002f00 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1c4>)
 8002d84:	9302      	str	r3, [sp, #8]
 8002d86:	2300      	movs	r3, #0
 8002d88:	9301      	str	r3, [sp, #4]
 8002d8a:	2314      	movs	r3, #20
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	2332      	movs	r3, #50	@ 0x32
 8002d90:	2223      	movs	r2, #35	@ 0x23
 8002d92:	2105      	movs	r1, #5
 8002d94:	4620      	mov	r0, r4
 8002d96:	f7ff fb93 	bl	80024c0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f8c3 40b4 	str.w	r4, [r3, #180]	@ 0xb4
	LabelTemperatura = new CEtiquetaTft( 5, 65, 50, 20, COLOR::BLACK,(char*)"Temperatura", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8002da0:	20a4      	movs	r0, #164	@ 0xa4
 8002da2:	f009 fde5 	bl	800c970 <_Znwj>
 8002da6:	4603      	mov	r3, r0
 8002da8:	461c      	mov	r4, r3
 8002daa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002dae:	9306      	str	r3, [sp, #24]
 8002db0:	2300      	movs	r3, #0
 8002db2:	9305      	str	r3, [sp, #20]
 8002db4:	2303      	movs	r3, #3
 8002db6:	9304      	str	r3, [sp, #16]
 8002db8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002dbc:	9303      	str	r3, [sp, #12]
 8002dbe:	4b51      	ldr	r3, [pc, #324]	@ (8002f04 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1c8>)
 8002dc0:	9302      	str	r3, [sp, #8]
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	9301      	str	r3, [sp, #4]
 8002dc6:	2314      	movs	r3, #20
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	2332      	movs	r3, #50	@ 0x32
 8002dcc:	2241      	movs	r2, #65	@ 0x41
 8002dce:	2105      	movs	r1, #5
 8002dd0:	4620      	mov	r0, r4
 8002dd2:	f7ff fb75 	bl	80024c0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f8c3 40b8 	str.w	r4, [r3, #184]	@ 0xb8
	int centroX = DameCentroX();
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff ff9a 	bl	8002d18 <_ZN14CRectanguloTft11DameCentroXEv>
 8002de4:	60f8      	str	r0, [r7, #12]
	LabelTemperaturas = new CEtiquetaTft( centroX - 150 / 2, 105, 150, 30,COLOR::WHITE, (char*)"000/000", COLOR::BLACK, 3, 1, COLOR::RED);
 8002de6:	20a4      	movs	r0, #164	@ 0xa4
 8002de8:	f009 fdc2 	bl	800c970 <_Znwj>
 8002dec:	4603      	mov	r3, r0
 8002dee:	461c      	mov	r4, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f1a3 014b 	sub.w	r1, r3, #75	@ 0x4b
 8002df6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002dfa:	9306      	str	r3, [sp, #24]
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	9305      	str	r3, [sp, #20]
 8002e00:	2303      	movs	r3, #3
 8002e02:	9304      	str	r3, [sp, #16]
 8002e04:	2300      	movs	r3, #0
 8002e06:	9303      	str	r3, [sp, #12]
 8002e08:	4b3f      	ldr	r3, [pc, #252]	@ (8002f08 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1cc>)
 8002e0a:	9302      	str	r3, [sp, #8]
 8002e0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e10:	9301      	str	r3, [sp, #4]
 8002e12:	231e      	movs	r3, #30
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	2396      	movs	r3, #150	@ 0x96
 8002e18:	2269      	movs	r2, #105	@ 0x69
 8002e1a:	4620      	mov	r0, r4
 8002e1c:	f7ff fb50 	bl	80024c0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f8c3 40bc 	str.w	r4, [r3, #188]	@ 0xbc
	LabelTemperaturas->SetSeparacion(5, 5);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002e2c:	2205      	movs	r2, #5
 8002e2e:	2105      	movs	r1, #5
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff fcb5 	bl	80027a0 <_ZN12CEtiquetaTft13SetSeparacionEii>
	LabelAire = new CEtiquetaTft( 5, 135, 200, 30, COLOR::BLACK,(char*) "Aire: 00",COLOR::WHITE, 3, 0, COLOR::RED);
 8002e36:	20a4      	movs	r0, #164	@ 0xa4
 8002e38:	f009 fd9a 	bl	800c970 <_Znwj>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	461c      	mov	r4, r3
 8002e40:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002e44:	9306      	str	r3, [sp, #24]
 8002e46:	2300      	movs	r3, #0
 8002e48:	9305      	str	r3, [sp, #20]
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	9304      	str	r3, [sp, #16]
 8002e4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e52:	9303      	str	r3, [sp, #12]
 8002e54:	4b2d      	ldr	r3, [pc, #180]	@ (8002f0c <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1d0>)
 8002e56:	9302      	str	r3, [sp, #8]
 8002e58:	2300      	movs	r3, #0
 8002e5a:	9301      	str	r3, [sp, #4]
 8002e5c:	231e      	movs	r3, #30
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	23c8      	movs	r3, #200	@ 0xc8
 8002e62:	2287      	movs	r2, #135	@ 0x87
 8002e64:	2105      	movs	r1, #5
 8002e66:	4620      	mov	r0, r4
 8002e68:	f7ff fb2a 	bl	80024c0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f8c3 40c0 	str.w	r4, [r3, #192]	@ 0xc0

	LabelGuardar=new CEtiquetaTft( 10, 200, 130, 30, COLOR::GREEN,(char*)"GUARDAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 8002e72:	20a4      	movs	r0, #164	@ 0xa4
 8002e74:	f009 fd7c 	bl	800c970 <_Znwj>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	461c      	mov	r4, r3
 8002e7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e80:	9306      	str	r3, [sp, #24]
 8002e82:	2301      	movs	r3, #1
 8002e84:	9305      	str	r3, [sp, #20]
 8002e86:	2303      	movs	r3, #3
 8002e88:	9304      	str	r3, [sp, #16]
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	9303      	str	r3, [sp, #12]
 8002e8e:	4b20      	ldr	r3, [pc, #128]	@ (8002f10 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1d4>)
 8002e90:	9302      	str	r3, [sp, #8]
 8002e92:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002e96:	9301      	str	r3, [sp, #4]
 8002e98:	231e      	movs	r3, #30
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	2382      	movs	r3, #130	@ 0x82
 8002e9e:	22c8      	movs	r2, #200	@ 0xc8
 8002ea0:	210a      	movs	r1, #10
 8002ea2:	4620      	mov	r0, r4
 8002ea4:	f7ff fb0c 	bl	80024c0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f8c3 40ac 	str.w	r4, [r3, #172]	@ 0xac
	LabelCancelar=new CEtiquetaTft( 160, 200, 145, 30, COLOR::RED,(char*)"CANCELAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 8002eae:	20a4      	movs	r0, #164	@ 0xa4
 8002eb0:	f009 fd5e 	bl	800c970 <_Znwj>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	461c      	mov	r4, r3
 8002eb8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ebc:	9306      	str	r3, [sp, #24]
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	9305      	str	r3, [sp, #20]
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	9304      	str	r3, [sp, #16]
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	9303      	str	r3, [sp, #12]
 8002eca:	4b12      	ldr	r3, [pc, #72]	@ (8002f14 <_ZN26CConfigurarPantallaMemoriaC1Ev+0x1d8>)
 8002ecc:	9302      	str	r3, [sp, #8]
 8002ece:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002ed2:	9301      	str	r3, [sp, #4]
 8002ed4:	231e      	movs	r3, #30
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	2391      	movs	r3, #145	@ 0x91
 8002eda:	22c8      	movs	r2, #200	@ 0xc8
 8002edc:	21a0      	movs	r1, #160	@ 0xa0
 8002ede:	4620      	mov	r0, r4
 8002ee0:	f7ff faee 	bl	80024c0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f8c3 40b0 	str.w	r4, [r3, #176]	@ 0xb0

}
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4618      	mov	r0, r3
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd90      	pop	{r4, r7, pc}
 8002ef4:	0800f68c 	.word	0x0800f68c
 8002ef8:	0800fb74 	.word	0x0800fb74
 8002efc:	0800fc00 	.word	0x0800fc00
 8002f00:	0800f69c 	.word	0x0800f69c
 8002f04:	0800f6a8 	.word	0x0800f6a8
 8002f08:	0800f6b4 	.word	0x0800f6b4
 8002f0c:	0800f6bc 	.word	0x0800f6bc
 8002f10:	0800f6c8 	.word	0x0800f6c8
 8002f14:	0800f6d0 	.word	0x0800f6d0

08002f18 <_ZN26CConfigurarPantallaMemoriaD1Ev>:

CConfigurarPantallaMemoria::~CConfigurarPantallaMemoria()
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	4a07      	ldr	r2, [pc, #28]	@ (8002f40 <_ZN26CConfigurarPantallaMemoriaD1Ev+0x28>)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	4a07      	ldr	r2, [pc, #28]	@ (8002f44 <_ZN26CConfigurarPantallaMemoriaD1Ev+0x2c>)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff fcc4 	bl	80028bc <_ZN13CPantallaBaseD1Ev>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	0800fb74 	.word	0x0800fb74
 8002f44:	0800fc00 	.word	0x0800fc00

08002f48 <_ZThn48_N26CConfigurarPantallaMemoriaD1Ev>:
	void LeeDatosMemoria();
	int DameDireccionMemoria();
	void MuestraInformacion();
public:
	CConfigurarPantallaMemoria();
	virtual ~CConfigurarPantallaMemoria();
 8002f48:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8002f4c:	f7ff bfe4 	b.w	8002f18 <_ZN26CConfigurarPantallaMemoriaD1Ev>

08002f50 <_ZN26CConfigurarPantallaMemoriaD0Ev>:
CConfigurarPantallaMemoria::~CConfigurarPantallaMemoria()
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
}
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f7ff ffdd 	bl	8002f18 <_ZN26CConfigurarPantallaMemoriaD1Ev>
 8002f5e:	21e0      	movs	r1, #224	@ 0xe0
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f009 fd03 	bl	800c96c <_ZdlPvj>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <_ZThn48_N26CConfigurarPantallaMemoriaD0Ev>:
 8002f70:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8002f74:	f7ff bfec 	b.w	8002f50 <_ZN26CConfigurarPantallaMemoriaD0Ev>

08002f78 <_ZN26CConfigurarPantallaMemoria4ShowEv>:

void CConfigurarPantallaMemoria::Show()
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
	VelocidadAireInicialPotenciometro=ManejadorControles->GetNivelAire();
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002f86:	4618      	mov	r0, r3
 8002f88:	f003 fb43 	bl	8006612 <_ZN19CManejadorControles12GetNivelAireEv>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	CPantallaBase::Show();
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff fd36 	bl	8002a08 <_ZN13CPantallaBase4ShowEv>
	LeeDatosMemoria();
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 f881 	bl	80030a4 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv>
	LabelTemperatura->Show();
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	334c      	adds	r3, #76	@ 0x4c
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4610      	mov	r0, r2
 8002fb6:	4798      	blx	r3
	MuestraInformacion();
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 f8df 	bl	800317c <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv>
	LabelMemoria->SetTexto((char*)"Memoria: %d", NumeroMemoria);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f8d3 00b4 	ldr.w	r0, [r3, #180]	@ 0xb4
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002fca:	461a      	mov	r2, r3
 8002fcc:	4913      	ldr	r1, [pc, #76]	@ (800301c <_ZN26CConfigurarPantallaMemoria4ShowEv+0xa4>)
 8002fce:	f7ff fab1 	bl	8002534 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelMemoria->Show();
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	334c      	adds	r3, #76	@ 0x4c
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	4798      	blx	r3
	LabelGuardar->Show();
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	334c      	adds	r3, #76	@ 0x4c
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	4798      	blx	r3
	LabelCancelar->Show();
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	334c      	adds	r3, #76	@ 0x4c
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4610      	mov	r0, r2
 8003012:	4798      	blx	r3
}
 8003014:	bf00      	nop
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	0800f6dc 	.word	0x0800f6dc

08003020 <_ZN26CConfigurarPantallaMemoria8RefrescaEv>:

void CConfigurarPantallaMemoria::Refresca()
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
	int velocidad=ManejadorControles->GetNivelAire();
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800302e:	4618      	mov	r0, r3
 8003030:	f003 faef 	bl	8006612 <_ZN19CManejadorControles12GetNivelAireEv>
 8003034:	60f8      	str	r0, [r7, #12]
	if(VelocidadAireInicialPotenciometro>velocidad+1 ||VelocidadAireInicialPotenciometro<velocidad-1)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	3301      	adds	r3, #1
 8003040:	429a      	cmp	r2, r3
 8003042:	dc06      	bgt.n	8003052 <_ZN26CConfigurarPantallaMemoria8RefrescaEv+0x32>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	3b01      	subs	r3, #1
 800304e:	429a      	cmp	r2, r3
 8003050:	da03      	bge.n	800305a <_ZN26CConfigurarPantallaMemoria8RefrescaEv+0x3a>
	{
		VelocidadAire =velocidad;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	}
	MuestraInformacion();
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f88e 	bl	800317c <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv>
}
 8003060:	bf00      	nop
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <_ZN26CConfigurarPantallaMemoria10SetMemoriaEi>:
void CConfigurarPantallaMemoria::SetMemoria(int numeroMemoria)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
	TemperaturaAnterior=-1;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f04f 32ff 	mov.w	r2, #4294967295
 8003078:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	VelocidadAireAnterior=-1;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f04f 32ff 	mov.w	r2, #4294967295
 8003082:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	NumeroMemoria=numeroMemoria;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
	DireccionMemoria=DameDireccionMemoria();
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f852 	bl	8003138 <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv>
 8003094:	4602      	mov	r2, r0
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800309c:	bf00      	nop
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv>:

void CConfigurarPantallaMemoria::LeeDatosMemoria()
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af04      	add	r7, sp, #16
 80030aa:	6078      	str	r0, [r7, #4]
	uint16_t datos_r[2];
	  if( HAL_I2C_Mem_Read(&hi2c1,ADDRESS_EEPROM,DireccionMemoria,I2C_MEMADD_SIZE_8BIT,(uint8_t*)datos_r,4,HAL_MAX_DELAY)==HAL_OK)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	f04f 33ff 	mov.w	r3, #4294967295
 80030b8:	9302      	str	r3, [sp, #8]
 80030ba:	2304      	movs	r3, #4
 80030bc:	9301      	str	r3, [sp, #4]
 80030be:	f107 030c 	add.w	r3, r7, #12
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	2301      	movs	r3, #1
 80030c6:	21a0      	movs	r1, #160	@ 0xa0
 80030c8:	481a      	ldr	r0, [pc, #104]	@ (8003134 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x90>)
 80030ca:	f006 fba3 	bl	8009814 <HAL_I2C_Mem_Read>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	bf0c      	ite	eq
 80030d4:	2301      	moveq	r3, #1
 80030d6:	2300      	movne	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d026      	beq.n	800312c <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x88>
	  {
			Temperatura=datos_r[0];
 80030de:	89bb      	ldrh	r3, [r7, #12]
 80030e0:	461a      	mov	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
			VelocidadAire=datos_r[1];
 80030e8:	89fb      	ldrh	r3, [r7, #14]
 80030ea:	461a      	mov	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

		 	if(Temperatura<0 || Temperatura>500)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	db05      	blt.n	8003108 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x64>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003102:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003106:	dd03      	ble.n	8003110 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x6c>
		 	{
		 		Temperatura=100;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2264      	movs	r2, #100	@ 0x64
 800310c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
		 	}
		 	if(VelocidadAire<0 || VelocidadAire>100)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8003116:	2b00      	cmp	r3, #0
 8003118:	db04      	blt.n	8003124 <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x80>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8003120:	2b64      	cmp	r3, #100	@ 0x64
 8003122:	dd03      	ble.n	800312c <_ZN26CConfigurarPantallaMemoria15LeeDatosMemoriaEv+0x88>
		 	{
		 		VelocidadAire=50;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2232      	movs	r2, #50	@ 0x32
 8003128:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
		 	}
	  }

}
 800312c:	bf00      	nop
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	200002bc 	.word	0x200002bc

08003138 <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv>:
int CConfigurarPantallaMemoria::DameDireccionMemoria()
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
	int direccion=1;
 8003140:	2301      	movs	r3, #1
 8003142:	60fb      	str	r3, [r7, #12]
	switch(NumeroMemoria)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800314a:	2b03      	cmp	r3, #3
 800314c:	d00c      	beq.n	8003168 <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv+0x30>
 800314e:	2b03      	cmp	r3, #3
 8003150:	dc0d      	bgt.n	800316e <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv+0x36>
 8003152:	2b01      	cmp	r3, #1
 8003154:	d002      	beq.n	800315c <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv+0x24>
 8003156:	2b02      	cmp	r3, #2
 8003158:	d003      	beq.n	8003162 <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv+0x2a>
 800315a:	e008      	b.n	800316e <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv+0x36>
	{
	case 1:
		direccion=1;
 800315c:	2301      	movs	r3, #1
 800315e:	60fb      	str	r3, [r7, #12]
		break;
 8003160:	e005      	b.n	800316e <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv+0x36>
	case 2:
		direccion=5;
 8003162:	2305      	movs	r3, #5
 8003164:	60fb      	str	r3, [r7, #12]
		break;
 8003166:	e002      	b.n	800316e <_ZN26CConfigurarPantallaMemoria20DameDireccionMemoriaEv+0x36>
	case 3:
		direccion=9;
 8003168:	2309      	movs	r3, #9
 800316a:	60fb      	str	r3, [r7, #12]
		break;
 800316c:	bf00      	nop
	}
	return direccion;
 800316e:	68fb      	ldr	r3, [r7, #12]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3714      	adds	r7, #20
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv>:
void CConfigurarPantallaMemoria::MuestraInformacion()
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]

	if(TemperaturaAnterior!=Temperatura)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003190:	429a      	cmp	r2, r3
 8003192:	d01a      	beq.n	80031ca <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv+0x4e>
	{
		LabelTemperaturas->SetTexto((char*)"%d", Temperatura);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80031a0:	461a      	mov	r2, r3
 80031a2:	491d      	ldr	r1, [pc, #116]	@ (8003218 <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv+0x9c>)
 80031a4:	f7ff f9c6 	bl	8002534 <_ZN12CEtiquetaTft8SetTextoEPcz>
		LabelTemperaturas->Show();
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	334c      	adds	r3, #76	@ 0x4c
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4610      	mov	r0, r2
 80031bc:	4798      	blx	r3
		TemperaturaAnterior=Temperatura;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	}

	if( VelocidadAireAnterior!=VelocidadAire)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d01a      	beq.n	8003210 <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv+0x94>
	{
		LabelAire->SetTexto((char*)"Aire: %d", VelocidadAire);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80031e6:	461a      	mov	r2, r3
 80031e8:	490c      	ldr	r1, [pc, #48]	@ (800321c <_ZN26CConfigurarPantallaMemoria18MuestraInformacionEv+0xa0>)
 80031ea:	f7ff f9a3 	bl	8002534 <_ZN12CEtiquetaTft8SetTextoEPcz>
		LabelAire->Show();
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	334c      	adds	r3, #76	@ 0x4c
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4610      	mov	r0, r2
 8003202:	4798      	blx	r3
		VelocidadAireAnterior=VelocidadAire;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	}
}
 8003210:	bf00      	nop
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	0800f6e8 	.word	0x0800f6e8
 800321c:	0800f6ec 	.word	0x0800f6ec

08003220 <_ZN26CConfigurarPantallaMemoria19OnPerillaIncrementoEv>:
void CConfigurarPantallaMemoria::OnPerillaIncremento()
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
	if(Temperatura<500)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800322e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003232:	da06      	bge.n	8003242 <_ZN26CConfigurarPantallaMemoria19OnPerillaIncrementoEv+0x22>
		Temperatura++;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800323a:	1c5a      	adds	r2, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <_ZThn48_N26CConfigurarPantallaMemoria19OnPerillaIncrementoEv>:
	virtual void Show();
	virtual void Refresca();
	virtual void SetMemoria(int numeroMemoria);
	virtual void OnPerillaIncremento();
 800324e:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8003252:	f7ff bfe5 	b.w	8003220 <_ZN26CConfigurarPantallaMemoria19OnPerillaIncrementoEv>

08003256 <_ZN26CConfigurarPantallaMemoria19OnPerillaDecrementoEv>:
void CConfigurarPantallaMemoria::OnPerillaDecremento()
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
	if(Temperatura>0)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003264:	2b00      	cmp	r3, #0
 8003266:	dd06      	ble.n	8003276 <_ZN26CConfigurarPantallaMemoria19OnPerillaDecrementoEv+0x20>
		Temperatura--;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800326e:	1e5a      	subs	r2, r3, #1
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <_ZThn48_N26CConfigurarPantallaMemoria19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 8003282:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8003286:	f7ff bfe6 	b.w	8003256 <_ZN26CConfigurarPantallaMemoria19OnPerillaDecrementoEv>
	...

0800328c <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv>:
void CConfigurarPantallaMemoria::OnBotonUnoClickEvent()
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b088      	sub	sp, #32
 8003290:	af04      	add	r7, sp, #16
 8003292:	6078      	str	r0, [r7, #4]
	//hay que guarar la informacion
 	uint16_t datos_w[2];

 	datos_w[0]=Temperatura;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800329a:	b29b      	uxth	r3, r3
 800329c:	81bb      	strh	r3, [r7, #12]
 	datos_w[1]=VelocidadAire;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Mem_Write(&hi2c1,ADDRESS_EEPROM,DireccionMemoria,I2C_MEMADD_SIZE_8BIT,(uint8_t*)datos_w,4,HAL_MAX_DELAY);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	f04f 33ff 	mov.w	r3, #4294967295
 80032b4:	9302      	str	r3, [sp, #8]
 80032b6:	2304      	movs	r3, #4
 80032b8:	9301      	str	r3, [sp, #4]
 80032ba:	f107 030c 	add.w	r3, r7, #12
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	2301      	movs	r3, #1
 80032c2:	21a0      	movs	r1, #160	@ 0xa0
 80032c4:	4804      	ldr	r0, [pc, #16]	@ (80032d8 <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x4c>)
 80032c6:	f006 f9ab 	bl	8009620 <HAL_I2C_Mem_Write>
	 ManejadorPantallas.MuestraMenuPrincipal();
 80032ca:	4804      	ldr	r0, [pc, #16]	@ (80032dc <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv+0x50>)
 80032cc:	f000 f88e 	bl	80033ec <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>
}
 80032d0:	bf00      	nop
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	200002bc 	.word	0x200002bc
 80032dc:	20000240 	.word	0x20000240

080032e0 <_ZThn48_N26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv>:
	virtual void OnBotonUnoClickEvent();
 80032e0:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80032e4:	f7ff bfd2 	b.w	800328c <_ZN26CConfigurarPantallaMemoria20OnBotonUnoClickEventEv>

080032e8 <_ZN26CConfigurarPantallaMemoria20OnBotonDosClickEventEv>:
void CConfigurarPantallaMemoria::OnBotonDosClickEvent()
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
	 ManejadorPantallas.MuestraMenuPrincipal();
 80032f0:	4803      	ldr	r0, [pc, #12]	@ (8003300 <_ZN26CConfigurarPantallaMemoria20OnBotonDosClickEventEv+0x18>)
 80032f2:	f000 f87b 	bl	80033ec <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>

}
 80032f6:	bf00      	nop
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	20000240 	.word	0x20000240

08003304 <_ZThn48_N26CConfigurarPantallaMemoria20OnBotonDosClickEventEv>:
	virtual void OnBotonDosClickEvent();
 8003304:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8003308:	f7ff bfee 	b.w	80032e8 <_ZN26CConfigurarPantallaMemoria20OnBotonDosClickEventEv>

0800330c <_ZN19CManejadorPantallasC1Ev>:
#include "GUI/PantallaManual/CPantallaManual.hpp"
#include <GUI/PantallaMenuPrincipal/CMenuPrincipal.h>
#include <stdio.h>
#include <GUI/ConfigurarPantallaMemoria/CConfigurarPantallaMemoria.hpp>

CManejadorPantallas::CManejadorPantallas()
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	4a0f      	ldr	r2, [pc, #60]	@ (8003354 <_ZN19CManejadorPantallasC1Ev+0x48>)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	605a      	str	r2, [r3, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	609a      	str	r2, [r3, #8]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	60da      	str	r2, [r3, #12]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	611a      	str	r2, [r3, #16]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	615a      	str	r2, [r3, #20]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	619a      	str	r2, [r3, #24]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
{
	// TODO Auto-generated constructor stub
}
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4618      	mov	r0, r3
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	0800fc34 	.word	0x0800fc34

08003358 <_ZN19CManejadorPantallasD1Ev>:

CManejadorPantallas::~CManejadorPantallas()
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	4a04      	ldr	r2, [pc, #16]	@ (8003374 <_ZN19CManejadorPantallasD1Ev+0x1c>)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4618      	mov	r0, r3
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	0800fc34 	.word	0x0800fc34

08003378 <_ZN19CManejadorPantallasD0Ev>:
CManejadorPantallas::~CManejadorPantallas()
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
}
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f7ff ffe9 	bl	8003358 <_ZN19CManejadorPantallasD1Ev>
 8003386:	2130      	movs	r1, #48	@ 0x30
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f009 faef 	bl	800c96c <_ZdlPvj>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4618      	mov	r0, r3
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <_ZN19CManejadorPantallas11SetEstacionEP13CEstacionBase>:
void CManejadorPantallas::SetEstacion(CEstacionBase* estacion)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
	Estacion=estacion;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	605a      	str	r2, [r3, #4]
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>:
void CManejadorPantallas::MuestraPantallaManual()
{
 80033b4:	b590      	push	{r4, r7, lr}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
	if(pantallaManual==NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d109      	bne.n	80033d8 <_ZN19CManejadorPantallas21MuestraPantallaManualEv+0x24>
		pantallaManual=new CPantallaManual();
 80033c4:	20e8      	movs	r0, #232	@ 0xe8
 80033c6:	f009 fad3 	bl	800c970 <_Znwj>
 80033ca:	4603      	mov	r3, r0
 80033cc:	461c      	mov	r4, r3
 80033ce:	4620      	mov	r0, r4
 80033d0:	f001 f9d0 	bl	8004774 <_ZN15CPantallaManualC1Ev>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	615c      	str	r4, [r3, #20]
	AsignaPantallaActual(pantallaManual);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	4619      	mov	r1, r3
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f834 	bl	800344c <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd90      	pop	{r4, r7, pc}

080033ec <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>:
void CManejadorPantallas::MuestraMenuPrincipal()
{
 80033ec:	b590      	push	{r4, r7, lr}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
	if(menuPrincipal==NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d109      	bne.n	8003410 <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv+0x24>
		menuPrincipal=new CMenuPrincipal();
 80033fc:	20c0      	movs	r0, #192	@ 0xc0
 80033fe:	f009 fab7 	bl	800c970 <_Znwj>
 8003402:	4603      	mov	r3, r0
 8003404:	461c      	mov	r4, r3
 8003406:	4620      	mov	r0, r4
 8003408:	f001 ff9e 	bl	8005348 <_ZN14CMenuPrincipalC1Ev>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	619c      	str	r4, [r3, #24]
	AsignaPantallaActual(menuPrincipal);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	4619      	mov	r1, r3
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f818 	bl	800344c <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	bd90      	pop	{r4, r7, pc}

08003424 <_ZN19CManejadorPantallas16RefrescaPantallaEv>:

void CManejadorPantallas::RefrescaPantalla()
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
	CambiaPantalla();
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f81f 	bl	8003470 <_ZN19CManejadorPantallas14CambiaPantallaEv>
	PantallaActual->Refresca();
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	3358      	adds	r3, #88	@ 0x58
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4610      	mov	r0, r2
 8003442:	4798      	blx	r3
}
 8003444:	bf00      	nop
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>:
void CManejadorPantallas::AsignaPantallaActual(CPantallaBase* pantalla)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
	PantallaPendinteCambiar=pantalla;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	609a      	str	r2, [r3, #8]
	CambioPantalla=true;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <_ZN19CManejadorPantallas14CambiaPantallaEv>:
void CManejadorPantallas::CambiaPantalla()
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
	if(	CambioPantalla==false)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800347e:	2b00      	cmp	r3, #0
 8003480:	d038      	beq.n	80034f4 <_ZN19CManejadorPantallas14CambiaPantallaEv+0x84>
		return;
	if(PantallaActual!=NULL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d008      	beq.n	800349c <_ZN19CManejadorPantallas14CambiaPantallaEv+0x2c>
		PantallaActual->Ocultar();
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	3364      	adds	r3, #100	@ 0x64
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4610      	mov	r0, r2
 800349a:	4798      	blx	r3
	PantallaAnterior=PantallaActual;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68da      	ldr	r2, [r3, #12]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	611a      	str	r2, [r3, #16]
	PantallaActual=PantallaPendinteCambiar;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	60da      	str	r2, [r3, #12]
	PantallaActual->SetEstacion(Estacion);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68d8      	ldr	r0, [r3, #12]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	335c      	adds	r3, #92	@ 0x5c
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6852      	ldr	r2, [r2, #4]
 80034be:	4611      	mov	r1, r2
 80034c0:	4798      	blx	r3
	PantallaActual->SetManejadorControles(ManejadorControles);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68d8      	ldr	r0, [r3, #12]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	3360      	adds	r3, #96	@ 0x60
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	69d2      	ldr	r2, [r2, #28]
 80034d4:	4611      	mov	r1, r2
 80034d6:	4798      	blx	r3
	PantallaActual->Show();
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68da      	ldr	r2, [r3, #12]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	334c      	adds	r3, #76	@ 0x4c
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4610      	mov	r0, r2
 80034e8:	4798      	blx	r3
	CambioPantalla=false;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 80034f2:	e000      	b.n	80034f6 <_ZN19CManejadorPantallas14CambiaPantallaEv+0x86>
		return;
 80034f4:	bf00      	nop
}
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <_ZN19CManejadorPantallas21SetManejadorControlesEP19CManejadorControles>:

void CManejadorPantallas::SetManejadorControles(CManejadorControles* manejador)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
	ManejadorControles=manejador;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	61da      	str	r2, [r3, #28]
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <_ZN19CManejadorPantallas35MuestraPantallaConfiguracionMemoriaEi>:

void CManejadorPantallas::MuestraPantallaConfiguracionMemoria(int meoria)
{
 8003518:	b590      	push	{r4, r7, lr}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
	if(ConfigurarPantallaMemoria==NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d109      	bne.n	800353e <_ZN19CManejadorPantallas35MuestraPantallaConfiguracionMemoriaEi+0x26>
		ConfigurarPantallaMemoria=new CConfigurarPantallaMemoria();
 800352a:	20e0      	movs	r0, #224	@ 0xe0
 800352c:	f009 fa20 	bl	800c970 <_Znwj>
 8003530:	4603      	mov	r3, r0
 8003532:	461c      	mov	r4, r3
 8003534:	4620      	mov	r0, r4
 8003536:	f7ff fc01 	bl	8002d3c <_ZN26CConfigurarPantallaMemoriaC1Ev>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	621c      	str	r4, [r3, #32]
	ConfigurarPantallaMemoria->SetMemoria(meoria);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a1a      	ldr	r2, [r3, #32]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	3370      	adds	r3, #112	@ 0x70
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6839      	ldr	r1, [r7, #0]
 800354e:	4610      	mov	r0, r2
 8003550:	4798      	blx	r3
	AsignaPantallaActual(ConfigurarPantallaMemoria);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	4619      	mov	r1, r3
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff ff77 	bl	800344c <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	bd90      	pop	{r4, r7, pc}

08003566 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>:
void CManejadorPantallas::MuestraPantallaMemoria(int memoria)
{
 8003566:	b590      	push	{r4, r7, lr}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	6039      	str	r1, [r7, #0]
	if(PantallaMemoria==NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10a      	bne.n	800358e <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi+0x28>
		PantallaMemoria=new CPantallaMemoria();
 8003578:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800357c:	f009 f9f8 	bl	800c970 <_Znwj>
 8003580:	4603      	mov	r3, r0
 8003582:	461c      	mov	r4, r3
 8003584:	4620      	mov	r0, r4
 8003586:	f001 fce5 	bl	8004f54 <_ZN16CPantallaMemoriaC1Ev>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	625c      	str	r4, [r3, #36]	@ 0x24
	PantallaMemoria->SetMemoria(memoria);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003592:	6839      	ldr	r1, [r7, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f001 fda7 	bl	80050e8 <_ZN16CPantallaMemoria10SetMemoriaEi>
	AsignaPantallaActual(PantallaMemoria);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359e:	4619      	mov	r1, r3
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7ff ff53 	bl	800344c <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>

}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd90      	pop	{r4, r7, pc}

080035ae <_ZN19CManejadorPantallas27MuestraCPantallaCalibracionEv>:
	if(PantallaAnterior==NULL)
		return;
	AsignaPantallaActual(PantallaAnterior);
}
void CManejadorPantallas::MuestraCPantallaCalibracion()
{
 80035ae:	b590      	push	{r4, r7, lr}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
	if(PantallaCalibracion==NULL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d109      	bne.n	80035d2 <_ZN19CManejadorPantallas27MuestraCPantallaCalibracionEv+0x24>
		PantallaCalibracion=new CPantallaCalibracion();
 80035be:	20ec      	movs	r0, #236	@ 0xec
 80035c0:	f009 f9d6 	bl	800c970 <_Znwj>
 80035c4:	4603      	mov	r3, r0
 80035c6:	461c      	mov	r4, r3
 80035c8:	4620      	mov	r0, r4
 80035ca:	f000 fc27 	bl	8003e1c <_ZN20CPantallaCalibracionC1Ev>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	629c      	str	r4, [r3, #40]	@ 0x28
	AsignaPantallaActual(PantallaCalibracion);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d6:	4619      	mov	r1, r3
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f7ff ff37 	bl	800344c <_ZN19CManejadorPantallas20AsignaPantallaActualEP13CPantallaBase>
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd90      	pop	{r4, r7, pc}
	...

080035e8 <_ZN20CManejadorEventoMenuC1Ev>:
 *      Author: W10
 */

#include <GUI/Menu/CManejadorEventoMenu.hpp>

CManejadorEventoMenu::CManejadorEventoMenu()
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	4a04      	ldr	r2, [pc, #16]	@ (8003604 <_ZN20CManejadorEventoMenuC1Ev+0x1c>)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4618      	mov	r0, r3
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	0800fc44 	.word	0x0800fc44

08003608 <_ZN20CManejadorEventoMenuD1Ev>:

CManejadorEventoMenu::~CManejadorEventoMenu()
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	4a04      	ldr	r2, [pc, #16]	@ (8003624 <_ZN20CManejadorEventoMenuD1Ev+0x1c>)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4618      	mov	r0, r3
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	0800fc44 	.word	0x0800fc44

08003628 <_ZN20CManejadorEventoMenuD0Ev>:
CManejadorEventoMenu::~CManejadorEventoMenu()
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
}
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7ff ffe9 	bl	8003608 <_ZN20CManejadorEventoMenuD1Ev>
 8003636:	2104      	movs	r1, #4
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f009 f997 	bl	800c96c <_ZdlPvj>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4618      	mov	r0, r3
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <_ZN20CManejadorEventoMenu11OnMenuEventEi>:

void CManejadorEventoMenu::OnMenuEvent(int identificador)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]

}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
	...

08003660 <_ZN5CMenuC1Eiiiiiii>:
 */

#include <GUI/Menu/CMenu.hpp>
#include "GUI/CRectanguloTft.hpp"

CMenu::CMenu(int xi, int yi, int ancho, int alto,int backColor, int contorno, int colorContorno):
 8003660:	b580      	push	{r7, lr}
 8003662:	b088      	sub	sp, #32
 8003664:	af04      	add	r7, sp, #16
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
 800366c:	603b      	str	r3, [r7, #0]
	CRectanguloTft(xi,yi,ancho,alto,backColor,contorno,colorContorno)
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003672:	9303      	str	r3, [sp, #12]
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	9302      	str	r3, [sp, #8]
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	9301      	str	r3, [sp, #4]
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	68b9      	ldr	r1, [r7, #8]
 8003686:	f7ff fa81 	bl	8002b8c <_ZN14CRectanguloTftC1Eiiiiiii>
 800368a:	4a0c      	ldr	r2, [pc, #48]	@ (80036bc <_ZN5CMenuC1Eiiiiiii+0x5c>)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2219      	movs	r2, #25
 8003694:	651a      	str	r2, [r3, #80]	@ 0x50
{
	// TODO Auto-generated constructor stub
	Opciones=NULL;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	631a      	str	r2, [r3, #48]	@ 0x30
	ItemInicial=NULL;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	635a      	str	r2, [r3, #52]	@ 0x34
	ItemsXPagina=alto/(AnchoItem+5);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036a6:	3305      	adds	r3, #5
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	fb92 f2f3 	sdiv	r2, r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	0800fc58 	.word	0x0800fc58

080036c0 <_ZN5CMenuD1Ev>:

CMenu::~CMenu()
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	4a05      	ldr	r2, [pc, #20]	@ (80036e0 <_ZN5CMenuD1Ev+0x20>)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff fa39 	bl	8002b48 <_ZN14CRectanguloTftD1Ev>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4618      	mov	r0, r3
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	0800fc58 	.word	0x0800fc58

080036e4 <_ZN5CMenuD0Ev>:
CMenu::~CMenu()
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
}
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f7ff ffe7 	bl	80036c0 <_ZN5CMenuD1Ev>
 80036f2:	2180      	movs	r1, #128	@ 0x80
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f009 f939 	bl	800c96c <_ZdlPvj>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4618      	mov	r0, r3
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <_ZN5CMenu4ShowEv>:

void CMenu::Show()
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
//	int y;
	CRectanguloTft::Show();
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4618      	mov	r0, r3
 8003710:	f7ff fa6e 	bl	8002bf0 <_ZN14CRectanguloTft4ShowEv>
	CMenuItem* tmp=ItemInicial;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003718:	60fb      	str	r3, [r7, #12]
	while(tmp!=NULL)
 800371a:	e012      	b.n	8003742 <_ZN5CMenu4ShowEv+0x3e>
	{
//		y=tmp->DamePosicionY()+tmp->DameAltura();
		//Si cabe en altura, lo muestro
		if(SePuedeMostrar(tmp)==false)
 800371c:	68f9      	ldr	r1, [r7, #12]
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f8c4 	bl	80038ac <_ZN5CMenu14SePuedeMostrarEP9CMenuItem>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	bf0c      	ite	eq
 800372a:	2301      	moveq	r3, #1
 800372c:	2300      	movne	r3, #0
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10a      	bne.n	800374a <_ZN5CMenu4ShowEv+0x46>
		{
			return;
		}
		tmp->Show();
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f000 fa94 	bl	8003c62 <_ZN9CMenuItem4ShowEv>
		tmp=tmp->DameSiguiente();
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 fb20 	bl	8003d80 <_ZN9CMenuItem13DameSiguienteEv>
 8003740:	60f8      	str	r0, [r7, #12]
	while(tmp!=NULL)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1e9      	bne.n	800371c <_ZN5CMenu4ShowEv+0x18>
 8003748:	e000      	b.n	800374c <_ZN5CMenu4ShowEv+0x48>
			return;
 800374a:	bf00      	nop
	}
}
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <_ZN5CMenu18AsignaColoresItemsEiiii>:

void CMenu::AsignaColoresItems(int colorTexto, int colorFondo, int colorTextoResaltado, int solorFondoResaltado)
{
 8003752:	b480      	push	{r7}
 8003754:	b085      	sub	sp, #20
 8003756:	af00      	add	r7, sp, #0
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	607a      	str	r2, [r7, #4]
 800375e:	603b      	str	r3, [r7, #0]
	ColorTexto=colorTexto;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	63da      	str	r2, [r3, #60]	@ 0x3c
	ColorFondo=colorFondo;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	641a      	str	r2, [r3, #64]	@ 0x40
	ColoTextoSeleccionado=colorTextoResaltado;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	645a      	str	r2, [r3, #68]	@ 0x44
	ColorFondoSeleccionado=solorFondoResaltado;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8003778:	bf00      	nop
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <_ZN5CMenu8CreaItemEPcib>:

CMenuItem* CMenu::CreaItem(char* texto, int identificador,bool seleccionado)
{
 8003784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003786:	b091      	sub	sp, #68	@ 0x44
 8003788:	af08      	add	r7, sp, #32
 800378a:	6178      	str	r0, [r7, #20]
 800378c:	6139      	str	r1, [r7, #16]
 800378e:	60fa      	str	r2, [r7, #12]
 8003790:	72fb      	strb	r3, [r7, #11]
	CEtiquetaTft* etiquetaTmp=new CEtiquetaTft(Xi, Yi, Ancho, AnchoItem, ColorFondo,texto, ColorTexto, 3, 0, ColorFondo);
 8003792:	20a4      	movs	r0, #164	@ 0xa4
 8003794:	f009 f8ec 	bl	800c970 <_Znwj>
 8003798:	4603      	mov	r3, r0
 800379a:	461c      	mov	r4, r3
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	699d      	ldr	r5, [r3, #24]
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	69de      	ldr	r6, [r3, #28]
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	607b      	str	r3, [r7, #4]
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80037b2:	6979      	ldr	r1, [r7, #20]
 80037b4:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 80037b6:	6978      	ldr	r0, [r7, #20]
 80037b8:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 80037ba:	9006      	str	r0, [sp, #24]
 80037bc:	2000      	movs	r0, #0
 80037be:	9005      	str	r0, [sp, #20]
 80037c0:	2003      	movs	r0, #3
 80037c2:	9004      	str	r0, [sp, #16]
 80037c4:	9103      	str	r1, [sp, #12]
 80037c6:	6939      	ldr	r1, [r7, #16]
 80037c8:	9102      	str	r1, [sp, #8]
 80037ca:	9201      	str	r2, [sp, #4]
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4632      	mov	r2, r6
 80037d2:	4629      	mov	r1, r5
 80037d4:	4620      	mov	r0, r4
 80037d6:	f7fe fe73 	bl	80024c0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 80037da:	61fc      	str	r4, [r7, #28]
	CMenuItem* tmp=new CMenuItem(etiquetaTmp,identificador,seleccionado);
 80037dc:	2028      	movs	r0, #40	@ 0x28
 80037de:	f009 f8c7 	bl	800c970 <_Znwj>
 80037e2:	4603      	mov	r3, r0
 80037e4:	461c      	mov	r4, r3
 80037e6:	7afb      	ldrb	r3, [r7, #11]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	69f9      	ldr	r1, [r7, #28]
 80037ec:	4620      	mov	r0, r4
 80037ee:	f000 f9db 	bl	8003ba8 <_ZN9CMenuItemC1EP12CEtiquetaTftib>
 80037f2:	61bc      	str	r4, [r7, #24]
	tmp->AsignaColores(ColorTexto, ColorFondo, ColoTextoSeleccionado, ColorFondoSeleccionado);
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	4603      	mov	r3, r0
 8003808:	69b8      	ldr	r0, [r7, #24]
 800380a:	f000 fa61 	bl	8003cd0 <_ZN9CMenuItem13AsignaColoresEiiii>
	return tmp;
 800380e:	69bb      	ldr	r3, [r7, #24]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3724      	adds	r7, #36	@ 0x24
 8003814:	46bd      	mov	sp, r7
 8003816:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003818 <_ZN5CMenu10AgregaItemEPcib>:

void CMenu::AgregaItem(char* texto, int identificador,bool seleccionado)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
 8003824:	70fb      	strb	r3, [r7, #3]
	CMenuItem* tmp=CreaItem(texto,identificador,seleccionado);
 8003826:	78fb      	ldrb	r3, [r7, #3]
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	68b9      	ldr	r1, [r7, #8]
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f7ff ffa9 	bl	8003784 <_ZN5CMenu8CreaItemEPcib>
 8003832:	6178      	str	r0, [r7, #20]
	if(Opciones==NULL)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003838:	2b00      	cmp	r3, #0
 800383a:	d111      	bne.n	8003860 <_ZN5CMenu10AgregaItemEPcib+0x48>
	{
		Opciones=tmp;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	631a      	str	r2, [r3, #48]	@ 0x30
		Opciones->Selecciona(true);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003846:	2101      	movs	r1, #1
 8003848:	4618      	mov	r0, r3
 800384a:	f000 fa5a 	bl	8003d02 <_ZN9CMenuItem10SeleccionaEb>
		Seleccionado=Opciones;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	639a      	str	r2, [r3, #56]	@ 0x38
		ItemInicial=Opciones;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	635a      	str	r2, [r3, #52]	@ 0x34
		return;
 800385e:	e00e      	b.n	800387e <_ZN5CMenu10AgregaItemEPcib+0x66>
	}
	Opciones->AgregaAlFinal(tmp);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003864:	6979      	ldr	r1, [r7, #20]
 8003866:	4618      	mov	r0, r3
 8003868:	f000 f9e2 	bl	8003c30 <_ZN9CMenuItem13AgregaAlFinalEPS_>
	CalaculaPosicionItems(Opciones);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003870:	4619      	mov	r1, r3
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f000 f806 	bl	8003884 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem>
	CalculaPaginas();
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 f911 	bl	8003aa0 <_ZN5CMenu14CalculaPaginasEv>
}
 800387e:	3718      	adds	r7, #24
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem>:

void CMenu::CalaculaPosicionItems(CMenuItem* raiz)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
	if(raiz==NULL)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d007      	beq.n	80038a4 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem+0x20>
		return;
	raiz->CalculaPosicionY(Yi+5);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	3305      	adds	r3, #5
 800389a:	4619      	mov	r1, r3
 800389c:	6838      	ldr	r0, [r7, #0]
 800389e:	f000 fa40 	bl	8003d22 <_ZN9CMenuItem16CalculaPosicionYEi>
 80038a2:	e000      	b.n	80038a6 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem+0x22>
		return;
 80038a4:	bf00      	nop
}
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <_ZN5CMenu14SePuedeMostrarEP9CMenuItem>:
bool CMenu::SePuedeMostrar(CMenuItem *item)
{
 80038ac:	b590      	push	{r4, r7, lr}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
	int y=item->DamePosicionY()+item->DameAltura();
 80038b6:	6838      	ldr	r0, [r7, #0]
 80038b8:	f000 fa6e 	bl	8003d98 <_ZN9CMenuItem13DamePosicionYEv>
 80038bc:	4604      	mov	r4, r0
 80038be:	6838      	ldr	r0, [r7, #0]
 80038c0:	f000 fa78 	bl	8003db4 <_ZN9CMenuItem10DameAlturaEv>
 80038c4:	4603      	mov	r3, r0
 80038c6:	4423      	add	r3, r4
 80038c8:	60fb      	str	r3, [r7, #12]
	//Si cabe en altura, lo muestro
	if(y> Yi+Alto)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69da      	ldr	r2, [r3, #28]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d2:	4413      	add	r3, r2
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	dd01      	ble.n	80038de <_ZN5CMenu14SePuedeMostrarEP9CMenuItem+0x32>
		return false;
 80038da:	2300      	movs	r3, #0
 80038dc:	e000      	b.n	80038e0 <_ZN5CMenu14SePuedeMostrarEP9CMenuItem+0x34>
	return true;
 80038de:	2301      	movs	r3, #1
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd90      	pop	{r4, r7, pc}

080038e8 <_ZN5CMenu21OnSeleccionaSiguienteEv>:
void CMenu::OnSeleccionaSiguiente()
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
	if(Opciones==NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d03f      	beq.n	8003978 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x90>
		return;
	CMenuItem* tmp=Seleccionado;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038fc:	60fb      	str	r3, [r7, #12]
	CMenuItem* siguiente;
	//me muevo hasta encontrar el que esta seleccionado
	while(tmp!=NULL)
 80038fe:	e037      	b.n	8003970 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x88>
	{
		if(tmp->EstaSeleccionado())
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f000 fa65 	bl	8003dd0 <_ZN9CMenuItem16EstaSeleccionadoEv>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d02d      	beq.n	8003968 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x80>
		{
			siguiente=tmp->DameSiguiente();
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f000 fa37 	bl	8003d80 <_ZN9CMenuItem13DameSiguienteEv>
 8003912:	60b8      	str	r0, [r7, #8]
			if(siguiente==NULL)
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d030      	beq.n	800397c <_ZN5CMenu21OnSeleccionaSiguienteEv+0x94>
				return;
			tmp->Selecciona(false);
 800391a:	2100      	movs	r1, #0
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 f9f0 	bl	8003d02 <_ZN9CMenuItem10SeleccionaEb>
			siguiente->Selecciona(true);
 8003922:	2101      	movs	r1, #1
 8003924:	68b8      	ldr	r0, [r7, #8]
 8003926:	f000 f9ec 	bl	8003d02 <_ZN9CMenuItem10SeleccionaEb>
			Seleccionado=siguiente;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	639a      	str	r2, [r3, #56]	@ 0x38
			if(SePuedeMostrar(siguiente))
 8003930:	68b9      	ldr	r1, [r7, #8]
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7ff ffba 	bl	80038ac <_ZN5CMenu14SePuedeMostrarEP9CMenuItem>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d006      	beq.n	800394c <_ZN5CMenu21OnSeleccionaSiguienteEv+0x64>
			{
				tmp->Show();
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 f98f 	bl	8003c62 <_ZN9CMenuItem4ShowEv>
				siguiente->Show();
 8003944:	68b8      	ldr	r0, [r7, #8]
 8003946:	f000 f98c 	bl	8003c62 <_ZN9CMenuItem4ShowEv>
				return;
 800394a:	e018      	b.n	800397e <_ZN5CMenu21OnSeleccionaSiguienteEv+0x96>
			}
			else
			{
				//hago una paginacion hacia abajo
				CalaculaPosicionItems(siguiente);
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff ff98 	bl	8003884 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem>
				ItemInicial=siguiente;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	635a      	str	r2, [r3, #52]	@ 0x34
				Show();
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	334c      	adds	r3, #76	@ 0x4c
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	4798      	blx	r3
				return;
 8003966:	e00a      	b.n	800397e <_ZN5CMenu21OnSeleccionaSiguienteEv+0x96>
			}
		}
		tmp=tmp->DameSiguiente();
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 fa09 	bl	8003d80 <_ZN9CMenuItem13DameSiguienteEv>
 800396e:	60f8      	str	r0, [r7, #12]
	while(tmp!=NULL)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1c4      	bne.n	8003900 <_ZN5CMenu21OnSeleccionaSiguienteEv+0x18>
 8003976:	e002      	b.n	800397e <_ZN5CMenu21OnSeleccionaSiguienteEv+0x96>
		return;
 8003978:	bf00      	nop
 800397a:	e000      	b.n	800397e <_ZN5CMenu21OnSeleccionaSiguienteEv+0x96>
				return;
 800397c:	bf00      	nop
	}

}
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <_ZN5CMenu20OnSeleccionaAnteriorEv>:
void CMenu::OnSeleccionaAnterior()
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
	if(Opciones==NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003990:	2b00      	cmp	r3, #0
 8003992:	d05c      	beq.n	8003a4e <_ZN5CMenu20OnSeleccionaAnteriorEv+0xca>
		return;
	CMenuItem* tmp=Seleccionado;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003998:	617b      	str	r3, [r7, #20]
	CMenuItem* anterior;
	while(tmp!=NULL)
 800399a:	e054      	b.n	8003a46 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xc2>
	{
		if(tmp->EstaSeleccionado())
 800399c:	6978      	ldr	r0, [r7, #20]
 800399e:	f000 fa17 	bl	8003dd0 <_ZN9CMenuItem16EstaSeleccionadoEv>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d04a      	beq.n	8003a3e <_ZN5CMenu20OnSeleccionaAnteriorEv+0xba>
		{
			anterior=tmp->DameAnterior();
 80039a8:	6978      	ldr	r0, [r7, #20]
 80039aa:	f000 fa1e 	bl	8003dea <_ZN9CMenuItem12DameAnteriorEv>
 80039ae:	60f8      	str	r0, [r7, #12]
			if(anterior==NULL)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d04d      	beq.n	8003a52 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xce>
				return;
			tmp->Selecciona(false);
 80039b6:	2100      	movs	r1, #0
 80039b8:	6978      	ldr	r0, [r7, #20]
 80039ba:	f000 f9a2 	bl	8003d02 <_ZN9CMenuItem10SeleccionaEb>
			anterior->Selecciona(true);
 80039be:	2101      	movs	r1, #1
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 f99e 	bl	8003d02 <_ZN9CMenuItem10SeleccionaEb>
			Seleccionado=anterior;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	639a      	str	r2, [r3, #56]	@ 0x38
			if(EstaInicioPagina(tmp)==false)
 80039cc:	6979      	ldr	r1, [r7, #20]
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f8bb 	bl	8003b4a <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	bf0c      	ite	eq
 80039da:	2301      	moveq	r3, #1
 80039dc:	2300      	movne	r3, #0
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d006      	beq.n	80039f2 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x6e>
			{
				tmp->Show();
 80039e4:	6978      	ldr	r0, [r7, #20]
 80039e6:	f000 f93c 	bl	8003c62 <_ZN9CMenuItem4ShowEv>
				anterior->Show();
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 f939 	bl	8003c62 <_ZN9CMenuItem4ShowEv>
				return;
 80039f0:	e030      	b.n	8003a54 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xd0>
			}
			else
			{
				//hago una paginacion hacia arriba
				//regreso ItemsXPagina para calcular la pagina
				int itemsContados=ItemsXPagina;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039f6:	613b      	str	r3, [r7, #16]
				while(tmp!=NULL && itemsContados>0)
 80039f8:	e00b      	b.n	8003a12 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x8e>
				{
					anterior=tmp->DameAnterior();
 80039fa:	6978      	ldr	r0, [r7, #20]
 80039fc:	f000 f9f5 	bl	8003dea <_ZN9CMenuItem12DameAnteriorEv>
 8003a00:	60f8      	str	r0, [r7, #12]
					itemsContados--;
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	3b01      	subs	r3, #1
 8003a06:	613b      	str	r3, [r7, #16]
					if(anterior==NULL)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d008      	beq.n	8003a20 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x9c>
						break;
					tmp=anterior;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	617b      	str	r3, [r7, #20]
				while(tmp!=NULL && itemsContados>0)
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d004      	beq.n	8003a22 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x9e>
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	dced      	bgt.n	80039fa <_ZN5CMenu20OnSeleccionaAnteriorEv+0x76>
 8003a1e:	e000      	b.n	8003a22 <_ZN5CMenu20OnSeleccionaAnteriorEv+0x9e>
						break;
 8003a20:	bf00      	nop
				}
				CalaculaPosicionItems(tmp);
 8003a22:	6979      	ldr	r1, [r7, #20]
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff ff2d 	bl	8003884 <_ZN5CMenu21CalaculaPosicionItemsEP9CMenuItem>
				ItemInicial=tmp;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	635a      	str	r2, [r3, #52]	@ 0x34
				Show();
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	334c      	adds	r3, #76	@ 0x4c
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	4798      	blx	r3
				return;
 8003a3c:	e00a      	b.n	8003a54 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xd0>
			}
		}
		tmp=tmp->DameAnterior();
 8003a3e:	6978      	ldr	r0, [r7, #20]
 8003a40:	f000 f9d3 	bl	8003dea <_ZN9CMenuItem12DameAnteriorEv>
 8003a44:	6178      	str	r0, [r7, #20]
	while(tmp!=NULL)
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1a7      	bne.n	800399c <_ZN5CMenu20OnSeleccionaAnteriorEv+0x18>
 8003a4c:	e002      	b.n	8003a54 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xd0>
		return;
 8003a4e:	bf00      	nop
 8003a50:	e000      	b.n	8003a54 <_ZN5CMenu20OnSeleccionaAnteriorEv+0xd0>
				return;
 8003a52:	bf00      	nop
	}

}
 8003a54:	3718      	adds	r7, #24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <_ZN5CMenu19OnClickSeleccionadoEv>:
void CMenu::OnClickSeleccionado()
{
 8003a5a:	b5b0      	push	{r4, r5, r7, lr}
 8003a5c:	b082      	sub	sp, #8
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
	if(Manejador==NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d014      	beq.n	8003a94 <_ZN5CMenu19OnClickSeleccionadoEv+0x3a>
		return;
	if(Seleccionado==NULL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d012      	beq.n	8003a98 <_ZN5CMenu19OnClickSeleccionadoEv+0x3e>
		return;
	Manejador->OnMenuEvent(Seleccionado->DameIdentificador());
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6fdd      	ldr	r5, [r3, #124]	@ 0x7c
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	3308      	adds	r3, #8
 8003a7e:	681c      	ldr	r4, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a84:	4618      	mov	r0, r3
 8003a86:	f000 f9bc 	bl	8003e02 <_ZN9CMenuItem17DameIdentificadorEv>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4628      	mov	r0, r5
 8003a90:	47a0      	blx	r4
 8003a92:	e002      	b.n	8003a9a <_ZN5CMenu19OnClickSeleccionadoEv+0x40>
		return;
 8003a94:	bf00      	nop
 8003a96:	e000      	b.n	8003a9a <_ZN5CMenu19OnClickSeleccionadoEv+0x40>
		return;
 8003a98:	bf00      	nop
}
 8003a9a:	3708      	adds	r7, #8
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bdb0      	pop	{r4, r5, r7, pc}

08003aa0 <_ZN5CMenu14CalculaPaginasEv>:
void CMenu::CalculaPaginas()
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
	LimpiaPaginas();
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f833 	bl	8003b14 <_ZN5CMenu13LimpiaPaginasEv>
	int conteoItems=0;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	617b      	str	r3, [r7, #20]
	int numeroPagina=0;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	613b      	str	r3, [r7, #16]
	Paginas[numeroPagina]=Opciones;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	3314      	adds	r3, #20
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	440b      	add	r3, r1
 8003ac4:	605a      	str	r2, [r3, #4]
	CMenuItem* tmp=Opciones;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aca:	60fb      	str	r3, [r7, #12]
	while(tmp!=NULL)
 8003acc:	e01a      	b.n	8003b04 <_ZN5CMenu14CalculaPaginasEv+0x64>
	{
		if(conteoItems%ItemsXPagina==0)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	fb93 f1f2 	sdiv	r1, r3, r2
 8003ad8:	fb01 f202 	mul.w	r2, r1, r2
 8003adc:	1a9b      	subs	r3, r3, r2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d109      	bne.n	8003af6 <_ZN5CMenu14CalculaPaginasEv+0x56>
		{
			Paginas[numeroPagina]=tmp;
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	3314      	adds	r3, #20
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	605a      	str	r2, [r3, #4]
			numeroPagina++;
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	3301      	adds	r3, #1
 8003af4:	613b      	str	r3, [r7, #16]
		}
		conteoItems++;
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	3301      	adds	r3, #1
 8003afa:	617b      	str	r3, [r7, #20]
		tmp=tmp->DameSiguiente();
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 f93f 	bl	8003d80 <_ZN9CMenuItem13DameSiguienteEv>
 8003b02:	60f8      	str	r0, [r7, #12]
	while(tmp!=NULL)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1e1      	bne.n	8003ace <_ZN5CMenu14CalculaPaginasEv+0x2e>
	}
}
 8003b0a:	bf00      	nop
 8003b0c:	bf00      	nop
 8003b0e:	3718      	adds	r7, #24
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <_ZN5CMenu13LimpiaPaginasEv>:

void CMenu::LimpiaPaginas()
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
	for(int i=0;i<MaximoPaginas;i++)
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	60fb      	str	r3, [r7, #12]
 8003b20:	e009      	b.n	8003b36 <_ZN5CMenu13LimpiaPaginasEv+0x22>
	{
		Paginas[i]=NULL;
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	3314      	adds	r3, #20
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	605a      	str	r2, [r3, #4]
	for(int i=0;i<MaximoPaginas;i++)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	3301      	adds	r3, #1
 8003b34:	60fb      	str	r3, [r7, #12]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2b09      	cmp	r3, #9
 8003b3a:	ddf2      	ble.n	8003b22 <_ZN5CMenu13LimpiaPaginasEv+0xe>
	}
}
 8003b3c:	bf00      	nop
 8003b3e:	bf00      	nop
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem>:

bool CMenu::EstaInicioPagina(CMenuItem* item)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b085      	sub	sp, #20
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
 8003b52:	6039      	str	r1, [r7, #0]
	for(int i=0;i<MaximoPaginas;i++)
 8003b54:	2300      	movs	r3, #0
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	e00d      	b.n	8003b76 <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem+0x2c>
	{
		if(Paginas[i]==item)
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	3314      	adds	r3, #20
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d101      	bne.n	8003b70 <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem+0x26>
			return true;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e006      	b.n	8003b7e <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem+0x34>
	for(int i=0;i<MaximoPaginas;i++)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	3301      	adds	r3, #1
 8003b74:	60fb      	str	r3, [r7, #12]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2b09      	cmp	r3, #9
 8003b7a:	ddee      	ble.n	8003b5a <_ZN5CMenu16EstaInicioPaginaEP9CMenuItem+0x10>
	}
	return false;
 8003b7c:	2300      	movs	r3, #0

}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <_ZN5CMenu26AsignaManejadorEventosMenuEP20CManejadorEventoMenu>:
void CMenu::AsignaManejadorEventosMenu(CManejadorEventoMenu *manejador)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
 8003b92:	6039      	str	r1, [r7, #0]
	Manejador=manejador;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
	...

08003ba8 <_ZN9CMenuItemC1EP12CEtiquetaTftib>:
 *      Author: W10
 */

#include <GUI/Menu/CMenuItem.hpp>

CMenuItem::CMenuItem(CEtiquetaTft* etiqueta,int identificador,bool seleccionado)
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
 8003bb4:	70fb      	strb	r3, [r7, #3]
 8003bb6:	4a0d      	ldr	r2, [pc, #52]	@ (8003bec <_ZN9CMenuItemC1EP12CEtiquetaTftib+0x44>)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub
	Etiqueta=etiqueta;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	605a      	str	r2, [r3, #4]
	Siguiente=NULL;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	609a      	str	r2, [r3, #8]
	Anterior=NULL;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	60da      	str	r2, [r3, #12]
	Identificador=identificador;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	611a      	str	r2, [r3, #16]
	Seleccionado=seleccionado;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	78fa      	ldrb	r2, [r7, #3]
 8003bd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4618      	mov	r0, r3
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	0800fcb8 	.word	0x0800fcb8

08003bf0 <_ZN9CMenuItemD1Ev>:

CMenuItem::~CMenuItem()
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	4a04      	ldr	r2, [pc, #16]	@ (8003c0c <_ZN9CMenuItemD1Ev+0x1c>)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4618      	mov	r0, r3
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	0800fcb8 	.word	0x0800fcb8

08003c10 <_ZN9CMenuItemD0Ev>:
CMenuItem::~CMenuItem()
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
}
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f7ff ffe9 	bl	8003bf0 <_ZN9CMenuItemD1Ev>
 8003c1e:	2128      	movs	r1, #40	@ 0x28
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f008 fea3 	bl	800c96c <_ZdlPvj>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <_ZN9CMenuItem13AgregaAlFinalEPS_>:

void CMenuItem::AgregaAlFinal(CMenuItem* siguiente)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
	if(Siguiente==NULL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d106      	bne.n	8003c50 <_ZN9CMenuItem13AgregaAlFinalEPS_+0x20>
	{
		Siguiente=siguiente;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	609a      	str	r2, [r3, #8]
		siguiente->Anterior=this;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	60da      	str	r2, [r3, #12]
		return;
 8003c4e:	e005      	b.n	8003c5c <_ZN9CMenuItem13AgregaAlFinalEPS_+0x2c>
	}
	Siguiente->AgregaAlFinal(siguiente);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	6839      	ldr	r1, [r7, #0]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7ff ffea 	bl	8003c30 <_ZN9CMenuItem13AgregaAlFinalEPS_>
}
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <_ZN9CMenuItem4ShowEv>:

void CMenuItem::Show()
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b082      	sub	sp, #8
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
	if(Seleccionado)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d010      	beq.n	8003c96 <_ZN9CMenuItem4ShowEv+0x34>
	{
		Etiqueta->SetColorTexto(ColoTextoSeleccionado);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	69db      	ldr	r3, [r3, #28]
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4610      	mov	r0, r2
 8003c80:	f7fe fda2 	bl	80027c8 <_ZN12CEtiquetaTft13SetColorTextoEi>
		Etiqueta->SetBackColor(ColorFondoSeleccionado);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4610      	mov	r0, r2
 8003c90:	f7fe fde6 	bl	8002860 <_ZN12CEtiquetaTft12SetBackColorEi>
 8003c94:	e00f      	b.n	8003cb6 <_ZN9CMenuItem4ShowEv+0x54>
	}
	else
	{
		Etiqueta->SetColorTexto(ColorTexto);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	f7fe fd91 	bl	80027c8 <_ZN12CEtiquetaTft13SetColorTextoEi>
		Etiqueta->SetBackColor(ColorFondo);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	4619      	mov	r1, r3
 8003cb0:	4610      	mov	r0, r2
 8003cb2:	f7fe fdd5 	bl	8002860 <_ZN12CEtiquetaTft12SetBackColorEi>
	}
	Etiqueta->Show();
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	334c      	adds	r3, #76	@ 0x4c
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	4798      	blx	r3
}
 8003cc8:	bf00      	nop
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <_ZN9CMenuItem13AsignaColoresEiiii>:
void CMenuItem::AsignaColores(int colorTexto, int colorFondo, int colorTextoResaltado, int solorFondoResaltado)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
 8003cdc:	603b      	str	r3, [r7, #0]
	ColorTexto=colorTexto;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	615a      	str	r2, [r3, #20]
	ColorFondo=colorFondo;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	619a      	str	r2, [r3, #24]
	ColoTextoSeleccionado=colorTextoResaltado;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	61da      	str	r2, [r3, #28]
	ColorFondoSeleccionado=solorFondoResaltado;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	621a      	str	r2, [r3, #32]
}
 8003cf6:	bf00      	nop
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <_ZN9CMenuItem10SeleccionaEb>:
void CMenuItem::Selecciona(bool valor)
{
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	70fb      	strb	r3, [r7, #3]
	Seleccionado=valor;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	78fa      	ldrb	r2, [r7, #3]
 8003d12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <_ZN9CMenuItem16CalculaPosicionYEi>:

void CMenuItem::CalculaPosicionY(int posicion)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b084      	sub	sp, #16
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
 8003d2a:	6039      	str	r1, [r7, #0]
	int x=Etiqueta->DamePosicionX();
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fe ffcd 	bl	8002cd0 <_ZN14CRectanguloTft13DamePosicionXEv>
 8003d36:	60f8      	str	r0, [r7, #12]
	Etiqueta->CambiaPosicion(x, posicion);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	3350      	adds	r3, #80	@ 0x50
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	68f9      	ldr	r1, [r7, #12]
 8003d4c:	4798      	blx	r3
	if(Siguiente==NULL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d010      	beq.n	8003d78 <_ZN9CMenuItem16CalculaPosicionYEi+0x56>
		return;
	int y=Etiqueta->DameAlto()+posicion+5;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fe ffd0 	bl	8002d00 <_ZN14CRectanguloTft8DameAltoEv>
 8003d60:	4602      	mov	r2, r0
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	4413      	add	r3, r2
 8003d66:	3305      	adds	r3, #5
 8003d68:	60bb      	str	r3, [r7, #8]
	Siguiente->CalculaPosicionY(y);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	68b9      	ldr	r1, [r7, #8]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff ffd6 	bl	8003d22 <_ZN9CMenuItem16CalculaPosicionYEi>
 8003d76:	e000      	b.n	8003d7a <_ZN9CMenuItem16CalculaPosicionYEi+0x58>
		return;
 8003d78:	bf00      	nop
}
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <_ZN9CMenuItem13DameSiguienteEv>:
CMenuItem* CMenuItem::DameSiguiente()
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
	return Siguiente;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <_ZN9CMenuItem13DamePosicionYEv>:
int CMenuItem::DamePosicionY()
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
	return Etiqueta->DamePosicionY();
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7fe ff9f 	bl	8002ce8 <_ZN14CRectanguloTft13DamePosicionYEv>
 8003daa:	4603      	mov	r3, r0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3708      	adds	r7, #8
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <_ZN9CMenuItem10DameAlturaEv>:
int CMenuItem::DameAltura()
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
	return Etiqueta->DameAlto();
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fe ff9d 	bl	8002d00 <_ZN14CRectanguloTft8DameAltoEv>
 8003dc6:	4603      	mov	r3, r0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <_ZN9CMenuItem16EstaSeleccionadoEv>:
bool CMenuItem::EstaSeleccionado()
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
	return Seleccionado;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <_ZN9CMenuItem12DameAnteriorEv>:
CMenuItem* CMenuItem::DameAnterior()
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
	return Anterior;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68db      	ldr	r3, [r3, #12]
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <_ZN9CMenuItem17DameIdentificadorEv>:
void CMenuItem::AsignaAnterior(CMenuItem* anterior)
{
	Anterior=anterior;
}
int CMenuItem::DameIdentificador()
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
	return Identificador;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	691b      	ldr	r3, [r3, #16]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
	...

08003e1c <_ZN20CPantallaCalibracionC1Ev>:
#include <GUI/ManejadorPantallas/CManejadorPantallas.hpp>
#include "stm32f4xx_hal_conf.h"

extern I2C_HandleTypeDef hi2c1;

CPantallaCalibracion::CPantallaCalibracion():
 8003e1c:	b590      	push	{r4, r7, lr}
 8003e1e:	b08b      	sub	sp, #44	@ 0x2c
 8003e20:	af08      	add	r7, sp, #32
 8003e22:	6078      	str	r0, [r7, #4]
CPantallaBase(1, (char*)"   Modo: Calibrar")
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a9d      	ldr	r2, [pc, #628]	@ (800409c <_ZN20CPantallaCalibracionC1Ev+0x280>)
 8003e28:	2101      	movs	r1, #1
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fe fd7a 	bl	8002924 <_ZN13CPantallaBaseC1EiPc>
 8003e30:	4a9b      	ldr	r2, [pc, #620]	@ (80040a0 <_ZN20CPantallaCalibracionC1Ev+0x284>)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	4a9b      	ldr	r2, [pc, #620]	@ (80040a4 <_ZN20CPantallaCalibracionC1Ev+0x288>)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
{
	TemperaturaODiferencia=true;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
	Diferencia=0;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	Temperatura=0;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	DiferenciaAnterior=0;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	// TODO Auto-generated constructor stub
	LabelTemperatura=new CEtiquetaTft( 5, 40, 50, 20, COLOR::BLACK,(char*)"temp: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8003e64:	20a4      	movs	r0, #164	@ 0xa4
 8003e66:	f008 fd83 	bl	800c970 <_Znwj>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	461c      	mov	r4, r3
 8003e6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e72:	9306      	str	r3, [sp, #24]
 8003e74:	2300      	movs	r3, #0
 8003e76:	9305      	str	r3, [sp, #20]
 8003e78:	2303      	movs	r3, #3
 8003e7a:	9304      	str	r3, [sp, #16]
 8003e7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e80:	9303      	str	r3, [sp, #12]
 8003e82:	4b89      	ldr	r3, [pc, #548]	@ (80040a8 <_ZN20CPantallaCalibracionC1Ev+0x28c>)
 8003e84:	9302      	str	r3, [sp, #8]
 8003e86:	2300      	movs	r3, #0
 8003e88:	9301      	str	r3, [sp, #4]
 8003e8a:	2314      	movs	r3, #20
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	2332      	movs	r3, #50	@ 0x32
 8003e90:	2228      	movs	r2, #40	@ 0x28
 8003e92:	2105      	movs	r1, #5
 8003e94:	4620      	mov	r0, r4
 8003e96:	f7fe fb13 	bl	80024c0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f8c3 40b4 	str.w	r4, [r3, #180]	@ 0xb4
	TextTemperatura = new CEtiquetaTft( 95, 40, 150, 30,COLOR::WHITE, (char*)"000", COLOR::BLACK, 3, 1, COLOR::RED);
 8003ea0:	20a4      	movs	r0, #164	@ 0xa4
 8003ea2:	f008 fd65 	bl	800c970 <_Znwj>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	461c      	mov	r4, r3
 8003eaa:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003eae:	9306      	str	r3, [sp, #24]
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	9305      	str	r3, [sp, #20]
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	9304      	str	r3, [sp, #16]
 8003eb8:	2300      	movs	r3, #0
 8003eba:	9303      	str	r3, [sp, #12]
 8003ebc:	4b7b      	ldr	r3, [pc, #492]	@ (80040ac <_ZN20CPantallaCalibracionC1Ev+0x290>)
 8003ebe:	9302      	str	r3, [sp, #8]
 8003ec0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ec4:	9301      	str	r3, [sp, #4]
 8003ec6:	231e      	movs	r3, #30
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	2396      	movs	r3, #150	@ 0x96
 8003ecc:	2228      	movs	r2, #40	@ 0x28
 8003ece:	215f      	movs	r1, #95	@ 0x5f
 8003ed0:	4620      	mov	r0, r4
 8003ed2:	f7fe faf5 	bl	80024c0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f8c3 40b8 	str.w	r4, [r3, #184]	@ 0xb8

	LabelDiferencia=new CEtiquetaTft( 5, 80, 50, 20, COLOR::BLACK,(char*)"Dif: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8003edc:	20a4      	movs	r0, #164	@ 0xa4
 8003ede:	f008 fd47 	bl	800c970 <_Znwj>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	461c      	mov	r4, r3
 8003ee6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003eea:	9306      	str	r3, [sp, #24]
 8003eec:	2300      	movs	r3, #0
 8003eee:	9305      	str	r3, [sp, #20]
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	9304      	str	r3, [sp, #16]
 8003ef4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ef8:	9303      	str	r3, [sp, #12]
 8003efa:	4b6d      	ldr	r3, [pc, #436]	@ (80040b0 <_ZN20CPantallaCalibracionC1Ev+0x294>)
 8003efc:	9302      	str	r3, [sp, #8]
 8003efe:	2300      	movs	r3, #0
 8003f00:	9301      	str	r3, [sp, #4]
 8003f02:	2314      	movs	r3, #20
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	2332      	movs	r3, #50	@ 0x32
 8003f08:	2250      	movs	r2, #80	@ 0x50
 8003f0a:	2105      	movs	r1, #5
 8003f0c:	4620      	mov	r0, r4
 8003f0e:	f7fe fad7 	bl	80024c0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f8c3 40c0 	str.w	r4, [r3, #192]	@ 0xc0
	TextDiferencia = new CEtiquetaTft( 95, 80, 150, 30,COLOR::GREY, (char*)"000", COLOR::BLACK, 3, 1, COLOR::RED);
 8003f18:	20a4      	movs	r0, #164	@ 0xa4
 8003f1a:	f008 fd29 	bl	800c970 <_Znwj>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	461c      	mov	r4, r3
 8003f22:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003f26:	9306      	str	r3, [sp, #24]
 8003f28:	2301      	movs	r3, #1
 8003f2a:	9305      	str	r3, [sp, #20]
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	9304      	str	r3, [sp, #16]
 8003f30:	2300      	movs	r3, #0
 8003f32:	9303      	str	r3, [sp, #12]
 8003f34:	4b5d      	ldr	r3, [pc, #372]	@ (80040ac <_ZN20CPantallaCalibracionC1Ev+0x290>)
 8003f36:	9302      	str	r3, [sp, #8]
 8003f38:	f64d 63de 	movw	r3, #57054	@ 0xdede
 8003f3c:	9301      	str	r3, [sp, #4]
 8003f3e:	231e      	movs	r3, #30
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	2396      	movs	r3, #150	@ 0x96
 8003f44:	2250      	movs	r2, #80	@ 0x50
 8003f46:	215f      	movs	r1, #95	@ 0x5f
 8003f48:	4620      	mov	r0, r4
 8003f4a:	f7fe fab9 	bl	80024c0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f8c3 40c4 	str.w	r4, [r3, #196]	@ 0xc4
	TextDiferencia->SetSeparacion(5, 5);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003f5a:	2205      	movs	r2, #5
 8003f5c:	2105      	movs	r1, #5
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fe fc1e 	bl	80027a0 <_ZN12CEtiquetaTft13SetSeparacionEii>

	LabelTemperatura2=new CEtiquetaTft( 5, 120, 50, 20, COLOR::BLACK,(char*)"temp: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8003f64:	20a4      	movs	r0, #164	@ 0xa4
 8003f66:	f008 fd03 	bl	800c970 <_Znwj>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	461c      	mov	r4, r3
 8003f6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f72:	9306      	str	r3, [sp, #24]
 8003f74:	2300      	movs	r3, #0
 8003f76:	9305      	str	r3, [sp, #20]
 8003f78:	2303      	movs	r3, #3
 8003f7a:	9304      	str	r3, [sp, #16]
 8003f7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f80:	9303      	str	r3, [sp, #12]
 8003f82:	4b49      	ldr	r3, [pc, #292]	@ (80040a8 <_ZN20CPantallaCalibracionC1Ev+0x28c>)
 8003f84:	9302      	str	r3, [sp, #8]
 8003f86:	2300      	movs	r3, #0
 8003f88:	9301      	str	r3, [sp, #4]
 8003f8a:	2314      	movs	r3, #20
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	2332      	movs	r3, #50	@ 0x32
 8003f90:	2278      	movs	r2, #120	@ 0x78
 8003f92:	2105      	movs	r1, #5
 8003f94:	4620      	mov	r0, r4
 8003f96:	f7fe fa93 	bl	80024c0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8c3 40c8 	str.w	r4, [r3, #200]	@ 0xc8
	TextTemperatura2 = new CEtiquetaTft( 95, 120, 150, 30,COLOR::GREY, (char*)"000", COLOR::BLACK, 3, 1, COLOR::RED);
 8003fa0:	20a4      	movs	r0, #164	@ 0xa4
 8003fa2:	f008 fce5 	bl	800c970 <_Znwj>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	461c      	mov	r4, r3
 8003faa:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003fae:	9306      	str	r3, [sp, #24]
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	9305      	str	r3, [sp, #20]
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	9304      	str	r3, [sp, #16]
 8003fb8:	2300      	movs	r3, #0
 8003fba:	9303      	str	r3, [sp, #12]
 8003fbc:	4b3b      	ldr	r3, [pc, #236]	@ (80040ac <_ZN20CPantallaCalibracionC1Ev+0x290>)
 8003fbe:	9302      	str	r3, [sp, #8]
 8003fc0:	f64d 63de 	movw	r3, #57054	@ 0xdede
 8003fc4:	9301      	str	r3, [sp, #4]
 8003fc6:	231e      	movs	r3, #30
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	2396      	movs	r3, #150	@ 0x96
 8003fcc:	2278      	movs	r2, #120	@ 0x78
 8003fce:	215f      	movs	r1, #95	@ 0x5f
 8003fd0:	4620      	mov	r0, r4
 8003fd2:	f7fe fa75 	bl	80024c0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f8c3 40cc 	str.w	r4, [r3, #204]	@ 0xcc

	LabelAire = new CEtiquetaTft( 5, 160, 200, 30, COLOR::BLACK,(char*) "Aire: 00",COLOR::WHITE, 3, 0, COLOR::RED);
 8003fdc:	20a4      	movs	r0, #164	@ 0xa4
 8003fde:	f008 fcc7 	bl	800c970 <_Znwj>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	461c      	mov	r4, r3
 8003fe6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003fea:	9306      	str	r3, [sp, #24]
 8003fec:	2300      	movs	r3, #0
 8003fee:	9305      	str	r3, [sp, #20]
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	9304      	str	r3, [sp, #16]
 8003ff4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ff8:	9303      	str	r3, [sp, #12]
 8003ffa:	4b2e      	ldr	r3, [pc, #184]	@ (80040b4 <_ZN20CPantallaCalibracionC1Ev+0x298>)
 8003ffc:	9302      	str	r3, [sp, #8]
 8003ffe:	2300      	movs	r3, #0
 8004000:	9301      	str	r3, [sp, #4]
 8004002:	231e      	movs	r3, #30
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	23c8      	movs	r3, #200	@ 0xc8
 8004008:	22a0      	movs	r2, #160	@ 0xa0
 800400a:	2105      	movs	r1, #5
 800400c:	4620      	mov	r0, r4
 800400e:	f7fe fa57 	bl	80024c0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f8c3 40bc 	str.w	r4, [r3, #188]	@ 0xbc

	LabelGuardar=new CEtiquetaTft( 10, 200, 130, 30, COLOR::GREEN,(char*)"GUARDAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 8004018:	20a4      	movs	r0, #164	@ 0xa4
 800401a:	f008 fca9 	bl	800c970 <_Znwj>
 800401e:	4603      	mov	r3, r0
 8004020:	461c      	mov	r4, r3
 8004022:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004026:	9306      	str	r3, [sp, #24]
 8004028:	2301      	movs	r3, #1
 800402a:	9305      	str	r3, [sp, #20]
 800402c:	2303      	movs	r3, #3
 800402e:	9304      	str	r3, [sp, #16]
 8004030:	2300      	movs	r3, #0
 8004032:	9303      	str	r3, [sp, #12]
 8004034:	4b20      	ldr	r3, [pc, #128]	@ (80040b8 <_ZN20CPantallaCalibracionC1Ev+0x29c>)
 8004036:	9302      	str	r3, [sp, #8]
 8004038:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800403c:	9301      	str	r3, [sp, #4]
 800403e:	231e      	movs	r3, #30
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	2382      	movs	r3, #130	@ 0x82
 8004044:	22c8      	movs	r2, #200	@ 0xc8
 8004046:	210a      	movs	r1, #10
 8004048:	4620      	mov	r0, r4
 800404a:	f7fe fa39 	bl	80024c0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f8c3 40ac 	str.w	r4, [r3, #172]	@ 0xac
	LabelCancelar=new CEtiquetaTft( 160, 200, 145, 30, COLOR::RED,(char*)"CANCELAR", COLOR::BLACK, 3, 1, COLOR::WHITE);
 8004054:	20a4      	movs	r0, #164	@ 0xa4
 8004056:	f008 fc8b 	bl	800c970 <_Znwj>
 800405a:	4603      	mov	r3, r0
 800405c:	461c      	mov	r4, r3
 800405e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004062:	9306      	str	r3, [sp, #24]
 8004064:	2301      	movs	r3, #1
 8004066:	9305      	str	r3, [sp, #20]
 8004068:	2303      	movs	r3, #3
 800406a:	9304      	str	r3, [sp, #16]
 800406c:	2300      	movs	r3, #0
 800406e:	9303      	str	r3, [sp, #12]
 8004070:	4b12      	ldr	r3, [pc, #72]	@ (80040bc <_ZN20CPantallaCalibracionC1Ev+0x2a0>)
 8004072:	9302      	str	r3, [sp, #8]
 8004074:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004078:	9301      	str	r3, [sp, #4]
 800407a:	231e      	movs	r3, #30
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	2391      	movs	r3, #145	@ 0x91
 8004080:	22c8      	movs	r2, #200	@ 0xc8
 8004082:	21a0      	movs	r1, #160	@ 0xa0
 8004084:	4620      	mov	r0, r4
 8004086:	f7fe fa1b 	bl	80024c0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8c3 40b0 	str.w	r4, [r3, #176]	@ 0xb0
}
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4618      	mov	r0, r3
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	bd90      	pop	{r4, r7, pc}
 800409a:	bf00      	nop
 800409c:	0800f6f8 	.word	0x0800f6f8
 80040a0:	0800fcc8 	.word	0x0800fcc8
 80040a4:	0800fd58 	.word	0x0800fd58
 80040a8:	0800f70c 	.word	0x0800f70c
 80040ac:	0800f714 	.word	0x0800f714
 80040b0:	0800f718 	.word	0x0800f718
 80040b4:	0800f720 	.word	0x0800f720
 80040b8:	0800f72c 	.word	0x0800f72c
 80040bc:	0800f734 	.word	0x0800f734

080040c0 <_ZN20CPantallaCalibracionD1Ev>:

CPantallaCalibracion::~CPantallaCalibracion()
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	4a07      	ldr	r2, [pc, #28]	@ (80040e8 <_ZN20CPantallaCalibracionD1Ev+0x28>)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	4a07      	ldr	r2, [pc, #28]	@ (80040ec <_ZN20CPantallaCalibracionD1Ev+0x2c>)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7fe fbf0 	bl	80028bc <_ZN13CPantallaBaseD1Ev>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4618      	mov	r0, r3
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	0800fcc8 	.word	0x0800fcc8
 80040ec:	0800fd58 	.word	0x0800fd58

080040f0 <_ZThn48_N20CPantallaCalibracionD1Ev>:

	void MuestraInformacion();
	void LeeMemoria();
public:
	CPantallaCalibracion();
	virtual ~CPantallaCalibracion();
 80040f0:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80040f4:	f7ff bfe4 	b.w	80040c0 <_ZN20CPantallaCalibracionD1Ev>

080040f8 <_ZN20CPantallaCalibracionD0Ev>:
CPantallaCalibracion::~CPantallaCalibracion()
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
}
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7ff ffdd 	bl	80040c0 <_ZN20CPantallaCalibracionD1Ev>
 8004106:	21ec      	movs	r1, #236	@ 0xec
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f008 fc2f 	bl	800c96c <_ZdlPvj>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4618      	mov	r0, r3
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <_ZThn48_N20CPantallaCalibracionD0Ev>:
 8004118:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800411c:	f7ff bfec 	b.w	80040f8 <_ZN20CPantallaCalibracionD0Ev>

08004120 <_ZN20CPantallaCalibracion4ShowEv>:

 void CPantallaCalibracion::Show()
 {
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
		LeeMemoria();
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 fa59 	bl	80045e0 <_ZN20CPantallaCalibracion10LeeMemoriaEv>
	 	CPantallaBase::Show();
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4618      	mov	r0, r3
 8004132:	f7fe fc69 	bl	8002a08 <_ZN13CPantallaBase4ShowEv>
	 	LabelTemperatura->Show();
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	334c      	adds	r3, #76	@ 0x4c
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4610      	mov	r0, r2
 800414a:	4798      	blx	r3
		LabelGuardar->Show();
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	334c      	adds	r3, #76	@ 0x4c
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4610      	mov	r0, r2
 8004160:	4798      	blx	r3
		LabelCancelar->Show();
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	334c      	adds	r3, #76	@ 0x4c
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4610      	mov	r0, r2
 8004176:	4798      	blx	r3
		LabelAire->Show();
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	334c      	adds	r3, #76	@ 0x4c
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4610      	mov	r0, r2
 800418c:	4798      	blx	r3
		TextTemperatura->Show();
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	334c      	adds	r3, #76	@ 0x4c
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4610      	mov	r0, r2
 80041a2:	4798      	blx	r3
		LabelDiferencia->Show();
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	334c      	adds	r3, #76	@ 0x4c
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4610      	mov	r0, r2
 80041b8:	4798      	blx	r3
		TextDiferencia->Show();
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	334c      	adds	r3, #76	@ 0x4c
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4610      	mov	r0, r2
 80041ce:	4798      	blx	r3
	 	LabelTemperatura2->Show();
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	334c      	adds	r3, #76	@ 0x4c
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4610      	mov	r0, r2
 80041e4:	4798      	blx	r3
		TextTemperatura2->Show();
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	334c      	adds	r3, #76	@ 0x4c
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4610      	mov	r0, r2
 80041fa:	4798      	blx	r3
		MuestraInformacion();
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 f821 	bl	8004244 <_ZN20CPantallaCalibracion18MuestraInformacionEv>
 }
 8004202:	bf00      	nop
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <_ZN20CPantallaCalibracion8RefrescaEv>:
void CPantallaCalibracion::Refresca()
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b082      	sub	sp, #8
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
	MuestraInformacion();
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f816 	bl	8004244 <_ZN20CPantallaCalibracion18MuestraInformacionEv>
}
 8004218:	bf00      	nop
 800421a:	3708      	adds	r7, #8
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <_ZN20CPantallaCalibracion20OnBotonDosClickEventEv>:
void CPantallaCalibracion::OnBotonDosClickEvent()
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
	 ManejadorPantallas.MuestraMenuPrincipal();
 8004228:	4803      	ldr	r0, [pc, #12]	@ (8004238 <_ZN20CPantallaCalibracion20OnBotonDosClickEventEv+0x18>)
 800422a:	f7ff f8df 	bl	80033ec <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>

}
 800422e:	bf00      	nop
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	20000240 	.word	0x20000240

0800423c <_ZThn48_N20CPantallaCalibracion20OnBotonDosClickEventEv>:
	virtual void Show();
	virtual void Refresca();
	virtual void OnBotonDosClickEvent();
 800423c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004240:	f7ff bfee 	b.w	8004220 <_ZN20CPantallaCalibracion20OnBotonDosClickEventEv>

08004244 <_ZN20CPantallaCalibracion18MuestraInformacionEv>:
void CPantallaCalibracion::MuestraInformacion()
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
	LeeDatosEstacion();
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	3380      	adds	r3, #128	@ 0x80
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	4798      	blx	r3

	if(TemperaturaAnterior!=Temperatura)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004264:	429a      	cmp	r2, r3
 8004266:	d01a      	beq.n	800429e <_ZN20CPantallaCalibracion18MuestraInformacionEv+0x5a>
	{
		TextTemperatura->SetTexto((char*)"%d", Temperatura);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004274:	461a      	mov	r2, r3
 8004276:	492f      	ldr	r1, [pc, #188]	@ (8004334 <_ZN20CPantallaCalibracion18MuestraInformacionEv+0xf0>)
 8004278:	f7fe f95c 	bl	8002534 <_ZN12CEtiquetaTft8SetTextoEPcz>
		TextTemperatura->Show();
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	334c      	adds	r3, #76	@ 0x4c
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4610      	mov	r0, r2
 8004290:	4798      	blx	r3
		TemperaturaAnterior=Temperatura;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
	}

	if(DiferenciaAnterior!=Diferencia)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d01a      	beq.n	80042e4 <_ZN20CPantallaCalibracion18MuestraInformacionEv+0xa0>
	{
		DiferenciaAnterior=Diferencia;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
		TextDiferencia->SetTexto((char*)"%d",Diferencia);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80042c6:	461a      	mov	r2, r3
 80042c8:	491a      	ldr	r1, [pc, #104]	@ (8004334 <_ZN20CPantallaCalibracion18MuestraInformacionEv+0xf0>)
 80042ca:	f7fe f933 	bl	8002534 <_ZN12CEtiquetaTft8SetTextoEPcz>
		TextDiferencia->Show();
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	334c      	adds	r3, #76	@ 0x4c
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4610      	mov	r0, r2
 80042e2:	4798      	blx	r3
	}

	if( VelocidadAireAnterior!=VelocidadAire)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d01a      	beq.n	800432a <_ZN20CPantallaCalibracion18MuestraInformacionEv+0xe6>
	{
		LabelAire->SetTexto((char*)"Aire: %d", VelocidadAire);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004300:	461a      	mov	r2, r3
 8004302:	490d      	ldr	r1, [pc, #52]	@ (8004338 <_ZN20CPantallaCalibracion18MuestraInformacionEv+0xf4>)
 8004304:	f7fe f916 	bl	8002534 <_ZN12CEtiquetaTft8SetTextoEPcz>
		LabelAire->Show();
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	334c      	adds	r3, #76	@ 0x4c
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4610      	mov	r0, r2
 800431c:	4798      	blx	r3
		VelocidadAireAnterior=VelocidadAire;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
	}
}
 800432a:	bf00      	nop
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	0800f740 	.word	0x0800f740
 8004338:	0800f744 	.word	0x0800f744

0800433c <_ZN20CPantallaCalibracion24OnBotonPerillaClickEventEv>:
void CPantallaCalibracion::OnBotonPerillaClickEvent()
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
	TemperaturaODiferencia=!TemperaturaODiferencia;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 800434a:	f083 0301 	eor.w	r3, r3, #1
 800434e:	b2da      	uxtb	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
	if(TemperaturaODiferencia==true)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 800435c:	2b01      	cmp	r3, #1
 800435e:	d110      	bne.n	8004382 <_ZN20CPantallaCalibracion24OnBotonPerillaClickEventEv+0x46>
	{
		TextTemperatura->SetBackColor(COLOR::WHITE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004366:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800436a:	4618      	mov	r0, r3
 800436c:	f7fe fa78 	bl	8002860 <_ZN12CEtiquetaTft12SetBackColorEi>
		TextDiferencia->SetBackColor(COLOR::GREY);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004376:	f64d 61de 	movw	r1, #57054	@ 0xdede
 800437a:	4618      	mov	r0, r3
 800437c:	f7fe fa70 	bl	8002860 <_ZN12CEtiquetaTft12SetBackColorEi>
 8004380:	e00f      	b.n	80043a2 <_ZN20CPantallaCalibracion24OnBotonPerillaClickEventEv+0x66>
	}
	else
	{
		TextTemperatura->SetBackColor(COLOR::GREY);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004388:	f64d 61de 	movw	r1, #57054	@ 0xdede
 800438c:	4618      	mov	r0, r3
 800438e:	f7fe fa67 	bl	8002860 <_ZN12CEtiquetaTft12SetBackColorEi>
		TextDiferencia->SetBackColor(COLOR::WHITE);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004398:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800439c:	4618      	mov	r0, r3
 800439e:	f7fe fa5f 	bl	8002860 <_ZN12CEtiquetaTft12SetBackColorEi>
	}
	TextTemperatura->Show();
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	334c      	adds	r3, #76	@ 0x4c
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4610      	mov	r0, r2
 80043b6:	4798      	blx	r3
	TextDiferencia->Show();
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	334c      	adds	r3, #76	@ 0x4c
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4610      	mov	r0, r2
 80043cc:	4798      	blx	r3
}
 80043ce:	bf00      	nop
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <_ZThn48_N20CPantallaCalibracion24OnBotonPerillaClickEventEv>:
	virtual void OnPerillaIncremento();
	virtual void OnPerillaDecremento();
	virtual void OnBotonPerillaClickEvent();
 80043d6:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80043da:	f7ff bfaf 	b.w	800433c <_ZN20CPantallaCalibracion24OnBotonPerillaClickEventEv>
	...

080043e0 <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv>:

void CPantallaCalibracion::OnPerillaIncremento()
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
	if(TemperaturaODiferencia==true)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d122      	bne.n	8004438 <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv+0x58>
	{
		if(Temperatura<=500)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80043f8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80043fc:	dc06      	bgt.n	800440c <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv+0x2c>
			Temperatura++;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
		TextTemperatura->SetTexto((char*)"%d",Temperatura);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004418:	461a      	mov	r2, r3
 800441a:	492e      	ldr	r1, [pc, #184]	@ (80044d4 <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv+0xf4>)
 800441c:	f7fe f88a 	bl	8002534 <_ZN12CEtiquetaTft8SetTextoEPcz>
		TextTemperatura->Show();
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	334c      	adds	r3, #76	@ 0x4c
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4610      	mov	r0, r2
 8004434:	4798      	blx	r3
 8004436:	e02f      	b.n	8004498 <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv+0xb8>
	}
	else
	{
		if(Diferencia>=500)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800443e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004442:	da43      	bge.n	80044cc <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv+0xec>
			return;
		Diferencia++;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
		Estacion->SetTemperatura(Temperatura);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	330c      	adds	r3, #12
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	f8d2 20d0 	ldr.w	r2, [r2, #208]	@ 0xd0
 800446a:	4611      	mov	r1, r2
 800446c:	4798      	blx	r3
		TextDiferencia->SetTexto((char*)"%d",Diferencia);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800447a:	461a      	mov	r2, r3
 800447c:	4915      	ldr	r1, [pc, #84]	@ (80044d4 <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv+0xf4>)
 800447e:	f7fe f859 	bl	8002534 <_ZN12CEtiquetaTft8SetTextoEPcz>
		TextDiferencia->Show();
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	334c      	adds	r3, #76	@ 0x4c
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4610      	mov	r0, r2
 8004496:	4798      	blx	r3
	}
	TextTemperatura2->SetTexto((char*)"%d",Temperatura+Diferencia);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80044aa:	4413      	add	r3, r2
 80044ac:	461a      	mov	r2, r3
 80044ae:	4909      	ldr	r1, [pc, #36]	@ (80044d4 <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv+0xf4>)
 80044b0:	f7fe f840 	bl	8002534 <_ZN12CEtiquetaTft8SetTextoEPcz>
	TextTemperatura2->Show();
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	334c      	adds	r3, #76	@ 0x4c
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4610      	mov	r0, r2
 80044c8:	4798      	blx	r3
 80044ca:	e000      	b.n	80044ce <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv+0xee>
			return;
 80044cc:	bf00      	nop
}
 80044ce:	3708      	adds	r7, #8
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	0800f740 	.word	0x0800f740

080044d8 <_ZThn48_N20CPantallaCalibracion19OnPerillaIncrementoEv>:
	virtual void OnPerillaIncremento();
 80044d8:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80044dc:	f7ff bf80 	b.w	80043e0 <_ZN20CPantallaCalibracion19OnPerillaIncrementoEv>

080044e0 <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv>:
void CPantallaCalibracion::OnPerillaDecremento()
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
	if(TemperaturaODiferencia==true)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d12f      	bne.n	8004552 <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv+0x72>
	{
		if(Temperatura<=0)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	dd66      	ble.n	80045ca <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv+0xea>
			return;
		Temperatura--;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004502:	1e5a      	subs	r2, r3, #1
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
		Estacion->SetTemperatura(Temperatura);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	330c      	adds	r3, #12
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	f8d2 20d0 	ldr.w	r2, [r2, #208]	@ 0xd0
 8004522:	4611      	mov	r1, r2
 8004524:	4798      	blx	r3
		TextTemperatura->SetTexto((char*)"%d",Temperatura);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004532:	461a      	mov	r2, r3
 8004534:	4927      	ldr	r1, [pc, #156]	@ (80045d4 <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv+0xf4>)
 8004536:	f7fd fffd 	bl	8002534 <_ZN12CEtiquetaTft8SetTextoEPcz>
		TextTemperatura->Show();
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	334c      	adds	r3, #76	@ 0x4c
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4610      	mov	r0, r2
 800454e:	4798      	blx	r3
 8004550:	e021      	b.n	8004596 <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv+0xb6>
	}
	else
	{
		if(Diferencia>-500)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004558:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 800455c:	dd06      	ble.n	800456c <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv+0x8c>
			Diferencia--;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004564:	1e5a      	subs	r2, r3, #1
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
		TextDiferencia->SetTexto((char*)"%d",Diferencia);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004578:	461a      	mov	r2, r3
 800457a:	4916      	ldr	r1, [pc, #88]	@ (80045d4 <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv+0xf4>)
 800457c:	f7fd ffda 	bl	8002534 <_ZN12CEtiquetaTft8SetTextoEPcz>
		TextDiferencia->Show();
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	334c      	adds	r3, #76	@ 0x4c
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4610      	mov	r0, r2
 8004594:	4798      	blx	r3
	}
	TextTemperatura2->SetTexto((char*)"%d",Temperatura+Diferencia);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80045a8:	4413      	add	r3, r2
 80045aa:	461a      	mov	r2, r3
 80045ac:	4909      	ldr	r1, [pc, #36]	@ (80045d4 <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv+0xf4>)
 80045ae:	f7fd ffc1 	bl	8002534 <_ZN12CEtiquetaTft8SetTextoEPcz>
	TextTemperatura2->Show();
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	334c      	adds	r3, #76	@ 0x4c
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4610      	mov	r0, r2
 80045c6:	4798      	blx	r3
 80045c8:	e000      	b.n	80045cc <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv+0xec>
			return;
 80045ca:	bf00      	nop
}
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	0800f740 	.word	0x0800f740

080045d8 <_ZThn48_N20CPantallaCalibracion19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 80045d8:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80045dc:	f7ff bf80 	b.w	80044e0 <_ZN20CPantallaCalibracion19OnPerillaDecrementoEv>

080045e0 <_ZN20CPantallaCalibracion10LeeMemoriaEv>:

void CPantallaCalibracion::LeeMemoria()
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b088      	sub	sp, #32
 80045e4:	af04      	add	r7, sp, #16
 80045e6:	6078      	str	r0, [r7, #4]
 	uint16_t diferencia;
 	uint16_t temperatura;
 	if( HAL_I2C_Mem_Read(&hi2c1,ADDRESS_EEPROM,DIRMEMORIARPROM::TEMPERATURAMANUAL,I2C_MEMADD_SIZE_8BIT,(uint8_t*)&temperatura,2,HAL_MAX_DELAY)==HAL_OK)
 80045e8:	f04f 33ff 	mov.w	r3, #4294967295
 80045ec:	9302      	str	r3, [sp, #8]
 80045ee:	2302      	movs	r3, #2
 80045f0:	9301      	str	r3, [sp, #4]
 80045f2:	f107 030c 	add.w	r3, r7, #12
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	2301      	movs	r3, #1
 80045fa:	2200      	movs	r2, #0
 80045fc:	21a0      	movs	r1, #160	@ 0xa0
 80045fe:	4821      	ldr	r0, [pc, #132]	@ (8004684 <_ZN20CPantallaCalibracion10LeeMemoriaEv+0xa4>)
 8004600:	f005 f908 	bl	8009814 <HAL_I2C_Mem_Read>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	bf0c      	ite	eq
 800460a:	2301      	moveq	r3, #1
 800460c:	2300      	movne	r3, #0
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2b00      	cmp	r3, #0
 8004612:	d014      	beq.n	800463e <_ZN20CPantallaCalibracion10LeeMemoriaEv+0x5e>
 	{
 	 	if(temperatura>=0 && temperatura<=500)
 8004614:	89bb      	ldrh	r3, [r7, #12]
 8004616:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800461a:	d810      	bhi.n	800463e <_ZN20CPantallaCalibracion10LeeMemoriaEv+0x5e>
 	 	{
 	 		Temperatura=temperatura;
 800461c:	89bb      	ldrh	r3, [r7, #12]
 800461e:	461a      	mov	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 	 		Estacion->SetTemperatura(temperatura);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	330c      	adds	r3, #12
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	89b9      	ldrh	r1, [r7, #12]
 800463a:	4610      	mov	r0, r2
 800463c:	4798      	blx	r3
 	 	}
 	}
 	if( HAL_I2C_Mem_Read(&hi2c1,ADDRESS_EEPROM,DIRMEMORIARPROM::AJUSTETEMPERATURA,I2C_MEMADD_SIZE_8BIT,(uint8_t*)&diferencia,2,HAL_MAX_DELAY)==HAL_OK)
 800463e:	f04f 33ff 	mov.w	r3, #4294967295
 8004642:	9302      	str	r3, [sp, #8]
 8004644:	2302      	movs	r3, #2
 8004646:	9301      	str	r3, [sp, #4]
 8004648:	f107 030e 	add.w	r3, r7, #14
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	2301      	movs	r3, #1
 8004650:	2202      	movs	r2, #2
 8004652:	21a0      	movs	r1, #160	@ 0xa0
 8004654:	480b      	ldr	r0, [pc, #44]	@ (8004684 <_ZN20CPantallaCalibracion10LeeMemoriaEv+0xa4>)
 8004656:	f005 f8dd 	bl	8009814 <HAL_I2C_Mem_Read>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	bf0c      	ite	eq
 8004660:	2301      	moveq	r3, #1
 8004662:	2300      	movne	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d008      	beq.n	800467c <_ZN20CPantallaCalibracion10LeeMemoriaEv+0x9c>
 	{
 	 	if(diferencia>=-500 && diferencia<=500)
 800466a:	89fb      	ldrh	r3, [r7, #14]
 800466c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004670:	d804      	bhi.n	800467c <_ZN20CPantallaCalibracion10LeeMemoriaEv+0x9c>
 	 	{
 	 		Diferencia=diferencia;
 8004672:	89fb      	ldrh	r3, [r7, #14]
 8004674:	461a      	mov	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 	 	}
	}
}
 800467c:	bf00      	nop
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	200002bc 	.word	0x200002bc

08004688 <_ZN20CPantallaCalibracion16LeeDatosEstacionEv>:
void CPantallaCalibracion::LeeDatosEstacion()
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
//	SetTemperatura = Estacion->GetTemperatura();
//	Temperatura = Estacion->GetTemperaturaRealx();
	VelocidadAire = ManejadorControles->GetNivelAire();
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004696:	4618      	mov	r0, r3
 8004698:	f001 ffbb 	bl	8006612 <_ZN19CManejadorControles12GetNivelAireEv>
 800469c:	4602      	mov	r2, r0
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	Estacion->SetNivelAire(VelocidadAire);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	3314      	adds	r3, #20
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	f8d2 20dc 	ldr.w	r2, [r2, #220]	@ 0xdc
 80046bc:	4611      	mov	r1, r2
 80046be:	4798      	blx	r3
//	EstadoBoquilla=Estacion->GetEstado();
}
 80046c0:	bf00      	nop
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <_ZN20CPantallaCalibracion20OnBotonUnoClickEventEv>:
void CPantallaCalibracion::OnBotonUnoClickEvent()
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b088      	sub	sp, #32
 80046cc:	af04      	add	r7, sp, #16
 80046ce:	6078      	str	r0, [r7, #4]
 	uint16_t diferencia=Diferencia;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Mem_Write(&hi2c1,ADDRESS_EEPROM,DIRMEMORIARPROM::AJUSTETEMPERATURA,I2C_MEMADD_SIZE_8BIT,(uint8_t*)&diferencia,2,HAL_MAX_DELAY);
 80046da:	f04f 33ff 	mov.w	r3, #4294967295
 80046de:	9302      	str	r3, [sp, #8]
 80046e0:	2302      	movs	r3, #2
 80046e2:	9301      	str	r3, [sp, #4]
 80046e4:	f107 030e 	add.w	r3, r7, #14
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	2301      	movs	r3, #1
 80046ec:	2202      	movs	r2, #2
 80046ee:	21a0      	movs	r1, #160	@ 0xa0
 80046f0:	4804      	ldr	r0, [pc, #16]	@ (8004704 <_ZN20CPantallaCalibracion20OnBotonUnoClickEventEv+0x3c>)
 80046f2:	f004 ff95 	bl	8009620 <HAL_I2C_Mem_Write>
	 ManejadorPantallas.MuestraMenuPrincipal();
 80046f6:	4804      	ldr	r0, [pc, #16]	@ (8004708 <_ZN20CPantallaCalibracion20OnBotonUnoClickEventEv+0x40>)
 80046f8:	f7fe fe78 	bl	80033ec <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>
}
 80046fc:	bf00      	nop
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	200002bc 	.word	0x200002bc
 8004708:	20000240 	.word	0x20000240

0800470c <_ZThn48_N20CPantallaCalibracion20OnBotonUnoClickEventEv>:
	virtual void LeeDatosEstacion();
	virtual void OnBotonUnoClickEvent();
 800470c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004710:	f7ff bfda 	b.w	80046c8 <_ZN20CPantallaCalibracion20OnBotonUnoClickEventEv>

08004714 <_ZN15CPantallaManualD1Ev>:
#include <Uart/Uart.hpp>
#include "Constantes.hpp"
extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart1;

CPantallaManual::~CPantallaManual()
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	4a07      	ldr	r2, [pc, #28]	@ (800473c <_ZN15CPantallaManualD1Ev+0x28>)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	601a      	str	r2, [r3, #0]
 8004722:	4a07      	ldr	r2, [pc, #28]	@ (8004740 <_ZN15CPantallaManualD1Ev+0x2c>)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4618      	mov	r0, r3
 800472c:	f7fe f8c6 	bl	80028bc <_ZN13CPantallaBaseD1Ev>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4618      	mov	r0, r3
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	0800fd8c 	.word	0x0800fd8c
 8004740:	0800fe34 	.word	0x0800fe34

08004744 <_ZThn48_N15CPantallaManualD1Ev>:
	CEtiquetaTft *LabelEstado;
	int NivelAire = 0;

public:
	CPantallaManual(CEstacionBase *estacion);
	virtual ~CPantallaManual();
 8004744:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004748:	f7ff bfe4 	b.w	8004714 <_ZN15CPantallaManualD1Ev>

0800474c <_ZN15CPantallaManualD0Ev>:
CPantallaManual::~CPantallaManual()
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
}
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f7ff ffdd 	bl	8004714 <_ZN15CPantallaManualD1Ev>
 800475a:	21e8      	movs	r1, #232	@ 0xe8
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f008 f905 	bl	800c96c <_ZdlPvj>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4618      	mov	r0, r3
 8004766:	3708      	adds	r7, #8
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <_ZThn48_N15CPantallaManualD0Ev>:
 800476c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004770:	f7ff bfec 	b.w	800474c <_ZN15CPantallaManualD0Ev>

08004774 <_ZN15CPantallaManualC1Ev>:

CPantallaManual::CPantallaManual() :
 8004774:	b590      	push	{r4, r7, lr}
 8004776:	b08d      	sub	sp, #52	@ 0x34
 8004778:	af08      	add	r7, sp, #32
 800477a:	6078      	str	r0, [r7, #4]
		CPantallaBase(1, (char*)"   Modo: Manual")
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a68      	ldr	r2, [pc, #416]	@ (8004920 <_ZN15CPantallaManualC1Ev+0x1ac>)
 8004780:	2101      	movs	r1, #1
 8004782:	4618      	mov	r0, r3
 8004784:	f7fe f8ce 	bl	8002924 <_ZN13CPantallaBaseC1EiPc>
 8004788:	4a66      	ldr	r2, [pc, #408]	@ (8004924 <_ZN15CPantallaManualC1Ev+0x1b0>)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	4a66      	ldr	r2, [pc, #408]	@ (8004928 <_ZN15CPantallaManualC1Ev+0x1b4>)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	631a      	str	r2, [r3, #48]	@ 0x30
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f04f 32ff 	mov.w	r2, #4294967295
 80047a2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f04f 32ff 	mov.w	r2, #4294967295
 80047ac:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f04f 32ff 	mov.w	r2, #4294967295
 80047b6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f04f 32ff 	mov.w	r2, #4294967295
 80047c8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
{
	LabelTemperatura = new CEtiquetaTft( 5, 35, 50, 20, COLOR::BLACK,(char*)"Temperatura", COLOR::WHITE, 3, 0, COLOR::WHITE);
 80047f4:	20a4      	movs	r0, #164	@ 0xa4
 80047f6:	f008 f8bb 	bl	800c970 <_Znwj>
 80047fa:	4603      	mov	r3, r0
 80047fc:	461c      	mov	r4, r3
 80047fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004802:	9306      	str	r3, [sp, #24]
 8004804:	2300      	movs	r3, #0
 8004806:	9305      	str	r3, [sp, #20]
 8004808:	2303      	movs	r3, #3
 800480a:	9304      	str	r3, [sp, #16]
 800480c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004810:	9303      	str	r3, [sp, #12]
 8004812:	4b46      	ldr	r3, [pc, #280]	@ (800492c <_ZN15CPantallaManualC1Ev+0x1b8>)
 8004814:	9302      	str	r3, [sp, #8]
 8004816:	2300      	movs	r3, #0
 8004818:	9301      	str	r3, [sp, #4]
 800481a:	2314      	movs	r3, #20
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	2332      	movs	r3, #50	@ 0x32
 8004820:	2223      	movs	r2, #35	@ 0x23
 8004822:	2105      	movs	r1, #5
 8004824:	4620      	mov	r0, r4
 8004826:	f7fd fe4b 	bl	80024c0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8c3 40d4 	str.w	r4, [r3, #212]	@ 0xd4
	int centroX = DameCentroX();
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4618      	mov	r0, r3
 8004834:	f7fe fa70 	bl	8002d18 <_ZN14CRectanguloTft11DameCentroXEv>
 8004838:	60f8      	str	r0, [r7, #12]
	LabelTemperaturas = new CEtiquetaTft( centroX - 150 / 2, 65, 150, 30,COLOR::WHITE,(char*) "000/000", COLOR::BLACK, 3, 1, COLOR::RED);
 800483a:	20a4      	movs	r0, #164	@ 0xa4
 800483c:	f008 f898 	bl	800c970 <_Znwj>
 8004840:	4603      	mov	r3, r0
 8004842:	461c      	mov	r4, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f1a3 014b 	sub.w	r1, r3, #75	@ 0x4b
 800484a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800484e:	9306      	str	r3, [sp, #24]
 8004850:	2301      	movs	r3, #1
 8004852:	9305      	str	r3, [sp, #20]
 8004854:	2303      	movs	r3, #3
 8004856:	9304      	str	r3, [sp, #16]
 8004858:	2300      	movs	r3, #0
 800485a:	9303      	str	r3, [sp, #12]
 800485c:	4b34      	ldr	r3, [pc, #208]	@ (8004930 <_ZN15CPantallaManualC1Ev+0x1bc>)
 800485e:	9302      	str	r3, [sp, #8]
 8004860:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004864:	9301      	str	r3, [sp, #4]
 8004866:	231e      	movs	r3, #30
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	2396      	movs	r3, #150	@ 0x96
 800486c:	2241      	movs	r2, #65	@ 0x41
 800486e:	4620      	mov	r0, r4
 8004870:	f7fd fe26 	bl	80024c0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f8c3 40d8 	str.w	r4, [r3, #216]	@ 0xd8
	LabelTemperaturas->SetSeparacion(5, 5);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004880:	2205      	movs	r2, #5
 8004882:	2105      	movs	r1, #5
 8004884:	4618      	mov	r0, r3
 8004886:	f7fd ff8b 	bl	80027a0 <_ZN12CEtiquetaTft13SetSeparacionEii>
	LabelAire = new CEtiquetaTft( 5, 105, 200, 30, COLOR::BLACK, (char*)"Aire: 00",COLOR::WHITE, 3, 0, COLOR::RED);
 800488a:	20a4      	movs	r0, #164	@ 0xa4
 800488c:	f008 f870 	bl	800c970 <_Znwj>
 8004890:	4603      	mov	r3, r0
 8004892:	461c      	mov	r4, r3
 8004894:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004898:	9306      	str	r3, [sp, #24]
 800489a:	2300      	movs	r3, #0
 800489c:	9305      	str	r3, [sp, #20]
 800489e:	2303      	movs	r3, #3
 80048a0:	9304      	str	r3, [sp, #16]
 80048a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80048a6:	9303      	str	r3, [sp, #12]
 80048a8:	4b22      	ldr	r3, [pc, #136]	@ (8004934 <_ZN15CPantallaManualC1Ev+0x1c0>)
 80048aa:	9302      	str	r3, [sp, #8]
 80048ac:	2300      	movs	r3, #0
 80048ae:	9301      	str	r3, [sp, #4]
 80048b0:	231e      	movs	r3, #30
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	23c8      	movs	r3, #200	@ 0xc8
 80048b6:	2269      	movs	r2, #105	@ 0x69
 80048b8:	2105      	movs	r1, #5
 80048ba:	4620      	mov	r0, r4
 80048bc:	f7fd fe00 	bl	80024c0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f8c3 40dc 	str.w	r4, [r3, #220]	@ 0xdc
	LabelEstado = new CEtiquetaTft( 5, 145, 300, 35, COLOR::BLACK,(char*)"Estado: REPOSO", COLOR::WHITE, 3, 0, COLOR::RED);
 80048c6:	20a4      	movs	r0, #164	@ 0xa4
 80048c8:	f008 f852 	bl	800c970 <_Znwj>
 80048cc:	4603      	mov	r3, r0
 80048ce:	461c      	mov	r4, r3
 80048d0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80048d4:	9306      	str	r3, [sp, #24]
 80048d6:	2300      	movs	r3, #0
 80048d8:	9305      	str	r3, [sp, #20]
 80048da:	2303      	movs	r3, #3
 80048dc:	9304      	str	r3, [sp, #16]
 80048de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80048e2:	9303      	str	r3, [sp, #12]
 80048e4:	4b14      	ldr	r3, [pc, #80]	@ (8004938 <_ZN15CPantallaManualC1Ev+0x1c4>)
 80048e6:	9302      	str	r3, [sp, #8]
 80048e8:	2300      	movs	r3, #0
 80048ea:	9301      	str	r3, [sp, #4]
 80048ec:	2323      	movs	r3, #35	@ 0x23
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80048f4:	2291      	movs	r2, #145	@ 0x91
 80048f6:	2105      	movs	r1, #5
 80048f8:	4620      	mov	r0, r4
 80048fa:	f7fd fde1 	bl	80024c0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f8c3 40e0 	str.w	r4, [r3, #224]	@ 0xe0
	LabelEstado->SetSeparacion(15, 5);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800490a:	2205      	movs	r2, #5
 800490c:	210f      	movs	r1, #15
 800490e:	4618      	mov	r0, r3
 8004910:	f7fd ff46 	bl	80027a0 <_ZN12CEtiquetaTft13SetSeparacionEii>
}
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4618      	mov	r0, r3
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	bd90      	pop	{r4, r7, pc}
 800491e:	bf00      	nop
 8004920:	0800f750 	.word	0x0800f750
 8004924:	0800fd8c 	.word	0x0800fd8c
 8004928:	0800fe34 	.word	0x0800fe34
 800492c:	0800f760 	.word	0x0800f760
 8004930:	0800f76c 	.word	0x0800f76c
 8004934:	0800f774 	.word	0x0800f774
 8004938:	0800f780 	.word	0x0800f780

0800493c <_ZN15CPantallaManual13MuestraEstadoEb>:


void CPantallaManual::MuestraEstado(bool forzar)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	460b      	mov	r3, r1
 8004946:	70fb      	strb	r3, [r7, #3]
	if(forzar==false)
 8004948:	78fb      	ldrb	r3, [r7, #3]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d116      	bne.n	800497c <_ZN15CPantallaManual13MuestraEstadoEb+0x40>
	{
		if(EstadoBoquillaAnterior==EstadoBoquilla )
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800495a:	429a      	cmp	r2, r3
 800495c:	d10e      	bne.n	800497c <_ZN15CPantallaManual13MuestraEstadoEb+0x40>
		{
			if(EsVisible()==true)
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3368      	adds	r3, #104	@ 0x68
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4610      	mov	r0, r2
 800496a:	4798      	blx	r3
 800496c:	4603      	mov	r3, r0
 800496e:	2b01      	cmp	r3, #1
 8004970:	bf0c      	ite	eq
 8004972:	2301      	moveq	r3, #1
 8004974:	2300      	movne	r3, #0
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b00      	cmp	r3, #0
 800497a:	d143      	bne.n	8004a04 <_ZN15CPantallaManual13MuestraEstadoEb+0xc8>
			{
				return;
			}
		}
	}
	EstadoBoquillaAnterior=EstadoBoquilla;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	if (EstadoBoquilla == 1)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800498e:	2b01      	cmp	r3, #1
 8004990:	d115      	bne.n	80049be <_ZN15CPantallaManual13MuestraEstadoEb+0x82>
	{
		LabelEstado->SetColorFondo(COLOR::BLUE);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004998:	211f      	movs	r1, #31
 800499a:	4618      	mov	r0, r3
 800499c:	f7fe f98a 	bl	8002cb4 <_ZN14CRectanguloTft13SetColorFondoEi>
		LabelEstado->SetColorTexto(COLOR::BLACK);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049a6:	2100      	movs	r1, #0
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7fd ff0d 	bl	80027c8 <_ZN12CEtiquetaTft13SetColorTextoEi>
		LabelEstado->SetTexto((char*)"Estado: ACTIVO");
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049b4:	4915      	ldr	r1, [pc, #84]	@ (8004a0c <_ZN15CPantallaManual13MuestraEstadoEb+0xd0>)
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7fd fdbc 	bl	8002534 <_ZN12CEtiquetaTft8SetTextoEPcz>
 80049bc:	e016      	b.n	80049ec <_ZN15CPantallaManual13MuestraEstadoEb+0xb0>
	}
	else
	{
		LabelEstado->SetColorFondo(COLOR::RED);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049c4:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7fe f973 	bl	8002cb4 <_ZN14CRectanguloTft13SetColorFondoEi>
		LabelEstado->SetColorTexto(COLOR::WHITE);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049d4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80049d8:	4618      	mov	r0, r3
 80049da:	f7fd fef5 	bl	80027c8 <_ZN12CEtiquetaTft13SetColorTextoEi>
		LabelEstado->SetTexto((char*)"Estado: REPOSO");
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049e4:	490a      	ldr	r1, [pc, #40]	@ (8004a10 <_ZN15CPantallaManual13MuestraEstadoEb+0xd4>)
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7fd fda4 	bl	8002534 <_ZN12CEtiquetaTft8SetTextoEPcz>
	}
	LabelEstado->Show();
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	334c      	adds	r3, #76	@ 0x4c
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4610      	mov	r0, r2
 8004a00:	4798      	blx	r3
 8004a02:	e000      	b.n	8004a06 <_ZN15CPantallaManual13MuestraEstadoEb+0xca>
				return;
 8004a04:	bf00      	nop
}
 8004a06:	3708      	adds	r7, #8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	0800f790 	.word	0x0800f790
 8004a10:	0800f780 	.word	0x0800f780

08004a14 <_ZN15CPantallaManual16LeeDatosEstacionEv>:

void CPantallaManual::LeeDatosEstacion()
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
	SetTemperatura = Estacion->GetTemperatura();
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	3310      	adds	r3, #16
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4610      	mov	r0, r2
 8004a30:	4798      	blx	r3
 8004a32:	4602      	mov	r2, r0
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	Temperatura = Estacion->GetTemperaturaRealx();
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	3308      	adds	r3, #8
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	4798      	blx	r3
 8004a50:	eef0 7a40 	vmov.f32	s15, s0
 8004a54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a58:	ee17 2a90 	vmov	r2, s15
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	NivelAire = ManejadorControles->GetNivelAire();
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f001 fdd2 	bl	8006612 <_ZN19CManejadorControles12GetNivelAireEv>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
	Estacion->SetNivelAire(NivelAire);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	3314      	adds	r3, #20
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	f8d2 20e4 	ldr.w	r2, [r2, #228]	@ 0xe4
 8004a8e:	4611      	mov	r1, r2
 8004a90:	4798      	blx	r3
	EstadoBoquilla=Estacion->GetEstado();
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	331c      	adds	r3, #28
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4610      	mov	r0, r2
 8004aa6:	4798      	blx	r3
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
}
 8004ab0:	bf00      	nop
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <_ZN15CPantallaManual19MuestraTemperaturasEb>:


void CPantallaManual::MuestraTemperaturas(bool forzar)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	70fb      	strb	r3, [r7, #3]
	if(forzar==false)
 8004ac4:	78fb      	ldrb	r3, [r7, #3]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10f      	bne.n	8004aea <_ZN15CPantallaManual19MuestraTemperaturasEb+0x32>
	{
		if(TemperaturaAnterior==Temperatura &&SetTemperaturaAnterior==SetTemperatura)//&& EsVisible()==true )
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d107      	bne.n	8004aea <_ZN15CPantallaManual19MuestraTemperaturasEb+0x32>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d023      	beq.n	8004b32 <_ZN15CPantallaManual19MuestraTemperaturasEb+0x7a>
			return;
	}

	TemperaturaAnterior=Temperatura;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	SetTemperaturaAnterior=SetTemperatura;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	LabelTemperaturas->SetTexto((char*)"%d/%d", Temperatura, SetTemperatura);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f8d3 00d8 	ldr.w	r0, [r3, #216]	@ 0xd8
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004b14:	4909      	ldr	r1, [pc, #36]	@ (8004b3c <_ZN15CPantallaManual19MuestraTemperaturasEb+0x84>)
 8004b16:	f7fd fd0d 	bl	8002534 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelTemperaturas->Show();
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	334c      	adds	r3, #76	@ 0x4c
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4610      	mov	r0, r2
 8004b2e:	4798      	blx	r3
 8004b30:	e000      	b.n	8004b34 <_ZN15CPantallaManual19MuestraTemperaturasEb+0x7c>
			return;
 8004b32:	bf00      	nop
}
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	0800f7a0 	.word	0x0800f7a0

08004b40 <_ZN15CPantallaManual16OnNivelAireEventEi>:

void CPantallaManual::OnNivelAireEvent(int aire)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
	NivelAire = aire;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
	Estacion->SetNivelAire(NivelAire);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3314      	adds	r3, #20
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	f8d2 20e4 	ldr.w	r2, [r2, #228]	@ 0xe4
 8004b6a:	4611      	mov	r1, r2
 8004b6c:	4798      	blx	r3
}
 8004b6e:	bf00      	nop
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <_ZThn48_N15CPantallaManual16OnNivelAireEventEi>:
	CPantallaManual();
	virtual void Show();
	virtual void Refresca();

private:
	void OnNivelAireEvent(int aire);
 8004b76:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004b7a:	f7ff bfe1 	b.w	8004b40 <_ZN15CPantallaManual16OnNivelAireEventEi>
	...

08004b80 <_ZN15CPantallaManual16MuestraNivelAireEb>:

void CPantallaManual::MuestraNivelAire(bool forzar)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	460b      	mov	r3, r1
 8004b8a:	70fb      	strb	r3, [r7, #3]
	if(forzar==false)
 8004b8c:	78fb      	ldrb	r3, [r7, #3]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d116      	bne.n	8004bc0 <_ZN15CPantallaManual16MuestraNivelAireEb+0x40>
	{
		if(NivelAireAnterior==NivelAire && EsVisible()==true )
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d10b      	bne.n	8004bba <_ZN15CPantallaManual16MuestraNivelAireEb+0x3a>
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	3368      	adds	r3, #104	@ 0x68
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4610      	mov	r0, r2
 8004bae:	4798      	blx	r3
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d101      	bne.n	8004bba <_ZN15CPantallaManual16MuestraNivelAireEb+0x3a>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e000      	b.n	8004bbc <_ZN15CPantallaManual16MuestraNivelAireEb+0x3c>
 8004bba:	2300      	movs	r3, #0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d129      	bne.n	8004c14 <_ZN15CPantallaManual16MuestraNivelAireEb+0x94>
			return;
	}
	NivelAireAnterior=NivelAire;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	Estacion->SetNivelAire(NivelAire);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	3314      	adds	r3, #20
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	f8d2 20e4 	ldr.w	r2, [r2, #228]	@ 0xe4
 8004be4:	4611      	mov	r1, r2
 8004be6:	4798      	blx	r3
	LabelAire->SetTexto((char*)"Aire: %d", NivelAire);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	4909      	ldr	r1, [pc, #36]	@ (8004c1c <_ZN15CPantallaManual16MuestraNivelAireEb+0x9c>)
 8004bf8:	f7fd fc9c 	bl	8002534 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelAire->Show();
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	334c      	adds	r3, #76	@ 0x4c
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4610      	mov	r0, r2
 8004c10:	4798      	blx	r3
 8004c12:	e000      	b.n	8004c16 <_ZN15CPantallaManual16MuestraNivelAireEb+0x96>
			return;
 8004c14:	bf00      	nop

}
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	0800f7a8 	.word	0x0800f7a8

08004c20 <_ZN15CPantallaManual22OnTemperaturaRealEventEi>:

void CPantallaManual::OnTemperaturaRealEvent(int temperatura)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
//	Temperatura = temperatura;
}
 8004c2a:	bf00      	nop
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <_ZThn48_N15CPantallaManual22OnTemperaturaRealEventEi>:
	virtual void OnTemperaturaRealEvent(int temperatura);
 8004c36:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004c3a:	f7ff bff1 	b.w	8004c20 <_ZN15CPantallaManual22OnTemperaturaRealEventEi>

08004c3e <_ZN15CPantallaManual19OnPerillaIncrementoEv>:

//eventos del Encoder
void CPantallaManual::OnPerillaIncremento()
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b082      	sub	sp, #8
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
	Estacion->IncrementaTemperatura();
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3320      	adds	r3, #32
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4610      	mov	r0, r2
 8004c5a:	4798      	blx	r3
	TemperaturaGuardada=false;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
}
 8004c64:	bf00      	nop
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <_ZThn48_N15CPantallaManual19OnPerillaIncrementoEv>:

	virtual void OnBotonUnoClickEvent();
	virtual void OnBotonDosClickEvent();
	virtual void OnBotonTresClickEvent();
protected:
	virtual void OnPerillaIncremento();
 8004c6c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004c70:	f7ff bfe5 	b.w	8004c3e <_ZN15CPantallaManual19OnPerillaIncrementoEv>

08004c74 <_ZN15CPantallaManual19OnPerillaDecrementoEv>:

void CPantallaManual::OnPerillaDecremento()
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
	Estacion->DecrementaTemperatura();
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	3324      	adds	r3, #36	@ 0x24
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4610      	mov	r0, r2
 8004c90:	4798      	blx	r3
	TemperaturaGuardada=false;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
}
 8004c9a:	bf00      	nop
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <_ZThn48_N15CPantallaManual19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 8004ca2:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004ca6:	f7ff bfe5 	b.w	8004c74 <_ZN15CPantallaManual19OnPerillaDecrementoEv>

08004caa <_ZN15CPantallaManual8RefrescaEv>:

void CPantallaManual::Refresca()
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b082      	sub	sp, #8
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
	if(TemperaturaGuardada==false)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d105      	bne.n	8004cc8 <_ZN15CPantallaManual8RefrescaEv+0x1e>
		GuardaTemperatura();
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3390      	adds	r3, #144	@ 0x90
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	4798      	blx	r3
	MuestraInformacion(false);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	339c      	adds	r3, #156	@ 0x9c
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	4798      	blx	r3
}
 8004cd6:	bf00      	nop
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
	...

08004ce0 <_ZN15CPantallaManual24OnBotonPerillaClickEventEv>:
 void CPantallaManual::OnBotonPerillaClickEvent()
 {
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
	 ManejadorPantallas.MuestraMenuPrincipal();
 8004ce8:	4803      	ldr	r0, [pc, #12]	@ (8004cf8 <_ZN15CPantallaManual24OnBotonPerillaClickEventEv+0x18>)
 8004cea:	f7fe fb7f 	bl	80033ec <_ZN19CManejadorPantallas20MuestraMenuPrincipalEv>
 }
 8004cee:	bf00      	nop
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	20000240 	.word	0x20000240

08004cfc <_ZThn48_N15CPantallaManual24OnBotonPerillaClickEventEv>:
	virtual void OnBotonPerillaClickEvent();
 8004cfc:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004d00:	f7ff bfee 	b.w	8004ce0 <_ZN15CPantallaManual24OnBotonPerillaClickEventEv>

08004d04 <_ZN15CPantallaManual18MuestraInformacionEb>:
 void CPantallaManual::MuestraInformacion(bool forzar)
 {
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	70fb      	strb	r3, [r7, #3]
		LeeDatosEstacion();
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	3394      	adds	r3, #148	@ 0x94
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	4798      	blx	r3
		MuestraTemperaturas(forzar);
 8004d1c:	78fb      	ldrb	r3, [r7, #3]
 8004d1e:	4619      	mov	r1, r3
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f7ff fec9 	bl	8004ab8 <_ZN15CPantallaManual19MuestraTemperaturasEb>
		MuestraEstado(forzar);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	3398      	adds	r3, #152	@ 0x98
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	78fa      	ldrb	r2, [r7, #3]
 8004d30:	4611      	mov	r1, r2
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	4798      	blx	r3
		MuestraNivelAire(forzar);
 8004d36:	78fb      	ldrb	r3, [r7, #3]
 8004d38:	4619      	mov	r1, r3
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7ff ff20 	bl	8004b80 <_ZN15CPantallaManual16MuestraNivelAireEb>
		//marco como visible
		SetVisible(true);
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	336c      	adds	r3, #108	@ 0x6c
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	4798      	blx	r3

 }
 8004d50:	bf00      	nop
 8004d52:	3708      	adds	r7, #8
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <_ZN15CPantallaManual17GuardaTemperaturaEv>:
 void CPantallaManual::GuardaTemperatura()
 {
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b088      	sub	sp, #32
 8004d5c:	af04      	add	r7, sp, #16
 8004d5e:	6078      	str	r0, [r7, #4]
 	uint16_t temperatura=Estacion->GetTemperatura();
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	3310      	adds	r3, #16
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4610      	mov	r0, r2
 8004d74:	4798      	blx	r3
 8004d76:	4603      	mov	r3, r0
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	817b      	strh	r3, [r7, #10]
// 	uint8_t datos_w[10];
 	int t= HAL_GetTick();
 8004d7c:	f003 fcc8 	bl	8008710 <HAL_GetTick>
 8004d80:	4603      	mov	r3, r0
 8004d82:	60fb      	str	r3, [r7, #12]
 	if(t>tiempoescritura)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	dd17      	ble.n	8004dc0 <_ZN15CPantallaManual17GuardaTemperaturaEv+0x68>
 	{

 		HAL_I2C_Mem_Write(&hi2c1,ADDRESS_EEPROM,DIRMEMORIARPROM::TEMPERATURAMANUAL,I2C_MEMADD_SIZE_8BIT,(uint8_t*)&temperatura,2,HAL_MAX_DELAY);
 8004d90:	f04f 33ff 	mov.w	r3, #4294967295
 8004d94:	9302      	str	r3, [sp, #8]
 8004d96:	2302      	movs	r3, #2
 8004d98:	9301      	str	r3, [sp, #4]
 8004d9a:	f107 030a 	add.w	r3, r7, #10
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	2301      	movs	r3, #1
 8004da2:	2200      	movs	r2, #0
 8004da4:	21a0      	movs	r1, #160	@ 0xa0
 8004da6:	4808      	ldr	r0, [pc, #32]	@ (8004dc8 <_ZN15CPantallaManual17GuardaTemperaturaEv+0x70>)
 8004da8:	f004 fc3a 	bl	8009620 <HAL_I2C_Mem_Write>
 		TemperaturaGuardada=true;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 		tiempoescritura=t+1000;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 	}

 }
 8004dc0:	bf00      	nop
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	200002bc 	.word	0x200002bc

08004dcc <_ZN15CPantallaManual10LeeMemoriaEv>:
void CPantallaManual::LeeMemoria()
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b088      	sub	sp, #32
 8004dd0:	af04      	add	r7, sp, #16
 8004dd2:	6078      	str	r0, [r7, #4]
 	uint16_t temperatura;
 	  if( HAL_I2C_Mem_Read(&hi2c1,ADDRESS_EEPROM,DIRMEMORIARPROM::TEMPERATURAMANUAL,I2C_MEMADD_SIZE_8BIT,(uint8_t*)&temperatura,2,HAL_MAX_DELAY)==HAL_OK)
 8004dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8004dd8:	9302      	str	r3, [sp, #8]
 8004dda:	2302      	movs	r3, #2
 8004ddc:	9301      	str	r3, [sp, #4]
 8004dde:	f107 030e 	add.w	r3, r7, #14
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	2301      	movs	r3, #1
 8004de6:	2200      	movs	r2, #0
 8004de8:	21a0      	movs	r1, #160	@ 0xa0
 8004dea:	4811      	ldr	r0, [pc, #68]	@ (8004e30 <_ZN15CPantallaManual10LeeMemoriaEv+0x64>)
 8004dec:	f004 fd12 	bl	8009814 <HAL_I2C_Mem_Read>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	bf0c      	ite	eq
 8004df6:	2301      	moveq	r3, #1
 8004df8:	2300      	movne	r3, #0
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d013      	beq.n	8004e28 <_ZN15CPantallaManual10LeeMemoriaEv+0x5c>
 	  {
 		 	if(temperatura>=0 && temperatura<=500)
 8004e00:	89fb      	ldrh	r3, [r7, #14]
 8004e02:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004e06:	d80b      	bhi.n	8004e20 <_ZN15CPantallaManual10LeeMemoriaEv+0x54>
 		 	{
 		 		Estacion->SetTemperatura(temperatura);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	330c      	adds	r3, #12
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	89f9      	ldrh	r1, [r7, #14]
 8004e1c:	4610      	mov	r0, r2
 8004e1e:	4798      	blx	r3
 		 	}
 		 	TemperaturaGuardada=true;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 	  }
}
 8004e28:	bf00      	nop
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	200002bc 	.word	0x200002bc

08004e34 <_ZN15CPantallaManual4ShowEv>:

 void CPantallaManual::Show()
 {
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 	CPantallaBase::Show();
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fd fde2 	bl	8002a08 <_ZN13CPantallaBase4ShowEv>
 	LabelTemperatura->Show();
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	334c      	adds	r3, #76	@ 0x4c
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4610      	mov	r0, r2
 8004e58:	4798      	blx	r3
 	//leo la temperatura desde la memoria
 	LeeMemoria();
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7ff ffb6 	bl	8004dcc <_ZN15CPantallaManual10LeeMemoriaEv>
 	LeeDatosEstacion();
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	3394      	adds	r3, #148	@ 0x94
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	4798      	blx	r3
 	MuestraInformacion(true);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	339c      	adds	r3, #156	@ 0x9c
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2101      	movs	r1, #1
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	4798      	blx	r3
 }
 8004e7a:	bf00      	nop
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
	...

08004e84 <_ZN15CPantallaManual21OnBotonTresClickEventEv>:
void CPantallaManual::OnBotonTresClickEvent()
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(3);
 8004e8c:	2103      	movs	r1, #3
 8004e8e:	4803      	ldr	r0, [pc, #12]	@ (8004e9c <_ZN15CPantallaManual21OnBotonTresClickEventEv+0x18>)
 8004e90:	f7fe fb69 	bl	8003566 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 8004e94:	bf00      	nop
 8004e96:	3708      	adds	r7, #8
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	20000240 	.word	0x20000240

08004ea0 <_ZThn48_N15CPantallaManual21OnBotonTresClickEventEv>:
	virtual void OnBotonTresClickEvent();
 8004ea0:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004ea4:	f7ff bfee 	b.w	8004e84 <_ZN15CPantallaManual21OnBotonTresClickEventEv>

08004ea8 <_ZN15CPantallaManual20OnBotonUnoClickEventEv>:
void CPantallaManual::OnBotonUnoClickEvent()
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(1);
 8004eb0:	2101      	movs	r1, #1
 8004eb2:	4803      	ldr	r0, [pc, #12]	@ (8004ec0 <_ZN15CPantallaManual20OnBotonUnoClickEventEv+0x18>)
 8004eb4:	f7fe fb57 	bl	8003566 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 8004eb8:	bf00      	nop
 8004eba:	3708      	adds	r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	20000240 	.word	0x20000240

08004ec4 <_ZThn48_N15CPantallaManual20OnBotonUnoClickEventEv>:
	virtual void OnBotonUnoClickEvent();
 8004ec4:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004ec8:	f7ff bfee 	b.w	8004ea8 <_ZN15CPantallaManual20OnBotonUnoClickEventEv>

08004ecc <_ZN15CPantallaManual20OnBotonDosClickEventEv>:
void CPantallaManual::OnBotonDosClickEvent()
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(2);
 8004ed4:	2102      	movs	r1, #2
 8004ed6:	4803      	ldr	r0, [pc, #12]	@ (8004ee4 <_ZN15CPantallaManual20OnBotonDosClickEventEv+0x18>)
 8004ed8:	f7fe fb45 	bl	8003566 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 8004edc:	bf00      	nop
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	20000240 	.word	0x20000240

08004ee8 <_ZThn48_N15CPantallaManual20OnBotonDosClickEventEv>:
	virtual void OnBotonDosClickEvent();
 8004ee8:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004eec:	f7ff bfee 	b.w	8004ecc <_ZN15CPantallaManual20OnBotonDosClickEventEv>

08004ef0 <_ZN16CPantallaMemoriaD1Ev>:
#include "Uart/Uart.hpp"
#include "Constantes.hpp"
extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart1;

CPantallaMemoria::~CPantallaMemoria()
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	4a07      	ldr	r2, [pc, #28]	@ (8004f18 <_ZN16CPantallaMemoriaD1Ev+0x28>)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	4a07      	ldr	r2, [pc, #28]	@ (8004f1c <_ZN16CPantallaMemoriaD1Ev+0x2c>)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	631a      	str	r2, [r3, #48]	@ 0x30
{
	// TODO Auto-generated destructor stub
}
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7ff fc04 	bl	8004714 <_ZN15CPantallaManualD1Ev>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	0800fe68 	.word	0x0800fe68
 8004f1c:	0800ff14 	.word	0x0800ff14

08004f20 <_ZThn48_N16CPantallaMemoriaD1Ev>:
public:
	virtual void OnPerillaIncremento();
	virtual void OnPerillaDecremento();
	CPantallaMemoria(CEstacionBase *estacion);
	CPantallaMemoria();
	virtual ~CPantallaMemoria();
 8004f20:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004f24:	f7ff bfe4 	b.w	8004ef0 <_ZN16CPantallaMemoriaD1Ev>

08004f28 <_ZN16CPantallaMemoriaD0Ev>:
CPantallaMemoria::~CPantallaMemoria()
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
}
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f7ff ffdd 	bl	8004ef0 <_ZN16CPantallaMemoriaD1Ev>
 8004f36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f007 fd16 	bl	800c96c <_ZdlPvj>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4618      	mov	r0, r3
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <_ZThn48_N16CPantallaMemoriaD0Ev>:
 8004f4a:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8004f4e:	f7ff bfeb 	b.w	8004f28 <_ZN16CPantallaMemoriaD0Ev>
	...

08004f54 <_ZN16CPantallaMemoriaC1Ev>:


CPantallaMemoria::CPantallaMemoria() :
 8004f54:	b590      	push	{r4, r7, lr}
 8004f56:	b08d      	sub	sp, #52	@ 0x34
 8004f58:	af08      	add	r7, sp, #32
 8004f5a:	6078      	str	r0, [r7, #4]
		CPantallaManual()
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7ff fc08 	bl	8004774 <_ZN15CPantallaManualC1Ev>
 8004f64:	4a38      	ldr	r2, [pc, #224]	@ (8005048 <_ZN16CPantallaMemoriaC1Ev+0xf4>)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	4a38      	ldr	r2, [pc, #224]	@ (800504c <_ZN16CPantallaMemoriaC1Ev+0xf8>)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 20fc 	strb.w	r2, [r3, #252]	@ 0xfc
{
	LabelTitulo->SetTexto((char*)"MODO: MEMORIA");
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f84:	4932      	ldr	r1, [pc, #200]	@ (8005050 <_ZN16CPantallaMemoriaC1Ev+0xfc>)
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7fd fad4 	bl	8002534 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelMemoria=new CEtiquetaTft( 5, 35, 50, 20, COLOR::BLACK,(char*)"Memoria: ", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8004f8c:	20a4      	movs	r0, #164	@ 0xa4
 8004f8e:	f007 fcef 	bl	800c970 <_Znwj>
 8004f92:	4603      	mov	r3, r0
 8004f94:	461c      	mov	r4, r3
 8004f96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004f9a:	9306      	str	r3, [sp, #24]
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	9305      	str	r3, [sp, #20]
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	9304      	str	r3, [sp, #16]
 8004fa4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004fa8:	9303      	str	r3, [sp, #12]
 8004faa:	4b2a      	ldr	r3, [pc, #168]	@ (8005054 <_ZN16CPantallaMemoriaC1Ev+0x100>)
 8004fac:	9302      	str	r3, [sp, #8]
 8004fae:	2300      	movs	r3, #0
 8004fb0:	9301      	str	r3, [sp, #4]
 8004fb2:	2314      	movs	r3, #20
 8004fb4:	9300      	str	r3, [sp, #0]
 8004fb6:	2332      	movs	r3, #50	@ 0x32
 8004fb8:	2223      	movs	r2, #35	@ 0x23
 8004fba:	2105      	movs	r1, #5
 8004fbc:	4620      	mov	r0, r4
 8004fbe:	f7fd fa7f 	bl	80024c0 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8c3 40f4 	str.w	r4, [r3, #244]	@ 0xf4
	LabelTemperatura->CambiaPosicion(5,65);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004fce:	4618      	mov	r0, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	3350      	adds	r3, #80	@ 0x50
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2241      	movs	r2, #65	@ 0x41
 8004fde:	2105      	movs	r1, #5
 8004fe0:	4798      	blx	r3
	int centroX = DameCentroX();
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7fd fe97 	bl	8002d18 <_ZN14CRectanguloTft11DameCentroXEv>
 8004fea:	60f8      	str	r0, [r7, #12]
	LabelTemperaturas->CambiaPosicion(centroX - 150 / 2, 95);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3350      	adds	r3, #80	@ 0x50
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	f1a2 014b 	sub.w	r1, r2, #75	@ 0x4b
 8005006:	225f      	movs	r2, #95	@ 0x5f
 8005008:	4798      	blx	r3
	LabelAire->CambiaPosicion(5, 135);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005010:	4618      	mov	r0, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	3350      	adds	r3, #80	@ 0x50
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2287      	movs	r2, #135	@ 0x87
 8005020:	2105      	movs	r1, #5
 8005022:	4798      	blx	r3
	LabelEstado->CambiaPosicion(5, 175);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800502a:	4618      	mov	r0, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	3350      	adds	r3, #80	@ 0x50
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	22af      	movs	r2, #175	@ 0xaf
 800503a:	2105      	movs	r1, #5
 800503c:	4798      	blx	r3

}
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4618      	mov	r0, r3
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	bd90      	pop	{r4, r7, pc}
 8005048:	0800fe68 	.word	0x0800fe68
 800504c:	0800ff14 	.word	0x0800ff14
 8005050:	0800f7b4 	.word	0x0800f7b4
 8005054:	0800f7c4 	.word	0x0800f7c4

08005058 <_ZN16CPantallaMemoria17GuardaTemperaturaEv>:


 void CPantallaMemoria::GuardaTemperatura()
 {
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 }
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <_ZN16CPantallaMemoria4ShowEv>:


 void CPantallaMemoria::Show()
 {
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
	 CPantallaManual::Show();
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4618      	mov	r0, r3
 8005078:	f7ff fedc 	bl	8004e34 <_ZN15CPantallaManual4ShowEv>
 	//leo la temperatura desde la memoria
	LabelMemoria->SetTexto((char*)"Memoria: %d", NumeroMemoria);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f8d3 00f4 	ldr.w	r0, [r3, #244]	@ 0xf4
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8005088:	461a      	mov	r2, r3
 800508a:	4916      	ldr	r1, [pc, #88]	@ (80050e4 <_ZN16CPantallaMemoria4ShowEv+0x78>)
 800508c:	f7fd fa52 	bl	8002534 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelMemoria->Show();
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	334c      	adds	r3, #76	@ 0x4c
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4610      	mov	r0, r2
 80050a4:	4798      	blx	r3
	LeeDatosMemoria();
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f844 	bl	8005134 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv>
	Estacion->SetTemperatura(Temperatura);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	330c      	adds	r3, #12
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	f8d2 20d0 	ldr.w	r2, [r2, #208]	@ 0xd0
 80050c4:	4611      	mov	r1, r2
 80050c6:	4798      	blx	r3
	VelocidadAireInicialPotenciometro=ManejadorControles->GetNivelAire();
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80050ce:	4618      	mov	r0, r3
 80050d0:	f001 fa9f 	bl	8006612 <_ZN19CManejadorControles12GetNivelAireEv>
 80050d4:	4602      	mov	r2, r0
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
 }
 80050dc:	bf00      	nop
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	0800f7d0 	.word	0x0800f7d0

080050e8 <_ZN16CPantallaMemoria10SetMemoriaEi>:


void CPantallaMemoria::SetMemoria(int numeroMemoria)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
	NumeroMemoria=numeroMemoria;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
	DireccionMemoria=DameDireccionMemoria();
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f872 	bl	80051e4 <_ZN16CPantallaMemoria20DameDireccionMemoriaEv>
 8005100:	4602      	mov	r2, r0
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
}
 8005108:	bf00      	nop
 800510a:	3708      	adds	r7, #8
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <_ZN16CPantallaMemoria23OnBotonCuatroClickEventEv>:


void CPantallaMemoria::OnBotonCuatroClickEvent()
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaManual();
 8005118:	4803      	ldr	r0, [pc, #12]	@ (8005128 <_ZN16CPantallaMemoria23OnBotonCuatroClickEventEv+0x18>)
 800511a:	f7fe f94b 	bl	80033b4 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
}
 800511e:	bf00      	nop
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	20000240 	.word	0x20000240

0800512c <_ZThn48_N16CPantallaMemoria23OnBotonCuatroClickEventEv>:
	virtual void OnBotonCuatroClickEvent();
 800512c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005130:	f7ff bfee 	b.w	8005110 <_ZN16CPantallaMemoria23OnBotonCuatroClickEventEv>

08005134 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv>:

void CPantallaMemoria::LeeDatosMemoria()
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af04      	add	r7, sp, #16
 800513a:	6078      	str	r0, [r7, #4]
	uint16_t datos_r[2];
	  if( HAL_I2C_Mem_Read(&hi2c1,ADDRESS_EEPROM,DireccionMemoria,I2C_MEMADD_SIZE_8BIT,(uint8_t*)datos_r,4,HAL_MAX_DELAY)==HAL_OK)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005142:	b29a      	uxth	r2, r3
 8005144:	f04f 33ff 	mov.w	r3, #4294967295
 8005148:	9302      	str	r3, [sp, #8]
 800514a:	2304      	movs	r3, #4
 800514c:	9301      	str	r3, [sp, #4]
 800514e:	f107 030c 	add.w	r3, r7, #12
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	2301      	movs	r3, #1
 8005156:	21a0      	movs	r1, #160	@ 0xa0
 8005158:	4821      	ldr	r0, [pc, #132]	@ (80051e0 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0xac>)
 800515a:	f004 fb5b 	bl	8009814 <HAL_I2C_Mem_Read>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	bf0c      	ite	eq
 8005164:	2301      	moveq	r3, #1
 8005166:	2300      	movne	r3, #0
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d034      	beq.n	80051d8 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0xa4>
	  {
			Temperatura=datos_r[0];
 800516e:	89bb      	ldrh	r3, [r7, #12]
 8005170:	461a      	mov	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
			VelocidadAire=datos_r[1];
 8005178:	89fb      	ldrh	r3, [r7, #14]
 800517a:	461a      	mov	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

		 	if(Temperatura<0 || Temperatura>500)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8005188:	2b00      	cmp	r3, #0
 800518a:	db05      	blt.n	8005198 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x64>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8005192:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005196:	dd03      	ble.n	80051a0 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x6c>
		 	{
		 		Temperatura=100;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2264      	movs	r2, #100	@ 0x64
 800519c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
		 	}
		 	if(VelocidadAire<0 || VelocidadAire>100)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	db04      	blt.n	80051b4 <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x80>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051b0:	2b64      	cmp	r3, #100	@ 0x64
 80051b2:	dd03      	ble.n	80051bc <_ZN16CPantallaMemoria15LeeDatosMemoriaEv+0x88>
		 	{
		 		VelocidadAire=50;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2232      	movs	r2, #50	@ 0x32
 80051b8:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
		 	}
		 	Estacion->SetNivelAire(VelocidadAire);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	3314      	adds	r3, #20
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
 80051d4:	4611      	mov	r1, r2
 80051d6:	4798      	blx	r3
	  }

}
 80051d8:	bf00      	nop
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	200002bc 	.word	0x200002bc

080051e4 <_ZN16CPantallaMemoria20DameDireccionMemoriaEv>:
int CPantallaMemoria::DameDireccionMemoria()
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
	int direccion=1;
 80051ec:	2301      	movs	r3, #1
 80051ee:	60fb      	str	r3, [r7, #12]
	switch(NumeroMemoria)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80051f6:	2b03      	cmp	r3, #3
 80051f8:	d00c      	beq.n	8005214 <_ZN16CPantallaMemoria20DameDireccionMemoriaEv+0x30>
 80051fa:	2b03      	cmp	r3, #3
 80051fc:	dc0d      	bgt.n	800521a <_ZN16CPantallaMemoria20DameDireccionMemoriaEv+0x36>
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d002      	beq.n	8005208 <_ZN16CPantallaMemoria20DameDireccionMemoriaEv+0x24>
 8005202:	2b02      	cmp	r3, #2
 8005204:	d003      	beq.n	800520e <_ZN16CPantallaMemoria20DameDireccionMemoriaEv+0x2a>
 8005206:	e008      	b.n	800521a <_ZN16CPantallaMemoria20DameDireccionMemoriaEv+0x36>
	{
	case 1:
		direccion=DIRMEMORIARPROM::MEMORIA1;
 8005208:	2304      	movs	r3, #4
 800520a:	60fb      	str	r3, [r7, #12]
		break;
 800520c:	e005      	b.n	800521a <_ZN16CPantallaMemoria20DameDireccionMemoriaEv+0x36>
	case 2:
		direccion=DIRMEMORIARPROM::MEMORIA2;
 800520e:	2308      	movs	r3, #8
 8005210:	60fb      	str	r3, [r7, #12]
		break;
 8005212:	e002      	b.n	800521a <_ZN16CPantallaMemoria20DameDireccionMemoriaEv+0x36>
	case 3:
		direccion=DIRMEMORIARPROM::MEMORIA3;
 8005214:	230c      	movs	r3, #12
 8005216:	60fb      	str	r3, [r7, #12]
		break;
 8005218:	bf00      	nop
	}
	return direccion;
 800521a:	68fb      	ldr	r3, [r7, #12]
}
 800521c:	4618      	mov	r0, r3
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <_ZN16CPantallaMemoria16LeeDatosEstacionEv>:
void CPantallaMemoria::LeeDatosEstacion()
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
	CPantallaManual::LeeDatosEstacion();
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4618      	mov	r0, r3
 8005234:	f7ff fbee 	bl	8004a14 <_ZN15CPantallaManual16LeeDatosEstacionEv>
	int velocidad=ManejadorControles->GetNivelAire();
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800523e:	4618      	mov	r0, r3
 8005240:	f001 f9e7 	bl	8006612 <_ZN19CManejadorControles12GetNivelAireEv>
 8005244:	60f8      	str	r0, [r7, #12]
	if(VelocidadAireInicialPotenciometro>velocidad+1 ||VelocidadAireInicialPotenciometro<velocidad-1)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	3301      	adds	r3, #1
 8005250:	429a      	cmp	r2, r3
 8005252:	dc06      	bgt.n	8005262 <_ZN16CPantallaMemoria16LeeDatosEstacionEv+0x3a>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	3b01      	subs	r3, #1
 800525e:	429a      	cmp	r2, r3
 8005260:	da08      	bge.n	8005274 <_ZN16CPantallaMemoria16LeeDatosEstacionEv+0x4c>
	{
		NivelAire =velocidad;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
		CambioNIvelAire=true;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 20fc 	strb.w	r2, [r3, #252]	@ 0xfc
 8005272:	e00a      	b.n	800528a <_ZN16CPantallaMemoria16LeeDatosEstacionEv+0x62>
	}
	else
	{
		NivelAire =VelocidadAire;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
		CambioNIvelAire=false;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 20fc 	strb.w	r2, [r3, #252]	@ 0xfc
	}
}
 8005288:	bf00      	nop
 800528a:	bf00      	nop
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
	...

08005294 <_ZN16CPantallaMemoria19OnPerillaIncrementoEv>:
void CPantallaMemoria::OnPerillaIncremento()
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaManual();
 800529c:	4803      	ldr	r0, [pc, #12]	@ (80052ac <_ZN16CPantallaMemoria19OnPerillaIncrementoEv+0x18>)
 800529e:	f7fe f889 	bl	80033b4 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
}
 80052a2:	bf00      	nop
 80052a4:	3708      	adds	r7, #8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	20000240 	.word	0x20000240

080052b0 <_ZThn48_N16CPantallaMemoria19OnPerillaIncrementoEv>:
	virtual void OnPerillaIncremento();
 80052b0:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80052b4:	f7ff bfee 	b.w	8005294 <_ZN16CPantallaMemoria19OnPerillaIncrementoEv>

080052b8 <_ZN16CPantallaMemoria19OnPerillaDecrementoEv>:
void CPantallaMemoria::OnPerillaDecremento()
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaManual();
 80052c0:	4803      	ldr	r0, [pc, #12]	@ (80052d0 <_ZN16CPantallaMemoria19OnPerillaDecrementoEv+0x18>)
 80052c2:	f7fe f877 	bl	80033b4 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
}
 80052c6:	bf00      	nop
 80052c8:	3708      	adds	r7, #8
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	20000240 	.word	0x20000240

080052d4 <_ZThn48_N16CPantallaMemoria19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 80052d4:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80052d8:	f7ff bfee 	b.w	80052b8 <_ZN16CPantallaMemoria19OnPerillaDecrementoEv>

080052dc <_ZN16CPantallaMemoria18MuestraInformacionEb>:
void CPantallaMemoria::MuestraInformacion(bool forzar)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	460b      	mov	r3, r1
 80052e6:	70fb      	strb	r3, [r7, #3]
		LeeDatosEstacion();
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	3394      	adds	r3, #148	@ 0x94
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	4798      	blx	r3
		if(CambioNIvelAire==true)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d103      	bne.n	8005306 <_ZN16CPantallaMemoria18MuestraInformacionEb+0x2a>
		{
			ManejadorPantallas.MuestraPantallaManual();
 80052fe:	4811      	ldr	r0, [pc, #68]	@ (8005344 <_ZN16CPantallaMemoria18MuestraInformacionEb+0x68>)
 8005300:	f7fe f858 	bl	80033b4 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
			return;
 8005304:	e01b      	b.n	800533e <_ZN16CPantallaMemoria18MuestraInformacionEb+0x62>
		}
		MuestraTemperaturas(forzar);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	78fa      	ldrb	r2, [r7, #3]
 800530a:	4611      	mov	r1, r2
 800530c:	4618      	mov	r0, r3
 800530e:	f7ff fbd3 	bl	8004ab8 <_ZN15CPantallaManual19MuestraTemperaturasEb>
		MuestraEstado(forzar);
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	3398      	adds	r3, #152	@ 0x98
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	78f9      	ldrb	r1, [r7, #3]
 800531e:	4610      	mov	r0, r2
 8005320:	4798      	blx	r3
		MuestraNivelAire(forzar);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	78fa      	ldrb	r2, [r7, #3]
 8005326:	4611      	mov	r1, r2
 8005328:	4618      	mov	r0, r3
 800532a:	f7ff fc29 	bl	8004b80 <_ZN15CPantallaManual16MuestraNivelAireEb>
		//marco como visible
		SetVisible(true);
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	336c      	adds	r3, #108	@ 0x6c
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2101      	movs	r1, #1
 800533a:	4610      	mov	r0, r2
 800533c:	4798      	blx	r3
}
 800533e:	3708      	adds	r7, #8
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	20000240 	.word	0x20000240

08005348 <_ZN14CMenuPrincipalC1Ev>:
#include "GUI/Menu/CMenuItem.hpp"
#include "GUI/CEtiquetaTft.hpp"
#include "GUI/Menu/CMenu.hpp"
#include "string.h"

CMenuPrincipal::CMenuPrincipal():
 8005348:	b590      	push	{r4, r7, lr}
 800534a:	b087      	sub	sp, #28
 800534c:	af04      	add	r7, sp, #16
 800534e:	6078      	str	r0, [r7, #4]
	CPantallaBase(1,(char*) " Menu Principal")
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a37      	ldr	r2, [pc, #220]	@ (8005430 <_ZN14CMenuPrincipalC1Ev+0xe8>)
 8005354:	2101      	movs	r1, #1
 8005356:	4618      	mov	r0, r3
 8005358:	f7fd fae4 	bl	8002924 <_ZN13CPantallaBaseC1EiPc>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	33ac      	adds	r3, #172	@ 0xac
 8005360:	4618      	mov	r0, r3
 8005362:	f7fe f941 	bl	80035e8 <_ZN20CManejadorEventoMenuC1Ev>
 8005366:	4a33      	ldr	r2, [pc, #204]	@ (8005434 <_ZN14CMenuPrincipalC1Ev+0xec>)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	601a      	str	r2, [r3, #0]
 800536c:	4a32      	ldr	r2, [pc, #200]	@ (8005438 <_ZN14CMenuPrincipalC1Ev+0xf0>)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	631a      	str	r2, [r3, #48]	@ 0x30
 8005372:	4a32      	ldr	r2, [pc, #200]	@ (800543c <_ZN14CMenuPrincipalC1Ev+0xf4>)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	Menu=new CMenu(4,30,310, 210,COLOR::WHITE,1, COLOR::RED);
 800537a:	2080      	movs	r0, #128	@ 0x80
 800537c:	f007 faf8 	bl	800c970 <_Znwj>
 8005380:	4603      	mov	r3, r0
 8005382:	461c      	mov	r4, r3
 8005384:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005388:	9303      	str	r3, [sp, #12]
 800538a:	2301      	movs	r3, #1
 800538c:	9302      	str	r3, [sp, #8]
 800538e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005392:	9301      	str	r3, [sp, #4]
 8005394:	23d2      	movs	r3, #210	@ 0xd2
 8005396:	9300      	str	r3, [sp, #0]
 8005398:	f44f 739b 	mov.w	r3, #310	@ 0x136
 800539c:	221e      	movs	r2, #30
 800539e:	2104      	movs	r1, #4
 80053a0:	4620      	mov	r0, r4
 80053a2:	f7fe f95d 	bl	8003660 <_ZN5CMenuC1Eiiiiiii>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8c3 40b0 	str.w	r4, [r3, #176]	@ 0xb0
	Menu->AsignaManejadorEventosMenu(this);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	33ac      	adds	r3, #172	@ 0xac
 80053b6:	4619      	mov	r1, r3
 80053b8:	4610      	mov	r0, r2
 80053ba:	f7fe fbe6 	bl	8003b8a <_ZN5CMenu26AsignaManejadorEventosMenuEP20CManejadorEventoMenu>
	Menu->AsignaColoresItems(COLOR::BLACK, 0X776F, COLOR::WHITE, COLOR::BLACK);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 80053c4:	2300      	movs	r3, #0
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80053cc:	f247 726f 	movw	r2, #30575	@ 0x776f
 80053d0:	2100      	movs	r1, #0
 80053d2:	f7fe f9be 	bl	8003752 <_ZN5CMenu18AsignaColoresItemsEiiii>

	Menu->AgregaItem((char*)"Conf Memoria 1", MENU_PRINCIPAL::MENU_MEMORIA_1);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 80053dc:	2300      	movs	r3, #0
 80053de:	2201      	movs	r2, #1
 80053e0:	4917      	ldr	r1, [pc, #92]	@ (8005440 <_ZN14CMenuPrincipalC1Ev+0xf8>)
 80053e2:	f7fe fa19 	bl	8003818 <_ZN5CMenu10AgregaItemEPcib>
	Menu->AgregaItem((char*)"Conf Memoria 2",(int)MENU_PRINCIPAL::MENU_MEMORIA_2);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 80053ec:	2300      	movs	r3, #0
 80053ee:	2202      	movs	r2, #2
 80053f0:	4914      	ldr	r1, [pc, #80]	@ (8005444 <_ZN14CMenuPrincipalC1Ev+0xfc>)
 80053f2:	f7fe fa11 	bl	8003818 <_ZN5CMenu10AgregaItemEPcib>
	Menu->AgregaItem((char*)"Conf Memoria 3", (int)MENU_PRINCIPAL::MENU_MEMORIA_3);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 80053fc:	2300      	movs	r3, #0
 80053fe:	2203      	movs	r2, #3
 8005400:	4911      	ldr	r1, [pc, #68]	@ (8005448 <_ZN14CMenuPrincipalC1Ev+0x100>)
 8005402:	f7fe fa09 	bl	8003818 <_ZN5CMenu10AgregaItemEPcib>
	Menu->AgregaItem((char*)"Calibrar", (int)MENU_PRINCIPAL::MENU_CALIBRAR);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 800540c:	2300      	movs	r3, #0
 800540e:	2205      	movs	r2, #5
 8005410:	490e      	ldr	r1, [pc, #56]	@ (800544c <_ZN14CMenuPrincipalC1Ev+0x104>)
 8005412:	f7fe fa01 	bl	8003818 <_ZN5CMenu10AgregaItemEPcib>
	Menu->AgregaItem((char*)"Salir", MENU_SALIR);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 800541c:	2300      	movs	r3, #0
 800541e:	2200      	movs	r2, #0
 8005420:	490b      	ldr	r1, [pc, #44]	@ (8005450 <_ZN14CMenuPrincipalC1Ev+0x108>)
 8005422:	f7fe f9f9 	bl	8003818 <_ZN5CMenu10AgregaItemEPcib>
}
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4618      	mov	r0, r3
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	bd90      	pop	{r4, r7, pc}
 8005430:	0800f7dc 	.word	0x0800f7dc
 8005434:	0800ff48 	.word	0x0800ff48
 8005438:	0800ffe0 	.word	0x0800ffe0
 800543c:	08010014 	.word	0x08010014
 8005440:	0800f7ec 	.word	0x0800f7ec
 8005444:	0800f7fc 	.word	0x0800f7fc
 8005448:	0800f80c 	.word	0x0800f80c
 800544c:	0800f81c 	.word	0x0800f81c
 8005450:	0800f828 	.word	0x0800f828

08005454 <_ZN14CMenuPrincipalD1Ev>:

CMenuPrincipal::~CMenuPrincipal()
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	4a0b      	ldr	r2, [pc, #44]	@ (800548c <_ZN14CMenuPrincipalD1Ev+0x38>)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	4a0b      	ldr	r2, [pc, #44]	@ (8005490 <_ZN14CMenuPrincipalD1Ev+0x3c>)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	631a      	str	r2, [r3, #48]	@ 0x30
 8005468:	4a0a      	ldr	r2, [pc, #40]	@ (8005494 <_ZN14CMenuPrincipalD1Ev+0x40>)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
{
	// TODO Auto-generated destructor stub
}
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	33ac      	adds	r3, #172	@ 0xac
 8005474:	4618      	mov	r0, r3
 8005476:	f7fe f8c7 	bl	8003608 <_ZN20CManejadorEventoMenuD1Ev>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4618      	mov	r0, r3
 800547e:	f7fd fa1d 	bl	80028bc <_ZN13CPantallaBaseD1Ev>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4618      	mov	r0, r3
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	0800ff48 	.word	0x0800ff48
 8005490:	0800ffe0 	.word	0x0800ffe0
 8005494:	08010014 	.word	0x08010014

08005498 <_ZThn48_N14CMenuPrincipalD1Ev>:
	CEstacionBase *Estacion;
	CMenuItem* item1,*item2;

public:
	CMenuPrincipal();
	virtual ~CMenuPrincipal();
 8005498:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800549c:	f7ff bfda 	b.w	8005454 <_ZN14CMenuPrincipalD1Ev>

080054a0 <_ZThn172_N14CMenuPrincipalD1Ev>:
 80054a0:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 80054a4:	f7ff bfd6 	b.w	8005454 <_ZN14CMenuPrincipalD1Ev>

080054a8 <_ZN14CMenuPrincipalD0Ev>:
CMenuPrincipal::~CMenuPrincipal()
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
}
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f7ff ffcf 	bl	8005454 <_ZN14CMenuPrincipalD1Ev>
 80054b6:	21c0      	movs	r1, #192	@ 0xc0
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f007 fa57 	bl	800c96c <_ZdlPvj>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4618      	mov	r0, r3
 80054c2:	3708      	adds	r7, #8
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <_ZThn172_N14CMenuPrincipalD0Ev>:
 80054c8:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 80054cc:	f7ff bfec 	b.w	80054a8 <_ZN14CMenuPrincipalD0Ev>

080054d0 <_ZThn48_N14CMenuPrincipalD0Ev>:
 80054d0:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80054d4:	f7ff bfe8 	b.w	80054a8 <_ZN14CMenuPrincipalD0Ev>

080054d8 <_ZN14CMenuPrincipal4ShowEv>:

void CMenuPrincipal::Show()
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
	CPantallaBase::Show();
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7fd fa90 	bl	8002a08 <_ZN13CPantallaBase4ShowEv>
	Menu->Show();
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	334c      	adds	r3, #76	@ 0x4c
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4610      	mov	r0, r2
 80054fc:	4798      	blx	r3
	SetVisible(true);
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	336c      	adds	r3, #108	@ 0x6c
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2101      	movs	r1, #1
 800550a:	4610      	mov	r0, r2
 800550c:	4798      	blx	r3
}
 800550e:	bf00      	nop
 8005510:	3708      	adds	r7, #8
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <_ZN14CMenuPrincipal8RefrescaEv>:
void CMenuPrincipal::Refresca()
{
 8005516:	b580      	push	{r7, lr}
 8005518:	b082      	sub	sp, #8
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
	if(EsVisible()==false)
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	3368      	adds	r3, #104	@ 0x68
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4610      	mov	r0, r2
 800552a:	4798      	blx	r3
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	bf0c      	ite	eq
 8005532:	2301      	moveq	r3, #1
 8005534:	2300      	movne	r3, #0
 8005536:	b2db      	uxtb	r3, r3
 8005538:	2b00      	cmp	r3, #0
 800553a:	d005      	beq.n	8005548 <_ZN14CMenuPrincipal8RefrescaEv+0x32>
		Show();
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	334c      	adds	r3, #76	@ 0x4c
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	4798      	blx	r3
}
 8005548:	bf00      	nop
 800554a:	3708      	adds	r7, #8
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <_ZN14CMenuPrincipal23OnBotonCuatroClickEventEv>:
void CMenuPrincipal::OnBotonCuatroClickEvent()
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaManual();
 8005558:	4803      	ldr	r0, [pc, #12]	@ (8005568 <_ZN14CMenuPrincipal23OnBotonCuatroClickEventEv+0x18>)
 800555a:	f7fd ff2b 	bl	80033b4 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
}
 800555e:	bf00      	nop
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	20000240 	.word	0x20000240

0800556c <_ZThn48_N14CMenuPrincipal23OnBotonCuatroClickEventEv>:
	virtual void Show();
	virtual void Refresca();
	virtual void OnBotonCuatroClickEvent();
 800556c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005570:	f7ff bfee 	b.w	8005550 <_ZN14CMenuPrincipal23OnBotonCuatroClickEventEv>

08005574 <_ZN14CMenuPrincipal19OnPerillaIncrementoEv>:
void CMenuPrincipal::OnPerillaIncremento()
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
	Menu->OnSeleccionaSiguiente();
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005582:	4618      	mov	r0, r3
 8005584:	f7fe f9b0 	bl	80038e8 <_ZN5CMenu21OnSeleccionaSiguienteEv>
}
 8005588:	bf00      	nop
 800558a:	3708      	adds	r7, #8
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <_ZThn48_N14CMenuPrincipal19OnPerillaIncrementoEv>:
	virtual void OnPerillaIncremento();
 8005590:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005594:	f7ff bfee 	b.w	8005574 <_ZN14CMenuPrincipal19OnPerillaIncrementoEv>

08005598 <_ZN14CMenuPrincipal19OnPerillaDecrementoEv>:
void CMenuPrincipal::OnPerillaDecremento()
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
	Menu->OnSeleccionaAnterior();
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fe f9ec 	bl	8003984 <_ZN5CMenu20OnSeleccionaAnteriorEv>
}
 80055ac:	bf00      	nop
 80055ae:	3708      	adds	r7, #8
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <_ZThn48_N14CMenuPrincipal19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 80055b4:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80055b8:	f7ff bfee 	b.w	8005598 <_ZN14CMenuPrincipal19OnPerillaDecrementoEv>

080055bc <_ZN14CMenuPrincipal24OnBotonPerillaClickEventEv>:
void CMenuPrincipal::OnBotonPerillaClickEvent()
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
	Menu->OnClickSeleccionado();
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7fe fa45 	bl	8003a5a <_ZN5CMenu19OnClickSeleccionadoEv>
}
 80055d0:	bf00      	nop
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <_ZThn48_N14CMenuPrincipal24OnBotonPerillaClickEventEv>:
	virtual void OnBotonPerillaClickEvent();
 80055d8:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80055dc:	f7ff bfee 	b.w	80055bc <_ZN14CMenuPrincipal24OnBotonPerillaClickEventEv>

080055e0 <_ZN14CMenuPrincipal11OnMenuEventEi>:
void CMenuPrincipal::OnMenuEvent(int identificador)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
	switch(identificador)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	2b05      	cmp	r3, #5
 80055ee:	d016      	beq.n	800561e <_ZN14CMenuPrincipal11OnMenuEventEi+0x3e>
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	2b05      	cmp	r3, #5
 80055f4:	dc17      	bgt.n	8005626 <_ZN14CMenuPrincipal11OnMenuEventEi+0x46>
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d007      	beq.n	800560c <_ZN14CMenuPrincipal11OnMenuEventEi+0x2c>
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	db11      	blt.n	8005626 <_ZN14CMenuPrincipal11OnMenuEventEi+0x46>
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	3b01      	subs	r3, #1
 8005606:	2b02      	cmp	r3, #2
 8005608:	d80d      	bhi.n	8005626 <_ZN14CMenuPrincipal11OnMenuEventEi+0x46>
 800560a:	e003      	b.n	8005614 <_ZN14CMenuPrincipal11OnMenuEventEi+0x34>
	{
	case MENU_PRINCIPAL::MENU_SALIR:
		ManejadorPantallas.MuestraPantallaManual();//.MuestraPantallaAnterior();
 800560c:	4808      	ldr	r0, [pc, #32]	@ (8005630 <_ZN14CMenuPrincipal11OnMenuEventEi+0x50>)
 800560e:	f7fd fed1 	bl	80033b4 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
		break;
 8005612:	e008      	b.n	8005626 <_ZN14CMenuPrincipal11OnMenuEventEi+0x46>
	case MENU_PRINCIPAL::MENU_MEMORIA_1:
	case MENU_PRINCIPAL::MENU_MEMORIA_2:
	case MENU_PRINCIPAL::MENU_MEMORIA_3:
		ManejadorPantallas.MuestraPantallaConfiguracionMemoria(identificador);
 8005614:	6839      	ldr	r1, [r7, #0]
 8005616:	4806      	ldr	r0, [pc, #24]	@ (8005630 <_ZN14CMenuPrincipal11OnMenuEventEi+0x50>)
 8005618:	f7fd ff7e 	bl	8003518 <_ZN19CManejadorPantallas35MuestraPantallaConfiguracionMemoriaEi>
		break;
 800561c:	e003      	b.n	8005626 <_ZN14CMenuPrincipal11OnMenuEventEi+0x46>
	case MENU_PRINCIPAL::MENU_CALIBRAR:
		ManejadorPantallas.MuestraCPantallaCalibracion();
 800561e:	4804      	ldr	r0, [pc, #16]	@ (8005630 <_ZN14CMenuPrincipal11OnMenuEventEi+0x50>)
 8005620:	f7fd ffc5 	bl	80035ae <_ZN19CManejadorPantallas27MuestraCPantallaCalibracionEv>
		break;
 8005624:	bf00      	nop
	}

}
 8005626:	bf00      	nop
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	20000240 	.word	0x20000240

08005634 <_ZThn172_N14CMenuPrincipal11OnMenuEventEi>:
	virtual void OnMenuEvent(int identificador);
 8005634:	f1a0 00ac 	sub.w	r0, r0, #172	@ 0xac
 8005638:	f7ff bfd2 	b.w	80055e0 <_ZN14CMenuPrincipal11OnMenuEventEi>

0800563c <_ZN14CMenuPrincipal21OnBotonTresClickEventEv>:

void CMenuPrincipal::OnBotonTresClickEvent()
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(3);
 8005644:	2103      	movs	r1, #3
 8005646:	4803      	ldr	r0, [pc, #12]	@ (8005654 <_ZN14CMenuPrincipal21OnBotonTresClickEventEv+0x18>)
 8005648:	f7fd ff8d 	bl	8003566 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 800564c:	bf00      	nop
 800564e:	3708      	adds	r7, #8
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	20000240 	.word	0x20000240

08005658 <_ZThn48_N14CMenuPrincipal21OnBotonTresClickEventEv>:

	virtual void OnBotonUnoClickEvent();
	virtual void OnBotonDosClickEvent();
	virtual void OnBotonTresClickEvent();
 8005658:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 800565c:	f7ff bfee 	b.w	800563c <_ZN14CMenuPrincipal21OnBotonTresClickEventEv>

08005660 <_ZN14CMenuPrincipal20OnBotonUnoClickEventEv>:
void CMenuPrincipal::OnBotonUnoClickEvent()
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(1);
 8005668:	2101      	movs	r1, #1
 800566a:	4803      	ldr	r0, [pc, #12]	@ (8005678 <_ZN14CMenuPrincipal20OnBotonUnoClickEventEv+0x18>)
 800566c:	f7fd ff7b 	bl	8003566 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 8005670:	bf00      	nop
 8005672:	3708      	adds	r7, #8
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	20000240 	.word	0x20000240

0800567c <_ZThn48_N14CMenuPrincipal20OnBotonUnoClickEventEv>:
	virtual void OnBotonUnoClickEvent();
 800567c:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8005680:	f7ff bfee 	b.w	8005660 <_ZN14CMenuPrincipal20OnBotonUnoClickEventEv>

08005684 <_ZN14CMenuPrincipal20OnBotonDosClickEventEv>:
void CMenuPrincipal::OnBotonDosClickEvent()
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
	ManejadorPantallas.MuestraPantallaMemoria(2);
 800568c:	2102      	movs	r1, #2
 800568e:	4803      	ldr	r0, [pc, #12]	@ (800569c <_ZN14CMenuPrincipal20OnBotonDosClickEventEv+0x18>)
 8005690:	f7fd ff69 	bl	8003566 <_ZN19CManejadorPantallas22MuestraPantallaMemoriaEi>
}
 8005694:	bf00      	nop
 8005696:	3708      	adds	r7, #8
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	20000240 	.word	0x20000240

080056a0 <_ZThn48_N14CMenuPrincipal20OnBotonDosClickEventEv>:
	virtual void OnBotonDosClickEvent();
 80056a0:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80056a4:	f7ff bfee 	b.w	8005684 <_ZN14CMenuPrincipal20OnBotonDosClickEventEv>

080056a8 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt>:
}

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1,
		uint16_t Y1, uint16_t Colour)
{
 80056a8:	b590      	push	{r4, r7, lr}
 80056aa:	b087      	sub	sp, #28
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	4604      	mov	r4, r0
 80056b0:	4608      	mov	r0, r1
 80056b2:	4611      	mov	r1, r2
 80056b4:	461a      	mov	r2, r3
 80056b6:	4623      	mov	r3, r4
 80056b8:	80fb      	strh	r3, [r7, #6]
 80056ba:	4603      	mov	r3, r0
 80056bc:	80bb      	strh	r3, [r7, #4]
 80056be:	460b      	mov	r3, r1
 80056c0:	807b      	strh	r3, [r7, #2]
 80056c2:	4613      	mov	r3, r2
 80056c4:	803b      	strh	r3, [r7, #0]
	uint16_t X_length = 0;
 80056c6:	2300      	movs	r3, #0
 80056c8:	82fb      	strh	r3, [r7, #22]
	uint16_t Y_length = 0;
 80056ca:	2300      	movs	r3, #0
 80056cc:	82bb      	strh	r3, [r7, #20]
	uint8_t Negative_X = 0;
 80056ce:	2300      	movs	r3, #0
 80056d0:	74fb      	strb	r3, [r7, #19]
	uint8_t Negative_Y = 0;
 80056d2:	2300      	movs	r3, #0
 80056d4:	74bb      	strb	r3, [r7, #18]
	float Calc_Negative = 0;
 80056d6:	f04f 0300 	mov.w	r3, #0
 80056da:	60fb      	str	r3, [r7, #12]

	Calc_Negative = X1 - X0;
 80056dc:	887a      	ldrh	r2, [r7, #2]
 80056de:	88fb      	ldrh	r3, [r7, #6]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	ee07 3a90 	vmov	s15, r3
 80056e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056ea:	edc7 7a03 	vstr	s15, [r7, #12]
	if (Calc_Negative < 0)
 80056ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80056f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80056f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056fa:	d501      	bpl.n	8005700 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x58>
		Negative_X = 1;
 80056fc:	2301      	movs	r3, #1
 80056fe:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8005700:	f04f 0300 	mov.w	r3, #0
 8005704:	60fb      	str	r3, [r7, #12]

	Calc_Negative = Y1 - Y0;
 8005706:	883a      	ldrh	r2, [r7, #0]
 8005708:	88bb      	ldrh	r3, [r7, #4]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	ee07 3a90 	vmov	s15, r3
 8005710:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005714:	edc7 7a03 	vstr	s15, [r7, #12]
	if (Calc_Negative < 0)
 8005718:	edd7 7a03 	vldr	s15, [r7, #12]
 800571c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005724:	d501      	bpl.n	800572a <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x82>
		Negative_Y = 1;
 8005726:	2301      	movs	r3, #1
 8005728:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if (!Negative_X)
 800572a:	7cfb      	ldrb	r3, [r7, #19]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d104      	bne.n	800573a <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x92>
	{
		X_length = X1 - X0;
 8005730:	887a      	ldrh	r2, [r7, #2]
 8005732:	88fb      	ldrh	r3, [r7, #6]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	82fb      	strh	r3, [r7, #22]
 8005738:	e003      	b.n	8005742 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x9a>
	}
	else
	{
		X_length = X0 - X1;
 800573a:	88fa      	ldrh	r2, [r7, #6]
 800573c:	887b      	ldrh	r3, [r7, #2]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 8005742:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005744:	8afa      	ldrh	r2, [r7, #22]
 8005746:	88b9      	ldrh	r1, [r7, #4]
 8005748:	88f8      	ldrh	r0, [r7, #6]
 800574a:	f000 fd73 	bl	8006234 <_Z28ILI9341_Draw_Horizontal_Linetttt>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 800574e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005750:	8afa      	ldrh	r2, [r7, #22]
 8005752:	8839      	ldrh	r1, [r7, #0]
 8005754:	88f8      	ldrh	r0, [r7, #6]
 8005756:	f000 fd6d 	bl	8006234 <_Z28ILI9341_Draw_Horizontal_Linetttt>

	//DRAW VERTICAL!
	if (!Negative_Y)
 800575a:	7cbb      	ldrb	r3, [r7, #18]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d104      	bne.n	800576a <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xc2>
	{
		Y_length = Y1 - Y0;
 8005760:	883a      	ldrh	r2, [r7, #0]
 8005762:	88bb      	ldrh	r3, [r7, #4]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	82bb      	strh	r3, [r7, #20]
 8005768:	e003      	b.n	8005772 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xca>
	}
	else
	{
		Y_length = Y0 - Y1;
 800576a:	88ba      	ldrh	r2, [r7, #4]
 800576c:	883b      	ldrh	r3, [r7, #0]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	82bb      	strh	r3, [r7, #20]
	}
	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 8005772:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005774:	8aba      	ldrh	r2, [r7, #20]
 8005776:	88b9      	ldrh	r1, [r7, #4]
 8005778:	88f8      	ldrh	r0, [r7, #6]
 800577a:	f000 fda9 	bl	80062d0 <_Z26ILI9341_Draw_Vertical_Linetttt>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 800577e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005780:	8aba      	ldrh	r2, [r7, #20]
 8005782:	88b9      	ldrh	r1, [r7, #4]
 8005784:	8878      	ldrh	r0, [r7, #2]
 8005786:	f000 fda3 	bl	80062d0 <_Z26ILI9341_Draw_Vertical_Linetttt>

	if ((X_length > 0) || (Y_length > 0))
 800578a:	8afb      	ldrh	r3, [r7, #22]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d102      	bne.n	8005796 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xee>
 8005790:	8abb      	ldrh	r3, [r7, #20]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d005      	beq.n	80057a2 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xfa>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 8005796:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005798:	8839      	ldrh	r1, [r7, #0]
 800579a:	887b      	ldrh	r3, [r7, #2]
 800579c:	4618      	mov	r0, r3
 800579e:	f000 fc13 	bl	8005fc8 <_Z18ILI9341_Draw_Pixelttt>
	}

}
 80057a2:	bf00      	nop
 80057a4:	371c      	adds	r7, #28
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd90      	pop	{r4, r7, pc}

080057aa <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt>:

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1,
		uint16_t Y1, uint16_t Colour)
{
 80057aa:	b590      	push	{r4, r7, lr}
 80057ac:	b089      	sub	sp, #36	@ 0x24
 80057ae:	af02      	add	r7, sp, #8
 80057b0:	4604      	mov	r4, r0
 80057b2:	4608      	mov	r0, r1
 80057b4:	4611      	mov	r1, r2
 80057b6:	461a      	mov	r2, r3
 80057b8:	4623      	mov	r3, r4
 80057ba:	80fb      	strh	r3, [r7, #6]
 80057bc:	4603      	mov	r3, r0
 80057be:	80bb      	strh	r3, [r7, #4]
 80057c0:	460b      	mov	r3, r1
 80057c2:	807b      	strh	r3, [r7, #2]
 80057c4:	4613      	mov	r3, r2
 80057c6:	803b      	strh	r3, [r7, #0]
	uint16_t X_length = 0;
 80057c8:	2300      	movs	r3, #0
 80057ca:	82fb      	strh	r3, [r7, #22]
	uint16_t Y_length = 0;
 80057cc:	2300      	movs	r3, #0
 80057ce:	82bb      	strh	r3, [r7, #20]
	uint8_t Negative_X = 0;
 80057d0:	2300      	movs	r3, #0
 80057d2:	74fb      	strb	r3, [r7, #19]
	uint8_t Negative_Y = 0;
 80057d4:	2300      	movs	r3, #0
 80057d6:	74bb      	strb	r3, [r7, #18]
	int32_t Calc_Negative = 0;
 80057d8:	2300      	movs	r3, #0
 80057da:	60bb      	str	r3, [r7, #8]

	uint16_t X0_true = 0;
 80057dc:	2300      	movs	r3, #0
 80057de:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 80057e0:	2300      	movs	r3, #0
 80057e2:	81fb      	strh	r3, [r7, #14]

	Calc_Negative = X1 - X0;
 80057e4:	887a      	ldrh	r2, [r7, #2]
 80057e6:	88fb      	ldrh	r3, [r7, #6]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	60bb      	str	r3, [r7, #8]
	if (Calc_Negative < 0)
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	da01      	bge.n	80057f6 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x4c>
		Negative_X = 1;
 80057f2:	2301      	movs	r3, #1
 80057f4:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 80057f6:	2300      	movs	r3, #0
 80057f8:	60bb      	str	r3, [r7, #8]

	Calc_Negative = Y1 - Y0;
 80057fa:	883a      	ldrh	r2, [r7, #0]
 80057fc:	88bb      	ldrh	r3, [r7, #4]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	60bb      	str	r3, [r7, #8]
	if (Calc_Negative < 0)
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	2b00      	cmp	r3, #0
 8005806:	da01      	bge.n	800580c <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x62>
		Negative_Y = 1;
 8005808:	2301      	movs	r3, #1
 800580a:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if (!Negative_X)
 800580c:	7cfb      	ldrb	r3, [r7, #19]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d106      	bne.n	8005820 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x76>
	{
		X_length = X1 - X0;
 8005812:	887a      	ldrh	r2, [r7, #2]
 8005814:	88fb      	ldrh	r3, [r7, #6]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 800581a:	88fb      	ldrh	r3, [r7, #6]
 800581c:	823b      	strh	r3, [r7, #16]
 800581e:	e005      	b.n	800582c <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8005820:	88fa      	ldrh	r2, [r7, #6]
 8005822:	887b      	ldrh	r3, [r7, #2]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8005828:	887b      	ldrh	r3, [r7, #2]
 800582a:	823b      	strh	r3, [r7, #16]
	}

	//DRAW VERTICAL!
	if (!Negative_Y)
 800582c:	7cbb      	ldrb	r3, [r7, #18]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d106      	bne.n	8005840 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x96>
	{
		Y_length = Y1 - Y0;
 8005832:	883a      	ldrh	r2, [r7, #0]
 8005834:	88bb      	ldrh	r3, [r7, #4]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;
 800583a:	88bb      	ldrh	r3, [r7, #4]
 800583c:	81fb      	strh	r3, [r7, #14]
 800583e:	e005      	b.n	800584c <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 8005840:	88ba      	ldrh	r2, [r7, #4]
 8005842:	883b      	ldrh	r3, [r7, #0]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;
 8005848:	883b      	ldrh	r3, [r7, #0]
 800584a:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);
 800584c:	8abc      	ldrh	r4, [r7, #20]
 800584e:	8afa      	ldrh	r2, [r7, #22]
 8005850:	89f9      	ldrh	r1, [r7, #14]
 8005852:	8a38      	ldrh	r0, [r7, #16]
 8005854:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005856:	9300      	str	r3, [sp, #0]
 8005858:	4623      	mov	r3, r4
 800585a:	f000 fc81 	bl	8006160 <_Z22ILI9341_Draw_Rectanglettttt>
}
 800585e:	bf00      	nop
 8005860:	371c      	adds	r7, #28
 8005862:	46bd      	mov	sp, r7
 8005864:	bd90      	pop	{r4, r7, pc}
	...

08005868 <_Z17ILI9341_Draw_Charciittt>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, int X, int Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour)
{
 8005868:	b590      	push	{r4, r7, lr}
 800586a:	b08b      	sub	sp, #44	@ 0x2c
 800586c:	af02      	add	r7, sp, #8
 800586e:	60b9      	str	r1, [r7, #8]
 8005870:	607a      	str	r2, [r7, #4]
 8005872:	461a      	mov	r2, r3
 8005874:	4603      	mov	r3, r0
 8005876:	73fb      	strb	r3, [r7, #15]
 8005878:	4613      	mov	r3, r2
 800587a:	81bb      	strh	r3, [r7, #12]
	uint8_t function_char;
	uint8_t i, j;

	function_char = Character;
 800587c:	7bfb      	ldrb	r3, [r7, #15]
 800587e:	77fb      	strb	r3, [r7, #31]

	if (function_char < ' ')
 8005880:	7ffb      	ldrb	r3, [r7, #31]
 8005882:	2b1f      	cmp	r3, #31
 8005884:	d802      	bhi.n	800588c <_Z17ILI9341_Draw_Charciittt+0x24>
	{
		Character = 0;
 8005886:	2300      	movs	r3, #0
 8005888:	73fb      	strb	r3, [r7, #15]
 800588a:	e002      	b.n	8005892 <_Z17ILI9341_Draw_Charciittt+0x2a>
	}
	else
	{
		function_char -= 32;
 800588c:	7ffb      	ldrb	r3, [r7, #31]
 800588e:	3b20      	subs	r3, #32
 8005890:	77fb      	strb	r3, [r7, #31]
	}

	char temp[CHAR_WIDTH];
	for (uint8_t k = 0; k < CHAR_WIDTH; k++)
 8005892:	2300      	movs	r3, #0
 8005894:	773b      	strb	r3, [r7, #28]
 8005896:	e012      	b.n	80058be <_Z17ILI9341_Draw_Charciittt+0x56>
	{
		temp[k] = font[function_char][k];
 8005898:	7ffa      	ldrb	r2, [r7, #31]
 800589a:	7f38      	ldrb	r0, [r7, #28]
 800589c:	7f39      	ldrb	r1, [r7, #28]
 800589e:	4c3c      	ldr	r4, [pc, #240]	@ (8005990 <_Z17ILI9341_Draw_Charciittt+0x128>)
 80058a0:	4613      	mov	r3, r2
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	4413      	add	r3, r2
 80058a6:	005b      	lsls	r3, r3, #1
 80058a8:	4423      	add	r3, r4
 80058aa:	4403      	add	r3, r0
 80058ac:	781a      	ldrb	r2, [r3, #0]
 80058ae:	f101 0320 	add.w	r3, r1, #32
 80058b2:	443b      	add	r3, r7
 80058b4:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t k = 0; k < CHAR_WIDTH; k++)
 80058b8:	7f3b      	ldrb	r3, [r7, #28]
 80058ba:	3301      	adds	r3, #1
 80058bc:	773b      	strb	r3, [r7, #28]
 80058be:	7f3b      	ldrb	r3, [r7, #28]
 80058c0:	2b05      	cmp	r3, #5
 80058c2:	d9e9      	bls.n	8005898 <_Z17ILI9341_Draw_Charciittt+0x30>
	}

	// Draw pixels
	ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH * Size, CHAR_HEIGHT * Size,
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	b298      	uxth	r0, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	b299      	uxth	r1, r3
 80058cc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80058ce:	461a      	mov	r2, r3
 80058d0:	0052      	lsls	r2, r2, #1
 80058d2:	4413      	add	r3, r2
 80058d4:	005b      	lsls	r3, r3, #1
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80058da:	00db      	lsls	r3, r3, #3
 80058dc:	b29c      	uxth	r4, r3
 80058de:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	4623      	mov	r3, r4
 80058e4:	f000 fc3c 	bl	8006160 <_Z22ILI9341_Draw_Rectanglettttt>
			Background_Colour);
	for (j = 0; j < CHAR_WIDTH; j++)
 80058e8:	2300      	movs	r3, #0
 80058ea:	777b      	strb	r3, [r7, #29]
 80058ec:	e047      	b.n	800597e <_Z17ILI9341_Draw_Charciittt+0x116>
	{
		for (i = 0; i < CHAR_HEIGHT; i++)
 80058ee:	2300      	movs	r3, #0
 80058f0:	77bb      	strb	r3, [r7, #30]
 80058f2:	e03e      	b.n	8005972 <_Z17ILI9341_Draw_Charciittt+0x10a>
		{
			if (temp[j] & (1 << i))
 80058f4:	7f7b      	ldrb	r3, [r7, #29]
 80058f6:	3320      	adds	r3, #32
 80058f8:	443b      	add	r3, r7
 80058fa:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80058fe:	461a      	mov	r2, r3
 8005900:	7fbb      	ldrb	r3, [r7, #30]
 8005902:	fa42 f303 	asr.w	r3, r2, r3
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d02e      	beq.n	800596c <_Z17ILI9341_Draw_Charciittt+0x104>
			{
				if (Size == 1)
 800590e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005910:	2b01      	cmp	r3, #1
 8005912:	d110      	bne.n	8005936 <_Z17ILI9341_Draw_Charciittt+0xce>
				{
					ILI9341_Draw_Pixel(X + j, Y + i, Colour);
 8005914:	7f7b      	ldrb	r3, [r7, #29]
 8005916:	b29a      	uxth	r2, r3
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	b29b      	uxth	r3, r3
 800591c:	4413      	add	r3, r2
 800591e:	b298      	uxth	r0, r3
 8005920:	7fbb      	ldrb	r3, [r7, #30]
 8005922:	b29a      	uxth	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	b29b      	uxth	r3, r3
 8005928:	4413      	add	r3, r2
 800592a:	b29b      	uxth	r3, r3
 800592c:	89ba      	ldrh	r2, [r7, #12]
 800592e:	4619      	mov	r1, r3
 8005930:	f000 fb4a 	bl	8005fc8 <_Z18ILI9341_Draw_Pixelttt>
 8005934:	e01a      	b.n	800596c <_Z17ILI9341_Draw_Charciittt+0x104>
				}
				else
				{
					ILI9341_Draw_Rectangle(X + (j * Size), Y + (i * Size), Size,
 8005936:	7f7b      	ldrb	r3, [r7, #29]
 8005938:	b29b      	uxth	r3, r3
 800593a:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800593c:	fb12 f303 	smulbb	r3, r2, r3
 8005940:	b29a      	uxth	r2, r3
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	b29b      	uxth	r3, r3
 8005946:	4413      	add	r3, r2
 8005948:	b298      	uxth	r0, r3
 800594a:	7fbb      	ldrb	r3, [r7, #30]
 800594c:	b29b      	uxth	r3, r3
 800594e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8005950:	fb12 f303 	smulbb	r3, r2, r3
 8005954:	b29a      	uxth	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	b29b      	uxth	r3, r3
 800595a:	4413      	add	r3, r2
 800595c:	b299      	uxth	r1, r3
 800595e:	8e3c      	ldrh	r4, [r7, #48]	@ 0x30
 8005960:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8005962:	89bb      	ldrh	r3, [r7, #12]
 8005964:	9300      	str	r3, [sp, #0]
 8005966:	4623      	mov	r3, r4
 8005968:	f000 fbfa 	bl	8006160 <_Z22ILI9341_Draw_Rectanglettttt>
		for (i = 0; i < CHAR_HEIGHT; i++)
 800596c:	7fbb      	ldrb	r3, [r7, #30]
 800596e:	3301      	adds	r3, #1
 8005970:	77bb      	strb	r3, [r7, #30]
 8005972:	7fbb      	ldrb	r3, [r7, #30]
 8005974:	2b07      	cmp	r3, #7
 8005976:	d9bd      	bls.n	80058f4 <_Z17ILI9341_Draw_Charciittt+0x8c>
	for (j = 0; j < CHAR_WIDTH; j++)
 8005978:	7f7b      	ldrb	r3, [r7, #29]
 800597a:	3301      	adds	r3, #1
 800597c:	777b      	strb	r3, [r7, #29]
 800597e:	7f7b      	ldrb	r3, [r7, #29]
 8005980:	2b05      	cmp	r3, #5
 8005982:	d9b4      	bls.n	80058ee <_Z17ILI9341_Draw_Charciittt+0x86>
							Size, Colour);
				}
			}
		}
	}
}
 8005984:	bf00      	nop
 8005986:	bf00      	nop
 8005988:	3724      	adds	r7, #36	@ 0x24
 800598a:	46bd      	mov	sp, r7
 800598c:	bd90      	pop	{r4, r7, pc}
 800598e:	bf00      	nop
 8005990:	08010020 	.word	0x08010020

08005994 <_Z17ILI9341_Draw_TextPKciittt>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char *Text, int X, int Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af02      	add	r7, sp, #8
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
 80059a0:	807b      	strh	r3, [r7, #2]
	while (*Text)
 80059a2:	e016      	b.n	80059d2 <_Z17ILI9341_Draw_TextPKciittt+0x3e>
	{
		ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	1c5a      	adds	r2, r3, #1
 80059a8:	60fa      	str	r2, [r7, #12]
 80059aa:	7818      	ldrb	r0, [r3, #0]
 80059ac:	887a      	ldrh	r2, [r7, #2]
 80059ae:	8bbb      	ldrh	r3, [r7, #28]
 80059b0:	9301      	str	r3, [sp, #4]
 80059b2:	8b3b      	ldrh	r3, [r7, #24]
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	4613      	mov	r3, r2
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	68b9      	ldr	r1, [r7, #8]
 80059bc:	f7ff ff54 	bl	8005868 <_Z17ILI9341_Draw_Charciittt>
		X += CHAR_WIDTH * Size;
 80059c0:	8b3a      	ldrh	r2, [r7, #24]
 80059c2:	4613      	mov	r3, r2
 80059c4:	005b      	lsls	r3, r3, #1
 80059c6:	4413      	add	r3, r2
 80059c8:	005b      	lsls	r3, r3, #1
 80059ca:	461a      	mov	r2, r3
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	4413      	add	r3, r2
 80059d0:	60bb      	str	r3, [r7, #8]
	while (*Text)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1e4      	bne.n	80059a4 <_Z17ILI9341_Draw_TextPKciittt+0x10>
	}
}
 80059da:	bf00      	nop
 80059dc:	bf00      	nop
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <_Z16ILI9341_SPI_Initv>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	af00      	add	r7, sp, #0
	SPI1_Init();													//SPI INIT
 80059e8:	f002 faba 	bl	8007f60 <SPI1_Init>
	MX_GPIO_Init();													//GPIO INIT
 80059ec:	f001 fe52 	bl	8007694 <MX_GPIO_Init>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 80059f0:	2200      	movs	r2, #0
 80059f2:	2101      	movs	r1, #1
 80059f4:	4802      	ldr	r0, [pc, #8]	@ (8005a00 <_Z16ILI9341_SPI_Initv+0x1c>)
 80059f6:	f003 fc9d 	bl	8009334 <HAL_GPIO_WritePin>
}
 80059fa:	bf00      	nop
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	40020400 	.word	0x40020400

08005a04 <_Z16ILI9341_SPI_Sendh>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8005a0e:	1df9      	adds	r1, r7, #7
 8005a10:	2301      	movs	r3, #1
 8005a12:	2201      	movs	r2, #1
 8005a14:	4803      	ldr	r0, [pc, #12]	@ (8005a24 <_Z16ILI9341_SPI_Sendh+0x20>)
 8005a16:	f005 f9c4 	bl	800ada2 <HAL_SPI_Transmit>
}
 8005a1a:	bf00      	nop
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	20000440 	.word	0x20000440

08005a28 <_Z21ILI9341_Write_Commandh>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	4603      	mov	r3, r0
 8005a30:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005a32:	2200      	movs	r2, #0
 8005a34:	2101      	movs	r1, #1
 8005a36:	480a      	ldr	r0, [pc, #40]	@ (8005a60 <_Z21ILI9341_Write_Commandh+0x38>)
 8005a38:	f003 fc7c 	bl	8009334 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	2102      	movs	r1, #2
 8005a40:	4807      	ldr	r0, [pc, #28]	@ (8005a60 <_Z21ILI9341_Write_Commandh+0x38>)
 8005a42:	f003 fc77 	bl	8009334 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Command);
 8005a46:	79fb      	ldrb	r3, [r7, #7]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7ff ffdb 	bl	8005a04 <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005a4e:	2201      	movs	r2, #1
 8005a50:	2101      	movs	r1, #1
 8005a52:	4803      	ldr	r0, [pc, #12]	@ (8005a60 <_Z21ILI9341_Write_Commandh+0x38>)
 8005a54:	f003 fc6e 	bl	8009334 <HAL_GPIO_WritePin>
}
 8005a58:	bf00      	nop
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	40020400 	.word	0x40020400

08005a64 <_Z18ILI9341_Write_Datah>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8005a6e:	2201      	movs	r2, #1
 8005a70:	2102      	movs	r1, #2
 8005a72:	480a      	ldr	r0, [pc, #40]	@ (8005a9c <_Z18ILI9341_Write_Datah+0x38>)
 8005a74:	f003 fc5e 	bl	8009334 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005a78:	2200      	movs	r2, #0
 8005a7a:	2101      	movs	r1, #1
 8005a7c:	4807      	ldr	r0, [pc, #28]	@ (8005a9c <_Z18ILI9341_Write_Datah+0x38>)
 8005a7e:	f003 fc59 	bl	8009334 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Data);
 8005a82:	79fb      	ldrb	r3, [r7, #7]
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7ff ffbd 	bl	8005a04 <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	2101      	movs	r1, #1
 8005a8e:	4803      	ldr	r0, [pc, #12]	@ (8005a9c <_Z18ILI9341_Write_Datah+0x38>)
 8005a90:	f003 fc50 	bl	8009334 <HAL_GPIO_WritePin>
}
 8005a94:	bf00      	nop
 8005a96:	3708      	adds	r7, #8
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	40020400 	.word	0x40020400

08005aa0 <_Z19ILI9341_Set_Addresstttt>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8005aa0:	b590      	push	{r4, r7, lr}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	4604      	mov	r4, r0
 8005aa8:	4608      	mov	r0, r1
 8005aaa:	4611      	mov	r1, r2
 8005aac:	461a      	mov	r2, r3
 8005aae:	4623      	mov	r3, r4
 8005ab0:	80fb      	strh	r3, [r7, #6]
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	80bb      	strh	r3, [r7, #4]
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	807b      	strh	r3, [r7, #2]
 8005aba:	4613      	mov	r3, r2
 8005abc:	803b      	strh	r3, [r7, #0]
	ILI9341_Write_Command(0x2A);
 8005abe:	202a      	movs	r0, #42	@ 0x2a
 8005ac0:	f7ff ffb2 	bl	8005a28 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(X1 >> 8);
 8005ac4:	88fb      	ldrh	r3, [r7, #6]
 8005ac6:	0a1b      	lsrs	r3, r3, #8
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7ff ffc9 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(X1);
 8005ad2:	88fb      	ldrh	r3, [r7, #6]
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7ff ffc4 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(X2 >> 8);
 8005adc:	887b      	ldrh	r3, [r7, #2]
 8005ade:	0a1b      	lsrs	r3, r3, #8
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7ff ffbd 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(X2);
 8005aea:	887b      	ldrh	r3, [r7, #2]
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7ff ffb8 	bl	8005a64 <_Z18ILI9341_Write_Datah>

	ILI9341_Write_Command(0x2B);
 8005af4:	202b      	movs	r0, #43	@ 0x2b
 8005af6:	f7ff ff97 	bl	8005a28 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(Y1 >> 8);
 8005afa:	88bb      	ldrh	r3, [r7, #4]
 8005afc:	0a1b      	lsrs	r3, r3, #8
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7ff ffae 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(Y1);
 8005b08:	88bb      	ldrh	r3, [r7, #4]
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7ff ffa9 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(Y2 >> 8);
 8005b12:	883b      	ldrh	r3, [r7, #0]
 8005b14:	0a1b      	lsrs	r3, r3, #8
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7ff ffa2 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(Y2);
 8005b20:	883b      	ldrh	r3, [r7, #0]
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7ff ff9d 	bl	8005a64 <_Z18ILI9341_Write_Datah>

	ILI9341_Write_Command(0x2C);
 8005b2a:	202c      	movs	r0, #44	@ 0x2c
 8005b2c:	f7ff ff7c 	bl	8005a28 <_Z21ILI9341_Write_Commandh>
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd90      	pop	{r4, r7, pc}

08005b38 <_Z13ILI9341_Resetv>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	2120      	movs	r1, #32
 8005b40:	480a      	ldr	r0, [pc, #40]	@ (8005b6c <_Z13ILI9341_Resetv+0x34>)
 8005b42:	f003 fbf7 	bl	8009334 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8005b46:	20c8      	movs	r0, #200	@ 0xc8
 8005b48:	f002 fdee 	bl	8008728 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	2101      	movs	r1, #1
 8005b50:	4806      	ldr	r0, [pc, #24]	@ (8005b6c <_Z13ILI9341_Resetv+0x34>)
 8005b52:	f003 fbef 	bl	8009334 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8005b56:	20c8      	movs	r0, #200	@ 0xc8
 8005b58:	f002 fde6 	bl	8008728 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	2120      	movs	r1, #32
 8005b60:	4802      	ldr	r0, [pc, #8]	@ (8005b6c <_Z13ILI9341_Resetv+0x34>)
 8005b62:	f003 fbe7 	bl	8009334 <HAL_GPIO_WritePin>
}
 8005b66:	bf00      	nop
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	40020400 	.word	0x40020400

08005b70 <_Z20ILI9341_Set_Rotationh>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	4603      	mov	r3, r0
 8005b78:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = Rotation;
 8005b7a:	79fb      	ldrb	r3, [r7, #7]
 8005b7c:	73fb      	strb	r3, [r7, #15]

	ILI9341_Write_Command(0x36);
 8005b7e:	2036      	movs	r0, #54	@ 0x36
 8005b80:	f7ff ff52 	bl	8005a28 <_Z21ILI9341_Write_Commandh>
	HAL_Delay(1);
 8005b84:	2001      	movs	r0, #1
 8005b86:	f002 fdcf 	bl	8008728 <HAL_Delay>

	switch (screen_rotation)
 8005b8a:	7bfb      	ldrb	r3, [r7, #15]
 8005b8c:	2b03      	cmp	r3, #3
 8005b8e:	d837      	bhi.n	8005c00 <_Z20ILI9341_Set_Rotationh+0x90>
 8005b90:	a201      	add	r2, pc, #4	@ (adr r2, 8005b98 <_Z20ILI9341_Set_Rotationh+0x28>)
 8005b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b96:	bf00      	nop
 8005b98:	08005ba9 	.word	0x08005ba9
 8005b9c:	08005bbf 	.word	0x08005bbf
 8005ba0:	08005bd5 	.word	0x08005bd5
 8005ba4:	08005beb 	.word	0x08005beb
	{
	case SCREEN_VERTICAL_1:
		ILI9341_Write_Data(0x40 | 0x08);
 8005ba8:	2048      	movs	r0, #72	@ 0x48
 8005baa:	f7ff ff5b 	bl	8005a64 <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 240;
 8005bae:	4b17      	ldr	r3, [pc, #92]	@ (8005c0c <_Z20ILI9341_Set_Rotationh+0x9c>)
 8005bb0:	22f0      	movs	r2, #240	@ 0xf0
 8005bb2:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8005bb4:	4b16      	ldr	r3, [pc, #88]	@ (8005c10 <_Z20ILI9341_Set_Rotationh+0xa0>)
 8005bb6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8005bba:	801a      	strh	r2, [r3, #0]
		break;
 8005bbc:	e021      	b.n	8005c02 <_Z20ILI9341_Set_Rotationh+0x92>
	case SCREEN_HORIZONTAL_1:
		ILI9341_Write_Data(0x20 | 0x08);
 8005bbe:	2028      	movs	r0, #40	@ 0x28
 8005bc0:	f7ff ff50 	bl	8005a64 <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 320;
 8005bc4:	4b11      	ldr	r3, [pc, #68]	@ (8005c0c <_Z20ILI9341_Set_Rotationh+0x9c>)
 8005bc6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8005bca:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8005bcc:	4b10      	ldr	r3, [pc, #64]	@ (8005c10 <_Z20ILI9341_Set_Rotationh+0xa0>)
 8005bce:	22f0      	movs	r2, #240	@ 0xf0
 8005bd0:	801a      	strh	r2, [r3, #0]
		break;
 8005bd2:	e016      	b.n	8005c02 <_Z20ILI9341_Set_Rotationh+0x92>
	case SCREEN_VERTICAL_2:
		ILI9341_Write_Data(0x80 | 0x08);
 8005bd4:	2088      	movs	r0, #136	@ 0x88
 8005bd6:	f7ff ff45 	bl	8005a64 <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 240;
 8005bda:	4b0c      	ldr	r3, [pc, #48]	@ (8005c0c <_Z20ILI9341_Set_Rotationh+0x9c>)
 8005bdc:	22f0      	movs	r2, #240	@ 0xf0
 8005bde:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8005be0:	4b0b      	ldr	r3, [pc, #44]	@ (8005c10 <_Z20ILI9341_Set_Rotationh+0xa0>)
 8005be2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8005be6:	801a      	strh	r2, [r3, #0]
		break;
 8005be8:	e00b      	b.n	8005c02 <_Z20ILI9341_Set_Rotationh+0x92>
	case SCREEN_HORIZONTAL_2:
		ILI9341_Write_Data(0x40 | 0x80 | 0x20 | 0x08);
 8005bea:	20e8      	movs	r0, #232	@ 0xe8
 8005bec:	f7ff ff3a 	bl	8005a64 <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 320;
 8005bf0:	4b06      	ldr	r3, [pc, #24]	@ (8005c0c <_Z20ILI9341_Set_Rotationh+0x9c>)
 8005bf2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8005bf6:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8005bf8:	4b05      	ldr	r3, [pc, #20]	@ (8005c10 <_Z20ILI9341_Set_Rotationh+0xa0>)
 8005bfa:	22f0      	movs	r2, #240	@ 0xf0
 8005bfc:	801a      	strh	r2, [r3, #0]
		break;
 8005bfe:	e000      	b.n	8005c02 <_Z20ILI9341_Set_Rotationh+0x92>
	default:
		//EXIT IF SCREEN ROTATION NOT VALID!
		break;
 8005c00:	bf00      	nop
	}
}
 8005c02:	bf00      	nop
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	20000002 	.word	0x20000002
 8005c10:	20000000 	.word	0x20000000

08005c14 <_Z14ILI9341_Enablev>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8005c18:	2201      	movs	r2, #1
 8005c1a:	2120      	movs	r1, #32
 8005c1c:	4802      	ldr	r0, [pc, #8]	@ (8005c28 <_Z14ILI9341_Enablev+0x14>)
 8005c1e:	f003 fb89 	bl	8009334 <HAL_GPIO_WritePin>
}
 8005c22:	bf00      	nop
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	40020400 	.word	0x40020400

08005c2c <_Z12ILI9341_Initv>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	af00      	add	r7, sp, #0

	ILI9341_Enable();
 8005c30:	f7ff fff0 	bl	8005c14 <_Z14ILI9341_Enablev>
	ILI9341_SPI_Init();
 8005c34:	f7ff fed6 	bl	80059e4 <_Z16ILI9341_SPI_Initv>
	ILI9341_Reset();
 8005c38:	f7ff ff7e 	bl	8005b38 <_Z13ILI9341_Resetv>

//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 8005c3c:	2001      	movs	r0, #1
 8005c3e:	f7ff fef3 	bl	8005a28 <_Z21ILI9341_Write_Commandh>
	HAL_Delay(1000);
 8005c42:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005c46:	f002 fd6f 	bl	8008728 <HAL_Delay>

//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 8005c4a:	20cb      	movs	r0, #203	@ 0xcb
 8005c4c:	f7ff feec 	bl	8005a28 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x39);
 8005c50:	2039      	movs	r0, #57	@ 0x39
 8005c52:	f7ff ff07 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x2C);
 8005c56:	202c      	movs	r0, #44	@ 0x2c
 8005c58:	f7ff ff04 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 8005c5c:	2000      	movs	r0, #0
 8005c5e:	f7ff ff01 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x34);
 8005c62:	2034      	movs	r0, #52	@ 0x34
 8005c64:	f7ff fefe 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x02);
 8005c68:	2002      	movs	r0, #2
 8005c6a:	f7ff fefb 	bl	8005a64 <_Z18ILI9341_Write_Datah>

//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 8005c6e:	20cf      	movs	r0, #207	@ 0xcf
 8005c70:	f7ff feda 	bl	8005a28 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8005c74:	2000      	movs	r0, #0
 8005c76:	f7ff fef5 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0xC1);
 8005c7a:	20c1      	movs	r0, #193	@ 0xc1
 8005c7c:	f7ff fef2 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x30);
 8005c80:	2030      	movs	r0, #48	@ 0x30
 8005c82:	f7ff feef 	bl	8005a64 <_Z18ILI9341_Write_Datah>

//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 8005c86:	20e8      	movs	r0, #232	@ 0xe8
 8005c88:	f7ff fece 	bl	8005a28 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x85);
 8005c8c:	2085      	movs	r0, #133	@ 0x85
 8005c8e:	f7ff fee9 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 8005c92:	2000      	movs	r0, #0
 8005c94:	f7ff fee6 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x78);
 8005c98:	2078      	movs	r0, #120	@ 0x78
 8005c9a:	f7ff fee3 	bl	8005a64 <_Z18ILI9341_Write_Datah>

//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 8005c9e:	20ea      	movs	r0, #234	@ 0xea
 8005ca0:	f7ff fec2 	bl	8005a28 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	f7ff fedd 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 8005caa:	2000      	movs	r0, #0
 8005cac:	f7ff feda 	bl	8005a64 <_Z18ILI9341_Write_Datah>

//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 8005cb0:	20ed      	movs	r0, #237	@ 0xed
 8005cb2:	f7ff feb9 	bl	8005a28 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x64);
 8005cb6:	2064      	movs	r0, #100	@ 0x64
 8005cb8:	f7ff fed4 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x03);
 8005cbc:	2003      	movs	r0, #3
 8005cbe:	f7ff fed1 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x12);
 8005cc2:	2012      	movs	r0, #18
 8005cc4:	f7ff fece 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x81);
 8005cc8:	2081      	movs	r0, #129	@ 0x81
 8005cca:	f7ff fecb 	bl	8005a64 <_Z18ILI9341_Write_Datah>

//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 8005cce:	20f7      	movs	r0, #247	@ 0xf7
 8005cd0:	f7ff feaa 	bl	8005a28 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x20);
 8005cd4:	2020      	movs	r0, #32
 8005cd6:	f7ff fec5 	bl	8005a64 <_Z18ILI9341_Write_Datah>

//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 8005cda:	20c0      	movs	r0, #192	@ 0xc0
 8005cdc:	f7ff fea4 	bl	8005a28 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x23);
 8005ce0:	2023      	movs	r0, #35	@ 0x23
 8005ce2:	f7ff febf 	bl	8005a64 <_Z18ILI9341_Write_Datah>

//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 8005ce6:	20c1      	movs	r0, #193	@ 0xc1
 8005ce8:	f7ff fe9e 	bl	8005a28 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x10);
 8005cec:	2010      	movs	r0, #16
 8005cee:	f7ff feb9 	bl	8005a64 <_Z18ILI9341_Write_Datah>

//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 8005cf2:	20c5      	movs	r0, #197	@ 0xc5
 8005cf4:	f7ff fe98 	bl	8005a28 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x3E);
 8005cf8:	203e      	movs	r0, #62	@ 0x3e
 8005cfa:	f7ff feb3 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x28);
 8005cfe:	2028      	movs	r0, #40	@ 0x28
 8005d00:	f7ff feb0 	bl	8005a64 <_Z18ILI9341_Write_Datah>

//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 8005d04:	20c7      	movs	r0, #199	@ 0xc7
 8005d06:	f7ff fe8f 	bl	8005a28 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x86);
 8005d0a:	2086      	movs	r0, #134	@ 0x86
 8005d0c:	f7ff feaa 	bl	8005a64 <_Z18ILI9341_Write_Datah>

//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 8005d10:	2036      	movs	r0, #54	@ 0x36
 8005d12:	f7ff fe89 	bl	8005a28 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x48);
 8005d16:	2048      	movs	r0, #72	@ 0x48
 8005d18:	f7ff fea4 	bl	8005a64 <_Z18ILI9341_Write_Datah>

//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 8005d1c:	203a      	movs	r0, #58	@ 0x3a
 8005d1e:	f7ff fe83 	bl	8005a28 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x55);
 8005d22:	2055      	movs	r0, #85	@ 0x55
 8005d24:	f7ff fe9e 	bl	8005a64 <_Z18ILI9341_Write_Datah>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 8005d28:	20b1      	movs	r0, #177	@ 0xb1
 8005d2a:	f7ff fe7d 	bl	8005a28 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8005d2e:	2000      	movs	r0, #0
 8005d30:	f7ff fe98 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x18);
 8005d34:	2018      	movs	r0, #24
 8005d36:	f7ff fe95 	bl	8005a64 <_Z18ILI9341_Write_Datah>

//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 8005d3a:	20b6      	movs	r0, #182	@ 0xb6
 8005d3c:	f7ff fe74 	bl	8005a28 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x08);
 8005d40:	2008      	movs	r0, #8
 8005d42:	f7ff fe8f 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x82);
 8005d46:	2082      	movs	r0, #130	@ 0x82
 8005d48:	f7ff fe8c 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x27);
 8005d4c:	2027      	movs	r0, #39	@ 0x27
 8005d4e:	f7ff fe89 	bl	8005a64 <_Z18ILI9341_Write_Datah>

//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 8005d52:	20f2      	movs	r0, #242	@ 0xf2
 8005d54:	f7ff fe68 	bl	8005a28 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8005d58:	2000      	movs	r0, #0
 8005d5a:	f7ff fe83 	bl	8005a64 <_Z18ILI9341_Write_Datah>

//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 8005d5e:	2026      	movs	r0, #38	@ 0x26
 8005d60:	f7ff fe62 	bl	8005a28 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x01);
 8005d64:	2001      	movs	r0, #1
 8005d66:	f7ff fe7d 	bl	8005a64 <_Z18ILI9341_Write_Datah>

//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 8005d6a:	20e0      	movs	r0, #224	@ 0xe0
 8005d6c:	f7ff fe5c 	bl	8005a28 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x0F);
 8005d70:	200f      	movs	r0, #15
 8005d72:	f7ff fe77 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x31);
 8005d76:	2031      	movs	r0, #49	@ 0x31
 8005d78:	f7ff fe74 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x2B);
 8005d7c:	202b      	movs	r0, #43	@ 0x2b
 8005d7e:	f7ff fe71 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0C);
 8005d82:	200c      	movs	r0, #12
 8005d84:	f7ff fe6e 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0E);
 8005d88:	200e      	movs	r0, #14
 8005d8a:	f7ff fe6b 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x08);
 8005d8e:	2008      	movs	r0, #8
 8005d90:	f7ff fe68 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x4E);
 8005d94:	204e      	movs	r0, #78	@ 0x4e
 8005d96:	f7ff fe65 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0xF1);
 8005d9a:	20f1      	movs	r0, #241	@ 0xf1
 8005d9c:	f7ff fe62 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x37);
 8005da0:	2037      	movs	r0, #55	@ 0x37
 8005da2:	f7ff fe5f 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x07);
 8005da6:	2007      	movs	r0, #7
 8005da8:	f7ff fe5c 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x10);
 8005dac:	2010      	movs	r0, #16
 8005dae:	f7ff fe59 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x03);
 8005db2:	2003      	movs	r0, #3
 8005db4:	f7ff fe56 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0E);
 8005db8:	200e      	movs	r0, #14
 8005dba:	f7ff fe53 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x09);
 8005dbe:	2009      	movs	r0, #9
 8005dc0:	f7ff fe50 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 8005dc4:	2000      	movs	r0, #0
 8005dc6:	f7ff fe4d 	bl	8005a64 <_Z18ILI9341_Write_Datah>

//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 8005dca:	20e1      	movs	r0, #225	@ 0xe1
 8005dcc:	f7ff fe2c 	bl	8005a28 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	f7ff fe47 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0E);
 8005dd6:	200e      	movs	r0, #14
 8005dd8:	f7ff fe44 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x14);
 8005ddc:	2014      	movs	r0, #20
 8005dde:	f7ff fe41 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x03);
 8005de2:	2003      	movs	r0, #3
 8005de4:	f7ff fe3e 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x11);
 8005de8:	2011      	movs	r0, #17
 8005dea:	f7ff fe3b 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x07);
 8005dee:	2007      	movs	r0, #7
 8005df0:	f7ff fe38 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x31);
 8005df4:	2031      	movs	r0, #49	@ 0x31
 8005df6:	f7ff fe35 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0xC1);
 8005dfa:	20c1      	movs	r0, #193	@ 0xc1
 8005dfc:	f7ff fe32 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x48);
 8005e00:	2048      	movs	r0, #72	@ 0x48
 8005e02:	f7ff fe2f 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x08);
 8005e06:	2008      	movs	r0, #8
 8005e08:	f7ff fe2c 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0F);
 8005e0c:	200f      	movs	r0, #15
 8005e0e:	f7ff fe29 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0C);
 8005e12:	200c      	movs	r0, #12
 8005e14:	f7ff fe26 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x31);
 8005e18:	2031      	movs	r0, #49	@ 0x31
 8005e1a:	f7ff fe23 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x36);
 8005e1e:	2036      	movs	r0, #54	@ 0x36
 8005e20:	f7ff fe20 	bl	8005a64 <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0F);
 8005e24:	200f      	movs	r0, #15
 8005e26:	f7ff fe1d 	bl	8005a64 <_Z18ILI9341_Write_Datah>

//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 8005e2a:	2011      	movs	r0, #17
 8005e2c:	f7ff fdfc 	bl	8005a28 <_Z21ILI9341_Write_Commandh>
	HAL_Delay(120);
 8005e30:	2078      	movs	r0, #120	@ 0x78
 8005e32:	f002 fc79 	bl	8008728 <HAL_Delay>

//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 8005e36:	2029      	movs	r0, #41	@ 0x29
 8005e38:	f7ff fdf6 	bl	8005a28 <_Z21ILI9341_Write_Commandh>

//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	f7ff fe97 	bl	8005b70 <_Z20ILI9341_Set_Rotationh>
}
 8005e42:	bf00      	nop
 8005e44:	bd80      	pop	{r7, pc}
	...

08005e48 <_Z25ILI9341_Draw_Colour_Bursttm>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8005e48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e4c:	b08d      	sub	sp, #52	@ 0x34
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	4603      	mov	r3, r0
 8005e52:	6039      	str	r1, [r7, #0]
 8005e54:	80fb      	strh	r3, [r7, #6]
//REMAINDER!
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
			Remainder_from_block, 10);

	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
}
 8005e56:	466b      	mov	r3, sp
 8005e58:	461e      	mov	r6, r3
	uint32_t Buffer_Size = 0;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if ((Size * 2) < BURST_MAX_SIZE)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	005b      	lsls	r3, r3, #1
 8005e62:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005e66:	d202      	bcs.n	8005e6e <_Z25ILI9341_Draw_Colour_Bursttm+0x26>
		Buffer_Size = Size;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e6c:	e002      	b.n	8005e74 <_Z25ILI9341_Draw_Colour_Bursttm+0x2c>
		Buffer_Size = BURST_MAX_SIZE;
 8005e6e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8005e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8005e74:	2201      	movs	r2, #1
 8005e76:	2102      	movs	r1, #2
 8005e78:	483e      	ldr	r0, [pc, #248]	@ (8005f74 <_Z25ILI9341_Draw_Colour_Bursttm+0x12c>)
 8005e7a:	f003 fa5b 	bl	8009334 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005e7e:	2200      	movs	r2, #0
 8005e80:	2101      	movs	r1, #1
 8005e82:	483c      	ldr	r0, [pc, #240]	@ (8005f74 <_Z25ILI9341_Draw_Colour_Bursttm+0x12c>)
 8005e84:	f003 fa56 	bl	8009334 <HAL_GPIO_WritePin>
	unsigned char chifted = Colour >> 8;
 8005e88:	88fb      	ldrh	r3, [r7, #6]
 8005e8a:	0a1b      	lsrs	r3, r3, #8
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	unsigned char burst_buffer[Buffer_Size];
 8005e92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e94:	460b      	mov	r3, r1
 8005e96:	3b01      	subs	r3, #1
 8005e98:	61fb      	str	r3, [r7, #28]
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	4688      	mov	r8, r1
 8005e9e:	4699      	mov	r9, r3
 8005ea0:	f04f 0200 	mov.w	r2, #0
 8005ea4:	f04f 0300 	mov.w	r3, #0
 8005ea8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005eac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005eb0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	460c      	mov	r4, r1
 8005eb8:	461d      	mov	r5, r3
 8005eba:	f04f 0200 	mov.w	r2, #0
 8005ebe:	f04f 0300 	mov.w	r3, #0
 8005ec2:	00eb      	lsls	r3, r5, #3
 8005ec4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ec8:	00e2      	lsls	r2, r4, #3
 8005eca:	1dcb      	adds	r3, r1, #7
 8005ecc:	08db      	lsrs	r3, r3, #3
 8005ece:	00db      	lsls	r3, r3, #3
 8005ed0:	ebad 0d03 	sub.w	sp, sp, r3
 8005ed4:	466b      	mov	r3, sp
 8005ed6:	3300      	adds	r3, #0
 8005ed8:	61bb      	str	r3, [r7, #24]
	for (uint32_t j = 0; j < Buffer_Size; j += 2)
 8005eda:	2300      	movs	r3, #0
 8005edc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ede:	e00e      	b.n	8005efe <_Z25ILI9341_Draw_Colour_Bursttm+0xb6>
		burst_buffer[j] = chifted;
 8005ee0:	69ba      	ldr	r2, [r7, #24]
 8005ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8005eea:	701a      	strb	r2, [r3, #0]
		burst_buffer[j + 1] = Colour;
 8005eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eee:	3301      	adds	r3, #1
 8005ef0:	88fa      	ldrh	r2, [r7, #6]
 8005ef2:	b2d1      	uxtb	r1, r2
 8005ef4:	69ba      	ldr	r2, [r7, #24]
 8005ef6:	54d1      	strb	r1, [r2, r3]
	for (uint32_t j = 0; j < Buffer_Size; j += 2)
 8005ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005efa:	3302      	adds	r3, #2
 8005efc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005efe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d3ec      	bcc.n	8005ee0 <_Z25ILI9341_Draw_Colour_Bursttm+0x98>
	uint32_t Sending_Size = Size * 2;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	005b      	lsls	r3, r3, #1
 8005f0a:	617b      	str	r3, [r7, #20]
	uint32_t Sending_in_Block = Sending_Size / Buffer_Size;
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f14:	613b      	str	r3, [r7, #16]
	uint32_t Remainder_from_block = Sending_Size % Buffer_Size;
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f20:	fb01 f202 	mul.w	r2, r1, r2
 8005f24:	1a9b      	subs	r3, r3, r2
 8005f26:	60fb      	str	r3, [r7, #12]
	if (Sending_in_Block != 0)
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d010      	beq.n	8005f50 <_Z25ILI9341_Draw_Colour_Bursttm+0x108>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 8005f2e:	2300      	movs	r3, #0
 8005f30:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f32:	e009      	b.n	8005f48 <_Z25ILI9341_Draw_Colour_Bursttm+0x100>
			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
 8005f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	230a      	movs	r3, #10
 8005f3a:	69b9      	ldr	r1, [r7, #24]
 8005f3c:	480e      	ldr	r0, [pc, #56]	@ (8005f78 <_Z25ILI9341_Draw_Colour_Bursttm+0x130>)
 8005f3e:	f004 ff30 	bl	800ada2 <HAL_SPI_Transmit>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 8005f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f44:	3301      	adds	r3, #1
 8005f46:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d3f1      	bcc.n	8005f34 <_Z25ILI9341_Draw_Colour_Bursttm+0xec>
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	230a      	movs	r3, #10
 8005f56:	69b9      	ldr	r1, [r7, #24]
 8005f58:	4807      	ldr	r0, [pc, #28]	@ (8005f78 <_Z25ILI9341_Draw_Colour_Bursttm+0x130>)
 8005f5a:	f004 ff22 	bl	800ada2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005f5e:	2201      	movs	r2, #1
 8005f60:	2101      	movs	r1, #1
 8005f62:	4804      	ldr	r0, [pc, #16]	@ (8005f74 <_Z25ILI9341_Draw_Colour_Bursttm+0x12c>)
 8005f64:	f003 f9e6 	bl	8009334 <HAL_GPIO_WritePin>
 8005f68:	46b5      	mov	sp, r6
}
 8005f6a:	bf00      	nop
 8005f6c:	3734      	adds	r7, #52	@ 0x34
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f74:	40020400 	.word	0x40020400
 8005f78:	20000440 	.word	0x20000440

08005f7c <_Z19ILI9341_Fill_Screent>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	4603      	mov	r3, r0
 8005f84:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8005f86:	4b0e      	ldr	r3, [pc, #56]	@ (8005fc0 <_Z19ILI9341_Fill_Screent+0x44>)
 8005f88:	881b      	ldrh	r3, [r3, #0]
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8005fc4 <_Z19ILI9341_Fill_Screent+0x48>)
 8005f8e:	881b      	ldrh	r3, [r3, #0]
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	2100      	movs	r1, #0
 8005f94:	2000      	movs	r0, #0
 8005f96:	f7ff fd83 	bl	8005aa0 <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH * LCD_HEIGHT);
 8005f9a:	4b09      	ldr	r3, [pc, #36]	@ (8005fc0 <_Z19ILI9341_Fill_Screent+0x44>)
 8005f9c:	881b      	ldrh	r3, [r3, #0]
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	4b08      	ldr	r3, [pc, #32]	@ (8005fc4 <_Z19ILI9341_Fill_Screent+0x48>)
 8005fa4:	881b      	ldrh	r3, [r3, #0]
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	fb02 f303 	mul.w	r3, r2, r3
 8005fac:	461a      	mov	r2, r3
 8005fae:	88fb      	ldrh	r3, [r7, #6]
 8005fb0:	4611      	mov	r1, r2
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7ff ff48 	bl	8005e48 <_Z25ILI9341_Draw_Colour_Bursttm>
}
 8005fb8:	bf00      	nop
 8005fba:	3708      	adds	r7, #8
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	20000002 	.word	0x20000002
 8005fc4:	20000000 	.word	0x20000000

08005fc8 <_Z18ILI9341_Draw_Pixelttt>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X, uint16_t Y, uint16_t Colour)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	4603      	mov	r3, r0
 8005fd0:	80fb      	strh	r3, [r7, #6]
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	80bb      	strh	r3, [r7, #4]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	807b      	strh	r3, [r7, #2]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 8005fda:	4b5d      	ldr	r3, [pc, #372]	@ (8006150 <_Z18ILI9341_Draw_Pixelttt+0x188>)
 8005fdc:	881b      	ldrh	r3, [r3, #0]
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	88fa      	ldrh	r2, [r7, #6]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d205      	bcs.n	8005ff2 <_Z18ILI9341_Draw_Pixelttt+0x2a>
 8005fe6:	4b5b      	ldr	r3, [pc, #364]	@ (8006154 <_Z18ILI9341_Draw_Pixelttt+0x18c>)
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	88ba      	ldrh	r2, [r7, #4]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d301      	bcc.n	8005ff6 <_Z18ILI9341_Draw_Pixelttt+0x2e>
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e000      	b.n	8005ff8 <_Z18ILI9341_Draw_Pixelttt+0x30>
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f040 80a5 	bne.w	8006148 <_Z18ILI9341_Draw_Pixelttt+0x180>
		return;	//OUT OF BOUNDS!

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8005ffe:	2200      	movs	r2, #0
 8006000:	2102      	movs	r1, #2
 8006002:	4855      	ldr	r0, [pc, #340]	@ (8006158 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8006004:	f003 f996 	bl	8009334 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8006008:	2200      	movs	r2, #0
 800600a:	2101      	movs	r1, #1
 800600c:	4852      	ldr	r0, [pc, #328]	@ (8006158 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800600e:	f003 f991 	bl	8009334 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2A);
 8006012:	202a      	movs	r0, #42	@ 0x2a
 8006014:	f7ff fcf6 	bl	8005a04 <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8006018:	2201      	movs	r2, #1
 800601a:	2102      	movs	r1, #2
 800601c:	484e      	ldr	r0, [pc, #312]	@ (8006158 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800601e:	f003 f989 	bl	8009334 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8006022:	2201      	movs	r2, #1
 8006024:	2101      	movs	r1, #1
 8006026:	484c      	ldr	r0, [pc, #304]	@ (8006158 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8006028:	f003 f984 	bl	8009334 <HAL_GPIO_WritePin>

//XDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800602c:	2200      	movs	r2, #0
 800602e:	2101      	movs	r1, #1
 8006030:	4849      	ldr	r0, [pc, #292]	@ (8006158 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8006032:	f003 f97f 	bl	8009334 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer[4] =	{(unsigned char) (X >> 8),(unsigned char) X, (unsigned char)((X + 1) >> 8),(unsigned char) (X + 1) };
 8006036:	88fb      	ldrh	r3, [r7, #6]
 8006038:	0a1b      	lsrs	r3, r3, #8
 800603a:	b29b      	uxth	r3, r3
 800603c:	b2db      	uxtb	r3, r3
 800603e:	753b      	strb	r3, [r7, #20]
 8006040:	88fb      	ldrh	r3, [r7, #6]
 8006042:	b2db      	uxtb	r3, r3
 8006044:	757b      	strb	r3, [r7, #21]
 8006046:	88fb      	ldrh	r3, [r7, #6]
 8006048:	3301      	adds	r3, #1
 800604a:	121b      	asrs	r3, r3, #8
 800604c:	b2db      	uxtb	r3, r3
 800604e:	75bb      	strb	r3, [r7, #22]
 8006050:	88fb      	ldrh	r3, [r7, #6]
 8006052:	b2db      	uxtb	r3, r3
 8006054:	3301      	adds	r3, #1
 8006056:	b2db      	uxtb	r3, r3
 8006058:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 800605a:	f107 0114 	add.w	r1, r7, #20
 800605e:	2301      	movs	r3, #1
 8006060:	2204      	movs	r2, #4
 8006062:	483e      	ldr	r0, [pc, #248]	@ (800615c <_Z18ILI9341_Draw_Pixelttt+0x194>)
 8006064:	f004 fe9d 	bl	800ada2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8006068:	2201      	movs	r2, #1
 800606a:	2101      	movs	r1, #1
 800606c:	483a      	ldr	r0, [pc, #232]	@ (8006158 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800606e:	f003 f961 	bl	8009334 <HAL_GPIO_WritePin>

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8006072:	2200      	movs	r2, #0
 8006074:	2102      	movs	r1, #2
 8006076:	4838      	ldr	r0, [pc, #224]	@ (8006158 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8006078:	f003 f95c 	bl	8009334 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800607c:	2200      	movs	r2, #0
 800607e:	2101      	movs	r1, #1
 8006080:	4835      	ldr	r0, [pc, #212]	@ (8006158 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8006082:	f003 f957 	bl	8009334 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2B);
 8006086:	202b      	movs	r0, #43	@ 0x2b
 8006088:	f7ff fcbc 	bl	8005a04 <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800608c:	2201      	movs	r2, #1
 800608e:	2102      	movs	r1, #2
 8006090:	4831      	ldr	r0, [pc, #196]	@ (8006158 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8006092:	f003 f94f 	bl	8009334 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8006096:	2201      	movs	r2, #1
 8006098:	2101      	movs	r1, #1
 800609a:	482f      	ldr	r0, [pc, #188]	@ (8006158 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800609c:	f003 f94a 	bl	8009334 <HAL_GPIO_WritePin>

//YDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80060a0:	2200      	movs	r2, #0
 80060a2:	2101      	movs	r1, #1
 80060a4:	482c      	ldr	r0, [pc, #176]	@ (8006158 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80060a6:	f003 f945 	bl	8009334 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer1[4] =	{(unsigned char)( Y >> 8),(unsigned char) Y,(unsigned char)( (Y + 1) >> 8),(unsigned char) (Y + 1) };
 80060aa:	88bb      	ldrh	r3, [r7, #4]
 80060ac:	0a1b      	lsrs	r3, r3, #8
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	743b      	strb	r3, [r7, #16]
 80060b4:	88bb      	ldrh	r3, [r7, #4]
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	747b      	strb	r3, [r7, #17]
 80060ba:	88bb      	ldrh	r3, [r7, #4]
 80060bc:	3301      	adds	r3, #1
 80060be:	121b      	asrs	r3, r3, #8
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	74bb      	strb	r3, [r7, #18]
 80060c4:	88bb      	ldrh	r3, [r7, #4]
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	3301      	adds	r3, #1
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80060ce:	f107 0110 	add.w	r1, r7, #16
 80060d2:	2301      	movs	r3, #1
 80060d4:	2204      	movs	r2, #4
 80060d6:	4821      	ldr	r0, [pc, #132]	@ (800615c <_Z18ILI9341_Draw_Pixelttt+0x194>)
 80060d8:	f004 fe63 	bl	800ada2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80060dc:	2201      	movs	r2, #1
 80060de:	2101      	movs	r1, #1
 80060e0:	481d      	ldr	r0, [pc, #116]	@ (8006158 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80060e2:	f003 f927 	bl	8009334 <HAL_GPIO_WritePin>

//ADDRESS	
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 80060e6:	2200      	movs	r2, #0
 80060e8:	2102      	movs	r1, #2
 80060ea:	481b      	ldr	r0, [pc, #108]	@ (8006158 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80060ec:	f003 f922 	bl	8009334 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80060f0:	2200      	movs	r2, #0
 80060f2:	2101      	movs	r1, #1
 80060f4:	4818      	ldr	r0, [pc, #96]	@ (8006158 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80060f6:	f003 f91d 	bl	8009334 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 80060fa:	202c      	movs	r0, #44	@ 0x2c
 80060fc:	f7ff fc82 	bl	8005a04 <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8006100:	2201      	movs	r2, #1
 8006102:	2102      	movs	r1, #2
 8006104:	4814      	ldr	r0, [pc, #80]	@ (8006158 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8006106:	f003 f915 	bl	8009334 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800610a:	2201      	movs	r2, #1
 800610c:	2101      	movs	r1, #1
 800610e:	4812      	ldr	r0, [pc, #72]	@ (8006158 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8006110:	f003 f910 	bl	8009334 <HAL_GPIO_WritePin>

//COLOUR	
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8006114:	2200      	movs	r2, #0
 8006116:	2101      	movs	r1, #1
 8006118:	480f      	ldr	r0, [pc, #60]	@ (8006158 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800611a:	f003 f90b 	bl	8009334 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer2[2] =	{(unsigned char)( Colour >> 8),(unsigned char) Colour };
 800611e:	887b      	ldrh	r3, [r7, #2]
 8006120:	0a1b      	lsrs	r3, r3, #8
 8006122:	b29b      	uxth	r3, r3
 8006124:	b2db      	uxtb	r3, r3
 8006126:	733b      	strb	r3, [r7, #12]
 8006128:	887b      	ldrh	r3, [r7, #2]
 800612a:	b2db      	uxtb	r3, r3
 800612c:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 800612e:	f107 010c 	add.w	r1, r7, #12
 8006132:	2301      	movs	r3, #1
 8006134:	2202      	movs	r2, #2
 8006136:	4809      	ldr	r0, [pc, #36]	@ (800615c <_Z18ILI9341_Draw_Pixelttt+0x194>)
 8006138:	f004 fe33 	bl	800ada2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800613c:	2201      	movs	r2, #1
 800613e:	2101      	movs	r1, #1
 8006140:	4805      	ldr	r0, [pc, #20]	@ (8006158 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8006142:	f003 f8f7 	bl	8009334 <HAL_GPIO_WritePin>
 8006146:	e000      	b.n	800614a <_Z18ILI9341_Draw_Pixelttt+0x182>
		return;	//OUT OF BOUNDS!
 8006148:	bf00      	nop

}
 800614a:	3718      	adds	r7, #24
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	20000002 	.word	0x20000002
 8006154:	20000000 	.word	0x20000000
 8006158:	40020400 	.word	0x40020400
 800615c:	20000440 	.word	0x20000440

08006160 <_Z22ILI9341_Draw_Rectanglettttt>:
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width,
		uint16_t Height, uint16_t Colour)
{
 8006160:	b590      	push	{r4, r7, lr}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	4604      	mov	r4, r0
 8006168:	4608      	mov	r0, r1
 800616a:	4611      	mov	r1, r2
 800616c:	461a      	mov	r2, r3
 800616e:	4623      	mov	r3, r4
 8006170:	80fb      	strh	r3, [r7, #6]
 8006172:	4603      	mov	r3, r0
 8006174:	80bb      	strh	r3, [r7, #4]
 8006176:	460b      	mov	r3, r1
 8006178:	807b      	strh	r3, [r7, #2]
 800617a:	4613      	mov	r3, r2
 800617c:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 800617e:	4b2b      	ldr	r3, [pc, #172]	@ (800622c <_Z22ILI9341_Draw_Rectanglettttt+0xcc>)
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	b29b      	uxth	r3, r3
 8006184:	88fa      	ldrh	r2, [r7, #6]
 8006186:	429a      	cmp	r2, r3
 8006188:	d205      	bcs.n	8006196 <_Z22ILI9341_Draw_Rectanglettttt+0x36>
 800618a:	4b29      	ldr	r3, [pc, #164]	@ (8006230 <_Z22ILI9341_Draw_Rectanglettttt+0xd0>)
 800618c:	881b      	ldrh	r3, [r3, #0]
 800618e:	b29b      	uxth	r3, r3
 8006190:	88ba      	ldrh	r2, [r7, #4]
 8006192:	429a      	cmp	r2, r3
 8006194:	d301      	bcc.n	800619a <_Z22ILI9341_Draw_Rectanglettttt+0x3a>
 8006196:	2301      	movs	r3, #1
 8006198:	e000      	b.n	800619c <_Z22ILI9341_Draw_Rectanglettttt+0x3c>
 800619a:	2300      	movs	r3, #0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d141      	bne.n	8006224 <_Z22ILI9341_Draw_Rectanglettttt+0xc4>
		return;
	if ((X + Width - 1) >= LCD_WIDTH)
 80061a0:	88fa      	ldrh	r2, [r7, #6]
 80061a2:	887b      	ldrh	r3, [r7, #2]
 80061a4:	4413      	add	r3, r2
 80061a6:	4a21      	ldr	r2, [pc, #132]	@ (800622c <_Z22ILI9341_Draw_Rectanglettttt+0xcc>)
 80061a8:	8812      	ldrh	r2, [r2, #0]
 80061aa:	b292      	uxth	r2, r2
 80061ac:	4293      	cmp	r3, r2
 80061ae:	bfcc      	ite	gt
 80061b0:	2301      	movgt	r3, #1
 80061b2:	2300      	movle	r3, #0
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d005      	beq.n	80061c6 <_Z22ILI9341_Draw_Rectanglettttt+0x66>
	{
		Width = LCD_WIDTH - X;
 80061ba:	4b1c      	ldr	r3, [pc, #112]	@ (800622c <_Z22ILI9341_Draw_Rectanglettttt+0xcc>)
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	b29a      	uxth	r2, r3
 80061c0:	88fb      	ldrh	r3, [r7, #6]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	807b      	strh	r3, [r7, #2]
	}
	if ((Y + Height - 1) >= LCD_HEIGHT)
 80061c6:	88ba      	ldrh	r2, [r7, #4]
 80061c8:	883b      	ldrh	r3, [r7, #0]
 80061ca:	4413      	add	r3, r2
 80061cc:	4a18      	ldr	r2, [pc, #96]	@ (8006230 <_Z22ILI9341_Draw_Rectanglettttt+0xd0>)
 80061ce:	8812      	ldrh	r2, [r2, #0]
 80061d0:	b292      	uxth	r2, r2
 80061d2:	4293      	cmp	r3, r2
 80061d4:	bfcc      	ite	gt
 80061d6:	2301      	movgt	r3, #1
 80061d8:	2300      	movle	r3, #0
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d005      	beq.n	80061ec <_Z22ILI9341_Draw_Rectanglettttt+0x8c>
	{
		Height = LCD_HEIGHT - Y;
 80061e0:	4b13      	ldr	r3, [pc, #76]	@ (8006230 <_Z22ILI9341_Draw_Rectanglettttt+0xd0>)
 80061e2:	881b      	ldrh	r3, [r3, #0]
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	88bb      	ldrh	r3, [r7, #4]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	803b      	strh	r3, [r7, #0]
	}
	ILI9341_Set_Address(X, Y, X + Width - 1, Y + Height - 1);
 80061ec:	88fa      	ldrh	r2, [r7, #6]
 80061ee:	887b      	ldrh	r3, [r7, #2]
 80061f0:	4413      	add	r3, r2
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	3b01      	subs	r3, #1
 80061f6:	b29c      	uxth	r4, r3
 80061f8:	88ba      	ldrh	r2, [r7, #4]
 80061fa:	883b      	ldrh	r3, [r7, #0]
 80061fc:	4413      	add	r3, r2
 80061fe:	b29b      	uxth	r3, r3
 8006200:	3b01      	subs	r3, #1
 8006202:	b29b      	uxth	r3, r3
 8006204:	88b9      	ldrh	r1, [r7, #4]
 8006206:	88f8      	ldrh	r0, [r7, #6]
 8006208:	4622      	mov	r2, r4
 800620a:	f7ff fc49 	bl	8005aa0 <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, Height * Width);
 800620e:	883b      	ldrh	r3, [r7, #0]
 8006210:	887a      	ldrh	r2, [r7, #2]
 8006212:	fb02 f303 	mul.w	r3, r2, r3
 8006216:	461a      	mov	r2, r3
 8006218:	8b3b      	ldrh	r3, [r7, #24]
 800621a:	4611      	mov	r1, r2
 800621c:	4618      	mov	r0, r3
 800621e:	f7ff fe13 	bl	8005e48 <_Z25ILI9341_Draw_Colour_Bursttm>
 8006222:	e000      	b.n	8006226 <_Z22ILI9341_Draw_Rectanglettttt+0xc6>
		return;
 8006224:	bf00      	nop
}
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	bd90      	pop	{r4, r7, pc}
 800622c:	20000002 	.word	0x20000002
 8006230:	20000000 	.word	0x20000000

08006234 <_Z28ILI9341_Draw_Horizontal_Linetttt>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width,
		uint16_t Colour)
{
 8006234:	b590      	push	{r4, r7, lr}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	4604      	mov	r4, r0
 800623c:	4608      	mov	r0, r1
 800623e:	4611      	mov	r1, r2
 8006240:	461a      	mov	r2, r3
 8006242:	4623      	mov	r3, r4
 8006244:	80fb      	strh	r3, [r7, #6]
 8006246:	4603      	mov	r3, r0
 8006248:	80bb      	strh	r3, [r7, #4]
 800624a:	460b      	mov	r3, r1
 800624c:	807b      	strh	r3, [r7, #2]
 800624e:	4613      	mov	r3, r2
 8006250:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 8006252:	4b1d      	ldr	r3, [pc, #116]	@ (80062c8 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x94>)
 8006254:	881b      	ldrh	r3, [r3, #0]
 8006256:	b29b      	uxth	r3, r3
 8006258:	88fa      	ldrh	r2, [r7, #6]
 800625a:	429a      	cmp	r2, r3
 800625c:	d205      	bcs.n	800626a <_Z28ILI9341_Draw_Horizontal_Linetttt+0x36>
 800625e:	4b1b      	ldr	r3, [pc, #108]	@ (80062cc <_Z28ILI9341_Draw_Horizontal_Linetttt+0x98>)
 8006260:	881b      	ldrh	r3, [r3, #0]
 8006262:	b29b      	uxth	r3, r3
 8006264:	88ba      	ldrh	r2, [r7, #4]
 8006266:	429a      	cmp	r2, r3
 8006268:	d301      	bcc.n	800626e <_Z28ILI9341_Draw_Horizontal_Linetttt+0x3a>
 800626a:	2301      	movs	r3, #1
 800626c:	e000      	b.n	8006270 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x3c>
 800626e:	2300      	movs	r3, #0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d124      	bne.n	80062be <_Z28ILI9341_Draw_Horizontal_Linetttt+0x8a>
		return;
	if ((X + Width - 1) >= LCD_WIDTH)
 8006274:	88fa      	ldrh	r2, [r7, #6]
 8006276:	887b      	ldrh	r3, [r7, #2]
 8006278:	4413      	add	r3, r2
 800627a:	4a13      	ldr	r2, [pc, #76]	@ (80062c8 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x94>)
 800627c:	8812      	ldrh	r2, [r2, #0]
 800627e:	b292      	uxth	r2, r2
 8006280:	4293      	cmp	r3, r2
 8006282:	bfcc      	ite	gt
 8006284:	2301      	movgt	r3, #1
 8006286:	2300      	movle	r3, #0
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b00      	cmp	r3, #0
 800628c:	d005      	beq.n	800629a <_Z28ILI9341_Draw_Horizontal_Linetttt+0x66>
	{
		Width = LCD_WIDTH - X;
 800628e:	4b0e      	ldr	r3, [pc, #56]	@ (80062c8 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x94>)
 8006290:	881b      	ldrh	r3, [r3, #0]
 8006292:	b29a      	uxth	r2, r3
 8006294:	88fb      	ldrh	r3, [r7, #6]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	807b      	strh	r3, [r7, #2]
	}
	ILI9341_Set_Address(X, Y, X + Width - 1, Y);
 800629a:	88fa      	ldrh	r2, [r7, #6]
 800629c:	887b      	ldrh	r3, [r7, #2]
 800629e:	4413      	add	r3, r2
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	3b01      	subs	r3, #1
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	88bb      	ldrh	r3, [r7, #4]
 80062a8:	88b9      	ldrh	r1, [r7, #4]
 80062aa:	88f8      	ldrh	r0, [r7, #6]
 80062ac:	f7ff fbf8 	bl	8005aa0 <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, Width);
 80062b0:	887a      	ldrh	r2, [r7, #2]
 80062b2:	883b      	ldrh	r3, [r7, #0]
 80062b4:	4611      	mov	r1, r2
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7ff fdc6 	bl	8005e48 <_Z25ILI9341_Draw_Colour_Bursttm>
 80062bc:	e000      	b.n	80062c0 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x8c>
		return;
 80062be:	bf00      	nop
}
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd90      	pop	{r4, r7, pc}
 80062c6:	bf00      	nop
 80062c8:	20000002 	.word	0x20000002
 80062cc:	20000000 	.word	0x20000000

080062d0 <_Z26ILI9341_Draw_Vertical_Linetttt>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height,
		uint16_t Colour)
{
 80062d0:	b590      	push	{r4, r7, lr}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	4604      	mov	r4, r0
 80062d8:	4608      	mov	r0, r1
 80062da:	4611      	mov	r1, r2
 80062dc:	461a      	mov	r2, r3
 80062de:	4623      	mov	r3, r4
 80062e0:	80fb      	strh	r3, [r7, #6]
 80062e2:	4603      	mov	r3, r0
 80062e4:	80bb      	strh	r3, [r7, #4]
 80062e6:	460b      	mov	r3, r1
 80062e8:	807b      	strh	r3, [r7, #2]
 80062ea:	4613      	mov	r3, r2
 80062ec:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 80062ee:	4b1d      	ldr	r3, [pc, #116]	@ (8006364 <_Z26ILI9341_Draw_Vertical_Linetttt+0x94>)
 80062f0:	881b      	ldrh	r3, [r3, #0]
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	88fa      	ldrh	r2, [r7, #6]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d205      	bcs.n	8006306 <_Z26ILI9341_Draw_Vertical_Linetttt+0x36>
 80062fa:	4b1b      	ldr	r3, [pc, #108]	@ (8006368 <_Z26ILI9341_Draw_Vertical_Linetttt+0x98>)
 80062fc:	881b      	ldrh	r3, [r3, #0]
 80062fe:	b29b      	uxth	r3, r3
 8006300:	88ba      	ldrh	r2, [r7, #4]
 8006302:	429a      	cmp	r2, r3
 8006304:	d301      	bcc.n	800630a <_Z26ILI9341_Draw_Vertical_Linetttt+0x3a>
 8006306:	2301      	movs	r3, #1
 8006308:	e000      	b.n	800630c <_Z26ILI9341_Draw_Vertical_Linetttt+0x3c>
 800630a:	2300      	movs	r3, #0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d124      	bne.n	800635a <_Z26ILI9341_Draw_Vertical_Linetttt+0x8a>
		return;
	if ((Y + Height - 1) >= LCD_HEIGHT)
 8006310:	88ba      	ldrh	r2, [r7, #4]
 8006312:	887b      	ldrh	r3, [r7, #2]
 8006314:	4413      	add	r3, r2
 8006316:	4a14      	ldr	r2, [pc, #80]	@ (8006368 <_Z26ILI9341_Draw_Vertical_Linetttt+0x98>)
 8006318:	8812      	ldrh	r2, [r2, #0]
 800631a:	b292      	uxth	r2, r2
 800631c:	4293      	cmp	r3, r2
 800631e:	bfcc      	ite	gt
 8006320:	2301      	movgt	r3, #1
 8006322:	2300      	movle	r3, #0
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d005      	beq.n	8006336 <_Z26ILI9341_Draw_Vertical_Linetttt+0x66>
	{
		Height = LCD_HEIGHT - Y;
 800632a:	4b0f      	ldr	r3, [pc, #60]	@ (8006368 <_Z26ILI9341_Draw_Vertical_Linetttt+0x98>)
 800632c:	881b      	ldrh	r3, [r3, #0]
 800632e:	b29a      	uxth	r2, r3
 8006330:	88bb      	ldrh	r3, [r7, #4]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	807b      	strh	r3, [r7, #2]
	}
	ILI9341_Set_Address(X, Y, X, Y + Height - 1);
 8006336:	88ba      	ldrh	r2, [r7, #4]
 8006338:	887b      	ldrh	r3, [r7, #2]
 800633a:	4413      	add	r3, r2
 800633c:	b29b      	uxth	r3, r3
 800633e:	3b01      	subs	r3, #1
 8006340:	b29b      	uxth	r3, r3
 8006342:	88fa      	ldrh	r2, [r7, #6]
 8006344:	88b9      	ldrh	r1, [r7, #4]
 8006346:	88f8      	ldrh	r0, [r7, #6]
 8006348:	f7ff fbaa 	bl	8005aa0 <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, Height);
 800634c:	887a      	ldrh	r2, [r7, #2]
 800634e:	883b      	ldrh	r3, [r7, #0]
 8006350:	4611      	mov	r1, r2
 8006352:	4618      	mov	r0, r3
 8006354:	f7ff fd78 	bl	8005e48 <_Z25ILI9341_Draw_Colour_Bursttm>
 8006358:	e000      	b.n	800635c <_Z26ILI9341_Draw_Vertical_Linetttt+0x8c>
		return;
 800635a:	bf00      	nop
}
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	bd90      	pop	{r4, r7, pc}
 8006362:	bf00      	nop
 8006364:	20000002 	.word	0x20000002
 8006368:	20000000 	.word	0x20000000

0800636c <_ZN19CManejadorControlesC1Ev>:

#include <ManejadorControles/CManejadorControles.hpp>
#include "Constantes.hpp"
#include "Uart/Uart.hpp"

CManejadorControles::CManejadorControles()
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af04      	add	r7, sp, #16
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4618      	mov	r0, r3
 8006378:	f7fa fe6e 	bl	8001058 <_ZN22CManejadorEventosBotonC1Ev>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	3304      	adds	r3, #4
 8006380:	4618      	mov	r0, r3
 8006382:	f7fb f98f 	bl	80016a4 <_ZN24CManejadorEventosEncoderC1Ev>
 8006386:	4a52      	ldr	r2, [pc, #328]	@ (80064d0 <_ZN19CManejadorControlesC1Ev+0x164>)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	601a      	str	r2, [r3, #0]
 800638c:	4a51      	ldr	r2, [pc, #324]	@ (80064d4 <_ZN19CManejadorControlesC1Ev+0x168>)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	605a      	str	r2, [r3, #4]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	609a      	str	r2, [r3, #8]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	330c      	adds	r3, #12
 800639c:	4618      	mov	r0, r3
 800639e:	f7fa fd83 	bl	8000ea8 <_ZN15CManejadorBotonC1Ev>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	332c      	adds	r3, #44	@ 0x2c
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7fa fd7e 	bl	8000ea8 <_ZN15CManejadorBotonC1Ev>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	334c      	adds	r3, #76	@ 0x4c
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7fa fd79 	bl	8000ea8 <_ZN15CManejadorBotonC1Ev>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	336c      	adds	r3, #108	@ 0x6c
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7fa fd74 	bl	8000ea8 <_ZN15CManejadorBotonC1Ev>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	338c      	adds	r3, #140	@ 0x8c
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7fa ffef 	bl	80013a8 <_ZN8CEncoderC1Ev>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	33d8      	adds	r3, #216	@ 0xd8
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7fa ff10 	bl	80011f4 <_ZN20ControlVelocidadAireC1Ev>
{
	// TODO Auto-generated constructor stub
	//configuracion de los botones
	BotonMemoria1.Configurar(GPIOC, GPIO_PIN_14, 1);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f103 000c 	add.w	r0, r3, #12
 80063da:	2301      	movs	r3, #1
 80063dc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80063e0:	493d      	ldr	r1, [pc, #244]	@ (80064d8 <_ZN19CManejadorControlesC1Ev+0x16c>)
 80063e2:	f7fa fda1 	bl	8000f28 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonMemoria1.AsignaManejadorEventos(this);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	330c      	adds	r3, #12
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	4611      	mov	r1, r2
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7fa fde4 	bl	8000fbc <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonMemoria1.Init();
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	330c      	adds	r3, #12
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7fa fdaf 	bl	8000f5c <_ZN15CManejadorBoton4InitEv>

	BotonMemoria2.Configurar(GPIOA, GPIO_PIN_6, 2);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f103 002c 	add.w	r0, r3, #44	@ 0x2c
 8006404:	2302      	movs	r3, #2
 8006406:	2240      	movs	r2, #64	@ 0x40
 8006408:	4934      	ldr	r1, [pc, #208]	@ (80064dc <_ZN19CManejadorControlesC1Ev+0x170>)
 800640a:	f7fa fd8d 	bl	8000f28 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonMemoria2.AsignaManejadorEventos(this);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	332c      	adds	r3, #44	@ 0x2c
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	4611      	mov	r1, r2
 8006416:	4618      	mov	r0, r3
 8006418:	f7fa fdd0 	bl	8000fbc <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonMemoria2.Init();
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	332c      	adds	r3, #44	@ 0x2c
 8006420:	4618      	mov	r0, r3
 8006422:	f7fa fd9b 	bl	8000f5c <_ZN15CManejadorBoton4InitEv>

	BotonMemoria3.Configurar(GPIOB, GPIO_PIN_10, 3);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 800642c:	2303      	movs	r3, #3
 800642e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006432:	492b      	ldr	r1, [pc, #172]	@ (80064e0 <_ZN19CManejadorControlesC1Ev+0x174>)
 8006434:	f7fa fd78 	bl	8000f28 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonMemoria3.AsignaManejadorEventos(this);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	334c      	adds	r3, #76	@ 0x4c
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	4611      	mov	r1, r2
 8006440:	4618      	mov	r0, r3
 8006442:	f7fa fdbb 	bl	8000fbc <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonMemoria3.Init();
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	334c      	adds	r3, #76	@ 0x4c
 800644a:	4618      	mov	r0, r3
 800644c:	f7fa fd86 	bl	8000f5c <_ZN15CManejadorBoton4InitEv>

	BotonManual.Configurar(GPIOB, GPIO_PIN_15, 4);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8006456:	2304      	movs	r3, #4
 8006458:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800645c:	4920      	ldr	r1, [pc, #128]	@ (80064e0 <_ZN19CManejadorControlesC1Ev+0x174>)
 800645e:	f7fa fd63 	bl	8000f28 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonManual.AsignaManejadorEventos(this);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	336c      	adds	r3, #108	@ 0x6c
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	4611      	mov	r1, r2
 800646a:	4618      	mov	r0, r3
 800646c:	f7fa fda6 	bl	8000fbc <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonManual.Init();
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	336c      	adds	r3, #108	@ 0x6c
 8006474:	4618      	mov	r0, r3
 8006476:	f7fa fd71 	bl	8000f5c <_ZN15CManejadorBoton4InitEv>

	Encoder.Configurar(GPIOB, GPIO_PIN_2, GPIOB, GPIO_PIN_12, GPIOB,
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f103 008c 	add.w	r0, r3, #140	@ 0x8c
 8006480:	2301      	movs	r3, #1
 8006482:	9303      	str	r3, [sp, #12]
 8006484:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006488:	9302      	str	r3, [sp, #8]
 800648a:	4b15      	ldr	r3, [pc, #84]	@ (80064e0 <_ZN19CManejadorControlesC1Ev+0x174>)
 800648c:	9301      	str	r3, [sp, #4]
 800648e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	4b12      	ldr	r3, [pc, #72]	@ (80064e0 <_ZN19CManejadorControlesC1Ev+0x174>)
 8006496:	2204      	movs	r2, #4
 8006498:	4911      	ldr	r1, [pc, #68]	@ (80064e0 <_ZN19CManejadorControlesC1Ev+0x174>)
 800649a:	f7fa ffcb 	bl	8001434 <_ZN8CEncoder10ConfigurarEP12GPIO_TypeDeftS1_tS1_ti>
			GPIO_PIN_8, 1);
	Encoder.AsignaManejadorEventos(this);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f103 028c 	add.w	r2, r3, #140	@ 0x8c
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	3304      	adds	r3, #4
 80064a8:	4619      	mov	r1, r3
 80064aa:	4610      	mov	r0, r2
 80064ac:	f7fb f863 	bl	8001576 <_ZN8CEncoder22AsignaManejadorEventosEP24CManejadorEventosEncoder>
	Encoder.Init();
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	338c      	adds	r3, #140	@ 0x8c
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7fb f820 	bl	80014fa <_ZN8CEncoder4InitEv>

	controlVelocidadAire.Inicializa();
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	33d8      	adds	r3, #216	@ 0xd8
 80064be:	4618      	mov	r0, r3
 80064c0:	f7fa fec8 	bl	8001254 <_ZN20ControlVelocidadAire10InicializaEv>

}
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4618      	mov	r0, r3
 80064c8:	3708      	adds	r7, #8
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	08010268 	.word	0x08010268
 80064d4:	080102b0 	.word	0x080102b0
 80064d8:	40020800 	.word	0x40020800
 80064dc:	40020000 	.word	0x40020000
 80064e0:	40020400 	.word	0x40020400

080064e4 <_ZN19CManejadorControlesD1Ev>:

CManejadorControles::~CManejadorControles()
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	4a18      	ldr	r2, [pc, #96]	@ (8006550 <_ZN19CManejadorControlesD1Ev+0x6c>)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	601a      	str	r2, [r3, #0]
 80064f2:	4a18      	ldr	r2, [pc, #96]	@ (8006554 <_ZN19CManejadorControlesD1Ev+0x70>)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	605a      	str	r2, [r3, #4]
{
	// TODO Auto-generated destructor stub
}
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	33d8      	adds	r3, #216	@ 0xd8
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7fa fe89 	bl	8001214 <_ZN20ControlVelocidadAireD1Ev>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	338c      	adds	r3, #140	@ 0x8c
 8006506:	4618      	mov	r0, r3
 8006508:	f7fa ff72 	bl	80013f0 <_ZN8CEncoderD1Ev>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	336c      	adds	r3, #108	@ 0x6c
 8006510:	4618      	mov	r0, r3
 8006512:	f7fa fce9 	bl	8000ee8 <_ZN15CManejadorBotonD1Ev>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	334c      	adds	r3, #76	@ 0x4c
 800651a:	4618      	mov	r0, r3
 800651c:	f7fa fce4 	bl	8000ee8 <_ZN15CManejadorBotonD1Ev>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	332c      	adds	r3, #44	@ 0x2c
 8006524:	4618      	mov	r0, r3
 8006526:	f7fa fcdf 	bl	8000ee8 <_ZN15CManejadorBotonD1Ev>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	330c      	adds	r3, #12
 800652e:	4618      	mov	r0, r3
 8006530:	f7fa fcda 	bl	8000ee8 <_ZN15CManejadorBotonD1Ev>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	3304      	adds	r3, #4
 8006538:	4618      	mov	r0, r3
 800653a:	f7fb f8c3 	bl	80016c4 <_ZN24CManejadorEventosEncoderD1Ev>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4618      	mov	r0, r3
 8006542:	f7fa fd99 	bl	8001078 <_ZN22CManejadorEventosBotonD1Ev>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4618      	mov	r0, r3
 800654a:	3708      	adds	r7, #8
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	08010268 	.word	0x08010268
 8006554:	080102b0 	.word	0x080102b0

08006558 <_ZThn4_N19CManejadorControlesD1Ev>:
	virtual void EncoderDecremento();


public:
	CManejadorControles();
	virtual ~CManejadorControles();
 8006558:	f1a0 0004 	sub.w	r0, r0, #4
 800655c:	f7ff bfc2 	b.w	80064e4 <_ZN19CManejadorControlesD1Ev>

08006560 <_ZN19CManejadorControlesD0Ev>:
CManejadorControles::~CManejadorControles()
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
}
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f7ff ffbb 	bl	80064e4 <_ZN19CManejadorControlesD1Ev>
 800656e:	f44f 7192 	mov.w	r1, #292	@ 0x124
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f006 f9fa 	bl	800c96c <_ZdlPvj>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4618      	mov	r0, r3
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <_ZThn4_N19CManejadorControlesD0Ev>:
 8006582:	f1a0 0004 	sub.w	r0, r0, #4
 8006586:	f7ff bfeb 	b.w	8006560 <_ZN19CManejadorControlesD0Ev>

0800658a <_ZN19CManejadorControles17GPIO_INTERRUPCIONEi>:

void CManejadorControles::GPIO_INTERRUPCION(int GPIO_Pin)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b082      	sub	sp, #8
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
 8006592:	6039      	str	r1, [r7, #0]
	ProcesaBotones(GPIO_Pin);
 8006594:	6839      	ldr	r1, [r7, #0]
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 f80b 	bl	80065b2 <_ZN19CManejadorControles14ProcesaBotonesEi>
	InterrupcionEncoder(GPIO_Pin);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	3338      	adds	r3, #56	@ 0x38
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6839      	ldr	r1, [r7, #0]
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	4798      	blx	r3
}
 80065aa:	bf00      	nop
 80065ac:	3708      	adds	r7, #8
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <_ZN19CManejadorControles14ProcesaBotonesEi>:

void CManejadorControles::ProcesaBotones(int gpio_pin)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b082      	sub	sp, #8
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
 80065ba:	6039      	str	r1, [r7, #0]
	BotonMemoria1.Procesa(gpio_pin);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	330c      	adds	r3, #12
 80065c0:	6839      	ldr	r1, [r7, #0]
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7fa fd08 	bl	8000fd8 <_ZN15CManejadorBoton7ProcesaEi>
	BotonMemoria2.Procesa(gpio_pin);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	332c      	adds	r3, #44	@ 0x2c
 80065cc:	6839      	ldr	r1, [r7, #0]
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7fa fd02 	bl	8000fd8 <_ZN15CManejadorBoton7ProcesaEi>
	BotonMemoria3.Procesa(gpio_pin);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	334c      	adds	r3, #76	@ 0x4c
 80065d8:	6839      	ldr	r1, [r7, #0]
 80065da:	4618      	mov	r0, r3
 80065dc:	f7fa fcfc 	bl	8000fd8 <_ZN15CManejadorBoton7ProcesaEi>
///	SerialPrintf("\r\n ProcesaBotones");

	BotonManual.Procesa(gpio_pin);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	336c      	adds	r3, #108	@ 0x6c
 80065e4:	6839      	ldr	r1, [r7, #0]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7fa fcf6 	bl	8000fd8 <_ZN15CManejadorBoton7ProcesaEi>
}
 80065ec:	bf00      	nop
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <_ZN19CManejadorControles19InterrupcionEncoderEi>:
void CManejadorControles::InterrupcionEncoder(int GPIO_Pin)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
	Encoder.Procesa(GPIO_Pin);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	338c      	adds	r3, #140	@ 0x8c
 8006602:	6839      	ldr	r1, [r7, #0]
 8006604:	4618      	mov	r0, r3
 8006606:	f7fa ffdc 	bl	80015c2 <_ZN8CEncoder7ProcesaEi>
}
 800660a:	bf00      	nop
 800660c:	3708      	adds	r7, #8
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <_ZN19CManejadorControles12GetNivelAireEv>:

//regresa el nivel de aire setado
int CManejadorControles::GetNivelAire()
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b082      	sub	sp, #8
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
	return controlVelocidadAire.LeeVelocidad();
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	33d8      	adds	r3, #216	@ 0xd8
 800661e:	4618      	mov	r0, r3
 8006620:	f7fa fe92 	bl	8001348 <_ZN20ControlVelocidadAire12LeeVelocidadEv>
 8006624:	4603      	mov	r3, r0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3708      	adds	r7, #8
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <_ZN19CManejadorControles18BotonUnoClickEventEv>:

//eventros del boton uno
void CManejadorControles::BotonUnoClickEvent()
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b082      	sub	sp, #8
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d009      	beq.n	8006652 <_ZN19CManejadorControles18BotonUnoClickEventEv+0x24>
		return;
	ManejadorControles->OnBotonUnoClickEvent();
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	689a      	ldr	r2, [r3, #8]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	3310      	adds	r3, #16
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4610      	mov	r0, r2
 800664e:	4798      	blx	r3
 8006650:	e000      	b.n	8006654 <_ZN19CManejadorControles18BotonUnoClickEventEv+0x26>
		return;
 8006652:	bf00      	nop

}
 8006654:	3708      	adds	r7, #8
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <_ZN19CManejadorControles18BotonDosClickEventEv>:
//eventros del boton dos
void CManejadorControles::BotonDosClickEvent()
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b082      	sub	sp, #8
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d009      	beq.n	800667e <_ZN19CManejadorControles18BotonDosClickEventEv+0x24>
		return;
	ManejadorControles->OnBotonDosClickEvent();
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	689a      	ldr	r2, [r3, #8]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	3314      	adds	r3, #20
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4610      	mov	r0, r2
 800667a:	4798      	blx	r3
 800667c:	e000      	b.n	8006680 <_ZN19CManejadorControles18BotonDosClickEventEv+0x26>
		return;
 800667e:	bf00      	nop

}
 8006680:	3708      	adds	r7, #8
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <_ZN19CManejadorControles19BotonTresClickEventEv>:
//eventros del boton tres
void CManejadorControles::BotonTresClickEvent()
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b082      	sub	sp, #8
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d009      	beq.n	80066aa <_ZN19CManejadorControles19BotonTresClickEventEv+0x24>
		return;
	ManejadorControles->OnBotonTresClickEvent();
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	689a      	ldr	r2, [r3, #8]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	3318      	adds	r3, #24
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4610      	mov	r0, r2
 80066a6:	4798      	blx	r3
 80066a8:	e000      	b.n	80066ac <_ZN19CManejadorControles19BotonTresClickEventEv+0x26>
		return;
 80066aa:	bf00      	nop

}
 80066ac:	3708      	adds	r7, #8
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <_ZN19CManejadorControles21BotonCuatroClickEventEv>:
//eventros del boton Cuatro
void CManejadorControles::BotonCuatroClickEvent()
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b082      	sub	sp, #8
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d009      	beq.n	80066d6 <_ZN19CManejadorControles21BotonCuatroClickEventEv+0x24>
		return;
	ManejadorControles->OnBotonCuatroClickEvent();
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	689a      	ldr	r2, [r3, #8]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	331c      	adds	r3, #28
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4610      	mov	r0, r2
 80066d2:	4798      	blx	r3
 80066d4:	e000      	b.n	80066d8 <_ZN19CManejadorControles21BotonCuatroClickEventEv+0x26>
		return;
 80066d6:	bf00      	nop

}
 80066d8:	3708      	adds	r7, #8
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <_ZN19CManejadorControles22BotonPerillaClickEventEv>:
//eventros del boton Perilla
void CManejadorControles::BotonPerillaClickEvent()
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b082      	sub	sp, #8
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d009      	beq.n	8006702 <_ZN19CManejadorControles22BotonPerillaClickEventEv+0x24>
		return;
	ManejadorControles->OnBotonPerillaClickEvent();
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	689a      	ldr	r2, [r3, #8]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	3320      	adds	r3, #32
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4610      	mov	r0, r2
 80066fe:	4798      	blx	r3
 8006700:	e000      	b.n	8006704 <_ZN19CManejadorControles22BotonPerillaClickEventEv+0x26>
		return;
 8006702:	bf00      	nop

}
 8006704:	3708      	adds	r7, #8
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <_ZN19CManejadorControles17EncoderIncrementoEv>:
//eventos del encoder
void CManejadorControles::EncoderIncremento()
{
 800670a:	b580      	push	{r7, lr}
 800670c:	b082      	sub	sp, #8
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d009      	beq.n	800672e <_ZN19CManejadorControles17EncoderIncrementoEv+0x24>
		return;
	ManejadorControles->OnPerillaIncremento();
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	689a      	ldr	r2, [r3, #8]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	3324      	adds	r3, #36	@ 0x24
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4610      	mov	r0, r2
 800672a:	4798      	blx	r3
 800672c:	e000      	b.n	8006730 <_ZN19CManejadorControles17EncoderIncrementoEv+0x26>
		return;
 800672e:	bf00      	nop

}
 8006730:	3708      	adds	r7, #8
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <_ZN19CManejadorControles17EncoderDecrementoEv>:
void CManejadorControles::EncoderDecremento()
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b082      	sub	sp, #8
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d009      	beq.n	800675a <_ZN19CManejadorControles17EncoderDecrementoEv+0x24>
		return;
	ManejadorControles->OnPerillaDecremento();
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	689a      	ldr	r2, [r3, #8]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	3328      	adds	r3, #40	@ 0x28
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4610      	mov	r0, r2
 8006756:	4798      	blx	r3
 8006758:	e000      	b.n	800675c <_ZN19CManejadorControles17EncoderDecrementoEv+0x26>
		return;
 800675a:	bf00      	nop

}
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
	...

08006764 <_ZN19CManejadorControles17OnBotonClickEventEi>:

void CManejadorControles::OnBotonClickEvent(int idBoton)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
	switch (idBoton)
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	3b01      	subs	r3, #1
 8006772:	2b03      	cmp	r3, #3
 8006774:	d826      	bhi.n	80067c4 <_ZN19CManejadorControles17OnBotonClickEventEi+0x60>
 8006776:	a201      	add	r2, pc, #4	@ (adr r2, 800677c <_ZN19CManejadorControles17OnBotonClickEventEi+0x18>)
 8006778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677c:	0800678d 	.word	0x0800678d
 8006780:	0800679b 	.word	0x0800679b
 8006784:	080067a9 	.word	0x080067a9
 8006788:	080067b7 	.word	0x080067b7
	{
	case BOTON_MEMORIA1:
		BotonUnoClickEvent();
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	3318      	adds	r3, #24
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	4798      	blx	r3
		break;
 8006798:	e014      	b.n	80067c4 <_ZN19CManejadorControles17OnBotonClickEventEi+0x60>
	case BOTON_MEMORIA2:
		BotonDosClickEvent();
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	331c      	adds	r3, #28
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	4798      	blx	r3
		break;
 80067a6:	e00d      	b.n	80067c4 <_ZN19CManejadorControles17OnBotonClickEventEi+0x60>
	case BOTON_MEMORIA3:
		BotonTresClickEvent();
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	3320      	adds	r3, #32
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	4798      	blx	r3
		break;
 80067b4:	e006      	b.n	80067c4 <_ZN19CManejadorControles17OnBotonClickEventEi+0x60>
	case BOTON_MANUAL:
		BotonCuatroClickEvent();
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	3324      	adds	r3, #36	@ 0x24
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	4798      	blx	r3
		break;
 80067c2:	bf00      	nop
	}
}
 80067c4:	bf00      	nop
 80067c6:	3708      	adds	r7, #8
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <_ZN19CManejadorControles19OnIncrementoEncoderEi>:


//eventros del encoder
void CManejadorControles::OnIncrementoEncoder(int id_Encoder)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
	EncoderIncremento();
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	332c      	adds	r3, #44	@ 0x2c
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	4798      	blx	r3
}
 80067e2:	bf00      	nop
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <_ZThn4_N19CManejadorControles19OnIncrementoEncoderEi>:
	virtual void OnIncrementoEncoder(int id_Encoder);
 80067ea:	f1a0 0004 	sub.w	r0, r0, #4
 80067ee:	f7ff bfed 	b.w	80067cc <_ZN19CManejadorControles19OnIncrementoEncoderEi>

080067f2 <_ZN19CManejadorControles19OnDecrementoEncoderEi>:

void CManejadorControles::OnDecrementoEncoder(int id_Encoder)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b082      	sub	sp, #8
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
 80067fa:	6039      	str	r1, [r7, #0]
	EncoderDecremento();
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	3330      	adds	r3, #48	@ 0x30
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	4798      	blx	r3
}
 8006808:	bf00      	nop
 800680a:	3708      	adds	r7, #8
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <_ZThn4_N19CManejadorControles19OnDecrementoEncoderEi>:
	virtual void OnDecrementoEncoder(int id_Encoder);
 8006810:	f1a0 0004 	sub.w	r0, r0, #4
 8006814:	f7ff bfed 	b.w	80067f2 <_ZN19CManejadorControles19OnDecrementoEncoderEi>

08006818 <_ZN19CManejadorControles24OnBotonEncoderClickEventEi>:

void CManejadorControles::OnBotonEncoderClickEvent(int id_Encoder )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
	BotonPerillaClickEvent();
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3328      	adds	r3, #40	@ 0x28
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	4798      	blx	r3
}
 800682e:	bf00      	nop
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <_ZThn4_N19CManejadorControles24OnBotonEncoderClickEventEi>:
	virtual void OnBotonEncoderClickEvent(int id_Encoder);
 8006836:	f1a0 0004 	sub.w	r0, r0, #4
 800683a:	f7ff bfed 	b.w	8006818 <_ZN19CManejadorControles24OnBotonEncoderClickEventEi>

0800683e <_ZN19CManejadorControles21SetManejadorControlesEP26CManejadorEventosControles>:




void CManejadorControles::SetManejadorControles(CManejadorEventosControles *obj)
{
 800683e:	b480      	push	{r7}
 8006840:	b083      	sub	sp, #12
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
 8006846:	6039      	str	r1, [r7, #0]
	ManejadorControles = obj;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	683a      	ldr	r2, [r7, #0]
 800684c:	609a      	str	r2, [r3, #8]
}
 800684e:	bf00      	nop
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
	...

0800685c <_ZN26CManejadorEventosControlesC1Ev>:
 *      Author: W10
 */

#include <ManejadorControles/CManejadorEventosControles.hpp>

CManejadorEventosControles::CManejadorEventosControles()
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	4a04      	ldr	r2, [pc, #16]	@ (8006878 <_ZN26CManejadorEventosControlesC1Ev+0x1c>)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4618      	mov	r0, r3
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr
 8006878:	080102cc 	.word	0x080102cc

0800687c <_ZN26CManejadorEventosControlesD1Ev>:

CManejadorEventosControles::~CManejadorEventosControles()
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	4a04      	ldr	r2, [pc, #16]	@ (8006898 <_ZN26CManejadorEventosControlesD1Ev+0x1c>)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4618      	mov	r0, r3
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr
 8006898:	080102cc 	.word	0x080102cc

0800689c <_ZN26CManejadorEventosControlesD0Ev>:
CManejadorEventosControles::~CManejadorEventosControles()
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
}
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f7ff ffe9 	bl	800687c <_ZN26CManejadorEventosControlesD1Ev>
 80068aa:	2104      	movs	r1, #4
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f006 f85d 	bl	800c96c <_ZdlPvj>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4618      	mov	r0, r3
 80068b6:	3708      	adds	r7, #8
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <_ZN26CManejadorEventosControles22OnTemperaturaRealEventEi>:

void CManejadorEventosControles::OnTemperaturaRealEvent(int temperatura)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]

}
 80068c6:	bf00      	nop
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr

080068d2 <_ZN26CManejadorEventosControles16OnNivelAireEventEi>:
void CManejadorEventosControles::OnNivelAireEvent(int aire)
{
 80068d2:	b480      	push	{r7}
 80068d4:	b083      	sub	sp, #12
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
 80068da:	6039      	str	r1, [r7, #0]

}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <_ZN26CManejadorEventosControles20OnBotonUnoClickEventEv>:
//eventros del boton uno
void CManejadorEventosControles::OnBotonUnoClickEvent()
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]

}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <_ZN26CManejadorEventosControles20OnBotonDosClickEventEv>:
//eventros del boton dos
void CManejadorEventosControles::OnBotonDosClickEvent()
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]

}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <_ZN26CManejadorEventosControles21OnBotonTresClickEventEv>:
//eventros del boton tres
void CManejadorEventosControles::OnBotonTresClickEvent()
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]

}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <_ZN26CManejadorEventosControles23OnBotonCuatroClickEventEv>:
//eventros del boton Cuatro
void CManejadorEventosControles::OnBotonCuatroClickEvent()
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]

}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <_ZN26CManejadorEventosControles24OnBotonPerillaClickEventEv>:
//eventros del boton Perilla
void CManejadorEventosControles::OnBotonPerillaClickEvent()
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]

}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <_ZN26CManejadorEventosControles19OnPerillaIncrementoEv>:
//eventos del Encoder
void CManejadorEventosControles::OnPerillaIncremento()
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]

}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <_ZN26CManejadorEventosControles19OnPerillaDecrementoEv>:
void CManejadorEventosControles::OnPerillaDecremento()
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]

}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <_ZN3PwmC1Ev>:

#include <PWM/Pwm.hpp>
#include "stm32f4xx_hal.h"
#include "stdlib.h"

Pwm::Pwm()
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	4a04      	ldr	r2, [pc, #16]	@ (8006990 <_ZN3PwmC1Ev+0x1c>)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4618      	mov	r0, r3
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	08010300 	.word	0x08010300

08006994 <_ZN3PwmD1Ev>:

Pwm::~Pwm()
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	4a04      	ldr	r2, [pc, #16]	@ (80069b0 <_ZN3PwmD1Ev+0x1c>)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4618      	mov	r0, r3
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr
 80069b0:	08010300 	.word	0x08010300

080069b4 <_ZN3PwmD0Ev>:
Pwm::~Pwm()
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
}
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f7ff ffe9 	bl	8006994 <_ZN3PwmD1Ev>
 80069c2:	214c      	movs	r1, #76	@ 0x4c
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f005 ffd1 	bl	800c96c <_ZdlPvj>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4618      	mov	r0, r3
 80069ce:	3708      	adds	r7, #8
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <_ZN3Pwm4InitEP11TIM_TypeDefii>:
void Pwm::Init(TIM_TypeDef * timer, int chanel,int periodo)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b092      	sub	sp, #72	@ 0x48
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	607a      	str	r2, [r7, #4]
 80069e0:	603b      	str	r3, [r7, #0]
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80069e2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80069e6:	2200      	movs	r2, #0
 80069e8:	601a      	str	r2, [r3, #0]
 80069ea:	605a      	str	r2, [r3, #4]
 80069ec:	609a      	str	r2, [r3, #8]
 80069ee:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80069f0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80069f4:	2200      	movs	r2, #0
 80069f6:	601a      	str	r2, [r3, #0]
 80069f8:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 80069fa:	f107 0314 	add.w	r3, r7, #20
 80069fe:	2200      	movs	r2, #0
 8006a00:	601a      	str	r2, [r3, #0]
 8006a02:	605a      	str	r2, [r3, #4]
 8006a04:	609a      	str	r2, [r3, #8]
 8006a06:	60da      	str	r2, [r3, #12]
 8006a08:	611a      	str	r2, [r3, #16]
 8006a0a:	615a      	str	r2, [r3, #20]
 8006a0c:	619a      	str	r2, [r3, #24]

	  Htim.Instance = timer;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	68ba      	ldr	r2, [r7, #8]
 8006a12:	605a      	str	r2, [r3, #4]
	  Htim.Init.Prescaler = 0;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	609a      	str	r2, [r3, #8]
	  Htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	60da      	str	r2, [r3, #12]
	  Htim.Init.Period = periodo;
 8006a20:	683a      	ldr	r2, [r7, #0]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	611a      	str	r2, [r3, #16]
	  Htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	615a      	str	r2, [r3, #20]
	  Htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2280      	movs	r2, #128	@ 0x80
 8006a30:	61da      	str	r2, [r3, #28]
	  if (HAL_TIM_Base_Init(&Htim) != HAL_OK)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	3304      	adds	r3, #4
 8006a36:	4618      	mov	r0, r3
 8006a38:	f004 fbd4 	bl	800b1e4 <HAL_TIM_Base_Init>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	bf14      	ite	ne
 8006a42:	2301      	movne	r3, #1
 8006a44:	2300      	moveq	r3, #0
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d002      	beq.n	8006a52 <_ZN3Pwm4InitEP11TIM_TypeDefii+0x7e>
	  {
	    Error_Handler();
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f000 f883 	bl	8006b58 <_ZN3Pwm13Error_HandlerEv>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006a52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006a56:	63bb      	str	r3, [r7, #56]	@ 0x38
	  if (HAL_TIM_ConfigClockSource(&Htim, &sClockSourceConfig) != HAL_OK)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	3304      	adds	r3, #4
 8006a5c:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8006a60:	4611      	mov	r1, r2
 8006a62:	4618      	mov	r0, r3
 8006a64:	f004 ff2c 	bl	800b8c0 <HAL_TIM_ConfigClockSource>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	bf14      	ite	ne
 8006a6e:	2301      	movne	r3, #1
 8006a70:	2300      	moveq	r3, #0
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d002      	beq.n	8006a7e <_ZN3Pwm4InitEP11TIM_TypeDefii+0xaa>
	  {
	    Error_Handler();
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f000 f86d 	bl	8006b58 <_ZN3Pwm13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_Init(&Htim) != HAL_OK)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	3304      	adds	r3, #4
 8006a82:	4618      	mov	r0, r3
 8006a84:	f004 fc60 	bl	800b348 <HAL_TIM_PWM_Init>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	bf14      	ite	ne
 8006a8e:	2301      	movne	r3, #1
 8006a90:	2300      	moveq	r3, #0
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d002      	beq.n	8006a9e <_ZN3Pwm4InitEP11TIM_TypeDefii+0xca>
	  {
	    Error_Handler();
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f000 f85d 	bl	8006b58 <_ZN3Pwm13Error_HandlerEv>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	633b      	str	r3, [r7, #48]	@ 0x30
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	637b      	str	r3, [r7, #52]	@ 0x34
	  if (HAL_TIMEx_MasterConfigSynchronization(&Htim, &sMasterConfig) != HAL_OK)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	3304      	adds	r3, #4
 8006aaa:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8006aae:	4611      	mov	r1, r2
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f005 facd 	bl	800c050 <HAL_TIMEx_MasterConfigSynchronization>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	bf14      	ite	ne
 8006abc:	2301      	movne	r3, #1
 8006abe:	2300      	moveq	r3, #0
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d002      	beq.n	8006acc <_ZN3Pwm4InitEP11TIM_TypeDefii+0xf8>
	  {
	    Error_Handler();
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f000 f846 	bl	8006b58 <_ZN3Pwm13Error_HandlerEv>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006acc:	2360      	movs	r3, #96	@ 0x60
 8006ace:	617b      	str	r3, [r7, #20]
	  sConfigOC.Pulse = 0;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	61bb      	str	r3, [r7, #24]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	61fb      	str	r3, [r7, #28]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	627b      	str	r3, [r7, #36]	@ 0x24
	  if (HAL_TIM_PWM_ConfigChannel(&Htim, &sConfigOC, chanel) != HAL_OK)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	3304      	adds	r3, #4
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	f107 0114 	add.w	r1, r7, #20
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f004 fe28 	bl	800b73c <HAL_TIM_PWM_ConfigChannel>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	bf14      	ite	ne
 8006af2:	2301      	movne	r3, #1
 8006af4:	2300      	moveq	r3, #0
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d002      	beq.n	8006b02 <_ZN3Pwm4InitEP11TIM_TypeDefii+0x12e>
	  {
	    Error_Handler();
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f000 f82b 	bl	8006b58 <_ZN3Pwm13Error_HandlerEv>
	  }
//	  HAL_TIM_MspPostInit(&Htim);
	HAL_TIM_PWM_Start(&Htim,chanel);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	3304      	adds	r3, #4
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	4611      	mov	r1, r2
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f004 fc76 	bl	800b3fc <HAL_TIM_PWM_Start>
	SicloTrabajo(0);
 8006b10:	2100      	movs	r1, #0
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f000 f804 	bl	8006b20 <_ZN3Pwm12SicloTrabajoEi>


//	__HAL_TIM_SET_COMPARE(&Htim, chanel, 500);
}
 8006b18:	bf00      	nop
 8006b1a:	3748      	adds	r7, #72	@ 0x48
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <_ZN3Pwm12SicloTrabajoEi>:
void Pwm::SicloTrabajo(int siclo)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
	// si 65535->100
	// x->siclo
	int valor=siclo*Htim.Init.Period/100;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	683a      	ldr	r2, [r7, #0]
 8006b30:	fb02 f303 	mul.w	r3, r2, r3
 8006b34:	4a07      	ldr	r2, [pc, #28]	@ (8006b54 <_ZN3Pwm12SicloTrabajoEi+0x34>)
 8006b36:	fba2 2303 	umull	r2, r3, r2, r3
 8006b3a:	095b      	lsrs	r3, r3, #5
 8006b3c:	60fb      	str	r3, [r7, #12]
	Htim.Instance->CCR1=valor;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8006b46:	bf00      	nop
 8006b48:	3714      	adds	r7, #20
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	51eb851f 	.word	0x51eb851f

08006b58 <_ZN3Pwm13Error_HandlerEv>:

void Pwm::Error_Handler(void)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]

}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <_ZN31CManejadorEventoSensorMagneticoC1Ev>:
 *      Author: W10
 */

#include <SensorMagnetico/CManejadorEventoSensorMagnetico.hpp>

CManejadorEventoSensorMagnetico::CManejadorEventoSensorMagnetico()
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	4a04      	ldr	r2, [pc, #16]	@ (8006b88 <_ZN31CManejadorEventoSensorMagneticoC1Ev+0x1c>)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr
 8006b88:	08010310 	.word	0x08010310

08006b8c <_ZN31CManejadorEventoSensorMagneticoD1Ev>:

CManejadorEventoSensorMagnetico::~CManejadorEventoSensorMagnetico()
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	4a04      	ldr	r2, [pc, #16]	@ (8006ba8 <_ZN31CManejadorEventoSensorMagneticoD1Ev+0x1c>)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr
 8006ba8:	08010310 	.word	0x08010310

08006bac <_ZN31CManejadorEventoSensorMagneticoD0Ev>:
CManejadorEventoSensorMagnetico::~CManejadorEventoSensorMagnetico()
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
}
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f7ff ffe9 	bl	8006b8c <_ZN31CManejadorEventoSensorMagneticoD1Ev>
 8006bba:	2104      	movs	r1, #4
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f005 fed5 	bl	800c96c <_ZdlPvj>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3708      	adds	r7, #8
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <_ZN31CManejadorEventoSensorMagnetico23OnSensorMagneticoChangeEi>:
void CManejadorEventoSensorMagnetico::OnSensorMagneticoChange(int Estado)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
	//evento que se llama cuando cambia el estado del sensor
}
 8006bd6:	bf00      	nop
 8006bd8:	370c      	adds	r7, #12
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
	...

08006be4 <_ZN15SensorMagneticoC1Ev>:
#include <SensorMagnetico/SensorMagnetico.hpp>
#include "stm32f4xx.h"
#include "Constantes.hpp"
#include "Uart/Uart.hpp"

SensorMagnetico::SensorMagnetico()
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	4a0a      	ldr	r2, [pc, #40]	@ (8006c18 <_ZN15SensorMagneticoC1Ev+0x34>)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	601a      	str	r2, [r3, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	60da      	str	r2, [r3, #12]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	611a      	str	r2, [r3, #16]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	615a      	str	r2, [r3, #20]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	619a      	str	r2, [r3, #24]
{
	// TODO Auto-generated constructor stub

}
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr
 8006c18:	08010324 	.word	0x08010324

08006c1c <_ZN15SensorMagneticoD1Ev>:

SensorMagnetico::~SensorMagnetico()
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	4a04      	ldr	r2, [pc, #16]	@ (8006c38 <_ZN15SensorMagneticoD1Ev+0x1c>)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr
 8006c38:	08010324 	.word	0x08010324

08006c3c <_ZN15SensorMagneticoD0Ev>:
SensorMagnetico::~SensorMagnetico()
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
}
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f7ff ffe9 	bl	8006c1c <_ZN15SensorMagneticoD1Ev>
 8006c4a:	211c      	movs	r1, #28
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f005 fe8d 	bl	800c96c <_ZdlPvj>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4618      	mov	r0, r3
 8006c56:	3708      	adds	r7, #8
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <_ZN15SensorMagnetico10ConfigurarEP12GPIO_TypeDeft>:

void SensorMagnetico::Configurar(GPIO_TypeDef *puerto, uint16_t pin)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	4613      	mov	r3, r2
 8006c68:	80fb      	strh	r3, [r7, #6]
	GPIO_Port = puerto;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	605a      	str	r2, [r3, #4]
	Gpio_Pin = pin;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	88fa      	ldrh	r2, [r7, #6]
 8006c74:	811a      	strh	r2, [r3, #8]

}
 8006c76:	bf00      	nop
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr

08006c82 <_ZN15SensorMagnetico4InitEv>:
void SensorMagnetico::Init()
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b088      	sub	sp, #32
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 8006c8a:	f107 030c 	add.w	r3, r7, #12
 8006c8e:	2200      	movs	r2, #0
 8006c90:	601a      	str	r2, [r3, #0]
 8006c92:	605a      	str	r2, [r3, #4]
 8006c94:	609a      	str	r2, [r3, #8]
 8006c96:	60da      	str	r2, [r3, #12]
 8006c98:	611a      	str	r2, [r3, #16]
	{ 0 };
	GPIO_InitStruct.Pin = Gpio_Pin;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	891b      	ldrh	r3, [r3, #8]
 8006c9e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	617b      	str	r3, [r7, #20]
	//PruebaTempratura(0);
	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f107 020c 	add.w	r2, r7, #12
 8006cb0:	4611      	mov	r1, r2
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f002 f9a2 	bl	8008ffc <HAL_GPIO_Init>
}
 8006cb8:	bf00      	nop
 8006cba:	3720      	adds	r7, #32
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <_ZN15SensorMagnetico22AsignaManejadorEventosEP31CManejadorEventoSensorMagnetico>:
void SensorMagnetico::AsignaManejadorEventos(
		CManejadorEventoSensorMagnetico *manejador)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
	Manejador = manejador;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	683a      	ldr	r2, [r7, #0]
 8006cce:	60da      	str	r2, [r3, #12]

}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <_ZN15SensorMagnetico4LeerEv>:
int SensorMagnetico::Leer()
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(GPIO_Port, Gpio_Pin); // lee el pin
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685a      	ldr	r2, [r3, #4]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	891b      	ldrh	r3, [r3, #8]
 8006cec:	4619      	mov	r1, r3
 8006cee:	4610      	mov	r0, r2
 8006cf0:	f002 fb08 	bl	8009304 <HAL_GPIO_ReadPin>
 8006cf4:	4603      	mov	r3, r0

}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3708      	adds	r7, #8
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
	...

08006d00 <_ZN26InterfaceSensorTemperaturaC1Ev>:
 *      Author: W10
 */

#include <SensorTemperatura/InterfaceSensorTemperatura/InterfaceSensorTemperatura.hpp>

InterfaceSensorTemperatura::InterfaceSensorTemperatura()
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	4a04      	ldr	r2, [pc, #16]	@ (8006d1c <_ZN26InterfaceSensorTemperaturaC1Ev+0x1c>)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4618      	mov	r0, r3
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr
 8006d1c:	08010334 	.word	0x08010334

08006d20 <_ZN26InterfaceSensorTemperaturaD1Ev>:

InterfaceSensorTemperatura::~InterfaceSensorTemperatura()
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	4a04      	ldr	r2, [pc, #16]	@ (8006d3c <_ZN26InterfaceSensorTemperaturaD1Ev+0x1c>)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4618      	mov	r0, r3
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr
 8006d3c:	08010334 	.word	0x08010334

08006d40 <_ZN26InterfaceSensorTemperaturaD0Ev>:
InterfaceSensorTemperatura::~InterfaceSensorTemperatura()
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
}
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f7ff ffe9 	bl	8006d20 <_ZN26InterfaceSensorTemperaturaD1Ev>
 8006d4e:	2104      	movs	r1, #4
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f005 fe0b 	bl	800c96c <_ZdlPvj>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3708      	adds	r7, #8
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <_ZN26InterfaceSensorTemperatura4InitEv>:

void InterfaceSensorTemperatura::Init()
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]

}
 8006d68:	bf00      	nop
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <_ZN26InterfaceSensorTemperatura13LeeTemepaturaEv>:
int InterfaceSensorTemperatura::LeeTemepatura()
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
	return 0;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	370c      	adds	r7, #12
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
	...

08006d8c <_ZN15SensorAnalogicoC1Ev>:
#include "stm32f4xx_hal_conf.h"
#include "Constantes.hpp"

extern I2C_HandleTypeDef hi2c1;

SensorAnalogico::SensorAnalogico()
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7ff ffb2 	bl	8006d00 <_ZN26InterfaceSensorTemperaturaC1Ev>
 8006d9c:	4a06      	ldr	r2, [pc, #24]	@ (8006db8 <_ZN15SensorAnalogicoC1Ev+0x2c>)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	601a      	str	r2, [r3, #0]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	651a      	str	r2, [r3, #80]	@ 0x50
{
	// TODO Auto-generated constructor stub

}
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4618      	mov	r0, r3
 8006db2:	3708      	adds	r7, #8
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	0801034c 	.word	0x0801034c

08006dbc <_ZN15SensorAnalogicoD1Ev>:

SensorAnalogico::~SensorAnalogico()
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	4a05      	ldr	r2, [pc, #20]	@ (8006ddc <_ZN15SensorAnalogicoD1Ev+0x20>)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7ff ffa7 	bl	8006d20 <_ZN26InterfaceSensorTemperaturaD1Ev>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3708      	adds	r7, #8
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	0801034c 	.word	0x0801034c

08006de0 <_ZN15SensorAnalogicoD0Ev>:
SensorAnalogico::~SensorAnalogico()
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
}
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f7ff ffe7 	bl	8006dbc <_ZN15SensorAnalogicoD1Ev>
 8006dee:	2154      	movs	r1, #84	@ 0x54
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f005 fdbb 	bl	800c96c <_ZdlPvj>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <_ZN15SensorAnalogico4InitEv>:

void SensorAnalogico::Init()
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b088      	sub	sp, #32
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8006e08:	2300      	movs	r3, #0
 8006e0a:	60fb      	str	r3, [r7, #12]
 8006e0c:	4b36      	ldr	r3, [pc, #216]	@ (8006ee8 <_ZN15SensorAnalogico4InitEv+0xe8>)
 8006e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e10:	4a35      	ldr	r2, [pc, #212]	@ (8006ee8 <_ZN15SensorAnalogico4InitEv+0xe8>)
 8006e12:	f043 0301 	orr.w	r3, r3, #1
 8006e16:	6313      	str	r3, [r2, #48]	@ 0x30
 8006e18:	4b33      	ldr	r3, [pc, #204]	@ (8006ee8 <_ZN15SensorAnalogico4InitEv+0xe8>)
 8006e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e1c:	f003 0301 	and.w	r3, r3, #1
 8006e20:	60fb      	str	r3, [r7, #12]
 8006e22:	68fb      	ldr	r3, [r7, #12]
	 ADC_ChannelConfTypeDef sConfig = {0};
 8006e24:	f107 0310 	add.w	r3, r7, #16
 8006e28:	2200      	movs	r2, #0
 8006e2a:	601a      	str	r2, [r3, #0]
 8006e2c:	605a      	str	r2, [r3, #4]
 8006e2e:	609a      	str	r2, [r3, #8]
 8006e30:	60da      	str	r2, [r3, #12]
	 hadc1.Instance = ADC1;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a2d      	ldr	r2, [pc, #180]	@ (8006eec <_ZN15SensorAnalogico4InitEv+0xec>)
 8006e36:	605a      	str	r2, [r3, #4]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2; //NUEVO
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	609a      	str	r2, [r3, #8]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B; //nuevo
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	60da      	str	r2, [r3, #12]

	 hadc1.Init.ScanConvMode =  DISABLE;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	615a      	str	r2, [r3, #20]
	 hadc1.Init.ContinuousConvMode = ENABLE;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	771a      	strb	r2, [r3, #28]
	 hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	 hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;//nuevo
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	631a      	str	r2, [r3, #48]	@ 0x30
	 hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a23      	ldr	r2, [pc, #140]	@ (8006ef0 <_ZN15SensorAnalogico4InitEv+0xf0>)
 8006e62:	62da      	str	r2, [r3, #44]	@ 0x2c
	 hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	611a      	str	r2, [r3, #16]
	 hadc1.State=	 HAL_ADC_STATE_RESET;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	645a      	str	r2, [r3, #68]	@ 0x44
	 hadc1.Init.NbrOfConversion = 1;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	621a      	str	r2, [r3, #32]
	  hadc1.Init.DMAContinuousRequests = DISABLE; //nuevo
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2201      	movs	r2, #1
 8006e82:	619a      	str	r2, [r3, #24]

	 if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	3304      	adds	r3, #4
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f001 fc71 	bl	8008770 <HAL_ADC_Init>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	bf14      	ite	ne
 8006e94:	2301      	movne	r3, #1
 8006e96:	2300      	moveq	r3, #0
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d002      	beq.n	8006ea4 <_ZN15SensorAnalogico4InitEv+0xa4>
	 {
	 Error_Handler();
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 f86a 	bl	8006f78 <_ZN15SensorAnalogico13Error_HandlerEv>
	 }

	 sConfig.Channel = ADC_CHANNEL_4;//ADC_CHANNEL_3;
 8006ea4:	2304      	movs	r3, #4
 8006ea6:	613b      	str	r3, [r7, #16]
	 sConfig.Rank =1; // ADC_REGULAR_RANK_1;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	617b      	str	r3, [r7, #20]
	 sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES; //ADC_SAMPLETIME_239CYCLES_5;
 8006eac:	2300      	movs	r3, #0
 8006eae:	61bb      	str	r3, [r7, #24]
	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	3304      	adds	r3, #4
 8006eb4:	f107 0210 	add.w	r2, r7, #16
 8006eb8:	4611      	mov	r1, r2
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f001 fd5e 	bl	800897c <HAL_ADC_ConfigChannel>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	bf14      	ite	ne
 8006ec6:	2301      	movne	r3, #1
 8006ec8:	2300      	moveq	r3, #0
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d002      	beq.n	8006ed6 <_ZN15SensorAnalogico4InitEv+0xd6>
	 {
	 Error_Handler();
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 f851 	bl	8006f78 <_ZN15SensorAnalogico13Error_HandlerEv>
	 }
	 HAL_ADC_Start(&hadc1);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	3304      	adds	r3, #4
 8006eda:	4618      	mov	r0, r3
 8006edc:	f001 fc8c 	bl	80087f8 <HAL_ADC_Start>

}
 8006ee0:	bf00      	nop
 8006ee2:	3720      	adds	r7, #32
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	40023800 	.word	0x40023800
 8006eec:	40012000 	.word	0x40012000
 8006ef0:	0f000001 	.word	0x0f000001

08006ef4 <_ZN15SensorAnalogico13LeeTemepaturaEv>:
int SensorAnalogico::LeeTemepatura()
{
 8006ef4:	b590      	push	{r4, r7, lr}
 8006ef6:	b085      	sub	sp, #20
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
	int tiempoactual=HAL_GetTick();
 8006efc:	f001 fc08 	bl	8008710 <HAL_GetTick>
 8006f00:	4603      	mov	r3, r0
 8006f02:	60fb      	str	r3, [r7, #12]
	if(tiempoactual<TiempoTranscurrido)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	da02      	bge.n	8006f14 <_ZN15SensorAnalogico13LeeTemepaturaEv+0x20>
	{
		return UltimaTemperatura;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f12:	e02b      	b.n	8006f6c <_ZN15SensorAnalogico13LeeTemepaturaEv+0x78>
	}
	TiempoTranscurrido=tiempoactual+500;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f503 72fa 	add.w	r2, r3, #500	@ 0x1f4
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	64da      	str	r2, [r3, #76]	@ 0x4c

	Init();
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	3308      	adds	r3, #8
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	4798      	blx	r3
	HAL_ADC_Start(&hadc1);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f001 fc62 	bl	80087f8 <HAL_ADC_Start>
	int valor=HAL_ADC_GetValue(&hadc1);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	3304      	adds	r3, #4
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f001 fd11 	bl	8008960 <HAL_ADC_GetValue>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	60bb      	str	r3, [r7, #8]
	//4095->500
	//valor->X
	//x=valor*500/4095
	UltimaTemperatura=(int)(valor*400/4095)+LeeMemoria();
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006f48:	fb02 f303 	mul.w	r3, r2, r3
 8006f4c:	4a09      	ldr	r2, [pc, #36]	@ (8006f74 <_ZN15SensorAnalogico13LeeTemepaturaEv+0x80>)
 8006f4e:	fb82 1203 	smull	r1, r2, r2, r3
 8006f52:	441a      	add	r2, r3
 8006f54:	12d2      	asrs	r2, r2, #11
 8006f56:	17db      	asrs	r3, r3, #31
 8006f58:	1ad4      	subs	r4, r2, r3
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f816 	bl	8006f8c <_ZN15SensorAnalogico10LeeMemoriaEv>
 8006f60:	4603      	mov	r3, r0
 8006f62:	18e2      	adds	r2, r4, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	651a      	str	r2, [r3, #80]	@ 0x50
	return 	UltimaTemperatura;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50

}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3714      	adds	r7, #20
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd90      	pop	{r4, r7, pc}
 8006f74:	80080081 	.word	0x80080081

08006f78 <_ZN15SensorAnalogico13Error_HandlerEv>:
void SensorAnalogico::Error_Handler(void)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]

}
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <_ZN15SensorAnalogico10LeeMemoriaEv>:
int SensorAnalogico::LeeMemoria()
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b088      	sub	sp, #32
 8006f90:	af04      	add	r7, sp, #16
 8006f92:	6078      	str	r0, [r7, #4]
 	uint16_t diferencia;
 	if( HAL_I2C_Mem_Read(&hi2c1,ADDRESS_EEPROM,DIRMEMORIARPROM::AJUSTETEMPERATURA,I2C_MEMADD_SIZE_8BIT,(uint8_t*)&diferencia,2,HAL_MAX_DELAY)==HAL_OK)
 8006f94:	f04f 33ff 	mov.w	r3, #4294967295
 8006f98:	9302      	str	r3, [sp, #8]
 8006f9a:	2302      	movs	r3, #2
 8006f9c:	9301      	str	r3, [sp, #4]
 8006f9e:	f107 030e 	add.w	r3, r7, #14
 8006fa2:	9300      	str	r3, [sp, #0]
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	2202      	movs	r2, #2
 8006fa8:	21a0      	movs	r1, #160	@ 0xa0
 8006faa:	480b      	ldr	r0, [pc, #44]	@ (8006fd8 <_ZN15SensorAnalogico10LeeMemoriaEv+0x4c>)
 8006fac:	f002 fc32 	bl	8009814 <HAL_I2C_Mem_Read>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	bf0c      	ite	eq
 8006fb6:	2301      	moveq	r3, #1
 8006fb8:	2300      	movne	r3, #0
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d005      	beq.n	8006fcc <_ZN15SensorAnalogico10LeeMemoriaEv+0x40>
 	{
 	 	if(diferencia>=-500 && diferencia<=500)
 8006fc0:	89fb      	ldrh	r3, [r7, #14]
 8006fc2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006fc6:	d801      	bhi.n	8006fcc <_ZN15SensorAnalogico10LeeMemoriaEv+0x40>
 	 	{
 	 		return diferencia;
 8006fc8:	89fb      	ldrh	r3, [r7, #14]
 8006fca:	e000      	b.n	8006fce <_ZN15SensorAnalogico10LeeMemoriaEv+0x42>
 	 	}
	}
 	return 0;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	200002bc 	.word	0x200002bc

08006fdc <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type>:

#include "Timer.hpp"
#include<stdbool.h>

bool CTimer::Init(TIM_TypeDef* TimInstance, uint32_t periodo, 	IRQn_Type Tim_Irq)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b08c      	sub	sp, #48	@ 0x30
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
 8006fe8:	70fb      	strb	r3, [r7, #3]
	Periodo = periodo;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	64da      	str	r2, [r3, #76]	@ 0x4c
	__HAL_RCC_TIM3_CLK_ENABLE();
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	617b      	str	r3, [r7, #20]
 8006ff4:	4b3b      	ldr	r3, [pc, #236]	@ (80070e4 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x108>)
 8006ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ff8:	4a3a      	ldr	r2, [pc, #232]	@ (80070e4 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x108>)
 8006ffa:	f043 0302 	orr.w	r3, r3, #2
 8006ffe:	6413      	str	r3, [r2, #64]	@ 0x40
 8007000:	4b38      	ldr	r3, [pc, #224]	@ (80070e4 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x108>)
 8007002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007004:	f003 0302 	and.w	r3, r3, #2
 8007008:	617b      	str	r3, [r7, #20]
 800700a:	697b      	ldr	r3, [r7, #20]
	HTim.Instance = TimInstance;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	68ba      	ldr	r2, [r7, #8]
 8007010:	601a      	str	r2, [r3, #0]
	HTim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	609a      	str	r2, [r3, #8]
	HTim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	611a      	str	r2, [r3, #16]
	//la siguiente configuracion es para que me de un tiempo de 83.3 micro segundos para generar la interrupcion
	
	HTim.Init.Period = 3350-1;//3000 - 1; //8399
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f640 5215 	movw	r2, #3349	@ 0xd15
 8007024:	60da      	str	r2, [r3, #12]
	HTim.Init.Prescaler = (Periodo * 1) - 1;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800702a:	1e5a      	subs	r2, r3, #1
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	605a      	str	r2, [r3, #4]
	HTim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	619a      	str	r2, [r3, #24]
	HTim.Init.RepetitionCounter = 0;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&HTim) != HAL_OK)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	4618      	mov	r0, r3
 8007040:	f004 f8d0 	bl	800b1e4 <HAL_TIM_Base_Init>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	bf14      	ite	ne
 800704a:	2301      	movne	r3, #1
 800704c:	2300      	moveq	r3, #0
 800704e:	b2db      	uxtb	r3, r3
 8007050:	2b00      	cmp	r3, #0
 8007052:	d001      	beq.n	8007058 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x7c>
	{
		return false;
 8007054:	2300      	movs	r3, #0
 8007056:	e041      	b.n	80070dc <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x100>
	}

	TIM_ClockConfigTypeDef TimClock =
 8007058:	f107 0320 	add.w	r3, r7, #32
 800705c:	2200      	movs	r2, #0
 800705e:	601a      	str	r2, [r3, #0]
 8007060:	605a      	str	r2, [r3, #4]
 8007062:	609a      	str	r2, [r3, #8]
 8007064:	60da      	str	r2, [r3, #12]
	{ 0 };
	TimClock.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007066:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800706a:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_ConfigClockSource(&HTim, &TimClock) != HAL_OK)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f107 0220 	add.w	r2, r7, #32
 8007072:	4611      	mov	r1, r2
 8007074:	4618      	mov	r0, r3
 8007076:	f004 fc23 	bl	800b8c0 <HAL_TIM_ConfigClockSource>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	bf14      	ite	ne
 8007080:	2301      	movne	r3, #1
 8007082:	2300      	moveq	r3, #0
 8007084:	b2db      	uxtb	r3, r3
 8007086:	2b00      	cmp	r3, #0
 8007088:	d001      	beq.n	800708e <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0xb2>
	{
		return false;
 800708a:	2300      	movs	r3, #0
 800708c:	e026      	b.n	80070dc <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x100>
	}

	TIM_MasterConfigTypeDef TimMaster =
 800708e:	f107 0318 	add.w	r3, r7, #24
 8007092:	2200      	movs	r2, #0
 8007094:	601a      	str	r2, [r3, #0]
 8007096:	605a      	str	r2, [r3, #4]
	{ 0 };
	TimMaster.MasterSlaveMode = TIM_SLAVEMODE_DISABLE;
 8007098:	2300      	movs	r3, #0
 800709a:	61fb      	str	r3, [r7, #28]
	TimMaster.MasterOutputTrigger = TIM_TRGO_RESET;
 800709c:	2300      	movs	r3, #0
 800709e:	61bb      	str	r3, [r7, #24]
	if (HAL_TIMEx_MasterConfigSynchronization(&HTim, &TimMaster) != HAL_OK)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f107 0218 	add.w	r2, r7, #24
 80070a6:	4611      	mov	r1, r2
 80070a8:	4618      	mov	r0, r3
 80070aa:	f004 ffd1 	bl	800c050 <HAL_TIMEx_MasterConfigSynchronization>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	bf14      	ite	ne
 80070b4:	2301      	movne	r3, #1
 80070b6:	2300      	moveq	r3, #0
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d001      	beq.n	80070c2 <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0xe6>
	{
		return false;
 80070be:	2300      	movs	r3, #0
 80070c0:	e00c      	b.n	80070dc <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type+0x100>
	}

	HAL_NVIC_SetPriority(Tim_Irq, 5, 0);
 80070c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070c6:	2200      	movs	r2, #0
 80070c8:	2105      	movs	r1, #5
 80070ca:	4618      	mov	r0, r3
 80070cc:	f001 ff5f 	bl	8008f8e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(Tim_Irq);
 80070d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070d4:	4618      	mov	r0, r3
 80070d6:	f001 ff76 	bl	8008fc6 <HAL_NVIC_EnableIRQ>
	return true;
 80070da:	2301      	movs	r3, #1
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3730      	adds	r7, #48	@ 0x30
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	40023800 	.word	0x40023800

080070e8 <_Z11uartx_writec>:
#include "string.h"
#include "stm32f4xx_hal.h"
UART_HandleTypeDef Huart1;

void uartx_write(char ch)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	4603      	mov	r3, r0
 80070f0:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&Huart1,(uint8_t*) &ch, 1, 0xffff);
 80070f2:	1df9      	adds	r1, r7, #7
 80070f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80070f8:	2201      	movs	r2, #1
 80070fa:	4803      	ldr	r0, [pc, #12]	@ (8007108 <_Z11uartx_writec+0x20>)
 80070fc:	f005 f87a 	bl	800c1f4 <HAL_UART_Transmit>

}
 8007100:	bf00      	nop
 8007102:	3708      	adds	r7, #8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}
 8007108:	200001f4 	.word	0x200001f4

0800710c <_Z16uartx_write_textPc>:

void uartx_write_text(char *info)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]

	while(*info)  uartx_write(*info++);
 8007114:	e006      	b.n	8007124 <_Z16uartx_write_textPc+0x18>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	1c5a      	adds	r2, r3, #1
 800711a:	607a      	str	r2, [r7, #4]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	4618      	mov	r0, r3
 8007120:	f7ff ffe2 	bl	80070e8 <_Z11uartx_writec>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1f4      	bne.n	8007116 <_Z16uartx_write_textPc+0xa>

}
 800712c:	bf00      	nop
 800712e:	bf00      	nop
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
	...

08007138 <_Z16USART1_UART_Initv>:
	}
}

//static
void USART1_UART_Init(void)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	Huart1.Instance = USART1;
 800713c:	4b13      	ldr	r3, [pc, #76]	@ (800718c <_Z16USART1_UART_Initv+0x54>)
 800713e:	4a14      	ldr	r2, [pc, #80]	@ (8007190 <_Z16USART1_UART_Initv+0x58>)
 8007140:	601a      	str	r2, [r3, #0]
	Huart1.Init.BaudRate = 115200;
 8007142:	4b12      	ldr	r3, [pc, #72]	@ (800718c <_Z16USART1_UART_Initv+0x54>)
 8007144:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007148:	605a      	str	r2, [r3, #4]
	Huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800714a:	4b10      	ldr	r3, [pc, #64]	@ (800718c <_Z16USART1_UART_Initv+0x54>)
 800714c:	2200      	movs	r2, #0
 800714e:	609a      	str	r2, [r3, #8]
	Huart1.Init.StopBits = UART_STOPBITS_1;
 8007150:	4b0e      	ldr	r3, [pc, #56]	@ (800718c <_Z16USART1_UART_Initv+0x54>)
 8007152:	2200      	movs	r2, #0
 8007154:	60da      	str	r2, [r3, #12]
	Huart1.Init.Parity = UART_PARITY_NONE;
 8007156:	4b0d      	ldr	r3, [pc, #52]	@ (800718c <_Z16USART1_UART_Initv+0x54>)
 8007158:	2200      	movs	r2, #0
 800715a:	611a      	str	r2, [r3, #16]
	Huart1.Init.Mode = UART_MODE_TX_RX;
 800715c:	4b0b      	ldr	r3, [pc, #44]	@ (800718c <_Z16USART1_UART_Initv+0x54>)
 800715e:	220c      	movs	r2, #12
 8007160:	615a      	str	r2, [r3, #20]
	Huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007162:	4b0a      	ldr	r3, [pc, #40]	@ (800718c <_Z16USART1_UART_Initv+0x54>)
 8007164:	2200      	movs	r2, #0
 8007166:	619a      	str	r2, [r3, #24]
	Huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007168:	4b08      	ldr	r3, [pc, #32]	@ (800718c <_Z16USART1_UART_Initv+0x54>)
 800716a:	2200      	movs	r2, #0
 800716c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&Huart1) != HAL_OK)
 800716e:	4807      	ldr	r0, [pc, #28]	@ (800718c <_Z16USART1_UART_Initv+0x54>)
 8007170:	f004 fff0 	bl	800c154 <HAL_UART_Init>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	bf14      	ite	ne
 800717a:	2301      	movne	r3, #1
 800717c:	2300      	moveq	r3, #0
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b00      	cmp	r3, #0
 8007182:	d001      	beq.n	8007188 <_Z16USART1_UART_Initv+0x50>
	{
		ErrorHandler();
 8007184:	f000 f806 	bl	8007194 <_Z12ErrorHandlerv>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8007188:	bf00      	nop
 800718a:	bd80      	pop	{r7, pc}
 800718c:	200001f4 	.word	0x200001f4
 8007190:	40011000 	.word	0x40011000

08007194 <_Z12ErrorHandlerv>:
void ErrorHandler(void)
{
 8007194:	b480      	push	{r7}
 8007196:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007198:	b672      	cpsid	i
}
 800719a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800719c:	bf00      	nop
 800719e:	e7fd      	b.n	800719c <_Z12ErrorHandlerv+0x8>

080071a0 <_Z12SerialPrintfPcz>:
	{
	}
	/* USER CODE END Error_Handler_Debug */
}
void SerialPrintf(char * formato, ...)
{
 80071a0:	b40f      	push	{r0, r1, r2, r3}
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b0be      	sub	sp, #248	@ 0xf8
 80071a6:	af00      	add	r7, sp, #0

    char *p;
    char buffer[100];

    char formatoFlotante[20];
    int posisionFormato=0;
 80071a8:	2300      	movs	r3, #0
 80071aa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    char tmp[100];
    int postmp=0;
 80071ae:	2300      	movs	r3, #0
 80071b0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    int posbuffer = 0;
 80071b4:	2300      	movs	r3, #0
 80071b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    va_list pa;
    int encontrado=0;
 80071ba:	2300      	movs	r3, #0
 80071bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    //float a;
    va_start(pa, formato);
 80071c0:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80071c4:	607b      	str	r3, [r7, #4]
    for (p = formato; *p; p++)
 80071c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80071ca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80071ce:	e143      	b.n	8007458 <_Z12SerialPrintfPcz+0x2b8>
    {

      if (*p != '%')
 80071d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	2b25      	cmp	r3, #37	@ 0x25
 80071d8:	d00f      	beq.n	80071fa <_Z12SerialPrintfPcz+0x5a>
      {
        buffer[posbuffer] = *p;
 80071da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071de:	7819      	ldrb	r1, [r3, #0]
 80071e0:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 80071e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80071e8:	4413      	add	r3, r2
 80071ea:	460a      	mov	r2, r1
 80071ec:	701a      	strb	r2, [r3, #0]
        posbuffer++;
 80071ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80071f2:	3301      	adds	r3, #1
 80071f4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
        continue;
 80071f8:	e129      	b.n	800744e <_Z12SerialPrintfPcz+0x2ae>
      }
      encontrado=0;
 80071fa:	2300      	movs	r3, #0
 80071fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      switch (*++p)
 8007200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007204:	3301      	adds	r3, #1
 8007206:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800720a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	2b2e      	cmp	r3, #46	@ 0x2e
 8007212:	f000 80a3 	beq.w	800735c <_Z12SerialPrintfPcz+0x1bc>
 8007216:	2b2e      	cmp	r3, #46	@ 0x2e
 8007218:	f2c0 80e2 	blt.w	80073e0 <_Z12SerialPrintfPcz+0x240>
 800721c:	2b78      	cmp	r3, #120	@ 0x78
 800721e:	f300 80df 	bgt.w	80073e0 <_Z12SerialPrintfPcz+0x240>
 8007222:	2b63      	cmp	r3, #99	@ 0x63
 8007224:	f2c0 80dc 	blt.w	80073e0 <_Z12SerialPrintfPcz+0x240>
 8007228:	3b63      	subs	r3, #99	@ 0x63
 800722a:	2b15      	cmp	r3, #21
 800722c:	f200 80d8 	bhi.w	80073e0 <_Z12SerialPrintfPcz+0x240>
 8007230:	a201      	add	r2, pc, #4	@ (adr r2, 8007238 <_Z12SerialPrintfPcz+0x98>)
 8007232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007236:	bf00      	nop
 8007238:	08007301 	.word	0x08007301
 800723c:	08007291 	.word	0x08007291
 8007240:	080073e1 	.word	0x080073e1
 8007244:	0800731d 	.word	0x0800731d
 8007248:	080073e1 	.word	0x080073e1
 800724c:	080073e1 	.word	0x080073e1
 8007250:	080072ad 	.word	0x080072ad
 8007254:	080073e1 	.word	0x080073e1
 8007258:	080073e1 	.word	0x080073e1
 800725c:	080073e1 	.word	0x080073e1
 8007260:	080073e1 	.word	0x080073e1
 8007264:	080073e1 	.word	0x080073e1
 8007268:	080073e1 	.word	0x080073e1
 800726c:	080072e5 	.word	0x080072e5
 8007270:	080073e1 	.word	0x080073e1
 8007274:	080073e1 	.word	0x080073e1
 8007278:	08007341 	.word	0x08007341
 800727c:	080073e1 	.word	0x080073e1
 8007280:	080073e1 	.word	0x080073e1
 8007284:	080073e1 	.word	0x080073e1
 8007288:	080073e1 	.word	0x080073e1
 800728c:	080072c9 	.word	0x080072c9
      {
        case 'd':
          sprintf(tmp, "%d", va_arg(pa, int));
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	1d1a      	adds	r2, r3, #4
 8007294:	607a      	str	r2, [r7, #4]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	f107 0308 	add.w	r3, r7, #8
 800729c:	497b      	ldr	r1, [pc, #492]	@ (800748c <_Z12SerialPrintfPcz+0x2ec>)
 800729e:	4618      	mov	r0, r3
 80072a0:	f006 f962 	bl	800d568 <siprintf>
          encontrado=1;
 80072a4:	2301      	movs	r3, #1
 80072a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 80072aa:	e0a9      	b.n	8007400 <_Z12SerialPrintfPcz+0x260>
        case 'i':
          sprintf(tmp, "%i", va_arg(pa, int));
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	1d1a      	adds	r2, r3, #4
 80072b0:	607a      	str	r2, [r7, #4]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	f107 0308 	add.w	r3, r7, #8
 80072b8:	4975      	ldr	r1, [pc, #468]	@ (8007490 <_Z12SerialPrintfPcz+0x2f0>)
 80072ba:	4618      	mov	r0, r3
 80072bc:	f006 f954 	bl	800d568 <siprintf>
          encontrado=1;
 80072c0:	2301      	movs	r3, #1
 80072c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 80072c6:	e09b      	b.n	8007400 <_Z12SerialPrintfPcz+0x260>
        case 'x':
          sprintf(tmp, "%x", va_arg(pa, int));
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	1d1a      	adds	r2, r3, #4
 80072cc:	607a      	str	r2, [r7, #4]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	f107 0308 	add.w	r3, r7, #8
 80072d4:	496f      	ldr	r1, [pc, #444]	@ (8007494 <_Z12SerialPrintfPcz+0x2f4>)
 80072d6:	4618      	mov	r0, r3
 80072d8:	f006 f946 	bl	800d568 <siprintf>
          encontrado=1;
 80072dc:	2301      	movs	r3, #1
 80072de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 80072e2:	e08d      	b.n	8007400 <_Z12SerialPrintfPcz+0x260>
        case 'p':
          sprintf(tmp, "%p", va_arg(pa, void*));
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	1d1a      	adds	r2, r3, #4
 80072e8:	607a      	str	r2, [r7, #4]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	f107 0308 	add.w	r3, r7, #8
 80072f0:	4969      	ldr	r1, [pc, #420]	@ (8007498 <_Z12SerialPrintfPcz+0x2f8>)
 80072f2:	4618      	mov	r0, r3
 80072f4:	f006 f938 	bl	800d568 <siprintf>
          encontrado=1;
 80072f8:	2301      	movs	r3, #1
 80072fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 80072fe:	e07f      	b.n	8007400 <_Z12SerialPrintfPcz+0x260>
        case 'c':
          sprintf(tmp, "%c", va_arg(pa, int));
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	1d1a      	adds	r2, r3, #4
 8007304:	607a      	str	r2, [r7, #4]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	f107 0308 	add.w	r3, r7, #8
 800730c:	4963      	ldr	r1, [pc, #396]	@ (800749c <_Z12SerialPrintfPcz+0x2fc>)
 800730e:	4618      	mov	r0, r3
 8007310:	f006 f92a 	bl	800d568 <siprintf>
          encontrado=1;
 8007314:	2301      	movs	r3, #1
 8007316:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 800731a:	e071      	b.n	8007400 <_Z12SerialPrintfPcz+0x260>
        case 'f':
          sprintf(tmp, "%f", va_arg(pa, double));
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	3307      	adds	r3, #7
 8007320:	f023 0307 	bic.w	r3, r3, #7
 8007324:	f103 0208 	add.w	r2, r3, #8
 8007328:	607a      	str	r2, [r7, #4]
 800732a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732e:	f107 0008 	add.w	r0, r7, #8
 8007332:	495b      	ldr	r1, [pc, #364]	@ (80074a0 <_Z12SerialPrintfPcz+0x300>)
 8007334:	f006 f918 	bl	800d568 <siprintf>
          encontrado=1;
 8007338:	2301      	movs	r3, #1
 800733a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 800733e:	e05f      	b.n	8007400 <_Z12SerialPrintfPcz+0x260>
        case 's':
          sprintf(tmp, "%s", va_arg(pa, char *));
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	1d1a      	adds	r2, r3, #4
 8007344:	607a      	str	r2, [r7, #4]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	f107 0308 	add.w	r3, r7, #8
 800734c:	4955      	ldr	r1, [pc, #340]	@ (80074a4 <_Z12SerialPrintfPcz+0x304>)
 800734e:	4618      	mov	r0, r3
 8007350:	f006 f90a 	bl	800d568 <siprintf>
          encontrado=1;
 8007354:	2301      	movs	r3, #1
 8007356:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          break;
 800735a:	e051      	b.n	8007400 <_Z12SerialPrintfPcz+0x260>
        case '.':
        	//asume que es flotante con decimales definidos
        	formatoFlotante[0]='%';
 800735c:	2325      	movs	r3, #37	@ 0x25
 800735e:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
        	posisionFormato=1;
 8007362:	2301      	movs	r3, #1
 8007364:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
        	while(*p!='f')
 8007368:	e013      	b.n	8007392 <_Z12SerialPrintfPcz+0x1f2>
        	{
        		formatoFlotante[posisionFormato]=*p;
 800736a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800736e:	7819      	ldrb	r1, [r3, #0]
 8007370:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8007374:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007378:	4413      	add	r3, r2
 800737a:	460a      	mov	r2, r1
 800737c:	701a      	strb	r2, [r3, #0]
        		p++;
 800737e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007382:	3301      	adds	r3, #1
 8007384:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
        		posisionFormato++;
 8007388:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800738c:	3301      	adds	r3, #1
 800738e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
        	while(*p!='f')
 8007392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	2b66      	cmp	r3, #102	@ 0x66
 800739a:	d1e6      	bne.n	800736a <_Z12SerialPrintfPcz+0x1ca>
        	}
        	formatoFlotante[posisionFormato]='f';
 800739c:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80073a0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80073a4:	4413      	add	r3, r2
 80073a6:	2266      	movs	r2, #102	@ 0x66
 80073a8:	701a      	strb	r2, [r3, #0]
        	formatoFlotante[posisionFormato+1]='\0';
 80073aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80073ae:	3301      	adds	r3, #1
 80073b0:	33f8      	adds	r3, #248	@ 0xf8
 80073b2:	443b      	add	r3, r7
 80073b4:	2200      	movs	r2, #0
 80073b6:	f803 2c8c 	strb.w	r2, [r3, #-140]
            sprintf(tmp, formatoFlotante, va_arg(pa, double));
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	3307      	adds	r3, #7
 80073be:	f023 0307 	bic.w	r3, r3, #7
 80073c2:	f103 0208 	add.w	r2, r3, #8
 80073c6:	607a      	str	r2, [r7, #4]
 80073c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073cc:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80073d0:	f107 0008 	add.w	r0, r7, #8
 80073d4:	f006 f8c8 	bl	800d568 <siprintf>
            encontrado=1;
 80073d8:	2301      	movs	r3, #1
 80073da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
            break;
 80073de:	e00f      	b.n	8007400 <_Z12SerialPrintfPcz+0x260>
        default:
          buffer[posbuffer] = *p;
 80073e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073e4:	7819      	ldrb	r1, [r3, #0]
 80073e6:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 80073ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80073ee:	4413      	add	r3, r2
 80073f0:	460a      	mov	r2, r1
 80073f2:	701a      	strb	r2, [r3, #0]
          posbuffer++;
 80073f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80073f8:	3301      	adds	r3, #1
 80073fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
          break;
 80073fe:	bf00      	nop
      }
      if(encontrado==1)
 8007400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007404:	2b01      	cmp	r3, #1
 8007406:	d122      	bne.n	800744e <_Z12SerialPrintfPcz+0x2ae>
      {
          postmp=0;
 8007408:	2300      	movs	r3, #0
 800740a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
          while(tmp[postmp]!='\0')
 800740e:	e016      	b.n	800743e <_Z12SerialPrintfPcz+0x29e>
          {
          buffer[posbuffer] = tmp[postmp];
 8007410:	f107 0208 	add.w	r2, r7, #8
 8007414:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007418:	4413      	add	r3, r2
 800741a:	7819      	ldrb	r1, [r3, #0]
 800741c:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8007420:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007424:	4413      	add	r3, r2
 8007426:	460a      	mov	r2, r1
 8007428:	701a      	strb	r2, [r3, #0]
          posbuffer++;
 800742a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800742e:	3301      	adds	r3, #1
 8007430:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
          postmp++;
 8007434:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007438:	3301      	adds	r3, #1
 800743a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
          while(tmp[postmp]!='\0')
 800743e:	f107 0208 	add.w	r2, r7, #8
 8007442:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007446:	4413      	add	r3, r2
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1e0      	bne.n	8007410 <_Z12SerialPrintfPcz+0x270>
    for (p = formato; *p; p++)
 800744e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007452:	3301      	adds	r3, #1
 8007454:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	f47f aeb6 	bne.w	80071d0 <_Z12SerialPrintfPcz+0x30>
          }
      }
    }
    va_end(pa);
    buffer[posbuffer] = '\0';
 8007464:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8007468:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800746c:	4413      	add	r3, r2
 800746e:	2200      	movs	r2, #0
 8007470:	701a      	strb	r2, [r3, #0]
    uartx_write_text(buffer);
 8007472:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8007476:	4618      	mov	r0, r3
 8007478:	f7ff fe48 	bl	800710c <_Z16uartx_write_textPc>
}
 800747c:	bf00      	nop
 800747e:	37f8      	adds	r7, #248	@ 0xf8
 8007480:	46bd      	mov	sp, r7
 8007482:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007486:	b004      	add	sp, #16
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	0800f830 	.word	0x0800f830
 8007490:	0800f834 	.word	0x0800f834
 8007494:	0800f838 	.word	0x0800f838
 8007498:	0800f83c 	.word	0x0800f83c
 800749c:	0800f840 	.word	0x0800f840
 80074a0:	0800f844 	.word	0x0800f844
 80074a4:	0800f848 	.word	0x0800f848

080074a8 <_ZN6CTimerC1Ev>:
#define INC_TIMER_HPP_

#include "main.h"
#include <stdio.h>
#include<stdbool.h>
class CTimer
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4618      	mov	r0, r3
 80074ba:	370c      	adds	r7, #12
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <_Z16IncializaSistemav>:
CestacionBaku601 *estacion;
//TIM_HandleTypeDef htim2;
CManejadorPantallas ManejadorPantallas;
CManejadorControles *ManejadorControles;
void IncializaSistema()
{
 80074c4:	b590      	push	{r4, r7, lr}
 80074c6:	b095      	sub	sp, #84	@ 0x54
 80074c8:	af00      	add	r7, sp, #0
	USART1_UART_Init();
 80074ca:	f7ff fe35 	bl	8007138 <_Z16USART1_UART_Initv>
	CTimer timer;
 80074ce:	463b      	mov	r3, r7
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7ff ffe9 	bl	80074a8 <_ZN6CTimerC1Ev>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80074d6:	2200      	movs	r2, #0
 80074d8:	2100      	movs	r1, #0
 80074da:	2028      	movs	r0, #40	@ 0x28
 80074dc:	f001 fd57 	bl	8008f8e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80074e0:	2028      	movs	r0, #40	@ 0x28
 80074e2:	f001 fd70 	bl	8008fc6 <HAL_NVIC_EnableIRQ>

	estacion = new CestacionBaku601();
 80074e6:	20f0      	movs	r0, #240	@ 0xf0
 80074e8:	f005 fa42 	bl	800c970 <_Znwj>
 80074ec:	4603      	mov	r3, r0
 80074ee:	461c      	mov	r4, r3
 80074f0:	4620      	mov	r0, r4
 80074f2:	f7fa faaf 	bl	8001a54 <_ZN16CestacionBaku601C1Ev>
 80074f6:	4b0f      	ldr	r3, [pc, #60]	@ (8007534 <_Z16IncializaSistemav+0x70>)
 80074f8:	601c      	str	r4, [r3, #0]
	ManejadorControles=new CManejadorControles();
 80074fa:	f44f 7092 	mov.w	r0, #292	@ 0x124
 80074fe:	f005 fa37 	bl	800c970 <_Znwj>
 8007502:	4603      	mov	r3, r0
 8007504:	461c      	mov	r4, r3
 8007506:	4620      	mov	r0, r4
 8007508:	f7fe ff30 	bl	800636c <_ZN19CManejadorControlesC1Ev>
 800750c:	4b0a      	ldr	r3, [pc, #40]	@ (8007538 <_Z16IncializaSistemav+0x74>)
 800750e:	601c      	str	r4, [r3, #0]
	ILI9341_Init(); //initial driver setup to drive ili9341
 8007510:	f7fe fb8c 	bl	8005c2c <_Z12ILI9341_Initv>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8007514:	2003      	movs	r0, #3
 8007516:	f7fe fb2b 	bl	8005b70 <_Z20ILI9341_Set_Rotationh>
	ILI9341_Fill_Screen(BLACK);
 800751a:	2000      	movs	r0, #0
 800751c:	f7fe fd2e 	bl	8005f7c <_Z19ILI9341_Fill_Screent>
	//nicio eltimer
	timer.Init(TIM3, 1,  TIM3_IRQn);
 8007520:	4638      	mov	r0, r7
 8007522:	231d      	movs	r3, #29
 8007524:	2201      	movs	r2, #1
 8007526:	4905      	ldr	r1, [pc, #20]	@ (800753c <_Z16IncializaSistemav+0x78>)
 8007528:	f7ff fd58 	bl	8006fdc <_ZN6CTimer4InitEP11TIM_TypeDefm9IRQn_Type>

}
 800752c:	bf00      	nop
 800752e:	3754      	adds	r7, #84	@ 0x54
 8007530:	46bd      	mov	sp, r7
 8007532:	bd90      	pop	{r4, r7, pc}
 8007534:	2000023c 	.word	0x2000023c
 8007538:	20000270 	.word	0x20000270
 800753c:	40000400 	.word	0x40000400

08007540 <_Z14EjecutaSistemav>:

void EjecutaSistema()
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
	int n=0;
 8007546:	2300      	movs	r3, #0
 8007548:	607b      	str	r3, [r7, #4]
	ManejadorPantallas.SetEstacion(estacion);
 800754a:	4b11      	ldr	r3, [pc, #68]	@ (8007590 <_Z14EjecutaSistemav+0x50>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4619      	mov	r1, r3
 8007550:	4810      	ldr	r0, [pc, #64]	@ (8007594 <_Z14EjecutaSistemav+0x54>)
 8007552:	f7fb ff21 	bl	8003398 <_ZN19CManejadorPantallas11SetEstacionEP13CEstacionBase>
	ManejadorPantallas.SetManejadorControles(ManejadorControles);
 8007556:	4b10      	ldr	r3, [pc, #64]	@ (8007598 <_Z14EjecutaSistemav+0x58>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4619      	mov	r1, r3
 800755c:	480d      	ldr	r0, [pc, #52]	@ (8007594 <_Z14EjecutaSistemav+0x54>)
 800755e:	f7fb ffcd 	bl	80034fc <_ZN19CManejadorPantallas21SetManejadorControlesEP19CManejadorControles>
	ManejadorPantallas.MuestraPantallaManual();
 8007562:	480c      	ldr	r0, [pc, #48]	@ (8007594 <_Z14EjecutaSistemav+0x54>)
 8007564:	f7fb ff26 	bl	80033b4 <_ZN19CManejadorPantallas21MuestraPantallaManualEv>
	while (true)
	{
		n++;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	3301      	adds	r3, #1
 800756c:	607b      	str	r3, [r7, #4]
		estacion->Procesa();
 800756e:	4b08      	ldr	r3, [pc, #32]	@ (8007590 <_Z14EjecutaSistemav+0x50>)
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	4b07      	ldr	r3, [pc, #28]	@ (8007590 <_Z14EjecutaSistemav+0x50>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	3330      	adds	r3, #48	@ 0x30
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4610      	mov	r0, r2
 800757e:	4798      	blx	r3
		ManejadorPantallas.RefrescaPantalla();
 8007580:	4804      	ldr	r0, [pc, #16]	@ (8007594 <_Z14EjecutaSistemav+0x54>)
 8007582:	f7fb ff4f 	bl	8003424 <_ZN19CManejadorPantallas16RefrescaPantallaEv>
		HAL_Delay(1);
 8007586:	2001      	movs	r0, #1
 8007588:	f001 f8ce 	bl	8008728 <HAL_Delay>
		n++;
 800758c:	bf00      	nop
 800758e:	e7eb      	b.n	8007568 <_Z14EjecutaSistemav+0x28>
 8007590:	2000023c 	.word	0x2000023c
 8007594:	20000240 	.word	0x20000240
 8007598:	20000270 	.word	0x20000270

0800759c <HAL_GPIO_EXTI_Callback>:
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	4603      	mov	r3, r0
 80075a4:	80fb      	strh	r3, [r7, #6]
	if(estacion!=NULL)
 80075a6:	4b10      	ldr	r3, [pc, #64]	@ (80075e8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d009      	beq.n	80075c2 <HAL_GPIO_EXTI_Callback+0x26>
	{
		estacion->GPIO_INTERRUPCION(GPIO_Pin);
 80075ae:	4b0e      	ldr	r3, [pc, #56]	@ (80075e8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	4b0d      	ldr	r3, [pc, #52]	@ (80075e8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	3354      	adds	r3, #84	@ 0x54
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	88f9      	ldrh	r1, [r7, #6]
 80075be:	4610      	mov	r0, r2
 80075c0:	4798      	blx	r3
	}
	if(ManejadorControles!=NULL)
 80075c2:	4b0a      	ldr	r3, [pc, #40]	@ (80075ec <HAL_GPIO_EXTI_Callback+0x50>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d009      	beq.n	80075de <HAL_GPIO_EXTI_Callback+0x42>
	{
		ManejadorControles->GPIO_INTERRUPCION(GPIO_Pin);
 80075ca:	4b08      	ldr	r3, [pc, #32]	@ (80075ec <HAL_GPIO_EXTI_Callback+0x50>)
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	4b07      	ldr	r3, [pc, #28]	@ (80075ec <HAL_GPIO_EXTI_Callback+0x50>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	3334      	adds	r3, #52	@ 0x34
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	88f9      	ldrh	r1, [r7, #6]
 80075da:	4610      	mov	r0, r2
 80075dc:	4798      	blx	r3
	}
}
 80075de:	bf00      	nop
 80075e0:	3708      	adds	r7, #8
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	2000023c 	.word	0x2000023c
 80075ec:	20000270 	.word	0x20000270

080075f0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM3)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a0a      	ldr	r2, [pc, #40]	@ (8007628 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d10e      	bne.n	8007620 <HAL_TIM_PeriodElapsedCallback+0x30>
	{
		if(estacion==NULL)
 8007602:	4b0a      	ldr	r3, [pc, #40]	@ (800762c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d009      	beq.n	800761e <HAL_TIM_PeriodElapsedCallback+0x2e>
			return;
		estacion->TimerTick();
 800760a:	4b08      	ldr	r3, [pc, #32]	@ (800762c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	4b07      	ldr	r3, [pc, #28]	@ (800762c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	3340      	adds	r3, #64	@ 0x40
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4610      	mov	r0, r2
 800761a:	4798      	blx	r3
 800761c:	e000      	b.n	8007620 <HAL_TIM_PeriodElapsedCallback+0x30>
			return;
 800761e:	bf00      	nop
	}
}
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	40000400 	.word	0x40000400
 800762c:	2000023c 	.word	0x2000023c

08007630 <_Z41__static_initialization_and_destruction_0ii>:
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d107      	bne.n	8007650 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007646:	4293      	cmp	r3, r2
 8007648:	d102      	bne.n	8007650 <_Z41__static_initialization_and_destruction_0ii+0x20>
CManejadorPantallas ManejadorPantallas;
 800764a:	4809      	ldr	r0, [pc, #36]	@ (8007670 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800764c:	f7fb fe5e 	bl	800330c <_ZN19CManejadorPantallasC1Ev>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d107      	bne.n	8007666 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800765c:	4293      	cmp	r3, r2
 800765e:	d102      	bne.n	8007666 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8007660:	4803      	ldr	r0, [pc, #12]	@ (8007670 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8007662:	f7fb fe79 	bl	8003358 <_ZN19CManejadorPantallasD1Ev>
}
 8007666:	bf00      	nop
 8007668:	3708      	adds	r7, #8
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	20000240 	.word	0x20000240

08007674 <_GLOBAL__sub_I_estacion>:
 8007674:	b580      	push	{r7, lr}
 8007676:	af00      	add	r7, sp, #0
 8007678:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800767c:	2001      	movs	r0, #1
 800767e:	f7ff ffd7 	bl	8007630 <_Z41__static_initialization_and_destruction_0ii>
 8007682:	bd80      	pop	{r7, pc}

08007684 <_GLOBAL__sub_D_estacion>:
 8007684:	b580      	push	{r7, lr}
 8007686:	af00      	add	r7, sp, #0
 8007688:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800768c:	2000      	movs	r0, #0
 800768e:	f7ff ffcf 	bl	8007630 <_Z41__static_initialization_and_destruction_0ii>
 8007692:	bd80      	pop	{r7, pc}

08007694 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b08a      	sub	sp, #40	@ 0x28
 8007698:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800769a:	2300      	movs	r3, #0
 800769c:	613b      	str	r3, [r7, #16]
 800769e:	4b6e      	ldr	r3, [pc, #440]	@ (8007858 <MX_GPIO_Init+0x1c4>)
 80076a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076a2:	4a6d      	ldr	r2, [pc, #436]	@ (8007858 <MX_GPIO_Init+0x1c4>)
 80076a4:	f043 0310 	orr.w	r3, r3, #16
 80076a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80076aa:	4b6b      	ldr	r3, [pc, #428]	@ (8007858 <MX_GPIO_Init+0x1c4>)
 80076ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ae:	f003 0310 	and.w	r3, r3, #16
 80076b2:	613b      	str	r3, [r7, #16]
 80076b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80076b6:	2300      	movs	r3, #0
 80076b8:	60fb      	str	r3, [r7, #12]
 80076ba:	4b67      	ldr	r3, [pc, #412]	@ (8007858 <MX_GPIO_Init+0x1c4>)
 80076bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076be:	4a66      	ldr	r2, [pc, #408]	@ (8007858 <MX_GPIO_Init+0x1c4>)
 80076c0:	f043 0304 	orr.w	r3, r3, #4
 80076c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80076c6:	4b64      	ldr	r3, [pc, #400]	@ (8007858 <MX_GPIO_Init+0x1c4>)
 80076c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ca:	f003 0304 	and.w	r3, r3, #4
 80076ce:	60fb      	str	r3, [r7, #12]
 80076d0:	68fb      	ldr	r3, [r7, #12]
//  __HAL_RCC_GPIOF_CLK_ENABLE();
//  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80076d2:	2300      	movs	r3, #0
 80076d4:	60bb      	str	r3, [r7, #8]
 80076d6:	4b60      	ldr	r3, [pc, #384]	@ (8007858 <MX_GPIO_Init+0x1c4>)
 80076d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076da:	4a5f      	ldr	r2, [pc, #380]	@ (8007858 <MX_GPIO_Init+0x1c4>)
 80076dc:	f043 0301 	orr.w	r3, r3, #1
 80076e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80076e2:	4b5d      	ldr	r3, [pc, #372]	@ (8007858 <MX_GPIO_Init+0x1c4>)
 80076e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076e6:	f003 0301 	and.w	r3, r3, #1
 80076ea:	60bb      	str	r3, [r7, #8]
 80076ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80076ee:	2300      	movs	r3, #0
 80076f0:	607b      	str	r3, [r7, #4]
 80076f2:	4b59      	ldr	r3, [pc, #356]	@ (8007858 <MX_GPIO_Init+0x1c4>)
 80076f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076f6:	4a58      	ldr	r2, [pc, #352]	@ (8007858 <MX_GPIO_Init+0x1c4>)
 80076f8:	f043 0302 	orr.w	r3, r3, #2
 80076fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80076fe:	4b56      	ldr	r3, [pc, #344]	@ (8007858 <MX_GPIO_Init+0x1c4>)
 8007700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007702:	f003 0302 	and.w	r3, r3, #2
 8007706:	607b      	str	r3, [r7, #4]
 8007708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800770a:	2300      	movs	r3, #0
 800770c:	603b      	str	r3, [r7, #0]
 800770e:	4b52      	ldr	r3, [pc, #328]	@ (8007858 <MX_GPIO_Init+0x1c4>)
 8007710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007712:	4a51      	ldr	r2, [pc, #324]	@ (8007858 <MX_GPIO_Init+0x1c4>)
 8007714:	f043 0308 	orr.w	r3, r3, #8
 8007718:	6313      	str	r3, [r2, #48]	@ 0x30
 800771a:	4b4f      	ldr	r3, [pc, #316]	@ (8007858 <MX_GPIO_Init+0x1c4>)
 800771c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800771e:	f003 0308 	and.w	r3, r3, #8
 8007722:	603b      	str	r3, [r7, #0]
 8007724:	683b      	ldr	r3, [r7, #0]
//  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8007726:	2304      	movs	r3, #4
 8007728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800772a:	2300      	movs	r3, #0
 800772c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800772e:	2300      	movs	r3, #0
 8007730:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8007732:	f107 0314 	add.w	r3, r7, #20
 8007736:	4619      	mov	r1, r3
 8007738:	4848      	ldr	r0, [pc, #288]	@ (800785c <MX_GPIO_Init+0x1c8>)
 800773a:	f001 fc5f 	bl	8008ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 800773e:	2368      	movs	r3, #104	@ 0x68
 8007740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007742:	2301      	movs	r3, #1
 8007744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007746:	2300      	movs	r3, #0
 8007748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800774a:	2303      	movs	r3, #3
 800774c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800774e:	f107 0314 	add.w	r3, r7, #20
 8007752:	4619      	mov	r1, r3
 8007754:	4841      	ldr	r0, [pc, #260]	@ (800785c <MX_GPIO_Init+0x1c8>)
 8007756:	f001 fc51 	bl	8008ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 800775a:	2310      	movs	r3, #16
 800775c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800775e:	2300      	movs	r3, #0
 8007760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007762:	2301      	movs	r3, #1
 8007764:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8007766:	f107 0314 	add.w	r3, r7, #20
 800776a:	4619      	mov	r1, r3
 800776c:	483b      	ldr	r0, [pc, #236]	@ (800785c <MX_GPIO_Init+0x1c8>)
 800776e:	f001 fc45 	bl	8008ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 8007772:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007778:	2300      	movs	r3, #0
 800777a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800777c:	2300      	movs	r3, #0
 800777e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8007780:	f107 0314 	add.w	r3, r7, #20
 8007784:	4619      	mov	r1, r3
 8007786:	4836      	ldr	r0, [pc, #216]	@ (8007860 <MX_GPIO_Init+0x1cc>)
 8007788:	f001 fc38 	bl	8008ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800778c:	2332      	movs	r3, #50	@ 0x32
 800778e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007790:	2302      	movs	r3, #2
 8007792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007794:	2300      	movs	r3, #0
 8007796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007798:	2303      	movs	r3, #3
 800779a:	623b      	str	r3, [r7, #32]
  //GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800779c:	f107 0314 	add.w	r3, r7, #20
 80077a0:	4619      	mov	r1, r3
 80077a2:	482f      	ldr	r0, [pc, #188]	@ (8007860 <MX_GPIO_Init+0x1cc>)
 80077a4:	f001 fc2a 	bl	8008ffc <HAL_GPIO_Init>
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
////  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
//  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80077a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80077ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077ae:	2302      	movs	r3, #2
 80077b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077b2:	2300      	movs	r3, #0
 80077b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077b6:	2303      	movs	r3, #3
 80077b8:	623b      	str	r3, [r7, #32]
  //GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80077ba:	f107 0314 	add.w	r3, r7, #20
 80077be:	4619      	mov	r1, r3
 80077c0:	4828      	ldr	r0, [pc, #160]	@ (8007864 <MX_GPIO_Init+0x1d0>)
 80077c2:	f001 fc1b 	bl	8008ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80077c6:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 80077ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80077cc:	2301      	movs	r3, #1
 80077ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077d0:	2300      	movs	r3, #0
 80077d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077d4:	2300      	movs	r3, #0
 80077d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077d8:	f107 0314 	add.w	r3, r7, #20
 80077dc:	4619      	mov	r1, r3
 80077de:	4821      	ldr	r0, [pc, #132]	@ (8007864 <MX_GPIO_Init+0x1d0>)
 80077e0:	f001 fc0c 	bl	8008ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80077e4:	2340      	movs	r3, #64	@ 0x40
 80077e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80077e8:	2301      	movs	r3, #1
 80077ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077ec:	2300      	movs	r3, #0
 80077ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077f0:	2300      	movs	r3, #0
 80077f2:	623b      	str	r3, [r7, #32]
  //HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80077f4:	2380      	movs	r3, #128	@ 0x80
 80077f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80077f8:	2300      	movs	r3, #0
 80077fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077fc:	2300      	movs	r3, #0
 80077fe:	61fb      	str	r3, [r7, #28]
  //HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8007800:	2323      	movs	r3, #35	@ 0x23
 8007802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007804:	2301      	movs	r3, #1
 8007806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007808:	2300      	movs	r3, #0
 800780a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800780c:	2303      	movs	r3, #3
 800780e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007810:	f107 0314 	add.w	r3, r7, #20
 8007814:	4619      	mov	r1, r3
 8007816:	4812      	ldr	r0, [pc, #72]	@ (8007860 <MX_GPIO_Init+0x1cc>)
 8007818:	f001 fbf0 	bl	8008ffc <HAL_GPIO_Init>
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  //GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
//  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800781c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8007820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007822:	2302      	movs	r3, #2
 8007824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007826:	2300      	movs	r3, #0
 8007828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800782a:	2303      	movs	r3, #3
 800782c:	623b      	str	r3, [r7, #32]
//  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
//  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 800782e:	2200      	movs	r2, #0
 8007830:	2168      	movs	r1, #104	@ 0x68
 8007832:	480a      	ldr	r0, [pc, #40]	@ (800785c <MX_GPIO_Init+0x1c8>)
 8007834:	f001 fd7e 	bl	8009334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8007838:	2200      	movs	r2, #0
 800783a:	f44f 4184 	mov.w	r1, #16896	@ 0x4200
 800783e:	4809      	ldr	r0, [pc, #36]	@ (8007864 <MX_GPIO_Init+0x1d0>)
 8007840:	f001 fd78 	bl	8009334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
//  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 8007844:	2200      	movs	r2, #0
 8007846:	2123      	movs	r1, #35	@ 0x23
 8007848:	4805      	ldr	r0, [pc, #20]	@ (8007860 <MX_GPIO_Init+0x1cc>)
 800784a:	f001 fd73 	bl	8009334 <HAL_GPIO_WritePin>

}
 800784e:	bf00      	nop
 8007850:	3728      	adds	r7, #40	@ 0x28
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	40023800 	.word	0x40023800
 800785c:	40021000 	.word	0x40021000
 8007860:	40020800 	.word	0x40020800
 8007864:	40020400 	.word	0x40020400

08007868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800786e:	f000 fee9 	bl	8008644 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007872:	f000 f82f 	bl	80078d4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007876:	f000 fa83 	bl	8007d80 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 800787a:	f000 f89d 	bl	80079b8 <_ZL12MX_ADC1_Initv>
  MX_I2C1_Init();
 800787e:	f000 f8f7 	bl	8007a70 <_ZL12MX_I2C1_Initv>
  MX_SPI1_Init();
 8007882:	f000 f929 	bl	8007ad8 <_ZL12MX_SPI1_Initv>
  MX_TIM2_Init();
 8007886:	f000 f963 	bl	8007b50 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 800788a:	f000 f9ef 	bl	8007c6c <_ZL12MX_TIM3_Initv>
  MX_USART1_UART_Init();
 800788e:	f000 fa49 	bl	8007d24 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8007892:	480d      	ldr	r0, [pc, #52]	@ (80078c8 <main+0x60>)
 8007894:	f003 fcf6 	bl	800b284 <HAL_TIM_Base_Start_IT>
	IncializaSistema();
 8007898:	f7ff fe14 	bl	80074c4 <_Z16IncializaSistemav>
	EjecutaSistema();
 800789c:	f7ff fe50 	bl	8007540 <_Z14EjecutaSistemav>
  USART1_UART_Init();
 80078a0:	f7ff fc4a 	bl	8007138 <_Z16USART1_UART_Initv>
	  HAL_ADC_Start(&hadc1);
 80078a4:	4809      	ldr	r0, [pc, #36]	@ (80078cc <main+0x64>)
 80078a6:	f000 ffa7 	bl	80087f8 <HAL_ADC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		int valor=HAL_ADC_GetValue(&hadc1);
 80078aa:	4808      	ldr	r0, [pc, #32]	@ (80078cc <main+0x64>)
 80078ac:	f001 f858 	bl	8008960 <HAL_ADC_GetValue>
 80078b0:	4603      	mov	r3, r0
 80078b2:	607b      	str	r3, [r7, #4]
		SerialPrintf((char*)"\r\n analogo: %d",valor);
 80078b4:	6879      	ldr	r1, [r7, #4]
 80078b6:	4806      	ldr	r0, [pc, #24]	@ (80078d0 <main+0x68>)
 80078b8:	f7ff fc72 	bl	80071a0 <_Z12SerialPrintfPcz>
		HAL_Delay(500);
 80078bc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80078c0:	f000 ff32 	bl	8008728 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 80078c4:	bf00      	nop
 80078c6:	e7f0      	b.n	80078aa <main+0x42>
 80078c8:	200003b0 	.word	0x200003b0
 80078cc:	20000274 	.word	0x20000274
 80078d0:	0800f84c 	.word	0x0800f84c

080078d4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b094      	sub	sp, #80	@ 0x50
 80078d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80078da:	f107 0320 	add.w	r3, r7, #32
 80078de:	2230      	movs	r2, #48	@ 0x30
 80078e0:	2100      	movs	r1, #0
 80078e2:	4618      	mov	r0, r3
 80078e4:	f005 fea3 	bl	800d62e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80078e8:	f107 030c 	add.w	r3, r7, #12
 80078ec:	2200      	movs	r2, #0
 80078ee:	601a      	str	r2, [r3, #0]
 80078f0:	605a      	str	r2, [r3, #4]
 80078f2:	609a      	str	r2, [r3, #8]
 80078f4:	60da      	str	r2, [r3, #12]
 80078f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80078f8:	2300      	movs	r3, #0
 80078fa:	60bb      	str	r3, [r7, #8]
 80078fc:	4b2c      	ldr	r3, [pc, #176]	@ (80079b0 <_Z18SystemClock_Configv+0xdc>)
 80078fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007900:	4a2b      	ldr	r2, [pc, #172]	@ (80079b0 <_Z18SystemClock_Configv+0xdc>)
 8007902:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007906:	6413      	str	r3, [r2, #64]	@ 0x40
 8007908:	4b29      	ldr	r3, [pc, #164]	@ (80079b0 <_Z18SystemClock_Configv+0xdc>)
 800790a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800790c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007910:	60bb      	str	r3, [r7, #8]
 8007912:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007914:	2300      	movs	r3, #0
 8007916:	607b      	str	r3, [r7, #4]
 8007918:	4b26      	ldr	r3, [pc, #152]	@ (80079b4 <_Z18SystemClock_Configv+0xe0>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a25      	ldr	r2, [pc, #148]	@ (80079b4 <_Z18SystemClock_Configv+0xe0>)
 800791e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007922:	6013      	str	r3, [r2, #0]
 8007924:	4b23      	ldr	r3, [pc, #140]	@ (80079b4 <_Z18SystemClock_Configv+0xe0>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800792c:	607b      	str	r3, [r7, #4]
 800792e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007930:	2302      	movs	r3, #2
 8007932:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007934:	2301      	movs	r3, #1
 8007936:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007938:	2310      	movs	r3, #16
 800793a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800793c:	2302      	movs	r3, #2
 800793e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007940:	2300      	movs	r3, #0
 8007942:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007944:	2308      	movs	r3, #8
 8007946:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8007948:	2348      	movs	r3, #72	@ 0x48
 800794a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800794c:	2302      	movs	r3, #2
 800794e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8007950:	2304      	movs	r3, #4
 8007952:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007954:	f107 0320 	add.w	r3, r7, #32
 8007958:	4618      	mov	r0, r3
 800795a:	f002 fd41 	bl	800a3e0 <HAL_RCC_OscConfig>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	bf14      	ite	ne
 8007964:	2301      	movne	r3, #1
 8007966:	2300      	moveq	r3, #0
 8007968:	b2db      	uxtb	r3, r3
 800796a:	2b00      	cmp	r3, #0
 800796c:	d001      	beq.n	8007972 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800796e:	f000 faf1 	bl	8007f54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007972:	230f      	movs	r3, #15
 8007974:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007976:	2302      	movs	r3, #2
 8007978:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800797a:	2300      	movs	r3, #0
 800797c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800797e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007982:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007984:	2300      	movs	r3, #0
 8007986:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007988:	f107 030c 	add.w	r3, r7, #12
 800798c:	2102      	movs	r1, #2
 800798e:	4618      	mov	r0, r3
 8007990:	f002 ff9e 	bl	800a8d0 <HAL_RCC_ClockConfig>
 8007994:	4603      	mov	r3, r0
 8007996:	2b00      	cmp	r3, #0
 8007998:	bf14      	ite	ne
 800799a:	2301      	movne	r3, #1
 800799c:	2300      	moveq	r3, #0
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d001      	beq.n	80079a8 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 80079a4:	f000 fad6 	bl	8007f54 <Error_Handler>
  }
}
 80079a8:	bf00      	nop
 80079aa:	3750      	adds	r7, #80	@ 0x50
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	40023800 	.word	0x40023800
 80079b4:	40007000 	.word	0x40007000

080079b8 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80079be:	463b      	mov	r3, r7
 80079c0:	2200      	movs	r2, #0
 80079c2:	601a      	str	r2, [r3, #0]
 80079c4:	605a      	str	r2, [r3, #4]
 80079c6:	609a      	str	r2, [r3, #8]
 80079c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80079ca:	4b26      	ldr	r3, [pc, #152]	@ (8007a64 <_ZL12MX_ADC1_Initv+0xac>)
 80079cc:	4a26      	ldr	r2, [pc, #152]	@ (8007a68 <_ZL12MX_ADC1_Initv+0xb0>)
 80079ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80079d0:	4b24      	ldr	r3, [pc, #144]	@ (8007a64 <_ZL12MX_ADC1_Initv+0xac>)
 80079d2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80079d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80079d8:	4b22      	ldr	r3, [pc, #136]	@ (8007a64 <_ZL12MX_ADC1_Initv+0xac>)
 80079da:	2200      	movs	r2, #0
 80079dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80079de:	4b21      	ldr	r3, [pc, #132]	@ (8007a64 <_ZL12MX_ADC1_Initv+0xac>)
 80079e0:	2200      	movs	r2, #0
 80079e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80079e4:	4b1f      	ldr	r3, [pc, #124]	@ (8007a64 <_ZL12MX_ADC1_Initv+0xac>)
 80079e6:	2201      	movs	r2, #1
 80079e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80079ea:	4b1e      	ldr	r3, [pc, #120]	@ (8007a64 <_ZL12MX_ADC1_Initv+0xac>)
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80079f2:	4b1c      	ldr	r3, [pc, #112]	@ (8007a64 <_ZL12MX_ADC1_Initv+0xac>)
 80079f4:	2200      	movs	r2, #0
 80079f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80079f8:	4b1a      	ldr	r3, [pc, #104]	@ (8007a64 <_ZL12MX_ADC1_Initv+0xac>)
 80079fa:	4a1c      	ldr	r2, [pc, #112]	@ (8007a6c <_ZL12MX_ADC1_Initv+0xb4>)
 80079fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80079fe:	4b19      	ldr	r3, [pc, #100]	@ (8007a64 <_ZL12MX_ADC1_Initv+0xac>)
 8007a00:	2200      	movs	r2, #0
 8007a02:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8007a04:	4b17      	ldr	r3, [pc, #92]	@ (8007a64 <_ZL12MX_ADC1_Initv+0xac>)
 8007a06:	2201      	movs	r2, #1
 8007a08:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8007a0a:	4b16      	ldr	r3, [pc, #88]	@ (8007a64 <_ZL12MX_ADC1_Initv+0xac>)
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007a12:	4b14      	ldr	r3, [pc, #80]	@ (8007a64 <_ZL12MX_ADC1_Initv+0xac>)
 8007a14:	2201      	movs	r2, #1
 8007a16:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007a18:	4812      	ldr	r0, [pc, #72]	@ (8007a64 <_ZL12MX_ADC1_Initv+0xac>)
 8007a1a:	f000 fea9 	bl	8008770 <HAL_ADC_Init>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	bf14      	ite	ne
 8007a24:	2301      	movne	r3, #1
 8007a26:	2300      	moveq	r3, #0
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d001      	beq.n	8007a32 <_ZL12MX_ADC1_Initv+0x7a>
  {
    Error_Handler();
 8007a2e:	f000 fa91 	bl	8007f54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8007a32:	2303      	movs	r3, #3
 8007a34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8007a36:	2301      	movs	r3, #1
 8007a38:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007a3e:	463b      	mov	r3, r7
 8007a40:	4619      	mov	r1, r3
 8007a42:	4808      	ldr	r0, [pc, #32]	@ (8007a64 <_ZL12MX_ADC1_Initv+0xac>)
 8007a44:	f000 ff9a 	bl	800897c <HAL_ADC_ConfigChannel>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	bf14      	ite	ne
 8007a4e:	2301      	movne	r3, #1
 8007a50:	2300      	moveq	r3, #0
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d001      	beq.n	8007a5c <_ZL12MX_ADC1_Initv+0xa4>
  {
    Error_Handler();
 8007a58:	f000 fa7c 	bl	8007f54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8007a5c:	bf00      	nop
 8007a5e:	3710      	adds	r7, #16
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	20000274 	.word	0x20000274
 8007a68:	40012000 	.word	0x40012000
 8007a6c:	0f000001 	.word	0x0f000001

08007a70 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007a74:	4b15      	ldr	r3, [pc, #84]	@ (8007acc <_ZL12MX_I2C1_Initv+0x5c>)
 8007a76:	4a16      	ldr	r2, [pc, #88]	@ (8007ad0 <_ZL12MX_I2C1_Initv+0x60>)
 8007a78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8007a7a:	4b14      	ldr	r3, [pc, #80]	@ (8007acc <_ZL12MX_I2C1_Initv+0x5c>)
 8007a7c:	4a15      	ldr	r2, [pc, #84]	@ (8007ad4 <_ZL12MX_I2C1_Initv+0x64>)
 8007a7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007a80:	4b12      	ldr	r3, [pc, #72]	@ (8007acc <_ZL12MX_I2C1_Initv+0x5c>)
 8007a82:	2200      	movs	r2, #0
 8007a84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007a86:	4b11      	ldr	r3, [pc, #68]	@ (8007acc <_ZL12MX_I2C1_Initv+0x5c>)
 8007a88:	2200      	movs	r2, #0
 8007a8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8007acc <_ZL12MX_I2C1_Initv+0x5c>)
 8007a8e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007a92:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007a94:	4b0d      	ldr	r3, [pc, #52]	@ (8007acc <_ZL12MX_I2C1_Initv+0x5c>)
 8007a96:	2200      	movs	r2, #0
 8007a98:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8007acc <_ZL12MX_I2C1_Initv+0x5c>)
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8007acc <_ZL12MX_I2C1_Initv+0x5c>)
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007aa6:	4b09      	ldr	r3, [pc, #36]	@ (8007acc <_ZL12MX_I2C1_Initv+0x5c>)
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007aac:	4807      	ldr	r0, [pc, #28]	@ (8007acc <_ZL12MX_I2C1_Initv+0x5c>)
 8007aae:	f001 fc73 	bl	8009398 <HAL_I2C_Init>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	bf14      	ite	ne
 8007ab8:	2301      	movne	r3, #1
 8007aba:	2300      	moveq	r3, #0
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d001      	beq.n	8007ac6 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8007ac2:	f000 fa47 	bl	8007f54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007ac6:	bf00      	nop
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	200002bc 	.word	0x200002bc
 8007ad0:	40005400 	.word	0x40005400
 8007ad4:	000186a0 	.word	0x000186a0

08007ad8 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8007adc:	4b1a      	ldr	r3, [pc, #104]	@ (8007b48 <_ZL12MX_SPI1_Initv+0x70>)
 8007ade:	4a1b      	ldr	r2, [pc, #108]	@ (8007b4c <_ZL12MX_SPI1_Initv+0x74>)
 8007ae0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007ae2:	4b19      	ldr	r3, [pc, #100]	@ (8007b48 <_ZL12MX_SPI1_Initv+0x70>)
 8007ae4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8007ae8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007aea:	4b17      	ldr	r3, [pc, #92]	@ (8007b48 <_ZL12MX_SPI1_Initv+0x70>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007af0:	4b15      	ldr	r3, [pc, #84]	@ (8007b48 <_ZL12MX_SPI1_Initv+0x70>)
 8007af2:	2200      	movs	r2, #0
 8007af4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007af6:	4b14      	ldr	r3, [pc, #80]	@ (8007b48 <_ZL12MX_SPI1_Initv+0x70>)
 8007af8:	2200      	movs	r2, #0
 8007afa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007afc:	4b12      	ldr	r3, [pc, #72]	@ (8007b48 <_ZL12MX_SPI1_Initv+0x70>)
 8007afe:	2200      	movs	r2, #0
 8007b00:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007b02:	4b11      	ldr	r3, [pc, #68]	@ (8007b48 <_ZL12MX_SPI1_Initv+0x70>)
 8007b04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b08:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8007b48 <_ZL12MX_SPI1_Initv+0x70>)
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007b10:	4b0d      	ldr	r3, [pc, #52]	@ (8007b48 <_ZL12MX_SPI1_Initv+0x70>)
 8007b12:	2200      	movs	r2, #0
 8007b14:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007b16:	4b0c      	ldr	r3, [pc, #48]	@ (8007b48 <_ZL12MX_SPI1_Initv+0x70>)
 8007b18:	2200      	movs	r2, #0
 8007b1a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8007b48 <_ZL12MX_SPI1_Initv+0x70>)
 8007b1e:	2200      	movs	r2, #0
 8007b20:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8007b22:	4b09      	ldr	r3, [pc, #36]	@ (8007b48 <_ZL12MX_SPI1_Initv+0x70>)
 8007b24:	220a      	movs	r2, #10
 8007b26:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007b28:	4807      	ldr	r0, [pc, #28]	@ (8007b48 <_ZL12MX_SPI1_Initv+0x70>)
 8007b2a:	f003 f8b1 	bl	800ac90 <HAL_SPI_Init>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	bf14      	ite	ne
 8007b34:	2301      	movne	r3, #1
 8007b36:	2300      	moveq	r3, #0
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d001      	beq.n	8007b42 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8007b3e:	f000 fa09 	bl	8007f54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007b42:	bf00      	nop
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	20000310 	.word	0x20000310
 8007b4c:	40013000 	.word	0x40013000

08007b50 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b08e      	sub	sp, #56	@ 0x38
 8007b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007b56:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	601a      	str	r2, [r3, #0]
 8007b5e:	605a      	str	r2, [r3, #4]
 8007b60:	609a      	str	r2, [r3, #8]
 8007b62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007b64:	f107 0320 	add.w	r3, r7, #32
 8007b68:	2200      	movs	r2, #0
 8007b6a:	601a      	str	r2, [r3, #0]
 8007b6c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007b6e:	1d3b      	adds	r3, r7, #4
 8007b70:	2200      	movs	r2, #0
 8007b72:	601a      	str	r2, [r3, #0]
 8007b74:	605a      	str	r2, [r3, #4]
 8007b76:	609a      	str	r2, [r3, #8]
 8007b78:	60da      	str	r2, [r3, #12]
 8007b7a:	611a      	str	r2, [r3, #16]
 8007b7c:	615a      	str	r2, [r3, #20]
 8007b7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007b80:	4b39      	ldr	r3, [pc, #228]	@ (8007c68 <_ZL12MX_TIM2_Initv+0x118>)
 8007b82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007b86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8007b88:	4b37      	ldr	r3, [pc, #220]	@ (8007c68 <_ZL12MX_TIM2_Initv+0x118>)
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007b8e:	4b36      	ldr	r3, [pc, #216]	@ (8007c68 <_ZL12MX_TIM2_Initv+0x118>)
 8007b90:	2200      	movs	r2, #0
 8007b92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8007b94:	4b34      	ldr	r3, [pc, #208]	@ (8007c68 <_ZL12MX_TIM2_Initv+0x118>)
 8007b96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007b9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007b9c:	4b32      	ldr	r3, [pc, #200]	@ (8007c68 <_ZL12MX_TIM2_Initv+0x118>)
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007ba2:	4b31      	ldr	r3, [pc, #196]	@ (8007c68 <_ZL12MX_TIM2_Initv+0x118>)
 8007ba4:	2280      	movs	r2, #128	@ 0x80
 8007ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007ba8:	482f      	ldr	r0, [pc, #188]	@ (8007c68 <_ZL12MX_TIM2_Initv+0x118>)
 8007baa:	f003 fb1b 	bl	800b1e4 <HAL_TIM_Base_Init>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	bf14      	ite	ne
 8007bb4:	2301      	movne	r3, #1
 8007bb6:	2300      	moveq	r3, #0
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d001      	beq.n	8007bc2 <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 8007bbe:	f000 f9c9 	bl	8007f54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007bc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007bc8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007bcc:	4619      	mov	r1, r3
 8007bce:	4826      	ldr	r0, [pc, #152]	@ (8007c68 <_ZL12MX_TIM2_Initv+0x118>)
 8007bd0:	f003 fe76 	bl	800b8c0 <HAL_TIM_ConfigClockSource>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	bf14      	ite	ne
 8007bda:	2301      	movne	r3, #1
 8007bdc:	2300      	moveq	r3, #0
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d001      	beq.n	8007be8 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 8007be4:	f000 f9b6 	bl	8007f54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8007be8:	481f      	ldr	r0, [pc, #124]	@ (8007c68 <_ZL12MX_TIM2_Initv+0x118>)
 8007bea:	f003 fbad 	bl	800b348 <HAL_TIM_PWM_Init>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	bf14      	ite	ne
 8007bf4:	2301      	movne	r3, #1
 8007bf6:	2300      	moveq	r3, #0
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d001      	beq.n	8007c02 <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 8007bfe:	f000 f9a9 	bl	8007f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007c02:	2300      	movs	r3, #0
 8007c04:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007c06:	2300      	movs	r3, #0
 8007c08:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007c0a:	f107 0320 	add.w	r3, r7, #32
 8007c0e:	4619      	mov	r1, r3
 8007c10:	4815      	ldr	r0, [pc, #84]	@ (8007c68 <_ZL12MX_TIM2_Initv+0x118>)
 8007c12:	f004 fa1d 	bl	800c050 <HAL_TIMEx_MasterConfigSynchronization>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	bf14      	ite	ne
 8007c1c:	2301      	movne	r3, #1
 8007c1e:	2300      	moveq	r3, #0
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d001      	beq.n	8007c2a <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 8007c26:	f000 f995 	bl	8007f54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007c2a:	2360      	movs	r3, #96	@ 0x60
 8007c2c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007c32:	2300      	movs	r3, #0
 8007c34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007c36:	2300      	movs	r3, #0
 8007c38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007c3a:	1d3b      	adds	r3, r7, #4
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	4619      	mov	r1, r3
 8007c40:	4809      	ldr	r0, [pc, #36]	@ (8007c68 <_ZL12MX_TIM2_Initv+0x118>)
 8007c42:	f003 fd7b 	bl	800b73c <HAL_TIM_PWM_ConfigChannel>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	bf14      	ite	ne
 8007c4c:	2301      	movne	r3, #1
 8007c4e:	2300      	moveq	r3, #0
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d001      	beq.n	8007c5a <_ZL12MX_TIM2_Initv+0x10a>
  {
    Error_Handler();
 8007c56:	f000 f97d 	bl	8007f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8007c5a:	4803      	ldr	r0, [pc, #12]	@ (8007c68 <_ZL12MX_TIM2_Initv+0x118>)
 8007c5c:	f000 fafc 	bl	8008258 <HAL_TIM_MspPostInit>

}
 8007c60:	bf00      	nop
 8007c62:	3738      	adds	r7, #56	@ 0x38
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	20000368 	.word	0x20000368

08007c6c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b086      	sub	sp, #24
 8007c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007c72:	f107 0308 	add.w	r3, r7, #8
 8007c76:	2200      	movs	r2, #0
 8007c78:	601a      	str	r2, [r3, #0]
 8007c7a:	605a      	str	r2, [r3, #4]
 8007c7c:	609a      	str	r2, [r3, #8]
 8007c7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007c80:	463b      	mov	r3, r7
 8007c82:	2200      	movs	r2, #0
 8007c84:	601a      	str	r2, [r3, #0]
 8007c86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007c88:	4b24      	ldr	r3, [pc, #144]	@ (8007d1c <_ZL12MX_TIM3_Initv+0xb0>)
 8007c8a:	4a25      	ldr	r2, [pc, #148]	@ (8007d20 <_ZL12MX_TIM3_Initv+0xb4>)
 8007c8c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8007c8e:	4b23      	ldr	r3, [pc, #140]	@ (8007d1c <_ZL12MX_TIM3_Initv+0xb0>)
 8007c90:	2200      	movs	r2, #0
 8007c92:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007c94:	4b21      	ldr	r3, [pc, #132]	@ (8007d1c <_ZL12MX_TIM3_Initv+0xb0>)
 8007c96:	2200      	movs	r2, #0
 8007c98:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8007c9a:	4b20      	ldr	r3, [pc, #128]	@ (8007d1c <_ZL12MX_TIM3_Initv+0xb0>)
 8007c9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007ca0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8007d1c <_ZL12MX_TIM3_Initv+0xb0>)
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8007d1c <_ZL12MX_TIM3_Initv+0xb0>)
 8007caa:	2200      	movs	r2, #0
 8007cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007cae:	481b      	ldr	r0, [pc, #108]	@ (8007d1c <_ZL12MX_TIM3_Initv+0xb0>)
 8007cb0:	f003 fa98 	bl	800b1e4 <HAL_TIM_Base_Init>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	bf14      	ite	ne
 8007cba:	2301      	movne	r3, #1
 8007cbc:	2300      	moveq	r3, #0
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d001      	beq.n	8007cc8 <_ZL12MX_TIM3_Initv+0x5c>
  {
    Error_Handler();
 8007cc4:	f000 f946 	bl	8007f54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007cc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007ccc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007cce:	f107 0308 	add.w	r3, r7, #8
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	4811      	ldr	r0, [pc, #68]	@ (8007d1c <_ZL12MX_TIM3_Initv+0xb0>)
 8007cd6:	f003 fdf3 	bl	800b8c0 <HAL_TIM_ConfigClockSource>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	bf14      	ite	ne
 8007ce0:	2301      	movne	r3, #1
 8007ce2:	2300      	moveq	r3, #0
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d001      	beq.n	8007cee <_ZL12MX_TIM3_Initv+0x82>
  {
    Error_Handler();
 8007cea:	f000 f933 	bl	8007f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007cf6:	463b      	mov	r3, r7
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	4808      	ldr	r0, [pc, #32]	@ (8007d1c <_ZL12MX_TIM3_Initv+0xb0>)
 8007cfc:	f004 f9a8 	bl	800c050 <HAL_TIMEx_MasterConfigSynchronization>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	bf14      	ite	ne
 8007d06:	2301      	movne	r3, #1
 8007d08:	2300      	moveq	r3, #0
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d001      	beq.n	8007d14 <_ZL12MX_TIM3_Initv+0xa8>
  {
    Error_Handler();
 8007d10:	f000 f920 	bl	8007f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8007d14:	bf00      	nop
 8007d16:	3718      	adds	r7, #24
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	200003b0 	.word	0x200003b0
 8007d20:	40000400 	.word	0x40000400

08007d24 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007d28:	4b13      	ldr	r3, [pc, #76]	@ (8007d78 <_ZL19MX_USART1_UART_Initv+0x54>)
 8007d2a:	4a14      	ldr	r2, [pc, #80]	@ (8007d7c <_ZL19MX_USART1_UART_Initv+0x58>)
 8007d2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007d2e:	4b12      	ldr	r3, [pc, #72]	@ (8007d78 <_ZL19MX_USART1_UART_Initv+0x54>)
 8007d30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007d34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007d36:	4b10      	ldr	r3, [pc, #64]	@ (8007d78 <_ZL19MX_USART1_UART_Initv+0x54>)
 8007d38:	2200      	movs	r2, #0
 8007d3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8007d78 <_ZL19MX_USART1_UART_Initv+0x54>)
 8007d3e:	2200      	movs	r2, #0
 8007d40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007d42:	4b0d      	ldr	r3, [pc, #52]	@ (8007d78 <_ZL19MX_USART1_UART_Initv+0x54>)
 8007d44:	2200      	movs	r2, #0
 8007d46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007d48:	4b0b      	ldr	r3, [pc, #44]	@ (8007d78 <_ZL19MX_USART1_UART_Initv+0x54>)
 8007d4a:	220c      	movs	r2, #12
 8007d4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8007d78 <_ZL19MX_USART1_UART_Initv+0x54>)
 8007d50:	2200      	movs	r2, #0
 8007d52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007d54:	4b08      	ldr	r3, [pc, #32]	@ (8007d78 <_ZL19MX_USART1_UART_Initv+0x54>)
 8007d56:	2200      	movs	r2, #0
 8007d58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007d5a:	4807      	ldr	r0, [pc, #28]	@ (8007d78 <_ZL19MX_USART1_UART_Initv+0x54>)
 8007d5c:	f004 f9fa 	bl	800c154 <HAL_UART_Init>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	bf14      	ite	ne
 8007d66:	2301      	movne	r3, #1
 8007d68:	2300      	moveq	r3, #0
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d001      	beq.n	8007d74 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8007d70:	f000 f8f0 	bl	8007f54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007d74:	bf00      	nop
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	200003f8 	.word	0x200003f8
 8007d7c:	40011000 	.word	0x40011000

08007d80 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b088      	sub	sp, #32
 8007d84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d86:	f107 030c 	add.w	r3, r7, #12
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	601a      	str	r2, [r3, #0]
 8007d8e:	605a      	str	r2, [r3, #4]
 8007d90:	609a      	str	r2, [r3, #8]
 8007d92:	60da      	str	r2, [r3, #12]
 8007d94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d96:	2300      	movs	r3, #0
 8007d98:	60bb      	str	r3, [r7, #8]
 8007d9a:	4b6a      	ldr	r3, [pc, #424]	@ (8007f44 <_ZL12MX_GPIO_Initv+0x1c4>)
 8007d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d9e:	4a69      	ldr	r2, [pc, #420]	@ (8007f44 <_ZL12MX_GPIO_Initv+0x1c4>)
 8007da0:	f043 0304 	orr.w	r3, r3, #4
 8007da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8007da6:	4b67      	ldr	r3, [pc, #412]	@ (8007f44 <_ZL12MX_GPIO_Initv+0x1c4>)
 8007da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007daa:	f003 0304 	and.w	r3, r3, #4
 8007dae:	60bb      	str	r3, [r7, #8]
 8007db0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007db2:	2300      	movs	r3, #0
 8007db4:	607b      	str	r3, [r7, #4]
 8007db6:	4b63      	ldr	r3, [pc, #396]	@ (8007f44 <_ZL12MX_GPIO_Initv+0x1c4>)
 8007db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dba:	4a62      	ldr	r2, [pc, #392]	@ (8007f44 <_ZL12MX_GPIO_Initv+0x1c4>)
 8007dbc:	f043 0301 	orr.w	r3, r3, #1
 8007dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8007dc2:	4b60      	ldr	r3, [pc, #384]	@ (8007f44 <_ZL12MX_GPIO_Initv+0x1c4>)
 8007dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dc6:	f003 0301 	and.w	r3, r3, #1
 8007dca:	607b      	str	r3, [r7, #4]
 8007dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007dce:	2300      	movs	r3, #0
 8007dd0:	603b      	str	r3, [r7, #0]
 8007dd2:	4b5c      	ldr	r3, [pc, #368]	@ (8007f44 <_ZL12MX_GPIO_Initv+0x1c4>)
 8007dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dd6:	4a5b      	ldr	r2, [pc, #364]	@ (8007f44 <_ZL12MX_GPIO_Initv+0x1c4>)
 8007dd8:	f043 0302 	orr.w	r3, r3, #2
 8007ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8007dde:	4b59      	ldr	r3, [pc, #356]	@ (8007f44 <_ZL12MX_GPIO_Initv+0x1c4>)
 8007de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007de2:	f003 0302 	and.w	r3, r3, #2
 8007de6:	603b      	str	r3, [r7, #0]
 8007de8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8007dea:	2200      	movs	r2, #0
 8007dec:	2106      	movs	r1, #6
 8007dee:	4856      	ldr	r0, [pc, #344]	@ (8007f48 <_ZL12MX_GPIO_Initv+0x1c8>)
 8007df0:	f001 faa0 	bl	8009334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|Display_DC_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 8007df4:	2200      	movs	r2, #0
 8007df6:	2123      	movs	r1, #35	@ 0x23
 8007df8:	4854      	ldr	r0, [pc, #336]	@ (8007f4c <_ZL12MX_GPIO_Initv+0x1cc>)
 8007dfa:	f001 fa9b 	bl	8009334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8007dfe:	2201      	movs	r2, #1
 8007e00:	2108      	movs	r1, #8
 8007e02:	4852      	ldr	r0, [pc, #328]	@ (8007f4c <_ZL12MX_GPIO_Initv+0x1cc>)
 8007e04:	f001 fa96 	bl	8009334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8007e08:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007e0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8007e0e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8007e12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007e14:	2301      	movs	r3, #1
 8007e16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007e18:	f107 030c 	add.w	r3, r7, #12
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	484c      	ldr	r0, [pc, #304]	@ (8007f50 <_ZL12MX_GPIO_Initv+0x1d0>)
 8007e20:	f001 f8ec 	bl	8008ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007e24:	2301      	movs	r3, #1
 8007e26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e30:	f107 030c 	add.w	r3, r7, #12
 8007e34:	4619      	mov	r1, r3
 8007e36:	4844      	ldr	r0, [pc, #272]	@ (8007f48 <_ZL12MX_GPIO_Initv+0x1c8>)
 8007e38:	f001 f8e0 	bl	8008ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8007e3c:	2306      	movs	r3, #6
 8007e3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007e40:	2301      	movs	r3, #1
 8007e42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e44:	2300      	movs	r3, #0
 8007e46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e4c:	f107 030c 	add.w	r3, r7, #12
 8007e50:	4619      	mov	r1, r3
 8007e52:	483d      	ldr	r0, [pc, #244]	@ (8007f48 <_ZL12MX_GPIO_Initv+0x1c8>)
 8007e54:	f001 f8d2 	bl	8008ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007e58:	2340      	movs	r3, #64	@ 0x40
 8007e5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8007e5c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8007e60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e62:	2300      	movs	r3, #0
 8007e64:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e66:	f107 030c 	add.w	r3, r7, #12
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	4836      	ldr	r0, [pc, #216]	@ (8007f48 <_ZL12MX_GPIO_Initv+0x1c8>)
 8007e6e:	f001 f8c5 	bl	8008ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 Display_DC_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|Display_DC_Pin;
 8007e72:	2303      	movs	r3, #3
 8007e74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007e76:	2301      	movs	r3, #1
 8007e78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e82:	f107 030c 	add.w	r3, r7, #12
 8007e86:	4619      	mov	r1, r3
 8007e88:	4830      	ldr	r0, [pc, #192]	@ (8007f4c <_ZL12MX_GPIO_Initv+0x1cc>)
 8007e8a:	f001 f8b7 	bl	8008ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8007e8e:	f240 4304 	movw	r3, #1028	@ 0x404
 8007e92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8007e94:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8007e98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e9e:	f107 030c 	add.w	r3, r7, #12
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	4829      	ldr	r0, [pc, #164]	@ (8007f4c <_ZL12MX_GPIO_Initv+0x1cc>)
 8007ea6:	f001 f8a9 	bl	8008ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007eaa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007eae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007eb8:	f107 030c 	add.w	r3, r7, #12
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	4823      	ldr	r0, [pc, #140]	@ (8007f4c <_ZL12MX_GPIO_Initv+0x1cc>)
 8007ec0:	f001 f89c 	bl	8008ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB4 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_8;
 8007ec4:	f248 1310 	movw	r3, #33040	@ 0x8110
 8007ec8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007eca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8007ece:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ed4:	f107 030c 	add.w	r3, r7, #12
 8007ed8:	4619      	mov	r1, r3
 8007eda:	481c      	ldr	r0, [pc, #112]	@ (8007f4c <_ZL12MX_GPIO_Initv+0x1cc>)
 8007edc:	f001 f88e 	bl	8008ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8007ee0:	2328      	movs	r3, #40	@ 0x28
 8007ee2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007eec:	2300      	movs	r3, #0
 8007eee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ef0:	f107 030c 	add.w	r3, r7, #12
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	4815      	ldr	r0, [pc, #84]	@ (8007f4c <_ZL12MX_GPIO_Initv+0x1cc>)
 8007ef8:	f001 f880 	bl	8008ffc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8007efc:	2200      	movs	r2, #0
 8007efe:	2100      	movs	r1, #0
 8007f00:	2008      	movs	r0, #8
 8007f02:	f001 f844 	bl	8008f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8007f06:	2008      	movs	r0, #8
 8007f08:	f001 f85d 	bl	8008fc6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	2100      	movs	r1, #0
 8007f10:	200a      	movs	r0, #10
 8007f12:	f001 f83c 	bl	8008f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8007f16:	200a      	movs	r0, #10
 8007f18:	f001 f855 	bl	8008fc6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	2100      	movs	r1, #0
 8007f20:	2017      	movs	r0, #23
 8007f22:	f001 f834 	bl	8008f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8007f26:	2017      	movs	r0, #23
 8007f28:	f001 f84d 	bl	8008fc6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	2100      	movs	r1, #0
 8007f30:	2028      	movs	r0, #40	@ 0x28
 8007f32:	f001 f82c 	bl	8008f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007f36:	2028      	movs	r0, #40	@ 0x28
 8007f38:	f001 f845 	bl	8008fc6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8007f3c:	bf00      	nop
 8007f3e:	3720      	adds	r7, #32
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	40023800 	.word	0x40023800
 8007f48:	40020000 	.word	0x40020000
 8007f4c:	40020400 	.word	0x40020400
 8007f50:	40020800 	.word	0x40020800

08007f54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007f54:	b480      	push	{r7}
 8007f56:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007f58:	b672      	cpsid	i
}
 8007f5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007f5c:	bf00      	nop
 8007f5e:	e7fd      	b.n	8007f5c <Error_Handler+0x8>

08007f60 <SPI1_Init>:

SPI_HandleTypeDef Hspi;

/* SPI5 init function */
void SPI1_Init(void)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	af00      	add	r7, sp, #0
	Hspi.Instance = SPI1;
 8007f64:	4b17      	ldr	r3, [pc, #92]	@ (8007fc4 <SPI1_Init+0x64>)
 8007f66:	4a18      	ldr	r2, [pc, #96]	@ (8007fc8 <SPI1_Init+0x68>)
 8007f68:	601a      	str	r2, [r3, #0]
	Hspi.Init.Mode = SPI_MODE_MASTER;
 8007f6a:	4b16      	ldr	r3, [pc, #88]	@ (8007fc4 <SPI1_Init+0x64>)
 8007f6c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8007f70:	605a      	str	r2, [r3, #4]
	Hspi.Init.Direction = SPI_DIRECTION_2LINES;
 8007f72:	4b14      	ldr	r3, [pc, #80]	@ (8007fc4 <SPI1_Init+0x64>)
 8007f74:	2200      	movs	r2, #0
 8007f76:	609a      	str	r2, [r3, #8]
	Hspi.Init.DataSize = SPI_DATASIZE_8BIT;
 8007f78:	4b12      	ldr	r3, [pc, #72]	@ (8007fc4 <SPI1_Init+0x64>)
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	60da      	str	r2, [r3, #12]
	Hspi.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f7e:	4b11      	ldr	r3, [pc, #68]	@ (8007fc4 <SPI1_Init+0x64>)
 8007f80:	2200      	movs	r2, #0
 8007f82:	611a      	str	r2, [r3, #16]
	Hspi.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007f84:	4b0f      	ldr	r3, [pc, #60]	@ (8007fc4 <SPI1_Init+0x64>)
 8007f86:	2200      	movs	r2, #0
 8007f88:	615a      	str	r2, [r3, #20]
	Hspi.Init.NSS = SPI_NSS_SOFT;
 8007f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8007fc4 <SPI1_Init+0x64>)
 8007f8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007f90:	619a      	str	r2, [r3, #24]
	Hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007f92:	4b0c      	ldr	r3, [pc, #48]	@ (8007fc4 <SPI1_Init+0x64>)
 8007f94:	2200      	movs	r2, #0
 8007f96:	61da      	str	r2, [r3, #28]
	Hspi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007f98:	4b0a      	ldr	r3, [pc, #40]	@ (8007fc4 <SPI1_Init+0x64>)
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	621a      	str	r2, [r3, #32]
	Hspi.Init.TIMode = SPI_TIMODE_DISABLE;
 8007f9e:	4b09      	ldr	r3, [pc, #36]	@ (8007fc4 <SPI1_Init+0x64>)
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	625a      	str	r2, [r3, #36]	@ 0x24
	Hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007fa4:	4b07      	ldr	r3, [pc, #28]	@ (8007fc4 <SPI1_Init+0x64>)
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	629a      	str	r2, [r3, #40]	@ 0x28
	Hspi.Init.CRCPolynomial = 7;
 8007faa:	4b06      	ldr	r3, [pc, #24]	@ (8007fc4 <SPI1_Init+0x64>)
 8007fac:	2207      	movs	r2, #7
 8007fae:	62da      	str	r2, [r3, #44]	@ 0x2c
//  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
//  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  if (HAL_SPI_Init(&Hspi) != HAL_OK)
 8007fb0:	4804      	ldr	r0, [pc, #16]	@ (8007fc4 <SPI1_Init+0x64>)
 8007fb2:	f002 fe6d 	bl	800ac90 <HAL_SPI_Init>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d001      	beq.n	8007fc0 <SPI1_Init+0x60>
  {
    Error_Handler();
 8007fbc:	f7ff ffca 	bl	8007f54 <Error_Handler>
  }

}
 8007fc0:	bf00      	nop
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	20000440 	.word	0x20000440
 8007fc8:	40013000 	.word	0x40013000

08007fcc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	607b      	str	r3, [r7, #4]
 8007fd6:	4b13      	ldr	r3, [pc, #76]	@ (8008024 <HAL_MspInit+0x58>)
 8007fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fda:	4a12      	ldr	r2, [pc, #72]	@ (8008024 <HAL_MspInit+0x58>)
 8007fdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007fe0:	6453      	str	r3, [r2, #68]	@ 0x44
 8007fe2:	4b10      	ldr	r3, [pc, #64]	@ (8008024 <HAL_MspInit+0x58>)
 8007fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fe6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007fea:	607b      	str	r3, [r7, #4]
 8007fec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007fee:	2300      	movs	r3, #0
 8007ff0:	603b      	str	r3, [r7, #0]
 8007ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8008024 <HAL_MspInit+0x58>)
 8007ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ff6:	4a0b      	ldr	r2, [pc, #44]	@ (8008024 <HAL_MspInit+0x58>)
 8007ff8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ffc:	6413      	str	r3, [r2, #64]	@ 0x40
 8007ffe:	4b09      	ldr	r3, [pc, #36]	@ (8008024 <HAL_MspInit+0x58>)
 8008000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008006:	603b      	str	r3, [r7, #0]
 8008008:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800800a:	2200      	movs	r2, #0
 800800c:	2100      	movs	r1, #0
 800800e:	2005      	movs	r0, #5
 8008010:	f000 ffbd 	bl	8008f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8008014:	2005      	movs	r0, #5
 8008016:	f000 ffd6 	bl	8008fc6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800801a:	bf00      	nop
 800801c:	3708      	adds	r7, #8
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	40023800 	.word	0x40023800

08008028 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b08a      	sub	sp, #40	@ 0x28
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008030:	f107 0314 	add.w	r3, r7, #20
 8008034:	2200      	movs	r2, #0
 8008036:	601a      	str	r2, [r3, #0]
 8008038:	605a      	str	r2, [r3, #4]
 800803a:	609a      	str	r2, [r3, #8]
 800803c:	60da      	str	r2, [r3, #12]
 800803e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a17      	ldr	r2, [pc, #92]	@ (80080a4 <HAL_ADC_MspInit+0x7c>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d127      	bne.n	800809a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800804a:	2300      	movs	r3, #0
 800804c:	613b      	str	r3, [r7, #16]
 800804e:	4b16      	ldr	r3, [pc, #88]	@ (80080a8 <HAL_ADC_MspInit+0x80>)
 8008050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008052:	4a15      	ldr	r2, [pc, #84]	@ (80080a8 <HAL_ADC_MspInit+0x80>)
 8008054:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008058:	6453      	str	r3, [r2, #68]	@ 0x44
 800805a:	4b13      	ldr	r3, [pc, #76]	@ (80080a8 <HAL_ADC_MspInit+0x80>)
 800805c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800805e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008062:	613b      	str	r3, [r7, #16]
 8008064:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008066:	2300      	movs	r3, #0
 8008068:	60fb      	str	r3, [r7, #12]
 800806a:	4b0f      	ldr	r3, [pc, #60]	@ (80080a8 <HAL_ADC_MspInit+0x80>)
 800806c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800806e:	4a0e      	ldr	r2, [pc, #56]	@ (80080a8 <HAL_ADC_MspInit+0x80>)
 8008070:	f043 0301 	orr.w	r3, r3, #1
 8008074:	6313      	str	r3, [r2, #48]	@ 0x30
 8008076:	4b0c      	ldr	r3, [pc, #48]	@ (80080a8 <HAL_ADC_MspInit+0x80>)
 8008078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800807a:	f003 0301 	and.w	r3, r3, #1
 800807e:	60fb      	str	r3, [r7, #12]
 8008080:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8008082:	2318      	movs	r3, #24
 8008084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008086:	2303      	movs	r3, #3
 8008088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800808a:	2300      	movs	r3, #0
 800808c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800808e:	f107 0314 	add.w	r3, r7, #20
 8008092:	4619      	mov	r1, r3
 8008094:	4805      	ldr	r0, [pc, #20]	@ (80080ac <HAL_ADC_MspInit+0x84>)
 8008096:	f000 ffb1 	bl	8008ffc <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800809a:	bf00      	nop
 800809c:	3728      	adds	r7, #40	@ 0x28
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	40012000 	.word	0x40012000
 80080a8:	40023800 	.word	0x40023800
 80080ac:	40020000 	.word	0x40020000

080080b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b08a      	sub	sp, #40	@ 0x28
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080b8:	f107 0314 	add.w	r3, r7, #20
 80080bc:	2200      	movs	r2, #0
 80080be:	601a      	str	r2, [r3, #0]
 80080c0:	605a      	str	r2, [r3, #4]
 80080c2:	609a      	str	r2, [r3, #8]
 80080c4:	60da      	str	r2, [r3, #12]
 80080c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a19      	ldr	r2, [pc, #100]	@ (8008134 <HAL_I2C_MspInit+0x84>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d12b      	bne.n	800812a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80080d2:	2300      	movs	r3, #0
 80080d4:	613b      	str	r3, [r7, #16]
 80080d6:	4b18      	ldr	r3, [pc, #96]	@ (8008138 <HAL_I2C_MspInit+0x88>)
 80080d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080da:	4a17      	ldr	r2, [pc, #92]	@ (8008138 <HAL_I2C_MspInit+0x88>)
 80080dc:	f043 0302 	orr.w	r3, r3, #2
 80080e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80080e2:	4b15      	ldr	r3, [pc, #84]	@ (8008138 <HAL_I2C_MspInit+0x88>)
 80080e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080e6:	f003 0302 	and.w	r3, r3, #2
 80080ea:	613b      	str	r3, [r7, #16]
 80080ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80080ee:	23c0      	movs	r3, #192	@ 0xc0
 80080f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80080f2:	2312      	movs	r3, #18
 80080f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080f6:	2300      	movs	r3, #0
 80080f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080fa:	2303      	movs	r3, #3
 80080fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80080fe:	2304      	movs	r3, #4
 8008100:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008102:	f107 0314 	add.w	r3, r7, #20
 8008106:	4619      	mov	r1, r3
 8008108:	480c      	ldr	r0, [pc, #48]	@ (800813c <HAL_I2C_MspInit+0x8c>)
 800810a:	f000 ff77 	bl	8008ffc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800810e:	2300      	movs	r3, #0
 8008110:	60fb      	str	r3, [r7, #12]
 8008112:	4b09      	ldr	r3, [pc, #36]	@ (8008138 <HAL_I2C_MspInit+0x88>)
 8008114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008116:	4a08      	ldr	r2, [pc, #32]	@ (8008138 <HAL_I2C_MspInit+0x88>)
 8008118:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800811c:	6413      	str	r3, [r2, #64]	@ 0x40
 800811e:	4b06      	ldr	r3, [pc, #24]	@ (8008138 <HAL_I2C_MspInit+0x88>)
 8008120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008122:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008126:	60fb      	str	r3, [r7, #12]
 8008128:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800812a:	bf00      	nop
 800812c:	3728      	adds	r7, #40	@ 0x28
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	40005400 	.word	0x40005400
 8008138:	40023800 	.word	0x40023800
 800813c:	40020400 	.word	0x40020400

08008140 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b08a      	sub	sp, #40	@ 0x28
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008148:	f107 0314 	add.w	r3, r7, #20
 800814c:	2200      	movs	r2, #0
 800814e:	601a      	str	r2, [r3, #0]
 8008150:	605a      	str	r2, [r3, #4]
 8008152:	609a      	str	r2, [r3, #8]
 8008154:	60da      	str	r2, [r3, #12]
 8008156:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a19      	ldr	r2, [pc, #100]	@ (80081c4 <HAL_SPI_MspInit+0x84>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d12b      	bne.n	80081ba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008162:	2300      	movs	r3, #0
 8008164:	613b      	str	r3, [r7, #16]
 8008166:	4b18      	ldr	r3, [pc, #96]	@ (80081c8 <HAL_SPI_MspInit+0x88>)
 8008168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800816a:	4a17      	ldr	r2, [pc, #92]	@ (80081c8 <HAL_SPI_MspInit+0x88>)
 800816c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008170:	6453      	str	r3, [r2, #68]	@ 0x44
 8008172:	4b15      	ldr	r3, [pc, #84]	@ (80081c8 <HAL_SPI_MspInit+0x88>)
 8008174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008176:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800817a:	613b      	str	r3, [r7, #16]
 800817c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800817e:	2300      	movs	r3, #0
 8008180:	60fb      	str	r3, [r7, #12]
 8008182:	4b11      	ldr	r3, [pc, #68]	@ (80081c8 <HAL_SPI_MspInit+0x88>)
 8008184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008186:	4a10      	ldr	r2, [pc, #64]	@ (80081c8 <HAL_SPI_MspInit+0x88>)
 8008188:	f043 0301 	orr.w	r3, r3, #1
 800818c:	6313      	str	r3, [r2, #48]	@ 0x30
 800818e:	4b0e      	ldr	r3, [pc, #56]	@ (80081c8 <HAL_SPI_MspInit+0x88>)
 8008190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008192:	f003 0301 	and.w	r3, r3, #1
 8008196:	60fb      	str	r3, [r7, #12]
 8008198:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800819a:	23a0      	movs	r3, #160	@ 0xa0
 800819c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800819e:	2302      	movs	r3, #2
 80081a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081a2:	2300      	movs	r3, #0
 80081a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80081a6:	2303      	movs	r3, #3
 80081a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80081aa:	2305      	movs	r3, #5
 80081ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081ae:	f107 0314 	add.w	r3, r7, #20
 80081b2:	4619      	mov	r1, r3
 80081b4:	4805      	ldr	r0, [pc, #20]	@ (80081cc <HAL_SPI_MspInit+0x8c>)
 80081b6:	f000 ff21 	bl	8008ffc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80081ba:	bf00      	nop
 80081bc:	3728      	adds	r7, #40	@ 0x28
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	40013000 	.word	0x40013000
 80081c8:	40023800 	.word	0x40023800
 80081cc:	40020000 	.word	0x40020000

080081d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081e0:	d116      	bne.n	8008210 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80081e2:	2300      	movs	r3, #0
 80081e4:	60fb      	str	r3, [r7, #12]
 80081e6:	4b1a      	ldr	r3, [pc, #104]	@ (8008250 <HAL_TIM_Base_MspInit+0x80>)
 80081e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081ea:	4a19      	ldr	r2, [pc, #100]	@ (8008250 <HAL_TIM_Base_MspInit+0x80>)
 80081ec:	f043 0301 	orr.w	r3, r3, #1
 80081f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80081f2:	4b17      	ldr	r3, [pc, #92]	@ (8008250 <HAL_TIM_Base_MspInit+0x80>)
 80081f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081f6:	f003 0301 	and.w	r3, r3, #1
 80081fa:	60fb      	str	r3, [r7, #12]
 80081fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80081fe:	2200      	movs	r2, #0
 8008200:	2100      	movs	r1, #0
 8008202:	201c      	movs	r0, #28
 8008204:	f000 fec3 	bl	8008f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8008208:	201c      	movs	r0, #28
 800820a:	f000 fedc 	bl	8008fc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800820e:	e01a      	b.n	8008246 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a0f      	ldr	r2, [pc, #60]	@ (8008254 <HAL_TIM_Base_MspInit+0x84>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d115      	bne.n	8008246 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800821a:	2300      	movs	r3, #0
 800821c:	60bb      	str	r3, [r7, #8]
 800821e:	4b0c      	ldr	r3, [pc, #48]	@ (8008250 <HAL_TIM_Base_MspInit+0x80>)
 8008220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008222:	4a0b      	ldr	r2, [pc, #44]	@ (8008250 <HAL_TIM_Base_MspInit+0x80>)
 8008224:	f043 0302 	orr.w	r3, r3, #2
 8008228:	6413      	str	r3, [r2, #64]	@ 0x40
 800822a:	4b09      	ldr	r3, [pc, #36]	@ (8008250 <HAL_TIM_Base_MspInit+0x80>)
 800822c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800822e:	f003 0302 	and.w	r3, r3, #2
 8008232:	60bb      	str	r3, [r7, #8]
 8008234:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8008236:	2200      	movs	r2, #0
 8008238:	2100      	movs	r1, #0
 800823a:	201d      	movs	r0, #29
 800823c:	f000 fea7 	bl	8008f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008240:	201d      	movs	r0, #29
 8008242:	f000 fec0 	bl	8008fc6 <HAL_NVIC_EnableIRQ>
}
 8008246:	bf00      	nop
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	40023800 	.word	0x40023800
 8008254:	40000400 	.word	0x40000400

08008258 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b088      	sub	sp, #32
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008260:	f107 030c 	add.w	r3, r7, #12
 8008264:	2200      	movs	r2, #0
 8008266:	601a      	str	r2, [r3, #0]
 8008268:	605a      	str	r2, [r3, #4]
 800826a:	609a      	str	r2, [r3, #8]
 800826c:	60da      	str	r2, [r3, #12]
 800826e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008278:	d11e      	bne.n	80082b8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800827a:	2300      	movs	r3, #0
 800827c:	60bb      	str	r3, [r7, #8]
 800827e:	4b10      	ldr	r3, [pc, #64]	@ (80082c0 <HAL_TIM_MspPostInit+0x68>)
 8008280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008282:	4a0f      	ldr	r2, [pc, #60]	@ (80082c0 <HAL_TIM_MspPostInit+0x68>)
 8008284:	f043 0301 	orr.w	r3, r3, #1
 8008288:	6313      	str	r3, [r2, #48]	@ 0x30
 800828a:	4b0d      	ldr	r3, [pc, #52]	@ (80082c0 <HAL_TIM_MspPostInit+0x68>)
 800828c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800828e:	f003 0301 	and.w	r3, r3, #1
 8008292:	60bb      	str	r3, [r7, #8]
 8008294:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8008296:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800829a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800829c:	2302      	movs	r3, #2
 800829e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80082a0:	2301      	movs	r3, #1
 80082a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082a4:	2300      	movs	r3, #0
 80082a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80082a8:	2301      	movs	r3, #1
 80082aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082ac:	f107 030c 	add.w	r3, r7, #12
 80082b0:	4619      	mov	r1, r3
 80082b2:	4804      	ldr	r0, [pc, #16]	@ (80082c4 <HAL_TIM_MspPostInit+0x6c>)
 80082b4:	f000 fea2 	bl	8008ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80082b8:	bf00      	nop
 80082ba:	3720      	adds	r7, #32
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	40023800 	.word	0x40023800
 80082c4:	40020000 	.word	0x40020000

080082c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b08a      	sub	sp, #40	@ 0x28
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082d0:	f107 0314 	add.w	r3, r7, #20
 80082d4:	2200      	movs	r2, #0
 80082d6:	601a      	str	r2, [r3, #0]
 80082d8:	605a      	str	r2, [r3, #4]
 80082da:	609a      	str	r2, [r3, #8]
 80082dc:	60da      	str	r2, [r3, #12]
 80082de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a19      	ldr	r2, [pc, #100]	@ (800834c <HAL_UART_MspInit+0x84>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d12c      	bne.n	8008344 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80082ea:	2300      	movs	r3, #0
 80082ec:	613b      	str	r3, [r7, #16]
 80082ee:	4b18      	ldr	r3, [pc, #96]	@ (8008350 <HAL_UART_MspInit+0x88>)
 80082f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082f2:	4a17      	ldr	r2, [pc, #92]	@ (8008350 <HAL_UART_MspInit+0x88>)
 80082f4:	f043 0310 	orr.w	r3, r3, #16
 80082f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80082fa:	4b15      	ldr	r3, [pc, #84]	@ (8008350 <HAL_UART_MspInit+0x88>)
 80082fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082fe:	f003 0310 	and.w	r3, r3, #16
 8008302:	613b      	str	r3, [r7, #16]
 8008304:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008306:	2300      	movs	r3, #0
 8008308:	60fb      	str	r3, [r7, #12]
 800830a:	4b11      	ldr	r3, [pc, #68]	@ (8008350 <HAL_UART_MspInit+0x88>)
 800830c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800830e:	4a10      	ldr	r2, [pc, #64]	@ (8008350 <HAL_UART_MspInit+0x88>)
 8008310:	f043 0301 	orr.w	r3, r3, #1
 8008314:	6313      	str	r3, [r2, #48]	@ 0x30
 8008316:	4b0e      	ldr	r3, [pc, #56]	@ (8008350 <HAL_UART_MspInit+0x88>)
 8008318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800831a:	f003 0301 	and.w	r3, r3, #1
 800831e:	60fb      	str	r3, [r7, #12]
 8008320:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008322:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8008326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008328:	2302      	movs	r3, #2
 800832a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800832c:	2300      	movs	r3, #0
 800832e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008330:	2303      	movs	r3, #3
 8008332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008334:	2307      	movs	r3, #7
 8008336:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008338:	f107 0314 	add.w	r3, r7, #20
 800833c:	4619      	mov	r1, r3
 800833e:	4805      	ldr	r0, [pc, #20]	@ (8008354 <HAL_UART_MspInit+0x8c>)
 8008340:	f000 fe5c 	bl	8008ffc <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8008344:	bf00      	nop
 8008346:	3728      	adds	r7, #40	@ 0x28
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	40011000 	.word	0x40011000
 8008350:	40023800 	.word	0x40023800
 8008354:	40020000 	.word	0x40020000

08008358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008358:	b480      	push	{r7}
 800835a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800835c:	bf00      	nop
 800835e:	e7fd      	b.n	800835c <NMI_Handler+0x4>

08008360 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008360:	b480      	push	{r7}
 8008362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008364:	bf00      	nop
 8008366:	e7fd      	b.n	8008364 <HardFault_Handler+0x4>

08008368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008368:	b480      	push	{r7}
 800836a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800836c:	bf00      	nop
 800836e:	e7fd      	b.n	800836c <MemManage_Handler+0x4>

08008370 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008370:	b480      	push	{r7}
 8008372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008374:	bf00      	nop
 8008376:	e7fd      	b.n	8008374 <BusFault_Handler+0x4>

08008378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008378:	b480      	push	{r7}
 800837a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800837c:	bf00      	nop
 800837e:	e7fd      	b.n	800837c <UsageFault_Handler+0x4>

08008380 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008380:	b480      	push	{r7}
 8008382:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008384:	bf00      	nop
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr

0800838e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800838e:	b480      	push	{r7}
 8008390:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008392:	bf00      	nop
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800839c:	b480      	push	{r7}
 800839e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80083a0:	bf00      	nop
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr

080083aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80083ae:	f000 f99b 	bl	80086e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80083b2:	bf00      	nop
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80083b6:	b480      	push	{r7}
 80083b8:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80083ba:	bf00      	nop
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80083c8:	2004      	movs	r0, #4
 80083ca:	f000 ffcd 	bl	8009368 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80083ce:	bf00      	nop
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80083d6:	2010      	movs	r0, #16
 80083d8:	f000 ffc6 	bl	8009368 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80083dc:	bf00      	nop
 80083de:	bd80      	pop	{r7, pc}

080083e0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80083e4:	2040      	movs	r0, #64	@ 0x40
 80083e6:	f000 ffbf 	bl	8009368 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80083ea:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80083ee:	f000 ffbb 	bl	8009368 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80083f2:	bf00      	nop
 80083f4:	bd80      	pop	{r7, pc}
	...

080083f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80083fc:	4802      	ldr	r0, [pc, #8]	@ (8008408 <TIM2_IRQHandler+0x10>)
 80083fe:	f003 f8ad 	bl	800b55c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8008402:	bf00      	nop
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	20000368 	.word	0x20000368

0800840c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8008410:	4802      	ldr	r0, [pc, #8]	@ (800841c <TIM3_IRQHandler+0x10>)
 8008412:	f003 f8a3 	bl	800b55c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8008416:	bf00      	nop
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	200003b0 	.word	0x200003b0

08008420 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8008424:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8008428:	f000 ff9e 	bl	8009368 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800842c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8008430:	f000 ff9a 	bl	8009368 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8008434:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008438:	f000 ff96 	bl	8009368 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800843c:	bf00      	nop
 800843e:	bd80      	pop	{r7, pc}

08008440 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008440:	b480      	push	{r7}
 8008442:	af00      	add	r7, sp, #0
  return 1;
 8008444:	2301      	movs	r3, #1
}
 8008446:	4618      	mov	r0, r3
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <_kill>:

int _kill(int pid, int sig)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800845a:	f005 f98f 	bl	800d77c <__errno>
 800845e:	4603      	mov	r3, r0
 8008460:	2216      	movs	r2, #22
 8008462:	601a      	str	r2, [r3, #0]
  return -1;
 8008464:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008468:	4618      	mov	r0, r3
 800846a:	3708      	adds	r7, #8
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <_exit>:

void _exit (int status)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008478:	f04f 31ff 	mov.w	r1, #4294967295
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f7ff ffe7 	bl	8008450 <_kill>
  while (1) {}    /* Make sure we hang here */
 8008482:	bf00      	nop
 8008484:	e7fd      	b.n	8008482 <_exit+0x12>

08008486 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008486:	b580      	push	{r7, lr}
 8008488:	b086      	sub	sp, #24
 800848a:	af00      	add	r7, sp, #0
 800848c:	60f8      	str	r0, [r7, #12]
 800848e:	60b9      	str	r1, [r7, #8]
 8008490:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008492:	2300      	movs	r3, #0
 8008494:	617b      	str	r3, [r7, #20]
 8008496:	e00a      	b.n	80084ae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008498:	f3af 8000 	nop.w
 800849c:	4601      	mov	r1, r0
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	1c5a      	adds	r2, r3, #1
 80084a2:	60ba      	str	r2, [r7, #8]
 80084a4:	b2ca      	uxtb	r2, r1
 80084a6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	3301      	adds	r3, #1
 80084ac:	617b      	str	r3, [r7, #20]
 80084ae:	697a      	ldr	r2, [r7, #20]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	429a      	cmp	r2, r3
 80084b4:	dbf0      	blt.n	8008498 <_read+0x12>
  }

  return len;
 80084b6:	687b      	ldr	r3, [r7, #4]
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3718      	adds	r7, #24
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b086      	sub	sp, #24
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80084cc:	2300      	movs	r3, #0
 80084ce:	617b      	str	r3, [r7, #20]
 80084d0:	e009      	b.n	80084e6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	1c5a      	adds	r2, r3, #1
 80084d6:	60ba      	str	r2, [r7, #8]
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	4618      	mov	r0, r3
 80084dc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	3301      	adds	r3, #1
 80084e4:	617b      	str	r3, [r7, #20]
 80084e6:	697a      	ldr	r2, [r7, #20]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	dbf1      	blt.n	80084d2 <_write+0x12>
  }
  return len;
 80084ee:	687b      	ldr	r3, [r7, #4]
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3718      	adds	r7, #24
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <_close>:

int _close(int file)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008500:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008504:	4618      	mov	r0, r3
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008520:	605a      	str	r2, [r3, #4]
  return 0;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <_isatty>:

int _isatty(int file)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008538:	2301      	movs	r3, #1
}
 800853a:	4618      	mov	r0, r3
 800853c:	370c      	adds	r7, #12
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr

08008546 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008546:	b480      	push	{r7}
 8008548:	b085      	sub	sp, #20
 800854a:	af00      	add	r7, sp, #0
 800854c:	60f8      	str	r0, [r7, #12]
 800854e:	60b9      	str	r1, [r7, #8]
 8008550:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3714      	adds	r7, #20
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b086      	sub	sp, #24
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008568:	4a14      	ldr	r2, [pc, #80]	@ (80085bc <_sbrk+0x5c>)
 800856a:	4b15      	ldr	r3, [pc, #84]	@ (80085c0 <_sbrk+0x60>)
 800856c:	1ad3      	subs	r3, r2, r3
 800856e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008574:	4b13      	ldr	r3, [pc, #76]	@ (80085c4 <_sbrk+0x64>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d102      	bne.n	8008582 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800857c:	4b11      	ldr	r3, [pc, #68]	@ (80085c4 <_sbrk+0x64>)
 800857e:	4a12      	ldr	r2, [pc, #72]	@ (80085c8 <_sbrk+0x68>)
 8008580:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008582:	4b10      	ldr	r3, [pc, #64]	@ (80085c4 <_sbrk+0x64>)
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4413      	add	r3, r2
 800858a:	693a      	ldr	r2, [r7, #16]
 800858c:	429a      	cmp	r2, r3
 800858e:	d207      	bcs.n	80085a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008590:	f005 f8f4 	bl	800d77c <__errno>
 8008594:	4603      	mov	r3, r0
 8008596:	220c      	movs	r2, #12
 8008598:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800859a:	f04f 33ff 	mov.w	r3, #4294967295
 800859e:	e009      	b.n	80085b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80085a0:	4b08      	ldr	r3, [pc, #32]	@ (80085c4 <_sbrk+0x64>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80085a6:	4b07      	ldr	r3, [pc, #28]	@ (80085c4 <_sbrk+0x64>)
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4413      	add	r3, r2
 80085ae:	4a05      	ldr	r2, [pc, #20]	@ (80085c4 <_sbrk+0x64>)
 80085b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80085b2:	68fb      	ldr	r3, [r7, #12]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3718      	adds	r7, #24
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}
 80085bc:	20020000 	.word	0x20020000
 80085c0:	00000400 	.word	0x00000400
 80085c4:	20000498 	.word	0x20000498
 80085c8:	200005f0 	.word	0x200005f0

080085cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80085cc:	b480      	push	{r7}
 80085ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80085d0:	4b06      	ldr	r3, [pc, #24]	@ (80085ec <SystemInit+0x20>)
 80085d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085d6:	4a05      	ldr	r2, [pc, #20]	@ (80085ec <SystemInit+0x20>)
 80085d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80085dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80085e0:	bf00      	nop
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop
 80085ec:	e000ed00 	.word	0xe000ed00

080085f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80085f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008628 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80085f4:	f7ff ffea 	bl	80085cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80085f8:	480c      	ldr	r0, [pc, #48]	@ (800862c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80085fa:	490d      	ldr	r1, [pc, #52]	@ (8008630 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80085fc:	4a0d      	ldr	r2, [pc, #52]	@ (8008634 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80085fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008600:	e002      	b.n	8008608 <LoopCopyDataInit>

08008602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008606:	3304      	adds	r3, #4

08008608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800860a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800860c:	d3f9      	bcc.n	8008602 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800860e:	4a0a      	ldr	r2, [pc, #40]	@ (8008638 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008610:	4c0a      	ldr	r4, [pc, #40]	@ (800863c <LoopFillZerobss+0x22>)
  movs r3, #0
 8008612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008614:	e001      	b.n	800861a <LoopFillZerobss>

08008616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008618:	3204      	adds	r2, #4

0800861a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800861a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800861c:	d3fb      	bcc.n	8008616 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800861e:	f005 f8b3 	bl	800d788 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008622:	f7ff f921 	bl	8007868 <main>
  bx  lr    
 8008626:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8008628:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800862c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008630:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8008634:	08010700 	.word	0x08010700
  ldr r2, =_sbss
 8008638:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800863c:	200005f0 	.word	0x200005f0

08008640 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008640:	e7fe      	b.n	8008640 <ADC_IRQHandler>
	...

08008644 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008648:	4b0e      	ldr	r3, [pc, #56]	@ (8008684 <HAL_Init+0x40>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a0d      	ldr	r2, [pc, #52]	@ (8008684 <HAL_Init+0x40>)
 800864e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008652:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008654:	4b0b      	ldr	r3, [pc, #44]	@ (8008684 <HAL_Init+0x40>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a0a      	ldr	r2, [pc, #40]	@ (8008684 <HAL_Init+0x40>)
 800865a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800865e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008660:	4b08      	ldr	r3, [pc, #32]	@ (8008684 <HAL_Init+0x40>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a07      	ldr	r2, [pc, #28]	@ (8008684 <HAL_Init+0x40>)
 8008666:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800866a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800866c:	2003      	movs	r0, #3
 800866e:	f000 fc83 	bl	8008f78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008672:	200f      	movs	r0, #15
 8008674:	f000 f808 	bl	8008688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008678:	f7ff fca8 	bl	8007fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800867c:	2300      	movs	r3, #0
}
 800867e:	4618      	mov	r0, r3
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	40023c00 	.word	0x40023c00

08008688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008690:	4b12      	ldr	r3, [pc, #72]	@ (80086dc <HAL_InitTick+0x54>)
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	4b12      	ldr	r3, [pc, #72]	@ (80086e0 <HAL_InitTick+0x58>)
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	4619      	mov	r1, r3
 800869a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800869e:	fbb3 f3f1 	udiv	r3, r3, r1
 80086a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80086a6:	4618      	mov	r0, r3
 80086a8:	f000 fc9b 	bl	8008fe2 <HAL_SYSTICK_Config>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d001      	beq.n	80086b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e00e      	b.n	80086d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2b0f      	cmp	r3, #15
 80086ba:	d80a      	bhi.n	80086d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80086bc:	2200      	movs	r2, #0
 80086be:	6879      	ldr	r1, [r7, #4]
 80086c0:	f04f 30ff 	mov.w	r0, #4294967295
 80086c4:	f000 fc63 	bl	8008f8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80086c8:	4a06      	ldr	r2, [pc, #24]	@ (80086e4 <HAL_InitTick+0x5c>)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80086ce:	2300      	movs	r3, #0
 80086d0:	e000      	b.n	80086d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3708      	adds	r7, #8
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	20000004 	.word	0x20000004
 80086e0:	2000000c 	.word	0x2000000c
 80086e4:	20000008 	.word	0x20000008

080086e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80086e8:	b480      	push	{r7}
 80086ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80086ec:	4b06      	ldr	r3, [pc, #24]	@ (8008708 <HAL_IncTick+0x20>)
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	461a      	mov	r2, r3
 80086f2:	4b06      	ldr	r3, [pc, #24]	@ (800870c <HAL_IncTick+0x24>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4413      	add	r3, r2
 80086f8:	4a04      	ldr	r2, [pc, #16]	@ (800870c <HAL_IncTick+0x24>)
 80086fa:	6013      	str	r3, [r2, #0]
}
 80086fc:	bf00      	nop
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr
 8008706:	bf00      	nop
 8008708:	2000000c 	.word	0x2000000c
 800870c:	2000049c 	.word	0x2000049c

08008710 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008710:	b480      	push	{r7}
 8008712:	af00      	add	r7, sp, #0
  return uwTick;
 8008714:	4b03      	ldr	r3, [pc, #12]	@ (8008724 <HAL_GetTick+0x14>)
 8008716:	681b      	ldr	r3, [r3, #0]
}
 8008718:	4618      	mov	r0, r3
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	2000049c 	.word	0x2000049c

08008728 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008730:	f7ff ffee 	bl	8008710 <HAL_GetTick>
 8008734:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008740:	d005      	beq.n	800874e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008742:	4b0a      	ldr	r3, [pc, #40]	@ (800876c <HAL_Delay+0x44>)
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	461a      	mov	r2, r3
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	4413      	add	r3, r2
 800874c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800874e:	bf00      	nop
 8008750:	f7ff ffde 	bl	8008710 <HAL_GetTick>
 8008754:	4602      	mov	r2, r0
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	1ad3      	subs	r3, r2, r3
 800875a:	68fa      	ldr	r2, [r7, #12]
 800875c:	429a      	cmp	r2, r3
 800875e:	d8f7      	bhi.n	8008750 <HAL_Delay+0x28>
  {
  }
}
 8008760:	bf00      	nop
 8008762:	bf00      	nop
 8008764:	3710      	adds	r7, #16
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	2000000c 	.word	0x2000000c

08008770 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008778:	2300      	movs	r3, #0
 800877a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d101      	bne.n	8008786 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008782:	2301      	movs	r3, #1
 8008784:	e033      	b.n	80087ee <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800878a:	2b00      	cmp	r3, #0
 800878c:	d109      	bne.n	80087a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f7ff fc4a 	bl	8008028 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087a6:	f003 0310 	and.w	r3, r3, #16
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d118      	bne.n	80087e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087b2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80087b6:	f023 0302 	bic.w	r3, r3, #2
 80087ba:	f043 0202 	orr.w	r2, r3, #2
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 fa0c 	bl	8008be0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087d2:	f023 0303 	bic.w	r3, r3, #3
 80087d6:	f043 0201 	orr.w	r2, r3, #1
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80087de:	e001      	b.n	80087e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80087ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
	...

080087f8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b085      	sub	sp, #20
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8008800:	2300      	movs	r3, #0
 8008802:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800880a:	2b01      	cmp	r3, #1
 800880c:	d101      	bne.n	8008812 <HAL_ADC_Start+0x1a>
 800880e:	2302      	movs	r3, #2
 8008810:	e097      	b.n	8008942 <HAL_ADC_Start+0x14a>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2201      	movs	r2, #1
 8008816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	f003 0301 	and.w	r3, r3, #1
 8008824:	2b01      	cmp	r3, #1
 8008826:	d018      	beq.n	800885a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	689a      	ldr	r2, [r3, #8]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f042 0201 	orr.w	r2, r2, #1
 8008836:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008838:	4b45      	ldr	r3, [pc, #276]	@ (8008950 <HAL_ADC_Start+0x158>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a45      	ldr	r2, [pc, #276]	@ (8008954 <HAL_ADC_Start+0x15c>)
 800883e:	fba2 2303 	umull	r2, r3, r2, r3
 8008842:	0c9a      	lsrs	r2, r3, #18
 8008844:	4613      	mov	r3, r2
 8008846:	005b      	lsls	r3, r3, #1
 8008848:	4413      	add	r3, r2
 800884a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800884c:	e002      	b.n	8008854 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	3b01      	subs	r3, #1
 8008852:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d1f9      	bne.n	800884e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	f003 0301 	and.w	r3, r3, #1
 8008864:	2b01      	cmp	r3, #1
 8008866:	d15f      	bne.n	8008928 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800886c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8008870:	f023 0301 	bic.w	r3, r3, #1
 8008874:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008886:	2b00      	cmp	r3, #0
 8008888:	d007      	beq.n	800889a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800888e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8008892:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800889e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80088a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088a6:	d106      	bne.n	80088b6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088ac:	f023 0206 	bic.w	r2, r3, #6
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	645a      	str	r2, [r3, #68]	@ 0x44
 80088b4:	e002      	b.n	80088bc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80088c4:	4b24      	ldr	r3, [pc, #144]	@ (8008958 <HAL_ADC_Start+0x160>)
 80088c6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80088d0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	f003 031f 	and.w	r3, r3, #31
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d10f      	bne.n	80088fe <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d129      	bne.n	8008940 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	689a      	ldr	r2, [r3, #8]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80088fa:	609a      	str	r2, [r3, #8]
 80088fc:	e020      	b.n	8008940 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a16      	ldr	r2, [pc, #88]	@ (800895c <HAL_ADC_Start+0x164>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d11b      	bne.n	8008940 <HAL_ADC_Start+0x148>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008912:	2b00      	cmp	r3, #0
 8008914:	d114      	bne.n	8008940 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	689a      	ldr	r2, [r3, #8]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8008924:	609a      	str	r2, [r3, #8]
 8008926:	e00b      	b.n	8008940 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800892c:	f043 0210 	orr.w	r2, r3, #16
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008938:	f043 0201 	orr.w	r2, r3, #1
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3714      	adds	r7, #20
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop
 8008950:	20000004 	.word	0x20000004
 8008954:	431bde83 	.word	0x431bde83
 8008958:	40012300 	.word	0x40012300
 800895c:	40012000 	.word	0x40012000

08008960 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800896e:	4618      	mov	r0, r3
 8008970:	370c      	adds	r7, #12
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr
	...

0800897c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800897c:	b480      	push	{r7}
 800897e:	b085      	sub	sp, #20
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8008986:	2300      	movs	r3, #0
 8008988:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008990:	2b01      	cmp	r3, #1
 8008992:	d101      	bne.n	8008998 <HAL_ADC_ConfigChannel+0x1c>
 8008994:	2302      	movs	r3, #2
 8008996:	e113      	b.n	8008bc0 <HAL_ADC_ConfigChannel+0x244>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2201      	movs	r2, #1
 800899c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2b09      	cmp	r3, #9
 80089a6:	d925      	bls.n	80089f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	68d9      	ldr	r1, [r3, #12]
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	461a      	mov	r2, r3
 80089b6:	4613      	mov	r3, r2
 80089b8:	005b      	lsls	r3, r3, #1
 80089ba:	4413      	add	r3, r2
 80089bc:	3b1e      	subs	r3, #30
 80089be:	2207      	movs	r2, #7
 80089c0:	fa02 f303 	lsl.w	r3, r2, r3
 80089c4:	43da      	mvns	r2, r3
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	400a      	ands	r2, r1
 80089cc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	68d9      	ldr	r1, [r3, #12]
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	689a      	ldr	r2, [r3, #8]
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	b29b      	uxth	r3, r3
 80089de:	4618      	mov	r0, r3
 80089e0:	4603      	mov	r3, r0
 80089e2:	005b      	lsls	r3, r3, #1
 80089e4:	4403      	add	r3, r0
 80089e6:	3b1e      	subs	r3, #30
 80089e8:	409a      	lsls	r2, r3
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	430a      	orrs	r2, r1
 80089f0:	60da      	str	r2, [r3, #12]
 80089f2:	e022      	b.n	8008a3a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	6919      	ldr	r1, [r3, #16]
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	461a      	mov	r2, r3
 8008a02:	4613      	mov	r3, r2
 8008a04:	005b      	lsls	r3, r3, #1
 8008a06:	4413      	add	r3, r2
 8008a08:	2207      	movs	r2, #7
 8008a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a0e:	43da      	mvns	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	400a      	ands	r2, r1
 8008a16:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	6919      	ldr	r1, [r3, #16]
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	689a      	ldr	r2, [r3, #8]
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	4618      	mov	r0, r3
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	005b      	lsls	r3, r3, #1
 8008a2e:	4403      	add	r3, r0
 8008a30:	409a      	lsls	r2, r3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	430a      	orrs	r2, r1
 8008a38:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	2b06      	cmp	r3, #6
 8008a40:	d824      	bhi.n	8008a8c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	685a      	ldr	r2, [r3, #4]
 8008a4c:	4613      	mov	r3, r2
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	4413      	add	r3, r2
 8008a52:	3b05      	subs	r3, #5
 8008a54:	221f      	movs	r2, #31
 8008a56:	fa02 f303 	lsl.w	r3, r2, r3
 8008a5a:	43da      	mvns	r2, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	400a      	ands	r2, r1
 8008a62:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	4618      	mov	r0, r3
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	685a      	ldr	r2, [r3, #4]
 8008a76:	4613      	mov	r3, r2
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	4413      	add	r3, r2
 8008a7c:	3b05      	subs	r3, #5
 8008a7e:	fa00 f203 	lsl.w	r2, r0, r3
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	430a      	orrs	r2, r1
 8008a88:	635a      	str	r2, [r3, #52]	@ 0x34
 8008a8a:	e04c      	b.n	8008b26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	2b0c      	cmp	r3, #12
 8008a92:	d824      	bhi.n	8008ade <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	685a      	ldr	r2, [r3, #4]
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	4413      	add	r3, r2
 8008aa4:	3b23      	subs	r3, #35	@ 0x23
 8008aa6:	221f      	movs	r2, #31
 8008aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8008aac:	43da      	mvns	r2, r3
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	400a      	ands	r2, r1
 8008ab4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	685a      	ldr	r2, [r3, #4]
 8008ac8:	4613      	mov	r3, r2
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	4413      	add	r3, r2
 8008ace:	3b23      	subs	r3, #35	@ 0x23
 8008ad0:	fa00 f203 	lsl.w	r2, r0, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	430a      	orrs	r2, r1
 8008ada:	631a      	str	r2, [r3, #48]	@ 0x30
 8008adc:	e023      	b.n	8008b26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	685a      	ldr	r2, [r3, #4]
 8008ae8:	4613      	mov	r3, r2
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	4413      	add	r3, r2
 8008aee:	3b41      	subs	r3, #65	@ 0x41
 8008af0:	221f      	movs	r2, #31
 8008af2:	fa02 f303 	lsl.w	r3, r2, r3
 8008af6:	43da      	mvns	r2, r3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	400a      	ands	r2, r1
 8008afe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	685a      	ldr	r2, [r3, #4]
 8008b12:	4613      	mov	r3, r2
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	4413      	add	r3, r2
 8008b18:	3b41      	subs	r3, #65	@ 0x41
 8008b1a:	fa00 f203 	lsl.w	r2, r0, r3
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	430a      	orrs	r2, r1
 8008b24:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008b26:	4b29      	ldr	r3, [pc, #164]	@ (8008bcc <HAL_ADC_ConfigChannel+0x250>)
 8008b28:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a28      	ldr	r2, [pc, #160]	@ (8008bd0 <HAL_ADC_ConfigChannel+0x254>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d10f      	bne.n	8008b54 <HAL_ADC_ConfigChannel+0x1d8>
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	2b12      	cmp	r3, #18
 8008b3a:	d10b      	bne.n	8008b54 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a1d      	ldr	r2, [pc, #116]	@ (8008bd0 <HAL_ADC_ConfigChannel+0x254>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d12b      	bne.n	8008bb6 <HAL_ADC_ConfigChannel+0x23a>
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a1c      	ldr	r2, [pc, #112]	@ (8008bd4 <HAL_ADC_ConfigChannel+0x258>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d003      	beq.n	8008b70 <HAL_ADC_ConfigChannel+0x1f4>
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2b11      	cmp	r3, #17
 8008b6e:	d122      	bne.n	8008bb6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a11      	ldr	r2, [pc, #68]	@ (8008bd4 <HAL_ADC_ConfigChannel+0x258>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d111      	bne.n	8008bb6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008b92:	4b11      	ldr	r3, [pc, #68]	@ (8008bd8 <HAL_ADC_ConfigChannel+0x25c>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a11      	ldr	r2, [pc, #68]	@ (8008bdc <HAL_ADC_ConfigChannel+0x260>)
 8008b98:	fba2 2303 	umull	r2, r3, r2, r3
 8008b9c:	0c9a      	lsrs	r2, r3, #18
 8008b9e:	4613      	mov	r3, r2
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	4413      	add	r3, r2
 8008ba4:	005b      	lsls	r3, r3, #1
 8008ba6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8008ba8:	e002      	b.n	8008bb0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	3b01      	subs	r3, #1
 8008bae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1f9      	bne.n	8008baa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8008bbe:	2300      	movs	r3, #0
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3714      	adds	r7, #20
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr
 8008bcc:	40012300 	.word	0x40012300
 8008bd0:	40012000 	.word	0x40012000
 8008bd4:	10000012 	.word	0x10000012
 8008bd8:	20000004 	.word	0x20000004
 8008bdc:	431bde83 	.word	0x431bde83

08008be0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b085      	sub	sp, #20
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008be8:	4b79      	ldr	r3, [pc, #484]	@ (8008dd0 <ADC_Init+0x1f0>)
 8008bea:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	685a      	ldr	r2, [r3, #4]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	431a      	orrs	r2, r3
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	685a      	ldr	r2, [r3, #4]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008c14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	6859      	ldr	r1, [r3, #4]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	021a      	lsls	r2, r3, #8
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	430a      	orrs	r2, r1
 8008c28:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	685a      	ldr	r2, [r3, #4]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8008c38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	6859      	ldr	r1, [r3, #4]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	689a      	ldr	r2, [r3, #8]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	430a      	orrs	r2, r1
 8008c4a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	689a      	ldr	r2, [r3, #8]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008c5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	6899      	ldr	r1, [r3, #8]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	68da      	ldr	r2, [r3, #12]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	430a      	orrs	r2, r1
 8008c6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c72:	4a58      	ldr	r2, [pc, #352]	@ (8008dd4 <ADC_Init+0x1f4>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d022      	beq.n	8008cbe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	689a      	ldr	r2, [r3, #8]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008c86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6899      	ldr	r1, [r3, #8]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	430a      	orrs	r2, r1
 8008c98:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	689a      	ldr	r2, [r3, #8]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8008ca8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	6899      	ldr	r1, [r3, #8]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	430a      	orrs	r2, r1
 8008cba:	609a      	str	r2, [r3, #8]
 8008cbc:	e00f      	b.n	8008cde <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	689a      	ldr	r2, [r3, #8]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008ccc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	689a      	ldr	r2, [r3, #8]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8008cdc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	689a      	ldr	r2, [r3, #8]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f022 0202 	bic.w	r2, r2, #2
 8008cec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	6899      	ldr	r1, [r3, #8]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	7e1b      	ldrb	r3, [r3, #24]
 8008cf8:	005a      	lsls	r2, r3, #1
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	430a      	orrs	r2, r1
 8008d00:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d01b      	beq.n	8008d44 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	685a      	ldr	r2, [r3, #4]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008d1a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	685a      	ldr	r2, [r3, #4]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8008d2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	6859      	ldr	r1, [r3, #4]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d36:	3b01      	subs	r3, #1
 8008d38:	035a      	lsls	r2, r3, #13
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	430a      	orrs	r2, r1
 8008d40:	605a      	str	r2, [r3, #4]
 8008d42:	e007      	b.n	8008d54 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	685a      	ldr	r2, [r3, #4]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008d52:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8008d62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	69db      	ldr	r3, [r3, #28]
 8008d6e:	3b01      	subs	r3, #1
 8008d70:	051a      	lsls	r2, r3, #20
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	430a      	orrs	r2, r1
 8008d78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	689a      	ldr	r2, [r3, #8]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008d88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	6899      	ldr	r1, [r3, #8]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008d96:	025a      	lsls	r2, r3, #9
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	430a      	orrs	r2, r1
 8008d9e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	689a      	ldr	r2, [r3, #8]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008dae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	6899      	ldr	r1, [r3, #8]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	695b      	ldr	r3, [r3, #20]
 8008dba:	029a      	lsls	r2, r3, #10
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	430a      	orrs	r2, r1
 8008dc2:	609a      	str	r2, [r3, #8]
}
 8008dc4:	bf00      	nop
 8008dc6:	3714      	adds	r7, #20
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr
 8008dd0:	40012300 	.word	0x40012300
 8008dd4:	0f000001 	.word	0x0f000001

08008dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b085      	sub	sp, #20
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f003 0307 	and.w	r3, r3, #7
 8008de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008de8:	4b0c      	ldr	r3, [pc, #48]	@ (8008e1c <__NVIC_SetPriorityGrouping+0x44>)
 8008dea:	68db      	ldr	r3, [r3, #12]
 8008dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008dee:	68ba      	ldr	r2, [r7, #8]
 8008df0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008df4:	4013      	ands	r3, r2
 8008df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008e00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008e04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008e0a:	4a04      	ldr	r2, [pc, #16]	@ (8008e1c <__NVIC_SetPriorityGrouping+0x44>)
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	60d3      	str	r3, [r2, #12]
}
 8008e10:	bf00      	nop
 8008e12:	3714      	adds	r7, #20
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr
 8008e1c:	e000ed00 	.word	0xe000ed00

08008e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008e20:	b480      	push	{r7}
 8008e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008e24:	4b04      	ldr	r3, [pc, #16]	@ (8008e38 <__NVIC_GetPriorityGrouping+0x18>)
 8008e26:	68db      	ldr	r3, [r3, #12]
 8008e28:	0a1b      	lsrs	r3, r3, #8
 8008e2a:	f003 0307 	and.w	r3, r3, #7
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr
 8008e38:	e000ed00 	.word	0xe000ed00

08008e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	4603      	mov	r3, r0
 8008e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	db0b      	blt.n	8008e66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008e4e:	79fb      	ldrb	r3, [r7, #7]
 8008e50:	f003 021f 	and.w	r2, r3, #31
 8008e54:	4907      	ldr	r1, [pc, #28]	@ (8008e74 <__NVIC_EnableIRQ+0x38>)
 8008e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e5a:	095b      	lsrs	r3, r3, #5
 8008e5c:	2001      	movs	r0, #1
 8008e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8008e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008e66:	bf00      	nop
 8008e68:	370c      	adds	r7, #12
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop
 8008e74:	e000e100 	.word	0xe000e100

08008e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	4603      	mov	r3, r0
 8008e80:	6039      	str	r1, [r7, #0]
 8008e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	db0a      	blt.n	8008ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	b2da      	uxtb	r2, r3
 8008e90:	490c      	ldr	r1, [pc, #48]	@ (8008ec4 <__NVIC_SetPriority+0x4c>)
 8008e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e96:	0112      	lsls	r2, r2, #4
 8008e98:	b2d2      	uxtb	r2, r2
 8008e9a:	440b      	add	r3, r1
 8008e9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008ea0:	e00a      	b.n	8008eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	b2da      	uxtb	r2, r3
 8008ea6:	4908      	ldr	r1, [pc, #32]	@ (8008ec8 <__NVIC_SetPriority+0x50>)
 8008ea8:	79fb      	ldrb	r3, [r7, #7]
 8008eaa:	f003 030f 	and.w	r3, r3, #15
 8008eae:	3b04      	subs	r3, #4
 8008eb0:	0112      	lsls	r2, r2, #4
 8008eb2:	b2d2      	uxtb	r2, r2
 8008eb4:	440b      	add	r3, r1
 8008eb6:	761a      	strb	r2, [r3, #24]
}
 8008eb8:	bf00      	nop
 8008eba:	370c      	adds	r7, #12
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr
 8008ec4:	e000e100 	.word	0xe000e100
 8008ec8:	e000ed00 	.word	0xe000ed00

08008ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b089      	sub	sp, #36	@ 0x24
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	60f8      	str	r0, [r7, #12]
 8008ed4:	60b9      	str	r1, [r7, #8]
 8008ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f003 0307 	and.w	r3, r3, #7
 8008ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	f1c3 0307 	rsb	r3, r3, #7
 8008ee6:	2b04      	cmp	r3, #4
 8008ee8:	bf28      	it	cs
 8008eea:	2304      	movcs	r3, #4
 8008eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	3304      	adds	r3, #4
 8008ef2:	2b06      	cmp	r3, #6
 8008ef4:	d902      	bls.n	8008efc <NVIC_EncodePriority+0x30>
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	3b03      	subs	r3, #3
 8008efa:	e000      	b.n	8008efe <NVIC_EncodePriority+0x32>
 8008efc:	2300      	movs	r3, #0
 8008efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008f00:	f04f 32ff 	mov.w	r2, #4294967295
 8008f04:	69bb      	ldr	r3, [r7, #24]
 8008f06:	fa02 f303 	lsl.w	r3, r2, r3
 8008f0a:	43da      	mvns	r2, r3
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	401a      	ands	r2, r3
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008f14:	f04f 31ff 	mov.w	r1, #4294967295
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8008f1e:	43d9      	mvns	r1, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008f24:	4313      	orrs	r3, r2
         );
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3724      	adds	r7, #36	@ 0x24
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr
	...

08008f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	3b01      	subs	r3, #1
 8008f40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f44:	d301      	bcc.n	8008f4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008f46:	2301      	movs	r3, #1
 8008f48:	e00f      	b.n	8008f6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8008f74 <SysTick_Config+0x40>)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008f52:	210f      	movs	r1, #15
 8008f54:	f04f 30ff 	mov.w	r0, #4294967295
 8008f58:	f7ff ff8e 	bl	8008e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008f5c:	4b05      	ldr	r3, [pc, #20]	@ (8008f74 <SysTick_Config+0x40>)
 8008f5e:	2200      	movs	r2, #0
 8008f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008f62:	4b04      	ldr	r3, [pc, #16]	@ (8008f74 <SysTick_Config+0x40>)
 8008f64:	2207      	movs	r2, #7
 8008f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3708      	adds	r7, #8
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	e000e010 	.word	0xe000e010

08008f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f7ff ff29 	bl	8008dd8 <__NVIC_SetPriorityGrouping>
}
 8008f86:	bf00      	nop
 8008f88:	3708      	adds	r7, #8
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b086      	sub	sp, #24
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	4603      	mov	r3, r0
 8008f96:	60b9      	str	r1, [r7, #8]
 8008f98:	607a      	str	r2, [r7, #4]
 8008f9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008fa0:	f7ff ff3e 	bl	8008e20 <__NVIC_GetPriorityGrouping>
 8008fa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	68b9      	ldr	r1, [r7, #8]
 8008faa:	6978      	ldr	r0, [r7, #20]
 8008fac:	f7ff ff8e 	bl	8008ecc <NVIC_EncodePriority>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fb6:	4611      	mov	r1, r2
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7ff ff5d 	bl	8008e78 <__NVIC_SetPriority>
}
 8008fbe:	bf00      	nop
 8008fc0:	3718      	adds	r7, #24
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b082      	sub	sp, #8
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	4603      	mov	r3, r0
 8008fce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7ff ff31 	bl	8008e3c <__NVIC_EnableIRQ>
}
 8008fda:	bf00      	nop
 8008fdc:	3708      	adds	r7, #8
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b082      	sub	sp, #8
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f7ff ffa2 	bl	8008f34 <SysTick_Config>
 8008ff0:	4603      	mov	r3, r0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3708      	adds	r7, #8
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
	...

08008ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b089      	sub	sp, #36	@ 0x24
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009006:	2300      	movs	r3, #0
 8009008:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800900a:	2300      	movs	r3, #0
 800900c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800900e:	2300      	movs	r3, #0
 8009010:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009012:	2300      	movs	r3, #0
 8009014:	61fb      	str	r3, [r7, #28]
 8009016:	e159      	b.n	80092cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009018:	2201      	movs	r2, #1
 800901a:	69fb      	ldr	r3, [r7, #28]
 800901c:	fa02 f303 	lsl.w	r3, r2, r3
 8009020:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	697a      	ldr	r2, [r7, #20]
 8009028:	4013      	ands	r3, r2
 800902a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800902c:	693a      	ldr	r2, [r7, #16]
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	429a      	cmp	r2, r3
 8009032:	f040 8148 	bne.w	80092c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	f003 0303 	and.w	r3, r3, #3
 800903e:	2b01      	cmp	r3, #1
 8009040:	d005      	beq.n	800904e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800904a:	2b02      	cmp	r3, #2
 800904c:	d130      	bne.n	80090b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	005b      	lsls	r3, r3, #1
 8009058:	2203      	movs	r2, #3
 800905a:	fa02 f303 	lsl.w	r3, r2, r3
 800905e:	43db      	mvns	r3, r3
 8009060:	69ba      	ldr	r2, [r7, #24]
 8009062:	4013      	ands	r3, r2
 8009064:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	68da      	ldr	r2, [r3, #12]
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	005b      	lsls	r3, r3, #1
 800906e:	fa02 f303 	lsl.w	r3, r2, r3
 8009072:	69ba      	ldr	r2, [r7, #24]
 8009074:	4313      	orrs	r3, r2
 8009076:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	69ba      	ldr	r2, [r7, #24]
 800907c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009084:	2201      	movs	r2, #1
 8009086:	69fb      	ldr	r3, [r7, #28]
 8009088:	fa02 f303 	lsl.w	r3, r2, r3
 800908c:	43db      	mvns	r3, r3
 800908e:	69ba      	ldr	r2, [r7, #24]
 8009090:	4013      	ands	r3, r2
 8009092:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	091b      	lsrs	r3, r3, #4
 800909a:	f003 0201 	and.w	r2, r3, #1
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	fa02 f303 	lsl.w	r3, r2, r3
 80090a4:	69ba      	ldr	r2, [r7, #24]
 80090a6:	4313      	orrs	r3, r2
 80090a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	69ba      	ldr	r2, [r7, #24]
 80090ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	f003 0303 	and.w	r3, r3, #3
 80090b8:	2b03      	cmp	r3, #3
 80090ba:	d017      	beq.n	80090ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	005b      	lsls	r3, r3, #1
 80090c6:	2203      	movs	r2, #3
 80090c8:	fa02 f303 	lsl.w	r3, r2, r3
 80090cc:	43db      	mvns	r3, r3
 80090ce:	69ba      	ldr	r2, [r7, #24]
 80090d0:	4013      	ands	r3, r2
 80090d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	689a      	ldr	r2, [r3, #8]
 80090d8:	69fb      	ldr	r3, [r7, #28]
 80090da:	005b      	lsls	r3, r3, #1
 80090dc:	fa02 f303 	lsl.w	r3, r2, r3
 80090e0:	69ba      	ldr	r2, [r7, #24]
 80090e2:	4313      	orrs	r3, r2
 80090e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	69ba      	ldr	r2, [r7, #24]
 80090ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	f003 0303 	and.w	r3, r3, #3
 80090f4:	2b02      	cmp	r3, #2
 80090f6:	d123      	bne.n	8009140 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80090f8:	69fb      	ldr	r3, [r7, #28]
 80090fa:	08da      	lsrs	r2, r3, #3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	3208      	adds	r2, #8
 8009100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009104:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009106:	69fb      	ldr	r3, [r7, #28]
 8009108:	f003 0307 	and.w	r3, r3, #7
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	220f      	movs	r2, #15
 8009110:	fa02 f303 	lsl.w	r3, r2, r3
 8009114:	43db      	mvns	r3, r3
 8009116:	69ba      	ldr	r2, [r7, #24]
 8009118:	4013      	ands	r3, r2
 800911a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	691a      	ldr	r2, [r3, #16]
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	f003 0307 	and.w	r3, r3, #7
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	fa02 f303 	lsl.w	r3, r2, r3
 800912c:	69ba      	ldr	r2, [r7, #24]
 800912e:	4313      	orrs	r3, r2
 8009130:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009132:	69fb      	ldr	r3, [r7, #28]
 8009134:	08da      	lsrs	r2, r3, #3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	3208      	adds	r2, #8
 800913a:	69b9      	ldr	r1, [r7, #24]
 800913c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009146:	69fb      	ldr	r3, [r7, #28]
 8009148:	005b      	lsls	r3, r3, #1
 800914a:	2203      	movs	r2, #3
 800914c:	fa02 f303 	lsl.w	r3, r2, r3
 8009150:	43db      	mvns	r3, r3
 8009152:	69ba      	ldr	r2, [r7, #24]
 8009154:	4013      	ands	r3, r2
 8009156:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	f003 0203 	and.w	r2, r3, #3
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	005b      	lsls	r3, r3, #1
 8009164:	fa02 f303 	lsl.w	r3, r2, r3
 8009168:	69ba      	ldr	r2, [r7, #24]
 800916a:	4313      	orrs	r3, r2
 800916c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	69ba      	ldr	r2, [r7, #24]
 8009172:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800917c:	2b00      	cmp	r3, #0
 800917e:	f000 80a2 	beq.w	80092c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009182:	2300      	movs	r3, #0
 8009184:	60fb      	str	r3, [r7, #12]
 8009186:	4b57      	ldr	r3, [pc, #348]	@ (80092e4 <HAL_GPIO_Init+0x2e8>)
 8009188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800918a:	4a56      	ldr	r2, [pc, #344]	@ (80092e4 <HAL_GPIO_Init+0x2e8>)
 800918c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009190:	6453      	str	r3, [r2, #68]	@ 0x44
 8009192:	4b54      	ldr	r3, [pc, #336]	@ (80092e4 <HAL_GPIO_Init+0x2e8>)
 8009194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009196:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800919a:	60fb      	str	r3, [r7, #12]
 800919c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800919e:	4a52      	ldr	r2, [pc, #328]	@ (80092e8 <HAL_GPIO_Init+0x2ec>)
 80091a0:	69fb      	ldr	r3, [r7, #28]
 80091a2:	089b      	lsrs	r3, r3, #2
 80091a4:	3302      	adds	r3, #2
 80091a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80091ac:	69fb      	ldr	r3, [r7, #28]
 80091ae:	f003 0303 	and.w	r3, r3, #3
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	220f      	movs	r2, #15
 80091b6:	fa02 f303 	lsl.w	r3, r2, r3
 80091ba:	43db      	mvns	r3, r3
 80091bc:	69ba      	ldr	r2, [r7, #24]
 80091be:	4013      	ands	r3, r2
 80091c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	4a49      	ldr	r2, [pc, #292]	@ (80092ec <HAL_GPIO_Init+0x2f0>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d019      	beq.n	80091fe <HAL_GPIO_Init+0x202>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	4a48      	ldr	r2, [pc, #288]	@ (80092f0 <HAL_GPIO_Init+0x2f4>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d013      	beq.n	80091fa <HAL_GPIO_Init+0x1fe>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	4a47      	ldr	r2, [pc, #284]	@ (80092f4 <HAL_GPIO_Init+0x2f8>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d00d      	beq.n	80091f6 <HAL_GPIO_Init+0x1fa>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4a46      	ldr	r2, [pc, #280]	@ (80092f8 <HAL_GPIO_Init+0x2fc>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d007      	beq.n	80091f2 <HAL_GPIO_Init+0x1f6>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4a45      	ldr	r2, [pc, #276]	@ (80092fc <HAL_GPIO_Init+0x300>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d101      	bne.n	80091ee <HAL_GPIO_Init+0x1f2>
 80091ea:	2304      	movs	r3, #4
 80091ec:	e008      	b.n	8009200 <HAL_GPIO_Init+0x204>
 80091ee:	2307      	movs	r3, #7
 80091f0:	e006      	b.n	8009200 <HAL_GPIO_Init+0x204>
 80091f2:	2303      	movs	r3, #3
 80091f4:	e004      	b.n	8009200 <HAL_GPIO_Init+0x204>
 80091f6:	2302      	movs	r3, #2
 80091f8:	e002      	b.n	8009200 <HAL_GPIO_Init+0x204>
 80091fa:	2301      	movs	r3, #1
 80091fc:	e000      	b.n	8009200 <HAL_GPIO_Init+0x204>
 80091fe:	2300      	movs	r3, #0
 8009200:	69fa      	ldr	r2, [r7, #28]
 8009202:	f002 0203 	and.w	r2, r2, #3
 8009206:	0092      	lsls	r2, r2, #2
 8009208:	4093      	lsls	r3, r2
 800920a:	69ba      	ldr	r2, [r7, #24]
 800920c:	4313      	orrs	r3, r2
 800920e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009210:	4935      	ldr	r1, [pc, #212]	@ (80092e8 <HAL_GPIO_Init+0x2ec>)
 8009212:	69fb      	ldr	r3, [r7, #28]
 8009214:	089b      	lsrs	r3, r3, #2
 8009216:	3302      	adds	r3, #2
 8009218:	69ba      	ldr	r2, [r7, #24]
 800921a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800921e:	4b38      	ldr	r3, [pc, #224]	@ (8009300 <HAL_GPIO_Init+0x304>)
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	43db      	mvns	r3, r3
 8009228:	69ba      	ldr	r2, [r7, #24]
 800922a:	4013      	ands	r3, r2
 800922c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009236:	2b00      	cmp	r3, #0
 8009238:	d003      	beq.n	8009242 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800923a:	69ba      	ldr	r2, [r7, #24]
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	4313      	orrs	r3, r2
 8009240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009242:	4a2f      	ldr	r2, [pc, #188]	@ (8009300 <HAL_GPIO_Init+0x304>)
 8009244:	69bb      	ldr	r3, [r7, #24]
 8009246:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009248:	4b2d      	ldr	r3, [pc, #180]	@ (8009300 <HAL_GPIO_Init+0x304>)
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	43db      	mvns	r3, r3
 8009252:	69ba      	ldr	r2, [r7, #24]
 8009254:	4013      	ands	r3, r2
 8009256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009260:	2b00      	cmp	r3, #0
 8009262:	d003      	beq.n	800926c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8009264:	69ba      	ldr	r2, [r7, #24]
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	4313      	orrs	r3, r2
 800926a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800926c:	4a24      	ldr	r2, [pc, #144]	@ (8009300 <HAL_GPIO_Init+0x304>)
 800926e:	69bb      	ldr	r3, [r7, #24]
 8009270:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009272:	4b23      	ldr	r3, [pc, #140]	@ (8009300 <HAL_GPIO_Init+0x304>)
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	43db      	mvns	r3, r3
 800927c:	69ba      	ldr	r2, [r7, #24]
 800927e:	4013      	ands	r3, r2
 8009280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800928a:	2b00      	cmp	r3, #0
 800928c:	d003      	beq.n	8009296 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800928e:	69ba      	ldr	r2, [r7, #24]
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	4313      	orrs	r3, r2
 8009294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009296:	4a1a      	ldr	r2, [pc, #104]	@ (8009300 <HAL_GPIO_Init+0x304>)
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800929c:	4b18      	ldr	r3, [pc, #96]	@ (8009300 <HAL_GPIO_Init+0x304>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	43db      	mvns	r3, r3
 80092a6:	69ba      	ldr	r2, [r7, #24]
 80092a8:	4013      	ands	r3, r2
 80092aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d003      	beq.n	80092c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80092b8:	69ba      	ldr	r2, [r7, #24]
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	4313      	orrs	r3, r2
 80092be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80092c0:	4a0f      	ldr	r2, [pc, #60]	@ (8009300 <HAL_GPIO_Init+0x304>)
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80092c6:	69fb      	ldr	r3, [r7, #28]
 80092c8:	3301      	adds	r3, #1
 80092ca:	61fb      	str	r3, [r7, #28]
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	2b0f      	cmp	r3, #15
 80092d0:	f67f aea2 	bls.w	8009018 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80092d4:	bf00      	nop
 80092d6:	bf00      	nop
 80092d8:	3724      	adds	r7, #36	@ 0x24
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr
 80092e2:	bf00      	nop
 80092e4:	40023800 	.word	0x40023800
 80092e8:	40013800 	.word	0x40013800
 80092ec:	40020000 	.word	0x40020000
 80092f0:	40020400 	.word	0x40020400
 80092f4:	40020800 	.word	0x40020800
 80092f8:	40020c00 	.word	0x40020c00
 80092fc:	40021000 	.word	0x40021000
 8009300:	40013c00 	.word	0x40013c00

08009304 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009304:	b480      	push	{r7}
 8009306:	b085      	sub	sp, #20
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	460b      	mov	r3, r1
 800930e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	691a      	ldr	r2, [r3, #16]
 8009314:	887b      	ldrh	r3, [r7, #2]
 8009316:	4013      	ands	r3, r2
 8009318:	2b00      	cmp	r3, #0
 800931a:	d002      	beq.n	8009322 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800931c:	2301      	movs	r3, #1
 800931e:	73fb      	strb	r3, [r7, #15]
 8009320:	e001      	b.n	8009326 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009322:	2300      	movs	r3, #0
 8009324:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009326:	7bfb      	ldrb	r3, [r7, #15]
}
 8009328:	4618      	mov	r0, r3
 800932a:	3714      	adds	r7, #20
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	460b      	mov	r3, r1
 800933e:	807b      	strh	r3, [r7, #2]
 8009340:	4613      	mov	r3, r2
 8009342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009344:	787b      	ldrb	r3, [r7, #1]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d003      	beq.n	8009352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800934a:	887a      	ldrh	r2, [r7, #2]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009350:	e003      	b.n	800935a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009352:	887b      	ldrh	r3, [r7, #2]
 8009354:	041a      	lsls	r2, r3, #16
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	619a      	str	r2, [r3, #24]
}
 800935a:	bf00      	nop
 800935c:	370c      	adds	r7, #12
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr
	...

08009368 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	4603      	mov	r3, r0
 8009370:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009372:	4b08      	ldr	r3, [pc, #32]	@ (8009394 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009374:	695a      	ldr	r2, [r3, #20]
 8009376:	88fb      	ldrh	r3, [r7, #6]
 8009378:	4013      	ands	r3, r2
 800937a:	2b00      	cmp	r3, #0
 800937c:	d006      	beq.n	800938c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800937e:	4a05      	ldr	r2, [pc, #20]	@ (8009394 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009380:	88fb      	ldrh	r3, [r7, #6]
 8009382:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009384:	88fb      	ldrh	r3, [r7, #6]
 8009386:	4618      	mov	r0, r3
 8009388:	f7fe f908 	bl	800759c <HAL_GPIO_EXTI_Callback>
  }
}
 800938c:	bf00      	nop
 800938e:	3708      	adds	r7, #8
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	40013c00 	.word	0x40013c00

08009398 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d101      	bne.n	80093aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	e12b      	b.n	8009602 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d106      	bne.n	80093c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2200      	movs	r2, #0
 80093ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f7fe fe76 	bl	80080b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2224      	movs	r2, #36	@ 0x24
 80093c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f022 0201 	bic.w	r2, r2, #1
 80093da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80093ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80093fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80093fc:	f001 fc20 	bl	800ac40 <HAL_RCC_GetPCLK1Freq>
 8009400:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	4a81      	ldr	r2, [pc, #516]	@ (800960c <HAL_I2C_Init+0x274>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d807      	bhi.n	800941c <HAL_I2C_Init+0x84>
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	4a80      	ldr	r2, [pc, #512]	@ (8009610 <HAL_I2C_Init+0x278>)
 8009410:	4293      	cmp	r3, r2
 8009412:	bf94      	ite	ls
 8009414:	2301      	movls	r3, #1
 8009416:	2300      	movhi	r3, #0
 8009418:	b2db      	uxtb	r3, r3
 800941a:	e006      	b.n	800942a <HAL_I2C_Init+0x92>
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	4a7d      	ldr	r2, [pc, #500]	@ (8009614 <HAL_I2C_Init+0x27c>)
 8009420:	4293      	cmp	r3, r2
 8009422:	bf94      	ite	ls
 8009424:	2301      	movls	r3, #1
 8009426:	2300      	movhi	r3, #0
 8009428:	b2db      	uxtb	r3, r3
 800942a:	2b00      	cmp	r3, #0
 800942c:	d001      	beq.n	8009432 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	e0e7      	b.n	8009602 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	4a78      	ldr	r2, [pc, #480]	@ (8009618 <HAL_I2C_Init+0x280>)
 8009436:	fba2 2303 	umull	r2, r3, r2, r3
 800943a:	0c9b      	lsrs	r3, r3, #18
 800943c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	68ba      	ldr	r2, [r7, #8]
 800944e:	430a      	orrs	r2, r1
 8009450:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	6a1b      	ldr	r3, [r3, #32]
 8009458:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	4a6a      	ldr	r2, [pc, #424]	@ (800960c <HAL_I2C_Init+0x274>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d802      	bhi.n	800946c <HAL_I2C_Init+0xd4>
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	3301      	adds	r3, #1
 800946a:	e009      	b.n	8009480 <HAL_I2C_Init+0xe8>
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8009472:	fb02 f303 	mul.w	r3, r2, r3
 8009476:	4a69      	ldr	r2, [pc, #420]	@ (800961c <HAL_I2C_Init+0x284>)
 8009478:	fba2 2303 	umull	r2, r3, r2, r3
 800947c:	099b      	lsrs	r3, r3, #6
 800947e:	3301      	adds	r3, #1
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	6812      	ldr	r2, [r2, #0]
 8009484:	430b      	orrs	r3, r1
 8009486:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	69db      	ldr	r3, [r3, #28]
 800948e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8009492:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	495c      	ldr	r1, [pc, #368]	@ (800960c <HAL_I2C_Init+0x274>)
 800949c:	428b      	cmp	r3, r1
 800949e:	d819      	bhi.n	80094d4 <HAL_I2C_Init+0x13c>
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	1e59      	subs	r1, r3, #1
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	005b      	lsls	r3, r3, #1
 80094aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80094ae:	1c59      	adds	r1, r3, #1
 80094b0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80094b4:	400b      	ands	r3, r1
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d00a      	beq.n	80094d0 <HAL_I2C_Init+0x138>
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	1e59      	subs	r1, r3, #1
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	005b      	lsls	r3, r3, #1
 80094c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80094c8:	3301      	adds	r3, #1
 80094ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094ce:	e051      	b.n	8009574 <HAL_I2C_Init+0x1dc>
 80094d0:	2304      	movs	r3, #4
 80094d2:	e04f      	b.n	8009574 <HAL_I2C_Init+0x1dc>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d111      	bne.n	8009500 <HAL_I2C_Init+0x168>
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	1e58      	subs	r0, r3, #1
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6859      	ldr	r1, [r3, #4]
 80094e4:	460b      	mov	r3, r1
 80094e6:	005b      	lsls	r3, r3, #1
 80094e8:	440b      	add	r3, r1
 80094ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80094ee:	3301      	adds	r3, #1
 80094f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	bf0c      	ite	eq
 80094f8:	2301      	moveq	r3, #1
 80094fa:	2300      	movne	r3, #0
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	e012      	b.n	8009526 <HAL_I2C_Init+0x18e>
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	1e58      	subs	r0, r3, #1
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6859      	ldr	r1, [r3, #4]
 8009508:	460b      	mov	r3, r1
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	440b      	add	r3, r1
 800950e:	0099      	lsls	r1, r3, #2
 8009510:	440b      	add	r3, r1
 8009512:	fbb0 f3f3 	udiv	r3, r0, r3
 8009516:	3301      	adds	r3, #1
 8009518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800951c:	2b00      	cmp	r3, #0
 800951e:	bf0c      	ite	eq
 8009520:	2301      	moveq	r3, #1
 8009522:	2300      	movne	r3, #0
 8009524:	b2db      	uxtb	r3, r3
 8009526:	2b00      	cmp	r3, #0
 8009528:	d001      	beq.n	800952e <HAL_I2C_Init+0x196>
 800952a:	2301      	movs	r3, #1
 800952c:	e022      	b.n	8009574 <HAL_I2C_Init+0x1dc>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d10e      	bne.n	8009554 <HAL_I2C_Init+0x1bc>
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	1e58      	subs	r0, r3, #1
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6859      	ldr	r1, [r3, #4]
 800953e:	460b      	mov	r3, r1
 8009540:	005b      	lsls	r3, r3, #1
 8009542:	440b      	add	r3, r1
 8009544:	fbb0 f3f3 	udiv	r3, r0, r3
 8009548:	3301      	adds	r3, #1
 800954a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800954e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009552:	e00f      	b.n	8009574 <HAL_I2C_Init+0x1dc>
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	1e58      	subs	r0, r3, #1
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6859      	ldr	r1, [r3, #4]
 800955c:	460b      	mov	r3, r1
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	440b      	add	r3, r1
 8009562:	0099      	lsls	r1, r3, #2
 8009564:	440b      	add	r3, r1
 8009566:	fbb0 f3f3 	udiv	r3, r0, r3
 800956a:	3301      	adds	r3, #1
 800956c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009570:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009574:	6879      	ldr	r1, [r7, #4]
 8009576:	6809      	ldr	r1, [r1, #0]
 8009578:	4313      	orrs	r3, r2
 800957a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	69da      	ldr	r2, [r3, #28]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6a1b      	ldr	r3, [r3, #32]
 800958e:	431a      	orrs	r2, r3
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	430a      	orrs	r2, r1
 8009596:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80095a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	6911      	ldr	r1, [r2, #16]
 80095aa:	687a      	ldr	r2, [r7, #4]
 80095ac:	68d2      	ldr	r2, [r2, #12]
 80095ae:	4311      	orrs	r1, r2
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	6812      	ldr	r2, [r2, #0]
 80095b4:	430b      	orrs	r3, r1
 80095b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	68db      	ldr	r3, [r3, #12]
 80095be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	695a      	ldr	r2, [r3, #20]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	699b      	ldr	r3, [r3, #24]
 80095ca:	431a      	orrs	r2, r3
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	430a      	orrs	r2, r1
 80095d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f042 0201 	orr.w	r2, r2, #1
 80095e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2200      	movs	r2, #0
 80095e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2220      	movs	r2, #32
 80095ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2200      	movs	r2, #0
 80095f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8009600:	2300      	movs	r3, #0
}
 8009602:	4618      	mov	r0, r3
 8009604:	3710      	adds	r7, #16
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	000186a0 	.word	0x000186a0
 8009610:	001e847f 	.word	0x001e847f
 8009614:	003d08ff 	.word	0x003d08ff
 8009618:	431bde83 	.word	0x431bde83
 800961c:	10624dd3 	.word	0x10624dd3

08009620 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b088      	sub	sp, #32
 8009624:	af02      	add	r7, sp, #8
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	4608      	mov	r0, r1
 800962a:	4611      	mov	r1, r2
 800962c:	461a      	mov	r2, r3
 800962e:	4603      	mov	r3, r0
 8009630:	817b      	strh	r3, [r7, #10]
 8009632:	460b      	mov	r3, r1
 8009634:	813b      	strh	r3, [r7, #8]
 8009636:	4613      	mov	r3, r2
 8009638:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800963a:	f7ff f869 	bl	8008710 <HAL_GetTick>
 800963e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009646:	b2db      	uxtb	r3, r3
 8009648:	2b20      	cmp	r3, #32
 800964a:	f040 80d9 	bne.w	8009800 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	9300      	str	r3, [sp, #0]
 8009652:	2319      	movs	r3, #25
 8009654:	2201      	movs	r2, #1
 8009656:	496d      	ldr	r1, [pc, #436]	@ (800980c <HAL_I2C_Mem_Write+0x1ec>)
 8009658:	68f8      	ldr	r0, [r7, #12]
 800965a:	f000 fc8b 	bl	8009f74 <I2C_WaitOnFlagUntilTimeout>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d001      	beq.n	8009668 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009664:	2302      	movs	r3, #2
 8009666:	e0cc      	b.n	8009802 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800966e:	2b01      	cmp	r3, #1
 8009670:	d101      	bne.n	8009676 <HAL_I2C_Mem_Write+0x56>
 8009672:	2302      	movs	r3, #2
 8009674:	e0c5      	b.n	8009802 <HAL_I2C_Mem_Write+0x1e2>
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2201      	movs	r2, #1
 800967a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f003 0301 	and.w	r3, r3, #1
 8009688:	2b01      	cmp	r3, #1
 800968a:	d007      	beq.n	800969c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f042 0201 	orr.w	r2, r2, #1
 800969a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80096aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2221      	movs	r2, #33	@ 0x21
 80096b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2240      	movs	r2, #64	@ 0x40
 80096b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2200      	movs	r2, #0
 80096c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	6a3a      	ldr	r2, [r7, #32]
 80096c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80096cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096d2:	b29a      	uxth	r2, r3
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	4a4d      	ldr	r2, [pc, #308]	@ (8009810 <HAL_I2C_Mem_Write+0x1f0>)
 80096dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80096de:	88f8      	ldrh	r0, [r7, #6]
 80096e0:	893a      	ldrh	r2, [r7, #8]
 80096e2:	8979      	ldrh	r1, [r7, #10]
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	9301      	str	r3, [sp, #4]
 80096e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ea:	9300      	str	r3, [sp, #0]
 80096ec:	4603      	mov	r3, r0
 80096ee:	68f8      	ldr	r0, [r7, #12]
 80096f0:	f000 fac2 	bl	8009c78 <I2C_RequestMemoryWrite>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d052      	beq.n	80097a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80096fa:	2301      	movs	r3, #1
 80096fc:	e081      	b.n	8009802 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096fe:	697a      	ldr	r2, [r7, #20]
 8009700:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	f000 fd50 	bl	800a1a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009708:	4603      	mov	r3, r0
 800970a:	2b00      	cmp	r3, #0
 800970c:	d00d      	beq.n	800972a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009712:	2b04      	cmp	r3, #4
 8009714:	d107      	bne.n	8009726 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009724:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	e06b      	b.n	8009802 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800972e:	781a      	ldrb	r2, [r3, #0]
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800973a:	1c5a      	adds	r2, r3, #1
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009744:	3b01      	subs	r3, #1
 8009746:	b29a      	uxth	r2, r3
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009750:	b29b      	uxth	r3, r3
 8009752:	3b01      	subs	r3, #1
 8009754:	b29a      	uxth	r2, r3
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	695b      	ldr	r3, [r3, #20]
 8009760:	f003 0304 	and.w	r3, r3, #4
 8009764:	2b04      	cmp	r3, #4
 8009766:	d11b      	bne.n	80097a0 <HAL_I2C_Mem_Write+0x180>
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800976c:	2b00      	cmp	r3, #0
 800976e:	d017      	beq.n	80097a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009774:	781a      	ldrb	r2, [r3, #0]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009780:	1c5a      	adds	r2, r3, #1
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800978a:	3b01      	subs	r3, #1
 800978c:	b29a      	uxth	r2, r3
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009796:	b29b      	uxth	r3, r3
 8009798:	3b01      	subs	r3, #1
 800979a:	b29a      	uxth	r2, r3
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d1aa      	bne.n	80096fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097a8:	697a      	ldr	r2, [r7, #20]
 80097aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f000 fd43 	bl	800a238 <I2C_WaitOnBTFFlagUntilTimeout>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d00d      	beq.n	80097d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097bc:	2b04      	cmp	r3, #4
 80097be:	d107      	bne.n	80097d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80097ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80097d0:	2301      	movs	r3, #1
 80097d2:	e016      	b.n	8009802 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80097e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2220      	movs	r2, #32
 80097e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2200      	movs	r2, #0
 80097f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2200      	movs	r2, #0
 80097f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80097fc:	2300      	movs	r3, #0
 80097fe:	e000      	b.n	8009802 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009800:	2302      	movs	r3, #2
  }
}
 8009802:	4618      	mov	r0, r3
 8009804:	3718      	adds	r7, #24
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	00100002 	.word	0x00100002
 8009810:	ffff0000 	.word	0xffff0000

08009814 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b08c      	sub	sp, #48	@ 0x30
 8009818:	af02      	add	r7, sp, #8
 800981a:	60f8      	str	r0, [r7, #12]
 800981c:	4608      	mov	r0, r1
 800981e:	4611      	mov	r1, r2
 8009820:	461a      	mov	r2, r3
 8009822:	4603      	mov	r3, r0
 8009824:	817b      	strh	r3, [r7, #10]
 8009826:	460b      	mov	r3, r1
 8009828:	813b      	strh	r3, [r7, #8]
 800982a:	4613      	mov	r3, r2
 800982c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800982e:	f7fe ff6f 	bl	8008710 <HAL_GetTick>
 8009832:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800983a:	b2db      	uxtb	r3, r3
 800983c:	2b20      	cmp	r3, #32
 800983e:	f040 8214 	bne.w	8009c6a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009844:	9300      	str	r3, [sp, #0]
 8009846:	2319      	movs	r3, #25
 8009848:	2201      	movs	r2, #1
 800984a:	497b      	ldr	r1, [pc, #492]	@ (8009a38 <HAL_I2C_Mem_Read+0x224>)
 800984c:	68f8      	ldr	r0, [r7, #12]
 800984e:	f000 fb91 	bl	8009f74 <I2C_WaitOnFlagUntilTimeout>
 8009852:	4603      	mov	r3, r0
 8009854:	2b00      	cmp	r3, #0
 8009856:	d001      	beq.n	800985c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8009858:	2302      	movs	r3, #2
 800985a:	e207      	b.n	8009c6c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009862:	2b01      	cmp	r3, #1
 8009864:	d101      	bne.n	800986a <HAL_I2C_Mem_Read+0x56>
 8009866:	2302      	movs	r3, #2
 8009868:	e200      	b.n	8009c6c <HAL_I2C_Mem_Read+0x458>
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2201      	movs	r2, #1
 800986e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f003 0301 	and.w	r3, r3, #1
 800987c:	2b01      	cmp	r3, #1
 800987e:	d007      	beq.n	8009890 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f042 0201 	orr.w	r2, r2, #1
 800988e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800989e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2222      	movs	r2, #34	@ 0x22
 80098a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2240      	movs	r2, #64	@ 0x40
 80098ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2200      	movs	r2, #0
 80098b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80098c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098c6:	b29a      	uxth	r2, r3
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	4a5b      	ldr	r2, [pc, #364]	@ (8009a3c <HAL_I2C_Mem_Read+0x228>)
 80098d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80098d2:	88f8      	ldrh	r0, [r7, #6]
 80098d4:	893a      	ldrh	r2, [r7, #8]
 80098d6:	8979      	ldrh	r1, [r7, #10]
 80098d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098da:	9301      	str	r3, [sp, #4]
 80098dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098de:	9300      	str	r3, [sp, #0]
 80098e0:	4603      	mov	r3, r0
 80098e2:	68f8      	ldr	r0, [r7, #12]
 80098e4:	f000 fa5e 	bl	8009da4 <I2C_RequestMemoryRead>
 80098e8:	4603      	mov	r3, r0
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d001      	beq.n	80098f2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	e1bc      	b.n	8009c6c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d113      	bne.n	8009922 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098fa:	2300      	movs	r3, #0
 80098fc:	623b      	str	r3, [r7, #32]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	695b      	ldr	r3, [r3, #20]
 8009904:	623b      	str	r3, [r7, #32]
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	699b      	ldr	r3, [r3, #24]
 800990c:	623b      	str	r3, [r7, #32]
 800990e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800991e:	601a      	str	r2, [r3, #0]
 8009920:	e190      	b.n	8009c44 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009926:	2b01      	cmp	r3, #1
 8009928:	d11b      	bne.n	8009962 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009938:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800993a:	2300      	movs	r3, #0
 800993c:	61fb      	str	r3, [r7, #28]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	695b      	ldr	r3, [r3, #20]
 8009944:	61fb      	str	r3, [r7, #28]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	699b      	ldr	r3, [r3, #24]
 800994c:	61fb      	str	r3, [r7, #28]
 800994e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800995e:	601a      	str	r2, [r3, #0]
 8009960:	e170      	b.n	8009c44 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009966:	2b02      	cmp	r3, #2
 8009968:	d11b      	bne.n	80099a2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009978:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009988:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800998a:	2300      	movs	r3, #0
 800998c:	61bb      	str	r3, [r7, #24]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	695b      	ldr	r3, [r3, #20]
 8009994:	61bb      	str	r3, [r7, #24]
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	699b      	ldr	r3, [r3, #24]
 800999c:	61bb      	str	r3, [r7, #24]
 800999e:	69bb      	ldr	r3, [r7, #24]
 80099a0:	e150      	b.n	8009c44 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80099a2:	2300      	movs	r3, #0
 80099a4:	617b      	str	r3, [r7, #20]
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	695b      	ldr	r3, [r3, #20]
 80099ac:	617b      	str	r3, [r7, #20]
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	699b      	ldr	r3, [r3, #24]
 80099b4:	617b      	str	r3, [r7, #20]
 80099b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80099b8:	e144      	b.n	8009c44 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80099be:	2b03      	cmp	r3, #3
 80099c0:	f200 80f1 	bhi.w	8009ba6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d123      	bne.n	8009a14 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099ce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80099d0:	68f8      	ldr	r0, [r7, #12]
 80099d2:	f000 fc79 	bl	800a2c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80099d6:	4603      	mov	r3, r0
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d001      	beq.n	80099e0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80099dc:	2301      	movs	r3, #1
 80099de:	e145      	b.n	8009c6c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	691a      	ldr	r2, [r3, #16]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ea:	b2d2      	uxtb	r2, r2
 80099ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099f2:	1c5a      	adds	r2, r3, #1
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80099fc:	3b01      	subs	r3, #1
 80099fe:	b29a      	uxth	r2, r3
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a08:	b29b      	uxth	r3, r3
 8009a0a:	3b01      	subs	r3, #1
 8009a0c:	b29a      	uxth	r2, r3
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009a12:	e117      	b.n	8009c44 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a18:	2b02      	cmp	r3, #2
 8009a1a:	d14e      	bne.n	8009aba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a1e:	9300      	str	r3, [sp, #0]
 8009a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a22:	2200      	movs	r2, #0
 8009a24:	4906      	ldr	r1, [pc, #24]	@ (8009a40 <HAL_I2C_Mem_Read+0x22c>)
 8009a26:	68f8      	ldr	r0, [r7, #12]
 8009a28:	f000 faa4 	bl	8009f74 <I2C_WaitOnFlagUntilTimeout>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d008      	beq.n	8009a44 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8009a32:	2301      	movs	r3, #1
 8009a34:	e11a      	b.n	8009c6c <HAL_I2C_Mem_Read+0x458>
 8009a36:	bf00      	nop
 8009a38:	00100002 	.word	0x00100002
 8009a3c:	ffff0000 	.word	0xffff0000
 8009a40:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	691a      	ldr	r2, [r3, #16]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a5e:	b2d2      	uxtb	r2, r2
 8009a60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a66:	1c5a      	adds	r2, r3, #1
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a70:	3b01      	subs	r3, #1
 8009a72:	b29a      	uxth	r2, r3
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	3b01      	subs	r3, #1
 8009a80:	b29a      	uxth	r2, r3
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	691a      	ldr	r2, [r3, #16]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a90:	b2d2      	uxtb	r2, r2
 8009a92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a98:	1c5a      	adds	r2, r3, #1
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009aa2:	3b01      	subs	r3, #1
 8009aa4:	b29a      	uxth	r2, r3
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	b29a      	uxth	r2, r3
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009ab8:	e0c4      	b.n	8009c44 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009abc:	9300      	str	r3, [sp, #0]
 8009abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	496c      	ldr	r1, [pc, #432]	@ (8009c74 <HAL_I2C_Mem_Read+0x460>)
 8009ac4:	68f8      	ldr	r0, [r7, #12]
 8009ac6:	f000 fa55 	bl	8009f74 <I2C_WaitOnFlagUntilTimeout>
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d001      	beq.n	8009ad4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e0cb      	b.n	8009c6c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ae2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	691a      	ldr	r2, [r3, #16]
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aee:	b2d2      	uxtb	r2, r2
 8009af0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009af6:	1c5a      	adds	r2, r3, #1
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b00:	3b01      	subs	r3, #1
 8009b02:	b29a      	uxth	r2, r3
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	3b01      	subs	r3, #1
 8009b10:	b29a      	uxth	r2, r3
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b18:	9300      	str	r3, [sp, #0]
 8009b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	4955      	ldr	r1, [pc, #340]	@ (8009c74 <HAL_I2C_Mem_Read+0x460>)
 8009b20:	68f8      	ldr	r0, [r7, #12]
 8009b22:	f000 fa27 	bl	8009f74 <I2C_WaitOnFlagUntilTimeout>
 8009b26:	4603      	mov	r3, r0
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d001      	beq.n	8009b30 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	e09d      	b.n	8009c6c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009b3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	691a      	ldr	r2, [r3, #16]
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b4a:	b2d2      	uxtb	r2, r2
 8009b4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b52:	1c5a      	adds	r2, r3, #1
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b5c:	3b01      	subs	r3, #1
 8009b5e:	b29a      	uxth	r2, r3
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	3b01      	subs	r3, #1
 8009b6c:	b29a      	uxth	r2, r3
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	691a      	ldr	r2, [r3, #16]
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b7c:	b2d2      	uxtb	r2, r2
 8009b7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b84:	1c5a      	adds	r2, r3, #1
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b8e:	3b01      	subs	r3, #1
 8009b90:	b29a      	uxth	r2, r3
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	b29a      	uxth	r2, r3
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009ba4:	e04e      	b.n	8009c44 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ba6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ba8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009baa:	68f8      	ldr	r0, [r7, #12]
 8009bac:	f000 fb8c 	bl	800a2c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d001      	beq.n	8009bba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e058      	b.n	8009c6c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	691a      	ldr	r2, [r3, #16]
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bc4:	b2d2      	uxtb	r2, r2
 8009bc6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bcc:	1c5a      	adds	r2, r3, #1
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009bd6:	3b01      	subs	r3, #1
 8009bd8:	b29a      	uxth	r2, r3
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	3b01      	subs	r3, #1
 8009be6:	b29a      	uxth	r2, r3
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	695b      	ldr	r3, [r3, #20]
 8009bf2:	f003 0304 	and.w	r3, r3, #4
 8009bf6:	2b04      	cmp	r3, #4
 8009bf8:	d124      	bne.n	8009c44 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009bfe:	2b03      	cmp	r3, #3
 8009c00:	d107      	bne.n	8009c12 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009c10:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	691a      	ldr	r2, [r3, #16]
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c1c:	b2d2      	uxtb	r2, r2
 8009c1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c24:	1c5a      	adds	r2, r3, #1
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c2e:	3b01      	subs	r3, #1
 8009c30:	b29a      	uxth	r2, r3
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	3b01      	subs	r3, #1
 8009c3e:	b29a      	uxth	r2, r3
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	f47f aeb6 	bne.w	80099ba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2220      	movs	r2, #32
 8009c52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2200      	movs	r2, #0
 8009c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009c66:	2300      	movs	r3, #0
 8009c68:	e000      	b.n	8009c6c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8009c6a:	2302      	movs	r3, #2
  }
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3728      	adds	r7, #40	@ 0x28
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}
 8009c74:	00010004 	.word	0x00010004

08009c78 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b088      	sub	sp, #32
 8009c7c:	af02      	add	r7, sp, #8
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	4608      	mov	r0, r1
 8009c82:	4611      	mov	r1, r2
 8009c84:	461a      	mov	r2, r3
 8009c86:	4603      	mov	r3, r0
 8009c88:	817b      	strh	r3, [r7, #10]
 8009c8a:	460b      	mov	r3, r1
 8009c8c:	813b      	strh	r3, [r7, #8]
 8009c8e:	4613      	mov	r3, r2
 8009c90:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009ca0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ca4:	9300      	str	r3, [sp, #0]
 8009ca6:	6a3b      	ldr	r3, [r7, #32]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009cae:	68f8      	ldr	r0, [r7, #12]
 8009cb0:	f000 f960 	bl	8009f74 <I2C_WaitOnFlagUntilTimeout>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d00d      	beq.n	8009cd6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cc8:	d103      	bne.n	8009cd2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009cd0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009cd2:	2303      	movs	r3, #3
 8009cd4:	e05f      	b.n	8009d96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009cd6:	897b      	ldrh	r3, [r7, #10]
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	461a      	mov	r2, r3
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009ce4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce8:	6a3a      	ldr	r2, [r7, #32]
 8009cea:	492d      	ldr	r1, [pc, #180]	@ (8009da0 <I2C_RequestMemoryWrite+0x128>)
 8009cec:	68f8      	ldr	r0, [r7, #12]
 8009cee:	f000 f9bb 	bl	800a068 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d001      	beq.n	8009cfc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	e04c      	b.n	8009d96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	617b      	str	r3, [r7, #20]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	695b      	ldr	r3, [r3, #20]
 8009d06:	617b      	str	r3, [r7, #20]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	699b      	ldr	r3, [r3, #24]
 8009d0e:	617b      	str	r3, [r7, #20]
 8009d10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d14:	6a39      	ldr	r1, [r7, #32]
 8009d16:	68f8      	ldr	r0, [r7, #12]
 8009d18:	f000 fa46 	bl	800a1a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d00d      	beq.n	8009d3e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d26:	2b04      	cmp	r3, #4
 8009d28:	d107      	bne.n	8009d3a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	681a      	ldr	r2, [r3, #0]
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009d38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	e02b      	b.n	8009d96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009d3e:	88fb      	ldrh	r3, [r7, #6]
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d105      	bne.n	8009d50 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009d44:	893b      	ldrh	r3, [r7, #8]
 8009d46:	b2da      	uxtb	r2, r3
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	611a      	str	r2, [r3, #16]
 8009d4e:	e021      	b.n	8009d94 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009d50:	893b      	ldrh	r3, [r7, #8]
 8009d52:	0a1b      	lsrs	r3, r3, #8
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	b2da      	uxtb	r2, r3
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d60:	6a39      	ldr	r1, [r7, #32]
 8009d62:	68f8      	ldr	r0, [r7, #12]
 8009d64:	f000 fa20 	bl	800a1a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d00d      	beq.n	8009d8a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d72:	2b04      	cmp	r3, #4
 8009d74:	d107      	bne.n	8009d86 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	681a      	ldr	r2, [r3, #0]
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009d84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009d86:	2301      	movs	r3, #1
 8009d88:	e005      	b.n	8009d96 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009d8a:	893b      	ldrh	r3, [r7, #8]
 8009d8c:	b2da      	uxtb	r2, r3
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009d94:	2300      	movs	r3, #0
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3718      	adds	r7, #24
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	00010002 	.word	0x00010002

08009da4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b088      	sub	sp, #32
 8009da8:	af02      	add	r7, sp, #8
 8009daa:	60f8      	str	r0, [r7, #12]
 8009dac:	4608      	mov	r0, r1
 8009dae:	4611      	mov	r1, r2
 8009db0:	461a      	mov	r2, r3
 8009db2:	4603      	mov	r3, r0
 8009db4:	817b      	strh	r3, [r7, #10]
 8009db6:	460b      	mov	r3, r1
 8009db8:	813b      	strh	r3, [r7, #8]
 8009dba:	4613      	mov	r3, r2
 8009dbc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	681a      	ldr	r2, [r3, #0]
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009dcc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009ddc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009de0:	9300      	str	r3, [sp, #0]
 8009de2:	6a3b      	ldr	r3, [r7, #32]
 8009de4:	2200      	movs	r2, #0
 8009de6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009dea:	68f8      	ldr	r0, [r7, #12]
 8009dec:	f000 f8c2 	bl	8009f74 <I2C_WaitOnFlagUntilTimeout>
 8009df0:	4603      	mov	r3, r0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d00d      	beq.n	8009e12 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e04:	d103      	bne.n	8009e0e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009e0c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009e0e:	2303      	movs	r3, #3
 8009e10:	e0aa      	b.n	8009f68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009e12:	897b      	ldrh	r3, [r7, #10]
 8009e14:	b2db      	uxtb	r3, r3
 8009e16:	461a      	mov	r2, r3
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009e20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e24:	6a3a      	ldr	r2, [r7, #32]
 8009e26:	4952      	ldr	r1, [pc, #328]	@ (8009f70 <I2C_RequestMemoryRead+0x1cc>)
 8009e28:	68f8      	ldr	r0, [r7, #12]
 8009e2a:	f000 f91d 	bl	800a068 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d001      	beq.n	8009e38 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009e34:	2301      	movs	r3, #1
 8009e36:	e097      	b.n	8009f68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e38:	2300      	movs	r3, #0
 8009e3a:	617b      	str	r3, [r7, #20]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	695b      	ldr	r3, [r3, #20]
 8009e42:	617b      	str	r3, [r7, #20]
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	699b      	ldr	r3, [r3, #24]
 8009e4a:	617b      	str	r3, [r7, #20]
 8009e4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e50:	6a39      	ldr	r1, [r7, #32]
 8009e52:	68f8      	ldr	r0, [r7, #12]
 8009e54:	f000 f9a8 	bl	800a1a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d00d      	beq.n	8009e7a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e62:	2b04      	cmp	r3, #4
 8009e64:	d107      	bne.n	8009e76 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009e74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009e76:	2301      	movs	r3, #1
 8009e78:	e076      	b.n	8009f68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009e7a:	88fb      	ldrh	r3, [r7, #6]
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d105      	bne.n	8009e8c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009e80:	893b      	ldrh	r3, [r7, #8]
 8009e82:	b2da      	uxtb	r2, r3
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	611a      	str	r2, [r3, #16]
 8009e8a:	e021      	b.n	8009ed0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009e8c:	893b      	ldrh	r3, [r7, #8]
 8009e8e:	0a1b      	lsrs	r3, r3, #8
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	b2da      	uxtb	r2, r3
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e9c:	6a39      	ldr	r1, [r7, #32]
 8009e9e:	68f8      	ldr	r0, [r7, #12]
 8009ea0:	f000 f982 	bl	800a1a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d00d      	beq.n	8009ec6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eae:	2b04      	cmp	r3, #4
 8009eb0:	d107      	bne.n	8009ec2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	681a      	ldr	r2, [r3, #0]
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009ec0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e050      	b.n	8009f68 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009ec6:	893b      	ldrh	r3, [r7, #8]
 8009ec8:	b2da      	uxtb	r2, r3
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ed0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ed2:	6a39      	ldr	r1, [r7, #32]
 8009ed4:	68f8      	ldr	r0, [r7, #12]
 8009ed6:	f000 f967 	bl	800a1a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009eda:	4603      	mov	r3, r0
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d00d      	beq.n	8009efc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ee4:	2b04      	cmp	r3, #4
 8009ee6:	d107      	bne.n	8009ef8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009ef6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	e035      	b.n	8009f68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009f0a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f0e:	9300      	str	r3, [sp, #0]
 8009f10:	6a3b      	ldr	r3, [r7, #32]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009f18:	68f8      	ldr	r0, [r7, #12]
 8009f1a:	f000 f82b 	bl	8009f74 <I2C_WaitOnFlagUntilTimeout>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d00d      	beq.n	8009f40 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f32:	d103      	bne.n	8009f3c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009f3a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009f3c:	2303      	movs	r3, #3
 8009f3e:	e013      	b.n	8009f68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009f40:	897b      	ldrh	r3, [r7, #10]
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	f043 0301 	orr.w	r3, r3, #1
 8009f48:	b2da      	uxtb	r2, r3
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f52:	6a3a      	ldr	r2, [r7, #32]
 8009f54:	4906      	ldr	r1, [pc, #24]	@ (8009f70 <I2C_RequestMemoryRead+0x1cc>)
 8009f56:	68f8      	ldr	r0, [r7, #12]
 8009f58:	f000 f886 	bl	800a068 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d001      	beq.n	8009f66 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009f62:	2301      	movs	r3, #1
 8009f64:	e000      	b.n	8009f68 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009f66:	2300      	movs	r3, #0
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3718      	adds	r7, #24
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	00010002 	.word	0x00010002

08009f74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	60b9      	str	r1, [r7, #8]
 8009f7e:	603b      	str	r3, [r7, #0]
 8009f80:	4613      	mov	r3, r2
 8009f82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009f84:	e048      	b.n	800a018 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f8c:	d044      	beq.n	800a018 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f8e:	f7fe fbbf 	bl	8008710 <HAL_GetTick>
 8009f92:	4602      	mov	r2, r0
 8009f94:	69bb      	ldr	r3, [r7, #24]
 8009f96:	1ad3      	subs	r3, r2, r3
 8009f98:	683a      	ldr	r2, [r7, #0]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d302      	bcc.n	8009fa4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d139      	bne.n	800a018 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	0c1b      	lsrs	r3, r3, #16
 8009fa8:	b2db      	uxtb	r3, r3
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d10d      	bne.n	8009fca <I2C_WaitOnFlagUntilTimeout+0x56>
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	695b      	ldr	r3, [r3, #20]
 8009fb4:	43da      	mvns	r2, r3
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	4013      	ands	r3, r2
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	bf0c      	ite	eq
 8009fc0:	2301      	moveq	r3, #1
 8009fc2:	2300      	movne	r3, #0
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	e00c      	b.n	8009fe4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	699b      	ldr	r3, [r3, #24]
 8009fd0:	43da      	mvns	r2, r3
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	4013      	ands	r3, r2
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	bf0c      	ite	eq
 8009fdc:	2301      	moveq	r3, #1
 8009fde:	2300      	movne	r3, #0
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	79fb      	ldrb	r3, [r7, #7]
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d116      	bne.n	800a018 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2200      	movs	r2, #0
 8009fee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2220      	movs	r2, #32
 8009ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a004:	f043 0220 	orr.w	r2, r3, #32
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2200      	movs	r2, #0
 800a010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a014:	2301      	movs	r3, #1
 800a016:	e023      	b.n	800a060 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	0c1b      	lsrs	r3, r3, #16
 800a01c:	b2db      	uxtb	r3, r3
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d10d      	bne.n	800a03e <I2C_WaitOnFlagUntilTimeout+0xca>
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	695b      	ldr	r3, [r3, #20]
 800a028:	43da      	mvns	r2, r3
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	4013      	ands	r3, r2
 800a02e:	b29b      	uxth	r3, r3
 800a030:	2b00      	cmp	r3, #0
 800a032:	bf0c      	ite	eq
 800a034:	2301      	moveq	r3, #1
 800a036:	2300      	movne	r3, #0
 800a038:	b2db      	uxtb	r3, r3
 800a03a:	461a      	mov	r2, r3
 800a03c:	e00c      	b.n	800a058 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	699b      	ldr	r3, [r3, #24]
 800a044:	43da      	mvns	r2, r3
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	4013      	ands	r3, r2
 800a04a:	b29b      	uxth	r3, r3
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	bf0c      	ite	eq
 800a050:	2301      	moveq	r3, #1
 800a052:	2300      	movne	r3, #0
 800a054:	b2db      	uxtb	r3, r3
 800a056:	461a      	mov	r2, r3
 800a058:	79fb      	ldrb	r3, [r7, #7]
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d093      	beq.n	8009f86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a05e:	2300      	movs	r3, #0
}
 800a060:	4618      	mov	r0, r3
 800a062:	3710      	adds	r7, #16
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b084      	sub	sp, #16
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	60f8      	str	r0, [r7, #12]
 800a070:	60b9      	str	r1, [r7, #8]
 800a072:	607a      	str	r2, [r7, #4]
 800a074:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a076:	e071      	b.n	800a15c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	695b      	ldr	r3, [r3, #20]
 800a07e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a082:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a086:	d123      	bne.n	800a0d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	681a      	ldr	r2, [r3, #0]
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a096:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a0a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2220      	movs	r2, #32
 800a0ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0bc:	f043 0204 	orr.w	r2, r3, #4
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	e067      	b.n	800a1a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0d6:	d041      	beq.n	800a15c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0d8:	f7fe fb1a 	bl	8008710 <HAL_GetTick>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	1ad3      	subs	r3, r2, r3
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	d302      	bcc.n	800a0ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d136      	bne.n	800a15c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	0c1b      	lsrs	r3, r3, #16
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d10c      	bne.n	800a112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	695b      	ldr	r3, [r3, #20]
 800a0fe:	43da      	mvns	r2, r3
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	4013      	ands	r3, r2
 800a104:	b29b      	uxth	r3, r3
 800a106:	2b00      	cmp	r3, #0
 800a108:	bf14      	ite	ne
 800a10a:	2301      	movne	r3, #1
 800a10c:	2300      	moveq	r3, #0
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	e00b      	b.n	800a12a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	699b      	ldr	r3, [r3, #24]
 800a118:	43da      	mvns	r2, r3
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	4013      	ands	r3, r2
 800a11e:	b29b      	uxth	r3, r3
 800a120:	2b00      	cmp	r3, #0
 800a122:	bf14      	ite	ne
 800a124:	2301      	movne	r3, #1
 800a126:	2300      	moveq	r3, #0
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d016      	beq.n	800a15c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2200      	movs	r2, #0
 800a132:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	2220      	movs	r2, #32
 800a138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2200      	movs	r2, #0
 800a140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a148:	f043 0220 	orr.w	r2, r3, #32
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2200      	movs	r2, #0
 800a154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a158:	2301      	movs	r3, #1
 800a15a:	e021      	b.n	800a1a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	0c1b      	lsrs	r3, r3, #16
 800a160:	b2db      	uxtb	r3, r3
 800a162:	2b01      	cmp	r3, #1
 800a164:	d10c      	bne.n	800a180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	695b      	ldr	r3, [r3, #20]
 800a16c:	43da      	mvns	r2, r3
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	4013      	ands	r3, r2
 800a172:	b29b      	uxth	r3, r3
 800a174:	2b00      	cmp	r3, #0
 800a176:	bf14      	ite	ne
 800a178:	2301      	movne	r3, #1
 800a17a:	2300      	moveq	r3, #0
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	e00b      	b.n	800a198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	699b      	ldr	r3, [r3, #24]
 800a186:	43da      	mvns	r2, r3
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	4013      	ands	r3, r2
 800a18c:	b29b      	uxth	r3, r3
 800a18e:	2b00      	cmp	r3, #0
 800a190:	bf14      	ite	ne
 800a192:	2301      	movne	r3, #1
 800a194:	2300      	moveq	r3, #0
 800a196:	b2db      	uxtb	r3, r3
 800a198:	2b00      	cmp	r3, #0
 800a19a:	f47f af6d 	bne.w	800a078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a19e:	2300      	movs	r3, #0
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3710      	adds	r7, #16
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	60b9      	str	r1, [r7, #8]
 800a1b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a1b4:	e034      	b.n	800a220 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f000 f8e3 	bl	800a382 <I2C_IsAcknowledgeFailed>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d001      	beq.n	800a1c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	e034      	b.n	800a230 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1cc:	d028      	beq.n	800a220 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1ce:	f7fe fa9f 	bl	8008710 <HAL_GetTick>
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	1ad3      	subs	r3, r2, r3
 800a1d8:	68ba      	ldr	r2, [r7, #8]
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d302      	bcc.n	800a1e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d11d      	bne.n	800a220 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	695b      	ldr	r3, [r3, #20]
 800a1ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1ee:	2b80      	cmp	r3, #128	@ 0x80
 800a1f0:	d016      	beq.n	800a220 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2220      	movs	r2, #32
 800a1fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2200      	movs	r2, #0
 800a204:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a20c:	f043 0220 	orr.w	r2, r3, #32
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2200      	movs	r2, #0
 800a218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a21c:	2301      	movs	r3, #1
 800a21e:	e007      	b.n	800a230 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	695b      	ldr	r3, [r3, #20]
 800a226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a22a:	2b80      	cmp	r3, #128	@ 0x80
 800a22c:	d1c3      	bne.n	800a1b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a22e:	2300      	movs	r3, #0
}
 800a230:	4618      	mov	r0, r3
 800a232:	3710      	adds	r7, #16
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a244:	e034      	b.n	800a2b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a246:	68f8      	ldr	r0, [r7, #12]
 800a248:	f000 f89b 	bl	800a382 <I2C_IsAcknowledgeFailed>
 800a24c:	4603      	mov	r3, r0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d001      	beq.n	800a256 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a252:	2301      	movs	r3, #1
 800a254:	e034      	b.n	800a2c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a25c:	d028      	beq.n	800a2b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a25e:	f7fe fa57 	bl	8008710 <HAL_GetTick>
 800a262:	4602      	mov	r2, r0
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	1ad3      	subs	r3, r2, r3
 800a268:	68ba      	ldr	r2, [r7, #8]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d302      	bcc.n	800a274 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d11d      	bne.n	800a2b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	695b      	ldr	r3, [r3, #20]
 800a27a:	f003 0304 	and.w	r3, r3, #4
 800a27e:	2b04      	cmp	r3, #4
 800a280:	d016      	beq.n	800a2b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2200      	movs	r2, #0
 800a286:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2220      	movs	r2, #32
 800a28c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2200      	movs	r2, #0
 800a294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a29c:	f043 0220 	orr.w	r2, r3, #32
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e007      	b.n	800a2c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	695b      	ldr	r3, [r3, #20]
 800a2b6:	f003 0304 	and.w	r3, r3, #4
 800a2ba:	2b04      	cmp	r3, #4
 800a2bc:	d1c3      	bne.n	800a246 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a2be:	2300      	movs	r3, #0
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3710      	adds	r7, #16
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a2d4:	e049      	b.n	800a36a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	695b      	ldr	r3, [r3, #20]
 800a2dc:	f003 0310 	and.w	r3, r3, #16
 800a2e0:	2b10      	cmp	r3, #16
 800a2e2:	d119      	bne.n	800a318 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f06f 0210 	mvn.w	r2, #16
 800a2ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2220      	movs	r2, #32
 800a2f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2200      	movs	r2, #0
 800a300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2200      	movs	r2, #0
 800a310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800a314:	2301      	movs	r3, #1
 800a316:	e030      	b.n	800a37a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a318:	f7fe f9fa 	bl	8008710 <HAL_GetTick>
 800a31c:	4602      	mov	r2, r0
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	1ad3      	subs	r3, r2, r3
 800a322:	68ba      	ldr	r2, [r7, #8]
 800a324:	429a      	cmp	r2, r3
 800a326:	d302      	bcc.n	800a32e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d11d      	bne.n	800a36a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	695b      	ldr	r3, [r3, #20]
 800a334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a338:	2b40      	cmp	r3, #64	@ 0x40
 800a33a:	d016      	beq.n	800a36a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2200      	movs	r2, #0
 800a340:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2220      	movs	r2, #32
 800a346:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2200      	movs	r2, #0
 800a34e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a356:	f043 0220 	orr.w	r2, r3, #32
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2200      	movs	r2, #0
 800a362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800a366:	2301      	movs	r3, #1
 800a368:	e007      	b.n	800a37a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	695b      	ldr	r3, [r3, #20]
 800a370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a374:	2b40      	cmp	r3, #64	@ 0x40
 800a376:	d1ae      	bne.n	800a2d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a378:	2300      	movs	r3, #0
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3710      	adds	r7, #16
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a382:	b480      	push	{r7}
 800a384:	b083      	sub	sp, #12
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	695b      	ldr	r3, [r3, #20]
 800a390:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a394:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a398:	d11b      	bne.n	800a3d2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a3a2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2220      	movs	r2, #32
 800a3ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3be:	f043 0204 	orr.w	r2, r3, #4
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e000      	b.n	800a3d4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a3d2:	2300      	movs	r3, #0
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	370c      	adds	r7, #12
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr

0800a3e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b086      	sub	sp, #24
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d101      	bne.n	800a3f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e267      	b.n	800a8c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f003 0301 	and.w	r3, r3, #1
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d075      	beq.n	800a4ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800a3fe:	4b88      	ldr	r3, [pc, #544]	@ (800a620 <HAL_RCC_OscConfig+0x240>)
 800a400:	689b      	ldr	r3, [r3, #8]
 800a402:	f003 030c 	and.w	r3, r3, #12
 800a406:	2b04      	cmp	r3, #4
 800a408:	d00c      	beq.n	800a424 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a40a:	4b85      	ldr	r3, [pc, #532]	@ (800a620 <HAL_RCC_OscConfig+0x240>)
 800a40c:	689b      	ldr	r3, [r3, #8]
 800a40e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800a412:	2b08      	cmp	r3, #8
 800a414:	d112      	bne.n	800a43c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a416:	4b82      	ldr	r3, [pc, #520]	@ (800a620 <HAL_RCC_OscConfig+0x240>)
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a41e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a422:	d10b      	bne.n	800a43c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a424:	4b7e      	ldr	r3, [pc, #504]	@ (800a620 <HAL_RCC_OscConfig+0x240>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d05b      	beq.n	800a4e8 <HAL_RCC_OscConfig+0x108>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d157      	bne.n	800a4e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a438:	2301      	movs	r3, #1
 800a43a:	e242      	b.n	800a8c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a444:	d106      	bne.n	800a454 <HAL_RCC_OscConfig+0x74>
 800a446:	4b76      	ldr	r3, [pc, #472]	@ (800a620 <HAL_RCC_OscConfig+0x240>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a75      	ldr	r2, [pc, #468]	@ (800a620 <HAL_RCC_OscConfig+0x240>)
 800a44c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a450:	6013      	str	r3, [r2, #0]
 800a452:	e01d      	b.n	800a490 <HAL_RCC_OscConfig+0xb0>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a45c:	d10c      	bne.n	800a478 <HAL_RCC_OscConfig+0x98>
 800a45e:	4b70      	ldr	r3, [pc, #448]	@ (800a620 <HAL_RCC_OscConfig+0x240>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a6f      	ldr	r2, [pc, #444]	@ (800a620 <HAL_RCC_OscConfig+0x240>)
 800a464:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a468:	6013      	str	r3, [r2, #0]
 800a46a:	4b6d      	ldr	r3, [pc, #436]	@ (800a620 <HAL_RCC_OscConfig+0x240>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a6c      	ldr	r2, [pc, #432]	@ (800a620 <HAL_RCC_OscConfig+0x240>)
 800a470:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a474:	6013      	str	r3, [r2, #0]
 800a476:	e00b      	b.n	800a490 <HAL_RCC_OscConfig+0xb0>
 800a478:	4b69      	ldr	r3, [pc, #420]	@ (800a620 <HAL_RCC_OscConfig+0x240>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a68      	ldr	r2, [pc, #416]	@ (800a620 <HAL_RCC_OscConfig+0x240>)
 800a47e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a482:	6013      	str	r3, [r2, #0]
 800a484:	4b66      	ldr	r3, [pc, #408]	@ (800a620 <HAL_RCC_OscConfig+0x240>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a65      	ldr	r2, [pc, #404]	@ (800a620 <HAL_RCC_OscConfig+0x240>)
 800a48a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a48e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d013      	beq.n	800a4c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a498:	f7fe f93a 	bl	8008710 <HAL_GetTick>
 800a49c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a49e:	e008      	b.n	800a4b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a4a0:	f7fe f936 	bl	8008710 <HAL_GetTick>
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	1ad3      	subs	r3, r2, r3
 800a4aa:	2b64      	cmp	r3, #100	@ 0x64
 800a4ac:	d901      	bls.n	800a4b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a4ae:	2303      	movs	r3, #3
 800a4b0:	e207      	b.n	800a8c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a4b2:	4b5b      	ldr	r3, [pc, #364]	@ (800a620 <HAL_RCC_OscConfig+0x240>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d0f0      	beq.n	800a4a0 <HAL_RCC_OscConfig+0xc0>
 800a4be:	e014      	b.n	800a4ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4c0:	f7fe f926 	bl	8008710 <HAL_GetTick>
 800a4c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a4c6:	e008      	b.n	800a4da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a4c8:	f7fe f922 	bl	8008710 <HAL_GetTick>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	1ad3      	subs	r3, r2, r3
 800a4d2:	2b64      	cmp	r3, #100	@ 0x64
 800a4d4:	d901      	bls.n	800a4da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a4d6:	2303      	movs	r3, #3
 800a4d8:	e1f3      	b.n	800a8c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a4da:	4b51      	ldr	r3, [pc, #324]	@ (800a620 <HAL_RCC_OscConfig+0x240>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d1f0      	bne.n	800a4c8 <HAL_RCC_OscConfig+0xe8>
 800a4e6:	e000      	b.n	800a4ea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a4e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f003 0302 	and.w	r3, r3, #2
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d063      	beq.n	800a5be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800a4f6:	4b4a      	ldr	r3, [pc, #296]	@ (800a620 <HAL_RCC_OscConfig+0x240>)
 800a4f8:	689b      	ldr	r3, [r3, #8]
 800a4fa:	f003 030c 	and.w	r3, r3, #12
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d00b      	beq.n	800a51a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a502:	4b47      	ldr	r3, [pc, #284]	@ (800a620 <HAL_RCC_OscConfig+0x240>)
 800a504:	689b      	ldr	r3, [r3, #8]
 800a506:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800a50a:	2b08      	cmp	r3, #8
 800a50c:	d11c      	bne.n	800a548 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a50e:	4b44      	ldr	r3, [pc, #272]	@ (800a620 <HAL_RCC_OscConfig+0x240>)
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a516:	2b00      	cmp	r3, #0
 800a518:	d116      	bne.n	800a548 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a51a:	4b41      	ldr	r3, [pc, #260]	@ (800a620 <HAL_RCC_OscConfig+0x240>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f003 0302 	and.w	r3, r3, #2
 800a522:	2b00      	cmp	r3, #0
 800a524:	d005      	beq.n	800a532 <HAL_RCC_OscConfig+0x152>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	68db      	ldr	r3, [r3, #12]
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	d001      	beq.n	800a532 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a52e:	2301      	movs	r3, #1
 800a530:	e1c7      	b.n	800a8c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a532:	4b3b      	ldr	r3, [pc, #236]	@ (800a620 <HAL_RCC_OscConfig+0x240>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	691b      	ldr	r3, [r3, #16]
 800a53e:	00db      	lsls	r3, r3, #3
 800a540:	4937      	ldr	r1, [pc, #220]	@ (800a620 <HAL_RCC_OscConfig+0x240>)
 800a542:	4313      	orrs	r3, r2
 800a544:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a546:	e03a      	b.n	800a5be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	68db      	ldr	r3, [r3, #12]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d020      	beq.n	800a592 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a550:	4b34      	ldr	r3, [pc, #208]	@ (800a624 <HAL_RCC_OscConfig+0x244>)
 800a552:	2201      	movs	r2, #1
 800a554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a556:	f7fe f8db 	bl	8008710 <HAL_GetTick>
 800a55a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a55c:	e008      	b.n	800a570 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a55e:	f7fe f8d7 	bl	8008710 <HAL_GetTick>
 800a562:	4602      	mov	r2, r0
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	1ad3      	subs	r3, r2, r3
 800a568:	2b02      	cmp	r3, #2
 800a56a:	d901      	bls.n	800a570 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a56c:	2303      	movs	r3, #3
 800a56e:	e1a8      	b.n	800a8c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a570:	4b2b      	ldr	r3, [pc, #172]	@ (800a620 <HAL_RCC_OscConfig+0x240>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f003 0302 	and.w	r3, r3, #2
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d0f0      	beq.n	800a55e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a57c:	4b28      	ldr	r3, [pc, #160]	@ (800a620 <HAL_RCC_OscConfig+0x240>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	691b      	ldr	r3, [r3, #16]
 800a588:	00db      	lsls	r3, r3, #3
 800a58a:	4925      	ldr	r1, [pc, #148]	@ (800a620 <HAL_RCC_OscConfig+0x240>)
 800a58c:	4313      	orrs	r3, r2
 800a58e:	600b      	str	r3, [r1, #0]
 800a590:	e015      	b.n	800a5be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a592:	4b24      	ldr	r3, [pc, #144]	@ (800a624 <HAL_RCC_OscConfig+0x244>)
 800a594:	2200      	movs	r2, #0
 800a596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a598:	f7fe f8ba 	bl	8008710 <HAL_GetTick>
 800a59c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a59e:	e008      	b.n	800a5b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a5a0:	f7fe f8b6 	bl	8008710 <HAL_GetTick>
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	1ad3      	subs	r3, r2, r3
 800a5aa:	2b02      	cmp	r3, #2
 800a5ac:	d901      	bls.n	800a5b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a5ae:	2303      	movs	r3, #3
 800a5b0:	e187      	b.n	800a8c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a5b2:	4b1b      	ldr	r3, [pc, #108]	@ (800a620 <HAL_RCC_OscConfig+0x240>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f003 0302 	and.w	r3, r3, #2
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d1f0      	bne.n	800a5a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f003 0308 	and.w	r3, r3, #8
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d036      	beq.n	800a638 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	695b      	ldr	r3, [r3, #20]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d016      	beq.n	800a600 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a5d2:	4b15      	ldr	r3, [pc, #84]	@ (800a628 <HAL_RCC_OscConfig+0x248>)
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5d8:	f7fe f89a 	bl	8008710 <HAL_GetTick>
 800a5dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a5de:	e008      	b.n	800a5f2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a5e0:	f7fe f896 	bl	8008710 <HAL_GetTick>
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	1ad3      	subs	r3, r2, r3
 800a5ea:	2b02      	cmp	r3, #2
 800a5ec:	d901      	bls.n	800a5f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a5ee:	2303      	movs	r3, #3
 800a5f0:	e167      	b.n	800a8c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a5f2:	4b0b      	ldr	r3, [pc, #44]	@ (800a620 <HAL_RCC_OscConfig+0x240>)
 800a5f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5f6:	f003 0302 	and.w	r3, r3, #2
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d0f0      	beq.n	800a5e0 <HAL_RCC_OscConfig+0x200>
 800a5fe:	e01b      	b.n	800a638 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a600:	4b09      	ldr	r3, [pc, #36]	@ (800a628 <HAL_RCC_OscConfig+0x248>)
 800a602:	2200      	movs	r2, #0
 800a604:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a606:	f7fe f883 	bl	8008710 <HAL_GetTick>
 800a60a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a60c:	e00e      	b.n	800a62c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a60e:	f7fe f87f 	bl	8008710 <HAL_GetTick>
 800a612:	4602      	mov	r2, r0
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	1ad3      	subs	r3, r2, r3
 800a618:	2b02      	cmp	r3, #2
 800a61a:	d907      	bls.n	800a62c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a61c:	2303      	movs	r3, #3
 800a61e:	e150      	b.n	800a8c2 <HAL_RCC_OscConfig+0x4e2>
 800a620:	40023800 	.word	0x40023800
 800a624:	42470000 	.word	0x42470000
 800a628:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a62c:	4b88      	ldr	r3, [pc, #544]	@ (800a850 <HAL_RCC_OscConfig+0x470>)
 800a62e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a630:	f003 0302 	and.w	r3, r3, #2
 800a634:	2b00      	cmp	r3, #0
 800a636:	d1ea      	bne.n	800a60e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f003 0304 	and.w	r3, r3, #4
 800a640:	2b00      	cmp	r3, #0
 800a642:	f000 8097 	beq.w	800a774 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a646:	2300      	movs	r3, #0
 800a648:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a64a:	4b81      	ldr	r3, [pc, #516]	@ (800a850 <HAL_RCC_OscConfig+0x470>)
 800a64c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a64e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a652:	2b00      	cmp	r3, #0
 800a654:	d10f      	bne.n	800a676 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a656:	2300      	movs	r3, #0
 800a658:	60bb      	str	r3, [r7, #8]
 800a65a:	4b7d      	ldr	r3, [pc, #500]	@ (800a850 <HAL_RCC_OscConfig+0x470>)
 800a65c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a65e:	4a7c      	ldr	r2, [pc, #496]	@ (800a850 <HAL_RCC_OscConfig+0x470>)
 800a660:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a664:	6413      	str	r3, [r2, #64]	@ 0x40
 800a666:	4b7a      	ldr	r3, [pc, #488]	@ (800a850 <HAL_RCC_OscConfig+0x470>)
 800a668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a66a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a66e:	60bb      	str	r3, [r7, #8]
 800a670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a672:	2301      	movs	r3, #1
 800a674:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a676:	4b77      	ldr	r3, [pc, #476]	@ (800a854 <HAL_RCC_OscConfig+0x474>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d118      	bne.n	800a6b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a682:	4b74      	ldr	r3, [pc, #464]	@ (800a854 <HAL_RCC_OscConfig+0x474>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4a73      	ldr	r2, [pc, #460]	@ (800a854 <HAL_RCC_OscConfig+0x474>)
 800a688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a68c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a68e:	f7fe f83f 	bl	8008710 <HAL_GetTick>
 800a692:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a694:	e008      	b.n	800a6a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a696:	f7fe f83b 	bl	8008710 <HAL_GetTick>
 800a69a:	4602      	mov	r2, r0
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	1ad3      	subs	r3, r2, r3
 800a6a0:	2b02      	cmp	r3, #2
 800a6a2:	d901      	bls.n	800a6a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a6a4:	2303      	movs	r3, #3
 800a6a6:	e10c      	b.n	800a8c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a6a8:	4b6a      	ldr	r3, [pc, #424]	@ (800a854 <HAL_RCC_OscConfig+0x474>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d0f0      	beq.n	800a696 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	689b      	ldr	r3, [r3, #8]
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d106      	bne.n	800a6ca <HAL_RCC_OscConfig+0x2ea>
 800a6bc:	4b64      	ldr	r3, [pc, #400]	@ (800a850 <HAL_RCC_OscConfig+0x470>)
 800a6be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6c0:	4a63      	ldr	r2, [pc, #396]	@ (800a850 <HAL_RCC_OscConfig+0x470>)
 800a6c2:	f043 0301 	orr.w	r3, r3, #1
 800a6c6:	6713      	str	r3, [r2, #112]	@ 0x70
 800a6c8:	e01c      	b.n	800a704 <HAL_RCC_OscConfig+0x324>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	689b      	ldr	r3, [r3, #8]
 800a6ce:	2b05      	cmp	r3, #5
 800a6d0:	d10c      	bne.n	800a6ec <HAL_RCC_OscConfig+0x30c>
 800a6d2:	4b5f      	ldr	r3, [pc, #380]	@ (800a850 <HAL_RCC_OscConfig+0x470>)
 800a6d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6d6:	4a5e      	ldr	r2, [pc, #376]	@ (800a850 <HAL_RCC_OscConfig+0x470>)
 800a6d8:	f043 0304 	orr.w	r3, r3, #4
 800a6dc:	6713      	str	r3, [r2, #112]	@ 0x70
 800a6de:	4b5c      	ldr	r3, [pc, #368]	@ (800a850 <HAL_RCC_OscConfig+0x470>)
 800a6e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6e2:	4a5b      	ldr	r2, [pc, #364]	@ (800a850 <HAL_RCC_OscConfig+0x470>)
 800a6e4:	f043 0301 	orr.w	r3, r3, #1
 800a6e8:	6713      	str	r3, [r2, #112]	@ 0x70
 800a6ea:	e00b      	b.n	800a704 <HAL_RCC_OscConfig+0x324>
 800a6ec:	4b58      	ldr	r3, [pc, #352]	@ (800a850 <HAL_RCC_OscConfig+0x470>)
 800a6ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6f0:	4a57      	ldr	r2, [pc, #348]	@ (800a850 <HAL_RCC_OscConfig+0x470>)
 800a6f2:	f023 0301 	bic.w	r3, r3, #1
 800a6f6:	6713      	str	r3, [r2, #112]	@ 0x70
 800a6f8:	4b55      	ldr	r3, [pc, #340]	@ (800a850 <HAL_RCC_OscConfig+0x470>)
 800a6fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6fc:	4a54      	ldr	r2, [pc, #336]	@ (800a850 <HAL_RCC_OscConfig+0x470>)
 800a6fe:	f023 0304 	bic.w	r3, r3, #4
 800a702:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	689b      	ldr	r3, [r3, #8]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d015      	beq.n	800a738 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a70c:	f7fe f800 	bl	8008710 <HAL_GetTick>
 800a710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a712:	e00a      	b.n	800a72a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a714:	f7fd fffc 	bl	8008710 <HAL_GetTick>
 800a718:	4602      	mov	r2, r0
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	1ad3      	subs	r3, r2, r3
 800a71e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a722:	4293      	cmp	r3, r2
 800a724:	d901      	bls.n	800a72a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a726:	2303      	movs	r3, #3
 800a728:	e0cb      	b.n	800a8c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a72a:	4b49      	ldr	r3, [pc, #292]	@ (800a850 <HAL_RCC_OscConfig+0x470>)
 800a72c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a72e:	f003 0302 	and.w	r3, r3, #2
 800a732:	2b00      	cmp	r3, #0
 800a734:	d0ee      	beq.n	800a714 <HAL_RCC_OscConfig+0x334>
 800a736:	e014      	b.n	800a762 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a738:	f7fd ffea 	bl	8008710 <HAL_GetTick>
 800a73c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a73e:	e00a      	b.n	800a756 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a740:	f7fd ffe6 	bl	8008710 <HAL_GetTick>
 800a744:	4602      	mov	r2, r0
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	1ad3      	subs	r3, r2, r3
 800a74a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a74e:	4293      	cmp	r3, r2
 800a750:	d901      	bls.n	800a756 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a752:	2303      	movs	r3, #3
 800a754:	e0b5      	b.n	800a8c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a756:	4b3e      	ldr	r3, [pc, #248]	@ (800a850 <HAL_RCC_OscConfig+0x470>)
 800a758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a75a:	f003 0302 	and.w	r3, r3, #2
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d1ee      	bne.n	800a740 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a762:	7dfb      	ldrb	r3, [r7, #23]
 800a764:	2b01      	cmp	r3, #1
 800a766:	d105      	bne.n	800a774 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a768:	4b39      	ldr	r3, [pc, #228]	@ (800a850 <HAL_RCC_OscConfig+0x470>)
 800a76a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a76c:	4a38      	ldr	r2, [pc, #224]	@ (800a850 <HAL_RCC_OscConfig+0x470>)
 800a76e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a772:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	699b      	ldr	r3, [r3, #24]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	f000 80a1 	beq.w	800a8c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a77e:	4b34      	ldr	r3, [pc, #208]	@ (800a850 <HAL_RCC_OscConfig+0x470>)
 800a780:	689b      	ldr	r3, [r3, #8]
 800a782:	f003 030c 	and.w	r3, r3, #12
 800a786:	2b08      	cmp	r3, #8
 800a788:	d05c      	beq.n	800a844 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	699b      	ldr	r3, [r3, #24]
 800a78e:	2b02      	cmp	r3, #2
 800a790:	d141      	bne.n	800a816 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a792:	4b31      	ldr	r3, [pc, #196]	@ (800a858 <HAL_RCC_OscConfig+0x478>)
 800a794:	2200      	movs	r2, #0
 800a796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a798:	f7fd ffba 	bl	8008710 <HAL_GetTick>
 800a79c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a79e:	e008      	b.n	800a7b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7a0:	f7fd ffb6 	bl	8008710 <HAL_GetTick>
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	1ad3      	subs	r3, r2, r3
 800a7aa:	2b02      	cmp	r3, #2
 800a7ac:	d901      	bls.n	800a7b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a7ae:	2303      	movs	r3, #3
 800a7b0:	e087      	b.n	800a8c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a7b2:	4b27      	ldr	r3, [pc, #156]	@ (800a850 <HAL_RCC_OscConfig+0x470>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d1f0      	bne.n	800a7a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	69da      	ldr	r2, [r3, #28]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6a1b      	ldr	r3, [r3, #32]
 800a7c6:	431a      	orrs	r2, r3
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7cc:	019b      	lsls	r3, r3, #6
 800a7ce:	431a      	orrs	r2, r3
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7d4:	085b      	lsrs	r3, r3, #1
 800a7d6:	3b01      	subs	r3, #1
 800a7d8:	041b      	lsls	r3, r3, #16
 800a7da:	431a      	orrs	r2, r3
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7e0:	061b      	lsls	r3, r3, #24
 800a7e2:	491b      	ldr	r1, [pc, #108]	@ (800a850 <HAL_RCC_OscConfig+0x470>)
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a7e8:	4b1b      	ldr	r3, [pc, #108]	@ (800a858 <HAL_RCC_OscConfig+0x478>)
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a7ee:	f7fd ff8f 	bl	8008710 <HAL_GetTick>
 800a7f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a7f4:	e008      	b.n	800a808 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7f6:	f7fd ff8b 	bl	8008710 <HAL_GetTick>
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	1ad3      	subs	r3, r2, r3
 800a800:	2b02      	cmp	r3, #2
 800a802:	d901      	bls.n	800a808 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a804:	2303      	movs	r3, #3
 800a806:	e05c      	b.n	800a8c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a808:	4b11      	ldr	r3, [pc, #68]	@ (800a850 <HAL_RCC_OscConfig+0x470>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a810:	2b00      	cmp	r3, #0
 800a812:	d0f0      	beq.n	800a7f6 <HAL_RCC_OscConfig+0x416>
 800a814:	e054      	b.n	800a8c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a816:	4b10      	ldr	r3, [pc, #64]	@ (800a858 <HAL_RCC_OscConfig+0x478>)
 800a818:	2200      	movs	r2, #0
 800a81a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a81c:	f7fd ff78 	bl	8008710 <HAL_GetTick>
 800a820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a822:	e008      	b.n	800a836 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a824:	f7fd ff74 	bl	8008710 <HAL_GetTick>
 800a828:	4602      	mov	r2, r0
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	1ad3      	subs	r3, r2, r3
 800a82e:	2b02      	cmp	r3, #2
 800a830:	d901      	bls.n	800a836 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a832:	2303      	movs	r3, #3
 800a834:	e045      	b.n	800a8c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a836:	4b06      	ldr	r3, [pc, #24]	@ (800a850 <HAL_RCC_OscConfig+0x470>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d1f0      	bne.n	800a824 <HAL_RCC_OscConfig+0x444>
 800a842:	e03d      	b.n	800a8c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	699b      	ldr	r3, [r3, #24]
 800a848:	2b01      	cmp	r3, #1
 800a84a:	d107      	bne.n	800a85c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a84c:	2301      	movs	r3, #1
 800a84e:	e038      	b.n	800a8c2 <HAL_RCC_OscConfig+0x4e2>
 800a850:	40023800 	.word	0x40023800
 800a854:	40007000 	.word	0x40007000
 800a858:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a85c:	4b1b      	ldr	r3, [pc, #108]	@ (800a8cc <HAL_RCC_OscConfig+0x4ec>)
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	699b      	ldr	r3, [r3, #24]
 800a866:	2b01      	cmp	r3, #1
 800a868:	d028      	beq.n	800a8bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a874:	429a      	cmp	r2, r3
 800a876:	d121      	bne.n	800a8bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a882:	429a      	cmp	r2, r3
 800a884:	d11a      	bne.n	800a8bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a886:	68fa      	ldr	r2, [r7, #12]
 800a888:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a88c:	4013      	ands	r3, r2
 800a88e:	687a      	ldr	r2, [r7, #4]
 800a890:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a892:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a894:	4293      	cmp	r3, r2
 800a896:	d111      	bne.n	800a8bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8a2:	085b      	lsrs	r3, r3, #1
 800a8a4:	3b01      	subs	r3, #1
 800a8a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d107      	bne.n	800a8bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d001      	beq.n	800a8c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	e000      	b.n	800a8c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a8c0:	2300      	movs	r3, #0
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3718      	adds	r7, #24
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	bf00      	nop
 800a8cc:	40023800 	.word	0x40023800

0800a8d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b084      	sub	sp, #16
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d101      	bne.n	800a8e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	e0cc      	b.n	800aa7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a8e4:	4b68      	ldr	r3, [pc, #416]	@ (800aa88 <HAL_RCC_ClockConfig+0x1b8>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f003 0307 	and.w	r3, r3, #7
 800a8ec:	683a      	ldr	r2, [r7, #0]
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d90c      	bls.n	800a90c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a8f2:	4b65      	ldr	r3, [pc, #404]	@ (800aa88 <HAL_RCC_ClockConfig+0x1b8>)
 800a8f4:	683a      	ldr	r2, [r7, #0]
 800a8f6:	b2d2      	uxtb	r2, r2
 800a8f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a8fa:	4b63      	ldr	r3, [pc, #396]	@ (800aa88 <HAL_RCC_ClockConfig+0x1b8>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f003 0307 	and.w	r3, r3, #7
 800a902:	683a      	ldr	r2, [r7, #0]
 800a904:	429a      	cmp	r2, r3
 800a906:	d001      	beq.n	800a90c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a908:	2301      	movs	r3, #1
 800a90a:	e0b8      	b.n	800aa7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f003 0302 	and.w	r3, r3, #2
 800a914:	2b00      	cmp	r3, #0
 800a916:	d020      	beq.n	800a95a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f003 0304 	and.w	r3, r3, #4
 800a920:	2b00      	cmp	r3, #0
 800a922:	d005      	beq.n	800a930 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a924:	4b59      	ldr	r3, [pc, #356]	@ (800aa8c <HAL_RCC_ClockConfig+0x1bc>)
 800a926:	689b      	ldr	r3, [r3, #8]
 800a928:	4a58      	ldr	r2, [pc, #352]	@ (800aa8c <HAL_RCC_ClockConfig+0x1bc>)
 800a92a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a92e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f003 0308 	and.w	r3, r3, #8
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d005      	beq.n	800a948 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a93c:	4b53      	ldr	r3, [pc, #332]	@ (800aa8c <HAL_RCC_ClockConfig+0x1bc>)
 800a93e:	689b      	ldr	r3, [r3, #8]
 800a940:	4a52      	ldr	r2, [pc, #328]	@ (800aa8c <HAL_RCC_ClockConfig+0x1bc>)
 800a942:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a946:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a948:	4b50      	ldr	r3, [pc, #320]	@ (800aa8c <HAL_RCC_ClockConfig+0x1bc>)
 800a94a:	689b      	ldr	r3, [r3, #8]
 800a94c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	494d      	ldr	r1, [pc, #308]	@ (800aa8c <HAL_RCC_ClockConfig+0x1bc>)
 800a956:	4313      	orrs	r3, r2
 800a958:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f003 0301 	and.w	r3, r3, #1
 800a962:	2b00      	cmp	r3, #0
 800a964:	d044      	beq.n	800a9f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	2b01      	cmp	r3, #1
 800a96c:	d107      	bne.n	800a97e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a96e:	4b47      	ldr	r3, [pc, #284]	@ (800aa8c <HAL_RCC_ClockConfig+0x1bc>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a976:	2b00      	cmp	r3, #0
 800a978:	d119      	bne.n	800a9ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a97a:	2301      	movs	r3, #1
 800a97c:	e07f      	b.n	800aa7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	2b02      	cmp	r3, #2
 800a984:	d003      	beq.n	800a98e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a98a:	2b03      	cmp	r3, #3
 800a98c:	d107      	bne.n	800a99e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a98e:	4b3f      	ldr	r3, [pc, #252]	@ (800aa8c <HAL_RCC_ClockConfig+0x1bc>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a996:	2b00      	cmp	r3, #0
 800a998:	d109      	bne.n	800a9ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a99a:	2301      	movs	r3, #1
 800a99c:	e06f      	b.n	800aa7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a99e:	4b3b      	ldr	r3, [pc, #236]	@ (800aa8c <HAL_RCC_ClockConfig+0x1bc>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f003 0302 	and.w	r3, r3, #2
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d101      	bne.n	800a9ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	e067      	b.n	800aa7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a9ae:	4b37      	ldr	r3, [pc, #220]	@ (800aa8c <HAL_RCC_ClockConfig+0x1bc>)
 800a9b0:	689b      	ldr	r3, [r3, #8]
 800a9b2:	f023 0203 	bic.w	r2, r3, #3
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	4934      	ldr	r1, [pc, #208]	@ (800aa8c <HAL_RCC_ClockConfig+0x1bc>)
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a9c0:	f7fd fea6 	bl	8008710 <HAL_GetTick>
 800a9c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a9c6:	e00a      	b.n	800a9de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a9c8:	f7fd fea2 	bl	8008710 <HAL_GetTick>
 800a9cc:	4602      	mov	r2, r0
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	1ad3      	subs	r3, r2, r3
 800a9d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d901      	bls.n	800a9de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a9da:	2303      	movs	r3, #3
 800a9dc:	e04f      	b.n	800aa7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a9de:	4b2b      	ldr	r3, [pc, #172]	@ (800aa8c <HAL_RCC_ClockConfig+0x1bc>)
 800a9e0:	689b      	ldr	r3, [r3, #8]
 800a9e2:	f003 020c 	and.w	r2, r3, #12
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	685b      	ldr	r3, [r3, #4]
 800a9ea:	009b      	lsls	r3, r3, #2
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d1eb      	bne.n	800a9c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a9f0:	4b25      	ldr	r3, [pc, #148]	@ (800aa88 <HAL_RCC_ClockConfig+0x1b8>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f003 0307 	and.w	r3, r3, #7
 800a9f8:	683a      	ldr	r2, [r7, #0]
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d20c      	bcs.n	800aa18 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9fe:	4b22      	ldr	r3, [pc, #136]	@ (800aa88 <HAL_RCC_ClockConfig+0x1b8>)
 800aa00:	683a      	ldr	r2, [r7, #0]
 800aa02:	b2d2      	uxtb	r2, r2
 800aa04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa06:	4b20      	ldr	r3, [pc, #128]	@ (800aa88 <HAL_RCC_ClockConfig+0x1b8>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f003 0307 	and.w	r3, r3, #7
 800aa0e:	683a      	ldr	r2, [r7, #0]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d001      	beq.n	800aa18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800aa14:	2301      	movs	r3, #1
 800aa16:	e032      	b.n	800aa7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f003 0304 	and.w	r3, r3, #4
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d008      	beq.n	800aa36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aa24:	4b19      	ldr	r3, [pc, #100]	@ (800aa8c <HAL_RCC_ClockConfig+0x1bc>)
 800aa26:	689b      	ldr	r3, [r3, #8]
 800aa28:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	4916      	ldr	r1, [pc, #88]	@ (800aa8c <HAL_RCC_ClockConfig+0x1bc>)
 800aa32:	4313      	orrs	r3, r2
 800aa34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f003 0308 	and.w	r3, r3, #8
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d009      	beq.n	800aa56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800aa42:	4b12      	ldr	r3, [pc, #72]	@ (800aa8c <HAL_RCC_ClockConfig+0x1bc>)
 800aa44:	689b      	ldr	r3, [r3, #8]
 800aa46:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	691b      	ldr	r3, [r3, #16]
 800aa4e:	00db      	lsls	r3, r3, #3
 800aa50:	490e      	ldr	r1, [pc, #56]	@ (800aa8c <HAL_RCC_ClockConfig+0x1bc>)
 800aa52:	4313      	orrs	r3, r2
 800aa54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800aa56:	f000 f821 	bl	800aa9c <HAL_RCC_GetSysClockFreq>
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	4b0b      	ldr	r3, [pc, #44]	@ (800aa8c <HAL_RCC_ClockConfig+0x1bc>)
 800aa5e:	689b      	ldr	r3, [r3, #8]
 800aa60:	091b      	lsrs	r3, r3, #4
 800aa62:	f003 030f 	and.w	r3, r3, #15
 800aa66:	490a      	ldr	r1, [pc, #40]	@ (800aa90 <HAL_RCC_ClockConfig+0x1c0>)
 800aa68:	5ccb      	ldrb	r3, [r1, r3]
 800aa6a:	fa22 f303 	lsr.w	r3, r2, r3
 800aa6e:	4a09      	ldr	r2, [pc, #36]	@ (800aa94 <HAL_RCC_ClockConfig+0x1c4>)
 800aa70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800aa72:	4b09      	ldr	r3, [pc, #36]	@ (800aa98 <HAL_RCC_ClockConfig+0x1c8>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4618      	mov	r0, r3
 800aa78:	f7fd fe06 	bl	8008688 <HAL_InitTick>

  return HAL_OK;
 800aa7c:	2300      	movs	r3, #0
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3710      	adds	r7, #16
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	40023c00 	.word	0x40023c00
 800aa8c:	40023800 	.word	0x40023800
 800aa90:	0801035c 	.word	0x0801035c
 800aa94:	20000004 	.word	0x20000004
 800aa98:	20000008 	.word	0x20000008

0800aa9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aa9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aaa0:	b090      	sub	sp, #64	@ 0x40
 800aaa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800aaac:	2300      	movs	r3, #0
 800aaae:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800aab0:	2300      	movs	r3, #0
 800aab2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aab4:	4b59      	ldr	r3, [pc, #356]	@ (800ac1c <HAL_RCC_GetSysClockFreq+0x180>)
 800aab6:	689b      	ldr	r3, [r3, #8]
 800aab8:	f003 030c 	and.w	r3, r3, #12
 800aabc:	2b08      	cmp	r3, #8
 800aabe:	d00d      	beq.n	800aadc <HAL_RCC_GetSysClockFreq+0x40>
 800aac0:	2b08      	cmp	r3, #8
 800aac2:	f200 80a1 	bhi.w	800ac08 <HAL_RCC_GetSysClockFreq+0x16c>
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d002      	beq.n	800aad0 <HAL_RCC_GetSysClockFreq+0x34>
 800aaca:	2b04      	cmp	r3, #4
 800aacc:	d003      	beq.n	800aad6 <HAL_RCC_GetSysClockFreq+0x3a>
 800aace:	e09b      	b.n	800ac08 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800aad0:	4b53      	ldr	r3, [pc, #332]	@ (800ac20 <HAL_RCC_GetSysClockFreq+0x184>)
 800aad2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800aad4:	e09b      	b.n	800ac0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800aad6:	4b53      	ldr	r3, [pc, #332]	@ (800ac24 <HAL_RCC_GetSysClockFreq+0x188>)
 800aad8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800aada:	e098      	b.n	800ac0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800aadc:	4b4f      	ldr	r3, [pc, #316]	@ (800ac1c <HAL_RCC_GetSysClockFreq+0x180>)
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aae4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800aae6:	4b4d      	ldr	r3, [pc, #308]	@ (800ac1c <HAL_RCC_GetSysClockFreq+0x180>)
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d028      	beq.n	800ab44 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aaf2:	4b4a      	ldr	r3, [pc, #296]	@ (800ac1c <HAL_RCC_GetSysClockFreq+0x180>)
 800aaf4:	685b      	ldr	r3, [r3, #4]
 800aaf6:	099b      	lsrs	r3, r3, #6
 800aaf8:	2200      	movs	r2, #0
 800aafa:	623b      	str	r3, [r7, #32]
 800aafc:	627a      	str	r2, [r7, #36]	@ 0x24
 800aafe:	6a3b      	ldr	r3, [r7, #32]
 800ab00:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800ab04:	2100      	movs	r1, #0
 800ab06:	4b47      	ldr	r3, [pc, #284]	@ (800ac24 <HAL_RCC_GetSysClockFreq+0x188>)
 800ab08:	fb03 f201 	mul.w	r2, r3, r1
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	fb00 f303 	mul.w	r3, r0, r3
 800ab12:	4413      	add	r3, r2
 800ab14:	4a43      	ldr	r2, [pc, #268]	@ (800ac24 <HAL_RCC_GetSysClockFreq+0x188>)
 800ab16:	fba0 1202 	umull	r1, r2, r0, r2
 800ab1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ab1c:	460a      	mov	r2, r1
 800ab1e:	62ba      	str	r2, [r7, #40]	@ 0x28
 800ab20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab22:	4413      	add	r3, r2
 800ab24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ab26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab28:	2200      	movs	r2, #0
 800ab2a:	61bb      	str	r3, [r7, #24]
 800ab2c:	61fa      	str	r2, [r7, #28]
 800ab2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ab32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800ab36:	f7f6 f83f 	bl	8000bb8 <__aeabi_uldivmod>
 800ab3a:	4602      	mov	r2, r0
 800ab3c:	460b      	mov	r3, r1
 800ab3e:	4613      	mov	r3, r2
 800ab40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab42:	e053      	b.n	800abec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ab44:	4b35      	ldr	r3, [pc, #212]	@ (800ac1c <HAL_RCC_GetSysClockFreq+0x180>)
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	099b      	lsrs	r3, r3, #6
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	613b      	str	r3, [r7, #16]
 800ab4e:	617a      	str	r2, [r7, #20]
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800ab56:	f04f 0b00 	mov.w	fp, #0
 800ab5a:	4652      	mov	r2, sl
 800ab5c:	465b      	mov	r3, fp
 800ab5e:	f04f 0000 	mov.w	r0, #0
 800ab62:	f04f 0100 	mov.w	r1, #0
 800ab66:	0159      	lsls	r1, r3, #5
 800ab68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ab6c:	0150      	lsls	r0, r2, #5
 800ab6e:	4602      	mov	r2, r0
 800ab70:	460b      	mov	r3, r1
 800ab72:	ebb2 080a 	subs.w	r8, r2, sl
 800ab76:	eb63 090b 	sbc.w	r9, r3, fp
 800ab7a:	f04f 0200 	mov.w	r2, #0
 800ab7e:	f04f 0300 	mov.w	r3, #0
 800ab82:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800ab86:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800ab8a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800ab8e:	ebb2 0408 	subs.w	r4, r2, r8
 800ab92:	eb63 0509 	sbc.w	r5, r3, r9
 800ab96:	f04f 0200 	mov.w	r2, #0
 800ab9a:	f04f 0300 	mov.w	r3, #0
 800ab9e:	00eb      	lsls	r3, r5, #3
 800aba0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800aba4:	00e2      	lsls	r2, r4, #3
 800aba6:	4614      	mov	r4, r2
 800aba8:	461d      	mov	r5, r3
 800abaa:	eb14 030a 	adds.w	r3, r4, sl
 800abae:	603b      	str	r3, [r7, #0]
 800abb0:	eb45 030b 	adc.w	r3, r5, fp
 800abb4:	607b      	str	r3, [r7, #4]
 800abb6:	f04f 0200 	mov.w	r2, #0
 800abba:	f04f 0300 	mov.w	r3, #0
 800abbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 800abc2:	4629      	mov	r1, r5
 800abc4:	028b      	lsls	r3, r1, #10
 800abc6:	4621      	mov	r1, r4
 800abc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800abcc:	4621      	mov	r1, r4
 800abce:	028a      	lsls	r2, r1, #10
 800abd0:	4610      	mov	r0, r2
 800abd2:	4619      	mov	r1, r3
 800abd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abd6:	2200      	movs	r2, #0
 800abd8:	60bb      	str	r3, [r7, #8]
 800abda:	60fa      	str	r2, [r7, #12]
 800abdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800abe0:	f7f5 ffea 	bl	8000bb8 <__aeabi_uldivmod>
 800abe4:	4602      	mov	r2, r0
 800abe6:	460b      	mov	r3, r1
 800abe8:	4613      	mov	r3, r2
 800abea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800abec:	4b0b      	ldr	r3, [pc, #44]	@ (800ac1c <HAL_RCC_GetSysClockFreq+0x180>)
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	0c1b      	lsrs	r3, r3, #16
 800abf2:	f003 0303 	and.w	r3, r3, #3
 800abf6:	3301      	adds	r3, #1
 800abf8:	005b      	lsls	r3, r3, #1
 800abfa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800abfc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800abfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac00:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac04:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800ac06:	e002      	b.n	800ac0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ac08:	4b05      	ldr	r3, [pc, #20]	@ (800ac20 <HAL_RCC_GetSysClockFreq+0x184>)
 800ac0a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800ac0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ac0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3740      	adds	r7, #64	@ 0x40
 800ac14:	46bd      	mov	sp, r7
 800ac16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac1a:	bf00      	nop
 800ac1c:	40023800 	.word	0x40023800
 800ac20:	00f42400 	.word	0x00f42400
 800ac24:	017d7840 	.word	0x017d7840

0800ac28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ac2c:	4b03      	ldr	r3, [pc, #12]	@ (800ac3c <HAL_RCC_GetHCLKFreq+0x14>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr
 800ac3a:	bf00      	nop
 800ac3c:	20000004 	.word	0x20000004

0800ac40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ac44:	f7ff fff0 	bl	800ac28 <HAL_RCC_GetHCLKFreq>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	4b05      	ldr	r3, [pc, #20]	@ (800ac60 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ac4c:	689b      	ldr	r3, [r3, #8]
 800ac4e:	0a9b      	lsrs	r3, r3, #10
 800ac50:	f003 0307 	and.w	r3, r3, #7
 800ac54:	4903      	ldr	r1, [pc, #12]	@ (800ac64 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ac56:	5ccb      	ldrb	r3, [r1, r3]
 800ac58:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	bd80      	pop	{r7, pc}
 800ac60:	40023800 	.word	0x40023800
 800ac64:	0801036c 	.word	0x0801036c

0800ac68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ac6c:	f7ff ffdc 	bl	800ac28 <HAL_RCC_GetHCLKFreq>
 800ac70:	4602      	mov	r2, r0
 800ac72:	4b05      	ldr	r3, [pc, #20]	@ (800ac88 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ac74:	689b      	ldr	r3, [r3, #8]
 800ac76:	0b5b      	lsrs	r3, r3, #13
 800ac78:	f003 0307 	and.w	r3, r3, #7
 800ac7c:	4903      	ldr	r1, [pc, #12]	@ (800ac8c <HAL_RCC_GetPCLK2Freq+0x24>)
 800ac7e:	5ccb      	ldrb	r3, [r1, r3]
 800ac80:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	bd80      	pop	{r7, pc}
 800ac88:	40023800 	.word	0x40023800
 800ac8c:	0801036c 	.word	0x0801036c

0800ac90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b082      	sub	sp, #8
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d101      	bne.n	800aca2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	e07b      	b.n	800ad9a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d108      	bne.n	800acbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800acb2:	d009      	beq.n	800acc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2200      	movs	r2, #0
 800acb8:	61da      	str	r2, [r3, #28]
 800acba:	e005      	b.n	800acc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2200      	movs	r2, #0
 800acc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2200      	movs	r2, #0
 800acc6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2200      	movs	r2, #0
 800accc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800acd4:	b2db      	uxtb	r3, r3
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d106      	bne.n	800ace8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2200      	movs	r2, #0
 800acde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f7fd fa2c 	bl	8008140 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2202      	movs	r2, #2
 800acec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	681a      	ldr	r2, [r3, #0]
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800acfe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	689b      	ldr	r3, [r3, #8]
 800ad0c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800ad10:	431a      	orrs	r2, r3
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	68db      	ldr	r3, [r3, #12]
 800ad16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ad1a:	431a      	orrs	r2, r3
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	691b      	ldr	r3, [r3, #16]
 800ad20:	f003 0302 	and.w	r3, r3, #2
 800ad24:	431a      	orrs	r2, r3
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	695b      	ldr	r3, [r3, #20]
 800ad2a:	f003 0301 	and.w	r3, r3, #1
 800ad2e:	431a      	orrs	r2, r3
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	699b      	ldr	r3, [r3, #24]
 800ad34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ad38:	431a      	orrs	r2, r3
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	69db      	ldr	r3, [r3, #28]
 800ad3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ad42:	431a      	orrs	r2, r3
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6a1b      	ldr	r3, [r3, #32]
 800ad48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad4c:	ea42 0103 	orr.w	r1, r2, r3
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad54:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	430a      	orrs	r2, r1
 800ad5e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	699b      	ldr	r3, [r3, #24]
 800ad64:	0c1b      	lsrs	r3, r3, #16
 800ad66:	f003 0104 	and.w	r1, r3, #4
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad6e:	f003 0210 	and.w	r2, r3, #16
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	430a      	orrs	r2, r1
 800ad78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	69da      	ldr	r2, [r3, #28]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ad88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2201      	movs	r2, #1
 800ad94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800ad98:	2300      	movs	r3, #0
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3708      	adds	r7, #8
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ada2:	b580      	push	{r7, lr}
 800ada4:	b088      	sub	sp, #32
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	60f8      	str	r0, [r7, #12]
 800adaa:	60b9      	str	r1, [r7, #8]
 800adac:	603b      	str	r3, [r7, #0]
 800adae:	4613      	mov	r3, r2
 800adb0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800adb2:	f7fd fcad 	bl	8008710 <HAL_GetTick>
 800adb6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800adb8:	88fb      	ldrh	r3, [r7, #6]
 800adba:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	2b01      	cmp	r3, #1
 800adc6:	d001      	beq.n	800adcc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800adc8:	2302      	movs	r3, #2
 800adca:	e12a      	b.n	800b022 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d002      	beq.n	800add8 <HAL_SPI_Transmit+0x36>
 800add2:	88fb      	ldrh	r3, [r7, #6]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d101      	bne.n	800addc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800add8:	2301      	movs	r3, #1
 800adda:	e122      	b.n	800b022 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d101      	bne.n	800adea <HAL_SPI_Transmit+0x48>
 800ade6:	2302      	movs	r3, #2
 800ade8:	e11b      	b.n	800b022 <HAL_SPI_Transmit+0x280>
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	2201      	movs	r2, #1
 800adee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2203      	movs	r2, #3
 800adf6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	2200      	movs	r2, #0
 800adfe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	68ba      	ldr	r2, [r7, #8]
 800ae04:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	88fa      	ldrh	r2, [r7, #6]
 800ae0a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	88fa      	ldrh	r2, [r7, #6]
 800ae10:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2200      	movs	r2, #0
 800ae16:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2200      	movs	r2, #0
 800ae22:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2200      	movs	r2, #0
 800ae28:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ae38:	d10f      	bne.n	800ae5a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	681a      	ldr	r2, [r3, #0]
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ae48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	681a      	ldr	r2, [r3, #0]
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ae58:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae64:	2b40      	cmp	r3, #64	@ 0x40
 800ae66:	d007      	beq.n	800ae78 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	681a      	ldr	r2, [r3, #0]
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ae76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	68db      	ldr	r3, [r3, #12]
 800ae7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae80:	d152      	bne.n	800af28 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d002      	beq.n	800ae90 <HAL_SPI_Transmit+0xee>
 800ae8a:	8b7b      	ldrh	r3, [r7, #26]
 800ae8c:	2b01      	cmp	r3, #1
 800ae8e:	d145      	bne.n	800af1c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae94:	881a      	ldrh	r2, [r3, #0]
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aea0:	1c9a      	adds	r2, r3, #2
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aeaa:	b29b      	uxth	r3, r3
 800aeac:	3b01      	subs	r3, #1
 800aeae:	b29a      	uxth	r2, r3
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800aeb4:	e032      	b.n	800af1c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	689b      	ldr	r3, [r3, #8]
 800aebc:	f003 0302 	and.w	r3, r3, #2
 800aec0:	2b02      	cmp	r3, #2
 800aec2:	d112      	bne.n	800aeea <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aec8:	881a      	ldrh	r2, [r3, #0]
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aed4:	1c9a      	adds	r2, r3, #2
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aede:	b29b      	uxth	r3, r3
 800aee0:	3b01      	subs	r3, #1
 800aee2:	b29a      	uxth	r2, r3
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	86da      	strh	r2, [r3, #54]	@ 0x36
 800aee8:	e018      	b.n	800af1c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aeea:	f7fd fc11 	bl	8008710 <HAL_GetTick>
 800aeee:	4602      	mov	r2, r0
 800aef0:	69fb      	ldr	r3, [r7, #28]
 800aef2:	1ad3      	subs	r3, r2, r3
 800aef4:	683a      	ldr	r2, [r7, #0]
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d803      	bhi.n	800af02 <HAL_SPI_Transmit+0x160>
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af00:	d102      	bne.n	800af08 <HAL_SPI_Transmit+0x166>
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d109      	bne.n	800af1c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	2201      	movs	r2, #1
 800af0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	2200      	movs	r2, #0
 800af14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800af18:	2303      	movs	r3, #3
 800af1a:	e082      	b.n	800b022 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800af20:	b29b      	uxth	r3, r3
 800af22:	2b00      	cmp	r3, #0
 800af24:	d1c7      	bne.n	800aeb6 <HAL_SPI_Transmit+0x114>
 800af26:	e053      	b.n	800afd0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d002      	beq.n	800af36 <HAL_SPI_Transmit+0x194>
 800af30:	8b7b      	ldrh	r3, [r7, #26]
 800af32:	2b01      	cmp	r3, #1
 800af34:	d147      	bne.n	800afc6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	330c      	adds	r3, #12
 800af40:	7812      	ldrb	r2, [r2, #0]
 800af42:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af48:	1c5a      	adds	r2, r3, #1
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800af52:	b29b      	uxth	r3, r3
 800af54:	3b01      	subs	r3, #1
 800af56:	b29a      	uxth	r2, r3
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800af5c:	e033      	b.n	800afc6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	689b      	ldr	r3, [r3, #8]
 800af64:	f003 0302 	and.w	r3, r3, #2
 800af68:	2b02      	cmp	r3, #2
 800af6a:	d113      	bne.n	800af94 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	330c      	adds	r3, #12
 800af76:	7812      	ldrb	r2, [r2, #0]
 800af78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af7e:	1c5a      	adds	r2, r3, #1
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800af88:	b29b      	uxth	r3, r3
 800af8a:	3b01      	subs	r3, #1
 800af8c:	b29a      	uxth	r2, r3
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	86da      	strh	r2, [r3, #54]	@ 0x36
 800af92:	e018      	b.n	800afc6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800af94:	f7fd fbbc 	bl	8008710 <HAL_GetTick>
 800af98:	4602      	mov	r2, r0
 800af9a:	69fb      	ldr	r3, [r7, #28]
 800af9c:	1ad3      	subs	r3, r2, r3
 800af9e:	683a      	ldr	r2, [r7, #0]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d803      	bhi.n	800afac <HAL_SPI_Transmit+0x20a>
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afaa:	d102      	bne.n	800afb2 <HAL_SPI_Transmit+0x210>
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d109      	bne.n	800afc6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2201      	movs	r2, #1
 800afb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2200      	movs	r2, #0
 800afbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800afc2:	2303      	movs	r3, #3
 800afc4:	e02d      	b.n	800b022 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800afca:	b29b      	uxth	r3, r3
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d1c6      	bne.n	800af5e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800afd0:	69fa      	ldr	r2, [r7, #28]
 800afd2:	6839      	ldr	r1, [r7, #0]
 800afd4:	68f8      	ldr	r0, [r7, #12]
 800afd6:	f000 f8b1 	bl	800b13c <SPI_EndRxTxTransaction>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d002      	beq.n	800afe6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2220      	movs	r2, #32
 800afe4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	689b      	ldr	r3, [r3, #8]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d10a      	bne.n	800b004 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800afee:	2300      	movs	r3, #0
 800aff0:	617b      	str	r3, [r7, #20]
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	68db      	ldr	r3, [r3, #12]
 800aff8:	617b      	str	r3, [r7, #20]
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	689b      	ldr	r3, [r3, #8]
 800b000:	617b      	str	r3, [r7, #20]
 800b002:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2201      	movs	r2, #1
 800b008:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2200      	movs	r2, #0
 800b010:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d001      	beq.n	800b020 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800b01c:	2301      	movs	r3, #1
 800b01e:	e000      	b.n	800b022 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800b020:	2300      	movs	r3, #0
  }
}
 800b022:	4618      	mov	r0, r3
 800b024:	3720      	adds	r7, #32
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
	...

0800b02c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b088      	sub	sp, #32
 800b030:	af00      	add	r7, sp, #0
 800b032:	60f8      	str	r0, [r7, #12]
 800b034:	60b9      	str	r1, [r7, #8]
 800b036:	603b      	str	r3, [r7, #0]
 800b038:	4613      	mov	r3, r2
 800b03a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b03c:	f7fd fb68 	bl	8008710 <HAL_GetTick>
 800b040:	4602      	mov	r2, r0
 800b042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b044:	1a9b      	subs	r3, r3, r2
 800b046:	683a      	ldr	r2, [r7, #0]
 800b048:	4413      	add	r3, r2
 800b04a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b04c:	f7fd fb60 	bl	8008710 <HAL_GetTick>
 800b050:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b052:	4b39      	ldr	r3, [pc, #228]	@ (800b138 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	015b      	lsls	r3, r3, #5
 800b058:	0d1b      	lsrs	r3, r3, #20
 800b05a:	69fa      	ldr	r2, [r7, #28]
 800b05c:	fb02 f303 	mul.w	r3, r2, r3
 800b060:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b062:	e054      	b.n	800b10e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b06a:	d050      	beq.n	800b10e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b06c:	f7fd fb50 	bl	8008710 <HAL_GetTick>
 800b070:	4602      	mov	r2, r0
 800b072:	69bb      	ldr	r3, [r7, #24]
 800b074:	1ad3      	subs	r3, r2, r3
 800b076:	69fa      	ldr	r2, [r7, #28]
 800b078:	429a      	cmp	r2, r3
 800b07a:	d902      	bls.n	800b082 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b07c:	69fb      	ldr	r3, [r7, #28]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d13d      	bne.n	800b0fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	685a      	ldr	r2, [r3, #4]
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800b090:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	685b      	ldr	r3, [r3, #4]
 800b096:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b09a:	d111      	bne.n	800b0c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	689b      	ldr	r3, [r3, #8]
 800b0a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b0a4:	d004      	beq.n	800b0b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	689b      	ldr	r3, [r3, #8]
 800b0aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b0ae:	d107      	bne.n	800b0c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	681a      	ldr	r2, [r3, #0]
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b0be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b0c8:	d10f      	bne.n	800b0ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	681a      	ldr	r2, [r3, #0]
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b0d8:	601a      	str	r2, [r3, #0]
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	681a      	ldr	r2, [r3, #0]
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b0e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	2201      	movs	r2, #1
 800b0ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800b0fa:	2303      	movs	r3, #3
 800b0fc:	e017      	b.n	800b12e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d101      	bne.n	800b108 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b104:	2300      	movs	r3, #0
 800b106:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	3b01      	subs	r3, #1
 800b10c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	689a      	ldr	r2, [r3, #8]
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	4013      	ands	r3, r2
 800b118:	68ba      	ldr	r2, [r7, #8]
 800b11a:	429a      	cmp	r2, r3
 800b11c:	bf0c      	ite	eq
 800b11e:	2301      	moveq	r3, #1
 800b120:	2300      	movne	r3, #0
 800b122:	b2db      	uxtb	r3, r3
 800b124:	461a      	mov	r2, r3
 800b126:	79fb      	ldrb	r3, [r7, #7]
 800b128:	429a      	cmp	r2, r3
 800b12a:	d19b      	bne.n	800b064 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b12c:	2300      	movs	r3, #0
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3720      	adds	r7, #32
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop
 800b138:	20000004 	.word	0x20000004

0800b13c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b088      	sub	sp, #32
 800b140:	af02      	add	r7, sp, #8
 800b142:	60f8      	str	r0, [r7, #12]
 800b144:	60b9      	str	r1, [r7, #8]
 800b146:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	9300      	str	r3, [sp, #0]
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	2201      	movs	r2, #1
 800b150:	2102      	movs	r1, #2
 800b152:	68f8      	ldr	r0, [r7, #12]
 800b154:	f7ff ff6a 	bl	800b02c <SPI_WaitFlagStateUntilTimeout>
 800b158:	4603      	mov	r3, r0
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d007      	beq.n	800b16e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b162:	f043 0220 	orr.w	r2, r3, #32
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800b16a:	2303      	movs	r3, #3
 800b16c:	e032      	b.n	800b1d4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b16e:	4b1b      	ldr	r3, [pc, #108]	@ (800b1dc <SPI_EndRxTxTransaction+0xa0>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	4a1b      	ldr	r2, [pc, #108]	@ (800b1e0 <SPI_EndRxTxTransaction+0xa4>)
 800b174:	fba2 2303 	umull	r2, r3, r2, r3
 800b178:	0d5b      	lsrs	r3, r3, #21
 800b17a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b17e:	fb02 f303 	mul.w	r3, r2, r3
 800b182:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	685b      	ldr	r3, [r3, #4]
 800b188:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b18c:	d112      	bne.n	800b1b4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	9300      	str	r3, [sp, #0]
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	2200      	movs	r2, #0
 800b196:	2180      	movs	r1, #128	@ 0x80
 800b198:	68f8      	ldr	r0, [r7, #12]
 800b19a:	f7ff ff47 	bl	800b02c <SPI_WaitFlagStateUntilTimeout>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d016      	beq.n	800b1d2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b1a8:	f043 0220 	orr.w	r2, r3, #32
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800b1b0:	2303      	movs	r3, #3
 800b1b2:	e00f      	b.n	800b1d4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d00a      	beq.n	800b1d0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	3b01      	subs	r3, #1
 800b1be:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	689b      	ldr	r3, [r3, #8]
 800b1c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1ca:	2b80      	cmp	r3, #128	@ 0x80
 800b1cc:	d0f2      	beq.n	800b1b4 <SPI_EndRxTxTransaction+0x78>
 800b1ce:	e000      	b.n	800b1d2 <SPI_EndRxTxTransaction+0x96>
        break;
 800b1d0:	bf00      	nop
  }

  return HAL_OK;
 800b1d2:	2300      	movs	r3, #0
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3718      	adds	r7, #24
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}
 800b1dc:	20000004 	.word	0x20000004
 800b1e0:	165e9f81 	.word	0x165e9f81

0800b1e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b082      	sub	sp, #8
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d101      	bne.n	800b1f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	e041      	b.n	800b27a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b1fc:	b2db      	uxtb	r3, r3
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d106      	bne.n	800b210 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2200      	movs	r2, #0
 800b206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f7fc ffe0 	bl	80081d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2202      	movs	r2, #2
 800b214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	3304      	adds	r3, #4
 800b220:	4619      	mov	r1, r3
 800b222:	4610      	mov	r0, r2
 800b224:	f000 fc3c 	bl	800baa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2201      	movs	r2, #1
 800b22c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2201      	movs	r2, #1
 800b234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2201      	movs	r2, #1
 800b23c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2201      	movs	r2, #1
 800b244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2201      	movs	r2, #1
 800b24c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2201      	movs	r2, #1
 800b254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2201      	movs	r2, #1
 800b25c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2201      	movs	r2, #1
 800b264:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2201      	movs	r2, #1
 800b26c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2201      	movs	r2, #1
 800b274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b278:	2300      	movs	r3, #0
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3708      	adds	r7, #8
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
	...

0800b284 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b284:	b480      	push	{r7}
 800b286:	b085      	sub	sp, #20
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b292:	b2db      	uxtb	r3, r3
 800b294:	2b01      	cmp	r3, #1
 800b296:	d001      	beq.n	800b29c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b298:	2301      	movs	r3, #1
 800b29a:	e044      	b.n	800b326 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2202      	movs	r2, #2
 800b2a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	68da      	ldr	r2, [r3, #12]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f042 0201 	orr.w	r2, r2, #1
 800b2b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	4a1e      	ldr	r2, [pc, #120]	@ (800b334 <HAL_TIM_Base_Start_IT+0xb0>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d018      	beq.n	800b2f0 <HAL_TIM_Base_Start_IT+0x6c>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2c6:	d013      	beq.n	800b2f0 <HAL_TIM_Base_Start_IT+0x6c>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	4a1a      	ldr	r2, [pc, #104]	@ (800b338 <HAL_TIM_Base_Start_IT+0xb4>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d00e      	beq.n	800b2f0 <HAL_TIM_Base_Start_IT+0x6c>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	4a19      	ldr	r2, [pc, #100]	@ (800b33c <HAL_TIM_Base_Start_IT+0xb8>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d009      	beq.n	800b2f0 <HAL_TIM_Base_Start_IT+0x6c>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4a17      	ldr	r2, [pc, #92]	@ (800b340 <HAL_TIM_Base_Start_IT+0xbc>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d004      	beq.n	800b2f0 <HAL_TIM_Base_Start_IT+0x6c>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4a16      	ldr	r2, [pc, #88]	@ (800b344 <HAL_TIM_Base_Start_IT+0xc0>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d111      	bne.n	800b314 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	689b      	ldr	r3, [r3, #8]
 800b2f6:	f003 0307 	and.w	r3, r3, #7
 800b2fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2b06      	cmp	r3, #6
 800b300:	d010      	beq.n	800b324 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	681a      	ldr	r2, [r3, #0]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f042 0201 	orr.w	r2, r2, #1
 800b310:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b312:	e007      	b.n	800b324 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	681a      	ldr	r2, [r3, #0]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	f042 0201 	orr.w	r2, r2, #1
 800b322:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b324:	2300      	movs	r3, #0
}
 800b326:	4618      	mov	r0, r3
 800b328:	3714      	adds	r7, #20
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr
 800b332:	bf00      	nop
 800b334:	40010000 	.word	0x40010000
 800b338:	40000400 	.word	0x40000400
 800b33c:	40000800 	.word	0x40000800
 800b340:	40000c00 	.word	0x40000c00
 800b344:	40014000 	.word	0x40014000

0800b348 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b082      	sub	sp, #8
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d101      	bne.n	800b35a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b356:	2301      	movs	r3, #1
 800b358:	e041      	b.n	800b3de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b360:	b2db      	uxtb	r3, r3
 800b362:	2b00      	cmp	r3, #0
 800b364:	d106      	bne.n	800b374 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2200      	movs	r2, #0
 800b36a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f000 f839 	bl	800b3e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2202      	movs	r2, #2
 800b378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681a      	ldr	r2, [r3, #0]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	3304      	adds	r3, #4
 800b384:	4619      	mov	r1, r3
 800b386:	4610      	mov	r0, r2
 800b388:	f000 fb8a 	bl	800baa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2201      	movs	r2, #1
 800b390:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2201      	movs	r2, #1
 800b398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2201      	movs	r2, #1
 800b3a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2201      	movs	r2, #1
 800b3c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b3dc:	2300      	movs	r3, #0
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3708      	adds	r7, #8
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}

0800b3e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b3e6:	b480      	push	{r7}
 800b3e8:	b083      	sub	sp, #12
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b3ee:	bf00      	nop
 800b3f0:	370c      	adds	r7, #12
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f8:	4770      	bx	lr
	...

0800b3fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d109      	bne.n	800b420 <HAL_TIM_PWM_Start+0x24>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b412:	b2db      	uxtb	r3, r3
 800b414:	2b01      	cmp	r3, #1
 800b416:	bf14      	ite	ne
 800b418:	2301      	movne	r3, #1
 800b41a:	2300      	moveq	r3, #0
 800b41c:	b2db      	uxtb	r3, r3
 800b41e:	e022      	b.n	800b466 <HAL_TIM_PWM_Start+0x6a>
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	2b04      	cmp	r3, #4
 800b424:	d109      	bne.n	800b43a <HAL_TIM_PWM_Start+0x3e>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b42c:	b2db      	uxtb	r3, r3
 800b42e:	2b01      	cmp	r3, #1
 800b430:	bf14      	ite	ne
 800b432:	2301      	movne	r3, #1
 800b434:	2300      	moveq	r3, #0
 800b436:	b2db      	uxtb	r3, r3
 800b438:	e015      	b.n	800b466 <HAL_TIM_PWM_Start+0x6a>
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	2b08      	cmp	r3, #8
 800b43e:	d109      	bne.n	800b454 <HAL_TIM_PWM_Start+0x58>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b446:	b2db      	uxtb	r3, r3
 800b448:	2b01      	cmp	r3, #1
 800b44a:	bf14      	ite	ne
 800b44c:	2301      	movne	r3, #1
 800b44e:	2300      	moveq	r3, #0
 800b450:	b2db      	uxtb	r3, r3
 800b452:	e008      	b.n	800b466 <HAL_TIM_PWM_Start+0x6a>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b45a:	b2db      	uxtb	r3, r3
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	bf14      	ite	ne
 800b460:	2301      	movne	r3, #1
 800b462:	2300      	moveq	r3, #0
 800b464:	b2db      	uxtb	r3, r3
 800b466:	2b00      	cmp	r3, #0
 800b468:	d001      	beq.n	800b46e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b46a:	2301      	movs	r3, #1
 800b46c:	e068      	b.n	800b540 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d104      	bne.n	800b47e <HAL_TIM_PWM_Start+0x82>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2202      	movs	r2, #2
 800b478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b47c:	e013      	b.n	800b4a6 <HAL_TIM_PWM_Start+0xaa>
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	2b04      	cmp	r3, #4
 800b482:	d104      	bne.n	800b48e <HAL_TIM_PWM_Start+0x92>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2202      	movs	r2, #2
 800b488:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b48c:	e00b      	b.n	800b4a6 <HAL_TIM_PWM_Start+0xaa>
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	2b08      	cmp	r3, #8
 800b492:	d104      	bne.n	800b49e <HAL_TIM_PWM_Start+0xa2>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2202      	movs	r2, #2
 800b498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b49c:	e003      	b.n	800b4a6 <HAL_TIM_PWM_Start+0xaa>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2202      	movs	r2, #2
 800b4a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	6839      	ldr	r1, [r7, #0]
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f000 fda8 	bl	800c004 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4a23      	ldr	r2, [pc, #140]	@ (800b548 <HAL_TIM_PWM_Start+0x14c>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d107      	bne.n	800b4ce <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b4cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	4a1d      	ldr	r2, [pc, #116]	@ (800b548 <HAL_TIM_PWM_Start+0x14c>)
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d018      	beq.n	800b50a <HAL_TIM_PWM_Start+0x10e>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4e0:	d013      	beq.n	800b50a <HAL_TIM_PWM_Start+0x10e>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4a19      	ldr	r2, [pc, #100]	@ (800b54c <HAL_TIM_PWM_Start+0x150>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d00e      	beq.n	800b50a <HAL_TIM_PWM_Start+0x10e>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a17      	ldr	r2, [pc, #92]	@ (800b550 <HAL_TIM_PWM_Start+0x154>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d009      	beq.n	800b50a <HAL_TIM_PWM_Start+0x10e>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4a16      	ldr	r2, [pc, #88]	@ (800b554 <HAL_TIM_PWM_Start+0x158>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d004      	beq.n	800b50a <HAL_TIM_PWM_Start+0x10e>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4a14      	ldr	r2, [pc, #80]	@ (800b558 <HAL_TIM_PWM_Start+0x15c>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d111      	bne.n	800b52e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	689b      	ldr	r3, [r3, #8]
 800b510:	f003 0307 	and.w	r3, r3, #7
 800b514:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2b06      	cmp	r3, #6
 800b51a:	d010      	beq.n	800b53e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	681a      	ldr	r2, [r3, #0]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f042 0201 	orr.w	r2, r2, #1
 800b52a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b52c:	e007      	b.n	800b53e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	681a      	ldr	r2, [r3, #0]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f042 0201 	orr.w	r2, r2, #1
 800b53c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b53e:	2300      	movs	r3, #0
}
 800b540:	4618      	mov	r0, r3
 800b542:	3710      	adds	r7, #16
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}
 800b548:	40010000 	.word	0x40010000
 800b54c:	40000400 	.word	0x40000400
 800b550:	40000800 	.word	0x40000800
 800b554:	40000c00 	.word	0x40000c00
 800b558:	40014000 	.word	0x40014000

0800b55c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b084      	sub	sp, #16
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	68db      	ldr	r3, [r3, #12]
 800b56a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	691b      	ldr	r3, [r3, #16]
 800b572:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	f003 0302 	and.w	r3, r3, #2
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d020      	beq.n	800b5c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f003 0302 	and.w	r3, r3, #2
 800b584:	2b00      	cmp	r3, #0
 800b586:	d01b      	beq.n	800b5c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f06f 0202 	mvn.w	r2, #2
 800b590:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2201      	movs	r2, #1
 800b596:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	699b      	ldr	r3, [r3, #24]
 800b59e:	f003 0303 	and.w	r3, r3, #3
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d003      	beq.n	800b5ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f000 fa5b 	bl	800ba62 <HAL_TIM_IC_CaptureCallback>
 800b5ac:	e005      	b.n	800b5ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f000 fa4d 	bl	800ba4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 fa5e 	bl	800ba76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	f003 0304 	and.w	r3, r3, #4
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d020      	beq.n	800b60c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f003 0304 	and.w	r3, r3, #4
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d01b      	beq.n	800b60c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f06f 0204 	mvn.w	r2, #4
 800b5dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2202      	movs	r2, #2
 800b5e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	699b      	ldr	r3, [r3, #24]
 800b5ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d003      	beq.n	800b5fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 fa35 	bl	800ba62 <HAL_TIM_IC_CaptureCallback>
 800b5f8:	e005      	b.n	800b606 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 fa27 	bl	800ba4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f000 fa38 	bl	800ba76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2200      	movs	r2, #0
 800b60a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	f003 0308 	and.w	r3, r3, #8
 800b612:	2b00      	cmp	r3, #0
 800b614:	d020      	beq.n	800b658 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	f003 0308 	and.w	r3, r3, #8
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d01b      	beq.n	800b658 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f06f 0208 	mvn.w	r2, #8
 800b628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2204      	movs	r2, #4
 800b62e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	69db      	ldr	r3, [r3, #28]
 800b636:	f003 0303 	and.w	r3, r3, #3
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d003      	beq.n	800b646 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f000 fa0f 	bl	800ba62 <HAL_TIM_IC_CaptureCallback>
 800b644:	e005      	b.n	800b652 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 fa01 	bl	800ba4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 fa12 	bl	800ba76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2200      	movs	r2, #0
 800b656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	f003 0310 	and.w	r3, r3, #16
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d020      	beq.n	800b6a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	f003 0310 	and.w	r3, r3, #16
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d01b      	beq.n	800b6a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f06f 0210 	mvn.w	r2, #16
 800b674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2208      	movs	r2, #8
 800b67a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	69db      	ldr	r3, [r3, #28]
 800b682:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b686:	2b00      	cmp	r3, #0
 800b688:	d003      	beq.n	800b692 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f000 f9e9 	bl	800ba62 <HAL_TIM_IC_CaptureCallback>
 800b690:	e005      	b.n	800b69e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f000 f9db 	bl	800ba4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f000 f9ec 	bl	800ba76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	f003 0301 	and.w	r3, r3, #1
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d00c      	beq.n	800b6c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	f003 0301 	and.w	r3, r3, #1
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d007      	beq.n	800b6c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f06f 0201 	mvn.w	r2, #1
 800b6c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f7fb ff94 	bl	80075f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d00c      	beq.n	800b6ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d007      	beq.n	800b6ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800b6e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 fd2a 	bl	800c140 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d00c      	beq.n	800b710 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d007      	beq.n	800b710 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f000 f9bd 	bl	800ba8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	f003 0320 	and.w	r3, r3, #32
 800b716:	2b00      	cmp	r3, #0
 800b718:	d00c      	beq.n	800b734 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	f003 0320 	and.w	r3, r3, #32
 800b720:	2b00      	cmp	r3, #0
 800b722:	d007      	beq.n	800b734 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f06f 0220 	mvn.w	r2, #32
 800b72c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f000 fcfc 	bl	800c12c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b734:	bf00      	nop
 800b736:	3710      	adds	r7, #16
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b086      	sub	sp, #24
 800b740:	af00      	add	r7, sp, #0
 800b742:	60f8      	str	r0, [r7, #12]
 800b744:	60b9      	str	r1, [r7, #8]
 800b746:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b748:	2300      	movs	r3, #0
 800b74a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b752:	2b01      	cmp	r3, #1
 800b754:	d101      	bne.n	800b75a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b756:	2302      	movs	r3, #2
 800b758:	e0ae      	b.n	800b8b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2201      	movs	r2, #1
 800b75e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2b0c      	cmp	r3, #12
 800b766:	f200 809f 	bhi.w	800b8a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b76a:	a201      	add	r2, pc, #4	@ (adr r2, 800b770 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b76c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b770:	0800b7a5 	.word	0x0800b7a5
 800b774:	0800b8a9 	.word	0x0800b8a9
 800b778:	0800b8a9 	.word	0x0800b8a9
 800b77c:	0800b8a9 	.word	0x0800b8a9
 800b780:	0800b7e5 	.word	0x0800b7e5
 800b784:	0800b8a9 	.word	0x0800b8a9
 800b788:	0800b8a9 	.word	0x0800b8a9
 800b78c:	0800b8a9 	.word	0x0800b8a9
 800b790:	0800b827 	.word	0x0800b827
 800b794:	0800b8a9 	.word	0x0800b8a9
 800b798:	0800b8a9 	.word	0x0800b8a9
 800b79c:	0800b8a9 	.word	0x0800b8a9
 800b7a0:	0800b867 	.word	0x0800b867
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	68b9      	ldr	r1, [r7, #8]
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f000 fa04 	bl	800bbb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	699a      	ldr	r2, [r3, #24]
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f042 0208 	orr.w	r2, r2, #8
 800b7be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	699a      	ldr	r2, [r3, #24]
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f022 0204 	bic.w	r2, r2, #4
 800b7ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	6999      	ldr	r1, [r3, #24]
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	691a      	ldr	r2, [r3, #16]
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	430a      	orrs	r2, r1
 800b7e0:	619a      	str	r2, [r3, #24]
      break;
 800b7e2:	e064      	b.n	800b8ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	68b9      	ldr	r1, [r7, #8]
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f000 fa4a 	bl	800bc84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	699a      	ldr	r2, [r3, #24]
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b7fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	699a      	ldr	r2, [r3, #24]
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b80e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	6999      	ldr	r1, [r3, #24]
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	691b      	ldr	r3, [r3, #16]
 800b81a:	021a      	lsls	r2, r3, #8
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	430a      	orrs	r2, r1
 800b822:	619a      	str	r2, [r3, #24]
      break;
 800b824:	e043      	b.n	800b8ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	68b9      	ldr	r1, [r7, #8]
 800b82c:	4618      	mov	r0, r3
 800b82e:	f000 fa95 	bl	800bd5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	69da      	ldr	r2, [r3, #28]
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f042 0208 	orr.w	r2, r2, #8
 800b840:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	69da      	ldr	r2, [r3, #28]
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f022 0204 	bic.w	r2, r2, #4
 800b850:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	69d9      	ldr	r1, [r3, #28]
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	691a      	ldr	r2, [r3, #16]
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	430a      	orrs	r2, r1
 800b862:	61da      	str	r2, [r3, #28]
      break;
 800b864:	e023      	b.n	800b8ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	68b9      	ldr	r1, [r7, #8]
 800b86c:	4618      	mov	r0, r3
 800b86e:	f000 fadf 	bl	800be30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	69da      	ldr	r2, [r3, #28]
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b880:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	69da      	ldr	r2, [r3, #28]
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b890:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	69d9      	ldr	r1, [r3, #28]
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	691b      	ldr	r3, [r3, #16]
 800b89c:	021a      	lsls	r2, r3, #8
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	430a      	orrs	r2, r1
 800b8a4:	61da      	str	r2, [r3, #28]
      break;
 800b8a6:	e002      	b.n	800b8ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	75fb      	strb	r3, [r7, #23]
      break;
 800b8ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b8b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3718      	adds	r7, #24
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	d101      	bne.n	800b8dc <HAL_TIM_ConfigClockSource+0x1c>
 800b8d8:	2302      	movs	r3, #2
 800b8da:	e0b4      	b.n	800ba46 <HAL_TIM_ConfigClockSource+0x186>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2201      	movs	r2, #1
 800b8e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2202      	movs	r2, #2
 800b8e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	689b      	ldr	r3, [r3, #8]
 800b8f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b8fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b902:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	68ba      	ldr	r2, [r7, #8]
 800b90a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b914:	d03e      	beq.n	800b994 <HAL_TIM_ConfigClockSource+0xd4>
 800b916:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b91a:	f200 8087 	bhi.w	800ba2c <HAL_TIM_ConfigClockSource+0x16c>
 800b91e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b922:	f000 8086 	beq.w	800ba32 <HAL_TIM_ConfigClockSource+0x172>
 800b926:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b92a:	d87f      	bhi.n	800ba2c <HAL_TIM_ConfigClockSource+0x16c>
 800b92c:	2b70      	cmp	r3, #112	@ 0x70
 800b92e:	d01a      	beq.n	800b966 <HAL_TIM_ConfigClockSource+0xa6>
 800b930:	2b70      	cmp	r3, #112	@ 0x70
 800b932:	d87b      	bhi.n	800ba2c <HAL_TIM_ConfigClockSource+0x16c>
 800b934:	2b60      	cmp	r3, #96	@ 0x60
 800b936:	d050      	beq.n	800b9da <HAL_TIM_ConfigClockSource+0x11a>
 800b938:	2b60      	cmp	r3, #96	@ 0x60
 800b93a:	d877      	bhi.n	800ba2c <HAL_TIM_ConfigClockSource+0x16c>
 800b93c:	2b50      	cmp	r3, #80	@ 0x50
 800b93e:	d03c      	beq.n	800b9ba <HAL_TIM_ConfigClockSource+0xfa>
 800b940:	2b50      	cmp	r3, #80	@ 0x50
 800b942:	d873      	bhi.n	800ba2c <HAL_TIM_ConfigClockSource+0x16c>
 800b944:	2b40      	cmp	r3, #64	@ 0x40
 800b946:	d058      	beq.n	800b9fa <HAL_TIM_ConfigClockSource+0x13a>
 800b948:	2b40      	cmp	r3, #64	@ 0x40
 800b94a:	d86f      	bhi.n	800ba2c <HAL_TIM_ConfigClockSource+0x16c>
 800b94c:	2b30      	cmp	r3, #48	@ 0x30
 800b94e:	d064      	beq.n	800ba1a <HAL_TIM_ConfigClockSource+0x15a>
 800b950:	2b30      	cmp	r3, #48	@ 0x30
 800b952:	d86b      	bhi.n	800ba2c <HAL_TIM_ConfigClockSource+0x16c>
 800b954:	2b20      	cmp	r3, #32
 800b956:	d060      	beq.n	800ba1a <HAL_TIM_ConfigClockSource+0x15a>
 800b958:	2b20      	cmp	r3, #32
 800b95a:	d867      	bhi.n	800ba2c <HAL_TIM_ConfigClockSource+0x16c>
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d05c      	beq.n	800ba1a <HAL_TIM_ConfigClockSource+0x15a>
 800b960:	2b10      	cmp	r3, #16
 800b962:	d05a      	beq.n	800ba1a <HAL_TIM_ConfigClockSource+0x15a>
 800b964:	e062      	b.n	800ba2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b976:	f000 fb25 	bl	800bfc4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	689b      	ldr	r3, [r3, #8]
 800b980:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b988:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	68ba      	ldr	r2, [r7, #8]
 800b990:	609a      	str	r2, [r3, #8]
      break;
 800b992:	e04f      	b.n	800ba34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b9a4:	f000 fb0e 	bl	800bfc4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	689a      	ldr	r2, [r3, #8]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b9b6:	609a      	str	r2, [r3, #8]
      break;
 800b9b8:	e03c      	b.n	800ba34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	f000 fa82 	bl	800bed0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	2150      	movs	r1, #80	@ 0x50
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f000 fadb 	bl	800bf8e <TIM_ITRx_SetConfig>
      break;
 800b9d8:	e02c      	b.n	800ba34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b9e6:	461a      	mov	r2, r3
 800b9e8:	f000 faa1 	bl	800bf2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	2160      	movs	r1, #96	@ 0x60
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f000 facb 	bl	800bf8e <TIM_ITRx_SetConfig>
      break;
 800b9f8:	e01c      	b.n	800ba34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba06:	461a      	mov	r2, r3
 800ba08:	f000 fa62 	bl	800bed0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	2140      	movs	r1, #64	@ 0x40
 800ba12:	4618      	mov	r0, r3
 800ba14:	f000 fabb 	bl	800bf8e <TIM_ITRx_SetConfig>
      break;
 800ba18:	e00c      	b.n	800ba34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681a      	ldr	r2, [r3, #0]
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	4619      	mov	r1, r3
 800ba24:	4610      	mov	r0, r2
 800ba26:	f000 fab2 	bl	800bf8e <TIM_ITRx_SetConfig>
      break;
 800ba2a:	e003      	b.n	800ba34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	73fb      	strb	r3, [r7, #15]
      break;
 800ba30:	e000      	b.n	800ba34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ba32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2201      	movs	r2, #1
 800ba38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ba44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3710      	adds	r7, #16
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}

0800ba4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ba4e:	b480      	push	{r7}
 800ba50:	b083      	sub	sp, #12
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ba56:	bf00      	nop
 800ba58:	370c      	adds	r7, #12
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr

0800ba62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ba62:	b480      	push	{r7}
 800ba64:	b083      	sub	sp, #12
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ba6a:	bf00      	nop
 800ba6c:	370c      	adds	r7, #12
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr

0800ba76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ba76:	b480      	push	{r7}
 800ba78:	b083      	sub	sp, #12
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ba7e:	bf00      	nop
 800ba80:	370c      	adds	r7, #12
 800ba82:	46bd      	mov	sp, r7
 800ba84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba88:	4770      	bx	lr

0800ba8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ba8a:	b480      	push	{r7}
 800ba8c:	b083      	sub	sp, #12
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ba92:	bf00      	nop
 800ba94:	370c      	adds	r7, #12
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr
	...

0800baa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800baa0:	b480      	push	{r7}
 800baa2:	b085      	sub	sp, #20
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
 800baa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	4a3a      	ldr	r2, [pc, #232]	@ (800bb9c <TIM_Base_SetConfig+0xfc>)
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d00f      	beq.n	800bad8 <TIM_Base_SetConfig+0x38>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800babe:	d00b      	beq.n	800bad8 <TIM_Base_SetConfig+0x38>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	4a37      	ldr	r2, [pc, #220]	@ (800bba0 <TIM_Base_SetConfig+0x100>)
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d007      	beq.n	800bad8 <TIM_Base_SetConfig+0x38>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	4a36      	ldr	r2, [pc, #216]	@ (800bba4 <TIM_Base_SetConfig+0x104>)
 800bacc:	4293      	cmp	r3, r2
 800bace:	d003      	beq.n	800bad8 <TIM_Base_SetConfig+0x38>
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	4a35      	ldr	r2, [pc, #212]	@ (800bba8 <TIM_Base_SetConfig+0x108>)
 800bad4:	4293      	cmp	r3, r2
 800bad6:	d108      	bne.n	800baea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bade:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	68fa      	ldr	r2, [r7, #12]
 800bae6:	4313      	orrs	r3, r2
 800bae8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	4a2b      	ldr	r2, [pc, #172]	@ (800bb9c <TIM_Base_SetConfig+0xfc>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d01b      	beq.n	800bb2a <TIM_Base_SetConfig+0x8a>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800baf8:	d017      	beq.n	800bb2a <TIM_Base_SetConfig+0x8a>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	4a28      	ldr	r2, [pc, #160]	@ (800bba0 <TIM_Base_SetConfig+0x100>)
 800bafe:	4293      	cmp	r3, r2
 800bb00:	d013      	beq.n	800bb2a <TIM_Base_SetConfig+0x8a>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	4a27      	ldr	r2, [pc, #156]	@ (800bba4 <TIM_Base_SetConfig+0x104>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d00f      	beq.n	800bb2a <TIM_Base_SetConfig+0x8a>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	4a26      	ldr	r2, [pc, #152]	@ (800bba8 <TIM_Base_SetConfig+0x108>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d00b      	beq.n	800bb2a <TIM_Base_SetConfig+0x8a>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	4a25      	ldr	r2, [pc, #148]	@ (800bbac <TIM_Base_SetConfig+0x10c>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d007      	beq.n	800bb2a <TIM_Base_SetConfig+0x8a>
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	4a24      	ldr	r2, [pc, #144]	@ (800bbb0 <TIM_Base_SetConfig+0x110>)
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	d003      	beq.n	800bb2a <TIM_Base_SetConfig+0x8a>
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	4a23      	ldr	r2, [pc, #140]	@ (800bbb4 <TIM_Base_SetConfig+0x114>)
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d108      	bne.n	800bb3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bb30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	68db      	ldr	r3, [r3, #12]
 800bb36:	68fa      	ldr	r2, [r7, #12]
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	695b      	ldr	r3, [r3, #20]
 800bb46:	4313      	orrs	r3, r2
 800bb48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	68fa      	ldr	r2, [r7, #12]
 800bb4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	689a      	ldr	r2, [r3, #8]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	4a0e      	ldr	r2, [pc, #56]	@ (800bb9c <TIM_Base_SetConfig+0xfc>)
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d103      	bne.n	800bb70 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	691a      	ldr	r2, [r3, #16]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2201      	movs	r2, #1
 800bb74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	691b      	ldr	r3, [r3, #16]
 800bb7a:	f003 0301 	and.w	r3, r3, #1
 800bb7e:	2b01      	cmp	r3, #1
 800bb80:	d105      	bne.n	800bb8e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	691b      	ldr	r3, [r3, #16]
 800bb86:	f023 0201 	bic.w	r2, r3, #1
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	611a      	str	r2, [r3, #16]
  }
}
 800bb8e:	bf00      	nop
 800bb90:	3714      	adds	r7, #20
 800bb92:	46bd      	mov	sp, r7
 800bb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb98:	4770      	bx	lr
 800bb9a:	bf00      	nop
 800bb9c:	40010000 	.word	0x40010000
 800bba0:	40000400 	.word	0x40000400
 800bba4:	40000800 	.word	0x40000800
 800bba8:	40000c00 	.word	0x40000c00
 800bbac:	40014000 	.word	0x40014000
 800bbb0:	40014400 	.word	0x40014400
 800bbb4:	40014800 	.word	0x40014800

0800bbb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b087      	sub	sp, #28
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6a1b      	ldr	r3, [r3, #32]
 800bbc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6a1b      	ldr	r3, [r3, #32]
 800bbcc:	f023 0201 	bic.w	r2, r3, #1
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	685b      	ldr	r3, [r3, #4]
 800bbd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	699b      	ldr	r3, [r3, #24]
 800bbde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bbe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	f023 0303 	bic.w	r3, r3, #3
 800bbee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	68fa      	ldr	r2, [r7, #12]
 800bbf6:	4313      	orrs	r3, r2
 800bbf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bbfa:	697b      	ldr	r3, [r7, #20]
 800bbfc:	f023 0302 	bic.w	r3, r3, #2
 800bc00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	689b      	ldr	r3, [r3, #8]
 800bc06:	697a      	ldr	r2, [r7, #20]
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	4a1c      	ldr	r2, [pc, #112]	@ (800bc80 <TIM_OC1_SetConfig+0xc8>)
 800bc10:	4293      	cmp	r3, r2
 800bc12:	d10c      	bne.n	800bc2e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	f023 0308 	bic.w	r3, r3, #8
 800bc1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	68db      	ldr	r3, [r3, #12]
 800bc20:	697a      	ldr	r2, [r7, #20]
 800bc22:	4313      	orrs	r3, r2
 800bc24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	f023 0304 	bic.w	r3, r3, #4
 800bc2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	4a13      	ldr	r2, [pc, #76]	@ (800bc80 <TIM_OC1_SetConfig+0xc8>)
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d111      	bne.n	800bc5a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bc3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bc44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	695b      	ldr	r3, [r3, #20]
 800bc4a:	693a      	ldr	r2, [r7, #16]
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	699b      	ldr	r3, [r3, #24]
 800bc54:	693a      	ldr	r2, [r7, #16]
 800bc56:	4313      	orrs	r3, r2
 800bc58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	693a      	ldr	r2, [r7, #16]
 800bc5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	68fa      	ldr	r2, [r7, #12]
 800bc64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	685a      	ldr	r2, [r3, #4]
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	697a      	ldr	r2, [r7, #20]
 800bc72:	621a      	str	r2, [r3, #32]
}
 800bc74:	bf00      	nop
 800bc76:	371c      	adds	r7, #28
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr
 800bc80:	40010000 	.word	0x40010000

0800bc84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b087      	sub	sp, #28
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6a1b      	ldr	r3, [r3, #32]
 800bc92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6a1b      	ldr	r3, [r3, #32]
 800bc98:	f023 0210 	bic.w	r2, r3, #16
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	699b      	ldr	r3, [r3, #24]
 800bcaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bcb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bcba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	021b      	lsls	r3, r3, #8
 800bcc2:	68fa      	ldr	r2, [r7, #12]
 800bcc4:	4313      	orrs	r3, r2
 800bcc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	f023 0320 	bic.w	r3, r3, #32
 800bcce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	689b      	ldr	r3, [r3, #8]
 800bcd4:	011b      	lsls	r3, r3, #4
 800bcd6:	697a      	ldr	r2, [r7, #20]
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	4a1e      	ldr	r2, [pc, #120]	@ (800bd58 <TIM_OC2_SetConfig+0xd4>)
 800bce0:	4293      	cmp	r3, r2
 800bce2:	d10d      	bne.n	800bd00 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bcea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	68db      	ldr	r3, [r3, #12]
 800bcf0:	011b      	lsls	r3, r3, #4
 800bcf2:	697a      	ldr	r2, [r7, #20]
 800bcf4:	4313      	orrs	r3, r2
 800bcf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bcfe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	4a15      	ldr	r2, [pc, #84]	@ (800bd58 <TIM_OC2_SetConfig+0xd4>)
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d113      	bne.n	800bd30 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bd0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bd16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	695b      	ldr	r3, [r3, #20]
 800bd1c:	009b      	lsls	r3, r3, #2
 800bd1e:	693a      	ldr	r2, [r7, #16]
 800bd20:	4313      	orrs	r3, r2
 800bd22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	699b      	ldr	r3, [r3, #24]
 800bd28:	009b      	lsls	r3, r3, #2
 800bd2a:	693a      	ldr	r2, [r7, #16]
 800bd2c:	4313      	orrs	r3, r2
 800bd2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	693a      	ldr	r2, [r7, #16]
 800bd34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	68fa      	ldr	r2, [r7, #12]
 800bd3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	685a      	ldr	r2, [r3, #4]
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	697a      	ldr	r2, [r7, #20]
 800bd48:	621a      	str	r2, [r3, #32]
}
 800bd4a:	bf00      	nop
 800bd4c:	371c      	adds	r7, #28
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr
 800bd56:	bf00      	nop
 800bd58:	40010000 	.word	0x40010000

0800bd5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b087      	sub	sp, #28
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6a1b      	ldr	r3, [r3, #32]
 800bd6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6a1b      	ldr	r3, [r3, #32]
 800bd70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	69db      	ldr	r3, [r3, #28]
 800bd82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f023 0303 	bic.w	r3, r3, #3
 800bd92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	68fa      	ldr	r2, [r7, #12]
 800bd9a:	4313      	orrs	r3, r2
 800bd9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bda4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	689b      	ldr	r3, [r3, #8]
 800bdaa:	021b      	lsls	r3, r3, #8
 800bdac:	697a      	ldr	r2, [r7, #20]
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	4a1d      	ldr	r2, [pc, #116]	@ (800be2c <TIM_OC3_SetConfig+0xd0>)
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	d10d      	bne.n	800bdd6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bdc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	68db      	ldr	r3, [r3, #12]
 800bdc6:	021b      	lsls	r3, r3, #8
 800bdc8:	697a      	ldr	r2, [r7, #20]
 800bdca:	4313      	orrs	r3, r2
 800bdcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bdd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	4a14      	ldr	r2, [pc, #80]	@ (800be2c <TIM_OC3_SetConfig+0xd0>)
 800bdda:	4293      	cmp	r3, r2
 800bddc:	d113      	bne.n	800be06 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bde4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bdec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	695b      	ldr	r3, [r3, #20]
 800bdf2:	011b      	lsls	r3, r3, #4
 800bdf4:	693a      	ldr	r2, [r7, #16]
 800bdf6:	4313      	orrs	r3, r2
 800bdf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	699b      	ldr	r3, [r3, #24]
 800bdfe:	011b      	lsls	r3, r3, #4
 800be00:	693a      	ldr	r2, [r7, #16]
 800be02:	4313      	orrs	r3, r2
 800be04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	693a      	ldr	r2, [r7, #16]
 800be0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	68fa      	ldr	r2, [r7, #12]
 800be10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	685a      	ldr	r2, [r3, #4]
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	697a      	ldr	r2, [r7, #20]
 800be1e:	621a      	str	r2, [r3, #32]
}
 800be20:	bf00      	nop
 800be22:	371c      	adds	r7, #28
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr
 800be2c:	40010000 	.word	0x40010000

0800be30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800be30:	b480      	push	{r7}
 800be32:	b087      	sub	sp, #28
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6a1b      	ldr	r3, [r3, #32]
 800be3e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6a1b      	ldr	r3, [r3, #32]
 800be44:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	69db      	ldr	r3, [r3, #28]
 800be56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800be66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	021b      	lsls	r3, r3, #8
 800be6e:	68fa      	ldr	r2, [r7, #12]
 800be70:	4313      	orrs	r3, r2
 800be72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800be7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	689b      	ldr	r3, [r3, #8]
 800be80:	031b      	lsls	r3, r3, #12
 800be82:	693a      	ldr	r2, [r7, #16]
 800be84:	4313      	orrs	r3, r2
 800be86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	4a10      	ldr	r2, [pc, #64]	@ (800becc <TIM_OC4_SetConfig+0x9c>)
 800be8c:	4293      	cmp	r3, r2
 800be8e:	d109      	bne.n	800bea4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800be96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	695b      	ldr	r3, [r3, #20]
 800be9c:	019b      	lsls	r3, r3, #6
 800be9e:	697a      	ldr	r2, [r7, #20]
 800bea0:	4313      	orrs	r3, r2
 800bea2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	697a      	ldr	r2, [r7, #20]
 800bea8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	68fa      	ldr	r2, [r7, #12]
 800beae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	685a      	ldr	r2, [r3, #4]
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	693a      	ldr	r2, [r7, #16]
 800bebc:	621a      	str	r2, [r3, #32]
}
 800bebe:	bf00      	nop
 800bec0:	371c      	adds	r7, #28
 800bec2:	46bd      	mov	sp, r7
 800bec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec8:	4770      	bx	lr
 800beca:	bf00      	nop
 800becc:	40010000 	.word	0x40010000

0800bed0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b087      	sub	sp, #28
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	60f8      	str	r0, [r7, #12]
 800bed8:	60b9      	str	r1, [r7, #8]
 800beda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	6a1b      	ldr	r3, [r3, #32]
 800bee0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	6a1b      	ldr	r3, [r3, #32]
 800bee6:	f023 0201 	bic.w	r2, r3, #1
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	699b      	ldr	r3, [r3, #24]
 800bef2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800befa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	011b      	lsls	r3, r3, #4
 800bf00:	693a      	ldr	r2, [r7, #16]
 800bf02:	4313      	orrs	r3, r2
 800bf04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	f023 030a 	bic.w	r3, r3, #10
 800bf0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bf0e:	697a      	ldr	r2, [r7, #20]
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	4313      	orrs	r3, r2
 800bf14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	693a      	ldr	r2, [r7, #16]
 800bf1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	697a      	ldr	r2, [r7, #20]
 800bf20:	621a      	str	r2, [r3, #32]
}
 800bf22:	bf00      	nop
 800bf24:	371c      	adds	r7, #28
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr

0800bf2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf2e:	b480      	push	{r7}
 800bf30:	b087      	sub	sp, #28
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	60f8      	str	r0, [r7, #12]
 800bf36:	60b9      	str	r1, [r7, #8]
 800bf38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	6a1b      	ldr	r3, [r3, #32]
 800bf3e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	6a1b      	ldr	r3, [r3, #32]
 800bf44:	f023 0210 	bic.w	r2, r3, #16
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	699b      	ldr	r3, [r3, #24]
 800bf50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bf58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	031b      	lsls	r3, r3, #12
 800bf5e:	693a      	ldr	r2, [r7, #16]
 800bf60:	4313      	orrs	r3, r2
 800bf62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bf6a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	011b      	lsls	r3, r3, #4
 800bf70:	697a      	ldr	r2, [r7, #20]
 800bf72:	4313      	orrs	r3, r2
 800bf74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	693a      	ldr	r2, [r7, #16]
 800bf7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	697a      	ldr	r2, [r7, #20]
 800bf80:	621a      	str	r2, [r3, #32]
}
 800bf82:	bf00      	nop
 800bf84:	371c      	adds	r7, #28
 800bf86:	46bd      	mov	sp, r7
 800bf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8c:	4770      	bx	lr

0800bf8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bf8e:	b480      	push	{r7}
 800bf90:	b085      	sub	sp, #20
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	6078      	str	r0, [r7, #4]
 800bf96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	689b      	ldr	r3, [r3, #8]
 800bf9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bfa4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bfa6:	683a      	ldr	r2, [r7, #0]
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	4313      	orrs	r3, r2
 800bfac:	f043 0307 	orr.w	r3, r3, #7
 800bfb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	68fa      	ldr	r2, [r7, #12]
 800bfb6:	609a      	str	r2, [r3, #8]
}
 800bfb8:	bf00      	nop
 800bfba:	3714      	adds	r7, #20
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc2:	4770      	bx	lr

0800bfc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b087      	sub	sp, #28
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	60f8      	str	r0, [r7, #12]
 800bfcc:	60b9      	str	r1, [r7, #8]
 800bfce:	607a      	str	r2, [r7, #4]
 800bfd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	689b      	ldr	r3, [r3, #8]
 800bfd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bfde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	021a      	lsls	r2, r3, #8
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	431a      	orrs	r2, r3
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	4313      	orrs	r3, r2
 800bfec:	697a      	ldr	r2, [r7, #20]
 800bfee:	4313      	orrs	r3, r2
 800bff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	697a      	ldr	r2, [r7, #20]
 800bff6:	609a      	str	r2, [r3, #8]
}
 800bff8:	bf00      	nop
 800bffa:	371c      	adds	r7, #28
 800bffc:	46bd      	mov	sp, r7
 800bffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c002:	4770      	bx	lr

0800c004 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c004:	b480      	push	{r7}
 800c006:	b087      	sub	sp, #28
 800c008:	af00      	add	r7, sp, #0
 800c00a:	60f8      	str	r0, [r7, #12]
 800c00c:	60b9      	str	r1, [r7, #8]
 800c00e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	f003 031f 	and.w	r3, r3, #31
 800c016:	2201      	movs	r2, #1
 800c018:	fa02 f303 	lsl.w	r3, r2, r3
 800c01c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	6a1a      	ldr	r2, [r3, #32]
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	43db      	mvns	r3, r3
 800c026:	401a      	ands	r2, r3
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	6a1a      	ldr	r2, [r3, #32]
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	f003 031f 	and.w	r3, r3, #31
 800c036:	6879      	ldr	r1, [r7, #4]
 800c038:	fa01 f303 	lsl.w	r3, r1, r3
 800c03c:	431a      	orrs	r2, r3
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	621a      	str	r2, [r3, #32]
}
 800c042:	bf00      	nop
 800c044:	371c      	adds	r7, #28
 800c046:	46bd      	mov	sp, r7
 800c048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04c:	4770      	bx	lr
	...

0800c050 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c050:	b480      	push	{r7}
 800c052:	b085      	sub	sp, #20
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c060:	2b01      	cmp	r3, #1
 800c062:	d101      	bne.n	800c068 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c064:	2302      	movs	r3, #2
 800c066:	e050      	b.n	800c10a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2201      	movs	r2, #1
 800c06c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2202      	movs	r2, #2
 800c074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	689b      	ldr	r3, [r3, #8]
 800c086:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c08e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	68fa      	ldr	r2, [r7, #12]
 800c096:	4313      	orrs	r3, r2
 800c098:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	68fa      	ldr	r2, [r7, #12]
 800c0a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	4a1c      	ldr	r2, [pc, #112]	@ (800c118 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c0a8:	4293      	cmp	r3, r2
 800c0aa:	d018      	beq.n	800c0de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0b4:	d013      	beq.n	800c0de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	4a18      	ldr	r2, [pc, #96]	@ (800c11c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	d00e      	beq.n	800c0de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	4a16      	ldr	r2, [pc, #88]	@ (800c120 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	d009      	beq.n	800c0de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	4a15      	ldr	r2, [pc, #84]	@ (800c124 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	d004      	beq.n	800c0de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	4a13      	ldr	r2, [pc, #76]	@ (800c128 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	d10c      	bne.n	800c0f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c0e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	685b      	ldr	r3, [r3, #4]
 800c0ea:	68ba      	ldr	r2, [r7, #8]
 800c0ec:	4313      	orrs	r3, r2
 800c0ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	68ba      	ldr	r2, [r7, #8]
 800c0f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2200      	movs	r2, #0
 800c104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c108:	2300      	movs	r3, #0
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3714      	adds	r7, #20
 800c10e:	46bd      	mov	sp, r7
 800c110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c114:	4770      	bx	lr
 800c116:	bf00      	nop
 800c118:	40010000 	.word	0x40010000
 800c11c:	40000400 	.word	0x40000400
 800c120:	40000800 	.word	0x40000800
 800c124:	40000c00 	.word	0x40000c00
 800c128:	40014000 	.word	0x40014000

0800c12c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c12c:	b480      	push	{r7}
 800c12e:	b083      	sub	sp, #12
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c134:	bf00      	nop
 800c136:	370c      	adds	r7, #12
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr

0800c140 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c140:	b480      	push	{r7}
 800c142:	b083      	sub	sp, #12
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c148:	bf00      	nop
 800c14a:	370c      	adds	r7, #12
 800c14c:	46bd      	mov	sp, r7
 800c14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c152:	4770      	bx	lr

0800c154 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b082      	sub	sp, #8
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d101      	bne.n	800c166 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c162:	2301      	movs	r3, #1
 800c164:	e042      	b.n	800c1ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c16c:	b2db      	uxtb	r3, r3
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d106      	bne.n	800c180 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2200      	movs	r2, #0
 800c176:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f7fc f8a4 	bl	80082c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2224      	movs	r2, #36	@ 0x24
 800c184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	68da      	ldr	r2, [r3, #12]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c196:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f000 f973 	bl	800c484 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	691a      	ldr	r2, [r3, #16]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c1ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	695a      	ldr	r2, [r3, #20]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c1bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	68da      	ldr	r2, [r3, #12]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c1cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2220      	movs	r2, #32
 800c1d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2220      	movs	r2, #32
 800c1e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c1ea:	2300      	movs	r3, #0
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3708      	adds	r7, #8
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}

0800c1f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b08a      	sub	sp, #40	@ 0x28
 800c1f8:	af02      	add	r7, sp, #8
 800c1fa:	60f8      	str	r0, [r7, #12]
 800c1fc:	60b9      	str	r1, [r7, #8]
 800c1fe:	603b      	str	r3, [r7, #0]
 800c200:	4613      	mov	r3, r2
 800c202:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c204:	2300      	movs	r3, #0
 800c206:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c20e:	b2db      	uxtb	r3, r3
 800c210:	2b20      	cmp	r3, #32
 800c212:	d175      	bne.n	800c300 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c214:	68bb      	ldr	r3, [r7, #8]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d002      	beq.n	800c220 <HAL_UART_Transmit+0x2c>
 800c21a:	88fb      	ldrh	r3, [r7, #6]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d101      	bne.n	800c224 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c220:	2301      	movs	r3, #1
 800c222:	e06e      	b.n	800c302 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2200      	movs	r2, #0
 800c228:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2221      	movs	r2, #33	@ 0x21
 800c22e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c232:	f7fc fa6d 	bl	8008710 <HAL_GetTick>
 800c236:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	88fa      	ldrh	r2, [r7, #6]
 800c23c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	88fa      	ldrh	r2, [r7, #6]
 800c242:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	689b      	ldr	r3, [r3, #8]
 800c248:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c24c:	d108      	bne.n	800c260 <HAL_UART_Transmit+0x6c>
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	691b      	ldr	r3, [r3, #16]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d104      	bne.n	800c260 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c256:	2300      	movs	r3, #0
 800c258:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	61bb      	str	r3, [r7, #24]
 800c25e:	e003      	b.n	800c268 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c264:	2300      	movs	r3, #0
 800c266:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c268:	e02e      	b.n	800c2c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	9300      	str	r3, [sp, #0]
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	2200      	movs	r2, #0
 800c272:	2180      	movs	r1, #128	@ 0x80
 800c274:	68f8      	ldr	r0, [r7, #12]
 800c276:	f000 f848 	bl	800c30a <UART_WaitOnFlagUntilTimeout>
 800c27a:	4603      	mov	r3, r0
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d005      	beq.n	800c28c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	2220      	movs	r2, #32
 800c284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800c288:	2303      	movs	r3, #3
 800c28a:	e03a      	b.n	800c302 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800c28c:	69fb      	ldr	r3, [r7, #28]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d10b      	bne.n	800c2aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c292:	69bb      	ldr	r3, [r7, #24]
 800c294:	881b      	ldrh	r3, [r3, #0]
 800c296:	461a      	mov	r2, r3
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c2a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c2a2:	69bb      	ldr	r3, [r7, #24]
 800c2a4:	3302      	adds	r3, #2
 800c2a6:	61bb      	str	r3, [r7, #24]
 800c2a8:	e007      	b.n	800c2ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c2aa:	69fb      	ldr	r3, [r7, #28]
 800c2ac:	781a      	ldrb	r2, [r3, #0]
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c2b4:	69fb      	ldr	r3, [r7, #28]
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c2be:	b29b      	uxth	r3, r3
 800c2c0:	3b01      	subs	r3, #1
 800c2c2:	b29a      	uxth	r2, r3
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c2cc:	b29b      	uxth	r3, r3
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d1cb      	bne.n	800c26a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	9300      	str	r3, [sp, #0]
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	2200      	movs	r2, #0
 800c2da:	2140      	movs	r1, #64	@ 0x40
 800c2dc:	68f8      	ldr	r0, [r7, #12]
 800c2de:	f000 f814 	bl	800c30a <UART_WaitOnFlagUntilTimeout>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d005      	beq.n	800c2f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2220      	movs	r2, #32
 800c2ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800c2f0:	2303      	movs	r3, #3
 800c2f2:	e006      	b.n	800c302 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2220      	movs	r2, #32
 800c2f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	e000      	b.n	800c302 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800c300:	2302      	movs	r3, #2
  }
}
 800c302:	4618      	mov	r0, r3
 800c304:	3720      	adds	r7, #32
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}

0800c30a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c30a:	b580      	push	{r7, lr}
 800c30c:	b086      	sub	sp, #24
 800c30e:	af00      	add	r7, sp, #0
 800c310:	60f8      	str	r0, [r7, #12]
 800c312:	60b9      	str	r1, [r7, #8]
 800c314:	603b      	str	r3, [r7, #0]
 800c316:	4613      	mov	r3, r2
 800c318:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c31a:	e03b      	b.n	800c394 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c31c:	6a3b      	ldr	r3, [r7, #32]
 800c31e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c322:	d037      	beq.n	800c394 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c324:	f7fc f9f4 	bl	8008710 <HAL_GetTick>
 800c328:	4602      	mov	r2, r0
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	1ad3      	subs	r3, r2, r3
 800c32e:	6a3a      	ldr	r2, [r7, #32]
 800c330:	429a      	cmp	r2, r3
 800c332:	d302      	bcc.n	800c33a <UART_WaitOnFlagUntilTimeout+0x30>
 800c334:	6a3b      	ldr	r3, [r7, #32]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d101      	bne.n	800c33e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c33a:	2303      	movs	r3, #3
 800c33c:	e03a      	b.n	800c3b4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	68db      	ldr	r3, [r3, #12]
 800c344:	f003 0304 	and.w	r3, r3, #4
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d023      	beq.n	800c394 <UART_WaitOnFlagUntilTimeout+0x8a>
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	2b80      	cmp	r3, #128	@ 0x80
 800c350:	d020      	beq.n	800c394 <UART_WaitOnFlagUntilTimeout+0x8a>
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	2b40      	cmp	r3, #64	@ 0x40
 800c356:	d01d      	beq.n	800c394 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f003 0308 	and.w	r3, r3, #8
 800c362:	2b08      	cmp	r3, #8
 800c364:	d116      	bne.n	800c394 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800c366:	2300      	movs	r3, #0
 800c368:	617b      	str	r3, [r7, #20]
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	617b      	str	r3, [r7, #20]
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	685b      	ldr	r3, [r3, #4]
 800c378:	617b      	str	r3, [r7, #20]
 800c37a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c37c:	68f8      	ldr	r0, [r7, #12]
 800c37e:	f000 f81d 	bl	800c3bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	2208      	movs	r2, #8
 800c386:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	2200      	movs	r2, #0
 800c38c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800c390:	2301      	movs	r3, #1
 800c392:	e00f      	b.n	800c3b4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	681a      	ldr	r2, [r3, #0]
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	4013      	ands	r3, r2
 800c39e:	68ba      	ldr	r2, [r7, #8]
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	bf0c      	ite	eq
 800c3a4:	2301      	moveq	r3, #1
 800c3a6:	2300      	movne	r3, #0
 800c3a8:	b2db      	uxtb	r3, r3
 800c3aa:	461a      	mov	r2, r3
 800c3ac:	79fb      	ldrb	r3, [r7, #7]
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	d0b4      	beq.n	800c31c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c3b2:	2300      	movs	r3, #0
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3718      	adds	r7, #24
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}

0800c3bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b095      	sub	sp, #84	@ 0x54
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	330c      	adds	r3, #12
 800c3ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3ce:	e853 3f00 	ldrex	r3, [r3]
 800c3d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c3d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c3da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	330c      	adds	r3, #12
 800c3e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c3e4:	643a      	str	r2, [r7, #64]	@ 0x40
 800c3e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c3ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c3ec:	e841 2300 	strex	r3, r2, [r1]
 800c3f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c3f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d1e5      	bne.n	800c3c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	3314      	adds	r3, #20
 800c3fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c400:	6a3b      	ldr	r3, [r7, #32]
 800c402:	e853 3f00 	ldrex	r3, [r3]
 800c406:	61fb      	str	r3, [r7, #28]
   return(result);
 800c408:	69fb      	ldr	r3, [r7, #28]
 800c40a:	f023 0301 	bic.w	r3, r3, #1
 800c40e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	3314      	adds	r3, #20
 800c416:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c418:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c41a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c41c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c41e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c420:	e841 2300 	strex	r3, r2, [r1]
 800c424:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d1e5      	bne.n	800c3f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c430:	2b01      	cmp	r3, #1
 800c432:	d119      	bne.n	800c468 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	330c      	adds	r3, #12
 800c43a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	e853 3f00 	ldrex	r3, [r3]
 800c442:	60bb      	str	r3, [r7, #8]
   return(result);
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	f023 0310 	bic.w	r3, r3, #16
 800c44a:	647b      	str	r3, [r7, #68]	@ 0x44
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	330c      	adds	r3, #12
 800c452:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c454:	61ba      	str	r2, [r7, #24]
 800c456:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c458:	6979      	ldr	r1, [r7, #20]
 800c45a:	69ba      	ldr	r2, [r7, #24]
 800c45c:	e841 2300 	strex	r3, r2, [r1]
 800c460:	613b      	str	r3, [r7, #16]
   return(result);
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d1e5      	bne.n	800c434 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2220      	movs	r2, #32
 800c46c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2200      	movs	r2, #0
 800c474:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800c476:	bf00      	nop
 800c478:	3754      	adds	r7, #84	@ 0x54
 800c47a:	46bd      	mov	sp, r7
 800c47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c480:	4770      	bx	lr
	...

0800c484 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c488:	b0c0      	sub	sp, #256	@ 0x100
 800c48a:	af00      	add	r7, sp, #0
 800c48c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	691b      	ldr	r3, [r3, #16]
 800c498:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c49c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c4a0:	68d9      	ldr	r1, [r3, #12]
 800c4a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c4a6:	681a      	ldr	r2, [r3, #0]
 800c4a8:	ea40 0301 	orr.w	r3, r0, r1
 800c4ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c4ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c4b2:	689a      	ldr	r2, [r3, #8]
 800c4b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c4b8:	691b      	ldr	r3, [r3, #16]
 800c4ba:	431a      	orrs	r2, r3
 800c4bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c4c0:	695b      	ldr	r3, [r3, #20]
 800c4c2:	431a      	orrs	r2, r3
 800c4c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c4c8:	69db      	ldr	r3, [r3, #28]
 800c4ca:	4313      	orrs	r3, r2
 800c4cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c4d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	68db      	ldr	r3, [r3, #12]
 800c4d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800c4dc:	f021 010c 	bic.w	r1, r1, #12
 800c4e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c4e4:	681a      	ldr	r2, [r3, #0]
 800c4e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c4ea:	430b      	orrs	r3, r1
 800c4ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c4ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	695b      	ldr	r3, [r3, #20]
 800c4f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800c4fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c4fe:	6999      	ldr	r1, [r3, #24]
 800c500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c504:	681a      	ldr	r2, [r3, #0]
 800c506:	ea40 0301 	orr.w	r3, r0, r1
 800c50a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c50c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c510:	681a      	ldr	r2, [r3, #0]
 800c512:	4b8f      	ldr	r3, [pc, #572]	@ (800c750 <UART_SetConfig+0x2cc>)
 800c514:	429a      	cmp	r2, r3
 800c516:	d005      	beq.n	800c524 <UART_SetConfig+0xa0>
 800c518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c51c:	681a      	ldr	r2, [r3, #0]
 800c51e:	4b8d      	ldr	r3, [pc, #564]	@ (800c754 <UART_SetConfig+0x2d0>)
 800c520:	429a      	cmp	r2, r3
 800c522:	d104      	bne.n	800c52e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c524:	f7fe fba0 	bl	800ac68 <HAL_RCC_GetPCLK2Freq>
 800c528:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800c52c:	e003      	b.n	800c536 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c52e:	f7fe fb87 	bl	800ac40 <HAL_RCC_GetPCLK1Freq>
 800c532:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c53a:	69db      	ldr	r3, [r3, #28]
 800c53c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c540:	f040 810c 	bne.w	800c75c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c544:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c548:	2200      	movs	r2, #0
 800c54a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c54e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800c552:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800c556:	4622      	mov	r2, r4
 800c558:	462b      	mov	r3, r5
 800c55a:	1891      	adds	r1, r2, r2
 800c55c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800c55e:	415b      	adcs	r3, r3
 800c560:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c562:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c566:	4621      	mov	r1, r4
 800c568:	eb12 0801 	adds.w	r8, r2, r1
 800c56c:	4629      	mov	r1, r5
 800c56e:	eb43 0901 	adc.w	r9, r3, r1
 800c572:	f04f 0200 	mov.w	r2, #0
 800c576:	f04f 0300 	mov.w	r3, #0
 800c57a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c57e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c582:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c586:	4690      	mov	r8, r2
 800c588:	4699      	mov	r9, r3
 800c58a:	4623      	mov	r3, r4
 800c58c:	eb18 0303 	adds.w	r3, r8, r3
 800c590:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c594:	462b      	mov	r3, r5
 800c596:	eb49 0303 	adc.w	r3, r9, r3
 800c59a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c59e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c5a2:	685b      	ldr	r3, [r3, #4]
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c5aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800c5ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c5b2:	460b      	mov	r3, r1
 800c5b4:	18db      	adds	r3, r3, r3
 800c5b6:	653b      	str	r3, [r7, #80]	@ 0x50
 800c5b8:	4613      	mov	r3, r2
 800c5ba:	eb42 0303 	adc.w	r3, r2, r3
 800c5be:	657b      	str	r3, [r7, #84]	@ 0x54
 800c5c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c5c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800c5c8:	f7f4 faf6 	bl	8000bb8 <__aeabi_uldivmod>
 800c5cc:	4602      	mov	r2, r0
 800c5ce:	460b      	mov	r3, r1
 800c5d0:	4b61      	ldr	r3, [pc, #388]	@ (800c758 <UART_SetConfig+0x2d4>)
 800c5d2:	fba3 2302 	umull	r2, r3, r3, r2
 800c5d6:	095b      	lsrs	r3, r3, #5
 800c5d8:	011c      	lsls	r4, r3, #4
 800c5da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c5de:	2200      	movs	r2, #0
 800c5e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c5e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800c5e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800c5ec:	4642      	mov	r2, r8
 800c5ee:	464b      	mov	r3, r9
 800c5f0:	1891      	adds	r1, r2, r2
 800c5f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c5f4:	415b      	adcs	r3, r3
 800c5f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c5f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c5fc:	4641      	mov	r1, r8
 800c5fe:	eb12 0a01 	adds.w	sl, r2, r1
 800c602:	4649      	mov	r1, r9
 800c604:	eb43 0b01 	adc.w	fp, r3, r1
 800c608:	f04f 0200 	mov.w	r2, #0
 800c60c:	f04f 0300 	mov.w	r3, #0
 800c610:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c614:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c618:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c61c:	4692      	mov	sl, r2
 800c61e:	469b      	mov	fp, r3
 800c620:	4643      	mov	r3, r8
 800c622:	eb1a 0303 	adds.w	r3, sl, r3
 800c626:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c62a:	464b      	mov	r3, r9
 800c62c:	eb4b 0303 	adc.w	r3, fp, r3
 800c630:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c638:	685b      	ldr	r3, [r3, #4]
 800c63a:	2200      	movs	r2, #0
 800c63c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c640:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c644:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c648:	460b      	mov	r3, r1
 800c64a:	18db      	adds	r3, r3, r3
 800c64c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c64e:	4613      	mov	r3, r2
 800c650:	eb42 0303 	adc.w	r3, r2, r3
 800c654:	647b      	str	r3, [r7, #68]	@ 0x44
 800c656:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c65a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800c65e:	f7f4 faab 	bl	8000bb8 <__aeabi_uldivmod>
 800c662:	4602      	mov	r2, r0
 800c664:	460b      	mov	r3, r1
 800c666:	4611      	mov	r1, r2
 800c668:	4b3b      	ldr	r3, [pc, #236]	@ (800c758 <UART_SetConfig+0x2d4>)
 800c66a:	fba3 2301 	umull	r2, r3, r3, r1
 800c66e:	095b      	lsrs	r3, r3, #5
 800c670:	2264      	movs	r2, #100	@ 0x64
 800c672:	fb02 f303 	mul.w	r3, r2, r3
 800c676:	1acb      	subs	r3, r1, r3
 800c678:	00db      	lsls	r3, r3, #3
 800c67a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800c67e:	4b36      	ldr	r3, [pc, #216]	@ (800c758 <UART_SetConfig+0x2d4>)
 800c680:	fba3 2302 	umull	r2, r3, r3, r2
 800c684:	095b      	lsrs	r3, r3, #5
 800c686:	005b      	lsls	r3, r3, #1
 800c688:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800c68c:	441c      	add	r4, r3
 800c68e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c692:	2200      	movs	r2, #0
 800c694:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c698:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800c69c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800c6a0:	4642      	mov	r2, r8
 800c6a2:	464b      	mov	r3, r9
 800c6a4:	1891      	adds	r1, r2, r2
 800c6a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c6a8:	415b      	adcs	r3, r3
 800c6aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c6ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c6b0:	4641      	mov	r1, r8
 800c6b2:	1851      	adds	r1, r2, r1
 800c6b4:	6339      	str	r1, [r7, #48]	@ 0x30
 800c6b6:	4649      	mov	r1, r9
 800c6b8:	414b      	adcs	r3, r1
 800c6ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6bc:	f04f 0200 	mov.w	r2, #0
 800c6c0:	f04f 0300 	mov.w	r3, #0
 800c6c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800c6c8:	4659      	mov	r1, fp
 800c6ca:	00cb      	lsls	r3, r1, #3
 800c6cc:	4651      	mov	r1, sl
 800c6ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c6d2:	4651      	mov	r1, sl
 800c6d4:	00ca      	lsls	r2, r1, #3
 800c6d6:	4610      	mov	r0, r2
 800c6d8:	4619      	mov	r1, r3
 800c6da:	4603      	mov	r3, r0
 800c6dc:	4642      	mov	r2, r8
 800c6de:	189b      	adds	r3, r3, r2
 800c6e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c6e4:	464b      	mov	r3, r9
 800c6e6:	460a      	mov	r2, r1
 800c6e8:	eb42 0303 	adc.w	r3, r2, r3
 800c6ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c6f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c6f4:	685b      	ldr	r3, [r3, #4]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c6fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c700:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c704:	460b      	mov	r3, r1
 800c706:	18db      	adds	r3, r3, r3
 800c708:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c70a:	4613      	mov	r3, r2
 800c70c:	eb42 0303 	adc.w	r3, r2, r3
 800c710:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c712:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c716:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800c71a:	f7f4 fa4d 	bl	8000bb8 <__aeabi_uldivmod>
 800c71e:	4602      	mov	r2, r0
 800c720:	460b      	mov	r3, r1
 800c722:	4b0d      	ldr	r3, [pc, #52]	@ (800c758 <UART_SetConfig+0x2d4>)
 800c724:	fba3 1302 	umull	r1, r3, r3, r2
 800c728:	095b      	lsrs	r3, r3, #5
 800c72a:	2164      	movs	r1, #100	@ 0x64
 800c72c:	fb01 f303 	mul.w	r3, r1, r3
 800c730:	1ad3      	subs	r3, r2, r3
 800c732:	00db      	lsls	r3, r3, #3
 800c734:	3332      	adds	r3, #50	@ 0x32
 800c736:	4a08      	ldr	r2, [pc, #32]	@ (800c758 <UART_SetConfig+0x2d4>)
 800c738:	fba2 2303 	umull	r2, r3, r2, r3
 800c73c:	095b      	lsrs	r3, r3, #5
 800c73e:	f003 0207 	and.w	r2, r3, #7
 800c742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	4422      	add	r2, r4
 800c74a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c74c:	e106      	b.n	800c95c <UART_SetConfig+0x4d8>
 800c74e:	bf00      	nop
 800c750:	40011000 	.word	0x40011000
 800c754:	40011400 	.word	0x40011400
 800c758:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c75c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c760:	2200      	movs	r2, #0
 800c762:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c766:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c76a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800c76e:	4642      	mov	r2, r8
 800c770:	464b      	mov	r3, r9
 800c772:	1891      	adds	r1, r2, r2
 800c774:	6239      	str	r1, [r7, #32]
 800c776:	415b      	adcs	r3, r3
 800c778:	627b      	str	r3, [r7, #36]	@ 0x24
 800c77a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c77e:	4641      	mov	r1, r8
 800c780:	1854      	adds	r4, r2, r1
 800c782:	4649      	mov	r1, r9
 800c784:	eb43 0501 	adc.w	r5, r3, r1
 800c788:	f04f 0200 	mov.w	r2, #0
 800c78c:	f04f 0300 	mov.w	r3, #0
 800c790:	00eb      	lsls	r3, r5, #3
 800c792:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c796:	00e2      	lsls	r2, r4, #3
 800c798:	4614      	mov	r4, r2
 800c79a:	461d      	mov	r5, r3
 800c79c:	4643      	mov	r3, r8
 800c79e:	18e3      	adds	r3, r4, r3
 800c7a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c7a4:	464b      	mov	r3, r9
 800c7a6:	eb45 0303 	adc.w	r3, r5, r3
 800c7aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c7ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c7b2:	685b      	ldr	r3, [r3, #4]
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c7ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c7be:	f04f 0200 	mov.w	r2, #0
 800c7c2:	f04f 0300 	mov.w	r3, #0
 800c7c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c7ca:	4629      	mov	r1, r5
 800c7cc:	008b      	lsls	r3, r1, #2
 800c7ce:	4621      	mov	r1, r4
 800c7d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c7d4:	4621      	mov	r1, r4
 800c7d6:	008a      	lsls	r2, r1, #2
 800c7d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c7dc:	f7f4 f9ec 	bl	8000bb8 <__aeabi_uldivmod>
 800c7e0:	4602      	mov	r2, r0
 800c7e2:	460b      	mov	r3, r1
 800c7e4:	4b60      	ldr	r3, [pc, #384]	@ (800c968 <UART_SetConfig+0x4e4>)
 800c7e6:	fba3 2302 	umull	r2, r3, r3, r2
 800c7ea:	095b      	lsrs	r3, r3, #5
 800c7ec:	011c      	lsls	r4, r3, #4
 800c7ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c7f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c7fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800c800:	4642      	mov	r2, r8
 800c802:	464b      	mov	r3, r9
 800c804:	1891      	adds	r1, r2, r2
 800c806:	61b9      	str	r1, [r7, #24]
 800c808:	415b      	adcs	r3, r3
 800c80a:	61fb      	str	r3, [r7, #28]
 800c80c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c810:	4641      	mov	r1, r8
 800c812:	1851      	adds	r1, r2, r1
 800c814:	6139      	str	r1, [r7, #16]
 800c816:	4649      	mov	r1, r9
 800c818:	414b      	adcs	r3, r1
 800c81a:	617b      	str	r3, [r7, #20]
 800c81c:	f04f 0200 	mov.w	r2, #0
 800c820:	f04f 0300 	mov.w	r3, #0
 800c824:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c828:	4659      	mov	r1, fp
 800c82a:	00cb      	lsls	r3, r1, #3
 800c82c:	4651      	mov	r1, sl
 800c82e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c832:	4651      	mov	r1, sl
 800c834:	00ca      	lsls	r2, r1, #3
 800c836:	4610      	mov	r0, r2
 800c838:	4619      	mov	r1, r3
 800c83a:	4603      	mov	r3, r0
 800c83c:	4642      	mov	r2, r8
 800c83e:	189b      	adds	r3, r3, r2
 800c840:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c844:	464b      	mov	r3, r9
 800c846:	460a      	mov	r2, r1
 800c848:	eb42 0303 	adc.w	r3, r2, r3
 800c84c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c854:	685b      	ldr	r3, [r3, #4]
 800c856:	2200      	movs	r2, #0
 800c858:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c85a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c85c:	f04f 0200 	mov.w	r2, #0
 800c860:	f04f 0300 	mov.w	r3, #0
 800c864:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800c868:	4649      	mov	r1, r9
 800c86a:	008b      	lsls	r3, r1, #2
 800c86c:	4641      	mov	r1, r8
 800c86e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c872:	4641      	mov	r1, r8
 800c874:	008a      	lsls	r2, r1, #2
 800c876:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800c87a:	f7f4 f99d 	bl	8000bb8 <__aeabi_uldivmod>
 800c87e:	4602      	mov	r2, r0
 800c880:	460b      	mov	r3, r1
 800c882:	4611      	mov	r1, r2
 800c884:	4b38      	ldr	r3, [pc, #224]	@ (800c968 <UART_SetConfig+0x4e4>)
 800c886:	fba3 2301 	umull	r2, r3, r3, r1
 800c88a:	095b      	lsrs	r3, r3, #5
 800c88c:	2264      	movs	r2, #100	@ 0x64
 800c88e:	fb02 f303 	mul.w	r3, r2, r3
 800c892:	1acb      	subs	r3, r1, r3
 800c894:	011b      	lsls	r3, r3, #4
 800c896:	3332      	adds	r3, #50	@ 0x32
 800c898:	4a33      	ldr	r2, [pc, #204]	@ (800c968 <UART_SetConfig+0x4e4>)
 800c89a:	fba2 2303 	umull	r2, r3, r2, r3
 800c89e:	095b      	lsrs	r3, r3, #5
 800c8a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c8a4:	441c      	add	r4, r3
 800c8a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	673b      	str	r3, [r7, #112]	@ 0x70
 800c8ae:	677a      	str	r2, [r7, #116]	@ 0x74
 800c8b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800c8b4:	4642      	mov	r2, r8
 800c8b6:	464b      	mov	r3, r9
 800c8b8:	1891      	adds	r1, r2, r2
 800c8ba:	60b9      	str	r1, [r7, #8]
 800c8bc:	415b      	adcs	r3, r3
 800c8be:	60fb      	str	r3, [r7, #12]
 800c8c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c8c4:	4641      	mov	r1, r8
 800c8c6:	1851      	adds	r1, r2, r1
 800c8c8:	6039      	str	r1, [r7, #0]
 800c8ca:	4649      	mov	r1, r9
 800c8cc:	414b      	adcs	r3, r1
 800c8ce:	607b      	str	r3, [r7, #4]
 800c8d0:	f04f 0200 	mov.w	r2, #0
 800c8d4:	f04f 0300 	mov.w	r3, #0
 800c8d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c8dc:	4659      	mov	r1, fp
 800c8de:	00cb      	lsls	r3, r1, #3
 800c8e0:	4651      	mov	r1, sl
 800c8e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c8e6:	4651      	mov	r1, sl
 800c8e8:	00ca      	lsls	r2, r1, #3
 800c8ea:	4610      	mov	r0, r2
 800c8ec:	4619      	mov	r1, r3
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	4642      	mov	r2, r8
 800c8f2:	189b      	adds	r3, r3, r2
 800c8f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c8f6:	464b      	mov	r3, r9
 800c8f8:	460a      	mov	r2, r1
 800c8fa:	eb42 0303 	adc.w	r3, r2, r3
 800c8fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c904:	685b      	ldr	r3, [r3, #4]
 800c906:	2200      	movs	r2, #0
 800c908:	663b      	str	r3, [r7, #96]	@ 0x60
 800c90a:	667a      	str	r2, [r7, #100]	@ 0x64
 800c90c:	f04f 0200 	mov.w	r2, #0
 800c910:	f04f 0300 	mov.w	r3, #0
 800c914:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800c918:	4649      	mov	r1, r9
 800c91a:	008b      	lsls	r3, r1, #2
 800c91c:	4641      	mov	r1, r8
 800c91e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c922:	4641      	mov	r1, r8
 800c924:	008a      	lsls	r2, r1, #2
 800c926:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c92a:	f7f4 f945 	bl	8000bb8 <__aeabi_uldivmod>
 800c92e:	4602      	mov	r2, r0
 800c930:	460b      	mov	r3, r1
 800c932:	4b0d      	ldr	r3, [pc, #52]	@ (800c968 <UART_SetConfig+0x4e4>)
 800c934:	fba3 1302 	umull	r1, r3, r3, r2
 800c938:	095b      	lsrs	r3, r3, #5
 800c93a:	2164      	movs	r1, #100	@ 0x64
 800c93c:	fb01 f303 	mul.w	r3, r1, r3
 800c940:	1ad3      	subs	r3, r2, r3
 800c942:	011b      	lsls	r3, r3, #4
 800c944:	3332      	adds	r3, #50	@ 0x32
 800c946:	4a08      	ldr	r2, [pc, #32]	@ (800c968 <UART_SetConfig+0x4e4>)
 800c948:	fba2 2303 	umull	r2, r3, r2, r3
 800c94c:	095b      	lsrs	r3, r3, #5
 800c94e:	f003 020f 	and.w	r2, r3, #15
 800c952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	4422      	add	r2, r4
 800c95a:	609a      	str	r2, [r3, #8]
}
 800c95c:	bf00      	nop
 800c95e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800c962:	46bd      	mov	sp, r7
 800c964:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c968:	51eb851f 	.word	0x51eb851f

0800c96c <_ZdlPvj>:
 800c96c:	f000 b811 	b.w	800c992 <_ZdlPv>

0800c970 <_Znwj>:
 800c970:	2801      	cmp	r0, #1
 800c972:	bf38      	it	cc
 800c974:	2001      	movcc	r0, #1
 800c976:	b510      	push	{r4, lr}
 800c978:	4604      	mov	r4, r0
 800c97a:	4620      	mov	r0, r4
 800c97c:	f000 f81c 	bl	800c9b8 <malloc>
 800c980:	b100      	cbz	r0, 800c984 <_Znwj+0x14>
 800c982:	bd10      	pop	{r4, pc}
 800c984:	f000 f808 	bl	800c998 <_ZSt15get_new_handlerv>
 800c988:	b908      	cbnz	r0, 800c98e <_Znwj+0x1e>
 800c98a:	f000 f80d 	bl	800c9a8 <abort>
 800c98e:	4780      	blx	r0
 800c990:	e7f3      	b.n	800c97a <_Znwj+0xa>

0800c992 <_ZdlPv>:
 800c992:	f000 b819 	b.w	800c9c8 <free>
	...

0800c998 <_ZSt15get_new_handlerv>:
 800c998:	4b02      	ldr	r3, [pc, #8]	@ (800c9a4 <_ZSt15get_new_handlerv+0xc>)
 800c99a:	6818      	ldr	r0, [r3, #0]
 800c99c:	f3bf 8f5b 	dmb	ish
 800c9a0:	4770      	bx	lr
 800c9a2:	bf00      	nop
 800c9a4:	200004a0 	.word	0x200004a0

0800c9a8 <abort>:
 800c9a8:	b508      	push	{r3, lr}
 800c9aa:	2006      	movs	r0, #6
 800c9ac:	f000 fe70 	bl	800d690 <raise>
 800c9b0:	2001      	movs	r0, #1
 800c9b2:	f7fb fd5d 	bl	8008470 <_exit>
	...

0800c9b8 <malloc>:
 800c9b8:	4b02      	ldr	r3, [pc, #8]	@ (800c9c4 <malloc+0xc>)
 800c9ba:	4601      	mov	r1, r0
 800c9bc:	6818      	ldr	r0, [r3, #0]
 800c9be:	f000 b82d 	b.w	800ca1c <_malloc_r>
 800c9c2:	bf00      	nop
 800c9c4:	2000001c 	.word	0x2000001c

0800c9c8 <free>:
 800c9c8:	4b02      	ldr	r3, [pc, #8]	@ (800c9d4 <free+0xc>)
 800c9ca:	4601      	mov	r1, r0
 800c9cc:	6818      	ldr	r0, [r3, #0]
 800c9ce:	f001 bd57 	b.w	800e480 <_free_r>
 800c9d2:	bf00      	nop
 800c9d4:	2000001c 	.word	0x2000001c

0800c9d8 <sbrk_aligned>:
 800c9d8:	b570      	push	{r4, r5, r6, lr}
 800c9da:	4e0f      	ldr	r6, [pc, #60]	@ (800ca18 <sbrk_aligned+0x40>)
 800c9dc:	460c      	mov	r4, r1
 800c9de:	6831      	ldr	r1, [r6, #0]
 800c9e0:	4605      	mov	r5, r0
 800c9e2:	b911      	cbnz	r1, 800c9ea <sbrk_aligned+0x12>
 800c9e4:	f000 fea8 	bl	800d738 <_sbrk_r>
 800c9e8:	6030      	str	r0, [r6, #0]
 800c9ea:	4621      	mov	r1, r4
 800c9ec:	4628      	mov	r0, r5
 800c9ee:	f000 fea3 	bl	800d738 <_sbrk_r>
 800c9f2:	1c43      	adds	r3, r0, #1
 800c9f4:	d103      	bne.n	800c9fe <sbrk_aligned+0x26>
 800c9f6:	f04f 34ff 	mov.w	r4, #4294967295
 800c9fa:	4620      	mov	r0, r4
 800c9fc:	bd70      	pop	{r4, r5, r6, pc}
 800c9fe:	1cc4      	adds	r4, r0, #3
 800ca00:	f024 0403 	bic.w	r4, r4, #3
 800ca04:	42a0      	cmp	r0, r4
 800ca06:	d0f8      	beq.n	800c9fa <sbrk_aligned+0x22>
 800ca08:	1a21      	subs	r1, r4, r0
 800ca0a:	4628      	mov	r0, r5
 800ca0c:	f000 fe94 	bl	800d738 <_sbrk_r>
 800ca10:	3001      	adds	r0, #1
 800ca12:	d1f2      	bne.n	800c9fa <sbrk_aligned+0x22>
 800ca14:	e7ef      	b.n	800c9f6 <sbrk_aligned+0x1e>
 800ca16:	bf00      	nop
 800ca18:	200004a4 	.word	0x200004a4

0800ca1c <_malloc_r>:
 800ca1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca20:	1ccd      	adds	r5, r1, #3
 800ca22:	f025 0503 	bic.w	r5, r5, #3
 800ca26:	3508      	adds	r5, #8
 800ca28:	2d0c      	cmp	r5, #12
 800ca2a:	bf38      	it	cc
 800ca2c:	250c      	movcc	r5, #12
 800ca2e:	2d00      	cmp	r5, #0
 800ca30:	4606      	mov	r6, r0
 800ca32:	db01      	blt.n	800ca38 <_malloc_r+0x1c>
 800ca34:	42a9      	cmp	r1, r5
 800ca36:	d904      	bls.n	800ca42 <_malloc_r+0x26>
 800ca38:	230c      	movs	r3, #12
 800ca3a:	6033      	str	r3, [r6, #0]
 800ca3c:	2000      	movs	r0, #0
 800ca3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cb18 <_malloc_r+0xfc>
 800ca46:	f000 f869 	bl	800cb1c <__malloc_lock>
 800ca4a:	f8d8 3000 	ldr.w	r3, [r8]
 800ca4e:	461c      	mov	r4, r3
 800ca50:	bb44      	cbnz	r4, 800caa4 <_malloc_r+0x88>
 800ca52:	4629      	mov	r1, r5
 800ca54:	4630      	mov	r0, r6
 800ca56:	f7ff ffbf 	bl	800c9d8 <sbrk_aligned>
 800ca5a:	1c43      	adds	r3, r0, #1
 800ca5c:	4604      	mov	r4, r0
 800ca5e:	d158      	bne.n	800cb12 <_malloc_r+0xf6>
 800ca60:	f8d8 4000 	ldr.w	r4, [r8]
 800ca64:	4627      	mov	r7, r4
 800ca66:	2f00      	cmp	r7, #0
 800ca68:	d143      	bne.n	800caf2 <_malloc_r+0xd6>
 800ca6a:	2c00      	cmp	r4, #0
 800ca6c:	d04b      	beq.n	800cb06 <_malloc_r+0xea>
 800ca6e:	6823      	ldr	r3, [r4, #0]
 800ca70:	4639      	mov	r1, r7
 800ca72:	4630      	mov	r0, r6
 800ca74:	eb04 0903 	add.w	r9, r4, r3
 800ca78:	f000 fe5e 	bl	800d738 <_sbrk_r>
 800ca7c:	4581      	cmp	r9, r0
 800ca7e:	d142      	bne.n	800cb06 <_malloc_r+0xea>
 800ca80:	6821      	ldr	r1, [r4, #0]
 800ca82:	1a6d      	subs	r5, r5, r1
 800ca84:	4629      	mov	r1, r5
 800ca86:	4630      	mov	r0, r6
 800ca88:	f7ff ffa6 	bl	800c9d8 <sbrk_aligned>
 800ca8c:	3001      	adds	r0, #1
 800ca8e:	d03a      	beq.n	800cb06 <_malloc_r+0xea>
 800ca90:	6823      	ldr	r3, [r4, #0]
 800ca92:	442b      	add	r3, r5
 800ca94:	6023      	str	r3, [r4, #0]
 800ca96:	f8d8 3000 	ldr.w	r3, [r8]
 800ca9a:	685a      	ldr	r2, [r3, #4]
 800ca9c:	bb62      	cbnz	r2, 800caf8 <_malloc_r+0xdc>
 800ca9e:	f8c8 7000 	str.w	r7, [r8]
 800caa2:	e00f      	b.n	800cac4 <_malloc_r+0xa8>
 800caa4:	6822      	ldr	r2, [r4, #0]
 800caa6:	1b52      	subs	r2, r2, r5
 800caa8:	d420      	bmi.n	800caec <_malloc_r+0xd0>
 800caaa:	2a0b      	cmp	r2, #11
 800caac:	d917      	bls.n	800cade <_malloc_r+0xc2>
 800caae:	1961      	adds	r1, r4, r5
 800cab0:	42a3      	cmp	r3, r4
 800cab2:	6025      	str	r5, [r4, #0]
 800cab4:	bf18      	it	ne
 800cab6:	6059      	strne	r1, [r3, #4]
 800cab8:	6863      	ldr	r3, [r4, #4]
 800caba:	bf08      	it	eq
 800cabc:	f8c8 1000 	streq.w	r1, [r8]
 800cac0:	5162      	str	r2, [r4, r5]
 800cac2:	604b      	str	r3, [r1, #4]
 800cac4:	4630      	mov	r0, r6
 800cac6:	f000 f82f 	bl	800cb28 <__malloc_unlock>
 800caca:	f104 000b 	add.w	r0, r4, #11
 800cace:	1d23      	adds	r3, r4, #4
 800cad0:	f020 0007 	bic.w	r0, r0, #7
 800cad4:	1ac2      	subs	r2, r0, r3
 800cad6:	bf1c      	itt	ne
 800cad8:	1a1b      	subne	r3, r3, r0
 800cada:	50a3      	strne	r3, [r4, r2]
 800cadc:	e7af      	b.n	800ca3e <_malloc_r+0x22>
 800cade:	6862      	ldr	r2, [r4, #4]
 800cae0:	42a3      	cmp	r3, r4
 800cae2:	bf0c      	ite	eq
 800cae4:	f8c8 2000 	streq.w	r2, [r8]
 800cae8:	605a      	strne	r2, [r3, #4]
 800caea:	e7eb      	b.n	800cac4 <_malloc_r+0xa8>
 800caec:	4623      	mov	r3, r4
 800caee:	6864      	ldr	r4, [r4, #4]
 800caf0:	e7ae      	b.n	800ca50 <_malloc_r+0x34>
 800caf2:	463c      	mov	r4, r7
 800caf4:	687f      	ldr	r7, [r7, #4]
 800caf6:	e7b6      	b.n	800ca66 <_malloc_r+0x4a>
 800caf8:	461a      	mov	r2, r3
 800cafa:	685b      	ldr	r3, [r3, #4]
 800cafc:	42a3      	cmp	r3, r4
 800cafe:	d1fb      	bne.n	800caf8 <_malloc_r+0xdc>
 800cb00:	2300      	movs	r3, #0
 800cb02:	6053      	str	r3, [r2, #4]
 800cb04:	e7de      	b.n	800cac4 <_malloc_r+0xa8>
 800cb06:	230c      	movs	r3, #12
 800cb08:	6033      	str	r3, [r6, #0]
 800cb0a:	4630      	mov	r0, r6
 800cb0c:	f000 f80c 	bl	800cb28 <__malloc_unlock>
 800cb10:	e794      	b.n	800ca3c <_malloc_r+0x20>
 800cb12:	6005      	str	r5, [r0, #0]
 800cb14:	e7d6      	b.n	800cac4 <_malloc_r+0xa8>
 800cb16:	bf00      	nop
 800cb18:	200004a8 	.word	0x200004a8

0800cb1c <__malloc_lock>:
 800cb1c:	4801      	ldr	r0, [pc, #4]	@ (800cb24 <__malloc_lock+0x8>)
 800cb1e:	f000 be58 	b.w	800d7d2 <__retarget_lock_acquire_recursive>
 800cb22:	bf00      	nop
 800cb24:	200005ec 	.word	0x200005ec

0800cb28 <__malloc_unlock>:
 800cb28:	4801      	ldr	r0, [pc, #4]	@ (800cb30 <__malloc_unlock+0x8>)
 800cb2a:	f000 be53 	b.w	800d7d4 <__retarget_lock_release_recursive>
 800cb2e:	bf00      	nop
 800cb30:	200005ec 	.word	0x200005ec

0800cb34 <__cvt>:
 800cb34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb38:	ec57 6b10 	vmov	r6, r7, d0
 800cb3c:	2f00      	cmp	r7, #0
 800cb3e:	460c      	mov	r4, r1
 800cb40:	4619      	mov	r1, r3
 800cb42:	463b      	mov	r3, r7
 800cb44:	bfbb      	ittet	lt
 800cb46:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cb4a:	461f      	movlt	r7, r3
 800cb4c:	2300      	movge	r3, #0
 800cb4e:	232d      	movlt	r3, #45	@ 0x2d
 800cb50:	700b      	strb	r3, [r1, #0]
 800cb52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cb54:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cb58:	4691      	mov	r9, r2
 800cb5a:	f023 0820 	bic.w	r8, r3, #32
 800cb5e:	bfbc      	itt	lt
 800cb60:	4632      	movlt	r2, r6
 800cb62:	4616      	movlt	r6, r2
 800cb64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cb68:	d005      	beq.n	800cb76 <__cvt+0x42>
 800cb6a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cb6e:	d100      	bne.n	800cb72 <__cvt+0x3e>
 800cb70:	3401      	adds	r4, #1
 800cb72:	2102      	movs	r1, #2
 800cb74:	e000      	b.n	800cb78 <__cvt+0x44>
 800cb76:	2103      	movs	r1, #3
 800cb78:	ab03      	add	r3, sp, #12
 800cb7a:	9301      	str	r3, [sp, #4]
 800cb7c:	ab02      	add	r3, sp, #8
 800cb7e:	9300      	str	r3, [sp, #0]
 800cb80:	ec47 6b10 	vmov	d0, r6, r7
 800cb84:	4653      	mov	r3, sl
 800cb86:	4622      	mov	r2, r4
 800cb88:	f000 feb6 	bl	800d8f8 <_dtoa_r>
 800cb8c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cb90:	4605      	mov	r5, r0
 800cb92:	d119      	bne.n	800cbc8 <__cvt+0x94>
 800cb94:	f019 0f01 	tst.w	r9, #1
 800cb98:	d00e      	beq.n	800cbb8 <__cvt+0x84>
 800cb9a:	eb00 0904 	add.w	r9, r0, r4
 800cb9e:	2200      	movs	r2, #0
 800cba0:	2300      	movs	r3, #0
 800cba2:	4630      	mov	r0, r6
 800cba4:	4639      	mov	r1, r7
 800cba6:	f7f3 ff97 	bl	8000ad8 <__aeabi_dcmpeq>
 800cbaa:	b108      	cbz	r0, 800cbb0 <__cvt+0x7c>
 800cbac:	f8cd 900c 	str.w	r9, [sp, #12]
 800cbb0:	2230      	movs	r2, #48	@ 0x30
 800cbb2:	9b03      	ldr	r3, [sp, #12]
 800cbb4:	454b      	cmp	r3, r9
 800cbb6:	d31e      	bcc.n	800cbf6 <__cvt+0xc2>
 800cbb8:	9b03      	ldr	r3, [sp, #12]
 800cbba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cbbc:	1b5b      	subs	r3, r3, r5
 800cbbe:	4628      	mov	r0, r5
 800cbc0:	6013      	str	r3, [r2, #0]
 800cbc2:	b004      	add	sp, #16
 800cbc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbc8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cbcc:	eb00 0904 	add.w	r9, r0, r4
 800cbd0:	d1e5      	bne.n	800cb9e <__cvt+0x6a>
 800cbd2:	7803      	ldrb	r3, [r0, #0]
 800cbd4:	2b30      	cmp	r3, #48	@ 0x30
 800cbd6:	d10a      	bne.n	800cbee <__cvt+0xba>
 800cbd8:	2200      	movs	r2, #0
 800cbda:	2300      	movs	r3, #0
 800cbdc:	4630      	mov	r0, r6
 800cbde:	4639      	mov	r1, r7
 800cbe0:	f7f3 ff7a 	bl	8000ad8 <__aeabi_dcmpeq>
 800cbe4:	b918      	cbnz	r0, 800cbee <__cvt+0xba>
 800cbe6:	f1c4 0401 	rsb	r4, r4, #1
 800cbea:	f8ca 4000 	str.w	r4, [sl]
 800cbee:	f8da 3000 	ldr.w	r3, [sl]
 800cbf2:	4499      	add	r9, r3
 800cbf4:	e7d3      	b.n	800cb9e <__cvt+0x6a>
 800cbf6:	1c59      	adds	r1, r3, #1
 800cbf8:	9103      	str	r1, [sp, #12]
 800cbfa:	701a      	strb	r2, [r3, #0]
 800cbfc:	e7d9      	b.n	800cbb2 <__cvt+0x7e>

0800cbfe <__exponent>:
 800cbfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc00:	2900      	cmp	r1, #0
 800cc02:	bfba      	itte	lt
 800cc04:	4249      	neglt	r1, r1
 800cc06:	232d      	movlt	r3, #45	@ 0x2d
 800cc08:	232b      	movge	r3, #43	@ 0x2b
 800cc0a:	2909      	cmp	r1, #9
 800cc0c:	7002      	strb	r2, [r0, #0]
 800cc0e:	7043      	strb	r3, [r0, #1]
 800cc10:	dd29      	ble.n	800cc66 <__exponent+0x68>
 800cc12:	f10d 0307 	add.w	r3, sp, #7
 800cc16:	461d      	mov	r5, r3
 800cc18:	270a      	movs	r7, #10
 800cc1a:	461a      	mov	r2, r3
 800cc1c:	fbb1 f6f7 	udiv	r6, r1, r7
 800cc20:	fb07 1416 	mls	r4, r7, r6, r1
 800cc24:	3430      	adds	r4, #48	@ 0x30
 800cc26:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cc2a:	460c      	mov	r4, r1
 800cc2c:	2c63      	cmp	r4, #99	@ 0x63
 800cc2e:	f103 33ff 	add.w	r3, r3, #4294967295
 800cc32:	4631      	mov	r1, r6
 800cc34:	dcf1      	bgt.n	800cc1a <__exponent+0x1c>
 800cc36:	3130      	adds	r1, #48	@ 0x30
 800cc38:	1e94      	subs	r4, r2, #2
 800cc3a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cc3e:	1c41      	adds	r1, r0, #1
 800cc40:	4623      	mov	r3, r4
 800cc42:	42ab      	cmp	r3, r5
 800cc44:	d30a      	bcc.n	800cc5c <__exponent+0x5e>
 800cc46:	f10d 0309 	add.w	r3, sp, #9
 800cc4a:	1a9b      	subs	r3, r3, r2
 800cc4c:	42ac      	cmp	r4, r5
 800cc4e:	bf88      	it	hi
 800cc50:	2300      	movhi	r3, #0
 800cc52:	3302      	adds	r3, #2
 800cc54:	4403      	add	r3, r0
 800cc56:	1a18      	subs	r0, r3, r0
 800cc58:	b003      	add	sp, #12
 800cc5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc5c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cc60:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cc64:	e7ed      	b.n	800cc42 <__exponent+0x44>
 800cc66:	2330      	movs	r3, #48	@ 0x30
 800cc68:	3130      	adds	r1, #48	@ 0x30
 800cc6a:	7083      	strb	r3, [r0, #2]
 800cc6c:	70c1      	strb	r1, [r0, #3]
 800cc6e:	1d03      	adds	r3, r0, #4
 800cc70:	e7f1      	b.n	800cc56 <__exponent+0x58>
	...

0800cc74 <_printf_float>:
 800cc74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc78:	b08d      	sub	sp, #52	@ 0x34
 800cc7a:	460c      	mov	r4, r1
 800cc7c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cc80:	4616      	mov	r6, r2
 800cc82:	461f      	mov	r7, r3
 800cc84:	4605      	mov	r5, r0
 800cc86:	f000 fd0b 	bl	800d6a0 <_localeconv_r>
 800cc8a:	6803      	ldr	r3, [r0, #0]
 800cc8c:	9304      	str	r3, [sp, #16]
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f7f3 faf6 	bl	8000280 <strlen>
 800cc94:	2300      	movs	r3, #0
 800cc96:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc98:	f8d8 3000 	ldr.w	r3, [r8]
 800cc9c:	9005      	str	r0, [sp, #20]
 800cc9e:	3307      	adds	r3, #7
 800cca0:	f023 0307 	bic.w	r3, r3, #7
 800cca4:	f103 0208 	add.w	r2, r3, #8
 800cca8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ccac:	f8d4 b000 	ldr.w	fp, [r4]
 800ccb0:	f8c8 2000 	str.w	r2, [r8]
 800ccb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ccb8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ccbc:	9307      	str	r3, [sp, #28]
 800ccbe:	f8cd 8018 	str.w	r8, [sp, #24]
 800ccc2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ccc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ccca:	4b9c      	ldr	r3, [pc, #624]	@ (800cf3c <_printf_float+0x2c8>)
 800cccc:	f04f 32ff 	mov.w	r2, #4294967295
 800ccd0:	f7f3 ff34 	bl	8000b3c <__aeabi_dcmpun>
 800ccd4:	bb70      	cbnz	r0, 800cd34 <_printf_float+0xc0>
 800ccd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ccda:	4b98      	ldr	r3, [pc, #608]	@ (800cf3c <_printf_float+0x2c8>)
 800ccdc:	f04f 32ff 	mov.w	r2, #4294967295
 800cce0:	f7f3 ff0e 	bl	8000b00 <__aeabi_dcmple>
 800cce4:	bb30      	cbnz	r0, 800cd34 <_printf_float+0xc0>
 800cce6:	2200      	movs	r2, #0
 800cce8:	2300      	movs	r3, #0
 800ccea:	4640      	mov	r0, r8
 800ccec:	4649      	mov	r1, r9
 800ccee:	f7f3 fefd 	bl	8000aec <__aeabi_dcmplt>
 800ccf2:	b110      	cbz	r0, 800ccfa <_printf_float+0x86>
 800ccf4:	232d      	movs	r3, #45	@ 0x2d
 800ccf6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ccfa:	4a91      	ldr	r2, [pc, #580]	@ (800cf40 <_printf_float+0x2cc>)
 800ccfc:	4b91      	ldr	r3, [pc, #580]	@ (800cf44 <_printf_float+0x2d0>)
 800ccfe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cd02:	bf94      	ite	ls
 800cd04:	4690      	movls	r8, r2
 800cd06:	4698      	movhi	r8, r3
 800cd08:	2303      	movs	r3, #3
 800cd0a:	6123      	str	r3, [r4, #16]
 800cd0c:	f02b 0304 	bic.w	r3, fp, #4
 800cd10:	6023      	str	r3, [r4, #0]
 800cd12:	f04f 0900 	mov.w	r9, #0
 800cd16:	9700      	str	r7, [sp, #0]
 800cd18:	4633      	mov	r3, r6
 800cd1a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cd1c:	4621      	mov	r1, r4
 800cd1e:	4628      	mov	r0, r5
 800cd20:	f000 f9d2 	bl	800d0c8 <_printf_common>
 800cd24:	3001      	adds	r0, #1
 800cd26:	f040 808d 	bne.w	800ce44 <_printf_float+0x1d0>
 800cd2a:	f04f 30ff 	mov.w	r0, #4294967295
 800cd2e:	b00d      	add	sp, #52	@ 0x34
 800cd30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd34:	4642      	mov	r2, r8
 800cd36:	464b      	mov	r3, r9
 800cd38:	4640      	mov	r0, r8
 800cd3a:	4649      	mov	r1, r9
 800cd3c:	f7f3 fefe 	bl	8000b3c <__aeabi_dcmpun>
 800cd40:	b140      	cbz	r0, 800cd54 <_printf_float+0xe0>
 800cd42:	464b      	mov	r3, r9
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	bfbc      	itt	lt
 800cd48:	232d      	movlt	r3, #45	@ 0x2d
 800cd4a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cd4e:	4a7e      	ldr	r2, [pc, #504]	@ (800cf48 <_printf_float+0x2d4>)
 800cd50:	4b7e      	ldr	r3, [pc, #504]	@ (800cf4c <_printf_float+0x2d8>)
 800cd52:	e7d4      	b.n	800ccfe <_printf_float+0x8a>
 800cd54:	6863      	ldr	r3, [r4, #4]
 800cd56:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800cd5a:	9206      	str	r2, [sp, #24]
 800cd5c:	1c5a      	adds	r2, r3, #1
 800cd5e:	d13b      	bne.n	800cdd8 <_printf_float+0x164>
 800cd60:	2306      	movs	r3, #6
 800cd62:	6063      	str	r3, [r4, #4]
 800cd64:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800cd68:	2300      	movs	r3, #0
 800cd6a:	6022      	str	r2, [r4, #0]
 800cd6c:	9303      	str	r3, [sp, #12]
 800cd6e:	ab0a      	add	r3, sp, #40	@ 0x28
 800cd70:	e9cd a301 	strd	sl, r3, [sp, #4]
 800cd74:	ab09      	add	r3, sp, #36	@ 0x24
 800cd76:	9300      	str	r3, [sp, #0]
 800cd78:	6861      	ldr	r1, [r4, #4]
 800cd7a:	ec49 8b10 	vmov	d0, r8, r9
 800cd7e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cd82:	4628      	mov	r0, r5
 800cd84:	f7ff fed6 	bl	800cb34 <__cvt>
 800cd88:	9b06      	ldr	r3, [sp, #24]
 800cd8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cd8c:	2b47      	cmp	r3, #71	@ 0x47
 800cd8e:	4680      	mov	r8, r0
 800cd90:	d129      	bne.n	800cde6 <_printf_float+0x172>
 800cd92:	1cc8      	adds	r0, r1, #3
 800cd94:	db02      	blt.n	800cd9c <_printf_float+0x128>
 800cd96:	6863      	ldr	r3, [r4, #4]
 800cd98:	4299      	cmp	r1, r3
 800cd9a:	dd41      	ble.n	800ce20 <_printf_float+0x1ac>
 800cd9c:	f1aa 0a02 	sub.w	sl, sl, #2
 800cda0:	fa5f fa8a 	uxtb.w	sl, sl
 800cda4:	3901      	subs	r1, #1
 800cda6:	4652      	mov	r2, sl
 800cda8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cdac:	9109      	str	r1, [sp, #36]	@ 0x24
 800cdae:	f7ff ff26 	bl	800cbfe <__exponent>
 800cdb2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cdb4:	1813      	adds	r3, r2, r0
 800cdb6:	2a01      	cmp	r2, #1
 800cdb8:	4681      	mov	r9, r0
 800cdba:	6123      	str	r3, [r4, #16]
 800cdbc:	dc02      	bgt.n	800cdc4 <_printf_float+0x150>
 800cdbe:	6822      	ldr	r2, [r4, #0]
 800cdc0:	07d2      	lsls	r2, r2, #31
 800cdc2:	d501      	bpl.n	800cdc8 <_printf_float+0x154>
 800cdc4:	3301      	adds	r3, #1
 800cdc6:	6123      	str	r3, [r4, #16]
 800cdc8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d0a2      	beq.n	800cd16 <_printf_float+0xa2>
 800cdd0:	232d      	movs	r3, #45	@ 0x2d
 800cdd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cdd6:	e79e      	b.n	800cd16 <_printf_float+0xa2>
 800cdd8:	9a06      	ldr	r2, [sp, #24]
 800cdda:	2a47      	cmp	r2, #71	@ 0x47
 800cddc:	d1c2      	bne.n	800cd64 <_printf_float+0xf0>
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d1c0      	bne.n	800cd64 <_printf_float+0xf0>
 800cde2:	2301      	movs	r3, #1
 800cde4:	e7bd      	b.n	800cd62 <_printf_float+0xee>
 800cde6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cdea:	d9db      	bls.n	800cda4 <_printf_float+0x130>
 800cdec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800cdf0:	d118      	bne.n	800ce24 <_printf_float+0x1b0>
 800cdf2:	2900      	cmp	r1, #0
 800cdf4:	6863      	ldr	r3, [r4, #4]
 800cdf6:	dd0b      	ble.n	800ce10 <_printf_float+0x19c>
 800cdf8:	6121      	str	r1, [r4, #16]
 800cdfa:	b913      	cbnz	r3, 800ce02 <_printf_float+0x18e>
 800cdfc:	6822      	ldr	r2, [r4, #0]
 800cdfe:	07d0      	lsls	r0, r2, #31
 800ce00:	d502      	bpl.n	800ce08 <_printf_float+0x194>
 800ce02:	3301      	adds	r3, #1
 800ce04:	440b      	add	r3, r1
 800ce06:	6123      	str	r3, [r4, #16]
 800ce08:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ce0a:	f04f 0900 	mov.w	r9, #0
 800ce0e:	e7db      	b.n	800cdc8 <_printf_float+0x154>
 800ce10:	b913      	cbnz	r3, 800ce18 <_printf_float+0x1a4>
 800ce12:	6822      	ldr	r2, [r4, #0]
 800ce14:	07d2      	lsls	r2, r2, #31
 800ce16:	d501      	bpl.n	800ce1c <_printf_float+0x1a8>
 800ce18:	3302      	adds	r3, #2
 800ce1a:	e7f4      	b.n	800ce06 <_printf_float+0x192>
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	e7f2      	b.n	800ce06 <_printf_float+0x192>
 800ce20:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ce24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce26:	4299      	cmp	r1, r3
 800ce28:	db05      	blt.n	800ce36 <_printf_float+0x1c2>
 800ce2a:	6823      	ldr	r3, [r4, #0]
 800ce2c:	6121      	str	r1, [r4, #16]
 800ce2e:	07d8      	lsls	r0, r3, #31
 800ce30:	d5ea      	bpl.n	800ce08 <_printf_float+0x194>
 800ce32:	1c4b      	adds	r3, r1, #1
 800ce34:	e7e7      	b.n	800ce06 <_printf_float+0x192>
 800ce36:	2900      	cmp	r1, #0
 800ce38:	bfd4      	ite	le
 800ce3a:	f1c1 0202 	rsble	r2, r1, #2
 800ce3e:	2201      	movgt	r2, #1
 800ce40:	4413      	add	r3, r2
 800ce42:	e7e0      	b.n	800ce06 <_printf_float+0x192>
 800ce44:	6823      	ldr	r3, [r4, #0]
 800ce46:	055a      	lsls	r2, r3, #21
 800ce48:	d407      	bmi.n	800ce5a <_printf_float+0x1e6>
 800ce4a:	6923      	ldr	r3, [r4, #16]
 800ce4c:	4642      	mov	r2, r8
 800ce4e:	4631      	mov	r1, r6
 800ce50:	4628      	mov	r0, r5
 800ce52:	47b8      	blx	r7
 800ce54:	3001      	adds	r0, #1
 800ce56:	d12b      	bne.n	800ceb0 <_printf_float+0x23c>
 800ce58:	e767      	b.n	800cd2a <_printf_float+0xb6>
 800ce5a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ce5e:	f240 80dd 	bls.w	800d01c <_printf_float+0x3a8>
 800ce62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ce66:	2200      	movs	r2, #0
 800ce68:	2300      	movs	r3, #0
 800ce6a:	f7f3 fe35 	bl	8000ad8 <__aeabi_dcmpeq>
 800ce6e:	2800      	cmp	r0, #0
 800ce70:	d033      	beq.n	800ceda <_printf_float+0x266>
 800ce72:	4a37      	ldr	r2, [pc, #220]	@ (800cf50 <_printf_float+0x2dc>)
 800ce74:	2301      	movs	r3, #1
 800ce76:	4631      	mov	r1, r6
 800ce78:	4628      	mov	r0, r5
 800ce7a:	47b8      	blx	r7
 800ce7c:	3001      	adds	r0, #1
 800ce7e:	f43f af54 	beq.w	800cd2a <_printf_float+0xb6>
 800ce82:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ce86:	4543      	cmp	r3, r8
 800ce88:	db02      	blt.n	800ce90 <_printf_float+0x21c>
 800ce8a:	6823      	ldr	r3, [r4, #0]
 800ce8c:	07d8      	lsls	r0, r3, #31
 800ce8e:	d50f      	bpl.n	800ceb0 <_printf_float+0x23c>
 800ce90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce94:	4631      	mov	r1, r6
 800ce96:	4628      	mov	r0, r5
 800ce98:	47b8      	blx	r7
 800ce9a:	3001      	adds	r0, #1
 800ce9c:	f43f af45 	beq.w	800cd2a <_printf_float+0xb6>
 800cea0:	f04f 0900 	mov.w	r9, #0
 800cea4:	f108 38ff 	add.w	r8, r8, #4294967295
 800cea8:	f104 0a1a 	add.w	sl, r4, #26
 800ceac:	45c8      	cmp	r8, r9
 800ceae:	dc09      	bgt.n	800cec4 <_printf_float+0x250>
 800ceb0:	6823      	ldr	r3, [r4, #0]
 800ceb2:	079b      	lsls	r3, r3, #30
 800ceb4:	f100 8103 	bmi.w	800d0be <_printf_float+0x44a>
 800ceb8:	68e0      	ldr	r0, [r4, #12]
 800ceba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cebc:	4298      	cmp	r0, r3
 800cebe:	bfb8      	it	lt
 800cec0:	4618      	movlt	r0, r3
 800cec2:	e734      	b.n	800cd2e <_printf_float+0xba>
 800cec4:	2301      	movs	r3, #1
 800cec6:	4652      	mov	r2, sl
 800cec8:	4631      	mov	r1, r6
 800ceca:	4628      	mov	r0, r5
 800cecc:	47b8      	blx	r7
 800cece:	3001      	adds	r0, #1
 800ced0:	f43f af2b 	beq.w	800cd2a <_printf_float+0xb6>
 800ced4:	f109 0901 	add.w	r9, r9, #1
 800ced8:	e7e8      	b.n	800ceac <_printf_float+0x238>
 800ceda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cedc:	2b00      	cmp	r3, #0
 800cede:	dc39      	bgt.n	800cf54 <_printf_float+0x2e0>
 800cee0:	4a1b      	ldr	r2, [pc, #108]	@ (800cf50 <_printf_float+0x2dc>)
 800cee2:	2301      	movs	r3, #1
 800cee4:	4631      	mov	r1, r6
 800cee6:	4628      	mov	r0, r5
 800cee8:	47b8      	blx	r7
 800ceea:	3001      	adds	r0, #1
 800ceec:	f43f af1d 	beq.w	800cd2a <_printf_float+0xb6>
 800cef0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cef4:	ea59 0303 	orrs.w	r3, r9, r3
 800cef8:	d102      	bne.n	800cf00 <_printf_float+0x28c>
 800cefa:	6823      	ldr	r3, [r4, #0]
 800cefc:	07d9      	lsls	r1, r3, #31
 800cefe:	d5d7      	bpl.n	800ceb0 <_printf_float+0x23c>
 800cf00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf04:	4631      	mov	r1, r6
 800cf06:	4628      	mov	r0, r5
 800cf08:	47b8      	blx	r7
 800cf0a:	3001      	adds	r0, #1
 800cf0c:	f43f af0d 	beq.w	800cd2a <_printf_float+0xb6>
 800cf10:	f04f 0a00 	mov.w	sl, #0
 800cf14:	f104 0b1a 	add.w	fp, r4, #26
 800cf18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf1a:	425b      	negs	r3, r3
 800cf1c:	4553      	cmp	r3, sl
 800cf1e:	dc01      	bgt.n	800cf24 <_printf_float+0x2b0>
 800cf20:	464b      	mov	r3, r9
 800cf22:	e793      	b.n	800ce4c <_printf_float+0x1d8>
 800cf24:	2301      	movs	r3, #1
 800cf26:	465a      	mov	r2, fp
 800cf28:	4631      	mov	r1, r6
 800cf2a:	4628      	mov	r0, r5
 800cf2c:	47b8      	blx	r7
 800cf2e:	3001      	adds	r0, #1
 800cf30:	f43f aefb 	beq.w	800cd2a <_printf_float+0xb6>
 800cf34:	f10a 0a01 	add.w	sl, sl, #1
 800cf38:	e7ee      	b.n	800cf18 <_printf_float+0x2a4>
 800cf3a:	bf00      	nop
 800cf3c:	7fefffff 	.word	0x7fefffff
 800cf40:	08010374 	.word	0x08010374
 800cf44:	08010378 	.word	0x08010378
 800cf48:	0801037c 	.word	0x0801037c
 800cf4c:	08010380 	.word	0x08010380
 800cf50:	08010384 	.word	0x08010384
 800cf54:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cf56:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cf5a:	4553      	cmp	r3, sl
 800cf5c:	bfa8      	it	ge
 800cf5e:	4653      	movge	r3, sl
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	4699      	mov	r9, r3
 800cf64:	dc36      	bgt.n	800cfd4 <_printf_float+0x360>
 800cf66:	f04f 0b00 	mov.w	fp, #0
 800cf6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf6e:	f104 021a 	add.w	r2, r4, #26
 800cf72:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cf74:	9306      	str	r3, [sp, #24]
 800cf76:	eba3 0309 	sub.w	r3, r3, r9
 800cf7a:	455b      	cmp	r3, fp
 800cf7c:	dc31      	bgt.n	800cfe2 <_printf_float+0x36e>
 800cf7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf80:	459a      	cmp	sl, r3
 800cf82:	dc3a      	bgt.n	800cffa <_printf_float+0x386>
 800cf84:	6823      	ldr	r3, [r4, #0]
 800cf86:	07da      	lsls	r2, r3, #31
 800cf88:	d437      	bmi.n	800cffa <_printf_float+0x386>
 800cf8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf8c:	ebaa 0903 	sub.w	r9, sl, r3
 800cf90:	9b06      	ldr	r3, [sp, #24]
 800cf92:	ebaa 0303 	sub.w	r3, sl, r3
 800cf96:	4599      	cmp	r9, r3
 800cf98:	bfa8      	it	ge
 800cf9a:	4699      	movge	r9, r3
 800cf9c:	f1b9 0f00 	cmp.w	r9, #0
 800cfa0:	dc33      	bgt.n	800d00a <_printf_float+0x396>
 800cfa2:	f04f 0800 	mov.w	r8, #0
 800cfa6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cfaa:	f104 0b1a 	add.w	fp, r4, #26
 800cfae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfb0:	ebaa 0303 	sub.w	r3, sl, r3
 800cfb4:	eba3 0309 	sub.w	r3, r3, r9
 800cfb8:	4543      	cmp	r3, r8
 800cfba:	f77f af79 	ble.w	800ceb0 <_printf_float+0x23c>
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	465a      	mov	r2, fp
 800cfc2:	4631      	mov	r1, r6
 800cfc4:	4628      	mov	r0, r5
 800cfc6:	47b8      	blx	r7
 800cfc8:	3001      	adds	r0, #1
 800cfca:	f43f aeae 	beq.w	800cd2a <_printf_float+0xb6>
 800cfce:	f108 0801 	add.w	r8, r8, #1
 800cfd2:	e7ec      	b.n	800cfae <_printf_float+0x33a>
 800cfd4:	4642      	mov	r2, r8
 800cfd6:	4631      	mov	r1, r6
 800cfd8:	4628      	mov	r0, r5
 800cfda:	47b8      	blx	r7
 800cfdc:	3001      	adds	r0, #1
 800cfde:	d1c2      	bne.n	800cf66 <_printf_float+0x2f2>
 800cfe0:	e6a3      	b.n	800cd2a <_printf_float+0xb6>
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	4631      	mov	r1, r6
 800cfe6:	4628      	mov	r0, r5
 800cfe8:	9206      	str	r2, [sp, #24]
 800cfea:	47b8      	blx	r7
 800cfec:	3001      	adds	r0, #1
 800cfee:	f43f ae9c 	beq.w	800cd2a <_printf_float+0xb6>
 800cff2:	9a06      	ldr	r2, [sp, #24]
 800cff4:	f10b 0b01 	add.w	fp, fp, #1
 800cff8:	e7bb      	b.n	800cf72 <_printf_float+0x2fe>
 800cffa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cffe:	4631      	mov	r1, r6
 800d000:	4628      	mov	r0, r5
 800d002:	47b8      	blx	r7
 800d004:	3001      	adds	r0, #1
 800d006:	d1c0      	bne.n	800cf8a <_printf_float+0x316>
 800d008:	e68f      	b.n	800cd2a <_printf_float+0xb6>
 800d00a:	9a06      	ldr	r2, [sp, #24]
 800d00c:	464b      	mov	r3, r9
 800d00e:	4442      	add	r2, r8
 800d010:	4631      	mov	r1, r6
 800d012:	4628      	mov	r0, r5
 800d014:	47b8      	blx	r7
 800d016:	3001      	adds	r0, #1
 800d018:	d1c3      	bne.n	800cfa2 <_printf_float+0x32e>
 800d01a:	e686      	b.n	800cd2a <_printf_float+0xb6>
 800d01c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d020:	f1ba 0f01 	cmp.w	sl, #1
 800d024:	dc01      	bgt.n	800d02a <_printf_float+0x3b6>
 800d026:	07db      	lsls	r3, r3, #31
 800d028:	d536      	bpl.n	800d098 <_printf_float+0x424>
 800d02a:	2301      	movs	r3, #1
 800d02c:	4642      	mov	r2, r8
 800d02e:	4631      	mov	r1, r6
 800d030:	4628      	mov	r0, r5
 800d032:	47b8      	blx	r7
 800d034:	3001      	adds	r0, #1
 800d036:	f43f ae78 	beq.w	800cd2a <_printf_float+0xb6>
 800d03a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d03e:	4631      	mov	r1, r6
 800d040:	4628      	mov	r0, r5
 800d042:	47b8      	blx	r7
 800d044:	3001      	adds	r0, #1
 800d046:	f43f ae70 	beq.w	800cd2a <_printf_float+0xb6>
 800d04a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d04e:	2200      	movs	r2, #0
 800d050:	2300      	movs	r3, #0
 800d052:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d056:	f7f3 fd3f 	bl	8000ad8 <__aeabi_dcmpeq>
 800d05a:	b9c0      	cbnz	r0, 800d08e <_printf_float+0x41a>
 800d05c:	4653      	mov	r3, sl
 800d05e:	f108 0201 	add.w	r2, r8, #1
 800d062:	4631      	mov	r1, r6
 800d064:	4628      	mov	r0, r5
 800d066:	47b8      	blx	r7
 800d068:	3001      	adds	r0, #1
 800d06a:	d10c      	bne.n	800d086 <_printf_float+0x412>
 800d06c:	e65d      	b.n	800cd2a <_printf_float+0xb6>
 800d06e:	2301      	movs	r3, #1
 800d070:	465a      	mov	r2, fp
 800d072:	4631      	mov	r1, r6
 800d074:	4628      	mov	r0, r5
 800d076:	47b8      	blx	r7
 800d078:	3001      	adds	r0, #1
 800d07a:	f43f ae56 	beq.w	800cd2a <_printf_float+0xb6>
 800d07e:	f108 0801 	add.w	r8, r8, #1
 800d082:	45d0      	cmp	r8, sl
 800d084:	dbf3      	blt.n	800d06e <_printf_float+0x3fa>
 800d086:	464b      	mov	r3, r9
 800d088:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d08c:	e6df      	b.n	800ce4e <_printf_float+0x1da>
 800d08e:	f04f 0800 	mov.w	r8, #0
 800d092:	f104 0b1a 	add.w	fp, r4, #26
 800d096:	e7f4      	b.n	800d082 <_printf_float+0x40e>
 800d098:	2301      	movs	r3, #1
 800d09a:	4642      	mov	r2, r8
 800d09c:	e7e1      	b.n	800d062 <_printf_float+0x3ee>
 800d09e:	2301      	movs	r3, #1
 800d0a0:	464a      	mov	r2, r9
 800d0a2:	4631      	mov	r1, r6
 800d0a4:	4628      	mov	r0, r5
 800d0a6:	47b8      	blx	r7
 800d0a8:	3001      	adds	r0, #1
 800d0aa:	f43f ae3e 	beq.w	800cd2a <_printf_float+0xb6>
 800d0ae:	f108 0801 	add.w	r8, r8, #1
 800d0b2:	68e3      	ldr	r3, [r4, #12]
 800d0b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d0b6:	1a5b      	subs	r3, r3, r1
 800d0b8:	4543      	cmp	r3, r8
 800d0ba:	dcf0      	bgt.n	800d09e <_printf_float+0x42a>
 800d0bc:	e6fc      	b.n	800ceb8 <_printf_float+0x244>
 800d0be:	f04f 0800 	mov.w	r8, #0
 800d0c2:	f104 0919 	add.w	r9, r4, #25
 800d0c6:	e7f4      	b.n	800d0b2 <_printf_float+0x43e>

0800d0c8 <_printf_common>:
 800d0c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0cc:	4616      	mov	r6, r2
 800d0ce:	4698      	mov	r8, r3
 800d0d0:	688a      	ldr	r2, [r1, #8]
 800d0d2:	690b      	ldr	r3, [r1, #16]
 800d0d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d0d8:	4293      	cmp	r3, r2
 800d0da:	bfb8      	it	lt
 800d0dc:	4613      	movlt	r3, r2
 800d0de:	6033      	str	r3, [r6, #0]
 800d0e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d0e4:	4607      	mov	r7, r0
 800d0e6:	460c      	mov	r4, r1
 800d0e8:	b10a      	cbz	r2, 800d0ee <_printf_common+0x26>
 800d0ea:	3301      	adds	r3, #1
 800d0ec:	6033      	str	r3, [r6, #0]
 800d0ee:	6823      	ldr	r3, [r4, #0]
 800d0f0:	0699      	lsls	r1, r3, #26
 800d0f2:	bf42      	ittt	mi
 800d0f4:	6833      	ldrmi	r3, [r6, #0]
 800d0f6:	3302      	addmi	r3, #2
 800d0f8:	6033      	strmi	r3, [r6, #0]
 800d0fa:	6825      	ldr	r5, [r4, #0]
 800d0fc:	f015 0506 	ands.w	r5, r5, #6
 800d100:	d106      	bne.n	800d110 <_printf_common+0x48>
 800d102:	f104 0a19 	add.w	sl, r4, #25
 800d106:	68e3      	ldr	r3, [r4, #12]
 800d108:	6832      	ldr	r2, [r6, #0]
 800d10a:	1a9b      	subs	r3, r3, r2
 800d10c:	42ab      	cmp	r3, r5
 800d10e:	dc26      	bgt.n	800d15e <_printf_common+0x96>
 800d110:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d114:	6822      	ldr	r2, [r4, #0]
 800d116:	3b00      	subs	r3, #0
 800d118:	bf18      	it	ne
 800d11a:	2301      	movne	r3, #1
 800d11c:	0692      	lsls	r2, r2, #26
 800d11e:	d42b      	bmi.n	800d178 <_printf_common+0xb0>
 800d120:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d124:	4641      	mov	r1, r8
 800d126:	4638      	mov	r0, r7
 800d128:	47c8      	blx	r9
 800d12a:	3001      	adds	r0, #1
 800d12c:	d01e      	beq.n	800d16c <_printf_common+0xa4>
 800d12e:	6823      	ldr	r3, [r4, #0]
 800d130:	6922      	ldr	r2, [r4, #16]
 800d132:	f003 0306 	and.w	r3, r3, #6
 800d136:	2b04      	cmp	r3, #4
 800d138:	bf02      	ittt	eq
 800d13a:	68e5      	ldreq	r5, [r4, #12]
 800d13c:	6833      	ldreq	r3, [r6, #0]
 800d13e:	1aed      	subeq	r5, r5, r3
 800d140:	68a3      	ldr	r3, [r4, #8]
 800d142:	bf0c      	ite	eq
 800d144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d148:	2500      	movne	r5, #0
 800d14a:	4293      	cmp	r3, r2
 800d14c:	bfc4      	itt	gt
 800d14e:	1a9b      	subgt	r3, r3, r2
 800d150:	18ed      	addgt	r5, r5, r3
 800d152:	2600      	movs	r6, #0
 800d154:	341a      	adds	r4, #26
 800d156:	42b5      	cmp	r5, r6
 800d158:	d11a      	bne.n	800d190 <_printf_common+0xc8>
 800d15a:	2000      	movs	r0, #0
 800d15c:	e008      	b.n	800d170 <_printf_common+0xa8>
 800d15e:	2301      	movs	r3, #1
 800d160:	4652      	mov	r2, sl
 800d162:	4641      	mov	r1, r8
 800d164:	4638      	mov	r0, r7
 800d166:	47c8      	blx	r9
 800d168:	3001      	adds	r0, #1
 800d16a:	d103      	bne.n	800d174 <_printf_common+0xac>
 800d16c:	f04f 30ff 	mov.w	r0, #4294967295
 800d170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d174:	3501      	adds	r5, #1
 800d176:	e7c6      	b.n	800d106 <_printf_common+0x3e>
 800d178:	18e1      	adds	r1, r4, r3
 800d17a:	1c5a      	adds	r2, r3, #1
 800d17c:	2030      	movs	r0, #48	@ 0x30
 800d17e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d182:	4422      	add	r2, r4
 800d184:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d188:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d18c:	3302      	adds	r3, #2
 800d18e:	e7c7      	b.n	800d120 <_printf_common+0x58>
 800d190:	2301      	movs	r3, #1
 800d192:	4622      	mov	r2, r4
 800d194:	4641      	mov	r1, r8
 800d196:	4638      	mov	r0, r7
 800d198:	47c8      	blx	r9
 800d19a:	3001      	adds	r0, #1
 800d19c:	d0e6      	beq.n	800d16c <_printf_common+0xa4>
 800d19e:	3601      	adds	r6, #1
 800d1a0:	e7d9      	b.n	800d156 <_printf_common+0x8e>
	...

0800d1a4 <_printf_i>:
 800d1a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d1a8:	7e0f      	ldrb	r7, [r1, #24]
 800d1aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d1ac:	2f78      	cmp	r7, #120	@ 0x78
 800d1ae:	4691      	mov	r9, r2
 800d1b0:	4680      	mov	r8, r0
 800d1b2:	460c      	mov	r4, r1
 800d1b4:	469a      	mov	sl, r3
 800d1b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d1ba:	d807      	bhi.n	800d1cc <_printf_i+0x28>
 800d1bc:	2f62      	cmp	r7, #98	@ 0x62
 800d1be:	d80a      	bhi.n	800d1d6 <_printf_i+0x32>
 800d1c0:	2f00      	cmp	r7, #0
 800d1c2:	f000 80d2 	beq.w	800d36a <_printf_i+0x1c6>
 800d1c6:	2f58      	cmp	r7, #88	@ 0x58
 800d1c8:	f000 80b9 	beq.w	800d33e <_printf_i+0x19a>
 800d1cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d1d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d1d4:	e03a      	b.n	800d24c <_printf_i+0xa8>
 800d1d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d1da:	2b15      	cmp	r3, #21
 800d1dc:	d8f6      	bhi.n	800d1cc <_printf_i+0x28>
 800d1de:	a101      	add	r1, pc, #4	@ (adr r1, 800d1e4 <_printf_i+0x40>)
 800d1e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d1e4:	0800d23d 	.word	0x0800d23d
 800d1e8:	0800d251 	.word	0x0800d251
 800d1ec:	0800d1cd 	.word	0x0800d1cd
 800d1f0:	0800d1cd 	.word	0x0800d1cd
 800d1f4:	0800d1cd 	.word	0x0800d1cd
 800d1f8:	0800d1cd 	.word	0x0800d1cd
 800d1fc:	0800d251 	.word	0x0800d251
 800d200:	0800d1cd 	.word	0x0800d1cd
 800d204:	0800d1cd 	.word	0x0800d1cd
 800d208:	0800d1cd 	.word	0x0800d1cd
 800d20c:	0800d1cd 	.word	0x0800d1cd
 800d210:	0800d351 	.word	0x0800d351
 800d214:	0800d27b 	.word	0x0800d27b
 800d218:	0800d30b 	.word	0x0800d30b
 800d21c:	0800d1cd 	.word	0x0800d1cd
 800d220:	0800d1cd 	.word	0x0800d1cd
 800d224:	0800d373 	.word	0x0800d373
 800d228:	0800d1cd 	.word	0x0800d1cd
 800d22c:	0800d27b 	.word	0x0800d27b
 800d230:	0800d1cd 	.word	0x0800d1cd
 800d234:	0800d1cd 	.word	0x0800d1cd
 800d238:	0800d313 	.word	0x0800d313
 800d23c:	6833      	ldr	r3, [r6, #0]
 800d23e:	1d1a      	adds	r2, r3, #4
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	6032      	str	r2, [r6, #0]
 800d244:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d248:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d24c:	2301      	movs	r3, #1
 800d24e:	e09d      	b.n	800d38c <_printf_i+0x1e8>
 800d250:	6833      	ldr	r3, [r6, #0]
 800d252:	6820      	ldr	r0, [r4, #0]
 800d254:	1d19      	adds	r1, r3, #4
 800d256:	6031      	str	r1, [r6, #0]
 800d258:	0606      	lsls	r6, r0, #24
 800d25a:	d501      	bpl.n	800d260 <_printf_i+0xbc>
 800d25c:	681d      	ldr	r5, [r3, #0]
 800d25e:	e003      	b.n	800d268 <_printf_i+0xc4>
 800d260:	0645      	lsls	r5, r0, #25
 800d262:	d5fb      	bpl.n	800d25c <_printf_i+0xb8>
 800d264:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d268:	2d00      	cmp	r5, #0
 800d26a:	da03      	bge.n	800d274 <_printf_i+0xd0>
 800d26c:	232d      	movs	r3, #45	@ 0x2d
 800d26e:	426d      	negs	r5, r5
 800d270:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d274:	4859      	ldr	r0, [pc, #356]	@ (800d3dc <_printf_i+0x238>)
 800d276:	230a      	movs	r3, #10
 800d278:	e011      	b.n	800d29e <_printf_i+0xfa>
 800d27a:	6821      	ldr	r1, [r4, #0]
 800d27c:	6833      	ldr	r3, [r6, #0]
 800d27e:	0608      	lsls	r0, r1, #24
 800d280:	f853 5b04 	ldr.w	r5, [r3], #4
 800d284:	d402      	bmi.n	800d28c <_printf_i+0xe8>
 800d286:	0649      	lsls	r1, r1, #25
 800d288:	bf48      	it	mi
 800d28a:	b2ad      	uxthmi	r5, r5
 800d28c:	2f6f      	cmp	r7, #111	@ 0x6f
 800d28e:	4853      	ldr	r0, [pc, #332]	@ (800d3dc <_printf_i+0x238>)
 800d290:	6033      	str	r3, [r6, #0]
 800d292:	bf14      	ite	ne
 800d294:	230a      	movne	r3, #10
 800d296:	2308      	moveq	r3, #8
 800d298:	2100      	movs	r1, #0
 800d29a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d29e:	6866      	ldr	r6, [r4, #4]
 800d2a0:	60a6      	str	r6, [r4, #8]
 800d2a2:	2e00      	cmp	r6, #0
 800d2a4:	bfa2      	ittt	ge
 800d2a6:	6821      	ldrge	r1, [r4, #0]
 800d2a8:	f021 0104 	bicge.w	r1, r1, #4
 800d2ac:	6021      	strge	r1, [r4, #0]
 800d2ae:	b90d      	cbnz	r5, 800d2b4 <_printf_i+0x110>
 800d2b0:	2e00      	cmp	r6, #0
 800d2b2:	d04b      	beq.n	800d34c <_printf_i+0x1a8>
 800d2b4:	4616      	mov	r6, r2
 800d2b6:	fbb5 f1f3 	udiv	r1, r5, r3
 800d2ba:	fb03 5711 	mls	r7, r3, r1, r5
 800d2be:	5dc7      	ldrb	r7, [r0, r7]
 800d2c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d2c4:	462f      	mov	r7, r5
 800d2c6:	42bb      	cmp	r3, r7
 800d2c8:	460d      	mov	r5, r1
 800d2ca:	d9f4      	bls.n	800d2b6 <_printf_i+0x112>
 800d2cc:	2b08      	cmp	r3, #8
 800d2ce:	d10b      	bne.n	800d2e8 <_printf_i+0x144>
 800d2d0:	6823      	ldr	r3, [r4, #0]
 800d2d2:	07df      	lsls	r7, r3, #31
 800d2d4:	d508      	bpl.n	800d2e8 <_printf_i+0x144>
 800d2d6:	6923      	ldr	r3, [r4, #16]
 800d2d8:	6861      	ldr	r1, [r4, #4]
 800d2da:	4299      	cmp	r1, r3
 800d2dc:	bfde      	ittt	le
 800d2de:	2330      	movle	r3, #48	@ 0x30
 800d2e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d2e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d2e8:	1b92      	subs	r2, r2, r6
 800d2ea:	6122      	str	r2, [r4, #16]
 800d2ec:	f8cd a000 	str.w	sl, [sp]
 800d2f0:	464b      	mov	r3, r9
 800d2f2:	aa03      	add	r2, sp, #12
 800d2f4:	4621      	mov	r1, r4
 800d2f6:	4640      	mov	r0, r8
 800d2f8:	f7ff fee6 	bl	800d0c8 <_printf_common>
 800d2fc:	3001      	adds	r0, #1
 800d2fe:	d14a      	bne.n	800d396 <_printf_i+0x1f2>
 800d300:	f04f 30ff 	mov.w	r0, #4294967295
 800d304:	b004      	add	sp, #16
 800d306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d30a:	6823      	ldr	r3, [r4, #0]
 800d30c:	f043 0320 	orr.w	r3, r3, #32
 800d310:	6023      	str	r3, [r4, #0]
 800d312:	4833      	ldr	r0, [pc, #204]	@ (800d3e0 <_printf_i+0x23c>)
 800d314:	2778      	movs	r7, #120	@ 0x78
 800d316:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d31a:	6823      	ldr	r3, [r4, #0]
 800d31c:	6831      	ldr	r1, [r6, #0]
 800d31e:	061f      	lsls	r7, r3, #24
 800d320:	f851 5b04 	ldr.w	r5, [r1], #4
 800d324:	d402      	bmi.n	800d32c <_printf_i+0x188>
 800d326:	065f      	lsls	r7, r3, #25
 800d328:	bf48      	it	mi
 800d32a:	b2ad      	uxthmi	r5, r5
 800d32c:	6031      	str	r1, [r6, #0]
 800d32e:	07d9      	lsls	r1, r3, #31
 800d330:	bf44      	itt	mi
 800d332:	f043 0320 	orrmi.w	r3, r3, #32
 800d336:	6023      	strmi	r3, [r4, #0]
 800d338:	b11d      	cbz	r5, 800d342 <_printf_i+0x19e>
 800d33a:	2310      	movs	r3, #16
 800d33c:	e7ac      	b.n	800d298 <_printf_i+0xf4>
 800d33e:	4827      	ldr	r0, [pc, #156]	@ (800d3dc <_printf_i+0x238>)
 800d340:	e7e9      	b.n	800d316 <_printf_i+0x172>
 800d342:	6823      	ldr	r3, [r4, #0]
 800d344:	f023 0320 	bic.w	r3, r3, #32
 800d348:	6023      	str	r3, [r4, #0]
 800d34a:	e7f6      	b.n	800d33a <_printf_i+0x196>
 800d34c:	4616      	mov	r6, r2
 800d34e:	e7bd      	b.n	800d2cc <_printf_i+0x128>
 800d350:	6833      	ldr	r3, [r6, #0]
 800d352:	6825      	ldr	r5, [r4, #0]
 800d354:	6961      	ldr	r1, [r4, #20]
 800d356:	1d18      	adds	r0, r3, #4
 800d358:	6030      	str	r0, [r6, #0]
 800d35a:	062e      	lsls	r6, r5, #24
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	d501      	bpl.n	800d364 <_printf_i+0x1c0>
 800d360:	6019      	str	r1, [r3, #0]
 800d362:	e002      	b.n	800d36a <_printf_i+0x1c6>
 800d364:	0668      	lsls	r0, r5, #25
 800d366:	d5fb      	bpl.n	800d360 <_printf_i+0x1bc>
 800d368:	8019      	strh	r1, [r3, #0]
 800d36a:	2300      	movs	r3, #0
 800d36c:	6123      	str	r3, [r4, #16]
 800d36e:	4616      	mov	r6, r2
 800d370:	e7bc      	b.n	800d2ec <_printf_i+0x148>
 800d372:	6833      	ldr	r3, [r6, #0]
 800d374:	1d1a      	adds	r2, r3, #4
 800d376:	6032      	str	r2, [r6, #0]
 800d378:	681e      	ldr	r6, [r3, #0]
 800d37a:	6862      	ldr	r2, [r4, #4]
 800d37c:	2100      	movs	r1, #0
 800d37e:	4630      	mov	r0, r6
 800d380:	f7f2 ff2e 	bl	80001e0 <memchr>
 800d384:	b108      	cbz	r0, 800d38a <_printf_i+0x1e6>
 800d386:	1b80      	subs	r0, r0, r6
 800d388:	6060      	str	r0, [r4, #4]
 800d38a:	6863      	ldr	r3, [r4, #4]
 800d38c:	6123      	str	r3, [r4, #16]
 800d38e:	2300      	movs	r3, #0
 800d390:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d394:	e7aa      	b.n	800d2ec <_printf_i+0x148>
 800d396:	6923      	ldr	r3, [r4, #16]
 800d398:	4632      	mov	r2, r6
 800d39a:	4649      	mov	r1, r9
 800d39c:	4640      	mov	r0, r8
 800d39e:	47d0      	blx	sl
 800d3a0:	3001      	adds	r0, #1
 800d3a2:	d0ad      	beq.n	800d300 <_printf_i+0x15c>
 800d3a4:	6823      	ldr	r3, [r4, #0]
 800d3a6:	079b      	lsls	r3, r3, #30
 800d3a8:	d413      	bmi.n	800d3d2 <_printf_i+0x22e>
 800d3aa:	68e0      	ldr	r0, [r4, #12]
 800d3ac:	9b03      	ldr	r3, [sp, #12]
 800d3ae:	4298      	cmp	r0, r3
 800d3b0:	bfb8      	it	lt
 800d3b2:	4618      	movlt	r0, r3
 800d3b4:	e7a6      	b.n	800d304 <_printf_i+0x160>
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	4632      	mov	r2, r6
 800d3ba:	4649      	mov	r1, r9
 800d3bc:	4640      	mov	r0, r8
 800d3be:	47d0      	blx	sl
 800d3c0:	3001      	adds	r0, #1
 800d3c2:	d09d      	beq.n	800d300 <_printf_i+0x15c>
 800d3c4:	3501      	adds	r5, #1
 800d3c6:	68e3      	ldr	r3, [r4, #12]
 800d3c8:	9903      	ldr	r1, [sp, #12]
 800d3ca:	1a5b      	subs	r3, r3, r1
 800d3cc:	42ab      	cmp	r3, r5
 800d3ce:	dcf2      	bgt.n	800d3b6 <_printf_i+0x212>
 800d3d0:	e7eb      	b.n	800d3aa <_printf_i+0x206>
 800d3d2:	2500      	movs	r5, #0
 800d3d4:	f104 0619 	add.w	r6, r4, #25
 800d3d8:	e7f5      	b.n	800d3c6 <_printf_i+0x222>
 800d3da:	bf00      	nop
 800d3dc:	08010386 	.word	0x08010386
 800d3e0:	08010397 	.word	0x08010397

0800d3e4 <std>:
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	b510      	push	{r4, lr}
 800d3e8:	4604      	mov	r4, r0
 800d3ea:	e9c0 3300 	strd	r3, r3, [r0]
 800d3ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d3f2:	6083      	str	r3, [r0, #8]
 800d3f4:	8181      	strh	r1, [r0, #12]
 800d3f6:	6643      	str	r3, [r0, #100]	@ 0x64
 800d3f8:	81c2      	strh	r2, [r0, #14]
 800d3fa:	6183      	str	r3, [r0, #24]
 800d3fc:	4619      	mov	r1, r3
 800d3fe:	2208      	movs	r2, #8
 800d400:	305c      	adds	r0, #92	@ 0x5c
 800d402:	f000 f914 	bl	800d62e <memset>
 800d406:	4b0d      	ldr	r3, [pc, #52]	@ (800d43c <std+0x58>)
 800d408:	6263      	str	r3, [r4, #36]	@ 0x24
 800d40a:	4b0d      	ldr	r3, [pc, #52]	@ (800d440 <std+0x5c>)
 800d40c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d40e:	4b0d      	ldr	r3, [pc, #52]	@ (800d444 <std+0x60>)
 800d410:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d412:	4b0d      	ldr	r3, [pc, #52]	@ (800d448 <std+0x64>)
 800d414:	6323      	str	r3, [r4, #48]	@ 0x30
 800d416:	4b0d      	ldr	r3, [pc, #52]	@ (800d44c <std+0x68>)
 800d418:	6224      	str	r4, [r4, #32]
 800d41a:	429c      	cmp	r4, r3
 800d41c:	d006      	beq.n	800d42c <std+0x48>
 800d41e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d422:	4294      	cmp	r4, r2
 800d424:	d002      	beq.n	800d42c <std+0x48>
 800d426:	33d0      	adds	r3, #208	@ 0xd0
 800d428:	429c      	cmp	r4, r3
 800d42a:	d105      	bne.n	800d438 <std+0x54>
 800d42c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d434:	f000 b9cc 	b.w	800d7d0 <__retarget_lock_init_recursive>
 800d438:	bd10      	pop	{r4, pc}
 800d43a:	bf00      	nop
 800d43c:	0800d5a9 	.word	0x0800d5a9
 800d440:	0800d5cb 	.word	0x0800d5cb
 800d444:	0800d603 	.word	0x0800d603
 800d448:	0800d627 	.word	0x0800d627
 800d44c:	200004ac 	.word	0x200004ac

0800d450 <stdio_exit_handler>:
 800d450:	4a02      	ldr	r2, [pc, #8]	@ (800d45c <stdio_exit_handler+0xc>)
 800d452:	4903      	ldr	r1, [pc, #12]	@ (800d460 <stdio_exit_handler+0x10>)
 800d454:	4803      	ldr	r0, [pc, #12]	@ (800d464 <stdio_exit_handler+0x14>)
 800d456:	f000 b869 	b.w	800d52c <_fwalk_sglue>
 800d45a:	bf00      	nop
 800d45c:	20000010 	.word	0x20000010
 800d460:	0800efd1 	.word	0x0800efd1
 800d464:	20000020 	.word	0x20000020

0800d468 <cleanup_stdio>:
 800d468:	6841      	ldr	r1, [r0, #4]
 800d46a:	4b0c      	ldr	r3, [pc, #48]	@ (800d49c <cleanup_stdio+0x34>)
 800d46c:	4299      	cmp	r1, r3
 800d46e:	b510      	push	{r4, lr}
 800d470:	4604      	mov	r4, r0
 800d472:	d001      	beq.n	800d478 <cleanup_stdio+0x10>
 800d474:	f001 fdac 	bl	800efd0 <_fflush_r>
 800d478:	68a1      	ldr	r1, [r4, #8]
 800d47a:	4b09      	ldr	r3, [pc, #36]	@ (800d4a0 <cleanup_stdio+0x38>)
 800d47c:	4299      	cmp	r1, r3
 800d47e:	d002      	beq.n	800d486 <cleanup_stdio+0x1e>
 800d480:	4620      	mov	r0, r4
 800d482:	f001 fda5 	bl	800efd0 <_fflush_r>
 800d486:	68e1      	ldr	r1, [r4, #12]
 800d488:	4b06      	ldr	r3, [pc, #24]	@ (800d4a4 <cleanup_stdio+0x3c>)
 800d48a:	4299      	cmp	r1, r3
 800d48c:	d004      	beq.n	800d498 <cleanup_stdio+0x30>
 800d48e:	4620      	mov	r0, r4
 800d490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d494:	f001 bd9c 	b.w	800efd0 <_fflush_r>
 800d498:	bd10      	pop	{r4, pc}
 800d49a:	bf00      	nop
 800d49c:	200004ac 	.word	0x200004ac
 800d4a0:	20000514 	.word	0x20000514
 800d4a4:	2000057c 	.word	0x2000057c

0800d4a8 <global_stdio_init.part.0>:
 800d4a8:	b510      	push	{r4, lr}
 800d4aa:	4b0b      	ldr	r3, [pc, #44]	@ (800d4d8 <global_stdio_init.part.0+0x30>)
 800d4ac:	4c0b      	ldr	r4, [pc, #44]	@ (800d4dc <global_stdio_init.part.0+0x34>)
 800d4ae:	4a0c      	ldr	r2, [pc, #48]	@ (800d4e0 <global_stdio_init.part.0+0x38>)
 800d4b0:	601a      	str	r2, [r3, #0]
 800d4b2:	4620      	mov	r0, r4
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	2104      	movs	r1, #4
 800d4b8:	f7ff ff94 	bl	800d3e4 <std>
 800d4bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d4c0:	2201      	movs	r2, #1
 800d4c2:	2109      	movs	r1, #9
 800d4c4:	f7ff ff8e 	bl	800d3e4 <std>
 800d4c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d4cc:	2202      	movs	r2, #2
 800d4ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4d2:	2112      	movs	r1, #18
 800d4d4:	f7ff bf86 	b.w	800d3e4 <std>
 800d4d8:	200005e4 	.word	0x200005e4
 800d4dc:	200004ac 	.word	0x200004ac
 800d4e0:	0800d451 	.word	0x0800d451

0800d4e4 <__sfp_lock_acquire>:
 800d4e4:	4801      	ldr	r0, [pc, #4]	@ (800d4ec <__sfp_lock_acquire+0x8>)
 800d4e6:	f000 b974 	b.w	800d7d2 <__retarget_lock_acquire_recursive>
 800d4ea:	bf00      	nop
 800d4ec:	200005ed 	.word	0x200005ed

0800d4f0 <__sfp_lock_release>:
 800d4f0:	4801      	ldr	r0, [pc, #4]	@ (800d4f8 <__sfp_lock_release+0x8>)
 800d4f2:	f000 b96f 	b.w	800d7d4 <__retarget_lock_release_recursive>
 800d4f6:	bf00      	nop
 800d4f8:	200005ed 	.word	0x200005ed

0800d4fc <__sinit>:
 800d4fc:	b510      	push	{r4, lr}
 800d4fe:	4604      	mov	r4, r0
 800d500:	f7ff fff0 	bl	800d4e4 <__sfp_lock_acquire>
 800d504:	6a23      	ldr	r3, [r4, #32]
 800d506:	b11b      	cbz	r3, 800d510 <__sinit+0x14>
 800d508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d50c:	f7ff bff0 	b.w	800d4f0 <__sfp_lock_release>
 800d510:	4b04      	ldr	r3, [pc, #16]	@ (800d524 <__sinit+0x28>)
 800d512:	6223      	str	r3, [r4, #32]
 800d514:	4b04      	ldr	r3, [pc, #16]	@ (800d528 <__sinit+0x2c>)
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d1f5      	bne.n	800d508 <__sinit+0xc>
 800d51c:	f7ff ffc4 	bl	800d4a8 <global_stdio_init.part.0>
 800d520:	e7f2      	b.n	800d508 <__sinit+0xc>
 800d522:	bf00      	nop
 800d524:	0800d469 	.word	0x0800d469
 800d528:	200005e4 	.word	0x200005e4

0800d52c <_fwalk_sglue>:
 800d52c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d530:	4607      	mov	r7, r0
 800d532:	4688      	mov	r8, r1
 800d534:	4614      	mov	r4, r2
 800d536:	2600      	movs	r6, #0
 800d538:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d53c:	f1b9 0901 	subs.w	r9, r9, #1
 800d540:	d505      	bpl.n	800d54e <_fwalk_sglue+0x22>
 800d542:	6824      	ldr	r4, [r4, #0]
 800d544:	2c00      	cmp	r4, #0
 800d546:	d1f7      	bne.n	800d538 <_fwalk_sglue+0xc>
 800d548:	4630      	mov	r0, r6
 800d54a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d54e:	89ab      	ldrh	r3, [r5, #12]
 800d550:	2b01      	cmp	r3, #1
 800d552:	d907      	bls.n	800d564 <_fwalk_sglue+0x38>
 800d554:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d558:	3301      	adds	r3, #1
 800d55a:	d003      	beq.n	800d564 <_fwalk_sglue+0x38>
 800d55c:	4629      	mov	r1, r5
 800d55e:	4638      	mov	r0, r7
 800d560:	47c0      	blx	r8
 800d562:	4306      	orrs	r6, r0
 800d564:	3568      	adds	r5, #104	@ 0x68
 800d566:	e7e9      	b.n	800d53c <_fwalk_sglue+0x10>

0800d568 <siprintf>:
 800d568:	b40e      	push	{r1, r2, r3}
 800d56a:	b500      	push	{lr}
 800d56c:	b09c      	sub	sp, #112	@ 0x70
 800d56e:	ab1d      	add	r3, sp, #116	@ 0x74
 800d570:	9002      	str	r0, [sp, #8]
 800d572:	9006      	str	r0, [sp, #24]
 800d574:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d578:	4809      	ldr	r0, [pc, #36]	@ (800d5a0 <siprintf+0x38>)
 800d57a:	9107      	str	r1, [sp, #28]
 800d57c:	9104      	str	r1, [sp, #16]
 800d57e:	4909      	ldr	r1, [pc, #36]	@ (800d5a4 <siprintf+0x3c>)
 800d580:	f853 2b04 	ldr.w	r2, [r3], #4
 800d584:	9105      	str	r1, [sp, #20]
 800d586:	6800      	ldr	r0, [r0, #0]
 800d588:	9301      	str	r3, [sp, #4]
 800d58a:	a902      	add	r1, sp, #8
 800d58c:	f001 fba0 	bl	800ecd0 <_svfiprintf_r>
 800d590:	9b02      	ldr	r3, [sp, #8]
 800d592:	2200      	movs	r2, #0
 800d594:	701a      	strb	r2, [r3, #0]
 800d596:	b01c      	add	sp, #112	@ 0x70
 800d598:	f85d eb04 	ldr.w	lr, [sp], #4
 800d59c:	b003      	add	sp, #12
 800d59e:	4770      	bx	lr
 800d5a0:	2000001c 	.word	0x2000001c
 800d5a4:	ffff0208 	.word	0xffff0208

0800d5a8 <__sread>:
 800d5a8:	b510      	push	{r4, lr}
 800d5aa:	460c      	mov	r4, r1
 800d5ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5b0:	f000 f89c 	bl	800d6ec <_read_r>
 800d5b4:	2800      	cmp	r0, #0
 800d5b6:	bfab      	itete	ge
 800d5b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d5ba:	89a3      	ldrhlt	r3, [r4, #12]
 800d5bc:	181b      	addge	r3, r3, r0
 800d5be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d5c2:	bfac      	ite	ge
 800d5c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d5c6:	81a3      	strhlt	r3, [r4, #12]
 800d5c8:	bd10      	pop	{r4, pc}

0800d5ca <__swrite>:
 800d5ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ce:	461f      	mov	r7, r3
 800d5d0:	898b      	ldrh	r3, [r1, #12]
 800d5d2:	05db      	lsls	r3, r3, #23
 800d5d4:	4605      	mov	r5, r0
 800d5d6:	460c      	mov	r4, r1
 800d5d8:	4616      	mov	r6, r2
 800d5da:	d505      	bpl.n	800d5e8 <__swrite+0x1e>
 800d5dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5e0:	2302      	movs	r3, #2
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	f000 f870 	bl	800d6c8 <_lseek_r>
 800d5e8:	89a3      	ldrh	r3, [r4, #12]
 800d5ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d5f2:	81a3      	strh	r3, [r4, #12]
 800d5f4:	4632      	mov	r2, r6
 800d5f6:	463b      	mov	r3, r7
 800d5f8:	4628      	mov	r0, r5
 800d5fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5fe:	f000 b8ab 	b.w	800d758 <_write_r>

0800d602 <__sseek>:
 800d602:	b510      	push	{r4, lr}
 800d604:	460c      	mov	r4, r1
 800d606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d60a:	f000 f85d 	bl	800d6c8 <_lseek_r>
 800d60e:	1c43      	adds	r3, r0, #1
 800d610:	89a3      	ldrh	r3, [r4, #12]
 800d612:	bf15      	itete	ne
 800d614:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d616:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d61a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d61e:	81a3      	strheq	r3, [r4, #12]
 800d620:	bf18      	it	ne
 800d622:	81a3      	strhne	r3, [r4, #12]
 800d624:	bd10      	pop	{r4, pc}

0800d626 <__sclose>:
 800d626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d62a:	f000 b83d 	b.w	800d6a8 <_close_r>

0800d62e <memset>:
 800d62e:	4402      	add	r2, r0
 800d630:	4603      	mov	r3, r0
 800d632:	4293      	cmp	r3, r2
 800d634:	d100      	bne.n	800d638 <memset+0xa>
 800d636:	4770      	bx	lr
 800d638:	f803 1b01 	strb.w	r1, [r3], #1
 800d63c:	e7f9      	b.n	800d632 <memset+0x4>

0800d63e <_raise_r>:
 800d63e:	291f      	cmp	r1, #31
 800d640:	b538      	push	{r3, r4, r5, lr}
 800d642:	4605      	mov	r5, r0
 800d644:	460c      	mov	r4, r1
 800d646:	d904      	bls.n	800d652 <_raise_r+0x14>
 800d648:	2316      	movs	r3, #22
 800d64a:	6003      	str	r3, [r0, #0]
 800d64c:	f04f 30ff 	mov.w	r0, #4294967295
 800d650:	bd38      	pop	{r3, r4, r5, pc}
 800d652:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d654:	b112      	cbz	r2, 800d65c <_raise_r+0x1e>
 800d656:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d65a:	b94b      	cbnz	r3, 800d670 <_raise_r+0x32>
 800d65c:	4628      	mov	r0, r5
 800d65e:	f000 f869 	bl	800d734 <_getpid_r>
 800d662:	4622      	mov	r2, r4
 800d664:	4601      	mov	r1, r0
 800d666:	4628      	mov	r0, r5
 800d668:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d66c:	f000 b850 	b.w	800d710 <_kill_r>
 800d670:	2b01      	cmp	r3, #1
 800d672:	d00a      	beq.n	800d68a <_raise_r+0x4c>
 800d674:	1c59      	adds	r1, r3, #1
 800d676:	d103      	bne.n	800d680 <_raise_r+0x42>
 800d678:	2316      	movs	r3, #22
 800d67a:	6003      	str	r3, [r0, #0]
 800d67c:	2001      	movs	r0, #1
 800d67e:	e7e7      	b.n	800d650 <_raise_r+0x12>
 800d680:	2100      	movs	r1, #0
 800d682:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d686:	4620      	mov	r0, r4
 800d688:	4798      	blx	r3
 800d68a:	2000      	movs	r0, #0
 800d68c:	e7e0      	b.n	800d650 <_raise_r+0x12>
	...

0800d690 <raise>:
 800d690:	4b02      	ldr	r3, [pc, #8]	@ (800d69c <raise+0xc>)
 800d692:	4601      	mov	r1, r0
 800d694:	6818      	ldr	r0, [r3, #0]
 800d696:	f7ff bfd2 	b.w	800d63e <_raise_r>
 800d69a:	bf00      	nop
 800d69c:	2000001c 	.word	0x2000001c

0800d6a0 <_localeconv_r>:
 800d6a0:	4800      	ldr	r0, [pc, #0]	@ (800d6a4 <_localeconv_r+0x4>)
 800d6a2:	4770      	bx	lr
 800d6a4:	2000015c 	.word	0x2000015c

0800d6a8 <_close_r>:
 800d6a8:	b538      	push	{r3, r4, r5, lr}
 800d6aa:	4d06      	ldr	r5, [pc, #24]	@ (800d6c4 <_close_r+0x1c>)
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	4604      	mov	r4, r0
 800d6b0:	4608      	mov	r0, r1
 800d6b2:	602b      	str	r3, [r5, #0]
 800d6b4:	f7fa ff20 	bl	80084f8 <_close>
 800d6b8:	1c43      	adds	r3, r0, #1
 800d6ba:	d102      	bne.n	800d6c2 <_close_r+0x1a>
 800d6bc:	682b      	ldr	r3, [r5, #0]
 800d6be:	b103      	cbz	r3, 800d6c2 <_close_r+0x1a>
 800d6c0:	6023      	str	r3, [r4, #0]
 800d6c2:	bd38      	pop	{r3, r4, r5, pc}
 800d6c4:	200005e8 	.word	0x200005e8

0800d6c8 <_lseek_r>:
 800d6c8:	b538      	push	{r3, r4, r5, lr}
 800d6ca:	4d07      	ldr	r5, [pc, #28]	@ (800d6e8 <_lseek_r+0x20>)
 800d6cc:	4604      	mov	r4, r0
 800d6ce:	4608      	mov	r0, r1
 800d6d0:	4611      	mov	r1, r2
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	602a      	str	r2, [r5, #0]
 800d6d6:	461a      	mov	r2, r3
 800d6d8:	f7fa ff35 	bl	8008546 <_lseek>
 800d6dc:	1c43      	adds	r3, r0, #1
 800d6de:	d102      	bne.n	800d6e6 <_lseek_r+0x1e>
 800d6e0:	682b      	ldr	r3, [r5, #0]
 800d6e2:	b103      	cbz	r3, 800d6e6 <_lseek_r+0x1e>
 800d6e4:	6023      	str	r3, [r4, #0]
 800d6e6:	bd38      	pop	{r3, r4, r5, pc}
 800d6e8:	200005e8 	.word	0x200005e8

0800d6ec <_read_r>:
 800d6ec:	b538      	push	{r3, r4, r5, lr}
 800d6ee:	4d07      	ldr	r5, [pc, #28]	@ (800d70c <_read_r+0x20>)
 800d6f0:	4604      	mov	r4, r0
 800d6f2:	4608      	mov	r0, r1
 800d6f4:	4611      	mov	r1, r2
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	602a      	str	r2, [r5, #0]
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	f7fa fec3 	bl	8008486 <_read>
 800d700:	1c43      	adds	r3, r0, #1
 800d702:	d102      	bne.n	800d70a <_read_r+0x1e>
 800d704:	682b      	ldr	r3, [r5, #0]
 800d706:	b103      	cbz	r3, 800d70a <_read_r+0x1e>
 800d708:	6023      	str	r3, [r4, #0]
 800d70a:	bd38      	pop	{r3, r4, r5, pc}
 800d70c:	200005e8 	.word	0x200005e8

0800d710 <_kill_r>:
 800d710:	b538      	push	{r3, r4, r5, lr}
 800d712:	4d07      	ldr	r5, [pc, #28]	@ (800d730 <_kill_r+0x20>)
 800d714:	2300      	movs	r3, #0
 800d716:	4604      	mov	r4, r0
 800d718:	4608      	mov	r0, r1
 800d71a:	4611      	mov	r1, r2
 800d71c:	602b      	str	r3, [r5, #0]
 800d71e:	f7fa fe97 	bl	8008450 <_kill>
 800d722:	1c43      	adds	r3, r0, #1
 800d724:	d102      	bne.n	800d72c <_kill_r+0x1c>
 800d726:	682b      	ldr	r3, [r5, #0]
 800d728:	b103      	cbz	r3, 800d72c <_kill_r+0x1c>
 800d72a:	6023      	str	r3, [r4, #0]
 800d72c:	bd38      	pop	{r3, r4, r5, pc}
 800d72e:	bf00      	nop
 800d730:	200005e8 	.word	0x200005e8

0800d734 <_getpid_r>:
 800d734:	f7fa be84 	b.w	8008440 <_getpid>

0800d738 <_sbrk_r>:
 800d738:	b538      	push	{r3, r4, r5, lr}
 800d73a:	4d06      	ldr	r5, [pc, #24]	@ (800d754 <_sbrk_r+0x1c>)
 800d73c:	2300      	movs	r3, #0
 800d73e:	4604      	mov	r4, r0
 800d740:	4608      	mov	r0, r1
 800d742:	602b      	str	r3, [r5, #0]
 800d744:	f7fa ff0c 	bl	8008560 <_sbrk>
 800d748:	1c43      	adds	r3, r0, #1
 800d74a:	d102      	bne.n	800d752 <_sbrk_r+0x1a>
 800d74c:	682b      	ldr	r3, [r5, #0]
 800d74e:	b103      	cbz	r3, 800d752 <_sbrk_r+0x1a>
 800d750:	6023      	str	r3, [r4, #0]
 800d752:	bd38      	pop	{r3, r4, r5, pc}
 800d754:	200005e8 	.word	0x200005e8

0800d758 <_write_r>:
 800d758:	b538      	push	{r3, r4, r5, lr}
 800d75a:	4d07      	ldr	r5, [pc, #28]	@ (800d778 <_write_r+0x20>)
 800d75c:	4604      	mov	r4, r0
 800d75e:	4608      	mov	r0, r1
 800d760:	4611      	mov	r1, r2
 800d762:	2200      	movs	r2, #0
 800d764:	602a      	str	r2, [r5, #0]
 800d766:	461a      	mov	r2, r3
 800d768:	f7fa feaa 	bl	80084c0 <_write>
 800d76c:	1c43      	adds	r3, r0, #1
 800d76e:	d102      	bne.n	800d776 <_write_r+0x1e>
 800d770:	682b      	ldr	r3, [r5, #0]
 800d772:	b103      	cbz	r3, 800d776 <_write_r+0x1e>
 800d774:	6023      	str	r3, [r4, #0]
 800d776:	bd38      	pop	{r3, r4, r5, pc}
 800d778:	200005e8 	.word	0x200005e8

0800d77c <__errno>:
 800d77c:	4b01      	ldr	r3, [pc, #4]	@ (800d784 <__errno+0x8>)
 800d77e:	6818      	ldr	r0, [r3, #0]
 800d780:	4770      	bx	lr
 800d782:	bf00      	nop
 800d784:	2000001c 	.word	0x2000001c

0800d788 <__libc_init_array>:
 800d788:	b570      	push	{r4, r5, r6, lr}
 800d78a:	4d0d      	ldr	r5, [pc, #52]	@ (800d7c0 <__libc_init_array+0x38>)
 800d78c:	4c0d      	ldr	r4, [pc, #52]	@ (800d7c4 <__libc_init_array+0x3c>)
 800d78e:	1b64      	subs	r4, r4, r5
 800d790:	10a4      	asrs	r4, r4, #2
 800d792:	2600      	movs	r6, #0
 800d794:	42a6      	cmp	r6, r4
 800d796:	d109      	bne.n	800d7ac <__libc_init_array+0x24>
 800d798:	4d0b      	ldr	r5, [pc, #44]	@ (800d7c8 <__libc_init_array+0x40>)
 800d79a:	4c0c      	ldr	r4, [pc, #48]	@ (800d7cc <__libc_init_array+0x44>)
 800d79c:	f001 ff5c 	bl	800f658 <_init>
 800d7a0:	1b64      	subs	r4, r4, r5
 800d7a2:	10a4      	asrs	r4, r4, #2
 800d7a4:	2600      	movs	r6, #0
 800d7a6:	42a6      	cmp	r6, r4
 800d7a8:	d105      	bne.n	800d7b6 <__libc_init_array+0x2e>
 800d7aa:	bd70      	pop	{r4, r5, r6, pc}
 800d7ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800d7b0:	4798      	blx	r3
 800d7b2:	3601      	adds	r6, #1
 800d7b4:	e7ee      	b.n	800d794 <__libc_init_array+0xc>
 800d7b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d7ba:	4798      	blx	r3
 800d7bc:	3601      	adds	r6, #1
 800d7be:	e7f2      	b.n	800d7a6 <__libc_init_array+0x1e>
 800d7c0:	080106f0 	.word	0x080106f0
 800d7c4:	080106f0 	.word	0x080106f0
 800d7c8:	080106f0 	.word	0x080106f0
 800d7cc:	080106f8 	.word	0x080106f8

0800d7d0 <__retarget_lock_init_recursive>:
 800d7d0:	4770      	bx	lr

0800d7d2 <__retarget_lock_acquire_recursive>:
 800d7d2:	4770      	bx	lr

0800d7d4 <__retarget_lock_release_recursive>:
 800d7d4:	4770      	bx	lr

0800d7d6 <strcpy>:
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d7dc:	f803 2b01 	strb.w	r2, [r3], #1
 800d7e0:	2a00      	cmp	r2, #0
 800d7e2:	d1f9      	bne.n	800d7d8 <strcpy+0x2>
 800d7e4:	4770      	bx	lr

0800d7e6 <quorem>:
 800d7e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7ea:	6903      	ldr	r3, [r0, #16]
 800d7ec:	690c      	ldr	r4, [r1, #16]
 800d7ee:	42a3      	cmp	r3, r4
 800d7f0:	4607      	mov	r7, r0
 800d7f2:	db7e      	blt.n	800d8f2 <quorem+0x10c>
 800d7f4:	3c01      	subs	r4, #1
 800d7f6:	f101 0814 	add.w	r8, r1, #20
 800d7fa:	00a3      	lsls	r3, r4, #2
 800d7fc:	f100 0514 	add.w	r5, r0, #20
 800d800:	9300      	str	r3, [sp, #0]
 800d802:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d806:	9301      	str	r3, [sp, #4]
 800d808:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d80c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d810:	3301      	adds	r3, #1
 800d812:	429a      	cmp	r2, r3
 800d814:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d818:	fbb2 f6f3 	udiv	r6, r2, r3
 800d81c:	d32e      	bcc.n	800d87c <quorem+0x96>
 800d81e:	f04f 0a00 	mov.w	sl, #0
 800d822:	46c4      	mov	ip, r8
 800d824:	46ae      	mov	lr, r5
 800d826:	46d3      	mov	fp, sl
 800d828:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d82c:	b298      	uxth	r0, r3
 800d82e:	fb06 a000 	mla	r0, r6, r0, sl
 800d832:	0c02      	lsrs	r2, r0, #16
 800d834:	0c1b      	lsrs	r3, r3, #16
 800d836:	fb06 2303 	mla	r3, r6, r3, r2
 800d83a:	f8de 2000 	ldr.w	r2, [lr]
 800d83e:	b280      	uxth	r0, r0
 800d840:	b292      	uxth	r2, r2
 800d842:	1a12      	subs	r2, r2, r0
 800d844:	445a      	add	r2, fp
 800d846:	f8de 0000 	ldr.w	r0, [lr]
 800d84a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d84e:	b29b      	uxth	r3, r3
 800d850:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d854:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d858:	b292      	uxth	r2, r2
 800d85a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d85e:	45e1      	cmp	r9, ip
 800d860:	f84e 2b04 	str.w	r2, [lr], #4
 800d864:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d868:	d2de      	bcs.n	800d828 <quorem+0x42>
 800d86a:	9b00      	ldr	r3, [sp, #0]
 800d86c:	58eb      	ldr	r3, [r5, r3]
 800d86e:	b92b      	cbnz	r3, 800d87c <quorem+0x96>
 800d870:	9b01      	ldr	r3, [sp, #4]
 800d872:	3b04      	subs	r3, #4
 800d874:	429d      	cmp	r5, r3
 800d876:	461a      	mov	r2, r3
 800d878:	d32f      	bcc.n	800d8da <quorem+0xf4>
 800d87a:	613c      	str	r4, [r7, #16]
 800d87c:	4638      	mov	r0, r7
 800d87e:	f001 f8c3 	bl	800ea08 <__mcmp>
 800d882:	2800      	cmp	r0, #0
 800d884:	db25      	blt.n	800d8d2 <quorem+0xec>
 800d886:	4629      	mov	r1, r5
 800d888:	2000      	movs	r0, #0
 800d88a:	f858 2b04 	ldr.w	r2, [r8], #4
 800d88e:	f8d1 c000 	ldr.w	ip, [r1]
 800d892:	fa1f fe82 	uxth.w	lr, r2
 800d896:	fa1f f38c 	uxth.w	r3, ip
 800d89a:	eba3 030e 	sub.w	r3, r3, lr
 800d89e:	4403      	add	r3, r0
 800d8a0:	0c12      	lsrs	r2, r2, #16
 800d8a2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d8a6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d8aa:	b29b      	uxth	r3, r3
 800d8ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d8b0:	45c1      	cmp	r9, r8
 800d8b2:	f841 3b04 	str.w	r3, [r1], #4
 800d8b6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d8ba:	d2e6      	bcs.n	800d88a <quorem+0xa4>
 800d8bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d8c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d8c4:	b922      	cbnz	r2, 800d8d0 <quorem+0xea>
 800d8c6:	3b04      	subs	r3, #4
 800d8c8:	429d      	cmp	r5, r3
 800d8ca:	461a      	mov	r2, r3
 800d8cc:	d30b      	bcc.n	800d8e6 <quorem+0x100>
 800d8ce:	613c      	str	r4, [r7, #16]
 800d8d0:	3601      	adds	r6, #1
 800d8d2:	4630      	mov	r0, r6
 800d8d4:	b003      	add	sp, #12
 800d8d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8da:	6812      	ldr	r2, [r2, #0]
 800d8dc:	3b04      	subs	r3, #4
 800d8de:	2a00      	cmp	r2, #0
 800d8e0:	d1cb      	bne.n	800d87a <quorem+0x94>
 800d8e2:	3c01      	subs	r4, #1
 800d8e4:	e7c6      	b.n	800d874 <quorem+0x8e>
 800d8e6:	6812      	ldr	r2, [r2, #0]
 800d8e8:	3b04      	subs	r3, #4
 800d8ea:	2a00      	cmp	r2, #0
 800d8ec:	d1ef      	bne.n	800d8ce <quorem+0xe8>
 800d8ee:	3c01      	subs	r4, #1
 800d8f0:	e7ea      	b.n	800d8c8 <quorem+0xe2>
 800d8f2:	2000      	movs	r0, #0
 800d8f4:	e7ee      	b.n	800d8d4 <quorem+0xee>
	...

0800d8f8 <_dtoa_r>:
 800d8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8fc:	69c7      	ldr	r7, [r0, #28]
 800d8fe:	b099      	sub	sp, #100	@ 0x64
 800d900:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d904:	ec55 4b10 	vmov	r4, r5, d0
 800d908:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d90a:	9109      	str	r1, [sp, #36]	@ 0x24
 800d90c:	4683      	mov	fp, r0
 800d90e:	920e      	str	r2, [sp, #56]	@ 0x38
 800d910:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d912:	b97f      	cbnz	r7, 800d934 <_dtoa_r+0x3c>
 800d914:	2010      	movs	r0, #16
 800d916:	f7ff f84f 	bl	800c9b8 <malloc>
 800d91a:	4602      	mov	r2, r0
 800d91c:	f8cb 001c 	str.w	r0, [fp, #28]
 800d920:	b920      	cbnz	r0, 800d92c <_dtoa_r+0x34>
 800d922:	4ba7      	ldr	r3, [pc, #668]	@ (800dbc0 <_dtoa_r+0x2c8>)
 800d924:	21ef      	movs	r1, #239	@ 0xef
 800d926:	48a7      	ldr	r0, [pc, #668]	@ (800dbc4 <_dtoa_r+0x2cc>)
 800d928:	f001 fba2 	bl	800f070 <__assert_func>
 800d92c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d930:	6007      	str	r7, [r0, #0]
 800d932:	60c7      	str	r7, [r0, #12]
 800d934:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d938:	6819      	ldr	r1, [r3, #0]
 800d93a:	b159      	cbz	r1, 800d954 <_dtoa_r+0x5c>
 800d93c:	685a      	ldr	r2, [r3, #4]
 800d93e:	604a      	str	r2, [r1, #4]
 800d940:	2301      	movs	r3, #1
 800d942:	4093      	lsls	r3, r2
 800d944:	608b      	str	r3, [r1, #8]
 800d946:	4658      	mov	r0, fp
 800d948:	f000 fe24 	bl	800e594 <_Bfree>
 800d94c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d950:	2200      	movs	r2, #0
 800d952:	601a      	str	r2, [r3, #0]
 800d954:	1e2b      	subs	r3, r5, #0
 800d956:	bfb9      	ittee	lt
 800d958:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d95c:	9303      	strlt	r3, [sp, #12]
 800d95e:	2300      	movge	r3, #0
 800d960:	6033      	strge	r3, [r6, #0]
 800d962:	9f03      	ldr	r7, [sp, #12]
 800d964:	4b98      	ldr	r3, [pc, #608]	@ (800dbc8 <_dtoa_r+0x2d0>)
 800d966:	bfbc      	itt	lt
 800d968:	2201      	movlt	r2, #1
 800d96a:	6032      	strlt	r2, [r6, #0]
 800d96c:	43bb      	bics	r3, r7
 800d96e:	d112      	bne.n	800d996 <_dtoa_r+0x9e>
 800d970:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d972:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d976:	6013      	str	r3, [r2, #0]
 800d978:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d97c:	4323      	orrs	r3, r4
 800d97e:	f000 854d 	beq.w	800e41c <_dtoa_r+0xb24>
 800d982:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d984:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800dbdc <_dtoa_r+0x2e4>
 800d988:	2b00      	cmp	r3, #0
 800d98a:	f000 854f 	beq.w	800e42c <_dtoa_r+0xb34>
 800d98e:	f10a 0303 	add.w	r3, sl, #3
 800d992:	f000 bd49 	b.w	800e428 <_dtoa_r+0xb30>
 800d996:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d99a:	2200      	movs	r2, #0
 800d99c:	ec51 0b17 	vmov	r0, r1, d7
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d9a6:	f7f3 f897 	bl	8000ad8 <__aeabi_dcmpeq>
 800d9aa:	4680      	mov	r8, r0
 800d9ac:	b158      	cbz	r0, 800d9c6 <_dtoa_r+0xce>
 800d9ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d9b0:	2301      	movs	r3, #1
 800d9b2:	6013      	str	r3, [r2, #0]
 800d9b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d9b6:	b113      	cbz	r3, 800d9be <_dtoa_r+0xc6>
 800d9b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d9ba:	4b84      	ldr	r3, [pc, #528]	@ (800dbcc <_dtoa_r+0x2d4>)
 800d9bc:	6013      	str	r3, [r2, #0]
 800d9be:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800dbe0 <_dtoa_r+0x2e8>
 800d9c2:	f000 bd33 	b.w	800e42c <_dtoa_r+0xb34>
 800d9c6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d9ca:	aa16      	add	r2, sp, #88	@ 0x58
 800d9cc:	a917      	add	r1, sp, #92	@ 0x5c
 800d9ce:	4658      	mov	r0, fp
 800d9d0:	f001 f8ca 	bl	800eb68 <__d2b>
 800d9d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d9d8:	4681      	mov	r9, r0
 800d9da:	2e00      	cmp	r6, #0
 800d9dc:	d077      	beq.n	800dace <_dtoa_r+0x1d6>
 800d9de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d9e0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d9e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d9e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d9ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d9f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d9f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d9f8:	4619      	mov	r1, r3
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	4b74      	ldr	r3, [pc, #464]	@ (800dbd0 <_dtoa_r+0x2d8>)
 800d9fe:	f7f2 fc4b 	bl	8000298 <__aeabi_dsub>
 800da02:	a369      	add	r3, pc, #420	@ (adr r3, 800dba8 <_dtoa_r+0x2b0>)
 800da04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da08:	f7f2 fdfe 	bl	8000608 <__aeabi_dmul>
 800da0c:	a368      	add	r3, pc, #416	@ (adr r3, 800dbb0 <_dtoa_r+0x2b8>)
 800da0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da12:	f7f2 fc43 	bl	800029c <__adddf3>
 800da16:	4604      	mov	r4, r0
 800da18:	4630      	mov	r0, r6
 800da1a:	460d      	mov	r5, r1
 800da1c:	f7f2 fd8a 	bl	8000534 <__aeabi_i2d>
 800da20:	a365      	add	r3, pc, #404	@ (adr r3, 800dbb8 <_dtoa_r+0x2c0>)
 800da22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da26:	f7f2 fdef 	bl	8000608 <__aeabi_dmul>
 800da2a:	4602      	mov	r2, r0
 800da2c:	460b      	mov	r3, r1
 800da2e:	4620      	mov	r0, r4
 800da30:	4629      	mov	r1, r5
 800da32:	f7f2 fc33 	bl	800029c <__adddf3>
 800da36:	4604      	mov	r4, r0
 800da38:	460d      	mov	r5, r1
 800da3a:	f7f3 f895 	bl	8000b68 <__aeabi_d2iz>
 800da3e:	2200      	movs	r2, #0
 800da40:	4607      	mov	r7, r0
 800da42:	2300      	movs	r3, #0
 800da44:	4620      	mov	r0, r4
 800da46:	4629      	mov	r1, r5
 800da48:	f7f3 f850 	bl	8000aec <__aeabi_dcmplt>
 800da4c:	b140      	cbz	r0, 800da60 <_dtoa_r+0x168>
 800da4e:	4638      	mov	r0, r7
 800da50:	f7f2 fd70 	bl	8000534 <__aeabi_i2d>
 800da54:	4622      	mov	r2, r4
 800da56:	462b      	mov	r3, r5
 800da58:	f7f3 f83e 	bl	8000ad8 <__aeabi_dcmpeq>
 800da5c:	b900      	cbnz	r0, 800da60 <_dtoa_r+0x168>
 800da5e:	3f01      	subs	r7, #1
 800da60:	2f16      	cmp	r7, #22
 800da62:	d851      	bhi.n	800db08 <_dtoa_r+0x210>
 800da64:	4b5b      	ldr	r3, [pc, #364]	@ (800dbd4 <_dtoa_r+0x2dc>)
 800da66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800da6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800da72:	f7f3 f83b 	bl	8000aec <__aeabi_dcmplt>
 800da76:	2800      	cmp	r0, #0
 800da78:	d048      	beq.n	800db0c <_dtoa_r+0x214>
 800da7a:	3f01      	subs	r7, #1
 800da7c:	2300      	movs	r3, #0
 800da7e:	9312      	str	r3, [sp, #72]	@ 0x48
 800da80:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800da82:	1b9b      	subs	r3, r3, r6
 800da84:	1e5a      	subs	r2, r3, #1
 800da86:	bf44      	itt	mi
 800da88:	f1c3 0801 	rsbmi	r8, r3, #1
 800da8c:	2300      	movmi	r3, #0
 800da8e:	9208      	str	r2, [sp, #32]
 800da90:	bf54      	ite	pl
 800da92:	f04f 0800 	movpl.w	r8, #0
 800da96:	9308      	strmi	r3, [sp, #32]
 800da98:	2f00      	cmp	r7, #0
 800da9a:	db39      	blt.n	800db10 <_dtoa_r+0x218>
 800da9c:	9b08      	ldr	r3, [sp, #32]
 800da9e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800daa0:	443b      	add	r3, r7
 800daa2:	9308      	str	r3, [sp, #32]
 800daa4:	2300      	movs	r3, #0
 800daa6:	930a      	str	r3, [sp, #40]	@ 0x28
 800daa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800daaa:	2b09      	cmp	r3, #9
 800daac:	d864      	bhi.n	800db78 <_dtoa_r+0x280>
 800daae:	2b05      	cmp	r3, #5
 800dab0:	bfc4      	itt	gt
 800dab2:	3b04      	subgt	r3, #4
 800dab4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800dab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dab8:	f1a3 0302 	sub.w	r3, r3, #2
 800dabc:	bfcc      	ite	gt
 800dabe:	2400      	movgt	r4, #0
 800dac0:	2401      	movle	r4, #1
 800dac2:	2b03      	cmp	r3, #3
 800dac4:	d863      	bhi.n	800db8e <_dtoa_r+0x296>
 800dac6:	e8df f003 	tbb	[pc, r3]
 800daca:	372a      	.short	0x372a
 800dacc:	5535      	.short	0x5535
 800dace:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800dad2:	441e      	add	r6, r3
 800dad4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800dad8:	2b20      	cmp	r3, #32
 800dada:	bfc1      	itttt	gt
 800dadc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800dae0:	409f      	lslgt	r7, r3
 800dae2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800dae6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800daea:	bfd6      	itet	le
 800daec:	f1c3 0320 	rsble	r3, r3, #32
 800daf0:	ea47 0003 	orrgt.w	r0, r7, r3
 800daf4:	fa04 f003 	lslle.w	r0, r4, r3
 800daf8:	f7f2 fd0c 	bl	8000514 <__aeabi_ui2d>
 800dafc:	2201      	movs	r2, #1
 800dafe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800db02:	3e01      	subs	r6, #1
 800db04:	9214      	str	r2, [sp, #80]	@ 0x50
 800db06:	e777      	b.n	800d9f8 <_dtoa_r+0x100>
 800db08:	2301      	movs	r3, #1
 800db0a:	e7b8      	b.n	800da7e <_dtoa_r+0x186>
 800db0c:	9012      	str	r0, [sp, #72]	@ 0x48
 800db0e:	e7b7      	b.n	800da80 <_dtoa_r+0x188>
 800db10:	427b      	negs	r3, r7
 800db12:	930a      	str	r3, [sp, #40]	@ 0x28
 800db14:	2300      	movs	r3, #0
 800db16:	eba8 0807 	sub.w	r8, r8, r7
 800db1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800db1c:	e7c4      	b.n	800daa8 <_dtoa_r+0x1b0>
 800db1e:	2300      	movs	r3, #0
 800db20:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db24:	2b00      	cmp	r3, #0
 800db26:	dc35      	bgt.n	800db94 <_dtoa_r+0x29c>
 800db28:	2301      	movs	r3, #1
 800db2a:	9300      	str	r3, [sp, #0]
 800db2c:	9307      	str	r3, [sp, #28]
 800db2e:	461a      	mov	r2, r3
 800db30:	920e      	str	r2, [sp, #56]	@ 0x38
 800db32:	e00b      	b.n	800db4c <_dtoa_r+0x254>
 800db34:	2301      	movs	r3, #1
 800db36:	e7f3      	b.n	800db20 <_dtoa_r+0x228>
 800db38:	2300      	movs	r3, #0
 800db3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db3e:	18fb      	adds	r3, r7, r3
 800db40:	9300      	str	r3, [sp, #0]
 800db42:	3301      	adds	r3, #1
 800db44:	2b01      	cmp	r3, #1
 800db46:	9307      	str	r3, [sp, #28]
 800db48:	bfb8      	it	lt
 800db4a:	2301      	movlt	r3, #1
 800db4c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800db50:	2100      	movs	r1, #0
 800db52:	2204      	movs	r2, #4
 800db54:	f102 0514 	add.w	r5, r2, #20
 800db58:	429d      	cmp	r5, r3
 800db5a:	d91f      	bls.n	800db9c <_dtoa_r+0x2a4>
 800db5c:	6041      	str	r1, [r0, #4]
 800db5e:	4658      	mov	r0, fp
 800db60:	f000 fcd8 	bl	800e514 <_Balloc>
 800db64:	4682      	mov	sl, r0
 800db66:	2800      	cmp	r0, #0
 800db68:	d13c      	bne.n	800dbe4 <_dtoa_r+0x2ec>
 800db6a:	4b1b      	ldr	r3, [pc, #108]	@ (800dbd8 <_dtoa_r+0x2e0>)
 800db6c:	4602      	mov	r2, r0
 800db6e:	f240 11af 	movw	r1, #431	@ 0x1af
 800db72:	e6d8      	b.n	800d926 <_dtoa_r+0x2e>
 800db74:	2301      	movs	r3, #1
 800db76:	e7e0      	b.n	800db3a <_dtoa_r+0x242>
 800db78:	2401      	movs	r4, #1
 800db7a:	2300      	movs	r3, #0
 800db7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800db7e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800db80:	f04f 33ff 	mov.w	r3, #4294967295
 800db84:	9300      	str	r3, [sp, #0]
 800db86:	9307      	str	r3, [sp, #28]
 800db88:	2200      	movs	r2, #0
 800db8a:	2312      	movs	r3, #18
 800db8c:	e7d0      	b.n	800db30 <_dtoa_r+0x238>
 800db8e:	2301      	movs	r3, #1
 800db90:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db92:	e7f5      	b.n	800db80 <_dtoa_r+0x288>
 800db94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db96:	9300      	str	r3, [sp, #0]
 800db98:	9307      	str	r3, [sp, #28]
 800db9a:	e7d7      	b.n	800db4c <_dtoa_r+0x254>
 800db9c:	3101      	adds	r1, #1
 800db9e:	0052      	lsls	r2, r2, #1
 800dba0:	e7d8      	b.n	800db54 <_dtoa_r+0x25c>
 800dba2:	bf00      	nop
 800dba4:	f3af 8000 	nop.w
 800dba8:	636f4361 	.word	0x636f4361
 800dbac:	3fd287a7 	.word	0x3fd287a7
 800dbb0:	8b60c8b3 	.word	0x8b60c8b3
 800dbb4:	3fc68a28 	.word	0x3fc68a28
 800dbb8:	509f79fb 	.word	0x509f79fb
 800dbbc:	3fd34413 	.word	0x3fd34413
 800dbc0:	080103b5 	.word	0x080103b5
 800dbc4:	080103cc 	.word	0x080103cc
 800dbc8:	7ff00000 	.word	0x7ff00000
 800dbcc:	08010385 	.word	0x08010385
 800dbd0:	3ff80000 	.word	0x3ff80000
 800dbd4:	080104c8 	.word	0x080104c8
 800dbd8:	08010424 	.word	0x08010424
 800dbdc:	080103b1 	.word	0x080103b1
 800dbe0:	08010384 	.word	0x08010384
 800dbe4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dbe8:	6018      	str	r0, [r3, #0]
 800dbea:	9b07      	ldr	r3, [sp, #28]
 800dbec:	2b0e      	cmp	r3, #14
 800dbee:	f200 80a4 	bhi.w	800dd3a <_dtoa_r+0x442>
 800dbf2:	2c00      	cmp	r4, #0
 800dbf4:	f000 80a1 	beq.w	800dd3a <_dtoa_r+0x442>
 800dbf8:	2f00      	cmp	r7, #0
 800dbfa:	dd33      	ble.n	800dc64 <_dtoa_r+0x36c>
 800dbfc:	4bad      	ldr	r3, [pc, #692]	@ (800deb4 <_dtoa_r+0x5bc>)
 800dbfe:	f007 020f 	and.w	r2, r7, #15
 800dc02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc06:	ed93 7b00 	vldr	d7, [r3]
 800dc0a:	05f8      	lsls	r0, r7, #23
 800dc0c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800dc10:	ea4f 1427 	mov.w	r4, r7, asr #4
 800dc14:	d516      	bpl.n	800dc44 <_dtoa_r+0x34c>
 800dc16:	4ba8      	ldr	r3, [pc, #672]	@ (800deb8 <_dtoa_r+0x5c0>)
 800dc18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dc1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dc20:	f7f2 fe1c 	bl	800085c <__aeabi_ddiv>
 800dc24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc28:	f004 040f 	and.w	r4, r4, #15
 800dc2c:	2603      	movs	r6, #3
 800dc2e:	4da2      	ldr	r5, [pc, #648]	@ (800deb8 <_dtoa_r+0x5c0>)
 800dc30:	b954      	cbnz	r4, 800dc48 <_dtoa_r+0x350>
 800dc32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dc36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc3a:	f7f2 fe0f 	bl	800085c <__aeabi_ddiv>
 800dc3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc42:	e028      	b.n	800dc96 <_dtoa_r+0x39e>
 800dc44:	2602      	movs	r6, #2
 800dc46:	e7f2      	b.n	800dc2e <_dtoa_r+0x336>
 800dc48:	07e1      	lsls	r1, r4, #31
 800dc4a:	d508      	bpl.n	800dc5e <_dtoa_r+0x366>
 800dc4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dc50:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dc54:	f7f2 fcd8 	bl	8000608 <__aeabi_dmul>
 800dc58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dc5c:	3601      	adds	r6, #1
 800dc5e:	1064      	asrs	r4, r4, #1
 800dc60:	3508      	adds	r5, #8
 800dc62:	e7e5      	b.n	800dc30 <_dtoa_r+0x338>
 800dc64:	f000 80d2 	beq.w	800de0c <_dtoa_r+0x514>
 800dc68:	427c      	negs	r4, r7
 800dc6a:	4b92      	ldr	r3, [pc, #584]	@ (800deb4 <_dtoa_r+0x5bc>)
 800dc6c:	4d92      	ldr	r5, [pc, #584]	@ (800deb8 <_dtoa_r+0x5c0>)
 800dc6e:	f004 020f 	and.w	r2, r4, #15
 800dc72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dc7e:	f7f2 fcc3 	bl	8000608 <__aeabi_dmul>
 800dc82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc86:	1124      	asrs	r4, r4, #4
 800dc88:	2300      	movs	r3, #0
 800dc8a:	2602      	movs	r6, #2
 800dc8c:	2c00      	cmp	r4, #0
 800dc8e:	f040 80b2 	bne.w	800ddf6 <_dtoa_r+0x4fe>
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d1d3      	bne.n	800dc3e <_dtoa_r+0x346>
 800dc96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dc98:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	f000 80b7 	beq.w	800de10 <_dtoa_r+0x518>
 800dca2:	4b86      	ldr	r3, [pc, #536]	@ (800debc <_dtoa_r+0x5c4>)
 800dca4:	2200      	movs	r2, #0
 800dca6:	4620      	mov	r0, r4
 800dca8:	4629      	mov	r1, r5
 800dcaa:	f7f2 ff1f 	bl	8000aec <__aeabi_dcmplt>
 800dcae:	2800      	cmp	r0, #0
 800dcb0:	f000 80ae 	beq.w	800de10 <_dtoa_r+0x518>
 800dcb4:	9b07      	ldr	r3, [sp, #28]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	f000 80aa 	beq.w	800de10 <_dtoa_r+0x518>
 800dcbc:	9b00      	ldr	r3, [sp, #0]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	dd37      	ble.n	800dd32 <_dtoa_r+0x43a>
 800dcc2:	1e7b      	subs	r3, r7, #1
 800dcc4:	9304      	str	r3, [sp, #16]
 800dcc6:	4620      	mov	r0, r4
 800dcc8:	4b7d      	ldr	r3, [pc, #500]	@ (800dec0 <_dtoa_r+0x5c8>)
 800dcca:	2200      	movs	r2, #0
 800dccc:	4629      	mov	r1, r5
 800dcce:	f7f2 fc9b 	bl	8000608 <__aeabi_dmul>
 800dcd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dcd6:	9c00      	ldr	r4, [sp, #0]
 800dcd8:	3601      	adds	r6, #1
 800dcda:	4630      	mov	r0, r6
 800dcdc:	f7f2 fc2a 	bl	8000534 <__aeabi_i2d>
 800dce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dce4:	f7f2 fc90 	bl	8000608 <__aeabi_dmul>
 800dce8:	4b76      	ldr	r3, [pc, #472]	@ (800dec4 <_dtoa_r+0x5cc>)
 800dcea:	2200      	movs	r2, #0
 800dcec:	f7f2 fad6 	bl	800029c <__adddf3>
 800dcf0:	4605      	mov	r5, r0
 800dcf2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800dcf6:	2c00      	cmp	r4, #0
 800dcf8:	f040 808d 	bne.w	800de16 <_dtoa_r+0x51e>
 800dcfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd00:	4b71      	ldr	r3, [pc, #452]	@ (800dec8 <_dtoa_r+0x5d0>)
 800dd02:	2200      	movs	r2, #0
 800dd04:	f7f2 fac8 	bl	8000298 <__aeabi_dsub>
 800dd08:	4602      	mov	r2, r0
 800dd0a:	460b      	mov	r3, r1
 800dd0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dd10:	462a      	mov	r2, r5
 800dd12:	4633      	mov	r3, r6
 800dd14:	f7f2 ff08 	bl	8000b28 <__aeabi_dcmpgt>
 800dd18:	2800      	cmp	r0, #0
 800dd1a:	f040 828b 	bne.w	800e234 <_dtoa_r+0x93c>
 800dd1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd22:	462a      	mov	r2, r5
 800dd24:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800dd28:	f7f2 fee0 	bl	8000aec <__aeabi_dcmplt>
 800dd2c:	2800      	cmp	r0, #0
 800dd2e:	f040 8128 	bne.w	800df82 <_dtoa_r+0x68a>
 800dd32:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800dd36:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800dd3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	f2c0 815a 	blt.w	800dff6 <_dtoa_r+0x6fe>
 800dd42:	2f0e      	cmp	r7, #14
 800dd44:	f300 8157 	bgt.w	800dff6 <_dtoa_r+0x6fe>
 800dd48:	4b5a      	ldr	r3, [pc, #360]	@ (800deb4 <_dtoa_r+0x5bc>)
 800dd4a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dd4e:	ed93 7b00 	vldr	d7, [r3]
 800dd52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	ed8d 7b00 	vstr	d7, [sp]
 800dd5a:	da03      	bge.n	800dd64 <_dtoa_r+0x46c>
 800dd5c:	9b07      	ldr	r3, [sp, #28]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	f340 8101 	ble.w	800df66 <_dtoa_r+0x66e>
 800dd64:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800dd68:	4656      	mov	r6, sl
 800dd6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd6e:	4620      	mov	r0, r4
 800dd70:	4629      	mov	r1, r5
 800dd72:	f7f2 fd73 	bl	800085c <__aeabi_ddiv>
 800dd76:	f7f2 fef7 	bl	8000b68 <__aeabi_d2iz>
 800dd7a:	4680      	mov	r8, r0
 800dd7c:	f7f2 fbda 	bl	8000534 <__aeabi_i2d>
 800dd80:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd84:	f7f2 fc40 	bl	8000608 <__aeabi_dmul>
 800dd88:	4602      	mov	r2, r0
 800dd8a:	460b      	mov	r3, r1
 800dd8c:	4620      	mov	r0, r4
 800dd8e:	4629      	mov	r1, r5
 800dd90:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800dd94:	f7f2 fa80 	bl	8000298 <__aeabi_dsub>
 800dd98:	f806 4b01 	strb.w	r4, [r6], #1
 800dd9c:	9d07      	ldr	r5, [sp, #28]
 800dd9e:	eba6 040a 	sub.w	r4, r6, sl
 800dda2:	42a5      	cmp	r5, r4
 800dda4:	4602      	mov	r2, r0
 800dda6:	460b      	mov	r3, r1
 800dda8:	f040 8117 	bne.w	800dfda <_dtoa_r+0x6e2>
 800ddac:	f7f2 fa76 	bl	800029c <__adddf3>
 800ddb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ddb4:	4604      	mov	r4, r0
 800ddb6:	460d      	mov	r5, r1
 800ddb8:	f7f2 feb6 	bl	8000b28 <__aeabi_dcmpgt>
 800ddbc:	2800      	cmp	r0, #0
 800ddbe:	f040 80f9 	bne.w	800dfb4 <_dtoa_r+0x6bc>
 800ddc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ddc6:	4620      	mov	r0, r4
 800ddc8:	4629      	mov	r1, r5
 800ddca:	f7f2 fe85 	bl	8000ad8 <__aeabi_dcmpeq>
 800ddce:	b118      	cbz	r0, 800ddd8 <_dtoa_r+0x4e0>
 800ddd0:	f018 0f01 	tst.w	r8, #1
 800ddd4:	f040 80ee 	bne.w	800dfb4 <_dtoa_r+0x6bc>
 800ddd8:	4649      	mov	r1, r9
 800ddda:	4658      	mov	r0, fp
 800dddc:	f000 fbda 	bl	800e594 <_Bfree>
 800dde0:	2300      	movs	r3, #0
 800dde2:	7033      	strb	r3, [r6, #0]
 800dde4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dde6:	3701      	adds	r7, #1
 800dde8:	601f      	str	r7, [r3, #0]
 800ddea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	f000 831d 	beq.w	800e42c <_dtoa_r+0xb34>
 800ddf2:	601e      	str	r6, [r3, #0]
 800ddf4:	e31a      	b.n	800e42c <_dtoa_r+0xb34>
 800ddf6:	07e2      	lsls	r2, r4, #31
 800ddf8:	d505      	bpl.n	800de06 <_dtoa_r+0x50e>
 800ddfa:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ddfe:	f7f2 fc03 	bl	8000608 <__aeabi_dmul>
 800de02:	3601      	adds	r6, #1
 800de04:	2301      	movs	r3, #1
 800de06:	1064      	asrs	r4, r4, #1
 800de08:	3508      	adds	r5, #8
 800de0a:	e73f      	b.n	800dc8c <_dtoa_r+0x394>
 800de0c:	2602      	movs	r6, #2
 800de0e:	e742      	b.n	800dc96 <_dtoa_r+0x39e>
 800de10:	9c07      	ldr	r4, [sp, #28]
 800de12:	9704      	str	r7, [sp, #16]
 800de14:	e761      	b.n	800dcda <_dtoa_r+0x3e2>
 800de16:	4b27      	ldr	r3, [pc, #156]	@ (800deb4 <_dtoa_r+0x5bc>)
 800de18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800de1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800de1e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800de22:	4454      	add	r4, sl
 800de24:	2900      	cmp	r1, #0
 800de26:	d053      	beq.n	800ded0 <_dtoa_r+0x5d8>
 800de28:	4928      	ldr	r1, [pc, #160]	@ (800decc <_dtoa_r+0x5d4>)
 800de2a:	2000      	movs	r0, #0
 800de2c:	f7f2 fd16 	bl	800085c <__aeabi_ddiv>
 800de30:	4633      	mov	r3, r6
 800de32:	462a      	mov	r2, r5
 800de34:	f7f2 fa30 	bl	8000298 <__aeabi_dsub>
 800de38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800de3c:	4656      	mov	r6, sl
 800de3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de42:	f7f2 fe91 	bl	8000b68 <__aeabi_d2iz>
 800de46:	4605      	mov	r5, r0
 800de48:	f7f2 fb74 	bl	8000534 <__aeabi_i2d>
 800de4c:	4602      	mov	r2, r0
 800de4e:	460b      	mov	r3, r1
 800de50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de54:	f7f2 fa20 	bl	8000298 <__aeabi_dsub>
 800de58:	3530      	adds	r5, #48	@ 0x30
 800de5a:	4602      	mov	r2, r0
 800de5c:	460b      	mov	r3, r1
 800de5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800de62:	f806 5b01 	strb.w	r5, [r6], #1
 800de66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800de6a:	f7f2 fe3f 	bl	8000aec <__aeabi_dcmplt>
 800de6e:	2800      	cmp	r0, #0
 800de70:	d171      	bne.n	800df56 <_dtoa_r+0x65e>
 800de72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800de76:	4911      	ldr	r1, [pc, #68]	@ (800debc <_dtoa_r+0x5c4>)
 800de78:	2000      	movs	r0, #0
 800de7a:	f7f2 fa0d 	bl	8000298 <__aeabi_dsub>
 800de7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800de82:	f7f2 fe33 	bl	8000aec <__aeabi_dcmplt>
 800de86:	2800      	cmp	r0, #0
 800de88:	f040 8095 	bne.w	800dfb6 <_dtoa_r+0x6be>
 800de8c:	42a6      	cmp	r6, r4
 800de8e:	f43f af50 	beq.w	800dd32 <_dtoa_r+0x43a>
 800de92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800de96:	4b0a      	ldr	r3, [pc, #40]	@ (800dec0 <_dtoa_r+0x5c8>)
 800de98:	2200      	movs	r2, #0
 800de9a:	f7f2 fbb5 	bl	8000608 <__aeabi_dmul>
 800de9e:	4b08      	ldr	r3, [pc, #32]	@ (800dec0 <_dtoa_r+0x5c8>)
 800dea0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800dea4:	2200      	movs	r2, #0
 800dea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800deaa:	f7f2 fbad 	bl	8000608 <__aeabi_dmul>
 800deae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800deb2:	e7c4      	b.n	800de3e <_dtoa_r+0x546>
 800deb4:	080104c8 	.word	0x080104c8
 800deb8:	080104a0 	.word	0x080104a0
 800debc:	3ff00000 	.word	0x3ff00000
 800dec0:	40240000 	.word	0x40240000
 800dec4:	401c0000 	.word	0x401c0000
 800dec8:	40140000 	.word	0x40140000
 800decc:	3fe00000 	.word	0x3fe00000
 800ded0:	4631      	mov	r1, r6
 800ded2:	4628      	mov	r0, r5
 800ded4:	f7f2 fb98 	bl	8000608 <__aeabi_dmul>
 800ded8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800dedc:	9415      	str	r4, [sp, #84]	@ 0x54
 800dede:	4656      	mov	r6, sl
 800dee0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dee4:	f7f2 fe40 	bl	8000b68 <__aeabi_d2iz>
 800dee8:	4605      	mov	r5, r0
 800deea:	f7f2 fb23 	bl	8000534 <__aeabi_i2d>
 800deee:	4602      	mov	r2, r0
 800def0:	460b      	mov	r3, r1
 800def2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800def6:	f7f2 f9cf 	bl	8000298 <__aeabi_dsub>
 800defa:	3530      	adds	r5, #48	@ 0x30
 800defc:	f806 5b01 	strb.w	r5, [r6], #1
 800df00:	4602      	mov	r2, r0
 800df02:	460b      	mov	r3, r1
 800df04:	42a6      	cmp	r6, r4
 800df06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800df0a:	f04f 0200 	mov.w	r2, #0
 800df0e:	d124      	bne.n	800df5a <_dtoa_r+0x662>
 800df10:	4bac      	ldr	r3, [pc, #688]	@ (800e1c4 <_dtoa_r+0x8cc>)
 800df12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800df16:	f7f2 f9c1 	bl	800029c <__adddf3>
 800df1a:	4602      	mov	r2, r0
 800df1c:	460b      	mov	r3, r1
 800df1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df22:	f7f2 fe01 	bl	8000b28 <__aeabi_dcmpgt>
 800df26:	2800      	cmp	r0, #0
 800df28:	d145      	bne.n	800dfb6 <_dtoa_r+0x6be>
 800df2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800df2e:	49a5      	ldr	r1, [pc, #660]	@ (800e1c4 <_dtoa_r+0x8cc>)
 800df30:	2000      	movs	r0, #0
 800df32:	f7f2 f9b1 	bl	8000298 <__aeabi_dsub>
 800df36:	4602      	mov	r2, r0
 800df38:	460b      	mov	r3, r1
 800df3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df3e:	f7f2 fdd5 	bl	8000aec <__aeabi_dcmplt>
 800df42:	2800      	cmp	r0, #0
 800df44:	f43f aef5 	beq.w	800dd32 <_dtoa_r+0x43a>
 800df48:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800df4a:	1e73      	subs	r3, r6, #1
 800df4c:	9315      	str	r3, [sp, #84]	@ 0x54
 800df4e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800df52:	2b30      	cmp	r3, #48	@ 0x30
 800df54:	d0f8      	beq.n	800df48 <_dtoa_r+0x650>
 800df56:	9f04      	ldr	r7, [sp, #16]
 800df58:	e73e      	b.n	800ddd8 <_dtoa_r+0x4e0>
 800df5a:	4b9b      	ldr	r3, [pc, #620]	@ (800e1c8 <_dtoa_r+0x8d0>)
 800df5c:	f7f2 fb54 	bl	8000608 <__aeabi_dmul>
 800df60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df64:	e7bc      	b.n	800dee0 <_dtoa_r+0x5e8>
 800df66:	d10c      	bne.n	800df82 <_dtoa_r+0x68a>
 800df68:	4b98      	ldr	r3, [pc, #608]	@ (800e1cc <_dtoa_r+0x8d4>)
 800df6a:	2200      	movs	r2, #0
 800df6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800df70:	f7f2 fb4a 	bl	8000608 <__aeabi_dmul>
 800df74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800df78:	f7f2 fdcc 	bl	8000b14 <__aeabi_dcmpge>
 800df7c:	2800      	cmp	r0, #0
 800df7e:	f000 8157 	beq.w	800e230 <_dtoa_r+0x938>
 800df82:	2400      	movs	r4, #0
 800df84:	4625      	mov	r5, r4
 800df86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df88:	43db      	mvns	r3, r3
 800df8a:	9304      	str	r3, [sp, #16]
 800df8c:	4656      	mov	r6, sl
 800df8e:	2700      	movs	r7, #0
 800df90:	4621      	mov	r1, r4
 800df92:	4658      	mov	r0, fp
 800df94:	f000 fafe 	bl	800e594 <_Bfree>
 800df98:	2d00      	cmp	r5, #0
 800df9a:	d0dc      	beq.n	800df56 <_dtoa_r+0x65e>
 800df9c:	b12f      	cbz	r7, 800dfaa <_dtoa_r+0x6b2>
 800df9e:	42af      	cmp	r7, r5
 800dfa0:	d003      	beq.n	800dfaa <_dtoa_r+0x6b2>
 800dfa2:	4639      	mov	r1, r7
 800dfa4:	4658      	mov	r0, fp
 800dfa6:	f000 faf5 	bl	800e594 <_Bfree>
 800dfaa:	4629      	mov	r1, r5
 800dfac:	4658      	mov	r0, fp
 800dfae:	f000 faf1 	bl	800e594 <_Bfree>
 800dfb2:	e7d0      	b.n	800df56 <_dtoa_r+0x65e>
 800dfb4:	9704      	str	r7, [sp, #16]
 800dfb6:	4633      	mov	r3, r6
 800dfb8:	461e      	mov	r6, r3
 800dfba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dfbe:	2a39      	cmp	r2, #57	@ 0x39
 800dfc0:	d107      	bne.n	800dfd2 <_dtoa_r+0x6da>
 800dfc2:	459a      	cmp	sl, r3
 800dfc4:	d1f8      	bne.n	800dfb8 <_dtoa_r+0x6c0>
 800dfc6:	9a04      	ldr	r2, [sp, #16]
 800dfc8:	3201      	adds	r2, #1
 800dfca:	9204      	str	r2, [sp, #16]
 800dfcc:	2230      	movs	r2, #48	@ 0x30
 800dfce:	f88a 2000 	strb.w	r2, [sl]
 800dfd2:	781a      	ldrb	r2, [r3, #0]
 800dfd4:	3201      	adds	r2, #1
 800dfd6:	701a      	strb	r2, [r3, #0]
 800dfd8:	e7bd      	b.n	800df56 <_dtoa_r+0x65e>
 800dfda:	4b7b      	ldr	r3, [pc, #492]	@ (800e1c8 <_dtoa_r+0x8d0>)
 800dfdc:	2200      	movs	r2, #0
 800dfde:	f7f2 fb13 	bl	8000608 <__aeabi_dmul>
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	4604      	mov	r4, r0
 800dfe8:	460d      	mov	r5, r1
 800dfea:	f7f2 fd75 	bl	8000ad8 <__aeabi_dcmpeq>
 800dfee:	2800      	cmp	r0, #0
 800dff0:	f43f aebb 	beq.w	800dd6a <_dtoa_r+0x472>
 800dff4:	e6f0      	b.n	800ddd8 <_dtoa_r+0x4e0>
 800dff6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800dff8:	2a00      	cmp	r2, #0
 800dffa:	f000 80db 	beq.w	800e1b4 <_dtoa_r+0x8bc>
 800dffe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e000:	2a01      	cmp	r2, #1
 800e002:	f300 80bf 	bgt.w	800e184 <_dtoa_r+0x88c>
 800e006:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e008:	2a00      	cmp	r2, #0
 800e00a:	f000 80b7 	beq.w	800e17c <_dtoa_r+0x884>
 800e00e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e012:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e014:	4646      	mov	r6, r8
 800e016:	9a08      	ldr	r2, [sp, #32]
 800e018:	2101      	movs	r1, #1
 800e01a:	441a      	add	r2, r3
 800e01c:	4658      	mov	r0, fp
 800e01e:	4498      	add	r8, r3
 800e020:	9208      	str	r2, [sp, #32]
 800e022:	f000 fb6b 	bl	800e6fc <__i2b>
 800e026:	4605      	mov	r5, r0
 800e028:	b15e      	cbz	r6, 800e042 <_dtoa_r+0x74a>
 800e02a:	9b08      	ldr	r3, [sp, #32]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	dd08      	ble.n	800e042 <_dtoa_r+0x74a>
 800e030:	42b3      	cmp	r3, r6
 800e032:	9a08      	ldr	r2, [sp, #32]
 800e034:	bfa8      	it	ge
 800e036:	4633      	movge	r3, r6
 800e038:	eba8 0803 	sub.w	r8, r8, r3
 800e03c:	1af6      	subs	r6, r6, r3
 800e03e:	1ad3      	subs	r3, r2, r3
 800e040:	9308      	str	r3, [sp, #32]
 800e042:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e044:	b1f3      	cbz	r3, 800e084 <_dtoa_r+0x78c>
 800e046:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e048:	2b00      	cmp	r3, #0
 800e04a:	f000 80b7 	beq.w	800e1bc <_dtoa_r+0x8c4>
 800e04e:	b18c      	cbz	r4, 800e074 <_dtoa_r+0x77c>
 800e050:	4629      	mov	r1, r5
 800e052:	4622      	mov	r2, r4
 800e054:	4658      	mov	r0, fp
 800e056:	f000 fc11 	bl	800e87c <__pow5mult>
 800e05a:	464a      	mov	r2, r9
 800e05c:	4601      	mov	r1, r0
 800e05e:	4605      	mov	r5, r0
 800e060:	4658      	mov	r0, fp
 800e062:	f000 fb61 	bl	800e728 <__multiply>
 800e066:	4649      	mov	r1, r9
 800e068:	9004      	str	r0, [sp, #16]
 800e06a:	4658      	mov	r0, fp
 800e06c:	f000 fa92 	bl	800e594 <_Bfree>
 800e070:	9b04      	ldr	r3, [sp, #16]
 800e072:	4699      	mov	r9, r3
 800e074:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e076:	1b1a      	subs	r2, r3, r4
 800e078:	d004      	beq.n	800e084 <_dtoa_r+0x78c>
 800e07a:	4649      	mov	r1, r9
 800e07c:	4658      	mov	r0, fp
 800e07e:	f000 fbfd 	bl	800e87c <__pow5mult>
 800e082:	4681      	mov	r9, r0
 800e084:	2101      	movs	r1, #1
 800e086:	4658      	mov	r0, fp
 800e088:	f000 fb38 	bl	800e6fc <__i2b>
 800e08c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e08e:	4604      	mov	r4, r0
 800e090:	2b00      	cmp	r3, #0
 800e092:	f000 81cf 	beq.w	800e434 <_dtoa_r+0xb3c>
 800e096:	461a      	mov	r2, r3
 800e098:	4601      	mov	r1, r0
 800e09a:	4658      	mov	r0, fp
 800e09c:	f000 fbee 	bl	800e87c <__pow5mult>
 800e0a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0a2:	2b01      	cmp	r3, #1
 800e0a4:	4604      	mov	r4, r0
 800e0a6:	f300 8095 	bgt.w	800e1d4 <_dtoa_r+0x8dc>
 800e0aa:	9b02      	ldr	r3, [sp, #8]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	f040 8087 	bne.w	800e1c0 <_dtoa_r+0x8c8>
 800e0b2:	9b03      	ldr	r3, [sp, #12]
 800e0b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	f040 8089 	bne.w	800e1d0 <_dtoa_r+0x8d8>
 800e0be:	9b03      	ldr	r3, [sp, #12]
 800e0c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e0c4:	0d1b      	lsrs	r3, r3, #20
 800e0c6:	051b      	lsls	r3, r3, #20
 800e0c8:	b12b      	cbz	r3, 800e0d6 <_dtoa_r+0x7de>
 800e0ca:	9b08      	ldr	r3, [sp, #32]
 800e0cc:	3301      	adds	r3, #1
 800e0ce:	9308      	str	r3, [sp, #32]
 800e0d0:	f108 0801 	add.w	r8, r8, #1
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e0d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	f000 81b0 	beq.w	800e440 <_dtoa_r+0xb48>
 800e0e0:	6923      	ldr	r3, [r4, #16]
 800e0e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e0e6:	6918      	ldr	r0, [r3, #16]
 800e0e8:	f000 fabc 	bl	800e664 <__hi0bits>
 800e0ec:	f1c0 0020 	rsb	r0, r0, #32
 800e0f0:	9b08      	ldr	r3, [sp, #32]
 800e0f2:	4418      	add	r0, r3
 800e0f4:	f010 001f 	ands.w	r0, r0, #31
 800e0f8:	d077      	beq.n	800e1ea <_dtoa_r+0x8f2>
 800e0fa:	f1c0 0320 	rsb	r3, r0, #32
 800e0fe:	2b04      	cmp	r3, #4
 800e100:	dd6b      	ble.n	800e1da <_dtoa_r+0x8e2>
 800e102:	9b08      	ldr	r3, [sp, #32]
 800e104:	f1c0 001c 	rsb	r0, r0, #28
 800e108:	4403      	add	r3, r0
 800e10a:	4480      	add	r8, r0
 800e10c:	4406      	add	r6, r0
 800e10e:	9308      	str	r3, [sp, #32]
 800e110:	f1b8 0f00 	cmp.w	r8, #0
 800e114:	dd05      	ble.n	800e122 <_dtoa_r+0x82a>
 800e116:	4649      	mov	r1, r9
 800e118:	4642      	mov	r2, r8
 800e11a:	4658      	mov	r0, fp
 800e11c:	f000 fc08 	bl	800e930 <__lshift>
 800e120:	4681      	mov	r9, r0
 800e122:	9b08      	ldr	r3, [sp, #32]
 800e124:	2b00      	cmp	r3, #0
 800e126:	dd05      	ble.n	800e134 <_dtoa_r+0x83c>
 800e128:	4621      	mov	r1, r4
 800e12a:	461a      	mov	r2, r3
 800e12c:	4658      	mov	r0, fp
 800e12e:	f000 fbff 	bl	800e930 <__lshift>
 800e132:	4604      	mov	r4, r0
 800e134:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e136:	2b00      	cmp	r3, #0
 800e138:	d059      	beq.n	800e1ee <_dtoa_r+0x8f6>
 800e13a:	4621      	mov	r1, r4
 800e13c:	4648      	mov	r0, r9
 800e13e:	f000 fc63 	bl	800ea08 <__mcmp>
 800e142:	2800      	cmp	r0, #0
 800e144:	da53      	bge.n	800e1ee <_dtoa_r+0x8f6>
 800e146:	1e7b      	subs	r3, r7, #1
 800e148:	9304      	str	r3, [sp, #16]
 800e14a:	4649      	mov	r1, r9
 800e14c:	2300      	movs	r3, #0
 800e14e:	220a      	movs	r2, #10
 800e150:	4658      	mov	r0, fp
 800e152:	f000 fa41 	bl	800e5d8 <__multadd>
 800e156:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e158:	4681      	mov	r9, r0
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	f000 8172 	beq.w	800e444 <_dtoa_r+0xb4c>
 800e160:	2300      	movs	r3, #0
 800e162:	4629      	mov	r1, r5
 800e164:	220a      	movs	r2, #10
 800e166:	4658      	mov	r0, fp
 800e168:	f000 fa36 	bl	800e5d8 <__multadd>
 800e16c:	9b00      	ldr	r3, [sp, #0]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	4605      	mov	r5, r0
 800e172:	dc67      	bgt.n	800e244 <_dtoa_r+0x94c>
 800e174:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e176:	2b02      	cmp	r3, #2
 800e178:	dc41      	bgt.n	800e1fe <_dtoa_r+0x906>
 800e17a:	e063      	b.n	800e244 <_dtoa_r+0x94c>
 800e17c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e17e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e182:	e746      	b.n	800e012 <_dtoa_r+0x71a>
 800e184:	9b07      	ldr	r3, [sp, #28]
 800e186:	1e5c      	subs	r4, r3, #1
 800e188:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e18a:	42a3      	cmp	r3, r4
 800e18c:	bfbf      	itttt	lt
 800e18e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e190:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e192:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e194:	1ae3      	sublt	r3, r4, r3
 800e196:	bfb4      	ite	lt
 800e198:	18d2      	addlt	r2, r2, r3
 800e19a:	1b1c      	subge	r4, r3, r4
 800e19c:	9b07      	ldr	r3, [sp, #28]
 800e19e:	bfbc      	itt	lt
 800e1a0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e1a2:	2400      	movlt	r4, #0
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	bfb5      	itete	lt
 800e1a8:	eba8 0603 	sublt.w	r6, r8, r3
 800e1ac:	9b07      	ldrge	r3, [sp, #28]
 800e1ae:	2300      	movlt	r3, #0
 800e1b0:	4646      	movge	r6, r8
 800e1b2:	e730      	b.n	800e016 <_dtoa_r+0x71e>
 800e1b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e1b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e1b8:	4646      	mov	r6, r8
 800e1ba:	e735      	b.n	800e028 <_dtoa_r+0x730>
 800e1bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e1be:	e75c      	b.n	800e07a <_dtoa_r+0x782>
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	e788      	b.n	800e0d6 <_dtoa_r+0x7de>
 800e1c4:	3fe00000 	.word	0x3fe00000
 800e1c8:	40240000 	.word	0x40240000
 800e1cc:	40140000 	.word	0x40140000
 800e1d0:	9b02      	ldr	r3, [sp, #8]
 800e1d2:	e780      	b.n	800e0d6 <_dtoa_r+0x7de>
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e1d8:	e782      	b.n	800e0e0 <_dtoa_r+0x7e8>
 800e1da:	d099      	beq.n	800e110 <_dtoa_r+0x818>
 800e1dc:	9a08      	ldr	r2, [sp, #32]
 800e1de:	331c      	adds	r3, #28
 800e1e0:	441a      	add	r2, r3
 800e1e2:	4498      	add	r8, r3
 800e1e4:	441e      	add	r6, r3
 800e1e6:	9208      	str	r2, [sp, #32]
 800e1e8:	e792      	b.n	800e110 <_dtoa_r+0x818>
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	e7f6      	b.n	800e1dc <_dtoa_r+0x8e4>
 800e1ee:	9b07      	ldr	r3, [sp, #28]
 800e1f0:	9704      	str	r7, [sp, #16]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	dc20      	bgt.n	800e238 <_dtoa_r+0x940>
 800e1f6:	9300      	str	r3, [sp, #0]
 800e1f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1fa:	2b02      	cmp	r3, #2
 800e1fc:	dd1e      	ble.n	800e23c <_dtoa_r+0x944>
 800e1fe:	9b00      	ldr	r3, [sp, #0]
 800e200:	2b00      	cmp	r3, #0
 800e202:	f47f aec0 	bne.w	800df86 <_dtoa_r+0x68e>
 800e206:	4621      	mov	r1, r4
 800e208:	2205      	movs	r2, #5
 800e20a:	4658      	mov	r0, fp
 800e20c:	f000 f9e4 	bl	800e5d8 <__multadd>
 800e210:	4601      	mov	r1, r0
 800e212:	4604      	mov	r4, r0
 800e214:	4648      	mov	r0, r9
 800e216:	f000 fbf7 	bl	800ea08 <__mcmp>
 800e21a:	2800      	cmp	r0, #0
 800e21c:	f77f aeb3 	ble.w	800df86 <_dtoa_r+0x68e>
 800e220:	4656      	mov	r6, sl
 800e222:	2331      	movs	r3, #49	@ 0x31
 800e224:	f806 3b01 	strb.w	r3, [r6], #1
 800e228:	9b04      	ldr	r3, [sp, #16]
 800e22a:	3301      	adds	r3, #1
 800e22c:	9304      	str	r3, [sp, #16]
 800e22e:	e6ae      	b.n	800df8e <_dtoa_r+0x696>
 800e230:	9c07      	ldr	r4, [sp, #28]
 800e232:	9704      	str	r7, [sp, #16]
 800e234:	4625      	mov	r5, r4
 800e236:	e7f3      	b.n	800e220 <_dtoa_r+0x928>
 800e238:	9b07      	ldr	r3, [sp, #28]
 800e23a:	9300      	str	r3, [sp, #0]
 800e23c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e23e:	2b00      	cmp	r3, #0
 800e240:	f000 8104 	beq.w	800e44c <_dtoa_r+0xb54>
 800e244:	2e00      	cmp	r6, #0
 800e246:	dd05      	ble.n	800e254 <_dtoa_r+0x95c>
 800e248:	4629      	mov	r1, r5
 800e24a:	4632      	mov	r2, r6
 800e24c:	4658      	mov	r0, fp
 800e24e:	f000 fb6f 	bl	800e930 <__lshift>
 800e252:	4605      	mov	r5, r0
 800e254:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e256:	2b00      	cmp	r3, #0
 800e258:	d05a      	beq.n	800e310 <_dtoa_r+0xa18>
 800e25a:	6869      	ldr	r1, [r5, #4]
 800e25c:	4658      	mov	r0, fp
 800e25e:	f000 f959 	bl	800e514 <_Balloc>
 800e262:	4606      	mov	r6, r0
 800e264:	b928      	cbnz	r0, 800e272 <_dtoa_r+0x97a>
 800e266:	4b84      	ldr	r3, [pc, #528]	@ (800e478 <_dtoa_r+0xb80>)
 800e268:	4602      	mov	r2, r0
 800e26a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e26e:	f7ff bb5a 	b.w	800d926 <_dtoa_r+0x2e>
 800e272:	692a      	ldr	r2, [r5, #16]
 800e274:	3202      	adds	r2, #2
 800e276:	0092      	lsls	r2, r2, #2
 800e278:	f105 010c 	add.w	r1, r5, #12
 800e27c:	300c      	adds	r0, #12
 800e27e:	f000 fee9 	bl	800f054 <memcpy>
 800e282:	2201      	movs	r2, #1
 800e284:	4631      	mov	r1, r6
 800e286:	4658      	mov	r0, fp
 800e288:	f000 fb52 	bl	800e930 <__lshift>
 800e28c:	f10a 0301 	add.w	r3, sl, #1
 800e290:	9307      	str	r3, [sp, #28]
 800e292:	9b00      	ldr	r3, [sp, #0]
 800e294:	4453      	add	r3, sl
 800e296:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e298:	9b02      	ldr	r3, [sp, #8]
 800e29a:	f003 0301 	and.w	r3, r3, #1
 800e29e:	462f      	mov	r7, r5
 800e2a0:	930a      	str	r3, [sp, #40]	@ 0x28
 800e2a2:	4605      	mov	r5, r0
 800e2a4:	9b07      	ldr	r3, [sp, #28]
 800e2a6:	4621      	mov	r1, r4
 800e2a8:	3b01      	subs	r3, #1
 800e2aa:	4648      	mov	r0, r9
 800e2ac:	9300      	str	r3, [sp, #0]
 800e2ae:	f7ff fa9a 	bl	800d7e6 <quorem>
 800e2b2:	4639      	mov	r1, r7
 800e2b4:	9002      	str	r0, [sp, #8]
 800e2b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e2ba:	4648      	mov	r0, r9
 800e2bc:	f000 fba4 	bl	800ea08 <__mcmp>
 800e2c0:	462a      	mov	r2, r5
 800e2c2:	9008      	str	r0, [sp, #32]
 800e2c4:	4621      	mov	r1, r4
 800e2c6:	4658      	mov	r0, fp
 800e2c8:	f000 fbba 	bl	800ea40 <__mdiff>
 800e2cc:	68c2      	ldr	r2, [r0, #12]
 800e2ce:	4606      	mov	r6, r0
 800e2d0:	bb02      	cbnz	r2, 800e314 <_dtoa_r+0xa1c>
 800e2d2:	4601      	mov	r1, r0
 800e2d4:	4648      	mov	r0, r9
 800e2d6:	f000 fb97 	bl	800ea08 <__mcmp>
 800e2da:	4602      	mov	r2, r0
 800e2dc:	4631      	mov	r1, r6
 800e2de:	4658      	mov	r0, fp
 800e2e0:	920e      	str	r2, [sp, #56]	@ 0x38
 800e2e2:	f000 f957 	bl	800e594 <_Bfree>
 800e2e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e2ea:	9e07      	ldr	r6, [sp, #28]
 800e2ec:	ea43 0102 	orr.w	r1, r3, r2
 800e2f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e2f2:	4319      	orrs	r1, r3
 800e2f4:	d110      	bne.n	800e318 <_dtoa_r+0xa20>
 800e2f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e2fa:	d029      	beq.n	800e350 <_dtoa_r+0xa58>
 800e2fc:	9b08      	ldr	r3, [sp, #32]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	dd02      	ble.n	800e308 <_dtoa_r+0xa10>
 800e302:	9b02      	ldr	r3, [sp, #8]
 800e304:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e308:	9b00      	ldr	r3, [sp, #0]
 800e30a:	f883 8000 	strb.w	r8, [r3]
 800e30e:	e63f      	b.n	800df90 <_dtoa_r+0x698>
 800e310:	4628      	mov	r0, r5
 800e312:	e7bb      	b.n	800e28c <_dtoa_r+0x994>
 800e314:	2201      	movs	r2, #1
 800e316:	e7e1      	b.n	800e2dc <_dtoa_r+0x9e4>
 800e318:	9b08      	ldr	r3, [sp, #32]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	db04      	blt.n	800e328 <_dtoa_r+0xa30>
 800e31e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e320:	430b      	orrs	r3, r1
 800e322:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e324:	430b      	orrs	r3, r1
 800e326:	d120      	bne.n	800e36a <_dtoa_r+0xa72>
 800e328:	2a00      	cmp	r2, #0
 800e32a:	dded      	ble.n	800e308 <_dtoa_r+0xa10>
 800e32c:	4649      	mov	r1, r9
 800e32e:	2201      	movs	r2, #1
 800e330:	4658      	mov	r0, fp
 800e332:	f000 fafd 	bl	800e930 <__lshift>
 800e336:	4621      	mov	r1, r4
 800e338:	4681      	mov	r9, r0
 800e33a:	f000 fb65 	bl	800ea08 <__mcmp>
 800e33e:	2800      	cmp	r0, #0
 800e340:	dc03      	bgt.n	800e34a <_dtoa_r+0xa52>
 800e342:	d1e1      	bne.n	800e308 <_dtoa_r+0xa10>
 800e344:	f018 0f01 	tst.w	r8, #1
 800e348:	d0de      	beq.n	800e308 <_dtoa_r+0xa10>
 800e34a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e34e:	d1d8      	bne.n	800e302 <_dtoa_r+0xa0a>
 800e350:	9a00      	ldr	r2, [sp, #0]
 800e352:	2339      	movs	r3, #57	@ 0x39
 800e354:	7013      	strb	r3, [r2, #0]
 800e356:	4633      	mov	r3, r6
 800e358:	461e      	mov	r6, r3
 800e35a:	3b01      	subs	r3, #1
 800e35c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e360:	2a39      	cmp	r2, #57	@ 0x39
 800e362:	d052      	beq.n	800e40a <_dtoa_r+0xb12>
 800e364:	3201      	adds	r2, #1
 800e366:	701a      	strb	r2, [r3, #0]
 800e368:	e612      	b.n	800df90 <_dtoa_r+0x698>
 800e36a:	2a00      	cmp	r2, #0
 800e36c:	dd07      	ble.n	800e37e <_dtoa_r+0xa86>
 800e36e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e372:	d0ed      	beq.n	800e350 <_dtoa_r+0xa58>
 800e374:	9a00      	ldr	r2, [sp, #0]
 800e376:	f108 0301 	add.w	r3, r8, #1
 800e37a:	7013      	strb	r3, [r2, #0]
 800e37c:	e608      	b.n	800df90 <_dtoa_r+0x698>
 800e37e:	9b07      	ldr	r3, [sp, #28]
 800e380:	9a07      	ldr	r2, [sp, #28]
 800e382:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e386:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e388:	4293      	cmp	r3, r2
 800e38a:	d028      	beq.n	800e3de <_dtoa_r+0xae6>
 800e38c:	4649      	mov	r1, r9
 800e38e:	2300      	movs	r3, #0
 800e390:	220a      	movs	r2, #10
 800e392:	4658      	mov	r0, fp
 800e394:	f000 f920 	bl	800e5d8 <__multadd>
 800e398:	42af      	cmp	r7, r5
 800e39a:	4681      	mov	r9, r0
 800e39c:	f04f 0300 	mov.w	r3, #0
 800e3a0:	f04f 020a 	mov.w	r2, #10
 800e3a4:	4639      	mov	r1, r7
 800e3a6:	4658      	mov	r0, fp
 800e3a8:	d107      	bne.n	800e3ba <_dtoa_r+0xac2>
 800e3aa:	f000 f915 	bl	800e5d8 <__multadd>
 800e3ae:	4607      	mov	r7, r0
 800e3b0:	4605      	mov	r5, r0
 800e3b2:	9b07      	ldr	r3, [sp, #28]
 800e3b4:	3301      	adds	r3, #1
 800e3b6:	9307      	str	r3, [sp, #28]
 800e3b8:	e774      	b.n	800e2a4 <_dtoa_r+0x9ac>
 800e3ba:	f000 f90d 	bl	800e5d8 <__multadd>
 800e3be:	4629      	mov	r1, r5
 800e3c0:	4607      	mov	r7, r0
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	220a      	movs	r2, #10
 800e3c6:	4658      	mov	r0, fp
 800e3c8:	f000 f906 	bl	800e5d8 <__multadd>
 800e3cc:	4605      	mov	r5, r0
 800e3ce:	e7f0      	b.n	800e3b2 <_dtoa_r+0xaba>
 800e3d0:	9b00      	ldr	r3, [sp, #0]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	bfcc      	ite	gt
 800e3d6:	461e      	movgt	r6, r3
 800e3d8:	2601      	movle	r6, #1
 800e3da:	4456      	add	r6, sl
 800e3dc:	2700      	movs	r7, #0
 800e3de:	4649      	mov	r1, r9
 800e3e0:	2201      	movs	r2, #1
 800e3e2:	4658      	mov	r0, fp
 800e3e4:	f000 faa4 	bl	800e930 <__lshift>
 800e3e8:	4621      	mov	r1, r4
 800e3ea:	4681      	mov	r9, r0
 800e3ec:	f000 fb0c 	bl	800ea08 <__mcmp>
 800e3f0:	2800      	cmp	r0, #0
 800e3f2:	dcb0      	bgt.n	800e356 <_dtoa_r+0xa5e>
 800e3f4:	d102      	bne.n	800e3fc <_dtoa_r+0xb04>
 800e3f6:	f018 0f01 	tst.w	r8, #1
 800e3fa:	d1ac      	bne.n	800e356 <_dtoa_r+0xa5e>
 800e3fc:	4633      	mov	r3, r6
 800e3fe:	461e      	mov	r6, r3
 800e400:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e404:	2a30      	cmp	r2, #48	@ 0x30
 800e406:	d0fa      	beq.n	800e3fe <_dtoa_r+0xb06>
 800e408:	e5c2      	b.n	800df90 <_dtoa_r+0x698>
 800e40a:	459a      	cmp	sl, r3
 800e40c:	d1a4      	bne.n	800e358 <_dtoa_r+0xa60>
 800e40e:	9b04      	ldr	r3, [sp, #16]
 800e410:	3301      	adds	r3, #1
 800e412:	9304      	str	r3, [sp, #16]
 800e414:	2331      	movs	r3, #49	@ 0x31
 800e416:	f88a 3000 	strb.w	r3, [sl]
 800e41a:	e5b9      	b.n	800df90 <_dtoa_r+0x698>
 800e41c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e41e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e47c <_dtoa_r+0xb84>
 800e422:	b11b      	cbz	r3, 800e42c <_dtoa_r+0xb34>
 800e424:	f10a 0308 	add.w	r3, sl, #8
 800e428:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e42a:	6013      	str	r3, [r2, #0]
 800e42c:	4650      	mov	r0, sl
 800e42e:	b019      	add	sp, #100	@ 0x64
 800e430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e436:	2b01      	cmp	r3, #1
 800e438:	f77f ae37 	ble.w	800e0aa <_dtoa_r+0x7b2>
 800e43c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e43e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e440:	2001      	movs	r0, #1
 800e442:	e655      	b.n	800e0f0 <_dtoa_r+0x7f8>
 800e444:	9b00      	ldr	r3, [sp, #0]
 800e446:	2b00      	cmp	r3, #0
 800e448:	f77f aed6 	ble.w	800e1f8 <_dtoa_r+0x900>
 800e44c:	4656      	mov	r6, sl
 800e44e:	4621      	mov	r1, r4
 800e450:	4648      	mov	r0, r9
 800e452:	f7ff f9c8 	bl	800d7e6 <quorem>
 800e456:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e45a:	f806 8b01 	strb.w	r8, [r6], #1
 800e45e:	9b00      	ldr	r3, [sp, #0]
 800e460:	eba6 020a 	sub.w	r2, r6, sl
 800e464:	4293      	cmp	r3, r2
 800e466:	ddb3      	ble.n	800e3d0 <_dtoa_r+0xad8>
 800e468:	4649      	mov	r1, r9
 800e46a:	2300      	movs	r3, #0
 800e46c:	220a      	movs	r2, #10
 800e46e:	4658      	mov	r0, fp
 800e470:	f000 f8b2 	bl	800e5d8 <__multadd>
 800e474:	4681      	mov	r9, r0
 800e476:	e7ea      	b.n	800e44e <_dtoa_r+0xb56>
 800e478:	08010424 	.word	0x08010424
 800e47c:	080103a8 	.word	0x080103a8

0800e480 <_free_r>:
 800e480:	b538      	push	{r3, r4, r5, lr}
 800e482:	4605      	mov	r5, r0
 800e484:	2900      	cmp	r1, #0
 800e486:	d041      	beq.n	800e50c <_free_r+0x8c>
 800e488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e48c:	1f0c      	subs	r4, r1, #4
 800e48e:	2b00      	cmp	r3, #0
 800e490:	bfb8      	it	lt
 800e492:	18e4      	addlt	r4, r4, r3
 800e494:	f7fe fb42 	bl	800cb1c <__malloc_lock>
 800e498:	4a1d      	ldr	r2, [pc, #116]	@ (800e510 <_free_r+0x90>)
 800e49a:	6813      	ldr	r3, [r2, #0]
 800e49c:	b933      	cbnz	r3, 800e4ac <_free_r+0x2c>
 800e49e:	6063      	str	r3, [r4, #4]
 800e4a0:	6014      	str	r4, [r2, #0]
 800e4a2:	4628      	mov	r0, r5
 800e4a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4a8:	f7fe bb3e 	b.w	800cb28 <__malloc_unlock>
 800e4ac:	42a3      	cmp	r3, r4
 800e4ae:	d908      	bls.n	800e4c2 <_free_r+0x42>
 800e4b0:	6820      	ldr	r0, [r4, #0]
 800e4b2:	1821      	adds	r1, r4, r0
 800e4b4:	428b      	cmp	r3, r1
 800e4b6:	bf01      	itttt	eq
 800e4b8:	6819      	ldreq	r1, [r3, #0]
 800e4ba:	685b      	ldreq	r3, [r3, #4]
 800e4bc:	1809      	addeq	r1, r1, r0
 800e4be:	6021      	streq	r1, [r4, #0]
 800e4c0:	e7ed      	b.n	800e49e <_free_r+0x1e>
 800e4c2:	461a      	mov	r2, r3
 800e4c4:	685b      	ldr	r3, [r3, #4]
 800e4c6:	b10b      	cbz	r3, 800e4cc <_free_r+0x4c>
 800e4c8:	42a3      	cmp	r3, r4
 800e4ca:	d9fa      	bls.n	800e4c2 <_free_r+0x42>
 800e4cc:	6811      	ldr	r1, [r2, #0]
 800e4ce:	1850      	adds	r0, r2, r1
 800e4d0:	42a0      	cmp	r0, r4
 800e4d2:	d10b      	bne.n	800e4ec <_free_r+0x6c>
 800e4d4:	6820      	ldr	r0, [r4, #0]
 800e4d6:	4401      	add	r1, r0
 800e4d8:	1850      	adds	r0, r2, r1
 800e4da:	4283      	cmp	r3, r0
 800e4dc:	6011      	str	r1, [r2, #0]
 800e4de:	d1e0      	bne.n	800e4a2 <_free_r+0x22>
 800e4e0:	6818      	ldr	r0, [r3, #0]
 800e4e2:	685b      	ldr	r3, [r3, #4]
 800e4e4:	6053      	str	r3, [r2, #4]
 800e4e6:	4408      	add	r0, r1
 800e4e8:	6010      	str	r0, [r2, #0]
 800e4ea:	e7da      	b.n	800e4a2 <_free_r+0x22>
 800e4ec:	d902      	bls.n	800e4f4 <_free_r+0x74>
 800e4ee:	230c      	movs	r3, #12
 800e4f0:	602b      	str	r3, [r5, #0]
 800e4f2:	e7d6      	b.n	800e4a2 <_free_r+0x22>
 800e4f4:	6820      	ldr	r0, [r4, #0]
 800e4f6:	1821      	adds	r1, r4, r0
 800e4f8:	428b      	cmp	r3, r1
 800e4fa:	bf04      	itt	eq
 800e4fc:	6819      	ldreq	r1, [r3, #0]
 800e4fe:	685b      	ldreq	r3, [r3, #4]
 800e500:	6063      	str	r3, [r4, #4]
 800e502:	bf04      	itt	eq
 800e504:	1809      	addeq	r1, r1, r0
 800e506:	6021      	streq	r1, [r4, #0]
 800e508:	6054      	str	r4, [r2, #4]
 800e50a:	e7ca      	b.n	800e4a2 <_free_r+0x22>
 800e50c:	bd38      	pop	{r3, r4, r5, pc}
 800e50e:	bf00      	nop
 800e510:	200004a8 	.word	0x200004a8

0800e514 <_Balloc>:
 800e514:	b570      	push	{r4, r5, r6, lr}
 800e516:	69c6      	ldr	r6, [r0, #28]
 800e518:	4604      	mov	r4, r0
 800e51a:	460d      	mov	r5, r1
 800e51c:	b976      	cbnz	r6, 800e53c <_Balloc+0x28>
 800e51e:	2010      	movs	r0, #16
 800e520:	f7fe fa4a 	bl	800c9b8 <malloc>
 800e524:	4602      	mov	r2, r0
 800e526:	61e0      	str	r0, [r4, #28]
 800e528:	b920      	cbnz	r0, 800e534 <_Balloc+0x20>
 800e52a:	4b18      	ldr	r3, [pc, #96]	@ (800e58c <_Balloc+0x78>)
 800e52c:	4818      	ldr	r0, [pc, #96]	@ (800e590 <_Balloc+0x7c>)
 800e52e:	216b      	movs	r1, #107	@ 0x6b
 800e530:	f000 fd9e 	bl	800f070 <__assert_func>
 800e534:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e538:	6006      	str	r6, [r0, #0]
 800e53a:	60c6      	str	r6, [r0, #12]
 800e53c:	69e6      	ldr	r6, [r4, #28]
 800e53e:	68f3      	ldr	r3, [r6, #12]
 800e540:	b183      	cbz	r3, 800e564 <_Balloc+0x50>
 800e542:	69e3      	ldr	r3, [r4, #28]
 800e544:	68db      	ldr	r3, [r3, #12]
 800e546:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e54a:	b9b8      	cbnz	r0, 800e57c <_Balloc+0x68>
 800e54c:	2101      	movs	r1, #1
 800e54e:	fa01 f605 	lsl.w	r6, r1, r5
 800e552:	1d72      	adds	r2, r6, #5
 800e554:	0092      	lsls	r2, r2, #2
 800e556:	4620      	mov	r0, r4
 800e558:	f000 fda8 	bl	800f0ac <_calloc_r>
 800e55c:	b160      	cbz	r0, 800e578 <_Balloc+0x64>
 800e55e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e562:	e00e      	b.n	800e582 <_Balloc+0x6e>
 800e564:	2221      	movs	r2, #33	@ 0x21
 800e566:	2104      	movs	r1, #4
 800e568:	4620      	mov	r0, r4
 800e56a:	f000 fd9f 	bl	800f0ac <_calloc_r>
 800e56e:	69e3      	ldr	r3, [r4, #28]
 800e570:	60f0      	str	r0, [r6, #12]
 800e572:	68db      	ldr	r3, [r3, #12]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d1e4      	bne.n	800e542 <_Balloc+0x2e>
 800e578:	2000      	movs	r0, #0
 800e57a:	bd70      	pop	{r4, r5, r6, pc}
 800e57c:	6802      	ldr	r2, [r0, #0]
 800e57e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e582:	2300      	movs	r3, #0
 800e584:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e588:	e7f7      	b.n	800e57a <_Balloc+0x66>
 800e58a:	bf00      	nop
 800e58c:	080103b5 	.word	0x080103b5
 800e590:	08010435 	.word	0x08010435

0800e594 <_Bfree>:
 800e594:	b570      	push	{r4, r5, r6, lr}
 800e596:	69c6      	ldr	r6, [r0, #28]
 800e598:	4605      	mov	r5, r0
 800e59a:	460c      	mov	r4, r1
 800e59c:	b976      	cbnz	r6, 800e5bc <_Bfree+0x28>
 800e59e:	2010      	movs	r0, #16
 800e5a0:	f7fe fa0a 	bl	800c9b8 <malloc>
 800e5a4:	4602      	mov	r2, r0
 800e5a6:	61e8      	str	r0, [r5, #28]
 800e5a8:	b920      	cbnz	r0, 800e5b4 <_Bfree+0x20>
 800e5aa:	4b09      	ldr	r3, [pc, #36]	@ (800e5d0 <_Bfree+0x3c>)
 800e5ac:	4809      	ldr	r0, [pc, #36]	@ (800e5d4 <_Bfree+0x40>)
 800e5ae:	218f      	movs	r1, #143	@ 0x8f
 800e5b0:	f000 fd5e 	bl	800f070 <__assert_func>
 800e5b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e5b8:	6006      	str	r6, [r0, #0]
 800e5ba:	60c6      	str	r6, [r0, #12]
 800e5bc:	b13c      	cbz	r4, 800e5ce <_Bfree+0x3a>
 800e5be:	69eb      	ldr	r3, [r5, #28]
 800e5c0:	6862      	ldr	r2, [r4, #4]
 800e5c2:	68db      	ldr	r3, [r3, #12]
 800e5c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e5c8:	6021      	str	r1, [r4, #0]
 800e5ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e5ce:	bd70      	pop	{r4, r5, r6, pc}
 800e5d0:	080103b5 	.word	0x080103b5
 800e5d4:	08010435 	.word	0x08010435

0800e5d8 <__multadd>:
 800e5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5dc:	690d      	ldr	r5, [r1, #16]
 800e5de:	4607      	mov	r7, r0
 800e5e0:	460c      	mov	r4, r1
 800e5e2:	461e      	mov	r6, r3
 800e5e4:	f101 0c14 	add.w	ip, r1, #20
 800e5e8:	2000      	movs	r0, #0
 800e5ea:	f8dc 3000 	ldr.w	r3, [ip]
 800e5ee:	b299      	uxth	r1, r3
 800e5f0:	fb02 6101 	mla	r1, r2, r1, r6
 800e5f4:	0c1e      	lsrs	r6, r3, #16
 800e5f6:	0c0b      	lsrs	r3, r1, #16
 800e5f8:	fb02 3306 	mla	r3, r2, r6, r3
 800e5fc:	b289      	uxth	r1, r1
 800e5fe:	3001      	adds	r0, #1
 800e600:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e604:	4285      	cmp	r5, r0
 800e606:	f84c 1b04 	str.w	r1, [ip], #4
 800e60a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e60e:	dcec      	bgt.n	800e5ea <__multadd+0x12>
 800e610:	b30e      	cbz	r6, 800e656 <__multadd+0x7e>
 800e612:	68a3      	ldr	r3, [r4, #8]
 800e614:	42ab      	cmp	r3, r5
 800e616:	dc19      	bgt.n	800e64c <__multadd+0x74>
 800e618:	6861      	ldr	r1, [r4, #4]
 800e61a:	4638      	mov	r0, r7
 800e61c:	3101      	adds	r1, #1
 800e61e:	f7ff ff79 	bl	800e514 <_Balloc>
 800e622:	4680      	mov	r8, r0
 800e624:	b928      	cbnz	r0, 800e632 <__multadd+0x5a>
 800e626:	4602      	mov	r2, r0
 800e628:	4b0c      	ldr	r3, [pc, #48]	@ (800e65c <__multadd+0x84>)
 800e62a:	480d      	ldr	r0, [pc, #52]	@ (800e660 <__multadd+0x88>)
 800e62c:	21ba      	movs	r1, #186	@ 0xba
 800e62e:	f000 fd1f 	bl	800f070 <__assert_func>
 800e632:	6922      	ldr	r2, [r4, #16]
 800e634:	3202      	adds	r2, #2
 800e636:	f104 010c 	add.w	r1, r4, #12
 800e63a:	0092      	lsls	r2, r2, #2
 800e63c:	300c      	adds	r0, #12
 800e63e:	f000 fd09 	bl	800f054 <memcpy>
 800e642:	4621      	mov	r1, r4
 800e644:	4638      	mov	r0, r7
 800e646:	f7ff ffa5 	bl	800e594 <_Bfree>
 800e64a:	4644      	mov	r4, r8
 800e64c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e650:	3501      	adds	r5, #1
 800e652:	615e      	str	r6, [r3, #20]
 800e654:	6125      	str	r5, [r4, #16]
 800e656:	4620      	mov	r0, r4
 800e658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e65c:	08010424 	.word	0x08010424
 800e660:	08010435 	.word	0x08010435

0800e664 <__hi0bits>:
 800e664:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e668:	4603      	mov	r3, r0
 800e66a:	bf36      	itet	cc
 800e66c:	0403      	lslcc	r3, r0, #16
 800e66e:	2000      	movcs	r0, #0
 800e670:	2010      	movcc	r0, #16
 800e672:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e676:	bf3c      	itt	cc
 800e678:	021b      	lslcc	r3, r3, #8
 800e67a:	3008      	addcc	r0, #8
 800e67c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e680:	bf3c      	itt	cc
 800e682:	011b      	lslcc	r3, r3, #4
 800e684:	3004      	addcc	r0, #4
 800e686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e68a:	bf3c      	itt	cc
 800e68c:	009b      	lslcc	r3, r3, #2
 800e68e:	3002      	addcc	r0, #2
 800e690:	2b00      	cmp	r3, #0
 800e692:	db05      	blt.n	800e6a0 <__hi0bits+0x3c>
 800e694:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e698:	f100 0001 	add.w	r0, r0, #1
 800e69c:	bf08      	it	eq
 800e69e:	2020      	moveq	r0, #32
 800e6a0:	4770      	bx	lr

0800e6a2 <__lo0bits>:
 800e6a2:	6803      	ldr	r3, [r0, #0]
 800e6a4:	4602      	mov	r2, r0
 800e6a6:	f013 0007 	ands.w	r0, r3, #7
 800e6aa:	d00b      	beq.n	800e6c4 <__lo0bits+0x22>
 800e6ac:	07d9      	lsls	r1, r3, #31
 800e6ae:	d421      	bmi.n	800e6f4 <__lo0bits+0x52>
 800e6b0:	0798      	lsls	r0, r3, #30
 800e6b2:	bf49      	itett	mi
 800e6b4:	085b      	lsrmi	r3, r3, #1
 800e6b6:	089b      	lsrpl	r3, r3, #2
 800e6b8:	2001      	movmi	r0, #1
 800e6ba:	6013      	strmi	r3, [r2, #0]
 800e6bc:	bf5c      	itt	pl
 800e6be:	6013      	strpl	r3, [r2, #0]
 800e6c0:	2002      	movpl	r0, #2
 800e6c2:	4770      	bx	lr
 800e6c4:	b299      	uxth	r1, r3
 800e6c6:	b909      	cbnz	r1, 800e6cc <__lo0bits+0x2a>
 800e6c8:	0c1b      	lsrs	r3, r3, #16
 800e6ca:	2010      	movs	r0, #16
 800e6cc:	b2d9      	uxtb	r1, r3
 800e6ce:	b909      	cbnz	r1, 800e6d4 <__lo0bits+0x32>
 800e6d0:	3008      	adds	r0, #8
 800e6d2:	0a1b      	lsrs	r3, r3, #8
 800e6d4:	0719      	lsls	r1, r3, #28
 800e6d6:	bf04      	itt	eq
 800e6d8:	091b      	lsreq	r3, r3, #4
 800e6da:	3004      	addeq	r0, #4
 800e6dc:	0799      	lsls	r1, r3, #30
 800e6de:	bf04      	itt	eq
 800e6e0:	089b      	lsreq	r3, r3, #2
 800e6e2:	3002      	addeq	r0, #2
 800e6e4:	07d9      	lsls	r1, r3, #31
 800e6e6:	d403      	bmi.n	800e6f0 <__lo0bits+0x4e>
 800e6e8:	085b      	lsrs	r3, r3, #1
 800e6ea:	f100 0001 	add.w	r0, r0, #1
 800e6ee:	d003      	beq.n	800e6f8 <__lo0bits+0x56>
 800e6f0:	6013      	str	r3, [r2, #0]
 800e6f2:	4770      	bx	lr
 800e6f4:	2000      	movs	r0, #0
 800e6f6:	4770      	bx	lr
 800e6f8:	2020      	movs	r0, #32
 800e6fa:	4770      	bx	lr

0800e6fc <__i2b>:
 800e6fc:	b510      	push	{r4, lr}
 800e6fe:	460c      	mov	r4, r1
 800e700:	2101      	movs	r1, #1
 800e702:	f7ff ff07 	bl	800e514 <_Balloc>
 800e706:	4602      	mov	r2, r0
 800e708:	b928      	cbnz	r0, 800e716 <__i2b+0x1a>
 800e70a:	4b05      	ldr	r3, [pc, #20]	@ (800e720 <__i2b+0x24>)
 800e70c:	4805      	ldr	r0, [pc, #20]	@ (800e724 <__i2b+0x28>)
 800e70e:	f240 1145 	movw	r1, #325	@ 0x145
 800e712:	f000 fcad 	bl	800f070 <__assert_func>
 800e716:	2301      	movs	r3, #1
 800e718:	6144      	str	r4, [r0, #20]
 800e71a:	6103      	str	r3, [r0, #16]
 800e71c:	bd10      	pop	{r4, pc}
 800e71e:	bf00      	nop
 800e720:	08010424 	.word	0x08010424
 800e724:	08010435 	.word	0x08010435

0800e728 <__multiply>:
 800e728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e72c:	4614      	mov	r4, r2
 800e72e:	690a      	ldr	r2, [r1, #16]
 800e730:	6923      	ldr	r3, [r4, #16]
 800e732:	429a      	cmp	r2, r3
 800e734:	bfa8      	it	ge
 800e736:	4623      	movge	r3, r4
 800e738:	460f      	mov	r7, r1
 800e73a:	bfa4      	itt	ge
 800e73c:	460c      	movge	r4, r1
 800e73e:	461f      	movge	r7, r3
 800e740:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e744:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e748:	68a3      	ldr	r3, [r4, #8]
 800e74a:	6861      	ldr	r1, [r4, #4]
 800e74c:	eb0a 0609 	add.w	r6, sl, r9
 800e750:	42b3      	cmp	r3, r6
 800e752:	b085      	sub	sp, #20
 800e754:	bfb8      	it	lt
 800e756:	3101      	addlt	r1, #1
 800e758:	f7ff fedc 	bl	800e514 <_Balloc>
 800e75c:	b930      	cbnz	r0, 800e76c <__multiply+0x44>
 800e75e:	4602      	mov	r2, r0
 800e760:	4b44      	ldr	r3, [pc, #272]	@ (800e874 <__multiply+0x14c>)
 800e762:	4845      	ldr	r0, [pc, #276]	@ (800e878 <__multiply+0x150>)
 800e764:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e768:	f000 fc82 	bl	800f070 <__assert_func>
 800e76c:	f100 0514 	add.w	r5, r0, #20
 800e770:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e774:	462b      	mov	r3, r5
 800e776:	2200      	movs	r2, #0
 800e778:	4543      	cmp	r3, r8
 800e77a:	d321      	bcc.n	800e7c0 <__multiply+0x98>
 800e77c:	f107 0114 	add.w	r1, r7, #20
 800e780:	f104 0214 	add.w	r2, r4, #20
 800e784:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e788:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e78c:	9302      	str	r3, [sp, #8]
 800e78e:	1b13      	subs	r3, r2, r4
 800e790:	3b15      	subs	r3, #21
 800e792:	f023 0303 	bic.w	r3, r3, #3
 800e796:	3304      	adds	r3, #4
 800e798:	f104 0715 	add.w	r7, r4, #21
 800e79c:	42ba      	cmp	r2, r7
 800e79e:	bf38      	it	cc
 800e7a0:	2304      	movcc	r3, #4
 800e7a2:	9301      	str	r3, [sp, #4]
 800e7a4:	9b02      	ldr	r3, [sp, #8]
 800e7a6:	9103      	str	r1, [sp, #12]
 800e7a8:	428b      	cmp	r3, r1
 800e7aa:	d80c      	bhi.n	800e7c6 <__multiply+0x9e>
 800e7ac:	2e00      	cmp	r6, #0
 800e7ae:	dd03      	ble.n	800e7b8 <__multiply+0x90>
 800e7b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d05b      	beq.n	800e870 <__multiply+0x148>
 800e7b8:	6106      	str	r6, [r0, #16]
 800e7ba:	b005      	add	sp, #20
 800e7bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7c0:	f843 2b04 	str.w	r2, [r3], #4
 800e7c4:	e7d8      	b.n	800e778 <__multiply+0x50>
 800e7c6:	f8b1 a000 	ldrh.w	sl, [r1]
 800e7ca:	f1ba 0f00 	cmp.w	sl, #0
 800e7ce:	d024      	beq.n	800e81a <__multiply+0xf2>
 800e7d0:	f104 0e14 	add.w	lr, r4, #20
 800e7d4:	46a9      	mov	r9, r5
 800e7d6:	f04f 0c00 	mov.w	ip, #0
 800e7da:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e7de:	f8d9 3000 	ldr.w	r3, [r9]
 800e7e2:	fa1f fb87 	uxth.w	fp, r7
 800e7e6:	b29b      	uxth	r3, r3
 800e7e8:	fb0a 330b 	mla	r3, sl, fp, r3
 800e7ec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e7f0:	f8d9 7000 	ldr.w	r7, [r9]
 800e7f4:	4463      	add	r3, ip
 800e7f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e7fa:	fb0a c70b 	mla	r7, sl, fp, ip
 800e7fe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e802:	b29b      	uxth	r3, r3
 800e804:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e808:	4572      	cmp	r2, lr
 800e80a:	f849 3b04 	str.w	r3, [r9], #4
 800e80e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e812:	d8e2      	bhi.n	800e7da <__multiply+0xb2>
 800e814:	9b01      	ldr	r3, [sp, #4]
 800e816:	f845 c003 	str.w	ip, [r5, r3]
 800e81a:	9b03      	ldr	r3, [sp, #12]
 800e81c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e820:	3104      	adds	r1, #4
 800e822:	f1b9 0f00 	cmp.w	r9, #0
 800e826:	d021      	beq.n	800e86c <__multiply+0x144>
 800e828:	682b      	ldr	r3, [r5, #0]
 800e82a:	f104 0c14 	add.w	ip, r4, #20
 800e82e:	46ae      	mov	lr, r5
 800e830:	f04f 0a00 	mov.w	sl, #0
 800e834:	f8bc b000 	ldrh.w	fp, [ip]
 800e838:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e83c:	fb09 770b 	mla	r7, r9, fp, r7
 800e840:	4457      	add	r7, sl
 800e842:	b29b      	uxth	r3, r3
 800e844:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e848:	f84e 3b04 	str.w	r3, [lr], #4
 800e84c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e850:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e854:	f8be 3000 	ldrh.w	r3, [lr]
 800e858:	fb09 330a 	mla	r3, r9, sl, r3
 800e85c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e860:	4562      	cmp	r2, ip
 800e862:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e866:	d8e5      	bhi.n	800e834 <__multiply+0x10c>
 800e868:	9f01      	ldr	r7, [sp, #4]
 800e86a:	51eb      	str	r3, [r5, r7]
 800e86c:	3504      	adds	r5, #4
 800e86e:	e799      	b.n	800e7a4 <__multiply+0x7c>
 800e870:	3e01      	subs	r6, #1
 800e872:	e79b      	b.n	800e7ac <__multiply+0x84>
 800e874:	08010424 	.word	0x08010424
 800e878:	08010435 	.word	0x08010435

0800e87c <__pow5mult>:
 800e87c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e880:	4615      	mov	r5, r2
 800e882:	f012 0203 	ands.w	r2, r2, #3
 800e886:	4607      	mov	r7, r0
 800e888:	460e      	mov	r6, r1
 800e88a:	d007      	beq.n	800e89c <__pow5mult+0x20>
 800e88c:	4c25      	ldr	r4, [pc, #148]	@ (800e924 <__pow5mult+0xa8>)
 800e88e:	3a01      	subs	r2, #1
 800e890:	2300      	movs	r3, #0
 800e892:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e896:	f7ff fe9f 	bl	800e5d8 <__multadd>
 800e89a:	4606      	mov	r6, r0
 800e89c:	10ad      	asrs	r5, r5, #2
 800e89e:	d03d      	beq.n	800e91c <__pow5mult+0xa0>
 800e8a0:	69fc      	ldr	r4, [r7, #28]
 800e8a2:	b97c      	cbnz	r4, 800e8c4 <__pow5mult+0x48>
 800e8a4:	2010      	movs	r0, #16
 800e8a6:	f7fe f887 	bl	800c9b8 <malloc>
 800e8aa:	4602      	mov	r2, r0
 800e8ac:	61f8      	str	r0, [r7, #28]
 800e8ae:	b928      	cbnz	r0, 800e8bc <__pow5mult+0x40>
 800e8b0:	4b1d      	ldr	r3, [pc, #116]	@ (800e928 <__pow5mult+0xac>)
 800e8b2:	481e      	ldr	r0, [pc, #120]	@ (800e92c <__pow5mult+0xb0>)
 800e8b4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e8b8:	f000 fbda 	bl	800f070 <__assert_func>
 800e8bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e8c0:	6004      	str	r4, [r0, #0]
 800e8c2:	60c4      	str	r4, [r0, #12]
 800e8c4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e8c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e8cc:	b94c      	cbnz	r4, 800e8e2 <__pow5mult+0x66>
 800e8ce:	f240 2171 	movw	r1, #625	@ 0x271
 800e8d2:	4638      	mov	r0, r7
 800e8d4:	f7ff ff12 	bl	800e6fc <__i2b>
 800e8d8:	2300      	movs	r3, #0
 800e8da:	f8c8 0008 	str.w	r0, [r8, #8]
 800e8de:	4604      	mov	r4, r0
 800e8e0:	6003      	str	r3, [r0, #0]
 800e8e2:	f04f 0900 	mov.w	r9, #0
 800e8e6:	07eb      	lsls	r3, r5, #31
 800e8e8:	d50a      	bpl.n	800e900 <__pow5mult+0x84>
 800e8ea:	4631      	mov	r1, r6
 800e8ec:	4622      	mov	r2, r4
 800e8ee:	4638      	mov	r0, r7
 800e8f0:	f7ff ff1a 	bl	800e728 <__multiply>
 800e8f4:	4631      	mov	r1, r6
 800e8f6:	4680      	mov	r8, r0
 800e8f8:	4638      	mov	r0, r7
 800e8fa:	f7ff fe4b 	bl	800e594 <_Bfree>
 800e8fe:	4646      	mov	r6, r8
 800e900:	106d      	asrs	r5, r5, #1
 800e902:	d00b      	beq.n	800e91c <__pow5mult+0xa0>
 800e904:	6820      	ldr	r0, [r4, #0]
 800e906:	b938      	cbnz	r0, 800e918 <__pow5mult+0x9c>
 800e908:	4622      	mov	r2, r4
 800e90a:	4621      	mov	r1, r4
 800e90c:	4638      	mov	r0, r7
 800e90e:	f7ff ff0b 	bl	800e728 <__multiply>
 800e912:	6020      	str	r0, [r4, #0]
 800e914:	f8c0 9000 	str.w	r9, [r0]
 800e918:	4604      	mov	r4, r0
 800e91a:	e7e4      	b.n	800e8e6 <__pow5mult+0x6a>
 800e91c:	4630      	mov	r0, r6
 800e91e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e922:	bf00      	nop
 800e924:	08010490 	.word	0x08010490
 800e928:	080103b5 	.word	0x080103b5
 800e92c:	08010435 	.word	0x08010435

0800e930 <__lshift>:
 800e930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e934:	460c      	mov	r4, r1
 800e936:	6849      	ldr	r1, [r1, #4]
 800e938:	6923      	ldr	r3, [r4, #16]
 800e93a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e93e:	68a3      	ldr	r3, [r4, #8]
 800e940:	4607      	mov	r7, r0
 800e942:	4691      	mov	r9, r2
 800e944:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e948:	f108 0601 	add.w	r6, r8, #1
 800e94c:	42b3      	cmp	r3, r6
 800e94e:	db0b      	blt.n	800e968 <__lshift+0x38>
 800e950:	4638      	mov	r0, r7
 800e952:	f7ff fddf 	bl	800e514 <_Balloc>
 800e956:	4605      	mov	r5, r0
 800e958:	b948      	cbnz	r0, 800e96e <__lshift+0x3e>
 800e95a:	4602      	mov	r2, r0
 800e95c:	4b28      	ldr	r3, [pc, #160]	@ (800ea00 <__lshift+0xd0>)
 800e95e:	4829      	ldr	r0, [pc, #164]	@ (800ea04 <__lshift+0xd4>)
 800e960:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e964:	f000 fb84 	bl	800f070 <__assert_func>
 800e968:	3101      	adds	r1, #1
 800e96a:	005b      	lsls	r3, r3, #1
 800e96c:	e7ee      	b.n	800e94c <__lshift+0x1c>
 800e96e:	2300      	movs	r3, #0
 800e970:	f100 0114 	add.w	r1, r0, #20
 800e974:	f100 0210 	add.w	r2, r0, #16
 800e978:	4618      	mov	r0, r3
 800e97a:	4553      	cmp	r3, sl
 800e97c:	db33      	blt.n	800e9e6 <__lshift+0xb6>
 800e97e:	6920      	ldr	r0, [r4, #16]
 800e980:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e984:	f104 0314 	add.w	r3, r4, #20
 800e988:	f019 091f 	ands.w	r9, r9, #31
 800e98c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e990:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e994:	d02b      	beq.n	800e9ee <__lshift+0xbe>
 800e996:	f1c9 0e20 	rsb	lr, r9, #32
 800e99a:	468a      	mov	sl, r1
 800e99c:	2200      	movs	r2, #0
 800e99e:	6818      	ldr	r0, [r3, #0]
 800e9a0:	fa00 f009 	lsl.w	r0, r0, r9
 800e9a4:	4310      	orrs	r0, r2
 800e9a6:	f84a 0b04 	str.w	r0, [sl], #4
 800e9aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9ae:	459c      	cmp	ip, r3
 800e9b0:	fa22 f20e 	lsr.w	r2, r2, lr
 800e9b4:	d8f3      	bhi.n	800e99e <__lshift+0x6e>
 800e9b6:	ebac 0304 	sub.w	r3, ip, r4
 800e9ba:	3b15      	subs	r3, #21
 800e9bc:	f023 0303 	bic.w	r3, r3, #3
 800e9c0:	3304      	adds	r3, #4
 800e9c2:	f104 0015 	add.w	r0, r4, #21
 800e9c6:	4584      	cmp	ip, r0
 800e9c8:	bf38      	it	cc
 800e9ca:	2304      	movcc	r3, #4
 800e9cc:	50ca      	str	r2, [r1, r3]
 800e9ce:	b10a      	cbz	r2, 800e9d4 <__lshift+0xa4>
 800e9d0:	f108 0602 	add.w	r6, r8, #2
 800e9d4:	3e01      	subs	r6, #1
 800e9d6:	4638      	mov	r0, r7
 800e9d8:	612e      	str	r6, [r5, #16]
 800e9da:	4621      	mov	r1, r4
 800e9dc:	f7ff fdda 	bl	800e594 <_Bfree>
 800e9e0:	4628      	mov	r0, r5
 800e9e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800e9ea:	3301      	adds	r3, #1
 800e9ec:	e7c5      	b.n	800e97a <__lshift+0x4a>
 800e9ee:	3904      	subs	r1, #4
 800e9f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9f4:	f841 2f04 	str.w	r2, [r1, #4]!
 800e9f8:	459c      	cmp	ip, r3
 800e9fa:	d8f9      	bhi.n	800e9f0 <__lshift+0xc0>
 800e9fc:	e7ea      	b.n	800e9d4 <__lshift+0xa4>
 800e9fe:	bf00      	nop
 800ea00:	08010424 	.word	0x08010424
 800ea04:	08010435 	.word	0x08010435

0800ea08 <__mcmp>:
 800ea08:	690a      	ldr	r2, [r1, #16]
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	6900      	ldr	r0, [r0, #16]
 800ea0e:	1a80      	subs	r0, r0, r2
 800ea10:	b530      	push	{r4, r5, lr}
 800ea12:	d10e      	bne.n	800ea32 <__mcmp+0x2a>
 800ea14:	3314      	adds	r3, #20
 800ea16:	3114      	adds	r1, #20
 800ea18:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ea1c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ea20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ea24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ea28:	4295      	cmp	r5, r2
 800ea2a:	d003      	beq.n	800ea34 <__mcmp+0x2c>
 800ea2c:	d205      	bcs.n	800ea3a <__mcmp+0x32>
 800ea2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ea32:	bd30      	pop	{r4, r5, pc}
 800ea34:	42a3      	cmp	r3, r4
 800ea36:	d3f3      	bcc.n	800ea20 <__mcmp+0x18>
 800ea38:	e7fb      	b.n	800ea32 <__mcmp+0x2a>
 800ea3a:	2001      	movs	r0, #1
 800ea3c:	e7f9      	b.n	800ea32 <__mcmp+0x2a>
	...

0800ea40 <__mdiff>:
 800ea40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea44:	4689      	mov	r9, r1
 800ea46:	4606      	mov	r6, r0
 800ea48:	4611      	mov	r1, r2
 800ea4a:	4648      	mov	r0, r9
 800ea4c:	4614      	mov	r4, r2
 800ea4e:	f7ff ffdb 	bl	800ea08 <__mcmp>
 800ea52:	1e05      	subs	r5, r0, #0
 800ea54:	d112      	bne.n	800ea7c <__mdiff+0x3c>
 800ea56:	4629      	mov	r1, r5
 800ea58:	4630      	mov	r0, r6
 800ea5a:	f7ff fd5b 	bl	800e514 <_Balloc>
 800ea5e:	4602      	mov	r2, r0
 800ea60:	b928      	cbnz	r0, 800ea6e <__mdiff+0x2e>
 800ea62:	4b3f      	ldr	r3, [pc, #252]	@ (800eb60 <__mdiff+0x120>)
 800ea64:	f240 2137 	movw	r1, #567	@ 0x237
 800ea68:	483e      	ldr	r0, [pc, #248]	@ (800eb64 <__mdiff+0x124>)
 800ea6a:	f000 fb01 	bl	800f070 <__assert_func>
 800ea6e:	2301      	movs	r3, #1
 800ea70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ea74:	4610      	mov	r0, r2
 800ea76:	b003      	add	sp, #12
 800ea78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea7c:	bfbc      	itt	lt
 800ea7e:	464b      	movlt	r3, r9
 800ea80:	46a1      	movlt	r9, r4
 800ea82:	4630      	mov	r0, r6
 800ea84:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ea88:	bfba      	itte	lt
 800ea8a:	461c      	movlt	r4, r3
 800ea8c:	2501      	movlt	r5, #1
 800ea8e:	2500      	movge	r5, #0
 800ea90:	f7ff fd40 	bl	800e514 <_Balloc>
 800ea94:	4602      	mov	r2, r0
 800ea96:	b918      	cbnz	r0, 800eaa0 <__mdiff+0x60>
 800ea98:	4b31      	ldr	r3, [pc, #196]	@ (800eb60 <__mdiff+0x120>)
 800ea9a:	f240 2145 	movw	r1, #581	@ 0x245
 800ea9e:	e7e3      	b.n	800ea68 <__mdiff+0x28>
 800eaa0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800eaa4:	6926      	ldr	r6, [r4, #16]
 800eaa6:	60c5      	str	r5, [r0, #12]
 800eaa8:	f109 0310 	add.w	r3, r9, #16
 800eaac:	f109 0514 	add.w	r5, r9, #20
 800eab0:	f104 0e14 	add.w	lr, r4, #20
 800eab4:	f100 0b14 	add.w	fp, r0, #20
 800eab8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800eabc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800eac0:	9301      	str	r3, [sp, #4]
 800eac2:	46d9      	mov	r9, fp
 800eac4:	f04f 0c00 	mov.w	ip, #0
 800eac8:	9b01      	ldr	r3, [sp, #4]
 800eaca:	f85e 0b04 	ldr.w	r0, [lr], #4
 800eace:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ead2:	9301      	str	r3, [sp, #4]
 800ead4:	fa1f f38a 	uxth.w	r3, sl
 800ead8:	4619      	mov	r1, r3
 800eada:	b283      	uxth	r3, r0
 800eadc:	1acb      	subs	r3, r1, r3
 800eade:	0c00      	lsrs	r0, r0, #16
 800eae0:	4463      	add	r3, ip
 800eae2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800eae6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800eaea:	b29b      	uxth	r3, r3
 800eaec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800eaf0:	4576      	cmp	r6, lr
 800eaf2:	f849 3b04 	str.w	r3, [r9], #4
 800eaf6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eafa:	d8e5      	bhi.n	800eac8 <__mdiff+0x88>
 800eafc:	1b33      	subs	r3, r6, r4
 800eafe:	3b15      	subs	r3, #21
 800eb00:	f023 0303 	bic.w	r3, r3, #3
 800eb04:	3415      	adds	r4, #21
 800eb06:	3304      	adds	r3, #4
 800eb08:	42a6      	cmp	r6, r4
 800eb0a:	bf38      	it	cc
 800eb0c:	2304      	movcc	r3, #4
 800eb0e:	441d      	add	r5, r3
 800eb10:	445b      	add	r3, fp
 800eb12:	461e      	mov	r6, r3
 800eb14:	462c      	mov	r4, r5
 800eb16:	4544      	cmp	r4, r8
 800eb18:	d30e      	bcc.n	800eb38 <__mdiff+0xf8>
 800eb1a:	f108 0103 	add.w	r1, r8, #3
 800eb1e:	1b49      	subs	r1, r1, r5
 800eb20:	f021 0103 	bic.w	r1, r1, #3
 800eb24:	3d03      	subs	r5, #3
 800eb26:	45a8      	cmp	r8, r5
 800eb28:	bf38      	it	cc
 800eb2a:	2100      	movcc	r1, #0
 800eb2c:	440b      	add	r3, r1
 800eb2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eb32:	b191      	cbz	r1, 800eb5a <__mdiff+0x11a>
 800eb34:	6117      	str	r7, [r2, #16]
 800eb36:	e79d      	b.n	800ea74 <__mdiff+0x34>
 800eb38:	f854 1b04 	ldr.w	r1, [r4], #4
 800eb3c:	46e6      	mov	lr, ip
 800eb3e:	0c08      	lsrs	r0, r1, #16
 800eb40:	fa1c fc81 	uxtah	ip, ip, r1
 800eb44:	4471      	add	r1, lr
 800eb46:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800eb4a:	b289      	uxth	r1, r1
 800eb4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800eb50:	f846 1b04 	str.w	r1, [r6], #4
 800eb54:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eb58:	e7dd      	b.n	800eb16 <__mdiff+0xd6>
 800eb5a:	3f01      	subs	r7, #1
 800eb5c:	e7e7      	b.n	800eb2e <__mdiff+0xee>
 800eb5e:	bf00      	nop
 800eb60:	08010424 	.word	0x08010424
 800eb64:	08010435 	.word	0x08010435

0800eb68 <__d2b>:
 800eb68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800eb6c:	460f      	mov	r7, r1
 800eb6e:	2101      	movs	r1, #1
 800eb70:	ec59 8b10 	vmov	r8, r9, d0
 800eb74:	4616      	mov	r6, r2
 800eb76:	f7ff fccd 	bl	800e514 <_Balloc>
 800eb7a:	4604      	mov	r4, r0
 800eb7c:	b930      	cbnz	r0, 800eb8c <__d2b+0x24>
 800eb7e:	4602      	mov	r2, r0
 800eb80:	4b23      	ldr	r3, [pc, #140]	@ (800ec10 <__d2b+0xa8>)
 800eb82:	4824      	ldr	r0, [pc, #144]	@ (800ec14 <__d2b+0xac>)
 800eb84:	f240 310f 	movw	r1, #783	@ 0x30f
 800eb88:	f000 fa72 	bl	800f070 <__assert_func>
 800eb8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800eb90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eb94:	b10d      	cbz	r5, 800eb9a <__d2b+0x32>
 800eb96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800eb9a:	9301      	str	r3, [sp, #4]
 800eb9c:	f1b8 0300 	subs.w	r3, r8, #0
 800eba0:	d023      	beq.n	800ebea <__d2b+0x82>
 800eba2:	4668      	mov	r0, sp
 800eba4:	9300      	str	r3, [sp, #0]
 800eba6:	f7ff fd7c 	bl	800e6a2 <__lo0bits>
 800ebaa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ebae:	b1d0      	cbz	r0, 800ebe6 <__d2b+0x7e>
 800ebb0:	f1c0 0320 	rsb	r3, r0, #32
 800ebb4:	fa02 f303 	lsl.w	r3, r2, r3
 800ebb8:	430b      	orrs	r3, r1
 800ebba:	40c2      	lsrs	r2, r0
 800ebbc:	6163      	str	r3, [r4, #20]
 800ebbe:	9201      	str	r2, [sp, #4]
 800ebc0:	9b01      	ldr	r3, [sp, #4]
 800ebc2:	61a3      	str	r3, [r4, #24]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	bf0c      	ite	eq
 800ebc8:	2201      	moveq	r2, #1
 800ebca:	2202      	movne	r2, #2
 800ebcc:	6122      	str	r2, [r4, #16]
 800ebce:	b1a5      	cbz	r5, 800ebfa <__d2b+0x92>
 800ebd0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ebd4:	4405      	add	r5, r0
 800ebd6:	603d      	str	r5, [r7, #0]
 800ebd8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ebdc:	6030      	str	r0, [r6, #0]
 800ebde:	4620      	mov	r0, r4
 800ebe0:	b003      	add	sp, #12
 800ebe2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebe6:	6161      	str	r1, [r4, #20]
 800ebe8:	e7ea      	b.n	800ebc0 <__d2b+0x58>
 800ebea:	a801      	add	r0, sp, #4
 800ebec:	f7ff fd59 	bl	800e6a2 <__lo0bits>
 800ebf0:	9b01      	ldr	r3, [sp, #4]
 800ebf2:	6163      	str	r3, [r4, #20]
 800ebf4:	3020      	adds	r0, #32
 800ebf6:	2201      	movs	r2, #1
 800ebf8:	e7e8      	b.n	800ebcc <__d2b+0x64>
 800ebfa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ebfe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ec02:	6038      	str	r0, [r7, #0]
 800ec04:	6918      	ldr	r0, [r3, #16]
 800ec06:	f7ff fd2d 	bl	800e664 <__hi0bits>
 800ec0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ec0e:	e7e5      	b.n	800ebdc <__d2b+0x74>
 800ec10:	08010424 	.word	0x08010424
 800ec14:	08010435 	.word	0x08010435

0800ec18 <__ssputs_r>:
 800ec18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec1c:	688e      	ldr	r6, [r1, #8]
 800ec1e:	461f      	mov	r7, r3
 800ec20:	42be      	cmp	r6, r7
 800ec22:	680b      	ldr	r3, [r1, #0]
 800ec24:	4682      	mov	sl, r0
 800ec26:	460c      	mov	r4, r1
 800ec28:	4690      	mov	r8, r2
 800ec2a:	d82d      	bhi.n	800ec88 <__ssputs_r+0x70>
 800ec2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ec30:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ec34:	d026      	beq.n	800ec84 <__ssputs_r+0x6c>
 800ec36:	6965      	ldr	r5, [r4, #20]
 800ec38:	6909      	ldr	r1, [r1, #16]
 800ec3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ec3e:	eba3 0901 	sub.w	r9, r3, r1
 800ec42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ec46:	1c7b      	adds	r3, r7, #1
 800ec48:	444b      	add	r3, r9
 800ec4a:	106d      	asrs	r5, r5, #1
 800ec4c:	429d      	cmp	r5, r3
 800ec4e:	bf38      	it	cc
 800ec50:	461d      	movcc	r5, r3
 800ec52:	0553      	lsls	r3, r2, #21
 800ec54:	d527      	bpl.n	800eca6 <__ssputs_r+0x8e>
 800ec56:	4629      	mov	r1, r5
 800ec58:	f7fd fee0 	bl	800ca1c <_malloc_r>
 800ec5c:	4606      	mov	r6, r0
 800ec5e:	b360      	cbz	r0, 800ecba <__ssputs_r+0xa2>
 800ec60:	6921      	ldr	r1, [r4, #16]
 800ec62:	464a      	mov	r2, r9
 800ec64:	f000 f9f6 	bl	800f054 <memcpy>
 800ec68:	89a3      	ldrh	r3, [r4, #12]
 800ec6a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ec6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ec72:	81a3      	strh	r3, [r4, #12]
 800ec74:	6126      	str	r6, [r4, #16]
 800ec76:	6165      	str	r5, [r4, #20]
 800ec78:	444e      	add	r6, r9
 800ec7a:	eba5 0509 	sub.w	r5, r5, r9
 800ec7e:	6026      	str	r6, [r4, #0]
 800ec80:	60a5      	str	r5, [r4, #8]
 800ec82:	463e      	mov	r6, r7
 800ec84:	42be      	cmp	r6, r7
 800ec86:	d900      	bls.n	800ec8a <__ssputs_r+0x72>
 800ec88:	463e      	mov	r6, r7
 800ec8a:	6820      	ldr	r0, [r4, #0]
 800ec8c:	4632      	mov	r2, r6
 800ec8e:	4641      	mov	r1, r8
 800ec90:	f000 f9c6 	bl	800f020 <memmove>
 800ec94:	68a3      	ldr	r3, [r4, #8]
 800ec96:	1b9b      	subs	r3, r3, r6
 800ec98:	60a3      	str	r3, [r4, #8]
 800ec9a:	6823      	ldr	r3, [r4, #0]
 800ec9c:	4433      	add	r3, r6
 800ec9e:	6023      	str	r3, [r4, #0]
 800eca0:	2000      	movs	r0, #0
 800eca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eca6:	462a      	mov	r2, r5
 800eca8:	f000 fa26 	bl	800f0f8 <_realloc_r>
 800ecac:	4606      	mov	r6, r0
 800ecae:	2800      	cmp	r0, #0
 800ecb0:	d1e0      	bne.n	800ec74 <__ssputs_r+0x5c>
 800ecb2:	6921      	ldr	r1, [r4, #16]
 800ecb4:	4650      	mov	r0, sl
 800ecb6:	f7ff fbe3 	bl	800e480 <_free_r>
 800ecba:	230c      	movs	r3, #12
 800ecbc:	f8ca 3000 	str.w	r3, [sl]
 800ecc0:	89a3      	ldrh	r3, [r4, #12]
 800ecc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ecc6:	81a3      	strh	r3, [r4, #12]
 800ecc8:	f04f 30ff 	mov.w	r0, #4294967295
 800eccc:	e7e9      	b.n	800eca2 <__ssputs_r+0x8a>
	...

0800ecd0 <_svfiprintf_r>:
 800ecd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecd4:	4698      	mov	r8, r3
 800ecd6:	898b      	ldrh	r3, [r1, #12]
 800ecd8:	061b      	lsls	r3, r3, #24
 800ecda:	b09d      	sub	sp, #116	@ 0x74
 800ecdc:	4607      	mov	r7, r0
 800ecde:	460d      	mov	r5, r1
 800ece0:	4614      	mov	r4, r2
 800ece2:	d510      	bpl.n	800ed06 <_svfiprintf_r+0x36>
 800ece4:	690b      	ldr	r3, [r1, #16]
 800ece6:	b973      	cbnz	r3, 800ed06 <_svfiprintf_r+0x36>
 800ece8:	2140      	movs	r1, #64	@ 0x40
 800ecea:	f7fd fe97 	bl	800ca1c <_malloc_r>
 800ecee:	6028      	str	r0, [r5, #0]
 800ecf0:	6128      	str	r0, [r5, #16]
 800ecf2:	b930      	cbnz	r0, 800ed02 <_svfiprintf_r+0x32>
 800ecf4:	230c      	movs	r3, #12
 800ecf6:	603b      	str	r3, [r7, #0]
 800ecf8:	f04f 30ff 	mov.w	r0, #4294967295
 800ecfc:	b01d      	add	sp, #116	@ 0x74
 800ecfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed02:	2340      	movs	r3, #64	@ 0x40
 800ed04:	616b      	str	r3, [r5, #20]
 800ed06:	2300      	movs	r3, #0
 800ed08:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed0a:	2320      	movs	r3, #32
 800ed0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ed10:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed14:	2330      	movs	r3, #48	@ 0x30
 800ed16:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800eeb4 <_svfiprintf_r+0x1e4>
 800ed1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ed1e:	f04f 0901 	mov.w	r9, #1
 800ed22:	4623      	mov	r3, r4
 800ed24:	469a      	mov	sl, r3
 800ed26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed2a:	b10a      	cbz	r2, 800ed30 <_svfiprintf_r+0x60>
 800ed2c:	2a25      	cmp	r2, #37	@ 0x25
 800ed2e:	d1f9      	bne.n	800ed24 <_svfiprintf_r+0x54>
 800ed30:	ebba 0b04 	subs.w	fp, sl, r4
 800ed34:	d00b      	beq.n	800ed4e <_svfiprintf_r+0x7e>
 800ed36:	465b      	mov	r3, fp
 800ed38:	4622      	mov	r2, r4
 800ed3a:	4629      	mov	r1, r5
 800ed3c:	4638      	mov	r0, r7
 800ed3e:	f7ff ff6b 	bl	800ec18 <__ssputs_r>
 800ed42:	3001      	adds	r0, #1
 800ed44:	f000 80a7 	beq.w	800ee96 <_svfiprintf_r+0x1c6>
 800ed48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed4a:	445a      	add	r2, fp
 800ed4c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ed4e:	f89a 3000 	ldrb.w	r3, [sl]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	f000 809f 	beq.w	800ee96 <_svfiprintf_r+0x1c6>
 800ed58:	2300      	movs	r3, #0
 800ed5a:	f04f 32ff 	mov.w	r2, #4294967295
 800ed5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed62:	f10a 0a01 	add.w	sl, sl, #1
 800ed66:	9304      	str	r3, [sp, #16]
 800ed68:	9307      	str	r3, [sp, #28]
 800ed6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ed6e:	931a      	str	r3, [sp, #104]	@ 0x68
 800ed70:	4654      	mov	r4, sl
 800ed72:	2205      	movs	r2, #5
 800ed74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed78:	484e      	ldr	r0, [pc, #312]	@ (800eeb4 <_svfiprintf_r+0x1e4>)
 800ed7a:	f7f1 fa31 	bl	80001e0 <memchr>
 800ed7e:	9a04      	ldr	r2, [sp, #16]
 800ed80:	b9d8      	cbnz	r0, 800edba <_svfiprintf_r+0xea>
 800ed82:	06d0      	lsls	r0, r2, #27
 800ed84:	bf44      	itt	mi
 800ed86:	2320      	movmi	r3, #32
 800ed88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ed8c:	0711      	lsls	r1, r2, #28
 800ed8e:	bf44      	itt	mi
 800ed90:	232b      	movmi	r3, #43	@ 0x2b
 800ed92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ed96:	f89a 3000 	ldrb.w	r3, [sl]
 800ed9a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed9c:	d015      	beq.n	800edca <_svfiprintf_r+0xfa>
 800ed9e:	9a07      	ldr	r2, [sp, #28]
 800eda0:	4654      	mov	r4, sl
 800eda2:	2000      	movs	r0, #0
 800eda4:	f04f 0c0a 	mov.w	ip, #10
 800eda8:	4621      	mov	r1, r4
 800edaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800edae:	3b30      	subs	r3, #48	@ 0x30
 800edb0:	2b09      	cmp	r3, #9
 800edb2:	d94b      	bls.n	800ee4c <_svfiprintf_r+0x17c>
 800edb4:	b1b0      	cbz	r0, 800ede4 <_svfiprintf_r+0x114>
 800edb6:	9207      	str	r2, [sp, #28]
 800edb8:	e014      	b.n	800ede4 <_svfiprintf_r+0x114>
 800edba:	eba0 0308 	sub.w	r3, r0, r8
 800edbe:	fa09 f303 	lsl.w	r3, r9, r3
 800edc2:	4313      	orrs	r3, r2
 800edc4:	9304      	str	r3, [sp, #16]
 800edc6:	46a2      	mov	sl, r4
 800edc8:	e7d2      	b.n	800ed70 <_svfiprintf_r+0xa0>
 800edca:	9b03      	ldr	r3, [sp, #12]
 800edcc:	1d19      	adds	r1, r3, #4
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	9103      	str	r1, [sp, #12]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	bfbb      	ittet	lt
 800edd6:	425b      	neglt	r3, r3
 800edd8:	f042 0202 	orrlt.w	r2, r2, #2
 800eddc:	9307      	strge	r3, [sp, #28]
 800edde:	9307      	strlt	r3, [sp, #28]
 800ede0:	bfb8      	it	lt
 800ede2:	9204      	strlt	r2, [sp, #16]
 800ede4:	7823      	ldrb	r3, [r4, #0]
 800ede6:	2b2e      	cmp	r3, #46	@ 0x2e
 800ede8:	d10a      	bne.n	800ee00 <_svfiprintf_r+0x130>
 800edea:	7863      	ldrb	r3, [r4, #1]
 800edec:	2b2a      	cmp	r3, #42	@ 0x2a
 800edee:	d132      	bne.n	800ee56 <_svfiprintf_r+0x186>
 800edf0:	9b03      	ldr	r3, [sp, #12]
 800edf2:	1d1a      	adds	r2, r3, #4
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	9203      	str	r2, [sp, #12]
 800edf8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800edfc:	3402      	adds	r4, #2
 800edfe:	9305      	str	r3, [sp, #20]
 800ee00:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800eec4 <_svfiprintf_r+0x1f4>
 800ee04:	7821      	ldrb	r1, [r4, #0]
 800ee06:	2203      	movs	r2, #3
 800ee08:	4650      	mov	r0, sl
 800ee0a:	f7f1 f9e9 	bl	80001e0 <memchr>
 800ee0e:	b138      	cbz	r0, 800ee20 <_svfiprintf_r+0x150>
 800ee10:	9b04      	ldr	r3, [sp, #16]
 800ee12:	eba0 000a 	sub.w	r0, r0, sl
 800ee16:	2240      	movs	r2, #64	@ 0x40
 800ee18:	4082      	lsls	r2, r0
 800ee1a:	4313      	orrs	r3, r2
 800ee1c:	3401      	adds	r4, #1
 800ee1e:	9304      	str	r3, [sp, #16]
 800ee20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee24:	4824      	ldr	r0, [pc, #144]	@ (800eeb8 <_svfiprintf_r+0x1e8>)
 800ee26:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ee2a:	2206      	movs	r2, #6
 800ee2c:	f7f1 f9d8 	bl	80001e0 <memchr>
 800ee30:	2800      	cmp	r0, #0
 800ee32:	d036      	beq.n	800eea2 <_svfiprintf_r+0x1d2>
 800ee34:	4b21      	ldr	r3, [pc, #132]	@ (800eebc <_svfiprintf_r+0x1ec>)
 800ee36:	bb1b      	cbnz	r3, 800ee80 <_svfiprintf_r+0x1b0>
 800ee38:	9b03      	ldr	r3, [sp, #12]
 800ee3a:	3307      	adds	r3, #7
 800ee3c:	f023 0307 	bic.w	r3, r3, #7
 800ee40:	3308      	adds	r3, #8
 800ee42:	9303      	str	r3, [sp, #12]
 800ee44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee46:	4433      	add	r3, r6
 800ee48:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee4a:	e76a      	b.n	800ed22 <_svfiprintf_r+0x52>
 800ee4c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee50:	460c      	mov	r4, r1
 800ee52:	2001      	movs	r0, #1
 800ee54:	e7a8      	b.n	800eda8 <_svfiprintf_r+0xd8>
 800ee56:	2300      	movs	r3, #0
 800ee58:	3401      	adds	r4, #1
 800ee5a:	9305      	str	r3, [sp, #20]
 800ee5c:	4619      	mov	r1, r3
 800ee5e:	f04f 0c0a 	mov.w	ip, #10
 800ee62:	4620      	mov	r0, r4
 800ee64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee68:	3a30      	subs	r2, #48	@ 0x30
 800ee6a:	2a09      	cmp	r2, #9
 800ee6c:	d903      	bls.n	800ee76 <_svfiprintf_r+0x1a6>
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d0c6      	beq.n	800ee00 <_svfiprintf_r+0x130>
 800ee72:	9105      	str	r1, [sp, #20]
 800ee74:	e7c4      	b.n	800ee00 <_svfiprintf_r+0x130>
 800ee76:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee7a:	4604      	mov	r4, r0
 800ee7c:	2301      	movs	r3, #1
 800ee7e:	e7f0      	b.n	800ee62 <_svfiprintf_r+0x192>
 800ee80:	ab03      	add	r3, sp, #12
 800ee82:	9300      	str	r3, [sp, #0]
 800ee84:	462a      	mov	r2, r5
 800ee86:	4b0e      	ldr	r3, [pc, #56]	@ (800eec0 <_svfiprintf_r+0x1f0>)
 800ee88:	a904      	add	r1, sp, #16
 800ee8a:	4638      	mov	r0, r7
 800ee8c:	f7fd fef2 	bl	800cc74 <_printf_float>
 800ee90:	1c42      	adds	r2, r0, #1
 800ee92:	4606      	mov	r6, r0
 800ee94:	d1d6      	bne.n	800ee44 <_svfiprintf_r+0x174>
 800ee96:	89ab      	ldrh	r3, [r5, #12]
 800ee98:	065b      	lsls	r3, r3, #25
 800ee9a:	f53f af2d 	bmi.w	800ecf8 <_svfiprintf_r+0x28>
 800ee9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eea0:	e72c      	b.n	800ecfc <_svfiprintf_r+0x2c>
 800eea2:	ab03      	add	r3, sp, #12
 800eea4:	9300      	str	r3, [sp, #0]
 800eea6:	462a      	mov	r2, r5
 800eea8:	4b05      	ldr	r3, [pc, #20]	@ (800eec0 <_svfiprintf_r+0x1f0>)
 800eeaa:	a904      	add	r1, sp, #16
 800eeac:	4638      	mov	r0, r7
 800eeae:	f7fe f979 	bl	800d1a4 <_printf_i>
 800eeb2:	e7ed      	b.n	800ee90 <_svfiprintf_r+0x1c0>
 800eeb4:	08010590 	.word	0x08010590
 800eeb8:	0801059a 	.word	0x0801059a
 800eebc:	0800cc75 	.word	0x0800cc75
 800eec0:	0800ec19 	.word	0x0800ec19
 800eec4:	08010596 	.word	0x08010596

0800eec8 <__sflush_r>:
 800eec8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eed0:	0716      	lsls	r6, r2, #28
 800eed2:	4605      	mov	r5, r0
 800eed4:	460c      	mov	r4, r1
 800eed6:	d454      	bmi.n	800ef82 <__sflush_r+0xba>
 800eed8:	684b      	ldr	r3, [r1, #4]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	dc02      	bgt.n	800eee4 <__sflush_r+0x1c>
 800eede:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	dd48      	ble.n	800ef76 <__sflush_r+0xae>
 800eee4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eee6:	2e00      	cmp	r6, #0
 800eee8:	d045      	beq.n	800ef76 <__sflush_r+0xae>
 800eeea:	2300      	movs	r3, #0
 800eeec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800eef0:	682f      	ldr	r7, [r5, #0]
 800eef2:	6a21      	ldr	r1, [r4, #32]
 800eef4:	602b      	str	r3, [r5, #0]
 800eef6:	d030      	beq.n	800ef5a <__sflush_r+0x92>
 800eef8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800eefa:	89a3      	ldrh	r3, [r4, #12]
 800eefc:	0759      	lsls	r1, r3, #29
 800eefe:	d505      	bpl.n	800ef0c <__sflush_r+0x44>
 800ef00:	6863      	ldr	r3, [r4, #4]
 800ef02:	1ad2      	subs	r2, r2, r3
 800ef04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ef06:	b10b      	cbz	r3, 800ef0c <__sflush_r+0x44>
 800ef08:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ef0a:	1ad2      	subs	r2, r2, r3
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ef10:	6a21      	ldr	r1, [r4, #32]
 800ef12:	4628      	mov	r0, r5
 800ef14:	47b0      	blx	r6
 800ef16:	1c43      	adds	r3, r0, #1
 800ef18:	89a3      	ldrh	r3, [r4, #12]
 800ef1a:	d106      	bne.n	800ef2a <__sflush_r+0x62>
 800ef1c:	6829      	ldr	r1, [r5, #0]
 800ef1e:	291d      	cmp	r1, #29
 800ef20:	d82b      	bhi.n	800ef7a <__sflush_r+0xb2>
 800ef22:	4a2a      	ldr	r2, [pc, #168]	@ (800efcc <__sflush_r+0x104>)
 800ef24:	410a      	asrs	r2, r1
 800ef26:	07d6      	lsls	r6, r2, #31
 800ef28:	d427      	bmi.n	800ef7a <__sflush_r+0xb2>
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	6062      	str	r2, [r4, #4]
 800ef2e:	04d9      	lsls	r1, r3, #19
 800ef30:	6922      	ldr	r2, [r4, #16]
 800ef32:	6022      	str	r2, [r4, #0]
 800ef34:	d504      	bpl.n	800ef40 <__sflush_r+0x78>
 800ef36:	1c42      	adds	r2, r0, #1
 800ef38:	d101      	bne.n	800ef3e <__sflush_r+0x76>
 800ef3a:	682b      	ldr	r3, [r5, #0]
 800ef3c:	b903      	cbnz	r3, 800ef40 <__sflush_r+0x78>
 800ef3e:	6560      	str	r0, [r4, #84]	@ 0x54
 800ef40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ef42:	602f      	str	r7, [r5, #0]
 800ef44:	b1b9      	cbz	r1, 800ef76 <__sflush_r+0xae>
 800ef46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef4a:	4299      	cmp	r1, r3
 800ef4c:	d002      	beq.n	800ef54 <__sflush_r+0x8c>
 800ef4e:	4628      	mov	r0, r5
 800ef50:	f7ff fa96 	bl	800e480 <_free_r>
 800ef54:	2300      	movs	r3, #0
 800ef56:	6363      	str	r3, [r4, #52]	@ 0x34
 800ef58:	e00d      	b.n	800ef76 <__sflush_r+0xae>
 800ef5a:	2301      	movs	r3, #1
 800ef5c:	4628      	mov	r0, r5
 800ef5e:	47b0      	blx	r6
 800ef60:	4602      	mov	r2, r0
 800ef62:	1c50      	adds	r0, r2, #1
 800ef64:	d1c9      	bne.n	800eefa <__sflush_r+0x32>
 800ef66:	682b      	ldr	r3, [r5, #0]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d0c6      	beq.n	800eefa <__sflush_r+0x32>
 800ef6c:	2b1d      	cmp	r3, #29
 800ef6e:	d001      	beq.n	800ef74 <__sflush_r+0xac>
 800ef70:	2b16      	cmp	r3, #22
 800ef72:	d11e      	bne.n	800efb2 <__sflush_r+0xea>
 800ef74:	602f      	str	r7, [r5, #0]
 800ef76:	2000      	movs	r0, #0
 800ef78:	e022      	b.n	800efc0 <__sflush_r+0xf8>
 800ef7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef7e:	b21b      	sxth	r3, r3
 800ef80:	e01b      	b.n	800efba <__sflush_r+0xf2>
 800ef82:	690f      	ldr	r7, [r1, #16]
 800ef84:	2f00      	cmp	r7, #0
 800ef86:	d0f6      	beq.n	800ef76 <__sflush_r+0xae>
 800ef88:	0793      	lsls	r3, r2, #30
 800ef8a:	680e      	ldr	r6, [r1, #0]
 800ef8c:	bf08      	it	eq
 800ef8e:	694b      	ldreq	r3, [r1, #20]
 800ef90:	600f      	str	r7, [r1, #0]
 800ef92:	bf18      	it	ne
 800ef94:	2300      	movne	r3, #0
 800ef96:	eba6 0807 	sub.w	r8, r6, r7
 800ef9a:	608b      	str	r3, [r1, #8]
 800ef9c:	f1b8 0f00 	cmp.w	r8, #0
 800efa0:	dde9      	ble.n	800ef76 <__sflush_r+0xae>
 800efa2:	6a21      	ldr	r1, [r4, #32]
 800efa4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800efa6:	4643      	mov	r3, r8
 800efa8:	463a      	mov	r2, r7
 800efaa:	4628      	mov	r0, r5
 800efac:	47b0      	blx	r6
 800efae:	2800      	cmp	r0, #0
 800efb0:	dc08      	bgt.n	800efc4 <__sflush_r+0xfc>
 800efb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800efba:	81a3      	strh	r3, [r4, #12]
 800efbc:	f04f 30ff 	mov.w	r0, #4294967295
 800efc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efc4:	4407      	add	r7, r0
 800efc6:	eba8 0800 	sub.w	r8, r8, r0
 800efca:	e7e7      	b.n	800ef9c <__sflush_r+0xd4>
 800efcc:	dfbffffe 	.word	0xdfbffffe

0800efd0 <_fflush_r>:
 800efd0:	b538      	push	{r3, r4, r5, lr}
 800efd2:	690b      	ldr	r3, [r1, #16]
 800efd4:	4605      	mov	r5, r0
 800efd6:	460c      	mov	r4, r1
 800efd8:	b913      	cbnz	r3, 800efe0 <_fflush_r+0x10>
 800efda:	2500      	movs	r5, #0
 800efdc:	4628      	mov	r0, r5
 800efde:	bd38      	pop	{r3, r4, r5, pc}
 800efe0:	b118      	cbz	r0, 800efea <_fflush_r+0x1a>
 800efe2:	6a03      	ldr	r3, [r0, #32]
 800efe4:	b90b      	cbnz	r3, 800efea <_fflush_r+0x1a>
 800efe6:	f7fe fa89 	bl	800d4fc <__sinit>
 800efea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d0f3      	beq.n	800efda <_fflush_r+0xa>
 800eff2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800eff4:	07d0      	lsls	r0, r2, #31
 800eff6:	d404      	bmi.n	800f002 <_fflush_r+0x32>
 800eff8:	0599      	lsls	r1, r3, #22
 800effa:	d402      	bmi.n	800f002 <_fflush_r+0x32>
 800effc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800effe:	f7fe fbe8 	bl	800d7d2 <__retarget_lock_acquire_recursive>
 800f002:	4628      	mov	r0, r5
 800f004:	4621      	mov	r1, r4
 800f006:	f7ff ff5f 	bl	800eec8 <__sflush_r>
 800f00a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f00c:	07da      	lsls	r2, r3, #31
 800f00e:	4605      	mov	r5, r0
 800f010:	d4e4      	bmi.n	800efdc <_fflush_r+0xc>
 800f012:	89a3      	ldrh	r3, [r4, #12]
 800f014:	059b      	lsls	r3, r3, #22
 800f016:	d4e1      	bmi.n	800efdc <_fflush_r+0xc>
 800f018:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f01a:	f7fe fbdb 	bl	800d7d4 <__retarget_lock_release_recursive>
 800f01e:	e7dd      	b.n	800efdc <_fflush_r+0xc>

0800f020 <memmove>:
 800f020:	4288      	cmp	r0, r1
 800f022:	b510      	push	{r4, lr}
 800f024:	eb01 0402 	add.w	r4, r1, r2
 800f028:	d902      	bls.n	800f030 <memmove+0x10>
 800f02a:	4284      	cmp	r4, r0
 800f02c:	4623      	mov	r3, r4
 800f02e:	d807      	bhi.n	800f040 <memmove+0x20>
 800f030:	1e43      	subs	r3, r0, #1
 800f032:	42a1      	cmp	r1, r4
 800f034:	d008      	beq.n	800f048 <memmove+0x28>
 800f036:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f03a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f03e:	e7f8      	b.n	800f032 <memmove+0x12>
 800f040:	4402      	add	r2, r0
 800f042:	4601      	mov	r1, r0
 800f044:	428a      	cmp	r2, r1
 800f046:	d100      	bne.n	800f04a <memmove+0x2a>
 800f048:	bd10      	pop	{r4, pc}
 800f04a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f04e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f052:	e7f7      	b.n	800f044 <memmove+0x24>

0800f054 <memcpy>:
 800f054:	440a      	add	r2, r1
 800f056:	4291      	cmp	r1, r2
 800f058:	f100 33ff 	add.w	r3, r0, #4294967295
 800f05c:	d100      	bne.n	800f060 <memcpy+0xc>
 800f05e:	4770      	bx	lr
 800f060:	b510      	push	{r4, lr}
 800f062:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f066:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f06a:	4291      	cmp	r1, r2
 800f06c:	d1f9      	bne.n	800f062 <memcpy+0xe>
 800f06e:	bd10      	pop	{r4, pc}

0800f070 <__assert_func>:
 800f070:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f072:	4614      	mov	r4, r2
 800f074:	461a      	mov	r2, r3
 800f076:	4b09      	ldr	r3, [pc, #36]	@ (800f09c <__assert_func+0x2c>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	4605      	mov	r5, r0
 800f07c:	68d8      	ldr	r0, [r3, #12]
 800f07e:	b954      	cbnz	r4, 800f096 <__assert_func+0x26>
 800f080:	4b07      	ldr	r3, [pc, #28]	@ (800f0a0 <__assert_func+0x30>)
 800f082:	461c      	mov	r4, r3
 800f084:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f088:	9100      	str	r1, [sp, #0]
 800f08a:	462b      	mov	r3, r5
 800f08c:	4905      	ldr	r1, [pc, #20]	@ (800f0a4 <__assert_func+0x34>)
 800f08e:	f000 f86f 	bl	800f170 <fiprintf>
 800f092:	f7fd fc89 	bl	800c9a8 <abort>
 800f096:	4b04      	ldr	r3, [pc, #16]	@ (800f0a8 <__assert_func+0x38>)
 800f098:	e7f4      	b.n	800f084 <__assert_func+0x14>
 800f09a:	bf00      	nop
 800f09c:	2000001c 	.word	0x2000001c
 800f0a0:	080105e6 	.word	0x080105e6
 800f0a4:	080105b8 	.word	0x080105b8
 800f0a8:	080105ab 	.word	0x080105ab

0800f0ac <_calloc_r>:
 800f0ac:	b570      	push	{r4, r5, r6, lr}
 800f0ae:	fba1 5402 	umull	r5, r4, r1, r2
 800f0b2:	b93c      	cbnz	r4, 800f0c4 <_calloc_r+0x18>
 800f0b4:	4629      	mov	r1, r5
 800f0b6:	f7fd fcb1 	bl	800ca1c <_malloc_r>
 800f0ba:	4606      	mov	r6, r0
 800f0bc:	b928      	cbnz	r0, 800f0ca <_calloc_r+0x1e>
 800f0be:	2600      	movs	r6, #0
 800f0c0:	4630      	mov	r0, r6
 800f0c2:	bd70      	pop	{r4, r5, r6, pc}
 800f0c4:	220c      	movs	r2, #12
 800f0c6:	6002      	str	r2, [r0, #0]
 800f0c8:	e7f9      	b.n	800f0be <_calloc_r+0x12>
 800f0ca:	462a      	mov	r2, r5
 800f0cc:	4621      	mov	r1, r4
 800f0ce:	f7fe faae 	bl	800d62e <memset>
 800f0d2:	e7f5      	b.n	800f0c0 <_calloc_r+0x14>

0800f0d4 <__ascii_mbtowc>:
 800f0d4:	b082      	sub	sp, #8
 800f0d6:	b901      	cbnz	r1, 800f0da <__ascii_mbtowc+0x6>
 800f0d8:	a901      	add	r1, sp, #4
 800f0da:	b142      	cbz	r2, 800f0ee <__ascii_mbtowc+0x1a>
 800f0dc:	b14b      	cbz	r3, 800f0f2 <__ascii_mbtowc+0x1e>
 800f0de:	7813      	ldrb	r3, [r2, #0]
 800f0e0:	600b      	str	r3, [r1, #0]
 800f0e2:	7812      	ldrb	r2, [r2, #0]
 800f0e4:	1e10      	subs	r0, r2, #0
 800f0e6:	bf18      	it	ne
 800f0e8:	2001      	movne	r0, #1
 800f0ea:	b002      	add	sp, #8
 800f0ec:	4770      	bx	lr
 800f0ee:	4610      	mov	r0, r2
 800f0f0:	e7fb      	b.n	800f0ea <__ascii_mbtowc+0x16>
 800f0f2:	f06f 0001 	mvn.w	r0, #1
 800f0f6:	e7f8      	b.n	800f0ea <__ascii_mbtowc+0x16>

0800f0f8 <_realloc_r>:
 800f0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0fc:	4680      	mov	r8, r0
 800f0fe:	4615      	mov	r5, r2
 800f100:	460c      	mov	r4, r1
 800f102:	b921      	cbnz	r1, 800f10e <_realloc_r+0x16>
 800f104:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f108:	4611      	mov	r1, r2
 800f10a:	f7fd bc87 	b.w	800ca1c <_malloc_r>
 800f10e:	b92a      	cbnz	r2, 800f11c <_realloc_r+0x24>
 800f110:	f7ff f9b6 	bl	800e480 <_free_r>
 800f114:	2400      	movs	r4, #0
 800f116:	4620      	mov	r0, r4
 800f118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f11c:	f000 f83a 	bl	800f194 <_malloc_usable_size_r>
 800f120:	4285      	cmp	r5, r0
 800f122:	4606      	mov	r6, r0
 800f124:	d802      	bhi.n	800f12c <_realloc_r+0x34>
 800f126:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f12a:	d8f4      	bhi.n	800f116 <_realloc_r+0x1e>
 800f12c:	4629      	mov	r1, r5
 800f12e:	4640      	mov	r0, r8
 800f130:	f7fd fc74 	bl	800ca1c <_malloc_r>
 800f134:	4607      	mov	r7, r0
 800f136:	2800      	cmp	r0, #0
 800f138:	d0ec      	beq.n	800f114 <_realloc_r+0x1c>
 800f13a:	42b5      	cmp	r5, r6
 800f13c:	462a      	mov	r2, r5
 800f13e:	4621      	mov	r1, r4
 800f140:	bf28      	it	cs
 800f142:	4632      	movcs	r2, r6
 800f144:	f7ff ff86 	bl	800f054 <memcpy>
 800f148:	4621      	mov	r1, r4
 800f14a:	4640      	mov	r0, r8
 800f14c:	f7ff f998 	bl	800e480 <_free_r>
 800f150:	463c      	mov	r4, r7
 800f152:	e7e0      	b.n	800f116 <_realloc_r+0x1e>

0800f154 <__ascii_wctomb>:
 800f154:	4603      	mov	r3, r0
 800f156:	4608      	mov	r0, r1
 800f158:	b141      	cbz	r1, 800f16c <__ascii_wctomb+0x18>
 800f15a:	2aff      	cmp	r2, #255	@ 0xff
 800f15c:	d904      	bls.n	800f168 <__ascii_wctomb+0x14>
 800f15e:	228a      	movs	r2, #138	@ 0x8a
 800f160:	601a      	str	r2, [r3, #0]
 800f162:	f04f 30ff 	mov.w	r0, #4294967295
 800f166:	4770      	bx	lr
 800f168:	700a      	strb	r2, [r1, #0]
 800f16a:	2001      	movs	r0, #1
 800f16c:	4770      	bx	lr
	...

0800f170 <fiprintf>:
 800f170:	b40e      	push	{r1, r2, r3}
 800f172:	b503      	push	{r0, r1, lr}
 800f174:	4601      	mov	r1, r0
 800f176:	ab03      	add	r3, sp, #12
 800f178:	4805      	ldr	r0, [pc, #20]	@ (800f190 <fiprintf+0x20>)
 800f17a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f17e:	6800      	ldr	r0, [r0, #0]
 800f180:	9301      	str	r3, [sp, #4]
 800f182:	f000 f839 	bl	800f1f8 <_vfiprintf_r>
 800f186:	b002      	add	sp, #8
 800f188:	f85d eb04 	ldr.w	lr, [sp], #4
 800f18c:	b003      	add	sp, #12
 800f18e:	4770      	bx	lr
 800f190:	2000001c 	.word	0x2000001c

0800f194 <_malloc_usable_size_r>:
 800f194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f198:	1f18      	subs	r0, r3, #4
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	bfbc      	itt	lt
 800f19e:	580b      	ldrlt	r3, [r1, r0]
 800f1a0:	18c0      	addlt	r0, r0, r3
 800f1a2:	4770      	bx	lr

0800f1a4 <__sfputc_r>:
 800f1a4:	6893      	ldr	r3, [r2, #8]
 800f1a6:	3b01      	subs	r3, #1
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	b410      	push	{r4}
 800f1ac:	6093      	str	r3, [r2, #8]
 800f1ae:	da08      	bge.n	800f1c2 <__sfputc_r+0x1e>
 800f1b0:	6994      	ldr	r4, [r2, #24]
 800f1b2:	42a3      	cmp	r3, r4
 800f1b4:	db01      	blt.n	800f1ba <__sfputc_r+0x16>
 800f1b6:	290a      	cmp	r1, #10
 800f1b8:	d103      	bne.n	800f1c2 <__sfputc_r+0x1e>
 800f1ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1be:	f000 b933 	b.w	800f428 <__swbuf_r>
 800f1c2:	6813      	ldr	r3, [r2, #0]
 800f1c4:	1c58      	adds	r0, r3, #1
 800f1c6:	6010      	str	r0, [r2, #0]
 800f1c8:	7019      	strb	r1, [r3, #0]
 800f1ca:	4608      	mov	r0, r1
 800f1cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1d0:	4770      	bx	lr

0800f1d2 <__sfputs_r>:
 800f1d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1d4:	4606      	mov	r6, r0
 800f1d6:	460f      	mov	r7, r1
 800f1d8:	4614      	mov	r4, r2
 800f1da:	18d5      	adds	r5, r2, r3
 800f1dc:	42ac      	cmp	r4, r5
 800f1de:	d101      	bne.n	800f1e4 <__sfputs_r+0x12>
 800f1e0:	2000      	movs	r0, #0
 800f1e2:	e007      	b.n	800f1f4 <__sfputs_r+0x22>
 800f1e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1e8:	463a      	mov	r2, r7
 800f1ea:	4630      	mov	r0, r6
 800f1ec:	f7ff ffda 	bl	800f1a4 <__sfputc_r>
 800f1f0:	1c43      	adds	r3, r0, #1
 800f1f2:	d1f3      	bne.n	800f1dc <__sfputs_r+0xa>
 800f1f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f1f8 <_vfiprintf_r>:
 800f1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1fc:	460d      	mov	r5, r1
 800f1fe:	b09d      	sub	sp, #116	@ 0x74
 800f200:	4614      	mov	r4, r2
 800f202:	4698      	mov	r8, r3
 800f204:	4606      	mov	r6, r0
 800f206:	b118      	cbz	r0, 800f210 <_vfiprintf_r+0x18>
 800f208:	6a03      	ldr	r3, [r0, #32]
 800f20a:	b90b      	cbnz	r3, 800f210 <_vfiprintf_r+0x18>
 800f20c:	f7fe f976 	bl	800d4fc <__sinit>
 800f210:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f212:	07d9      	lsls	r1, r3, #31
 800f214:	d405      	bmi.n	800f222 <_vfiprintf_r+0x2a>
 800f216:	89ab      	ldrh	r3, [r5, #12]
 800f218:	059a      	lsls	r2, r3, #22
 800f21a:	d402      	bmi.n	800f222 <_vfiprintf_r+0x2a>
 800f21c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f21e:	f7fe fad8 	bl	800d7d2 <__retarget_lock_acquire_recursive>
 800f222:	89ab      	ldrh	r3, [r5, #12]
 800f224:	071b      	lsls	r3, r3, #28
 800f226:	d501      	bpl.n	800f22c <_vfiprintf_r+0x34>
 800f228:	692b      	ldr	r3, [r5, #16]
 800f22a:	b99b      	cbnz	r3, 800f254 <_vfiprintf_r+0x5c>
 800f22c:	4629      	mov	r1, r5
 800f22e:	4630      	mov	r0, r6
 800f230:	f000 f938 	bl	800f4a4 <__swsetup_r>
 800f234:	b170      	cbz	r0, 800f254 <_vfiprintf_r+0x5c>
 800f236:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f238:	07dc      	lsls	r4, r3, #31
 800f23a:	d504      	bpl.n	800f246 <_vfiprintf_r+0x4e>
 800f23c:	f04f 30ff 	mov.w	r0, #4294967295
 800f240:	b01d      	add	sp, #116	@ 0x74
 800f242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f246:	89ab      	ldrh	r3, [r5, #12]
 800f248:	0598      	lsls	r0, r3, #22
 800f24a:	d4f7      	bmi.n	800f23c <_vfiprintf_r+0x44>
 800f24c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f24e:	f7fe fac1 	bl	800d7d4 <__retarget_lock_release_recursive>
 800f252:	e7f3      	b.n	800f23c <_vfiprintf_r+0x44>
 800f254:	2300      	movs	r3, #0
 800f256:	9309      	str	r3, [sp, #36]	@ 0x24
 800f258:	2320      	movs	r3, #32
 800f25a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f25e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f262:	2330      	movs	r3, #48	@ 0x30
 800f264:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f414 <_vfiprintf_r+0x21c>
 800f268:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f26c:	f04f 0901 	mov.w	r9, #1
 800f270:	4623      	mov	r3, r4
 800f272:	469a      	mov	sl, r3
 800f274:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f278:	b10a      	cbz	r2, 800f27e <_vfiprintf_r+0x86>
 800f27a:	2a25      	cmp	r2, #37	@ 0x25
 800f27c:	d1f9      	bne.n	800f272 <_vfiprintf_r+0x7a>
 800f27e:	ebba 0b04 	subs.w	fp, sl, r4
 800f282:	d00b      	beq.n	800f29c <_vfiprintf_r+0xa4>
 800f284:	465b      	mov	r3, fp
 800f286:	4622      	mov	r2, r4
 800f288:	4629      	mov	r1, r5
 800f28a:	4630      	mov	r0, r6
 800f28c:	f7ff ffa1 	bl	800f1d2 <__sfputs_r>
 800f290:	3001      	adds	r0, #1
 800f292:	f000 80a7 	beq.w	800f3e4 <_vfiprintf_r+0x1ec>
 800f296:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f298:	445a      	add	r2, fp
 800f29a:	9209      	str	r2, [sp, #36]	@ 0x24
 800f29c:	f89a 3000 	ldrb.w	r3, [sl]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	f000 809f 	beq.w	800f3e4 <_vfiprintf_r+0x1ec>
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	f04f 32ff 	mov.w	r2, #4294967295
 800f2ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f2b0:	f10a 0a01 	add.w	sl, sl, #1
 800f2b4:	9304      	str	r3, [sp, #16]
 800f2b6:	9307      	str	r3, [sp, #28]
 800f2b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f2bc:	931a      	str	r3, [sp, #104]	@ 0x68
 800f2be:	4654      	mov	r4, sl
 800f2c0:	2205      	movs	r2, #5
 800f2c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2c6:	4853      	ldr	r0, [pc, #332]	@ (800f414 <_vfiprintf_r+0x21c>)
 800f2c8:	f7f0 ff8a 	bl	80001e0 <memchr>
 800f2cc:	9a04      	ldr	r2, [sp, #16]
 800f2ce:	b9d8      	cbnz	r0, 800f308 <_vfiprintf_r+0x110>
 800f2d0:	06d1      	lsls	r1, r2, #27
 800f2d2:	bf44      	itt	mi
 800f2d4:	2320      	movmi	r3, #32
 800f2d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f2da:	0713      	lsls	r3, r2, #28
 800f2dc:	bf44      	itt	mi
 800f2de:	232b      	movmi	r3, #43	@ 0x2b
 800f2e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f2e4:	f89a 3000 	ldrb.w	r3, [sl]
 800f2e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800f2ea:	d015      	beq.n	800f318 <_vfiprintf_r+0x120>
 800f2ec:	9a07      	ldr	r2, [sp, #28]
 800f2ee:	4654      	mov	r4, sl
 800f2f0:	2000      	movs	r0, #0
 800f2f2:	f04f 0c0a 	mov.w	ip, #10
 800f2f6:	4621      	mov	r1, r4
 800f2f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f2fc:	3b30      	subs	r3, #48	@ 0x30
 800f2fe:	2b09      	cmp	r3, #9
 800f300:	d94b      	bls.n	800f39a <_vfiprintf_r+0x1a2>
 800f302:	b1b0      	cbz	r0, 800f332 <_vfiprintf_r+0x13a>
 800f304:	9207      	str	r2, [sp, #28]
 800f306:	e014      	b.n	800f332 <_vfiprintf_r+0x13a>
 800f308:	eba0 0308 	sub.w	r3, r0, r8
 800f30c:	fa09 f303 	lsl.w	r3, r9, r3
 800f310:	4313      	orrs	r3, r2
 800f312:	9304      	str	r3, [sp, #16]
 800f314:	46a2      	mov	sl, r4
 800f316:	e7d2      	b.n	800f2be <_vfiprintf_r+0xc6>
 800f318:	9b03      	ldr	r3, [sp, #12]
 800f31a:	1d19      	adds	r1, r3, #4
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	9103      	str	r1, [sp, #12]
 800f320:	2b00      	cmp	r3, #0
 800f322:	bfbb      	ittet	lt
 800f324:	425b      	neglt	r3, r3
 800f326:	f042 0202 	orrlt.w	r2, r2, #2
 800f32a:	9307      	strge	r3, [sp, #28]
 800f32c:	9307      	strlt	r3, [sp, #28]
 800f32e:	bfb8      	it	lt
 800f330:	9204      	strlt	r2, [sp, #16]
 800f332:	7823      	ldrb	r3, [r4, #0]
 800f334:	2b2e      	cmp	r3, #46	@ 0x2e
 800f336:	d10a      	bne.n	800f34e <_vfiprintf_r+0x156>
 800f338:	7863      	ldrb	r3, [r4, #1]
 800f33a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f33c:	d132      	bne.n	800f3a4 <_vfiprintf_r+0x1ac>
 800f33e:	9b03      	ldr	r3, [sp, #12]
 800f340:	1d1a      	adds	r2, r3, #4
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	9203      	str	r2, [sp, #12]
 800f346:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f34a:	3402      	adds	r4, #2
 800f34c:	9305      	str	r3, [sp, #20]
 800f34e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f424 <_vfiprintf_r+0x22c>
 800f352:	7821      	ldrb	r1, [r4, #0]
 800f354:	2203      	movs	r2, #3
 800f356:	4650      	mov	r0, sl
 800f358:	f7f0 ff42 	bl	80001e0 <memchr>
 800f35c:	b138      	cbz	r0, 800f36e <_vfiprintf_r+0x176>
 800f35e:	9b04      	ldr	r3, [sp, #16]
 800f360:	eba0 000a 	sub.w	r0, r0, sl
 800f364:	2240      	movs	r2, #64	@ 0x40
 800f366:	4082      	lsls	r2, r0
 800f368:	4313      	orrs	r3, r2
 800f36a:	3401      	adds	r4, #1
 800f36c:	9304      	str	r3, [sp, #16]
 800f36e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f372:	4829      	ldr	r0, [pc, #164]	@ (800f418 <_vfiprintf_r+0x220>)
 800f374:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f378:	2206      	movs	r2, #6
 800f37a:	f7f0 ff31 	bl	80001e0 <memchr>
 800f37e:	2800      	cmp	r0, #0
 800f380:	d03f      	beq.n	800f402 <_vfiprintf_r+0x20a>
 800f382:	4b26      	ldr	r3, [pc, #152]	@ (800f41c <_vfiprintf_r+0x224>)
 800f384:	bb1b      	cbnz	r3, 800f3ce <_vfiprintf_r+0x1d6>
 800f386:	9b03      	ldr	r3, [sp, #12]
 800f388:	3307      	adds	r3, #7
 800f38a:	f023 0307 	bic.w	r3, r3, #7
 800f38e:	3308      	adds	r3, #8
 800f390:	9303      	str	r3, [sp, #12]
 800f392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f394:	443b      	add	r3, r7
 800f396:	9309      	str	r3, [sp, #36]	@ 0x24
 800f398:	e76a      	b.n	800f270 <_vfiprintf_r+0x78>
 800f39a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f39e:	460c      	mov	r4, r1
 800f3a0:	2001      	movs	r0, #1
 800f3a2:	e7a8      	b.n	800f2f6 <_vfiprintf_r+0xfe>
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	3401      	adds	r4, #1
 800f3a8:	9305      	str	r3, [sp, #20]
 800f3aa:	4619      	mov	r1, r3
 800f3ac:	f04f 0c0a 	mov.w	ip, #10
 800f3b0:	4620      	mov	r0, r4
 800f3b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f3b6:	3a30      	subs	r2, #48	@ 0x30
 800f3b8:	2a09      	cmp	r2, #9
 800f3ba:	d903      	bls.n	800f3c4 <_vfiprintf_r+0x1cc>
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d0c6      	beq.n	800f34e <_vfiprintf_r+0x156>
 800f3c0:	9105      	str	r1, [sp, #20]
 800f3c2:	e7c4      	b.n	800f34e <_vfiprintf_r+0x156>
 800f3c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800f3c8:	4604      	mov	r4, r0
 800f3ca:	2301      	movs	r3, #1
 800f3cc:	e7f0      	b.n	800f3b0 <_vfiprintf_r+0x1b8>
 800f3ce:	ab03      	add	r3, sp, #12
 800f3d0:	9300      	str	r3, [sp, #0]
 800f3d2:	462a      	mov	r2, r5
 800f3d4:	4b12      	ldr	r3, [pc, #72]	@ (800f420 <_vfiprintf_r+0x228>)
 800f3d6:	a904      	add	r1, sp, #16
 800f3d8:	4630      	mov	r0, r6
 800f3da:	f7fd fc4b 	bl	800cc74 <_printf_float>
 800f3de:	4607      	mov	r7, r0
 800f3e0:	1c78      	adds	r0, r7, #1
 800f3e2:	d1d6      	bne.n	800f392 <_vfiprintf_r+0x19a>
 800f3e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f3e6:	07d9      	lsls	r1, r3, #31
 800f3e8:	d405      	bmi.n	800f3f6 <_vfiprintf_r+0x1fe>
 800f3ea:	89ab      	ldrh	r3, [r5, #12]
 800f3ec:	059a      	lsls	r2, r3, #22
 800f3ee:	d402      	bmi.n	800f3f6 <_vfiprintf_r+0x1fe>
 800f3f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f3f2:	f7fe f9ef 	bl	800d7d4 <__retarget_lock_release_recursive>
 800f3f6:	89ab      	ldrh	r3, [r5, #12]
 800f3f8:	065b      	lsls	r3, r3, #25
 800f3fa:	f53f af1f 	bmi.w	800f23c <_vfiprintf_r+0x44>
 800f3fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f400:	e71e      	b.n	800f240 <_vfiprintf_r+0x48>
 800f402:	ab03      	add	r3, sp, #12
 800f404:	9300      	str	r3, [sp, #0]
 800f406:	462a      	mov	r2, r5
 800f408:	4b05      	ldr	r3, [pc, #20]	@ (800f420 <_vfiprintf_r+0x228>)
 800f40a:	a904      	add	r1, sp, #16
 800f40c:	4630      	mov	r0, r6
 800f40e:	f7fd fec9 	bl	800d1a4 <_printf_i>
 800f412:	e7e4      	b.n	800f3de <_vfiprintf_r+0x1e6>
 800f414:	08010590 	.word	0x08010590
 800f418:	0801059a 	.word	0x0801059a
 800f41c:	0800cc75 	.word	0x0800cc75
 800f420:	0800f1d3 	.word	0x0800f1d3
 800f424:	08010596 	.word	0x08010596

0800f428 <__swbuf_r>:
 800f428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f42a:	460e      	mov	r6, r1
 800f42c:	4614      	mov	r4, r2
 800f42e:	4605      	mov	r5, r0
 800f430:	b118      	cbz	r0, 800f43a <__swbuf_r+0x12>
 800f432:	6a03      	ldr	r3, [r0, #32]
 800f434:	b90b      	cbnz	r3, 800f43a <__swbuf_r+0x12>
 800f436:	f7fe f861 	bl	800d4fc <__sinit>
 800f43a:	69a3      	ldr	r3, [r4, #24]
 800f43c:	60a3      	str	r3, [r4, #8]
 800f43e:	89a3      	ldrh	r3, [r4, #12]
 800f440:	071a      	lsls	r2, r3, #28
 800f442:	d501      	bpl.n	800f448 <__swbuf_r+0x20>
 800f444:	6923      	ldr	r3, [r4, #16]
 800f446:	b943      	cbnz	r3, 800f45a <__swbuf_r+0x32>
 800f448:	4621      	mov	r1, r4
 800f44a:	4628      	mov	r0, r5
 800f44c:	f000 f82a 	bl	800f4a4 <__swsetup_r>
 800f450:	b118      	cbz	r0, 800f45a <__swbuf_r+0x32>
 800f452:	f04f 37ff 	mov.w	r7, #4294967295
 800f456:	4638      	mov	r0, r7
 800f458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f45a:	6823      	ldr	r3, [r4, #0]
 800f45c:	6922      	ldr	r2, [r4, #16]
 800f45e:	1a98      	subs	r0, r3, r2
 800f460:	6963      	ldr	r3, [r4, #20]
 800f462:	b2f6      	uxtb	r6, r6
 800f464:	4283      	cmp	r3, r0
 800f466:	4637      	mov	r7, r6
 800f468:	dc05      	bgt.n	800f476 <__swbuf_r+0x4e>
 800f46a:	4621      	mov	r1, r4
 800f46c:	4628      	mov	r0, r5
 800f46e:	f7ff fdaf 	bl	800efd0 <_fflush_r>
 800f472:	2800      	cmp	r0, #0
 800f474:	d1ed      	bne.n	800f452 <__swbuf_r+0x2a>
 800f476:	68a3      	ldr	r3, [r4, #8]
 800f478:	3b01      	subs	r3, #1
 800f47a:	60a3      	str	r3, [r4, #8]
 800f47c:	6823      	ldr	r3, [r4, #0]
 800f47e:	1c5a      	adds	r2, r3, #1
 800f480:	6022      	str	r2, [r4, #0]
 800f482:	701e      	strb	r6, [r3, #0]
 800f484:	6962      	ldr	r2, [r4, #20]
 800f486:	1c43      	adds	r3, r0, #1
 800f488:	429a      	cmp	r2, r3
 800f48a:	d004      	beq.n	800f496 <__swbuf_r+0x6e>
 800f48c:	89a3      	ldrh	r3, [r4, #12]
 800f48e:	07db      	lsls	r3, r3, #31
 800f490:	d5e1      	bpl.n	800f456 <__swbuf_r+0x2e>
 800f492:	2e0a      	cmp	r6, #10
 800f494:	d1df      	bne.n	800f456 <__swbuf_r+0x2e>
 800f496:	4621      	mov	r1, r4
 800f498:	4628      	mov	r0, r5
 800f49a:	f7ff fd99 	bl	800efd0 <_fflush_r>
 800f49e:	2800      	cmp	r0, #0
 800f4a0:	d0d9      	beq.n	800f456 <__swbuf_r+0x2e>
 800f4a2:	e7d6      	b.n	800f452 <__swbuf_r+0x2a>

0800f4a4 <__swsetup_r>:
 800f4a4:	b538      	push	{r3, r4, r5, lr}
 800f4a6:	4b29      	ldr	r3, [pc, #164]	@ (800f54c <__swsetup_r+0xa8>)
 800f4a8:	4605      	mov	r5, r0
 800f4aa:	6818      	ldr	r0, [r3, #0]
 800f4ac:	460c      	mov	r4, r1
 800f4ae:	b118      	cbz	r0, 800f4b8 <__swsetup_r+0x14>
 800f4b0:	6a03      	ldr	r3, [r0, #32]
 800f4b2:	b90b      	cbnz	r3, 800f4b8 <__swsetup_r+0x14>
 800f4b4:	f7fe f822 	bl	800d4fc <__sinit>
 800f4b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4bc:	0719      	lsls	r1, r3, #28
 800f4be:	d422      	bmi.n	800f506 <__swsetup_r+0x62>
 800f4c0:	06da      	lsls	r2, r3, #27
 800f4c2:	d407      	bmi.n	800f4d4 <__swsetup_r+0x30>
 800f4c4:	2209      	movs	r2, #9
 800f4c6:	602a      	str	r2, [r5, #0]
 800f4c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f4cc:	81a3      	strh	r3, [r4, #12]
 800f4ce:	f04f 30ff 	mov.w	r0, #4294967295
 800f4d2:	e033      	b.n	800f53c <__swsetup_r+0x98>
 800f4d4:	0758      	lsls	r0, r3, #29
 800f4d6:	d512      	bpl.n	800f4fe <__swsetup_r+0x5a>
 800f4d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f4da:	b141      	cbz	r1, 800f4ee <__swsetup_r+0x4a>
 800f4dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f4e0:	4299      	cmp	r1, r3
 800f4e2:	d002      	beq.n	800f4ea <__swsetup_r+0x46>
 800f4e4:	4628      	mov	r0, r5
 800f4e6:	f7fe ffcb 	bl	800e480 <_free_r>
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	6363      	str	r3, [r4, #52]	@ 0x34
 800f4ee:	89a3      	ldrh	r3, [r4, #12]
 800f4f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f4f4:	81a3      	strh	r3, [r4, #12]
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	6063      	str	r3, [r4, #4]
 800f4fa:	6923      	ldr	r3, [r4, #16]
 800f4fc:	6023      	str	r3, [r4, #0]
 800f4fe:	89a3      	ldrh	r3, [r4, #12]
 800f500:	f043 0308 	orr.w	r3, r3, #8
 800f504:	81a3      	strh	r3, [r4, #12]
 800f506:	6923      	ldr	r3, [r4, #16]
 800f508:	b94b      	cbnz	r3, 800f51e <__swsetup_r+0x7a>
 800f50a:	89a3      	ldrh	r3, [r4, #12]
 800f50c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f510:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f514:	d003      	beq.n	800f51e <__swsetup_r+0x7a>
 800f516:	4621      	mov	r1, r4
 800f518:	4628      	mov	r0, r5
 800f51a:	f000 f83f 	bl	800f59c <__smakebuf_r>
 800f51e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f522:	f013 0201 	ands.w	r2, r3, #1
 800f526:	d00a      	beq.n	800f53e <__swsetup_r+0x9a>
 800f528:	2200      	movs	r2, #0
 800f52a:	60a2      	str	r2, [r4, #8]
 800f52c:	6962      	ldr	r2, [r4, #20]
 800f52e:	4252      	negs	r2, r2
 800f530:	61a2      	str	r2, [r4, #24]
 800f532:	6922      	ldr	r2, [r4, #16]
 800f534:	b942      	cbnz	r2, 800f548 <__swsetup_r+0xa4>
 800f536:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f53a:	d1c5      	bne.n	800f4c8 <__swsetup_r+0x24>
 800f53c:	bd38      	pop	{r3, r4, r5, pc}
 800f53e:	0799      	lsls	r1, r3, #30
 800f540:	bf58      	it	pl
 800f542:	6962      	ldrpl	r2, [r4, #20]
 800f544:	60a2      	str	r2, [r4, #8]
 800f546:	e7f4      	b.n	800f532 <__swsetup_r+0x8e>
 800f548:	2000      	movs	r0, #0
 800f54a:	e7f7      	b.n	800f53c <__swsetup_r+0x98>
 800f54c:	2000001c 	.word	0x2000001c

0800f550 <__swhatbuf_r>:
 800f550:	b570      	push	{r4, r5, r6, lr}
 800f552:	460c      	mov	r4, r1
 800f554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f558:	2900      	cmp	r1, #0
 800f55a:	b096      	sub	sp, #88	@ 0x58
 800f55c:	4615      	mov	r5, r2
 800f55e:	461e      	mov	r6, r3
 800f560:	da0d      	bge.n	800f57e <__swhatbuf_r+0x2e>
 800f562:	89a3      	ldrh	r3, [r4, #12]
 800f564:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f568:	f04f 0100 	mov.w	r1, #0
 800f56c:	bf14      	ite	ne
 800f56e:	2340      	movne	r3, #64	@ 0x40
 800f570:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f574:	2000      	movs	r0, #0
 800f576:	6031      	str	r1, [r6, #0]
 800f578:	602b      	str	r3, [r5, #0]
 800f57a:	b016      	add	sp, #88	@ 0x58
 800f57c:	bd70      	pop	{r4, r5, r6, pc}
 800f57e:	466a      	mov	r2, sp
 800f580:	f000 f848 	bl	800f614 <_fstat_r>
 800f584:	2800      	cmp	r0, #0
 800f586:	dbec      	blt.n	800f562 <__swhatbuf_r+0x12>
 800f588:	9901      	ldr	r1, [sp, #4]
 800f58a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f58e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f592:	4259      	negs	r1, r3
 800f594:	4159      	adcs	r1, r3
 800f596:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f59a:	e7eb      	b.n	800f574 <__swhatbuf_r+0x24>

0800f59c <__smakebuf_r>:
 800f59c:	898b      	ldrh	r3, [r1, #12]
 800f59e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f5a0:	079d      	lsls	r5, r3, #30
 800f5a2:	4606      	mov	r6, r0
 800f5a4:	460c      	mov	r4, r1
 800f5a6:	d507      	bpl.n	800f5b8 <__smakebuf_r+0x1c>
 800f5a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f5ac:	6023      	str	r3, [r4, #0]
 800f5ae:	6123      	str	r3, [r4, #16]
 800f5b0:	2301      	movs	r3, #1
 800f5b2:	6163      	str	r3, [r4, #20]
 800f5b4:	b003      	add	sp, #12
 800f5b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5b8:	ab01      	add	r3, sp, #4
 800f5ba:	466a      	mov	r2, sp
 800f5bc:	f7ff ffc8 	bl	800f550 <__swhatbuf_r>
 800f5c0:	9f00      	ldr	r7, [sp, #0]
 800f5c2:	4605      	mov	r5, r0
 800f5c4:	4639      	mov	r1, r7
 800f5c6:	4630      	mov	r0, r6
 800f5c8:	f7fd fa28 	bl	800ca1c <_malloc_r>
 800f5cc:	b948      	cbnz	r0, 800f5e2 <__smakebuf_r+0x46>
 800f5ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5d2:	059a      	lsls	r2, r3, #22
 800f5d4:	d4ee      	bmi.n	800f5b4 <__smakebuf_r+0x18>
 800f5d6:	f023 0303 	bic.w	r3, r3, #3
 800f5da:	f043 0302 	orr.w	r3, r3, #2
 800f5de:	81a3      	strh	r3, [r4, #12]
 800f5e0:	e7e2      	b.n	800f5a8 <__smakebuf_r+0xc>
 800f5e2:	89a3      	ldrh	r3, [r4, #12]
 800f5e4:	6020      	str	r0, [r4, #0]
 800f5e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f5ea:	81a3      	strh	r3, [r4, #12]
 800f5ec:	9b01      	ldr	r3, [sp, #4]
 800f5ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f5f2:	b15b      	cbz	r3, 800f60c <__smakebuf_r+0x70>
 800f5f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f5f8:	4630      	mov	r0, r6
 800f5fa:	f000 f81d 	bl	800f638 <_isatty_r>
 800f5fe:	b128      	cbz	r0, 800f60c <__smakebuf_r+0x70>
 800f600:	89a3      	ldrh	r3, [r4, #12]
 800f602:	f023 0303 	bic.w	r3, r3, #3
 800f606:	f043 0301 	orr.w	r3, r3, #1
 800f60a:	81a3      	strh	r3, [r4, #12]
 800f60c:	89a3      	ldrh	r3, [r4, #12]
 800f60e:	431d      	orrs	r5, r3
 800f610:	81a5      	strh	r5, [r4, #12]
 800f612:	e7cf      	b.n	800f5b4 <__smakebuf_r+0x18>

0800f614 <_fstat_r>:
 800f614:	b538      	push	{r3, r4, r5, lr}
 800f616:	4d07      	ldr	r5, [pc, #28]	@ (800f634 <_fstat_r+0x20>)
 800f618:	2300      	movs	r3, #0
 800f61a:	4604      	mov	r4, r0
 800f61c:	4608      	mov	r0, r1
 800f61e:	4611      	mov	r1, r2
 800f620:	602b      	str	r3, [r5, #0]
 800f622:	f7f8 ff75 	bl	8008510 <_fstat>
 800f626:	1c43      	adds	r3, r0, #1
 800f628:	d102      	bne.n	800f630 <_fstat_r+0x1c>
 800f62a:	682b      	ldr	r3, [r5, #0]
 800f62c:	b103      	cbz	r3, 800f630 <_fstat_r+0x1c>
 800f62e:	6023      	str	r3, [r4, #0]
 800f630:	bd38      	pop	{r3, r4, r5, pc}
 800f632:	bf00      	nop
 800f634:	200005e8 	.word	0x200005e8

0800f638 <_isatty_r>:
 800f638:	b538      	push	{r3, r4, r5, lr}
 800f63a:	4d06      	ldr	r5, [pc, #24]	@ (800f654 <_isatty_r+0x1c>)
 800f63c:	2300      	movs	r3, #0
 800f63e:	4604      	mov	r4, r0
 800f640:	4608      	mov	r0, r1
 800f642:	602b      	str	r3, [r5, #0]
 800f644:	f7f8 ff74 	bl	8008530 <_isatty>
 800f648:	1c43      	adds	r3, r0, #1
 800f64a:	d102      	bne.n	800f652 <_isatty_r+0x1a>
 800f64c:	682b      	ldr	r3, [r5, #0]
 800f64e:	b103      	cbz	r3, 800f652 <_isatty_r+0x1a>
 800f650:	6023      	str	r3, [r4, #0]
 800f652:	bd38      	pop	{r3, r4, r5, pc}
 800f654:	200005e8 	.word	0x200005e8

0800f658 <_init>:
 800f658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f65a:	bf00      	nop
 800f65c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f65e:	bc08      	pop	{r3}
 800f660:	469e      	mov	lr, r3
 800f662:	4770      	bx	lr

0800f664 <_fini>:
 800f664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f666:	bf00      	nop
 800f668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f66a:	bc08      	pop	{r3}
 800f66c:	469e      	mov	lr, r3
 800f66e:	4770      	bx	lr

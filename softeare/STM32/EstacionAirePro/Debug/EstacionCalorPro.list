
EstacionCalorPro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afe4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b70  0800b0f8  0800b0f8  0000c0f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc68  0800bc68  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc68  0800bc68  0000cc68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc70  0800bc70  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc70  0800bc70  0000cc70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bc74  0800bc74  0000cc74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800bc78  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  200001d8  0800be50  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000554  0800be50  0000d554  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d709  00000000  00000000  0000d201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a8f  00000000  00000000  0002a90a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b98  00000000  00000000  000303a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014dc  00000000  00000000  00031f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ecda  00000000  00000000  00033414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e0df  00000000  00000000  000520ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a837  00000000  00000000  000701cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010aa04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008444  00000000  00000000  0010aa48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00112e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b0dc 	.word	0x0800b0dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800b0dc 	.word	0x0800b0dc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_frsub>:
 8000bf0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bf4:	e002      	b.n	8000bfc <__addsf3>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fsub>:
 8000bf8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bfc <__addsf3>:
 8000bfc:	0042      	lsls	r2, r0, #1
 8000bfe:	bf1f      	itttt	ne
 8000c00:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c04:	ea92 0f03 	teqne	r2, r3
 8000c08:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c0c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c10:	d06a      	beq.n	8000ce8 <__addsf3+0xec>
 8000c12:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c16:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1a:	bfc1      	itttt	gt
 8000c1c:	18d2      	addgt	r2, r2, r3
 8000c1e:	4041      	eorgt	r1, r0
 8000c20:	4048      	eorgt	r0, r1
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	bfb8      	it	lt
 8000c26:	425b      	neglt	r3, r3
 8000c28:	2b19      	cmp	r3, #25
 8000c2a:	bf88      	it	hi
 8000c2c:	4770      	bxhi	lr
 8000c2e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c36:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4240      	negne	r0, r0
 8000c3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c42:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c46:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4249      	negne	r1, r1
 8000c4e:	ea92 0f03 	teq	r2, r3
 8000c52:	d03f      	beq.n	8000cd4 <__addsf3+0xd8>
 8000c54:	f1a2 0201 	sub.w	r2, r2, #1
 8000c58:	fa41 fc03 	asr.w	ip, r1, r3
 8000c5c:	eb10 000c 	adds.w	r0, r0, ip
 8000c60:	f1c3 0320 	rsb	r3, r3, #32
 8000c64:	fa01 f103 	lsl.w	r1, r1, r3
 8000c68:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6c:	d502      	bpl.n	8000c74 <__addsf3+0x78>
 8000c6e:	4249      	negs	r1, r1
 8000c70:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c74:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c78:	d313      	bcc.n	8000ca2 <__addsf3+0xa6>
 8000c7a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c7e:	d306      	bcc.n	8000c8e <__addsf3+0x92>
 8000c80:	0840      	lsrs	r0, r0, #1
 8000c82:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c86:	f102 0201 	add.w	r2, r2, #1
 8000c8a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c8c:	d251      	bcs.n	8000d32 <__addsf3+0x136>
 8000c8e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	ea40 0003 	orr.w	r0, r0, r3
 8000ca0:	4770      	bx	lr
 8000ca2:	0049      	lsls	r1, r1, #1
 8000ca4:	eb40 0000 	adc.w	r0, r0, r0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	bf28      	it	cs
 8000cac:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cb0:	d2ed      	bcs.n	8000c8e <__addsf3+0x92>
 8000cb2:	fab0 fc80 	clz	ip, r0
 8000cb6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cba:	ebb2 020c 	subs.w	r2, r2, ip
 8000cbe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc2:	bfaa      	itet	ge
 8000cc4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc8:	4252      	neglt	r2, r2
 8000cca:	4318      	orrge	r0, r3
 8000ccc:	bfbc      	itt	lt
 8000cce:	40d0      	lsrlt	r0, r2
 8000cd0:	4318      	orrlt	r0, r3
 8000cd2:	4770      	bx	lr
 8000cd4:	f092 0f00 	teq	r2, #0
 8000cd8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cdc:	bf06      	itte	eq
 8000cde:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ce2:	3201      	addeq	r2, #1
 8000ce4:	3b01      	subne	r3, #1
 8000ce6:	e7b5      	b.n	8000c54 <__addsf3+0x58>
 8000ce8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf0:	bf18      	it	ne
 8000cf2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf6:	d021      	beq.n	8000d3c <__addsf3+0x140>
 8000cf8:	ea92 0f03 	teq	r2, r3
 8000cfc:	d004      	beq.n	8000d08 <__addsf3+0x10c>
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	bf08      	it	eq
 8000d04:	4608      	moveq	r0, r1
 8000d06:	4770      	bx	lr
 8000d08:	ea90 0f01 	teq	r0, r1
 8000d0c:	bf1c      	itt	ne
 8000d0e:	2000      	movne	r0, #0
 8000d10:	4770      	bxne	lr
 8000d12:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d16:	d104      	bne.n	8000d22 <__addsf3+0x126>
 8000d18:	0040      	lsls	r0, r0, #1
 8000d1a:	bf28      	it	cs
 8000d1c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d20:	4770      	bx	lr
 8000d22:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d26:	bf3c      	itt	cc
 8000d28:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d2c:	4770      	bxcc	lr
 8000d2e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d32:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d36:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d3a:	4770      	bx	lr
 8000d3c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d40:	bf16      	itet	ne
 8000d42:	4608      	movne	r0, r1
 8000d44:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d48:	4601      	movne	r1, r0
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	bf06      	itte	eq
 8000d4e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d52:	ea90 0f01 	teqeq	r0, r1
 8000d56:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_ui2f>:
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e004      	b.n	8000d6c <__aeabi_i2f+0x8>
 8000d62:	bf00      	nop

08000d64 <__aeabi_i2f>:
 8000d64:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d68:	bf48      	it	mi
 8000d6a:	4240      	negmi	r0, r0
 8000d6c:	ea5f 0c00 	movs.w	ip, r0
 8000d70:	bf08      	it	eq
 8000d72:	4770      	bxeq	lr
 8000d74:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d78:	4601      	mov	r1, r0
 8000d7a:	f04f 0000 	mov.w	r0, #0
 8000d7e:	e01c      	b.n	8000dba <__aeabi_l2f+0x2a>

08000d80 <__aeabi_ul2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e00a      	b.n	8000da4 <__aeabi_l2f+0x14>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_l2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d9c:	d502      	bpl.n	8000da4 <__aeabi_l2f+0x14>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	ea5f 0c01 	movs.w	ip, r1
 8000da8:	bf02      	ittt	eq
 8000daa:	4684      	moveq	ip, r0
 8000dac:	4601      	moveq	r1, r0
 8000dae:	2000      	moveq	r0, #0
 8000db0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000db4:	bf08      	it	eq
 8000db6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dba:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dbe:	fabc f28c 	clz	r2, ip
 8000dc2:	3a08      	subs	r2, #8
 8000dc4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc8:	db10      	blt.n	8000dec <__aeabi_l2f+0x5c>
 8000dca:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dce:	4463      	add	r3, ip
 8000dd0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	f020 0001 	biceq.w	r0, r0, #1
 8000dea:	4770      	bx	lr
 8000dec:	f102 0220 	add.w	r2, r2, #32
 8000df0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df4:	f1c2 0220 	rsb	r2, r2, #32
 8000df8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dfc:	fa21 f202 	lsr.w	r2, r1, r2
 8000e00:	eb43 0002 	adc.w	r0, r3, r2
 8000e04:	bf08      	it	eq
 8000e06:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0a:	4770      	bx	lr

08000e0c <__gesf2>:
 8000e0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000e10:	e006      	b.n	8000e20 <__cmpsf2+0x4>
 8000e12:	bf00      	nop

08000e14 <__lesf2>:
 8000e14:	f04f 0c01 	mov.w	ip, #1
 8000e18:	e002      	b.n	8000e20 <__cmpsf2+0x4>
 8000e1a:	bf00      	nop

08000e1c <__cmpsf2>:
 8000e1c:	f04f 0c01 	mov.w	ip, #1
 8000e20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e24:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e28:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e30:	bf18      	it	ne
 8000e32:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e36:	d011      	beq.n	8000e5c <__cmpsf2+0x40>
 8000e38:	b001      	add	sp, #4
 8000e3a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e3e:	bf18      	it	ne
 8000e40:	ea90 0f01 	teqne	r0, r1
 8000e44:	bf58      	it	pl
 8000e46:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e4a:	bf88      	it	hi
 8000e4c:	17c8      	asrhi	r0, r1, #31
 8000e4e:	bf38      	it	cc
 8000e50:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e54:	bf18      	it	ne
 8000e56:	f040 0001 	orrne.w	r0, r0, #1
 8000e5a:	4770      	bx	lr
 8000e5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e60:	d102      	bne.n	8000e68 <__cmpsf2+0x4c>
 8000e62:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e66:	d105      	bne.n	8000e74 <__cmpsf2+0x58>
 8000e68:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e6c:	d1e4      	bne.n	8000e38 <__cmpsf2+0x1c>
 8000e6e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e72:	d0e1      	beq.n	8000e38 <__cmpsf2+0x1c>
 8000e74:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <__aeabi_cfrcmple>:
 8000e7c:	4684      	mov	ip, r0
 8000e7e:	4608      	mov	r0, r1
 8000e80:	4661      	mov	r1, ip
 8000e82:	e7ff      	b.n	8000e84 <__aeabi_cfcmpeq>

08000e84 <__aeabi_cfcmpeq>:
 8000e84:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e86:	f7ff ffc9 	bl	8000e1c <__cmpsf2>
 8000e8a:	2800      	cmp	r0, #0
 8000e8c:	bf48      	it	mi
 8000e8e:	f110 0f00 	cmnmi.w	r0, #0
 8000e92:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e94 <__aeabi_fcmpeq>:
 8000e94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e98:	f7ff fff4 	bl	8000e84 <__aeabi_cfcmpeq>
 8000e9c:	bf0c      	ite	eq
 8000e9e:	2001      	moveq	r0, #1
 8000ea0:	2000      	movne	r0, #0
 8000ea2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_fcmplt>:
 8000ea8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eac:	f7ff ffea 	bl	8000e84 <__aeabi_cfcmpeq>
 8000eb0:	bf34      	ite	cc
 8000eb2:	2001      	movcc	r0, #1
 8000eb4:	2000      	movcs	r0, #0
 8000eb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eba:	bf00      	nop

08000ebc <__aeabi_fcmple>:
 8000ebc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec0:	f7ff ffe0 	bl	8000e84 <__aeabi_cfcmpeq>
 8000ec4:	bf94      	ite	ls
 8000ec6:	2001      	movls	r0, #1
 8000ec8:	2000      	movhi	r0, #0
 8000eca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ece:	bf00      	nop

08000ed0 <__aeabi_fcmpge>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff ffd2 	bl	8000e7c <__aeabi_cfrcmple>
 8000ed8:	bf94      	ite	ls
 8000eda:	2001      	movls	r0, #1
 8000edc:	2000      	movhi	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmpgt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffc8 	bl	8000e7c <__aeabi_cfrcmple>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_f2iz>:
 8000ef8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000efc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f00:	d30f      	bcc.n	8000f22 <__aeabi_f2iz+0x2a>
 8000f02:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f06:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f0a:	d90d      	bls.n	8000f28 <__aeabi_f2iz+0x30>
 8000f0c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f10:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f14:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000f18:	fa23 f002 	lsr.w	r0, r3, r2
 8000f1c:	bf18      	it	ne
 8000f1e:	4240      	negne	r0, r0
 8000f20:	4770      	bx	lr
 8000f22:	f04f 0000 	mov.w	r0, #0
 8000f26:	4770      	bx	lr
 8000f28:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f2c:	d101      	bne.n	8000f32 <__aeabi_f2iz+0x3a>
 8000f2e:	0242      	lsls	r2, r0, #9
 8000f30:	d105      	bne.n	8000f3e <__aeabi_f2iz+0x46>
 8000f32:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000f36:	bf08      	it	eq
 8000f38:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000f3c:	4770      	bx	lr
 8000f3e:	f04f 0000 	mov.w	r0, #0
 8000f42:	4770      	bx	lr

08000f44 <_ZN15CManejadorBotonC1Ev>:
 */

#include "Boton/CManejadorBoton.hpp"
#include "Constantes.hpp"

CManejadorBoton::CManejadorBoton()
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f7c <_ZN15CManejadorBotonC1Ev+0x38>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2201      	movs	r2, #1
 8000f56:	60da      	str	r2, [r3, #12]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	611a      	str	r2, [r3, #16]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	615a      	str	r2, [r3, #20]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	619a      	str	r2, [r3, #24]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	61da      	str	r2, [r3, #28]
{
	// TODO Auto-generated constructor stub

}
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr
 8000f7c:	0800b180 	.word	0x0800b180

08000f80 <_ZN15CManejadorBotonD1Ev>:

CManejadorBoton::~CManejadorBoton()
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	4a04      	ldr	r2, [pc, #16]	@ (8000f9c <_ZN15CManejadorBotonD1Ev+0x1c>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4618      	mov	r0, r3
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	0800b180 	.word	0x0800b180

08000fa0 <_ZN15CManejadorBotonD0Ev>:
CManejadorBoton::~CManejadorBoton()
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
}
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff ffe9 	bl	8000f80 <_ZN15CManejadorBotonD1Ev>
 8000fae:	2120      	movs	r1, #32
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f007 fa0f 	bl	80083d4 <_ZdlPvj>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>:

void CManejadorBoton::Configurar(GPIO_TypeDef *puerto, uint16_t pin,uint8_t identificador)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	4611      	mov	r1, r2
 8000fcc:	461a      	mov	r2, r3
 8000fce:	460b      	mov	r3, r1
 8000fd0:	80fb      	strh	r3, [r7, #6]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	717b      	strb	r3, [r7, #5]
	GPIO_Port = puerto;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	68ba      	ldr	r2, [r7, #8]
 8000fda:	605a      	str	r2, [r3, #4]
	Gpio_Pin = pin;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	88fa      	ldrh	r2, [r7, #6]
 8000fe0:	811a      	strh	r2, [r3, #8]
	Identificador = identificador;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	797a      	ldrb	r2, [r7, #5]
 8000fe6:	729a      	strb	r2, [r3, #10]
}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr

08000ff2 <_ZN15CManejadorBoton4InitEv>:
void CManejadorBoton::Init()
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b086      	sub	sp, #24
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 8000ffa:	f107 0308 	add.w	r3, r7, #8
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
	{ 0 };
	GPIO_InitStruct.Pin = Gpio_Pin;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	891b      	ldrh	r3, [r3, #8]
 800100c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f107 0208 	add.w	r2, r7, #8
 800101e:	4611      	mov	r1, r2
 8001020:	4618      	mov	r0, r3
 8001022:	f005 f895 	bl	8006150 <HAL_GPIO_Init>
}
 8001026:	bf00      	nop
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <_ZN15CManejadorBoton4LeerEv>:
int CManejadorBoton::Leer()
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(GPIO_Port, Gpio_Pin); // lee el pin
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685a      	ldr	r2, [r3, #4]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	891b      	ldrh	r3, [r3, #8]
 800103e:	4619      	mov	r1, r3
 8001040:	4610      	mov	r0, r2
 8001042:	f005 fa09 	bl	8006458 <HAL_GPIO_ReadPin>
 8001046:	4603      	mov	r3, r0

}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>:
void CManejadorBoton::AsignaManejadorEventos(CManejadorEventosBoton *manejador)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
	Manejador = manejador;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	61da      	str	r2, [r3, #28]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr

0800106a <_ZN15CManejadorBoton7ProcesaEv>:
void CManejadorBoton::Procesa()
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b086      	sub	sp, #24
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
	int tiempoClick = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
	int estado = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
	if (Manejador == NULL)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d07e      	beq.n	8001180 <_ZN15CManejadorBoton7ProcesaEv+0x116>
	{
		return;
	}
	estado = Leer();
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ffd3 	bl	800102e <_ZN15CManejadorBoton4LeerEv>
 8001088:	6138      	str	r0, [r7, #16]

	if (Estado == estado)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	429a      	cmp	r2, r3
 8001092:	d121      	bne.n	80010d8 <_ZN15CManejadorBoton7ProcesaEv+0x6e>
	{
		if (Estado == BOTON_PRESIONADO)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d173      	bne.n	8001184 <_ZN15CManejadorBoton7ProcesaEv+0x11a>
		{
			tiempoClick = HAL_GetTick() - TiempoInicioClick;
 800109c:	f004 fbf6 	bl	800588c <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	617b      	str	r3, [r7, #20]
			if (tiempoClick >= TIRMPO_MILIS_BOTON_PRESIONADO_LARGO)
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	f241 3287 	movw	r2, #4999	@ 0x1387
 80010b0:	4293      	cmp	r3, r2
 80010b2:	dd67      	ble.n	8001184 <_ZN15CManejadorBoton7ProcesaEv+0x11a>
			{
				TiempoInicioClick = HAL_GetTick();
 80010b4:	f004 fbea 	bl	800588c <HAL_GetTick>
 80010b8:	4603      	mov	r3, r0
 80010ba:	461a      	mov	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	619a      	str	r2, [r3, #24]
				Manejador->OnBotonPresionadoLargoEvent(Identificador);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69d8      	ldr	r0, [r3, #28]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	69db      	ldr	r3, [r3, #28]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	3314      	adds	r3, #20
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	7a92      	ldrb	r2, [r2, #10]
 80010d2:	4611      	mov	r1, r2
 80010d4:	4798      	blx	r3
			}
		}
		//no ha cambiado por lo que no hay evento que informar
		return;
 80010d6:	e055      	b.n	8001184 <_ZN15CManejadorBoton7ProcesaEv+0x11a>
	}
	if (estado != PreEstado)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	691b      	ldr	r3, [r3, #16]
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d009      	beq.n	80010f6 <_ZN15CManejadorBoton7ProcesaEv+0x8c>
	{
		//acaba de cambiar
		ReboteMilis = HAL_GetTick();  //leo el tiempo actual
 80010e2:	f004 fbd3 	bl	800588c <HAL_GetTick>
 80010e6:	4603      	mov	r3, r0
 80010e8:	461a      	mov	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	615a      	str	r2, [r3, #20]
		PreEstado = estado;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	611a      	str	r2, [r3, #16]
		return;
 80010f4:	e049      	b.n	800118a <_ZN15CManejadorBoton7ProcesaEv+0x120>
	}
	//leo el tiempo actual
	int tiempo = HAL_GetTick();
 80010f6:	f004 fbc9 	bl	800588c <HAL_GetTick>
 80010fa:	4603      	mov	r3, r0
 80010fc:	60fb      	str	r3, [r7, #12]
	if ((tiempo - ReboteMilis) < TIEMPO_REBOTE)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b63      	cmp	r3, #99	@ 0x63
 8001108:	dd3e      	ble.n	8001188 <_ZN15CManejadorBoton7ProcesaEv+0x11e>
	{
		//como todavia no pasa el tiempo de espera para evitar rebotes no hago nada
		return;
	}
	//ya filtre los rebotes, por lo que ahora si informo del cambio de estado del boton
	Estado = estado;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	60da      	str	r2, [r3, #12]
	if (Estado == BOTON_SUELTO)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d11d      	bne.n	8001154 <_ZN15CManejadorBoton7ProcesaEv+0xea>
	{
		Manejador->OnBotonSueltoEvent(Identificador);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69d8      	ldr	r0, [r3, #28]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	69db      	ldr	r3, [r3, #28]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	3310      	adds	r3, #16
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	7a92      	ldrb	r2, [r2, #10]
 800112a:	4611      	mov	r1, r2
 800112c:	4798      	blx	r3
		tiempoClick = HAL_GetTick() - TiempoInicioClick;
 800112e:	f004 fbad 	bl	800588c <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	617b      	str	r3, [r7, #20]
		Manejador->OnBotonClickEvent(Identificador, tiempoClick);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	69d8      	ldr	r0, [r3, #28]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	69db      	ldr	r3, [r3, #28]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	3308      	adds	r3, #8
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	7a92      	ldrb	r2, [r2, #10]
 800114e:	4611      	mov	r1, r2
 8001150:	697a      	ldr	r2, [r7, #20]
 8001152:	4798      	blx	r3
	}
	if (Estado == BOTON_PRESIONADO)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d116      	bne.n	800118a <_ZN15CManejadorBoton7ProcesaEv+0x120>
	{
		TiempoInicioClick = HAL_GetTick();
 800115c:	f004 fb96 	bl	800588c <HAL_GetTick>
 8001160:	4603      	mov	r3, r0
 8001162:	461a      	mov	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	619a      	str	r2, [r3, #24]
		Manejador->OnBotonPresionadoEvent(Identificador);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69d8      	ldr	r0, [r3, #28]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	69db      	ldr	r3, [r3, #28]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	330c      	adds	r3, #12
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	7a92      	ldrb	r2, [r2, #10]
 800117a:	4611      	mov	r1, r2
 800117c:	4798      	blx	r3
 800117e:	e004      	b.n	800118a <_ZN15CManejadorBoton7ProcesaEv+0x120>
		return;
 8001180:	bf00      	nop
 8001182:	e002      	b.n	800118a <_ZN15CManejadorBoton7ProcesaEv+0x120>
		return;
 8001184:	bf00      	nop
 8001186:	e000      	b.n	800118a <_ZN15CManejadorBoton7ProcesaEv+0x120>
		return;
 8001188:	bf00      	nop
	}
}
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <_ZN22CManejadorEventosBotonC1Ev>:
 *      Author: W10
 */

#include "Boton/CManejadorEventosBoton.hpp"

CManejadorEventosBoton::CManejadorEventosBoton()
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	4a04      	ldr	r2, [pc, #16]	@ (80011ac <_ZN22CManejadorEventosBotonC1Ev+0x1c>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4618      	mov	r0, r3
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	0800b190 	.word	0x0800b190

080011b0 <_ZN22CManejadorEventosBotonD1Ev>:

CManejadorEventosBoton::~CManejadorEventosBoton()
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	4a04      	ldr	r2, [pc, #16]	@ (80011cc <_ZN22CManejadorEventosBotonD1Ev+0x1c>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4618      	mov	r0, r3
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	0800b190 	.word	0x0800b190

080011d0 <_ZN22CManejadorEventosBotonD0Ev>:
CManejadorEventosBoton::~CManejadorEventosBoton()
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
}
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ffe9 	bl	80011b0 <_ZN22CManejadorEventosBotonD1Ev>
 80011de:	2104      	movs	r1, #4
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f007 f8f7 	bl	80083d4 <_ZdlPvj>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <_ZN22CManejadorEventosBoton17OnBotonClickEventEii>:

void CManejadorEventosBoton::OnBotonClickEvent(int idBoton, int tiempoClick)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]

}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr

08001206 <_ZN22CManejadorEventosBoton22OnBotonPresionadoEventEi>:
 void CManejadorEventosBoton::OnBotonPresionadoEvent(int idBoton)
 {
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	6039      	str	r1, [r7, #0]

 }
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr

0800121a <_ZN22CManejadorEventosBoton18OnBotonSueltoEventEi>:
 void CManejadorEventosBoton::OnBotonSueltoEvent(int idBoton)
 {
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	6039      	str	r1, [r7, #0]

 }
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr

0800122e <_ZN22CManejadorEventosBoton27OnBotonPresionadoLargoEventEi>:
 void CManejadorEventosBoton::OnBotonPresionadoLargoEvent(int idBoton)
 {
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
 8001236:	6039      	str	r1, [r7, #0]

 }
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
	...

08001244 <_ZN20ControlVelocidadAireC1Ev>:

#include "ControlVelocidadAire.hpp"
#include "stm32f1xx.h"
//#include "stm32f1xx_hal_adc.h"

ControlVelocidadAire::ControlVelocidadAire()
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	4a04      	ldr	r2, [pc, #16]	@ (8001260 <_ZN20ControlVelocidadAireC1Ev+0x1c>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4618      	mov	r0, r3
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	0800b1b0 	.word	0x0800b1b0

08001264 <_ZN20ControlVelocidadAireD1Ev>:

ControlVelocidadAire::~ControlVelocidadAire()
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	4a04      	ldr	r2, [pc, #16]	@ (8001280 <_ZN20ControlVelocidadAireD1Ev+0x1c>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4618      	mov	r0, r3
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	0800b1b0 	.word	0x0800b1b0

08001284 <_ZN20ControlVelocidadAireD0Ev>:
ControlVelocidadAire::~ControlVelocidadAire()
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
}
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff ffe9 	bl	8001264 <_ZN20ControlVelocidadAireD1Ev>
 8001292:	2134      	movs	r1, #52	@ 0x34
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f007 f89d 	bl	80083d4 <_ZdlPvj>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <_ZN20ControlVelocidadAire10InicializaEv>:

void ControlVelocidadAire::Inicializa()
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]

	 ADC_ChannelConfTypeDef sConfig = {0};
 80012ac:	f107 030c 	add.w	r3, r7, #12
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
	 hadc1.Instance = ADC1;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a23      	ldr	r2, [pc, #140]	@ (8001348 <_ZN20ControlVelocidadAire10InicializaEv+0xa4>)
 80012bc:	605a      	str	r2, [r3, #4]
	 hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	60da      	str	r2, [r3, #12]
	 hadc1.Init.ContinuousConvMode = ENABLE;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2201      	movs	r2, #1
 80012c8:	741a      	strb	r2, [r3, #16]
	 hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	761a      	strb	r2, [r3, #24]
	 hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80012d6:	621a      	str	r2, [r3, #32]
	 hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
	 hadc1.Init.NbrOfConversion = 1;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2201      	movs	r2, #1
 80012e2:	615a      	str	r2, [r3, #20]
	 if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3304      	adds	r3, #4
 80012e8:	4618      	mov	r0, r3
 80012ea:	f004 fafd 	bl	80058e8 <HAL_ADC_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	bf14      	ite	ne
 80012f4:	2301      	movne	r3, #1
 80012f6:	2300      	moveq	r3, #0
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d002      	beq.n	8001304 <_ZN20ControlVelocidadAire10InicializaEv+0x60>
	 {
	 Error_Handler();
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 f842 	bl	8001388 <_ZN20ControlVelocidadAire13Error_HandlerEv>
	 }

	 sConfig.Channel = ADC_CHANNEL_3;
 8001304:	2303      	movs	r3, #3
 8001306:	60fb      	str	r3, [r7, #12]
	 sConfig.Rank = ADC_REGULAR_RANK_1;
 8001308:	2301      	movs	r3, #1
 800130a:	613b      	str	r3, [r7, #16]
	 sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800130c:	2307      	movs	r3, #7
 800130e:	617b      	str	r3, [r7, #20]
	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3304      	adds	r3, #4
 8001314:	f107 020c 	add.w	r2, r7, #12
 8001318:	4611      	mov	r1, r2
 800131a:	4618      	mov	r0, r3
 800131c:	f004 fc76 	bl	8005c0c <HAL_ADC_ConfigChannel>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	bf14      	ite	ne
 8001326:	2301      	movne	r3, #1
 8001328:	2300      	moveq	r3, #0
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <_ZN20ControlVelocidadAire10InicializaEv+0x92>
	 {
	 Error_Handler();
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 f829 	bl	8001388 <_ZN20ControlVelocidadAire13Error_HandlerEv>
	 }
	 HAL_ADC_Start(&hadc1);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3304      	adds	r3, #4
 800133a:	4618      	mov	r0, r3
 800133c:	f004 fbac 	bl	8005a98 <HAL_ADC_Start>
}
 8001340:	bf00      	nop
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40012400 	.word	0x40012400

0800134c <_ZN20ControlVelocidadAire12LeeVelocidadEv>:
int ControlVelocidadAire::LeeVelocidad()
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	int valor=HAL_ADC_GetValue(&hadc1);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3304      	adds	r3, #4
 8001358:	4618      	mov	r0, r3
 800135a:	f004 fc4b 	bl	8005bf4 <HAL_ADC_GetValue>
 800135e:	4603      	mov	r3, r0
 8001360:	60fb      	str	r3, [r7, #12]
	//4095->100
	//valor->X
	//x=valor*100/4095
	return 	100-(int)(valor*100/4095);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2264      	movs	r2, #100	@ 0x64
 8001366:	fb02 f303 	mul.w	r3, r2, r3
 800136a:	4a06      	ldr	r2, [pc, #24]	@ (8001384 <_ZN20ControlVelocidadAire12LeeVelocidadEv+0x38>)
 800136c:	fb82 1203 	smull	r1, r2, r2, r3
 8001370:	441a      	add	r2, r3
 8001372:	12d2      	asrs	r2, r2, #11
 8001374:	17db      	asrs	r3, r3, #31
 8001376:	1a9b      	subs	r3, r3, r2
 8001378:	3364      	adds	r3, #100	@ 0x64
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	80080081 	.word	0x80080081

08001388 <_ZN20ControlVelocidadAire13Error_HandlerEv>:
void ControlVelocidadAire::Error_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]

}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr
	...

0800139c <_Z12delay_us_dwtm>:

}

//retardo por debbuger
void delay_us_dwt(uint32_t reta)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]

	DWT->CYCCNT = 0;
 80013a4:	4b0b      	ldr	r3, [pc, #44]	@ (80013d4 <_Z12delay_us_dwtm+0x38>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	605a      	str	r2, [r3, #4]
	while ( DWT->CYCCNT <= pasos * reta)
 80013aa:	bf00      	nop
 80013ac:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <_Z12delay_us_dwtm+0x38>)
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	4b09      	ldr	r3, [pc, #36]	@ (80013d8 <_Z12delay_us_dwtm+0x3c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	fb01 f303 	mul.w	r3, r1, r3
 80013ba:	429a      	cmp	r2, r3
 80013bc:	bf94      	ite	ls
 80013be:	2301      	movls	r3, #1
 80013c0:	2300      	movhi	r3, #0
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1f1      	bne.n	80013ac <_Z12delay_us_dwtm+0x10>
		;	//multiplica por us
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	e0001000 	.word	0xe0001000
 80013d8:	200001f4 	.word	0x200001f4

080013dc <_ZN8CEncoderC1Ev>:
 *      Author: W10
 */

#include "Encoder/CEncoder.hpp"

CEncoder::CEncoder()
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fed2 	bl	8001190 <_ZN22CManejadorEventosBotonC1Ev>
 80013ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001420 <_ZN8CEncoderC1Ev+0x44>)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	631a      	str	r2, [r3, #48]	@ 0x30
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	635a      	str	r2, [r3, #52]	@ 0x34
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	63da      	str	r2, [r3, #60]	@ 0x3c
{
	// TODO Auto-generated constructor stub

}
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	0800b1c0 	.word	0x0800b1c0

08001424 <_ZN8CEncoderD1Ev>:

CEncoder::~CEncoder()
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	4a05      	ldr	r2, [pc, #20]	@ (8001444 <_ZN8CEncoderD1Ev+0x20>)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff febb 	bl	80011b0 <_ZN22CManejadorEventosBotonD1Ev>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4618      	mov	r0, r3
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	0800b1c0 	.word	0x0800b1c0

08001448 <_ZN8CEncoderD0Ev>:
CEncoder::~CEncoder()
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
}
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff ffe7 	bl	8001424 <_ZN8CEncoderD1Ev>
 8001456:	214c      	movs	r1, #76	@ 0x4c
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f006 ffbb 	bl	80083d4 <_ZdlPvj>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4618      	mov	r0, r3
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <_ZN8CEncoder10ConfigurarEP12GPIO_TypeDeftS1_tS1_ti>:

void CEncoder::Configurar(GPIO_TypeDef *clk_Port, uint16_t pinClk,GPIO_TypeDef *dt_Port, uint16_t pinDt, GPIO_TypeDef *boton_Port,uint16_t pinBoton, int id_Encoder)
{
 8001468:	b590      	push	{r4, r7, lr}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	4613      	mov	r3, r2
 8001476:	80fb      	strh	r3, [r7, #6]
	Clk_Port = clk_Port;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	605a      	str	r2, [r3, #4]
	PinClk = pinClk;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	88fa      	ldrh	r2, [r7, #6]
 8001482:	811a      	strh	r2, [r3, #8]

	Dt_Port = dt_Port;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	60da      	str	r2, [r3, #12]
	PinDt = pinDt;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	8c3a      	ldrh	r2, [r7, #32]
 800148e:	821a      	strh	r2, [r3, #16]

	Boton_Port = boton_Port;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001494:	615a      	str	r2, [r3, #20]
	PinBoton = pinBoton;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800149a:	831a      	strh	r2, [r3, #24]

	ID_Encoder = id_Encoder;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80014a0:	625a      	str	r2, [r3, #36]	@ 0x24
	Boton = new CManejadorBoton();
 80014a2:	2020      	movs	r0, #32
 80014a4:	f006 ff98 	bl	80083d8 <_Znwj>
 80014a8:	4603      	mov	r3, r0
 80014aa:	461c      	mov	r4, r3
 80014ac:	4620      	mov	r0, r4
 80014ae:	f7ff fd49 	bl	8000f44 <_ZN15CManejadorBotonC1Ev>
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	61dc      	str	r4, [r3, #28]
	Boton->AsignaManejadorEventos(this);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	4611      	mov	r1, r2
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fdc6 	bl	8001050 <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	Boton->Configurar(Boton_Port, PinBoton, ID_BOTON);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	69d8      	ldr	r0, [r3, #28]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	6959      	ldr	r1, [r3, #20]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	8b1a      	ldrh	r2, [r3, #24]
 80014d0:	2303      	movs	r3, #3
 80014d2:	f7ff fd75 	bl	8000fc0 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	CLK_statusAnterior = LeeClk();
 80014d6:	68f8      	ldr	r0, [r7, #12]
 80014d8:	f000 f807 	bl	80014ea <_ZN8CEncoder6LeeClkEv>
 80014dc:	4602      	mov	r2, r0
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	641a      	str	r2, [r3, #64]	@ 0x40

}
 80014e2:	bf00      	nop
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd90      	pop	{r4, r7, pc}

080014ea <_ZN8CEncoder6LeeClkEv>:

int CEncoder::LeeClk()
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(Clk_Port, PinClk);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	891b      	ldrh	r3, [r3, #8]
 80014fa:	4619      	mov	r1, r3
 80014fc:	4610      	mov	r0, r2
 80014fe:	f004 ffab 	bl	8006458 <HAL_GPIO_ReadPin>
 8001502:	4603      	mov	r3, r0
}
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <_ZN8CEncoder5LeeDtEv>:
int CEncoder::LeeDt()
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(Dt_Port, PinDt);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68da      	ldr	r2, [r3, #12]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	8a1b      	ldrh	r3, [r3, #16]
 800151c:	4619      	mov	r1, r3
 800151e:	4610      	mov	r0, r2
 8001520:	f004 ff9a 	bl	8006458 <HAL_GPIO_ReadPin>
 8001524:	4603      	mov	r3, r0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <_ZN8CEncoder4InitEv>:

void CEncoder::Init()
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 8001538:	f107 0308 	add.w	r3, r7, #8
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
	{ 0 };
	// CKL
	GPIO_InitStruct.Pin = PinClk;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	891b      	ldrh	r3, [r3, #8]
 800154a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode =GPIO_MODE_IT_RISING_FALLING;// GPIO_MODE_INPUT;
 800154c:	4b16      	ldr	r3, [pc, #88]	@ (80015a8 <_ZN8CEncoder4InitEv+0x78>)
 800154e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(Clk_Port, &GPIO_InitStruct);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f107 0208 	add.w	r2, r7, #8
 800155c:	4611      	mov	r1, r2
 800155e:	4618      	mov	r0, r3
 8001560:	f004 fdf6 	bl	8006150 <HAL_GPIO_Init>
	//DT
	GPIO_InitStruct.Pin = PinDt;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	8a1b      	ldrh	r3, [r3, #16]
 8001568:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(Dt_Port, &GPIO_InitStruct);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	f107 0208 	add.w	r2, r7, #8
 800157a:	4611      	mov	r1, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f004 fde7 	bl	8006150 <HAL_GPIO_Init>
	//Boton
	GPIO_InitStruct.Pin = PinBoton;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	8b1b      	ldrh	r3, [r3, #24]
 8001586:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(Boton_Port, &GPIO_InitStruct);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	695b      	ldr	r3, [r3, #20]
 8001594:	f107 0208 	add.w	r2, r7, #8
 8001598:	4611      	mov	r1, r2
 800159a:	4618      	mov	r0, r3
 800159c:	f004 fdd8 	bl	8006150 <HAL_GPIO_Init>
}
 80015a0:	bf00      	nop
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	10310000 	.word	0x10310000

080015ac <_ZN8CEncoder22AsignaManejadorEventosEP24CManejadorEventosEncoder>:

void CEncoder::AsignaManejadorEventos(CManejadorEventosEncoder *manejador)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
	Manejador = manejador;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	621a      	str	r2, [r3, #32]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr

080015c6 <_ZN8CEncoder18OnBotonSueltoEventEi>:

void CEncoder::OnBotonSueltoEvent(int idBoton)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
 80015ce:	6039      	str	r1, [r7, #0]
	if (Manejador == NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a1b      	ldr	r3, [r3, #32]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d00e      	beq.n	80015f6 <_ZN8CEncoder18OnBotonSueltoEventEi+0x30>
	{
		return;
	}
	switch (idBoton)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d10c      	bne.n	80015f8 <_ZN8CEncoder18OnBotonSueltoEventEi+0x32>
	{
	case ID_BOTON:
		Manejador->OnBotonEncoderSueltoEvent(ID_Encoder);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a18      	ldr	r0, [r3, #32]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	331c      	adds	r3, #28
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80015f0:	4611      	mov	r1, r2
 80015f2:	4798      	blx	r3
		break;
 80015f4:	e000      	b.n	80015f8 <_ZN8CEncoder18OnBotonSueltoEventEi+0x32>
		return;
 80015f6:	bf00      	nop
	}
}
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <_ZN8CEncoder22OnBotonPresionadoEventEi>:

void CEncoder::OnBotonPresionadoEvent(int idBoton)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	6039      	str	r1, [r7, #0]
	if (Manejador == NULL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00e      	beq.n	800162e <_ZN8CEncoder22OnBotonPresionadoEventEi+0x30>
	{
		return;
	}
	switch (idBoton)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	2b03      	cmp	r3, #3
 8001614:	d10c      	bne.n	8001630 <_ZN8CEncoder22OnBotonPresionadoEventEi+0x32>
	{
	case ID_BOTON:
		Manejador->OnBotonEncoderPresionadoEvent(ID_Encoder);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a18      	ldr	r0, [r3, #32]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	3314      	adds	r3, #20
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001628:	4611      	mov	r1, r2
 800162a:	4798      	blx	r3
		break;
 800162c:	e000      	b.n	8001630 <_ZN8CEncoder22OnBotonPresionadoEventEi+0x32>
		return;
 800162e:	bf00      	nop
	}
}
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <_ZN8CEncoder17OnBotonClickEventEii>:

void CEncoder::OnBotonClickEvent(int idBoton, int tiempoClick)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b084      	sub	sp, #16
 800163a:	af00      	add	r7, sp, #0
 800163c:	60f8      	str	r0, [r7, #12]
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]

	switch (idBoton)
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	2b03      	cmp	r3, #3
 8001646:	d10b      	bne.n	8001660 <_ZN8CEncoder17OnBotonClickEventEii+0x2a>
	{
	case ID_BOTON:
		Manejador->OnBotonEncoderClickEvent(ID_Encoder, tiempoClick);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6a18      	ldr	r0, [r3, #32]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	3310      	adds	r3, #16
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	4798      	blx	r3
		break;
 800165e:	bf00      	nop
	}
}
 8001660:	bf00      	nop
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <_ZN8CEncoder7ProcesaEv>:

void CEncoder::Procesa()
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	Boton->Procesa();
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69db      	ldr	r3, [r3, #28]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff fcf8 	bl	800106a <_ZN15CManejadorBoton7ProcesaEv>
	leeEncoder();
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 f804 	bl	8001688 <_ZN8CEncoder10leeEncoderEv>
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <_ZN8CEncoder10leeEncoderEv>:

void CEncoder::leeEncoder()
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	CLK_status = LeeClk();
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff ff2a 	bl	80014ea <_ZN8CEncoder6LeeClkEv>
 8001696:	4602      	mov	r2, r0
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	629a      	str	r2, [r3, #40]	@ 0x28
	if (CLK_status != CLK_statusAnterior && CLK_status == 1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d017      	beq.n	80016d8 <_ZN8CEncoder10leeEncoderEv+0x50>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d113      	bne.n	80016d8 <_ZN8CEncoder10leeEncoderEv+0x50>
	{
		if (LeeDt() != CLK_status)
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ff2b 	bl	800150c <_ZN8CEncoder5LeeDtEv>
 80016b6:	4602      	mov	r2, r0
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016bc:	429a      	cmp	r2, r3
 80016be:	bf14      	ite	ne
 80016c0:	2301      	movne	r3, #1
 80016c2:	2300      	moveq	r3, #0
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <_ZN8CEncoder10leeEncoderEv+0x4a>
		{
			incrementa();
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 f80c 	bl	80016e8 <_ZN8CEncoder10incrementaEv>
 80016d0:	e002      	b.n	80016d8 <_ZN8CEncoder10leeEncoderEv+0x50>
		}
		else
		{
			decrementa();
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f000 f81b 	bl	800170e <_ZN8CEncoder10decrementaEv>
		}
	}
	CLK_statusAnterior = CLK_status;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <_ZN8CEncoder10incrementaEv>:

void CEncoder::incrementa()
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	Manejador->OnIncrementoEncoder(ID_Encoder);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a18      	ldr	r0, [r3, #32]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	3308      	adds	r3, #8
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001702:	4611      	mov	r1, r2
 8001704:	4798      	blx	r3
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <_ZN8CEncoder10decrementaEv>:

void CEncoder::decrementa()
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
	Manejador->OnDecrementoEncoder(ID_Encoder);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a18      	ldr	r0, [r3, #32]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	330c      	adds	r3, #12
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001728:	4611      	mov	r1, r2
 800172a:	4798      	blx	r3
}
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <_ZN24CManejadorEventosEncoderC1Ev>:
 *      Author: W10
 */

#include <Encoder/CManejadorEventosEncoder.hpp>

CManejadorEventosEncoder::CManejadorEventosEncoder()
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	4a04      	ldr	r2, [pc, #16]	@ (8001750 <_ZN24CManejadorEventosEncoderC1Ev+0x1c>)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4618      	mov	r0, r3
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	0800b1e4 	.word	0x0800b1e4

08001754 <_ZN24CManejadorEventosEncoderD1Ev>:

CManejadorEventosEncoder::~CManejadorEventosEncoder()
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	4a04      	ldr	r2, [pc, #16]	@ (8001770 <_ZN24CManejadorEventosEncoderD1Ev+0x1c>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4618      	mov	r0, r3
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	0800b1e4 	.word	0x0800b1e4

08001774 <_ZN24CManejadorEventosEncoderD0Ev>:
CManejadorEventosEncoder::~CManejadorEventosEncoder()
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
}
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ffe9 	bl	8001754 <_ZN24CManejadorEventosEncoderD1Ev>
 8001782:	2104      	movs	r1, #4
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f006 fe25 	bl	80083d4 <_ZdlPvj>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4618      	mov	r0, r3
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <_ZN24CManejadorEventosEncoder19OnIncrementoEncoderEi>:

void CManejadorEventosEncoder::OnIncrementoEncoder(int id_Encoder)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]

}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr

080017a8 <_ZN24CManejadorEventosEncoder19OnDecrementoEncoderEi>:
void CManejadorEventosEncoder::OnDecrementoEncoder(int id_Encoder)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]

}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr

080017bc <_ZN24CManejadorEventosEncoder24OnBotonEncoderClickEventEii>:
void CManejadorEventosEncoder::OnBotonEncoderClickEvent(int id_Encoder, int tiempoClick)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]

}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr

080017d2 <_ZN24CManejadorEventosEncoder29OnBotonEncoderPresionadoEventEi>:
void CManejadorEventosEncoder::OnBotonEncoderPresionadoEvent(int id_Encoder)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	6039      	str	r1, [r7, #0]

}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr

080017e6 <_ZN24CManejadorEventosEncoder34OnBotonEncoderPresionadoLargoEventEi>:
void CManejadorEventosEncoder::OnBotonEncoderPresionadoLargoEvent(int id_Encoder)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	6039      	str	r1, [r7, #0]

}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr

080017fa <_ZN24CManejadorEventosEncoder25OnBotonEncoderSueltoEventEi>:
void CManejadorEventosEncoder::OnBotonEncoderSueltoEvent(int id_Encoder)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
 8001802:	6039      	str	r1, [r7, #0]

}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr
	...

08001810 <_ZN13CEstacionBaseC1Ev>:
 *      Author: W10
 */

#include <Estaciones/CEstacionBase.hpp>

CEstacionBase::CEstacionBase()
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	4a05      	ldr	r2, [pc, #20]	@ (8001830 <_ZN13CEstacionBaseC1Ev+0x20>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	605a      	str	r2, [r3, #4]
{
	// TODO Auto-generated constructor stub

}
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr
 8001830:	0800b20c 	.word	0x0800b20c

08001834 <_ZN13CEstacionBaseD1Ev>:

CEstacionBase::~CEstacionBase()
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	4a04      	ldr	r2, [pc, #16]	@ (8001850 <_ZN13CEstacionBaseD1Ev+0x1c>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	0800b20c 	.word	0x0800b20c

08001854 <_ZN13CEstacionBaseD0Ev>:
CEstacionBase::~CEstacionBase()
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
}
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff ffe9 	bl	8001834 <_ZN13CEstacionBaseD1Ev>
 8001862:	2108      	movs	r1, #8
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f006 fdb5 	bl	80083d4 <_ZdlPvj>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4618      	mov	r0, r3
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <_ZN13CEstacionBase18GetTemperaturaRealEv>:

float CEstacionBase::GetTemperaturaReal() //regresa la tenperatura actual de la estacion
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]

}
 800187c:	bf00      	nop
 800187e:	4618      	mov	r0, r3
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr

08001888 <_ZN13CEstacionBase14SetTemperaturaEi>:
void CEstacionBase::SetTemperatura(int temperatura) //establece la temperatura que se quiere alcanzar
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]

}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr

0800189c <_ZN13CEstacionBase14GetTemperaturaEv>:
int CEstacionBase::GetTemperatura() // regresa la temperatura seteada
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]

}
 80018a4:	bf00      	nop
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr

080018b0 <_ZN13CEstacionBase12SetNivelAireEi>:
void CEstacionBase::SetNivelAire(int nivel) //establece el nivel de aire
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]

}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr

080018c4 <_ZN13CEstacionBase12GetNivelAireEv>:
int CEstacionBase::GetNivelAire() //regresa el nivel de aire setado
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]

}
 80018cc:	bf00      	nop
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr

080018d8 <_ZN13CEstacionBase9GetEstadoEv>:
int CEstacionBase::GetEstado() //regresa 1 si esta activo y 0 si esta en reposo
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]

}
 80018e0:	bf00      	nop
 80018e2:	4618      	mov	r0, r3
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr

080018ec <_ZN13CEstacionBase21IncrementaTemperaturaEv>:
//para que la misma estacion incremente la temperatura
void CEstacionBase::IncrementaTemperatura()
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]

}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr

080018fe <_ZN13CEstacionBase21DecrementaTemperaturaEv>:
//para que la misma estacion decremente la temeperatura
void CEstacionBase::DecrementaTemperatura()
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]

}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr

08001910 <_ZN13CEstacionBase21SetManejadorControlesEP23CManejadorControlesBase>:
// asigna el evento que sellamara cuando cambie la temperatura que el usuario especifica
void CEstacionBase::SetManejadorControles(CManejadorControlesBase *obj)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
	ManejadorControles = obj;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	605a      	str	r2, [r3, #4]
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr

0800192a <_ZN13CEstacionBase7ProcesaEv>:
//funcion que se debera llamar para controlar la estacion de calor
void CEstacionBase::Procesa()
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]

}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr

0800193c <_ZN13CEstacionBase16TemperaturaEventEi>:
void CEstacionBase::TemperaturaEvent(int temperatura)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00a      	beq.n	8001964 <_ZN13CEstacionBase16TemperaturaEventEi+0x28>
		return;
	ManejadorControles->OnTemperaturaEvent(temperatura);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	3308      	adds	r3, #8
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6839      	ldr	r1, [r7, #0]
 800195e:	4610      	mov	r0, r2
 8001960:	4798      	blx	r3
 8001962:	e000      	b.n	8001966 <_ZN13CEstacionBase16TemperaturaEventEi+0x2a>
		return;
 8001964:	bf00      	nop
}
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <_ZN13CEstacionBase14NivelAireEventEi>:
void CEstacionBase::NivelAireEvent(int aire)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00a      	beq.n	8001994 <_ZN13CEstacionBase14NivelAireEventEi+0x28>
		return;
	ManejadorControles->OnNivelAireEvent(aire);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	3310      	adds	r3, #16
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6839      	ldr	r1, [r7, #0]
 800198e:	4610      	mov	r0, r2
 8001990:	4798      	blx	r3
 8001992:	e000      	b.n	8001996 <_ZN13CEstacionBase14NivelAireEventEi+0x2a>
		return;
 8001994:	bf00      	nop
}
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <_ZN13CEstacionBase20TemperaturaRealEventEi>:
void CEstacionBase::TemperaturaRealEvent(int temperatura)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00a      	beq.n	80019c4 <_ZN13CEstacionBase20TemperaturaRealEventEi+0x28>
		return;
	ManejadorControles->OnTemperaturaRealEvent(temperatura);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	330c      	adds	r3, #12
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6839      	ldr	r1, [r7, #0]
 80019be:	4610      	mov	r0, r2
 80019c0:	4798      	blx	r3
 80019c2:	e000      	b.n	80019c6 <_ZN13CEstacionBase20TemperaturaRealEventEi+0x2a>
		return;
 80019c4:	bf00      	nop

}
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <_ZN13CEstacionBase18BotonUnoClickEventEi>:
//eventros del boton uno
void CEstacionBase::BotonUnoClickEvent(int tiempoClick)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00a      	beq.n	80019f4 <_ZN13CEstacionBase18BotonUnoClickEventEi+0x28>
		return;
	ManejadorControles->OnBotonUnoClickEvent(tiempoClick);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	3314      	adds	r3, #20
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6839      	ldr	r1, [r7, #0]
 80019ee:	4610      	mov	r0, r2
 80019f0:	4798      	blx	r3
 80019f2:	e000      	b.n	80019f6 <_ZN13CEstacionBase18BotonUnoClickEventEi+0x2a>
		return;
 80019f4:	bf00      	nop

}
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <_ZN13CEstacionBase23BotonUnoPresionadoEventEv>:
void CEstacionBase::BotonUnoPresionadoEvent()
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d009      	beq.n	8001a20 <_ZN13CEstacionBase23BotonUnoPresionadoEventEv+0x24>
		return;
	ManejadorControles->OnBotonUnoPresionadoEvent();
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	3318      	adds	r3, #24
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	4798      	blx	r3
 8001a1e:	e000      	b.n	8001a22 <_ZN13CEstacionBase23BotonUnoPresionadoEventEv+0x26>
		return;
 8001a20:	bf00      	nop

}
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <_ZN13CEstacionBase28BotonUnoPresionadoLargoEventEv>:
void CEstacionBase::BotonUnoPresionadoLargoEvent()
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d009      	beq.n	8001a4c <_ZN13CEstacionBase28BotonUnoPresionadoLargoEventEv+0x24>
		return;
	ManejadorControles->OnBotonUnoPresionadoLargoEvent();
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	331c      	adds	r3, #28
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4610      	mov	r0, r2
 8001a48:	4798      	blx	r3
 8001a4a:	e000      	b.n	8001a4e <_ZN13CEstacionBase28BotonUnoPresionadoLargoEventEv+0x26>
		return;
 8001a4c:	bf00      	nop

}
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <_ZN13CEstacionBase19BotonUnoSueltoEventEv>:
void CEstacionBase::BotonUnoSueltoEvent()
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d009      	beq.n	8001a78 <_ZN13CEstacionBase19BotonUnoSueltoEventEv+0x24>
		return;
	ManejadorControles->OnBotonUnoSueltoEvent();
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	3320      	adds	r3, #32
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4610      	mov	r0, r2
 8001a74:	4798      	blx	r3
 8001a76:	e000      	b.n	8001a7a <_ZN13CEstacionBase19BotonUnoSueltoEventEv+0x26>
		return;
 8001a78:	bf00      	nop

}
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <_ZN13CEstacionBase18BotonDosClickEventEi>:
//eventros del boton dos
void CEstacionBase::BotonDosClickEvent(int tiempoClick)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00a      	beq.n	8001aa8 <_ZN13CEstacionBase18BotonDosClickEventEi+0x28>
		return;
	ManejadorControles->OnBotonDosClickEvent(tiempoClick);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	3324      	adds	r3, #36	@ 0x24
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6839      	ldr	r1, [r7, #0]
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	4798      	blx	r3
 8001aa6:	e000      	b.n	8001aaa <_ZN13CEstacionBase18BotonDosClickEventEi+0x2a>
		return;
 8001aa8:	bf00      	nop

}
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <_ZN13CEstacionBase23BotonDosPresionadoEventEv>:
void CEstacionBase::BotonDosPresionadoEvent()
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d009      	beq.n	8001ad4 <_ZN13CEstacionBase23BotonDosPresionadoEventEv+0x24>
		return;
	ManejadorControles->OnBotonDosPresionadoEvent();
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	3328      	adds	r3, #40	@ 0x28
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4610      	mov	r0, r2
 8001ad0:	4798      	blx	r3
 8001ad2:	e000      	b.n	8001ad6 <_ZN13CEstacionBase23BotonDosPresionadoEventEv+0x26>
		return;
 8001ad4:	bf00      	nop

}
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <_ZN13CEstacionBase28BotonDosPresionaLargodoEventEv>:
void CEstacionBase::BotonDosPresionaLargodoEvent()
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d009      	beq.n	8001b00 <_ZN13CEstacionBase28BotonDosPresionaLargodoEventEv+0x24>
		return;
	ManejadorControles->OnBotonDosPresionadoLargoEvent();
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	332c      	adds	r3, #44	@ 0x2c
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4610      	mov	r0, r2
 8001afc:	4798      	blx	r3
 8001afe:	e000      	b.n	8001b02 <_ZN13CEstacionBase28BotonDosPresionaLargodoEventEv+0x26>
		return;
 8001b00:	bf00      	nop

}
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <_ZN13CEstacionBase19BotonDosSueltoEventEv>:
void CEstacionBase::BotonDosSueltoEvent()
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d009      	beq.n	8001b2c <_ZN13CEstacionBase19BotonDosSueltoEventEv+0x24>
		return;
	ManejadorControles->OnBotonDosSueltoEvent();
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	3330      	adds	r3, #48	@ 0x30
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4610      	mov	r0, r2
 8001b28:	4798      	blx	r3
 8001b2a:	e000      	b.n	8001b2e <_ZN13CEstacionBase19BotonDosSueltoEventEv+0x26>
		return;
 8001b2c:	bf00      	nop

}
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <_ZN13CEstacionBase19BotonTresClickEventEi>:
//eventros del boton tres
void CEstacionBase::BotonTresClickEvent(int tiempoClick)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00a      	beq.n	8001b5c <_ZN13CEstacionBase19BotonTresClickEventEi+0x28>
		return;
	ManejadorControles->OnBotonTresClickEvent(tiempoClick);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	3334      	adds	r3, #52	@ 0x34
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6839      	ldr	r1, [r7, #0]
 8001b56:	4610      	mov	r0, r2
 8001b58:	4798      	blx	r3
 8001b5a:	e000      	b.n	8001b5e <_ZN13CEstacionBase19BotonTresClickEventEi+0x2a>
		return;
 8001b5c:	bf00      	nop

}
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <_ZN13CEstacionBase24BotonTresPresionadoEventEv>:
void CEstacionBase::BotonTresPresionadoEvent()
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d009      	beq.n	8001b88 <_ZN13CEstacionBase24BotonTresPresionadoEventEv+0x24>
		return;
	ManejadorControles->OnBotonTresPresionadoEvent();
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	3338      	adds	r3, #56	@ 0x38
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4610      	mov	r0, r2
 8001b84:	4798      	blx	r3
 8001b86:	e000      	b.n	8001b8a <_ZN13CEstacionBase24BotonTresPresionadoEventEv+0x26>
		return;
 8001b88:	bf00      	nop

}
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <_ZN13CEstacionBase29BotonTresPresionaLargodoEventEv>:
void CEstacionBase::BotonTresPresionaLargodoEvent()
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d009      	beq.n	8001bb4 <_ZN13CEstacionBase29BotonTresPresionaLargodoEventEv+0x24>
		return;
	ManejadorControles->OnBotonTresPresionadoLargoEvent();
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	333c      	adds	r3, #60	@ 0x3c
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4610      	mov	r0, r2
 8001bb0:	4798      	blx	r3
 8001bb2:	e000      	b.n	8001bb6 <_ZN13CEstacionBase29BotonTresPresionaLargodoEventEv+0x26>
		return;
 8001bb4:	bf00      	nop

}
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <_ZN13CEstacionBase20BotonTresSueltoEventEv>:
void CEstacionBase::BotonTresSueltoEvent()
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d009      	beq.n	8001be0 <_ZN13CEstacionBase20BotonTresSueltoEventEv+0x24>
		return;
	ManejadorControles->OnBotonTresSueltoEvent();
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	3340      	adds	r3, #64	@ 0x40
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4610      	mov	r0, r2
 8001bdc:	4798      	blx	r3
 8001bde:	e000      	b.n	8001be2 <_ZN13CEstacionBase20BotonTresSueltoEventEv+0x26>
		return;
 8001be0:	bf00      	nop

}
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <_ZN13CEstacionBase21BotonCuatroClickEventEi>:
//eventros del boton Cuatro
void CEstacionBase::BotonCuatroClickEvent(int tiempoClick)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00a      	beq.n	8001c10 <_ZN13CEstacionBase21BotonCuatroClickEventEi+0x28>
		return;
	ManejadorControles->OnBotonCuatroClickEvent(tiempoClick);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	3344      	adds	r3, #68	@ 0x44
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6839      	ldr	r1, [r7, #0]
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	4798      	blx	r3
 8001c0e:	e000      	b.n	8001c12 <_ZN13CEstacionBase21BotonCuatroClickEventEi+0x2a>
		return;
 8001c10:	bf00      	nop

}
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <_ZN13CEstacionBase26BotonCuatroPresionadoEventEv>:
void CEstacionBase::BotonCuatroPresionadoEvent()
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d009      	beq.n	8001c3c <_ZN13CEstacionBase26BotonCuatroPresionadoEventEv+0x24>
		return;
	ManejadorControles->OnBotonCuatroPresionadoEvent();
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	3348      	adds	r3, #72	@ 0x48
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4610      	mov	r0, r2
 8001c38:	4798      	blx	r3
 8001c3a:	e000      	b.n	8001c3e <_ZN13CEstacionBase26BotonCuatroPresionadoEventEv+0x26>
		return;
 8001c3c:	bf00      	nop

}
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <_ZN13CEstacionBase31BotonCuatroPresionaLargodoEventEv>:
void CEstacionBase::BotonCuatroPresionaLargodoEvent()
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d009      	beq.n	8001c68 <_ZN13CEstacionBase31BotonCuatroPresionaLargodoEventEv+0x24>
		return;
	ManejadorControles->OnBotonCuatroPresionadoLargoEvent();
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	334c      	adds	r3, #76	@ 0x4c
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4610      	mov	r0, r2
 8001c64:	4798      	blx	r3
 8001c66:	e000      	b.n	8001c6a <_ZN13CEstacionBase31BotonCuatroPresionaLargodoEventEv+0x26>
		return;
 8001c68:	bf00      	nop
}
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <_ZN13CEstacionBase22BotonCuatroSueltoEventEv>:
void CEstacionBase::BotonCuatroSueltoEvent()
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d009      	beq.n	8001c94 <_ZN13CEstacionBase22BotonCuatroSueltoEventEv+0x24>
		return;
	ManejadorControles->OnBotonCuatroSueltoEvent();
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	3350      	adds	r3, #80	@ 0x50
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4610      	mov	r0, r2
 8001c90:	4798      	blx	r3
 8001c92:	e000      	b.n	8001c96 <_ZN13CEstacionBase22BotonCuatroSueltoEventEv+0x26>
		return;
 8001c94:	bf00      	nop

}
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <_ZN13CEstacionBase22BotonPerillaClickEventEi>:
//eventros del boton Perilla
void CEstacionBase::BotonPerillaClickEvent(int tiempoClick)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00a      	beq.n	8001cc4 <_ZN13CEstacionBase22BotonPerillaClickEventEi+0x28>
		return;
	ManejadorControles->OnBotonPerillaClickEvent(tiempoClick);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	3354      	adds	r3, #84	@ 0x54
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6839      	ldr	r1, [r7, #0]
 8001cbe:	4610      	mov	r0, r2
 8001cc0:	4798      	blx	r3
 8001cc2:	e000      	b.n	8001cc6 <_ZN13CEstacionBase22BotonPerillaClickEventEi+0x2a>
		return;
 8001cc4:	bf00      	nop

}
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <_ZN13CEstacionBase27BotonPerillaPresionadoEventEv>:
void CEstacionBase::BotonPerillaPresionadoEvent()
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d009      	beq.n	8001cf0 <_ZN13CEstacionBase27BotonPerillaPresionadoEventEv+0x24>
		return;
	ManejadorControles->OnBotonPerillaPresionadoEvent();
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	3358      	adds	r3, #88	@ 0x58
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4610      	mov	r0, r2
 8001cec:	4798      	blx	r3
 8001cee:	e000      	b.n	8001cf2 <_ZN13CEstacionBase27BotonPerillaPresionadoEventEv+0x26>
		return;
 8001cf0:	bf00      	nop

}
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <_ZN13CEstacionBase32BotonPerillaPresionadoLargoEventEv>:
void CEstacionBase::BotonPerillaPresionadoLargoEvent()
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d009      	beq.n	8001d1c <_ZN13CEstacionBase32BotonPerillaPresionadoLargoEventEv+0x24>
		return;
	ManejadorControles->OnBotonPerillaPresionadoLargoEvent();
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	335c      	adds	r3, #92	@ 0x5c
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4610      	mov	r0, r2
 8001d18:	4798      	blx	r3
 8001d1a:	e000      	b.n	8001d1e <_ZN13CEstacionBase32BotonPerillaPresionadoLargoEventEv+0x26>
		return;
 8001d1c:	bf00      	nop

}
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <_ZN13CEstacionBase23BotonPerillaSueltoEventEv>:
void CEstacionBase::BotonPerillaSueltoEvent()
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d009      	beq.n	8001d48 <_ZN13CEstacionBase23BotonPerillaSueltoEventEv+0x24>
		return;
	ManejadorControles->OnBotonPerillaSueltoEvent();
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	3360      	adds	r3, #96	@ 0x60
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4610      	mov	r0, r2
 8001d44:	4798      	blx	r3
 8001d46:	e000      	b.n	8001d4a <_ZN13CEstacionBase23BotonPerillaSueltoEventEv+0x26>
		return;
 8001d48:	bf00      	nop
}
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <_ZN13CEstacionBase17EncoderIncrementoEv>:
//eventos del encoder
void CEstacionBase::EncoderIncremento()
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d009      	beq.n	8001d74 <_ZN13CEstacionBase17EncoderIncrementoEv+0x24>
		return;
	ManejadorControles->OnPerillaIncremento();
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	3364      	adds	r3, #100	@ 0x64
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4610      	mov	r0, r2
 8001d70:	4798      	blx	r3
 8001d72:	e000      	b.n	8001d76 <_ZN13CEstacionBase17EncoderIncrementoEv+0x26>
		return;
 8001d74:	bf00      	nop

}
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <_ZN13CEstacionBase17EncoderDecrementoEv>:
void CEstacionBase::EncoderDecremento()
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d009      	beq.n	8001da0 <_ZN13CEstacionBase17EncoderDecrementoEv+0x24>
		return;
	ManejadorControles->OnPerillaDecremento();
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	3368      	adds	r3, #104	@ 0x68
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	4798      	blx	r3
 8001d9e:	e000      	b.n	8001da2 <_ZN13CEstacionBase17EncoderDecrementoEv+0x26>
		return;
 8001da0:	bf00      	nop

}
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <_ZN13CEstacionBase19InterrupcionEncoderEv>:
void CEstacionBase::InterrupcionEncoder()
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]

}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr
	...

08001dbc <_ZN16CestacionVirtualD1Ev>:
 *      Author: W10
 */

#include <Estaciones/CestacionVirtual.hpp>

CestacionVirtual::~CestacionVirtual()
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	4a20      	ldr	r2, [pc, #128]	@ (8001e48 <_ZN16CestacionVirtualD1Ev+0x8c>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	4a20      	ldr	r2, [pc, #128]	@ (8001e4c <_ZN16CestacionVirtualD1Ev+0x90>)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	4a1f      	ldr	r2, [pc, #124]	@ (8001e50 <_ZN16CestacionVirtualD1Ev+0x94>)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	60da      	str	r2, [r3, #12]
{
	// TODO Auto-generated destructor stub
}
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f002 fca1 	bl	8004724 <_ZN3PwmD1Ev>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff fa3b 	bl	8001264 <_ZN20ControlVelocidadAireD1Ev>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	33cc      	adds	r3, #204	@ 0xcc
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff fb16 	bl	8001424 <_ZN8CEncoderD1Ev>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	33ac      	adds	r3, #172	@ 0xac
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff f8bf 	bl	8000f80 <_ZN15CManejadorBotonD1Ev>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	338c      	adds	r3, #140	@ 0x8c
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff f8ba 	bl	8000f80 <_ZN15CManejadorBotonD1Ev>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	336c      	adds	r3, #108	@ 0x6c
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff f8b5 	bl	8000f80 <_ZN15CManejadorBotonD1Ev>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	334c      	adds	r3, #76	@ 0x4c
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff f8b0 	bl	8000f80 <_ZN15CManejadorBotonD1Ev>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	330c      	adds	r3, #12
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fc95 	bl	8001754 <_ZN24CManejadorEventosEncoderD1Ev>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3308      	adds	r3, #8
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff f9be 	bl	80011b0 <_ZN22CManejadorEventosBotonD1Ev>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff fcfc 	bl	8001834 <_ZN13CEstacionBaseD1Ev>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	0800b2ac 	.word	0x0800b2ac
 8001e4c:	0800b370 	.word	0x0800b370
 8001e50:	0800b390 	.word	0x0800b390

08001e54 <_ZThn8_N16CestacionVirtualD1Ev>:
	CEncoder Encoder;
	ControlVelocidadAire controlVelocidadAire;
	Pwm pwm;
public:
	CestacionVirtual();
	virtual ~CestacionVirtual();
 8001e54:	f1a0 0008 	sub.w	r0, r0, #8
 8001e58:	f7ff bfb0 	b.w	8001dbc <_ZN16CestacionVirtualD1Ev>

08001e5c <_ZThn12_N16CestacionVirtualD1Ev>:
 8001e5c:	f1a0 000c 	sub.w	r0, r0, #12
 8001e60:	f7ff bfac 	b.w	8001dbc <_ZN16CestacionVirtualD1Ev>

08001e64 <_ZN16CestacionVirtualD0Ev>:
CestacionVirtual::~CestacionVirtual()
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
}
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7ff ffa5 	bl	8001dbc <_ZN16CestacionVirtualD1Ev>
 8001e72:	f44f 71cc 	mov.w	r1, #408	@ 0x198
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f006 faac 	bl	80083d4 <_ZdlPvj>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <_ZThn12_N16CestacionVirtualD0Ev>:
 8001e86:	f1a0 000c 	sub.w	r0, r0, #12
 8001e8a:	f7ff bfeb 	b.w	8001e64 <_ZN16CestacionVirtualD0Ev>

08001e8e <_ZThn8_N16CestacionVirtualD0Ev>:
 8001e8e:	f1a0 0008 	sub.w	r0, r0, #8
 8001e92:	f7ff bfe7 	b.w	8001e64 <_ZN16CestacionVirtualD0Ev>
	...

08001e98 <_ZN16CestacionVirtualC1Ev>:

CestacionVirtual::CestacionVirtual() :
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af04      	add	r7, sp, #16
 8001e9e:	6078      	str	r0, [r7, #4]
		CEstacionBase()
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff fcb4 	bl	8001810 <_ZN13CEstacionBaseC1Ev>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3308      	adds	r3, #8
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff f96f 	bl	8001190 <_ZN22CManejadorEventosBotonC1Ev>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	330c      	adds	r3, #12
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fc3c 	bl	8001734 <_ZN24CManejadorEventosEncoderC1Ev>
 8001ebc:	4a7a      	ldr	r2, [pc, #488]	@ (80020a8 <_ZN16CestacionVirtualC1Ev+0x210>)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	4a7a      	ldr	r2, [pc, #488]	@ (80020ac <_ZN16CestacionVirtualC1Ev+0x214>)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	4a79      	ldr	r2, [pc, #484]	@ (80020b0 <_ZN16CestacionVirtualC1Ev+0x218>)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001ed4:	611a      	str	r2, [r3, #16]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2264      	movs	r2, #100	@ 0x64
 8001eda:	615a      	str	r2, [r3, #20]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	619a      	str	r2, [r3, #24]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	61da      	str	r2, [r3, #28]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	621a      	str	r2, [r3, #32]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2208      	movs	r2, #8
 8001ef2:	625a      	str	r2, [r3, #36]	@ 0x24
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	220b      	movs	r2, #11
 8001ef8:	629a      	str	r2, [r3, #40]	@ 0x28
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	220c      	movs	r2, #12
 8001efe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3330      	adds	r3, #48	@ 0x30
 8001f04:	4618      	mov	r0, r3
 8001f06:	f002 fad8 	bl	80044ba <_ZN7MAX6675C1Ev>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	334c      	adds	r3, #76	@ 0x4c
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff f818 	bl	8000f44 <_ZN15CManejadorBotonC1Ev>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	336c      	adds	r3, #108	@ 0x6c
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff f813 	bl	8000f44 <_ZN15CManejadorBotonC1Ev>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	338c      	adds	r3, #140	@ 0x8c
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff f80e 	bl	8000f44 <_ZN15CManejadorBotonC1Ev>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	33ac      	adds	r3, #172	@ 0xac
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff f809 	bl	8000f44 <_ZN15CManejadorBotonC1Ev>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	33cc      	adds	r3, #204	@ 0xcc
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff fa50 	bl	80013dc <_ZN8CEncoderC1Ev>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff f97e 	bl	8001244 <_ZN20ControlVelocidadAireC1Ev>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f002 fbd8 	bl	8004704 <_ZN3PwmC1Ev>
{
	pwm.Init(TIM2,TIM_CHANNEL_1,65535);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f503 70a6 	add.w	r0, r3, #332	@ 0x14c
 8001f5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001f64:	f002 fbfe 	bl	8004764 <_ZN3Pwm4InitEP11TIM_TypeDefii>

	//inicializa la termocupla
	thermocouple.SetConfigCkPin(GPIOA, GPIO_PIN_1);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3330      	adds	r3, #48	@ 0x30
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	4951      	ldr	r1, [pc, #324]	@ (80020b4 <_ZN16CestacionVirtualC1Ev+0x21c>)
 8001f70:	4618      	mov	r0, r3
 8001f72:	f002 fabe 	bl	80044f2 <_ZN7MAX667514SetConfigCkPinEP12GPIO_TypeDeft>
	thermocouple.SetConfigCsPin(GPIOA, GPIO_PIN_2);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3330      	adds	r3, #48	@ 0x30
 8001f7a:	2204      	movs	r2, #4
 8001f7c:	494d      	ldr	r1, [pc, #308]	@ (80020b4 <_ZN16CestacionVirtualC1Ev+0x21c>)
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f002 fac9 	bl	8004516 <_ZN7MAX667514SetConfigCsPinEP12GPIO_TypeDeft>
	thermocouple.SetConfigDatPin(GPIOA, GPIO_PIN_0);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3330      	adds	r3, #48	@ 0x30
 8001f88:	2201      	movs	r2, #1
 8001f8a:	494a      	ldr	r1, [pc, #296]	@ (80020b4 <_ZN16CestacionVirtualC1Ev+0x21c>)
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f002 fa9e 	bl	80044ce <_ZN7MAX667515SetConfigDatPinEP12GPIO_TypeDeft>
	thermocouple.Init();
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3330      	adds	r3, #48	@ 0x30
 8001f96:	4618      	mov	r0, r3
 8001f98:	f002 fb5c 	bl	8004654 <_ZN7MAX66754InitEv>

	//configuracion de los botones
	BotonMemoria1.Configurar(GPIOA, GPIO_PIN_4, 1);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	2210      	movs	r2, #16
 8001fa6:	4943      	ldr	r1, [pc, #268]	@ (80020b4 <_ZN16CestacionVirtualC1Ev+0x21c>)
 8001fa8:	f7ff f80a 	bl	8000fc0 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonMemoria1.AsignaManejadorEventos(this);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3308      	adds	r3, #8
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4610      	mov	r0, r2
 8001fba:	f7ff f849 	bl	8001050 <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonMemoria1.Init();
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	334c      	adds	r3, #76	@ 0x4c
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff f815 	bl	8000ff2 <_ZN15CManejadorBoton4InitEv>

	BotonMemoria2.Configurar(GPIOA, GPIO_PIN_6, 2);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8001fce:	2302      	movs	r3, #2
 8001fd0:	2240      	movs	r2, #64	@ 0x40
 8001fd2:	4938      	ldr	r1, [pc, #224]	@ (80020b4 <_ZN16CestacionVirtualC1Ev+0x21c>)
 8001fd4:	f7fe fff4 	bl	8000fc0 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonMemoria2.AsignaManejadorEventos(this);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	3308      	adds	r3, #8
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	f7ff f833 	bl	8001050 <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonMemoria2.Init();
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	336c      	adds	r3, #108	@ 0x6c
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe ffff 	bl	8000ff2 <_ZN15CManejadorBoton4InitEv>

	BotonMemoria3.Configurar(GPIOB, GPIO_PIN_10, 3);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f103 008c 	add.w	r0, r3, #140	@ 0x8c
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002000:	492d      	ldr	r1, [pc, #180]	@ (80020b8 <_ZN16CestacionVirtualC1Ev+0x220>)
 8002002:	f7fe ffdd 	bl	8000fc0 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonMemoria3.AsignaManejadorEventos(this);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f103 028c 	add.w	r2, r3, #140	@ 0x8c
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3308      	adds	r3, #8
 8002010:	4619      	mov	r1, r3
 8002012:	4610      	mov	r0, r2
 8002014:	f7ff f81c 	bl	8001050 <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonMemoria3.Init();
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	338c      	adds	r3, #140	@ 0x8c
 800201c:	4618      	mov	r0, r3
 800201e:	f7fe ffe8 	bl	8000ff2 <_ZN15CManejadorBoton4InitEv>

	BotonManual.Configurar(GPIOB, GPIO_PIN_15, 4);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f103 00ac 	add.w	r0, r3, #172	@ 0xac
 8002028:	2304      	movs	r3, #4
 800202a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800202e:	4922      	ldr	r1, [pc, #136]	@ (80020b8 <_ZN16CestacionVirtualC1Ev+0x220>)
 8002030:	f7fe ffc6 	bl	8000fc0 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonManual.AsignaManejadorEventos(this);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f103 02ac 	add.w	r2, r3, #172	@ 0xac
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	3308      	adds	r3, #8
 800203e:	4619      	mov	r1, r3
 8002040:	4610      	mov	r0, r2
 8002042:	f7ff f805 	bl	8001050 <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonManual.Init();
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	33ac      	adds	r3, #172	@ 0xac
 800204a:	4618      	mov	r0, r3
 800204c:	f7fe ffd1 	bl	8000ff2 <_ZN15CManejadorBoton4InitEv>

	Encoder.Configurar(GPIOB, GPIO_PIN_11, GPIOB, GPIO_PIN_12, GPIOB, GPIO_PIN_13, 1);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f103 00cc 	add.w	r0, r3, #204	@ 0xcc
 8002056:	2301      	movs	r3, #1
 8002058:	9303      	str	r3, [sp, #12]
 800205a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800205e:	9302      	str	r3, [sp, #8]
 8002060:	4b15      	ldr	r3, [pc, #84]	@ (80020b8 <_ZN16CestacionVirtualC1Ev+0x220>)
 8002062:	9301      	str	r3, [sp, #4]
 8002064:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	4b13      	ldr	r3, [pc, #76]	@ (80020b8 <_ZN16CestacionVirtualC1Ev+0x220>)
 800206c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002070:	4911      	ldr	r1, [pc, #68]	@ (80020b8 <_ZN16CestacionVirtualC1Ev+0x220>)
 8002072:	f7ff f9f9 	bl	8001468 <_ZN8CEncoder10ConfigurarEP12GPIO_TypeDeftS1_tS1_ti>
	Encoder.AsignaManejadorEventos(this);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	330c      	adds	r3, #12
 8002080:	4619      	mov	r1, r3
 8002082:	4610      	mov	r0, r2
 8002084:	f7ff fa92 	bl	80015ac <_ZN8CEncoder22AsignaManejadorEventosEP24CManejadorEventosEncoder>
	Encoder.Init();
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	33cc      	adds	r3, #204	@ 0xcc
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff fa4f 	bl	8001530 <_ZN8CEncoder4InitEv>

	controlVelocidadAire.Inicializa();
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff f903 	bl	80012a4 <_ZN20ControlVelocidadAire10InicializaEv>


}
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4618      	mov	r0, r3
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	0800b2ac 	.word	0x0800b2ac
 80020ac:	0800b370 	.word	0x0800b370
 80020b0:	0800b390 	.word	0x0800b390
 80020b4:	40010800 	.word	0x40010800
 80020b8:	40010c00 	.word	0x40010c00

080020bc <_ZN16CestacionVirtual18GetTemperaturaRealEv>:

//regresa la tenperatura actual de la estacion
float CestacionVirtual::GetTemperaturaReal()
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
	float temperatura = thermocouple.MAX6675_lee() ;//* .59;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3330      	adds	r3, #48	@ 0x30
 80020c8:	4618      	mov	r0, r3
 80020ca:	f002 fa5f 	bl	800458c <_ZN7MAX667511MAX6675_leeEv>
 80020ce:	60f8      	str	r0, [r7, #12]
	return temperatura;
 80020d0:	68fb      	ldr	r3, [r7, #12]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <_ZN16CestacionVirtual14SetTemperaturaEi>:

//establece la temperatura que se quiere alcanzar
void CestacionVirtual::SetTemperatura(int temperatura)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	6039      	str	r1, [r7, #0]
	TemperaturaEspecificada = temperatura;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	615a      	str	r2, [r3, #20]
	TemperaturaEvent(TemperaturaEspecificada);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	3334      	adds	r3, #52	@ 0x34
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6952      	ldr	r2, [r2, #20]
 80020f8:	4611      	mov	r1, r2
 80020fa:	4798      	blx	r3
}
 80020fc:	bf00      	nop
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <_ZN16CestacionVirtual14GetTemperaturaEv>:

// regresa la temperatura seteada
int CestacionVirtual::GetTemperatura()
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
	return TemperaturaEspecificada;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	695b      	ldr	r3, [r3, #20]
}
 8002110:	4618      	mov	r0, r3
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr

0800211a <_ZN16CestacionVirtual12SetNivelAireEi>:

//establece el nivel de aire
void CestacionVirtual::SetNivelAire(int nivel)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	6039      	str	r1, [r7, #0]
	pwm.SicloTrabajo(nivel);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800212a:	6839      	ldr	r1, [r7, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f002 fbc7 	bl	80048c0 <_ZN3Pwm12SicloTrabajoEi>
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <_ZN16CestacionVirtual12GetNivelAireEv>:

//regresa el nivel de aire setado
int CestacionVirtual::GetNivelAire()
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
	return controlVelocidadAire.LeeVelocidad();
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff f8ff 	bl	800134c <_ZN20ControlVelocidadAire12LeeVelocidadEv>
 800214e:	4603      	mov	r3, r0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <_ZN16CestacionVirtual9GetEstadoEv>:

//regresa 1 si esta activo y 0 si esta en reposo
int CestacionVirtual::GetEstado()
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
	return 0;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr

0800216c <_ZN16CestacionVirtual7ProcesaEv>:

void CestacionVirtual::Procesa()
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
	ProcesaTemperatura();
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 f80d 	bl	8002194 <_ZN16CestacionVirtual18ProcesaTemperaturaEv>
	ProcesaTemperaturaReal();
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f84a 	bl	8002214 <_ZN16CestacionVirtual22ProcesaTemperaturaRealEv>
	procesaAire();
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f827 	bl	80021d4 <_ZN16CestacionVirtual11procesaAireEv>
	ProcesaBotones();
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f869 	bl	800225e <_ZN16CestacionVirtual14ProcesaBotonesEv>
}
 800218c:	bf00      	nop
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <_ZN16CestacionVirtual18ProcesaTemperaturaEv>:

//verifica el nivel de temperatura seleccinada por el usuario
void CestacionVirtual::ProcesaTemperatura()
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
	//leo la temperatura
	int temp = GetTemperatura();
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	3310      	adds	r3, #16
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	4798      	blx	r3
 80021a8:	60f8      	str	r0, [r7, #12]
	//veo si cambio
	if (temperaturaAnterior != temp)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d00b      	beq.n	80021cc <_ZN16CestacionVirtual18ProcesaTemperaturaEv+0x38>
	{
		temperaturaAnterior = temp;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	619a      	str	r2, [r3, #24]
		//aviso que cambio la temperatura
		TemperaturaEvent(temperaturaAnterior);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	3334      	adds	r3, #52	@ 0x34
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	6992      	ldr	r2, [r2, #24]
 80021c8:	4611      	mov	r1, r2
 80021ca:	4798      	blx	r3
	}
}
 80021cc:	bf00      	nop
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <_ZN16CestacionVirtual11procesaAireEv>:

//verifica elnivel de aire
void CestacionVirtual::procesaAire()
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
	int aire = GetNivelAire();
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	3318      	adds	r3, #24
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	4798      	blx	r3
 80021e8:	60f8      	str	r0, [r7, #12]
	if (AireAnterior != aire)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d00b      	beq.n	800220c <_ZN16CestacionVirtual11procesaAireEv+0x38>
	{
		AireAnterior = aire;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	621a      	str	r2, [r3, #32]
		NivelAireEvent(AireAnterior);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	3338      	adds	r3, #56	@ 0x38
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6a12      	ldr	r2, [r2, #32]
 8002208:	4611      	mov	r1, r2
 800220a:	4798      	blx	r3
	}
}
 800220c:	bf00      	nop
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <_ZN16CestacionVirtual22ProcesaTemperaturaRealEv>:

void CestacionVirtual::ProcesaTemperaturaReal()
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
	int temperatura = GetTemperaturaReal();
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	3308      	adds	r3, #8
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	4798      	blx	r3
 8002228:	4603      	mov	r3, r0
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe fe64 	bl	8000ef8 <__aeabi_f2iz>
 8002230:	4603      	mov	r3, r0
 8002232:	60fb      	str	r3, [r7, #12]
	if (temperaturaRealAnterior != temperatura)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	429a      	cmp	r2, r3
 800223c:	d00b      	beq.n	8002256 <_ZN16CestacionVirtual22ProcesaTemperaturaRealEv+0x42>
	{
		temperaturaRealAnterior = temperatura;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	61da      	str	r2, [r3, #28]
		TemperaturaRealEvent(temperaturaRealAnterior);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	333c      	adds	r3, #60	@ 0x3c
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	69d2      	ldr	r2, [r2, #28]
 8002252:	4611      	mov	r1, r2
 8002254:	4798      	blx	r3
	}
}
 8002256:	bf00      	nop
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <_ZN16CestacionVirtual14ProcesaBotonesEv>:

void CestacionVirtual::ProcesaBotones()
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b082      	sub	sp, #8
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
	BotonMemoria1.Procesa();
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	334c      	adds	r3, #76	@ 0x4c
 800226a:	4618      	mov	r0, r3
 800226c:	f7fe fefd 	bl	800106a <_ZN15CManejadorBoton7ProcesaEv>
	BotonMemoria2.Procesa();
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	336c      	adds	r3, #108	@ 0x6c
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe fef8 	bl	800106a <_ZN15CManejadorBoton7ProcesaEv>
	BotonMemoria3.Procesa();
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	338c      	adds	r3, #140	@ 0x8c
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe fef3 	bl	800106a <_ZN15CManejadorBoton7ProcesaEv>
	BotonManual.Procesa();
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	33ac      	adds	r3, #172	@ 0xac
 8002288:	4618      	mov	r0, r3
 800228a:	f7fe feee 	bl	800106a <_ZN15CManejadorBoton7ProcesaEv>
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <_ZN16CestacionVirtual17OnBotonClickEventEii>:

//eventos de CManejadorEventosBoton
void CestacionVirtual::OnBotonClickEvent(int idBoton, int tiempoClick)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
	switch (idBoton)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	2b03      	cmp	r3, #3
 80022aa:	d82f      	bhi.n	800230c <_ZN16CestacionVirtual17OnBotonClickEventEii+0x74>
 80022ac:	a201      	add	r2, pc, #4	@ (adr r2, 80022b4 <_ZN16CestacionVirtual17OnBotonClickEventEii+0x1c>)
 80022ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b2:	bf00      	nop
 80022b4:	080022c5 	.word	0x080022c5
 80022b8:	080022d7 	.word	0x080022d7
 80022bc:	080022e9 	.word	0x080022e9
 80022c0:	080022fb 	.word	0x080022fb
	{
	case BOTON_MEMORIA1:
		BotonUnoClickEvent(tiempoClick);
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	3340      	adds	r3, #64	@ 0x40
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	4610      	mov	r0, r2
 80022d2:	4798      	blx	r3
		break;
 80022d4:	e01a      	b.n	800230c <_ZN16CestacionVirtual17OnBotonClickEventEii+0x74>
	case BOTON_MEMORIA2:
		BotonDosClickEvent(tiempoClick);
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	3350      	adds	r3, #80	@ 0x50
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	4610      	mov	r0, r2
 80022e4:	4798      	blx	r3
		break;
 80022e6:	e011      	b.n	800230c <_ZN16CestacionVirtual17OnBotonClickEventEii+0x74>
	case BOTON_MEMORIA3:
		BotonTresClickEvent(tiempoClick);
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	3360      	adds	r3, #96	@ 0x60
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	4610      	mov	r0, r2
 80022f6:	4798      	blx	r3
		break;
 80022f8:	e008      	b.n	800230c <_ZN16CestacionVirtual17OnBotonClickEventEii+0x74>
	case BOTON_MANUAL:
		BotonCuatroClickEvent(tiempoClick);
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	3370      	adds	r3, #112	@ 0x70
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	4610      	mov	r0, r2
 8002308:	4798      	blx	r3
		break;
 800230a:	bf00      	nop
	}
}
 800230c:	bf00      	nop
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <_ZThn8_N16CestacionVirtual17OnBotonClickEventEii>:
	//verifica elnivel de aire
	void procesaAire();
	void ProcesaTemperaturaReal();
	void ProcesaBotones();
	//eventos de CManejadorEventosBoton
	virtual void OnBotonClickEvent(int idBoton, int tiempoClick);
 8002314:	f1a0 0008 	sub.w	r0, r0, #8
 8002318:	f7ff bfbe 	b.w	8002298 <_ZN16CestacionVirtual17OnBotonClickEventEii>

0800231c <_ZN16CestacionVirtual22OnBotonPresionadoEventEi>:

void CestacionVirtual::OnBotonPresionadoEvent(int idBoton)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
	switch (idBoton)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	3b01      	subs	r3, #1
 800232a:	2b03      	cmp	r3, #3
 800232c:	d82a      	bhi.n	8002384 <_ZN16CestacionVirtual22OnBotonPresionadoEventEi+0x68>
 800232e:	a201      	add	r2, pc, #4	@ (adr r2, 8002334 <_ZN16CestacionVirtual22OnBotonPresionadoEventEi+0x18>)
 8002330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002334:	08002345 	.word	0x08002345
 8002338:	08002355 	.word	0x08002355
 800233c:	08002365 	.word	0x08002365
 8002340:	08002375 	.word	0x08002375
	{
	case BOTON_MEMORIA1:
		BotonUnoPresionadoEvent();
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	3344      	adds	r3, #68	@ 0x44
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4610      	mov	r0, r2
 8002350:	4798      	blx	r3
		break;
 8002352:	e017      	b.n	8002384 <_ZN16CestacionVirtual22OnBotonPresionadoEventEi+0x68>
	case BOTON_MEMORIA2:
		BotonDosPresionadoEvent();
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	3354      	adds	r3, #84	@ 0x54
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4610      	mov	r0, r2
 8002360:	4798      	blx	r3
		break;
 8002362:	e00f      	b.n	8002384 <_ZN16CestacionVirtual22OnBotonPresionadoEventEi+0x68>
	case BOTON_MEMORIA3:
		BotonTresPresionadoEvent();
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	3364      	adds	r3, #100	@ 0x64
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4610      	mov	r0, r2
 8002370:	4798      	blx	r3
		break;
 8002372:	e007      	b.n	8002384 <_ZN16CestacionVirtual22OnBotonPresionadoEventEi+0x68>
	case BOTON_MANUAL:
		BotonCuatroPresionadoEvent();
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	3374      	adds	r3, #116	@ 0x74
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4610      	mov	r0, r2
 8002380:	4798      	blx	r3
		break;
 8002382:	bf00      	nop
	}

}
 8002384:	bf00      	nop
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <_ZThn8_N16CestacionVirtual22OnBotonPresionadoEventEi>:
	virtual void OnBotonPresionadoEvent(int idBoton);
 800238c:	f1a0 0008 	sub.w	r0, r0, #8
 8002390:	f7ff bfc4 	b.w	800231c <_ZN16CestacionVirtual22OnBotonPresionadoEventEi>

08002394 <_ZN16CestacionVirtual18OnBotonSueltoEventEi>:

void CestacionVirtual::OnBotonSueltoEvent(int idBoton)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
	switch (idBoton)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	3b01      	subs	r3, #1
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d82a      	bhi.n	80023fc <_ZN16CestacionVirtual18OnBotonSueltoEventEi+0x68>
 80023a6:	a201      	add	r2, pc, #4	@ (adr r2, 80023ac <_ZN16CestacionVirtual18OnBotonSueltoEventEi+0x18>)
 80023a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ac:	080023bd 	.word	0x080023bd
 80023b0:	080023cd 	.word	0x080023cd
 80023b4:	080023dd 	.word	0x080023dd
 80023b8:	080023ed 	.word	0x080023ed
	{
	case BOTON_MEMORIA1:
		BotonUnoSueltoEvent();
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	334c      	adds	r3, #76	@ 0x4c
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4610      	mov	r0, r2
 80023c8:	4798      	blx	r3
		break;
 80023ca:	e017      	b.n	80023fc <_ZN16CestacionVirtual18OnBotonSueltoEventEi+0x68>
	case BOTON_MEMORIA2:
		BotonDosSueltoEvent();
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	335c      	adds	r3, #92	@ 0x5c
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4610      	mov	r0, r2
 80023d8:	4798      	blx	r3
		break;
 80023da:	e00f      	b.n	80023fc <_ZN16CestacionVirtual18OnBotonSueltoEventEi+0x68>
	case BOTON_MEMORIA3:
		BotonTresSueltoEvent();
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	336c      	adds	r3, #108	@ 0x6c
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4610      	mov	r0, r2
 80023e8:	4798      	blx	r3
		break;
 80023ea:	e007      	b.n	80023fc <_ZN16CestacionVirtual18OnBotonSueltoEventEi+0x68>
	case BOTON_MANUAL:
		BotonCuatroSueltoEvent();
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	337c      	adds	r3, #124	@ 0x7c
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4610      	mov	r0, r2
 80023f8:	4798      	blx	r3
		break;
 80023fa:	bf00      	nop
	}
}
 80023fc:	bf00      	nop
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <_ZThn8_N16CestacionVirtual18OnBotonSueltoEventEi>:
	virtual void OnBotonSueltoEvent(int idBoton);
 8002404:	f1a0 0008 	sub.w	r0, r0, #8
 8002408:	f7ff bfc4 	b.w	8002394 <_ZN16CestacionVirtual18OnBotonSueltoEventEi>

0800240c <_ZN16CestacionVirtual19OnIncrementoEncoderEi>:

//eventros del encoder
void CestacionVirtual::OnIncrementoEncoder(int id_Encoder)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
	EncoderIncremento();
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	3390      	adds	r3, #144	@ 0x90
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4610      	mov	r0, r2
 8002422:	4798      	blx	r3
}
 8002424:	bf00      	nop
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <_ZThn12_N16CestacionVirtual19OnIncrementoEncoderEi>:
	//eventros del encoder
	virtual void OnIncrementoEncoder(int id_Encoder);
 800242c:	f1a0 000c 	sub.w	r0, r0, #12
 8002430:	f7ff bfec 	b.w	800240c <_ZN16CestacionVirtual19OnIncrementoEncoderEi>

08002434 <_ZN16CestacionVirtual19OnDecrementoEncoderEi>:

void CestacionVirtual::OnDecrementoEncoder(int id_Encoder)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
	EncoderDecremento();
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	3394      	adds	r3, #148	@ 0x94
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4610      	mov	r0, r2
 800244a:	4798      	blx	r3
}
 800244c:	bf00      	nop
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <_ZThn12_N16CestacionVirtual19OnDecrementoEncoderEi>:
	virtual void OnDecrementoEncoder(int id_Encoder);
 8002454:	f1a0 000c 	sub.w	r0, r0, #12
 8002458:	f7ff bfec 	b.w	8002434 <_ZN16CestacionVirtual19OnDecrementoEncoderEi>

0800245c <_ZN16CestacionVirtual24OnBotonEncoderClickEventEii>:

void CestacionVirtual::OnBotonEncoderClickEvent(int id_Encoder, int tiempoClick)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
	BotonPerillaClickEvent(tiempoClick);
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	3380      	adds	r3, #128	@ 0x80
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	4610      	mov	r0, r2
 8002476:	4798      	blx	r3
}
 8002478:	bf00      	nop
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <_ZThn12_N16CestacionVirtual24OnBotonEncoderClickEventEii>:
	virtual void OnBotonEncoderClickEvent(int id_Encoder, int tiempoClick);
 8002480:	f1a0 000c 	sub.w	r0, r0, #12
 8002484:	f7ff bfea 	b.w	800245c <_ZN16CestacionVirtual24OnBotonEncoderClickEventEii>

08002488 <_ZN16CestacionVirtual29OnBotonEncoderPresionadoEventEi>:

void CestacionVirtual::OnBotonEncoderPresionadoEvent(int id_Encoder)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
	BotonPerillaPresionadoEvent();
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	3384      	adds	r3, #132	@ 0x84
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4610      	mov	r0, r2
 800249e:	4798      	blx	r3
}
 80024a0:	bf00      	nop
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <_ZThn12_N16CestacionVirtual29OnBotonEncoderPresionadoEventEi>:
	virtual void OnBotonEncoderPresionadoEvent(int id_Encoder);
 80024a8:	f1a0 000c 	sub.w	r0, r0, #12
 80024ac:	f7ff bfec 	b.w	8002488 <_ZN16CestacionVirtual29OnBotonEncoderPresionadoEventEi>

080024b0 <_ZN16CestacionVirtual34OnBotonEncoderPresionadoLargoEventEi>:

void CestacionVirtual::OnBotonEncoderPresionadoLargoEvent(int id_Encoder)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
	BotonPerillaPresionadoLargoEvent();
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	3388      	adds	r3, #136	@ 0x88
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4610      	mov	r0, r2
 80024c6:	4798      	blx	r3
}
 80024c8:	bf00      	nop
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <_ZThn12_N16CestacionVirtual34OnBotonEncoderPresionadoLargoEventEi>:
	virtual void OnBotonEncoderPresionadoLargoEvent(int id_Encoder);
 80024d0:	f1a0 000c 	sub.w	r0, r0, #12
 80024d4:	f7ff bfec 	b.w	80024b0 <_ZN16CestacionVirtual34OnBotonEncoderPresionadoLargoEventEi>

080024d8 <_ZN16CestacionVirtual25OnBotonEncoderSueltoEventEi>:

void CestacionVirtual::OnBotonEncoderSueltoEvent(int id_Encoder)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
	BotonPerillaSueltoEvent();
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	338c      	adds	r3, #140	@ 0x8c
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4610      	mov	r0, r2
 80024ee:	4798      	blx	r3
}
 80024f0:	bf00      	nop
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <_ZThn12_N16CestacionVirtual25OnBotonEncoderSueltoEventEi>:
	virtual void OnBotonEncoderSueltoEvent(int id_Encoder);
 80024f8:	f1a0 000c 	sub.w	r0, r0, #12
 80024fc:	f7ff bfec 	b.w	80024d8 <_ZN16CestacionVirtual25OnBotonEncoderSueltoEventEi>

08002500 <_ZN16CestacionVirtual21IncrementaTemperaturaEv>:

void CestacionVirtual::IncrementaTemperatura()
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
	if (TemperaturaEspecificada < TemperaturaMaxima)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	695a      	ldr	r2, [r3, #20]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	429a      	cmp	r2, r3
 8002512:	da0d      	bge.n	8002530 <_ZN16CestacionVirtual21IncrementaTemperaturaEv+0x30>
	{
		TemperaturaEspecificada++;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	615a      	str	r2, [r3, #20]
		TemperaturaEvent(TemperaturaEspecificada);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	3334      	adds	r3, #52	@ 0x34
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6952      	ldr	r2, [r2, #20]
 800252c:	4611      	mov	r1, r2
 800252e:	4798      	blx	r3
	}
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <_ZN16CestacionVirtual21DecrementaTemperaturaEv>:

void CestacionVirtual::DecrementaTemperatura()
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
	if (TemperaturaEspecificada > 0)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	2b00      	cmp	r3, #0
 8002546:	dd0d      	ble.n	8002564 <_ZN16CestacionVirtual21DecrementaTemperaturaEv+0x2c>
	{
		TemperaturaEspecificada--;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	1e5a      	subs	r2, r3, #1
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	615a      	str	r2, [r3, #20]
		TemperaturaEvent(TemperaturaEspecificada);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	3334      	adds	r3, #52	@ 0x34
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6952      	ldr	r2, [r2, #20]
 8002560:	4611      	mov	r1, r2
 8002562:	4798      	blx	r3
	}
}
 8002564:	bf00      	nop
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <_ZN16CestacionVirtual19InterrupcionEncoderEv>:
void CestacionVirtual::InterrupcionEncoder()
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
	Encoder.Procesa();
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	33cc      	adds	r3, #204	@ 0xcc
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff f875 	bl	8001668 <_ZN8CEncoder7ProcesaEv>
}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <_ZN18CComponenteBaseTftC1Ev>:
#include <GUI/CComponenteBaseTft.hpp>
#include "stdio.h"
#include <stdarg.h>
#include "string.h"
#include "ILI9341/ILI9341_GFX.hpp"
CComponenteBaseTft::CComponenteBaseTft()
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	4a08      	ldr	r2, [pc, #32]	@ (80025b4 <_ZN18CComponenteBaseTftC1Ev+0x2c>)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	605a      	str	r2, [r3, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	609a      	str	r2, [r3, #8]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	615a      	str	r2, [r3, #20]
{
	// TODO Auto-generated constructor stub

}
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4618      	mov	r0, r3
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr
 80025b4:	0800b3b8 	.word	0x0800b3b8

080025b8 <_ZN18CComponenteBaseTftD1Ev>:

CComponenteBaseTft::~CComponenteBaseTft()
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	4a04      	ldr	r2, [pc, #16]	@ (80025d4 <_ZN18CComponenteBaseTftD1Ev+0x1c>)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4618      	mov	r0, r3
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	0800b3b8 	.word	0x0800b3b8

080025d8 <_ZN18CComponenteBaseTftD0Ev>:
CComponenteBaseTft::~CComponenteBaseTft()
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
}
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7ff ffe9 	bl	80025b8 <_ZN18CComponenteBaseTftD1Ev>
 80025e6:	2118      	movs	r1, #24
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f005 fef3 	bl	80083d4 <_ZdlPvj>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4618      	mov	r0, r3
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <_ZN18CComponenteBaseTft9drawPixelEsst>:

//creo una capa que envuelve todas las funciones de la pantalla tft para mejorar el codigo
void CComponenteBaseTft::CComponenteBaseTft::drawPixel(int16_t x, int16_t y,
		uint16_t color)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	4608      	mov	r0, r1
 8002602:	4611      	mov	r1, r2
 8002604:	461a      	mov	r2, r3
 8002606:	4603      	mov	r3, r0
 8002608:	817b      	strh	r3, [r7, #10]
 800260a:	460b      	mov	r3, r1
 800260c:	813b      	strh	r3, [r7, #8]
 800260e:	4613      	mov	r3, r2
 8002610:	80fb      	strh	r3, [r7, #6]
	//Tft->drawPixel(x, y, color);
}
 8002612:	bf00      	nop
 8002614:	3714      	adds	r7, #20
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr

0800261c <_ZN18CComponenteBaseTft10startWriteEv>:

void CComponenteBaseTft::startWrite(void)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
	//Tft->startWrite();
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr

0800262e <_ZN18CComponenteBaseTft10writePixelEsst>:
void CComponenteBaseTft::writePixel(int16_t x, int16_t y, uint16_t color)
{
 800262e:	b480      	push	{r7}
 8002630:	b085      	sub	sp, #20
 8002632:	af00      	add	r7, sp, #0
 8002634:	60f8      	str	r0, [r7, #12]
 8002636:	4608      	mov	r0, r1
 8002638:	4611      	mov	r1, r2
 800263a:	461a      	mov	r2, r3
 800263c:	4603      	mov	r3, r0
 800263e:	817b      	strh	r3, [r7, #10]
 8002640:	460b      	mov	r3, r1
 8002642:	813b      	strh	r3, [r7, #8]
 8002644:	4613      	mov	r3, r2
 8002646:	80fb      	strh	r3, [r7, #6]
	//Tft->writePixel(x, y, color);
}
 8002648:	bf00      	nop
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr

08002652 <_ZN18CComponenteBaseTft13writeFillRectEsssst>:
void CComponenteBaseTft::writeFillRect(int16_t x, int16_t y, int16_t w,
		int16_t h, uint16_t color)
{
 8002652:	b480      	push	{r7}
 8002654:	b085      	sub	sp, #20
 8002656:	af00      	add	r7, sp, #0
 8002658:	60f8      	str	r0, [r7, #12]
 800265a:	4608      	mov	r0, r1
 800265c:	4611      	mov	r1, r2
 800265e:	461a      	mov	r2, r3
 8002660:	4603      	mov	r3, r0
 8002662:	817b      	strh	r3, [r7, #10]
 8002664:	460b      	mov	r3, r1
 8002666:	813b      	strh	r3, [r7, #8]
 8002668:	4613      	mov	r3, r2
 800266a:	80fb      	strh	r3, [r7, #6]
	//Tft->writeFillRect(x, y, w, h, color);
}
 800266c:	bf00      	nop
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr

08002676 <_ZN18CComponenteBaseTft14writeFastVLineEssst>:
void CComponenteBaseTft::writeFastVLine(int16_t x, int16_t y, int16_t h,
		uint16_t color)
{
 8002676:	b480      	push	{r7}
 8002678:	b085      	sub	sp, #20
 800267a:	af00      	add	r7, sp, #0
 800267c:	60f8      	str	r0, [r7, #12]
 800267e:	4608      	mov	r0, r1
 8002680:	4611      	mov	r1, r2
 8002682:	461a      	mov	r2, r3
 8002684:	4603      	mov	r3, r0
 8002686:	817b      	strh	r3, [r7, #10]
 8002688:	460b      	mov	r3, r1
 800268a:	813b      	strh	r3, [r7, #8]
 800268c:	4613      	mov	r3, r2
 800268e:	80fb      	strh	r3, [r7, #6]
	//Tft->writeFastVLine(x, y, h, color);
}
 8002690:	bf00      	nop
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr

0800269a <_ZN18CComponenteBaseTft14writeFastHLineEssst>:
void CComponenteBaseTft::writeFastHLine(int16_t x, int16_t y, int16_t w,
		uint16_t color)
{
 800269a:	b480      	push	{r7}
 800269c:	b085      	sub	sp, #20
 800269e:	af00      	add	r7, sp, #0
 80026a0:	60f8      	str	r0, [r7, #12]
 80026a2:	4608      	mov	r0, r1
 80026a4:	4611      	mov	r1, r2
 80026a6:	461a      	mov	r2, r3
 80026a8:	4603      	mov	r3, r0
 80026aa:	817b      	strh	r3, [r7, #10]
 80026ac:	460b      	mov	r3, r1
 80026ae:	813b      	strh	r3, [r7, #8]
 80026b0:	4613      	mov	r3, r2
 80026b2:	80fb      	strh	r3, [r7, #6]
	//Tft->writeFastHLine(x, y, w, color);
}
 80026b4:	bf00      	nop
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr

080026be <_ZN18CComponenteBaseTft9writeLineEsssst>:
void CComponenteBaseTft::writeLine(int16_t x0, int16_t y0, int16_t x1,
		int16_t y1, uint16_t color)
{
 80026be:	b480      	push	{r7}
 80026c0:	b085      	sub	sp, #20
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	60f8      	str	r0, [r7, #12]
 80026c6:	4608      	mov	r0, r1
 80026c8:	4611      	mov	r1, r2
 80026ca:	461a      	mov	r2, r3
 80026cc:	4603      	mov	r3, r0
 80026ce:	817b      	strh	r3, [r7, #10]
 80026d0:	460b      	mov	r3, r1
 80026d2:	813b      	strh	r3, [r7, #8]
 80026d4:	4613      	mov	r3, r2
 80026d6:	80fb      	strh	r3, [r7, #6]
	//Tft->writeLine(x0, y0, x1, y1, color);
}
 80026d8:	bf00      	nop
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr

080026e2 <_ZN18CComponenteBaseTft8endWriteEv>:
void CComponenteBaseTft::endWrite(void)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
	//Tft->endWrite();
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <_ZN18CComponenteBaseTft11setRotationEh>:
void CComponenteBaseTft::setRotation(uint8_t r)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	460b      	mov	r3, r1
 80026fe:	70fb      	strb	r3, [r7, #3]
	//Tft->setRotation(r);
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr

0800270a <_ZN18CComponenteBaseTft13invertDisplayEb>:
void CComponenteBaseTft::invertDisplay(bool i)
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
 8002712:	460b      	mov	r3, r1
 8002714:	70fb      	strb	r3, [r7, #3]
	//Tft->invertDisplay(i);
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr

08002720 <_ZN18CComponenteBaseTft13drawFastVLineEssst>:
void CComponenteBaseTft::drawFastVLine(int16_t x, int16_t y, int16_t h,
		uint16_t color)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	4608      	mov	r0, r1
 800272a:	4611      	mov	r1, r2
 800272c:	461a      	mov	r2, r3
 800272e:	4603      	mov	r3, r0
 8002730:	817b      	strh	r3, [r7, #10]
 8002732:	460b      	mov	r3, r1
 8002734:	813b      	strh	r3, [r7, #8]
 8002736:	4613      	mov	r3, r2
 8002738:	80fb      	strh	r3, [r7, #6]
	//Tft->drawFastVLine(x, y, h, color);
}
 800273a:	bf00      	nop
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr

08002744 <_ZN18CComponenteBaseTft13drawFastHLineEssst>:
void CComponenteBaseTft::drawFastHLine(int16_t x, int16_t y, int16_t w,
		uint16_t color)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	4608      	mov	r0, r1
 800274e:	4611      	mov	r1, r2
 8002750:	461a      	mov	r2, r3
 8002752:	4603      	mov	r3, r0
 8002754:	817b      	strh	r3, [r7, #10]
 8002756:	460b      	mov	r3, r1
 8002758:	813b      	strh	r3, [r7, #8]
 800275a:	4613      	mov	r3, r2
 800275c:	80fb      	strh	r3, [r7, #6]
	//Tft->drawFastHLine(x, y, w, color);
}
 800275e:	bf00      	nop
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr

08002768 <_ZN18CComponenteBaseTft10fillScreenEt>:
void CComponenteBaseTft::fillScreen(uint16_t color)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	807b      	strh	r3, [r7, #2]
	//Tft->fillScreen(color);
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr

0800277e <_ZN18CComponenteBaseTft8drawLineEsssst>:
void CComponenteBaseTft::drawLine(int16_t x0, int16_t y0, int16_t x1,
		int16_t y1, uint16_t color)
{
 800277e:	b480      	push	{r7}
 8002780:	b085      	sub	sp, #20
 8002782:	af00      	add	r7, sp, #0
 8002784:	60f8      	str	r0, [r7, #12]
 8002786:	4608      	mov	r0, r1
 8002788:	4611      	mov	r1, r2
 800278a:	461a      	mov	r2, r3
 800278c:	4603      	mov	r3, r0
 800278e:	817b      	strh	r3, [r7, #10]
 8002790:	460b      	mov	r3, r1
 8002792:	813b      	strh	r3, [r7, #8]
 8002794:	4613      	mov	r3, r2
 8002796:	80fb      	strh	r3, [r7, #6]
	//Tft->drawLine(x0, y0, x1, y1, color);
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr

080027a2 <_ZN18CComponenteBaseTft5widthEv>:
void CComponenteBaseTft::cp437(bool x)
{
	//Tft->cp437(x);
}
int16_t CComponenteBaseTft::width(void)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
	return 319;
 80027aa:	f240 133f 	movw	r3, #319	@ 0x13f
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr

080027b8 <_ZN18CComponenteBaseTft6heightEv>:
int16_t CComponenteBaseTft::height(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
	return 239;
 80027c0:	23ef      	movs	r3, #239	@ 0xef
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr

080027cc <_ZN18CComponenteBaseTft8fillRectEsssst>:
	va_end(pa);
	buffer[posbuffer] = '\0';
	print(buffer);
}
void CComponenteBaseTft::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,uint16_t color)
{
 80027cc:	b590      	push	{r4, r7, lr}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af02      	add	r7, sp, #8
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	4608      	mov	r0, r1
 80027d6:	4611      	mov	r1, r2
 80027d8:	461a      	mov	r2, r3
 80027da:	4603      	mov	r3, r0
 80027dc:	817b      	strh	r3, [r7, #10]
 80027de:	460b      	mov	r3, r1
 80027e0:	813b      	strh	r3, [r7, #8]
 80027e2:	4613      	mov	r3, r2
 80027e4:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Filled_Rectangle_Coord(x, y, x+w, y+h, color);
 80027e6:	8978      	ldrh	r0, [r7, #10]
 80027e8:	8939      	ldrh	r1, [r7, #8]
 80027ea:	897a      	ldrh	r2, [r7, #10]
 80027ec:	88fb      	ldrh	r3, [r7, #6]
 80027ee:	4413      	add	r3, r2
 80027f0:	b29c      	uxth	r4, r3
 80027f2:	893a      	ldrh	r2, [r7, #8]
 80027f4:	8c3b      	ldrh	r3, [r7, #32]
 80027f6:	4413      	add	r3, r2
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	4613      	mov	r3, r2
 8002800:	4622      	mov	r2, r4
 8002802:	f000 ff52 	bl	80036aa <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt>
}
 8002806:	bf00      	nop
 8002808:	3714      	adds	r7, #20
 800280a:	46bd      	mov	sp, r7
 800280c:	bd90      	pop	{r4, r7, pc}

0800280e <_ZN18CComponenteBaseTft8drawRectEsssst>:
void CComponenteBaseTft::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,uint16_t color)
{
 800280e:	b590      	push	{r4, r7, lr}
 8002810:	b087      	sub	sp, #28
 8002812:	af02      	add	r7, sp, #8
 8002814:	60f8      	str	r0, [r7, #12]
 8002816:	4608      	mov	r0, r1
 8002818:	4611      	mov	r1, r2
 800281a:	461a      	mov	r2, r3
 800281c:	4603      	mov	r3, r0
 800281e:	817b      	strh	r3, [r7, #10]
 8002820:	460b      	mov	r3, r1
 8002822:	813b      	strh	r3, [r7, #8]
 8002824:	4613      	mov	r3, r2
 8002826:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Hollow_Rectangle_Coord(x, y,x+w,y+h,color);
 8002828:	8978      	ldrh	r0, [r7, #10]
 800282a:	8939      	ldrh	r1, [r7, #8]
 800282c:	897a      	ldrh	r2, [r7, #10]
 800282e:	88fb      	ldrh	r3, [r7, #6]
 8002830:	4413      	add	r3, r2
 8002832:	b29c      	uxth	r4, r3
 8002834:	893a      	ldrh	r2, [r7, #8]
 8002836:	8c3b      	ldrh	r3, [r7, #32]
 8002838:	4413      	add	r3, r2
 800283a:	b29a      	uxth	r2, r3
 800283c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	4613      	mov	r3, r2
 8002842:	4622      	mov	r2, r4
 8002844:	f000 feb0 	bl	80035a8 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt>
	//Tft->drawRect(x, y, w, h, color);
}
 8002848:	bf00      	nop
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	bd90      	pop	{r4, r7, pc}

08002850 <_ZN18CComponenteBaseTft9setCursorEss>:
void CComponenteBaseTft::setCursor(int16_t x, int16_t y)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	807b      	strh	r3, [r7, #2]
 800285c:	4613      	mov	r3, r2
 800285e:	803b      	strh	r3, [r7, #0]
    CursorX=x;
 8002860:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	605a      	str	r2, [r3, #4]
    CursorY=y;
 8002868:	f9b7 2000 	ldrsh.w	r2, [r7]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	609a      	str	r2, [r3, #8]
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr

0800287a <_ZN18CComponenteBaseTft11setTextSizeEh>:
void CComponenteBaseTft::setTextSize(uint8_t s)
{
 800287a:	b480      	push	{r7}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
 8002882:	460b      	mov	r3, r1
 8002884:	70fb      	strb	r3, [r7, #3]
	TextSize=s;
 8002886:	78fa      	ldrb	r2, [r7, #3]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	60da      	str	r2, [r3, #12]
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr

08002896 <_ZN18CComponenteBaseTft12setTextColorEt>:
void CComponenteBaseTft::setTextSize(uint8_t sx, uint8_t sy)
{
	//Tft->setTextSize(sx, sy);
}
void CComponenteBaseTft::setTextColor(uint16_t c)
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
 800289e:	460b      	mov	r3, r1
 80028a0:	807b      	strh	r3, [r7, #2]
	ColorTexto=c;
 80028a2:	887a      	ldrh	r2, [r7, #2]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	611a      	str	r2, [r3, #16]
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr

080028b2 <_ZN18CComponenteBaseTft5printEPc>:
void CComponenteBaseTft::print(char *texto)
{
 80028b2:	b590      	push	{r4, r7, lr}
 80028b4:	b085      	sub	sp, #20
 80028b6:	af02      	add	r7, sp, #8
 80028b8:	6078      	str	r0, [r7, #4]
 80028ba:	6039      	str	r1, [r7, #0]
	ILI9341_Draw_Text(texto, CursorX,CursorY, ColorTexto, TextSize, BackColor);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	b2d9      	uxtb	r1, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	b2d8      	uxtb	r0, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	b29c      	uxth	r4, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6952      	ldr	r2, [r2, #20]
 80028d8:	b292      	uxth	r2, r2
 80028da:	9201      	str	r2, [sp, #4]
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	4623      	mov	r3, r4
 80028e0:	4602      	mov	r2, r0
 80028e2:	6838      	ldr	r0, [r7, #0]
 80028e4:	f000 ffda 	bl	800389c <_Z17ILI9341_Draw_TextPKchhttt>
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd90      	pop	{r4, r7, pc}

080028f0 <_ZN12CEtiquetaTftD1Ev>:
 */

#include <GUI/CEtiquetaTft.hpp>


CEtiquetaTft::~CEtiquetaTft()
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	4a05      	ldr	r2, [pc, #20]	@ (8002910 <_ZN12CEtiquetaTftD1Ev+0x20>)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4618      	mov	r0, r3
 8002902:	f000 fa81 	bl	8002e08 <_ZN14CRectanguloTftD1Ev>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4618      	mov	r0, r3
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	0800b408 	.word	0x0800b408

08002914 <_ZN12CEtiquetaTftD0Ev>:
CEtiquetaTft::~CEtiquetaTft()
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
}
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff ffe7 	bl	80028f0 <_ZN12CEtiquetaTftD1Ev>
 8002922:	21a4      	movs	r1, #164	@ 0xa4
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f005 fd55 	bl	80083d4 <_ZdlPvj>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4618      	mov	r0, r3
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <_ZN12CEtiquetaTftC1EiiiiiPciiii>:

CEtiquetaTft::CEtiquetaTft(int xi, int yi, int ancho, int alto,	int backColor, char *texto, int colorTexto, int textSize, int contorno,	int colorContorno) :
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af04      	add	r7, sp, #16
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
 8002940:	603b      	str	r3, [r7, #0]
		CRectanguloTft(xi, yi, ancho, alto, backColor, contorno, colorContorno)
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002946:	9303      	str	r3, [sp, #12]
 8002948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800294a:	9302      	str	r3, [sp, #8]
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	9301      	str	r3, [sp, #4]
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	68b9      	ldr	r1, [r7, #8]
 800295a:	f000 fa77 	bl	8002e4c <_ZN14CRectanguloTftC1Eiiiiiii>
 800295e:	4a11      	ldr	r2, [pc, #68]	@ (80029a4 <_ZN12CEtiquetaTftC1EiiiiiPciiii+0x70>)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2203      	movs	r2, #3
 8002968:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2201      	movs	r2, #1
 8002970:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2201      	movs	r2, #1
 8002978:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
{
	strcpy(Texto, texto);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	3330      	adds	r3, #48	@ 0x30
 8002980:	6a39      	ldr	r1, [r7, #32]
 8002982:	4618      	mov	r0, r3
 8002984:	f006 fc5f 	bl	8009246 <strcpy>
	ColorTexto = colorTexto;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800298c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	TextSize = textSize;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002994:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
}
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	0800b408 	.word	0x0800b408

080029a8 <_ZN12CEtiquetaTft8SetTextoEPcz>:

void CEtiquetaTft::SetTexto(char *formato, ...)
{
 80029a8:	b40e      	push	{r1, r2, r3}
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b0bb      	sub	sp, #236	@ 0xec
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
	char *p;
	char buffer[100];
	char tmp[100];
	int postmp = 0;
 80029b2:	2300      	movs	r3, #0
 80029b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	int posbuffer = 0;
 80029b8:	2300      	movs	r3, #0
 80029ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	va_list pa;
	int encontrado = 0;
 80029be:	2300      	movs	r3, #0
 80029c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

	va_start(pa, formato);
 80029c4:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 80029c8:	60fb      	str	r3, [r7, #12]

	for (p = formato; *p; p++)
 80029ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80029d2:	e0f1      	b.n	8002bb8 <_ZN12CEtiquetaTft8SetTextoEPcz+0x210>
	{

		if (*p != '%')
 80029d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b25      	cmp	r3, #37	@ 0x25
 80029dc:	d00f      	beq.n	80029fe <_ZN12CEtiquetaTft8SetTextoEPcz+0x56>
		{
			buffer[posbuffer] = *p;
 80029de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029e2:	7819      	ldrb	r1, [r3, #0]
 80029e4:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 80029e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029ec:	4413      	add	r3, r2
 80029ee:	460a      	mov	r2, r1
 80029f0:	701a      	strb	r2, [r3, #0]
			posbuffer++;
 80029f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029f6:	3301      	adds	r3, #1
 80029f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
			continue;
 80029fc:	e0d7      	b.n	8002bae <_ZN12CEtiquetaTft8SetTextoEPcz+0x206>
		}
		encontrado = 0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		switch (*++p)
 8002a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a08:	3301      	adds	r3, #1
 8002a0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	3b63      	subs	r3, #99	@ 0x63
 8002a16:	2b15      	cmp	r3, #21
 8002a18:	f200 8092 	bhi.w	8002b40 <_ZN12CEtiquetaTft8SetTextoEPcz+0x198>
 8002a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a24 <_ZN12CEtiquetaTft8SetTextoEPcz+0x7c>)
 8002a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a22:	bf00      	nop
 8002a24:	08002aed 	.word	0x08002aed
 8002a28:	08002a7d 	.word	0x08002a7d
 8002a2c:	08002b41 	.word	0x08002b41
 8002a30:	08002b09 	.word	0x08002b09
 8002a34:	08002b41 	.word	0x08002b41
 8002a38:	08002b41 	.word	0x08002b41
 8002a3c:	08002a99 	.word	0x08002a99
 8002a40:	08002b41 	.word	0x08002b41
 8002a44:	08002b41 	.word	0x08002b41
 8002a48:	08002b41 	.word	0x08002b41
 8002a4c:	08002b41 	.word	0x08002b41
 8002a50:	08002b41 	.word	0x08002b41
 8002a54:	08002b41 	.word	0x08002b41
 8002a58:	08002ad1 	.word	0x08002ad1
 8002a5c:	08002b41 	.word	0x08002b41
 8002a60:	08002b41 	.word	0x08002b41
 8002a64:	08002b25 	.word	0x08002b25
 8002a68:	08002b41 	.word	0x08002b41
 8002a6c:	08002b41 	.word	0x08002b41
 8002a70:	08002b41 	.word	0x08002b41
 8002a74:	08002b41 	.word	0x08002b41
 8002a78:	08002ab5 	.word	0x08002ab5
		{
		case 'd':
			sprintf(tmp, "%d", va_arg(pa, int));
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	1d1a      	adds	r2, r3, #4
 8002a80:	60fa      	str	r2, [r7, #12]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	f107 0310 	add.w	r3, r7, #16
 8002a88:	4959      	ldr	r1, [pc, #356]	@ (8002bf0 <_ZN12CEtiquetaTft8SetTextoEPcz+0x248>)
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f006 faa4 	bl	8008fd8 <siprintf>
			encontrado = 1;
 8002a90:	2301      	movs	r3, #1
 8002a92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 8002a96:	e063      	b.n	8002b60 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		case 'i':
			sprintf(tmp, "%i", va_arg(pa, int));
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	1d1a      	adds	r2, r3, #4
 8002a9c:	60fa      	str	r2, [r7, #12]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	f107 0310 	add.w	r3, r7, #16
 8002aa4:	4953      	ldr	r1, [pc, #332]	@ (8002bf4 <_ZN12CEtiquetaTft8SetTextoEPcz+0x24c>)
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f006 fa96 	bl	8008fd8 <siprintf>
			encontrado = 1;
 8002aac:	2301      	movs	r3, #1
 8002aae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 8002ab2:	e055      	b.n	8002b60 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		case 'x':
			sprintf(tmp, "%x", va_arg(pa, int));
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	1d1a      	adds	r2, r3, #4
 8002ab8:	60fa      	str	r2, [r7, #12]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	f107 0310 	add.w	r3, r7, #16
 8002ac0:	494d      	ldr	r1, [pc, #308]	@ (8002bf8 <_ZN12CEtiquetaTft8SetTextoEPcz+0x250>)
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f006 fa88 	bl	8008fd8 <siprintf>
			encontrado = 1;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 8002ace:	e047      	b.n	8002b60 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		case 'p':
			sprintf(tmp, "%p", va_arg(pa, int));
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	1d1a      	adds	r2, r3, #4
 8002ad4:	60fa      	str	r2, [r7, #12]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	f107 0310 	add.w	r3, r7, #16
 8002adc:	4947      	ldr	r1, [pc, #284]	@ (8002bfc <_ZN12CEtiquetaTft8SetTextoEPcz+0x254>)
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f006 fa7a 	bl	8008fd8 <siprintf>
			encontrado = 1;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 8002aea:	e039      	b.n	8002b60 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		case 'c':
			sprintf(tmp, "%c", va_arg(pa, int));
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	1d1a      	adds	r2, r3, #4
 8002af0:	60fa      	str	r2, [r7, #12]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	f107 0310 	add.w	r3, r7, #16
 8002af8:	4941      	ldr	r1, [pc, #260]	@ (8002c00 <_ZN12CEtiquetaTft8SetTextoEPcz+0x258>)
 8002afa:	4618      	mov	r0, r3
 8002afc:	f006 fa6c 	bl	8008fd8 <siprintf>
			encontrado = 1;
 8002b00:	2301      	movs	r3, #1
 8002b02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 8002b06:	e02b      	b.n	8002b60 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		case 'f':
			sprintf(tmp, "%f", va_arg(pa, int));
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	1d1a      	adds	r2, r3, #4
 8002b0c:	60fa      	str	r2, [r7, #12]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	f107 0310 	add.w	r3, r7, #16
 8002b14:	493b      	ldr	r1, [pc, #236]	@ (8002c04 <_ZN12CEtiquetaTft8SetTextoEPcz+0x25c>)
 8002b16:	4618      	mov	r0, r3
 8002b18:	f006 fa5e 	bl	8008fd8 <siprintf>
			encontrado = 1;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 8002b22:	e01d      	b.n	8002b60 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		case 's':
			sprintf(tmp, "%s", va_arg(pa, char *));
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	1d1a      	adds	r2, r3, #4
 8002b28:	60fa      	str	r2, [r7, #12]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	f107 0310 	add.w	r3, r7, #16
 8002b30:	4935      	ldr	r1, [pc, #212]	@ (8002c08 <_ZN12CEtiquetaTft8SetTextoEPcz+0x260>)
 8002b32:	4618      	mov	r0, r3
 8002b34:	f006 fa50 	bl	8008fd8 <siprintf>
			encontrado = 1;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 8002b3e:	e00f      	b.n	8002b60 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		default:
			buffer[posbuffer] = *p;
 8002b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b44:	7819      	ldrb	r1, [r3, #0]
 8002b46:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8002b4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b4e:	4413      	add	r3, r2
 8002b50:	460a      	mov	r2, r1
 8002b52:	701a      	strb	r2, [r3, #0]
			posbuffer++;
 8002b54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b58:	3301      	adds	r3, #1
 8002b5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
			break;
 8002b5e:	bf00      	nop
		}
		if (encontrado == 1)
 8002b60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d122      	bne.n	8002bae <_ZN12CEtiquetaTft8SetTextoEPcz+0x206>
		{
			postmp = 0;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
			while (tmp[postmp] != '\0')
 8002b6e:	e016      	b.n	8002b9e <_ZN12CEtiquetaTft8SetTextoEPcz+0x1f6>
			{
				buffer[posbuffer] = tmp[postmp];
 8002b70:	f107 0210 	add.w	r2, r7, #16
 8002b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b78:	4413      	add	r3, r2
 8002b7a:	7819      	ldrb	r1, [r3, #0]
 8002b7c:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8002b80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b84:	4413      	add	r3, r2
 8002b86:	460a      	mov	r2, r1
 8002b88:	701a      	strb	r2, [r3, #0]
				posbuffer++;
 8002b8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b8e:	3301      	adds	r3, #1
 8002b90:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
				postmp++;
 8002b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b98:	3301      	adds	r3, #1
 8002b9a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
			while (tmp[postmp] != '\0')
 8002b9e:	f107 0210 	add.w	r2, r7, #16
 8002ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ba6:	4413      	add	r3, r2
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1e0      	bne.n	8002b70 <_ZN12CEtiquetaTft8SetTextoEPcz+0x1c8>
	for (p = formato; *p; p++)
 8002bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f47f af08 	bne.w	80029d4 <_ZN12CEtiquetaTft8SetTextoEPcz+0x2c>
			}
		}
	}
	va_end(pa);
	buffer[posbuffer] = '\0';
 8002bc4:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8002bc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002bcc:	4413      	add	r3, r2
 8002bce:	2200      	movs	r2, #0
 8002bd0:	701a      	strb	r2, [r3, #0]
	strcpy(Texto, buffer);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3330      	adds	r3, #48	@ 0x30
 8002bd6:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8002bda:	4611      	mov	r1, r2
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f006 fb32 	bl	8009246 <strcpy>
	//Texto=buffer;
}
 8002be2:	bf00      	nop
 8002be4:	37ec      	adds	r7, #236	@ 0xec
 8002be6:	46bd      	mov	sp, r7
 8002be8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002bec:	b003      	add	sp, #12
 8002bee:	4770      	bx	lr
 8002bf0:	0800b0f8 	.word	0x0800b0f8
 8002bf4:	0800b0fc 	.word	0x0800b0fc
 8002bf8:	0800b100 	.word	0x0800b100
 8002bfc:	0800b104 	.word	0x0800b104
 8002c00:	0800b108 	.word	0x0800b108
 8002c04:	0800b10c 	.word	0x0800b10c
 8002c08:	0800b110 	.word	0x0800b110

08002c0c <_ZN12CEtiquetaTft13SetSeparacionEii>:
{
	return Texto;
}

void CEtiquetaTft::SetSeparacion(int izquieda, int arriba)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
	SeparacionIzquierda = izquieda;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	SeparacionArriba = arriba;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
}
 8002c28:	bf00      	nop
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bc80      	pop	{r7}
 8002c30:	4770      	bx	lr

08002c32 <_ZN12CEtiquetaTft13SetColorTextoEi>:
{
	return SeparacionIzquierda;
}

void CEtiquetaTft::SetColorTexto(int color)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	6039      	str	r1, [r7, #0]
	ColorTexto = color;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bc80      	pop	{r7}
 8002c4c:	4770      	bx	lr

08002c4e <_ZN12CEtiquetaTft4ShowEv>:
{
	return ColorTexto;
}

void CEtiquetaTft::Show()
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b082      	sub	sp, #8
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
	//mandamos a dibujar el rectangulo
	CRectanguloTft::Show();
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 f929 	bl	8002eb0 <_ZN14CRectanguloTft4ShowEv>
	//me posiciono el la pocicion del texto
	setCursor(Xi + SeparacionIzquierda, Yi + SeparacionArriba);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	4413      	add	r3, r2
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	b219      	sxth	r1, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	4413      	add	r3, r2
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	b21b      	sxth	r3, r3
 8002c88:	461a      	mov	r2, r3
 8002c8a:	f7ff fde1 	bl	8002850 <_ZN18CComponenteBaseTft9setCursorEss>
	//asigno tamaño de la letra
	setTextSize (TextSize);
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4610      	mov	r0, r2
 8002c9c:	f7ff fded 	bl	800287a <_ZN18CComponenteBaseTft11setTextSizeEh>
	//asigno el color de texto
	setTextColor (ColorTexto);
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	4619      	mov	r1, r3
 8002cac:	4610      	mov	r0, r2
 8002cae:	f7ff fdf2 	bl	8002896 <_ZN18CComponenteBaseTft12setTextColorEt>
	//muestro el texto;
	print (Texto);
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3330      	adds	r3, #48	@ 0x30
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4610      	mov	r0, r2
 8002cbc:	f7ff fdf9 	bl	80028b2 <_ZN18CComponenteBaseTft5printEPc>
}
 8002cc0:	bf00      	nop
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <_ZN13CPantallaBaseD1Ev>:
 *      Author: W10
 */

#include <GUI/CPantallaBase.hpp>

CPantallaBase::~CPantallaBase()
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	4a05      	ldr	r2, [pc, #20]	@ (8002ce8 <_ZN13CPantallaBaseD1Ev+0x20>)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 f895 	bl	8002e08 <_ZN14CRectanguloTftD1Ev>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	0800b464 	.word	0x0800b464

08002cec <_ZN13CPantallaBaseD0Ev>:
CPantallaBase::~CPantallaBase()
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
}
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7ff ffe7 	bl	8002cc8 <_ZN13CPantallaBaseD1Ev>
 8002cfa:	219c      	movs	r1, #156	@ 0x9c
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f005 fb69 	bl	80083d4 <_ZdlPvj>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4618      	mov	r0, r3
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <_ZN13CPantallaBaseC1EiPc>:

//constructor
CPantallaBase::CPantallaBase(int verTitulo, char *titulo) :
 8002d0c:	b590      	push	{r4, r7, lr}
 8002d0e:	b08f      	sub	sp, #60	@ 0x3c
 8002d10:	af08      	add	r7, sp, #32
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
		CRectanguloTft(0, 0, 0, 0, COLOR::BLACK, 1, COLOR::BLUE)
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	231f      	movs	r3, #31
 8002d1c:	9303      	str	r3, [sp, #12]
 8002d1e:	2301      	movs	r3, #1
 8002d20:	9302      	str	r3, [sp, #8]
 8002d22:	2300      	movs	r3, #0
 8002d24:	9301      	str	r3, [sp, #4]
 8002d26:	2300      	movs	r3, #0
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	2100      	movs	r1, #0
 8002d30:	f000 f88c 	bl	8002e4c <_ZN14CRectanguloTftC1Eiiiiiii>
 8002d34:	4a24      	ldr	r2, [pc, #144]	@ (8002dc8 <_ZN13CPantallaBaseC1EiPc+0xbc>)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	635a      	str	r2, [r3, #52]	@ 0x34
{
	VerTitulo = verTitulo;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	635a      	str	r2, [r3, #52]	@ 0x34
	strcpy(Titulo, titulo);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	3338      	adds	r3, #56	@ 0x38
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f006 fa7a 	bl	8009246 <strcpy>
	setRotation(3);  //ROTACION::HORIZONTAL); //en horizontal
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2103      	movs	r1, #3
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff fccc 	bl	80026f4 <_ZN18CComponenteBaseTft11setRotationEh>
	int ancho = width();
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff fd1f 	bl	80027a2 <_ZN18CComponenteBaseTft5widthEv>
 8002d64:	4603      	mov	r3, r0
 8002d66:	617b      	str	r3, [r7, #20]
	int alto = height();
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff fd24 	bl	80027b8 <_ZN18CComponenteBaseTft6heightEv>
 8002d70:	4603      	mov	r3, r0
 8002d72:	613b      	str	r3, [r7, #16]
	Redimenciona(ancho, alto);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	6979      	ldr	r1, [r7, #20]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 f8e7 	bl	8002f4e <_ZN14CRectanguloTft12RedimencionaEii>
	LabelTitulo = new CEtiquetaTft( Xi, Yi, ancho, 30, COLOR::BLUE, Titulo,	COLOR::WHITE, 3, 0, COLOR::BLUE);
 8002d80:	20a4      	movs	r0, #164	@ 0xa4
 8002d82:	f005 fb29 	bl	80083d8 <_Znwj>
 8002d86:	4603      	mov	r3, r0
 8002d88:	461c      	mov	r4, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6999      	ldr	r1, [r3, #24]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	69da      	ldr	r2, [r3, #28]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	3338      	adds	r3, #56	@ 0x38
 8002d96:	201f      	movs	r0, #31
 8002d98:	9006      	str	r0, [sp, #24]
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	9005      	str	r0, [sp, #20]
 8002d9e:	2003      	movs	r0, #3
 8002da0:	9004      	str	r0, [sp, #16]
 8002da2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002da6:	9003      	str	r0, [sp, #12]
 8002da8:	9302      	str	r3, [sp, #8]
 8002daa:	231f      	movs	r3, #31
 8002dac:	9301      	str	r3, [sp, #4]
 8002dae:	231e      	movs	r3, #30
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	4620      	mov	r0, r4
 8002db6:	f7ff fdbd 	bl	8002934 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	631c      	str	r4, [r3, #48]	@ 0x30
}
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	371c      	adds	r7, #28
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd90      	pop	{r4, r7, pc}
 8002dc8:	0800b464 	.word	0x0800b464

08002dcc <_ZN13CPantallaBase4ShowEv>:
//funcion que se tiene que reemplazar para verse
void CPantallaBase::Show()
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
	//dibujo el fondo
	CRectanguloTft::Show();
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 f86a 	bl	8002eb0 <_ZN14CRectanguloTft4ShowEv>
	//dibujo el titulo
	LabelTitulo->Show();
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	3348      	adds	r3, #72	@ 0x48
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4610      	mov	r0, r2
 8002dec:	4798      	blx	r3
}
 8002dee:	bf00      	nop
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <_ZN13CPantallaBase8RefrescaEv>:
void CPantallaBase::Refresca()
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]

}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr

08002e08 <_ZN14CRectanguloTftD1Ev>:
 *      Author: W10
 */

#include <GUI/CRectanguloTft.hpp>

CRectanguloTft::~CRectanguloTft()
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	4a05      	ldr	r2, [pc, #20]	@ (8002e28 <_ZN14CRectanguloTftD1Ev+0x20>)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff fbcd 	bl	80025b8 <_ZN18CComponenteBaseTftD1Ev>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4618      	mov	r0, r3
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	0800b4c4 	.word	0x0800b4c4

08002e2c <_ZN14CRectanguloTftD0Ev>:
CRectanguloTft::~CRectanguloTft()
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
}
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f7ff ffe7 	bl	8002e08 <_ZN14CRectanguloTftD1Ev>
 8002e3a:	2130      	movs	r1, #48	@ 0x30
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f005 fac9 	bl	80083d4 <_ZdlPvj>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4618      	mov	r0, r3
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <_ZN14CRectanguloTftC1Eiiiiiii>:

CRectanguloTft::CRectanguloTft(int xi, int yi, int ancho , int alto , int backColor , int contorno , int colorContorno )
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
 8002e58:	603b      	str	r3, [r7, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff fb93 	bl	8002588 <_ZN18CComponenteBaseTftC1Ev>
 8002e62:	4a12      	ldr	r2, [pc, #72]	@ (8002eac <_ZN14CRectanguloTftC1Eiiiiiii+0x60>)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e74:	62da      	str	r2, [r3, #44]	@ 0x2c
{
  Xi = xi;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	619a      	str	r2, [r3, #24]
  Ancho = ancho;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	621a      	str	r2, [r3, #32]
  Yi = yi;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	61da      	str	r2, [r3, #28]
  Alto = alto;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	625a      	str	r2, [r3, #36]	@ 0x24
  BackColor = backColor;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	69fa      	ldr	r2, [r7, #28]
 8002e92:	615a      	str	r2, [r3, #20]
  ColorControrno = colorContorno;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e98:	62da      	str	r2, [r3, #44]	@ 0x2c
  Contorno = contorno;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6a3a      	ldr	r2, [r7, #32]
 8002e9e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	0800b4c4 	.word	0x0800b4c4

08002eb0 <_ZN14CRectanguloTft4ShowEv>:
//muestra el rectangulo en pantalla

void CRectanguloTft::Show()
{
 8002eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af02      	add	r7, sp, #8
 8002eb6:	6078      	str	r0, [r7, #4]
  //dibujo el rectangulo
  fillRect(Xi, Yi, Ancho, Alto, BackColor);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	3338      	adds	r3, #56	@ 0x38
 8002ec0:	681c      	ldr	r4, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	b219      	sxth	r1, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	b21d      	sxth	r5, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	b21e      	sxth	r6, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed8:	b21b      	sxth	r3, r3
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6952      	ldr	r2, [r2, #20]
 8002ede:	b292      	uxth	r2, r2
 8002ee0:	9201      	str	r2, [sp, #4]
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	4633      	mov	r3, r6
 8002ee6:	462a      	mov	r2, r5
 8002ee8:	47a0      	blx	r4
  //hay que mostrar contorno?
  if (Contorno == 1) {
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d118      	bne.n	8002f24 <_ZN14CRectanguloTft4ShowEv+0x74>
    drawRect(Xi, Yi, Ancho, Alto, ColorControrno);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	3344      	adds	r3, #68	@ 0x44
 8002efa:	681c      	ldr	r4, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	b219      	sxth	r1, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	b21d      	sxth	r5, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	b21e      	sxth	r6, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f12:	b21b      	sxth	r3, r3
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002f18:	b292      	uxth	r2, r2
 8002f1a:	9201      	str	r2, [sp, #4]
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	4633      	mov	r3, r6
 8002f20:	462a      	mov	r2, r5
 8002f22:	47a0      	blx	r4
  }
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f2c <_ZN14CRectanguloTft14CambiaPosicionEii>:

void CRectanguloTft::CambiaPosicion(int x, int y)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  Xi=x;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	619a      	str	r2, [r3, #24]
  Yi=y;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	61da      	str	r2, [r3, #28]
}
 8002f44:	bf00      	nop
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bc80      	pop	{r7}
 8002f4c:	4770      	bx	lr

08002f4e <_ZN14CRectanguloTft12RedimencionaEii>:

void CRectanguloTft::Redimenciona(int ancho, int alto)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b085      	sub	sp, #20
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	60f8      	str	r0, [r7, #12]
 8002f56:	60b9      	str	r1, [r7, #8]
 8002f58:	607a      	str	r2, [r7, #4]
  Ancho=ancho;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	621a      	str	r2, [r3, #32]
  Alto=alto;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002f66:	bf00      	nop
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr

08002f70 <_ZN14CRectanguloTft13SetColorFondoEi>:

void CRectanguloTft::SetColorFondo(int color)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  BackColor=color;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	615a      	str	r2, [r3, #20]
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc80      	pop	{r7}
 8002f88:	4770      	bx	lr

08002f8a <_ZN14CRectanguloTft11DameCentroXEv>:
  return Alto;
}

//regresa el punto central del rectangulo
int CRectanguloTft::DameCentroX()
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  return Xi+(Ancho/2);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699a      	ldr	r2, [r3, #24]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	0fd9      	lsrs	r1, r3, #31
 8002f9c:	440b      	add	r3, r1
 8002f9e:	105b      	asrs	r3, r3, #1
 8002fa0:	4413      	add	r3, r2
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr

08002fac <_ZN15CPantallaManualD1Ev>:
 *      Author: W10
 */

#include <GUI/PantallaManual/CPantallaManual.hpp>

CPantallaManual::~CPantallaManual()
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe0 <_ZN15CPantallaManualD1Ev+0x34>)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe4 <_ZN15CPantallaManualD1Ev+0x38>)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
{
	// TODO Auto-generated destructor stub
}
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	339c      	adds	r3, #156	@ 0x9c
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f001 f96e 	bl	80042a8 <_ZN23CManejadorControlesBaseD1Ev>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff fe7a 	bl	8002cc8 <_ZN13CPantallaBaseD1Ev>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	0800b520 	.word	0x0800b520
 8002fe4:	0800b5a0 	.word	0x0800b5a0

08002fe8 <_ZThn156_N15CPantallaManualD1Ev>:
	CEtiquetaTft *LabelAire;
	CEtiquetaTft *LabelEstado;

public:
	CPantallaManual(CEstacionBase *estacion);
	virtual ~CPantallaManual();
 8002fe8:	f1a0 009c 	sub.w	r0, r0, #156	@ 0x9c
 8002fec:	f7ff bfde 	b.w	8002fac <_ZN15CPantallaManualD1Ev>

08002ff0 <_ZN15CPantallaManualD0Ev>:
CPantallaManual::~CPantallaManual()
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
}
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7ff ffd7 	bl	8002fac <_ZN15CPantallaManualD1Ev>
 8002ffe:	21d4      	movs	r1, #212	@ 0xd4
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f005 f9e7 	bl	80083d4 <_ZdlPvj>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4618      	mov	r0, r3
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <_ZThn156_N15CPantallaManualD0Ev>:
 8003010:	f1a0 009c 	sub.w	r0, r0, #156	@ 0x9c
 8003014:	f7ff bfec 	b.w	8002ff0 <_ZN15CPantallaManualD0Ev>

08003018 <_ZN15CPantallaManualC1Ev>:

CPantallaManual::CPantallaManual() :
 8003018:	b590      	push	{r4, r7, lr}
 800301a:	b08d      	sub	sp, #52	@ 0x34
 800301c:	af08      	add	r7, sp, #32
 800301e:	6078      	str	r0, [r7, #4]
		CPantallaBase(1, "   Modo: Manual")
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a65      	ldr	r2, [pc, #404]	@ (80031b8 <_ZN15CPantallaManualC1Ev+0x1a0>)
 8003024:	2101      	movs	r1, #1
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff fe70 	bl	8002d0c <_ZN13CPantallaBaseC1EiPc>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	339c      	adds	r3, #156	@ 0x9c
 8003030:	4618      	mov	r0, r3
 8003032:	f001 f929 	bl	8004288 <_ZN23CManejadorControlesBaseC1Ev>
 8003036:	4a61      	ldr	r2, [pc, #388]	@ (80031bc <_ZN15CPantallaManualC1Ev+0x1a4>)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	4a60      	ldr	r2, [pc, #384]	@ (80031c0 <_ZN15CPantallaManualC1Ev+0x1a8>)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f04f 32ff 	mov.w	r2, #4294967295
 8003052:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f04f 32ff 	mov.w	r2, #4294967295
 8003064:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f04f 32ff 	mov.w	r2, #4294967295
 8003076:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f04f 32ff 	mov.w	r2, #4294967295
 8003088:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
{
	LabelTemperatura = new CEtiquetaTft( 5, 35, 50, 20, COLOR::BLACK,"Temperatura", COLOR::WHITE, 3, 0, COLOR::WHITE);
 800308c:	20a4      	movs	r0, #164	@ 0xa4
 800308e:	f005 f9a3 	bl	80083d8 <_Znwj>
 8003092:	4603      	mov	r3, r0
 8003094:	461c      	mov	r4, r3
 8003096:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800309a:	9306      	str	r3, [sp, #24]
 800309c:	2300      	movs	r3, #0
 800309e:	9305      	str	r3, [sp, #20]
 80030a0:	2303      	movs	r3, #3
 80030a2:	9304      	str	r3, [sp, #16]
 80030a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80030a8:	9303      	str	r3, [sp, #12]
 80030aa:	4b46      	ldr	r3, [pc, #280]	@ (80031c4 <_ZN15CPantallaManualC1Ev+0x1ac>)
 80030ac:	9302      	str	r3, [sp, #8]
 80030ae:	2300      	movs	r3, #0
 80030b0:	9301      	str	r3, [sp, #4]
 80030b2:	2314      	movs	r3, #20
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	2332      	movs	r3, #50	@ 0x32
 80030b8:	2223      	movs	r2, #35	@ 0x23
 80030ba:	2105      	movs	r1, #5
 80030bc:	4620      	mov	r0, r4
 80030be:	f7ff fc39 	bl	8002934 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f8c3 40c4 	str.w	r4, [r3, #196]	@ 0xc4
	int centroX = DameCentroX();
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff ff5d 	bl	8002f8a <_ZN14CRectanguloTft11DameCentroXEv>
 80030d0:	60f8      	str	r0, [r7, #12]
	LabelTemperaturas = new CEtiquetaTft( centroX - 150 / 2, 65, 150, 30,COLOR::WHITE, "000/000", COLOR::BLACK, 3, 1, COLOR::RED);
 80030d2:	20a4      	movs	r0, #164	@ 0xa4
 80030d4:	f005 f980 	bl	80083d8 <_Znwj>
 80030d8:	4603      	mov	r3, r0
 80030da:	461c      	mov	r4, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f1a3 014b 	sub.w	r1, r3, #75	@ 0x4b
 80030e2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80030e6:	9306      	str	r3, [sp, #24]
 80030e8:	2301      	movs	r3, #1
 80030ea:	9305      	str	r3, [sp, #20]
 80030ec:	2303      	movs	r3, #3
 80030ee:	9304      	str	r3, [sp, #16]
 80030f0:	2300      	movs	r3, #0
 80030f2:	9303      	str	r3, [sp, #12]
 80030f4:	4b34      	ldr	r3, [pc, #208]	@ (80031c8 <_ZN15CPantallaManualC1Ev+0x1b0>)
 80030f6:	9302      	str	r3, [sp, #8]
 80030f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80030fc:	9301      	str	r3, [sp, #4]
 80030fe:	231e      	movs	r3, #30
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	2396      	movs	r3, #150	@ 0x96
 8003104:	2241      	movs	r2, #65	@ 0x41
 8003106:	4620      	mov	r0, r4
 8003108:	f7ff fc14 	bl	8002934 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f8c3 40c8 	str.w	r4, [r3, #200]	@ 0xc8
	LabelTemperaturas->SetSeparacion(5, 5);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003118:	2205      	movs	r2, #5
 800311a:	2105      	movs	r1, #5
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff fd75 	bl	8002c0c <_ZN12CEtiquetaTft13SetSeparacionEii>
	LabelAire = new CEtiquetaTft( 5, 105, 200, 30, COLOR::BLACK, "Aire: 00",COLOR::WHITE, 3, 0, COLOR::RED);
 8003122:	20a4      	movs	r0, #164	@ 0xa4
 8003124:	f005 f958 	bl	80083d8 <_Znwj>
 8003128:	4603      	mov	r3, r0
 800312a:	461c      	mov	r4, r3
 800312c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003130:	9306      	str	r3, [sp, #24]
 8003132:	2300      	movs	r3, #0
 8003134:	9305      	str	r3, [sp, #20]
 8003136:	2303      	movs	r3, #3
 8003138:	9304      	str	r3, [sp, #16]
 800313a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800313e:	9303      	str	r3, [sp, #12]
 8003140:	4b22      	ldr	r3, [pc, #136]	@ (80031cc <_ZN15CPantallaManualC1Ev+0x1b4>)
 8003142:	9302      	str	r3, [sp, #8]
 8003144:	2300      	movs	r3, #0
 8003146:	9301      	str	r3, [sp, #4]
 8003148:	231e      	movs	r3, #30
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	23c8      	movs	r3, #200	@ 0xc8
 800314e:	2269      	movs	r2, #105	@ 0x69
 8003150:	2105      	movs	r1, #5
 8003152:	4620      	mov	r0, r4
 8003154:	f7ff fbee 	bl	8002934 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f8c3 40cc 	str.w	r4, [r3, #204]	@ 0xcc
	LabelEstado = new CEtiquetaTft( 5, 145, 300, 35, COLOR::BLACK,"Estado: REPOSO", COLOR::WHITE, 3, 0, COLOR::RED);
 800315e:	20a4      	movs	r0, #164	@ 0xa4
 8003160:	f005 f93a 	bl	80083d8 <_Znwj>
 8003164:	4603      	mov	r3, r0
 8003166:	461c      	mov	r4, r3
 8003168:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800316c:	9306      	str	r3, [sp, #24]
 800316e:	2300      	movs	r3, #0
 8003170:	9305      	str	r3, [sp, #20]
 8003172:	2303      	movs	r3, #3
 8003174:	9304      	str	r3, [sp, #16]
 8003176:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800317a:	9303      	str	r3, [sp, #12]
 800317c:	4b14      	ldr	r3, [pc, #80]	@ (80031d0 <_ZN15CPantallaManualC1Ev+0x1b8>)
 800317e:	9302      	str	r3, [sp, #8]
 8003180:	2300      	movs	r3, #0
 8003182:	9301      	str	r3, [sp, #4]
 8003184:	2323      	movs	r3, #35	@ 0x23
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800318c:	2291      	movs	r2, #145	@ 0x91
 800318e:	2105      	movs	r1, #5
 8003190:	4620      	mov	r0, r4
 8003192:	f7ff fbcf 	bl	8002934 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f8c3 40d0 	str.w	r4, [r3, #208]	@ 0xd0
	LabelEstado->SetSeparacion(15, 5);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80031a2:	2205      	movs	r2, #5
 80031a4:	210f      	movs	r1, #15
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff fd30 	bl	8002c0c <_ZN12CEtiquetaTft13SetSeparacionEii>
}
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4618      	mov	r0, r3
 80031b0:	3714      	adds	r7, #20
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd90      	pop	{r4, r7, pc}
 80031b6:	bf00      	nop
 80031b8:	0800b114 	.word	0x0800b114
 80031bc:	0800b520 	.word	0x0800b520
 80031c0:	0800b5a0 	.word	0x0800b5a0
 80031c4:	0800b124 	.word	0x0800b124
 80031c8:	0800b130 	.word	0x0800b130
 80031cc:	0800b138 	.word	0x0800b138
 80031d0:	0800b144 	.word	0x0800b144

080031d4 <_ZN15CPantallaManual11SetEstacionEP13CEstacionBase>:

void CPantallaManual::SetEstacion(CEstacionBase *estacion)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
	Estacion = estacion;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	//asigno los evetos de la estacion
	Estacion->SetManejadorControles(this);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	3328      	adds	r3, #40	@ 0x28
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	329c      	adds	r2, #156	@ 0x9c
 80031fc:	4611      	mov	r1, r2
 80031fe:	4798      	blx	r3
}
 8003200:	bf00      	nop
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <_ZN15CPantallaManual4ShowEv>:
void CPantallaManual::Show()
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
	CPantallaBase::Show();
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff fdda 	bl	8002dcc <_ZN13CPantallaBase4ShowEv>

	LabelTemperatura->Show();
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	3348      	adds	r3, #72	@ 0x48
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4610      	mov	r0, r2
 800322c:	4798      	blx	r3
	LeeDatosEstacion();
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f862 	bl	80032f8 <_ZN15CPantallaManual16LeeDatosEstacionEv>
	Refresca();
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	3354      	adds	r3, #84	@ 0x54
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	4798      	blx	r3
}
 8003240:	bf00      	nop
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <_ZN15CPantallaManual13MuestraEstadoEv>:
void CPantallaManual::MuestraEstado()
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
	if(EstadoBoquillaAnterior==EstadoBoquilla)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800325c:	429a      	cmp	r2, r3
 800325e:	d043      	beq.n	80032e8 <_ZN15CPantallaManual13MuestraEstadoEv+0xa0>
		return;
	EstadoBoquillaAnterior=EstadoBoquilla;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	if (EstadoBoquilla == 1)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003272:	2b01      	cmp	r3, #1
 8003274:	d115      	bne.n	80032a2 <_ZN15CPantallaManual13MuestraEstadoEv+0x5a>
	{
		LabelEstado->SetColorFondo(COLOR::BLUE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800327c:	211f      	movs	r1, #31
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff fe76 	bl	8002f70 <_ZN14CRectanguloTft13SetColorFondoEi>
		LabelEstado->SetColorTexto(COLOR::BLACK);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800328a:	2100      	movs	r1, #0
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff fcd0 	bl	8002c32 <_ZN12CEtiquetaTft13SetColorTextoEi>
		LabelEstado->SetTexto("Estado: ACTIVO");
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8003298:	4915      	ldr	r1, [pc, #84]	@ (80032f0 <_ZN15CPantallaManual13MuestraEstadoEv+0xa8>)
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff fb84 	bl	80029a8 <_ZN12CEtiquetaTft8SetTextoEPcz>
 80032a0:	e016      	b.n	80032d0 <_ZN15CPantallaManual13MuestraEstadoEv+0x88>
	}
	else
	{
		LabelEstado->SetColorFondo(COLOR::RED);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80032a8:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff fe5f 	bl	8002f70 <_ZN14CRectanguloTft13SetColorFondoEi>
		LabelEstado->SetColorTexto(COLOR::WHITE);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80032b8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff fcb8 	bl	8002c32 <_ZN12CEtiquetaTft13SetColorTextoEi>
		LabelEstado->SetTexto("Estado: REPOSO");
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80032c8:	490a      	ldr	r1, [pc, #40]	@ (80032f4 <_ZN15CPantallaManual13MuestraEstadoEv+0xac>)
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff fb6c 	bl	80029a8 <_ZN12CEtiquetaTft8SetTextoEPcz>
	}
	LabelEstado->Show();
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	3348      	adds	r3, #72	@ 0x48
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4610      	mov	r0, r2
 80032e4:	4798      	blx	r3
 80032e6:	e000      	b.n	80032ea <_ZN15CPantallaManual13MuestraEstadoEv+0xa2>
		return;
 80032e8:	bf00      	nop
}
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	0800b154 	.word	0x0800b154
 80032f4:	0800b144 	.word	0x0800b144

080032f8 <_ZN15CPantallaManual16LeeDatosEstacionEv>:
void CPantallaManual::LeeDatosEstacion()
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
	SetTemperatura = Estacion->GetTemperatura();
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	3310      	adds	r3, #16
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4610      	mov	r0, r2
 8003314:	4798      	blx	r3
 8003316:	4602      	mov	r2, r0
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	Temperatura = Estacion->GetTemperaturaReal();
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	3308      	adds	r3, #8
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4610      	mov	r0, r2
 8003332:	4798      	blx	r3
 8003334:	4603      	mov	r3, r0
 8003336:	4618      	mov	r0, r3
 8003338:	f7fd fdde 	bl	8000ef8 <__aeabi_f2iz>
 800333c:	4602      	mov	r2, r0
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	NivelAire = Estacion->GetNivelAire();
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	3318      	adds	r3, #24
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4610      	mov	r0, r2
 8003358:	4798      	blx	r3
 800335a:	4602      	mov	r2, r0
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8003362:	bf00      	nop
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <_ZN15CPantallaManual18OnTemperaturaEventEi>:
void CPantallaManual::OnTemperaturaEvent(int temperatura)
{
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
 8003372:	6039      	str	r1, [r7, #0]
	SetTemperatura = temperatura;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
//	MuestraTemperaturas();
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	bc80      	pop	{r7}
 8003384:	4770      	bx	lr

08003386 <_ZThn156_N15CPantallaManual18OnTemperaturaEventEi>:

private:
	void MuestraEstado();
	void MuestraNivelAire();
	void LeeDatosEstacion();
	virtual void OnTemperaturaEvent(int temperatura);
 8003386:	f1a0 009c 	sub.w	r0, r0, #156	@ 0x9c
 800338a:	f7ff bfee 	b.w	800336a <_ZN15CPantallaManual18OnTemperaturaEventEi>
	...

08003390 <_ZN15CPantallaManual19MuestraTemperaturasEv>:
void CPantallaManual::MuestraTemperaturas()
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
	if(TemperaturaAnterior==Temperatura &&SetTemperaturaAnterior==SetTemperatura)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d107      	bne.n	80033b8 <_ZN15CPantallaManual19MuestraTemperaturasEv+0x28>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d023      	beq.n	8003400 <_ZN15CPantallaManual19MuestraTemperaturasEv+0x70>
		return;
	TemperaturaAnterior=Temperatura;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	SetTemperaturaAnterior=SetTemperatura;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	LabelTemperaturas->SetTexto("%d/%d", Temperatura, SetTemperatura);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80033e2:	4909      	ldr	r1, [pc, #36]	@ (8003408 <_ZN15CPantallaManual19MuestraTemperaturasEv+0x78>)
 80033e4:	f7ff fae0 	bl	80029a8 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelTemperaturas->Show();
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	3348      	adds	r3, #72	@ 0x48
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4610      	mov	r0, r2
 80033fc:	4798      	blx	r3
 80033fe:	e000      	b.n	8003402 <_ZN15CPantallaManual19MuestraTemperaturasEv+0x72>
		return;
 8003400:	bf00      	nop
}
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	0800b164 	.word	0x0800b164

0800340c <_ZN15CPantallaManual16OnNivelAireEventEi>:
void CPantallaManual::OnNivelAireEvent(int aire)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
	NivelAire = aire;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	Estacion->SetNivelAire(NivelAire);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	3314      	adds	r3, #20
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	f8d2 20b0 	ldr.w	r2, [r2, #176]	@ 0xb0
 8003436:	4611      	mov	r1, r2
 8003438:	4798      	blx	r3
}
 800343a:	bf00      	nop
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <_ZThn156_N15CPantallaManual16OnNivelAireEventEi>:
	void MuestraTemperaturas();
	void OnNivelAireEvent(int aire);
 8003442:	f1a0 009c 	sub.w	r0, r0, #156	@ 0x9c
 8003446:	f7ff bfe1 	b.w	800340c <_ZN15CPantallaManual16OnNivelAireEventEi>
	...

0800344c <_ZN15CPantallaManual16MuestraNivelAireEv>:
void CPantallaManual::MuestraNivelAire()
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
	if(NivelAireAnterior==NivelAire)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003460:	429a      	cmp	r2, r3
 8003462:	d01b      	beq.n	800349c <_ZN15CPantallaManual16MuestraNivelAireEv+0x50>
		return;
	NivelAireAnterior=NivelAire;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	LabelAire->SetTexto("Aire: %d", NivelAire);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800347c:	461a      	mov	r2, r3
 800347e:	4909      	ldr	r1, [pc, #36]	@ (80034a4 <_ZN15CPantallaManual16MuestraNivelAireEv+0x58>)
 8003480:	f7ff fa92 	bl	80029a8 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelAire->Show();
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	3348      	adds	r3, #72	@ 0x48
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4610      	mov	r0, r2
 8003498:	4798      	blx	r3
 800349a:	e000      	b.n	800349e <_ZN15CPantallaManual16MuestraNivelAireEv+0x52>
		return;
 800349c:	bf00      	nop

}
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	0800b16c 	.word	0x0800b16c

080034a8 <_ZN15CPantallaManual22OnTemperaturaRealEventEi>:
void CPantallaManual::OnTemperaturaRealEvent(int temperatura)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
	Temperatura = temperatura;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
//	MuestraTemperaturas();
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr

080034c4 <_ZThn156_N15CPantallaManual22OnTemperaturaRealEventEi>:
	virtual void OnTemperaturaRealEvent(int temperatura);
 80034c4:	f1a0 009c 	sub.w	r0, r0, #156	@ 0x9c
 80034c8:	f7ff bfee 	b.w	80034a8 <_ZN15CPantallaManual22OnTemperaturaRealEventEi>

080034cc <_ZN15CPantallaManual20OnBotonDosClickEventEi>:

void CPantallaManual::OnBotonDosClickEvent(int tiempoClick)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
//    AdmiinstradorPantallasBase->ShowMenuPrincipal();
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	bc80      	pop	{r7}
 80034de:	4770      	bx	lr

080034e0 <_ZThn156_N15CPantallaManual20OnBotonDosClickEventEi>:
	virtual void OnBotonDosClickEvent(int tiempoClick);
 80034e0:	f1a0 009c 	sub.w	r0, r0, #156	@ 0x9c
 80034e4:	f7ff bff2 	b.w	80034cc <_ZN15CPantallaManual20OnBotonDosClickEventEi>

080034e8 <_ZN15CPantallaManual19OnPerillaIncrementoEv>:

//eventos del Encoder
void CPantallaManual::OnPerillaIncremento()
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
	Estacion->IncrementaTemperatura();
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	3320      	adds	r3, #32
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4610      	mov	r0, r2
 8003504:	4798      	blx	r3
}
 8003506:	bf00      	nop
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <_ZThn156_N15CPantallaManual19OnPerillaIncrementoEv>:

	//eventos del Encoder
	virtual void OnPerillaIncremento();
 800350e:	f1a0 009c 	sub.w	r0, r0, #156	@ 0x9c
 8003512:	f7ff bfe9 	b.w	80034e8 <_ZN15CPantallaManual19OnPerillaIncrementoEv>

08003516 <_ZN15CPantallaManual19OnPerillaDecrementoEv>:
void CPantallaManual::OnPerillaDecremento()
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b082      	sub	sp, #8
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
	Estacion->DecrementaTemperatura();
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	3324      	adds	r3, #36	@ 0x24
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4610      	mov	r0, r2
 8003532:	4798      	blx	r3
}
 8003534:	bf00      	nop
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <_ZThn156_N15CPantallaManual19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 800353c:	f1a0 009c 	sub.w	r0, r0, #156	@ 0x9c
 8003540:	f7ff bfe9 	b.w	8003516 <_ZN15CPantallaManual19OnPerillaDecrementoEv>

08003544 <_ZN15CPantallaManual24OnBotonPerillaClickEventEi>:
void CPantallaManual::OnBotonPerillaClickEvent(int tiempoClick)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
//	Serial.println("Hola");
	if (EstadoBoquilla == 1)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003554:	2b01      	cmp	r3, #1
 8003556:	d104      	bne.n	8003562 <_ZN15CPantallaManual24OnBotonPerillaClickEventEi+0x1e>
		EstadoBoquilla = 0;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8003560:	e003      	b.n	800356a <_ZN15CPantallaManual24OnBotonPerillaClickEventEi+0x26>
	else
		EstadoBoquilla = 1;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	MuestraEstado();
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7ff fe6c 	bl	8003248 <_ZN15CPantallaManual13MuestraEstadoEv>
}
 8003570:	bf00      	nop
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <_ZThn156_N15CPantallaManual24OnBotonPerillaClickEventEi>:
	virtual void OnBotonPerillaClickEvent(int tiempoClick);
 8003578:	f1a0 009c 	sub.w	r0, r0, #156	@ 0x9c
 800357c:	f7ff bfe2 	b.w	8003544 <_ZN15CPantallaManual24OnBotonPerillaClickEventEi>

08003580 <_ZN15CPantallaManual8RefrescaEv>:
void CPantallaManual::Refresca()
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
	LeeDatosEstacion();
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f7ff feb5 	bl	80032f8 <_ZN15CPantallaManual16LeeDatosEstacionEv>
	MuestraTemperaturas();
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7ff fefe 	bl	8003390 <_ZN15CPantallaManual19MuestraTemperaturasEv>
	MuestraEstado();
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7ff fe57 	bl	8003248 <_ZN15CPantallaManual13MuestraEstadoEv>
	MuestraNivelAire();
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7ff ff56 	bl	800344c <_ZN15CPantallaManual16MuestraNivelAireEv>
}
 80035a0:	bf00      	nop
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt>:
}

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1,
		uint16_t Y1, uint16_t Colour)
{
 80035a8:	b590      	push	{r4, r7, lr}
 80035aa:	b087      	sub	sp, #28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4604      	mov	r4, r0
 80035b0:	4608      	mov	r0, r1
 80035b2:	4611      	mov	r1, r2
 80035b4:	461a      	mov	r2, r3
 80035b6:	4623      	mov	r3, r4
 80035b8:	80fb      	strh	r3, [r7, #6]
 80035ba:	4603      	mov	r3, r0
 80035bc:	80bb      	strh	r3, [r7, #4]
 80035be:	460b      	mov	r3, r1
 80035c0:	807b      	strh	r3, [r7, #2]
 80035c2:	4613      	mov	r3, r2
 80035c4:	803b      	strh	r3, [r7, #0]
	uint16_t X_length = 0;
 80035c6:	2300      	movs	r3, #0
 80035c8:	82fb      	strh	r3, [r7, #22]
	uint16_t Y_length = 0;
 80035ca:	2300      	movs	r3, #0
 80035cc:	82bb      	strh	r3, [r7, #20]
	uint8_t Negative_X = 0;
 80035ce:	2300      	movs	r3, #0
 80035d0:	74fb      	strb	r3, [r7, #19]
	uint8_t Negative_Y = 0;
 80035d2:	2300      	movs	r3, #0
 80035d4:	74bb      	strb	r3, [r7, #18]
	float Calc_Negative = 0;
 80035d6:	f04f 0300 	mov.w	r3, #0
 80035da:	60fb      	str	r3, [r7, #12]

	Calc_Negative = X1 - X0;
 80035dc:	887a      	ldrh	r2, [r7, #2]
 80035de:	88fb      	ldrh	r3, [r7, #6]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fd fbbe 	bl	8000d64 <__aeabi_i2f>
 80035e8:	4603      	mov	r3, r0
 80035ea:	60fb      	str	r3, [r7, #12]
	if (Calc_Negative < 0)
 80035ec:	f04f 0100 	mov.w	r1, #0
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f7fd fc59 	bl	8000ea8 <__aeabi_fcmplt>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x58>
		Negative_X = 1;
 80035fc:	2301      	movs	r3, #1
 80035fe:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8003600:	f04f 0300 	mov.w	r3, #0
 8003604:	60fb      	str	r3, [r7, #12]

	Calc_Negative = Y1 - Y0;
 8003606:	883a      	ldrh	r2, [r7, #0]
 8003608:	88bb      	ldrh	r3, [r7, #4]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	4618      	mov	r0, r3
 800360e:	f7fd fba9 	bl	8000d64 <__aeabi_i2f>
 8003612:	4603      	mov	r3, r0
 8003614:	60fb      	str	r3, [r7, #12]
	if (Calc_Negative < 0)
 8003616:	f04f 0100 	mov.w	r1, #0
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f7fd fc44 	bl	8000ea8 <__aeabi_fcmplt>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x82>
		Negative_Y = 1;
 8003626:	2301      	movs	r3, #1
 8003628:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if (!Negative_X)
 800362a:	7cfb      	ldrb	r3, [r7, #19]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d104      	bne.n	800363a <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x92>
	{
		X_length = X1 - X0;
 8003630:	887a      	ldrh	r2, [r7, #2]
 8003632:	88fb      	ldrh	r3, [r7, #6]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	82fb      	strh	r3, [r7, #22]
 8003638:	e003      	b.n	8003642 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x9a>
	}
	else
	{
		X_length = X0 - X1;
 800363a:	88fa      	ldrh	r2, [r7, #6]
 800363c:	887b      	ldrh	r3, [r7, #2]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 8003642:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003644:	8afa      	ldrh	r2, [r7, #22]
 8003646:	88b9      	ldrh	r1, [r7, #4]
 8003648:	88f8      	ldrh	r0, [r7, #6]
 800364a:	f000 fd81 	bl	8004150 <_Z28ILI9341_Draw_Horizontal_Linetttt>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 800364e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003650:	8afa      	ldrh	r2, [r7, #22]
 8003652:	8839      	ldrh	r1, [r7, #0]
 8003654:	88f8      	ldrh	r0, [r7, #6]
 8003656:	f000 fd7b 	bl	8004150 <_Z28ILI9341_Draw_Horizontal_Linetttt>

	//DRAW VERTICAL!
	if (!Negative_Y)
 800365a:	7cbb      	ldrb	r3, [r7, #18]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d104      	bne.n	800366a <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xc2>
	{
		Y_length = Y1 - Y0;
 8003660:	883a      	ldrh	r2, [r7, #0]
 8003662:	88bb      	ldrh	r3, [r7, #4]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	82bb      	strh	r3, [r7, #20]
 8003668:	e003      	b.n	8003672 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xca>
	}
	else
	{
		Y_length = Y0 - Y1;
 800366a:	88ba      	ldrh	r2, [r7, #4]
 800366c:	883b      	ldrh	r3, [r7, #0]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	82bb      	strh	r3, [r7, #20]
	}
	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 8003672:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003674:	8aba      	ldrh	r2, [r7, #20]
 8003676:	88b9      	ldrh	r1, [r7, #4]
 8003678:	88f8      	ldrh	r0, [r7, #6]
 800367a:	f000 fdb7 	bl	80041ec <_Z26ILI9341_Draw_Vertical_Linetttt>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 800367e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003680:	8aba      	ldrh	r2, [r7, #20]
 8003682:	88b9      	ldrh	r1, [r7, #4]
 8003684:	8878      	ldrh	r0, [r7, #2]
 8003686:	f000 fdb1 	bl	80041ec <_Z26ILI9341_Draw_Vertical_Linetttt>

	if ((X_length > 0) || (Y_length > 0))
 800368a:	8afb      	ldrh	r3, [r7, #22]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d102      	bne.n	8003696 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xee>
 8003690:	8abb      	ldrh	r3, [r7, #20]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d005      	beq.n	80036a2 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xfa>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 8003696:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003698:	8839      	ldrh	r1, [r7, #0]
 800369a:	887b      	ldrh	r3, [r7, #2]
 800369c:	4618      	mov	r0, r3
 800369e:	f000 fc21 	bl	8003ee4 <_Z18ILI9341_Draw_Pixelttt>
	}

}
 80036a2:	bf00      	nop
 80036a4:	371c      	adds	r7, #28
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd90      	pop	{r4, r7, pc}

080036aa <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt>:

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1,
		uint16_t Y1, uint16_t Colour)
{
 80036aa:	b590      	push	{r4, r7, lr}
 80036ac:	b089      	sub	sp, #36	@ 0x24
 80036ae:	af02      	add	r7, sp, #8
 80036b0:	4604      	mov	r4, r0
 80036b2:	4608      	mov	r0, r1
 80036b4:	4611      	mov	r1, r2
 80036b6:	461a      	mov	r2, r3
 80036b8:	4623      	mov	r3, r4
 80036ba:	80fb      	strh	r3, [r7, #6]
 80036bc:	4603      	mov	r3, r0
 80036be:	80bb      	strh	r3, [r7, #4]
 80036c0:	460b      	mov	r3, r1
 80036c2:	807b      	strh	r3, [r7, #2]
 80036c4:	4613      	mov	r3, r2
 80036c6:	803b      	strh	r3, [r7, #0]
	uint16_t X_length = 0;
 80036c8:	2300      	movs	r3, #0
 80036ca:	82fb      	strh	r3, [r7, #22]
	uint16_t Y_length = 0;
 80036cc:	2300      	movs	r3, #0
 80036ce:	82bb      	strh	r3, [r7, #20]
	uint8_t Negative_X = 0;
 80036d0:	2300      	movs	r3, #0
 80036d2:	74fb      	strb	r3, [r7, #19]
	uint8_t Negative_Y = 0;
 80036d4:	2300      	movs	r3, #0
 80036d6:	74bb      	strb	r3, [r7, #18]
	int32_t Calc_Negative = 0;
 80036d8:	2300      	movs	r3, #0
 80036da:	60bb      	str	r3, [r7, #8]

	uint16_t X0_true = 0;
 80036dc:	2300      	movs	r3, #0
 80036de:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 80036e0:	2300      	movs	r3, #0
 80036e2:	81fb      	strh	r3, [r7, #14]

	Calc_Negative = X1 - X0;
 80036e4:	887a      	ldrh	r2, [r7, #2]
 80036e6:	88fb      	ldrh	r3, [r7, #6]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	60bb      	str	r3, [r7, #8]
	if (Calc_Negative < 0)
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	da01      	bge.n	80036f6 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x4c>
		Negative_X = 1;
 80036f2:	2301      	movs	r3, #1
 80036f4:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 80036f6:	2300      	movs	r3, #0
 80036f8:	60bb      	str	r3, [r7, #8]

	Calc_Negative = Y1 - Y0;
 80036fa:	883a      	ldrh	r2, [r7, #0]
 80036fc:	88bb      	ldrh	r3, [r7, #4]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	60bb      	str	r3, [r7, #8]
	if (Calc_Negative < 0)
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	da01      	bge.n	800370c <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x62>
		Negative_Y = 1;
 8003708:	2301      	movs	r3, #1
 800370a:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if (!Negative_X)
 800370c:	7cfb      	ldrb	r3, [r7, #19]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d106      	bne.n	8003720 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x76>
	{
		X_length = X1 - X0;
 8003712:	887a      	ldrh	r2, [r7, #2]
 8003714:	88fb      	ldrh	r3, [r7, #6]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 800371a:	88fb      	ldrh	r3, [r7, #6]
 800371c:	823b      	strh	r3, [r7, #16]
 800371e:	e005      	b.n	800372c <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8003720:	88fa      	ldrh	r2, [r7, #6]
 8003722:	887b      	ldrh	r3, [r7, #2]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8003728:	887b      	ldrh	r3, [r7, #2]
 800372a:	823b      	strh	r3, [r7, #16]
	}

	//DRAW VERTICAL!
	if (!Negative_Y)
 800372c:	7cbb      	ldrb	r3, [r7, #18]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d106      	bne.n	8003740 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x96>
	{
		Y_length = Y1 - Y0;
 8003732:	883a      	ldrh	r2, [r7, #0]
 8003734:	88bb      	ldrh	r3, [r7, #4]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;
 800373a:	88bb      	ldrh	r3, [r7, #4]
 800373c:	81fb      	strh	r3, [r7, #14]
 800373e:	e005      	b.n	800374c <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 8003740:	88ba      	ldrh	r2, [r7, #4]
 8003742:	883b      	ldrh	r3, [r7, #0]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;
 8003748:	883b      	ldrh	r3, [r7, #0]
 800374a:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);
 800374c:	8abc      	ldrh	r4, [r7, #20]
 800374e:	8afa      	ldrh	r2, [r7, #22]
 8003750:	89f9      	ldrh	r1, [r7, #14]
 8003752:	8a38      	ldrh	r0, [r7, #16]
 8003754:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	4623      	mov	r3, r4
 800375a:	f000 fc8f 	bl	800407c <_Z22ILI9341_Draw_Rectanglettttt>
}
 800375e:	bf00      	nop
 8003760:	371c      	adds	r7, #28
 8003762:	46bd      	mov	sp, r7
 8003764:	bd90      	pop	{r4, r7, pc}
	...

08003768 <_Z17ILI9341_Draw_Charchhttt>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour)
{
 8003768:	b590      	push	{r4, r7, lr}
 800376a:	b089      	sub	sp, #36	@ 0x24
 800376c:	af02      	add	r7, sp, #8
 800376e:	4604      	mov	r4, r0
 8003770:	4608      	mov	r0, r1
 8003772:	4611      	mov	r1, r2
 8003774:	461a      	mov	r2, r3
 8003776:	4623      	mov	r3, r4
 8003778:	71fb      	strb	r3, [r7, #7]
 800377a:	4603      	mov	r3, r0
 800377c:	71bb      	strb	r3, [r7, #6]
 800377e:	460b      	mov	r3, r1
 8003780:	717b      	strb	r3, [r7, #5]
 8003782:	4613      	mov	r3, r2
 8003784:	807b      	strh	r3, [r7, #2]
	uint8_t function_char;
	uint8_t i, j;

	function_char = Character;
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	75fb      	strb	r3, [r7, #23]

	if (function_char < ' ')
 800378a:	7dfb      	ldrb	r3, [r7, #23]
 800378c:	2b1f      	cmp	r3, #31
 800378e:	d802      	bhi.n	8003796 <_Z17ILI9341_Draw_Charchhttt+0x2e>
	{
		Character = 0;
 8003790:	2300      	movs	r3, #0
 8003792:	71fb      	strb	r3, [r7, #7]
 8003794:	e002      	b.n	800379c <_Z17ILI9341_Draw_Charchhttt+0x34>
	}
	else
	{
		function_char -= 32;
 8003796:	7dfb      	ldrb	r3, [r7, #23]
 8003798:	3b20      	subs	r3, #32
 800379a:	75fb      	strb	r3, [r7, #23]
	}

	char temp[CHAR_WIDTH];
	for (uint8_t k = 0; k < CHAR_WIDTH; k++)
 800379c:	2300      	movs	r3, #0
 800379e:	753b      	strb	r3, [r7, #20]
 80037a0:	e012      	b.n	80037c8 <_Z17ILI9341_Draw_Charchhttt+0x60>
	{
		temp[k] = font[function_char][k];
 80037a2:	7dfa      	ldrb	r2, [r7, #23]
 80037a4:	7d38      	ldrb	r0, [r7, #20]
 80037a6:	7d39      	ldrb	r1, [r7, #20]
 80037a8:	4c3b      	ldr	r4, [pc, #236]	@ (8003898 <_Z17ILI9341_Draw_Charchhttt+0x130>)
 80037aa:	4613      	mov	r3, r2
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	4413      	add	r3, r2
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	4423      	add	r3, r4
 80037b4:	4403      	add	r3, r0
 80037b6:	781a      	ldrb	r2, [r3, #0]
 80037b8:	f101 0318 	add.w	r3, r1, #24
 80037bc:	443b      	add	r3, r7
 80037be:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t k = 0; k < CHAR_WIDTH; k++)
 80037c2:	7d3b      	ldrb	r3, [r7, #20]
 80037c4:	3301      	adds	r3, #1
 80037c6:	753b      	strb	r3, [r7, #20]
 80037c8:	7d3b      	ldrb	r3, [r7, #20]
 80037ca:	2b05      	cmp	r3, #5
 80037cc:	d9e9      	bls.n	80037a2 <_Z17ILI9341_Draw_Charchhttt+0x3a>
	}

	// Draw pixels
	ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH * Size, CHAR_HEIGHT * Size,
 80037ce:	79bb      	ldrb	r3, [r7, #6]
 80037d0:	b298      	uxth	r0, r3
 80037d2:	797b      	ldrb	r3, [r7, #5]
 80037d4:	b299      	uxth	r1, r3
 80037d6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80037d8:	461a      	mov	r2, r3
 80037da:	0052      	lsls	r2, r2, #1
 80037dc:	4413      	add	r3, r2
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	b29c      	uxth	r4, r3
 80037e8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	4623      	mov	r3, r4
 80037ee:	f000 fc45 	bl	800407c <_Z22ILI9341_Draw_Rectanglettttt>
			Background_Colour);
	for (j = 0; j < CHAR_WIDTH; j++)
 80037f2:	2300      	movs	r3, #0
 80037f4:	757b      	strb	r3, [r7, #21]
 80037f6:	e047      	b.n	8003888 <_Z17ILI9341_Draw_Charchhttt+0x120>
	{
		for (i = 0; i < CHAR_HEIGHT; i++)
 80037f8:	2300      	movs	r3, #0
 80037fa:	75bb      	strb	r3, [r7, #22]
 80037fc:	e03e      	b.n	800387c <_Z17ILI9341_Draw_Charchhttt+0x114>
		{
			if (temp[j] & (1 << i))
 80037fe:	7d7b      	ldrb	r3, [r7, #21]
 8003800:	3318      	adds	r3, #24
 8003802:	443b      	add	r3, r7
 8003804:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003808:	461a      	mov	r2, r3
 800380a:	7dbb      	ldrb	r3, [r7, #22]
 800380c:	fa42 f303 	asr.w	r3, r2, r3
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	d02e      	beq.n	8003876 <_Z17ILI9341_Draw_Charchhttt+0x10e>
			{
				if (Size == 1)
 8003818:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800381a:	2b01      	cmp	r3, #1
 800381c:	d110      	bne.n	8003840 <_Z17ILI9341_Draw_Charchhttt+0xd8>
				{
					ILI9341_Draw_Pixel(X + j, Y + i, Colour);
 800381e:	79bb      	ldrb	r3, [r7, #6]
 8003820:	b29a      	uxth	r2, r3
 8003822:	7d7b      	ldrb	r3, [r7, #21]
 8003824:	b29b      	uxth	r3, r3
 8003826:	4413      	add	r3, r2
 8003828:	b298      	uxth	r0, r3
 800382a:	797b      	ldrb	r3, [r7, #5]
 800382c:	b29a      	uxth	r2, r3
 800382e:	7dbb      	ldrb	r3, [r7, #22]
 8003830:	b29b      	uxth	r3, r3
 8003832:	4413      	add	r3, r2
 8003834:	b29b      	uxth	r3, r3
 8003836:	887a      	ldrh	r2, [r7, #2]
 8003838:	4619      	mov	r1, r3
 800383a:	f000 fb53 	bl	8003ee4 <_Z18ILI9341_Draw_Pixelttt>
 800383e:	e01a      	b.n	8003876 <_Z17ILI9341_Draw_Charchhttt+0x10e>
				}
				else
				{
					ILI9341_Draw_Rectangle(X + (j * Size), Y + (i * Size), Size,
 8003840:	79bb      	ldrb	r3, [r7, #6]
 8003842:	b29a      	uxth	r2, r3
 8003844:	7d7b      	ldrb	r3, [r7, #21]
 8003846:	b29b      	uxth	r3, r3
 8003848:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 800384a:	fb01 f303 	mul.w	r3, r1, r3
 800384e:	b29b      	uxth	r3, r3
 8003850:	4413      	add	r3, r2
 8003852:	b298      	uxth	r0, r3
 8003854:	797b      	ldrb	r3, [r7, #5]
 8003856:	b29a      	uxth	r2, r3
 8003858:	7dbb      	ldrb	r3, [r7, #22]
 800385a:	b29b      	uxth	r3, r3
 800385c:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 800385e:	fb01 f303 	mul.w	r3, r1, r3
 8003862:	b29b      	uxth	r3, r3
 8003864:	4413      	add	r3, r2
 8003866:	b299      	uxth	r1, r3
 8003868:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 800386a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800386c:	887b      	ldrh	r3, [r7, #2]
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	4623      	mov	r3, r4
 8003872:	f000 fc03 	bl	800407c <_Z22ILI9341_Draw_Rectanglettttt>
		for (i = 0; i < CHAR_HEIGHT; i++)
 8003876:	7dbb      	ldrb	r3, [r7, #22]
 8003878:	3301      	adds	r3, #1
 800387a:	75bb      	strb	r3, [r7, #22]
 800387c:	7dbb      	ldrb	r3, [r7, #22]
 800387e:	2b07      	cmp	r3, #7
 8003880:	d9bd      	bls.n	80037fe <_Z17ILI9341_Draw_Charchhttt+0x96>
	for (j = 0; j < CHAR_WIDTH; j++)
 8003882:	7d7b      	ldrb	r3, [r7, #21]
 8003884:	3301      	adds	r3, #1
 8003886:	757b      	strb	r3, [r7, #21]
 8003888:	7d7b      	ldrb	r3, [r7, #21]
 800388a:	2b05      	cmp	r3, #5
 800388c:	d9b4      	bls.n	80037f8 <_Z17ILI9341_Draw_Charchhttt+0x90>
							Size, Colour);
				}
			}
		}
	}
}
 800388e:	bf00      	nop
 8003890:	bf00      	nop
 8003892:	371c      	adds	r7, #28
 8003894:	46bd      	mov	sp, r7
 8003896:	bd90      	pop	{r4, r7, pc}
 8003898:	0800b60c 	.word	0x0800b60c

0800389c <_Z17ILI9341_Draw_TextPKchhttt>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char *Text, uint8_t X, uint8_t Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour)
{
 800389c:	b590      	push	{r4, r7, lr}
 800389e:	b085      	sub	sp, #20
 80038a0:	af02      	add	r7, sp, #8
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	4608      	mov	r0, r1
 80038a6:	4611      	mov	r1, r2
 80038a8:	461a      	mov	r2, r3
 80038aa:	4603      	mov	r3, r0
 80038ac:	70fb      	strb	r3, [r7, #3]
 80038ae:	460b      	mov	r3, r1
 80038b0:	70bb      	strb	r3, [r7, #2]
 80038b2:	4613      	mov	r3, r2
 80038b4:	803b      	strh	r3, [r7, #0]
	while (*Text)
 80038b6:	e017      	b.n	80038e8 <_Z17ILI9341_Draw_TextPKchhttt+0x4c>
	{
		ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	1c5a      	adds	r2, r3, #1
 80038bc:	607a      	str	r2, [r7, #4]
 80038be:	7818      	ldrb	r0, [r3, #0]
 80038c0:	883c      	ldrh	r4, [r7, #0]
 80038c2:	78ba      	ldrb	r2, [r7, #2]
 80038c4:	78f9      	ldrb	r1, [r7, #3]
 80038c6:	8bbb      	ldrh	r3, [r7, #28]
 80038c8:	9301      	str	r3, [sp, #4]
 80038ca:	8b3b      	ldrh	r3, [r7, #24]
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	4623      	mov	r3, r4
 80038d0:	f7ff ff4a 	bl	8003768 <_Z17ILI9341_Draw_Charchhttt>
		X += CHAR_WIDTH * Size;
 80038d4:	8b3b      	ldrh	r3, [r7, #24]
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	461a      	mov	r2, r3
 80038da:	0052      	lsls	r2, r2, #1
 80038dc:	4413      	add	r3, r2
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	78fb      	ldrb	r3, [r7, #3]
 80038e4:	4413      	add	r3, r2
 80038e6:	70fb      	strb	r3, [r7, #3]
	while (*Text)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1e3      	bne.n	80038b8 <_Z17ILI9341_Draw_TextPKchhttt+0x1c>
	}
}
 80038f0:	bf00      	nop
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd90      	pop	{r4, r7, pc}
	...

080038fc <_Z16ILI9341_SPI_Initv>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
	SPI1_Init();													//SPI INIT
 8003900:	f001 fcd0 	bl	80052a4 <SPI1_Init>
	MX_GPIO_Init();													//GPIO INIT
 8003904:	f001 f906 	bl	8004b14 <MX_GPIO_Init>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8003908:	2200      	movs	r2, #0
 800390a:	2101      	movs	r1, #1
 800390c:	4802      	ldr	r0, [pc, #8]	@ (8003918 <_Z16ILI9341_SPI_Initv+0x1c>)
 800390e:	f002 fdba 	bl	8006486 <HAL_GPIO_WritePin>
}
 8003912:	bf00      	nop
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	40010c00 	.word	0x40010c00

0800391c <_Z16ILI9341_SPI_Sendh>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	4603      	mov	r3, r0
 8003924:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8003926:	1df9      	adds	r1, r7, #7
 8003928:	2301      	movs	r3, #1
 800392a:	2201      	movs	r2, #1
 800392c:	4803      	ldr	r0, [pc, #12]	@ (800393c <_Z16ILI9341_SPI_Sendh+0x20>)
 800392e:	f003 fb25 	bl	8006f7c <HAL_SPI_Transmit>
}
 8003932:	bf00      	nop
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	200003a4 	.word	0x200003a4

08003940 <_Z21ILI9341_Write_Commandh>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	4603      	mov	r3, r0
 8003948:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800394a:	2200      	movs	r2, #0
 800394c:	2101      	movs	r1, #1
 800394e:	480a      	ldr	r0, [pc, #40]	@ (8003978 <_Z21ILI9341_Write_Commandh+0x38>)
 8003950:	f002 fd99 	bl	8006486 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8003954:	2200      	movs	r2, #0
 8003956:	2102      	movs	r1, #2
 8003958:	4807      	ldr	r0, [pc, #28]	@ (8003978 <_Z21ILI9341_Write_Commandh+0x38>)
 800395a:	f002 fd94 	bl	8006486 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Command);
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff ffdb 	bl	800391c <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003966:	2201      	movs	r2, #1
 8003968:	2101      	movs	r1, #1
 800396a:	4803      	ldr	r0, [pc, #12]	@ (8003978 <_Z21ILI9341_Write_Commandh+0x38>)
 800396c:	f002 fd8b 	bl	8006486 <HAL_GPIO_WritePin>
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40010c00 	.word	0x40010c00

0800397c <_Z18ILI9341_Write_Datah>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	4603      	mov	r3, r0
 8003984:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8003986:	2201      	movs	r2, #1
 8003988:	2102      	movs	r1, #2
 800398a:	480a      	ldr	r0, [pc, #40]	@ (80039b4 <_Z18ILI9341_Write_Datah+0x38>)
 800398c:	f002 fd7b 	bl	8006486 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003990:	2200      	movs	r2, #0
 8003992:	2101      	movs	r1, #1
 8003994:	4807      	ldr	r0, [pc, #28]	@ (80039b4 <_Z18ILI9341_Write_Datah+0x38>)
 8003996:	f002 fd76 	bl	8006486 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Data);
 800399a:	79fb      	ldrb	r3, [r7, #7]
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff ffbd 	bl	800391c <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80039a2:	2201      	movs	r2, #1
 80039a4:	2101      	movs	r1, #1
 80039a6:	4803      	ldr	r0, [pc, #12]	@ (80039b4 <_Z18ILI9341_Write_Datah+0x38>)
 80039a8:	f002 fd6d 	bl	8006486 <HAL_GPIO_WritePin>
}
 80039ac:	bf00      	nop
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40010c00 	.word	0x40010c00

080039b8 <_Z19ILI9341_Set_Addresstttt>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80039b8:	b590      	push	{r4, r7, lr}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	4604      	mov	r4, r0
 80039c0:	4608      	mov	r0, r1
 80039c2:	4611      	mov	r1, r2
 80039c4:	461a      	mov	r2, r3
 80039c6:	4623      	mov	r3, r4
 80039c8:	80fb      	strh	r3, [r7, #6]
 80039ca:	4603      	mov	r3, r0
 80039cc:	80bb      	strh	r3, [r7, #4]
 80039ce:	460b      	mov	r3, r1
 80039d0:	807b      	strh	r3, [r7, #2]
 80039d2:	4613      	mov	r3, r2
 80039d4:	803b      	strh	r3, [r7, #0]
	ILI9341_Write_Command(0x2A);
 80039d6:	202a      	movs	r0, #42	@ 0x2a
 80039d8:	f7ff ffb2 	bl	8003940 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(X1 >> 8);
 80039dc:	88fb      	ldrh	r3, [r7, #6]
 80039de:	0a1b      	lsrs	r3, r3, #8
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff ffc9 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(X1);
 80039ea:	88fb      	ldrh	r3, [r7, #6]
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff ffc4 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(X2 >> 8);
 80039f4:	887b      	ldrh	r3, [r7, #2]
 80039f6:	0a1b      	lsrs	r3, r3, #8
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff ffbd 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(X2);
 8003a02:	887b      	ldrh	r3, [r7, #2]
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff ffb8 	bl	800397c <_Z18ILI9341_Write_Datah>

	ILI9341_Write_Command(0x2B);
 8003a0c:	202b      	movs	r0, #43	@ 0x2b
 8003a0e:	f7ff ff97 	bl	8003940 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(Y1 >> 8);
 8003a12:	88bb      	ldrh	r3, [r7, #4]
 8003a14:	0a1b      	lsrs	r3, r3, #8
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7ff ffae 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(Y1);
 8003a20:	88bb      	ldrh	r3, [r7, #4]
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7ff ffa9 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(Y2 >> 8);
 8003a2a:	883b      	ldrh	r3, [r7, #0]
 8003a2c:	0a1b      	lsrs	r3, r3, #8
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff ffa2 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(Y2);
 8003a38:	883b      	ldrh	r3, [r7, #0]
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff ff9d 	bl	800397c <_Z18ILI9341_Write_Datah>

	ILI9341_Write_Command(0x2C);
 8003a42:	202c      	movs	r0, #44	@ 0x2c
 8003a44:	f7ff ff7c 	bl	8003940 <_Z21ILI9341_Write_Commandh>
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd90      	pop	{r4, r7, pc}

08003a50 <_Z13ILI9341_Resetv>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8003a54:	2201      	movs	r2, #1
 8003a56:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003a5a:	480b      	ldr	r0, [pc, #44]	@ (8003a88 <_Z13ILI9341_Resetv+0x38>)
 8003a5c:	f002 fd13 	bl	8006486 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8003a60:	20c8      	movs	r0, #200	@ 0xc8
 8003a62:	f001 ff1d 	bl	80058a0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003a66:	2200      	movs	r2, #0
 8003a68:	2101      	movs	r1, #1
 8003a6a:	4807      	ldr	r0, [pc, #28]	@ (8003a88 <_Z13ILI9341_Resetv+0x38>)
 8003a6c:	f002 fd0b 	bl	8006486 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8003a70:	20c8      	movs	r0, #200	@ 0xc8
 8003a72:	f001 ff15 	bl	80058a0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8003a76:	2201      	movs	r2, #1
 8003a78:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003a7c:	4802      	ldr	r0, [pc, #8]	@ (8003a88 <_Z13ILI9341_Resetv+0x38>)
 8003a7e:	f002 fd02 	bl	8006486 <HAL_GPIO_WritePin>
}
 8003a82:	bf00      	nop
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	40010c00 	.word	0x40010c00

08003a8c <_Z20ILI9341_Set_Rotationh>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	4603      	mov	r3, r0
 8003a94:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = Rotation;
 8003a96:	79fb      	ldrb	r3, [r7, #7]
 8003a98:	73fb      	strb	r3, [r7, #15]

	ILI9341_Write_Command(0x36);
 8003a9a:	2036      	movs	r0, #54	@ 0x36
 8003a9c:	f7ff ff50 	bl	8003940 <_Z21ILI9341_Write_Commandh>
	HAL_Delay(1);
 8003aa0:	2001      	movs	r0, #1
 8003aa2:	f001 fefd 	bl	80058a0 <HAL_Delay>

	switch (screen_rotation)
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
 8003aa8:	2b03      	cmp	r3, #3
 8003aaa:	d837      	bhi.n	8003b1c <_Z20ILI9341_Set_Rotationh+0x90>
 8003aac:	a201      	add	r2, pc, #4	@ (adr r2, 8003ab4 <_Z20ILI9341_Set_Rotationh+0x28>)
 8003aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab2:	bf00      	nop
 8003ab4:	08003ac5 	.word	0x08003ac5
 8003ab8:	08003adb 	.word	0x08003adb
 8003abc:	08003af1 	.word	0x08003af1
 8003ac0:	08003b07 	.word	0x08003b07
	{
	case SCREEN_VERTICAL_1:
		ILI9341_Write_Data(0x40 | 0x08);
 8003ac4:	2048      	movs	r0, #72	@ 0x48
 8003ac6:	f7ff ff59 	bl	800397c <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 240;
 8003aca:	4b17      	ldr	r3, [pc, #92]	@ (8003b28 <_Z20ILI9341_Set_Rotationh+0x9c>)
 8003acc:	22f0      	movs	r2, #240	@ 0xf0
 8003ace:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8003ad0:	4b16      	ldr	r3, [pc, #88]	@ (8003b2c <_Z20ILI9341_Set_Rotationh+0xa0>)
 8003ad2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003ad6:	801a      	strh	r2, [r3, #0]
		break;
 8003ad8:	e021      	b.n	8003b1e <_Z20ILI9341_Set_Rotationh+0x92>
	case SCREEN_HORIZONTAL_1:
		ILI9341_Write_Data(0x20 | 0x08);
 8003ada:	2028      	movs	r0, #40	@ 0x28
 8003adc:	f7ff ff4e 	bl	800397c <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 320;
 8003ae0:	4b11      	ldr	r3, [pc, #68]	@ (8003b28 <_Z20ILI9341_Set_Rotationh+0x9c>)
 8003ae2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003ae6:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8003ae8:	4b10      	ldr	r3, [pc, #64]	@ (8003b2c <_Z20ILI9341_Set_Rotationh+0xa0>)
 8003aea:	22f0      	movs	r2, #240	@ 0xf0
 8003aec:	801a      	strh	r2, [r3, #0]
		break;
 8003aee:	e016      	b.n	8003b1e <_Z20ILI9341_Set_Rotationh+0x92>
	case SCREEN_VERTICAL_2:
		ILI9341_Write_Data(0x80 | 0x08);
 8003af0:	2088      	movs	r0, #136	@ 0x88
 8003af2:	f7ff ff43 	bl	800397c <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 240;
 8003af6:	4b0c      	ldr	r3, [pc, #48]	@ (8003b28 <_Z20ILI9341_Set_Rotationh+0x9c>)
 8003af8:	22f0      	movs	r2, #240	@ 0xf0
 8003afa:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8003afc:	4b0b      	ldr	r3, [pc, #44]	@ (8003b2c <_Z20ILI9341_Set_Rotationh+0xa0>)
 8003afe:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003b02:	801a      	strh	r2, [r3, #0]
		break;
 8003b04:	e00b      	b.n	8003b1e <_Z20ILI9341_Set_Rotationh+0x92>
	case SCREEN_HORIZONTAL_2:
		ILI9341_Write_Data(0x40 | 0x80 | 0x20 | 0x08);
 8003b06:	20e8      	movs	r0, #232	@ 0xe8
 8003b08:	f7ff ff38 	bl	800397c <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 320;
 8003b0c:	4b06      	ldr	r3, [pc, #24]	@ (8003b28 <_Z20ILI9341_Set_Rotationh+0x9c>)
 8003b0e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003b12:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8003b14:	4b05      	ldr	r3, [pc, #20]	@ (8003b2c <_Z20ILI9341_Set_Rotationh+0xa0>)
 8003b16:	22f0      	movs	r2, #240	@ 0xf0
 8003b18:	801a      	strh	r2, [r3, #0]
		break;
 8003b1a:	e000      	b.n	8003b1e <_Z20ILI9341_Set_Rotationh+0x92>
	default:
		//EXIT IF SCREEN ROTATION NOT VALID!
		break;
 8003b1c:	bf00      	nop
	}
}
 8003b1e:	bf00      	nop
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	20000002 	.word	0x20000002
 8003b2c:	20000000 	.word	0x20000000

08003b30 <_Z14ILI9341_Enablev>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8003b34:	2201      	movs	r2, #1
 8003b36:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003b3a:	4802      	ldr	r0, [pc, #8]	@ (8003b44 <_Z14ILI9341_Enablev+0x14>)
 8003b3c:	f002 fca3 	bl	8006486 <HAL_GPIO_WritePin>
}
 8003b40:	bf00      	nop
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40010c00 	.word	0x40010c00

08003b48 <_Z12ILI9341_Initv>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0

	ILI9341_Enable();
 8003b4c:	f7ff fff0 	bl	8003b30 <_Z14ILI9341_Enablev>
	ILI9341_SPI_Init();
 8003b50:	f7ff fed4 	bl	80038fc <_Z16ILI9341_SPI_Initv>
	ILI9341_Reset();
 8003b54:	f7ff ff7c 	bl	8003a50 <_Z13ILI9341_Resetv>

//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 8003b58:	2001      	movs	r0, #1
 8003b5a:	f7ff fef1 	bl	8003940 <_Z21ILI9341_Write_Commandh>
	HAL_Delay(1000);
 8003b5e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003b62:	f001 fe9d 	bl	80058a0 <HAL_Delay>

//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 8003b66:	20cb      	movs	r0, #203	@ 0xcb
 8003b68:	f7ff feea 	bl	8003940 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x39);
 8003b6c:	2039      	movs	r0, #57	@ 0x39
 8003b6e:	f7ff ff05 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x2C);
 8003b72:	202c      	movs	r0, #44	@ 0x2c
 8003b74:	f7ff ff02 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 8003b78:	2000      	movs	r0, #0
 8003b7a:	f7ff feff 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x34);
 8003b7e:	2034      	movs	r0, #52	@ 0x34
 8003b80:	f7ff fefc 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x02);
 8003b84:	2002      	movs	r0, #2
 8003b86:	f7ff fef9 	bl	800397c <_Z18ILI9341_Write_Datah>

//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 8003b8a:	20cf      	movs	r0, #207	@ 0xcf
 8003b8c:	f7ff fed8 	bl	8003940 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8003b90:	2000      	movs	r0, #0
 8003b92:	f7ff fef3 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0xC1);
 8003b96:	20c1      	movs	r0, #193	@ 0xc1
 8003b98:	f7ff fef0 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x30);
 8003b9c:	2030      	movs	r0, #48	@ 0x30
 8003b9e:	f7ff feed 	bl	800397c <_Z18ILI9341_Write_Datah>

//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 8003ba2:	20e8      	movs	r0, #232	@ 0xe8
 8003ba4:	f7ff fecc 	bl	8003940 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x85);
 8003ba8:	2085      	movs	r0, #133	@ 0x85
 8003baa:	f7ff fee7 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 8003bae:	2000      	movs	r0, #0
 8003bb0:	f7ff fee4 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x78);
 8003bb4:	2078      	movs	r0, #120	@ 0x78
 8003bb6:	f7ff fee1 	bl	800397c <_Z18ILI9341_Write_Datah>

//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 8003bba:	20ea      	movs	r0, #234	@ 0xea
 8003bbc:	f7ff fec0 	bl	8003940 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8003bc0:	2000      	movs	r0, #0
 8003bc2:	f7ff fedb 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	f7ff fed8 	bl	800397c <_Z18ILI9341_Write_Datah>

//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 8003bcc:	20ed      	movs	r0, #237	@ 0xed
 8003bce:	f7ff feb7 	bl	8003940 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x64);
 8003bd2:	2064      	movs	r0, #100	@ 0x64
 8003bd4:	f7ff fed2 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x03);
 8003bd8:	2003      	movs	r0, #3
 8003bda:	f7ff fecf 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x12);
 8003bde:	2012      	movs	r0, #18
 8003be0:	f7ff fecc 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x81);
 8003be4:	2081      	movs	r0, #129	@ 0x81
 8003be6:	f7ff fec9 	bl	800397c <_Z18ILI9341_Write_Datah>

//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 8003bea:	20f7      	movs	r0, #247	@ 0xf7
 8003bec:	f7ff fea8 	bl	8003940 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x20);
 8003bf0:	2020      	movs	r0, #32
 8003bf2:	f7ff fec3 	bl	800397c <_Z18ILI9341_Write_Datah>

//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 8003bf6:	20c0      	movs	r0, #192	@ 0xc0
 8003bf8:	f7ff fea2 	bl	8003940 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x23);
 8003bfc:	2023      	movs	r0, #35	@ 0x23
 8003bfe:	f7ff febd 	bl	800397c <_Z18ILI9341_Write_Datah>

//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 8003c02:	20c1      	movs	r0, #193	@ 0xc1
 8003c04:	f7ff fe9c 	bl	8003940 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x10);
 8003c08:	2010      	movs	r0, #16
 8003c0a:	f7ff feb7 	bl	800397c <_Z18ILI9341_Write_Datah>

//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 8003c0e:	20c5      	movs	r0, #197	@ 0xc5
 8003c10:	f7ff fe96 	bl	8003940 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x3E);
 8003c14:	203e      	movs	r0, #62	@ 0x3e
 8003c16:	f7ff feb1 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x28);
 8003c1a:	2028      	movs	r0, #40	@ 0x28
 8003c1c:	f7ff feae 	bl	800397c <_Z18ILI9341_Write_Datah>

//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 8003c20:	20c7      	movs	r0, #199	@ 0xc7
 8003c22:	f7ff fe8d 	bl	8003940 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x86);
 8003c26:	2086      	movs	r0, #134	@ 0x86
 8003c28:	f7ff fea8 	bl	800397c <_Z18ILI9341_Write_Datah>

//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 8003c2c:	2036      	movs	r0, #54	@ 0x36
 8003c2e:	f7ff fe87 	bl	8003940 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x48);
 8003c32:	2048      	movs	r0, #72	@ 0x48
 8003c34:	f7ff fea2 	bl	800397c <_Z18ILI9341_Write_Datah>

//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 8003c38:	203a      	movs	r0, #58	@ 0x3a
 8003c3a:	f7ff fe81 	bl	8003940 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x55);
 8003c3e:	2055      	movs	r0, #85	@ 0x55
 8003c40:	f7ff fe9c 	bl	800397c <_Z18ILI9341_Write_Datah>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 8003c44:	20b1      	movs	r0, #177	@ 0xb1
 8003c46:	f7ff fe7b 	bl	8003940 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8003c4a:	2000      	movs	r0, #0
 8003c4c:	f7ff fe96 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x18);
 8003c50:	2018      	movs	r0, #24
 8003c52:	f7ff fe93 	bl	800397c <_Z18ILI9341_Write_Datah>

//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 8003c56:	20b6      	movs	r0, #182	@ 0xb6
 8003c58:	f7ff fe72 	bl	8003940 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x08);
 8003c5c:	2008      	movs	r0, #8
 8003c5e:	f7ff fe8d 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x82);
 8003c62:	2082      	movs	r0, #130	@ 0x82
 8003c64:	f7ff fe8a 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x27);
 8003c68:	2027      	movs	r0, #39	@ 0x27
 8003c6a:	f7ff fe87 	bl	800397c <_Z18ILI9341_Write_Datah>

//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 8003c6e:	20f2      	movs	r0, #242	@ 0xf2
 8003c70:	f7ff fe66 	bl	8003940 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8003c74:	2000      	movs	r0, #0
 8003c76:	f7ff fe81 	bl	800397c <_Z18ILI9341_Write_Datah>

//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 8003c7a:	2026      	movs	r0, #38	@ 0x26
 8003c7c:	f7ff fe60 	bl	8003940 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x01);
 8003c80:	2001      	movs	r0, #1
 8003c82:	f7ff fe7b 	bl	800397c <_Z18ILI9341_Write_Datah>

//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 8003c86:	20e0      	movs	r0, #224	@ 0xe0
 8003c88:	f7ff fe5a 	bl	8003940 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x0F);
 8003c8c:	200f      	movs	r0, #15
 8003c8e:	f7ff fe75 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x31);
 8003c92:	2031      	movs	r0, #49	@ 0x31
 8003c94:	f7ff fe72 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x2B);
 8003c98:	202b      	movs	r0, #43	@ 0x2b
 8003c9a:	f7ff fe6f 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0C);
 8003c9e:	200c      	movs	r0, #12
 8003ca0:	f7ff fe6c 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0E);
 8003ca4:	200e      	movs	r0, #14
 8003ca6:	f7ff fe69 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x08);
 8003caa:	2008      	movs	r0, #8
 8003cac:	f7ff fe66 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x4E);
 8003cb0:	204e      	movs	r0, #78	@ 0x4e
 8003cb2:	f7ff fe63 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0xF1);
 8003cb6:	20f1      	movs	r0, #241	@ 0xf1
 8003cb8:	f7ff fe60 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x37);
 8003cbc:	2037      	movs	r0, #55	@ 0x37
 8003cbe:	f7ff fe5d 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x07);
 8003cc2:	2007      	movs	r0, #7
 8003cc4:	f7ff fe5a 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x10);
 8003cc8:	2010      	movs	r0, #16
 8003cca:	f7ff fe57 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x03);
 8003cce:	2003      	movs	r0, #3
 8003cd0:	f7ff fe54 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0E);
 8003cd4:	200e      	movs	r0, #14
 8003cd6:	f7ff fe51 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x09);
 8003cda:	2009      	movs	r0, #9
 8003cdc:	f7ff fe4e 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 8003ce0:	2000      	movs	r0, #0
 8003ce2:	f7ff fe4b 	bl	800397c <_Z18ILI9341_Write_Datah>

//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 8003ce6:	20e1      	movs	r0, #225	@ 0xe1
 8003ce8:	f7ff fe2a 	bl	8003940 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8003cec:	2000      	movs	r0, #0
 8003cee:	f7ff fe45 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0E);
 8003cf2:	200e      	movs	r0, #14
 8003cf4:	f7ff fe42 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x14);
 8003cf8:	2014      	movs	r0, #20
 8003cfa:	f7ff fe3f 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x03);
 8003cfe:	2003      	movs	r0, #3
 8003d00:	f7ff fe3c 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x11);
 8003d04:	2011      	movs	r0, #17
 8003d06:	f7ff fe39 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x07);
 8003d0a:	2007      	movs	r0, #7
 8003d0c:	f7ff fe36 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x31);
 8003d10:	2031      	movs	r0, #49	@ 0x31
 8003d12:	f7ff fe33 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0xC1);
 8003d16:	20c1      	movs	r0, #193	@ 0xc1
 8003d18:	f7ff fe30 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x48);
 8003d1c:	2048      	movs	r0, #72	@ 0x48
 8003d1e:	f7ff fe2d 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x08);
 8003d22:	2008      	movs	r0, #8
 8003d24:	f7ff fe2a 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0F);
 8003d28:	200f      	movs	r0, #15
 8003d2a:	f7ff fe27 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0C);
 8003d2e:	200c      	movs	r0, #12
 8003d30:	f7ff fe24 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x31);
 8003d34:	2031      	movs	r0, #49	@ 0x31
 8003d36:	f7ff fe21 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x36);
 8003d3a:	2036      	movs	r0, #54	@ 0x36
 8003d3c:	f7ff fe1e 	bl	800397c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0F);
 8003d40:	200f      	movs	r0, #15
 8003d42:	f7ff fe1b 	bl	800397c <_Z18ILI9341_Write_Datah>

//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 8003d46:	2011      	movs	r0, #17
 8003d48:	f7ff fdfa 	bl	8003940 <_Z21ILI9341_Write_Commandh>
	HAL_Delay(120);
 8003d4c:	2078      	movs	r0, #120	@ 0x78
 8003d4e:	f001 fda7 	bl	80058a0 <HAL_Delay>

//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 8003d52:	2029      	movs	r0, #41	@ 0x29
 8003d54:	f7ff fdf4 	bl	8003940 <_Z21ILI9341_Write_Commandh>

//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8003d58:	2000      	movs	r0, #0
 8003d5a:	f7ff fe97 	bl	8003a8c <_Z20ILI9341_Set_Rotationh>
}
 8003d5e:	bf00      	nop
 8003d60:	bd80      	pop	{r7, pc}
	...

08003d64 <_Z25ILI9341_Draw_Colour_Bursttm>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8003d64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d68:	b08d      	sub	sp, #52	@ 0x34
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	6039      	str	r1, [r7, #0]
 8003d70:	80fb      	strh	r3, [r7, #6]
//REMAINDER!
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
			Remainder_from_block, 10);

	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
}
 8003d72:	466b      	mov	r3, sp
 8003d74:	461e      	mov	r6, r3
	uint32_t Buffer_Size = 0;
 8003d76:	2300      	movs	r3, #0
 8003d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if ((Size * 2) < BURST_MAX_SIZE)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003d82:	d202      	bcs.n	8003d8a <_Z25ILI9341_Draw_Colour_Bursttm+0x26>
		Buffer_Size = Size;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d88:	e002      	b.n	8003d90 <_Z25ILI9341_Draw_Colour_Bursttm+0x2c>
		Buffer_Size = BURST_MAX_SIZE;
 8003d8a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8003d90:	2201      	movs	r2, #1
 8003d92:	2102      	movs	r1, #2
 8003d94:	483e      	ldr	r0, [pc, #248]	@ (8003e90 <_Z25ILI9341_Draw_Colour_Bursttm+0x12c>)
 8003d96:	f002 fb76 	bl	8006486 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	483c      	ldr	r0, [pc, #240]	@ (8003e90 <_Z25ILI9341_Draw_Colour_Bursttm+0x12c>)
 8003da0:	f002 fb71 	bl	8006486 <HAL_GPIO_WritePin>
	unsigned char chifted = Colour >> 8;
 8003da4:	88fb      	ldrh	r3, [r7, #6]
 8003da6:	0a1b      	lsrs	r3, r3, #8
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	unsigned char burst_buffer[Buffer_Size];
 8003dae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003db0:	460b      	mov	r3, r1
 8003db2:	3b01      	subs	r3, #1
 8003db4:	61fb      	str	r3, [r7, #28]
 8003db6:	2300      	movs	r3, #0
 8003db8:	4688      	mov	r8, r1
 8003dba:	4699      	mov	r9, r3
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	f04f 0300 	mov.w	r3, #0
 8003dc4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dc8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dcc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	460c      	mov	r4, r1
 8003dd4:	461d      	mov	r5, r3
 8003dd6:	f04f 0200 	mov.w	r2, #0
 8003dda:	f04f 0300 	mov.w	r3, #0
 8003dde:	00eb      	lsls	r3, r5, #3
 8003de0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003de4:	00e2      	lsls	r2, r4, #3
 8003de6:	1dcb      	adds	r3, r1, #7
 8003de8:	08db      	lsrs	r3, r3, #3
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	ebad 0d03 	sub.w	sp, sp, r3
 8003df0:	466b      	mov	r3, sp
 8003df2:	3300      	adds	r3, #0
 8003df4:	61bb      	str	r3, [r7, #24]
	for (uint32_t j = 0; j < Buffer_Size; j += 2)
 8003df6:	2300      	movs	r3, #0
 8003df8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dfa:	e00e      	b.n	8003e1a <_Z25ILI9341_Draw_Colour_Bursttm+0xb6>
		burst_buffer[j] = chifted;
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e00:	4413      	add	r3, r2
 8003e02:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003e06:	701a      	strb	r2, [r3, #0]
		burst_buffer[j + 1] = Colour;
 8003e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	88fa      	ldrh	r2, [r7, #6]
 8003e0e:	b2d1      	uxtb	r1, r2
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	54d1      	strb	r1, [r2, r3]
	for (uint32_t j = 0; j < Buffer_Size; j += 2)
 8003e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e16:	3302      	adds	r3, #2
 8003e18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d3ec      	bcc.n	8003dfc <_Z25ILI9341_Draw_Colour_Bursttm+0x98>
	uint32_t Sending_Size = Size * 2;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	617b      	str	r3, [r7, #20]
	uint32_t Sending_in_Block = Sending_Size / Buffer_Size;
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e30:	613b      	str	r3, [r7, #16]
	uint32_t Remainder_from_block = Sending_Size % Buffer_Size;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e36:	fbb3 f2f2 	udiv	r2, r3, r2
 8003e3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e3c:	fb01 f202 	mul.w	r2, r1, r2
 8003e40:	1a9b      	subs	r3, r3, r2
 8003e42:	60fb      	str	r3, [r7, #12]
	if (Sending_in_Block != 0)
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d010      	beq.n	8003e6c <_Z25ILI9341_Draw_Colour_Bursttm+0x108>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e4e:	e009      	b.n	8003e64 <_Z25ILI9341_Draw_Colour_Bursttm+0x100>
			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
 8003e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	230a      	movs	r3, #10
 8003e56:	69b9      	ldr	r1, [r7, #24]
 8003e58:	480e      	ldr	r0, [pc, #56]	@ (8003e94 <_Z25ILI9341_Draw_Colour_Bursttm+0x130>)
 8003e5a:	f003 f88f 	bl	8006f7c <HAL_SPI_Transmit>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e60:	3301      	adds	r3, #1
 8003e62:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d3f1      	bcc.n	8003e50 <_Z25ILI9341_Draw_Colour_Bursttm+0xec>
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	230a      	movs	r3, #10
 8003e72:	69b9      	ldr	r1, [r7, #24]
 8003e74:	4807      	ldr	r0, [pc, #28]	@ (8003e94 <_Z25ILI9341_Draw_Colour_Bursttm+0x130>)
 8003e76:	f003 f881 	bl	8006f7c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	4804      	ldr	r0, [pc, #16]	@ (8003e90 <_Z25ILI9341_Draw_Colour_Bursttm+0x12c>)
 8003e80:	f002 fb01 	bl	8006486 <HAL_GPIO_WritePin>
 8003e84:	46b5      	mov	sp, r6
}
 8003e86:	bf00      	nop
 8003e88:	3734      	adds	r7, #52	@ 0x34
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e90:	40010c00 	.word	0x40010c00
 8003e94:	200003a4 	.word	0x200003a4

08003e98 <_Z19ILI9341_Fill_Screent>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8003ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8003edc <_Z19ILI9341_Fill_Screent+0x44>)
 8003ea4:	881b      	ldrh	r3, [r3, #0]
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee0 <_Z19ILI9341_Fill_Screent+0x48>)
 8003eaa:	881b      	ldrh	r3, [r3, #0]
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	2100      	movs	r1, #0
 8003eb0:	2000      	movs	r0, #0
 8003eb2:	f7ff fd81 	bl	80039b8 <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH * LCD_HEIGHT);
 8003eb6:	4b09      	ldr	r3, [pc, #36]	@ (8003edc <_Z19ILI9341_Fill_Screent+0x44>)
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	4b08      	ldr	r3, [pc, #32]	@ (8003ee0 <_Z19ILI9341_Fill_Screent+0x48>)
 8003ec0:	881b      	ldrh	r3, [r3, #0]
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	fb02 f303 	mul.w	r3, r2, r3
 8003ec8:	461a      	mov	r2, r3
 8003eca:	88fb      	ldrh	r3, [r7, #6]
 8003ecc:	4611      	mov	r1, r2
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff ff48 	bl	8003d64 <_Z25ILI9341_Draw_Colour_Bursttm>
}
 8003ed4:	bf00      	nop
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	20000002 	.word	0x20000002
 8003ee0:	20000000 	.word	0x20000000

08003ee4 <_Z18ILI9341_Draw_Pixelttt>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X, uint16_t Y, uint16_t Colour)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	4603      	mov	r3, r0
 8003eec:	80fb      	strh	r3, [r7, #6]
 8003eee:	460b      	mov	r3, r1
 8003ef0:	80bb      	strh	r3, [r7, #4]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	807b      	strh	r3, [r7, #2]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 8003ef6:	4b5d      	ldr	r3, [pc, #372]	@ (800406c <_Z18ILI9341_Draw_Pixelttt+0x188>)
 8003ef8:	881b      	ldrh	r3, [r3, #0]
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	88fa      	ldrh	r2, [r7, #6]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d205      	bcs.n	8003f0e <_Z18ILI9341_Draw_Pixelttt+0x2a>
 8003f02:	4b5b      	ldr	r3, [pc, #364]	@ (8004070 <_Z18ILI9341_Draw_Pixelttt+0x18c>)
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	88ba      	ldrh	r2, [r7, #4]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d301      	bcc.n	8003f12 <_Z18ILI9341_Draw_Pixelttt+0x2e>
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e000      	b.n	8003f14 <_Z18ILI9341_Draw_Pixelttt+0x30>
 8003f12:	2300      	movs	r3, #0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f040 80a5 	bne.w	8004064 <_Z18ILI9341_Draw_Pixelttt+0x180>
		return;	//OUT OF BOUNDS!

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	2102      	movs	r1, #2
 8003f1e:	4855      	ldr	r0, [pc, #340]	@ (8004074 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8003f20:	f002 fab1 	bl	8006486 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003f24:	2200      	movs	r2, #0
 8003f26:	2101      	movs	r1, #1
 8003f28:	4852      	ldr	r0, [pc, #328]	@ (8004074 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8003f2a:	f002 faac 	bl	8006486 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2A);
 8003f2e:	202a      	movs	r0, #42	@ 0x2a
 8003f30:	f7ff fcf4 	bl	800391c <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8003f34:	2201      	movs	r2, #1
 8003f36:	2102      	movs	r1, #2
 8003f38:	484e      	ldr	r0, [pc, #312]	@ (8004074 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8003f3a:	f002 faa4 	bl	8006486 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003f3e:	2201      	movs	r2, #1
 8003f40:	2101      	movs	r1, #1
 8003f42:	484c      	ldr	r0, [pc, #304]	@ (8004074 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8003f44:	f002 fa9f 	bl	8006486 <HAL_GPIO_WritePin>

//XDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003f48:	2200      	movs	r2, #0
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	4849      	ldr	r0, [pc, #292]	@ (8004074 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8003f4e:	f002 fa9a 	bl	8006486 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer[4] =
	{ X >> 8, X, (X + 1) >> 8, (X + 1) };
 8003f52:	88fb      	ldrh	r3, [r7, #6]
 8003f54:	0a1b      	lsrs	r3, r3, #8
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	753b      	strb	r3, [r7, #20]
 8003f5c:	88fb      	ldrh	r3, [r7, #6]
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	757b      	strb	r3, [r7, #21]
 8003f62:	88fb      	ldrh	r3, [r7, #6]
 8003f64:	3301      	adds	r3, #1
 8003f66:	121b      	asrs	r3, r3, #8
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	75bb      	strb	r3, [r7, #22]
 8003f6c:	88fb      	ldrh	r3, [r7, #6]
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	3301      	adds	r3, #1
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8003f76:	f107 0114 	add.w	r1, r7, #20
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	2204      	movs	r2, #4
 8003f7e:	483e      	ldr	r0, [pc, #248]	@ (8004078 <_Z18ILI9341_Draw_Pixelttt+0x194>)
 8003f80:	f002 fffc 	bl	8006f7c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003f84:	2201      	movs	r2, #1
 8003f86:	2101      	movs	r1, #1
 8003f88:	483a      	ldr	r0, [pc, #232]	@ (8004074 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8003f8a:	f002 fa7c 	bl	8006486 <HAL_GPIO_WritePin>

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8003f8e:	2200      	movs	r2, #0
 8003f90:	2102      	movs	r1, #2
 8003f92:	4838      	ldr	r0, [pc, #224]	@ (8004074 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8003f94:	f002 fa77 	bl	8006486 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003f98:	2200      	movs	r2, #0
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	4835      	ldr	r0, [pc, #212]	@ (8004074 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8003f9e:	f002 fa72 	bl	8006486 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2B);
 8003fa2:	202b      	movs	r0, #43	@ 0x2b
 8003fa4:	f7ff fcba 	bl	800391c <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8003fa8:	2201      	movs	r2, #1
 8003faa:	2102      	movs	r1, #2
 8003fac:	4831      	ldr	r0, [pc, #196]	@ (8004074 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8003fae:	f002 fa6a 	bl	8006486 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	482f      	ldr	r0, [pc, #188]	@ (8004074 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8003fb8:	f002 fa65 	bl	8006486 <HAL_GPIO_WritePin>

//YDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	482c      	ldr	r0, [pc, #176]	@ (8004074 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8003fc2:	f002 fa60 	bl	8006486 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer1[4] =
	{ Y >> 8, Y, (Y + 1) >> 8, (Y + 1) };
 8003fc6:	88bb      	ldrh	r3, [r7, #4]
 8003fc8:	0a1b      	lsrs	r3, r3, #8
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	743b      	strb	r3, [r7, #16]
 8003fd0:	88bb      	ldrh	r3, [r7, #4]
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	747b      	strb	r3, [r7, #17]
 8003fd6:	88bb      	ldrh	r3, [r7, #4]
 8003fd8:	3301      	adds	r3, #1
 8003fda:	121b      	asrs	r3, r3, #8
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	74bb      	strb	r3, [r7, #18]
 8003fe0:	88bb      	ldrh	r3, [r7, #4]
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8003fea:	f107 0110 	add.w	r1, r7, #16
 8003fee:	2301      	movs	r3, #1
 8003ff0:	2204      	movs	r2, #4
 8003ff2:	4821      	ldr	r0, [pc, #132]	@ (8004078 <_Z18ILI9341_Draw_Pixelttt+0x194>)
 8003ff4:	f002 ffc2 	bl	8006f7c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	481d      	ldr	r0, [pc, #116]	@ (8004074 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8003ffe:	f002 fa42 	bl	8006486 <HAL_GPIO_WritePin>

//ADDRESS	
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8004002:	2200      	movs	r2, #0
 8004004:	2102      	movs	r1, #2
 8004006:	481b      	ldr	r0, [pc, #108]	@ (8004074 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8004008:	f002 fa3d 	bl	8006486 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800400c:	2200      	movs	r2, #0
 800400e:	2101      	movs	r1, #1
 8004010:	4818      	ldr	r0, [pc, #96]	@ (8004074 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8004012:	f002 fa38 	bl	8006486 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8004016:	202c      	movs	r0, #44	@ 0x2c
 8004018:	f7ff fc80 	bl	800391c <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800401c:	2201      	movs	r2, #1
 800401e:	2102      	movs	r1, #2
 8004020:	4814      	ldr	r0, [pc, #80]	@ (8004074 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8004022:	f002 fa30 	bl	8006486 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8004026:	2201      	movs	r2, #1
 8004028:	2101      	movs	r1, #1
 800402a:	4812      	ldr	r0, [pc, #72]	@ (8004074 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800402c:	f002 fa2b 	bl	8006486 <HAL_GPIO_WritePin>

//COLOUR	
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004030:	2200      	movs	r2, #0
 8004032:	2101      	movs	r1, #1
 8004034:	480f      	ldr	r0, [pc, #60]	@ (8004074 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8004036:	f002 fa26 	bl	8006486 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer2[2] =
	{ Colour >> 8, Colour };
 800403a:	887b      	ldrh	r3, [r7, #2]
 800403c:	0a1b      	lsrs	r3, r3, #8
 800403e:	b29b      	uxth	r3, r3
 8004040:	b2db      	uxtb	r3, r3
 8004042:	733b      	strb	r3, [r7, #12]
 8004044:	887b      	ldrh	r3, [r7, #2]
 8004046:	b2db      	uxtb	r3, r3
 8004048:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 800404a:	f107 010c 	add.w	r1, r7, #12
 800404e:	2301      	movs	r3, #1
 8004050:	2202      	movs	r2, #2
 8004052:	4809      	ldr	r0, [pc, #36]	@ (8004078 <_Z18ILI9341_Draw_Pixelttt+0x194>)
 8004054:	f002 ff92 	bl	8006f7c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8004058:	2201      	movs	r2, #1
 800405a:	2101      	movs	r1, #1
 800405c:	4805      	ldr	r0, [pc, #20]	@ (8004074 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800405e:	f002 fa12 	bl	8006486 <HAL_GPIO_WritePin>
 8004062:	e000      	b.n	8004066 <_Z18ILI9341_Draw_Pixelttt+0x182>
		return;	//OUT OF BOUNDS!
 8004064:	bf00      	nop

}
 8004066:	3718      	adds	r7, #24
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	20000002 	.word	0x20000002
 8004070:	20000000 	.word	0x20000000
 8004074:	40010c00 	.word	0x40010c00
 8004078:	200003a4 	.word	0x200003a4

0800407c <_Z22ILI9341_Draw_Rectanglettttt>:
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width,
		uint16_t Height, uint16_t Colour)
{
 800407c:	b590      	push	{r4, r7, lr}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	4604      	mov	r4, r0
 8004084:	4608      	mov	r0, r1
 8004086:	4611      	mov	r1, r2
 8004088:	461a      	mov	r2, r3
 800408a:	4623      	mov	r3, r4
 800408c:	80fb      	strh	r3, [r7, #6]
 800408e:	4603      	mov	r3, r0
 8004090:	80bb      	strh	r3, [r7, #4]
 8004092:	460b      	mov	r3, r1
 8004094:	807b      	strh	r3, [r7, #2]
 8004096:	4613      	mov	r3, r2
 8004098:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 800409a:	4b2b      	ldr	r3, [pc, #172]	@ (8004148 <_Z22ILI9341_Draw_Rectanglettttt+0xcc>)
 800409c:	881b      	ldrh	r3, [r3, #0]
 800409e:	b29b      	uxth	r3, r3
 80040a0:	88fa      	ldrh	r2, [r7, #6]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d205      	bcs.n	80040b2 <_Z22ILI9341_Draw_Rectanglettttt+0x36>
 80040a6:	4b29      	ldr	r3, [pc, #164]	@ (800414c <_Z22ILI9341_Draw_Rectanglettttt+0xd0>)
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	88ba      	ldrh	r2, [r7, #4]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d301      	bcc.n	80040b6 <_Z22ILI9341_Draw_Rectanglettttt+0x3a>
 80040b2:	2301      	movs	r3, #1
 80040b4:	e000      	b.n	80040b8 <_Z22ILI9341_Draw_Rectanglettttt+0x3c>
 80040b6:	2300      	movs	r3, #0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d141      	bne.n	8004140 <_Z22ILI9341_Draw_Rectanglettttt+0xc4>
		return;
	if ((X + Width - 1) >= LCD_WIDTH)
 80040bc:	88fa      	ldrh	r2, [r7, #6]
 80040be:	887b      	ldrh	r3, [r7, #2]
 80040c0:	4413      	add	r3, r2
 80040c2:	4a21      	ldr	r2, [pc, #132]	@ (8004148 <_Z22ILI9341_Draw_Rectanglettttt+0xcc>)
 80040c4:	8812      	ldrh	r2, [r2, #0]
 80040c6:	b292      	uxth	r2, r2
 80040c8:	4293      	cmp	r3, r2
 80040ca:	bfcc      	ite	gt
 80040cc:	2301      	movgt	r3, #1
 80040ce:	2300      	movle	r3, #0
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d005      	beq.n	80040e2 <_Z22ILI9341_Draw_Rectanglettttt+0x66>
	{
		Width = LCD_WIDTH - X;
 80040d6:	4b1c      	ldr	r3, [pc, #112]	@ (8004148 <_Z22ILI9341_Draw_Rectanglettttt+0xcc>)
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	b29a      	uxth	r2, r3
 80040dc:	88fb      	ldrh	r3, [r7, #6]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	807b      	strh	r3, [r7, #2]
	}
	if ((Y + Height - 1) >= LCD_HEIGHT)
 80040e2:	88ba      	ldrh	r2, [r7, #4]
 80040e4:	883b      	ldrh	r3, [r7, #0]
 80040e6:	4413      	add	r3, r2
 80040e8:	4a18      	ldr	r2, [pc, #96]	@ (800414c <_Z22ILI9341_Draw_Rectanglettttt+0xd0>)
 80040ea:	8812      	ldrh	r2, [r2, #0]
 80040ec:	b292      	uxth	r2, r2
 80040ee:	4293      	cmp	r3, r2
 80040f0:	bfcc      	ite	gt
 80040f2:	2301      	movgt	r3, #1
 80040f4:	2300      	movle	r3, #0
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d005      	beq.n	8004108 <_Z22ILI9341_Draw_Rectanglettttt+0x8c>
	{
		Height = LCD_HEIGHT - Y;
 80040fc:	4b13      	ldr	r3, [pc, #76]	@ (800414c <_Z22ILI9341_Draw_Rectanglettttt+0xd0>)
 80040fe:	881b      	ldrh	r3, [r3, #0]
 8004100:	b29a      	uxth	r2, r3
 8004102:	88bb      	ldrh	r3, [r7, #4]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	803b      	strh	r3, [r7, #0]
	}
	ILI9341_Set_Address(X, Y, X + Width - 1, Y + Height - 1);
 8004108:	88fa      	ldrh	r2, [r7, #6]
 800410a:	887b      	ldrh	r3, [r7, #2]
 800410c:	4413      	add	r3, r2
 800410e:	b29b      	uxth	r3, r3
 8004110:	3b01      	subs	r3, #1
 8004112:	b29c      	uxth	r4, r3
 8004114:	88ba      	ldrh	r2, [r7, #4]
 8004116:	883b      	ldrh	r3, [r7, #0]
 8004118:	4413      	add	r3, r2
 800411a:	b29b      	uxth	r3, r3
 800411c:	3b01      	subs	r3, #1
 800411e:	b29b      	uxth	r3, r3
 8004120:	88b9      	ldrh	r1, [r7, #4]
 8004122:	88f8      	ldrh	r0, [r7, #6]
 8004124:	4622      	mov	r2, r4
 8004126:	f7ff fc47 	bl	80039b8 <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, Height * Width);
 800412a:	883b      	ldrh	r3, [r7, #0]
 800412c:	887a      	ldrh	r2, [r7, #2]
 800412e:	fb02 f303 	mul.w	r3, r2, r3
 8004132:	461a      	mov	r2, r3
 8004134:	8b3b      	ldrh	r3, [r7, #24]
 8004136:	4611      	mov	r1, r2
 8004138:	4618      	mov	r0, r3
 800413a:	f7ff fe13 	bl	8003d64 <_Z25ILI9341_Draw_Colour_Bursttm>
 800413e:	e000      	b.n	8004142 <_Z22ILI9341_Draw_Rectanglettttt+0xc6>
		return;
 8004140:	bf00      	nop
}
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	bd90      	pop	{r4, r7, pc}
 8004148:	20000002 	.word	0x20000002
 800414c:	20000000 	.word	0x20000000

08004150 <_Z28ILI9341_Draw_Horizontal_Linetttt>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width,
		uint16_t Colour)
{
 8004150:	b590      	push	{r4, r7, lr}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	4604      	mov	r4, r0
 8004158:	4608      	mov	r0, r1
 800415a:	4611      	mov	r1, r2
 800415c:	461a      	mov	r2, r3
 800415e:	4623      	mov	r3, r4
 8004160:	80fb      	strh	r3, [r7, #6]
 8004162:	4603      	mov	r3, r0
 8004164:	80bb      	strh	r3, [r7, #4]
 8004166:	460b      	mov	r3, r1
 8004168:	807b      	strh	r3, [r7, #2]
 800416a:	4613      	mov	r3, r2
 800416c:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 800416e:	4b1d      	ldr	r3, [pc, #116]	@ (80041e4 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x94>)
 8004170:	881b      	ldrh	r3, [r3, #0]
 8004172:	b29b      	uxth	r3, r3
 8004174:	88fa      	ldrh	r2, [r7, #6]
 8004176:	429a      	cmp	r2, r3
 8004178:	d205      	bcs.n	8004186 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x36>
 800417a:	4b1b      	ldr	r3, [pc, #108]	@ (80041e8 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x98>)
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	b29b      	uxth	r3, r3
 8004180:	88ba      	ldrh	r2, [r7, #4]
 8004182:	429a      	cmp	r2, r3
 8004184:	d301      	bcc.n	800418a <_Z28ILI9341_Draw_Horizontal_Linetttt+0x3a>
 8004186:	2301      	movs	r3, #1
 8004188:	e000      	b.n	800418c <_Z28ILI9341_Draw_Horizontal_Linetttt+0x3c>
 800418a:	2300      	movs	r3, #0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d124      	bne.n	80041da <_Z28ILI9341_Draw_Horizontal_Linetttt+0x8a>
		return;
	if ((X + Width - 1) >= LCD_WIDTH)
 8004190:	88fa      	ldrh	r2, [r7, #6]
 8004192:	887b      	ldrh	r3, [r7, #2]
 8004194:	4413      	add	r3, r2
 8004196:	4a13      	ldr	r2, [pc, #76]	@ (80041e4 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x94>)
 8004198:	8812      	ldrh	r2, [r2, #0]
 800419a:	b292      	uxth	r2, r2
 800419c:	4293      	cmp	r3, r2
 800419e:	bfcc      	ite	gt
 80041a0:	2301      	movgt	r3, #1
 80041a2:	2300      	movle	r3, #0
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d005      	beq.n	80041b6 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x66>
	{
		Width = LCD_WIDTH - X;
 80041aa:	4b0e      	ldr	r3, [pc, #56]	@ (80041e4 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x94>)
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	88fb      	ldrh	r3, [r7, #6]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	807b      	strh	r3, [r7, #2]
	}
	ILI9341_Set_Address(X, Y, X + Width - 1, Y);
 80041b6:	88fa      	ldrh	r2, [r7, #6]
 80041b8:	887b      	ldrh	r3, [r7, #2]
 80041ba:	4413      	add	r3, r2
 80041bc:	b29b      	uxth	r3, r3
 80041be:	3b01      	subs	r3, #1
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	88bb      	ldrh	r3, [r7, #4]
 80041c4:	88b9      	ldrh	r1, [r7, #4]
 80041c6:	88f8      	ldrh	r0, [r7, #6]
 80041c8:	f7ff fbf6 	bl	80039b8 <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, Width);
 80041cc:	887a      	ldrh	r2, [r7, #2]
 80041ce:	883b      	ldrh	r3, [r7, #0]
 80041d0:	4611      	mov	r1, r2
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7ff fdc6 	bl	8003d64 <_Z25ILI9341_Draw_Colour_Bursttm>
 80041d8:	e000      	b.n	80041dc <_Z28ILI9341_Draw_Horizontal_Linetttt+0x8c>
		return;
 80041da:	bf00      	nop
}
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd90      	pop	{r4, r7, pc}
 80041e2:	bf00      	nop
 80041e4:	20000002 	.word	0x20000002
 80041e8:	20000000 	.word	0x20000000

080041ec <_Z26ILI9341_Draw_Vertical_Linetttt>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height,
		uint16_t Colour)
{
 80041ec:	b590      	push	{r4, r7, lr}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	4604      	mov	r4, r0
 80041f4:	4608      	mov	r0, r1
 80041f6:	4611      	mov	r1, r2
 80041f8:	461a      	mov	r2, r3
 80041fa:	4623      	mov	r3, r4
 80041fc:	80fb      	strh	r3, [r7, #6]
 80041fe:	4603      	mov	r3, r0
 8004200:	80bb      	strh	r3, [r7, #4]
 8004202:	460b      	mov	r3, r1
 8004204:	807b      	strh	r3, [r7, #2]
 8004206:	4613      	mov	r3, r2
 8004208:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 800420a:	4b1d      	ldr	r3, [pc, #116]	@ (8004280 <_Z26ILI9341_Draw_Vertical_Linetttt+0x94>)
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	b29b      	uxth	r3, r3
 8004210:	88fa      	ldrh	r2, [r7, #6]
 8004212:	429a      	cmp	r2, r3
 8004214:	d205      	bcs.n	8004222 <_Z26ILI9341_Draw_Vertical_Linetttt+0x36>
 8004216:	4b1b      	ldr	r3, [pc, #108]	@ (8004284 <_Z26ILI9341_Draw_Vertical_Linetttt+0x98>)
 8004218:	881b      	ldrh	r3, [r3, #0]
 800421a:	b29b      	uxth	r3, r3
 800421c:	88ba      	ldrh	r2, [r7, #4]
 800421e:	429a      	cmp	r2, r3
 8004220:	d301      	bcc.n	8004226 <_Z26ILI9341_Draw_Vertical_Linetttt+0x3a>
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <_Z26ILI9341_Draw_Vertical_Linetttt+0x3c>
 8004226:	2300      	movs	r3, #0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d124      	bne.n	8004276 <_Z26ILI9341_Draw_Vertical_Linetttt+0x8a>
		return;
	if ((Y + Height - 1) >= LCD_HEIGHT)
 800422c:	88ba      	ldrh	r2, [r7, #4]
 800422e:	887b      	ldrh	r3, [r7, #2]
 8004230:	4413      	add	r3, r2
 8004232:	4a14      	ldr	r2, [pc, #80]	@ (8004284 <_Z26ILI9341_Draw_Vertical_Linetttt+0x98>)
 8004234:	8812      	ldrh	r2, [r2, #0]
 8004236:	b292      	uxth	r2, r2
 8004238:	4293      	cmp	r3, r2
 800423a:	bfcc      	ite	gt
 800423c:	2301      	movgt	r3, #1
 800423e:	2300      	movle	r3, #0
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d005      	beq.n	8004252 <_Z26ILI9341_Draw_Vertical_Linetttt+0x66>
	{
		Height = LCD_HEIGHT - Y;
 8004246:	4b0f      	ldr	r3, [pc, #60]	@ (8004284 <_Z26ILI9341_Draw_Vertical_Linetttt+0x98>)
 8004248:	881b      	ldrh	r3, [r3, #0]
 800424a:	b29a      	uxth	r2, r3
 800424c:	88bb      	ldrh	r3, [r7, #4]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	807b      	strh	r3, [r7, #2]
	}
	ILI9341_Set_Address(X, Y, X, Y + Height - 1);
 8004252:	88ba      	ldrh	r2, [r7, #4]
 8004254:	887b      	ldrh	r3, [r7, #2]
 8004256:	4413      	add	r3, r2
 8004258:	b29b      	uxth	r3, r3
 800425a:	3b01      	subs	r3, #1
 800425c:	b29b      	uxth	r3, r3
 800425e:	88fa      	ldrh	r2, [r7, #6]
 8004260:	88b9      	ldrh	r1, [r7, #4]
 8004262:	88f8      	ldrh	r0, [r7, #6]
 8004264:	f7ff fba8 	bl	80039b8 <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, Height);
 8004268:	887a      	ldrh	r2, [r7, #2]
 800426a:	883b      	ldrh	r3, [r7, #0]
 800426c:	4611      	mov	r1, r2
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff fd78 	bl	8003d64 <_Z25ILI9341_Draw_Colour_Bursttm>
 8004274:	e000      	b.n	8004278 <_Z26ILI9341_Draw_Vertical_Linetttt+0x8c>
		return;
 8004276:	bf00      	nop
}
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	bd90      	pop	{r4, r7, pc}
 800427e:	bf00      	nop
 8004280:	20000002 	.word	0x20000002
 8004284:	20000000 	.word	0x20000000

08004288 <_ZN23CManejadorControlesBaseC1Ev>:
 *      Author: W10
 */

#include <ManejadorControles/CManejadorControlesBase.hpp>

CManejadorControlesBase::CManejadorControlesBase()
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	4a04      	ldr	r2, [pc, #16]	@ (80042a4 <_ZN23CManejadorControlesBaseC1Ev+0x1c>)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4618      	mov	r0, r3
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	bc80      	pop	{r7}
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	0800b854 	.word	0x0800b854

080042a8 <_ZN23CManejadorControlesBaseD1Ev>:

CManejadorControlesBase::~CManejadorControlesBase()
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	4a04      	ldr	r2, [pc, #16]	@ (80042c4 <_ZN23CManejadorControlesBaseD1Ev+0x1c>)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4618      	mov	r0, r3
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	bc80      	pop	{r7}
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	0800b854 	.word	0x0800b854

080042c8 <_ZN23CManejadorControlesBaseD0Ev>:
CManejadorControlesBase::~CManejadorControlesBase()
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
}
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f7ff ffe9 	bl	80042a8 <_ZN23CManejadorControlesBaseD1Ev>
 80042d6:	2104      	movs	r1, #4
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f004 f87b 	bl	80083d4 <_ZdlPvj>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4618      	mov	r0, r3
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <_ZN23CManejadorControlesBase18OnTemperaturaEventEi>:

void CManejadorControlesBase::OnTemperaturaEvent(int temperatura)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]

}
 80042f2:	bf00      	nop
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bc80      	pop	{r7}
 80042fa:	4770      	bx	lr

080042fc <_ZN23CManejadorControlesBase22OnTemperaturaRealEventEi>:
void CManejadorControlesBase::OnTemperaturaRealEvent(int temperatura)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]

}
 8004306:	bf00      	nop
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	bc80      	pop	{r7}
 800430e:	4770      	bx	lr

08004310 <_ZN23CManejadorControlesBase16OnNivelAireEventEi>:
void CManejadorControlesBase::OnNivelAireEvent(int aire)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]

}
 800431a:	bf00      	nop
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	bc80      	pop	{r7}
 8004322:	4770      	bx	lr

08004324 <_ZN23CManejadorControlesBase20OnBotonUnoClickEventEi>:
//eventros del boton uno
void CManejadorControlesBase::OnBotonUnoClickEvent(int tiempoClick)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]

}
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	bc80      	pop	{r7}
 8004336:	4770      	bx	lr

08004338 <_ZN23CManejadorControlesBase25OnBotonUnoPresionadoEventEv>:
void CManejadorControlesBase::OnBotonUnoPresionadoEvent()
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]

}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	bc80      	pop	{r7}
 8004348:	4770      	bx	lr

0800434a <_ZN23CManejadorControlesBase30OnBotonUnoPresionadoLargoEventEv>:
void CManejadorControlesBase::OnBotonUnoPresionadoLargoEvent()
{
 800434a:	b480      	push	{r7}
 800434c:	b083      	sub	sp, #12
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]

}
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	bc80      	pop	{r7}
 800435a:	4770      	bx	lr

0800435c <_ZN23CManejadorControlesBase21OnBotonUnoSueltoEventEv>:
void CManejadorControlesBase::OnBotonUnoSueltoEvent()
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]

}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	bc80      	pop	{r7}
 800436c:	4770      	bx	lr

0800436e <_ZN23CManejadorControlesBase20OnBotonDosClickEventEi>:
//eventros del boton dos
void CManejadorControlesBase::OnBotonDosClickEvent(int tiempoClick)
{
 800436e:	b480      	push	{r7}
 8004370:	b083      	sub	sp, #12
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
 8004376:	6039      	str	r1, [r7, #0]

}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	bc80      	pop	{r7}
 8004380:	4770      	bx	lr

08004382 <_ZN23CManejadorControlesBase25OnBotonDosPresionadoEventEv>:
void CManejadorControlesBase::OnBotonDosPresionadoEvent()
{
 8004382:	b480      	push	{r7}
 8004384:	b083      	sub	sp, #12
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]

}
 800438a:	bf00      	nop
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	bc80      	pop	{r7}
 8004392:	4770      	bx	lr

08004394 <_ZN23CManejadorControlesBase30OnBotonDosPresionadoLargoEventEv>:
void CManejadorControlesBase::OnBotonDosPresionadoLargoEvent()
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]

}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bc80      	pop	{r7}
 80043a4:	4770      	bx	lr

080043a6 <_ZN23CManejadorControlesBase21OnBotonDosSueltoEventEv>:
void CManejadorControlesBase::OnBotonDosSueltoEvent()
{
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]

}
 80043ae:	bf00      	nop
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bc80      	pop	{r7}
 80043b6:	4770      	bx	lr

080043b8 <_ZN23CManejadorControlesBase21OnBotonTresClickEventEi>:
//eventros del boton tres
void CManejadorControlesBase::OnBotonTresClickEvent(int tiempoClick)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]

}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bc80      	pop	{r7}
 80043ca:	4770      	bx	lr

080043cc <_ZN23CManejadorControlesBase26OnBotonTresPresionadoEventEv>:
void CManejadorControlesBase::OnBotonTresPresionadoEvent()
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]

}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	bc80      	pop	{r7}
 80043dc:	4770      	bx	lr

080043de <_ZN23CManejadorControlesBase31OnBotonTresPresionadoLargoEventEv>:
void CManejadorControlesBase::OnBotonTresPresionadoLargoEvent()
{
 80043de:	b480      	push	{r7}
 80043e0:	b083      	sub	sp, #12
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]

}
 80043e6:	bf00      	nop
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bc80      	pop	{r7}
 80043ee:	4770      	bx	lr

080043f0 <_ZN23CManejadorControlesBase22OnBotonTresSueltoEventEv>:
void CManejadorControlesBase::OnBotonTresSueltoEvent()
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]

}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bc80      	pop	{r7}
 8004400:	4770      	bx	lr

08004402 <_ZN23CManejadorControlesBase23OnBotonCuatroClickEventEi>:
//eventros del boton Cuatro
void CManejadorControlesBase::OnBotonCuatroClickEvent(int tiempoClick)
{
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
 800440a:	6039      	str	r1, [r7, #0]

}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	bc80      	pop	{r7}
 8004414:	4770      	bx	lr

08004416 <_ZN23CManejadorControlesBase28OnBotonCuatroPresionadoEventEv>:
void CManejadorControlesBase::OnBotonCuatroPresionadoEvent()
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]

}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	bc80      	pop	{r7}
 8004426:	4770      	bx	lr

08004428 <_ZN23CManejadorControlesBase33OnBotonCuatroPresionadoLargoEventEv>:
void CManejadorControlesBase::OnBotonCuatroPresionadoLargoEvent()
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]

}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	bc80      	pop	{r7}
 8004438:	4770      	bx	lr

0800443a <_ZN23CManejadorControlesBase24OnBotonCuatroSueltoEventEv>:
void CManejadorControlesBase::OnBotonCuatroSueltoEvent()
{
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]

}
 8004442:	bf00      	nop
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	bc80      	pop	{r7}
 800444a:	4770      	bx	lr

0800444c <_ZN23CManejadorControlesBase24OnBotonPerillaClickEventEi>:
//eventros del boton Perilla
void CManejadorControlesBase::OnBotonPerillaClickEvent(int tiempoClick)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]

}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	bc80      	pop	{r7}
 800445e:	4770      	bx	lr

08004460 <_ZN23CManejadorControlesBase29OnBotonPerillaPresionadoEventEv>:
void CManejadorControlesBase::OnBotonPerillaPresionadoEvent()
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]

}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	bc80      	pop	{r7}
 8004470:	4770      	bx	lr

08004472 <_ZN23CManejadorControlesBase34OnBotonPerillaPresionadoLargoEventEv>:
void CManejadorControlesBase::OnBotonPerillaPresionadoLargoEvent()
{
 8004472:	b480      	push	{r7}
 8004474:	b083      	sub	sp, #12
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]

}
 800447a:	bf00      	nop
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	bc80      	pop	{r7}
 8004482:	4770      	bx	lr

08004484 <_ZN23CManejadorControlesBase25OnBotonPerillaSueltoEventEv>:
void CManejadorControlesBase::OnBotonPerillaSueltoEvent()
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]

}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	bc80      	pop	{r7}
 8004494:	4770      	bx	lr

08004496 <_ZN23CManejadorControlesBase19OnPerillaIncrementoEv>:
//eventos del Encoder
void CManejadorControlesBase::OnPerillaIncremento()
{
 8004496:	b480      	push	{r7}
 8004498:	b083      	sub	sp, #12
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]

}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc80      	pop	{r7}
 80044a6:	4770      	bx	lr

080044a8 <_ZN23CManejadorControlesBase19OnPerillaDecrementoEv>:
void CManejadorControlesBase::OnPerillaDecremento()
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]

}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bc80      	pop	{r7}
 80044b8:	4770      	bx	lr

080044ba <_ZN7MAX6675C1Ev>:
 *      Author: Alcides Ramos
 */

#include "Max6675/Max6675.hpp"
#include "Uart/Uart.hpp"
MAX6675::MAX6675()
 80044ba:	b480      	push	{r7}
 80044bc:	b083      	sub	sp, #12
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
{

}
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4618      	mov	r0, r3
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bc80      	pop	{r7}
 80044cc:	4770      	bx	lr

080044ce <_ZN7MAX667515SetConfigDatPinEP12GPIO_TypeDeft>:
void MAX6675::SetConfigDatPin(GPIO_TypeDef *portDat, uint16_t pinDat)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b085      	sub	sp, #20
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	60f8      	str	r0, [r7, #12]
 80044d6:	60b9      	str	r1, [r7, #8]
 80044d8:	4613      	mov	r3, r2
 80044da:	80fb      	strh	r3, [r7, #6]
	DAT_MAX_GPIO_Port = portDat;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	601a      	str	r2, [r3, #0]
	DAT_MAX_Pin = pinDat;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	88fa      	ldrh	r2, [r7, #6]
 80044e6:	819a      	strh	r2, [r3, #12]

}
 80044e8:	bf00      	nop
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bc80      	pop	{r7}
 80044f0:	4770      	bx	lr

080044f2 <_ZN7MAX667514SetConfigCkPinEP12GPIO_TypeDeft>:
void MAX6675::SetConfigCkPin(GPIO_TypeDef *portCk, uint16_t pinCk)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b085      	sub	sp, #20
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	60f8      	str	r0, [r7, #12]
 80044fa:	60b9      	str	r1, [r7, #8]
 80044fc:	4613      	mov	r3, r2
 80044fe:	80fb      	strh	r3, [r7, #6]
	CK_MAX_GPIO_Port = portCk;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	605a      	str	r2, [r3, #4]
	CK_MAX_Pin = pinCk;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	88fa      	ldrh	r2, [r7, #6]
 800450a:	81da      	strh	r2, [r3, #14]

}
 800450c:	bf00      	nop
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	bc80      	pop	{r7}
 8004514:	4770      	bx	lr

08004516 <_ZN7MAX667514SetConfigCsPinEP12GPIO_TypeDeft>:
void MAX6675::SetConfigCsPin(GPIO_TypeDef *portCs, uint16_t pinCs)
{
 8004516:	b480      	push	{r7}
 8004518:	b085      	sub	sp, #20
 800451a:	af00      	add	r7, sp, #0
 800451c:	60f8      	str	r0, [r7, #12]
 800451e:	60b9      	str	r1, [r7, #8]
 8004520:	4613      	mov	r3, r2
 8004522:	80fb      	strh	r3, [r7, #6]
	CS_MAX_GPIO_Port = portCs;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	609a      	str	r2, [r3, #8]
	CS_MAX_Pin = pinCs;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	88fa      	ldrh	r2, [r7, #6]
 800452e:	821a      	strh	r2, [r3, #16]

}
 8004530:	bf00      	nop
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	bc80      	pop	{r7}
 8004538:	4770      	bx	lr

0800453a <_ZN7MAX667513MAX6675_pulsoEv>:
uint8_t MAX6675::MAX6675_pulso()
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b084      	sub	sp, #16
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
	uint8_t lei;
	HAL_GPIO_WritePin(CK_MAX_GPIO_Port, CK_MAX_Pin,	GPIO_PinState::GPIO_PIN_SET); //SACA UN 1 reloj
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6858      	ldr	r0, [r3, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	89db      	ldrh	r3, [r3, #14]
 800454a:	2201      	movs	r2, #1
 800454c:	4619      	mov	r1, r3
 800454e:	f001 ff9a 	bl	8006486 <HAL_GPIO_WritePin>
	Delay_us(10);
 8004552:	200a      	movs	r0, #10
 8004554:	f7fc ff22 	bl	800139c <_Z12delay_us_dwtm>
//	HAL_Delay(1);
	lei = HAL_GPIO_ReadPin(DAT_MAX_GPIO_Port, DAT_MAX_Pin); // lee el pin
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	899b      	ldrh	r3, [r3, #12]
 8004560:	4619      	mov	r1, r3
 8004562:	4610      	mov	r0, r2
 8004564:	f001 ff78 	bl	8006458 <HAL_GPIO_ReadPin>
 8004568:	4603      	mov	r3, r0
 800456a:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(CK_MAX_GPIO_Port, CK_MAX_Pin,	GPIO_PinState::GPIO_PIN_RESET); //SACA UN 0 reloj
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6858      	ldr	r0, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	89db      	ldrh	r3, [r3, #14]
 8004574:	2200      	movs	r2, #0
 8004576:	4619      	mov	r1, r3
 8004578:	f001 ff85 	bl	8006486 <HAL_GPIO_WritePin>
	Delay_us(10);
 800457c:	200a      	movs	r0, #10
 800457e:	f7fc ff0d 	bl	800139c <_Z12delay_us_dwtm>
//	HAL_Delay(1);
	return lei;
 8004582:	7bfb      	ldrb	r3, [r7, #15]
}
 8004584:	4618      	mov	r0, r3
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <_ZN7MAX667511MAX6675_leeEv>:
float MAX6675::MAX6675_lee()
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
	int tiempoClick = HAL_GetTick() - TiempoTranscurrido;
 8004594:	f001 f97a 	bl	800588c <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	613b      	str	r3, [r7, #16]
	if (tiempoClick < 275)
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	f5b3 7f89 	cmp.w	r3, #274	@ 0x112
 80045a8:	dc02      	bgt.n	80045b0 <_ZN7MAX667511MAX6675_leeEv+0x24>
	{
		return UltimaTemperatura;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	e04d      	b.n	800464c <_ZN7MAX667511MAX6675_leeEv+0xc0>
	}
	TiempoTranscurrido = HAL_GetTick();
 80045b0:	f001 f96c 	bl	800588c <HAL_GetTick>
 80045b4:	4603      	mov	r3, r0
 80045b6:	461a      	mov	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	615a      	str	r2, [r3, #20]

	uint16_t sensor_dato;
	uint16_t max6675_dato=0 ;
 80045bc:	2300      	movs	r3, #0
 80045be:	82fb      	strh	r3, [r7, #22]
	int8_t cont;
	HAL_GPIO_WritePin(CS_MAX_GPIO_Port, CS_MAX_Pin,	GPIO_PinState::GPIO_PIN_RESET); //Habilita el modulo
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6898      	ldr	r0, [r3, #8]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	8a1b      	ldrh	r3, [r3, #16]
 80045c8:	2200      	movs	r2, #0
 80045ca:	4619      	mov	r1, r3
 80045cc:	f001 ff5b 	bl	8006486 <HAL_GPIO_WritePin>
//	HAL_Delay(1);
	for (cont = 15; cont >= 0; cont--)
 80045d0:	230f      	movs	r3, #15
 80045d2:	757b      	strb	r3, [r7, #21]
 80045d4:	e01b      	b.n	800460e <_ZN7MAX667511MAX6675_leeEv+0x82>
	{
		if (MAX6675_pulso() == 1)
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7ff ffaf 	bl	800453a <_ZN7MAX667513MAX6675_pulsoEv>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b01      	cmp	r3, #1
 80045e0:	bf0c      	ite	eq
 80045e2:	2301      	moveq	r3, #1
 80045e4:	2300      	movne	r3, #0
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00a      	beq.n	8004602 <_ZN7MAX667511MAX6675_leeEv+0x76>
			max6675_dato = max6675_dato | 1 << cont;
 80045ec:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80045f0:	2201      	movs	r2, #1
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	b21a      	sxth	r2, r3
 80045f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	b21b      	sxth	r3, r3
 8004600:	82fb      	strh	r3, [r7, #22]
	for (cont = 15; cont >= 0; cont--)
 8004602:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004606:	b2db      	uxtb	r3, r3
 8004608:	3b01      	subs	r3, #1
 800460a:	b2db      	uxtb	r3, r3
 800460c:	757b      	strb	r3, [r7, #21]
 800460e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004612:	2b00      	cmp	r3, #0
 8004614:	dadf      	bge.n	80045d6 <_ZN7MAX667511MAX6675_leeEv+0x4a>

	}

	HAL_GPIO_WritePin(CS_MAX_GPIO_Port, CS_MAX_Pin,	GPIO_PinState::GPIO_PIN_SET); //APAGA el modulo
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6898      	ldr	r0, [r3, #8]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	8a1b      	ldrh	r3, [r3, #16]
 800461e:	2201      	movs	r2, #1
 8004620:	4619      	mov	r1, r3
 8004622:	f001 ff30 	bl	8006486 <HAL_GPIO_WritePin>
//	HAL_Delay(1);
	sensor_dato = (max6675_dato >> 3); //desplaz 3 veces
 8004626:	8afb      	ldrh	r3, [r7, #22]
 8004628:	08db      	lsrs	r3, r3, #3
 800462a:	81fb      	strh	r3, [r7, #14]
	UltimaTemperatura=(((float) sensor_dato * 0.25)); //0.25
 800462c:	89fb      	ldrh	r3, [r7, #14]
 800462e:	4618      	mov	r0, r3
 8004630:	f7fc fb94 	bl	8000d5c <__aeabi_ui2f>
 8004634:	4603      	mov	r3, r0
 8004636:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 800463a:	4618      	mov	r0, r3
 800463c:	f7fb fd90 	bl	8000160 <__aeabi_fmul>
 8004640:	4603      	mov	r3, r0
 8004642:	461a      	mov	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	619a      	str	r2, [r3, #24]
//	SerialPrintf("temperatura=%f sensor=%d\r\n", UltimaTemperatura,sensor_dato);
	return UltimaTemperatura;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	699b      	ldr	r3, [r3, #24]
}
 800464c:	4618      	mov	r0, r3
 800464e:	3718      	adds	r7, #24
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <_ZN7MAX66754InitEv>:
void MAX6675::Init()
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct =	{ 0 };
 800465c:	f107 0308 	add.w	r3, r7, #8
 8004660:	2200      	movs	r2, #0
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	605a      	str	r2, [r3, #4]
 8004666:	609a      	str	r2, [r3, #8]
 8004668:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(GPIOA, CK_MAX_Pin | CS_MAX_Pin, GPIO_PIN_RESET);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	89da      	ldrh	r2, [r3, #14]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	8a1b      	ldrh	r3, [r3, #16]
 8004672:	4313      	orrs	r3, r2
 8004674:	b29b      	uxth	r3, r3
 8004676:	2200      	movs	r2, #0
 8004678:	4619      	mov	r1, r3
 800467a:	4821      	ldr	r0, [pc, #132]	@ (8004700 <_ZN7MAX66754InitEv+0xac>)
 800467c:	f001 ff03 	bl	8006486 <HAL_GPIO_WritePin>
	/*Configure GPIO pin : DAT_MAX_Pin */
	GPIO_InitStruct.Pin = DAT_MAX_Pin;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	899b      	ldrh	r3, [r3, #12]
 8004684:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004686:	2300      	movs	r3, #0
 8004688:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800468a:	2300      	movs	r3, #0
 800468c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DAT_MAX_GPIO_Port, &GPIO_InitStruct);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f107 0208 	add.w	r2, r7, #8
 8004696:	4611      	mov	r1, r2
 8004698:	4618      	mov	r0, r3
 800469a:	f001 fd59 	bl	8006150 <HAL_GPIO_Init>

	/*Configure GPIO pins : CK_MAX_Pin CS_MAX_Pin */
	GPIO_InitStruct.Pin = CK_MAX_Pin | CS_MAX_Pin;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	89da      	ldrh	r2, [r3, #14]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	8a1b      	ldrh	r3, [r3, #16]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046ac:	2301      	movs	r3, #1
 80046ae:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046b0:	2300      	movs	r3, #0
 80046b2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046b4:	2302      	movs	r3, #2
 80046b6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046b8:	f107 0308 	add.w	r3, r7, #8
 80046bc:	4619      	mov	r1, r3
 80046be:	4810      	ldr	r0, [pc, #64]	@ (8004700 <_ZN7MAX66754InitEv+0xac>)
 80046c0:	f001 fd46 	bl	8006150 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(CK_MAX_GPIO_Port, CK_MAX_Pin, GPIO_PinState::GPIO_PIN_RESET); //SACA UN 0 reloj
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6858      	ldr	r0, [r3, #4]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	89db      	ldrh	r3, [r3, #14]
 80046cc:	2200      	movs	r2, #0
 80046ce:	4619      	mov	r1, r3
 80046d0:	f001 fed9 	bl	8006486 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_MAX_GPIO_Port, CS_MAX_Pin, GPIO_PinState::GPIO_PIN_SET); //APAGA el modulo
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6898      	ldr	r0, [r3, #8]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	8a1b      	ldrh	r3, [r3, #16]
 80046dc:	2201      	movs	r2, #1
 80046de:	4619      	mov	r1, r3
 80046e0:	f001 fed1 	bl	8006486 <HAL_GPIO_WritePin>

	HAL_Delay(100);
 80046e4:	2064      	movs	r0, #100	@ 0x64
 80046e6:	f001 f8db 	bl	80058a0 <HAL_Delay>
	TiempoTranscurrido = HAL_GetTick();
 80046ea:	f001 f8cf 	bl	800588c <HAL_GetTick>
 80046ee:	4603      	mov	r3, r0
 80046f0:	461a      	mov	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	615a      	str	r2, [r3, #20]
}
 80046f6:	bf00      	nop
 80046f8:	3718      	adds	r7, #24
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40010800 	.word	0x40010800

08004704 <_ZN3PwmC1Ev>:

#include <PWM/Pwm.hpp>
#include "stm32f1xx_hal.h"
#include "stdlib.h"

Pwm::Pwm()
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	4a04      	ldr	r2, [pc, #16]	@ (8004720 <_ZN3PwmC1Ev+0x1c>)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4618      	mov	r0, r3
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	bc80      	pop	{r7}
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	0800b8c8 	.word	0x0800b8c8

08004724 <_ZN3PwmD1Ev>:

Pwm::~Pwm()
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	4a04      	ldr	r2, [pc, #16]	@ (8004740 <_ZN3PwmD1Ev+0x1c>)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4618      	mov	r0, r3
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	bc80      	pop	{r7}
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	0800b8c8 	.word	0x0800b8c8

08004744 <_ZN3PwmD0Ev>:
Pwm::~Pwm()
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
}
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f7ff ffe9 	bl	8004724 <_ZN3PwmD1Ev>
 8004752:	214c      	movs	r1, #76	@ 0x4c
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f003 fe3d 	bl	80083d4 <_ZdlPvj>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4618      	mov	r0, r3
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <_ZN3Pwm4InitEP11TIM_TypeDefii>:
void Pwm::Init(TIM_TypeDef * timer, int chanel,int periodo)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b092      	sub	sp, #72	@ 0x48
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
 8004770:	603b      	str	r3, [r7, #0]
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004772:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004776:	2200      	movs	r2, #0
 8004778:	601a      	str	r2, [r3, #0]
 800477a:	605a      	str	r2, [r3, #4]
 800477c:	609a      	str	r2, [r3, #8]
 800477e:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004780:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 800478a:	f107 0314 	add.w	r3, r7, #20
 800478e:	2200      	movs	r2, #0
 8004790:	601a      	str	r2, [r3, #0]
 8004792:	605a      	str	r2, [r3, #4]
 8004794:	609a      	str	r2, [r3, #8]
 8004796:	60da      	str	r2, [r3, #12]
 8004798:	611a      	str	r2, [r3, #16]
 800479a:	615a      	str	r2, [r3, #20]
 800479c:	619a      	str	r2, [r3, #24]

	  Htim.Instance = timer;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	605a      	str	r2, [r3, #4]
	  Htim.Init.Prescaler = 0;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	609a      	str	r2, [r3, #8]
	  Htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	60da      	str	r2, [r3, #12]
	  Htim.Init.Period = periodo;
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	611a      	str	r2, [r3, #16]
	  Htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	615a      	str	r2, [r3, #20]
	  Htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2280      	movs	r2, #128	@ 0x80
 80047c0:	61da      	str	r2, [r3, #28]
	  if (HAL_TIM_Base_Init(&Htim) != HAL_OK)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	3304      	adds	r3, #4
 80047c6:	4618      	mov	r0, r3
 80047c8:	f002 fdc2 	bl	8007350 <HAL_TIM_Base_Init>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	bf14      	ite	ne
 80047d2:	2301      	movne	r3, #1
 80047d4:	2300      	moveq	r3, #0
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d002      	beq.n	80047e2 <_ZN3Pwm4InitEP11TIM_TypeDefii+0x7e>
	  {
	    Error_Handler();
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f000 f889 	bl	80048f4 <_ZN3Pwm13Error_HandlerEv>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80047e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80047e6:	63bb      	str	r3, [r7, #56]	@ 0x38
	  if (HAL_TIM_ConfigClockSource(&Htim, &sClockSourceConfig) != HAL_OK)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	3304      	adds	r3, #4
 80047ec:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80047f0:	4611      	mov	r1, r2
 80047f2:	4618      	mov	r0, r3
 80047f4:	f003 f8b6 	bl	8007964 <HAL_TIM_ConfigClockSource>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	bf14      	ite	ne
 80047fe:	2301      	movne	r3, #1
 8004800:	2300      	moveq	r3, #0
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	d002      	beq.n	800480e <_ZN3Pwm4InitEP11TIM_TypeDefii+0xaa>
	  {
	    Error_Handler();
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 f873 	bl	80048f4 <_ZN3Pwm13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_Init(&Htim) != HAL_OK)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	3304      	adds	r3, #4
 8004812:	4618      	mov	r0, r3
 8004814:	f002 fdeb 	bl	80073ee <HAL_TIM_PWM_Init>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	bf14      	ite	ne
 800481e:	2301      	movne	r3, #1
 8004820:	2300      	moveq	r3, #0
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <_ZN3Pwm4InitEP11TIM_TypeDefii+0xca>
	  {
	    Error_Handler();
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 f863 	bl	80048f4 <_ZN3Pwm13Error_HandlerEv>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800482e:	2300      	movs	r3, #0
 8004830:	633b      	str	r3, [r7, #48]	@ 0x30
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004832:	2300      	movs	r3, #0
 8004834:	637b      	str	r3, [r7, #52]	@ 0x34
	  if (HAL_TIMEx_MasterConfigSynchronization(&Htim, &sMasterConfig) != HAL_OK)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	3304      	adds	r3, #4
 800483a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800483e:	4611      	mov	r1, r2
 8004840:	4618      	mov	r0, r3
 8004842:	f003 fc27 	bl	8008094 <HAL_TIMEx_MasterConfigSynchronization>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	bf14      	ite	ne
 800484c:	2301      	movne	r3, #1
 800484e:	2300      	moveq	r3, #0
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <_ZN3Pwm4InitEP11TIM_TypeDefii+0xf8>
	  {
	    Error_Handler();
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f000 f84c 	bl	80048f4 <_ZN3Pwm13Error_HandlerEv>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800485c:	2360      	movs	r3, #96	@ 0x60
 800485e:	617b      	str	r3, [r7, #20]
	  sConfigOC.Pulse = 0;
 8004860:	2300      	movs	r3, #0
 8004862:	61bb      	str	r3, [r7, #24]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004864:	2300      	movs	r3, #0
 8004866:	61fb      	str	r3, [r7, #28]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004868:	2300      	movs	r3, #0
 800486a:	627b      	str	r3, [r7, #36]	@ 0x24
	  if (HAL_TIM_PWM_ConfigChannel(&Htim, &sConfigOC, chanel) != HAL_OK)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	3304      	adds	r3, #4
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	f107 0114 	add.w	r1, r7, #20
 8004876:	4618      	mov	r0, r3
 8004878:	f002 ffb2 	bl	80077e0 <HAL_TIM_PWM_ConfigChannel>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	bf14      	ite	ne
 8004882:	2301      	movne	r3, #1
 8004884:	2300      	moveq	r3, #0
 8004886:	b2db      	uxtb	r3, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	d002      	beq.n	8004892 <_ZN3Pwm4InitEP11TIM_TypeDefii+0x12e>
	  {
	    Error_Handler();
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f000 f831 	bl	80048f4 <_ZN3Pwm13Error_HandlerEv>
	  }
	  HAL_TIM_MspPostInit(&Htim);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	3304      	adds	r3, #4
 8004896:	4619      	mov	r1, r3
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f000 f835 	bl	8004908 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef>
	HAL_TIM_PWM_Start(&Htim,chanel);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	3304      	adds	r3, #4
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	4611      	mov	r1, r2
 80048a6:	4618      	mov	r0, r3
 80048a8:	f002 fdf0 	bl	800748c <HAL_TIM_PWM_Start>
	Htim.Instance->CCR1=25000;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 80048b4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80048b6:	bf00      	nop
 80048b8:	3748      	adds	r7, #72	@ 0x48
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
	...

080048c0 <_ZN3Pwm12SicloTrabajoEi>:
void Pwm::SicloTrabajo(int siclo)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
	// si 65535->100
	// x->siclo
	int valor=siclo*Htim.Init.Period/100;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	fb02 f303 	mul.w	r3, r2, r3
 80048d4:	4a06      	ldr	r2, [pc, #24]	@ (80048f0 <_ZN3Pwm12SicloTrabajoEi+0x30>)
 80048d6:	fba2 2303 	umull	r2, r3, r2, r3
 80048da:	095b      	lsrs	r3, r3, #5
 80048dc:	60fb      	str	r3, [r7, #12]
	Htim.Instance->CCR1=valor;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80048e6:	bf00      	nop
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bc80      	pop	{r7}
 80048ee:	4770      	bx	lr
 80048f0:	51eb851f 	.word	0x51eb851f

080048f4 <_ZN3Pwm13Error_HandlerEv>:

void Pwm::Error_Handler(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]

}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	bc80      	pop	{r7}
 8004904:	4770      	bx	lr
	...

08004908 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef>:
void Pwm::HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b08a      	sub	sp, #40	@ 0x28
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004912:	f107 0314 	add.w	r3, r7, #20
 8004916:	2200      	movs	r2, #0
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	605a      	str	r2, [r3, #4]
 800491c:	609a      	str	r2, [r3, #8]
 800491e:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a28      	ldr	r2, [pc, #160]	@ (80049c8 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc0>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d119      	bne.n	800495e <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0x56>
  {
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800492a:	4b28      	ldr	r3, [pc, #160]	@ (80049cc <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc4>)
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	4a27      	ldr	r2, [pc, #156]	@ (80049cc <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc4>)
 8004930:	f043 0304 	orr.w	r3, r3, #4
 8004934:	6193      	str	r3, [r2, #24]
 8004936:	4b25      	ldr	r3, [pc, #148]	@ (80049cc <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc4>)
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	f003 0304 	and.w	r3, r3, #4
 800493e:	613b      	str	r3, [r7, #16]
 8004940:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004942:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004948:	2302      	movs	r3, #2
 800494a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800494c:	2302      	movs	r3, #2
 800494e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004950:	f107 0314 	add.w	r3, r7, #20
 8004954:	4619      	mov	r1, r3
 8004956:	481e      	ldr	r0, [pc, #120]	@ (80049d0 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc8>)
 8004958:	f001 fbfa 	bl	8006150 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
  }

}
 800495c:	e02f      	b.n	80049be <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xb6>
  else if(htim->Instance==TIM2)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004966:	d12a      	bne.n	80049be <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xb6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004968:	4b18      	ldr	r3, [pc, #96]	@ (80049cc <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc4>)
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	4a17      	ldr	r2, [pc, #92]	@ (80049cc <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc4>)
 800496e:	f043 0304 	orr.w	r3, r3, #4
 8004972:	6193      	str	r3, [r2, #24]
 8004974:	4b15      	ldr	r3, [pc, #84]	@ (80049cc <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc4>)
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004980:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004986:	2302      	movs	r3, #2
 8004988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800498a:	2302      	movs	r3, #2
 800498c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800498e:	f107 0314 	add.w	r3, r7, #20
 8004992:	4619      	mov	r1, r3
 8004994:	480e      	ldr	r0, [pc, #56]	@ (80049d0 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc8>)
 8004996:	f001 fbdb 	bl	8006150 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800499a:	4b0e      	ldr	r3, [pc, #56]	@ (80049d4 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xcc>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	627b      	str	r3, [r7, #36]	@ 0x24
 80049a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80049a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049aa:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80049ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80049b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80049b8:	4a06      	ldr	r2, [pc, #24]	@ (80049d4 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xcc>)
 80049ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049bc:	6053      	str	r3, [r2, #4]
}
 80049be:	bf00      	nop
 80049c0:	3728      	adds	r7, #40	@ 0x28
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	40012c00 	.word	0x40012c00
 80049cc:	40021000 	.word	0x40021000
 80049d0:	40010800 	.word	0x40010800
 80049d4:	40010000 	.word	0x40010000

080049d8 <_Z16USART1_UART_Initv>:
	}
}

//static
void USART1_UART_Init(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	Huart1.Instance = USART1;
 80049dc:	4b13      	ldr	r3, [pc, #76]	@ (8004a2c <_Z16USART1_UART_Initv+0x54>)
 80049de:	4a14      	ldr	r2, [pc, #80]	@ (8004a30 <_Z16USART1_UART_Initv+0x58>)
 80049e0:	601a      	str	r2, [r3, #0]
	Huart1.Init.BaudRate = 115200;
 80049e2:	4b12      	ldr	r3, [pc, #72]	@ (8004a2c <_Z16USART1_UART_Initv+0x54>)
 80049e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80049e8:	605a      	str	r2, [r3, #4]
	Huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80049ea:	4b10      	ldr	r3, [pc, #64]	@ (8004a2c <_Z16USART1_UART_Initv+0x54>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	609a      	str	r2, [r3, #8]
	Huart1.Init.StopBits = UART_STOPBITS_1;
 80049f0:	4b0e      	ldr	r3, [pc, #56]	@ (8004a2c <_Z16USART1_UART_Initv+0x54>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	60da      	str	r2, [r3, #12]
	Huart1.Init.Parity = UART_PARITY_NONE;
 80049f6:	4b0d      	ldr	r3, [pc, #52]	@ (8004a2c <_Z16USART1_UART_Initv+0x54>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	611a      	str	r2, [r3, #16]
	Huart1.Init.Mode = UART_MODE_TX_RX;
 80049fc:	4b0b      	ldr	r3, [pc, #44]	@ (8004a2c <_Z16USART1_UART_Initv+0x54>)
 80049fe:	220c      	movs	r2, #12
 8004a00:	615a      	str	r2, [r3, #20]
	Huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a02:	4b0a      	ldr	r3, [pc, #40]	@ (8004a2c <_Z16USART1_UART_Initv+0x54>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	619a      	str	r2, [r3, #24]
	Huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a08:	4b08      	ldr	r3, [pc, #32]	@ (8004a2c <_Z16USART1_UART_Initv+0x54>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&Huart1) != HAL_OK)
 8004a0e:	4807      	ldr	r0, [pc, #28]	@ (8004a2c <_Z16USART1_UART_Initv+0x54>)
 8004a10:	f003 fc01 	bl	8008216 <HAL_UART_Init>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	bf14      	ite	ne
 8004a1a:	2301      	movne	r3, #1
 8004a1c:	2300      	moveq	r3, #0
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <_Z16USART1_UART_Initv+0x50>
	{
		ErrorHandler();
 8004a24:	f000 f806 	bl	8004a34 <_Z12ErrorHandlerv>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8004a28:	bf00      	nop
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	200001f8 	.word	0x200001f8
 8004a30:	40013800 	.word	0x40013800

08004a34 <_Z12ErrorHandlerv>:
void ErrorHandler(void)
{
 8004a34:	b480      	push	{r7}
 8004a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a38:	b672      	cpsid	i
}
 8004a3a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8004a3c:	bf00      	nop
 8004a3e:	e7fd      	b.n	8004a3c <_Z12ErrorHandlerv+0x8>

08004a40 <_Z16IncializaSistemav>:

CestacionVirtual *estacion;
//TIM_HandleTypeDef htim2;

void IncializaSistema()
{
 8004a40:	b598      	push	{r3, r4, r7, lr}
 8004a42:	af00      	add	r7, sp, #0
	  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004a44:	2200      	movs	r2, #0
 8004a46:	2100      	movs	r1, #0
 8004a48:	2028      	movs	r0, #40	@ 0x28
 8004a4a:	f001 fb4a 	bl	80060e2 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004a4e:	2028      	movs	r0, #40	@ 0x28
 8004a50:	f001 fb63 	bl	800611a <HAL_NVIC_EnableIRQ>

	USART1_UART_Init();
 8004a54:	f7ff ffc0 	bl	80049d8 <_Z16USART1_UART_Initv>
	estacion=new CestacionVirtual();
 8004a58:	f44f 70cc 	mov.w	r0, #408	@ 0x198
 8004a5c:	f003 fcbc 	bl	80083d8 <_Znwj>
 8004a60:	4603      	mov	r3, r0
 8004a62:	461c      	mov	r4, r3
 8004a64:	4620      	mov	r0, r4
 8004a66:	f7fd fa17 	bl	8001e98 <_ZN16CestacionVirtualC1Ev>
 8004a6a:	4b06      	ldr	r3, [pc, #24]	@ (8004a84 <_Z16IncializaSistemav+0x44>)
 8004a6c:	601c      	str	r4, [r3, #0]
	ILI9341_Init(); //initial driver setup to drive ili9341
 8004a6e:	f7ff f86b 	bl	8003b48 <_Z12ILI9341_Initv>
	ILI9341_Fill_Screen(WHITE);
 8004a72:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004a76:	f7ff fa0f 	bl	8003e98 <_Z19ILI9341_Fill_Screent>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8004a7a:	2003      	movs	r0, #3
 8004a7c:	f7ff f806 	bl	8003a8c <_Z20ILI9341_Set_Rotationh>
}
 8004a80:	bf00      	nop
 8004a82:	bd98      	pop	{r3, r4, r7, pc}
 8004a84:	20000240 	.word	0x20000240

08004a88 <_Z14EjecutaSistemav>:

void EjecutaSistema()
{
 8004a88:	b590      	push	{r4, r7, lr}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
	CPantallaManual *pantalla=new CPantallaManual();
 8004a8e:	20d4      	movs	r0, #212	@ 0xd4
 8004a90:	f003 fca2 	bl	80083d8 <_Znwj>
 8004a94:	4603      	mov	r3, r0
 8004a96:	461c      	mov	r4, r3
 8004a98:	4620      	mov	r0, r4
 8004a9a:	f7fe fabd 	bl	8003018 <_ZN15CPantallaManualC1Ev>
 8004a9e:	607c      	str	r4, [r7, #4]
	pantalla->SetEstacion(estacion);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	3358      	adds	r3, #88	@ 0x58
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a0f      	ldr	r2, [pc, #60]	@ (8004ae8 <_Z14EjecutaSistemav+0x60>)
 8004aaa:	6812      	ldr	r2, [r2, #0]
 8004aac:	4611      	mov	r1, r2
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	4798      	blx	r3
	pantalla->Show();
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	3348      	adds	r3, #72	@ 0x48
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	4798      	blx	r3
	while(1)
	{
		estacion->Procesa();
 8004abe:	4b0a      	ldr	r3, [pc, #40]	@ (8004ae8 <_Z14EjecutaSistemav+0x60>)
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	4b09      	ldr	r3, [pc, #36]	@ (8004ae8 <_Z14EjecutaSistemav+0x60>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	332c      	adds	r3, #44	@ 0x2c
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4610      	mov	r0, r2
 8004ace:	4798      	blx	r3
		pantalla->Refresca();
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3354      	adds	r3, #84	@ 0x54
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	4798      	blx	r3
		HAL_Delay(1);
 8004adc:	2001      	movs	r0, #1
 8004ade:	f000 fedf 	bl	80058a0 <HAL_Delay>
		estacion->Procesa();
 8004ae2:	bf00      	nop
 8004ae4:	e7eb      	b.n	8004abe <_Z14EjecutaSistemav+0x36>
 8004ae6:	bf00      	nop
 8004ae8:	20000240 	.word	0x20000240

08004aec <HAL_GPIO_EXTI_Callback>:
	}
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	4603      	mov	r3, r0
 8004af4:	80fb      	strh	r3, [r7, #6]
	estacion->InterrupcionEncoder();
 8004af6:	4b06      	ldr	r3, [pc, #24]	@ (8004b10 <HAL_GPIO_EXTI_Callback+0x24>)
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	4b05      	ldr	r3, [pc, #20]	@ (8004b10 <HAL_GPIO_EXTI_Callback+0x24>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	3330      	adds	r3, #48	@ 0x30
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4610      	mov	r0, r2
 8004b06:	4798      	blx	r3
}
 8004b08:	bf00      	nop
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	20000240 	.word	0x20000240

08004b14 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b08a      	sub	sp, #40	@ 0x28
 8004b18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004b1a:	4b72      	ldr	r3, [pc, #456]	@ (8004ce4 <MX_GPIO_Init+0x1d0>)
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	4a71      	ldr	r2, [pc, #452]	@ (8004ce4 <MX_GPIO_Init+0x1d0>)
 8004b20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b24:	6193      	str	r3, [r2, #24]
 8004b26:	4b6f      	ldr	r3, [pc, #444]	@ (8004ce4 <MX_GPIO_Init+0x1d0>)
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b2e:	617b      	str	r3, [r7, #20]
 8004b30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b32:	4b6c      	ldr	r3, [pc, #432]	@ (8004ce4 <MX_GPIO_Init+0x1d0>)
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	4a6b      	ldr	r2, [pc, #428]	@ (8004ce4 <MX_GPIO_Init+0x1d0>)
 8004b38:	f043 0310 	orr.w	r3, r3, #16
 8004b3c:	6193      	str	r3, [r2, #24]
 8004b3e:	4b69      	ldr	r3, [pc, #420]	@ (8004ce4 <MX_GPIO_Init+0x1d0>)
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	f003 0310 	and.w	r3, r3, #16
 8004b46:	613b      	str	r3, [r7, #16]
 8004b48:	693b      	ldr	r3, [r7, #16]
//  __HAL_RCC_GPIOF_CLK_ENABLE();
//  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b4a:	4b66      	ldr	r3, [pc, #408]	@ (8004ce4 <MX_GPIO_Init+0x1d0>)
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	4a65      	ldr	r2, [pc, #404]	@ (8004ce4 <MX_GPIO_Init+0x1d0>)
 8004b50:	f043 0304 	orr.w	r3, r3, #4
 8004b54:	6193      	str	r3, [r2, #24]
 8004b56:	4b63      	ldr	r3, [pc, #396]	@ (8004ce4 <MX_GPIO_Init+0x1d0>)
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	f003 0304 	and.w	r3, r3, #4
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b62:	4b60      	ldr	r3, [pc, #384]	@ (8004ce4 <MX_GPIO_Init+0x1d0>)
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	4a5f      	ldr	r2, [pc, #380]	@ (8004ce4 <MX_GPIO_Init+0x1d0>)
 8004b68:	f043 0308 	orr.w	r3, r3, #8
 8004b6c:	6193      	str	r3, [r2, #24]
 8004b6e:	4b5d      	ldr	r3, [pc, #372]	@ (8004ce4 <MX_GPIO_Init+0x1d0>)
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	f003 0308 	and.w	r3, r3, #8
 8004b76:	60bb      	str	r3, [r7, #8]
 8004b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b7a:	4b5a      	ldr	r3, [pc, #360]	@ (8004ce4 <MX_GPIO_Init+0x1d0>)
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	4a59      	ldr	r2, [pc, #356]	@ (8004ce4 <MX_GPIO_Init+0x1d0>)
 8004b80:	f043 0320 	orr.w	r3, r3, #32
 8004b84:	6193      	str	r3, [r2, #24]
 8004b86:	4b57      	ldr	r3, [pc, #348]	@ (8004ce4 <MX_GPIO_Init+0x1d0>)
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	f003 0320 	and.w	r3, r3, #32
 8004b8e:	607b      	str	r3, [r7, #4]
 8004b90:	687b      	ldr	r3, [r7, #4]
//  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8004b92:	2304      	movs	r3, #4
 8004b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b96:	2300      	movs	r3, #0
 8004b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8004b9e:	f107 0318 	add.w	r3, r7, #24
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	4850      	ldr	r0, [pc, #320]	@ (8004ce8 <MX_GPIO_Init+0x1d4>)
 8004ba6:	f001 fad3 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 8004baa:	2368      	movs	r3, #104	@ 0x68
 8004bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004bba:	f107 0318 	add.w	r3, r7, #24
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	4849      	ldr	r0, [pc, #292]	@ (8004ce8 <MX_GPIO_Init+0x1d4>)
 8004bc2:	f001 fac5 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8004bc6:	2310      	movs	r3, #16
 8004bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8004bd2:	f107 0318 	add.w	r3, r7, #24
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	4843      	ldr	r0, [pc, #268]	@ (8004ce8 <MX_GPIO_Init+0x1d4>)
 8004bda:	f001 fab9 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 8004bde:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004be4:	2300      	movs	r3, #0
 8004be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be8:	2300      	movs	r3, #0
 8004bea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8004bec:	f107 0318 	add.w	r3, r7, #24
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	483e      	ldr	r0, [pc, #248]	@ (8004cec <MX_GPIO_Init+0x1d8>)
 8004bf4:	f001 faac 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004bf8:	2332      	movs	r3, #50	@ 0x32
 8004bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c00:	2300      	movs	r3, #0
 8004c02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c04:	2303      	movs	r3, #3
 8004c06:	627b      	str	r3, [r7, #36]	@ 0x24
  //GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c08:	f107 0318 	add.w	r3, r7, #24
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	4837      	ldr	r0, [pc, #220]	@ (8004cec <MX_GPIO_Init+0x1d8>)
 8004c10:	f001 fa9e 	bl	8006150 <HAL_GPIO_Init>
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
////  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
//  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004c14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c22:	2303      	movs	r3, #3
 8004c24:	627b      	str	r3, [r7, #36]	@ 0x24
  //GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004c26:	f107 0318 	add.w	r3, r7, #24
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	4830      	ldr	r0, [pc, #192]	@ (8004cf0 <MX_GPIO_Init+0x1dc>)
 8004c2e:	f001 fa8f 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8004c32:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8004c36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c40:	2302      	movs	r3, #2
 8004c42:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c44:	f107 0318 	add.w	r3, r7, #24
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4829      	ldr	r0, [pc, #164]	@ (8004cf0 <MX_GPIO_Init+0x1dc>)
 8004c4c:	f001 fa80 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8004c50:	2340      	movs	r3, #64	@ 0x40
 8004c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c54:	2301      	movs	r3, #1
 8004c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  //HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8004c60:	2380      	movs	r3, #128	@ 0x80
 8004c62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c64:	2300      	movs	r3, #0
 8004c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	623b      	str	r3, [r7, #32]
  //HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8004c6c:	f240 4303 	movw	r3, #1027	@ 0x403
 8004c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c72:	2301      	movs	r3, #1
 8004c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c76:	2300      	movs	r3, #0
 8004c78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c7e:	f107 0318 	add.w	r3, r7, #24
 8004c82:	4619      	mov	r1, r3
 8004c84:	4819      	ldr	r0, [pc, #100]	@ (8004cec <MX_GPIO_Init+0x1d8>)
 8004c86:	f001 fa63 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8004c8a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8004c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c90:	2302      	movs	r3, #2
 8004c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c94:	2300      	movs	r3, #0
 8004c96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  //GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c9c:	f107 0318 	add.w	r3, r7, #24
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	4814      	ldr	r0, [pc, #80]	@ (8004cf4 <MX_GPIO_Init+0x1e0>)
 8004ca4:	f001 fa54 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004ca8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8004cac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cae:	2302      	movs	r3, #2
 8004cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	627b      	str	r3, [r7, #36]	@ 0x24
//  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
//  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8004cba:	2200      	movs	r2, #0
 8004cbc:	2168      	movs	r1, #104	@ 0x68
 8004cbe:	480a      	ldr	r0, [pc, #40]	@ (8004ce8 <MX_GPIO_Init+0x1d4>)
 8004cc0:	f001 fbe1 	bl	8006486 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8004cca:	4809      	ldr	r0, [pc, #36]	@ (8004cf0 <MX_GPIO_Init+0x1dc>)
 8004ccc:	f001 fbdb 	bl	8006486 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
//  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f240 4103 	movw	r1, #1027	@ 0x403
 8004cd6:	4805      	ldr	r0, [pc, #20]	@ (8004cec <MX_GPIO_Init+0x1d8>)
 8004cd8:	f001 fbd5 	bl	8006486 <HAL_GPIO_WritePin>

}
 8004cdc:	bf00      	nop
 8004cde:	3728      	adds	r7, #40	@ 0x28
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	40021000 	.word	0x40021000
 8004ce8:	40011800 	.word	0x40011800
 8004cec:	40011000 	.word	0x40011000
 8004cf0:	40010c00 	.word	0x40010c00
 8004cf4:	40010800 	.word	0x40010800

08004cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004cfc:	f000 fd6e 	bl	80057dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004d00:	f000 f812 	bl	8004d28 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004d04:	f000 fa42 	bl	800518c <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 8004d08:	f000 f8b6 	bl	8004e78 <_ZL12MX_SPI1_Initv>
  MX_USART1_UART_Init();
 8004d0c:	f000 fa10 	bl	8005130 <_ZL19MX_USART1_UART_Initv>
  MX_ADC1_Init();
 8004d10:	f000 f86a 	bl	8004de8 <_ZL12MX_ADC1_Initv>
  MX_TIM1_Init();
 8004d14:	f000 f8ec 	bl	8004ef0 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 8004d18:	f000 f97e 	bl	8005018 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */
	IncializaSistema();
 8004d1c:	f7ff fe90 	bl	8004a40 <_Z16IncializaSistemav>
	EjecutaSistema();
 8004d20:	f7ff feb2 	bl	8004a88 <_Z14EjecutaSistemav>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004d24:	bf00      	nop
 8004d26:	e7fd      	b.n	8004d24 <main+0x2c>

08004d28 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b094      	sub	sp, #80	@ 0x50
 8004d2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004d2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004d32:	2228      	movs	r2, #40	@ 0x28
 8004d34:	2100      	movs	r1, #0
 8004d36:	4618      	mov	r0, r3
 8004d38:	f004 f9b1 	bl	800909e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004d3c:	f107 0314 	add.w	r3, r7, #20
 8004d40:	2200      	movs	r2, #0
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	605a      	str	r2, [r3, #4]
 8004d46:	609a      	str	r2, [r3, #8]
 8004d48:	60da      	str	r2, [r3, #12]
 8004d4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004d4c:	1d3b      	adds	r3, r7, #4
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	605a      	str	r2, [r3, #4]
 8004d54:	609a      	str	r2, [r3, #8]
 8004d56:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004d58:	2302      	movs	r3, #2
 8004d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004d60:	2310      	movs	r3, #16
 8004d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004d64:	2300      	movs	r3, #0
 8004d66:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d68:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f001 fbbb 	bl	80064e8 <HAL_RCC_OscConfig>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	bf14      	ite	ne
 8004d78:	2301      	movne	r3, #1
 8004d7a:	2300      	moveq	r3, #0
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <_Z18SystemClock_Configv+0x5e>
  {
    Error_Handler();
 8004d82:	f000 fa89 	bl	8005298 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004d86:	230f      	movs	r3, #15
 8004d88:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004d92:	2300      	movs	r3, #0
 8004d94:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004d96:	2300      	movs	r3, #0
 8004d98:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004d9a:	f107 0314 	add.w	r3, r7, #20
 8004d9e:	2100      	movs	r1, #0
 8004da0:	4618      	mov	r0, r3
 8004da2:	f001 fe23 	bl	80069ec <HAL_RCC_ClockConfig>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	bf14      	ite	ne
 8004dac:	2301      	movne	r3, #1
 8004dae:	2300      	moveq	r3, #0
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <_Z18SystemClock_Configv+0x92>
  {
    Error_Handler();
 8004db6:	f000 fa6f 	bl	8005298 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004dba:	2302      	movs	r3, #2
 8004dbc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004dc2:	1d3b      	adds	r3, r7, #4
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f001 ff9f 	bl	8006d08 <HAL_RCCEx_PeriphCLKConfig>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	bf14      	ite	ne
 8004dd0:	2301      	movne	r3, #1
 8004dd2:	2300      	moveq	r3, #0
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8004dda:	f000 fa5d 	bl	8005298 <Error_Handler>
  }
}
 8004dde:	bf00      	nop
 8004de0:	3750      	adds	r7, #80	@ 0x50
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
	...

08004de8 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004dee:	1d3b      	adds	r3, r7, #4
 8004df0:	2200      	movs	r2, #0
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	605a      	str	r2, [r3, #4]
 8004df6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8004df8:	4b1d      	ldr	r3, [pc, #116]	@ (8004e70 <_ZL12MX_ADC1_Initv+0x88>)
 8004dfa:	4a1e      	ldr	r2, [pc, #120]	@ (8004e74 <_ZL12MX_ADC1_Initv+0x8c>)
 8004dfc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004dfe:	4b1c      	ldr	r3, [pc, #112]	@ (8004e70 <_ZL12MX_ADC1_Initv+0x88>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004e04:	4b1a      	ldr	r3, [pc, #104]	@ (8004e70 <_ZL12MX_ADC1_Initv+0x88>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004e0a:	4b19      	ldr	r3, [pc, #100]	@ (8004e70 <_ZL12MX_ADC1_Initv+0x88>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004e10:	4b17      	ldr	r3, [pc, #92]	@ (8004e70 <_ZL12MX_ADC1_Initv+0x88>)
 8004e12:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8004e16:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004e18:	4b15      	ldr	r3, [pc, #84]	@ (8004e70 <_ZL12MX_ADC1_Initv+0x88>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8004e1e:	4b14      	ldr	r3, [pc, #80]	@ (8004e70 <_ZL12MX_ADC1_Initv+0x88>)
 8004e20:	2201      	movs	r2, #1
 8004e22:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004e24:	4812      	ldr	r0, [pc, #72]	@ (8004e70 <_ZL12MX_ADC1_Initv+0x88>)
 8004e26:	f000 fd5f 	bl	80058e8 <HAL_ADC_Init>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	bf14      	ite	ne
 8004e30:	2301      	movne	r3, #1
 8004e32:	2300      	moveq	r3, #0
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <_ZL12MX_ADC1_Initv+0x56>
  {
    Error_Handler();
 8004e3a:	f000 fa2d 	bl	8005298 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004e42:	2301      	movs	r3, #1
 8004e44:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004e46:	2300      	movs	r3, #0
 8004e48:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004e4a:	1d3b      	adds	r3, r7, #4
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	4808      	ldr	r0, [pc, #32]	@ (8004e70 <_ZL12MX_ADC1_Initv+0x88>)
 8004e50:	f000 fedc 	bl	8005c0c <HAL_ADC_ConfigChannel>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	bf14      	ite	ne
 8004e5a:	2301      	movne	r3, #1
 8004e5c:	2300      	moveq	r3, #0
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d001      	beq.n	8004e68 <_ZL12MX_ADC1_Initv+0x80>
  {
    Error_Handler();
 8004e64:	f000 fa18 	bl	8005298 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004e68:	bf00      	nop
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	20000244 	.word	0x20000244
 8004e74:	40012400 	.word	0x40012400

08004e78 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ee8 <_ZL12MX_SPI1_Initv+0x70>)
 8004e7e:	4a1b      	ldr	r2, [pc, #108]	@ (8004eec <_ZL12MX_SPI1_Initv+0x74>)
 8004e80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004e82:	4b19      	ldr	r3, [pc, #100]	@ (8004ee8 <_ZL12MX_SPI1_Initv+0x70>)
 8004e84:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004e88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004e8a:	4b17      	ldr	r3, [pc, #92]	@ (8004ee8 <_ZL12MX_SPI1_Initv+0x70>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004e90:	4b15      	ldr	r3, [pc, #84]	@ (8004ee8 <_ZL12MX_SPI1_Initv+0x70>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e96:	4b14      	ldr	r3, [pc, #80]	@ (8004ee8 <_ZL12MX_SPI1_Initv+0x70>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004e9c:	4b12      	ldr	r3, [pc, #72]	@ (8004ee8 <_ZL12MX_SPI1_Initv+0x70>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004ea2:	4b11      	ldr	r3, [pc, #68]	@ (8004ee8 <_ZL12MX_SPI1_Initv+0x70>)
 8004ea4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ea8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8004ee8 <_ZL12MX_SPI1_Initv+0x70>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004eb0:	4b0d      	ldr	r3, [pc, #52]	@ (8004ee8 <_ZL12MX_SPI1_Initv+0x70>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8004ee8 <_ZL12MX_SPI1_Initv+0x70>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8004ee8 <_ZL12MX_SPI1_Initv+0x70>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004ec2:	4b09      	ldr	r3, [pc, #36]	@ (8004ee8 <_ZL12MX_SPI1_Initv+0x70>)
 8004ec4:	220a      	movs	r2, #10
 8004ec6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004ec8:	4807      	ldr	r0, [pc, #28]	@ (8004ee8 <_ZL12MX_SPI1_Initv+0x70>)
 8004eca:	f001 ffd3 	bl	8006e74 <HAL_SPI_Init>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	bf14      	ite	ne
 8004ed4:	2301      	movne	r3, #1
 8004ed6:	2300      	moveq	r3, #0
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8004ede:	f000 f9db 	bl	8005298 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004ee2:	bf00      	nop
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	20000274 	.word	0x20000274
 8004eec:	40013000 	.word	0x40013000

08004ef0 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b092      	sub	sp, #72	@ 0x48
 8004ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ef6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004efa:	2200      	movs	r2, #0
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004f00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f04:	2200      	movs	r2, #0
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	605a      	str	r2, [r3, #4]
 8004f0a:	609a      	str	r2, [r3, #8]
 8004f0c:	60da      	str	r2, [r3, #12]
 8004f0e:	611a      	str	r2, [r3, #16]
 8004f10:	615a      	str	r2, [r3, #20]
 8004f12:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004f14:	1d3b      	adds	r3, r7, #4
 8004f16:	2220      	movs	r2, #32
 8004f18:	2100      	movs	r1, #0
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f004 f8bf 	bl	800909e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004f20:	4b3b      	ldr	r3, [pc, #236]	@ (8005010 <_ZL12MX_TIM1_Initv+0x120>)
 8004f22:	4a3c      	ldr	r2, [pc, #240]	@ (8005014 <_ZL12MX_TIM1_Initv+0x124>)
 8004f24:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004f26:	4b3a      	ldr	r3, [pc, #232]	@ (8005010 <_ZL12MX_TIM1_Initv+0x120>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f2c:	4b38      	ldr	r3, [pc, #224]	@ (8005010 <_ZL12MX_TIM1_Initv+0x120>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004f32:	4b37      	ldr	r3, [pc, #220]	@ (8005010 <_ZL12MX_TIM1_Initv+0x120>)
 8004f34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004f38:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f3a:	4b35      	ldr	r3, [pc, #212]	@ (8005010 <_ZL12MX_TIM1_Initv+0x120>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004f40:	4b33      	ldr	r3, [pc, #204]	@ (8005010 <_ZL12MX_TIM1_Initv+0x120>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f46:	4b32      	ldr	r3, [pc, #200]	@ (8005010 <_ZL12MX_TIM1_Initv+0x120>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004f4c:	4830      	ldr	r0, [pc, #192]	@ (8005010 <_ZL12MX_TIM1_Initv+0x120>)
 8004f4e:	f002 fa4e 	bl	80073ee <HAL_TIM_PWM_Init>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	bf14      	ite	ne
 8004f58:	2301      	movne	r3, #1
 8004f5a:	2300      	moveq	r3, #0
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 8004f62:	f000 f999 	bl	8005298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f66:	2300      	movs	r3, #0
 8004f68:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004f6e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004f72:	4619      	mov	r1, r3
 8004f74:	4826      	ldr	r0, [pc, #152]	@ (8005010 <_ZL12MX_TIM1_Initv+0x120>)
 8004f76:	f003 f88d 	bl	8008094 <HAL_TIMEx_MasterConfigSynchronization>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	bf14      	ite	ne
 8004f80:	2301      	movne	r3, #1
 8004f82:	2300      	moveq	r3, #0
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d001      	beq.n	8004f8e <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8004f8a:	f000 f985 	bl	8005298 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f8e:	2360      	movs	r3, #96	@ 0x60
 8004f90:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8004f92:	2300      	movs	r3, #0
 8004f94:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f96:	2300      	movs	r3, #0
 8004f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004faa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004fae:	2200      	movs	r2, #0
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	4817      	ldr	r0, [pc, #92]	@ (8005010 <_ZL12MX_TIM1_Initv+0x120>)
 8004fb4:	f002 fc14 	bl	80077e0 <HAL_TIM_PWM_ConfigChannel>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	bf14      	ite	ne
 8004fbe:	2301      	movne	r3, #1
 8004fc0:	2300      	moveq	r3, #0
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8004fc8:	f000 f966 	bl	8005298 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004fe0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004fe4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004fea:	1d3b      	adds	r3, r7, #4
 8004fec:	4619      	mov	r1, r3
 8004fee:	4808      	ldr	r0, [pc, #32]	@ (8005010 <_ZL12MX_TIM1_Initv+0x120>)
 8004ff0:	f003 f8ae 	bl	8008150 <HAL_TIMEx_ConfigBreakDeadTime>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	bf14      	ite	ne
 8004ffa:	2301      	movne	r3, #1
 8004ffc:	2300      	moveq	r3, #0
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	2b00      	cmp	r3, #0
 8005002:	d001      	beq.n	8005008 <_ZL12MX_TIM1_Initv+0x118>
  {
    Error_Handler();
 8005004:	f000 f948 	bl	8005298 <Error_Handler>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  //HAL_TIM_MspPostInit(&htim1);

}
 8005008:	bf00      	nop
 800500a:	3748      	adds	r7, #72	@ 0x48
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	200002cc 	.word	0x200002cc
 8005014:	40012c00 	.word	0x40012c00

08005018 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b08e      	sub	sp, #56	@ 0x38
 800501c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800501e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005022:	2200      	movs	r2, #0
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	605a      	str	r2, [r3, #4]
 8005028:	609a      	str	r2, [r3, #8]
 800502a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800502c:	f107 0320 	add.w	r3, r7, #32
 8005030:	2200      	movs	r2, #0
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005036:	1d3b      	adds	r3, r7, #4
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]
 800503c:	605a      	str	r2, [r3, #4]
 800503e:	609a      	str	r2, [r3, #8]
 8005040:	60da      	str	r2, [r3, #12]
 8005042:	611a      	str	r2, [r3, #16]
 8005044:	615a      	str	r2, [r3, #20]
 8005046:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005048:	4b38      	ldr	r3, [pc, #224]	@ (800512c <_ZL12MX_TIM2_Initv+0x114>)
 800504a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800504e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005050:	4b36      	ldr	r3, [pc, #216]	@ (800512c <_ZL12MX_TIM2_Initv+0x114>)
 8005052:	2200      	movs	r2, #0
 8005054:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005056:	4b35      	ldr	r3, [pc, #212]	@ (800512c <_ZL12MX_TIM2_Initv+0x114>)
 8005058:	2200      	movs	r2, #0
 800505a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800505c:	4b33      	ldr	r3, [pc, #204]	@ (800512c <_ZL12MX_TIM2_Initv+0x114>)
 800505e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005062:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005064:	4b31      	ldr	r3, [pc, #196]	@ (800512c <_ZL12MX_TIM2_Initv+0x114>)
 8005066:	2200      	movs	r2, #0
 8005068:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800506a:	4b30      	ldr	r3, [pc, #192]	@ (800512c <_ZL12MX_TIM2_Initv+0x114>)
 800506c:	2280      	movs	r2, #128	@ 0x80
 800506e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005070:	482e      	ldr	r0, [pc, #184]	@ (800512c <_ZL12MX_TIM2_Initv+0x114>)
 8005072:	f002 f96d 	bl	8007350 <HAL_TIM_Base_Init>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	bf14      	ite	ne
 800507c:	2301      	movne	r3, #1
 800507e:	2300      	moveq	r3, #0
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 8005086:	f000 f907 	bl	8005298 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800508a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800508e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005090:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005094:	4619      	mov	r1, r3
 8005096:	4825      	ldr	r0, [pc, #148]	@ (800512c <_ZL12MX_TIM2_Initv+0x114>)
 8005098:	f002 fc64 	bl	8007964 <HAL_TIM_ConfigClockSource>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	bf14      	ite	ne
 80050a2:	2301      	movne	r3, #1
 80050a4:	2300      	moveq	r3, #0
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d001      	beq.n	80050b0 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 80050ac:	f000 f8f4 	bl	8005298 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80050b0:	481e      	ldr	r0, [pc, #120]	@ (800512c <_ZL12MX_TIM2_Initv+0x114>)
 80050b2:	f002 f99c 	bl	80073ee <HAL_TIM_PWM_Init>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	bf14      	ite	ne
 80050bc:	2301      	movne	r3, #1
 80050be:	2300      	moveq	r3, #0
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 80050c6:	f000 f8e7 	bl	8005298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050ca:	2300      	movs	r3, #0
 80050cc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050ce:	2300      	movs	r3, #0
 80050d0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80050d2:	f107 0320 	add.w	r3, r7, #32
 80050d6:	4619      	mov	r1, r3
 80050d8:	4814      	ldr	r0, [pc, #80]	@ (800512c <_ZL12MX_TIM2_Initv+0x114>)
 80050da:	f002 ffdb 	bl	8008094 <HAL_TIMEx_MasterConfigSynchronization>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	bf14      	ite	ne
 80050e4:	2301      	movne	r3, #1
 80050e6:	2300      	moveq	r3, #0
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 80050ee:	f000 f8d3 	bl	8005298 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80050f2:	2360      	movs	r3, #96	@ 0x60
 80050f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80050f6:	2300      	movs	r3, #0
 80050f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80050fa:	2300      	movs	r3, #0
 80050fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80050fe:	2300      	movs	r3, #0
 8005100:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005102:	1d3b      	adds	r3, r7, #4
 8005104:	2200      	movs	r2, #0
 8005106:	4619      	mov	r1, r3
 8005108:	4808      	ldr	r0, [pc, #32]	@ (800512c <_ZL12MX_TIM2_Initv+0x114>)
 800510a:	f002 fb69 	bl	80077e0 <HAL_TIM_PWM_ConfigChannel>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	bf14      	ite	ne
 8005114:	2301      	movne	r3, #1
 8005116:	2300      	moveq	r3, #0
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d001      	beq.n	8005122 <_ZL12MX_TIM2_Initv+0x10a>
  {
    Error_Handler();
 800511e:	f000 f8bb 	bl	8005298 <Error_Handler>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  //HAL_TIM_MspPostInit(&htim2);

}
 8005122:	bf00      	nop
 8005124:	3738      	adds	r7, #56	@ 0x38
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	20000314 	.word	0x20000314

08005130 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005134:	4b13      	ldr	r3, [pc, #76]	@ (8005184 <_ZL19MX_USART1_UART_Initv+0x54>)
 8005136:	4a14      	ldr	r2, [pc, #80]	@ (8005188 <_ZL19MX_USART1_UART_Initv+0x58>)
 8005138:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800513a:	4b12      	ldr	r3, [pc, #72]	@ (8005184 <_ZL19MX_USART1_UART_Initv+0x54>)
 800513c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005140:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005142:	4b10      	ldr	r3, [pc, #64]	@ (8005184 <_ZL19MX_USART1_UART_Initv+0x54>)
 8005144:	2200      	movs	r2, #0
 8005146:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005148:	4b0e      	ldr	r3, [pc, #56]	@ (8005184 <_ZL19MX_USART1_UART_Initv+0x54>)
 800514a:	2200      	movs	r2, #0
 800514c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800514e:	4b0d      	ldr	r3, [pc, #52]	@ (8005184 <_ZL19MX_USART1_UART_Initv+0x54>)
 8005150:	2200      	movs	r2, #0
 8005152:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005154:	4b0b      	ldr	r3, [pc, #44]	@ (8005184 <_ZL19MX_USART1_UART_Initv+0x54>)
 8005156:	220c      	movs	r2, #12
 8005158:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800515a:	4b0a      	ldr	r3, [pc, #40]	@ (8005184 <_ZL19MX_USART1_UART_Initv+0x54>)
 800515c:	2200      	movs	r2, #0
 800515e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005160:	4b08      	ldr	r3, [pc, #32]	@ (8005184 <_ZL19MX_USART1_UART_Initv+0x54>)
 8005162:	2200      	movs	r2, #0
 8005164:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005166:	4807      	ldr	r0, [pc, #28]	@ (8005184 <_ZL19MX_USART1_UART_Initv+0x54>)
 8005168:	f003 f855 	bl	8008216 <HAL_UART_Init>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	bf14      	ite	ne
 8005172:	2301      	movne	r3, #1
 8005174:	2300      	moveq	r3, #0
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 800517c:	f000 f88c 	bl	8005298 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005180:	bf00      	nop
 8005182:	bd80      	pop	{r7, pc}
 8005184:	2000035c 	.word	0x2000035c
 8005188:	40013800 	.word	0x40013800

0800518c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005192:	f107 0308 	add.w	r3, r7, #8
 8005196:	2200      	movs	r2, #0
 8005198:	601a      	str	r2, [r3, #0]
 800519a:	605a      	str	r2, [r3, #4]
 800519c:	609a      	str	r2, [r3, #8]
 800519e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80051a0:	4b39      	ldr	r3, [pc, #228]	@ (8005288 <_ZL12MX_GPIO_Initv+0xfc>)
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	4a38      	ldr	r2, [pc, #224]	@ (8005288 <_ZL12MX_GPIO_Initv+0xfc>)
 80051a6:	f043 0304 	orr.w	r3, r3, #4
 80051aa:	6193      	str	r3, [r2, #24]
 80051ac:	4b36      	ldr	r3, [pc, #216]	@ (8005288 <_ZL12MX_GPIO_Initv+0xfc>)
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	607b      	str	r3, [r7, #4]
 80051b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80051b8:	4b33      	ldr	r3, [pc, #204]	@ (8005288 <_ZL12MX_GPIO_Initv+0xfc>)
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	4a32      	ldr	r2, [pc, #200]	@ (8005288 <_ZL12MX_GPIO_Initv+0xfc>)
 80051be:	f043 0308 	orr.w	r3, r3, #8
 80051c2:	6193      	str	r3, [r2, #24]
 80051c4:	4b30      	ldr	r3, [pc, #192]	@ (8005288 <_ZL12MX_GPIO_Initv+0xfc>)
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	f003 0308 	and.w	r3, r3, #8
 80051cc:	603b      	str	r3, [r7, #0]
 80051ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80051d0:	2200      	movs	r2, #0
 80051d2:	2106      	movs	r1, #6
 80051d4:	482d      	ldr	r0, [pc, #180]	@ (800528c <_ZL12MX_GPIO_Initv+0x100>)
 80051d6:	f001 f956 	bl	8006486 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Display_DC_GPIO_Port, Display_DC_Pin, GPIO_PIN_RESET);
 80051da:	2200      	movs	r2, #0
 80051dc:	2102      	movs	r1, #2
 80051de:	482c      	ldr	r0, [pc, #176]	@ (8005290 <_ZL12MX_GPIO_Initv+0x104>)
 80051e0:	f001 f951 	bl	8006486 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 Btn1_Pin PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|Btn1_Pin|GPIO_PIN_6;
 80051e4:	2351      	movs	r3, #81	@ 0x51
 80051e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051e8:	2300      	movs	r3, #0
 80051ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ec:	2300      	movs	r3, #0
 80051ee:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051f0:	f107 0308 	add.w	r3, r7, #8
 80051f4:	4619      	mov	r1, r3
 80051f6:	4825      	ldr	r0, [pc, #148]	@ (800528c <_ZL12MX_GPIO_Initv+0x100>)
 80051f8:	f000 ffaa 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80051fc:	2306      	movs	r3, #6
 80051fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005200:	2301      	movs	r3, #1
 8005202:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005204:	2300      	movs	r3, #0
 8005206:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005208:	2302      	movs	r3, #2
 800520a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800520c:	f107 0308 	add.w	r3, r7, #8
 8005210:	4619      	mov	r1, r3
 8005212:	481e      	ldr	r0, [pc, #120]	@ (800528c <_ZL12MX_GPIO_Initv+0x100>)
 8005214:	f000 ff9c 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pin : Display_DC_Pin */
  GPIO_InitStruct.Pin = Display_DC_Pin;
 8005218:	2302      	movs	r3, #2
 800521a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800521c:	2301      	movs	r3, #1
 800521e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005220:	2300      	movs	r3, #0
 8005222:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005224:	2302      	movs	r3, #2
 8005226:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Display_DC_GPIO_Port, &GPIO_InitStruct);
 8005228:	f107 0308 	add.w	r3, r7, #8
 800522c:	4619      	mov	r1, r3
 800522e:	4818      	ldr	r0, [pc, #96]	@ (8005290 <_ZL12MX_GPIO_Initv+0x104>)
 8005230:	f000 ff8e 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005234:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005238:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800523a:	2300      	movs	r3, #0
 800523c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800523e:	2300      	movs	r3, #0
 8005240:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005242:	f107 0308 	add.w	r3, r7, #8
 8005246:	4619      	mov	r1, r3
 8005248:	4811      	ldr	r0, [pc, #68]	@ (8005290 <_ZL12MX_GPIO_Initv+0x104>)
 800524a:	f000 ff81 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pin : EncoderClk_Pin */
  //GPIO_InitStruct.Pin = EncoderClk_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800524e:	4b11      	ldr	r3, [pc, #68]	@ (8005294 <_ZL12MX_GPIO_Initv+0x108>)
 8005250:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005252:	2300      	movs	r3, #0
 8005254:	613b      	str	r3, [r7, #16]
  //HAL_GPIO_Init(EncoderClk_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005256:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800525a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800525c:	2300      	movs	r3, #0
 800525e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005260:	2301      	movs	r3, #1
 8005262:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005264:	f107 0308 	add.w	r3, r7, #8
 8005268:	4619      	mov	r1, r3
 800526a:	4809      	ldr	r0, [pc, #36]	@ (8005290 <_ZL12MX_GPIO_Initv+0x104>)
 800526c:	f000 ff70 	bl	8006150 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005270:	2200      	movs	r2, #0
 8005272:	2100      	movs	r1, #0
 8005274:	2028      	movs	r0, #40	@ 0x28
 8005276:	f000 ff34 	bl	80060e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800527a:	2028      	movs	r0, #40	@ 0x28
 800527c:	f000 ff4d 	bl	800611a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005280:	bf00      	nop
 8005282:	3718      	adds	r7, #24
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	40021000 	.word	0x40021000
 800528c:	40010800 	.word	0x40010800
 8005290:	40010c00 	.word	0x40010c00
 8005294:	10310000 	.word	0x10310000

08005298 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005298:	b480      	push	{r7}
 800529a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800529c:	b672      	cpsid	i
}
 800529e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80052a0:	bf00      	nop
 80052a2:	e7fd      	b.n	80052a0 <Error_Handler+0x8>

080052a4 <SPI1_Init>:

SPI_HandleTypeDef Hspi;

/* SPI5 init function */
void SPI1_Init(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0
	Hspi.Instance = SPI1;
 80052a8:	4b17      	ldr	r3, [pc, #92]	@ (8005308 <SPI1_Init+0x64>)
 80052aa:	4a18      	ldr	r2, [pc, #96]	@ (800530c <SPI1_Init+0x68>)
 80052ac:	601a      	str	r2, [r3, #0]
	Hspi.Init.Mode = SPI_MODE_MASTER;
 80052ae:	4b16      	ldr	r3, [pc, #88]	@ (8005308 <SPI1_Init+0x64>)
 80052b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80052b4:	605a      	str	r2, [r3, #4]
	Hspi.Init.Direction = SPI_DIRECTION_2LINES;
 80052b6:	4b14      	ldr	r3, [pc, #80]	@ (8005308 <SPI1_Init+0x64>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	609a      	str	r2, [r3, #8]
	Hspi.Init.DataSize = SPI_DATASIZE_8BIT;
 80052bc:	4b12      	ldr	r3, [pc, #72]	@ (8005308 <SPI1_Init+0x64>)
 80052be:	2200      	movs	r2, #0
 80052c0:	60da      	str	r2, [r3, #12]
	Hspi.Init.CLKPolarity = SPI_POLARITY_LOW;
 80052c2:	4b11      	ldr	r3, [pc, #68]	@ (8005308 <SPI1_Init+0x64>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	611a      	str	r2, [r3, #16]
	Hspi.Init.CLKPhase = SPI_PHASE_1EDGE;
 80052c8:	4b0f      	ldr	r3, [pc, #60]	@ (8005308 <SPI1_Init+0x64>)
 80052ca:	2200      	movs	r2, #0
 80052cc:	615a      	str	r2, [r3, #20]
	Hspi.Init.NSS = SPI_NSS_SOFT;
 80052ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005308 <SPI1_Init+0x64>)
 80052d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052d4:	619a      	str	r2, [r3, #24]
	Hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005308 <SPI1_Init+0x64>)
 80052d8:	2200      	movs	r2, #0
 80052da:	61da      	str	r2, [r3, #28]
	Hspi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80052dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005308 <SPI1_Init+0x64>)
 80052de:	2200      	movs	r2, #0
 80052e0:	621a      	str	r2, [r3, #32]
	Hspi.Init.TIMode = SPI_TIMODE_DISABLE;
 80052e2:	4b09      	ldr	r3, [pc, #36]	@ (8005308 <SPI1_Init+0x64>)
 80052e4:	2200      	movs	r2, #0
 80052e6:	625a      	str	r2, [r3, #36]	@ 0x24
	Hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052e8:	4b07      	ldr	r3, [pc, #28]	@ (8005308 <SPI1_Init+0x64>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	629a      	str	r2, [r3, #40]	@ 0x28
	Hspi.Init.CRCPolynomial = 7;
 80052ee:	4b06      	ldr	r3, [pc, #24]	@ (8005308 <SPI1_Init+0x64>)
 80052f0:	2207      	movs	r2, #7
 80052f2:	62da      	str	r2, [r3, #44]	@ 0x2c
//  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
//  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  if (HAL_SPI_Init(&Hspi) != HAL_OK)
 80052f4:	4804      	ldr	r0, [pc, #16]	@ (8005308 <SPI1_Init+0x64>)
 80052f6:	f001 fdbd 	bl	8006e74 <HAL_SPI_Init>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d001      	beq.n	8005304 <SPI1_Init+0x60>
  {
    Error_Handler();
 8005300:	f7ff ffca 	bl	8005298 <Error_Handler>
  }

}
 8005304:	bf00      	nop
 8005306:	bd80      	pop	{r7, pc}
 8005308:	200003a4 	.word	0x200003a4
 800530c:	40013000 	.word	0x40013000

08005310 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005316:	4b15      	ldr	r3, [pc, #84]	@ (800536c <HAL_MspInit+0x5c>)
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	4a14      	ldr	r2, [pc, #80]	@ (800536c <HAL_MspInit+0x5c>)
 800531c:	f043 0301 	orr.w	r3, r3, #1
 8005320:	6193      	str	r3, [r2, #24]
 8005322:	4b12      	ldr	r3, [pc, #72]	@ (800536c <HAL_MspInit+0x5c>)
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	60bb      	str	r3, [r7, #8]
 800532c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800532e:	4b0f      	ldr	r3, [pc, #60]	@ (800536c <HAL_MspInit+0x5c>)
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	4a0e      	ldr	r2, [pc, #56]	@ (800536c <HAL_MspInit+0x5c>)
 8005334:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005338:	61d3      	str	r3, [r2, #28]
 800533a:	4b0c      	ldr	r3, [pc, #48]	@ (800536c <HAL_MspInit+0x5c>)
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005342:	607b      	str	r3, [r7, #4]
 8005344:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005346:	4b0a      	ldr	r3, [pc, #40]	@ (8005370 <HAL_MspInit+0x60>)
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	60fb      	str	r3, [r7, #12]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	4a04      	ldr	r2, [pc, #16]	@ (8005370 <HAL_MspInit+0x60>)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005362:	bf00      	nop
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	bc80      	pop	{r7}
 800536a:	4770      	bx	lr
 800536c:	40021000 	.word	0x40021000
 8005370:	40010000 	.word	0x40010000

08005374 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b088      	sub	sp, #32
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800537c:	f107 0310 	add.w	r3, r7, #16
 8005380:	2200      	movs	r2, #0
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	605a      	str	r2, [r3, #4]
 8005386:	609a      	str	r2, [r3, #8]
 8005388:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a14      	ldr	r2, [pc, #80]	@ (80053e0 <HAL_ADC_MspInit+0x6c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d121      	bne.n	80053d8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005394:	4b13      	ldr	r3, [pc, #76]	@ (80053e4 <HAL_ADC_MspInit+0x70>)
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	4a12      	ldr	r2, [pc, #72]	@ (80053e4 <HAL_ADC_MspInit+0x70>)
 800539a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800539e:	6193      	str	r3, [r2, #24]
 80053a0:	4b10      	ldr	r3, [pc, #64]	@ (80053e4 <HAL_ADC_MspInit+0x70>)
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053ac:	4b0d      	ldr	r3, [pc, #52]	@ (80053e4 <HAL_ADC_MspInit+0x70>)
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	4a0c      	ldr	r2, [pc, #48]	@ (80053e4 <HAL_ADC_MspInit+0x70>)
 80053b2:	f043 0304 	orr.w	r3, r3, #4
 80053b6:	6193      	str	r3, [r2, #24]
 80053b8:	4b0a      	ldr	r3, [pc, #40]	@ (80053e4 <HAL_ADC_MspInit+0x70>)
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	f003 0304 	and.w	r3, r3, #4
 80053c0:	60bb      	str	r3, [r7, #8]
 80053c2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80053c4:	2308      	movs	r3, #8
 80053c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80053c8:	2303      	movs	r3, #3
 80053ca:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053cc:	f107 0310 	add.w	r3, r7, #16
 80053d0:	4619      	mov	r1, r3
 80053d2:	4805      	ldr	r0, [pc, #20]	@ (80053e8 <HAL_ADC_MspInit+0x74>)
 80053d4:	f000 febc 	bl	8006150 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80053d8:	bf00      	nop
 80053da:	3720      	adds	r7, #32
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	40012400 	.word	0x40012400
 80053e4:	40021000 	.word	0x40021000
 80053e8:	40010800 	.word	0x40010800

080053ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b088      	sub	sp, #32
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053f4:	f107 0310 	add.w	r3, r7, #16
 80053f8:	2200      	movs	r2, #0
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	605a      	str	r2, [r3, #4]
 80053fe:	609a      	str	r2, [r3, #8]
 8005400:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a15      	ldr	r2, [pc, #84]	@ (800545c <HAL_SPI_MspInit+0x70>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d123      	bne.n	8005454 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800540c:	4b14      	ldr	r3, [pc, #80]	@ (8005460 <HAL_SPI_MspInit+0x74>)
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	4a13      	ldr	r2, [pc, #76]	@ (8005460 <HAL_SPI_MspInit+0x74>)
 8005412:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005416:	6193      	str	r3, [r2, #24]
 8005418:	4b11      	ldr	r3, [pc, #68]	@ (8005460 <HAL_SPI_MspInit+0x74>)
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005424:	4b0e      	ldr	r3, [pc, #56]	@ (8005460 <HAL_SPI_MspInit+0x74>)
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	4a0d      	ldr	r2, [pc, #52]	@ (8005460 <HAL_SPI_MspInit+0x74>)
 800542a:	f043 0304 	orr.w	r3, r3, #4
 800542e:	6193      	str	r3, [r2, #24]
 8005430:	4b0b      	ldr	r3, [pc, #44]	@ (8005460 <HAL_SPI_MspInit+0x74>)
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	f003 0304 	and.w	r3, r3, #4
 8005438:	60bb      	str	r3, [r7, #8]
 800543a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800543c:	23a0      	movs	r3, #160	@ 0xa0
 800543e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005440:	2302      	movs	r3, #2
 8005442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005444:	2303      	movs	r3, #3
 8005446:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005448:	f107 0310 	add.w	r3, r7, #16
 800544c:	4619      	mov	r1, r3
 800544e:	4805      	ldr	r0, [pc, #20]	@ (8005464 <HAL_SPI_MspInit+0x78>)
 8005450:	f000 fe7e 	bl	8006150 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8005454:	bf00      	nop
 8005456:	3720      	adds	r7, #32
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	40013000 	.word	0x40013000
 8005460:	40021000 	.word	0x40021000
 8005464:	40010800 	.word	0x40010800

08005468 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a09      	ldr	r2, [pc, #36]	@ (800549c <HAL_TIM_PWM_MspInit+0x34>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d10b      	bne.n	8005492 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800547a:	4b09      	ldr	r3, [pc, #36]	@ (80054a0 <HAL_TIM_PWM_MspInit+0x38>)
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	4a08      	ldr	r2, [pc, #32]	@ (80054a0 <HAL_TIM_PWM_MspInit+0x38>)
 8005480:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005484:	6193      	str	r3, [r2, #24]
 8005486:	4b06      	ldr	r3, [pc, #24]	@ (80054a0 <HAL_TIM_PWM_MspInit+0x38>)
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800548e:	60fb      	str	r3, [r7, #12]
 8005490:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8005492:	bf00      	nop
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	bc80      	pop	{r7}
 800549a:	4770      	bx	lr
 800549c:	40012c00 	.word	0x40012c00
 80054a0:	40021000 	.word	0x40021000

080054a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054b4:	d113      	bne.n	80054de <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80054b6:	4b0c      	ldr	r3, [pc, #48]	@ (80054e8 <HAL_TIM_Base_MspInit+0x44>)
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	4a0b      	ldr	r2, [pc, #44]	@ (80054e8 <HAL_TIM_Base_MspInit+0x44>)
 80054bc:	f043 0301 	orr.w	r3, r3, #1
 80054c0:	61d3      	str	r3, [r2, #28]
 80054c2:	4b09      	ldr	r3, [pc, #36]	@ (80054e8 <HAL_TIM_Base_MspInit+0x44>)
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	60fb      	str	r3, [r7, #12]
 80054cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80054ce:	2200      	movs	r2, #0
 80054d0:	2100      	movs	r1, #0
 80054d2:	201c      	movs	r0, #28
 80054d4:	f000 fe05 	bl	80060e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80054d8:	201c      	movs	r0, #28
 80054da:	f000 fe1e 	bl	800611a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80054de:	bf00      	nop
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	40021000 	.word	0x40021000

080054ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b088      	sub	sp, #32
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054f4:	f107 0310 	add.w	r3, r7, #16
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	605a      	str	r2, [r3, #4]
 80054fe:	609a      	str	r2, [r3, #8]
 8005500:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a1c      	ldr	r2, [pc, #112]	@ (8005578 <HAL_UART_MspInit+0x8c>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d131      	bne.n	8005570 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800550c:	4b1b      	ldr	r3, [pc, #108]	@ (800557c <HAL_UART_MspInit+0x90>)
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	4a1a      	ldr	r2, [pc, #104]	@ (800557c <HAL_UART_MspInit+0x90>)
 8005512:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005516:	6193      	str	r3, [r2, #24]
 8005518:	4b18      	ldr	r3, [pc, #96]	@ (800557c <HAL_UART_MspInit+0x90>)
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005520:	60fb      	str	r3, [r7, #12]
 8005522:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005524:	4b15      	ldr	r3, [pc, #84]	@ (800557c <HAL_UART_MspInit+0x90>)
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	4a14      	ldr	r2, [pc, #80]	@ (800557c <HAL_UART_MspInit+0x90>)
 800552a:	f043 0304 	orr.w	r3, r3, #4
 800552e:	6193      	str	r3, [r2, #24]
 8005530:	4b12      	ldr	r3, [pc, #72]	@ (800557c <HAL_UART_MspInit+0x90>)
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	f003 0304 	and.w	r3, r3, #4
 8005538:	60bb      	str	r3, [r7, #8]
 800553a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800553c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005540:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005542:	2302      	movs	r3, #2
 8005544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005546:	2303      	movs	r3, #3
 8005548:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800554a:	f107 0310 	add.w	r3, r7, #16
 800554e:	4619      	mov	r1, r3
 8005550:	480b      	ldr	r0, [pc, #44]	@ (8005580 <HAL_UART_MspInit+0x94>)
 8005552:	f000 fdfd 	bl	8006150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005556:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800555a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800555c:	2300      	movs	r3, #0
 800555e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005560:	2300      	movs	r3, #0
 8005562:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005564:	f107 0310 	add.w	r3, r7, #16
 8005568:	4619      	mov	r1, r3
 800556a:	4805      	ldr	r0, [pc, #20]	@ (8005580 <HAL_UART_MspInit+0x94>)
 800556c:	f000 fdf0 	bl	8006150 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8005570:	bf00      	nop
 8005572:	3720      	adds	r7, #32
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	40013800 	.word	0x40013800
 800557c:	40021000 	.word	0x40021000
 8005580:	40010800 	.word	0x40010800

08005584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005584:	b480      	push	{r7}
 8005586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005588:	bf00      	nop
 800558a:	e7fd      	b.n	8005588 <NMI_Handler+0x4>

0800558c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005590:	bf00      	nop
 8005592:	e7fd      	b.n	8005590 <HardFault_Handler+0x4>

08005594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005594:	b480      	push	{r7}
 8005596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005598:	bf00      	nop
 800559a:	e7fd      	b.n	8005598 <MemManage_Handler+0x4>

0800559c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80055a0:	bf00      	nop
 80055a2:	e7fd      	b.n	80055a0 <BusFault_Handler+0x4>

080055a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80055a4:	b480      	push	{r7}
 80055a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80055a8:	bf00      	nop
 80055aa:	e7fd      	b.n	80055a8 <UsageFault_Handler+0x4>

080055ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80055ac:	b480      	push	{r7}
 80055ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80055b0:	bf00      	nop
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bc80      	pop	{r7}
 80055b6:	4770      	bx	lr

080055b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80055b8:	b480      	push	{r7}
 80055ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80055bc:	bf00      	nop
 80055be:	46bd      	mov	sp, r7
 80055c0:	bc80      	pop	{r7}
 80055c2:	4770      	bx	lr

080055c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80055c4:	b480      	push	{r7}
 80055c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80055c8:	bf00      	nop
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bc80      	pop	{r7}
 80055ce:	4770      	bx	lr

080055d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80055d4:	f000 f948 	bl	8005868 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80055d8:	bf00      	nop
 80055da:	bd80      	pop	{r7, pc}

080055dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80055e0:	4802      	ldr	r0, [pc, #8]	@ (80055ec <TIM2_IRQHandler+0x10>)
 80055e2:	f001 fff5 	bl	80075d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80055e6:	bf00      	nop
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	20000314 	.word	0x20000314

080055f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EncoderClk_Pin);
 80055f4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80055f8:	f000 ff5e 	bl	80064b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80055fc:	bf00      	nop
 80055fe:	bd80      	pop	{r7, pc}

08005600 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005600:	b480      	push	{r7}
 8005602:	af00      	add	r7, sp, #0
  return 1;
 8005604:	2301      	movs	r3, #1
}
 8005606:	4618      	mov	r0, r3
 8005608:	46bd      	mov	sp, r7
 800560a:	bc80      	pop	{r7}
 800560c:	4770      	bx	lr

0800560e <_kill>:

int _kill(int pid, int sig)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b082      	sub	sp, #8
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
 8005616:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005618:	f003 fde8 	bl	80091ec <__errno>
 800561c:	4603      	mov	r3, r0
 800561e:	2216      	movs	r2, #22
 8005620:	601a      	str	r2, [r3, #0]
  return -1;
 8005622:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005626:	4618      	mov	r0, r3
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <_exit>:

void _exit (int status)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b082      	sub	sp, #8
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005636:	f04f 31ff 	mov.w	r1, #4294967295
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f7ff ffe7 	bl	800560e <_kill>
  while (1) {}    /* Make sure we hang here */
 8005640:	bf00      	nop
 8005642:	e7fd      	b.n	8005640 <_exit+0x12>

08005644 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005650:	2300      	movs	r3, #0
 8005652:	617b      	str	r3, [r7, #20]
 8005654:	e00a      	b.n	800566c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005656:	f3af 8000 	nop.w
 800565a:	4601      	mov	r1, r0
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	1c5a      	adds	r2, r3, #1
 8005660:	60ba      	str	r2, [r7, #8]
 8005662:	b2ca      	uxtb	r2, r1
 8005664:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	3301      	adds	r3, #1
 800566a:	617b      	str	r3, [r7, #20]
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	429a      	cmp	r2, r3
 8005672:	dbf0      	blt.n	8005656 <_read+0x12>
  }

  return len;
 8005674:	687b      	ldr	r3, [r7, #4]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3718      	adds	r7, #24
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b086      	sub	sp, #24
 8005682:	af00      	add	r7, sp, #0
 8005684:	60f8      	str	r0, [r7, #12]
 8005686:	60b9      	str	r1, [r7, #8]
 8005688:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800568a:	2300      	movs	r3, #0
 800568c:	617b      	str	r3, [r7, #20]
 800568e:	e009      	b.n	80056a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	1c5a      	adds	r2, r3, #1
 8005694:	60ba      	str	r2, [r7, #8]
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	4618      	mov	r0, r3
 800569a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	3301      	adds	r3, #1
 80056a2:	617b      	str	r3, [r7, #20]
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	dbf1      	blt.n	8005690 <_write+0x12>
  }
  return len;
 80056ac:	687b      	ldr	r3, [r7, #4]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3718      	adds	r7, #24
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <_close>:

int _close(int file)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80056be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	370c      	adds	r7, #12
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bc80      	pop	{r7}
 80056ca:	4770      	bx	lr

080056cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80056dc:	605a      	str	r2, [r3, #4]
  return 0;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bc80      	pop	{r7}
 80056e8:	4770      	bx	lr

080056ea <_isatty>:

int _isatty(int file)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b083      	sub	sp, #12
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80056f2:	2301      	movs	r3, #1
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bc80      	pop	{r7}
 80056fc:	4770      	bx	lr

080056fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80056fe:	b480      	push	{r7}
 8005700:	b085      	sub	sp, #20
 8005702:	af00      	add	r7, sp, #0
 8005704:	60f8      	str	r0, [r7, #12]
 8005706:	60b9      	str	r1, [r7, #8]
 8005708:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3714      	adds	r7, #20
 8005710:	46bd      	mov	sp, r7
 8005712:	bc80      	pop	{r7}
 8005714:	4770      	bx	lr
	...

08005718 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005720:	4a14      	ldr	r2, [pc, #80]	@ (8005774 <_sbrk+0x5c>)
 8005722:	4b15      	ldr	r3, [pc, #84]	@ (8005778 <_sbrk+0x60>)
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800572c:	4b13      	ldr	r3, [pc, #76]	@ (800577c <_sbrk+0x64>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d102      	bne.n	800573a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005734:	4b11      	ldr	r3, [pc, #68]	@ (800577c <_sbrk+0x64>)
 8005736:	4a12      	ldr	r2, [pc, #72]	@ (8005780 <_sbrk+0x68>)
 8005738:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800573a:	4b10      	ldr	r3, [pc, #64]	@ (800577c <_sbrk+0x64>)
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4413      	add	r3, r2
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	429a      	cmp	r2, r3
 8005746:	d207      	bcs.n	8005758 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005748:	f003 fd50 	bl	80091ec <__errno>
 800574c:	4603      	mov	r3, r0
 800574e:	220c      	movs	r2, #12
 8005750:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005752:	f04f 33ff 	mov.w	r3, #4294967295
 8005756:	e009      	b.n	800576c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005758:	4b08      	ldr	r3, [pc, #32]	@ (800577c <_sbrk+0x64>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800575e:	4b07      	ldr	r3, [pc, #28]	@ (800577c <_sbrk+0x64>)
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4413      	add	r3, r2
 8005766:	4a05      	ldr	r2, [pc, #20]	@ (800577c <_sbrk+0x64>)
 8005768:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800576a:	68fb      	ldr	r3, [r7, #12]
}
 800576c:	4618      	mov	r0, r3
 800576e:	3718      	adds	r7, #24
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	20005000 	.word	0x20005000
 8005778:	00000400 	.word	0x00000400
 800577c:	200003fc 	.word	0x200003fc
 8005780:	20000558 	.word	0x20000558

08005784 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005784:	b480      	push	{r7}
 8005786:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005788:	bf00      	nop
 800578a:	46bd      	mov	sp, r7
 800578c:	bc80      	pop	{r7}
 800578e:	4770      	bx	lr

08005790 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005790:	f7ff fff8 	bl	8005784 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005794:	480b      	ldr	r0, [pc, #44]	@ (80057c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8005796:	490c      	ldr	r1, [pc, #48]	@ (80057c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005798:	4a0c      	ldr	r2, [pc, #48]	@ (80057cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800579a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800579c:	e002      	b.n	80057a4 <LoopCopyDataInit>

0800579e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800579e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80057a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80057a2:	3304      	adds	r3, #4

080057a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80057a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80057a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80057a8:	d3f9      	bcc.n	800579e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80057aa:	4a09      	ldr	r2, [pc, #36]	@ (80057d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80057ac:	4c09      	ldr	r4, [pc, #36]	@ (80057d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80057ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80057b0:	e001      	b.n	80057b6 <LoopFillZerobss>

080057b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80057b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80057b4:	3204      	adds	r2, #4

080057b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80057b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80057b8:	d3fb      	bcc.n	80057b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80057ba:	f003 fd1d 	bl	80091f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80057be:	f7ff fa9b 	bl	8004cf8 <main>
  bx lr
 80057c2:	4770      	bx	lr
  ldr r0, =_sdata
 80057c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80057c8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80057cc:	0800bc78 	.word	0x0800bc78
  ldr r2, =_sbss
 80057d0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80057d4:	20000554 	.word	0x20000554

080057d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80057d8:	e7fe      	b.n	80057d8 <ADC1_2_IRQHandler>
	...

080057dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80057e0:	4b08      	ldr	r3, [pc, #32]	@ (8005804 <HAL_Init+0x28>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a07      	ldr	r2, [pc, #28]	@ (8005804 <HAL_Init+0x28>)
 80057e6:	f043 0310 	orr.w	r3, r3, #16
 80057ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057ec:	2003      	movs	r0, #3
 80057ee:	f000 fc6d 	bl	80060cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80057f2:	200f      	movs	r0, #15
 80057f4:	f000 f808 	bl	8005808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80057f8:	f7ff fd8a 	bl	8005310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	40022000 	.word	0x40022000

08005808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005810:	4b12      	ldr	r3, [pc, #72]	@ (800585c <HAL_InitTick+0x54>)
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	4b12      	ldr	r3, [pc, #72]	@ (8005860 <HAL_InitTick+0x58>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	4619      	mov	r1, r3
 800581a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800581e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005822:	fbb2 f3f3 	udiv	r3, r2, r3
 8005826:	4618      	mov	r0, r3
 8005828:	f000 fc85 	bl	8006136 <HAL_SYSTICK_Config>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e00e      	b.n	8005854 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b0f      	cmp	r3, #15
 800583a:	d80a      	bhi.n	8005852 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800583c:	2200      	movs	r2, #0
 800583e:	6879      	ldr	r1, [r7, #4]
 8005840:	f04f 30ff 	mov.w	r0, #4294967295
 8005844:	f000 fc4d 	bl	80060e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005848:	4a06      	ldr	r2, [pc, #24]	@ (8005864 <HAL_InitTick+0x5c>)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800584e:	2300      	movs	r3, #0
 8005850:	e000      	b.n	8005854 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
}
 8005854:	4618      	mov	r0, r3
 8005856:	3708      	adds	r7, #8
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	20000004 	.word	0x20000004
 8005860:	2000000c 	.word	0x2000000c
 8005864:	20000008 	.word	0x20000008

08005868 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005868:	b480      	push	{r7}
 800586a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800586c:	4b05      	ldr	r3, [pc, #20]	@ (8005884 <HAL_IncTick+0x1c>)
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	461a      	mov	r2, r3
 8005872:	4b05      	ldr	r3, [pc, #20]	@ (8005888 <HAL_IncTick+0x20>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4413      	add	r3, r2
 8005878:	4a03      	ldr	r2, [pc, #12]	@ (8005888 <HAL_IncTick+0x20>)
 800587a:	6013      	str	r3, [r2, #0]
}
 800587c:	bf00      	nop
 800587e:	46bd      	mov	sp, r7
 8005880:	bc80      	pop	{r7}
 8005882:	4770      	bx	lr
 8005884:	2000000c 	.word	0x2000000c
 8005888:	20000400 	.word	0x20000400

0800588c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800588c:	b480      	push	{r7}
 800588e:	af00      	add	r7, sp, #0
  return uwTick;
 8005890:	4b02      	ldr	r3, [pc, #8]	@ (800589c <HAL_GetTick+0x10>)
 8005892:	681b      	ldr	r3, [r3, #0]
}
 8005894:	4618      	mov	r0, r3
 8005896:	46bd      	mov	sp, r7
 8005898:	bc80      	pop	{r7}
 800589a:	4770      	bx	lr
 800589c:	20000400 	.word	0x20000400

080058a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80058a8:	f7ff fff0 	bl	800588c <HAL_GetTick>
 80058ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b8:	d005      	beq.n	80058c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80058ba:	4b0a      	ldr	r3, [pc, #40]	@ (80058e4 <HAL_Delay+0x44>)
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	461a      	mov	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4413      	add	r3, r2
 80058c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80058c6:	bf00      	nop
 80058c8:	f7ff ffe0 	bl	800588c <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d8f7      	bhi.n	80058c8 <HAL_Delay+0x28>
  {
  }
}
 80058d8:	bf00      	nop
 80058da:	bf00      	nop
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	2000000c 	.word	0x2000000c

080058e8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058f0:	2300      	movs	r3, #0
 80058f2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80058f4:	2300      	movs	r3, #0
 80058f6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80058f8:	2300      	movs	r3, #0
 80058fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80058fc:	2300      	movs	r3, #0
 80058fe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d101      	bne.n	800590a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e0be      	b.n	8005a88 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005914:	2b00      	cmp	r3, #0
 8005916:	d109      	bne.n	800592c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7ff fd24 	bl	8005374 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 fabf 	bl	8005eb0 <ADC_ConversionStop_Disable>
 8005932:	4603      	mov	r3, r0
 8005934:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800593a:	f003 0310 	and.w	r3, r3, #16
 800593e:	2b00      	cmp	r3, #0
 8005940:	f040 8099 	bne.w	8005a76 <HAL_ADC_Init+0x18e>
 8005944:	7dfb      	ldrb	r3, [r7, #23]
 8005946:	2b00      	cmp	r3, #0
 8005948:	f040 8095 	bne.w	8005a76 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005950:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005954:	f023 0302 	bic.w	r3, r3, #2
 8005958:	f043 0202 	orr.w	r2, r3, #2
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005968:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	7b1b      	ldrb	r3, [r3, #12]
 800596e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005970:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	4313      	orrs	r3, r2
 8005976:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005980:	d003      	beq.n	800598a <HAL_ADC_Init+0xa2>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d102      	bne.n	8005990 <HAL_ADC_Init+0xa8>
 800598a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800598e:	e000      	b.n	8005992 <HAL_ADC_Init+0xaa>
 8005990:	2300      	movs	r3, #0
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	4313      	orrs	r3, r2
 8005996:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	7d1b      	ldrb	r3, [r3, #20]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d119      	bne.n	80059d4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	7b1b      	ldrb	r3, [r3, #12]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d109      	bne.n	80059bc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	3b01      	subs	r3, #1
 80059ae:	035a      	lsls	r2, r3, #13
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80059b8:	613b      	str	r3, [r7, #16]
 80059ba:	e00b      	b.n	80059d4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c0:	f043 0220 	orr.w	r2, r3, #32
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059cc:	f043 0201 	orr.w	r2, r3, #1
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	430a      	orrs	r2, r1
 80059e6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689a      	ldr	r2, [r3, #8]
 80059ee:	4b28      	ldr	r3, [pc, #160]	@ (8005a90 <HAL_ADC_Init+0x1a8>)
 80059f0:	4013      	ands	r3, r2
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	6812      	ldr	r2, [r2, #0]
 80059f6:	68b9      	ldr	r1, [r7, #8]
 80059f8:	430b      	orrs	r3, r1
 80059fa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a04:	d003      	beq.n	8005a0e <HAL_ADC_Init+0x126>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d104      	bne.n	8005a18 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	3b01      	subs	r3, #1
 8005a14:	051b      	lsls	r3, r3, #20
 8005a16:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a1e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	689a      	ldr	r2, [r3, #8]
 8005a32:	4b18      	ldr	r3, [pc, #96]	@ (8005a94 <HAL_ADC_Init+0x1ac>)
 8005a34:	4013      	ands	r3, r2
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d10b      	bne.n	8005a54 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a46:	f023 0303 	bic.w	r3, r3, #3
 8005a4a:	f043 0201 	orr.w	r2, r3, #1
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005a52:	e018      	b.n	8005a86 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a58:	f023 0312 	bic.w	r3, r3, #18
 8005a5c:	f043 0210 	orr.w	r2, r3, #16
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a68:	f043 0201 	orr.w	r2, r3, #1
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005a74:	e007      	b.n	8005a86 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a7a:	f043 0210 	orr.w	r2, r3, #16
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3718      	adds	r7, #24
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	ffe1f7fd 	.word	0xffe1f7fd
 8005a94:	ff1f0efe 	.word	0xff1f0efe

08005a98 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d101      	bne.n	8005ab2 <HAL_ADC_Start+0x1a>
 8005aae:	2302      	movs	r3, #2
 8005ab0:	e098      	b.n	8005be4 <HAL_ADC_Start+0x14c>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f99e 	bl	8005dfc <ADC_Enable>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f040 8087 	bne.w	8005bda <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ad4:	f023 0301 	bic.w	r3, r3, #1
 8005ad8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a41      	ldr	r2, [pc, #260]	@ (8005bec <HAL_ADC_Start+0x154>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d105      	bne.n	8005af6 <HAL_ADC_Start+0x5e>
 8005aea:	4b41      	ldr	r3, [pc, #260]	@ (8005bf0 <HAL_ADC_Start+0x158>)
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d115      	bne.n	8005b22 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005afa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d026      	beq.n	8005b5e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b14:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005b18:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005b20:	e01d      	b.n	8005b5e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b26:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a2f      	ldr	r2, [pc, #188]	@ (8005bf0 <HAL_ADC_Start+0x158>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d004      	beq.n	8005b42 <HAL_ADC_Start+0xaa>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a2b      	ldr	r2, [pc, #172]	@ (8005bec <HAL_ADC_Start+0x154>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d10d      	bne.n	8005b5e <HAL_ADC_Start+0xc6>
 8005b42:	4b2b      	ldr	r3, [pc, #172]	@ (8005bf0 <HAL_ADC_Start+0x158>)
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d007      	beq.n	8005b5e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b52:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005b56:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d006      	beq.n	8005b78 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6e:	f023 0206 	bic.w	r2, r3, #6
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005b76:	e002      	b.n	8005b7e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f06f 0202 	mvn.w	r2, #2
 8005b8e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8005b9a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8005b9e:	d113      	bne.n	8005bc8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005ba4:	4a11      	ldr	r2, [pc, #68]	@ (8005bec <HAL_ADC_Start+0x154>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d105      	bne.n	8005bb6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8005baa:	4b11      	ldr	r3, [pc, #68]	@ (8005bf0 <HAL_ADC_Start+0x158>)
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d108      	bne.n	8005bc8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	689a      	ldr	r2, [r3, #8]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8005bc4:	609a      	str	r2, [r3, #8]
 8005bc6:	e00c      	b.n	8005be2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689a      	ldr	r2, [r3, #8]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8005bd6:	609a      	str	r2, [r3, #8]
 8005bd8:	e003      	b.n	8005be2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8005be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	40012800 	.word	0x40012800
 8005bf0:	40012400 	.word	0x40012400

08005bf4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bc80      	pop	{r7}
 8005c0a:	4770      	bx	lr

08005c0c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c16:	2300      	movs	r3, #0
 8005c18:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d101      	bne.n	8005c2c <HAL_ADC_ConfigChannel+0x20>
 8005c28:	2302      	movs	r3, #2
 8005c2a:	e0dc      	b.n	8005de6 <HAL_ADC_ConfigChannel+0x1da>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	2b06      	cmp	r3, #6
 8005c3a:	d81c      	bhi.n	8005c76 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	4613      	mov	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4413      	add	r3, r2
 8005c4c:	3b05      	subs	r3, #5
 8005c4e:	221f      	movs	r2, #31
 8005c50:	fa02 f303 	lsl.w	r3, r2, r3
 8005c54:	43db      	mvns	r3, r3
 8005c56:	4019      	ands	r1, r3
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	6818      	ldr	r0, [r3, #0]
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	4613      	mov	r3, r2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	4413      	add	r3, r2
 8005c66:	3b05      	subs	r3, #5
 8005c68:	fa00 f203 	lsl.w	r2, r0, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	635a      	str	r2, [r3, #52]	@ 0x34
 8005c74:	e03c      	b.n	8005cf0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	2b0c      	cmp	r3, #12
 8005c7c:	d81c      	bhi.n	8005cb8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	4613      	mov	r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	4413      	add	r3, r2
 8005c8e:	3b23      	subs	r3, #35	@ 0x23
 8005c90:	221f      	movs	r2, #31
 8005c92:	fa02 f303 	lsl.w	r3, r2, r3
 8005c96:	43db      	mvns	r3, r3
 8005c98:	4019      	ands	r1, r3
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	6818      	ldr	r0, [r3, #0]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	685a      	ldr	r2, [r3, #4]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	3b23      	subs	r3, #35	@ 0x23
 8005caa:	fa00 f203 	lsl.w	r2, r0, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	631a      	str	r2, [r3, #48]	@ 0x30
 8005cb6:	e01b      	b.n	8005cf0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	685a      	ldr	r2, [r3, #4]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	3b41      	subs	r3, #65	@ 0x41
 8005cca:	221f      	movs	r2, #31
 8005ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd0:	43db      	mvns	r3, r3
 8005cd2:	4019      	ands	r1, r3
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	6818      	ldr	r0, [r3, #0]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4413      	add	r3, r2
 8005ce2:	3b41      	subs	r3, #65	@ 0x41
 8005ce4:	fa00 f203 	lsl.w	r2, r0, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2b09      	cmp	r3, #9
 8005cf6:	d91c      	bls.n	8005d32 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68d9      	ldr	r1, [r3, #12]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	4613      	mov	r3, r2
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	4413      	add	r3, r2
 8005d08:	3b1e      	subs	r3, #30
 8005d0a:	2207      	movs	r2, #7
 8005d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d10:	43db      	mvns	r3, r3
 8005d12:	4019      	ands	r1, r3
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	6898      	ldr	r0, [r3, #8]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	4413      	add	r3, r2
 8005d22:	3b1e      	subs	r3, #30
 8005d24:	fa00 f203 	lsl.w	r2, r0, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	60da      	str	r2, [r3, #12]
 8005d30:	e019      	b.n	8005d66 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6919      	ldr	r1, [r3, #16]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	005b      	lsls	r3, r3, #1
 8005d40:	4413      	add	r3, r2
 8005d42:	2207      	movs	r2, #7
 8005d44:	fa02 f303 	lsl.w	r3, r2, r3
 8005d48:	43db      	mvns	r3, r3
 8005d4a:	4019      	ands	r1, r3
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	6898      	ldr	r0, [r3, #8]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	4613      	mov	r3, r2
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	4413      	add	r3, r2
 8005d5a:	fa00 f203 	lsl.w	r2, r0, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2b10      	cmp	r3, #16
 8005d6c:	d003      	beq.n	8005d76 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005d72:	2b11      	cmp	r3, #17
 8005d74:	d132      	bne.n	8005ddc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a1d      	ldr	r2, [pc, #116]	@ (8005df0 <HAL_ADC_ConfigChannel+0x1e4>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d125      	bne.n	8005dcc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d126      	bne.n	8005ddc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	689a      	ldr	r2, [r3, #8]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8005d9c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2b10      	cmp	r3, #16
 8005da4:	d11a      	bne.n	8005ddc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005da6:	4b13      	ldr	r3, [pc, #76]	@ (8005df4 <HAL_ADC_ConfigChannel+0x1e8>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a13      	ldr	r2, [pc, #76]	@ (8005df8 <HAL_ADC_ConfigChannel+0x1ec>)
 8005dac:	fba2 2303 	umull	r2, r3, r2, r3
 8005db0:	0c9a      	lsrs	r2, r3, #18
 8005db2:	4613      	mov	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4413      	add	r3, r2
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005dbc:	e002      	b.n	8005dc4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1f9      	bne.n	8005dbe <HAL_ADC_ConfigChannel+0x1b2>
 8005dca:	e007      	b.n	8005ddc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd0:	f043 0220 	orr.w	r2, r3, #32
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bc80      	pop	{r7}
 8005dee:	4770      	bx	lr
 8005df0:	40012400 	.word	0x40012400
 8005df4:	20000004 	.word	0x20000004
 8005df8:	431bde83 	.word	0x431bde83

08005dfc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e04:	2300      	movs	r3, #0
 8005e06:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d040      	beq.n	8005e9c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	689a      	ldr	r2, [r3, #8]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f042 0201 	orr.w	r2, r2, #1
 8005e28:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005e2a:	4b1f      	ldr	r3, [pc, #124]	@ (8005ea8 <ADC_Enable+0xac>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a1f      	ldr	r2, [pc, #124]	@ (8005eac <ADC_Enable+0xb0>)
 8005e30:	fba2 2303 	umull	r2, r3, r2, r3
 8005e34:	0c9b      	lsrs	r3, r3, #18
 8005e36:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005e38:	e002      	b.n	8005e40 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1f9      	bne.n	8005e3a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005e46:	f7ff fd21 	bl	800588c <HAL_GetTick>
 8005e4a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005e4c:	e01f      	b.n	8005e8e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005e4e:	f7ff fd1d 	bl	800588c <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d918      	bls.n	8005e8e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d011      	beq.n	8005e8e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e6e:	f043 0210 	orr.w	r2, r3, #16
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e7a:	f043 0201 	orr.w	r2, r3, #1
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e007      	b.n	8005e9e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f003 0301 	and.w	r3, r3, #1
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d1d8      	bne.n	8005e4e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	20000004 	.word	0x20000004
 8005eac:	431bde83 	.word	0x431bde83

08005eb0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d12e      	bne.n	8005f28 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	689a      	ldr	r2, [r3, #8]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 0201 	bic.w	r2, r2, #1
 8005ed8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005eda:	f7ff fcd7 	bl	800588c <HAL_GetTick>
 8005ede:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005ee0:	e01b      	b.n	8005f1a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005ee2:	f7ff fcd3 	bl	800588c <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d914      	bls.n	8005f1a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d10d      	bne.n	8005f1a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f02:	f043 0210 	orr.w	r2, r3, #16
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f0e:	f043 0201 	orr.w	r2, r3, #1
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e007      	b.n	8005f2a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f003 0301 	and.w	r3, r3, #1
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d0dc      	beq.n	8005ee2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
	...

08005f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f003 0307 	and.w	r3, r3, #7
 8005f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f44:	4b0c      	ldr	r3, [pc, #48]	@ (8005f78 <__NVIC_SetPriorityGrouping+0x44>)
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f4a:	68ba      	ldr	r2, [r7, #8]
 8005f4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005f50:	4013      	ands	r3, r2
 8005f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005f60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f66:	4a04      	ldr	r2, [pc, #16]	@ (8005f78 <__NVIC_SetPriorityGrouping+0x44>)
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	60d3      	str	r3, [r2, #12]
}
 8005f6c:	bf00      	nop
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bc80      	pop	{r7}
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	e000ed00 	.word	0xe000ed00

08005f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f80:	4b04      	ldr	r3, [pc, #16]	@ (8005f94 <__NVIC_GetPriorityGrouping+0x18>)
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	0a1b      	lsrs	r3, r3, #8
 8005f86:	f003 0307 	and.w	r3, r3, #7
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bc80      	pop	{r7}
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	e000ed00 	.word	0xe000ed00

08005f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	db0b      	blt.n	8005fc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005faa:	79fb      	ldrb	r3, [r7, #7]
 8005fac:	f003 021f 	and.w	r2, r3, #31
 8005fb0:	4906      	ldr	r1, [pc, #24]	@ (8005fcc <__NVIC_EnableIRQ+0x34>)
 8005fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fb6:	095b      	lsrs	r3, r3, #5
 8005fb8:	2001      	movs	r0, #1
 8005fba:	fa00 f202 	lsl.w	r2, r0, r2
 8005fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005fc2:	bf00      	nop
 8005fc4:	370c      	adds	r7, #12
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bc80      	pop	{r7}
 8005fca:	4770      	bx	lr
 8005fcc:	e000e100 	.word	0xe000e100

08005fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	6039      	str	r1, [r7, #0]
 8005fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	db0a      	blt.n	8005ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	b2da      	uxtb	r2, r3
 8005fe8:	490c      	ldr	r1, [pc, #48]	@ (800601c <__NVIC_SetPriority+0x4c>)
 8005fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fee:	0112      	lsls	r2, r2, #4
 8005ff0:	b2d2      	uxtb	r2, r2
 8005ff2:	440b      	add	r3, r1
 8005ff4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ff8:	e00a      	b.n	8006010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	b2da      	uxtb	r2, r3
 8005ffe:	4908      	ldr	r1, [pc, #32]	@ (8006020 <__NVIC_SetPriority+0x50>)
 8006000:	79fb      	ldrb	r3, [r7, #7]
 8006002:	f003 030f 	and.w	r3, r3, #15
 8006006:	3b04      	subs	r3, #4
 8006008:	0112      	lsls	r2, r2, #4
 800600a:	b2d2      	uxtb	r2, r2
 800600c:	440b      	add	r3, r1
 800600e:	761a      	strb	r2, [r3, #24]
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	bc80      	pop	{r7}
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	e000e100 	.word	0xe000e100
 8006020:	e000ed00 	.word	0xe000ed00

08006024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006024:	b480      	push	{r7}
 8006026:	b089      	sub	sp, #36	@ 0x24
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f003 0307 	and.w	r3, r3, #7
 8006036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	f1c3 0307 	rsb	r3, r3, #7
 800603e:	2b04      	cmp	r3, #4
 8006040:	bf28      	it	cs
 8006042:	2304      	movcs	r3, #4
 8006044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	3304      	adds	r3, #4
 800604a:	2b06      	cmp	r3, #6
 800604c:	d902      	bls.n	8006054 <NVIC_EncodePriority+0x30>
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	3b03      	subs	r3, #3
 8006052:	e000      	b.n	8006056 <NVIC_EncodePriority+0x32>
 8006054:	2300      	movs	r3, #0
 8006056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006058:	f04f 32ff 	mov.w	r2, #4294967295
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	fa02 f303 	lsl.w	r3, r2, r3
 8006062:	43da      	mvns	r2, r3
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	401a      	ands	r2, r3
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800606c:	f04f 31ff 	mov.w	r1, #4294967295
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	fa01 f303 	lsl.w	r3, r1, r3
 8006076:	43d9      	mvns	r1, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800607c:	4313      	orrs	r3, r2
         );
}
 800607e:	4618      	mov	r0, r3
 8006080:	3724      	adds	r7, #36	@ 0x24
 8006082:	46bd      	mov	sp, r7
 8006084:	bc80      	pop	{r7}
 8006086:	4770      	bx	lr

08006088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	3b01      	subs	r3, #1
 8006094:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006098:	d301      	bcc.n	800609e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800609a:	2301      	movs	r3, #1
 800609c:	e00f      	b.n	80060be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800609e:	4a0a      	ldr	r2, [pc, #40]	@ (80060c8 <SysTick_Config+0x40>)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	3b01      	subs	r3, #1
 80060a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80060a6:	210f      	movs	r1, #15
 80060a8:	f04f 30ff 	mov.w	r0, #4294967295
 80060ac:	f7ff ff90 	bl	8005fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80060b0:	4b05      	ldr	r3, [pc, #20]	@ (80060c8 <SysTick_Config+0x40>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80060b6:	4b04      	ldr	r3, [pc, #16]	@ (80060c8 <SysTick_Config+0x40>)
 80060b8:	2207      	movs	r2, #7
 80060ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3708      	adds	r7, #8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	e000e010 	.word	0xe000e010

080060cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f7ff ff2d 	bl	8005f34 <__NVIC_SetPriorityGrouping>
}
 80060da:	bf00      	nop
 80060dc:	3708      	adds	r7, #8
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b086      	sub	sp, #24
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	4603      	mov	r3, r0
 80060ea:	60b9      	str	r1, [r7, #8]
 80060ec:	607a      	str	r2, [r7, #4]
 80060ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80060f0:	2300      	movs	r3, #0
 80060f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80060f4:	f7ff ff42 	bl	8005f7c <__NVIC_GetPriorityGrouping>
 80060f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	68b9      	ldr	r1, [r7, #8]
 80060fe:	6978      	ldr	r0, [r7, #20]
 8006100:	f7ff ff90 	bl	8006024 <NVIC_EncodePriority>
 8006104:	4602      	mov	r2, r0
 8006106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800610a:	4611      	mov	r1, r2
 800610c:	4618      	mov	r0, r3
 800610e:	f7ff ff5f 	bl	8005fd0 <__NVIC_SetPriority>
}
 8006112:	bf00      	nop
 8006114:	3718      	adds	r7, #24
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b082      	sub	sp, #8
 800611e:	af00      	add	r7, sp, #0
 8006120:	4603      	mov	r3, r0
 8006122:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006128:	4618      	mov	r0, r3
 800612a:	f7ff ff35 	bl	8005f98 <__NVIC_EnableIRQ>
}
 800612e:	bf00      	nop
 8006130:	3708      	adds	r7, #8
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b082      	sub	sp, #8
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f7ff ffa2 	bl	8006088 <SysTick_Config>
 8006144:	4603      	mov	r3, r0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
	...

08006150 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006150:	b480      	push	{r7}
 8006152:	b08b      	sub	sp, #44	@ 0x2c
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800615a:	2300      	movs	r3, #0
 800615c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800615e:	2300      	movs	r3, #0
 8006160:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006162:	e169      	b.n	8006438 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006164:	2201      	movs	r2, #1
 8006166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006168:	fa02 f303 	lsl.w	r3, r2, r3
 800616c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	69fa      	ldr	r2, [r7, #28]
 8006174:	4013      	ands	r3, r2
 8006176:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	429a      	cmp	r2, r3
 800617e:	f040 8158 	bne.w	8006432 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	4a9a      	ldr	r2, [pc, #616]	@ (80063f0 <HAL_GPIO_Init+0x2a0>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d05e      	beq.n	800624a <HAL_GPIO_Init+0xfa>
 800618c:	4a98      	ldr	r2, [pc, #608]	@ (80063f0 <HAL_GPIO_Init+0x2a0>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d875      	bhi.n	800627e <HAL_GPIO_Init+0x12e>
 8006192:	4a98      	ldr	r2, [pc, #608]	@ (80063f4 <HAL_GPIO_Init+0x2a4>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d058      	beq.n	800624a <HAL_GPIO_Init+0xfa>
 8006198:	4a96      	ldr	r2, [pc, #600]	@ (80063f4 <HAL_GPIO_Init+0x2a4>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d86f      	bhi.n	800627e <HAL_GPIO_Init+0x12e>
 800619e:	4a96      	ldr	r2, [pc, #600]	@ (80063f8 <HAL_GPIO_Init+0x2a8>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d052      	beq.n	800624a <HAL_GPIO_Init+0xfa>
 80061a4:	4a94      	ldr	r2, [pc, #592]	@ (80063f8 <HAL_GPIO_Init+0x2a8>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d869      	bhi.n	800627e <HAL_GPIO_Init+0x12e>
 80061aa:	4a94      	ldr	r2, [pc, #592]	@ (80063fc <HAL_GPIO_Init+0x2ac>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d04c      	beq.n	800624a <HAL_GPIO_Init+0xfa>
 80061b0:	4a92      	ldr	r2, [pc, #584]	@ (80063fc <HAL_GPIO_Init+0x2ac>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d863      	bhi.n	800627e <HAL_GPIO_Init+0x12e>
 80061b6:	4a92      	ldr	r2, [pc, #584]	@ (8006400 <HAL_GPIO_Init+0x2b0>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d046      	beq.n	800624a <HAL_GPIO_Init+0xfa>
 80061bc:	4a90      	ldr	r2, [pc, #576]	@ (8006400 <HAL_GPIO_Init+0x2b0>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d85d      	bhi.n	800627e <HAL_GPIO_Init+0x12e>
 80061c2:	2b12      	cmp	r3, #18
 80061c4:	d82a      	bhi.n	800621c <HAL_GPIO_Init+0xcc>
 80061c6:	2b12      	cmp	r3, #18
 80061c8:	d859      	bhi.n	800627e <HAL_GPIO_Init+0x12e>
 80061ca:	a201      	add	r2, pc, #4	@ (adr r2, 80061d0 <HAL_GPIO_Init+0x80>)
 80061cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d0:	0800624b 	.word	0x0800624b
 80061d4:	08006225 	.word	0x08006225
 80061d8:	08006237 	.word	0x08006237
 80061dc:	08006279 	.word	0x08006279
 80061e0:	0800627f 	.word	0x0800627f
 80061e4:	0800627f 	.word	0x0800627f
 80061e8:	0800627f 	.word	0x0800627f
 80061ec:	0800627f 	.word	0x0800627f
 80061f0:	0800627f 	.word	0x0800627f
 80061f4:	0800627f 	.word	0x0800627f
 80061f8:	0800627f 	.word	0x0800627f
 80061fc:	0800627f 	.word	0x0800627f
 8006200:	0800627f 	.word	0x0800627f
 8006204:	0800627f 	.word	0x0800627f
 8006208:	0800627f 	.word	0x0800627f
 800620c:	0800627f 	.word	0x0800627f
 8006210:	0800627f 	.word	0x0800627f
 8006214:	0800622d 	.word	0x0800622d
 8006218:	08006241 	.word	0x08006241
 800621c:	4a79      	ldr	r2, [pc, #484]	@ (8006404 <HAL_GPIO_Init+0x2b4>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d013      	beq.n	800624a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006222:	e02c      	b.n	800627e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	623b      	str	r3, [r7, #32]
          break;
 800622a:	e029      	b.n	8006280 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	3304      	adds	r3, #4
 8006232:	623b      	str	r3, [r7, #32]
          break;
 8006234:	e024      	b.n	8006280 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	3308      	adds	r3, #8
 800623c:	623b      	str	r3, [r7, #32]
          break;
 800623e:	e01f      	b.n	8006280 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	330c      	adds	r3, #12
 8006246:	623b      	str	r3, [r7, #32]
          break;
 8006248:	e01a      	b.n	8006280 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d102      	bne.n	8006258 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006252:	2304      	movs	r3, #4
 8006254:	623b      	str	r3, [r7, #32]
          break;
 8006256:	e013      	b.n	8006280 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d105      	bne.n	800626c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006260:	2308      	movs	r3, #8
 8006262:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	69fa      	ldr	r2, [r7, #28]
 8006268:	611a      	str	r2, [r3, #16]
          break;
 800626a:	e009      	b.n	8006280 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800626c:	2308      	movs	r3, #8
 800626e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	69fa      	ldr	r2, [r7, #28]
 8006274:	615a      	str	r2, [r3, #20]
          break;
 8006276:	e003      	b.n	8006280 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006278:	2300      	movs	r3, #0
 800627a:	623b      	str	r3, [r7, #32]
          break;
 800627c:	e000      	b.n	8006280 <HAL_GPIO_Init+0x130>
          break;
 800627e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	2bff      	cmp	r3, #255	@ 0xff
 8006284:	d801      	bhi.n	800628a <HAL_GPIO_Init+0x13a>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	e001      	b.n	800628e <HAL_GPIO_Init+0x13e>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	3304      	adds	r3, #4
 800628e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	2bff      	cmp	r3, #255	@ 0xff
 8006294:	d802      	bhi.n	800629c <HAL_GPIO_Init+0x14c>
 8006296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	e002      	b.n	80062a2 <HAL_GPIO_Init+0x152>
 800629c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629e:	3b08      	subs	r3, #8
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	210f      	movs	r1, #15
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	fa01 f303 	lsl.w	r3, r1, r3
 80062b0:	43db      	mvns	r3, r3
 80062b2:	401a      	ands	r2, r3
 80062b4:	6a39      	ldr	r1, [r7, #32]
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	fa01 f303 	lsl.w	r3, r1, r3
 80062bc:	431a      	orrs	r2, r3
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 80b1 	beq.w	8006432 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80062d0:	4b4d      	ldr	r3, [pc, #308]	@ (8006408 <HAL_GPIO_Init+0x2b8>)
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	4a4c      	ldr	r2, [pc, #304]	@ (8006408 <HAL_GPIO_Init+0x2b8>)
 80062d6:	f043 0301 	orr.w	r3, r3, #1
 80062da:	6193      	str	r3, [r2, #24]
 80062dc:	4b4a      	ldr	r3, [pc, #296]	@ (8006408 <HAL_GPIO_Init+0x2b8>)
 80062de:	699b      	ldr	r3, [r3, #24]
 80062e0:	f003 0301 	and.w	r3, r3, #1
 80062e4:	60bb      	str	r3, [r7, #8]
 80062e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80062e8:	4a48      	ldr	r2, [pc, #288]	@ (800640c <HAL_GPIO_Init+0x2bc>)
 80062ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ec:	089b      	lsrs	r3, r3, #2
 80062ee:	3302      	adds	r3, #2
 80062f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80062f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f8:	f003 0303 	and.w	r3, r3, #3
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	220f      	movs	r2, #15
 8006300:	fa02 f303 	lsl.w	r3, r2, r3
 8006304:	43db      	mvns	r3, r3
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	4013      	ands	r3, r2
 800630a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a40      	ldr	r2, [pc, #256]	@ (8006410 <HAL_GPIO_Init+0x2c0>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d013      	beq.n	800633c <HAL_GPIO_Init+0x1ec>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a3f      	ldr	r2, [pc, #252]	@ (8006414 <HAL_GPIO_Init+0x2c4>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d00d      	beq.n	8006338 <HAL_GPIO_Init+0x1e8>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a3e      	ldr	r2, [pc, #248]	@ (8006418 <HAL_GPIO_Init+0x2c8>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d007      	beq.n	8006334 <HAL_GPIO_Init+0x1e4>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a3d      	ldr	r2, [pc, #244]	@ (800641c <HAL_GPIO_Init+0x2cc>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d101      	bne.n	8006330 <HAL_GPIO_Init+0x1e0>
 800632c:	2303      	movs	r3, #3
 800632e:	e006      	b.n	800633e <HAL_GPIO_Init+0x1ee>
 8006330:	2304      	movs	r3, #4
 8006332:	e004      	b.n	800633e <HAL_GPIO_Init+0x1ee>
 8006334:	2302      	movs	r3, #2
 8006336:	e002      	b.n	800633e <HAL_GPIO_Init+0x1ee>
 8006338:	2301      	movs	r3, #1
 800633a:	e000      	b.n	800633e <HAL_GPIO_Init+0x1ee>
 800633c:	2300      	movs	r3, #0
 800633e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006340:	f002 0203 	and.w	r2, r2, #3
 8006344:	0092      	lsls	r2, r2, #2
 8006346:	4093      	lsls	r3, r2
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	4313      	orrs	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800634e:	492f      	ldr	r1, [pc, #188]	@ (800640c <HAL_GPIO_Init+0x2bc>)
 8006350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006352:	089b      	lsrs	r3, r3, #2
 8006354:	3302      	adds	r3, #2
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d006      	beq.n	8006376 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006368:	4b2d      	ldr	r3, [pc, #180]	@ (8006420 <HAL_GPIO_Init+0x2d0>)
 800636a:	689a      	ldr	r2, [r3, #8]
 800636c:	492c      	ldr	r1, [pc, #176]	@ (8006420 <HAL_GPIO_Init+0x2d0>)
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	4313      	orrs	r3, r2
 8006372:	608b      	str	r3, [r1, #8]
 8006374:	e006      	b.n	8006384 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006376:	4b2a      	ldr	r3, [pc, #168]	@ (8006420 <HAL_GPIO_Init+0x2d0>)
 8006378:	689a      	ldr	r2, [r3, #8]
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	43db      	mvns	r3, r3
 800637e:	4928      	ldr	r1, [pc, #160]	@ (8006420 <HAL_GPIO_Init+0x2d0>)
 8006380:	4013      	ands	r3, r2
 8006382:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d006      	beq.n	800639e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006390:	4b23      	ldr	r3, [pc, #140]	@ (8006420 <HAL_GPIO_Init+0x2d0>)
 8006392:	68da      	ldr	r2, [r3, #12]
 8006394:	4922      	ldr	r1, [pc, #136]	@ (8006420 <HAL_GPIO_Init+0x2d0>)
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	4313      	orrs	r3, r2
 800639a:	60cb      	str	r3, [r1, #12]
 800639c:	e006      	b.n	80063ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800639e:	4b20      	ldr	r3, [pc, #128]	@ (8006420 <HAL_GPIO_Init+0x2d0>)
 80063a0:	68da      	ldr	r2, [r3, #12]
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	43db      	mvns	r3, r3
 80063a6:	491e      	ldr	r1, [pc, #120]	@ (8006420 <HAL_GPIO_Init+0x2d0>)
 80063a8:	4013      	ands	r3, r2
 80063aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d006      	beq.n	80063c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80063b8:	4b19      	ldr	r3, [pc, #100]	@ (8006420 <HAL_GPIO_Init+0x2d0>)
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	4918      	ldr	r1, [pc, #96]	@ (8006420 <HAL_GPIO_Init+0x2d0>)
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	604b      	str	r3, [r1, #4]
 80063c4:	e006      	b.n	80063d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80063c6:	4b16      	ldr	r3, [pc, #88]	@ (8006420 <HAL_GPIO_Init+0x2d0>)
 80063c8:	685a      	ldr	r2, [r3, #4]
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	43db      	mvns	r3, r3
 80063ce:	4914      	ldr	r1, [pc, #80]	@ (8006420 <HAL_GPIO_Init+0x2d0>)
 80063d0:	4013      	ands	r3, r2
 80063d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d021      	beq.n	8006424 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80063e0:	4b0f      	ldr	r3, [pc, #60]	@ (8006420 <HAL_GPIO_Init+0x2d0>)
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	490e      	ldr	r1, [pc, #56]	@ (8006420 <HAL_GPIO_Init+0x2d0>)
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	600b      	str	r3, [r1, #0]
 80063ec:	e021      	b.n	8006432 <HAL_GPIO_Init+0x2e2>
 80063ee:	bf00      	nop
 80063f0:	10320000 	.word	0x10320000
 80063f4:	10310000 	.word	0x10310000
 80063f8:	10220000 	.word	0x10220000
 80063fc:	10210000 	.word	0x10210000
 8006400:	10120000 	.word	0x10120000
 8006404:	10110000 	.word	0x10110000
 8006408:	40021000 	.word	0x40021000
 800640c:	40010000 	.word	0x40010000
 8006410:	40010800 	.word	0x40010800
 8006414:	40010c00 	.word	0x40010c00
 8006418:	40011000 	.word	0x40011000
 800641c:	40011400 	.word	0x40011400
 8006420:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006424:	4b0b      	ldr	r3, [pc, #44]	@ (8006454 <HAL_GPIO_Init+0x304>)
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	43db      	mvns	r3, r3
 800642c:	4909      	ldr	r1, [pc, #36]	@ (8006454 <HAL_GPIO_Init+0x304>)
 800642e:	4013      	ands	r3, r2
 8006430:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006434:	3301      	adds	r3, #1
 8006436:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800643e:	fa22 f303 	lsr.w	r3, r2, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	f47f ae8e 	bne.w	8006164 <HAL_GPIO_Init+0x14>
  }
}
 8006448:	bf00      	nop
 800644a:	bf00      	nop
 800644c:	372c      	adds	r7, #44	@ 0x2c
 800644e:	46bd      	mov	sp, r7
 8006450:	bc80      	pop	{r7}
 8006452:	4770      	bx	lr
 8006454:	40010400 	.word	0x40010400

08006458 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	460b      	mov	r3, r1
 8006462:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	689a      	ldr	r2, [r3, #8]
 8006468:	887b      	ldrh	r3, [r7, #2]
 800646a:	4013      	ands	r3, r2
 800646c:	2b00      	cmp	r3, #0
 800646e:	d002      	beq.n	8006476 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006470:	2301      	movs	r3, #1
 8006472:	73fb      	strb	r3, [r7, #15]
 8006474:	e001      	b.n	800647a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006476:	2300      	movs	r3, #0
 8006478:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800647a:	7bfb      	ldrb	r3, [r7, #15]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3714      	adds	r7, #20
 8006480:	46bd      	mov	sp, r7
 8006482:	bc80      	pop	{r7}
 8006484:	4770      	bx	lr

08006486 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006486:	b480      	push	{r7}
 8006488:	b083      	sub	sp, #12
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	460b      	mov	r3, r1
 8006490:	807b      	strh	r3, [r7, #2]
 8006492:	4613      	mov	r3, r2
 8006494:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006496:	787b      	ldrb	r3, [r7, #1]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d003      	beq.n	80064a4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800649c:	887a      	ldrh	r2, [r7, #2]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80064a2:	e003      	b.n	80064ac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80064a4:	887b      	ldrh	r3, [r7, #2]
 80064a6:	041a      	lsls	r2, r3, #16
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	611a      	str	r2, [r3, #16]
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bc80      	pop	{r7}
 80064b4:	4770      	bx	lr
	...

080064b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	4603      	mov	r3, r0
 80064c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80064c2:	4b08      	ldr	r3, [pc, #32]	@ (80064e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064c4:	695a      	ldr	r2, [r3, #20]
 80064c6:	88fb      	ldrh	r3, [r7, #6]
 80064c8:	4013      	ands	r3, r2
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d006      	beq.n	80064dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80064ce:	4a05      	ldr	r2, [pc, #20]	@ (80064e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064d0:	88fb      	ldrh	r3, [r7, #6]
 80064d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80064d4:	88fb      	ldrh	r3, [r7, #6]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7fe fb08 	bl	8004aec <HAL_GPIO_EXTI_Callback>
  }
}
 80064dc:	bf00      	nop
 80064de:	3708      	adds	r7, #8
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	40010400 	.word	0x40010400

080064e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d101      	bne.n	80064fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e272      	b.n	80069e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	2b00      	cmp	r3, #0
 8006504:	f000 8087 	beq.w	8006616 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006508:	4b92      	ldr	r3, [pc, #584]	@ (8006754 <HAL_RCC_OscConfig+0x26c>)
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	f003 030c 	and.w	r3, r3, #12
 8006510:	2b04      	cmp	r3, #4
 8006512:	d00c      	beq.n	800652e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006514:	4b8f      	ldr	r3, [pc, #572]	@ (8006754 <HAL_RCC_OscConfig+0x26c>)
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	f003 030c 	and.w	r3, r3, #12
 800651c:	2b08      	cmp	r3, #8
 800651e:	d112      	bne.n	8006546 <HAL_RCC_OscConfig+0x5e>
 8006520:	4b8c      	ldr	r3, [pc, #560]	@ (8006754 <HAL_RCC_OscConfig+0x26c>)
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800652c:	d10b      	bne.n	8006546 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800652e:	4b89      	ldr	r3, [pc, #548]	@ (8006754 <HAL_RCC_OscConfig+0x26c>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d06c      	beq.n	8006614 <HAL_RCC_OscConfig+0x12c>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d168      	bne.n	8006614 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e24c      	b.n	80069e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800654e:	d106      	bne.n	800655e <HAL_RCC_OscConfig+0x76>
 8006550:	4b80      	ldr	r3, [pc, #512]	@ (8006754 <HAL_RCC_OscConfig+0x26c>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a7f      	ldr	r2, [pc, #508]	@ (8006754 <HAL_RCC_OscConfig+0x26c>)
 8006556:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800655a:	6013      	str	r3, [r2, #0]
 800655c:	e02e      	b.n	80065bc <HAL_RCC_OscConfig+0xd4>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10c      	bne.n	8006580 <HAL_RCC_OscConfig+0x98>
 8006566:	4b7b      	ldr	r3, [pc, #492]	@ (8006754 <HAL_RCC_OscConfig+0x26c>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a7a      	ldr	r2, [pc, #488]	@ (8006754 <HAL_RCC_OscConfig+0x26c>)
 800656c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006570:	6013      	str	r3, [r2, #0]
 8006572:	4b78      	ldr	r3, [pc, #480]	@ (8006754 <HAL_RCC_OscConfig+0x26c>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a77      	ldr	r2, [pc, #476]	@ (8006754 <HAL_RCC_OscConfig+0x26c>)
 8006578:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800657c:	6013      	str	r3, [r2, #0]
 800657e:	e01d      	b.n	80065bc <HAL_RCC_OscConfig+0xd4>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006588:	d10c      	bne.n	80065a4 <HAL_RCC_OscConfig+0xbc>
 800658a:	4b72      	ldr	r3, [pc, #456]	@ (8006754 <HAL_RCC_OscConfig+0x26c>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a71      	ldr	r2, [pc, #452]	@ (8006754 <HAL_RCC_OscConfig+0x26c>)
 8006590:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006594:	6013      	str	r3, [r2, #0]
 8006596:	4b6f      	ldr	r3, [pc, #444]	@ (8006754 <HAL_RCC_OscConfig+0x26c>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a6e      	ldr	r2, [pc, #440]	@ (8006754 <HAL_RCC_OscConfig+0x26c>)
 800659c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065a0:	6013      	str	r3, [r2, #0]
 80065a2:	e00b      	b.n	80065bc <HAL_RCC_OscConfig+0xd4>
 80065a4:	4b6b      	ldr	r3, [pc, #428]	@ (8006754 <HAL_RCC_OscConfig+0x26c>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a6a      	ldr	r2, [pc, #424]	@ (8006754 <HAL_RCC_OscConfig+0x26c>)
 80065aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065ae:	6013      	str	r3, [r2, #0]
 80065b0:	4b68      	ldr	r3, [pc, #416]	@ (8006754 <HAL_RCC_OscConfig+0x26c>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a67      	ldr	r2, [pc, #412]	@ (8006754 <HAL_RCC_OscConfig+0x26c>)
 80065b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80065ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d013      	beq.n	80065ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065c4:	f7ff f962 	bl	800588c <HAL_GetTick>
 80065c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065ca:	e008      	b.n	80065de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065cc:	f7ff f95e 	bl	800588c <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	2b64      	cmp	r3, #100	@ 0x64
 80065d8:	d901      	bls.n	80065de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e200      	b.n	80069e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065de:	4b5d      	ldr	r3, [pc, #372]	@ (8006754 <HAL_RCC_OscConfig+0x26c>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d0f0      	beq.n	80065cc <HAL_RCC_OscConfig+0xe4>
 80065ea:	e014      	b.n	8006616 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065ec:	f7ff f94e 	bl	800588c <HAL_GetTick>
 80065f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065f2:	e008      	b.n	8006606 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065f4:	f7ff f94a 	bl	800588c <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	2b64      	cmp	r3, #100	@ 0x64
 8006600:	d901      	bls.n	8006606 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e1ec      	b.n	80069e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006606:	4b53      	ldr	r3, [pc, #332]	@ (8006754 <HAL_RCC_OscConfig+0x26c>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1f0      	bne.n	80065f4 <HAL_RCC_OscConfig+0x10c>
 8006612:	e000      	b.n	8006616 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0302 	and.w	r3, r3, #2
 800661e:	2b00      	cmp	r3, #0
 8006620:	d063      	beq.n	80066ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006622:	4b4c      	ldr	r3, [pc, #304]	@ (8006754 <HAL_RCC_OscConfig+0x26c>)
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f003 030c 	and.w	r3, r3, #12
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00b      	beq.n	8006646 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800662e:	4b49      	ldr	r3, [pc, #292]	@ (8006754 <HAL_RCC_OscConfig+0x26c>)
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	f003 030c 	and.w	r3, r3, #12
 8006636:	2b08      	cmp	r3, #8
 8006638:	d11c      	bne.n	8006674 <HAL_RCC_OscConfig+0x18c>
 800663a:	4b46      	ldr	r3, [pc, #280]	@ (8006754 <HAL_RCC_OscConfig+0x26c>)
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d116      	bne.n	8006674 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006646:	4b43      	ldr	r3, [pc, #268]	@ (8006754 <HAL_RCC_OscConfig+0x26c>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	2b00      	cmp	r3, #0
 8006650:	d005      	beq.n	800665e <HAL_RCC_OscConfig+0x176>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d001      	beq.n	800665e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e1c0      	b.n	80069e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800665e:	4b3d      	ldr	r3, [pc, #244]	@ (8006754 <HAL_RCC_OscConfig+0x26c>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	00db      	lsls	r3, r3, #3
 800666c:	4939      	ldr	r1, [pc, #228]	@ (8006754 <HAL_RCC_OscConfig+0x26c>)
 800666e:	4313      	orrs	r3, r2
 8006670:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006672:	e03a      	b.n	80066ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d020      	beq.n	80066be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800667c:	4b36      	ldr	r3, [pc, #216]	@ (8006758 <HAL_RCC_OscConfig+0x270>)
 800667e:	2201      	movs	r2, #1
 8006680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006682:	f7ff f903 	bl	800588c <HAL_GetTick>
 8006686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006688:	e008      	b.n	800669c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800668a:	f7ff f8ff 	bl	800588c <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	2b02      	cmp	r3, #2
 8006696:	d901      	bls.n	800669c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e1a1      	b.n	80069e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800669c:	4b2d      	ldr	r3, [pc, #180]	@ (8006754 <HAL_RCC_OscConfig+0x26c>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0302 	and.w	r3, r3, #2
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d0f0      	beq.n	800668a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066a8:	4b2a      	ldr	r3, [pc, #168]	@ (8006754 <HAL_RCC_OscConfig+0x26c>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	695b      	ldr	r3, [r3, #20]
 80066b4:	00db      	lsls	r3, r3, #3
 80066b6:	4927      	ldr	r1, [pc, #156]	@ (8006754 <HAL_RCC_OscConfig+0x26c>)
 80066b8:	4313      	orrs	r3, r2
 80066ba:	600b      	str	r3, [r1, #0]
 80066bc:	e015      	b.n	80066ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066be:	4b26      	ldr	r3, [pc, #152]	@ (8006758 <HAL_RCC_OscConfig+0x270>)
 80066c0:	2200      	movs	r2, #0
 80066c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066c4:	f7ff f8e2 	bl	800588c <HAL_GetTick>
 80066c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066ca:	e008      	b.n	80066de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066cc:	f7ff f8de 	bl	800588c <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d901      	bls.n	80066de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e180      	b.n	80069e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066de:	4b1d      	ldr	r3, [pc, #116]	@ (8006754 <HAL_RCC_OscConfig+0x26c>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0302 	and.w	r3, r3, #2
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1f0      	bne.n	80066cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0308 	and.w	r3, r3, #8
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d03a      	beq.n	800676c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d019      	beq.n	8006732 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066fe:	4b17      	ldr	r3, [pc, #92]	@ (800675c <HAL_RCC_OscConfig+0x274>)
 8006700:	2201      	movs	r2, #1
 8006702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006704:	f7ff f8c2 	bl	800588c <HAL_GetTick>
 8006708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800670a:	e008      	b.n	800671e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800670c:	f7ff f8be 	bl	800588c <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	2b02      	cmp	r3, #2
 8006718:	d901      	bls.n	800671e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e160      	b.n	80069e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800671e:	4b0d      	ldr	r3, [pc, #52]	@ (8006754 <HAL_RCC_OscConfig+0x26c>)
 8006720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006722:	f003 0302 	and.w	r3, r3, #2
 8006726:	2b00      	cmp	r3, #0
 8006728:	d0f0      	beq.n	800670c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800672a:	2001      	movs	r0, #1
 800672c:	f000 face 	bl	8006ccc <RCC_Delay>
 8006730:	e01c      	b.n	800676c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006732:	4b0a      	ldr	r3, [pc, #40]	@ (800675c <HAL_RCC_OscConfig+0x274>)
 8006734:	2200      	movs	r2, #0
 8006736:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006738:	f7ff f8a8 	bl	800588c <HAL_GetTick>
 800673c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800673e:	e00f      	b.n	8006760 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006740:	f7ff f8a4 	bl	800588c <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	2b02      	cmp	r3, #2
 800674c:	d908      	bls.n	8006760 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e146      	b.n	80069e0 <HAL_RCC_OscConfig+0x4f8>
 8006752:	bf00      	nop
 8006754:	40021000 	.word	0x40021000
 8006758:	42420000 	.word	0x42420000
 800675c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006760:	4b92      	ldr	r3, [pc, #584]	@ (80069ac <HAL_RCC_OscConfig+0x4c4>)
 8006762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006764:	f003 0302 	and.w	r3, r3, #2
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1e9      	bne.n	8006740 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0304 	and.w	r3, r3, #4
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 80a6 	beq.w	80068c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800677a:	2300      	movs	r3, #0
 800677c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800677e:	4b8b      	ldr	r3, [pc, #556]	@ (80069ac <HAL_RCC_OscConfig+0x4c4>)
 8006780:	69db      	ldr	r3, [r3, #28]
 8006782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10d      	bne.n	80067a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800678a:	4b88      	ldr	r3, [pc, #544]	@ (80069ac <HAL_RCC_OscConfig+0x4c4>)
 800678c:	69db      	ldr	r3, [r3, #28]
 800678e:	4a87      	ldr	r2, [pc, #540]	@ (80069ac <HAL_RCC_OscConfig+0x4c4>)
 8006790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006794:	61d3      	str	r3, [r2, #28]
 8006796:	4b85      	ldr	r3, [pc, #532]	@ (80069ac <HAL_RCC_OscConfig+0x4c4>)
 8006798:	69db      	ldr	r3, [r3, #28]
 800679a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800679e:	60bb      	str	r3, [r7, #8]
 80067a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067a2:	2301      	movs	r3, #1
 80067a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067a6:	4b82      	ldr	r3, [pc, #520]	@ (80069b0 <HAL_RCC_OscConfig+0x4c8>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d118      	bne.n	80067e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067b2:	4b7f      	ldr	r3, [pc, #508]	@ (80069b0 <HAL_RCC_OscConfig+0x4c8>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a7e      	ldr	r2, [pc, #504]	@ (80069b0 <HAL_RCC_OscConfig+0x4c8>)
 80067b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067be:	f7ff f865 	bl	800588c <HAL_GetTick>
 80067c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067c4:	e008      	b.n	80067d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067c6:	f7ff f861 	bl	800588c <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	2b64      	cmp	r3, #100	@ 0x64
 80067d2:	d901      	bls.n	80067d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e103      	b.n	80069e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067d8:	4b75      	ldr	r3, [pc, #468]	@ (80069b0 <HAL_RCC_OscConfig+0x4c8>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d0f0      	beq.n	80067c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d106      	bne.n	80067fa <HAL_RCC_OscConfig+0x312>
 80067ec:	4b6f      	ldr	r3, [pc, #444]	@ (80069ac <HAL_RCC_OscConfig+0x4c4>)
 80067ee:	6a1b      	ldr	r3, [r3, #32]
 80067f0:	4a6e      	ldr	r2, [pc, #440]	@ (80069ac <HAL_RCC_OscConfig+0x4c4>)
 80067f2:	f043 0301 	orr.w	r3, r3, #1
 80067f6:	6213      	str	r3, [r2, #32]
 80067f8:	e02d      	b.n	8006856 <HAL_RCC_OscConfig+0x36e>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10c      	bne.n	800681c <HAL_RCC_OscConfig+0x334>
 8006802:	4b6a      	ldr	r3, [pc, #424]	@ (80069ac <HAL_RCC_OscConfig+0x4c4>)
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	4a69      	ldr	r2, [pc, #420]	@ (80069ac <HAL_RCC_OscConfig+0x4c4>)
 8006808:	f023 0301 	bic.w	r3, r3, #1
 800680c:	6213      	str	r3, [r2, #32]
 800680e:	4b67      	ldr	r3, [pc, #412]	@ (80069ac <HAL_RCC_OscConfig+0x4c4>)
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	4a66      	ldr	r2, [pc, #408]	@ (80069ac <HAL_RCC_OscConfig+0x4c4>)
 8006814:	f023 0304 	bic.w	r3, r3, #4
 8006818:	6213      	str	r3, [r2, #32]
 800681a:	e01c      	b.n	8006856 <HAL_RCC_OscConfig+0x36e>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	2b05      	cmp	r3, #5
 8006822:	d10c      	bne.n	800683e <HAL_RCC_OscConfig+0x356>
 8006824:	4b61      	ldr	r3, [pc, #388]	@ (80069ac <HAL_RCC_OscConfig+0x4c4>)
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	4a60      	ldr	r2, [pc, #384]	@ (80069ac <HAL_RCC_OscConfig+0x4c4>)
 800682a:	f043 0304 	orr.w	r3, r3, #4
 800682e:	6213      	str	r3, [r2, #32]
 8006830:	4b5e      	ldr	r3, [pc, #376]	@ (80069ac <HAL_RCC_OscConfig+0x4c4>)
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	4a5d      	ldr	r2, [pc, #372]	@ (80069ac <HAL_RCC_OscConfig+0x4c4>)
 8006836:	f043 0301 	orr.w	r3, r3, #1
 800683a:	6213      	str	r3, [r2, #32]
 800683c:	e00b      	b.n	8006856 <HAL_RCC_OscConfig+0x36e>
 800683e:	4b5b      	ldr	r3, [pc, #364]	@ (80069ac <HAL_RCC_OscConfig+0x4c4>)
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	4a5a      	ldr	r2, [pc, #360]	@ (80069ac <HAL_RCC_OscConfig+0x4c4>)
 8006844:	f023 0301 	bic.w	r3, r3, #1
 8006848:	6213      	str	r3, [r2, #32]
 800684a:	4b58      	ldr	r3, [pc, #352]	@ (80069ac <HAL_RCC_OscConfig+0x4c4>)
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	4a57      	ldr	r2, [pc, #348]	@ (80069ac <HAL_RCC_OscConfig+0x4c4>)
 8006850:	f023 0304 	bic.w	r3, r3, #4
 8006854:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d015      	beq.n	800688a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800685e:	f7ff f815 	bl	800588c <HAL_GetTick>
 8006862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006864:	e00a      	b.n	800687c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006866:	f7ff f811 	bl	800588c <HAL_GetTick>
 800686a:	4602      	mov	r2, r0
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006874:	4293      	cmp	r3, r2
 8006876:	d901      	bls.n	800687c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e0b1      	b.n	80069e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800687c:	4b4b      	ldr	r3, [pc, #300]	@ (80069ac <HAL_RCC_OscConfig+0x4c4>)
 800687e:	6a1b      	ldr	r3, [r3, #32]
 8006880:	f003 0302 	and.w	r3, r3, #2
 8006884:	2b00      	cmp	r3, #0
 8006886:	d0ee      	beq.n	8006866 <HAL_RCC_OscConfig+0x37e>
 8006888:	e014      	b.n	80068b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800688a:	f7fe ffff 	bl	800588c <HAL_GetTick>
 800688e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006890:	e00a      	b.n	80068a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006892:	f7fe fffb 	bl	800588c <HAL_GetTick>
 8006896:	4602      	mov	r2, r0
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d901      	bls.n	80068a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e09b      	b.n	80069e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068a8:	4b40      	ldr	r3, [pc, #256]	@ (80069ac <HAL_RCC_OscConfig+0x4c4>)
 80068aa:	6a1b      	ldr	r3, [r3, #32]
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1ee      	bne.n	8006892 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80068b4:	7dfb      	ldrb	r3, [r7, #23]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d105      	bne.n	80068c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068ba:	4b3c      	ldr	r3, [pc, #240]	@ (80069ac <HAL_RCC_OscConfig+0x4c4>)
 80068bc:	69db      	ldr	r3, [r3, #28]
 80068be:	4a3b      	ldr	r2, [pc, #236]	@ (80069ac <HAL_RCC_OscConfig+0x4c4>)
 80068c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	69db      	ldr	r3, [r3, #28]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f000 8087 	beq.w	80069de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80068d0:	4b36      	ldr	r3, [pc, #216]	@ (80069ac <HAL_RCC_OscConfig+0x4c4>)
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	f003 030c 	and.w	r3, r3, #12
 80068d8:	2b08      	cmp	r3, #8
 80068da:	d061      	beq.n	80069a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	69db      	ldr	r3, [r3, #28]
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d146      	bne.n	8006972 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068e4:	4b33      	ldr	r3, [pc, #204]	@ (80069b4 <HAL_RCC_OscConfig+0x4cc>)
 80068e6:	2200      	movs	r2, #0
 80068e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068ea:	f7fe ffcf 	bl	800588c <HAL_GetTick>
 80068ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068f0:	e008      	b.n	8006904 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068f2:	f7fe ffcb 	bl	800588c <HAL_GetTick>
 80068f6:	4602      	mov	r2, r0
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d901      	bls.n	8006904 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e06d      	b.n	80069e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006904:	4b29      	ldr	r3, [pc, #164]	@ (80069ac <HAL_RCC_OscConfig+0x4c4>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1f0      	bne.n	80068f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a1b      	ldr	r3, [r3, #32]
 8006914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006918:	d108      	bne.n	800692c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800691a:	4b24      	ldr	r3, [pc, #144]	@ (80069ac <HAL_RCC_OscConfig+0x4c4>)
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	4921      	ldr	r1, [pc, #132]	@ (80069ac <HAL_RCC_OscConfig+0x4c4>)
 8006928:	4313      	orrs	r3, r2
 800692a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800692c:	4b1f      	ldr	r3, [pc, #124]	@ (80069ac <HAL_RCC_OscConfig+0x4c4>)
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a19      	ldr	r1, [r3, #32]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800693c:	430b      	orrs	r3, r1
 800693e:	491b      	ldr	r1, [pc, #108]	@ (80069ac <HAL_RCC_OscConfig+0x4c4>)
 8006940:	4313      	orrs	r3, r2
 8006942:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006944:	4b1b      	ldr	r3, [pc, #108]	@ (80069b4 <HAL_RCC_OscConfig+0x4cc>)
 8006946:	2201      	movs	r2, #1
 8006948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800694a:	f7fe ff9f 	bl	800588c <HAL_GetTick>
 800694e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006950:	e008      	b.n	8006964 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006952:	f7fe ff9b 	bl	800588c <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	2b02      	cmp	r3, #2
 800695e:	d901      	bls.n	8006964 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e03d      	b.n	80069e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006964:	4b11      	ldr	r3, [pc, #68]	@ (80069ac <HAL_RCC_OscConfig+0x4c4>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800696c:	2b00      	cmp	r3, #0
 800696e:	d0f0      	beq.n	8006952 <HAL_RCC_OscConfig+0x46a>
 8006970:	e035      	b.n	80069de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006972:	4b10      	ldr	r3, [pc, #64]	@ (80069b4 <HAL_RCC_OscConfig+0x4cc>)
 8006974:	2200      	movs	r2, #0
 8006976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006978:	f7fe ff88 	bl	800588c <HAL_GetTick>
 800697c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800697e:	e008      	b.n	8006992 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006980:	f7fe ff84 	bl	800588c <HAL_GetTick>
 8006984:	4602      	mov	r2, r0
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	2b02      	cmp	r3, #2
 800698c:	d901      	bls.n	8006992 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e026      	b.n	80069e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006992:	4b06      	ldr	r3, [pc, #24]	@ (80069ac <HAL_RCC_OscConfig+0x4c4>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1f0      	bne.n	8006980 <HAL_RCC_OscConfig+0x498>
 800699e:	e01e      	b.n	80069de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	69db      	ldr	r3, [r3, #28]
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d107      	bne.n	80069b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e019      	b.n	80069e0 <HAL_RCC_OscConfig+0x4f8>
 80069ac:	40021000 	.word	0x40021000
 80069b0:	40007000 	.word	0x40007000
 80069b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80069b8:	4b0b      	ldr	r3, [pc, #44]	@ (80069e8 <HAL_RCC_OscConfig+0x500>)
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a1b      	ldr	r3, [r3, #32]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d106      	bne.n	80069da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d001      	beq.n	80069de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e000      	b.n	80069e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3718      	adds	r7, #24
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	40021000 	.word	0x40021000

080069ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d101      	bne.n	8006a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e0d0      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a00:	4b6a      	ldr	r3, [pc, #424]	@ (8006bac <HAL_RCC_ClockConfig+0x1c0>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 0307 	and.w	r3, r3, #7
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d910      	bls.n	8006a30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a0e:	4b67      	ldr	r3, [pc, #412]	@ (8006bac <HAL_RCC_ClockConfig+0x1c0>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f023 0207 	bic.w	r2, r3, #7
 8006a16:	4965      	ldr	r1, [pc, #404]	@ (8006bac <HAL_RCC_ClockConfig+0x1c0>)
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a1e:	4b63      	ldr	r3, [pc, #396]	@ (8006bac <HAL_RCC_ClockConfig+0x1c0>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0307 	and.w	r3, r3, #7
 8006a26:	683a      	ldr	r2, [r7, #0]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d001      	beq.n	8006a30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e0b8      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 0302 	and.w	r3, r3, #2
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d020      	beq.n	8006a7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0304 	and.w	r3, r3, #4
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d005      	beq.n	8006a54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a48:	4b59      	ldr	r3, [pc, #356]	@ (8006bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	4a58      	ldr	r2, [pc, #352]	@ (8006bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a4e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006a52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0308 	and.w	r3, r3, #8
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d005      	beq.n	8006a6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a60:	4b53      	ldr	r3, [pc, #332]	@ (8006bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	4a52      	ldr	r2, [pc, #328]	@ (8006bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a66:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006a6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a6c:	4b50      	ldr	r3, [pc, #320]	@ (8006bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	494d      	ldr	r1, [pc, #308]	@ (8006bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d040      	beq.n	8006b0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d107      	bne.n	8006aa2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a92:	4b47      	ldr	r3, [pc, #284]	@ (8006bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d115      	bne.n	8006aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e07f      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d107      	bne.n	8006aba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006aaa:	4b41      	ldr	r3, [pc, #260]	@ (8006bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d109      	bne.n	8006aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e073      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006aba:	4b3d      	ldr	r3, [pc, #244]	@ (8006bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 0302 	and.w	r3, r3, #2
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e06b      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006aca:	4b39      	ldr	r3, [pc, #228]	@ (8006bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f023 0203 	bic.w	r2, r3, #3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	4936      	ldr	r1, [pc, #216]	@ (8006bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006adc:	f7fe fed6 	bl	800588c <HAL_GetTick>
 8006ae0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ae2:	e00a      	b.n	8006afa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ae4:	f7fe fed2 	bl	800588c <HAL_GetTick>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d901      	bls.n	8006afa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	e053      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006afa:	4b2d      	ldr	r3, [pc, #180]	@ (8006bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	f003 020c 	and.w	r2, r3, #12
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d1eb      	bne.n	8006ae4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b0c:	4b27      	ldr	r3, [pc, #156]	@ (8006bac <HAL_RCC_ClockConfig+0x1c0>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0307 	and.w	r3, r3, #7
 8006b14:	683a      	ldr	r2, [r7, #0]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d210      	bcs.n	8006b3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b1a:	4b24      	ldr	r3, [pc, #144]	@ (8006bac <HAL_RCC_ClockConfig+0x1c0>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f023 0207 	bic.w	r2, r3, #7
 8006b22:	4922      	ldr	r1, [pc, #136]	@ (8006bac <HAL_RCC_ClockConfig+0x1c0>)
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b2a:	4b20      	ldr	r3, [pc, #128]	@ (8006bac <HAL_RCC_ClockConfig+0x1c0>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0307 	and.w	r3, r3, #7
 8006b32:	683a      	ldr	r2, [r7, #0]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d001      	beq.n	8006b3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e032      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0304 	and.w	r3, r3, #4
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d008      	beq.n	8006b5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b48:	4b19      	ldr	r3, [pc, #100]	@ (8006bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	4916      	ldr	r1, [pc, #88]	@ (8006bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006b56:	4313      	orrs	r3, r2
 8006b58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0308 	and.w	r3, r3, #8
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d009      	beq.n	8006b7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006b66:	4b12      	ldr	r3, [pc, #72]	@ (8006bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	00db      	lsls	r3, r3, #3
 8006b74:	490e      	ldr	r1, [pc, #56]	@ (8006bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006b76:	4313      	orrs	r3, r2
 8006b78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006b7a:	f000 f821 	bl	8006bc0 <HAL_RCC_GetSysClockFreq>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	4b0b      	ldr	r3, [pc, #44]	@ (8006bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	091b      	lsrs	r3, r3, #4
 8006b86:	f003 030f 	and.w	r3, r3, #15
 8006b8a:	490a      	ldr	r1, [pc, #40]	@ (8006bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8006b8c:	5ccb      	ldrb	r3, [r1, r3]
 8006b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b92:	4a09      	ldr	r2, [pc, #36]	@ (8006bb8 <HAL_RCC_ClockConfig+0x1cc>)
 8006b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006b96:	4b09      	ldr	r3, [pc, #36]	@ (8006bbc <HAL_RCC_ClockConfig+0x1d0>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7fe fe34 	bl	8005808 <HAL_InitTick>

  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	40022000 	.word	0x40022000
 8006bb0:	40021000 	.word	0x40021000
 8006bb4:	0800b8d0 	.word	0x0800b8d0
 8006bb8:	20000004 	.word	0x20000004
 8006bbc:	20000008 	.word	0x20000008

08006bc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b087      	sub	sp, #28
 8006bc4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	60fb      	str	r3, [r7, #12]
 8006bca:	2300      	movs	r3, #0
 8006bcc:	60bb      	str	r3, [r7, #8]
 8006bce:	2300      	movs	r3, #0
 8006bd0:	617b      	str	r3, [r7, #20]
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006bda:	4b1e      	ldr	r3, [pc, #120]	@ (8006c54 <HAL_RCC_GetSysClockFreq+0x94>)
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f003 030c 	and.w	r3, r3, #12
 8006be6:	2b04      	cmp	r3, #4
 8006be8:	d002      	beq.n	8006bf0 <HAL_RCC_GetSysClockFreq+0x30>
 8006bea:	2b08      	cmp	r3, #8
 8006bec:	d003      	beq.n	8006bf6 <HAL_RCC_GetSysClockFreq+0x36>
 8006bee:	e027      	b.n	8006c40 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006bf0:	4b19      	ldr	r3, [pc, #100]	@ (8006c58 <HAL_RCC_GetSysClockFreq+0x98>)
 8006bf2:	613b      	str	r3, [r7, #16]
      break;
 8006bf4:	e027      	b.n	8006c46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	0c9b      	lsrs	r3, r3, #18
 8006bfa:	f003 030f 	and.w	r3, r3, #15
 8006bfe:	4a17      	ldr	r2, [pc, #92]	@ (8006c5c <HAL_RCC_GetSysClockFreq+0x9c>)
 8006c00:	5cd3      	ldrb	r3, [r2, r3]
 8006c02:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d010      	beq.n	8006c30 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006c0e:	4b11      	ldr	r3, [pc, #68]	@ (8006c54 <HAL_RCC_GetSysClockFreq+0x94>)
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	0c5b      	lsrs	r3, r3, #17
 8006c14:	f003 0301 	and.w	r3, r3, #1
 8006c18:	4a11      	ldr	r2, [pc, #68]	@ (8006c60 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006c1a:	5cd3      	ldrb	r3, [r2, r3]
 8006c1c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a0d      	ldr	r2, [pc, #52]	@ (8006c58 <HAL_RCC_GetSysClockFreq+0x98>)
 8006c22:	fb03 f202 	mul.w	r2, r3, r2
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c2c:	617b      	str	r3, [r7, #20]
 8006c2e:	e004      	b.n	8006c3a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a0c      	ldr	r2, [pc, #48]	@ (8006c64 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006c34:	fb02 f303 	mul.w	r3, r2, r3
 8006c38:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	613b      	str	r3, [r7, #16]
      break;
 8006c3e:	e002      	b.n	8006c46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006c40:	4b05      	ldr	r3, [pc, #20]	@ (8006c58 <HAL_RCC_GetSysClockFreq+0x98>)
 8006c42:	613b      	str	r3, [r7, #16]
      break;
 8006c44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c46:	693b      	ldr	r3, [r7, #16]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	371c      	adds	r7, #28
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bc80      	pop	{r7}
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	40021000 	.word	0x40021000
 8006c58:	007a1200 	.word	0x007a1200
 8006c5c:	0800b8e8 	.word	0x0800b8e8
 8006c60:	0800b8f8 	.word	0x0800b8f8
 8006c64:	003d0900 	.word	0x003d0900

08006c68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c6c:	4b02      	ldr	r3, [pc, #8]	@ (8006c78 <HAL_RCC_GetHCLKFreq+0x10>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bc80      	pop	{r7}
 8006c76:	4770      	bx	lr
 8006c78:	20000004 	.word	0x20000004

08006c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006c80:	f7ff fff2 	bl	8006c68 <HAL_RCC_GetHCLKFreq>
 8006c84:	4602      	mov	r2, r0
 8006c86:	4b05      	ldr	r3, [pc, #20]	@ (8006c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	0a1b      	lsrs	r3, r3, #8
 8006c8c:	f003 0307 	and.w	r3, r3, #7
 8006c90:	4903      	ldr	r1, [pc, #12]	@ (8006ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c92:	5ccb      	ldrb	r3, [r1, r3]
 8006c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	40021000 	.word	0x40021000
 8006ca0:	0800b8e0 	.word	0x0800b8e0

08006ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006ca8:	f7ff ffde 	bl	8006c68 <HAL_RCC_GetHCLKFreq>
 8006cac:	4602      	mov	r2, r0
 8006cae:	4b05      	ldr	r3, [pc, #20]	@ (8006cc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	0adb      	lsrs	r3, r3, #11
 8006cb4:	f003 0307 	and.w	r3, r3, #7
 8006cb8:	4903      	ldr	r1, [pc, #12]	@ (8006cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006cba:	5ccb      	ldrb	r3, [r1, r3]
 8006cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	40021000 	.word	0x40021000
 8006cc8:	0800b8e0 	.word	0x0800b8e0

08006ccc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8006d00 <RCC_Delay+0x34>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8006d04 <RCC_Delay+0x38>)
 8006cda:	fba2 2303 	umull	r2, r3, r2, r3
 8006cde:	0a5b      	lsrs	r3, r3, #9
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	fb02 f303 	mul.w	r3, r2, r3
 8006ce6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006ce8:	bf00      	nop
  }
  while (Delay --);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	1e5a      	subs	r2, r3, #1
 8006cee:	60fa      	str	r2, [r7, #12]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1f9      	bne.n	8006ce8 <RCC_Delay+0x1c>
}
 8006cf4:	bf00      	nop
 8006cf6:	bf00      	nop
 8006cf8:	3714      	adds	r7, #20
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bc80      	pop	{r7}
 8006cfe:	4770      	bx	lr
 8006d00:	20000004 	.word	0x20000004
 8006d04:	10624dd3 	.word	0x10624dd3

08006d08 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b086      	sub	sp, #24
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006d10:	2300      	movs	r3, #0
 8006d12:	613b      	str	r3, [r7, #16]
 8006d14:	2300      	movs	r3, #0
 8006d16:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0301 	and.w	r3, r3, #1
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d07d      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006d24:	2300      	movs	r3, #0
 8006d26:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d28:	4b4f      	ldr	r3, [pc, #316]	@ (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d2a:	69db      	ldr	r3, [r3, #28]
 8006d2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10d      	bne.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d34:	4b4c      	ldr	r3, [pc, #304]	@ (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d36:	69db      	ldr	r3, [r3, #28]
 8006d38:	4a4b      	ldr	r2, [pc, #300]	@ (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d3e:	61d3      	str	r3, [r2, #28]
 8006d40:	4b49      	ldr	r3, [pc, #292]	@ (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d42:	69db      	ldr	r3, [r3, #28]
 8006d44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d48:	60bb      	str	r3, [r7, #8]
 8006d4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d50:	4b46      	ldr	r3, [pc, #280]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d118      	bne.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d5c:	4b43      	ldr	r3, [pc, #268]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a42      	ldr	r2, [pc, #264]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006d62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d68:	f7fe fd90 	bl	800588c <HAL_GetTick>
 8006d6c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d6e:	e008      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d70:	f7fe fd8c 	bl	800588c <HAL_GetTick>
 8006d74:	4602      	mov	r2, r0
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	2b64      	cmp	r3, #100	@ 0x64
 8006d7c:	d901      	bls.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e06d      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d82:	4b3a      	ldr	r3, [pc, #232]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d0f0      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d8e:	4b36      	ldr	r3, [pc, #216]	@ (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d96:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d02e      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d027      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006dac:	4b2e      	ldr	r3, [pc, #184]	@ (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006dae:	6a1b      	ldr	r3, [r3, #32]
 8006db0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006db4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006db6:	4b2e      	ldr	r3, [pc, #184]	@ (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006db8:	2201      	movs	r2, #1
 8006dba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006dbc:	4b2c      	ldr	r3, [pc, #176]	@ (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006dc2:	4a29      	ldr	r2, [pc, #164]	@ (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d014      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dd2:	f7fe fd5b 	bl	800588c <HAL_GetTick>
 8006dd6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dd8:	e00a      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dda:	f7fe fd57 	bl	800588c <HAL_GetTick>
 8006dde:	4602      	mov	r2, r0
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d901      	bls.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e036      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006df0:	4b1d      	ldr	r3, [pc, #116]	@ (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006df2:	6a1b      	ldr	r3, [r3, #32]
 8006df4:	f003 0302 	and.w	r3, r3, #2
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d0ee      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006dfe:	6a1b      	ldr	r3, [r3, #32]
 8006e00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	4917      	ldr	r1, [pc, #92]	@ (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006e0e:	7dfb      	ldrb	r3, [r7, #23]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d105      	bne.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e14:	4b14      	ldr	r3, [pc, #80]	@ (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e16:	69db      	ldr	r3, [r3, #28]
 8006e18:	4a13      	ldr	r2, [pc, #76]	@ (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e1e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0302 	and.w	r3, r3, #2
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d008      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	490b      	ldr	r1, [pc, #44]	@ (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 0310 	and.w	r3, r3, #16
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d008      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e4a:	4b07      	ldr	r3, [pc, #28]	@ (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	4904      	ldr	r1, [pc, #16]	@ (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3718      	adds	r7, #24
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	40021000 	.word	0x40021000
 8006e6c:	40007000 	.word	0x40007000
 8006e70:	42420440 	.word	0x42420440

08006e74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d101      	bne.n	8006e86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e076      	b.n	8006f74 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d108      	bne.n	8006ea0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e96:	d009      	beq.n	8006eac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	61da      	str	r2, [r3, #28]
 8006e9e:	e005      	b.n	8006eac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d106      	bne.n	8006ecc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f7fe fa90 	bl	80053ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2202      	movs	r2, #2
 8006ed0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ee2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006ef4:	431a      	orrs	r2, r3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006efe:	431a      	orrs	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	f003 0302 	and.w	r3, r3, #2
 8006f08:	431a      	orrs	r2, r3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	f003 0301 	and.w	r3, r3, #1
 8006f12:	431a      	orrs	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f1c:	431a      	orrs	r2, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	69db      	ldr	r3, [r3, #28]
 8006f22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f26:	431a      	orrs	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a1b      	ldr	r3, [r3, #32]
 8006f2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f30:	ea42 0103 	orr.w	r1, r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f38:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	430a      	orrs	r2, r1
 8006f42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	699b      	ldr	r3, [r3, #24]
 8006f48:	0c1a      	lsrs	r2, r3, #16
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f002 0204 	and.w	r2, r2, #4
 8006f52:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	69da      	ldr	r2, [r3, #28]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f62:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3708      	adds	r7, #8
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b088      	sub	sp, #32
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	603b      	str	r3, [r7, #0]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d101      	bne.n	8006f9e <HAL_SPI_Transmit+0x22>
 8006f9a:	2302      	movs	r3, #2
 8006f9c:	e12d      	b.n	80071fa <HAL_SPI_Transmit+0x27e>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fa6:	f7fe fc71 	bl	800588c <HAL_GetTick>
 8006faa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006fac:	88fb      	ldrh	r3, [r7, #6]
 8006fae:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d002      	beq.n	8006fc2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006fc0:	e116      	b.n	80071f0 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d002      	beq.n	8006fce <HAL_SPI_Transmit+0x52>
 8006fc8:	88fb      	ldrh	r3, [r7, #6]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d102      	bne.n	8006fd4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006fd2:	e10d      	b.n	80071f0 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2203      	movs	r2, #3
 8006fd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	68ba      	ldr	r2, [r7, #8]
 8006fe6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	88fa      	ldrh	r2, [r7, #6]
 8006fec:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	88fa      	ldrh	r2, [r7, #6]
 8006ff2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800701a:	d10f      	bne.n	800703c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800702a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800703a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007046:	2b40      	cmp	r3, #64	@ 0x40
 8007048:	d007      	beq.n	800705a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007058:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007062:	d14f      	bne.n	8007104 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d002      	beq.n	8007072 <HAL_SPI_Transmit+0xf6>
 800706c:	8afb      	ldrh	r3, [r7, #22]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d142      	bne.n	80070f8 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007076:	881a      	ldrh	r2, [r3, #0]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007082:	1c9a      	adds	r2, r3, #2
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800708c:	b29b      	uxth	r3, r3
 800708e:	3b01      	subs	r3, #1
 8007090:	b29a      	uxth	r2, r3
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007096:	e02f      	b.n	80070f8 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f003 0302 	and.w	r3, r3, #2
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d112      	bne.n	80070cc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070aa:	881a      	ldrh	r2, [r3, #0]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070b6:	1c9a      	adds	r2, r3, #2
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	3b01      	subs	r3, #1
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80070ca:	e015      	b.n	80070f8 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070cc:	f7fe fbde 	bl	800588c <HAL_GetTick>
 80070d0:	4602      	mov	r2, r0
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d803      	bhi.n	80070e4 <HAL_SPI_Transmit+0x168>
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e2:	d102      	bne.n	80070ea <HAL_SPI_Transmit+0x16e>
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d106      	bne.n	80070f8 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80070ea:	2303      	movs	r3, #3
 80070ec:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2201      	movs	r2, #1
 80070f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80070f6:	e07b      	b.n	80071f0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1ca      	bne.n	8007098 <HAL_SPI_Transmit+0x11c>
 8007102:	e050      	b.n	80071a6 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d002      	beq.n	8007112 <HAL_SPI_Transmit+0x196>
 800710c:	8afb      	ldrh	r3, [r7, #22]
 800710e:	2b01      	cmp	r3, #1
 8007110:	d144      	bne.n	800719c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	330c      	adds	r3, #12
 800711c:	7812      	ldrb	r2, [r2, #0]
 800711e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007124:	1c5a      	adds	r2, r3, #1
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800712e:	b29b      	uxth	r3, r3
 8007130:	3b01      	subs	r3, #1
 8007132:	b29a      	uxth	r2, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007138:	e030      	b.n	800719c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	f003 0302 	and.w	r3, r3, #2
 8007144:	2b02      	cmp	r3, #2
 8007146:	d113      	bne.n	8007170 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	330c      	adds	r3, #12
 8007152:	7812      	ldrb	r2, [r2, #0]
 8007154:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800715a:	1c5a      	adds	r2, r3, #1
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007164:	b29b      	uxth	r3, r3
 8007166:	3b01      	subs	r3, #1
 8007168:	b29a      	uxth	r2, r3
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800716e:	e015      	b.n	800719c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007170:	f7fe fb8c 	bl	800588c <HAL_GetTick>
 8007174:	4602      	mov	r2, r0
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	683a      	ldr	r2, [r7, #0]
 800717c:	429a      	cmp	r2, r3
 800717e:	d803      	bhi.n	8007188 <HAL_SPI_Transmit+0x20c>
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007186:	d102      	bne.n	800718e <HAL_SPI_Transmit+0x212>
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d106      	bne.n	800719c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2201      	movs	r2, #1
 8007196:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800719a:	e029      	b.n	80071f0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1c9      	bne.n	800713a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071a6:	69ba      	ldr	r2, [r7, #24]
 80071a8:	6839      	ldr	r1, [r7, #0]
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f000 f8b2 	bl	8007314 <SPI_EndRxTxTransaction>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d002      	beq.n	80071bc <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2220      	movs	r2, #32
 80071ba:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d10a      	bne.n	80071da <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071c4:	2300      	movs	r3, #0
 80071c6:	613b      	str	r3, [r7, #16]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	613b      	str	r3, [r7, #16]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	613b      	str	r3, [r7, #16]
 80071d8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d002      	beq.n	80071e8 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	77fb      	strb	r3, [r7, #31]
 80071e6:	e003      	b.n	80071f0 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80071f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3720      	adds	r7, #32
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
	...

08007204 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b088      	sub	sp, #32
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	603b      	str	r3, [r7, #0]
 8007210:	4613      	mov	r3, r2
 8007212:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007214:	f7fe fb3a 	bl	800588c <HAL_GetTick>
 8007218:	4602      	mov	r2, r0
 800721a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800721c:	1a9b      	subs	r3, r3, r2
 800721e:	683a      	ldr	r2, [r7, #0]
 8007220:	4413      	add	r3, r2
 8007222:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007224:	f7fe fb32 	bl	800588c <HAL_GetTick>
 8007228:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800722a:	4b39      	ldr	r3, [pc, #228]	@ (8007310 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	015b      	lsls	r3, r3, #5
 8007230:	0d1b      	lsrs	r3, r3, #20
 8007232:	69fa      	ldr	r2, [r7, #28]
 8007234:	fb02 f303 	mul.w	r3, r2, r3
 8007238:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800723a:	e054      	b.n	80072e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007242:	d050      	beq.n	80072e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007244:	f7fe fb22 	bl	800588c <HAL_GetTick>
 8007248:	4602      	mov	r2, r0
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	69fa      	ldr	r2, [r7, #28]
 8007250:	429a      	cmp	r2, r3
 8007252:	d902      	bls.n	800725a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d13d      	bne.n	80072d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	685a      	ldr	r2, [r3, #4]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007268:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007272:	d111      	bne.n	8007298 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800727c:	d004      	beq.n	8007288 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007286:	d107      	bne.n	8007298 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007296:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800729c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072a0:	d10f      	bne.n	80072c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80072b0:	601a      	str	r2, [r3, #0]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80072c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e017      	b.n	8007306 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d101      	bne.n	80072e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80072dc:	2300      	movs	r3, #0
 80072de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	3b01      	subs	r3, #1
 80072e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	689a      	ldr	r2, [r3, #8]
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	4013      	ands	r3, r2
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	bf0c      	ite	eq
 80072f6:	2301      	moveq	r3, #1
 80072f8:	2300      	movne	r3, #0
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	461a      	mov	r2, r3
 80072fe:	79fb      	ldrb	r3, [r7, #7]
 8007300:	429a      	cmp	r2, r3
 8007302:	d19b      	bne.n	800723c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3720      	adds	r7, #32
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	20000004 	.word	0x20000004

08007314 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b086      	sub	sp, #24
 8007318:	af02      	add	r7, sp, #8
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	2200      	movs	r2, #0
 8007328:	2180      	movs	r1, #128	@ 0x80
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f7ff ff6a 	bl	8007204 <SPI_WaitFlagStateUntilTimeout>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d007      	beq.n	8007346 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800733a:	f043 0220 	orr.w	r2, r3, #32
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007342:	2303      	movs	r3, #3
 8007344:	e000      	b.n	8007348 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3710      	adds	r7, #16
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d101      	bne.n	8007362 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	e041      	b.n	80073e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b00      	cmp	r3, #0
 800736c:	d106      	bne.n	800737c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f7fe f894 	bl	80054a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2202      	movs	r2, #2
 8007380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	3304      	adds	r3, #4
 800738c:	4619      	mov	r1, r3
 800738e:	4610      	mov	r0, r2
 8007390:	f000 fbdc 	bl	8007b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3708      	adds	r7, #8
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b082      	sub	sp, #8
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d101      	bne.n	8007400 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	e041      	b.n	8007484 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007406:	b2db      	uxtb	r3, r3
 8007408:	2b00      	cmp	r3, #0
 800740a:	d106      	bne.n	800741a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f7fe f827 	bl	8005468 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2202      	movs	r2, #2
 800741e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	3304      	adds	r3, #4
 800742a:	4619      	mov	r1, r3
 800742c:	4610      	mov	r0, r2
 800742e:	f000 fb8d 	bl	8007b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2201      	movs	r2, #1
 8007436:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2201      	movs	r2, #1
 800743e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2201      	movs	r2, #1
 800744e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2201      	movs	r2, #1
 800745e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2201      	movs	r2, #1
 8007476:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2201      	movs	r2, #1
 800747e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d109      	bne.n	80074b0 <HAL_TIM_PWM_Start+0x24>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	bf14      	ite	ne
 80074a8:	2301      	movne	r3, #1
 80074aa:	2300      	moveq	r3, #0
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	e022      	b.n	80074f6 <HAL_TIM_PWM_Start+0x6a>
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	2b04      	cmp	r3, #4
 80074b4:	d109      	bne.n	80074ca <HAL_TIM_PWM_Start+0x3e>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	2b01      	cmp	r3, #1
 80074c0:	bf14      	ite	ne
 80074c2:	2301      	movne	r3, #1
 80074c4:	2300      	moveq	r3, #0
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	e015      	b.n	80074f6 <HAL_TIM_PWM_Start+0x6a>
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	2b08      	cmp	r3, #8
 80074ce:	d109      	bne.n	80074e4 <HAL_TIM_PWM_Start+0x58>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	2b01      	cmp	r3, #1
 80074da:	bf14      	ite	ne
 80074dc:	2301      	movne	r3, #1
 80074de:	2300      	moveq	r3, #0
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	e008      	b.n	80074f6 <HAL_TIM_PWM_Start+0x6a>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	bf14      	ite	ne
 80074f0:	2301      	movne	r3, #1
 80074f2:	2300      	moveq	r3, #0
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d001      	beq.n	80074fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	e05e      	b.n	80075bc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d104      	bne.n	800750e <HAL_TIM_PWM_Start+0x82>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2202      	movs	r2, #2
 8007508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800750c:	e013      	b.n	8007536 <HAL_TIM_PWM_Start+0xaa>
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	2b04      	cmp	r3, #4
 8007512:	d104      	bne.n	800751e <HAL_TIM_PWM_Start+0x92>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2202      	movs	r2, #2
 8007518:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800751c:	e00b      	b.n	8007536 <HAL_TIM_PWM_Start+0xaa>
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	2b08      	cmp	r3, #8
 8007522:	d104      	bne.n	800752e <HAL_TIM_PWM_Start+0xa2>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2202      	movs	r2, #2
 8007528:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800752c:	e003      	b.n	8007536 <HAL_TIM_PWM_Start+0xaa>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2202      	movs	r2, #2
 8007532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2201      	movs	r2, #1
 800753c:	6839      	ldr	r1, [r7, #0]
 800753e:	4618      	mov	r0, r3
 8007540:	f000 fd84 	bl	800804c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a1e      	ldr	r2, [pc, #120]	@ (80075c4 <HAL_TIM_PWM_Start+0x138>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d107      	bne.n	800755e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800755c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a18      	ldr	r2, [pc, #96]	@ (80075c4 <HAL_TIM_PWM_Start+0x138>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d00e      	beq.n	8007586 <HAL_TIM_PWM_Start+0xfa>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007570:	d009      	beq.n	8007586 <HAL_TIM_PWM_Start+0xfa>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a14      	ldr	r2, [pc, #80]	@ (80075c8 <HAL_TIM_PWM_Start+0x13c>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d004      	beq.n	8007586 <HAL_TIM_PWM_Start+0xfa>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a12      	ldr	r2, [pc, #72]	@ (80075cc <HAL_TIM_PWM_Start+0x140>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d111      	bne.n	80075aa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	f003 0307 	and.w	r3, r3, #7
 8007590:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2b06      	cmp	r3, #6
 8007596:	d010      	beq.n	80075ba <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f042 0201 	orr.w	r2, r2, #1
 80075a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075a8:	e007      	b.n	80075ba <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f042 0201 	orr.w	r2, r2, #1
 80075b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	40012c00 	.word	0x40012c00
 80075c8:	40000400 	.word	0x40000400
 80075cc:	40000800 	.word	0x40000800

080075d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	f003 0302 	and.w	r3, r3, #2
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d122      	bne.n	800762c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	f003 0302 	and.w	r3, r3, #2
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	d11b      	bne.n	800762c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f06f 0202 	mvn.w	r2, #2
 80075fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2201      	movs	r2, #1
 8007602:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	699b      	ldr	r3, [r3, #24]
 800760a:	f003 0303 	and.w	r3, r3, #3
 800760e:	2b00      	cmp	r3, #0
 8007610:	d003      	beq.n	800761a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 fa7f 	bl	8007b16 <HAL_TIM_IC_CaptureCallback>
 8007618:	e005      	b.n	8007626 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 fa72 	bl	8007b04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fa81 	bl	8007b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	f003 0304 	and.w	r3, r3, #4
 8007636:	2b04      	cmp	r3, #4
 8007638:	d122      	bne.n	8007680 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	f003 0304 	and.w	r3, r3, #4
 8007644:	2b04      	cmp	r3, #4
 8007646:	d11b      	bne.n	8007680 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f06f 0204 	mvn.w	r2, #4
 8007650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2202      	movs	r2, #2
 8007656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	699b      	ldr	r3, [r3, #24]
 800765e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007662:	2b00      	cmp	r3, #0
 8007664:	d003      	beq.n	800766e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 fa55 	bl	8007b16 <HAL_TIM_IC_CaptureCallback>
 800766c:	e005      	b.n	800767a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 fa48 	bl	8007b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 fa57 	bl	8007b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	f003 0308 	and.w	r3, r3, #8
 800768a:	2b08      	cmp	r3, #8
 800768c:	d122      	bne.n	80076d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	f003 0308 	and.w	r3, r3, #8
 8007698:	2b08      	cmp	r3, #8
 800769a:	d11b      	bne.n	80076d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f06f 0208 	mvn.w	r2, #8
 80076a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2204      	movs	r2, #4
 80076aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	69db      	ldr	r3, [r3, #28]
 80076b2:	f003 0303 	and.w	r3, r3, #3
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d003      	beq.n	80076c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 fa2b 	bl	8007b16 <HAL_TIM_IC_CaptureCallback>
 80076c0:	e005      	b.n	80076ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 fa1e 	bl	8007b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 fa2d 	bl	8007b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	f003 0310 	and.w	r3, r3, #16
 80076de:	2b10      	cmp	r3, #16
 80076e0:	d122      	bne.n	8007728 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	f003 0310 	and.w	r3, r3, #16
 80076ec:	2b10      	cmp	r3, #16
 80076ee:	d11b      	bne.n	8007728 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f06f 0210 	mvn.w	r2, #16
 80076f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2208      	movs	r2, #8
 80076fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	69db      	ldr	r3, [r3, #28]
 8007706:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800770a:	2b00      	cmp	r3, #0
 800770c:	d003      	beq.n	8007716 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fa01 	bl	8007b16 <HAL_TIM_IC_CaptureCallback>
 8007714:	e005      	b.n	8007722 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f9f4 	bl	8007b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 fa03 	bl	8007b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	f003 0301 	and.w	r3, r3, #1
 8007732:	2b01      	cmp	r3, #1
 8007734:	d10e      	bne.n	8007754 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	f003 0301 	and.w	r3, r3, #1
 8007740:	2b01      	cmp	r3, #1
 8007742:	d107      	bne.n	8007754 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f06f 0201 	mvn.w	r2, #1
 800774c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 f9cf 	bl	8007af2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800775e:	2b80      	cmp	r3, #128	@ 0x80
 8007760:	d10e      	bne.n	8007780 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800776c:	2b80      	cmp	r3, #128	@ 0x80
 800776e:	d107      	bne.n	8007780 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fd42 	bl	8008204 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800778a:	2b40      	cmp	r3, #64	@ 0x40
 800778c:	d10e      	bne.n	80077ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007798:	2b40      	cmp	r3, #64	@ 0x40
 800779a:	d107      	bne.n	80077ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80077a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 f9c7 	bl	8007b3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	f003 0320 	and.w	r3, r3, #32
 80077b6:	2b20      	cmp	r3, #32
 80077b8:	d10e      	bne.n	80077d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	f003 0320 	and.w	r3, r3, #32
 80077c4:	2b20      	cmp	r3, #32
 80077c6:	d107      	bne.n	80077d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f06f 0220 	mvn.w	r2, #32
 80077d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fd0d 	bl	80081f2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077d8:	bf00      	nop
 80077da:	3708      	adds	r7, #8
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b086      	sub	sp, #24
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077ec:	2300      	movs	r3, #0
 80077ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d101      	bne.n	80077fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80077fa:	2302      	movs	r3, #2
 80077fc:	e0ae      	b.n	800795c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2201      	movs	r2, #1
 8007802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2b0c      	cmp	r3, #12
 800780a:	f200 809f 	bhi.w	800794c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800780e:	a201      	add	r2, pc, #4	@ (adr r2, 8007814 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007814:	08007849 	.word	0x08007849
 8007818:	0800794d 	.word	0x0800794d
 800781c:	0800794d 	.word	0x0800794d
 8007820:	0800794d 	.word	0x0800794d
 8007824:	08007889 	.word	0x08007889
 8007828:	0800794d 	.word	0x0800794d
 800782c:	0800794d 	.word	0x0800794d
 8007830:	0800794d 	.word	0x0800794d
 8007834:	080078cb 	.word	0x080078cb
 8007838:	0800794d 	.word	0x0800794d
 800783c:	0800794d 	.word	0x0800794d
 8007840:	0800794d 	.word	0x0800794d
 8007844:	0800790b 	.word	0x0800790b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68b9      	ldr	r1, [r7, #8]
 800784e:	4618      	mov	r0, r3
 8007850:	f000 f9de 	bl	8007c10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	699a      	ldr	r2, [r3, #24]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f042 0208 	orr.w	r2, r2, #8
 8007862:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	699a      	ldr	r2, [r3, #24]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f022 0204 	bic.w	r2, r2, #4
 8007872:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	6999      	ldr	r1, [r3, #24]
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	691a      	ldr	r2, [r3, #16]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	430a      	orrs	r2, r1
 8007884:	619a      	str	r2, [r3, #24]
      break;
 8007886:	e064      	b.n	8007952 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68b9      	ldr	r1, [r7, #8]
 800788e:	4618      	mov	r0, r3
 8007890:	f000 fa24 	bl	8007cdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	699a      	ldr	r2, [r3, #24]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80078a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	699a      	ldr	r2, [r3, #24]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	6999      	ldr	r1, [r3, #24]
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	021a      	lsls	r2, r3, #8
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	430a      	orrs	r2, r1
 80078c6:	619a      	str	r2, [r3, #24]
      break;
 80078c8:	e043      	b.n	8007952 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68b9      	ldr	r1, [r7, #8]
 80078d0:	4618      	mov	r0, r3
 80078d2:	f000 fa6d 	bl	8007db0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	69da      	ldr	r2, [r3, #28]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f042 0208 	orr.w	r2, r2, #8
 80078e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	69da      	ldr	r2, [r3, #28]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f022 0204 	bic.w	r2, r2, #4
 80078f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	69d9      	ldr	r1, [r3, #28]
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	691a      	ldr	r2, [r3, #16]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	430a      	orrs	r2, r1
 8007906:	61da      	str	r2, [r3, #28]
      break;
 8007908:	e023      	b.n	8007952 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68b9      	ldr	r1, [r7, #8]
 8007910:	4618      	mov	r0, r3
 8007912:	f000 fab7 	bl	8007e84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	69da      	ldr	r2, [r3, #28]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007924:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	69da      	ldr	r2, [r3, #28]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007934:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	69d9      	ldr	r1, [r3, #28]
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	691b      	ldr	r3, [r3, #16]
 8007940:	021a      	lsls	r2, r3, #8
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	430a      	orrs	r2, r1
 8007948:	61da      	str	r2, [r3, #28]
      break;
 800794a:	e002      	b.n	8007952 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	75fb      	strb	r3, [r7, #23]
      break;
 8007950:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2200      	movs	r2, #0
 8007956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800795a:	7dfb      	ldrb	r3, [r7, #23]
}
 800795c:	4618      	mov	r0, r3
 800795e:	3718      	adds	r7, #24
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800796e:	2300      	movs	r3, #0
 8007970:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007978:	2b01      	cmp	r3, #1
 800797a:	d101      	bne.n	8007980 <HAL_TIM_ConfigClockSource+0x1c>
 800797c:	2302      	movs	r3, #2
 800797e:	e0b4      	b.n	8007aea <HAL_TIM_ConfigClockSource+0x186>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2202      	movs	r2, #2
 800798c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800799e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80079a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	68ba      	ldr	r2, [r7, #8]
 80079ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079b8:	d03e      	beq.n	8007a38 <HAL_TIM_ConfigClockSource+0xd4>
 80079ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079be:	f200 8087 	bhi.w	8007ad0 <HAL_TIM_ConfigClockSource+0x16c>
 80079c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079c6:	f000 8086 	beq.w	8007ad6 <HAL_TIM_ConfigClockSource+0x172>
 80079ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079ce:	d87f      	bhi.n	8007ad0 <HAL_TIM_ConfigClockSource+0x16c>
 80079d0:	2b70      	cmp	r3, #112	@ 0x70
 80079d2:	d01a      	beq.n	8007a0a <HAL_TIM_ConfigClockSource+0xa6>
 80079d4:	2b70      	cmp	r3, #112	@ 0x70
 80079d6:	d87b      	bhi.n	8007ad0 <HAL_TIM_ConfigClockSource+0x16c>
 80079d8:	2b60      	cmp	r3, #96	@ 0x60
 80079da:	d050      	beq.n	8007a7e <HAL_TIM_ConfigClockSource+0x11a>
 80079dc:	2b60      	cmp	r3, #96	@ 0x60
 80079de:	d877      	bhi.n	8007ad0 <HAL_TIM_ConfigClockSource+0x16c>
 80079e0:	2b50      	cmp	r3, #80	@ 0x50
 80079e2:	d03c      	beq.n	8007a5e <HAL_TIM_ConfigClockSource+0xfa>
 80079e4:	2b50      	cmp	r3, #80	@ 0x50
 80079e6:	d873      	bhi.n	8007ad0 <HAL_TIM_ConfigClockSource+0x16c>
 80079e8:	2b40      	cmp	r3, #64	@ 0x40
 80079ea:	d058      	beq.n	8007a9e <HAL_TIM_ConfigClockSource+0x13a>
 80079ec:	2b40      	cmp	r3, #64	@ 0x40
 80079ee:	d86f      	bhi.n	8007ad0 <HAL_TIM_ConfigClockSource+0x16c>
 80079f0:	2b30      	cmp	r3, #48	@ 0x30
 80079f2:	d064      	beq.n	8007abe <HAL_TIM_ConfigClockSource+0x15a>
 80079f4:	2b30      	cmp	r3, #48	@ 0x30
 80079f6:	d86b      	bhi.n	8007ad0 <HAL_TIM_ConfigClockSource+0x16c>
 80079f8:	2b20      	cmp	r3, #32
 80079fa:	d060      	beq.n	8007abe <HAL_TIM_ConfigClockSource+0x15a>
 80079fc:	2b20      	cmp	r3, #32
 80079fe:	d867      	bhi.n	8007ad0 <HAL_TIM_ConfigClockSource+0x16c>
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d05c      	beq.n	8007abe <HAL_TIM_ConfigClockSource+0x15a>
 8007a04:	2b10      	cmp	r3, #16
 8007a06:	d05a      	beq.n	8007abe <HAL_TIM_ConfigClockSource+0x15a>
 8007a08:	e062      	b.n	8007ad0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a1a:	f000 faf8 	bl	800800e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007a2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68ba      	ldr	r2, [r7, #8]
 8007a34:	609a      	str	r2, [r3, #8]
      break;
 8007a36:	e04f      	b.n	8007ad8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a48:	f000 fae1 	bl	800800e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	689a      	ldr	r2, [r3, #8]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a5a:	609a      	str	r2, [r3, #8]
      break;
 8007a5c:	e03c      	b.n	8007ad8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	f000 fa58 	bl	8007f20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2150      	movs	r1, #80	@ 0x50
 8007a76:	4618      	mov	r0, r3
 8007a78:	f000 faaf 	bl	8007fda <TIM_ITRx_SetConfig>
      break;
 8007a7c:	e02c      	b.n	8007ad8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	f000 fa76 	bl	8007f7c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2160      	movs	r1, #96	@ 0x60
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 fa9f 	bl	8007fda <TIM_ITRx_SetConfig>
      break;
 8007a9c:	e01c      	b.n	8007ad8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007aaa:	461a      	mov	r2, r3
 8007aac:	f000 fa38 	bl	8007f20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2140      	movs	r1, #64	@ 0x40
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f000 fa8f 	bl	8007fda <TIM_ITRx_SetConfig>
      break;
 8007abc:	e00c      	b.n	8007ad8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	4610      	mov	r0, r2
 8007aca:	f000 fa86 	bl	8007fda <TIM_ITRx_SetConfig>
      break;
 8007ace:	e003      	b.n	8007ad8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ad4:	e000      	b.n	8007ad8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007ad6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007af2:	b480      	push	{r7}
 8007af4:	b083      	sub	sp, #12
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007afa:	bf00      	nop
 8007afc:	370c      	adds	r7, #12
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bc80      	pop	{r7}
 8007b02:	4770      	bx	lr

08007b04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bc80      	pop	{r7}
 8007b14:	4770      	bx	lr

08007b16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b16:	b480      	push	{r7}
 8007b18:	b083      	sub	sp, #12
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b1e:	bf00      	nop
 8007b20:	370c      	adds	r7, #12
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bc80      	pop	{r7}
 8007b26:	4770      	bx	lr

08007b28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bc80      	pop	{r7}
 8007b38:	4770      	bx	lr

08007b3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b3a:	b480      	push	{r7}
 8007b3c:	b083      	sub	sp, #12
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b42:	bf00      	nop
 8007b44:	370c      	adds	r7, #12
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bc80      	pop	{r7}
 8007b4a:	4770      	bx	lr

08007b4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a29      	ldr	r2, [pc, #164]	@ (8007c04 <TIM_Base_SetConfig+0xb8>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d00b      	beq.n	8007b7c <TIM_Base_SetConfig+0x30>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b6a:	d007      	beq.n	8007b7c <TIM_Base_SetConfig+0x30>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a26      	ldr	r2, [pc, #152]	@ (8007c08 <TIM_Base_SetConfig+0xbc>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d003      	beq.n	8007b7c <TIM_Base_SetConfig+0x30>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a25      	ldr	r2, [pc, #148]	@ (8007c0c <TIM_Base_SetConfig+0xc0>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d108      	bne.n	8007b8e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a1c      	ldr	r2, [pc, #112]	@ (8007c04 <TIM_Base_SetConfig+0xb8>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d00b      	beq.n	8007bae <TIM_Base_SetConfig+0x62>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b9c:	d007      	beq.n	8007bae <TIM_Base_SetConfig+0x62>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a19      	ldr	r2, [pc, #100]	@ (8007c08 <TIM_Base_SetConfig+0xbc>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d003      	beq.n	8007bae <TIM_Base_SetConfig+0x62>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a18      	ldr	r2, [pc, #96]	@ (8007c0c <TIM_Base_SetConfig+0xc0>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d108      	bne.n	8007bc0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	695b      	ldr	r3, [r3, #20]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	689a      	ldr	r2, [r3, #8]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a07      	ldr	r2, [pc, #28]	@ (8007c04 <TIM_Base_SetConfig+0xb8>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d103      	bne.n	8007bf4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	691a      	ldr	r2, [r3, #16]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	615a      	str	r2, [r3, #20]
}
 8007bfa:	bf00      	nop
 8007bfc:	3714      	adds	r7, #20
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bc80      	pop	{r7}
 8007c02:	4770      	bx	lr
 8007c04:	40012c00 	.word	0x40012c00
 8007c08:	40000400 	.word	0x40000400
 8007c0c:	40000800 	.word	0x40000800

08007c10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b087      	sub	sp, #28
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a1b      	ldr	r3, [r3, #32]
 8007c1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6a1b      	ldr	r3, [r3, #32]
 8007c24:	f023 0201 	bic.w	r2, r3, #1
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	699b      	ldr	r3, [r3, #24]
 8007c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f023 0303 	bic.w	r3, r3, #3
 8007c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	f023 0302 	bic.w	r3, r3, #2
 8007c58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	697a      	ldr	r2, [r7, #20]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a1c      	ldr	r2, [pc, #112]	@ (8007cd8 <TIM_OC1_SetConfig+0xc8>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d10c      	bne.n	8007c86 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	f023 0308 	bic.w	r3, r3, #8
 8007c72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	697a      	ldr	r2, [r7, #20]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	f023 0304 	bic.w	r3, r3, #4
 8007c84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a13      	ldr	r2, [pc, #76]	@ (8007cd8 <TIM_OC1_SetConfig+0xc8>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d111      	bne.n	8007cb2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	695b      	ldr	r3, [r3, #20]
 8007ca2:	693a      	ldr	r2, [r7, #16]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	699b      	ldr	r3, [r3, #24]
 8007cac:	693a      	ldr	r2, [r7, #16]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	693a      	ldr	r2, [r7, #16]
 8007cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	685a      	ldr	r2, [r3, #4]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	697a      	ldr	r2, [r7, #20]
 8007cca:	621a      	str	r2, [r3, #32]
}
 8007ccc:	bf00      	nop
 8007cce:	371c      	adds	r7, #28
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bc80      	pop	{r7}
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	40012c00 	.word	0x40012c00

08007cdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b087      	sub	sp, #28
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a1b      	ldr	r3, [r3, #32]
 8007cea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6a1b      	ldr	r3, [r3, #32]
 8007cf0:	f023 0210 	bic.w	r2, r3, #16
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	699b      	ldr	r3, [r3, #24]
 8007d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	021b      	lsls	r3, r3, #8
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	f023 0320 	bic.w	r3, r3, #32
 8007d26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	011b      	lsls	r3, r3, #4
 8007d2e:	697a      	ldr	r2, [r7, #20]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a1d      	ldr	r2, [pc, #116]	@ (8007dac <TIM_OC2_SetConfig+0xd0>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d10d      	bne.n	8007d58 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	011b      	lsls	r3, r3, #4
 8007d4a:	697a      	ldr	r2, [r7, #20]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4a14      	ldr	r2, [pc, #80]	@ (8007dac <TIM_OC2_SetConfig+0xd0>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d113      	bne.n	8007d88 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007d66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	695b      	ldr	r3, [r3, #20]
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	693a      	ldr	r2, [r7, #16]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	699b      	ldr	r3, [r3, #24]
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	693a      	ldr	r2, [r7, #16]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	693a      	ldr	r2, [r7, #16]
 8007d8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	68fa      	ldr	r2, [r7, #12]
 8007d92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	685a      	ldr	r2, [r3, #4]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	697a      	ldr	r2, [r7, #20]
 8007da0:	621a      	str	r2, [r3, #32]
}
 8007da2:	bf00      	nop
 8007da4:	371c      	adds	r7, #28
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bc80      	pop	{r7}
 8007daa:	4770      	bx	lr
 8007dac:	40012c00 	.word	0x40012c00

08007db0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b087      	sub	sp, #28
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6a1b      	ldr	r3, [r3, #32]
 8007dbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6a1b      	ldr	r3, [r3, #32]
 8007dc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	69db      	ldr	r3, [r3, #28]
 8007dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f023 0303 	bic.w	r3, r3, #3
 8007de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007df8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	021b      	lsls	r3, r3, #8
 8007e00:	697a      	ldr	r2, [r7, #20]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4a1d      	ldr	r2, [pc, #116]	@ (8007e80 <TIM_OC3_SetConfig+0xd0>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d10d      	bne.n	8007e2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007e14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	021b      	lsls	r3, r3, #8
 8007e1c:	697a      	ldr	r2, [r7, #20]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007e28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4a14      	ldr	r2, [pc, #80]	@ (8007e80 <TIM_OC3_SetConfig+0xd0>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d113      	bne.n	8007e5a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007e40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	695b      	ldr	r3, [r3, #20]
 8007e46:	011b      	lsls	r3, r3, #4
 8007e48:	693a      	ldr	r2, [r7, #16]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	011b      	lsls	r3, r3, #4
 8007e54:	693a      	ldr	r2, [r7, #16]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	693a      	ldr	r2, [r7, #16]
 8007e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	685a      	ldr	r2, [r3, #4]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	697a      	ldr	r2, [r7, #20]
 8007e72:	621a      	str	r2, [r3, #32]
}
 8007e74:	bf00      	nop
 8007e76:	371c      	adds	r7, #28
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bc80      	pop	{r7}
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	40012c00 	.word	0x40012c00

08007e84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b087      	sub	sp, #28
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a1b      	ldr	r3, [r3, #32]
 8007e92:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a1b      	ldr	r3, [r3, #32]
 8007e98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	69db      	ldr	r3, [r3, #28]
 8007eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007eba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	021b      	lsls	r3, r3, #8
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007ece:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	031b      	lsls	r3, r3, #12
 8007ed6:	693a      	ldr	r2, [r7, #16]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	4a0f      	ldr	r2, [pc, #60]	@ (8007f1c <TIM_OC4_SetConfig+0x98>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d109      	bne.n	8007ef8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007eea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	695b      	ldr	r3, [r3, #20]
 8007ef0:	019b      	lsls	r3, r3, #6
 8007ef2:	697a      	ldr	r2, [r7, #20]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	697a      	ldr	r2, [r7, #20]
 8007efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	685a      	ldr	r2, [r3, #4]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	693a      	ldr	r2, [r7, #16]
 8007f10:	621a      	str	r2, [r3, #32]
}
 8007f12:	bf00      	nop
 8007f14:	371c      	adds	r7, #28
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bc80      	pop	{r7}
 8007f1a:	4770      	bx	lr
 8007f1c:	40012c00 	.word	0x40012c00

08007f20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b087      	sub	sp, #28
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	60b9      	str	r1, [r7, #8]
 8007f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6a1b      	ldr	r3, [r3, #32]
 8007f30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6a1b      	ldr	r3, [r3, #32]
 8007f36:	f023 0201 	bic.w	r2, r3, #1
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	699b      	ldr	r3, [r3, #24]
 8007f42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007f4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	011b      	lsls	r3, r3, #4
 8007f50:	693a      	ldr	r2, [r7, #16]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	f023 030a 	bic.w	r3, r3, #10
 8007f5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f5e:	697a      	ldr	r2, [r7, #20]
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	693a      	ldr	r2, [r7, #16]
 8007f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	697a      	ldr	r2, [r7, #20]
 8007f70:	621a      	str	r2, [r3, #32]
}
 8007f72:	bf00      	nop
 8007f74:	371c      	adds	r7, #28
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bc80      	pop	{r7}
 8007f7a:	4770      	bx	lr

08007f7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b087      	sub	sp, #28
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6a1b      	ldr	r3, [r3, #32]
 8007f8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6a1b      	ldr	r3, [r3, #32]
 8007f92:	f023 0210 	bic.w	r2, r3, #16
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	699b      	ldr	r3, [r3, #24]
 8007f9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007fa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	031b      	lsls	r3, r3, #12
 8007fac:	693a      	ldr	r2, [r7, #16]
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007fb8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	011b      	lsls	r3, r3, #4
 8007fbe:	697a      	ldr	r2, [r7, #20]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	693a      	ldr	r2, [r7, #16]
 8007fc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	697a      	ldr	r2, [r7, #20]
 8007fce:	621a      	str	r2, [r3, #32]
}
 8007fd0:	bf00      	nop
 8007fd2:	371c      	adds	r7, #28
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bc80      	pop	{r7}
 8007fd8:	4770      	bx	lr

08007fda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007fda:	b480      	push	{r7}
 8007fdc:	b085      	sub	sp, #20
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
 8007fe2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ff0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ff2:	683a      	ldr	r2, [r7, #0]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	f043 0307 	orr.w	r3, r3, #7
 8007ffc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	609a      	str	r2, [r3, #8]
}
 8008004:	bf00      	nop
 8008006:	3714      	adds	r7, #20
 8008008:	46bd      	mov	sp, r7
 800800a:	bc80      	pop	{r7}
 800800c:	4770      	bx	lr

0800800e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800800e:	b480      	push	{r7}
 8008010:	b087      	sub	sp, #28
 8008012:	af00      	add	r7, sp, #0
 8008014:	60f8      	str	r0, [r7, #12]
 8008016:	60b9      	str	r1, [r7, #8]
 8008018:	607a      	str	r2, [r7, #4]
 800801a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008028:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	021a      	lsls	r2, r3, #8
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	431a      	orrs	r2, r3
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	4313      	orrs	r3, r2
 8008036:	697a      	ldr	r2, [r7, #20]
 8008038:	4313      	orrs	r3, r2
 800803a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	697a      	ldr	r2, [r7, #20]
 8008040:	609a      	str	r2, [r3, #8]
}
 8008042:	bf00      	nop
 8008044:	371c      	adds	r7, #28
 8008046:	46bd      	mov	sp, r7
 8008048:	bc80      	pop	{r7}
 800804a:	4770      	bx	lr

0800804c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800804c:	b480      	push	{r7}
 800804e:	b087      	sub	sp, #28
 8008050:	af00      	add	r7, sp, #0
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	60b9      	str	r1, [r7, #8]
 8008056:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	f003 031f 	and.w	r3, r3, #31
 800805e:	2201      	movs	r2, #1
 8008060:	fa02 f303 	lsl.w	r3, r2, r3
 8008064:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6a1a      	ldr	r2, [r3, #32]
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	43db      	mvns	r3, r3
 800806e:	401a      	ands	r2, r3
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6a1a      	ldr	r2, [r3, #32]
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	f003 031f 	and.w	r3, r3, #31
 800807e:	6879      	ldr	r1, [r7, #4]
 8008080:	fa01 f303 	lsl.w	r3, r1, r3
 8008084:	431a      	orrs	r2, r3
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	621a      	str	r2, [r3, #32]
}
 800808a:	bf00      	nop
 800808c:	371c      	adds	r7, #28
 800808e:	46bd      	mov	sp, r7
 8008090:	bc80      	pop	{r7}
 8008092:	4770      	bx	lr

08008094 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008094:	b480      	push	{r7}
 8008096:	b085      	sub	sp, #20
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d101      	bne.n	80080ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080a8:	2302      	movs	r3, #2
 80080aa:	e046      	b.n	800813a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2202      	movs	r2, #2
 80080b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	4313      	orrs	r3, r2
 80080dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a16      	ldr	r2, [pc, #88]	@ (8008144 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d00e      	beq.n	800810e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080f8:	d009      	beq.n	800810e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a12      	ldr	r2, [pc, #72]	@ (8008148 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d004      	beq.n	800810e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a10      	ldr	r2, [pc, #64]	@ (800814c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d10c      	bne.n	8008128 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008114:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	68ba      	ldr	r2, [r7, #8]
 800811c:	4313      	orrs	r3, r2
 800811e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	68ba      	ldr	r2, [r7, #8]
 8008126:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3714      	adds	r7, #20
 800813e:	46bd      	mov	sp, r7
 8008140:	bc80      	pop	{r7}
 8008142:	4770      	bx	lr
 8008144:	40012c00 	.word	0x40012c00
 8008148:	40000400 	.word	0x40000400
 800814c:	40000800 	.word	0x40000800

08008150 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800815a:	2300      	movs	r3, #0
 800815c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008164:	2b01      	cmp	r3, #1
 8008166:	d101      	bne.n	800816c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008168:	2302      	movs	r3, #2
 800816a:	e03d      	b.n	80081e8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	4313      	orrs	r3, r2
 8008180:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	4313      	orrs	r3, r2
 800818e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	4313      	orrs	r3, r2
 800819c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4313      	orrs	r3, r2
 80081aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	691b      	ldr	r3, [r3, #16]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	695b      	ldr	r3, [r3, #20]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	69db      	ldr	r3, [r3, #28]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3714      	adds	r7, #20
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bc80      	pop	{r7}
 80081f0:	4770      	bx	lr

080081f2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081f2:	b480      	push	{r7}
 80081f4:	b083      	sub	sp, #12
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081fa:	bf00      	nop
 80081fc:	370c      	adds	r7, #12
 80081fe:	46bd      	mov	sp, r7
 8008200:	bc80      	pop	{r7}
 8008202:	4770      	bx	lr

08008204 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800820c:	bf00      	nop
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	bc80      	pop	{r7}
 8008214:	4770      	bx	lr

08008216 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008216:	b580      	push	{r7, lr}
 8008218:	b082      	sub	sp, #8
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d101      	bne.n	8008228 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	e042      	b.n	80082ae <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800822e:	b2db      	uxtb	r3, r3
 8008230:	2b00      	cmp	r3, #0
 8008232:	d106      	bne.n	8008242 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f7fd f955 	bl	80054ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2224      	movs	r2, #36	@ 0x24
 8008246:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	68da      	ldr	r2, [r3, #12]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008258:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f82c 	bl	80082b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	691a      	ldr	r2, [r3, #16]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800826e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	695a      	ldr	r2, [r3, #20]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800827e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68da      	ldr	r2, [r3, #12]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800828e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2220      	movs	r2, #32
 800829a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2220      	movs	r2, #32
 80082a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3708      	adds	r7, #8
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
	...

080082b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	68da      	ldr	r2, [r3, #12]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	430a      	orrs	r2, r1
 80082d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	689a      	ldr	r2, [r3, #8]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	691b      	ldr	r3, [r3, #16]
 80082de:	431a      	orrs	r2, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	695b      	ldr	r3, [r3, #20]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80082f2:	f023 030c 	bic.w	r3, r3, #12
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	6812      	ldr	r2, [r2, #0]
 80082fa:	68b9      	ldr	r1, [r7, #8]
 80082fc:	430b      	orrs	r3, r1
 80082fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	695b      	ldr	r3, [r3, #20]
 8008306:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	699a      	ldr	r2, [r3, #24]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	430a      	orrs	r2, r1
 8008314:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a2c      	ldr	r2, [pc, #176]	@ (80083cc <UART_SetConfig+0x114>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d103      	bne.n	8008328 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008320:	f7fe fcc0 	bl	8006ca4 <HAL_RCC_GetPCLK2Freq>
 8008324:	60f8      	str	r0, [r7, #12]
 8008326:	e002      	b.n	800832e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008328:	f7fe fca8 	bl	8006c7c <HAL_RCC_GetPCLK1Freq>
 800832c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	4613      	mov	r3, r2
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	4413      	add	r3, r2
 8008336:	009a      	lsls	r2, r3, #2
 8008338:	441a      	add	r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	fbb2 f3f3 	udiv	r3, r2, r3
 8008344:	4a22      	ldr	r2, [pc, #136]	@ (80083d0 <UART_SetConfig+0x118>)
 8008346:	fba2 2303 	umull	r2, r3, r2, r3
 800834a:	095b      	lsrs	r3, r3, #5
 800834c:	0119      	lsls	r1, r3, #4
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	4613      	mov	r3, r2
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	4413      	add	r3, r2
 8008356:	009a      	lsls	r2, r3, #2
 8008358:	441a      	add	r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	fbb2 f2f3 	udiv	r2, r2, r3
 8008364:	4b1a      	ldr	r3, [pc, #104]	@ (80083d0 <UART_SetConfig+0x118>)
 8008366:	fba3 0302 	umull	r0, r3, r3, r2
 800836a:	095b      	lsrs	r3, r3, #5
 800836c:	2064      	movs	r0, #100	@ 0x64
 800836e:	fb00 f303 	mul.w	r3, r0, r3
 8008372:	1ad3      	subs	r3, r2, r3
 8008374:	011b      	lsls	r3, r3, #4
 8008376:	3332      	adds	r3, #50	@ 0x32
 8008378:	4a15      	ldr	r2, [pc, #84]	@ (80083d0 <UART_SetConfig+0x118>)
 800837a:	fba2 2303 	umull	r2, r3, r2, r3
 800837e:	095b      	lsrs	r3, r3, #5
 8008380:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008384:	4419      	add	r1, r3
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	4613      	mov	r3, r2
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	4413      	add	r3, r2
 800838e:	009a      	lsls	r2, r3, #2
 8008390:	441a      	add	r2, r3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	fbb2 f2f3 	udiv	r2, r2, r3
 800839c:	4b0c      	ldr	r3, [pc, #48]	@ (80083d0 <UART_SetConfig+0x118>)
 800839e:	fba3 0302 	umull	r0, r3, r3, r2
 80083a2:	095b      	lsrs	r3, r3, #5
 80083a4:	2064      	movs	r0, #100	@ 0x64
 80083a6:	fb00 f303 	mul.w	r3, r0, r3
 80083aa:	1ad3      	subs	r3, r2, r3
 80083ac:	011b      	lsls	r3, r3, #4
 80083ae:	3332      	adds	r3, #50	@ 0x32
 80083b0:	4a07      	ldr	r2, [pc, #28]	@ (80083d0 <UART_SetConfig+0x118>)
 80083b2:	fba2 2303 	umull	r2, r3, r2, r3
 80083b6:	095b      	lsrs	r3, r3, #5
 80083b8:	f003 020f 	and.w	r2, r3, #15
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	440a      	add	r2, r1
 80083c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80083c4:	bf00      	nop
 80083c6:	3710      	adds	r7, #16
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	40013800 	.word	0x40013800
 80083d0:	51eb851f 	.word	0x51eb851f

080083d4 <_ZdlPvj>:
 80083d4:	f000 b811 	b.w	80083fa <_ZdlPv>

080083d8 <_Znwj>:
 80083d8:	2801      	cmp	r0, #1
 80083da:	bf38      	it	cc
 80083dc:	2001      	movcc	r0, #1
 80083de:	b510      	push	{r4, lr}
 80083e0:	4604      	mov	r4, r0
 80083e2:	4620      	mov	r0, r4
 80083e4:	f000 f81c 	bl	8008420 <malloc>
 80083e8:	b100      	cbz	r0, 80083ec <_Znwj+0x14>
 80083ea:	bd10      	pop	{r4, pc}
 80083ec:	f000 f808 	bl	8008400 <_ZSt15get_new_handlerv>
 80083f0:	b908      	cbnz	r0, 80083f6 <_Znwj+0x1e>
 80083f2:	f000 f80d 	bl	8008410 <abort>
 80083f6:	4780      	blx	r0
 80083f8:	e7f3      	b.n	80083e2 <_Znwj+0xa>

080083fa <_ZdlPv>:
 80083fa:	f000 b819 	b.w	8008430 <free>
	...

08008400 <_ZSt15get_new_handlerv>:
 8008400:	4b02      	ldr	r3, [pc, #8]	@ (800840c <_ZSt15get_new_handlerv+0xc>)
 8008402:	6818      	ldr	r0, [r3, #0]
 8008404:	f3bf 8f5b 	dmb	ish
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	20000404 	.word	0x20000404

08008410 <abort>:
 8008410:	2006      	movs	r0, #6
 8008412:	b508      	push	{r3, lr}
 8008414:	f000 fe74 	bl	8009100 <raise>
 8008418:	2001      	movs	r0, #1
 800841a:	f7fd f908 	bl	800562e <_exit>
	...

08008420 <malloc>:
 8008420:	4b02      	ldr	r3, [pc, #8]	@ (800842c <malloc+0xc>)
 8008422:	4601      	mov	r1, r0
 8008424:	6818      	ldr	r0, [r3, #0]
 8008426:	f000 b82d 	b.w	8008484 <_malloc_r>
 800842a:	bf00      	nop
 800842c:	2000001c 	.word	0x2000001c

08008430 <free>:
 8008430:	4b02      	ldr	r3, [pc, #8]	@ (800843c <free+0xc>)
 8008432:	4601      	mov	r1, r0
 8008434:	6818      	ldr	r0, [r3, #0]
 8008436:	f001 bd6f 	b.w	8009f18 <_free_r>
 800843a:	bf00      	nop
 800843c:	2000001c 	.word	0x2000001c

08008440 <sbrk_aligned>:
 8008440:	b570      	push	{r4, r5, r6, lr}
 8008442:	4e0f      	ldr	r6, [pc, #60]	@ (8008480 <sbrk_aligned+0x40>)
 8008444:	460c      	mov	r4, r1
 8008446:	6831      	ldr	r1, [r6, #0]
 8008448:	4605      	mov	r5, r0
 800844a:	b911      	cbnz	r1, 8008452 <sbrk_aligned+0x12>
 800844c:	f000 feac 	bl	80091a8 <_sbrk_r>
 8008450:	6030      	str	r0, [r6, #0]
 8008452:	4621      	mov	r1, r4
 8008454:	4628      	mov	r0, r5
 8008456:	f000 fea7 	bl	80091a8 <_sbrk_r>
 800845a:	1c43      	adds	r3, r0, #1
 800845c:	d103      	bne.n	8008466 <sbrk_aligned+0x26>
 800845e:	f04f 34ff 	mov.w	r4, #4294967295
 8008462:	4620      	mov	r0, r4
 8008464:	bd70      	pop	{r4, r5, r6, pc}
 8008466:	1cc4      	adds	r4, r0, #3
 8008468:	f024 0403 	bic.w	r4, r4, #3
 800846c:	42a0      	cmp	r0, r4
 800846e:	d0f8      	beq.n	8008462 <sbrk_aligned+0x22>
 8008470:	1a21      	subs	r1, r4, r0
 8008472:	4628      	mov	r0, r5
 8008474:	f000 fe98 	bl	80091a8 <_sbrk_r>
 8008478:	3001      	adds	r0, #1
 800847a:	d1f2      	bne.n	8008462 <sbrk_aligned+0x22>
 800847c:	e7ef      	b.n	800845e <sbrk_aligned+0x1e>
 800847e:	bf00      	nop
 8008480:	20000408 	.word	0x20000408

08008484 <_malloc_r>:
 8008484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008488:	1ccd      	adds	r5, r1, #3
 800848a:	f025 0503 	bic.w	r5, r5, #3
 800848e:	3508      	adds	r5, #8
 8008490:	2d0c      	cmp	r5, #12
 8008492:	bf38      	it	cc
 8008494:	250c      	movcc	r5, #12
 8008496:	2d00      	cmp	r5, #0
 8008498:	4606      	mov	r6, r0
 800849a:	db01      	blt.n	80084a0 <_malloc_r+0x1c>
 800849c:	42a9      	cmp	r1, r5
 800849e:	d904      	bls.n	80084aa <_malloc_r+0x26>
 80084a0:	230c      	movs	r3, #12
 80084a2:	6033      	str	r3, [r6, #0]
 80084a4:	2000      	movs	r0, #0
 80084a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008580 <_malloc_r+0xfc>
 80084ae:	f000 f869 	bl	8008584 <__malloc_lock>
 80084b2:	f8d8 3000 	ldr.w	r3, [r8]
 80084b6:	461c      	mov	r4, r3
 80084b8:	bb44      	cbnz	r4, 800850c <_malloc_r+0x88>
 80084ba:	4629      	mov	r1, r5
 80084bc:	4630      	mov	r0, r6
 80084be:	f7ff ffbf 	bl	8008440 <sbrk_aligned>
 80084c2:	1c43      	adds	r3, r0, #1
 80084c4:	4604      	mov	r4, r0
 80084c6:	d158      	bne.n	800857a <_malloc_r+0xf6>
 80084c8:	f8d8 4000 	ldr.w	r4, [r8]
 80084cc:	4627      	mov	r7, r4
 80084ce:	2f00      	cmp	r7, #0
 80084d0:	d143      	bne.n	800855a <_malloc_r+0xd6>
 80084d2:	2c00      	cmp	r4, #0
 80084d4:	d04b      	beq.n	800856e <_malloc_r+0xea>
 80084d6:	6823      	ldr	r3, [r4, #0]
 80084d8:	4639      	mov	r1, r7
 80084da:	4630      	mov	r0, r6
 80084dc:	eb04 0903 	add.w	r9, r4, r3
 80084e0:	f000 fe62 	bl	80091a8 <_sbrk_r>
 80084e4:	4581      	cmp	r9, r0
 80084e6:	d142      	bne.n	800856e <_malloc_r+0xea>
 80084e8:	6821      	ldr	r1, [r4, #0]
 80084ea:	4630      	mov	r0, r6
 80084ec:	1a6d      	subs	r5, r5, r1
 80084ee:	4629      	mov	r1, r5
 80084f0:	f7ff ffa6 	bl	8008440 <sbrk_aligned>
 80084f4:	3001      	adds	r0, #1
 80084f6:	d03a      	beq.n	800856e <_malloc_r+0xea>
 80084f8:	6823      	ldr	r3, [r4, #0]
 80084fa:	442b      	add	r3, r5
 80084fc:	6023      	str	r3, [r4, #0]
 80084fe:	f8d8 3000 	ldr.w	r3, [r8]
 8008502:	685a      	ldr	r2, [r3, #4]
 8008504:	bb62      	cbnz	r2, 8008560 <_malloc_r+0xdc>
 8008506:	f8c8 7000 	str.w	r7, [r8]
 800850a:	e00f      	b.n	800852c <_malloc_r+0xa8>
 800850c:	6822      	ldr	r2, [r4, #0]
 800850e:	1b52      	subs	r2, r2, r5
 8008510:	d420      	bmi.n	8008554 <_malloc_r+0xd0>
 8008512:	2a0b      	cmp	r2, #11
 8008514:	d917      	bls.n	8008546 <_malloc_r+0xc2>
 8008516:	1961      	adds	r1, r4, r5
 8008518:	42a3      	cmp	r3, r4
 800851a:	6025      	str	r5, [r4, #0]
 800851c:	bf18      	it	ne
 800851e:	6059      	strne	r1, [r3, #4]
 8008520:	6863      	ldr	r3, [r4, #4]
 8008522:	bf08      	it	eq
 8008524:	f8c8 1000 	streq.w	r1, [r8]
 8008528:	5162      	str	r2, [r4, r5]
 800852a:	604b      	str	r3, [r1, #4]
 800852c:	4630      	mov	r0, r6
 800852e:	f000 f82f 	bl	8008590 <__malloc_unlock>
 8008532:	f104 000b 	add.w	r0, r4, #11
 8008536:	1d23      	adds	r3, r4, #4
 8008538:	f020 0007 	bic.w	r0, r0, #7
 800853c:	1ac2      	subs	r2, r0, r3
 800853e:	bf1c      	itt	ne
 8008540:	1a1b      	subne	r3, r3, r0
 8008542:	50a3      	strne	r3, [r4, r2]
 8008544:	e7af      	b.n	80084a6 <_malloc_r+0x22>
 8008546:	6862      	ldr	r2, [r4, #4]
 8008548:	42a3      	cmp	r3, r4
 800854a:	bf0c      	ite	eq
 800854c:	f8c8 2000 	streq.w	r2, [r8]
 8008550:	605a      	strne	r2, [r3, #4]
 8008552:	e7eb      	b.n	800852c <_malloc_r+0xa8>
 8008554:	4623      	mov	r3, r4
 8008556:	6864      	ldr	r4, [r4, #4]
 8008558:	e7ae      	b.n	80084b8 <_malloc_r+0x34>
 800855a:	463c      	mov	r4, r7
 800855c:	687f      	ldr	r7, [r7, #4]
 800855e:	e7b6      	b.n	80084ce <_malloc_r+0x4a>
 8008560:	461a      	mov	r2, r3
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	42a3      	cmp	r3, r4
 8008566:	d1fb      	bne.n	8008560 <_malloc_r+0xdc>
 8008568:	2300      	movs	r3, #0
 800856a:	6053      	str	r3, [r2, #4]
 800856c:	e7de      	b.n	800852c <_malloc_r+0xa8>
 800856e:	230c      	movs	r3, #12
 8008570:	4630      	mov	r0, r6
 8008572:	6033      	str	r3, [r6, #0]
 8008574:	f000 f80c 	bl	8008590 <__malloc_unlock>
 8008578:	e794      	b.n	80084a4 <_malloc_r+0x20>
 800857a:	6005      	str	r5, [r0, #0]
 800857c:	e7d6      	b.n	800852c <_malloc_r+0xa8>
 800857e:	bf00      	nop
 8008580:	2000040c 	.word	0x2000040c

08008584 <__malloc_lock>:
 8008584:	4801      	ldr	r0, [pc, #4]	@ (800858c <__malloc_lock+0x8>)
 8008586:	f000 be5c 	b.w	8009242 <__retarget_lock_acquire_recursive>
 800858a:	bf00      	nop
 800858c:	20000550 	.word	0x20000550

08008590 <__malloc_unlock>:
 8008590:	4801      	ldr	r0, [pc, #4]	@ (8008598 <__malloc_unlock+0x8>)
 8008592:	f000 be57 	b.w	8009244 <__retarget_lock_release_recursive>
 8008596:	bf00      	nop
 8008598:	20000550 	.word	0x20000550

0800859c <__cvt>:
 800859c:	2b00      	cmp	r3, #0
 800859e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085a2:	461d      	mov	r5, r3
 80085a4:	bfbb      	ittet	lt
 80085a6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80085aa:	461d      	movlt	r5, r3
 80085ac:	2300      	movge	r3, #0
 80085ae:	232d      	movlt	r3, #45	@ 0x2d
 80085b0:	b088      	sub	sp, #32
 80085b2:	4614      	mov	r4, r2
 80085b4:	bfb8      	it	lt
 80085b6:	4614      	movlt	r4, r2
 80085b8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80085ba:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80085bc:	7013      	strb	r3, [r2, #0]
 80085be:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80085c0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80085c4:	f023 0820 	bic.w	r8, r3, #32
 80085c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80085cc:	d005      	beq.n	80085da <__cvt+0x3e>
 80085ce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80085d2:	d100      	bne.n	80085d6 <__cvt+0x3a>
 80085d4:	3601      	adds	r6, #1
 80085d6:	2302      	movs	r3, #2
 80085d8:	e000      	b.n	80085dc <__cvt+0x40>
 80085da:	2303      	movs	r3, #3
 80085dc:	aa07      	add	r2, sp, #28
 80085de:	9204      	str	r2, [sp, #16]
 80085e0:	aa06      	add	r2, sp, #24
 80085e2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80085e6:	e9cd 3600 	strd	r3, r6, [sp]
 80085ea:	4622      	mov	r2, r4
 80085ec:	462b      	mov	r3, r5
 80085ee:	f000 fecb 	bl	8009388 <_dtoa_r>
 80085f2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80085f6:	4607      	mov	r7, r0
 80085f8:	d119      	bne.n	800862e <__cvt+0x92>
 80085fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80085fc:	07db      	lsls	r3, r3, #31
 80085fe:	d50e      	bpl.n	800861e <__cvt+0x82>
 8008600:	eb00 0906 	add.w	r9, r0, r6
 8008604:	2200      	movs	r2, #0
 8008606:	2300      	movs	r3, #0
 8008608:	4620      	mov	r0, r4
 800860a:	4629      	mov	r1, r5
 800860c:	f7f8 fa80 	bl	8000b10 <__aeabi_dcmpeq>
 8008610:	b108      	cbz	r0, 8008616 <__cvt+0x7a>
 8008612:	f8cd 901c 	str.w	r9, [sp, #28]
 8008616:	2230      	movs	r2, #48	@ 0x30
 8008618:	9b07      	ldr	r3, [sp, #28]
 800861a:	454b      	cmp	r3, r9
 800861c:	d31e      	bcc.n	800865c <__cvt+0xc0>
 800861e:	4638      	mov	r0, r7
 8008620:	9b07      	ldr	r3, [sp, #28]
 8008622:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008624:	1bdb      	subs	r3, r3, r7
 8008626:	6013      	str	r3, [r2, #0]
 8008628:	b008      	add	sp, #32
 800862a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800862e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008632:	eb00 0906 	add.w	r9, r0, r6
 8008636:	d1e5      	bne.n	8008604 <__cvt+0x68>
 8008638:	7803      	ldrb	r3, [r0, #0]
 800863a:	2b30      	cmp	r3, #48	@ 0x30
 800863c:	d10a      	bne.n	8008654 <__cvt+0xb8>
 800863e:	2200      	movs	r2, #0
 8008640:	2300      	movs	r3, #0
 8008642:	4620      	mov	r0, r4
 8008644:	4629      	mov	r1, r5
 8008646:	f7f8 fa63 	bl	8000b10 <__aeabi_dcmpeq>
 800864a:	b918      	cbnz	r0, 8008654 <__cvt+0xb8>
 800864c:	f1c6 0601 	rsb	r6, r6, #1
 8008650:	f8ca 6000 	str.w	r6, [sl]
 8008654:	f8da 3000 	ldr.w	r3, [sl]
 8008658:	4499      	add	r9, r3
 800865a:	e7d3      	b.n	8008604 <__cvt+0x68>
 800865c:	1c59      	adds	r1, r3, #1
 800865e:	9107      	str	r1, [sp, #28]
 8008660:	701a      	strb	r2, [r3, #0]
 8008662:	e7d9      	b.n	8008618 <__cvt+0x7c>

08008664 <__exponent>:
 8008664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008666:	2900      	cmp	r1, #0
 8008668:	bfb6      	itet	lt
 800866a:	232d      	movlt	r3, #45	@ 0x2d
 800866c:	232b      	movge	r3, #43	@ 0x2b
 800866e:	4249      	neglt	r1, r1
 8008670:	2909      	cmp	r1, #9
 8008672:	7002      	strb	r2, [r0, #0]
 8008674:	7043      	strb	r3, [r0, #1]
 8008676:	dd29      	ble.n	80086cc <__exponent+0x68>
 8008678:	f10d 0307 	add.w	r3, sp, #7
 800867c:	461d      	mov	r5, r3
 800867e:	270a      	movs	r7, #10
 8008680:	fbb1 f6f7 	udiv	r6, r1, r7
 8008684:	461a      	mov	r2, r3
 8008686:	fb07 1416 	mls	r4, r7, r6, r1
 800868a:	3430      	adds	r4, #48	@ 0x30
 800868c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008690:	460c      	mov	r4, r1
 8008692:	2c63      	cmp	r4, #99	@ 0x63
 8008694:	4631      	mov	r1, r6
 8008696:	f103 33ff 	add.w	r3, r3, #4294967295
 800869a:	dcf1      	bgt.n	8008680 <__exponent+0x1c>
 800869c:	3130      	adds	r1, #48	@ 0x30
 800869e:	1e94      	subs	r4, r2, #2
 80086a0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80086a4:	4623      	mov	r3, r4
 80086a6:	1c41      	adds	r1, r0, #1
 80086a8:	42ab      	cmp	r3, r5
 80086aa:	d30a      	bcc.n	80086c2 <__exponent+0x5e>
 80086ac:	f10d 0309 	add.w	r3, sp, #9
 80086b0:	1a9b      	subs	r3, r3, r2
 80086b2:	42ac      	cmp	r4, r5
 80086b4:	bf88      	it	hi
 80086b6:	2300      	movhi	r3, #0
 80086b8:	3302      	adds	r3, #2
 80086ba:	4403      	add	r3, r0
 80086bc:	1a18      	subs	r0, r3, r0
 80086be:	b003      	add	sp, #12
 80086c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086c2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80086c6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80086ca:	e7ed      	b.n	80086a8 <__exponent+0x44>
 80086cc:	2330      	movs	r3, #48	@ 0x30
 80086ce:	3130      	adds	r1, #48	@ 0x30
 80086d0:	7083      	strb	r3, [r0, #2]
 80086d2:	70c1      	strb	r1, [r0, #3]
 80086d4:	1d03      	adds	r3, r0, #4
 80086d6:	e7f1      	b.n	80086bc <__exponent+0x58>

080086d8 <_printf_float>:
 80086d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086dc:	b091      	sub	sp, #68	@ 0x44
 80086de:	460c      	mov	r4, r1
 80086e0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80086e4:	4616      	mov	r6, r2
 80086e6:	461f      	mov	r7, r3
 80086e8:	4605      	mov	r5, r0
 80086ea:	f000 fd11 	bl	8009110 <_localeconv_r>
 80086ee:	6803      	ldr	r3, [r0, #0]
 80086f0:	4618      	mov	r0, r3
 80086f2:	9308      	str	r3, [sp, #32]
 80086f4:	f7f7 fd2c 	bl	8000150 <strlen>
 80086f8:	2300      	movs	r3, #0
 80086fa:	930e      	str	r3, [sp, #56]	@ 0x38
 80086fc:	f8d8 3000 	ldr.w	r3, [r8]
 8008700:	9009      	str	r0, [sp, #36]	@ 0x24
 8008702:	3307      	adds	r3, #7
 8008704:	f023 0307 	bic.w	r3, r3, #7
 8008708:	f103 0208 	add.w	r2, r3, #8
 800870c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008710:	f8d4 b000 	ldr.w	fp, [r4]
 8008714:	f8c8 2000 	str.w	r2, [r8]
 8008718:	e9d3 8900 	ldrd	r8, r9, [r3]
 800871c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008720:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008722:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8008726:	f04f 32ff 	mov.w	r2, #4294967295
 800872a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800872e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008732:	4b9c      	ldr	r3, [pc, #624]	@ (80089a4 <_printf_float+0x2cc>)
 8008734:	f7f8 fa1e 	bl	8000b74 <__aeabi_dcmpun>
 8008738:	bb70      	cbnz	r0, 8008798 <_printf_float+0xc0>
 800873a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800873e:	f04f 32ff 	mov.w	r2, #4294967295
 8008742:	4b98      	ldr	r3, [pc, #608]	@ (80089a4 <_printf_float+0x2cc>)
 8008744:	f7f8 f9f8 	bl	8000b38 <__aeabi_dcmple>
 8008748:	bb30      	cbnz	r0, 8008798 <_printf_float+0xc0>
 800874a:	2200      	movs	r2, #0
 800874c:	2300      	movs	r3, #0
 800874e:	4640      	mov	r0, r8
 8008750:	4649      	mov	r1, r9
 8008752:	f7f8 f9e7 	bl	8000b24 <__aeabi_dcmplt>
 8008756:	b110      	cbz	r0, 800875e <_printf_float+0x86>
 8008758:	232d      	movs	r3, #45	@ 0x2d
 800875a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800875e:	4a92      	ldr	r2, [pc, #584]	@ (80089a8 <_printf_float+0x2d0>)
 8008760:	4b92      	ldr	r3, [pc, #584]	@ (80089ac <_printf_float+0x2d4>)
 8008762:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008766:	bf94      	ite	ls
 8008768:	4690      	movls	r8, r2
 800876a:	4698      	movhi	r8, r3
 800876c:	2303      	movs	r3, #3
 800876e:	f04f 0900 	mov.w	r9, #0
 8008772:	6123      	str	r3, [r4, #16]
 8008774:	f02b 0304 	bic.w	r3, fp, #4
 8008778:	6023      	str	r3, [r4, #0]
 800877a:	4633      	mov	r3, r6
 800877c:	4621      	mov	r1, r4
 800877e:	4628      	mov	r0, r5
 8008780:	9700      	str	r7, [sp, #0]
 8008782:	aa0f      	add	r2, sp, #60	@ 0x3c
 8008784:	f000 f9d4 	bl	8008b30 <_printf_common>
 8008788:	3001      	adds	r0, #1
 800878a:	f040 8090 	bne.w	80088ae <_printf_float+0x1d6>
 800878e:	f04f 30ff 	mov.w	r0, #4294967295
 8008792:	b011      	add	sp, #68	@ 0x44
 8008794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008798:	4642      	mov	r2, r8
 800879a:	464b      	mov	r3, r9
 800879c:	4640      	mov	r0, r8
 800879e:	4649      	mov	r1, r9
 80087a0:	f7f8 f9e8 	bl	8000b74 <__aeabi_dcmpun>
 80087a4:	b148      	cbz	r0, 80087ba <_printf_float+0xe2>
 80087a6:	464b      	mov	r3, r9
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	bfb8      	it	lt
 80087ac:	232d      	movlt	r3, #45	@ 0x2d
 80087ae:	4a80      	ldr	r2, [pc, #512]	@ (80089b0 <_printf_float+0x2d8>)
 80087b0:	bfb8      	it	lt
 80087b2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80087b6:	4b7f      	ldr	r3, [pc, #508]	@ (80089b4 <_printf_float+0x2dc>)
 80087b8:	e7d3      	b.n	8008762 <_printf_float+0x8a>
 80087ba:	6863      	ldr	r3, [r4, #4]
 80087bc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80087c0:	1c5a      	adds	r2, r3, #1
 80087c2:	d13f      	bne.n	8008844 <_printf_float+0x16c>
 80087c4:	2306      	movs	r3, #6
 80087c6:	6063      	str	r3, [r4, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80087ce:	6023      	str	r3, [r4, #0]
 80087d0:	9206      	str	r2, [sp, #24]
 80087d2:	aa0e      	add	r2, sp, #56	@ 0x38
 80087d4:	e9cd a204 	strd	sl, r2, [sp, #16]
 80087d8:	aa0d      	add	r2, sp, #52	@ 0x34
 80087da:	9203      	str	r2, [sp, #12]
 80087dc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80087e0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80087e4:	6863      	ldr	r3, [r4, #4]
 80087e6:	4642      	mov	r2, r8
 80087e8:	9300      	str	r3, [sp, #0]
 80087ea:	4628      	mov	r0, r5
 80087ec:	464b      	mov	r3, r9
 80087ee:	910a      	str	r1, [sp, #40]	@ 0x28
 80087f0:	f7ff fed4 	bl	800859c <__cvt>
 80087f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80087f6:	4680      	mov	r8, r0
 80087f8:	2947      	cmp	r1, #71	@ 0x47
 80087fa:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80087fc:	d128      	bne.n	8008850 <_printf_float+0x178>
 80087fe:	1cc8      	adds	r0, r1, #3
 8008800:	db02      	blt.n	8008808 <_printf_float+0x130>
 8008802:	6863      	ldr	r3, [r4, #4]
 8008804:	4299      	cmp	r1, r3
 8008806:	dd40      	ble.n	800888a <_printf_float+0x1b2>
 8008808:	f1aa 0a02 	sub.w	sl, sl, #2
 800880c:	fa5f fa8a 	uxtb.w	sl, sl
 8008810:	4652      	mov	r2, sl
 8008812:	3901      	subs	r1, #1
 8008814:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008818:	910d      	str	r1, [sp, #52]	@ 0x34
 800881a:	f7ff ff23 	bl	8008664 <__exponent>
 800881e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008820:	4681      	mov	r9, r0
 8008822:	1813      	adds	r3, r2, r0
 8008824:	2a01      	cmp	r2, #1
 8008826:	6123      	str	r3, [r4, #16]
 8008828:	dc02      	bgt.n	8008830 <_printf_float+0x158>
 800882a:	6822      	ldr	r2, [r4, #0]
 800882c:	07d2      	lsls	r2, r2, #31
 800882e:	d501      	bpl.n	8008834 <_printf_float+0x15c>
 8008830:	3301      	adds	r3, #1
 8008832:	6123      	str	r3, [r4, #16]
 8008834:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8008838:	2b00      	cmp	r3, #0
 800883a:	d09e      	beq.n	800877a <_printf_float+0xa2>
 800883c:	232d      	movs	r3, #45	@ 0x2d
 800883e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008842:	e79a      	b.n	800877a <_printf_float+0xa2>
 8008844:	2947      	cmp	r1, #71	@ 0x47
 8008846:	d1bf      	bne.n	80087c8 <_printf_float+0xf0>
 8008848:	2b00      	cmp	r3, #0
 800884a:	d1bd      	bne.n	80087c8 <_printf_float+0xf0>
 800884c:	2301      	movs	r3, #1
 800884e:	e7ba      	b.n	80087c6 <_printf_float+0xee>
 8008850:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008854:	d9dc      	bls.n	8008810 <_printf_float+0x138>
 8008856:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800885a:	d118      	bne.n	800888e <_printf_float+0x1b6>
 800885c:	2900      	cmp	r1, #0
 800885e:	6863      	ldr	r3, [r4, #4]
 8008860:	dd0b      	ble.n	800887a <_printf_float+0x1a2>
 8008862:	6121      	str	r1, [r4, #16]
 8008864:	b913      	cbnz	r3, 800886c <_printf_float+0x194>
 8008866:	6822      	ldr	r2, [r4, #0]
 8008868:	07d0      	lsls	r0, r2, #31
 800886a:	d502      	bpl.n	8008872 <_printf_float+0x19a>
 800886c:	3301      	adds	r3, #1
 800886e:	440b      	add	r3, r1
 8008870:	6123      	str	r3, [r4, #16]
 8008872:	f04f 0900 	mov.w	r9, #0
 8008876:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008878:	e7dc      	b.n	8008834 <_printf_float+0x15c>
 800887a:	b913      	cbnz	r3, 8008882 <_printf_float+0x1aa>
 800887c:	6822      	ldr	r2, [r4, #0]
 800887e:	07d2      	lsls	r2, r2, #31
 8008880:	d501      	bpl.n	8008886 <_printf_float+0x1ae>
 8008882:	3302      	adds	r3, #2
 8008884:	e7f4      	b.n	8008870 <_printf_float+0x198>
 8008886:	2301      	movs	r3, #1
 8008888:	e7f2      	b.n	8008870 <_printf_float+0x198>
 800888a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800888e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008890:	4299      	cmp	r1, r3
 8008892:	db05      	blt.n	80088a0 <_printf_float+0x1c8>
 8008894:	6823      	ldr	r3, [r4, #0]
 8008896:	6121      	str	r1, [r4, #16]
 8008898:	07d8      	lsls	r0, r3, #31
 800889a:	d5ea      	bpl.n	8008872 <_printf_float+0x19a>
 800889c:	1c4b      	adds	r3, r1, #1
 800889e:	e7e7      	b.n	8008870 <_printf_float+0x198>
 80088a0:	2900      	cmp	r1, #0
 80088a2:	bfcc      	ite	gt
 80088a4:	2201      	movgt	r2, #1
 80088a6:	f1c1 0202 	rsble	r2, r1, #2
 80088aa:	4413      	add	r3, r2
 80088ac:	e7e0      	b.n	8008870 <_printf_float+0x198>
 80088ae:	6823      	ldr	r3, [r4, #0]
 80088b0:	055a      	lsls	r2, r3, #21
 80088b2:	d407      	bmi.n	80088c4 <_printf_float+0x1ec>
 80088b4:	6923      	ldr	r3, [r4, #16]
 80088b6:	4642      	mov	r2, r8
 80088b8:	4631      	mov	r1, r6
 80088ba:	4628      	mov	r0, r5
 80088bc:	47b8      	blx	r7
 80088be:	3001      	adds	r0, #1
 80088c0:	d12b      	bne.n	800891a <_printf_float+0x242>
 80088c2:	e764      	b.n	800878e <_printf_float+0xb6>
 80088c4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80088c8:	f240 80dc 	bls.w	8008a84 <_printf_float+0x3ac>
 80088cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80088d0:	2200      	movs	r2, #0
 80088d2:	2300      	movs	r3, #0
 80088d4:	f7f8 f91c 	bl	8000b10 <__aeabi_dcmpeq>
 80088d8:	2800      	cmp	r0, #0
 80088da:	d033      	beq.n	8008944 <_printf_float+0x26c>
 80088dc:	2301      	movs	r3, #1
 80088de:	4631      	mov	r1, r6
 80088e0:	4628      	mov	r0, r5
 80088e2:	4a35      	ldr	r2, [pc, #212]	@ (80089b8 <_printf_float+0x2e0>)
 80088e4:	47b8      	blx	r7
 80088e6:	3001      	adds	r0, #1
 80088e8:	f43f af51 	beq.w	800878e <_printf_float+0xb6>
 80088ec:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80088f0:	4543      	cmp	r3, r8
 80088f2:	db02      	blt.n	80088fa <_printf_float+0x222>
 80088f4:	6823      	ldr	r3, [r4, #0]
 80088f6:	07d8      	lsls	r0, r3, #31
 80088f8:	d50f      	bpl.n	800891a <_printf_float+0x242>
 80088fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80088fe:	4631      	mov	r1, r6
 8008900:	4628      	mov	r0, r5
 8008902:	47b8      	blx	r7
 8008904:	3001      	adds	r0, #1
 8008906:	f43f af42 	beq.w	800878e <_printf_float+0xb6>
 800890a:	f04f 0900 	mov.w	r9, #0
 800890e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008912:	f104 0a1a 	add.w	sl, r4, #26
 8008916:	45c8      	cmp	r8, r9
 8008918:	dc09      	bgt.n	800892e <_printf_float+0x256>
 800891a:	6823      	ldr	r3, [r4, #0]
 800891c:	079b      	lsls	r3, r3, #30
 800891e:	f100 8102 	bmi.w	8008b26 <_printf_float+0x44e>
 8008922:	68e0      	ldr	r0, [r4, #12]
 8008924:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008926:	4298      	cmp	r0, r3
 8008928:	bfb8      	it	lt
 800892a:	4618      	movlt	r0, r3
 800892c:	e731      	b.n	8008792 <_printf_float+0xba>
 800892e:	2301      	movs	r3, #1
 8008930:	4652      	mov	r2, sl
 8008932:	4631      	mov	r1, r6
 8008934:	4628      	mov	r0, r5
 8008936:	47b8      	blx	r7
 8008938:	3001      	adds	r0, #1
 800893a:	f43f af28 	beq.w	800878e <_printf_float+0xb6>
 800893e:	f109 0901 	add.w	r9, r9, #1
 8008942:	e7e8      	b.n	8008916 <_printf_float+0x23e>
 8008944:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008946:	2b00      	cmp	r3, #0
 8008948:	dc38      	bgt.n	80089bc <_printf_float+0x2e4>
 800894a:	2301      	movs	r3, #1
 800894c:	4631      	mov	r1, r6
 800894e:	4628      	mov	r0, r5
 8008950:	4a19      	ldr	r2, [pc, #100]	@ (80089b8 <_printf_float+0x2e0>)
 8008952:	47b8      	blx	r7
 8008954:	3001      	adds	r0, #1
 8008956:	f43f af1a 	beq.w	800878e <_printf_float+0xb6>
 800895a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800895e:	ea59 0303 	orrs.w	r3, r9, r3
 8008962:	d102      	bne.n	800896a <_printf_float+0x292>
 8008964:	6823      	ldr	r3, [r4, #0]
 8008966:	07d9      	lsls	r1, r3, #31
 8008968:	d5d7      	bpl.n	800891a <_printf_float+0x242>
 800896a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800896e:	4631      	mov	r1, r6
 8008970:	4628      	mov	r0, r5
 8008972:	47b8      	blx	r7
 8008974:	3001      	adds	r0, #1
 8008976:	f43f af0a 	beq.w	800878e <_printf_float+0xb6>
 800897a:	f04f 0a00 	mov.w	sl, #0
 800897e:	f104 0b1a 	add.w	fp, r4, #26
 8008982:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008984:	425b      	negs	r3, r3
 8008986:	4553      	cmp	r3, sl
 8008988:	dc01      	bgt.n	800898e <_printf_float+0x2b6>
 800898a:	464b      	mov	r3, r9
 800898c:	e793      	b.n	80088b6 <_printf_float+0x1de>
 800898e:	2301      	movs	r3, #1
 8008990:	465a      	mov	r2, fp
 8008992:	4631      	mov	r1, r6
 8008994:	4628      	mov	r0, r5
 8008996:	47b8      	blx	r7
 8008998:	3001      	adds	r0, #1
 800899a:	f43f aef8 	beq.w	800878e <_printf_float+0xb6>
 800899e:	f10a 0a01 	add.w	sl, sl, #1
 80089a2:	e7ee      	b.n	8008982 <_printf_float+0x2aa>
 80089a4:	7fefffff 	.word	0x7fefffff
 80089a8:	0800b8fa 	.word	0x0800b8fa
 80089ac:	0800b8fe 	.word	0x0800b8fe
 80089b0:	0800b902 	.word	0x0800b902
 80089b4:	0800b906 	.word	0x0800b906
 80089b8:	0800b90a 	.word	0x0800b90a
 80089bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80089be:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80089c2:	4553      	cmp	r3, sl
 80089c4:	bfa8      	it	ge
 80089c6:	4653      	movge	r3, sl
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	4699      	mov	r9, r3
 80089cc:	dc36      	bgt.n	8008a3c <_printf_float+0x364>
 80089ce:	f04f 0b00 	mov.w	fp, #0
 80089d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089d6:	f104 021a 	add.w	r2, r4, #26
 80089da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80089dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80089de:	eba3 0309 	sub.w	r3, r3, r9
 80089e2:	455b      	cmp	r3, fp
 80089e4:	dc31      	bgt.n	8008a4a <_printf_float+0x372>
 80089e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80089e8:	459a      	cmp	sl, r3
 80089ea:	dc3a      	bgt.n	8008a62 <_printf_float+0x38a>
 80089ec:	6823      	ldr	r3, [r4, #0]
 80089ee:	07da      	lsls	r2, r3, #31
 80089f0:	d437      	bmi.n	8008a62 <_printf_float+0x38a>
 80089f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80089f4:	ebaa 0903 	sub.w	r9, sl, r3
 80089f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089fa:	ebaa 0303 	sub.w	r3, sl, r3
 80089fe:	4599      	cmp	r9, r3
 8008a00:	bfa8      	it	ge
 8008a02:	4699      	movge	r9, r3
 8008a04:	f1b9 0f00 	cmp.w	r9, #0
 8008a08:	dc33      	bgt.n	8008a72 <_printf_float+0x39a>
 8008a0a:	f04f 0800 	mov.w	r8, #0
 8008a0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a12:	f104 0b1a 	add.w	fp, r4, #26
 8008a16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a18:	ebaa 0303 	sub.w	r3, sl, r3
 8008a1c:	eba3 0309 	sub.w	r3, r3, r9
 8008a20:	4543      	cmp	r3, r8
 8008a22:	f77f af7a 	ble.w	800891a <_printf_float+0x242>
 8008a26:	2301      	movs	r3, #1
 8008a28:	465a      	mov	r2, fp
 8008a2a:	4631      	mov	r1, r6
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	47b8      	blx	r7
 8008a30:	3001      	adds	r0, #1
 8008a32:	f43f aeac 	beq.w	800878e <_printf_float+0xb6>
 8008a36:	f108 0801 	add.w	r8, r8, #1
 8008a3a:	e7ec      	b.n	8008a16 <_printf_float+0x33e>
 8008a3c:	4642      	mov	r2, r8
 8008a3e:	4631      	mov	r1, r6
 8008a40:	4628      	mov	r0, r5
 8008a42:	47b8      	blx	r7
 8008a44:	3001      	adds	r0, #1
 8008a46:	d1c2      	bne.n	80089ce <_printf_float+0x2f6>
 8008a48:	e6a1      	b.n	800878e <_printf_float+0xb6>
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	4631      	mov	r1, r6
 8008a4e:	4628      	mov	r0, r5
 8008a50:	920a      	str	r2, [sp, #40]	@ 0x28
 8008a52:	47b8      	blx	r7
 8008a54:	3001      	adds	r0, #1
 8008a56:	f43f ae9a 	beq.w	800878e <_printf_float+0xb6>
 8008a5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a5c:	f10b 0b01 	add.w	fp, fp, #1
 8008a60:	e7bb      	b.n	80089da <_printf_float+0x302>
 8008a62:	4631      	mov	r1, r6
 8008a64:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008a68:	4628      	mov	r0, r5
 8008a6a:	47b8      	blx	r7
 8008a6c:	3001      	adds	r0, #1
 8008a6e:	d1c0      	bne.n	80089f2 <_printf_float+0x31a>
 8008a70:	e68d      	b.n	800878e <_printf_float+0xb6>
 8008a72:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a74:	464b      	mov	r3, r9
 8008a76:	4631      	mov	r1, r6
 8008a78:	4628      	mov	r0, r5
 8008a7a:	4442      	add	r2, r8
 8008a7c:	47b8      	blx	r7
 8008a7e:	3001      	adds	r0, #1
 8008a80:	d1c3      	bne.n	8008a0a <_printf_float+0x332>
 8008a82:	e684      	b.n	800878e <_printf_float+0xb6>
 8008a84:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008a88:	f1ba 0f01 	cmp.w	sl, #1
 8008a8c:	dc01      	bgt.n	8008a92 <_printf_float+0x3ba>
 8008a8e:	07db      	lsls	r3, r3, #31
 8008a90:	d536      	bpl.n	8008b00 <_printf_float+0x428>
 8008a92:	2301      	movs	r3, #1
 8008a94:	4642      	mov	r2, r8
 8008a96:	4631      	mov	r1, r6
 8008a98:	4628      	mov	r0, r5
 8008a9a:	47b8      	blx	r7
 8008a9c:	3001      	adds	r0, #1
 8008a9e:	f43f ae76 	beq.w	800878e <_printf_float+0xb6>
 8008aa2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008aa6:	4631      	mov	r1, r6
 8008aa8:	4628      	mov	r0, r5
 8008aaa:	47b8      	blx	r7
 8008aac:	3001      	adds	r0, #1
 8008aae:	f43f ae6e 	beq.w	800878e <_printf_float+0xb6>
 8008ab2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	2300      	movs	r3, #0
 8008aba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008abe:	f7f8 f827 	bl	8000b10 <__aeabi_dcmpeq>
 8008ac2:	b9c0      	cbnz	r0, 8008af6 <_printf_float+0x41e>
 8008ac4:	4653      	mov	r3, sl
 8008ac6:	f108 0201 	add.w	r2, r8, #1
 8008aca:	4631      	mov	r1, r6
 8008acc:	4628      	mov	r0, r5
 8008ace:	47b8      	blx	r7
 8008ad0:	3001      	adds	r0, #1
 8008ad2:	d10c      	bne.n	8008aee <_printf_float+0x416>
 8008ad4:	e65b      	b.n	800878e <_printf_float+0xb6>
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	465a      	mov	r2, fp
 8008ada:	4631      	mov	r1, r6
 8008adc:	4628      	mov	r0, r5
 8008ade:	47b8      	blx	r7
 8008ae0:	3001      	adds	r0, #1
 8008ae2:	f43f ae54 	beq.w	800878e <_printf_float+0xb6>
 8008ae6:	f108 0801 	add.w	r8, r8, #1
 8008aea:	45d0      	cmp	r8, sl
 8008aec:	dbf3      	blt.n	8008ad6 <_printf_float+0x3fe>
 8008aee:	464b      	mov	r3, r9
 8008af0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008af4:	e6e0      	b.n	80088b8 <_printf_float+0x1e0>
 8008af6:	f04f 0800 	mov.w	r8, #0
 8008afa:	f104 0b1a 	add.w	fp, r4, #26
 8008afe:	e7f4      	b.n	8008aea <_printf_float+0x412>
 8008b00:	2301      	movs	r3, #1
 8008b02:	4642      	mov	r2, r8
 8008b04:	e7e1      	b.n	8008aca <_printf_float+0x3f2>
 8008b06:	2301      	movs	r3, #1
 8008b08:	464a      	mov	r2, r9
 8008b0a:	4631      	mov	r1, r6
 8008b0c:	4628      	mov	r0, r5
 8008b0e:	47b8      	blx	r7
 8008b10:	3001      	adds	r0, #1
 8008b12:	f43f ae3c 	beq.w	800878e <_printf_float+0xb6>
 8008b16:	f108 0801 	add.w	r8, r8, #1
 8008b1a:	68e3      	ldr	r3, [r4, #12]
 8008b1c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008b1e:	1a5b      	subs	r3, r3, r1
 8008b20:	4543      	cmp	r3, r8
 8008b22:	dcf0      	bgt.n	8008b06 <_printf_float+0x42e>
 8008b24:	e6fd      	b.n	8008922 <_printf_float+0x24a>
 8008b26:	f04f 0800 	mov.w	r8, #0
 8008b2a:	f104 0919 	add.w	r9, r4, #25
 8008b2e:	e7f4      	b.n	8008b1a <_printf_float+0x442>

08008b30 <_printf_common>:
 8008b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b34:	4616      	mov	r6, r2
 8008b36:	4698      	mov	r8, r3
 8008b38:	688a      	ldr	r2, [r1, #8]
 8008b3a:	690b      	ldr	r3, [r1, #16]
 8008b3c:	4607      	mov	r7, r0
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	bfb8      	it	lt
 8008b42:	4613      	movlt	r3, r2
 8008b44:	6033      	str	r3, [r6, #0]
 8008b46:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008b4a:	460c      	mov	r4, r1
 8008b4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b50:	b10a      	cbz	r2, 8008b56 <_printf_common+0x26>
 8008b52:	3301      	adds	r3, #1
 8008b54:	6033      	str	r3, [r6, #0]
 8008b56:	6823      	ldr	r3, [r4, #0]
 8008b58:	0699      	lsls	r1, r3, #26
 8008b5a:	bf42      	ittt	mi
 8008b5c:	6833      	ldrmi	r3, [r6, #0]
 8008b5e:	3302      	addmi	r3, #2
 8008b60:	6033      	strmi	r3, [r6, #0]
 8008b62:	6825      	ldr	r5, [r4, #0]
 8008b64:	f015 0506 	ands.w	r5, r5, #6
 8008b68:	d106      	bne.n	8008b78 <_printf_common+0x48>
 8008b6a:	f104 0a19 	add.w	sl, r4, #25
 8008b6e:	68e3      	ldr	r3, [r4, #12]
 8008b70:	6832      	ldr	r2, [r6, #0]
 8008b72:	1a9b      	subs	r3, r3, r2
 8008b74:	42ab      	cmp	r3, r5
 8008b76:	dc2b      	bgt.n	8008bd0 <_printf_common+0xa0>
 8008b78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008b7c:	6822      	ldr	r2, [r4, #0]
 8008b7e:	3b00      	subs	r3, #0
 8008b80:	bf18      	it	ne
 8008b82:	2301      	movne	r3, #1
 8008b84:	0692      	lsls	r2, r2, #26
 8008b86:	d430      	bmi.n	8008bea <_printf_common+0xba>
 8008b88:	4641      	mov	r1, r8
 8008b8a:	4638      	mov	r0, r7
 8008b8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008b90:	47c8      	blx	r9
 8008b92:	3001      	adds	r0, #1
 8008b94:	d023      	beq.n	8008bde <_printf_common+0xae>
 8008b96:	6823      	ldr	r3, [r4, #0]
 8008b98:	6922      	ldr	r2, [r4, #16]
 8008b9a:	f003 0306 	and.w	r3, r3, #6
 8008b9e:	2b04      	cmp	r3, #4
 8008ba0:	bf14      	ite	ne
 8008ba2:	2500      	movne	r5, #0
 8008ba4:	6833      	ldreq	r3, [r6, #0]
 8008ba6:	f04f 0600 	mov.w	r6, #0
 8008baa:	bf08      	it	eq
 8008bac:	68e5      	ldreq	r5, [r4, #12]
 8008bae:	f104 041a 	add.w	r4, r4, #26
 8008bb2:	bf08      	it	eq
 8008bb4:	1aed      	subeq	r5, r5, r3
 8008bb6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008bba:	bf08      	it	eq
 8008bbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	bfc4      	itt	gt
 8008bc4:	1a9b      	subgt	r3, r3, r2
 8008bc6:	18ed      	addgt	r5, r5, r3
 8008bc8:	42b5      	cmp	r5, r6
 8008bca:	d11a      	bne.n	8008c02 <_printf_common+0xd2>
 8008bcc:	2000      	movs	r0, #0
 8008bce:	e008      	b.n	8008be2 <_printf_common+0xb2>
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	4652      	mov	r2, sl
 8008bd4:	4641      	mov	r1, r8
 8008bd6:	4638      	mov	r0, r7
 8008bd8:	47c8      	blx	r9
 8008bda:	3001      	adds	r0, #1
 8008bdc:	d103      	bne.n	8008be6 <_printf_common+0xb6>
 8008bde:	f04f 30ff 	mov.w	r0, #4294967295
 8008be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be6:	3501      	adds	r5, #1
 8008be8:	e7c1      	b.n	8008b6e <_printf_common+0x3e>
 8008bea:	2030      	movs	r0, #48	@ 0x30
 8008bec:	18e1      	adds	r1, r4, r3
 8008bee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008bf2:	1c5a      	adds	r2, r3, #1
 8008bf4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008bf8:	4422      	add	r2, r4
 8008bfa:	3302      	adds	r3, #2
 8008bfc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008c00:	e7c2      	b.n	8008b88 <_printf_common+0x58>
 8008c02:	2301      	movs	r3, #1
 8008c04:	4622      	mov	r2, r4
 8008c06:	4641      	mov	r1, r8
 8008c08:	4638      	mov	r0, r7
 8008c0a:	47c8      	blx	r9
 8008c0c:	3001      	adds	r0, #1
 8008c0e:	d0e6      	beq.n	8008bde <_printf_common+0xae>
 8008c10:	3601      	adds	r6, #1
 8008c12:	e7d9      	b.n	8008bc8 <_printf_common+0x98>

08008c14 <_printf_i>:
 8008c14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c18:	7e0f      	ldrb	r7, [r1, #24]
 8008c1a:	4691      	mov	r9, r2
 8008c1c:	2f78      	cmp	r7, #120	@ 0x78
 8008c1e:	4680      	mov	r8, r0
 8008c20:	460c      	mov	r4, r1
 8008c22:	469a      	mov	sl, r3
 8008c24:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008c26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008c2a:	d807      	bhi.n	8008c3c <_printf_i+0x28>
 8008c2c:	2f62      	cmp	r7, #98	@ 0x62
 8008c2e:	d80a      	bhi.n	8008c46 <_printf_i+0x32>
 8008c30:	2f00      	cmp	r7, #0
 8008c32:	f000 80d3 	beq.w	8008ddc <_printf_i+0x1c8>
 8008c36:	2f58      	cmp	r7, #88	@ 0x58
 8008c38:	f000 80ba 	beq.w	8008db0 <_printf_i+0x19c>
 8008c3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008c44:	e03a      	b.n	8008cbc <_printf_i+0xa8>
 8008c46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008c4a:	2b15      	cmp	r3, #21
 8008c4c:	d8f6      	bhi.n	8008c3c <_printf_i+0x28>
 8008c4e:	a101      	add	r1, pc, #4	@ (adr r1, 8008c54 <_printf_i+0x40>)
 8008c50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c54:	08008cad 	.word	0x08008cad
 8008c58:	08008cc1 	.word	0x08008cc1
 8008c5c:	08008c3d 	.word	0x08008c3d
 8008c60:	08008c3d 	.word	0x08008c3d
 8008c64:	08008c3d 	.word	0x08008c3d
 8008c68:	08008c3d 	.word	0x08008c3d
 8008c6c:	08008cc1 	.word	0x08008cc1
 8008c70:	08008c3d 	.word	0x08008c3d
 8008c74:	08008c3d 	.word	0x08008c3d
 8008c78:	08008c3d 	.word	0x08008c3d
 8008c7c:	08008c3d 	.word	0x08008c3d
 8008c80:	08008dc3 	.word	0x08008dc3
 8008c84:	08008ceb 	.word	0x08008ceb
 8008c88:	08008d7d 	.word	0x08008d7d
 8008c8c:	08008c3d 	.word	0x08008c3d
 8008c90:	08008c3d 	.word	0x08008c3d
 8008c94:	08008de5 	.word	0x08008de5
 8008c98:	08008c3d 	.word	0x08008c3d
 8008c9c:	08008ceb 	.word	0x08008ceb
 8008ca0:	08008c3d 	.word	0x08008c3d
 8008ca4:	08008c3d 	.word	0x08008c3d
 8008ca8:	08008d85 	.word	0x08008d85
 8008cac:	6833      	ldr	r3, [r6, #0]
 8008cae:	1d1a      	adds	r2, r3, #4
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	6032      	str	r2, [r6, #0]
 8008cb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008cb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	e09e      	b.n	8008dfe <_printf_i+0x1ea>
 8008cc0:	6833      	ldr	r3, [r6, #0]
 8008cc2:	6820      	ldr	r0, [r4, #0]
 8008cc4:	1d19      	adds	r1, r3, #4
 8008cc6:	6031      	str	r1, [r6, #0]
 8008cc8:	0606      	lsls	r6, r0, #24
 8008cca:	d501      	bpl.n	8008cd0 <_printf_i+0xbc>
 8008ccc:	681d      	ldr	r5, [r3, #0]
 8008cce:	e003      	b.n	8008cd8 <_printf_i+0xc4>
 8008cd0:	0645      	lsls	r5, r0, #25
 8008cd2:	d5fb      	bpl.n	8008ccc <_printf_i+0xb8>
 8008cd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008cd8:	2d00      	cmp	r5, #0
 8008cda:	da03      	bge.n	8008ce4 <_printf_i+0xd0>
 8008cdc:	232d      	movs	r3, #45	@ 0x2d
 8008cde:	426d      	negs	r5, r5
 8008ce0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ce4:	230a      	movs	r3, #10
 8008ce6:	4859      	ldr	r0, [pc, #356]	@ (8008e4c <_printf_i+0x238>)
 8008ce8:	e011      	b.n	8008d0e <_printf_i+0xfa>
 8008cea:	6821      	ldr	r1, [r4, #0]
 8008cec:	6833      	ldr	r3, [r6, #0]
 8008cee:	0608      	lsls	r0, r1, #24
 8008cf0:	f853 5b04 	ldr.w	r5, [r3], #4
 8008cf4:	d402      	bmi.n	8008cfc <_printf_i+0xe8>
 8008cf6:	0649      	lsls	r1, r1, #25
 8008cf8:	bf48      	it	mi
 8008cfa:	b2ad      	uxthmi	r5, r5
 8008cfc:	2f6f      	cmp	r7, #111	@ 0x6f
 8008cfe:	6033      	str	r3, [r6, #0]
 8008d00:	bf14      	ite	ne
 8008d02:	230a      	movne	r3, #10
 8008d04:	2308      	moveq	r3, #8
 8008d06:	4851      	ldr	r0, [pc, #324]	@ (8008e4c <_printf_i+0x238>)
 8008d08:	2100      	movs	r1, #0
 8008d0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008d0e:	6866      	ldr	r6, [r4, #4]
 8008d10:	2e00      	cmp	r6, #0
 8008d12:	bfa8      	it	ge
 8008d14:	6821      	ldrge	r1, [r4, #0]
 8008d16:	60a6      	str	r6, [r4, #8]
 8008d18:	bfa4      	itt	ge
 8008d1a:	f021 0104 	bicge.w	r1, r1, #4
 8008d1e:	6021      	strge	r1, [r4, #0]
 8008d20:	b90d      	cbnz	r5, 8008d26 <_printf_i+0x112>
 8008d22:	2e00      	cmp	r6, #0
 8008d24:	d04b      	beq.n	8008dbe <_printf_i+0x1aa>
 8008d26:	4616      	mov	r6, r2
 8008d28:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d2c:	fb03 5711 	mls	r7, r3, r1, r5
 8008d30:	5dc7      	ldrb	r7, [r0, r7]
 8008d32:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d36:	462f      	mov	r7, r5
 8008d38:	42bb      	cmp	r3, r7
 8008d3a:	460d      	mov	r5, r1
 8008d3c:	d9f4      	bls.n	8008d28 <_printf_i+0x114>
 8008d3e:	2b08      	cmp	r3, #8
 8008d40:	d10b      	bne.n	8008d5a <_printf_i+0x146>
 8008d42:	6823      	ldr	r3, [r4, #0]
 8008d44:	07df      	lsls	r7, r3, #31
 8008d46:	d508      	bpl.n	8008d5a <_printf_i+0x146>
 8008d48:	6923      	ldr	r3, [r4, #16]
 8008d4a:	6861      	ldr	r1, [r4, #4]
 8008d4c:	4299      	cmp	r1, r3
 8008d4e:	bfde      	ittt	le
 8008d50:	2330      	movle	r3, #48	@ 0x30
 8008d52:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d56:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d5a:	1b92      	subs	r2, r2, r6
 8008d5c:	6122      	str	r2, [r4, #16]
 8008d5e:	464b      	mov	r3, r9
 8008d60:	4621      	mov	r1, r4
 8008d62:	4640      	mov	r0, r8
 8008d64:	f8cd a000 	str.w	sl, [sp]
 8008d68:	aa03      	add	r2, sp, #12
 8008d6a:	f7ff fee1 	bl	8008b30 <_printf_common>
 8008d6e:	3001      	adds	r0, #1
 8008d70:	d14a      	bne.n	8008e08 <_printf_i+0x1f4>
 8008d72:	f04f 30ff 	mov.w	r0, #4294967295
 8008d76:	b004      	add	sp, #16
 8008d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d7c:	6823      	ldr	r3, [r4, #0]
 8008d7e:	f043 0320 	orr.w	r3, r3, #32
 8008d82:	6023      	str	r3, [r4, #0]
 8008d84:	2778      	movs	r7, #120	@ 0x78
 8008d86:	4832      	ldr	r0, [pc, #200]	@ (8008e50 <_printf_i+0x23c>)
 8008d88:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008d8c:	6823      	ldr	r3, [r4, #0]
 8008d8e:	6831      	ldr	r1, [r6, #0]
 8008d90:	061f      	lsls	r7, r3, #24
 8008d92:	f851 5b04 	ldr.w	r5, [r1], #4
 8008d96:	d402      	bmi.n	8008d9e <_printf_i+0x18a>
 8008d98:	065f      	lsls	r7, r3, #25
 8008d9a:	bf48      	it	mi
 8008d9c:	b2ad      	uxthmi	r5, r5
 8008d9e:	6031      	str	r1, [r6, #0]
 8008da0:	07d9      	lsls	r1, r3, #31
 8008da2:	bf44      	itt	mi
 8008da4:	f043 0320 	orrmi.w	r3, r3, #32
 8008da8:	6023      	strmi	r3, [r4, #0]
 8008daa:	b11d      	cbz	r5, 8008db4 <_printf_i+0x1a0>
 8008dac:	2310      	movs	r3, #16
 8008dae:	e7ab      	b.n	8008d08 <_printf_i+0xf4>
 8008db0:	4826      	ldr	r0, [pc, #152]	@ (8008e4c <_printf_i+0x238>)
 8008db2:	e7e9      	b.n	8008d88 <_printf_i+0x174>
 8008db4:	6823      	ldr	r3, [r4, #0]
 8008db6:	f023 0320 	bic.w	r3, r3, #32
 8008dba:	6023      	str	r3, [r4, #0]
 8008dbc:	e7f6      	b.n	8008dac <_printf_i+0x198>
 8008dbe:	4616      	mov	r6, r2
 8008dc0:	e7bd      	b.n	8008d3e <_printf_i+0x12a>
 8008dc2:	6833      	ldr	r3, [r6, #0]
 8008dc4:	6825      	ldr	r5, [r4, #0]
 8008dc6:	1d18      	adds	r0, r3, #4
 8008dc8:	6961      	ldr	r1, [r4, #20]
 8008dca:	6030      	str	r0, [r6, #0]
 8008dcc:	062e      	lsls	r6, r5, #24
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	d501      	bpl.n	8008dd6 <_printf_i+0x1c2>
 8008dd2:	6019      	str	r1, [r3, #0]
 8008dd4:	e002      	b.n	8008ddc <_printf_i+0x1c8>
 8008dd6:	0668      	lsls	r0, r5, #25
 8008dd8:	d5fb      	bpl.n	8008dd2 <_printf_i+0x1be>
 8008dda:	8019      	strh	r1, [r3, #0]
 8008ddc:	2300      	movs	r3, #0
 8008dde:	4616      	mov	r6, r2
 8008de0:	6123      	str	r3, [r4, #16]
 8008de2:	e7bc      	b.n	8008d5e <_printf_i+0x14a>
 8008de4:	6833      	ldr	r3, [r6, #0]
 8008de6:	2100      	movs	r1, #0
 8008de8:	1d1a      	adds	r2, r3, #4
 8008dea:	6032      	str	r2, [r6, #0]
 8008dec:	681e      	ldr	r6, [r3, #0]
 8008dee:	6862      	ldr	r2, [r4, #4]
 8008df0:	4630      	mov	r0, r6
 8008df2:	f000 fa30 	bl	8009256 <memchr>
 8008df6:	b108      	cbz	r0, 8008dfc <_printf_i+0x1e8>
 8008df8:	1b80      	subs	r0, r0, r6
 8008dfa:	6060      	str	r0, [r4, #4]
 8008dfc:	6863      	ldr	r3, [r4, #4]
 8008dfe:	6123      	str	r3, [r4, #16]
 8008e00:	2300      	movs	r3, #0
 8008e02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e06:	e7aa      	b.n	8008d5e <_printf_i+0x14a>
 8008e08:	4632      	mov	r2, r6
 8008e0a:	4649      	mov	r1, r9
 8008e0c:	4640      	mov	r0, r8
 8008e0e:	6923      	ldr	r3, [r4, #16]
 8008e10:	47d0      	blx	sl
 8008e12:	3001      	adds	r0, #1
 8008e14:	d0ad      	beq.n	8008d72 <_printf_i+0x15e>
 8008e16:	6823      	ldr	r3, [r4, #0]
 8008e18:	079b      	lsls	r3, r3, #30
 8008e1a:	d413      	bmi.n	8008e44 <_printf_i+0x230>
 8008e1c:	68e0      	ldr	r0, [r4, #12]
 8008e1e:	9b03      	ldr	r3, [sp, #12]
 8008e20:	4298      	cmp	r0, r3
 8008e22:	bfb8      	it	lt
 8008e24:	4618      	movlt	r0, r3
 8008e26:	e7a6      	b.n	8008d76 <_printf_i+0x162>
 8008e28:	2301      	movs	r3, #1
 8008e2a:	4632      	mov	r2, r6
 8008e2c:	4649      	mov	r1, r9
 8008e2e:	4640      	mov	r0, r8
 8008e30:	47d0      	blx	sl
 8008e32:	3001      	adds	r0, #1
 8008e34:	d09d      	beq.n	8008d72 <_printf_i+0x15e>
 8008e36:	3501      	adds	r5, #1
 8008e38:	68e3      	ldr	r3, [r4, #12]
 8008e3a:	9903      	ldr	r1, [sp, #12]
 8008e3c:	1a5b      	subs	r3, r3, r1
 8008e3e:	42ab      	cmp	r3, r5
 8008e40:	dcf2      	bgt.n	8008e28 <_printf_i+0x214>
 8008e42:	e7eb      	b.n	8008e1c <_printf_i+0x208>
 8008e44:	2500      	movs	r5, #0
 8008e46:	f104 0619 	add.w	r6, r4, #25
 8008e4a:	e7f5      	b.n	8008e38 <_printf_i+0x224>
 8008e4c:	0800b90c 	.word	0x0800b90c
 8008e50:	0800b91d 	.word	0x0800b91d

08008e54 <std>:
 8008e54:	2300      	movs	r3, #0
 8008e56:	b510      	push	{r4, lr}
 8008e58:	4604      	mov	r4, r0
 8008e5a:	e9c0 3300 	strd	r3, r3, [r0]
 8008e5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e62:	6083      	str	r3, [r0, #8]
 8008e64:	8181      	strh	r1, [r0, #12]
 8008e66:	6643      	str	r3, [r0, #100]	@ 0x64
 8008e68:	81c2      	strh	r2, [r0, #14]
 8008e6a:	6183      	str	r3, [r0, #24]
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	2208      	movs	r2, #8
 8008e70:	305c      	adds	r0, #92	@ 0x5c
 8008e72:	f000 f914 	bl	800909e <memset>
 8008e76:	4b0d      	ldr	r3, [pc, #52]	@ (8008eac <std+0x58>)
 8008e78:	6224      	str	r4, [r4, #32]
 8008e7a:	6263      	str	r3, [r4, #36]	@ 0x24
 8008e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8008eb0 <std+0x5c>)
 8008e7e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008e80:	4b0c      	ldr	r3, [pc, #48]	@ (8008eb4 <std+0x60>)
 8008e82:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008e84:	4b0c      	ldr	r3, [pc, #48]	@ (8008eb8 <std+0x64>)
 8008e86:	6323      	str	r3, [r4, #48]	@ 0x30
 8008e88:	4b0c      	ldr	r3, [pc, #48]	@ (8008ebc <std+0x68>)
 8008e8a:	429c      	cmp	r4, r3
 8008e8c:	d006      	beq.n	8008e9c <std+0x48>
 8008e8e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008e92:	4294      	cmp	r4, r2
 8008e94:	d002      	beq.n	8008e9c <std+0x48>
 8008e96:	33d0      	adds	r3, #208	@ 0xd0
 8008e98:	429c      	cmp	r4, r3
 8008e9a:	d105      	bne.n	8008ea8 <std+0x54>
 8008e9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ea4:	f000 b9cc 	b.w	8009240 <__retarget_lock_init_recursive>
 8008ea8:	bd10      	pop	{r4, pc}
 8008eaa:	bf00      	nop
 8008eac:	08009019 	.word	0x08009019
 8008eb0:	0800903b 	.word	0x0800903b
 8008eb4:	08009073 	.word	0x08009073
 8008eb8:	08009097 	.word	0x08009097
 8008ebc:	20000410 	.word	0x20000410

08008ec0 <stdio_exit_handler>:
 8008ec0:	4a02      	ldr	r2, [pc, #8]	@ (8008ecc <stdio_exit_handler+0xc>)
 8008ec2:	4903      	ldr	r1, [pc, #12]	@ (8008ed0 <stdio_exit_handler+0x10>)
 8008ec4:	4803      	ldr	r0, [pc, #12]	@ (8008ed4 <stdio_exit_handler+0x14>)
 8008ec6:	f000 b869 	b.w	8008f9c <_fwalk_sglue>
 8008eca:	bf00      	nop
 8008ecc:	20000010 	.word	0x20000010
 8008ed0:	0800aa59 	.word	0x0800aa59
 8008ed4:	20000020 	.word	0x20000020

08008ed8 <cleanup_stdio>:
 8008ed8:	6841      	ldr	r1, [r0, #4]
 8008eda:	4b0c      	ldr	r3, [pc, #48]	@ (8008f0c <cleanup_stdio+0x34>)
 8008edc:	b510      	push	{r4, lr}
 8008ede:	4299      	cmp	r1, r3
 8008ee0:	4604      	mov	r4, r0
 8008ee2:	d001      	beq.n	8008ee8 <cleanup_stdio+0x10>
 8008ee4:	f001 fdb8 	bl	800aa58 <_fflush_r>
 8008ee8:	68a1      	ldr	r1, [r4, #8]
 8008eea:	4b09      	ldr	r3, [pc, #36]	@ (8008f10 <cleanup_stdio+0x38>)
 8008eec:	4299      	cmp	r1, r3
 8008eee:	d002      	beq.n	8008ef6 <cleanup_stdio+0x1e>
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	f001 fdb1 	bl	800aa58 <_fflush_r>
 8008ef6:	68e1      	ldr	r1, [r4, #12]
 8008ef8:	4b06      	ldr	r3, [pc, #24]	@ (8008f14 <cleanup_stdio+0x3c>)
 8008efa:	4299      	cmp	r1, r3
 8008efc:	d004      	beq.n	8008f08 <cleanup_stdio+0x30>
 8008efe:	4620      	mov	r0, r4
 8008f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f04:	f001 bda8 	b.w	800aa58 <_fflush_r>
 8008f08:	bd10      	pop	{r4, pc}
 8008f0a:	bf00      	nop
 8008f0c:	20000410 	.word	0x20000410
 8008f10:	20000478 	.word	0x20000478
 8008f14:	200004e0 	.word	0x200004e0

08008f18 <global_stdio_init.part.0>:
 8008f18:	b510      	push	{r4, lr}
 8008f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8008f48 <global_stdio_init.part.0+0x30>)
 8008f1c:	4c0b      	ldr	r4, [pc, #44]	@ (8008f4c <global_stdio_init.part.0+0x34>)
 8008f1e:	4a0c      	ldr	r2, [pc, #48]	@ (8008f50 <global_stdio_init.part.0+0x38>)
 8008f20:	4620      	mov	r0, r4
 8008f22:	601a      	str	r2, [r3, #0]
 8008f24:	2104      	movs	r1, #4
 8008f26:	2200      	movs	r2, #0
 8008f28:	f7ff ff94 	bl	8008e54 <std>
 8008f2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008f30:	2201      	movs	r2, #1
 8008f32:	2109      	movs	r1, #9
 8008f34:	f7ff ff8e 	bl	8008e54 <std>
 8008f38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008f3c:	2202      	movs	r2, #2
 8008f3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f42:	2112      	movs	r1, #18
 8008f44:	f7ff bf86 	b.w	8008e54 <std>
 8008f48:	20000548 	.word	0x20000548
 8008f4c:	20000410 	.word	0x20000410
 8008f50:	08008ec1 	.word	0x08008ec1

08008f54 <__sfp_lock_acquire>:
 8008f54:	4801      	ldr	r0, [pc, #4]	@ (8008f5c <__sfp_lock_acquire+0x8>)
 8008f56:	f000 b974 	b.w	8009242 <__retarget_lock_acquire_recursive>
 8008f5a:	bf00      	nop
 8008f5c:	20000551 	.word	0x20000551

08008f60 <__sfp_lock_release>:
 8008f60:	4801      	ldr	r0, [pc, #4]	@ (8008f68 <__sfp_lock_release+0x8>)
 8008f62:	f000 b96f 	b.w	8009244 <__retarget_lock_release_recursive>
 8008f66:	bf00      	nop
 8008f68:	20000551 	.word	0x20000551

08008f6c <__sinit>:
 8008f6c:	b510      	push	{r4, lr}
 8008f6e:	4604      	mov	r4, r0
 8008f70:	f7ff fff0 	bl	8008f54 <__sfp_lock_acquire>
 8008f74:	6a23      	ldr	r3, [r4, #32]
 8008f76:	b11b      	cbz	r3, 8008f80 <__sinit+0x14>
 8008f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f7c:	f7ff bff0 	b.w	8008f60 <__sfp_lock_release>
 8008f80:	4b04      	ldr	r3, [pc, #16]	@ (8008f94 <__sinit+0x28>)
 8008f82:	6223      	str	r3, [r4, #32]
 8008f84:	4b04      	ldr	r3, [pc, #16]	@ (8008f98 <__sinit+0x2c>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d1f5      	bne.n	8008f78 <__sinit+0xc>
 8008f8c:	f7ff ffc4 	bl	8008f18 <global_stdio_init.part.0>
 8008f90:	e7f2      	b.n	8008f78 <__sinit+0xc>
 8008f92:	bf00      	nop
 8008f94:	08008ed9 	.word	0x08008ed9
 8008f98:	20000548 	.word	0x20000548

08008f9c <_fwalk_sglue>:
 8008f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fa0:	4607      	mov	r7, r0
 8008fa2:	4688      	mov	r8, r1
 8008fa4:	4614      	mov	r4, r2
 8008fa6:	2600      	movs	r6, #0
 8008fa8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008fac:	f1b9 0901 	subs.w	r9, r9, #1
 8008fb0:	d505      	bpl.n	8008fbe <_fwalk_sglue+0x22>
 8008fb2:	6824      	ldr	r4, [r4, #0]
 8008fb4:	2c00      	cmp	r4, #0
 8008fb6:	d1f7      	bne.n	8008fa8 <_fwalk_sglue+0xc>
 8008fb8:	4630      	mov	r0, r6
 8008fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fbe:	89ab      	ldrh	r3, [r5, #12]
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d907      	bls.n	8008fd4 <_fwalk_sglue+0x38>
 8008fc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	d003      	beq.n	8008fd4 <_fwalk_sglue+0x38>
 8008fcc:	4629      	mov	r1, r5
 8008fce:	4638      	mov	r0, r7
 8008fd0:	47c0      	blx	r8
 8008fd2:	4306      	orrs	r6, r0
 8008fd4:	3568      	adds	r5, #104	@ 0x68
 8008fd6:	e7e9      	b.n	8008fac <_fwalk_sglue+0x10>

08008fd8 <siprintf>:
 8008fd8:	b40e      	push	{r1, r2, r3}
 8008fda:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008fde:	b500      	push	{lr}
 8008fe0:	b09c      	sub	sp, #112	@ 0x70
 8008fe2:	ab1d      	add	r3, sp, #116	@ 0x74
 8008fe4:	9002      	str	r0, [sp, #8]
 8008fe6:	9006      	str	r0, [sp, #24]
 8008fe8:	9107      	str	r1, [sp, #28]
 8008fea:	9104      	str	r1, [sp, #16]
 8008fec:	4808      	ldr	r0, [pc, #32]	@ (8009010 <siprintf+0x38>)
 8008fee:	4909      	ldr	r1, [pc, #36]	@ (8009014 <siprintf+0x3c>)
 8008ff0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ff4:	9105      	str	r1, [sp, #20]
 8008ff6:	6800      	ldr	r0, [r0, #0]
 8008ff8:	a902      	add	r1, sp, #8
 8008ffa:	9301      	str	r3, [sp, #4]
 8008ffc:	f001 fbb0 	bl	800a760 <_svfiprintf_r>
 8009000:	2200      	movs	r2, #0
 8009002:	9b02      	ldr	r3, [sp, #8]
 8009004:	701a      	strb	r2, [r3, #0]
 8009006:	b01c      	add	sp, #112	@ 0x70
 8009008:	f85d eb04 	ldr.w	lr, [sp], #4
 800900c:	b003      	add	sp, #12
 800900e:	4770      	bx	lr
 8009010:	2000001c 	.word	0x2000001c
 8009014:	ffff0208 	.word	0xffff0208

08009018 <__sread>:
 8009018:	b510      	push	{r4, lr}
 800901a:	460c      	mov	r4, r1
 800901c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009020:	f000 f89c 	bl	800915c <_read_r>
 8009024:	2800      	cmp	r0, #0
 8009026:	bfab      	itete	ge
 8009028:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800902a:	89a3      	ldrhlt	r3, [r4, #12]
 800902c:	181b      	addge	r3, r3, r0
 800902e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009032:	bfac      	ite	ge
 8009034:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009036:	81a3      	strhlt	r3, [r4, #12]
 8009038:	bd10      	pop	{r4, pc}

0800903a <__swrite>:
 800903a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800903e:	461f      	mov	r7, r3
 8009040:	898b      	ldrh	r3, [r1, #12]
 8009042:	4605      	mov	r5, r0
 8009044:	05db      	lsls	r3, r3, #23
 8009046:	460c      	mov	r4, r1
 8009048:	4616      	mov	r6, r2
 800904a:	d505      	bpl.n	8009058 <__swrite+0x1e>
 800904c:	2302      	movs	r3, #2
 800904e:	2200      	movs	r2, #0
 8009050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009054:	f000 f870 	bl	8009138 <_lseek_r>
 8009058:	89a3      	ldrh	r3, [r4, #12]
 800905a:	4632      	mov	r2, r6
 800905c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009060:	81a3      	strh	r3, [r4, #12]
 8009062:	4628      	mov	r0, r5
 8009064:	463b      	mov	r3, r7
 8009066:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800906a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800906e:	f000 b8ab 	b.w	80091c8 <_write_r>

08009072 <__sseek>:
 8009072:	b510      	push	{r4, lr}
 8009074:	460c      	mov	r4, r1
 8009076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800907a:	f000 f85d 	bl	8009138 <_lseek_r>
 800907e:	1c43      	adds	r3, r0, #1
 8009080:	89a3      	ldrh	r3, [r4, #12]
 8009082:	bf15      	itete	ne
 8009084:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009086:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800908a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800908e:	81a3      	strheq	r3, [r4, #12]
 8009090:	bf18      	it	ne
 8009092:	81a3      	strhne	r3, [r4, #12]
 8009094:	bd10      	pop	{r4, pc}

08009096 <__sclose>:
 8009096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800909a:	f000 b83d 	b.w	8009118 <_close_r>

0800909e <memset>:
 800909e:	4603      	mov	r3, r0
 80090a0:	4402      	add	r2, r0
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d100      	bne.n	80090a8 <memset+0xa>
 80090a6:	4770      	bx	lr
 80090a8:	f803 1b01 	strb.w	r1, [r3], #1
 80090ac:	e7f9      	b.n	80090a2 <memset+0x4>

080090ae <_raise_r>:
 80090ae:	291f      	cmp	r1, #31
 80090b0:	b538      	push	{r3, r4, r5, lr}
 80090b2:	4605      	mov	r5, r0
 80090b4:	460c      	mov	r4, r1
 80090b6:	d904      	bls.n	80090c2 <_raise_r+0x14>
 80090b8:	2316      	movs	r3, #22
 80090ba:	6003      	str	r3, [r0, #0]
 80090bc:	f04f 30ff 	mov.w	r0, #4294967295
 80090c0:	bd38      	pop	{r3, r4, r5, pc}
 80090c2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80090c4:	b112      	cbz	r2, 80090cc <_raise_r+0x1e>
 80090c6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090ca:	b94b      	cbnz	r3, 80090e0 <_raise_r+0x32>
 80090cc:	4628      	mov	r0, r5
 80090ce:	f000 f869 	bl	80091a4 <_getpid_r>
 80090d2:	4622      	mov	r2, r4
 80090d4:	4601      	mov	r1, r0
 80090d6:	4628      	mov	r0, r5
 80090d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090dc:	f000 b850 	b.w	8009180 <_kill_r>
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d00a      	beq.n	80090fa <_raise_r+0x4c>
 80090e4:	1c59      	adds	r1, r3, #1
 80090e6:	d103      	bne.n	80090f0 <_raise_r+0x42>
 80090e8:	2316      	movs	r3, #22
 80090ea:	6003      	str	r3, [r0, #0]
 80090ec:	2001      	movs	r0, #1
 80090ee:	e7e7      	b.n	80090c0 <_raise_r+0x12>
 80090f0:	2100      	movs	r1, #0
 80090f2:	4620      	mov	r0, r4
 80090f4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80090f8:	4798      	blx	r3
 80090fa:	2000      	movs	r0, #0
 80090fc:	e7e0      	b.n	80090c0 <_raise_r+0x12>
	...

08009100 <raise>:
 8009100:	4b02      	ldr	r3, [pc, #8]	@ (800910c <raise+0xc>)
 8009102:	4601      	mov	r1, r0
 8009104:	6818      	ldr	r0, [r3, #0]
 8009106:	f7ff bfd2 	b.w	80090ae <_raise_r>
 800910a:	bf00      	nop
 800910c:	2000001c 	.word	0x2000001c

08009110 <_localeconv_r>:
 8009110:	4800      	ldr	r0, [pc, #0]	@ (8009114 <_localeconv_r+0x4>)
 8009112:	4770      	bx	lr
 8009114:	2000015c 	.word	0x2000015c

08009118 <_close_r>:
 8009118:	b538      	push	{r3, r4, r5, lr}
 800911a:	2300      	movs	r3, #0
 800911c:	4d05      	ldr	r5, [pc, #20]	@ (8009134 <_close_r+0x1c>)
 800911e:	4604      	mov	r4, r0
 8009120:	4608      	mov	r0, r1
 8009122:	602b      	str	r3, [r5, #0]
 8009124:	f7fc fac7 	bl	80056b6 <_close>
 8009128:	1c43      	adds	r3, r0, #1
 800912a:	d102      	bne.n	8009132 <_close_r+0x1a>
 800912c:	682b      	ldr	r3, [r5, #0]
 800912e:	b103      	cbz	r3, 8009132 <_close_r+0x1a>
 8009130:	6023      	str	r3, [r4, #0]
 8009132:	bd38      	pop	{r3, r4, r5, pc}
 8009134:	2000054c 	.word	0x2000054c

08009138 <_lseek_r>:
 8009138:	b538      	push	{r3, r4, r5, lr}
 800913a:	4604      	mov	r4, r0
 800913c:	4608      	mov	r0, r1
 800913e:	4611      	mov	r1, r2
 8009140:	2200      	movs	r2, #0
 8009142:	4d05      	ldr	r5, [pc, #20]	@ (8009158 <_lseek_r+0x20>)
 8009144:	602a      	str	r2, [r5, #0]
 8009146:	461a      	mov	r2, r3
 8009148:	f7fc fad9 	bl	80056fe <_lseek>
 800914c:	1c43      	adds	r3, r0, #1
 800914e:	d102      	bne.n	8009156 <_lseek_r+0x1e>
 8009150:	682b      	ldr	r3, [r5, #0]
 8009152:	b103      	cbz	r3, 8009156 <_lseek_r+0x1e>
 8009154:	6023      	str	r3, [r4, #0]
 8009156:	bd38      	pop	{r3, r4, r5, pc}
 8009158:	2000054c 	.word	0x2000054c

0800915c <_read_r>:
 800915c:	b538      	push	{r3, r4, r5, lr}
 800915e:	4604      	mov	r4, r0
 8009160:	4608      	mov	r0, r1
 8009162:	4611      	mov	r1, r2
 8009164:	2200      	movs	r2, #0
 8009166:	4d05      	ldr	r5, [pc, #20]	@ (800917c <_read_r+0x20>)
 8009168:	602a      	str	r2, [r5, #0]
 800916a:	461a      	mov	r2, r3
 800916c:	f7fc fa6a 	bl	8005644 <_read>
 8009170:	1c43      	adds	r3, r0, #1
 8009172:	d102      	bne.n	800917a <_read_r+0x1e>
 8009174:	682b      	ldr	r3, [r5, #0]
 8009176:	b103      	cbz	r3, 800917a <_read_r+0x1e>
 8009178:	6023      	str	r3, [r4, #0]
 800917a:	bd38      	pop	{r3, r4, r5, pc}
 800917c:	2000054c 	.word	0x2000054c

08009180 <_kill_r>:
 8009180:	b538      	push	{r3, r4, r5, lr}
 8009182:	2300      	movs	r3, #0
 8009184:	4d06      	ldr	r5, [pc, #24]	@ (80091a0 <_kill_r+0x20>)
 8009186:	4604      	mov	r4, r0
 8009188:	4608      	mov	r0, r1
 800918a:	4611      	mov	r1, r2
 800918c:	602b      	str	r3, [r5, #0]
 800918e:	f7fc fa3e 	bl	800560e <_kill>
 8009192:	1c43      	adds	r3, r0, #1
 8009194:	d102      	bne.n	800919c <_kill_r+0x1c>
 8009196:	682b      	ldr	r3, [r5, #0]
 8009198:	b103      	cbz	r3, 800919c <_kill_r+0x1c>
 800919a:	6023      	str	r3, [r4, #0]
 800919c:	bd38      	pop	{r3, r4, r5, pc}
 800919e:	bf00      	nop
 80091a0:	2000054c 	.word	0x2000054c

080091a4 <_getpid_r>:
 80091a4:	f7fc ba2c 	b.w	8005600 <_getpid>

080091a8 <_sbrk_r>:
 80091a8:	b538      	push	{r3, r4, r5, lr}
 80091aa:	2300      	movs	r3, #0
 80091ac:	4d05      	ldr	r5, [pc, #20]	@ (80091c4 <_sbrk_r+0x1c>)
 80091ae:	4604      	mov	r4, r0
 80091b0:	4608      	mov	r0, r1
 80091b2:	602b      	str	r3, [r5, #0]
 80091b4:	f7fc fab0 	bl	8005718 <_sbrk>
 80091b8:	1c43      	adds	r3, r0, #1
 80091ba:	d102      	bne.n	80091c2 <_sbrk_r+0x1a>
 80091bc:	682b      	ldr	r3, [r5, #0]
 80091be:	b103      	cbz	r3, 80091c2 <_sbrk_r+0x1a>
 80091c0:	6023      	str	r3, [r4, #0]
 80091c2:	bd38      	pop	{r3, r4, r5, pc}
 80091c4:	2000054c 	.word	0x2000054c

080091c8 <_write_r>:
 80091c8:	b538      	push	{r3, r4, r5, lr}
 80091ca:	4604      	mov	r4, r0
 80091cc:	4608      	mov	r0, r1
 80091ce:	4611      	mov	r1, r2
 80091d0:	2200      	movs	r2, #0
 80091d2:	4d05      	ldr	r5, [pc, #20]	@ (80091e8 <_write_r+0x20>)
 80091d4:	602a      	str	r2, [r5, #0]
 80091d6:	461a      	mov	r2, r3
 80091d8:	f7fc fa51 	bl	800567e <_write>
 80091dc:	1c43      	adds	r3, r0, #1
 80091de:	d102      	bne.n	80091e6 <_write_r+0x1e>
 80091e0:	682b      	ldr	r3, [r5, #0]
 80091e2:	b103      	cbz	r3, 80091e6 <_write_r+0x1e>
 80091e4:	6023      	str	r3, [r4, #0]
 80091e6:	bd38      	pop	{r3, r4, r5, pc}
 80091e8:	2000054c 	.word	0x2000054c

080091ec <__errno>:
 80091ec:	4b01      	ldr	r3, [pc, #4]	@ (80091f4 <__errno+0x8>)
 80091ee:	6818      	ldr	r0, [r3, #0]
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	2000001c 	.word	0x2000001c

080091f8 <__libc_init_array>:
 80091f8:	b570      	push	{r4, r5, r6, lr}
 80091fa:	2600      	movs	r6, #0
 80091fc:	4d0c      	ldr	r5, [pc, #48]	@ (8009230 <__libc_init_array+0x38>)
 80091fe:	4c0d      	ldr	r4, [pc, #52]	@ (8009234 <__libc_init_array+0x3c>)
 8009200:	1b64      	subs	r4, r4, r5
 8009202:	10a4      	asrs	r4, r4, #2
 8009204:	42a6      	cmp	r6, r4
 8009206:	d109      	bne.n	800921c <__libc_init_array+0x24>
 8009208:	f001 ff68 	bl	800b0dc <_init>
 800920c:	2600      	movs	r6, #0
 800920e:	4d0a      	ldr	r5, [pc, #40]	@ (8009238 <__libc_init_array+0x40>)
 8009210:	4c0a      	ldr	r4, [pc, #40]	@ (800923c <__libc_init_array+0x44>)
 8009212:	1b64      	subs	r4, r4, r5
 8009214:	10a4      	asrs	r4, r4, #2
 8009216:	42a6      	cmp	r6, r4
 8009218:	d105      	bne.n	8009226 <__libc_init_array+0x2e>
 800921a:	bd70      	pop	{r4, r5, r6, pc}
 800921c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009220:	4798      	blx	r3
 8009222:	3601      	adds	r6, #1
 8009224:	e7ee      	b.n	8009204 <__libc_init_array+0xc>
 8009226:	f855 3b04 	ldr.w	r3, [r5], #4
 800922a:	4798      	blx	r3
 800922c:	3601      	adds	r6, #1
 800922e:	e7f2      	b.n	8009216 <__libc_init_array+0x1e>
 8009230:	0800bc70 	.word	0x0800bc70
 8009234:	0800bc70 	.word	0x0800bc70
 8009238:	0800bc70 	.word	0x0800bc70
 800923c:	0800bc74 	.word	0x0800bc74

08009240 <__retarget_lock_init_recursive>:
 8009240:	4770      	bx	lr

08009242 <__retarget_lock_acquire_recursive>:
 8009242:	4770      	bx	lr

08009244 <__retarget_lock_release_recursive>:
 8009244:	4770      	bx	lr

08009246 <strcpy>:
 8009246:	4603      	mov	r3, r0
 8009248:	f811 2b01 	ldrb.w	r2, [r1], #1
 800924c:	f803 2b01 	strb.w	r2, [r3], #1
 8009250:	2a00      	cmp	r2, #0
 8009252:	d1f9      	bne.n	8009248 <strcpy+0x2>
 8009254:	4770      	bx	lr

08009256 <memchr>:
 8009256:	4603      	mov	r3, r0
 8009258:	b510      	push	{r4, lr}
 800925a:	b2c9      	uxtb	r1, r1
 800925c:	4402      	add	r2, r0
 800925e:	4293      	cmp	r3, r2
 8009260:	4618      	mov	r0, r3
 8009262:	d101      	bne.n	8009268 <memchr+0x12>
 8009264:	2000      	movs	r0, #0
 8009266:	e003      	b.n	8009270 <memchr+0x1a>
 8009268:	7804      	ldrb	r4, [r0, #0]
 800926a:	3301      	adds	r3, #1
 800926c:	428c      	cmp	r4, r1
 800926e:	d1f6      	bne.n	800925e <memchr+0x8>
 8009270:	bd10      	pop	{r4, pc}

08009272 <quorem>:
 8009272:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009276:	6903      	ldr	r3, [r0, #16]
 8009278:	690c      	ldr	r4, [r1, #16]
 800927a:	4607      	mov	r7, r0
 800927c:	42a3      	cmp	r3, r4
 800927e:	db7e      	blt.n	800937e <quorem+0x10c>
 8009280:	3c01      	subs	r4, #1
 8009282:	00a3      	lsls	r3, r4, #2
 8009284:	f100 0514 	add.w	r5, r0, #20
 8009288:	f101 0814 	add.w	r8, r1, #20
 800928c:	9300      	str	r3, [sp, #0]
 800928e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009292:	9301      	str	r3, [sp, #4]
 8009294:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009298:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800929c:	3301      	adds	r3, #1
 800929e:	429a      	cmp	r2, r3
 80092a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80092a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80092a8:	d32e      	bcc.n	8009308 <quorem+0x96>
 80092aa:	f04f 0a00 	mov.w	sl, #0
 80092ae:	46c4      	mov	ip, r8
 80092b0:	46ae      	mov	lr, r5
 80092b2:	46d3      	mov	fp, sl
 80092b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80092b8:	b298      	uxth	r0, r3
 80092ba:	fb06 a000 	mla	r0, r6, r0, sl
 80092be:	0c1b      	lsrs	r3, r3, #16
 80092c0:	0c02      	lsrs	r2, r0, #16
 80092c2:	fb06 2303 	mla	r3, r6, r3, r2
 80092c6:	f8de 2000 	ldr.w	r2, [lr]
 80092ca:	b280      	uxth	r0, r0
 80092cc:	b292      	uxth	r2, r2
 80092ce:	1a12      	subs	r2, r2, r0
 80092d0:	445a      	add	r2, fp
 80092d2:	f8de 0000 	ldr.w	r0, [lr]
 80092d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80092da:	b29b      	uxth	r3, r3
 80092dc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80092e0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80092e4:	b292      	uxth	r2, r2
 80092e6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80092ea:	45e1      	cmp	r9, ip
 80092ec:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80092f0:	f84e 2b04 	str.w	r2, [lr], #4
 80092f4:	d2de      	bcs.n	80092b4 <quorem+0x42>
 80092f6:	9b00      	ldr	r3, [sp, #0]
 80092f8:	58eb      	ldr	r3, [r5, r3]
 80092fa:	b92b      	cbnz	r3, 8009308 <quorem+0x96>
 80092fc:	9b01      	ldr	r3, [sp, #4]
 80092fe:	3b04      	subs	r3, #4
 8009300:	429d      	cmp	r5, r3
 8009302:	461a      	mov	r2, r3
 8009304:	d32f      	bcc.n	8009366 <quorem+0xf4>
 8009306:	613c      	str	r4, [r7, #16]
 8009308:	4638      	mov	r0, r7
 800930a:	f001 f8c5 	bl	800a498 <__mcmp>
 800930e:	2800      	cmp	r0, #0
 8009310:	db25      	blt.n	800935e <quorem+0xec>
 8009312:	4629      	mov	r1, r5
 8009314:	2000      	movs	r0, #0
 8009316:	f858 2b04 	ldr.w	r2, [r8], #4
 800931a:	f8d1 c000 	ldr.w	ip, [r1]
 800931e:	fa1f fe82 	uxth.w	lr, r2
 8009322:	fa1f f38c 	uxth.w	r3, ip
 8009326:	eba3 030e 	sub.w	r3, r3, lr
 800932a:	4403      	add	r3, r0
 800932c:	0c12      	lsrs	r2, r2, #16
 800932e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009332:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009336:	b29b      	uxth	r3, r3
 8009338:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800933c:	45c1      	cmp	r9, r8
 800933e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009342:	f841 3b04 	str.w	r3, [r1], #4
 8009346:	d2e6      	bcs.n	8009316 <quorem+0xa4>
 8009348:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800934c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009350:	b922      	cbnz	r2, 800935c <quorem+0xea>
 8009352:	3b04      	subs	r3, #4
 8009354:	429d      	cmp	r5, r3
 8009356:	461a      	mov	r2, r3
 8009358:	d30b      	bcc.n	8009372 <quorem+0x100>
 800935a:	613c      	str	r4, [r7, #16]
 800935c:	3601      	adds	r6, #1
 800935e:	4630      	mov	r0, r6
 8009360:	b003      	add	sp, #12
 8009362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009366:	6812      	ldr	r2, [r2, #0]
 8009368:	3b04      	subs	r3, #4
 800936a:	2a00      	cmp	r2, #0
 800936c:	d1cb      	bne.n	8009306 <quorem+0x94>
 800936e:	3c01      	subs	r4, #1
 8009370:	e7c6      	b.n	8009300 <quorem+0x8e>
 8009372:	6812      	ldr	r2, [r2, #0]
 8009374:	3b04      	subs	r3, #4
 8009376:	2a00      	cmp	r2, #0
 8009378:	d1ef      	bne.n	800935a <quorem+0xe8>
 800937a:	3c01      	subs	r4, #1
 800937c:	e7ea      	b.n	8009354 <quorem+0xe2>
 800937e:	2000      	movs	r0, #0
 8009380:	e7ee      	b.n	8009360 <quorem+0xee>
 8009382:	0000      	movs	r0, r0
 8009384:	0000      	movs	r0, r0
	...

08009388 <_dtoa_r>:
 8009388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800938c:	4614      	mov	r4, r2
 800938e:	461d      	mov	r5, r3
 8009390:	69c7      	ldr	r7, [r0, #28]
 8009392:	b097      	sub	sp, #92	@ 0x5c
 8009394:	4683      	mov	fp, r0
 8009396:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800939a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800939c:	b97f      	cbnz	r7, 80093be <_dtoa_r+0x36>
 800939e:	2010      	movs	r0, #16
 80093a0:	f7ff f83e 	bl	8008420 <malloc>
 80093a4:	4602      	mov	r2, r0
 80093a6:	f8cb 001c 	str.w	r0, [fp, #28]
 80093aa:	b920      	cbnz	r0, 80093b6 <_dtoa_r+0x2e>
 80093ac:	21ef      	movs	r1, #239	@ 0xef
 80093ae:	4ba8      	ldr	r3, [pc, #672]	@ (8009650 <_dtoa_r+0x2c8>)
 80093b0:	48a8      	ldr	r0, [pc, #672]	@ (8009654 <_dtoa_r+0x2cc>)
 80093b2:	f001 fba1 	bl	800aaf8 <__assert_func>
 80093b6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80093ba:	6007      	str	r7, [r0, #0]
 80093bc:	60c7      	str	r7, [r0, #12]
 80093be:	f8db 301c 	ldr.w	r3, [fp, #28]
 80093c2:	6819      	ldr	r1, [r3, #0]
 80093c4:	b159      	cbz	r1, 80093de <_dtoa_r+0x56>
 80093c6:	685a      	ldr	r2, [r3, #4]
 80093c8:	2301      	movs	r3, #1
 80093ca:	4093      	lsls	r3, r2
 80093cc:	604a      	str	r2, [r1, #4]
 80093ce:	608b      	str	r3, [r1, #8]
 80093d0:	4658      	mov	r0, fp
 80093d2:	f000 fe29 	bl	800a028 <_Bfree>
 80093d6:	2200      	movs	r2, #0
 80093d8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80093dc:	601a      	str	r2, [r3, #0]
 80093de:	1e2b      	subs	r3, r5, #0
 80093e0:	bfaf      	iteee	ge
 80093e2:	2300      	movge	r3, #0
 80093e4:	2201      	movlt	r2, #1
 80093e6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80093ea:	9303      	strlt	r3, [sp, #12]
 80093ec:	bfa8      	it	ge
 80093ee:	6033      	strge	r3, [r6, #0]
 80093f0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80093f4:	4b98      	ldr	r3, [pc, #608]	@ (8009658 <_dtoa_r+0x2d0>)
 80093f6:	bfb8      	it	lt
 80093f8:	6032      	strlt	r2, [r6, #0]
 80093fa:	ea33 0308 	bics.w	r3, r3, r8
 80093fe:	d112      	bne.n	8009426 <_dtoa_r+0x9e>
 8009400:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009404:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009406:	6013      	str	r3, [r2, #0]
 8009408:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800940c:	4323      	orrs	r3, r4
 800940e:	f000 8550 	beq.w	8009eb2 <_dtoa_r+0xb2a>
 8009412:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009414:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800965c <_dtoa_r+0x2d4>
 8009418:	2b00      	cmp	r3, #0
 800941a:	f000 8552 	beq.w	8009ec2 <_dtoa_r+0xb3a>
 800941e:	f10a 0303 	add.w	r3, sl, #3
 8009422:	f000 bd4c 	b.w	8009ebe <_dtoa_r+0xb36>
 8009426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800942a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800942e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009432:	2200      	movs	r2, #0
 8009434:	2300      	movs	r3, #0
 8009436:	f7f7 fb6b 	bl	8000b10 <__aeabi_dcmpeq>
 800943a:	4607      	mov	r7, r0
 800943c:	b158      	cbz	r0, 8009456 <_dtoa_r+0xce>
 800943e:	2301      	movs	r3, #1
 8009440:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009442:	6013      	str	r3, [r2, #0]
 8009444:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009446:	b113      	cbz	r3, 800944e <_dtoa_r+0xc6>
 8009448:	4b85      	ldr	r3, [pc, #532]	@ (8009660 <_dtoa_r+0x2d8>)
 800944a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800944c:	6013      	str	r3, [r2, #0]
 800944e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8009664 <_dtoa_r+0x2dc>
 8009452:	f000 bd36 	b.w	8009ec2 <_dtoa_r+0xb3a>
 8009456:	ab14      	add	r3, sp, #80	@ 0x50
 8009458:	9301      	str	r3, [sp, #4]
 800945a:	ab15      	add	r3, sp, #84	@ 0x54
 800945c:	9300      	str	r3, [sp, #0]
 800945e:	4658      	mov	r0, fp
 8009460:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009464:	f001 f8c8 	bl	800a5f8 <__d2b>
 8009468:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800946c:	4681      	mov	r9, r0
 800946e:	2e00      	cmp	r6, #0
 8009470:	d077      	beq.n	8009562 <_dtoa_r+0x1da>
 8009472:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009476:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009478:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800947c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009480:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009484:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009488:	9712      	str	r7, [sp, #72]	@ 0x48
 800948a:	4619      	mov	r1, r3
 800948c:	2200      	movs	r2, #0
 800948e:	4b76      	ldr	r3, [pc, #472]	@ (8009668 <_dtoa_r+0x2e0>)
 8009490:	f7f6 ff1e 	bl	80002d0 <__aeabi_dsub>
 8009494:	a368      	add	r3, pc, #416	@ (adr r3, 8009638 <_dtoa_r+0x2b0>)
 8009496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949a:	f7f7 f8d1 	bl	8000640 <__aeabi_dmul>
 800949e:	a368      	add	r3, pc, #416	@ (adr r3, 8009640 <_dtoa_r+0x2b8>)
 80094a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a4:	f7f6 ff16 	bl	80002d4 <__adddf3>
 80094a8:	4604      	mov	r4, r0
 80094aa:	4630      	mov	r0, r6
 80094ac:	460d      	mov	r5, r1
 80094ae:	f7f7 f85d 	bl	800056c <__aeabi_i2d>
 80094b2:	a365      	add	r3, pc, #404	@ (adr r3, 8009648 <_dtoa_r+0x2c0>)
 80094b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b8:	f7f7 f8c2 	bl	8000640 <__aeabi_dmul>
 80094bc:	4602      	mov	r2, r0
 80094be:	460b      	mov	r3, r1
 80094c0:	4620      	mov	r0, r4
 80094c2:	4629      	mov	r1, r5
 80094c4:	f7f6 ff06 	bl	80002d4 <__adddf3>
 80094c8:	4604      	mov	r4, r0
 80094ca:	460d      	mov	r5, r1
 80094cc:	f7f7 fb68 	bl	8000ba0 <__aeabi_d2iz>
 80094d0:	2200      	movs	r2, #0
 80094d2:	4607      	mov	r7, r0
 80094d4:	2300      	movs	r3, #0
 80094d6:	4620      	mov	r0, r4
 80094d8:	4629      	mov	r1, r5
 80094da:	f7f7 fb23 	bl	8000b24 <__aeabi_dcmplt>
 80094de:	b140      	cbz	r0, 80094f2 <_dtoa_r+0x16a>
 80094e0:	4638      	mov	r0, r7
 80094e2:	f7f7 f843 	bl	800056c <__aeabi_i2d>
 80094e6:	4622      	mov	r2, r4
 80094e8:	462b      	mov	r3, r5
 80094ea:	f7f7 fb11 	bl	8000b10 <__aeabi_dcmpeq>
 80094ee:	b900      	cbnz	r0, 80094f2 <_dtoa_r+0x16a>
 80094f0:	3f01      	subs	r7, #1
 80094f2:	2f16      	cmp	r7, #22
 80094f4:	d853      	bhi.n	800959e <_dtoa_r+0x216>
 80094f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094fa:	4b5c      	ldr	r3, [pc, #368]	@ (800966c <_dtoa_r+0x2e4>)
 80094fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009504:	f7f7 fb0e 	bl	8000b24 <__aeabi_dcmplt>
 8009508:	2800      	cmp	r0, #0
 800950a:	d04a      	beq.n	80095a2 <_dtoa_r+0x21a>
 800950c:	2300      	movs	r3, #0
 800950e:	3f01      	subs	r7, #1
 8009510:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009512:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009514:	1b9b      	subs	r3, r3, r6
 8009516:	1e5a      	subs	r2, r3, #1
 8009518:	bf46      	itte	mi
 800951a:	f1c3 0801 	rsbmi	r8, r3, #1
 800951e:	2300      	movmi	r3, #0
 8009520:	f04f 0800 	movpl.w	r8, #0
 8009524:	9209      	str	r2, [sp, #36]	@ 0x24
 8009526:	bf48      	it	mi
 8009528:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800952a:	2f00      	cmp	r7, #0
 800952c:	db3b      	blt.n	80095a6 <_dtoa_r+0x21e>
 800952e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009530:	970e      	str	r7, [sp, #56]	@ 0x38
 8009532:	443b      	add	r3, r7
 8009534:	9309      	str	r3, [sp, #36]	@ 0x24
 8009536:	2300      	movs	r3, #0
 8009538:	930a      	str	r3, [sp, #40]	@ 0x28
 800953a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800953c:	2b09      	cmp	r3, #9
 800953e:	d866      	bhi.n	800960e <_dtoa_r+0x286>
 8009540:	2b05      	cmp	r3, #5
 8009542:	bfc4      	itt	gt
 8009544:	3b04      	subgt	r3, #4
 8009546:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8009548:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800954a:	bfc8      	it	gt
 800954c:	2400      	movgt	r4, #0
 800954e:	f1a3 0302 	sub.w	r3, r3, #2
 8009552:	bfd8      	it	le
 8009554:	2401      	movle	r4, #1
 8009556:	2b03      	cmp	r3, #3
 8009558:	d864      	bhi.n	8009624 <_dtoa_r+0x29c>
 800955a:	e8df f003 	tbb	[pc, r3]
 800955e:	382b      	.short	0x382b
 8009560:	5636      	.short	0x5636
 8009562:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009566:	441e      	add	r6, r3
 8009568:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800956c:	2b20      	cmp	r3, #32
 800956e:	bfc1      	itttt	gt
 8009570:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009574:	fa08 f803 	lslgt.w	r8, r8, r3
 8009578:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800957c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009580:	bfd6      	itet	le
 8009582:	f1c3 0320 	rsble	r3, r3, #32
 8009586:	ea48 0003 	orrgt.w	r0, r8, r3
 800958a:	fa04 f003 	lslle.w	r0, r4, r3
 800958e:	f7f6 ffdd 	bl	800054c <__aeabi_ui2d>
 8009592:	2201      	movs	r2, #1
 8009594:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009598:	3e01      	subs	r6, #1
 800959a:	9212      	str	r2, [sp, #72]	@ 0x48
 800959c:	e775      	b.n	800948a <_dtoa_r+0x102>
 800959e:	2301      	movs	r3, #1
 80095a0:	e7b6      	b.n	8009510 <_dtoa_r+0x188>
 80095a2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80095a4:	e7b5      	b.n	8009512 <_dtoa_r+0x18a>
 80095a6:	427b      	negs	r3, r7
 80095a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80095aa:	2300      	movs	r3, #0
 80095ac:	eba8 0807 	sub.w	r8, r8, r7
 80095b0:	930e      	str	r3, [sp, #56]	@ 0x38
 80095b2:	e7c2      	b.n	800953a <_dtoa_r+0x1b2>
 80095b4:	2300      	movs	r3, #0
 80095b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80095b8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	dc35      	bgt.n	800962a <_dtoa_r+0x2a2>
 80095be:	2301      	movs	r3, #1
 80095c0:	461a      	mov	r2, r3
 80095c2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80095c6:	9221      	str	r2, [sp, #132]	@ 0x84
 80095c8:	e00b      	b.n	80095e2 <_dtoa_r+0x25a>
 80095ca:	2301      	movs	r3, #1
 80095cc:	e7f3      	b.n	80095b6 <_dtoa_r+0x22e>
 80095ce:	2300      	movs	r3, #0
 80095d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80095d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80095d4:	18fb      	adds	r3, r7, r3
 80095d6:	9308      	str	r3, [sp, #32]
 80095d8:	3301      	adds	r3, #1
 80095da:	2b01      	cmp	r3, #1
 80095dc:	9307      	str	r3, [sp, #28]
 80095de:	bfb8      	it	lt
 80095e0:	2301      	movlt	r3, #1
 80095e2:	2100      	movs	r1, #0
 80095e4:	2204      	movs	r2, #4
 80095e6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80095ea:	f102 0514 	add.w	r5, r2, #20
 80095ee:	429d      	cmp	r5, r3
 80095f0:	d91f      	bls.n	8009632 <_dtoa_r+0x2aa>
 80095f2:	6041      	str	r1, [r0, #4]
 80095f4:	4658      	mov	r0, fp
 80095f6:	f000 fcd7 	bl	8009fa8 <_Balloc>
 80095fa:	4682      	mov	sl, r0
 80095fc:	2800      	cmp	r0, #0
 80095fe:	d139      	bne.n	8009674 <_dtoa_r+0x2ec>
 8009600:	4602      	mov	r2, r0
 8009602:	f240 11af 	movw	r1, #431	@ 0x1af
 8009606:	4b1a      	ldr	r3, [pc, #104]	@ (8009670 <_dtoa_r+0x2e8>)
 8009608:	e6d2      	b.n	80093b0 <_dtoa_r+0x28>
 800960a:	2301      	movs	r3, #1
 800960c:	e7e0      	b.n	80095d0 <_dtoa_r+0x248>
 800960e:	2401      	movs	r4, #1
 8009610:	2300      	movs	r3, #0
 8009612:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009614:	9320      	str	r3, [sp, #128]	@ 0x80
 8009616:	f04f 33ff 	mov.w	r3, #4294967295
 800961a:	2200      	movs	r2, #0
 800961c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009620:	2312      	movs	r3, #18
 8009622:	e7d0      	b.n	80095c6 <_dtoa_r+0x23e>
 8009624:	2301      	movs	r3, #1
 8009626:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009628:	e7f5      	b.n	8009616 <_dtoa_r+0x28e>
 800962a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800962c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009630:	e7d7      	b.n	80095e2 <_dtoa_r+0x25a>
 8009632:	3101      	adds	r1, #1
 8009634:	0052      	lsls	r2, r2, #1
 8009636:	e7d8      	b.n	80095ea <_dtoa_r+0x262>
 8009638:	636f4361 	.word	0x636f4361
 800963c:	3fd287a7 	.word	0x3fd287a7
 8009640:	8b60c8b3 	.word	0x8b60c8b3
 8009644:	3fc68a28 	.word	0x3fc68a28
 8009648:	509f79fb 	.word	0x509f79fb
 800964c:	3fd34413 	.word	0x3fd34413
 8009650:	0800b93b 	.word	0x0800b93b
 8009654:	0800b952 	.word	0x0800b952
 8009658:	7ff00000 	.word	0x7ff00000
 800965c:	0800b937 	.word	0x0800b937
 8009660:	0800b90b 	.word	0x0800b90b
 8009664:	0800b90a 	.word	0x0800b90a
 8009668:	3ff80000 	.word	0x3ff80000
 800966c:	0800ba48 	.word	0x0800ba48
 8009670:	0800b9aa 	.word	0x0800b9aa
 8009674:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009678:	6018      	str	r0, [r3, #0]
 800967a:	9b07      	ldr	r3, [sp, #28]
 800967c:	2b0e      	cmp	r3, #14
 800967e:	f200 80a4 	bhi.w	80097ca <_dtoa_r+0x442>
 8009682:	2c00      	cmp	r4, #0
 8009684:	f000 80a1 	beq.w	80097ca <_dtoa_r+0x442>
 8009688:	2f00      	cmp	r7, #0
 800968a:	dd33      	ble.n	80096f4 <_dtoa_r+0x36c>
 800968c:	4b86      	ldr	r3, [pc, #536]	@ (80098a8 <_dtoa_r+0x520>)
 800968e:	f007 020f 	and.w	r2, r7, #15
 8009692:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009696:	05f8      	lsls	r0, r7, #23
 8009698:	e9d3 3400 	ldrd	r3, r4, [r3]
 800969c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80096a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80096a4:	d516      	bpl.n	80096d4 <_dtoa_r+0x34c>
 80096a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80096aa:	4b80      	ldr	r3, [pc, #512]	@ (80098ac <_dtoa_r+0x524>)
 80096ac:	2603      	movs	r6, #3
 80096ae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80096b2:	f7f7 f8ef 	bl	8000894 <__aeabi_ddiv>
 80096b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096ba:	f004 040f 	and.w	r4, r4, #15
 80096be:	4d7b      	ldr	r5, [pc, #492]	@ (80098ac <_dtoa_r+0x524>)
 80096c0:	b954      	cbnz	r4, 80096d8 <_dtoa_r+0x350>
 80096c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096ca:	f7f7 f8e3 	bl	8000894 <__aeabi_ddiv>
 80096ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096d2:	e028      	b.n	8009726 <_dtoa_r+0x39e>
 80096d4:	2602      	movs	r6, #2
 80096d6:	e7f2      	b.n	80096be <_dtoa_r+0x336>
 80096d8:	07e1      	lsls	r1, r4, #31
 80096da:	d508      	bpl.n	80096ee <_dtoa_r+0x366>
 80096dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80096e4:	f7f6 ffac 	bl	8000640 <__aeabi_dmul>
 80096e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096ec:	3601      	adds	r6, #1
 80096ee:	1064      	asrs	r4, r4, #1
 80096f0:	3508      	adds	r5, #8
 80096f2:	e7e5      	b.n	80096c0 <_dtoa_r+0x338>
 80096f4:	f000 80d2 	beq.w	800989c <_dtoa_r+0x514>
 80096f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80096fc:	427c      	negs	r4, r7
 80096fe:	4b6a      	ldr	r3, [pc, #424]	@ (80098a8 <_dtoa_r+0x520>)
 8009700:	f004 020f 	and.w	r2, r4, #15
 8009704:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970c:	f7f6 ff98 	bl	8000640 <__aeabi_dmul>
 8009710:	2602      	movs	r6, #2
 8009712:	2300      	movs	r3, #0
 8009714:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009718:	4d64      	ldr	r5, [pc, #400]	@ (80098ac <_dtoa_r+0x524>)
 800971a:	1124      	asrs	r4, r4, #4
 800971c:	2c00      	cmp	r4, #0
 800971e:	f040 80b2 	bne.w	8009886 <_dtoa_r+0x4fe>
 8009722:	2b00      	cmp	r3, #0
 8009724:	d1d3      	bne.n	80096ce <_dtoa_r+0x346>
 8009726:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800972a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800972c:	2b00      	cmp	r3, #0
 800972e:	f000 80b7 	beq.w	80098a0 <_dtoa_r+0x518>
 8009732:	2200      	movs	r2, #0
 8009734:	4620      	mov	r0, r4
 8009736:	4629      	mov	r1, r5
 8009738:	4b5d      	ldr	r3, [pc, #372]	@ (80098b0 <_dtoa_r+0x528>)
 800973a:	f7f7 f9f3 	bl	8000b24 <__aeabi_dcmplt>
 800973e:	2800      	cmp	r0, #0
 8009740:	f000 80ae 	beq.w	80098a0 <_dtoa_r+0x518>
 8009744:	9b07      	ldr	r3, [sp, #28]
 8009746:	2b00      	cmp	r3, #0
 8009748:	f000 80aa 	beq.w	80098a0 <_dtoa_r+0x518>
 800974c:	9b08      	ldr	r3, [sp, #32]
 800974e:	2b00      	cmp	r3, #0
 8009750:	dd37      	ble.n	80097c2 <_dtoa_r+0x43a>
 8009752:	1e7b      	subs	r3, r7, #1
 8009754:	4620      	mov	r0, r4
 8009756:	9304      	str	r3, [sp, #16]
 8009758:	2200      	movs	r2, #0
 800975a:	4629      	mov	r1, r5
 800975c:	4b55      	ldr	r3, [pc, #340]	@ (80098b4 <_dtoa_r+0x52c>)
 800975e:	f7f6 ff6f 	bl	8000640 <__aeabi_dmul>
 8009762:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009766:	9c08      	ldr	r4, [sp, #32]
 8009768:	3601      	adds	r6, #1
 800976a:	4630      	mov	r0, r6
 800976c:	f7f6 fefe 	bl	800056c <__aeabi_i2d>
 8009770:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009774:	f7f6 ff64 	bl	8000640 <__aeabi_dmul>
 8009778:	2200      	movs	r2, #0
 800977a:	4b4f      	ldr	r3, [pc, #316]	@ (80098b8 <_dtoa_r+0x530>)
 800977c:	f7f6 fdaa 	bl	80002d4 <__adddf3>
 8009780:	4605      	mov	r5, r0
 8009782:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009786:	2c00      	cmp	r4, #0
 8009788:	f040 809a 	bne.w	80098c0 <_dtoa_r+0x538>
 800978c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009790:	2200      	movs	r2, #0
 8009792:	4b4a      	ldr	r3, [pc, #296]	@ (80098bc <_dtoa_r+0x534>)
 8009794:	f7f6 fd9c 	bl	80002d0 <__aeabi_dsub>
 8009798:	4602      	mov	r2, r0
 800979a:	460b      	mov	r3, r1
 800979c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80097a0:	462a      	mov	r2, r5
 80097a2:	4633      	mov	r3, r6
 80097a4:	f7f7 f9dc 	bl	8000b60 <__aeabi_dcmpgt>
 80097a8:	2800      	cmp	r0, #0
 80097aa:	f040 828e 	bne.w	8009cca <_dtoa_r+0x942>
 80097ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097b2:	462a      	mov	r2, r5
 80097b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80097b8:	f7f7 f9b4 	bl	8000b24 <__aeabi_dcmplt>
 80097bc:	2800      	cmp	r0, #0
 80097be:	f040 8127 	bne.w	8009a10 <_dtoa_r+0x688>
 80097c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80097c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80097ca:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	f2c0 8163 	blt.w	8009a98 <_dtoa_r+0x710>
 80097d2:	2f0e      	cmp	r7, #14
 80097d4:	f300 8160 	bgt.w	8009a98 <_dtoa_r+0x710>
 80097d8:	4b33      	ldr	r3, [pc, #204]	@ (80098a8 <_dtoa_r+0x520>)
 80097da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80097de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80097e2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80097e6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	da03      	bge.n	80097f4 <_dtoa_r+0x46c>
 80097ec:	9b07      	ldr	r3, [sp, #28]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	f340 8100 	ble.w	80099f4 <_dtoa_r+0x66c>
 80097f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80097f8:	4656      	mov	r6, sl
 80097fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097fe:	4620      	mov	r0, r4
 8009800:	4629      	mov	r1, r5
 8009802:	f7f7 f847 	bl	8000894 <__aeabi_ddiv>
 8009806:	f7f7 f9cb 	bl	8000ba0 <__aeabi_d2iz>
 800980a:	4680      	mov	r8, r0
 800980c:	f7f6 feae 	bl	800056c <__aeabi_i2d>
 8009810:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009814:	f7f6 ff14 	bl	8000640 <__aeabi_dmul>
 8009818:	4602      	mov	r2, r0
 800981a:	460b      	mov	r3, r1
 800981c:	4620      	mov	r0, r4
 800981e:	4629      	mov	r1, r5
 8009820:	f7f6 fd56 	bl	80002d0 <__aeabi_dsub>
 8009824:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009828:	9d07      	ldr	r5, [sp, #28]
 800982a:	f806 4b01 	strb.w	r4, [r6], #1
 800982e:	eba6 040a 	sub.w	r4, r6, sl
 8009832:	42a5      	cmp	r5, r4
 8009834:	4602      	mov	r2, r0
 8009836:	460b      	mov	r3, r1
 8009838:	f040 8116 	bne.w	8009a68 <_dtoa_r+0x6e0>
 800983c:	f7f6 fd4a 	bl	80002d4 <__adddf3>
 8009840:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009844:	4604      	mov	r4, r0
 8009846:	460d      	mov	r5, r1
 8009848:	f7f7 f98a 	bl	8000b60 <__aeabi_dcmpgt>
 800984c:	2800      	cmp	r0, #0
 800984e:	f040 80f8 	bne.w	8009a42 <_dtoa_r+0x6ba>
 8009852:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009856:	4620      	mov	r0, r4
 8009858:	4629      	mov	r1, r5
 800985a:	f7f7 f959 	bl	8000b10 <__aeabi_dcmpeq>
 800985e:	b118      	cbz	r0, 8009868 <_dtoa_r+0x4e0>
 8009860:	f018 0f01 	tst.w	r8, #1
 8009864:	f040 80ed 	bne.w	8009a42 <_dtoa_r+0x6ba>
 8009868:	4649      	mov	r1, r9
 800986a:	4658      	mov	r0, fp
 800986c:	f000 fbdc 	bl	800a028 <_Bfree>
 8009870:	2300      	movs	r3, #0
 8009872:	7033      	strb	r3, [r6, #0]
 8009874:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009876:	3701      	adds	r7, #1
 8009878:	601f      	str	r7, [r3, #0]
 800987a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800987c:	2b00      	cmp	r3, #0
 800987e:	f000 8320 	beq.w	8009ec2 <_dtoa_r+0xb3a>
 8009882:	601e      	str	r6, [r3, #0]
 8009884:	e31d      	b.n	8009ec2 <_dtoa_r+0xb3a>
 8009886:	07e2      	lsls	r2, r4, #31
 8009888:	d505      	bpl.n	8009896 <_dtoa_r+0x50e>
 800988a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800988e:	f7f6 fed7 	bl	8000640 <__aeabi_dmul>
 8009892:	2301      	movs	r3, #1
 8009894:	3601      	adds	r6, #1
 8009896:	1064      	asrs	r4, r4, #1
 8009898:	3508      	adds	r5, #8
 800989a:	e73f      	b.n	800971c <_dtoa_r+0x394>
 800989c:	2602      	movs	r6, #2
 800989e:	e742      	b.n	8009726 <_dtoa_r+0x39e>
 80098a0:	9c07      	ldr	r4, [sp, #28]
 80098a2:	9704      	str	r7, [sp, #16]
 80098a4:	e761      	b.n	800976a <_dtoa_r+0x3e2>
 80098a6:	bf00      	nop
 80098a8:	0800ba48 	.word	0x0800ba48
 80098ac:	0800ba20 	.word	0x0800ba20
 80098b0:	3ff00000 	.word	0x3ff00000
 80098b4:	40240000 	.word	0x40240000
 80098b8:	401c0000 	.word	0x401c0000
 80098bc:	40140000 	.word	0x40140000
 80098c0:	4b70      	ldr	r3, [pc, #448]	@ (8009a84 <_dtoa_r+0x6fc>)
 80098c2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80098c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80098c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80098cc:	4454      	add	r4, sl
 80098ce:	2900      	cmp	r1, #0
 80098d0:	d045      	beq.n	800995e <_dtoa_r+0x5d6>
 80098d2:	2000      	movs	r0, #0
 80098d4:	496c      	ldr	r1, [pc, #432]	@ (8009a88 <_dtoa_r+0x700>)
 80098d6:	f7f6 ffdd 	bl	8000894 <__aeabi_ddiv>
 80098da:	4633      	mov	r3, r6
 80098dc:	462a      	mov	r2, r5
 80098de:	f7f6 fcf7 	bl	80002d0 <__aeabi_dsub>
 80098e2:	4656      	mov	r6, sl
 80098e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80098e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098ec:	f7f7 f958 	bl	8000ba0 <__aeabi_d2iz>
 80098f0:	4605      	mov	r5, r0
 80098f2:	f7f6 fe3b 	bl	800056c <__aeabi_i2d>
 80098f6:	4602      	mov	r2, r0
 80098f8:	460b      	mov	r3, r1
 80098fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098fe:	f7f6 fce7 	bl	80002d0 <__aeabi_dsub>
 8009902:	4602      	mov	r2, r0
 8009904:	460b      	mov	r3, r1
 8009906:	3530      	adds	r5, #48	@ 0x30
 8009908:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800990c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009910:	f806 5b01 	strb.w	r5, [r6], #1
 8009914:	f7f7 f906 	bl	8000b24 <__aeabi_dcmplt>
 8009918:	2800      	cmp	r0, #0
 800991a:	d163      	bne.n	80099e4 <_dtoa_r+0x65c>
 800991c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009920:	2000      	movs	r0, #0
 8009922:	495a      	ldr	r1, [pc, #360]	@ (8009a8c <_dtoa_r+0x704>)
 8009924:	f7f6 fcd4 	bl	80002d0 <__aeabi_dsub>
 8009928:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800992c:	f7f7 f8fa 	bl	8000b24 <__aeabi_dcmplt>
 8009930:	2800      	cmp	r0, #0
 8009932:	f040 8087 	bne.w	8009a44 <_dtoa_r+0x6bc>
 8009936:	42a6      	cmp	r6, r4
 8009938:	f43f af43 	beq.w	80097c2 <_dtoa_r+0x43a>
 800993c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009940:	2200      	movs	r2, #0
 8009942:	4b53      	ldr	r3, [pc, #332]	@ (8009a90 <_dtoa_r+0x708>)
 8009944:	f7f6 fe7c 	bl	8000640 <__aeabi_dmul>
 8009948:	2200      	movs	r2, #0
 800994a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800994e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009952:	4b4f      	ldr	r3, [pc, #316]	@ (8009a90 <_dtoa_r+0x708>)
 8009954:	f7f6 fe74 	bl	8000640 <__aeabi_dmul>
 8009958:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800995c:	e7c4      	b.n	80098e8 <_dtoa_r+0x560>
 800995e:	4631      	mov	r1, r6
 8009960:	4628      	mov	r0, r5
 8009962:	f7f6 fe6d 	bl	8000640 <__aeabi_dmul>
 8009966:	4656      	mov	r6, sl
 8009968:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800996c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800996e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009972:	f7f7 f915 	bl	8000ba0 <__aeabi_d2iz>
 8009976:	4605      	mov	r5, r0
 8009978:	f7f6 fdf8 	bl	800056c <__aeabi_i2d>
 800997c:	4602      	mov	r2, r0
 800997e:	460b      	mov	r3, r1
 8009980:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009984:	f7f6 fca4 	bl	80002d0 <__aeabi_dsub>
 8009988:	4602      	mov	r2, r0
 800998a:	460b      	mov	r3, r1
 800998c:	3530      	adds	r5, #48	@ 0x30
 800998e:	f806 5b01 	strb.w	r5, [r6], #1
 8009992:	42a6      	cmp	r6, r4
 8009994:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009998:	f04f 0200 	mov.w	r2, #0
 800999c:	d124      	bne.n	80099e8 <_dtoa_r+0x660>
 800999e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80099a2:	4b39      	ldr	r3, [pc, #228]	@ (8009a88 <_dtoa_r+0x700>)
 80099a4:	f7f6 fc96 	bl	80002d4 <__adddf3>
 80099a8:	4602      	mov	r2, r0
 80099aa:	460b      	mov	r3, r1
 80099ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099b0:	f7f7 f8d6 	bl	8000b60 <__aeabi_dcmpgt>
 80099b4:	2800      	cmp	r0, #0
 80099b6:	d145      	bne.n	8009a44 <_dtoa_r+0x6bc>
 80099b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80099bc:	2000      	movs	r0, #0
 80099be:	4932      	ldr	r1, [pc, #200]	@ (8009a88 <_dtoa_r+0x700>)
 80099c0:	f7f6 fc86 	bl	80002d0 <__aeabi_dsub>
 80099c4:	4602      	mov	r2, r0
 80099c6:	460b      	mov	r3, r1
 80099c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099cc:	f7f7 f8aa 	bl	8000b24 <__aeabi_dcmplt>
 80099d0:	2800      	cmp	r0, #0
 80099d2:	f43f aef6 	beq.w	80097c2 <_dtoa_r+0x43a>
 80099d6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80099d8:	1e73      	subs	r3, r6, #1
 80099da:	9313      	str	r3, [sp, #76]	@ 0x4c
 80099dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80099e0:	2b30      	cmp	r3, #48	@ 0x30
 80099e2:	d0f8      	beq.n	80099d6 <_dtoa_r+0x64e>
 80099e4:	9f04      	ldr	r7, [sp, #16]
 80099e6:	e73f      	b.n	8009868 <_dtoa_r+0x4e0>
 80099e8:	4b29      	ldr	r3, [pc, #164]	@ (8009a90 <_dtoa_r+0x708>)
 80099ea:	f7f6 fe29 	bl	8000640 <__aeabi_dmul>
 80099ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099f2:	e7bc      	b.n	800996e <_dtoa_r+0x5e6>
 80099f4:	d10c      	bne.n	8009a10 <_dtoa_r+0x688>
 80099f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099fa:	2200      	movs	r2, #0
 80099fc:	4b25      	ldr	r3, [pc, #148]	@ (8009a94 <_dtoa_r+0x70c>)
 80099fe:	f7f6 fe1f 	bl	8000640 <__aeabi_dmul>
 8009a02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a06:	f7f7 f8a1 	bl	8000b4c <__aeabi_dcmpge>
 8009a0a:	2800      	cmp	r0, #0
 8009a0c:	f000 815b 	beq.w	8009cc6 <_dtoa_r+0x93e>
 8009a10:	2400      	movs	r4, #0
 8009a12:	4625      	mov	r5, r4
 8009a14:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009a16:	4656      	mov	r6, sl
 8009a18:	43db      	mvns	r3, r3
 8009a1a:	9304      	str	r3, [sp, #16]
 8009a1c:	2700      	movs	r7, #0
 8009a1e:	4621      	mov	r1, r4
 8009a20:	4658      	mov	r0, fp
 8009a22:	f000 fb01 	bl	800a028 <_Bfree>
 8009a26:	2d00      	cmp	r5, #0
 8009a28:	d0dc      	beq.n	80099e4 <_dtoa_r+0x65c>
 8009a2a:	b12f      	cbz	r7, 8009a38 <_dtoa_r+0x6b0>
 8009a2c:	42af      	cmp	r7, r5
 8009a2e:	d003      	beq.n	8009a38 <_dtoa_r+0x6b0>
 8009a30:	4639      	mov	r1, r7
 8009a32:	4658      	mov	r0, fp
 8009a34:	f000 faf8 	bl	800a028 <_Bfree>
 8009a38:	4629      	mov	r1, r5
 8009a3a:	4658      	mov	r0, fp
 8009a3c:	f000 faf4 	bl	800a028 <_Bfree>
 8009a40:	e7d0      	b.n	80099e4 <_dtoa_r+0x65c>
 8009a42:	9704      	str	r7, [sp, #16]
 8009a44:	4633      	mov	r3, r6
 8009a46:	461e      	mov	r6, r3
 8009a48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a4c:	2a39      	cmp	r2, #57	@ 0x39
 8009a4e:	d107      	bne.n	8009a60 <_dtoa_r+0x6d8>
 8009a50:	459a      	cmp	sl, r3
 8009a52:	d1f8      	bne.n	8009a46 <_dtoa_r+0x6be>
 8009a54:	9a04      	ldr	r2, [sp, #16]
 8009a56:	3201      	adds	r2, #1
 8009a58:	9204      	str	r2, [sp, #16]
 8009a5a:	2230      	movs	r2, #48	@ 0x30
 8009a5c:	f88a 2000 	strb.w	r2, [sl]
 8009a60:	781a      	ldrb	r2, [r3, #0]
 8009a62:	3201      	adds	r2, #1
 8009a64:	701a      	strb	r2, [r3, #0]
 8009a66:	e7bd      	b.n	80099e4 <_dtoa_r+0x65c>
 8009a68:	2200      	movs	r2, #0
 8009a6a:	4b09      	ldr	r3, [pc, #36]	@ (8009a90 <_dtoa_r+0x708>)
 8009a6c:	f7f6 fde8 	bl	8000640 <__aeabi_dmul>
 8009a70:	2200      	movs	r2, #0
 8009a72:	2300      	movs	r3, #0
 8009a74:	4604      	mov	r4, r0
 8009a76:	460d      	mov	r5, r1
 8009a78:	f7f7 f84a 	bl	8000b10 <__aeabi_dcmpeq>
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	f43f aebc 	beq.w	80097fa <_dtoa_r+0x472>
 8009a82:	e6f1      	b.n	8009868 <_dtoa_r+0x4e0>
 8009a84:	0800ba48 	.word	0x0800ba48
 8009a88:	3fe00000 	.word	0x3fe00000
 8009a8c:	3ff00000 	.word	0x3ff00000
 8009a90:	40240000 	.word	0x40240000
 8009a94:	40140000 	.word	0x40140000
 8009a98:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009a9a:	2a00      	cmp	r2, #0
 8009a9c:	f000 80db 	beq.w	8009c56 <_dtoa_r+0x8ce>
 8009aa0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009aa2:	2a01      	cmp	r2, #1
 8009aa4:	f300 80bf 	bgt.w	8009c26 <_dtoa_r+0x89e>
 8009aa8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009aaa:	2a00      	cmp	r2, #0
 8009aac:	f000 80b7 	beq.w	8009c1e <_dtoa_r+0x896>
 8009ab0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009ab4:	4646      	mov	r6, r8
 8009ab6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009ab8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009aba:	2101      	movs	r1, #1
 8009abc:	441a      	add	r2, r3
 8009abe:	4658      	mov	r0, fp
 8009ac0:	4498      	add	r8, r3
 8009ac2:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ac4:	f000 fb64 	bl	800a190 <__i2b>
 8009ac8:	4605      	mov	r5, r0
 8009aca:	b15e      	cbz	r6, 8009ae4 <_dtoa_r+0x75c>
 8009acc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	dd08      	ble.n	8009ae4 <_dtoa_r+0x75c>
 8009ad2:	42b3      	cmp	r3, r6
 8009ad4:	bfa8      	it	ge
 8009ad6:	4633      	movge	r3, r6
 8009ad8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ada:	eba8 0803 	sub.w	r8, r8, r3
 8009ade:	1af6      	subs	r6, r6, r3
 8009ae0:	1ad3      	subs	r3, r2, r3
 8009ae2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ae4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ae6:	b1f3      	cbz	r3, 8009b26 <_dtoa_r+0x79e>
 8009ae8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	f000 80b7 	beq.w	8009c5e <_dtoa_r+0x8d6>
 8009af0:	b18c      	cbz	r4, 8009b16 <_dtoa_r+0x78e>
 8009af2:	4629      	mov	r1, r5
 8009af4:	4622      	mov	r2, r4
 8009af6:	4658      	mov	r0, fp
 8009af8:	f000 fc08 	bl	800a30c <__pow5mult>
 8009afc:	464a      	mov	r2, r9
 8009afe:	4601      	mov	r1, r0
 8009b00:	4605      	mov	r5, r0
 8009b02:	4658      	mov	r0, fp
 8009b04:	f000 fb5a 	bl	800a1bc <__multiply>
 8009b08:	4649      	mov	r1, r9
 8009b0a:	9004      	str	r0, [sp, #16]
 8009b0c:	4658      	mov	r0, fp
 8009b0e:	f000 fa8b 	bl	800a028 <_Bfree>
 8009b12:	9b04      	ldr	r3, [sp, #16]
 8009b14:	4699      	mov	r9, r3
 8009b16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b18:	1b1a      	subs	r2, r3, r4
 8009b1a:	d004      	beq.n	8009b26 <_dtoa_r+0x79e>
 8009b1c:	4649      	mov	r1, r9
 8009b1e:	4658      	mov	r0, fp
 8009b20:	f000 fbf4 	bl	800a30c <__pow5mult>
 8009b24:	4681      	mov	r9, r0
 8009b26:	2101      	movs	r1, #1
 8009b28:	4658      	mov	r0, fp
 8009b2a:	f000 fb31 	bl	800a190 <__i2b>
 8009b2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b30:	4604      	mov	r4, r0
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	f000 81c9 	beq.w	8009eca <_dtoa_r+0xb42>
 8009b38:	461a      	mov	r2, r3
 8009b3a:	4601      	mov	r1, r0
 8009b3c:	4658      	mov	r0, fp
 8009b3e:	f000 fbe5 	bl	800a30c <__pow5mult>
 8009b42:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009b44:	4604      	mov	r4, r0
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	f300 808f 	bgt.w	8009c6a <_dtoa_r+0x8e2>
 8009b4c:	9b02      	ldr	r3, [sp, #8]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	f040 8087 	bne.w	8009c62 <_dtoa_r+0x8da>
 8009b54:	9b03      	ldr	r3, [sp, #12]
 8009b56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	f040 8083 	bne.w	8009c66 <_dtoa_r+0x8de>
 8009b60:	9b03      	ldr	r3, [sp, #12]
 8009b62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009b66:	0d1b      	lsrs	r3, r3, #20
 8009b68:	051b      	lsls	r3, r3, #20
 8009b6a:	b12b      	cbz	r3, 8009b78 <_dtoa_r+0x7f0>
 8009b6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b6e:	f108 0801 	add.w	r8, r8, #1
 8009b72:	3301      	adds	r3, #1
 8009b74:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b76:	2301      	movs	r3, #1
 8009b78:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	f000 81aa 	beq.w	8009ed6 <_dtoa_r+0xb4e>
 8009b82:	6923      	ldr	r3, [r4, #16]
 8009b84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b88:	6918      	ldr	r0, [r3, #16]
 8009b8a:	f000 fab5 	bl	800a0f8 <__hi0bits>
 8009b8e:	f1c0 0020 	rsb	r0, r0, #32
 8009b92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b94:	4418      	add	r0, r3
 8009b96:	f010 001f 	ands.w	r0, r0, #31
 8009b9a:	d071      	beq.n	8009c80 <_dtoa_r+0x8f8>
 8009b9c:	f1c0 0320 	rsb	r3, r0, #32
 8009ba0:	2b04      	cmp	r3, #4
 8009ba2:	dd65      	ble.n	8009c70 <_dtoa_r+0x8e8>
 8009ba4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ba6:	f1c0 001c 	rsb	r0, r0, #28
 8009baa:	4403      	add	r3, r0
 8009bac:	4480      	add	r8, r0
 8009bae:	4406      	add	r6, r0
 8009bb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bb2:	f1b8 0f00 	cmp.w	r8, #0
 8009bb6:	dd05      	ble.n	8009bc4 <_dtoa_r+0x83c>
 8009bb8:	4649      	mov	r1, r9
 8009bba:	4642      	mov	r2, r8
 8009bbc:	4658      	mov	r0, fp
 8009bbe:	f000 fbff 	bl	800a3c0 <__lshift>
 8009bc2:	4681      	mov	r9, r0
 8009bc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	dd05      	ble.n	8009bd6 <_dtoa_r+0x84e>
 8009bca:	4621      	mov	r1, r4
 8009bcc:	461a      	mov	r2, r3
 8009bce:	4658      	mov	r0, fp
 8009bd0:	f000 fbf6 	bl	800a3c0 <__lshift>
 8009bd4:	4604      	mov	r4, r0
 8009bd6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d053      	beq.n	8009c84 <_dtoa_r+0x8fc>
 8009bdc:	4621      	mov	r1, r4
 8009bde:	4648      	mov	r0, r9
 8009be0:	f000 fc5a 	bl	800a498 <__mcmp>
 8009be4:	2800      	cmp	r0, #0
 8009be6:	da4d      	bge.n	8009c84 <_dtoa_r+0x8fc>
 8009be8:	1e7b      	subs	r3, r7, #1
 8009bea:	4649      	mov	r1, r9
 8009bec:	9304      	str	r3, [sp, #16]
 8009bee:	220a      	movs	r2, #10
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	4658      	mov	r0, fp
 8009bf4:	f000 fa3a 	bl	800a06c <__multadd>
 8009bf8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009bfa:	4681      	mov	r9, r0
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	f000 816c 	beq.w	8009eda <_dtoa_r+0xb52>
 8009c02:	2300      	movs	r3, #0
 8009c04:	4629      	mov	r1, r5
 8009c06:	220a      	movs	r2, #10
 8009c08:	4658      	mov	r0, fp
 8009c0a:	f000 fa2f 	bl	800a06c <__multadd>
 8009c0e:	9b08      	ldr	r3, [sp, #32]
 8009c10:	4605      	mov	r5, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	dc61      	bgt.n	8009cda <_dtoa_r+0x952>
 8009c16:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009c18:	2b02      	cmp	r3, #2
 8009c1a:	dc3b      	bgt.n	8009c94 <_dtoa_r+0x90c>
 8009c1c:	e05d      	b.n	8009cda <_dtoa_r+0x952>
 8009c1e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009c20:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009c24:	e746      	b.n	8009ab4 <_dtoa_r+0x72c>
 8009c26:	9b07      	ldr	r3, [sp, #28]
 8009c28:	1e5c      	subs	r4, r3, #1
 8009c2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c2c:	42a3      	cmp	r3, r4
 8009c2e:	bfbf      	itttt	lt
 8009c30:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009c32:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8009c34:	1ae3      	sublt	r3, r4, r3
 8009c36:	18d2      	addlt	r2, r2, r3
 8009c38:	bfa8      	it	ge
 8009c3a:	1b1c      	subge	r4, r3, r4
 8009c3c:	9b07      	ldr	r3, [sp, #28]
 8009c3e:	bfbe      	ittt	lt
 8009c40:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009c42:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8009c44:	2400      	movlt	r4, #0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	bfb5      	itete	lt
 8009c4a:	eba8 0603 	sublt.w	r6, r8, r3
 8009c4e:	4646      	movge	r6, r8
 8009c50:	2300      	movlt	r3, #0
 8009c52:	9b07      	ldrge	r3, [sp, #28]
 8009c54:	e730      	b.n	8009ab8 <_dtoa_r+0x730>
 8009c56:	4646      	mov	r6, r8
 8009c58:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009c5a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009c5c:	e735      	b.n	8009aca <_dtoa_r+0x742>
 8009c5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009c60:	e75c      	b.n	8009b1c <_dtoa_r+0x794>
 8009c62:	2300      	movs	r3, #0
 8009c64:	e788      	b.n	8009b78 <_dtoa_r+0x7f0>
 8009c66:	9b02      	ldr	r3, [sp, #8]
 8009c68:	e786      	b.n	8009b78 <_dtoa_r+0x7f0>
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c6e:	e788      	b.n	8009b82 <_dtoa_r+0x7fa>
 8009c70:	d09f      	beq.n	8009bb2 <_dtoa_r+0x82a>
 8009c72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c74:	331c      	adds	r3, #28
 8009c76:	441a      	add	r2, r3
 8009c78:	4498      	add	r8, r3
 8009c7a:	441e      	add	r6, r3
 8009c7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c7e:	e798      	b.n	8009bb2 <_dtoa_r+0x82a>
 8009c80:	4603      	mov	r3, r0
 8009c82:	e7f6      	b.n	8009c72 <_dtoa_r+0x8ea>
 8009c84:	9b07      	ldr	r3, [sp, #28]
 8009c86:	9704      	str	r7, [sp, #16]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	dc20      	bgt.n	8009cce <_dtoa_r+0x946>
 8009c8c:	9308      	str	r3, [sp, #32]
 8009c8e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009c90:	2b02      	cmp	r3, #2
 8009c92:	dd1e      	ble.n	8009cd2 <_dtoa_r+0x94a>
 8009c94:	9b08      	ldr	r3, [sp, #32]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	f47f aebc 	bne.w	8009a14 <_dtoa_r+0x68c>
 8009c9c:	4621      	mov	r1, r4
 8009c9e:	2205      	movs	r2, #5
 8009ca0:	4658      	mov	r0, fp
 8009ca2:	f000 f9e3 	bl	800a06c <__multadd>
 8009ca6:	4601      	mov	r1, r0
 8009ca8:	4604      	mov	r4, r0
 8009caa:	4648      	mov	r0, r9
 8009cac:	f000 fbf4 	bl	800a498 <__mcmp>
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	f77f aeaf 	ble.w	8009a14 <_dtoa_r+0x68c>
 8009cb6:	2331      	movs	r3, #49	@ 0x31
 8009cb8:	4656      	mov	r6, sl
 8009cba:	f806 3b01 	strb.w	r3, [r6], #1
 8009cbe:	9b04      	ldr	r3, [sp, #16]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	9304      	str	r3, [sp, #16]
 8009cc4:	e6aa      	b.n	8009a1c <_dtoa_r+0x694>
 8009cc6:	9c07      	ldr	r4, [sp, #28]
 8009cc8:	9704      	str	r7, [sp, #16]
 8009cca:	4625      	mov	r5, r4
 8009ccc:	e7f3      	b.n	8009cb6 <_dtoa_r+0x92e>
 8009cce:	9b07      	ldr	r3, [sp, #28]
 8009cd0:	9308      	str	r3, [sp, #32]
 8009cd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	f000 8104 	beq.w	8009ee2 <_dtoa_r+0xb5a>
 8009cda:	2e00      	cmp	r6, #0
 8009cdc:	dd05      	ble.n	8009cea <_dtoa_r+0x962>
 8009cde:	4629      	mov	r1, r5
 8009ce0:	4632      	mov	r2, r6
 8009ce2:	4658      	mov	r0, fp
 8009ce4:	f000 fb6c 	bl	800a3c0 <__lshift>
 8009ce8:	4605      	mov	r5, r0
 8009cea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d05a      	beq.n	8009da6 <_dtoa_r+0xa1e>
 8009cf0:	4658      	mov	r0, fp
 8009cf2:	6869      	ldr	r1, [r5, #4]
 8009cf4:	f000 f958 	bl	8009fa8 <_Balloc>
 8009cf8:	4606      	mov	r6, r0
 8009cfa:	b928      	cbnz	r0, 8009d08 <_dtoa_r+0x980>
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009d02:	4b83      	ldr	r3, [pc, #524]	@ (8009f10 <_dtoa_r+0xb88>)
 8009d04:	f7ff bb54 	b.w	80093b0 <_dtoa_r+0x28>
 8009d08:	692a      	ldr	r2, [r5, #16]
 8009d0a:	f105 010c 	add.w	r1, r5, #12
 8009d0e:	3202      	adds	r2, #2
 8009d10:	0092      	lsls	r2, r2, #2
 8009d12:	300c      	adds	r0, #12
 8009d14:	f000 fee2 	bl	800aadc <memcpy>
 8009d18:	2201      	movs	r2, #1
 8009d1a:	4631      	mov	r1, r6
 8009d1c:	4658      	mov	r0, fp
 8009d1e:	f000 fb4f 	bl	800a3c0 <__lshift>
 8009d22:	462f      	mov	r7, r5
 8009d24:	4605      	mov	r5, r0
 8009d26:	f10a 0301 	add.w	r3, sl, #1
 8009d2a:	9307      	str	r3, [sp, #28]
 8009d2c:	9b08      	ldr	r3, [sp, #32]
 8009d2e:	4453      	add	r3, sl
 8009d30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d32:	9b02      	ldr	r3, [sp, #8]
 8009d34:	f003 0301 	and.w	r3, r3, #1
 8009d38:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d3a:	9b07      	ldr	r3, [sp, #28]
 8009d3c:	4621      	mov	r1, r4
 8009d3e:	3b01      	subs	r3, #1
 8009d40:	4648      	mov	r0, r9
 8009d42:	9302      	str	r3, [sp, #8]
 8009d44:	f7ff fa95 	bl	8009272 <quorem>
 8009d48:	4639      	mov	r1, r7
 8009d4a:	9008      	str	r0, [sp, #32]
 8009d4c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009d50:	4648      	mov	r0, r9
 8009d52:	f000 fba1 	bl	800a498 <__mcmp>
 8009d56:	462a      	mov	r2, r5
 8009d58:	9009      	str	r0, [sp, #36]	@ 0x24
 8009d5a:	4621      	mov	r1, r4
 8009d5c:	4658      	mov	r0, fp
 8009d5e:	f000 fbb7 	bl	800a4d0 <__mdiff>
 8009d62:	68c2      	ldr	r2, [r0, #12]
 8009d64:	4606      	mov	r6, r0
 8009d66:	bb02      	cbnz	r2, 8009daa <_dtoa_r+0xa22>
 8009d68:	4601      	mov	r1, r0
 8009d6a:	4648      	mov	r0, r9
 8009d6c:	f000 fb94 	bl	800a498 <__mcmp>
 8009d70:	4602      	mov	r2, r0
 8009d72:	4631      	mov	r1, r6
 8009d74:	4658      	mov	r0, fp
 8009d76:	920c      	str	r2, [sp, #48]	@ 0x30
 8009d78:	f000 f956 	bl	800a028 <_Bfree>
 8009d7c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009d7e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009d80:	9e07      	ldr	r6, [sp, #28]
 8009d82:	ea43 0102 	orr.w	r1, r3, r2
 8009d86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d88:	4319      	orrs	r1, r3
 8009d8a:	d110      	bne.n	8009dae <_dtoa_r+0xa26>
 8009d8c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009d90:	d029      	beq.n	8009de6 <_dtoa_r+0xa5e>
 8009d92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	dd02      	ble.n	8009d9e <_dtoa_r+0xa16>
 8009d98:	9b08      	ldr	r3, [sp, #32]
 8009d9a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009d9e:	9b02      	ldr	r3, [sp, #8]
 8009da0:	f883 8000 	strb.w	r8, [r3]
 8009da4:	e63b      	b.n	8009a1e <_dtoa_r+0x696>
 8009da6:	4628      	mov	r0, r5
 8009da8:	e7bb      	b.n	8009d22 <_dtoa_r+0x99a>
 8009daa:	2201      	movs	r2, #1
 8009dac:	e7e1      	b.n	8009d72 <_dtoa_r+0x9ea>
 8009dae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	db04      	blt.n	8009dbe <_dtoa_r+0xa36>
 8009db4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8009db6:	430b      	orrs	r3, r1
 8009db8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009dba:	430b      	orrs	r3, r1
 8009dbc:	d120      	bne.n	8009e00 <_dtoa_r+0xa78>
 8009dbe:	2a00      	cmp	r2, #0
 8009dc0:	dded      	ble.n	8009d9e <_dtoa_r+0xa16>
 8009dc2:	4649      	mov	r1, r9
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	4658      	mov	r0, fp
 8009dc8:	f000 fafa 	bl	800a3c0 <__lshift>
 8009dcc:	4621      	mov	r1, r4
 8009dce:	4681      	mov	r9, r0
 8009dd0:	f000 fb62 	bl	800a498 <__mcmp>
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	dc03      	bgt.n	8009de0 <_dtoa_r+0xa58>
 8009dd8:	d1e1      	bne.n	8009d9e <_dtoa_r+0xa16>
 8009dda:	f018 0f01 	tst.w	r8, #1
 8009dde:	d0de      	beq.n	8009d9e <_dtoa_r+0xa16>
 8009de0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009de4:	d1d8      	bne.n	8009d98 <_dtoa_r+0xa10>
 8009de6:	2339      	movs	r3, #57	@ 0x39
 8009de8:	9a02      	ldr	r2, [sp, #8]
 8009dea:	7013      	strb	r3, [r2, #0]
 8009dec:	4633      	mov	r3, r6
 8009dee:	461e      	mov	r6, r3
 8009df0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009df4:	3b01      	subs	r3, #1
 8009df6:	2a39      	cmp	r2, #57	@ 0x39
 8009df8:	d052      	beq.n	8009ea0 <_dtoa_r+0xb18>
 8009dfa:	3201      	adds	r2, #1
 8009dfc:	701a      	strb	r2, [r3, #0]
 8009dfe:	e60e      	b.n	8009a1e <_dtoa_r+0x696>
 8009e00:	2a00      	cmp	r2, #0
 8009e02:	dd07      	ble.n	8009e14 <_dtoa_r+0xa8c>
 8009e04:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009e08:	d0ed      	beq.n	8009de6 <_dtoa_r+0xa5e>
 8009e0a:	9a02      	ldr	r2, [sp, #8]
 8009e0c:	f108 0301 	add.w	r3, r8, #1
 8009e10:	7013      	strb	r3, [r2, #0]
 8009e12:	e604      	b.n	8009a1e <_dtoa_r+0x696>
 8009e14:	9b07      	ldr	r3, [sp, #28]
 8009e16:	9a07      	ldr	r2, [sp, #28]
 8009e18:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009e1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d028      	beq.n	8009e74 <_dtoa_r+0xaec>
 8009e22:	4649      	mov	r1, r9
 8009e24:	2300      	movs	r3, #0
 8009e26:	220a      	movs	r2, #10
 8009e28:	4658      	mov	r0, fp
 8009e2a:	f000 f91f 	bl	800a06c <__multadd>
 8009e2e:	42af      	cmp	r7, r5
 8009e30:	4681      	mov	r9, r0
 8009e32:	f04f 0300 	mov.w	r3, #0
 8009e36:	f04f 020a 	mov.w	r2, #10
 8009e3a:	4639      	mov	r1, r7
 8009e3c:	4658      	mov	r0, fp
 8009e3e:	d107      	bne.n	8009e50 <_dtoa_r+0xac8>
 8009e40:	f000 f914 	bl	800a06c <__multadd>
 8009e44:	4607      	mov	r7, r0
 8009e46:	4605      	mov	r5, r0
 8009e48:	9b07      	ldr	r3, [sp, #28]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	9307      	str	r3, [sp, #28]
 8009e4e:	e774      	b.n	8009d3a <_dtoa_r+0x9b2>
 8009e50:	f000 f90c 	bl	800a06c <__multadd>
 8009e54:	4629      	mov	r1, r5
 8009e56:	4607      	mov	r7, r0
 8009e58:	2300      	movs	r3, #0
 8009e5a:	220a      	movs	r2, #10
 8009e5c:	4658      	mov	r0, fp
 8009e5e:	f000 f905 	bl	800a06c <__multadd>
 8009e62:	4605      	mov	r5, r0
 8009e64:	e7f0      	b.n	8009e48 <_dtoa_r+0xac0>
 8009e66:	9b08      	ldr	r3, [sp, #32]
 8009e68:	2700      	movs	r7, #0
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	bfcc      	ite	gt
 8009e6e:	461e      	movgt	r6, r3
 8009e70:	2601      	movle	r6, #1
 8009e72:	4456      	add	r6, sl
 8009e74:	4649      	mov	r1, r9
 8009e76:	2201      	movs	r2, #1
 8009e78:	4658      	mov	r0, fp
 8009e7a:	f000 faa1 	bl	800a3c0 <__lshift>
 8009e7e:	4621      	mov	r1, r4
 8009e80:	4681      	mov	r9, r0
 8009e82:	f000 fb09 	bl	800a498 <__mcmp>
 8009e86:	2800      	cmp	r0, #0
 8009e88:	dcb0      	bgt.n	8009dec <_dtoa_r+0xa64>
 8009e8a:	d102      	bne.n	8009e92 <_dtoa_r+0xb0a>
 8009e8c:	f018 0f01 	tst.w	r8, #1
 8009e90:	d1ac      	bne.n	8009dec <_dtoa_r+0xa64>
 8009e92:	4633      	mov	r3, r6
 8009e94:	461e      	mov	r6, r3
 8009e96:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e9a:	2a30      	cmp	r2, #48	@ 0x30
 8009e9c:	d0fa      	beq.n	8009e94 <_dtoa_r+0xb0c>
 8009e9e:	e5be      	b.n	8009a1e <_dtoa_r+0x696>
 8009ea0:	459a      	cmp	sl, r3
 8009ea2:	d1a4      	bne.n	8009dee <_dtoa_r+0xa66>
 8009ea4:	9b04      	ldr	r3, [sp, #16]
 8009ea6:	3301      	adds	r3, #1
 8009ea8:	9304      	str	r3, [sp, #16]
 8009eaa:	2331      	movs	r3, #49	@ 0x31
 8009eac:	f88a 3000 	strb.w	r3, [sl]
 8009eb0:	e5b5      	b.n	8009a1e <_dtoa_r+0x696>
 8009eb2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009eb4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009f14 <_dtoa_r+0xb8c>
 8009eb8:	b11b      	cbz	r3, 8009ec2 <_dtoa_r+0xb3a>
 8009eba:	f10a 0308 	add.w	r3, sl, #8
 8009ebe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009ec0:	6013      	str	r3, [r2, #0]
 8009ec2:	4650      	mov	r0, sl
 8009ec4:	b017      	add	sp, #92	@ 0x5c
 8009ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	f77f ae3d 	ble.w	8009b4c <_dtoa_r+0x7c4>
 8009ed2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ed4:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ed6:	2001      	movs	r0, #1
 8009ed8:	e65b      	b.n	8009b92 <_dtoa_r+0x80a>
 8009eda:	9b08      	ldr	r3, [sp, #32]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	f77f aed6 	ble.w	8009c8e <_dtoa_r+0x906>
 8009ee2:	4656      	mov	r6, sl
 8009ee4:	4621      	mov	r1, r4
 8009ee6:	4648      	mov	r0, r9
 8009ee8:	f7ff f9c3 	bl	8009272 <quorem>
 8009eec:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009ef0:	9b08      	ldr	r3, [sp, #32]
 8009ef2:	f806 8b01 	strb.w	r8, [r6], #1
 8009ef6:	eba6 020a 	sub.w	r2, r6, sl
 8009efa:	4293      	cmp	r3, r2
 8009efc:	ddb3      	ble.n	8009e66 <_dtoa_r+0xade>
 8009efe:	4649      	mov	r1, r9
 8009f00:	2300      	movs	r3, #0
 8009f02:	220a      	movs	r2, #10
 8009f04:	4658      	mov	r0, fp
 8009f06:	f000 f8b1 	bl	800a06c <__multadd>
 8009f0a:	4681      	mov	r9, r0
 8009f0c:	e7ea      	b.n	8009ee4 <_dtoa_r+0xb5c>
 8009f0e:	bf00      	nop
 8009f10:	0800b9aa 	.word	0x0800b9aa
 8009f14:	0800b92e 	.word	0x0800b92e

08009f18 <_free_r>:
 8009f18:	b538      	push	{r3, r4, r5, lr}
 8009f1a:	4605      	mov	r5, r0
 8009f1c:	2900      	cmp	r1, #0
 8009f1e:	d040      	beq.n	8009fa2 <_free_r+0x8a>
 8009f20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f24:	1f0c      	subs	r4, r1, #4
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	bfb8      	it	lt
 8009f2a:	18e4      	addlt	r4, r4, r3
 8009f2c:	f7fe fb2a 	bl	8008584 <__malloc_lock>
 8009f30:	4a1c      	ldr	r2, [pc, #112]	@ (8009fa4 <_free_r+0x8c>)
 8009f32:	6813      	ldr	r3, [r2, #0]
 8009f34:	b933      	cbnz	r3, 8009f44 <_free_r+0x2c>
 8009f36:	6063      	str	r3, [r4, #4]
 8009f38:	6014      	str	r4, [r2, #0]
 8009f3a:	4628      	mov	r0, r5
 8009f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f40:	f7fe bb26 	b.w	8008590 <__malloc_unlock>
 8009f44:	42a3      	cmp	r3, r4
 8009f46:	d908      	bls.n	8009f5a <_free_r+0x42>
 8009f48:	6820      	ldr	r0, [r4, #0]
 8009f4a:	1821      	adds	r1, r4, r0
 8009f4c:	428b      	cmp	r3, r1
 8009f4e:	bf01      	itttt	eq
 8009f50:	6819      	ldreq	r1, [r3, #0]
 8009f52:	685b      	ldreq	r3, [r3, #4]
 8009f54:	1809      	addeq	r1, r1, r0
 8009f56:	6021      	streq	r1, [r4, #0]
 8009f58:	e7ed      	b.n	8009f36 <_free_r+0x1e>
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	b10b      	cbz	r3, 8009f64 <_free_r+0x4c>
 8009f60:	42a3      	cmp	r3, r4
 8009f62:	d9fa      	bls.n	8009f5a <_free_r+0x42>
 8009f64:	6811      	ldr	r1, [r2, #0]
 8009f66:	1850      	adds	r0, r2, r1
 8009f68:	42a0      	cmp	r0, r4
 8009f6a:	d10b      	bne.n	8009f84 <_free_r+0x6c>
 8009f6c:	6820      	ldr	r0, [r4, #0]
 8009f6e:	4401      	add	r1, r0
 8009f70:	1850      	adds	r0, r2, r1
 8009f72:	4283      	cmp	r3, r0
 8009f74:	6011      	str	r1, [r2, #0]
 8009f76:	d1e0      	bne.n	8009f3a <_free_r+0x22>
 8009f78:	6818      	ldr	r0, [r3, #0]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	4408      	add	r0, r1
 8009f7e:	6010      	str	r0, [r2, #0]
 8009f80:	6053      	str	r3, [r2, #4]
 8009f82:	e7da      	b.n	8009f3a <_free_r+0x22>
 8009f84:	d902      	bls.n	8009f8c <_free_r+0x74>
 8009f86:	230c      	movs	r3, #12
 8009f88:	602b      	str	r3, [r5, #0]
 8009f8a:	e7d6      	b.n	8009f3a <_free_r+0x22>
 8009f8c:	6820      	ldr	r0, [r4, #0]
 8009f8e:	1821      	adds	r1, r4, r0
 8009f90:	428b      	cmp	r3, r1
 8009f92:	bf01      	itttt	eq
 8009f94:	6819      	ldreq	r1, [r3, #0]
 8009f96:	685b      	ldreq	r3, [r3, #4]
 8009f98:	1809      	addeq	r1, r1, r0
 8009f9a:	6021      	streq	r1, [r4, #0]
 8009f9c:	6063      	str	r3, [r4, #4]
 8009f9e:	6054      	str	r4, [r2, #4]
 8009fa0:	e7cb      	b.n	8009f3a <_free_r+0x22>
 8009fa2:	bd38      	pop	{r3, r4, r5, pc}
 8009fa4:	2000040c 	.word	0x2000040c

08009fa8 <_Balloc>:
 8009fa8:	b570      	push	{r4, r5, r6, lr}
 8009faa:	69c6      	ldr	r6, [r0, #28]
 8009fac:	4604      	mov	r4, r0
 8009fae:	460d      	mov	r5, r1
 8009fb0:	b976      	cbnz	r6, 8009fd0 <_Balloc+0x28>
 8009fb2:	2010      	movs	r0, #16
 8009fb4:	f7fe fa34 	bl	8008420 <malloc>
 8009fb8:	4602      	mov	r2, r0
 8009fba:	61e0      	str	r0, [r4, #28]
 8009fbc:	b920      	cbnz	r0, 8009fc8 <_Balloc+0x20>
 8009fbe:	216b      	movs	r1, #107	@ 0x6b
 8009fc0:	4b17      	ldr	r3, [pc, #92]	@ (800a020 <_Balloc+0x78>)
 8009fc2:	4818      	ldr	r0, [pc, #96]	@ (800a024 <_Balloc+0x7c>)
 8009fc4:	f000 fd98 	bl	800aaf8 <__assert_func>
 8009fc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009fcc:	6006      	str	r6, [r0, #0]
 8009fce:	60c6      	str	r6, [r0, #12]
 8009fd0:	69e6      	ldr	r6, [r4, #28]
 8009fd2:	68f3      	ldr	r3, [r6, #12]
 8009fd4:	b183      	cbz	r3, 8009ff8 <_Balloc+0x50>
 8009fd6:	69e3      	ldr	r3, [r4, #28]
 8009fd8:	68db      	ldr	r3, [r3, #12]
 8009fda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009fde:	b9b8      	cbnz	r0, 800a010 <_Balloc+0x68>
 8009fe0:	2101      	movs	r1, #1
 8009fe2:	fa01 f605 	lsl.w	r6, r1, r5
 8009fe6:	1d72      	adds	r2, r6, #5
 8009fe8:	4620      	mov	r0, r4
 8009fea:	0092      	lsls	r2, r2, #2
 8009fec:	f000 fda2 	bl	800ab34 <_calloc_r>
 8009ff0:	b160      	cbz	r0, 800a00c <_Balloc+0x64>
 8009ff2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009ff6:	e00e      	b.n	800a016 <_Balloc+0x6e>
 8009ff8:	2221      	movs	r2, #33	@ 0x21
 8009ffa:	2104      	movs	r1, #4
 8009ffc:	4620      	mov	r0, r4
 8009ffe:	f000 fd99 	bl	800ab34 <_calloc_r>
 800a002:	69e3      	ldr	r3, [r4, #28]
 800a004:	60f0      	str	r0, [r6, #12]
 800a006:	68db      	ldr	r3, [r3, #12]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d1e4      	bne.n	8009fd6 <_Balloc+0x2e>
 800a00c:	2000      	movs	r0, #0
 800a00e:	bd70      	pop	{r4, r5, r6, pc}
 800a010:	6802      	ldr	r2, [r0, #0]
 800a012:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a016:	2300      	movs	r3, #0
 800a018:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a01c:	e7f7      	b.n	800a00e <_Balloc+0x66>
 800a01e:	bf00      	nop
 800a020:	0800b93b 	.word	0x0800b93b
 800a024:	0800b9bb 	.word	0x0800b9bb

0800a028 <_Bfree>:
 800a028:	b570      	push	{r4, r5, r6, lr}
 800a02a:	69c6      	ldr	r6, [r0, #28]
 800a02c:	4605      	mov	r5, r0
 800a02e:	460c      	mov	r4, r1
 800a030:	b976      	cbnz	r6, 800a050 <_Bfree+0x28>
 800a032:	2010      	movs	r0, #16
 800a034:	f7fe f9f4 	bl	8008420 <malloc>
 800a038:	4602      	mov	r2, r0
 800a03a:	61e8      	str	r0, [r5, #28]
 800a03c:	b920      	cbnz	r0, 800a048 <_Bfree+0x20>
 800a03e:	218f      	movs	r1, #143	@ 0x8f
 800a040:	4b08      	ldr	r3, [pc, #32]	@ (800a064 <_Bfree+0x3c>)
 800a042:	4809      	ldr	r0, [pc, #36]	@ (800a068 <_Bfree+0x40>)
 800a044:	f000 fd58 	bl	800aaf8 <__assert_func>
 800a048:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a04c:	6006      	str	r6, [r0, #0]
 800a04e:	60c6      	str	r6, [r0, #12]
 800a050:	b13c      	cbz	r4, 800a062 <_Bfree+0x3a>
 800a052:	69eb      	ldr	r3, [r5, #28]
 800a054:	6862      	ldr	r2, [r4, #4]
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a05c:	6021      	str	r1, [r4, #0]
 800a05e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a062:	bd70      	pop	{r4, r5, r6, pc}
 800a064:	0800b93b 	.word	0x0800b93b
 800a068:	0800b9bb 	.word	0x0800b9bb

0800a06c <__multadd>:
 800a06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a070:	4607      	mov	r7, r0
 800a072:	460c      	mov	r4, r1
 800a074:	461e      	mov	r6, r3
 800a076:	2000      	movs	r0, #0
 800a078:	690d      	ldr	r5, [r1, #16]
 800a07a:	f101 0c14 	add.w	ip, r1, #20
 800a07e:	f8dc 3000 	ldr.w	r3, [ip]
 800a082:	3001      	adds	r0, #1
 800a084:	b299      	uxth	r1, r3
 800a086:	fb02 6101 	mla	r1, r2, r1, r6
 800a08a:	0c1e      	lsrs	r6, r3, #16
 800a08c:	0c0b      	lsrs	r3, r1, #16
 800a08e:	fb02 3306 	mla	r3, r2, r6, r3
 800a092:	b289      	uxth	r1, r1
 800a094:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a098:	4285      	cmp	r5, r0
 800a09a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a09e:	f84c 1b04 	str.w	r1, [ip], #4
 800a0a2:	dcec      	bgt.n	800a07e <__multadd+0x12>
 800a0a4:	b30e      	cbz	r6, 800a0ea <__multadd+0x7e>
 800a0a6:	68a3      	ldr	r3, [r4, #8]
 800a0a8:	42ab      	cmp	r3, r5
 800a0aa:	dc19      	bgt.n	800a0e0 <__multadd+0x74>
 800a0ac:	6861      	ldr	r1, [r4, #4]
 800a0ae:	4638      	mov	r0, r7
 800a0b0:	3101      	adds	r1, #1
 800a0b2:	f7ff ff79 	bl	8009fa8 <_Balloc>
 800a0b6:	4680      	mov	r8, r0
 800a0b8:	b928      	cbnz	r0, 800a0c6 <__multadd+0x5a>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	21ba      	movs	r1, #186	@ 0xba
 800a0be:	4b0c      	ldr	r3, [pc, #48]	@ (800a0f0 <__multadd+0x84>)
 800a0c0:	480c      	ldr	r0, [pc, #48]	@ (800a0f4 <__multadd+0x88>)
 800a0c2:	f000 fd19 	bl	800aaf8 <__assert_func>
 800a0c6:	6922      	ldr	r2, [r4, #16]
 800a0c8:	f104 010c 	add.w	r1, r4, #12
 800a0cc:	3202      	adds	r2, #2
 800a0ce:	0092      	lsls	r2, r2, #2
 800a0d0:	300c      	adds	r0, #12
 800a0d2:	f000 fd03 	bl	800aadc <memcpy>
 800a0d6:	4621      	mov	r1, r4
 800a0d8:	4638      	mov	r0, r7
 800a0da:	f7ff ffa5 	bl	800a028 <_Bfree>
 800a0de:	4644      	mov	r4, r8
 800a0e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a0e4:	3501      	adds	r5, #1
 800a0e6:	615e      	str	r6, [r3, #20]
 800a0e8:	6125      	str	r5, [r4, #16]
 800a0ea:	4620      	mov	r0, r4
 800a0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0f0:	0800b9aa 	.word	0x0800b9aa
 800a0f4:	0800b9bb 	.word	0x0800b9bb

0800a0f8 <__hi0bits>:
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a0fe:	bf3a      	itte	cc
 800a100:	0403      	lslcc	r3, r0, #16
 800a102:	2010      	movcc	r0, #16
 800a104:	2000      	movcs	r0, #0
 800a106:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a10a:	bf3c      	itt	cc
 800a10c:	021b      	lslcc	r3, r3, #8
 800a10e:	3008      	addcc	r0, #8
 800a110:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a114:	bf3c      	itt	cc
 800a116:	011b      	lslcc	r3, r3, #4
 800a118:	3004      	addcc	r0, #4
 800a11a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a11e:	bf3c      	itt	cc
 800a120:	009b      	lslcc	r3, r3, #2
 800a122:	3002      	addcc	r0, #2
 800a124:	2b00      	cmp	r3, #0
 800a126:	db05      	blt.n	800a134 <__hi0bits+0x3c>
 800a128:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a12c:	f100 0001 	add.w	r0, r0, #1
 800a130:	bf08      	it	eq
 800a132:	2020      	moveq	r0, #32
 800a134:	4770      	bx	lr

0800a136 <__lo0bits>:
 800a136:	6803      	ldr	r3, [r0, #0]
 800a138:	4602      	mov	r2, r0
 800a13a:	f013 0007 	ands.w	r0, r3, #7
 800a13e:	d00b      	beq.n	800a158 <__lo0bits+0x22>
 800a140:	07d9      	lsls	r1, r3, #31
 800a142:	d421      	bmi.n	800a188 <__lo0bits+0x52>
 800a144:	0798      	lsls	r0, r3, #30
 800a146:	bf49      	itett	mi
 800a148:	085b      	lsrmi	r3, r3, #1
 800a14a:	089b      	lsrpl	r3, r3, #2
 800a14c:	2001      	movmi	r0, #1
 800a14e:	6013      	strmi	r3, [r2, #0]
 800a150:	bf5c      	itt	pl
 800a152:	2002      	movpl	r0, #2
 800a154:	6013      	strpl	r3, [r2, #0]
 800a156:	4770      	bx	lr
 800a158:	b299      	uxth	r1, r3
 800a15a:	b909      	cbnz	r1, 800a160 <__lo0bits+0x2a>
 800a15c:	2010      	movs	r0, #16
 800a15e:	0c1b      	lsrs	r3, r3, #16
 800a160:	b2d9      	uxtb	r1, r3
 800a162:	b909      	cbnz	r1, 800a168 <__lo0bits+0x32>
 800a164:	3008      	adds	r0, #8
 800a166:	0a1b      	lsrs	r3, r3, #8
 800a168:	0719      	lsls	r1, r3, #28
 800a16a:	bf04      	itt	eq
 800a16c:	091b      	lsreq	r3, r3, #4
 800a16e:	3004      	addeq	r0, #4
 800a170:	0799      	lsls	r1, r3, #30
 800a172:	bf04      	itt	eq
 800a174:	089b      	lsreq	r3, r3, #2
 800a176:	3002      	addeq	r0, #2
 800a178:	07d9      	lsls	r1, r3, #31
 800a17a:	d403      	bmi.n	800a184 <__lo0bits+0x4e>
 800a17c:	085b      	lsrs	r3, r3, #1
 800a17e:	f100 0001 	add.w	r0, r0, #1
 800a182:	d003      	beq.n	800a18c <__lo0bits+0x56>
 800a184:	6013      	str	r3, [r2, #0]
 800a186:	4770      	bx	lr
 800a188:	2000      	movs	r0, #0
 800a18a:	4770      	bx	lr
 800a18c:	2020      	movs	r0, #32
 800a18e:	4770      	bx	lr

0800a190 <__i2b>:
 800a190:	b510      	push	{r4, lr}
 800a192:	460c      	mov	r4, r1
 800a194:	2101      	movs	r1, #1
 800a196:	f7ff ff07 	bl	8009fa8 <_Balloc>
 800a19a:	4602      	mov	r2, r0
 800a19c:	b928      	cbnz	r0, 800a1aa <__i2b+0x1a>
 800a19e:	f240 1145 	movw	r1, #325	@ 0x145
 800a1a2:	4b04      	ldr	r3, [pc, #16]	@ (800a1b4 <__i2b+0x24>)
 800a1a4:	4804      	ldr	r0, [pc, #16]	@ (800a1b8 <__i2b+0x28>)
 800a1a6:	f000 fca7 	bl	800aaf8 <__assert_func>
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	6144      	str	r4, [r0, #20]
 800a1ae:	6103      	str	r3, [r0, #16]
 800a1b0:	bd10      	pop	{r4, pc}
 800a1b2:	bf00      	nop
 800a1b4:	0800b9aa 	.word	0x0800b9aa
 800a1b8:	0800b9bb 	.word	0x0800b9bb

0800a1bc <__multiply>:
 800a1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1c0:	4614      	mov	r4, r2
 800a1c2:	690a      	ldr	r2, [r1, #16]
 800a1c4:	6923      	ldr	r3, [r4, #16]
 800a1c6:	460f      	mov	r7, r1
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	bfa2      	ittt	ge
 800a1cc:	4623      	movge	r3, r4
 800a1ce:	460c      	movge	r4, r1
 800a1d0:	461f      	movge	r7, r3
 800a1d2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a1d6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a1da:	68a3      	ldr	r3, [r4, #8]
 800a1dc:	6861      	ldr	r1, [r4, #4]
 800a1de:	eb0a 0609 	add.w	r6, sl, r9
 800a1e2:	42b3      	cmp	r3, r6
 800a1e4:	b085      	sub	sp, #20
 800a1e6:	bfb8      	it	lt
 800a1e8:	3101      	addlt	r1, #1
 800a1ea:	f7ff fedd 	bl	8009fa8 <_Balloc>
 800a1ee:	b930      	cbnz	r0, 800a1fe <__multiply+0x42>
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a1f6:	4b43      	ldr	r3, [pc, #268]	@ (800a304 <__multiply+0x148>)
 800a1f8:	4843      	ldr	r0, [pc, #268]	@ (800a308 <__multiply+0x14c>)
 800a1fa:	f000 fc7d 	bl	800aaf8 <__assert_func>
 800a1fe:	f100 0514 	add.w	r5, r0, #20
 800a202:	462b      	mov	r3, r5
 800a204:	2200      	movs	r2, #0
 800a206:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a20a:	4543      	cmp	r3, r8
 800a20c:	d321      	bcc.n	800a252 <__multiply+0x96>
 800a20e:	f107 0114 	add.w	r1, r7, #20
 800a212:	f104 0214 	add.w	r2, r4, #20
 800a216:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a21a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a21e:	9302      	str	r3, [sp, #8]
 800a220:	1b13      	subs	r3, r2, r4
 800a222:	3b15      	subs	r3, #21
 800a224:	f023 0303 	bic.w	r3, r3, #3
 800a228:	3304      	adds	r3, #4
 800a22a:	f104 0715 	add.w	r7, r4, #21
 800a22e:	42ba      	cmp	r2, r7
 800a230:	bf38      	it	cc
 800a232:	2304      	movcc	r3, #4
 800a234:	9301      	str	r3, [sp, #4]
 800a236:	9b02      	ldr	r3, [sp, #8]
 800a238:	9103      	str	r1, [sp, #12]
 800a23a:	428b      	cmp	r3, r1
 800a23c:	d80c      	bhi.n	800a258 <__multiply+0x9c>
 800a23e:	2e00      	cmp	r6, #0
 800a240:	dd03      	ble.n	800a24a <__multiply+0x8e>
 800a242:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a246:	2b00      	cmp	r3, #0
 800a248:	d05a      	beq.n	800a300 <__multiply+0x144>
 800a24a:	6106      	str	r6, [r0, #16]
 800a24c:	b005      	add	sp, #20
 800a24e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a252:	f843 2b04 	str.w	r2, [r3], #4
 800a256:	e7d8      	b.n	800a20a <__multiply+0x4e>
 800a258:	f8b1 a000 	ldrh.w	sl, [r1]
 800a25c:	f1ba 0f00 	cmp.w	sl, #0
 800a260:	d023      	beq.n	800a2aa <__multiply+0xee>
 800a262:	46a9      	mov	r9, r5
 800a264:	f04f 0c00 	mov.w	ip, #0
 800a268:	f104 0e14 	add.w	lr, r4, #20
 800a26c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a270:	f8d9 3000 	ldr.w	r3, [r9]
 800a274:	fa1f fb87 	uxth.w	fp, r7
 800a278:	b29b      	uxth	r3, r3
 800a27a:	fb0a 330b 	mla	r3, sl, fp, r3
 800a27e:	4463      	add	r3, ip
 800a280:	f8d9 c000 	ldr.w	ip, [r9]
 800a284:	0c3f      	lsrs	r7, r7, #16
 800a286:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a28a:	fb0a c707 	mla	r7, sl, r7, ip
 800a28e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a292:	b29b      	uxth	r3, r3
 800a294:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a298:	4572      	cmp	r2, lr
 800a29a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a29e:	f849 3b04 	str.w	r3, [r9], #4
 800a2a2:	d8e3      	bhi.n	800a26c <__multiply+0xb0>
 800a2a4:	9b01      	ldr	r3, [sp, #4]
 800a2a6:	f845 c003 	str.w	ip, [r5, r3]
 800a2aa:	9b03      	ldr	r3, [sp, #12]
 800a2ac:	3104      	adds	r1, #4
 800a2ae:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a2b2:	f1b9 0f00 	cmp.w	r9, #0
 800a2b6:	d021      	beq.n	800a2fc <__multiply+0x140>
 800a2b8:	46ae      	mov	lr, r5
 800a2ba:	f04f 0a00 	mov.w	sl, #0
 800a2be:	682b      	ldr	r3, [r5, #0]
 800a2c0:	f104 0c14 	add.w	ip, r4, #20
 800a2c4:	f8bc b000 	ldrh.w	fp, [ip]
 800a2c8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a2cc:	b29b      	uxth	r3, r3
 800a2ce:	fb09 770b 	mla	r7, r9, fp, r7
 800a2d2:	4457      	add	r7, sl
 800a2d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a2d8:	f84e 3b04 	str.w	r3, [lr], #4
 800a2dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a2e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a2e4:	f8be 3000 	ldrh.w	r3, [lr]
 800a2e8:	4562      	cmp	r2, ip
 800a2ea:	fb09 330a 	mla	r3, r9, sl, r3
 800a2ee:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a2f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a2f6:	d8e5      	bhi.n	800a2c4 <__multiply+0x108>
 800a2f8:	9f01      	ldr	r7, [sp, #4]
 800a2fa:	51eb      	str	r3, [r5, r7]
 800a2fc:	3504      	adds	r5, #4
 800a2fe:	e79a      	b.n	800a236 <__multiply+0x7a>
 800a300:	3e01      	subs	r6, #1
 800a302:	e79c      	b.n	800a23e <__multiply+0x82>
 800a304:	0800b9aa 	.word	0x0800b9aa
 800a308:	0800b9bb 	.word	0x0800b9bb

0800a30c <__pow5mult>:
 800a30c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a310:	4615      	mov	r5, r2
 800a312:	f012 0203 	ands.w	r2, r2, #3
 800a316:	4607      	mov	r7, r0
 800a318:	460e      	mov	r6, r1
 800a31a:	d007      	beq.n	800a32c <__pow5mult+0x20>
 800a31c:	4c25      	ldr	r4, [pc, #148]	@ (800a3b4 <__pow5mult+0xa8>)
 800a31e:	3a01      	subs	r2, #1
 800a320:	2300      	movs	r3, #0
 800a322:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a326:	f7ff fea1 	bl	800a06c <__multadd>
 800a32a:	4606      	mov	r6, r0
 800a32c:	10ad      	asrs	r5, r5, #2
 800a32e:	d03d      	beq.n	800a3ac <__pow5mult+0xa0>
 800a330:	69fc      	ldr	r4, [r7, #28]
 800a332:	b97c      	cbnz	r4, 800a354 <__pow5mult+0x48>
 800a334:	2010      	movs	r0, #16
 800a336:	f7fe f873 	bl	8008420 <malloc>
 800a33a:	4602      	mov	r2, r0
 800a33c:	61f8      	str	r0, [r7, #28]
 800a33e:	b928      	cbnz	r0, 800a34c <__pow5mult+0x40>
 800a340:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a344:	4b1c      	ldr	r3, [pc, #112]	@ (800a3b8 <__pow5mult+0xac>)
 800a346:	481d      	ldr	r0, [pc, #116]	@ (800a3bc <__pow5mult+0xb0>)
 800a348:	f000 fbd6 	bl	800aaf8 <__assert_func>
 800a34c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a350:	6004      	str	r4, [r0, #0]
 800a352:	60c4      	str	r4, [r0, #12]
 800a354:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a358:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a35c:	b94c      	cbnz	r4, 800a372 <__pow5mult+0x66>
 800a35e:	f240 2171 	movw	r1, #625	@ 0x271
 800a362:	4638      	mov	r0, r7
 800a364:	f7ff ff14 	bl	800a190 <__i2b>
 800a368:	2300      	movs	r3, #0
 800a36a:	4604      	mov	r4, r0
 800a36c:	f8c8 0008 	str.w	r0, [r8, #8]
 800a370:	6003      	str	r3, [r0, #0]
 800a372:	f04f 0900 	mov.w	r9, #0
 800a376:	07eb      	lsls	r3, r5, #31
 800a378:	d50a      	bpl.n	800a390 <__pow5mult+0x84>
 800a37a:	4631      	mov	r1, r6
 800a37c:	4622      	mov	r2, r4
 800a37e:	4638      	mov	r0, r7
 800a380:	f7ff ff1c 	bl	800a1bc <__multiply>
 800a384:	4680      	mov	r8, r0
 800a386:	4631      	mov	r1, r6
 800a388:	4638      	mov	r0, r7
 800a38a:	f7ff fe4d 	bl	800a028 <_Bfree>
 800a38e:	4646      	mov	r6, r8
 800a390:	106d      	asrs	r5, r5, #1
 800a392:	d00b      	beq.n	800a3ac <__pow5mult+0xa0>
 800a394:	6820      	ldr	r0, [r4, #0]
 800a396:	b938      	cbnz	r0, 800a3a8 <__pow5mult+0x9c>
 800a398:	4622      	mov	r2, r4
 800a39a:	4621      	mov	r1, r4
 800a39c:	4638      	mov	r0, r7
 800a39e:	f7ff ff0d 	bl	800a1bc <__multiply>
 800a3a2:	6020      	str	r0, [r4, #0]
 800a3a4:	f8c0 9000 	str.w	r9, [r0]
 800a3a8:	4604      	mov	r4, r0
 800a3aa:	e7e4      	b.n	800a376 <__pow5mult+0x6a>
 800a3ac:	4630      	mov	r0, r6
 800a3ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3b2:	bf00      	nop
 800a3b4:	0800ba14 	.word	0x0800ba14
 800a3b8:	0800b93b 	.word	0x0800b93b
 800a3bc:	0800b9bb 	.word	0x0800b9bb

0800a3c0 <__lshift>:
 800a3c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3c4:	460c      	mov	r4, r1
 800a3c6:	4607      	mov	r7, r0
 800a3c8:	4691      	mov	r9, r2
 800a3ca:	6923      	ldr	r3, [r4, #16]
 800a3cc:	6849      	ldr	r1, [r1, #4]
 800a3ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a3d2:	68a3      	ldr	r3, [r4, #8]
 800a3d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a3d8:	f108 0601 	add.w	r6, r8, #1
 800a3dc:	42b3      	cmp	r3, r6
 800a3de:	db0b      	blt.n	800a3f8 <__lshift+0x38>
 800a3e0:	4638      	mov	r0, r7
 800a3e2:	f7ff fde1 	bl	8009fa8 <_Balloc>
 800a3e6:	4605      	mov	r5, r0
 800a3e8:	b948      	cbnz	r0, 800a3fe <__lshift+0x3e>
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a3f0:	4b27      	ldr	r3, [pc, #156]	@ (800a490 <__lshift+0xd0>)
 800a3f2:	4828      	ldr	r0, [pc, #160]	@ (800a494 <__lshift+0xd4>)
 800a3f4:	f000 fb80 	bl	800aaf8 <__assert_func>
 800a3f8:	3101      	adds	r1, #1
 800a3fa:	005b      	lsls	r3, r3, #1
 800a3fc:	e7ee      	b.n	800a3dc <__lshift+0x1c>
 800a3fe:	2300      	movs	r3, #0
 800a400:	f100 0114 	add.w	r1, r0, #20
 800a404:	f100 0210 	add.w	r2, r0, #16
 800a408:	4618      	mov	r0, r3
 800a40a:	4553      	cmp	r3, sl
 800a40c:	db33      	blt.n	800a476 <__lshift+0xb6>
 800a40e:	6920      	ldr	r0, [r4, #16]
 800a410:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a414:	f104 0314 	add.w	r3, r4, #20
 800a418:	f019 091f 	ands.w	r9, r9, #31
 800a41c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a420:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a424:	d02b      	beq.n	800a47e <__lshift+0xbe>
 800a426:	468a      	mov	sl, r1
 800a428:	2200      	movs	r2, #0
 800a42a:	f1c9 0e20 	rsb	lr, r9, #32
 800a42e:	6818      	ldr	r0, [r3, #0]
 800a430:	fa00 f009 	lsl.w	r0, r0, r9
 800a434:	4310      	orrs	r0, r2
 800a436:	f84a 0b04 	str.w	r0, [sl], #4
 800a43a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a43e:	459c      	cmp	ip, r3
 800a440:	fa22 f20e 	lsr.w	r2, r2, lr
 800a444:	d8f3      	bhi.n	800a42e <__lshift+0x6e>
 800a446:	ebac 0304 	sub.w	r3, ip, r4
 800a44a:	3b15      	subs	r3, #21
 800a44c:	f023 0303 	bic.w	r3, r3, #3
 800a450:	3304      	adds	r3, #4
 800a452:	f104 0015 	add.w	r0, r4, #21
 800a456:	4584      	cmp	ip, r0
 800a458:	bf38      	it	cc
 800a45a:	2304      	movcc	r3, #4
 800a45c:	50ca      	str	r2, [r1, r3]
 800a45e:	b10a      	cbz	r2, 800a464 <__lshift+0xa4>
 800a460:	f108 0602 	add.w	r6, r8, #2
 800a464:	3e01      	subs	r6, #1
 800a466:	4638      	mov	r0, r7
 800a468:	4621      	mov	r1, r4
 800a46a:	612e      	str	r6, [r5, #16]
 800a46c:	f7ff fddc 	bl	800a028 <_Bfree>
 800a470:	4628      	mov	r0, r5
 800a472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a476:	f842 0f04 	str.w	r0, [r2, #4]!
 800a47a:	3301      	adds	r3, #1
 800a47c:	e7c5      	b.n	800a40a <__lshift+0x4a>
 800a47e:	3904      	subs	r1, #4
 800a480:	f853 2b04 	ldr.w	r2, [r3], #4
 800a484:	459c      	cmp	ip, r3
 800a486:	f841 2f04 	str.w	r2, [r1, #4]!
 800a48a:	d8f9      	bhi.n	800a480 <__lshift+0xc0>
 800a48c:	e7ea      	b.n	800a464 <__lshift+0xa4>
 800a48e:	bf00      	nop
 800a490:	0800b9aa 	.word	0x0800b9aa
 800a494:	0800b9bb 	.word	0x0800b9bb

0800a498 <__mcmp>:
 800a498:	4603      	mov	r3, r0
 800a49a:	690a      	ldr	r2, [r1, #16]
 800a49c:	6900      	ldr	r0, [r0, #16]
 800a49e:	b530      	push	{r4, r5, lr}
 800a4a0:	1a80      	subs	r0, r0, r2
 800a4a2:	d10e      	bne.n	800a4c2 <__mcmp+0x2a>
 800a4a4:	3314      	adds	r3, #20
 800a4a6:	3114      	adds	r1, #20
 800a4a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a4ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a4b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a4b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a4b8:	4295      	cmp	r5, r2
 800a4ba:	d003      	beq.n	800a4c4 <__mcmp+0x2c>
 800a4bc:	d205      	bcs.n	800a4ca <__mcmp+0x32>
 800a4be:	f04f 30ff 	mov.w	r0, #4294967295
 800a4c2:	bd30      	pop	{r4, r5, pc}
 800a4c4:	42a3      	cmp	r3, r4
 800a4c6:	d3f3      	bcc.n	800a4b0 <__mcmp+0x18>
 800a4c8:	e7fb      	b.n	800a4c2 <__mcmp+0x2a>
 800a4ca:	2001      	movs	r0, #1
 800a4cc:	e7f9      	b.n	800a4c2 <__mcmp+0x2a>
	...

0800a4d0 <__mdiff>:
 800a4d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4d4:	4689      	mov	r9, r1
 800a4d6:	4606      	mov	r6, r0
 800a4d8:	4611      	mov	r1, r2
 800a4da:	4648      	mov	r0, r9
 800a4dc:	4614      	mov	r4, r2
 800a4de:	f7ff ffdb 	bl	800a498 <__mcmp>
 800a4e2:	1e05      	subs	r5, r0, #0
 800a4e4:	d112      	bne.n	800a50c <__mdiff+0x3c>
 800a4e6:	4629      	mov	r1, r5
 800a4e8:	4630      	mov	r0, r6
 800a4ea:	f7ff fd5d 	bl	8009fa8 <_Balloc>
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	b928      	cbnz	r0, 800a4fe <__mdiff+0x2e>
 800a4f2:	f240 2137 	movw	r1, #567	@ 0x237
 800a4f6:	4b3e      	ldr	r3, [pc, #248]	@ (800a5f0 <__mdiff+0x120>)
 800a4f8:	483e      	ldr	r0, [pc, #248]	@ (800a5f4 <__mdiff+0x124>)
 800a4fa:	f000 fafd 	bl	800aaf8 <__assert_func>
 800a4fe:	2301      	movs	r3, #1
 800a500:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a504:	4610      	mov	r0, r2
 800a506:	b003      	add	sp, #12
 800a508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a50c:	bfbc      	itt	lt
 800a50e:	464b      	movlt	r3, r9
 800a510:	46a1      	movlt	r9, r4
 800a512:	4630      	mov	r0, r6
 800a514:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a518:	bfba      	itte	lt
 800a51a:	461c      	movlt	r4, r3
 800a51c:	2501      	movlt	r5, #1
 800a51e:	2500      	movge	r5, #0
 800a520:	f7ff fd42 	bl	8009fa8 <_Balloc>
 800a524:	4602      	mov	r2, r0
 800a526:	b918      	cbnz	r0, 800a530 <__mdiff+0x60>
 800a528:	f240 2145 	movw	r1, #581	@ 0x245
 800a52c:	4b30      	ldr	r3, [pc, #192]	@ (800a5f0 <__mdiff+0x120>)
 800a52e:	e7e3      	b.n	800a4f8 <__mdiff+0x28>
 800a530:	f100 0b14 	add.w	fp, r0, #20
 800a534:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a538:	f109 0310 	add.w	r3, r9, #16
 800a53c:	60c5      	str	r5, [r0, #12]
 800a53e:	f04f 0c00 	mov.w	ip, #0
 800a542:	f109 0514 	add.w	r5, r9, #20
 800a546:	46d9      	mov	r9, fp
 800a548:	6926      	ldr	r6, [r4, #16]
 800a54a:	f104 0e14 	add.w	lr, r4, #20
 800a54e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a552:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a556:	9301      	str	r3, [sp, #4]
 800a558:	9b01      	ldr	r3, [sp, #4]
 800a55a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a55e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a562:	b281      	uxth	r1, r0
 800a564:	9301      	str	r3, [sp, #4]
 800a566:	fa1f f38a 	uxth.w	r3, sl
 800a56a:	1a5b      	subs	r3, r3, r1
 800a56c:	0c00      	lsrs	r0, r0, #16
 800a56e:	4463      	add	r3, ip
 800a570:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a574:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a578:	b29b      	uxth	r3, r3
 800a57a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a57e:	4576      	cmp	r6, lr
 800a580:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a584:	f849 3b04 	str.w	r3, [r9], #4
 800a588:	d8e6      	bhi.n	800a558 <__mdiff+0x88>
 800a58a:	1b33      	subs	r3, r6, r4
 800a58c:	3b15      	subs	r3, #21
 800a58e:	f023 0303 	bic.w	r3, r3, #3
 800a592:	3415      	adds	r4, #21
 800a594:	3304      	adds	r3, #4
 800a596:	42a6      	cmp	r6, r4
 800a598:	bf38      	it	cc
 800a59a:	2304      	movcc	r3, #4
 800a59c:	441d      	add	r5, r3
 800a59e:	445b      	add	r3, fp
 800a5a0:	461e      	mov	r6, r3
 800a5a2:	462c      	mov	r4, r5
 800a5a4:	4544      	cmp	r4, r8
 800a5a6:	d30e      	bcc.n	800a5c6 <__mdiff+0xf6>
 800a5a8:	f108 0103 	add.w	r1, r8, #3
 800a5ac:	1b49      	subs	r1, r1, r5
 800a5ae:	f021 0103 	bic.w	r1, r1, #3
 800a5b2:	3d03      	subs	r5, #3
 800a5b4:	45a8      	cmp	r8, r5
 800a5b6:	bf38      	it	cc
 800a5b8:	2100      	movcc	r1, #0
 800a5ba:	440b      	add	r3, r1
 800a5bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a5c0:	b199      	cbz	r1, 800a5ea <__mdiff+0x11a>
 800a5c2:	6117      	str	r7, [r2, #16]
 800a5c4:	e79e      	b.n	800a504 <__mdiff+0x34>
 800a5c6:	46e6      	mov	lr, ip
 800a5c8:	f854 1b04 	ldr.w	r1, [r4], #4
 800a5cc:	fa1f fc81 	uxth.w	ip, r1
 800a5d0:	44f4      	add	ip, lr
 800a5d2:	0c08      	lsrs	r0, r1, #16
 800a5d4:	4471      	add	r1, lr
 800a5d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a5da:	b289      	uxth	r1, r1
 800a5dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a5e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a5e4:	f846 1b04 	str.w	r1, [r6], #4
 800a5e8:	e7dc      	b.n	800a5a4 <__mdiff+0xd4>
 800a5ea:	3f01      	subs	r7, #1
 800a5ec:	e7e6      	b.n	800a5bc <__mdiff+0xec>
 800a5ee:	bf00      	nop
 800a5f0:	0800b9aa 	.word	0x0800b9aa
 800a5f4:	0800b9bb 	.word	0x0800b9bb

0800a5f8 <__d2b>:
 800a5f8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a5fc:	2101      	movs	r1, #1
 800a5fe:	4690      	mov	r8, r2
 800a600:	4699      	mov	r9, r3
 800a602:	9e08      	ldr	r6, [sp, #32]
 800a604:	f7ff fcd0 	bl	8009fa8 <_Balloc>
 800a608:	4604      	mov	r4, r0
 800a60a:	b930      	cbnz	r0, 800a61a <__d2b+0x22>
 800a60c:	4602      	mov	r2, r0
 800a60e:	f240 310f 	movw	r1, #783	@ 0x30f
 800a612:	4b23      	ldr	r3, [pc, #140]	@ (800a6a0 <__d2b+0xa8>)
 800a614:	4823      	ldr	r0, [pc, #140]	@ (800a6a4 <__d2b+0xac>)
 800a616:	f000 fa6f 	bl	800aaf8 <__assert_func>
 800a61a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a61e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a622:	b10d      	cbz	r5, 800a628 <__d2b+0x30>
 800a624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a628:	9301      	str	r3, [sp, #4]
 800a62a:	f1b8 0300 	subs.w	r3, r8, #0
 800a62e:	d024      	beq.n	800a67a <__d2b+0x82>
 800a630:	4668      	mov	r0, sp
 800a632:	9300      	str	r3, [sp, #0]
 800a634:	f7ff fd7f 	bl	800a136 <__lo0bits>
 800a638:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a63c:	b1d8      	cbz	r0, 800a676 <__d2b+0x7e>
 800a63e:	f1c0 0320 	rsb	r3, r0, #32
 800a642:	fa02 f303 	lsl.w	r3, r2, r3
 800a646:	430b      	orrs	r3, r1
 800a648:	40c2      	lsrs	r2, r0
 800a64a:	6163      	str	r3, [r4, #20]
 800a64c:	9201      	str	r2, [sp, #4]
 800a64e:	9b01      	ldr	r3, [sp, #4]
 800a650:	2b00      	cmp	r3, #0
 800a652:	bf0c      	ite	eq
 800a654:	2201      	moveq	r2, #1
 800a656:	2202      	movne	r2, #2
 800a658:	61a3      	str	r3, [r4, #24]
 800a65a:	6122      	str	r2, [r4, #16]
 800a65c:	b1ad      	cbz	r5, 800a68a <__d2b+0x92>
 800a65e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a662:	4405      	add	r5, r0
 800a664:	6035      	str	r5, [r6, #0]
 800a666:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a66a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a66c:	6018      	str	r0, [r3, #0]
 800a66e:	4620      	mov	r0, r4
 800a670:	b002      	add	sp, #8
 800a672:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a676:	6161      	str	r1, [r4, #20]
 800a678:	e7e9      	b.n	800a64e <__d2b+0x56>
 800a67a:	a801      	add	r0, sp, #4
 800a67c:	f7ff fd5b 	bl	800a136 <__lo0bits>
 800a680:	9b01      	ldr	r3, [sp, #4]
 800a682:	2201      	movs	r2, #1
 800a684:	6163      	str	r3, [r4, #20]
 800a686:	3020      	adds	r0, #32
 800a688:	e7e7      	b.n	800a65a <__d2b+0x62>
 800a68a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a68e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a692:	6030      	str	r0, [r6, #0]
 800a694:	6918      	ldr	r0, [r3, #16]
 800a696:	f7ff fd2f 	bl	800a0f8 <__hi0bits>
 800a69a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a69e:	e7e4      	b.n	800a66a <__d2b+0x72>
 800a6a0:	0800b9aa 	.word	0x0800b9aa
 800a6a4:	0800b9bb 	.word	0x0800b9bb

0800a6a8 <__ssputs_r>:
 800a6a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6ac:	461f      	mov	r7, r3
 800a6ae:	688e      	ldr	r6, [r1, #8]
 800a6b0:	4682      	mov	sl, r0
 800a6b2:	42be      	cmp	r6, r7
 800a6b4:	460c      	mov	r4, r1
 800a6b6:	4690      	mov	r8, r2
 800a6b8:	680b      	ldr	r3, [r1, #0]
 800a6ba:	d82d      	bhi.n	800a718 <__ssputs_r+0x70>
 800a6bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a6c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a6c4:	d026      	beq.n	800a714 <__ssputs_r+0x6c>
 800a6c6:	6965      	ldr	r5, [r4, #20]
 800a6c8:	6909      	ldr	r1, [r1, #16]
 800a6ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6ce:	eba3 0901 	sub.w	r9, r3, r1
 800a6d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a6d6:	1c7b      	adds	r3, r7, #1
 800a6d8:	444b      	add	r3, r9
 800a6da:	106d      	asrs	r5, r5, #1
 800a6dc:	429d      	cmp	r5, r3
 800a6de:	bf38      	it	cc
 800a6e0:	461d      	movcc	r5, r3
 800a6e2:	0553      	lsls	r3, r2, #21
 800a6e4:	d527      	bpl.n	800a736 <__ssputs_r+0x8e>
 800a6e6:	4629      	mov	r1, r5
 800a6e8:	f7fd fecc 	bl	8008484 <_malloc_r>
 800a6ec:	4606      	mov	r6, r0
 800a6ee:	b360      	cbz	r0, 800a74a <__ssputs_r+0xa2>
 800a6f0:	464a      	mov	r2, r9
 800a6f2:	6921      	ldr	r1, [r4, #16]
 800a6f4:	f000 f9f2 	bl	800aadc <memcpy>
 800a6f8:	89a3      	ldrh	r3, [r4, #12]
 800a6fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a6fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a702:	81a3      	strh	r3, [r4, #12]
 800a704:	6126      	str	r6, [r4, #16]
 800a706:	444e      	add	r6, r9
 800a708:	6026      	str	r6, [r4, #0]
 800a70a:	463e      	mov	r6, r7
 800a70c:	6165      	str	r5, [r4, #20]
 800a70e:	eba5 0509 	sub.w	r5, r5, r9
 800a712:	60a5      	str	r5, [r4, #8]
 800a714:	42be      	cmp	r6, r7
 800a716:	d900      	bls.n	800a71a <__ssputs_r+0x72>
 800a718:	463e      	mov	r6, r7
 800a71a:	4632      	mov	r2, r6
 800a71c:	4641      	mov	r1, r8
 800a71e:	6820      	ldr	r0, [r4, #0]
 800a720:	f000 f9c2 	bl	800aaa8 <memmove>
 800a724:	2000      	movs	r0, #0
 800a726:	68a3      	ldr	r3, [r4, #8]
 800a728:	1b9b      	subs	r3, r3, r6
 800a72a:	60a3      	str	r3, [r4, #8]
 800a72c:	6823      	ldr	r3, [r4, #0]
 800a72e:	4433      	add	r3, r6
 800a730:	6023      	str	r3, [r4, #0]
 800a732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a736:	462a      	mov	r2, r5
 800a738:	f000 fa22 	bl	800ab80 <_realloc_r>
 800a73c:	4606      	mov	r6, r0
 800a73e:	2800      	cmp	r0, #0
 800a740:	d1e0      	bne.n	800a704 <__ssputs_r+0x5c>
 800a742:	4650      	mov	r0, sl
 800a744:	6921      	ldr	r1, [r4, #16]
 800a746:	f7ff fbe7 	bl	8009f18 <_free_r>
 800a74a:	230c      	movs	r3, #12
 800a74c:	f8ca 3000 	str.w	r3, [sl]
 800a750:	89a3      	ldrh	r3, [r4, #12]
 800a752:	f04f 30ff 	mov.w	r0, #4294967295
 800a756:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a75a:	81a3      	strh	r3, [r4, #12]
 800a75c:	e7e9      	b.n	800a732 <__ssputs_r+0x8a>
	...

0800a760 <_svfiprintf_r>:
 800a760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a764:	4698      	mov	r8, r3
 800a766:	898b      	ldrh	r3, [r1, #12]
 800a768:	4607      	mov	r7, r0
 800a76a:	061b      	lsls	r3, r3, #24
 800a76c:	460d      	mov	r5, r1
 800a76e:	4614      	mov	r4, r2
 800a770:	b09d      	sub	sp, #116	@ 0x74
 800a772:	d510      	bpl.n	800a796 <_svfiprintf_r+0x36>
 800a774:	690b      	ldr	r3, [r1, #16]
 800a776:	b973      	cbnz	r3, 800a796 <_svfiprintf_r+0x36>
 800a778:	2140      	movs	r1, #64	@ 0x40
 800a77a:	f7fd fe83 	bl	8008484 <_malloc_r>
 800a77e:	6028      	str	r0, [r5, #0]
 800a780:	6128      	str	r0, [r5, #16]
 800a782:	b930      	cbnz	r0, 800a792 <_svfiprintf_r+0x32>
 800a784:	230c      	movs	r3, #12
 800a786:	603b      	str	r3, [r7, #0]
 800a788:	f04f 30ff 	mov.w	r0, #4294967295
 800a78c:	b01d      	add	sp, #116	@ 0x74
 800a78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a792:	2340      	movs	r3, #64	@ 0x40
 800a794:	616b      	str	r3, [r5, #20]
 800a796:	2300      	movs	r3, #0
 800a798:	9309      	str	r3, [sp, #36]	@ 0x24
 800a79a:	2320      	movs	r3, #32
 800a79c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a7a0:	2330      	movs	r3, #48	@ 0x30
 800a7a2:	f04f 0901 	mov.w	r9, #1
 800a7a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7aa:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a944 <_svfiprintf_r+0x1e4>
 800a7ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a7b2:	4623      	mov	r3, r4
 800a7b4:	469a      	mov	sl, r3
 800a7b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7ba:	b10a      	cbz	r2, 800a7c0 <_svfiprintf_r+0x60>
 800a7bc:	2a25      	cmp	r2, #37	@ 0x25
 800a7be:	d1f9      	bne.n	800a7b4 <_svfiprintf_r+0x54>
 800a7c0:	ebba 0b04 	subs.w	fp, sl, r4
 800a7c4:	d00b      	beq.n	800a7de <_svfiprintf_r+0x7e>
 800a7c6:	465b      	mov	r3, fp
 800a7c8:	4622      	mov	r2, r4
 800a7ca:	4629      	mov	r1, r5
 800a7cc:	4638      	mov	r0, r7
 800a7ce:	f7ff ff6b 	bl	800a6a8 <__ssputs_r>
 800a7d2:	3001      	adds	r0, #1
 800a7d4:	f000 80a7 	beq.w	800a926 <_svfiprintf_r+0x1c6>
 800a7d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7da:	445a      	add	r2, fp
 800a7dc:	9209      	str	r2, [sp, #36]	@ 0x24
 800a7de:	f89a 3000 	ldrb.w	r3, [sl]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	f000 809f 	beq.w	800a926 <_svfiprintf_r+0x1c6>
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7f2:	f10a 0a01 	add.w	sl, sl, #1
 800a7f6:	9304      	str	r3, [sp, #16]
 800a7f8:	9307      	str	r3, [sp, #28]
 800a7fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a7fe:	931a      	str	r3, [sp, #104]	@ 0x68
 800a800:	4654      	mov	r4, sl
 800a802:	2205      	movs	r2, #5
 800a804:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a808:	484e      	ldr	r0, [pc, #312]	@ (800a944 <_svfiprintf_r+0x1e4>)
 800a80a:	f7fe fd24 	bl	8009256 <memchr>
 800a80e:	9a04      	ldr	r2, [sp, #16]
 800a810:	b9d8      	cbnz	r0, 800a84a <_svfiprintf_r+0xea>
 800a812:	06d0      	lsls	r0, r2, #27
 800a814:	bf44      	itt	mi
 800a816:	2320      	movmi	r3, #32
 800a818:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a81c:	0711      	lsls	r1, r2, #28
 800a81e:	bf44      	itt	mi
 800a820:	232b      	movmi	r3, #43	@ 0x2b
 800a822:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a826:	f89a 3000 	ldrb.w	r3, [sl]
 800a82a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a82c:	d015      	beq.n	800a85a <_svfiprintf_r+0xfa>
 800a82e:	4654      	mov	r4, sl
 800a830:	2000      	movs	r0, #0
 800a832:	f04f 0c0a 	mov.w	ip, #10
 800a836:	9a07      	ldr	r2, [sp, #28]
 800a838:	4621      	mov	r1, r4
 800a83a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a83e:	3b30      	subs	r3, #48	@ 0x30
 800a840:	2b09      	cmp	r3, #9
 800a842:	d94b      	bls.n	800a8dc <_svfiprintf_r+0x17c>
 800a844:	b1b0      	cbz	r0, 800a874 <_svfiprintf_r+0x114>
 800a846:	9207      	str	r2, [sp, #28]
 800a848:	e014      	b.n	800a874 <_svfiprintf_r+0x114>
 800a84a:	eba0 0308 	sub.w	r3, r0, r8
 800a84e:	fa09 f303 	lsl.w	r3, r9, r3
 800a852:	4313      	orrs	r3, r2
 800a854:	46a2      	mov	sl, r4
 800a856:	9304      	str	r3, [sp, #16]
 800a858:	e7d2      	b.n	800a800 <_svfiprintf_r+0xa0>
 800a85a:	9b03      	ldr	r3, [sp, #12]
 800a85c:	1d19      	adds	r1, r3, #4
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	9103      	str	r1, [sp, #12]
 800a862:	2b00      	cmp	r3, #0
 800a864:	bfbb      	ittet	lt
 800a866:	425b      	neglt	r3, r3
 800a868:	f042 0202 	orrlt.w	r2, r2, #2
 800a86c:	9307      	strge	r3, [sp, #28]
 800a86e:	9307      	strlt	r3, [sp, #28]
 800a870:	bfb8      	it	lt
 800a872:	9204      	strlt	r2, [sp, #16]
 800a874:	7823      	ldrb	r3, [r4, #0]
 800a876:	2b2e      	cmp	r3, #46	@ 0x2e
 800a878:	d10a      	bne.n	800a890 <_svfiprintf_r+0x130>
 800a87a:	7863      	ldrb	r3, [r4, #1]
 800a87c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a87e:	d132      	bne.n	800a8e6 <_svfiprintf_r+0x186>
 800a880:	9b03      	ldr	r3, [sp, #12]
 800a882:	3402      	adds	r4, #2
 800a884:	1d1a      	adds	r2, r3, #4
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	9203      	str	r2, [sp, #12]
 800a88a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a88e:	9305      	str	r3, [sp, #20]
 800a890:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a948 <_svfiprintf_r+0x1e8>
 800a894:	2203      	movs	r2, #3
 800a896:	4650      	mov	r0, sl
 800a898:	7821      	ldrb	r1, [r4, #0]
 800a89a:	f7fe fcdc 	bl	8009256 <memchr>
 800a89e:	b138      	cbz	r0, 800a8b0 <_svfiprintf_r+0x150>
 800a8a0:	2240      	movs	r2, #64	@ 0x40
 800a8a2:	9b04      	ldr	r3, [sp, #16]
 800a8a4:	eba0 000a 	sub.w	r0, r0, sl
 800a8a8:	4082      	lsls	r2, r0
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	3401      	adds	r4, #1
 800a8ae:	9304      	str	r3, [sp, #16]
 800a8b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8b4:	2206      	movs	r2, #6
 800a8b6:	4825      	ldr	r0, [pc, #148]	@ (800a94c <_svfiprintf_r+0x1ec>)
 800a8b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a8bc:	f7fe fccb 	bl	8009256 <memchr>
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	d036      	beq.n	800a932 <_svfiprintf_r+0x1d2>
 800a8c4:	4b22      	ldr	r3, [pc, #136]	@ (800a950 <_svfiprintf_r+0x1f0>)
 800a8c6:	bb1b      	cbnz	r3, 800a910 <_svfiprintf_r+0x1b0>
 800a8c8:	9b03      	ldr	r3, [sp, #12]
 800a8ca:	3307      	adds	r3, #7
 800a8cc:	f023 0307 	bic.w	r3, r3, #7
 800a8d0:	3308      	adds	r3, #8
 800a8d2:	9303      	str	r3, [sp, #12]
 800a8d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8d6:	4433      	add	r3, r6
 800a8d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8da:	e76a      	b.n	800a7b2 <_svfiprintf_r+0x52>
 800a8dc:	460c      	mov	r4, r1
 800a8de:	2001      	movs	r0, #1
 800a8e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8e4:	e7a8      	b.n	800a838 <_svfiprintf_r+0xd8>
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	f04f 0c0a 	mov.w	ip, #10
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	3401      	adds	r4, #1
 800a8f0:	9305      	str	r3, [sp, #20]
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8f8:	3a30      	subs	r2, #48	@ 0x30
 800a8fa:	2a09      	cmp	r2, #9
 800a8fc:	d903      	bls.n	800a906 <_svfiprintf_r+0x1a6>
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d0c6      	beq.n	800a890 <_svfiprintf_r+0x130>
 800a902:	9105      	str	r1, [sp, #20]
 800a904:	e7c4      	b.n	800a890 <_svfiprintf_r+0x130>
 800a906:	4604      	mov	r4, r0
 800a908:	2301      	movs	r3, #1
 800a90a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a90e:	e7f0      	b.n	800a8f2 <_svfiprintf_r+0x192>
 800a910:	ab03      	add	r3, sp, #12
 800a912:	9300      	str	r3, [sp, #0]
 800a914:	462a      	mov	r2, r5
 800a916:	4638      	mov	r0, r7
 800a918:	4b0e      	ldr	r3, [pc, #56]	@ (800a954 <_svfiprintf_r+0x1f4>)
 800a91a:	a904      	add	r1, sp, #16
 800a91c:	f7fd fedc 	bl	80086d8 <_printf_float>
 800a920:	1c42      	adds	r2, r0, #1
 800a922:	4606      	mov	r6, r0
 800a924:	d1d6      	bne.n	800a8d4 <_svfiprintf_r+0x174>
 800a926:	89ab      	ldrh	r3, [r5, #12]
 800a928:	065b      	lsls	r3, r3, #25
 800a92a:	f53f af2d 	bmi.w	800a788 <_svfiprintf_r+0x28>
 800a92e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a930:	e72c      	b.n	800a78c <_svfiprintf_r+0x2c>
 800a932:	ab03      	add	r3, sp, #12
 800a934:	9300      	str	r3, [sp, #0]
 800a936:	462a      	mov	r2, r5
 800a938:	4638      	mov	r0, r7
 800a93a:	4b06      	ldr	r3, [pc, #24]	@ (800a954 <_svfiprintf_r+0x1f4>)
 800a93c:	a904      	add	r1, sp, #16
 800a93e:	f7fe f969 	bl	8008c14 <_printf_i>
 800a942:	e7ed      	b.n	800a920 <_svfiprintf_r+0x1c0>
 800a944:	0800bb10 	.word	0x0800bb10
 800a948:	0800bb16 	.word	0x0800bb16
 800a94c:	0800bb1a 	.word	0x0800bb1a
 800a950:	080086d9 	.word	0x080086d9
 800a954:	0800a6a9 	.word	0x0800a6a9

0800a958 <__sflush_r>:
 800a958:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a95e:	0716      	lsls	r6, r2, #28
 800a960:	4605      	mov	r5, r0
 800a962:	460c      	mov	r4, r1
 800a964:	d454      	bmi.n	800aa10 <__sflush_r+0xb8>
 800a966:	684b      	ldr	r3, [r1, #4]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	dc02      	bgt.n	800a972 <__sflush_r+0x1a>
 800a96c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a96e:	2b00      	cmp	r3, #0
 800a970:	dd48      	ble.n	800aa04 <__sflush_r+0xac>
 800a972:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a974:	2e00      	cmp	r6, #0
 800a976:	d045      	beq.n	800aa04 <__sflush_r+0xac>
 800a978:	2300      	movs	r3, #0
 800a97a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a97e:	682f      	ldr	r7, [r5, #0]
 800a980:	6a21      	ldr	r1, [r4, #32]
 800a982:	602b      	str	r3, [r5, #0]
 800a984:	d030      	beq.n	800a9e8 <__sflush_r+0x90>
 800a986:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a988:	89a3      	ldrh	r3, [r4, #12]
 800a98a:	0759      	lsls	r1, r3, #29
 800a98c:	d505      	bpl.n	800a99a <__sflush_r+0x42>
 800a98e:	6863      	ldr	r3, [r4, #4]
 800a990:	1ad2      	subs	r2, r2, r3
 800a992:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a994:	b10b      	cbz	r3, 800a99a <__sflush_r+0x42>
 800a996:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a998:	1ad2      	subs	r2, r2, r3
 800a99a:	2300      	movs	r3, #0
 800a99c:	4628      	mov	r0, r5
 800a99e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a9a0:	6a21      	ldr	r1, [r4, #32]
 800a9a2:	47b0      	blx	r6
 800a9a4:	1c43      	adds	r3, r0, #1
 800a9a6:	89a3      	ldrh	r3, [r4, #12]
 800a9a8:	d106      	bne.n	800a9b8 <__sflush_r+0x60>
 800a9aa:	6829      	ldr	r1, [r5, #0]
 800a9ac:	291d      	cmp	r1, #29
 800a9ae:	d82b      	bhi.n	800aa08 <__sflush_r+0xb0>
 800a9b0:	4a28      	ldr	r2, [pc, #160]	@ (800aa54 <__sflush_r+0xfc>)
 800a9b2:	410a      	asrs	r2, r1
 800a9b4:	07d6      	lsls	r6, r2, #31
 800a9b6:	d427      	bmi.n	800aa08 <__sflush_r+0xb0>
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	6062      	str	r2, [r4, #4]
 800a9bc:	6922      	ldr	r2, [r4, #16]
 800a9be:	04d9      	lsls	r1, r3, #19
 800a9c0:	6022      	str	r2, [r4, #0]
 800a9c2:	d504      	bpl.n	800a9ce <__sflush_r+0x76>
 800a9c4:	1c42      	adds	r2, r0, #1
 800a9c6:	d101      	bne.n	800a9cc <__sflush_r+0x74>
 800a9c8:	682b      	ldr	r3, [r5, #0]
 800a9ca:	b903      	cbnz	r3, 800a9ce <__sflush_r+0x76>
 800a9cc:	6560      	str	r0, [r4, #84]	@ 0x54
 800a9ce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a9d0:	602f      	str	r7, [r5, #0]
 800a9d2:	b1b9      	cbz	r1, 800aa04 <__sflush_r+0xac>
 800a9d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a9d8:	4299      	cmp	r1, r3
 800a9da:	d002      	beq.n	800a9e2 <__sflush_r+0x8a>
 800a9dc:	4628      	mov	r0, r5
 800a9de:	f7ff fa9b 	bl	8009f18 <_free_r>
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	6363      	str	r3, [r4, #52]	@ 0x34
 800a9e6:	e00d      	b.n	800aa04 <__sflush_r+0xac>
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	4628      	mov	r0, r5
 800a9ec:	47b0      	blx	r6
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	1c50      	adds	r0, r2, #1
 800a9f2:	d1c9      	bne.n	800a988 <__sflush_r+0x30>
 800a9f4:	682b      	ldr	r3, [r5, #0]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d0c6      	beq.n	800a988 <__sflush_r+0x30>
 800a9fa:	2b1d      	cmp	r3, #29
 800a9fc:	d001      	beq.n	800aa02 <__sflush_r+0xaa>
 800a9fe:	2b16      	cmp	r3, #22
 800aa00:	d11d      	bne.n	800aa3e <__sflush_r+0xe6>
 800aa02:	602f      	str	r7, [r5, #0]
 800aa04:	2000      	movs	r0, #0
 800aa06:	e021      	b.n	800aa4c <__sflush_r+0xf4>
 800aa08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa0c:	b21b      	sxth	r3, r3
 800aa0e:	e01a      	b.n	800aa46 <__sflush_r+0xee>
 800aa10:	690f      	ldr	r7, [r1, #16]
 800aa12:	2f00      	cmp	r7, #0
 800aa14:	d0f6      	beq.n	800aa04 <__sflush_r+0xac>
 800aa16:	0793      	lsls	r3, r2, #30
 800aa18:	bf18      	it	ne
 800aa1a:	2300      	movne	r3, #0
 800aa1c:	680e      	ldr	r6, [r1, #0]
 800aa1e:	bf08      	it	eq
 800aa20:	694b      	ldreq	r3, [r1, #20]
 800aa22:	1bf6      	subs	r6, r6, r7
 800aa24:	600f      	str	r7, [r1, #0]
 800aa26:	608b      	str	r3, [r1, #8]
 800aa28:	2e00      	cmp	r6, #0
 800aa2a:	ddeb      	ble.n	800aa04 <__sflush_r+0xac>
 800aa2c:	4633      	mov	r3, r6
 800aa2e:	463a      	mov	r2, r7
 800aa30:	4628      	mov	r0, r5
 800aa32:	6a21      	ldr	r1, [r4, #32]
 800aa34:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800aa38:	47e0      	blx	ip
 800aa3a:	2800      	cmp	r0, #0
 800aa3c:	dc07      	bgt.n	800aa4e <__sflush_r+0xf6>
 800aa3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa46:	f04f 30ff 	mov.w	r0, #4294967295
 800aa4a:	81a3      	strh	r3, [r4, #12]
 800aa4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa4e:	4407      	add	r7, r0
 800aa50:	1a36      	subs	r6, r6, r0
 800aa52:	e7e9      	b.n	800aa28 <__sflush_r+0xd0>
 800aa54:	dfbffffe 	.word	0xdfbffffe

0800aa58 <_fflush_r>:
 800aa58:	b538      	push	{r3, r4, r5, lr}
 800aa5a:	690b      	ldr	r3, [r1, #16]
 800aa5c:	4605      	mov	r5, r0
 800aa5e:	460c      	mov	r4, r1
 800aa60:	b913      	cbnz	r3, 800aa68 <_fflush_r+0x10>
 800aa62:	2500      	movs	r5, #0
 800aa64:	4628      	mov	r0, r5
 800aa66:	bd38      	pop	{r3, r4, r5, pc}
 800aa68:	b118      	cbz	r0, 800aa72 <_fflush_r+0x1a>
 800aa6a:	6a03      	ldr	r3, [r0, #32]
 800aa6c:	b90b      	cbnz	r3, 800aa72 <_fflush_r+0x1a>
 800aa6e:	f7fe fa7d 	bl	8008f6c <__sinit>
 800aa72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d0f3      	beq.n	800aa62 <_fflush_r+0xa>
 800aa7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aa7c:	07d0      	lsls	r0, r2, #31
 800aa7e:	d404      	bmi.n	800aa8a <_fflush_r+0x32>
 800aa80:	0599      	lsls	r1, r3, #22
 800aa82:	d402      	bmi.n	800aa8a <_fflush_r+0x32>
 800aa84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa86:	f7fe fbdc 	bl	8009242 <__retarget_lock_acquire_recursive>
 800aa8a:	4628      	mov	r0, r5
 800aa8c:	4621      	mov	r1, r4
 800aa8e:	f7ff ff63 	bl	800a958 <__sflush_r>
 800aa92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa94:	4605      	mov	r5, r0
 800aa96:	07da      	lsls	r2, r3, #31
 800aa98:	d4e4      	bmi.n	800aa64 <_fflush_r+0xc>
 800aa9a:	89a3      	ldrh	r3, [r4, #12]
 800aa9c:	059b      	lsls	r3, r3, #22
 800aa9e:	d4e1      	bmi.n	800aa64 <_fflush_r+0xc>
 800aaa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aaa2:	f7fe fbcf 	bl	8009244 <__retarget_lock_release_recursive>
 800aaa6:	e7dd      	b.n	800aa64 <_fflush_r+0xc>

0800aaa8 <memmove>:
 800aaa8:	4288      	cmp	r0, r1
 800aaaa:	b510      	push	{r4, lr}
 800aaac:	eb01 0402 	add.w	r4, r1, r2
 800aab0:	d902      	bls.n	800aab8 <memmove+0x10>
 800aab2:	4284      	cmp	r4, r0
 800aab4:	4623      	mov	r3, r4
 800aab6:	d807      	bhi.n	800aac8 <memmove+0x20>
 800aab8:	1e43      	subs	r3, r0, #1
 800aaba:	42a1      	cmp	r1, r4
 800aabc:	d008      	beq.n	800aad0 <memmove+0x28>
 800aabe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aac2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aac6:	e7f8      	b.n	800aaba <memmove+0x12>
 800aac8:	4601      	mov	r1, r0
 800aaca:	4402      	add	r2, r0
 800aacc:	428a      	cmp	r2, r1
 800aace:	d100      	bne.n	800aad2 <memmove+0x2a>
 800aad0:	bd10      	pop	{r4, pc}
 800aad2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aad6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aada:	e7f7      	b.n	800aacc <memmove+0x24>

0800aadc <memcpy>:
 800aadc:	440a      	add	r2, r1
 800aade:	4291      	cmp	r1, r2
 800aae0:	f100 33ff 	add.w	r3, r0, #4294967295
 800aae4:	d100      	bne.n	800aae8 <memcpy+0xc>
 800aae6:	4770      	bx	lr
 800aae8:	b510      	push	{r4, lr}
 800aaea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aaee:	4291      	cmp	r1, r2
 800aaf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aaf4:	d1f9      	bne.n	800aaea <memcpy+0xe>
 800aaf6:	bd10      	pop	{r4, pc}

0800aaf8 <__assert_func>:
 800aaf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aafa:	4614      	mov	r4, r2
 800aafc:	461a      	mov	r2, r3
 800aafe:	4b09      	ldr	r3, [pc, #36]	@ (800ab24 <__assert_func+0x2c>)
 800ab00:	4605      	mov	r5, r0
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	68d8      	ldr	r0, [r3, #12]
 800ab06:	b954      	cbnz	r4, 800ab1e <__assert_func+0x26>
 800ab08:	4b07      	ldr	r3, [pc, #28]	@ (800ab28 <__assert_func+0x30>)
 800ab0a:	461c      	mov	r4, r3
 800ab0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab10:	9100      	str	r1, [sp, #0]
 800ab12:	462b      	mov	r3, r5
 800ab14:	4905      	ldr	r1, [pc, #20]	@ (800ab2c <__assert_func+0x34>)
 800ab16:	f000 f86f 	bl	800abf8 <fiprintf>
 800ab1a:	f7fd fc79 	bl	8008410 <abort>
 800ab1e:	4b04      	ldr	r3, [pc, #16]	@ (800ab30 <__assert_func+0x38>)
 800ab20:	e7f4      	b.n	800ab0c <__assert_func+0x14>
 800ab22:	bf00      	nop
 800ab24:	2000001c 	.word	0x2000001c
 800ab28:	0800bb66 	.word	0x0800bb66
 800ab2c:	0800bb38 	.word	0x0800bb38
 800ab30:	0800bb2b 	.word	0x0800bb2b

0800ab34 <_calloc_r>:
 800ab34:	b570      	push	{r4, r5, r6, lr}
 800ab36:	fba1 5402 	umull	r5, r4, r1, r2
 800ab3a:	b93c      	cbnz	r4, 800ab4c <_calloc_r+0x18>
 800ab3c:	4629      	mov	r1, r5
 800ab3e:	f7fd fca1 	bl	8008484 <_malloc_r>
 800ab42:	4606      	mov	r6, r0
 800ab44:	b928      	cbnz	r0, 800ab52 <_calloc_r+0x1e>
 800ab46:	2600      	movs	r6, #0
 800ab48:	4630      	mov	r0, r6
 800ab4a:	bd70      	pop	{r4, r5, r6, pc}
 800ab4c:	220c      	movs	r2, #12
 800ab4e:	6002      	str	r2, [r0, #0]
 800ab50:	e7f9      	b.n	800ab46 <_calloc_r+0x12>
 800ab52:	462a      	mov	r2, r5
 800ab54:	4621      	mov	r1, r4
 800ab56:	f7fe faa2 	bl	800909e <memset>
 800ab5a:	e7f5      	b.n	800ab48 <_calloc_r+0x14>

0800ab5c <__ascii_mbtowc>:
 800ab5c:	b082      	sub	sp, #8
 800ab5e:	b901      	cbnz	r1, 800ab62 <__ascii_mbtowc+0x6>
 800ab60:	a901      	add	r1, sp, #4
 800ab62:	b142      	cbz	r2, 800ab76 <__ascii_mbtowc+0x1a>
 800ab64:	b14b      	cbz	r3, 800ab7a <__ascii_mbtowc+0x1e>
 800ab66:	7813      	ldrb	r3, [r2, #0]
 800ab68:	600b      	str	r3, [r1, #0]
 800ab6a:	7812      	ldrb	r2, [r2, #0]
 800ab6c:	1e10      	subs	r0, r2, #0
 800ab6e:	bf18      	it	ne
 800ab70:	2001      	movne	r0, #1
 800ab72:	b002      	add	sp, #8
 800ab74:	4770      	bx	lr
 800ab76:	4610      	mov	r0, r2
 800ab78:	e7fb      	b.n	800ab72 <__ascii_mbtowc+0x16>
 800ab7a:	f06f 0001 	mvn.w	r0, #1
 800ab7e:	e7f8      	b.n	800ab72 <__ascii_mbtowc+0x16>

0800ab80 <_realloc_r>:
 800ab80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab84:	4680      	mov	r8, r0
 800ab86:	4615      	mov	r5, r2
 800ab88:	460c      	mov	r4, r1
 800ab8a:	b921      	cbnz	r1, 800ab96 <_realloc_r+0x16>
 800ab8c:	4611      	mov	r1, r2
 800ab8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab92:	f7fd bc77 	b.w	8008484 <_malloc_r>
 800ab96:	b92a      	cbnz	r2, 800aba4 <_realloc_r+0x24>
 800ab98:	f7ff f9be 	bl	8009f18 <_free_r>
 800ab9c:	2400      	movs	r4, #0
 800ab9e:	4620      	mov	r0, r4
 800aba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aba4:	f000 f83a 	bl	800ac1c <_malloc_usable_size_r>
 800aba8:	4285      	cmp	r5, r0
 800abaa:	4606      	mov	r6, r0
 800abac:	d802      	bhi.n	800abb4 <_realloc_r+0x34>
 800abae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800abb2:	d8f4      	bhi.n	800ab9e <_realloc_r+0x1e>
 800abb4:	4629      	mov	r1, r5
 800abb6:	4640      	mov	r0, r8
 800abb8:	f7fd fc64 	bl	8008484 <_malloc_r>
 800abbc:	4607      	mov	r7, r0
 800abbe:	2800      	cmp	r0, #0
 800abc0:	d0ec      	beq.n	800ab9c <_realloc_r+0x1c>
 800abc2:	42b5      	cmp	r5, r6
 800abc4:	462a      	mov	r2, r5
 800abc6:	4621      	mov	r1, r4
 800abc8:	bf28      	it	cs
 800abca:	4632      	movcs	r2, r6
 800abcc:	f7ff ff86 	bl	800aadc <memcpy>
 800abd0:	4621      	mov	r1, r4
 800abd2:	4640      	mov	r0, r8
 800abd4:	f7ff f9a0 	bl	8009f18 <_free_r>
 800abd8:	463c      	mov	r4, r7
 800abda:	e7e0      	b.n	800ab9e <_realloc_r+0x1e>

0800abdc <__ascii_wctomb>:
 800abdc:	4603      	mov	r3, r0
 800abde:	4608      	mov	r0, r1
 800abe0:	b141      	cbz	r1, 800abf4 <__ascii_wctomb+0x18>
 800abe2:	2aff      	cmp	r2, #255	@ 0xff
 800abe4:	d904      	bls.n	800abf0 <__ascii_wctomb+0x14>
 800abe6:	228a      	movs	r2, #138	@ 0x8a
 800abe8:	f04f 30ff 	mov.w	r0, #4294967295
 800abec:	601a      	str	r2, [r3, #0]
 800abee:	4770      	bx	lr
 800abf0:	2001      	movs	r0, #1
 800abf2:	700a      	strb	r2, [r1, #0]
 800abf4:	4770      	bx	lr
	...

0800abf8 <fiprintf>:
 800abf8:	b40e      	push	{r1, r2, r3}
 800abfa:	b503      	push	{r0, r1, lr}
 800abfc:	4601      	mov	r1, r0
 800abfe:	ab03      	add	r3, sp, #12
 800ac00:	4805      	ldr	r0, [pc, #20]	@ (800ac18 <fiprintf+0x20>)
 800ac02:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac06:	6800      	ldr	r0, [r0, #0]
 800ac08:	9301      	str	r3, [sp, #4]
 800ac0a:	f000 f837 	bl	800ac7c <_vfiprintf_r>
 800ac0e:	b002      	add	sp, #8
 800ac10:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac14:	b003      	add	sp, #12
 800ac16:	4770      	bx	lr
 800ac18:	2000001c 	.word	0x2000001c

0800ac1c <_malloc_usable_size_r>:
 800ac1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac20:	1f18      	subs	r0, r3, #4
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	bfbc      	itt	lt
 800ac26:	580b      	ldrlt	r3, [r1, r0]
 800ac28:	18c0      	addlt	r0, r0, r3
 800ac2a:	4770      	bx	lr

0800ac2c <__sfputc_r>:
 800ac2c:	6893      	ldr	r3, [r2, #8]
 800ac2e:	b410      	push	{r4}
 800ac30:	3b01      	subs	r3, #1
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	6093      	str	r3, [r2, #8]
 800ac36:	da07      	bge.n	800ac48 <__sfputc_r+0x1c>
 800ac38:	6994      	ldr	r4, [r2, #24]
 800ac3a:	42a3      	cmp	r3, r4
 800ac3c:	db01      	blt.n	800ac42 <__sfputc_r+0x16>
 800ac3e:	290a      	cmp	r1, #10
 800ac40:	d102      	bne.n	800ac48 <__sfputc_r+0x1c>
 800ac42:	bc10      	pop	{r4}
 800ac44:	f000 b932 	b.w	800aeac <__swbuf_r>
 800ac48:	6813      	ldr	r3, [r2, #0]
 800ac4a:	1c58      	adds	r0, r3, #1
 800ac4c:	6010      	str	r0, [r2, #0]
 800ac4e:	7019      	strb	r1, [r3, #0]
 800ac50:	4608      	mov	r0, r1
 800ac52:	bc10      	pop	{r4}
 800ac54:	4770      	bx	lr

0800ac56 <__sfputs_r>:
 800ac56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac58:	4606      	mov	r6, r0
 800ac5a:	460f      	mov	r7, r1
 800ac5c:	4614      	mov	r4, r2
 800ac5e:	18d5      	adds	r5, r2, r3
 800ac60:	42ac      	cmp	r4, r5
 800ac62:	d101      	bne.n	800ac68 <__sfputs_r+0x12>
 800ac64:	2000      	movs	r0, #0
 800ac66:	e007      	b.n	800ac78 <__sfputs_r+0x22>
 800ac68:	463a      	mov	r2, r7
 800ac6a:	4630      	mov	r0, r6
 800ac6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac70:	f7ff ffdc 	bl	800ac2c <__sfputc_r>
 800ac74:	1c43      	adds	r3, r0, #1
 800ac76:	d1f3      	bne.n	800ac60 <__sfputs_r+0xa>
 800ac78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ac7c <_vfiprintf_r>:
 800ac7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac80:	460d      	mov	r5, r1
 800ac82:	4614      	mov	r4, r2
 800ac84:	4698      	mov	r8, r3
 800ac86:	4606      	mov	r6, r0
 800ac88:	b09d      	sub	sp, #116	@ 0x74
 800ac8a:	b118      	cbz	r0, 800ac94 <_vfiprintf_r+0x18>
 800ac8c:	6a03      	ldr	r3, [r0, #32]
 800ac8e:	b90b      	cbnz	r3, 800ac94 <_vfiprintf_r+0x18>
 800ac90:	f7fe f96c 	bl	8008f6c <__sinit>
 800ac94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac96:	07d9      	lsls	r1, r3, #31
 800ac98:	d405      	bmi.n	800aca6 <_vfiprintf_r+0x2a>
 800ac9a:	89ab      	ldrh	r3, [r5, #12]
 800ac9c:	059a      	lsls	r2, r3, #22
 800ac9e:	d402      	bmi.n	800aca6 <_vfiprintf_r+0x2a>
 800aca0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aca2:	f7fe face 	bl	8009242 <__retarget_lock_acquire_recursive>
 800aca6:	89ab      	ldrh	r3, [r5, #12]
 800aca8:	071b      	lsls	r3, r3, #28
 800acaa:	d501      	bpl.n	800acb0 <_vfiprintf_r+0x34>
 800acac:	692b      	ldr	r3, [r5, #16]
 800acae:	b99b      	cbnz	r3, 800acd8 <_vfiprintf_r+0x5c>
 800acb0:	4629      	mov	r1, r5
 800acb2:	4630      	mov	r0, r6
 800acb4:	f000 f938 	bl	800af28 <__swsetup_r>
 800acb8:	b170      	cbz	r0, 800acd8 <_vfiprintf_r+0x5c>
 800acba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800acbc:	07dc      	lsls	r4, r3, #31
 800acbe:	d504      	bpl.n	800acca <_vfiprintf_r+0x4e>
 800acc0:	f04f 30ff 	mov.w	r0, #4294967295
 800acc4:	b01d      	add	sp, #116	@ 0x74
 800acc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acca:	89ab      	ldrh	r3, [r5, #12]
 800accc:	0598      	lsls	r0, r3, #22
 800acce:	d4f7      	bmi.n	800acc0 <_vfiprintf_r+0x44>
 800acd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800acd2:	f7fe fab7 	bl	8009244 <__retarget_lock_release_recursive>
 800acd6:	e7f3      	b.n	800acc0 <_vfiprintf_r+0x44>
 800acd8:	2300      	movs	r3, #0
 800acda:	9309      	str	r3, [sp, #36]	@ 0x24
 800acdc:	2320      	movs	r3, #32
 800acde:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ace2:	2330      	movs	r3, #48	@ 0x30
 800ace4:	f04f 0901 	mov.w	r9, #1
 800ace8:	f8cd 800c 	str.w	r8, [sp, #12]
 800acec:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800ae98 <_vfiprintf_r+0x21c>
 800acf0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800acf4:	4623      	mov	r3, r4
 800acf6:	469a      	mov	sl, r3
 800acf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acfc:	b10a      	cbz	r2, 800ad02 <_vfiprintf_r+0x86>
 800acfe:	2a25      	cmp	r2, #37	@ 0x25
 800ad00:	d1f9      	bne.n	800acf6 <_vfiprintf_r+0x7a>
 800ad02:	ebba 0b04 	subs.w	fp, sl, r4
 800ad06:	d00b      	beq.n	800ad20 <_vfiprintf_r+0xa4>
 800ad08:	465b      	mov	r3, fp
 800ad0a:	4622      	mov	r2, r4
 800ad0c:	4629      	mov	r1, r5
 800ad0e:	4630      	mov	r0, r6
 800ad10:	f7ff ffa1 	bl	800ac56 <__sfputs_r>
 800ad14:	3001      	adds	r0, #1
 800ad16:	f000 80a7 	beq.w	800ae68 <_vfiprintf_r+0x1ec>
 800ad1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad1c:	445a      	add	r2, fp
 800ad1e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad20:	f89a 3000 	ldrb.w	r3, [sl]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	f000 809f 	beq.w	800ae68 <_vfiprintf_r+0x1ec>
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	f04f 32ff 	mov.w	r2, #4294967295
 800ad30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad34:	f10a 0a01 	add.w	sl, sl, #1
 800ad38:	9304      	str	r3, [sp, #16]
 800ad3a:	9307      	str	r3, [sp, #28]
 800ad3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ad40:	931a      	str	r3, [sp, #104]	@ 0x68
 800ad42:	4654      	mov	r4, sl
 800ad44:	2205      	movs	r2, #5
 800ad46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad4a:	4853      	ldr	r0, [pc, #332]	@ (800ae98 <_vfiprintf_r+0x21c>)
 800ad4c:	f7fe fa83 	bl	8009256 <memchr>
 800ad50:	9a04      	ldr	r2, [sp, #16]
 800ad52:	b9d8      	cbnz	r0, 800ad8c <_vfiprintf_r+0x110>
 800ad54:	06d1      	lsls	r1, r2, #27
 800ad56:	bf44      	itt	mi
 800ad58:	2320      	movmi	r3, #32
 800ad5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad5e:	0713      	lsls	r3, r2, #28
 800ad60:	bf44      	itt	mi
 800ad62:	232b      	movmi	r3, #43	@ 0x2b
 800ad64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad68:	f89a 3000 	ldrb.w	r3, [sl]
 800ad6c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad6e:	d015      	beq.n	800ad9c <_vfiprintf_r+0x120>
 800ad70:	4654      	mov	r4, sl
 800ad72:	2000      	movs	r0, #0
 800ad74:	f04f 0c0a 	mov.w	ip, #10
 800ad78:	9a07      	ldr	r2, [sp, #28]
 800ad7a:	4621      	mov	r1, r4
 800ad7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad80:	3b30      	subs	r3, #48	@ 0x30
 800ad82:	2b09      	cmp	r3, #9
 800ad84:	d94b      	bls.n	800ae1e <_vfiprintf_r+0x1a2>
 800ad86:	b1b0      	cbz	r0, 800adb6 <_vfiprintf_r+0x13a>
 800ad88:	9207      	str	r2, [sp, #28]
 800ad8a:	e014      	b.n	800adb6 <_vfiprintf_r+0x13a>
 800ad8c:	eba0 0308 	sub.w	r3, r0, r8
 800ad90:	fa09 f303 	lsl.w	r3, r9, r3
 800ad94:	4313      	orrs	r3, r2
 800ad96:	46a2      	mov	sl, r4
 800ad98:	9304      	str	r3, [sp, #16]
 800ad9a:	e7d2      	b.n	800ad42 <_vfiprintf_r+0xc6>
 800ad9c:	9b03      	ldr	r3, [sp, #12]
 800ad9e:	1d19      	adds	r1, r3, #4
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	9103      	str	r1, [sp, #12]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	bfbb      	ittet	lt
 800ada8:	425b      	neglt	r3, r3
 800adaa:	f042 0202 	orrlt.w	r2, r2, #2
 800adae:	9307      	strge	r3, [sp, #28]
 800adb0:	9307      	strlt	r3, [sp, #28]
 800adb2:	bfb8      	it	lt
 800adb4:	9204      	strlt	r2, [sp, #16]
 800adb6:	7823      	ldrb	r3, [r4, #0]
 800adb8:	2b2e      	cmp	r3, #46	@ 0x2e
 800adba:	d10a      	bne.n	800add2 <_vfiprintf_r+0x156>
 800adbc:	7863      	ldrb	r3, [r4, #1]
 800adbe:	2b2a      	cmp	r3, #42	@ 0x2a
 800adc0:	d132      	bne.n	800ae28 <_vfiprintf_r+0x1ac>
 800adc2:	9b03      	ldr	r3, [sp, #12]
 800adc4:	3402      	adds	r4, #2
 800adc6:	1d1a      	adds	r2, r3, #4
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	9203      	str	r2, [sp, #12]
 800adcc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800add0:	9305      	str	r3, [sp, #20]
 800add2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800ae9c <_vfiprintf_r+0x220>
 800add6:	2203      	movs	r2, #3
 800add8:	4650      	mov	r0, sl
 800adda:	7821      	ldrb	r1, [r4, #0]
 800addc:	f7fe fa3b 	bl	8009256 <memchr>
 800ade0:	b138      	cbz	r0, 800adf2 <_vfiprintf_r+0x176>
 800ade2:	2240      	movs	r2, #64	@ 0x40
 800ade4:	9b04      	ldr	r3, [sp, #16]
 800ade6:	eba0 000a 	sub.w	r0, r0, sl
 800adea:	4082      	lsls	r2, r0
 800adec:	4313      	orrs	r3, r2
 800adee:	3401      	adds	r4, #1
 800adf0:	9304      	str	r3, [sp, #16]
 800adf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adf6:	2206      	movs	r2, #6
 800adf8:	4829      	ldr	r0, [pc, #164]	@ (800aea0 <_vfiprintf_r+0x224>)
 800adfa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800adfe:	f7fe fa2a 	bl	8009256 <memchr>
 800ae02:	2800      	cmp	r0, #0
 800ae04:	d03f      	beq.n	800ae86 <_vfiprintf_r+0x20a>
 800ae06:	4b27      	ldr	r3, [pc, #156]	@ (800aea4 <_vfiprintf_r+0x228>)
 800ae08:	bb1b      	cbnz	r3, 800ae52 <_vfiprintf_r+0x1d6>
 800ae0a:	9b03      	ldr	r3, [sp, #12]
 800ae0c:	3307      	adds	r3, #7
 800ae0e:	f023 0307 	bic.w	r3, r3, #7
 800ae12:	3308      	adds	r3, #8
 800ae14:	9303      	str	r3, [sp, #12]
 800ae16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae18:	443b      	add	r3, r7
 800ae1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae1c:	e76a      	b.n	800acf4 <_vfiprintf_r+0x78>
 800ae1e:	460c      	mov	r4, r1
 800ae20:	2001      	movs	r0, #1
 800ae22:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae26:	e7a8      	b.n	800ad7a <_vfiprintf_r+0xfe>
 800ae28:	2300      	movs	r3, #0
 800ae2a:	f04f 0c0a 	mov.w	ip, #10
 800ae2e:	4619      	mov	r1, r3
 800ae30:	3401      	adds	r4, #1
 800ae32:	9305      	str	r3, [sp, #20]
 800ae34:	4620      	mov	r0, r4
 800ae36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae3a:	3a30      	subs	r2, #48	@ 0x30
 800ae3c:	2a09      	cmp	r2, #9
 800ae3e:	d903      	bls.n	800ae48 <_vfiprintf_r+0x1cc>
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d0c6      	beq.n	800add2 <_vfiprintf_r+0x156>
 800ae44:	9105      	str	r1, [sp, #20]
 800ae46:	e7c4      	b.n	800add2 <_vfiprintf_r+0x156>
 800ae48:	4604      	mov	r4, r0
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae50:	e7f0      	b.n	800ae34 <_vfiprintf_r+0x1b8>
 800ae52:	ab03      	add	r3, sp, #12
 800ae54:	9300      	str	r3, [sp, #0]
 800ae56:	462a      	mov	r2, r5
 800ae58:	4630      	mov	r0, r6
 800ae5a:	4b13      	ldr	r3, [pc, #76]	@ (800aea8 <_vfiprintf_r+0x22c>)
 800ae5c:	a904      	add	r1, sp, #16
 800ae5e:	f7fd fc3b 	bl	80086d8 <_printf_float>
 800ae62:	4607      	mov	r7, r0
 800ae64:	1c78      	adds	r0, r7, #1
 800ae66:	d1d6      	bne.n	800ae16 <_vfiprintf_r+0x19a>
 800ae68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae6a:	07d9      	lsls	r1, r3, #31
 800ae6c:	d405      	bmi.n	800ae7a <_vfiprintf_r+0x1fe>
 800ae6e:	89ab      	ldrh	r3, [r5, #12]
 800ae70:	059a      	lsls	r2, r3, #22
 800ae72:	d402      	bmi.n	800ae7a <_vfiprintf_r+0x1fe>
 800ae74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae76:	f7fe f9e5 	bl	8009244 <__retarget_lock_release_recursive>
 800ae7a:	89ab      	ldrh	r3, [r5, #12]
 800ae7c:	065b      	lsls	r3, r3, #25
 800ae7e:	f53f af1f 	bmi.w	800acc0 <_vfiprintf_r+0x44>
 800ae82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae84:	e71e      	b.n	800acc4 <_vfiprintf_r+0x48>
 800ae86:	ab03      	add	r3, sp, #12
 800ae88:	9300      	str	r3, [sp, #0]
 800ae8a:	462a      	mov	r2, r5
 800ae8c:	4630      	mov	r0, r6
 800ae8e:	4b06      	ldr	r3, [pc, #24]	@ (800aea8 <_vfiprintf_r+0x22c>)
 800ae90:	a904      	add	r1, sp, #16
 800ae92:	f7fd febf 	bl	8008c14 <_printf_i>
 800ae96:	e7e4      	b.n	800ae62 <_vfiprintf_r+0x1e6>
 800ae98:	0800bb10 	.word	0x0800bb10
 800ae9c:	0800bb16 	.word	0x0800bb16
 800aea0:	0800bb1a 	.word	0x0800bb1a
 800aea4:	080086d9 	.word	0x080086d9
 800aea8:	0800ac57 	.word	0x0800ac57

0800aeac <__swbuf_r>:
 800aeac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeae:	460e      	mov	r6, r1
 800aeb0:	4614      	mov	r4, r2
 800aeb2:	4605      	mov	r5, r0
 800aeb4:	b118      	cbz	r0, 800aebe <__swbuf_r+0x12>
 800aeb6:	6a03      	ldr	r3, [r0, #32]
 800aeb8:	b90b      	cbnz	r3, 800aebe <__swbuf_r+0x12>
 800aeba:	f7fe f857 	bl	8008f6c <__sinit>
 800aebe:	69a3      	ldr	r3, [r4, #24]
 800aec0:	60a3      	str	r3, [r4, #8]
 800aec2:	89a3      	ldrh	r3, [r4, #12]
 800aec4:	071a      	lsls	r2, r3, #28
 800aec6:	d501      	bpl.n	800aecc <__swbuf_r+0x20>
 800aec8:	6923      	ldr	r3, [r4, #16]
 800aeca:	b943      	cbnz	r3, 800aede <__swbuf_r+0x32>
 800aecc:	4621      	mov	r1, r4
 800aece:	4628      	mov	r0, r5
 800aed0:	f000 f82a 	bl	800af28 <__swsetup_r>
 800aed4:	b118      	cbz	r0, 800aede <__swbuf_r+0x32>
 800aed6:	f04f 37ff 	mov.w	r7, #4294967295
 800aeda:	4638      	mov	r0, r7
 800aedc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aede:	6823      	ldr	r3, [r4, #0]
 800aee0:	6922      	ldr	r2, [r4, #16]
 800aee2:	b2f6      	uxtb	r6, r6
 800aee4:	1a98      	subs	r0, r3, r2
 800aee6:	6963      	ldr	r3, [r4, #20]
 800aee8:	4637      	mov	r7, r6
 800aeea:	4283      	cmp	r3, r0
 800aeec:	dc05      	bgt.n	800aefa <__swbuf_r+0x4e>
 800aeee:	4621      	mov	r1, r4
 800aef0:	4628      	mov	r0, r5
 800aef2:	f7ff fdb1 	bl	800aa58 <_fflush_r>
 800aef6:	2800      	cmp	r0, #0
 800aef8:	d1ed      	bne.n	800aed6 <__swbuf_r+0x2a>
 800aefa:	68a3      	ldr	r3, [r4, #8]
 800aefc:	3b01      	subs	r3, #1
 800aefe:	60a3      	str	r3, [r4, #8]
 800af00:	6823      	ldr	r3, [r4, #0]
 800af02:	1c5a      	adds	r2, r3, #1
 800af04:	6022      	str	r2, [r4, #0]
 800af06:	701e      	strb	r6, [r3, #0]
 800af08:	6962      	ldr	r2, [r4, #20]
 800af0a:	1c43      	adds	r3, r0, #1
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d004      	beq.n	800af1a <__swbuf_r+0x6e>
 800af10:	89a3      	ldrh	r3, [r4, #12]
 800af12:	07db      	lsls	r3, r3, #31
 800af14:	d5e1      	bpl.n	800aeda <__swbuf_r+0x2e>
 800af16:	2e0a      	cmp	r6, #10
 800af18:	d1df      	bne.n	800aeda <__swbuf_r+0x2e>
 800af1a:	4621      	mov	r1, r4
 800af1c:	4628      	mov	r0, r5
 800af1e:	f7ff fd9b 	bl	800aa58 <_fflush_r>
 800af22:	2800      	cmp	r0, #0
 800af24:	d0d9      	beq.n	800aeda <__swbuf_r+0x2e>
 800af26:	e7d6      	b.n	800aed6 <__swbuf_r+0x2a>

0800af28 <__swsetup_r>:
 800af28:	b538      	push	{r3, r4, r5, lr}
 800af2a:	4b29      	ldr	r3, [pc, #164]	@ (800afd0 <__swsetup_r+0xa8>)
 800af2c:	4605      	mov	r5, r0
 800af2e:	6818      	ldr	r0, [r3, #0]
 800af30:	460c      	mov	r4, r1
 800af32:	b118      	cbz	r0, 800af3c <__swsetup_r+0x14>
 800af34:	6a03      	ldr	r3, [r0, #32]
 800af36:	b90b      	cbnz	r3, 800af3c <__swsetup_r+0x14>
 800af38:	f7fe f818 	bl	8008f6c <__sinit>
 800af3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af40:	0719      	lsls	r1, r3, #28
 800af42:	d422      	bmi.n	800af8a <__swsetup_r+0x62>
 800af44:	06da      	lsls	r2, r3, #27
 800af46:	d407      	bmi.n	800af58 <__swsetup_r+0x30>
 800af48:	2209      	movs	r2, #9
 800af4a:	602a      	str	r2, [r5, #0]
 800af4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af50:	f04f 30ff 	mov.w	r0, #4294967295
 800af54:	81a3      	strh	r3, [r4, #12]
 800af56:	e033      	b.n	800afc0 <__swsetup_r+0x98>
 800af58:	0758      	lsls	r0, r3, #29
 800af5a:	d512      	bpl.n	800af82 <__swsetup_r+0x5a>
 800af5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af5e:	b141      	cbz	r1, 800af72 <__swsetup_r+0x4a>
 800af60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af64:	4299      	cmp	r1, r3
 800af66:	d002      	beq.n	800af6e <__swsetup_r+0x46>
 800af68:	4628      	mov	r0, r5
 800af6a:	f7fe ffd5 	bl	8009f18 <_free_r>
 800af6e:	2300      	movs	r3, #0
 800af70:	6363      	str	r3, [r4, #52]	@ 0x34
 800af72:	89a3      	ldrh	r3, [r4, #12]
 800af74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800af78:	81a3      	strh	r3, [r4, #12]
 800af7a:	2300      	movs	r3, #0
 800af7c:	6063      	str	r3, [r4, #4]
 800af7e:	6923      	ldr	r3, [r4, #16]
 800af80:	6023      	str	r3, [r4, #0]
 800af82:	89a3      	ldrh	r3, [r4, #12]
 800af84:	f043 0308 	orr.w	r3, r3, #8
 800af88:	81a3      	strh	r3, [r4, #12]
 800af8a:	6923      	ldr	r3, [r4, #16]
 800af8c:	b94b      	cbnz	r3, 800afa2 <__swsetup_r+0x7a>
 800af8e:	89a3      	ldrh	r3, [r4, #12]
 800af90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800af94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af98:	d003      	beq.n	800afa2 <__swsetup_r+0x7a>
 800af9a:	4621      	mov	r1, r4
 800af9c:	4628      	mov	r0, r5
 800af9e:	f000 f83e 	bl	800b01e <__smakebuf_r>
 800afa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afa6:	f013 0201 	ands.w	r2, r3, #1
 800afaa:	d00a      	beq.n	800afc2 <__swsetup_r+0x9a>
 800afac:	2200      	movs	r2, #0
 800afae:	60a2      	str	r2, [r4, #8]
 800afb0:	6962      	ldr	r2, [r4, #20]
 800afb2:	4252      	negs	r2, r2
 800afb4:	61a2      	str	r2, [r4, #24]
 800afb6:	6922      	ldr	r2, [r4, #16]
 800afb8:	b942      	cbnz	r2, 800afcc <__swsetup_r+0xa4>
 800afba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800afbe:	d1c5      	bne.n	800af4c <__swsetup_r+0x24>
 800afc0:	bd38      	pop	{r3, r4, r5, pc}
 800afc2:	0799      	lsls	r1, r3, #30
 800afc4:	bf58      	it	pl
 800afc6:	6962      	ldrpl	r2, [r4, #20]
 800afc8:	60a2      	str	r2, [r4, #8]
 800afca:	e7f4      	b.n	800afb6 <__swsetup_r+0x8e>
 800afcc:	2000      	movs	r0, #0
 800afce:	e7f7      	b.n	800afc0 <__swsetup_r+0x98>
 800afd0:	2000001c 	.word	0x2000001c

0800afd4 <__swhatbuf_r>:
 800afd4:	b570      	push	{r4, r5, r6, lr}
 800afd6:	460c      	mov	r4, r1
 800afd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afdc:	4615      	mov	r5, r2
 800afde:	2900      	cmp	r1, #0
 800afe0:	461e      	mov	r6, r3
 800afe2:	b096      	sub	sp, #88	@ 0x58
 800afe4:	da0c      	bge.n	800b000 <__swhatbuf_r+0x2c>
 800afe6:	89a3      	ldrh	r3, [r4, #12]
 800afe8:	2100      	movs	r1, #0
 800afea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800afee:	bf14      	ite	ne
 800aff0:	2340      	movne	r3, #64	@ 0x40
 800aff2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aff6:	2000      	movs	r0, #0
 800aff8:	6031      	str	r1, [r6, #0]
 800affa:	602b      	str	r3, [r5, #0]
 800affc:	b016      	add	sp, #88	@ 0x58
 800affe:	bd70      	pop	{r4, r5, r6, pc}
 800b000:	466a      	mov	r2, sp
 800b002:	f000 f849 	bl	800b098 <_fstat_r>
 800b006:	2800      	cmp	r0, #0
 800b008:	dbed      	blt.n	800afe6 <__swhatbuf_r+0x12>
 800b00a:	9901      	ldr	r1, [sp, #4]
 800b00c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b010:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b014:	4259      	negs	r1, r3
 800b016:	4159      	adcs	r1, r3
 800b018:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b01c:	e7eb      	b.n	800aff6 <__swhatbuf_r+0x22>

0800b01e <__smakebuf_r>:
 800b01e:	898b      	ldrh	r3, [r1, #12]
 800b020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b022:	079d      	lsls	r5, r3, #30
 800b024:	4606      	mov	r6, r0
 800b026:	460c      	mov	r4, r1
 800b028:	d507      	bpl.n	800b03a <__smakebuf_r+0x1c>
 800b02a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b02e:	6023      	str	r3, [r4, #0]
 800b030:	6123      	str	r3, [r4, #16]
 800b032:	2301      	movs	r3, #1
 800b034:	6163      	str	r3, [r4, #20]
 800b036:	b003      	add	sp, #12
 800b038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b03a:	466a      	mov	r2, sp
 800b03c:	ab01      	add	r3, sp, #4
 800b03e:	f7ff ffc9 	bl	800afd4 <__swhatbuf_r>
 800b042:	9f00      	ldr	r7, [sp, #0]
 800b044:	4605      	mov	r5, r0
 800b046:	4639      	mov	r1, r7
 800b048:	4630      	mov	r0, r6
 800b04a:	f7fd fa1b 	bl	8008484 <_malloc_r>
 800b04e:	b948      	cbnz	r0, 800b064 <__smakebuf_r+0x46>
 800b050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b054:	059a      	lsls	r2, r3, #22
 800b056:	d4ee      	bmi.n	800b036 <__smakebuf_r+0x18>
 800b058:	f023 0303 	bic.w	r3, r3, #3
 800b05c:	f043 0302 	orr.w	r3, r3, #2
 800b060:	81a3      	strh	r3, [r4, #12]
 800b062:	e7e2      	b.n	800b02a <__smakebuf_r+0xc>
 800b064:	89a3      	ldrh	r3, [r4, #12]
 800b066:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b06a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b06e:	81a3      	strh	r3, [r4, #12]
 800b070:	9b01      	ldr	r3, [sp, #4]
 800b072:	6020      	str	r0, [r4, #0]
 800b074:	b15b      	cbz	r3, 800b08e <__smakebuf_r+0x70>
 800b076:	4630      	mov	r0, r6
 800b078:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b07c:	f000 f81e 	bl	800b0bc <_isatty_r>
 800b080:	b128      	cbz	r0, 800b08e <__smakebuf_r+0x70>
 800b082:	89a3      	ldrh	r3, [r4, #12]
 800b084:	f023 0303 	bic.w	r3, r3, #3
 800b088:	f043 0301 	orr.w	r3, r3, #1
 800b08c:	81a3      	strh	r3, [r4, #12]
 800b08e:	89a3      	ldrh	r3, [r4, #12]
 800b090:	431d      	orrs	r5, r3
 800b092:	81a5      	strh	r5, [r4, #12]
 800b094:	e7cf      	b.n	800b036 <__smakebuf_r+0x18>
	...

0800b098 <_fstat_r>:
 800b098:	b538      	push	{r3, r4, r5, lr}
 800b09a:	2300      	movs	r3, #0
 800b09c:	4d06      	ldr	r5, [pc, #24]	@ (800b0b8 <_fstat_r+0x20>)
 800b09e:	4604      	mov	r4, r0
 800b0a0:	4608      	mov	r0, r1
 800b0a2:	4611      	mov	r1, r2
 800b0a4:	602b      	str	r3, [r5, #0]
 800b0a6:	f7fa fb11 	bl	80056cc <_fstat>
 800b0aa:	1c43      	adds	r3, r0, #1
 800b0ac:	d102      	bne.n	800b0b4 <_fstat_r+0x1c>
 800b0ae:	682b      	ldr	r3, [r5, #0]
 800b0b0:	b103      	cbz	r3, 800b0b4 <_fstat_r+0x1c>
 800b0b2:	6023      	str	r3, [r4, #0]
 800b0b4:	bd38      	pop	{r3, r4, r5, pc}
 800b0b6:	bf00      	nop
 800b0b8:	2000054c 	.word	0x2000054c

0800b0bc <_isatty_r>:
 800b0bc:	b538      	push	{r3, r4, r5, lr}
 800b0be:	2300      	movs	r3, #0
 800b0c0:	4d05      	ldr	r5, [pc, #20]	@ (800b0d8 <_isatty_r+0x1c>)
 800b0c2:	4604      	mov	r4, r0
 800b0c4:	4608      	mov	r0, r1
 800b0c6:	602b      	str	r3, [r5, #0]
 800b0c8:	f7fa fb0f 	bl	80056ea <_isatty>
 800b0cc:	1c43      	adds	r3, r0, #1
 800b0ce:	d102      	bne.n	800b0d6 <_isatty_r+0x1a>
 800b0d0:	682b      	ldr	r3, [r5, #0]
 800b0d2:	b103      	cbz	r3, 800b0d6 <_isatty_r+0x1a>
 800b0d4:	6023      	str	r3, [r4, #0]
 800b0d6:	bd38      	pop	{r3, r4, r5, pc}
 800b0d8:	2000054c 	.word	0x2000054c

0800b0dc <_init>:
 800b0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0de:	bf00      	nop
 800b0e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0e2:	bc08      	pop	{r3}
 800b0e4:	469e      	mov	lr, r3
 800b0e6:	4770      	bx	lr

0800b0e8 <_fini>:
 800b0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ea:	bf00      	nop
 800b0ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ee:	bc08      	pop	{r3}
 800b0f0:	469e      	mov	lr, r3
 800b0f2:	4770      	bx	lr

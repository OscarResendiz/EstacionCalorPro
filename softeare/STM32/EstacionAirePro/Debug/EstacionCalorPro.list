
EstacionCalorPro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b57c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bd0  0800b690  0800b690  0000c690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c260  0800c260  0000e1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c260  0800c260  0000d260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c268  0800c268  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c268  0800c268  0000d268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c26c  0800c26c  0000d26c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800c270  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  200001d8  0800c448  0000e1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  0800c448  0000e550  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e3f6  00000000  00000000  0000e201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006056  00000000  00000000  0002c5f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c88  00000000  00000000  00032650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001589  00000000  00000000  000342d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ef17  00000000  00000000  00035861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eca0  00000000  00000000  00054778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ae75  00000000  00000000  00073418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010e28d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000087c0  00000000  00000000  0010e2d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00116a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b674 	.word	0x0800b674

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800b674 	.word	0x0800b674

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_frsub>:
 8000bf0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bf4:	e002      	b.n	8000bfc <__addsf3>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fsub>:
 8000bf8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bfc <__addsf3>:
 8000bfc:	0042      	lsls	r2, r0, #1
 8000bfe:	bf1f      	itttt	ne
 8000c00:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c04:	ea92 0f03 	teqne	r2, r3
 8000c08:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c0c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c10:	d06a      	beq.n	8000ce8 <__addsf3+0xec>
 8000c12:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c16:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1a:	bfc1      	itttt	gt
 8000c1c:	18d2      	addgt	r2, r2, r3
 8000c1e:	4041      	eorgt	r1, r0
 8000c20:	4048      	eorgt	r0, r1
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	bfb8      	it	lt
 8000c26:	425b      	neglt	r3, r3
 8000c28:	2b19      	cmp	r3, #25
 8000c2a:	bf88      	it	hi
 8000c2c:	4770      	bxhi	lr
 8000c2e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c36:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4240      	negne	r0, r0
 8000c3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c42:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c46:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4249      	negne	r1, r1
 8000c4e:	ea92 0f03 	teq	r2, r3
 8000c52:	d03f      	beq.n	8000cd4 <__addsf3+0xd8>
 8000c54:	f1a2 0201 	sub.w	r2, r2, #1
 8000c58:	fa41 fc03 	asr.w	ip, r1, r3
 8000c5c:	eb10 000c 	adds.w	r0, r0, ip
 8000c60:	f1c3 0320 	rsb	r3, r3, #32
 8000c64:	fa01 f103 	lsl.w	r1, r1, r3
 8000c68:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6c:	d502      	bpl.n	8000c74 <__addsf3+0x78>
 8000c6e:	4249      	negs	r1, r1
 8000c70:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c74:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c78:	d313      	bcc.n	8000ca2 <__addsf3+0xa6>
 8000c7a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c7e:	d306      	bcc.n	8000c8e <__addsf3+0x92>
 8000c80:	0840      	lsrs	r0, r0, #1
 8000c82:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c86:	f102 0201 	add.w	r2, r2, #1
 8000c8a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c8c:	d251      	bcs.n	8000d32 <__addsf3+0x136>
 8000c8e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	ea40 0003 	orr.w	r0, r0, r3
 8000ca0:	4770      	bx	lr
 8000ca2:	0049      	lsls	r1, r1, #1
 8000ca4:	eb40 0000 	adc.w	r0, r0, r0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	bf28      	it	cs
 8000cac:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cb0:	d2ed      	bcs.n	8000c8e <__addsf3+0x92>
 8000cb2:	fab0 fc80 	clz	ip, r0
 8000cb6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cba:	ebb2 020c 	subs.w	r2, r2, ip
 8000cbe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc2:	bfaa      	itet	ge
 8000cc4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc8:	4252      	neglt	r2, r2
 8000cca:	4318      	orrge	r0, r3
 8000ccc:	bfbc      	itt	lt
 8000cce:	40d0      	lsrlt	r0, r2
 8000cd0:	4318      	orrlt	r0, r3
 8000cd2:	4770      	bx	lr
 8000cd4:	f092 0f00 	teq	r2, #0
 8000cd8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cdc:	bf06      	itte	eq
 8000cde:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ce2:	3201      	addeq	r2, #1
 8000ce4:	3b01      	subne	r3, #1
 8000ce6:	e7b5      	b.n	8000c54 <__addsf3+0x58>
 8000ce8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf0:	bf18      	it	ne
 8000cf2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf6:	d021      	beq.n	8000d3c <__addsf3+0x140>
 8000cf8:	ea92 0f03 	teq	r2, r3
 8000cfc:	d004      	beq.n	8000d08 <__addsf3+0x10c>
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	bf08      	it	eq
 8000d04:	4608      	moveq	r0, r1
 8000d06:	4770      	bx	lr
 8000d08:	ea90 0f01 	teq	r0, r1
 8000d0c:	bf1c      	itt	ne
 8000d0e:	2000      	movne	r0, #0
 8000d10:	4770      	bxne	lr
 8000d12:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d16:	d104      	bne.n	8000d22 <__addsf3+0x126>
 8000d18:	0040      	lsls	r0, r0, #1
 8000d1a:	bf28      	it	cs
 8000d1c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d20:	4770      	bx	lr
 8000d22:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d26:	bf3c      	itt	cc
 8000d28:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d2c:	4770      	bxcc	lr
 8000d2e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d32:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d36:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d3a:	4770      	bx	lr
 8000d3c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d40:	bf16      	itet	ne
 8000d42:	4608      	movne	r0, r1
 8000d44:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d48:	4601      	movne	r1, r0
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	bf06      	itte	eq
 8000d4e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d52:	ea90 0f01 	teqeq	r0, r1
 8000d56:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_ui2f>:
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e004      	b.n	8000d6c <__aeabi_i2f+0x8>
 8000d62:	bf00      	nop

08000d64 <__aeabi_i2f>:
 8000d64:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d68:	bf48      	it	mi
 8000d6a:	4240      	negmi	r0, r0
 8000d6c:	ea5f 0c00 	movs.w	ip, r0
 8000d70:	bf08      	it	eq
 8000d72:	4770      	bxeq	lr
 8000d74:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d78:	4601      	mov	r1, r0
 8000d7a:	f04f 0000 	mov.w	r0, #0
 8000d7e:	e01c      	b.n	8000dba <__aeabi_l2f+0x2a>

08000d80 <__aeabi_ul2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e00a      	b.n	8000da4 <__aeabi_l2f+0x14>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_l2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d9c:	d502      	bpl.n	8000da4 <__aeabi_l2f+0x14>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	ea5f 0c01 	movs.w	ip, r1
 8000da8:	bf02      	ittt	eq
 8000daa:	4684      	moveq	ip, r0
 8000dac:	4601      	moveq	r1, r0
 8000dae:	2000      	moveq	r0, #0
 8000db0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000db4:	bf08      	it	eq
 8000db6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dba:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dbe:	fabc f28c 	clz	r2, ip
 8000dc2:	3a08      	subs	r2, #8
 8000dc4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc8:	db10      	blt.n	8000dec <__aeabi_l2f+0x5c>
 8000dca:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dce:	4463      	add	r3, ip
 8000dd0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	f020 0001 	biceq.w	r0, r0, #1
 8000dea:	4770      	bx	lr
 8000dec:	f102 0220 	add.w	r2, r2, #32
 8000df0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df4:	f1c2 0220 	rsb	r2, r2, #32
 8000df8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dfc:	fa21 f202 	lsr.w	r2, r1, r2
 8000e00:	eb43 0002 	adc.w	r0, r3, r2
 8000e04:	bf08      	it	eq
 8000e06:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0a:	4770      	bx	lr

08000e0c <__gesf2>:
 8000e0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000e10:	e006      	b.n	8000e20 <__cmpsf2+0x4>
 8000e12:	bf00      	nop

08000e14 <__lesf2>:
 8000e14:	f04f 0c01 	mov.w	ip, #1
 8000e18:	e002      	b.n	8000e20 <__cmpsf2+0x4>
 8000e1a:	bf00      	nop

08000e1c <__cmpsf2>:
 8000e1c:	f04f 0c01 	mov.w	ip, #1
 8000e20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e24:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e28:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e30:	bf18      	it	ne
 8000e32:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e36:	d011      	beq.n	8000e5c <__cmpsf2+0x40>
 8000e38:	b001      	add	sp, #4
 8000e3a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e3e:	bf18      	it	ne
 8000e40:	ea90 0f01 	teqne	r0, r1
 8000e44:	bf58      	it	pl
 8000e46:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e4a:	bf88      	it	hi
 8000e4c:	17c8      	asrhi	r0, r1, #31
 8000e4e:	bf38      	it	cc
 8000e50:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e54:	bf18      	it	ne
 8000e56:	f040 0001 	orrne.w	r0, r0, #1
 8000e5a:	4770      	bx	lr
 8000e5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e60:	d102      	bne.n	8000e68 <__cmpsf2+0x4c>
 8000e62:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e66:	d105      	bne.n	8000e74 <__cmpsf2+0x58>
 8000e68:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e6c:	d1e4      	bne.n	8000e38 <__cmpsf2+0x1c>
 8000e6e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e72:	d0e1      	beq.n	8000e38 <__cmpsf2+0x1c>
 8000e74:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <__aeabi_cfrcmple>:
 8000e7c:	4684      	mov	ip, r0
 8000e7e:	4608      	mov	r0, r1
 8000e80:	4661      	mov	r1, ip
 8000e82:	e7ff      	b.n	8000e84 <__aeabi_cfcmpeq>

08000e84 <__aeabi_cfcmpeq>:
 8000e84:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e86:	f7ff ffc9 	bl	8000e1c <__cmpsf2>
 8000e8a:	2800      	cmp	r0, #0
 8000e8c:	bf48      	it	mi
 8000e8e:	f110 0f00 	cmnmi.w	r0, #0
 8000e92:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e94 <__aeabi_fcmpeq>:
 8000e94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e98:	f7ff fff4 	bl	8000e84 <__aeabi_cfcmpeq>
 8000e9c:	bf0c      	ite	eq
 8000e9e:	2001      	moveq	r0, #1
 8000ea0:	2000      	movne	r0, #0
 8000ea2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_fcmplt>:
 8000ea8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eac:	f7ff ffea 	bl	8000e84 <__aeabi_cfcmpeq>
 8000eb0:	bf34      	ite	cc
 8000eb2:	2001      	movcc	r0, #1
 8000eb4:	2000      	movcs	r0, #0
 8000eb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eba:	bf00      	nop

08000ebc <__aeabi_fcmple>:
 8000ebc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec0:	f7ff ffe0 	bl	8000e84 <__aeabi_cfcmpeq>
 8000ec4:	bf94      	ite	ls
 8000ec6:	2001      	movls	r0, #1
 8000ec8:	2000      	movhi	r0, #0
 8000eca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ece:	bf00      	nop

08000ed0 <__aeabi_fcmpge>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff ffd2 	bl	8000e7c <__aeabi_cfrcmple>
 8000ed8:	bf94      	ite	ls
 8000eda:	2001      	movls	r0, #1
 8000edc:	2000      	movhi	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmpgt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffc8 	bl	8000e7c <__aeabi_cfrcmple>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_f2iz>:
 8000ef8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000efc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f00:	d30f      	bcc.n	8000f22 <__aeabi_f2iz+0x2a>
 8000f02:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f06:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f0a:	d90d      	bls.n	8000f28 <__aeabi_f2iz+0x30>
 8000f0c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f10:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f14:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000f18:	fa23 f002 	lsr.w	r0, r3, r2
 8000f1c:	bf18      	it	ne
 8000f1e:	4240      	negne	r0, r0
 8000f20:	4770      	bx	lr
 8000f22:	f04f 0000 	mov.w	r0, #0
 8000f26:	4770      	bx	lr
 8000f28:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f2c:	d101      	bne.n	8000f32 <__aeabi_f2iz+0x3a>
 8000f2e:	0242      	lsls	r2, r0, #9
 8000f30:	d105      	bne.n	8000f3e <__aeabi_f2iz+0x46>
 8000f32:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000f36:	bf08      	it	eq
 8000f38:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000f3c:	4770      	bx	lr
 8000f3e:	f04f 0000 	mov.w	r0, #0
 8000f42:	4770      	bx	lr

08000f44 <_ZN15CManejadorBotonC1Ev>:
 */

#include "Boton/CManejadorBoton.hpp"
#include "Constantes.hpp"

CManejadorBoton::CManejadorBoton()
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f7c <_ZN15CManejadorBotonC1Ev+0x38>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2201      	movs	r2, #1
 8000f56:	60da      	str	r2, [r3, #12]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	611a      	str	r2, [r3, #16]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	615a      	str	r2, [r3, #20]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	619a      	str	r2, [r3, #24]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	61da      	str	r2, [r3, #28]
{
	// TODO Auto-generated constructor stub

}
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr
 8000f7c:	0800b718 	.word	0x0800b718

08000f80 <_ZN15CManejadorBotonD1Ev>:

CManejadorBoton::~CManejadorBoton()
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	4a04      	ldr	r2, [pc, #16]	@ (8000f9c <_ZN15CManejadorBotonD1Ev+0x1c>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4618      	mov	r0, r3
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	0800b718 	.word	0x0800b718

08000fa0 <_ZN15CManejadorBotonD0Ev>:
CManejadorBoton::~CManejadorBoton()
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
}
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff ffe9 	bl	8000f80 <_ZN15CManejadorBotonD1Ev>
 8000fae:	2120      	movs	r1, #32
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f007 fcdb 	bl	800896c <_ZdlPvj>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>:

void CManejadorBoton::Configurar(GPIO_TypeDef *puerto, uint16_t pin,uint8_t identificador)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	4611      	mov	r1, r2
 8000fcc:	461a      	mov	r2, r3
 8000fce:	460b      	mov	r3, r1
 8000fd0:	80fb      	strh	r3, [r7, #6]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	717b      	strb	r3, [r7, #5]
	GPIO_Port = puerto;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	68ba      	ldr	r2, [r7, #8]
 8000fda:	605a      	str	r2, [r3, #4]
	Gpio_Pin = pin;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	88fa      	ldrh	r2, [r7, #6]
 8000fe0:	811a      	strh	r2, [r3, #8]
	Identificador = identificador;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	797a      	ldrb	r2, [r7, #5]
 8000fe6:	729a      	strb	r2, [r3, #10]
}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr

08000ff2 <_ZN15CManejadorBoton4InitEv>:
void CManejadorBoton::Init()
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b086      	sub	sp, #24
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 8000ffa:	f107 0308 	add.w	r3, r7, #8
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
	{ 0 };
	GPIO_InitStruct.Pin = Gpio_Pin;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	891b      	ldrh	r3, [r3, #8]
 800100c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f107 0208 	add.w	r2, r7, #8
 800101e:	4611      	mov	r1, r2
 8001020:	4618      	mov	r0, r3
 8001022:	f005 fb61 	bl	80066e8 <HAL_GPIO_Init>
}
 8001026:	bf00      	nop
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <_ZN15CManejadorBoton4LeerEv>:
int CManejadorBoton::Leer()
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(GPIO_Port, Gpio_Pin); // lee el pin
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685a      	ldr	r2, [r3, #4]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	891b      	ldrh	r3, [r3, #8]
 800103e:	4619      	mov	r1, r3
 8001040:	4610      	mov	r0, r2
 8001042:	f005 fcd5 	bl	80069f0 <HAL_GPIO_ReadPin>
 8001046:	4603      	mov	r3, r0

}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>:
void CManejadorBoton::AsignaManejadorEventos(CManejadorEventosBoton *manejador)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
	Manejador = manejador;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	61da      	str	r2, [r3, #28]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr

0800106a <_ZN15CManejadorBoton7ProcesaEv>:
void CManejadorBoton::Procesa()
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b086      	sub	sp, #24
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
	int tiempoClick = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
	int estado = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
	if (Manejador == NULL)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d07e      	beq.n	8001180 <_ZN15CManejadorBoton7ProcesaEv+0x116>
	{
		return;
	}
	estado = Leer();
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ffd3 	bl	800102e <_ZN15CManejadorBoton4LeerEv>
 8001088:	6138      	str	r0, [r7, #16]

	if (Estado == estado)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	429a      	cmp	r2, r3
 8001092:	d121      	bne.n	80010d8 <_ZN15CManejadorBoton7ProcesaEv+0x6e>
	{
		if (Estado == BOTON_PRESIONADO)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d173      	bne.n	8001184 <_ZN15CManejadorBoton7ProcesaEv+0x11a>
		{
			tiempoClick = HAL_GetTick() - TiempoInicioClick;
 800109c:	f004 fec2 	bl	8005e24 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	617b      	str	r3, [r7, #20]
			if (tiempoClick >= TIRMPO_MILIS_BOTON_PRESIONADO_LARGO)
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	f241 3287 	movw	r2, #4999	@ 0x1387
 80010b0:	4293      	cmp	r3, r2
 80010b2:	dd67      	ble.n	8001184 <_ZN15CManejadorBoton7ProcesaEv+0x11a>
			{
				TiempoInicioClick = HAL_GetTick();
 80010b4:	f004 feb6 	bl	8005e24 <HAL_GetTick>
 80010b8:	4603      	mov	r3, r0
 80010ba:	461a      	mov	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	619a      	str	r2, [r3, #24]
				Manejador->OnBotonPresionadoLargoEvent(Identificador);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69d8      	ldr	r0, [r3, #28]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	69db      	ldr	r3, [r3, #28]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	3314      	adds	r3, #20
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	7a92      	ldrb	r2, [r2, #10]
 80010d2:	4611      	mov	r1, r2
 80010d4:	4798      	blx	r3
			}
		}
		//no ha cambiado por lo que no hay evento que informar
		return;
 80010d6:	e055      	b.n	8001184 <_ZN15CManejadorBoton7ProcesaEv+0x11a>
	}
	if (estado != PreEstado)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	691b      	ldr	r3, [r3, #16]
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d009      	beq.n	80010f6 <_ZN15CManejadorBoton7ProcesaEv+0x8c>
	{
		//acaba de cambiar
		ReboteMilis = HAL_GetTick();  //leo el tiempo actual
 80010e2:	f004 fe9f 	bl	8005e24 <HAL_GetTick>
 80010e6:	4603      	mov	r3, r0
 80010e8:	461a      	mov	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	615a      	str	r2, [r3, #20]
		PreEstado = estado;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	611a      	str	r2, [r3, #16]
		return;
 80010f4:	e049      	b.n	800118a <_ZN15CManejadorBoton7ProcesaEv+0x120>
	}
	//leo el tiempo actual
	int tiempo = HAL_GetTick();
 80010f6:	f004 fe95 	bl	8005e24 <HAL_GetTick>
 80010fa:	4603      	mov	r3, r0
 80010fc:	60fb      	str	r3, [r7, #12]
	if ((tiempo - ReboteMilis) < TIEMPO_REBOTE)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b63      	cmp	r3, #99	@ 0x63
 8001108:	dd3e      	ble.n	8001188 <_ZN15CManejadorBoton7ProcesaEv+0x11e>
	{
		//como todavia no pasa el tiempo de espera para evitar rebotes no hago nada
		return;
	}
	//ya filtre los rebotes, por lo que ahora si informo del cambio de estado del boton
	Estado = estado;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	60da      	str	r2, [r3, #12]
	if (Estado == BOTON_SUELTO)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d11d      	bne.n	8001154 <_ZN15CManejadorBoton7ProcesaEv+0xea>
	{
		Manejador->OnBotonSueltoEvent(Identificador);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69d8      	ldr	r0, [r3, #28]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	69db      	ldr	r3, [r3, #28]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	3310      	adds	r3, #16
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	7a92      	ldrb	r2, [r2, #10]
 800112a:	4611      	mov	r1, r2
 800112c:	4798      	blx	r3
		tiempoClick = HAL_GetTick() - TiempoInicioClick;
 800112e:	f004 fe79 	bl	8005e24 <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	617b      	str	r3, [r7, #20]
		Manejador->OnBotonClickEvent(Identificador, tiempoClick);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	69d8      	ldr	r0, [r3, #28]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	69db      	ldr	r3, [r3, #28]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	3308      	adds	r3, #8
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	7a92      	ldrb	r2, [r2, #10]
 800114e:	4611      	mov	r1, r2
 8001150:	697a      	ldr	r2, [r7, #20]
 8001152:	4798      	blx	r3
	}
	if (Estado == BOTON_PRESIONADO)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d116      	bne.n	800118a <_ZN15CManejadorBoton7ProcesaEv+0x120>
	{
		TiempoInicioClick = HAL_GetTick();
 800115c:	f004 fe62 	bl	8005e24 <HAL_GetTick>
 8001160:	4603      	mov	r3, r0
 8001162:	461a      	mov	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	619a      	str	r2, [r3, #24]
		Manejador->OnBotonPresionadoEvent(Identificador);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69d8      	ldr	r0, [r3, #28]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	69db      	ldr	r3, [r3, #28]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	330c      	adds	r3, #12
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	7a92      	ldrb	r2, [r2, #10]
 800117a:	4611      	mov	r1, r2
 800117c:	4798      	blx	r3
 800117e:	e004      	b.n	800118a <_ZN15CManejadorBoton7ProcesaEv+0x120>
		return;
 8001180:	bf00      	nop
 8001182:	e002      	b.n	800118a <_ZN15CManejadorBoton7ProcesaEv+0x120>
		return;
 8001184:	bf00      	nop
 8001186:	e000      	b.n	800118a <_ZN15CManejadorBoton7ProcesaEv+0x120>
		return;
 8001188:	bf00      	nop
	}
}
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <_ZN22CManejadorEventosBotonC1Ev>:
 *      Author: W10
 */

#include "Boton/CManejadorEventosBoton.hpp"

CManejadorEventosBoton::CManejadorEventosBoton()
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	4a04      	ldr	r2, [pc, #16]	@ (80011ac <_ZN22CManejadorEventosBotonC1Ev+0x1c>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4618      	mov	r0, r3
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	0800b728 	.word	0x0800b728

080011b0 <_ZN22CManejadorEventosBotonD1Ev>:

CManejadorEventosBoton::~CManejadorEventosBoton()
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	4a04      	ldr	r2, [pc, #16]	@ (80011cc <_ZN22CManejadorEventosBotonD1Ev+0x1c>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4618      	mov	r0, r3
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	0800b728 	.word	0x0800b728

080011d0 <_ZN22CManejadorEventosBotonD0Ev>:
CManejadorEventosBoton::~CManejadorEventosBoton()
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
}
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ffe9 	bl	80011b0 <_ZN22CManejadorEventosBotonD1Ev>
 80011de:	2104      	movs	r1, #4
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f007 fbc3 	bl	800896c <_ZdlPvj>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <_ZN22CManejadorEventosBoton17OnBotonClickEventEii>:

void CManejadorEventosBoton::OnBotonClickEvent(int idBoton, int tiempoClick)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]

}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr

08001206 <_ZN22CManejadorEventosBoton22OnBotonPresionadoEventEi>:
 void CManejadorEventosBoton::OnBotonPresionadoEvent(int idBoton)
 {
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	6039      	str	r1, [r7, #0]

 }
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr

0800121a <_ZN22CManejadorEventosBoton18OnBotonSueltoEventEi>:
 void CManejadorEventosBoton::OnBotonSueltoEvent(int idBoton)
 {
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	6039      	str	r1, [r7, #0]

 }
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr

0800122e <_ZN22CManejadorEventosBoton27OnBotonPresionadoLargoEventEi>:
 void CManejadorEventosBoton::OnBotonPresionadoLargoEvent(int idBoton)
 {
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
 8001236:	6039      	str	r1, [r7, #0]

 }
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
	...

08001244 <_ZN10CalefactorC1Ev>:
 *      Author: W10
 */

#include <Calefactor/Calefactor.hpp>

Calefactor::Calefactor()
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	4a05      	ldr	r2, [pc, #20]	@ (8001264 <_ZN10CalefactorC1Ev+0x20>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	60da      	str	r2, [r3, #12]
{
	// TODO Auto-generated constructor stub

}
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr
 8001264:	0800b748 	.word	0x0800b748

08001268 <_ZN10CalefactorD1Ev>:

Calefactor::~Calefactor()
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	4a04      	ldr	r2, [pc, #16]	@ (8001284 <_ZN10CalefactorD1Ev+0x1c>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4618      	mov	r0, r3
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	0800b748 	.word	0x0800b748

08001288 <_ZN10CalefactorD0Ev>:
Calefactor::~Calefactor()
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
}
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ffe9 	bl	8001268 <_ZN10CalefactorD1Ev>
 8001296:	2110      	movs	r1, #16
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f007 fb67 	bl	800896c <_ZdlPvj>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <_ZN10Calefactor10ConfigurarEP12GPIO_TypeDeft>:

void Calefactor::Configurar(GPIO_TypeDef *puerto, uint16_t pin)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	4613      	mov	r3, r2
 80012b4:	80fb      	strh	r3, [r7, #6]
	GPIO_Port = puerto;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	68ba      	ldr	r2, [r7, #8]
 80012ba:	605a      	str	r2, [r3, #4]
	Gpio_Pin = pin;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	88fa      	ldrh	r2, [r7, #6]
 80012c0:	811a      	strh	r2, [r3, #8]

}
 80012c2:	bf00      	nop
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr

080012cc <_ZN10Calefactor4InitEv>:
void Calefactor::Init()
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =	{ 0 };
 80012d4:	f107 0308 	add.w	r3, r7, #8
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = Gpio_Pin;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	891b      	ldrh	r3, [r3, #8]
 80012e6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2302      	movs	r3, #2
 80012f2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f107 0208 	add.w	r2, r7, #8
 80012fc:	4611      	mov	r1, r2
 80012fe:	4618      	mov	r0, r3
 8001300:	f005 f9f2 	bl	80066e8 <HAL_GPIO_Init>
}
 8001304:	bf00      	nop
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <_ZN10Calefactor8EncenderEv>:
void Calefactor::Encender()
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO_Port, Gpio_Pin,	GPIO_PinState::GPIO_PIN_SET); //Habilita el modulo
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6858      	ldr	r0, [r3, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	891b      	ldrh	r3, [r3, #8]
 800131c:	2201      	movs	r2, #1
 800131e:	4619      	mov	r1, r3
 8001320:	f005 fb7d 	bl	8006a1e <HAL_GPIO_WritePin>
	Estado=ENCENDIDO;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2201      	movs	r2, #1
 8001328:	60da      	str	r2, [r3, #12]
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <_ZN10Calefactor6ApagarEv>:
void Calefactor::Apagar()
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO_Port, Gpio_Pin,	GPIO_PinState::GPIO_PIN_RESET); //Habilita el modulo
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6858      	ldr	r0, [r3, #4]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	891b      	ldrh	r3, [r3, #8]
 8001342:	2200      	movs	r2, #0
 8001344:	4619      	mov	r1, r3
 8001346:	f005 fb6a 	bl	8006a1e <HAL_GPIO_WritePin>
	Estado=APAGADO;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	60da      	str	r2, [r3, #12]
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <_ZN20ControlVelocidadAireC1Ev>:

#include "ControlVelocidadAire.hpp"
#include "stm32f1xx.h"
//#include "stm32f1xx_hal_adc.h"

ControlVelocidadAire::ControlVelocidadAire()
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	4a04      	ldr	r2, [pc, #16]	@ (8001374 <_ZN20ControlVelocidadAireC1Ev+0x1c>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4618      	mov	r0, r3
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	0800b758 	.word	0x0800b758

08001378 <_ZN20ControlVelocidadAireD1Ev>:

ControlVelocidadAire::~ControlVelocidadAire()
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	4a04      	ldr	r2, [pc, #16]	@ (8001394 <_ZN20ControlVelocidadAireD1Ev+0x1c>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4618      	mov	r0, r3
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	0800b758 	.word	0x0800b758

08001398 <_ZN20ControlVelocidadAireD0Ev>:
ControlVelocidadAire::~ControlVelocidadAire()
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
}
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff ffe9 	bl	8001378 <_ZN20ControlVelocidadAireD1Ev>
 80013a6:	2134      	movs	r1, #52	@ 0x34
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f007 fadf 	bl	800896c <_ZdlPvj>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <_ZN20ControlVelocidadAire10InicializaEv>:

void ControlVelocidadAire::Inicializa()
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

	 ADC_ChannelConfTypeDef sConfig = {0};
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
	 hadc1.Instance = ADC1;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a23      	ldr	r2, [pc, #140]	@ (800145c <_ZN20ControlVelocidadAire10InicializaEv+0xa4>)
 80013d0:	605a      	str	r2, [r3, #4]
	 hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	60da      	str	r2, [r3, #12]
	 hadc1.Init.ContinuousConvMode = ENABLE;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2201      	movs	r2, #1
 80013dc:	741a      	strb	r2, [r3, #16]
	 hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	761a      	strb	r2, [r3, #24]
	 hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80013ea:	621a      	str	r2, [r3, #32]
	 hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
	 hadc1.Init.NbrOfConversion = 1;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2201      	movs	r2, #1
 80013f6:	615a      	str	r2, [r3, #20]
	 if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3304      	adds	r3, #4
 80013fc:	4618      	mov	r0, r3
 80013fe:	f004 fd3f 	bl	8005e80 <HAL_ADC_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	bf14      	ite	ne
 8001408:	2301      	movne	r3, #1
 800140a:	2300      	moveq	r3, #0
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	d002      	beq.n	8001418 <_ZN20ControlVelocidadAire10InicializaEv+0x60>
	 {
	 Error_Handler();
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 f842 	bl	800149c <_ZN20ControlVelocidadAire13Error_HandlerEv>
	 }

	 sConfig.Channel = ADC_CHANNEL_3;
 8001418:	2303      	movs	r3, #3
 800141a:	60fb      	str	r3, [r7, #12]
	 sConfig.Rank = ADC_REGULAR_RANK_1;
 800141c:	2301      	movs	r3, #1
 800141e:	613b      	str	r3, [r7, #16]
	 sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001420:	2307      	movs	r3, #7
 8001422:	617b      	str	r3, [r7, #20]
	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3304      	adds	r3, #4
 8001428:	f107 020c 	add.w	r2, r7, #12
 800142c:	4611      	mov	r1, r2
 800142e:	4618      	mov	r0, r3
 8001430:	f004 feb8 	bl	80061a4 <HAL_ADC_ConfigChannel>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	bf14      	ite	ne
 800143a:	2301      	movne	r3, #1
 800143c:	2300      	moveq	r3, #0
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b00      	cmp	r3, #0
 8001442:	d002      	beq.n	800144a <_ZN20ControlVelocidadAire10InicializaEv+0x92>
	 {
	 Error_Handler();
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f000 f829 	bl	800149c <_ZN20ControlVelocidadAire13Error_HandlerEv>
	 }
	 HAL_ADC_Start(&hadc1);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3304      	adds	r3, #4
 800144e:	4618      	mov	r0, r3
 8001450:	f004 fdee 	bl	8006030 <HAL_ADC_Start>
}
 8001454:	bf00      	nop
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40012400 	.word	0x40012400

08001460 <_ZN20ControlVelocidadAire12LeeVelocidadEv>:
int ControlVelocidadAire::LeeVelocidad()
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	int valor=HAL_ADC_GetValue(&hadc1);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3304      	adds	r3, #4
 800146c:	4618      	mov	r0, r3
 800146e:	f004 fe8d 	bl	800618c <HAL_ADC_GetValue>
 8001472:	4603      	mov	r3, r0
 8001474:	60fb      	str	r3, [r7, #12]
	//4095->100
	//valor->X
	//x=valor*100/4095
	return 	100-(int)(valor*100/4095);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2264      	movs	r2, #100	@ 0x64
 800147a:	fb02 f303 	mul.w	r3, r2, r3
 800147e:	4a06      	ldr	r2, [pc, #24]	@ (8001498 <_ZN20ControlVelocidadAire12LeeVelocidadEv+0x38>)
 8001480:	fb82 1203 	smull	r1, r2, r2, r3
 8001484:	441a      	add	r2, r3
 8001486:	12d2      	asrs	r2, r2, #11
 8001488:	17db      	asrs	r3, r3, #31
 800148a:	1a9b      	subs	r3, r3, r2
 800148c:	3364      	adds	r3, #100	@ 0x64
}
 800148e:	4618      	mov	r0, r3
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	80080081 	.word	0x80080081

0800149c <_ZN20ControlVelocidadAire13Error_HandlerEv>:
void ControlVelocidadAire::Error_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]

}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
	...

080014b0 <_ZN8CEncoderC1Ev>:
 *      Author: W10
 */

#include "Encoder/CEncoder.hpp"

CEncoder::CEncoder()
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fe68 	bl	8001190 <_ZN22CManejadorEventosBotonC1Ev>
 80014c0:	4a0c      	ldr	r2, [pc, #48]	@ (80014f4 <_ZN8CEncoderC1Ev+0x44>)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	639a      	str	r2, [r3, #56]	@ 0x38
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	63da      	str	r2, [r3, #60]	@ 0x3c
{
	// TODO Auto-generated constructor stub

}
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4618      	mov	r0, r3
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	0800b768 	.word	0x0800b768

080014f8 <_ZN8CEncoderD1Ev>:

CEncoder::~CEncoder()
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	4a05      	ldr	r2, [pc, #20]	@ (8001518 <_ZN8CEncoderD1Ev+0x20>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fe51 	bl	80011b0 <_ZN22CManejadorEventosBotonD1Ev>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	0800b768 	.word	0x0800b768

0800151c <_ZN8CEncoderD0Ev>:
CEncoder::~CEncoder()
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
}
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff ffe7 	bl	80014f8 <_ZN8CEncoderD1Ev>
 800152a:	214c      	movs	r1, #76	@ 0x4c
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f007 fa1d 	bl	800896c <_ZdlPvj>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <_ZN8CEncoder10ConfigurarEP12GPIO_TypeDeftS1_tS1_ti>:

void CEncoder::Configurar(GPIO_TypeDef *clk_Port, uint16_t pinClk,GPIO_TypeDef *dt_Port, uint16_t pinDt, GPIO_TypeDef *boton_Port,uint16_t pinBoton, int id_Encoder)
{
 800153c:	b590      	push	{r4, r7, lr}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	603b      	str	r3, [r7, #0]
 8001548:	4613      	mov	r3, r2
 800154a:	80fb      	strh	r3, [r7, #6]
	Clk_Port = clk_Port;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	68ba      	ldr	r2, [r7, #8]
 8001550:	605a      	str	r2, [r3, #4]
	PinClk = pinClk;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	88fa      	ldrh	r2, [r7, #6]
 8001556:	811a      	strh	r2, [r3, #8]

	Dt_Port = dt_Port;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	60da      	str	r2, [r3, #12]
	PinDt = pinDt;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	8c3a      	ldrh	r2, [r7, #32]
 8001562:	821a      	strh	r2, [r3, #16]

	Boton_Port = boton_Port;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001568:	615a      	str	r2, [r3, #20]
	PinBoton = pinBoton;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800156e:	831a      	strh	r2, [r3, #24]

	ID_Encoder = id_Encoder;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001574:	625a      	str	r2, [r3, #36]	@ 0x24
	Boton = new CManejadorBoton();
 8001576:	2020      	movs	r0, #32
 8001578:	f007 f9fa 	bl	8008970 <_Znwj>
 800157c:	4603      	mov	r3, r0
 800157e:	461c      	mov	r4, r3
 8001580:	4620      	mov	r0, r4
 8001582:	f7ff fcdf 	bl	8000f44 <_ZN15CManejadorBotonC1Ev>
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	61dc      	str	r4, [r3, #28]
	Boton->AsignaManejadorEventos(this);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	4611      	mov	r1, r2
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fd5c 	bl	8001050 <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	Boton->Configurar(Boton_Port, PinBoton, ID_BOTON);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	69d8      	ldr	r0, [r3, #28]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6959      	ldr	r1, [r3, #20]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	8b1a      	ldrh	r2, [r3, #24]
 80015a4:	2303      	movs	r3, #3
 80015a6:	f7ff fd0b 	bl	8000fc0 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	CLK_statusAnterior = LeeClk();
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	f000 f807 	bl	80015be <_ZN8CEncoder6LeeClkEv>
 80015b0:	4602      	mov	r2, r0
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	641a      	str	r2, [r3, #64]	@ 0x40

}
 80015b6:	bf00      	nop
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd90      	pop	{r4, r7, pc}

080015be <_ZN8CEncoder6LeeClkEv>:

int CEncoder::LeeClk()
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(Clk_Port, PinClk);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	891b      	ldrh	r3, [r3, #8]
 80015ce:	4619      	mov	r1, r3
 80015d0:	4610      	mov	r0, r2
 80015d2:	f005 fa0d 	bl	80069f0 <HAL_GPIO_ReadPin>
 80015d6:	4603      	mov	r3, r0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <_ZN8CEncoder5LeeDtEv>:
int CEncoder::LeeDt()
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(Dt_Port, PinDt);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68da      	ldr	r2, [r3, #12]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	8a1b      	ldrh	r3, [r3, #16]
 80015f0:	4619      	mov	r1, r3
 80015f2:	4610      	mov	r0, r2
 80015f4:	f005 f9fc 	bl	80069f0 <HAL_GPIO_ReadPin>
 80015f8:	4603      	mov	r3, r0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <_ZN8CEncoder4InitEv>:

void CEncoder::Init()
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 800160c:	f107 0308 	add.w	r3, r7, #8
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
	{ 0 };
	// CKL
	GPIO_InitStruct.Pin = PinClk;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	891b      	ldrh	r3, [r3, #8]
 800161e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode =GPIO_MODE_IT_RISING_FALLING;// GPIO_MODE_INPUT;
 8001620:	4b16      	ldr	r3, [pc, #88]	@ (800167c <_ZN8CEncoder4InitEv+0x78>)
 8001622:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(Clk_Port, &GPIO_InitStruct);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f107 0208 	add.w	r2, r7, #8
 8001630:	4611      	mov	r1, r2
 8001632:	4618      	mov	r0, r3
 8001634:	f005 f858 	bl	80066e8 <HAL_GPIO_Init>
	//DT
	GPIO_InitStruct.Pin = PinDt;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	8a1b      	ldrh	r3, [r3, #16]
 800163c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(Dt_Port, &GPIO_InitStruct);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	f107 0208 	add.w	r2, r7, #8
 800164e:	4611      	mov	r1, r2
 8001650:	4618      	mov	r0, r3
 8001652:	f005 f849 	bl	80066e8 <HAL_GPIO_Init>
	//Boton
	GPIO_InitStruct.Pin = PinBoton;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	8b1b      	ldrh	r3, [r3, #24]
 800165a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165c:	2300      	movs	r3, #0
 800165e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(Boton_Port, &GPIO_InitStruct);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	f107 0208 	add.w	r2, r7, #8
 800166c:	4611      	mov	r1, r2
 800166e:	4618      	mov	r0, r3
 8001670:	f005 f83a 	bl	80066e8 <HAL_GPIO_Init>
}
 8001674:	bf00      	nop
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	10310000 	.word	0x10310000

08001680 <_ZN8CEncoder22AsignaManejadorEventosEP24CManejadorEventosEncoder>:

void CEncoder::AsignaManejadorEventos(CManejadorEventosEncoder *manejador)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
	Manejador = manejador;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	621a      	str	r2, [r3, #32]
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr

0800169a <_ZN8CEncoder18OnBotonSueltoEventEi>:

void CEncoder::OnBotonSueltoEvent(int idBoton)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	6039      	str	r1, [r7, #0]
	if (Manejador == NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d00e      	beq.n	80016ca <_ZN8CEncoder18OnBotonSueltoEventEi+0x30>
	{
		return;
	}
	switch (idBoton)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	2b03      	cmp	r3, #3
 80016b0:	d10c      	bne.n	80016cc <_ZN8CEncoder18OnBotonSueltoEventEi+0x32>
	{
	case ID_BOTON:
		Manejador->OnBotonEncoderSueltoEvent(ID_Encoder);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a18      	ldr	r0, [r3, #32]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a1b      	ldr	r3, [r3, #32]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	331c      	adds	r3, #28
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016c4:	4611      	mov	r1, r2
 80016c6:	4798      	blx	r3
		break;
 80016c8:	e000      	b.n	80016cc <_ZN8CEncoder18OnBotonSueltoEventEi+0x32>
		return;
 80016ca:	bf00      	nop
	}
}
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <_ZN8CEncoder22OnBotonPresionadoEventEi>:

void CEncoder::OnBotonPresionadoEvent(int idBoton)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
 80016da:	6039      	str	r1, [r7, #0]
	if (Manejador == NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d00e      	beq.n	8001702 <_ZN8CEncoder22OnBotonPresionadoEventEi+0x30>
	{
		return;
	}
	switch (idBoton)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	2b03      	cmp	r3, #3
 80016e8:	d10c      	bne.n	8001704 <_ZN8CEncoder22OnBotonPresionadoEventEi+0x32>
	{
	case ID_BOTON:
		Manejador->OnBotonEncoderPresionadoEvent(ID_Encoder);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a18      	ldr	r0, [r3, #32]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a1b      	ldr	r3, [r3, #32]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	3314      	adds	r3, #20
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016fc:	4611      	mov	r1, r2
 80016fe:	4798      	blx	r3
		break;
 8001700:	e000      	b.n	8001704 <_ZN8CEncoder22OnBotonPresionadoEventEi+0x32>
		return;
 8001702:	bf00      	nop
	}
}
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <_ZN8CEncoder17OnBotonClickEventEii>:

void CEncoder::OnBotonClickEvent(int idBoton, int tiempoClick)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b084      	sub	sp, #16
 800170e:	af00      	add	r7, sp, #0
 8001710:	60f8      	str	r0, [r7, #12]
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	607a      	str	r2, [r7, #4]

	switch (idBoton)
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	2b03      	cmp	r3, #3
 800171a:	d10b      	bne.n	8001734 <_ZN8CEncoder17OnBotonClickEventEii+0x2a>
	{
	case ID_BOTON:
		Manejador->OnBotonEncoderClickEvent(ID_Encoder, tiempoClick);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6a18      	ldr	r0, [r3, #32]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	3310      	adds	r3, #16
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	4798      	blx	r3
		break;
 8001732:	bf00      	nop
	}
}
 8001734:	bf00      	nop
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <_ZN8CEncoder7ProcesaEv>:

void CEncoder::Procesa()
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	Boton->Procesa();
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fc8e 	bl	800106a <_ZN15CManejadorBoton7ProcesaEv>
	leeEncoder();
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 f804 	bl	800175c <_ZN8CEncoder10leeEncoderEv>
}
 8001754:	bf00      	nop
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <_ZN8CEncoder10leeEncoderEv>:

void CEncoder::leeEncoder()
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	CLK_status = LeeClk();
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff ff2a 	bl	80015be <_ZN8CEncoder6LeeClkEv>
 800176a:	4602      	mov	r2, r0
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	629a      	str	r2, [r3, #40]	@ 0x28
	if (CLK_status != CLK_statusAnterior && CLK_status == 1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001778:	429a      	cmp	r2, r3
 800177a:	d017      	beq.n	80017ac <_ZN8CEncoder10leeEncoderEv+0x50>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001780:	2b01      	cmp	r3, #1
 8001782:	d113      	bne.n	80017ac <_ZN8CEncoder10leeEncoderEv+0x50>
	{
		if (LeeDt() != CLK_status)
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff ff2b 	bl	80015e0 <_ZN8CEncoder5LeeDtEv>
 800178a:	4602      	mov	r2, r0
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001790:	429a      	cmp	r2, r3
 8001792:	bf14      	ite	ne
 8001794:	2301      	movne	r3, #1
 8001796:	2300      	moveq	r3, #0
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <_ZN8CEncoder10leeEncoderEv+0x4a>
		{
			incrementa();
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 f80c 	bl	80017bc <_ZN8CEncoder10incrementaEv>
 80017a4:	e002      	b.n	80017ac <_ZN8CEncoder10leeEncoderEv+0x50>
		}
		else
		{
			decrementa();
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f000 f81b 	bl	80017e2 <_ZN8CEncoder10decrementaEv>
		}
	}
	CLK_statusAnterior = CLK_status;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <_ZN8CEncoder10incrementaEv>:

void CEncoder::incrementa()
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	Manejador->OnIncrementoEncoder(ID_Encoder);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a18      	ldr	r0, [r3, #32]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	3308      	adds	r3, #8
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80017d6:	4611      	mov	r1, r2
 80017d8:	4798      	blx	r3
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <_ZN8CEncoder10decrementaEv>:

void CEncoder::decrementa()
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
	Manejador->OnDecrementoEncoder(ID_Encoder);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a18      	ldr	r0, [r3, #32]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a1b      	ldr	r3, [r3, #32]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	330c      	adds	r3, #12
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80017fc:	4611      	mov	r1, r2
 80017fe:	4798      	blx	r3
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <_ZN24CManejadorEventosEncoderC1Ev>:
 *      Author: W10
 */

#include <Encoder/CManejadorEventosEncoder.hpp>

CManejadorEventosEncoder::CManejadorEventosEncoder()
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	4a04      	ldr	r2, [pc, #16]	@ (8001824 <_ZN24CManejadorEventosEncoderC1Ev+0x1c>)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4618      	mov	r0, r3
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	0800b78c 	.word	0x0800b78c

08001828 <_ZN24CManejadorEventosEncoderD1Ev>:

CManejadorEventosEncoder::~CManejadorEventosEncoder()
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	4a04      	ldr	r2, [pc, #16]	@ (8001844 <_ZN24CManejadorEventosEncoderD1Ev+0x1c>)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4618      	mov	r0, r3
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	0800b78c 	.word	0x0800b78c

08001848 <_ZN24CManejadorEventosEncoderD0Ev>:
CManejadorEventosEncoder::~CManejadorEventosEncoder()
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
}
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff ffe9 	bl	8001828 <_ZN24CManejadorEventosEncoderD1Ev>
 8001856:	2104      	movs	r1, #4
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f007 f887 	bl	800896c <_ZdlPvj>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4618      	mov	r0, r3
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <_ZN24CManejadorEventosEncoder19OnIncrementoEncoderEi>:

void CManejadorEventosEncoder::OnIncrementoEncoder(int id_Encoder)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]

}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <_ZN24CManejadorEventosEncoder19OnDecrementoEncoderEi>:
void CManejadorEventosEncoder::OnDecrementoEncoder(int id_Encoder)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]

}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr

08001890 <_ZN24CManejadorEventosEncoder24OnBotonEncoderClickEventEii>:
void CManejadorEventosEncoder::OnBotonEncoderClickEvent(int id_Encoder, int tiempoClick)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]

}
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr

080018a6 <_ZN24CManejadorEventosEncoder29OnBotonEncoderPresionadoEventEi>:
void CManejadorEventosEncoder::OnBotonEncoderPresionadoEvent(int id_Encoder)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	6039      	str	r1, [r7, #0]

}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr

080018ba <_ZN24CManejadorEventosEncoder34OnBotonEncoderPresionadoLargoEventEi>:
void CManejadorEventosEncoder::OnBotonEncoderPresionadoLargoEvent(int id_Encoder)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	6039      	str	r1, [r7, #0]

}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr

080018ce <_ZN24CManejadorEventosEncoder25OnBotonEncoderSueltoEventEi>:
void CManejadorEventosEncoder::OnBotonEncoderSueltoEvent(int id_Encoder)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
 80018d6:	6039      	str	r1, [r7, #0]

}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr
	...

080018e4 <_ZN13CEstacionBaseC1Ev>:
 *      Author: W10
 */

#include <Estaciones/CEstacionBase.hpp>

CEstacionBase::CEstacionBase()
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	4a05      	ldr	r2, [pc, #20]	@ (8001904 <_ZN13CEstacionBaseC1Ev+0x20>)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	605a      	str	r2, [r3, #4]
{
	// TODO Auto-generated constructor stub

}
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4618      	mov	r0, r3
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	0800b7b4 	.word	0x0800b7b4

08001908 <_ZN13CEstacionBaseD1Ev>:

CEstacionBase::~CEstacionBase()
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	4a04      	ldr	r2, [pc, #16]	@ (8001924 <_ZN13CEstacionBaseD1Ev+0x1c>)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4618      	mov	r0, r3
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	0800b7b4 	.word	0x0800b7b4

08001928 <_ZN13CEstacionBaseD0Ev>:
CEstacionBase::~CEstacionBase()
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
}
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ffe9 	bl	8001908 <_ZN13CEstacionBaseD1Ev>
 8001936:	2108      	movs	r1, #8
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f007 f817 	bl	800896c <_ZdlPvj>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4618      	mov	r0, r3
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <_ZN13CEstacionBase18GetTemperaturaRealEv>:

float CEstacionBase::GetTemperaturaReal() //regresa la tenperatura actual de la estacion
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]

}
 8001950:	bf00      	nop
 8001952:	4618      	mov	r0, r3
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr

0800195c <_ZN13CEstacionBase14SetTemperaturaEi>:
void CEstacionBase::SetTemperatura(int temperatura) //establece la temperatura que se quiere alcanzar
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]

}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <_ZN13CEstacionBase14GetTemperaturaEv>:
int CEstacionBase::GetTemperatura() // regresa la temperatura seteada
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]

}
 8001978:	bf00      	nop
 800197a:	4618      	mov	r0, r3
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr

08001984 <_ZN13CEstacionBase12SetNivelAireEi>:
void CEstacionBase::SetNivelAire(int nivel) //establece el nivel de aire
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]

}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr

08001998 <_ZN13CEstacionBase12GetNivelAireEv>:
int CEstacionBase::GetNivelAire() //regresa el nivel de aire setado
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]

}
 80019a0:	bf00      	nop
 80019a2:	4618      	mov	r0, r3
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <_ZN13CEstacionBase9GetEstadoEv>:
int CEstacionBase::GetEstado() //regresa 1 si esta activo y 0 si esta en reposo
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]

}
 80019b4:	bf00      	nop
 80019b6:	4618      	mov	r0, r3
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr

080019c0 <_ZN13CEstacionBase21IncrementaTemperaturaEv>:
//para que la misma estacion incremente la temperatura
void CEstacionBase::IncrementaTemperatura()
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]

}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr

080019d2 <_ZN13CEstacionBase21DecrementaTemperaturaEv>:
//para que la misma estacion decremente la temeperatura
void CEstacionBase::DecrementaTemperatura()
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]

}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr

080019e4 <_ZN13CEstacionBase21SetManejadorControlesEP23CManejadorControlesBase>:
// asigna el evento que sellamara cuando cambie la temperatura que el usuario especifica
void CEstacionBase::SetManejadorControles(CManejadorControlesBase *obj)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
	ManejadorControles = obj;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	605a      	str	r2, [r3, #4]
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr

080019fe <_ZN13CEstacionBase7ProcesaEv>:
//funcion que se debera llamar para controlar la estacion de calor
void CEstacionBase::Procesa()
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]

}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <_ZN13CEstacionBase16TemperaturaEventEi>:
void CEstacionBase::TemperaturaEvent(int temperatura)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00a      	beq.n	8001a38 <_ZN13CEstacionBase16TemperaturaEventEi+0x28>
		return;
	ManejadorControles->OnTemperaturaEvent(temperatura);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	3308      	adds	r3, #8
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6839      	ldr	r1, [r7, #0]
 8001a32:	4610      	mov	r0, r2
 8001a34:	4798      	blx	r3
 8001a36:	e000      	b.n	8001a3a <_ZN13CEstacionBase16TemperaturaEventEi+0x2a>
		return;
 8001a38:	bf00      	nop
}
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <_ZN13CEstacionBase14NivelAireEventEi>:
void CEstacionBase::NivelAireEvent(int aire)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00a      	beq.n	8001a68 <_ZN13CEstacionBase14NivelAireEventEi+0x28>
		return;
	ManejadorControles->OnNivelAireEvent(aire);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	3310      	adds	r3, #16
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6839      	ldr	r1, [r7, #0]
 8001a62:	4610      	mov	r0, r2
 8001a64:	4798      	blx	r3
 8001a66:	e000      	b.n	8001a6a <_ZN13CEstacionBase14NivelAireEventEi+0x2a>
		return;
 8001a68:	bf00      	nop
}
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <_ZN13CEstacionBase20TemperaturaRealEventEi>:
void CEstacionBase::TemperaturaRealEvent(int temperatura)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00a      	beq.n	8001a98 <_ZN13CEstacionBase20TemperaturaRealEventEi+0x28>
		return;
	ManejadorControles->OnTemperaturaRealEvent(temperatura);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	330c      	adds	r3, #12
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6839      	ldr	r1, [r7, #0]
 8001a92:	4610      	mov	r0, r2
 8001a94:	4798      	blx	r3
 8001a96:	e000      	b.n	8001a9a <_ZN13CEstacionBase20TemperaturaRealEventEi+0x2a>
		return;
 8001a98:	bf00      	nop

}
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <_ZN13CEstacionBase18BotonUnoClickEventEi>:
//eventros del boton uno
void CEstacionBase::BotonUnoClickEvent(int tiempoClick)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00a      	beq.n	8001ac8 <_ZN13CEstacionBase18BotonUnoClickEventEi+0x28>
		return;
	ManejadorControles->OnBotonUnoClickEvent(tiempoClick);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	3314      	adds	r3, #20
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6839      	ldr	r1, [r7, #0]
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4798      	blx	r3
 8001ac6:	e000      	b.n	8001aca <_ZN13CEstacionBase18BotonUnoClickEventEi+0x2a>
		return;
 8001ac8:	bf00      	nop

}
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <_ZN13CEstacionBase23BotonUnoPresionadoEventEv>:
void CEstacionBase::BotonUnoPresionadoEvent()
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d009      	beq.n	8001af4 <_ZN13CEstacionBase23BotonUnoPresionadoEventEv+0x24>
		return;
	ManejadorControles->OnBotonUnoPresionadoEvent();
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	3318      	adds	r3, #24
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4610      	mov	r0, r2
 8001af0:	4798      	blx	r3
 8001af2:	e000      	b.n	8001af6 <_ZN13CEstacionBase23BotonUnoPresionadoEventEv+0x26>
		return;
 8001af4:	bf00      	nop

}
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <_ZN13CEstacionBase28BotonUnoPresionadoLargoEventEv>:
void CEstacionBase::BotonUnoPresionadoLargoEvent()
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d009      	beq.n	8001b20 <_ZN13CEstacionBase28BotonUnoPresionadoLargoEventEv+0x24>
		return;
	ManejadorControles->OnBotonUnoPresionadoLargoEvent();
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	331c      	adds	r3, #28
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	4798      	blx	r3
 8001b1e:	e000      	b.n	8001b22 <_ZN13CEstacionBase28BotonUnoPresionadoLargoEventEv+0x26>
		return;
 8001b20:	bf00      	nop

}
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <_ZN13CEstacionBase19BotonUnoSueltoEventEv>:
void CEstacionBase::BotonUnoSueltoEvent()
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d009      	beq.n	8001b4c <_ZN13CEstacionBase19BotonUnoSueltoEventEv+0x24>
		return;
	ManejadorControles->OnBotonUnoSueltoEvent();
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	3320      	adds	r3, #32
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4610      	mov	r0, r2
 8001b48:	4798      	blx	r3
 8001b4a:	e000      	b.n	8001b4e <_ZN13CEstacionBase19BotonUnoSueltoEventEv+0x26>
		return;
 8001b4c:	bf00      	nop

}
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <_ZN13CEstacionBase18BotonDosClickEventEi>:
//eventros del boton dos
void CEstacionBase::BotonDosClickEvent(int tiempoClick)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00a      	beq.n	8001b7c <_ZN13CEstacionBase18BotonDosClickEventEi+0x28>
		return;
	ManejadorControles->OnBotonDosClickEvent(tiempoClick);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	3324      	adds	r3, #36	@ 0x24
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6839      	ldr	r1, [r7, #0]
 8001b76:	4610      	mov	r0, r2
 8001b78:	4798      	blx	r3
 8001b7a:	e000      	b.n	8001b7e <_ZN13CEstacionBase18BotonDosClickEventEi+0x2a>
		return;
 8001b7c:	bf00      	nop

}
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <_ZN13CEstacionBase23BotonDosPresionadoEventEv>:
void CEstacionBase::BotonDosPresionadoEvent()
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d009      	beq.n	8001ba8 <_ZN13CEstacionBase23BotonDosPresionadoEventEv+0x24>
		return;
	ManejadorControles->OnBotonDosPresionadoEvent();
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	3328      	adds	r3, #40	@ 0x28
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4798      	blx	r3
 8001ba6:	e000      	b.n	8001baa <_ZN13CEstacionBase23BotonDosPresionadoEventEv+0x26>
		return;
 8001ba8:	bf00      	nop

}
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <_ZN13CEstacionBase28BotonDosPresionaLargodoEventEv>:
void CEstacionBase::BotonDosPresionaLargodoEvent()
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d009      	beq.n	8001bd4 <_ZN13CEstacionBase28BotonDosPresionaLargodoEventEv+0x24>
		return;
	ManejadorControles->OnBotonDosPresionadoLargoEvent();
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	332c      	adds	r3, #44	@ 0x2c
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4610      	mov	r0, r2
 8001bd0:	4798      	blx	r3
 8001bd2:	e000      	b.n	8001bd6 <_ZN13CEstacionBase28BotonDosPresionaLargodoEventEv+0x26>
		return;
 8001bd4:	bf00      	nop

}
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <_ZN13CEstacionBase19BotonDosSueltoEventEv>:
void CEstacionBase::BotonDosSueltoEvent()
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d009      	beq.n	8001c00 <_ZN13CEstacionBase19BotonDosSueltoEventEv+0x24>
		return;
	ManejadorControles->OnBotonDosSueltoEvent();
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	3330      	adds	r3, #48	@ 0x30
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	4798      	blx	r3
 8001bfe:	e000      	b.n	8001c02 <_ZN13CEstacionBase19BotonDosSueltoEventEv+0x26>
		return;
 8001c00:	bf00      	nop

}
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <_ZN13CEstacionBase19BotonTresClickEventEi>:
//eventros del boton tres
void CEstacionBase::BotonTresClickEvent(int tiempoClick)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00a      	beq.n	8001c30 <_ZN13CEstacionBase19BotonTresClickEventEi+0x28>
		return;
	ManejadorControles->OnBotonTresClickEvent(tiempoClick);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	3334      	adds	r3, #52	@ 0x34
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6839      	ldr	r1, [r7, #0]
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	4798      	blx	r3
 8001c2e:	e000      	b.n	8001c32 <_ZN13CEstacionBase19BotonTresClickEventEi+0x2a>
		return;
 8001c30:	bf00      	nop

}
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <_ZN13CEstacionBase24BotonTresPresionadoEventEv>:
void CEstacionBase::BotonTresPresionadoEvent()
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d009      	beq.n	8001c5c <_ZN13CEstacionBase24BotonTresPresionadoEventEv+0x24>
		return;
	ManejadorControles->OnBotonTresPresionadoEvent();
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	3338      	adds	r3, #56	@ 0x38
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4610      	mov	r0, r2
 8001c58:	4798      	blx	r3
 8001c5a:	e000      	b.n	8001c5e <_ZN13CEstacionBase24BotonTresPresionadoEventEv+0x26>
		return;
 8001c5c:	bf00      	nop

}
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <_ZN13CEstacionBase29BotonTresPresionaLargodoEventEv>:
void CEstacionBase::BotonTresPresionaLargodoEvent()
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d009      	beq.n	8001c88 <_ZN13CEstacionBase29BotonTresPresionaLargodoEventEv+0x24>
		return;
	ManejadorControles->OnBotonTresPresionadoLargoEvent();
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	333c      	adds	r3, #60	@ 0x3c
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4610      	mov	r0, r2
 8001c84:	4798      	blx	r3
 8001c86:	e000      	b.n	8001c8a <_ZN13CEstacionBase29BotonTresPresionaLargodoEventEv+0x26>
		return;
 8001c88:	bf00      	nop

}
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <_ZN13CEstacionBase20BotonTresSueltoEventEv>:
void CEstacionBase::BotonTresSueltoEvent()
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d009      	beq.n	8001cb4 <_ZN13CEstacionBase20BotonTresSueltoEventEv+0x24>
		return;
	ManejadorControles->OnBotonTresSueltoEvent();
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	3340      	adds	r3, #64	@ 0x40
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4610      	mov	r0, r2
 8001cb0:	4798      	blx	r3
 8001cb2:	e000      	b.n	8001cb6 <_ZN13CEstacionBase20BotonTresSueltoEventEv+0x26>
		return;
 8001cb4:	bf00      	nop

}
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <_ZN13CEstacionBase21BotonCuatroClickEventEi>:
//eventros del boton Cuatro
void CEstacionBase::BotonCuatroClickEvent(int tiempoClick)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00a      	beq.n	8001ce4 <_ZN13CEstacionBase21BotonCuatroClickEventEi+0x28>
		return;
	ManejadorControles->OnBotonCuatroClickEvent(tiempoClick);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	3344      	adds	r3, #68	@ 0x44
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6839      	ldr	r1, [r7, #0]
 8001cde:	4610      	mov	r0, r2
 8001ce0:	4798      	blx	r3
 8001ce2:	e000      	b.n	8001ce6 <_ZN13CEstacionBase21BotonCuatroClickEventEi+0x2a>
		return;
 8001ce4:	bf00      	nop

}
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <_ZN13CEstacionBase26BotonCuatroPresionadoEventEv>:
void CEstacionBase::BotonCuatroPresionadoEvent()
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d009      	beq.n	8001d10 <_ZN13CEstacionBase26BotonCuatroPresionadoEventEv+0x24>
		return;
	ManejadorControles->OnBotonCuatroPresionadoEvent();
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	3348      	adds	r3, #72	@ 0x48
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	4798      	blx	r3
 8001d0e:	e000      	b.n	8001d12 <_ZN13CEstacionBase26BotonCuatroPresionadoEventEv+0x26>
		return;
 8001d10:	bf00      	nop

}
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <_ZN13CEstacionBase31BotonCuatroPresionaLargodoEventEv>:
void CEstacionBase::BotonCuatroPresionaLargodoEvent()
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d009      	beq.n	8001d3c <_ZN13CEstacionBase31BotonCuatroPresionaLargodoEventEv+0x24>
		return;
	ManejadorControles->OnBotonCuatroPresionadoLargoEvent();
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	334c      	adds	r3, #76	@ 0x4c
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4610      	mov	r0, r2
 8001d38:	4798      	blx	r3
 8001d3a:	e000      	b.n	8001d3e <_ZN13CEstacionBase31BotonCuatroPresionaLargodoEventEv+0x26>
		return;
 8001d3c:	bf00      	nop
}
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <_ZN13CEstacionBase22BotonCuatroSueltoEventEv>:
void CEstacionBase::BotonCuatroSueltoEvent()
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d009      	beq.n	8001d68 <_ZN13CEstacionBase22BotonCuatroSueltoEventEv+0x24>
		return;
	ManejadorControles->OnBotonCuatroSueltoEvent();
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	3350      	adds	r3, #80	@ 0x50
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4610      	mov	r0, r2
 8001d64:	4798      	blx	r3
 8001d66:	e000      	b.n	8001d6a <_ZN13CEstacionBase22BotonCuatroSueltoEventEv+0x26>
		return;
 8001d68:	bf00      	nop

}
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <_ZN13CEstacionBase22BotonPerillaClickEventEi>:
//eventros del boton Perilla
void CEstacionBase::BotonPerillaClickEvent(int tiempoClick)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
	if (ManejadorControles == NULL)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00a      	beq.n	8001d98 <_ZN13CEstacionBase22BotonPerillaClickEventEi+0x28>
		return;
	ManejadorControles->OnBotonPerillaClickEvent(tiempoClick);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	3354      	adds	r3, #84	@ 0x54
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6839      	ldr	r1, [r7, #0]
 8001d92:	4610      	mov	r0, r2
 8001d94:	4798      	blx	r3
 8001d96:	e000      	b.n	8001d9a <_ZN13CEstacionBase22BotonPerillaClickEventEi+0x2a>
		return;
 8001d98:	bf00      	nop

}
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <_ZN13CEstacionBase27BotonPerillaPresionadoEventEv>:
void CEstacionBase::BotonPerillaPresionadoEvent()
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d009      	beq.n	8001dc4 <_ZN13CEstacionBase27BotonPerillaPresionadoEventEv+0x24>
		return;
	ManejadorControles->OnBotonPerillaPresionadoEvent();
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	3358      	adds	r3, #88	@ 0x58
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	4798      	blx	r3
 8001dc2:	e000      	b.n	8001dc6 <_ZN13CEstacionBase27BotonPerillaPresionadoEventEv+0x26>
		return;
 8001dc4:	bf00      	nop

}
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <_ZN13CEstacionBase32BotonPerillaPresionadoLargoEventEv>:
void CEstacionBase::BotonPerillaPresionadoLargoEvent()
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d009      	beq.n	8001df0 <_ZN13CEstacionBase32BotonPerillaPresionadoLargoEventEv+0x24>
		return;
	ManejadorControles->OnBotonPerillaPresionadoLargoEvent();
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	335c      	adds	r3, #92	@ 0x5c
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4610      	mov	r0, r2
 8001dec:	4798      	blx	r3
 8001dee:	e000      	b.n	8001df2 <_ZN13CEstacionBase32BotonPerillaPresionadoLargoEventEv+0x26>
		return;
 8001df0:	bf00      	nop

}
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <_ZN13CEstacionBase23BotonPerillaSueltoEventEv>:
void CEstacionBase::BotonPerillaSueltoEvent()
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d009      	beq.n	8001e1c <_ZN13CEstacionBase23BotonPerillaSueltoEventEv+0x24>
		return;
	ManejadorControles->OnBotonPerillaSueltoEvent();
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	3360      	adds	r3, #96	@ 0x60
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4610      	mov	r0, r2
 8001e18:	4798      	blx	r3
 8001e1a:	e000      	b.n	8001e1e <_ZN13CEstacionBase23BotonPerillaSueltoEventEv+0x26>
		return;
 8001e1c:	bf00      	nop
}
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <_ZN13CEstacionBase17EncoderIncrementoEv>:
//eventos del encoder
void CEstacionBase::EncoderIncremento()
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d009      	beq.n	8001e48 <_ZN13CEstacionBase17EncoderIncrementoEv+0x24>
		return;
	ManejadorControles->OnPerillaIncremento();
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	3364      	adds	r3, #100	@ 0x64
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4610      	mov	r0, r2
 8001e44:	4798      	blx	r3
 8001e46:	e000      	b.n	8001e4a <_ZN13CEstacionBase17EncoderIncrementoEv+0x26>
		return;
 8001e48:	bf00      	nop

}
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <_ZN13CEstacionBase17EncoderDecrementoEv>:
void CEstacionBase::EncoderDecremento()
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
	if (ManejadorControles == NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d009      	beq.n	8001e74 <_ZN13CEstacionBase17EncoderDecrementoEv+0x24>
		return;
	ManejadorControles->OnPerillaDecremento();
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	3368      	adds	r3, #104	@ 0x68
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4610      	mov	r0, r2
 8001e70:	4798      	blx	r3
 8001e72:	e000      	b.n	8001e76 <_ZN13CEstacionBase17EncoderDecrementoEv+0x26>
		return;
 8001e74:	bf00      	nop

}
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <_ZN13CEstacionBase19InterrupcionEncoderEv>:
void CEstacionBase::InterrupcionEncoder()
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]

}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr

08001e8e <_ZN13CEstacionBase17ActivarCalefactorEv>:
void CEstacionBase::ActivarCalefactor()
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]

}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr

08001ea0 <_ZN13CEstacionBase20DesactivarCalefactorEv>:
void CEstacionBase::DesactivarCalefactor()
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]

}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr
	...

08001eb4 <_ZN16CestacionVirtualD1Ev>:

#include <Estaciones/CestacionVirtual.hpp>
#include "Calefactor/Calefactor.hpp"
#include "Constantes.hpp"

CestacionVirtual::~CestacionVirtual()
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	4a2a      	ldr	r2, [pc, #168]	@ (8001f68 <_ZN16CestacionVirtualD1Ev+0xb4>)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	4a2a      	ldr	r2, [pc, #168]	@ (8001f6c <_ZN16CestacionVirtualD1Ev+0xb8>)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	4a29      	ldr	r2, [pc, #164]	@ (8001f70 <_ZN16CestacionVirtualD1Ev+0xbc>)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	4a29      	ldr	r2, [pc, #164]	@ (8001f74 <_ZN16CestacionVirtualD1Ev+0xc0>)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	611a      	str	r2, [r3, #16]
{
	// TODO Auto-generated destructor stub
}
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8001eda:	4618      	mov	r0, r3
 8001edc:	f002 ff60 	bl	8004da0 <_ZN15SensorMagneticoD1Ev>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff f9be 	bl	8001268 <_ZN10CalefactorD1Ev>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f002 fda4 	bl	8004a40 <_ZN3PwmD1Ev>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff fa3a 	bl	8001378 <_ZN20ControlVelocidadAireD1Ev>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	33d4      	adds	r3, #212	@ 0xd4
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff faf5 	bl	80014f8 <_ZN8CEncoderD1Ev>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	33b4      	adds	r3, #180	@ 0xb4
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff f834 	bl	8000f80 <_ZN15CManejadorBotonD1Ev>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3394      	adds	r3, #148	@ 0x94
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff f82f 	bl	8000f80 <_ZN15CManejadorBotonD1Ev>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3374      	adds	r3, #116	@ 0x74
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff f82a 	bl	8000f80 <_ZN15CManejadorBotonD1Ev>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3354      	adds	r3, #84	@ 0x54
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff f825 	bl	8000f80 <_ZN15CManejadorBotonD1Ev>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	3310      	adds	r3, #16
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f002 feea 	bl	8004d14 <_ZN31CManejadorEventoSensorMagneticoD1Ev>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	330c      	adds	r3, #12
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff fc6f 	bl	8001828 <_ZN24CManejadorEventosEncoderD1Ev>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3308      	adds	r3, #8
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff f92e 	bl	80011b0 <_ZN22CManejadorEventosBotonD1Ev>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff fcd6 	bl	8001908 <_ZN13CEstacionBaseD1Ev>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	0800b85c 	.word	0x0800b85c
 8001f6c:	0800b92c 	.word	0x0800b92c
 8001f70:	0800b94c 	.word	0x0800b94c
 8001f74:	0800b974 	.word	0x0800b974

08001f78 <_ZThn12_N16CestacionVirtualD1Ev>:
	Pwm pwm;
	Calefactor calefactor;
	SensorMagnetico sensorMagnetico;
public:
	CestacionVirtual();
	virtual ~CestacionVirtual();
 8001f78:	f1a0 000c 	sub.w	r0, r0, #12
 8001f7c:	f7ff bf9a 	b.w	8001eb4 <_ZN16CestacionVirtualD1Ev>

08001f80 <_ZThn8_N16CestacionVirtualD1Ev>:
 8001f80:	f1a0 0008 	sub.w	r0, r0, #8
 8001f84:	f7ff bf96 	b.w	8001eb4 <_ZN16CestacionVirtualD1Ev>

08001f88 <_ZThn16_N16CestacionVirtualD1Ev>:
 8001f88:	f1a0 0010 	sub.w	r0, r0, #16
 8001f8c:	f7ff bf92 	b.w	8001eb4 <_ZN16CestacionVirtualD1Ev>

08001f90 <_ZN16CestacionVirtualD0Ev>:
CestacionVirtual::~CestacionVirtual()
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
}
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff ff8b 	bl	8001eb4 <_ZN16CestacionVirtualD1Ev>
 8001f9e:	f44f 71e6 	mov.w	r1, #460	@ 0x1cc
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f006 fce2 	bl	800896c <_ZdlPvj>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <_ZThn16_N16CestacionVirtualD0Ev>:
 8001fb2:	f1a0 0010 	sub.w	r0, r0, #16
 8001fb6:	f7ff bfeb 	b.w	8001f90 <_ZN16CestacionVirtualD0Ev>

08001fba <_ZThn12_N16CestacionVirtualD0Ev>:
 8001fba:	f1a0 000c 	sub.w	r0, r0, #12
 8001fbe:	f7ff bfe7 	b.w	8001f90 <_ZN16CestacionVirtualD0Ev>

08001fc2 <_ZThn8_N16CestacionVirtualD0Ev>:
 8001fc2:	f1a0 0008 	sub.w	r0, r0, #8
 8001fc6:	f7ff bfe3 	b.w	8001f90 <_ZN16CestacionVirtualD0Ev>
	...

08001fcc <_ZN16CestacionVirtualC1Ev>:

CestacionVirtual::CestacionVirtual() :
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af04      	add	r7, sp, #16
 8001fd2:	6078      	str	r0, [r7, #4]
		CEstacionBase()
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff fc84 	bl	80018e4 <_ZN13CEstacionBaseC1Ev>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3308      	adds	r3, #8
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff f8d5 	bl	8001190 <_ZN22CManejadorEventosBotonC1Ev>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	330c      	adds	r3, #12
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff fc0c 	bl	8001808 <_ZN24CManejadorEventosEncoderC1Ev>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3310      	adds	r3, #16
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f002 fe7d 	bl	8004cf4 <_ZN31CManejadorEventoSensorMagneticoC1Ev>
 8001ffa:	4a97      	ldr	r2, [pc, #604]	@ (8002258 <_ZN16CestacionVirtualC1Ev+0x28c>)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	4a96      	ldr	r2, [pc, #600]	@ (800225c <_ZN16CestacionVirtualC1Ev+0x290>)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	4a96      	ldr	r2, [pc, #600]	@ (8002260 <_ZN16CestacionVirtualC1Ev+0x294>)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	60da      	str	r2, [r3, #12]
 800200c:	4a95      	ldr	r2, [pc, #596]	@ (8002264 <_ZN16CestacionVirtualC1Ev+0x298>)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	611a      	str	r2, [r3, #16]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002018:	615a      	str	r2, [r3, #20]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2264      	movs	r2, #100	@ 0x64
 800201e:	619a      	str	r2, [r3, #24]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	61da      	str	r2, [r3, #28]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	621a      	str	r2, [r3, #32]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	625a      	str	r2, [r3, #36]	@ 0x24
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2208      	movs	r2, #8
 8002036:	629a      	str	r2, [r3, #40]	@ 0x28
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	220b      	movs	r2, #11
 800203c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	220c      	movs	r2, #12
 8002042:	631a      	str	r2, [r3, #48]	@ 0x30
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	635a      	str	r2, [r3, #52]	@ 0x34
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	3338      	adds	r3, #56	@ 0x38
 800204e:	4618      	mov	r0, r3
 8002050:	f002 fbb3 	bl	80047ba <_ZN7MAX6675C1Ev>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3354      	adds	r3, #84	@ 0x54
 8002058:	4618      	mov	r0, r3
 800205a:	f7fe ff73 	bl	8000f44 <_ZN15CManejadorBotonC1Ev>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3374      	adds	r3, #116	@ 0x74
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe ff6e 	bl	8000f44 <_ZN15CManejadorBotonC1Ev>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3394      	adds	r3, #148	@ 0x94
 800206c:	4618      	mov	r0, r3
 800206e:	f7fe ff69 	bl	8000f44 <_ZN15CManejadorBotonC1Ev>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	33b4      	adds	r3, #180	@ 0xb4
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe ff64 	bl	8000f44 <_ZN15CManejadorBotonC1Ev>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	33d4      	adds	r3, #212	@ 0xd4
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff fa15 	bl	80014b0 <_ZN8CEncoderC1Ev>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff f963 	bl	8001358 <_ZN20ControlVelocidadAireC1Ev>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8002098:	4618      	mov	r0, r3
 800209a:	f002 fcc1 	bl	8004a20 <_ZN3PwmC1Ev>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff f8cd 	bl	8001244 <_ZN10CalefactorC1Ev>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 80020b0:	4618      	mov	r0, r3
 80020b2:	f002 fe59 	bl	8004d68 <_ZN15SensorMagneticoC1Ev>
{
	pwm.Init(TIM2, TIM_CHANNEL_1, 65535);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f503 70aa 	add.w	r0, r3, #340	@ 0x154
 80020bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80020c0:	2200      	movs	r2, #0
 80020c2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80020c6:	f002 fcdb 	bl	8004a80 <_ZN3Pwm4InitEP11TIM_TypeDefii>

	//inicializa la termocupla
	thermocouple.SetConfigCkPin(GPIOA, GPIO_PIN_1);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3338      	adds	r3, #56	@ 0x38
 80020ce:	2202      	movs	r2, #2
 80020d0:	4965      	ldr	r1, [pc, #404]	@ (8002268 <_ZN16CestacionVirtualC1Ev+0x29c>)
 80020d2:	4618      	mov	r0, r3
 80020d4:	f002 fb8d 	bl	80047f2 <_ZN7MAX667514SetConfigCkPinEP12GPIO_TypeDeft>
	thermocouple.SetConfigCsPin(GPIOA, GPIO_PIN_2);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3338      	adds	r3, #56	@ 0x38
 80020dc:	2204      	movs	r2, #4
 80020de:	4962      	ldr	r1, [pc, #392]	@ (8002268 <_ZN16CestacionVirtualC1Ev+0x29c>)
 80020e0:	4618      	mov	r0, r3
 80020e2:	f002 fb98 	bl	8004816 <_ZN7MAX667514SetConfigCsPinEP12GPIO_TypeDeft>
	thermocouple.SetConfigDatPin(GPIOA, GPIO_PIN_0);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3338      	adds	r3, #56	@ 0x38
 80020ea:	2201      	movs	r2, #1
 80020ec:	495e      	ldr	r1, [pc, #376]	@ (8002268 <_ZN16CestacionVirtualC1Ev+0x29c>)
 80020ee:	4618      	mov	r0, r3
 80020f0:	f002 fb6d 	bl	80047ce <_ZN7MAX667515SetConfigDatPinEP12GPIO_TypeDeft>
	thermocouple.Init();
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3338      	adds	r3, #56	@ 0x38
 80020f8:	4618      	mov	r0, r3
 80020fa:	f002 fc39 	bl	8004970 <_ZN7MAX66754InitEv>

	//configuracion de los botones
	BotonMemoria1.Configurar(GPIOA, GPIO_PIN_4, 1);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 8002104:	2301      	movs	r3, #1
 8002106:	2210      	movs	r2, #16
 8002108:	4957      	ldr	r1, [pc, #348]	@ (8002268 <_ZN16CestacionVirtualC1Ev+0x29c>)
 800210a:	f7fe ff59 	bl	8000fc0 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonMemoria1.AsignaManejadorEventos(this);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3308      	adds	r3, #8
 8002118:	4619      	mov	r1, r3
 800211a:	4610      	mov	r0, r2
 800211c:	f7fe ff98 	bl	8001050 <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonMemoria1.Init();
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3354      	adds	r3, #84	@ 0x54
 8002124:	4618      	mov	r0, r3
 8002126:	f7fe ff64 	bl	8000ff2 <_ZN15CManejadorBoton4InitEv>

	BotonMemoria2.Configurar(GPIOA, GPIO_PIN_6, 2);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f103 0074 	add.w	r0, r3, #116	@ 0x74
 8002130:	2302      	movs	r3, #2
 8002132:	2240      	movs	r2, #64	@ 0x40
 8002134:	494c      	ldr	r1, [pc, #304]	@ (8002268 <_ZN16CestacionVirtualC1Ev+0x29c>)
 8002136:	f7fe ff43 	bl	8000fc0 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonMemoria2.AsignaManejadorEventos(this);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f103 0274 	add.w	r2, r3, #116	@ 0x74
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3308      	adds	r3, #8
 8002144:	4619      	mov	r1, r3
 8002146:	4610      	mov	r0, r2
 8002148:	f7fe ff82 	bl	8001050 <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonMemoria2.Init();
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3374      	adds	r3, #116	@ 0x74
 8002150:	4618      	mov	r0, r3
 8002152:	f7fe ff4e 	bl	8000ff2 <_ZN15CManejadorBoton4InitEv>

	BotonMemoria3.Configurar(GPIOB, GPIO_PIN_10, 3);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f103 0094 	add.w	r0, r3, #148	@ 0x94
 800215c:	2303      	movs	r3, #3
 800215e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002162:	4942      	ldr	r1, [pc, #264]	@ (800226c <_ZN16CestacionVirtualC1Ev+0x2a0>)
 8002164:	f7fe ff2c 	bl	8000fc0 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonMemoria3.AsignaManejadorEventos(this);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f103 0294 	add.w	r2, r3, #148	@ 0x94
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3308      	adds	r3, #8
 8002172:	4619      	mov	r1, r3
 8002174:	4610      	mov	r0, r2
 8002176:	f7fe ff6b 	bl	8001050 <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonMemoria3.Init();
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3394      	adds	r3, #148	@ 0x94
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe ff37 	bl	8000ff2 <_ZN15CManejadorBoton4InitEv>

	BotonManual.Configurar(GPIOB, GPIO_PIN_15, 4);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f103 00b4 	add.w	r0, r3, #180	@ 0xb4
 800218a:	2304      	movs	r3, #4
 800218c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002190:	4936      	ldr	r1, [pc, #216]	@ (800226c <_ZN16CestacionVirtualC1Ev+0x2a0>)
 8002192:	f7fe ff15 	bl	8000fc0 <_ZN15CManejadorBoton10ConfigurarEP12GPIO_TypeDefth>
	BotonManual.AsignaManejadorEventos(this);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f103 02b4 	add.w	r2, r3, #180	@ 0xb4
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3308      	adds	r3, #8
 80021a0:	4619      	mov	r1, r3
 80021a2:	4610      	mov	r0, r2
 80021a4:	f7fe ff54 	bl	8001050 <_ZN15CManejadorBoton22AsignaManejadorEventosEP22CManejadorEventosBoton>
	BotonManual.Init();
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	33b4      	adds	r3, #180	@ 0xb4
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe ff20 	bl	8000ff2 <_ZN15CManejadorBoton4InitEv>

	Encoder.Configurar(GPIOB, GPIO_PIN_11, GPIOB, GPIO_PIN_12, GPIOB,
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f103 00d4 	add.w	r0, r3, #212	@ 0xd4
 80021b8:	2301      	movs	r3, #1
 80021ba:	9303      	str	r3, [sp, #12]
 80021bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021c0:	9302      	str	r3, [sp, #8]
 80021c2:	4b2a      	ldr	r3, [pc, #168]	@ (800226c <_ZN16CestacionVirtualC1Ev+0x2a0>)
 80021c4:	9301      	str	r3, [sp, #4]
 80021c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	4b27      	ldr	r3, [pc, #156]	@ (800226c <_ZN16CestacionVirtualC1Ev+0x2a0>)
 80021ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80021d2:	4926      	ldr	r1, [pc, #152]	@ (800226c <_ZN16CestacionVirtualC1Ev+0x2a0>)
 80021d4:	f7ff f9b2 	bl	800153c <_ZN8CEncoder10ConfigurarEP12GPIO_TypeDeftS1_tS1_ti>
			GPIO_PIN_13, 1);
	Encoder.AsignaManejadorEventos(this);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f103 02d4 	add.w	r2, r3, #212	@ 0xd4
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	330c      	adds	r3, #12
 80021e2:	4619      	mov	r1, r3
 80021e4:	4610      	mov	r0, r2
 80021e6:	f7ff fa4b 	bl	8001680 <_ZN8CEncoder22AsignaManejadorEventosEP24CManejadorEventosEncoder>
	Encoder.Init();
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	33d4      	adds	r3, #212	@ 0xd4
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fa08 	bl	8001604 <_ZN8CEncoder4InitEv>

	controlVelocidadAire.Inicializa();
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff f8dc 	bl	80013b8 <_ZN20ControlVelocidadAire10InicializaEv>
	calefactor.Configurar(GPIOB, GPIO_PIN_3);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002206:	2208      	movs	r2, #8
 8002208:	4918      	ldr	r1, [pc, #96]	@ (800226c <_ZN16CestacionVirtualC1Ev+0x2a0>)
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff f84c 	bl	80012a8 <_ZN10Calefactor10ConfigurarEP12GPIO_TypeDeft>
	calefactor.Init();
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff f858 	bl	80012cc <_ZN10Calefactor4InitEv>
	sensorMagnetico.Configurar(GPIOA, GPIO_PIN_8);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8002222:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002226:	4910      	ldr	r1, [pc, #64]	@ (8002268 <_ZN16CestacionVirtualC1Ev+0x29c>)
 8002228:	4618      	mov	r0, r3
 800222a:	f002 fdd9 	bl	8004de0 <_ZN15SensorMagnetico10ConfigurarEP12GPIO_TypeDeft>
	sensorMagnetico.Init();
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8002234:	4618      	mov	r0, r3
 8002236:	f002 fde5 	bl	8004e04 <_ZN15SensorMagnetico4InitEv>
	sensorMagnetico.AsignaManejadorEventos(this);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f503 72d8 	add.w	r2, r3, #432	@ 0x1b0
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3310      	adds	r3, #16
 8002244:	4619      	mov	r1, r3
 8002246:	4610      	mov	r0, r2
 8002248:	f002 fdfa 	bl	8004e40 <_ZN15SensorMagnetico22AsignaManejadorEventosEP31CManejadorEventoSensorMagnetico>
}
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	0800b85c 	.word	0x0800b85c
 800225c:	0800b92c 	.word	0x0800b92c
 8002260:	0800b94c 	.word	0x0800b94c
 8002264:	0800b974 	.word	0x0800b974
 8002268:	40010800 	.word	0x40010800
 800226c:	40010c00 	.word	0x40010c00

08002270 <_ZN16CestacionVirtual18GetTemperaturaRealEv>:

//regresa la tenperatura actual de la estacion
float CestacionVirtual::GetTemperaturaReal()
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
	float temperatura = thermocouple.MAX6675_lee(); //* .59;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3338      	adds	r3, #56	@ 0x38
 800227c:	4618      	mov	r0, r3
 800227e:	f002 fb13 	bl	80048a8 <_ZN7MAX667511MAX6675_leeEv>
 8002282:	60f8      	str	r0, [r7, #12]
	return temperatura;
 8002284:	68fb      	ldr	r3, [r7, #12]
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <_ZN16CestacionVirtual14SetTemperaturaEi>:

//establece la temperatura que se quiere alcanzar
void CestacionVirtual::SetTemperatura(int temperatura)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b082      	sub	sp, #8
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
 8002296:	6039      	str	r1, [r7, #0]
	TemperaturaEspecificada = temperatura;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	619a      	str	r2, [r3, #24]
	TemperaturaEvent(TemperaturaEspecificada);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	333c      	adds	r3, #60	@ 0x3c
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	6992      	ldr	r2, [r2, #24]
 80022ac:	4611      	mov	r1, r2
 80022ae:	4798      	blx	r3
}
 80022b0:	bf00      	nop
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <_ZN16CestacionVirtual14GetTemperaturaEv>:

// regresa la temperatura seteada
int CestacionVirtual::GetTemperatura()
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
	return TemperaturaEspecificada;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	699b      	ldr	r3, [r3, #24]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr

080022ce <_ZN16CestacionVirtual12SetNivelAireEi>:

//establece el nivel de aire
void CestacionVirtual::SetNivelAire(int nivel)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b082      	sub	sp, #8
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	6039      	str	r1, [r7, #0]
	pwm.SicloTrabajo(nivel);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80022de:	6839      	ldr	r1, [r7, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f002 fc7b 	bl	8004bdc <_ZN3Pwm12SicloTrabajoEi>
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <_ZN16CestacionVirtual12GetNivelAireEv>:

//regresa el nivel de aire setado
int CestacionVirtual::GetNivelAire()
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b082      	sub	sp, #8
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
	return controlVelocidadAire.LeeVelocidad();
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff f8af 	bl	8001460 <_ZN20ControlVelocidadAire12LeeVelocidadEv>
 8002302:	4603      	mov	r3, r0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <_ZN16CestacionVirtual9GetEstadoEv>:

//regresa 1 si esta activo y 0 si esta en reposo
int CestacionVirtual::GetEstado()
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
	return sensorMagnetico.Leer();
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 800231a:	4618      	mov	r0, r3
 800231c:	f002 fd9d 	bl	8004e5a <_ZN15SensorMagnetico4LeerEv>
 8002320:	4603      	mov	r3, r0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
	...

0800232c <_ZN16CestacionVirtual17OnBotonClickEventEii>:

//eventos de CManejadorEventosBoton
void CestacionVirtual::OnBotonClickEvent(int idBoton, int tiempoClick)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
	switch (idBoton)
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	3b01      	subs	r3, #1
 800233c:	2b03      	cmp	r3, #3
 800233e:	d82f      	bhi.n	80023a0 <_ZN16CestacionVirtual17OnBotonClickEventEii+0x74>
 8002340:	a201      	add	r2, pc, #4	@ (adr r2, 8002348 <_ZN16CestacionVirtual17OnBotonClickEventEii+0x1c>)
 8002342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002346:	bf00      	nop
 8002348:	08002359 	.word	0x08002359
 800234c:	0800236b 	.word	0x0800236b
 8002350:	0800237d 	.word	0x0800237d
 8002354:	0800238f 	.word	0x0800238f
	{
	case BOTON_MEMORIA1:
		BotonUnoClickEvent(tiempoClick);
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	3348      	adds	r3, #72	@ 0x48
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4610      	mov	r0, r2
 8002366:	4798      	blx	r3
		break;
 8002368:	e01a      	b.n	80023a0 <_ZN16CestacionVirtual17OnBotonClickEventEii+0x74>
	case BOTON_MEMORIA2:
		BotonDosClickEvent(tiempoClick);
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	3358      	adds	r3, #88	@ 0x58
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4610      	mov	r0, r2
 8002378:	4798      	blx	r3
		break;
 800237a:	e011      	b.n	80023a0 <_ZN16CestacionVirtual17OnBotonClickEventEii+0x74>
	case BOTON_MEMORIA3:
		BotonTresClickEvent(tiempoClick);
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	3368      	adds	r3, #104	@ 0x68
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	4610      	mov	r0, r2
 800238a:	4798      	blx	r3
		break;
 800238c:	e008      	b.n	80023a0 <_ZN16CestacionVirtual17OnBotonClickEventEii+0x74>
	case BOTON_MANUAL:
		BotonCuatroClickEvent(tiempoClick);
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	3378      	adds	r3, #120	@ 0x78
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	4610      	mov	r0, r2
 800239c:	4798      	blx	r3
		break;
 800239e:	bf00      	nop
	}
}
 80023a0:	bf00      	nop
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <_ZThn8_N16CestacionVirtual17OnBotonClickEventEii>:
	//verifica elnivel de aire
	void procesaAire();
	void ProcesaTemperaturaReal();
	void ProcesaBotones();
	//eventos de CManejadorEventosBoton
	virtual void OnBotonClickEvent(int idBoton, int tiempoClick);
 80023a8:	f1a0 0008 	sub.w	r0, r0, #8
 80023ac:	f7ff bfbe 	b.w	800232c <_ZN16CestacionVirtual17OnBotonClickEventEii>

080023b0 <_ZN16CestacionVirtual22OnBotonPresionadoEventEi>:

void CestacionVirtual::OnBotonPresionadoEvent(int idBoton)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
	switch (idBoton)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	3b01      	subs	r3, #1
 80023be:	2b03      	cmp	r3, #3
 80023c0:	d82a      	bhi.n	8002418 <_ZN16CestacionVirtual22OnBotonPresionadoEventEi+0x68>
 80023c2:	a201      	add	r2, pc, #4	@ (adr r2, 80023c8 <_ZN16CestacionVirtual22OnBotonPresionadoEventEi+0x18>)
 80023c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c8:	080023d9 	.word	0x080023d9
 80023cc:	080023e9 	.word	0x080023e9
 80023d0:	080023f9 	.word	0x080023f9
 80023d4:	08002409 	.word	0x08002409
	{
	case BOTON_MEMORIA1:
		BotonUnoPresionadoEvent();
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	334c      	adds	r3, #76	@ 0x4c
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4610      	mov	r0, r2
 80023e4:	4798      	blx	r3
		break;
 80023e6:	e017      	b.n	8002418 <_ZN16CestacionVirtual22OnBotonPresionadoEventEi+0x68>
	case BOTON_MEMORIA2:
		BotonDosPresionadoEvent();
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	335c      	adds	r3, #92	@ 0x5c
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4610      	mov	r0, r2
 80023f4:	4798      	blx	r3
		break;
 80023f6:	e00f      	b.n	8002418 <_ZN16CestacionVirtual22OnBotonPresionadoEventEi+0x68>
	case BOTON_MEMORIA3:
		BotonTresPresionadoEvent();
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	336c      	adds	r3, #108	@ 0x6c
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4610      	mov	r0, r2
 8002404:	4798      	blx	r3
		break;
 8002406:	e007      	b.n	8002418 <_ZN16CestacionVirtual22OnBotonPresionadoEventEi+0x68>
	case BOTON_MANUAL:
		BotonCuatroPresionadoEvent();
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	337c      	adds	r3, #124	@ 0x7c
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4610      	mov	r0, r2
 8002414:	4798      	blx	r3
		break;
 8002416:	bf00      	nop
	}

}
 8002418:	bf00      	nop
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <_ZThn8_N16CestacionVirtual22OnBotonPresionadoEventEi>:
	virtual void OnBotonPresionadoEvent(int idBoton);
 8002420:	f1a0 0008 	sub.w	r0, r0, #8
 8002424:	f7ff bfc4 	b.w	80023b0 <_ZN16CestacionVirtual22OnBotonPresionadoEventEi>

08002428 <_ZN16CestacionVirtual18OnBotonSueltoEventEi>:

void CestacionVirtual::OnBotonSueltoEvent(int idBoton)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
	switch (idBoton)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	3b01      	subs	r3, #1
 8002436:	2b03      	cmp	r3, #3
 8002438:	d82a      	bhi.n	8002490 <_ZN16CestacionVirtual18OnBotonSueltoEventEi+0x68>
 800243a:	a201      	add	r2, pc, #4	@ (adr r2, 8002440 <_ZN16CestacionVirtual18OnBotonSueltoEventEi+0x18>)
 800243c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002440:	08002451 	.word	0x08002451
 8002444:	08002461 	.word	0x08002461
 8002448:	08002471 	.word	0x08002471
 800244c:	08002481 	.word	0x08002481
	{
	case BOTON_MEMORIA1:
		BotonUnoSueltoEvent();
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	3354      	adds	r3, #84	@ 0x54
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4610      	mov	r0, r2
 800245c:	4798      	blx	r3
		break;
 800245e:	e017      	b.n	8002490 <_ZN16CestacionVirtual18OnBotonSueltoEventEi+0x68>
	case BOTON_MEMORIA2:
		BotonDosSueltoEvent();
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	3364      	adds	r3, #100	@ 0x64
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4610      	mov	r0, r2
 800246c:	4798      	blx	r3
		break;
 800246e:	e00f      	b.n	8002490 <_ZN16CestacionVirtual18OnBotonSueltoEventEi+0x68>
	case BOTON_MEMORIA3:
		BotonTresSueltoEvent();
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	3374      	adds	r3, #116	@ 0x74
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4610      	mov	r0, r2
 800247c:	4798      	blx	r3
		break;
 800247e:	e007      	b.n	8002490 <_ZN16CestacionVirtual18OnBotonSueltoEventEi+0x68>
	case BOTON_MANUAL:
		BotonCuatroSueltoEvent();
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	3384      	adds	r3, #132	@ 0x84
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4610      	mov	r0, r2
 800248c:	4798      	blx	r3
		break;
 800248e:	bf00      	nop
	}
}
 8002490:	bf00      	nop
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <_ZThn8_N16CestacionVirtual18OnBotonSueltoEventEi>:
	virtual void OnBotonSueltoEvent(int idBoton);
 8002498:	f1a0 0008 	sub.w	r0, r0, #8
 800249c:	f7ff bfc4 	b.w	8002428 <_ZN16CestacionVirtual18OnBotonSueltoEventEi>

080024a0 <_ZN16CestacionVirtual19OnIncrementoEncoderEi>:

//eventros del encoder
void CestacionVirtual::OnIncrementoEncoder(int id_Encoder)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
	EncoderIncremento();
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	3398      	adds	r3, #152	@ 0x98
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4610      	mov	r0, r2
 80024b6:	4798      	blx	r3
}
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <_ZThn12_N16CestacionVirtual19OnIncrementoEncoderEi>:
	//eventros del encoder
	virtual void OnIncrementoEncoder(int id_Encoder);
 80024c0:	f1a0 000c 	sub.w	r0, r0, #12
 80024c4:	f7ff bfec 	b.w	80024a0 <_ZN16CestacionVirtual19OnIncrementoEncoderEi>

080024c8 <_ZN16CestacionVirtual19OnDecrementoEncoderEi>:

void CestacionVirtual::OnDecrementoEncoder(int id_Encoder)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
	EncoderDecremento();
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	339c      	adds	r3, #156	@ 0x9c
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4610      	mov	r0, r2
 80024de:	4798      	blx	r3
}
 80024e0:	bf00      	nop
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <_ZThn12_N16CestacionVirtual19OnDecrementoEncoderEi>:
	virtual void OnDecrementoEncoder(int id_Encoder);
 80024e8:	f1a0 000c 	sub.w	r0, r0, #12
 80024ec:	f7ff bfec 	b.w	80024c8 <_ZN16CestacionVirtual19OnDecrementoEncoderEi>

080024f0 <_ZN16CestacionVirtual24OnBotonEncoderClickEventEii>:

void CestacionVirtual::OnBotonEncoderClickEvent(int id_Encoder, int tiempoClick)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
	BotonPerillaClickEvent(tiempoClick);
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	3388      	adds	r3, #136	@ 0x88
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	4610      	mov	r0, r2
 800250a:	4798      	blx	r3
}
 800250c:	bf00      	nop
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <_ZThn12_N16CestacionVirtual24OnBotonEncoderClickEventEii>:
	virtual void OnBotonEncoderClickEvent(int id_Encoder, int tiempoClick);
 8002514:	f1a0 000c 	sub.w	r0, r0, #12
 8002518:	f7ff bfea 	b.w	80024f0 <_ZN16CestacionVirtual24OnBotonEncoderClickEventEii>

0800251c <_ZN16CestacionVirtual29OnBotonEncoderPresionadoEventEi>:

void CestacionVirtual::OnBotonEncoderPresionadoEvent(int id_Encoder)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
	BotonPerillaPresionadoEvent();
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	338c      	adds	r3, #140	@ 0x8c
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4610      	mov	r0, r2
 8002532:	4798      	blx	r3
}
 8002534:	bf00      	nop
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <_ZThn12_N16CestacionVirtual29OnBotonEncoderPresionadoEventEi>:
	virtual void OnBotonEncoderPresionadoEvent(int id_Encoder);
 800253c:	f1a0 000c 	sub.w	r0, r0, #12
 8002540:	f7ff bfec 	b.w	800251c <_ZN16CestacionVirtual29OnBotonEncoderPresionadoEventEi>

08002544 <_ZN16CestacionVirtual34OnBotonEncoderPresionadoLargoEventEi>:

void CestacionVirtual::OnBotonEncoderPresionadoLargoEvent(int id_Encoder)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
	BotonPerillaPresionadoLargoEvent();
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	3390      	adds	r3, #144	@ 0x90
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4610      	mov	r0, r2
 800255a:	4798      	blx	r3
}
 800255c:	bf00      	nop
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <_ZThn12_N16CestacionVirtual34OnBotonEncoderPresionadoLargoEventEi>:
	virtual void OnBotonEncoderPresionadoLargoEvent(int id_Encoder);
 8002564:	f1a0 000c 	sub.w	r0, r0, #12
 8002568:	f7ff bfec 	b.w	8002544 <_ZN16CestacionVirtual34OnBotonEncoderPresionadoLargoEventEi>

0800256c <_ZN16CestacionVirtual25OnBotonEncoderSueltoEventEi>:

void CestacionVirtual::OnBotonEncoderSueltoEvent(int id_Encoder)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
	BotonPerillaSueltoEvent();
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	3394      	adds	r3, #148	@ 0x94
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4610      	mov	r0, r2
 8002582:	4798      	blx	r3
}
 8002584:	bf00      	nop
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <_ZThn12_N16CestacionVirtual25OnBotonEncoderSueltoEventEi>:
	virtual void OnBotonEncoderSueltoEvent(int id_Encoder);
 800258c:	f1a0 000c 	sub.w	r0, r0, #12
 8002590:	f7ff bfec 	b.w	800256c <_ZN16CestacionVirtual25OnBotonEncoderSueltoEventEi>

08002594 <_ZN16CestacionVirtual21IncrementaTemperaturaEv>:

void CestacionVirtual::IncrementaTemperatura()
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
	if (TemperaturaEspecificada < TemperaturaMaxima)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699a      	ldr	r2, [r3, #24]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	da0d      	bge.n	80025c4 <_ZN16CestacionVirtual21IncrementaTemperaturaEv+0x30>
	{
		TemperaturaEspecificada++;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	1c5a      	adds	r2, r3, #1
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	619a      	str	r2, [r3, #24]
		TemperaturaEvent(TemperaturaEspecificada);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	333c      	adds	r3, #60	@ 0x3c
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6992      	ldr	r2, [r2, #24]
 80025c0:	4611      	mov	r1, r2
 80025c2:	4798      	blx	r3
	}
}
 80025c4:	bf00      	nop
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <_ZN16CestacionVirtual21DecrementaTemperaturaEv>:

void CestacionVirtual::DecrementaTemperatura()
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
	if (TemperaturaEspecificada > 0)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	dd0d      	ble.n	80025f8 <_ZN16CestacionVirtual21DecrementaTemperaturaEv+0x2c>
	{
		TemperaturaEspecificada--;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	1e5a      	subs	r2, r3, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	619a      	str	r2, [r3, #24]
		TemperaturaEvent(TemperaturaEspecificada);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	333c      	adds	r3, #60	@ 0x3c
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6992      	ldr	r2, [r2, #24]
 80025f4:	4611      	mov	r1, r2
 80025f6:	4798      	blx	r3
	}
}
 80025f8:	bf00      	nop
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <_ZN16CestacionVirtual19InterrupcionEncoderEv>:

void CestacionVirtual::InterrupcionEncoder()
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
	Encoder.Procesa();
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	33d4      	adds	r3, #212	@ 0xd4
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff f895 	bl	800173c <_ZN8CEncoder7ProcesaEv>
}
 8002612:	bf00      	nop
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <_ZN16CestacionVirtual17ActivarCalefactorEv>:

void CestacionVirtual::ActivarCalefactor()
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
	EstadoCalefator = ENCENDIDO;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr

08002632 <_ZN16CestacionVirtual20DesactivarCalefactorEv>:

void CestacionVirtual::DesactivarCalefactor()
{
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
	EstadoCalefator = APAGADO;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr
	...

0800264c <_ZN16CestacionVirtual19EnfriaYApagaPistolaEv>:

void CestacionVirtual::EnfriaYApagaPistola()
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
	calefactor.Apagar();
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800265a:	4618      	mov	r0, r3
 800265c:	f7fe fe69 	bl	8001332 <_ZN10Calefactor6ApagarEv>
	float temperatura = GetTemperaturaReal();
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	3308      	adds	r3, #8
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	4798      	blx	r3
 800266c:	60f8      	str	r0, [r7, #12]
	if (temperatura <= TEMPERATURA_APAGADO)
 800266e:	490c      	ldr	r1, [pc, #48]	@ (80026a0 <_ZN16CestacionVirtual19EnfriaYApagaPistolaEv+0x54>)
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f7fe fc23 	bl	8000ebc <__aeabi_fcmple>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d007      	beq.n	800268c <_ZN16CestacionVirtual19EnfriaYApagaPistolaEv+0x40>
	{
		pwm.SicloTrabajo(0);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8002682:	2100      	movs	r1, #0
 8002684:	4618      	mov	r0, r3
 8002686:	f002 faa9 	bl	8004bdc <_ZN3Pwm12SicloTrabajoEi>
		return;
 800268a:	e006      	b.n	800269a <_ZN16CestacionVirtual19EnfriaYApagaPistolaEv+0x4e>
	}
	//pongo al maximo el aire para enfriar la pistola
	pwm.SicloTrabajo(100);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8002692:	2164      	movs	r1, #100	@ 0x64
 8002694:	4618      	mov	r0, r3
 8002696:	f002 faa1 	bl	8004bdc <_ZN3Pwm12SicloTrabajoEi>
}
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	41f00000 	.word	0x41f00000

080026a4 <_ZN16CestacionVirtual23OnSensorMagneticoChangeEi>:

void CestacionVirtual::OnSensorMagneticoChange(int estado)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]

}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <_ZThn16_N16CestacionVirtual23OnSensorMagneticoChangeEi>:
	virtual void IncrementaTemperatura();
	virtual void DecrementaTemperatura();
	void ProcesaCalefactor();
	virtual void OnSensorMagneticoChange(int estado);
 80026b8:	f1a0 0010 	sub.w	r0, r0, #16
 80026bc:	f7ff bff2 	b.w	80026a4 <_ZN16CestacionVirtual23OnSensorMagneticoChangeEi>

080026c0 <_ZN16CestacionVirtual7ProcesaEv>:

void CestacionVirtual::Procesa()
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
	ProcesaTemperatura();
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f810 	bl	80026ee <_ZN16CestacionVirtual18ProcesaTemperaturaEv>
	ProcesaTemperaturaReal();
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f82d 	bl	800272e <_ZN16CestacionVirtual22ProcesaTemperaturaRealEv>
	procesaAire();
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f84f 	bl	8002778 <_ZN16CestacionVirtual11procesaAireEv>
	ProcesaBotones();
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f86c 	bl	80027b8 <_ZN16CestacionVirtual14ProcesaBotonesEv>
	ProcesaCalefactor();
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 f885 	bl	80027f0 <_ZN16CestacionVirtual17ProcesaCalefactorEv>
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <_ZN16CestacionVirtual18ProcesaTemperaturaEv>:

//verifica el nivel de temperatura seleccinada por el usuario
void CestacionVirtual::ProcesaTemperatura()
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b084      	sub	sp, #16
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
	//leo la temperatura
	int temp = GetTemperatura();
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	3310      	adds	r3, #16
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	4798      	blx	r3
 8002702:	60f8      	str	r0, [r7, #12]
	//veo si cambio
	if (temperaturaAnterior != temp)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	429a      	cmp	r2, r3
 800270c:	d00b      	beq.n	8002726 <_ZN16CestacionVirtual18ProcesaTemperaturaEv+0x38>
	{
		temperaturaAnterior = temp;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	61da      	str	r2, [r3, #28]
		//aviso que cambio la temperatura
		TemperaturaEvent(temperaturaAnterior);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	333c      	adds	r3, #60	@ 0x3c
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	69d2      	ldr	r2, [r2, #28]
 8002722:	4611      	mov	r1, r2
 8002724:	4798      	blx	r3
	}
}
 8002726:	bf00      	nop
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <_ZN16CestacionVirtual22ProcesaTemperaturaRealEv>:

void CestacionVirtual::ProcesaTemperaturaReal()
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b084      	sub	sp, #16
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
	int temperatura = GetTemperaturaReal();
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	3308      	adds	r3, #8
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	4798      	blx	r3
 8002742:	4603      	mov	r3, r0
 8002744:	4618      	mov	r0, r3
 8002746:	f7fe fbd7 	bl	8000ef8 <__aeabi_f2iz>
 800274a:	4603      	mov	r3, r0
 800274c:	60fb      	str	r3, [r7, #12]
	if (temperaturaRealAnterior != temperatura)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	429a      	cmp	r2, r3
 8002756:	d00b      	beq.n	8002770 <_ZN16CestacionVirtual22ProcesaTemperaturaRealEv+0x42>
	{
		temperaturaRealAnterior = temperatura;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	621a      	str	r2, [r3, #32]
		TemperaturaRealEvent(temperaturaRealAnterior);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	3344      	adds	r3, #68	@ 0x44
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6a12      	ldr	r2, [r2, #32]
 800276c:	4611      	mov	r1, r2
 800276e:	4798      	blx	r3
	}
}
 8002770:	bf00      	nop
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <_ZN16CestacionVirtual11procesaAireEv>:

//verifica elnivel de aire
void CestacionVirtual::procesaAire()
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
	int aire = GetNivelAire();
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	3318      	adds	r3, #24
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	4798      	blx	r3
 800278c:	60f8      	str	r0, [r7, #12]
	if (AireAnterior != aire)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	429a      	cmp	r2, r3
 8002796:	d00b      	beq.n	80027b0 <_ZN16CestacionVirtual11procesaAireEv+0x38>
	{
		AireAnterior = aire;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	625a      	str	r2, [r3, #36]	@ 0x24
		NivelAireEvent(AireAnterior);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	3340      	adds	r3, #64	@ 0x40
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80027ac:	4611      	mov	r1, r2
 80027ae:	4798      	blx	r3
	}
}
 80027b0:	bf00      	nop
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <_ZN16CestacionVirtual14ProcesaBotonesEv>:

void CestacionVirtual::ProcesaBotones()
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
	BotonMemoria1.Procesa();
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3354      	adds	r3, #84	@ 0x54
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fe fc50 	bl	800106a <_ZN15CManejadorBoton7ProcesaEv>
	BotonMemoria2.Procesa();
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3374      	adds	r3, #116	@ 0x74
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe fc4b 	bl	800106a <_ZN15CManejadorBoton7ProcesaEv>
	BotonMemoria3.Procesa();
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3394      	adds	r3, #148	@ 0x94
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fe fc46 	bl	800106a <_ZN15CManejadorBoton7ProcesaEv>
	BotonManual.Procesa();
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	33b4      	adds	r3, #180	@ 0xb4
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fe fc41 	bl	800106a <_ZN15CManejadorBoton7ProcesaEv>
}
 80027e8:	bf00      	nop
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <_ZN16CestacionVirtual17ProcesaCalefactorEv>:

void CestacionVirtual::ProcesaCalefactor()
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
	if (EstadoCalefator == APAGADO)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d106      	bne.n	800280e <_ZN16CestacionVirtual17ProcesaCalefactorEv+0x1e>
	{
		//esta apagado el calefactor
		calefactor.Apagar();
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002806:	4618      	mov	r0, r3
 8002808:	f7fe fd93 	bl	8001332 <_ZN10Calefactor6ApagarEv>
		return;
 800280c:	e02e      	b.n	800286c <_ZN16CestacionVirtual17ProcesaCalefactorEv+0x7c>
	}
	int sensor = sensorMagnetico.Leer();
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8002814:	4618      	mov	r0, r3
 8002816:	f002 fb20 	bl	8004e5a <_ZN15SensorMagnetico4LeerEv>
 800281a:	60f8      	str	r0, [r7, #12]
	if (sensor == BOTON_PRESIONADO)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d103      	bne.n	800282a <_ZN16CestacionVirtual17ProcesaCalefactorEv+0x3a>
	{
		//el usuario coloco la pistola en su base por lo que hay que enfriarla
		EnfriaYApagaPistola();
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7ff ff12 	bl	800264c <_ZN16CestacionVirtual19EnfriaYApagaPistolaEv>
		return;
 8002828:	e020      	b.n	800286c <_ZN16CestacionVirtual17ProcesaCalefactorEv+0x7c>
	}
	float temperatura = GetTemperaturaReal();
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	3308      	adds	r3, #8
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	4798      	blx	r3
 8002836:	60b8      	str	r0, [r7, #8]
	if (temperatura < TemperaturaEspecificada)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	4618      	mov	r0, r3
 800283e:	f7fe fa91 	bl	8000d64 <__aeabi_i2f>
 8002842:	4603      	mov	r3, r0
 8002844:	4619      	mov	r1, r3
 8002846:	68b8      	ldr	r0, [r7, #8]
 8002848:	f7fe fb2e 	bl	8000ea8 <__aeabi_fcmplt>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d006      	beq.n	8002860 <_ZN16CestacionVirtual17ProcesaCalefactorEv+0x70>
	{
		calefactor.Encender();
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002858:	4618      	mov	r0, r3
 800285a:	f7fe fd57 	bl	800130c <_ZN10Calefactor8EncenderEv>
 800285e:	e005      	b.n	800286c <_ZN16CestacionVirtual17ProcesaCalefactorEv+0x7c>
	}
	else
	{
		calefactor.Apagar();
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002866:	4618      	mov	r0, r3
 8002868:	f7fe fd63 	bl	8001332 <_ZN10Calefactor6ApagarEv>
	}
}
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <_ZN18CComponenteBaseTftC1Ev>:
#include <GUI/CComponenteBaseTft.hpp>
#include "stdio.h"
#include <stdarg.h>
#include "string.h"
#include "ILI9341/ILI9341_GFX.hpp"
CComponenteBaseTft::CComponenteBaseTft()
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	4a08      	ldr	r2, [pc, #32]	@ (80028a0 <_ZN18CComponenteBaseTftC1Ev+0x2c>)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	605a      	str	r2, [r3, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	609a      	str	r2, [r3, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	615a      	str	r2, [r3, #20]
{
	// TODO Auto-generated constructor stub

}
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4618      	mov	r0, r3
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr
 80028a0:	0800b988 	.word	0x0800b988

080028a4 <_ZN18CComponenteBaseTftD1Ev>:

CComponenteBaseTft::~CComponenteBaseTft()
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	4a04      	ldr	r2, [pc, #16]	@ (80028c0 <_ZN18CComponenteBaseTftD1Ev+0x1c>)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4618      	mov	r0, r3
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	0800b988 	.word	0x0800b988

080028c4 <_ZN18CComponenteBaseTftD0Ev>:
CComponenteBaseTft::~CComponenteBaseTft()
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
}
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff ffe9 	bl	80028a4 <_ZN18CComponenteBaseTftD1Ev>
 80028d2:	2118      	movs	r1, #24
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f006 f849 	bl	800896c <_ZdlPvj>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4618      	mov	r0, r3
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <_ZN18CComponenteBaseTft9drawPixelEsst>:

//creo una capa que envuelve todas las funciones de la pantalla tft para mejorar el codigo
void CComponenteBaseTft::CComponenteBaseTft::drawPixel(int16_t x, int16_t y,
		uint16_t color)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	4608      	mov	r0, r1
 80028ee:	4611      	mov	r1, r2
 80028f0:	461a      	mov	r2, r3
 80028f2:	4603      	mov	r3, r0
 80028f4:	817b      	strh	r3, [r7, #10]
 80028f6:	460b      	mov	r3, r1
 80028f8:	813b      	strh	r3, [r7, #8]
 80028fa:	4613      	mov	r3, r2
 80028fc:	80fb      	strh	r3, [r7, #6]
	//Tft->drawPixel(x, y, color);
}
 80028fe:	bf00      	nop
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr

08002908 <_ZN18CComponenteBaseTft10startWriteEv>:

void CComponenteBaseTft::startWrite(void)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
	//Tft->startWrite();
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr

0800291a <_ZN18CComponenteBaseTft10writePixelEsst>:
void CComponenteBaseTft::writePixel(int16_t x, int16_t y, uint16_t color)
{
 800291a:	b480      	push	{r7}
 800291c:	b085      	sub	sp, #20
 800291e:	af00      	add	r7, sp, #0
 8002920:	60f8      	str	r0, [r7, #12]
 8002922:	4608      	mov	r0, r1
 8002924:	4611      	mov	r1, r2
 8002926:	461a      	mov	r2, r3
 8002928:	4603      	mov	r3, r0
 800292a:	817b      	strh	r3, [r7, #10]
 800292c:	460b      	mov	r3, r1
 800292e:	813b      	strh	r3, [r7, #8]
 8002930:	4613      	mov	r3, r2
 8002932:	80fb      	strh	r3, [r7, #6]
	//Tft->writePixel(x, y, color);
}
 8002934:	bf00      	nop
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr

0800293e <_ZN18CComponenteBaseTft13writeFillRectEsssst>:
void CComponenteBaseTft::writeFillRect(int16_t x, int16_t y, int16_t w,
		int16_t h, uint16_t color)
{
 800293e:	b480      	push	{r7}
 8002940:	b085      	sub	sp, #20
 8002942:	af00      	add	r7, sp, #0
 8002944:	60f8      	str	r0, [r7, #12]
 8002946:	4608      	mov	r0, r1
 8002948:	4611      	mov	r1, r2
 800294a:	461a      	mov	r2, r3
 800294c:	4603      	mov	r3, r0
 800294e:	817b      	strh	r3, [r7, #10]
 8002950:	460b      	mov	r3, r1
 8002952:	813b      	strh	r3, [r7, #8]
 8002954:	4613      	mov	r3, r2
 8002956:	80fb      	strh	r3, [r7, #6]
	//Tft->writeFillRect(x, y, w, h, color);
}
 8002958:	bf00      	nop
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr

08002962 <_ZN18CComponenteBaseTft14writeFastVLineEssst>:
void CComponenteBaseTft::writeFastVLine(int16_t x, int16_t y, int16_t h,
		uint16_t color)
{
 8002962:	b480      	push	{r7}
 8002964:	b085      	sub	sp, #20
 8002966:	af00      	add	r7, sp, #0
 8002968:	60f8      	str	r0, [r7, #12]
 800296a:	4608      	mov	r0, r1
 800296c:	4611      	mov	r1, r2
 800296e:	461a      	mov	r2, r3
 8002970:	4603      	mov	r3, r0
 8002972:	817b      	strh	r3, [r7, #10]
 8002974:	460b      	mov	r3, r1
 8002976:	813b      	strh	r3, [r7, #8]
 8002978:	4613      	mov	r3, r2
 800297a:	80fb      	strh	r3, [r7, #6]
	//Tft->writeFastVLine(x, y, h, color);
}
 800297c:	bf00      	nop
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr

08002986 <_ZN18CComponenteBaseTft14writeFastHLineEssst>:
void CComponenteBaseTft::writeFastHLine(int16_t x, int16_t y, int16_t w,
		uint16_t color)
{
 8002986:	b480      	push	{r7}
 8002988:	b085      	sub	sp, #20
 800298a:	af00      	add	r7, sp, #0
 800298c:	60f8      	str	r0, [r7, #12]
 800298e:	4608      	mov	r0, r1
 8002990:	4611      	mov	r1, r2
 8002992:	461a      	mov	r2, r3
 8002994:	4603      	mov	r3, r0
 8002996:	817b      	strh	r3, [r7, #10]
 8002998:	460b      	mov	r3, r1
 800299a:	813b      	strh	r3, [r7, #8]
 800299c:	4613      	mov	r3, r2
 800299e:	80fb      	strh	r3, [r7, #6]
	//Tft->writeFastHLine(x, y, w, color);
}
 80029a0:	bf00      	nop
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr

080029aa <_ZN18CComponenteBaseTft9writeLineEsssst>:
void CComponenteBaseTft::writeLine(int16_t x0, int16_t y0, int16_t x1,
		int16_t y1, uint16_t color)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b085      	sub	sp, #20
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	60f8      	str	r0, [r7, #12]
 80029b2:	4608      	mov	r0, r1
 80029b4:	4611      	mov	r1, r2
 80029b6:	461a      	mov	r2, r3
 80029b8:	4603      	mov	r3, r0
 80029ba:	817b      	strh	r3, [r7, #10]
 80029bc:	460b      	mov	r3, r1
 80029be:	813b      	strh	r3, [r7, #8]
 80029c0:	4613      	mov	r3, r2
 80029c2:	80fb      	strh	r3, [r7, #6]
	//Tft->writeLine(x0, y0, x1, y1, color);
}
 80029c4:	bf00      	nop
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr

080029ce <_ZN18CComponenteBaseTft8endWriteEv>:
void CComponenteBaseTft::endWrite(void)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
	//Tft->endWrite();
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr

080029e0 <_ZN18CComponenteBaseTft11setRotationEh>:
void CComponenteBaseTft::setRotation(uint8_t r)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	70fb      	strb	r3, [r7, #3]
	//Tft->setRotation(r);
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bc80      	pop	{r7}
 80029f4:	4770      	bx	lr

080029f6 <_ZN18CComponenteBaseTft13invertDisplayEb>:
void CComponenteBaseTft::invertDisplay(bool i)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	460b      	mov	r3, r1
 8002a00:	70fb      	strb	r3, [r7, #3]
	//Tft->invertDisplay(i);
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <_ZN18CComponenteBaseTft13drawFastVLineEssst>:
void CComponenteBaseTft::drawFastVLine(int16_t x, int16_t y, int16_t h,
		uint16_t color)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	4608      	mov	r0, r1
 8002a16:	4611      	mov	r1, r2
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	817b      	strh	r3, [r7, #10]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	813b      	strh	r3, [r7, #8]
 8002a22:	4613      	mov	r3, r2
 8002a24:	80fb      	strh	r3, [r7, #6]
	//Tft->drawFastVLine(x, y, h, color);
}
 8002a26:	bf00      	nop
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr

08002a30 <_ZN18CComponenteBaseTft13drawFastHLineEssst>:
void CComponenteBaseTft::drawFastHLine(int16_t x, int16_t y, int16_t w,
		uint16_t color)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	4608      	mov	r0, r1
 8002a3a:	4611      	mov	r1, r2
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4603      	mov	r3, r0
 8002a40:	817b      	strh	r3, [r7, #10]
 8002a42:	460b      	mov	r3, r1
 8002a44:	813b      	strh	r3, [r7, #8]
 8002a46:	4613      	mov	r3, r2
 8002a48:	80fb      	strh	r3, [r7, #6]
	//Tft->drawFastHLine(x, y, w, color);
}
 8002a4a:	bf00      	nop
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr

08002a54 <_ZN18CComponenteBaseTft10fillScreenEt>:
void CComponenteBaseTft::fillScreen(uint16_t color)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	807b      	strh	r3, [r7, #2]
	//Tft->fillScreen(color);
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr

08002a6a <_ZN18CComponenteBaseTft8drawLineEsssst>:
void CComponenteBaseTft::drawLine(int16_t x0, int16_t y0, int16_t x1,
		int16_t y1, uint16_t color)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b085      	sub	sp, #20
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	60f8      	str	r0, [r7, #12]
 8002a72:	4608      	mov	r0, r1
 8002a74:	4611      	mov	r1, r2
 8002a76:	461a      	mov	r2, r3
 8002a78:	4603      	mov	r3, r0
 8002a7a:	817b      	strh	r3, [r7, #10]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	813b      	strh	r3, [r7, #8]
 8002a80:	4613      	mov	r3, r2
 8002a82:	80fb      	strh	r3, [r7, #6]
	//Tft->drawLine(x0, y0, x1, y1, color);
}
 8002a84:	bf00      	nop
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bc80      	pop	{r7}
 8002a8c:	4770      	bx	lr

08002a8e <_ZN18CComponenteBaseTft5widthEv>:
void CComponenteBaseTft::cp437(bool x)
{
	//Tft->cp437(x);
}
int16_t CComponenteBaseTft::width(void)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
	return 319;
 8002a96:	f240 133f 	movw	r3, #319	@ 0x13f
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr

08002aa4 <_ZN18CComponenteBaseTft6heightEv>:
int16_t CComponenteBaseTft::height(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
	return 239;
 8002aac:	23ef      	movs	r3, #239	@ 0xef
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr

08002ab8 <_ZN18CComponenteBaseTft8fillRectEsssst>:
	va_end(pa);
	buffer[posbuffer] = '\0';
	print(buffer);
}
void CComponenteBaseTft::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,uint16_t color)
{
 8002ab8:	b590      	push	{r4, r7, lr}
 8002aba:	b087      	sub	sp, #28
 8002abc:	af02      	add	r7, sp, #8
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	4608      	mov	r0, r1
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	817b      	strh	r3, [r7, #10]
 8002aca:	460b      	mov	r3, r1
 8002acc:	813b      	strh	r3, [r7, #8]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Filled_Rectangle_Coord(x, y, x+w, y+h, color);
 8002ad2:	8978      	ldrh	r0, [r7, #10]
 8002ad4:	8939      	ldrh	r1, [r7, #8]
 8002ad6:	897a      	ldrh	r2, [r7, #10]
 8002ad8:	88fb      	ldrh	r3, [r7, #6]
 8002ada:	4413      	add	r3, r2
 8002adc:	b29c      	uxth	r4, r3
 8002ade:	893a      	ldrh	r2, [r7, #8]
 8002ae0:	8c3b      	ldrh	r3, [r7, #32]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	4613      	mov	r3, r2
 8002aec:	4622      	mov	r2, r4
 8002aee:	f000 ff5c 	bl	80039aa <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt>
}
 8002af2:	bf00      	nop
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd90      	pop	{r4, r7, pc}

08002afa <_ZN18CComponenteBaseTft8drawRectEsssst>:
void CComponenteBaseTft::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,uint16_t color)
{
 8002afa:	b590      	push	{r4, r7, lr}
 8002afc:	b087      	sub	sp, #28
 8002afe:	af02      	add	r7, sp, #8
 8002b00:	60f8      	str	r0, [r7, #12]
 8002b02:	4608      	mov	r0, r1
 8002b04:	4611      	mov	r1, r2
 8002b06:	461a      	mov	r2, r3
 8002b08:	4603      	mov	r3, r0
 8002b0a:	817b      	strh	r3, [r7, #10]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	813b      	strh	r3, [r7, #8]
 8002b10:	4613      	mov	r3, r2
 8002b12:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Hollow_Rectangle_Coord(x, y,x+w,y+h,color);
 8002b14:	8978      	ldrh	r0, [r7, #10]
 8002b16:	8939      	ldrh	r1, [r7, #8]
 8002b18:	897a      	ldrh	r2, [r7, #10]
 8002b1a:	88fb      	ldrh	r3, [r7, #6]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	b29c      	uxth	r4, r3
 8002b20:	893a      	ldrh	r2, [r7, #8]
 8002b22:	8c3b      	ldrh	r3, [r7, #32]
 8002b24:	4413      	add	r3, r2
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	4622      	mov	r2, r4
 8002b30:	f000 feba 	bl	80038a8 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt>
	//Tft->drawRect(x, y, w, h, color);
}
 8002b34:	bf00      	nop
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd90      	pop	{r4, r7, pc}

08002b3c <_ZN18CComponenteBaseTft9setCursorEss>:
void CComponenteBaseTft::setCursor(int16_t x, int16_t y)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	807b      	strh	r3, [r7, #2]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	803b      	strh	r3, [r7, #0]
    CursorX=x;
 8002b4c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	605a      	str	r2, [r3, #4]
    CursorY=y;
 8002b54:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	609a      	str	r2, [r3, #8]
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr

08002b66 <_ZN18CComponenteBaseTft11setTextSizeEh>:
void CComponenteBaseTft::setTextSize(uint8_t s)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	70fb      	strb	r3, [r7, #3]
	TextSize=s;
 8002b72:	78fa      	ldrb	r2, [r7, #3]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	60da      	str	r2, [r3, #12]
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr

08002b82 <_ZN18CComponenteBaseTft12setTextColorEt>:
void CComponenteBaseTft::setTextSize(uint8_t sx, uint8_t sy)
{
	//Tft->setTextSize(sx, sy);
}
void CComponenteBaseTft::setTextColor(uint16_t c)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	807b      	strh	r3, [r7, #2]
	ColorTexto=c;
 8002b8e:	887a      	ldrh	r2, [r7, #2]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	611a      	str	r2, [r3, #16]
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr

08002b9e <_ZN18CComponenteBaseTft5printEPc>:
void CComponenteBaseTft::print(char *texto)
{
 8002b9e:	b590      	push	{r4, r7, lr}
 8002ba0:	b085      	sub	sp, #20
 8002ba2:	af02      	add	r7, sp, #8
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	6039      	str	r1, [r7, #0]
	ILI9341_Draw_Text(texto, CursorX,CursorY, ColorTexto, TextSize, BackColor);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	b2d9      	uxtb	r1, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	b2d8      	uxtb	r0, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	b29c      	uxth	r4, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6952      	ldr	r2, [r2, #20]
 8002bc4:	b292      	uxth	r2, r2
 8002bc6:	9201      	str	r2, [sp, #4]
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	4623      	mov	r3, r4
 8002bcc:	4602      	mov	r2, r0
 8002bce:	6838      	ldr	r0, [r7, #0]
 8002bd0:	f000 ffe4 	bl	8003b9c <_Z17ILI9341_Draw_TextPKchhttt>
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd90      	pop	{r4, r7, pc}

08002bdc <_ZN12CEtiquetaTftD1Ev>:
 */

#include <GUI/CEtiquetaTft.hpp>


CEtiquetaTft::~CEtiquetaTft()
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	4a05      	ldr	r2, [pc, #20]	@ (8002bfc <_ZN12CEtiquetaTftD1Ev+0x20>)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 fa81 	bl	80030f4 <_ZN14CRectanguloTftD1Ev>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	0800b9d8 	.word	0x0800b9d8

08002c00 <_ZN12CEtiquetaTftD0Ev>:
CEtiquetaTft::~CEtiquetaTft()
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
}
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7ff ffe7 	bl	8002bdc <_ZN12CEtiquetaTftD1Ev>
 8002c0e:	21a4      	movs	r1, #164	@ 0xa4
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f005 feab 	bl	800896c <_ZdlPvj>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <_ZN12CEtiquetaTftC1EiiiiiPciiii>:

CEtiquetaTft::CEtiquetaTft(int xi, int yi, int ancho, int alto,	int backColor, char *texto, int colorTexto, int textSize, int contorno,	int colorContorno) :
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b088      	sub	sp, #32
 8002c24:	af04      	add	r7, sp, #16
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
 8002c2c:	603b      	str	r3, [r7, #0]
		CRectanguloTft(xi, yi, ancho, alto, backColor, contorno, colorContorno)
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c32:	9303      	str	r3, [sp, #12]
 8002c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c36:	9302      	str	r3, [sp, #8]
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	9301      	str	r3, [sp, #4]
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	68b9      	ldr	r1, [r7, #8]
 8002c46:	f000 fa77 	bl	8003138 <_ZN14CRectanguloTftC1Eiiiiiii>
 8002c4a:	4a11      	ldr	r2, [pc, #68]	@ (8002c90 <_ZN12CEtiquetaTftC1EiiiiiPciiii+0x70>)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2203      	movs	r2, #3
 8002c54:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
{
	strcpy(Texto, texto);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	3330      	adds	r3, #48	@ 0x30
 8002c6c:	6a39      	ldr	r1, [r7, #32]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f006 fdb5 	bl	80097de <strcpy>
	ColorTexto = colorTexto;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c78:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	TextSize = textSize;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c80:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
}
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	0800b9d8 	.word	0x0800b9d8

08002c94 <_ZN12CEtiquetaTft8SetTextoEPcz>:

void CEtiquetaTft::SetTexto(char *formato, ...)
{
 8002c94:	b40e      	push	{r1, r2, r3}
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b0bb      	sub	sp, #236	@ 0xec
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
	char *p;
	char buffer[100];
	char tmp[100];
	int postmp = 0;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	int posbuffer = 0;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	va_list pa;
	int encontrado = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

	va_start(pa, formato);
 8002cb0:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8002cb4:	60fb      	str	r3, [r7, #12]

	for (p = formato; *p; p++)
 8002cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002cbe:	e0f1      	b.n	8002ea4 <_ZN12CEtiquetaTft8SetTextoEPcz+0x210>
	{

		if (*p != '%')
 8002cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b25      	cmp	r3, #37	@ 0x25
 8002cc8:	d00f      	beq.n	8002cea <_ZN12CEtiquetaTft8SetTextoEPcz+0x56>
		{
			buffer[posbuffer] = *p;
 8002cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cce:	7819      	ldrb	r1, [r3, #0]
 8002cd0:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8002cd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002cd8:	4413      	add	r3, r2
 8002cda:	460a      	mov	r2, r1
 8002cdc:	701a      	strb	r2, [r3, #0]
			posbuffer++;
 8002cde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
			continue;
 8002ce8:	e0d7      	b.n	8002e9a <_ZN12CEtiquetaTft8SetTextoEPcz+0x206>
		}
		encontrado = 0;
 8002cea:	2300      	movs	r3, #0
 8002cec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		switch (*++p)
 8002cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	3b63      	subs	r3, #99	@ 0x63
 8002d02:	2b15      	cmp	r3, #21
 8002d04:	f200 8092 	bhi.w	8002e2c <_ZN12CEtiquetaTft8SetTextoEPcz+0x198>
 8002d08:	a201      	add	r2, pc, #4	@ (adr r2, 8002d10 <_ZN12CEtiquetaTft8SetTextoEPcz+0x7c>)
 8002d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0e:	bf00      	nop
 8002d10:	08002dd9 	.word	0x08002dd9
 8002d14:	08002d69 	.word	0x08002d69
 8002d18:	08002e2d 	.word	0x08002e2d
 8002d1c:	08002df5 	.word	0x08002df5
 8002d20:	08002e2d 	.word	0x08002e2d
 8002d24:	08002e2d 	.word	0x08002e2d
 8002d28:	08002d85 	.word	0x08002d85
 8002d2c:	08002e2d 	.word	0x08002e2d
 8002d30:	08002e2d 	.word	0x08002e2d
 8002d34:	08002e2d 	.word	0x08002e2d
 8002d38:	08002e2d 	.word	0x08002e2d
 8002d3c:	08002e2d 	.word	0x08002e2d
 8002d40:	08002e2d 	.word	0x08002e2d
 8002d44:	08002dbd 	.word	0x08002dbd
 8002d48:	08002e2d 	.word	0x08002e2d
 8002d4c:	08002e2d 	.word	0x08002e2d
 8002d50:	08002e11 	.word	0x08002e11
 8002d54:	08002e2d 	.word	0x08002e2d
 8002d58:	08002e2d 	.word	0x08002e2d
 8002d5c:	08002e2d 	.word	0x08002e2d
 8002d60:	08002e2d 	.word	0x08002e2d
 8002d64:	08002da1 	.word	0x08002da1
		{
		case 'd':
			sprintf(tmp, "%d", va_arg(pa, int));
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	1d1a      	adds	r2, r3, #4
 8002d6c:	60fa      	str	r2, [r7, #12]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	f107 0310 	add.w	r3, r7, #16
 8002d74:	4959      	ldr	r1, [pc, #356]	@ (8002edc <_ZN12CEtiquetaTft8SetTextoEPcz+0x248>)
 8002d76:	4618      	mov	r0, r3
 8002d78:	f006 fbfa 	bl	8009570 <siprintf>
			encontrado = 1;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 8002d82:	e063      	b.n	8002e4c <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		case 'i':
			sprintf(tmp, "%i", va_arg(pa, int));
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	1d1a      	adds	r2, r3, #4
 8002d88:	60fa      	str	r2, [r7, #12]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	f107 0310 	add.w	r3, r7, #16
 8002d90:	4953      	ldr	r1, [pc, #332]	@ (8002ee0 <_ZN12CEtiquetaTft8SetTextoEPcz+0x24c>)
 8002d92:	4618      	mov	r0, r3
 8002d94:	f006 fbec 	bl	8009570 <siprintf>
			encontrado = 1;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 8002d9e:	e055      	b.n	8002e4c <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		case 'x':
			sprintf(tmp, "%x", va_arg(pa, int));
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	1d1a      	adds	r2, r3, #4
 8002da4:	60fa      	str	r2, [r7, #12]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	f107 0310 	add.w	r3, r7, #16
 8002dac:	494d      	ldr	r1, [pc, #308]	@ (8002ee4 <_ZN12CEtiquetaTft8SetTextoEPcz+0x250>)
 8002dae:	4618      	mov	r0, r3
 8002db0:	f006 fbde 	bl	8009570 <siprintf>
			encontrado = 1;
 8002db4:	2301      	movs	r3, #1
 8002db6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 8002dba:	e047      	b.n	8002e4c <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		case 'p':
			sprintf(tmp, "%p", va_arg(pa, int));
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	1d1a      	adds	r2, r3, #4
 8002dc0:	60fa      	str	r2, [r7, #12]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	f107 0310 	add.w	r3, r7, #16
 8002dc8:	4947      	ldr	r1, [pc, #284]	@ (8002ee8 <_ZN12CEtiquetaTft8SetTextoEPcz+0x254>)
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f006 fbd0 	bl	8009570 <siprintf>
			encontrado = 1;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 8002dd6:	e039      	b.n	8002e4c <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		case 'c':
			sprintf(tmp, "%c", va_arg(pa, int));
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	1d1a      	adds	r2, r3, #4
 8002ddc:	60fa      	str	r2, [r7, #12]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	f107 0310 	add.w	r3, r7, #16
 8002de4:	4941      	ldr	r1, [pc, #260]	@ (8002eec <_ZN12CEtiquetaTft8SetTextoEPcz+0x258>)
 8002de6:	4618      	mov	r0, r3
 8002de8:	f006 fbc2 	bl	8009570 <siprintf>
			encontrado = 1;
 8002dec:	2301      	movs	r3, #1
 8002dee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 8002df2:	e02b      	b.n	8002e4c <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		case 'f':
			sprintf(tmp, "%f", va_arg(pa, int));
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	1d1a      	adds	r2, r3, #4
 8002df8:	60fa      	str	r2, [r7, #12]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	f107 0310 	add.w	r3, r7, #16
 8002e00:	493b      	ldr	r1, [pc, #236]	@ (8002ef0 <_ZN12CEtiquetaTft8SetTextoEPcz+0x25c>)
 8002e02:	4618      	mov	r0, r3
 8002e04:	f006 fbb4 	bl	8009570 <siprintf>
			encontrado = 1;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 8002e0e:	e01d      	b.n	8002e4c <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		case 's':
			sprintf(tmp, "%s", va_arg(pa, char *));
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	1d1a      	adds	r2, r3, #4
 8002e14:	60fa      	str	r2, [r7, #12]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	f107 0310 	add.w	r3, r7, #16
 8002e1c:	4935      	ldr	r1, [pc, #212]	@ (8002ef4 <_ZN12CEtiquetaTft8SetTextoEPcz+0x260>)
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f006 fba6 	bl	8009570 <siprintf>
			encontrado = 1;
 8002e24:	2301      	movs	r3, #1
 8002e26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			break;
 8002e2a:	e00f      	b.n	8002e4c <_ZN12CEtiquetaTft8SetTextoEPcz+0x1b8>
		default:
			buffer[posbuffer] = *p;
 8002e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e30:	7819      	ldrb	r1, [r3, #0]
 8002e32:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8002e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e3a:	4413      	add	r3, r2
 8002e3c:	460a      	mov	r2, r1
 8002e3e:	701a      	strb	r2, [r3, #0]
			posbuffer++;
 8002e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e44:	3301      	adds	r3, #1
 8002e46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
			break;
 8002e4a:	bf00      	nop
		}
		if (encontrado == 1)
 8002e4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d122      	bne.n	8002e9a <_ZN12CEtiquetaTft8SetTextoEPcz+0x206>
		{
			postmp = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
			while (tmp[postmp] != '\0')
 8002e5a:	e016      	b.n	8002e8a <_ZN12CEtiquetaTft8SetTextoEPcz+0x1f6>
			{
				buffer[posbuffer] = tmp[postmp];
 8002e5c:	f107 0210 	add.w	r2, r7, #16
 8002e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e64:	4413      	add	r3, r2
 8002e66:	7819      	ldrb	r1, [r3, #0]
 8002e68:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8002e6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e70:	4413      	add	r3, r2
 8002e72:	460a      	mov	r2, r1
 8002e74:	701a      	strb	r2, [r3, #0]
				posbuffer++;
 8002e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
				postmp++;
 8002e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e84:	3301      	adds	r3, #1
 8002e86:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
			while (tmp[postmp] != '\0')
 8002e8a:	f107 0210 	add.w	r2, r7, #16
 8002e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e92:	4413      	add	r3, r2
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1e0      	bne.n	8002e5c <_ZN12CEtiquetaTft8SetTextoEPcz+0x1c8>
	for (p = formato; *p; p++)
 8002e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f47f af08 	bne.w	8002cc0 <_ZN12CEtiquetaTft8SetTextoEPcz+0x2c>
			}
		}
	}
	va_end(pa);
	buffer[posbuffer] = '\0';
 8002eb0:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8002eb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002eb8:	4413      	add	r3, r2
 8002eba:	2200      	movs	r2, #0
 8002ebc:	701a      	strb	r2, [r3, #0]
	strcpy(Texto, buffer);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	3330      	adds	r3, #48	@ 0x30
 8002ec2:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f006 fc88 	bl	80097de <strcpy>
	//Texto=buffer;
}
 8002ece:	bf00      	nop
 8002ed0:	37ec      	adds	r7, #236	@ 0xec
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ed8:	b003      	add	sp, #12
 8002eda:	4770      	bx	lr
 8002edc:	0800b690 	.word	0x0800b690
 8002ee0:	0800b694 	.word	0x0800b694
 8002ee4:	0800b698 	.word	0x0800b698
 8002ee8:	0800b69c 	.word	0x0800b69c
 8002eec:	0800b6a0 	.word	0x0800b6a0
 8002ef0:	0800b6a4 	.word	0x0800b6a4
 8002ef4:	0800b6a8 	.word	0x0800b6a8

08002ef8 <_ZN12CEtiquetaTft13SetSeparacionEii>:
{
	return Texto;
}

void CEtiquetaTft::SetSeparacion(int izquieda, int arriba)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
	SeparacionIzquierda = izquieda;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	SeparacionArriba = arriba;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
}
 8002f14:	bf00      	nop
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr

08002f1e <_ZN12CEtiquetaTft13SetColorTextoEi>:
{
	return SeparacionIzquierda;
}

void CEtiquetaTft::SetColorTexto(int color)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
 8002f26:	6039      	str	r1, [r7, #0]
	ColorTexto = color;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bc80      	pop	{r7}
 8002f38:	4770      	bx	lr

08002f3a <_ZN12CEtiquetaTft4ShowEv>:
{
	return ColorTexto;
}

void CEtiquetaTft::Show()
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b082      	sub	sp, #8
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
	//mandamos a dibujar el rectangulo
	CRectanguloTft::Show();
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f000 f929 	bl	800319c <_ZN14CRectanguloTft4ShowEv>
	//me posiciono el la pocicion del texto
	setCursor(Xi + SeparacionIzquierda, Yi + SeparacionArriba);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	4413      	add	r3, r2
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	b219      	sxth	r1, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	4413      	add	r3, r2
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	b21b      	sxth	r3, r3
 8002f74:	461a      	mov	r2, r3
 8002f76:	f7ff fde1 	bl	8002b3c <_ZN18CComponenteBaseTft9setCursorEss>
	//asigno tamaño de la letra
	setTextSize (TextSize);
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	4619      	mov	r1, r3
 8002f86:	4610      	mov	r0, r2
 8002f88:	f7ff fded 	bl	8002b66 <_ZN18CComponenteBaseTft11setTextSizeEh>
	//asigno el color de texto
	setTextColor (ColorTexto);
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	4619      	mov	r1, r3
 8002f98:	4610      	mov	r0, r2
 8002f9a:	f7ff fdf2 	bl	8002b82 <_ZN18CComponenteBaseTft12setTextColorEt>
	//muestro el texto;
	print (Texto);
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3330      	adds	r3, #48	@ 0x30
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	f7ff fdf9 	bl	8002b9e <_ZN18CComponenteBaseTft5printEPc>
}
 8002fac:	bf00      	nop
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <_ZN13CPantallaBaseD1Ev>:
 *      Author: W10
 */

#include <GUI/CPantallaBase.hpp>

CPantallaBase::~CPantallaBase()
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	4a05      	ldr	r2, [pc, #20]	@ (8002fd4 <_ZN13CPantallaBaseD1Ev+0x20>)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 f895 	bl	80030f4 <_ZN14CRectanguloTftD1Ev>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	0800ba34 	.word	0x0800ba34

08002fd8 <_ZN13CPantallaBaseD0Ev>:
CPantallaBase::~CPantallaBase()
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
}
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7ff ffe7 	bl	8002fb4 <_ZN13CPantallaBaseD1Ev>
 8002fe6:	219c      	movs	r1, #156	@ 0x9c
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f005 fcbf 	bl	800896c <_ZdlPvj>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <_ZN13CPantallaBaseC1EiPc>:

//constructor
CPantallaBase::CPantallaBase(int verTitulo, char *titulo) :
 8002ff8:	b590      	push	{r4, r7, lr}
 8002ffa:	b08f      	sub	sp, #60	@ 0x3c
 8002ffc:	af08      	add	r7, sp, #32
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
		CRectanguloTft(0, 0, 0, 0, COLOR::BLACK, 1, COLOR::BLUE)
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	231f      	movs	r3, #31
 8003008:	9303      	str	r3, [sp, #12]
 800300a:	2301      	movs	r3, #1
 800300c:	9302      	str	r3, [sp, #8]
 800300e:	2300      	movs	r3, #0
 8003010:	9301      	str	r3, [sp, #4]
 8003012:	2300      	movs	r3, #0
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	2300      	movs	r3, #0
 8003018:	2200      	movs	r2, #0
 800301a:	2100      	movs	r1, #0
 800301c:	f000 f88c 	bl	8003138 <_ZN14CRectanguloTftC1Eiiiiiii>
 8003020:	4a24      	ldr	r2, [pc, #144]	@ (80030b4 <_ZN13CPantallaBaseC1EiPc+0xbc>)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2201      	movs	r2, #1
 800302a:	635a      	str	r2, [r3, #52]	@ 0x34
{
	VerTitulo = verTitulo;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	635a      	str	r2, [r3, #52]	@ 0x34
	strcpy(Titulo, titulo);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	3338      	adds	r3, #56	@ 0x38
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	4618      	mov	r0, r3
 800303a:	f006 fbd0 	bl	80097de <strcpy>
	setRotation(3);  //ROTACION::HORIZONTAL); //en horizontal
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2103      	movs	r1, #3
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff fccc 	bl	80029e0 <_ZN18CComponenteBaseTft11setRotationEh>
	int ancho = width();
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff fd1f 	bl	8002a8e <_ZN18CComponenteBaseTft5widthEv>
 8003050:	4603      	mov	r3, r0
 8003052:	617b      	str	r3, [r7, #20]
	int alto = height();
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff fd24 	bl	8002aa4 <_ZN18CComponenteBaseTft6heightEv>
 800305c:	4603      	mov	r3, r0
 800305e:	613b      	str	r3, [r7, #16]
	Redimenciona(ancho, alto);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	6979      	ldr	r1, [r7, #20]
 8003066:	4618      	mov	r0, r3
 8003068:	f000 f8e7 	bl	800323a <_ZN14CRectanguloTft12RedimencionaEii>
	LabelTitulo = new CEtiquetaTft( Xi, Yi, ancho, 30, COLOR::BLUE, Titulo,	COLOR::WHITE, 3, 0, COLOR::BLUE);
 800306c:	20a4      	movs	r0, #164	@ 0xa4
 800306e:	f005 fc7f 	bl	8008970 <_Znwj>
 8003072:	4603      	mov	r3, r0
 8003074:	461c      	mov	r4, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6999      	ldr	r1, [r3, #24]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	69da      	ldr	r2, [r3, #28]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	3338      	adds	r3, #56	@ 0x38
 8003082:	201f      	movs	r0, #31
 8003084:	9006      	str	r0, [sp, #24]
 8003086:	2000      	movs	r0, #0
 8003088:	9005      	str	r0, [sp, #20]
 800308a:	2003      	movs	r0, #3
 800308c:	9004      	str	r0, [sp, #16]
 800308e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003092:	9003      	str	r0, [sp, #12]
 8003094:	9302      	str	r3, [sp, #8]
 8003096:	231f      	movs	r3, #31
 8003098:	9301      	str	r3, [sp, #4]
 800309a:	231e      	movs	r3, #30
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	4620      	mov	r0, r4
 80030a2:	f7ff fdbd 	bl	8002c20 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	631c      	str	r4, [r3, #48]	@ 0x30
}
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	4618      	mov	r0, r3
 80030ae:	371c      	adds	r7, #28
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd90      	pop	{r4, r7, pc}
 80030b4:	0800ba34 	.word	0x0800ba34

080030b8 <_ZN13CPantallaBase4ShowEv>:
//funcion que se tiene que reemplazar para verse
void CPantallaBase::Show()
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
	//dibujo el fondo
	CRectanguloTft::Show();
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 f86a 	bl	800319c <_ZN14CRectanguloTft4ShowEv>
	//dibujo el titulo
	LabelTitulo->Show();
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	3348      	adds	r3, #72	@ 0x48
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4610      	mov	r0, r2
 80030d8:	4798      	blx	r3
}
 80030da:	bf00      	nop
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <_ZN13CPantallaBase8RefrescaEv>:
void CPantallaBase::Refresca()
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]

}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr

080030f4 <_ZN14CRectanguloTftD1Ev>:
 *      Author: W10
 */

#include <GUI/CRectanguloTft.hpp>

CRectanguloTft::~CRectanguloTft()
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	4a05      	ldr	r2, [pc, #20]	@ (8003114 <_ZN14CRectanguloTftD1Ev+0x20>)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff fbcd 	bl	80028a4 <_ZN18CComponenteBaseTftD1Ev>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4618      	mov	r0, r3
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	0800ba94 	.word	0x0800ba94

08003118 <_ZN14CRectanguloTftD0Ev>:
CRectanguloTft::~CRectanguloTft()
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
}
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7ff ffe7 	bl	80030f4 <_ZN14CRectanguloTftD1Ev>
 8003126:	2130      	movs	r1, #48	@ 0x30
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f005 fc1f 	bl	800896c <_ZdlPvj>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4618      	mov	r0, r3
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <_ZN14CRectanguloTftC1Eiiiiiii>:

CRectanguloTft::CRectanguloTft(int xi, int yi, int ancho , int alto , int backColor , int contorno , int colorContorno )
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
 8003144:	603b      	str	r3, [r7, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff fb93 	bl	8002874 <_ZN18CComponenteBaseTftC1Ev>
 800314e:	4a12      	ldr	r2, [pc, #72]	@ (8003198 <_ZN14CRectanguloTftC1Eiiiiiii+0x60>)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	629a      	str	r2, [r3, #40]	@ 0x28
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003160:	62da      	str	r2, [r3, #44]	@ 0x2c
{
  Xi = xi;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	619a      	str	r2, [r3, #24]
  Ancho = ancho;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	621a      	str	r2, [r3, #32]
  Yi = yi;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	61da      	str	r2, [r3, #28]
  Alto = alto;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	625a      	str	r2, [r3, #36]	@ 0x24
  BackColor = backColor;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	69fa      	ldr	r2, [r7, #28]
 800317e:	615a      	str	r2, [r3, #20]
  ColorControrno = colorContorno;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003184:	62da      	str	r2, [r3, #44]	@ 0x2c
  Contorno = contorno;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6a3a      	ldr	r2, [r7, #32]
 800318a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	0800ba94 	.word	0x0800ba94

0800319c <_ZN14CRectanguloTft4ShowEv>:
//muestra el rectangulo en pantalla

void CRectanguloTft::Show()
{
 800319c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800319e:	b085      	sub	sp, #20
 80031a0:	af02      	add	r7, sp, #8
 80031a2:	6078      	str	r0, [r7, #4]
  //dibujo el rectangulo
  fillRect(Xi, Yi, Ancho, Alto, BackColor);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	3338      	adds	r3, #56	@ 0x38
 80031ac:	681c      	ldr	r4, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	b219      	sxth	r1, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	b21d      	sxth	r5, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	b21e      	sxth	r6, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c4:	b21b      	sxth	r3, r3
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6952      	ldr	r2, [r2, #20]
 80031ca:	b292      	uxth	r2, r2
 80031cc:	9201      	str	r2, [sp, #4]
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	4633      	mov	r3, r6
 80031d2:	462a      	mov	r2, r5
 80031d4:	47a0      	blx	r4
  //hay que mostrar contorno?
  if (Contorno == 1) {
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d118      	bne.n	8003210 <_ZN14CRectanguloTft4ShowEv+0x74>
    drawRect(Xi, Yi, Ancho, Alto, ColorControrno);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3344      	adds	r3, #68	@ 0x44
 80031e6:	681c      	ldr	r4, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	b219      	sxth	r1, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	b21d      	sxth	r5, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	b21e      	sxth	r6, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fe:	b21b      	sxth	r3, r3
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003204:	b292      	uxth	r2, r2
 8003206:	9201      	str	r2, [sp, #4]
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	4633      	mov	r3, r6
 800320c:	462a      	mov	r2, r5
 800320e:	47a0      	blx	r4
  }
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003218 <_ZN14CRectanguloTft14CambiaPosicionEii>:

void CRectanguloTft::CambiaPosicion(int x, int y)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  Xi=x;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	619a      	str	r2, [r3, #24]
  Yi=y;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	61da      	str	r2, [r3, #28]
}
 8003230:	bf00      	nop
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	bc80      	pop	{r7}
 8003238:	4770      	bx	lr

0800323a <_ZN14CRectanguloTft12RedimencionaEii>:

void CRectanguloTft::Redimenciona(int ancho, int alto)
{
 800323a:	b480      	push	{r7}
 800323c:	b085      	sub	sp, #20
 800323e:	af00      	add	r7, sp, #0
 8003240:	60f8      	str	r0, [r7, #12]
 8003242:	60b9      	str	r1, [r7, #8]
 8003244:	607a      	str	r2, [r7, #4]
  Ancho=ancho;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	621a      	str	r2, [r3, #32]
  Alto=alto;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003252:	bf00      	nop
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	bc80      	pop	{r7}
 800325a:	4770      	bx	lr

0800325c <_ZN14CRectanguloTft13SetColorFondoEi>:

void CRectanguloTft::SetColorFondo(int color)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  BackColor=color;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	615a      	str	r2, [r3, #20]
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	bc80      	pop	{r7}
 8003274:	4770      	bx	lr

08003276 <_ZN14CRectanguloTft11DameCentroXEv>:
  return Alto;
}

//regresa el punto central del rectangulo
int CRectanguloTft::DameCentroX()
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  return Xi+(Ancho/2);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	699a      	ldr	r2, [r3, #24]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	0fd9      	lsrs	r1, r3, #31
 8003288:	440b      	add	r3, r1
 800328a:	105b      	asrs	r3, r3, #1
 800328c:	4413      	add	r3, r2
}
 800328e:	4618      	mov	r0, r3
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr

08003298 <_ZN15CPantallaManualD1Ev>:
 *      Author: W10
 */

#include <GUI/PantallaManual/CPantallaManual.hpp>

CPantallaManual::~CPantallaManual()
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	4a0a      	ldr	r2, [pc, #40]	@ (80032cc <_ZN15CPantallaManualD1Ev+0x34>)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	4a0a      	ldr	r2, [pc, #40]	@ (80032d0 <_ZN15CPantallaManualD1Ev+0x38>)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
{
	// TODO Auto-generated destructor stub
}
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	339c      	adds	r3, #156	@ 0x9c
 80032b2:	4618      	mov	r0, r3
 80032b4:	f001 f978 	bl	80045a8 <_ZN23CManejadorControlesBaseD1Ev>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff fe7a 	bl	8002fb4 <_ZN13CPantallaBaseD1Ev>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	0800baf0 	.word	0x0800baf0
 80032d0:	0800bb70 	.word	0x0800bb70

080032d4 <_ZThn156_N15CPantallaManualD1Ev>:
	CEtiquetaTft *LabelAire;
	CEtiquetaTft *LabelEstado;

public:
	CPantallaManual(CEstacionBase *estacion);
	virtual ~CPantallaManual();
 80032d4:	f1a0 009c 	sub.w	r0, r0, #156	@ 0x9c
 80032d8:	f7ff bfde 	b.w	8003298 <_ZN15CPantallaManualD1Ev>

080032dc <_ZN15CPantallaManualD0Ev>:
CPantallaManual::~CPantallaManual()
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
}
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7ff ffd7 	bl	8003298 <_ZN15CPantallaManualD1Ev>
 80032ea:	21d4      	movs	r1, #212	@ 0xd4
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f005 fb3d 	bl	800896c <_ZdlPvj>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4618      	mov	r0, r3
 80032f6:	3708      	adds	r7, #8
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <_ZThn156_N15CPantallaManualD0Ev>:
 80032fc:	f1a0 009c 	sub.w	r0, r0, #156	@ 0x9c
 8003300:	f7ff bfec 	b.w	80032dc <_ZN15CPantallaManualD0Ev>

08003304 <_ZN15CPantallaManualC1Ev>:

CPantallaManual::CPantallaManual() :
 8003304:	b590      	push	{r4, r7, lr}
 8003306:	b08d      	sub	sp, #52	@ 0x34
 8003308:	af08      	add	r7, sp, #32
 800330a:	6078      	str	r0, [r7, #4]
		CPantallaBase(1, "   Modo: Manual")
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a65      	ldr	r2, [pc, #404]	@ (80034a4 <_ZN15CPantallaManualC1Ev+0x1a0>)
 8003310:	2101      	movs	r1, #1
 8003312:	4618      	mov	r0, r3
 8003314:	f7ff fe70 	bl	8002ff8 <_ZN13CPantallaBaseC1EiPc>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	339c      	adds	r3, #156	@ 0x9c
 800331c:	4618      	mov	r0, r3
 800331e:	f001 f933 	bl	8004588 <_ZN23CManejadorControlesBaseC1Ev>
 8003322:	4a61      	ldr	r2, [pc, #388]	@ (80034a8 <_ZN15CPantallaManualC1Ev+0x1a4>)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	4a60      	ldr	r2, [pc, #384]	@ (80034ac <_ZN15CPantallaManualC1Ev+0x1a8>)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f04f 32ff 	mov.w	r2, #4294967295
 800333e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f04f 32ff 	mov.w	r2, #4294967295
 8003350:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f04f 32ff 	mov.w	r2, #4294967295
 8003362:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f04f 32ff 	mov.w	r2, #4294967295
 8003374:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
{
	LabelTemperatura = new CEtiquetaTft( 5, 35, 50, 20, COLOR::BLACK,"Temperatura", COLOR::WHITE, 3, 0, COLOR::WHITE);
 8003378:	20a4      	movs	r0, #164	@ 0xa4
 800337a:	f005 faf9 	bl	8008970 <_Znwj>
 800337e:	4603      	mov	r3, r0
 8003380:	461c      	mov	r4, r3
 8003382:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003386:	9306      	str	r3, [sp, #24]
 8003388:	2300      	movs	r3, #0
 800338a:	9305      	str	r3, [sp, #20]
 800338c:	2303      	movs	r3, #3
 800338e:	9304      	str	r3, [sp, #16]
 8003390:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003394:	9303      	str	r3, [sp, #12]
 8003396:	4b46      	ldr	r3, [pc, #280]	@ (80034b0 <_ZN15CPantallaManualC1Ev+0x1ac>)
 8003398:	9302      	str	r3, [sp, #8]
 800339a:	2300      	movs	r3, #0
 800339c:	9301      	str	r3, [sp, #4]
 800339e:	2314      	movs	r3, #20
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	2332      	movs	r3, #50	@ 0x32
 80033a4:	2223      	movs	r2, #35	@ 0x23
 80033a6:	2105      	movs	r1, #5
 80033a8:	4620      	mov	r0, r4
 80033aa:	f7ff fc39 	bl	8002c20 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f8c3 40c4 	str.w	r4, [r3, #196]	@ 0xc4
	int centroX = DameCentroX();
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff ff5d 	bl	8003276 <_ZN14CRectanguloTft11DameCentroXEv>
 80033bc:	60f8      	str	r0, [r7, #12]
	LabelTemperaturas = new CEtiquetaTft( centroX - 150 / 2, 65, 150, 30,COLOR::WHITE, "000/000", COLOR::BLACK, 3, 1, COLOR::RED);
 80033be:	20a4      	movs	r0, #164	@ 0xa4
 80033c0:	f005 fad6 	bl	8008970 <_Znwj>
 80033c4:	4603      	mov	r3, r0
 80033c6:	461c      	mov	r4, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f1a3 014b 	sub.w	r1, r3, #75	@ 0x4b
 80033ce:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80033d2:	9306      	str	r3, [sp, #24]
 80033d4:	2301      	movs	r3, #1
 80033d6:	9305      	str	r3, [sp, #20]
 80033d8:	2303      	movs	r3, #3
 80033da:	9304      	str	r3, [sp, #16]
 80033dc:	2300      	movs	r3, #0
 80033de:	9303      	str	r3, [sp, #12]
 80033e0:	4b34      	ldr	r3, [pc, #208]	@ (80034b4 <_ZN15CPantallaManualC1Ev+0x1b0>)
 80033e2:	9302      	str	r3, [sp, #8]
 80033e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80033e8:	9301      	str	r3, [sp, #4]
 80033ea:	231e      	movs	r3, #30
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	2396      	movs	r3, #150	@ 0x96
 80033f0:	2241      	movs	r2, #65	@ 0x41
 80033f2:	4620      	mov	r0, r4
 80033f4:	f7ff fc14 	bl	8002c20 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f8c3 40c8 	str.w	r4, [r3, #200]	@ 0xc8
	LabelTemperaturas->SetSeparacion(5, 5);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003404:	2205      	movs	r2, #5
 8003406:	2105      	movs	r1, #5
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff fd75 	bl	8002ef8 <_ZN12CEtiquetaTft13SetSeparacionEii>
	LabelAire = new CEtiquetaTft( 5, 105, 200, 30, COLOR::BLACK, "Aire: 00",COLOR::WHITE, 3, 0, COLOR::RED);
 800340e:	20a4      	movs	r0, #164	@ 0xa4
 8003410:	f005 faae 	bl	8008970 <_Znwj>
 8003414:	4603      	mov	r3, r0
 8003416:	461c      	mov	r4, r3
 8003418:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800341c:	9306      	str	r3, [sp, #24]
 800341e:	2300      	movs	r3, #0
 8003420:	9305      	str	r3, [sp, #20]
 8003422:	2303      	movs	r3, #3
 8003424:	9304      	str	r3, [sp, #16]
 8003426:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800342a:	9303      	str	r3, [sp, #12]
 800342c:	4b22      	ldr	r3, [pc, #136]	@ (80034b8 <_ZN15CPantallaManualC1Ev+0x1b4>)
 800342e:	9302      	str	r3, [sp, #8]
 8003430:	2300      	movs	r3, #0
 8003432:	9301      	str	r3, [sp, #4]
 8003434:	231e      	movs	r3, #30
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	23c8      	movs	r3, #200	@ 0xc8
 800343a:	2269      	movs	r2, #105	@ 0x69
 800343c:	2105      	movs	r1, #5
 800343e:	4620      	mov	r0, r4
 8003440:	f7ff fbee 	bl	8002c20 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f8c3 40cc 	str.w	r4, [r3, #204]	@ 0xcc
	LabelEstado = new CEtiquetaTft( 5, 145, 300, 35, COLOR::BLACK,"Estado: REPOSO", COLOR::WHITE, 3, 0, COLOR::RED);
 800344a:	20a4      	movs	r0, #164	@ 0xa4
 800344c:	f005 fa90 	bl	8008970 <_Znwj>
 8003450:	4603      	mov	r3, r0
 8003452:	461c      	mov	r4, r3
 8003454:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003458:	9306      	str	r3, [sp, #24]
 800345a:	2300      	movs	r3, #0
 800345c:	9305      	str	r3, [sp, #20]
 800345e:	2303      	movs	r3, #3
 8003460:	9304      	str	r3, [sp, #16]
 8003462:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003466:	9303      	str	r3, [sp, #12]
 8003468:	4b14      	ldr	r3, [pc, #80]	@ (80034bc <_ZN15CPantallaManualC1Ev+0x1b8>)
 800346a:	9302      	str	r3, [sp, #8]
 800346c:	2300      	movs	r3, #0
 800346e:	9301      	str	r3, [sp, #4]
 8003470:	2323      	movs	r3, #35	@ 0x23
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8003478:	2291      	movs	r2, #145	@ 0x91
 800347a:	2105      	movs	r1, #5
 800347c:	4620      	mov	r0, r4
 800347e:	f7ff fbcf 	bl	8002c20 <_ZN12CEtiquetaTftC1EiiiiiPciiii>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f8c3 40d0 	str.w	r4, [r3, #208]	@ 0xd0
	LabelEstado->SetSeparacion(15, 5);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800348e:	2205      	movs	r2, #5
 8003490:	210f      	movs	r1, #15
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff fd30 	bl	8002ef8 <_ZN12CEtiquetaTft13SetSeparacionEii>
}
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4618      	mov	r0, r3
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd90      	pop	{r4, r7, pc}
 80034a2:	bf00      	nop
 80034a4:	0800b6ac 	.word	0x0800b6ac
 80034a8:	0800baf0 	.word	0x0800baf0
 80034ac:	0800bb70 	.word	0x0800bb70
 80034b0:	0800b6bc 	.word	0x0800b6bc
 80034b4:	0800b6c8 	.word	0x0800b6c8
 80034b8:	0800b6d0 	.word	0x0800b6d0
 80034bc:	0800b6dc 	.word	0x0800b6dc

080034c0 <_ZN15CPantallaManual11SetEstacionEP13CEstacionBase>:

void CPantallaManual::SetEstacion(CEstacionBase *estacion)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
	Estacion = estacion;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	//asigno los evetos de la estacion
	Estacion->SetManejadorControles(this);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	3328      	adds	r3, #40	@ 0x28
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	329c      	adds	r2, #156	@ 0x9c
 80034e8:	4611      	mov	r1, r2
 80034ea:	4798      	blx	r3
	Estacion->ActivarCalefactor();
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	3334      	adds	r3, #52	@ 0x34
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4610      	mov	r0, r2
 8003500:	4798      	blx	r3
}
 8003502:	bf00      	nop
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <_ZN15CPantallaManual4ShowEv>:
void CPantallaManual::Show()
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b082      	sub	sp, #8
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
	CPantallaBase::Show();
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff fdcf 	bl	80030b8 <_ZN13CPantallaBase4ShowEv>

	LabelTemperatura->Show();
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	3348      	adds	r3, #72	@ 0x48
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4610      	mov	r0, r2
 800352e:	4798      	blx	r3
	LeeDatosEstacion();
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f863 	bl	80035fc <_ZN15CPantallaManual16LeeDatosEstacionEv>
	Refresca();
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	3354      	adds	r3, #84	@ 0x54
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	4798      	blx	r3
}
 8003542:	bf00      	nop
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
	...

0800354c <_ZN15CPantallaManual13MuestraEstadoEv>:
void CPantallaManual::MuestraEstado()
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
	if(EstadoBoquillaAnterior==EstadoBoquilla)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003560:	429a      	cmp	r2, r3
 8003562:	d043      	beq.n	80035ec <_ZN15CPantallaManual13MuestraEstadoEv+0xa0>
		return;
	EstadoBoquillaAnterior=EstadoBoquilla;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	if (EstadoBoquilla == 1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003576:	2b01      	cmp	r3, #1
 8003578:	d115      	bne.n	80035a6 <_ZN15CPantallaManual13MuestraEstadoEv+0x5a>
	{
		LabelEstado->SetColorFondo(COLOR::BLUE);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8003580:	211f      	movs	r1, #31
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff fe6a 	bl	800325c <_ZN14CRectanguloTft13SetColorFondoEi>
		LabelEstado->SetColorTexto(COLOR::BLACK);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800358e:	2100      	movs	r1, #0
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff fcc4 	bl	8002f1e <_ZN12CEtiquetaTft13SetColorTextoEi>
		LabelEstado->SetTexto("Estado: ACTIVO");
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800359c:	4915      	ldr	r1, [pc, #84]	@ (80035f4 <_ZN15CPantallaManual13MuestraEstadoEv+0xa8>)
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff fb78 	bl	8002c94 <_ZN12CEtiquetaTft8SetTextoEPcz>
 80035a4:	e016      	b.n	80035d4 <_ZN15CPantallaManual13MuestraEstadoEv+0x88>
	}
	else
	{
		LabelEstado->SetColorFondo(COLOR::RED);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80035ac:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff fe53 	bl	800325c <_ZN14CRectanguloTft13SetColorFondoEi>
		LabelEstado->SetColorTexto(COLOR::WHITE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80035bc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff fcac 	bl	8002f1e <_ZN12CEtiquetaTft13SetColorTextoEi>
		LabelEstado->SetTexto("Estado: REPOSO");
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80035cc:	490a      	ldr	r1, [pc, #40]	@ (80035f8 <_ZN15CPantallaManual13MuestraEstadoEv+0xac>)
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7ff fb60 	bl	8002c94 <_ZN12CEtiquetaTft8SetTextoEPcz>
	}
	LabelEstado->Show();
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	3348      	adds	r3, #72	@ 0x48
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4610      	mov	r0, r2
 80035e8:	4798      	blx	r3
 80035ea:	e000      	b.n	80035ee <_ZN15CPantallaManual13MuestraEstadoEv+0xa2>
		return;
 80035ec:	bf00      	nop
}
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	0800b6ec 	.word	0x0800b6ec
 80035f8:	0800b6dc 	.word	0x0800b6dc

080035fc <_ZN15CPantallaManual16LeeDatosEstacionEv>:
void CPantallaManual::LeeDatosEstacion()
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
	SetTemperatura = Estacion->GetTemperatura();
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	3310      	adds	r3, #16
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4610      	mov	r0, r2
 8003618:	4798      	blx	r3
 800361a:	4602      	mov	r2, r0
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	Temperatura = Estacion->GetTemperaturaReal();
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	3308      	adds	r3, #8
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4610      	mov	r0, r2
 8003636:	4798      	blx	r3
 8003638:	4603      	mov	r3, r0
 800363a:	4618      	mov	r0, r3
 800363c:	f7fd fc5c 	bl	8000ef8 <__aeabi_f2iz>
 8003640:	4602      	mov	r2, r0
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	NivelAire = Estacion->GetNivelAire();
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	3318      	adds	r3, #24
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4610      	mov	r0, r2
 800365c:	4798      	blx	r3
 800365e:	4602      	mov	r2, r0
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	EstadoBoquilla=Estacion->GetEstado();
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	331c      	adds	r3, #28
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4610      	mov	r0, r2
 800367a:	4798      	blx	r3
 800367c:	4602      	mov	r2, r0
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
}
 8003684:	bf00      	nop
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <_ZN15CPantallaManual18OnTemperaturaEventEi>:
void CPantallaManual::OnTemperaturaEvent(int temperatura)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
	SetTemperatura = temperatura;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
//	MuestraTemperaturas();
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bc80      	pop	{r7}
 80036a6:	4770      	bx	lr

080036a8 <_ZThn156_N15CPantallaManual18OnTemperaturaEventEi>:

private:
	void MuestraEstado();
	void MuestraNivelAire();
	void LeeDatosEstacion();
	virtual void OnTemperaturaEvent(int temperatura);
 80036a8:	f1a0 009c 	sub.w	r0, r0, #156	@ 0x9c
 80036ac:	f7ff bfee 	b.w	800368c <_ZN15CPantallaManual18OnTemperaturaEventEi>

080036b0 <_ZN15CPantallaManual19MuestraTemperaturasEv>:
void CPantallaManual::MuestraTemperaturas()
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
	if(TemperaturaAnterior==Temperatura &&SetTemperaturaAnterior==SetTemperatura)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d107      	bne.n	80036d8 <_ZN15CPantallaManual19MuestraTemperaturasEv+0x28>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d023      	beq.n	8003720 <_ZN15CPantallaManual19MuestraTemperaturasEv+0x70>
		return;
	TemperaturaAnterior=Temperatura;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	SetTemperaturaAnterior=SetTemperatura;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	LabelTemperaturas->SetTexto("%d/%d", Temperatura, SetTemperatura);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003702:	4909      	ldr	r1, [pc, #36]	@ (8003728 <_ZN15CPantallaManual19MuestraTemperaturasEv+0x78>)
 8003704:	f7ff fac6 	bl	8002c94 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelTemperaturas->Show();
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	3348      	adds	r3, #72	@ 0x48
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4610      	mov	r0, r2
 800371c:	4798      	blx	r3
 800371e:	e000      	b.n	8003722 <_ZN15CPantallaManual19MuestraTemperaturasEv+0x72>
		return;
 8003720:	bf00      	nop
}
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	0800b6fc 	.word	0x0800b6fc

0800372c <_ZN15CPantallaManual16OnNivelAireEventEi>:
void CPantallaManual::OnNivelAireEvent(int aire)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
	NivelAire = aire;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	Estacion->SetNivelAire(NivelAire);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	3314      	adds	r3, #20
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	f8d2 20b0 	ldr.w	r2, [r2, #176]	@ 0xb0
 8003756:	4611      	mov	r1, r2
 8003758:	4798      	blx	r3
}
 800375a:	bf00      	nop
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <_ZThn156_N15CPantallaManual16OnNivelAireEventEi>:
	void MuestraTemperaturas();
	void OnNivelAireEvent(int aire);
 8003762:	f1a0 009c 	sub.w	r0, r0, #156	@ 0x9c
 8003766:	f7ff bfe1 	b.w	800372c <_ZN15CPantallaManual16OnNivelAireEventEi>
	...

0800376c <_ZN15CPantallaManual16MuestraNivelAireEv>:
void CPantallaManual::MuestraNivelAire()
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
	if(NivelAireAnterior==NivelAire)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003780:	429a      	cmp	r2, r3
 8003782:	d01b      	beq.n	80037bc <_ZN15CPantallaManual16MuestraNivelAireEv+0x50>
		return;
	NivelAireAnterior=NivelAire;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	LabelAire->SetTexto("Aire: %d", NivelAire);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800379c:	461a      	mov	r2, r3
 800379e:	4909      	ldr	r1, [pc, #36]	@ (80037c4 <_ZN15CPantallaManual16MuestraNivelAireEv+0x58>)
 80037a0:	f7ff fa78 	bl	8002c94 <_ZN12CEtiquetaTft8SetTextoEPcz>
	LabelAire->Show();
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	3348      	adds	r3, #72	@ 0x48
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4610      	mov	r0, r2
 80037b8:	4798      	blx	r3
 80037ba:	e000      	b.n	80037be <_ZN15CPantallaManual16MuestraNivelAireEv+0x52>
		return;
 80037bc:	bf00      	nop

}
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	0800b704 	.word	0x0800b704

080037c8 <_ZN15CPantallaManual22OnTemperaturaRealEventEi>:
void CPantallaManual::OnTemperaturaRealEvent(int temperatura)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
	Temperatura = temperatura;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
//	MuestraTemperaturas();
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	bc80      	pop	{r7}
 80037e2:	4770      	bx	lr

080037e4 <_ZThn156_N15CPantallaManual22OnTemperaturaRealEventEi>:
	virtual void OnTemperaturaRealEvent(int temperatura);
 80037e4:	f1a0 009c 	sub.w	r0, r0, #156	@ 0x9c
 80037e8:	f7ff bfee 	b.w	80037c8 <_ZN15CPantallaManual22OnTemperaturaRealEventEi>

080037ec <_ZN15CPantallaManual20OnBotonDosClickEventEi>:

void CPantallaManual::OnBotonDosClickEvent(int tiempoClick)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
//    AdmiinstradorPantallasBase->ShowMenuPrincipal();
}
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bc80      	pop	{r7}
 80037fe:	4770      	bx	lr

08003800 <_ZThn156_N15CPantallaManual20OnBotonDosClickEventEi>:
	virtual void OnBotonDosClickEvent(int tiempoClick);
 8003800:	f1a0 009c 	sub.w	r0, r0, #156	@ 0x9c
 8003804:	f7ff bff2 	b.w	80037ec <_ZN15CPantallaManual20OnBotonDosClickEventEi>

08003808 <_ZN15CPantallaManual19OnPerillaIncrementoEv>:

//eventos del Encoder
void CPantallaManual::OnPerillaIncremento()
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
	Estacion->IncrementaTemperatura();
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	3320      	adds	r3, #32
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4610      	mov	r0, r2
 8003824:	4798      	blx	r3
}
 8003826:	bf00      	nop
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <_ZThn156_N15CPantallaManual19OnPerillaIncrementoEv>:

	//eventos del Encoder
	virtual void OnPerillaIncremento();
 800382e:	f1a0 009c 	sub.w	r0, r0, #156	@ 0x9c
 8003832:	f7ff bfe9 	b.w	8003808 <_ZN15CPantallaManual19OnPerillaIncrementoEv>

08003836 <_ZN15CPantallaManual19OnPerillaDecrementoEv>:
void CPantallaManual::OnPerillaDecremento()
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b082      	sub	sp, #8
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
	Estacion->DecrementaTemperatura();
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	3324      	adds	r3, #36	@ 0x24
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4610      	mov	r0, r2
 8003852:	4798      	blx	r3
}
 8003854:	bf00      	nop
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <_ZThn156_N15CPantallaManual19OnPerillaDecrementoEv>:
	virtual void OnPerillaDecremento();
 800385c:	f1a0 009c 	sub.w	r0, r0, #156	@ 0x9c
 8003860:	f7ff bfe9 	b.w	8003836 <_ZN15CPantallaManual19OnPerillaDecrementoEv>

08003864 <_ZN15CPantallaManual24OnBotonPerillaClickEventEi>:
void CPantallaManual::OnBotonPerillaClickEvent(int tiempoClick)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
//	if (EstadoBoquilla == 1)
//		EstadoBoquilla = 0;
//	else
//		EstadoBoquilla = 1;
//	MuestraEstado();
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	bc80      	pop	{r7}
 8003876:	4770      	bx	lr

08003878 <_ZThn156_N15CPantallaManual24OnBotonPerillaClickEventEi>:
	virtual void OnBotonPerillaClickEvent(int tiempoClick);
 8003878:	f1a0 009c 	sub.w	r0, r0, #156	@ 0x9c
 800387c:	f7ff bff2 	b.w	8003864 <_ZN15CPantallaManual24OnBotonPerillaClickEventEi>

08003880 <_ZN15CPantallaManual8RefrescaEv>:
void CPantallaManual::Refresca()
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
	LeeDatosEstacion();
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7ff feb7 	bl	80035fc <_ZN15CPantallaManual16LeeDatosEstacionEv>
	MuestraTemperaturas();
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7ff ff0e 	bl	80036b0 <_ZN15CPantallaManual19MuestraTemperaturasEv>
	MuestraEstado();
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f7ff fe59 	bl	800354c <_ZN15CPantallaManual13MuestraEstadoEv>
	MuestraNivelAire();
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7ff ff66 	bl	800376c <_ZN15CPantallaManual16MuestraNivelAireEv>
}
 80038a0:	bf00      	nop
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt>:
}

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1,
		uint16_t Y1, uint16_t Colour)
{
 80038a8:	b590      	push	{r4, r7, lr}
 80038aa:	b087      	sub	sp, #28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	4604      	mov	r4, r0
 80038b0:	4608      	mov	r0, r1
 80038b2:	4611      	mov	r1, r2
 80038b4:	461a      	mov	r2, r3
 80038b6:	4623      	mov	r3, r4
 80038b8:	80fb      	strh	r3, [r7, #6]
 80038ba:	4603      	mov	r3, r0
 80038bc:	80bb      	strh	r3, [r7, #4]
 80038be:	460b      	mov	r3, r1
 80038c0:	807b      	strh	r3, [r7, #2]
 80038c2:	4613      	mov	r3, r2
 80038c4:	803b      	strh	r3, [r7, #0]
	uint16_t X_length = 0;
 80038c6:	2300      	movs	r3, #0
 80038c8:	82fb      	strh	r3, [r7, #22]
	uint16_t Y_length = 0;
 80038ca:	2300      	movs	r3, #0
 80038cc:	82bb      	strh	r3, [r7, #20]
	uint8_t Negative_X = 0;
 80038ce:	2300      	movs	r3, #0
 80038d0:	74fb      	strb	r3, [r7, #19]
	uint8_t Negative_Y = 0;
 80038d2:	2300      	movs	r3, #0
 80038d4:	74bb      	strb	r3, [r7, #18]
	float Calc_Negative = 0;
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	60fb      	str	r3, [r7, #12]

	Calc_Negative = X1 - X0;
 80038dc:	887a      	ldrh	r2, [r7, #2]
 80038de:	88fb      	ldrh	r3, [r7, #6]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fd fa3e 	bl	8000d64 <__aeabi_i2f>
 80038e8:	4603      	mov	r3, r0
 80038ea:	60fb      	str	r3, [r7, #12]
	if (Calc_Negative < 0)
 80038ec:	f04f 0100 	mov.w	r1, #0
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f7fd fad9 	bl	8000ea8 <__aeabi_fcmplt>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x58>
		Negative_X = 1;
 80038fc:	2301      	movs	r3, #1
 80038fe:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8003900:	f04f 0300 	mov.w	r3, #0
 8003904:	60fb      	str	r3, [r7, #12]

	Calc_Negative = Y1 - Y0;
 8003906:	883a      	ldrh	r2, [r7, #0]
 8003908:	88bb      	ldrh	r3, [r7, #4]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	4618      	mov	r0, r3
 800390e:	f7fd fa29 	bl	8000d64 <__aeabi_i2f>
 8003912:	4603      	mov	r3, r0
 8003914:	60fb      	str	r3, [r7, #12]
	if (Calc_Negative < 0)
 8003916:	f04f 0100 	mov.w	r1, #0
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f7fd fac4 	bl	8000ea8 <__aeabi_fcmplt>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x82>
		Negative_Y = 1;
 8003926:	2301      	movs	r3, #1
 8003928:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if (!Negative_X)
 800392a:	7cfb      	ldrb	r3, [r7, #19]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d104      	bne.n	800393a <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x92>
	{
		X_length = X1 - X0;
 8003930:	887a      	ldrh	r2, [r7, #2]
 8003932:	88fb      	ldrh	r3, [r7, #6]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	82fb      	strh	r3, [r7, #22]
 8003938:	e003      	b.n	8003942 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0x9a>
	}
	else
	{
		X_length = X0 - X1;
 800393a:	88fa      	ldrh	r2, [r7, #6]
 800393c:	887b      	ldrh	r3, [r7, #2]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 8003942:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003944:	8afa      	ldrh	r2, [r7, #22]
 8003946:	88b9      	ldrh	r1, [r7, #4]
 8003948:	88f8      	ldrh	r0, [r7, #6]
 800394a:	f000 fd81 	bl	8004450 <_Z28ILI9341_Draw_Horizontal_Linetttt>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 800394e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003950:	8afa      	ldrh	r2, [r7, #22]
 8003952:	8839      	ldrh	r1, [r7, #0]
 8003954:	88f8      	ldrh	r0, [r7, #6]
 8003956:	f000 fd7b 	bl	8004450 <_Z28ILI9341_Draw_Horizontal_Linetttt>

	//DRAW VERTICAL!
	if (!Negative_Y)
 800395a:	7cbb      	ldrb	r3, [r7, #18]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d104      	bne.n	800396a <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xc2>
	{
		Y_length = Y1 - Y0;
 8003960:	883a      	ldrh	r2, [r7, #0]
 8003962:	88bb      	ldrh	r3, [r7, #4]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	82bb      	strh	r3, [r7, #20]
 8003968:	e003      	b.n	8003972 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xca>
	}
	else
	{
		Y_length = Y0 - Y1;
 800396a:	88ba      	ldrh	r2, [r7, #4]
 800396c:	883b      	ldrh	r3, [r7, #0]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	82bb      	strh	r3, [r7, #20]
	}
	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 8003972:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003974:	8aba      	ldrh	r2, [r7, #20]
 8003976:	88b9      	ldrh	r1, [r7, #4]
 8003978:	88f8      	ldrh	r0, [r7, #6]
 800397a:	f000 fdb7 	bl	80044ec <_Z26ILI9341_Draw_Vertical_Linetttt>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 800397e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003980:	8aba      	ldrh	r2, [r7, #20]
 8003982:	88b9      	ldrh	r1, [r7, #4]
 8003984:	8878      	ldrh	r0, [r7, #2]
 8003986:	f000 fdb1 	bl	80044ec <_Z26ILI9341_Draw_Vertical_Linetttt>

	if ((X_length > 0) || (Y_length > 0))
 800398a:	8afb      	ldrh	r3, [r7, #22]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d102      	bne.n	8003996 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xee>
 8003990:	8abb      	ldrh	r3, [r7, #20]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d005      	beq.n	80039a2 <_Z35ILI9341_Draw_Hollow_Rectangle_Coordttttt+0xfa>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 8003996:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003998:	8839      	ldrh	r1, [r7, #0]
 800399a:	887b      	ldrh	r3, [r7, #2]
 800399c:	4618      	mov	r0, r3
 800399e:	f000 fc21 	bl	80041e4 <_Z18ILI9341_Draw_Pixelttt>
	}

}
 80039a2:	bf00      	nop
 80039a4:	371c      	adds	r7, #28
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd90      	pop	{r4, r7, pc}

080039aa <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt>:

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1,
		uint16_t Y1, uint16_t Colour)
{
 80039aa:	b590      	push	{r4, r7, lr}
 80039ac:	b089      	sub	sp, #36	@ 0x24
 80039ae:	af02      	add	r7, sp, #8
 80039b0:	4604      	mov	r4, r0
 80039b2:	4608      	mov	r0, r1
 80039b4:	4611      	mov	r1, r2
 80039b6:	461a      	mov	r2, r3
 80039b8:	4623      	mov	r3, r4
 80039ba:	80fb      	strh	r3, [r7, #6]
 80039bc:	4603      	mov	r3, r0
 80039be:	80bb      	strh	r3, [r7, #4]
 80039c0:	460b      	mov	r3, r1
 80039c2:	807b      	strh	r3, [r7, #2]
 80039c4:	4613      	mov	r3, r2
 80039c6:	803b      	strh	r3, [r7, #0]
	uint16_t X_length = 0;
 80039c8:	2300      	movs	r3, #0
 80039ca:	82fb      	strh	r3, [r7, #22]
	uint16_t Y_length = 0;
 80039cc:	2300      	movs	r3, #0
 80039ce:	82bb      	strh	r3, [r7, #20]
	uint8_t Negative_X = 0;
 80039d0:	2300      	movs	r3, #0
 80039d2:	74fb      	strb	r3, [r7, #19]
	uint8_t Negative_Y = 0;
 80039d4:	2300      	movs	r3, #0
 80039d6:	74bb      	strb	r3, [r7, #18]
	int32_t Calc_Negative = 0;
 80039d8:	2300      	movs	r3, #0
 80039da:	60bb      	str	r3, [r7, #8]

	uint16_t X0_true = 0;
 80039dc:	2300      	movs	r3, #0
 80039de:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 80039e0:	2300      	movs	r3, #0
 80039e2:	81fb      	strh	r3, [r7, #14]

	Calc_Negative = X1 - X0;
 80039e4:	887a      	ldrh	r2, [r7, #2]
 80039e6:	88fb      	ldrh	r3, [r7, #6]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	60bb      	str	r3, [r7, #8]
	if (Calc_Negative < 0)
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	da01      	bge.n	80039f6 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x4c>
		Negative_X = 1;
 80039f2:	2301      	movs	r3, #1
 80039f4:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 80039f6:	2300      	movs	r3, #0
 80039f8:	60bb      	str	r3, [r7, #8]

	Calc_Negative = Y1 - Y0;
 80039fa:	883a      	ldrh	r2, [r7, #0]
 80039fc:	88bb      	ldrh	r3, [r7, #4]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	60bb      	str	r3, [r7, #8]
	if (Calc_Negative < 0)
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	da01      	bge.n	8003a0c <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x62>
		Negative_Y = 1;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if (!Negative_X)
 8003a0c:	7cfb      	ldrb	r3, [r7, #19]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d106      	bne.n	8003a20 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x76>
	{
		X_length = X1 - X0;
 8003a12:	887a      	ldrh	r2, [r7, #2]
 8003a14:	88fb      	ldrh	r3, [r7, #6]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8003a1a:	88fb      	ldrh	r3, [r7, #6]
 8003a1c:	823b      	strh	r3, [r7, #16]
 8003a1e:	e005      	b.n	8003a2c <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8003a20:	88fa      	ldrh	r2, [r7, #6]
 8003a22:	887b      	ldrh	r3, [r7, #2]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8003a28:	887b      	ldrh	r3, [r7, #2]
 8003a2a:	823b      	strh	r3, [r7, #16]
	}

	//DRAW VERTICAL!
	if (!Negative_Y)
 8003a2c:	7cbb      	ldrb	r3, [r7, #18]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d106      	bne.n	8003a40 <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0x96>
	{
		Y_length = Y1 - Y0;
 8003a32:	883a      	ldrh	r2, [r7, #0]
 8003a34:	88bb      	ldrh	r3, [r7, #4]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;
 8003a3a:	88bb      	ldrh	r3, [r7, #4]
 8003a3c:	81fb      	strh	r3, [r7, #14]
 8003a3e:	e005      	b.n	8003a4c <_Z35ILI9341_Draw_Filled_Rectangle_Coordttttt+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 8003a40:	88ba      	ldrh	r2, [r7, #4]
 8003a42:	883b      	ldrh	r3, [r7, #0]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;
 8003a48:	883b      	ldrh	r3, [r7, #0]
 8003a4a:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);
 8003a4c:	8abc      	ldrh	r4, [r7, #20]
 8003a4e:	8afa      	ldrh	r2, [r7, #22]
 8003a50:	89f9      	ldrh	r1, [r7, #14]
 8003a52:	8a38      	ldrh	r0, [r7, #16]
 8003a54:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	4623      	mov	r3, r4
 8003a5a:	f000 fc8f 	bl	800437c <_Z22ILI9341_Draw_Rectanglettttt>
}
 8003a5e:	bf00      	nop
 8003a60:	371c      	adds	r7, #28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd90      	pop	{r4, r7, pc}
	...

08003a68 <_Z17ILI9341_Draw_Charchhttt>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour)
{
 8003a68:	b590      	push	{r4, r7, lr}
 8003a6a:	b089      	sub	sp, #36	@ 0x24
 8003a6c:	af02      	add	r7, sp, #8
 8003a6e:	4604      	mov	r4, r0
 8003a70:	4608      	mov	r0, r1
 8003a72:	4611      	mov	r1, r2
 8003a74:	461a      	mov	r2, r3
 8003a76:	4623      	mov	r3, r4
 8003a78:	71fb      	strb	r3, [r7, #7]
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	71bb      	strb	r3, [r7, #6]
 8003a7e:	460b      	mov	r3, r1
 8003a80:	717b      	strb	r3, [r7, #5]
 8003a82:	4613      	mov	r3, r2
 8003a84:	807b      	strh	r3, [r7, #2]
	uint8_t function_char;
	uint8_t i, j;

	function_char = Character;
 8003a86:	79fb      	ldrb	r3, [r7, #7]
 8003a88:	75fb      	strb	r3, [r7, #23]

	if (function_char < ' ')
 8003a8a:	7dfb      	ldrb	r3, [r7, #23]
 8003a8c:	2b1f      	cmp	r3, #31
 8003a8e:	d802      	bhi.n	8003a96 <_Z17ILI9341_Draw_Charchhttt+0x2e>
	{
		Character = 0;
 8003a90:	2300      	movs	r3, #0
 8003a92:	71fb      	strb	r3, [r7, #7]
 8003a94:	e002      	b.n	8003a9c <_Z17ILI9341_Draw_Charchhttt+0x34>
	}
	else
	{
		function_char -= 32;
 8003a96:	7dfb      	ldrb	r3, [r7, #23]
 8003a98:	3b20      	subs	r3, #32
 8003a9a:	75fb      	strb	r3, [r7, #23]
	}

	char temp[CHAR_WIDTH];
	for (uint8_t k = 0; k < CHAR_WIDTH; k++)
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	753b      	strb	r3, [r7, #20]
 8003aa0:	e012      	b.n	8003ac8 <_Z17ILI9341_Draw_Charchhttt+0x60>
	{
		temp[k] = font[function_char][k];
 8003aa2:	7dfa      	ldrb	r2, [r7, #23]
 8003aa4:	7d38      	ldrb	r0, [r7, #20]
 8003aa6:	7d39      	ldrb	r1, [r7, #20]
 8003aa8:	4c3b      	ldr	r4, [pc, #236]	@ (8003b98 <_Z17ILI9341_Draw_Charchhttt+0x130>)
 8003aaa:	4613      	mov	r3, r2
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	4413      	add	r3, r2
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	4423      	add	r3, r4
 8003ab4:	4403      	add	r3, r0
 8003ab6:	781a      	ldrb	r2, [r3, #0]
 8003ab8:	f101 0318 	add.w	r3, r1, #24
 8003abc:	443b      	add	r3, r7
 8003abe:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t k = 0; k < CHAR_WIDTH; k++)
 8003ac2:	7d3b      	ldrb	r3, [r7, #20]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	753b      	strb	r3, [r7, #20]
 8003ac8:	7d3b      	ldrb	r3, [r7, #20]
 8003aca:	2b05      	cmp	r3, #5
 8003acc:	d9e9      	bls.n	8003aa2 <_Z17ILI9341_Draw_Charchhttt+0x3a>
	}

	// Draw pixels
	ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH * Size, CHAR_HEIGHT * Size,
 8003ace:	79bb      	ldrb	r3, [r7, #6]
 8003ad0:	b298      	uxth	r0, r3
 8003ad2:	797b      	ldrb	r3, [r7, #5]
 8003ad4:	b299      	uxth	r1, r3
 8003ad6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003ad8:	461a      	mov	r2, r3
 8003ada:	0052      	lsls	r2, r2, #1
 8003adc:	4413      	add	r3, r2
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	b29c      	uxth	r4, r3
 8003ae8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	4623      	mov	r3, r4
 8003aee:	f000 fc45 	bl	800437c <_Z22ILI9341_Draw_Rectanglettttt>
			Background_Colour);
	for (j = 0; j < CHAR_WIDTH; j++)
 8003af2:	2300      	movs	r3, #0
 8003af4:	757b      	strb	r3, [r7, #21]
 8003af6:	e047      	b.n	8003b88 <_Z17ILI9341_Draw_Charchhttt+0x120>
	{
		for (i = 0; i < CHAR_HEIGHT; i++)
 8003af8:	2300      	movs	r3, #0
 8003afa:	75bb      	strb	r3, [r7, #22]
 8003afc:	e03e      	b.n	8003b7c <_Z17ILI9341_Draw_Charchhttt+0x114>
		{
			if (temp[j] & (1 << i))
 8003afe:	7d7b      	ldrb	r3, [r7, #21]
 8003b00:	3318      	adds	r3, #24
 8003b02:	443b      	add	r3, r7
 8003b04:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	7dbb      	ldrb	r3, [r7, #22]
 8003b0c:	fa42 f303 	asr.w	r3, r2, r3
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d02e      	beq.n	8003b76 <_Z17ILI9341_Draw_Charchhttt+0x10e>
			{
				if (Size == 1)
 8003b18:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d110      	bne.n	8003b40 <_Z17ILI9341_Draw_Charchhttt+0xd8>
				{
					ILI9341_Draw_Pixel(X + j, Y + i, Colour);
 8003b1e:	79bb      	ldrb	r3, [r7, #6]
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	7d7b      	ldrb	r3, [r7, #21]
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	4413      	add	r3, r2
 8003b28:	b298      	uxth	r0, r3
 8003b2a:	797b      	ldrb	r3, [r7, #5]
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	7dbb      	ldrb	r3, [r7, #22]
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	4413      	add	r3, r2
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	887a      	ldrh	r2, [r7, #2]
 8003b38:	4619      	mov	r1, r3
 8003b3a:	f000 fb53 	bl	80041e4 <_Z18ILI9341_Draw_Pixelttt>
 8003b3e:	e01a      	b.n	8003b76 <_Z17ILI9341_Draw_Charchhttt+0x10e>
				}
				else
				{
					ILI9341_Draw_Rectangle(X + (j * Size), Y + (i * Size), Size,
 8003b40:	79bb      	ldrb	r3, [r7, #6]
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	7d7b      	ldrb	r3, [r7, #21]
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8003b4a:	fb01 f303 	mul.w	r3, r1, r3
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	4413      	add	r3, r2
 8003b52:	b298      	uxth	r0, r3
 8003b54:	797b      	ldrb	r3, [r7, #5]
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	7dbb      	ldrb	r3, [r7, #22]
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8003b5e:	fb01 f303 	mul.w	r3, r1, r3
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	4413      	add	r3, r2
 8003b66:	b299      	uxth	r1, r3
 8003b68:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 8003b6a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003b6c:	887b      	ldrh	r3, [r7, #2]
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	4623      	mov	r3, r4
 8003b72:	f000 fc03 	bl	800437c <_Z22ILI9341_Draw_Rectanglettttt>
		for (i = 0; i < CHAR_HEIGHT; i++)
 8003b76:	7dbb      	ldrb	r3, [r7, #22]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	75bb      	strb	r3, [r7, #22]
 8003b7c:	7dbb      	ldrb	r3, [r7, #22]
 8003b7e:	2b07      	cmp	r3, #7
 8003b80:	d9bd      	bls.n	8003afe <_Z17ILI9341_Draw_Charchhttt+0x96>
	for (j = 0; j < CHAR_WIDTH; j++)
 8003b82:	7d7b      	ldrb	r3, [r7, #21]
 8003b84:	3301      	adds	r3, #1
 8003b86:	757b      	strb	r3, [r7, #21]
 8003b88:	7d7b      	ldrb	r3, [r7, #21]
 8003b8a:	2b05      	cmp	r3, #5
 8003b8c:	d9b4      	bls.n	8003af8 <_Z17ILI9341_Draw_Charchhttt+0x90>
							Size, Colour);
				}
			}
		}
	}
}
 8003b8e:	bf00      	nop
 8003b90:	bf00      	nop
 8003b92:	371c      	adds	r7, #28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd90      	pop	{r4, r7, pc}
 8003b98:	0800bbdc 	.word	0x0800bbdc

08003b9c <_Z17ILI9341_Draw_TextPKchhttt>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char *Text, uint8_t X, uint8_t Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour)
{
 8003b9c:	b590      	push	{r4, r7, lr}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af02      	add	r7, sp, #8
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	4608      	mov	r0, r1
 8003ba6:	4611      	mov	r1, r2
 8003ba8:	461a      	mov	r2, r3
 8003baa:	4603      	mov	r3, r0
 8003bac:	70fb      	strb	r3, [r7, #3]
 8003bae:	460b      	mov	r3, r1
 8003bb0:	70bb      	strb	r3, [r7, #2]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	803b      	strh	r3, [r7, #0]
	while (*Text)
 8003bb6:	e017      	b.n	8003be8 <_Z17ILI9341_Draw_TextPKchhttt+0x4c>
	{
		ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	1c5a      	adds	r2, r3, #1
 8003bbc:	607a      	str	r2, [r7, #4]
 8003bbe:	7818      	ldrb	r0, [r3, #0]
 8003bc0:	883c      	ldrh	r4, [r7, #0]
 8003bc2:	78ba      	ldrb	r2, [r7, #2]
 8003bc4:	78f9      	ldrb	r1, [r7, #3]
 8003bc6:	8bbb      	ldrh	r3, [r7, #28]
 8003bc8:	9301      	str	r3, [sp, #4]
 8003bca:	8b3b      	ldrh	r3, [r7, #24]
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	4623      	mov	r3, r4
 8003bd0:	f7ff ff4a 	bl	8003a68 <_Z17ILI9341_Draw_Charchhttt>
		X += CHAR_WIDTH * Size;
 8003bd4:	8b3b      	ldrh	r3, [r7, #24]
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	461a      	mov	r2, r3
 8003bda:	0052      	lsls	r2, r2, #1
 8003bdc:	4413      	add	r3, r2
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	78fb      	ldrb	r3, [r7, #3]
 8003be4:	4413      	add	r3, r2
 8003be6:	70fb      	strb	r3, [r7, #3]
	while (*Text)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1e3      	bne.n	8003bb8 <_Z17ILI9341_Draw_TextPKchhttt+0x1c>
	}
}
 8003bf0:	bf00      	nop
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd90      	pop	{r4, r7, pc}
	...

08003bfc <_Z16ILI9341_SPI_Initv>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
	SPI1_Init();													//SPI INIT
 8003c00:	f001 fdb6 	bl	8005770 <SPI1_Init>
	MX_GPIO_Init();													//GPIO INIT
 8003c04:	f001 f9d8 	bl	8004fb8 <MX_GPIO_Init>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8003c08:	2200      	movs	r2, #0
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	4802      	ldr	r0, [pc, #8]	@ (8003c18 <_Z16ILI9341_SPI_Initv+0x1c>)
 8003c0e:	f002 ff06 	bl	8006a1e <HAL_GPIO_WritePin>
}
 8003c12:	bf00      	nop
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40010c00 	.word	0x40010c00

08003c1c <_Z16ILI9341_SPI_Sendh>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	4603      	mov	r3, r0
 8003c24:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8003c26:	1df9      	adds	r1, r7, #7
 8003c28:	2301      	movs	r3, #1
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	4803      	ldr	r0, [pc, #12]	@ (8003c3c <_Z16ILI9341_SPI_Sendh+0x20>)
 8003c2e:	f003 fc71 	bl	8007514 <HAL_SPI_Transmit>
}
 8003c32:	bf00      	nop
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	200003a0 	.word	0x200003a0

08003c40 <_Z21ILI9341_Write_Commandh>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	4603      	mov	r3, r0
 8003c48:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	480a      	ldr	r0, [pc, #40]	@ (8003c78 <_Z21ILI9341_Write_Commandh+0x38>)
 8003c50:	f002 fee5 	bl	8006a1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8003c54:	2200      	movs	r2, #0
 8003c56:	2102      	movs	r1, #2
 8003c58:	4807      	ldr	r0, [pc, #28]	@ (8003c78 <_Z21ILI9341_Write_Commandh+0x38>)
 8003c5a:	f002 fee0 	bl	8006a1e <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Command);
 8003c5e:	79fb      	ldrb	r3, [r7, #7]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff ffdb 	bl	8003c1c <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003c66:	2201      	movs	r2, #1
 8003c68:	2101      	movs	r1, #1
 8003c6a:	4803      	ldr	r0, [pc, #12]	@ (8003c78 <_Z21ILI9341_Write_Commandh+0x38>)
 8003c6c:	f002 fed7 	bl	8006a1e <HAL_GPIO_WritePin>
}
 8003c70:	bf00      	nop
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40010c00 	.word	0x40010c00

08003c7c <_Z18ILI9341_Write_Datah>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8003c86:	2201      	movs	r2, #1
 8003c88:	2102      	movs	r1, #2
 8003c8a:	480a      	ldr	r0, [pc, #40]	@ (8003cb4 <_Z18ILI9341_Write_Datah+0x38>)
 8003c8c:	f002 fec7 	bl	8006a1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003c90:	2200      	movs	r2, #0
 8003c92:	2101      	movs	r1, #1
 8003c94:	4807      	ldr	r0, [pc, #28]	@ (8003cb4 <_Z18ILI9341_Write_Datah+0x38>)
 8003c96:	f002 fec2 	bl	8006a1e <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Data);
 8003c9a:	79fb      	ldrb	r3, [r7, #7]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff ffbd 	bl	8003c1c <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	4803      	ldr	r0, [pc, #12]	@ (8003cb4 <_Z18ILI9341_Write_Datah+0x38>)
 8003ca8:	f002 feb9 	bl	8006a1e <HAL_GPIO_WritePin>
}
 8003cac:	bf00      	nop
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40010c00 	.word	0x40010c00

08003cb8 <_Z19ILI9341_Set_Addresstttt>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8003cb8:	b590      	push	{r4, r7, lr}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	4604      	mov	r4, r0
 8003cc0:	4608      	mov	r0, r1
 8003cc2:	4611      	mov	r1, r2
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	4623      	mov	r3, r4
 8003cc8:	80fb      	strh	r3, [r7, #6]
 8003cca:	4603      	mov	r3, r0
 8003ccc:	80bb      	strh	r3, [r7, #4]
 8003cce:	460b      	mov	r3, r1
 8003cd0:	807b      	strh	r3, [r7, #2]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	803b      	strh	r3, [r7, #0]
	ILI9341_Write_Command(0x2A);
 8003cd6:	202a      	movs	r0, #42	@ 0x2a
 8003cd8:	f7ff ffb2 	bl	8003c40 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(X1 >> 8);
 8003cdc:	88fb      	ldrh	r3, [r7, #6]
 8003cde:	0a1b      	lsrs	r3, r3, #8
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff ffc9 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(X1);
 8003cea:	88fb      	ldrh	r3, [r7, #6]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7ff ffc4 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(X2 >> 8);
 8003cf4:	887b      	ldrh	r3, [r7, #2]
 8003cf6:	0a1b      	lsrs	r3, r3, #8
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff ffbd 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(X2);
 8003d02:	887b      	ldrh	r3, [r7, #2]
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7ff ffb8 	bl	8003c7c <_Z18ILI9341_Write_Datah>

	ILI9341_Write_Command(0x2B);
 8003d0c:	202b      	movs	r0, #43	@ 0x2b
 8003d0e:	f7ff ff97 	bl	8003c40 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(Y1 >> 8);
 8003d12:	88bb      	ldrh	r3, [r7, #4]
 8003d14:	0a1b      	lsrs	r3, r3, #8
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff ffae 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(Y1);
 8003d20:	88bb      	ldrh	r3, [r7, #4]
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff ffa9 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(Y2 >> 8);
 8003d2a:	883b      	ldrh	r3, [r7, #0]
 8003d2c:	0a1b      	lsrs	r3, r3, #8
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7ff ffa2 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(Y2);
 8003d38:	883b      	ldrh	r3, [r7, #0]
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff ff9d 	bl	8003c7c <_Z18ILI9341_Write_Datah>

	ILI9341_Write_Command(0x2C);
 8003d42:	202c      	movs	r0, #44	@ 0x2c
 8003d44:	f7ff ff7c 	bl	8003c40 <_Z21ILI9341_Write_Commandh>
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd90      	pop	{r4, r7, pc}

08003d50 <_Z13ILI9341_Resetv>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8003d54:	2201      	movs	r2, #1
 8003d56:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003d5a:	480b      	ldr	r0, [pc, #44]	@ (8003d88 <_Z13ILI9341_Resetv+0x38>)
 8003d5c:	f002 fe5f 	bl	8006a1e <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8003d60:	20c8      	movs	r0, #200	@ 0xc8
 8003d62:	f002 f869 	bl	8005e38 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003d66:	2200      	movs	r2, #0
 8003d68:	2101      	movs	r1, #1
 8003d6a:	4807      	ldr	r0, [pc, #28]	@ (8003d88 <_Z13ILI9341_Resetv+0x38>)
 8003d6c:	f002 fe57 	bl	8006a1e <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8003d70:	20c8      	movs	r0, #200	@ 0xc8
 8003d72:	f002 f861 	bl	8005e38 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8003d76:	2201      	movs	r2, #1
 8003d78:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003d7c:	4802      	ldr	r0, [pc, #8]	@ (8003d88 <_Z13ILI9341_Resetv+0x38>)
 8003d7e:	f002 fe4e 	bl	8006a1e <HAL_GPIO_WritePin>
}
 8003d82:	bf00      	nop
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40010c00 	.word	0x40010c00

08003d8c <_Z20ILI9341_Set_Rotationh>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	4603      	mov	r3, r0
 8003d94:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = Rotation;
 8003d96:	79fb      	ldrb	r3, [r7, #7]
 8003d98:	73fb      	strb	r3, [r7, #15]

	ILI9341_Write_Command(0x36);
 8003d9a:	2036      	movs	r0, #54	@ 0x36
 8003d9c:	f7ff ff50 	bl	8003c40 <_Z21ILI9341_Write_Commandh>
	HAL_Delay(1);
 8003da0:	2001      	movs	r0, #1
 8003da2:	f002 f849 	bl	8005e38 <HAL_Delay>

	switch (screen_rotation)
 8003da6:	7bfb      	ldrb	r3, [r7, #15]
 8003da8:	2b03      	cmp	r3, #3
 8003daa:	d837      	bhi.n	8003e1c <_Z20ILI9341_Set_Rotationh+0x90>
 8003dac:	a201      	add	r2, pc, #4	@ (adr r2, 8003db4 <_Z20ILI9341_Set_Rotationh+0x28>)
 8003dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db2:	bf00      	nop
 8003db4:	08003dc5 	.word	0x08003dc5
 8003db8:	08003ddb 	.word	0x08003ddb
 8003dbc:	08003df1 	.word	0x08003df1
 8003dc0:	08003e07 	.word	0x08003e07
	{
	case SCREEN_VERTICAL_1:
		ILI9341_Write_Data(0x40 | 0x08);
 8003dc4:	2048      	movs	r0, #72	@ 0x48
 8003dc6:	f7ff ff59 	bl	8003c7c <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 240;
 8003dca:	4b17      	ldr	r3, [pc, #92]	@ (8003e28 <_Z20ILI9341_Set_Rotationh+0x9c>)
 8003dcc:	22f0      	movs	r2, #240	@ 0xf0
 8003dce:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8003dd0:	4b16      	ldr	r3, [pc, #88]	@ (8003e2c <_Z20ILI9341_Set_Rotationh+0xa0>)
 8003dd2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003dd6:	801a      	strh	r2, [r3, #0]
		break;
 8003dd8:	e021      	b.n	8003e1e <_Z20ILI9341_Set_Rotationh+0x92>
	case SCREEN_HORIZONTAL_1:
		ILI9341_Write_Data(0x20 | 0x08);
 8003dda:	2028      	movs	r0, #40	@ 0x28
 8003ddc:	f7ff ff4e 	bl	8003c7c <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 320;
 8003de0:	4b11      	ldr	r3, [pc, #68]	@ (8003e28 <_Z20ILI9341_Set_Rotationh+0x9c>)
 8003de2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003de6:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8003de8:	4b10      	ldr	r3, [pc, #64]	@ (8003e2c <_Z20ILI9341_Set_Rotationh+0xa0>)
 8003dea:	22f0      	movs	r2, #240	@ 0xf0
 8003dec:	801a      	strh	r2, [r3, #0]
		break;
 8003dee:	e016      	b.n	8003e1e <_Z20ILI9341_Set_Rotationh+0x92>
	case SCREEN_VERTICAL_2:
		ILI9341_Write_Data(0x80 | 0x08);
 8003df0:	2088      	movs	r0, #136	@ 0x88
 8003df2:	f7ff ff43 	bl	8003c7c <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 240;
 8003df6:	4b0c      	ldr	r3, [pc, #48]	@ (8003e28 <_Z20ILI9341_Set_Rotationh+0x9c>)
 8003df8:	22f0      	movs	r2, #240	@ 0xf0
 8003dfa:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8003e2c <_Z20ILI9341_Set_Rotationh+0xa0>)
 8003dfe:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003e02:	801a      	strh	r2, [r3, #0]
		break;
 8003e04:	e00b      	b.n	8003e1e <_Z20ILI9341_Set_Rotationh+0x92>
	case SCREEN_HORIZONTAL_2:
		ILI9341_Write_Data(0x40 | 0x80 | 0x20 | 0x08);
 8003e06:	20e8      	movs	r0, #232	@ 0xe8
 8003e08:	f7ff ff38 	bl	8003c7c <_Z18ILI9341_Write_Datah>
		LCD_WIDTH = 320;
 8003e0c:	4b06      	ldr	r3, [pc, #24]	@ (8003e28 <_Z20ILI9341_Set_Rotationh+0x9c>)
 8003e0e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003e12:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8003e14:	4b05      	ldr	r3, [pc, #20]	@ (8003e2c <_Z20ILI9341_Set_Rotationh+0xa0>)
 8003e16:	22f0      	movs	r2, #240	@ 0xf0
 8003e18:	801a      	strh	r2, [r3, #0]
		break;
 8003e1a:	e000      	b.n	8003e1e <_Z20ILI9341_Set_Rotationh+0x92>
	default:
		//EXIT IF SCREEN ROTATION NOT VALID!
		break;
 8003e1c:	bf00      	nop
	}
}
 8003e1e:	bf00      	nop
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	20000002 	.word	0x20000002
 8003e2c:	20000000 	.word	0x20000000

08003e30 <_Z14ILI9341_Enablev>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8003e34:	2201      	movs	r2, #1
 8003e36:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003e3a:	4802      	ldr	r0, [pc, #8]	@ (8003e44 <_Z14ILI9341_Enablev+0x14>)
 8003e3c:	f002 fdef 	bl	8006a1e <HAL_GPIO_WritePin>
}
 8003e40:	bf00      	nop
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	40010c00 	.word	0x40010c00

08003e48 <_Z12ILI9341_Initv>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0

	ILI9341_Enable();
 8003e4c:	f7ff fff0 	bl	8003e30 <_Z14ILI9341_Enablev>
	ILI9341_SPI_Init();
 8003e50:	f7ff fed4 	bl	8003bfc <_Z16ILI9341_SPI_Initv>
	ILI9341_Reset();
 8003e54:	f7ff ff7c 	bl	8003d50 <_Z13ILI9341_Resetv>

//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 8003e58:	2001      	movs	r0, #1
 8003e5a:	f7ff fef1 	bl	8003c40 <_Z21ILI9341_Write_Commandh>
	HAL_Delay(1000);
 8003e5e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003e62:	f001 ffe9 	bl	8005e38 <HAL_Delay>

//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 8003e66:	20cb      	movs	r0, #203	@ 0xcb
 8003e68:	f7ff feea 	bl	8003c40 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x39);
 8003e6c:	2039      	movs	r0, #57	@ 0x39
 8003e6e:	f7ff ff05 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x2C);
 8003e72:	202c      	movs	r0, #44	@ 0x2c
 8003e74:	f7ff ff02 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 8003e78:	2000      	movs	r0, #0
 8003e7a:	f7ff feff 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x34);
 8003e7e:	2034      	movs	r0, #52	@ 0x34
 8003e80:	f7ff fefc 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x02);
 8003e84:	2002      	movs	r0, #2
 8003e86:	f7ff fef9 	bl	8003c7c <_Z18ILI9341_Write_Datah>

//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 8003e8a:	20cf      	movs	r0, #207	@ 0xcf
 8003e8c:	f7ff fed8 	bl	8003c40 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8003e90:	2000      	movs	r0, #0
 8003e92:	f7ff fef3 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0xC1);
 8003e96:	20c1      	movs	r0, #193	@ 0xc1
 8003e98:	f7ff fef0 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x30);
 8003e9c:	2030      	movs	r0, #48	@ 0x30
 8003e9e:	f7ff feed 	bl	8003c7c <_Z18ILI9341_Write_Datah>

//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 8003ea2:	20e8      	movs	r0, #232	@ 0xe8
 8003ea4:	f7ff fecc 	bl	8003c40 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x85);
 8003ea8:	2085      	movs	r0, #133	@ 0x85
 8003eaa:	f7ff fee7 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 8003eae:	2000      	movs	r0, #0
 8003eb0:	f7ff fee4 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x78);
 8003eb4:	2078      	movs	r0, #120	@ 0x78
 8003eb6:	f7ff fee1 	bl	8003c7c <_Z18ILI9341_Write_Datah>

//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 8003eba:	20ea      	movs	r0, #234	@ 0xea
 8003ebc:	f7ff fec0 	bl	8003c40 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8003ec0:	2000      	movs	r0, #0
 8003ec2:	f7ff fedb 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 8003ec6:	2000      	movs	r0, #0
 8003ec8:	f7ff fed8 	bl	8003c7c <_Z18ILI9341_Write_Datah>

//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 8003ecc:	20ed      	movs	r0, #237	@ 0xed
 8003ece:	f7ff feb7 	bl	8003c40 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x64);
 8003ed2:	2064      	movs	r0, #100	@ 0x64
 8003ed4:	f7ff fed2 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x03);
 8003ed8:	2003      	movs	r0, #3
 8003eda:	f7ff fecf 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x12);
 8003ede:	2012      	movs	r0, #18
 8003ee0:	f7ff fecc 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x81);
 8003ee4:	2081      	movs	r0, #129	@ 0x81
 8003ee6:	f7ff fec9 	bl	8003c7c <_Z18ILI9341_Write_Datah>

//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 8003eea:	20f7      	movs	r0, #247	@ 0xf7
 8003eec:	f7ff fea8 	bl	8003c40 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x20);
 8003ef0:	2020      	movs	r0, #32
 8003ef2:	f7ff fec3 	bl	8003c7c <_Z18ILI9341_Write_Datah>

//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 8003ef6:	20c0      	movs	r0, #192	@ 0xc0
 8003ef8:	f7ff fea2 	bl	8003c40 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x23);
 8003efc:	2023      	movs	r0, #35	@ 0x23
 8003efe:	f7ff febd 	bl	8003c7c <_Z18ILI9341_Write_Datah>

//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 8003f02:	20c1      	movs	r0, #193	@ 0xc1
 8003f04:	f7ff fe9c 	bl	8003c40 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x10);
 8003f08:	2010      	movs	r0, #16
 8003f0a:	f7ff feb7 	bl	8003c7c <_Z18ILI9341_Write_Datah>

//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 8003f0e:	20c5      	movs	r0, #197	@ 0xc5
 8003f10:	f7ff fe96 	bl	8003c40 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x3E);
 8003f14:	203e      	movs	r0, #62	@ 0x3e
 8003f16:	f7ff feb1 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x28);
 8003f1a:	2028      	movs	r0, #40	@ 0x28
 8003f1c:	f7ff feae 	bl	8003c7c <_Z18ILI9341_Write_Datah>

//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 8003f20:	20c7      	movs	r0, #199	@ 0xc7
 8003f22:	f7ff fe8d 	bl	8003c40 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x86);
 8003f26:	2086      	movs	r0, #134	@ 0x86
 8003f28:	f7ff fea8 	bl	8003c7c <_Z18ILI9341_Write_Datah>

//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 8003f2c:	2036      	movs	r0, #54	@ 0x36
 8003f2e:	f7ff fe87 	bl	8003c40 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x48);
 8003f32:	2048      	movs	r0, #72	@ 0x48
 8003f34:	f7ff fea2 	bl	8003c7c <_Z18ILI9341_Write_Datah>

//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 8003f38:	203a      	movs	r0, #58	@ 0x3a
 8003f3a:	f7ff fe81 	bl	8003c40 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x55);
 8003f3e:	2055      	movs	r0, #85	@ 0x55
 8003f40:	f7ff fe9c 	bl	8003c7c <_Z18ILI9341_Write_Datah>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 8003f44:	20b1      	movs	r0, #177	@ 0xb1
 8003f46:	f7ff fe7b 	bl	8003c40 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8003f4a:	2000      	movs	r0, #0
 8003f4c:	f7ff fe96 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x18);
 8003f50:	2018      	movs	r0, #24
 8003f52:	f7ff fe93 	bl	8003c7c <_Z18ILI9341_Write_Datah>

//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 8003f56:	20b6      	movs	r0, #182	@ 0xb6
 8003f58:	f7ff fe72 	bl	8003c40 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x08);
 8003f5c:	2008      	movs	r0, #8
 8003f5e:	f7ff fe8d 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x82);
 8003f62:	2082      	movs	r0, #130	@ 0x82
 8003f64:	f7ff fe8a 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x27);
 8003f68:	2027      	movs	r0, #39	@ 0x27
 8003f6a:	f7ff fe87 	bl	8003c7c <_Z18ILI9341_Write_Datah>

//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 8003f6e:	20f2      	movs	r0, #242	@ 0xf2
 8003f70:	f7ff fe66 	bl	8003c40 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8003f74:	2000      	movs	r0, #0
 8003f76:	f7ff fe81 	bl	8003c7c <_Z18ILI9341_Write_Datah>

//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 8003f7a:	2026      	movs	r0, #38	@ 0x26
 8003f7c:	f7ff fe60 	bl	8003c40 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x01);
 8003f80:	2001      	movs	r0, #1
 8003f82:	f7ff fe7b 	bl	8003c7c <_Z18ILI9341_Write_Datah>

//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 8003f86:	20e0      	movs	r0, #224	@ 0xe0
 8003f88:	f7ff fe5a 	bl	8003c40 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x0F);
 8003f8c:	200f      	movs	r0, #15
 8003f8e:	f7ff fe75 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x31);
 8003f92:	2031      	movs	r0, #49	@ 0x31
 8003f94:	f7ff fe72 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x2B);
 8003f98:	202b      	movs	r0, #43	@ 0x2b
 8003f9a:	f7ff fe6f 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0C);
 8003f9e:	200c      	movs	r0, #12
 8003fa0:	f7ff fe6c 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0E);
 8003fa4:	200e      	movs	r0, #14
 8003fa6:	f7ff fe69 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x08);
 8003faa:	2008      	movs	r0, #8
 8003fac:	f7ff fe66 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x4E);
 8003fb0:	204e      	movs	r0, #78	@ 0x4e
 8003fb2:	f7ff fe63 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0xF1);
 8003fb6:	20f1      	movs	r0, #241	@ 0xf1
 8003fb8:	f7ff fe60 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x37);
 8003fbc:	2037      	movs	r0, #55	@ 0x37
 8003fbe:	f7ff fe5d 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x07);
 8003fc2:	2007      	movs	r0, #7
 8003fc4:	f7ff fe5a 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x10);
 8003fc8:	2010      	movs	r0, #16
 8003fca:	f7ff fe57 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x03);
 8003fce:	2003      	movs	r0, #3
 8003fd0:	f7ff fe54 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0E);
 8003fd4:	200e      	movs	r0, #14
 8003fd6:	f7ff fe51 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x09);
 8003fda:	2009      	movs	r0, #9
 8003fdc:	f7ff fe4e 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x00);
 8003fe0:	2000      	movs	r0, #0
 8003fe2:	f7ff fe4b 	bl	8003c7c <_Z18ILI9341_Write_Datah>

//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 8003fe6:	20e1      	movs	r0, #225	@ 0xe1
 8003fe8:	f7ff fe2a 	bl	8003c40 <_Z21ILI9341_Write_Commandh>
	ILI9341_Write_Data(0x00);
 8003fec:	2000      	movs	r0, #0
 8003fee:	f7ff fe45 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0E);
 8003ff2:	200e      	movs	r0, #14
 8003ff4:	f7ff fe42 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x14);
 8003ff8:	2014      	movs	r0, #20
 8003ffa:	f7ff fe3f 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x03);
 8003ffe:	2003      	movs	r0, #3
 8004000:	f7ff fe3c 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x11);
 8004004:	2011      	movs	r0, #17
 8004006:	f7ff fe39 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x07);
 800400a:	2007      	movs	r0, #7
 800400c:	f7ff fe36 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x31);
 8004010:	2031      	movs	r0, #49	@ 0x31
 8004012:	f7ff fe33 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0xC1);
 8004016:	20c1      	movs	r0, #193	@ 0xc1
 8004018:	f7ff fe30 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x48);
 800401c:	2048      	movs	r0, #72	@ 0x48
 800401e:	f7ff fe2d 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x08);
 8004022:	2008      	movs	r0, #8
 8004024:	f7ff fe2a 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0F);
 8004028:	200f      	movs	r0, #15
 800402a:	f7ff fe27 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0C);
 800402e:	200c      	movs	r0, #12
 8004030:	f7ff fe24 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x31);
 8004034:	2031      	movs	r0, #49	@ 0x31
 8004036:	f7ff fe21 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x36);
 800403a:	2036      	movs	r0, #54	@ 0x36
 800403c:	f7ff fe1e 	bl	8003c7c <_Z18ILI9341_Write_Datah>
	ILI9341_Write_Data(0x0F);
 8004040:	200f      	movs	r0, #15
 8004042:	f7ff fe1b 	bl	8003c7c <_Z18ILI9341_Write_Datah>

//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 8004046:	2011      	movs	r0, #17
 8004048:	f7ff fdfa 	bl	8003c40 <_Z21ILI9341_Write_Commandh>
	HAL_Delay(120);
 800404c:	2078      	movs	r0, #120	@ 0x78
 800404e:	f001 fef3 	bl	8005e38 <HAL_Delay>

//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 8004052:	2029      	movs	r0, #41	@ 0x29
 8004054:	f7ff fdf4 	bl	8003c40 <_Z21ILI9341_Write_Commandh>

//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8004058:	2000      	movs	r0, #0
 800405a:	f7ff fe97 	bl	8003d8c <_Z20ILI9341_Set_Rotationh>
}
 800405e:	bf00      	nop
 8004060:	bd80      	pop	{r7, pc}
	...

08004064 <_Z25ILI9341_Draw_Colour_Bursttm>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8004064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004068:	b08d      	sub	sp, #52	@ 0x34
 800406a:	af00      	add	r7, sp, #0
 800406c:	4603      	mov	r3, r0
 800406e:	6039      	str	r1, [r7, #0]
 8004070:	80fb      	strh	r3, [r7, #6]
//REMAINDER!
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
			Remainder_from_block, 10);

	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
}
 8004072:	466b      	mov	r3, sp
 8004074:	461e      	mov	r6, r3
	uint32_t Buffer_Size = 0;
 8004076:	2300      	movs	r3, #0
 8004078:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if ((Size * 2) < BURST_MAX_SIZE)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004082:	d202      	bcs.n	800408a <_Z25ILI9341_Draw_Colour_Bursttm+0x26>
		Buffer_Size = Size;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004088:	e002      	b.n	8004090 <_Z25ILI9341_Draw_Colour_Bursttm+0x2c>
		Buffer_Size = BURST_MAX_SIZE;
 800408a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800408e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8004090:	2201      	movs	r2, #1
 8004092:	2102      	movs	r1, #2
 8004094:	483e      	ldr	r0, [pc, #248]	@ (8004190 <_Z25ILI9341_Draw_Colour_Bursttm+0x12c>)
 8004096:	f002 fcc2 	bl	8006a1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800409a:	2200      	movs	r2, #0
 800409c:	2101      	movs	r1, #1
 800409e:	483c      	ldr	r0, [pc, #240]	@ (8004190 <_Z25ILI9341_Draw_Colour_Bursttm+0x12c>)
 80040a0:	f002 fcbd 	bl	8006a1e <HAL_GPIO_WritePin>
	unsigned char chifted = Colour >> 8;
 80040a4:	88fb      	ldrh	r3, [r7, #6]
 80040a6:	0a1b      	lsrs	r3, r3, #8
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	unsigned char burst_buffer[Buffer_Size];
 80040ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040b0:	460b      	mov	r3, r1
 80040b2:	3b01      	subs	r3, #1
 80040b4:	61fb      	str	r3, [r7, #28]
 80040b6:	2300      	movs	r3, #0
 80040b8:	4688      	mov	r8, r1
 80040ba:	4699      	mov	r9, r3
 80040bc:	f04f 0200 	mov.w	r2, #0
 80040c0:	f04f 0300 	mov.w	r3, #0
 80040c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040d0:	2300      	movs	r3, #0
 80040d2:	460c      	mov	r4, r1
 80040d4:	461d      	mov	r5, r3
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	f04f 0300 	mov.w	r3, #0
 80040de:	00eb      	lsls	r3, r5, #3
 80040e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040e4:	00e2      	lsls	r2, r4, #3
 80040e6:	1dcb      	adds	r3, r1, #7
 80040e8:	08db      	lsrs	r3, r3, #3
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	ebad 0d03 	sub.w	sp, sp, r3
 80040f0:	466b      	mov	r3, sp
 80040f2:	3300      	adds	r3, #0
 80040f4:	61bb      	str	r3, [r7, #24]
	for (uint32_t j = 0; j < Buffer_Size; j += 2)
 80040f6:	2300      	movs	r3, #0
 80040f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040fa:	e00e      	b.n	800411a <_Z25ILI9341_Draw_Colour_Bursttm+0xb6>
		burst_buffer[j] = chifted;
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004100:	4413      	add	r3, r2
 8004102:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8004106:	701a      	strb	r2, [r3, #0]
		burst_buffer[j + 1] = Colour;
 8004108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800410a:	3301      	adds	r3, #1
 800410c:	88fa      	ldrh	r2, [r7, #6]
 800410e:	b2d1      	uxtb	r1, r2
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	54d1      	strb	r1, [r2, r3]
	for (uint32_t j = 0; j < Buffer_Size; j += 2)
 8004114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004116:	3302      	adds	r3, #2
 8004118:	62bb      	str	r3, [r7, #40]	@ 0x28
 800411a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800411c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800411e:	429a      	cmp	r2, r3
 8004120:	d3ec      	bcc.n	80040fc <_Z25ILI9341_Draw_Colour_Bursttm+0x98>
	uint32_t Sending_Size = Size * 2;
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	617b      	str	r3, [r7, #20]
	uint32_t Sending_in_Block = Sending_Size / Buffer_Size;
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800412c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004130:	613b      	str	r3, [r7, #16]
	uint32_t Remainder_from_block = Sending_Size % Buffer_Size;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004136:	fbb3 f2f2 	udiv	r2, r3, r2
 800413a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800413c:	fb01 f202 	mul.w	r2, r1, r2
 8004140:	1a9b      	subs	r3, r3, r2
 8004142:	60fb      	str	r3, [r7, #12]
	if (Sending_in_Block != 0)
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d010      	beq.n	800416c <_Z25ILI9341_Draw_Colour_Bursttm+0x108>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 800414a:	2300      	movs	r3, #0
 800414c:	627b      	str	r3, [r7, #36]	@ 0x24
 800414e:	e009      	b.n	8004164 <_Z25ILI9341_Draw_Colour_Bursttm+0x100>
			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
 8004150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004152:	b29a      	uxth	r2, r3
 8004154:	230a      	movs	r3, #10
 8004156:	69b9      	ldr	r1, [r7, #24]
 8004158:	480e      	ldr	r0, [pc, #56]	@ (8004194 <_Z25ILI9341_Draw_Colour_Bursttm+0x130>)
 800415a:	f003 f9db 	bl	8007514 <HAL_SPI_Transmit>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 800415e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004160:	3301      	adds	r3, #1
 8004162:	627b      	str	r3, [r7, #36]	@ 0x24
 8004164:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	429a      	cmp	r2, r3
 800416a:	d3f1      	bcc.n	8004150 <_Z25ILI9341_Draw_Colour_Bursttm+0xec>
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	b29a      	uxth	r2, r3
 8004170:	230a      	movs	r3, #10
 8004172:	69b9      	ldr	r1, [r7, #24]
 8004174:	4807      	ldr	r0, [pc, #28]	@ (8004194 <_Z25ILI9341_Draw_Colour_Bursttm+0x130>)
 8004176:	f003 f9cd 	bl	8007514 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800417a:	2201      	movs	r2, #1
 800417c:	2101      	movs	r1, #1
 800417e:	4804      	ldr	r0, [pc, #16]	@ (8004190 <_Z25ILI9341_Draw_Colour_Bursttm+0x12c>)
 8004180:	f002 fc4d 	bl	8006a1e <HAL_GPIO_WritePin>
 8004184:	46b5      	mov	sp, r6
}
 8004186:	bf00      	nop
 8004188:	3734      	adds	r7, #52	@ 0x34
 800418a:	46bd      	mov	sp, r7
 800418c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004190:	40010c00 	.word	0x40010c00
 8004194:	200003a0 	.word	0x200003a0

08004198 <_Z19ILI9341_Fill_Screent>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	4603      	mov	r3, r0
 80041a0:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80041a2:	4b0e      	ldr	r3, [pc, #56]	@ (80041dc <_Z19ILI9341_Fill_Screent+0x44>)
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	4b0d      	ldr	r3, [pc, #52]	@ (80041e0 <_Z19ILI9341_Fill_Screent+0x48>)
 80041aa:	881b      	ldrh	r3, [r3, #0]
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2100      	movs	r1, #0
 80041b0:	2000      	movs	r0, #0
 80041b2:	f7ff fd81 	bl	8003cb8 <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH * LCD_HEIGHT);
 80041b6:	4b09      	ldr	r3, [pc, #36]	@ (80041dc <_Z19ILI9341_Fill_Screent+0x44>)
 80041b8:	881b      	ldrh	r3, [r3, #0]
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	461a      	mov	r2, r3
 80041be:	4b08      	ldr	r3, [pc, #32]	@ (80041e0 <_Z19ILI9341_Fill_Screent+0x48>)
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	fb02 f303 	mul.w	r3, r2, r3
 80041c8:	461a      	mov	r2, r3
 80041ca:	88fb      	ldrh	r3, [r7, #6]
 80041cc:	4611      	mov	r1, r2
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7ff ff48 	bl	8004064 <_Z25ILI9341_Draw_Colour_Bursttm>
}
 80041d4:	bf00      	nop
 80041d6:	3708      	adds	r7, #8
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	20000002 	.word	0x20000002
 80041e0:	20000000 	.word	0x20000000

080041e4 <_Z18ILI9341_Draw_Pixelttt>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X, uint16_t Y, uint16_t Colour)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	4603      	mov	r3, r0
 80041ec:	80fb      	strh	r3, [r7, #6]
 80041ee:	460b      	mov	r3, r1
 80041f0:	80bb      	strh	r3, [r7, #4]
 80041f2:	4613      	mov	r3, r2
 80041f4:	807b      	strh	r3, [r7, #2]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 80041f6:	4b5d      	ldr	r3, [pc, #372]	@ (800436c <_Z18ILI9341_Draw_Pixelttt+0x188>)
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	88fa      	ldrh	r2, [r7, #6]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d205      	bcs.n	800420e <_Z18ILI9341_Draw_Pixelttt+0x2a>
 8004202:	4b5b      	ldr	r3, [pc, #364]	@ (8004370 <_Z18ILI9341_Draw_Pixelttt+0x18c>)
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	b29b      	uxth	r3, r3
 8004208:	88ba      	ldrh	r2, [r7, #4]
 800420a:	429a      	cmp	r2, r3
 800420c:	d301      	bcc.n	8004212 <_Z18ILI9341_Draw_Pixelttt+0x2e>
 800420e:	2301      	movs	r3, #1
 8004210:	e000      	b.n	8004214 <_Z18ILI9341_Draw_Pixelttt+0x30>
 8004212:	2300      	movs	r3, #0
 8004214:	2b00      	cmp	r3, #0
 8004216:	f040 80a5 	bne.w	8004364 <_Z18ILI9341_Draw_Pixelttt+0x180>
		return;	//OUT OF BOUNDS!

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 800421a:	2200      	movs	r2, #0
 800421c:	2102      	movs	r1, #2
 800421e:	4855      	ldr	r0, [pc, #340]	@ (8004374 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8004220:	f002 fbfd 	bl	8006a1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004224:	2200      	movs	r2, #0
 8004226:	2101      	movs	r1, #1
 8004228:	4852      	ldr	r0, [pc, #328]	@ (8004374 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800422a:	f002 fbf8 	bl	8006a1e <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2A);
 800422e:	202a      	movs	r0, #42	@ 0x2a
 8004230:	f7ff fcf4 	bl	8003c1c <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8004234:	2201      	movs	r2, #1
 8004236:	2102      	movs	r1, #2
 8004238:	484e      	ldr	r0, [pc, #312]	@ (8004374 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800423a:	f002 fbf0 	bl	8006a1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800423e:	2201      	movs	r2, #1
 8004240:	2101      	movs	r1, #1
 8004242:	484c      	ldr	r0, [pc, #304]	@ (8004374 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8004244:	f002 fbeb 	bl	8006a1e <HAL_GPIO_WritePin>

//XDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004248:	2200      	movs	r2, #0
 800424a:	2101      	movs	r1, #1
 800424c:	4849      	ldr	r0, [pc, #292]	@ (8004374 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800424e:	f002 fbe6 	bl	8006a1e <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer[4] =
	{ X >> 8, X, (X + 1) >> 8, (X + 1) };
 8004252:	88fb      	ldrh	r3, [r7, #6]
 8004254:	0a1b      	lsrs	r3, r3, #8
 8004256:	b29b      	uxth	r3, r3
 8004258:	b2db      	uxtb	r3, r3
 800425a:	753b      	strb	r3, [r7, #20]
 800425c:	88fb      	ldrh	r3, [r7, #6]
 800425e:	b2db      	uxtb	r3, r3
 8004260:	757b      	strb	r3, [r7, #21]
 8004262:	88fb      	ldrh	r3, [r7, #6]
 8004264:	3301      	adds	r3, #1
 8004266:	121b      	asrs	r3, r3, #8
 8004268:	b2db      	uxtb	r3, r3
 800426a:	75bb      	strb	r3, [r7, #22]
 800426c:	88fb      	ldrh	r3, [r7, #6]
 800426e:	b2db      	uxtb	r3, r3
 8004270:	3301      	adds	r3, #1
 8004272:	b2db      	uxtb	r3, r3
 8004274:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8004276:	f107 0114 	add.w	r1, r7, #20
 800427a:	2301      	movs	r3, #1
 800427c:	2204      	movs	r2, #4
 800427e:	483e      	ldr	r0, [pc, #248]	@ (8004378 <_Z18ILI9341_Draw_Pixelttt+0x194>)
 8004280:	f003 f948 	bl	8007514 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8004284:	2201      	movs	r2, #1
 8004286:	2101      	movs	r1, #1
 8004288:	483a      	ldr	r0, [pc, #232]	@ (8004374 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800428a:	f002 fbc8 	bl	8006a1e <HAL_GPIO_WritePin>

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 800428e:	2200      	movs	r2, #0
 8004290:	2102      	movs	r1, #2
 8004292:	4838      	ldr	r0, [pc, #224]	@ (8004374 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8004294:	f002 fbc3 	bl	8006a1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004298:	2200      	movs	r2, #0
 800429a:	2101      	movs	r1, #1
 800429c:	4835      	ldr	r0, [pc, #212]	@ (8004374 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800429e:	f002 fbbe 	bl	8006a1e <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2B);
 80042a2:	202b      	movs	r0, #43	@ 0x2b
 80042a4:	f7ff fcba 	bl	8003c1c <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80042a8:	2201      	movs	r2, #1
 80042aa:	2102      	movs	r1, #2
 80042ac:	4831      	ldr	r0, [pc, #196]	@ (8004374 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80042ae:	f002 fbb6 	bl	8006a1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80042b2:	2201      	movs	r2, #1
 80042b4:	2101      	movs	r1, #1
 80042b6:	482f      	ldr	r0, [pc, #188]	@ (8004374 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80042b8:	f002 fbb1 	bl	8006a1e <HAL_GPIO_WritePin>

//YDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80042bc:	2200      	movs	r2, #0
 80042be:	2101      	movs	r1, #1
 80042c0:	482c      	ldr	r0, [pc, #176]	@ (8004374 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80042c2:	f002 fbac 	bl	8006a1e <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer1[4] =
	{ Y >> 8, Y, (Y + 1) >> 8, (Y + 1) };
 80042c6:	88bb      	ldrh	r3, [r7, #4]
 80042c8:	0a1b      	lsrs	r3, r3, #8
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	743b      	strb	r3, [r7, #16]
 80042d0:	88bb      	ldrh	r3, [r7, #4]
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	747b      	strb	r3, [r7, #17]
 80042d6:	88bb      	ldrh	r3, [r7, #4]
 80042d8:	3301      	adds	r3, #1
 80042da:	121b      	asrs	r3, r3, #8
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	74bb      	strb	r3, [r7, #18]
 80042e0:	88bb      	ldrh	r3, [r7, #4]
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	3301      	adds	r3, #1
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80042ea:	f107 0110 	add.w	r1, r7, #16
 80042ee:	2301      	movs	r3, #1
 80042f0:	2204      	movs	r2, #4
 80042f2:	4821      	ldr	r0, [pc, #132]	@ (8004378 <_Z18ILI9341_Draw_Pixelttt+0x194>)
 80042f4:	f003 f90e 	bl	8007514 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80042f8:	2201      	movs	r2, #1
 80042fa:	2101      	movs	r1, #1
 80042fc:	481d      	ldr	r0, [pc, #116]	@ (8004374 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 80042fe:	f002 fb8e 	bl	8006a1e <HAL_GPIO_WritePin>

//ADDRESS	
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8004302:	2200      	movs	r2, #0
 8004304:	2102      	movs	r1, #2
 8004306:	481b      	ldr	r0, [pc, #108]	@ (8004374 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8004308:	f002 fb89 	bl	8006a1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800430c:	2200      	movs	r2, #0
 800430e:	2101      	movs	r1, #1
 8004310:	4818      	ldr	r0, [pc, #96]	@ (8004374 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8004312:	f002 fb84 	bl	8006a1e <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8004316:	202c      	movs	r0, #44	@ 0x2c
 8004318:	f7ff fc80 	bl	8003c1c <_Z16ILI9341_SPI_Sendh>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800431c:	2201      	movs	r2, #1
 800431e:	2102      	movs	r1, #2
 8004320:	4814      	ldr	r0, [pc, #80]	@ (8004374 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8004322:	f002 fb7c 	bl	8006a1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8004326:	2201      	movs	r2, #1
 8004328:	2101      	movs	r1, #1
 800432a:	4812      	ldr	r0, [pc, #72]	@ (8004374 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800432c:	f002 fb77 	bl	8006a1e <HAL_GPIO_WritePin>

//COLOUR	
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004330:	2200      	movs	r2, #0
 8004332:	2101      	movs	r1, #1
 8004334:	480f      	ldr	r0, [pc, #60]	@ (8004374 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 8004336:	f002 fb72 	bl	8006a1e <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer2[2] =
	{ Colour >> 8, Colour };
 800433a:	887b      	ldrh	r3, [r7, #2]
 800433c:	0a1b      	lsrs	r3, r3, #8
 800433e:	b29b      	uxth	r3, r3
 8004340:	b2db      	uxtb	r3, r3
 8004342:	733b      	strb	r3, [r7, #12]
 8004344:	887b      	ldrh	r3, [r7, #2]
 8004346:	b2db      	uxtb	r3, r3
 8004348:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 800434a:	f107 010c 	add.w	r1, r7, #12
 800434e:	2301      	movs	r3, #1
 8004350:	2202      	movs	r2, #2
 8004352:	4809      	ldr	r0, [pc, #36]	@ (8004378 <_Z18ILI9341_Draw_Pixelttt+0x194>)
 8004354:	f003 f8de 	bl	8007514 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8004358:	2201      	movs	r2, #1
 800435a:	2101      	movs	r1, #1
 800435c:	4805      	ldr	r0, [pc, #20]	@ (8004374 <_Z18ILI9341_Draw_Pixelttt+0x190>)
 800435e:	f002 fb5e 	bl	8006a1e <HAL_GPIO_WritePin>
 8004362:	e000      	b.n	8004366 <_Z18ILI9341_Draw_Pixelttt+0x182>
		return;	//OUT OF BOUNDS!
 8004364:	bf00      	nop

}
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	20000002 	.word	0x20000002
 8004370:	20000000 	.word	0x20000000
 8004374:	40010c00 	.word	0x40010c00
 8004378:	200003a0 	.word	0x200003a0

0800437c <_Z22ILI9341_Draw_Rectanglettttt>:
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width,
		uint16_t Height, uint16_t Colour)
{
 800437c:	b590      	push	{r4, r7, lr}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	4604      	mov	r4, r0
 8004384:	4608      	mov	r0, r1
 8004386:	4611      	mov	r1, r2
 8004388:	461a      	mov	r2, r3
 800438a:	4623      	mov	r3, r4
 800438c:	80fb      	strh	r3, [r7, #6]
 800438e:	4603      	mov	r3, r0
 8004390:	80bb      	strh	r3, [r7, #4]
 8004392:	460b      	mov	r3, r1
 8004394:	807b      	strh	r3, [r7, #2]
 8004396:	4613      	mov	r3, r2
 8004398:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 800439a:	4b2b      	ldr	r3, [pc, #172]	@ (8004448 <_Z22ILI9341_Draw_Rectanglettttt+0xcc>)
 800439c:	881b      	ldrh	r3, [r3, #0]
 800439e:	b29b      	uxth	r3, r3
 80043a0:	88fa      	ldrh	r2, [r7, #6]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d205      	bcs.n	80043b2 <_Z22ILI9341_Draw_Rectanglettttt+0x36>
 80043a6:	4b29      	ldr	r3, [pc, #164]	@ (800444c <_Z22ILI9341_Draw_Rectanglettttt+0xd0>)
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	88ba      	ldrh	r2, [r7, #4]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d301      	bcc.n	80043b6 <_Z22ILI9341_Draw_Rectanglettttt+0x3a>
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <_Z22ILI9341_Draw_Rectanglettttt+0x3c>
 80043b6:	2300      	movs	r3, #0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d141      	bne.n	8004440 <_Z22ILI9341_Draw_Rectanglettttt+0xc4>
		return;
	if ((X + Width - 1) >= LCD_WIDTH)
 80043bc:	88fa      	ldrh	r2, [r7, #6]
 80043be:	887b      	ldrh	r3, [r7, #2]
 80043c0:	4413      	add	r3, r2
 80043c2:	4a21      	ldr	r2, [pc, #132]	@ (8004448 <_Z22ILI9341_Draw_Rectanglettttt+0xcc>)
 80043c4:	8812      	ldrh	r2, [r2, #0]
 80043c6:	b292      	uxth	r2, r2
 80043c8:	4293      	cmp	r3, r2
 80043ca:	bfcc      	ite	gt
 80043cc:	2301      	movgt	r3, #1
 80043ce:	2300      	movle	r3, #0
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d005      	beq.n	80043e2 <_Z22ILI9341_Draw_Rectanglettttt+0x66>
	{
		Width = LCD_WIDTH - X;
 80043d6:	4b1c      	ldr	r3, [pc, #112]	@ (8004448 <_Z22ILI9341_Draw_Rectanglettttt+0xcc>)
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	b29a      	uxth	r2, r3
 80043dc:	88fb      	ldrh	r3, [r7, #6]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	807b      	strh	r3, [r7, #2]
	}
	if ((Y + Height - 1) >= LCD_HEIGHT)
 80043e2:	88ba      	ldrh	r2, [r7, #4]
 80043e4:	883b      	ldrh	r3, [r7, #0]
 80043e6:	4413      	add	r3, r2
 80043e8:	4a18      	ldr	r2, [pc, #96]	@ (800444c <_Z22ILI9341_Draw_Rectanglettttt+0xd0>)
 80043ea:	8812      	ldrh	r2, [r2, #0]
 80043ec:	b292      	uxth	r2, r2
 80043ee:	4293      	cmp	r3, r2
 80043f0:	bfcc      	ite	gt
 80043f2:	2301      	movgt	r3, #1
 80043f4:	2300      	movle	r3, #0
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d005      	beq.n	8004408 <_Z22ILI9341_Draw_Rectanglettttt+0x8c>
	{
		Height = LCD_HEIGHT - Y;
 80043fc:	4b13      	ldr	r3, [pc, #76]	@ (800444c <_Z22ILI9341_Draw_Rectanglettttt+0xd0>)
 80043fe:	881b      	ldrh	r3, [r3, #0]
 8004400:	b29a      	uxth	r2, r3
 8004402:	88bb      	ldrh	r3, [r7, #4]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	803b      	strh	r3, [r7, #0]
	}
	ILI9341_Set_Address(X, Y, X + Width - 1, Y + Height - 1);
 8004408:	88fa      	ldrh	r2, [r7, #6]
 800440a:	887b      	ldrh	r3, [r7, #2]
 800440c:	4413      	add	r3, r2
 800440e:	b29b      	uxth	r3, r3
 8004410:	3b01      	subs	r3, #1
 8004412:	b29c      	uxth	r4, r3
 8004414:	88ba      	ldrh	r2, [r7, #4]
 8004416:	883b      	ldrh	r3, [r7, #0]
 8004418:	4413      	add	r3, r2
 800441a:	b29b      	uxth	r3, r3
 800441c:	3b01      	subs	r3, #1
 800441e:	b29b      	uxth	r3, r3
 8004420:	88b9      	ldrh	r1, [r7, #4]
 8004422:	88f8      	ldrh	r0, [r7, #6]
 8004424:	4622      	mov	r2, r4
 8004426:	f7ff fc47 	bl	8003cb8 <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, Height * Width);
 800442a:	883b      	ldrh	r3, [r7, #0]
 800442c:	887a      	ldrh	r2, [r7, #2]
 800442e:	fb02 f303 	mul.w	r3, r2, r3
 8004432:	461a      	mov	r2, r3
 8004434:	8b3b      	ldrh	r3, [r7, #24]
 8004436:	4611      	mov	r1, r2
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff fe13 	bl	8004064 <_Z25ILI9341_Draw_Colour_Bursttm>
 800443e:	e000      	b.n	8004442 <_Z22ILI9341_Draw_Rectanglettttt+0xc6>
		return;
 8004440:	bf00      	nop
}
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	bd90      	pop	{r4, r7, pc}
 8004448:	20000002 	.word	0x20000002
 800444c:	20000000 	.word	0x20000000

08004450 <_Z28ILI9341_Draw_Horizontal_Linetttt>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width,
		uint16_t Colour)
{
 8004450:	b590      	push	{r4, r7, lr}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	4604      	mov	r4, r0
 8004458:	4608      	mov	r0, r1
 800445a:	4611      	mov	r1, r2
 800445c:	461a      	mov	r2, r3
 800445e:	4623      	mov	r3, r4
 8004460:	80fb      	strh	r3, [r7, #6]
 8004462:	4603      	mov	r3, r0
 8004464:	80bb      	strh	r3, [r7, #4]
 8004466:	460b      	mov	r3, r1
 8004468:	807b      	strh	r3, [r7, #2]
 800446a:	4613      	mov	r3, r2
 800446c:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 800446e:	4b1d      	ldr	r3, [pc, #116]	@ (80044e4 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x94>)
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	b29b      	uxth	r3, r3
 8004474:	88fa      	ldrh	r2, [r7, #6]
 8004476:	429a      	cmp	r2, r3
 8004478:	d205      	bcs.n	8004486 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x36>
 800447a:	4b1b      	ldr	r3, [pc, #108]	@ (80044e8 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x98>)
 800447c:	881b      	ldrh	r3, [r3, #0]
 800447e:	b29b      	uxth	r3, r3
 8004480:	88ba      	ldrh	r2, [r7, #4]
 8004482:	429a      	cmp	r2, r3
 8004484:	d301      	bcc.n	800448a <_Z28ILI9341_Draw_Horizontal_Linetttt+0x3a>
 8004486:	2301      	movs	r3, #1
 8004488:	e000      	b.n	800448c <_Z28ILI9341_Draw_Horizontal_Linetttt+0x3c>
 800448a:	2300      	movs	r3, #0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d124      	bne.n	80044da <_Z28ILI9341_Draw_Horizontal_Linetttt+0x8a>
		return;
	if ((X + Width - 1) >= LCD_WIDTH)
 8004490:	88fa      	ldrh	r2, [r7, #6]
 8004492:	887b      	ldrh	r3, [r7, #2]
 8004494:	4413      	add	r3, r2
 8004496:	4a13      	ldr	r2, [pc, #76]	@ (80044e4 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x94>)
 8004498:	8812      	ldrh	r2, [r2, #0]
 800449a:	b292      	uxth	r2, r2
 800449c:	4293      	cmp	r3, r2
 800449e:	bfcc      	ite	gt
 80044a0:	2301      	movgt	r3, #1
 80044a2:	2300      	movle	r3, #0
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d005      	beq.n	80044b6 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x66>
	{
		Width = LCD_WIDTH - X;
 80044aa:	4b0e      	ldr	r3, [pc, #56]	@ (80044e4 <_Z28ILI9341_Draw_Horizontal_Linetttt+0x94>)
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	88fb      	ldrh	r3, [r7, #6]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	807b      	strh	r3, [r7, #2]
	}
	ILI9341_Set_Address(X, Y, X + Width - 1, Y);
 80044b6:	88fa      	ldrh	r2, [r7, #6]
 80044b8:	887b      	ldrh	r3, [r7, #2]
 80044ba:	4413      	add	r3, r2
 80044bc:	b29b      	uxth	r3, r3
 80044be:	3b01      	subs	r3, #1
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	88bb      	ldrh	r3, [r7, #4]
 80044c4:	88b9      	ldrh	r1, [r7, #4]
 80044c6:	88f8      	ldrh	r0, [r7, #6]
 80044c8:	f7ff fbf6 	bl	8003cb8 <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, Width);
 80044cc:	887a      	ldrh	r2, [r7, #2]
 80044ce:	883b      	ldrh	r3, [r7, #0]
 80044d0:	4611      	mov	r1, r2
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7ff fdc6 	bl	8004064 <_Z25ILI9341_Draw_Colour_Bursttm>
 80044d8:	e000      	b.n	80044dc <_Z28ILI9341_Draw_Horizontal_Linetttt+0x8c>
		return;
 80044da:	bf00      	nop
}
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd90      	pop	{r4, r7, pc}
 80044e2:	bf00      	nop
 80044e4:	20000002 	.word	0x20000002
 80044e8:	20000000 	.word	0x20000000

080044ec <_Z26ILI9341_Draw_Vertical_Linetttt>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height,
		uint16_t Colour)
{
 80044ec:	b590      	push	{r4, r7, lr}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4604      	mov	r4, r0
 80044f4:	4608      	mov	r0, r1
 80044f6:	4611      	mov	r1, r2
 80044f8:	461a      	mov	r2, r3
 80044fa:	4623      	mov	r3, r4
 80044fc:	80fb      	strh	r3, [r7, #6]
 80044fe:	4603      	mov	r3, r0
 8004500:	80bb      	strh	r3, [r7, #4]
 8004502:	460b      	mov	r3, r1
 8004504:	807b      	strh	r3, [r7, #2]
 8004506:	4613      	mov	r3, r2
 8004508:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 800450a:	4b1d      	ldr	r3, [pc, #116]	@ (8004580 <_Z26ILI9341_Draw_Vertical_Linetttt+0x94>)
 800450c:	881b      	ldrh	r3, [r3, #0]
 800450e:	b29b      	uxth	r3, r3
 8004510:	88fa      	ldrh	r2, [r7, #6]
 8004512:	429a      	cmp	r2, r3
 8004514:	d205      	bcs.n	8004522 <_Z26ILI9341_Draw_Vertical_Linetttt+0x36>
 8004516:	4b1b      	ldr	r3, [pc, #108]	@ (8004584 <_Z26ILI9341_Draw_Vertical_Linetttt+0x98>)
 8004518:	881b      	ldrh	r3, [r3, #0]
 800451a:	b29b      	uxth	r3, r3
 800451c:	88ba      	ldrh	r2, [r7, #4]
 800451e:	429a      	cmp	r2, r3
 8004520:	d301      	bcc.n	8004526 <_Z26ILI9341_Draw_Vertical_Linetttt+0x3a>
 8004522:	2301      	movs	r3, #1
 8004524:	e000      	b.n	8004528 <_Z26ILI9341_Draw_Vertical_Linetttt+0x3c>
 8004526:	2300      	movs	r3, #0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d124      	bne.n	8004576 <_Z26ILI9341_Draw_Vertical_Linetttt+0x8a>
		return;
	if ((Y + Height - 1) >= LCD_HEIGHT)
 800452c:	88ba      	ldrh	r2, [r7, #4]
 800452e:	887b      	ldrh	r3, [r7, #2]
 8004530:	4413      	add	r3, r2
 8004532:	4a14      	ldr	r2, [pc, #80]	@ (8004584 <_Z26ILI9341_Draw_Vertical_Linetttt+0x98>)
 8004534:	8812      	ldrh	r2, [r2, #0]
 8004536:	b292      	uxth	r2, r2
 8004538:	4293      	cmp	r3, r2
 800453a:	bfcc      	ite	gt
 800453c:	2301      	movgt	r3, #1
 800453e:	2300      	movle	r3, #0
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d005      	beq.n	8004552 <_Z26ILI9341_Draw_Vertical_Linetttt+0x66>
	{
		Height = LCD_HEIGHT - Y;
 8004546:	4b0f      	ldr	r3, [pc, #60]	@ (8004584 <_Z26ILI9341_Draw_Vertical_Linetttt+0x98>)
 8004548:	881b      	ldrh	r3, [r3, #0]
 800454a:	b29a      	uxth	r2, r3
 800454c:	88bb      	ldrh	r3, [r7, #4]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	807b      	strh	r3, [r7, #2]
	}
	ILI9341_Set_Address(X, Y, X, Y + Height - 1);
 8004552:	88ba      	ldrh	r2, [r7, #4]
 8004554:	887b      	ldrh	r3, [r7, #2]
 8004556:	4413      	add	r3, r2
 8004558:	b29b      	uxth	r3, r3
 800455a:	3b01      	subs	r3, #1
 800455c:	b29b      	uxth	r3, r3
 800455e:	88fa      	ldrh	r2, [r7, #6]
 8004560:	88b9      	ldrh	r1, [r7, #4]
 8004562:	88f8      	ldrh	r0, [r7, #6]
 8004564:	f7ff fba8 	bl	8003cb8 <_Z19ILI9341_Set_Addresstttt>
	ILI9341_Draw_Colour_Burst(Colour, Height);
 8004568:	887a      	ldrh	r2, [r7, #2]
 800456a:	883b      	ldrh	r3, [r7, #0]
 800456c:	4611      	mov	r1, r2
 800456e:	4618      	mov	r0, r3
 8004570:	f7ff fd78 	bl	8004064 <_Z25ILI9341_Draw_Colour_Bursttm>
 8004574:	e000      	b.n	8004578 <_Z26ILI9341_Draw_Vertical_Linetttt+0x8c>
		return;
 8004576:	bf00      	nop
}
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	bd90      	pop	{r4, r7, pc}
 800457e:	bf00      	nop
 8004580:	20000002 	.word	0x20000002
 8004584:	20000000 	.word	0x20000000

08004588 <_ZN23CManejadorControlesBaseC1Ev>:
 *      Author: W10
 */

#include <ManejadorControles/CManejadorControlesBase.hpp>

CManejadorControlesBase::CManejadorControlesBase()
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	4a04      	ldr	r2, [pc, #16]	@ (80045a4 <_ZN23CManejadorControlesBaseC1Ev+0x1c>)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4618      	mov	r0, r3
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	bc80      	pop	{r7}
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	0800be24 	.word	0x0800be24

080045a8 <_ZN23CManejadorControlesBaseD1Ev>:

CManejadorControlesBase::~CManejadorControlesBase()
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	4a04      	ldr	r2, [pc, #16]	@ (80045c4 <_ZN23CManejadorControlesBaseD1Ev+0x1c>)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4618      	mov	r0, r3
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	bc80      	pop	{r7}
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	0800be24 	.word	0x0800be24

080045c8 <_ZN23CManejadorControlesBaseD0Ev>:
CManejadorControlesBase::~CManejadorControlesBase()
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
}
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f7ff ffe9 	bl	80045a8 <_ZN23CManejadorControlesBaseD1Ev>
 80045d6:	2104      	movs	r1, #4
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f004 f9c7 	bl	800896c <_ZdlPvj>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4618      	mov	r0, r3
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <_ZN23CManejadorControlesBase18OnTemperaturaEventEi>:

void CManejadorControlesBase::OnTemperaturaEvent(int temperatura)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]

}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bc80      	pop	{r7}
 80045fa:	4770      	bx	lr

080045fc <_ZN23CManejadorControlesBase22OnTemperaturaRealEventEi>:
void CManejadorControlesBase::OnTemperaturaRealEvent(int temperatura)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]

}
 8004606:	bf00      	nop
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	bc80      	pop	{r7}
 800460e:	4770      	bx	lr

08004610 <_ZN23CManejadorControlesBase16OnNivelAireEventEi>:
void CManejadorControlesBase::OnNivelAireEvent(int aire)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]

}
 800461a:	bf00      	nop
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	bc80      	pop	{r7}
 8004622:	4770      	bx	lr

08004624 <_ZN23CManejadorControlesBase20OnBotonUnoClickEventEi>:
//eventros del boton uno
void CManejadorControlesBase::OnBotonUnoClickEvent(int tiempoClick)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]

}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	bc80      	pop	{r7}
 8004636:	4770      	bx	lr

08004638 <_ZN23CManejadorControlesBase25OnBotonUnoPresionadoEventEv>:
void CManejadorControlesBase::OnBotonUnoPresionadoEvent()
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]

}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	bc80      	pop	{r7}
 8004648:	4770      	bx	lr

0800464a <_ZN23CManejadorControlesBase30OnBotonUnoPresionadoLargoEventEv>:
void CManejadorControlesBase::OnBotonUnoPresionadoLargoEvent()
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]

}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	bc80      	pop	{r7}
 800465a:	4770      	bx	lr

0800465c <_ZN23CManejadorControlesBase21OnBotonUnoSueltoEventEv>:
void CManejadorControlesBase::OnBotonUnoSueltoEvent()
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]

}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	bc80      	pop	{r7}
 800466c:	4770      	bx	lr

0800466e <_ZN23CManejadorControlesBase20OnBotonDosClickEventEi>:
//eventros del boton dos
void CManejadorControlesBase::OnBotonDosClickEvent(int tiempoClick)
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
 8004676:	6039      	str	r1, [r7, #0]

}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	bc80      	pop	{r7}
 8004680:	4770      	bx	lr

08004682 <_ZN23CManejadorControlesBase25OnBotonDosPresionadoEventEv>:
void CManejadorControlesBase::OnBotonDosPresionadoEvent()
{
 8004682:	b480      	push	{r7}
 8004684:	b083      	sub	sp, #12
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]

}
 800468a:	bf00      	nop
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	bc80      	pop	{r7}
 8004692:	4770      	bx	lr

08004694 <_ZN23CManejadorControlesBase30OnBotonDosPresionadoLargoEventEv>:
void CManejadorControlesBase::OnBotonDosPresionadoLargoEvent()
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]

}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bc80      	pop	{r7}
 80046a4:	4770      	bx	lr

080046a6 <_ZN23CManejadorControlesBase21OnBotonDosSueltoEventEv>:
void CManejadorControlesBase::OnBotonDosSueltoEvent()
{
 80046a6:	b480      	push	{r7}
 80046a8:	b083      	sub	sp, #12
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]

}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bc80      	pop	{r7}
 80046b6:	4770      	bx	lr

080046b8 <_ZN23CManejadorControlesBase21OnBotonTresClickEventEi>:
//eventros del boton tres
void CManejadorControlesBase::OnBotonTresClickEvent(int tiempoClick)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]

}
 80046c2:	bf00      	nop
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bc80      	pop	{r7}
 80046ca:	4770      	bx	lr

080046cc <_ZN23CManejadorControlesBase26OnBotonTresPresionadoEventEv>:
void CManejadorControlesBase::OnBotonTresPresionadoEvent()
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]

}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	bc80      	pop	{r7}
 80046dc:	4770      	bx	lr

080046de <_ZN23CManejadorControlesBase31OnBotonTresPresionadoLargoEventEv>:
void CManejadorControlesBase::OnBotonTresPresionadoLargoEvent()
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]

}
 80046e6:	bf00      	nop
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bc80      	pop	{r7}
 80046ee:	4770      	bx	lr

080046f0 <_ZN23CManejadorControlesBase22OnBotonTresSueltoEventEv>:
void CManejadorControlesBase::OnBotonTresSueltoEvent()
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]

}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bc80      	pop	{r7}
 8004700:	4770      	bx	lr

08004702 <_ZN23CManejadorControlesBase23OnBotonCuatroClickEventEi>:
//eventros del boton Cuatro
void CManejadorControlesBase::OnBotonCuatroClickEvent(int tiempoClick)
{
 8004702:	b480      	push	{r7}
 8004704:	b083      	sub	sp, #12
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	6039      	str	r1, [r7, #0]

}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	bc80      	pop	{r7}
 8004714:	4770      	bx	lr

08004716 <_ZN23CManejadorControlesBase28OnBotonCuatroPresionadoEventEv>:
void CManejadorControlesBase::OnBotonCuatroPresionadoEvent()
{
 8004716:	b480      	push	{r7}
 8004718:	b083      	sub	sp, #12
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]

}
 800471e:	bf00      	nop
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	bc80      	pop	{r7}
 8004726:	4770      	bx	lr

08004728 <_ZN23CManejadorControlesBase33OnBotonCuatroPresionadoLargoEventEv>:
void CManejadorControlesBase::OnBotonCuatroPresionadoLargoEvent()
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]

}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	bc80      	pop	{r7}
 8004738:	4770      	bx	lr

0800473a <_ZN23CManejadorControlesBase24OnBotonCuatroSueltoEventEv>:
void CManejadorControlesBase::OnBotonCuatroSueltoEvent()
{
 800473a:	b480      	push	{r7}
 800473c:	b083      	sub	sp, #12
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]

}
 8004742:	bf00      	nop
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	bc80      	pop	{r7}
 800474a:	4770      	bx	lr

0800474c <_ZN23CManejadorControlesBase24OnBotonPerillaClickEventEi>:
//eventros del boton Perilla
void CManejadorControlesBase::OnBotonPerillaClickEvent(int tiempoClick)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]

}
 8004756:	bf00      	nop
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	bc80      	pop	{r7}
 800475e:	4770      	bx	lr

08004760 <_ZN23CManejadorControlesBase29OnBotonPerillaPresionadoEventEv>:
void CManejadorControlesBase::OnBotonPerillaPresionadoEvent()
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]

}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	bc80      	pop	{r7}
 8004770:	4770      	bx	lr

08004772 <_ZN23CManejadorControlesBase34OnBotonPerillaPresionadoLargoEventEv>:
void CManejadorControlesBase::OnBotonPerillaPresionadoLargoEvent()
{
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]

}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	bc80      	pop	{r7}
 8004782:	4770      	bx	lr

08004784 <_ZN23CManejadorControlesBase25OnBotonPerillaSueltoEventEv>:
void CManejadorControlesBase::OnBotonPerillaSueltoEvent()
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]

}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	bc80      	pop	{r7}
 8004794:	4770      	bx	lr

08004796 <_ZN23CManejadorControlesBase19OnPerillaIncrementoEv>:
//eventos del Encoder
void CManejadorControlesBase::OnPerillaIncremento()
{
 8004796:	b480      	push	{r7}
 8004798:	b083      	sub	sp, #12
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]

}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bc80      	pop	{r7}
 80047a6:	4770      	bx	lr

080047a8 <_ZN23CManejadorControlesBase19OnPerillaDecrementoEv>:
void CManejadorControlesBase::OnPerillaDecremento()
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]

}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bc80      	pop	{r7}
 80047b8:	4770      	bx	lr

080047ba <_ZN7MAX6675C1Ev>:
 *      Author: Alcides Ramos
 */

#include "Max6675/Max6675.hpp"
#include "Uart/Uart.hpp"
MAX6675::MAX6675()
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
{

}
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4618      	mov	r0, r3
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bc80      	pop	{r7}
 80047cc:	4770      	bx	lr

080047ce <_ZN7MAX667515SetConfigDatPinEP12GPIO_TypeDeft>:
void MAX6675::SetConfigDatPin(GPIO_TypeDef *portDat, uint16_t pinDat)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b085      	sub	sp, #20
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	60f8      	str	r0, [r7, #12]
 80047d6:	60b9      	str	r1, [r7, #8]
 80047d8:	4613      	mov	r3, r2
 80047da:	80fb      	strh	r3, [r7, #6]
	DAT_MAX_GPIO_Port = portDat;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	601a      	str	r2, [r3, #0]
	DAT_MAX_Pin = pinDat;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	88fa      	ldrh	r2, [r7, #6]
 80047e6:	819a      	strh	r2, [r3, #12]

}
 80047e8:	bf00      	nop
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bc80      	pop	{r7}
 80047f0:	4770      	bx	lr

080047f2 <_ZN7MAX667514SetConfigCkPinEP12GPIO_TypeDeft>:
void MAX6675::SetConfigCkPin(GPIO_TypeDef *portCk, uint16_t pinCk)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b085      	sub	sp, #20
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	60f8      	str	r0, [r7, #12]
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	4613      	mov	r3, r2
 80047fe:	80fb      	strh	r3, [r7, #6]
	CK_MAX_GPIO_Port = portCk;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	605a      	str	r2, [r3, #4]
	CK_MAX_Pin = pinCk;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	88fa      	ldrh	r2, [r7, #6]
 800480a:	81da      	strh	r2, [r3, #14]

}
 800480c:	bf00      	nop
 800480e:	3714      	adds	r7, #20
 8004810:	46bd      	mov	sp, r7
 8004812:	bc80      	pop	{r7}
 8004814:	4770      	bx	lr

08004816 <_ZN7MAX667514SetConfigCsPinEP12GPIO_TypeDeft>:
void MAX6675::SetConfigCsPin(GPIO_TypeDef *portCs, uint16_t pinCs)
{
 8004816:	b480      	push	{r7}
 8004818:	b085      	sub	sp, #20
 800481a:	af00      	add	r7, sp, #0
 800481c:	60f8      	str	r0, [r7, #12]
 800481e:	60b9      	str	r1, [r7, #8]
 8004820:	4613      	mov	r3, r2
 8004822:	80fb      	strh	r3, [r7, #6]
	CS_MAX_GPIO_Port = portCs;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	609a      	str	r2, [r3, #8]
	CS_MAX_Pin = pinCs;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	88fa      	ldrh	r2, [r7, #6]
 800482e:	821a      	strh	r2, [r3, #16]

}
 8004830:	bf00      	nop
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	bc80      	pop	{r7}
 8004838:	4770      	bx	lr

0800483a <_ZN7MAX667513MAX6675_pulsoEv>:
uint8_t MAX6675::MAX6675_pulso()
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b086      	sub	sp, #24
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
	uint8_t lei;
	HAL_GPIO_WritePin(CK_MAX_GPIO_Port, CK_MAX_Pin,	GPIO_PinState::GPIO_PIN_SET); //SACA UN 1 reloj
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6858      	ldr	r0, [r3, #4]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	89db      	ldrh	r3, [r3, #14]
 800484a:	2201      	movs	r2, #1
 800484c:	4619      	mov	r1, r3
 800484e:	f002 f8e6 	bl	8006a1e <HAL_GPIO_WritePin>
	for(int i=0;i<1000;i++);
 8004852:	2300      	movs	r3, #0
 8004854:	617b      	str	r3, [r7, #20]
 8004856:	e002      	b.n	800485e <_ZN7MAX667513MAX6675_pulsoEv+0x24>
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	3301      	adds	r3, #1
 800485c:	617b      	str	r3, [r7, #20]
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004864:	dbf8      	blt.n	8004858 <_ZN7MAX667513MAX6675_pulsoEv+0x1e>
//	Delay_us(10);
//	HAL_Delay(1);
	lei = HAL_GPIO_ReadPin(DAT_MAX_GPIO_Port, DAT_MAX_Pin); // lee el pin
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	899b      	ldrh	r3, [r3, #12]
 800486e:	4619      	mov	r1, r3
 8004870:	4610      	mov	r0, r2
 8004872:	f002 f8bd 	bl	80069f0 <HAL_GPIO_ReadPin>
 8004876:	4603      	mov	r3, r0
 8004878:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(CK_MAX_GPIO_Port, CK_MAX_Pin,	GPIO_PinState::GPIO_PIN_RESET); //SACA UN 0 reloj
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6858      	ldr	r0, [r3, #4]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	89db      	ldrh	r3, [r3, #14]
 8004882:	2200      	movs	r2, #0
 8004884:	4619      	mov	r1, r3
 8004886:	f002 f8ca 	bl	8006a1e <HAL_GPIO_WritePin>
	for(int i=0;i<1000;i++);
 800488a:	2300      	movs	r3, #0
 800488c:	613b      	str	r3, [r7, #16]
 800488e:	e002      	b.n	8004896 <_ZN7MAX667513MAX6675_pulsoEv+0x5c>
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	3301      	adds	r3, #1
 8004894:	613b      	str	r3, [r7, #16]
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800489c:	dbf8      	blt.n	8004890 <_ZN7MAX667513MAX6675_pulsoEv+0x56>
//	Delay_us(10);
//	HAL_Delay(1);
	return lei;
 800489e:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3718      	adds	r7, #24
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <_ZN7MAX667511MAX6675_leeEv>:
float MAX6675::MAX6675_lee()
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
	int tiempoClick = HAL_GetTick() - TiempoTranscurrido;
 80048b0:	f001 fab8 	bl	8005e24 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	613b      	str	r3, [r7, #16]
	if (tiempoClick < 275)
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	f5b3 7f89 	cmp.w	r3, #274	@ 0x112
 80048c4:	dc02      	bgt.n	80048cc <_ZN7MAX667511MAX6675_leeEv+0x24>
	{
		return UltimaTemperatura;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	e04d      	b.n	8004968 <_ZN7MAX667511MAX6675_leeEv+0xc0>
	}
	TiempoTranscurrido = HAL_GetTick();
 80048cc:	f001 faaa 	bl	8005e24 <HAL_GetTick>
 80048d0:	4603      	mov	r3, r0
 80048d2:	461a      	mov	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	615a      	str	r2, [r3, #20]

	uint16_t sensor_dato;
	uint16_t max6675_dato=0 ;
 80048d8:	2300      	movs	r3, #0
 80048da:	82fb      	strh	r3, [r7, #22]
	int8_t cont;
	HAL_GPIO_WritePin(CS_MAX_GPIO_Port, CS_MAX_Pin,	GPIO_PinState::GPIO_PIN_RESET); //Habilita el modulo
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6898      	ldr	r0, [r3, #8]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	8a1b      	ldrh	r3, [r3, #16]
 80048e4:	2200      	movs	r2, #0
 80048e6:	4619      	mov	r1, r3
 80048e8:	f002 f899 	bl	8006a1e <HAL_GPIO_WritePin>
//	HAL_Delay(1);
	for (cont = 15; cont >= 0; cont--)
 80048ec:	230f      	movs	r3, #15
 80048ee:	757b      	strb	r3, [r7, #21]
 80048f0:	e01b      	b.n	800492a <_ZN7MAX667511MAX6675_leeEv+0x82>
	{
		if (MAX6675_pulso() == 1)
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7ff ffa1 	bl	800483a <_ZN7MAX667513MAX6675_pulsoEv>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	bf0c      	ite	eq
 80048fe:	2301      	moveq	r3, #1
 8004900:	2300      	movne	r3, #0
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00a      	beq.n	800491e <_ZN7MAX667511MAX6675_leeEv+0x76>
			max6675_dato = max6675_dato | 1 << cont;
 8004908:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800490c:	2201      	movs	r2, #1
 800490e:	fa02 f303 	lsl.w	r3, r2, r3
 8004912:	b21a      	sxth	r2, r3
 8004914:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004918:	4313      	orrs	r3, r2
 800491a:	b21b      	sxth	r3, r3
 800491c:	82fb      	strh	r3, [r7, #22]
	for (cont = 15; cont >= 0; cont--)
 800491e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004922:	b2db      	uxtb	r3, r3
 8004924:	3b01      	subs	r3, #1
 8004926:	b2db      	uxtb	r3, r3
 8004928:	757b      	strb	r3, [r7, #21]
 800492a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800492e:	2b00      	cmp	r3, #0
 8004930:	dadf      	bge.n	80048f2 <_ZN7MAX667511MAX6675_leeEv+0x4a>

	}

	HAL_GPIO_WritePin(CS_MAX_GPIO_Port, CS_MAX_Pin,	GPIO_PinState::GPIO_PIN_SET); //APAGA el modulo
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6898      	ldr	r0, [r3, #8]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	8a1b      	ldrh	r3, [r3, #16]
 800493a:	2201      	movs	r2, #1
 800493c:	4619      	mov	r1, r3
 800493e:	f002 f86e 	bl	8006a1e <HAL_GPIO_WritePin>
//	HAL_Delay(1);
	sensor_dato = (max6675_dato >> 3); //desplaz 3 veces
 8004942:	8afb      	ldrh	r3, [r7, #22]
 8004944:	08db      	lsrs	r3, r3, #3
 8004946:	81fb      	strh	r3, [r7, #14]
	UltimaTemperatura=(((float) sensor_dato * 0.25)); //0.25
 8004948:	89fb      	ldrh	r3, [r7, #14]
 800494a:	4618      	mov	r0, r3
 800494c:	f7fc fa06 	bl	8000d5c <__aeabi_ui2f>
 8004950:	4603      	mov	r3, r0
 8004952:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8004956:	4618      	mov	r0, r3
 8004958:	f7fb fc02 	bl	8000160 <__aeabi_fmul>
 800495c:	4603      	mov	r3, r0
 800495e:	461a      	mov	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	619a      	str	r2, [r3, #24]
//	SerialPrintf("temperatura=%f sensor=%d\r\n", UltimaTemperatura,sensor_dato);
	return UltimaTemperatura;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	699b      	ldr	r3, [r3, #24]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3718      	adds	r7, #24
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <_ZN7MAX66754InitEv>:
void MAX6675::Init()
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct =	{ 0 };
 8004978:	f107 0308 	add.w	r3, r7, #8
 800497c:	2200      	movs	r2, #0
 800497e:	601a      	str	r2, [r3, #0]
 8004980:	605a      	str	r2, [r3, #4]
 8004982:	609a      	str	r2, [r3, #8]
 8004984:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(GPIOA, CK_MAX_Pin | CS_MAX_Pin, GPIO_PIN_RESET);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	89da      	ldrh	r2, [r3, #14]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	8a1b      	ldrh	r3, [r3, #16]
 800498e:	4313      	orrs	r3, r2
 8004990:	b29b      	uxth	r3, r3
 8004992:	2200      	movs	r2, #0
 8004994:	4619      	mov	r1, r3
 8004996:	4821      	ldr	r0, [pc, #132]	@ (8004a1c <_ZN7MAX66754InitEv+0xac>)
 8004998:	f002 f841 	bl	8006a1e <HAL_GPIO_WritePin>
	/*Configure GPIO pin : DAT_MAX_Pin */
	GPIO_InitStruct.Pin = DAT_MAX_Pin;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	899b      	ldrh	r3, [r3, #12]
 80049a0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049a2:	2300      	movs	r3, #0
 80049a4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a6:	2300      	movs	r3, #0
 80049a8:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DAT_MAX_GPIO_Port, &GPIO_InitStruct);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f107 0208 	add.w	r2, r7, #8
 80049b2:	4611      	mov	r1, r2
 80049b4:	4618      	mov	r0, r3
 80049b6:	f001 fe97 	bl	80066e8 <HAL_GPIO_Init>

	/*Configure GPIO pins : CK_MAX_Pin CS_MAX_Pin */
	GPIO_InitStruct.Pin = CK_MAX_Pin | CS_MAX_Pin;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	89da      	ldrh	r2, [r3, #14]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	8a1b      	ldrh	r3, [r3, #16]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049c8:	2301      	movs	r3, #1
 80049ca:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049cc:	2300      	movs	r3, #0
 80049ce:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049d0:	2302      	movs	r3, #2
 80049d2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049d4:	f107 0308 	add.w	r3, r7, #8
 80049d8:	4619      	mov	r1, r3
 80049da:	4810      	ldr	r0, [pc, #64]	@ (8004a1c <_ZN7MAX66754InitEv+0xac>)
 80049dc:	f001 fe84 	bl	80066e8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(CK_MAX_GPIO_Port, CK_MAX_Pin, GPIO_PinState::GPIO_PIN_RESET); //SACA UN 0 reloj
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6858      	ldr	r0, [r3, #4]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	89db      	ldrh	r3, [r3, #14]
 80049e8:	2200      	movs	r2, #0
 80049ea:	4619      	mov	r1, r3
 80049ec:	f002 f817 	bl	8006a1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_MAX_GPIO_Port, CS_MAX_Pin, GPIO_PinState::GPIO_PIN_SET); //APAGA el modulo
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6898      	ldr	r0, [r3, #8]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	8a1b      	ldrh	r3, [r3, #16]
 80049f8:	2201      	movs	r2, #1
 80049fa:	4619      	mov	r1, r3
 80049fc:	f002 f80f 	bl	8006a1e <HAL_GPIO_WritePin>

	HAL_Delay(100);
 8004a00:	2064      	movs	r0, #100	@ 0x64
 8004a02:	f001 fa19 	bl	8005e38 <HAL_Delay>
	TiempoTranscurrido = HAL_GetTick();
 8004a06:	f001 fa0d 	bl	8005e24 <HAL_GetTick>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	615a      	str	r2, [r3, #20]
}
 8004a12:	bf00      	nop
 8004a14:	3718      	adds	r7, #24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	40010800 	.word	0x40010800

08004a20 <_ZN3PwmC1Ev>:

#include <PWM/Pwm.hpp>
#include "stm32f1xx_hal.h"
#include "stdlib.h"

Pwm::Pwm()
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	4a04      	ldr	r2, [pc, #16]	@ (8004a3c <_ZN3PwmC1Ev+0x1c>)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4618      	mov	r0, r3
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bc80      	pop	{r7}
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	0800be98 	.word	0x0800be98

08004a40 <_ZN3PwmD1Ev>:

Pwm::~Pwm()
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	4a04      	ldr	r2, [pc, #16]	@ (8004a5c <_ZN3PwmD1Ev+0x1c>)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4618      	mov	r0, r3
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bc80      	pop	{r7}
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	0800be98 	.word	0x0800be98

08004a60 <_ZN3PwmD0Ev>:
Pwm::~Pwm()
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
}
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f7ff ffe9 	bl	8004a40 <_ZN3PwmD1Ev>
 8004a6e:	214c      	movs	r1, #76	@ 0x4c
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f003 ff7b 	bl	800896c <_ZdlPvj>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <_ZN3Pwm4InitEP11TIM_TypeDefii>:
void Pwm::Init(TIM_TypeDef * timer, int chanel,int periodo)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b092      	sub	sp, #72	@ 0x48
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
 8004a8c:	603b      	str	r3, [r7, #0]
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a8e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004a92:	2200      	movs	r2, #0
 8004a94:	601a      	str	r2, [r3, #0]
 8004a96:	605a      	str	r2, [r3, #4]
 8004a98:	609a      	str	r2, [r3, #8]
 8004a9a:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a9c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8004aa6:	f107 0314 	add.w	r3, r7, #20
 8004aaa:	2200      	movs	r2, #0
 8004aac:	601a      	str	r2, [r3, #0]
 8004aae:	605a      	str	r2, [r3, #4]
 8004ab0:	609a      	str	r2, [r3, #8]
 8004ab2:	60da      	str	r2, [r3, #12]
 8004ab4:	611a      	str	r2, [r3, #16]
 8004ab6:	615a      	str	r2, [r3, #20]
 8004ab8:	619a      	str	r2, [r3, #24]

	  Htim.Instance = timer;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	605a      	str	r2, [r3, #4]
	  Htim.Init.Prescaler = 0;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	609a      	str	r2, [r3, #8]
	  Htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	60da      	str	r2, [r3, #12]
	  Htim.Init.Period = periodo;
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	611a      	str	r2, [r3, #16]
	  Htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	615a      	str	r2, [r3, #20]
	  Htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2280      	movs	r2, #128	@ 0x80
 8004adc:	61da      	str	r2, [r3, #28]
	  if (HAL_TIM_Base_Init(&Htim) != HAL_OK)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f002 ff00 	bl	80078e8 <HAL_TIM_Base_Init>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	bf14      	ite	ne
 8004aee:	2301      	movne	r3, #1
 8004af0:	2300      	moveq	r3, #0
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d002      	beq.n	8004afe <_ZN3Pwm4InitEP11TIM_TypeDefii+0x7e>
	  {
	    Error_Handler();
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 f889 	bl	8004c10 <_ZN3Pwm13Error_HandlerEv>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004afe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b02:	63bb      	str	r3, [r7, #56]	@ 0x38
	  if (HAL_TIM_ConfigClockSource(&Htim, &sClockSourceConfig) != HAL_OK)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	3304      	adds	r3, #4
 8004b08:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8004b0c:	4611      	mov	r1, r2
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f003 f9f4 	bl	8007efc <HAL_TIM_ConfigClockSource>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	bf14      	ite	ne
 8004b1a:	2301      	movne	r3, #1
 8004b1c:	2300      	moveq	r3, #0
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d002      	beq.n	8004b2a <_ZN3Pwm4InitEP11TIM_TypeDefii+0xaa>
	  {
	    Error_Handler();
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 f873 	bl	8004c10 <_ZN3Pwm13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_Init(&Htim) != HAL_OK)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	3304      	adds	r3, #4
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f002 ff29 	bl	8007986 <HAL_TIM_PWM_Init>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	bf14      	ite	ne
 8004b3a:	2301      	movne	r3, #1
 8004b3c:	2300      	moveq	r3, #0
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <_ZN3Pwm4InitEP11TIM_TypeDefii+0xca>
	  {
	    Error_Handler();
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 f863 	bl	8004c10 <_ZN3Pwm13Error_HandlerEv>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	633b      	str	r3, [r7, #48]	@ 0x30
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	637b      	str	r3, [r7, #52]	@ 0x34
	  if (HAL_TIMEx_MasterConfigSynchronization(&Htim, &sMasterConfig) != HAL_OK)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	3304      	adds	r3, #4
 8004b56:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f003 fd65 	bl	800862c <HAL_TIMEx_MasterConfigSynchronization>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	bf14      	ite	ne
 8004b68:	2301      	movne	r3, #1
 8004b6a:	2300      	moveq	r3, #0
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d002      	beq.n	8004b78 <_ZN3Pwm4InitEP11TIM_TypeDefii+0xf8>
	  {
	    Error_Handler();
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f000 f84c 	bl	8004c10 <_ZN3Pwm13Error_HandlerEv>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004b78:	2360      	movs	r3, #96	@ 0x60
 8004b7a:	617b      	str	r3, [r7, #20]
	  sConfigOC.Pulse = 0;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	61bb      	str	r3, [r7, #24]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b80:	2300      	movs	r3, #0
 8004b82:	61fb      	str	r3, [r7, #28]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b84:	2300      	movs	r3, #0
 8004b86:	627b      	str	r3, [r7, #36]	@ 0x24
	  if (HAL_TIM_PWM_ConfigChannel(&Htim, &sConfigOC, chanel) != HAL_OK)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	3304      	adds	r3, #4
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	f107 0114 	add.w	r1, r7, #20
 8004b92:	4618      	mov	r0, r3
 8004b94:	f003 f8f0 	bl	8007d78 <HAL_TIM_PWM_ConfigChannel>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	bf14      	ite	ne
 8004b9e:	2301      	movne	r3, #1
 8004ba0:	2300      	moveq	r3, #0
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <_ZN3Pwm4InitEP11TIM_TypeDefii+0x12e>
	  {
	    Error_Handler();
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 f831 	bl	8004c10 <_ZN3Pwm13Error_HandlerEv>
	  }
	  HAL_TIM_MspPostInit(&Htim);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 f835 	bl	8004c24 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef>
	HAL_TIM_PWM_Start(&Htim,chanel);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	3304      	adds	r3, #4
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	4611      	mov	r1, r2
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f002 ff2e 	bl	8007a24 <HAL_TIM_PWM_Start>
	Htim.Instance->CCR1=25000;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8004bd0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8004bd2:	bf00      	nop
 8004bd4:	3748      	adds	r7, #72	@ 0x48
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
	...

08004bdc <_ZN3Pwm12SicloTrabajoEi>:
void Pwm::SicloTrabajo(int siclo)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
	// si 65535->100
	// x->siclo
	int valor=siclo*Htim.Init.Period/100;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	683a      	ldr	r2, [r7, #0]
 8004bec:	fb02 f303 	mul.w	r3, r2, r3
 8004bf0:	4a06      	ldr	r2, [pc, #24]	@ (8004c0c <_ZN3Pwm12SicloTrabajoEi+0x30>)
 8004bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf6:	095b      	lsrs	r3, r3, #5
 8004bf8:	60fb      	str	r3, [r7, #12]
	Htim.Instance->CCR1=valor;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8004c02:	bf00      	nop
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bc80      	pop	{r7}
 8004c0a:	4770      	bx	lr
 8004c0c:	51eb851f 	.word	0x51eb851f

08004c10 <_ZN3Pwm13Error_HandlerEv>:

void Pwm::Error_Handler(void)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]

}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bc80      	pop	{r7}
 8004c20:	4770      	bx	lr
	...

08004c24 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef>:
void Pwm::HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b08a      	sub	sp, #40	@ 0x28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c2e:	f107 0314 	add.w	r3, r7, #20
 8004c32:	2200      	movs	r2, #0
 8004c34:	601a      	str	r2, [r3, #0]
 8004c36:	605a      	str	r2, [r3, #4]
 8004c38:	609a      	str	r2, [r3, #8]
 8004c3a:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a28      	ldr	r2, [pc, #160]	@ (8004ce4 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc0>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d119      	bne.n	8004c7a <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0x56>
  {
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c46:	4b28      	ldr	r3, [pc, #160]	@ (8004ce8 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc4>)
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	4a27      	ldr	r2, [pc, #156]	@ (8004ce8 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc4>)
 8004c4c:	f043 0304 	orr.w	r3, r3, #4
 8004c50:	6193      	str	r3, [r2, #24]
 8004c52:	4b25      	ldr	r3, [pc, #148]	@ (8004ce8 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc4>)
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	f003 0304 	and.w	r3, r3, #4
 8004c5a:	613b      	str	r3, [r7, #16]
 8004c5c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004c5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c64:	2302      	movs	r3, #2
 8004c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c68:	2302      	movs	r3, #2
 8004c6a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c6c:	f107 0314 	add.w	r3, r7, #20
 8004c70:	4619      	mov	r1, r3
 8004c72:	481e      	ldr	r0, [pc, #120]	@ (8004cec <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc8>)
 8004c74:	f001 fd38 	bl	80066e8 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
  }

}
 8004c78:	e02f      	b.n	8004cda <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xb6>
  else if(htim->Instance==TIM2)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c82:	d12a      	bne.n	8004cda <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xb6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c84:	4b18      	ldr	r3, [pc, #96]	@ (8004ce8 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc4>)
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	4a17      	ldr	r2, [pc, #92]	@ (8004ce8 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc4>)
 8004c8a:	f043 0304 	orr.w	r3, r3, #4
 8004c8e:	6193      	str	r3, [r2, #24]
 8004c90:	4b15      	ldr	r3, [pc, #84]	@ (8004ce8 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc4>)
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	f003 0304 	and.w	r3, r3, #4
 8004c98:	60fb      	str	r3, [r7, #12]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004c9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004caa:	f107 0314 	add.w	r3, r7, #20
 8004cae:	4619      	mov	r1, r3
 8004cb0:	480e      	ldr	r0, [pc, #56]	@ (8004cec <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xc8>)
 8004cb2:	f001 fd19 	bl	80066e8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8004cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8004cf0 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xcc>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8004cca:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cd4:	4a06      	ldr	r2, [pc, #24]	@ (8004cf0 <_ZN3Pwm19HAL_TIM_MspPostInitEP17TIM_HandleTypeDef+0xcc>)
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd8:	6053      	str	r3, [r2, #4]
}
 8004cda:	bf00      	nop
 8004cdc:	3728      	adds	r7, #40	@ 0x28
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	40012c00 	.word	0x40012c00
 8004ce8:	40021000 	.word	0x40021000
 8004cec:	40010800 	.word	0x40010800
 8004cf0:	40010000 	.word	0x40010000

08004cf4 <_ZN31CManejadorEventoSensorMagneticoC1Ev>:
 *      Author: W10
 */

#include <SensorMagnetico/CManejadorEventoSensorMagnetico.hpp>

CManejadorEventoSensorMagnetico::CManejadorEventoSensorMagnetico()
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	4a04      	ldr	r2, [pc, #16]	@ (8004d10 <_ZN31CManejadorEventoSensorMagneticoC1Ev+0x1c>)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4618      	mov	r0, r3
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bc80      	pop	{r7}
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	0800bea8 	.word	0x0800bea8

08004d14 <_ZN31CManejadorEventoSensorMagneticoD1Ev>:

CManejadorEventoSensorMagnetico::~CManejadorEventoSensorMagnetico()
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	4a04      	ldr	r2, [pc, #16]	@ (8004d30 <_ZN31CManejadorEventoSensorMagneticoD1Ev+0x1c>)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4618      	mov	r0, r3
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bc80      	pop	{r7}
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	0800bea8 	.word	0x0800bea8

08004d34 <_ZN31CManejadorEventoSensorMagneticoD0Ev>:
CManejadorEventoSensorMagnetico::~CManejadorEventoSensorMagnetico()
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
}
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f7ff ffe9 	bl	8004d14 <_ZN31CManejadorEventoSensorMagneticoD1Ev>
 8004d42:	2104      	movs	r1, #4
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f003 fe11 	bl	800896c <_ZdlPvj>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <_ZN31CManejadorEventoSensorMagnetico23OnSensorMagneticoChangeEi>:
void CManejadorEventoSensorMagnetico::OnSensorMagneticoChange(int Estado)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
	//evento que se llama cuando cambia el estado del sensor
}
 8004d5e:	bf00      	nop
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bc80      	pop	{r7}
 8004d66:	4770      	bx	lr

08004d68 <_ZN15SensorMagneticoC1Ev>:

#include <SensorMagnetico/SensorMagnetico.hpp>
#include "stm32f1xx.h"
#include "Constantes.hpp"

SensorMagnetico::SensorMagnetico()
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	4a0a      	ldr	r2, [pc, #40]	@ (8004d9c <_ZN15SensorMagneticoC1Ev+0x34>)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	60da      	str	r2, [r3, #12]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	611a      	str	r2, [r3, #16]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	615a      	str	r2, [r3, #20]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	619a      	str	r2, [r3, #24]
{
	// TODO Auto-generated constructor stub

}
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4618      	mov	r0, r3
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bc80      	pop	{r7}
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	0800bebc 	.word	0x0800bebc

08004da0 <_ZN15SensorMagneticoD1Ev>:

SensorMagnetico::~SensorMagnetico()
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	4a04      	ldr	r2, [pc, #16]	@ (8004dbc <_ZN15SensorMagneticoD1Ev+0x1c>)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4618      	mov	r0, r3
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bc80      	pop	{r7}
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	0800bebc 	.word	0x0800bebc

08004dc0 <_ZN15SensorMagneticoD0Ev>:
SensorMagnetico::~SensorMagnetico()
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
}
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f7ff ffe9 	bl	8004da0 <_ZN15SensorMagneticoD1Ev>
 8004dce:	211c      	movs	r1, #28
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f003 fdcb 	bl	800896c <_ZdlPvj>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3708      	adds	r7, #8
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <_ZN15SensorMagnetico10ConfigurarEP12GPIO_TypeDeft>:

void SensorMagnetico::Configurar(GPIO_TypeDef *puerto, uint16_t pin)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	4613      	mov	r3, r2
 8004dec:	80fb      	strh	r3, [r7, #6]
	GPIO_Port = puerto;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	605a      	str	r2, [r3, #4]
	Gpio_Pin = pin;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	88fa      	ldrh	r2, [r7, #6]
 8004df8:	811a      	strh	r2, [r3, #8]

}
 8004dfa:	bf00      	nop
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bc80      	pop	{r7}
 8004e02:	4770      	bx	lr

08004e04 <_ZN15SensorMagnetico4InitEv>:
void SensorMagnetico::Init()
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 8004e0c:	f107 0308 	add.w	r3, r7, #8
 8004e10:	2200      	movs	r2, #0
 8004e12:	601a      	str	r2, [r3, #0]
 8004e14:	605a      	str	r2, [r3, #4]
 8004e16:	609a      	str	r2, [r3, #8]
 8004e18:	60da      	str	r2, [r3, #12]
	{ 0 };
	GPIO_InitStruct.Pin = Gpio_Pin;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	891b      	ldrh	r3, [r3, #8]
 8004e1e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e20:	2300      	movs	r3, #0
 8004e22:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e24:	2301      	movs	r3, #1
 8004e26:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f107 0208 	add.w	r2, r7, #8
 8004e30:	4611      	mov	r1, r2
 8004e32:	4618      	mov	r0, r3
 8004e34:	f001 fc58 	bl	80066e8 <HAL_GPIO_Init>
}
 8004e38:	bf00      	nop
 8004e3a:	3718      	adds	r7, #24
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <_ZN15SensorMagnetico22AsignaManejadorEventosEP31CManejadorEventoSensorMagnetico>:
void SensorMagnetico::AsignaManejadorEventos(
		CManejadorEventoSensorMagnetico *manejador)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
	Manejador = manejador;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	683a      	ldr	r2, [r7, #0]
 8004e4e:	60da      	str	r2, [r3, #12]

}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bc80      	pop	{r7}
 8004e58:	4770      	bx	lr

08004e5a <_ZN15SensorMagnetico4LeerEv>:
int SensorMagnetico::Leer()
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b082      	sub	sp, #8
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(GPIO_Port, Gpio_Pin); // lee el pin
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	891b      	ldrh	r3, [r3, #8]
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	4610      	mov	r0, r2
 8004e6e:	f001 fdbf 	bl	80069f0 <HAL_GPIO_ReadPin>
 8004e72:	4603      	mov	r3, r0

}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3708      	adds	r7, #8
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <_Z16USART1_UART_Initv>:
	}
}

//static
void USART1_UART_Init(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	Huart1.Instance = USART1;
 8004e80:	4b13      	ldr	r3, [pc, #76]	@ (8004ed0 <_Z16USART1_UART_Initv+0x54>)
 8004e82:	4a14      	ldr	r2, [pc, #80]	@ (8004ed4 <_Z16USART1_UART_Initv+0x58>)
 8004e84:	601a      	str	r2, [r3, #0]
	Huart1.Init.BaudRate = 115200;
 8004e86:	4b12      	ldr	r3, [pc, #72]	@ (8004ed0 <_Z16USART1_UART_Initv+0x54>)
 8004e88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004e8c:	605a      	str	r2, [r3, #4]
	Huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004e8e:	4b10      	ldr	r3, [pc, #64]	@ (8004ed0 <_Z16USART1_UART_Initv+0x54>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	609a      	str	r2, [r3, #8]
	Huart1.Init.StopBits = UART_STOPBITS_1;
 8004e94:	4b0e      	ldr	r3, [pc, #56]	@ (8004ed0 <_Z16USART1_UART_Initv+0x54>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	60da      	str	r2, [r3, #12]
	Huart1.Init.Parity = UART_PARITY_NONE;
 8004e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ed0 <_Z16USART1_UART_Initv+0x54>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	611a      	str	r2, [r3, #16]
	Huart1.Init.Mode = UART_MODE_TX_RX;
 8004ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed0 <_Z16USART1_UART_Initv+0x54>)
 8004ea2:	220c      	movs	r2, #12
 8004ea4:	615a      	str	r2, [r3, #20]
	Huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8004ed0 <_Z16USART1_UART_Initv+0x54>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	619a      	str	r2, [r3, #24]
	Huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004eac:	4b08      	ldr	r3, [pc, #32]	@ (8004ed0 <_Z16USART1_UART_Initv+0x54>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&Huart1) != HAL_OK)
 8004eb2:	4807      	ldr	r0, [pc, #28]	@ (8004ed0 <_Z16USART1_UART_Initv+0x54>)
 8004eb4:	f003 fc7b 	bl	80087ae <HAL_UART_Init>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	bf14      	ite	ne
 8004ebe:	2301      	movne	r3, #1
 8004ec0:	2300      	moveq	r3, #0
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d001      	beq.n	8004ecc <_Z16USART1_UART_Initv+0x50>
	{
		ErrorHandler();
 8004ec8:	f000 f806 	bl	8004ed8 <_Z12ErrorHandlerv>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8004ecc:	bf00      	nop
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	200001f4 	.word	0x200001f4
 8004ed4:	40013800 	.word	0x40013800

08004ed8 <_Z12ErrorHandlerv>:
void ErrorHandler(void)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004edc:	b672      	cpsid	i
}
 8004ede:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8004ee0:	bf00      	nop
 8004ee2:	e7fd      	b.n	8004ee0 <_Z12ErrorHandlerv+0x8>

08004ee4 <_Z16IncializaSistemav>:

CestacionVirtual *estacion;
//TIM_HandleTypeDef htim2;

void IncializaSistema()
{
 8004ee4:	b598      	push	{r3, r4, r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
	//TIMX->CR1|=1>>0;
	//delay_us_tim_init();
	  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004ee8:	2200      	movs	r2, #0
 8004eea:	2100      	movs	r1, #0
 8004eec:	2028      	movs	r0, #40	@ 0x28
 8004eee:	f001 fbc4 	bl	800667a <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004ef2:	2028      	movs	r0, #40	@ 0x28
 8004ef4:	f001 fbdd 	bl	80066b2 <HAL_NVIC_EnableIRQ>

	USART1_UART_Init();
 8004ef8:	f7ff ffc0 	bl	8004e7c <_Z16USART1_UART_Initv>
	estacion=new CestacionVirtual();
 8004efc:	f44f 70e6 	mov.w	r0, #460	@ 0x1cc
 8004f00:	f003 fd36 	bl	8008970 <_Znwj>
 8004f04:	4603      	mov	r3, r0
 8004f06:	461c      	mov	r4, r3
 8004f08:	4620      	mov	r0, r4
 8004f0a:	f7fd f85f 	bl	8001fcc <_ZN16CestacionVirtualC1Ev>
 8004f0e:	4b06      	ldr	r3, [pc, #24]	@ (8004f28 <_Z16IncializaSistemav+0x44>)
 8004f10:	601c      	str	r4, [r3, #0]
	ILI9341_Init(); //initial driver setup to drive ili9341
 8004f12:	f7fe ff99 	bl	8003e48 <_Z12ILI9341_Initv>
	ILI9341_Fill_Screen(WHITE);
 8004f16:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004f1a:	f7ff f93d 	bl	8004198 <_Z19ILI9341_Fill_Screent>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8004f1e:	2003      	movs	r0, #3
 8004f20:	f7fe ff34 	bl	8003d8c <_Z20ILI9341_Set_Rotationh>
}
 8004f24:	bf00      	nop
 8004f26:	bd98      	pop	{r3, r4, r7, pc}
 8004f28:	2000023c 	.word	0x2000023c

08004f2c <_Z14EjecutaSistemav>:

void EjecutaSistema()
{
 8004f2c:	b590      	push	{r4, r7, lr}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
	CPantallaManual *pantalla=new CPantallaManual();
 8004f32:	20d4      	movs	r0, #212	@ 0xd4
 8004f34:	f003 fd1c 	bl	8008970 <_Znwj>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	461c      	mov	r4, r3
 8004f3c:	4620      	mov	r0, r4
 8004f3e:	f7fe f9e1 	bl	8003304 <_ZN15CPantallaManualC1Ev>
 8004f42:	607c      	str	r4, [r7, #4]
	pantalla->SetEstacion(estacion);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	3358      	adds	r3, #88	@ 0x58
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a0f      	ldr	r2, [pc, #60]	@ (8004f8c <_Z14EjecutaSistemav+0x60>)
 8004f4e:	6812      	ldr	r2, [r2, #0]
 8004f50:	4611      	mov	r1, r2
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	4798      	blx	r3
	pantalla->Show();
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3348      	adds	r3, #72	@ 0x48
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	4798      	blx	r3
	while(1)
	{
		estacion->Procesa();
 8004f62:	4b0a      	ldr	r3, [pc, #40]	@ (8004f8c <_Z14EjecutaSistemav+0x60>)
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	4b09      	ldr	r3, [pc, #36]	@ (8004f8c <_Z14EjecutaSistemav+0x60>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	332c      	adds	r3, #44	@ 0x2c
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4610      	mov	r0, r2
 8004f72:	4798      	blx	r3
		pantalla->Refresca();
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3354      	adds	r3, #84	@ 0x54
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	4798      	blx	r3
		HAL_Delay(1);
 8004f80:	2001      	movs	r0, #1
 8004f82:	f000 ff59 	bl	8005e38 <HAL_Delay>
		estacion->Procesa();
 8004f86:	bf00      	nop
 8004f88:	e7eb      	b.n	8004f62 <_Z14EjecutaSistemav+0x36>
 8004f8a:	bf00      	nop
 8004f8c:	2000023c 	.word	0x2000023c

08004f90 <HAL_GPIO_EXTI_Callback>:
	}
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	4603      	mov	r3, r0
 8004f98:	80fb      	strh	r3, [r7, #6]
	estacion->InterrupcionEncoder();
 8004f9a:	4b06      	ldr	r3, [pc, #24]	@ (8004fb4 <HAL_GPIO_EXTI_Callback+0x24>)
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	4b05      	ldr	r3, [pc, #20]	@ (8004fb4 <HAL_GPIO_EXTI_Callback+0x24>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	3330      	adds	r3, #48	@ 0x30
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4610      	mov	r0, r2
 8004faa:	4798      	blx	r3
}
 8004fac:	bf00      	nop
 8004fae:	3708      	adds	r7, #8
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	2000023c 	.word	0x2000023c

08004fb8 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b08a      	sub	sp, #40	@ 0x28
 8004fbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004fbe:	4b72      	ldr	r3, [pc, #456]	@ (8005188 <MX_GPIO_Init+0x1d0>)
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	4a71      	ldr	r2, [pc, #452]	@ (8005188 <MX_GPIO_Init+0x1d0>)
 8004fc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fc8:	6193      	str	r3, [r2, #24]
 8004fca:	4b6f      	ldr	r3, [pc, #444]	@ (8005188 <MX_GPIO_Init+0x1d0>)
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd2:	617b      	str	r3, [r7, #20]
 8004fd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fd6:	4b6c      	ldr	r3, [pc, #432]	@ (8005188 <MX_GPIO_Init+0x1d0>)
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	4a6b      	ldr	r2, [pc, #428]	@ (8005188 <MX_GPIO_Init+0x1d0>)
 8004fdc:	f043 0310 	orr.w	r3, r3, #16
 8004fe0:	6193      	str	r3, [r2, #24]
 8004fe2:	4b69      	ldr	r3, [pc, #420]	@ (8005188 <MX_GPIO_Init+0x1d0>)
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	f003 0310 	and.w	r3, r3, #16
 8004fea:	613b      	str	r3, [r7, #16]
 8004fec:	693b      	ldr	r3, [r7, #16]
//  __HAL_RCC_GPIOF_CLK_ENABLE();
//  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fee:	4b66      	ldr	r3, [pc, #408]	@ (8005188 <MX_GPIO_Init+0x1d0>)
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	4a65      	ldr	r2, [pc, #404]	@ (8005188 <MX_GPIO_Init+0x1d0>)
 8004ff4:	f043 0304 	orr.w	r3, r3, #4
 8004ff8:	6193      	str	r3, [r2, #24]
 8004ffa:	4b63      	ldr	r3, [pc, #396]	@ (8005188 <MX_GPIO_Init+0x1d0>)
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	f003 0304 	and.w	r3, r3, #4
 8005002:	60fb      	str	r3, [r7, #12]
 8005004:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005006:	4b60      	ldr	r3, [pc, #384]	@ (8005188 <MX_GPIO_Init+0x1d0>)
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	4a5f      	ldr	r2, [pc, #380]	@ (8005188 <MX_GPIO_Init+0x1d0>)
 800500c:	f043 0308 	orr.w	r3, r3, #8
 8005010:	6193      	str	r3, [r2, #24]
 8005012:	4b5d      	ldr	r3, [pc, #372]	@ (8005188 <MX_GPIO_Init+0x1d0>)
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	f003 0308 	and.w	r3, r3, #8
 800501a:	60bb      	str	r3, [r7, #8]
 800501c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800501e:	4b5a      	ldr	r3, [pc, #360]	@ (8005188 <MX_GPIO_Init+0x1d0>)
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	4a59      	ldr	r2, [pc, #356]	@ (8005188 <MX_GPIO_Init+0x1d0>)
 8005024:	f043 0320 	orr.w	r3, r3, #32
 8005028:	6193      	str	r3, [r2, #24]
 800502a:	4b57      	ldr	r3, [pc, #348]	@ (8005188 <MX_GPIO_Init+0x1d0>)
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	f003 0320 	and.w	r3, r3, #32
 8005032:	607b      	str	r3, [r7, #4]
 8005034:	687b      	ldr	r3, [r7, #4]
//  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8005036:	2304      	movs	r3, #4
 8005038:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800503a:	2300      	movs	r3, #0
 800503c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800503e:	2300      	movs	r3, #0
 8005040:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8005042:	f107 0318 	add.w	r3, r7, #24
 8005046:	4619      	mov	r1, r3
 8005048:	4850      	ldr	r0, [pc, #320]	@ (800518c <MX_GPIO_Init+0x1d4>)
 800504a:	f001 fb4d 	bl	80066e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 800504e:	2368      	movs	r3, #104	@ 0x68
 8005050:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005052:	2301      	movs	r3, #1
 8005054:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005056:	2300      	movs	r3, #0
 8005058:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800505a:	2303      	movs	r3, #3
 800505c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800505e:	f107 0318 	add.w	r3, r7, #24
 8005062:	4619      	mov	r1, r3
 8005064:	4849      	ldr	r0, [pc, #292]	@ (800518c <MX_GPIO_Init+0x1d4>)
 8005066:	f001 fb3f 	bl	80066e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 800506a:	2310      	movs	r3, #16
 800506c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800506e:	2300      	movs	r3, #0
 8005070:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005072:	2301      	movs	r3, #1
 8005074:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8005076:	f107 0318 	add.w	r3, r7, #24
 800507a:	4619      	mov	r1, r3
 800507c:	4843      	ldr	r0, [pc, #268]	@ (800518c <MX_GPIO_Init+0x1d4>)
 800507e:	f001 fb33 	bl	80066e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 8005082:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005088:	2300      	movs	r3, #0
 800508a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800508c:	2300      	movs	r3, #0
 800508e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8005090:	f107 0318 	add.w	r3, r7, #24
 8005094:	4619      	mov	r1, r3
 8005096:	483e      	ldr	r0, [pc, #248]	@ (8005190 <MX_GPIO_Init+0x1d8>)
 8005098:	f001 fb26 	bl	80066e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800509c:	2332      	movs	r3, #50	@ 0x32
 800509e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050a0:	2302      	movs	r3, #2
 80050a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a4:	2300      	movs	r3, #0
 80050a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050a8:	2303      	movs	r3, #3
 80050aa:	627b      	str	r3, [r7, #36]	@ 0x24
  //GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050ac:	f107 0318 	add.w	r3, r7, #24
 80050b0:	4619      	mov	r1, r3
 80050b2:	4837      	ldr	r0, [pc, #220]	@ (8005190 <MX_GPIO_Init+0x1d8>)
 80050b4:	f001 fb18 	bl	80066e8 <HAL_GPIO_Init>
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
////  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
//  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80050b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80050bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050be:	2302      	movs	r3, #2
 80050c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c2:	2300      	movs	r3, #0
 80050c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050c6:	2303      	movs	r3, #3
 80050c8:	627b      	str	r3, [r7, #36]	@ 0x24
  //GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80050ca:	f107 0318 	add.w	r3, r7, #24
 80050ce:	4619      	mov	r1, r3
 80050d0:	4830      	ldr	r0, [pc, #192]	@ (8005194 <MX_GPIO_Init+0x1dc>)
 80050d2:	f001 fb09 	bl	80066e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80050d6:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80050da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050dc:	2301      	movs	r3, #1
 80050de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050e0:	2300      	movs	r3, #0
 80050e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050e4:	2302      	movs	r3, #2
 80050e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050e8:	f107 0318 	add.w	r3, r7, #24
 80050ec:	4619      	mov	r1, r3
 80050ee:	4829      	ldr	r0, [pc, #164]	@ (8005194 <MX_GPIO_Init+0x1dc>)
 80050f0:	f001 fafa 	bl	80066e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80050f4:	2340      	movs	r3, #64	@ 0x40
 80050f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050f8:	2301      	movs	r3, #1
 80050fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050fc:	2300      	movs	r3, #0
 80050fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005100:	2302      	movs	r3, #2
 8005102:	627b      	str	r3, [r7, #36]	@ 0x24
  //HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8005104:	2380      	movs	r3, #128	@ 0x80
 8005106:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005108:	2300      	movs	r3, #0
 800510a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800510c:	2300      	movs	r3, #0
 800510e:	623b      	str	r3, [r7, #32]
  //HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8005110:	f240 4303 	movw	r3, #1027	@ 0x403
 8005114:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005116:	2301      	movs	r3, #1
 8005118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800511a:	2300      	movs	r3, #0
 800511c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800511e:	2303      	movs	r3, #3
 8005120:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005122:	f107 0318 	add.w	r3, r7, #24
 8005126:	4619      	mov	r1, r3
 8005128:	4819      	ldr	r0, [pc, #100]	@ (8005190 <MX_GPIO_Init+0x1d8>)
 800512a:	f001 fadd 	bl	80066e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800512e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8005132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005134:	2302      	movs	r3, #2
 8005136:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005138:	2300      	movs	r3, #0
 800513a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800513c:	2303      	movs	r3, #3
 800513e:	627b      	str	r3, [r7, #36]	@ 0x24
  //GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005140:	f107 0318 	add.w	r3, r7, #24
 8005144:	4619      	mov	r1, r3
 8005146:	4814      	ldr	r0, [pc, #80]	@ (8005198 <MX_GPIO_Init+0x1e0>)
 8005148:	f001 face 	bl	80066e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800514c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8005150:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005152:	2302      	movs	r3, #2
 8005154:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005156:	2300      	movs	r3, #0
 8005158:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800515a:	2303      	movs	r3, #3
 800515c:	627b      	str	r3, [r7, #36]	@ 0x24
//  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
//  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 800515e:	2200      	movs	r2, #0
 8005160:	2168      	movs	r1, #104	@ 0x68
 8005162:	480a      	ldr	r0, [pc, #40]	@ (800518c <MX_GPIO_Init+0x1d4>)
 8005164:	f001 fc5b 	bl	8006a1e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8005168:	2200      	movs	r2, #0
 800516a:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 800516e:	4809      	ldr	r0, [pc, #36]	@ (8005194 <MX_GPIO_Init+0x1dc>)
 8005170:	f001 fc55 	bl	8006a1e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
//  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 8005174:	2200      	movs	r2, #0
 8005176:	f240 4103 	movw	r1, #1027	@ 0x403
 800517a:	4805      	ldr	r0, [pc, #20]	@ (8005190 <MX_GPIO_Init+0x1d8>)
 800517c:	f001 fc4f 	bl	8006a1e <HAL_GPIO_WritePin>

}
 8005180:	bf00      	nop
 8005182:	3728      	adds	r7, #40	@ 0x28
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	40021000 	.word	0x40021000
 800518c:	40011800 	.word	0x40011800
 8005190:	40011000 	.word	0x40011000
 8005194:	40010c00 	.word	0x40010c00
 8005198:	40010800 	.word	0x40010800

0800519c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80051a0:	f000 fde8 	bl	8005d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80051a4:	f000 f812 	bl	80051cc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80051a8:	f000 fa48 	bl	800563c <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 80051ac:	f000 f8b6 	bl	800531c <_ZL12MX_SPI1_Initv>
  MX_USART1_UART_Init();
 80051b0:	f000 fa16 	bl	80055e0 <_ZL19MX_USART1_UART_Initv>
  MX_ADC1_Init();
 80051b4:	f000 f86a 	bl	800528c <_ZL12MX_ADC1_Initv>
  MX_TIM1_Init();
 80051b8:	f000 f8ec 	bl	8005394 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 80051bc:	f000 f982 	bl	80054c4 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */
	IncializaSistema();
 80051c0:	f7ff fe90 	bl	8004ee4 <_Z16IncializaSistemav>
	EjecutaSistema();
 80051c4:	f7ff feb2 	bl	8004f2c <_Z14EjecutaSistemav>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80051c8:	bf00      	nop
 80051ca:	e7fd      	b.n	80051c8 <main+0x2c>

080051cc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b094      	sub	sp, #80	@ 0x50
 80051d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80051d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80051d6:	2228      	movs	r2, #40	@ 0x28
 80051d8:	2100      	movs	r1, #0
 80051da:	4618      	mov	r0, r3
 80051dc:	f004 fa2b 	bl	8009636 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80051e0:	f107 0314 	add.w	r3, r7, #20
 80051e4:	2200      	movs	r2, #0
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	605a      	str	r2, [r3, #4]
 80051ea:	609a      	str	r2, [r3, #8]
 80051ec:	60da      	str	r2, [r3, #12]
 80051ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80051f0:	1d3b      	adds	r3, r7, #4
 80051f2:	2200      	movs	r2, #0
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	605a      	str	r2, [r3, #4]
 80051f8:	609a      	str	r2, [r3, #8]
 80051fa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80051fc:	2302      	movs	r3, #2
 80051fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005200:	2301      	movs	r3, #1
 8005202:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005204:	2310      	movs	r3, #16
 8005206:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005208:	2300      	movs	r3, #0
 800520a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800520c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005210:	4618      	mov	r0, r3
 8005212:	f001 fc35 	bl	8006a80 <HAL_RCC_OscConfig>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	bf14      	ite	ne
 800521c:	2301      	movne	r3, #1
 800521e:	2300      	moveq	r3, #0
 8005220:	b2db      	uxtb	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <_Z18SystemClock_Configv+0x5e>
  {
    Error_Handler();
 8005226:	f000 fa9d 	bl	8005764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800522a:	230f      	movs	r3, #15
 800522c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800522e:	2300      	movs	r3, #0
 8005230:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005232:	2300      	movs	r3, #0
 8005234:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005236:	2300      	movs	r3, #0
 8005238:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800523a:	2300      	movs	r3, #0
 800523c:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800523e:	f107 0314 	add.w	r3, r7, #20
 8005242:	2100      	movs	r1, #0
 8005244:	4618      	mov	r0, r3
 8005246:	f001 fe9d 	bl	8006f84 <HAL_RCC_ClockConfig>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	bf14      	ite	ne
 8005250:	2301      	movne	r3, #1
 8005252:	2300      	moveq	r3, #0
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <_Z18SystemClock_Configv+0x92>
  {
    Error_Handler();
 800525a:	f000 fa83 	bl	8005764 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800525e:	2302      	movs	r3, #2
 8005260:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8005262:	2300      	movs	r3, #0
 8005264:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005266:	1d3b      	adds	r3, r7, #4
 8005268:	4618      	mov	r0, r3
 800526a:	f002 f819 	bl	80072a0 <HAL_RCCEx_PeriphCLKConfig>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	bf14      	ite	ne
 8005274:	2301      	movne	r3, #1
 8005276:	2300      	moveq	r3, #0
 8005278:	b2db      	uxtb	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 800527e:	f000 fa71 	bl	8005764 <Error_Handler>
  }
}
 8005282:	bf00      	nop
 8005284:	3750      	adds	r7, #80	@ 0x50
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
	...

0800528c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005292:	1d3b      	adds	r3, r7, #4
 8005294:	2200      	movs	r2, #0
 8005296:	601a      	str	r2, [r3, #0]
 8005298:	605a      	str	r2, [r3, #4]
 800529a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800529c:	4b1d      	ldr	r3, [pc, #116]	@ (8005314 <_ZL12MX_ADC1_Initv+0x88>)
 800529e:	4a1e      	ldr	r2, [pc, #120]	@ (8005318 <_ZL12MX_ADC1_Initv+0x8c>)
 80052a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80052a2:	4b1c      	ldr	r3, [pc, #112]	@ (8005314 <_ZL12MX_ADC1_Initv+0x88>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80052a8:	4b1a      	ldr	r3, [pc, #104]	@ (8005314 <_ZL12MX_ADC1_Initv+0x88>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80052ae:	4b19      	ldr	r3, [pc, #100]	@ (8005314 <_ZL12MX_ADC1_Initv+0x88>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80052b4:	4b17      	ldr	r3, [pc, #92]	@ (8005314 <_ZL12MX_ADC1_Initv+0x88>)
 80052b6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80052ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80052bc:	4b15      	ldr	r3, [pc, #84]	@ (8005314 <_ZL12MX_ADC1_Initv+0x88>)
 80052be:	2200      	movs	r2, #0
 80052c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80052c2:	4b14      	ldr	r3, [pc, #80]	@ (8005314 <_ZL12MX_ADC1_Initv+0x88>)
 80052c4:	2201      	movs	r2, #1
 80052c6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80052c8:	4812      	ldr	r0, [pc, #72]	@ (8005314 <_ZL12MX_ADC1_Initv+0x88>)
 80052ca:	f000 fdd9 	bl	8005e80 <HAL_ADC_Init>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	bf14      	ite	ne
 80052d4:	2301      	movne	r3, #1
 80052d6:	2300      	moveq	r3, #0
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <_ZL12MX_ADC1_Initv+0x56>
  {
    Error_Handler();
 80052de:	f000 fa41 	bl	8005764 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80052e2:	2303      	movs	r3, #3
 80052e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80052e6:	2301      	movs	r3, #1
 80052e8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80052ea:	2300      	movs	r3, #0
 80052ec:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80052ee:	1d3b      	adds	r3, r7, #4
 80052f0:	4619      	mov	r1, r3
 80052f2:	4808      	ldr	r0, [pc, #32]	@ (8005314 <_ZL12MX_ADC1_Initv+0x88>)
 80052f4:	f000 ff56 	bl	80061a4 <HAL_ADC_ConfigChannel>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	bf14      	ite	ne
 80052fe:	2301      	movne	r3, #1
 8005300:	2300      	moveq	r3, #0
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	d001      	beq.n	800530c <_ZL12MX_ADC1_Initv+0x80>
  {
    Error_Handler();
 8005308:	f000 fa2c 	bl	8005764 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800530c:	bf00      	nop
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	20000240 	.word	0x20000240
 8005318:	40012400 	.word	0x40012400

0800531c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005320:	4b1a      	ldr	r3, [pc, #104]	@ (800538c <_ZL12MX_SPI1_Initv+0x70>)
 8005322:	4a1b      	ldr	r2, [pc, #108]	@ (8005390 <_ZL12MX_SPI1_Initv+0x74>)
 8005324:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005326:	4b19      	ldr	r3, [pc, #100]	@ (800538c <_ZL12MX_SPI1_Initv+0x70>)
 8005328:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800532c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800532e:	4b17      	ldr	r3, [pc, #92]	@ (800538c <_ZL12MX_SPI1_Initv+0x70>)
 8005330:	2200      	movs	r2, #0
 8005332:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005334:	4b15      	ldr	r3, [pc, #84]	@ (800538c <_ZL12MX_SPI1_Initv+0x70>)
 8005336:	2200      	movs	r2, #0
 8005338:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800533a:	4b14      	ldr	r3, [pc, #80]	@ (800538c <_ZL12MX_SPI1_Initv+0x70>)
 800533c:	2200      	movs	r2, #0
 800533e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005340:	4b12      	ldr	r3, [pc, #72]	@ (800538c <_ZL12MX_SPI1_Initv+0x70>)
 8005342:	2200      	movs	r2, #0
 8005344:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005346:	4b11      	ldr	r3, [pc, #68]	@ (800538c <_ZL12MX_SPI1_Initv+0x70>)
 8005348:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800534c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800534e:	4b0f      	ldr	r3, [pc, #60]	@ (800538c <_ZL12MX_SPI1_Initv+0x70>)
 8005350:	2200      	movs	r2, #0
 8005352:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005354:	4b0d      	ldr	r3, [pc, #52]	@ (800538c <_ZL12MX_SPI1_Initv+0x70>)
 8005356:	2200      	movs	r2, #0
 8005358:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800535a:	4b0c      	ldr	r3, [pc, #48]	@ (800538c <_ZL12MX_SPI1_Initv+0x70>)
 800535c:	2200      	movs	r2, #0
 800535e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005360:	4b0a      	ldr	r3, [pc, #40]	@ (800538c <_ZL12MX_SPI1_Initv+0x70>)
 8005362:	2200      	movs	r2, #0
 8005364:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005366:	4b09      	ldr	r3, [pc, #36]	@ (800538c <_ZL12MX_SPI1_Initv+0x70>)
 8005368:	220a      	movs	r2, #10
 800536a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800536c:	4807      	ldr	r0, [pc, #28]	@ (800538c <_ZL12MX_SPI1_Initv+0x70>)
 800536e:	f002 f84d 	bl	800740c <HAL_SPI_Init>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	bf14      	ite	ne
 8005378:	2301      	movne	r3, #1
 800537a:	2300      	moveq	r3, #0
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8005382:	f000 f9ef 	bl	8005764 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005386:	bf00      	nop
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	20000270 	.word	0x20000270
 8005390:	40013000 	.word	0x40013000

08005394 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b092      	sub	sp, #72	@ 0x48
 8005398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800539a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800539e:	2200      	movs	r2, #0
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80053a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80053a8:	2200      	movs	r2, #0
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	605a      	str	r2, [r3, #4]
 80053ae:	609a      	str	r2, [r3, #8]
 80053b0:	60da      	str	r2, [r3, #12]
 80053b2:	611a      	str	r2, [r3, #16]
 80053b4:	615a      	str	r2, [r3, #20]
 80053b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80053b8:	1d3b      	adds	r3, r7, #4
 80053ba:	2220      	movs	r2, #32
 80053bc:	2100      	movs	r1, #0
 80053be:	4618      	mov	r0, r3
 80053c0:	f004 f939 	bl	8009636 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80053c4:	4b3d      	ldr	r3, [pc, #244]	@ (80054bc <_ZL12MX_TIM1_Initv+0x128>)
 80053c6:	4a3e      	ldr	r2, [pc, #248]	@ (80054c0 <_ZL12MX_TIM1_Initv+0x12c>)
 80053c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80053ca:	4b3c      	ldr	r3, [pc, #240]	@ (80054bc <_ZL12MX_TIM1_Initv+0x128>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053d0:	4b3a      	ldr	r3, [pc, #232]	@ (80054bc <_ZL12MX_TIM1_Initv+0x128>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80053d6:	4b39      	ldr	r3, [pc, #228]	@ (80054bc <_ZL12MX_TIM1_Initv+0x128>)
 80053d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80053dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053de:	4b37      	ldr	r3, [pc, #220]	@ (80054bc <_ZL12MX_TIM1_Initv+0x128>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80053e4:	4b35      	ldr	r3, [pc, #212]	@ (80054bc <_ZL12MX_TIM1_Initv+0x128>)
 80053e6:	2200      	movs	r2, #0
 80053e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053ea:	4b34      	ldr	r3, [pc, #208]	@ (80054bc <_ZL12MX_TIM1_Initv+0x128>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80053f0:	4832      	ldr	r0, [pc, #200]	@ (80054bc <_ZL12MX_TIM1_Initv+0x128>)
 80053f2:	f002 fac8 	bl	8007986 <HAL_TIM_PWM_Init>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	bf14      	ite	ne
 80053fc:	2301      	movne	r3, #1
 80053fe:	2300      	moveq	r3, #0
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 8005406:	f000 f9ad 	bl	8005764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800540a:	2300      	movs	r3, #0
 800540c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800540e:	2300      	movs	r3, #0
 8005410:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005412:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005416:	4619      	mov	r1, r3
 8005418:	4828      	ldr	r0, [pc, #160]	@ (80054bc <_ZL12MX_TIM1_Initv+0x128>)
 800541a:	f003 f907 	bl	800862c <HAL_TIMEx_MasterConfigSynchronization>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	bf14      	ite	ne
 8005424:	2301      	movne	r3, #1
 8005426:	2300      	moveq	r3, #0
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 800542e:	f000 f999 	bl	8005764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005432:	2360      	movs	r3, #96	@ 0x60
 8005434:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8005436:	2300      	movs	r3, #0
 8005438:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800543a:	2300      	movs	r3, #0
 800543c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800543e:	2300      	movs	r3, #0
 8005440:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005442:	2300      	movs	r3, #0
 8005444:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005446:	2300      	movs	r3, #0
 8005448:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800544a:	2300      	movs	r3, #0
 800544c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800544e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005452:	2200      	movs	r2, #0
 8005454:	4619      	mov	r1, r3
 8005456:	4819      	ldr	r0, [pc, #100]	@ (80054bc <_ZL12MX_TIM1_Initv+0x128>)
 8005458:	f002 fc8e 	bl	8007d78 <HAL_TIM_PWM_ConfigChannel>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	bf14      	ite	ne
 8005462:	2301      	movne	r3, #1
 8005464:	2300      	moveq	r3, #0
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	d001      	beq.n	8005470 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 800546c:	f000 f97a 	bl	8005764 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005470:	2300      	movs	r3, #0
 8005472:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005474:	2300      	movs	r3, #0
 8005476:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005478:	2300      	movs	r3, #0
 800547a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800547c:	2300      	movs	r3, #0
 800547e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005480:	2300      	movs	r3, #0
 8005482:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005484:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005488:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800548a:	2300      	movs	r3, #0
 800548c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800548e:	1d3b      	adds	r3, r7, #4
 8005490:	4619      	mov	r1, r3
 8005492:	480a      	ldr	r0, [pc, #40]	@ (80054bc <_ZL12MX_TIM1_Initv+0x128>)
 8005494:	f003 f928 	bl	80086e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	bf14      	ite	ne
 800549e:	2301      	movne	r3, #1
 80054a0:	2300      	moveq	r3, #0
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <_ZL12MX_TIM1_Initv+0x118>
  {
    Error_Handler();
 80054a8:	f000 f95c 	bl	8005764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80054ac:	4803      	ldr	r0, [pc, #12]	@ (80054bc <_ZL12MX_TIM1_Initv+0x128>)
 80054ae:	f000 fa83 	bl	80059b8 <HAL_TIM_MspPostInit>

}
 80054b2:	bf00      	nop
 80054b4:	3748      	adds	r7, #72	@ 0x48
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	200002c8 	.word	0x200002c8
 80054c0:	40012c00 	.word	0x40012c00

080054c4 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b08e      	sub	sp, #56	@ 0x38
 80054c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80054ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80054ce:	2200      	movs	r2, #0
 80054d0:	601a      	str	r2, [r3, #0]
 80054d2:	605a      	str	r2, [r3, #4]
 80054d4:	609a      	str	r2, [r3, #8]
 80054d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054d8:	f107 0320 	add.w	r3, r7, #32
 80054dc:	2200      	movs	r2, #0
 80054de:	601a      	str	r2, [r3, #0]
 80054e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80054e2:	1d3b      	adds	r3, r7, #4
 80054e4:	2200      	movs	r2, #0
 80054e6:	601a      	str	r2, [r3, #0]
 80054e8:	605a      	str	r2, [r3, #4]
 80054ea:	609a      	str	r2, [r3, #8]
 80054ec:	60da      	str	r2, [r3, #12]
 80054ee:	611a      	str	r2, [r3, #16]
 80054f0:	615a      	str	r2, [r3, #20]
 80054f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80054f4:	4b39      	ldr	r3, [pc, #228]	@ (80055dc <_ZL12MX_TIM2_Initv+0x118>)
 80054f6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80054fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80054fc:	4b37      	ldr	r3, [pc, #220]	@ (80055dc <_ZL12MX_TIM2_Initv+0x118>)
 80054fe:	2200      	movs	r2, #0
 8005500:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005502:	4b36      	ldr	r3, [pc, #216]	@ (80055dc <_ZL12MX_TIM2_Initv+0x118>)
 8005504:	2200      	movs	r2, #0
 8005506:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8005508:	4b34      	ldr	r3, [pc, #208]	@ (80055dc <_ZL12MX_TIM2_Initv+0x118>)
 800550a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800550e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005510:	4b32      	ldr	r3, [pc, #200]	@ (80055dc <_ZL12MX_TIM2_Initv+0x118>)
 8005512:	2200      	movs	r2, #0
 8005514:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005516:	4b31      	ldr	r3, [pc, #196]	@ (80055dc <_ZL12MX_TIM2_Initv+0x118>)
 8005518:	2280      	movs	r2, #128	@ 0x80
 800551a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800551c:	482f      	ldr	r0, [pc, #188]	@ (80055dc <_ZL12MX_TIM2_Initv+0x118>)
 800551e:	f002 f9e3 	bl	80078e8 <HAL_TIM_Base_Init>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	bf14      	ite	ne
 8005528:	2301      	movne	r3, #1
 800552a:	2300      	moveq	r3, #0
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 8005532:	f000 f917 	bl	8005764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005536:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800553a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800553c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005540:	4619      	mov	r1, r3
 8005542:	4826      	ldr	r0, [pc, #152]	@ (80055dc <_ZL12MX_TIM2_Initv+0x118>)
 8005544:	f002 fcda 	bl	8007efc <HAL_TIM_ConfigClockSource>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	bf14      	ite	ne
 800554e:	2301      	movne	r3, #1
 8005550:	2300      	moveq	r3, #0
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b00      	cmp	r3, #0
 8005556:	d001      	beq.n	800555c <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 8005558:	f000 f904 	bl	8005764 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800555c:	481f      	ldr	r0, [pc, #124]	@ (80055dc <_ZL12MX_TIM2_Initv+0x118>)
 800555e:	f002 fa12 	bl	8007986 <HAL_TIM_PWM_Init>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	bf14      	ite	ne
 8005568:	2301      	movne	r3, #1
 800556a:	2300      	moveq	r3, #0
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 8005572:	f000 f8f7 	bl	8005764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005576:	2300      	movs	r3, #0
 8005578:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800557a:	2300      	movs	r3, #0
 800557c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800557e:	f107 0320 	add.w	r3, r7, #32
 8005582:	4619      	mov	r1, r3
 8005584:	4815      	ldr	r0, [pc, #84]	@ (80055dc <_ZL12MX_TIM2_Initv+0x118>)
 8005586:	f003 f851 	bl	800862c <HAL_TIMEx_MasterConfigSynchronization>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	bf14      	ite	ne
 8005590:	2301      	movne	r3, #1
 8005592:	2300      	moveq	r3, #0
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 800559a:	f000 f8e3 	bl	8005764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800559e:	2360      	movs	r3, #96	@ 0x60
 80055a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80055a2:	2300      	movs	r3, #0
 80055a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80055a6:	2300      	movs	r3, #0
 80055a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80055aa:	2300      	movs	r3, #0
 80055ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80055ae:	1d3b      	adds	r3, r7, #4
 80055b0:	2200      	movs	r2, #0
 80055b2:	4619      	mov	r1, r3
 80055b4:	4809      	ldr	r0, [pc, #36]	@ (80055dc <_ZL12MX_TIM2_Initv+0x118>)
 80055b6:	f002 fbdf 	bl	8007d78 <HAL_TIM_PWM_ConfigChannel>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	bf14      	ite	ne
 80055c0:	2301      	movne	r3, #1
 80055c2:	2300      	moveq	r3, #0
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <_ZL12MX_TIM2_Initv+0x10a>
  {
    Error_Handler();
 80055ca:	f000 f8cb 	bl	8005764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80055ce:	4803      	ldr	r0, [pc, #12]	@ (80055dc <_ZL12MX_TIM2_Initv+0x118>)
 80055d0:	f000 f9f2 	bl	80059b8 <HAL_TIM_MspPostInit>

}
 80055d4:	bf00      	nop
 80055d6:	3738      	adds	r7, #56	@ 0x38
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	20000310 	.word	0x20000310

080055e0 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80055e4:	4b13      	ldr	r3, [pc, #76]	@ (8005634 <_ZL19MX_USART1_UART_Initv+0x54>)
 80055e6:	4a14      	ldr	r2, [pc, #80]	@ (8005638 <_ZL19MX_USART1_UART_Initv+0x58>)
 80055e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80055ea:	4b12      	ldr	r3, [pc, #72]	@ (8005634 <_ZL19MX_USART1_UART_Initv+0x54>)
 80055ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80055f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80055f2:	4b10      	ldr	r3, [pc, #64]	@ (8005634 <_ZL19MX_USART1_UART_Initv+0x54>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80055f8:	4b0e      	ldr	r3, [pc, #56]	@ (8005634 <_ZL19MX_USART1_UART_Initv+0x54>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80055fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005634 <_ZL19MX_USART1_UART_Initv+0x54>)
 8005600:	2200      	movs	r2, #0
 8005602:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005604:	4b0b      	ldr	r3, [pc, #44]	@ (8005634 <_ZL19MX_USART1_UART_Initv+0x54>)
 8005606:	220c      	movs	r2, #12
 8005608:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800560a:	4b0a      	ldr	r3, [pc, #40]	@ (8005634 <_ZL19MX_USART1_UART_Initv+0x54>)
 800560c:	2200      	movs	r2, #0
 800560e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005610:	4b08      	ldr	r3, [pc, #32]	@ (8005634 <_ZL19MX_USART1_UART_Initv+0x54>)
 8005612:	2200      	movs	r2, #0
 8005614:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005616:	4807      	ldr	r0, [pc, #28]	@ (8005634 <_ZL19MX_USART1_UART_Initv+0x54>)
 8005618:	f003 f8c9 	bl	80087ae <HAL_UART_Init>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	bf14      	ite	ne
 8005622:	2301      	movne	r3, #1
 8005624:	2300      	moveq	r3, #0
 8005626:	b2db      	uxtb	r3, r3
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 800562c:	f000 f89a 	bl	8005764 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005630:	bf00      	nop
 8005632:	bd80      	pop	{r7, pc}
 8005634:	20000358 	.word	0x20000358
 8005638:	40013800 	.word	0x40013800

0800563c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005642:	f107 0308 	add.w	r3, r7, #8
 8005646:	2200      	movs	r2, #0
 8005648:	601a      	str	r2, [r3, #0]
 800564a:	605a      	str	r2, [r3, #4]
 800564c:	609a      	str	r2, [r3, #8]
 800564e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005650:	4b40      	ldr	r3, [pc, #256]	@ (8005754 <_ZL12MX_GPIO_Initv+0x118>)
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	4a3f      	ldr	r2, [pc, #252]	@ (8005754 <_ZL12MX_GPIO_Initv+0x118>)
 8005656:	f043 0304 	orr.w	r3, r3, #4
 800565a:	6193      	str	r3, [r2, #24]
 800565c:	4b3d      	ldr	r3, [pc, #244]	@ (8005754 <_ZL12MX_GPIO_Initv+0x118>)
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	f003 0304 	and.w	r3, r3, #4
 8005664:	607b      	str	r3, [r7, #4]
 8005666:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005668:	4b3a      	ldr	r3, [pc, #232]	@ (8005754 <_ZL12MX_GPIO_Initv+0x118>)
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	4a39      	ldr	r2, [pc, #228]	@ (8005754 <_ZL12MX_GPIO_Initv+0x118>)
 800566e:	f043 0308 	orr.w	r3, r3, #8
 8005672:	6193      	str	r3, [r2, #24]
 8005674:	4b37      	ldr	r3, [pc, #220]	@ (8005754 <_ZL12MX_GPIO_Initv+0x118>)
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	f003 0308 	and.w	r3, r3, #8
 800567c:	603b      	str	r3, [r7, #0]
 800567e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8005680:	2200      	movs	r2, #0
 8005682:	2106      	movs	r1, #6
 8005684:	4834      	ldr	r0, [pc, #208]	@ (8005758 <_ZL12MX_GPIO_Initv+0x11c>)
 8005686:	f001 f9ca 	bl	8006a1e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Display_DC_GPIO_Port, Display_DC_Pin, GPIO_PIN_RESET);
 800568a:	2200      	movs	r2, #0
 800568c:	2102      	movs	r1, #2
 800568e:	4833      	ldr	r0, [pc, #204]	@ (800575c <_ZL12MX_GPIO_Initv+0x120>)
 8005690:	f001 f9c5 	bl	8006a1e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_SET);
 8005694:	2201      	movs	r2, #1
 8005696:	2118      	movs	r1, #24
 8005698:	4830      	ldr	r0, [pc, #192]	@ (800575c <_ZL12MX_GPIO_Initv+0x120>)
 800569a:	f001 f9c0 	bl	8006a1e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 Btn1_Pin PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|Btn1_Pin|GPIO_PIN_6;
 800569e:	2351      	movs	r3, #81	@ 0x51
 80056a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80056a2:	2300      	movs	r3, #0
 80056a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056a6:	2300      	movs	r3, #0
 80056a8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056aa:	f107 0308 	add.w	r3, r7, #8
 80056ae:	4619      	mov	r1, r3
 80056b0:	4829      	ldr	r0, [pc, #164]	@ (8005758 <_ZL12MX_GPIO_Initv+0x11c>)
 80056b2:	f001 f819 	bl	80066e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80056b6:	2306      	movs	r3, #6
 80056b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80056ba:	2301      	movs	r3, #1
 80056bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056be:	2300      	movs	r3, #0
 80056c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056c2:	2302      	movs	r3, #2
 80056c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056c6:	f107 0308 	add.w	r3, r7, #8
 80056ca:	4619      	mov	r1, r3
 80056cc:	4822      	ldr	r0, [pc, #136]	@ (8005758 <_ZL12MX_GPIO_Initv+0x11c>)
 80056ce:	f001 f80b 	bl	80066e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Display_DC_Pin PB3 PB4 */
  GPIO_InitStruct.Pin = Display_DC_Pin|GPIO_PIN_3|GPIO_PIN_4;
 80056d2:	231a      	movs	r3, #26
 80056d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80056d6:	2301      	movs	r3, #1
 80056d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056da:	2300      	movs	r3, #0
 80056dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056de:	2302      	movs	r3, #2
 80056e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056e2:	f107 0308 	add.w	r3, r7, #8
 80056e6:	4619      	mov	r1, r3
 80056e8:	481c      	ldr	r0, [pc, #112]	@ (800575c <_ZL12MX_GPIO_Initv+0x120>)
 80056ea:	f000 fffd 	bl	80066e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80056ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80056f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80056f4:	2300      	movs	r3, #0
 80056f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056f8:	2300      	movs	r3, #0
 80056fa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056fc:	f107 0308 	add.w	r3, r7, #8
 8005700:	4619      	mov	r1, r3
 8005702:	4816      	ldr	r0, [pc, #88]	@ (800575c <_ZL12MX_GPIO_Initv+0x120>)
 8005704:	f000 fff0 	bl	80066e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : EncoderClk_Pin */
  GPIO_InitStruct.Pin = EncoderClk_Pin;
 8005708:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800570c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800570e:	4b14      	ldr	r3, [pc, #80]	@ (8005760 <_ZL12MX_GPIO_Initv+0x124>)
 8005710:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005712:	2300      	movs	r3, #0
 8005714:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(EncoderClk_GPIO_Port, &GPIO_InitStruct);
 8005716:	f107 0308 	add.w	r3, r7, #8
 800571a:	4619      	mov	r1, r3
 800571c:	480f      	ldr	r0, [pc, #60]	@ (800575c <_ZL12MX_GPIO_Initv+0x120>)
 800571e:	f000 ffe3 	bl	80066e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005722:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005726:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005728:	2300      	movs	r3, #0
 800572a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800572c:	2301      	movs	r3, #1
 800572e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005730:	f107 0308 	add.w	r3, r7, #8
 8005734:	4619      	mov	r1, r3
 8005736:	4809      	ldr	r0, [pc, #36]	@ (800575c <_ZL12MX_GPIO_Initv+0x120>)
 8005738:	f000 ffd6 	bl	80066e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800573c:	2200      	movs	r2, #0
 800573e:	2100      	movs	r1, #0
 8005740:	2028      	movs	r0, #40	@ 0x28
 8005742:	f000 ff9a 	bl	800667a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005746:	2028      	movs	r0, #40	@ 0x28
 8005748:	f000 ffb3 	bl	80066b2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800574c:	bf00      	nop
 800574e:	3718      	adds	r7, #24
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	40021000 	.word	0x40021000
 8005758:	40010800 	.word	0x40010800
 800575c:	40010c00 	.word	0x40010c00
 8005760:	10310000 	.word	0x10310000

08005764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005764:	b480      	push	{r7}
 8005766:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005768:	b672      	cpsid	i
}
 800576a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800576c:	bf00      	nop
 800576e:	e7fd      	b.n	800576c <Error_Handler+0x8>

08005770 <SPI1_Init>:

SPI_HandleTypeDef Hspi;

/* SPI5 init function */
void SPI1_Init(void)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	af00      	add	r7, sp, #0
	Hspi.Instance = SPI1;
 8005774:	4b17      	ldr	r3, [pc, #92]	@ (80057d4 <SPI1_Init+0x64>)
 8005776:	4a18      	ldr	r2, [pc, #96]	@ (80057d8 <SPI1_Init+0x68>)
 8005778:	601a      	str	r2, [r3, #0]
	Hspi.Init.Mode = SPI_MODE_MASTER;
 800577a:	4b16      	ldr	r3, [pc, #88]	@ (80057d4 <SPI1_Init+0x64>)
 800577c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005780:	605a      	str	r2, [r3, #4]
	Hspi.Init.Direction = SPI_DIRECTION_2LINES;
 8005782:	4b14      	ldr	r3, [pc, #80]	@ (80057d4 <SPI1_Init+0x64>)
 8005784:	2200      	movs	r2, #0
 8005786:	609a      	str	r2, [r3, #8]
	Hspi.Init.DataSize = SPI_DATASIZE_8BIT;
 8005788:	4b12      	ldr	r3, [pc, #72]	@ (80057d4 <SPI1_Init+0x64>)
 800578a:	2200      	movs	r2, #0
 800578c:	60da      	str	r2, [r3, #12]
	Hspi.Init.CLKPolarity = SPI_POLARITY_LOW;
 800578e:	4b11      	ldr	r3, [pc, #68]	@ (80057d4 <SPI1_Init+0x64>)
 8005790:	2200      	movs	r2, #0
 8005792:	611a      	str	r2, [r3, #16]
	Hspi.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005794:	4b0f      	ldr	r3, [pc, #60]	@ (80057d4 <SPI1_Init+0x64>)
 8005796:	2200      	movs	r2, #0
 8005798:	615a      	str	r2, [r3, #20]
	Hspi.Init.NSS = SPI_NSS_SOFT;
 800579a:	4b0e      	ldr	r3, [pc, #56]	@ (80057d4 <SPI1_Init+0x64>)
 800579c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057a0:	619a      	str	r2, [r3, #24]
	Hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057a2:	4b0c      	ldr	r3, [pc, #48]	@ (80057d4 <SPI1_Init+0x64>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	61da      	str	r2, [r3, #28]
	Hspi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80057a8:	4b0a      	ldr	r3, [pc, #40]	@ (80057d4 <SPI1_Init+0x64>)
 80057aa:	2200      	movs	r2, #0
 80057ac:	621a      	str	r2, [r3, #32]
	Hspi.Init.TIMode = SPI_TIMODE_DISABLE;
 80057ae:	4b09      	ldr	r3, [pc, #36]	@ (80057d4 <SPI1_Init+0x64>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	625a      	str	r2, [r3, #36]	@ 0x24
	Hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057b4:	4b07      	ldr	r3, [pc, #28]	@ (80057d4 <SPI1_Init+0x64>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	629a      	str	r2, [r3, #40]	@ 0x28
	Hspi.Init.CRCPolynomial = 7;
 80057ba:	4b06      	ldr	r3, [pc, #24]	@ (80057d4 <SPI1_Init+0x64>)
 80057bc:	2207      	movs	r2, #7
 80057be:	62da      	str	r2, [r3, #44]	@ 0x2c
//  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
//  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  if (HAL_SPI_Init(&Hspi) != HAL_OK)
 80057c0:	4804      	ldr	r0, [pc, #16]	@ (80057d4 <SPI1_Init+0x64>)
 80057c2:	f001 fe23 	bl	800740c <HAL_SPI_Init>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d001      	beq.n	80057d0 <SPI1_Init+0x60>
  {
    Error_Handler();
 80057cc:	f7ff ffca 	bl	8005764 <Error_Handler>
  }

}
 80057d0:	bf00      	nop
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	200003a0 	.word	0x200003a0
 80057d8:	40013000 	.word	0x40013000

080057dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80057e2:	4b15      	ldr	r3, [pc, #84]	@ (8005838 <HAL_MspInit+0x5c>)
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	4a14      	ldr	r2, [pc, #80]	@ (8005838 <HAL_MspInit+0x5c>)
 80057e8:	f043 0301 	orr.w	r3, r3, #1
 80057ec:	6193      	str	r3, [r2, #24]
 80057ee:	4b12      	ldr	r3, [pc, #72]	@ (8005838 <HAL_MspInit+0x5c>)
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	60bb      	str	r3, [r7, #8]
 80057f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80057fa:	4b0f      	ldr	r3, [pc, #60]	@ (8005838 <HAL_MspInit+0x5c>)
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	4a0e      	ldr	r2, [pc, #56]	@ (8005838 <HAL_MspInit+0x5c>)
 8005800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005804:	61d3      	str	r3, [r2, #28]
 8005806:	4b0c      	ldr	r3, [pc, #48]	@ (8005838 <HAL_MspInit+0x5c>)
 8005808:	69db      	ldr	r3, [r3, #28]
 800580a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800580e:	607b      	str	r3, [r7, #4]
 8005810:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005812:	4b0a      	ldr	r3, [pc, #40]	@ (800583c <HAL_MspInit+0x60>)
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	60fb      	str	r3, [r7, #12]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800581e:	60fb      	str	r3, [r7, #12]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005826:	60fb      	str	r3, [r7, #12]
 8005828:	4a04      	ldr	r2, [pc, #16]	@ (800583c <HAL_MspInit+0x60>)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800582e:	bf00      	nop
 8005830:	3714      	adds	r7, #20
 8005832:	46bd      	mov	sp, r7
 8005834:	bc80      	pop	{r7}
 8005836:	4770      	bx	lr
 8005838:	40021000 	.word	0x40021000
 800583c:	40010000 	.word	0x40010000

08005840 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b088      	sub	sp, #32
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005848:	f107 0310 	add.w	r3, r7, #16
 800584c:	2200      	movs	r2, #0
 800584e:	601a      	str	r2, [r3, #0]
 8005850:	605a      	str	r2, [r3, #4]
 8005852:	609a      	str	r2, [r3, #8]
 8005854:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a14      	ldr	r2, [pc, #80]	@ (80058ac <HAL_ADC_MspInit+0x6c>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d121      	bne.n	80058a4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005860:	4b13      	ldr	r3, [pc, #76]	@ (80058b0 <HAL_ADC_MspInit+0x70>)
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	4a12      	ldr	r2, [pc, #72]	@ (80058b0 <HAL_ADC_MspInit+0x70>)
 8005866:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800586a:	6193      	str	r3, [r2, #24]
 800586c:	4b10      	ldr	r3, [pc, #64]	@ (80058b0 <HAL_ADC_MspInit+0x70>)
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005874:	60fb      	str	r3, [r7, #12]
 8005876:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005878:	4b0d      	ldr	r3, [pc, #52]	@ (80058b0 <HAL_ADC_MspInit+0x70>)
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	4a0c      	ldr	r2, [pc, #48]	@ (80058b0 <HAL_ADC_MspInit+0x70>)
 800587e:	f043 0304 	orr.w	r3, r3, #4
 8005882:	6193      	str	r3, [r2, #24]
 8005884:	4b0a      	ldr	r3, [pc, #40]	@ (80058b0 <HAL_ADC_MspInit+0x70>)
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	f003 0304 	and.w	r3, r3, #4
 800588c:	60bb      	str	r3, [r7, #8]
 800588e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005890:	2308      	movs	r3, #8
 8005892:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005894:	2303      	movs	r3, #3
 8005896:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005898:	f107 0310 	add.w	r3, r7, #16
 800589c:	4619      	mov	r1, r3
 800589e:	4805      	ldr	r0, [pc, #20]	@ (80058b4 <HAL_ADC_MspInit+0x74>)
 80058a0:	f000 ff22 	bl	80066e8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80058a4:	bf00      	nop
 80058a6:	3720      	adds	r7, #32
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	40012400 	.word	0x40012400
 80058b0:	40021000 	.word	0x40021000
 80058b4:	40010800 	.word	0x40010800

080058b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b088      	sub	sp, #32
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058c0:	f107 0310 	add.w	r3, r7, #16
 80058c4:	2200      	movs	r2, #0
 80058c6:	601a      	str	r2, [r3, #0]
 80058c8:	605a      	str	r2, [r3, #4]
 80058ca:	609a      	str	r2, [r3, #8]
 80058cc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a15      	ldr	r2, [pc, #84]	@ (8005928 <HAL_SPI_MspInit+0x70>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d123      	bne.n	8005920 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80058d8:	4b14      	ldr	r3, [pc, #80]	@ (800592c <HAL_SPI_MspInit+0x74>)
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	4a13      	ldr	r2, [pc, #76]	@ (800592c <HAL_SPI_MspInit+0x74>)
 80058de:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80058e2:	6193      	str	r3, [r2, #24]
 80058e4:	4b11      	ldr	r3, [pc, #68]	@ (800592c <HAL_SPI_MspInit+0x74>)
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80058ec:	60fb      	str	r3, [r7, #12]
 80058ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058f0:	4b0e      	ldr	r3, [pc, #56]	@ (800592c <HAL_SPI_MspInit+0x74>)
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	4a0d      	ldr	r2, [pc, #52]	@ (800592c <HAL_SPI_MspInit+0x74>)
 80058f6:	f043 0304 	orr.w	r3, r3, #4
 80058fa:	6193      	str	r3, [r2, #24]
 80058fc:	4b0b      	ldr	r3, [pc, #44]	@ (800592c <HAL_SPI_MspInit+0x74>)
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	f003 0304 	and.w	r3, r3, #4
 8005904:	60bb      	str	r3, [r7, #8]
 8005906:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005908:	23a0      	movs	r3, #160	@ 0xa0
 800590a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800590c:	2302      	movs	r3, #2
 800590e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005910:	2303      	movs	r3, #3
 8005912:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005914:	f107 0310 	add.w	r3, r7, #16
 8005918:	4619      	mov	r1, r3
 800591a:	4805      	ldr	r0, [pc, #20]	@ (8005930 <HAL_SPI_MspInit+0x78>)
 800591c:	f000 fee4 	bl	80066e8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8005920:	bf00      	nop
 8005922:	3720      	adds	r7, #32
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	40013000 	.word	0x40013000
 800592c:	40021000 	.word	0x40021000
 8005930:	40010800 	.word	0x40010800

08005934 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a09      	ldr	r2, [pc, #36]	@ (8005968 <HAL_TIM_PWM_MspInit+0x34>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d10b      	bne.n	800595e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005946:	4b09      	ldr	r3, [pc, #36]	@ (800596c <HAL_TIM_PWM_MspInit+0x38>)
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	4a08      	ldr	r2, [pc, #32]	@ (800596c <HAL_TIM_PWM_MspInit+0x38>)
 800594c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005950:	6193      	str	r3, [r2, #24]
 8005952:	4b06      	ldr	r3, [pc, #24]	@ (800596c <HAL_TIM_PWM_MspInit+0x38>)
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800595a:	60fb      	str	r3, [r7, #12]
 800595c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800595e:	bf00      	nop
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	bc80      	pop	{r7}
 8005966:	4770      	bx	lr
 8005968:	40012c00 	.word	0x40012c00
 800596c:	40021000 	.word	0x40021000

08005970 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005980:	d113      	bne.n	80059aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005982:	4b0c      	ldr	r3, [pc, #48]	@ (80059b4 <HAL_TIM_Base_MspInit+0x44>)
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	4a0b      	ldr	r2, [pc, #44]	@ (80059b4 <HAL_TIM_Base_MspInit+0x44>)
 8005988:	f043 0301 	orr.w	r3, r3, #1
 800598c:	61d3      	str	r3, [r2, #28]
 800598e:	4b09      	ldr	r3, [pc, #36]	@ (80059b4 <HAL_TIM_Base_MspInit+0x44>)
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800599a:	2200      	movs	r2, #0
 800599c:	2100      	movs	r1, #0
 800599e:	201c      	movs	r0, #28
 80059a0:	f000 fe6b 	bl	800667a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80059a4:	201c      	movs	r0, #28
 80059a6:	f000 fe84 	bl	80066b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80059aa:	bf00      	nop
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	40021000 	.word	0x40021000

080059b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b08a      	sub	sp, #40	@ 0x28
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059c0:	f107 0314 	add.w	r3, r7, #20
 80059c4:	2200      	movs	r2, #0
 80059c6:	601a      	str	r2, [r3, #0]
 80059c8:	605a      	str	r2, [r3, #4]
 80059ca:	609a      	str	r2, [r3, #8]
 80059cc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a28      	ldr	r2, [pc, #160]	@ (8005a74 <HAL_TIM_MspPostInit+0xbc>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d119      	bne.n	8005a0c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059d8:	4b27      	ldr	r3, [pc, #156]	@ (8005a78 <HAL_TIM_MspPostInit+0xc0>)
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	4a26      	ldr	r2, [pc, #152]	@ (8005a78 <HAL_TIM_MspPostInit+0xc0>)
 80059de:	f043 0304 	orr.w	r3, r3, #4
 80059e2:	6193      	str	r3, [r2, #24]
 80059e4:	4b24      	ldr	r3, [pc, #144]	@ (8005a78 <HAL_TIM_MspPostInit+0xc0>)
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	f003 0304 	and.w	r3, r3, #4
 80059ec:	613b      	str	r3, [r7, #16]
 80059ee:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80059f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80059f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059f6:	2302      	movs	r3, #2
 80059f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059fa:	2302      	movs	r3, #2
 80059fc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059fe:	f107 0314 	add.w	r3, r7, #20
 8005a02:	4619      	mov	r1, r3
 8005a04:	481d      	ldr	r0, [pc, #116]	@ (8005a7c <HAL_TIM_MspPostInit+0xc4>)
 8005a06:	f000 fe6f 	bl	80066e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8005a0a:	e02f      	b.n	8005a6c <HAL_TIM_MspPostInit+0xb4>
  else if(htim->Instance==TIM2)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a14:	d12a      	bne.n	8005a6c <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a16:	4b18      	ldr	r3, [pc, #96]	@ (8005a78 <HAL_TIM_MspPostInit+0xc0>)
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	4a17      	ldr	r2, [pc, #92]	@ (8005a78 <HAL_TIM_MspPostInit+0xc0>)
 8005a1c:	f043 0304 	orr.w	r3, r3, #4
 8005a20:	6193      	str	r3, [r2, #24]
 8005a22:	4b15      	ldr	r3, [pc, #84]	@ (8005a78 <HAL_TIM_MspPostInit+0xc0>)
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	f003 0304 	and.w	r3, r3, #4
 8005a2a:	60fb      	str	r3, [r7, #12]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005a2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a34:	2302      	movs	r3, #2
 8005a36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a38:	2302      	movs	r3, #2
 8005a3a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a3c:	f107 0314 	add.w	r3, r7, #20
 8005a40:	4619      	mov	r1, r3
 8005a42:	480e      	ldr	r0, [pc, #56]	@ (8005a7c <HAL_TIM_MspPostInit+0xc4>)
 8005a44:	f000 fe50 	bl	80066e8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8005a48:	4b0d      	ldr	r3, [pc, #52]	@ (8005a80 <HAL_TIM_MspPostInit+0xc8>)
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a54:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a58:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8005a5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a64:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a66:	4a06      	ldr	r2, [pc, #24]	@ (8005a80 <HAL_TIM_MspPostInit+0xc8>)
 8005a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6a:	6053      	str	r3, [r2, #4]
}
 8005a6c:	bf00      	nop
 8005a6e:	3728      	adds	r7, #40	@ 0x28
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	40012c00 	.word	0x40012c00
 8005a78:	40021000 	.word	0x40021000
 8005a7c:	40010800 	.word	0x40010800
 8005a80:	40010000 	.word	0x40010000

08005a84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b088      	sub	sp, #32
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a8c:	f107 0310 	add.w	r3, r7, #16
 8005a90:	2200      	movs	r2, #0
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	605a      	str	r2, [r3, #4]
 8005a96:	609a      	str	r2, [r3, #8]
 8005a98:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8005b10 <HAL_UART_MspInit+0x8c>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d131      	bne.n	8005b08 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8005b14 <HAL_UART_MspInit+0x90>)
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	4a1a      	ldr	r2, [pc, #104]	@ (8005b14 <HAL_UART_MspInit+0x90>)
 8005aaa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005aae:	6193      	str	r3, [r2, #24]
 8005ab0:	4b18      	ldr	r3, [pc, #96]	@ (8005b14 <HAL_UART_MspInit+0x90>)
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ab8:	60fb      	str	r3, [r7, #12]
 8005aba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005abc:	4b15      	ldr	r3, [pc, #84]	@ (8005b14 <HAL_UART_MspInit+0x90>)
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	4a14      	ldr	r2, [pc, #80]	@ (8005b14 <HAL_UART_MspInit+0x90>)
 8005ac2:	f043 0304 	orr.w	r3, r3, #4
 8005ac6:	6193      	str	r3, [r2, #24]
 8005ac8:	4b12      	ldr	r3, [pc, #72]	@ (8005b14 <HAL_UART_MspInit+0x90>)
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	f003 0304 	and.w	r3, r3, #4
 8005ad0:	60bb      	str	r3, [r7, #8]
 8005ad2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005ad4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ad8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ada:	2302      	movs	r3, #2
 8005adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ae2:	f107 0310 	add.w	r3, r7, #16
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	480b      	ldr	r0, [pc, #44]	@ (8005b18 <HAL_UART_MspInit+0x94>)
 8005aea:	f000 fdfd 	bl	80066e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005aee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005af2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005af4:	2300      	movs	r3, #0
 8005af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005af8:	2300      	movs	r3, #0
 8005afa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005afc:	f107 0310 	add.w	r3, r7, #16
 8005b00:	4619      	mov	r1, r3
 8005b02:	4805      	ldr	r0, [pc, #20]	@ (8005b18 <HAL_UART_MspInit+0x94>)
 8005b04:	f000 fdf0 	bl	80066e8 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8005b08:	bf00      	nop
 8005b0a:	3720      	adds	r7, #32
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	40013800 	.word	0x40013800
 8005b14:	40021000 	.word	0x40021000
 8005b18:	40010800 	.word	0x40010800

08005b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005b20:	bf00      	nop
 8005b22:	e7fd      	b.n	8005b20 <NMI_Handler+0x4>

08005b24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b24:	b480      	push	{r7}
 8005b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b28:	bf00      	nop
 8005b2a:	e7fd      	b.n	8005b28 <HardFault_Handler+0x4>

08005b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b30:	bf00      	nop
 8005b32:	e7fd      	b.n	8005b30 <MemManage_Handler+0x4>

08005b34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b34:	b480      	push	{r7}
 8005b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b38:	bf00      	nop
 8005b3a:	e7fd      	b.n	8005b38 <BusFault_Handler+0x4>

08005b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b40:	bf00      	nop
 8005b42:	e7fd      	b.n	8005b40 <UsageFault_Handler+0x4>

08005b44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005b44:	b480      	push	{r7}
 8005b46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005b48:	bf00      	nop
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bc80      	pop	{r7}
 8005b4e:	4770      	bx	lr

08005b50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005b50:	b480      	push	{r7}
 8005b52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b54:	bf00      	nop
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bc80      	pop	{r7}
 8005b5a:	4770      	bx	lr

08005b5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005b60:	bf00      	nop
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bc80      	pop	{r7}
 8005b66:	4770      	bx	lr

08005b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005b6c:	f000 f948 	bl	8005e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005b70:	bf00      	nop
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005b78:	4802      	ldr	r0, [pc, #8]	@ (8005b84 <TIM2_IRQHandler+0x10>)
 8005b7a:	f001 fff5 	bl	8007b68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005b7e:	bf00      	nop
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	20000310 	.word	0x20000310

08005b88 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EncoderClk_Pin);
 8005b8c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005b90:	f000 ff5e 	bl	8006a50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005b94:	bf00      	nop
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	af00      	add	r7, sp, #0
  return 1;
 8005b9c:	2301      	movs	r3, #1
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bc80      	pop	{r7}
 8005ba4:	4770      	bx	lr

08005ba6 <_kill>:

int _kill(int pid, int sig)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b082      	sub	sp, #8
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
 8005bae:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005bb0:	f003 fde8 	bl	8009784 <__errno>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2216      	movs	r2, #22
 8005bb8:	601a      	str	r2, [r3, #0]
  return -1;
 8005bba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <_exit>:

void _exit (int status)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b082      	sub	sp, #8
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005bce:	f04f 31ff 	mov.w	r1, #4294967295
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f7ff ffe7 	bl	8005ba6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005bd8:	bf00      	nop
 8005bda:	e7fd      	b.n	8005bd8 <_exit+0x12>

08005bdc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b086      	sub	sp, #24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005be8:	2300      	movs	r3, #0
 8005bea:	617b      	str	r3, [r7, #20]
 8005bec:	e00a      	b.n	8005c04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005bee:	f3af 8000 	nop.w
 8005bf2:	4601      	mov	r1, r0
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	1c5a      	adds	r2, r3, #1
 8005bf8:	60ba      	str	r2, [r7, #8]
 8005bfa:	b2ca      	uxtb	r2, r1
 8005bfc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	3301      	adds	r3, #1
 8005c02:	617b      	str	r3, [r7, #20]
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	dbf0      	blt.n	8005bee <_read+0x12>
  }

  return len;
 8005c0c:	687b      	ldr	r3, [r7, #4]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3718      	adds	r7, #24
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b086      	sub	sp, #24
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	60f8      	str	r0, [r7, #12]
 8005c1e:	60b9      	str	r1, [r7, #8]
 8005c20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c22:	2300      	movs	r3, #0
 8005c24:	617b      	str	r3, [r7, #20]
 8005c26:	e009      	b.n	8005c3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	1c5a      	adds	r2, r3, #1
 8005c2c:	60ba      	str	r2, [r7, #8]
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	4618      	mov	r0, r3
 8005c32:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	617b      	str	r3, [r7, #20]
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	dbf1      	blt.n	8005c28 <_write+0x12>
  }
  return len;
 8005c44:	687b      	ldr	r3, [r7, #4]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3718      	adds	r7, #24
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <_close>:

int _close(int file)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005c56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bc80      	pop	{r7}
 8005c62:	4770      	bx	lr

08005c64 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005c74:	605a      	str	r2, [r3, #4]
  return 0;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bc80      	pop	{r7}
 8005c80:	4770      	bx	lr

08005c82 <_isatty>:

int _isatty(int file)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b083      	sub	sp, #12
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005c8a:	2301      	movs	r3, #1
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bc80      	pop	{r7}
 8005c94:	4770      	bx	lr

08005c96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b085      	sub	sp, #20
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	60f8      	str	r0, [r7, #12]
 8005c9e:	60b9      	str	r1, [r7, #8]
 8005ca0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3714      	adds	r7, #20
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bc80      	pop	{r7}
 8005cac:	4770      	bx	lr
	...

08005cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005cb8:	4a14      	ldr	r2, [pc, #80]	@ (8005d0c <_sbrk+0x5c>)
 8005cba:	4b15      	ldr	r3, [pc, #84]	@ (8005d10 <_sbrk+0x60>)
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005cc4:	4b13      	ldr	r3, [pc, #76]	@ (8005d14 <_sbrk+0x64>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d102      	bne.n	8005cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005ccc:	4b11      	ldr	r3, [pc, #68]	@ (8005d14 <_sbrk+0x64>)
 8005cce:	4a12      	ldr	r2, [pc, #72]	@ (8005d18 <_sbrk+0x68>)
 8005cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005cd2:	4b10      	ldr	r3, [pc, #64]	@ (8005d14 <_sbrk+0x64>)
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4413      	add	r3, r2
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d207      	bcs.n	8005cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005ce0:	f003 fd50 	bl	8009784 <__errno>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	220c      	movs	r2, #12
 8005ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005cea:	f04f 33ff 	mov.w	r3, #4294967295
 8005cee:	e009      	b.n	8005d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005cf0:	4b08      	ldr	r3, [pc, #32]	@ (8005d14 <_sbrk+0x64>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005cf6:	4b07      	ldr	r3, [pc, #28]	@ (8005d14 <_sbrk+0x64>)
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	4a05      	ldr	r2, [pc, #20]	@ (8005d14 <_sbrk+0x64>)
 8005d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005d02:	68fb      	ldr	r3, [r7, #12]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3718      	adds	r7, #24
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	20005000 	.word	0x20005000
 8005d10:	00000400 	.word	0x00000400
 8005d14:	200003f8 	.word	0x200003f8
 8005d18:	20000550 	.word	0x20000550

08005d1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005d20:	bf00      	nop
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bc80      	pop	{r7}
 8005d26:	4770      	bx	lr

08005d28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005d28:	f7ff fff8 	bl	8005d1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005d2c:	480b      	ldr	r0, [pc, #44]	@ (8005d5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8005d2e:	490c      	ldr	r1, [pc, #48]	@ (8005d60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005d30:	4a0c      	ldr	r2, [pc, #48]	@ (8005d64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8005d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005d34:	e002      	b.n	8005d3c <LoopCopyDataInit>

08005d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005d3a:	3304      	adds	r3, #4

08005d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005d40:	d3f9      	bcc.n	8005d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005d42:	4a09      	ldr	r2, [pc, #36]	@ (8005d68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8005d44:	4c09      	ldr	r4, [pc, #36]	@ (8005d6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005d48:	e001      	b.n	8005d4e <LoopFillZerobss>

08005d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005d4c:	3204      	adds	r2, #4

08005d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005d50:	d3fb      	bcc.n	8005d4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005d52:	f003 fd1d 	bl	8009790 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005d56:	f7ff fa21 	bl	800519c <main>
  bx lr
 8005d5a:	4770      	bx	lr
  ldr r0, =_sdata
 8005d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005d60:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8005d64:	0800c270 	.word	0x0800c270
  ldr r2, =_sbss
 8005d68:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8005d6c:	20000550 	.word	0x20000550

08005d70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005d70:	e7fe      	b.n	8005d70 <ADC1_2_IRQHandler>
	...

08005d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005d78:	4b08      	ldr	r3, [pc, #32]	@ (8005d9c <HAL_Init+0x28>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a07      	ldr	r2, [pc, #28]	@ (8005d9c <HAL_Init+0x28>)
 8005d7e:	f043 0310 	orr.w	r3, r3, #16
 8005d82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d84:	2003      	movs	r0, #3
 8005d86:	f000 fc6d 	bl	8006664 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005d8a:	200f      	movs	r0, #15
 8005d8c:	f000 f808 	bl	8005da0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005d90:	f7ff fd24 	bl	80057dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	40022000 	.word	0x40022000

08005da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005da8:	4b12      	ldr	r3, [pc, #72]	@ (8005df4 <HAL_InitTick+0x54>)
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	4b12      	ldr	r3, [pc, #72]	@ (8005df8 <HAL_InitTick+0x58>)
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	4619      	mov	r1, r3
 8005db2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 fc85 	bl	80066ce <HAL_SYSTICK_Config>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e00e      	b.n	8005dec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2b0f      	cmp	r3, #15
 8005dd2:	d80a      	bhi.n	8005dea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	6879      	ldr	r1, [r7, #4]
 8005dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ddc:	f000 fc4d 	bl	800667a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005de0:	4a06      	ldr	r2, [pc, #24]	@ (8005dfc <HAL_InitTick+0x5c>)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
 8005de8:	e000      	b.n	8005dec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3708      	adds	r7, #8
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	20000004 	.word	0x20000004
 8005df8:	2000000c 	.word	0x2000000c
 8005dfc:	20000008 	.word	0x20000008

08005e00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e00:	b480      	push	{r7}
 8005e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005e04:	4b05      	ldr	r3, [pc, #20]	@ (8005e1c <HAL_IncTick+0x1c>)
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	461a      	mov	r2, r3
 8005e0a:	4b05      	ldr	r3, [pc, #20]	@ (8005e20 <HAL_IncTick+0x20>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4413      	add	r3, r2
 8005e10:	4a03      	ldr	r2, [pc, #12]	@ (8005e20 <HAL_IncTick+0x20>)
 8005e12:	6013      	str	r3, [r2, #0]
}
 8005e14:	bf00      	nop
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bc80      	pop	{r7}
 8005e1a:	4770      	bx	lr
 8005e1c:	2000000c 	.word	0x2000000c
 8005e20:	200003fc 	.word	0x200003fc

08005e24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e24:	b480      	push	{r7}
 8005e26:	af00      	add	r7, sp, #0
  return uwTick;
 8005e28:	4b02      	ldr	r3, [pc, #8]	@ (8005e34 <HAL_GetTick+0x10>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bc80      	pop	{r7}
 8005e32:	4770      	bx	lr
 8005e34:	200003fc 	.word	0x200003fc

08005e38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e40:	f7ff fff0 	bl	8005e24 <HAL_GetTick>
 8005e44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e50:	d005      	beq.n	8005e5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e52:	4b0a      	ldr	r3, [pc, #40]	@ (8005e7c <HAL_Delay+0x44>)
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	461a      	mov	r2, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005e5e:	bf00      	nop
 8005e60:	f7ff ffe0 	bl	8005e24 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d8f7      	bhi.n	8005e60 <HAL_Delay+0x28>
  {
  }
}
 8005e70:	bf00      	nop
 8005e72:	bf00      	nop
 8005e74:	3710      	adds	r7, #16
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	2000000c 	.word	0x2000000c

08005e80 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8005e90:	2300      	movs	r3, #0
 8005e92:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8005e94:	2300      	movs	r3, #0
 8005e96:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e0be      	b.n	8006020 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d109      	bne.n	8005ec4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7ff fcbe 	bl	8005840 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 fabf 	bl	8006448 <ADC_ConversionStop_Disable>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed2:	f003 0310 	and.w	r3, r3, #16
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f040 8099 	bne.w	800600e <HAL_ADC_Init+0x18e>
 8005edc:	7dfb      	ldrb	r3, [r7, #23]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f040 8095 	bne.w	800600e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ee8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005eec:	f023 0302 	bic.w	r3, r3, #2
 8005ef0:	f043 0202 	orr.w	r2, r3, #2
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005f00:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	7b1b      	ldrb	r3, [r3, #12]
 8005f06:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005f08:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f18:	d003      	beq.n	8005f22 <HAL_ADC_Init+0xa2>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d102      	bne.n	8005f28 <HAL_ADC_Init+0xa8>
 8005f22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005f26:	e000      	b.n	8005f2a <HAL_ADC_Init+0xaa>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	7d1b      	ldrb	r3, [r3, #20]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d119      	bne.n	8005f6c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	7b1b      	ldrb	r3, [r3, #12]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d109      	bne.n	8005f54 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	3b01      	subs	r3, #1
 8005f46:	035a      	lsls	r2, r3, #13
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005f50:	613b      	str	r3, [r7, #16]
 8005f52:	e00b      	b.n	8005f6c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f58:	f043 0220 	orr.w	r2, r3, #32
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f64:	f043 0201 	orr.w	r2, r3, #1
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	689a      	ldr	r2, [r3, #8]
 8005f86:	4b28      	ldr	r3, [pc, #160]	@ (8006028 <HAL_ADC_Init+0x1a8>)
 8005f88:	4013      	ands	r3, r2
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	6812      	ldr	r2, [r2, #0]
 8005f8e:	68b9      	ldr	r1, [r7, #8]
 8005f90:	430b      	orrs	r3, r1
 8005f92:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f9c:	d003      	beq.n	8005fa6 <HAL_ADC_Init+0x126>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d104      	bne.n	8005fb0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	3b01      	subs	r3, #1
 8005fac:	051b      	lsls	r3, r3, #20
 8005fae:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689a      	ldr	r2, [r3, #8]
 8005fca:	4b18      	ldr	r3, [pc, #96]	@ (800602c <HAL_ADC_Init+0x1ac>)
 8005fcc:	4013      	ands	r3, r2
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d10b      	bne.n	8005fec <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fde:	f023 0303 	bic.w	r3, r3, #3
 8005fe2:	f043 0201 	orr.w	r2, r3, #1
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005fea:	e018      	b.n	800601e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ff0:	f023 0312 	bic.w	r3, r3, #18
 8005ff4:	f043 0210 	orr.w	r2, r3, #16
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006000:	f043 0201 	orr.w	r2, r3, #1
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800600c:	e007      	b.n	800601e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006012:	f043 0210 	orr.w	r2, r3, #16
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800601e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3718      	adds	r7, #24
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	ffe1f7fd 	.word	0xffe1f7fd
 800602c:	ff1f0efe 	.word	0xff1f0efe

08006030 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006038:	2300      	movs	r3, #0
 800603a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006042:	2b01      	cmp	r3, #1
 8006044:	d101      	bne.n	800604a <HAL_ADC_Start+0x1a>
 8006046:	2302      	movs	r3, #2
 8006048:	e098      	b.n	800617c <HAL_ADC_Start+0x14c>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 f99e 	bl	8006394 <ADC_Enable>
 8006058:	4603      	mov	r3, r0
 800605a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800605c:	7bfb      	ldrb	r3, [r7, #15]
 800605e:	2b00      	cmp	r3, #0
 8006060:	f040 8087 	bne.w	8006172 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006068:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800606c:	f023 0301 	bic.w	r3, r3, #1
 8006070:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a41      	ldr	r2, [pc, #260]	@ (8006184 <HAL_ADC_Start+0x154>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d105      	bne.n	800608e <HAL_ADC_Start+0x5e>
 8006082:	4b41      	ldr	r3, [pc, #260]	@ (8006188 <HAL_ADC_Start+0x158>)
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d115      	bne.n	80060ba <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006092:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d026      	beq.n	80060f6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ac:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80060b0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80060b8:	e01d      	b.n	80060f6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060be:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a2f      	ldr	r2, [pc, #188]	@ (8006188 <HAL_ADC_Start+0x158>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d004      	beq.n	80060da <HAL_ADC_Start+0xaa>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a2b      	ldr	r2, [pc, #172]	@ (8006184 <HAL_ADC_Start+0x154>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d10d      	bne.n	80060f6 <HAL_ADC_Start+0xc6>
 80060da:	4b2b      	ldr	r3, [pc, #172]	@ (8006188 <HAL_ADC_Start+0x158>)
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d007      	beq.n	80060f6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ea:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80060ee:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d006      	beq.n	8006110 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006106:	f023 0206 	bic.w	r2, r3, #6
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800610e:	e002      	b.n	8006116 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f06f 0202 	mvn.w	r2, #2
 8006126:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8006132:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8006136:	d113      	bne.n	8006160 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800613c:	4a11      	ldr	r2, [pc, #68]	@ (8006184 <HAL_ADC_Start+0x154>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d105      	bne.n	800614e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8006142:	4b11      	ldr	r3, [pc, #68]	@ (8006188 <HAL_ADC_Start+0x158>)
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800614a:	2b00      	cmp	r3, #0
 800614c:	d108      	bne.n	8006160 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800615c:	609a      	str	r2, [r3, #8]
 800615e:	e00c      	b.n	800617a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	689a      	ldr	r2, [r3, #8]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800616e:	609a      	str	r2, [r3, #8]
 8006170:	e003      	b.n	800617a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800617a:	7bfb      	ldrb	r3, [r7, #15]
}
 800617c:	4618      	mov	r0, r3
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	40012800 	.word	0x40012800
 8006188:	40012400 	.word	0x40012400

0800618c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800619a:	4618      	mov	r0, r3
 800619c:	370c      	adds	r7, #12
 800619e:	46bd      	mov	sp, r7
 80061a0:	bc80      	pop	{r7}
 80061a2:	4770      	bx	lr

080061a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80061b2:	2300      	movs	r3, #0
 80061b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d101      	bne.n	80061c4 <HAL_ADC_ConfigChannel+0x20>
 80061c0:	2302      	movs	r3, #2
 80061c2:	e0dc      	b.n	800637e <HAL_ADC_ConfigChannel+0x1da>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	2b06      	cmp	r3, #6
 80061d2:	d81c      	bhi.n	800620e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	4613      	mov	r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4413      	add	r3, r2
 80061e4:	3b05      	subs	r3, #5
 80061e6:	221f      	movs	r2, #31
 80061e8:	fa02 f303 	lsl.w	r3, r2, r3
 80061ec:	43db      	mvns	r3, r3
 80061ee:	4019      	ands	r1, r3
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	6818      	ldr	r0, [r3, #0]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	685a      	ldr	r2, [r3, #4]
 80061f8:	4613      	mov	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4413      	add	r3, r2
 80061fe:	3b05      	subs	r3, #5
 8006200:	fa00 f203 	lsl.w	r2, r0, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	430a      	orrs	r2, r1
 800620a:	635a      	str	r2, [r3, #52]	@ 0x34
 800620c:	e03c      	b.n	8006288 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	2b0c      	cmp	r3, #12
 8006214:	d81c      	bhi.n	8006250 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	4613      	mov	r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	3b23      	subs	r3, #35	@ 0x23
 8006228:	221f      	movs	r2, #31
 800622a:	fa02 f303 	lsl.w	r3, r2, r3
 800622e:	43db      	mvns	r3, r3
 8006230:	4019      	ands	r1, r3
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	6818      	ldr	r0, [r3, #0]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	4613      	mov	r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	4413      	add	r3, r2
 8006240:	3b23      	subs	r3, #35	@ 0x23
 8006242:	fa00 f203 	lsl.w	r2, r0, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	631a      	str	r2, [r3, #48]	@ 0x30
 800624e:	e01b      	b.n	8006288 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	4613      	mov	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	3b41      	subs	r3, #65	@ 0x41
 8006262:	221f      	movs	r2, #31
 8006264:	fa02 f303 	lsl.w	r3, r2, r3
 8006268:	43db      	mvns	r3, r3
 800626a:	4019      	ands	r1, r3
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	6818      	ldr	r0, [r3, #0]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	4613      	mov	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	3b41      	subs	r3, #65	@ 0x41
 800627c:	fa00 f203 	lsl.w	r2, r0, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2b09      	cmp	r3, #9
 800628e:	d91c      	bls.n	80062ca <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68d9      	ldr	r1, [r3, #12]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	4613      	mov	r3, r2
 800629c:	005b      	lsls	r3, r3, #1
 800629e:	4413      	add	r3, r2
 80062a0:	3b1e      	subs	r3, #30
 80062a2:	2207      	movs	r2, #7
 80062a4:	fa02 f303 	lsl.w	r3, r2, r3
 80062a8:	43db      	mvns	r3, r3
 80062aa:	4019      	ands	r1, r3
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	6898      	ldr	r0, [r3, #8]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	4613      	mov	r3, r2
 80062b6:	005b      	lsls	r3, r3, #1
 80062b8:	4413      	add	r3, r2
 80062ba:	3b1e      	subs	r3, #30
 80062bc:	fa00 f203 	lsl.w	r2, r0, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	430a      	orrs	r2, r1
 80062c6:	60da      	str	r2, [r3, #12]
 80062c8:	e019      	b.n	80062fe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	6919      	ldr	r1, [r3, #16]
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	4613      	mov	r3, r2
 80062d6:	005b      	lsls	r3, r3, #1
 80062d8:	4413      	add	r3, r2
 80062da:	2207      	movs	r2, #7
 80062dc:	fa02 f303 	lsl.w	r3, r2, r3
 80062e0:	43db      	mvns	r3, r3
 80062e2:	4019      	ands	r1, r3
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	6898      	ldr	r0, [r3, #8]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	4613      	mov	r3, r2
 80062ee:	005b      	lsls	r3, r3, #1
 80062f0:	4413      	add	r3, r2
 80062f2:	fa00 f203 	lsl.w	r2, r0, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2b10      	cmp	r3, #16
 8006304:	d003      	beq.n	800630e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800630a:	2b11      	cmp	r3, #17
 800630c:	d132      	bne.n	8006374 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a1d      	ldr	r2, [pc, #116]	@ (8006388 <HAL_ADC_ConfigChannel+0x1e4>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d125      	bne.n	8006364 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d126      	bne.n	8006374 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	689a      	ldr	r2, [r3, #8]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8006334:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2b10      	cmp	r3, #16
 800633c:	d11a      	bne.n	8006374 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800633e:	4b13      	ldr	r3, [pc, #76]	@ (800638c <HAL_ADC_ConfigChannel+0x1e8>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a13      	ldr	r2, [pc, #76]	@ (8006390 <HAL_ADC_ConfigChannel+0x1ec>)
 8006344:	fba2 2303 	umull	r2, r3, r2, r3
 8006348:	0c9a      	lsrs	r2, r3, #18
 800634a:	4613      	mov	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4413      	add	r3, r2
 8006350:	005b      	lsls	r3, r3, #1
 8006352:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006354:	e002      	b.n	800635c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	3b01      	subs	r3, #1
 800635a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1f9      	bne.n	8006356 <HAL_ADC_ConfigChannel+0x1b2>
 8006362:	e007      	b.n	8006374 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006368:	f043 0220 	orr.w	r2, r3, #32
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800637c:	7bfb      	ldrb	r3, [r7, #15]
}
 800637e:	4618      	mov	r0, r3
 8006380:	3714      	adds	r7, #20
 8006382:	46bd      	mov	sp, r7
 8006384:	bc80      	pop	{r7}
 8006386:	4770      	bx	lr
 8006388:	40012400 	.word	0x40012400
 800638c:	20000004 	.word	0x20000004
 8006390:	431bde83 	.word	0x431bde83

08006394 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800639c:	2300      	movs	r3, #0
 800639e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80063a0:	2300      	movs	r3, #0
 80063a2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	f003 0301 	and.w	r3, r3, #1
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d040      	beq.n	8006434 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	689a      	ldr	r2, [r3, #8]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f042 0201 	orr.w	r2, r2, #1
 80063c0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80063c2:	4b1f      	ldr	r3, [pc, #124]	@ (8006440 <ADC_Enable+0xac>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a1f      	ldr	r2, [pc, #124]	@ (8006444 <ADC_Enable+0xb0>)
 80063c8:	fba2 2303 	umull	r2, r3, r2, r3
 80063cc:	0c9b      	lsrs	r3, r3, #18
 80063ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80063d0:	e002      	b.n	80063d8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	3b01      	subs	r3, #1
 80063d6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1f9      	bne.n	80063d2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80063de:	f7ff fd21 	bl	8005e24 <HAL_GetTick>
 80063e2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80063e4:	e01f      	b.n	8006426 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80063e6:	f7ff fd1d 	bl	8005e24 <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d918      	bls.n	8006426 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d011      	beq.n	8006426 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006406:	f043 0210 	orr.w	r2, r3, #16
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006412:	f043 0201 	orr.w	r2, r3, #1
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e007      	b.n	8006436 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	f003 0301 	and.w	r3, r3, #1
 8006430:	2b01      	cmp	r3, #1
 8006432:	d1d8      	bne.n	80063e6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	20000004 	.word	0x20000004
 8006444:	431bde83 	.word	0x431bde83

08006448 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006450:	2300      	movs	r3, #0
 8006452:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	2b01      	cmp	r3, #1
 8006460:	d12e      	bne.n	80064c0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	689a      	ldr	r2, [r3, #8]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f022 0201 	bic.w	r2, r2, #1
 8006470:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006472:	f7ff fcd7 	bl	8005e24 <HAL_GetTick>
 8006476:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006478:	e01b      	b.n	80064b2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800647a:	f7ff fcd3 	bl	8005e24 <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	2b02      	cmp	r3, #2
 8006486:	d914      	bls.n	80064b2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b01      	cmp	r3, #1
 8006494:	d10d      	bne.n	80064b2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800649a:	f043 0210 	orr.w	r2, r3, #16
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a6:	f043 0201 	orr.w	r2, r3, #1
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e007      	b.n	80064c2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f003 0301 	and.w	r3, r3, #1
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d0dc      	beq.n	800647a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
	...

080064cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f003 0307 	and.w	r3, r3, #7
 80064da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80064dc:	4b0c      	ldr	r3, [pc, #48]	@ (8006510 <__NVIC_SetPriorityGrouping+0x44>)
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80064e8:	4013      	ands	r3, r2
 80064ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80064f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80064f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80064fe:	4a04      	ldr	r2, [pc, #16]	@ (8006510 <__NVIC_SetPriorityGrouping+0x44>)
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	60d3      	str	r3, [r2, #12]
}
 8006504:	bf00      	nop
 8006506:	3714      	adds	r7, #20
 8006508:	46bd      	mov	sp, r7
 800650a:	bc80      	pop	{r7}
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	e000ed00 	.word	0xe000ed00

08006514 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006514:	b480      	push	{r7}
 8006516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006518:	4b04      	ldr	r3, [pc, #16]	@ (800652c <__NVIC_GetPriorityGrouping+0x18>)
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	0a1b      	lsrs	r3, r3, #8
 800651e:	f003 0307 	and.w	r3, r3, #7
}
 8006522:	4618      	mov	r0, r3
 8006524:	46bd      	mov	sp, r7
 8006526:	bc80      	pop	{r7}
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	e000ed00 	.word	0xe000ed00

08006530 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	4603      	mov	r3, r0
 8006538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800653a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800653e:	2b00      	cmp	r3, #0
 8006540:	db0b      	blt.n	800655a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006542:	79fb      	ldrb	r3, [r7, #7]
 8006544:	f003 021f 	and.w	r2, r3, #31
 8006548:	4906      	ldr	r1, [pc, #24]	@ (8006564 <__NVIC_EnableIRQ+0x34>)
 800654a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800654e:	095b      	lsrs	r3, r3, #5
 8006550:	2001      	movs	r0, #1
 8006552:	fa00 f202 	lsl.w	r2, r0, r2
 8006556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800655a:	bf00      	nop
 800655c:	370c      	adds	r7, #12
 800655e:	46bd      	mov	sp, r7
 8006560:	bc80      	pop	{r7}
 8006562:	4770      	bx	lr
 8006564:	e000e100 	.word	0xe000e100

08006568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	4603      	mov	r3, r0
 8006570:	6039      	str	r1, [r7, #0]
 8006572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006578:	2b00      	cmp	r3, #0
 800657a:	db0a      	blt.n	8006592 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	b2da      	uxtb	r2, r3
 8006580:	490c      	ldr	r1, [pc, #48]	@ (80065b4 <__NVIC_SetPriority+0x4c>)
 8006582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006586:	0112      	lsls	r2, r2, #4
 8006588:	b2d2      	uxtb	r2, r2
 800658a:	440b      	add	r3, r1
 800658c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006590:	e00a      	b.n	80065a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	b2da      	uxtb	r2, r3
 8006596:	4908      	ldr	r1, [pc, #32]	@ (80065b8 <__NVIC_SetPriority+0x50>)
 8006598:	79fb      	ldrb	r3, [r7, #7]
 800659a:	f003 030f 	and.w	r3, r3, #15
 800659e:	3b04      	subs	r3, #4
 80065a0:	0112      	lsls	r2, r2, #4
 80065a2:	b2d2      	uxtb	r2, r2
 80065a4:	440b      	add	r3, r1
 80065a6:	761a      	strb	r2, [r3, #24]
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bc80      	pop	{r7}
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	e000e100 	.word	0xe000e100
 80065b8:	e000ed00 	.word	0xe000ed00

080065bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80065bc:	b480      	push	{r7}
 80065be:	b089      	sub	sp, #36	@ 0x24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f003 0307 	and.w	r3, r3, #7
 80065ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	f1c3 0307 	rsb	r3, r3, #7
 80065d6:	2b04      	cmp	r3, #4
 80065d8:	bf28      	it	cs
 80065da:	2304      	movcs	r3, #4
 80065dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	3304      	adds	r3, #4
 80065e2:	2b06      	cmp	r3, #6
 80065e4:	d902      	bls.n	80065ec <NVIC_EncodePriority+0x30>
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	3b03      	subs	r3, #3
 80065ea:	e000      	b.n	80065ee <NVIC_EncodePriority+0x32>
 80065ec:	2300      	movs	r3, #0
 80065ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065f0:	f04f 32ff 	mov.w	r2, #4294967295
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	fa02 f303 	lsl.w	r3, r2, r3
 80065fa:	43da      	mvns	r2, r3
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	401a      	ands	r2, r3
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006604:	f04f 31ff 	mov.w	r1, #4294967295
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	fa01 f303 	lsl.w	r3, r1, r3
 800660e:	43d9      	mvns	r1, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006614:	4313      	orrs	r3, r2
         );
}
 8006616:	4618      	mov	r0, r3
 8006618:	3724      	adds	r7, #36	@ 0x24
 800661a:	46bd      	mov	sp, r7
 800661c:	bc80      	pop	{r7}
 800661e:	4770      	bx	lr

08006620 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	3b01      	subs	r3, #1
 800662c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006630:	d301      	bcc.n	8006636 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006632:	2301      	movs	r3, #1
 8006634:	e00f      	b.n	8006656 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006636:	4a0a      	ldr	r2, [pc, #40]	@ (8006660 <SysTick_Config+0x40>)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	3b01      	subs	r3, #1
 800663c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800663e:	210f      	movs	r1, #15
 8006640:	f04f 30ff 	mov.w	r0, #4294967295
 8006644:	f7ff ff90 	bl	8006568 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006648:	4b05      	ldr	r3, [pc, #20]	@ (8006660 <SysTick_Config+0x40>)
 800664a:	2200      	movs	r2, #0
 800664c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800664e:	4b04      	ldr	r3, [pc, #16]	@ (8006660 <SysTick_Config+0x40>)
 8006650:	2207      	movs	r2, #7
 8006652:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3708      	adds	r7, #8
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	e000e010 	.word	0xe000e010

08006664 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f7ff ff2d 	bl	80064cc <__NVIC_SetPriorityGrouping>
}
 8006672:	bf00      	nop
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800667a:	b580      	push	{r7, lr}
 800667c:	b086      	sub	sp, #24
 800667e:	af00      	add	r7, sp, #0
 8006680:	4603      	mov	r3, r0
 8006682:	60b9      	str	r1, [r7, #8]
 8006684:	607a      	str	r2, [r7, #4]
 8006686:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006688:	2300      	movs	r3, #0
 800668a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800668c:	f7ff ff42 	bl	8006514 <__NVIC_GetPriorityGrouping>
 8006690:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	68b9      	ldr	r1, [r7, #8]
 8006696:	6978      	ldr	r0, [r7, #20]
 8006698:	f7ff ff90 	bl	80065bc <NVIC_EncodePriority>
 800669c:	4602      	mov	r2, r0
 800669e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066a2:	4611      	mov	r1, r2
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7ff ff5f 	bl	8006568 <__NVIC_SetPriority>
}
 80066aa:	bf00      	nop
 80066ac:	3718      	adds	r7, #24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b082      	sub	sp, #8
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	4603      	mov	r3, r0
 80066ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80066bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7ff ff35 	bl	8006530 <__NVIC_EnableIRQ>
}
 80066c6:	bf00      	nop
 80066c8:	3708      	adds	r7, #8
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b082      	sub	sp, #8
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f7ff ffa2 	bl	8006620 <SysTick_Config>
 80066dc:	4603      	mov	r3, r0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3708      	adds	r7, #8
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
	...

080066e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b08b      	sub	sp, #44	@ 0x2c
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80066f2:	2300      	movs	r3, #0
 80066f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80066f6:	2300      	movs	r3, #0
 80066f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80066fa:	e169      	b.n	80069d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80066fc:	2201      	movs	r2, #1
 80066fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006700:	fa02 f303 	lsl.w	r3, r2, r3
 8006704:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	69fa      	ldr	r2, [r7, #28]
 800670c:	4013      	ands	r3, r2
 800670e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006710:	69ba      	ldr	r2, [r7, #24]
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	429a      	cmp	r2, r3
 8006716:	f040 8158 	bne.w	80069ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	4a9a      	ldr	r2, [pc, #616]	@ (8006988 <HAL_GPIO_Init+0x2a0>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d05e      	beq.n	80067e2 <HAL_GPIO_Init+0xfa>
 8006724:	4a98      	ldr	r2, [pc, #608]	@ (8006988 <HAL_GPIO_Init+0x2a0>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d875      	bhi.n	8006816 <HAL_GPIO_Init+0x12e>
 800672a:	4a98      	ldr	r2, [pc, #608]	@ (800698c <HAL_GPIO_Init+0x2a4>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d058      	beq.n	80067e2 <HAL_GPIO_Init+0xfa>
 8006730:	4a96      	ldr	r2, [pc, #600]	@ (800698c <HAL_GPIO_Init+0x2a4>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d86f      	bhi.n	8006816 <HAL_GPIO_Init+0x12e>
 8006736:	4a96      	ldr	r2, [pc, #600]	@ (8006990 <HAL_GPIO_Init+0x2a8>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d052      	beq.n	80067e2 <HAL_GPIO_Init+0xfa>
 800673c:	4a94      	ldr	r2, [pc, #592]	@ (8006990 <HAL_GPIO_Init+0x2a8>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d869      	bhi.n	8006816 <HAL_GPIO_Init+0x12e>
 8006742:	4a94      	ldr	r2, [pc, #592]	@ (8006994 <HAL_GPIO_Init+0x2ac>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d04c      	beq.n	80067e2 <HAL_GPIO_Init+0xfa>
 8006748:	4a92      	ldr	r2, [pc, #584]	@ (8006994 <HAL_GPIO_Init+0x2ac>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d863      	bhi.n	8006816 <HAL_GPIO_Init+0x12e>
 800674e:	4a92      	ldr	r2, [pc, #584]	@ (8006998 <HAL_GPIO_Init+0x2b0>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d046      	beq.n	80067e2 <HAL_GPIO_Init+0xfa>
 8006754:	4a90      	ldr	r2, [pc, #576]	@ (8006998 <HAL_GPIO_Init+0x2b0>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d85d      	bhi.n	8006816 <HAL_GPIO_Init+0x12e>
 800675a:	2b12      	cmp	r3, #18
 800675c:	d82a      	bhi.n	80067b4 <HAL_GPIO_Init+0xcc>
 800675e:	2b12      	cmp	r3, #18
 8006760:	d859      	bhi.n	8006816 <HAL_GPIO_Init+0x12e>
 8006762:	a201      	add	r2, pc, #4	@ (adr r2, 8006768 <HAL_GPIO_Init+0x80>)
 8006764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006768:	080067e3 	.word	0x080067e3
 800676c:	080067bd 	.word	0x080067bd
 8006770:	080067cf 	.word	0x080067cf
 8006774:	08006811 	.word	0x08006811
 8006778:	08006817 	.word	0x08006817
 800677c:	08006817 	.word	0x08006817
 8006780:	08006817 	.word	0x08006817
 8006784:	08006817 	.word	0x08006817
 8006788:	08006817 	.word	0x08006817
 800678c:	08006817 	.word	0x08006817
 8006790:	08006817 	.word	0x08006817
 8006794:	08006817 	.word	0x08006817
 8006798:	08006817 	.word	0x08006817
 800679c:	08006817 	.word	0x08006817
 80067a0:	08006817 	.word	0x08006817
 80067a4:	08006817 	.word	0x08006817
 80067a8:	08006817 	.word	0x08006817
 80067ac:	080067c5 	.word	0x080067c5
 80067b0:	080067d9 	.word	0x080067d9
 80067b4:	4a79      	ldr	r2, [pc, #484]	@ (800699c <HAL_GPIO_Init+0x2b4>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d013      	beq.n	80067e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80067ba:	e02c      	b.n	8006816 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	623b      	str	r3, [r7, #32]
          break;
 80067c2:	e029      	b.n	8006818 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	3304      	adds	r3, #4
 80067ca:	623b      	str	r3, [r7, #32]
          break;
 80067cc:	e024      	b.n	8006818 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	3308      	adds	r3, #8
 80067d4:	623b      	str	r3, [r7, #32]
          break;
 80067d6:	e01f      	b.n	8006818 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	330c      	adds	r3, #12
 80067de:	623b      	str	r3, [r7, #32]
          break;
 80067e0:	e01a      	b.n	8006818 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d102      	bne.n	80067f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80067ea:	2304      	movs	r3, #4
 80067ec:	623b      	str	r3, [r7, #32]
          break;
 80067ee:	e013      	b.n	8006818 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d105      	bne.n	8006804 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80067f8:	2308      	movs	r3, #8
 80067fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	69fa      	ldr	r2, [r7, #28]
 8006800:	611a      	str	r2, [r3, #16]
          break;
 8006802:	e009      	b.n	8006818 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006804:	2308      	movs	r3, #8
 8006806:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	69fa      	ldr	r2, [r7, #28]
 800680c:	615a      	str	r2, [r3, #20]
          break;
 800680e:	e003      	b.n	8006818 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006810:	2300      	movs	r3, #0
 8006812:	623b      	str	r3, [r7, #32]
          break;
 8006814:	e000      	b.n	8006818 <HAL_GPIO_Init+0x130>
          break;
 8006816:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	2bff      	cmp	r3, #255	@ 0xff
 800681c:	d801      	bhi.n	8006822 <HAL_GPIO_Init+0x13a>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	e001      	b.n	8006826 <HAL_GPIO_Init+0x13e>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	3304      	adds	r3, #4
 8006826:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	2bff      	cmp	r3, #255	@ 0xff
 800682c:	d802      	bhi.n	8006834 <HAL_GPIO_Init+0x14c>
 800682e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	e002      	b.n	800683a <HAL_GPIO_Init+0x152>
 8006834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006836:	3b08      	subs	r3, #8
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	210f      	movs	r1, #15
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	fa01 f303 	lsl.w	r3, r1, r3
 8006848:	43db      	mvns	r3, r3
 800684a:	401a      	ands	r2, r3
 800684c:	6a39      	ldr	r1, [r7, #32]
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	fa01 f303 	lsl.w	r3, r1, r3
 8006854:	431a      	orrs	r2, r3
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006862:	2b00      	cmp	r3, #0
 8006864:	f000 80b1 	beq.w	80069ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006868:	4b4d      	ldr	r3, [pc, #308]	@ (80069a0 <HAL_GPIO_Init+0x2b8>)
 800686a:	699b      	ldr	r3, [r3, #24]
 800686c:	4a4c      	ldr	r2, [pc, #304]	@ (80069a0 <HAL_GPIO_Init+0x2b8>)
 800686e:	f043 0301 	orr.w	r3, r3, #1
 8006872:	6193      	str	r3, [r2, #24]
 8006874:	4b4a      	ldr	r3, [pc, #296]	@ (80069a0 <HAL_GPIO_Init+0x2b8>)
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	f003 0301 	and.w	r3, r3, #1
 800687c:	60bb      	str	r3, [r7, #8]
 800687e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006880:	4a48      	ldr	r2, [pc, #288]	@ (80069a4 <HAL_GPIO_Init+0x2bc>)
 8006882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006884:	089b      	lsrs	r3, r3, #2
 8006886:	3302      	adds	r3, #2
 8006888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800688c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800688e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006890:	f003 0303 	and.w	r3, r3, #3
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	220f      	movs	r2, #15
 8006898:	fa02 f303 	lsl.w	r3, r2, r3
 800689c:	43db      	mvns	r3, r3
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	4013      	ands	r3, r2
 80068a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a40      	ldr	r2, [pc, #256]	@ (80069a8 <HAL_GPIO_Init+0x2c0>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d013      	beq.n	80068d4 <HAL_GPIO_Init+0x1ec>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a3f      	ldr	r2, [pc, #252]	@ (80069ac <HAL_GPIO_Init+0x2c4>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d00d      	beq.n	80068d0 <HAL_GPIO_Init+0x1e8>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a3e      	ldr	r2, [pc, #248]	@ (80069b0 <HAL_GPIO_Init+0x2c8>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d007      	beq.n	80068cc <HAL_GPIO_Init+0x1e4>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a3d      	ldr	r2, [pc, #244]	@ (80069b4 <HAL_GPIO_Init+0x2cc>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d101      	bne.n	80068c8 <HAL_GPIO_Init+0x1e0>
 80068c4:	2303      	movs	r3, #3
 80068c6:	e006      	b.n	80068d6 <HAL_GPIO_Init+0x1ee>
 80068c8:	2304      	movs	r3, #4
 80068ca:	e004      	b.n	80068d6 <HAL_GPIO_Init+0x1ee>
 80068cc:	2302      	movs	r3, #2
 80068ce:	e002      	b.n	80068d6 <HAL_GPIO_Init+0x1ee>
 80068d0:	2301      	movs	r3, #1
 80068d2:	e000      	b.n	80068d6 <HAL_GPIO_Init+0x1ee>
 80068d4:	2300      	movs	r3, #0
 80068d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068d8:	f002 0203 	and.w	r2, r2, #3
 80068dc:	0092      	lsls	r2, r2, #2
 80068de:	4093      	lsls	r3, r2
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80068e6:	492f      	ldr	r1, [pc, #188]	@ (80069a4 <HAL_GPIO_Init+0x2bc>)
 80068e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ea:	089b      	lsrs	r3, r3, #2
 80068ec:	3302      	adds	r3, #2
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d006      	beq.n	800690e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006900:	4b2d      	ldr	r3, [pc, #180]	@ (80069b8 <HAL_GPIO_Init+0x2d0>)
 8006902:	689a      	ldr	r2, [r3, #8]
 8006904:	492c      	ldr	r1, [pc, #176]	@ (80069b8 <HAL_GPIO_Init+0x2d0>)
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	4313      	orrs	r3, r2
 800690a:	608b      	str	r3, [r1, #8]
 800690c:	e006      	b.n	800691c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800690e:	4b2a      	ldr	r3, [pc, #168]	@ (80069b8 <HAL_GPIO_Init+0x2d0>)
 8006910:	689a      	ldr	r2, [r3, #8]
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	43db      	mvns	r3, r3
 8006916:	4928      	ldr	r1, [pc, #160]	@ (80069b8 <HAL_GPIO_Init+0x2d0>)
 8006918:	4013      	ands	r3, r2
 800691a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006924:	2b00      	cmp	r3, #0
 8006926:	d006      	beq.n	8006936 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006928:	4b23      	ldr	r3, [pc, #140]	@ (80069b8 <HAL_GPIO_Init+0x2d0>)
 800692a:	68da      	ldr	r2, [r3, #12]
 800692c:	4922      	ldr	r1, [pc, #136]	@ (80069b8 <HAL_GPIO_Init+0x2d0>)
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	4313      	orrs	r3, r2
 8006932:	60cb      	str	r3, [r1, #12]
 8006934:	e006      	b.n	8006944 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006936:	4b20      	ldr	r3, [pc, #128]	@ (80069b8 <HAL_GPIO_Init+0x2d0>)
 8006938:	68da      	ldr	r2, [r3, #12]
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	43db      	mvns	r3, r3
 800693e:	491e      	ldr	r1, [pc, #120]	@ (80069b8 <HAL_GPIO_Init+0x2d0>)
 8006940:	4013      	ands	r3, r2
 8006942:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d006      	beq.n	800695e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006950:	4b19      	ldr	r3, [pc, #100]	@ (80069b8 <HAL_GPIO_Init+0x2d0>)
 8006952:	685a      	ldr	r2, [r3, #4]
 8006954:	4918      	ldr	r1, [pc, #96]	@ (80069b8 <HAL_GPIO_Init+0x2d0>)
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	4313      	orrs	r3, r2
 800695a:	604b      	str	r3, [r1, #4]
 800695c:	e006      	b.n	800696c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800695e:	4b16      	ldr	r3, [pc, #88]	@ (80069b8 <HAL_GPIO_Init+0x2d0>)
 8006960:	685a      	ldr	r2, [r3, #4]
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	43db      	mvns	r3, r3
 8006966:	4914      	ldr	r1, [pc, #80]	@ (80069b8 <HAL_GPIO_Init+0x2d0>)
 8006968:	4013      	ands	r3, r2
 800696a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006974:	2b00      	cmp	r3, #0
 8006976:	d021      	beq.n	80069bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006978:	4b0f      	ldr	r3, [pc, #60]	@ (80069b8 <HAL_GPIO_Init+0x2d0>)
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	490e      	ldr	r1, [pc, #56]	@ (80069b8 <HAL_GPIO_Init+0x2d0>)
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	4313      	orrs	r3, r2
 8006982:	600b      	str	r3, [r1, #0]
 8006984:	e021      	b.n	80069ca <HAL_GPIO_Init+0x2e2>
 8006986:	bf00      	nop
 8006988:	10320000 	.word	0x10320000
 800698c:	10310000 	.word	0x10310000
 8006990:	10220000 	.word	0x10220000
 8006994:	10210000 	.word	0x10210000
 8006998:	10120000 	.word	0x10120000
 800699c:	10110000 	.word	0x10110000
 80069a0:	40021000 	.word	0x40021000
 80069a4:	40010000 	.word	0x40010000
 80069a8:	40010800 	.word	0x40010800
 80069ac:	40010c00 	.word	0x40010c00
 80069b0:	40011000 	.word	0x40011000
 80069b4:	40011400 	.word	0x40011400
 80069b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80069bc:	4b0b      	ldr	r3, [pc, #44]	@ (80069ec <HAL_GPIO_Init+0x304>)
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	43db      	mvns	r3, r3
 80069c4:	4909      	ldr	r1, [pc, #36]	@ (80069ec <HAL_GPIO_Init+0x304>)
 80069c6:	4013      	ands	r3, r2
 80069c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80069ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069cc:	3301      	adds	r3, #1
 80069ce:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d6:	fa22 f303 	lsr.w	r3, r2, r3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f47f ae8e 	bne.w	80066fc <HAL_GPIO_Init+0x14>
  }
}
 80069e0:	bf00      	nop
 80069e2:	bf00      	nop
 80069e4:	372c      	adds	r7, #44	@ 0x2c
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bc80      	pop	{r7}
 80069ea:	4770      	bx	lr
 80069ec:	40010400 	.word	0x40010400

080069f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	460b      	mov	r3, r1
 80069fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	689a      	ldr	r2, [r3, #8]
 8006a00:	887b      	ldrh	r3, [r7, #2]
 8006a02:	4013      	ands	r3, r2
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d002      	beq.n	8006a0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	73fb      	strb	r3, [r7, #15]
 8006a0c:	e001      	b.n	8006a12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3714      	adds	r7, #20
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bc80      	pop	{r7}
 8006a1c:	4770      	bx	lr

08006a1e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a1e:	b480      	push	{r7}
 8006a20:	b083      	sub	sp, #12
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
 8006a26:	460b      	mov	r3, r1
 8006a28:	807b      	strh	r3, [r7, #2]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006a2e:	787b      	ldrb	r3, [r7, #1]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d003      	beq.n	8006a3c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a34:	887a      	ldrh	r2, [r7, #2]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006a3a:	e003      	b.n	8006a44 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006a3c:	887b      	ldrh	r3, [r7, #2]
 8006a3e:	041a      	lsls	r2, r3, #16
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	611a      	str	r2, [r3, #16]
}
 8006a44:	bf00      	nop
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bc80      	pop	{r7}
 8006a4c:	4770      	bx	lr
	...

08006a50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	4603      	mov	r3, r0
 8006a58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006a5a:	4b08      	ldr	r3, [pc, #32]	@ (8006a7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a5c:	695a      	ldr	r2, [r3, #20]
 8006a5e:	88fb      	ldrh	r3, [r7, #6]
 8006a60:	4013      	ands	r3, r2
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d006      	beq.n	8006a74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006a66:	4a05      	ldr	r2, [pc, #20]	@ (8006a7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a68:	88fb      	ldrh	r3, [r7, #6]
 8006a6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006a6c:	88fb      	ldrh	r3, [r7, #6]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7fe fa8e 	bl	8004f90 <HAL_GPIO_EXTI_Callback>
  }
}
 8006a74:	bf00      	nop
 8006a76:	3708      	adds	r7, #8
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	40010400 	.word	0x40010400

08006a80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d101      	bne.n	8006a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e272      	b.n	8006f78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 0301 	and.w	r3, r3, #1
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f000 8087 	beq.w	8006bae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006aa0:	4b92      	ldr	r3, [pc, #584]	@ (8006cec <HAL_RCC_OscConfig+0x26c>)
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	f003 030c 	and.w	r3, r3, #12
 8006aa8:	2b04      	cmp	r3, #4
 8006aaa:	d00c      	beq.n	8006ac6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006aac:	4b8f      	ldr	r3, [pc, #572]	@ (8006cec <HAL_RCC_OscConfig+0x26c>)
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f003 030c 	and.w	r3, r3, #12
 8006ab4:	2b08      	cmp	r3, #8
 8006ab6:	d112      	bne.n	8006ade <HAL_RCC_OscConfig+0x5e>
 8006ab8:	4b8c      	ldr	r3, [pc, #560]	@ (8006cec <HAL_RCC_OscConfig+0x26c>)
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ac0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ac4:	d10b      	bne.n	8006ade <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ac6:	4b89      	ldr	r3, [pc, #548]	@ (8006cec <HAL_RCC_OscConfig+0x26c>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d06c      	beq.n	8006bac <HAL_RCC_OscConfig+0x12c>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d168      	bne.n	8006bac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e24c      	b.n	8006f78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ae6:	d106      	bne.n	8006af6 <HAL_RCC_OscConfig+0x76>
 8006ae8:	4b80      	ldr	r3, [pc, #512]	@ (8006cec <HAL_RCC_OscConfig+0x26c>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a7f      	ldr	r2, [pc, #508]	@ (8006cec <HAL_RCC_OscConfig+0x26c>)
 8006aee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006af2:	6013      	str	r3, [r2, #0]
 8006af4:	e02e      	b.n	8006b54 <HAL_RCC_OscConfig+0xd4>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10c      	bne.n	8006b18 <HAL_RCC_OscConfig+0x98>
 8006afe:	4b7b      	ldr	r3, [pc, #492]	@ (8006cec <HAL_RCC_OscConfig+0x26c>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a7a      	ldr	r2, [pc, #488]	@ (8006cec <HAL_RCC_OscConfig+0x26c>)
 8006b04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b08:	6013      	str	r3, [r2, #0]
 8006b0a:	4b78      	ldr	r3, [pc, #480]	@ (8006cec <HAL_RCC_OscConfig+0x26c>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a77      	ldr	r2, [pc, #476]	@ (8006cec <HAL_RCC_OscConfig+0x26c>)
 8006b10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b14:	6013      	str	r3, [r2, #0]
 8006b16:	e01d      	b.n	8006b54 <HAL_RCC_OscConfig+0xd4>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b20:	d10c      	bne.n	8006b3c <HAL_RCC_OscConfig+0xbc>
 8006b22:	4b72      	ldr	r3, [pc, #456]	@ (8006cec <HAL_RCC_OscConfig+0x26c>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a71      	ldr	r2, [pc, #452]	@ (8006cec <HAL_RCC_OscConfig+0x26c>)
 8006b28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b2c:	6013      	str	r3, [r2, #0]
 8006b2e:	4b6f      	ldr	r3, [pc, #444]	@ (8006cec <HAL_RCC_OscConfig+0x26c>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a6e      	ldr	r2, [pc, #440]	@ (8006cec <HAL_RCC_OscConfig+0x26c>)
 8006b34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b38:	6013      	str	r3, [r2, #0]
 8006b3a:	e00b      	b.n	8006b54 <HAL_RCC_OscConfig+0xd4>
 8006b3c:	4b6b      	ldr	r3, [pc, #428]	@ (8006cec <HAL_RCC_OscConfig+0x26c>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a6a      	ldr	r2, [pc, #424]	@ (8006cec <HAL_RCC_OscConfig+0x26c>)
 8006b42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b46:	6013      	str	r3, [r2, #0]
 8006b48:	4b68      	ldr	r3, [pc, #416]	@ (8006cec <HAL_RCC_OscConfig+0x26c>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a67      	ldr	r2, [pc, #412]	@ (8006cec <HAL_RCC_OscConfig+0x26c>)
 8006b4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d013      	beq.n	8006b84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b5c:	f7ff f962 	bl	8005e24 <HAL_GetTick>
 8006b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b62:	e008      	b.n	8006b76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b64:	f7ff f95e 	bl	8005e24 <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	2b64      	cmp	r3, #100	@ 0x64
 8006b70:	d901      	bls.n	8006b76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e200      	b.n	8006f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b76:	4b5d      	ldr	r3, [pc, #372]	@ (8006cec <HAL_RCC_OscConfig+0x26c>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d0f0      	beq.n	8006b64 <HAL_RCC_OscConfig+0xe4>
 8006b82:	e014      	b.n	8006bae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b84:	f7ff f94e 	bl	8005e24 <HAL_GetTick>
 8006b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b8a:	e008      	b.n	8006b9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b8c:	f7ff f94a 	bl	8005e24 <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	2b64      	cmp	r3, #100	@ 0x64
 8006b98:	d901      	bls.n	8006b9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e1ec      	b.n	8006f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b9e:	4b53      	ldr	r3, [pc, #332]	@ (8006cec <HAL_RCC_OscConfig+0x26c>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1f0      	bne.n	8006b8c <HAL_RCC_OscConfig+0x10c>
 8006baa:	e000      	b.n	8006bae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0302 	and.w	r3, r3, #2
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d063      	beq.n	8006c82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006bba:	4b4c      	ldr	r3, [pc, #304]	@ (8006cec <HAL_RCC_OscConfig+0x26c>)
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	f003 030c 	and.w	r3, r3, #12
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00b      	beq.n	8006bde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006bc6:	4b49      	ldr	r3, [pc, #292]	@ (8006cec <HAL_RCC_OscConfig+0x26c>)
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f003 030c 	and.w	r3, r3, #12
 8006bce:	2b08      	cmp	r3, #8
 8006bd0:	d11c      	bne.n	8006c0c <HAL_RCC_OscConfig+0x18c>
 8006bd2:	4b46      	ldr	r3, [pc, #280]	@ (8006cec <HAL_RCC_OscConfig+0x26c>)
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d116      	bne.n	8006c0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bde:	4b43      	ldr	r3, [pc, #268]	@ (8006cec <HAL_RCC_OscConfig+0x26c>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d005      	beq.n	8006bf6 <HAL_RCC_OscConfig+0x176>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d001      	beq.n	8006bf6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e1c0      	b.n	8006f78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bf6:	4b3d      	ldr	r3, [pc, #244]	@ (8006cec <HAL_RCC_OscConfig+0x26c>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	00db      	lsls	r3, r3, #3
 8006c04:	4939      	ldr	r1, [pc, #228]	@ (8006cec <HAL_RCC_OscConfig+0x26c>)
 8006c06:	4313      	orrs	r3, r2
 8006c08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c0a:	e03a      	b.n	8006c82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d020      	beq.n	8006c56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c14:	4b36      	ldr	r3, [pc, #216]	@ (8006cf0 <HAL_RCC_OscConfig+0x270>)
 8006c16:	2201      	movs	r2, #1
 8006c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c1a:	f7ff f903 	bl	8005e24 <HAL_GetTick>
 8006c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c20:	e008      	b.n	8006c34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c22:	f7ff f8ff 	bl	8005e24 <HAL_GetTick>
 8006c26:	4602      	mov	r2, r0
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	d901      	bls.n	8006c34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006c30:	2303      	movs	r3, #3
 8006c32:	e1a1      	b.n	8006f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c34:	4b2d      	ldr	r3, [pc, #180]	@ (8006cec <HAL_RCC_OscConfig+0x26c>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0302 	and.w	r3, r3, #2
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d0f0      	beq.n	8006c22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c40:	4b2a      	ldr	r3, [pc, #168]	@ (8006cec <HAL_RCC_OscConfig+0x26c>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	695b      	ldr	r3, [r3, #20]
 8006c4c:	00db      	lsls	r3, r3, #3
 8006c4e:	4927      	ldr	r1, [pc, #156]	@ (8006cec <HAL_RCC_OscConfig+0x26c>)
 8006c50:	4313      	orrs	r3, r2
 8006c52:	600b      	str	r3, [r1, #0]
 8006c54:	e015      	b.n	8006c82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c56:	4b26      	ldr	r3, [pc, #152]	@ (8006cf0 <HAL_RCC_OscConfig+0x270>)
 8006c58:	2200      	movs	r2, #0
 8006c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c5c:	f7ff f8e2 	bl	8005e24 <HAL_GetTick>
 8006c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c62:	e008      	b.n	8006c76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c64:	f7ff f8de 	bl	8005e24 <HAL_GetTick>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d901      	bls.n	8006c76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e180      	b.n	8006f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c76:	4b1d      	ldr	r3, [pc, #116]	@ (8006cec <HAL_RCC_OscConfig+0x26c>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1f0      	bne.n	8006c64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0308 	and.w	r3, r3, #8
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d03a      	beq.n	8006d04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	699b      	ldr	r3, [r3, #24]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d019      	beq.n	8006cca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c96:	4b17      	ldr	r3, [pc, #92]	@ (8006cf4 <HAL_RCC_OscConfig+0x274>)
 8006c98:	2201      	movs	r2, #1
 8006c9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c9c:	f7ff f8c2 	bl	8005e24 <HAL_GetTick>
 8006ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ca2:	e008      	b.n	8006cb6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ca4:	f7ff f8be 	bl	8005e24 <HAL_GetTick>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	1ad3      	subs	r3, r2, r3
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	d901      	bls.n	8006cb6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	e160      	b.n	8006f78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8006cec <HAL_RCC_OscConfig+0x26c>)
 8006cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cba:	f003 0302 	and.w	r3, r3, #2
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d0f0      	beq.n	8006ca4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006cc2:	2001      	movs	r0, #1
 8006cc4:	f000 face 	bl	8007264 <RCC_Delay>
 8006cc8:	e01c      	b.n	8006d04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cca:	4b0a      	ldr	r3, [pc, #40]	@ (8006cf4 <HAL_RCC_OscConfig+0x274>)
 8006ccc:	2200      	movs	r2, #0
 8006cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cd0:	f7ff f8a8 	bl	8005e24 <HAL_GetTick>
 8006cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cd6:	e00f      	b.n	8006cf8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cd8:	f7ff f8a4 	bl	8005e24 <HAL_GetTick>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d908      	bls.n	8006cf8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e146      	b.n	8006f78 <HAL_RCC_OscConfig+0x4f8>
 8006cea:	bf00      	nop
 8006cec:	40021000 	.word	0x40021000
 8006cf0:	42420000 	.word	0x42420000
 8006cf4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cf8:	4b92      	ldr	r3, [pc, #584]	@ (8006f44 <HAL_RCC_OscConfig+0x4c4>)
 8006cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cfc:	f003 0302 	and.w	r3, r3, #2
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1e9      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 0304 	and.w	r3, r3, #4
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f000 80a6 	beq.w	8006e5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d12:	2300      	movs	r3, #0
 8006d14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d16:	4b8b      	ldr	r3, [pc, #556]	@ (8006f44 <HAL_RCC_OscConfig+0x4c4>)
 8006d18:	69db      	ldr	r3, [r3, #28]
 8006d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10d      	bne.n	8006d3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d22:	4b88      	ldr	r3, [pc, #544]	@ (8006f44 <HAL_RCC_OscConfig+0x4c4>)
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	4a87      	ldr	r2, [pc, #540]	@ (8006f44 <HAL_RCC_OscConfig+0x4c4>)
 8006d28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d2c:	61d3      	str	r3, [r2, #28]
 8006d2e:	4b85      	ldr	r3, [pc, #532]	@ (8006f44 <HAL_RCC_OscConfig+0x4c4>)
 8006d30:	69db      	ldr	r3, [r3, #28]
 8006d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d36:	60bb      	str	r3, [r7, #8]
 8006d38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d3e:	4b82      	ldr	r3, [pc, #520]	@ (8006f48 <HAL_RCC_OscConfig+0x4c8>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d118      	bne.n	8006d7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d4a:	4b7f      	ldr	r3, [pc, #508]	@ (8006f48 <HAL_RCC_OscConfig+0x4c8>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a7e      	ldr	r2, [pc, #504]	@ (8006f48 <HAL_RCC_OscConfig+0x4c8>)
 8006d50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d56:	f7ff f865 	bl	8005e24 <HAL_GetTick>
 8006d5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d5c:	e008      	b.n	8006d70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d5e:	f7ff f861 	bl	8005e24 <HAL_GetTick>
 8006d62:	4602      	mov	r2, r0
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	2b64      	cmp	r3, #100	@ 0x64
 8006d6a:	d901      	bls.n	8006d70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e103      	b.n	8006f78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d70:	4b75      	ldr	r3, [pc, #468]	@ (8006f48 <HAL_RCC_OscConfig+0x4c8>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d0f0      	beq.n	8006d5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d106      	bne.n	8006d92 <HAL_RCC_OscConfig+0x312>
 8006d84:	4b6f      	ldr	r3, [pc, #444]	@ (8006f44 <HAL_RCC_OscConfig+0x4c4>)
 8006d86:	6a1b      	ldr	r3, [r3, #32]
 8006d88:	4a6e      	ldr	r2, [pc, #440]	@ (8006f44 <HAL_RCC_OscConfig+0x4c4>)
 8006d8a:	f043 0301 	orr.w	r3, r3, #1
 8006d8e:	6213      	str	r3, [r2, #32]
 8006d90:	e02d      	b.n	8006dee <HAL_RCC_OscConfig+0x36e>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d10c      	bne.n	8006db4 <HAL_RCC_OscConfig+0x334>
 8006d9a:	4b6a      	ldr	r3, [pc, #424]	@ (8006f44 <HAL_RCC_OscConfig+0x4c4>)
 8006d9c:	6a1b      	ldr	r3, [r3, #32]
 8006d9e:	4a69      	ldr	r2, [pc, #420]	@ (8006f44 <HAL_RCC_OscConfig+0x4c4>)
 8006da0:	f023 0301 	bic.w	r3, r3, #1
 8006da4:	6213      	str	r3, [r2, #32]
 8006da6:	4b67      	ldr	r3, [pc, #412]	@ (8006f44 <HAL_RCC_OscConfig+0x4c4>)
 8006da8:	6a1b      	ldr	r3, [r3, #32]
 8006daa:	4a66      	ldr	r2, [pc, #408]	@ (8006f44 <HAL_RCC_OscConfig+0x4c4>)
 8006dac:	f023 0304 	bic.w	r3, r3, #4
 8006db0:	6213      	str	r3, [r2, #32]
 8006db2:	e01c      	b.n	8006dee <HAL_RCC_OscConfig+0x36e>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	2b05      	cmp	r3, #5
 8006dba:	d10c      	bne.n	8006dd6 <HAL_RCC_OscConfig+0x356>
 8006dbc:	4b61      	ldr	r3, [pc, #388]	@ (8006f44 <HAL_RCC_OscConfig+0x4c4>)
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	4a60      	ldr	r2, [pc, #384]	@ (8006f44 <HAL_RCC_OscConfig+0x4c4>)
 8006dc2:	f043 0304 	orr.w	r3, r3, #4
 8006dc6:	6213      	str	r3, [r2, #32]
 8006dc8:	4b5e      	ldr	r3, [pc, #376]	@ (8006f44 <HAL_RCC_OscConfig+0x4c4>)
 8006dca:	6a1b      	ldr	r3, [r3, #32]
 8006dcc:	4a5d      	ldr	r2, [pc, #372]	@ (8006f44 <HAL_RCC_OscConfig+0x4c4>)
 8006dce:	f043 0301 	orr.w	r3, r3, #1
 8006dd2:	6213      	str	r3, [r2, #32]
 8006dd4:	e00b      	b.n	8006dee <HAL_RCC_OscConfig+0x36e>
 8006dd6:	4b5b      	ldr	r3, [pc, #364]	@ (8006f44 <HAL_RCC_OscConfig+0x4c4>)
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
 8006dda:	4a5a      	ldr	r2, [pc, #360]	@ (8006f44 <HAL_RCC_OscConfig+0x4c4>)
 8006ddc:	f023 0301 	bic.w	r3, r3, #1
 8006de0:	6213      	str	r3, [r2, #32]
 8006de2:	4b58      	ldr	r3, [pc, #352]	@ (8006f44 <HAL_RCC_OscConfig+0x4c4>)
 8006de4:	6a1b      	ldr	r3, [r3, #32]
 8006de6:	4a57      	ldr	r2, [pc, #348]	@ (8006f44 <HAL_RCC_OscConfig+0x4c4>)
 8006de8:	f023 0304 	bic.w	r3, r3, #4
 8006dec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d015      	beq.n	8006e22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006df6:	f7ff f815 	bl	8005e24 <HAL_GetTick>
 8006dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dfc:	e00a      	b.n	8006e14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dfe:	f7ff f811 	bl	8005e24 <HAL_GetTick>
 8006e02:	4602      	mov	r2, r0
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d901      	bls.n	8006e14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006e10:	2303      	movs	r3, #3
 8006e12:	e0b1      	b.n	8006f78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e14:	4b4b      	ldr	r3, [pc, #300]	@ (8006f44 <HAL_RCC_OscConfig+0x4c4>)
 8006e16:	6a1b      	ldr	r3, [r3, #32]
 8006e18:	f003 0302 	and.w	r3, r3, #2
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d0ee      	beq.n	8006dfe <HAL_RCC_OscConfig+0x37e>
 8006e20:	e014      	b.n	8006e4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e22:	f7fe ffff 	bl	8005e24 <HAL_GetTick>
 8006e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e28:	e00a      	b.n	8006e40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e2a:	f7fe fffb 	bl	8005e24 <HAL_GetTick>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	1ad3      	subs	r3, r2, r3
 8006e34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d901      	bls.n	8006e40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e09b      	b.n	8006f78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e40:	4b40      	ldr	r3, [pc, #256]	@ (8006f44 <HAL_RCC_OscConfig+0x4c4>)
 8006e42:	6a1b      	ldr	r3, [r3, #32]
 8006e44:	f003 0302 	and.w	r3, r3, #2
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1ee      	bne.n	8006e2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006e4c:	7dfb      	ldrb	r3, [r7, #23]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d105      	bne.n	8006e5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e52:	4b3c      	ldr	r3, [pc, #240]	@ (8006f44 <HAL_RCC_OscConfig+0x4c4>)
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	4a3b      	ldr	r2, [pc, #236]	@ (8006f44 <HAL_RCC_OscConfig+0x4c4>)
 8006e58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	69db      	ldr	r3, [r3, #28]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f000 8087 	beq.w	8006f76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006e68:	4b36      	ldr	r3, [pc, #216]	@ (8006f44 <HAL_RCC_OscConfig+0x4c4>)
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	f003 030c 	and.w	r3, r3, #12
 8006e70:	2b08      	cmp	r3, #8
 8006e72:	d061      	beq.n	8006f38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	69db      	ldr	r3, [r3, #28]
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	d146      	bne.n	8006f0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e7c:	4b33      	ldr	r3, [pc, #204]	@ (8006f4c <HAL_RCC_OscConfig+0x4cc>)
 8006e7e:	2200      	movs	r2, #0
 8006e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e82:	f7fe ffcf 	bl	8005e24 <HAL_GetTick>
 8006e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e88:	e008      	b.n	8006e9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e8a:	f7fe ffcb 	bl	8005e24 <HAL_GetTick>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d901      	bls.n	8006e9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	e06d      	b.n	8006f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e9c:	4b29      	ldr	r3, [pc, #164]	@ (8006f44 <HAL_RCC_OscConfig+0x4c4>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d1f0      	bne.n	8006e8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a1b      	ldr	r3, [r3, #32]
 8006eac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006eb0:	d108      	bne.n	8006ec4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006eb2:	4b24      	ldr	r3, [pc, #144]	@ (8006f44 <HAL_RCC_OscConfig+0x4c4>)
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	4921      	ldr	r1, [pc, #132]	@ (8006f44 <HAL_RCC_OscConfig+0x4c4>)
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ec4:	4b1f      	ldr	r3, [pc, #124]	@ (8006f44 <HAL_RCC_OscConfig+0x4c4>)
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a19      	ldr	r1, [r3, #32]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed4:	430b      	orrs	r3, r1
 8006ed6:	491b      	ldr	r1, [pc, #108]	@ (8006f44 <HAL_RCC_OscConfig+0x4c4>)
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006edc:	4b1b      	ldr	r3, [pc, #108]	@ (8006f4c <HAL_RCC_OscConfig+0x4cc>)
 8006ede:	2201      	movs	r2, #1
 8006ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ee2:	f7fe ff9f 	bl	8005e24 <HAL_GetTick>
 8006ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006ee8:	e008      	b.n	8006efc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006eea:	f7fe ff9b 	bl	8005e24 <HAL_GetTick>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	d901      	bls.n	8006efc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e03d      	b.n	8006f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006efc:	4b11      	ldr	r3, [pc, #68]	@ (8006f44 <HAL_RCC_OscConfig+0x4c4>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d0f0      	beq.n	8006eea <HAL_RCC_OscConfig+0x46a>
 8006f08:	e035      	b.n	8006f76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f0a:	4b10      	ldr	r3, [pc, #64]	@ (8006f4c <HAL_RCC_OscConfig+0x4cc>)
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f10:	f7fe ff88 	bl	8005e24 <HAL_GetTick>
 8006f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f16:	e008      	b.n	8006f2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f18:	f7fe ff84 	bl	8005e24 <HAL_GetTick>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d901      	bls.n	8006f2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	e026      	b.n	8006f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f2a:	4b06      	ldr	r3, [pc, #24]	@ (8006f44 <HAL_RCC_OscConfig+0x4c4>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1f0      	bne.n	8006f18 <HAL_RCC_OscConfig+0x498>
 8006f36:	e01e      	b.n	8006f76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	69db      	ldr	r3, [r3, #28]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d107      	bne.n	8006f50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e019      	b.n	8006f78 <HAL_RCC_OscConfig+0x4f8>
 8006f44:	40021000 	.word	0x40021000
 8006f48:	40007000 	.word	0x40007000
 8006f4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006f50:	4b0b      	ldr	r3, [pc, #44]	@ (8006f80 <HAL_RCC_OscConfig+0x500>)
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6a1b      	ldr	r3, [r3, #32]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d106      	bne.n	8006f72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d001      	beq.n	8006f76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e000      	b.n	8006f78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3718      	adds	r7, #24
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	40021000 	.word	0x40021000

08006f84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d101      	bne.n	8006f98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e0d0      	b.n	800713a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f98:	4b6a      	ldr	r3, [pc, #424]	@ (8007144 <HAL_RCC_ClockConfig+0x1c0>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 0307 	and.w	r3, r3, #7
 8006fa0:	683a      	ldr	r2, [r7, #0]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d910      	bls.n	8006fc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fa6:	4b67      	ldr	r3, [pc, #412]	@ (8007144 <HAL_RCC_ClockConfig+0x1c0>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f023 0207 	bic.w	r2, r3, #7
 8006fae:	4965      	ldr	r1, [pc, #404]	@ (8007144 <HAL_RCC_ClockConfig+0x1c0>)
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fb6:	4b63      	ldr	r3, [pc, #396]	@ (8007144 <HAL_RCC_ClockConfig+0x1c0>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 0307 	and.w	r3, r3, #7
 8006fbe:	683a      	ldr	r2, [r7, #0]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d001      	beq.n	8006fc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e0b8      	b.n	800713a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0302 	and.w	r3, r3, #2
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d020      	beq.n	8007016 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0304 	and.w	r3, r3, #4
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d005      	beq.n	8006fec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fe0:	4b59      	ldr	r3, [pc, #356]	@ (8007148 <HAL_RCC_ClockConfig+0x1c4>)
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	4a58      	ldr	r2, [pc, #352]	@ (8007148 <HAL_RCC_ClockConfig+0x1c4>)
 8006fe6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006fea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0308 	and.w	r3, r3, #8
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d005      	beq.n	8007004 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ff8:	4b53      	ldr	r3, [pc, #332]	@ (8007148 <HAL_RCC_ClockConfig+0x1c4>)
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	4a52      	ldr	r2, [pc, #328]	@ (8007148 <HAL_RCC_ClockConfig+0x1c4>)
 8006ffe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8007002:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007004:	4b50      	ldr	r3, [pc, #320]	@ (8007148 <HAL_RCC_ClockConfig+0x1c4>)
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	494d      	ldr	r1, [pc, #308]	@ (8007148 <HAL_RCC_ClockConfig+0x1c4>)
 8007012:	4313      	orrs	r3, r2
 8007014:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	2b00      	cmp	r3, #0
 8007020:	d040      	beq.n	80070a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	2b01      	cmp	r3, #1
 8007028:	d107      	bne.n	800703a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800702a:	4b47      	ldr	r3, [pc, #284]	@ (8007148 <HAL_RCC_ClockConfig+0x1c4>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d115      	bne.n	8007062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e07f      	b.n	800713a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	2b02      	cmp	r3, #2
 8007040:	d107      	bne.n	8007052 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007042:	4b41      	ldr	r3, [pc, #260]	@ (8007148 <HAL_RCC_ClockConfig+0x1c4>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800704a:	2b00      	cmp	r3, #0
 800704c:	d109      	bne.n	8007062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e073      	b.n	800713a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007052:	4b3d      	ldr	r3, [pc, #244]	@ (8007148 <HAL_RCC_ClockConfig+0x1c4>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0302 	and.w	r3, r3, #2
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e06b      	b.n	800713a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007062:	4b39      	ldr	r3, [pc, #228]	@ (8007148 <HAL_RCC_ClockConfig+0x1c4>)
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	f023 0203 	bic.w	r2, r3, #3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	4936      	ldr	r1, [pc, #216]	@ (8007148 <HAL_RCC_ClockConfig+0x1c4>)
 8007070:	4313      	orrs	r3, r2
 8007072:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007074:	f7fe fed6 	bl	8005e24 <HAL_GetTick>
 8007078:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800707a:	e00a      	b.n	8007092 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800707c:	f7fe fed2 	bl	8005e24 <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	f241 3288 	movw	r2, #5000	@ 0x1388
 800708a:	4293      	cmp	r3, r2
 800708c:	d901      	bls.n	8007092 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e053      	b.n	800713a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007092:	4b2d      	ldr	r3, [pc, #180]	@ (8007148 <HAL_RCC_ClockConfig+0x1c4>)
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	f003 020c 	and.w	r2, r3, #12
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d1eb      	bne.n	800707c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80070a4:	4b27      	ldr	r3, [pc, #156]	@ (8007144 <HAL_RCC_ClockConfig+0x1c0>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0307 	and.w	r3, r3, #7
 80070ac:	683a      	ldr	r2, [r7, #0]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d210      	bcs.n	80070d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070b2:	4b24      	ldr	r3, [pc, #144]	@ (8007144 <HAL_RCC_ClockConfig+0x1c0>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f023 0207 	bic.w	r2, r3, #7
 80070ba:	4922      	ldr	r1, [pc, #136]	@ (8007144 <HAL_RCC_ClockConfig+0x1c0>)
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	4313      	orrs	r3, r2
 80070c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070c2:	4b20      	ldr	r3, [pc, #128]	@ (8007144 <HAL_RCC_ClockConfig+0x1c0>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 0307 	and.w	r3, r3, #7
 80070ca:	683a      	ldr	r2, [r7, #0]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d001      	beq.n	80070d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e032      	b.n	800713a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0304 	and.w	r3, r3, #4
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d008      	beq.n	80070f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070e0:	4b19      	ldr	r3, [pc, #100]	@ (8007148 <HAL_RCC_ClockConfig+0x1c4>)
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	4916      	ldr	r1, [pc, #88]	@ (8007148 <HAL_RCC_ClockConfig+0x1c4>)
 80070ee:	4313      	orrs	r3, r2
 80070f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 0308 	and.w	r3, r3, #8
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d009      	beq.n	8007112 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80070fe:	4b12      	ldr	r3, [pc, #72]	@ (8007148 <HAL_RCC_ClockConfig+0x1c4>)
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	00db      	lsls	r3, r3, #3
 800710c:	490e      	ldr	r1, [pc, #56]	@ (8007148 <HAL_RCC_ClockConfig+0x1c4>)
 800710e:	4313      	orrs	r3, r2
 8007110:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007112:	f000 f821 	bl	8007158 <HAL_RCC_GetSysClockFreq>
 8007116:	4602      	mov	r2, r0
 8007118:	4b0b      	ldr	r3, [pc, #44]	@ (8007148 <HAL_RCC_ClockConfig+0x1c4>)
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	091b      	lsrs	r3, r3, #4
 800711e:	f003 030f 	and.w	r3, r3, #15
 8007122:	490a      	ldr	r1, [pc, #40]	@ (800714c <HAL_RCC_ClockConfig+0x1c8>)
 8007124:	5ccb      	ldrb	r3, [r1, r3]
 8007126:	fa22 f303 	lsr.w	r3, r2, r3
 800712a:	4a09      	ldr	r2, [pc, #36]	@ (8007150 <HAL_RCC_ClockConfig+0x1cc>)
 800712c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800712e:	4b09      	ldr	r3, [pc, #36]	@ (8007154 <HAL_RCC_ClockConfig+0x1d0>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4618      	mov	r0, r3
 8007134:	f7fe fe34 	bl	8005da0 <HAL_InitTick>

  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	40022000 	.word	0x40022000
 8007148:	40021000 	.word	0x40021000
 800714c:	0800bec4 	.word	0x0800bec4
 8007150:	20000004 	.word	0x20000004
 8007154:	20000008 	.word	0x20000008

08007158 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007158:	b480      	push	{r7}
 800715a:	b087      	sub	sp, #28
 800715c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800715e:	2300      	movs	r3, #0
 8007160:	60fb      	str	r3, [r7, #12]
 8007162:	2300      	movs	r3, #0
 8007164:	60bb      	str	r3, [r7, #8]
 8007166:	2300      	movs	r3, #0
 8007168:	617b      	str	r3, [r7, #20]
 800716a:	2300      	movs	r3, #0
 800716c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800716e:	2300      	movs	r3, #0
 8007170:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007172:	4b1e      	ldr	r3, [pc, #120]	@ (80071ec <HAL_RCC_GetSysClockFreq+0x94>)
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f003 030c 	and.w	r3, r3, #12
 800717e:	2b04      	cmp	r3, #4
 8007180:	d002      	beq.n	8007188 <HAL_RCC_GetSysClockFreq+0x30>
 8007182:	2b08      	cmp	r3, #8
 8007184:	d003      	beq.n	800718e <HAL_RCC_GetSysClockFreq+0x36>
 8007186:	e027      	b.n	80071d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007188:	4b19      	ldr	r3, [pc, #100]	@ (80071f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800718a:	613b      	str	r3, [r7, #16]
      break;
 800718c:	e027      	b.n	80071de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	0c9b      	lsrs	r3, r3, #18
 8007192:	f003 030f 	and.w	r3, r3, #15
 8007196:	4a17      	ldr	r2, [pc, #92]	@ (80071f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007198:	5cd3      	ldrb	r3, [r2, r3]
 800719a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d010      	beq.n	80071c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80071a6:	4b11      	ldr	r3, [pc, #68]	@ (80071ec <HAL_RCC_GetSysClockFreq+0x94>)
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	0c5b      	lsrs	r3, r3, #17
 80071ac:	f003 0301 	and.w	r3, r3, #1
 80071b0:	4a11      	ldr	r2, [pc, #68]	@ (80071f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80071b2:	5cd3      	ldrb	r3, [r2, r3]
 80071b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a0d      	ldr	r2, [pc, #52]	@ (80071f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80071ba:	fb03 f202 	mul.w	r2, r3, r2
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c4:	617b      	str	r3, [r7, #20]
 80071c6:	e004      	b.n	80071d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a0c      	ldr	r2, [pc, #48]	@ (80071fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80071cc:	fb02 f303 	mul.w	r3, r2, r3
 80071d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	613b      	str	r3, [r7, #16]
      break;
 80071d6:	e002      	b.n	80071de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80071d8:	4b05      	ldr	r3, [pc, #20]	@ (80071f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80071da:	613b      	str	r3, [r7, #16]
      break;
 80071dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80071de:	693b      	ldr	r3, [r7, #16]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	371c      	adds	r7, #28
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bc80      	pop	{r7}
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	40021000 	.word	0x40021000
 80071f0:	007a1200 	.word	0x007a1200
 80071f4:	0800bedc 	.word	0x0800bedc
 80071f8:	0800beec 	.word	0x0800beec
 80071fc:	003d0900 	.word	0x003d0900

08007200 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007200:	b480      	push	{r7}
 8007202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007204:	4b02      	ldr	r3, [pc, #8]	@ (8007210 <HAL_RCC_GetHCLKFreq+0x10>)
 8007206:	681b      	ldr	r3, [r3, #0]
}
 8007208:	4618      	mov	r0, r3
 800720a:	46bd      	mov	sp, r7
 800720c:	bc80      	pop	{r7}
 800720e:	4770      	bx	lr
 8007210:	20000004 	.word	0x20000004

08007214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007218:	f7ff fff2 	bl	8007200 <HAL_RCC_GetHCLKFreq>
 800721c:	4602      	mov	r2, r0
 800721e:	4b05      	ldr	r3, [pc, #20]	@ (8007234 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	0a1b      	lsrs	r3, r3, #8
 8007224:	f003 0307 	and.w	r3, r3, #7
 8007228:	4903      	ldr	r1, [pc, #12]	@ (8007238 <HAL_RCC_GetPCLK1Freq+0x24>)
 800722a:	5ccb      	ldrb	r3, [r1, r3]
 800722c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007230:	4618      	mov	r0, r3
 8007232:	bd80      	pop	{r7, pc}
 8007234:	40021000 	.word	0x40021000
 8007238:	0800bed4 	.word	0x0800bed4

0800723c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007240:	f7ff ffde 	bl	8007200 <HAL_RCC_GetHCLKFreq>
 8007244:	4602      	mov	r2, r0
 8007246:	4b05      	ldr	r3, [pc, #20]	@ (800725c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	0adb      	lsrs	r3, r3, #11
 800724c:	f003 0307 	and.w	r3, r3, #7
 8007250:	4903      	ldr	r1, [pc, #12]	@ (8007260 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007252:	5ccb      	ldrb	r3, [r1, r3]
 8007254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007258:	4618      	mov	r0, r3
 800725a:	bd80      	pop	{r7, pc}
 800725c:	40021000 	.word	0x40021000
 8007260:	0800bed4 	.word	0x0800bed4

08007264 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800726c:	4b0a      	ldr	r3, [pc, #40]	@ (8007298 <RCC_Delay+0x34>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a0a      	ldr	r2, [pc, #40]	@ (800729c <RCC_Delay+0x38>)
 8007272:	fba2 2303 	umull	r2, r3, r2, r3
 8007276:	0a5b      	lsrs	r3, r3, #9
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	fb02 f303 	mul.w	r3, r2, r3
 800727e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007280:	bf00      	nop
  }
  while (Delay --);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	1e5a      	subs	r2, r3, #1
 8007286:	60fa      	str	r2, [r7, #12]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1f9      	bne.n	8007280 <RCC_Delay+0x1c>
}
 800728c:	bf00      	nop
 800728e:	bf00      	nop
 8007290:	3714      	adds	r7, #20
 8007292:	46bd      	mov	sp, r7
 8007294:	bc80      	pop	{r7}
 8007296:	4770      	bx	lr
 8007298:	20000004 	.word	0x20000004
 800729c:	10624dd3 	.word	0x10624dd3

080072a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80072a8:	2300      	movs	r3, #0
 80072aa:	613b      	str	r3, [r7, #16]
 80072ac:	2300      	movs	r3, #0
 80072ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0301 	and.w	r3, r3, #1
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d07d      	beq.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80072bc:	2300      	movs	r3, #0
 80072be:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072c0:	4b4f      	ldr	r3, [pc, #316]	@ (8007400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072c2:	69db      	ldr	r3, [r3, #28]
 80072c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d10d      	bne.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072cc:	4b4c      	ldr	r3, [pc, #304]	@ (8007400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072ce:	69db      	ldr	r3, [r3, #28]
 80072d0:	4a4b      	ldr	r2, [pc, #300]	@ (8007400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072d6:	61d3      	str	r3, [r2, #28]
 80072d8:	4b49      	ldr	r3, [pc, #292]	@ (8007400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072da:	69db      	ldr	r3, [r3, #28]
 80072dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072e0:	60bb      	str	r3, [r7, #8]
 80072e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072e4:	2301      	movs	r3, #1
 80072e6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072e8:	4b46      	ldr	r3, [pc, #280]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d118      	bne.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80072f4:	4b43      	ldr	r3, [pc, #268]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a42      	ldr	r2, [pc, #264]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80072fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007300:	f7fe fd90 	bl	8005e24 <HAL_GetTick>
 8007304:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007306:	e008      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007308:	f7fe fd8c 	bl	8005e24 <HAL_GetTick>
 800730c:	4602      	mov	r2, r0
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	1ad3      	subs	r3, r2, r3
 8007312:	2b64      	cmp	r3, #100	@ 0x64
 8007314:	d901      	bls.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007316:	2303      	movs	r3, #3
 8007318:	e06d      	b.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800731a:	4b3a      	ldr	r3, [pc, #232]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007322:	2b00      	cmp	r3, #0
 8007324:	d0f0      	beq.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007326:	4b36      	ldr	r3, [pc, #216]	@ (8007400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800732e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d02e      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	429a      	cmp	r2, r3
 8007342:	d027      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007344:	4b2e      	ldr	r3, [pc, #184]	@ (8007400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007346:	6a1b      	ldr	r3, [r3, #32]
 8007348:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800734c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800734e:	4b2e      	ldr	r3, [pc, #184]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007350:	2201      	movs	r2, #1
 8007352:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007354:	4b2c      	ldr	r3, [pc, #176]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007356:	2200      	movs	r2, #0
 8007358:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800735a:	4a29      	ldr	r2, [pc, #164]	@ (8007400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f003 0301 	and.w	r3, r3, #1
 8007366:	2b00      	cmp	r3, #0
 8007368:	d014      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800736a:	f7fe fd5b 	bl	8005e24 <HAL_GetTick>
 800736e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007370:	e00a      	b.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007372:	f7fe fd57 	bl	8005e24 <HAL_GetTick>
 8007376:	4602      	mov	r2, r0
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007380:	4293      	cmp	r3, r2
 8007382:	d901      	bls.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007384:	2303      	movs	r3, #3
 8007386:	e036      	b.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007388:	4b1d      	ldr	r3, [pc, #116]	@ (8007400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800738a:	6a1b      	ldr	r3, [r3, #32]
 800738c:	f003 0302 	and.w	r3, r3, #2
 8007390:	2b00      	cmp	r3, #0
 8007392:	d0ee      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007394:	4b1a      	ldr	r3, [pc, #104]	@ (8007400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007396:	6a1b      	ldr	r3, [r3, #32]
 8007398:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	4917      	ldr	r1, [pc, #92]	@ (8007400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073a2:	4313      	orrs	r3, r2
 80073a4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80073a6:	7dfb      	ldrb	r3, [r7, #23]
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d105      	bne.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073ac:	4b14      	ldr	r3, [pc, #80]	@ (8007400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073ae:	69db      	ldr	r3, [r3, #28]
 80073b0:	4a13      	ldr	r2, [pc, #76]	@ (8007400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 0302 	and.w	r3, r3, #2
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d008      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80073c4:	4b0e      	ldr	r3, [pc, #56]	@ (8007400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	490b      	ldr	r1, [pc, #44]	@ (8007400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073d2:	4313      	orrs	r3, r2
 80073d4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 0310 	and.w	r3, r3, #16
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d008      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80073e2:	4b07      	ldr	r3, [pc, #28]	@ (8007400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	4904      	ldr	r1, [pc, #16]	@ (8007400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073f0:	4313      	orrs	r3, r2
 80073f2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3718      	adds	r7, #24
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	40021000 	.word	0x40021000
 8007404:	40007000 	.word	0x40007000
 8007408:	42420440 	.word	0x42420440

0800740c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d101      	bne.n	800741e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e076      	b.n	800750c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007422:	2b00      	cmp	r3, #0
 8007424:	d108      	bne.n	8007438 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800742e:	d009      	beq.n	8007444 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	61da      	str	r2, [r3, #28]
 8007436:	e005      	b.n	8007444 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007450:	b2db      	uxtb	r3, r3
 8007452:	2b00      	cmp	r3, #0
 8007454:	d106      	bne.n	8007464 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f7fe fa2a 	bl	80058b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2202      	movs	r2, #2
 8007468:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800747a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800748c:	431a      	orrs	r2, r3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007496:	431a      	orrs	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	f003 0302 	and.w	r3, r3, #2
 80074a0:	431a      	orrs	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	695b      	ldr	r3, [r3, #20]
 80074a6:	f003 0301 	and.w	r3, r3, #1
 80074aa:	431a      	orrs	r2, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074b4:	431a      	orrs	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	69db      	ldr	r3, [r3, #28]
 80074ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074be:	431a      	orrs	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a1b      	ldr	r3, [r3, #32]
 80074c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074c8:	ea42 0103 	orr.w	r1, r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074d0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	430a      	orrs	r2, r1
 80074da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	0c1a      	lsrs	r2, r3, #16
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f002 0204 	and.w	r2, r2, #4
 80074ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	69da      	ldr	r2, [r3, #28]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80074fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3708      	adds	r7, #8
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b088      	sub	sp, #32
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	603b      	str	r3, [r7, #0]
 8007520:	4613      	mov	r3, r2
 8007522:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007524:	2300      	movs	r3, #0
 8007526:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800752e:	2b01      	cmp	r3, #1
 8007530:	d101      	bne.n	8007536 <HAL_SPI_Transmit+0x22>
 8007532:	2302      	movs	r3, #2
 8007534:	e12d      	b.n	8007792 <HAL_SPI_Transmit+0x27e>
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800753e:	f7fe fc71 	bl	8005e24 <HAL_GetTick>
 8007542:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007544:	88fb      	ldrh	r3, [r7, #6]
 8007546:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800754e:	b2db      	uxtb	r3, r3
 8007550:	2b01      	cmp	r3, #1
 8007552:	d002      	beq.n	800755a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007554:	2302      	movs	r3, #2
 8007556:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007558:	e116      	b.n	8007788 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d002      	beq.n	8007566 <HAL_SPI_Transmit+0x52>
 8007560:	88fb      	ldrh	r3, [r7, #6]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d102      	bne.n	800756c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	77fb      	strb	r3, [r7, #31]
    goto error;
 800756a:	e10d      	b.n	8007788 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2203      	movs	r2, #3
 8007570:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2200      	movs	r2, #0
 8007578:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	68ba      	ldr	r2, [r7, #8]
 800757e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	88fa      	ldrh	r2, [r7, #6]
 8007584:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	88fa      	ldrh	r2, [r7, #6]
 800758a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2200      	movs	r2, #0
 800759c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075b2:	d10f      	bne.n	80075d4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80075d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075de:	2b40      	cmp	r3, #64	@ 0x40
 80075e0:	d007      	beq.n	80075f2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075fa:	d14f      	bne.n	800769c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d002      	beq.n	800760a <HAL_SPI_Transmit+0xf6>
 8007604:	8afb      	ldrh	r3, [r7, #22]
 8007606:	2b01      	cmp	r3, #1
 8007608:	d142      	bne.n	8007690 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800760e:	881a      	ldrh	r2, [r3, #0]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800761a:	1c9a      	adds	r2, r3, #2
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007624:	b29b      	uxth	r3, r3
 8007626:	3b01      	subs	r3, #1
 8007628:	b29a      	uxth	r2, r3
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800762e:	e02f      	b.n	8007690 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	f003 0302 	and.w	r3, r3, #2
 800763a:	2b02      	cmp	r3, #2
 800763c:	d112      	bne.n	8007664 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007642:	881a      	ldrh	r2, [r3, #0]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800764e:	1c9a      	adds	r2, r3, #2
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007658:	b29b      	uxth	r3, r3
 800765a:	3b01      	subs	r3, #1
 800765c:	b29a      	uxth	r2, r3
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007662:	e015      	b.n	8007690 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007664:	f7fe fbde 	bl	8005e24 <HAL_GetTick>
 8007668:	4602      	mov	r2, r0
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	683a      	ldr	r2, [r7, #0]
 8007670:	429a      	cmp	r2, r3
 8007672:	d803      	bhi.n	800767c <HAL_SPI_Transmit+0x168>
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800767a:	d102      	bne.n	8007682 <HAL_SPI_Transmit+0x16e>
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d106      	bne.n	8007690 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8007682:	2303      	movs	r3, #3
 8007684:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2201      	movs	r2, #1
 800768a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800768e:	e07b      	b.n	8007788 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007694:	b29b      	uxth	r3, r3
 8007696:	2b00      	cmp	r3, #0
 8007698:	d1ca      	bne.n	8007630 <HAL_SPI_Transmit+0x11c>
 800769a:	e050      	b.n	800773e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d002      	beq.n	80076aa <HAL_SPI_Transmit+0x196>
 80076a4:	8afb      	ldrh	r3, [r7, #22]
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d144      	bne.n	8007734 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	330c      	adds	r3, #12
 80076b4:	7812      	ldrb	r2, [r2, #0]
 80076b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076bc:	1c5a      	adds	r2, r3, #1
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	3b01      	subs	r3, #1
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80076d0:	e030      	b.n	8007734 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	f003 0302 	and.w	r3, r3, #2
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d113      	bne.n	8007708 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	330c      	adds	r3, #12
 80076ea:	7812      	ldrb	r2, [r2, #0]
 80076ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076f2:	1c5a      	adds	r2, r3, #1
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	3b01      	subs	r3, #1
 8007700:	b29a      	uxth	r2, r3
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007706:	e015      	b.n	8007734 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007708:	f7fe fb8c 	bl	8005e24 <HAL_GetTick>
 800770c:	4602      	mov	r2, r0
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	683a      	ldr	r2, [r7, #0]
 8007714:	429a      	cmp	r2, r3
 8007716:	d803      	bhi.n	8007720 <HAL_SPI_Transmit+0x20c>
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800771e:	d102      	bne.n	8007726 <HAL_SPI_Transmit+0x212>
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d106      	bne.n	8007734 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2201      	movs	r2, #1
 800772e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007732:	e029      	b.n	8007788 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007738:	b29b      	uxth	r3, r3
 800773a:	2b00      	cmp	r3, #0
 800773c:	d1c9      	bne.n	80076d2 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800773e:	69ba      	ldr	r2, [r7, #24]
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f000 f8b2 	bl	80078ac <SPI_EndRxTxTransaction>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d002      	beq.n	8007754 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2220      	movs	r2, #32
 8007752:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d10a      	bne.n	8007772 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800775c:	2300      	movs	r3, #0
 800775e:	613b      	str	r3, [r7, #16]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	613b      	str	r3, [r7, #16]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	613b      	str	r3, [r7, #16]
 8007770:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007776:	2b00      	cmp	r3, #0
 8007778:	d002      	beq.n	8007780 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	77fb      	strb	r3, [r7, #31]
 800777e:	e003      	b.n	8007788 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007790:	7ffb      	ldrb	r3, [r7, #31]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3720      	adds	r7, #32
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
	...

0800779c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b088      	sub	sp, #32
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	603b      	str	r3, [r7, #0]
 80077a8:	4613      	mov	r3, r2
 80077aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80077ac:	f7fe fb3a 	bl	8005e24 <HAL_GetTick>
 80077b0:	4602      	mov	r2, r0
 80077b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077b4:	1a9b      	subs	r3, r3, r2
 80077b6:	683a      	ldr	r2, [r7, #0]
 80077b8:	4413      	add	r3, r2
 80077ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80077bc:	f7fe fb32 	bl	8005e24 <HAL_GetTick>
 80077c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80077c2:	4b39      	ldr	r3, [pc, #228]	@ (80078a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	015b      	lsls	r3, r3, #5
 80077c8:	0d1b      	lsrs	r3, r3, #20
 80077ca:	69fa      	ldr	r2, [r7, #28]
 80077cc:	fb02 f303 	mul.w	r3, r2, r3
 80077d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077d2:	e054      	b.n	800787e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077da:	d050      	beq.n	800787e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80077dc:	f7fe fb22 	bl	8005e24 <HAL_GetTick>
 80077e0:	4602      	mov	r2, r0
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	1ad3      	subs	r3, r2, r3
 80077e6:	69fa      	ldr	r2, [r7, #28]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d902      	bls.n	80077f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d13d      	bne.n	800786e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	685a      	ldr	r2, [r3, #4]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007800:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800780a:	d111      	bne.n	8007830 <SPI_WaitFlagStateUntilTimeout+0x94>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007814:	d004      	beq.n	8007820 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800781e:	d107      	bne.n	8007830 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800782e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007834:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007838:	d10f      	bne.n	800785a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007848:	601a      	str	r2, [r3, #0]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007858:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2201      	movs	r2, #1
 800785e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2200      	movs	r2, #0
 8007866:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800786a:	2303      	movs	r3, #3
 800786c:	e017      	b.n	800789e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d101      	bne.n	8007878 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007874:	2300      	movs	r3, #0
 8007876:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	3b01      	subs	r3, #1
 800787c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	689a      	ldr	r2, [r3, #8]
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	4013      	ands	r3, r2
 8007888:	68ba      	ldr	r2, [r7, #8]
 800788a:	429a      	cmp	r2, r3
 800788c:	bf0c      	ite	eq
 800788e:	2301      	moveq	r3, #1
 8007890:	2300      	movne	r3, #0
 8007892:	b2db      	uxtb	r3, r3
 8007894:	461a      	mov	r2, r3
 8007896:	79fb      	ldrb	r3, [r7, #7]
 8007898:	429a      	cmp	r2, r3
 800789a:	d19b      	bne.n	80077d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3720      	adds	r7, #32
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	20000004 	.word	0x20000004

080078ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b086      	sub	sp, #24
 80078b0:	af02      	add	r7, sp, #8
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	9300      	str	r3, [sp, #0]
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	2200      	movs	r2, #0
 80078c0:	2180      	movs	r1, #128	@ 0x80
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f7ff ff6a 	bl	800779c <SPI_WaitFlagStateUntilTimeout>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d007      	beq.n	80078de <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078d2:	f043 0220 	orr.w	r2, r3, #32
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80078da:	2303      	movs	r3, #3
 80078dc:	e000      	b.n	80078e0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e041      	b.n	800797e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b00      	cmp	r3, #0
 8007904:	d106      	bne.n	8007914 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f7fe f82e 	bl	8005970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2202      	movs	r2, #2
 8007918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	3304      	adds	r3, #4
 8007924:	4619      	mov	r1, r3
 8007926:	4610      	mov	r0, r2
 8007928:	f000 fbdc 	bl	80080e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b082      	sub	sp, #8
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d101      	bne.n	8007998 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	e041      	b.n	8007a1c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d106      	bne.n	80079b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f7fd ffc1 	bl	8005934 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2202      	movs	r2, #2
 80079b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	3304      	adds	r3, #4
 80079c2:	4619      	mov	r1, r3
 80079c4:	4610      	mov	r0, r2
 80079c6:	f000 fb8d 	bl	80080e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2201      	movs	r2, #1
 80079de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2201      	movs	r2, #1
 80079e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2201      	movs	r2, #1
 80079f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2201      	movs	r2, #1
 80079fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2201      	movs	r2, #1
 8007a06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2201      	movs	r2, #1
 8007a16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d109      	bne.n	8007a48 <HAL_TIM_PWM_Start+0x24>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	bf14      	ite	ne
 8007a40:	2301      	movne	r3, #1
 8007a42:	2300      	moveq	r3, #0
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	e022      	b.n	8007a8e <HAL_TIM_PWM_Start+0x6a>
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	2b04      	cmp	r3, #4
 8007a4c:	d109      	bne.n	8007a62 <HAL_TIM_PWM_Start+0x3e>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	bf14      	ite	ne
 8007a5a:	2301      	movne	r3, #1
 8007a5c:	2300      	moveq	r3, #0
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	e015      	b.n	8007a8e <HAL_TIM_PWM_Start+0x6a>
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	2b08      	cmp	r3, #8
 8007a66:	d109      	bne.n	8007a7c <HAL_TIM_PWM_Start+0x58>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	bf14      	ite	ne
 8007a74:	2301      	movne	r3, #1
 8007a76:	2300      	moveq	r3, #0
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	e008      	b.n	8007a8e <HAL_TIM_PWM_Start+0x6a>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	bf14      	ite	ne
 8007a88:	2301      	movne	r3, #1
 8007a8a:	2300      	moveq	r3, #0
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d001      	beq.n	8007a96 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e05e      	b.n	8007b54 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d104      	bne.n	8007aa6 <HAL_TIM_PWM_Start+0x82>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2202      	movs	r2, #2
 8007aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007aa4:	e013      	b.n	8007ace <HAL_TIM_PWM_Start+0xaa>
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	2b04      	cmp	r3, #4
 8007aaa:	d104      	bne.n	8007ab6 <HAL_TIM_PWM_Start+0x92>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2202      	movs	r2, #2
 8007ab0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ab4:	e00b      	b.n	8007ace <HAL_TIM_PWM_Start+0xaa>
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	2b08      	cmp	r3, #8
 8007aba:	d104      	bne.n	8007ac6 <HAL_TIM_PWM_Start+0xa2>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2202      	movs	r2, #2
 8007ac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ac4:	e003      	b.n	8007ace <HAL_TIM_PWM_Start+0xaa>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2202      	movs	r2, #2
 8007aca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	6839      	ldr	r1, [r7, #0]
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f000 fd84 	bl	80085e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a1e      	ldr	r2, [pc, #120]	@ (8007b5c <HAL_TIM_PWM_Start+0x138>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d107      	bne.n	8007af6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007af4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a18      	ldr	r2, [pc, #96]	@ (8007b5c <HAL_TIM_PWM_Start+0x138>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d00e      	beq.n	8007b1e <HAL_TIM_PWM_Start+0xfa>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b08:	d009      	beq.n	8007b1e <HAL_TIM_PWM_Start+0xfa>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a14      	ldr	r2, [pc, #80]	@ (8007b60 <HAL_TIM_PWM_Start+0x13c>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d004      	beq.n	8007b1e <HAL_TIM_PWM_Start+0xfa>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a12      	ldr	r2, [pc, #72]	@ (8007b64 <HAL_TIM_PWM_Start+0x140>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d111      	bne.n	8007b42 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	f003 0307 	and.w	r3, r3, #7
 8007b28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2b06      	cmp	r3, #6
 8007b2e:	d010      	beq.n	8007b52 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f042 0201 	orr.w	r2, r2, #1
 8007b3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b40:	e007      	b.n	8007b52 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f042 0201 	orr.w	r2, r2, #1
 8007b50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3710      	adds	r7, #16
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	40012c00 	.word	0x40012c00
 8007b60:	40000400 	.word	0x40000400
 8007b64:	40000800 	.word	0x40000800

08007b68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	f003 0302 	and.w	r3, r3, #2
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d122      	bne.n	8007bc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	f003 0302 	and.w	r3, r3, #2
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d11b      	bne.n	8007bc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f06f 0202 	mvn.w	r2, #2
 8007b94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	699b      	ldr	r3, [r3, #24]
 8007ba2:	f003 0303 	and.w	r3, r3, #3
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d003      	beq.n	8007bb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 fa7f 	bl	80080ae <HAL_TIM_IC_CaptureCallback>
 8007bb0:	e005      	b.n	8007bbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 fa72 	bl	800809c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 fa81 	bl	80080c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	f003 0304 	and.w	r3, r3, #4
 8007bce:	2b04      	cmp	r3, #4
 8007bd0:	d122      	bne.n	8007c18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	f003 0304 	and.w	r3, r3, #4
 8007bdc:	2b04      	cmp	r3, #4
 8007bde:	d11b      	bne.n	8007c18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f06f 0204 	mvn.w	r2, #4
 8007be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2202      	movs	r2, #2
 8007bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	699b      	ldr	r3, [r3, #24]
 8007bf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d003      	beq.n	8007c06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 fa55 	bl	80080ae <HAL_TIM_IC_CaptureCallback>
 8007c04:	e005      	b.n	8007c12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fa48 	bl	800809c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 fa57 	bl	80080c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	f003 0308 	and.w	r3, r3, #8
 8007c22:	2b08      	cmp	r3, #8
 8007c24:	d122      	bne.n	8007c6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	f003 0308 	and.w	r3, r3, #8
 8007c30:	2b08      	cmp	r3, #8
 8007c32:	d11b      	bne.n	8007c6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f06f 0208 	mvn.w	r2, #8
 8007c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2204      	movs	r2, #4
 8007c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	69db      	ldr	r3, [r3, #28]
 8007c4a:	f003 0303 	and.w	r3, r3, #3
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d003      	beq.n	8007c5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fa2b 	bl	80080ae <HAL_TIM_IC_CaptureCallback>
 8007c58:	e005      	b.n	8007c66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 fa1e 	bl	800809c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 fa2d 	bl	80080c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	691b      	ldr	r3, [r3, #16]
 8007c72:	f003 0310 	and.w	r3, r3, #16
 8007c76:	2b10      	cmp	r3, #16
 8007c78:	d122      	bne.n	8007cc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	f003 0310 	and.w	r3, r3, #16
 8007c84:	2b10      	cmp	r3, #16
 8007c86:	d11b      	bne.n	8007cc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f06f 0210 	mvn.w	r2, #16
 8007c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2208      	movs	r2, #8
 8007c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	69db      	ldr	r3, [r3, #28]
 8007c9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d003      	beq.n	8007cae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 fa01 	bl	80080ae <HAL_TIM_IC_CaptureCallback>
 8007cac:	e005      	b.n	8007cba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 f9f4 	bl	800809c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 fa03 	bl	80080c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d10e      	bne.n	8007cec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	f003 0301 	and.w	r3, r3, #1
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d107      	bne.n	8007cec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f06f 0201 	mvn.w	r2, #1
 8007ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 f9cf 	bl	800808a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cf6:	2b80      	cmp	r3, #128	@ 0x80
 8007cf8:	d10e      	bne.n	8007d18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d04:	2b80      	cmp	r3, #128	@ 0x80
 8007d06:	d107      	bne.n	8007d18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 fd42 	bl	800879c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d22:	2b40      	cmp	r3, #64	@ 0x40
 8007d24:	d10e      	bne.n	8007d44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d30:	2b40      	cmp	r3, #64	@ 0x40
 8007d32:	d107      	bne.n	8007d44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 f9c7 	bl	80080d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	f003 0320 	and.w	r3, r3, #32
 8007d4e:	2b20      	cmp	r3, #32
 8007d50:	d10e      	bne.n	8007d70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	f003 0320 	and.w	r3, r3, #32
 8007d5c:	2b20      	cmp	r3, #32
 8007d5e:	d107      	bne.n	8007d70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f06f 0220 	mvn.w	r2, #32
 8007d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fd0d 	bl	800878a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d70:	bf00      	nop
 8007d72:	3708      	adds	r7, #8
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b086      	sub	sp, #24
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	60b9      	str	r1, [r7, #8]
 8007d82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d84:	2300      	movs	r3, #0
 8007d86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d101      	bne.n	8007d96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007d92:	2302      	movs	r3, #2
 8007d94:	e0ae      	b.n	8007ef4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2b0c      	cmp	r3, #12
 8007da2:	f200 809f 	bhi.w	8007ee4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007da6:	a201      	add	r2, pc, #4	@ (adr r2, 8007dac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dac:	08007de1 	.word	0x08007de1
 8007db0:	08007ee5 	.word	0x08007ee5
 8007db4:	08007ee5 	.word	0x08007ee5
 8007db8:	08007ee5 	.word	0x08007ee5
 8007dbc:	08007e21 	.word	0x08007e21
 8007dc0:	08007ee5 	.word	0x08007ee5
 8007dc4:	08007ee5 	.word	0x08007ee5
 8007dc8:	08007ee5 	.word	0x08007ee5
 8007dcc:	08007e63 	.word	0x08007e63
 8007dd0:	08007ee5 	.word	0x08007ee5
 8007dd4:	08007ee5 	.word	0x08007ee5
 8007dd8:	08007ee5 	.word	0x08007ee5
 8007ddc:	08007ea3 	.word	0x08007ea3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68b9      	ldr	r1, [r7, #8]
 8007de6:	4618      	mov	r0, r3
 8007de8:	f000 f9de 	bl	80081a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	699a      	ldr	r2, [r3, #24]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f042 0208 	orr.w	r2, r2, #8
 8007dfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	699a      	ldr	r2, [r3, #24]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f022 0204 	bic.w	r2, r2, #4
 8007e0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6999      	ldr	r1, [r3, #24]
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	691a      	ldr	r2, [r3, #16]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	430a      	orrs	r2, r1
 8007e1c:	619a      	str	r2, [r3, #24]
      break;
 8007e1e:	e064      	b.n	8007eea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	68b9      	ldr	r1, [r7, #8]
 8007e26:	4618      	mov	r0, r3
 8007e28:	f000 fa24 	bl	8008274 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	699a      	ldr	r2, [r3, #24]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	699a      	ldr	r2, [r3, #24]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	6999      	ldr	r1, [r3, #24]
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	021a      	lsls	r2, r3, #8
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	430a      	orrs	r2, r1
 8007e5e:	619a      	str	r2, [r3, #24]
      break;
 8007e60:	e043      	b.n	8007eea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68b9      	ldr	r1, [r7, #8]
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f000 fa6d 	bl	8008348 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	69da      	ldr	r2, [r3, #28]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f042 0208 	orr.w	r2, r2, #8
 8007e7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	69da      	ldr	r2, [r3, #28]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f022 0204 	bic.w	r2, r2, #4
 8007e8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	69d9      	ldr	r1, [r3, #28]
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	691a      	ldr	r2, [r3, #16]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	430a      	orrs	r2, r1
 8007e9e:	61da      	str	r2, [r3, #28]
      break;
 8007ea0:	e023      	b.n	8007eea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	68b9      	ldr	r1, [r7, #8]
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f000 fab7 	bl	800841c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	69da      	ldr	r2, [r3, #28]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ebc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	69da      	ldr	r2, [r3, #28]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ecc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	69d9      	ldr	r1, [r3, #28]
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	691b      	ldr	r3, [r3, #16]
 8007ed8:	021a      	lsls	r2, r3, #8
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	430a      	orrs	r2, r1
 8007ee0:	61da      	str	r2, [r3, #28]
      break;
 8007ee2:	e002      	b.n	8007eea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ee8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3718      	adds	r7, #24
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f06:	2300      	movs	r3, #0
 8007f08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d101      	bne.n	8007f18 <HAL_TIM_ConfigClockSource+0x1c>
 8007f14:	2302      	movs	r3, #2
 8007f16:	e0b4      	b.n	8008082 <HAL_TIM_ConfigClockSource+0x186>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2202      	movs	r2, #2
 8007f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007f36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	68ba      	ldr	r2, [r7, #8]
 8007f46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f50:	d03e      	beq.n	8007fd0 <HAL_TIM_ConfigClockSource+0xd4>
 8007f52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f56:	f200 8087 	bhi.w	8008068 <HAL_TIM_ConfigClockSource+0x16c>
 8007f5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f5e:	f000 8086 	beq.w	800806e <HAL_TIM_ConfigClockSource+0x172>
 8007f62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f66:	d87f      	bhi.n	8008068 <HAL_TIM_ConfigClockSource+0x16c>
 8007f68:	2b70      	cmp	r3, #112	@ 0x70
 8007f6a:	d01a      	beq.n	8007fa2 <HAL_TIM_ConfigClockSource+0xa6>
 8007f6c:	2b70      	cmp	r3, #112	@ 0x70
 8007f6e:	d87b      	bhi.n	8008068 <HAL_TIM_ConfigClockSource+0x16c>
 8007f70:	2b60      	cmp	r3, #96	@ 0x60
 8007f72:	d050      	beq.n	8008016 <HAL_TIM_ConfigClockSource+0x11a>
 8007f74:	2b60      	cmp	r3, #96	@ 0x60
 8007f76:	d877      	bhi.n	8008068 <HAL_TIM_ConfigClockSource+0x16c>
 8007f78:	2b50      	cmp	r3, #80	@ 0x50
 8007f7a:	d03c      	beq.n	8007ff6 <HAL_TIM_ConfigClockSource+0xfa>
 8007f7c:	2b50      	cmp	r3, #80	@ 0x50
 8007f7e:	d873      	bhi.n	8008068 <HAL_TIM_ConfigClockSource+0x16c>
 8007f80:	2b40      	cmp	r3, #64	@ 0x40
 8007f82:	d058      	beq.n	8008036 <HAL_TIM_ConfigClockSource+0x13a>
 8007f84:	2b40      	cmp	r3, #64	@ 0x40
 8007f86:	d86f      	bhi.n	8008068 <HAL_TIM_ConfigClockSource+0x16c>
 8007f88:	2b30      	cmp	r3, #48	@ 0x30
 8007f8a:	d064      	beq.n	8008056 <HAL_TIM_ConfigClockSource+0x15a>
 8007f8c:	2b30      	cmp	r3, #48	@ 0x30
 8007f8e:	d86b      	bhi.n	8008068 <HAL_TIM_ConfigClockSource+0x16c>
 8007f90:	2b20      	cmp	r3, #32
 8007f92:	d060      	beq.n	8008056 <HAL_TIM_ConfigClockSource+0x15a>
 8007f94:	2b20      	cmp	r3, #32
 8007f96:	d867      	bhi.n	8008068 <HAL_TIM_ConfigClockSource+0x16c>
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d05c      	beq.n	8008056 <HAL_TIM_ConfigClockSource+0x15a>
 8007f9c:	2b10      	cmp	r3, #16
 8007f9e:	d05a      	beq.n	8008056 <HAL_TIM_ConfigClockSource+0x15a>
 8007fa0:	e062      	b.n	8008068 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007fb2:	f000 faf8 	bl	80085a6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007fc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68ba      	ldr	r2, [r7, #8]
 8007fcc:	609a      	str	r2, [r3, #8]
      break;
 8007fce:	e04f      	b.n	8008070 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007fe0:	f000 fae1 	bl	80085a6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	689a      	ldr	r2, [r3, #8]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007ff2:	609a      	str	r2, [r3, #8]
      break;
 8007ff4:	e03c      	b.n	8008070 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008002:	461a      	mov	r2, r3
 8008004:	f000 fa58 	bl	80084b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2150      	movs	r1, #80	@ 0x50
 800800e:	4618      	mov	r0, r3
 8008010:	f000 faaf 	bl	8008572 <TIM_ITRx_SetConfig>
      break;
 8008014:	e02c      	b.n	8008070 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008022:	461a      	mov	r2, r3
 8008024:	f000 fa76 	bl	8008514 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2160      	movs	r1, #96	@ 0x60
 800802e:	4618      	mov	r0, r3
 8008030:	f000 fa9f 	bl	8008572 <TIM_ITRx_SetConfig>
      break;
 8008034:	e01c      	b.n	8008070 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008042:	461a      	mov	r2, r3
 8008044:	f000 fa38 	bl	80084b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2140      	movs	r1, #64	@ 0x40
 800804e:	4618      	mov	r0, r3
 8008050:	f000 fa8f 	bl	8008572 <TIM_ITRx_SetConfig>
      break;
 8008054:	e00c      	b.n	8008070 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4619      	mov	r1, r3
 8008060:	4610      	mov	r0, r2
 8008062:	f000 fa86 	bl	8008572 <TIM_ITRx_SetConfig>
      break;
 8008066:	e003      	b.n	8008070 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	73fb      	strb	r3, [r7, #15]
      break;
 800806c:	e000      	b.n	8008070 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800806e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008080:	7bfb      	ldrb	r3, [r7, #15]
}
 8008082:	4618      	mov	r0, r3
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800808a:	b480      	push	{r7}
 800808c:	b083      	sub	sp, #12
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008092:	bf00      	nop
 8008094:	370c      	adds	r7, #12
 8008096:	46bd      	mov	sp, r7
 8008098:	bc80      	pop	{r7}
 800809a:	4770      	bx	lr

0800809c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bc80      	pop	{r7}
 80080ac:	4770      	bx	lr

080080ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80080ae:	b480      	push	{r7}
 80080b0:	b083      	sub	sp, #12
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80080b6:	bf00      	nop
 80080b8:	370c      	adds	r7, #12
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bc80      	pop	{r7}
 80080be:	4770      	bx	lr

080080c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80080c8:	bf00      	nop
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bc80      	pop	{r7}
 80080d0:	4770      	bx	lr

080080d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80080d2:	b480      	push	{r7}
 80080d4:	b083      	sub	sp, #12
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80080da:	bf00      	nop
 80080dc:	370c      	adds	r7, #12
 80080de:	46bd      	mov	sp, r7
 80080e0:	bc80      	pop	{r7}
 80080e2:	4770      	bx	lr

080080e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b085      	sub	sp, #20
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4a29      	ldr	r2, [pc, #164]	@ (800819c <TIM_Base_SetConfig+0xb8>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d00b      	beq.n	8008114 <TIM_Base_SetConfig+0x30>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008102:	d007      	beq.n	8008114 <TIM_Base_SetConfig+0x30>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4a26      	ldr	r2, [pc, #152]	@ (80081a0 <TIM_Base_SetConfig+0xbc>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d003      	beq.n	8008114 <TIM_Base_SetConfig+0x30>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4a25      	ldr	r2, [pc, #148]	@ (80081a4 <TIM_Base_SetConfig+0xc0>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d108      	bne.n	8008126 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800811a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	4313      	orrs	r3, r2
 8008124:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a1c      	ldr	r2, [pc, #112]	@ (800819c <TIM_Base_SetConfig+0xb8>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d00b      	beq.n	8008146 <TIM_Base_SetConfig+0x62>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008134:	d007      	beq.n	8008146 <TIM_Base_SetConfig+0x62>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4a19      	ldr	r2, [pc, #100]	@ (80081a0 <TIM_Base_SetConfig+0xbc>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d003      	beq.n	8008146 <TIM_Base_SetConfig+0x62>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a18      	ldr	r2, [pc, #96]	@ (80081a4 <TIM_Base_SetConfig+0xc0>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d108      	bne.n	8008158 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800814c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	4313      	orrs	r3, r2
 8008156:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	695b      	ldr	r3, [r3, #20]
 8008162:	4313      	orrs	r3, r2
 8008164:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	68fa      	ldr	r2, [r7, #12]
 800816a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	689a      	ldr	r2, [r3, #8]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4a07      	ldr	r2, [pc, #28]	@ (800819c <TIM_Base_SetConfig+0xb8>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d103      	bne.n	800818c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	691a      	ldr	r2, [r3, #16]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	615a      	str	r2, [r3, #20]
}
 8008192:	bf00      	nop
 8008194:	3714      	adds	r7, #20
 8008196:	46bd      	mov	sp, r7
 8008198:	bc80      	pop	{r7}
 800819a:	4770      	bx	lr
 800819c:	40012c00 	.word	0x40012c00
 80081a0:	40000400 	.word	0x40000400
 80081a4:	40000800 	.word	0x40000800

080081a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b087      	sub	sp, #28
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a1b      	ldr	r3, [r3, #32]
 80081b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6a1b      	ldr	r3, [r3, #32]
 80081bc:	f023 0201 	bic.w	r2, r3, #1
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	699b      	ldr	r3, [r3, #24]
 80081ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f023 0303 	bic.w	r3, r3, #3
 80081de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	68fa      	ldr	r2, [r7, #12]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	f023 0302 	bic.w	r3, r3, #2
 80081f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	697a      	ldr	r2, [r7, #20]
 80081f8:	4313      	orrs	r3, r2
 80081fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4a1c      	ldr	r2, [pc, #112]	@ (8008270 <TIM_OC1_SetConfig+0xc8>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d10c      	bne.n	800821e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	f023 0308 	bic.w	r3, r3, #8
 800820a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	697a      	ldr	r2, [r7, #20]
 8008212:	4313      	orrs	r3, r2
 8008214:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	f023 0304 	bic.w	r3, r3, #4
 800821c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4a13      	ldr	r2, [pc, #76]	@ (8008270 <TIM_OC1_SetConfig+0xc8>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d111      	bne.n	800824a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800822c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008234:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	695b      	ldr	r3, [r3, #20]
 800823a:	693a      	ldr	r2, [r7, #16]
 800823c:	4313      	orrs	r3, r2
 800823e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	699b      	ldr	r3, [r3, #24]
 8008244:	693a      	ldr	r2, [r7, #16]
 8008246:	4313      	orrs	r3, r2
 8008248:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	68fa      	ldr	r2, [r7, #12]
 8008254:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	685a      	ldr	r2, [r3, #4]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	697a      	ldr	r2, [r7, #20]
 8008262:	621a      	str	r2, [r3, #32]
}
 8008264:	bf00      	nop
 8008266:	371c      	adds	r7, #28
 8008268:	46bd      	mov	sp, r7
 800826a:	bc80      	pop	{r7}
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	40012c00 	.word	0x40012c00

08008274 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008274:	b480      	push	{r7}
 8008276:	b087      	sub	sp, #28
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6a1b      	ldr	r3, [r3, #32]
 8008282:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6a1b      	ldr	r3, [r3, #32]
 8008288:	f023 0210 	bic.w	r2, r3, #16
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	699b      	ldr	r3, [r3, #24]
 800829a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	021b      	lsls	r3, r3, #8
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	f023 0320 	bic.w	r3, r3, #32
 80082be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	011b      	lsls	r3, r3, #4
 80082c6:	697a      	ldr	r2, [r7, #20]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4a1d      	ldr	r2, [pc, #116]	@ (8008344 <TIM_OC2_SetConfig+0xd0>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d10d      	bne.n	80082f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	011b      	lsls	r3, r3, #4
 80082e2:	697a      	ldr	r2, [r7, #20]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a14      	ldr	r2, [pc, #80]	@ (8008344 <TIM_OC2_SetConfig+0xd0>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d113      	bne.n	8008320 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80082fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008306:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	695b      	ldr	r3, [r3, #20]
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	693a      	ldr	r2, [r7, #16]
 8008310:	4313      	orrs	r3, r2
 8008312:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	699b      	ldr	r3, [r3, #24]
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	693a      	ldr	r2, [r7, #16]
 800831c:	4313      	orrs	r3, r2
 800831e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	693a      	ldr	r2, [r7, #16]
 8008324:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	685a      	ldr	r2, [r3, #4]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	697a      	ldr	r2, [r7, #20]
 8008338:	621a      	str	r2, [r3, #32]
}
 800833a:	bf00      	nop
 800833c:	371c      	adds	r7, #28
 800833e:	46bd      	mov	sp, r7
 8008340:	bc80      	pop	{r7}
 8008342:	4770      	bx	lr
 8008344:	40012c00 	.word	0x40012c00

08008348 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008348:	b480      	push	{r7}
 800834a:	b087      	sub	sp, #28
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a1b      	ldr	r3, [r3, #32]
 8008356:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6a1b      	ldr	r3, [r3, #32]
 800835c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	69db      	ldr	r3, [r3, #28]
 800836e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f023 0303 	bic.w	r3, r3, #3
 800837e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	4313      	orrs	r3, r2
 8008388:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008390:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	021b      	lsls	r3, r3, #8
 8008398:	697a      	ldr	r2, [r7, #20]
 800839a:	4313      	orrs	r3, r2
 800839c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4a1d      	ldr	r2, [pc, #116]	@ (8008418 <TIM_OC3_SetConfig+0xd0>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d10d      	bne.n	80083c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80083ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	021b      	lsls	r3, r3, #8
 80083b4:	697a      	ldr	r2, [r7, #20]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80083c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4a14      	ldr	r2, [pc, #80]	@ (8008418 <TIM_OC3_SetConfig+0xd0>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d113      	bne.n	80083f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80083d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80083d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	695b      	ldr	r3, [r3, #20]
 80083de:	011b      	lsls	r3, r3, #4
 80083e0:	693a      	ldr	r2, [r7, #16]
 80083e2:	4313      	orrs	r3, r2
 80083e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	699b      	ldr	r3, [r3, #24]
 80083ea:	011b      	lsls	r3, r3, #4
 80083ec:	693a      	ldr	r2, [r7, #16]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	693a      	ldr	r2, [r7, #16]
 80083f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	68fa      	ldr	r2, [r7, #12]
 80083fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	685a      	ldr	r2, [r3, #4]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	697a      	ldr	r2, [r7, #20]
 800840a:	621a      	str	r2, [r3, #32]
}
 800840c:	bf00      	nop
 800840e:	371c      	adds	r7, #28
 8008410:	46bd      	mov	sp, r7
 8008412:	bc80      	pop	{r7}
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	40012c00 	.word	0x40012c00

0800841c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800841c:	b480      	push	{r7}
 800841e:	b087      	sub	sp, #28
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a1b      	ldr	r3, [r3, #32]
 800842a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6a1b      	ldr	r3, [r3, #32]
 8008430:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	69db      	ldr	r3, [r3, #28]
 8008442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800844a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008452:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	021b      	lsls	r3, r3, #8
 800845a:	68fa      	ldr	r2, [r7, #12]
 800845c:	4313      	orrs	r3, r2
 800845e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008466:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	031b      	lsls	r3, r3, #12
 800846e:	693a      	ldr	r2, [r7, #16]
 8008470:	4313      	orrs	r3, r2
 8008472:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a0f      	ldr	r2, [pc, #60]	@ (80084b4 <TIM_OC4_SetConfig+0x98>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d109      	bne.n	8008490 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008482:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	695b      	ldr	r3, [r3, #20]
 8008488:	019b      	lsls	r3, r3, #6
 800848a:	697a      	ldr	r2, [r7, #20]
 800848c:	4313      	orrs	r3, r2
 800848e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	697a      	ldr	r2, [r7, #20]
 8008494:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	685a      	ldr	r2, [r3, #4]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	693a      	ldr	r2, [r7, #16]
 80084a8:	621a      	str	r2, [r3, #32]
}
 80084aa:	bf00      	nop
 80084ac:	371c      	adds	r7, #28
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bc80      	pop	{r7}
 80084b2:	4770      	bx	lr
 80084b4:	40012c00 	.word	0x40012c00

080084b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b087      	sub	sp, #28
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6a1b      	ldr	r3, [r3, #32]
 80084c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6a1b      	ldr	r3, [r3, #32]
 80084ce:	f023 0201 	bic.w	r2, r3, #1
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	699b      	ldr	r3, [r3, #24]
 80084da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80084e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	011b      	lsls	r3, r3, #4
 80084e8:	693a      	ldr	r2, [r7, #16]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	f023 030a 	bic.w	r3, r3, #10
 80084f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084f6:	697a      	ldr	r2, [r7, #20]
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	693a      	ldr	r2, [r7, #16]
 8008502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	697a      	ldr	r2, [r7, #20]
 8008508:	621a      	str	r2, [r3, #32]
}
 800850a:	bf00      	nop
 800850c:	371c      	adds	r7, #28
 800850e:	46bd      	mov	sp, r7
 8008510:	bc80      	pop	{r7}
 8008512:	4770      	bx	lr

08008514 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008514:	b480      	push	{r7}
 8008516:	b087      	sub	sp, #28
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6a1b      	ldr	r3, [r3, #32]
 8008524:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6a1b      	ldr	r3, [r3, #32]
 800852a:	f023 0210 	bic.w	r2, r3, #16
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800853e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	031b      	lsls	r3, r3, #12
 8008544:	693a      	ldr	r2, [r7, #16]
 8008546:	4313      	orrs	r3, r2
 8008548:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008550:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	011b      	lsls	r3, r3, #4
 8008556:	697a      	ldr	r2, [r7, #20]
 8008558:	4313      	orrs	r3, r2
 800855a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	693a      	ldr	r2, [r7, #16]
 8008560:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	697a      	ldr	r2, [r7, #20]
 8008566:	621a      	str	r2, [r3, #32]
}
 8008568:	bf00      	nop
 800856a:	371c      	adds	r7, #28
 800856c:	46bd      	mov	sp, r7
 800856e:	bc80      	pop	{r7}
 8008570:	4770      	bx	lr

08008572 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008572:	b480      	push	{r7}
 8008574:	b085      	sub	sp, #20
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
 800857a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008588:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800858a:	683a      	ldr	r2, [r7, #0]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	4313      	orrs	r3, r2
 8008590:	f043 0307 	orr.w	r3, r3, #7
 8008594:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	609a      	str	r2, [r3, #8]
}
 800859c:	bf00      	nop
 800859e:	3714      	adds	r7, #20
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bc80      	pop	{r7}
 80085a4:	4770      	bx	lr

080085a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085a6:	b480      	push	{r7}
 80085a8:	b087      	sub	sp, #28
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	60f8      	str	r0, [r7, #12]
 80085ae:	60b9      	str	r1, [r7, #8]
 80085b0:	607a      	str	r2, [r7, #4]
 80085b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80085c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	021a      	lsls	r2, r3, #8
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	431a      	orrs	r2, r3
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	4313      	orrs	r3, r2
 80085ce:	697a      	ldr	r2, [r7, #20]
 80085d0:	4313      	orrs	r3, r2
 80085d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	697a      	ldr	r2, [r7, #20]
 80085d8:	609a      	str	r2, [r3, #8]
}
 80085da:	bf00      	nop
 80085dc:	371c      	adds	r7, #28
 80085de:	46bd      	mov	sp, r7
 80085e0:	bc80      	pop	{r7}
 80085e2:	4770      	bx	lr

080085e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b087      	sub	sp, #28
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	f003 031f 	and.w	r3, r3, #31
 80085f6:	2201      	movs	r2, #1
 80085f8:	fa02 f303 	lsl.w	r3, r2, r3
 80085fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	6a1a      	ldr	r2, [r3, #32]
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	43db      	mvns	r3, r3
 8008606:	401a      	ands	r2, r3
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6a1a      	ldr	r2, [r3, #32]
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	f003 031f 	and.w	r3, r3, #31
 8008616:	6879      	ldr	r1, [r7, #4]
 8008618:	fa01 f303 	lsl.w	r3, r1, r3
 800861c:	431a      	orrs	r2, r3
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	621a      	str	r2, [r3, #32]
}
 8008622:	bf00      	nop
 8008624:	371c      	adds	r7, #28
 8008626:	46bd      	mov	sp, r7
 8008628:	bc80      	pop	{r7}
 800862a:	4770      	bx	lr

0800862c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800862c:	b480      	push	{r7}
 800862e:	b085      	sub	sp, #20
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800863c:	2b01      	cmp	r3, #1
 800863e:	d101      	bne.n	8008644 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008640:	2302      	movs	r3, #2
 8008642:	e046      	b.n	80086d2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2202      	movs	r2, #2
 8008650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800866a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68fa      	ldr	r2, [r7, #12]
 8008672:	4313      	orrs	r3, r2
 8008674:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a16      	ldr	r2, [pc, #88]	@ (80086dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d00e      	beq.n	80086a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008690:	d009      	beq.n	80086a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a12      	ldr	r2, [pc, #72]	@ (80086e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d004      	beq.n	80086a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a10      	ldr	r2, [pc, #64]	@ (80086e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d10c      	bne.n	80086c0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	68ba      	ldr	r2, [r7, #8]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68ba      	ldr	r2, [r7, #8]
 80086be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80086d0:	2300      	movs	r3, #0
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3714      	adds	r7, #20
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bc80      	pop	{r7}
 80086da:	4770      	bx	lr
 80086dc:	40012c00 	.word	0x40012c00
 80086e0:	40000400 	.word	0x40000400
 80086e4:	40000800 	.word	0x40000800

080086e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80086f2:	2300      	movs	r3, #0
 80086f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d101      	bne.n	8008704 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008700:	2302      	movs	r3, #2
 8008702:	e03d      	b.n	8008780 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	4313      	orrs	r3, r2
 8008718:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	4313      	orrs	r3, r2
 8008726:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	4313      	orrs	r3, r2
 8008734:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4313      	orrs	r3, r2
 8008742:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	691b      	ldr	r3, [r3, #16]
 800874e:	4313      	orrs	r3, r2
 8008750:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	695b      	ldr	r3, [r3, #20]
 800875c:	4313      	orrs	r3, r2
 800875e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	69db      	ldr	r3, [r3, #28]
 800876a:	4313      	orrs	r3, r2
 800876c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3714      	adds	r7, #20
 8008784:	46bd      	mov	sp, r7
 8008786:	bc80      	pop	{r7}
 8008788:	4770      	bx	lr

0800878a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800878a:	b480      	push	{r7}
 800878c:	b083      	sub	sp, #12
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008792:	bf00      	nop
 8008794:	370c      	adds	r7, #12
 8008796:	46bd      	mov	sp, r7
 8008798:	bc80      	pop	{r7}
 800879a:	4770      	bx	lr

0800879c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087a4:	bf00      	nop
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bc80      	pop	{r7}
 80087ac:	4770      	bx	lr

080087ae <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087ae:	b580      	push	{r7, lr}
 80087b0:	b082      	sub	sp, #8
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d101      	bne.n	80087c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	e042      	b.n	8008846 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d106      	bne.n	80087da <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f7fd f955 	bl	8005a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2224      	movs	r2, #36	@ 0x24
 80087de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	68da      	ldr	r2, [r3, #12]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80087f0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 f82c 	bl	8008850 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	691a      	ldr	r2, [r3, #16]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008806:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	695a      	ldr	r2, [r3, #20]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008816:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	68da      	ldr	r2, [r3, #12]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008826:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2220      	movs	r2, #32
 8008832:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2220      	movs	r2, #32
 800883a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
	...

08008850 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	691b      	ldr	r3, [r3, #16]
 800885e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68da      	ldr	r2, [r3, #12]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	430a      	orrs	r2, r1
 800886c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	689a      	ldr	r2, [r3, #8]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	431a      	orrs	r2, r3
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	695b      	ldr	r3, [r3, #20]
 800887c:	4313      	orrs	r3, r2
 800887e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	68db      	ldr	r3, [r3, #12]
 8008886:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800888a:	f023 030c 	bic.w	r3, r3, #12
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	6812      	ldr	r2, [r2, #0]
 8008892:	68b9      	ldr	r1, [r7, #8]
 8008894:	430b      	orrs	r3, r1
 8008896:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	695b      	ldr	r3, [r3, #20]
 800889e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	699a      	ldr	r2, [r3, #24]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	430a      	orrs	r2, r1
 80088ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a2c      	ldr	r2, [pc, #176]	@ (8008964 <UART_SetConfig+0x114>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d103      	bne.n	80088c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80088b8:	f7fe fcc0 	bl	800723c <HAL_RCC_GetPCLK2Freq>
 80088bc:	60f8      	str	r0, [r7, #12]
 80088be:	e002      	b.n	80088c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80088c0:	f7fe fca8 	bl	8007214 <HAL_RCC_GetPCLK1Freq>
 80088c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	4613      	mov	r3, r2
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	4413      	add	r3, r2
 80088ce:	009a      	lsls	r2, r3, #2
 80088d0:	441a      	add	r2, r3
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80088dc:	4a22      	ldr	r2, [pc, #136]	@ (8008968 <UART_SetConfig+0x118>)
 80088de:	fba2 2303 	umull	r2, r3, r2, r3
 80088e2:	095b      	lsrs	r3, r3, #5
 80088e4:	0119      	lsls	r1, r3, #4
 80088e6:	68fa      	ldr	r2, [r7, #12]
 80088e8:	4613      	mov	r3, r2
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	4413      	add	r3, r2
 80088ee:	009a      	lsls	r2, r3, #2
 80088f0:	441a      	add	r2, r3
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80088fc:	4b1a      	ldr	r3, [pc, #104]	@ (8008968 <UART_SetConfig+0x118>)
 80088fe:	fba3 0302 	umull	r0, r3, r3, r2
 8008902:	095b      	lsrs	r3, r3, #5
 8008904:	2064      	movs	r0, #100	@ 0x64
 8008906:	fb00 f303 	mul.w	r3, r0, r3
 800890a:	1ad3      	subs	r3, r2, r3
 800890c:	011b      	lsls	r3, r3, #4
 800890e:	3332      	adds	r3, #50	@ 0x32
 8008910:	4a15      	ldr	r2, [pc, #84]	@ (8008968 <UART_SetConfig+0x118>)
 8008912:	fba2 2303 	umull	r2, r3, r2, r3
 8008916:	095b      	lsrs	r3, r3, #5
 8008918:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800891c:	4419      	add	r1, r3
 800891e:	68fa      	ldr	r2, [r7, #12]
 8008920:	4613      	mov	r3, r2
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	4413      	add	r3, r2
 8008926:	009a      	lsls	r2, r3, #2
 8008928:	441a      	add	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	fbb2 f2f3 	udiv	r2, r2, r3
 8008934:	4b0c      	ldr	r3, [pc, #48]	@ (8008968 <UART_SetConfig+0x118>)
 8008936:	fba3 0302 	umull	r0, r3, r3, r2
 800893a:	095b      	lsrs	r3, r3, #5
 800893c:	2064      	movs	r0, #100	@ 0x64
 800893e:	fb00 f303 	mul.w	r3, r0, r3
 8008942:	1ad3      	subs	r3, r2, r3
 8008944:	011b      	lsls	r3, r3, #4
 8008946:	3332      	adds	r3, #50	@ 0x32
 8008948:	4a07      	ldr	r2, [pc, #28]	@ (8008968 <UART_SetConfig+0x118>)
 800894a:	fba2 2303 	umull	r2, r3, r2, r3
 800894e:	095b      	lsrs	r3, r3, #5
 8008950:	f003 020f 	and.w	r2, r3, #15
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	440a      	add	r2, r1
 800895a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800895c:	bf00      	nop
 800895e:	3710      	adds	r7, #16
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}
 8008964:	40013800 	.word	0x40013800
 8008968:	51eb851f 	.word	0x51eb851f

0800896c <_ZdlPvj>:
 800896c:	f000 b811 	b.w	8008992 <_ZdlPv>

08008970 <_Znwj>:
 8008970:	2801      	cmp	r0, #1
 8008972:	bf38      	it	cc
 8008974:	2001      	movcc	r0, #1
 8008976:	b510      	push	{r4, lr}
 8008978:	4604      	mov	r4, r0
 800897a:	4620      	mov	r0, r4
 800897c:	f000 f81c 	bl	80089b8 <malloc>
 8008980:	b100      	cbz	r0, 8008984 <_Znwj+0x14>
 8008982:	bd10      	pop	{r4, pc}
 8008984:	f000 f808 	bl	8008998 <_ZSt15get_new_handlerv>
 8008988:	b908      	cbnz	r0, 800898e <_Znwj+0x1e>
 800898a:	f000 f80d 	bl	80089a8 <abort>
 800898e:	4780      	blx	r0
 8008990:	e7f3      	b.n	800897a <_Znwj+0xa>

08008992 <_ZdlPv>:
 8008992:	f000 b819 	b.w	80089c8 <free>
	...

08008998 <_ZSt15get_new_handlerv>:
 8008998:	4b02      	ldr	r3, [pc, #8]	@ (80089a4 <_ZSt15get_new_handlerv+0xc>)
 800899a:	6818      	ldr	r0, [r3, #0]
 800899c:	f3bf 8f5b 	dmb	ish
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	20000400 	.word	0x20000400

080089a8 <abort>:
 80089a8:	2006      	movs	r0, #6
 80089aa:	b508      	push	{r3, lr}
 80089ac:	f000 fe74 	bl	8009698 <raise>
 80089b0:	2001      	movs	r0, #1
 80089b2:	f7fd f908 	bl	8005bc6 <_exit>
	...

080089b8 <malloc>:
 80089b8:	4b02      	ldr	r3, [pc, #8]	@ (80089c4 <malloc+0xc>)
 80089ba:	4601      	mov	r1, r0
 80089bc:	6818      	ldr	r0, [r3, #0]
 80089be:	f000 b82d 	b.w	8008a1c <_malloc_r>
 80089c2:	bf00      	nop
 80089c4:	2000001c 	.word	0x2000001c

080089c8 <free>:
 80089c8:	4b02      	ldr	r3, [pc, #8]	@ (80089d4 <free+0xc>)
 80089ca:	4601      	mov	r1, r0
 80089cc:	6818      	ldr	r0, [r3, #0]
 80089ce:	f001 bd6f 	b.w	800a4b0 <_free_r>
 80089d2:	bf00      	nop
 80089d4:	2000001c 	.word	0x2000001c

080089d8 <sbrk_aligned>:
 80089d8:	b570      	push	{r4, r5, r6, lr}
 80089da:	4e0f      	ldr	r6, [pc, #60]	@ (8008a18 <sbrk_aligned+0x40>)
 80089dc:	460c      	mov	r4, r1
 80089de:	6831      	ldr	r1, [r6, #0]
 80089e0:	4605      	mov	r5, r0
 80089e2:	b911      	cbnz	r1, 80089ea <sbrk_aligned+0x12>
 80089e4:	f000 feac 	bl	8009740 <_sbrk_r>
 80089e8:	6030      	str	r0, [r6, #0]
 80089ea:	4621      	mov	r1, r4
 80089ec:	4628      	mov	r0, r5
 80089ee:	f000 fea7 	bl	8009740 <_sbrk_r>
 80089f2:	1c43      	adds	r3, r0, #1
 80089f4:	d103      	bne.n	80089fe <sbrk_aligned+0x26>
 80089f6:	f04f 34ff 	mov.w	r4, #4294967295
 80089fa:	4620      	mov	r0, r4
 80089fc:	bd70      	pop	{r4, r5, r6, pc}
 80089fe:	1cc4      	adds	r4, r0, #3
 8008a00:	f024 0403 	bic.w	r4, r4, #3
 8008a04:	42a0      	cmp	r0, r4
 8008a06:	d0f8      	beq.n	80089fa <sbrk_aligned+0x22>
 8008a08:	1a21      	subs	r1, r4, r0
 8008a0a:	4628      	mov	r0, r5
 8008a0c:	f000 fe98 	bl	8009740 <_sbrk_r>
 8008a10:	3001      	adds	r0, #1
 8008a12:	d1f2      	bne.n	80089fa <sbrk_aligned+0x22>
 8008a14:	e7ef      	b.n	80089f6 <sbrk_aligned+0x1e>
 8008a16:	bf00      	nop
 8008a18:	20000404 	.word	0x20000404

08008a1c <_malloc_r>:
 8008a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a20:	1ccd      	adds	r5, r1, #3
 8008a22:	f025 0503 	bic.w	r5, r5, #3
 8008a26:	3508      	adds	r5, #8
 8008a28:	2d0c      	cmp	r5, #12
 8008a2a:	bf38      	it	cc
 8008a2c:	250c      	movcc	r5, #12
 8008a2e:	2d00      	cmp	r5, #0
 8008a30:	4606      	mov	r6, r0
 8008a32:	db01      	blt.n	8008a38 <_malloc_r+0x1c>
 8008a34:	42a9      	cmp	r1, r5
 8008a36:	d904      	bls.n	8008a42 <_malloc_r+0x26>
 8008a38:	230c      	movs	r3, #12
 8008a3a:	6033      	str	r3, [r6, #0]
 8008a3c:	2000      	movs	r0, #0
 8008a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b18 <_malloc_r+0xfc>
 8008a46:	f000 f869 	bl	8008b1c <__malloc_lock>
 8008a4a:	f8d8 3000 	ldr.w	r3, [r8]
 8008a4e:	461c      	mov	r4, r3
 8008a50:	bb44      	cbnz	r4, 8008aa4 <_malloc_r+0x88>
 8008a52:	4629      	mov	r1, r5
 8008a54:	4630      	mov	r0, r6
 8008a56:	f7ff ffbf 	bl	80089d8 <sbrk_aligned>
 8008a5a:	1c43      	adds	r3, r0, #1
 8008a5c:	4604      	mov	r4, r0
 8008a5e:	d158      	bne.n	8008b12 <_malloc_r+0xf6>
 8008a60:	f8d8 4000 	ldr.w	r4, [r8]
 8008a64:	4627      	mov	r7, r4
 8008a66:	2f00      	cmp	r7, #0
 8008a68:	d143      	bne.n	8008af2 <_malloc_r+0xd6>
 8008a6a:	2c00      	cmp	r4, #0
 8008a6c:	d04b      	beq.n	8008b06 <_malloc_r+0xea>
 8008a6e:	6823      	ldr	r3, [r4, #0]
 8008a70:	4639      	mov	r1, r7
 8008a72:	4630      	mov	r0, r6
 8008a74:	eb04 0903 	add.w	r9, r4, r3
 8008a78:	f000 fe62 	bl	8009740 <_sbrk_r>
 8008a7c:	4581      	cmp	r9, r0
 8008a7e:	d142      	bne.n	8008b06 <_malloc_r+0xea>
 8008a80:	6821      	ldr	r1, [r4, #0]
 8008a82:	4630      	mov	r0, r6
 8008a84:	1a6d      	subs	r5, r5, r1
 8008a86:	4629      	mov	r1, r5
 8008a88:	f7ff ffa6 	bl	80089d8 <sbrk_aligned>
 8008a8c:	3001      	adds	r0, #1
 8008a8e:	d03a      	beq.n	8008b06 <_malloc_r+0xea>
 8008a90:	6823      	ldr	r3, [r4, #0]
 8008a92:	442b      	add	r3, r5
 8008a94:	6023      	str	r3, [r4, #0]
 8008a96:	f8d8 3000 	ldr.w	r3, [r8]
 8008a9a:	685a      	ldr	r2, [r3, #4]
 8008a9c:	bb62      	cbnz	r2, 8008af8 <_malloc_r+0xdc>
 8008a9e:	f8c8 7000 	str.w	r7, [r8]
 8008aa2:	e00f      	b.n	8008ac4 <_malloc_r+0xa8>
 8008aa4:	6822      	ldr	r2, [r4, #0]
 8008aa6:	1b52      	subs	r2, r2, r5
 8008aa8:	d420      	bmi.n	8008aec <_malloc_r+0xd0>
 8008aaa:	2a0b      	cmp	r2, #11
 8008aac:	d917      	bls.n	8008ade <_malloc_r+0xc2>
 8008aae:	1961      	adds	r1, r4, r5
 8008ab0:	42a3      	cmp	r3, r4
 8008ab2:	6025      	str	r5, [r4, #0]
 8008ab4:	bf18      	it	ne
 8008ab6:	6059      	strne	r1, [r3, #4]
 8008ab8:	6863      	ldr	r3, [r4, #4]
 8008aba:	bf08      	it	eq
 8008abc:	f8c8 1000 	streq.w	r1, [r8]
 8008ac0:	5162      	str	r2, [r4, r5]
 8008ac2:	604b      	str	r3, [r1, #4]
 8008ac4:	4630      	mov	r0, r6
 8008ac6:	f000 f82f 	bl	8008b28 <__malloc_unlock>
 8008aca:	f104 000b 	add.w	r0, r4, #11
 8008ace:	1d23      	adds	r3, r4, #4
 8008ad0:	f020 0007 	bic.w	r0, r0, #7
 8008ad4:	1ac2      	subs	r2, r0, r3
 8008ad6:	bf1c      	itt	ne
 8008ad8:	1a1b      	subne	r3, r3, r0
 8008ada:	50a3      	strne	r3, [r4, r2]
 8008adc:	e7af      	b.n	8008a3e <_malloc_r+0x22>
 8008ade:	6862      	ldr	r2, [r4, #4]
 8008ae0:	42a3      	cmp	r3, r4
 8008ae2:	bf0c      	ite	eq
 8008ae4:	f8c8 2000 	streq.w	r2, [r8]
 8008ae8:	605a      	strne	r2, [r3, #4]
 8008aea:	e7eb      	b.n	8008ac4 <_malloc_r+0xa8>
 8008aec:	4623      	mov	r3, r4
 8008aee:	6864      	ldr	r4, [r4, #4]
 8008af0:	e7ae      	b.n	8008a50 <_malloc_r+0x34>
 8008af2:	463c      	mov	r4, r7
 8008af4:	687f      	ldr	r7, [r7, #4]
 8008af6:	e7b6      	b.n	8008a66 <_malloc_r+0x4a>
 8008af8:	461a      	mov	r2, r3
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	42a3      	cmp	r3, r4
 8008afe:	d1fb      	bne.n	8008af8 <_malloc_r+0xdc>
 8008b00:	2300      	movs	r3, #0
 8008b02:	6053      	str	r3, [r2, #4]
 8008b04:	e7de      	b.n	8008ac4 <_malloc_r+0xa8>
 8008b06:	230c      	movs	r3, #12
 8008b08:	4630      	mov	r0, r6
 8008b0a:	6033      	str	r3, [r6, #0]
 8008b0c:	f000 f80c 	bl	8008b28 <__malloc_unlock>
 8008b10:	e794      	b.n	8008a3c <_malloc_r+0x20>
 8008b12:	6005      	str	r5, [r0, #0]
 8008b14:	e7d6      	b.n	8008ac4 <_malloc_r+0xa8>
 8008b16:	bf00      	nop
 8008b18:	20000408 	.word	0x20000408

08008b1c <__malloc_lock>:
 8008b1c:	4801      	ldr	r0, [pc, #4]	@ (8008b24 <__malloc_lock+0x8>)
 8008b1e:	f000 be5c 	b.w	80097da <__retarget_lock_acquire_recursive>
 8008b22:	bf00      	nop
 8008b24:	2000054c 	.word	0x2000054c

08008b28 <__malloc_unlock>:
 8008b28:	4801      	ldr	r0, [pc, #4]	@ (8008b30 <__malloc_unlock+0x8>)
 8008b2a:	f000 be57 	b.w	80097dc <__retarget_lock_release_recursive>
 8008b2e:	bf00      	nop
 8008b30:	2000054c 	.word	0x2000054c

08008b34 <__cvt>:
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b3a:	461d      	mov	r5, r3
 8008b3c:	bfbb      	ittet	lt
 8008b3e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8008b42:	461d      	movlt	r5, r3
 8008b44:	2300      	movge	r3, #0
 8008b46:	232d      	movlt	r3, #45	@ 0x2d
 8008b48:	b088      	sub	sp, #32
 8008b4a:	4614      	mov	r4, r2
 8008b4c:	bfb8      	it	lt
 8008b4e:	4614      	movlt	r4, r2
 8008b50:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008b52:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8008b54:	7013      	strb	r3, [r2, #0]
 8008b56:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008b58:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8008b5c:	f023 0820 	bic.w	r8, r3, #32
 8008b60:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008b64:	d005      	beq.n	8008b72 <__cvt+0x3e>
 8008b66:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008b6a:	d100      	bne.n	8008b6e <__cvt+0x3a>
 8008b6c:	3601      	adds	r6, #1
 8008b6e:	2302      	movs	r3, #2
 8008b70:	e000      	b.n	8008b74 <__cvt+0x40>
 8008b72:	2303      	movs	r3, #3
 8008b74:	aa07      	add	r2, sp, #28
 8008b76:	9204      	str	r2, [sp, #16]
 8008b78:	aa06      	add	r2, sp, #24
 8008b7a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008b7e:	e9cd 3600 	strd	r3, r6, [sp]
 8008b82:	4622      	mov	r2, r4
 8008b84:	462b      	mov	r3, r5
 8008b86:	f000 fecb 	bl	8009920 <_dtoa_r>
 8008b8a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008b8e:	4607      	mov	r7, r0
 8008b90:	d119      	bne.n	8008bc6 <__cvt+0x92>
 8008b92:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008b94:	07db      	lsls	r3, r3, #31
 8008b96:	d50e      	bpl.n	8008bb6 <__cvt+0x82>
 8008b98:	eb00 0906 	add.w	r9, r0, r6
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	4629      	mov	r1, r5
 8008ba4:	f7f7 ffb4 	bl	8000b10 <__aeabi_dcmpeq>
 8008ba8:	b108      	cbz	r0, 8008bae <__cvt+0x7a>
 8008baa:	f8cd 901c 	str.w	r9, [sp, #28]
 8008bae:	2230      	movs	r2, #48	@ 0x30
 8008bb0:	9b07      	ldr	r3, [sp, #28]
 8008bb2:	454b      	cmp	r3, r9
 8008bb4:	d31e      	bcc.n	8008bf4 <__cvt+0xc0>
 8008bb6:	4638      	mov	r0, r7
 8008bb8:	9b07      	ldr	r3, [sp, #28]
 8008bba:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008bbc:	1bdb      	subs	r3, r3, r7
 8008bbe:	6013      	str	r3, [r2, #0]
 8008bc0:	b008      	add	sp, #32
 8008bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bc6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008bca:	eb00 0906 	add.w	r9, r0, r6
 8008bce:	d1e5      	bne.n	8008b9c <__cvt+0x68>
 8008bd0:	7803      	ldrb	r3, [r0, #0]
 8008bd2:	2b30      	cmp	r3, #48	@ 0x30
 8008bd4:	d10a      	bne.n	8008bec <__cvt+0xb8>
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	2300      	movs	r3, #0
 8008bda:	4620      	mov	r0, r4
 8008bdc:	4629      	mov	r1, r5
 8008bde:	f7f7 ff97 	bl	8000b10 <__aeabi_dcmpeq>
 8008be2:	b918      	cbnz	r0, 8008bec <__cvt+0xb8>
 8008be4:	f1c6 0601 	rsb	r6, r6, #1
 8008be8:	f8ca 6000 	str.w	r6, [sl]
 8008bec:	f8da 3000 	ldr.w	r3, [sl]
 8008bf0:	4499      	add	r9, r3
 8008bf2:	e7d3      	b.n	8008b9c <__cvt+0x68>
 8008bf4:	1c59      	adds	r1, r3, #1
 8008bf6:	9107      	str	r1, [sp, #28]
 8008bf8:	701a      	strb	r2, [r3, #0]
 8008bfa:	e7d9      	b.n	8008bb0 <__cvt+0x7c>

08008bfc <__exponent>:
 8008bfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bfe:	2900      	cmp	r1, #0
 8008c00:	bfb6      	itet	lt
 8008c02:	232d      	movlt	r3, #45	@ 0x2d
 8008c04:	232b      	movge	r3, #43	@ 0x2b
 8008c06:	4249      	neglt	r1, r1
 8008c08:	2909      	cmp	r1, #9
 8008c0a:	7002      	strb	r2, [r0, #0]
 8008c0c:	7043      	strb	r3, [r0, #1]
 8008c0e:	dd29      	ble.n	8008c64 <__exponent+0x68>
 8008c10:	f10d 0307 	add.w	r3, sp, #7
 8008c14:	461d      	mov	r5, r3
 8008c16:	270a      	movs	r7, #10
 8008c18:	fbb1 f6f7 	udiv	r6, r1, r7
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	fb07 1416 	mls	r4, r7, r6, r1
 8008c22:	3430      	adds	r4, #48	@ 0x30
 8008c24:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008c28:	460c      	mov	r4, r1
 8008c2a:	2c63      	cmp	r4, #99	@ 0x63
 8008c2c:	4631      	mov	r1, r6
 8008c2e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008c32:	dcf1      	bgt.n	8008c18 <__exponent+0x1c>
 8008c34:	3130      	adds	r1, #48	@ 0x30
 8008c36:	1e94      	subs	r4, r2, #2
 8008c38:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008c3c:	4623      	mov	r3, r4
 8008c3e:	1c41      	adds	r1, r0, #1
 8008c40:	42ab      	cmp	r3, r5
 8008c42:	d30a      	bcc.n	8008c5a <__exponent+0x5e>
 8008c44:	f10d 0309 	add.w	r3, sp, #9
 8008c48:	1a9b      	subs	r3, r3, r2
 8008c4a:	42ac      	cmp	r4, r5
 8008c4c:	bf88      	it	hi
 8008c4e:	2300      	movhi	r3, #0
 8008c50:	3302      	adds	r3, #2
 8008c52:	4403      	add	r3, r0
 8008c54:	1a18      	subs	r0, r3, r0
 8008c56:	b003      	add	sp, #12
 8008c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c5a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008c5e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008c62:	e7ed      	b.n	8008c40 <__exponent+0x44>
 8008c64:	2330      	movs	r3, #48	@ 0x30
 8008c66:	3130      	adds	r1, #48	@ 0x30
 8008c68:	7083      	strb	r3, [r0, #2]
 8008c6a:	70c1      	strb	r1, [r0, #3]
 8008c6c:	1d03      	adds	r3, r0, #4
 8008c6e:	e7f1      	b.n	8008c54 <__exponent+0x58>

08008c70 <_printf_float>:
 8008c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c74:	b091      	sub	sp, #68	@ 0x44
 8008c76:	460c      	mov	r4, r1
 8008c78:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8008c7c:	4616      	mov	r6, r2
 8008c7e:	461f      	mov	r7, r3
 8008c80:	4605      	mov	r5, r0
 8008c82:	f000 fd11 	bl	80096a8 <_localeconv_r>
 8008c86:	6803      	ldr	r3, [r0, #0]
 8008c88:	4618      	mov	r0, r3
 8008c8a:	9308      	str	r3, [sp, #32]
 8008c8c:	f7f7 fa60 	bl	8000150 <strlen>
 8008c90:	2300      	movs	r3, #0
 8008c92:	930e      	str	r3, [sp, #56]	@ 0x38
 8008c94:	f8d8 3000 	ldr.w	r3, [r8]
 8008c98:	9009      	str	r0, [sp, #36]	@ 0x24
 8008c9a:	3307      	adds	r3, #7
 8008c9c:	f023 0307 	bic.w	r3, r3, #7
 8008ca0:	f103 0208 	add.w	r2, r3, #8
 8008ca4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008ca8:	f8d4 b000 	ldr.w	fp, [r4]
 8008cac:	f8c8 2000 	str.w	r2, [r8]
 8008cb0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008cb4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008cb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008cba:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8008cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8008cc2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008cc6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008cca:	4b9c      	ldr	r3, [pc, #624]	@ (8008f3c <_printf_float+0x2cc>)
 8008ccc:	f7f7 ff52 	bl	8000b74 <__aeabi_dcmpun>
 8008cd0:	bb70      	cbnz	r0, 8008d30 <_printf_float+0xc0>
 8008cd2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8008cda:	4b98      	ldr	r3, [pc, #608]	@ (8008f3c <_printf_float+0x2cc>)
 8008cdc:	f7f7 ff2c 	bl	8000b38 <__aeabi_dcmple>
 8008ce0:	bb30      	cbnz	r0, 8008d30 <_printf_float+0xc0>
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	4640      	mov	r0, r8
 8008ce8:	4649      	mov	r1, r9
 8008cea:	f7f7 ff1b 	bl	8000b24 <__aeabi_dcmplt>
 8008cee:	b110      	cbz	r0, 8008cf6 <_printf_float+0x86>
 8008cf0:	232d      	movs	r3, #45	@ 0x2d
 8008cf2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cf6:	4a92      	ldr	r2, [pc, #584]	@ (8008f40 <_printf_float+0x2d0>)
 8008cf8:	4b92      	ldr	r3, [pc, #584]	@ (8008f44 <_printf_float+0x2d4>)
 8008cfa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008cfe:	bf94      	ite	ls
 8008d00:	4690      	movls	r8, r2
 8008d02:	4698      	movhi	r8, r3
 8008d04:	2303      	movs	r3, #3
 8008d06:	f04f 0900 	mov.w	r9, #0
 8008d0a:	6123      	str	r3, [r4, #16]
 8008d0c:	f02b 0304 	bic.w	r3, fp, #4
 8008d10:	6023      	str	r3, [r4, #0]
 8008d12:	4633      	mov	r3, r6
 8008d14:	4621      	mov	r1, r4
 8008d16:	4628      	mov	r0, r5
 8008d18:	9700      	str	r7, [sp, #0]
 8008d1a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8008d1c:	f000 f9d4 	bl	80090c8 <_printf_common>
 8008d20:	3001      	adds	r0, #1
 8008d22:	f040 8090 	bne.w	8008e46 <_printf_float+0x1d6>
 8008d26:	f04f 30ff 	mov.w	r0, #4294967295
 8008d2a:	b011      	add	sp, #68	@ 0x44
 8008d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d30:	4642      	mov	r2, r8
 8008d32:	464b      	mov	r3, r9
 8008d34:	4640      	mov	r0, r8
 8008d36:	4649      	mov	r1, r9
 8008d38:	f7f7 ff1c 	bl	8000b74 <__aeabi_dcmpun>
 8008d3c:	b148      	cbz	r0, 8008d52 <_printf_float+0xe2>
 8008d3e:	464b      	mov	r3, r9
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	bfb8      	it	lt
 8008d44:	232d      	movlt	r3, #45	@ 0x2d
 8008d46:	4a80      	ldr	r2, [pc, #512]	@ (8008f48 <_printf_float+0x2d8>)
 8008d48:	bfb8      	it	lt
 8008d4a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008d4e:	4b7f      	ldr	r3, [pc, #508]	@ (8008f4c <_printf_float+0x2dc>)
 8008d50:	e7d3      	b.n	8008cfa <_printf_float+0x8a>
 8008d52:	6863      	ldr	r3, [r4, #4]
 8008d54:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8008d58:	1c5a      	adds	r2, r3, #1
 8008d5a:	d13f      	bne.n	8008ddc <_printf_float+0x16c>
 8008d5c:	2306      	movs	r3, #6
 8008d5e:	6063      	str	r3, [r4, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8008d66:	6023      	str	r3, [r4, #0]
 8008d68:	9206      	str	r2, [sp, #24]
 8008d6a:	aa0e      	add	r2, sp, #56	@ 0x38
 8008d6c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8008d70:	aa0d      	add	r2, sp, #52	@ 0x34
 8008d72:	9203      	str	r2, [sp, #12]
 8008d74:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8008d78:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008d7c:	6863      	ldr	r3, [r4, #4]
 8008d7e:	4642      	mov	r2, r8
 8008d80:	9300      	str	r3, [sp, #0]
 8008d82:	4628      	mov	r0, r5
 8008d84:	464b      	mov	r3, r9
 8008d86:	910a      	str	r1, [sp, #40]	@ 0x28
 8008d88:	f7ff fed4 	bl	8008b34 <__cvt>
 8008d8c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008d8e:	4680      	mov	r8, r0
 8008d90:	2947      	cmp	r1, #71	@ 0x47
 8008d92:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008d94:	d128      	bne.n	8008de8 <_printf_float+0x178>
 8008d96:	1cc8      	adds	r0, r1, #3
 8008d98:	db02      	blt.n	8008da0 <_printf_float+0x130>
 8008d9a:	6863      	ldr	r3, [r4, #4]
 8008d9c:	4299      	cmp	r1, r3
 8008d9e:	dd40      	ble.n	8008e22 <_printf_float+0x1b2>
 8008da0:	f1aa 0a02 	sub.w	sl, sl, #2
 8008da4:	fa5f fa8a 	uxtb.w	sl, sl
 8008da8:	4652      	mov	r2, sl
 8008daa:	3901      	subs	r1, #1
 8008dac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008db0:	910d      	str	r1, [sp, #52]	@ 0x34
 8008db2:	f7ff ff23 	bl	8008bfc <__exponent>
 8008db6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008db8:	4681      	mov	r9, r0
 8008dba:	1813      	adds	r3, r2, r0
 8008dbc:	2a01      	cmp	r2, #1
 8008dbe:	6123      	str	r3, [r4, #16]
 8008dc0:	dc02      	bgt.n	8008dc8 <_printf_float+0x158>
 8008dc2:	6822      	ldr	r2, [r4, #0]
 8008dc4:	07d2      	lsls	r2, r2, #31
 8008dc6:	d501      	bpl.n	8008dcc <_printf_float+0x15c>
 8008dc8:	3301      	adds	r3, #1
 8008dca:	6123      	str	r3, [r4, #16]
 8008dcc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d09e      	beq.n	8008d12 <_printf_float+0xa2>
 8008dd4:	232d      	movs	r3, #45	@ 0x2d
 8008dd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008dda:	e79a      	b.n	8008d12 <_printf_float+0xa2>
 8008ddc:	2947      	cmp	r1, #71	@ 0x47
 8008dde:	d1bf      	bne.n	8008d60 <_printf_float+0xf0>
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1bd      	bne.n	8008d60 <_printf_float+0xf0>
 8008de4:	2301      	movs	r3, #1
 8008de6:	e7ba      	b.n	8008d5e <_printf_float+0xee>
 8008de8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008dec:	d9dc      	bls.n	8008da8 <_printf_float+0x138>
 8008dee:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008df2:	d118      	bne.n	8008e26 <_printf_float+0x1b6>
 8008df4:	2900      	cmp	r1, #0
 8008df6:	6863      	ldr	r3, [r4, #4]
 8008df8:	dd0b      	ble.n	8008e12 <_printf_float+0x1a2>
 8008dfa:	6121      	str	r1, [r4, #16]
 8008dfc:	b913      	cbnz	r3, 8008e04 <_printf_float+0x194>
 8008dfe:	6822      	ldr	r2, [r4, #0]
 8008e00:	07d0      	lsls	r0, r2, #31
 8008e02:	d502      	bpl.n	8008e0a <_printf_float+0x19a>
 8008e04:	3301      	adds	r3, #1
 8008e06:	440b      	add	r3, r1
 8008e08:	6123      	str	r3, [r4, #16]
 8008e0a:	f04f 0900 	mov.w	r9, #0
 8008e0e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008e10:	e7dc      	b.n	8008dcc <_printf_float+0x15c>
 8008e12:	b913      	cbnz	r3, 8008e1a <_printf_float+0x1aa>
 8008e14:	6822      	ldr	r2, [r4, #0]
 8008e16:	07d2      	lsls	r2, r2, #31
 8008e18:	d501      	bpl.n	8008e1e <_printf_float+0x1ae>
 8008e1a:	3302      	adds	r3, #2
 8008e1c:	e7f4      	b.n	8008e08 <_printf_float+0x198>
 8008e1e:	2301      	movs	r3, #1
 8008e20:	e7f2      	b.n	8008e08 <_printf_float+0x198>
 8008e22:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008e26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e28:	4299      	cmp	r1, r3
 8008e2a:	db05      	blt.n	8008e38 <_printf_float+0x1c8>
 8008e2c:	6823      	ldr	r3, [r4, #0]
 8008e2e:	6121      	str	r1, [r4, #16]
 8008e30:	07d8      	lsls	r0, r3, #31
 8008e32:	d5ea      	bpl.n	8008e0a <_printf_float+0x19a>
 8008e34:	1c4b      	adds	r3, r1, #1
 8008e36:	e7e7      	b.n	8008e08 <_printf_float+0x198>
 8008e38:	2900      	cmp	r1, #0
 8008e3a:	bfcc      	ite	gt
 8008e3c:	2201      	movgt	r2, #1
 8008e3e:	f1c1 0202 	rsble	r2, r1, #2
 8008e42:	4413      	add	r3, r2
 8008e44:	e7e0      	b.n	8008e08 <_printf_float+0x198>
 8008e46:	6823      	ldr	r3, [r4, #0]
 8008e48:	055a      	lsls	r2, r3, #21
 8008e4a:	d407      	bmi.n	8008e5c <_printf_float+0x1ec>
 8008e4c:	6923      	ldr	r3, [r4, #16]
 8008e4e:	4642      	mov	r2, r8
 8008e50:	4631      	mov	r1, r6
 8008e52:	4628      	mov	r0, r5
 8008e54:	47b8      	blx	r7
 8008e56:	3001      	adds	r0, #1
 8008e58:	d12b      	bne.n	8008eb2 <_printf_float+0x242>
 8008e5a:	e764      	b.n	8008d26 <_printf_float+0xb6>
 8008e5c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008e60:	f240 80dc 	bls.w	800901c <_printf_float+0x3ac>
 8008e64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008e68:	2200      	movs	r2, #0
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	f7f7 fe50 	bl	8000b10 <__aeabi_dcmpeq>
 8008e70:	2800      	cmp	r0, #0
 8008e72:	d033      	beq.n	8008edc <_printf_float+0x26c>
 8008e74:	2301      	movs	r3, #1
 8008e76:	4631      	mov	r1, r6
 8008e78:	4628      	mov	r0, r5
 8008e7a:	4a35      	ldr	r2, [pc, #212]	@ (8008f50 <_printf_float+0x2e0>)
 8008e7c:	47b8      	blx	r7
 8008e7e:	3001      	adds	r0, #1
 8008e80:	f43f af51 	beq.w	8008d26 <_printf_float+0xb6>
 8008e84:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8008e88:	4543      	cmp	r3, r8
 8008e8a:	db02      	blt.n	8008e92 <_printf_float+0x222>
 8008e8c:	6823      	ldr	r3, [r4, #0]
 8008e8e:	07d8      	lsls	r0, r3, #31
 8008e90:	d50f      	bpl.n	8008eb2 <_printf_float+0x242>
 8008e92:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008e96:	4631      	mov	r1, r6
 8008e98:	4628      	mov	r0, r5
 8008e9a:	47b8      	blx	r7
 8008e9c:	3001      	adds	r0, #1
 8008e9e:	f43f af42 	beq.w	8008d26 <_printf_float+0xb6>
 8008ea2:	f04f 0900 	mov.w	r9, #0
 8008ea6:	f108 38ff 	add.w	r8, r8, #4294967295
 8008eaa:	f104 0a1a 	add.w	sl, r4, #26
 8008eae:	45c8      	cmp	r8, r9
 8008eb0:	dc09      	bgt.n	8008ec6 <_printf_float+0x256>
 8008eb2:	6823      	ldr	r3, [r4, #0]
 8008eb4:	079b      	lsls	r3, r3, #30
 8008eb6:	f100 8102 	bmi.w	80090be <_printf_float+0x44e>
 8008eba:	68e0      	ldr	r0, [r4, #12]
 8008ebc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ebe:	4298      	cmp	r0, r3
 8008ec0:	bfb8      	it	lt
 8008ec2:	4618      	movlt	r0, r3
 8008ec4:	e731      	b.n	8008d2a <_printf_float+0xba>
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	4652      	mov	r2, sl
 8008eca:	4631      	mov	r1, r6
 8008ecc:	4628      	mov	r0, r5
 8008ece:	47b8      	blx	r7
 8008ed0:	3001      	adds	r0, #1
 8008ed2:	f43f af28 	beq.w	8008d26 <_printf_float+0xb6>
 8008ed6:	f109 0901 	add.w	r9, r9, #1
 8008eda:	e7e8      	b.n	8008eae <_printf_float+0x23e>
 8008edc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	dc38      	bgt.n	8008f54 <_printf_float+0x2e4>
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	4631      	mov	r1, r6
 8008ee6:	4628      	mov	r0, r5
 8008ee8:	4a19      	ldr	r2, [pc, #100]	@ (8008f50 <_printf_float+0x2e0>)
 8008eea:	47b8      	blx	r7
 8008eec:	3001      	adds	r0, #1
 8008eee:	f43f af1a 	beq.w	8008d26 <_printf_float+0xb6>
 8008ef2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8008ef6:	ea59 0303 	orrs.w	r3, r9, r3
 8008efa:	d102      	bne.n	8008f02 <_printf_float+0x292>
 8008efc:	6823      	ldr	r3, [r4, #0]
 8008efe:	07d9      	lsls	r1, r3, #31
 8008f00:	d5d7      	bpl.n	8008eb2 <_printf_float+0x242>
 8008f02:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008f06:	4631      	mov	r1, r6
 8008f08:	4628      	mov	r0, r5
 8008f0a:	47b8      	blx	r7
 8008f0c:	3001      	adds	r0, #1
 8008f0e:	f43f af0a 	beq.w	8008d26 <_printf_float+0xb6>
 8008f12:	f04f 0a00 	mov.w	sl, #0
 8008f16:	f104 0b1a 	add.w	fp, r4, #26
 8008f1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f1c:	425b      	negs	r3, r3
 8008f1e:	4553      	cmp	r3, sl
 8008f20:	dc01      	bgt.n	8008f26 <_printf_float+0x2b6>
 8008f22:	464b      	mov	r3, r9
 8008f24:	e793      	b.n	8008e4e <_printf_float+0x1de>
 8008f26:	2301      	movs	r3, #1
 8008f28:	465a      	mov	r2, fp
 8008f2a:	4631      	mov	r1, r6
 8008f2c:	4628      	mov	r0, r5
 8008f2e:	47b8      	blx	r7
 8008f30:	3001      	adds	r0, #1
 8008f32:	f43f aef8 	beq.w	8008d26 <_printf_float+0xb6>
 8008f36:	f10a 0a01 	add.w	sl, sl, #1
 8008f3a:	e7ee      	b.n	8008f1a <_printf_float+0x2aa>
 8008f3c:	7fefffff 	.word	0x7fefffff
 8008f40:	0800beee 	.word	0x0800beee
 8008f44:	0800bef2 	.word	0x0800bef2
 8008f48:	0800bef6 	.word	0x0800bef6
 8008f4c:	0800befa 	.word	0x0800befa
 8008f50:	0800befe 	.word	0x0800befe
 8008f54:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008f56:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008f5a:	4553      	cmp	r3, sl
 8008f5c:	bfa8      	it	ge
 8008f5e:	4653      	movge	r3, sl
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	4699      	mov	r9, r3
 8008f64:	dc36      	bgt.n	8008fd4 <_printf_float+0x364>
 8008f66:	f04f 0b00 	mov.w	fp, #0
 8008f6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f6e:	f104 021a 	add.w	r2, r4, #26
 8008f72:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008f74:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f76:	eba3 0309 	sub.w	r3, r3, r9
 8008f7a:	455b      	cmp	r3, fp
 8008f7c:	dc31      	bgt.n	8008fe2 <_printf_float+0x372>
 8008f7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f80:	459a      	cmp	sl, r3
 8008f82:	dc3a      	bgt.n	8008ffa <_printf_float+0x38a>
 8008f84:	6823      	ldr	r3, [r4, #0]
 8008f86:	07da      	lsls	r2, r3, #31
 8008f88:	d437      	bmi.n	8008ffa <_printf_float+0x38a>
 8008f8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f8c:	ebaa 0903 	sub.w	r9, sl, r3
 8008f90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f92:	ebaa 0303 	sub.w	r3, sl, r3
 8008f96:	4599      	cmp	r9, r3
 8008f98:	bfa8      	it	ge
 8008f9a:	4699      	movge	r9, r3
 8008f9c:	f1b9 0f00 	cmp.w	r9, #0
 8008fa0:	dc33      	bgt.n	800900a <_printf_float+0x39a>
 8008fa2:	f04f 0800 	mov.w	r8, #0
 8008fa6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008faa:	f104 0b1a 	add.w	fp, r4, #26
 8008fae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008fb0:	ebaa 0303 	sub.w	r3, sl, r3
 8008fb4:	eba3 0309 	sub.w	r3, r3, r9
 8008fb8:	4543      	cmp	r3, r8
 8008fba:	f77f af7a 	ble.w	8008eb2 <_printf_float+0x242>
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	465a      	mov	r2, fp
 8008fc2:	4631      	mov	r1, r6
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	47b8      	blx	r7
 8008fc8:	3001      	adds	r0, #1
 8008fca:	f43f aeac 	beq.w	8008d26 <_printf_float+0xb6>
 8008fce:	f108 0801 	add.w	r8, r8, #1
 8008fd2:	e7ec      	b.n	8008fae <_printf_float+0x33e>
 8008fd4:	4642      	mov	r2, r8
 8008fd6:	4631      	mov	r1, r6
 8008fd8:	4628      	mov	r0, r5
 8008fda:	47b8      	blx	r7
 8008fdc:	3001      	adds	r0, #1
 8008fde:	d1c2      	bne.n	8008f66 <_printf_float+0x2f6>
 8008fe0:	e6a1      	b.n	8008d26 <_printf_float+0xb6>
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	4631      	mov	r1, r6
 8008fe6:	4628      	mov	r0, r5
 8008fe8:	920a      	str	r2, [sp, #40]	@ 0x28
 8008fea:	47b8      	blx	r7
 8008fec:	3001      	adds	r0, #1
 8008fee:	f43f ae9a 	beq.w	8008d26 <_printf_float+0xb6>
 8008ff2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ff4:	f10b 0b01 	add.w	fp, fp, #1
 8008ff8:	e7bb      	b.n	8008f72 <_printf_float+0x302>
 8008ffa:	4631      	mov	r1, r6
 8008ffc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009000:	4628      	mov	r0, r5
 8009002:	47b8      	blx	r7
 8009004:	3001      	adds	r0, #1
 8009006:	d1c0      	bne.n	8008f8a <_printf_float+0x31a>
 8009008:	e68d      	b.n	8008d26 <_printf_float+0xb6>
 800900a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800900c:	464b      	mov	r3, r9
 800900e:	4631      	mov	r1, r6
 8009010:	4628      	mov	r0, r5
 8009012:	4442      	add	r2, r8
 8009014:	47b8      	blx	r7
 8009016:	3001      	adds	r0, #1
 8009018:	d1c3      	bne.n	8008fa2 <_printf_float+0x332>
 800901a:	e684      	b.n	8008d26 <_printf_float+0xb6>
 800901c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009020:	f1ba 0f01 	cmp.w	sl, #1
 8009024:	dc01      	bgt.n	800902a <_printf_float+0x3ba>
 8009026:	07db      	lsls	r3, r3, #31
 8009028:	d536      	bpl.n	8009098 <_printf_float+0x428>
 800902a:	2301      	movs	r3, #1
 800902c:	4642      	mov	r2, r8
 800902e:	4631      	mov	r1, r6
 8009030:	4628      	mov	r0, r5
 8009032:	47b8      	blx	r7
 8009034:	3001      	adds	r0, #1
 8009036:	f43f ae76 	beq.w	8008d26 <_printf_float+0xb6>
 800903a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800903e:	4631      	mov	r1, r6
 8009040:	4628      	mov	r0, r5
 8009042:	47b8      	blx	r7
 8009044:	3001      	adds	r0, #1
 8009046:	f43f ae6e 	beq.w	8008d26 <_printf_float+0xb6>
 800904a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800904e:	2200      	movs	r2, #0
 8009050:	2300      	movs	r3, #0
 8009052:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009056:	f7f7 fd5b 	bl	8000b10 <__aeabi_dcmpeq>
 800905a:	b9c0      	cbnz	r0, 800908e <_printf_float+0x41e>
 800905c:	4653      	mov	r3, sl
 800905e:	f108 0201 	add.w	r2, r8, #1
 8009062:	4631      	mov	r1, r6
 8009064:	4628      	mov	r0, r5
 8009066:	47b8      	blx	r7
 8009068:	3001      	adds	r0, #1
 800906a:	d10c      	bne.n	8009086 <_printf_float+0x416>
 800906c:	e65b      	b.n	8008d26 <_printf_float+0xb6>
 800906e:	2301      	movs	r3, #1
 8009070:	465a      	mov	r2, fp
 8009072:	4631      	mov	r1, r6
 8009074:	4628      	mov	r0, r5
 8009076:	47b8      	blx	r7
 8009078:	3001      	adds	r0, #1
 800907a:	f43f ae54 	beq.w	8008d26 <_printf_float+0xb6>
 800907e:	f108 0801 	add.w	r8, r8, #1
 8009082:	45d0      	cmp	r8, sl
 8009084:	dbf3      	blt.n	800906e <_printf_float+0x3fe>
 8009086:	464b      	mov	r3, r9
 8009088:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800908c:	e6e0      	b.n	8008e50 <_printf_float+0x1e0>
 800908e:	f04f 0800 	mov.w	r8, #0
 8009092:	f104 0b1a 	add.w	fp, r4, #26
 8009096:	e7f4      	b.n	8009082 <_printf_float+0x412>
 8009098:	2301      	movs	r3, #1
 800909a:	4642      	mov	r2, r8
 800909c:	e7e1      	b.n	8009062 <_printf_float+0x3f2>
 800909e:	2301      	movs	r3, #1
 80090a0:	464a      	mov	r2, r9
 80090a2:	4631      	mov	r1, r6
 80090a4:	4628      	mov	r0, r5
 80090a6:	47b8      	blx	r7
 80090a8:	3001      	adds	r0, #1
 80090aa:	f43f ae3c 	beq.w	8008d26 <_printf_float+0xb6>
 80090ae:	f108 0801 	add.w	r8, r8, #1
 80090b2:	68e3      	ldr	r3, [r4, #12]
 80090b4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80090b6:	1a5b      	subs	r3, r3, r1
 80090b8:	4543      	cmp	r3, r8
 80090ba:	dcf0      	bgt.n	800909e <_printf_float+0x42e>
 80090bc:	e6fd      	b.n	8008eba <_printf_float+0x24a>
 80090be:	f04f 0800 	mov.w	r8, #0
 80090c2:	f104 0919 	add.w	r9, r4, #25
 80090c6:	e7f4      	b.n	80090b2 <_printf_float+0x442>

080090c8 <_printf_common>:
 80090c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090cc:	4616      	mov	r6, r2
 80090ce:	4698      	mov	r8, r3
 80090d0:	688a      	ldr	r2, [r1, #8]
 80090d2:	690b      	ldr	r3, [r1, #16]
 80090d4:	4607      	mov	r7, r0
 80090d6:	4293      	cmp	r3, r2
 80090d8:	bfb8      	it	lt
 80090da:	4613      	movlt	r3, r2
 80090dc:	6033      	str	r3, [r6, #0]
 80090de:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80090e2:	460c      	mov	r4, r1
 80090e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80090e8:	b10a      	cbz	r2, 80090ee <_printf_common+0x26>
 80090ea:	3301      	adds	r3, #1
 80090ec:	6033      	str	r3, [r6, #0]
 80090ee:	6823      	ldr	r3, [r4, #0]
 80090f0:	0699      	lsls	r1, r3, #26
 80090f2:	bf42      	ittt	mi
 80090f4:	6833      	ldrmi	r3, [r6, #0]
 80090f6:	3302      	addmi	r3, #2
 80090f8:	6033      	strmi	r3, [r6, #0]
 80090fa:	6825      	ldr	r5, [r4, #0]
 80090fc:	f015 0506 	ands.w	r5, r5, #6
 8009100:	d106      	bne.n	8009110 <_printf_common+0x48>
 8009102:	f104 0a19 	add.w	sl, r4, #25
 8009106:	68e3      	ldr	r3, [r4, #12]
 8009108:	6832      	ldr	r2, [r6, #0]
 800910a:	1a9b      	subs	r3, r3, r2
 800910c:	42ab      	cmp	r3, r5
 800910e:	dc2b      	bgt.n	8009168 <_printf_common+0xa0>
 8009110:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009114:	6822      	ldr	r2, [r4, #0]
 8009116:	3b00      	subs	r3, #0
 8009118:	bf18      	it	ne
 800911a:	2301      	movne	r3, #1
 800911c:	0692      	lsls	r2, r2, #26
 800911e:	d430      	bmi.n	8009182 <_printf_common+0xba>
 8009120:	4641      	mov	r1, r8
 8009122:	4638      	mov	r0, r7
 8009124:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009128:	47c8      	blx	r9
 800912a:	3001      	adds	r0, #1
 800912c:	d023      	beq.n	8009176 <_printf_common+0xae>
 800912e:	6823      	ldr	r3, [r4, #0]
 8009130:	6922      	ldr	r2, [r4, #16]
 8009132:	f003 0306 	and.w	r3, r3, #6
 8009136:	2b04      	cmp	r3, #4
 8009138:	bf14      	ite	ne
 800913a:	2500      	movne	r5, #0
 800913c:	6833      	ldreq	r3, [r6, #0]
 800913e:	f04f 0600 	mov.w	r6, #0
 8009142:	bf08      	it	eq
 8009144:	68e5      	ldreq	r5, [r4, #12]
 8009146:	f104 041a 	add.w	r4, r4, #26
 800914a:	bf08      	it	eq
 800914c:	1aed      	subeq	r5, r5, r3
 800914e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009152:	bf08      	it	eq
 8009154:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009158:	4293      	cmp	r3, r2
 800915a:	bfc4      	itt	gt
 800915c:	1a9b      	subgt	r3, r3, r2
 800915e:	18ed      	addgt	r5, r5, r3
 8009160:	42b5      	cmp	r5, r6
 8009162:	d11a      	bne.n	800919a <_printf_common+0xd2>
 8009164:	2000      	movs	r0, #0
 8009166:	e008      	b.n	800917a <_printf_common+0xb2>
 8009168:	2301      	movs	r3, #1
 800916a:	4652      	mov	r2, sl
 800916c:	4641      	mov	r1, r8
 800916e:	4638      	mov	r0, r7
 8009170:	47c8      	blx	r9
 8009172:	3001      	adds	r0, #1
 8009174:	d103      	bne.n	800917e <_printf_common+0xb6>
 8009176:	f04f 30ff 	mov.w	r0, #4294967295
 800917a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800917e:	3501      	adds	r5, #1
 8009180:	e7c1      	b.n	8009106 <_printf_common+0x3e>
 8009182:	2030      	movs	r0, #48	@ 0x30
 8009184:	18e1      	adds	r1, r4, r3
 8009186:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800918a:	1c5a      	adds	r2, r3, #1
 800918c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009190:	4422      	add	r2, r4
 8009192:	3302      	adds	r3, #2
 8009194:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009198:	e7c2      	b.n	8009120 <_printf_common+0x58>
 800919a:	2301      	movs	r3, #1
 800919c:	4622      	mov	r2, r4
 800919e:	4641      	mov	r1, r8
 80091a0:	4638      	mov	r0, r7
 80091a2:	47c8      	blx	r9
 80091a4:	3001      	adds	r0, #1
 80091a6:	d0e6      	beq.n	8009176 <_printf_common+0xae>
 80091a8:	3601      	adds	r6, #1
 80091aa:	e7d9      	b.n	8009160 <_printf_common+0x98>

080091ac <_printf_i>:
 80091ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091b0:	7e0f      	ldrb	r7, [r1, #24]
 80091b2:	4691      	mov	r9, r2
 80091b4:	2f78      	cmp	r7, #120	@ 0x78
 80091b6:	4680      	mov	r8, r0
 80091b8:	460c      	mov	r4, r1
 80091ba:	469a      	mov	sl, r3
 80091bc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80091be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80091c2:	d807      	bhi.n	80091d4 <_printf_i+0x28>
 80091c4:	2f62      	cmp	r7, #98	@ 0x62
 80091c6:	d80a      	bhi.n	80091de <_printf_i+0x32>
 80091c8:	2f00      	cmp	r7, #0
 80091ca:	f000 80d3 	beq.w	8009374 <_printf_i+0x1c8>
 80091ce:	2f58      	cmp	r7, #88	@ 0x58
 80091d0:	f000 80ba 	beq.w	8009348 <_printf_i+0x19c>
 80091d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80091d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80091dc:	e03a      	b.n	8009254 <_printf_i+0xa8>
 80091de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80091e2:	2b15      	cmp	r3, #21
 80091e4:	d8f6      	bhi.n	80091d4 <_printf_i+0x28>
 80091e6:	a101      	add	r1, pc, #4	@ (adr r1, 80091ec <_printf_i+0x40>)
 80091e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80091ec:	08009245 	.word	0x08009245
 80091f0:	08009259 	.word	0x08009259
 80091f4:	080091d5 	.word	0x080091d5
 80091f8:	080091d5 	.word	0x080091d5
 80091fc:	080091d5 	.word	0x080091d5
 8009200:	080091d5 	.word	0x080091d5
 8009204:	08009259 	.word	0x08009259
 8009208:	080091d5 	.word	0x080091d5
 800920c:	080091d5 	.word	0x080091d5
 8009210:	080091d5 	.word	0x080091d5
 8009214:	080091d5 	.word	0x080091d5
 8009218:	0800935b 	.word	0x0800935b
 800921c:	08009283 	.word	0x08009283
 8009220:	08009315 	.word	0x08009315
 8009224:	080091d5 	.word	0x080091d5
 8009228:	080091d5 	.word	0x080091d5
 800922c:	0800937d 	.word	0x0800937d
 8009230:	080091d5 	.word	0x080091d5
 8009234:	08009283 	.word	0x08009283
 8009238:	080091d5 	.word	0x080091d5
 800923c:	080091d5 	.word	0x080091d5
 8009240:	0800931d 	.word	0x0800931d
 8009244:	6833      	ldr	r3, [r6, #0]
 8009246:	1d1a      	adds	r2, r3, #4
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	6032      	str	r2, [r6, #0]
 800924c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009250:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009254:	2301      	movs	r3, #1
 8009256:	e09e      	b.n	8009396 <_printf_i+0x1ea>
 8009258:	6833      	ldr	r3, [r6, #0]
 800925a:	6820      	ldr	r0, [r4, #0]
 800925c:	1d19      	adds	r1, r3, #4
 800925e:	6031      	str	r1, [r6, #0]
 8009260:	0606      	lsls	r6, r0, #24
 8009262:	d501      	bpl.n	8009268 <_printf_i+0xbc>
 8009264:	681d      	ldr	r5, [r3, #0]
 8009266:	e003      	b.n	8009270 <_printf_i+0xc4>
 8009268:	0645      	lsls	r5, r0, #25
 800926a:	d5fb      	bpl.n	8009264 <_printf_i+0xb8>
 800926c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009270:	2d00      	cmp	r5, #0
 8009272:	da03      	bge.n	800927c <_printf_i+0xd0>
 8009274:	232d      	movs	r3, #45	@ 0x2d
 8009276:	426d      	negs	r5, r5
 8009278:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800927c:	230a      	movs	r3, #10
 800927e:	4859      	ldr	r0, [pc, #356]	@ (80093e4 <_printf_i+0x238>)
 8009280:	e011      	b.n	80092a6 <_printf_i+0xfa>
 8009282:	6821      	ldr	r1, [r4, #0]
 8009284:	6833      	ldr	r3, [r6, #0]
 8009286:	0608      	lsls	r0, r1, #24
 8009288:	f853 5b04 	ldr.w	r5, [r3], #4
 800928c:	d402      	bmi.n	8009294 <_printf_i+0xe8>
 800928e:	0649      	lsls	r1, r1, #25
 8009290:	bf48      	it	mi
 8009292:	b2ad      	uxthmi	r5, r5
 8009294:	2f6f      	cmp	r7, #111	@ 0x6f
 8009296:	6033      	str	r3, [r6, #0]
 8009298:	bf14      	ite	ne
 800929a:	230a      	movne	r3, #10
 800929c:	2308      	moveq	r3, #8
 800929e:	4851      	ldr	r0, [pc, #324]	@ (80093e4 <_printf_i+0x238>)
 80092a0:	2100      	movs	r1, #0
 80092a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80092a6:	6866      	ldr	r6, [r4, #4]
 80092a8:	2e00      	cmp	r6, #0
 80092aa:	bfa8      	it	ge
 80092ac:	6821      	ldrge	r1, [r4, #0]
 80092ae:	60a6      	str	r6, [r4, #8]
 80092b0:	bfa4      	itt	ge
 80092b2:	f021 0104 	bicge.w	r1, r1, #4
 80092b6:	6021      	strge	r1, [r4, #0]
 80092b8:	b90d      	cbnz	r5, 80092be <_printf_i+0x112>
 80092ba:	2e00      	cmp	r6, #0
 80092bc:	d04b      	beq.n	8009356 <_printf_i+0x1aa>
 80092be:	4616      	mov	r6, r2
 80092c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80092c4:	fb03 5711 	mls	r7, r3, r1, r5
 80092c8:	5dc7      	ldrb	r7, [r0, r7]
 80092ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80092ce:	462f      	mov	r7, r5
 80092d0:	42bb      	cmp	r3, r7
 80092d2:	460d      	mov	r5, r1
 80092d4:	d9f4      	bls.n	80092c0 <_printf_i+0x114>
 80092d6:	2b08      	cmp	r3, #8
 80092d8:	d10b      	bne.n	80092f2 <_printf_i+0x146>
 80092da:	6823      	ldr	r3, [r4, #0]
 80092dc:	07df      	lsls	r7, r3, #31
 80092de:	d508      	bpl.n	80092f2 <_printf_i+0x146>
 80092e0:	6923      	ldr	r3, [r4, #16]
 80092e2:	6861      	ldr	r1, [r4, #4]
 80092e4:	4299      	cmp	r1, r3
 80092e6:	bfde      	ittt	le
 80092e8:	2330      	movle	r3, #48	@ 0x30
 80092ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80092ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 80092f2:	1b92      	subs	r2, r2, r6
 80092f4:	6122      	str	r2, [r4, #16]
 80092f6:	464b      	mov	r3, r9
 80092f8:	4621      	mov	r1, r4
 80092fa:	4640      	mov	r0, r8
 80092fc:	f8cd a000 	str.w	sl, [sp]
 8009300:	aa03      	add	r2, sp, #12
 8009302:	f7ff fee1 	bl	80090c8 <_printf_common>
 8009306:	3001      	adds	r0, #1
 8009308:	d14a      	bne.n	80093a0 <_printf_i+0x1f4>
 800930a:	f04f 30ff 	mov.w	r0, #4294967295
 800930e:	b004      	add	sp, #16
 8009310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009314:	6823      	ldr	r3, [r4, #0]
 8009316:	f043 0320 	orr.w	r3, r3, #32
 800931a:	6023      	str	r3, [r4, #0]
 800931c:	2778      	movs	r7, #120	@ 0x78
 800931e:	4832      	ldr	r0, [pc, #200]	@ (80093e8 <_printf_i+0x23c>)
 8009320:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009324:	6823      	ldr	r3, [r4, #0]
 8009326:	6831      	ldr	r1, [r6, #0]
 8009328:	061f      	lsls	r7, r3, #24
 800932a:	f851 5b04 	ldr.w	r5, [r1], #4
 800932e:	d402      	bmi.n	8009336 <_printf_i+0x18a>
 8009330:	065f      	lsls	r7, r3, #25
 8009332:	bf48      	it	mi
 8009334:	b2ad      	uxthmi	r5, r5
 8009336:	6031      	str	r1, [r6, #0]
 8009338:	07d9      	lsls	r1, r3, #31
 800933a:	bf44      	itt	mi
 800933c:	f043 0320 	orrmi.w	r3, r3, #32
 8009340:	6023      	strmi	r3, [r4, #0]
 8009342:	b11d      	cbz	r5, 800934c <_printf_i+0x1a0>
 8009344:	2310      	movs	r3, #16
 8009346:	e7ab      	b.n	80092a0 <_printf_i+0xf4>
 8009348:	4826      	ldr	r0, [pc, #152]	@ (80093e4 <_printf_i+0x238>)
 800934a:	e7e9      	b.n	8009320 <_printf_i+0x174>
 800934c:	6823      	ldr	r3, [r4, #0]
 800934e:	f023 0320 	bic.w	r3, r3, #32
 8009352:	6023      	str	r3, [r4, #0]
 8009354:	e7f6      	b.n	8009344 <_printf_i+0x198>
 8009356:	4616      	mov	r6, r2
 8009358:	e7bd      	b.n	80092d6 <_printf_i+0x12a>
 800935a:	6833      	ldr	r3, [r6, #0]
 800935c:	6825      	ldr	r5, [r4, #0]
 800935e:	1d18      	adds	r0, r3, #4
 8009360:	6961      	ldr	r1, [r4, #20]
 8009362:	6030      	str	r0, [r6, #0]
 8009364:	062e      	lsls	r6, r5, #24
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	d501      	bpl.n	800936e <_printf_i+0x1c2>
 800936a:	6019      	str	r1, [r3, #0]
 800936c:	e002      	b.n	8009374 <_printf_i+0x1c8>
 800936e:	0668      	lsls	r0, r5, #25
 8009370:	d5fb      	bpl.n	800936a <_printf_i+0x1be>
 8009372:	8019      	strh	r1, [r3, #0]
 8009374:	2300      	movs	r3, #0
 8009376:	4616      	mov	r6, r2
 8009378:	6123      	str	r3, [r4, #16]
 800937a:	e7bc      	b.n	80092f6 <_printf_i+0x14a>
 800937c:	6833      	ldr	r3, [r6, #0]
 800937e:	2100      	movs	r1, #0
 8009380:	1d1a      	adds	r2, r3, #4
 8009382:	6032      	str	r2, [r6, #0]
 8009384:	681e      	ldr	r6, [r3, #0]
 8009386:	6862      	ldr	r2, [r4, #4]
 8009388:	4630      	mov	r0, r6
 800938a:	f000 fa30 	bl	80097ee <memchr>
 800938e:	b108      	cbz	r0, 8009394 <_printf_i+0x1e8>
 8009390:	1b80      	subs	r0, r0, r6
 8009392:	6060      	str	r0, [r4, #4]
 8009394:	6863      	ldr	r3, [r4, #4]
 8009396:	6123      	str	r3, [r4, #16]
 8009398:	2300      	movs	r3, #0
 800939a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800939e:	e7aa      	b.n	80092f6 <_printf_i+0x14a>
 80093a0:	4632      	mov	r2, r6
 80093a2:	4649      	mov	r1, r9
 80093a4:	4640      	mov	r0, r8
 80093a6:	6923      	ldr	r3, [r4, #16]
 80093a8:	47d0      	blx	sl
 80093aa:	3001      	adds	r0, #1
 80093ac:	d0ad      	beq.n	800930a <_printf_i+0x15e>
 80093ae:	6823      	ldr	r3, [r4, #0]
 80093b0:	079b      	lsls	r3, r3, #30
 80093b2:	d413      	bmi.n	80093dc <_printf_i+0x230>
 80093b4:	68e0      	ldr	r0, [r4, #12]
 80093b6:	9b03      	ldr	r3, [sp, #12]
 80093b8:	4298      	cmp	r0, r3
 80093ba:	bfb8      	it	lt
 80093bc:	4618      	movlt	r0, r3
 80093be:	e7a6      	b.n	800930e <_printf_i+0x162>
 80093c0:	2301      	movs	r3, #1
 80093c2:	4632      	mov	r2, r6
 80093c4:	4649      	mov	r1, r9
 80093c6:	4640      	mov	r0, r8
 80093c8:	47d0      	blx	sl
 80093ca:	3001      	adds	r0, #1
 80093cc:	d09d      	beq.n	800930a <_printf_i+0x15e>
 80093ce:	3501      	adds	r5, #1
 80093d0:	68e3      	ldr	r3, [r4, #12]
 80093d2:	9903      	ldr	r1, [sp, #12]
 80093d4:	1a5b      	subs	r3, r3, r1
 80093d6:	42ab      	cmp	r3, r5
 80093d8:	dcf2      	bgt.n	80093c0 <_printf_i+0x214>
 80093da:	e7eb      	b.n	80093b4 <_printf_i+0x208>
 80093dc:	2500      	movs	r5, #0
 80093de:	f104 0619 	add.w	r6, r4, #25
 80093e2:	e7f5      	b.n	80093d0 <_printf_i+0x224>
 80093e4:	0800bf00 	.word	0x0800bf00
 80093e8:	0800bf11 	.word	0x0800bf11

080093ec <std>:
 80093ec:	2300      	movs	r3, #0
 80093ee:	b510      	push	{r4, lr}
 80093f0:	4604      	mov	r4, r0
 80093f2:	e9c0 3300 	strd	r3, r3, [r0]
 80093f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80093fa:	6083      	str	r3, [r0, #8]
 80093fc:	8181      	strh	r1, [r0, #12]
 80093fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8009400:	81c2      	strh	r2, [r0, #14]
 8009402:	6183      	str	r3, [r0, #24]
 8009404:	4619      	mov	r1, r3
 8009406:	2208      	movs	r2, #8
 8009408:	305c      	adds	r0, #92	@ 0x5c
 800940a:	f000 f914 	bl	8009636 <memset>
 800940e:	4b0d      	ldr	r3, [pc, #52]	@ (8009444 <std+0x58>)
 8009410:	6224      	str	r4, [r4, #32]
 8009412:	6263      	str	r3, [r4, #36]	@ 0x24
 8009414:	4b0c      	ldr	r3, [pc, #48]	@ (8009448 <std+0x5c>)
 8009416:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009418:	4b0c      	ldr	r3, [pc, #48]	@ (800944c <std+0x60>)
 800941a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800941c:	4b0c      	ldr	r3, [pc, #48]	@ (8009450 <std+0x64>)
 800941e:	6323      	str	r3, [r4, #48]	@ 0x30
 8009420:	4b0c      	ldr	r3, [pc, #48]	@ (8009454 <std+0x68>)
 8009422:	429c      	cmp	r4, r3
 8009424:	d006      	beq.n	8009434 <std+0x48>
 8009426:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800942a:	4294      	cmp	r4, r2
 800942c:	d002      	beq.n	8009434 <std+0x48>
 800942e:	33d0      	adds	r3, #208	@ 0xd0
 8009430:	429c      	cmp	r4, r3
 8009432:	d105      	bne.n	8009440 <std+0x54>
 8009434:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800943c:	f000 b9cc 	b.w	80097d8 <__retarget_lock_init_recursive>
 8009440:	bd10      	pop	{r4, pc}
 8009442:	bf00      	nop
 8009444:	080095b1 	.word	0x080095b1
 8009448:	080095d3 	.word	0x080095d3
 800944c:	0800960b 	.word	0x0800960b
 8009450:	0800962f 	.word	0x0800962f
 8009454:	2000040c 	.word	0x2000040c

08009458 <stdio_exit_handler>:
 8009458:	4a02      	ldr	r2, [pc, #8]	@ (8009464 <stdio_exit_handler+0xc>)
 800945a:	4903      	ldr	r1, [pc, #12]	@ (8009468 <stdio_exit_handler+0x10>)
 800945c:	4803      	ldr	r0, [pc, #12]	@ (800946c <stdio_exit_handler+0x14>)
 800945e:	f000 b869 	b.w	8009534 <_fwalk_sglue>
 8009462:	bf00      	nop
 8009464:	20000010 	.word	0x20000010
 8009468:	0800aff1 	.word	0x0800aff1
 800946c:	20000020 	.word	0x20000020

08009470 <cleanup_stdio>:
 8009470:	6841      	ldr	r1, [r0, #4]
 8009472:	4b0c      	ldr	r3, [pc, #48]	@ (80094a4 <cleanup_stdio+0x34>)
 8009474:	b510      	push	{r4, lr}
 8009476:	4299      	cmp	r1, r3
 8009478:	4604      	mov	r4, r0
 800947a:	d001      	beq.n	8009480 <cleanup_stdio+0x10>
 800947c:	f001 fdb8 	bl	800aff0 <_fflush_r>
 8009480:	68a1      	ldr	r1, [r4, #8]
 8009482:	4b09      	ldr	r3, [pc, #36]	@ (80094a8 <cleanup_stdio+0x38>)
 8009484:	4299      	cmp	r1, r3
 8009486:	d002      	beq.n	800948e <cleanup_stdio+0x1e>
 8009488:	4620      	mov	r0, r4
 800948a:	f001 fdb1 	bl	800aff0 <_fflush_r>
 800948e:	68e1      	ldr	r1, [r4, #12]
 8009490:	4b06      	ldr	r3, [pc, #24]	@ (80094ac <cleanup_stdio+0x3c>)
 8009492:	4299      	cmp	r1, r3
 8009494:	d004      	beq.n	80094a0 <cleanup_stdio+0x30>
 8009496:	4620      	mov	r0, r4
 8009498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800949c:	f001 bda8 	b.w	800aff0 <_fflush_r>
 80094a0:	bd10      	pop	{r4, pc}
 80094a2:	bf00      	nop
 80094a4:	2000040c 	.word	0x2000040c
 80094a8:	20000474 	.word	0x20000474
 80094ac:	200004dc 	.word	0x200004dc

080094b0 <global_stdio_init.part.0>:
 80094b0:	b510      	push	{r4, lr}
 80094b2:	4b0b      	ldr	r3, [pc, #44]	@ (80094e0 <global_stdio_init.part.0+0x30>)
 80094b4:	4c0b      	ldr	r4, [pc, #44]	@ (80094e4 <global_stdio_init.part.0+0x34>)
 80094b6:	4a0c      	ldr	r2, [pc, #48]	@ (80094e8 <global_stdio_init.part.0+0x38>)
 80094b8:	4620      	mov	r0, r4
 80094ba:	601a      	str	r2, [r3, #0]
 80094bc:	2104      	movs	r1, #4
 80094be:	2200      	movs	r2, #0
 80094c0:	f7ff ff94 	bl	80093ec <std>
 80094c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80094c8:	2201      	movs	r2, #1
 80094ca:	2109      	movs	r1, #9
 80094cc:	f7ff ff8e 	bl	80093ec <std>
 80094d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80094d4:	2202      	movs	r2, #2
 80094d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094da:	2112      	movs	r1, #18
 80094dc:	f7ff bf86 	b.w	80093ec <std>
 80094e0:	20000544 	.word	0x20000544
 80094e4:	2000040c 	.word	0x2000040c
 80094e8:	08009459 	.word	0x08009459

080094ec <__sfp_lock_acquire>:
 80094ec:	4801      	ldr	r0, [pc, #4]	@ (80094f4 <__sfp_lock_acquire+0x8>)
 80094ee:	f000 b974 	b.w	80097da <__retarget_lock_acquire_recursive>
 80094f2:	bf00      	nop
 80094f4:	2000054d 	.word	0x2000054d

080094f8 <__sfp_lock_release>:
 80094f8:	4801      	ldr	r0, [pc, #4]	@ (8009500 <__sfp_lock_release+0x8>)
 80094fa:	f000 b96f 	b.w	80097dc <__retarget_lock_release_recursive>
 80094fe:	bf00      	nop
 8009500:	2000054d 	.word	0x2000054d

08009504 <__sinit>:
 8009504:	b510      	push	{r4, lr}
 8009506:	4604      	mov	r4, r0
 8009508:	f7ff fff0 	bl	80094ec <__sfp_lock_acquire>
 800950c:	6a23      	ldr	r3, [r4, #32]
 800950e:	b11b      	cbz	r3, 8009518 <__sinit+0x14>
 8009510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009514:	f7ff bff0 	b.w	80094f8 <__sfp_lock_release>
 8009518:	4b04      	ldr	r3, [pc, #16]	@ (800952c <__sinit+0x28>)
 800951a:	6223      	str	r3, [r4, #32]
 800951c:	4b04      	ldr	r3, [pc, #16]	@ (8009530 <__sinit+0x2c>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d1f5      	bne.n	8009510 <__sinit+0xc>
 8009524:	f7ff ffc4 	bl	80094b0 <global_stdio_init.part.0>
 8009528:	e7f2      	b.n	8009510 <__sinit+0xc>
 800952a:	bf00      	nop
 800952c:	08009471 	.word	0x08009471
 8009530:	20000544 	.word	0x20000544

08009534 <_fwalk_sglue>:
 8009534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009538:	4607      	mov	r7, r0
 800953a:	4688      	mov	r8, r1
 800953c:	4614      	mov	r4, r2
 800953e:	2600      	movs	r6, #0
 8009540:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009544:	f1b9 0901 	subs.w	r9, r9, #1
 8009548:	d505      	bpl.n	8009556 <_fwalk_sglue+0x22>
 800954a:	6824      	ldr	r4, [r4, #0]
 800954c:	2c00      	cmp	r4, #0
 800954e:	d1f7      	bne.n	8009540 <_fwalk_sglue+0xc>
 8009550:	4630      	mov	r0, r6
 8009552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009556:	89ab      	ldrh	r3, [r5, #12]
 8009558:	2b01      	cmp	r3, #1
 800955a:	d907      	bls.n	800956c <_fwalk_sglue+0x38>
 800955c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009560:	3301      	adds	r3, #1
 8009562:	d003      	beq.n	800956c <_fwalk_sglue+0x38>
 8009564:	4629      	mov	r1, r5
 8009566:	4638      	mov	r0, r7
 8009568:	47c0      	blx	r8
 800956a:	4306      	orrs	r6, r0
 800956c:	3568      	adds	r5, #104	@ 0x68
 800956e:	e7e9      	b.n	8009544 <_fwalk_sglue+0x10>

08009570 <siprintf>:
 8009570:	b40e      	push	{r1, r2, r3}
 8009572:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009576:	b500      	push	{lr}
 8009578:	b09c      	sub	sp, #112	@ 0x70
 800957a:	ab1d      	add	r3, sp, #116	@ 0x74
 800957c:	9002      	str	r0, [sp, #8]
 800957e:	9006      	str	r0, [sp, #24]
 8009580:	9107      	str	r1, [sp, #28]
 8009582:	9104      	str	r1, [sp, #16]
 8009584:	4808      	ldr	r0, [pc, #32]	@ (80095a8 <siprintf+0x38>)
 8009586:	4909      	ldr	r1, [pc, #36]	@ (80095ac <siprintf+0x3c>)
 8009588:	f853 2b04 	ldr.w	r2, [r3], #4
 800958c:	9105      	str	r1, [sp, #20]
 800958e:	6800      	ldr	r0, [r0, #0]
 8009590:	a902      	add	r1, sp, #8
 8009592:	9301      	str	r3, [sp, #4]
 8009594:	f001 fbb0 	bl	800acf8 <_svfiprintf_r>
 8009598:	2200      	movs	r2, #0
 800959a:	9b02      	ldr	r3, [sp, #8]
 800959c:	701a      	strb	r2, [r3, #0]
 800959e:	b01c      	add	sp, #112	@ 0x70
 80095a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80095a4:	b003      	add	sp, #12
 80095a6:	4770      	bx	lr
 80095a8:	2000001c 	.word	0x2000001c
 80095ac:	ffff0208 	.word	0xffff0208

080095b0 <__sread>:
 80095b0:	b510      	push	{r4, lr}
 80095b2:	460c      	mov	r4, r1
 80095b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095b8:	f000 f89c 	bl	80096f4 <_read_r>
 80095bc:	2800      	cmp	r0, #0
 80095be:	bfab      	itete	ge
 80095c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80095c2:	89a3      	ldrhlt	r3, [r4, #12]
 80095c4:	181b      	addge	r3, r3, r0
 80095c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80095ca:	bfac      	ite	ge
 80095cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80095ce:	81a3      	strhlt	r3, [r4, #12]
 80095d0:	bd10      	pop	{r4, pc}

080095d2 <__swrite>:
 80095d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095d6:	461f      	mov	r7, r3
 80095d8:	898b      	ldrh	r3, [r1, #12]
 80095da:	4605      	mov	r5, r0
 80095dc:	05db      	lsls	r3, r3, #23
 80095de:	460c      	mov	r4, r1
 80095e0:	4616      	mov	r6, r2
 80095e2:	d505      	bpl.n	80095f0 <__swrite+0x1e>
 80095e4:	2302      	movs	r3, #2
 80095e6:	2200      	movs	r2, #0
 80095e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095ec:	f000 f870 	bl	80096d0 <_lseek_r>
 80095f0:	89a3      	ldrh	r3, [r4, #12]
 80095f2:	4632      	mov	r2, r6
 80095f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80095f8:	81a3      	strh	r3, [r4, #12]
 80095fa:	4628      	mov	r0, r5
 80095fc:	463b      	mov	r3, r7
 80095fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009606:	f000 b8ab 	b.w	8009760 <_write_r>

0800960a <__sseek>:
 800960a:	b510      	push	{r4, lr}
 800960c:	460c      	mov	r4, r1
 800960e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009612:	f000 f85d 	bl	80096d0 <_lseek_r>
 8009616:	1c43      	adds	r3, r0, #1
 8009618:	89a3      	ldrh	r3, [r4, #12]
 800961a:	bf15      	itete	ne
 800961c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800961e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009622:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009626:	81a3      	strheq	r3, [r4, #12]
 8009628:	bf18      	it	ne
 800962a:	81a3      	strhne	r3, [r4, #12]
 800962c:	bd10      	pop	{r4, pc}

0800962e <__sclose>:
 800962e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009632:	f000 b83d 	b.w	80096b0 <_close_r>

08009636 <memset>:
 8009636:	4603      	mov	r3, r0
 8009638:	4402      	add	r2, r0
 800963a:	4293      	cmp	r3, r2
 800963c:	d100      	bne.n	8009640 <memset+0xa>
 800963e:	4770      	bx	lr
 8009640:	f803 1b01 	strb.w	r1, [r3], #1
 8009644:	e7f9      	b.n	800963a <memset+0x4>

08009646 <_raise_r>:
 8009646:	291f      	cmp	r1, #31
 8009648:	b538      	push	{r3, r4, r5, lr}
 800964a:	4605      	mov	r5, r0
 800964c:	460c      	mov	r4, r1
 800964e:	d904      	bls.n	800965a <_raise_r+0x14>
 8009650:	2316      	movs	r3, #22
 8009652:	6003      	str	r3, [r0, #0]
 8009654:	f04f 30ff 	mov.w	r0, #4294967295
 8009658:	bd38      	pop	{r3, r4, r5, pc}
 800965a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800965c:	b112      	cbz	r2, 8009664 <_raise_r+0x1e>
 800965e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009662:	b94b      	cbnz	r3, 8009678 <_raise_r+0x32>
 8009664:	4628      	mov	r0, r5
 8009666:	f000 f869 	bl	800973c <_getpid_r>
 800966a:	4622      	mov	r2, r4
 800966c:	4601      	mov	r1, r0
 800966e:	4628      	mov	r0, r5
 8009670:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009674:	f000 b850 	b.w	8009718 <_kill_r>
 8009678:	2b01      	cmp	r3, #1
 800967a:	d00a      	beq.n	8009692 <_raise_r+0x4c>
 800967c:	1c59      	adds	r1, r3, #1
 800967e:	d103      	bne.n	8009688 <_raise_r+0x42>
 8009680:	2316      	movs	r3, #22
 8009682:	6003      	str	r3, [r0, #0]
 8009684:	2001      	movs	r0, #1
 8009686:	e7e7      	b.n	8009658 <_raise_r+0x12>
 8009688:	2100      	movs	r1, #0
 800968a:	4620      	mov	r0, r4
 800968c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009690:	4798      	blx	r3
 8009692:	2000      	movs	r0, #0
 8009694:	e7e0      	b.n	8009658 <_raise_r+0x12>
	...

08009698 <raise>:
 8009698:	4b02      	ldr	r3, [pc, #8]	@ (80096a4 <raise+0xc>)
 800969a:	4601      	mov	r1, r0
 800969c:	6818      	ldr	r0, [r3, #0]
 800969e:	f7ff bfd2 	b.w	8009646 <_raise_r>
 80096a2:	bf00      	nop
 80096a4:	2000001c 	.word	0x2000001c

080096a8 <_localeconv_r>:
 80096a8:	4800      	ldr	r0, [pc, #0]	@ (80096ac <_localeconv_r+0x4>)
 80096aa:	4770      	bx	lr
 80096ac:	2000015c 	.word	0x2000015c

080096b0 <_close_r>:
 80096b0:	b538      	push	{r3, r4, r5, lr}
 80096b2:	2300      	movs	r3, #0
 80096b4:	4d05      	ldr	r5, [pc, #20]	@ (80096cc <_close_r+0x1c>)
 80096b6:	4604      	mov	r4, r0
 80096b8:	4608      	mov	r0, r1
 80096ba:	602b      	str	r3, [r5, #0]
 80096bc:	f7fc fac7 	bl	8005c4e <_close>
 80096c0:	1c43      	adds	r3, r0, #1
 80096c2:	d102      	bne.n	80096ca <_close_r+0x1a>
 80096c4:	682b      	ldr	r3, [r5, #0]
 80096c6:	b103      	cbz	r3, 80096ca <_close_r+0x1a>
 80096c8:	6023      	str	r3, [r4, #0]
 80096ca:	bd38      	pop	{r3, r4, r5, pc}
 80096cc:	20000548 	.word	0x20000548

080096d0 <_lseek_r>:
 80096d0:	b538      	push	{r3, r4, r5, lr}
 80096d2:	4604      	mov	r4, r0
 80096d4:	4608      	mov	r0, r1
 80096d6:	4611      	mov	r1, r2
 80096d8:	2200      	movs	r2, #0
 80096da:	4d05      	ldr	r5, [pc, #20]	@ (80096f0 <_lseek_r+0x20>)
 80096dc:	602a      	str	r2, [r5, #0]
 80096de:	461a      	mov	r2, r3
 80096e0:	f7fc fad9 	bl	8005c96 <_lseek>
 80096e4:	1c43      	adds	r3, r0, #1
 80096e6:	d102      	bne.n	80096ee <_lseek_r+0x1e>
 80096e8:	682b      	ldr	r3, [r5, #0]
 80096ea:	b103      	cbz	r3, 80096ee <_lseek_r+0x1e>
 80096ec:	6023      	str	r3, [r4, #0]
 80096ee:	bd38      	pop	{r3, r4, r5, pc}
 80096f0:	20000548 	.word	0x20000548

080096f4 <_read_r>:
 80096f4:	b538      	push	{r3, r4, r5, lr}
 80096f6:	4604      	mov	r4, r0
 80096f8:	4608      	mov	r0, r1
 80096fa:	4611      	mov	r1, r2
 80096fc:	2200      	movs	r2, #0
 80096fe:	4d05      	ldr	r5, [pc, #20]	@ (8009714 <_read_r+0x20>)
 8009700:	602a      	str	r2, [r5, #0]
 8009702:	461a      	mov	r2, r3
 8009704:	f7fc fa6a 	bl	8005bdc <_read>
 8009708:	1c43      	adds	r3, r0, #1
 800970a:	d102      	bne.n	8009712 <_read_r+0x1e>
 800970c:	682b      	ldr	r3, [r5, #0]
 800970e:	b103      	cbz	r3, 8009712 <_read_r+0x1e>
 8009710:	6023      	str	r3, [r4, #0]
 8009712:	bd38      	pop	{r3, r4, r5, pc}
 8009714:	20000548 	.word	0x20000548

08009718 <_kill_r>:
 8009718:	b538      	push	{r3, r4, r5, lr}
 800971a:	2300      	movs	r3, #0
 800971c:	4d06      	ldr	r5, [pc, #24]	@ (8009738 <_kill_r+0x20>)
 800971e:	4604      	mov	r4, r0
 8009720:	4608      	mov	r0, r1
 8009722:	4611      	mov	r1, r2
 8009724:	602b      	str	r3, [r5, #0]
 8009726:	f7fc fa3e 	bl	8005ba6 <_kill>
 800972a:	1c43      	adds	r3, r0, #1
 800972c:	d102      	bne.n	8009734 <_kill_r+0x1c>
 800972e:	682b      	ldr	r3, [r5, #0]
 8009730:	b103      	cbz	r3, 8009734 <_kill_r+0x1c>
 8009732:	6023      	str	r3, [r4, #0]
 8009734:	bd38      	pop	{r3, r4, r5, pc}
 8009736:	bf00      	nop
 8009738:	20000548 	.word	0x20000548

0800973c <_getpid_r>:
 800973c:	f7fc ba2c 	b.w	8005b98 <_getpid>

08009740 <_sbrk_r>:
 8009740:	b538      	push	{r3, r4, r5, lr}
 8009742:	2300      	movs	r3, #0
 8009744:	4d05      	ldr	r5, [pc, #20]	@ (800975c <_sbrk_r+0x1c>)
 8009746:	4604      	mov	r4, r0
 8009748:	4608      	mov	r0, r1
 800974a:	602b      	str	r3, [r5, #0]
 800974c:	f7fc fab0 	bl	8005cb0 <_sbrk>
 8009750:	1c43      	adds	r3, r0, #1
 8009752:	d102      	bne.n	800975a <_sbrk_r+0x1a>
 8009754:	682b      	ldr	r3, [r5, #0]
 8009756:	b103      	cbz	r3, 800975a <_sbrk_r+0x1a>
 8009758:	6023      	str	r3, [r4, #0]
 800975a:	bd38      	pop	{r3, r4, r5, pc}
 800975c:	20000548 	.word	0x20000548

08009760 <_write_r>:
 8009760:	b538      	push	{r3, r4, r5, lr}
 8009762:	4604      	mov	r4, r0
 8009764:	4608      	mov	r0, r1
 8009766:	4611      	mov	r1, r2
 8009768:	2200      	movs	r2, #0
 800976a:	4d05      	ldr	r5, [pc, #20]	@ (8009780 <_write_r+0x20>)
 800976c:	602a      	str	r2, [r5, #0]
 800976e:	461a      	mov	r2, r3
 8009770:	f7fc fa51 	bl	8005c16 <_write>
 8009774:	1c43      	adds	r3, r0, #1
 8009776:	d102      	bne.n	800977e <_write_r+0x1e>
 8009778:	682b      	ldr	r3, [r5, #0]
 800977a:	b103      	cbz	r3, 800977e <_write_r+0x1e>
 800977c:	6023      	str	r3, [r4, #0]
 800977e:	bd38      	pop	{r3, r4, r5, pc}
 8009780:	20000548 	.word	0x20000548

08009784 <__errno>:
 8009784:	4b01      	ldr	r3, [pc, #4]	@ (800978c <__errno+0x8>)
 8009786:	6818      	ldr	r0, [r3, #0]
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop
 800978c:	2000001c 	.word	0x2000001c

08009790 <__libc_init_array>:
 8009790:	b570      	push	{r4, r5, r6, lr}
 8009792:	2600      	movs	r6, #0
 8009794:	4d0c      	ldr	r5, [pc, #48]	@ (80097c8 <__libc_init_array+0x38>)
 8009796:	4c0d      	ldr	r4, [pc, #52]	@ (80097cc <__libc_init_array+0x3c>)
 8009798:	1b64      	subs	r4, r4, r5
 800979a:	10a4      	asrs	r4, r4, #2
 800979c:	42a6      	cmp	r6, r4
 800979e:	d109      	bne.n	80097b4 <__libc_init_array+0x24>
 80097a0:	f001 ff68 	bl	800b674 <_init>
 80097a4:	2600      	movs	r6, #0
 80097a6:	4d0a      	ldr	r5, [pc, #40]	@ (80097d0 <__libc_init_array+0x40>)
 80097a8:	4c0a      	ldr	r4, [pc, #40]	@ (80097d4 <__libc_init_array+0x44>)
 80097aa:	1b64      	subs	r4, r4, r5
 80097ac:	10a4      	asrs	r4, r4, #2
 80097ae:	42a6      	cmp	r6, r4
 80097b0:	d105      	bne.n	80097be <__libc_init_array+0x2e>
 80097b2:	bd70      	pop	{r4, r5, r6, pc}
 80097b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80097b8:	4798      	blx	r3
 80097ba:	3601      	adds	r6, #1
 80097bc:	e7ee      	b.n	800979c <__libc_init_array+0xc>
 80097be:	f855 3b04 	ldr.w	r3, [r5], #4
 80097c2:	4798      	blx	r3
 80097c4:	3601      	adds	r6, #1
 80097c6:	e7f2      	b.n	80097ae <__libc_init_array+0x1e>
 80097c8:	0800c268 	.word	0x0800c268
 80097cc:	0800c268 	.word	0x0800c268
 80097d0:	0800c268 	.word	0x0800c268
 80097d4:	0800c26c 	.word	0x0800c26c

080097d8 <__retarget_lock_init_recursive>:
 80097d8:	4770      	bx	lr

080097da <__retarget_lock_acquire_recursive>:
 80097da:	4770      	bx	lr

080097dc <__retarget_lock_release_recursive>:
 80097dc:	4770      	bx	lr

080097de <strcpy>:
 80097de:	4603      	mov	r3, r0
 80097e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097e4:	f803 2b01 	strb.w	r2, [r3], #1
 80097e8:	2a00      	cmp	r2, #0
 80097ea:	d1f9      	bne.n	80097e0 <strcpy+0x2>
 80097ec:	4770      	bx	lr

080097ee <memchr>:
 80097ee:	4603      	mov	r3, r0
 80097f0:	b510      	push	{r4, lr}
 80097f2:	b2c9      	uxtb	r1, r1
 80097f4:	4402      	add	r2, r0
 80097f6:	4293      	cmp	r3, r2
 80097f8:	4618      	mov	r0, r3
 80097fa:	d101      	bne.n	8009800 <memchr+0x12>
 80097fc:	2000      	movs	r0, #0
 80097fe:	e003      	b.n	8009808 <memchr+0x1a>
 8009800:	7804      	ldrb	r4, [r0, #0]
 8009802:	3301      	adds	r3, #1
 8009804:	428c      	cmp	r4, r1
 8009806:	d1f6      	bne.n	80097f6 <memchr+0x8>
 8009808:	bd10      	pop	{r4, pc}

0800980a <quorem>:
 800980a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800980e:	6903      	ldr	r3, [r0, #16]
 8009810:	690c      	ldr	r4, [r1, #16]
 8009812:	4607      	mov	r7, r0
 8009814:	42a3      	cmp	r3, r4
 8009816:	db7e      	blt.n	8009916 <quorem+0x10c>
 8009818:	3c01      	subs	r4, #1
 800981a:	00a3      	lsls	r3, r4, #2
 800981c:	f100 0514 	add.w	r5, r0, #20
 8009820:	f101 0814 	add.w	r8, r1, #20
 8009824:	9300      	str	r3, [sp, #0]
 8009826:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800982a:	9301      	str	r3, [sp, #4]
 800982c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009830:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009834:	3301      	adds	r3, #1
 8009836:	429a      	cmp	r2, r3
 8009838:	fbb2 f6f3 	udiv	r6, r2, r3
 800983c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009840:	d32e      	bcc.n	80098a0 <quorem+0x96>
 8009842:	f04f 0a00 	mov.w	sl, #0
 8009846:	46c4      	mov	ip, r8
 8009848:	46ae      	mov	lr, r5
 800984a:	46d3      	mov	fp, sl
 800984c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009850:	b298      	uxth	r0, r3
 8009852:	fb06 a000 	mla	r0, r6, r0, sl
 8009856:	0c1b      	lsrs	r3, r3, #16
 8009858:	0c02      	lsrs	r2, r0, #16
 800985a:	fb06 2303 	mla	r3, r6, r3, r2
 800985e:	f8de 2000 	ldr.w	r2, [lr]
 8009862:	b280      	uxth	r0, r0
 8009864:	b292      	uxth	r2, r2
 8009866:	1a12      	subs	r2, r2, r0
 8009868:	445a      	add	r2, fp
 800986a:	f8de 0000 	ldr.w	r0, [lr]
 800986e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009872:	b29b      	uxth	r3, r3
 8009874:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009878:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800987c:	b292      	uxth	r2, r2
 800987e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009882:	45e1      	cmp	r9, ip
 8009884:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009888:	f84e 2b04 	str.w	r2, [lr], #4
 800988c:	d2de      	bcs.n	800984c <quorem+0x42>
 800988e:	9b00      	ldr	r3, [sp, #0]
 8009890:	58eb      	ldr	r3, [r5, r3]
 8009892:	b92b      	cbnz	r3, 80098a0 <quorem+0x96>
 8009894:	9b01      	ldr	r3, [sp, #4]
 8009896:	3b04      	subs	r3, #4
 8009898:	429d      	cmp	r5, r3
 800989a:	461a      	mov	r2, r3
 800989c:	d32f      	bcc.n	80098fe <quorem+0xf4>
 800989e:	613c      	str	r4, [r7, #16]
 80098a0:	4638      	mov	r0, r7
 80098a2:	f001 f8c5 	bl	800aa30 <__mcmp>
 80098a6:	2800      	cmp	r0, #0
 80098a8:	db25      	blt.n	80098f6 <quorem+0xec>
 80098aa:	4629      	mov	r1, r5
 80098ac:	2000      	movs	r0, #0
 80098ae:	f858 2b04 	ldr.w	r2, [r8], #4
 80098b2:	f8d1 c000 	ldr.w	ip, [r1]
 80098b6:	fa1f fe82 	uxth.w	lr, r2
 80098ba:	fa1f f38c 	uxth.w	r3, ip
 80098be:	eba3 030e 	sub.w	r3, r3, lr
 80098c2:	4403      	add	r3, r0
 80098c4:	0c12      	lsrs	r2, r2, #16
 80098c6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80098ca:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098d4:	45c1      	cmp	r9, r8
 80098d6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80098da:	f841 3b04 	str.w	r3, [r1], #4
 80098de:	d2e6      	bcs.n	80098ae <quorem+0xa4>
 80098e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098e8:	b922      	cbnz	r2, 80098f4 <quorem+0xea>
 80098ea:	3b04      	subs	r3, #4
 80098ec:	429d      	cmp	r5, r3
 80098ee:	461a      	mov	r2, r3
 80098f0:	d30b      	bcc.n	800990a <quorem+0x100>
 80098f2:	613c      	str	r4, [r7, #16]
 80098f4:	3601      	adds	r6, #1
 80098f6:	4630      	mov	r0, r6
 80098f8:	b003      	add	sp, #12
 80098fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098fe:	6812      	ldr	r2, [r2, #0]
 8009900:	3b04      	subs	r3, #4
 8009902:	2a00      	cmp	r2, #0
 8009904:	d1cb      	bne.n	800989e <quorem+0x94>
 8009906:	3c01      	subs	r4, #1
 8009908:	e7c6      	b.n	8009898 <quorem+0x8e>
 800990a:	6812      	ldr	r2, [r2, #0]
 800990c:	3b04      	subs	r3, #4
 800990e:	2a00      	cmp	r2, #0
 8009910:	d1ef      	bne.n	80098f2 <quorem+0xe8>
 8009912:	3c01      	subs	r4, #1
 8009914:	e7ea      	b.n	80098ec <quorem+0xe2>
 8009916:	2000      	movs	r0, #0
 8009918:	e7ee      	b.n	80098f8 <quorem+0xee>
 800991a:	0000      	movs	r0, r0
 800991c:	0000      	movs	r0, r0
	...

08009920 <_dtoa_r>:
 8009920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009924:	4614      	mov	r4, r2
 8009926:	461d      	mov	r5, r3
 8009928:	69c7      	ldr	r7, [r0, #28]
 800992a:	b097      	sub	sp, #92	@ 0x5c
 800992c:	4683      	mov	fp, r0
 800992e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009932:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8009934:	b97f      	cbnz	r7, 8009956 <_dtoa_r+0x36>
 8009936:	2010      	movs	r0, #16
 8009938:	f7ff f83e 	bl	80089b8 <malloc>
 800993c:	4602      	mov	r2, r0
 800993e:	f8cb 001c 	str.w	r0, [fp, #28]
 8009942:	b920      	cbnz	r0, 800994e <_dtoa_r+0x2e>
 8009944:	21ef      	movs	r1, #239	@ 0xef
 8009946:	4ba8      	ldr	r3, [pc, #672]	@ (8009be8 <_dtoa_r+0x2c8>)
 8009948:	48a8      	ldr	r0, [pc, #672]	@ (8009bec <_dtoa_r+0x2cc>)
 800994a:	f001 fba1 	bl	800b090 <__assert_func>
 800994e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009952:	6007      	str	r7, [r0, #0]
 8009954:	60c7      	str	r7, [r0, #12]
 8009956:	f8db 301c 	ldr.w	r3, [fp, #28]
 800995a:	6819      	ldr	r1, [r3, #0]
 800995c:	b159      	cbz	r1, 8009976 <_dtoa_r+0x56>
 800995e:	685a      	ldr	r2, [r3, #4]
 8009960:	2301      	movs	r3, #1
 8009962:	4093      	lsls	r3, r2
 8009964:	604a      	str	r2, [r1, #4]
 8009966:	608b      	str	r3, [r1, #8]
 8009968:	4658      	mov	r0, fp
 800996a:	f000 fe29 	bl	800a5c0 <_Bfree>
 800996e:	2200      	movs	r2, #0
 8009970:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009974:	601a      	str	r2, [r3, #0]
 8009976:	1e2b      	subs	r3, r5, #0
 8009978:	bfaf      	iteee	ge
 800997a:	2300      	movge	r3, #0
 800997c:	2201      	movlt	r2, #1
 800997e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009982:	9303      	strlt	r3, [sp, #12]
 8009984:	bfa8      	it	ge
 8009986:	6033      	strge	r3, [r6, #0]
 8009988:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800998c:	4b98      	ldr	r3, [pc, #608]	@ (8009bf0 <_dtoa_r+0x2d0>)
 800998e:	bfb8      	it	lt
 8009990:	6032      	strlt	r2, [r6, #0]
 8009992:	ea33 0308 	bics.w	r3, r3, r8
 8009996:	d112      	bne.n	80099be <_dtoa_r+0x9e>
 8009998:	f242 730f 	movw	r3, #9999	@ 0x270f
 800999c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800999e:	6013      	str	r3, [r2, #0]
 80099a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80099a4:	4323      	orrs	r3, r4
 80099a6:	f000 8550 	beq.w	800a44a <_dtoa_r+0xb2a>
 80099aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80099ac:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8009bf4 <_dtoa_r+0x2d4>
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	f000 8552 	beq.w	800a45a <_dtoa_r+0xb3a>
 80099b6:	f10a 0303 	add.w	r3, sl, #3
 80099ba:	f000 bd4c 	b.w	800a456 <_dtoa_r+0xb36>
 80099be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099c2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80099c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80099ca:	2200      	movs	r2, #0
 80099cc:	2300      	movs	r3, #0
 80099ce:	f7f7 f89f 	bl	8000b10 <__aeabi_dcmpeq>
 80099d2:	4607      	mov	r7, r0
 80099d4:	b158      	cbz	r0, 80099ee <_dtoa_r+0xce>
 80099d6:	2301      	movs	r3, #1
 80099d8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80099da:	6013      	str	r3, [r2, #0]
 80099dc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80099de:	b113      	cbz	r3, 80099e6 <_dtoa_r+0xc6>
 80099e0:	4b85      	ldr	r3, [pc, #532]	@ (8009bf8 <_dtoa_r+0x2d8>)
 80099e2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80099e4:	6013      	str	r3, [r2, #0]
 80099e6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8009bfc <_dtoa_r+0x2dc>
 80099ea:	f000 bd36 	b.w	800a45a <_dtoa_r+0xb3a>
 80099ee:	ab14      	add	r3, sp, #80	@ 0x50
 80099f0:	9301      	str	r3, [sp, #4]
 80099f2:	ab15      	add	r3, sp, #84	@ 0x54
 80099f4:	9300      	str	r3, [sp, #0]
 80099f6:	4658      	mov	r0, fp
 80099f8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80099fc:	f001 f8c8 	bl	800ab90 <__d2b>
 8009a00:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8009a04:	4681      	mov	r9, r0
 8009a06:	2e00      	cmp	r6, #0
 8009a08:	d077      	beq.n	8009afa <_dtoa_r+0x1da>
 8009a0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a10:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009a14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a18:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009a1c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009a20:	9712      	str	r7, [sp, #72]	@ 0x48
 8009a22:	4619      	mov	r1, r3
 8009a24:	2200      	movs	r2, #0
 8009a26:	4b76      	ldr	r3, [pc, #472]	@ (8009c00 <_dtoa_r+0x2e0>)
 8009a28:	f7f6 fc52 	bl	80002d0 <__aeabi_dsub>
 8009a2c:	a368      	add	r3, pc, #416	@ (adr r3, 8009bd0 <_dtoa_r+0x2b0>)
 8009a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a32:	f7f6 fe05 	bl	8000640 <__aeabi_dmul>
 8009a36:	a368      	add	r3, pc, #416	@ (adr r3, 8009bd8 <_dtoa_r+0x2b8>)
 8009a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3c:	f7f6 fc4a 	bl	80002d4 <__adddf3>
 8009a40:	4604      	mov	r4, r0
 8009a42:	4630      	mov	r0, r6
 8009a44:	460d      	mov	r5, r1
 8009a46:	f7f6 fd91 	bl	800056c <__aeabi_i2d>
 8009a4a:	a365      	add	r3, pc, #404	@ (adr r3, 8009be0 <_dtoa_r+0x2c0>)
 8009a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a50:	f7f6 fdf6 	bl	8000640 <__aeabi_dmul>
 8009a54:	4602      	mov	r2, r0
 8009a56:	460b      	mov	r3, r1
 8009a58:	4620      	mov	r0, r4
 8009a5a:	4629      	mov	r1, r5
 8009a5c:	f7f6 fc3a 	bl	80002d4 <__adddf3>
 8009a60:	4604      	mov	r4, r0
 8009a62:	460d      	mov	r5, r1
 8009a64:	f7f7 f89c 	bl	8000ba0 <__aeabi_d2iz>
 8009a68:	2200      	movs	r2, #0
 8009a6a:	4607      	mov	r7, r0
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	4620      	mov	r0, r4
 8009a70:	4629      	mov	r1, r5
 8009a72:	f7f7 f857 	bl	8000b24 <__aeabi_dcmplt>
 8009a76:	b140      	cbz	r0, 8009a8a <_dtoa_r+0x16a>
 8009a78:	4638      	mov	r0, r7
 8009a7a:	f7f6 fd77 	bl	800056c <__aeabi_i2d>
 8009a7e:	4622      	mov	r2, r4
 8009a80:	462b      	mov	r3, r5
 8009a82:	f7f7 f845 	bl	8000b10 <__aeabi_dcmpeq>
 8009a86:	b900      	cbnz	r0, 8009a8a <_dtoa_r+0x16a>
 8009a88:	3f01      	subs	r7, #1
 8009a8a:	2f16      	cmp	r7, #22
 8009a8c:	d853      	bhi.n	8009b36 <_dtoa_r+0x216>
 8009a8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a92:	4b5c      	ldr	r3, [pc, #368]	@ (8009c04 <_dtoa_r+0x2e4>)
 8009a94:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9c:	f7f7 f842 	bl	8000b24 <__aeabi_dcmplt>
 8009aa0:	2800      	cmp	r0, #0
 8009aa2:	d04a      	beq.n	8009b3a <_dtoa_r+0x21a>
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	3f01      	subs	r7, #1
 8009aa8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009aaa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009aac:	1b9b      	subs	r3, r3, r6
 8009aae:	1e5a      	subs	r2, r3, #1
 8009ab0:	bf46      	itte	mi
 8009ab2:	f1c3 0801 	rsbmi	r8, r3, #1
 8009ab6:	2300      	movmi	r3, #0
 8009ab8:	f04f 0800 	movpl.w	r8, #0
 8009abc:	9209      	str	r2, [sp, #36]	@ 0x24
 8009abe:	bf48      	it	mi
 8009ac0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8009ac2:	2f00      	cmp	r7, #0
 8009ac4:	db3b      	blt.n	8009b3e <_dtoa_r+0x21e>
 8009ac6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ac8:	970e      	str	r7, [sp, #56]	@ 0x38
 8009aca:	443b      	add	r3, r7
 8009acc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ace:	2300      	movs	r3, #0
 8009ad0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ad2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009ad4:	2b09      	cmp	r3, #9
 8009ad6:	d866      	bhi.n	8009ba6 <_dtoa_r+0x286>
 8009ad8:	2b05      	cmp	r3, #5
 8009ada:	bfc4      	itt	gt
 8009adc:	3b04      	subgt	r3, #4
 8009ade:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8009ae0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009ae2:	bfc8      	it	gt
 8009ae4:	2400      	movgt	r4, #0
 8009ae6:	f1a3 0302 	sub.w	r3, r3, #2
 8009aea:	bfd8      	it	le
 8009aec:	2401      	movle	r4, #1
 8009aee:	2b03      	cmp	r3, #3
 8009af0:	d864      	bhi.n	8009bbc <_dtoa_r+0x29c>
 8009af2:	e8df f003 	tbb	[pc, r3]
 8009af6:	382b      	.short	0x382b
 8009af8:	5636      	.short	0x5636
 8009afa:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009afe:	441e      	add	r6, r3
 8009b00:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009b04:	2b20      	cmp	r3, #32
 8009b06:	bfc1      	itttt	gt
 8009b08:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009b0c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009b10:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009b14:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009b18:	bfd6      	itet	le
 8009b1a:	f1c3 0320 	rsble	r3, r3, #32
 8009b1e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009b22:	fa04 f003 	lslle.w	r0, r4, r3
 8009b26:	f7f6 fd11 	bl	800054c <__aeabi_ui2d>
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009b30:	3e01      	subs	r6, #1
 8009b32:	9212      	str	r2, [sp, #72]	@ 0x48
 8009b34:	e775      	b.n	8009a22 <_dtoa_r+0x102>
 8009b36:	2301      	movs	r3, #1
 8009b38:	e7b6      	b.n	8009aa8 <_dtoa_r+0x188>
 8009b3a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009b3c:	e7b5      	b.n	8009aaa <_dtoa_r+0x18a>
 8009b3e:	427b      	negs	r3, r7
 8009b40:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b42:	2300      	movs	r3, #0
 8009b44:	eba8 0807 	sub.w	r8, r8, r7
 8009b48:	930e      	str	r3, [sp, #56]	@ 0x38
 8009b4a:	e7c2      	b.n	8009ad2 <_dtoa_r+0x1b2>
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b50:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	dc35      	bgt.n	8009bc2 <_dtoa_r+0x2a2>
 8009b56:	2301      	movs	r3, #1
 8009b58:	461a      	mov	r2, r3
 8009b5a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009b5e:	9221      	str	r2, [sp, #132]	@ 0x84
 8009b60:	e00b      	b.n	8009b7a <_dtoa_r+0x25a>
 8009b62:	2301      	movs	r3, #1
 8009b64:	e7f3      	b.n	8009b4e <_dtoa_r+0x22e>
 8009b66:	2300      	movs	r3, #0
 8009b68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b6a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009b6c:	18fb      	adds	r3, r7, r3
 8009b6e:	9308      	str	r3, [sp, #32]
 8009b70:	3301      	adds	r3, #1
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	9307      	str	r3, [sp, #28]
 8009b76:	bfb8      	it	lt
 8009b78:	2301      	movlt	r3, #1
 8009b7a:	2100      	movs	r1, #0
 8009b7c:	2204      	movs	r2, #4
 8009b7e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009b82:	f102 0514 	add.w	r5, r2, #20
 8009b86:	429d      	cmp	r5, r3
 8009b88:	d91f      	bls.n	8009bca <_dtoa_r+0x2aa>
 8009b8a:	6041      	str	r1, [r0, #4]
 8009b8c:	4658      	mov	r0, fp
 8009b8e:	f000 fcd7 	bl	800a540 <_Balloc>
 8009b92:	4682      	mov	sl, r0
 8009b94:	2800      	cmp	r0, #0
 8009b96:	d139      	bne.n	8009c0c <_dtoa_r+0x2ec>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	f240 11af 	movw	r1, #431	@ 0x1af
 8009b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8009c08 <_dtoa_r+0x2e8>)
 8009ba0:	e6d2      	b.n	8009948 <_dtoa_r+0x28>
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e7e0      	b.n	8009b68 <_dtoa_r+0x248>
 8009ba6:	2401      	movs	r4, #1
 8009ba8:	2300      	movs	r3, #0
 8009baa:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009bac:	9320      	str	r3, [sp, #128]	@ 0x80
 8009bae:	f04f 33ff 	mov.w	r3, #4294967295
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009bb8:	2312      	movs	r3, #18
 8009bba:	e7d0      	b.n	8009b5e <_dtoa_r+0x23e>
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009bc0:	e7f5      	b.n	8009bae <_dtoa_r+0x28e>
 8009bc2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009bc4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009bc8:	e7d7      	b.n	8009b7a <_dtoa_r+0x25a>
 8009bca:	3101      	adds	r1, #1
 8009bcc:	0052      	lsls	r2, r2, #1
 8009bce:	e7d8      	b.n	8009b82 <_dtoa_r+0x262>
 8009bd0:	636f4361 	.word	0x636f4361
 8009bd4:	3fd287a7 	.word	0x3fd287a7
 8009bd8:	8b60c8b3 	.word	0x8b60c8b3
 8009bdc:	3fc68a28 	.word	0x3fc68a28
 8009be0:	509f79fb 	.word	0x509f79fb
 8009be4:	3fd34413 	.word	0x3fd34413
 8009be8:	0800bf2f 	.word	0x0800bf2f
 8009bec:	0800bf46 	.word	0x0800bf46
 8009bf0:	7ff00000 	.word	0x7ff00000
 8009bf4:	0800bf2b 	.word	0x0800bf2b
 8009bf8:	0800beff 	.word	0x0800beff
 8009bfc:	0800befe 	.word	0x0800befe
 8009c00:	3ff80000 	.word	0x3ff80000
 8009c04:	0800c040 	.word	0x0800c040
 8009c08:	0800bf9e 	.word	0x0800bf9e
 8009c0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009c10:	6018      	str	r0, [r3, #0]
 8009c12:	9b07      	ldr	r3, [sp, #28]
 8009c14:	2b0e      	cmp	r3, #14
 8009c16:	f200 80a4 	bhi.w	8009d62 <_dtoa_r+0x442>
 8009c1a:	2c00      	cmp	r4, #0
 8009c1c:	f000 80a1 	beq.w	8009d62 <_dtoa_r+0x442>
 8009c20:	2f00      	cmp	r7, #0
 8009c22:	dd33      	ble.n	8009c8c <_dtoa_r+0x36c>
 8009c24:	4b86      	ldr	r3, [pc, #536]	@ (8009e40 <_dtoa_r+0x520>)
 8009c26:	f007 020f 	and.w	r2, r7, #15
 8009c2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c2e:	05f8      	lsls	r0, r7, #23
 8009c30:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009c34:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009c38:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009c3c:	d516      	bpl.n	8009c6c <_dtoa_r+0x34c>
 8009c3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c42:	4b80      	ldr	r3, [pc, #512]	@ (8009e44 <_dtoa_r+0x524>)
 8009c44:	2603      	movs	r6, #3
 8009c46:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009c4a:	f7f6 fe23 	bl	8000894 <__aeabi_ddiv>
 8009c4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c52:	f004 040f 	and.w	r4, r4, #15
 8009c56:	4d7b      	ldr	r5, [pc, #492]	@ (8009e44 <_dtoa_r+0x524>)
 8009c58:	b954      	cbnz	r4, 8009c70 <_dtoa_r+0x350>
 8009c5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c62:	f7f6 fe17 	bl	8000894 <__aeabi_ddiv>
 8009c66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c6a:	e028      	b.n	8009cbe <_dtoa_r+0x39e>
 8009c6c:	2602      	movs	r6, #2
 8009c6e:	e7f2      	b.n	8009c56 <_dtoa_r+0x336>
 8009c70:	07e1      	lsls	r1, r4, #31
 8009c72:	d508      	bpl.n	8009c86 <_dtoa_r+0x366>
 8009c74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c78:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009c7c:	f7f6 fce0 	bl	8000640 <__aeabi_dmul>
 8009c80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c84:	3601      	adds	r6, #1
 8009c86:	1064      	asrs	r4, r4, #1
 8009c88:	3508      	adds	r5, #8
 8009c8a:	e7e5      	b.n	8009c58 <_dtoa_r+0x338>
 8009c8c:	f000 80d2 	beq.w	8009e34 <_dtoa_r+0x514>
 8009c90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c94:	427c      	negs	r4, r7
 8009c96:	4b6a      	ldr	r3, [pc, #424]	@ (8009e40 <_dtoa_r+0x520>)
 8009c98:	f004 020f 	and.w	r2, r4, #15
 8009c9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca4:	f7f6 fccc 	bl	8000640 <__aeabi_dmul>
 8009ca8:	2602      	movs	r6, #2
 8009caa:	2300      	movs	r3, #0
 8009cac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cb0:	4d64      	ldr	r5, [pc, #400]	@ (8009e44 <_dtoa_r+0x524>)
 8009cb2:	1124      	asrs	r4, r4, #4
 8009cb4:	2c00      	cmp	r4, #0
 8009cb6:	f040 80b2 	bne.w	8009e1e <_dtoa_r+0x4fe>
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d1d3      	bne.n	8009c66 <_dtoa_r+0x346>
 8009cbe:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009cc2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	f000 80b7 	beq.w	8009e38 <_dtoa_r+0x518>
 8009cca:	2200      	movs	r2, #0
 8009ccc:	4620      	mov	r0, r4
 8009cce:	4629      	mov	r1, r5
 8009cd0:	4b5d      	ldr	r3, [pc, #372]	@ (8009e48 <_dtoa_r+0x528>)
 8009cd2:	f7f6 ff27 	bl	8000b24 <__aeabi_dcmplt>
 8009cd6:	2800      	cmp	r0, #0
 8009cd8:	f000 80ae 	beq.w	8009e38 <_dtoa_r+0x518>
 8009cdc:	9b07      	ldr	r3, [sp, #28]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	f000 80aa 	beq.w	8009e38 <_dtoa_r+0x518>
 8009ce4:	9b08      	ldr	r3, [sp, #32]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	dd37      	ble.n	8009d5a <_dtoa_r+0x43a>
 8009cea:	1e7b      	subs	r3, r7, #1
 8009cec:	4620      	mov	r0, r4
 8009cee:	9304      	str	r3, [sp, #16]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	4629      	mov	r1, r5
 8009cf4:	4b55      	ldr	r3, [pc, #340]	@ (8009e4c <_dtoa_r+0x52c>)
 8009cf6:	f7f6 fca3 	bl	8000640 <__aeabi_dmul>
 8009cfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cfe:	9c08      	ldr	r4, [sp, #32]
 8009d00:	3601      	adds	r6, #1
 8009d02:	4630      	mov	r0, r6
 8009d04:	f7f6 fc32 	bl	800056c <__aeabi_i2d>
 8009d08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d0c:	f7f6 fc98 	bl	8000640 <__aeabi_dmul>
 8009d10:	2200      	movs	r2, #0
 8009d12:	4b4f      	ldr	r3, [pc, #316]	@ (8009e50 <_dtoa_r+0x530>)
 8009d14:	f7f6 fade 	bl	80002d4 <__adddf3>
 8009d18:	4605      	mov	r5, r0
 8009d1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009d1e:	2c00      	cmp	r4, #0
 8009d20:	f040 809a 	bne.w	8009e58 <_dtoa_r+0x538>
 8009d24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	4b4a      	ldr	r3, [pc, #296]	@ (8009e54 <_dtoa_r+0x534>)
 8009d2c:	f7f6 fad0 	bl	80002d0 <__aeabi_dsub>
 8009d30:	4602      	mov	r2, r0
 8009d32:	460b      	mov	r3, r1
 8009d34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009d38:	462a      	mov	r2, r5
 8009d3a:	4633      	mov	r3, r6
 8009d3c:	f7f6 ff10 	bl	8000b60 <__aeabi_dcmpgt>
 8009d40:	2800      	cmp	r0, #0
 8009d42:	f040 828e 	bne.w	800a262 <_dtoa_r+0x942>
 8009d46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d4a:	462a      	mov	r2, r5
 8009d4c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009d50:	f7f6 fee8 	bl	8000b24 <__aeabi_dcmplt>
 8009d54:	2800      	cmp	r0, #0
 8009d56:	f040 8127 	bne.w	8009fa8 <_dtoa_r+0x688>
 8009d5a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009d5e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009d62:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f2c0 8163 	blt.w	800a030 <_dtoa_r+0x710>
 8009d6a:	2f0e      	cmp	r7, #14
 8009d6c:	f300 8160 	bgt.w	800a030 <_dtoa_r+0x710>
 8009d70:	4b33      	ldr	r3, [pc, #204]	@ (8009e40 <_dtoa_r+0x520>)
 8009d72:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009d76:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009d7a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009d7e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	da03      	bge.n	8009d8c <_dtoa_r+0x46c>
 8009d84:	9b07      	ldr	r3, [sp, #28]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	f340 8100 	ble.w	8009f8c <_dtoa_r+0x66c>
 8009d8c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009d90:	4656      	mov	r6, sl
 8009d92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d96:	4620      	mov	r0, r4
 8009d98:	4629      	mov	r1, r5
 8009d9a:	f7f6 fd7b 	bl	8000894 <__aeabi_ddiv>
 8009d9e:	f7f6 feff 	bl	8000ba0 <__aeabi_d2iz>
 8009da2:	4680      	mov	r8, r0
 8009da4:	f7f6 fbe2 	bl	800056c <__aeabi_i2d>
 8009da8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009dac:	f7f6 fc48 	bl	8000640 <__aeabi_dmul>
 8009db0:	4602      	mov	r2, r0
 8009db2:	460b      	mov	r3, r1
 8009db4:	4620      	mov	r0, r4
 8009db6:	4629      	mov	r1, r5
 8009db8:	f7f6 fa8a 	bl	80002d0 <__aeabi_dsub>
 8009dbc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009dc0:	9d07      	ldr	r5, [sp, #28]
 8009dc2:	f806 4b01 	strb.w	r4, [r6], #1
 8009dc6:	eba6 040a 	sub.w	r4, r6, sl
 8009dca:	42a5      	cmp	r5, r4
 8009dcc:	4602      	mov	r2, r0
 8009dce:	460b      	mov	r3, r1
 8009dd0:	f040 8116 	bne.w	800a000 <_dtoa_r+0x6e0>
 8009dd4:	f7f6 fa7e 	bl	80002d4 <__adddf3>
 8009dd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ddc:	4604      	mov	r4, r0
 8009dde:	460d      	mov	r5, r1
 8009de0:	f7f6 febe 	bl	8000b60 <__aeabi_dcmpgt>
 8009de4:	2800      	cmp	r0, #0
 8009de6:	f040 80f8 	bne.w	8009fda <_dtoa_r+0x6ba>
 8009dea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009dee:	4620      	mov	r0, r4
 8009df0:	4629      	mov	r1, r5
 8009df2:	f7f6 fe8d 	bl	8000b10 <__aeabi_dcmpeq>
 8009df6:	b118      	cbz	r0, 8009e00 <_dtoa_r+0x4e0>
 8009df8:	f018 0f01 	tst.w	r8, #1
 8009dfc:	f040 80ed 	bne.w	8009fda <_dtoa_r+0x6ba>
 8009e00:	4649      	mov	r1, r9
 8009e02:	4658      	mov	r0, fp
 8009e04:	f000 fbdc 	bl	800a5c0 <_Bfree>
 8009e08:	2300      	movs	r3, #0
 8009e0a:	7033      	strb	r3, [r6, #0]
 8009e0c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009e0e:	3701      	adds	r7, #1
 8009e10:	601f      	str	r7, [r3, #0]
 8009e12:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	f000 8320 	beq.w	800a45a <_dtoa_r+0xb3a>
 8009e1a:	601e      	str	r6, [r3, #0]
 8009e1c:	e31d      	b.n	800a45a <_dtoa_r+0xb3a>
 8009e1e:	07e2      	lsls	r2, r4, #31
 8009e20:	d505      	bpl.n	8009e2e <_dtoa_r+0x50e>
 8009e22:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009e26:	f7f6 fc0b 	bl	8000640 <__aeabi_dmul>
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	3601      	adds	r6, #1
 8009e2e:	1064      	asrs	r4, r4, #1
 8009e30:	3508      	adds	r5, #8
 8009e32:	e73f      	b.n	8009cb4 <_dtoa_r+0x394>
 8009e34:	2602      	movs	r6, #2
 8009e36:	e742      	b.n	8009cbe <_dtoa_r+0x39e>
 8009e38:	9c07      	ldr	r4, [sp, #28]
 8009e3a:	9704      	str	r7, [sp, #16]
 8009e3c:	e761      	b.n	8009d02 <_dtoa_r+0x3e2>
 8009e3e:	bf00      	nop
 8009e40:	0800c040 	.word	0x0800c040
 8009e44:	0800c018 	.word	0x0800c018
 8009e48:	3ff00000 	.word	0x3ff00000
 8009e4c:	40240000 	.word	0x40240000
 8009e50:	401c0000 	.word	0x401c0000
 8009e54:	40140000 	.word	0x40140000
 8009e58:	4b70      	ldr	r3, [pc, #448]	@ (800a01c <_dtoa_r+0x6fc>)
 8009e5a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009e5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009e64:	4454      	add	r4, sl
 8009e66:	2900      	cmp	r1, #0
 8009e68:	d045      	beq.n	8009ef6 <_dtoa_r+0x5d6>
 8009e6a:	2000      	movs	r0, #0
 8009e6c:	496c      	ldr	r1, [pc, #432]	@ (800a020 <_dtoa_r+0x700>)
 8009e6e:	f7f6 fd11 	bl	8000894 <__aeabi_ddiv>
 8009e72:	4633      	mov	r3, r6
 8009e74:	462a      	mov	r2, r5
 8009e76:	f7f6 fa2b 	bl	80002d0 <__aeabi_dsub>
 8009e7a:	4656      	mov	r6, sl
 8009e7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009e80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e84:	f7f6 fe8c 	bl	8000ba0 <__aeabi_d2iz>
 8009e88:	4605      	mov	r5, r0
 8009e8a:	f7f6 fb6f 	bl	800056c <__aeabi_i2d>
 8009e8e:	4602      	mov	r2, r0
 8009e90:	460b      	mov	r3, r1
 8009e92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e96:	f7f6 fa1b 	bl	80002d0 <__aeabi_dsub>
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	3530      	adds	r5, #48	@ 0x30
 8009ea0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009ea4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009ea8:	f806 5b01 	strb.w	r5, [r6], #1
 8009eac:	f7f6 fe3a 	bl	8000b24 <__aeabi_dcmplt>
 8009eb0:	2800      	cmp	r0, #0
 8009eb2:	d163      	bne.n	8009f7c <_dtoa_r+0x65c>
 8009eb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009eb8:	2000      	movs	r0, #0
 8009eba:	495a      	ldr	r1, [pc, #360]	@ (800a024 <_dtoa_r+0x704>)
 8009ebc:	f7f6 fa08 	bl	80002d0 <__aeabi_dsub>
 8009ec0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009ec4:	f7f6 fe2e 	bl	8000b24 <__aeabi_dcmplt>
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	f040 8087 	bne.w	8009fdc <_dtoa_r+0x6bc>
 8009ece:	42a6      	cmp	r6, r4
 8009ed0:	f43f af43 	beq.w	8009d5a <_dtoa_r+0x43a>
 8009ed4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009ed8:	2200      	movs	r2, #0
 8009eda:	4b53      	ldr	r3, [pc, #332]	@ (800a028 <_dtoa_r+0x708>)
 8009edc:	f7f6 fbb0 	bl	8000640 <__aeabi_dmul>
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009ee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009eea:	4b4f      	ldr	r3, [pc, #316]	@ (800a028 <_dtoa_r+0x708>)
 8009eec:	f7f6 fba8 	bl	8000640 <__aeabi_dmul>
 8009ef0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ef4:	e7c4      	b.n	8009e80 <_dtoa_r+0x560>
 8009ef6:	4631      	mov	r1, r6
 8009ef8:	4628      	mov	r0, r5
 8009efa:	f7f6 fba1 	bl	8000640 <__aeabi_dmul>
 8009efe:	4656      	mov	r6, sl
 8009f00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009f04:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009f06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f0a:	f7f6 fe49 	bl	8000ba0 <__aeabi_d2iz>
 8009f0e:	4605      	mov	r5, r0
 8009f10:	f7f6 fb2c 	bl	800056c <__aeabi_i2d>
 8009f14:	4602      	mov	r2, r0
 8009f16:	460b      	mov	r3, r1
 8009f18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f1c:	f7f6 f9d8 	bl	80002d0 <__aeabi_dsub>
 8009f20:	4602      	mov	r2, r0
 8009f22:	460b      	mov	r3, r1
 8009f24:	3530      	adds	r5, #48	@ 0x30
 8009f26:	f806 5b01 	strb.w	r5, [r6], #1
 8009f2a:	42a6      	cmp	r6, r4
 8009f2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f30:	f04f 0200 	mov.w	r2, #0
 8009f34:	d124      	bne.n	8009f80 <_dtoa_r+0x660>
 8009f36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009f3a:	4b39      	ldr	r3, [pc, #228]	@ (800a020 <_dtoa_r+0x700>)
 8009f3c:	f7f6 f9ca 	bl	80002d4 <__adddf3>
 8009f40:	4602      	mov	r2, r0
 8009f42:	460b      	mov	r3, r1
 8009f44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f48:	f7f6 fe0a 	bl	8000b60 <__aeabi_dcmpgt>
 8009f4c:	2800      	cmp	r0, #0
 8009f4e:	d145      	bne.n	8009fdc <_dtoa_r+0x6bc>
 8009f50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009f54:	2000      	movs	r0, #0
 8009f56:	4932      	ldr	r1, [pc, #200]	@ (800a020 <_dtoa_r+0x700>)
 8009f58:	f7f6 f9ba 	bl	80002d0 <__aeabi_dsub>
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	460b      	mov	r3, r1
 8009f60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f64:	f7f6 fdde 	bl	8000b24 <__aeabi_dcmplt>
 8009f68:	2800      	cmp	r0, #0
 8009f6a:	f43f aef6 	beq.w	8009d5a <_dtoa_r+0x43a>
 8009f6e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009f70:	1e73      	subs	r3, r6, #1
 8009f72:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009f74:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009f78:	2b30      	cmp	r3, #48	@ 0x30
 8009f7a:	d0f8      	beq.n	8009f6e <_dtoa_r+0x64e>
 8009f7c:	9f04      	ldr	r7, [sp, #16]
 8009f7e:	e73f      	b.n	8009e00 <_dtoa_r+0x4e0>
 8009f80:	4b29      	ldr	r3, [pc, #164]	@ (800a028 <_dtoa_r+0x708>)
 8009f82:	f7f6 fb5d 	bl	8000640 <__aeabi_dmul>
 8009f86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f8a:	e7bc      	b.n	8009f06 <_dtoa_r+0x5e6>
 8009f8c:	d10c      	bne.n	8009fa8 <_dtoa_r+0x688>
 8009f8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f92:	2200      	movs	r2, #0
 8009f94:	4b25      	ldr	r3, [pc, #148]	@ (800a02c <_dtoa_r+0x70c>)
 8009f96:	f7f6 fb53 	bl	8000640 <__aeabi_dmul>
 8009f9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f9e:	f7f6 fdd5 	bl	8000b4c <__aeabi_dcmpge>
 8009fa2:	2800      	cmp	r0, #0
 8009fa4:	f000 815b 	beq.w	800a25e <_dtoa_r+0x93e>
 8009fa8:	2400      	movs	r4, #0
 8009faa:	4625      	mov	r5, r4
 8009fac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009fae:	4656      	mov	r6, sl
 8009fb0:	43db      	mvns	r3, r3
 8009fb2:	9304      	str	r3, [sp, #16]
 8009fb4:	2700      	movs	r7, #0
 8009fb6:	4621      	mov	r1, r4
 8009fb8:	4658      	mov	r0, fp
 8009fba:	f000 fb01 	bl	800a5c0 <_Bfree>
 8009fbe:	2d00      	cmp	r5, #0
 8009fc0:	d0dc      	beq.n	8009f7c <_dtoa_r+0x65c>
 8009fc2:	b12f      	cbz	r7, 8009fd0 <_dtoa_r+0x6b0>
 8009fc4:	42af      	cmp	r7, r5
 8009fc6:	d003      	beq.n	8009fd0 <_dtoa_r+0x6b0>
 8009fc8:	4639      	mov	r1, r7
 8009fca:	4658      	mov	r0, fp
 8009fcc:	f000 faf8 	bl	800a5c0 <_Bfree>
 8009fd0:	4629      	mov	r1, r5
 8009fd2:	4658      	mov	r0, fp
 8009fd4:	f000 faf4 	bl	800a5c0 <_Bfree>
 8009fd8:	e7d0      	b.n	8009f7c <_dtoa_r+0x65c>
 8009fda:	9704      	str	r7, [sp, #16]
 8009fdc:	4633      	mov	r3, r6
 8009fde:	461e      	mov	r6, r3
 8009fe0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009fe4:	2a39      	cmp	r2, #57	@ 0x39
 8009fe6:	d107      	bne.n	8009ff8 <_dtoa_r+0x6d8>
 8009fe8:	459a      	cmp	sl, r3
 8009fea:	d1f8      	bne.n	8009fde <_dtoa_r+0x6be>
 8009fec:	9a04      	ldr	r2, [sp, #16]
 8009fee:	3201      	adds	r2, #1
 8009ff0:	9204      	str	r2, [sp, #16]
 8009ff2:	2230      	movs	r2, #48	@ 0x30
 8009ff4:	f88a 2000 	strb.w	r2, [sl]
 8009ff8:	781a      	ldrb	r2, [r3, #0]
 8009ffa:	3201      	adds	r2, #1
 8009ffc:	701a      	strb	r2, [r3, #0]
 8009ffe:	e7bd      	b.n	8009f7c <_dtoa_r+0x65c>
 800a000:	2200      	movs	r2, #0
 800a002:	4b09      	ldr	r3, [pc, #36]	@ (800a028 <_dtoa_r+0x708>)
 800a004:	f7f6 fb1c 	bl	8000640 <__aeabi_dmul>
 800a008:	2200      	movs	r2, #0
 800a00a:	2300      	movs	r3, #0
 800a00c:	4604      	mov	r4, r0
 800a00e:	460d      	mov	r5, r1
 800a010:	f7f6 fd7e 	bl	8000b10 <__aeabi_dcmpeq>
 800a014:	2800      	cmp	r0, #0
 800a016:	f43f aebc 	beq.w	8009d92 <_dtoa_r+0x472>
 800a01a:	e6f1      	b.n	8009e00 <_dtoa_r+0x4e0>
 800a01c:	0800c040 	.word	0x0800c040
 800a020:	3fe00000 	.word	0x3fe00000
 800a024:	3ff00000 	.word	0x3ff00000
 800a028:	40240000 	.word	0x40240000
 800a02c:	40140000 	.word	0x40140000
 800a030:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a032:	2a00      	cmp	r2, #0
 800a034:	f000 80db 	beq.w	800a1ee <_dtoa_r+0x8ce>
 800a038:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a03a:	2a01      	cmp	r2, #1
 800a03c:	f300 80bf 	bgt.w	800a1be <_dtoa_r+0x89e>
 800a040:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a042:	2a00      	cmp	r2, #0
 800a044:	f000 80b7 	beq.w	800a1b6 <_dtoa_r+0x896>
 800a048:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a04c:	4646      	mov	r6, r8
 800a04e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a050:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a052:	2101      	movs	r1, #1
 800a054:	441a      	add	r2, r3
 800a056:	4658      	mov	r0, fp
 800a058:	4498      	add	r8, r3
 800a05a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a05c:	f000 fb64 	bl	800a728 <__i2b>
 800a060:	4605      	mov	r5, r0
 800a062:	b15e      	cbz	r6, 800a07c <_dtoa_r+0x75c>
 800a064:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a066:	2b00      	cmp	r3, #0
 800a068:	dd08      	ble.n	800a07c <_dtoa_r+0x75c>
 800a06a:	42b3      	cmp	r3, r6
 800a06c:	bfa8      	it	ge
 800a06e:	4633      	movge	r3, r6
 800a070:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a072:	eba8 0803 	sub.w	r8, r8, r3
 800a076:	1af6      	subs	r6, r6, r3
 800a078:	1ad3      	subs	r3, r2, r3
 800a07a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a07c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a07e:	b1f3      	cbz	r3, 800a0be <_dtoa_r+0x79e>
 800a080:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a082:	2b00      	cmp	r3, #0
 800a084:	f000 80b7 	beq.w	800a1f6 <_dtoa_r+0x8d6>
 800a088:	b18c      	cbz	r4, 800a0ae <_dtoa_r+0x78e>
 800a08a:	4629      	mov	r1, r5
 800a08c:	4622      	mov	r2, r4
 800a08e:	4658      	mov	r0, fp
 800a090:	f000 fc08 	bl	800a8a4 <__pow5mult>
 800a094:	464a      	mov	r2, r9
 800a096:	4601      	mov	r1, r0
 800a098:	4605      	mov	r5, r0
 800a09a:	4658      	mov	r0, fp
 800a09c:	f000 fb5a 	bl	800a754 <__multiply>
 800a0a0:	4649      	mov	r1, r9
 800a0a2:	9004      	str	r0, [sp, #16]
 800a0a4:	4658      	mov	r0, fp
 800a0a6:	f000 fa8b 	bl	800a5c0 <_Bfree>
 800a0aa:	9b04      	ldr	r3, [sp, #16]
 800a0ac:	4699      	mov	r9, r3
 800a0ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0b0:	1b1a      	subs	r2, r3, r4
 800a0b2:	d004      	beq.n	800a0be <_dtoa_r+0x79e>
 800a0b4:	4649      	mov	r1, r9
 800a0b6:	4658      	mov	r0, fp
 800a0b8:	f000 fbf4 	bl	800a8a4 <__pow5mult>
 800a0bc:	4681      	mov	r9, r0
 800a0be:	2101      	movs	r1, #1
 800a0c0:	4658      	mov	r0, fp
 800a0c2:	f000 fb31 	bl	800a728 <__i2b>
 800a0c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0c8:	4604      	mov	r4, r0
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	f000 81c9 	beq.w	800a462 <_dtoa_r+0xb42>
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	4601      	mov	r1, r0
 800a0d4:	4658      	mov	r0, fp
 800a0d6:	f000 fbe5 	bl	800a8a4 <__pow5mult>
 800a0da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a0dc:	4604      	mov	r4, r0
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	f300 808f 	bgt.w	800a202 <_dtoa_r+0x8e2>
 800a0e4:	9b02      	ldr	r3, [sp, #8]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	f040 8087 	bne.w	800a1fa <_dtoa_r+0x8da>
 800a0ec:	9b03      	ldr	r3, [sp, #12]
 800a0ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	f040 8083 	bne.w	800a1fe <_dtoa_r+0x8de>
 800a0f8:	9b03      	ldr	r3, [sp, #12]
 800a0fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a0fe:	0d1b      	lsrs	r3, r3, #20
 800a100:	051b      	lsls	r3, r3, #20
 800a102:	b12b      	cbz	r3, 800a110 <_dtoa_r+0x7f0>
 800a104:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a106:	f108 0801 	add.w	r8, r8, #1
 800a10a:	3301      	adds	r3, #1
 800a10c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a10e:	2301      	movs	r3, #1
 800a110:	930a      	str	r3, [sp, #40]	@ 0x28
 800a112:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a114:	2b00      	cmp	r3, #0
 800a116:	f000 81aa 	beq.w	800a46e <_dtoa_r+0xb4e>
 800a11a:	6923      	ldr	r3, [r4, #16]
 800a11c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a120:	6918      	ldr	r0, [r3, #16]
 800a122:	f000 fab5 	bl	800a690 <__hi0bits>
 800a126:	f1c0 0020 	rsb	r0, r0, #32
 800a12a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a12c:	4418      	add	r0, r3
 800a12e:	f010 001f 	ands.w	r0, r0, #31
 800a132:	d071      	beq.n	800a218 <_dtoa_r+0x8f8>
 800a134:	f1c0 0320 	rsb	r3, r0, #32
 800a138:	2b04      	cmp	r3, #4
 800a13a:	dd65      	ble.n	800a208 <_dtoa_r+0x8e8>
 800a13c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a13e:	f1c0 001c 	rsb	r0, r0, #28
 800a142:	4403      	add	r3, r0
 800a144:	4480      	add	r8, r0
 800a146:	4406      	add	r6, r0
 800a148:	9309      	str	r3, [sp, #36]	@ 0x24
 800a14a:	f1b8 0f00 	cmp.w	r8, #0
 800a14e:	dd05      	ble.n	800a15c <_dtoa_r+0x83c>
 800a150:	4649      	mov	r1, r9
 800a152:	4642      	mov	r2, r8
 800a154:	4658      	mov	r0, fp
 800a156:	f000 fbff 	bl	800a958 <__lshift>
 800a15a:	4681      	mov	r9, r0
 800a15c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a15e:	2b00      	cmp	r3, #0
 800a160:	dd05      	ble.n	800a16e <_dtoa_r+0x84e>
 800a162:	4621      	mov	r1, r4
 800a164:	461a      	mov	r2, r3
 800a166:	4658      	mov	r0, fp
 800a168:	f000 fbf6 	bl	800a958 <__lshift>
 800a16c:	4604      	mov	r4, r0
 800a16e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a170:	2b00      	cmp	r3, #0
 800a172:	d053      	beq.n	800a21c <_dtoa_r+0x8fc>
 800a174:	4621      	mov	r1, r4
 800a176:	4648      	mov	r0, r9
 800a178:	f000 fc5a 	bl	800aa30 <__mcmp>
 800a17c:	2800      	cmp	r0, #0
 800a17e:	da4d      	bge.n	800a21c <_dtoa_r+0x8fc>
 800a180:	1e7b      	subs	r3, r7, #1
 800a182:	4649      	mov	r1, r9
 800a184:	9304      	str	r3, [sp, #16]
 800a186:	220a      	movs	r2, #10
 800a188:	2300      	movs	r3, #0
 800a18a:	4658      	mov	r0, fp
 800a18c:	f000 fa3a 	bl	800a604 <__multadd>
 800a190:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a192:	4681      	mov	r9, r0
 800a194:	2b00      	cmp	r3, #0
 800a196:	f000 816c 	beq.w	800a472 <_dtoa_r+0xb52>
 800a19a:	2300      	movs	r3, #0
 800a19c:	4629      	mov	r1, r5
 800a19e:	220a      	movs	r2, #10
 800a1a0:	4658      	mov	r0, fp
 800a1a2:	f000 fa2f 	bl	800a604 <__multadd>
 800a1a6:	9b08      	ldr	r3, [sp, #32]
 800a1a8:	4605      	mov	r5, r0
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	dc61      	bgt.n	800a272 <_dtoa_r+0x952>
 800a1ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a1b0:	2b02      	cmp	r3, #2
 800a1b2:	dc3b      	bgt.n	800a22c <_dtoa_r+0x90c>
 800a1b4:	e05d      	b.n	800a272 <_dtoa_r+0x952>
 800a1b6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a1b8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a1bc:	e746      	b.n	800a04c <_dtoa_r+0x72c>
 800a1be:	9b07      	ldr	r3, [sp, #28]
 800a1c0:	1e5c      	subs	r4, r3, #1
 800a1c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1c4:	42a3      	cmp	r3, r4
 800a1c6:	bfbf      	itttt	lt
 800a1c8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a1ca:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800a1cc:	1ae3      	sublt	r3, r4, r3
 800a1ce:	18d2      	addlt	r2, r2, r3
 800a1d0:	bfa8      	it	ge
 800a1d2:	1b1c      	subge	r4, r3, r4
 800a1d4:	9b07      	ldr	r3, [sp, #28]
 800a1d6:	bfbe      	ittt	lt
 800a1d8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a1da:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800a1dc:	2400      	movlt	r4, #0
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	bfb5      	itete	lt
 800a1e2:	eba8 0603 	sublt.w	r6, r8, r3
 800a1e6:	4646      	movge	r6, r8
 800a1e8:	2300      	movlt	r3, #0
 800a1ea:	9b07      	ldrge	r3, [sp, #28]
 800a1ec:	e730      	b.n	800a050 <_dtoa_r+0x730>
 800a1ee:	4646      	mov	r6, r8
 800a1f0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a1f2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a1f4:	e735      	b.n	800a062 <_dtoa_r+0x742>
 800a1f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a1f8:	e75c      	b.n	800a0b4 <_dtoa_r+0x794>
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	e788      	b.n	800a110 <_dtoa_r+0x7f0>
 800a1fe:	9b02      	ldr	r3, [sp, #8]
 800a200:	e786      	b.n	800a110 <_dtoa_r+0x7f0>
 800a202:	2300      	movs	r3, #0
 800a204:	930a      	str	r3, [sp, #40]	@ 0x28
 800a206:	e788      	b.n	800a11a <_dtoa_r+0x7fa>
 800a208:	d09f      	beq.n	800a14a <_dtoa_r+0x82a>
 800a20a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a20c:	331c      	adds	r3, #28
 800a20e:	441a      	add	r2, r3
 800a210:	4498      	add	r8, r3
 800a212:	441e      	add	r6, r3
 800a214:	9209      	str	r2, [sp, #36]	@ 0x24
 800a216:	e798      	b.n	800a14a <_dtoa_r+0x82a>
 800a218:	4603      	mov	r3, r0
 800a21a:	e7f6      	b.n	800a20a <_dtoa_r+0x8ea>
 800a21c:	9b07      	ldr	r3, [sp, #28]
 800a21e:	9704      	str	r7, [sp, #16]
 800a220:	2b00      	cmp	r3, #0
 800a222:	dc20      	bgt.n	800a266 <_dtoa_r+0x946>
 800a224:	9308      	str	r3, [sp, #32]
 800a226:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a228:	2b02      	cmp	r3, #2
 800a22a:	dd1e      	ble.n	800a26a <_dtoa_r+0x94a>
 800a22c:	9b08      	ldr	r3, [sp, #32]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	f47f aebc 	bne.w	8009fac <_dtoa_r+0x68c>
 800a234:	4621      	mov	r1, r4
 800a236:	2205      	movs	r2, #5
 800a238:	4658      	mov	r0, fp
 800a23a:	f000 f9e3 	bl	800a604 <__multadd>
 800a23e:	4601      	mov	r1, r0
 800a240:	4604      	mov	r4, r0
 800a242:	4648      	mov	r0, r9
 800a244:	f000 fbf4 	bl	800aa30 <__mcmp>
 800a248:	2800      	cmp	r0, #0
 800a24a:	f77f aeaf 	ble.w	8009fac <_dtoa_r+0x68c>
 800a24e:	2331      	movs	r3, #49	@ 0x31
 800a250:	4656      	mov	r6, sl
 800a252:	f806 3b01 	strb.w	r3, [r6], #1
 800a256:	9b04      	ldr	r3, [sp, #16]
 800a258:	3301      	adds	r3, #1
 800a25a:	9304      	str	r3, [sp, #16]
 800a25c:	e6aa      	b.n	8009fb4 <_dtoa_r+0x694>
 800a25e:	9c07      	ldr	r4, [sp, #28]
 800a260:	9704      	str	r7, [sp, #16]
 800a262:	4625      	mov	r5, r4
 800a264:	e7f3      	b.n	800a24e <_dtoa_r+0x92e>
 800a266:	9b07      	ldr	r3, [sp, #28]
 800a268:	9308      	str	r3, [sp, #32]
 800a26a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	f000 8104 	beq.w	800a47a <_dtoa_r+0xb5a>
 800a272:	2e00      	cmp	r6, #0
 800a274:	dd05      	ble.n	800a282 <_dtoa_r+0x962>
 800a276:	4629      	mov	r1, r5
 800a278:	4632      	mov	r2, r6
 800a27a:	4658      	mov	r0, fp
 800a27c:	f000 fb6c 	bl	800a958 <__lshift>
 800a280:	4605      	mov	r5, r0
 800a282:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a284:	2b00      	cmp	r3, #0
 800a286:	d05a      	beq.n	800a33e <_dtoa_r+0xa1e>
 800a288:	4658      	mov	r0, fp
 800a28a:	6869      	ldr	r1, [r5, #4]
 800a28c:	f000 f958 	bl	800a540 <_Balloc>
 800a290:	4606      	mov	r6, r0
 800a292:	b928      	cbnz	r0, 800a2a0 <_dtoa_r+0x980>
 800a294:	4602      	mov	r2, r0
 800a296:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a29a:	4b83      	ldr	r3, [pc, #524]	@ (800a4a8 <_dtoa_r+0xb88>)
 800a29c:	f7ff bb54 	b.w	8009948 <_dtoa_r+0x28>
 800a2a0:	692a      	ldr	r2, [r5, #16]
 800a2a2:	f105 010c 	add.w	r1, r5, #12
 800a2a6:	3202      	adds	r2, #2
 800a2a8:	0092      	lsls	r2, r2, #2
 800a2aa:	300c      	adds	r0, #12
 800a2ac:	f000 fee2 	bl	800b074 <memcpy>
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	4631      	mov	r1, r6
 800a2b4:	4658      	mov	r0, fp
 800a2b6:	f000 fb4f 	bl	800a958 <__lshift>
 800a2ba:	462f      	mov	r7, r5
 800a2bc:	4605      	mov	r5, r0
 800a2be:	f10a 0301 	add.w	r3, sl, #1
 800a2c2:	9307      	str	r3, [sp, #28]
 800a2c4:	9b08      	ldr	r3, [sp, #32]
 800a2c6:	4453      	add	r3, sl
 800a2c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a2ca:	9b02      	ldr	r3, [sp, #8]
 800a2cc:	f003 0301 	and.w	r3, r3, #1
 800a2d0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2d2:	9b07      	ldr	r3, [sp, #28]
 800a2d4:	4621      	mov	r1, r4
 800a2d6:	3b01      	subs	r3, #1
 800a2d8:	4648      	mov	r0, r9
 800a2da:	9302      	str	r3, [sp, #8]
 800a2dc:	f7ff fa95 	bl	800980a <quorem>
 800a2e0:	4639      	mov	r1, r7
 800a2e2:	9008      	str	r0, [sp, #32]
 800a2e4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a2e8:	4648      	mov	r0, r9
 800a2ea:	f000 fba1 	bl	800aa30 <__mcmp>
 800a2ee:	462a      	mov	r2, r5
 800a2f0:	9009      	str	r0, [sp, #36]	@ 0x24
 800a2f2:	4621      	mov	r1, r4
 800a2f4:	4658      	mov	r0, fp
 800a2f6:	f000 fbb7 	bl	800aa68 <__mdiff>
 800a2fa:	68c2      	ldr	r2, [r0, #12]
 800a2fc:	4606      	mov	r6, r0
 800a2fe:	bb02      	cbnz	r2, 800a342 <_dtoa_r+0xa22>
 800a300:	4601      	mov	r1, r0
 800a302:	4648      	mov	r0, r9
 800a304:	f000 fb94 	bl	800aa30 <__mcmp>
 800a308:	4602      	mov	r2, r0
 800a30a:	4631      	mov	r1, r6
 800a30c:	4658      	mov	r0, fp
 800a30e:	920c      	str	r2, [sp, #48]	@ 0x30
 800a310:	f000 f956 	bl	800a5c0 <_Bfree>
 800a314:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a316:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a318:	9e07      	ldr	r6, [sp, #28]
 800a31a:	ea43 0102 	orr.w	r1, r3, r2
 800a31e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a320:	4319      	orrs	r1, r3
 800a322:	d110      	bne.n	800a346 <_dtoa_r+0xa26>
 800a324:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a328:	d029      	beq.n	800a37e <_dtoa_r+0xa5e>
 800a32a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	dd02      	ble.n	800a336 <_dtoa_r+0xa16>
 800a330:	9b08      	ldr	r3, [sp, #32]
 800a332:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a336:	9b02      	ldr	r3, [sp, #8]
 800a338:	f883 8000 	strb.w	r8, [r3]
 800a33c:	e63b      	b.n	8009fb6 <_dtoa_r+0x696>
 800a33e:	4628      	mov	r0, r5
 800a340:	e7bb      	b.n	800a2ba <_dtoa_r+0x99a>
 800a342:	2201      	movs	r2, #1
 800a344:	e7e1      	b.n	800a30a <_dtoa_r+0x9ea>
 800a346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a348:	2b00      	cmp	r3, #0
 800a34a:	db04      	blt.n	800a356 <_dtoa_r+0xa36>
 800a34c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800a34e:	430b      	orrs	r3, r1
 800a350:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a352:	430b      	orrs	r3, r1
 800a354:	d120      	bne.n	800a398 <_dtoa_r+0xa78>
 800a356:	2a00      	cmp	r2, #0
 800a358:	dded      	ble.n	800a336 <_dtoa_r+0xa16>
 800a35a:	4649      	mov	r1, r9
 800a35c:	2201      	movs	r2, #1
 800a35e:	4658      	mov	r0, fp
 800a360:	f000 fafa 	bl	800a958 <__lshift>
 800a364:	4621      	mov	r1, r4
 800a366:	4681      	mov	r9, r0
 800a368:	f000 fb62 	bl	800aa30 <__mcmp>
 800a36c:	2800      	cmp	r0, #0
 800a36e:	dc03      	bgt.n	800a378 <_dtoa_r+0xa58>
 800a370:	d1e1      	bne.n	800a336 <_dtoa_r+0xa16>
 800a372:	f018 0f01 	tst.w	r8, #1
 800a376:	d0de      	beq.n	800a336 <_dtoa_r+0xa16>
 800a378:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a37c:	d1d8      	bne.n	800a330 <_dtoa_r+0xa10>
 800a37e:	2339      	movs	r3, #57	@ 0x39
 800a380:	9a02      	ldr	r2, [sp, #8]
 800a382:	7013      	strb	r3, [r2, #0]
 800a384:	4633      	mov	r3, r6
 800a386:	461e      	mov	r6, r3
 800a388:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a38c:	3b01      	subs	r3, #1
 800a38e:	2a39      	cmp	r2, #57	@ 0x39
 800a390:	d052      	beq.n	800a438 <_dtoa_r+0xb18>
 800a392:	3201      	adds	r2, #1
 800a394:	701a      	strb	r2, [r3, #0]
 800a396:	e60e      	b.n	8009fb6 <_dtoa_r+0x696>
 800a398:	2a00      	cmp	r2, #0
 800a39a:	dd07      	ble.n	800a3ac <_dtoa_r+0xa8c>
 800a39c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a3a0:	d0ed      	beq.n	800a37e <_dtoa_r+0xa5e>
 800a3a2:	9a02      	ldr	r2, [sp, #8]
 800a3a4:	f108 0301 	add.w	r3, r8, #1
 800a3a8:	7013      	strb	r3, [r2, #0]
 800a3aa:	e604      	b.n	8009fb6 <_dtoa_r+0x696>
 800a3ac:	9b07      	ldr	r3, [sp, #28]
 800a3ae:	9a07      	ldr	r2, [sp, #28]
 800a3b0:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a3b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d028      	beq.n	800a40c <_dtoa_r+0xaec>
 800a3ba:	4649      	mov	r1, r9
 800a3bc:	2300      	movs	r3, #0
 800a3be:	220a      	movs	r2, #10
 800a3c0:	4658      	mov	r0, fp
 800a3c2:	f000 f91f 	bl	800a604 <__multadd>
 800a3c6:	42af      	cmp	r7, r5
 800a3c8:	4681      	mov	r9, r0
 800a3ca:	f04f 0300 	mov.w	r3, #0
 800a3ce:	f04f 020a 	mov.w	r2, #10
 800a3d2:	4639      	mov	r1, r7
 800a3d4:	4658      	mov	r0, fp
 800a3d6:	d107      	bne.n	800a3e8 <_dtoa_r+0xac8>
 800a3d8:	f000 f914 	bl	800a604 <__multadd>
 800a3dc:	4607      	mov	r7, r0
 800a3de:	4605      	mov	r5, r0
 800a3e0:	9b07      	ldr	r3, [sp, #28]
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	9307      	str	r3, [sp, #28]
 800a3e6:	e774      	b.n	800a2d2 <_dtoa_r+0x9b2>
 800a3e8:	f000 f90c 	bl	800a604 <__multadd>
 800a3ec:	4629      	mov	r1, r5
 800a3ee:	4607      	mov	r7, r0
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	220a      	movs	r2, #10
 800a3f4:	4658      	mov	r0, fp
 800a3f6:	f000 f905 	bl	800a604 <__multadd>
 800a3fa:	4605      	mov	r5, r0
 800a3fc:	e7f0      	b.n	800a3e0 <_dtoa_r+0xac0>
 800a3fe:	9b08      	ldr	r3, [sp, #32]
 800a400:	2700      	movs	r7, #0
 800a402:	2b00      	cmp	r3, #0
 800a404:	bfcc      	ite	gt
 800a406:	461e      	movgt	r6, r3
 800a408:	2601      	movle	r6, #1
 800a40a:	4456      	add	r6, sl
 800a40c:	4649      	mov	r1, r9
 800a40e:	2201      	movs	r2, #1
 800a410:	4658      	mov	r0, fp
 800a412:	f000 faa1 	bl	800a958 <__lshift>
 800a416:	4621      	mov	r1, r4
 800a418:	4681      	mov	r9, r0
 800a41a:	f000 fb09 	bl	800aa30 <__mcmp>
 800a41e:	2800      	cmp	r0, #0
 800a420:	dcb0      	bgt.n	800a384 <_dtoa_r+0xa64>
 800a422:	d102      	bne.n	800a42a <_dtoa_r+0xb0a>
 800a424:	f018 0f01 	tst.w	r8, #1
 800a428:	d1ac      	bne.n	800a384 <_dtoa_r+0xa64>
 800a42a:	4633      	mov	r3, r6
 800a42c:	461e      	mov	r6, r3
 800a42e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a432:	2a30      	cmp	r2, #48	@ 0x30
 800a434:	d0fa      	beq.n	800a42c <_dtoa_r+0xb0c>
 800a436:	e5be      	b.n	8009fb6 <_dtoa_r+0x696>
 800a438:	459a      	cmp	sl, r3
 800a43a:	d1a4      	bne.n	800a386 <_dtoa_r+0xa66>
 800a43c:	9b04      	ldr	r3, [sp, #16]
 800a43e:	3301      	adds	r3, #1
 800a440:	9304      	str	r3, [sp, #16]
 800a442:	2331      	movs	r3, #49	@ 0x31
 800a444:	f88a 3000 	strb.w	r3, [sl]
 800a448:	e5b5      	b.n	8009fb6 <_dtoa_r+0x696>
 800a44a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a44c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a4ac <_dtoa_r+0xb8c>
 800a450:	b11b      	cbz	r3, 800a45a <_dtoa_r+0xb3a>
 800a452:	f10a 0308 	add.w	r3, sl, #8
 800a456:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a458:	6013      	str	r3, [r2, #0]
 800a45a:	4650      	mov	r0, sl
 800a45c:	b017      	add	sp, #92	@ 0x5c
 800a45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a462:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a464:	2b01      	cmp	r3, #1
 800a466:	f77f ae3d 	ble.w	800a0e4 <_dtoa_r+0x7c4>
 800a46a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a46c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a46e:	2001      	movs	r0, #1
 800a470:	e65b      	b.n	800a12a <_dtoa_r+0x80a>
 800a472:	9b08      	ldr	r3, [sp, #32]
 800a474:	2b00      	cmp	r3, #0
 800a476:	f77f aed6 	ble.w	800a226 <_dtoa_r+0x906>
 800a47a:	4656      	mov	r6, sl
 800a47c:	4621      	mov	r1, r4
 800a47e:	4648      	mov	r0, r9
 800a480:	f7ff f9c3 	bl	800980a <quorem>
 800a484:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a488:	9b08      	ldr	r3, [sp, #32]
 800a48a:	f806 8b01 	strb.w	r8, [r6], #1
 800a48e:	eba6 020a 	sub.w	r2, r6, sl
 800a492:	4293      	cmp	r3, r2
 800a494:	ddb3      	ble.n	800a3fe <_dtoa_r+0xade>
 800a496:	4649      	mov	r1, r9
 800a498:	2300      	movs	r3, #0
 800a49a:	220a      	movs	r2, #10
 800a49c:	4658      	mov	r0, fp
 800a49e:	f000 f8b1 	bl	800a604 <__multadd>
 800a4a2:	4681      	mov	r9, r0
 800a4a4:	e7ea      	b.n	800a47c <_dtoa_r+0xb5c>
 800a4a6:	bf00      	nop
 800a4a8:	0800bf9e 	.word	0x0800bf9e
 800a4ac:	0800bf22 	.word	0x0800bf22

0800a4b0 <_free_r>:
 800a4b0:	b538      	push	{r3, r4, r5, lr}
 800a4b2:	4605      	mov	r5, r0
 800a4b4:	2900      	cmp	r1, #0
 800a4b6:	d040      	beq.n	800a53a <_free_r+0x8a>
 800a4b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4bc:	1f0c      	subs	r4, r1, #4
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	bfb8      	it	lt
 800a4c2:	18e4      	addlt	r4, r4, r3
 800a4c4:	f7fe fb2a 	bl	8008b1c <__malloc_lock>
 800a4c8:	4a1c      	ldr	r2, [pc, #112]	@ (800a53c <_free_r+0x8c>)
 800a4ca:	6813      	ldr	r3, [r2, #0]
 800a4cc:	b933      	cbnz	r3, 800a4dc <_free_r+0x2c>
 800a4ce:	6063      	str	r3, [r4, #4]
 800a4d0:	6014      	str	r4, [r2, #0]
 800a4d2:	4628      	mov	r0, r5
 800a4d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4d8:	f7fe bb26 	b.w	8008b28 <__malloc_unlock>
 800a4dc:	42a3      	cmp	r3, r4
 800a4de:	d908      	bls.n	800a4f2 <_free_r+0x42>
 800a4e0:	6820      	ldr	r0, [r4, #0]
 800a4e2:	1821      	adds	r1, r4, r0
 800a4e4:	428b      	cmp	r3, r1
 800a4e6:	bf01      	itttt	eq
 800a4e8:	6819      	ldreq	r1, [r3, #0]
 800a4ea:	685b      	ldreq	r3, [r3, #4]
 800a4ec:	1809      	addeq	r1, r1, r0
 800a4ee:	6021      	streq	r1, [r4, #0]
 800a4f0:	e7ed      	b.n	800a4ce <_free_r+0x1e>
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	b10b      	cbz	r3, 800a4fc <_free_r+0x4c>
 800a4f8:	42a3      	cmp	r3, r4
 800a4fa:	d9fa      	bls.n	800a4f2 <_free_r+0x42>
 800a4fc:	6811      	ldr	r1, [r2, #0]
 800a4fe:	1850      	adds	r0, r2, r1
 800a500:	42a0      	cmp	r0, r4
 800a502:	d10b      	bne.n	800a51c <_free_r+0x6c>
 800a504:	6820      	ldr	r0, [r4, #0]
 800a506:	4401      	add	r1, r0
 800a508:	1850      	adds	r0, r2, r1
 800a50a:	4283      	cmp	r3, r0
 800a50c:	6011      	str	r1, [r2, #0]
 800a50e:	d1e0      	bne.n	800a4d2 <_free_r+0x22>
 800a510:	6818      	ldr	r0, [r3, #0]
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	4408      	add	r0, r1
 800a516:	6010      	str	r0, [r2, #0]
 800a518:	6053      	str	r3, [r2, #4]
 800a51a:	e7da      	b.n	800a4d2 <_free_r+0x22>
 800a51c:	d902      	bls.n	800a524 <_free_r+0x74>
 800a51e:	230c      	movs	r3, #12
 800a520:	602b      	str	r3, [r5, #0]
 800a522:	e7d6      	b.n	800a4d2 <_free_r+0x22>
 800a524:	6820      	ldr	r0, [r4, #0]
 800a526:	1821      	adds	r1, r4, r0
 800a528:	428b      	cmp	r3, r1
 800a52a:	bf01      	itttt	eq
 800a52c:	6819      	ldreq	r1, [r3, #0]
 800a52e:	685b      	ldreq	r3, [r3, #4]
 800a530:	1809      	addeq	r1, r1, r0
 800a532:	6021      	streq	r1, [r4, #0]
 800a534:	6063      	str	r3, [r4, #4]
 800a536:	6054      	str	r4, [r2, #4]
 800a538:	e7cb      	b.n	800a4d2 <_free_r+0x22>
 800a53a:	bd38      	pop	{r3, r4, r5, pc}
 800a53c:	20000408 	.word	0x20000408

0800a540 <_Balloc>:
 800a540:	b570      	push	{r4, r5, r6, lr}
 800a542:	69c6      	ldr	r6, [r0, #28]
 800a544:	4604      	mov	r4, r0
 800a546:	460d      	mov	r5, r1
 800a548:	b976      	cbnz	r6, 800a568 <_Balloc+0x28>
 800a54a:	2010      	movs	r0, #16
 800a54c:	f7fe fa34 	bl	80089b8 <malloc>
 800a550:	4602      	mov	r2, r0
 800a552:	61e0      	str	r0, [r4, #28]
 800a554:	b920      	cbnz	r0, 800a560 <_Balloc+0x20>
 800a556:	216b      	movs	r1, #107	@ 0x6b
 800a558:	4b17      	ldr	r3, [pc, #92]	@ (800a5b8 <_Balloc+0x78>)
 800a55a:	4818      	ldr	r0, [pc, #96]	@ (800a5bc <_Balloc+0x7c>)
 800a55c:	f000 fd98 	bl	800b090 <__assert_func>
 800a560:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a564:	6006      	str	r6, [r0, #0]
 800a566:	60c6      	str	r6, [r0, #12]
 800a568:	69e6      	ldr	r6, [r4, #28]
 800a56a:	68f3      	ldr	r3, [r6, #12]
 800a56c:	b183      	cbz	r3, 800a590 <_Balloc+0x50>
 800a56e:	69e3      	ldr	r3, [r4, #28]
 800a570:	68db      	ldr	r3, [r3, #12]
 800a572:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a576:	b9b8      	cbnz	r0, 800a5a8 <_Balloc+0x68>
 800a578:	2101      	movs	r1, #1
 800a57a:	fa01 f605 	lsl.w	r6, r1, r5
 800a57e:	1d72      	adds	r2, r6, #5
 800a580:	4620      	mov	r0, r4
 800a582:	0092      	lsls	r2, r2, #2
 800a584:	f000 fda2 	bl	800b0cc <_calloc_r>
 800a588:	b160      	cbz	r0, 800a5a4 <_Balloc+0x64>
 800a58a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a58e:	e00e      	b.n	800a5ae <_Balloc+0x6e>
 800a590:	2221      	movs	r2, #33	@ 0x21
 800a592:	2104      	movs	r1, #4
 800a594:	4620      	mov	r0, r4
 800a596:	f000 fd99 	bl	800b0cc <_calloc_r>
 800a59a:	69e3      	ldr	r3, [r4, #28]
 800a59c:	60f0      	str	r0, [r6, #12]
 800a59e:	68db      	ldr	r3, [r3, #12]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d1e4      	bne.n	800a56e <_Balloc+0x2e>
 800a5a4:	2000      	movs	r0, #0
 800a5a6:	bd70      	pop	{r4, r5, r6, pc}
 800a5a8:	6802      	ldr	r2, [r0, #0]
 800a5aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a5b4:	e7f7      	b.n	800a5a6 <_Balloc+0x66>
 800a5b6:	bf00      	nop
 800a5b8:	0800bf2f 	.word	0x0800bf2f
 800a5bc:	0800bfaf 	.word	0x0800bfaf

0800a5c0 <_Bfree>:
 800a5c0:	b570      	push	{r4, r5, r6, lr}
 800a5c2:	69c6      	ldr	r6, [r0, #28]
 800a5c4:	4605      	mov	r5, r0
 800a5c6:	460c      	mov	r4, r1
 800a5c8:	b976      	cbnz	r6, 800a5e8 <_Bfree+0x28>
 800a5ca:	2010      	movs	r0, #16
 800a5cc:	f7fe f9f4 	bl	80089b8 <malloc>
 800a5d0:	4602      	mov	r2, r0
 800a5d2:	61e8      	str	r0, [r5, #28]
 800a5d4:	b920      	cbnz	r0, 800a5e0 <_Bfree+0x20>
 800a5d6:	218f      	movs	r1, #143	@ 0x8f
 800a5d8:	4b08      	ldr	r3, [pc, #32]	@ (800a5fc <_Bfree+0x3c>)
 800a5da:	4809      	ldr	r0, [pc, #36]	@ (800a600 <_Bfree+0x40>)
 800a5dc:	f000 fd58 	bl	800b090 <__assert_func>
 800a5e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a5e4:	6006      	str	r6, [r0, #0]
 800a5e6:	60c6      	str	r6, [r0, #12]
 800a5e8:	b13c      	cbz	r4, 800a5fa <_Bfree+0x3a>
 800a5ea:	69eb      	ldr	r3, [r5, #28]
 800a5ec:	6862      	ldr	r2, [r4, #4]
 800a5ee:	68db      	ldr	r3, [r3, #12]
 800a5f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a5f4:	6021      	str	r1, [r4, #0]
 800a5f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a5fa:	bd70      	pop	{r4, r5, r6, pc}
 800a5fc:	0800bf2f 	.word	0x0800bf2f
 800a600:	0800bfaf 	.word	0x0800bfaf

0800a604 <__multadd>:
 800a604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a608:	4607      	mov	r7, r0
 800a60a:	460c      	mov	r4, r1
 800a60c:	461e      	mov	r6, r3
 800a60e:	2000      	movs	r0, #0
 800a610:	690d      	ldr	r5, [r1, #16]
 800a612:	f101 0c14 	add.w	ip, r1, #20
 800a616:	f8dc 3000 	ldr.w	r3, [ip]
 800a61a:	3001      	adds	r0, #1
 800a61c:	b299      	uxth	r1, r3
 800a61e:	fb02 6101 	mla	r1, r2, r1, r6
 800a622:	0c1e      	lsrs	r6, r3, #16
 800a624:	0c0b      	lsrs	r3, r1, #16
 800a626:	fb02 3306 	mla	r3, r2, r6, r3
 800a62a:	b289      	uxth	r1, r1
 800a62c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a630:	4285      	cmp	r5, r0
 800a632:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a636:	f84c 1b04 	str.w	r1, [ip], #4
 800a63a:	dcec      	bgt.n	800a616 <__multadd+0x12>
 800a63c:	b30e      	cbz	r6, 800a682 <__multadd+0x7e>
 800a63e:	68a3      	ldr	r3, [r4, #8]
 800a640:	42ab      	cmp	r3, r5
 800a642:	dc19      	bgt.n	800a678 <__multadd+0x74>
 800a644:	6861      	ldr	r1, [r4, #4]
 800a646:	4638      	mov	r0, r7
 800a648:	3101      	adds	r1, #1
 800a64a:	f7ff ff79 	bl	800a540 <_Balloc>
 800a64e:	4680      	mov	r8, r0
 800a650:	b928      	cbnz	r0, 800a65e <__multadd+0x5a>
 800a652:	4602      	mov	r2, r0
 800a654:	21ba      	movs	r1, #186	@ 0xba
 800a656:	4b0c      	ldr	r3, [pc, #48]	@ (800a688 <__multadd+0x84>)
 800a658:	480c      	ldr	r0, [pc, #48]	@ (800a68c <__multadd+0x88>)
 800a65a:	f000 fd19 	bl	800b090 <__assert_func>
 800a65e:	6922      	ldr	r2, [r4, #16]
 800a660:	f104 010c 	add.w	r1, r4, #12
 800a664:	3202      	adds	r2, #2
 800a666:	0092      	lsls	r2, r2, #2
 800a668:	300c      	adds	r0, #12
 800a66a:	f000 fd03 	bl	800b074 <memcpy>
 800a66e:	4621      	mov	r1, r4
 800a670:	4638      	mov	r0, r7
 800a672:	f7ff ffa5 	bl	800a5c0 <_Bfree>
 800a676:	4644      	mov	r4, r8
 800a678:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a67c:	3501      	adds	r5, #1
 800a67e:	615e      	str	r6, [r3, #20]
 800a680:	6125      	str	r5, [r4, #16]
 800a682:	4620      	mov	r0, r4
 800a684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a688:	0800bf9e 	.word	0x0800bf9e
 800a68c:	0800bfaf 	.word	0x0800bfaf

0800a690 <__hi0bits>:
 800a690:	4603      	mov	r3, r0
 800a692:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a696:	bf3a      	itte	cc
 800a698:	0403      	lslcc	r3, r0, #16
 800a69a:	2010      	movcc	r0, #16
 800a69c:	2000      	movcs	r0, #0
 800a69e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a6a2:	bf3c      	itt	cc
 800a6a4:	021b      	lslcc	r3, r3, #8
 800a6a6:	3008      	addcc	r0, #8
 800a6a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6ac:	bf3c      	itt	cc
 800a6ae:	011b      	lslcc	r3, r3, #4
 800a6b0:	3004      	addcc	r0, #4
 800a6b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6b6:	bf3c      	itt	cc
 800a6b8:	009b      	lslcc	r3, r3, #2
 800a6ba:	3002      	addcc	r0, #2
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	db05      	blt.n	800a6cc <__hi0bits+0x3c>
 800a6c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a6c4:	f100 0001 	add.w	r0, r0, #1
 800a6c8:	bf08      	it	eq
 800a6ca:	2020      	moveq	r0, #32
 800a6cc:	4770      	bx	lr

0800a6ce <__lo0bits>:
 800a6ce:	6803      	ldr	r3, [r0, #0]
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	f013 0007 	ands.w	r0, r3, #7
 800a6d6:	d00b      	beq.n	800a6f0 <__lo0bits+0x22>
 800a6d8:	07d9      	lsls	r1, r3, #31
 800a6da:	d421      	bmi.n	800a720 <__lo0bits+0x52>
 800a6dc:	0798      	lsls	r0, r3, #30
 800a6de:	bf49      	itett	mi
 800a6e0:	085b      	lsrmi	r3, r3, #1
 800a6e2:	089b      	lsrpl	r3, r3, #2
 800a6e4:	2001      	movmi	r0, #1
 800a6e6:	6013      	strmi	r3, [r2, #0]
 800a6e8:	bf5c      	itt	pl
 800a6ea:	2002      	movpl	r0, #2
 800a6ec:	6013      	strpl	r3, [r2, #0]
 800a6ee:	4770      	bx	lr
 800a6f0:	b299      	uxth	r1, r3
 800a6f2:	b909      	cbnz	r1, 800a6f8 <__lo0bits+0x2a>
 800a6f4:	2010      	movs	r0, #16
 800a6f6:	0c1b      	lsrs	r3, r3, #16
 800a6f8:	b2d9      	uxtb	r1, r3
 800a6fa:	b909      	cbnz	r1, 800a700 <__lo0bits+0x32>
 800a6fc:	3008      	adds	r0, #8
 800a6fe:	0a1b      	lsrs	r3, r3, #8
 800a700:	0719      	lsls	r1, r3, #28
 800a702:	bf04      	itt	eq
 800a704:	091b      	lsreq	r3, r3, #4
 800a706:	3004      	addeq	r0, #4
 800a708:	0799      	lsls	r1, r3, #30
 800a70a:	bf04      	itt	eq
 800a70c:	089b      	lsreq	r3, r3, #2
 800a70e:	3002      	addeq	r0, #2
 800a710:	07d9      	lsls	r1, r3, #31
 800a712:	d403      	bmi.n	800a71c <__lo0bits+0x4e>
 800a714:	085b      	lsrs	r3, r3, #1
 800a716:	f100 0001 	add.w	r0, r0, #1
 800a71a:	d003      	beq.n	800a724 <__lo0bits+0x56>
 800a71c:	6013      	str	r3, [r2, #0]
 800a71e:	4770      	bx	lr
 800a720:	2000      	movs	r0, #0
 800a722:	4770      	bx	lr
 800a724:	2020      	movs	r0, #32
 800a726:	4770      	bx	lr

0800a728 <__i2b>:
 800a728:	b510      	push	{r4, lr}
 800a72a:	460c      	mov	r4, r1
 800a72c:	2101      	movs	r1, #1
 800a72e:	f7ff ff07 	bl	800a540 <_Balloc>
 800a732:	4602      	mov	r2, r0
 800a734:	b928      	cbnz	r0, 800a742 <__i2b+0x1a>
 800a736:	f240 1145 	movw	r1, #325	@ 0x145
 800a73a:	4b04      	ldr	r3, [pc, #16]	@ (800a74c <__i2b+0x24>)
 800a73c:	4804      	ldr	r0, [pc, #16]	@ (800a750 <__i2b+0x28>)
 800a73e:	f000 fca7 	bl	800b090 <__assert_func>
 800a742:	2301      	movs	r3, #1
 800a744:	6144      	str	r4, [r0, #20]
 800a746:	6103      	str	r3, [r0, #16]
 800a748:	bd10      	pop	{r4, pc}
 800a74a:	bf00      	nop
 800a74c:	0800bf9e 	.word	0x0800bf9e
 800a750:	0800bfaf 	.word	0x0800bfaf

0800a754 <__multiply>:
 800a754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a758:	4614      	mov	r4, r2
 800a75a:	690a      	ldr	r2, [r1, #16]
 800a75c:	6923      	ldr	r3, [r4, #16]
 800a75e:	460f      	mov	r7, r1
 800a760:	429a      	cmp	r2, r3
 800a762:	bfa2      	ittt	ge
 800a764:	4623      	movge	r3, r4
 800a766:	460c      	movge	r4, r1
 800a768:	461f      	movge	r7, r3
 800a76a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a76e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a772:	68a3      	ldr	r3, [r4, #8]
 800a774:	6861      	ldr	r1, [r4, #4]
 800a776:	eb0a 0609 	add.w	r6, sl, r9
 800a77a:	42b3      	cmp	r3, r6
 800a77c:	b085      	sub	sp, #20
 800a77e:	bfb8      	it	lt
 800a780:	3101      	addlt	r1, #1
 800a782:	f7ff fedd 	bl	800a540 <_Balloc>
 800a786:	b930      	cbnz	r0, 800a796 <__multiply+0x42>
 800a788:	4602      	mov	r2, r0
 800a78a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a78e:	4b43      	ldr	r3, [pc, #268]	@ (800a89c <__multiply+0x148>)
 800a790:	4843      	ldr	r0, [pc, #268]	@ (800a8a0 <__multiply+0x14c>)
 800a792:	f000 fc7d 	bl	800b090 <__assert_func>
 800a796:	f100 0514 	add.w	r5, r0, #20
 800a79a:	462b      	mov	r3, r5
 800a79c:	2200      	movs	r2, #0
 800a79e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a7a2:	4543      	cmp	r3, r8
 800a7a4:	d321      	bcc.n	800a7ea <__multiply+0x96>
 800a7a6:	f107 0114 	add.w	r1, r7, #20
 800a7aa:	f104 0214 	add.w	r2, r4, #20
 800a7ae:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a7b2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a7b6:	9302      	str	r3, [sp, #8]
 800a7b8:	1b13      	subs	r3, r2, r4
 800a7ba:	3b15      	subs	r3, #21
 800a7bc:	f023 0303 	bic.w	r3, r3, #3
 800a7c0:	3304      	adds	r3, #4
 800a7c2:	f104 0715 	add.w	r7, r4, #21
 800a7c6:	42ba      	cmp	r2, r7
 800a7c8:	bf38      	it	cc
 800a7ca:	2304      	movcc	r3, #4
 800a7cc:	9301      	str	r3, [sp, #4]
 800a7ce:	9b02      	ldr	r3, [sp, #8]
 800a7d0:	9103      	str	r1, [sp, #12]
 800a7d2:	428b      	cmp	r3, r1
 800a7d4:	d80c      	bhi.n	800a7f0 <__multiply+0x9c>
 800a7d6:	2e00      	cmp	r6, #0
 800a7d8:	dd03      	ble.n	800a7e2 <__multiply+0x8e>
 800a7da:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d05a      	beq.n	800a898 <__multiply+0x144>
 800a7e2:	6106      	str	r6, [r0, #16]
 800a7e4:	b005      	add	sp, #20
 800a7e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ea:	f843 2b04 	str.w	r2, [r3], #4
 800a7ee:	e7d8      	b.n	800a7a2 <__multiply+0x4e>
 800a7f0:	f8b1 a000 	ldrh.w	sl, [r1]
 800a7f4:	f1ba 0f00 	cmp.w	sl, #0
 800a7f8:	d023      	beq.n	800a842 <__multiply+0xee>
 800a7fa:	46a9      	mov	r9, r5
 800a7fc:	f04f 0c00 	mov.w	ip, #0
 800a800:	f104 0e14 	add.w	lr, r4, #20
 800a804:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a808:	f8d9 3000 	ldr.w	r3, [r9]
 800a80c:	fa1f fb87 	uxth.w	fp, r7
 800a810:	b29b      	uxth	r3, r3
 800a812:	fb0a 330b 	mla	r3, sl, fp, r3
 800a816:	4463      	add	r3, ip
 800a818:	f8d9 c000 	ldr.w	ip, [r9]
 800a81c:	0c3f      	lsrs	r7, r7, #16
 800a81e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a822:	fb0a c707 	mla	r7, sl, r7, ip
 800a826:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a82a:	b29b      	uxth	r3, r3
 800a82c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a830:	4572      	cmp	r2, lr
 800a832:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a836:	f849 3b04 	str.w	r3, [r9], #4
 800a83a:	d8e3      	bhi.n	800a804 <__multiply+0xb0>
 800a83c:	9b01      	ldr	r3, [sp, #4]
 800a83e:	f845 c003 	str.w	ip, [r5, r3]
 800a842:	9b03      	ldr	r3, [sp, #12]
 800a844:	3104      	adds	r1, #4
 800a846:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a84a:	f1b9 0f00 	cmp.w	r9, #0
 800a84e:	d021      	beq.n	800a894 <__multiply+0x140>
 800a850:	46ae      	mov	lr, r5
 800a852:	f04f 0a00 	mov.w	sl, #0
 800a856:	682b      	ldr	r3, [r5, #0]
 800a858:	f104 0c14 	add.w	ip, r4, #20
 800a85c:	f8bc b000 	ldrh.w	fp, [ip]
 800a860:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a864:	b29b      	uxth	r3, r3
 800a866:	fb09 770b 	mla	r7, r9, fp, r7
 800a86a:	4457      	add	r7, sl
 800a86c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a870:	f84e 3b04 	str.w	r3, [lr], #4
 800a874:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a878:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a87c:	f8be 3000 	ldrh.w	r3, [lr]
 800a880:	4562      	cmp	r2, ip
 800a882:	fb09 330a 	mla	r3, r9, sl, r3
 800a886:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a88a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a88e:	d8e5      	bhi.n	800a85c <__multiply+0x108>
 800a890:	9f01      	ldr	r7, [sp, #4]
 800a892:	51eb      	str	r3, [r5, r7]
 800a894:	3504      	adds	r5, #4
 800a896:	e79a      	b.n	800a7ce <__multiply+0x7a>
 800a898:	3e01      	subs	r6, #1
 800a89a:	e79c      	b.n	800a7d6 <__multiply+0x82>
 800a89c:	0800bf9e 	.word	0x0800bf9e
 800a8a0:	0800bfaf 	.word	0x0800bfaf

0800a8a4 <__pow5mult>:
 800a8a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8a8:	4615      	mov	r5, r2
 800a8aa:	f012 0203 	ands.w	r2, r2, #3
 800a8ae:	4607      	mov	r7, r0
 800a8b0:	460e      	mov	r6, r1
 800a8b2:	d007      	beq.n	800a8c4 <__pow5mult+0x20>
 800a8b4:	4c25      	ldr	r4, [pc, #148]	@ (800a94c <__pow5mult+0xa8>)
 800a8b6:	3a01      	subs	r2, #1
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a8be:	f7ff fea1 	bl	800a604 <__multadd>
 800a8c2:	4606      	mov	r6, r0
 800a8c4:	10ad      	asrs	r5, r5, #2
 800a8c6:	d03d      	beq.n	800a944 <__pow5mult+0xa0>
 800a8c8:	69fc      	ldr	r4, [r7, #28]
 800a8ca:	b97c      	cbnz	r4, 800a8ec <__pow5mult+0x48>
 800a8cc:	2010      	movs	r0, #16
 800a8ce:	f7fe f873 	bl	80089b8 <malloc>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	61f8      	str	r0, [r7, #28]
 800a8d6:	b928      	cbnz	r0, 800a8e4 <__pow5mult+0x40>
 800a8d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a8dc:	4b1c      	ldr	r3, [pc, #112]	@ (800a950 <__pow5mult+0xac>)
 800a8de:	481d      	ldr	r0, [pc, #116]	@ (800a954 <__pow5mult+0xb0>)
 800a8e0:	f000 fbd6 	bl	800b090 <__assert_func>
 800a8e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a8e8:	6004      	str	r4, [r0, #0]
 800a8ea:	60c4      	str	r4, [r0, #12]
 800a8ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a8f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a8f4:	b94c      	cbnz	r4, 800a90a <__pow5mult+0x66>
 800a8f6:	f240 2171 	movw	r1, #625	@ 0x271
 800a8fa:	4638      	mov	r0, r7
 800a8fc:	f7ff ff14 	bl	800a728 <__i2b>
 800a900:	2300      	movs	r3, #0
 800a902:	4604      	mov	r4, r0
 800a904:	f8c8 0008 	str.w	r0, [r8, #8]
 800a908:	6003      	str	r3, [r0, #0]
 800a90a:	f04f 0900 	mov.w	r9, #0
 800a90e:	07eb      	lsls	r3, r5, #31
 800a910:	d50a      	bpl.n	800a928 <__pow5mult+0x84>
 800a912:	4631      	mov	r1, r6
 800a914:	4622      	mov	r2, r4
 800a916:	4638      	mov	r0, r7
 800a918:	f7ff ff1c 	bl	800a754 <__multiply>
 800a91c:	4680      	mov	r8, r0
 800a91e:	4631      	mov	r1, r6
 800a920:	4638      	mov	r0, r7
 800a922:	f7ff fe4d 	bl	800a5c0 <_Bfree>
 800a926:	4646      	mov	r6, r8
 800a928:	106d      	asrs	r5, r5, #1
 800a92a:	d00b      	beq.n	800a944 <__pow5mult+0xa0>
 800a92c:	6820      	ldr	r0, [r4, #0]
 800a92e:	b938      	cbnz	r0, 800a940 <__pow5mult+0x9c>
 800a930:	4622      	mov	r2, r4
 800a932:	4621      	mov	r1, r4
 800a934:	4638      	mov	r0, r7
 800a936:	f7ff ff0d 	bl	800a754 <__multiply>
 800a93a:	6020      	str	r0, [r4, #0]
 800a93c:	f8c0 9000 	str.w	r9, [r0]
 800a940:	4604      	mov	r4, r0
 800a942:	e7e4      	b.n	800a90e <__pow5mult+0x6a>
 800a944:	4630      	mov	r0, r6
 800a946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a94a:	bf00      	nop
 800a94c:	0800c008 	.word	0x0800c008
 800a950:	0800bf2f 	.word	0x0800bf2f
 800a954:	0800bfaf 	.word	0x0800bfaf

0800a958 <__lshift>:
 800a958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a95c:	460c      	mov	r4, r1
 800a95e:	4607      	mov	r7, r0
 800a960:	4691      	mov	r9, r2
 800a962:	6923      	ldr	r3, [r4, #16]
 800a964:	6849      	ldr	r1, [r1, #4]
 800a966:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a96a:	68a3      	ldr	r3, [r4, #8]
 800a96c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a970:	f108 0601 	add.w	r6, r8, #1
 800a974:	42b3      	cmp	r3, r6
 800a976:	db0b      	blt.n	800a990 <__lshift+0x38>
 800a978:	4638      	mov	r0, r7
 800a97a:	f7ff fde1 	bl	800a540 <_Balloc>
 800a97e:	4605      	mov	r5, r0
 800a980:	b948      	cbnz	r0, 800a996 <__lshift+0x3e>
 800a982:	4602      	mov	r2, r0
 800a984:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a988:	4b27      	ldr	r3, [pc, #156]	@ (800aa28 <__lshift+0xd0>)
 800a98a:	4828      	ldr	r0, [pc, #160]	@ (800aa2c <__lshift+0xd4>)
 800a98c:	f000 fb80 	bl	800b090 <__assert_func>
 800a990:	3101      	adds	r1, #1
 800a992:	005b      	lsls	r3, r3, #1
 800a994:	e7ee      	b.n	800a974 <__lshift+0x1c>
 800a996:	2300      	movs	r3, #0
 800a998:	f100 0114 	add.w	r1, r0, #20
 800a99c:	f100 0210 	add.w	r2, r0, #16
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	4553      	cmp	r3, sl
 800a9a4:	db33      	blt.n	800aa0e <__lshift+0xb6>
 800a9a6:	6920      	ldr	r0, [r4, #16]
 800a9a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a9ac:	f104 0314 	add.w	r3, r4, #20
 800a9b0:	f019 091f 	ands.w	r9, r9, #31
 800a9b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a9b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a9bc:	d02b      	beq.n	800aa16 <__lshift+0xbe>
 800a9be:	468a      	mov	sl, r1
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	f1c9 0e20 	rsb	lr, r9, #32
 800a9c6:	6818      	ldr	r0, [r3, #0]
 800a9c8:	fa00 f009 	lsl.w	r0, r0, r9
 800a9cc:	4310      	orrs	r0, r2
 800a9ce:	f84a 0b04 	str.w	r0, [sl], #4
 800a9d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9d6:	459c      	cmp	ip, r3
 800a9d8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a9dc:	d8f3      	bhi.n	800a9c6 <__lshift+0x6e>
 800a9de:	ebac 0304 	sub.w	r3, ip, r4
 800a9e2:	3b15      	subs	r3, #21
 800a9e4:	f023 0303 	bic.w	r3, r3, #3
 800a9e8:	3304      	adds	r3, #4
 800a9ea:	f104 0015 	add.w	r0, r4, #21
 800a9ee:	4584      	cmp	ip, r0
 800a9f0:	bf38      	it	cc
 800a9f2:	2304      	movcc	r3, #4
 800a9f4:	50ca      	str	r2, [r1, r3]
 800a9f6:	b10a      	cbz	r2, 800a9fc <__lshift+0xa4>
 800a9f8:	f108 0602 	add.w	r6, r8, #2
 800a9fc:	3e01      	subs	r6, #1
 800a9fe:	4638      	mov	r0, r7
 800aa00:	4621      	mov	r1, r4
 800aa02:	612e      	str	r6, [r5, #16]
 800aa04:	f7ff fddc 	bl	800a5c0 <_Bfree>
 800aa08:	4628      	mov	r0, r5
 800aa0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa0e:	f842 0f04 	str.w	r0, [r2, #4]!
 800aa12:	3301      	adds	r3, #1
 800aa14:	e7c5      	b.n	800a9a2 <__lshift+0x4a>
 800aa16:	3904      	subs	r1, #4
 800aa18:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa1c:	459c      	cmp	ip, r3
 800aa1e:	f841 2f04 	str.w	r2, [r1, #4]!
 800aa22:	d8f9      	bhi.n	800aa18 <__lshift+0xc0>
 800aa24:	e7ea      	b.n	800a9fc <__lshift+0xa4>
 800aa26:	bf00      	nop
 800aa28:	0800bf9e 	.word	0x0800bf9e
 800aa2c:	0800bfaf 	.word	0x0800bfaf

0800aa30 <__mcmp>:
 800aa30:	4603      	mov	r3, r0
 800aa32:	690a      	ldr	r2, [r1, #16]
 800aa34:	6900      	ldr	r0, [r0, #16]
 800aa36:	b530      	push	{r4, r5, lr}
 800aa38:	1a80      	subs	r0, r0, r2
 800aa3a:	d10e      	bne.n	800aa5a <__mcmp+0x2a>
 800aa3c:	3314      	adds	r3, #20
 800aa3e:	3114      	adds	r1, #20
 800aa40:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aa44:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aa48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aa4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aa50:	4295      	cmp	r5, r2
 800aa52:	d003      	beq.n	800aa5c <__mcmp+0x2c>
 800aa54:	d205      	bcs.n	800aa62 <__mcmp+0x32>
 800aa56:	f04f 30ff 	mov.w	r0, #4294967295
 800aa5a:	bd30      	pop	{r4, r5, pc}
 800aa5c:	42a3      	cmp	r3, r4
 800aa5e:	d3f3      	bcc.n	800aa48 <__mcmp+0x18>
 800aa60:	e7fb      	b.n	800aa5a <__mcmp+0x2a>
 800aa62:	2001      	movs	r0, #1
 800aa64:	e7f9      	b.n	800aa5a <__mcmp+0x2a>
	...

0800aa68 <__mdiff>:
 800aa68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa6c:	4689      	mov	r9, r1
 800aa6e:	4606      	mov	r6, r0
 800aa70:	4611      	mov	r1, r2
 800aa72:	4648      	mov	r0, r9
 800aa74:	4614      	mov	r4, r2
 800aa76:	f7ff ffdb 	bl	800aa30 <__mcmp>
 800aa7a:	1e05      	subs	r5, r0, #0
 800aa7c:	d112      	bne.n	800aaa4 <__mdiff+0x3c>
 800aa7e:	4629      	mov	r1, r5
 800aa80:	4630      	mov	r0, r6
 800aa82:	f7ff fd5d 	bl	800a540 <_Balloc>
 800aa86:	4602      	mov	r2, r0
 800aa88:	b928      	cbnz	r0, 800aa96 <__mdiff+0x2e>
 800aa8a:	f240 2137 	movw	r1, #567	@ 0x237
 800aa8e:	4b3e      	ldr	r3, [pc, #248]	@ (800ab88 <__mdiff+0x120>)
 800aa90:	483e      	ldr	r0, [pc, #248]	@ (800ab8c <__mdiff+0x124>)
 800aa92:	f000 fafd 	bl	800b090 <__assert_func>
 800aa96:	2301      	movs	r3, #1
 800aa98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aa9c:	4610      	mov	r0, r2
 800aa9e:	b003      	add	sp, #12
 800aaa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaa4:	bfbc      	itt	lt
 800aaa6:	464b      	movlt	r3, r9
 800aaa8:	46a1      	movlt	r9, r4
 800aaaa:	4630      	mov	r0, r6
 800aaac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800aab0:	bfba      	itte	lt
 800aab2:	461c      	movlt	r4, r3
 800aab4:	2501      	movlt	r5, #1
 800aab6:	2500      	movge	r5, #0
 800aab8:	f7ff fd42 	bl	800a540 <_Balloc>
 800aabc:	4602      	mov	r2, r0
 800aabe:	b918      	cbnz	r0, 800aac8 <__mdiff+0x60>
 800aac0:	f240 2145 	movw	r1, #581	@ 0x245
 800aac4:	4b30      	ldr	r3, [pc, #192]	@ (800ab88 <__mdiff+0x120>)
 800aac6:	e7e3      	b.n	800aa90 <__mdiff+0x28>
 800aac8:	f100 0b14 	add.w	fp, r0, #20
 800aacc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800aad0:	f109 0310 	add.w	r3, r9, #16
 800aad4:	60c5      	str	r5, [r0, #12]
 800aad6:	f04f 0c00 	mov.w	ip, #0
 800aada:	f109 0514 	add.w	r5, r9, #20
 800aade:	46d9      	mov	r9, fp
 800aae0:	6926      	ldr	r6, [r4, #16]
 800aae2:	f104 0e14 	add.w	lr, r4, #20
 800aae6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800aaea:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800aaee:	9301      	str	r3, [sp, #4]
 800aaf0:	9b01      	ldr	r3, [sp, #4]
 800aaf2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800aaf6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800aafa:	b281      	uxth	r1, r0
 800aafc:	9301      	str	r3, [sp, #4]
 800aafe:	fa1f f38a 	uxth.w	r3, sl
 800ab02:	1a5b      	subs	r3, r3, r1
 800ab04:	0c00      	lsrs	r0, r0, #16
 800ab06:	4463      	add	r3, ip
 800ab08:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ab0c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ab10:	b29b      	uxth	r3, r3
 800ab12:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ab16:	4576      	cmp	r6, lr
 800ab18:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ab1c:	f849 3b04 	str.w	r3, [r9], #4
 800ab20:	d8e6      	bhi.n	800aaf0 <__mdiff+0x88>
 800ab22:	1b33      	subs	r3, r6, r4
 800ab24:	3b15      	subs	r3, #21
 800ab26:	f023 0303 	bic.w	r3, r3, #3
 800ab2a:	3415      	adds	r4, #21
 800ab2c:	3304      	adds	r3, #4
 800ab2e:	42a6      	cmp	r6, r4
 800ab30:	bf38      	it	cc
 800ab32:	2304      	movcc	r3, #4
 800ab34:	441d      	add	r5, r3
 800ab36:	445b      	add	r3, fp
 800ab38:	461e      	mov	r6, r3
 800ab3a:	462c      	mov	r4, r5
 800ab3c:	4544      	cmp	r4, r8
 800ab3e:	d30e      	bcc.n	800ab5e <__mdiff+0xf6>
 800ab40:	f108 0103 	add.w	r1, r8, #3
 800ab44:	1b49      	subs	r1, r1, r5
 800ab46:	f021 0103 	bic.w	r1, r1, #3
 800ab4a:	3d03      	subs	r5, #3
 800ab4c:	45a8      	cmp	r8, r5
 800ab4e:	bf38      	it	cc
 800ab50:	2100      	movcc	r1, #0
 800ab52:	440b      	add	r3, r1
 800ab54:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab58:	b199      	cbz	r1, 800ab82 <__mdiff+0x11a>
 800ab5a:	6117      	str	r7, [r2, #16]
 800ab5c:	e79e      	b.n	800aa9c <__mdiff+0x34>
 800ab5e:	46e6      	mov	lr, ip
 800ab60:	f854 1b04 	ldr.w	r1, [r4], #4
 800ab64:	fa1f fc81 	uxth.w	ip, r1
 800ab68:	44f4      	add	ip, lr
 800ab6a:	0c08      	lsrs	r0, r1, #16
 800ab6c:	4471      	add	r1, lr
 800ab6e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ab72:	b289      	uxth	r1, r1
 800ab74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ab78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ab7c:	f846 1b04 	str.w	r1, [r6], #4
 800ab80:	e7dc      	b.n	800ab3c <__mdiff+0xd4>
 800ab82:	3f01      	subs	r7, #1
 800ab84:	e7e6      	b.n	800ab54 <__mdiff+0xec>
 800ab86:	bf00      	nop
 800ab88:	0800bf9e 	.word	0x0800bf9e
 800ab8c:	0800bfaf 	.word	0x0800bfaf

0800ab90 <__d2b>:
 800ab90:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800ab94:	2101      	movs	r1, #1
 800ab96:	4690      	mov	r8, r2
 800ab98:	4699      	mov	r9, r3
 800ab9a:	9e08      	ldr	r6, [sp, #32]
 800ab9c:	f7ff fcd0 	bl	800a540 <_Balloc>
 800aba0:	4604      	mov	r4, r0
 800aba2:	b930      	cbnz	r0, 800abb2 <__d2b+0x22>
 800aba4:	4602      	mov	r2, r0
 800aba6:	f240 310f 	movw	r1, #783	@ 0x30f
 800abaa:	4b23      	ldr	r3, [pc, #140]	@ (800ac38 <__d2b+0xa8>)
 800abac:	4823      	ldr	r0, [pc, #140]	@ (800ac3c <__d2b+0xac>)
 800abae:	f000 fa6f 	bl	800b090 <__assert_func>
 800abb2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800abb6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800abba:	b10d      	cbz	r5, 800abc0 <__d2b+0x30>
 800abbc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800abc0:	9301      	str	r3, [sp, #4]
 800abc2:	f1b8 0300 	subs.w	r3, r8, #0
 800abc6:	d024      	beq.n	800ac12 <__d2b+0x82>
 800abc8:	4668      	mov	r0, sp
 800abca:	9300      	str	r3, [sp, #0]
 800abcc:	f7ff fd7f 	bl	800a6ce <__lo0bits>
 800abd0:	e9dd 1200 	ldrd	r1, r2, [sp]
 800abd4:	b1d8      	cbz	r0, 800ac0e <__d2b+0x7e>
 800abd6:	f1c0 0320 	rsb	r3, r0, #32
 800abda:	fa02 f303 	lsl.w	r3, r2, r3
 800abde:	430b      	orrs	r3, r1
 800abe0:	40c2      	lsrs	r2, r0
 800abe2:	6163      	str	r3, [r4, #20]
 800abe4:	9201      	str	r2, [sp, #4]
 800abe6:	9b01      	ldr	r3, [sp, #4]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	bf0c      	ite	eq
 800abec:	2201      	moveq	r2, #1
 800abee:	2202      	movne	r2, #2
 800abf0:	61a3      	str	r3, [r4, #24]
 800abf2:	6122      	str	r2, [r4, #16]
 800abf4:	b1ad      	cbz	r5, 800ac22 <__d2b+0x92>
 800abf6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800abfa:	4405      	add	r5, r0
 800abfc:	6035      	str	r5, [r6, #0]
 800abfe:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ac02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac04:	6018      	str	r0, [r3, #0]
 800ac06:	4620      	mov	r0, r4
 800ac08:	b002      	add	sp, #8
 800ac0a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800ac0e:	6161      	str	r1, [r4, #20]
 800ac10:	e7e9      	b.n	800abe6 <__d2b+0x56>
 800ac12:	a801      	add	r0, sp, #4
 800ac14:	f7ff fd5b 	bl	800a6ce <__lo0bits>
 800ac18:	9b01      	ldr	r3, [sp, #4]
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	6163      	str	r3, [r4, #20]
 800ac1e:	3020      	adds	r0, #32
 800ac20:	e7e7      	b.n	800abf2 <__d2b+0x62>
 800ac22:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ac26:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ac2a:	6030      	str	r0, [r6, #0]
 800ac2c:	6918      	ldr	r0, [r3, #16]
 800ac2e:	f7ff fd2f 	bl	800a690 <__hi0bits>
 800ac32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ac36:	e7e4      	b.n	800ac02 <__d2b+0x72>
 800ac38:	0800bf9e 	.word	0x0800bf9e
 800ac3c:	0800bfaf 	.word	0x0800bfaf

0800ac40 <__ssputs_r>:
 800ac40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac44:	461f      	mov	r7, r3
 800ac46:	688e      	ldr	r6, [r1, #8]
 800ac48:	4682      	mov	sl, r0
 800ac4a:	42be      	cmp	r6, r7
 800ac4c:	460c      	mov	r4, r1
 800ac4e:	4690      	mov	r8, r2
 800ac50:	680b      	ldr	r3, [r1, #0]
 800ac52:	d82d      	bhi.n	800acb0 <__ssputs_r+0x70>
 800ac54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ac58:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ac5c:	d026      	beq.n	800acac <__ssputs_r+0x6c>
 800ac5e:	6965      	ldr	r5, [r4, #20]
 800ac60:	6909      	ldr	r1, [r1, #16]
 800ac62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac66:	eba3 0901 	sub.w	r9, r3, r1
 800ac6a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac6e:	1c7b      	adds	r3, r7, #1
 800ac70:	444b      	add	r3, r9
 800ac72:	106d      	asrs	r5, r5, #1
 800ac74:	429d      	cmp	r5, r3
 800ac76:	bf38      	it	cc
 800ac78:	461d      	movcc	r5, r3
 800ac7a:	0553      	lsls	r3, r2, #21
 800ac7c:	d527      	bpl.n	800acce <__ssputs_r+0x8e>
 800ac7e:	4629      	mov	r1, r5
 800ac80:	f7fd fecc 	bl	8008a1c <_malloc_r>
 800ac84:	4606      	mov	r6, r0
 800ac86:	b360      	cbz	r0, 800ace2 <__ssputs_r+0xa2>
 800ac88:	464a      	mov	r2, r9
 800ac8a:	6921      	ldr	r1, [r4, #16]
 800ac8c:	f000 f9f2 	bl	800b074 <memcpy>
 800ac90:	89a3      	ldrh	r3, [r4, #12]
 800ac92:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ac96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac9a:	81a3      	strh	r3, [r4, #12]
 800ac9c:	6126      	str	r6, [r4, #16]
 800ac9e:	444e      	add	r6, r9
 800aca0:	6026      	str	r6, [r4, #0]
 800aca2:	463e      	mov	r6, r7
 800aca4:	6165      	str	r5, [r4, #20]
 800aca6:	eba5 0509 	sub.w	r5, r5, r9
 800acaa:	60a5      	str	r5, [r4, #8]
 800acac:	42be      	cmp	r6, r7
 800acae:	d900      	bls.n	800acb2 <__ssputs_r+0x72>
 800acb0:	463e      	mov	r6, r7
 800acb2:	4632      	mov	r2, r6
 800acb4:	4641      	mov	r1, r8
 800acb6:	6820      	ldr	r0, [r4, #0]
 800acb8:	f000 f9c2 	bl	800b040 <memmove>
 800acbc:	2000      	movs	r0, #0
 800acbe:	68a3      	ldr	r3, [r4, #8]
 800acc0:	1b9b      	subs	r3, r3, r6
 800acc2:	60a3      	str	r3, [r4, #8]
 800acc4:	6823      	ldr	r3, [r4, #0]
 800acc6:	4433      	add	r3, r6
 800acc8:	6023      	str	r3, [r4, #0]
 800acca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acce:	462a      	mov	r2, r5
 800acd0:	f000 fa22 	bl	800b118 <_realloc_r>
 800acd4:	4606      	mov	r6, r0
 800acd6:	2800      	cmp	r0, #0
 800acd8:	d1e0      	bne.n	800ac9c <__ssputs_r+0x5c>
 800acda:	4650      	mov	r0, sl
 800acdc:	6921      	ldr	r1, [r4, #16]
 800acde:	f7ff fbe7 	bl	800a4b0 <_free_r>
 800ace2:	230c      	movs	r3, #12
 800ace4:	f8ca 3000 	str.w	r3, [sl]
 800ace8:	89a3      	ldrh	r3, [r4, #12]
 800acea:	f04f 30ff 	mov.w	r0, #4294967295
 800acee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acf2:	81a3      	strh	r3, [r4, #12]
 800acf4:	e7e9      	b.n	800acca <__ssputs_r+0x8a>
	...

0800acf8 <_svfiprintf_r>:
 800acf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acfc:	4698      	mov	r8, r3
 800acfe:	898b      	ldrh	r3, [r1, #12]
 800ad00:	4607      	mov	r7, r0
 800ad02:	061b      	lsls	r3, r3, #24
 800ad04:	460d      	mov	r5, r1
 800ad06:	4614      	mov	r4, r2
 800ad08:	b09d      	sub	sp, #116	@ 0x74
 800ad0a:	d510      	bpl.n	800ad2e <_svfiprintf_r+0x36>
 800ad0c:	690b      	ldr	r3, [r1, #16]
 800ad0e:	b973      	cbnz	r3, 800ad2e <_svfiprintf_r+0x36>
 800ad10:	2140      	movs	r1, #64	@ 0x40
 800ad12:	f7fd fe83 	bl	8008a1c <_malloc_r>
 800ad16:	6028      	str	r0, [r5, #0]
 800ad18:	6128      	str	r0, [r5, #16]
 800ad1a:	b930      	cbnz	r0, 800ad2a <_svfiprintf_r+0x32>
 800ad1c:	230c      	movs	r3, #12
 800ad1e:	603b      	str	r3, [r7, #0]
 800ad20:	f04f 30ff 	mov.w	r0, #4294967295
 800ad24:	b01d      	add	sp, #116	@ 0x74
 800ad26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad2a:	2340      	movs	r3, #64	@ 0x40
 800ad2c:	616b      	str	r3, [r5, #20]
 800ad2e:	2300      	movs	r3, #0
 800ad30:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad32:	2320      	movs	r3, #32
 800ad34:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ad38:	2330      	movs	r3, #48	@ 0x30
 800ad3a:	f04f 0901 	mov.w	r9, #1
 800ad3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad42:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800aedc <_svfiprintf_r+0x1e4>
 800ad46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ad4a:	4623      	mov	r3, r4
 800ad4c:	469a      	mov	sl, r3
 800ad4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad52:	b10a      	cbz	r2, 800ad58 <_svfiprintf_r+0x60>
 800ad54:	2a25      	cmp	r2, #37	@ 0x25
 800ad56:	d1f9      	bne.n	800ad4c <_svfiprintf_r+0x54>
 800ad58:	ebba 0b04 	subs.w	fp, sl, r4
 800ad5c:	d00b      	beq.n	800ad76 <_svfiprintf_r+0x7e>
 800ad5e:	465b      	mov	r3, fp
 800ad60:	4622      	mov	r2, r4
 800ad62:	4629      	mov	r1, r5
 800ad64:	4638      	mov	r0, r7
 800ad66:	f7ff ff6b 	bl	800ac40 <__ssputs_r>
 800ad6a:	3001      	adds	r0, #1
 800ad6c:	f000 80a7 	beq.w	800aebe <_svfiprintf_r+0x1c6>
 800ad70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad72:	445a      	add	r2, fp
 800ad74:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad76:	f89a 3000 	ldrb.w	r3, [sl]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	f000 809f 	beq.w	800aebe <_svfiprintf_r+0x1c6>
 800ad80:	2300      	movs	r3, #0
 800ad82:	f04f 32ff 	mov.w	r2, #4294967295
 800ad86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad8a:	f10a 0a01 	add.w	sl, sl, #1
 800ad8e:	9304      	str	r3, [sp, #16]
 800ad90:	9307      	str	r3, [sp, #28]
 800ad92:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ad96:	931a      	str	r3, [sp, #104]	@ 0x68
 800ad98:	4654      	mov	r4, sl
 800ad9a:	2205      	movs	r2, #5
 800ad9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ada0:	484e      	ldr	r0, [pc, #312]	@ (800aedc <_svfiprintf_r+0x1e4>)
 800ada2:	f7fe fd24 	bl	80097ee <memchr>
 800ada6:	9a04      	ldr	r2, [sp, #16]
 800ada8:	b9d8      	cbnz	r0, 800ade2 <_svfiprintf_r+0xea>
 800adaa:	06d0      	lsls	r0, r2, #27
 800adac:	bf44      	itt	mi
 800adae:	2320      	movmi	r3, #32
 800adb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800adb4:	0711      	lsls	r1, r2, #28
 800adb6:	bf44      	itt	mi
 800adb8:	232b      	movmi	r3, #43	@ 0x2b
 800adba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800adbe:	f89a 3000 	ldrb.w	r3, [sl]
 800adc2:	2b2a      	cmp	r3, #42	@ 0x2a
 800adc4:	d015      	beq.n	800adf2 <_svfiprintf_r+0xfa>
 800adc6:	4654      	mov	r4, sl
 800adc8:	2000      	movs	r0, #0
 800adca:	f04f 0c0a 	mov.w	ip, #10
 800adce:	9a07      	ldr	r2, [sp, #28]
 800add0:	4621      	mov	r1, r4
 800add2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800add6:	3b30      	subs	r3, #48	@ 0x30
 800add8:	2b09      	cmp	r3, #9
 800adda:	d94b      	bls.n	800ae74 <_svfiprintf_r+0x17c>
 800addc:	b1b0      	cbz	r0, 800ae0c <_svfiprintf_r+0x114>
 800adde:	9207      	str	r2, [sp, #28]
 800ade0:	e014      	b.n	800ae0c <_svfiprintf_r+0x114>
 800ade2:	eba0 0308 	sub.w	r3, r0, r8
 800ade6:	fa09 f303 	lsl.w	r3, r9, r3
 800adea:	4313      	orrs	r3, r2
 800adec:	46a2      	mov	sl, r4
 800adee:	9304      	str	r3, [sp, #16]
 800adf0:	e7d2      	b.n	800ad98 <_svfiprintf_r+0xa0>
 800adf2:	9b03      	ldr	r3, [sp, #12]
 800adf4:	1d19      	adds	r1, r3, #4
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	9103      	str	r1, [sp, #12]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	bfbb      	ittet	lt
 800adfe:	425b      	neglt	r3, r3
 800ae00:	f042 0202 	orrlt.w	r2, r2, #2
 800ae04:	9307      	strge	r3, [sp, #28]
 800ae06:	9307      	strlt	r3, [sp, #28]
 800ae08:	bfb8      	it	lt
 800ae0a:	9204      	strlt	r2, [sp, #16]
 800ae0c:	7823      	ldrb	r3, [r4, #0]
 800ae0e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae10:	d10a      	bne.n	800ae28 <_svfiprintf_r+0x130>
 800ae12:	7863      	ldrb	r3, [r4, #1]
 800ae14:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae16:	d132      	bne.n	800ae7e <_svfiprintf_r+0x186>
 800ae18:	9b03      	ldr	r3, [sp, #12]
 800ae1a:	3402      	adds	r4, #2
 800ae1c:	1d1a      	adds	r2, r3, #4
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	9203      	str	r2, [sp, #12]
 800ae22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ae26:	9305      	str	r3, [sp, #20]
 800ae28:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800aee0 <_svfiprintf_r+0x1e8>
 800ae2c:	2203      	movs	r2, #3
 800ae2e:	4650      	mov	r0, sl
 800ae30:	7821      	ldrb	r1, [r4, #0]
 800ae32:	f7fe fcdc 	bl	80097ee <memchr>
 800ae36:	b138      	cbz	r0, 800ae48 <_svfiprintf_r+0x150>
 800ae38:	2240      	movs	r2, #64	@ 0x40
 800ae3a:	9b04      	ldr	r3, [sp, #16]
 800ae3c:	eba0 000a 	sub.w	r0, r0, sl
 800ae40:	4082      	lsls	r2, r0
 800ae42:	4313      	orrs	r3, r2
 800ae44:	3401      	adds	r4, #1
 800ae46:	9304      	str	r3, [sp, #16]
 800ae48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae4c:	2206      	movs	r2, #6
 800ae4e:	4825      	ldr	r0, [pc, #148]	@ (800aee4 <_svfiprintf_r+0x1ec>)
 800ae50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ae54:	f7fe fccb 	bl	80097ee <memchr>
 800ae58:	2800      	cmp	r0, #0
 800ae5a:	d036      	beq.n	800aeca <_svfiprintf_r+0x1d2>
 800ae5c:	4b22      	ldr	r3, [pc, #136]	@ (800aee8 <_svfiprintf_r+0x1f0>)
 800ae5e:	bb1b      	cbnz	r3, 800aea8 <_svfiprintf_r+0x1b0>
 800ae60:	9b03      	ldr	r3, [sp, #12]
 800ae62:	3307      	adds	r3, #7
 800ae64:	f023 0307 	bic.w	r3, r3, #7
 800ae68:	3308      	adds	r3, #8
 800ae6a:	9303      	str	r3, [sp, #12]
 800ae6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae6e:	4433      	add	r3, r6
 800ae70:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae72:	e76a      	b.n	800ad4a <_svfiprintf_r+0x52>
 800ae74:	460c      	mov	r4, r1
 800ae76:	2001      	movs	r0, #1
 800ae78:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae7c:	e7a8      	b.n	800add0 <_svfiprintf_r+0xd8>
 800ae7e:	2300      	movs	r3, #0
 800ae80:	f04f 0c0a 	mov.w	ip, #10
 800ae84:	4619      	mov	r1, r3
 800ae86:	3401      	adds	r4, #1
 800ae88:	9305      	str	r3, [sp, #20]
 800ae8a:	4620      	mov	r0, r4
 800ae8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae90:	3a30      	subs	r2, #48	@ 0x30
 800ae92:	2a09      	cmp	r2, #9
 800ae94:	d903      	bls.n	800ae9e <_svfiprintf_r+0x1a6>
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d0c6      	beq.n	800ae28 <_svfiprintf_r+0x130>
 800ae9a:	9105      	str	r1, [sp, #20]
 800ae9c:	e7c4      	b.n	800ae28 <_svfiprintf_r+0x130>
 800ae9e:	4604      	mov	r4, r0
 800aea0:	2301      	movs	r3, #1
 800aea2:	fb0c 2101 	mla	r1, ip, r1, r2
 800aea6:	e7f0      	b.n	800ae8a <_svfiprintf_r+0x192>
 800aea8:	ab03      	add	r3, sp, #12
 800aeaa:	9300      	str	r3, [sp, #0]
 800aeac:	462a      	mov	r2, r5
 800aeae:	4638      	mov	r0, r7
 800aeb0:	4b0e      	ldr	r3, [pc, #56]	@ (800aeec <_svfiprintf_r+0x1f4>)
 800aeb2:	a904      	add	r1, sp, #16
 800aeb4:	f7fd fedc 	bl	8008c70 <_printf_float>
 800aeb8:	1c42      	adds	r2, r0, #1
 800aeba:	4606      	mov	r6, r0
 800aebc:	d1d6      	bne.n	800ae6c <_svfiprintf_r+0x174>
 800aebe:	89ab      	ldrh	r3, [r5, #12]
 800aec0:	065b      	lsls	r3, r3, #25
 800aec2:	f53f af2d 	bmi.w	800ad20 <_svfiprintf_r+0x28>
 800aec6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aec8:	e72c      	b.n	800ad24 <_svfiprintf_r+0x2c>
 800aeca:	ab03      	add	r3, sp, #12
 800aecc:	9300      	str	r3, [sp, #0]
 800aece:	462a      	mov	r2, r5
 800aed0:	4638      	mov	r0, r7
 800aed2:	4b06      	ldr	r3, [pc, #24]	@ (800aeec <_svfiprintf_r+0x1f4>)
 800aed4:	a904      	add	r1, sp, #16
 800aed6:	f7fe f969 	bl	80091ac <_printf_i>
 800aeda:	e7ed      	b.n	800aeb8 <_svfiprintf_r+0x1c0>
 800aedc:	0800c108 	.word	0x0800c108
 800aee0:	0800c10e 	.word	0x0800c10e
 800aee4:	0800c112 	.word	0x0800c112
 800aee8:	08008c71 	.word	0x08008c71
 800aeec:	0800ac41 	.word	0x0800ac41

0800aef0 <__sflush_r>:
 800aef0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aef6:	0716      	lsls	r6, r2, #28
 800aef8:	4605      	mov	r5, r0
 800aefa:	460c      	mov	r4, r1
 800aefc:	d454      	bmi.n	800afa8 <__sflush_r+0xb8>
 800aefe:	684b      	ldr	r3, [r1, #4]
 800af00:	2b00      	cmp	r3, #0
 800af02:	dc02      	bgt.n	800af0a <__sflush_r+0x1a>
 800af04:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800af06:	2b00      	cmp	r3, #0
 800af08:	dd48      	ble.n	800af9c <__sflush_r+0xac>
 800af0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af0c:	2e00      	cmp	r6, #0
 800af0e:	d045      	beq.n	800af9c <__sflush_r+0xac>
 800af10:	2300      	movs	r3, #0
 800af12:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800af16:	682f      	ldr	r7, [r5, #0]
 800af18:	6a21      	ldr	r1, [r4, #32]
 800af1a:	602b      	str	r3, [r5, #0]
 800af1c:	d030      	beq.n	800af80 <__sflush_r+0x90>
 800af1e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800af20:	89a3      	ldrh	r3, [r4, #12]
 800af22:	0759      	lsls	r1, r3, #29
 800af24:	d505      	bpl.n	800af32 <__sflush_r+0x42>
 800af26:	6863      	ldr	r3, [r4, #4]
 800af28:	1ad2      	subs	r2, r2, r3
 800af2a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800af2c:	b10b      	cbz	r3, 800af32 <__sflush_r+0x42>
 800af2e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800af30:	1ad2      	subs	r2, r2, r3
 800af32:	2300      	movs	r3, #0
 800af34:	4628      	mov	r0, r5
 800af36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af38:	6a21      	ldr	r1, [r4, #32]
 800af3a:	47b0      	blx	r6
 800af3c:	1c43      	adds	r3, r0, #1
 800af3e:	89a3      	ldrh	r3, [r4, #12]
 800af40:	d106      	bne.n	800af50 <__sflush_r+0x60>
 800af42:	6829      	ldr	r1, [r5, #0]
 800af44:	291d      	cmp	r1, #29
 800af46:	d82b      	bhi.n	800afa0 <__sflush_r+0xb0>
 800af48:	4a28      	ldr	r2, [pc, #160]	@ (800afec <__sflush_r+0xfc>)
 800af4a:	410a      	asrs	r2, r1
 800af4c:	07d6      	lsls	r6, r2, #31
 800af4e:	d427      	bmi.n	800afa0 <__sflush_r+0xb0>
 800af50:	2200      	movs	r2, #0
 800af52:	6062      	str	r2, [r4, #4]
 800af54:	6922      	ldr	r2, [r4, #16]
 800af56:	04d9      	lsls	r1, r3, #19
 800af58:	6022      	str	r2, [r4, #0]
 800af5a:	d504      	bpl.n	800af66 <__sflush_r+0x76>
 800af5c:	1c42      	adds	r2, r0, #1
 800af5e:	d101      	bne.n	800af64 <__sflush_r+0x74>
 800af60:	682b      	ldr	r3, [r5, #0]
 800af62:	b903      	cbnz	r3, 800af66 <__sflush_r+0x76>
 800af64:	6560      	str	r0, [r4, #84]	@ 0x54
 800af66:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af68:	602f      	str	r7, [r5, #0]
 800af6a:	b1b9      	cbz	r1, 800af9c <__sflush_r+0xac>
 800af6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af70:	4299      	cmp	r1, r3
 800af72:	d002      	beq.n	800af7a <__sflush_r+0x8a>
 800af74:	4628      	mov	r0, r5
 800af76:	f7ff fa9b 	bl	800a4b0 <_free_r>
 800af7a:	2300      	movs	r3, #0
 800af7c:	6363      	str	r3, [r4, #52]	@ 0x34
 800af7e:	e00d      	b.n	800af9c <__sflush_r+0xac>
 800af80:	2301      	movs	r3, #1
 800af82:	4628      	mov	r0, r5
 800af84:	47b0      	blx	r6
 800af86:	4602      	mov	r2, r0
 800af88:	1c50      	adds	r0, r2, #1
 800af8a:	d1c9      	bne.n	800af20 <__sflush_r+0x30>
 800af8c:	682b      	ldr	r3, [r5, #0]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d0c6      	beq.n	800af20 <__sflush_r+0x30>
 800af92:	2b1d      	cmp	r3, #29
 800af94:	d001      	beq.n	800af9a <__sflush_r+0xaa>
 800af96:	2b16      	cmp	r3, #22
 800af98:	d11d      	bne.n	800afd6 <__sflush_r+0xe6>
 800af9a:	602f      	str	r7, [r5, #0]
 800af9c:	2000      	movs	r0, #0
 800af9e:	e021      	b.n	800afe4 <__sflush_r+0xf4>
 800afa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afa4:	b21b      	sxth	r3, r3
 800afa6:	e01a      	b.n	800afde <__sflush_r+0xee>
 800afa8:	690f      	ldr	r7, [r1, #16]
 800afaa:	2f00      	cmp	r7, #0
 800afac:	d0f6      	beq.n	800af9c <__sflush_r+0xac>
 800afae:	0793      	lsls	r3, r2, #30
 800afb0:	bf18      	it	ne
 800afb2:	2300      	movne	r3, #0
 800afb4:	680e      	ldr	r6, [r1, #0]
 800afb6:	bf08      	it	eq
 800afb8:	694b      	ldreq	r3, [r1, #20]
 800afba:	1bf6      	subs	r6, r6, r7
 800afbc:	600f      	str	r7, [r1, #0]
 800afbe:	608b      	str	r3, [r1, #8]
 800afc0:	2e00      	cmp	r6, #0
 800afc2:	ddeb      	ble.n	800af9c <__sflush_r+0xac>
 800afc4:	4633      	mov	r3, r6
 800afc6:	463a      	mov	r2, r7
 800afc8:	4628      	mov	r0, r5
 800afca:	6a21      	ldr	r1, [r4, #32]
 800afcc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800afd0:	47e0      	blx	ip
 800afd2:	2800      	cmp	r0, #0
 800afd4:	dc07      	bgt.n	800afe6 <__sflush_r+0xf6>
 800afd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afde:	f04f 30ff 	mov.w	r0, #4294967295
 800afe2:	81a3      	strh	r3, [r4, #12]
 800afe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afe6:	4407      	add	r7, r0
 800afe8:	1a36      	subs	r6, r6, r0
 800afea:	e7e9      	b.n	800afc0 <__sflush_r+0xd0>
 800afec:	dfbffffe 	.word	0xdfbffffe

0800aff0 <_fflush_r>:
 800aff0:	b538      	push	{r3, r4, r5, lr}
 800aff2:	690b      	ldr	r3, [r1, #16]
 800aff4:	4605      	mov	r5, r0
 800aff6:	460c      	mov	r4, r1
 800aff8:	b913      	cbnz	r3, 800b000 <_fflush_r+0x10>
 800affa:	2500      	movs	r5, #0
 800affc:	4628      	mov	r0, r5
 800affe:	bd38      	pop	{r3, r4, r5, pc}
 800b000:	b118      	cbz	r0, 800b00a <_fflush_r+0x1a>
 800b002:	6a03      	ldr	r3, [r0, #32]
 800b004:	b90b      	cbnz	r3, 800b00a <_fflush_r+0x1a>
 800b006:	f7fe fa7d 	bl	8009504 <__sinit>
 800b00a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d0f3      	beq.n	800affa <_fflush_r+0xa>
 800b012:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b014:	07d0      	lsls	r0, r2, #31
 800b016:	d404      	bmi.n	800b022 <_fflush_r+0x32>
 800b018:	0599      	lsls	r1, r3, #22
 800b01a:	d402      	bmi.n	800b022 <_fflush_r+0x32>
 800b01c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b01e:	f7fe fbdc 	bl	80097da <__retarget_lock_acquire_recursive>
 800b022:	4628      	mov	r0, r5
 800b024:	4621      	mov	r1, r4
 800b026:	f7ff ff63 	bl	800aef0 <__sflush_r>
 800b02a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b02c:	4605      	mov	r5, r0
 800b02e:	07da      	lsls	r2, r3, #31
 800b030:	d4e4      	bmi.n	800affc <_fflush_r+0xc>
 800b032:	89a3      	ldrh	r3, [r4, #12]
 800b034:	059b      	lsls	r3, r3, #22
 800b036:	d4e1      	bmi.n	800affc <_fflush_r+0xc>
 800b038:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b03a:	f7fe fbcf 	bl	80097dc <__retarget_lock_release_recursive>
 800b03e:	e7dd      	b.n	800affc <_fflush_r+0xc>

0800b040 <memmove>:
 800b040:	4288      	cmp	r0, r1
 800b042:	b510      	push	{r4, lr}
 800b044:	eb01 0402 	add.w	r4, r1, r2
 800b048:	d902      	bls.n	800b050 <memmove+0x10>
 800b04a:	4284      	cmp	r4, r0
 800b04c:	4623      	mov	r3, r4
 800b04e:	d807      	bhi.n	800b060 <memmove+0x20>
 800b050:	1e43      	subs	r3, r0, #1
 800b052:	42a1      	cmp	r1, r4
 800b054:	d008      	beq.n	800b068 <memmove+0x28>
 800b056:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b05a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b05e:	e7f8      	b.n	800b052 <memmove+0x12>
 800b060:	4601      	mov	r1, r0
 800b062:	4402      	add	r2, r0
 800b064:	428a      	cmp	r2, r1
 800b066:	d100      	bne.n	800b06a <memmove+0x2a>
 800b068:	bd10      	pop	{r4, pc}
 800b06a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b06e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b072:	e7f7      	b.n	800b064 <memmove+0x24>

0800b074 <memcpy>:
 800b074:	440a      	add	r2, r1
 800b076:	4291      	cmp	r1, r2
 800b078:	f100 33ff 	add.w	r3, r0, #4294967295
 800b07c:	d100      	bne.n	800b080 <memcpy+0xc>
 800b07e:	4770      	bx	lr
 800b080:	b510      	push	{r4, lr}
 800b082:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b086:	4291      	cmp	r1, r2
 800b088:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b08c:	d1f9      	bne.n	800b082 <memcpy+0xe>
 800b08e:	bd10      	pop	{r4, pc}

0800b090 <__assert_func>:
 800b090:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b092:	4614      	mov	r4, r2
 800b094:	461a      	mov	r2, r3
 800b096:	4b09      	ldr	r3, [pc, #36]	@ (800b0bc <__assert_func+0x2c>)
 800b098:	4605      	mov	r5, r0
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	68d8      	ldr	r0, [r3, #12]
 800b09e:	b954      	cbnz	r4, 800b0b6 <__assert_func+0x26>
 800b0a0:	4b07      	ldr	r3, [pc, #28]	@ (800b0c0 <__assert_func+0x30>)
 800b0a2:	461c      	mov	r4, r3
 800b0a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b0a8:	9100      	str	r1, [sp, #0]
 800b0aa:	462b      	mov	r3, r5
 800b0ac:	4905      	ldr	r1, [pc, #20]	@ (800b0c4 <__assert_func+0x34>)
 800b0ae:	f000 f86f 	bl	800b190 <fiprintf>
 800b0b2:	f7fd fc79 	bl	80089a8 <abort>
 800b0b6:	4b04      	ldr	r3, [pc, #16]	@ (800b0c8 <__assert_func+0x38>)
 800b0b8:	e7f4      	b.n	800b0a4 <__assert_func+0x14>
 800b0ba:	bf00      	nop
 800b0bc:	2000001c 	.word	0x2000001c
 800b0c0:	0800c15e 	.word	0x0800c15e
 800b0c4:	0800c130 	.word	0x0800c130
 800b0c8:	0800c123 	.word	0x0800c123

0800b0cc <_calloc_r>:
 800b0cc:	b570      	push	{r4, r5, r6, lr}
 800b0ce:	fba1 5402 	umull	r5, r4, r1, r2
 800b0d2:	b93c      	cbnz	r4, 800b0e4 <_calloc_r+0x18>
 800b0d4:	4629      	mov	r1, r5
 800b0d6:	f7fd fca1 	bl	8008a1c <_malloc_r>
 800b0da:	4606      	mov	r6, r0
 800b0dc:	b928      	cbnz	r0, 800b0ea <_calloc_r+0x1e>
 800b0de:	2600      	movs	r6, #0
 800b0e0:	4630      	mov	r0, r6
 800b0e2:	bd70      	pop	{r4, r5, r6, pc}
 800b0e4:	220c      	movs	r2, #12
 800b0e6:	6002      	str	r2, [r0, #0]
 800b0e8:	e7f9      	b.n	800b0de <_calloc_r+0x12>
 800b0ea:	462a      	mov	r2, r5
 800b0ec:	4621      	mov	r1, r4
 800b0ee:	f7fe faa2 	bl	8009636 <memset>
 800b0f2:	e7f5      	b.n	800b0e0 <_calloc_r+0x14>

0800b0f4 <__ascii_mbtowc>:
 800b0f4:	b082      	sub	sp, #8
 800b0f6:	b901      	cbnz	r1, 800b0fa <__ascii_mbtowc+0x6>
 800b0f8:	a901      	add	r1, sp, #4
 800b0fa:	b142      	cbz	r2, 800b10e <__ascii_mbtowc+0x1a>
 800b0fc:	b14b      	cbz	r3, 800b112 <__ascii_mbtowc+0x1e>
 800b0fe:	7813      	ldrb	r3, [r2, #0]
 800b100:	600b      	str	r3, [r1, #0]
 800b102:	7812      	ldrb	r2, [r2, #0]
 800b104:	1e10      	subs	r0, r2, #0
 800b106:	bf18      	it	ne
 800b108:	2001      	movne	r0, #1
 800b10a:	b002      	add	sp, #8
 800b10c:	4770      	bx	lr
 800b10e:	4610      	mov	r0, r2
 800b110:	e7fb      	b.n	800b10a <__ascii_mbtowc+0x16>
 800b112:	f06f 0001 	mvn.w	r0, #1
 800b116:	e7f8      	b.n	800b10a <__ascii_mbtowc+0x16>

0800b118 <_realloc_r>:
 800b118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b11c:	4680      	mov	r8, r0
 800b11e:	4615      	mov	r5, r2
 800b120:	460c      	mov	r4, r1
 800b122:	b921      	cbnz	r1, 800b12e <_realloc_r+0x16>
 800b124:	4611      	mov	r1, r2
 800b126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b12a:	f7fd bc77 	b.w	8008a1c <_malloc_r>
 800b12e:	b92a      	cbnz	r2, 800b13c <_realloc_r+0x24>
 800b130:	f7ff f9be 	bl	800a4b0 <_free_r>
 800b134:	2400      	movs	r4, #0
 800b136:	4620      	mov	r0, r4
 800b138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b13c:	f000 f83a 	bl	800b1b4 <_malloc_usable_size_r>
 800b140:	4285      	cmp	r5, r0
 800b142:	4606      	mov	r6, r0
 800b144:	d802      	bhi.n	800b14c <_realloc_r+0x34>
 800b146:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b14a:	d8f4      	bhi.n	800b136 <_realloc_r+0x1e>
 800b14c:	4629      	mov	r1, r5
 800b14e:	4640      	mov	r0, r8
 800b150:	f7fd fc64 	bl	8008a1c <_malloc_r>
 800b154:	4607      	mov	r7, r0
 800b156:	2800      	cmp	r0, #0
 800b158:	d0ec      	beq.n	800b134 <_realloc_r+0x1c>
 800b15a:	42b5      	cmp	r5, r6
 800b15c:	462a      	mov	r2, r5
 800b15e:	4621      	mov	r1, r4
 800b160:	bf28      	it	cs
 800b162:	4632      	movcs	r2, r6
 800b164:	f7ff ff86 	bl	800b074 <memcpy>
 800b168:	4621      	mov	r1, r4
 800b16a:	4640      	mov	r0, r8
 800b16c:	f7ff f9a0 	bl	800a4b0 <_free_r>
 800b170:	463c      	mov	r4, r7
 800b172:	e7e0      	b.n	800b136 <_realloc_r+0x1e>

0800b174 <__ascii_wctomb>:
 800b174:	4603      	mov	r3, r0
 800b176:	4608      	mov	r0, r1
 800b178:	b141      	cbz	r1, 800b18c <__ascii_wctomb+0x18>
 800b17a:	2aff      	cmp	r2, #255	@ 0xff
 800b17c:	d904      	bls.n	800b188 <__ascii_wctomb+0x14>
 800b17e:	228a      	movs	r2, #138	@ 0x8a
 800b180:	f04f 30ff 	mov.w	r0, #4294967295
 800b184:	601a      	str	r2, [r3, #0]
 800b186:	4770      	bx	lr
 800b188:	2001      	movs	r0, #1
 800b18a:	700a      	strb	r2, [r1, #0]
 800b18c:	4770      	bx	lr
	...

0800b190 <fiprintf>:
 800b190:	b40e      	push	{r1, r2, r3}
 800b192:	b503      	push	{r0, r1, lr}
 800b194:	4601      	mov	r1, r0
 800b196:	ab03      	add	r3, sp, #12
 800b198:	4805      	ldr	r0, [pc, #20]	@ (800b1b0 <fiprintf+0x20>)
 800b19a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b19e:	6800      	ldr	r0, [r0, #0]
 800b1a0:	9301      	str	r3, [sp, #4]
 800b1a2:	f000 f837 	bl	800b214 <_vfiprintf_r>
 800b1a6:	b002      	add	sp, #8
 800b1a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1ac:	b003      	add	sp, #12
 800b1ae:	4770      	bx	lr
 800b1b0:	2000001c 	.word	0x2000001c

0800b1b4 <_malloc_usable_size_r>:
 800b1b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1b8:	1f18      	subs	r0, r3, #4
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	bfbc      	itt	lt
 800b1be:	580b      	ldrlt	r3, [r1, r0]
 800b1c0:	18c0      	addlt	r0, r0, r3
 800b1c2:	4770      	bx	lr

0800b1c4 <__sfputc_r>:
 800b1c4:	6893      	ldr	r3, [r2, #8]
 800b1c6:	b410      	push	{r4}
 800b1c8:	3b01      	subs	r3, #1
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	6093      	str	r3, [r2, #8]
 800b1ce:	da07      	bge.n	800b1e0 <__sfputc_r+0x1c>
 800b1d0:	6994      	ldr	r4, [r2, #24]
 800b1d2:	42a3      	cmp	r3, r4
 800b1d4:	db01      	blt.n	800b1da <__sfputc_r+0x16>
 800b1d6:	290a      	cmp	r1, #10
 800b1d8:	d102      	bne.n	800b1e0 <__sfputc_r+0x1c>
 800b1da:	bc10      	pop	{r4}
 800b1dc:	f000 b932 	b.w	800b444 <__swbuf_r>
 800b1e0:	6813      	ldr	r3, [r2, #0]
 800b1e2:	1c58      	adds	r0, r3, #1
 800b1e4:	6010      	str	r0, [r2, #0]
 800b1e6:	7019      	strb	r1, [r3, #0]
 800b1e8:	4608      	mov	r0, r1
 800b1ea:	bc10      	pop	{r4}
 800b1ec:	4770      	bx	lr

0800b1ee <__sfputs_r>:
 800b1ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1f0:	4606      	mov	r6, r0
 800b1f2:	460f      	mov	r7, r1
 800b1f4:	4614      	mov	r4, r2
 800b1f6:	18d5      	adds	r5, r2, r3
 800b1f8:	42ac      	cmp	r4, r5
 800b1fa:	d101      	bne.n	800b200 <__sfputs_r+0x12>
 800b1fc:	2000      	movs	r0, #0
 800b1fe:	e007      	b.n	800b210 <__sfputs_r+0x22>
 800b200:	463a      	mov	r2, r7
 800b202:	4630      	mov	r0, r6
 800b204:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b208:	f7ff ffdc 	bl	800b1c4 <__sfputc_r>
 800b20c:	1c43      	adds	r3, r0, #1
 800b20e:	d1f3      	bne.n	800b1f8 <__sfputs_r+0xa>
 800b210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b214 <_vfiprintf_r>:
 800b214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b218:	460d      	mov	r5, r1
 800b21a:	4614      	mov	r4, r2
 800b21c:	4698      	mov	r8, r3
 800b21e:	4606      	mov	r6, r0
 800b220:	b09d      	sub	sp, #116	@ 0x74
 800b222:	b118      	cbz	r0, 800b22c <_vfiprintf_r+0x18>
 800b224:	6a03      	ldr	r3, [r0, #32]
 800b226:	b90b      	cbnz	r3, 800b22c <_vfiprintf_r+0x18>
 800b228:	f7fe f96c 	bl	8009504 <__sinit>
 800b22c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b22e:	07d9      	lsls	r1, r3, #31
 800b230:	d405      	bmi.n	800b23e <_vfiprintf_r+0x2a>
 800b232:	89ab      	ldrh	r3, [r5, #12]
 800b234:	059a      	lsls	r2, r3, #22
 800b236:	d402      	bmi.n	800b23e <_vfiprintf_r+0x2a>
 800b238:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b23a:	f7fe face 	bl	80097da <__retarget_lock_acquire_recursive>
 800b23e:	89ab      	ldrh	r3, [r5, #12]
 800b240:	071b      	lsls	r3, r3, #28
 800b242:	d501      	bpl.n	800b248 <_vfiprintf_r+0x34>
 800b244:	692b      	ldr	r3, [r5, #16]
 800b246:	b99b      	cbnz	r3, 800b270 <_vfiprintf_r+0x5c>
 800b248:	4629      	mov	r1, r5
 800b24a:	4630      	mov	r0, r6
 800b24c:	f000 f938 	bl	800b4c0 <__swsetup_r>
 800b250:	b170      	cbz	r0, 800b270 <_vfiprintf_r+0x5c>
 800b252:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b254:	07dc      	lsls	r4, r3, #31
 800b256:	d504      	bpl.n	800b262 <_vfiprintf_r+0x4e>
 800b258:	f04f 30ff 	mov.w	r0, #4294967295
 800b25c:	b01d      	add	sp, #116	@ 0x74
 800b25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b262:	89ab      	ldrh	r3, [r5, #12]
 800b264:	0598      	lsls	r0, r3, #22
 800b266:	d4f7      	bmi.n	800b258 <_vfiprintf_r+0x44>
 800b268:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b26a:	f7fe fab7 	bl	80097dc <__retarget_lock_release_recursive>
 800b26e:	e7f3      	b.n	800b258 <_vfiprintf_r+0x44>
 800b270:	2300      	movs	r3, #0
 800b272:	9309      	str	r3, [sp, #36]	@ 0x24
 800b274:	2320      	movs	r3, #32
 800b276:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b27a:	2330      	movs	r3, #48	@ 0x30
 800b27c:	f04f 0901 	mov.w	r9, #1
 800b280:	f8cd 800c 	str.w	r8, [sp, #12]
 800b284:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b430 <_vfiprintf_r+0x21c>
 800b288:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b28c:	4623      	mov	r3, r4
 800b28e:	469a      	mov	sl, r3
 800b290:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b294:	b10a      	cbz	r2, 800b29a <_vfiprintf_r+0x86>
 800b296:	2a25      	cmp	r2, #37	@ 0x25
 800b298:	d1f9      	bne.n	800b28e <_vfiprintf_r+0x7a>
 800b29a:	ebba 0b04 	subs.w	fp, sl, r4
 800b29e:	d00b      	beq.n	800b2b8 <_vfiprintf_r+0xa4>
 800b2a0:	465b      	mov	r3, fp
 800b2a2:	4622      	mov	r2, r4
 800b2a4:	4629      	mov	r1, r5
 800b2a6:	4630      	mov	r0, r6
 800b2a8:	f7ff ffa1 	bl	800b1ee <__sfputs_r>
 800b2ac:	3001      	adds	r0, #1
 800b2ae:	f000 80a7 	beq.w	800b400 <_vfiprintf_r+0x1ec>
 800b2b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b2b4:	445a      	add	r2, fp
 800b2b6:	9209      	str	r2, [sp, #36]	@ 0x24
 800b2b8:	f89a 3000 	ldrb.w	r3, [sl]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	f000 809f 	beq.w	800b400 <_vfiprintf_r+0x1ec>
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b2c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2cc:	f10a 0a01 	add.w	sl, sl, #1
 800b2d0:	9304      	str	r3, [sp, #16]
 800b2d2:	9307      	str	r3, [sp, #28]
 800b2d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b2d8:	931a      	str	r3, [sp, #104]	@ 0x68
 800b2da:	4654      	mov	r4, sl
 800b2dc:	2205      	movs	r2, #5
 800b2de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2e2:	4853      	ldr	r0, [pc, #332]	@ (800b430 <_vfiprintf_r+0x21c>)
 800b2e4:	f7fe fa83 	bl	80097ee <memchr>
 800b2e8:	9a04      	ldr	r2, [sp, #16]
 800b2ea:	b9d8      	cbnz	r0, 800b324 <_vfiprintf_r+0x110>
 800b2ec:	06d1      	lsls	r1, r2, #27
 800b2ee:	bf44      	itt	mi
 800b2f0:	2320      	movmi	r3, #32
 800b2f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b2f6:	0713      	lsls	r3, r2, #28
 800b2f8:	bf44      	itt	mi
 800b2fa:	232b      	movmi	r3, #43	@ 0x2b
 800b2fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b300:	f89a 3000 	ldrb.w	r3, [sl]
 800b304:	2b2a      	cmp	r3, #42	@ 0x2a
 800b306:	d015      	beq.n	800b334 <_vfiprintf_r+0x120>
 800b308:	4654      	mov	r4, sl
 800b30a:	2000      	movs	r0, #0
 800b30c:	f04f 0c0a 	mov.w	ip, #10
 800b310:	9a07      	ldr	r2, [sp, #28]
 800b312:	4621      	mov	r1, r4
 800b314:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b318:	3b30      	subs	r3, #48	@ 0x30
 800b31a:	2b09      	cmp	r3, #9
 800b31c:	d94b      	bls.n	800b3b6 <_vfiprintf_r+0x1a2>
 800b31e:	b1b0      	cbz	r0, 800b34e <_vfiprintf_r+0x13a>
 800b320:	9207      	str	r2, [sp, #28]
 800b322:	e014      	b.n	800b34e <_vfiprintf_r+0x13a>
 800b324:	eba0 0308 	sub.w	r3, r0, r8
 800b328:	fa09 f303 	lsl.w	r3, r9, r3
 800b32c:	4313      	orrs	r3, r2
 800b32e:	46a2      	mov	sl, r4
 800b330:	9304      	str	r3, [sp, #16]
 800b332:	e7d2      	b.n	800b2da <_vfiprintf_r+0xc6>
 800b334:	9b03      	ldr	r3, [sp, #12]
 800b336:	1d19      	adds	r1, r3, #4
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	9103      	str	r1, [sp, #12]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	bfbb      	ittet	lt
 800b340:	425b      	neglt	r3, r3
 800b342:	f042 0202 	orrlt.w	r2, r2, #2
 800b346:	9307      	strge	r3, [sp, #28]
 800b348:	9307      	strlt	r3, [sp, #28]
 800b34a:	bfb8      	it	lt
 800b34c:	9204      	strlt	r2, [sp, #16]
 800b34e:	7823      	ldrb	r3, [r4, #0]
 800b350:	2b2e      	cmp	r3, #46	@ 0x2e
 800b352:	d10a      	bne.n	800b36a <_vfiprintf_r+0x156>
 800b354:	7863      	ldrb	r3, [r4, #1]
 800b356:	2b2a      	cmp	r3, #42	@ 0x2a
 800b358:	d132      	bne.n	800b3c0 <_vfiprintf_r+0x1ac>
 800b35a:	9b03      	ldr	r3, [sp, #12]
 800b35c:	3402      	adds	r4, #2
 800b35e:	1d1a      	adds	r2, r3, #4
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	9203      	str	r2, [sp, #12]
 800b364:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b368:	9305      	str	r3, [sp, #20]
 800b36a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b434 <_vfiprintf_r+0x220>
 800b36e:	2203      	movs	r2, #3
 800b370:	4650      	mov	r0, sl
 800b372:	7821      	ldrb	r1, [r4, #0]
 800b374:	f7fe fa3b 	bl	80097ee <memchr>
 800b378:	b138      	cbz	r0, 800b38a <_vfiprintf_r+0x176>
 800b37a:	2240      	movs	r2, #64	@ 0x40
 800b37c:	9b04      	ldr	r3, [sp, #16]
 800b37e:	eba0 000a 	sub.w	r0, r0, sl
 800b382:	4082      	lsls	r2, r0
 800b384:	4313      	orrs	r3, r2
 800b386:	3401      	adds	r4, #1
 800b388:	9304      	str	r3, [sp, #16]
 800b38a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b38e:	2206      	movs	r2, #6
 800b390:	4829      	ldr	r0, [pc, #164]	@ (800b438 <_vfiprintf_r+0x224>)
 800b392:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b396:	f7fe fa2a 	bl	80097ee <memchr>
 800b39a:	2800      	cmp	r0, #0
 800b39c:	d03f      	beq.n	800b41e <_vfiprintf_r+0x20a>
 800b39e:	4b27      	ldr	r3, [pc, #156]	@ (800b43c <_vfiprintf_r+0x228>)
 800b3a0:	bb1b      	cbnz	r3, 800b3ea <_vfiprintf_r+0x1d6>
 800b3a2:	9b03      	ldr	r3, [sp, #12]
 800b3a4:	3307      	adds	r3, #7
 800b3a6:	f023 0307 	bic.w	r3, r3, #7
 800b3aa:	3308      	adds	r3, #8
 800b3ac:	9303      	str	r3, [sp, #12]
 800b3ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3b0:	443b      	add	r3, r7
 800b3b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3b4:	e76a      	b.n	800b28c <_vfiprintf_r+0x78>
 800b3b6:	460c      	mov	r4, r1
 800b3b8:	2001      	movs	r0, #1
 800b3ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3be:	e7a8      	b.n	800b312 <_vfiprintf_r+0xfe>
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	f04f 0c0a 	mov.w	ip, #10
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	3401      	adds	r4, #1
 800b3ca:	9305      	str	r3, [sp, #20]
 800b3cc:	4620      	mov	r0, r4
 800b3ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3d2:	3a30      	subs	r2, #48	@ 0x30
 800b3d4:	2a09      	cmp	r2, #9
 800b3d6:	d903      	bls.n	800b3e0 <_vfiprintf_r+0x1cc>
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d0c6      	beq.n	800b36a <_vfiprintf_r+0x156>
 800b3dc:	9105      	str	r1, [sp, #20]
 800b3de:	e7c4      	b.n	800b36a <_vfiprintf_r+0x156>
 800b3e0:	4604      	mov	r4, r0
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3e8:	e7f0      	b.n	800b3cc <_vfiprintf_r+0x1b8>
 800b3ea:	ab03      	add	r3, sp, #12
 800b3ec:	9300      	str	r3, [sp, #0]
 800b3ee:	462a      	mov	r2, r5
 800b3f0:	4630      	mov	r0, r6
 800b3f2:	4b13      	ldr	r3, [pc, #76]	@ (800b440 <_vfiprintf_r+0x22c>)
 800b3f4:	a904      	add	r1, sp, #16
 800b3f6:	f7fd fc3b 	bl	8008c70 <_printf_float>
 800b3fa:	4607      	mov	r7, r0
 800b3fc:	1c78      	adds	r0, r7, #1
 800b3fe:	d1d6      	bne.n	800b3ae <_vfiprintf_r+0x19a>
 800b400:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b402:	07d9      	lsls	r1, r3, #31
 800b404:	d405      	bmi.n	800b412 <_vfiprintf_r+0x1fe>
 800b406:	89ab      	ldrh	r3, [r5, #12]
 800b408:	059a      	lsls	r2, r3, #22
 800b40a:	d402      	bmi.n	800b412 <_vfiprintf_r+0x1fe>
 800b40c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b40e:	f7fe f9e5 	bl	80097dc <__retarget_lock_release_recursive>
 800b412:	89ab      	ldrh	r3, [r5, #12]
 800b414:	065b      	lsls	r3, r3, #25
 800b416:	f53f af1f 	bmi.w	800b258 <_vfiprintf_r+0x44>
 800b41a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b41c:	e71e      	b.n	800b25c <_vfiprintf_r+0x48>
 800b41e:	ab03      	add	r3, sp, #12
 800b420:	9300      	str	r3, [sp, #0]
 800b422:	462a      	mov	r2, r5
 800b424:	4630      	mov	r0, r6
 800b426:	4b06      	ldr	r3, [pc, #24]	@ (800b440 <_vfiprintf_r+0x22c>)
 800b428:	a904      	add	r1, sp, #16
 800b42a:	f7fd febf 	bl	80091ac <_printf_i>
 800b42e:	e7e4      	b.n	800b3fa <_vfiprintf_r+0x1e6>
 800b430:	0800c108 	.word	0x0800c108
 800b434:	0800c10e 	.word	0x0800c10e
 800b438:	0800c112 	.word	0x0800c112
 800b43c:	08008c71 	.word	0x08008c71
 800b440:	0800b1ef 	.word	0x0800b1ef

0800b444 <__swbuf_r>:
 800b444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b446:	460e      	mov	r6, r1
 800b448:	4614      	mov	r4, r2
 800b44a:	4605      	mov	r5, r0
 800b44c:	b118      	cbz	r0, 800b456 <__swbuf_r+0x12>
 800b44e:	6a03      	ldr	r3, [r0, #32]
 800b450:	b90b      	cbnz	r3, 800b456 <__swbuf_r+0x12>
 800b452:	f7fe f857 	bl	8009504 <__sinit>
 800b456:	69a3      	ldr	r3, [r4, #24]
 800b458:	60a3      	str	r3, [r4, #8]
 800b45a:	89a3      	ldrh	r3, [r4, #12]
 800b45c:	071a      	lsls	r2, r3, #28
 800b45e:	d501      	bpl.n	800b464 <__swbuf_r+0x20>
 800b460:	6923      	ldr	r3, [r4, #16]
 800b462:	b943      	cbnz	r3, 800b476 <__swbuf_r+0x32>
 800b464:	4621      	mov	r1, r4
 800b466:	4628      	mov	r0, r5
 800b468:	f000 f82a 	bl	800b4c0 <__swsetup_r>
 800b46c:	b118      	cbz	r0, 800b476 <__swbuf_r+0x32>
 800b46e:	f04f 37ff 	mov.w	r7, #4294967295
 800b472:	4638      	mov	r0, r7
 800b474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b476:	6823      	ldr	r3, [r4, #0]
 800b478:	6922      	ldr	r2, [r4, #16]
 800b47a:	b2f6      	uxtb	r6, r6
 800b47c:	1a98      	subs	r0, r3, r2
 800b47e:	6963      	ldr	r3, [r4, #20]
 800b480:	4637      	mov	r7, r6
 800b482:	4283      	cmp	r3, r0
 800b484:	dc05      	bgt.n	800b492 <__swbuf_r+0x4e>
 800b486:	4621      	mov	r1, r4
 800b488:	4628      	mov	r0, r5
 800b48a:	f7ff fdb1 	bl	800aff0 <_fflush_r>
 800b48e:	2800      	cmp	r0, #0
 800b490:	d1ed      	bne.n	800b46e <__swbuf_r+0x2a>
 800b492:	68a3      	ldr	r3, [r4, #8]
 800b494:	3b01      	subs	r3, #1
 800b496:	60a3      	str	r3, [r4, #8]
 800b498:	6823      	ldr	r3, [r4, #0]
 800b49a:	1c5a      	adds	r2, r3, #1
 800b49c:	6022      	str	r2, [r4, #0]
 800b49e:	701e      	strb	r6, [r3, #0]
 800b4a0:	6962      	ldr	r2, [r4, #20]
 800b4a2:	1c43      	adds	r3, r0, #1
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d004      	beq.n	800b4b2 <__swbuf_r+0x6e>
 800b4a8:	89a3      	ldrh	r3, [r4, #12]
 800b4aa:	07db      	lsls	r3, r3, #31
 800b4ac:	d5e1      	bpl.n	800b472 <__swbuf_r+0x2e>
 800b4ae:	2e0a      	cmp	r6, #10
 800b4b0:	d1df      	bne.n	800b472 <__swbuf_r+0x2e>
 800b4b2:	4621      	mov	r1, r4
 800b4b4:	4628      	mov	r0, r5
 800b4b6:	f7ff fd9b 	bl	800aff0 <_fflush_r>
 800b4ba:	2800      	cmp	r0, #0
 800b4bc:	d0d9      	beq.n	800b472 <__swbuf_r+0x2e>
 800b4be:	e7d6      	b.n	800b46e <__swbuf_r+0x2a>

0800b4c0 <__swsetup_r>:
 800b4c0:	b538      	push	{r3, r4, r5, lr}
 800b4c2:	4b29      	ldr	r3, [pc, #164]	@ (800b568 <__swsetup_r+0xa8>)
 800b4c4:	4605      	mov	r5, r0
 800b4c6:	6818      	ldr	r0, [r3, #0]
 800b4c8:	460c      	mov	r4, r1
 800b4ca:	b118      	cbz	r0, 800b4d4 <__swsetup_r+0x14>
 800b4cc:	6a03      	ldr	r3, [r0, #32]
 800b4ce:	b90b      	cbnz	r3, 800b4d4 <__swsetup_r+0x14>
 800b4d0:	f7fe f818 	bl	8009504 <__sinit>
 800b4d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4d8:	0719      	lsls	r1, r3, #28
 800b4da:	d422      	bmi.n	800b522 <__swsetup_r+0x62>
 800b4dc:	06da      	lsls	r2, r3, #27
 800b4de:	d407      	bmi.n	800b4f0 <__swsetup_r+0x30>
 800b4e0:	2209      	movs	r2, #9
 800b4e2:	602a      	str	r2, [r5, #0]
 800b4e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4ec:	81a3      	strh	r3, [r4, #12]
 800b4ee:	e033      	b.n	800b558 <__swsetup_r+0x98>
 800b4f0:	0758      	lsls	r0, r3, #29
 800b4f2:	d512      	bpl.n	800b51a <__swsetup_r+0x5a>
 800b4f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b4f6:	b141      	cbz	r1, 800b50a <__swsetup_r+0x4a>
 800b4f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b4fc:	4299      	cmp	r1, r3
 800b4fe:	d002      	beq.n	800b506 <__swsetup_r+0x46>
 800b500:	4628      	mov	r0, r5
 800b502:	f7fe ffd5 	bl	800a4b0 <_free_r>
 800b506:	2300      	movs	r3, #0
 800b508:	6363      	str	r3, [r4, #52]	@ 0x34
 800b50a:	89a3      	ldrh	r3, [r4, #12]
 800b50c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b510:	81a3      	strh	r3, [r4, #12]
 800b512:	2300      	movs	r3, #0
 800b514:	6063      	str	r3, [r4, #4]
 800b516:	6923      	ldr	r3, [r4, #16]
 800b518:	6023      	str	r3, [r4, #0]
 800b51a:	89a3      	ldrh	r3, [r4, #12]
 800b51c:	f043 0308 	orr.w	r3, r3, #8
 800b520:	81a3      	strh	r3, [r4, #12]
 800b522:	6923      	ldr	r3, [r4, #16]
 800b524:	b94b      	cbnz	r3, 800b53a <__swsetup_r+0x7a>
 800b526:	89a3      	ldrh	r3, [r4, #12]
 800b528:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b52c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b530:	d003      	beq.n	800b53a <__swsetup_r+0x7a>
 800b532:	4621      	mov	r1, r4
 800b534:	4628      	mov	r0, r5
 800b536:	f000 f83e 	bl	800b5b6 <__smakebuf_r>
 800b53a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b53e:	f013 0201 	ands.w	r2, r3, #1
 800b542:	d00a      	beq.n	800b55a <__swsetup_r+0x9a>
 800b544:	2200      	movs	r2, #0
 800b546:	60a2      	str	r2, [r4, #8]
 800b548:	6962      	ldr	r2, [r4, #20]
 800b54a:	4252      	negs	r2, r2
 800b54c:	61a2      	str	r2, [r4, #24]
 800b54e:	6922      	ldr	r2, [r4, #16]
 800b550:	b942      	cbnz	r2, 800b564 <__swsetup_r+0xa4>
 800b552:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b556:	d1c5      	bne.n	800b4e4 <__swsetup_r+0x24>
 800b558:	bd38      	pop	{r3, r4, r5, pc}
 800b55a:	0799      	lsls	r1, r3, #30
 800b55c:	bf58      	it	pl
 800b55e:	6962      	ldrpl	r2, [r4, #20]
 800b560:	60a2      	str	r2, [r4, #8]
 800b562:	e7f4      	b.n	800b54e <__swsetup_r+0x8e>
 800b564:	2000      	movs	r0, #0
 800b566:	e7f7      	b.n	800b558 <__swsetup_r+0x98>
 800b568:	2000001c 	.word	0x2000001c

0800b56c <__swhatbuf_r>:
 800b56c:	b570      	push	{r4, r5, r6, lr}
 800b56e:	460c      	mov	r4, r1
 800b570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b574:	4615      	mov	r5, r2
 800b576:	2900      	cmp	r1, #0
 800b578:	461e      	mov	r6, r3
 800b57a:	b096      	sub	sp, #88	@ 0x58
 800b57c:	da0c      	bge.n	800b598 <__swhatbuf_r+0x2c>
 800b57e:	89a3      	ldrh	r3, [r4, #12]
 800b580:	2100      	movs	r1, #0
 800b582:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b586:	bf14      	ite	ne
 800b588:	2340      	movne	r3, #64	@ 0x40
 800b58a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b58e:	2000      	movs	r0, #0
 800b590:	6031      	str	r1, [r6, #0]
 800b592:	602b      	str	r3, [r5, #0]
 800b594:	b016      	add	sp, #88	@ 0x58
 800b596:	bd70      	pop	{r4, r5, r6, pc}
 800b598:	466a      	mov	r2, sp
 800b59a:	f000 f849 	bl	800b630 <_fstat_r>
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	dbed      	blt.n	800b57e <__swhatbuf_r+0x12>
 800b5a2:	9901      	ldr	r1, [sp, #4]
 800b5a4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b5a8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b5ac:	4259      	negs	r1, r3
 800b5ae:	4159      	adcs	r1, r3
 800b5b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b5b4:	e7eb      	b.n	800b58e <__swhatbuf_r+0x22>

0800b5b6 <__smakebuf_r>:
 800b5b6:	898b      	ldrh	r3, [r1, #12]
 800b5b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5ba:	079d      	lsls	r5, r3, #30
 800b5bc:	4606      	mov	r6, r0
 800b5be:	460c      	mov	r4, r1
 800b5c0:	d507      	bpl.n	800b5d2 <__smakebuf_r+0x1c>
 800b5c2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b5c6:	6023      	str	r3, [r4, #0]
 800b5c8:	6123      	str	r3, [r4, #16]
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	6163      	str	r3, [r4, #20]
 800b5ce:	b003      	add	sp, #12
 800b5d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5d2:	466a      	mov	r2, sp
 800b5d4:	ab01      	add	r3, sp, #4
 800b5d6:	f7ff ffc9 	bl	800b56c <__swhatbuf_r>
 800b5da:	9f00      	ldr	r7, [sp, #0]
 800b5dc:	4605      	mov	r5, r0
 800b5de:	4639      	mov	r1, r7
 800b5e0:	4630      	mov	r0, r6
 800b5e2:	f7fd fa1b 	bl	8008a1c <_malloc_r>
 800b5e6:	b948      	cbnz	r0, 800b5fc <__smakebuf_r+0x46>
 800b5e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5ec:	059a      	lsls	r2, r3, #22
 800b5ee:	d4ee      	bmi.n	800b5ce <__smakebuf_r+0x18>
 800b5f0:	f023 0303 	bic.w	r3, r3, #3
 800b5f4:	f043 0302 	orr.w	r3, r3, #2
 800b5f8:	81a3      	strh	r3, [r4, #12]
 800b5fa:	e7e2      	b.n	800b5c2 <__smakebuf_r+0xc>
 800b5fc:	89a3      	ldrh	r3, [r4, #12]
 800b5fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b602:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b606:	81a3      	strh	r3, [r4, #12]
 800b608:	9b01      	ldr	r3, [sp, #4]
 800b60a:	6020      	str	r0, [r4, #0]
 800b60c:	b15b      	cbz	r3, 800b626 <__smakebuf_r+0x70>
 800b60e:	4630      	mov	r0, r6
 800b610:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b614:	f000 f81e 	bl	800b654 <_isatty_r>
 800b618:	b128      	cbz	r0, 800b626 <__smakebuf_r+0x70>
 800b61a:	89a3      	ldrh	r3, [r4, #12]
 800b61c:	f023 0303 	bic.w	r3, r3, #3
 800b620:	f043 0301 	orr.w	r3, r3, #1
 800b624:	81a3      	strh	r3, [r4, #12]
 800b626:	89a3      	ldrh	r3, [r4, #12]
 800b628:	431d      	orrs	r5, r3
 800b62a:	81a5      	strh	r5, [r4, #12]
 800b62c:	e7cf      	b.n	800b5ce <__smakebuf_r+0x18>
	...

0800b630 <_fstat_r>:
 800b630:	b538      	push	{r3, r4, r5, lr}
 800b632:	2300      	movs	r3, #0
 800b634:	4d06      	ldr	r5, [pc, #24]	@ (800b650 <_fstat_r+0x20>)
 800b636:	4604      	mov	r4, r0
 800b638:	4608      	mov	r0, r1
 800b63a:	4611      	mov	r1, r2
 800b63c:	602b      	str	r3, [r5, #0]
 800b63e:	f7fa fb11 	bl	8005c64 <_fstat>
 800b642:	1c43      	adds	r3, r0, #1
 800b644:	d102      	bne.n	800b64c <_fstat_r+0x1c>
 800b646:	682b      	ldr	r3, [r5, #0]
 800b648:	b103      	cbz	r3, 800b64c <_fstat_r+0x1c>
 800b64a:	6023      	str	r3, [r4, #0]
 800b64c:	bd38      	pop	{r3, r4, r5, pc}
 800b64e:	bf00      	nop
 800b650:	20000548 	.word	0x20000548

0800b654 <_isatty_r>:
 800b654:	b538      	push	{r3, r4, r5, lr}
 800b656:	2300      	movs	r3, #0
 800b658:	4d05      	ldr	r5, [pc, #20]	@ (800b670 <_isatty_r+0x1c>)
 800b65a:	4604      	mov	r4, r0
 800b65c:	4608      	mov	r0, r1
 800b65e:	602b      	str	r3, [r5, #0]
 800b660:	f7fa fb0f 	bl	8005c82 <_isatty>
 800b664:	1c43      	adds	r3, r0, #1
 800b666:	d102      	bne.n	800b66e <_isatty_r+0x1a>
 800b668:	682b      	ldr	r3, [r5, #0]
 800b66a:	b103      	cbz	r3, 800b66e <_isatty_r+0x1a>
 800b66c:	6023      	str	r3, [r4, #0]
 800b66e:	bd38      	pop	{r3, r4, r5, pc}
 800b670:	20000548 	.word	0x20000548

0800b674 <_init>:
 800b674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b676:	bf00      	nop
 800b678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b67a:	bc08      	pop	{r3}
 800b67c:	469e      	mov	lr, r3
 800b67e:	4770      	bx	lr

0800b680 <_fini>:
 800b680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b682:	bf00      	nop
 800b684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b686:	bc08      	pop	{r3}
 800b688:	469e      	mov	lr, r3
 800b68a:	4770      	bx	lr
